digraph  {
m0_204 [cluster="System.Text.StringBuilder.Append(char)", file="FSharpOptionHelper.cs", label="Entry System.Text.StringBuilder.Append(char)", span="0-0"];
m0_87 [cluster="CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)", file="FSharpOptionHelper.cs", label="Entry CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)", span="271-271"];
m0_94 [cluster="CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)", file="FSharpOptionHelper.cs", label="parserResult == null", span="273-273"];
m0_96 [cluster="CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)", file="FSharpOptionHelper.cs", label="current == null", span="274-274"];
m0_98 [cluster="CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)", file="FSharpOptionHelper.cs", label="FilterMeaningfulErrors(((NotParsed<T>)parserResult).Errors).Empty()", span="276-276"];
m0_99 [cluster="CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)", file="FSharpOptionHelper.cs", label="return current;", span="277-277"];
m0_100 [cluster="CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)", file="FSharpOptionHelper.cs", label="var errors = RenderParsingErrorsText(parserResult,\r\n                current.SentenceBuilder.FormatError,\r\n                current.SentenceBuilder.FormatMutuallyExclusiveSetErrors,\r\n                2)", span="279-282"];
m0_102 [cluster="CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)", file="FSharpOptionHelper.cs", label="return current;", span="284-284"];
m0_103 [cluster="CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)", file="FSharpOptionHelper.cs", label="current.AddPreOptionsLine(\r\n                string.Concat(Environment.NewLine, current.SentenceBuilder.ErrorsHeadingText()))", span="286-287"];
m0_105 [cluster="CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)", file="FSharpOptionHelper.cs", label="lines.ForEach(\r\n                line => current.AddPreOptionsLine(line))", span="290-291"];
m0_106 [cluster="CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)", file="FSharpOptionHelper.cs", label="return current;", span="293-293"];
m0_95 [cluster="CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)", file="FSharpOptionHelper.cs", label="throw new ArgumentNullException(''parserResult'');", span="273-273"];
m0_97 [cluster="CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)", file="FSharpOptionHelper.cs", label="throw new ArgumentNullException(''current'');", span="274-274"];
m0_101 [cluster="CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)", file="FSharpOptionHelper.cs", label="string.IsNullOrEmpty(errors)", span="283-283"];
m0_104 [cluster="CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)", file="FSharpOptionHelper.cs", label="var lines = errors.Split(\r\n                new[] { Environment.NewLine }, StringSplitOptions.None)", span="288-289"];
m0_107 [cluster="CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)", file="FSharpOptionHelper.cs", label="Exit CommandLine.Text.HelpText.DefaultParsingErrorsHandler<T>(CommandLine.ParserResult<T>, CommandLine.Text.HelpText)", span="271-271"];
m0_108 [cluster="System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", file="FSharpOptionHelper.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", span="31-31"];
m0_46 [cluster="Unk.Any", file="FSharpOptionHelper.cs", label="Entry Unk.Any", span=""];
m0_180 [cluster="System.Text.StringBuilder.AppendLine(string)", file="FSharpOptionHelper.cs", label="Entry System.Text.StringBuilder.AppendLine(string)", span="0-0"];
m0_0 [cluster="CommandLine.Text.HelpText.HelpText()", file="FSharpOptionHelper.cs", label="Entry CommandLine.Text.HelpText.HelpText()", span="36-36"];
m0_1 [cluster="CommandLine.Text.HelpText.HelpText()", file="FSharpOptionHelper.cs", label="Exit CommandLine.Text.HelpText.HelpText()", span="36-36"];
m0_329 [cluster="string.PadRight(int)", file="FSharpOptionHelper.cs", label="Entry string.PadRight(int)", span="0-0"];
m0_411 [cluster="T.ToStringInvariant<T>()", file="FSharpOptionHelper.cs", label="Entry T.ToStringInvariant<T>()", span="15-15"];
m0_274 [cluster="System.Tuple.Create<T1, T2>(T1, T2)", file="FSharpOptionHelper.cs", label="Entry System.Tuple.Create<T1, T2>(T1, T2)", span="0-0"];
m0_49 [cluster="CommandLine.Text.HelpText.AddOptions<T>(CommandLine.ParserResult<T>)", file="FSharpOptionHelper.cs", label="Entry CommandLine.Text.HelpText.AddOptions<T>(CommandLine.ParserResult<T>)", span="331-331"];
m0_129 [cluster="CommandLine.Text.HelpText.AddOptions<T>(CommandLine.ParserResult<T>)", file="FSharpOptionHelper.cs", label="result == null", span="334-334"];
m0_131 [cluster="CommandLine.Text.HelpText.AddOptions<T>(CommandLine.ParserResult<T>)", file="FSharpOptionHelper.cs", label="return AddOptionsImpl(\r\n                GetSpecificationsFromType(result.TypeInfo.Current),\r\n                SentenceBuilder.RequiredWord(),\r\n                MaximumDisplayWidth);", span="336-339"];
m0_130 [cluster="CommandLine.Text.HelpText.AddOptions<T>(CommandLine.ParserResult<T>)", file="FSharpOptionHelper.cs", label="throw new ArgumentNullException(''result'');", span="334-334"];
m0_132 [cluster="CommandLine.Text.HelpText.AddOptions<T>(CommandLine.ParserResult<T>)", file="FSharpOptionHelper.cs", label="Exit CommandLine.Text.HelpText.AddOptions<T>(CommandLine.ParserResult<T>)", span="331-331"];
m0_219 [cluster="System.Text.StringBuilder.SafeToString()", file="FSharpOptionHelper.cs", label="Entry System.Text.StringBuilder.SafeToString()", span="66-66"];
m0_218 [cluster="System.Text.StringBuilder.AppendWhen(bool, params string[])", file="FSharpOptionHelper.cs", label="Entry System.Text.StringBuilder.AppendWhen(bool, params string[])", span="9-9"];
m0_77 [cluster="CommandLine.TypeInfo.Create(System.Type)", file="FSharpOptionHelper.cs", label="Entry CommandLine.TypeInfo.Create(System.Type)", span="29-29"];
m0_75 [cluster="System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", file="FSharpOptionHelper.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", span="0-0"];
m0_353 [cluster="System.Text.StringBuilder.AppendFormat(string, object)", file="FSharpOptionHelper.cs", label="Entry System.Text.StringBuilder.AppendFormat(string, object)", span="0-0"];
m0_167 [cluster="System.Text.StringBuilder.AppendIfNotEmpty(params string[])", file="FSharpOptionHelper.cs", label="Entry System.Text.StringBuilder.AppendIfNotEmpty(params string[])", span="57-57"];
m0_121 [cluster="CommandLine.Text.HelpText.ToString()", file="FSharpOptionHelper.cs", label="Entry CommandLine.Text.HelpText.ToString()", span="474-474"];
m0_213 [cluster="CommandLine.Text.HelpText.ToString()", file="FSharpOptionHelper.cs", label="int ExtraLength = 10", span="476-476"];
m0_214 [cluster="CommandLine.Text.HelpText.ToString()", file="FSharpOptionHelper.cs", label="return\r\n                new StringBuilder(\r\n                    heading.SafeLength() + copyright.SafeLength() + preOptionsHelp.SafeLength() +\r\n                        optionsHelp.SafeLength() + ExtraLength).Append(heading)\r\n                    .AppendWhen(!string.IsNullOrEmpty(copyright), Environment.NewLine, copyright)\r\n                    .AppendWhen(preOptionsHelp.Length > 0, Environment.NewLine, preOptionsHelp.ToString())\r\n                    .AppendWhen(\r\n                        optionsHelp != null && optionsHelp.Length > 0,\r\n                        Environment.NewLine,\r\n                        Environment.NewLine,\r\n                        optionsHelp.SafeToString())\r\n                    .AppendWhen(postOptionsHelp.Length > 0, Environment.NewLine, postOptionsHelp.ToString())\r\n                .ToString();", span="477-489"];
m0_215 [cluster="CommandLine.Text.HelpText.ToString()", file="FSharpOptionHelper.cs", label="Exit CommandLine.Text.HelpText.ToString()", span="474-474"];
m0_216 [cluster="string.SafeLength()", file="FSharpOptionHelper.cs", label="Entry string.SafeLength()", span="40-40"];
m0_125 [cluster="CommandLine.Text.HelpText.AddPostOptionsLine(string)", file="FSharpOptionHelper.cs", label="Entry CommandLine.Text.HelpText.AddPostOptionsLine(string)", span="321-321"];
m0_126 [cluster="CommandLine.Text.HelpText.AddPostOptionsLine(string)", file="FSharpOptionHelper.cs", label="return AddLine(postOptionsHelp, value);", span="323-323"];
m0_127 [cluster="CommandLine.Text.HelpText.AddPostOptionsLine(string)", file="FSharpOptionHelper.cs", label="Exit CommandLine.Text.HelpText.AddPostOptionsLine(string)", span="321-321"];
m0_110 [cluster="string.IsNullOrEmpty(string)", file="FSharpOptionHelper.cs", label="Entry string.IsNullOrEmpty(string)", span="0-0"];
m0_202 [cluster="CSharpx.Maybe<T>.FromJust<T>()", file="FSharpOptionHelper.cs", label="Entry CSharpx.Maybe<T>.FromJust<T>()", span="342-342"];
m0_377 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", file="FSharpOptionHelper.cs", label="Entry CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", span="746-746"];
m0_380 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", file="FSharpOptionHelper.cs", label="var specLength = 0", span="748-748"];
m0_381 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", file="FSharpOptionHelper.cs", label="var hasShort = spec.ShortName.Length > 0", span="750-750"];
m0_382 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", file="FSharpOptionHelper.cs", label="var hasLong = spec.LongName.Length > 0", span="751-751"];
m0_384 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", file="FSharpOptionHelper.cs", label="spec.MetaValue.Length > 0", span="754-754"];
m0_385 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", file="FSharpOptionHelper.cs", label="metaLength = spec.MetaValue.Length + 1", span="755-755"];
m0_392 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", file="FSharpOptionHelper.cs", label="specLength += spec.LongName.Length", span="768-768"];
m0_387 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", file="FSharpOptionHelper.cs", label="++specLength", span="759-759"];
m0_397 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", file="FSharpOptionHelper.cs", label="specLength += 2", span="776-776"];
m0_398 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", file="FSharpOptionHelper.cs", label="return specLength;", span="778-778"];
m0_386 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", file="FSharpOptionHelper.cs", label=hasShort, span="757-757"];
m0_396 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", file="FSharpOptionHelper.cs", label="hasShort && hasLong", span="775-775"];
m0_383 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", file="FSharpOptionHelper.cs", label="var metaLength = 0", span="753-753"];
m0_391 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", file="FSharpOptionHelper.cs", label=hasLong, span="766-766"];
m0_390 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", file="FSharpOptionHelper.cs", label="specLength += metaLength", span="763-763"];
m0_395 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", file="FSharpOptionHelper.cs", label="specLength += metaLength", span="772-772"];
m0_388 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", file="FSharpOptionHelper.cs", label=AddDashesToOption, span="760-760"];
m0_389 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", file="FSharpOptionHelper.cs", label="++specLength", span="761-761"];
m0_393 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", file="FSharpOptionHelper.cs", label=AddDashesToOption, span="769-769"];
m0_394 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", file="FSharpOptionHelper.cs", label="specLength += 2", span="770-770"];
m0_399 [cluster="CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", file="FSharpOptionHelper.cs", label="Exit CommandLine.Text.HelpText.GetMaxOptionLength(CommandLine.Core.OptionSpecification)", span="746-746"];
m0_205 [cluster="CommandLine.Text.Example.GetFormatStylesOrDefault()", file="FSharpOptionHelper.cs", label="Entry CommandLine.Text.Example.GetFormatStylesOrDefault()", span="111-111"];
m0_275 [cluster="CommandLine.Text.HelpText.AdaptVerbsToSpecifications(System.Collections.Generic.IEnumerable<System.Type>)", file="FSharpOptionHelper.cs", label="return (from verbTuple in Verb.SelectFromTypes(types)\r\n                    select\r\n                        OptionSpecification.NewSwitch(\r\n                            string.Empty,\r\n                            verbTuple.Item1.Name,\r\n                            false,\r\n                            verbTuple.Item1.HelpText,\r\n                            string.Empty)).Concat(new[] { MakeHelpEntry(), MakeVersionEntry() });", span="571-578"];
m0_142 [cluster="CommandLine.Text.HelpText.AdaptVerbsToSpecifications(System.Collections.Generic.IEnumerable<System.Type>)", file="FSharpOptionHelper.cs", label="Entry CommandLine.Text.HelpText.AdaptVerbsToSpecifications(System.Collections.Generic.IEnumerable<System.Type>)", span="569-569"];
m0_276 [cluster="CommandLine.Text.HelpText.AdaptVerbsToSpecifications(System.Collections.Generic.IEnumerable<System.Type>)", file="FSharpOptionHelper.cs", label="Exit CommandLine.Text.HelpText.AdaptVerbsToSpecifications(System.Collections.Generic.IEnumerable<System.Type>)", span="569-569"];
m0_332 [cluster="string.Trim()", file="FSharpOptionHelper.cs", label="Entry string.Trim()", span="0-0"];
m0_217 [cluster="System.Text.StringBuilder.SafeLength()", file="FSharpOptionHelper.cs", label="Entry System.Text.StringBuilder.SafeLength()", span="73-73"];
m0_277 [cluster="CommandLine.Core.Verb.SelectFromTypes(System.Collections.Generic.IEnumerable<System.Type>)", file="FSharpOptionHelper.cs", label="Entry CommandLine.Core.Verb.SelectFromTypes(System.Collections.Generic.IEnumerable<System.Type>)", span="40-40"];
m0_331 [cluster="string.FormatInvariant(params object[])", file="FSharpOptionHelper.cs", label="Entry string.FormatInvariant(params object[])", span="20-20"];
m0_23 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="FSharpOptionHelper.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m0_249 [cluster="string.Substring(int)", file="FSharpOptionHelper.cs", label="Entry string.Substring(int)", span="0-0"];
m0_109 [cluster="CommandLine.Text.HelpText.RenderParsingErrorsText<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.MutuallyExclusiveSetError>, string>, int)", file="FSharpOptionHelper.cs", label="Entry CommandLine.Text.HelpText.RenderParsingErrorsText<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.MutuallyExclusiveSetError>, string>, int)", span="398-398"];
m0_155 [cluster="CommandLine.Text.HelpText.RenderParsingErrorsText<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.MutuallyExclusiveSetError>, string>, int)", file="FSharpOptionHelper.cs", label="parserResult == null", span="404-404"];
m0_157 [cluster="CommandLine.Text.HelpText.RenderParsingErrorsText<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.MutuallyExclusiveSetError>, string>, int)", file="FSharpOptionHelper.cs", label="var meaningfulErrors =\r\n                FilterMeaningfulErrors(((NotParsed<T>)parserResult).Errors)", span="406-407"];
m0_161 [cluster="CommandLine.Text.HelpText.RenderParsingErrorsText<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.MutuallyExclusiveSetError>, string>, int)", file="FSharpOptionHelper.cs", label="meaningfulErrors\r\n                .Where(e => e.Tag != ErrorType.MutuallyExclusiveSetError)\r\n                .ForEach(\r\n                    error =>\r\n                        {\r\n                            var line = new StringBuilder(indent.Spaces())\r\n                                .Append(formatError(error)); \r\n                            text.AppendLine(line.ToString());\r\n                        })", span="412-420"];
m0_162 [cluster="CommandLine.Text.HelpText.RenderParsingErrorsText<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.MutuallyExclusiveSetError>, string>, int)", file="FSharpOptionHelper.cs", label="return text.AppendIfNotEmpty(\r\n                formatMutuallyExclusiveSetErrors(\r\n                    meaningfulErrors.OfType<MutuallyExclusiveSetError>()))\r\n                .ToString();", span="422-425"];
m0_156 [cluster="CommandLine.Text.HelpText.RenderParsingErrorsText<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.MutuallyExclusiveSetError>, string>, int)", file="FSharpOptionHelper.cs", label="throw new ArgumentNullException(''parserResult'');", span="404-404"];
m0_158 [cluster="CommandLine.Text.HelpText.RenderParsingErrorsText<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.MutuallyExclusiveSetError>, string>, int)", file="FSharpOptionHelper.cs", label="meaningfulErrors.Empty()", span="408-408"];
m0_159 [cluster="CommandLine.Text.HelpText.RenderParsingErrorsText<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.MutuallyExclusiveSetError>, string>, int)", file="FSharpOptionHelper.cs", label="return string.Empty;", span="409-409"];
m0_160 [cluster="CommandLine.Text.HelpText.RenderParsingErrorsText<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.MutuallyExclusiveSetError>, string>, int)", file="FSharpOptionHelper.cs", label="var text = new StringBuilder()", span="411-411"];
m0_163 [cluster="CommandLine.Text.HelpText.RenderParsingErrorsText<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.MutuallyExclusiveSetError>, string>, int)", file="FSharpOptionHelper.cs", label="Exit CommandLine.Text.HelpText.RenderParsingErrorsText<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Error, string>, System.Func<System.Collections.Generic.IEnumerable<CommandLine.MutuallyExclusiveSetError>, string>, int)", span="398-398"];
m0_41 [cluster="CommandLine.Text.HelpText.FilterMeaningfulErrors(System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="FSharpOptionHelper.cs", label="Entry CommandLine.Text.HelpText.FilterMeaningfulErrors(System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="492-492"];
m0_220 [cluster="CommandLine.Text.HelpText.FilterMeaningfulErrors(System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="FSharpOptionHelper.cs", label="return errors.Where(e => e.Tag != ErrorType.HelpRequestedError && e.Tag != ErrorType.HelpVerbRequestedError);", span="494-494"];
m0_221 [cluster="CommandLine.Text.HelpText.FilterMeaningfulErrors(System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="FSharpOptionHelper.cs", label="Exit CommandLine.Text.HelpText.FilterMeaningfulErrors(System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="492-492"];
m0_265 [cluster="System.Type.GetUsageData()", file="FSharpOptionHelper.cs", label="Entry System.Type.GetUsageData()", span="39-39"];
m0_352 [cluster="System.Text.StringBuilder.AppendWhen(bool, params char[])", file="FSharpOptionHelper.cs", label="Entry System.Text.StringBuilder.AppendWhen(bool, params char[])", span="18-18"];
m0_47 [cluster="System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", file="FSharpOptionHelper.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", span="0-0"];
m0_203 [cluster="CommandLine.Infrastructure.ReflectionHelper.GetAssemblyName()", file="FSharpOptionHelper.cs", label="Entry CommandLine.Infrastructure.ReflectionHelper.GetAssemblyName()", span="23-23"];
m0_44 [cluster="CommandLine.Infrastructure.ReflectionHelper.GetAttribute<TAttribute>()", file="FSharpOptionHelper.cs", label="Entry CommandLine.Infrastructure.ReflectionHelper.GetAttribute<TAttribute>()", span="12-12"];
m0_290 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="FSharpOptionHelper.cs", label="Entry CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", span="626-626"];
m0_298 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="FSharpOptionHelper.cs", label="optionsHelp.Append(''  '')", span="628-628"];
m0_299 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="FSharpOptionHelper.cs", label="var name = new StringBuilder(maxLength)\r\n                .BimapIf(\r\n                    specification.Tag == SpecificationType.Option,\r\n                    it => it.Append(AddOptionName(maxLength, (OptionSpecification)specification)),\r\n                    it => it.Append(AddValueName(maxLength, (ValueSpecification)specification)))", span="629-633"];
m0_300 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="FSharpOptionHelper.cs", label="optionsHelp\r\n                .Append(name.Length < maxLength ? name.ToString().PadRight(maxLength) : name.ToString())\r\n                .Append(''    '')", span="635-637"];
m0_301 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="FSharpOptionHelper.cs", label="var optionHelpText = specification.HelpText", span="639-639"];
m0_302 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="FSharpOptionHelper.cs", label="addEnumValuesToHelpText && specification.EnumValues.Any()", span="641-641"];
m0_303 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="FSharpOptionHelper.cs", label="optionHelpText += '' Valid values: '' + string.Join('', '', specification.EnumValues)", span="642-642"];
m0_304 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="FSharpOptionHelper.cs", label="specification.DefaultValue.Do(\r\n                defaultValue => optionHelpText = ''(Default: {0}) ''.FormatLocal(defaultValue) + optionHelpText)", span="644-645"];
m0_305 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="FSharpOptionHelper.cs", label="specification.Required", span="647-647"];
m0_306 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="FSharpOptionHelper.cs", label="optionHelpText = ''{0} ''.FormatInvariant(requiredWord) + optionHelpText", span="648-648"];
m0_312 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="FSharpOptionHelper.cs", label="words[i].Length < (widthOfHelpText - wordBuffer)", span="658-658"];
m0_315 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="FSharpOptionHelper.cs", label="(widthOfHelpText - wordBuffer) > 1 && i != words.Length - 1", span="662-662"];
m0_318 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="FSharpOptionHelper.cs", label="words[i].Length >= widthOfHelpText && wordBuffer == 0", span="668-668"];
m0_319 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="FSharpOptionHelper.cs", label="optionsHelp.Append(words[i].Substring(0, widthOfHelpText))", span="670-670"];
m0_320 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="FSharpOptionHelper.cs", label="wordBuffer = widthOfHelpText", span="671-671"];
m0_323 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="FSharpOptionHelper.cs", label="optionsHelp.AppendWhen(optionHelpText.Length > 0, Environment.NewLine,\r\n                        new string(' ', maxLength + 6))", span="679-680"];
m0_324 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="FSharpOptionHelper.cs", label="optionHelpText.Length > widthOfHelpText", span="682-682"];
m0_307 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="FSharpOptionHelper.cs", label="!string.IsNullOrEmpty(optionHelpText)", span="650-650"];
m0_309 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="FSharpOptionHelper.cs", label="var words = optionHelpText.Split(' ')", span="655-655"];
m0_322 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="FSharpOptionHelper.cs", label="optionHelpText = optionHelpText.Substring(Math.Min(wordBuffer, optionHelpText.Length)).Trim()", span="678-678"];
m0_325 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="FSharpOptionHelper.cs", label="optionsHelp\r\n                .Append(optionHelpText)\r\n                .Append(Environment.NewLine)\r\n                .AppendWhen(additionalNewLineAfterOption, Environment.NewLine)", span="685-688"];
m0_308 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="FSharpOptionHelper.cs", label="var wordBuffer = 0", span="654-654"];
m0_314 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="FSharpOptionHelper.cs", label="wordBuffer += words[i].Length", span="661-661"];
m0_310 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="FSharpOptionHelper.cs", label="var i = 0", span="656-656"];
m0_311 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="FSharpOptionHelper.cs", label="i < words.Length", span="656-656"];
m0_313 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="FSharpOptionHelper.cs", label="optionsHelp.Append(words[i])", span="660-660"];
m0_321 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="FSharpOptionHelper.cs", label="i++", span="656-656"];
m0_317 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="FSharpOptionHelper.cs", label="wordBuffer++", span="665-665"];
m0_316 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="FSharpOptionHelper.cs", label="optionsHelp.Append('' '')", span="664-664"];
m0_326 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="FSharpOptionHelper.cs", label="return this;", span="690-690"];
m0_327 [cluster="CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", file="FSharpOptionHelper.cs", label="Exit CommandLine.Text.HelpText.AddOption(string, int, CommandLine.Core.Specification, int)", span="626-626"];
m0_294 [cluster="CommandLine.Text.HelpText.MakeVersionEntry()", file="FSharpOptionHelper.cs", label="Exit CommandLine.Text.HelpText.MakeVersionEntry()", span="609-609"];
m0_257 [cluster="CommandLine.Text.HelpText.MakeVersionEntry()", file="FSharpOptionHelper.cs", label="Entry CommandLine.Text.HelpText.MakeVersionEntry()", span="609-609"];
m0_293 [cluster="CommandLine.Text.HelpText.MakeVersionEntry()", file="FSharpOptionHelper.cs", label="return OptionSpecification.NewSwitch(\r\n                string.Empty,\r\n                ''version'',\r\n                false,\r\n                sentenceBuilder.VersionCommandText(AddDashesToOption),\r\n                string.Empty);", span="611-616"];
m0_354 [cluster="System.Text.StringBuilder.AppendFormatWhen(bool, string, params object[])", file="FSharpOptionHelper.cs", label="Entry System.Text.StringBuilder.AppendFormatWhen(bool, string, params object[])", span="27-27"];
m0_112 [cluster="string.Concat(string, string)", file="FSharpOptionHelper.cs", label="Entry string.Concat(string, string)", span="0-0"];
m0_373 [cluster="lambda expression", file="FSharpOptionHelper.cs", label="Entry lambda expression", span="735-742"];
m0_51 [cluster="lambda expression", file="FSharpOptionHelper.cs", label="license.AddToHelpText(auto, true)", span="220-220"];
m0_55 [cluster="lambda expression", file="FSharpOptionHelper.cs", label="usage.AddToHelpText(auto, true)", span="223-223"];
m0_50 [cluster="lambda expression", file="FSharpOptionHelper.cs", label="Entry lambda expression", span="220-220"];
m0_54 [cluster="lambda expression", file="FSharpOptionHelper.cs", label="Entry lambda expression", span="223-223"];
m0_57 [cluster="lambda expression", file="FSharpOptionHelper.cs", label="Entry lambda expression", span="225-225"];
m0_52 [cluster="lambda expression", file="FSharpOptionHelper.cs", label="Exit lambda expression", span="220-220"];
m0_56 [cluster="lambda expression", file="FSharpOptionHelper.cs", label="Exit lambda expression", span="223-223"];
m0_58 [cluster="lambda expression", file="FSharpOptionHelper.cs", label="e.Tag == ErrorType.NoVerbSelectedError", span="225-225"];
m0_59 [cluster="lambda expression", file="FSharpOptionHelper.cs", label="Exit lambda expression", span="225-225"];
m0_85 [cluster="lambda expression", file="FSharpOptionHelper.cs", label="DefaultParsingErrorsHandler(parserResult, current)", span="257-257"];
m0_92 [cluster="lambda expression", file="FSharpOptionHelper.cs", label="DefaultParsingErrorsHandler(parserResult, current)", span="263-263"];
m0_78 [cluster="lambda expression", file="FSharpOptionHelper.cs", label="Entry lambda expression", span="253-253"];
m0_81 [cluster="lambda expression", file="FSharpOptionHelper.cs", label="Entry lambda expression", span="256-256"];
m0_89 [cluster="lambda expression", file="FSharpOptionHelper.cs", label="DefaultParsingErrorsHandler(pr, current)", span="262-262"];
m0_84 [cluster="lambda expression", file="FSharpOptionHelper.cs", label="Entry lambda expression", span="257-257"];
m0_88 [cluster="lambda expression", file="FSharpOptionHelper.cs", label="Entry lambda expression", span="262-262"];
m0_91 [cluster="lambda expression", file="FSharpOptionHelper.cs", label="Entry lambda expression", span="263-263"];
m0_79 [cluster="lambda expression", file="FSharpOptionHelper.cs", label="e.Tag == ErrorType.VersionRequestedError", span="253-253"];
m0_80 [cluster="lambda expression", file="FSharpOptionHelper.cs", label="Exit lambda expression", span="253-253"];
m0_82 [cluster="lambda expression", file="FSharpOptionHelper.cs", label="e.Tag == ErrorType.HelpVerbRequestedError", span="256-256"];
m0_83 [cluster="lambda expression", file="FSharpOptionHelper.cs", label="Exit lambda expression", span="256-256"];
m0_86 [cluster="lambda expression", file="FSharpOptionHelper.cs", label="Exit lambda expression", span="257-257"];
m0_90 [cluster="lambda expression", file="FSharpOptionHelper.cs", label="Exit lambda expression", span="262-262"];
m0_93 [cluster="lambda expression", file="FSharpOptionHelper.cs", label="Exit lambda expression", span="263-263"];
m0_116 [cluster="lambda expression", file="FSharpOptionHelper.cs", label="current.AddPreOptionsLine(line)", span="291-291"];
m0_115 [cluster="lambda expression", file="FSharpOptionHelper.cs", label="Entry lambda expression", span="291-291"];
m0_117 [cluster="lambda expression", file="FSharpOptionHelper.cs", label="Exit lambda expression", span="291-291"];
m0_173 [cluster="lambda expression", file="FSharpOptionHelper.cs", label="var line = new StringBuilder(indent.Spaces())\r\n                                .Append(formatError(error))", span="417-418"];
m0_174 [cluster="lambda expression", file="FSharpOptionHelper.cs", label="text.AppendLine(line.ToString())", span="419-419"];
m0_169 [cluster="lambda expression", file="FSharpOptionHelper.cs", label="Entry lambda expression", span="413-413"];
m0_172 [cluster="lambda expression", file="FSharpOptionHelper.cs", label="Entry lambda expression", span="415-420"];
m0_170 [cluster="lambda expression", file="FSharpOptionHelper.cs", label="e.Tag != ErrorType.MutuallyExclusiveSetError", span="413-413"];
m0_171 [cluster="lambda expression", file="FSharpOptionHelper.cs", label="Exit lambda expression", span="413-413"];
m0_175 [cluster="lambda expression", file="FSharpOptionHelper.cs", label="Exit lambda expression", span="415-420"];
m0_209 [cluster="lambda expression", file="FSharpOptionHelper.cs", label="config.PreferShortName = s.PreferShortName", span="457-457"];
m0_210 [cluster="lambda expression", file="FSharpOptionHelper.cs", label="config.GroupSwitches = s.GroupSwitches", span="458-458"];
m0_211 [cluster="lambda expression", file="FSharpOptionHelper.cs", label="config.UseEqualToken = s.UseEqualToken", span="459-459"];
m0_208 [cluster="lambda expression", file="FSharpOptionHelper.cs", label="Entry lambda expression", span="455-460"];
m0_212 [cluster="lambda expression", file="FSharpOptionHelper.cs", label="Exit lambda expression", span="455-460"];
m0_222 [cluster="lambda expression", file="FSharpOptionHelper.cs", label="Entry lambda expression", span="494-494"];
m0_223 [cluster="lambda expression", file="FSharpOptionHelper.cs", label="e.Tag != ErrorType.HelpRequestedError && e.Tag != ErrorType.HelpVerbRequestedError", span="494-494"];
m0_224 [cluster="lambda expression", file="FSharpOptionHelper.cs", label="Exit lambda expression", span="494-494"];
m0_260 [cluster="lambda expression", file="FSharpOptionHelper.cs", label="Entry lambda expression", span="541-541"];
m0_261 [cluster="lambda expression", file="FSharpOptionHelper.cs", label="v.Index", span="541-541"];
m0_262 [cluster="lambda expression", file="FSharpOptionHelper.cs", label="Exit lambda expression", span="541-541"];
m0_267 [cluster="lambda expression", file="FSharpOptionHelper.cs", label="Entry lambda expression", span="550-566"];
m0_268 [cluster="lambda expression", file="FSharpOptionHelper.cs", label="var prop = tuple.Item1", span="552-552"];
m0_269 [cluster="lambda expression", file="FSharpOptionHelper.cs", label="var attr = tuple.Item2", span="553-553"];
m0_270 [cluster="lambda expression", file="FSharpOptionHelper.cs", label="var examples = (IEnumerable<Example>)prop\r\n                        .GetValue(null, BindingFlags.Public | BindingFlags.Static | BindingFlags.GetProperty, null, null, null)", span="555-556"];
m0_271 [cluster="lambda expression", file="FSharpOptionHelper.cs", label="return Tuple.Create(attr, examples);", span="565-565"];
m0_272 [cluster="lambda expression", file="FSharpOptionHelper.cs", label="Exit lambda expression", span="550-566"];
m0_288 [cluster="lambda expression", file="FSharpOptionHelper.cs", label="AddOption(requiredWord, maxLength, option, remainingSpace)", span="594-594"];
m0_287 [cluster="lambda expression", file="FSharpOptionHelper.cs", label="Entry lambda expression", span="593-594"];
m0_289 [cluster="lambda expression", file="FSharpOptionHelper.cs", label="Exit lambda expression", span="593-594"];
m0_335 [cluster="lambda expression", file="FSharpOptionHelper.cs", label="it.Append(AddOptionName(maxLength, (OptionSpecification)specification))", span="632-632"];
m0_339 [cluster="lambda expression", file="FSharpOptionHelper.cs", label="it.Append(AddValueName(maxLength, (ValueSpecification)specification))", span="633-633"];
m0_334 [cluster="lambda expression", file="FSharpOptionHelper.cs", label="Entry lambda expression", span="632-632"];
m0_338 [cluster="lambda expression", file="FSharpOptionHelper.cs", label="Entry lambda expression", span="633-633"];
m0_342 [cluster="lambda expression", file="FSharpOptionHelper.cs", label="Entry lambda expression", span="645-645"];
m0_343 [cluster="lambda expression", file="FSharpOptionHelper.cs", label="optionHelpText = ''(Default: {0}) ''.FormatLocal(defaultValue) + optionHelpText", span="645-645"];
m0_336 [cluster="lambda expression", file="FSharpOptionHelper.cs", label="Exit lambda expression", span="632-632"];
m0_340 [cluster="lambda expression", file="FSharpOptionHelper.cs", label="Exit lambda expression", span="633-633"];
m0_344 [cluster="lambda expression", file="FSharpOptionHelper.cs", label="Exit lambda expression", span="645-645"];
m0_350 [cluster="lambda expression", file="FSharpOptionHelper.cs", label="it\r\n                            .AppendWhen(addDashesToOption, '-')\r\n                            .AppendFormat(''{0}'', specification.ShortName)\r\n                            .AppendFormatWhen(specification.MetaValue.Length > 0, '' {0}'', specification.MetaValue)\r\n                            .AppendWhen(specification.LongName.Length > 0, '', '')", span="699-703"];
m0_356 [cluster="lambda expression", file="FSharpOptionHelper.cs", label="it\r\n                            .AppendWhen(addDashesToOption, ''--'')\r\n                            .AppendFormat(''{0}'', specification.LongName)\r\n                            .AppendFormatWhen(specification.MetaValue.Length > 0, ''={0}'', specification.MetaValue)", span="706-709"];
m0_349 [cluster="lambda expression", file="FSharpOptionHelper.cs", label="Entry lambda expression", span="699-703"];
m0_355 [cluster="lambda expression", file="FSharpOptionHelper.cs", label="Entry lambda expression", span="706-709"];
m0_351 [cluster="lambda expression", file="FSharpOptionHelper.cs", label="Exit lambda expression", span="699-703"];
m0_357 [cluster="lambda expression", file="FSharpOptionHelper.cs", label="Exit lambda expression", span="706-709"];
m0_361 [cluster="lambda expression", file="FSharpOptionHelper.cs", label="it.AppendFormat(''{0} (pos. {1})'', specification.MetaName, specification.Index)", span="718-718"];
m0_365 [cluster="lambda expression", file="FSharpOptionHelper.cs", label="it.AppendFormat(''value pos. {0}'', specification.Index)", span="719-719"];
m0_360 [cluster="lambda expression", file="FSharpOptionHelper.cs", label="Entry lambda expression", span="718-718"];
m0_364 [cluster="lambda expression", file="FSharpOptionHelper.cs", label="Entry lambda expression", span="719-719"];
m0_362 [cluster="lambda expression", file="FSharpOptionHelper.cs", label="Exit lambda expression", span="718-718"];
m0_366 [cluster="lambda expression", file="FSharpOptionHelper.cs", label="Exit lambda expression", span="719-719"];
m0_374 [cluster="lambda expression", file="FSharpOptionHelper.cs", label="var specLength = spec.Tag == SpecificationType.Option\r\n                            ? GetMaxOptionLength((OptionSpecification)spec)\r\n                            : GetMaxValueLength((ValueSpecification)spec)", span="737-739"];
m0_375 [cluster="lambda expression", file="FSharpOptionHelper.cs", label="return Math.Max(length, specLength);", span="741-741"];
m0_376 [cluster="lambda expression", file="FSharpOptionHelper.cs", label="Exit lambda expression", span="735-742"];
m0_348 [cluster="System.Text.StringBuilder.MapIf(bool, System.Func<System.Text.StringBuilder, System.Text.StringBuilder>)", file="FSharpOptionHelper.cs", label="Entry System.Text.StringBuilder.MapIf(bool, System.Func<System.Text.StringBuilder, System.Text.StringBuilder>)", span="49-49"];
m0_72 [cluster="System.ArgumentException.ArgumentException(string, string)", file="FSharpOptionHelper.cs", label="Entry System.ArgumentException.ArgumentException(string, string)", span="0-0"];
m0_337 [cluster="CommandLine.Text.HelpText.AddOptionName(int, CommandLine.Core.OptionSpecification)", file="FSharpOptionHelper.cs", label="Entry CommandLine.Text.HelpText.AddOptionName(int, CommandLine.Core.OptionSpecification)", span="693-693"];
m0_346 [cluster="CommandLine.Text.HelpText.AddOptionName(int, CommandLine.Core.OptionSpecification)", file="FSharpOptionHelper.cs", label="return\r\n                new StringBuilder(maxLength)\r\n                    .MapIf(\r\n                        specification.ShortName.Length > 0,\r\n                        it => it\r\n                            .AppendWhen(addDashesToOption, '-')\r\n                            .AppendFormat(''{0}'', specification.ShortName)\r\n                            .AppendFormatWhen(specification.MetaValue.Length > 0, '' {0}'', specification.MetaValue)\r\n                            .AppendWhen(specification.LongName.Length > 0, '', ''))\r\n                    .MapIf(\r\n                        specification.LongName.Length > 0,\r\n                        it => it\r\n                            .AppendWhen(addDashesToOption, ''--'')\r\n                            .AppendFormat(''{0}'', specification.LongName)\r\n                            .AppendFormatWhen(specification.MetaValue.Length > 0, ''={0}'', specification.MetaValue))\r\n                    .ToString();", span="695-710"];
m0_347 [cluster="CommandLine.Text.HelpText.AddOptionName(int, CommandLine.Core.OptionSpecification)", file="FSharpOptionHelper.cs", label="Exit CommandLine.Text.HelpText.AddOptionName(int, CommandLine.Core.OptionSpecification)", span="693-693"];
m0_4 [cluster="CommandLine.Text.HelpText.HelpText(string)", file="FSharpOptionHelper.cs", label="Entry CommandLine.Text.HelpText.HelpText(string)", span="59-59"];
m0_5 [cluster="CommandLine.Text.HelpText.HelpText(string)", file="FSharpOptionHelper.cs", label="Exit CommandLine.Text.HelpText.HelpText(string)", span="59-59"];
m0_279 [cluster="Unk.Concat", file="FSharpOptionHelper.cs", label="Entry Unk.Concat", span=""];
m0_25 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, bool)", file="FSharpOptionHelper.cs", label="Entry CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, bool)", span="195-195"];
m0_26 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, bool)", file="FSharpOptionHelper.cs", label="var auto = new HelpText {\r\n                Heading = HeadingInfo.Default,\r\n                Copyright = CopyrightInfo.Default,\r\n                AdditionalNewLineAfterOption = true,\r\n                AddDashesToOption = !verbsIndex\r\n            }", span="200-205"];
m0_28 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, bool)", file="FSharpOptionHelper.cs", label="onError != null && parserResult.Tag == ParserResultType.NotParsed", span="209-209"];
m0_29 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, bool)", file="FSharpOptionHelper.cs", label="errors = ((NotParsed<T>)parserResult).Errors", span="211-211"];
m0_31 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, bool)", file="FSharpOptionHelper.cs", label="auto = onError(auto)", span="215-215"];
m0_34 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, bool)", file="FSharpOptionHelper.cs", label="(verbsIndex && parserResult.TypeInfo.Choices.Any()) || errors.Any(e => e.Tag == ErrorType.NoVerbSelectedError)", span="225-225"];
m0_36 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, bool)", file="FSharpOptionHelper.cs", label="auto.AddVerbs(parserResult.TypeInfo.Choices.ToArray())", span="228-228"];
m0_37 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, bool)", file="FSharpOptionHelper.cs", label="auto.AddOptions(parserResult)", span="231-231"];
m0_27 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, bool)", file="FSharpOptionHelper.cs", label="var errors = Enumerable.Empty<Error>()", span="207-207"];
m0_32 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, bool)", file="FSharpOptionHelper.cs", label="ReflectionHelper.GetAttribute<AssemblyLicenseAttribute>()\r\n                .Do(license => license.AddToHelpText(auto, true))", span="219-220"];
m0_33 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, bool)", file="FSharpOptionHelper.cs", label="ReflectionHelper.GetAttribute<AssemblyUsageAttribute>()\r\n                .Do(usage => usage.AddToHelpText(auto, true))", span="222-223"];
m0_35 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, bool)", file="FSharpOptionHelper.cs", label="auto.AddDashesToOption = false", span="227-227"];
m0_38 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, bool)", file="FSharpOptionHelper.cs", label="return auto;", span="233-233"];
m0_30 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, bool)", file="FSharpOptionHelper.cs", label="FilterMeaningfulErrors(errors).Any()", span="213-213"];
m0_39 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, bool)", file="FSharpOptionHelper.cs", label="Exit CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>, System.Func<CommandLine.Text.HelpText, CommandLine.Text.HelpText>, bool)", span="195-195"];
m0_60 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", file="FSharpOptionHelper.cs", label="Entry CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", span="246-246"];
m0_61 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", file="FSharpOptionHelper.cs", label="parserResult.Tag != ParserResultType.NotParsed", span="248-248"];
m0_63 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", file="FSharpOptionHelper.cs", label="var errors = ((NotParsed<T>)parserResult).Errors", span="251-251"];
m0_67 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", file="FSharpOptionHelper.cs", label="return AutoBuild(parserResult, current => DefaultParsingErrorsHandler(parserResult, current));", span="257-257"];
m0_70 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", file="FSharpOptionHelper.cs", label="return err.Matched\r\n                ? AutoBuild(pr, current => DefaultParsingErrorsHandler(pr, current))\r\n                : AutoBuild(parserResult, current => DefaultParsingErrorsHandler(parserResult, current), true);", span="261-263"];
m0_62 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", file="FSharpOptionHelper.cs", label="throw new ArgumentException(''Excepting NotParsed<T> type.'', ''parserResult'');", span="249-249"];
m0_64 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", file="FSharpOptionHelper.cs", label="errors.Any(e => e.Tag == ErrorType.VersionRequestedError)", span="253-253"];
m0_66 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", file="FSharpOptionHelper.cs", label="!errors.Any(e => e.Tag == ErrorType.HelpVerbRequestedError)", span="256-256"];
m0_68 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", file="FSharpOptionHelper.cs", label="var err = errors.OfType<HelpVerbRequestedError>().Single()", span="259-259"];
m0_65 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", file="FSharpOptionHelper.cs", label="return new HelpText(HeadingInfo.Default).AddPreOptionsLine(Environment.NewLine);", span="254-254"];
m0_69 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", file="FSharpOptionHelper.cs", label="var pr = new NotParsed<object>(TypeInfo.Create(err.Type), Enumerable.Empty<Error>())", span="260-260"];
m0_71 [cluster="CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", file="FSharpOptionHelper.cs", label="Exit CommandLine.Text.HelpText.AutoBuild<T>(CommandLine.ParserResult<T>)", span="246-246"];
m0_177 [cluster="int.Spaces()", file="FSharpOptionHelper.cs", label="Entry int.Spaces()", span="30-30"];
m0_53 [cluster="CommandLine.Text.MultilineTextAttribute.AddToHelpText(CommandLine.Text.HelpText, bool)", file="FSharpOptionHelper.cs", label="Entry CommandLine.Text.MultilineTextAttribute.AddToHelpText(CommandLine.Text.HelpText, bool)", span="155-155"];
m0_168 [cluster="System.Text.StringBuilder.ToString()", file="FSharpOptionHelper.cs", label="Entry System.Text.StringBuilder.ToString()", span="0-0"];
m0_201 [cluster="CSharpx.Maybe<T>.MatchNothing()", file="FSharpOptionHelper.cs", label="Entry CSharpx.Maybe<T>.MatchNothing()", span="57-57"];
m0_164 [cluster="System.Text.StringBuilder.StringBuilder()", file="FSharpOptionHelper.cs", label="Entry System.Text.StringBuilder.StringBuilder()", span="0-0"];
m0_48 [cluster="CommandLine.Text.HelpText.AddVerbs(params System.Type[])", file="FSharpOptionHelper.cs", label="Entry CommandLine.Text.HelpText.AddVerbs(params System.Type[])", span="348-348"];
m0_135 [cluster="CommandLine.Text.HelpText.AddVerbs(params System.Type[])", file="FSharpOptionHelper.cs", label="types == null", span="350-350"];
m0_137 [cluster="CommandLine.Text.HelpText.AddVerbs(params System.Type[])", file="FSharpOptionHelper.cs", label="types.Length == 0", span="351-351"];
m0_139 [cluster="CommandLine.Text.HelpText.AddVerbs(params System.Type[])", file="FSharpOptionHelper.cs", label="return AddOptionsImpl(\r\n                AdaptVerbsToSpecifications(types),\r\n                SentenceBuilder.RequiredWord(),\r\n                MaximumDisplayWidth);", span="353-356"];
m0_136 [cluster="CommandLine.Text.HelpText.AddVerbs(params System.Type[])", file="FSharpOptionHelper.cs", label="throw new ArgumentNullException(''types'');", span="350-350"];
m0_138 [cluster="CommandLine.Text.HelpText.AddVerbs(params System.Type[])", file="FSharpOptionHelper.cs", label="throw new ArgumentOutOfRangeException(''types'');", span="351-351"];
m0_140 [cluster="CommandLine.Text.HelpText.AddVerbs(params System.Type[])", file="FSharpOptionHelper.cs", label="Exit CommandLine.Text.HelpText.AddVerbs(params System.Type[])", span="348-348"];
m0_200 [cluster="CommandLine.Text.HelpText.GetUsageFromType(System.Type)", file="FSharpOptionHelper.cs", label="Entry CommandLine.Text.HelpText.GetUsageFromType(System.Type)", span="547-547"];
m0_263 [cluster="CommandLine.Text.HelpText.GetUsageFromType(System.Type)", file="FSharpOptionHelper.cs", label="return type.GetUsageData().Map(\r\n                tuple =>\r\n                {\r\n                    var prop = tuple.Item1;\r\n                    var attr = tuple.Item2;\r\n\r\n                    var examples = (IEnumerable<Example>)prop\r\n                        .GetValue(null, BindingFlags.Public | BindingFlags.Static | BindingFlags.GetProperty, null, null, null);\r\n                    //var groups = attr.Groups;\r\n\r\n                    //return examples.Select(example => groups.ContainsKey(example.Group)\r\n                    //    ? example.WithGroupDescription(groups[example.Group])\r\n                    //    : example)\r\n                    //        .OrderBy(x => x.Group)\r\n                    //        .ThenBy(x => x.GroupDescription)\r\n                    //    .Memorize();\r\n                    return Tuple.Create(attr, examples);\r\n                });", span="549-566"];
m0_264 [cluster="CommandLine.Text.HelpText.GetUsageFromType(System.Type)", file="FSharpOptionHelper.cs", label="Exit CommandLine.Text.HelpText.GetUsageFromType(System.Type)", span="547-547"];
m0_113 [cluster="string.Split(string[], System.StringSplitOptions)", file="FSharpOptionHelper.cs", label="Entry string.Split(string[], System.StringSplitOptions)", span="0-0"];
m0_330 [cluster="string.Join(string, System.Collections.Generic.IEnumerable<string>)", file="FSharpOptionHelper.cs", label="Entry string.Join(string, System.Collections.Generic.IEnumerable<string>)", span="0-0"];
m0_8 [cluster="CommandLine.Text.HelpText.HelpText(string, string)", file="FSharpOptionHelper.cs", label="Entry CommandLine.Text.HelpText.HelpText(string, string)", span="82-82"];
m0_9 [cluster="CommandLine.Text.HelpText.HelpText(string, string)", file="FSharpOptionHelper.cs", label="Exit CommandLine.Text.HelpText.HelpText(string, string)", span="82-82"];
m0_181 [cluster="CommandLine.Text.HelpText.RenderUsageText<T>(CommandLine.ParserResult<T>)", file="FSharpOptionHelper.cs", label="Entry CommandLine.Text.HelpText.RenderUsageText<T>(CommandLine.ParserResult<T>)", span="428-428"];
m0_182 [cluster="CommandLine.Text.HelpText.RenderUsageText<T>(CommandLine.ParserResult<T>)", file="FSharpOptionHelper.cs", label="parserResult == null", span="430-430"];
m0_184 [cluster="CommandLine.Text.HelpText.RenderUsageText<T>(CommandLine.ParserResult<T>)", file="FSharpOptionHelper.cs", label="var usage = GetUsageFromType(parserResult.TypeInfo.Current)", span="432-432"];
m0_183 [cluster="CommandLine.Text.HelpText.RenderUsageText<T>(CommandLine.ParserResult<T>)", file="FSharpOptionHelper.cs", label="throw new ArgumentNullException(''parserResult'');", span="430-430"];
m0_185 [cluster="CommandLine.Text.HelpText.RenderUsageText<T>(CommandLine.ParserResult<T>)", file="FSharpOptionHelper.cs", label="usage.MatchNothing()", span="433-433"];
m0_187 [cluster="CommandLine.Text.HelpText.RenderUsageText<T>(CommandLine.ParserResult<T>)", file="FSharpOptionHelper.cs", label="var usageTuple = usage.FromJust()", span="436-436"];
m0_186 [cluster="CommandLine.Text.HelpText.RenderUsageText<T>(CommandLine.ParserResult<T>)", file="FSharpOptionHelper.cs", label="return string.Empty;", span="434-434"];
m0_188 [cluster="CommandLine.Text.HelpText.RenderUsageText<T>(CommandLine.ParserResult<T>)", file="FSharpOptionHelper.cs", label="var examples = usageTuple.Item2", span="437-437"];
m0_189 [cluster="CommandLine.Text.HelpText.RenderUsageText<T>(CommandLine.ParserResult<T>)", file="FSharpOptionHelper.cs", label="var appAlias = usageTuple.Item1.ApplicationAlias ?? ReflectionHelper.GetAssemblyName()", span="438-438"];
m0_191 [cluster="CommandLine.Text.HelpText.RenderUsageText<T>(CommandLine.ParserResult<T>)", file="FSharpOptionHelper.cs", label=examples, span="441-441"];
m0_190 [cluster="CommandLine.Text.HelpText.RenderUsageText<T>(CommandLine.ParserResult<T>)", file="FSharpOptionHelper.cs", label="var text = new StringBuilder()", span="440-440"];
m0_195 [cluster="CommandLine.Text.HelpText.RenderUsageText<T>(CommandLine.ParserResult<T>)", file="FSharpOptionHelper.cs", label="var commandLine = new StringBuilder()\r\n                        .Append(2.Spaces())\r\n                        .Append(appAlias)\r\n                        .Append(' ')\r\n                        .Append(Parser.Default.FormatCommandLine(e.Sample,\r\n                            config =>\r\n                                {\r\n                                    config.PreferShortName = s.PreferShortName;\r\n                                    config.GroupSwitches = s.GroupSwitches;\r\n                                    config.UseEqualToken = s.UseEqualToken;\r\n                                }))\r\n                        .Append(Environment.NewLine)", span="450-461"];
m0_197 [cluster="CommandLine.Text.HelpText.RenderUsageText<T>(CommandLine.ParserResult<T>)", file="FSharpOptionHelper.cs", label="text.Append(exampleText)", span="464-464"];
m0_198 [cluster="CommandLine.Text.HelpText.RenderUsageText<T>(CommandLine.ParserResult<T>)", file="FSharpOptionHelper.cs", label="return text.ToString();", span="467-467"];
m0_192 [cluster="CommandLine.Text.HelpText.RenderUsageText<T>(CommandLine.ParserResult<T>)", file="FSharpOptionHelper.cs", label="var exampleText = new StringBuilder()\r\n                    .Append(e.HelpText)\r\n                    .Append(':')\r\n                    .Append(Environment.NewLine)", span="443-446"];
m0_193 [cluster="CommandLine.Text.HelpText.RenderUsageText<T>(CommandLine.ParserResult<T>)", file="FSharpOptionHelper.cs", label="var styles = e.GetFormatStylesOrDefault()", span="447-447"];
m0_196 [cluster="CommandLine.Text.HelpText.RenderUsageText<T>(CommandLine.ParserResult<T>)", file="FSharpOptionHelper.cs", label="exampleText.Append(commandLine)", span="462-462"];
m0_194 [cluster="CommandLine.Text.HelpText.RenderUsageText<T>(CommandLine.ParserResult<T>)", file="FSharpOptionHelper.cs", label=styles, span="448-448"];
m0_199 [cluster="CommandLine.Text.HelpText.RenderUsageText<T>(CommandLine.ParserResult<T>)", file="FSharpOptionHelper.cs", label="Exit CommandLine.Text.HelpText.RenderUsageText<T>(CommandLine.ParserResult<T>)", span="428-428"];
m0_114 [cluster="System.Collections.Generic.IEnumerable<T>.ForEach<T>(System.Action<T>)", file="FSharpOptionHelper.cs", label="Entry System.Collections.Generic.IEnumerable<T>.ForEach<T>(System.Action<T>)", span="231-231"];
m0_246 [cluster="string.Split(params char[])", file="FSharpOptionHelper.cs", label="Entry string.Split(params char[])", span="0-0"];
m0_24 [cluster="System.Text.StringBuilder.StringBuilder(int)", file="FSharpOptionHelper.cs", label="Entry System.Text.StringBuilder.StringBuilder(int)", span="0-0"];
m0_278 [cluster="CommandLine.Core.OptionSpecification.NewSwitch(string, string, bool, string, string)", file="FSharpOptionHelper.cs", label="Entry CommandLine.Core.OptionSpecification.NewSwitch(string, string, bool, string, string)", span="45-45"];
m0_43 [cluster="System.Func<T, TResult>.Invoke(T)", file="FSharpOptionHelper.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m0_40 [cluster="System.Linq.Enumerable.Empty<TResult>()", file="FSharpOptionHelper.cs", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
m0_165 [cluster="Unk.Where", file="FSharpOptionHelper.cs", label="Entry Unk.Where", span=""];
m0_76 [cluster="CommandLine.NotParsed<T>.NotParsed(CommandLine.TypeInfo, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="FSharpOptionHelper.cs", label="Entry CommandLine.NotParsed<T>.NotParsed(CommandLine.TypeInfo, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="163-163"];
m0_333 [cluster="string.String(char, int)", file="FSharpOptionHelper.cs", label="Entry string.String(char, int)", span="0-0"];
m0_248 [cluster="System.Math.Min(int, int)", file="FSharpOptionHelper.cs", label="Entry System.Math.Min(int, int)", span="0-0"];
m0_259 [cluster="System.Collections.Generic.IEnumerable<TSource>.OrderBy<TSource, TKey>(System.Func<TSource, TKey>)", file="FSharpOptionHelper.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.OrderBy<TSource, TKey>(System.Func<TSource, TKey>)", span="0-0"];
m0_363 [cluster="System.Text.StringBuilder.AppendFormat(string, object, object)", file="FSharpOptionHelper.cs", label="Entry System.Text.StringBuilder.AppendFormat(string, object, object)", span="0-0"];
m0_134 [cluster="CommandLine.Text.HelpText.AddOptionsImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, string, int)", file="FSharpOptionHelper.cs", label="Entry CommandLine.Text.HelpText.AddOptionsImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, string, int)", span="581-581"];
m0_280 [cluster="CommandLine.Text.HelpText.AddOptionsImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, string, int)", file="FSharpOptionHelper.cs", label="var maxLength = GetMaxLength(specifications)", span="586-586"];
m0_282 [cluster="CommandLine.Text.HelpText.AddOptionsImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, string, int)", file="FSharpOptionHelper.cs", label="var remainingSpace = maximumLength - (maxLength + 6)", span="590-590"];
m0_283 [cluster="CommandLine.Text.HelpText.AddOptionsImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, string, int)", file="FSharpOptionHelper.cs", label="specifications.ForEach(\r\n                option =>\r\n                    AddOption(requiredWord, maxLength, option, remainingSpace))", span="592-594"];
m0_281 [cluster="CommandLine.Text.HelpText.AddOptionsImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, string, int)", file="FSharpOptionHelper.cs", label="optionsHelp = new StringBuilder(BuilderCapacity)", span="588-588"];
m0_284 [cluster="CommandLine.Text.HelpText.AddOptionsImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, string, int)", file="FSharpOptionHelper.cs", label="return this;", span="596-596"];
m0_285 [cluster="CommandLine.Text.HelpText.AddOptionsImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, string, int)", file="FSharpOptionHelper.cs", label="Exit CommandLine.Text.HelpText.AddOptionsImpl(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>, string, int)", span="581-581"];
m0_179 [cluster="System.Text.StringBuilder.Append(string)", file="FSharpOptionHelper.cs", label="Entry System.Text.StringBuilder.Append(string)", span="0-0"];
m0_118 [cluster="CommandLine.Text.HelpText.implicit operator string(CommandLine.Text.HelpText)", file="FSharpOptionHelper.cs", label="Entry CommandLine.Text.HelpText.implicit operator string(CommandLine.Text.HelpText)", span="301-301"];
m0_119 [cluster="CommandLine.Text.HelpText.implicit operator string(CommandLine.Text.HelpText)", file="FSharpOptionHelper.cs", label="return info.ToString();", span="303-303"];
m0_120 [cluster="CommandLine.Text.HelpText.implicit operator string(CommandLine.Text.HelpText)", file="FSharpOptionHelper.cs", label="Exit CommandLine.Text.HelpText.implicit operator string(CommandLine.Text.HelpText)", span="301-301"];
m0_124 [cluster="CommandLine.Text.HelpText.AddPreOptionsLine(string, int)", file="FSharpOptionHelper.cs", label="Entry CommandLine.Text.HelpText.AddPreOptionsLine(string, int)", span="619-619"];
m0_295 [cluster="CommandLine.Text.HelpText.AddPreOptionsLine(string, int)", file="FSharpOptionHelper.cs", label="AddLine(preOptionsHelp, value, maximumLength)", span="621-621"];
m0_296 [cluster="CommandLine.Text.HelpText.AddPreOptionsLine(string, int)", file="FSharpOptionHelper.cs", label="return this;", span="623-623"];
m0_297 [cluster="CommandLine.Text.HelpText.AddPreOptionsLine(string, int)", file="FSharpOptionHelper.cs", label="Exit CommandLine.Text.HelpText.AddPreOptionsLine(string, int)", span="619-619"];
m0_207 [cluster="System.Text.StringBuilder.Append(object)", file="FSharpOptionHelper.cs", label="Entry System.Text.StringBuilder.Append(object)", span="0-0"];
m0_273 [cluster="System.Reflection.PropertyInfo.GetValue(object, System.Reflection.BindingFlags, System.Reflection.Binder, object[], System.Globalization.CultureInfo)", file="FSharpOptionHelper.cs", label="Entry System.Reflection.PropertyInfo.GetValue(object, System.Reflection.BindingFlags, System.Reflection.Binder, object[], System.Globalization.CultureInfo)", span="0-0"];
m0_128 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string)", file="FSharpOptionHelper.cs", label="Entry CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string)", span="725-725"];
m0_367 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string)", file="FSharpOptionHelper.cs", label="AddLine(builder, value, MaximumDisplayWidth)", span="727-727"];
m0_368 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string)", file="FSharpOptionHelper.cs", label="return this;", span="729-729"];
m0_369 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string)", file="FSharpOptionHelper.cs", label="Exit CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string)", span="725-725"];
m0_2 [cluster="CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder)", file="FSharpOptionHelper.cs", label="Entry CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder)", span="48-48"];
m0_3 [cluster="CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder)", file="FSharpOptionHelper.cs", label="Exit CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder)", span="48-48"];
m0_251 [cluster="CommandLine.Text.HelpText.GetSpecificationsFromType(System.Type)", file="FSharpOptionHelper.cs", label="var optionSpecs = specs\r\n                .OfType<OptionSpecification>()\r\n                .Concat(new[] { MakeHelpEntry(), MakeVersionEntry() })", span="536-538"];
m0_133 [cluster="CommandLine.Text.HelpText.GetSpecificationsFromType(System.Type)", file="FSharpOptionHelper.cs", label="Entry CommandLine.Text.HelpText.GetSpecificationsFromType(System.Type)", span="533-533"];
m0_250 [cluster="CommandLine.Text.HelpText.GetSpecificationsFromType(System.Type)", file="FSharpOptionHelper.cs", label="var specs = type.GetSpecifications(Specification.FromProperty)", span="535-535"];
m0_252 [cluster="CommandLine.Text.HelpText.GetSpecificationsFromType(System.Type)", file="FSharpOptionHelper.cs", label="var valueSpecs = specs\r\n                .OfType<ValueSpecification>()\r\n                .OrderBy(v => v.Index)", span="539-541"];
m0_253 [cluster="CommandLine.Text.HelpText.GetSpecificationsFromType(System.Type)", file="FSharpOptionHelper.cs", label="return Enumerable.Empty<Specification>()\r\n                .Concat(optionSpecs)\r\n                .Concat(valueSpecs);", span="542-544"];
m0_254 [cluster="CommandLine.Text.HelpText.GetSpecificationsFromType(System.Type)", file="FSharpOptionHelper.cs", label="Exit CommandLine.Text.HelpText.GetSpecificationsFromType(System.Type)", span="533-533"];
m0_225 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", file="FSharpOptionHelper.cs", label="Entry CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", span="497-497"];
m0_226 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", file="FSharpOptionHelper.cs", label="builder.AppendWhen(builder.Length > 0, Environment.NewLine)", span="499-499"];
m0_228 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", file="FSharpOptionHelper.cs", label="var words = value.Split(' ')", span="503-503"];
m0_231 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", file="FSharpOptionHelper.cs", label="words[i].Length < (maximumLength - wordBuffer)", span="506-506"];
m0_232 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", file="FSharpOptionHelper.cs", label="builder.Append(words[i])", span="508-508"];
m0_234 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", file="FSharpOptionHelper.cs", label="(maximumLength - wordBuffer) > 1 && i != words.Length - 1", span="510-510"];
m0_235 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", file="FSharpOptionHelper.cs", label="builder.Append('' '')", span="512-512"];
m0_237 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", file="FSharpOptionHelper.cs", label="words[i].Length >= maximumLength && wordBuffer == 0", span="516-516"];
m0_238 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", file="FSharpOptionHelper.cs", label="builder.Append(words[i].Substring(0, maximumLength))", span="518-518"];
m0_239 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", file="FSharpOptionHelper.cs", label="wordBuffer = maximumLength", span="519-519"];
m0_241 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", file="FSharpOptionHelper.cs", label="value = value.Substring(Math.Min(wordBuffer, value.Length))", span="525-525"];
m0_242 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", file="FSharpOptionHelper.cs", label="builder.AppendWhen(value.Length > 0, Environment.NewLine)", span="526-526"];
m0_243 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", file="FSharpOptionHelper.cs", label="value.Length > maximumLength", span="528-528"];
m0_244 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", file="FSharpOptionHelper.cs", label="builder.Append(value)", span="530-530"];
m0_227 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", file="FSharpOptionHelper.cs", label="var wordBuffer = 0", span="502-502"];
m0_233 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", file="FSharpOptionHelper.cs", label="wordBuffer += words[i].Length", span="509-509"];
m0_229 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", file="FSharpOptionHelper.cs", label="var i = 0", span="504-504"];
m0_230 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", file="FSharpOptionHelper.cs", label="i < words.Length", span="504-504"];
m0_240 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", file="FSharpOptionHelper.cs", label="i++", span="504-504"];
m0_236 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", file="FSharpOptionHelper.cs", label="wordBuffer++", span="513-513"];
m0_245 [cluster="CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", file="FSharpOptionHelper.cs", label="Exit CommandLine.Text.HelpText.AddLine(System.Text.StringBuilder, string, int)", span="497-497"];
m0_10 [cluster="CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string, string)", file="FSharpOptionHelper.cs", label="Entry CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string, string)", span="95-95"];
m0_11 [cluster="CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string, string)", file="FSharpOptionHelper.cs", label="sentenceBuilder == null", span="97-97"];
m0_13 [cluster="CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string, string)", file="FSharpOptionHelper.cs", label="heading == null", span="98-98"];
m0_15 [cluster="CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string, string)", file="FSharpOptionHelper.cs", label="copyright == null", span="99-99"];
m0_19 [cluster="CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string, string)", file="FSharpOptionHelper.cs", label="this.sentenceBuilder = sentenceBuilder", span="104-104"];
m0_20 [cluster="CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string, string)", file="FSharpOptionHelper.cs", label="this.heading = heading", span="105-105"];
m0_21 [cluster="CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string, string)", file="FSharpOptionHelper.cs", label="this.copyright = copyright", span="106-106"];
m0_12 [cluster="CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string, string)", file="FSharpOptionHelper.cs", label="throw new ArgumentNullException(''sentenceBuilder'');", span="97-97"];
m0_14 [cluster="CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string, string)", file="FSharpOptionHelper.cs", label="throw new ArgumentNullException(''heading'');", span="98-98"];
m0_16 [cluster="CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string, string)", file="FSharpOptionHelper.cs", label="throw new ArgumentNullException(''copyright'');", span="99-99"];
m0_17 [cluster="CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string, string)", file="FSharpOptionHelper.cs", label="preOptionsHelp = new StringBuilder(BuilderCapacity)", span="101-101"];
m0_18 [cluster="CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string, string)", file="FSharpOptionHelper.cs", label="postOptionsHelp = new StringBuilder(BuilderCapacity)", span="102-102"];
m0_22 [cluster="CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string, string)", file="FSharpOptionHelper.cs", label="Exit CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string, string)", span="95-95"];
m0_341 [cluster="CommandLine.Text.HelpText.AddValueName(int, CommandLine.Core.ValueSpecification)", file="FSharpOptionHelper.cs", label="Entry CommandLine.Text.HelpText.AddValueName(int, CommandLine.Core.ValueSpecification)", span="713-713"];
m0_358 [cluster="CommandLine.Text.HelpText.AddValueName(int, CommandLine.Core.ValueSpecification)", file="FSharpOptionHelper.cs", label="return new StringBuilder(maxLength)\r\n                .BimapIf(\r\n                    specification.MetaName.Length > 0,\r\n                    it => it.AppendFormat(''{0} (pos. {1})'', specification.MetaName, specification.Index),\r\n                    it => it.AppendFormat(''value pos. {0}'', specification.Index))\r\n                .AppendFormatWhen(\r\n                    specification.MetaValue.Length > 0, '' {0}'', specification.MetaValue)\r\n                .ToString();", span="715-722"];
m0_359 [cluster="CommandLine.Text.HelpText.AddValueName(int, CommandLine.Core.ValueSpecification)", file="FSharpOptionHelper.cs", label="Exit CommandLine.Text.HelpText.AddValueName(int, CommandLine.Core.ValueSpecification)", span="713-713"];
m0_379 [cluster="System.Math.Max(int, int)", file="FSharpOptionHelper.cs", label="Entry System.Math.Max(int, int)", span="0-0"];
m0_178 [cluster="Unk.formatError", file="FSharpOptionHelper.cs", label="Entry Unk.formatError", span=""];
m0_286 [cluster="CommandLine.Text.HelpText.GetMaxLength(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>)", file="FSharpOptionHelper.cs", label="Entry CommandLine.Text.HelpText.GetMaxLength(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>)", span="732-732"];
m0_370 [cluster="CommandLine.Text.HelpText.GetMaxLength(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>)", file="FSharpOptionHelper.cs", label="return specifications.Aggregate(0,\r\n                (length, spec) =>\r\n                    {\r\n                        var specLength = spec.Tag == SpecificationType.Option\r\n                            ? GetMaxOptionLength((OptionSpecification)spec)\r\n                            : GetMaxValueLength((ValueSpecification)spec);\r\n\r\n                        return Math.Max(length, specLength);\r\n                    });", span="734-742"];
m0_371 [cluster="CommandLine.Text.HelpText.GetMaxLength(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>)", file="FSharpOptionHelper.cs", label="Exit CommandLine.Text.HelpText.GetMaxLength(System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>)", span="732-732"];
m0_328 [cluster="System.Text.StringBuilder.BimapIf(bool, System.Func<System.Text.StringBuilder, System.Text.StringBuilder>, System.Func<System.Text.StringBuilder, System.Text.StringBuilder>)", file="FSharpOptionHelper.cs", label="Entry System.Text.StringBuilder.BimapIf(bool, System.Func<System.Text.StringBuilder, System.Text.StringBuilder>, System.Func<System.Text.StringBuilder, System.Text.StringBuilder>)", span="41-41"];
m0_141 [cluster="System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string)", file="FSharpOptionHelper.cs", label="Entry System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string)", span="0-0"];
m0_292 [cluster="CommandLine.Text.HelpText.MakeHelpEntry()", file="FSharpOptionHelper.cs", label="Exit CommandLine.Text.HelpText.MakeHelpEntry()", span="599-599"];
m0_256 [cluster="CommandLine.Text.HelpText.MakeHelpEntry()", file="FSharpOptionHelper.cs", label="Entry CommandLine.Text.HelpText.MakeHelpEntry()", span="599-599"];
m0_291 [cluster="CommandLine.Text.HelpText.MakeHelpEntry()", file="FSharpOptionHelper.cs", label="return OptionSpecification.NewSwitch(\r\n                string.Empty,\r\n                ''help'',\r\n                false,\r\n                sentenceBuilder.HelpCommandText(AddDashesToOption),\r\n                string.Empty);", span="601-606"];
m0_247 [cluster="string.Substring(int, int)", file="FSharpOptionHelper.cs", label="Entry string.Substring(int, int)", span="0-0"];
m0_345 [cluster="string.FormatLocal(params object[])", file="FSharpOptionHelper.cs", label="Entry string.FormatLocal(params object[])", span="25-25"];
m0_143 [cluster="CommandLine.Text.HelpText.AddOptions<T>(int, CommandLine.ParserResult<T>)", file="FSharpOptionHelper.cs", label="Entry CommandLine.Text.HelpText.AddOptions<T>(int, CommandLine.ParserResult<T>)", span="365-365"];
m0_144 [cluster="CommandLine.Text.HelpText.AddOptions<T>(int, CommandLine.ParserResult<T>)", file="FSharpOptionHelper.cs", label="result == null", span="367-367"];
m0_146 [cluster="CommandLine.Text.HelpText.AddOptions<T>(int, CommandLine.ParserResult<T>)", file="FSharpOptionHelper.cs", label="return AddOptionsImpl(\r\n                GetSpecificationsFromType(result.TypeInfo.Current),\r\n                SentenceBuilder.RequiredWord(),\r\n                maximumLength);", span="369-372"];
m0_145 [cluster="CommandLine.Text.HelpText.AddOptions<T>(int, CommandLine.ParserResult<T>)", file="FSharpOptionHelper.cs", label="throw new ArgumentNullException(''result'');", span="367-367"];
m0_147 [cluster="CommandLine.Text.HelpText.AddOptions<T>(int, CommandLine.ParserResult<T>)", file="FSharpOptionHelper.cs", label="Exit CommandLine.Text.HelpText.AddOptions<T>(int, CommandLine.ParserResult<T>)", span="365-365"];
m0_378 [cluster="CommandLine.Text.HelpText.GetMaxValueLength(CommandLine.Core.ValueSpecification)", file="FSharpOptionHelper.cs", label="Entry CommandLine.Text.HelpText.GetMaxValueLength(CommandLine.Core.ValueSpecification)", span="781-781"];
m0_400 [cluster="CommandLine.Text.HelpText.GetMaxValueLength(CommandLine.Core.ValueSpecification)", file="FSharpOptionHelper.cs", label="var specLength = 0", span="783-783"];
m0_401 [cluster="CommandLine.Text.HelpText.GetMaxValueLength(CommandLine.Core.ValueSpecification)", file="FSharpOptionHelper.cs", label="var hasMeta = spec.MetaName.Length > 0", span="785-785"];
m0_403 [cluster="CommandLine.Text.HelpText.GetMaxValueLength(CommandLine.Core.ValueSpecification)", file="FSharpOptionHelper.cs", label="spec.MetaValue.Length > 0", span="788-788"];
m0_404 [cluster="CommandLine.Text.HelpText.GetMaxValueLength(CommandLine.Core.ValueSpecification)", file="FSharpOptionHelper.cs", label="metaLength = spec.MetaValue.Length + 1", span="789-789"];
m0_406 [cluster="CommandLine.Text.HelpText.GetMaxValueLength(CommandLine.Core.ValueSpecification)", file="FSharpOptionHelper.cs", label="specLength += spec.MetaName.Length + spec.Index.ToStringInvariant().Length + 8", span="792-792"];
m0_407 [cluster="CommandLine.Text.HelpText.GetMaxValueLength(CommandLine.Core.ValueSpecification)", file="FSharpOptionHelper.cs", label="specLength += spec.Index.ToStringInvariant().Length + 11", span="794-794"];
m0_402 [cluster="CommandLine.Text.HelpText.GetMaxValueLength(CommandLine.Core.ValueSpecification)", file="FSharpOptionHelper.cs", label="var metaLength = 0", span="787-787"];
m0_405 [cluster="CommandLine.Text.HelpText.GetMaxValueLength(CommandLine.Core.ValueSpecification)", file="FSharpOptionHelper.cs", label=hasMeta, span="791-791"];
m0_408 [cluster="CommandLine.Text.HelpText.GetMaxValueLength(CommandLine.Core.ValueSpecification)", file="FSharpOptionHelper.cs", label="specLength += metaLength", span="796-796"];
m0_409 [cluster="CommandLine.Text.HelpText.GetMaxValueLength(CommandLine.Core.ValueSpecification)", file="FSharpOptionHelper.cs", label="return specLength;", span="798-798"];
m0_410 [cluster="CommandLine.Text.HelpText.GetMaxValueLength(CommandLine.Core.ValueSpecification)", file="FSharpOptionHelper.cs", label="Exit CommandLine.Text.HelpText.GetMaxValueLength(CommandLine.Core.ValueSpecification)", span="781-781"];
m0_73 [cluster="CommandLine.Text.HelpText.AddPreOptionsLine(string)", file="FSharpOptionHelper.cs", label="Entry CommandLine.Text.HelpText.AddPreOptionsLine(string)", span="311-311"];
m0_122 [cluster="CommandLine.Text.HelpText.AddPreOptionsLine(string)", file="FSharpOptionHelper.cs", label="return AddPreOptionsLine(value, MaximumDisplayWidth);", span="313-313"];
m0_123 [cluster="CommandLine.Text.HelpText.AddPreOptionsLine(string)", file="FSharpOptionHelper.cs", label="Exit CommandLine.Text.HelpText.AddPreOptionsLine(string)", span="311-311"];
m0_266 [cluster="CSharpx.Maybe<T1>.Map<T1, T2>(System.Func<T1, T2>)", file="FSharpOptionHelper.cs", label="Entry CSharpx.Maybe<T1>.Map<T1, T2>(System.Func<T1, T2>)", span="265-265"];
m0_255 [cluster="System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", file="FSharpOptionHelper.cs", label="Entry System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", span="17-17"];
m0_42 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="FSharpOptionHelper.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
m0_111 [cluster="System.Func<TResult>.Invoke()", file="FSharpOptionHelper.cs", label="Entry System.Func<TResult>.Invoke()", span="0-0"];
m0_148 [cluster="CommandLine.Text.HelpText.AddVerbs(int, params System.Type[])", file="FSharpOptionHelper.cs", label="Entry CommandLine.Text.HelpText.AddVerbs(int, params System.Type[])", span="382-382"];
m0_149 [cluster="CommandLine.Text.HelpText.AddVerbs(int, params System.Type[])", file="FSharpOptionHelper.cs", label="types == null", span="384-384"];
m0_151 [cluster="CommandLine.Text.HelpText.AddVerbs(int, params System.Type[])", file="FSharpOptionHelper.cs", label="types.Length == 0", span="385-385"];
m0_153 [cluster="CommandLine.Text.HelpText.AddVerbs(int, params System.Type[])", file="FSharpOptionHelper.cs", label="return AddOptionsImpl(AdaptVerbsToSpecifications(types), SentenceBuilder.RequiredWord(), maximumLength);", span="387-387"];
m0_150 [cluster="CommandLine.Text.HelpText.AddVerbs(int, params System.Type[])", file="FSharpOptionHelper.cs", label="throw new ArgumentNullException(''types'');", span="384-384"];
m0_152 [cluster="CommandLine.Text.HelpText.AddVerbs(int, params System.Type[])", file="FSharpOptionHelper.cs", label="throw new ArgumentOutOfRangeException(''types'');", span="385-385"];
m0_154 [cluster="CommandLine.Text.HelpText.AddVerbs(int, params System.Type[])", file="FSharpOptionHelper.cs", label="Exit CommandLine.Text.HelpText.AddVerbs(int, params System.Type[])", span="382-382"];
m0_45 [cluster="CSharpx.Maybe<T>.Do<T>(System.Action<T>)", file="FSharpOptionHelper.cs", label="Entry CSharpx.Maybe<T>.Do<T>(System.Action<T>)", span="300-300"];
m0_6 [cluster="CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string)", file="FSharpOptionHelper.cs", label="Entry CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string)", span="70-70"];
m0_7 [cluster="CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string)", file="FSharpOptionHelper.cs", label="Exit CommandLine.Text.HelpText.HelpText(CommandLine.Text.SentenceBuilder, string)", span="70-70"];
m0_166 [cluster="Unk.ForEach", file="FSharpOptionHelper.cs", label="Entry Unk.ForEach", span=""];
m0_372 [cluster="Unk.Aggregate", file="FSharpOptionHelper.cs", label="Entry Unk.Aggregate", span=""];
m0_206 [cluster="CommandLine.Parser.FormatCommandLine<T>(T, System.Action<CommandLine.UnParserSettings>)", file="FSharpOptionHelper.cs", label="Entry CommandLine.Parser.FormatCommandLine<T>(T, System.Action<CommandLine.UnParserSettings>)", span="87-87"];
m0_176 [cluster="System.Text.StringBuilder.StringBuilder(string)", file="FSharpOptionHelper.cs", label="Entry System.Text.StringBuilder.StringBuilder(string)", span="0-0"];
m0_74 [cluster="System.Collections.IEnumerable.OfType<TResult>()", file="FSharpOptionHelper.cs", label="Entry System.Collections.IEnumerable.OfType<TResult>()", span="0-0"];
m0_258 [cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="FSharpOptionHelper.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0"];
m0_412 [file="FSharpOptionHelper.cs", label="CommandLine.Text.HelpText", span=""];
m0_413 [file="FSharpOptionHelper.cs", label=auto, span=""];
m0_414 [file="FSharpOptionHelper.cs", label="CommandLine.ParserResult<T>", span=""];
m0_415 [file="FSharpOptionHelper.cs", label=pr, span=""];
m0_416 [file="FSharpOptionHelper.cs", label="CommandLine.Text.HelpText", span=""];
m0_417 [file="FSharpOptionHelper.cs", label="System.Func<CommandLine.Error, string>", span=""];
m0_418 [file="FSharpOptionHelper.cs", label=int, span=""];
m0_419 [file="FSharpOptionHelper.cs", label=text, span=""];
m0_420 [file="FSharpOptionHelper.cs", label=s, span=""];
m0_421 [file="FSharpOptionHelper.cs", label=string, span=""];
m0_422 [file="FSharpOptionHelper.cs", label=maxLength, span=""];
m0_423 [file="FSharpOptionHelper.cs", label=remainingSpace, span=""];
m0_424 [file="FSharpOptionHelper.cs", label=int, span=""];
m0_425 [file="FSharpOptionHelper.cs", label="CommandLine.Core.Specification", span=""];
m0_426 [file="FSharpOptionHelper.cs", label=optionHelpText, span=""];
m0_427 [file="FSharpOptionHelper.cs", label="CommandLine.Core.OptionSpecification", span=""];
m0_428 [file="FSharpOptionHelper.cs", label="CommandLine.Core.ValueSpecification", span=""];
m2_29 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="TypeConverter.cs", label="Entry CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", span="55-55"];
m2_31 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", color=green, community=0, file="TypeConverter.cs", label="property.SetValue(instance, value, null)", prediction=0, span="61-61"];
m2_30 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="TypeConverter.cs", label="Action<Exception> fail = inner => { throw new ApplicationException(''Cannot set value to target instance.'', inner); }", span="57-57"];
m2_32 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", color=green, community=0, file="TypeConverter.cs", label=TargetException, prediction=1, span="63-63"];
m2_34 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="TypeConverter.cs", label=TargetParameterCountException, span="67-67"];
m2_36 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", color=green, community=0, file="TypeConverter.cs", label=MethodAccessException, prediction=2, span="71-71"];
m2_38 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", color=green, community=0, file="TypeConverter.cs", label=TargetInvocationException, prediction=3, span="75-75"];
m2_40 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", color=green, community=0, file="TypeConverter.cs", label="return instance;", prediction=0, span="80-80"];
m2_33 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", color=green, community=0, file="TypeConverter.cs", label="fail(e)", prediction=5, span="65-65"];
m2_35 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="TypeConverter.cs", label="fail(e)", span="69-69"];
m2_37 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", color=green, community=0, file="TypeConverter.cs", label="fail(e)", prediction=5, span="73-73"];
m2_39 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", color=green, community=0, file="TypeConverter.cs", label="fail(e)", prediction=5, span="77-77"];
m2_41 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="TypeConverter.cs", label="Exit CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", span="55-55"];
m2_47 [cluster="System.ApplicationException.ApplicationException(string, System.Exception)", file="TypeConverter.cs", label="Entry System.ApplicationException.ApplicationException(string, System.Exception)", span="0-0"];
m2_42 [cluster="System.Reflection.PropertyInfo.SetValue(object, object, object[])", file="TypeConverter.cs", label="Entry System.Reflection.PropertyInfo.SetValue(object, object, object[])", span="0-0"];
m2_44 [cluster="lambda expression", file="TypeConverter.cs", label="Entry lambda expression", span="57-57"];
m2_45 [cluster="lambda expression", file="TypeConverter.cs", label="throw new ApplicationException(''Cannot set value to target instance.'', inner);", span="57-57"];
m2_46 [cluster="lambda expression", file="TypeConverter.cs", label="Exit lambda expression", span="57-57"];
m2_43 [cluster="System.Action<T>.Invoke(T)", file="TypeConverter.cs", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
m0_87 -> m0_96  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m0_87 -> m0_98  [color=darkseagreen4, key=1, label="CommandLine.ParserResult<T>", style=dashed];
m0_87 -> m0_99  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m0_87 -> m0_102  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m0_87 -> m0_103  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m0_87 -> m0_105  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m0_87 -> m0_116  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m0_87 -> m0_106  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m0_105 -> m0_115  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_49 -> m0_131  [color=darkseagreen4, key=1, label="CommandLine.ParserResult<T>", style=dashed];
m0_377 -> m0_384  [color=darkseagreen4, key=1, label="CommandLine.Core.OptionSpecification", style=dashed];
m0_380 -> m0_387  [color=darkseagreen4, key=1, label=specLength, style=dashed];
m0_380 -> m0_398  [color=darkseagreen4, key=1, label=specLength, style=dashed];
m0_381 -> m0_386  [color=darkseagreen4, key=1, label=hasShort, style=dashed];
m0_381 -> m0_396  [color=darkseagreen4, key=1, label=hasShort, style=dashed];
m0_382 -> m0_391  [color=darkseagreen4, key=1, label=hasLong, style=dashed];
m0_382 -> m0_396  [color=darkseagreen4, key=1, label=hasLong, style=dashed];
m0_387 -> m0_387  [color=darkseagreen4, key=1, label=specLength, style=dashed];
m0_387 -> m0_389  [color=darkseagreen4, key=1, label=specLength, style=dashed];
m0_390 -> m0_398  [color=darkseagreen4, key=1, label=specLength, style=dashed];
m0_395 -> m0_398  [color=darkseagreen4, key=1, label=specLength, style=dashed];
m0_389 -> m0_389  [color=darkseagreen4, key=1, label=specLength, style=dashed];
m0_275 -> m0_275  [color=darkseagreen4, key=1, label=verbTuple, style=dashed];
m0_109 -> m0_157  [color=darkseagreen4, key=1, label="CommandLine.ParserResult<T>", style=dashed];
m0_109 -> m0_162  [color=darkseagreen4, key=1, label="System.Func<System.Collections.Generic.IEnumerable<CommandLine.MutuallyExclusiveSetError>, string>", style=dashed];
m0_157 -> m0_162  [color=darkseagreen4, key=1, label=meaningfulErrors, style=dashed];
m0_161 -> m0_169  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_161 -> m0_172  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_160 -> m0_174  [color=darkseagreen4, key=1, label=text, style=dashed];
m0_160 -> m0_162  [color=darkseagreen4, key=1, label=text, style=dashed];
m0_220 -> m0_222  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_290 -> m0_335  [color=darkseagreen4, key=1, label=int, style=dashed];
m0_290 -> m0_339  [color=darkseagreen4, key=1, label=int, style=dashed];
m0_290 -> m0_300  [color=darkseagreen4, key=1, label=int, style=dashed];
m0_290 -> m0_302  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
m0_290 -> m0_305  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
m0_290 -> m0_312  [color=darkseagreen4, key=1, label=int, style=dashed];
m0_290 -> m0_315  [color=darkseagreen4, key=1, label=int, style=dashed];
m0_290 -> m0_318  [color=darkseagreen4, key=1, label=int, style=dashed];
m0_290 -> m0_319  [color=darkseagreen4, key=1, label=int, style=dashed];
m0_290 -> m0_323  [color=darkseagreen4, key=1, label=int, style=dashed];
m0_290 -> m0_324  [color=darkseagreen4, key=1, label=int, style=dashed];
m0_299 -> m0_334  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_299 -> m0_338  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_304 -> m0_342  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_304 -> m0_307  [color=darkseagreen4, key=1, label=optionHelpText, style=dashed];
m0_304 -> m0_325  [color=darkseagreen4, key=1, label=optionHelpText, style=dashed];
m0_306 -> m0_325  [color=darkseagreen4, key=1, label=optionHelpText, style=dashed];
m0_309 -> m0_311  [color=darkseagreen4, key=1, label=words, style=dashed];
m0_309 -> m0_312  [color=darkseagreen4, key=1, label=words, style=dashed];
m0_309 -> m0_313  [color=darkseagreen4, key=1, label=words, style=dashed];
m0_309 -> m0_315  [color=darkseagreen4, key=1, label=words, style=dashed];
m0_309 -> m0_318  [color=darkseagreen4, key=1, label=words, style=dashed];
m0_309 -> m0_319  [color=darkseagreen4, key=1, label=words, style=dashed];
m0_322 -> m0_324  [color=darkseagreen4, key=1, label=optionHelpText, style=dashed];
m0_322 -> m0_325  [color=darkseagreen4, key=1, label=optionHelpText, style=dashed];
m0_308 -> m0_312  [color=darkseagreen4, key=1, label=wordBuffer, style=dashed];
m0_308 -> m0_318  [color=darkseagreen4, key=1, label=wordBuffer, style=dashed];
m0_314 -> m0_317  [color=darkseagreen4, key=1, label=wordBuffer, style=dashed];
m0_310 -> m0_312  [color=darkseagreen4, key=1, label=i, style=dashed];
m0_310 -> m0_313  [color=darkseagreen4, key=1, label=i, style=dashed];
m0_310 -> m0_315  [color=darkseagreen4, key=1, label=i, style=dashed];
m0_310 -> m0_318  [color=darkseagreen4, key=1, label=i, style=dashed];
m0_310 -> m0_319  [color=darkseagreen4, key=1, label=i, style=dashed];
m0_310 -> m0_321  [color=darkseagreen4, key=1, label=i, style=dashed];
m0_321 -> m0_321  [color=darkseagreen4, key=1, label=i, style=dashed];
m0_317 -> m0_317  [color=darkseagreen4, key=1, label=wordBuffer, style=dashed];
m0_373 -> m0_375  [color=darkseagreen4, key=1, label=int, style=dashed];
m0_269 -> m0_271  [color=darkseagreen4, key=1, label=attr, style=dashed];
m0_337 -> m0_350  [color=darkseagreen4, key=1, label="CommandLine.Core.OptionSpecification", style=dashed];
m0_337 -> m0_356  [color=darkseagreen4, key=1, label="CommandLine.Core.OptionSpecification", style=dashed];
m0_346 -> m0_349  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_346 -> m0_355  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_25 -> m0_28  [color=darkseagreen4, key=1, label="CommandLine.ParserResult<T>", style=dashed];
m0_25 -> m0_34  [color=darkseagreen4, key=1, label="CommandLine.ParserResult<T>", style=dashed];
m0_25 -> m0_36  [color=darkseagreen4, key=1, label="CommandLine.ParserResult<T>", style=dashed];
m0_25 -> m0_37  [color=darkseagreen4, key=1, label="CommandLine.ParserResult<T>", style=dashed];
m0_26 -> m0_32  [color=darkseagreen4, key=1, label=auto, style=dashed];
m0_26 -> m0_51  [color=darkseagreen4, key=1, label=auto, style=dashed];
m0_26 -> m0_33  [color=darkseagreen4, key=1, label=auto, style=dashed];
m0_26 -> m0_55  [color=darkseagreen4, key=1, label=auto, style=dashed];
m0_26 -> m0_36  [color=darkseagreen4, key=1, label=auto, style=dashed];
m0_26 -> m0_37  [color=darkseagreen4, key=1, label=auto, style=dashed];
m0_26 -> m0_38  [color=darkseagreen4, key=1, label=auto, style=dashed];
m0_29 -> m0_34  [color=darkseagreen4, key=1, label=errors, style=dashed];
m0_31 -> m0_51  [color=darkseagreen4, key=1, label=auto, style=dashed];
m0_31 -> m0_33  [color=darkseagreen4, key=1, label=auto, style=dashed];
m0_31 -> m0_55  [color=darkseagreen4, key=1, label=auto, style=dashed];
m0_31 -> m0_36  [color=darkseagreen4, key=1, label=auto, style=dashed];
m0_31 -> m0_37  [color=darkseagreen4, key=1, label=auto, style=dashed];
m0_31 -> m0_38  [color=darkseagreen4, key=1, label=auto, style=dashed];
m0_34 -> m0_57  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_27 -> m0_34  [color=darkseagreen4, key=1, label=errors, style=dashed];
m0_32 -> m0_50  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_33 -> m0_54  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_60 -> m0_67  [color=darkseagreen4, key=1, label="CommandLine.ParserResult<T>", style=dashed];
m0_60 -> m0_85  [color=darkseagreen4, key=1, label="CommandLine.ParserResult<T>", style=dashed];
m0_60 -> m0_70  [color=darkseagreen4, key=1, label="CommandLine.ParserResult<T>", style=dashed];
m0_60 -> m0_92  [color=darkseagreen4, key=1, label="CommandLine.ParserResult<T>", style=dashed];
m0_63 -> m0_66  [color=darkseagreen4, key=1, label=errors, style=dashed];
m0_67 -> m0_84  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_70 -> m0_88  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_70 -> m0_91  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_64 -> m0_78  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_66 -> m0_81  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_68 -> m0_70  [color=darkseagreen4, key=1, label=err, style=dashed];
m0_69 -> m0_89  [color=darkseagreen4, key=1, label=pr, style=dashed];
m0_48 -> m0_137  [color=darkseagreen4, key=1, label="params System.Type[]", style=dashed];
m0_48 -> m0_139  [color=darkseagreen4, key=1, label="params System.Type[]", style=dashed];
m0_263 -> m0_267  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_188 -> m0_191  [color=darkseagreen4, key=1, label=examples, style=dashed];
m0_190 -> m0_197  [color=darkseagreen4, key=1, label=text, style=dashed];
m0_190 -> m0_198  [color=darkseagreen4, key=1, label=text, style=dashed];
m0_195 -> m0_208  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_192 -> m0_196  [color=darkseagreen4, key=1, label=exampleText, style=dashed];
m0_192 -> m0_197  [color=darkseagreen4, key=1, label=exampleText, style=dashed];
m0_134 -> m0_283  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Specification>", style=dashed];
m0_134 -> m0_288  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_280 -> m0_283  [color=darkseagreen4, key=1, label=maxLength, style=dashed];
m0_280 -> m0_288  [color=darkseagreen4, key=1, label=maxLength, style=dashed];
m0_282 -> m0_288  [color=darkseagreen4, key=1, label=remainingSpace, style=dashed];
m0_283 -> m0_287  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_251 -> m0_253  [color=darkseagreen4, key=1, label=optionSpecs, style=dashed];
m0_252 -> m0_260  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_225 -> m0_231  [color=darkseagreen4, key=1, label=int, style=dashed];
m0_225 -> m0_232  [color=darkseagreen4, key=1, label="System.Text.StringBuilder", style=dashed];
m0_225 -> m0_234  [color=darkseagreen4, key=1, label=int, style=dashed];
m0_225 -> m0_235  [color=darkseagreen4, key=1, label="System.Text.StringBuilder", style=dashed];
m0_225 -> m0_237  [color=darkseagreen4, key=1, label=int, style=dashed];
m0_225 -> m0_238  [color=darkseagreen4, key=1, label="System.Text.StringBuilder", style=dashed];
m0_225 -> m0_242  [color=darkseagreen4, key=1, label="System.Text.StringBuilder", style=dashed];
m0_225 -> m0_243  [color=darkseagreen4, key=1, label=int, style=dashed];
m0_225 -> m0_244  [color=darkseagreen4, key=1, label="System.Text.StringBuilder", style=dashed];
m0_228 -> m0_230  [color=darkseagreen4, key=1, label=words, style=dashed];
m0_228 -> m0_231  [color=darkseagreen4, key=1, label=words, style=dashed];
m0_228 -> m0_232  [color=darkseagreen4, key=1, label=words, style=dashed];
m0_228 -> m0_234  [color=darkseagreen4, key=1, label=words, style=dashed];
m0_228 -> m0_237  [color=darkseagreen4, key=1, label=words, style=dashed];
m0_228 -> m0_238  [color=darkseagreen4, key=1, label=words, style=dashed];
m0_241 -> m0_243  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_241 -> m0_244  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_227 -> m0_231  [color=darkseagreen4, key=1, label=wordBuffer, style=dashed];
m0_227 -> m0_237  [color=darkseagreen4, key=1, label=wordBuffer, style=dashed];
m0_233 -> m0_236  [color=darkseagreen4, key=1, label=wordBuffer, style=dashed];
m0_229 -> m0_231  [color=darkseagreen4, key=1, label=i, style=dashed];
m0_229 -> m0_232  [color=darkseagreen4, key=1, label=i, style=dashed];
m0_229 -> m0_234  [color=darkseagreen4, key=1, label=i, style=dashed];
m0_229 -> m0_237  [color=darkseagreen4, key=1, label=i, style=dashed];
m0_229 -> m0_238  [color=darkseagreen4, key=1, label=i, style=dashed];
m0_229 -> m0_240  [color=darkseagreen4, key=1, label=i, style=dashed];
m0_240 -> m0_240  [color=darkseagreen4, key=1, label=i, style=dashed];
m0_236 -> m0_236  [color=darkseagreen4, key=1, label=wordBuffer, style=dashed];
m0_10 -> m0_13  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_10 -> m0_15  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_341 -> m0_361  [color=darkseagreen4, key=1, label="CommandLine.Core.ValueSpecification", style=dashed];
m0_341 -> m0_365  [color=darkseagreen4, key=1, label="CommandLine.Core.ValueSpecification", style=dashed];
m0_358 -> m0_360  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_358 -> m0_364  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_370 -> m0_373  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_143 -> m0_146  [color=darkseagreen4, key=1, label=int, style=dashed];
m0_378 -> m0_403  [color=darkseagreen4, key=1, label="CommandLine.Core.ValueSpecification", style=dashed];
m0_401 -> m0_405  [color=darkseagreen4, key=1, label=hasMeta, style=dashed];
m0_148 -> m0_151  [color=darkseagreen4, key=1, label="params System.Type[]", style=dashed];
m0_148 -> m0_153  [color=darkseagreen4, key=1, label=int, style=dashed];
m0_412 -> m0_122  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m0_412 -> m0_126  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m0_412 -> m0_131  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m0_412 -> m0_139  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m0_412 -> m0_146  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m0_412 -> m0_153  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m0_412 -> m0_214  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m0_412 -> m0_275  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m0_412 -> m0_283  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m0_412 -> m0_288  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m0_412 -> m0_284  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m0_412 -> m0_291  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m0_412 -> m0_293  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m0_412 -> m0_295  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m0_412 -> m0_296  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m0_412 -> m0_298  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m0_412 -> m0_335  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m0_412 -> m0_339  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m0_412 -> m0_300  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m0_412 -> m0_302  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m0_412 -> m0_313  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m0_412 -> m0_316  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m0_412 -> m0_319  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m0_412 -> m0_323  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m0_412 -> m0_325  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m0_412 -> m0_326  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m0_412 -> m0_346  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m0_412 -> m0_350  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m0_412 -> m0_356  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m0_412 -> m0_367  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m0_412 -> m0_368  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m0_412 -> m0_388  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m0_412 -> m0_393  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m0_413 -> m0_51  [color=darkseagreen4, key=1, label=auto, style=dashed];
m0_413 -> m0_55  [color=darkseagreen4, key=1, label=auto, style=dashed];
m0_414 -> m0_85  [color=darkseagreen4, key=1, label="CommandLine.ParserResult<T>", style=dashed];
m0_414 -> m0_92  [color=darkseagreen4, key=1, label="CommandLine.ParserResult<T>", style=dashed];
m0_415 -> m0_89  [color=darkseagreen4, key=1, label=pr, style=dashed];
m0_416 -> m0_116  [color=darkseagreen4, key=1, label="CommandLine.Text.HelpText", style=dashed];
m0_419 -> m0_174  [color=darkseagreen4, key=1, label=text, style=dashed];
m0_421 -> m0_288  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_422 -> m0_288  [color=darkseagreen4, key=1, label=maxLength, style=dashed];
m0_423 -> m0_288  [color=darkseagreen4, key=1, label=remainingSpace, style=dashed];
m0_424 -> m0_335  [color=darkseagreen4, key=1, label=int, style=dashed];
m0_424 -> m0_339  [color=darkseagreen4, key=1, label=int, style=dashed];
m0_425 -> m0_335  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
m0_425 -> m0_339  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
m0_427 -> m0_350  [color=darkseagreen4, key=1, label="CommandLine.Core.OptionSpecification", style=dashed];
m0_427 -> m0_356  [color=darkseagreen4, key=1, label="CommandLine.Core.OptionSpecification", style=dashed];
m0_428 -> m0_361  [color=darkseagreen4, key=1, label="CommandLine.Core.ValueSpecification", style=dashed];
m0_428 -> m0_365  [color=darkseagreen4, key=1, label="CommandLine.Core.ValueSpecification", style=dashed];
m2_29 -> m2_31  [color=green, key=1, label="System.Reflection.PropertyInfo", style=dashed];
m2_29 -> m2_40  [color=green, key=1, label=T, style=dashed];
m2_30 -> m2_33  [color=green, key=1, label=fail, style=dashed];
m2_30 -> m2_37  [color=green, key=1, label=fail, style=dashed];
m2_30 -> m2_39  [color=green, key=1, label=fail, style=dashed];
m2_30 -> m2_45  [color=darkseagreen4, key=1, label="System.Exception", style=dashed];
m2_30 -> m2_35  [color=darkseagreen4, key=1, label=fail, style=dashed];
}
