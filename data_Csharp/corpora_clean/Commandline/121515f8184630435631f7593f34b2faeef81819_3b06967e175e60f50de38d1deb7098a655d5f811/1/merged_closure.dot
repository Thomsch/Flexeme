digraph  {
m0_66 [cluster="Unk.SingleOrDefault", file="StringBuilderExtensions.cs", label="Entry Unk.SingleOrDefault", span=""];
m0_28 [cluster="CommandLine.Core.InstanceChooser.MakeNotParsed(System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", file="StringBuilderExtensions.cs", label="Entry CommandLine.Core.InstanceChooser.MakeNotParsed(System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", span="95-95"];
m0_77 [cluster="CommandLine.Core.InstanceChooser.MakeNotParsed(System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", file="StringBuilderExtensions.cs", label="return new NotParsed<object>(new NullInstance(), types, errors);", span="97-97"];
m0_78 [cluster="CommandLine.Core.InstanceChooser.MakeNotParsed(System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", file="StringBuilderExtensions.cs", label="Exit CommandLine.Core.InstanceChooser.MakeNotParsed(System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", span="95-95"];
m0_26 [cluster="System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", file="StringBuilderExtensions.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", span="57-57"];
m0_45 [cluster="Unk.>", file="StringBuilderExtensions.cs", label="Entry Unk.>", span=""];
m0_49 [cluster="Unk.MakeNotParsed", file="StringBuilderExtensions.cs", label="Entry Unk.MakeNotParsed", span=""];
m0_44 [cluster="Unk.Any", file="StringBuilderExtensions.cs", label="Entry Unk.Any", span=""];
m0_18 [cluster="CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="StringBuilderExtensions.cs", label="Entry CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="16-16"];
m0_31 [cluster="System.Func<T, TResult>.Invoke(T)", file="StringBuilderExtensions.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m0_79 [cluster="CommandLine.NotParsed<T>.NotParsed(T, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="StringBuilderExtensions.cs", label="Entry CommandLine.NotParsed<T>.NotParsed(T, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="136-136"];
m0_48 [cluster="CommandLine.BadVerbSelectedError.BadVerbSelectedError(string)", file="StringBuilderExtensions.cs", label="Entry CommandLine.BadVerbSelectedError.BadVerbSelectedError(string)", span="357-357"];
m0_11 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Entry lambda expression", span="22-22"];
m0_12 [cluster="lambda expression", color=green, community=0, file="StringBuilderExtensions.cs", label="NameLookup.Contains(name, optionSpecs, nameComparer)", prediction=0, span="22-22"];
m0_13 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Exit lambda expression", span="22-22"];
m0_68 [cluster="CommandLine.HelpVerbRequestedError.HelpVerbRequestedError(string, System.Type, bool)", file="StringBuilderExtensions.cs", label="Entry CommandLine.HelpVerbRequestedError.HelpVerbRequestedError(string, System.Type, bool)", span="383-383"];
m0_3 [cluster="CommandLine.Text.StringBuilderExtensions.AppendWhen(System.Text.StringBuilder, bool, params string[])", file="StringBuilderExtensions.cs", label="builder.Append(value)", span="15-15"];
m0_19 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="StringBuilderExtensions.cs", label="arguments.Empty()", span="39-39"];
m0_20 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="StringBuilderExtensions.cs", label="return MakeNotParsed(types, new NoVerbSelectedError());", span="41-41"];
m0_21 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="StringBuilderExtensions.cs", label="var firstArg = arguments.First()", span="44-44"];
m0_22 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="StringBuilderExtensions.cs", label="Func<string, bool> preprocCompare = command =>\r\n                    nameComparer.Equals(command, firstArg) ||\r\n                    nameComparer.Equals(string.Concat(''--'', command), firstArg)", span="46-48"];
m0_23 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="StringBuilderExtensions.cs", label="var verbs = Verb.SelectFromTypes(types)", span="50-50"];
m0_24 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="StringBuilderExtensions.cs", label="return preprocCompare(''help'')\r\n                ? MakeNotParsed(types,\r\n                    MakeHelpVerbRequestedError(verbs,\r\n                        arguments.Skip(1).SingleOrDefault() ?? string.Empty, nameComparer))\r\n                : preprocCompare(''version'')\r\n                    ? MakeNotParsed(types, new VersionRequestedError())\r\n                    : MatchVerb(tokenizer, verbs, arguments, nameComparer, parsingCulture);", span="52-58"];
m0_25 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="StringBuilderExtensions.cs", label="Exit CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="32-32"];
m0_14 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="StringBuilderExtensions.cs", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11"];
m0_35 [cluster="CommandLine.VersionRequestedError.VersionRequestedError()", file="StringBuilderExtensions.cs", label="Entry CommandLine.VersionRequestedError.VersionRequestedError()", span="432-432"];
m0_40 [cluster="System.StringComparer.Equals(string, string)", file="StringBuilderExtensions.cs", label="Entry System.StringComparer.Equals(string, string)", span="0-0"];
m0_67 [cluster="Unk.ToMaybe", file="StringBuilderExtensions.cs", label="Entry Unk.ToMaybe", span=""];
m0_56 [cluster="Unk.Single", file="StringBuilderExtensions.cs", label="Entry Unk.Single", span=""];
m0_0 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="StringBuilderExtensions.cs", label="Entry CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="13-13"];
m0_1 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", color=green, community=0, file="StringBuilderExtensions.cs", label="return Choose(\r\n                (args, optionSpecs) =>\r\n                    {\r\n                        var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer));\r\n                        var explodedTokens = Tokenizer.ExplodeOptionList(tokens, name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer));\r\n                        return explodedTokens;\r\n                    },\r\n                types,\r\n                arguments,\r\n                nameComparer,\r\n                parsingCulture);", prediction=1, span="19-29"];
m0_2 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="StringBuilderExtensions.cs", label="Exit CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="13-13"];
m0_4 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Entry lambda expression", span="20-25"];
m0_5 [cluster="lambda expression", color=green, community=0, file="StringBuilderExtensions.cs", label="var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer))", prediction=2, span="22-22"];
m0_41 [cluster="string.Concat(string, string)", file="StringBuilderExtensions.cs", label="Entry string.Concat(string, string)", span="0-0"];
m0_33 [cluster="System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", file="StringBuilderExtensions.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", span="0-0"];
m0_73 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Entry lambda expression", span="90-90"];
m0_6 [cluster="System.Text.StringBuilder.Append(string)", color=green, community=0, file="StringBuilderExtensions.cs", label="Entry System.Text.StringBuilder.Append(string)", prediction=0, span="0-0"];
m0_7 [cluster="CommandLine.Text.StringBuilderExtensions.SafeToString(System.Text.StringBuilder)", color=green, community=0, file="StringBuilderExtensions.cs", label="Entry CommandLine.Text.StringBuilderExtensions.SafeToString(System.Text.StringBuilder)", prediction=4, span="21-21"];
m0_15 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Entry lambda expression", span="23-23"];
m0_16 [cluster="lambda expression", color=green, community=0, file="StringBuilderExtensions.cs", label="NameLookup.HavingSeparator(name, optionSpecs, nameComparer)", prediction=0, span="23-23"];
m0_17 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Exit lambda expression", span="23-23"];
m0_8 [cluster="CommandLine.Text.StringBuilderExtensions.SafeToString(System.Text.StringBuilder)", file="StringBuilderExtensions.cs", label="return builder == null ? string.Empty : builder.ToString();", span="23-23"];
m0_38 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="nameComparer.Equals(command, firstArg) ||\r\n                    nameComparer.Equals(string.Concat(''--'', command), firstArg)", span="47-48"];
m0_37 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Entry lambda expression", span="46-48"];
m0_39 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Exit lambda expression", span="46-48"];
m0_51 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="nameComparer.Equals(a.Item1.Name, arguments.First())", span="68-68"];
m0_59 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="nameComparer.Equals(v.Item1.Name, arguments.First())", span="72-72"];
m0_71 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="nameComparer.Equals(v.Item1.Name, verb)", span="87-87"];
m0_54 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="verbs.Single(v => nameComparer.Equals(v.Item1.Name, arguments.First()))\r\n                                .Item2.AutoDefault()", span="72-73"];
m0_50 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Entry lambda expression", span="68-68"];
m0_53 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Entry lambda expression", span="71-73"];
m0_61 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Entry lambda expression", span="78-78"];
m0_52 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Exit lambda expression", span="68-68"];
m0_58 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Entry lambda expression", span="72-72"];
m0_60 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Exit lambda expression", span="72-72"];
m0_70 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Entry lambda expression", span="87-87"];
m0_72 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Exit lambda expression", span="87-87"];
m0_55 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Exit lambda expression", span="71-73"];
m0_63 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Exit lambda expression", span="78-78"];
m0_62 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="v.Item2", span="78-78"];
m0_74 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="new HelpVerbRequestedError(v.Item1.Name, v.Item2, true)", span="90-90"];
m0_75 [cluster="lambda expression", file="StringBuilderExtensions.cs", label="Exit lambda expression", span="90-90"];
m0_29 [cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", file="StringBuilderExtensions.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0"];
m0_32 [cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", file="StringBuilderExtensions.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0"];
m0_34 [cluster="CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", file="StringBuilderExtensions.cs", label="Entry CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", span="81-81"];
m0_64 [cluster="CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", file="StringBuilderExtensions.cs", label="return verb.Length > 0\r\n                ? verbs.SingleOrDefault(v => nameComparer.Equals(v.Item1.Name, verb))\r\n                        .ToMaybe()\r\n                        .Return(\r\n                            v => new HelpVerbRequestedError(v.Item1.Name, v.Item2, true),\r\n                            new HelpVerbRequestedError(null, null, false))\r\n                : new HelpVerbRequestedError(null, null, false);", span="86-92"];
m0_65 [cluster="CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", file="StringBuilderExtensions.cs", label="Exit CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", span="81-81"];
m0_47 [cluster="Unk.Select", file="StringBuilderExtensions.cs", label="Entry Unk.Select", span=""];
m0_27 [cluster="CommandLine.NoVerbSelectedError.NoVerbSelectedError()", file="StringBuilderExtensions.cs", label="Entry CommandLine.NoVerbSelectedError.NoVerbSelectedError()", span="421-421"];
m0_9 [cluster="CommandLine.Text.StringBuilderExtensions.SafeToString(System.Text.StringBuilder)", file="StringBuilderExtensions.cs", label="Exit CommandLine.Text.StringBuilderExtensions.SafeToString(System.Text.StringBuilder)", span="21-21"];
m0_69 [cluster="Unk.Return", file="StringBuilderExtensions.cs", label="Entry Unk.Return", span=""];
m0_36 [cluster="CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="StringBuilderExtensions.cs", label="Entry CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="61-61"];
m0_42 [cluster="CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="StringBuilderExtensions.cs", label="return verbs.Any(a => nameComparer.Equals(a.Item1.Name, arguments.First()))\r\n                ? InstanceBuilder.Build(\r\n                    Maybe.Just<Func<object>>(\r\n                        () =>\r\n                            verbs.Single(v => nameComparer.Equals(v.Item1.Name, arguments.First()))\r\n                                .Item2.AutoDefault()),\r\n                    tokenizer,\r\n                    arguments.Skip(1),\r\n                    nameComparer,\r\n                    parsingCulture)\r\n                : MakeNotParsed(verbs.Select(v => v.Item2), new BadVerbSelectedError(arguments.First()));", span="68-78"];
m0_43 [cluster="CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="StringBuilderExtensions.cs", label="Exit CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="61-61"];
m0_46 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="StringBuilderExtensions.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(CSharpx.Maybe<System.Func<T>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="35-35"];
m0_10 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CSharpx.Maybe<char>>)", file="StringBuilderExtensions.cs", label="Entry CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CSharpx.Maybe<char>>)", span="45-45"];
m0_57 [cluster="Unk.AutoDefault", file="StringBuilderExtensions.cs", label="Entry Unk.AutoDefault", span=""];
m0_80 [cluster="CommandLine.NullInstance.NullInstance()", file="StringBuilderExtensions.cs", label="Entry CommandLine.NullInstance.NullInstance()", span="9-9"];
m0_30 [cluster="CommandLine.Core.Verb.SelectFromTypes(System.Collections.Generic.IEnumerable<System.Type>)", file="StringBuilderExtensions.cs", label="Entry CommandLine.Core.Verb.SelectFromTypes(System.Collections.Generic.IEnumerable<System.Type>)", span="40-40"];
m0_76 [cluster="HelpVerbRequestedError.cstr", file="StringBuilderExtensions.cs", label="Entry HelpVerbRequestedError.cstr", span=""];
m0_81 [file="StringBuilderExtensions.cs", label="System.StringComparer", span=""];
m0_82 [file="StringBuilderExtensions.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
m0_83 [file="StringBuilderExtensions.cs", label="System.StringComparer", span=""];
m0_84 [file="StringBuilderExtensions.cs", label=firstArg, span=""];
m0_85 [file="StringBuilderExtensions.cs", label="System.Collections.Generic.IEnumerable<string>", span=""];
m0_86 [file="StringBuilderExtensions.cs", label="System.StringComparer", span=""];
m0_88 [file="StringBuilderExtensions.cs", label=string, span=""];
m0_89 [file="StringBuilderExtensions.cs", label="System.StringComparer", span=""];
m0_87 [file="StringBuilderExtensions.cs", label="System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>", span=""];
m0_3 -> m0_20  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<System.Type>", style=dashed];
m0_3 -> m0_38  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_3 -> m0_24  [color=darkseagreen4, key=1, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>", style=dashed];
m0_21 -> m0_38  [color=darkseagreen4, key=1, label=firstArg, style=dashed];
m0_22 -> m0_38  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_22 -> m0_24  [color=darkseagreen4, key=1, label=preprocCompare, style=dashed];
m0_0 -> m0_2  [color=darkseagreen4, key=1, label="params string[]", style=dashed];
m0_0 -> m0_3  [color=darkseagreen4, key=1, label="System.Text.StringBuilder", style=dashed];
m0_0 -> m0_4  [color=darkseagreen4, key=1, label="System.Text.StringBuilder", style=dashed];
m0_0 -> m0_12  [color=green, key=1, label="System.StringComparer", style=dashed];
m0_0 -> m0_6  [color=green, key=1, label="System.StringComparer", style=dashed];
m0_0 -> m0_16  [color=green, key=1, label="System.StringComparer", style=dashed];
m0_4 -> m0_12  [color=green, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m0_4 -> m0_6  [color=green, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m0_4 -> m0_16  [color=green, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m0_5 -> m0_11  [color=green, key=1, label="lambda expression", style=dashed];
m0_6 -> m0_15  [color=green, key=1, label="lambda expression", style=dashed];
m0_54 -> m0_58  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_34 -> m0_71  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_64 -> m0_70  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_64 -> m0_73  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_36 -> m0_51  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m0_36 -> m0_54  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>", style=dashed];
m0_36 -> m0_59  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m0_42 -> m0_50  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_42 -> m0_53  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_42 -> m0_61  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_81 -> m0_12  [color=green, key=1, label="System.StringComparer", style=dashed];
m0_81 -> m0_6  [color=green, key=1, label="System.StringComparer", style=dashed];
m0_81 -> m0_16  [color=green, key=1, label="System.StringComparer", style=dashed];
m0_82 -> m0_12  [color=green, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m0_82 -> m0_16  [color=green, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m0_83 -> m0_38  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_84 -> m0_38  [color=darkseagreen4, key=1, label=firstArg, style=dashed];
m0_85 -> m0_51  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m0_85 -> m0_59  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m0_85 -> m0_54  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m0_86 -> m0_51  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_86 -> m0_59  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_86 -> m0_54  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_88 -> m0_71  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_89 -> m0_71  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m0_87 -> m0_54  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>", style=dashed];
}
