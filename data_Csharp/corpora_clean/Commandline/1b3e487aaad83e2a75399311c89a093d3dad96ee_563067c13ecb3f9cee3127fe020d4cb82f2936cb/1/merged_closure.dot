digraph  {
m1_0 [cluster="CommandLine.Internal.Assumes.NotNull<T>(T, string)", file="Assumes.cs", label="Entry CommandLine.Internal.Assumes.NotNull<T>(T, string)", span="43-43"];
m1_1 [cluster="CommandLine.Internal.Assumes.NotNull<T>(T, string)", file="Assumes.cs", label="value == null", span="46-46"];
m1_2 [cluster="CommandLine.Internal.Assumes.NotNull<T>(T, string)", file="Assumes.cs", label="throw new ArgumentNullException(paramName);", span="48-48"];
m1_3 [cluster="CommandLine.Internal.Assumes.NotNull<T>(T, string)", file="Assumes.cs", label="Exit CommandLine.Internal.Assumes.NotNull<T>(T, string)", span="43-43"];
m1_5 [cluster="CommandLine.Internal.Assumes.NotNull<T>(T, string, string)", file="Assumes.cs", label="Entry CommandLine.Internal.Assumes.NotNull<T>(T, string, string)", span="52-52"];
m1_6 [cluster="CommandLine.Internal.Assumes.NotNull<T>(T, string, string)", file="Assumes.cs", label="value == null", span="55-55"];
m1_7 [cluster="CommandLine.Internal.Assumes.NotNull<T>(T, string, string)", file="Assumes.cs", label="throw new ArgumentNullException(paramName, message);", span="57-57"];
m1_8 [cluster="CommandLine.Internal.Assumes.NotNull<T>(T, string, string)", file="Assumes.cs", label="Exit CommandLine.Internal.Assumes.NotNull<T>(T, string, string)", span="52-52"];
m1_30 [cluster="System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string, string)", file="Assumes.cs", label="Entry System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string, string)", span="0-0"];
m1_21 [cluster="CommandLine.Internal.Assumes.NotZeroLength<T>(T[], string)", file="Assumes.cs", label="Entry CommandLine.Internal.Assumes.NotZeroLength<T>(T[], string)", span="77-77"];
m1_22 [cluster="CommandLine.Internal.Assumes.NotZeroLength<T>(T[], string)", file="Assumes.cs", label="array.Length == 0", span="79-79"];
m1_23 [cluster="CommandLine.Internal.Assumes.NotZeroLength<T>(T[], string)", file="Assumes.cs", label="throw new ArgumentOutOfRangeException(paramName);", span="81-81"];
m1_24 [cluster="CommandLine.Internal.Assumes.NotZeroLength<T>(T[], string)", file="Assumes.cs", label="Exit CommandLine.Internal.Assumes.NotZeroLength<T>(T[], string)", span="77-77"];
m1_26 [cluster="CommandLine.Internal.Assumes.NotZeroLength<T>(T[], string, string)", file="Assumes.cs", label="Entry CommandLine.Internal.Assumes.NotZeroLength<T>(T[], string, string)", span="84-84"];
m1_29 [cluster="CommandLine.Internal.Assumes.NotZeroLength<T>(T[], string, string)", file="Assumes.cs", label="Exit CommandLine.Internal.Assumes.NotZeroLength<T>(T[], string, string)", span="84-84"];
m1_14 [cluster="string.IsNullOrEmpty(string)", file="Assumes.cs", label="Entry string.IsNullOrEmpty(string)", span="0-0"];
m1_20 [cluster="System.ArgumentException.ArgumentException(string, string)", file="Assumes.cs", label="Entry System.ArgumentException.ArgumentException(string, string)", span="0-0"];
m1_16 [cluster="CommandLine.Internal.Assumes.NotNullOrEmpty(string, string, string)", file="Assumes.cs", label="Entry CommandLine.Internal.Assumes.NotNullOrEmpty(string, string, string)", span="69-69"];
m1_19 [cluster="CommandLine.Internal.Assumes.NotNullOrEmpty(string, string, string)", file="Assumes.cs", label="Exit CommandLine.Internal.Assumes.NotNullOrEmpty(string, string, string)", span="69-69"];
m1_4 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="Assumes.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m1_10 [cluster="CommandLine.Internal.Assumes.NotNullOrEmpty(string, string)", file="Assumes.cs", label="Entry CommandLine.Internal.Assumes.NotNullOrEmpty(string, string)", span="61-61"];
m1_11 [cluster="CommandLine.Internal.Assumes.NotNullOrEmpty(string, string)", file="Assumes.cs", label="string.IsNullOrEmpty(value)", span="63-63"];
m1_12 [cluster="CommandLine.Internal.Assumes.NotNullOrEmpty(string, string)", file="Assumes.cs", label="throw new ArgumentException(paramName);", span="65-65"];
m1_13 [cluster="CommandLine.Internal.Assumes.NotNullOrEmpty(string, string)", file="Assumes.cs", label="Exit CommandLine.Internal.Assumes.NotNullOrEmpty(string, string)", span="61-61"];
m1_25 [cluster="System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string)", file="Assumes.cs", label="Entry System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string)", span="0-0"];
m1_15 [cluster="System.ArgumentException.ArgumentException(string)", file="Assumes.cs", label="Entry System.ArgumentException.ArgumentException(string)", span="0-0"];
m1_9 [cluster="System.ArgumentNullException.ArgumentNullException(string, string)", file="Assumes.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string, string)", span="0-0"];
m2_90 [cluster="System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)", file="BadOptionInfo.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)", span="0-0"];
m2_32 [cluster="System.Text.StringBuilder.Append(char)", file="BadOptionInfo.cs", label="Entry System.Text.StringBuilder.Append(char)", span="0-0"];
m2_26 [cluster="System.Collections.Generic.IEnumerable<T>.ForEach<T>(System.Action<T>)", file="BadOptionInfo.cs", label="Entry System.Collections.Generic.IEnumerable<T>.ForEach<T>(System.Action<T>)", span="253-253"];
m2_19 [cluster="CSharpx.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", file="BadOptionInfo.cs", label="Entry CSharpx.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", span="126-126"];
m2_98 [cluster="CommandLine.UnParserExtensions.FormatOption(System.Tuple<CommandLine.Core.OptionSpecification, object>)", file="BadOptionInfo.cs", label="Entry CommandLine.UnParserExtensions.FormatOption(System.Tuple<CommandLine.Core.OptionSpecification, object>)", span="81-81"];
m2_99 [cluster="CommandLine.UnParserExtensions.FormatOption(System.Tuple<CommandLine.Core.OptionSpecification, object>)", file="BadOptionInfo.cs", label="var spec = optionSpec.Item1", span="83-83"];
m2_100 [cluster="CommandLine.UnParserExtensions.FormatOption(System.Tuple<CommandLine.Core.OptionSpecification, object>)", file="BadOptionInfo.cs", label="var value = optionSpec.Item2", span="84-84"];
m2_101 [cluster="CommandLine.UnParserExtensions.FormatOption(System.Tuple<CommandLine.Core.OptionSpecification, object>)", file="BadOptionInfo.cs", label="var builder = new StringBuilder()\r\n                    .Append(spec.FormatName())\r\n                    .Append(' ')\r\n                    .Append(FormatValue(spec, value))", span="85-88"];
m2_102 [cluster="CommandLine.UnParserExtensions.FormatOption(System.Tuple<CommandLine.Core.OptionSpecification, object>)", file="BadOptionInfo.cs", label="builder[builder.Length] == ' '", span="89-89"];
m2_103 [cluster="CommandLine.UnParserExtensions.FormatOption(System.Tuple<CommandLine.Core.OptionSpecification, object>)", file="BadOptionInfo.cs", label="builder.Remove(0, builder.Length - 1)", span="90-90"];
m2_104 [cluster="CommandLine.UnParserExtensions.FormatOption(System.Tuple<CommandLine.Core.OptionSpecification, object>)", file="BadOptionInfo.cs", label="return builder.ToString();", span="91-91"];
m2_105 [cluster="CommandLine.UnParserExtensions.FormatOption(System.Tuple<CommandLine.Core.OptionSpecification, object>)", file="BadOptionInfo.cs", label="Exit CommandLine.UnParserExtensions.FormatOption(System.Tuple<CommandLine.Core.OptionSpecification, object>)", span="81-81"];
m2_92 [cluster="CommandLine.UnParserExtensions.SeperatorOrSpace(CommandLine.Core.Specification)", file="BadOptionInfo.cs", label="Entry CommandLine.UnParserExtensions.SeperatorOrSpace(CommandLine.Core.Specification)", span="75-75"];
m2_93 [cluster="CommandLine.UnParserExtensions.SeperatorOrSpace(CommandLine.Core.Specification)", file="BadOptionInfo.cs", label="return (spec as OptionSpecification).ToMaybe()\r\n                .Return(o => o.Separator != '\0' ? o.Separator : ' ', ' ');", span="77-78"];
m2_94 [cluster="CommandLine.UnParserExtensions.SeperatorOrSpace(CommandLine.Core.Specification)", file="BadOptionInfo.cs", label="Exit CommandLine.UnParserExtensions.SeperatorOrSpace(CommandLine.Core.Specification)", span="75-75"];
m2_52 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", file="BadOptionInfo.cs", label="Entry CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", span="42-42"];
m2_53 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", file="BadOptionInfo.cs", label="var builder = new StringBuilder()", span="44-44"];
m2_54 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", file="BadOptionInfo.cs", label="spec.TargetType", span="45-45"];
m2_56 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", file="BadOptionInfo.cs", label="builder.Append(UnParseValue(value))", span="48-48"];
m2_59 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", file="BadOptionInfo.cs", label="var sep = spec.SeperatorOrSpace()", span="52-52"];
m2_61 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", file="BadOptionInfo.cs", label="var e = ((IEnumerable)value).GetEnumerator()", span="55-55"];
m2_57 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", file="BadOptionInfo.cs", label="builder.Append(' ')", span="49-49"];
m2_63 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", file="BadOptionInfo.cs", label="builder.Append(unParse(e.Current)).Append(sep)", span="57-57"];
m2_64 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", file="BadOptionInfo.cs", label="builder[builder.Length] == ' '", span="58-58"];
m2_65 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", file="BadOptionInfo.cs", label="builder.Remove(0, builder.Length - 1)", span="59-59"];
m2_66 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", file="BadOptionInfo.cs", label="return builder.ToString();", span="62-62"];
m2_55 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", file="BadOptionInfo.cs", label="TargetType.Scalar", span="47-47"];
m2_58 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", file="BadOptionInfo.cs", label="TargetType.Sequence", span="51-51"];
m2_60 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", file="BadOptionInfo.cs", label="Func<object, object> unParse = v\r\n                        => sep == ' ' ? UnParseValue(v) : v", span="53-54"];
m2_62 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", file="BadOptionInfo.cs", label="e.MoveNext()", span="56-56"];
m2_67 [cluster="CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", file="BadOptionInfo.cs", label="Exit CommandLine.UnParserExtensions.FormatValue(CommandLine.Core.Specification, object)", span="42-42"];
m2_71 [cluster="System.Collections.IEnumerable.GetEnumerator()", file="BadOptionInfo.cs", label="Entry System.Collections.IEnumerable.GetEnumerator()", span="0-0"];
m2_73 [cluster="System.Func<T, TResult>.Invoke(T)", file="BadOptionInfo.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m2_0 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(T)", file="BadOptionInfo.cs", label="Entry CommandLine.UnParserExtensions.FormatCommandLine<T>(T)", span="17-17"];
m2_1 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(T)", file="BadOptionInfo.cs", label="options == null", span="19-19"];
m2_3 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(T)", file="BadOptionInfo.cs", label="var type = options.GetType()", span="21-21"];
m2_2 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(T)", file="BadOptionInfo.cs", label="throw new ArgumentNullException(''options'');", span="19-19"];
m2_4 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(T)", file="BadOptionInfo.cs", label="var builder = new StringBuilder()", span="22-22"];
m2_5 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(T)", file="BadOptionInfo.cs", label="ReflectionHelper.GetAttribute<VerbAttribute>()\r\n                .Return(verb => builder.Append(verb.Name).Append(' '), builder)", span="24-25"];
m2_13 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(T)", file="BadOptionInfo.cs", label="return builder.ToString();", span="39-39"];
m2_14 [cluster="CommandLine.UnParserExtensions.FormatCommandLine<T>(T)", file="BadOptionInfo.cs", label="Exit CommandLine.UnParserExtensions.FormatCommandLine<T>(T)", span="17-17"];
m2_22 [cluster="Unk.Where", file="BadOptionInfo.cs", label="Entry Unk.Where", span=""];
m2_18 [cluster="CommandLine.Infrastructure.ReflectionHelper.GetAttribute<TAttribute>()", file="BadOptionInfo.cs", label="Entry CommandLine.Infrastructure.ReflectionHelper.GetAttribute<TAttribute>()", span="12-12"];
m2_86 [cluster="string.Replace(string, string)", file="BadOptionInfo.cs", label="Entry string.Replace(string, string)", span="0-0"];
m2_20 [cluster="System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", file="BadOptionInfo.cs", label="Entry System.Type.GetSpecifications<T>(System.Func<System.Reflection.PropertyInfo, T>)", span="14-14"];
m2_81 [cluster="T.ToMaybe<T>()", file="BadOptionInfo.cs", label="Entry T.ToMaybe<T>()", span="105-105"];
m2_38 [cluster="System.Tuple.Create<T1, T2>(T1, T2)", file="BadOptionInfo.cs", label="Entry System.Tuple.Create<T1, T2>(T1, T2)", span="0-0"];
m2_16 [cluster="object.GetType()", file="BadOptionInfo.cs", label="Entry object.GetType()", span="0-0"];
m2_95 [cluster="lambda expression", file="BadOptionInfo.cs", label="Entry lambda expression", span="78-78"];
m2_29 [cluster="lambda expression", file="BadOptionInfo.cs", label="builder.Append(verb.Name).Append(' ')", span="25-25"];
m2_28 [cluster="lambda expression", file="BadOptionInfo.cs", label="Entry lambda expression", span="25-25"];
m2_33 [cluster="lambda expression", file="BadOptionInfo.cs", label="Entry lambda expression", span="27-29"];
m2_39 [cluster="lambda expression", file="BadOptionInfo.cs", label="Entry lambda expression", span="31-31"];
m2_42 [cluster="lambda expression", file="BadOptionInfo.cs", label="Entry lambda expression", span="32-32"];
m2_45 [cluster="lambda expression", file="BadOptionInfo.cs", label="Entry lambda expression", span="34-34"];
m2_49 [cluster="lambda expression", file="BadOptionInfo.cs", label="Entry lambda expression", span="36-36"];
m2_30 [cluster="lambda expression", file="BadOptionInfo.cs", label="Exit lambda expression", span="25-25"];
m2_35 [cluster="lambda expression", file="BadOptionInfo.cs", label="Exit lambda expression", span="27-29"];
m2_41 [cluster="lambda expression", file="BadOptionInfo.cs", label="Exit lambda expression", span="31-31"];
m2_44 [cluster="lambda expression", file="BadOptionInfo.cs", label="Exit lambda expression", span="32-32"];
m2_47 [cluster="lambda expression", file="BadOptionInfo.cs", label="Exit lambda expression", span="34-34"];
m2_51 [cluster="lambda expression", file="BadOptionInfo.cs", label="Exit lambda expression", span="36-36"];
m2_76 [cluster="lambda expression", file="BadOptionInfo.cs", label="sep == ' ' ? UnParseValue(v) : v", span="54-54"];
m2_75 [cluster="lambda expression", file="BadOptionInfo.cs", label="Entry lambda expression", span="53-54"];
m2_77 [cluster="lambda expression", file="BadOptionInfo.cs", label="Exit lambda expression", span="53-54"];
m2_83 [cluster="lambda expression", file="BadOptionInfo.cs", label="v.Contains(''\'''') ? v.Replace(''\'''', ''\\\'''') : v", span="68-68"];
m2_88 [cluster="lambda expression", file="BadOptionInfo.cs", label="v.Contains(' ') ? ''\''''.JoinTo(doubQt(v), ''\'''') : v", span="72-72"];
m2_87 [cluster="lambda expression", file="BadOptionInfo.cs", label="Entry lambda expression", span="72-72"];
m2_82 [cluster="lambda expression", file="BadOptionInfo.cs", label="Entry lambda expression", span="67-68"];
m2_84 [cluster="lambda expression", file="BadOptionInfo.cs", label="Exit lambda expression", span="67-68"];
m2_89 [cluster="lambda expression", file="BadOptionInfo.cs", label="Exit lambda expression", span="72-72"];
m2_96 [cluster="lambda expression", file="BadOptionInfo.cs", label="o.Separator != '\0' ? o.Separator : ' '", span="78-78"];
m2_97 [cluster="lambda expression", file="BadOptionInfo.cs", label="Exit lambda expression", span="78-78"];
m2_85 [cluster="string.Contains(string)", file="BadOptionInfo.cs", label="Entry string.Contains(string)", span="0-0"];
m2_68 [cluster="CommandLine.UnParserExtensions.UnParseValue(object)", file="BadOptionInfo.cs", label="Entry CommandLine.UnParserExtensions.UnParseValue(object)", span="65-65"];
m2_78 [cluster="CommandLine.UnParserExtensions.UnParseValue(object)", file="BadOptionInfo.cs", label="Func<string, string> doubQt = v\r\n                => v.Contains(''\'''') ? v.Replace(''\'''', ''\\\'''') : v", span="67-68"];
m2_79 [cluster="CommandLine.UnParserExtensions.UnParseValue(object)", file="BadOptionInfo.cs", label="return (value as string)\r\n                .ToMaybe()\r\n                .Return(v => v.Contains(' ') ? ''\''''.JoinTo(doubQt(v), ''\'''') : v, value);", span="70-72"];
m2_80 [cluster="CommandLine.UnParserExtensions.UnParseValue(object)", file="BadOptionInfo.cs", label="Exit CommandLine.UnParserExtensions.UnParseValue(object)", span="65-65"];
m2_23 [cluster="System.Collections.Generic.IEnumerable<TSource>.OrderBy<TSource, TKey>(System.Func<TSource, TKey>)", file="BadOptionInfo.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.OrderBy<TSource, TKey>(System.Func<TSource, TKey>)", span="0-0"];
m2_25 [cluster="System.Text.StringBuilder.TrimEndIfMatch(char)", file="BadOptionInfo.cs", label="Entry System.Text.StringBuilder.TrimEndIfMatch(char)", span="86-86"];
m2_74 [cluster="System.Text.StringBuilder.Remove(int, int)", file="BadOptionInfo.cs", label="Entry System.Text.StringBuilder.Remove(int, int)", span="0-0"];
m2_48 [cluster="Unk.FormatOption", file="BadOptionInfo.cs", label="Entry Unk.FormatOption", span=""];
m2_91 [cluster="string.JoinTo(params string[])", file="BadOptionInfo.cs", label="Entry string.JoinTo(params string[])", span="45-45"];
m2_27 [cluster="System.Text.StringBuilder.ToString()", file="BadOptionInfo.cs", label="Entry System.Text.StringBuilder.ToString()", span="0-0"];
m2_70 [cluster="CommandLine.Core.Specification.SeperatorOrSpace()", file="BadOptionInfo.cs", label="Entry CommandLine.Core.Specification.SeperatorOrSpace()", span="75-75"];
m2_31 [cluster="System.Text.StringBuilder.Append(string)", file="BadOptionInfo.cs", label="Entry System.Text.StringBuilder.Append(string)", span="0-0"];
m2_106 [cluster="CommandLine.Core.OptionSpecification.FormatName()", file="BadOptionInfo.cs", label="Entry CommandLine.Core.OptionSpecification.FormatName()", span="94-94"];
m2_24 [cluster="Unk.ForEach", file="BadOptionInfo.cs", label="Entry Unk.ForEach", span=""];
m2_69 [cluster="System.Text.StringBuilder.Append(object)", file="BadOptionInfo.cs", label="Entry System.Text.StringBuilder.Append(object)", span="0-0"];
m2_21 [cluster="System.Collections.IEnumerable.OfType<TResult>()", file="BadOptionInfo.cs", label="Entry System.Collections.IEnumerable.OfType<TResult>()", span="0-0"];
m2_17 [cluster="System.Text.StringBuilder.StringBuilder()", file="BadOptionInfo.cs", label="Entry System.Text.StringBuilder.StringBuilder()", span="0-0"];
m2_72 [cluster="System.Collections.IEnumerator.MoveNext()", file="BadOptionInfo.cs", label="Entry System.Collections.IEnumerator.MoveNext()", span="0-0"];
m2_107 [cluster="CommandLine.UnParserExtensions.FormatName(CommandLine.Core.OptionSpecification)", file="BadOptionInfo.cs", label="Entry CommandLine.UnParserExtensions.FormatName(CommandLine.Core.OptionSpecification)", span="94-94"];
m2_108 [cluster="CommandLine.UnParserExtensions.FormatName(CommandLine.Core.OptionSpecification)", file="BadOptionInfo.cs", label="return optionSpec.LongName.Length > 0 ? ''--''.JoinTo(optionSpec.LongName) : ''-''.JoinTo(optionSpec.ShortName);", span="96-96"];
m2_109 [cluster="CommandLine.UnParserExtensions.FormatName(CommandLine.Core.OptionSpecification)", file="BadOptionInfo.cs", label="Exit CommandLine.UnParserExtensions.FormatName(CommandLine.Core.OptionSpecification)", span="94-94"];
m2_36 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="BadOptionInfo.cs", label="Entry CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", span="105-105"];
m2_15 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="BadOptionInfo.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m2_37 [cluster="System.Reflection.PropertyInfo.GetValue(object, object[])", file="BadOptionInfo.cs", label="Entry System.Reflection.PropertyInfo.GetValue(object, object[])", span="0-0"];
m2_110 [file="BadOptionInfo.cs", label=builder, span=""];
m2_111 [file="BadOptionInfo.cs", label=T, span=""];
m2_112 [file="BadOptionInfo.cs", label=sep, span=""];
m2_113 [file="BadOptionInfo.cs", label=doubQt, span=""];
m4_23 [cluster="lambda expression", file="CommandLineParser.cs", label="return errMisssing.NameInfo == NameInfo.EmptyName\r\n                                               ? ''A required value not bound to option name is missing.''\r\n                                               : ''Required option ''' + errMisssing.NameInfo.NameText + ''' is missing.'';", span="89-91"];
m4_7 [cluster="lambda expression", file="CommandLineParser.cs", label="Entry lambda expression", span="58-58"];
m4_0 [cluster="CommandLine.Text.SentenceBuilder.CreateDefault()", file="CommandLineParser.cs", label="Entry CommandLine.Text.SentenceBuilder.CreateDefault()", span="17-17"];
m4_1 [cluster="CommandLine.Text.SentenceBuilder.CreateDefault()", file="CommandLineParser.cs", label="return new DefaultSentenceBuilder();", span="19-19"];
m4_2 [cluster="CommandLine.Text.HeadingInfo.HeadingInfo(string, string)", file="CommandLineParser.cs", label="Entry CommandLine.Text.HeadingInfo.HeadingInfo(string, string)", span="62-62"];
m4_35 [cluster="lambda expression", file="CommandLineParser.cs", label="return ''No verb selected.'';", span="107-107"];
m4_22 [cluster="lambda expression", file="CommandLineParser.cs", label="var errMisssing = ((MissingRequiredOptionError)error)", span="88-88"];
m4_4 [cluster="lambda expression", file="CommandLineParser.cs", label="Entry lambda expression", span="50-50"];
m4_5 [cluster="lambda expression", file="CommandLineParser.cs", label="''Required.''", span="50-50"];
m4_3 [cluster="CommandLine.Text.SentenceBuilder.DefaultSentenceBuilder.DefaultSentenceBuilder()", file="CommandLineParser.cs", label="Entry CommandLine.Text.SentenceBuilder.DefaultSentenceBuilder.DefaultSentenceBuilder()", span="44-44"];
m4_6 [cluster="lambda expression", file="CommandLineParser.cs", label="Exit lambda expression", span="50-50"];
m4_21 [cluster="lambda expression", file="CommandLineParser.cs", label="ErrorType.MissingRequiredOptionError", span="87-87"];
m4_8 [cluster="lambda expression", file="CommandLineParser.cs", label="''ERROR(S):''", span="58-58"];
m4_9 [cluster="lambda expression", file="CommandLineParser.cs", label="Exit lambda expression", span="58-58"];
m4_10 [cluster="lambda expression", file="CommandLineParser.cs", label="Entry lambda expression", span="66-68"];
m4_11 [cluster="lambda expression", file="CommandLineParser.cs", label="isOption\r\n                        ? ''Display this help screen.''\r\n                        : ''Display more information on a specific command.''", span="66-68"];
m4_12 [cluster="lambda expression", file="CommandLineParser.cs", label="Exit lambda expression", span="66-68"];
m4_13 [cluster="lambda expression", file="CommandLineParser.cs", label="Entry lambda expression", span="76-110"];
m4_14 [cluster="lambda expression", file="CommandLineParser.cs", label="error.Tag", span="78-78"];
m4_17 [cluster="lambda expression", file="CommandLineParser.cs", label="ErrorType.MissingValueOptionError", span="82-82"];
m4_15 [cluster="lambda expression", file="CommandLineParser.cs", label="ErrorType.BadFormatTokenError", span="80-80"];
m4_16 [cluster="lambda expression", file="CommandLineParser.cs", label="return ''Token ''' + ((BadFormatTokenError)error).Token + ''' is not recognized.'';", span="81-81"];
m4_18 [cluster="lambda expression", file="CommandLineParser.cs", label="return ''Option ''' + ((MissingValueOptionError)error).NameInfo.NameText\r\n                                                      + ''' has no value.'';", span="83-84"];
m4_19 [cluster="lambda expression", file="CommandLineParser.cs", label="ErrorType.UnknownOptionError", span="85-85"];
m4_20 [cluster="string.IsNullOrEmpty(string)", file="CommandLineParser.cs", label="Entry string.IsNullOrEmpty(string)", span="0-0"];
m4_25 [cluster="CommandLine.Text.HeadingInfo.WriteMessage(string, System.IO.TextWriter)", file="CommandLineParser.cs", label="Entry CommandLine.Text.HeadingInfo.WriteMessage(string, System.IO.TextWriter)", span="130-130"];
m4_27 [cluster="CommandLine.Text.HeadingInfo.WriteMessage(string, System.IO.TextWriter)", file="CommandLineParser.cs", label="Assumes.NotNull(writer, ''writer'')", span="133-133"];
m4_30 [cluster="CommandLine.Text.HeadingInfo.WriteMessage(string, System.IO.TextWriter)", file="CommandLineParser.cs", label="builder.Append('': '')", span="137-137"];
m4_33 [cluster="CommandLine.Text.HeadingInfo.WriteMessage(string, System.IO.TextWriter)", file="CommandLineParser.cs", label="Exit CommandLine.Text.HeadingInfo.WriteMessage(string, System.IO.TextWriter)", span="130-130"];
m4_24 [cluster="System.Text.StringBuilder.ToString()", file="CommandLineParser.cs", label="Entry System.Text.StringBuilder.ToString()", span="0-0"];
m4_26 [cluster="CommandLine.Text.HeadingInfo.WriteMessage(string, System.IO.TextWriter)", file="CommandLineParser.cs", label="Assumes.NotNullOrEmpty(message, ''message'')", span="132-132"];
m4_29 [cluster="CommandLine.Text.HeadingInfo.WriteMessage(string, System.IO.TextWriter)", file="CommandLineParser.cs", label="builder.Append(_programName)", span="136-136"];
m4_32 [cluster="CommandLine.Text.HeadingInfo.WriteMessage(string, System.IO.TextWriter)", file="CommandLineParser.cs", label="writer.WriteLine(builder.ToString())", span="139-139"];
m4_34 [cluster="CommandLine.Infrastructure.Assumes.NotNull<T>(T, string)", file="CommandLineParser.cs", label="Entry CommandLine.Infrastructure.Assumes.NotNull<T>(T, string)", span="31-31"];
m4_28 [cluster="CommandLine.Text.HeadingInfo.WriteMessage(string, System.IO.TextWriter)", file="CommandLineParser.cs", label="var builder = new StringBuilder(_programName.Length + message.Length + 2)", span="135-135"];
m4_31 [cluster="CommandLine.Text.HeadingInfo.WriteMessage(string, System.IO.TextWriter)", file="CommandLineParser.cs", label="builder.Append(message)", span="138-138"];
m4_37 [cluster="CommandLine.Text.HeadingInfo.WriteMessage(string)", color=green, community=0, file="CommandLineParser.cs", label="WriteMessage(message, Console.Out)", prediction=0, span="150-150"];
m4_36 [cluster="CommandLine.Text.HeadingInfo.WriteMessage(string)", file="CommandLineParser.cs", label="Entry CommandLine.Text.HeadingInfo.WriteMessage(string)", span="148-148"];
m4_39 [cluster="CommandLine.Text.HeadingInfo.WriteError(string)", file="CommandLineParser.cs", label="Entry CommandLine.Text.HeadingInfo.WriteError(string)", span="159-159"];
m4_40 [cluster="CommandLine.Text.HeadingInfo.WriteError(string)", color=green, community=0, file="CommandLineParser.cs", label="WriteMessage(message, Console.Error)", prediction=0, span="161-161"];
m4_41 [cluster="CommandLine.Text.HeadingInfo.WriteError(string)", file="CommandLineParser.cs", label="Exit CommandLine.Text.HeadingInfo.WriteError(string)", span="159-159"];
m4_38 [cluster="System.InvalidOperationException.InvalidOperationException()", file="CommandLineParser.cs", label="Entry System.InvalidOperationException.InvalidOperationException()", span="0-0"];
m4_42 [file="CommandLineParser.cs", label="CommandLine.Text.HeadingInfo", span=""];
m5_5 [cluster="CommandLine.Internal.Assumes.NotNull<T>(T, string, string)", file="CommandLineParser.Strict.cs", label="Entry CommandLine.Internal.Assumes.NotNull<T>(T, string, string)", span="52-52"];
m5_7 [cluster="CommandLine.CommandLineParser.ParseArgumentsStrict(string[], object, int)", file="CommandLineParser.Strict.cs", label="Entry CommandLine.CommandLineParser.ParseArgumentsStrict(string[], object, int)", span="77-77"];
m5_11 [cluster="CommandLine.CommandLineParser.ParseArgumentsStrict(string[], object, int)", file="CommandLineParser.Strict.cs", label="Exit CommandLine.CommandLineParser.ParseArgumentsStrict(string[], object, int)", span="77-77"];
m5_41 [cluster="CommandLine.Internal.ReflectionUtil.RetrieveMethod<TAttribute>(object)", file="CommandLineParser.Strict.cs", label="Entry CommandLine.Internal.ReflectionUtil.RetrieveMethod<TAttribute>(object)", span="70-70"];
m5_6 [cluster="CommandLine.CommandLineParser.DoParseArgumentsStrict(string[], object, int)", file="CommandLineParser.Strict.cs", label="Entry CommandLine.CommandLineParser.DoParseArgumentsStrict(string[], object, int)", span="134-134"];
m5_28 [cluster="CommandLine.CommandLineParser.DoParseArgumentsStrict(string[], object, int)", file="CommandLineParser.Strict.cs", label="Exit CommandLine.CommandLineParser.DoParseArgumentsStrict(string[], object, int)", span="134-134"];
m5_31 [cluster="System.Environment.Exit(int)", file="CommandLineParser.Strict.cs", label="Entry System.Environment.Exit(int)", span="0-0"];
m5_18 [cluster="CommandLine.CommandLineParser.ParseArguments(string[], object, System.IO.TextWriter, int)", file="CommandLineParser.Strict.cs", label="Entry CommandLine.CommandLineParser.ParseArguments(string[], object, System.IO.TextWriter, int)", span="124-124"];
m5_23 [cluster="CommandLine.CommandLineParser.ParseArguments(string[], object, System.IO.TextWriter, int)", file="CommandLineParser.Strict.cs", label="Exit CommandLine.CommandLineParser.ParseArguments(string[], object, System.IO.TextWriter, int)", span="124-124"];
m5_30 [cluster="CommandLine.CommandLineParser.InvokeAutoBuildIfNeeded(object)", file="CommandLineParser.Strict.cs", label="Entry CommandLine.CommandLineParser.InvokeAutoBuildIfNeeded(object)", span="152-152"];
m5_40 [cluster="CommandLine.CommandLineParser.InvokeAutoBuildIfNeeded(object)", file="CommandLineParser.Strict.cs", label="Exit CommandLine.CommandLineParser.InvokeAutoBuildIfNeeded(object)", span="152-152"];
m5_44 [cluster="System.IO.TextWriter.Write(string)", file="CommandLineParser.Strict.cs", label="Entry System.IO.TextWriter.Write(string)", span="0-0"];
m5_45 [cluster="lambda expression", file="CommandLineParser.Strict.cs", label="Entry lambda expression", span="171-171"];
m5_47 [cluster="lambda expression", file="CommandLineParser.Strict.cs", label="Exit lambda expression", span="171-171"];
m5_42 [cluster="CommandLine.Internal.ReflectionUtil.RetrievePropertyList<TAttribute>(object)", file="CommandLineParser.Strict.cs", label="Entry CommandLine.Internal.ReflectionUtil.RetrievePropertyList<TAttribute>(object)", span="43-43"];
m5_0 [cluster="CommandLine.CommandLineParser.ParseArgumentsStrict(string[], object)", file="CommandLineParser.Strict.cs", label="Entry CommandLine.CommandLineParser.ParseArgumentsStrict(string[], object)", span="57-57"];
m5_4 [cluster="CommandLine.CommandLineParser.ParseArgumentsStrict(string[], object)", file="CommandLineParser.Strict.cs", label="Exit CommandLine.CommandLineParser.ParseArgumentsStrict(string[], object)", span="57-57"];
m5_29 [cluster="CommandLine.CommandLineParser.DoParseArguments(string[], object)", file="CommandLineParser.Strict.cs", label="Entry CommandLine.CommandLineParser.DoParseArguments(string[], object)", span="118-118"];
m5_12 [cluster="CommandLine.CommandLineParser.ParseArgumentsStrict(string[], object, System.IO.TextWriter)", file="CommandLineParser.Strict.cs", label="Entry CommandLine.CommandLineParser.ParseArgumentsStrict(string[], object, System.IO.TextWriter)", span="99-99"];
m5_17 [cluster="CommandLine.CommandLineParser.ParseArgumentsStrict(string[], object, System.IO.TextWriter)", file="CommandLineParser.Strict.cs", label="Exit CommandLine.CommandLineParser.ParseArgumentsStrict(string[], object, System.IO.TextWriter)", span="99-99"];
m5_48 [cluster="CommandLine.Text.HelpText.DefaultParsingErrorsHandler(object, CommandLine.Text.HelpText)", file="CommandLineParser.Strict.cs", label="Entry CommandLine.Text.HelpText.DefaultParsingErrorsHandler(object, CommandLine.Text.HelpText)", span="248-248"];
m5_43 [cluster="CommandLine.Text.HelpText.AutoBuild(object, CommandLine.Text.ParsingErrorsHandler, bool)", file="CommandLineParser.Strict.cs", label="Entry CommandLine.Text.HelpText.AutoBuild(object, CommandLine.Text.ParsingErrorsHandler, bool)", span="209-209"];
m5_49 [file="CommandLineParser.Strict.cs", label="CommandLine.CommandLineParser", span=""];
m5_50 [file="CommandLineParser.Strict.cs", label=object, span=""];
m7_4 [cluster="CommandLine.CommandLineParserException.CommandLineParserException(string, System.Exception)", file="CommandLineParserException.cs", label="Entry CommandLine.CommandLineParserException.CommandLineParserException(string, System.Exception)", span="57-57"];
m7_5 [cluster="CommandLine.CommandLineParserException.CommandLineParserException(string, System.Exception)", file="CommandLineParserException.cs", label="Exit CommandLine.CommandLineParserException.CommandLineParserException(string, System.Exception)", span="57-57"];
m7_0 [cluster="CommandLine.CommandLineParserException.CommandLineParserException()", file="CommandLineParserException.cs", label="Entry CommandLine.CommandLineParserException.CommandLineParserException()", span="48-48"];
m7_1 [cluster="CommandLine.CommandLineParserException.CommandLineParserException()", file="CommandLineParserException.cs", label="Exit CommandLine.CommandLineParserException.CommandLineParserException()", span="48-48"];
m7_6 [cluster="CommandLine.CommandLineParserException.CommandLineParserException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)", file="CommandLineParserException.cs", label="Entry CommandLine.CommandLineParserException.CommandLineParserException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)", span="62-62"];
m7_7 [cluster="CommandLine.CommandLineParserException.CommandLineParserException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)", file="CommandLineParserException.cs", label="Exit CommandLine.CommandLineParserException.CommandLineParserException(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)", span="62-62"];
m7_2 [cluster="CommandLine.CommandLineParserException.CommandLineParserException(string)", file="CommandLineParserException.cs", label="Entry CommandLine.CommandLineParserException.CommandLineParserException(string)", span="52-52"];
m7_3 [cluster="CommandLine.CommandLineParserException.CommandLineParserException(string)", file="CommandLineParserException.cs", label="Exit CommandLine.CommandLineParserException.CommandLineParserException(string)", span="52-52"];
m8_8 [cluster="CommandLine.Core.ReflectionExtensions.ToDescriptor(System.Type)", file="CommandLineParserSettings.cs", label="Entry CommandLine.Core.ReflectionExtensions.ToDescriptor(System.Type)", span="22-22"];
m8_9 [cluster="CommandLine.Core.ReflectionExtensions.ToDescriptor(System.Type)", file="CommandLineParserSettings.cs", label="type == null", span="24-24"];
m8_10 [cluster="CommandLine.Core.ReflectionExtensions.ToDescriptor(System.Type)", file="CommandLineParserSettings.cs", label="throw new ArgumentNullException(''type'');", span="24-24"];
m8_12 [cluster="CommandLine.Core.ReflectionExtensions.ToDescriptor(System.Type)", file="CommandLineParserSettings.cs", label="Exit CommandLine.Core.ReflectionExtensions.ToDescriptor(System.Type)", span="22-22"];
m8_5 [cluster="Unk.>", file="CommandLineParserSettings.cs", label="Entry Unk.>", span=""];
m8_43 [cluster="System.Action<T>.Invoke(T)", file="CommandLineParserSettings.cs", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
m8_6 [cluster="Unk.Any", file="CommandLineParserSettings.cs", label="Entry Unk.Any", span=""];
m8_23 [cluster="Unk.Where", file="CommandLineParserSettings.cs", label="Entry Unk.Where", span=""];
m8_29 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="CommandLineParserSettings.cs", label="Entry CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", span="55-55"];
m8_30 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="CommandLineParserSettings.cs", label="Action<Exception> fail = inner => { throw new ApplicationException(''Cannot set value to target instance.'', inner); }", span="57-57"];
m8_31 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="CommandLineParserSettings.cs", label="property.SetValue(instance, value, null)", span="61-61"];
m8_40 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="CommandLineParserSettings.cs", label="return instance;", span="80-80"];
m8_33 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="CommandLineParserSettings.cs", label="fail(e)", span="65-65"];
m8_35 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="CommandLineParserSettings.cs", label="fail(e)", span="69-69"];
m8_37 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="CommandLineParserSettings.cs", label="fail(e)", span="73-73"];
m8_39 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="CommandLineParserSettings.cs", label="fail(e)", span="77-77"];
m8_32 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="CommandLineParserSettings.cs", label=TargetException, span="63-63"];
m8_34 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="CommandLineParserSettings.cs", label=TargetParameterCountException, span="67-67"];
m8_36 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="CommandLineParserSettings.cs", label=MethodAccessException, span="71-71"];
m8_38 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="CommandLineParserSettings.cs", label=TargetInvocationException, span="75-75"];
m8_41 [cluster="CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", file="CommandLineParserSettings.cs", label="Exit CommandLine.Core.ReflectionExtensions.SetValue<T>(System.Reflection.PropertyInfo, T, object)", span="55-55"];
m8_47 [cluster="System.ApplicationException.ApplicationException(string, System.Exception)", file="CommandLineParserSettings.cs", label="Entry System.ApplicationException.ApplicationException(string, System.Exception)", span="0-0"];
m8_53 [cluster="System.Array.CreateInstance(System.Type, int)", file="CommandLineParserSettings.cs", label="Entry System.Array.CreateInstance(System.Type, int)", span="0-0"];
m8_7 [cluster="Unk.selector", file="CommandLineParserSettings.cs", label="Entry Unk.selector", span=""];
m8_44 [cluster="lambda expression", file="CommandLineParserSettings.cs", label="Entry lambda expression", span="57-57"];
m8_26 [cluster="lambda expression", file="CommandLineParserSettings.cs", label="specProp.Property.SetValue(current, selector(specProp))", span="52-52"];
m8_25 [cluster="lambda expression", file="CommandLineParserSettings.cs", label="Entry lambda expression", span="51-52"];
m8_27 [cluster="lambda expression", file="CommandLineParserSettings.cs", label="Exit lambda expression", span="51-52"];
m8_45 [cluster="lambda expression", file="CommandLineParserSettings.cs", label="throw new ApplicationException(''Cannot set value to target instance.'', inner);", span="57-57"];
m8_46 [cluster="lambda expression", file="CommandLineParserSettings.cs", label="Exit lambda expression", span="57-57"];
m8_42 [cluster="System.Reflection.PropertyInfo.SetValue(object, object, object[])", file="CommandLineParserSettings.cs", label="Entry System.Reflection.PropertyInfo.SetValue(object, object, object[])", span="0-0"];
m8_14 [cluster="System.Type.IsAssignableFrom(System.Type)", file="CommandLineParserSettings.cs", label="Entry System.Type.IsAssignableFrom(System.Type)", span="0-0"];
m8_3 [cluster="System.Type.GetProperties()", file="CommandLineParserSettings.cs", label="Entry System.Type.GetProperties()", span="0-0"];
m8_0 [cluster="CommandLine.Core.ReflectionExtensions.GetSpecifications<T>(System.Type, System.Func<System.Reflection.PropertyInfo, T>)", file="CommandLineParserSettings.cs", label="Entry CommandLine.Core.ReflectionExtensions.GetSpecifications<T>(System.Type, System.Func<System.Reflection.PropertyInfo, T>)", span="12-12"];
m8_1 [cluster="CommandLine.Core.ReflectionExtensions.GetSpecifications<T>(System.Type, System.Func<System.Reflection.PropertyInfo, T>)", file="CommandLineParserSettings.cs", label="return from pi in type.GetProperties()\r\n                   let attrs = pi.GetCustomAttributes(true)\r\n                   where\r\n                        attrs.OfType<OptionAttribute>().Any() ||\r\n                        attrs.OfType<ValueAttribute>().Any()\r\n                   select selector(pi);", span="14-19"];
m8_2 [cluster="CommandLine.Core.ReflectionExtensions.GetSpecifications<T>(System.Type, System.Func<System.Reflection.PropertyInfo, T>)", file="CommandLineParserSettings.cs", label="Exit CommandLine.Core.ReflectionExtensions.GetSpecifications<T>(System.Type, System.Func<System.Reflection.PropertyInfo, T>)", span="12-12"];
m8_4 [cluster="System.Reflection.MemberInfo.GetCustomAttributes(bool)", file="CommandLineParserSettings.cs", label="Entry System.Reflection.MemberInfo.GetCustomAttributes(bool)", span="0-0"];
m8_24 [cluster="Unk.Aggregate", file="CommandLineParserSettings.cs", label="Entry Unk.Aggregate", span=""];
m8_48 [cluster="CommandLine.Core.ReflectionExtensions.CreateEmptyArray(System.Type)", file="CommandLineParserSettings.cs", label="Entry CommandLine.Core.ReflectionExtensions.CreateEmptyArray(System.Type)", span="83-83"];
m8_49 [cluster="CommandLine.Core.ReflectionExtensions.CreateEmptyArray(System.Type)", file="CommandLineParserSettings.cs", label="type == null", span="85-85"];
m8_51 [cluster="CommandLine.Core.ReflectionExtensions.CreateEmptyArray(System.Type)", file="CommandLineParserSettings.cs", label="return Array.CreateInstance(type, 0);", span="87-87"];
m8_50 [cluster="CommandLine.Core.ReflectionExtensions.CreateEmptyArray(System.Type)", file="CommandLineParserSettings.cs", label="throw new ArgumentNullException(''type'');", span="85-85"];
m8_52 [cluster="CommandLine.Core.ReflectionExtensions.CreateEmptyArray(System.Type)", file="CommandLineParserSettings.cs", label="Exit CommandLine.Core.ReflectionExtensions.CreateEmptyArray(System.Type)", span="83-83"];
m8_20 [cluster="CommandLine.Core.ReflectionExtensions.SetProperties<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", file="CommandLineParserSettings.cs", label="Entry CommandLine.Core.ReflectionExtensions.SetProperties<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", span="42-42"];
m8_21 [cluster="CommandLine.Core.ReflectionExtensions.SetProperties<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", file="CommandLineParserSettings.cs", label="return specProps.Where(predicate)\r\n                .Aggregate(\r\n                    instance,\r\n                    (current, specProp) =>\r\n                        specProp.Property.SetValue(current, selector(specProp)));", span="48-52"];
m8_22 [cluster="CommandLine.Core.ReflectionExtensions.SetProperties<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", file="CommandLineParserSettings.cs", label="Exit CommandLine.Core.ReflectionExtensions.SetProperties<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", span="42-42"];
m8_28 [cluster="Unk.SetValue", file="CommandLineParserSettings.cs", label="Entry Unk.SetValue", span=""];
m8_13 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="CommandLineParserSettings.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m8_15 [cluster="CommandLine.Core.ReflectionExtensions.IsScalar(System.Type)", file="CommandLineParserSettings.cs", label="Entry CommandLine.Core.ReflectionExtensions.IsScalar(System.Type)", span="35-35"];
m8_18 [cluster="CommandLine.Core.ReflectionExtensions.IsScalar(System.Type)", file="CommandLineParserSettings.cs", label="return type == typeof(string) || !type.IsArray && !typeof(IEnumerable).IsAssignableFrom(type);", span="39-39"];
m8_19 [cluster="CommandLine.Core.ReflectionExtensions.IsScalar(System.Type)", file="CommandLineParserSettings.cs", label="Exit CommandLine.Core.ReflectionExtensions.IsScalar(System.Type)", span="35-35"];
m8_54 [file="CommandLineParserSettings.cs", label="System.Func<CommandLine.Core.SpecificationProperty, object>", span=""];
m10_16 [cluster="CommandLine.OptionAttribute.CreateOptionInfo()", file="CopyrightInfo.cs", label="Entry CommandLine.OptionAttribute.CreateOptionInfo()", span="77-77"];
m10_37 [cluster="Unk.BeSameAs", file="CopyrightInfo.cs", label="Entry Unk.BeSameAs", span=""];
m10_18 [cluster="CommandLine.Tests.Unit.Infrastructure.OptionMapFixture.OptionMapBuilder.AppendOption(char, string)", file="CopyrightInfo.cs", label="Entry CommandLine.Tests.Unit.Infrastructure.OptionMapFixture.OptionMapBuilder.AppendOption(char, string)", span="63-63"];
m10_19 [cluster="CommandLine.Tests.Unit.Infrastructure.OptionMapFixture.OptionMapBuilder.AppendOption(char, string)", file="CopyrightInfo.cs", label="var oa = new OptionAttribute(shortName, longName)", span="65-65"];
m10_20 [cluster="CommandLine.Tests.Unit.Infrastructure.OptionMapFixture.OptionMapBuilder.AppendOption(char, string)", file="CopyrightInfo.cs", label="var oi = oa.CreateOptionInfo()", span="66-66"];
m10_21 [cluster="CommandLine.Tests.Unit.Infrastructure.OptionMapFixture.OptionMapBuilder.AppendOption(char, string)", file="CopyrightInfo.cs", label="_optionMap[oa.UniqueName] = oi", span="67-67"];
m10_22 [cluster="CommandLine.Tests.Unit.Infrastructure.OptionMapFixture.OptionMapBuilder.AppendOption(char, string)", file="CopyrightInfo.cs", label="_options.Add(oi)", span="68-68"];
m10_24 [cluster="CommandLine.Tests.Unit.Infrastructure.OptionMapFixture.OptionMapBuilder.AppendOption(char, string)", file="CopyrightInfo.cs", label="Exit CommandLine.Tests.Unit.Infrastructure.OptionMapFixture.OptionMapBuilder.AppendOption(char, string)", span="63-63"];
m10_0 [cluster="CommandLine.Tests.Unit.Infrastructure.OptionMapFixture.OptionMapBuilder.OptionMapBuilder(int)", file="CopyrightInfo.cs", label="Entry CommandLine.Tests.Unit.Infrastructure.OptionMapFixture.OptionMapBuilder.OptionMapBuilder(int)", span="47-47"];
m10_1 [cluster="CommandLine.Tests.Unit.Infrastructure.OptionMapFixture.OptionMapBuilder.OptionMapBuilder(int)", file="CopyrightInfo.cs", label="_optionMap = new OptionMap(capacity, new ParserSettings(true))", span="49-49"];
m10_2 [cluster="CommandLine.Tests.Unit.Infrastructure.OptionMapFixture.OptionMapBuilder.OptionMapBuilder(int)", file="CopyrightInfo.cs", label="_options = new List<OptionInfo>(capacity)", span="50-50"];
m10_3 [cluster="CommandLine.Tests.Unit.Infrastructure.OptionMapFixture.OptionMapBuilder.OptionMapBuilder(int)", file="CopyrightInfo.cs", label="_names = new List<string>(capacity)", span="51-51"];
m10_4 [cluster="CommandLine.Tests.Unit.Infrastructure.OptionMapFixture.OptionMapBuilder.OptionMapBuilder(int)", file="CopyrightInfo.cs", label="Exit CommandLine.Tests.Unit.Infrastructure.OptionMapFixture.OptionMapBuilder.OptionMapBuilder(int)", span="47-47"];
m10_8 [cluster="CommandLine.Tests.Unit.Infrastructure.OptionMapFixture.OptionMapBuilder.AppendOption(string)", file="CopyrightInfo.cs", label="Entry CommandLine.Tests.Unit.Infrastructure.OptionMapFixture.OptionMapBuilder.AppendOption(string)", span="54-54"];
m10_9 [cluster="CommandLine.Tests.Unit.Infrastructure.OptionMapFixture.OptionMapBuilder.AppendOption(string)", file="CopyrightInfo.cs", label="var oa = new OptionAttribute(longName)", span="56-56"];
m10_10 [cluster="CommandLine.Tests.Unit.Infrastructure.OptionMapFixture.OptionMapBuilder.AppendOption(string)", file="CopyrightInfo.cs", label="var oi = oa.CreateOptionInfo()", span="57-57"];
m10_11 [cluster="CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string, System.Collections.Generic.IEnumerable<string>)", file="CopyrightInfo.cs", label="Entry CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string, System.Collections.Generic.IEnumerable<string>)", span="25-25"];
m10_13 [cluster="CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string, System.Collections.Generic.IEnumerable<string>)", file="CopyrightInfo.cs", label="Exit CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string, System.Collections.Generic.IEnumerable<string>)", span="25-25"];
m10_12 [cluster="CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string, System.Collections.Generic.IEnumerable<string>)", color=green, community=0, file="CopyrightInfo.cs", label="return new OptionSpecification(\r\n                specification.ShortName,\r\n                newLongName,\r\n                specification.Required,\r\n                specification.SetName,\r\n                specification.Min,\r\n                specification.Max,\r\n                specification.Separator,\r\n                specification.DefaultValue,\r\n                specification.ConversionType,\r\n                specification.HelpText,\r\n                specification.MetaValue,\r\n                enumValues);", prediction=2, span="27-39"];
m10_14 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="CopyrightInfo.cs", label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", span="17-17"];
m10_6 [cluster="CommandLine.ParserSettings.ParserSettings(bool)", file="CopyrightInfo.cs", label="Entry CommandLine.ParserSettings.ParserSettings(bool)", span="60-60"];
m10_25 [cluster="CommandLine.OptionAttribute.OptionAttribute(char, string)", file="CopyrightInfo.cs", label="Entry CommandLine.OptionAttribute.OptionAttribute(char, string)", span="68-68"];
m10_38 [cluster="CommandLine.Tests.Unit.Infrastructure.OptionMapFixture.CreateMap(ref CommandLine.Infrastructure.OptionMap, System.Collections.Generic.IDictionary<string, CommandLine.Infrastructure.OptionInfo>)", file="CopyrightInfo.cs", label="Entry CommandLine.Tests.Unit.Infrastructure.OptionMapFixture.CreateMap(ref CommandLine.Infrastructure.OptionMap, System.Collections.Generic.IDictionary<string, CommandLine.Infrastructure.OptionInfo>)", span="118-118"];
m10_39 [cluster="CommandLine.Tests.Unit.Infrastructure.OptionMapFixture.CreateMap(ref CommandLine.Infrastructure.OptionMap, System.Collections.Generic.IDictionary<string, CommandLine.Infrastructure.OptionInfo>)", file="CopyrightInfo.cs", label="map == null", span="120-120"];
m10_47 [cluster="CommandLine.Tests.Unit.Infrastructure.OptionMapFixture.CreateMap(ref CommandLine.Infrastructure.OptionMap, System.Collections.Generic.IDictionary<string, CommandLine.Infrastructure.OptionInfo>)", file="CopyrightInfo.cs", label="map[attribute1.UniqueName] = option1", span="133-133"];
m10_48 [cluster="CommandLine.Tests.Unit.Infrastructure.OptionMapFixture.CreateMap(ref CommandLine.Infrastructure.OptionMap, System.Collections.Generic.IDictionary<string, CommandLine.Infrastructure.OptionInfo>)", file="CopyrightInfo.cs", label="map[attribute2.UniqueName] = option2", span="134-134"];
m10_49 [cluster="CommandLine.Tests.Unit.Infrastructure.OptionMapFixture.CreateMap(ref CommandLine.Infrastructure.OptionMap, System.Collections.Generic.IDictionary<string, CommandLine.Infrastructure.OptionInfo>)", file="CopyrightInfo.cs", label="map[attribute3.UniqueName] = option3", span="135-135"];
m10_50 [cluster="CommandLine.Tests.Unit.Infrastructure.OptionMapFixture.CreateMap(ref CommandLine.Infrastructure.OptionMap, System.Collections.Generic.IDictionary<string, CommandLine.Infrastructure.OptionInfo>)", file="CopyrightInfo.cs", label="optionCache != null", span="137-137"];
m10_51 [cluster="CommandLine.Tests.Unit.Infrastructure.OptionMapFixture.CreateMap(ref CommandLine.Infrastructure.OptionMap, System.Collections.Generic.IDictionary<string, CommandLine.Infrastructure.OptionInfo>)", file="CopyrightInfo.cs", label="optionCache[attribute1.UniqueName] = option1", span="139-139"];
m10_52 [cluster="CommandLine.Tests.Unit.Infrastructure.OptionMapFixture.CreateMap(ref CommandLine.Infrastructure.OptionMap, System.Collections.Generic.IDictionary<string, CommandLine.Infrastructure.OptionInfo>)", file="CopyrightInfo.cs", label="optionCache[attribute1.UniqueName] = option2", span="140-140"];
m10_53 [cluster="CommandLine.Tests.Unit.Infrastructure.OptionMapFixture.CreateMap(ref CommandLine.Infrastructure.OptionMap, System.Collections.Generic.IDictionary<string, CommandLine.Infrastructure.OptionInfo>)", file="CopyrightInfo.cs", label="optionCache[attribute2.UniqueName]= option3", span="141-141"];
m10_54 [cluster="CommandLine.Tests.Unit.Infrastructure.OptionMapFixture.CreateMap(ref CommandLine.Infrastructure.OptionMap, System.Collections.Generic.IDictionary<string, CommandLine.Infrastructure.OptionInfo>)", file="CopyrightInfo.cs", label="return map;", span="144-144"];
m10_44 [cluster="CommandLine.Tests.Unit.Infrastructure.OptionMapFixture.CreateMap(ref CommandLine.Infrastructure.OptionMap, System.Collections.Generic.IDictionary<string, CommandLine.Infrastructure.OptionInfo>)", file="CopyrightInfo.cs", label="var option1 = attribute1.CreateOptionInfo()", span="129-129"];
m10_45 [cluster="CommandLine.Tests.Unit.Infrastructure.OptionMapFixture.CreateMap(ref CommandLine.Infrastructure.OptionMap, System.Collections.Generic.IDictionary<string, CommandLine.Infrastructure.OptionInfo>)", file="CopyrightInfo.cs", label="var option2 = attribute2.CreateOptionInfo()", span="130-130"];
m10_46 [cluster="CommandLine.Tests.Unit.Infrastructure.OptionMapFixture.CreateMap(ref CommandLine.Infrastructure.OptionMap, System.Collections.Generic.IDictionary<string, CommandLine.Infrastructure.OptionInfo>)", file="CopyrightInfo.cs", label="var option3 = attribute3.CreateOptionInfo()", span="131-131"];
m10_55 [cluster="CommandLine.Tests.Unit.Infrastructure.OptionMapFixture.CreateMap(ref CommandLine.Infrastructure.OptionMap, System.Collections.Generic.IDictionary<string, CommandLine.Infrastructure.OptionInfo>)", file="CopyrightInfo.cs", label="Exit CommandLine.Tests.Unit.Infrastructure.OptionMapFixture.CreateMap(ref CommandLine.Infrastructure.OptionMap, System.Collections.Generic.IDictionary<string, CommandLine.Infrastructure.OptionInfo>)", span="118-118"];
m10_7 [cluster="System.Collections.Generic.List<T>.List(int)", file="CopyrightInfo.cs", label="Entry System.Collections.Generic.List<T>.List(int)", span="0-0"];
m10_17 [cluster="System.Collections.Generic.List<T>.Add(T)", file="CopyrightInfo.cs", label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0"];
m10_26 [cluster="CommandLine.Tests.Unit.Infrastructure.OptionMapFixture.Manage_options()", file="CopyrightInfo.cs", label="Entry CommandLine.Tests.Unit.Infrastructure.OptionMapFixture.Manage_options()", span="90-90"];
m10_27 [cluster="CommandLine.Tests.Unit.Infrastructure.OptionMapFixture.Manage_options()", file="CopyrightInfo.cs", label="var omBuilder = new OptionMapBuilder(3)", span="92-92"];
m10_28 [cluster="CommandLine.Tests.Unit.Infrastructure.OptionMapFixture.Manage_options()", file="CopyrightInfo.cs", label="omBuilder.AppendOption('p', ''pretend'')", span="93-93"];
m10_29 [cluster="CommandLine.Tests.Unit.Infrastructure.OptionMapFixture.Manage_options()", file="CopyrightInfo.cs", label="omBuilder.AppendOption(''newuse'')", span="94-94"];
m10_30 [cluster="CommandLine.Tests.Unit.Infrastructure.OptionMapFixture.Manage_options()", file="CopyrightInfo.cs", label="omBuilder.AppendOption('D', null)", span="95-95"];
m10_31 [cluster="CommandLine.Tests.Unit.Infrastructure.OptionMapFixture.Manage_options()", file="CopyrightInfo.cs", label="var optionMap = omBuilder.OptionMap", span="97-97"];
m10_32 [cluster="CommandLine.Tests.Unit.Infrastructure.OptionMapFixture.Manage_options()", file="CopyrightInfo.cs", label="omBuilder.Options[0].Should().BeSameAs(optionMap[omBuilder.Names[0]])", span="99-99"];
m10_33 [cluster="CommandLine.Tests.Unit.Infrastructure.OptionMapFixture.Manage_options()", file="CopyrightInfo.cs", label="omBuilder.Options[1].Should().BeSameAs(optionMap[omBuilder.Names[1]])", span="100-100"];
m10_34 [cluster="CommandLine.Tests.Unit.Infrastructure.OptionMapFixture.Manage_options()", file="CopyrightInfo.cs", label="omBuilder.Options[2].Should().BeSameAs(optionMap[omBuilder.Names[2]])", span="101-101"];
m10_35 [cluster="CommandLine.Tests.Unit.Infrastructure.OptionMapFixture.Manage_options()", file="CopyrightInfo.cs", label="Exit CommandLine.Tests.Unit.Infrastructure.OptionMapFixture.Manage_options()", span="90-90"];
m10_5 [cluster="CommandLine.Infrastructure.OptionMap.OptionMap(int, CommandLine.ParserSettings)", file="CopyrightInfo.cs", label="Entry CommandLine.Infrastructure.OptionMap.OptionMap(int, CommandLine.ParserSettings)", span="47-47"];
m10_36 [cluster="Unk.Should", file="CopyrightInfo.cs", label="Entry Unk.Should", span=""];
m10_15 [cluster="CommandLine.OptionAttribute.OptionAttribute(string)", file="CopyrightInfo.cs", label="Entry CommandLine.OptionAttribute.OptionAttribute(string)", span="58-58"];
m10_56 [file="CopyrightInfo.cs", label="CommandLine.Tests.Unit.Infrastructure.OptionMapFixture.OptionMapBuilder", span=""];
m11_103 [cluster="NameInfo.cstr", file="HeadingInfo.cs", label="Entry NameInfo.cstr", span=""];
m11_4 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", file="HeadingInfo.cs", label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", span="24-24"];
m11_9 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", file="HeadingInfo.cs", label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", span="24-24"];
m11_53 [cluster="CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", file="HeadingInfo.cs", label="Entry CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", span="149-149"];
m11_6 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", file="HeadingInfo.cs", label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceRange()", span="71-71"];
m11_75 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", file="HeadingInfo.cs", label="return specProps =>\r\n                {\r\n                    var options = specProps.Where(\r\n                        sp => sp.Specification.TargetType == TargetType.Sequence\r\n                        && sp.Value.IsJust()\r\n                        && (\r\n                            (sp.Specification.Min.IsJust() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min.FromJust())\r\n                            || (sp.Specification.Max.IsJust() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max.FromJust())\r\n                        )\r\n                    );\r\n                    if (options.Any())\r\n                    {\r\n                        return options.Select(s => new SequenceOutOfRangeError(\r\n                            NameInfo.FromSpecification(s.Specification)));\r\n                    }\r\n                    return Enumerable.Empty<Error>();\r\n                };", span="73-89"];
m11_76 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", file="HeadingInfo.cs", label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceRange()", span="71-71"];
m11_73 [cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="HeadingInfo.cs", label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="283-283"];
m11_107 [cluster="CommandLine.Core.Token.IsName()", file="HeadingInfo.cs", label="Entry CommandLine.Core.Token.IsName()", span="68-68"];
m11_49 [cluster="Unk.Any", file="HeadingInfo.cs", label="Entry Unk.Any", span=""];
m11_68 [cluster="CommandLine.Core.Specification.IsValue()", file="HeadingInfo.cs", label="Entry CommandLine.Core.Specification.IsValue()", span="15-15"];
m11_17 [cluster="Unk.Where", file="HeadingInfo.cs", label="Entry Unk.Where", span=""];
m11_21 [cluster="System.Linq.Enumerable.Empty<TResult>()", file="HeadingInfo.cs", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
m11_63 [cluster="Unk.IsNothing", file="HeadingInfo.cs", label="Entry Unk.IsNothing", span=""];
m11_74 [cluster="Unk.FromSpecification", file="HeadingInfo.cs", label="Entry Unk.FromSpecification", span=""];
m11_86 [cluster="CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", file="HeadingInfo.cs", label="Entry CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", span="134-134"];
m11_102 [cluster="RepeatedOptionError.cstr", file="HeadingInfo.cs", label="Entry RepeatedOptionError.cstr", span=""];
m11_7 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="HeadingInfo.cs", label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="92-92"];
m11_91 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="HeadingInfo.cs", label="return specProps =>\r\n                {\r\n                    var specs = from sp in specProps\r\n                                where sp.Specification.IsOption() && sp.Value.IsJust()\r\n                                select (OptionSpecification)sp.Specification;\r\n                    var options = from t in tokens.Where(t => t.IsName())\r\n                                  join o in specs on t.Text equals o.UniqueName() into to\r\n                                  from o in to.DefaultIfEmpty()\r\n                                  where o != null\r\n                                  select new { o.ShortName, o.LongName };\r\n                    var groups = from x in options\r\n                                 group x by x into g\r\n                                 let count = g.Count()\r\n                                 select new { Value = g.Key, Count = count };\r\n                    var errors = from y in groups\r\n                                 where y.Count > 1\r\n                                 select new RepeatedOptionError(new NameInfo(y.Value.ShortName, y.Value.LongName));\r\n                    return errors;\r\n                };", span="94-112"];
m11_92 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="HeadingInfo.cs", label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="92-92"];
m11_69 [cluster="CommandLine.Infrastructure.Maybe<T>.IsNothing<T>()", file="HeadingInfo.cs", label="Entry CommandLine.Infrastructure.Maybe<T>.IsNothing<T>()", span="144-144"];
m11_64 [cluster="Unk.Contains", file="HeadingInfo.cs", label="Entry Unk.Contains", span=""];
m11_90 [cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="HeadingInfo.cs", label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="316-316"];
m11_0 [cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="HeadingInfo.cs", label="Entry CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="12-12"];
m11_1 [cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="HeadingInfo.cs", label="return new List<Func<IEnumerable<SpecificationProperty>, IEnumerable<Error>>>\r\n                {\r\n                    EnforceMutuallyExclusiveSet(),\r\n                    EnforceRequired(),\r\n                    EnforceRange(),\r\n                    EnforceSingle(tokens)\r\n                };", span="15-21"];
m11_2 [cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="HeadingInfo.cs", label="Exit CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="12-12"];
m11_104 [cluster="lambda expression", file="HeadingInfo.cs", label="Entry lambda expression", span="99-99"];
m11_11 [cluster="lambda expression", file="HeadingInfo.cs", label="var options = specProps\r\n                            .Where(sp => sp.Specification.IsOption())\r\n                            .Where(sp => ((OptionSpecification)sp.Specification).SetName.Length > 0\r\n                                   && sp.Value.IsJust())", span="28-31"];
m11_10 [cluster="lambda expression", file="HeadingInfo.cs", label="Entry lambda expression", span="26-40"];
m11_12 [cluster="lambda expression", file="HeadingInfo.cs", label="var groups = options.GroupBy(g => ((OptionSpecification)g.Specification).SetName)", span="32-32"];
m11_22 [cluster="lambda expression", file="HeadingInfo.cs", label="Entry lambda expression", span="29-29"];
m11_26 [cluster="lambda expression", file="HeadingInfo.cs", label="Entry lambda expression", span="30-31"];
m11_14 [cluster="lambda expression", file="HeadingInfo.cs", label="return options.Select(s =>\r\n                            new MutuallyExclusiveSetError(\r\n                                NameInfo.FromOptionSpecification((OptionSpecification)s.Specification)));", span="35-37"];
m11_30 [cluster="lambda expression", file="HeadingInfo.cs", label="Entry lambda expression", span="32-32"];
m11_15 [cluster="lambda expression", file="HeadingInfo.cs", label="return Enumerable.Empty<Error>();", span="39-39"];
m11_16 [cluster="lambda expression", file="HeadingInfo.cs", label="Exit lambda expression", span="26-40"];
m11_33 [cluster="lambda expression", file="HeadingInfo.cs", label="Entry lambda expression", span="35-37"];
m11_23 [cluster="lambda expression", file="HeadingInfo.cs", label="sp.Specification.IsOption()", span="29-29"];
m11_24 [cluster="lambda expression", file="HeadingInfo.cs", label="Exit lambda expression", span="29-29"];
m11_27 [cluster="lambda expression", file="HeadingInfo.cs", label="((OptionSpecification)sp.Specification).SetName.Length > 0\r\n                                   && sp.Value.IsJust()", span="30-31"];
m11_28 [cluster="lambda expression", file="HeadingInfo.cs", label="Exit lambda expression", span="30-31"];
m11_31 [cluster="lambda expression", file="HeadingInfo.cs", label="((OptionSpecification)g.Specification).SetName", span="32-32"];
m11_32 [cluster="lambda expression", file="HeadingInfo.cs", label="Exit lambda expression", span="32-32"];
m11_34 [cluster="lambda expression", file="HeadingInfo.cs", label="new MutuallyExclusiveSetError(\r\n                                NameInfo.FromOptionSpecification((OptionSpecification)s.Specification))", span="36-37"];
m11_35 [cluster="lambda expression", file="HeadingInfo.cs", label="Exit lambda expression", span="35-37"];
m11_41 [cluster="lambda expression", file="HeadingInfo.cs", label="var setsWithTrue =\r\n                    specProps\r\n                        .Where(sp => sp.Specification.IsOption()\r\n                            && sp.Value.IsJust() && sp.Specification.Required)\r\n                        .Select(s => ((OptionSpecification)s.Specification).SetName).ToList()", span="47-51"];
m11_42 [cluster="lambda expression", file="HeadingInfo.cs", label="var requiredButEmpty =\r\n                    specProps\r\n                        .Where(sp => sp.Specification.IsOption())\r\n                        .Where(sp => sp.Value.IsNothing()\r\n                            && sp.Specification.Required\r\n                            && !setsWithTrue.Contains(((OptionSpecification)sp.Specification).SetName))\r\n                    .Concat(specProps\r\n                        .Where(sp => sp.Specification.IsValue()\r\n                            && sp.Value.IsNothing()\r\n                            && sp.Specification.Required)).ToList()", span="53-62"];
m11_40 [cluster="lambda expression", file="HeadingInfo.cs", label="Entry lambda expression", span="45-68"];
m11_50 [cluster="lambda expression", file="HeadingInfo.cs", label="Entry lambda expression", span="49-50"];
m11_54 [cluster="lambda expression", file="HeadingInfo.cs", label="Entry lambda expression", span="51-51"];
m11_61 [cluster="lambda expression", file="HeadingInfo.cs", label="sp.Value.IsNothing()\r\n                            && sp.Specification.Required\r\n                            && !setsWithTrue.Contains(((OptionSpecification)sp.Specification).SetName)", span="56-58"];
m11_43 [cluster="lambda expression", file="HeadingInfo.cs", label="requiredButEmpty.Any()", span="63-63"];
m11_57 [cluster="lambda expression", file="HeadingInfo.cs", label="Entry lambda expression", span="55-55"];
m11_60 [cluster="lambda expression", file="HeadingInfo.cs", label="Entry lambda expression", span="56-58"];
m11_65 [cluster="lambda expression", file="HeadingInfo.cs", label="Entry lambda expression", span="60-62"];
m11_44 [cluster="lambda expression", file="HeadingInfo.cs", label="return requiredButEmpty.Select(s =>new MissingRequiredOptionError(\r\n                            NameInfo.FromSpecification(s.Specification)));", span="64-65"];
m11_45 [cluster="lambda expression", file="HeadingInfo.cs", label="return Enumerable.Empty<Error>();", span="67-67"];
m11_46 [cluster="lambda expression", file="HeadingInfo.cs", label="Exit lambda expression", span="45-68"];
m11_70 [cluster="lambda expression", file="HeadingInfo.cs", label="Entry lambda expression", span="64-65"];
m11_51 [cluster="lambda expression", file="HeadingInfo.cs", label="sp.Specification.IsOption()\r\n                            && sp.Value.IsJust() && sp.Specification.Required", span="49-50"];
m11_52 [cluster="lambda expression", file="HeadingInfo.cs", label="Exit lambda expression", span="49-50"];
m11_55 [cluster="lambda expression", file="HeadingInfo.cs", label="((OptionSpecification)s.Specification).SetName", span="51-51"];
m11_56 [cluster="lambda expression", file="HeadingInfo.cs", label="Exit lambda expression", span="51-51"];
m11_58 [cluster="lambda expression", file="HeadingInfo.cs", label="sp.Specification.IsOption()", span="55-55"];
m11_59 [cluster="lambda expression", file="HeadingInfo.cs", label="Exit lambda expression", span="55-55"];
m11_62 [cluster="lambda expression", file="HeadingInfo.cs", label="Exit lambda expression", span="56-58"];
m11_66 [cluster="lambda expression", file="HeadingInfo.cs", label="sp.Specification.IsValue()\r\n                            && sp.Value.IsNothing()\r\n                            && sp.Specification.Required", span="60-62"];
m11_67 [cluster="lambda expression", file="HeadingInfo.cs", label="Exit lambda expression", span="60-62"];
m11_71 [cluster="lambda expression", file="HeadingInfo.cs", label="new MissingRequiredOptionError(\r\n                            NameInfo.FromSpecification(s.Specification))", span="64-65"];
m11_72 [cluster="lambda expression", file="HeadingInfo.cs", label="Exit lambda expression", span="64-65"];
m11_78 [cluster="lambda expression", file="HeadingInfo.cs", label="var options = specProps.Where(\r\n                        sp => sp.Specification.TargetType == TargetType.Sequence\r\n                        && sp.Value.IsJust()\r\n                        && (\r\n                            (sp.Specification.Min.IsJust() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min.FromJust())\r\n                            || (sp.Specification.Max.IsJust() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max.FromJust())\r\n                        )\r\n                    )", span="75-82"];
m11_77 [cluster="lambda expression", file="HeadingInfo.cs", label="Entry lambda expression", span="73-89"];
m11_79 [cluster="lambda expression", file="HeadingInfo.cs", label="options.Any()", span="83-83"];
m11_83 [cluster="lambda expression", file="HeadingInfo.cs", label="Entry lambda expression", span="76-81"];
m11_80 [cluster="lambda expression", file="HeadingInfo.cs", label="return options.Select(s => new SequenceOutOfRangeError(\r\n                            NameInfo.FromSpecification(s.Specification)));", span="85-86"];
m11_81 [cluster="lambda expression", file="HeadingInfo.cs", label="return Enumerable.Empty<Error>();", span="88-88"];
m11_82 [cluster="lambda expression", file="HeadingInfo.cs", label="Exit lambda expression", span="73-89"];
m11_87 [cluster="lambda expression", file="HeadingInfo.cs", label="Entry lambda expression", span="85-86"];
m11_84 [cluster="lambda expression", file="HeadingInfo.cs", label="sp.Specification.TargetType == TargetType.Sequence\r\n                        && sp.Value.IsJust()\r\n                        && (\r\n                            (sp.Specification.Min.IsJust() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min.FromJust())\r\n                            || (sp.Specification.Max.IsJust() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max.FromJust())\r\n                        )", span="76-81"];
m11_85 [cluster="lambda expression", file="HeadingInfo.cs", label="Exit lambda expression", span="76-81"];
m11_88 [cluster="lambda expression", file="HeadingInfo.cs", label="new SequenceOutOfRangeError(\r\n                            NameInfo.FromSpecification(s.Specification))", span="85-86"];
m11_89 [cluster="lambda expression", file="HeadingInfo.cs", label="Exit lambda expression", span="85-86"];
m11_95 [cluster="lambda expression", file="HeadingInfo.cs", label="var options = from t in tokens.Where(t => t.IsName())\r\n                                  join o in specs on t.Text equals o.UniqueName() into to\r\n                                  from o in to.DefaultIfEmpty()\r\n                                  where o != null\r\n                                  select new { o.ShortName, o.LongName }", span="99-103"];
m11_94 [cluster="lambda expression", file="HeadingInfo.cs", label="var specs = from sp in specProps\r\n                                where sp.Specification.IsOption() && sp.Value.IsJust()\r\n                                select (OptionSpecification)sp.Specification", span="96-98"];
m11_93 [cluster="lambda expression", file="HeadingInfo.cs", label="Entry lambda expression", span="94-112"];
m11_96 [cluster="lambda expression", file="HeadingInfo.cs", label="var groups = from x in options\r\n                                 group x by x into g\r\n                                 let count = g.Count()\r\n                                 select new { Value = g.Key, Count = count }", span="104-107"];
m11_97 [cluster="lambda expression", file="HeadingInfo.cs", label="var errors = from y in groups\r\n                                 where y.Count > 1\r\n                                 select new RepeatedOptionError(new NameInfo(y.Value.ShortName, y.Value.LongName))", span="108-110"];
m11_98 [cluster="lambda expression", file="HeadingInfo.cs", label="return errors;", span="111-111"];
m11_99 [cluster="lambda expression", file="HeadingInfo.cs", label="Exit lambda expression", span="94-112"];
m11_105 [cluster="lambda expression", file="HeadingInfo.cs", label="t.IsName()", span="99-99"];
m11_106 [cluster="lambda expression", file="HeadingInfo.cs", label="Exit lambda expression", span="99-99"];
m11_48 [cluster="Unk.Concat", file="HeadingInfo.cs", label="Entry Unk.Concat", span=""];
m11_5 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", file="HeadingInfo.cs", label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", span="43-43"];
m11_38 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", file="HeadingInfo.cs", label="return specProps =>\r\n            {\r\n                var setsWithTrue =\r\n                    specProps\r\n                        .Where(sp => sp.Specification.IsOption()\r\n                            && sp.Value.IsJust() && sp.Specification.Required)\r\n                        .Select(s => ((OptionSpecification)s.Specification).SetName).ToList();\r\n                \r\n                var requiredButEmpty =\r\n                    specProps\r\n                        .Where(sp => sp.Specification.IsOption())\r\n                        .Where(sp => sp.Value.IsNothing()\r\n                            && sp.Specification.Required\r\n                            && !setsWithTrue.Contains(((OptionSpecification)sp.Specification).SetName))\r\n                    .Concat(specProps\r\n                        .Where(sp => sp.Specification.IsValue()\r\n                            && sp.Value.IsNothing()\r\n                            && sp.Specification.Required)).ToList();\r\n                    if (requiredButEmpty.Any()) {\r\n                        return requiredButEmpty.Select(s =>new MissingRequiredOptionError(\r\n                            NameInfo.FromSpecification(s.Specification)));\r\n                    }\r\n                    return Enumerable.Empty<Error>();\r\n                };", span="45-68"];
m11_39 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", file="HeadingInfo.cs", label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", span="43-43"];
m11_20 [cluster="Unk.Select", file="HeadingInfo.cs", label="Entry Unk.Select", span=""];
m11_29 [cluster="Unk.IsJust", file="HeadingInfo.cs", label="Entry Unk.IsJust", span=""];
m11_100 [cluster="Unk.UniqueName", file="HeadingInfo.cs", label="Entry Unk.UniqueName", span=""];
m11_47 [cluster="Unk.ToList", file="HeadingInfo.cs", label="Entry Unk.ToList", span=""];
m11_36 [cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", file="HeadingInfo.cs", label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="294-294"];
m11_101 [cluster="Unk.DefaultIfEmpty", file="HeadingInfo.cs", label="Entry Unk.DefaultIfEmpty", span=""];
m11_25 [cluster="CommandLine.Core.Specification.IsOption()", file="HeadingInfo.cs", label="Entry CommandLine.Core.Specification.IsOption()", span="10-10"];
m11_3 [cluster="System.Collections.Generic.List<T>.List()", file="HeadingInfo.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m11_37 [cluster="CommandLine.NameInfo.FromOptionSpecification(CommandLine.Core.OptionSpecification)", file="HeadingInfo.cs", label="Entry CommandLine.NameInfo.FromOptionSpecification(CommandLine.Core.OptionSpecification)", span="60-60"];
m11_18 [cluster="Unk.GroupBy", file="HeadingInfo.cs", label="Entry Unk.GroupBy", span=""];
m11_19 [cluster="Unk.Count", file="HeadingInfo.cs", label="Entry Unk.Count", span=""];
m11_108 [file="HeadingInfo.cs", label=setsWithTrue, span=""];
m11_109 [file="HeadingInfo.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", span=""];
m14_16 [cluster="CommandLine.Helpers.Assumes.NotZeroLength<T>(T[], string)", file="HelpTextFixture.cs", label="Entry CommandLine.Helpers.Assumes.NotZeroLength<T>(T[], string)", span="57-57"];
m14_17 [cluster="CommandLine.Helpers.Assumes.NotZeroLength<T>(T[], string)", file="HelpTextFixture.cs", label="array.Length == 0", span="59-59"];
m14_18 [cluster="CommandLine.Helpers.Assumes.NotZeroLength<T>(T[], string)", file="HelpTextFixture.cs", label="throw new ArgumentOutOfRangeException(paramName);", span="61-61"];
m14_19 [cluster="CommandLine.Helpers.Assumes.NotZeroLength<T>(T[], string)", file="HelpTextFixture.cs", label="Exit CommandLine.Helpers.Assumes.NotZeroLength<T>(T[], string)", span="57-57"];
m14_0 [cluster="CommandLine.Helpers.Assumes.NotNull<T>(T, string)", file="HelpTextFixture.cs", label="Entry CommandLine.Helpers.Assumes.NotNull<T>(T, string)", span="31-31"];
m14_1 [cluster="CommandLine.Helpers.Assumes.NotNull<T>(T, string)", file="HelpTextFixture.cs", label="value == null", span="34-34"];
m14_2 [cluster="CommandLine.Helpers.Assumes.NotNull<T>(T, string)", file="HelpTextFixture.cs", label="throw new ArgumentNullException(paramName);", span="36-36"];
m14_3 [cluster="CommandLine.Helpers.Assumes.NotNull<T>(T, string)", file="HelpTextFixture.cs", label="Exit CommandLine.Helpers.Assumes.NotNull<T>(T, string)", span="31-31"];
m14_10 [cluster="CommandLine.Helpers.Assumes.NotNullOrEmpty(string, string)", file="HelpTextFixture.cs", label="Entry CommandLine.Helpers.Assumes.NotNullOrEmpty(string, string)", span="49-49"];
m14_11 [cluster="CommandLine.Helpers.Assumes.NotNullOrEmpty(string, string)", file="HelpTextFixture.cs", label="string.IsNullOrEmpty(value)", span="51-51"];
m14_12 [cluster="CommandLine.Helpers.Assumes.NotNullOrEmpty(string, string)", file="HelpTextFixture.cs", label="throw new ArgumentException(paramName);", span="53-53"];
m14_13 [cluster="CommandLine.Helpers.Assumes.NotNullOrEmpty(string, string)", file="HelpTextFixture.cs", label="Exit CommandLine.Helpers.Assumes.NotNullOrEmpty(string, string)", span="49-49"];
m14_5 [cluster="CommandLine.Helpers.Assumes.NotNull<T>(T, string, string)", file="HelpTextFixture.cs", label="Entry CommandLine.Helpers.Assumes.NotNull<T>(T, string, string)", span="40-40"];
m14_6 [cluster="CommandLine.Helpers.Assumes.NotNull<T>(T, string, string)", file="HelpTextFixture.cs", label="value == null", span="43-43"];
m14_7 [cluster="CommandLine.Helpers.Assumes.NotNull<T>(T, string, string)", file="HelpTextFixture.cs", label="throw new ArgumentNullException(paramName, message);", span="45-45"];
m14_8 [cluster="CommandLine.Helpers.Assumes.NotNull<T>(T, string, string)", file="HelpTextFixture.cs", label="Exit CommandLine.Helpers.Assumes.NotNull<T>(T, string, string)", span="40-40"];
m14_14 [cluster="string.IsNullOrEmpty(string)", file="HelpTextFixture.cs", label="Entry string.IsNullOrEmpty(string)", span="0-0"];
m14_4 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="HelpTextFixture.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m14_20 [cluster="System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string)", file="HelpTextFixture.cs", label="Entry System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string)", span="0-0"];
m14_15 [cluster="System.ArgumentException.ArgumentException(string)", file="HelpTextFixture.cs", label="Entry System.ArgumentException.ArgumentException(string)", span="0-0"];
m14_9 [cluster="System.ArgumentNullException.ArgumentNullException(string, string)", file="HelpTextFixture.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string, string)", span="0-0"];
m16_22 [cluster="System.Collections.Generic.IEnumerable<TSource>.IndexOf<TSource>(System.Func<TSource, bool>)", file="IArgumentEnumerator.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.IndexOf<TSource>(System.Func<TSource, bool>)", span="10-10"];
m16_24 [cluster="System.Collections.Generic.IEnumerable<TSource>.TakeWhile<TSource>(System.Func<TSource, bool>)", file="IArgumentEnumerator.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.TakeWhile<TSource>(System.Func<TSource, bool>)", span="0-0"];
m16_0 [cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="IArgumentEnumerator.cs", label="Entry CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12"];
m16_1 [cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="IArgumentEnumerator.cs", label="return from tseq in tokens.Pairwise(\r\n                (f, s) =>\r\n                        f.IsName() && s.IsValue()\r\n                            ? typeLookup(f.Text).MapMaybe(info =>\r\n                                   info.TargetType == TargetType.Sequence\r\n                                        ? new[] { f }.Concat(tokens.OfSequence(f, info))\r\n                                        : new Token[] { }, new Token[] { })\r\n                            : new Token[] { })\r\n                   from t in tseq\r\n                   select t;", span="16-25"];
m16_2 [cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", file="IArgumentEnumerator.cs", label="Exit CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12"];
m16_35 [cluster="Unk.Take", file="IArgumentEnumerator.cs", label="Entry Unk.Take", span=""];
m16_15 [cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="IArgumentEnumerator.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0"];
m16_28 [cluster="object.Equals(object)", file="IArgumentEnumerator.cs", label="Entry object.Equals(object)", span="0-0"];
m16_36 [cluster="lambda expression", file="IArgumentEnumerator.cs", label="Entry lambda expression", span="36-36"];
m16_5 [cluster="lambda expression", file="IArgumentEnumerator.cs", label="f.IsName() && s.IsValue()\r\n                            ? typeLookup(f.Text).MapMaybe(info =>\r\n                                   info.TargetType == TargetType.Sequence\r\n                                        ? new[] { f }.Concat(tokens.OfSequence(f, info))\r\n                                        : new Token[] { }, new Token[] { })\r\n                            : new Token[] { }", span="18-23"];
m16_12 [cluster="lambda expression", file="IArgumentEnumerator.cs", label="info.TargetType == TargetType.Sequence\r\n                                        ? new[] { f }.Concat(tokens.OfSequence(f, info))\r\n                                        : new Token[] { }", span="20-22"];
m16_4 [cluster="lambda expression", file="IArgumentEnumerator.cs", label="Entry lambda expression", span="17-23"];
m16_6 [cluster="lambda expression", file="IArgumentEnumerator.cs", label="Exit lambda expression", span="17-23"];
m16_11 [cluster="lambda expression", file="IArgumentEnumerator.cs", label="Entry lambda expression", span="19-22"];
m16_13 [cluster="lambda expression", file="IArgumentEnumerator.cs", label="Exit lambda expression", span="19-22"];
m16_25 [cluster="lambda expression", file="IArgumentEnumerator.cs", label="Entry lambda expression", span="30-30"];
m16_29 [cluster="lambda expression", file="IArgumentEnumerator.cs", label="Entry lambda expression", span="34-36"];
m16_39 [cluster="lambda expression", file="IArgumentEnumerator.cs", label="Entry lambda expression", span="37-37"];
m16_27 [cluster="lambda expression", file="IArgumentEnumerator.cs", label="Exit lambda expression", span="30-30"];
m16_31 [cluster="lambda expression", file="IArgumentEnumerator.cs", label="Exit lambda expression", span="34-36"];
m16_32 [cluster="lambda expression", file="IArgumentEnumerator.cs", label="Entry lambda expression", span="35-35"];
m16_34 [cluster="lambda expression", file="IArgumentEnumerator.cs", label="Exit lambda expression", span="35-35"];
m16_38 [cluster="lambda expression", file="IArgumentEnumerator.cs", label="Exit lambda expression", span="36-36"];
m16_41 [cluster="lambda expression", file="IArgumentEnumerator.cs", label="Exit lambda expression", span="37-37"];
m16_10 [cluster="Unk.MapMaybe", file="IArgumentEnumerator.cs", label="Entry Unk.MapMaybe", span=""];
m16_23 [cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", file="IArgumentEnumerator.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0"];
m16_16 [cluster="CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token, CommandLine.Core.TypeDescriptor)", file="IArgumentEnumerator.cs", label="Entry CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token, CommandLine.Core.TypeDescriptor)", span="28-28"];
m16_20 [cluster="CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token, CommandLine.Core.TypeDescriptor)", file="IArgumentEnumerator.cs", label="return new Token[] { };", span="39-39"];
m16_21 [cluster="CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token, CommandLine.Core.TypeDescriptor)", file="IArgumentEnumerator.cs", label="Exit CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token, CommandLine.Core.TypeDescriptor)", span="28-28"];
m16_7 [cluster="CommandLine.Core.Token.IsName()", file="IArgumentEnumerator.cs", label="Entry CommandLine.Core.Token.IsName()", span="128-128"];
m16_14 [cluster="Unk.OfSequence", file="IArgumentEnumerator.cs", label="Entry Unk.OfSequence", span=""];
m16_8 [cluster="CommandLine.Core.Token.IsValue()", file="IArgumentEnumerator.cs", label="Entry CommandLine.Core.Token.IsValue()", span="133-133"];
m16_9 [cluster="System.Func<T, TResult>.Invoke(T)", file="IArgumentEnumerator.cs", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
m16_3 [cluster="Unk.Pairwise", file="IArgumentEnumerator.cs", label="Entry Unk.Pairwise", span=""];
m16_42 [file="IArgumentEnumerator.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", span=""];
m16_43 [file="IArgumentEnumerator.cs", label="System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>", span=""];
m16_44 [file="IArgumentEnumerator.cs", label="CommandLine.Core.Token", span=""];
m16_45 [file="IArgumentEnumerator.cs", label="CommandLine.Core.Token", span=""];
m16_46 [file="IArgumentEnumerator.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", span=""];
m16_47 [file="IArgumentEnumerator.cs", label="CommandLine.Core.TypeDescriptor", span=""];
m16_48 [file="IArgumentEnumerator.cs", label=nameIndex, span=""];
m17_0 [cluster="CommandLine.ICommandLineParser.ParseArguments(string[], object)", file="ICommandLineParser.cs", label="Entry CommandLine.ICommandLineParser.ParseArguments(string[], object)", span="57-57"];
m17_1 [cluster="CommandLine.ICommandLineParser.ParseArguments(string[], object)", file="ICommandLineParser.cs", label="Exit CommandLine.ICommandLineParser.ParseArguments(string[], object)", span="57-57"];
m17_8 [cluster="CommandLine.ICommandLineParser.ParseArgumentsStrict(string[], object, System.IO.TextWriter)", file="ICommandLineParser.cs", label="Entry CommandLine.ICommandLineParser.ParseArgumentsStrict(string[], object, System.IO.TextWriter)", span="115-115"];
m17_9 [cluster="CommandLine.ICommandLineParser.ParseArgumentsStrict(string[], object, System.IO.TextWriter)", file="ICommandLineParser.cs", label="Exit CommandLine.ICommandLineParser.ParseArgumentsStrict(string[], object, System.IO.TextWriter)", span="115-115"];
m17_6 [cluster="CommandLine.ICommandLineParser.ParseArgumentsStrict(string[], object, int)", file="ICommandLineParser.cs", label="Entry CommandLine.ICommandLineParser.ParseArgumentsStrict(string[], object, int)", span="99-99"];
m17_7 [cluster="CommandLine.ICommandLineParser.ParseArgumentsStrict(string[], object, int)", file="ICommandLineParser.cs", label="Exit CommandLine.ICommandLineParser.ParseArgumentsStrict(string[], object, int)", span="99-99"];
m17_4 [cluster="CommandLine.ICommandLineParser.ParseArgumentsStrict(string[], object)", file="ICommandLineParser.cs", label="Entry CommandLine.ICommandLineParser.ParseArgumentsStrict(string[], object)", span="85-85"];
m17_5 [cluster="CommandLine.ICommandLineParser.ParseArgumentsStrict(string[], object)", file="ICommandLineParser.cs", label="Exit CommandLine.ICommandLineParser.ParseArgumentsStrict(string[], object)", span="85-85"];
m17_2 [cluster="CommandLine.ICommandLineParser.ParseArguments(string[], object, System.IO.TextWriter)", file="ICommandLineParser.cs", label="Entry CommandLine.ICommandLineParser.ParseArguments(string[], object, System.IO.TextWriter)", span="72-72"];
m17_3 [cluster="CommandLine.ICommandLineParser.ParseArguments(string[], object, System.IO.TextWriter)", file="ICommandLineParser.cs", label="Exit CommandLine.ICommandLineParser.ParseArguments(string[], object, System.IO.TextWriter)", span="72-72"];
m17_12 [cluster="CommandLine.ICommandLineParser.WasVerbOptionInvoked(string)", file="ICommandLineParser.cs", label="Entry CommandLine.ICommandLineParser.WasVerbOptionInvoked(string)", span="142-142"];
m17_13 [cluster="CommandLine.ICommandLineParser.WasVerbOptionInvoked(string)", file="ICommandLineParser.cs", label="Exit CommandLine.ICommandLineParser.WasVerbOptionInvoked(string)", span="142-142"];
m17_10 [cluster="CommandLine.ICommandLineParser.ParseArguments(string[], object, System.IO.TextWriter, int)", file="ICommandLineParser.cs", label="Entry CommandLine.ICommandLineParser.ParseArguments(string[], object, System.IO.TextWriter, int)", span="132-132"];
m17_11 [cluster="CommandLine.ICommandLineParser.ParseArguments(string[], object, System.IO.TextWriter, int)", file="ICommandLineParser.cs", label="Exit CommandLine.ICommandLineParser.ParseArguments(string[], object, System.IO.TextWriter, int)", span="132-132"];
m19_62 [cluster="System.Text.StringBuilder.AppendIf(bool, string, string)", file="LongOptionParser.cs", label="Entry System.Text.StringBuilder.AppendIf(bool, string, string)", span="42-42"];
m19_61 [cluster="string.Substring(int, int)", file="LongOptionParser.cs", label="Entry string.Substring(int, int)", span="0-0"];
m19_63 [cluster="System.Text.StringBuilder.Append(char)", file="LongOptionParser.cs", label="Entry System.Text.StringBuilder.Append(char)", span="0-0"];
m19_0 [cluster="CommandLine.Text.SentenceBuilder.CreateDefault()", file="LongOptionParser.cs", label="Entry CommandLine.Text.SentenceBuilder.CreateDefault()", span="22-22"];
m19_1 [cluster="CommandLine.Text.SentenceBuilder.CreateDefault()", file="LongOptionParser.cs", label="return new DefaultSentenceBuilder();", span="24-24"];
m19_2 [cluster="CommandLine.Text.SentenceBuilder.CreateDefault()", file="LongOptionParser.cs", label="Exit CommandLine.Text.SentenceBuilder.CreateDefault()", span="22-22"];
m19_47 [cluster="Unk.Select", file="LongOptionParser.cs", label="Entry Unk.Select", span=""];
m19_49 [cluster="Unk.Join", file="LongOptionParser.cs", label="Entry Unk.Join", span=""];
m19_58 [cluster="System.Text.StringBuilder.StringBuilder(string)", file="LongOptionParser.cs", label="Entry System.Text.StringBuilder.StringBuilder(string)", span="0-0"];
m19_39 [cluster="string.JoinTo(params string[])", file="LongOptionParser.cs", label="Entry string.JoinTo(params string[])", span="45-45"];
m19_50 [cluster="lambda expression", file="LongOptionParser.cs", label="Entry lambda expression", span="147-168"];
m19_4 [cluster="lambda expression", file="LongOptionParser.cs", label="Entry lambda expression", span="63-63"];
m19_5 [cluster="lambda expression", file="LongOptionParser.cs", label="''Required.''", span="63-63"];
m19_6 [cluster="lambda expression", file="LongOptionParser.cs", label="Exit lambda expression", span="63-63"];
m19_7 [cluster="lambda expression", file="LongOptionParser.cs", label="Entry lambda expression", span="71-71"];
m19_8 [cluster="lambda expression", file="LongOptionParser.cs", label="''ERROR(S):''", span="71-71"];
m19_9 [cluster="lambda expression", file="LongOptionParser.cs", label="Exit lambda expression", span="71-71"];
m19_10 [cluster="lambda expression", file="LongOptionParser.cs", label="Entry lambda expression", span="79-81"];
m19_11 [cluster="lambda expression", file="LongOptionParser.cs", label="isOption\r\n                        ? ''Display this help screen.''\r\n                        : ''Display more information on a specific command.''", span="79-81"];
m19_12 [cluster="lambda expression", file="LongOptionParser.cs", label="Exit lambda expression", span="79-81"];
m19_13 [cluster="lambda expression", file="LongOptionParser.cs", label="Entry lambda expression", span="89-89"];
m19_14 [cluster="lambda expression", file="LongOptionParser.cs", label="''Display version information.''", span="89-89"];
m19_15 [cluster="lambda expression", file="LongOptionParser.cs", label="Exit lambda expression", span="89-89"];
m19_16 [cluster="lambda expression", file="LongOptionParser.cs", label="Entry lambda expression", span="97-132"];
m19_17 [cluster="lambda expression", file="LongOptionParser.cs", label="error.Tag", span="99-99"];
m19_19 [cluster="lambda expression", file="LongOptionParser.cs", label="return ''Token '''.JoinTo(((BadFormatTokenError)error).Token, ''' is not recognized.'');", span="102-102"];
m19_21 [cluster="lambda expression", file="LongOptionParser.cs", label="return ''Option '''.JoinTo(((MissingValueOptionError)error).NameInfo.NameText,\r\n                                        ''' has no value.'');", span="104-105"];
m19_23 [cluster="lambda expression", file="LongOptionParser.cs", label="return ''Option '''.JoinTo(((UnknownOptionError)error).Token, ''' is unknown.'');", span="107-107"];
m19_25 [cluster="lambda expression", file="LongOptionParser.cs", label="var errMisssing = ((MissingRequiredOptionError)error)", span="109-109"];
m19_28 [cluster="lambda expression", file="LongOptionParser.cs", label="var badFormat = ((BadFormatConversionError)error)", span="116-116"];
m19_31 [cluster="lambda expression", file="LongOptionParser.cs", label="var seqOutRange = ((SequenceOutOfRangeError)error)", span="121-121"];
m19_34 [cluster="lambda expression", file="LongOptionParser.cs", label="return ''Verb '''.JoinTo(((BadVerbSelectedError)error).Token, ''' is not recognized.'');", span="127-127"];
m19_18 [cluster="lambda expression", file="LongOptionParser.cs", label="ErrorType.BadFormatTokenError", span="101-101"];
m19_20 [cluster="lambda expression", file="LongOptionParser.cs", label="ErrorType.MissingValueOptionError", span="103-103"];
m19_22 [cluster="lambda expression", file="LongOptionParser.cs", label="ErrorType.UnknownOptionError", span="106-106"];
m19_24 [cluster="lambda expression", file="LongOptionParser.cs", label="ErrorType.MissingRequiredOptionError", span="108-108"];
m19_27 [cluster="lambda expression", file="LongOptionParser.cs", label="ErrorType.BadFormatConversionError", span="115-115"];
m19_30 [cluster="lambda expression", file="LongOptionParser.cs", label="ErrorType.SequenceOutOfRangeError", span="120-120"];
m19_33 [cluster="lambda expression", file="LongOptionParser.cs", label="ErrorType.BadVerbSelectedError", span="126-126"];
m19_35 [cluster="lambda expression", file="LongOptionParser.cs", label="ErrorType.NoVerbSelectedError", span="128-128"];
m19_26 [cluster="lambda expression", file="LongOptionParser.cs", label="return errMisssing.NameInfo == NameInfo.EmptyName\r\n                                               ? ''A required value not bound to option name is missing.''\r\n                                               : ''Required option '''.JoinTo(errMisssing.NameInfo.NameText, ''' is missing.'');", span="110-112"];
m19_32 [cluster="lambda expression", file="LongOptionParser.cs", label="return seqOutRange.NameInfo == NameInfo.EmptyName\r\n                                               ? ''A sequence value not bound to option name is defined with few items than required.''\r\n                                               : ''A sequence option '''.JoinTo(seqOutRange.NameInfo.NameText,\r\n                                                    ''' is defined with few items than required.'');", span="122-125"];
m19_36 [cluster="lambda expression", file="LongOptionParser.cs", label="return ''No verb selected.'';", span="129-129"];
m19_37 [cluster="lambda expression", file="LongOptionParser.cs", label="Exit lambda expression", span="97-132"];
m19_38 [cluster="lambda expression", file="LongOptionParser.cs", label="throw new InvalidOperationException();", span="131-131"];
m19_41 [cluster="lambda expression", file="LongOptionParser.cs", label="Entry lambda expression", span="140-170"];
m19_42 [cluster="lambda expression", file="LongOptionParser.cs", label="var bySet = from e in errors\r\n                                group e by e.SetName into g\r\n                                select new { SetName = g.Key, Errors = g.ToList() }", span="142-144"];
m19_43 [cluster="lambda expression", file="LongOptionParser.cs", label="var msgs = bySet.Select(\r\n                            set =>\r\n                            {\r\n                                var names = string.Join(\r\n                                    string.Empty,\r\n                                    (from e in set.Errors select ''''' + e.NameInfo.NameText + ''', '').ToArray());\r\n                                var namesCount = set.Errors.Count();\r\n\r\n                                var incompat = string.Join(\r\n                                    string.Empty,\r\n                                    (from e in set.Errors\r\n                                        where !e.SetName.Equals(set.SetName)\r\n                                        select ''''' + e.NameInfo.NameText + ''', '').ToArray());\r\n                                return\r\n                                    new StringBuilder(''Option'').AppendWhen(namesCount > 1, ''s'')\r\n                                        .Append('': '')\r\n                                        .Append(names.Substring(0, names.Length - 3))\r\n                                        .AppendIf(namesCount > 1, ''are'', ''is'')\r\n                                        .Append('' not compatible with: '')\r\n                                        .Append(incompat.Substring(0, incompat.Length - 3))\r\n                                        .Append('.')\r\n                                        .ToString();\r\n                            }).ToArray()", span="146-168"];
m19_44 [cluster="lambda expression", file="LongOptionParser.cs", label="return string.Join(Environment.NewLine, msgs);", span="169-169"];
m19_45 [cluster="lambda expression", file="LongOptionParser.cs", label="Exit lambda expression", span="140-170"];
m19_51 [cluster="lambda expression", file="LongOptionParser.cs", label="var names = string.Join(\r\n                                    string.Empty,\r\n                                    (from e in set.Errors select ''''' + e.NameInfo.NameText + ''', '').ToArray())", span="149-151"];
m19_52 [cluster="lambda expression", file="LongOptionParser.cs", label="var namesCount = set.Errors.Count()", span="152-152"];
m19_53 [cluster="lambda expression", file="LongOptionParser.cs", label="var incompat = string.Join(\r\n                                    string.Empty,\r\n                                    (from e in set.Errors\r\n                                        where !e.SetName.Equals(set.SetName)\r\n                                        select ''''' + e.NameInfo.NameText + ''', '').ToArray())", span="154-158"];
m19_54 [cluster="lambda expression", file="LongOptionParser.cs", label="return\r\n                                    new StringBuilder(''Option'').AppendWhen(namesCount > 1, ''s'')\r\n                                        .Append('': '')\r\n                                        .Append(names.Substring(0, names.Length - 3))\r\n                                        .AppendIf(namesCount > 1, ''are'', ''is'')\r\n                                        .Append('' not compatible with: '')\r\n                                        .Append(incompat.Substring(0, incompat.Length - 3))\r\n                                        .Append('.')\r\n                                        .ToString();", span="159-167"];
m19_55 [cluster="lambda expression", file="LongOptionParser.cs", label="Exit lambda expression", span="147-168"];
m19_57 [cluster="Unk.Equals", file="LongOptionParser.cs", label="Entry Unk.Equals", span=""];
m19_48 [cluster="Unk.ToArray", file="LongOptionParser.cs", label="Entry Unk.ToArray", span=""];
m19_59 [cluster="System.Text.StringBuilder.AppendWhen(bool, params string[])", file="LongOptionParser.cs", label="Entry System.Text.StringBuilder.AppendWhen(bool, params string[])", span="9-9"];
m19_56 [cluster="Unk.Count", file="LongOptionParser.cs", label="Entry Unk.Count", span=""];
m19_46 [cluster="System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", file="LongOptionParser.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", span="0-0"];
m19_60 [cluster="System.Text.StringBuilder.Append(string)", file="LongOptionParser.cs", label="Entry System.Text.StringBuilder.Append(string)", span="0-0"];
m19_64 [cluster="System.Text.StringBuilder.ToString()", file="LongOptionParser.cs", label="Entry System.Text.StringBuilder.ToString()", span="0-0"];
m19_3 [cluster="CommandLine.Text.SentenceBuilder.DefaultSentenceBuilder.DefaultSentenceBuilder()", file="LongOptionParser.cs", label="Entry CommandLine.Text.SentenceBuilder.DefaultSentenceBuilder.DefaultSentenceBuilder()", span="57-57"];
m19_40 [cluster="System.InvalidOperationException.InvalidOperationException()", file="LongOptionParser.cs", label="Entry System.InvalidOperationException.InvalidOperationException()", span="0-0"];
m20_18 [cluster="CommandLine.Parser.Parser(System.Action<CommandLine.ParserSettings>)", file="MultiLineTextAttribute.cs", label="Entry CommandLine.Parser.Parser(System.Action<CommandLine.ParserSettings>)", span="87-87"];
m20_80 [cluster="CommandLine.Parser.ParseArgumentsStrict(string[], object, System.Action<string, object>, System.Action)", file="MultiLineTextAttribute.cs", label="Entry CommandLine.Parser.ParseArgumentsStrict(string[], object, System.Action<string, object>, System.Action)", span="229-229"];
m20_15 [cluster="CommandLine.Tests.Fakes.SimpleOptions.SimpleOptions()", file="MultiLineTextAttribute.cs", label="Entry CommandLine.Tests.Fakes.SimpleOptions.SimpleOptions()", span="33-33"];
m20_112 [cluster="CommandLine.Tests.Fakes.OptionsWithVerbs.OptionsWithVerbs()", file="MultiLineTextAttribute.cs", label="Entry CommandLine.Tests.Fakes.OptionsWithVerbs.OptionsWithVerbs()", span="79-79"];
m20_60 [cluster="CommandLine.Tests.Unit.Parser.StrictFixture.Parse_strict_bad_input_fails_and_exits_with_verbs()", file="MultiLineTextAttribute.cs", label="Entry CommandLine.Tests.Unit.Parser.StrictFixture.Parse_strict_bad_input_fails_and_exits_with_verbs()", span="92-92"];
m20_70 [cluster="CommandLine.Tests.Unit.Parser.StrictFixture.Parse_strict_bad_input_fails_and_exits_with_verbs()", color=green, community=0, file="MultiLineTextAttribute.cs", label="Console.WriteLine(helpText)", prediction=3, span="113-113"];
m20_69 [cluster="CommandLine.Tests.Unit.Parser.StrictFixture.Parse_strict_bad_input_fails_and_exits_with_verbs()", file="MultiLineTextAttribute.cs", label="var helpText = testWriter.ToString()", span="112-112"];
m20_71 [cluster="CommandLine.Tests.Unit.Parser.StrictFixture.Parse_strict_bad_input_fails_and_exits_with_verbs()", file="MultiLineTextAttribute.cs", label="var lines = helpText.Split(new string[] { Environment.NewLine }, StringSplitOptions.RemoveEmptyEntries)", span="114-114"];
m20_64 [cluster="CommandLine.Tests.Unit.Parser.StrictFixture.Parse_strict_bad_input_fails_and_exits_with_verbs()", file="MultiLineTextAttribute.cs", label="var testWriter = new StringWriter()", span="98-98"];
m20_68 [cluster="CommandLine.Tests.Unit.Parser.StrictFixture.Parse_strict_bad_input_fails_and_exits_with_verbs()", file="MultiLineTextAttribute.cs", label="result.Should().BeFalse()", span="110-110"];
m20_72 [cluster="CommandLine.Tests.Unit.Parser.StrictFixture.Parse_strict_bad_input_fails_and_exits_with_verbs()", file="MultiLineTextAttribute.cs", label="lines.Should().HaveCount(n => n == 8)", span="116-116"];
m20_73 [cluster="CommandLine.Tests.Unit.Parser.StrictFixture.Parse_strict_bad_input_fails_and_exits_with_verbs()", file="MultiLineTextAttribute.cs", label="lines[5].Trim().Should().Be(''add       Add file contents to the index.'')", span="118-118"];
m20_74 [cluster="CommandLine.Tests.Unit.Parser.StrictFixture.Parse_strict_bad_input_fails_and_exits_with_verbs()", file="MultiLineTextAttribute.cs", label="lines[6].Trim().Should().Be(''commit    Record changes to the repository.'')", span="119-119"];
m20_75 [cluster="CommandLine.Tests.Unit.Parser.StrictFixture.Parse_strict_bad_input_fails_and_exits_with_verbs()", file="MultiLineTextAttribute.cs", label="lines[7].Trim().Should().Be(''clone     Clone a repository into a new directory.'')", span="120-120"];
m20_67 [cluster="CommandLine.Tests.Unit.Parser.StrictFixture.Parse_strict_bad_input_fails_and_exits_with_verbs()", file="MultiLineTextAttribute.cs", label="var result = parser.ParseArgumentsStrict(new string[] { ''bad'', ''input'' }, options,\r\n                (verb, subOptions) =>\r\n                {\r\n                    invokedVerb = verb;\r\n                    invokedVerbInstance = subOptions;\r\n                },\r\n                () => Console.WriteLine(''fake fail''))", span="102-108"];
m20_76 [cluster="CommandLine.Tests.Unit.Parser.StrictFixture.Parse_strict_bad_input_fails_and_exits_with_verbs()", file="MultiLineTextAttribute.cs", label="invokedVerb.Should().Be(''bad'')", span="122-122"];
m20_77 [cluster="CommandLine.Tests.Unit.Parser.StrictFixture.Parse_strict_bad_input_fails_and_exits_with_verbs()", file="MultiLineTextAttribute.cs", label="invokedVerbInstance.Should().BeNull()", span="123-123"];
m20_63 [cluster="CommandLine.Tests.Unit.Parser.StrictFixture.Parse_strict_bad_input_fails_and_exits_with_verbs()", file="MultiLineTextAttribute.cs", label="var options = new OptionsWithVerbsNoHelp()", span="97-97"];
m20_65 [cluster="CommandLine.Tests.Unit.Parser.StrictFixture.Parse_strict_bad_input_fails_and_exits_with_verbs()", file="MultiLineTextAttribute.cs", label="ReflectionHelper.AssemblyFromWhichToPullInformation = Assembly.GetExecutingAssembly()", span="100-100"];
m20_66 [cluster="CommandLine.Tests.Unit.Parser.StrictFixture.Parse_strict_bad_input_fails_and_exits_with_verbs()", file="MultiLineTextAttribute.cs", label="var parser = new CommandLine.Parser(with => with.HelpWriter = testWriter)", span="101-101"];
m20_62 [cluster="CommandLine.Tests.Unit.Parser.StrictFixture.Parse_strict_bad_input_fails_and_exits_with_verbs()", file="MultiLineTextAttribute.cs", label="object invokedVerbInstance = null", span="95-95"];
m20_61 [cluster="CommandLine.Tests.Unit.Parser.StrictFixture.Parse_strict_bad_input_fails_and_exits_with_verbs()", file="MultiLineTextAttribute.cs", label="string invokedVerb = null", span="94-94"];
m20_78 [cluster="CommandLine.Tests.Unit.Parser.StrictFixture.Parse_strict_bad_input_fails_and_exits_with_verbs()", file="MultiLineTextAttribute.cs", label="Exit CommandLine.Tests.Unit.Parser.StrictFixture.Parse_strict_bad_input_fails_and_exits_with_verbs()", span="92-92"];
m20_50 [cluster="CommandLine.Tests.Fakes.SimpleOptionsForStrict.SimpleOptionsForStrict()", file="MultiLineTextAttribute.cs", label="Entry CommandLine.Tests.Fakes.SimpleOptionsForStrict.SimpleOptionsForStrict()", span="31-31"];
m20_16 [cluster="System.IO.StringWriter.StringWriter()", file="MultiLineTextAttribute.cs", label="Entry System.IO.StringWriter.StringWriter()", span="0-0"];
m20_21 [cluster="Unk.BeFalse", file="MultiLineTextAttribute.cs", label="Entry Unk.BeFalse", span=""];
m20_19 [cluster="CommandLine.Parser.ParseArgumentsStrict(string[], object, System.Action)", file="MultiLineTextAttribute.cs", label="Entry CommandLine.Parser.ParseArgumentsStrict(string[], object, System.Action)", span="190-190"];
m20_81 [cluster="Unk.BeNull", file="MultiLineTextAttribute.cs", label="Entry Unk.BeNull", span=""];
m20_51 [cluster="lambda expression", file="MultiLineTextAttribute.cs", label="Entry lambda expression", span="76-76"];
m20_116 [cluster="lambda expression", file="MultiLineTextAttribute.cs", label="Entry lambda expression", span="138-142"];
m20_120 [cluster="lambda expression", file="MultiLineTextAttribute.cs", label="Entry lambda expression", span="143-143"];
m20_118 [cluster="lambda expression", color=green, community=0, file="MultiLineTextAttribute.cs", label="invokedVerbInstance = subOptions", prediction=4, span="141-141"];
m20_117 [cluster="lambda expression", file="MultiLineTextAttribute.cs", label="invokedVerb = verb", span="140-140"];
m20_119 [cluster="lambda expression", file="MultiLineTextAttribute.cs", label="Exit lambda expression", span="138-142"];
m20_32 [cluster="lambda expression", file="MultiLineTextAttribute.cs", label="Console.WriteLine(''fake fail'')", span="54-54"];
m20_55 [cluster="lambda expression", file="MultiLineTextAttribute.cs", label="Console.WriteLine(''fake fail'')", span="78-78"];
m20_90 [cluster="lambda expression", file="MultiLineTextAttribute.cs", label="Console.WriteLine(''fake fail'')", span="108-108"];
m20_121 [cluster="lambda expression", file="MultiLineTextAttribute.cs", label="Console.WriteLine(''fake fail'')", span="143-143"];
m20_114 [cluster="lambda expression", file="MultiLineTextAttribute.cs", label="with.HelpWriter = testWriter", span="136-136"];
m20_122 [cluster="lambda expression", file="MultiLineTextAttribute.cs", label="Exit lambda expression", span="143-143"];
m20_83 [cluster="lambda expression", file="MultiLineTextAttribute.cs", label="with.HelpWriter = testWriter", span="101-101"];
m20_92 [cluster="lambda expression", file="MultiLineTextAttribute.cs", label="Entry lambda expression", span="116-116"];
m20_31 [cluster="lambda expression", file="MultiLineTextAttribute.cs", label="Entry lambda expression", span="54-54"];
m20_33 [cluster="lambda expression", file="MultiLineTextAttribute.cs", label="Exit lambda expression", span="54-54"];
m20_54 [cluster="lambda expression", file="MultiLineTextAttribute.cs", label="Entry lambda expression", span="78-78"];
m20_56 [cluster="lambda expression", file="MultiLineTextAttribute.cs", label="Exit lambda expression", span="78-78"];
m20_89 [cluster="lambda expression", file="MultiLineTextAttribute.cs", label="Entry lambda expression", span="108-108"];
m20_91 [cluster="lambda expression", file="MultiLineTextAttribute.cs", label="Exit lambda expression", span="108-108"];
m20_113 [cluster="lambda expression", file="MultiLineTextAttribute.cs", label="Entry lambda expression", span="136-136"];
m20_115 [cluster="lambda expression", file="MultiLineTextAttribute.cs", label="Exit lambda expression", span="136-136"];
m20_85 [cluster="lambda expression", file="MultiLineTextAttribute.cs", label="Entry lambda expression", span="103-107"];
m20_34 [cluster="lambda expression", file="MultiLineTextAttribute.cs", label="Entry lambda expression", span="62-62"];
m20_57 [cluster="lambda expression", file="MultiLineTextAttribute.cs", label="Entry lambda expression", span="86-86"];
m20_123 [cluster="lambda expression", file="MultiLineTextAttribute.cs", label="Entry lambda expression", span="151-151"];
m20_82 [cluster="lambda expression", file="MultiLineTextAttribute.cs", label="Entry lambda expression", span="101-101"];
m20_84 [cluster="lambda expression", file="MultiLineTextAttribute.cs", label="Exit lambda expression", span="101-101"];
m20_94 [cluster="lambda expression", file="MultiLineTextAttribute.cs", label="Exit lambda expression", span="116-116"];
m20_93 [cluster="lambda expression", file="MultiLineTextAttribute.cs", label="n == 8", span="116-116"];
m20_29 [cluster="lambda expression", file="MultiLineTextAttribute.cs", label="with.HelpWriter = testWriter", span="52-52"];
m20_52 [cluster="lambda expression", file="MultiLineTextAttribute.cs", label="with.HelpWriter = testWriter", span="76-76"];
m20_88 [cluster="lambda expression", file="MultiLineTextAttribute.cs", label="Exit lambda expression", span="103-107"];
m20_86 [cluster="lambda expression", file="MultiLineTextAttribute.cs", label="invokedVerb = verb", span="105-105"];
m20_87 [cluster="lambda expression", file="MultiLineTextAttribute.cs", label="invokedVerbInstance = subOptions", span="106-106"];
m20_36 [cluster="lambda expression", file="MultiLineTextAttribute.cs", label="Exit lambda expression", span="62-62"];
m20_35 [cluster="lambda expression", file="MultiLineTextAttribute.cs", label="n == 8", span="62-62"];
m20_59 [cluster="lambda expression", file="MultiLineTextAttribute.cs", label="Exit lambda expression", span="86-86"];
m20_58 [cluster="lambda expression", file="MultiLineTextAttribute.cs", label="n == 1", span="86-86"];
m20_125 [cluster="lambda expression", file="MultiLineTextAttribute.cs", label="Exit lambda expression", span="151-151"];
m20_124 [cluster="lambda expression", file="MultiLineTextAttribute.cs", label="n == 1", span="151-151"];
m20_28 [cluster="lambda expression", file="MultiLineTextAttribute.cs", label="Entry lambda expression", span="52-52"];
m20_30 [cluster="lambda expression", file="MultiLineTextAttribute.cs", label="Exit lambda expression", span="52-52"];
m20_53 [cluster="lambda expression", file="MultiLineTextAttribute.cs", label="Exit lambda expression", span="76-76"];
m20_20 [cluster="Unk.Should", file="MultiLineTextAttribute.cs", label="Entry Unk.Should", span=""];
m20_27 [cluster="Unk.Be", file="MultiLineTextAttribute.cs", label="Entry Unk.Be", span=""];
m20_0 [cluster="CommandLine.Tests.Unit.Parser.StrictFixture.Parse_strict_bad_input_fails_and_exits()", file="MultiLineTextAttribute.cs", label="Entry CommandLine.Tests.Unit.Parser.StrictFixture.Parse_strict_bad_input_fails_and_exits()", span="46-46"];
m20_8 [cluster="CommandLine.Tests.Unit.Parser.StrictFixture.Parse_strict_bad_input_fails_and_exits()", file="MultiLineTextAttribute.cs", label="Console.WriteLine(helpText)", span="59-59"];
m20_6 [cluster="CommandLine.Tests.Unit.Parser.StrictFixture.Parse_strict_bad_input_fails_and_exits()", file="MultiLineTextAttribute.cs", label="result.Should().BeFalse()", span="56-56"];
m20_10 [cluster="CommandLine.Tests.Unit.Parser.StrictFixture.Parse_strict_bad_input_fails_and_exits()", file="MultiLineTextAttribute.cs", label="lines.Should().HaveCount(n => n == 8)", span="62-62"];
m20_11 [cluster="CommandLine.Tests.Unit.Parser.StrictFixture.Parse_strict_bad_input_fails_and_exits()", file="MultiLineTextAttribute.cs", label="lines[5].Trim().Should().Be(''-s, --string'')", span="64-64"];
m20_12 [cluster="CommandLine.Tests.Unit.Parser.StrictFixture.Parse_strict_bad_input_fails_and_exits()", file="MultiLineTextAttribute.cs", label="lines[6].Trim().Should().Be(''-i'')", span="65-65"];
m20_13 [cluster="CommandLine.Tests.Unit.Parser.StrictFixture.Parse_strict_bad_input_fails_and_exits()", file="MultiLineTextAttribute.cs", label="lines[7].Trim().Should().Be(''--switch'')", span="66-66"];
m20_7 [cluster="CommandLine.Tests.Unit.Parser.StrictFixture.Parse_strict_bad_input_fails_and_exits()", file="MultiLineTextAttribute.cs", label="var helpText = testWriter.ToString()", span="58-58"];
m20_9 [cluster="CommandLine.Tests.Unit.Parser.StrictFixture.Parse_strict_bad_input_fails_and_exits()", file="MultiLineTextAttribute.cs", label="var lines = helpText.Split(new string[] { Environment.NewLine }, StringSplitOptions.RemoveEmptyEntries)", span="60-60"];
m20_4 [cluster="CommandLine.Tests.Unit.Parser.StrictFixture.Parse_strict_bad_input_fails_and_exits()", file="MultiLineTextAttribute.cs", label="var parser = new CommandLine.Parser(with => with.HelpWriter = testWriter)", span="52-52"];
m20_5 [cluster="CommandLine.Tests.Unit.Parser.StrictFixture.Parse_strict_bad_input_fails_and_exits()", file="MultiLineTextAttribute.cs", label="var result = parser.ParseArgumentsStrict(new string[] {''--bad'', ''--input''}, options,\r\n                () => Console.WriteLine(''fake fail''))", span="53-54"];
m20_2 [cluster="CommandLine.Tests.Unit.Parser.StrictFixture.Parse_strict_bad_input_fails_and_exits()", file="MultiLineTextAttribute.cs", label="var testWriter = new StringWriter()", span="49-49"];
m20_3 [cluster="CommandLine.Tests.Unit.Parser.StrictFixture.Parse_strict_bad_input_fails_and_exits()", file="MultiLineTextAttribute.cs", label="ReflectionHelper.AssemblyFromWhichToPullInformation = Assembly.GetExecutingAssembly()", span="51-51"];
m20_1 [cluster="CommandLine.Tests.Unit.Parser.StrictFixture.Parse_strict_bad_input_fails_and_exits()", file="MultiLineTextAttribute.cs", label="var options = new SimpleOptions()", span="48-48"];
m20_14 [cluster="CommandLine.Tests.Unit.Parser.StrictFixture.Parse_strict_bad_input_fails_and_exits()", file="MultiLineTextAttribute.cs", label="Exit CommandLine.Tests.Unit.Parser.StrictFixture.Parse_strict_bad_input_fails_and_exits()", span="46-46"];
m20_22 [cluster="System.IO.StringWriter.ToString()", file="MultiLineTextAttribute.cs", label="Entry System.IO.StringWriter.ToString()", span="0-0"];
m20_17 [cluster="System.Reflection.Assembly.GetExecutingAssembly()", file="MultiLineTextAttribute.cs", label="Entry System.Reflection.Assembly.GetExecutingAssembly()", span="0-0"];
m20_25 [cluster="Unk.HaveCount", file="MultiLineTextAttribute.cs", label="Entry Unk.HaveCount", span=""];
m20_37 [cluster="CommandLine.Tests.Unit.Parser.StrictFixture.Parse_strict_bad_input_fails_and_exits_when_get_usage_is_defined()", file="MultiLineTextAttribute.cs", label="Entry CommandLine.Tests.Unit.Parser.StrictFixture.Parse_strict_bad_input_fails_and_exits_when_get_usage_is_defined()", span="70-70"];
m20_45 [cluster="CommandLine.Tests.Unit.Parser.StrictFixture.Parse_strict_bad_input_fails_and_exits_when_get_usage_is_defined()", file="MultiLineTextAttribute.cs", label="Console.WriteLine(helpText)", span="83-83"];
m20_43 [cluster="CommandLine.Tests.Unit.Parser.StrictFixture.Parse_strict_bad_input_fails_and_exits_when_get_usage_is_defined()", file="MultiLineTextAttribute.cs", label="result.Should().BeFalse()", span="80-80"];
m20_47 [cluster="CommandLine.Tests.Unit.Parser.StrictFixture.Parse_strict_bad_input_fails_and_exits_when_get_usage_is_defined()", file="MultiLineTextAttribute.cs", label="lines.Should().HaveCount(n => n == 1)", span="86-86"];
m20_48 [cluster="CommandLine.Tests.Unit.Parser.StrictFixture.Parse_strict_bad_input_fails_and_exits_when_get_usage_is_defined()", file="MultiLineTextAttribute.cs", label="lines[0].Trim().Should().Be(''SimpleOptionsForStrict (user defined)'')", span="88-88"];
m20_44 [cluster="CommandLine.Tests.Unit.Parser.StrictFixture.Parse_strict_bad_input_fails_and_exits_when_get_usage_is_defined()", file="MultiLineTextAttribute.cs", label="var helpText = testWriter.ToString()", span="82-82"];
m20_46 [cluster="CommandLine.Tests.Unit.Parser.StrictFixture.Parse_strict_bad_input_fails_and_exits_when_get_usage_is_defined()", file="MultiLineTextAttribute.cs", label="var lines = helpText.Split(new string[] { Environment.NewLine }, StringSplitOptions.RemoveEmptyEntries)", span="84-84"];
m20_41 [cluster="CommandLine.Tests.Unit.Parser.StrictFixture.Parse_strict_bad_input_fails_and_exits_when_get_usage_is_defined()", file="MultiLineTextAttribute.cs", label="var parser = new CommandLine.Parser(with => with.HelpWriter = testWriter)", span="76-76"];
m20_42 [cluster="CommandLine.Tests.Unit.Parser.StrictFixture.Parse_strict_bad_input_fails_and_exits_when_get_usage_is_defined()", file="MultiLineTextAttribute.cs", label="var result = parser.ParseArgumentsStrict(new string[] { ''--bad'', ''--input'' }, options,\r\n                () => Console.WriteLine(''fake fail''))", span="77-78"];
m20_39 [cluster="CommandLine.Tests.Unit.Parser.StrictFixture.Parse_strict_bad_input_fails_and_exits_when_get_usage_is_defined()", file="MultiLineTextAttribute.cs", label="var testWriter = new StringWriter()", span="73-73"];
m20_40 [cluster="CommandLine.Tests.Unit.Parser.StrictFixture.Parse_strict_bad_input_fails_and_exits_when_get_usage_is_defined()", file="MultiLineTextAttribute.cs", label="ReflectionHelper.AssemblyFromWhichToPullInformation = Assembly.GetExecutingAssembly()", span="75-75"];
m20_38 [cluster="CommandLine.Tests.Unit.Parser.StrictFixture.Parse_strict_bad_input_fails_and_exits_when_get_usage_is_defined()", file="MultiLineTextAttribute.cs", label="var options = new SimpleOptionsForStrict()", span="72-72"];
m20_49 [cluster="CommandLine.Tests.Unit.Parser.StrictFixture.Parse_strict_bad_input_fails_and_exits_when_get_usage_is_defined()", file="MultiLineTextAttribute.cs", label="Exit CommandLine.Tests.Unit.Parser.StrictFixture.Parse_strict_bad_input_fails_and_exits_when_get_usage_is_defined()", span="70-70"];
m20_79 [cluster="CommandLine.Tests.Fakes.OptionsWithVerbsNoHelp.OptionsWithVerbsNoHelp()", file="MultiLineTextAttribute.cs", label="Entry CommandLine.Tests.Fakes.OptionsWithVerbsNoHelp.OptionsWithVerbsNoHelp()", span="108-108"];
m20_95 [cluster="CommandLine.Tests.Unit.Parser.StrictFixture.Parse_strict_bad_input_fails_and_exits_with_verbs_when_get_usage_is_defined()", file="MultiLineTextAttribute.cs", label="Entry CommandLine.Tests.Unit.Parser.StrictFixture.Parse_strict_bad_input_fails_and_exits_with_verbs_when_get_usage_is_defined()", span="127-127"];
m20_102 [cluster="CommandLine.Tests.Unit.Parser.StrictFixture.Parse_strict_bad_input_fails_and_exits_with_verbs_when_get_usage_is_defined()", color=green, community=0, file="MultiLineTextAttribute.cs", label="var result = parser.ParseArgumentsStrict(new string[] { ''bad'', ''input'' }, options,\r\n                (verb, subOptions) =>\r\n                {\r\n                    invokedVerb = verb;\r\n                    invokedVerbInstance = subOptions;\r\n                },\r\n                () => Console.WriteLine(''fake fail''))", prediction=5, span="137-143"];
m20_98 [cluster="CommandLine.Tests.Unit.Parser.StrictFixture.Parse_strict_bad_input_fails_and_exits_with_verbs_when_get_usage_is_defined()", file="MultiLineTextAttribute.cs", label="var options = new OptionsWithVerbs()", span="132-132"];
m20_101 [cluster="CommandLine.Tests.Unit.Parser.StrictFixture.Parse_strict_bad_input_fails_and_exits_with_verbs_when_get_usage_is_defined()", file="MultiLineTextAttribute.cs", label="var parser = new CommandLine.Parser(with => with.HelpWriter = testWriter)", span="136-136"];
m20_103 [cluster="CommandLine.Tests.Unit.Parser.StrictFixture.Parse_strict_bad_input_fails_and_exits_with_verbs_when_get_usage_is_defined()", file="MultiLineTextAttribute.cs", label="result.Should().BeFalse()", span="145-145"];
m20_109 [cluster="CommandLine.Tests.Unit.Parser.StrictFixture.Parse_strict_bad_input_fails_and_exits_with_verbs_when_get_usage_is_defined()", file="MultiLineTextAttribute.cs", label="invokedVerb.Should().Be(''bad'')", span="155-155"];
m20_110 [cluster="CommandLine.Tests.Unit.Parser.StrictFixture.Parse_strict_bad_input_fails_and_exits_with_verbs_when_get_usage_is_defined()", color=green, community=0, file="MultiLineTextAttribute.cs", label="invokedVerbInstance.Should().BeNull()", prediction=5, span="156-156"];
m20_105 [cluster="CommandLine.Tests.Unit.Parser.StrictFixture.Parse_strict_bad_input_fails_and_exits_with_verbs_when_get_usage_is_defined()", file="MultiLineTextAttribute.cs", label="Console.WriteLine(helpText)", span="148-148"];
m20_97 [cluster="CommandLine.Tests.Unit.Parser.StrictFixture.Parse_strict_bad_input_fails_and_exits_with_verbs_when_get_usage_is_defined()", file="MultiLineTextAttribute.cs", label="object invokedVerbInstance = null", span="130-130"];
m20_99 [cluster="CommandLine.Tests.Unit.Parser.StrictFixture.Parse_strict_bad_input_fails_and_exits_with_verbs_when_get_usage_is_defined()", file="MultiLineTextAttribute.cs", label="var testWriter = new StringWriter()", span="133-133"];
m20_100 [cluster="CommandLine.Tests.Unit.Parser.StrictFixture.Parse_strict_bad_input_fails_and_exits_with_verbs_when_get_usage_is_defined()", file="MultiLineTextAttribute.cs", label="ReflectionHelper.AssemblyFromWhichToPullInformation = Assembly.GetExecutingAssembly()", span="135-135"];
m20_104 [cluster="CommandLine.Tests.Unit.Parser.StrictFixture.Parse_strict_bad_input_fails_and_exits_with_verbs_when_get_usage_is_defined()", file="MultiLineTextAttribute.cs", label="var helpText = testWriter.ToString()", span="147-147"];
m20_108 [cluster="CommandLine.Tests.Unit.Parser.StrictFixture.Parse_strict_bad_input_fails_and_exits_with_verbs_when_get_usage_is_defined()", file="MultiLineTextAttribute.cs", label="lines[0].Trim().Should().Be(''verbs help index'')", span="153-153"];
m20_107 [cluster="CommandLine.Tests.Unit.Parser.StrictFixture.Parse_strict_bad_input_fails_and_exits_with_verbs_when_get_usage_is_defined()", file="MultiLineTextAttribute.cs", label="lines.Should().HaveCount(n => n == 1)", span="151-151"];
m20_106 [cluster="CommandLine.Tests.Unit.Parser.StrictFixture.Parse_strict_bad_input_fails_and_exits_with_verbs_when_get_usage_is_defined()", file="MultiLineTextAttribute.cs", label="var lines = helpText.Split(new string[] { Environment.NewLine }, StringSplitOptions.RemoveEmptyEntries)", span="149-149"];
m20_96 [cluster="CommandLine.Tests.Unit.Parser.StrictFixture.Parse_strict_bad_input_fails_and_exits_with_verbs_when_get_usage_is_defined()", file="MultiLineTextAttribute.cs", label="string invokedVerb = null", span="129-129"];
m20_111 [cluster="CommandLine.Tests.Unit.Parser.StrictFixture.Parse_strict_bad_input_fails_and_exits_with_verbs_when_get_usage_is_defined()", file="MultiLineTextAttribute.cs", label="Exit CommandLine.Tests.Unit.Parser.StrictFixture.Parse_strict_bad_input_fails_and_exits_with_verbs_when_get_usage_is_defined()", span="127-127"];
m20_23 [cluster="System.Console.WriteLine(string)", file="MultiLineTextAttribute.cs", label="Entry System.Console.WriteLine(string)", span="0-0"];
m20_26 [cluster="string.Trim()", file="MultiLineTextAttribute.cs", label="Entry string.Trim()", span="0-0"];
m20_24 [cluster="string.Split(string[], System.StringSplitOptions)", file="MultiLineTextAttribute.cs", label="Entry string.Split(string[], System.StringSplitOptions)", span="0-0"];
m20_129 [file="MultiLineTextAttribute.cs", label=testWriter, span=""];
m20_128 [file="MultiLineTextAttribute.cs", label=testWriter, span=""];
m20_126 [file="MultiLineTextAttribute.cs", label=testWriter, span=""];
m20_127 [file="MultiLineTextAttribute.cs", label=testWriter, span=""];
m21_4 [cluster="System.Linq.Enumerable.Empty<TResult>()", file="OneCharStringEnumerator.cs", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
m21_0 [cluster="CommandLine.Core.ArgumentsExtensions.Preprocess(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", file="OneCharStringEnumerator.cs", label="Entry CommandLine.Core.ArgumentsExtensions.Preprocess(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", span="11-11"];
m21_1 [cluster="CommandLine.Core.ArgumentsExtensions.Preprocess(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", file="OneCharStringEnumerator.cs", label="return preprocessorLookup.TryHead().Return(\r\n                func =>\r\n                    {\r\n                        var errors = func(arguments);\r\n                        return errors.Any()\r\n                            ? errors\r\n                            : arguments.Preprocess(preprocessorLookup.TailNoFail());\r\n                    },\r\n                Enumerable.Empty<Error>());", span="17-25"];
m21_2 [cluster="CommandLine.Core.ArgumentsExtensions.Preprocess(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", file="OneCharStringEnumerator.cs", label="Exit CommandLine.Core.ArgumentsExtensions.Preprocess(System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", span="11-11"];
m21_6 [cluster="lambda expression", file="OneCharStringEnumerator.cs", label="Entry lambda expression", span="18-24"];
m21_7 [cluster="lambda expression", file="OneCharStringEnumerator.cs", label="var errors = func(arguments)", span="20-20"];
m21_8 [cluster="lambda expression", file="OneCharStringEnumerator.cs", label="return errors.Any()\r\n                            ? errors\r\n                            : arguments.Preprocess(preprocessorLookup.TailNoFail());", span="21-23"];
m21_9 [cluster="lambda expression", file="OneCharStringEnumerator.cs", label="Exit lambda expression", span="18-24"];
m21_5 [cluster="Unk.Return", file="OneCharStringEnumerator.cs", label="Entry Unk.Return", span=""];
m21_10 [cluster="Unk.func", file="OneCharStringEnumerator.cs", label="Entry Unk.func", span=""];
m21_13 [cluster="System.Collections.Generic.IEnumerable<string>.Preprocess(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", file="OneCharStringEnumerator.cs", label="Entry System.Collections.Generic.IEnumerable<string>.Preprocess(System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>)", span="11-11"];
m21_11 [cluster="Unk.Any", file="OneCharStringEnumerator.cs", label="Entry Unk.Any", span=""];
m21_3 [cluster="System.Collections.Generic.IEnumerable<T>.TryHead<T>()", file="OneCharStringEnumerator.cs", label="Entry System.Collections.Generic.IEnumerable<T>.TryHead<T>()", span="318-318"];
m21_12 [cluster="System.Collections.Generic.IEnumerable<T>.TailNoFail<T>()", file="OneCharStringEnumerator.cs", label="Entry System.Collections.Generic.IEnumerable<T>.TailNoFail<T>()", span="361-361"];
m21_14 [file="OneCharStringEnumerator.cs", label="System.Collections.Generic.IEnumerable<string>", span=""];
m21_15 [file="OneCharStringEnumerator.cs", label="System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>", span=""];
m22_56 [cluster="CommandLine.Internal.ArgumentParser.GetNextInputValues(CommandLine.Internal.IArgumentEnumerator)", file="OptionGroupParser.cs", label="Entry CommandLine.Internal.ArgumentParser.GetNextInputValues(CommandLine.Internal.IArgumentEnumerator)", span="88-88"];
m22_60 [cluster="CommandLine.Internal.ArgumentParser.IsInputValue(string)", file="OptionGroupParser.cs", label="Entry CommandLine.Internal.ArgumentParser.IsInputValue(string)", span="73-73"];
m22_61 [cluster="CommandLine.Internal.OptionInfo.SetValue(bool, object)", file="OptionGroupParser.cs", label="Entry CommandLine.Internal.OptionInfo.SetValue(bool, object)", span="142-142"];
m22_0 [cluster="CommandLine.Internal.OptionGroupParser.OptionGroupParser(bool)", file="OptionGroupParser.cs", label="Entry CommandLine.Internal.OptionGroupParser.OptionGroupParser(bool)", span="43-43"];
m22_1 [cluster="CommandLine.Internal.OptionGroupParser.OptionGroupParser(bool)", file="OptionGroupParser.cs", label="_ignoreUnkwnownArguments = ignoreUnkwnownArguments", span="45-45"];
m22_2 [cluster="CommandLine.Internal.OptionGroupParser.OptionGroupParser(bool)", file="OptionGroupParser.cs", label="Exit CommandLine.Internal.OptionGroupParser.OptionGroupParser(bool)", span="43-43"];
m22_47 [cluster="CommandLine.Internal.OneCharStringEnumerator.OneCharStringEnumerator(string)", file="OptionGroupParser.cs", label="Entry CommandLine.Internal.OneCharStringEnumerator.OneCharStringEnumerator(string)", span="43-43"];
m22_49 [cluster="CommandLine.Internal.IArgumentEnumerator.MoveNext()", file="OptionGroupParser.cs", label="Entry CommandLine.Internal.IArgumentEnumerator.MoveNext()", span="48-48"];
m22_3 [cluster="CommandLine.Internal.OptionGroupParser.Parse(CommandLine.Internal.IArgumentEnumerator, CommandLine.Internal.OptionMap, object)", file="OptionGroupParser.cs", label="Entry CommandLine.Internal.OptionGroupParser.Parse(CommandLine.Internal.IArgumentEnumerator, CommandLine.Internal.OptionMap, object)", span="48-48"];
m22_4 [cluster="CommandLine.Internal.OptionGroupParser.Parse(CommandLine.Internal.IArgumentEnumerator, CommandLine.Internal.OptionMap, object)", file="OptionGroupParser.cs", label="IArgumentEnumerator group = new OneCharStringEnumerator(argumentEnumerator.Current.Substring(1))", span="50-50"];
m22_6 [cluster="CommandLine.Internal.OptionGroupParser.Parse(CommandLine.Internal.IArgumentEnumerator, CommandLine.Internal.OptionMap, object)", file="OptionGroupParser.cs", label="var option = map[group.Current]", span="53-53"];
m22_12 [cluster="CommandLine.Internal.OptionGroupParser.Parse(CommandLine.Internal.IArgumentEnumerator, CommandLine.Internal.OptionMap, object)", file="OptionGroupParser.cs", label="argumentEnumerator.IsLast && group.IsLast", span="64-64"];
m22_17 [cluster="CommandLine.Internal.OptionGroupParser.Parse(CommandLine.Internal.IArgumentEnumerator, CommandLine.Internal.OptionMap, object)", file="OptionGroupParser.cs", label="valueSetting = option.SetValue(group.GetRemainingFromNext(), options)", span="73-73"];
m22_22 [cluster="CommandLine.Internal.OptionGroupParser.Parse(CommandLine.Internal.IArgumentEnumerator, CommandLine.Internal.OptionMap, object)", file="OptionGroupParser.cs", label="var items = ArgumentParser.GetNextInputValues(argumentEnumerator)", span="83-83"];
m22_24 [cluster="CommandLine.Internal.OptionGroupParser.Parse(CommandLine.Internal.IArgumentEnumerator, CommandLine.Internal.OptionMap, object)", file="OptionGroupParser.cs", label="valueSetting = option.SetValue(items, options)", span="86-86"];
m22_28 [cluster="CommandLine.Internal.OptionGroupParser.Parse(CommandLine.Internal.IArgumentEnumerator, CommandLine.Internal.OptionMap, object)", file="OptionGroupParser.cs", label="!argumentEnumerator.IsLast && !ArgumentParser.IsInputValue(argumentEnumerator.Next)", span="94-94"];
m22_31 [cluster="CommandLine.Internal.OptionGroupParser.Parse(CommandLine.Internal.IArgumentEnumerator, CommandLine.Internal.OptionMap, object)", file="OptionGroupParser.cs", label="valueSetting = option.SetValue(argumentEnumerator.Next, options)", span="102-102"];
m22_36 [cluster="CommandLine.Internal.OptionGroupParser.Parse(CommandLine.Internal.IArgumentEnumerator, CommandLine.Internal.OptionMap, object)", file="OptionGroupParser.cs", label="var items = ArgumentParser.GetNextInputValues(argumentEnumerator)", span="112-112"];
m22_37 [cluster="CommandLine.Internal.OptionGroupParser.Parse(CommandLine.Internal.IArgumentEnumerator, CommandLine.Internal.OptionMap, object)", file="OptionGroupParser.cs", label="valueSetting = option.SetValue(items, options)", span="114-114"];
m22_41 [cluster="CommandLine.Internal.OptionGroupParser.Parse(CommandLine.Internal.IArgumentEnumerator, CommandLine.Internal.OptionMap, object)", file="OptionGroupParser.cs", label="!@group.IsLast && map[@group.Next] == null", span="123-123"];
m22_43 [cluster="CommandLine.Internal.OptionGroupParser.Parse(CommandLine.Internal.IArgumentEnumerator, CommandLine.Internal.OptionMap, object)", file="OptionGroupParser.cs", label="!option.SetValue(true, options)", span="127-127"];
m22_5 [cluster="CommandLine.Internal.OptionGroupParser.Parse(CommandLine.Internal.IArgumentEnumerator, CommandLine.Internal.OptionMap, object)", file="OptionGroupParser.cs", label="group.MoveNext()", span="51-51"];
m22_15 [cluster="CommandLine.Internal.OptionGroupParser.Parse(CommandLine.Internal.IArgumentEnumerator, CommandLine.Internal.OptionMap, object)", file="OptionGroupParser.cs", label="!group.IsLast", span="69-69"];
m22_23 [cluster="CommandLine.Internal.OptionGroupParser.Parse(CommandLine.Internal.IArgumentEnumerator, CommandLine.Internal.OptionMap, object)", file="OptionGroupParser.cs", label="items.Insert(0, @group.GetRemainingFromNext())", span="84-84"];
m22_7 [cluster="CommandLine.Internal.OptionGroupParser.Parse(CommandLine.Internal.IArgumentEnumerator, CommandLine.Internal.OptionMap, object)", file="OptionGroupParser.cs", label="option == null", span="54-54"];
m22_9 [cluster="CommandLine.Internal.OptionGroupParser.Parse(CommandLine.Internal.IArgumentEnumerator, CommandLine.Internal.OptionMap, object)", file="OptionGroupParser.cs", label="option.IsDefined = true", span="58-58"];
m22_10 [cluster="CommandLine.Internal.OptionGroupParser.Parse(CommandLine.Internal.IArgumentEnumerator, CommandLine.Internal.OptionMap, object)", file="OptionGroupParser.cs", label="ArgumentParser.EnsureOptionArrayAttributeIsNotBoundToScalar(option)", span="60-60"];
m22_11 [cluster="CommandLine.Internal.OptionGroupParser.Parse(CommandLine.Internal.IArgumentEnumerator, CommandLine.Internal.OptionMap, object)", file="OptionGroupParser.cs", label="!option.IsBoolean", span="62-62"];
m22_16 [cluster="CommandLine.Internal.OptionGroupParser.Parse(CommandLine.Internal.IArgumentEnumerator, CommandLine.Internal.OptionMap, object)", file="OptionGroupParser.cs", label="!option.IsArray", span="71-71"];
m22_19 [cluster="CommandLine.Internal.OptionGroupParser.Parse(CommandLine.Internal.IArgumentEnumerator, CommandLine.Internal.OptionMap, object)", file="OptionGroupParser.cs", label="DefineOptionThatViolatesFormat(option)", span="76-76"];
m22_21 [cluster="CommandLine.Internal.OptionGroupParser.Parse(CommandLine.Internal.IArgumentEnumerator, CommandLine.Internal.OptionMap, object)", file="OptionGroupParser.cs", label="ArgumentParser.EnsureOptionAttributeIsArrayCompatible(option)", span="81-81"];
m22_26 [cluster="CommandLine.Internal.OptionGroupParser.Parse(CommandLine.Internal.IArgumentEnumerator, CommandLine.Internal.OptionMap, object)", file="OptionGroupParser.cs", label="DefineOptionThatViolatesFormat(option)", span="89-89"];
m22_30 [cluster="CommandLine.Internal.OptionGroupParser.Parse(CommandLine.Internal.IArgumentEnumerator, CommandLine.Internal.OptionMap, object)", file="OptionGroupParser.cs", label="!option.IsArray", span="100-100"];
m22_35 [cluster="CommandLine.Internal.OptionGroupParser.Parse(CommandLine.Internal.IArgumentEnumerator, CommandLine.Internal.OptionMap, object)", file="OptionGroupParser.cs", label="ArgumentParser.EnsureOptionAttributeIsArrayCompatible(option)", span="110-110"];
m22_39 [cluster="CommandLine.Internal.OptionGroupParser.Parse(CommandLine.Internal.IArgumentEnumerator, CommandLine.Internal.OptionMap, object)", file="OptionGroupParser.cs", label="DefineOptionThatViolatesFormat(option)", span="117-117"];
m22_14 [cluster="CommandLine.Internal.OptionGroupParser.Parse(CommandLine.Internal.IArgumentEnumerator, CommandLine.Internal.OptionMap, object)", file="OptionGroupParser.cs", label="bool valueSetting", span="68-68"];
m22_18 [cluster="CommandLine.Internal.OptionGroupParser.Parse(CommandLine.Internal.IArgumentEnumerator, CommandLine.Internal.OptionMap, object)", file="OptionGroupParser.cs", label="!valueSetting", span="74-74"];
m22_20 [cluster="CommandLine.Internal.OptionGroupParser.Parse(CommandLine.Internal.IArgumentEnumerator, CommandLine.Internal.OptionMap, object)", file="OptionGroupParser.cs", label="return ArgumentParser.BooleanToParserState(valueSetting);", span="78-78"];
m22_25 [cluster="CommandLine.Internal.OptionGroupParser.Parse(CommandLine.Internal.IArgumentEnumerator, CommandLine.Internal.OptionMap, object)", file="OptionGroupParser.cs", label="!valueSetting", span="87-87"];
m22_27 [cluster="CommandLine.Internal.OptionGroupParser.Parse(CommandLine.Internal.IArgumentEnumerator, CommandLine.Internal.OptionMap, object)", file="OptionGroupParser.cs", label="return ArgumentParser.BooleanToParserState(valueSetting, true);", span="91-91"];
m22_32 [cluster="CommandLine.Internal.OptionGroupParser.Parse(CommandLine.Internal.IArgumentEnumerator, CommandLine.Internal.OptionMap, object)", file="OptionGroupParser.cs", label="!valueSetting", span="103-103"];
m22_34 [cluster="CommandLine.Internal.OptionGroupParser.Parse(CommandLine.Internal.IArgumentEnumerator, CommandLine.Internal.OptionMap, object)", file="OptionGroupParser.cs", label="return ArgumentParser.BooleanToParserState(valueSetting, true);", span="107-107"];
m22_38 [cluster="CommandLine.Internal.OptionGroupParser.Parse(CommandLine.Internal.IArgumentEnumerator, CommandLine.Internal.OptionMap, object)", file="OptionGroupParser.cs", label="!valueSetting", span="115-115"];
m22_40 [cluster="CommandLine.Internal.OptionGroupParser.Parse(CommandLine.Internal.IArgumentEnumerator, CommandLine.Internal.OptionMap, object)", file="OptionGroupParser.cs", label="return ArgumentParser.BooleanToParserState(valueSetting);", span="119-119"];
m22_46 [cluster="CommandLine.Internal.OptionGroupParser.Parse(CommandLine.Internal.IArgumentEnumerator, CommandLine.Internal.OptionMap, object)", file="OptionGroupParser.cs", label="Exit CommandLine.Internal.OptionGroupParser.Parse(CommandLine.Internal.IArgumentEnumerator, CommandLine.Internal.OptionMap, object)", span="48-48"];
m22_58 [cluster="CommandLine.Internal.OptionInfo.SetValue(System.Collections.Generic.IList<string>, object)", file="OptionGroupParser.cs", label="Entry CommandLine.Internal.OptionInfo.SetValue(System.Collections.Generic.IList<string>, object)", span="85-85"];
m22_57 [cluster="System.Collections.Generic.IList<T>.Insert(int, T)", file="OptionGroupParser.cs", label="Entry System.Collections.Generic.IList<T>.Insert(int, T)", span="0-0"];
m22_51 [cluster="CommandLine.Internal.IArgumentEnumerator.GetRemainingFromNext()", file="OptionGroupParser.cs", label="Entry CommandLine.Internal.IArgumentEnumerator.GetRemainingFromNext()", span="43-43"];
m22_53 [cluster="CommandLine.Internal.ArgumentParser.DefineOptionThatViolatesFormat(CommandLine.Internal.OptionInfo)", file="OptionGroupParser.cs", label="Entry CommandLine.Internal.ArgumentParser.DefineOptionThatViolatesFormat(CommandLine.Internal.OptionInfo)", span="53-53"];
m22_54 [cluster="CommandLine.Internal.ArgumentParser.BooleanToParserState(bool)", file="OptionGroupParser.cs", label="Entry CommandLine.Internal.ArgumentParser.BooleanToParserState(bool)", span="112-112"];
m22_55 [cluster="CommandLine.Internal.ArgumentParser.EnsureOptionAttributeIsArrayCompatible(CommandLine.Internal.OptionInfo)", file="OptionGroupParser.cs", label="Entry CommandLine.Internal.ArgumentParser.EnsureOptionAttributeIsArrayCompatible(CommandLine.Internal.OptionInfo)", span="127-127"];
m22_59 [cluster="CommandLine.Internal.ArgumentParser.BooleanToParserState(bool, bool)", file="OptionGroupParser.cs", label="Entry CommandLine.Internal.ArgumentParser.BooleanToParserState(bool, bool)", span="117-117"];
m22_50 [cluster="CommandLine.Internal.ArgumentParser.EnsureOptionArrayAttributeIsNotBoundToScalar(CommandLine.Internal.OptionInfo)", file="OptionGroupParser.cs", label="Entry CommandLine.Internal.ArgumentParser.EnsureOptionArrayAttributeIsNotBoundToScalar(CommandLine.Internal.OptionInfo)", span="135-135"];
m22_52 [cluster="CommandLine.Internal.OptionInfo.SetValue(string, object)", file="OptionGroupParser.cs", label="Entry CommandLine.Internal.OptionInfo.SetValue(string, object)", span="72-72"];
m22_48 [cluster="string.Substring(int)", file="OptionGroupParser.cs", label="Entry string.Substring(int)", span="0-0"];
m22_62 [file="OptionGroupParser.cs", label="CommandLine.Internal.OptionGroupParser", span=""];
m23_7 [cluster="CommandLine.Internal.OptionInfo.OptionInfo(CommandLine.BaseOptionAttribute, System.Reflection.PropertyInfo)", file="OptionInfo.cs", label="_longName = attribute.LongName", span="57-57"];
m23_66 [cluster="CommandLine.CommandLineParserException.CommandLineParserException(string, System.Exception)", file="OptionInfo.cs", label="Entry CommandLine.CommandLineParserException.CommandLineParserException(string, System.Exception)", span="65-65"];
m23_70 [cluster="CommandLine.Internal.OptionInfo.CreateInstance(object)", file="OptionInfo.cs", label="Entry CommandLine.Internal.OptionInfo.CreateInstance(object)", span="191-191"];
m23_71 [cluster="CommandLine.Internal.OptionInfo.CreateInstance(object)", file="OptionInfo.cs", label="_property.SetValue(target, Activator.CreateInstance(_property.PropertyType), null)", span="195-195"];
m23_72 [cluster="CommandLine.Internal.OptionInfo.CreateInstance(object)", file="OptionInfo.cs", label=Exception, span="197-197"];
m23_73 [cluster="CommandLine.Internal.OptionInfo.CreateInstance(object)", file="OptionInfo.cs", label="throw new CommandLineParserException(SR.CommandLineParserException_CannotCreateInstanceForVerbCommand, e);", span="199-199"];
m23_74 [cluster="CommandLine.Internal.OptionInfo.CreateInstance(object)", file="OptionInfo.cs", label="Exit CommandLine.Internal.OptionInfo.CreateInstance(object)", span="191-191"];
m23_58 [cluster="string.Split(params char[])", file="OptionInfo.cs", label="Entry string.Split(params char[])", span="0-0"];
m23_26 [cluster="CommandLine.Internal.PropertyWriter.WriteNullable(string, object)", file="OptionInfo.cs", label="Entry CommandLine.Internal.PropertyWriter.WriteNullable(string, object)", span="73-73"];
m23_25 [cluster="CommandLine.Utils.ReflectionUtil.IsNullableType(System.Type)", file="OptionInfo.cs", label="Entry CommandLine.Utils.ReflectionUtil.IsNullableType(System.Type)", span="207-207"];
m23_67 [cluster="CommandLine.Internal.OptionInfo.GetValue(object)", file="OptionInfo.cs", label="Entry CommandLine.Internal.OptionInfo.GetValue(object)", span="186-186"];
m23_68 [cluster="CommandLine.Internal.OptionInfo.GetValue(object)", file="OptionInfo.cs", label="return _property.GetValue(target, null);", span="188-188"];
m23_69 [cluster="CommandLine.Internal.OptionInfo.GetValue(object)", file="OptionInfo.cs", label="Exit CommandLine.Internal.OptionInfo.GetValue(object)", span="186-186"];
m23_27 [cluster="CommandLine.Internal.PropertyWriter.WriteScalar(string, object)", file="OptionInfo.cs", label="Entry CommandLine.Internal.PropertyWriter.WriteScalar(string, object)", span="52-52"];
m23_0 [cluster="CommandLine.Internal.OptionInfo.OptionInfo(CommandLine.BaseOptionAttribute, System.Reflection.PropertyInfo)", file="OptionInfo.cs", label="Entry CommandLine.Internal.OptionInfo.OptionInfo(CommandLine.BaseOptionAttribute, System.Reflection.PropertyInfo)", span="45-45"];
m23_1 [cluster="CommandLine.Internal.OptionInfo.OptionInfo(CommandLine.BaseOptionAttribute, System.Reflection.PropertyInfo)", file="OptionInfo.cs", label="attribute == null", span="47-47"];
m23_2 [cluster="CommandLine.Internal.OptionInfo.OptionInfo(CommandLine.BaseOptionAttribute, System.Reflection.PropertyInfo)", file="OptionInfo.cs", label="throw new ArgumentNullException(''attribute'', SR.ArgumentNullException_AttributeCannotBeNull);", span="49-49"];
m23_3 [cluster="CommandLine.Internal.OptionInfo.OptionInfo(CommandLine.BaseOptionAttribute, System.Reflection.PropertyInfo)", file="OptionInfo.cs", label="property == null", span="51-51"];
m23_5 [cluster="CommandLine.Internal.OptionInfo.OptionInfo(CommandLine.BaseOptionAttribute, System.Reflection.PropertyInfo)", file="OptionInfo.cs", label="_required = attribute.Required", span="55-55"];
m23_4 [cluster="CommandLine.Internal.OptionInfo.OptionInfo(CommandLine.BaseOptionAttribute, System.Reflection.PropertyInfo)", file="OptionInfo.cs", label="throw new ArgumentNullException(''property'', SR.ArgumentNullException_PropertyCannotBeNull);", span="53-53"];
m23_6 [cluster="CommandLine.Internal.OptionInfo.OptionInfo(CommandLine.BaseOptionAttribute, System.Reflection.PropertyInfo)", file="OptionInfo.cs", label="_shortName = attribute.ShortName", span="56-56"];
m23_41 [cluster="System.Array.CreateInstance(System.Type, int)", file="OptionInfo.cs", label="Entry System.Array.CreateInstance(System.Type, int)", span="0-0"];
m23_44 [cluster="System.Reflection.PropertyInfo.SetValue(object, object, object[])", file="OptionInfo.cs", label="Entry System.Reflection.PropertyInfo.SetValue(object, object, object[])", span="0-0"];
m23_43 [cluster="System.Array.SetValue(object, int)", file="OptionInfo.cs", label="Entry System.Array.SetValue(object, int)", span="0-0"];
m23_11 [cluster="CommandLine.Internal.OptionInfo.OptionInfo(CommandLine.BaseOptionAttribute, System.Reflection.PropertyInfo)", file="OptionInfo.cs", label="_attribute = attribute", span="61-61"];
m23_42 [cluster="System.Convert.ChangeType(object, System.Type, System.IFormatProvider)", file="OptionInfo.cs", label="Entry System.Convert.ChangeType(object, System.Type, System.IFormatProvider)", span="0-0"];
m23_17 [cluster="CommandLine.Internal.OptionInfo.SetValue(string, object)", file="OptionInfo.cs", label="Entry CommandLine.Internal.OptionInfo.SetValue(string, object)", span="74-74"];
m23_21 [cluster="CommandLine.Internal.OptionInfo.SetValue(string, object)", color=green, community=0, file="OptionInfo.cs", label="return _propertyWriter.WriteNullable(value, options);", prediction=7, span="83-83"];
m23_20 [cluster="CommandLine.Internal.OptionInfo.SetValue(string, object)", file="OptionInfo.cs", label="ReflectionUtil.IsNullableType(_property.PropertyType)", span="80-80"];
m23_22 [cluster="CommandLine.Internal.OptionInfo.SetValue(string, object)", color=green, community=0, file="OptionInfo.cs", label="return _propertyWriter.WriteScalar(value, options);", prediction=7, span="86-86"];
m23_18 [cluster="CommandLine.Internal.OptionInfo.SetValue(string, object)", file="OptionInfo.cs", label="_attribute is OptionListAttribute", span="76-76"];
m23_19 [cluster="CommandLine.Internal.OptionInfo.SetValue(string, object)", file="OptionInfo.cs", label="return SetValueList(value, options);", span="78-78"];
m23_23 [cluster="CommandLine.Internal.OptionInfo.SetValue(string, object)", file="OptionInfo.cs", label="Exit CommandLine.Internal.OptionInfo.SetValue(string, object)", span="74-74"];
m23_12 [cluster="CommandLine.Internal.OptionInfo.OptionInfo(CommandLine.BaseOptionAttribute, System.Reflection.PropertyInfo)", file="OptionInfo.cs", label="_property = property", span="62-62"];
m23_16 [cluster="CommandLine.Internal.PropertyWriter.PropertyWriter(System.Reflection.PropertyInfo)", file="OptionInfo.cs", label="Entry CommandLine.Internal.PropertyWriter.PropertyWriter(System.Reflection.PropertyInfo)", span="45-45"];
m23_45 [cluster="CommandLine.Internal.OptionInfo.SetValue(bool, object)", file="OptionInfo.cs", label="Entry CommandLine.Internal.OptionInfo.SetValue(bool, object)", span="109-109"];
m23_46 [cluster="CommandLine.Internal.OptionInfo.SetValue(bool, object)", file="OptionInfo.cs", label="_property.SetValue(options, value, null)", span="111-111"];
m23_47 [cluster="CommandLine.Internal.OptionInfo.SetValue(bool, object)", file="OptionInfo.cs", label="return true;", span="112-112"];
m23_48 [cluster="CommandLine.Internal.OptionInfo.SetValue(bool, object)", file="OptionInfo.cs", label="Exit CommandLine.Internal.OptionInfo.SetValue(bool, object)", span="109-109"];
m23_13 [cluster="CommandLine.Internal.OptionInfo.OptionInfo(CommandLine.BaseOptionAttribute, System.Reflection.PropertyInfo)", color=green, community=0, file="OptionInfo.cs", label="CommandLine.Tests.Unit.Infrastructure.ArgumentParserFixture", prediction=7, span=""];
m23_8 [cluster="CommandLine.Parsing.StringArrayEnumerator.MoveNext()", file="OptionInfo.cs", label="Entry CommandLine.Parsing.StringArrayEnumerator.MoveNext()", span="93-93"];
m23_9 [cluster="CommandLine.Parsing.ArgumentParser.InternalWrapperOfGetNextInputValues(CommandLine.Parsing.IArgumentEnumerator)", file="OptionInfo.cs", label="Entry CommandLine.Parsing.ArgumentParser.InternalWrapperOfGetNextInputValues(CommandLine.Parsing.IArgumentEnumerator)", span="106-106"];
m23_10 [cluster="CommandLine.Tests.Unit.BaseFixture.ElementsShouldBeEqual(string[], System.Collections.Generic.IList<string>)", file="OptionInfo.cs", label="Entry CommandLine.Tests.Unit.BaseFixture.ElementsShouldBeEqual(string[], System.Collections.Generic.IList<string>)", span="47-47"];
m23_14 [cluster="CommandLine.Internal.OptionInfo.OptionInfo(CommandLine.BaseOptionAttribute, System.Reflection.PropertyInfo)", file="OptionInfo.cs", label="Exit CommandLine.Internal.OptionInfo.OptionInfo(CommandLine.BaseOptionAttribute, System.Reflection.PropertyInfo)", span="45-45"];
m23_59 [cluster="System.Collections.Generic.ICollection<T>.Add(T)", file="OptionInfo.cs", label="Entry System.Collections.Generic.ICollection<T>.Add(T)", span="0-0"];
m23_75 [cluster="System.Activator.CreateInstance(System.Type)", file="OptionInfo.cs", label="Entry System.Activator.CreateInstance(System.Type)", span="0-0"];
m23_40 [cluster="System.Type.GetElementType()", file="OptionInfo.cs", label="Entry System.Type.GetElementType()", span="0-0"];
m23_56 [cluster="System.Collections.Generic.List<T>.List()", file="OptionInfo.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m23_15 [cluster="System.ArgumentNullException.ArgumentNullException(string, string)", file="OptionInfo.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string, string)", span="0-0"];
m23_60 [cluster="CommandLine.Internal.OptionInfo.SetDefault(object)", file="OptionInfo.cs", label="Entry CommandLine.Internal.OptionInfo.SetDefault(object)", span="127-127"];
m23_61 [cluster="CommandLine.Internal.OptionInfo.SetDefault(object)", file="OptionInfo.cs", label=_hasDefaultValue, span="129-129"];
m23_62 [cluster="CommandLine.Internal.OptionInfo.SetDefault(object)", file="OptionInfo.cs", label="_property.SetValue(options, _defaultValue, null)", span="133-133"];
m23_63 [cluster="CommandLine.Internal.OptionInfo.SetDefault(object)", file="OptionInfo.cs", label=Exception, span="135-135"];
m23_64 [cluster="CommandLine.Internal.OptionInfo.SetDefault(object)", file="OptionInfo.cs", label="throw new CommandLineParserException(''Bad default value.'', e);", span="137-137"];
m23_65 [cluster="CommandLine.Internal.OptionInfo.SetDefault(object)", file="OptionInfo.cs", label="Exit CommandLine.Internal.OptionInfo.SetDefault(object)", span="127-127"];
m23_24 [cluster="CommandLine.Internal.OptionInfo.SetValueList(string, object)", file="OptionInfo.cs", label="Entry CommandLine.Internal.OptionInfo.SetValueList(string, object)", span="115-115"];
m23_53 [cluster="CommandLine.Internal.OptionInfo.SetValueList(string, object)", color=green, community=0, file="OptionInfo.cs", label="fieldRef.Add(item)", prediction=10, span="122-122"];
m23_50 [cluster="CommandLine.Internal.OptionInfo.SetValueList(string, object)", file="OptionInfo.cs", label="var fieldRef = (IList<string>)_property.GetValue(options, null)", span="118-118"];
m23_52 [cluster="CommandLine.Internal.OptionInfo.SetValueList(string, object)", color=green, community=0, file="OptionInfo.cs", label=values, prediction=11, span="120-120"];
m23_51 [cluster="CommandLine.Internal.OptionInfo.SetValueList(string, object)", file="OptionInfo.cs", label="var values = value.Split(((OptionListAttribute)_attribute).Separator)", span="119-119"];
m23_54 [cluster="CommandLine.Internal.OptionInfo.SetValueList(string, object)", file="OptionInfo.cs", label="return true;", span="124-124"];
m23_49 [cluster="CommandLine.Internal.OptionInfo.SetValueList(string, object)", file="OptionInfo.cs", label="_property.SetValue(options, new List<string>(), null)", span="117-117"];
m23_55 [cluster="CommandLine.Internal.OptionInfo.SetValueList(string, object)", file="OptionInfo.cs", label="Exit CommandLine.Internal.OptionInfo.SetValueList(string, object)", span="115-115"];
m23_28 [cluster="CommandLine.Internal.OptionInfo.SetValue(System.Collections.Generic.IList<string>, object)", file="OptionInfo.cs", label="Entry CommandLine.Internal.OptionInfo.SetValue(System.Collections.Generic.IList<string>, object)", span="89-89"];
m23_29 [cluster="CommandLine.Internal.OptionInfo.SetValue(System.Collections.Generic.IList<string>, object)", file="OptionInfo.cs", label="var elementType = _property.PropertyType.GetElementType()", span="91-91"];
m23_34 [cluster="CommandLine.Internal.OptionInfo.SetValue(System.Collections.Generic.IList<string>, object)", file="OptionInfo.cs", label="_property.SetValue(options, array, null)", span="99-99"];
m23_30 [cluster="CommandLine.Internal.OptionInfo.SetValue(System.Collections.Generic.IList<string>, object)", file="OptionInfo.cs", label="var array = Array.CreateInstance(elementType, values.Count)", span="92-92"];
m23_33 [cluster="CommandLine.Internal.OptionInfo.SetValue(System.Collections.Generic.IList<string>, object)", file="OptionInfo.cs", label="array.SetValue(Convert.ChangeType(values[i], elementType, Thread.CurrentThread.CurrentCulture), i)", span="98-98"];
m23_35 [cluster="CommandLine.Internal.OptionInfo.SetValue(System.Collections.Generic.IList<string>, object)", file="OptionInfo.cs", label=FormatException, span="101-101"];
m23_37 [cluster="CommandLine.Internal.OptionInfo.SetValue(System.Collections.Generic.IList<string>, object)", file="OptionInfo.cs", label="i++", span="94-94"];
m23_38 [cluster="CommandLine.Internal.OptionInfo.SetValue(System.Collections.Generic.IList<string>, object)", file="OptionInfo.cs", label="return true;", span="106-106"];
m23_36 [cluster="CommandLine.Internal.OptionInfo.SetValue(System.Collections.Generic.IList<string>, object)", file="OptionInfo.cs", label="return false;", span="103-103"];
m23_31 [cluster="CommandLine.Internal.OptionInfo.SetValue(System.Collections.Generic.IList<string>, object)", file="OptionInfo.cs", label="int i = 0", span="94-94"];
m23_32 [cluster="CommandLine.Internal.OptionInfo.SetValue(System.Collections.Generic.IList<string>, object)", file="OptionInfo.cs", label="i < array.Length", span="94-94"];
m23_39 [cluster="CommandLine.Internal.OptionInfo.SetValue(System.Collections.Generic.IList<string>, object)", file="OptionInfo.cs", label="Exit CommandLine.Internal.OptionInfo.SetValue(System.Collections.Generic.IList<string>, object)", span="89-89"];
m23_57 [cluster="System.Reflection.PropertyInfo.GetValue(object, object[])", file="OptionInfo.cs", label="Entry System.Reflection.PropertyInfo.GetValue(object, object[])", span="0-0"];
m23_76 [file="OptionInfo.cs", label="CommandLine.Internal.OptionInfo", span=""];
m24_17 [cluster="CommandLine.Internal.OptionMap.Create(object, CommandLine.CommandLineParserSettings)", file="OptionMap.cs", label="Entry CommandLine.Internal.OptionMap.Create(object, CommandLine.CommandLineParserSettings)", span="79-79"];
m24_18 [cluster="CommandLine.Internal.OptionMap.Create(object, CommandLine.CommandLineParserSettings)", file="OptionMap.cs", label="var list = ReflectionUtil.RetrievePropertyList<BaseOptionAttribute>(target)", span="81-81"];
m24_21 [cluster="CommandLine.Internal.OptionMap.Create(object, CommandLine.CommandLineParserSettings)", file="OptionMap.cs", label="var map = new OptionMap(list.Count, settings)", span="86-86"];
m24_25 [cluster="CommandLine.Internal.OptionMap.Create(object, CommandLine.CommandLineParserSettings)", file="OptionMap.cs", label="map.RawOptions = target", span="94-94"];
m24_19 [cluster="CommandLine.Internal.OptionMap.Create(object, CommandLine.CommandLineParserSettings)", file="OptionMap.cs", label="list == null", span="82-82"];
m24_22 [cluster="CommandLine.Internal.OptionMap.Create(object, CommandLine.CommandLineParserSettings)", file="OptionMap.cs", label=list, span="87-87"];
m24_20 [cluster="CommandLine.Internal.OptionMap.Create(object, CommandLine.CommandLineParserSettings)", file="OptionMap.cs", label="return null;", span="84-84"];
m24_24 [cluster="CommandLine.Internal.OptionMap.Create(object, CommandLine.CommandLineParserSettings)", file="OptionMap.cs", label="map[pair.Right.UniqueName] = new OptionInfo(pair.Right, pair.Left)", span="91-91"];
m24_26 [cluster="CommandLine.Internal.OptionMap.Create(object, CommandLine.CommandLineParserSettings)", file="OptionMap.cs", label="return map;", span="95-95"];
m24_23 [cluster="CommandLine.Internal.OptionMap.Create(object, CommandLine.CommandLineParserSettings)", file="OptionMap.cs", label="pair.Left != null && pair.Right != null", span="89-89"];
m24_27 [cluster="CommandLine.Internal.OptionMap.Create(object, CommandLine.CommandLineParserSettings)", file="OptionMap.cs", label="Exit CommandLine.Internal.OptionMap.Create(object, CommandLine.CommandLineParserSettings)", span="79-79"];
m24_49 [cluster="CommandLine.Internal.OptionMap.SetDefaults()", file="OptionMap.cs", label="Entry CommandLine.Internal.OptionMap.SetDefaults()", span="158-158"];
m24_50 [cluster="CommandLine.Internal.OptionMap.SetDefaults()", file="OptionMap.cs", label="_map.Values", span="160-160"];
m24_51 [cluster="CommandLine.Internal.OptionMap.SetDefaults()", file="OptionMap.cs", label="option.SetDefault(RawOptions)", span="162-162"];
m24_52 [cluster="CommandLine.Internal.OptionMap.SetDefaults()", file="OptionMap.cs", label="Exit CommandLine.Internal.OptionMap.SetDefaults()", span="158-158"];
m24_28 [cluster="CommandLine.Internal.ReflectionUtil.RetrievePropertyList<TAttribute>(object)", file="OptionMap.cs", label="Entry CommandLine.Internal.ReflectionUtil.RetrievePropertyList<TAttribute>(object)", span="43-43"];
m24_42 [cluster="CommandLine.CommandLineParserException.CommandLineParserException(string)", file="OptionMap.cs", label="Entry CommandLine.CommandLineParserException.CommandLineParserException(string)", span="52-52"];
m24_48 [cluster="CommandLine.Internal.OptionMap.EnforceRequiredRule()", file="OptionMap.cs", label="Entry CommandLine.Internal.OptionMap.EnforceRequiredRule()", span="166-166"];
m24_54 [cluster="CommandLine.Internal.OptionMap.EnforceRequiredRule()", file="OptionMap.cs", label="bool requiredRulesAllMet = true", span="168-168"];
m24_55 [cluster="CommandLine.Internal.OptionMap.EnforceRequiredRule()", file="OptionMap.cs", label="_map.Values", span="169-169"];
m24_59 [cluster="CommandLine.Internal.OptionMap.EnforceRequiredRule()", file="OptionMap.cs", label="return requiredRulesAllMet;", span="177-177"];
m24_56 [cluster="CommandLine.Internal.OptionMap.EnforceRequiredRule()", file="OptionMap.cs", label="option.Required && !option.IsDefined", span="171-171"];
m24_57 [cluster="CommandLine.Internal.OptionMap.EnforceRequiredRule()", file="OptionMap.cs", label="SetParserStateIfNeeded(RawOptions, option, true, null)", span="173-173"];
m24_58 [cluster="CommandLine.Internal.OptionMap.EnforceRequiredRule()", file="OptionMap.cs", label="requiredRulesAllMet = false", span="174-174"];
m24_60 [cluster="CommandLine.Internal.OptionMap.EnforceRequiredRule()", file="OptionMap.cs", label="Exit CommandLine.Internal.OptionMap.EnforceRequiredRule()", span="166-166"];
m24_8 [cluster="CommandLine.Internal.OptionMap.OptionMap(int, CommandLine.CommandLineParserSettings)", file="OptionMap.cs", label="Entry CommandLine.Internal.OptionMap.OptionMap(int, CommandLine.CommandLineParserSettings)", span="62-62"];
m24_9 [cluster="CommandLine.Internal.OptionMap.OptionMap(int, CommandLine.CommandLineParserSettings)", file="OptionMap.cs", label="_settings = settings", span="67-67"];
m24_11 [cluster="CommandLine.Internal.OptionMap.OptionMap(int, CommandLine.CommandLineParserSettings)", file="OptionMap.cs", label="_names = new Dictionary<string, string>(capacity, comparer)", span="71-71"];
m24_12 [cluster="CommandLine.Internal.OptionMap.OptionMap(int, CommandLine.CommandLineParserSettings)", file="OptionMap.cs", label="_map = new Dictionary<string, OptionInfo>(capacity * 2, comparer)", span="72-72"];
m24_14 [cluster="CommandLine.Internal.OptionMap.OptionMap(int, CommandLine.CommandLineParserSettings)", file="OptionMap.cs", label="_mutuallyExclusiveSetMap = new Dictionary<string, MutuallyExclusiveInfo>(capacity, StringComparer.OrdinalIgnoreCase)", span="75-75"];
m24_10 [cluster="CommandLine.Internal.OptionMap.OptionMap(int, CommandLine.CommandLineParserSettings)", file="OptionMap.cs", label="IEqualityComparer<string> comparer =\r\n                _settings.CaseSensitive ? StringComparer.Ordinal : StringComparer.OrdinalIgnoreCase", span="69-70"];
m24_13 [cluster="CommandLine.Internal.OptionMap.OptionMap(int, CommandLine.CommandLineParserSettings)", file="OptionMap.cs", label="_settings.MutuallyExclusive", span="73-73"];
m24_15 [cluster="CommandLine.Internal.OptionMap.OptionMap(int, CommandLine.CommandLineParserSettings)", file="OptionMap.cs", label="Exit CommandLine.Internal.OptionMap.OptionMap(int, CommandLine.CommandLineParserSettings)", span="62-62"];
m24_98 [cluster="System.Reflection.PropertyInfo.SetValue(object, object, object[])", file="OptionMap.cs", label="Entry System.Reflection.PropertyInfo.SetValue(object, object, object[])", span="0-0"];
m24_79 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", file="OptionMap.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0"];
m24_2 [cluster="CommandLine.Internal.OptionMap.MutuallyExclusiveInfo.MutuallyExclusiveInfo(CommandLine.Internal.OptionInfo)", file="OptionMap.cs", label="Entry CommandLine.Internal.OptionMap.MutuallyExclusiveInfo.MutuallyExclusiveInfo(CommandLine.Internal.OptionInfo)", span="47-47"];
m24_3 [cluster="CommandLine.Internal.OptionMap.MutuallyExclusiveInfo.MutuallyExclusiveInfo(CommandLine.Internal.OptionInfo)", file="OptionMap.cs", label="BadOption = option", span="49-49"];
m24_4 [cluster="CommandLine.Internal.OptionMap.MutuallyExclusiveInfo.MutuallyExclusiveInfo(CommandLine.Internal.OptionInfo)", file="OptionMap.cs", label="Exit CommandLine.Internal.OptionMap.MutuallyExclusiveInfo.MutuallyExclusiveInfo(CommandLine.Internal.OptionInfo)", span="47-47"];
m24_73 [cluster="CommandLine.Internal.OptionMap.BuildMutuallyExclusiveMap(CommandLine.Internal.OptionInfo)", file="OptionMap.cs", label="Entry CommandLine.Internal.OptionMap.BuildMutuallyExclusiveMap(CommandLine.Internal.OptionInfo)", span="204-204"];
m24_74 [cluster="CommandLine.Internal.OptionMap.BuildMutuallyExclusiveMap(CommandLine.Internal.OptionInfo)", file="OptionMap.cs", label="var setName = option.MutuallyExclusiveSet", span="206-206"];
m24_76 [cluster="CommandLine.Internal.OptionMap.BuildMutuallyExclusiveMap(CommandLine.Internal.OptionInfo)", file="OptionMap.cs", label="_mutuallyExclusiveSetMap.Add(setName, new MutuallyExclusiveInfo(option))", span="209-209"];
m24_75 [cluster="CommandLine.Internal.OptionMap.BuildMutuallyExclusiveMap(CommandLine.Internal.OptionInfo)", file="OptionMap.cs", label="!_mutuallyExclusiveSetMap.ContainsKey(setName)", span="207-207"];
m24_77 [cluster="CommandLine.Internal.OptionMap.BuildMutuallyExclusiveMap(CommandLine.Internal.OptionInfo)", file="OptionMap.cs", label="_mutuallyExclusiveSetMap[setName].IncrementOccurrence()", span="211-211"];
m24_78 [cluster="CommandLine.Internal.OptionMap.BuildMutuallyExclusiveMap(CommandLine.Internal.OptionInfo)", file="OptionMap.cs", label="Exit CommandLine.Internal.OptionMap.BuildMutuallyExclusiveMap(CommandLine.Internal.OptionInfo)", span="204-204"];
m24_61 [cluster="CommandLine.Internal.OptionMap.SetParserStateIfNeeded(object, CommandLine.Internal.OptionInfo, bool?, bool?)", file="OptionMap.cs", label="Entry CommandLine.Internal.OptionMap.SetParserStateIfNeeded(object, CommandLine.Internal.OptionInfo, bool?, bool?)", span="214-214"];
m24_81 [cluster="CommandLine.Internal.OptionMap.SetParserStateIfNeeded(object, CommandLine.Internal.OptionInfo, bool?, bool?)", file="OptionMap.cs", label="var list = ReflectionUtil.RetrievePropertyList<ParserStateAttribute>(options)", span="216-216"];
m24_85 [cluster="CommandLine.Internal.OptionMap.SetParserStateIfNeeded(object, CommandLine.Internal.OptionInfo, bool?, bool?)", file="OptionMap.cs", label="property.GetValue(options, null) == null", span="223-223"];
m24_86 [cluster="CommandLine.Internal.OptionMap.SetParserStateIfNeeded(object, CommandLine.Internal.OptionInfo, bool?, bool?)", file="OptionMap.cs", label="property.SetValue(options, new CommandLine.ParserState(), null)", span="225-225"];
m24_87 [cluster="CommandLine.Internal.OptionMap.SetParserStateIfNeeded(object, CommandLine.Internal.OptionInfo, bool?, bool?)", file="OptionMap.cs", label="var parserState = (IParserState)property.GetValue(options, null)", span="227-227"];
m24_90 [cluster="CommandLine.Internal.OptionMap.SetParserStateIfNeeded(object, CommandLine.Internal.OptionInfo, bool?, bool?)", file="OptionMap.cs", label="var error = new ParsingError\r\n                {\r\n                    BadOption =\r\n                        {\r\n                            ShortName = option.ShortName,\r\n                            LongName = option.LongName\r\n                        }\r\n                }", span="232-239"];
m24_91 [cluster="CommandLine.Internal.OptionMap.SetParserStateIfNeeded(object, CommandLine.Internal.OptionInfo, bool?, bool?)", file="OptionMap.cs", label="required != null", span="240-240"];
m24_92 [cluster="CommandLine.Internal.OptionMap.SetParserStateIfNeeded(object, CommandLine.Internal.OptionInfo, bool?, bool?)", file="OptionMap.cs", label="error.ViolatesRequired = required.Value", span="240-240"];
m24_93 [cluster="CommandLine.Internal.OptionMap.SetParserStateIfNeeded(object, CommandLine.Internal.OptionInfo, bool?, bool?)", file="OptionMap.cs", label="mutualExclusiveness != null", span="241-241"];
m24_94 [cluster="CommandLine.Internal.OptionMap.SetParserStateIfNeeded(object, CommandLine.Internal.OptionInfo, bool?, bool?)", file="OptionMap.cs", label="error.ViolatesMutualExclusiveness = mutualExclusiveness.Value", span="241-241"];
m24_82 [cluster="CommandLine.Internal.OptionMap.SetParserStateIfNeeded(object, CommandLine.Internal.OptionInfo, bool?, bool?)", file="OptionMap.cs", label="list.Count == 0", span="217-217"];
m24_84 [cluster="CommandLine.Internal.OptionMap.SetParserStateIfNeeded(object, CommandLine.Internal.OptionInfo, bool?, bool?)", file="OptionMap.cs", label="var property = list[0].Left", span="221-221"];
m24_83 [cluster="CommandLine.Internal.OptionMap.SetParserStateIfNeeded(object, CommandLine.Internal.OptionInfo, bool?, bool?)", file="OptionMap.cs", label="return;", span="219-219"];
m24_88 [cluster="CommandLine.Internal.OptionMap.SetParserStateIfNeeded(object, CommandLine.Internal.OptionInfo, bool?, bool?)", file="OptionMap.cs", label="parserState == null", span="228-228"];
m24_95 [cluster="CommandLine.Internal.OptionMap.SetParserStateIfNeeded(object, CommandLine.Internal.OptionInfo, bool?, bool?)", file="OptionMap.cs", label="parserState.Errors.Add(error)", span="242-242"];
m24_89 [cluster="CommandLine.Internal.OptionMap.SetParserStateIfNeeded(object, CommandLine.Internal.OptionInfo, bool?, bool?)", file="OptionMap.cs", label="return;", span="230-230"];
m24_96 [cluster="CommandLine.Internal.OptionMap.SetParserStateIfNeeded(object, CommandLine.Internal.OptionInfo, bool?, bool?)", file="OptionMap.cs", label="Exit CommandLine.Internal.OptionMap.SetParserStateIfNeeded(object, CommandLine.Internal.OptionInfo, bool?, bool?)", span="214-214"];
m24_29 [cluster="CommandLine.Internal.OptionInfo.OptionInfo(CommandLine.BaseOptionAttribute, System.Reflection.PropertyInfo)", file="OptionMap.cs", label="Entry CommandLine.Internal.OptionInfo.OptionInfo(CommandLine.BaseOptionAttribute, System.Reflection.PropertyInfo)", span="43-43"];
m24_30 [cluster="CommandLine.Internal.OptionMap.Create(object, System.Collections.Generic.IList<CommandLine.Internal.Pair<System.Reflection.PropertyInfo, CommandLine.VerbOptionAttribute>>, CommandLine.CommandLineParserSettings)", file="OptionMap.cs", label="Entry CommandLine.Internal.OptionMap.Create(object, System.Collections.Generic.IList<CommandLine.Internal.Pair<System.Reflection.PropertyInfo, CommandLine.VerbOptionAttribute>>, CommandLine.CommandLineParserSettings)", span="98-98"];
m24_31 [cluster="CommandLine.Internal.OptionMap.Create(object, System.Collections.Generic.IList<CommandLine.Internal.Pair<System.Reflection.PropertyInfo, CommandLine.VerbOptionAttribute>>, CommandLine.CommandLineParserSettings)", file="OptionMap.cs", label="var map = new OptionMap(verbs.Count, settings)", span="101-101"];
m24_32 [cluster="CommandLine.Internal.OptionMap.Create(object, System.Collections.Generic.IList<CommandLine.Internal.Pair<System.Reflection.PropertyInfo, CommandLine.VerbOptionAttribute>>, CommandLine.CommandLineParserSettings)", file="OptionMap.cs", label=verbs, span="102-102"];
m24_34 [cluster="CommandLine.Internal.OptionMap.Create(object, System.Collections.Generic.IList<CommandLine.Internal.Pair<System.Reflection.PropertyInfo, CommandLine.VerbOptionAttribute>>, CommandLine.CommandLineParserSettings)", file="OptionMap.cs", label="!optionInfo.HasParameterLessCtor && verb.Left.GetValue(target, null) == null", span="109-109"];
m24_37 [cluster="CommandLine.Internal.OptionMap.Create(object, System.Collections.Generic.IList<CommandLine.Internal.Pair<System.Reflection.PropertyInfo, CommandLine.VerbOptionAttribute>>, CommandLine.CommandLineParserSettings)", file="OptionMap.cs", label="map.RawOptions = target", span="116-116"];
m24_36 [cluster="CommandLine.Internal.OptionMap.Create(object, System.Collections.Generic.IList<CommandLine.Internal.Pair<System.Reflection.PropertyInfo, CommandLine.VerbOptionAttribute>>, CommandLine.CommandLineParserSettings)", file="OptionMap.cs", label="map[verb.Right.UniqueName] = optionInfo", span="114-114"];
m24_38 [cluster="CommandLine.Internal.OptionMap.Create(object, System.Collections.Generic.IList<CommandLine.Internal.Pair<System.Reflection.PropertyInfo, CommandLine.VerbOptionAttribute>>, CommandLine.CommandLineParserSettings)", file="OptionMap.cs", label="return map;", span="117-117"];
m24_33 [cluster="CommandLine.Internal.OptionMap.Create(object, System.Collections.Generic.IList<CommandLine.Internal.Pair<System.Reflection.PropertyInfo, CommandLine.VerbOptionAttribute>>, CommandLine.CommandLineParserSettings)", file="OptionMap.cs", label="var optionInfo = new OptionInfo(verb.Right, verb.Left)\r\n                {\r\n                    HasParameterLessCtor = verb.Left.PropertyType.GetConstructor(Type.EmptyTypes) != null\r\n\r\n                }", span="104-108"];
m24_35 [cluster="CommandLine.Internal.OptionMap.Create(object, System.Collections.Generic.IList<CommandLine.Internal.Pair<System.Reflection.PropertyInfo, CommandLine.VerbOptionAttribute>>, CommandLine.CommandLineParserSettings)", file="OptionMap.cs", label="throw new CommandLineParserException(''Type {0} must have a parameterless constructor or'' +\r\n                        '' be already initialized to be used as a verb command.''.FormatInvariant(verb.Left.PropertyType));", span="111-112"];
m24_39 [cluster="CommandLine.Internal.OptionMap.Create(object, System.Collections.Generic.IList<CommandLine.Internal.Pair<System.Reflection.PropertyInfo, CommandLine.VerbOptionAttribute>>, CommandLine.CommandLineParserSettings)", file="OptionMap.cs", label="Exit CommandLine.Internal.OptionMap.Create(object, System.Collections.Generic.IList<CommandLine.Internal.Pair<System.Reflection.PropertyInfo, CommandLine.VerbOptionAttribute>>, CommandLine.CommandLineParserSettings)", span="98-98"];
m24_44 [cluster="CommandLine.Internal.OptionMap.EnforceRules()", file="OptionMap.cs", label="Entry CommandLine.Internal.OptionMap.EnforceRules()", span="153-153"];
m24_45 [cluster="CommandLine.Internal.OptionMap.EnforceRules()", file="OptionMap.cs", label="return EnforceMutuallyExclusiveMap() && EnforceRequiredRule();", span="155-155"];
m24_46 [cluster="CommandLine.Internal.OptionMap.EnforceRules()", file="OptionMap.cs", label="Exit CommandLine.Internal.OptionMap.EnforceRules()", span="153-153"];
m24_100 [cluster="System.Collections.Generic.ICollection<T>.Add(T)", file="OptionMap.cs", label="Entry System.Collections.Generic.ICollection<T>.Add(T)", span="0-0"];
m24_0 [cluster="CommandLine.Internal.OptionMap.MutuallyExclusiveInfo.MutuallyExclusiveInfo()", file="OptionMap.cs", label="Entry CommandLine.Internal.OptionMap.MutuallyExclusiveInfo.MutuallyExclusiveInfo()", span="45-45"];
m24_1 [cluster="CommandLine.Internal.OptionMap.MutuallyExclusiveInfo.MutuallyExclusiveInfo()", file="OptionMap.cs", label="Exit CommandLine.Internal.OptionMap.MutuallyExclusiveInfo.MutuallyExclusiveInfo()", span="45-45"];
m24_40 [cluster="System.Type.GetConstructor(System.Type[])", file="OptionMap.cs", label="Entry System.Type.GetConstructor(System.Type[])", span="0-0"];
m24_47 [cluster="CommandLine.Internal.OptionMap.EnforceMutuallyExclusiveMap()", file="OptionMap.cs", label="Entry CommandLine.Internal.OptionMap.EnforceMutuallyExclusiveMap()", span="180-180"];
m24_62 [cluster="CommandLine.Internal.OptionMap.EnforceMutuallyExclusiveMap()", file="OptionMap.cs", label="!_settings.MutuallyExclusive", span="182-182"];
m24_63 [cluster="CommandLine.Internal.OptionMap.EnforceMutuallyExclusiveMap()", file="OptionMap.cs", label="return true;", span="184-184"];
m24_64 [cluster="CommandLine.Internal.OptionMap.EnforceMutuallyExclusiveMap()", file="OptionMap.cs", label="_map.Values", span="186-186"];
m24_65 [cluster="CommandLine.Internal.OptionMap.EnforceMutuallyExclusiveMap()", file="OptionMap.cs", label="option.IsDefined && option.MutuallyExclusiveSet != null", span="188-188"];
m24_67 [cluster="CommandLine.Internal.OptionMap.EnforceMutuallyExclusiveMap()", file="OptionMap.cs", label="_mutuallyExclusiveSetMap.Values", span="193-193"];
m24_66 [cluster="CommandLine.Internal.OptionMap.EnforceMutuallyExclusiveMap()", file="OptionMap.cs", label="BuildMutuallyExclusiveMap(option)", span="190-190"];
m24_68 [cluster="CommandLine.Internal.OptionMap.EnforceMutuallyExclusiveMap()", file="OptionMap.cs", label="info.Occurrence > 1", span="195-195"];
m24_71 [cluster="CommandLine.Internal.OptionMap.EnforceMutuallyExclusiveMap()", file="OptionMap.cs", label="return true;", span="201-201"];
m24_69 [cluster="CommandLine.Internal.OptionMap.EnforceMutuallyExclusiveMap()", file="OptionMap.cs", label="SetParserStateIfNeeded(RawOptions, info.BadOption, null, true)", span="197-197"];
m24_70 [cluster="CommandLine.Internal.OptionMap.EnforceMutuallyExclusiveMap()", file="OptionMap.cs", label="return false;", span="198-198"];
m24_72 [cluster="CommandLine.Internal.OptionMap.EnforceMutuallyExclusiveMap()", file="OptionMap.cs", label="Exit CommandLine.Internal.OptionMap.EnforceMutuallyExclusiveMap()", span="180-180"];
m24_53 [cluster="CommandLine.Internal.OptionInfo.SetDefault(object)", file="OptionMap.cs", label="Entry CommandLine.Internal.OptionInfo.SetDefault(object)", span="160-160"];
m24_97 [cluster="CommandLine.ParserState.ParserState()", file="OptionMap.cs", label="Entry CommandLine.ParserState.ParserState()", span="47-47"];
m24_99 [cluster="CommandLine.ParsingError.ParsingError()", file="OptionMap.cs", label="Entry CommandLine.ParsingError.ParsingError()", span="47-47"];
m24_43 [cluster="string.FormatInvariant(params object[])", file="OptionMap.cs", label="Entry string.FormatInvariant(params object[])", span="58-58"];
m24_41 [cluster="System.Reflection.PropertyInfo.GetValue(object, object[])", file="OptionMap.cs", label="Entry System.Reflection.PropertyInfo.GetValue(object, object[])", span="0-0"];
m24_80 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", file="OptionMap.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0"];
m24_5 [cluster="CommandLine.Internal.OptionMap.MutuallyExclusiveInfo.IncrementOccurrence()", file="OptionMap.cs", label="Entry CommandLine.Internal.OptionMap.MutuallyExclusiveInfo.IncrementOccurrence()", span="54-54"];
m24_6 [cluster="CommandLine.Internal.OptionMap.MutuallyExclusiveInfo.IncrementOccurrence()", file="OptionMap.cs", label="++_count", span="54-54"];
m24_7 [cluster="CommandLine.Internal.OptionMap.MutuallyExclusiveInfo.IncrementOccurrence()", file="OptionMap.cs", label="Exit CommandLine.Internal.OptionMap.MutuallyExclusiveInfo.IncrementOccurrence()", span="54-54"];
m24_16 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(int, System.Collections.Generic.IEqualityComparer<TKey>)", file="OptionMap.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(int, System.Collections.Generic.IEqualityComparer<TKey>)", span="0-0"];
m24_101 [file="OptionMap.cs", label="CommandLine.Internal.OptionMap.MutuallyExclusiveInfo", span=""];
m24_102 [file="OptionMap.cs", label="CommandLine.Internal.OptionMap", span=""];
m25_6 [cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="Pair.cs", label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="71-71"];
m25_9 [cluster="CommandLine.Core.NameLookup.WithSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="Pair.cs", label="Entry CommandLine.Core.NameLookup.WithSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="19-19"];
m25_7 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", file="Pair.cs", label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", span="17-17"];
m25_0 [cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="Pair.cs", label="Entry CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", span="17-17"];
m25_1 [cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="Pair.cs", label="var expected = Maybe.Just(''.'')", span="20-20"];
m25_2 [cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="Pair.cs", label="var specs = new[] { new OptionSpecification(string.Empty, ''string-seq'',\r\n                false, string.Empty, -1, -1, '.', null, typeof(IEnumerable<string>), string.Empty, string.Empty, new List<string>())}", span="21-22"];
m25_4 [cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="Pair.cs", label="expected.ShouldBeEquivalentTo(result)", span="28-28"];
m25_3 [cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="Pair.cs", label="var result = NameLookup.WithSeparator(''string-seq'', specs, StringComparer.InvariantCulture)", span="25-25"];
m25_5 [cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="Pair.cs", label="Exit CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", span="17-17"];
m25_10 [cluster="Unk.ShouldBeEquivalentTo", file="Pair.cs", label="Entry Unk.ShouldBeEquivalentTo", span=""];
m25_8 [cluster="System.Collections.Generic.List<T>.List()", file="Pair.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m26_9 [cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="ParserContext.cs", label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63"];
m26_11 [cluster="System.Linq.Enumerable.Empty<TResult>()", file="ParserContext.cs", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
m26_13 [cluster="CommandLine.Core.StatePair.Create<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="ParserContext.cs", label="Entry CommandLine.Core.StatePair.Create<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="58-58"];
m26_21 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="ParserContext.cs", label="Entry CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", span="38-38"];
m26_22 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", color=green, community=0, file="ParserContext.cs", label="var expectedTokens = new[] { Token.Name(''x''), Token.Name(''string-seq''),\r\n                Token.Value(''aaa''), Token.Value(''bb''),  Token.Value(''cccc''), Token.Name(''switch'') }", prediction=12, span="41-42"];
m26_23 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", color=green, community=0, file="ParserContext.cs", label="var specs = new[] { new OptionSpecification(string.Empty, ''string-seq'',\r\n                false, string.Empty, Maybe.Nothing<int>(), Maybe.Nothing<int>(), ',', null, typeof(IEnumerable<string>), TargetType.Sequence, string.Empty, string.Empty, new List<string>())}", prediction=13, span="43-44"];
m26_25 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", color=green, community=0, file="ParserContext.cs", label="Assert.True(expectedTokens.SequenceEqual(result.Value))", prediction=12, span="56-56"];
m26_24 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", color=green, community=0, file="ParserContext.cs", label="var result =\r\n                Tokenizer.ExplodeOptionList(\r\n                    StatePair.Create(\r\n                        Enumerable.Empty<Token>().Concat(new[] { Token.Name(''x''),\r\n                            Token.Name(''string-seq''), Token.Value(''aaa,bb,cccc''), Token.Name(''switch'') }),\r\n                        Enumerable.Empty<Error>()),\r\n                        optionName => NameLookup.WithSeparator(optionName, specs, StringComparer.InvariantCulture))", prediction=15, span="47-53"];
m26_26 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="ParserContext.cs", label="Exit CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", span="38-38"];
m26_8 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, char, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType, string, string, System.Collections.Generic.IEnumerable<string>)", file="ParserContext.cs", label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, char, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType, string, string, System.Collections.Generic.IEnumerable<string>)", span="18-18"];
m26_20 [cluster="CommandLine.Core.NameLookup.WithSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="ParserContext.cs", label="Entry CommandLine.Core.NameLookup.WithSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="16-16"];
m26_16 [cluster="Unk.True", file="ParserContext.cs", label="Entry Unk.True", span=""];
m26_0 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="ParserContext.cs", label="Entry CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", span="14-14"];
m26_1 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", color=green, community=0, file="ParserContext.cs", label="var expectedTokens = new[] { Token.Name(''i''), Token.Value(''10''), Token.Name(''string-seq''),\r\n                Token.Value(''aaa''), Token.Value(''bb''),  Token.Value(''cccc''), Token.Name(''switch'') }", prediction=16, span="17-18"];
m26_2 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", color=green, community=0, file="ParserContext.cs", label="var specs = new[] { new OptionSpecification(string.Empty, ''string-seq'',\r\n                false, string.Empty, Maybe.Nothing<int>(), Maybe.Nothing<int>(), ',', null, typeof(IEnumerable<string>), TargetType.Sequence, string.Empty, string.Empty, new List<string>())}", prediction=17, span="19-20"];
m26_4 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", color=green, community=0, file="ParserContext.cs", label="Assert.True(expectedTokens.SequenceEqual(result.Value))", prediction=16, span="32-32"];
m26_3 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", color=green, community=0, file="ParserContext.cs", label="var result =\r\n                Tokenizer.ExplodeOptionList(\r\n                    StatePair.Create(\r\n                        Enumerable.Empty<Token>().Concat(new[] { Token.Name(''i''), Token.Value(''10''),\r\n                            Token.Name(''string-seq''), Token.Value(''aaa,bb,cccc''), Token.Name(''switch'') }),\r\n                        Enumerable.Empty<Error>()),\r\n                        optionName => NameLookup.WithSeparator(optionName, specs, StringComparer.InvariantCulture))", prediction=19, span="23-29"];
m26_5 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="ParserContext.cs", label="Exit CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", span="14-14"];
m26_27 [cluster="lambda expression", file="ParserContext.cs", label="Entry lambda expression", span="53-53"];
m26_18 [cluster="lambda expression", color=green, community=0, file="ParserContext.cs", label="NameLookup.WithSeparator(optionName, specs, StringComparer.InvariantCulture)", prediction=17, span="29-29"];
m26_17 [cluster="lambda expression", file="ParserContext.cs", label="Entry lambda expression", span="29-29"];
m26_19 [cluster="lambda expression", file="ParserContext.cs", label="Exit lambda expression", span="29-29"];
m26_28 [cluster="lambda expression", color=green, community=0, file="ParserContext.cs", label="NameLookup.WithSeparator(optionName, specs, StringComparer.InvariantCulture)", prediction=13, span="53-53"];
m26_29 [cluster="lambda expression", file="ParserContext.cs", label="Exit lambda expression", span="53-53"];
m26_6 [cluster="CommandLine.Core.Token.Name(string)", file="ParserContext.cs", label="Entry CommandLine.Core.Token.Name(string)", span="19-19"];
m26_15 [cluster="Unk.SequenceEqual", file="ParserContext.cs", label="Entry Unk.SequenceEqual", span=""];
m26_14 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CommandLine.Infrastructure.Maybe<char>>)", file="ParserContext.cs", label="Entry CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CommandLine.Infrastructure.Maybe<char>>)", span="44-44"];
m26_12 [cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="ParserContext.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0"];
m26_7 [cluster="CommandLine.Core.Token.Value(string)", file="ParserContext.cs", label="Entry CommandLine.Core.Token.Value(string)", span="24-24"];
m26_10 [cluster="System.Collections.Generic.List<T>.List()", file="ParserContext.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m26_30 [file="ParserContext.cs", label=specs, span=""];
m26_31 [file="ParserContext.cs", label=specs, span=""];
m27_0 [cluster="CommandLine.ParserState.ParserState()", file="ParserState.cs", label="Entry CommandLine.ParserState.ParserState()", span="47-47"];
m27_1 [cluster="CommandLine.ParserState.ParserState()", file="ParserState.cs", label="Errors = new List<ParsingError>()", span="49-49"];
m27_2 [cluster="CommandLine.ParserState.ParserState()", file="ParserState.cs", label="Exit CommandLine.ParserState.ParserState()", span="47-47"];
m27_3 [cluster="System.Collections.Generic.List<T>.List()", file="ParserState.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m27_4 [file="ParserState.cs", label="CommandLine.ParserState", span=""];
m31_40 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="ReflectionUtilFixture.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="111-111"];
m31_41 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="ReflectionUtilFixture.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="116-120"];
m31_42 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="ReflectionUtilFixture.cs", label="Assert.True(expected.SequenceEqual(result.Value.IntSequence))", span="123-123"];
m31_43 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", file="ReflectionUtilFixture.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="111-111"];
m31_150 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", file="ReflectionUtilFixture.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", span="9-9"];
m31_172 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ReflectionUtilFixture.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="33-33"];
m31_306 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="ReflectionUtilFixture.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="733-733"];
m31_307 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="ReflectionUtilFixture.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithScalarValueAndSequenceStringAdjacent(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="738-742"];
m31_308 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="ReflectionUtilFixture.cs", label="expected.ShouldBeEquivalentTo(result.Value)", span="745-745"];
m31_309 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", file="ReflectionUtilFixture.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_and_sequence_adjacent(string[], CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent)", span="733-733"];
m31_11 [cluster="Unk.True", file="ReflectionUtilFixture.cs", label="Entry Unk.True", span=""];
m31_159 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="ReflectionUtilFixture.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="406-406"];
m31_160 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="ReflectionUtilFixture.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndSeparator(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="411-415"];
m31_161 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="ReflectionUtilFixture.cs", label="expected.ShouldBeEquivalentTo(result.Value.StringSequence)", span="418-418"];
m31_162 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", file="ReflectionUtilFixture.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="406-406"];
m31_233 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="ReflectionUtilFixture.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="557-557"];
m31_234 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="ReflectionUtilFixture.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''i'', '''')) }", span="560-560"];
m31_235 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="ReflectionUtilFixture.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new [] { ''-i'', ''10'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="563-567"];
m31_236 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="ReflectionUtilFixture.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="570-570"];
m31_237 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", file="ReflectionUtilFixture.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="557-557"];
m31_274 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="ReflectionUtilFixture.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="653-653"];
m31_275 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="ReflectionUtilFixture.cs", label="var expectedResult = new[] { new MissingRequiredOptionError(NameInfo.EmptyName) }", span="656-656"];
m31_276 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="ReflectionUtilFixture.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithRequiredValue(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="659-663"];
m31_277 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="ReflectionUtilFixture.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="666-666"];
m31_278 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", file="ReflectionUtilFixture.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_required_constraint_in_string_scalar_as_value_generates_MissingRequiredOptionError()", span="653-653"];
m31_220 [cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="ReflectionUtilFixture.cs", label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="283-283"];
m31_82 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", file="ReflectionUtilFixture.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="9-9"];
m31_62 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", file="ReflectionUtilFixture.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="9-9"];
m31_151 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="ReflectionUtilFixture.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="384-384"];
m31_152 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="ReflectionUtilFixture.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndSeparator(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="389-393"];
m31_153 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="ReflectionUtilFixture.cs", label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="396-396"];
m31_154 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", file="ReflectionUtilFixture.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="384-384"];
m31_143 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="ReflectionUtilFixture.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="362-362"];
m31_144 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="ReflectionUtilFixture.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceWithoutRange(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="367-371"];
m31_145 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="ReflectionUtilFixture.cs", label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="374-374"];
m31_146 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", file="ReflectionUtilFixture.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="362-362"];
m31_241 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="ReflectionUtilFixture.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="576-576"];
m31_242 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="ReflectionUtilFixture.cs", label="var expectedResult = new[] { new UnknownOptionError(''xyz'') }", span="579-579"];
m31_243 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="ReflectionUtilFixture.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''--stringvalue'', ''abc'', ''--xyz'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="582-586"];
m31_244 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="ReflectionUtilFixture.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="589-589"];
m31_245 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", file="ReflectionUtilFixture.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="576-576"];
m31_55 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="ReflectionUtilFixture.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="156-156"];
m31_56 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="ReflectionUtilFixture.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraint(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="161-165"];
m31_57 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="ReflectionUtilFixture.cs", label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="168-168"];
m31_58 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", file="ReflectionUtilFixture.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="156-156"];
m31_54 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", file="ReflectionUtilFixture.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", span="9-9"];
m31_266 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="ReflectionUtilFixture.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="635-635"];
m31_267 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="ReflectionUtilFixture.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="640-644"];
m31_268 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="ReflectionUtilFixture.cs", label="Assert.True(expected.Equals(result.Value.StringValue))", span="647-647"];
m31_269 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", file="ReflectionUtilFixture.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="635-635"];
m31_207 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="ReflectionUtilFixture.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="499-499"];
m31_208 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="ReflectionUtilFixture.cs", label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = ''str2''\r\n            }", span="501-504"];
m31_209 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="ReflectionUtilFixture.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1'', ''--weburl'', ''str2'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="506-510"];
m31_210 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="ReflectionUtilFixture.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="513-513"];
m31_211 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", file="ReflectionUtilFixture.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="499-499"];
m31_187 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="ReflectionUtilFixture.cs", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11"];
m31_31 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="ReflectionUtilFixture.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="89-89"];
m31_32 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="ReflectionUtilFixture.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequence(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="94-98"];
m31_33 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="ReflectionUtilFixture.cs", label="Assert.True(expected.SequenceEqual(result.Value.IntSequence))", span="101-101"];
m31_34 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", file="ReflectionUtilFixture.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="89-89"];
m31_0 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="ReflectionUtilFixture.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="17-17"];
m31_1 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="ReflectionUtilFixture.cs", label="var fakeOptions = new FakeOptions()", span="20-20"];
m31_2 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="ReflectionUtilFixture.cs", label="var expectedResult = ParserResult.Create(\r\n                ParserResultType.Options,\r\n                fakeOptions, new Error[] { new HelpRequestedError() })", span="21-23"];
m31_3 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="ReflectionUtilFixture.cs", label="var result = InstanceBuilder.Build(\r\n                () => fakeOptions,\r\n                new[] { ''--help'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="26-30"];
m31_4 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="ReflectionUtilFixture.cs", label="Assert.True(expectedResult.Equals(result))", span="33-33"];
m31_5 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", file="ReflectionUtilFixture.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="17-17"];
m31_224 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="ReflectionUtilFixture.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="538-538"];
m31_225 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="ReflectionUtilFixture.cs", label="var expectedResult = new[] { new MissingRequiredOptionError(new NameInfo('''', ''str'')) }", span="541-541"];
m31_226 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="ReflectionUtilFixture.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequired(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="544-548"];
m31_227 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="ReflectionUtilFixture.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="551-551"];
m31_228 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", file="ReflectionUtilFixture.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="538-538"];
m31_8 [cluster="CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="ReflectionUtilFixture.cs", label="Entry CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="100-100"];
m31_290 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="ReflectionUtilFixture.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="694-694"];
m31_291 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="ReflectionUtilFixture.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="697-697"];
m31_292 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="ReflectionUtilFixture.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceMinMaxEqual(),\r\n                new[] { ''one'', ''two'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="700-704"];
m31_293 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="ReflectionUtilFixture.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="707-707"];
m31_294 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="ReflectionUtilFixture.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_equal_min_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="694-694"];
m31_78 [cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="ReflectionUtilFixture.cs", label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="316-316"];
m31_310 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="Entry lambda expression", span="739-739"];
m31_13 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label=fakeOptions, span="27-27"];
m31_12 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="Entry lambda expression", span="27-27"];
m31_14 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="Exit lambda expression", span="27-27"];
m31_20 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="Entry lambda expression", span="48-48"];
m31_21 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="new FakeOptions()", span="48-48"];
m31_22 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="Exit lambda expression", span="48-48"];
m31_27 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="Entry lambda expression", span="71-71"];
m31_28 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="new FakeOptionsWithDouble()", span="71-71"];
m31_29 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="Exit lambda expression", span="71-71"];
m31_36 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="Entry lambda expression", span="95-95"];
m31_37 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="new FakeOptionsWithSequence()", span="95-95"];
m31_38 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="Exit lambda expression", span="95-95"];
m31_44 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="Entry lambda expression", span="117-117"];
m31_45 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="new FakeOptions()", span="117-117"];
m31_46 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="Exit lambda expression", span="117-117"];
m31_51 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="Entry lambda expression", span="140-140"];
m31_52 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="140-140"];
m31_53 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="Exit lambda expression", span="140-140"];
m31_59 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="Entry lambda expression", span="162-162"];
m31_60 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="162-162"];
m31_61 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="Exit lambda expression", span="162-162"];
m31_70 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="Entry lambda expression", span="181-181"];
m31_71 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="181-181"];
m31_72 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="Exit lambda expression", span="181-181"];
m31_79 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="Entry lambda expression", span="200-200"];
m31_80 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="200-200"];
m31_81 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="Exit lambda expression", span="200-200"];
m31_88 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="Entry lambda expression", span="220-220"];
m31_89 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="220-220"];
m31_90 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="Exit lambda expression", span="220-220"];
m31_96 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="Entry lambda expression", span="239-239"];
m31_97 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="239-239"];
m31_98 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="Exit lambda expression", span="239-239"];
m31_105 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="Entry lambda expression", span="263-263"];
m31_106 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="new FakeOptionsWithEnum()", span="263-263"];
m31_107 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="Exit lambda expression", span="263-263"];
m31_115 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="Entry lambda expression", span="282-282"];
m31_116 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="new FakeOptionsWithEnum()", span="282-282"];
m31_117 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="Exit lambda expression", span="282-282"];
m31_123 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="Entry lambda expression", span="301-301"];
m31_124 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="new FakeOptionsWithEnum()", span="301-301"];
m31_125 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="Exit lambda expression", span="301-301"];
m31_131 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="Entry lambda expression", span="320-320"];
m31_132 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="new FakeOptionsWithEnum()", span="320-320"];
m31_133 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="Exit lambda expression", span="320-320"];
m31_140 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="Entry lambda expression", span="345-345"];
m31_141 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="new FakeOptionsWithValues()", span="345-345"];
m31_142 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="Exit lambda expression", span="345-345"];
m31_147 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="Entry lambda expression", span="368-368"];
m31_148 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="new FakeOptionsWithSequenceWithoutRange()", span="368-368"];
m31_149 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="Exit lambda expression", span="368-368"];
m31_155 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="Entry lambda expression", span="390-390"];
m31_156 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="new FakeOptionsWithSequenceAndSeparator()", span="390-390"];
m31_157 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="Exit lambda expression", span="390-390"];
m31_163 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="Entry lambda expression", span="412-412"];
m31_164 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="new FakeOptionsWithSequenceAndSeparator()", span="412-412"];
m31_165 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="Exit lambda expression", span="412-412"];
m31_173 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="Entry lambda expression", span="441-441"];
m31_176 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="Entry lambda expression", span="442-444"];
m31_174 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="new FakeOptionsWithValues()", span="441-441"];
m31_175 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="Exit lambda expression", span="441-441"];
m31_177 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)))", span="443-444"];
m31_181 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))", span="444-444"];
m31_185 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)", span="444-444"];
m31_178 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="Exit lambda expression", span="442-444"];
m31_180 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="Entry lambda expression", span="444-444"];
m31_182 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="Exit lambda expression", span="444-444"];
m31_184 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="Entry lambda expression", span="444-444"];
m31_186 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="Exit lambda expression", span="444-444"];
m31_194 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="Entry lambda expression", span="467-467"];
m31_195 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="new FakeOptionsWithSets()", span="467-467"];
m31_196 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="Exit lambda expression", span="467-467"];
m31_204 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="Entry lambda expression", span="487-487"];
m31_205 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="new FakeOptionWithRequiredAndSet()", span="487-487"];
m31_206 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="Exit lambda expression", span="487-487"];
m31_212 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="Entry lambda expression", span="507-507"];
m31_213 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="new FakeOptionWithRequiredAndSet()", span="507-507"];
m31_214 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="Exit lambda expression", span="507-507"];
m31_221 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="Entry lambda expression", span="527-527"];
m31_222 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="new FakeOptionWithRequiredAndSet()", span="527-527"];
m31_223 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="Exit lambda expression", span="527-527"];
m31_229 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="Entry lambda expression", span="545-545"];
m31_230 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="new FakeOptionWithRequired()", span="545-545"];
m31_231 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="Exit lambda expression", span="545-545"];
m31_238 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="Entry lambda expression", span="564-564"];
m31_239 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="new FakeOptions()", span="564-564"];
m31_240 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="Exit lambda expression", span="564-564"];
m31_247 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="Entry lambda expression", span="583-583"];
m31_248 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="new FakeOptions()", span="583-583"];
m31_249 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="Exit lambda expression", span="583-583"];
m31_255 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="Entry lambda expression", span="602-602"];
m31_256 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="new FakeOptions()", span="602-602"];
m31_257 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="Exit lambda expression", span="602-602"];
m31_263 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="Entry lambda expression", span="621-621"];
m31_264 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="new FakeOptions()", span="621-621"];
m31_265 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="Exit lambda expression", span="621-621"];
m31_271 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="Entry lambda expression", span="641-641"];
m31_272 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="new FakeOptions()", span="641-641"];
m31_273 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="Exit lambda expression", span="641-641"];
m31_279 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="Entry lambda expression", span="660-660"];
m31_280 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="new FakeOptionsWithRequiredValue()", span="660-660"];
m31_281 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="Exit lambda expression", span="660-660"];
m31_287 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="Entry lambda expression", span="682-682"];
m31_288 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="new FakeOptions()", span="682-682"];
m31_289 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="Exit lambda expression", span="682-682"];
m31_295 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="Entry lambda expression", span="701-701"];
m31_296 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="new FakeOptionsWithSequenceMinMaxEqual()", span="701-701"];
m31_297 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="Exit lambda expression", span="701-701"];
m31_303 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="Entry lambda expression", span="720-720"];
m31_304 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="new FakeOptionsWithRequiredValue()", span="720-720"];
m31_305 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="Exit lambda expression", span="720-720"];
m31_311 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="new FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="739-739"];
m31_312 [cluster="lambda expression", file="ReflectionUtilFixture.cs", label="Exit lambda expression", span="739-739"];
m31_215 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="ReflectionUtilFixture.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="518-518"];
m31_216 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="ReflectionUtilFixture.cs", label="var expectedResult = new[]\r\n            {\r\n                new MissingRequiredOptionError(new NameInfo('''', ''ftpurl'')),\r\n                new MissingRequiredOptionError(new NameInfo('''', ''weburl''))\r\n            }", span="520-524"];
m31_217 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="ReflectionUtilFixture.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] {''''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="526-530"];
m31_218 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="ReflectionUtilFixture.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="533-533"];
m31_219 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", file="ReflectionUtilFixture.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="518-518"];
m31_100 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="ReflectionUtilFixture.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="257-257"];
m31_101 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="ReflectionUtilFixture.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="262-266"];
m31_102 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="ReflectionUtilFixture.cs", label="expected.ShouldBeEquivalentTo(result.Value.Colors)", span="269-269"];
m31_103 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", file="ReflectionUtilFixture.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="257-257"];
m31_35 [cluster="Unk.SequenceEqual", file="ReflectionUtilFixture.cs", label="Entry Unk.SequenceEqual", span=""];
m31_126 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="ReflectionUtilFixture.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="313-313"];
m31_127 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="ReflectionUtilFixture.cs", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="316-316"];
m31_128 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="ReflectionUtilFixture.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''RED'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="319-323"];
m31_129 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="ReflectionUtilFixture.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="326-326"];
m31_130 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", file="ReflectionUtilFixture.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_case_generates_BadFormatConversionError()", span="313-313"];
m31_68 [cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", file="ReflectionUtilFixture.cs", label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="261-261"];
m31_99 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", file="ReflectionUtilFixture.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="9-9"];
m31_166 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="ReflectionUtilFixture.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="427-427"];
m31_167 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="ReflectionUtilFixture.cs", label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = ''str1'',\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''-a'', ''--bee'', ''-c'' },\r\n                    IntValue = 20\r\n                }", span="430-436"];
m31_168 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="ReflectionUtilFixture.cs", label="var arguments = new[] { ''--stringvalue'', ''str1'', ''--'', ''10'', ''-a'', ''--bee'', ''-c'', ''20'' }", span="437-437"];
m31_170 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="ReflectionUtilFixture.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="450-450"];
m31_169 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="ReflectionUtilFixture.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                (a, optionSpecs) =>\r\n                    Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="440-447"];
m31_171 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", file="ReflectionUtilFixture.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="427-427"];
m31_83 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="ReflectionUtilFixture.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="213-213"];
m31_84 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="ReflectionUtilFixture.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''s'', ''string-seq'')) }", span="216-216"];
m31_85 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="ReflectionUtilFixture.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraint(),\r\n                new[] { ''--string-seq=one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="219-223"];
m31_86 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="ReflectionUtilFixture.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="226-226"];
m31_87 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", file="ReflectionUtilFixture.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="213-213"];
m31_299 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="ReflectionUtilFixture.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", span="714-714"];
m31_300 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="ReflectionUtilFixture.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithRequiredValue(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="719-723"];
m31_301 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="ReflectionUtilFixture.cs", label="expected.ShouldBeEquivalentTo(result.Value)", span="726-726"];
m31_302 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", file="ReflectionUtilFixture.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_scalar_with_required_constraint_as_value(string[], CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue)", span="714-714"];
m31_258 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="ReflectionUtilFixture.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="614-614"];
m31_259 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="ReflectionUtilFixture.cs", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="617-617"];
m31_260 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="ReflectionUtilFixture.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-zx'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="620-624"];
m31_261 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="ReflectionUtilFixture.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="627-627"];
m31_262 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", file="ReflectionUtilFixture.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="614-614"];
m31_10 [cluster="CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", file="ReflectionUtilFixture.cs", label="Entry CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", span="87-87"];
m31_30 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", file="ReflectionUtilFixture.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", span="9-9"];
m31_63 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="ReflectionUtilFixture.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="174-174"];
m31_64 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="ReflectionUtilFixture.cs", label="var expectedResult = new[] { new MissingValueOptionError(new NameInfo(''s'', ''string-seq'')) }", span="177-177"];
m31_65 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="ReflectionUtilFixture.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraint(),\r\n                new[] { ''-s'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="180-184"];
m31_66 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="ReflectionUtilFixture.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="187-187"];
m31_67 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", file="ReflectionUtilFixture.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="174-174"];
m31_108 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", file="ReflectionUtilFixture.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", span="16-16"];
m31_134 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="ReflectionUtilFixture.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="332-332"];
m31_135 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="ReflectionUtilFixture.cs", label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = string.Empty,\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''a'', ''b'', ''c'' },\r\n                    IntValue = 20\r\n                }", span="335-341"];
m31_136 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="ReflectionUtilFixture.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                new[] { ''10'', ''a'', ''b'', ''c'', ''20'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="344-348"];
m31_137 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="ReflectionUtilFixture.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="351-351"];
m31_138 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", file="ReflectionUtilFixture.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="332-332"];
m31_283 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="ReflectionUtilFixture.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="676-676"];
m31_284 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="ReflectionUtilFixture.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="681-685"];
m31_285 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="ReflectionUtilFixture.cs", label="expected.ShouldBeEquivalentTo(result.Value.StringValue)", span="688-688"];
m31_286 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", file="ReflectionUtilFixture.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_utf8_string_correctly(string[], string)", span="676-676"];
m31_313 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", file="ReflectionUtilFixture.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent.FakeOptionsWithScalarValueAndSequenceStringAdjacent()", span="6-6"];
m31_203 [cluster="CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", file="ReflectionUtilFixture.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", span="4-4"];
m31_73 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="ReflectionUtilFixture.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="193-193"];
m31_74 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="ReflectionUtilFixture.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="196-196"];
m31_75 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="ReflectionUtilFixture.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="199-203"];
m31_76 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="ReflectionUtilFixture.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="206-206"];
m31_77 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="ReflectionUtilFixture.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="193-193"];
m31_246 [cluster="CommandLine.UnknownOptionError.UnknownOptionError(string)", file="ReflectionUtilFixture.cs", label="Entry CommandLine.UnknownOptionError.UnknownOptionError(string)", span="272-272"];
m31_91 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="ReflectionUtilFixture.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="232-232"];
m31_92 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="ReflectionUtilFixture.cs", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="235-235"];
m31_93 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="ReflectionUtilFixture.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue(),\r\n                new[] { ''one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="238-242"];
m31_94 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="ReflectionUtilFixture.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="245-245"];
m31_95 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", file="ReflectionUtilFixture.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="232-232"];
m31_114 [cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", file="ReflectionUtilFixture.cs", label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="305-305"];
m31_158 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", file="ReflectionUtilFixture.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", span="9-9"];
m31_179 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", file="ReflectionUtilFixture.cs", label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", span="31-31"];
m31_183 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="ReflectionUtilFixture.cs", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11"];
m31_198 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="ReflectionUtilFixture.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="479-479"];
m31_199 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="ReflectionUtilFixture.cs", label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = null\r\n            }", span="481-484"];
m31_200 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="ReflectionUtilFixture.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="486-490"];
m31_201 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="ReflectionUtilFixture.cs", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="493-493"];
m31_202 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", file="ReflectionUtilFixture.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="479-479"];
m31_197 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", file="ReflectionUtilFixture.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", span="4-4"];
m31_270 [cluster="string.Equals(string)", file="ReflectionUtilFixture.cs", label="Entry string.Equals(string)", span="0-0"];
m31_193 [cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", file="ReflectionUtilFixture.cs", label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="294-294"];
m31_298 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceMinMaxEqual.FakeOptionsWithSequenceMinMaxEqual()", file="ReflectionUtilFixture.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceMinMaxEqual.FakeOptionsWithSequenceMinMaxEqual()", span="9-9"];
m31_232 [cluster="CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", file="ReflectionUtilFixture.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", span="4-4"];
m31_69 [cluster="CommandLine.NameInfo.NameInfo(string, string)", file="ReflectionUtilFixture.cs", label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20"];
m31_47 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="ReflectionUtilFixture.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="134-134"];
m31_48 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="ReflectionUtilFixture.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraint(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="139-143"];
m31_49 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="ReflectionUtilFixture.cs", label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="146-146"];
m31_50 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", file="ReflectionUtilFixture.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="134-134"];
m31_15 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="ReflectionUtilFixture.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="42-42"];
m31_16 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="ReflectionUtilFixture.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="47-51"];
m31_17 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="ReflectionUtilFixture.cs", label="Assert.Equal(expected, result.Value.LongValue)", span="54-54"];
m31_18 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", file="ReflectionUtilFixture.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="42-42"];
m31_39 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", file="ReflectionUtilFixture.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", span="9-9"];
m31_6 [cluster="CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", file="ReflectionUtilFixture.cs", label="Entry CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", span="6-6"];
m31_250 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="ReflectionUtilFixture.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="595-595"];
m31_251 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="ReflectionUtilFixture.cs", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="598-598"];
m31_252 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="ReflectionUtilFixture.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-z'', ''-x'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="601-605"];
m31_253 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="ReflectionUtilFixture.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="608-608"];
m31_254 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", file="ReflectionUtilFixture.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="595-595"];
m31_118 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="ReflectionUtilFixture.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="294-294"];
m31_119 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="ReflectionUtilFixture.cs", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="297-297"];
m31_120 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="ReflectionUtilFixture.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''Yellow'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="300-304"];
m31_121 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="ReflectionUtilFixture.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="307-307"];
m31_122 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", file="ReflectionUtilFixture.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_item_name_generates_BadFormatConversionError()", span="294-294"];
m31_109 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="ReflectionUtilFixture.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="275-275"];
m31_110 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="ReflectionUtilFixture.cs", label="var expectedResult = new[] { new BadFormatConversionError(new NameInfo('''', ''colors'')) }", span="278-278"];
m31_111 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="ReflectionUtilFixture.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                new[] { ''--colors'', ''3'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="281-285"];
m31_112 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="ReflectionUtilFixture.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="288-288"];
m31_113 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", file="ReflectionUtilFixture.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value_with_wrong_index_generates_BadFormatConversionError()", span="275-275"];
m31_23 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="ReflectionUtilFixture.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="65-65"];
m31_24 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="ReflectionUtilFixture.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithDouble(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="70-74"];
m31_25 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="ReflectionUtilFixture.cs", label="Assert.Equal(expected, result.Value.DoubleValue)", span="77-77"];
m31_26 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", file="ReflectionUtilFixture.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="65-65"];
m31_139 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", file="ReflectionUtilFixture.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", span="6-6"];
m31_282 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue.FakeOptionsWithRequiredValue()", file="ReflectionUtilFixture.cs", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue.FakeOptionsWithRequiredValue()", span="4-4"];
m31_7 [cluster="CommandLine.HelpRequestedError.HelpRequestedError()", file="ReflectionUtilFixture.cs", label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="338-338"];
m31_19 [cluster="Unk.Equal", file="ReflectionUtilFixture.cs", label="Entry Unk.Equal", span=""];
m31_188 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="ReflectionUtilFixture.cs", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="456-456"];
m31_189 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="ReflectionUtilFixture.cs", label="var expectedResult = new[]\r\n                {\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''weburl'')),\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''ftpurl''))\r\n                }", span="459-463"];
m31_190 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="ReflectionUtilFixture.cs", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSets(),\r\n                new[] { ''--weburl'', ''http://mywebsite.org/'', ''--ftpurl'', ''fpt://ftpsite.org/'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="466-470"];
m31_191 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="ReflectionUtilFixture.cs", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="473-473"];
m31_192 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", file="ReflectionUtilFixture.cs", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="456-456"];
m31_104 [cluster="Unk.ShouldBeEquivalentTo", file="ReflectionUtilFixture.cs", label="Entry Unk.ShouldBeEquivalentTo", span=""];
m31_9 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", file="ReflectionUtilFixture.cs", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="12-12"];
m31_314 [file="ReflectionUtilFixture.cs", label=fakeOptions, span=""];
m31_315 [file="ReflectionUtilFixture.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
m35_12 [cluster="CommandLine.Internal.OptionExtensions.IsShortOption(string)", file="SwitchExtensions.cs", label="Entry CommandLine.Internal.OptionExtensions.IsShortOption(string)", span="19-19"];
m35_13 [cluster="CommandLine.Internal.OptionExtensions.IsShortOption(string)", file="SwitchExtensions.cs", label="return value[0] == '-';", span="21-21"];
m35_14 [cluster="CommandLine.Internal.OptionExtensions.IsShortOption(string)", file="SwitchExtensions.cs", label="Exit CommandLine.Internal.OptionExtensions.IsShortOption(string)", span="19-19"];
m35_0 [cluster="CommandLine.Internal.OptionExtensions.ToOption(string)", file="SwitchExtensions.cs", label="Entry CommandLine.Internal.OptionExtensions.ToOption(string)", span="4-4"];
m35_1 [cluster="CommandLine.Internal.OptionExtensions.ToOption(string)", file="SwitchExtensions.cs", label="return string.Concat(''--'', value);", span="6-6"];
m35_2 [cluster="CommandLine.Internal.OptionExtensions.ToOption(string)", file="SwitchExtensions.cs", label="Exit CommandLine.Internal.OptionExtensions.ToOption(string)", span="4-4"];
m35_11 [cluster="string.CompareOrdinal(string, string)", file="SwitchExtensions.cs", label="Entry string.CompareOrdinal(string, string)", span="0-0"];
m35_3 [cluster="string.Concat(string, string)", file="SwitchExtensions.cs", label="Entry string.Concat(string, string)", span="0-0"];
m35_4 [cluster="CommandLine.Internal.OptionExtensions.ToOption(char?)", file="SwitchExtensions.cs", label="Entry CommandLine.Internal.OptionExtensions.ToOption(char?)", span="9-9"];
m35_5 [cluster="CommandLine.Internal.OptionExtensions.ToOption(char?)", file="SwitchExtensions.cs", label="return string.Concat(''-'', value);", span="11-11"];
m35_6 [cluster="CommandLine.Internal.OptionExtensions.ToOption(char?)", file="SwitchExtensions.cs", label="Exit CommandLine.Internal.OptionExtensions.ToOption(char?)", span="9-9"];
m35_8 [cluster="CommandLine.Internal.OptionExtensions.IsDash(string)", file="SwitchExtensions.cs", label="Entry CommandLine.Internal.OptionExtensions.IsDash(string)", span="14-14"];
m35_9 [cluster="CommandLine.Internal.OptionExtensions.IsDash(string)", file="SwitchExtensions.cs", label="return string.CompareOrdinal(value, ''-'') == 0;", span="16-16"];
m35_10 [cluster="CommandLine.Internal.OptionExtensions.IsDash(string)", file="SwitchExtensions.cs", label="Exit CommandLine.Internal.OptionExtensions.IsDash(string)", span="14-14"];
m35_7 [cluster="string.Concat(object, object)", file="SwitchExtensions.cs", label="Entry string.Concat(object, object)", span="0-0"];
m35_15 [cluster="CommandLine.Internal.OptionExtensions.IsLongOption(string)", file="SwitchExtensions.cs", label="Entry CommandLine.Internal.OptionExtensions.IsLongOption(string)", span="24-24"];
m35_16 [cluster="CommandLine.Internal.OptionExtensions.IsLongOption(string)", file="SwitchExtensions.cs", label="return value[0] == '-' && value[1] == '-';", span="26-26"];
m35_17 [cluster="CommandLine.Internal.OptionExtensions.IsLongOption(string)", file="SwitchExtensions.cs", label="Exit CommandLine.Internal.OptionExtensions.IsLongOption(string)", span="24-24"];
m36_8 [cluster="CommandLine.ValueListAttribute.GetAttribute(object)", file="TargetWrapper.cs", label="Entry CommandLine.ValueListAttribute.GetAttribute(object)", span="86-86"];
m36_16 [cluster="System.Collections.Generic.ICollection<T>.Add(T)", file="TargetWrapper.cs", label="Entry System.Collections.Generic.ICollection<T>.Add(T)", span="0-0"];
m36_9 [cluster="CommandLine.ValueListAttribute.GetReference(object)", file="TargetWrapper.cs", label="Entry CommandLine.ValueListAttribute.GetReference(object)", span="77-77"];
m36_0 [cluster="CommandLine.Internal.TargetWrapper.TargetWrapper()", file="TargetWrapper.cs", label="Entry CommandLine.Internal.TargetWrapper.TargetWrapper()", span="43-43"];
m36_1 [cluster="CommandLine.Internal.TargetWrapper.TargetWrapper()", file="TargetWrapper.cs", label="Exit CommandLine.Internal.TargetWrapper.TargetWrapper()", span="43-43"];
m36_10 [cluster="CommandLine.Internal.TargetWrapper.AddValueItemIfAllowed(string)", file="TargetWrapper.cs", label="Entry CommandLine.Internal.TargetWrapper.AddValueItemIfAllowed(string)", span="57-57"];
m36_15 [cluster="CommandLine.Internal.TargetWrapper.AddValueItemIfAllowed(string)", file="TargetWrapper.cs", label="Exit CommandLine.Internal.TargetWrapper.AddValueItemIfAllowed(string)", span="57-57"];
m36_2 [cluster="CommandLine.Internal.TargetWrapper.TargetWrapper(object)", file="TargetWrapper.cs", label="Entry CommandLine.Internal.TargetWrapper.TargetWrapper(object)", span="45-45"];
m36_7 [cluster="CommandLine.Internal.TargetWrapper.TargetWrapper(object)", file="TargetWrapper.cs", label="Exit CommandLine.Internal.TargetWrapper.TargetWrapper(object)", span="45-45"];
m36_17 [file="TargetWrapper.cs", label="CommandLine.Internal.TargetWrapper", span=""];
m39_8 [cluster="CommandLine.Text.AssemblyUsageAttribute.AssemblyUsageAttribute(string, string, string, string, string)", file="ValueListAttribute.cs", label="Entry CommandLine.Text.AssemblyUsageAttribute.AssemblyUsageAttribute(string, string, string, string, string)", span="68-68"];
m39_9 [cluster="CommandLine.Text.AssemblyUsageAttribute.AssemblyUsageAttribute(string, string, string, string, string)", file="ValueListAttribute.cs", label="Exit CommandLine.Text.AssemblyUsageAttribute.AssemblyUsageAttribute(string, string, string, string, string)", span="68-68"];
m39_2 [cluster="CommandLine.Text.AssemblyUsageAttribute.AssemblyUsageAttribute(string, string)", file="ValueListAttribute.cs", label="Entry CommandLine.Text.AssemblyUsageAttribute.AssemblyUsageAttribute(string, string)", span="29-29"];
m39_3 [cluster="CommandLine.Text.AssemblyUsageAttribute.AssemblyUsageAttribute(string, string)", file="ValueListAttribute.cs", label="Exit CommandLine.Text.AssemblyUsageAttribute.AssemblyUsageAttribute(string, string)", span="29-29"];
m39_6 [cluster="CommandLine.Text.AssemblyUsageAttribute.AssemblyUsageAttribute(string, string, string, string)", file="ValueListAttribute.cs", label="Entry CommandLine.Text.AssemblyUsageAttribute.AssemblyUsageAttribute(string, string, string, string)", span="54-54"];
m39_7 [cluster="CommandLine.Text.AssemblyUsageAttribute.AssemblyUsageAttribute(string, string, string, string)", file="ValueListAttribute.cs", label="Exit CommandLine.Text.AssemblyUsageAttribute.AssemblyUsageAttribute(string, string, string, string)", span="54-54"];
m39_0 [cluster="CommandLine.Text.AssemblyUsageAttribute.AssemblyUsageAttribute(string)", file="ValueListAttribute.cs", label="Entry CommandLine.Text.AssemblyUsageAttribute.AssemblyUsageAttribute(string)", span="18-18"];
m39_1 [cluster="CommandLine.Text.AssemblyUsageAttribute.AssemblyUsageAttribute(string)", file="ValueListAttribute.cs", label="Exit CommandLine.Text.AssemblyUsageAttribute.AssemblyUsageAttribute(string)", span="18-18"];
m39_4 [cluster="CommandLine.Text.AssemblyUsageAttribute.AssemblyUsageAttribute(string, string, string)", file="ValueListAttribute.cs", label="Entry CommandLine.Text.AssemblyUsageAttribute.AssemblyUsageAttribute(string, string, string)", span="41-41"];
m39_5 [cluster="CommandLine.Text.AssemblyUsageAttribute.AssemblyUsageAttribute(string, string, string)", file="ValueListAttribute.cs", label="Exit CommandLine.Text.AssemblyUsageAttribute.AssemblyUsageAttribute(string, string, string)", span="41-41"];
m42_30 [cluster="Unk.WithValue", file="ValueOptionAttributeParsingFixture.cs", label="Entry Unk.WithValue", span=""];
m42_4 [cluster="Unk.Select", file="ValueOptionAttributeParsingFixture.cs", label="Entry Unk.Select", span=""];
m42_18 [cluster="string.MatchName(string, string, System.StringComparer)", file="ValueOptionAttributeParsingFixture.cs", label="Entry string.MatchName(string, string, System.StringComparer)", span="8-8"];
m42_24 [cluster="CommandLine.Core.OptionSpecification.FromOptionSpecification()", file="ValueOptionAttributeParsingFixture.cs", label="Entry CommandLine.Core.OptionSpecification.FromOptionSpecification()", span="15-15"];
m42_23 [cluster="CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", file="ValueOptionAttributeParsingFixture.cs", label="Entry CommandLine.BadFormatConversionError.BadFormatConversionError(CommandLine.NameInfo)", span="349-349"];
m42_11 [cluster="Unk.ToMaybe", file="ValueOptionAttributeParsingFixture.cs", label="Entry Unk.ToMaybe", span=""];
m42_10 [cluster="Unk.FirstOrDefault", file="ValueOptionAttributeParsingFixture.cs", label="Entry Unk.FirstOrDefault", span=""];
m42_25 [cluster="CSharpx.Maybe.Just<T>(T)", file="ValueOptionAttributeParsingFixture.cs", label="Entry CSharpx.Maybe.Just<T>(T)", span="124-124"];
m42_13 [cluster="System.Tuple.Create<T1, T2>(T1, T2)", file="ValueOptionAttributeParsingFixture.cs", label="Entry System.Tuple.Create<T1, T2>(T1, T2)", span="0-0"];
m42_29 [cluster="Unk.Just", file="ValueOptionAttributeParsingFixture.cs", label="Entry Unk.Just", span=""];
m42_37 [cluster="lambda expression", file="ValueOptionAttributeParsingFixture.cs", label="Entry lambda expression", span="39-39"];
m42_7 [cluster="lambda expression", file="ValueOptionAttributeParsingFixture.cs", label="Entry lambda expression", span="21-35"];
m42_8 [cluster="lambda expression", color=green, community=0, file="ValueOptionAttributeParsingFixture.cs", label="options.FirstOrDefault(\r\n                            s =>\r\n                            s.Key.MatchName(((OptionSpecification)pt.Specification).ShortName, ((OptionSpecification)pt.Specification).LongName, comparer))\r\n                               .ToMaybe()\r\n                               .MapMaybeOrDefault(sequence =>\r\n                                    converter(sequence.Value, pt.Property.PropertyType, pt.Specification.TargetType != TargetType.Sequence)\r\n                                    .MapMaybeOrDefault(converted =>\r\n                                            Tuple.Create(\r\n                                                pt.WithValue(Maybe.Just(converted)),\r\n                                                Maybe.Nothing<Error>()),\r\n                                            Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                                                pt,\r\n                                                Maybe.Just<Error>(new BadFormatConversionError(((OptionSpecification)pt.Specification).FromOptionSpecification())))),\r\n                                Tuple.Create(pt, Maybe.Nothing<Error>()))", prediction=22, span="22-35"];
m42_9 [cluster="lambda expression", file="ValueOptionAttributeParsingFixture.cs", label="Exit lambda expression", span="21-35"];
m42_15 [cluster="lambda expression", file="ValueOptionAttributeParsingFixture.cs", label="Entry lambda expression", span="23-24"];
m42_19 [cluster="lambda expression", file="ValueOptionAttributeParsingFixture.cs", label="Entry lambda expression", span="26-34"];
m42_16 [cluster="lambda expression", color=green, community=0, file="ValueOptionAttributeParsingFixture.cs", label="s.Key.MatchName(((OptionSpecification)pt.Specification).ShortName, ((OptionSpecification)pt.Specification).LongName, comparer)", prediction=22, span="24-24"];
m42_17 [cluster="lambda expression", file="ValueOptionAttributeParsingFixture.cs", label="Exit lambda expression", span="23-24"];
m42_20 [cluster="lambda expression", color=green, community=0, file="ValueOptionAttributeParsingFixture.cs", label="converter(sequence.Value, pt.Property.PropertyType, pt.Specification.TargetType != TargetType.Sequence)\r\n                                    .MapMaybeOrDefault(converted =>\r\n                                            Tuple.Create(\r\n                                                pt.WithValue(Maybe.Just(converted)),\r\n                                                Maybe.Nothing<Error>()),\r\n                                            Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                                                pt,\r\n                                                Maybe.Just<Error>(new BadFormatConversionError(((OptionSpecification)pt.Specification).FromOptionSpecification()))))", prediction=22, span="27-34"];
m42_21 [cluster="lambda expression", file="ValueOptionAttributeParsingFixture.cs", label="Exit lambda expression", span="26-34"];
m42_26 [cluster="lambda expression", file="ValueOptionAttributeParsingFixture.cs", label="Entry lambda expression", span="28-31"];
m42_31 [cluster="lambda expression", file="ValueOptionAttributeParsingFixture.cs", label="Entry lambda expression", span="38-38"];
m42_34 [cluster="lambda expression", file="ValueOptionAttributeParsingFixture.cs", label="Entry lambda expression", span="39-39"];
m42_27 [cluster="lambda expression", color=green, community=0, file="ValueOptionAttributeParsingFixture.cs", label="Tuple.Create(\r\n                                                pt.WithValue(Maybe.Just(converted)),\r\n                                                Maybe.Nothing<Error>())", prediction=22, span="29-31"];
m42_28 [cluster="lambda expression", file="ValueOptionAttributeParsingFixture.cs", label="Exit lambda expression", span="28-31"];
m42_32 [cluster="lambda expression", color=green, community=0, file="ValueOptionAttributeParsingFixture.cs", label="se.Item1", prediction=26, span="38-38"];
m42_33 [cluster="lambda expression", file="ValueOptionAttributeParsingFixture.cs", label="Exit lambda expression", span="38-38"];
m42_35 [cluster="lambda expression", color=green, community=0, file="ValueOptionAttributeParsingFixture.cs", label="se.Item2", prediction=27, span="39-39"];
m42_36 [cluster="lambda expression", file="ValueOptionAttributeParsingFixture.cs", label="Exit lambda expression", span="39-39"];
m42_38 [cluster="lambda expression", color=green, community=0, file="ValueOptionAttributeParsingFixture.cs", label="se.Value", prediction=28, span="39-39"];
m42_39 [cluster="lambda expression", file="ValueOptionAttributeParsingFixture.cs", label="Exit lambda expression", span="39-39"];
m42_22 [cluster="Unk.converter", file="ValueOptionAttributeParsingFixture.cs", label="Entry Unk.converter", span=""];
m42_5 [cluster="Unk.>", file="ValueOptionAttributeParsingFixture.cs", label="Entry Unk.>", span=""];
m42_12 [cluster="CSharpx.Maybe.Nothing<T>()", file="ValueOptionAttributeParsingFixture.cs", label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116"];
m42_6 [cluster="Unk.Succeed", file="ValueOptionAttributeParsingFixture.cs", label="Entry Unk.Succeed", span=""];
m42_14 [cluster="Unk.MapMaybeOrDefault", file="ValueOptionAttributeParsingFixture.cs", label="Entry Unk.MapMaybeOrDefault", span=""];
m42_0 [cluster="CommandLine.Core.OptionMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>, System.StringComparer)", file="ValueOptionAttributeParsingFixture.cs", label="Entry CommandLine.Core.OptionMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>, System.StringComparer)", span="14-14"];
m42_1 [cluster="CommandLine.Core.OptionMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>, System.StringComparer)", color=green, community=0, file="ValueOptionAttributeParsingFixture.cs", label="var sequencesAndErrors = propertyTuples\r\n                .Select(pt =>\r\n                    options.FirstOrDefault(\r\n                            s =>\r\n                            s.Key.MatchName(((OptionSpecification)pt.Specification).ShortName, ((OptionSpecification)pt.Specification).LongName, comparer))\r\n                               .ToMaybe()\r\n                               .MapMaybeOrDefault(sequence =>\r\n                                    converter(sequence.Value, pt.Property.PropertyType, pt.Specification.TargetType != TargetType.Sequence)\r\n                                    .MapMaybeOrDefault(converted =>\r\n                                            Tuple.Create(\r\n                                                pt.WithValue(Maybe.Just(converted)),\r\n                                                Maybe.Nothing<Error>()),\r\n                                            Tuple.Create<SpecificationProperty, Maybe<Error>>(\r\n                                                pt,\r\n                                                Maybe.Just<Error>(new BadFormatConversionError(((OptionSpecification)pt.Specification).FromOptionSpecification())))),\r\n                                Tuple.Create(pt, Maybe.Nothing<Error>()))\r\n                )", prediction=29, span="20-36"];
m42_2 [cluster="CommandLine.Core.OptionMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>, System.StringComparer)", color=green, community=0, file="ValueOptionAttributeParsingFixture.cs", label="return Result.Succeed(\r\n                sequencesAndErrors.Select(se => se.Item1),\r\n                sequencesAndErrors.Select(se => se.Item2).OfType<Just<Error>>().Select(se => se.Value));", prediction=30, span="37-39"];
m42_3 [cluster="CommandLine.Core.OptionMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>, System.StringComparer)", file="ValueOptionAttributeParsingFixture.cs", label="Exit CommandLine.Core.OptionMapper.MapValues(System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>, System.StringComparer)", span="14-14"];
m42_40 [file="ValueOptionAttributeParsingFixture.cs", label="System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>", span=""];
m42_41 [file="ValueOptionAttributeParsingFixture.cs", label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>", span=""];
m42_42 [file="ValueOptionAttributeParsingFixture.cs", label="System.StringComparer", span=""];
m42_43 [file="ValueOptionAttributeParsingFixture.cs", label="CommandLine.Core.SpecificationProperty", span=""];
m43_3 [cluster="CommandLine.Internal.Assumes.NotNullOrEmpty(string, string)", file="VerbOptionAttribute.cs", label="Entry CommandLine.Internal.Assumes.NotNullOrEmpty(string, string)", span="61-61"];
m43_0 [cluster="CommandLine.VerbOptionAttribute.VerbOptionAttribute(string)", file="VerbOptionAttribute.cs", label="Entry CommandLine.VerbOptionAttribute.VerbOptionAttribute(string)", span="45-45"];
m43_1 [cluster="CommandLine.VerbOptionAttribute.VerbOptionAttribute(string)", file="VerbOptionAttribute.cs", label="Assumes.NotNullOrEmpty(longName, ''longName'')", span="48-48"];
m43_2 [cluster="CommandLine.VerbOptionAttribute.VerbOptionAttribute(string)", file="VerbOptionAttribute.cs", label="Exit CommandLine.VerbOptionAttribute.VerbOptionAttribute(string)", span="45-45"];
m1_0 -> m1_2  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_5 -> m1_7  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_21 -> m1_23  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_10 -> m1_12  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_101 -> m2_103  [color=darkseagreen4, key=1, label=builder, style=dashed];
m2_101 -> m2_104  [color=darkseagreen4, key=1, label=builder, style=dashed];
m2_93 -> m2_95  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_52 -> m2_54  [color=darkseagreen4, key=1, label="CommandLine.Core.Specification", style=dashed];
m2_52 -> m2_56  [color=darkseagreen4, key=1, label=object, style=dashed];
m2_53 -> m2_56  [color=darkseagreen4, key=1, label=builder, style=dashed];
m2_53 -> m2_57  [color=darkseagreen4, key=1, label=builder, style=dashed];
m2_53 -> m2_63  [color=darkseagreen4, key=1, label=builder, style=dashed];
m2_53 -> m2_64  [color=darkseagreen4, key=1, label=builder, style=dashed];
m2_53 -> m2_65  [color=darkseagreen4, key=1, label=builder, style=dashed];
m2_53 -> m2_66  [color=darkseagreen4, key=1, label=builder, style=dashed];
m2_59 -> m2_76  [color=darkseagreen4, key=1, label=sep, style=dashed];
m2_59 -> m2_63  [color=darkseagreen4, key=1, label=sep, style=dashed];
m2_61 -> m2_63  [color=darkseagreen4, key=1, label=e, style=dashed];
m2_60 -> m2_76  [color=darkseagreen4, key=1, label=object, style=dashed];
m2_60 -> m2_63  [color=darkseagreen4, key=1, label=unParse, style=dashed];
m2_4 -> m2_29  [color=darkseagreen4, key=1, label=builder, style=dashed];
m2_4 -> m2_13  [color=darkseagreen4, key=1, label=builder, style=dashed];
m2_5 -> m2_28  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_68 -> m2_79  [color=darkseagreen4, key=1, label=object, style=dashed];
m2_78 -> m2_83  [color=darkseagreen4, key=1, label=string, style=dashed];
m2_78 -> m2_88  [color=darkseagreen4, key=1, label=doubQt, style=dashed];
m2_79 -> m2_87  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_110 -> m2_29  [color=darkseagreen4, key=1, label=builder, style=dashed];
m2_112 -> m2_76  [color=darkseagreen4, key=1, label=sep, style=dashed];
m2_113 -> m2_88  [color=darkseagreen4, key=1, label=doubQt, style=dashed];
m4_2 -> m4_4  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_2 -> m4_5  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_12 -> m4_15  [color=darkseagreen4, key=1, label=isVersionNull, style=dashed];
m4_13 -> m4_16  [color=darkseagreen4, key=1, label="CommandLine.Error", style=dashed];
m4_13 -> m4_17  [color=darkseagreen4, key=1, label=builder, style=dashed];
m4_13 -> m4_18  [color=darkseagreen4, key=1, label="CommandLine.Error", style=dashed];
m4_13 -> m4_20  [color=darkseagreen4, key=1, label="CommandLine.Error", style=dashed];
m4_13 -> m4_25  [color=darkseagreen4, key=1, label="CommandLine.Error", style=dashed];
m4_13 -> m4_27  [color=darkseagreen4, key=1, label="CommandLine.Error", style=dashed];
m4_13 -> m4_30  [color=darkseagreen4, key=1, label="CommandLine.Error", style=dashed];
m4_13 -> m4_33  [color=darkseagreen4, key=1, label="CommandLine.Error", style=dashed];
m4_25 -> m4_27  [color=darkseagreen4, key=1, label="System.IO.TextWriter", style=dashed];
m4_25 -> m4_31  [color=darkseagreen4, key=1, label=string, style=dashed];
m4_25 -> m4_32  [color=darkseagreen4, key=1, label="System.IO.TextWriter", style=dashed];
m4_28 -> m4_30  [color=darkseagreen4, key=1, label=builder, style=dashed];
m4_28 -> m4_31  [color=darkseagreen4, key=1, label=builder, style=dashed];
m4_28 -> m4_32  [color=darkseagreen4, key=1, label=builder, style=dashed];
m4_42 -> m4_37  [color=green, key=1, label="CommandLine.Text.HeadingInfo", style=dashed];
m4_42 -> m4_40  [color=green, key=1, label="CommandLine.Text.HeadingInfo", style=dashed];
m4_42 -> m4_4  [color=darkseagreen4, key=1, label="CommandLine.Text.HeadingInfo", style=dashed];
m4_42 -> m4_5  [color=darkseagreen4, key=1, label="CommandLine.Text.HeadingInfo", style=dashed];
m4_42 -> m4_12  [color=darkseagreen4, key=1, label="CommandLine.Text.HeadingInfo", style=dashed];
m4_42 -> m4_13  [color=darkseagreen4, key=1, label="CommandLine.Text.HeadingInfo", style=dashed];
m4_42 -> m4_14  [color=darkseagreen4, key=1, label="CommandLine.Text.HeadingInfo", style=dashed];
m4_42 -> m4_17  [color=darkseagreen4, key=1, label="CommandLine.Text.HeadingInfo", style=dashed];
m4_42 -> m4_29  [color=darkseagreen4, key=1, label="CommandLine.Text.HeadingInfo", style=dashed];
m8_29 -> m8_31  [color=darkseagreen4, key=1, label="System.Reflection.PropertyInfo", style=dashed];
m8_29 -> m8_40  [color=darkseagreen4, key=1, label=T, style=dashed];
m8_30 -> m8_45  [color=darkseagreen4, key=1, label="System.Exception", style=dashed];
m8_30 -> m8_33  [color=darkseagreen4, key=1, label=fail, style=dashed];
m8_30 -> m8_35  [color=darkseagreen4, key=1, label=fail, style=dashed];
m8_30 -> m8_37  [color=darkseagreen4, key=1, label=fail, style=dashed];
m8_30 -> m8_39  [color=darkseagreen4, key=1, label=fail, style=dashed];
m8_48 -> m8_51  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m8_20 -> m8_26  [color=darkseagreen4, key=1, label="System.Func<CommandLine.Core.SpecificationProperty, object>", style=dashed];
m8_21 -> m8_25  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_15 -> m8_18  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m8_54 -> m8_26  [color=darkseagreen4, key=1, label="System.Func<CommandLine.Core.SpecificationProperty, object>", style=dashed];
m10_20 -> m10_22  [color=darkseagreen4, key=1, label=oi, style=dashed];
m10_9 -> m10_11  [color=darkseagreen4, key=1, label=oa, style=dashed];
m10_9 -> m10_13  [color=darkseagreen4, key=1, label=oa, style=dashed];
m10_10 -> m10_12  [color=darkseagreen4, key=1, label=oi, style=dashed];
m10_38 -> m10_50  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, CommandLine.Infrastructure.OptionInfo>", style=dashed];
m10_38 -> m10_53  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, CommandLine.Infrastructure.OptionInfo>", style=dashed];
m10_38 -> m10_54  [color=darkseagreen4, key=1, label="ref CommandLine.Infrastructure.OptionMap", style=dashed];
m10_38 -> m10_55  [color=darkseagreen4, key=1, label="ref CommandLine.Infrastructure.OptionMap", style=dashed];
m10_46 -> m10_53  [color=darkseagreen4, key=1, label=option3, style=dashed];
m10_27 -> m10_29  [color=darkseagreen4, key=1, label=omBuilder, style=dashed];
m10_27 -> m10_30  [color=darkseagreen4, key=1, label=omBuilder, style=dashed];
m10_27 -> m10_32  [color=darkseagreen4, key=1, label=omBuilder, style=dashed];
m10_27 -> m10_33  [color=darkseagreen4, key=1, label=omBuilder, style=dashed];
m10_27 -> m10_34  [color=darkseagreen4, key=1, label=omBuilder, style=dashed];
m10_31 -> m10_33  [color=darkseagreen4, key=1, label=optionMap, style=dashed];
m10_31 -> m10_34  [color=darkseagreen4, key=1, label=optionMap, style=dashed];
m10_56 -> m10_11  [color=darkseagreen4, key=1, label="CommandLine.Tests.Unit.Infrastructure.OptionMapFixture.OptionMapBuilder", style=dashed];
m10_56 -> m10_12  [color=darkseagreen4, key=1, label="CommandLine.Tests.Unit.Infrastructure.OptionMapFixture.OptionMapBuilder", style=dashed];
m10_56 -> m10_13  [color=darkseagreen4, key=1, label="CommandLine.Tests.Unit.Infrastructure.OptionMapFixture.OptionMapBuilder", style=dashed];
m10_56 -> m10_22  [color=darkseagreen4, key=1, label="CommandLine.Tests.Unit.Infrastructure.OptionMapFixture.OptionMapBuilder", style=dashed];
m11_11 -> m11_22  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_11 -> m11_26  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_11 -> m11_14  [color=darkseagreen4, key=1, label=options, style=dashed];
m11_12 -> m11_30  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_14 -> m11_33  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_41 -> m11_50  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_41 -> m11_54  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_41 -> m11_61  [color=darkseagreen4, key=1, label=setsWithTrue, style=dashed];
m11_42 -> m11_57  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_42 -> m11_60  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_42 -> m11_65  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_42 -> m11_44  [color=darkseagreen4, key=1, label=requiredButEmpty, style=dashed];
m11_40 -> m11_42  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m11_44 -> m11_70  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_78 -> m11_83  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_78 -> m11_80  [color=darkseagreen4, key=1, label=options, style=dashed];
m11_80 -> m11_87  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_95 -> m11_104  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_38 -> m11_41  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m11_38 -> m11_42  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m11_108 -> m11_61  [color=darkseagreen4, key=1, label=setsWithTrue, style=dashed];
m14_16 -> m14_18  [color=darkseagreen4, key=1, label=string, style=dashed];
m14_0 -> m14_2  [color=darkseagreen4, key=1, label=string, style=dashed];
m14_10 -> m14_12  [color=darkseagreen4, key=1, label=string, style=dashed];
m14_5 -> m14_7  [color=darkseagreen4, key=1, label=string, style=dashed];
m16_0 -> m16_5  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m16_0 -> m16_12  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m16_1 -> m16_4  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m16_1 -> m16_1  [color=darkseagreen4, key=1, label=tseq, style=dashed];
m16_5 -> m16_11  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m16_4 -> m16_12  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m16_42 -> m16_5  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m16_42 -> m16_12  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m16_43 -> m16_5  [color=darkseagreen4, key=1, label="System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>", style=dashed];
m16_44 -> m16_12  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
m19_16 -> m19_19  [color=darkseagreen4, key=1, label="CommandLine.Error", style=dashed];
m19_16 -> m19_21  [color=darkseagreen4, key=1, label="CommandLine.Error", style=dashed];
m19_16 -> m19_23  [color=darkseagreen4, key=1, label="CommandLine.Error", style=dashed];
m19_16 -> m19_34  [color=darkseagreen4, key=1, label="CommandLine.Error", style=dashed];
m19_43 -> m19_50  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m19_51 -> m19_54  [color=darkseagreen4, key=1, label=names, style=dashed];
m19_52 -> m19_54  [color=darkseagreen4, key=1, label=namesCount, style=dashed];
m20_71 -> m20_73  [color=darkseagreen4, key=1, label=lines, style=dashed];
m20_71 -> m20_74  [color=darkseagreen4, key=1, label=lines, style=dashed];
m20_71 -> m20_75  [color=darkseagreen4, key=1, label=lines, style=dashed];
m20_72 -> m20_92  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m20_67 -> m20_85  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m20_67 -> m20_89  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m20_67 -> m20_76  [color=darkseagreen4, key=1, label=invokedVerb, style=dashed];
m20_67 -> m20_77  [color=darkseagreen4, key=1, label=invokedVerbInstance, style=dashed];
m20_117 -> m20_119  [color=darkseagreen4, key=1, label=invokedVerb, style=dashed];
m20_86 -> m20_88  [color=darkseagreen4, key=1, label=invokedVerb, style=dashed];
m20_10 -> m20_34  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m20_9 -> m20_11  [color=darkseagreen4, key=1, label=lines, style=dashed];
m20_9 -> m20_12  [color=darkseagreen4, key=1, label=lines, style=dashed];
m20_9 -> m20_13  [color=darkseagreen4, key=1, label=lines, style=dashed];
m20_5 -> m20_31  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m20_47 -> m20_57  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m20_46 -> m20_48  [color=darkseagreen4, key=1, label=lines, style=dashed];
m20_42 -> m20_54  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m20_102 -> m20_116  [color=green, key=1, label="lambda expression", style=dashed];
m20_102 -> m20_120  [color=green, key=1, label="lambda expression", style=dashed];
m20_102 -> m20_109  [color=green, key=1, label=invokedVerb, style=dashed];
m20_102 -> m20_110  [color=green, key=1, label=invokedVerbInstance, style=dashed];
m20_107 -> m20_123  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m20_106 -> m20_108  [color=darkseagreen4, key=1, label=lines, style=dashed];
m21_0 -> m21_8  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m21_1 -> m21_6  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m21_14 -> m21_8  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m21_15 -> m21_8  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Error>>>", style=dashed];
m22_3 -> m22_12  [color=darkseagreen4, key=1, label="CommandLine.Internal.IArgumentEnumerator", style=dashed];
m22_3 -> m22_28  [color=darkseagreen4, key=1, label="CommandLine.Internal.IArgumentEnumerator", style=dashed];
m22_3 -> m22_41  [color=darkseagreen4, key=1, label="CommandLine.Internal.OptionMap", style=dashed];
m22_3 -> m22_43  [color=darkseagreen4, key=1, label=object, style=dashed];
m22_4 -> m22_12  [color=darkseagreen4, key=1, label=group, style=dashed];
m22_4 -> m22_15  [color=darkseagreen4, key=1, label=group, style=dashed];
m22_4 -> m22_23  [color=darkseagreen4, key=1, label=group, style=dashed];
m22_4 -> m22_41  [color=darkseagreen4, key=1, label=group, style=dashed];
m22_6 -> m22_10  [color=darkseagreen4, key=1, label=option, style=dashed];
m22_6 -> m22_11  [color=darkseagreen4, key=1, label=option, style=dashed];
m22_6 -> m22_16  [color=darkseagreen4, key=1, label=option, style=dashed];
m22_6 -> m22_19  [color=darkseagreen4, key=1, label=option, style=dashed];
m22_6 -> m22_21  [color=darkseagreen4, key=1, label=option, style=dashed];
m22_6 -> m22_26  [color=darkseagreen4, key=1, label=option, style=dashed];
m22_6 -> m22_30  [color=darkseagreen4, key=1, label=option, style=dashed];
m22_6 -> m22_35  [color=darkseagreen4, key=1, label=option, style=dashed];
m22_6 -> m22_39  [color=darkseagreen4, key=1, label=option, style=dashed];
m22_6 -> m22_43  [color=darkseagreen4, key=1, label=option, style=dashed];
m22_17 -> m22_20  [color=darkseagreen4, key=1, label=valueSetting, style=dashed];
m22_24 -> m22_27  [color=darkseagreen4, key=1, label=valueSetting, style=dashed];
m22_31 -> m22_34  [color=darkseagreen4, key=1, label=valueSetting, style=dashed];
m22_37 -> m22_40  [color=darkseagreen4, key=1, label=valueSetting, style=dashed];
m22_62 -> m22_19  [color=darkseagreen4, key=1, label="CommandLine.Internal.OptionGroupParser", style=dashed];
m22_62 -> m22_26  [color=darkseagreen4, key=1, label="CommandLine.Internal.OptionGroupParser", style=dashed];
m22_62 -> m22_39  [color=darkseagreen4, key=1, label="CommandLine.Internal.OptionGroupParser", style=dashed];
m23_0 -> m23_8  [color=darkseagreen4, key=1, label="CommandLine.BaseOptionAttribute", style=dashed];
m23_0 -> m23_9  [color=darkseagreen4, key=1, label="CommandLine.BaseOptionAttribute", style=dashed];
m23_0 -> m23_10  [color=darkseagreen4, key=1, label="CommandLine.BaseOptionAttribute", style=dashed];
m23_0 -> m23_3  [color=darkseagreen4, key=1, label="System.Reflection.PropertyInfo", style=dashed];
m23_1 -> m23_3  [color=darkseagreen4, key=1, label=ae, style=dashed];
m23_17 -> m23_21  [color=green, key=1, label=string, style=dashed];
m23_17 -> m23_22  [color=green, key=1, label=string, style=dashed];
m23_17 -> m23_19  [color=darkseagreen4, key=1, label=string, style=dashed];
m23_13 -> m23_4  [color=darkseagreen4, key=1, label="CommandLine.Tests.Unit.Infrastructure.ArgumentParserFixture", style=dashed];
m23_60 -> m23_62  [color=darkseagreen4, key=1, label=object, style=dashed];
m23_50 -> m23_53  [color=green, key=1, label=fieldRef, style=dashed];
m23_28 -> m23_34  [color=darkseagreen4, key=1, label=object, style=dashed];
m23_28 -> m23_33  [color=darkseagreen4, key=1, label="System.Collections.Generic.IList<string>", style=dashed];
m23_29 -> m23_33  [color=darkseagreen4, key=1, label=elementType, style=dashed];
m23_30 -> m23_34  [color=darkseagreen4, key=1, label=array, style=dashed];
m23_30 -> m23_32  [color=darkseagreen4, key=1, label=array, style=dashed];
m23_30 -> m23_33  [color=darkseagreen4, key=1, label=array, style=dashed];
m23_37 -> m23_37  [color=darkseagreen4, key=1, label=i, style=dashed];
m23_31 -> m23_33  [color=darkseagreen4, key=1, label=i, style=dashed];
m23_31 -> m23_37  [color=darkseagreen4, key=1, label=i, style=dashed];
m23_76 -> m23_13  [color=green, key=1, label="CommandLine.Internal.OptionInfo", style=dashed];
m23_76 -> m23_21  [color=green, key=1, label="CommandLine.Internal.OptionInfo", style=dashed];
m23_76 -> m23_22  [color=green, key=1, label="CommandLine.Internal.OptionInfo", style=dashed];
m23_76 -> m23_8  [color=darkseagreen4, key=1, label="CommandLine.Internal.OptionInfo", style=dashed];
m23_76 -> m23_9  [color=darkseagreen4, key=1, label="CommandLine.Internal.OptionInfo", style=dashed];
m23_76 -> m23_10  [color=darkseagreen4, key=1, label="CommandLine.Internal.OptionInfo", style=dashed];
m23_76 -> m23_18  [color=darkseagreen4, key=1, label="CommandLine.Internal.OptionInfo", style=dashed];
m23_76 -> m23_19  [color=darkseagreen4, key=1, label="CommandLine.Internal.OptionInfo", style=dashed];
m23_76 -> m23_20  [color=darkseagreen4, key=1, label="CommandLine.Internal.OptionInfo", style=dashed];
m23_76 -> m23_34  [color=darkseagreen4, key=1, label="CommandLine.Internal.OptionInfo", style=dashed];
m23_76 -> m23_46  [color=darkseagreen4, key=1, label="CommandLine.Internal.OptionInfo", style=dashed];
m23_76 -> m23_49  [color=darkseagreen4, key=1, label="CommandLine.Internal.OptionInfo", style=dashed];
m23_76 -> m23_61  [color=darkseagreen4, key=1, label="CommandLine.Internal.OptionInfo", style=dashed];
m23_76 -> m23_62  [color=darkseagreen4, key=1, label="CommandLine.Internal.OptionInfo", style=dashed];
m23_76 -> m23_68  [color=darkseagreen4, key=1, label="CommandLine.Internal.OptionInfo", style=dashed];
m23_76 -> m23_71  [color=darkseagreen4, key=1, label="CommandLine.Internal.OptionInfo", style=dashed];
m24_18 -> m24_22  [color=darkseagreen4, key=1, label=list, style=dashed];
m24_21 -> m24_26  [color=darkseagreen4, key=1, label=map, style=dashed];
m24_54 -> m24_59  [color=darkseagreen4, key=1, label=requiredRulesAllMet, style=dashed];
m24_55 -> m24_57  [color=darkseagreen4, key=1, label=option, style=dashed];
m24_58 -> m24_59  [color=darkseagreen4, key=1, label=requiredRulesAllMet, style=dashed];
m24_73 -> m24_76  [color=darkseagreen4, key=1, label="CommandLine.Internal.OptionInfo", style=dashed];
m24_74 -> m24_76  [color=darkseagreen4, key=1, label=setName, style=dashed];
m24_74 -> m24_77  [color=darkseagreen4, key=1, label=setName, style=dashed];
m24_61 -> m24_85  [color=darkseagreen4, key=1, label=object, style=dashed];
m24_61 -> m24_86  [color=darkseagreen4, key=1, label=object, style=dashed];
m24_61 -> m24_91  [color=darkseagreen4, key=1, label="bool?", style=dashed];
m24_61 -> m24_93  [color=darkseagreen4, key=1, label="bool?", style=dashed];
m24_87 -> m24_95  [color=darkseagreen4, key=1, label=parserState, style=dashed];
m24_90 -> m24_95  [color=darkseagreen4, key=1, label=error, style=dashed];
m24_84 -> m24_86  [color=darkseagreen4, key=1, label=property, style=dashed];
m24_30 -> m24_32  [color=darkseagreen4, key=1, label="System.Collections.Generic.IList<CommandLine.Internal.Pair<System.Reflection.PropertyInfo, CommandLine.VerbOptionAttribute>>", style=dashed];
m24_30 -> m24_34  [color=darkseagreen4, key=1, label=object, style=dashed];
m24_31 -> m24_38  [color=darkseagreen4, key=1, label=map, style=dashed];
m24_32 -> m24_34  [color=darkseagreen4, key=1, label=verb, style=dashed];
m24_32 -> m24_35  [color=darkseagreen4, key=1, label=verb, style=dashed];
m24_64 -> m24_66  [color=darkseagreen4, key=1, label=option, style=dashed];
m24_67 -> m24_69  [color=darkseagreen4, key=1, label=info, style=dashed];
m24_101 -> m24_6  [color=darkseagreen4, key=1, label="CommandLine.Internal.OptionMap.MutuallyExclusiveInfo", style=dashed];
m24_102 -> m24_10  [color=darkseagreen4, key=1, label="CommandLine.Internal.OptionMap", style=dashed];
m24_102 -> m24_13  [color=darkseagreen4, key=1, label="CommandLine.Internal.OptionMap", style=dashed];
m24_102 -> m24_45  [color=darkseagreen4, key=1, label="CommandLine.Internal.OptionMap", style=dashed];
m24_102 -> m24_50  [color=darkseagreen4, key=1, label="CommandLine.Internal.OptionMap", style=dashed];
m24_102 -> m24_51  [color=darkseagreen4, key=1, label="CommandLine.Internal.OptionMap", style=dashed];
m24_102 -> m24_55  [color=darkseagreen4, key=1, label="CommandLine.Internal.OptionMap", style=dashed];
m24_102 -> m24_57  [color=darkseagreen4, key=1, label="CommandLine.Internal.OptionMap", style=dashed];
m24_102 -> m24_62  [color=darkseagreen4, key=1, label="CommandLine.Internal.OptionMap", style=dashed];
m24_102 -> m24_64  [color=darkseagreen4, key=1, label="CommandLine.Internal.OptionMap", style=dashed];
m24_102 -> m24_66  [color=darkseagreen4, key=1, label="CommandLine.Internal.OptionMap", style=dashed];
m24_102 -> m24_67  [color=darkseagreen4, key=1, label="CommandLine.Internal.OptionMap", style=dashed];
m24_102 -> m24_69  [color=darkseagreen4, key=1, label="CommandLine.Internal.OptionMap", style=dashed];
m24_102 -> m24_75  [color=darkseagreen4, key=1, label="CommandLine.Internal.OptionMap", style=dashed];
m24_102 -> m24_76  [color=darkseagreen4, key=1, label="CommandLine.Internal.OptionMap", style=dashed];
m24_102 -> m24_77  [color=darkseagreen4, key=1, label="CommandLine.Internal.OptionMap", style=dashed];
m25_1 -> m25_4  [color=darkseagreen4, key=1, label=expected, style=dashed];
m26_22 -> m26_25  [color=green, key=1, label=expectedTokens, style=dashed];
m26_23 -> m26_28  [color=green, key=1, label=specs, style=dashed];
m26_24 -> m26_27  [color=green, key=1, label="lambda expression", style=dashed];
m26_1 -> m26_4  [color=green, key=1, label=expectedTokens, style=dashed];
m26_2 -> m26_18  [color=green, key=1, label=specs, style=dashed];
m26_3 -> m26_17  [color=green, key=1, label="lambda expression", style=dashed];
m26_30 -> m26_18  [color=green, key=1, label=specs, style=dashed];
m26_31 -> m26_28  [color=green, key=1, label=specs, style=dashed];
m31_40 -> m31_42  [color=darkseagreen4, key=1, label="int[]", style=dashed];
m31_41 -> m31_44  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m31_306 -> m31_308  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.FakeOptionsWithScalarValueAndSequenceStringAdjacent", style=dashed];
m31_307 -> m31_310  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m31_159 -> m31_161  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m31_160 -> m31_163  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m31_234 -> m31_236  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m31_235 -> m31_238  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m31_275 -> m31_277  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m31_276 -> m31_279  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m31_151 -> m31_153  [color=darkseagreen4, key=1, label="long[]", style=dashed];
m31_152 -> m31_155  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m31_143 -> m31_145  [color=darkseagreen4, key=1, label="long[]", style=dashed];
m31_144 -> m31_147  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m31_242 -> m31_244  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m31_243 -> m31_247  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m31_55 -> m31_57  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m31_56 -> m31_59  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m31_266 -> m31_268  [color=darkseagreen4, key=1, label=string, style=dashed];
m31_267 -> m31_271  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m31_208 -> m31_210  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m31_209 -> m31_212  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m31_31 -> m31_33  [color=darkseagreen4, key=1, label="int[]", style=dashed];
m31_32 -> m31_36  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m31_1 -> m31_13  [color=darkseagreen4, key=1, label=fakeOptions, style=dashed];
m31_2 -> m31_4  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m31_3 -> m31_12  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m31_225 -> m31_227  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m31_226 -> m31_229  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m31_291 -> m31_293  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m31_292 -> m31_295  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m31_176 -> m31_181  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m31_176 -> m31_185  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m31_177 -> m31_180  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m31_181 -> m31_184  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m31_216 -> m31_218  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m31_217 -> m31_221  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m31_100 -> m31_102  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Colors", style=dashed];
m31_101 -> m31_105  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m31_102 -> m31_102  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Colors", style=dashed];
m31_127 -> m31_129  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m31_128 -> m31_131  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m31_167 -> m31_170  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m31_169 -> m31_173  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m31_169 -> m31_176  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m31_84 -> m31_86  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m31_85 -> m31_88  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m31_299 -> m31_301  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.FakeOptionsWithRequiredValue", style=dashed];
m31_300 -> m31_303  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m31_259 -> m31_261  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m31_260 -> m31_263  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m31_64 -> m31_66  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m31_65 -> m31_70  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m31_135 -> m31_137  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m31_136 -> m31_140  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m31_283 -> m31_285  [color=darkseagreen4, key=1, label=string, style=dashed];
m31_284 -> m31_287  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m31_74 -> m31_76  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m31_75 -> m31_79  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m31_92 -> m31_94  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m31_93 -> m31_96  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m31_199 -> m31_201  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m31_200 -> m31_204  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m31_47 -> m31_49  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m31_48 -> m31_51  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m31_15 -> m31_17  [color=darkseagreen4, key=1, label=long, style=dashed];
m31_16 -> m31_20  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m31_251 -> m31_253  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m31_252 -> m31_255  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m31_119 -> m31_121  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m31_120 -> m31_123  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m31_110 -> m31_112  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m31_111 -> m31_115  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m31_23 -> m31_25  [color=darkseagreen4, key=1, label=double, style=dashed];
m31_24 -> m31_27  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m31_189 -> m31_191  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
m31_190 -> m31_194  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m31_314 -> m31_13  [color=darkseagreen4, key=1, label=fakeOptions, style=dashed];
m31_315 -> m31_181  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m31_315 -> m31_185  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m42_7 -> m42_16  [color=green, key=1, label="CommandLine.Core.SpecificationProperty", style=dashed];
m42_7 -> m42_20  [color=green, key=1, label="CommandLine.Core.SpecificationProperty", style=dashed];
m42_7 -> m42_27  [color=green, key=1, label="CommandLine.Core.SpecificationProperty", style=dashed];
m42_8 -> m42_15  [color=green, key=1, label="lambda expression", style=dashed];
m42_8 -> m42_19  [color=green, key=1, label="lambda expression", style=dashed];
m42_16 -> m42_16  [color=green, key=1, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", style=dashed];
m42_20 -> m42_26  [color=green, key=1, label="lambda expression", style=dashed];
m42_0 -> m42_8  [color=green, key=1, label="System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>", style=dashed];
m42_0 -> m42_16  [color=green, key=1, label="System.StringComparer", style=dashed];
m42_0 -> m42_20  [color=green, key=1, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>", style=dashed];
m42_1 -> m42_7  [color=green, key=1, label="lambda expression", style=dashed];
m42_2 -> m42_31  [color=green, key=1, label="lambda expression", style=dashed];
m42_2 -> m42_34  [color=green, key=1, label="lambda expression", style=dashed];
m42_2 -> m42_37  [color=green, key=1, label="lambda expression", style=dashed];
m42_40 -> m42_8  [color=green, key=1, label="System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>>", style=dashed];
m42_41 -> m42_8  [color=green, key=1, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>", style=dashed];
m42_41 -> m42_20  [color=green, key=1, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Type, bool, CSharpx.Maybe<object>>", style=dashed];
m42_42 -> m42_8  [color=green, key=1, label="System.StringComparer", style=dashed];
m42_42 -> m42_16  [color=green, key=1, label="System.StringComparer", style=dashed];
m42_43 -> m42_16  [color=green, key=1, label="CommandLine.Core.SpecificationProperty", style=dashed];
m42_43 -> m42_20  [color=green, key=1, label="CommandLine.Core.SpecificationProperty", style=dashed];
m42_43 -> m42_27  [color=green, key=1, label="CommandLine.Core.SpecificationProperty", style=dashed];
}
