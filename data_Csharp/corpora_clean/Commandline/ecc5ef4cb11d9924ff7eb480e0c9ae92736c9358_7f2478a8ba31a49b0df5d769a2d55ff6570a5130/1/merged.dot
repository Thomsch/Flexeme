digraph  {
n44 [label=specs, span=""];
n45 [label=result, span=""];
n46 [label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", span=""];
n47 [label=specs, span=""];
n48 [label=result, span=""];
n49 [label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>", span=""];
n0 [label="Entry CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", span="14-14", cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()"];
n1 [label="var expectedSequence = new[]\r\n                {\r\n                    new KeyValuePair<string, IEnumerable<string>>(''i'', new[] {''10'', ''20'', ''30'', ''40''}) \r\n                }", span="17-20", cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()"];
n2 [label="var specs =new[]\r\n                {\r\n                    new OptionSpecification(string.Empty, ''stringvalue'', false, string.Empty, Maybe.Nothing<int>(), Maybe.Nothing<int>(), '\0', null, string.Empty, string.Empty, new List<string>(), typeof(string), TargetType.Scalar),\r\n                    new OptionSpecification(''i'', string.Empty, false, string.Empty, Maybe.Just(3), Maybe.Just(4), '\0', null, string.Empty, string.Empty, new List<string>(), typeof(IEnumerable<int>), TargetType.Sequence)\r\n                }", span="21-25", cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()"];
n6 [label="Entry System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", span="0-0", cluster="System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)"];
n4 [label="Assert.True(expectedSequence.All(a => result.Options.Any(r => a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value))))", span="34-34", cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()"];
n3 [label="var result = TokenPartitioner.Partition(\r\n                new[] { Token.Name(''i''), Token.Value(''10''), Token.Value(''20''), Token.Value(''30''), Token.Value(''40'') },\r\n                name => TypeLookup.FindTypeDescriptorAndSibling(name, specs, StringComparer.InvariantCulture)\r\n                )", span="28-31", cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()"];
n7 [label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CSharpx.Maybe<int>, CSharpx.Maybe<int>, char, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)", span="16-16", cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CSharpx.Maybe<int>, CSharpx.Maybe<int>, char, CSharpx.Maybe<object>, string, string, System.Collections.Generic.IEnumerable<string>, System.Type, CommandLine.Core.TargetType)"];
n8 [label="Entry CSharpx.Maybe.Nothing<T>()", span="116-116", cluster="CSharpx.Maybe.Nothing<T>()"];
n9 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()"];
n10 [label="Entry CSharpx.Maybe.Just<T>(T)", span="124-124", cluster="CSharpx.Maybe.Just<T>(T)"];
n17 [label="TypeLookup.FindTypeDescriptorAndSibling(name, specs, StringComparer.InvariantCulture)", span="30-30", cluster="lambda expression"];
n11 [label="Entry CommandLine.Core.Token.Name(string)", span="19-19", cluster="CommandLine.Core.Token.Name(string)"];
n12 [label="Entry CommandLine.Core.Token.Value(string)", span="24-24", cluster="CommandLine.Core.Token.Value(string)"];
n13 [label="Entry CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)", span="12-12", cluster="CommandLine.Core.TokenPartitioner.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CSharpx.Maybe<CommandLine.Core.TypeDescriptor>>)"];
n16 [label="Entry lambda expression", span="30-30", cluster="lambda expression"];
n21 [label="result.Options.Any(r => a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value))", span="34-34", cluster="lambda expression"];
n5 [label="Exit CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()", span="14-14", cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence()"];
n14 [label="Entry Unk.All", span="", cluster="Unk.All"];
n15 [label="Entry Unk.True", span="", cluster="Unk.True"];
n20 [label="Entry lambda expression", span="34-34", cluster="lambda expression"];
n18 [label="Exit lambda expression", span="30-30", cluster="lambda expression"];
n19 [label="Entry CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="11-11", cluster="CommandLine.Core.TypeLookup.FindTypeDescriptorAndSibling(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)"];
n22 [label="Exit lambda expression", span="34-34", cluster="lambda expression"];
n23 [label="Entry Unk.Any", span="", cluster="Unk.Any"];
n24 [label="Entry lambda expression", span="34-34", cluster="lambda expression"];
n25 [label="a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value)", span="34-34", cluster="lambda expression"];
n26 [label="Exit lambda expression", span="34-34", cluster="lambda expression"];
n27 [label="Entry string.Equals(string)", span="0-0", cluster="string.Equals(string)"];
n28 [label="Entry Unk.SequenceEqual", span="", cluster="Unk.SequenceEqual"];
n29 [label="Entry CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", span="40-40", cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()"];
n30 [label="var expectedSequence = new[]\r\n                {\r\n                    new KeyValuePair<string, IEnumerable<string>>(''i'', new[] {''10'', ''10'', ''30'', ''40''}) \r\n                }", span="43-46", cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()"];
n31 [label="var specs =new[]\r\n                {\r\n                    new OptionSpecification(string.Empty, ''stringvalue'', false, string.Empty, Maybe.Nothing<int>(), Maybe.Nothing<int>(), '\0', null, string.Empty, string.Empty, new List<string>(), typeof(string), TargetType.Scalar),\r\n                    new OptionSpecification(''i'', string.Empty, false, string.Empty, Maybe.Just(3), Maybe.Just(4), '\0', null, string.Empty, string.Empty, new List<string>(), typeof(IEnumerable<int>), TargetType.Sequence)\r\n                }", span="47-51", cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()"];
n33 [label="Assert.True(expectedSequence.All(a => result.Options.Any(r => a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value))))", span="60-60", cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()"];
n32 [label="var result = TokenPartitioner.Partition(\r\n                new[] { Token.Name(''i''), Token.Value(''10''), Token.Value(''10''), Token.Value(''30''), Token.Value(''40'') },\r\n                name => TypeLookup.FindTypeDescriptorAndSibling(name, specs, StringComparer.InvariantCulture)\r\n                )", span="54-57", cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", color=red, community=0];
n36 [label="TypeLookup.FindTypeDescriptorAndSibling(name, specs, StringComparer.InvariantCulture)", span="56-56", cluster="lambda expression", color=red, community=0];
n35 [label="Entry lambda expression", span="56-56", cluster="lambda expression"];
n39 [label="result.Options.Any(r => a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value))", span="60-60", cluster="lambda expression"];
n34 [label="Exit CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()", span="40-40", cluster="CommandLine.Tests.Unit.Core.TokenPartitionerTests.Partition_sequence_returns_sequence_with_duplicates()"];
n38 [label="Entry lambda expression", span="60-60", cluster="lambda expression"];
n37 [label="Exit lambda expression", span="56-56", cluster="lambda expression"];
n40 [label="Exit lambda expression", span="60-60", cluster="lambda expression"];
n41 [label="Entry lambda expression", span="60-60", cluster="lambda expression"];
n42 [label="a.Key.Equals(r.Key) && a.Value.SequenceEqual(r.Value)", span="60-60", cluster="lambda expression"];
n43 [label="Exit lambda expression", span="60-60", cluster="lambda expression"];
n44 -> n17  [key=1, style=dashed, color=darkseagreen4, label=specs];
n45 -> n21  [key=1, style=dashed, color=darkseagreen4, label=result];
n46 -> n25  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>"];
n47 -> n36  [key=1, style=dashed, color=red, label=specs];
n48 -> n39  [key=1, style=dashed, color=darkseagreen4, label=result];
n49 -> n42  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>"];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n1 -> n6  [key=2, style=dotted];
n1 -> n4  [key=1, style=dashed, color=darkseagreen4, label=expectedSequence];
n2 -> n3  [key=0, style=solid];
n2 -> n7  [key=2, style=dotted];
n2 -> n8  [key=2, style=dotted];
n2 -> n9  [key=2, style=dotted];
n2 -> n10  [key=2, style=dotted];
n2 -> n17  [key=1, style=dashed, color=darkseagreen4, label=specs];
n4 -> n5  [key=0, style=solid];
n4 -> n14  [key=2, style=dotted];
n4 -> n15  [key=2, style=dotted];
n4 -> n20  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n3 -> n4  [key=0, style=solid];
n3 -> n11  [key=2, style=dotted];
n3 -> n12  [key=2, style=dotted];
n3 -> n13  [key=2, style=dotted];
n3 -> n16  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n3 -> n21  [key=1, style=dashed, color=darkseagreen4, label=result];
n17 -> n18  [key=0, style=solid];
n17 -> n19  [key=2, style=dotted];
n16 -> n17  [key=0, style=solid];
n21 -> n22  [key=0, style=solid];
n21 -> n23  [key=2, style=dotted];
n21 -> n24  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n21 -> n25  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>"];
n5 -> n0  [key=0, style=bold, color=blue];
n20 -> n21  [key=0, style=solid];
n18 -> n16  [key=0, style=bold, color=blue];
n22 -> n20  [key=0, style=bold, color=blue];
n24 -> n25  [key=0, style=solid];
n25 -> n26  [key=0, style=solid];
n25 -> n27  [key=2, style=dotted];
n25 -> n28  [key=2, style=dotted];
n25 -> n25  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>"];
n26 -> n24  [key=0, style=bold, color=blue];
n29 -> n30  [key=0, style=solid];
n30 -> n31  [key=0, style=solid];
n30 -> n6  [key=2, style=dotted];
n30 -> n33  [key=1, style=dashed, color=darkseagreen4, label=expectedSequence];
n31 -> n32  [key=0, style=solid, color=red];
n31 -> n7  [key=2, style=dotted];
n31 -> n8  [key=2, style=dotted];
n31 -> n9  [key=2, style=dotted];
n31 -> n10  [key=2, style=dotted];
n31 -> n36  [key=1, style=dashed, color=red, label=specs];
n33 -> n34  [key=0, style=solid];
n33 -> n14  [key=2, style=dotted];
n33 -> n15  [key=2, style=dotted];
n33 -> n38  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n32 -> n33  [key=0, style=solid, color=red];
n32 -> n11  [key=2, style=dotted, color=red];
n32 -> n12  [key=2, style=dotted, color=red];
n32 -> n13  [key=2, style=dotted, color=red];
n32 -> n35  [key=1, style=dashed, color=red, label="lambda expression"];
n32 -> n39  [key=1, style=dashed, color=red, label=result];
n36 -> n37  [key=0, style=solid, color=red];
n36 -> n19  [key=2, style=dotted, color=red];
n35 -> n36  [key=0, style=solid, color=red];
n39 -> n40  [key=0, style=solid];
n39 -> n23  [key=2, style=dotted];
n39 -> n41  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n39 -> n42  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>"];
n34 -> n29  [key=0, style=bold, color=blue];
n38 -> n39  [key=0, style=solid];
n37 -> n35  [key=0, style=bold, color=blue];
n40 -> n38  [key=0, style=bold, color=blue];
n41 -> n42  [key=0, style=solid];
n42 -> n43  [key=0, style=solid];
n42 -> n27  [key=2, style=dotted];
n42 -> n28  [key=2, style=dotted];
n42 -> n42  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.KeyValuePair<string, System.Collections.Generic.IEnumerable<string>>"];
n43 -> n41  [key=0, style=bold, color=blue];
}
