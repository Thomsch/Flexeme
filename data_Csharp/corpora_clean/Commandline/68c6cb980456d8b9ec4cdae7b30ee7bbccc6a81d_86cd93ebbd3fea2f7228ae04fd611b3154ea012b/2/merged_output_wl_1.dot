digraph  {
m1_40 [cluster="CommandLine.Core.OptionSpecification.FromOptionSpecification()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.OptionSpecification.FromOptionSpecification()", span="15-15"];
m1_135 [cluster="NameInfo.cstr", file="SpecificationPropertyRules.cs", label="Entry NameInfo.cstr", span=""];
m1_4 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", span="24-24"];
m1_8 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", color=green, community=0, file="SpecificationPropertyRules.cs", label="0: return specProps =>\r\n            {\r\n                var options = specProps\r\n                        .Where(sp => sp.Specification.IsOption())\r\n                        .Where(sp => sp.Value.IsJust())\r\n                        .Where(sp => ((OptionSpecification)sp.Specification).SetName.Length > 0);\r\n                    var groups = options.GroupBy(g => ((OptionSpecification)g.Specification).SetName);\r\n                    if (groups.Count() > 1)\r\n                    {\r\n                        return options.Select(s =>\r\n                            new MutuallyExclusiveSetError(\r\n                                ((OptionSpecification)s.Specification).FromOptionSpecification()));\r\n                    }\r\n                    return Enumerable.Empty<Error>();\r\n                };", span="26-40"];
m1_9 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", file="SpecificationPropertyRules.cs", label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceMutuallyExclusiveSet()", span="24-24"];
m1_117 [cluster="CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Infrastructure.Maybe<T>.IsJust<T>()", span="149-149"];
m1_6 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceRange()", span="86-86"];
m1_105 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", color=green, community=0, file="SpecificationPropertyRules.cs", label="0: return specProps =>\r\n                {\r\n                    var options = specProps.Where(\r\n                        sp => sp.Specification.TargetType == TargetType.Sequence\r\n                        && sp.Value.IsJust()\r\n                        && (\r\n                            (sp.Specification.Min.IsJust() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min.FromJust())\r\n                            || (sp.Specification.Max.IsJust() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max.FromJust())\r\n                        )\r\n                    );\r\n                    if (options.Any())\r\n                    {\r\n                        return options.Select(s => new SequenceOutOfRangeError(\r\n                            s.Specification.FromSpecification()));\r\n                    }\r\n                    return Enumerable.Empty<Error>();\r\n                };", span="88-104"];
m1_106 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRange()", file="SpecificationPropertyRules.cs", label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceRange()", span="86-86"];
m1_52 [cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", file="SpecificationPropertyRules.cs", label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="291-291"];
m1_139 [cluster="CommandLine.Core.Token.IsName()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.Token.IsName()", span="68-68"];
m1_113 [cluster="Unk.Any", file="SpecificationPropertyRules.cs", label="Entry Unk.Any", span=""];
m1_98 [cluster="CommandLine.Core.Specification.IsValue()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.Specification.IsValue()", span="15-15"];
m1_17 [cluster="Unk.Where", file="SpecificationPropertyRules.cs", label="Entry Unk.Where", span=""];
m1_78 [cluster="Unk.IsNothing", file="SpecificationPropertyRules.cs", label="Entry Unk.IsNothing", span=""];
m1_21 [cluster="System.Linq.Enumerable.Empty<TResult>()", file="SpecificationPropertyRules.cs", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
m1_53 [cluster="Unk.FromSpecification", file="SpecificationPropertyRules.cs", label="Entry Unk.FromSpecification", span=""];
m1_118 [cluster="CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Infrastructure.Maybe<T>.FromJust<T>(System.Exception)", span="134-134"];
m1_7 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="107-107"];
m1_123 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="SpecificationPropertyRules.cs", label="return specProps =>\r\n                {\r\n                    var specs = from sp in specProps\r\n                                where sp.Specification.IsOption() && sp.Value.IsJust()\r\n                                select (OptionSpecification)sp.Specification;\r\n                    var options = from t in tokens.Where(t => t.IsName())\r\n                                  join o in specs on t.Text equals o.UniqueName() into to\r\n                                  from o in to.DefaultIfEmpty()\r\n                                  where o != null\r\n                                  select new { o.ShortName, o.LongName };\r\n                    var groups = from x in options\r\n                                 group x by x into g\r\n                                 let count = g.Count()\r\n                                 select new { Value = g.Key, Count = count };\r\n                    var errors = from y in groups\r\n                                 where y.Count > 1\r\n                                 select new RepeatedOptionError(new NameInfo(y.Value.ShortName, y.Value.LongName));\r\n                    return errors;\r\n                };", span="109-127"];
m1_124 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="SpecificationPropertyRules.cs", label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceSingle(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="107-107"];
m1_94 [cluster="Unk.Contains", file="SpecificationPropertyRules.cs", label="Entry Unk.Contains", span=""];
m1_122 [cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", file="SpecificationPropertyRules.cs", label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="324-324"];
m1_0 [cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="12-12"];
m1_1 [cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="SpecificationPropertyRules.cs", label="return new List<Func<IEnumerable<SpecificationProperty>, IEnumerable<Error>>>\r\n                {\r\n                    EnforceMutuallyExclusiveSet(),\r\n                    EnforceRequired(),\r\n                    EnforceRange(),\r\n                    EnforceSingle(tokens)\r\n                };", span="15-21"];
m1_2 [cluster="CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", file="SpecificationPropertyRules.cs", label="Exit CommandLine.Core.SpecificationPropertyRules.Lookup(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>)", span="12-12"];
m1_125 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="109-127"];
m1_11 [cluster="lambda expression", color=green, community=1, file="SpecificationPropertyRules.cs", label="0: var options = specProps\r\n                        .Where(sp => sp.Specification.IsOption())\r\n                        .Where(sp => sp.Value.IsJust())\r\n                        .Where(sp => ((OptionSpecification)sp.Specification).SetName.Length > 0)", span="28-31"];
m1_10 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="26-40"];
m1_12 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="var groups = options.GroupBy(g => ((OptionSpecification)g.Specification).SetName)", span="32-32"];
m1_22 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="29-29"];
m1_26 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="30-30"];
m1_30 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="31-31"];
m1_14 [cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs", label="0: return options.Select(s =>\r\n                            new MutuallyExclusiveSetError(\r\n                                ((OptionSpecification)s.Specification).FromOptionSpecification()));", span="35-37"];
m1_13 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="groups.Count() > 1", span="33-33"];
m1_16 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="26-40"];
m1_36 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="35-37"];
m1_23 [cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs", label="0: sp.Specification.IsOption()", span="29-29"];
m1_24 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="29-29"];
m1_27 [cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs", label="0: sp.Value.IsJust()", span="30-30"];
m1_28 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="30-30"];
m1_31 [cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs", label="0: ((OptionSpecification)sp.Specification).SetName.Length > 0", span="31-31"];
m1_32 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="31-31"];
m1_37 [cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs", label="0: new MutuallyExclusiveSetError(\r\n                                ((OptionSpecification)s.Specification).FromOptionSpecification())", span="36-37"];
m1_38 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="35-37"];
m1_44 [cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs", label="0: var setCount =\r\n                    specProps.Where(sp => sp.Specification.IsOption())\r\n                        .Select(sp => ((OptionSpecification)sp.Specification).SetName)\r\n                        .Distinct()\r\n                        .ToList()\r\n                        .Count()", span="47-52"];
m1_45 [cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs", label="0: var setWithRequired =\r\n                    specProps.Where(sp => sp.Specification.IsOption())\r\n                        .Where(sp => sp.Specification.Required)\r\n                        .Select(sp => ((OptionSpecification)sp.Specification).SetName)\r\n                        .Distinct()\r\n                        .ToList()", span="54-59"];
m1_46 [cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs", label="0: var missing =\r\n                    specProps.Where(sp => sp.Specification.IsOption())\r\n                        .Where(sp => sp.Specification.Required)\r\n                        .Where(sp => sp.Value.IsNothing())\r\n                        .Where(sp => ((OptionSpecification)sp.Specification).SetName.Length == 0)\r\n                        .Concat(\r\n                            specProps.Where(sp => sp.Specification.IsOption())\r\n                                .Where(sp => sp.Specification.Required)\r\n                                .Where(sp => sp.Value.IsNothing())\r\n                                .Where(\r\n                                    sp =>\r\n                                        ((OptionSpecification)sp.Specification).SetName.Length > 0 && setCount == 1\r\n                                        || (setCount > 1\r\n                                            && !setWithRequired.Contains(\r\n                                                ((OptionSpecification)sp.Specification).SetName))))\r\n                        .Concat(\r\n                            specProps\r\n                                .Where(sp => sp.Specification.IsValue())\r\n                                .Where(sp => sp.Specification.Required)\r\n                                .Where(sp => sp.Value.IsNothing())).ToList()", span="61-80"];
m1_43 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="45-83"];
m1_54 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="48-48"];
m1_57 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="49-49"];
m1_92 [cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs", label="0: ((OptionSpecification)sp.Specification).SetName.Length > 0 && setCount == 1\r\n                                        || (setCount > 1\r\n                                            && !setWithRequired.Contains(\r\n                                                ((OptionSpecification)sp.Specification).SetName))", span="72-75"];
m1_60 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="55-55"];
m1_63 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="56-56"];
m1_66 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="57-57"];
m1_47 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="return from sp in missing select new MissingRequiredOptionError(sp.Specification.FromSpecification());", span="82-82"];
m1_69 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="62-62"];
m1_72 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="63-63"];
m1_75 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="64-64"];
m1_79 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="65-65"];
m1_82 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="67-67"];
m1_85 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="68-68"];
m1_88 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="69-69"];
m1_91 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="71-75"];
m1_95 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="78-78"];
m1_99 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="79-79"];
m1_102 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="80-80"];
m1_93 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="71-75"];
m1_55 [cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs", label="0: sp.Specification.IsOption()", span="48-48"];
m1_56 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="48-48"];
m1_58 [cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs", label="0: ((OptionSpecification)sp.Specification).SetName", span="49-49"];
m1_59 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="49-49"];
m1_61 [cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs", label="0: sp.Specification.IsOption()", span="55-55"];
m1_62 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="55-55"];
m1_64 [cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs", label="0: sp.Specification.Required", span="56-56"];
m1_65 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="56-56"];
m1_67 [cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs", label="0: ((OptionSpecification)sp.Specification).SetName", span="57-57"];
m1_68 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="57-57"];
m1_70 [cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs", label="0: sp.Specification.IsOption()", span="62-62"];
m1_71 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="62-62"];
m1_73 [cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs", label="0: sp.Specification.Required", span="63-63"];
m1_74 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="63-63"];
m1_76 [cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs", label="0: sp.Value.IsNothing()", span="64-64"];
m1_77 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="64-64"];
m1_80 [cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs", label="0: ((OptionSpecification)sp.Specification).SetName.Length == 0", span="65-65"];
m1_81 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="65-65"];
m1_83 [cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs", label="0: sp.Specification.IsOption()", span="67-67"];
m1_84 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="67-67"];
m1_86 [cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs", label="0: sp.Specification.Required", span="68-68"];
m1_87 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="68-68"];
m1_89 [cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs", label="0: sp.Value.IsNothing()", span="69-69"];
m1_90 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="69-69"];
m1_96 [cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs", label="0: sp.Specification.IsValue()", span="78-78"];
m1_97 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="78-78"];
m1_100 [cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs", label="0: sp.Specification.Required", span="79-79"];
m1_101 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="79-79"];
m1_103 [cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs", label="0: sp.Value.IsNothing()", span="80-80"];
m1_104 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="80-80"];
m1_108 [cluster="lambda expression", color=green, community=0, file="SpecificationPropertyRules.cs", label="0: var options = specProps.Where(\r\n                        sp => sp.Specification.TargetType == TargetType.Sequence\r\n                        && sp.Value.IsJust()\r\n                        && (\r\n                            (sp.Specification.Min.IsJust() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min.FromJust())\r\n                            || (sp.Specification.Max.IsJust() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max.FromJust())\r\n                        )\r\n                    )", span="90-97"];
m1_107 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="88-104"];
m1_109 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="options.Any()", span="98-98"];
m1_114 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="91-96"];
m1_110 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="return options.Select(s => new SequenceOutOfRangeError(\r\n                            s.Specification.FromSpecification()));", span="100-101"];
m1_115 [cluster="lambda expression", color=green, community=1, file="SpecificationPropertyRules.cs", label="0: sp.Specification.TargetType == TargetType.Sequence\r\n                        && sp.Value.IsJust()\r\n                        && (\r\n                            (sp.Specification.Min.IsJust() && ((Array)sp.Value.FromJust()).Length < sp.Specification.Min.FromJust())\r\n                            || (sp.Specification.Max.IsJust() && ((Array)sp.Value.FromJust()).Length > sp.Specification.Max.FromJust())\r\n                        )", span="91-96"];
m1_116 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="91-96"];
m1_33 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="32-32"];
m1_127 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="var options = from t in tokens.Where(t => t.IsName())\r\n                                  join o in specs on t.Text equals o.UniqueName() into to\r\n                                  from o in to.DefaultIfEmpty()\r\n                                  where o != null\r\n                                  select new { o.ShortName, o.LongName }", span="114-118"];
m1_15 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="return Enumerable.Empty<Error>();", span="39-39"];
m1_126 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="var specs = from sp in specProps\r\n                                where sp.Specification.IsOption() && sp.Value.IsJust()\r\n                                select (OptionSpecification)sp.Specification", span="111-113"];
m1_48 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="45-83"];
m1_128 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="var groups = from x in options\r\n                                 group x by x into g\r\n                                 let count = g.Count()\r\n                                 select new { Value = g.Key, Count = count }", span="119-122"];
m1_112 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="88-104"];
m1_111 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="return Enumerable.Empty<Error>();", span="103-103"];
m1_119 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="100-101"];
m1_35 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="32-32"];
m1_34 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="((OptionSpecification)g.Specification).SetName", span="32-32"];
m1_136 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Entry lambda expression", span="114-114"];
m1_129 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="var errors = from y in groups\r\n                                 where y.Count > 1\r\n                                 select new RepeatedOptionError(new NameInfo(y.Value.ShortName, y.Value.LongName))", span="123-125"];
m1_120 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="new SequenceOutOfRangeError(\r\n                            s.Specification.FromSpecification())", span="100-101"];
m1_121 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="100-101"];
m1_138 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="114-114"];
m1_137 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="t.IsName()", span="114-114"];
m1_130 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="return errors;", span="126-126"];
m1_131 [cluster="lambda expression", file="SpecificationPropertyRules.cs", label="Exit lambda expression", span="109-127"];
m1_134 [cluster="CommandLine.RepeatedOptionError.RepeatedOptionError(CommandLine.NameInfo)", file="SpecificationPropertyRules.cs", label="Entry CommandLine.RepeatedOptionError.RepeatedOptionError(CommandLine.NameInfo)", span="335-335"];
m1_51 [cluster="Unk.Concat", file="SpecificationPropertyRules.cs", label="Entry Unk.Concat", span=""];
m1_5 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", span="43-43"];
m1_41 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", color=green, community=0, file="SpecificationPropertyRules.cs", label="0: return specProps =>\r\n            {\r\n                var setCount =\r\n                    specProps.Where(sp => sp.Specification.IsOption())\r\n                        .Select(sp => ((OptionSpecification)sp.Specification).SetName)\r\n                        .Distinct()\r\n                        .ToList()\r\n                        .Count();\r\n\r\n                var setWithRequired =\r\n                    specProps.Where(sp => sp.Specification.IsOption())\r\n                        .Where(sp => sp.Specification.Required)\r\n                        .Select(sp => ((OptionSpecification)sp.Specification).SetName)\r\n                        .Distinct()\r\n                        .ToList();\r\n\r\n                var missing =\r\n                    specProps.Where(sp => sp.Specification.IsOption())\r\n                        .Where(sp => sp.Specification.Required)\r\n                        .Where(sp => sp.Value.IsNothing())\r\n                        .Where(sp => ((OptionSpecification)sp.Specification).SetName.Length == 0)\r\n                        .Concat(\r\n                            specProps.Where(sp => sp.Specification.IsOption())\r\n                                .Where(sp => sp.Specification.Required)\r\n                                .Where(sp => sp.Value.IsNothing())\r\n                                .Where(\r\n                                    sp =>\r\n                                        ((OptionSpecification)sp.Specification).SetName.Length > 0 && setCount == 1\r\n                                        || (setCount > 1\r\n                                            && !setWithRequired.Contains(\r\n                                                ((OptionSpecification)sp.Specification).SetName))))\r\n                        .Concat(\r\n                            specProps\r\n                                .Where(sp => sp.Specification.IsValue())\r\n                                .Where(sp => sp.Specification.Required)\r\n                                .Where(sp => sp.Value.IsNothing())).ToList();\r\n\r\n                return from sp in missing select new MissingRequiredOptionError(sp.Specification.FromSpecification());\r\n            };", span="45-83"];
m1_42 [cluster="CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", file="SpecificationPropertyRules.cs", label="Exit CommandLine.Core.SpecificationPropertyRules.EnforceRequired()", span="43-43"];
m1_20 [cluster="Unk.Select", file="SpecificationPropertyRules.cs", label="Entry Unk.Select", span=""];
m1_29 [cluster="Unk.IsJust", file="SpecificationPropertyRules.cs", label="Entry Unk.IsJust", span=""];
m1_132 [cluster="Unk.UniqueName", file="SpecificationPropertyRules.cs", label="Entry Unk.UniqueName", span=""];
m1_50 [cluster="Unk.ToList", file="SpecificationPropertyRules.cs", label="Entry Unk.ToList", span=""];
m1_39 [cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", file="SpecificationPropertyRules.cs", label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="302-302"];
m1_133 [cluster="Unk.DefaultIfEmpty", file="SpecificationPropertyRules.cs", label="Entry Unk.DefaultIfEmpty", span=""];
m1_25 [cluster="CommandLine.Core.Specification.IsOption()", file="SpecificationPropertyRules.cs", label="Entry CommandLine.Core.Specification.IsOption()", span="10-10"];
m1_3 [cluster="System.Collections.Generic.List<T>.List()", file="SpecificationPropertyRules.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m1_49 [cluster="Unk.Distinct", file="SpecificationPropertyRules.cs", label="Entry Unk.Distinct", span=""];
m1_18 [cluster="Unk.GroupBy", file="SpecificationPropertyRules.cs", label="Entry Unk.GroupBy", span=""];
m1_19 [cluster="Unk.Count", file="SpecificationPropertyRules.cs", label="Entry Unk.Count", span=""];
m1_140 [file="SpecificationPropertyRules.cs", label=setCount, span=""];
m1_141 [file="SpecificationPropertyRules.cs", label=setWithRequired, span=""];
m1_142 [file="SpecificationPropertyRules.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", span=""];
m1_4 -> m1_8  [color=green, key=0, style=solid];
m1_8 -> m1_9  [color=green, key=0, style=solid];
m1_8 -> m1_11  [color=green, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m1_9 -> m1_4  [color=blue, key=0, style=bold];
m1_6 -> m1_105  [color=green, key=0, style=solid];
m1_105 -> m1_106  [color=green, key=0, style=solid];
m1_105 -> m1_108  [color=green, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m1_106 -> m1_6  [color=blue, key=0, style=bold];
m1_7 -> m1_127  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
m1_7 -> m1_123  [key=0, style=solid];
m1_123 -> m1_126  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m1_123 -> m1_123  [color=darkorchid, key=3, label="method methodReturn System.Collections.Generic.IEnumerable<CommandLine.Error> ", style=bold];
m1_123 -> m1_124  [key=0, style=solid];
m1_124 -> m1_7  [color=blue, key=0, style=bold];
m1_0 -> m1_1  [key=0, style=solid];
m1_1 -> m1_4  [key=2, style=dotted];
m1_1 -> m1_5  [key=2, style=dotted];
m1_1 -> m1_6  [key=2, style=dotted];
m1_1 -> m1_2  [key=0, style=solid];
m1_1 -> m1_3  [key=2, style=dotted];
m1_1 -> m1_7  [key=2, style=dotted];
m1_2 -> m1_0  [color=blue, key=0, style=bold];
m1_125 -> m1_126  [key=0, style=solid];
m1_11 -> m1_12  [color=green, key=0, style=solid];
m1_11 -> m1_17  [color=green, key=2, style=dotted];
m1_11 -> m1_22  [color=green, key=1, label="lambda expression", style=dashed];
m1_11 -> m1_26  [color=green, key=1, label="lambda expression", style=dashed];
m1_11 -> m1_30  [color=green, key=1, label="lambda expression", style=dashed];
m1_11 -> m1_14  [color=green, key=1, label=options, style=dashed];
m1_10 -> m1_11  [color=green, key=0, style=solid];
m1_12 -> m1_13  [key=0, style=solid];
m1_12 -> m1_18  [key=2, style=dotted];
m1_12 -> m1_33  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_22 -> m1_23  [color=green, key=0, style=solid];
m1_26 -> m1_27  [color=green, key=0, style=solid];
m1_30 -> m1_31  [color=green, key=0, style=solid];
m1_14 -> m1_16  [color=green, key=0, style=solid];
m1_14 -> m1_20  [color=green, key=2, style=dotted];
m1_14 -> m1_36  [color=green, key=1, label="lambda expression", style=dashed];
m1_13 -> m1_14  [color=green, key=0, style=solid];
m1_13 -> m1_15  [key=0, style=solid];
m1_13 -> m1_19  [key=2, style=dotted];
m1_16 -> m1_10  [color=blue, key=0, style=bold];
m1_36 -> m1_37  [color=green, key=0, style=solid];
m1_23 -> m1_24  [color=green, key=0, style=solid];
m1_23 -> m1_25  [color=green, key=2, style=dotted];
m1_24 -> m1_22  [color=blue, key=0, style=bold];
m1_27 -> m1_28  [color=green, key=0, style=solid];
m1_27 -> m1_29  [color=green, key=2, style=dotted];
m1_28 -> m1_26  [color=blue, key=0, style=bold];
m1_31 -> m1_32  [color=green, key=0, style=solid];
m1_32 -> m1_30  [color=blue, key=0, style=bold];
m1_37 -> m1_38  [color=green, key=0, style=solid];
m1_37 -> m1_39  [color=green, key=2, style=dotted];
m1_37 -> m1_40  [color=green, key=2, style=dotted];
m1_38 -> m1_36  [color=blue, key=0, style=bold];
m1_44 -> m1_45  [color=green, key=0, style=solid];
m1_44 -> m1_17  [color=green, key=2, style=dotted];
m1_44 -> m1_20  [color=green, key=2, style=dotted];
m1_44 -> m1_49  [color=green, key=2, style=dotted];
m1_44 -> m1_50  [color=green, key=2, style=dotted];
m1_44 -> m1_19  [color=green, key=2, style=dotted];
m1_44 -> m1_54  [color=green, key=1, label="lambda expression", style=dashed];
m1_44 -> m1_57  [color=green, key=1, label="lambda expression", style=dashed];
m1_44 -> m1_46  [color=green, key=1, label=setCount, style=dashed];
m1_44 -> m1_92  [color=green, key=1, label=setCount, style=dashed];
m1_45 -> m1_46  [color=green, key=0, style=solid];
m1_45 -> m1_17  [color=green, key=2, style=dotted];
m1_45 -> m1_20  [color=green, key=2, style=dotted];
m1_45 -> m1_49  [color=green, key=2, style=dotted];
m1_45 -> m1_50  [color=green, key=2, style=dotted];
m1_45 -> m1_60  [color=green, key=1, label="lambda expression", style=dashed];
m1_45 -> m1_63  [color=green, key=1, label="lambda expression", style=dashed];
m1_45 -> m1_66  [color=green, key=1, label="lambda expression", style=dashed];
m1_45 -> m1_92  [color=green, key=1, label=setWithRequired, style=dashed];
m1_46 -> m1_47  [color=green, key=0, style=solid];
m1_46 -> m1_17  [color=green, key=2, style=dotted];
m1_46 -> m1_51  [color=green, key=2, style=dotted];
m1_46 -> m1_50  [color=green, key=2, style=dotted];
m1_46 -> m1_69  [color=green, key=1, label="lambda expression", style=dashed];
m1_46 -> m1_72  [color=green, key=1, label="lambda expression", style=dashed];
m1_46 -> m1_75  [color=green, key=1, label="lambda expression", style=dashed];
m1_46 -> m1_79  [color=green, key=1, label="lambda expression", style=dashed];
m1_46 -> m1_82  [color=green, key=1, label="lambda expression", style=dashed];
m1_46 -> m1_85  [color=green, key=1, label="lambda expression", style=dashed];
m1_46 -> m1_88  [color=green, key=1, label="lambda expression", style=dashed];
m1_46 -> m1_91  [color=green, key=1, label="lambda expression", style=dashed];
m1_46 -> m1_95  [color=green, key=1, label="lambda expression", style=dashed];
m1_46 -> m1_99  [color=green, key=1, label="lambda expression", style=dashed];
m1_46 -> m1_102  [color=green, key=1, label="lambda expression", style=dashed];
m1_43 -> m1_44  [color=green, key=0, style=solid];
m1_43 -> m1_45  [color=green, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m1_43 -> m1_46  [color=green, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m1_54 -> m1_55  [color=green, key=0, style=solid];
m1_57 -> m1_58  [color=green, key=0, style=solid];
m1_92 -> m1_93  [color=green, key=0, style=solid];
m1_92 -> m1_94  [color=green, key=2, style=dotted];
m1_60 -> m1_61  [color=green, key=0, style=solid];
m1_63 -> m1_64  [color=green, key=0, style=solid];
m1_66 -> m1_67  [color=green, key=0, style=solid];
m1_47 -> m1_47  [color=darkseagreen4, key=1, label=sp, style=dashed];
m1_47 -> m1_48  [key=0, style=solid];
m1_47 -> m1_52  [key=2, style=dotted];
m1_47 -> m1_53  [key=2, style=dotted];
m1_69 -> m1_70  [color=green, key=0, style=solid];
m1_72 -> m1_73  [color=green, key=0, style=solid];
m1_75 -> m1_76  [color=green, key=0, style=solid];
m1_79 -> m1_80  [color=green, key=0, style=solid];
m1_82 -> m1_83  [color=green, key=0, style=solid];
m1_85 -> m1_86  [color=green, key=0, style=solid];
m1_88 -> m1_89  [color=green, key=0, style=solid];
m1_91 -> m1_92  [color=green, key=0, style=solid];
m1_95 -> m1_96  [color=green, key=0, style=solid];
m1_99 -> m1_100  [color=green, key=0, style=solid];
m1_102 -> m1_103  [color=green, key=0, style=solid];
m1_93 -> m1_91  [color=blue, key=0, style=bold];
m1_55 -> m1_56  [color=green, key=0, style=solid];
m1_55 -> m1_25  [color=green, key=2, style=dotted];
m1_56 -> m1_54  [color=blue, key=0, style=bold];
m1_58 -> m1_59  [color=green, key=0, style=solid];
m1_59 -> m1_57  [color=blue, key=0, style=bold];
m1_61 -> m1_62  [color=green, key=0, style=solid];
m1_61 -> m1_25  [color=green, key=2, style=dotted];
m1_62 -> m1_60  [color=blue, key=0, style=bold];
m1_64 -> m1_65  [color=green, key=0, style=solid];
m1_65 -> m1_63  [color=blue, key=0, style=bold];
m1_67 -> m1_68  [color=green, key=0, style=solid];
m1_68 -> m1_66  [color=blue, key=0, style=bold];
m1_70 -> m1_71  [color=green, key=0, style=solid];
m1_70 -> m1_25  [color=green, key=2, style=dotted];
m1_71 -> m1_69  [color=blue, key=0, style=bold];
m1_73 -> m1_74  [color=green, key=0, style=solid];
m1_74 -> m1_72  [color=blue, key=0, style=bold];
m1_76 -> m1_77  [color=green, key=0, style=solid];
m1_76 -> m1_78  [color=green, key=2, style=dotted];
m1_77 -> m1_75  [color=blue, key=0, style=bold];
m1_80 -> m1_81  [color=green, key=0, style=solid];
m1_81 -> m1_79  [color=blue, key=0, style=bold];
m1_83 -> m1_84  [color=green, key=0, style=solid];
m1_83 -> m1_25  [color=green, key=2, style=dotted];
m1_84 -> m1_82  [color=blue, key=0, style=bold];
m1_86 -> m1_87  [color=green, key=0, style=solid];
m1_87 -> m1_85  [color=blue, key=0, style=bold];
m1_89 -> m1_90  [color=green, key=0, style=solid];
m1_89 -> m1_78  [color=green, key=2, style=dotted];
m1_90 -> m1_88  [color=blue, key=0, style=bold];
m1_96 -> m1_97  [color=green, key=0, style=solid];
m1_96 -> m1_98  [color=green, key=2, style=dotted];
m1_97 -> m1_95  [color=blue, key=0, style=bold];
m1_100 -> m1_101  [color=green, key=0, style=solid];
m1_101 -> m1_99  [color=blue, key=0, style=bold];
m1_103 -> m1_104  [color=green, key=0, style=solid];
m1_103 -> m1_78  [color=green, key=2, style=dotted];
m1_104 -> m1_102  [color=blue, key=0, style=bold];
m1_108 -> m1_109  [color=green, key=0, style=solid];
m1_108 -> m1_17  [color=green, key=2, style=dotted];
m1_108 -> m1_114  [color=green, key=1, label="lambda expression", style=dashed];
m1_108 -> m1_110  [color=green, key=1, label=options, style=dashed];
m1_107 -> m1_108  [color=green, key=0, style=solid];
m1_109 -> m1_110  [key=0, style=solid];
m1_109 -> m1_111  [key=0, style=solid];
m1_109 -> m1_113  [key=2, style=dotted];
m1_114 -> m1_115  [color=green, key=0, style=solid];
m1_110 -> m1_20  [key=2, style=dotted];
m1_110 -> m1_112  [key=0, style=solid];
m1_110 -> m1_119  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_115 -> m1_116  [color=green, key=0, style=solid];
m1_115 -> m1_117  [color=green, key=2, style=dotted];
m1_115 -> m1_118  [color=green, key=2, style=dotted];
m1_116 -> m1_114  [color=blue, key=0, style=bold];
m1_33 -> m1_34  [key=0, style=solid];
m1_127 -> m1_17  [key=2, style=dotted];
m1_127 -> m1_127  [color=darkseagreen4, key=1, label=t, style=dashed];
m1_127 -> m1_128  [key=0, style=solid];
m1_127 -> m1_132  [key=2, style=dotted];
m1_127 -> m1_133  [key=2, style=dotted];
m1_127 -> m1_136  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_15 -> m1_16  [key=0, style=solid];
m1_15 -> m1_21  [key=2, style=dotted];
m1_126 -> m1_25  [key=2, style=dotted];
m1_126 -> m1_117  [key=2, style=dotted];
m1_126 -> m1_127  [key=0, style=solid];
m1_126 -> m1_126  [color=darkseagreen4, key=1, label=sp, style=dashed];
m1_48 -> m1_43  [color=blue, key=0, style=bold];
m1_128 -> m1_19  [key=2, style=dotted];
m1_128 -> m1_128  [color=darkseagreen4, key=1, label=x, style=dashed];
m1_128 -> m1_129  [key=0, style=solid];
m1_112 -> m1_107  [color=blue, key=0, style=bold];
m1_111 -> m1_112  [key=0, style=solid];
m1_111 -> m1_21  [key=2, style=dotted];
m1_119 -> m1_120  [key=0, style=solid];
m1_35 -> m1_33  [color=blue, key=0, style=bold];
m1_34 -> m1_35  [key=0, style=solid];
m1_136 -> m1_137  [key=0, style=solid];
m1_129 -> m1_129  [color=darkseagreen4, key=1, label=y, style=dashed];
m1_129 -> m1_130  [key=0, style=solid];
m1_129 -> m1_134  [key=2, style=dotted];
m1_129 -> m1_135  [key=2, style=dotted];
m1_120 -> m1_53  [key=2, style=dotted];
m1_120 -> m1_121  [key=0, style=solid];
m1_120 -> m1_122  [key=2, style=dotted];
m1_121 -> m1_119  [color=blue, key=0, style=bold];
m1_138 -> m1_136  [color=blue, key=0, style=bold];
m1_137 -> m1_138  [key=0, style=solid];
m1_137 -> m1_139  [key=2, style=dotted];
m1_130 -> m1_131  [key=0, style=solid];
m1_131 -> m1_125  [color=blue, key=0, style=bold];
m1_5 -> m1_41  [color=green, key=0, style=solid];
m1_41 -> m1_42  [color=green, key=0, style=solid];
m1_41 -> m1_44  [color=green, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m1_41 -> m1_45  [color=green, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m1_41 -> m1_46  [color=green, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>", style=dashed];
m1_42 -> m1_5  [color=blue, key=0, style=bold];
m1_140 -> m1_92  [color=green, key=1, label=setCount, style=dashed];
m1_141 -> m1_92  [color=green, key=1, label=setWithRequired, style=dashed];
m1_142 -> m1_127  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
}
