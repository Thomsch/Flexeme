digraph  {
n36 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", span=""];
n37 [label="System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>", span=""];
n38 [label="CommandLine.Core.Token", span=""];
n39 [label="CommandLine.Core.Token", span=""];
n40 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", span=""];
n41 [label=nameIndex, span=""];
n0 [cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", label="Entry CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11"];
n1 [cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", label="return from tseq in tokens.Pairwise(\r\n                (f, s) =>\r\n                        f.IsName() && s.IsValue()\r\n                            ? typeLookup(f.Text).Return(info =>\r\n                                   info.TargetType == TargetType.Sequence\r\n                                        ? new[] { f }.Concat(tokens.OfSequence(f, info))\r\n                                        : new Token[] { }, new Token[] { })\r\n                            : new Token[] { })\r\n                   from t in tseq\r\n                   select t;", span="15-24"];
n5 [cluster="lambda expression", label="f.IsName() && s.IsValue()\r\n                            ? typeLookup(f.Text).Return(info =>\r\n                                   info.TargetType == TargetType.Sequence\r\n                                        ? new[] { f }.Concat(tokens.OfSequence(f, info))\r\n                                        : new Token[] { }, new Token[] { })\r\n                            : new Token[] { }", span="17-22"];
n12 [cluster="lambda expression", label="info.TargetType == TargetType.Sequence\r\n                                        ? new[] { f }.Concat(tokens.OfSequence(f, info))\r\n                                        : new Token[] { }", span="19-21"];
n2 [cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", label="Exit CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11"];
n3 [cluster="System.Collections.Generic.IEnumerable<TSource>.Pairwise<TSource, TResult>(System.Func<TSource, TSource, TResult>)", label="Entry System.Collections.Generic.IEnumerable<TSource>.Pairwise<TSource, TResult>(System.Func<TSource, TSource, TResult>)", span="10-10"];
n4 [cluster="lambda expression", label="Entry lambda expression", span="16-22"];
n6 [cluster="lambda expression", label="Exit lambda expression", span="16-22"];
n7 [cluster="CommandLine.Core.Token.IsName()", label="Entry CommandLine.Core.Token.IsName()", span="68-68"];
n8 [cluster="CommandLine.Core.Token.IsValue()", label="Entry CommandLine.Core.Token.IsValue()", span="73-73"];
n9 [cluster="System.Func<T, TResult>.Invoke(T)", label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0"];
n10 [cluster="CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", label="Entry CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", span="100-100"];
n11 [cluster="lambda expression", label="Entry lambda expression", span="18-21"];
n13 [cluster="lambda expression", label="Exit lambda expression", span="18-21"];
n14 [cluster="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>.OfSequence(CommandLine.Core.Token, CommandLine.Core.TypeDescriptor)", label="Entry System.Collections.Generic.IEnumerable<CommandLine.Core.Token>.OfSequence(CommandLine.Core.Token, CommandLine.Core.TypeDescriptor)", span="27-27"];
n15 [cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0"];
n16 [cluster="CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token, CommandLine.Core.TypeDescriptor)", label="Entry CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token, CommandLine.Core.TypeDescriptor)", span="27-27"];
n17 [cluster="CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token, CommandLine.Core.TypeDescriptor)", label="var nameIndex = tokens.IndexOf(t => t.Equals(nameToken))", span="29-29"];
n26 [cluster="lambda expression", label="t.Equals(nameToken)", span="29-29"];
n19 [cluster="CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token, CommandLine.Core.TypeDescriptor)", label="return info.MaxItems.Return(\r\n                    n => tokens.Skip(nameIndex + 1).Take(n),\r\n                         tokens.Skip(nameIndex + 1).TakeWhile(v => v.IsValue()));", span="32-34"];
n30 [cluster="lambda expression", label="tokens.Skip(nameIndex + 1).Take(n)", span="33-33"];
n18 [cluster="CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token, CommandLine.Core.TypeDescriptor)", label="nameIndex >= 0", span="30-30"];
n22 [cluster="System.Collections.Generic.IEnumerable<TSource>.IndexOf<TSource>(System.Func<TSource, bool>)", label="Entry System.Collections.Generic.IEnumerable<TSource>.IndexOf<TSource>(System.Func<TSource, bool>)", span="36-36"];
n25 [cluster="lambda expression", label="Entry lambda expression", span="29-29"];
n20 [cluster="CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token, CommandLine.Core.TypeDescriptor)", label="return new Token[] { };", span="36-36"];
n21 [cluster="CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token, CommandLine.Core.TypeDescriptor)", label="Exit CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token, CommandLine.Core.TypeDescriptor)", span="27-27"];
n23 [cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0"];
n24 [cluster="System.Collections.Generic.IEnumerable<TSource>.TakeWhile<TSource>(System.Func<TSource, bool>)", label="Entry System.Collections.Generic.IEnumerable<TSource>.TakeWhile<TSource>(System.Func<TSource, bool>)", span="0-0"];
n29 [cluster="lambda expression", label="Entry lambda expression", span="33-33"];
n33 [cluster="lambda expression", label="Entry lambda expression", span="34-34"];
n27 [cluster="lambda expression", label="Exit lambda expression", span="29-29"];
n28 [cluster="CommandLine.Core.Token.Equals(CommandLine.Core.Token)", label="Entry CommandLine.Core.Token.Equals(CommandLine.Core.Token)", span="55-55"];
n31 [cluster="lambda expression", label="Exit lambda expression", span="33-33"];
n32 [cluster="System.Collections.Generic.IEnumerable<TSource>.Take<TSource>(int)", label="Entry System.Collections.Generic.IEnumerable<TSource>.Take<TSource>(int)", span="0-0"];
n34 [cluster="lambda expression", label="v.IsValue()", span="34-34"];
n35 [cluster="lambda expression", label="Exit lambda expression", span="34-34"];
d119 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", color=green, community=0, label="-1: var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceWithoutRange(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="304-308"];
d118 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="299-299"];
d120 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="311-311"];
d9 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="12-12"];
d122 [cluster="lambda expression", label="Entry lambda expression", span="305-305"];
d123 [cluster="lambda expression", color=green, community=0, label="-1: new FakeOptionsWithSequenceWithoutRange()", span="305-305"];
d124 [cluster="lambda expression", label="Exit lambda expression", span="305-305"];
d125 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", span="9-9"];
d127 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", color=green, community=0, label="-1: var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndSeparator(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="323-327"];
d126 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="318-318"];
d128 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="330-330"];
d130 [cluster="lambda expression", label="Entry lambda expression", span="324-324"];
d131 [cluster="lambda expression", color=green, community=0, label="-1: new FakeOptionsWithSequenceAndSeparator()", span="324-324"];
d132 [cluster="lambda expression", label="Exit lambda expression", span="324-324"];
d133 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", span="9-9"];
d135 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", color=green, community=0, label="-1: var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndSeparator(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="343-347"];
d134 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="338-338"];
d136 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", label="expected.ShouldBeEquivalentTo(result.Value.StringSequence)", span="350-350"];
d138 [cluster="lambda expression", label="Entry lambda expression", span="344-344"];
d139 [cluster="lambda expression", color=green, community=0, label="-1: new FakeOptionsWithSequenceAndSeparator()", span="344-344"];
d140 [cluster="lambda expression", label="Exit lambda expression", span="344-344"];
d121 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="299-299"];
d104 [cluster="Unk.ShouldBeEquivalentTo", label="Entry Unk.ShouldBeEquivalentTo", span=""];
d3 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", label="var result = InstanceBuilder.Build(\r\n                () => fakeOptions,\r\n                new[] { ''--help'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="24-28"];
d16 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="45-49"];
d24 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithDouble(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="68-72"];
d32 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequence(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="92-96"];
d41 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="114-118"];
d48 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraint(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="137-141"];
d56 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraint(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="159-163"];
d65 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraint(),\r\n                new[] { ''-s'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="178-182"];
d75 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="197-201"];
d85 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraint(),\r\n                new[] { ''--string-seq=one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="217-221"];
d93 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue(),\r\n                new[] { ''one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="236-240"];
d101 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="260-264"];
d111 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                new[] { ''10'', ''a'', ''b'', ''c'', ''20'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="285-289"];
d165 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSets(),\r\n                new[] { ''--weburl'', ''http://mywebsite.org/'', ''--ftpurl'', ''fpt://ftpsite.org/'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="398-402"];
d175 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="418-422"];
d184 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1'', ''--weburl'', ''str2'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="438-442"];
d192 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] {''''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="458-462"];
d201 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequired(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="476-480"];
d210 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new [] { ''-i'', ''10'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="495-499"];
d218 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''--stringvalue'', ''abc'', ''--xyz'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="514-518"];
d227 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-z'', ''-x'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="533-537"];
d235 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-zx'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="552-556"];
d242 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="572-576"];
d129 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="318-318"];
d137 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="338-338"];
d102 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", label="expected.ShouldBeEquivalentTo(result.Value.Colors)", span="267-267"];
d112 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="292-292"];
d145 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="382-382"];
d176 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="425-425"];
d185 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="445-445"];
d1 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", label="var fakeOptions = new FakeOptions()", span="18-18"];
d2 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", label="var expectedResult = ParserResult.Create(\r\n                ParserResultType.Options,\r\n                fakeOptions, new Error[] { new HelpRequestedError() })", span="19-21"];
d4 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", label="Assert.True(expectedResult.Equals(result))", span="31-31"];
d12 [cluster="lambda expression", label="Entry lambda expression", span="25-25"];
d15 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="40-40"];
d17 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", label="Assert.Equal(expected, result.Value.LongValue)", span="52-52"];
d20 [cluster="lambda expression", label="Entry lambda expression", span="46-46"];
d23 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="63-63"];
d25 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", label="Assert.Equal(expected, result.Value.DoubleValue)", span="75-75"];
d27 [cluster="lambda expression", label="Entry lambda expression", span="69-69"];
d31 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="87-87"];
d33 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", label="Assert.True(expected.SequenceEqual(result.Value.IntSequence))", span="99-99"];
d36 [cluster="lambda expression", label="Entry lambda expression", span="93-93"];
d40 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="109-109"];
d42 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", label="Assert.True(expected.SequenceEqual(result.Value.IntSequence))", span="121-121"];
d44 [cluster="lambda expression", label="Entry lambda expression", span="115-115"];
d47 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="132-132"];
d49 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="144-144"];
d51 [cluster="lambda expression", label="Entry lambda expression", span="138-138"];
d55 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="154-154"];
d57 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="166-166"];
d59 [cluster="lambda expression", label="Entry lambda expression", span="160-160"];
d64 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", label="var expectedResult = new[] { new MissingValueOptionError(new NameInfo(''s'', ''string-seq'')) }", span="175-175"];
d66 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="185-185"];
d70 [cluster="lambda expression", label="Entry lambda expression", span="179-179"];
d74 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="194-194"];
d76 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="204-204"];
d79 [cluster="lambda expression", label="Entry lambda expression", span="198-198"];
d84 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''s'', ''string-seq'')) }", span="214-214"];
d86 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="224-224"];
d88 [cluster="lambda expression", label="Entry lambda expression", span="218-218"];
d92 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="233-233"];
d94 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="243-243"];
d96 [cluster="lambda expression", label="Entry lambda expression", span="237-237"];
d100 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="255-255"];
d105 [cluster="lambda expression", label="Entry lambda expression", span="261-261"];
d110 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = string.Empty,\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''a'', ''b'', ''c'' },\r\n                    IntValue = 20\r\n                }", span="276-282"];
d115 [cluster="lambda expression", label="Entry lambda expression", span="286-286"];
d164 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", label="var expectedResult = new[]\r\n                {\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''weburl'')),\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''ftpurl''))\r\n                }", span="391-395"];
d166 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="405-405"];
d169 [cluster="lambda expression", label="Entry lambda expression", span="399-399"];
d174 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = null\r\n            }", span="413-416"];
d179 [cluster="lambda expression", label="Entry lambda expression", span="419-419"];
d183 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = ''str2''\r\n            }", span="433-436"];
d187 [cluster="lambda expression", label="Entry lambda expression", span="439-439"];
d191 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", label="var expectedResult = new[]\r\n            {\r\n                new MissingRequiredOptionError(new NameInfo('''', ''ftpurl'')),\r\n                new MissingRequiredOptionError(new NameInfo('''', ''weburl''))\r\n            }", span="452-456"];
d193 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="465-465"];
d196 [cluster="lambda expression", label="Entry lambda expression", span="459-459"];
d200 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", label="var expectedResult = new[] { new MissingRequiredOptionError(new NameInfo('''', ''str'')) }", span="473-473"];
d202 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="483-483"];
d204 [cluster="lambda expression", label="Entry lambda expression", span="477-477"];
d209 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''i'', '''')) }", span="492-492"];
d211 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="502-502"];
d213 [cluster="lambda expression", label="Entry lambda expression", span="496-496"];
d217 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", label="var expectedResult = new[] { new UnknownOptionError(''xyz'') }", span="511-511"];
d219 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="521-521"];
d222 [cluster="lambda expression", label="Entry lambda expression", span="515-515"];
d226 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="530-530"];
d228 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="540-540"];
d230 [cluster="lambda expression", label="Entry lambda expression", span="534-534"];
d234 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="549-549"];
d236 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="559-559"];
d238 [cluster="lambda expression", label="Entry lambda expression", span="553-553"];
d241 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="567-567"];
d243 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", label="Assert.True(expected.Equals(result.Value.StringValue))", span="579-579"];
d246 [cluster="lambda expression", label="Entry lambda expression", span="573-573"];
d103 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="255-255"];
d113 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="273-273"];
d142 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = ''str1'',\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''-a'', ''--bee'', ''-c'' },\r\n                    IntValue = 20\r\n                }", span="362-368"];
d144 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                (a, optionSpecs) =>\r\n                    Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="372-379"];
d146 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="359-359"];
d177 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="411-411"];
d186 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="431-431"];
d0 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="15-15"];
d6 [cluster="CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", label="Entry CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", span="6-6"];
d13 [cluster="lambda expression", label=fakeOptions, span="25-25"];
d7 [cluster="CommandLine.HelpRequestedError.HelpRequestedError()", label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="338-338"];
d8 [cluster="CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", label="Entry CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="103-103"];
d5 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="15-15"];
d10 [cluster="CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", label="Entry CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", span="90-90"];
d11 [cluster="Unk.True", label="Entry Unk.True", span=""];
d14 [cluster="lambda expression", label="Exit lambda expression", span="25-25"];
d18 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="40-40"];
d19 [cluster="Unk.Equal", label="Entry Unk.Equal", span=""];
d22 [cluster="lambda expression", label="Exit lambda expression", span="46-46"];
d21 [cluster="lambda expression", label="new FakeOptions()", span="46-46"];
d26 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="63-63"];
d29 [cluster="lambda expression", label="Exit lambda expression", span="69-69"];
d28 [cluster="lambda expression", label="new FakeOptionsWithDouble()", span="69-69"];
d34 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="87-87"];
d35 [cluster="Unk.SequenceEqual", label="Entry Unk.SequenceEqual", span=""];
d38 [cluster="lambda expression", label="Exit lambda expression", span="93-93"];
d37 [cluster="lambda expression", label="new FakeOptionsWithSequence()", span="93-93"];
d43 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="109-109"];
d46 [cluster="lambda expression", label="Exit lambda expression", span="115-115"];
d45 [cluster="lambda expression", label="new FakeOptions()", span="115-115"];
d50 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="132-132"];
d53 [cluster="lambda expression", label="Exit lambda expression", span="138-138"];
d52 [cluster="lambda expression", label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="138-138"];
d58 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="154-154"];
d61 [cluster="lambda expression", label="Exit lambda expression", span="160-160"];
d60 [cluster="lambda expression", label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="160-160"];
d63 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="172-172"];
d68 [cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="261-261"];
d69 [cluster="CommandLine.NameInfo.NameInfo(string, string)", label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20"];
d67 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="172-172"];
d72 [cluster="lambda expression", label="Exit lambda expression", span="179-179"];
d71 [cluster="lambda expression", label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="179-179"];
d73 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="191-191"];
d78 [cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="316-316"];
d77 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="191-191"];
d81 [cluster="lambda expression", label="Exit lambda expression", span="198-198"];
d80 [cluster="lambda expression", label="new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="198-198"];
d83 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="211-211"];
d87 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="211-211"];
d90 [cluster="lambda expression", label="Exit lambda expression", span="218-218"];
d89 [cluster="lambda expression", label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="218-218"];
d91 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="230-230"];
d95 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="230-230"];
d98 [cluster="lambda expression", label="Exit lambda expression", span="237-237"];
d97 [cluster="lambda expression", label="new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="237-237"];
d107 [cluster="lambda expression", label="Exit lambda expression", span="261-261"];
d106 [cluster="lambda expression", label="new FakeOptionsWithEnum()", span="261-261"];
d109 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="273-273"];
d114 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", span="6-6"];
d117 [cluster="lambda expression", label="Exit lambda expression", span="286-286"];
d116 [cluster="lambda expression", label="new FakeOptionsWithValues()", span="286-286"];
d163 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="388-388"];
d168 [cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="294-294"];
d167 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="388-388"];
d171 [cluster="lambda expression", label="Exit lambda expression", span="399-399"];
d170 [cluster="lambda expression", label="new FakeOptionsWithSets()", span="399-399"];
d173 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="411-411"];
d178 [cluster="CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", span="4-4"];
d181 [cluster="lambda expression", label="Exit lambda expression", span="419-419"];
d180 [cluster="lambda expression", label="new FakeOptionWithRequiredAndSet()", span="419-419"];
d182 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="431-431"];
d189 [cluster="lambda expression", label="Exit lambda expression", span="439-439"];
d188 [cluster="lambda expression", label="new FakeOptionWithRequiredAndSet()", span="439-439"];
d190 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="450-450"];
d195 [cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="283-283"];
d194 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="450-450"];
d198 [cluster="lambda expression", label="Exit lambda expression", span="459-459"];
d197 [cluster="lambda expression", label="new FakeOptionWithRequiredAndSet()", span="459-459"];
d199 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="470-470"];
d203 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="470-470"];
d206 [cluster="lambda expression", label="Exit lambda expression", span="477-477"];
d205 [cluster="lambda expression", label="new FakeOptionWithRequired()", span="477-477"];
d208 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="489-489"];
d212 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="489-489"];
d215 [cluster="lambda expression", label="Exit lambda expression", span="496-496"];
d214 [cluster="lambda expression", label="new FakeOptions()", span="496-496"];
d216 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="508-508"];
d221 [cluster="CommandLine.UnknownOptionError.UnknownOptionError(string)", label="Entry CommandLine.UnknownOptionError.UnknownOptionError(string)", span="272-272"];
d220 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="508-508"];
d224 [cluster="lambda expression", label="Exit lambda expression", span="515-515"];
d223 [cluster="lambda expression", label="new FakeOptions()", span="515-515"];
d225 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="527-527"];
d229 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="527-527"];
d232 [cluster="lambda expression", label="Exit lambda expression", span="534-534"];
d231 [cluster="lambda expression", label="new FakeOptions()", span="534-534"];
d233 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="546-546"];
d237 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="546-546"];
d240 [cluster="lambda expression", label="Exit lambda expression", span="553-553"];
d239 [cluster="lambda expression", label="new FakeOptions()", span="553-553"];
d244 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="567-567"];
d245 [cluster="string.Equals(string)", label="Entry string.Equals(string)", span="0-0"];
d248 [cluster="lambda expression", label="Exit lambda expression", span="573-573"];
d247 [cluster="lambda expression", label="new FakeOptions()", span="573-573"];
d141 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="359-359"];
d143 [cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", label="var arguments = new[] { ''--stringvalue'', ''str1'', ''--'', ''10'', ''-a'', ''--bee'', ''-c'', ''20'' }", span="369-369"];
d147 [cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="33-33"];
d148 [cluster="lambda expression", label="Entry lambda expression", span="373-373"];
d151 [cluster="lambda expression", label="Entry lambda expression", span="374-376"];
d249 [label=fakeOptions, span=""];
d30 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", span="9-9"];
d39 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", span="9-9"];
d54 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", span="9-9"];
d62 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="9-9"];
d82 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="9-9"];
d99 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="9-9"];
d108 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", span="16-16"];
d149 [cluster="lambda expression", label="new FakeOptionsWithValues()", span="373-373"];
d172 [cluster="CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", span="4-4"];
d207 [cluster="CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", span="4-4"];
d150 [cluster="lambda expression", label="Exit lambda expression", span="373-373"];
d153 [cluster="lambda expression", label="Exit lambda expression", span="374-376"];
d152 [cluster="lambda expression", label="Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)))", span="375-376"];
d156 [cluster="lambda expression", label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))", span="376-376"];
d160 [cluster="lambda expression", label="NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)", span="376-376"];
d154 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", span="37-37"];
d155 [cluster="lambda expression", label="Entry lambda expression", span="376-376"];
d250 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
d157 [cluster="lambda expression", label="Exit lambda expression", span="376-376"];
d158 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11"];
d159 [cluster="lambda expression", label="Entry lambda expression", span="376-376"];
d161 [cluster="lambda expression", label="Exit lambda expression", span="376-376"];
d162 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="12-12"];
n36 -> n5  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
n36 -> n12  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
n37 -> n5  [color=darkseagreen4, key=1, label="System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>", style=dashed];
n38 -> n12  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
n39 -> n26  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
n40 -> n30  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
n41 -> n30  [color=darkseagreen4, key=1, label=nameIndex, style=dashed];
n0 -> n1  [key=0, style=solid];
n0 -> n5  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
n0 -> n12  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
n1 -> n2  [key=0, style=solid];
n1 -> n3  [key=2, style=dotted];
n1 -> n4  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n1 -> n1  [color=darkseagreen4, key=1, label=tseq, style=dashed];
n5 -> n6  [key=0, style=solid];
n5 -> n7  [key=2, style=dotted];
n5 -> n8  [key=2, style=dotted];
n5 -> n9  [key=2, style=dotted];
n5 -> n10  [key=2, style=dotted];
n5 -> n11  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n12 -> n13  [key=0, style=solid];
n12 -> n14  [key=2, style=dotted];
n12 -> n15  [key=2, style=dotted];
n2 -> n0  [color=blue, key=0, style=bold];
n4 -> n5  [key=0, style=solid];
n4 -> n12  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
n6 -> n4  [color=blue, key=0, style=bold];
n11 -> n12  [key=0, style=solid];
n13 -> n11  [color=blue, key=0, style=bold];
n14 -> n1  [color=darkorchid, key=3, label="Parameter variable CommandLine.Core.TypeDescriptor info", style=bold];
n16 -> n17  [key=0, style=solid];
n16 -> n26  [color=darkseagreen4, key=1, label="CommandLine.Core.Token", style=dashed];
n16 -> n19  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
n16 -> n30  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", style=dashed];
n17 -> n18  [key=0, style=solid];
n17 -> n22  [key=2, style=dotted];
n17 -> n25  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n17 -> n19  [color=darkseagreen4, key=1, label=nameIndex, style=dashed];
n17 -> n30  [color=darkseagreen4, key=1, label=nameIndex, style=dashed];
n26 -> n27  [key=0, style=solid];
n26 -> n28  [key=2, style=dotted];
n19 -> n21  [key=0, style=solid];
n19 -> n23  [key=2, style=dotted];
n19 -> n24  [key=2, style=dotted];
n19 -> n10  [key=2, style=dotted];
n19 -> n29  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n19 -> n33  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n30 -> n31  [key=0, style=solid];
n30 -> n23  [key=2, style=dotted];
n30 -> n32  [key=2, style=dotted];
n18 -> n19  [key=0, style=solid];
n18 -> n20  [key=0, style=solid];
n25 -> n26  [key=0, style=solid];
n20 -> n21  [key=0, style=solid];
n21 -> n16  [color=blue, key=0, style=bold];
n29 -> n30  [key=0, style=solid];
n33 -> n34  [key=0, style=solid];
n27 -> n25  [color=blue, key=0, style=bold];
n31 -> n29  [color=blue, key=0, style=bold];
n34 -> n35  [key=0, style=solid];
n34 -> n8  [key=2, style=dotted];
n35 -> n33  [color=blue, key=0, style=bold];
d119 -> d120  [color=green, key=0, style=solid];
d119 -> d9  [color=green, key=2, style=dotted];
d119 -> d122  [color=green, key=1, label="lambda expression", style=dashed];
d118 -> d119  [color=green, key=0, style=solid];
d118 -> d120  [color=darkseagreen4, key=1, label="long[]", style=dashed];
d120 -> d121  [key=0, style=solid];
d120 -> d104  [key=2, style=dotted];
d122 -> d123  [color=green, key=0, style=solid];
d123 -> d124  [color=green, key=0, style=solid];
d123 -> d125  [color=green, key=2, style=dotted];
d124 -> d122  [color=blue, key=0, style=bold];
d127 -> d128  [color=green, key=0, style=solid];
d127 -> d9  [color=green, key=2, style=dotted];
d127 -> d130  [color=green, key=1, label="lambda expression", style=dashed];
d126 -> d127  [color=green, key=0, style=solid];
d126 -> d128  [color=darkseagreen4, key=1, label="long[]", style=dashed];
d128 -> d129  [key=0, style=solid];
d128 -> d104  [key=2, style=dotted];
d130 -> d131  [color=green, key=0, style=solid];
d131 -> d132  [color=green, key=0, style=solid];
d131 -> d133  [color=green, key=2, style=dotted];
d132 -> d130  [color=blue, key=0, style=bold];
d135 -> d136  [color=green, key=0, style=solid];
d135 -> d9  [color=green, key=2, style=dotted];
d135 -> d138  [color=green, key=1, label="lambda expression", style=dashed];
d134 -> d135  [color=green, key=0, style=solid];
d134 -> d136  [color=darkseagreen4, key=1, label="string[]", style=dashed];
d136 -> d137  [key=0, style=solid];
d136 -> d104  [key=2, style=dotted];
d138 -> d139  [color=green, key=0, style=solid];
d139 -> d140  [color=green, key=0, style=solid];
d139 -> d133  [color=green, key=2, style=dotted];
d140 -> d138  [color=blue, key=0, style=bold];
d121 -> d118  [color=blue, key=0, style=bold];
d3 -> d9  [key=2, style=dotted];
d3 -> d4  [key=0, style=solid];
d3 -> d12  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d16 -> d9  [key=2, style=dotted];
d16 -> d17  [key=0, style=solid];
d16 -> d20  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d24 -> d9  [key=2, style=dotted];
d24 -> d25  [key=0, style=solid];
d24 -> d27  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d32 -> d9  [key=2, style=dotted];
d32 -> d33  [key=0, style=solid];
d32 -> d36  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d41 -> d9  [key=2, style=dotted];
d41 -> d42  [key=0, style=solid];
d41 -> d44  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d48 -> d9  [key=2, style=dotted];
d48 -> d49  [key=0, style=solid];
d48 -> d51  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d56 -> d9  [key=2, style=dotted];
d56 -> d57  [key=0, style=solid];
d56 -> d59  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d65 -> d9  [key=2, style=dotted];
d65 -> d66  [key=0, style=solid];
d65 -> d70  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d75 -> d9  [key=2, style=dotted];
d75 -> d76  [key=0, style=solid];
d75 -> d79  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d85 -> d9  [key=2, style=dotted];
d85 -> d86  [key=0, style=solid];
d85 -> d88  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d93 -> d9  [key=2, style=dotted];
d93 -> d94  [key=0, style=solid];
d93 -> d96  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d101 -> d9  [key=2, style=dotted];
d101 -> d102  [key=0, style=solid];
d101 -> d105  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d111 -> d9  [key=2, style=dotted];
d111 -> d112  [key=0, style=solid];
d111 -> d115  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d165 -> d9  [key=2, style=dotted];
d165 -> d166  [key=0, style=solid];
d165 -> d169  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d175 -> d9  [key=2, style=dotted];
d175 -> d176  [key=0, style=solid];
d175 -> d179  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d184 -> d9  [key=2, style=dotted];
d184 -> d185  [key=0, style=solid];
d184 -> d187  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d192 -> d9  [key=2, style=dotted];
d192 -> d193  [key=0, style=solid];
d192 -> d196  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d201 -> d9  [key=2, style=dotted];
d201 -> d202  [key=0, style=solid];
d201 -> d204  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d210 -> d9  [key=2, style=dotted];
d210 -> d211  [key=0, style=solid];
d210 -> d213  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d218 -> d9  [key=2, style=dotted];
d218 -> d219  [key=0, style=solid];
d218 -> d222  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d227 -> d9  [key=2, style=dotted];
d227 -> d228  [key=0, style=solid];
d227 -> d230  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d235 -> d9  [key=2, style=dotted];
d235 -> d236  [key=0, style=solid];
d235 -> d238  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d242 -> d9  [key=2, style=dotted];
d242 -> d243  [key=0, style=solid];
d242 -> d246  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d129 -> d126  [color=blue, key=0, style=bold];
d137 -> d134  [color=blue, key=0, style=bold];
d102 -> d104  [key=2, style=dotted];
d102 -> d102  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Colors", style=dashed];
d102 -> d103  [key=0, style=solid];
d112 -> d104  [key=2, style=dotted];
d112 -> d113  [key=0, style=solid];
d145 -> d104  [key=2, style=dotted];
d145 -> d146  [key=0, style=solid];
d176 -> d104  [key=2, style=dotted];
d176 -> d177  [key=0, style=solid];
d185 -> d104  [key=2, style=dotted];
d185 -> d186  [key=0, style=solid];
d1 -> d3  [color=darkseagreen4, key=1, label=fakeOptions, style=dashed];
d1 -> d2  [key=0, style=solid];
d1 -> d6  [key=2, style=dotted];
d1 -> d13  [color=darkseagreen4, key=1, label=fakeOptions, style=dashed];
d2 -> d3  [key=0, style=solid];
d2 -> d7  [key=2, style=dotted];
d2 -> d8  [key=2, style=dotted];
d2 -> d4  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d4 -> d5  [key=0, style=solid];
d4 -> d10  [key=2, style=dotted];
d4 -> d11  [key=2, style=dotted];
d12 -> d13  [key=0, style=solid];
d15 -> d16  [key=0, style=solid];
d15 -> d17  [color=darkseagreen4, key=1, label=long, style=dashed];
d17 -> d18  [key=0, style=solid];
d17 -> d19  [key=2, style=dotted];
d20 -> d21  [key=0, style=solid];
d23 -> d24  [key=0, style=solid];
d23 -> d25  [color=darkseagreen4, key=1, label=double, style=dashed];
d25 -> d26  [key=0, style=solid];
d25 -> d19  [key=2, style=dotted];
d27 -> d28  [key=0, style=solid];
d31 -> d32  [key=0, style=solid];
d31 -> d33  [color=darkseagreen4, key=1, label="int[]", style=dashed];
d33 -> d34  [key=0, style=solid];
d33 -> d35  [key=2, style=dotted];
d33 -> d11  [key=2, style=dotted];
d36 -> d37  [key=0, style=solid];
d40 -> d41  [key=0, style=solid];
d40 -> d42  [color=darkseagreen4, key=1, label="int[]", style=dashed];
d42 -> d43  [key=0, style=solid];
d42 -> d35  [key=2, style=dotted];
d42 -> d11  [key=2, style=dotted];
d44 -> d45  [key=0, style=solid];
d47 -> d48  [key=0, style=solid];
d47 -> d49  [color=darkseagreen4, key=1, label="string[]", style=dashed];
d49 -> d50  [key=0, style=solid];
d49 -> d35  [key=2, style=dotted];
d49 -> d11  [key=2, style=dotted];
d51 -> d52  [key=0, style=solid];
d55 -> d56  [key=0, style=solid];
d55 -> d57  [color=darkseagreen4, key=1, label="string[]", style=dashed];
d57 -> d58  [key=0, style=solid];
d57 -> d35  [key=2, style=dotted];
d57 -> d11  [key=2, style=dotted];
d59 -> d60  [key=0, style=solid];
d64 -> d65  [key=0, style=solid];
d64 -> d68  [key=2, style=dotted];
d64 -> d69  [key=2, style=dotted];
d64 -> d66  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d66 -> d67  [key=0, style=solid];
d66 -> d35  [key=2, style=dotted];
d66 -> d11  [key=2, style=dotted];
d70 -> d71  [key=0, style=solid];
d74 -> d75  [key=0, style=solid];
d74 -> d78  [key=2, style=dotted];
d74 -> d76  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d76 -> d77  [key=0, style=solid];
d76 -> d35  [key=2, style=dotted];
d76 -> d11  [key=2, style=dotted];
d79 -> d80  [key=0, style=solid];
d84 -> d85  [key=0, style=solid];
d84 -> d78  [key=2, style=dotted];
d84 -> d69  [key=2, style=dotted];
d84 -> d86  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d86 -> d87  [key=0, style=solid];
d86 -> d35  [key=2, style=dotted];
d86 -> d11  [key=2, style=dotted];
d88 -> d89  [key=0, style=solid];
d92 -> d93  [key=0, style=solid];
d92 -> d78  [key=2, style=dotted];
d92 -> d94  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d94 -> d95  [key=0, style=solid];
d94 -> d35  [key=2, style=dotted];
d94 -> d11  [key=2, style=dotted];
d96 -> d97  [key=0, style=solid];
d100 -> d101  [key=0, style=solid];
d100 -> d102  [color=darkseagreen4, key=1, label="CommandLine.Tests.Fakes.Colors", style=dashed];
d105 -> d106  [key=0, style=solid];
d110 -> d111  [key=0, style=solid];
d110 -> d112  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d110 -> d114  [key=2, style=dotted];
d115 -> d116  [key=0, style=solid];
d164 -> d165  [key=0, style=solid];
d164 -> d168  [key=2, style=dotted];
d164 -> d69  [key=2, style=dotted];
d164 -> d166  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d166 -> d167  [key=0, style=solid];
d166 -> d35  [key=2, style=dotted];
d166 -> d11  [key=2, style=dotted];
d169 -> d170  [key=0, style=solid];
d174 -> d175  [key=0, style=solid];
d174 -> d176  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d174 -> d178  [key=2, style=dotted];
d179 -> d180  [key=0, style=solid];
d183 -> d184  [key=0, style=solid];
d183 -> d185  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d183 -> d178  [key=2, style=dotted];
d187 -> d188  [key=0, style=solid];
d191 -> d192  [key=0, style=solid];
d191 -> d195  [key=2, style=dotted];
d191 -> d69  [key=2, style=dotted];
d191 -> d193  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d193 -> d194  [key=0, style=solid];
d193 -> d35  [key=2, style=dotted];
d193 -> d11  [key=2, style=dotted];
d196 -> d197  [key=0, style=solid];
d200 -> d201  [key=0, style=solid];
d200 -> d195  [key=2, style=dotted];
d200 -> d69  [key=2, style=dotted];
d200 -> d202  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d202 -> d203  [key=0, style=solid];
d202 -> d35  [key=2, style=dotted];
d202 -> d11  [key=2, style=dotted];
d204 -> d205  [key=0, style=solid];
d209 -> d210  [key=0, style=solid];
d209 -> d78  [key=2, style=dotted];
d209 -> d69  [key=2, style=dotted];
d209 -> d211  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d211 -> d212  [key=0, style=solid];
d211 -> d35  [key=2, style=dotted];
d211 -> d11  [key=2, style=dotted];
d213 -> d214  [key=0, style=solid];
d217 -> d218  [key=0, style=solid];
d217 -> d221  [key=2, style=dotted];
d217 -> d219  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d219 -> d220  [key=0, style=solid];
d219 -> d35  [key=2, style=dotted];
d219 -> d11  [key=2, style=dotted];
d222 -> d223  [key=0, style=solid];
d226 -> d227  [key=0, style=solid];
d226 -> d221  [key=2, style=dotted];
d226 -> d228  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d228 -> d229  [key=0, style=solid];
d228 -> d35  [key=2, style=dotted];
d228 -> d11  [key=2, style=dotted];
d230 -> d231  [key=0, style=solid];
d234 -> d235  [key=0, style=solid];
d234 -> d221  [key=2, style=dotted];
d234 -> d236  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d236 -> d237  [key=0, style=solid];
d236 -> d35  [key=2, style=dotted];
d236 -> d11  [key=2, style=dotted];
d238 -> d239  [key=0, style=solid];
d241 -> d242  [key=0, style=solid];
d241 -> d243  [color=darkseagreen4, key=1, label=string, style=dashed];
d243 -> d244  [key=0, style=solid];
d243 -> d245  [key=2, style=dotted];
d243 -> d11  [key=2, style=dotted];
d246 -> d247  [key=0, style=solid];
d103 -> d100  [color=blue, key=0, style=bold];
d113 -> d109  [color=blue, key=0, style=bold];
d142 -> d145  [color=darkseagreen4, key=1, label=expectedResult, style=dashed];
d142 -> d143  [key=0, style=solid];
d142 -> d114  [key=2, style=dotted];
d144 -> d145  [key=0, style=solid];
d144 -> d147  [key=2, style=dotted];
d144 -> d148  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d144 -> d151  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d146 -> d141  [color=blue, key=0, style=bold];
d177 -> d173  [color=blue, key=0, style=bold];
d186 -> d182  [color=blue, key=0, style=bold];
d0 -> d1  [key=0, style=solid];
d13 -> d14  [key=0, style=solid];
d5 -> d0  [color=blue, key=0, style=bold];
d14 -> d12  [color=blue, key=0, style=bold];
d18 -> d15  [color=blue, key=0, style=bold];
d22 -> d20  [color=blue, key=0, style=bold];
d21 -> d6  [key=2, style=dotted];
d21 -> d22  [key=0, style=solid];
d26 -> d23  [color=blue, key=0, style=bold];
d29 -> d27  [color=blue, key=0, style=bold];
d28 -> d29  [key=0, style=solid];
d28 -> d30  [key=2, style=dotted];
d34 -> d31  [color=blue, key=0, style=bold];
d38 -> d36  [color=blue, key=0, style=bold];
d37 -> d38  [key=0, style=solid];
d37 -> d39  [key=2, style=dotted];
d43 -> d40  [color=blue, key=0, style=bold];
d46 -> d44  [color=blue, key=0, style=bold];
d45 -> d6  [key=2, style=dotted];
d45 -> d46  [key=0, style=solid];
d50 -> d47  [color=blue, key=0, style=bold];
d53 -> d51  [color=blue, key=0, style=bold];
d52 -> d53  [key=0, style=solid];
d52 -> d54  [key=2, style=dotted];
d58 -> d55  [color=blue, key=0, style=bold];
d61 -> d59  [color=blue, key=0, style=bold];
d60 -> d61  [key=0, style=solid];
d60 -> d62  [key=2, style=dotted];
d63 -> d64  [key=0, style=solid];
d67 -> d63  [color=blue, key=0, style=bold];
d72 -> d70  [color=blue, key=0, style=bold];
d71 -> d72  [key=0, style=solid];
d71 -> d54  [key=2, style=dotted];
d73 -> d74  [key=0, style=solid];
d77 -> d73  [color=blue, key=0, style=bold];
d81 -> d79  [color=blue, key=0, style=bold];
d80 -> d81  [key=0, style=solid];
d80 -> d82  [key=2, style=dotted];
d83 -> d84  [key=0, style=solid];
d87 -> d83  [color=blue, key=0, style=bold];
d90 -> d88  [color=blue, key=0, style=bold];
d89 -> d90  [key=0, style=solid];
d89 -> d62  [key=2, style=dotted];
d91 -> d92  [key=0, style=solid];
d95 -> d91  [color=blue, key=0, style=bold];
d98 -> d96  [color=blue, key=0, style=bold];
d97 -> d98  [key=0, style=solid];
d97 -> d99  [key=2, style=dotted];
d107 -> d105  [color=blue, key=0, style=bold];
d106 -> d107  [key=0, style=solid];
d106 -> d108  [key=2, style=dotted];
d109 -> d110  [key=0, style=solid];
d117 -> d115  [color=blue, key=0, style=bold];
d116 -> d114  [key=2, style=dotted];
d116 -> d117  [key=0, style=solid];
d163 -> d164  [key=0, style=solid];
d167 -> d163  [color=blue, key=0, style=bold];
d171 -> d169  [color=blue, key=0, style=bold];
d170 -> d171  [key=0, style=solid];
d170 -> d172  [key=2, style=dotted];
d173 -> d174  [key=0, style=solid];
d181 -> d179  [color=blue, key=0, style=bold];
d180 -> d178  [key=2, style=dotted];
d180 -> d181  [key=0, style=solid];
d182 -> d183  [key=0, style=solid];
d189 -> d187  [color=blue, key=0, style=bold];
d188 -> d178  [key=2, style=dotted];
d188 -> d189  [key=0, style=solid];
d190 -> d191  [key=0, style=solid];
d194 -> d190  [color=blue, key=0, style=bold];
d198 -> d196  [color=blue, key=0, style=bold];
d197 -> d178  [key=2, style=dotted];
d197 -> d198  [key=0, style=solid];
d199 -> d200  [key=0, style=solid];
d203 -> d199  [color=blue, key=0, style=bold];
d206 -> d204  [color=blue, key=0, style=bold];
d205 -> d206  [key=0, style=solid];
d205 -> d207  [key=2, style=dotted];
d208 -> d209  [key=0, style=solid];
d212 -> d208  [color=blue, key=0, style=bold];
d215 -> d213  [color=blue, key=0, style=bold];
d214 -> d6  [key=2, style=dotted];
d214 -> d215  [key=0, style=solid];
d216 -> d217  [key=0, style=solid];
d220 -> d216  [color=blue, key=0, style=bold];
d224 -> d222  [color=blue, key=0, style=bold];
d223 -> d6  [key=2, style=dotted];
d223 -> d224  [key=0, style=solid];
d225 -> d226  [key=0, style=solid];
d229 -> d225  [color=blue, key=0, style=bold];
d232 -> d230  [color=blue, key=0, style=bold];
d231 -> d6  [key=2, style=dotted];
d231 -> d232  [key=0, style=solid];
d233 -> d234  [key=0, style=solid];
d237 -> d233  [color=blue, key=0, style=bold];
d240 -> d238  [color=blue, key=0, style=bold];
d239 -> d6  [key=2, style=dotted];
d239 -> d240  [key=0, style=solid];
d244 -> d241  [color=blue, key=0, style=bold];
d248 -> d246  [color=blue, key=0, style=bold];
d247 -> d6  [key=2, style=dotted];
d247 -> d248  [key=0, style=solid];
d141 -> d142  [key=0, style=solid];
d143 -> d144  [key=0, style=solid];
d148 -> d149  [key=0, style=solid];
d151 -> d152  [key=0, style=solid];
d151 -> d156  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
d151 -> d160  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
d249 -> d13  [color=darkseagreen4, key=1, label=fakeOptions, style=dashed];
d149 -> d114  [key=2, style=dotted];
d149 -> d150  [key=0, style=solid];
d150 -> d148  [color=blue, key=0, style=bold];
d153 -> d151  [color=blue, key=0, style=bold];
d152 -> d153  [key=0, style=solid];
d152 -> d154  [key=2, style=dotted];
d152 -> d155  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d156 -> d157  [key=0, style=solid];
d156 -> d158  [key=2, style=dotted];
d156 -> d159  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
d160 -> d161  [key=0, style=solid];
d160 -> d162  [key=2, style=dotted];
d155 -> d156  [key=0, style=solid];
d250 -> d156  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
d250 -> d160  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
d157 -> d155  [color=blue, key=0, style=bold];
d159 -> d160  [key=0, style=solid];
d161 -> d159  [color=blue, key=0, style=bold];
}
