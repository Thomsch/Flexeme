digraph  {
n36 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", span=""];
n37 [label="System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>", span=""];
n38 [label="CommandLine.Core.Token", span=""];
n39 [label="CommandLine.Core.Token", span=""];
n40 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>", span=""];
n41 [label=nameIndex, span=""];
n0 [label="Entry CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11", cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)"];
n1 [label="return from tseq in tokens.Pairwise(\r\n                (f, s) =>\r\n                        f.IsName() && s.IsValue()\r\n                            ? typeLookup(f.Text).Return(info =>\r\n                                   info.TargetType == TargetType.Sequence\r\n                                        ? new[] { f }.Concat(tokens.OfSequence(f, info))\r\n                                        : new Token[] { }, new Token[] { })\r\n                            : new Token[] { })\r\n                   from t in tseq\r\n                   select t;", span="15-24", cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)"];
n5 [label="f.IsName() && s.IsValue()\r\n                            ? typeLookup(f.Text).Return(info =>\r\n                                   info.TargetType == TargetType.Sequence\r\n                                        ? new[] { f }.Concat(tokens.OfSequence(f, info))\r\n                                        : new Token[] { }, new Token[] { })\r\n                            : new Token[] { }", span="17-22", cluster="lambda expression"];
n12 [label="info.TargetType == TargetType.Sequence\r\n                                        ? new[] { f }.Concat(tokens.OfSequence(f, info))\r\n                                        : new Token[] { }", span="19-21", cluster="lambda expression"];
n2 [label="Exit CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11", cluster="CommandLine.Core.Sequence.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)"];
n3 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Pairwise<TSource, TResult>(System.Func<TSource, TSource, TResult>)", span="10-10", cluster="System.Collections.Generic.IEnumerable<TSource>.Pairwise<TSource, TResult>(System.Func<TSource, TSource, TResult>)"];
n4 [label="Entry lambda expression", span="16-22", cluster="lambda expression"];
n6 [label="Exit lambda expression", span="16-22", cluster="lambda expression"];
n7 [label="Entry CommandLine.Core.Token.IsName()", span="68-68", cluster="CommandLine.Core.Token.IsName()"];
n8 [label="Entry CommandLine.Core.Token.IsValue()", span="73-73", cluster="CommandLine.Core.Token.IsValue()"];
n9 [label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0", cluster="System.Func<T, TResult>.Invoke(T)"];
n10 [label="Entry CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)", span="100-100", cluster="CommandLine.Infrastructure.Maybe<T1>.Return<T1, T2>(System.Func<T1, T2>, T2)"];
n11 [label="Entry lambda expression", span="18-21", cluster="lambda expression"];
n13 [label="Exit lambda expression", span="18-21", cluster="lambda expression"];
n14 [label="Entry System.Collections.Generic.IEnumerable<CommandLine.Core.Token>.OfSequence(CommandLine.Core.Token, CommandLine.Core.TypeDescriptor)", span="27-27", cluster="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>.OfSequence(CommandLine.Core.Token, CommandLine.Core.TypeDescriptor)"];
n15 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)"];
n16 [label="Entry CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token, CommandLine.Core.TypeDescriptor)", span="27-27", cluster="CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token, CommandLine.Core.TypeDescriptor)"];
n17 [label="var nameIndex = tokens.IndexOf(t => t.Equals(nameToken))", span="29-29", cluster="CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token, CommandLine.Core.TypeDescriptor)"];
n26 [label="t.Equals(nameToken)", span="29-29", cluster="lambda expression"];
n19 [label="return info.MaxItems.Return(\r\n                    n => tokens.Skip(nameIndex + 1).Take(n),\r\n                         tokens.Skip(nameIndex + 1).TakeWhile(v => v.IsValue()));", span="32-34", cluster="CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token, CommandLine.Core.TypeDescriptor)"];
n30 [label="tokens.Skip(nameIndex + 1).Take(n)", span="33-33", cluster="lambda expression"];
n18 [label="nameIndex >= 0", span="30-30", cluster="CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token, CommandLine.Core.TypeDescriptor)"];
n22 [label="Entry System.Collections.Generic.IEnumerable<TSource>.IndexOf<TSource>(System.Func<TSource, bool>)", span="36-36", cluster="System.Collections.Generic.IEnumerable<TSource>.IndexOf<TSource>(System.Func<TSource, bool>)"];
n25 [label="Entry lambda expression", span="29-29", cluster="lambda expression"];
n20 [label="return new Token[] { };", span="36-36", cluster="CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token, CommandLine.Core.TypeDescriptor)"];
n21 [label="Exit CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token, CommandLine.Core.TypeDescriptor)", span="27-27", cluster="CommandLine.Core.Sequence.OfSequence(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Core.Token, CommandLine.Core.TypeDescriptor)"];
n23 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)"];
n24 [label="Entry System.Collections.Generic.IEnumerable<TSource>.TakeWhile<TSource>(System.Func<TSource, bool>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.TakeWhile<TSource>(System.Func<TSource, bool>)"];
n29 [label="Entry lambda expression", span="33-33", cluster="lambda expression"];
n33 [label="Entry lambda expression", span="34-34", cluster="lambda expression"];
n27 [label="Exit lambda expression", span="29-29", cluster="lambda expression"];
n28 [label="Entry CommandLine.Core.Token.Equals(CommandLine.Core.Token)", span="55-55", cluster="CommandLine.Core.Token.Equals(CommandLine.Core.Token)"];
n31 [label="Exit lambda expression", span="33-33", cluster="lambda expression"];
n32 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Take<TSource>(int)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Take<TSource>(int)"];
n34 [label="v.IsValue()", span="34-34", cluster="lambda expression"];
n35 [label="Exit lambda expression", span="34-34", cluster="lambda expression"];
d119 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceWithoutRange(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="304-308", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", color=green, community=0];
d118 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="299-299", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])"];
d120 [label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="311-311", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])"];
d9 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="12-12", cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)"];
d122 [label="Entry lambda expression", span="305-305", cluster="lambda expression"];
d123 [label="new FakeOptionsWithSequenceWithoutRange()", span="305-305", cluster="lambda expression", color=green, community=0];
d124 [label="Exit lambda expression", span="305-305", cluster="lambda expression"];
d125 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()", span="9-9", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceWithoutRange.FakeOptionsWithSequenceWithoutRange()"];
d127 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndSeparator(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="323-327", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", color=green, community=0];
d126 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="318-318", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])"];
d128 [label="expected.ShouldBeEquivalentTo(result.Value.LongSequence)", span="330-330", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])"];
d130 [label="Entry lambda expression", span="324-324", cluster="lambda expression"];
d131 [label="new FakeOptionsWithSequenceAndSeparator()", span="324-324", cluster="lambda expression", color=green, community=0];
d132 [label="Exit lambda expression", span="324-324", cluster="lambda expression"];
d133 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()", span="9-9", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndSeparator.FakeOptionsWithSequenceAndSeparator()"];
d135 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndSeparator(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="343-347", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", color=green, community=0];
d134 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="338-338", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])"];
d136 [label="expected.ShouldBeEquivalentTo(result.Value.StringSequence)", span="350-350", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])"];
d138 [label="Entry lambda expression", span="344-344", cluster="lambda expression"];
d139 [label="new FakeOptionsWithSequenceAndSeparator()", span="344-344", cluster="lambda expression", color=green, community=0];
d140 [label="Exit lambda expression", span="344-344", cluster="lambda expression"];
d121 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])", span="299-299", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_sequence_value_without_range_constraints(string[], long[])"];
d104 [label="Entry Unk.ShouldBeEquivalentTo", span="", cluster="Unk.ShouldBeEquivalentTo"];
d3 [label="var result = InstanceBuilder.Build(\r\n                () => fakeOptions,\r\n                new[] { ''--help'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="24-28", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()"];
d16 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="45-49", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)"];
d24 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithDouble(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="68-72", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)"];
d32 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequence(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="92-96", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])"];
d41 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="114-118", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])"];
d48 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraint(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="137-141", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])"];
d56 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraint(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="159-163", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])"];
d65 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraint(),\r\n                new[] { ''-s'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="178-182", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()"];
d75 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="197-201", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
d85 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraint(),\r\n                new[] { ''--string-seq=one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="217-221", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()"];
d93 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue(),\r\n                new[] { ''one'', ''two'', ''three'', ''this-is-too-much'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="236-240", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
d101 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithEnum(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="260-264", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)"];
d111 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                new[] { ''10'', ''a'', ''b'', ''c'', ''20'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="285-289", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()"];
d165 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithSets(),\r\n                new[] { ''--weburl'', ''http://mywebsite.org/'', ''--ftpurl'', ''fpt://ftpsite.org/'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="398-402", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()"];
d175 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="418-422", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()"];
d184 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] { ''--ftpurl'', ''str1'', ''--weburl'', ''str2'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="438-442", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()"];
d192 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequiredAndSet(),\r\n                new[] {''''},\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="458-462", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()"];
d201 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionWithRequired(),\r\n                new string[] { },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="476-480", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()"];
d210 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new [] { ''-i'', ''10'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="495-499", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()"];
d218 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''--stringvalue'', ''abc'', ''--xyz'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="514-518", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()"];
d227 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-z'', ''-x'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="533-537", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()"];
d235 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                new[] { ''-zx'' },\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="552-556", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()"];
d242 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptions(),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="572-576", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)"];
d129 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])", span="318-318", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_long_sequence_with_separator(string[], long[])"];
d137 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])", span="338-338", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_separator(string[], string[])"];
d102 [label="expected.ShouldBeEquivalentTo(result.Value.Colors)", span="267-267", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)"];
d112 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="292-292", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()"];
d145 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="382-382", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()"];
d176 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="425-425", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()"];
d185 [label="expectedResult.ShouldBeEquivalentTo(result.Value)", span="445-445", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()"];
d1 [label="var fakeOptions = new FakeOptions()", span="18-18", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()"];
d2 [label="var expectedResult = ParserResult.Create(\r\n                ParserResultType.Options,\r\n                fakeOptions, new Error[] { new HelpRequestedError() })", span="19-21", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()"];
d4 [label="Assert.True(expectedResult.Equals(result))", span="31-31", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()"];
d12 [label="Entry lambda expression", span="25-25", cluster="lambda expression"];
d15 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="40-40", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)"];
d17 [label="Assert.Equal(expected, result.Value.LongValue)", span="52-52", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)"];
d20 [label="Entry lambda expression", span="46-46", cluster="lambda expression"];
d23 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="63-63", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)"];
d25 [label="Assert.Equal(expected, result.Value.DoubleValue)", span="75-75", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)"];
d27 [label="Entry lambda expression", span="69-69", cluster="lambda expression"];
d31 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="87-87", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])"];
d33 [label="Assert.True(expected.SequenceEqual(result.Value.IntSequence))", span="99-99", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])"];
d36 [label="Entry lambda expression", span="93-93", cluster="lambda expression"];
d40 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="109-109", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])"];
d42 [label="Assert.True(expected.SequenceEqual(result.Value.IntSequence))", span="121-121", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])"];
d44 [label="Entry lambda expression", span="115-115", cluster="lambda expression"];
d47 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="132-132", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])"];
d49 [label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="144-144", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])"];
d51 [label="Entry lambda expression", span="138-138", cluster="lambda expression"];
d55 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="154-154", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])"];
d57 [label="Assert.True(expected.SequenceEqual(result.Value.StringSequence))", span="166-166", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])"];
d59 [label="Entry lambda expression", span="160-160", cluster="lambda expression"];
d64 [label="var expectedResult = new[] { new MissingValueOptionError(new NameInfo(''s'', ''string-seq'')) }", span="175-175", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()"];
d66 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="185-185", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()"];
d70 [label="Entry lambda expression", span="179-179", cluster="lambda expression"];
d74 [label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="194-194", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
d76 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="204-204", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
d79 [label="Entry lambda expression", span="198-198", cluster="lambda expression"];
d84 [label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''s'', ''string-seq'')) }", span="214-214", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()"];
d86 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="224-224", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()"];
d88 [label="Entry lambda expression", span="218-218", cluster="lambda expression"];
d92 [label="var expectedResult = new[] { new SequenceOutOfRangeError(NameInfo.EmptyName) }", span="233-233", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
d94 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="243-243", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
d96 [label="Entry lambda expression", span="237-237", cluster="lambda expression"];
d100 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="255-255", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)"];
d105 [label="Entry lambda expression", span="261-261", cluster="lambda expression"];
d110 [label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = string.Empty,\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''a'', ''b'', ''c'' },\r\n                    IntValue = 20\r\n                }", span="276-282", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()"];
d115 [label="Entry lambda expression", span="286-286", cluster="lambda expression"];
d164 [label="var expectedResult = new[]\r\n                {\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''weburl'')),\r\n                    new MutuallyExclusiveSetError(new NameInfo('''', ''ftpurl''))\r\n                }", span="391-395", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()"];
d166 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="405-405", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()"];
d169 [label="Entry lambda expression", span="399-399", cluster="lambda expression"];
d174 [label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = null\r\n            }", span="413-416", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()"];
d179 [label="Entry lambda expression", span="419-419", cluster="lambda expression"];
d183 [label="var expectedResult = new FakeOptionWithRequiredAndSet {\r\n                FtpUrl = ''str1'',\r\n                WebUrl = ''str2''\r\n            }", span="433-436", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()"];
d187 [label="Entry lambda expression", span="439-439", cluster="lambda expression"];
d191 [label="var expectedResult = new[]\r\n            {\r\n                new MissingRequiredOptionError(new NameInfo('''', ''ftpurl'')),\r\n                new MissingRequiredOptionError(new NameInfo('''', ''weburl''))\r\n            }", span="452-456", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()"];
d193 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="465-465", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()"];
d196 [label="Entry lambda expression", span="459-459", cluster="lambda expression"];
d200 [label="var expectedResult = new[] { new MissingRequiredOptionError(new NameInfo('''', ''str'')) }", span="473-473", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()"];
d202 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="483-483", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()"];
d204 [label="Entry lambda expression", span="477-477", cluster="lambda expression"];
d209 [label="var expectedResult = new[] { new SequenceOutOfRangeError(new NameInfo(''i'', '''')) }", span="492-492", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()"];
d211 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="502-502", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()"];
d213 [label="Entry lambda expression", span="496-496", cluster="lambda expression"];
d217 [label="var expectedResult = new[] { new UnknownOptionError(''xyz'') }", span="511-511", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()"];
d219 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="521-521", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()"];
d222 [label="Entry lambda expression", span="515-515", cluster="lambda expression"];
d226 [label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="530-530", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()"];
d228 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="540-540", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()"];
d230 [label="Entry lambda expression", span="534-534", cluster="lambda expression"];
d234 [label="var expectedResult = new[] { new UnknownOptionError(''z'') }", span="549-549", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()"];
d236 [label="Assert.True(expectedResult.SequenceEqual(result.Errors))", span="559-559", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()"];
d238 [label="Entry lambda expression", span="553-553", cluster="lambda expression"];
d241 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="567-567", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)"];
d243 [label="Assert.True(expected.Equals(result.Value.StringValue))", span="579-579", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)"];
d246 [label="Entry lambda expression", span="573-573", cluster="lambda expression"];
d103 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)", span="255-255", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_enum_value(string[], CommandLine.Tests.Fakes.Colors)"];
d113 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="273-273", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()"];
d142 [label="var expectedResult = new FakeOptionsWithValues\r\n                {\r\n                    StringValue = ''str1'',\r\n                    LongValue = 10L,\r\n                    StringSequence = new[] { ''-a'', ''--bee'', ''-c'' },\r\n                    IntValue = 20\r\n                }", span="362-368", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()"];
d144 [label="var result = InstanceBuilder.Build(\r\n                () => new FakeOptionsWithValues(),\r\n                (a, optionSpecs) =>\r\n                    Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))),\r\n                arguments,\r\n                StringComparer.Ordinal,\r\n                CultureInfo.InvariantCulture)", span="372-379", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()"];
d146 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="359-359", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()"];
d177 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="411-411", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()"];
d186 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="431-431", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()"];
d0 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="15-15", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()"];
d6 [label="Entry CommandLine.Tests.Fakes.FakeOptions.FakeOptions()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptions.FakeOptions()"];
d13 [label=fakeOptions, span="25-25", cluster="lambda expression"];
d7 [label="Entry CommandLine.HelpRequestedError.HelpRequestedError()", span="338-338", cluster="CommandLine.HelpRequestedError.HelpRequestedError()"];
d8 [label="Entry CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="103-103", cluster="CommandLine.ParserResult.Create<T>(CommandLine.ParserResultType, T, System.Collections.Generic.IEnumerable<CommandLine.Error>)"];
d5 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()", span="15-15", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Explicit_help_request_generates_help_requested_error()"];
d10 [label="Entry CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)", span="90-90", cluster="CommandLine.ParserResult<T>.Equals(CommandLine.ParserResult<T>)"];
d11 [label="Entry Unk.True", span="", cluster="Unk.True"];
d14 [label="Exit lambda expression", span="25-25", cluster="lambda expression"];
d18 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)", span="40-40", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_negative_long_value(string[], long)"];
d19 [label="Entry Unk.Equal", span="", cluster="Unk.Equal"];
d22 [label="Exit lambda expression", span="46-46", cluster="lambda expression"];
d21 [label="new FakeOptions()", span="46-46", cluster="lambda expression"];
d26 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)", span="63-63", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_double_value(string[], double)"];
d29 [label="Exit lambda expression", span="69-69", cluster="lambda expression"];
d28 [label="new FakeOptionsWithDouble()", span="69-69", cluster="lambda expression"];
d34 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])", span="87-87", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence(string[], int[])"];
d35 [label="Entry Unk.SequenceEqual", span="", cluster="Unk.SequenceEqual"];
d38 [label="Exit lambda expression", span="93-93", cluster="lambda expression"];
d37 [label="new FakeOptionsWithSequence()", span="93-93", cluster="lambda expression"];
d43 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])", span="109-109", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_int_sequence_with_range(string[], int[])"];
d46 [label="Exit lambda expression", span="115-115", cluster="lambda expression"];
d45 [label="new FakeOptions()", span="115-115", cluster="lambda expression"];
d50 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])", span="132-132", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_min_constraint(string[], string[])"];
d53 [label="Exit lambda expression", span="138-138", cluster="lambda expression"];
d52 [label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="138-138", cluster="lambda expression"];
d58 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])", span="154-154", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_string_sequence_with_only_max_constraint(string[], string[])"];
d61 [label="Exit lambda expression", span="160-160", cluster="lambda expression"];
d60 [label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="160-160", cluster="lambda expression"];
d63 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="172-172", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()"];
d68 [label="Entry CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)", span="261-261", cluster="CommandLine.MissingValueOptionError.MissingValueOptionError(CommandLine.NameInfo)"];
d69 [label="Entry CommandLine.NameInfo.NameInfo(string, string)", span="20-20", cluster="CommandLine.NameInfo.NameInfo(string, string)"];
d67 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()", span="172-172", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_gererates_MissingValueOptionError()"];
d72 [label="Exit lambda expression", span="179-179", cluster="lambda expression"];
d71 [label="new FakeOptionsWithSequenceAndOnlyMinConstraint()", span="179-179", cluster="lambda expression"];
d73 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="191-191", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
d78 [label="Entry CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)", span="316-316", cluster="CommandLine.SequenceOutOfRangeError.SequenceOutOfRangeError(CommandLine.NameInfo)"];
d77 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="191-191", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_min_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
d81 [label="Exit lambda expression", span="198-198", cluster="lambda expression"];
d80 [label="new FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="198-198", cluster="lambda expression"];
d83 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="211-211", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()"];
d87 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()", span="211-211", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_gererates_SequenceOutOfRangeError()"];
d90 [label="Exit lambda expression", span="218-218", cluster="lambda expression"];
d89 [label="new FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="218-218", cluster="lambda expression"];
d91 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="230-230", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
d95 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()", span="230-230", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Breaking_max_constraint_in_string_sequence_as_value_gererates_SequenceOutOfRangeError()"];
d98 [label="Exit lambda expression", span="237-237", cluster="lambda expression"];
d97 [label="new FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="237-237", cluster="lambda expression"];
d107 [label="Exit lambda expression", span="261-261", cluster="lambda expression"];
d106 [label="new FakeOptionsWithEnum()", span="261-261", cluster="lambda expression"];
d109 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()", span="273-273", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_values_partitioned_between_sequence_and_scalar()"];
d114 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()", span="6-6", cluster="CommandLine.Tests.Fakes.FakeOptionsWithValues.FakeOptionsWithValues()"];
d117 [label="Exit lambda expression", span="286-286", cluster="lambda expression"];
d116 [label="new FakeOptionsWithValues()", span="286-286", cluster="lambda expression"];
d163 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="388-388", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()"];
d168 [label="Entry CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)", span="294-294", cluster="CommandLine.MutuallyExclusiveSetError.MutuallyExclusiveSetError(CommandLine.NameInfo)"];
d167 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()", span="388-388", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_option_from_different_sets_gererates_MutuallyExclusiveSetError()"];
d171 [label="Exit lambda expression", span="399-399", cluster="lambda expression"];
d170 [label="new FakeOptionsWithSets()", span="399-399", cluster="lambda expression"];
d173 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()", span="411-411", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_one_is_true()"];
d178 [label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionWithRequiredAndSet.FakeOptionWithRequiredAndSet()"];
d181 [label="Exit lambda expression", span="419-419", cluster="lambda expression"];
d180 [label="new FakeOptionWithRequiredAndSet()", span="419-419", cluster="lambda expression"];
d182 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()", span="431-431", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_both_are_true()"];
d189 [label="Exit lambda expression", span="439-439", cluster="lambda expression"];
d188 [label="new FakeOptionWithRequiredAndSet()", span="439-439", cluster="lambda expression"];
d190 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="450-450", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()"];
d195 [label="Entry CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)", span="283-283", cluster="CommandLine.MissingRequiredOptionError.MissingRequiredOptionError(CommandLine.NameInfo)"];
d194 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()", span="450-450", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Two_required_options_at_the_same_set_and_none_are_true()"];
d198 [label="Exit lambda expression", span="459-459", cluster="lambda expression"];
d197 [label="new FakeOptionWithRequiredAndSet()", span="459-459", cluster="lambda expression"];
d199 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="470-470", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()"];
d203 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()", span="470-470", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_required_option_gererates_MissingRequiredOptionError()"];
d206 [label="Exit lambda expression", span="477-477", cluster="lambda expression"];
d205 [label="new FakeOptionWithRequired()", span="477-477", cluster="lambda expression"];
d208 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="489-489", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()"];
d212 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()", span="489-489", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Wrong_range_in_sequence_gererates_SequenceOutOfRangeError()"];
d215 [label="Exit lambda expression", span="496-496", cluster="lambda expression"];
d214 [label="new FakeOptions()", span="496-496", cluster="lambda expression"];
d216 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="508-508", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()"];
d221 [label="Entry CommandLine.UnknownOptionError.UnknownOptionError(string)", span="272-272", cluster="CommandLine.UnknownOptionError.UnknownOptionError(string)"];
d220 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()", span="508-508", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_long_option_gererates_UnknownOptionError()"];
d224 [label="Exit lambda expression", span="515-515", cluster="lambda expression"];
d223 [label="new FakeOptions()", span="515-515", cluster="lambda expression"];
d225 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="527-527", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()"];
d229 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()", span="527-527", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_gererates_UnknownOptionError()"];
d232 [label="Exit lambda expression", span="534-534", cluster="lambda expression"];
d231 [label="new FakeOptions()", span="534-534", cluster="lambda expression"];
d233 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="546-546", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()"];
d237 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()", span="546-546", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Parse_unknown_short_option_in_option_group_gererates_UnknownOptionError()"];
d240 [label="Exit lambda expression", span="553-553", cluster="lambda expression"];
d239 [label="new FakeOptions()", span="553-553", cluster="lambda expression"];
d244 [label="Exit CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)", span="567-567", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Omitting_names_assumes_identifier_as_long_name(string[], string)"];
d245 [label="Entry string.Equals(string)", span="0-0", cluster="string.Equals(string)"];
d248 [label="Exit lambda expression", span="573-573", cluster="lambda expression"];
d247 [label="new FakeOptions()", span="573-573", cluster="lambda expression"];
d141 [label="Entry CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()", span="359-359", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()"];
d143 [label="var arguments = new[] { ''--stringvalue'', ''str1'', ''--'', ''10'', ''-a'', ''--bee'', ''-c'', ''20'' }", span="369-369", cluster="CommandLine.Tests.Unit.Core.InstanceBuilderTests.Double_dash_force_subsequent_arguments_as_values()"];
d147 [label="Entry CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)", span="33-33", cluster="CommandLine.Core.InstanceBuilder.Build<T>(System.Func<T>, System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo)"];
d148 [label="Entry lambda expression", span="373-373", cluster="lambda expression"];
d151 [label="Entry lambda expression", span="374-376", cluster="lambda expression"];
d249 [label=fakeOptions, span=""];
d30 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()", span="9-9", cluster="CommandLine.Tests.Fakes.FakeOptionsWithDouble.FakeOptionsWithDouble()"];
d39 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()", span="9-9", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequence.FakeOptionsWithSequence()"];
d54 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()", span="9-9", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraint.FakeOptionsWithSequenceAndOnlyMinConstraint()"];
d62 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()", span="9-9", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraint.FakeOptionsWithSequenceAndOnlyMaxConstraint()"];
d82 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()", span="9-9", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue.FakeOptionsWithSequenceAndOnlyMinConstraintAsValue()"];
d99 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()", span="9-9", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue.FakeOptionsWithSequenceAndOnlyMaxConstraintAsValue()"];
d108 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()", span="16-16", cluster="CommandLine.Tests.Fakes.FakeOptionsWithEnum.FakeOptionsWithEnum()"];
d149 [label="new FakeOptionsWithValues()", span="373-373", cluster="lambda expression"];
d172 [label="Entry CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionsWithSets.FakeOptionsWithSets()"];
d207 [label="Entry CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()", span="4-4", cluster="CommandLine.Tests.Fakes.FakeOptionWithRequired.FakeOptionWithRequired()"];
d150 [label="Exit lambda expression", span="373-373", cluster="lambda expression"];
d153 [label="Exit lambda expression", span="374-376", cluster="lambda expression"];
d152 [label="Tokenizer.PreprocessDashDash(a,\r\n                        args => Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)))", span="375-376", cluster="lambda expression"];
d156 [label="Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal))", span="376-376", cluster="lambda expression"];
d160 [label="NameLookup.Contains(name, optionSpecs, StringComparer.Ordinal)", span="376-376", cluster="lambda expression"];
d154 [label="Entry CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)", span="37-37", cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>>)"];
d155 [label="Entry lambda expression", span="376-376", cluster="lambda expression"];
d250 [label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
d157 [label="Exit lambda expression", span="376-376", cluster="lambda expression"];
d158 [label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="11-11", cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)"];
d159 [label="Entry lambda expression", span="376-376", cluster="lambda expression"];
d161 [label="Exit lambda expression", span="376-376", cluster="lambda expression"];
d162 [label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="12-12", cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)"];
n36 -> n5  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>"];
n36 -> n12  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>"];
n37 -> n5  [key=1, style=dashed, color=darkseagreen4, label="System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>"];
n38 -> n12  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Token"];
n39 -> n26  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Token"];
n40 -> n30  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>"];
n41 -> n30  [key=1, style=dashed, color=darkseagreen4, label=nameIndex];
n0 -> n1  [key=0, style=solid];
n0 -> n5  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>"];
n0 -> n12  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>"];
n1 -> n2  [key=0, style=solid];
n1 -> n3  [key=2, style=dotted];
n1 -> n4  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n1 -> n1  [key=1, style=dashed, color=darkseagreen4, label=tseq];
n5 -> n6  [key=0, style=solid];
n5 -> n7  [key=2, style=dotted];
n5 -> n8  [key=2, style=dotted];
n5 -> n9  [key=2, style=dotted];
n5 -> n10  [key=2, style=dotted];
n5 -> n11  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n12 -> n13  [key=0, style=solid];
n12 -> n14  [key=2, style=dotted];
n12 -> n15  [key=2, style=dotted];
n2 -> n0  [key=0, style=bold, color=blue];
n4 -> n5  [key=0, style=solid];
n4 -> n12  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Token"];
n6 -> n4  [key=0, style=bold, color=blue];
n11 -> n12  [key=0, style=solid];
n13 -> n11  [key=0, style=bold, color=blue];
n14 -> n1  [key=3, color=darkorchid, style=bold, label="Parameter variable CommandLine.Core.TypeDescriptor info"];
n16 -> n17  [key=0, style=solid];
n16 -> n26  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Core.Token"];
n16 -> n19  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>"];
n16 -> n30  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.Token>"];
n17 -> n18  [key=0, style=solid];
n17 -> n22  [key=2, style=dotted];
n17 -> n25  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n17 -> n19  [key=1, style=dashed, color=darkseagreen4, label=nameIndex];
n17 -> n30  [key=1, style=dashed, color=darkseagreen4, label=nameIndex];
n26 -> n27  [key=0, style=solid];
n26 -> n28  [key=2, style=dotted];
n19 -> n21  [key=0, style=solid];
n19 -> n23  [key=2, style=dotted];
n19 -> n24  [key=2, style=dotted];
n19 -> n10  [key=2, style=dotted];
n19 -> n29  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n19 -> n33  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n30 -> n31  [key=0, style=solid];
n30 -> n23  [key=2, style=dotted];
n30 -> n32  [key=2, style=dotted];
n18 -> n19  [key=0, style=solid];
n18 -> n20  [key=0, style=solid];
n25 -> n26  [key=0, style=solid];
n20 -> n21  [key=0, style=solid];
n21 -> n16  [key=0, style=bold, color=blue];
n29 -> n30  [key=0, style=solid];
n33 -> n34  [key=0, style=solid];
n27 -> n25  [key=0, style=bold, color=blue];
n31 -> n29  [key=0, style=bold, color=blue];
n34 -> n35  [key=0, style=solid];
n34 -> n8  [key=2, style=dotted];
n35 -> n33  [key=0, style=bold, color=blue];
d119 -> d120  [key=0, style=solid, color=green];
d119 -> d9  [key=2, style=dotted, color=green];
d119 -> d122  [key=1, style=dashed, color=green, label="lambda expression"];
d118 -> d119  [key=0, style=solid, color=green];
d118 -> d120  [key=1, style=dashed, color=darkseagreen4, label="long[]"];
d120 -> d121  [key=0, style=solid];
d120 -> d104  [key=2, style=dotted];
d122 -> d123  [key=0, style=solid, color=green];
d123 -> d124  [key=0, style=solid, color=green];
d123 -> d125  [key=2, style=dotted, color=green];
d124 -> d122  [key=0, style=bold, color=blue];
d127 -> d128  [key=0, style=solid, color=green];
d127 -> d9  [key=2, style=dotted, color=green];
d127 -> d130  [key=1, style=dashed, color=green, label="lambda expression"];
d126 -> d127  [key=0, style=solid, color=green];
d126 -> d128  [key=1, style=dashed, color=darkseagreen4, label="long[]"];
d128 -> d129  [key=0, style=solid];
d128 -> d104  [key=2, style=dotted];
d130 -> d131  [key=0, style=solid, color=green];
d131 -> d132  [key=0, style=solid, color=green];
d131 -> d133  [key=2, style=dotted, color=green];
d132 -> d130  [key=0, style=bold, color=blue];
d135 -> d136  [key=0, style=solid, color=green];
d135 -> d9  [key=2, style=dotted, color=green];
d135 -> d138  [key=1, style=dashed, color=green, label="lambda expression"];
d134 -> d135  [key=0, style=solid, color=green];
d134 -> d136  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
d136 -> d137  [key=0, style=solid];
d136 -> d104  [key=2, style=dotted];
d138 -> d139  [key=0, style=solid, color=green];
d139 -> d140  [key=0, style=solid, color=green];
d139 -> d133  [key=2, style=dotted, color=green];
d140 -> d138  [key=0, style=bold, color=blue];
d121 -> d118  [key=0, style=bold, color=blue];
d3 -> d9  [key=2, style=dotted];
d3 -> d4  [key=0, style=solid];
d3 -> d12  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d16 -> d9  [key=2, style=dotted];
d16 -> d17  [key=0, style=solid];
d16 -> d20  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d24 -> d9  [key=2, style=dotted];
d24 -> d25  [key=0, style=solid];
d24 -> d27  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d32 -> d9  [key=2, style=dotted];
d32 -> d33  [key=0, style=solid];
d32 -> d36  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d41 -> d9  [key=2, style=dotted];
d41 -> d42  [key=0, style=solid];
d41 -> d44  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d48 -> d9  [key=2, style=dotted];
d48 -> d49  [key=0, style=solid];
d48 -> d51  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d56 -> d9  [key=2, style=dotted];
d56 -> d57  [key=0, style=solid];
d56 -> d59  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d65 -> d9  [key=2, style=dotted];
d65 -> d66  [key=0, style=solid];
d65 -> d70  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d75 -> d9  [key=2, style=dotted];
d75 -> d76  [key=0, style=solid];
d75 -> d79  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d85 -> d9  [key=2, style=dotted];
d85 -> d86  [key=0, style=solid];
d85 -> d88  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d93 -> d9  [key=2, style=dotted];
d93 -> d94  [key=0, style=solid];
d93 -> d96  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d101 -> d9  [key=2, style=dotted];
d101 -> d102  [key=0, style=solid];
d101 -> d105  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d111 -> d9  [key=2, style=dotted];
d111 -> d112  [key=0, style=solid];
d111 -> d115  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d165 -> d9  [key=2, style=dotted];
d165 -> d166  [key=0, style=solid];
d165 -> d169  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d175 -> d9  [key=2, style=dotted];
d175 -> d176  [key=0, style=solid];
d175 -> d179  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d184 -> d9  [key=2, style=dotted];
d184 -> d185  [key=0, style=solid];
d184 -> d187  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d192 -> d9  [key=2, style=dotted];
d192 -> d193  [key=0, style=solid];
d192 -> d196  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d201 -> d9  [key=2, style=dotted];
d201 -> d202  [key=0, style=solid];
d201 -> d204  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d210 -> d9  [key=2, style=dotted];
d210 -> d211  [key=0, style=solid];
d210 -> d213  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d218 -> d9  [key=2, style=dotted];
d218 -> d219  [key=0, style=solid];
d218 -> d222  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d227 -> d9  [key=2, style=dotted];
d227 -> d228  [key=0, style=solid];
d227 -> d230  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d235 -> d9  [key=2, style=dotted];
d235 -> d236  [key=0, style=solid];
d235 -> d238  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d242 -> d9  [key=2, style=dotted];
d242 -> d243  [key=0, style=solid];
d242 -> d246  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d129 -> d126  [key=0, style=bold, color=blue];
d137 -> d134  [key=0, style=bold, color=blue];
d102 -> d104  [key=2, style=dotted];
d102 -> d102  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Colors"];
d102 -> d103  [key=0, style=solid];
d112 -> d104  [key=2, style=dotted];
d112 -> d113  [key=0, style=solid];
d145 -> d104  [key=2, style=dotted];
d145 -> d146  [key=0, style=solid];
d176 -> d104  [key=2, style=dotted];
d176 -> d177  [key=0, style=solid];
d185 -> d104  [key=2, style=dotted];
d185 -> d186  [key=0, style=solid];
d1 -> d3  [key=1, style=dashed, color=darkseagreen4, label=fakeOptions];
d1 -> d2  [key=0, style=solid];
d1 -> d6  [key=2, style=dotted];
d1 -> d13  [key=1, style=dashed, color=darkseagreen4, label=fakeOptions];
d2 -> d3  [key=0, style=solid];
d2 -> d7  [key=2, style=dotted];
d2 -> d8  [key=2, style=dotted];
d2 -> d4  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
d4 -> d5  [key=0, style=solid];
d4 -> d10  [key=2, style=dotted];
d4 -> d11  [key=2, style=dotted];
d12 -> d13  [key=0, style=solid];
d15 -> d16  [key=0, style=solid];
d15 -> d17  [key=1, style=dashed, color=darkseagreen4, label=long];
d17 -> d18  [key=0, style=solid];
d17 -> d19  [key=2, style=dotted];
d20 -> d21  [key=0, style=solid];
d23 -> d24  [key=0, style=solid];
d23 -> d25  [key=1, style=dashed, color=darkseagreen4, label=double];
d25 -> d26  [key=0, style=solid];
d25 -> d19  [key=2, style=dotted];
d27 -> d28  [key=0, style=solid];
d31 -> d32  [key=0, style=solid];
d31 -> d33  [key=1, style=dashed, color=darkseagreen4, label="int[]"];
d33 -> d34  [key=0, style=solid];
d33 -> d35  [key=2, style=dotted];
d33 -> d11  [key=2, style=dotted];
d36 -> d37  [key=0, style=solid];
d40 -> d41  [key=0, style=solid];
d40 -> d42  [key=1, style=dashed, color=darkseagreen4, label="int[]"];
d42 -> d43  [key=0, style=solid];
d42 -> d35  [key=2, style=dotted];
d42 -> d11  [key=2, style=dotted];
d44 -> d45  [key=0, style=solid];
d47 -> d48  [key=0, style=solid];
d47 -> d49  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
d49 -> d50  [key=0, style=solid];
d49 -> d35  [key=2, style=dotted];
d49 -> d11  [key=2, style=dotted];
d51 -> d52  [key=0, style=solid];
d55 -> d56  [key=0, style=solid];
d55 -> d57  [key=1, style=dashed, color=darkseagreen4, label="string[]"];
d57 -> d58  [key=0, style=solid];
d57 -> d35  [key=2, style=dotted];
d57 -> d11  [key=2, style=dotted];
d59 -> d60  [key=0, style=solid];
d64 -> d65  [key=0, style=solid];
d64 -> d68  [key=2, style=dotted];
d64 -> d69  [key=2, style=dotted];
d64 -> d66  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
d66 -> d67  [key=0, style=solid];
d66 -> d35  [key=2, style=dotted];
d66 -> d11  [key=2, style=dotted];
d70 -> d71  [key=0, style=solid];
d74 -> d75  [key=0, style=solid];
d74 -> d78  [key=2, style=dotted];
d74 -> d76  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
d76 -> d77  [key=0, style=solid];
d76 -> d35  [key=2, style=dotted];
d76 -> d11  [key=2, style=dotted];
d79 -> d80  [key=0, style=solid];
d84 -> d85  [key=0, style=solid];
d84 -> d78  [key=2, style=dotted];
d84 -> d69  [key=2, style=dotted];
d84 -> d86  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
d86 -> d87  [key=0, style=solid];
d86 -> d35  [key=2, style=dotted];
d86 -> d11  [key=2, style=dotted];
d88 -> d89  [key=0, style=solid];
d92 -> d93  [key=0, style=solid];
d92 -> d78  [key=2, style=dotted];
d92 -> d94  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
d94 -> d95  [key=0, style=solid];
d94 -> d35  [key=2, style=dotted];
d94 -> d11  [key=2, style=dotted];
d96 -> d97  [key=0, style=solid];
d100 -> d101  [key=0, style=solid];
d100 -> d102  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.Fakes.Colors"];
d105 -> d106  [key=0, style=solid];
d110 -> d111  [key=0, style=solid];
d110 -> d112  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
d110 -> d114  [key=2, style=dotted];
d115 -> d116  [key=0, style=solid];
d164 -> d165  [key=0, style=solid];
d164 -> d168  [key=2, style=dotted];
d164 -> d69  [key=2, style=dotted];
d164 -> d166  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
d166 -> d167  [key=0, style=solid];
d166 -> d35  [key=2, style=dotted];
d166 -> d11  [key=2, style=dotted];
d169 -> d170  [key=0, style=solid];
d174 -> d175  [key=0, style=solid];
d174 -> d176  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
d174 -> d178  [key=2, style=dotted];
d179 -> d180  [key=0, style=solid];
d183 -> d184  [key=0, style=solid];
d183 -> d185  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
d183 -> d178  [key=2, style=dotted];
d187 -> d188  [key=0, style=solid];
d191 -> d192  [key=0, style=solid];
d191 -> d195  [key=2, style=dotted];
d191 -> d69  [key=2, style=dotted];
d191 -> d193  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
d193 -> d194  [key=0, style=solid];
d193 -> d35  [key=2, style=dotted];
d193 -> d11  [key=2, style=dotted];
d196 -> d197  [key=0, style=solid];
d200 -> d201  [key=0, style=solid];
d200 -> d195  [key=2, style=dotted];
d200 -> d69  [key=2, style=dotted];
d200 -> d202  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
d202 -> d203  [key=0, style=solid];
d202 -> d35  [key=2, style=dotted];
d202 -> d11  [key=2, style=dotted];
d204 -> d205  [key=0, style=solid];
d209 -> d210  [key=0, style=solid];
d209 -> d78  [key=2, style=dotted];
d209 -> d69  [key=2, style=dotted];
d209 -> d211  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
d211 -> d212  [key=0, style=solid];
d211 -> d35  [key=2, style=dotted];
d211 -> d11  [key=2, style=dotted];
d213 -> d214  [key=0, style=solid];
d217 -> d218  [key=0, style=solid];
d217 -> d221  [key=2, style=dotted];
d217 -> d219  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
d219 -> d220  [key=0, style=solid];
d219 -> d35  [key=2, style=dotted];
d219 -> d11  [key=2, style=dotted];
d222 -> d223  [key=0, style=solid];
d226 -> d227  [key=0, style=solid];
d226 -> d221  [key=2, style=dotted];
d226 -> d228  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
d228 -> d229  [key=0, style=solid];
d228 -> d35  [key=2, style=dotted];
d228 -> d11  [key=2, style=dotted];
d230 -> d231  [key=0, style=solid];
d234 -> d235  [key=0, style=solid];
d234 -> d221  [key=2, style=dotted];
d234 -> d236  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
d236 -> d237  [key=0, style=solid];
d236 -> d35  [key=2, style=dotted];
d236 -> d11  [key=2, style=dotted];
d238 -> d239  [key=0, style=solid];
d241 -> d242  [key=0, style=solid];
d241 -> d243  [key=1, style=dashed, color=darkseagreen4, label=string];
d243 -> d244  [key=0, style=solid];
d243 -> d245  [key=2, style=dotted];
d243 -> d11  [key=2, style=dotted];
d246 -> d247  [key=0, style=solid];
d103 -> d100  [key=0, style=bold, color=blue];
d113 -> d109  [key=0, style=bold, color=blue];
d142 -> d145  [key=1, style=dashed, color=darkseagreen4, label=expectedResult];
d142 -> d143  [key=0, style=solid];
d142 -> d114  [key=2, style=dotted];
d144 -> d145  [key=0, style=solid];
d144 -> d147  [key=2, style=dotted];
d144 -> d148  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d144 -> d151  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d146 -> d141  [key=0, style=bold, color=blue];
d177 -> d173  [key=0, style=bold, color=blue];
d186 -> d182  [key=0, style=bold, color=blue];
d0 -> d1  [key=0, style=solid];
d13 -> d14  [key=0, style=solid];
d5 -> d0  [key=0, style=bold, color=blue];
d14 -> d12  [key=0, style=bold, color=blue];
d18 -> d15  [key=0, style=bold, color=blue];
d22 -> d20  [key=0, style=bold, color=blue];
d21 -> d6  [key=2, style=dotted];
d21 -> d22  [key=0, style=solid];
d26 -> d23  [key=0, style=bold, color=blue];
d29 -> d27  [key=0, style=bold, color=blue];
d28 -> d29  [key=0, style=solid];
d28 -> d30  [key=2, style=dotted];
d34 -> d31  [key=0, style=bold, color=blue];
d38 -> d36  [key=0, style=bold, color=blue];
d37 -> d38  [key=0, style=solid];
d37 -> d39  [key=2, style=dotted];
d43 -> d40  [key=0, style=bold, color=blue];
d46 -> d44  [key=0, style=bold, color=blue];
d45 -> d6  [key=2, style=dotted];
d45 -> d46  [key=0, style=solid];
d50 -> d47  [key=0, style=bold, color=blue];
d53 -> d51  [key=0, style=bold, color=blue];
d52 -> d53  [key=0, style=solid];
d52 -> d54  [key=2, style=dotted];
d58 -> d55  [key=0, style=bold, color=blue];
d61 -> d59  [key=0, style=bold, color=blue];
d60 -> d61  [key=0, style=solid];
d60 -> d62  [key=2, style=dotted];
d63 -> d64  [key=0, style=solid];
d67 -> d63  [key=0, style=bold, color=blue];
d72 -> d70  [key=0, style=bold, color=blue];
d71 -> d72  [key=0, style=solid];
d71 -> d54  [key=2, style=dotted];
d73 -> d74  [key=0, style=solid];
d77 -> d73  [key=0, style=bold, color=blue];
d81 -> d79  [key=0, style=bold, color=blue];
d80 -> d81  [key=0, style=solid];
d80 -> d82  [key=2, style=dotted];
d83 -> d84  [key=0, style=solid];
d87 -> d83  [key=0, style=bold, color=blue];
d90 -> d88  [key=0, style=bold, color=blue];
d89 -> d90  [key=0, style=solid];
d89 -> d62  [key=2, style=dotted];
d91 -> d92  [key=0, style=solid];
d95 -> d91  [key=0, style=bold, color=blue];
d98 -> d96  [key=0, style=bold, color=blue];
d97 -> d98  [key=0, style=solid];
d97 -> d99  [key=2, style=dotted];
d107 -> d105  [key=0, style=bold, color=blue];
d106 -> d107  [key=0, style=solid];
d106 -> d108  [key=2, style=dotted];
d109 -> d110  [key=0, style=solid];
d117 -> d115  [key=0, style=bold, color=blue];
d116 -> d114  [key=2, style=dotted];
d116 -> d117  [key=0, style=solid];
d163 -> d164  [key=0, style=solid];
d167 -> d163  [key=0, style=bold, color=blue];
d171 -> d169  [key=0, style=bold, color=blue];
d170 -> d171  [key=0, style=solid];
d170 -> d172  [key=2, style=dotted];
d173 -> d174  [key=0, style=solid];
d181 -> d179  [key=0, style=bold, color=blue];
d180 -> d178  [key=2, style=dotted];
d180 -> d181  [key=0, style=solid];
d182 -> d183  [key=0, style=solid];
d189 -> d187  [key=0, style=bold, color=blue];
d188 -> d178  [key=2, style=dotted];
d188 -> d189  [key=0, style=solid];
d190 -> d191  [key=0, style=solid];
d194 -> d190  [key=0, style=bold, color=blue];
d198 -> d196  [key=0, style=bold, color=blue];
d197 -> d178  [key=2, style=dotted];
d197 -> d198  [key=0, style=solid];
d199 -> d200  [key=0, style=solid];
d203 -> d199  [key=0, style=bold, color=blue];
d206 -> d204  [key=0, style=bold, color=blue];
d205 -> d206  [key=0, style=solid];
d205 -> d207  [key=2, style=dotted];
d208 -> d209  [key=0, style=solid];
d212 -> d208  [key=0, style=bold, color=blue];
d215 -> d213  [key=0, style=bold, color=blue];
d214 -> d6  [key=2, style=dotted];
d214 -> d215  [key=0, style=solid];
d216 -> d217  [key=0, style=solid];
d220 -> d216  [key=0, style=bold, color=blue];
d224 -> d222  [key=0, style=bold, color=blue];
d223 -> d6  [key=2, style=dotted];
d223 -> d224  [key=0, style=solid];
d225 -> d226  [key=0, style=solid];
d229 -> d225  [key=0, style=bold, color=blue];
d232 -> d230  [key=0, style=bold, color=blue];
d231 -> d6  [key=2, style=dotted];
d231 -> d232  [key=0, style=solid];
d233 -> d234  [key=0, style=solid];
d237 -> d233  [key=0, style=bold, color=blue];
d240 -> d238  [key=0, style=bold, color=blue];
d239 -> d6  [key=2, style=dotted];
d239 -> d240  [key=0, style=solid];
d244 -> d241  [key=0, style=bold, color=blue];
d248 -> d246  [key=0, style=bold, color=blue];
d247 -> d6  [key=2, style=dotted];
d247 -> d248  [key=0, style=solid];
d141 -> d142  [key=0, style=solid];
d143 -> d144  [key=0, style=solid];
d148 -> d149  [key=0, style=solid];
d151 -> d152  [key=0, style=solid];
d151 -> d156  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
d151 -> d160  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
d249 -> d13  [key=1, style=dashed, color=darkseagreen4, label=fakeOptions];
d149 -> d114  [key=2, style=dotted];
d149 -> d150  [key=0, style=solid];
d150 -> d148  [key=0, style=bold, color=blue];
d153 -> d151  [key=0, style=bold, color=blue];
d152 -> d153  [key=0, style=solid];
d152 -> d154  [key=2, style=dotted];
d152 -> d155  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d156 -> d157  [key=0, style=solid];
d156 -> d158  [key=2, style=dotted];
d156 -> d159  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
d160 -> d161  [key=0, style=solid];
d160 -> d162  [key=2, style=dotted];
d155 -> d156  [key=0, style=solid];
d250 -> d156  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
d250 -> d160  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>"];
d157 -> d155  [key=0, style=bold, color=blue];
d159 -> d160  [key=0, style=solid];
d161 -> d159  [key=0, style=bold, color=blue];
}
