digraph  {
d7 [cluster="CommandLine.Infrastructure.FSharpOptionHelper.Some(System.Type, object)", color=green, community=0, label="return typedType.InvokeMember(\r\n                ''Some'',\r\n                BindingFlags.InvokeMethod | BindingFlags.Public | BindingFlags.Static,\r\n                null,\r\n                null,\r\n                new object[] { value });", prediction=0, span="18-23"];
d4 [cluster="CommandLine.Infrastructure.FSharpOptionHelper.Some(System.Type, object)", label="Entry CommandLine.Infrastructure.FSharpOptionHelper.Some(System.Type, object)", span="13-13"];
d6 [cluster="CommandLine.Infrastructure.FSharpOptionHelper.Some(System.Type, object)", label="var typedType = optionType.MakeGenericType(type)", span="16-16"];
d8 [cluster="CommandLine.Infrastructure.FSharpOptionHelper.Some(System.Type, object)", label="Exit CommandLine.Infrastructure.FSharpOptionHelper.Some(System.Type, object)", span="13-13"];
d10 [cluster="System.Type.InvokeMember(string, System.Reflection.BindingFlags, System.Reflection.Binder, object, object[])", label="Entry System.Type.InvokeMember(string, System.Reflection.BindingFlags, System.Reflection.Binder, object, object[])", span="0-0"];
d14 [cluster="CommandLine.Infrastructure.FSharpOptionHelper.None(System.Type)", color=green, community=0, label="return typedType.InvokeMember(\r\n                ''None'',\r\n                BindingFlags.InvokeMethod | BindingFlags.Public | BindingFlags.Static,\r\n                null,\r\n                null,\r\n                new object[] { });", prediction=1, span="31-36"];
d13 [cluster="CommandLine.Infrastructure.FSharpOptionHelper.None(System.Type)", label="var typedType = optionType.MakeGenericType(type)", span="29-29"];
d15 [cluster="CommandLine.Infrastructure.FSharpOptionHelper.None(System.Type)", label="Exit CommandLine.Infrastructure.FSharpOptionHelper.None(System.Type)", span="26-26"];
d5 [cluster="CommandLine.Infrastructure.FSharpOptionHelper.Some(System.Type, object)", label="var optionType = typeof(FSharpOption<>)", span="15-15"];
d9 [cluster="System.Type.MakeGenericType(params System.Type[])", label="Entry System.Type.MakeGenericType(params System.Type[])", span="0-0"];
d11 [cluster="CommandLine.Infrastructure.FSharpOptionHelper.None(System.Type)", label="Entry CommandLine.Infrastructure.FSharpOptionHelper.None(System.Type)", span="26-26"];
d12 [cluster="CommandLine.Infrastructure.FSharpOptionHelper.None(System.Type)", label="var optionType = typeof(FSharpOption<>)", span="28-28"];
m0_11 [cluster="CommandLine.Tests.BaseFixture.ElementsShouldBeEqual(string[], System.Collections.Generic.IList<string>)", file="FSharpOptionHelperTests.cs", label="int i = 0", span="51-51"];
m0_12 [cluster="CommandLine.Tests.BaseFixture.ElementsShouldBeEqual(string[], System.Collections.Generic.IList<string>)", color=green, community=0, file="FSharpOptionHelperTests.cs", label="i < expected.Length", prediction=2, span="51-51"];
m0_13 [cluster="CommandLine.Tests.BaseFixture.ElementsShouldBeEqual(string[], System.Collections.Generic.IList<string>)", file="FSharpOptionHelperTests.cs", label="expected[i].Should().Equal(actual[i])", span="53-53"];
m0_7 [cluster="Unk.Should", file="FSharpOptionHelperTests.cs", label="Entry Unk.Should", span=""];
m0_8 [cluster="Unk.Equal", file="FSharpOptionHelperTests.cs", label="Entry Unk.Equal", span=""];
m0_9 [cluster="CommandLine.Tests.BaseFixture.ElementsShouldBeEqual(string[], System.Collections.Generic.IList<string>)", color=green, community=0, file="FSharpOptionHelperTests.cs", label="Entry CommandLine.Tests.BaseFixture.ElementsShouldBeEqual(string[], System.Collections.Generic.IList<string>)", prediction=2, span="48-48"];
m0_10 [cluster="CommandLine.Tests.BaseFixture.ElementsShouldBeEqual(string[], System.Collections.Generic.IList<string>)", file="FSharpOptionHelperTests.cs", label="expected.Length.Should().Equal(actual.Count)", span="50-50"];
m0_3 [cluster="CommandLine.Tests.BaseFixture.ElementsShouldBeEqual<T>(T[], T[])", file="FSharpOptionHelperTests.cs", label="i < expected.Length", span="42-42"];
m0_4 [cluster="CommandLine.Tests.BaseFixture.ElementsShouldBeEqual<T>(T[], T[])", file="FSharpOptionHelperTests.cs", label="expected[i].Should().Equal(actual[i])", span="44-44"];
m0_5 [cluster="CommandLine.Tests.BaseFixture.ElementsShouldBeEqual<T>(T[], T[])", color=green, community=0, file="FSharpOptionHelperTests.cs", label="i++", prediction=4, span="42-42"];
m0_6 [cluster="CommandLine.Tests.BaseFixture.ElementsShouldBeEqual<T>(T[], T[])", file="FSharpOptionHelperTests.cs", label="Exit CommandLine.Tests.BaseFixture.ElementsShouldBeEqual<T>(T[], T[])", span="39-39"];
m0_0 [cluster="CommandLine.Tests.BaseFixture.ElementsShouldBeEqual<T>(T[], T[])", file="FSharpOptionHelperTests.cs", label="Entry CommandLine.Tests.BaseFixture.ElementsShouldBeEqual<T>(T[], T[])", span="39-39"];
m0_1 [cluster="CommandLine.Tests.BaseFixture.ElementsShouldBeEqual<T>(T[], T[])", file="FSharpOptionHelperTests.cs", label="expected.Length.Should().Equal(actual.Length)", span="41-41"];
m0_2 [cluster="CommandLine.Tests.BaseFixture.ElementsShouldBeEqual<T>(T[], T[])", file="FSharpOptionHelperTests.cs", label="int i = 0", span="42-42"];
m0_14 [cluster="CommandLine.Tests.BaseFixture.ElementsShouldBeEqual(string[], System.Collections.Generic.IList<string>)", file="FSharpOptionHelperTests.cs", label="i++", span="51-51"];
m0_15 [cluster="CommandLine.Tests.BaseFixture.ElementsShouldBeEqual(string[], System.Collections.Generic.IList<string>)", file="FSharpOptionHelperTests.cs", label="Exit CommandLine.Tests.BaseFixture.ElementsShouldBeEqual(string[], System.Collections.Generic.IList<string>)", span="48-48"];
m1_22 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="TypeConverter.cs", label="Func<string, bool> preprocCompare = command =>\r\n                    nameComparer.Equals(command, firstArg) ||\r\n                    nameComparer.Equals(string.Concat(''--'', command), firstArg)", span="50-52"];
m1_66 [cluster="lambda expression", file="TypeConverter.cs", label="Entry lambda expression", span="54-54"];
m1_133 [cluster="string.Split(params char[])", file="TypeConverter.cs", label="Entry string.Split(params char[])", span="0-0"];
m1_28 [cluster="CommandLine.Core.Tokenizer.PreprocessDashDash(System.Collections.Generic.IEnumerable<string>, System.Func<System.Collections.Generic.IEnumerable<string>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>)", color=green, community=0, file="TypeConverter.cs", label="return tokenizer(arguments);", prediction=5, span="43-43"];
m1_77 [cluster="CommandLine.Core.InstanceChooser.MakeNotParsed(System.Collections.Generic.IEnumerable<System.Type>, params CommandLine.Error[])", file="TypeConverter.cs", label="return new NotParsed<object>(TypeInfo.Create(typeof(NullInstance), types), errors);", span="102-102"];
m1_78 [cluster="System.Linq.Enumerable.Empty<TResult>()", file="TypeConverter.cs", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
m1_23 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="TypeConverter.cs", label="var verbs = Verb.SelectFromTypes(types)", span="54-54"];
m1_24 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="TypeConverter.cs", label="return preprocCompare(''help'')\r\n                ? MakeNotParsed(types,\r\n                    MakeHelpVerbRequestedError(verbs,\r\n                        arguments.Skip(1).SingleOrDefault() ?? string.Empty, nameComparer))\r\n                : preprocCompare(''version'')\r\n                    ? MakeNotParsed(types, new VersionRequestedError())\r\n                    : MatchVerb(tokenizer, verbs, arguments, nameComparer, parsingCulture, nonFatalErrors);", span="56-62"];
m1_27 [cluster="CommandLine.NoVerbSelectedError.NoVerbSelectedError()", color=green, community=0, file="TypeConverter.cs", label="Entry CommandLine.NoVerbSelectedError.NoVerbSelectedError()", prediction=6, span="446-446"];
m1_25 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="TypeConverter.cs", label="Exit CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="35-35"];
m1_26 [cluster="System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", file="TypeConverter.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Empty<TSource>()", span="31-31"];
m1_29 [cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", file="TypeConverter.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0"];
m1_14 [cluster="CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="TypeConverter.cs", label="Entry CommandLine.Core.NameLookup.Contains(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="18-18"];
m1_114 [cluster="System.Collections.Generic.List<T>.Contains(T)", file="TypeConverter.cs", label="Entry System.Collections.Generic.List<T>.Contains(T)", span="0-0"];
m1_131 [cluster="CommandLine.BadFormatTokenError.BadFormatTokenError(string)", file="TypeConverter.cs", label="Entry CommandLine.BadFormatTokenError.BadFormatTokenError(string)", span="196-196"];
m1_50 [cluster="lambda expression", file="TypeConverter.cs", label="Entry lambda expression", span="73-73"];
m1_10 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="TypeConverter.cs", label="Entry CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", span="112-112"];
m1_51 [cluster="lambda expression", color=green, community=0, file="TypeConverter.cs", label="nameComparer.Equals(a.Item1.Name, arguments.First())", prediction=7, span="73-73"];
m1_52 [cluster="lambda expression", color=green, community=0, file="TypeConverter.cs", label="Exit lambda expression", prediction=8, span="73-73"];
m1_53 [cluster="lambda expression", color=green, community=0, file="TypeConverter.cs", label="Entry lambda expression", prediction=7, span="76-77"];
m1_54 [cluster="lambda expression", file="TypeConverter.cs", label="verbs.Single(v => nameComparer.Equals(v.Item1.Name, arguments.First())).Item2.AutoDefault()", span="77-77"];
m1_55 [cluster="lambda expression", file="TypeConverter.cs", label="Exit lambda expression", span="76-77"];
m1_56 [cluster="Unk.Single", file="TypeConverter.cs", label="Entry Unk.Single", span=""];
m1_45 [cluster="lambda expression", file="TypeConverter.cs", label="!arg.EqualsOrdinal(''--'')", span="40-40"];
m1_46 [cluster="lambda expression", file="TypeConverter.cs", label="Exit lambda expression", span="40-40"];
m1_58 [cluster="lambda expression", file="TypeConverter.cs", label="Entry lambda expression", span="77-77"];
m1_8 [cluster="lambda expression", file="TypeConverter.cs", label="Exit lambda expression", span="22-27"];
m1_49 [cluster="lambda expression", file="TypeConverter.cs", label="Exit lambda expression", span="41-41"];
m1_30 [cluster="CommandLine.Core.Verb.SelectFromTypes(System.Collections.Generic.IEnumerable<System.Type>)", file="TypeConverter.cs", label="Entry CommandLine.Core.Verb.SelectFromTypes(System.Collections.Generic.IEnumerable<System.Type>)", span="40-40"];
m1_44 [cluster="lambda expression", file="TypeConverter.cs", label="Entry lambda expression", span="40-40"];
m1_18 [cluster="Unk.Succeed", file="TypeConverter.cs", label="Entry Unk.Succeed", span=""];
m1_9 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, CommandLine.Core.NameLookupResult>)", file="TypeConverter.cs", label="Entry CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, CommandLine.Core.NameLookupResult>)", span="13-13"];
m1_32 [cluster="System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", file="TypeConverter.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Skip<TSource>(int)", span="0-0"];
m1_31 [cluster="System.Collections.Generic.IEnumerable<TSource>.TakeWhile<TSource>(System.Func<TSource, bool>)", file="TypeConverter.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.TakeWhile<TSource>(System.Func<TSource, bool>)", span="0-0"];
m1_13 [cluster="lambda expression", file="TypeConverter.cs", label="Exit lambda expression", span="24-24"];
m1_111 [cluster="CommandLine.Core.Token.Name(string)", file="TypeConverter.cs", label="Entry CommandLine.Core.Token.Name(string)", span="19-19"];
m1_69 [cluster="Unk.Return", file="TypeConverter.cs", label="Entry Unk.Return", span=""];
m1_79 [cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="TypeConverter.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0"];
m1_15 [cluster="lambda expression", file="TypeConverter.cs", label="Entry lambda expression", span="25-25"];
m1_48 [cluster="lambda expression", color=green, community=0, file="TypeConverter.cs", label="tokens.Concat(values)", prediction=10, span="41-41"];
m1_60 [cluster="lambda expression", file="TypeConverter.cs", label="Exit lambda expression", span="77-77"];
m1_113 [cluster="string.String(char, int)", file="TypeConverter.cs", label="Entry string.String(char, int)", span="0-0"];
m1_68 [cluster="lambda expression", file="TypeConverter.cs", label="Exit lambda expression", span="54-54"];
m1_112 [cluster="string.Substring(int, int)", file="TypeConverter.cs", label="Entry string.Substring(int, int)", span="0-0"];
m1_35 [cluster="Unk.Select", file="TypeConverter.cs", label="Entry Unk.Select", span=""];
m1_40 [cluster="string.EqualsOrdinal(string)", file="TypeConverter.cs", label="Entry string.EqualsOrdinal(string)", span="35-35"];
m1_67 [cluster="lambda expression", color=green, community=0, file="TypeConverter.cs", label="Tuple.Create(i + 1, sep)", prediction=11, span="54-54"];
m1_41 [cluster="lambda expression", file="TypeConverter.cs", label="Entry lambda expression", span="39-39"];
m1_64 [cluster="CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", file="TypeConverter.cs", label="return verb.Length > 0\r\n                ? verbs.SingleOrDefault(v => nameComparer.Equals(v.Item1.Name, verb))\r\n                        .ToMaybe()\r\n                        .Return(\r\n                            v => new HelpVerbRequestedError(v.Item1.Name, v.Item2, true),\r\n                            new HelpVerbRequestedError(null, null, false))\r\n                : new HelpVerbRequestedError(null, null, false);", span="91-97"];
m1_5 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="TypeConverter.cs", label="return Result.Succeed(tokens.Where(x => !unkTokens.Contains(x)), errors.Concat(from t in unkTokens select new UnknownOptionError(t.Text)));", span="30-30"];
m1_12 [cluster="Unk.Memorize", file="TypeConverter.cs", label="Entry Unk.Memorize", span=""];
m1_6 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="TypeConverter.cs", label="Exit CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", span="13-13"];
m1_16 [cluster="UnknownOptionError.cstr", file="TypeConverter.cs", label="Entry UnknownOptionError.cstr", span=""];
m1_4 [cluster="CommandLine.Core.Tokenizer.Tokenize(System.Collections.Generic.IEnumerable<string>, System.Func<string, bool>)", file="TypeConverter.cs", label="var unkTokens = (from t in tokens where t.IsName() && !nameLookup(t.Text) select t).Memorize()", span="28-28"];
m1_11 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="TypeConverter.cs", label="Entry CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", span="67-67"];
m1_7 [cluster="System.Collections.Generic.List<T>.List()", file="TypeConverter.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m1_17 [cluster="Unk.Concat", file="TypeConverter.cs", label="Entry Unk.Concat", span=""];
m1_38 [cluster="lambda expression", file="TypeConverter.cs", label="arg.EqualsOrdinal(''--'')", span="37-37"];
m1_37 [cluster="lambda expression", file="TypeConverter.cs", label="Entry lambda expression", span="37-37"];
m1_39 [cluster="lambda expression", file="TypeConverter.cs", label="Exit lambda expression", span="37-37"];
m1_59 [cluster="Unk.SelectMany", file="TypeConverter.cs", label="Entry Unk.SelectMany", span=""];
m1_61 [cluster="lambda expression", file="TypeConverter.cs", label="Entry lambda expression", span="83-83"];
m1_62 [cluster="lambda expression", color=green, community=0, file="TypeConverter.cs", label="optionSequenceWithSeparatorLookup(t.Text)\r\n                    .Return(sep => Tuple.Create(i + 1, sep),\r\n                        Tuple.Create(-1, '\0'))", prediction=8, span="53-55"];
m1_63 [cluster="lambda expression", file="TypeConverter.cs", label="Exit lambda expression", span="83-83"];
m1_71 [cluster="lambda expression", color=green, community=0, file="TypeConverter.cs", label="x.Item1 < 0", prediction=13, span="55-55"];
m1_70 [cluster="lambda expression", file="TypeConverter.cs", label="Entry lambda expression", span="92-92"];
m1_73 [cluster="lambda expression", file="TypeConverter.cs", label="Entry lambda expression", span="95-95"];
m1_72 [cluster="lambda expression", file="TypeConverter.cs", label="Exit lambda expression", span="92-92"];
m1_74 [cluster="lambda expression", color=green, community=0, file="TypeConverter.cs", label="replaces.FirstOrDefault(x => x.Item1 == i).ToMaybe()\r\n                            .Return(r => t.Text.Split(r.Item2).Select(Token.Value),\r\n                                Enumerable.Empty<Token>().Concat(new[]{ t }))", prediction=8, span="58-60"];
m1_75 [cluster="lambda expression", file="TypeConverter.cs", label="Exit lambda expression", span="95-95"];
m1_47 [cluster="Unk.Select", file="TypeConverter.cs", label="Entry Unk.Select", span=""];
m1_80 [cluster="CommandLine.TypeInfo.Create(System.Type, System.Collections.Generic.IEnumerable<System.Type>)", file="TypeConverter.cs", label="Entry CommandLine.TypeInfo.Create(System.Type, System.Collections.Generic.IEnumerable<System.Type>)", span="34-34"];
m1_83 [cluster="lambda expression", file="TypeConverter.cs", label="System.StringComparer", span=""];
m1_81 [cluster="lambda expression", color=green, community=0, file="TypeConverter.cs", label="System.StringComparer", prediction=15, span=""];
m1_82 [cluster="lambda expression", file="TypeConverter.cs", label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", span=""];
m1_84 [cluster="lambda expression", color=green, community=0, file="TypeConverter.cs", label=firstArg, prediction=15, span=""];
m1_85 [cluster="lambda expression", file="TypeConverter.cs", label="System.Collections.Generic.IEnumerable<string>", span=""];
m1_87 [cluster="lambda expression", file="TypeConverter.cs", label="System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>", span=""];
m1_43 [cluster="CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="TypeConverter.cs", label="Exit CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="65-65"];
m1_42 [cluster="CommandLine.Core.InstanceChooser.MatchVerb(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="TypeConverter.cs", label="return verbs.Any(a => nameComparer.Equals(a.Item1.Name, arguments.First()))\r\n                ? InstanceBuilder.Build(\r\n                    Maybe.Just<Func<object>>(\r\n                        () =>\r\n                            verbs.Single(v => nameComparer.Equals(v.Item1.Name, arguments.First())).Item2.AutoDefault()),\r\n                    tokenizer,\r\n                    arguments.Skip(1),\r\n                    nameComparer,\r\n                    parsingCulture,\r\n                    nonFatalErrors)\r\n                : MakeNotParsed(verbs.Select(v => v.Item2), new BadVerbSelectedError(arguments.First()));", span="73-83"];
m1_89 [cluster="lambda expression", file="TypeConverter.cs", label="System.StringComparer", span=""];
m1_88 [cluster="lambda expression", file="TypeConverter.cs", label=string, span=""];
m1_34 [cluster="CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", file="TypeConverter.cs", label="Entry CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", span="86-86"];
m1_118 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="TypeConverter.cs", label="var text = value.Substring(2)", span="118-118"];
m1_117 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="TypeConverter.cs", label="value.Length > 2 && value.StartsWith(''--'', StringComparison.Ordinal)", span="116-116"];
m1_128 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="TypeConverter.cs", label="yield return Token.Value(parts[1]);", span="132-132"];
m1_121 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="TypeConverter.cs", label="yield return Token.Name(text);", span="122-122"];
m1_122 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="TypeConverter.cs", label="yield break;", span="123-123"];
m1_125 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="TypeConverter.cs", label="yield break;", span="128-128"];
m1_127 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="TypeConverter.cs", label="yield return Token.Name(parts[0]);", span="131-131"];
m1_124 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="TypeConverter.cs", label="onError(new BadFormatTokenError(value))", span="127-127"];
m1_119 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="TypeConverter.cs", label="var equalIndex = text.IndexOf('=')", span="119-119"];
m1_126 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="TypeConverter.cs", label="var parts = text.Split('=')", span="130-130"];
m1_120 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="TypeConverter.cs", label="equalIndex <= 0", span="120-120"];
m1_123 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="TypeConverter.cs", label="equalIndex == 1", span="125-125"];
m1_129 [cluster="CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", file="TypeConverter.cs", label="Exit CommandLine.Core.Tokenizer.TokenizeLongName(string, System.Action<CommandLine.Error>)", span="112-112"];
m1_33 [cluster="System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", file="TypeConverter.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", span="0-0"];
m1_36 [cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.Map<TSuccess, TMessage, TResult>(System.Func<TSuccess, TResult>)", file="TypeConverter.cs", label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.Map<TSuccess, TMessage, TResult>(System.Func<TSuccess, TResult>)", span="534-534"];
m1_65 [cluster="CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", file="TypeConverter.cs", label="Exit CommandLine.Core.InstanceChooser.MakeHelpVerbRequestedError(System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>, string, System.StringComparer)", span="86-86"];
m1_130 [cluster="string.IndexOf(char)", file="TypeConverter.cs", label="Entry string.IndexOf(char)", span="0-0"];
m1_132 [cluster="System.Action<T>.Invoke(T)", file="TypeConverter.cs", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
m1_0 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="TypeConverter.cs", label="Entry CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="14-14"];
m1_1 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="TypeConverter.cs", label="return Choose(\r\n                (args, optionSpecs) =>\r\n                    {\r\n                        var tokens = Tokenizer.Tokenize(args, name => NameLookup.Contains(name, optionSpecs, nameComparer));\r\n                        var explodedTokens = Tokenizer.ExplodeOptionList(tokens, name => NameLookup.HavingSeparator(name, optionSpecs, nameComparer));\r\n                        return explodedTokens;\r\n                    },\r\n                types,\r\n                arguments,\r\n                nameComparer,\r\n                parsingCulture,\r\n                nonFatalErrors);", span="21-32"];
m1_3 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="TypeConverter.cs", label="Entry CommandLine.Core.InstanceChooser.Choose(System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>, System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="35-35"];
m1_2 [cluster="CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", file="TypeConverter.cs", label="Exit CommandLine.Core.InstanceChooser.Choose(System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerable<string>, System.StringComparer, System.Globalization.CultureInfo, System.Collections.Generic.IEnumerable<CommandLine.ErrorType>)", span="14-14"];
m1_57 [cluster="RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SucceededWith<TSuccess, TMessage>()", file="TypeConverter.cs", label="Entry RailwaySharp.ErrorHandling.Result<TSuccess, TMessage>.SucceededWith<TSuccess, TMessage>()", span="653-653"];
m1_115 [cluster="System.Collections.Generic.List<T>.Add(T)", file="TypeConverter.cs", label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0"];
m1_110 [cluster="char.IsDigit(char)", file="TypeConverter.cs", label="Entry char.IsDigit(char)", span="0-0"];
m1_116 [cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", file="TypeConverter.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0"];
m1_76 [cluster="HelpVerbRequestedError.cstr", file="TypeConverter.cs", label="Entry HelpVerbRequestedError.cstr", span=""];
m1_86 [cluster="Unk.Split", file="TypeConverter.cs", label="System.StringComparer", span=""];
m1_103 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="TypeConverter.cs", label="!seen.Contains(c) && nameLookup(n)", span="95-95"];
m1_101 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="TypeConverter.cs", label="text.Substring(1)", span="92-92"];
m1_100 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="TypeConverter.cs", label="var seen = new List<char> { first[0] }", span="90-90"];
m1_102 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="TypeConverter.cs", label="var n = new string(c, 1)", span="94-94"];
m1_104 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="TypeConverter.cs", label="seen.Add(c)", span="97-97"];
m1_106 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="TypeConverter.cs", label="seen.Count() < text.Length", span="105-105"];
m1_90 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="TypeConverter.cs", label="value.Length > 1 || value[0] == '-' || value[1] != '-'", span="71-71"];
m1_93 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="TypeConverter.cs", label="yield return Token.Value(value);", span="77-77"];
m1_94 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="TypeConverter.cs", label="yield break;", span="78-78"];
m1_96 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="TypeConverter.cs", label="yield return Token.Name(text);", span="83-83"];
m1_97 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="TypeConverter.cs", label="yield break;", span="84-84"];
m1_99 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="TypeConverter.cs", label="yield return Token.Name(first);", span="88-88"];
m1_105 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="TypeConverter.cs", label="yield return Token.Name(n);", span="98-98"];
m1_107 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="TypeConverter.cs", label="yield return Token.Value(text.Substring(seen.Count()));", span="107-107"];
m1_91 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="TypeConverter.cs", label="var text = value.Substring(1)", span="73-73"];
m1_95 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="TypeConverter.cs", label="value.Length == 2", span="81-81"];
m1_98 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="TypeConverter.cs", label="var first = text.Substring(0, 1)", span="87-87"];
m1_92 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="TypeConverter.cs", label="char.IsDigit(text[0])", span="75-75"];
m1_108 [cluster="CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", file="TypeConverter.cs", label="Exit CommandLine.Core.Tokenizer.TokenizeShortName(string, System.Func<string, bool>)", span="67-67"];
m1_109 [cluster="string.Substring(int)", file="TypeConverter.cs", label="Entry string.Substring(int)", span="0-0"];
m1_135 [file="TypeConverter.cs", label=values, span=""];
m1_136 [file="TypeConverter.cs", label="System.Func<string, CSharpx.Maybe<char>>", span=""];
m1_138 [file="TypeConverter.cs", label=replaces, span=""];
m1_137 [file="TypeConverter.cs", label=int, span=""];
m1_139 [file="TypeConverter.cs", label=int, span=""];
m1_140 [file="TypeConverter.cs", label="CommandLine.Core.Token", span=""];
m1_134 [file="TypeConverter.cs", label=unkTokens, span=""];
d4 -> d7  [color=green, key=1, label=object, style=dashed];
m0_11 -> m0_13  [color=darkseagreen4, key=1, label=i, style=dashed];
m0_11 -> m0_14  [color=darkseagreen4, key=1, label=i, style=dashed];
m0_9 -> m0_12  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m0_9 -> m0_13  [color=darkseagreen4, key=1, label="string[]", style=dashed];
m0_5 -> m0_5  [color=darkseagreen4, key=1, label=i, style=dashed];
m0_0 -> m0_3  [color=darkseagreen4, key=1, label="T[]", style=dashed];
m0_0 -> m0_4  [color=darkseagreen4, key=1, label="T[]", style=dashed];
m0_2 -> m0_4  [color=darkseagreen4, key=1, label=i, style=dashed];
m0_2 -> m0_5  [color=darkseagreen4, key=1, label=i, style=dashed];
m0_14 -> m0_14  [color=darkseagreen4, key=1, label=i, style=dashed];
m1_22 -> m1_38  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_22 -> m1_24  [color=darkseagreen4, key=1, label=preprocCompare, style=dashed];
m1_23 -> m1_28  [color=green, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m1_23 -> m1_25  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m1_23 -> m1_26  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m1_24 -> m1_37  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_27 -> m1_47  [color=green, key=1, label="lambda expression", style=dashed];
m1_25 -> m1_27  [color=green, key=1, label=tokenizerResult, style=dashed];
m1_25 -> m1_41  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_26 -> m1_48  [color=green, key=1, label=values, style=dashed];
m1_26 -> m1_44  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_50 -> m1_52  [color=green, key=1, label="System.Func<string, CSharpx.Maybe<char>>", style=dashed];
m1_50 -> m1_62  [color=green, key=1, label="System.Func<string, CSharpx.Maybe<char>>", style=dashed];
m1_50 -> m1_55  [color=darkseagreen4, key=1, label="RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>", style=dashed];
m1_10 -> m1_124  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_51 -> m1_53  [color=green, key=1, label=tokens, style=dashed];
m1_52 -> m1_37  [color=green, key=1, label="lambda expression", style=dashed];
m1_52 -> m1_61  [color=green, key=1, label="lambda expression", style=dashed];
m1_52 -> m1_74  [color=green, key=1, label=replaces, style=dashed];
m1_53 -> m1_70  [color=green, key=1, label="lambda expression", style=dashed];
m1_54 -> m1_87  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_54 -> m1_58  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_64 -> m1_70  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_64 -> m1_73  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_5 -> m1_11  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_5 -> m1_5  [color=darkseagreen4, key=1, label=t, style=dashed];
m1_6 -> m1_15  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_4 -> m1_12  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m1_4 -> m1_6  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m1_4 -> m1_16  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m1_11 -> m1_103  [color=darkseagreen4, key=1, label="System.Func<string, bool>", style=dashed];
m1_11 -> m1_95  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_37 -> m1_67  [color=green, key=1, label=int, style=dashed];
m1_62 -> m1_66  [color=green, key=1, label="lambda expression", style=dashed];
m1_70 -> m1_81  [color=green, key=1, label=int, style=dashed];
m1_70 -> m1_84  [color=green, key=1, label="CommandLine.Core.Token", style=dashed];
m1_74 -> m1_80  [color=green, key=1, label="lambda expression", style=dashed];
m1_74 -> m1_83  [color=green, key=1, label="lambda expression", style=dashed];
m1_83 -> m1_38  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m1_81 -> m1_5  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m1_81 -> m1_12  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m1_81 -> m1_6  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m1_81 -> m1_16  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m1_82 -> m1_12  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m1_82 -> m1_16  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>", style=dashed];
m1_84 -> m1_38  [color=darkseagreen4, key=1, label=firstArg, style=dashed];
m1_85 -> m1_51  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m1_85 -> m1_54  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m1_85 -> m1_59  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m1_87 -> m1_54  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>", style=dashed];
m1_42 -> m1_50  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_42 -> m1_53  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_42 -> m1_61  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_89 -> m1_71  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m1_88 -> m1_71  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_34 -> m1_71  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_118 -> m1_121  [color=darkseagreen4, key=1, label=text, style=dashed];
m1_119 -> m1_123  [color=darkseagreen4, key=1, label=equalIndex, style=dashed];
m1_126 -> m1_128  [color=darkseagreen4, key=1, label=parts, style=dashed];
m1_36 -> m1_51  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m1_36 -> m1_54  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<System.Tuple<CommandLine.Core.Verb, System.Type>>", style=dashed];
m1_36 -> m1_59  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m1_0 -> m1_3  [color=darkseagreen4, key=1, label="System.Collections.Generic.IEnumerable<string>", style=dashed];
m1_0 -> m1_5  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m1_0 -> m1_12  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m1_0 -> m1_6  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m1_0 -> m1_16  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m1_1 -> m1_5  [color=darkseagreen4, key=1, label=errors, style=dashed];
m1_3 -> m1_5  [color=darkseagreen4, key=1, label=tokens, style=dashed];
m1_3 -> m1_3  [color=darkseagreen4, key=1, label=arg, style=dashed];
m1_3 -> m1_38  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m1_3 -> m1_24  [color=darkseagreen4, key=1, label="System.Func<System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, RailwaySharp.ErrorHandling.Result<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, CommandLine.Error>>", style=dashed];
m1_86 -> m1_51  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m1_86 -> m1_54  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m1_86 -> m1_59  [color=darkseagreen4, key=1, label="System.StringComparer", style=dashed];
m1_101 -> m1_103  [color=darkseagreen4, key=1, label=c, style=dashed];
m1_101 -> m1_104  [color=darkseagreen4, key=1, label=c, style=dashed];
m1_100 -> m1_103  [color=darkseagreen4, key=1, label=seen, style=dashed];
m1_100 -> m1_104  [color=darkseagreen4, key=1, label=seen, style=dashed];
m1_100 -> m1_106  [color=darkseagreen4, key=1, label=seen, style=dashed];
m1_100 -> m1_107  [color=darkseagreen4, key=1, label=seen, style=dashed];
m1_102 -> m1_105  [color=darkseagreen4, key=1, label=n, style=dashed];
m1_91 -> m1_101  [color=darkseagreen4, key=1, label=text, style=dashed];
m1_91 -> m1_106  [color=darkseagreen4, key=1, label=text, style=dashed];
m1_91 -> m1_96  [color=darkseagreen4, key=1, label=text, style=dashed];
m1_91 -> m1_107  [color=darkseagreen4, key=1, label=text, style=dashed];
m1_135 -> m1_48  [color=green, key=1, label=values, style=dashed];
m1_136 -> m1_62  [color=green, key=1, label="System.Func<string, CSharpx.Maybe<char>>", style=dashed];
m1_138 -> m1_74  [color=green, key=1, label=replaces, style=dashed];
m1_137 -> m1_67  [color=green, key=1, label=int, style=dashed];
m1_139 -> m1_81  [color=green, key=1, label=int, style=dashed];
m1_140 -> m1_84  [color=green, key=1, label="CommandLine.Core.Token", style=dashed];
}
