digraph  {
d29 [label="return new StringBuilder(builderSize)\r\n                .Append(CopyrightWord)\r\n                .Append(' ')\r\n                .Append(isSymbolUpper ? SymbolUpper : SymbolLower)\r\n                .Append(' ')\r\n                .Append(FormatYears(copyrightYears))\r\n                .Append(' ')\r\n                .Append(author)\r\n                .ToString();", span="144-152", cluster="CommandLine.Text.CopyrightInfo.ToString()", color=green, community=1];
d49 [label="CommandLine.Text.CopyrightInfo", span=""];
d27 [label="attribute != null", span="139-139", cluster="CommandLine.Text.CopyrightInfo.ToString()"];
d30 [label="Exit CommandLine.Text.CopyrightInfo.ToString()", span="137-137", cluster="CommandLine.Text.CopyrightInfo.ToString()"];
d31 [label="Entry System.Text.StringBuilder.StringBuilder(int)", span="0-0", cluster="System.Text.StringBuilder.StringBuilder(int)"];
d32 [label="Entry System.Text.StringBuilder.Append(string)", span="0-0", cluster="System.Text.StringBuilder.Append(string)"];
d33 [label="Entry System.Text.StringBuilder.Append(char)", span="0-0", cluster="System.Text.StringBuilder.Append(char)"];
d34 [label="Entry CommandLine.Text.CopyrightInfo.FormatYears(int[])", span="161-161", cluster="CommandLine.Text.CopyrightInfo.FormatYears(int[])"];
d35 [label="Entry System.Text.StringBuilder.ToString()", span="0-0", cluster="System.Text.StringBuilder.ToString()"];
d40 [label="i < years.Length", span="169-169", cluster="CommandLine.Text.CopyrightInfo.FormatYears(int[])", color=green, community=0];
d39 [label="int i = 0", span="169-169", cluster="CommandLine.Text.CopyrightInfo.FormatYears(int[])", color=green, community=0];
d45 [label="i++", span="169-169", cluster="CommandLine.Text.CopyrightInfo.FormatYears(int[])", color=green, community=0];
d41 [label="yearsPart.Append(years[i].ToString(CultureInfo.InvariantCulture))", span="171-171", cluster="CommandLine.Text.CopyrightInfo.FormatYears(int[])"];
d46 [label="return yearsPart.ToString();", span="179-179", cluster="CommandLine.Text.CopyrightInfo.FormatYears(int[])"];
d38 [label="var yearsPart = new StringBuilder(years.Length * 6)", span="168-168", cluster="CommandLine.Text.CopyrightInfo.FormatYears(int[])"];
d42 [label="int next = i + 1", span="172-172", cluster="CommandLine.Text.CopyrightInfo.FormatYears(int[])", color=green, community=0];
d44 [label="yearsPart.Append(years[next] - years[i] > 1 ? '' - '' : '', '')", span="175-175", cluster="CommandLine.Text.CopyrightInfo.FormatYears(int[])"];
d43 [label="next < years.Length", span="173-173", cluster="CommandLine.Text.CopyrightInfo.FormatYears(int[])"];
d10 [label="this.isSymbolUpper = isSymbolUpper", span="65-65", cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(bool, string, params int[])"];
d11 [label="this.author = author", span="66-66", cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(bool, string, params int[])"];
d12 [label="this.copyrightYears = copyrightYears", span="67-67", cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(bool, string, params int[])"];
d13 [label="builderSize = 12 + author.Length + (4 * copyrightYears.Length) + ExtraLength", span="68-68", cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(bool, string, params int[])"];
d21 [label="this.attribute = attribute", span="85-85", cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(System.Reflection.AssemblyCopyrightAttribute)"];
d28 [label="return attribute.Copyright;", span="141-141", cluster="CommandLine.Text.CopyrightInfo.ToString()"];
d26 [label="Entry CommandLine.Text.CopyrightInfo.ToString()", span="137-137", cluster="CommandLine.Text.CopyrightInfo.ToString()"];
d47 [label="Exit CommandLine.Text.CopyrightInfo.FormatYears(int[])", span="161-161", cluster="CommandLine.Text.CopyrightInfo.FormatYears(int[])"];
d36 [label="years.Length == 1", span="163-163", cluster="CommandLine.Text.CopyrightInfo.FormatYears(int[])"];
d37 [label="return years[0].ToString(CultureInfo.InvariantCulture);", span="165-165", cluster="CommandLine.Text.CopyrightInfo.FormatYears(int[])"];
d48 [label="Entry int.ToString(System.IFormatProvider)", span="0-0", cluster="int.ToString(System.IFormatProvider)"];
d4 [label="Entry CommandLine.Text.CopyrightInfo.CopyrightInfo(bool, string, params int[])", span="59-59", cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(bool, string, params int[])"];
d9 [label="int ExtraLength = 10", span="64-64", cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(bool, string, params int[])"];
d14 [label="Exit CommandLine.Text.CopyrightInfo.CopyrightInfo(bool, string, params int[])", span="59-59", cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(bool, string, params int[])"];
d20 [label="Entry CommandLine.Text.CopyrightInfo.CopyrightInfo(System.Reflection.AssemblyCopyrightAttribute)", span="83-83", cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(System.Reflection.AssemblyCopyrightAttribute)"];
d22 [label="Exit CommandLine.Text.CopyrightInfo.CopyrightInfo(System.Reflection.AssemblyCopyrightAttribute)", span="83-83", cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(System.Reflection.AssemblyCopyrightAttribute)"];
d23 [label="Entry CommandLine.Text.CopyrightInfo.implicit operator string(CommandLine.Text.CopyrightInfo)", span="128-128", cluster="CommandLine.Text.CopyrightInfo.implicit operator string(CommandLine.Text.CopyrightInfo)"];
d24 [label="return info.ToString();", span="130-130", cluster="CommandLine.Text.CopyrightInfo.implicit operator string(CommandLine.Text.CopyrightInfo)"];
d5 [label="string.IsNullOrWhiteSpace(author)", span="61-61", cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(bool, string, params int[])"];
d7 [label="copyrightYears.Length == 0", span="62-62", cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(bool, string, params int[])"];
d6 [label="throw new ArgumentException(''author'');", span="61-61", cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(bool, string, params int[])"];
d8 [label="throw new ArgumentOutOfRangeException(''copyrightYears'');", span="62-62", cluster="CommandLine.Text.CopyrightInfo.CopyrightInfo(bool, string, params int[])"];
d25 [label="Exit CommandLine.Text.CopyrightInfo.implicit operator string(CommandLine.Text.CopyrightInfo)", span="128-128", cluster="CommandLine.Text.CopyrightInfo.implicit operator string(CommandLine.Text.CopyrightInfo)"];
d15 [label="Entry string.IsNullOrWhiteSpace(string)", span="0-0", cluster="string.IsNullOrWhiteSpace(string)"];
d16 [label="Entry System.ArgumentException.ArgumentException(string)", span="0-0", cluster="System.ArgumentException.ArgumentException(string)"];
d17 [label="Entry System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string)", span="0-0", cluster="System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string)"];
m0_15 [label="Entry CommandLine.Tests.ValueListAttributeFixture.MockSpecializedList.MockSpecializedList()", span="41-41", cluster="CommandLine.Tests.ValueListAttributeFixture.MockSpecializedList.MockSpecializedList()", file="HeadingInfo.cs"];
m0_12 [label="Entry CommandLine.Tests.ValueListAttributeFixture.ConcreteTypeIsGenericListOfStringSubType()", span="73-73", cluster="CommandLine.Tests.ValueListAttributeFixture.ConcreteTypeIsGenericListOfStringSubType()", file="HeadingInfo.cs"];
m0_13 [label="new ValueListAttribute(new MockSpecializedList().GetType())", span="75-75", cluster="CommandLine.Tests.ValueListAttributeFixture.ConcreteTypeIsGenericListOfStringSubType()", color=green, community=0, file="HeadingInfo.cs"];
m0_14 [label="Exit CommandLine.Tests.ValueListAttributeFixture.ConcreteTypeIsGenericListOfStringSubType()", span="73-73", cluster="CommandLine.Tests.ValueListAttributeFixture.ConcreteTypeIsGenericListOfStringSubType()", file="HeadingInfo.cs"];
m0_3 [label="Entry CommandLine.ValueListAttribute.ValueListAttribute(System.Type)", span="304-304", cluster="CommandLine.ValueListAttribute.ValueListAttribute(System.Type)", file="HeadingInfo.cs"];
m0_22 [label="Entry CommandLine.Tests.ValueListAttributeFixture.MockOptions.MockOptions()", span="45-45", cluster="CommandLine.Tests.ValueListAttributeFixture.MockOptions.MockOptions()", file="HeadingInfo.cs"];
m0_27 [label="Entry CommandLine.Tests.ValueListAttributeFixture.UseGenericListOfStringInterfaceReference()", span="89-89", cluster="CommandLine.Tests.ValueListAttributeFixture.UseGenericListOfStringInterfaceReference()", file="HeadingInfo.cs"];
m0_29 [label="var values = ValueListAttribute.GetReference(options)", span="93-93", cluster="CommandLine.Tests.ValueListAttributeFixture.UseGenericListOfStringInterfaceReference()", file="HeadingInfo.cs"];
m0_28 [label="var options = new MockOptions()", span="91-91", cluster="CommandLine.Tests.ValueListAttributeFixture.UseGenericListOfStringInterfaceReference()", file="HeadingInfo.cs"];
m0_30 [label="values.Add(''value0'')", span="94-94", cluster="CommandLine.Tests.ValueListAttributeFixture.UseGenericListOfStringInterfaceReference()", file="HeadingInfo.cs"];
m0_31 [label="values.Add(''value1'')", span="95-95", cluster="CommandLine.Tests.ValueListAttributeFixture.UseGenericListOfStringInterfaceReference()", file="HeadingInfo.cs"];
m0_32 [label="values.Add(''value2'')", span="96-96", cluster="CommandLine.Tests.ValueListAttributeFixture.UseGenericListOfStringInterfaceReference()", file="HeadingInfo.cs"];
m0_33 [label="base.ElementsShouldBeEqual(new string[] { ''value0'', ''value1'', ''value2'' }, options.Values)", span="98-98", cluster="CommandLine.Tests.ValueListAttributeFixture.UseGenericListOfStringInterfaceReference()", file="HeadingInfo.cs"];
m0_34 [label="Exit CommandLine.Tests.ValueListAttributeFixture.UseGenericListOfStringInterfaceReference()", span="89-89", cluster="CommandLine.Tests.ValueListAttributeFixture.UseGenericListOfStringInterfaceReference()", file="HeadingInfo.cs"];
m0_16 [label="Entry CommandLine.Tests.ValueListAttributeFixture.GetGenericListOfStringInterfaceReference()", span="79-79", cluster="CommandLine.Tests.ValueListAttributeFixture.GetGenericListOfStringInterfaceReference()", file="HeadingInfo.cs"];
m0_20 [label="values.GetType().Should().Equal(typeof(List<string>))", span="85-85", cluster="CommandLine.Tests.ValueListAttributeFixture.GetGenericListOfStringInterfaceReference()", file="HeadingInfo.cs"];
m0_18 [label="IList<string> values = ValueListAttribute.GetReference(options)", span="83-83", cluster="CommandLine.Tests.ValueListAttributeFixture.GetGenericListOfStringInterfaceReference()", file="HeadingInfo.cs"];
m0_19 [label="values.Should().Not.Be.Null()", span="84-84", cluster="CommandLine.Tests.ValueListAttributeFixture.GetGenericListOfStringInterfaceReference()", file="HeadingInfo.cs"];
m0_17 [label="var options = new MockOptions()", span="81-81", cluster="CommandLine.Tests.ValueListAttributeFixture.GetGenericListOfStringInterfaceReference()", file="HeadingInfo.cs"];
m0_21 [label="Exit CommandLine.Tests.ValueListAttributeFixture.GetGenericListOfStringInterfaceReference()", span="79-79", cluster="CommandLine.Tests.ValueListAttributeFixture.GetGenericListOfStringInterfaceReference()", file="HeadingInfo.cs"];
m0_4 [label="Entry CommandLine.Tests.ValueListAttributeFixture.WillThrowExceptionIfConcreteTypeIsIncompatible()", span="61-61", cluster="CommandLine.Tests.ValueListAttributeFixture.WillThrowExceptionIfConcreteTypeIsIncompatible()", file="HeadingInfo.cs"];
m0_5 [label="new ValueListAttribute(new List<object>().GetType())", span="63-63", cluster="CommandLine.Tests.ValueListAttributeFixture.WillThrowExceptionIfConcreteTypeIsIncompatible()", file="HeadingInfo.cs"];
m0_6 [label="Exit CommandLine.Tests.ValueListAttributeFixture.WillThrowExceptionIfConcreteTypeIsIncompatible()", span="61-61", cluster="CommandLine.Tests.ValueListAttributeFixture.WillThrowExceptionIfConcreteTypeIsIncompatible()", file="HeadingInfo.cs"];
m0_35 [label="Entry System.Collections.Generic.ICollection<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.ICollection<T>.Add(T)", file="HeadingInfo.cs"];
m0_23 [label="Entry CommandLine.ValueListAttribute.GetReference(object)", span="328-328", cluster="CommandLine.ValueListAttribute.GetReference(object)", file="HeadingInfo.cs"];
m0_8 [label="Entry object.GetType()", span="0-0", cluster="object.GetType()", file="HeadingInfo.cs"];
m0_25 [label="Entry Unk.Null", span="", cluster="Unk.Null", file="HeadingInfo.cs"];
m0_36 [label="Entry CommandLine.Tests.BaseFixture.ElementsShouldBeEqual(string[], System.Collections.Generic.IList<string>)", span="48-48", cluster="CommandLine.Tests.BaseFixture.ElementsShouldBeEqual(string[], System.Collections.Generic.IList<string>)", file="HeadingInfo.cs"];
m0_0 [label="Entry CommandLine.Tests.ValueListAttributeFixture.WillThrowExceptionIfConcreteTypeIsNull()", span="54-54", cluster="CommandLine.Tests.ValueListAttributeFixture.WillThrowExceptionIfConcreteTypeIsNull()", file="HeadingInfo.cs"];
m0_1 [label="new ValueListAttribute(null)", span="56-56", cluster="CommandLine.Tests.ValueListAttributeFixture.WillThrowExceptionIfConcreteTypeIsNull()", file="HeadingInfo.cs"];
m0_2 [label="Exit CommandLine.Tests.ValueListAttributeFixture.WillThrowExceptionIfConcreteTypeIsNull()", span="54-54", cluster="CommandLine.Tests.ValueListAttributeFixture.WillThrowExceptionIfConcreteTypeIsNull()", file="HeadingInfo.cs"];
m0_26 [label="Entry Unk.Equal", span="", cluster="Unk.Equal", file="HeadingInfo.cs"];
m0_24 [label="Entry Unk.Should", span="", cluster="Unk.Should", file="HeadingInfo.cs"];
m0_9 [label="Entry CommandLine.Tests.ValueListAttributeFixture.ConcreteTypeIsGenericListOfString()", span="67-67", cluster="CommandLine.Tests.ValueListAttributeFixture.ConcreteTypeIsGenericListOfString()", file="HeadingInfo.cs"];
m0_10 [label="new ValueListAttribute(new List<string>().GetType())", span="69-69", cluster="CommandLine.Tests.ValueListAttributeFixture.ConcreteTypeIsGenericListOfString()", file="HeadingInfo.cs"];
m0_11 [label="Exit CommandLine.Tests.ValueListAttributeFixture.ConcreteTypeIsGenericListOfString()", span="67-67", cluster="CommandLine.Tests.ValueListAttributeFixture.ConcreteTypeIsGenericListOfString()", file="HeadingInfo.cs"];
m0_7 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="HeadingInfo.cs"];
m0_37 [label="CommandLine.Tests.ValueListAttributeFixture", span="", file="HeadingInfo.cs"];
d29 -> d30  [key=0, style=solid, color=green];
d29 -> d31  [key=2, style=dotted, color=green];
d29 -> d32  [key=2, style=dotted, color=green];
d29 -> d33  [key=2, style=dotted, color=green];
d29 -> d34  [key=2, style=dotted, color=green];
d29 -> d35  [key=2, style=dotted, color=green];
d49 -> d29  [key=1, style=dashed, color=green, label="CommandLine.Text.CopyrightInfo"];
d49 -> d10  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.CopyrightInfo"];
d49 -> d11  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.CopyrightInfo"];
d49 -> d12  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.CopyrightInfo"];
d49 -> d13  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.CopyrightInfo"];
d49 -> d21  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.CopyrightInfo"];
d49 -> d27  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.CopyrightInfo"];
d49 -> d28  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Text.CopyrightInfo"];
d27 -> d29  [key=0, style=solid, color=green];
d27 -> d28  [key=0, style=solid];
d30 -> d26  [key=0, style=bold, color=blue];
d34 -> d40  [key=1, style=dashed, color=green, label="int[]"];
d34 -> d36  [key=0, style=solid];
d34 -> d37  [key=1, style=dashed, color=darkseagreen4, label="int[]"];
d34 -> d38  [key=1, style=dashed, color=darkseagreen4, label="int[]"];
d34 -> d41  [key=1, style=dashed, color=darkseagreen4, label="int[]"];
d34 -> d43  [key=1, style=dashed, color=darkseagreen4, label="int[]"];
d34 -> d44  [key=1, style=dashed, color=darkseagreen4, label="int[]"];
d40 -> d40  [key=3, color=green, style=bold, label="Local variable int i"];
d40 -> d41  [key=0, style=solid, color=green];
d40 -> d46  [key=0, style=solid, color=green];
d39 -> d40  [key=0, style=solid, color=green];
d39 -> d41  [key=1, style=dashed, color=green, label=i];
d39 -> d42  [key=1, style=dashed, color=green, label=i];
d39 -> d44  [key=1, style=dashed, color=green, label=i];
d39 -> d45  [key=1, style=dashed, color=green, label=i];
d45 -> d40  [key=0, style=solid, color=green];
d45 -> d45  [key=1, style=dashed, color=green, label=i];
d41 -> d42  [key=0, style=solid, color=green];
d41 -> d32  [key=2, style=dotted];
d41 -> d48  [key=2, style=dotted];
d46 -> d35  [key=2, style=dotted];
d46 -> d47  [key=0, style=solid];
d38 -> d39  [key=0, style=solid, color=green];
d38 -> d31  [key=2, style=dotted];
d38 -> d41  [key=1, style=dashed, color=darkseagreen4, label=yearsPart];
d38 -> d46  [key=1, style=dashed, color=darkseagreen4, label=yearsPart];
d38 -> d44  [key=1, style=dashed, color=darkseagreen4, label=yearsPart];
d42 -> d43  [key=0, style=solid, color=green];
d42 -> d44  [key=1, style=dashed, color=green, label=next];
d44 -> d45  [key=0, style=solid, color=green];
d44 -> d32  [key=2, style=dotted];
d43 -> d45  [key=0, style=solid, color=green];
d43 -> d44  [key=0, style=solid];
d10 -> d11  [key=0, style=solid];
d11 -> d12  [key=0, style=solid];
d12 -> d13  [key=0, style=solid];
d13 -> d14  [key=0, style=solid];
d21 -> d22  [key=0, style=solid];
d28 -> d30  [key=0, style=solid];
d26 -> d27  [key=0, style=solid];
d47 -> d34  [key=0, style=bold, color=blue];
d36 -> d38  [key=0, style=solid];
d36 -> d37  [key=0, style=solid];
d37 -> d47  [key=0, style=solid];
d37 -> d48  [key=2, style=dotted];
d4 -> d10  [key=1, style=dashed, color=darkseagreen4, label=bool];
d4 -> d11  [key=1, style=dashed, color=darkseagreen4, label=string];
d4 -> d12  [key=1, style=dashed, color=darkseagreen4, label="params int[]"];
d4 -> d13  [key=1, style=dashed, color=darkseagreen4, label=string];
d4 -> d5  [key=0, style=solid];
d4 -> d7  [key=1, style=dashed, color=darkseagreen4, label="params int[]"];
d9 -> d10  [key=0, style=solid];
d9 -> d13  [key=1, style=dashed, color=darkseagreen4, label=ExtraLength];
d9 -> d9  [key=3, color=darkorchid, style=bold, label="Local variable int ExtraLength"];
d14 -> d4  [key=0, style=bold, color=blue];
d20 -> d21  [key=0, style=solid];
d22 -> d20  [key=0, style=bold, color=blue];
d23 -> d26  [key=3, color=darkorchid, style=bold, label="method methodReturn string op_Implicit"];
d23 -> d24  [key=0, style=solid];
d24 -> d26  [key=2, style=dotted];
d24 -> d25  [key=0, style=solid];
d5 -> d6  [key=0, style=solid];
d5 -> d7  [key=0, style=solid];
d5 -> d15  [key=2, style=dotted];
d7 -> d9  [key=0, style=solid];
d7 -> d8  [key=0, style=solid];
d6 -> d14  [key=0, style=solid];
d6 -> d16  [key=2, style=dotted];
d8 -> d14  [key=0, style=solid];
d8 -> d17  [key=2, style=dotted];
d25 -> d23  [key=0, style=bold, color=blue];
m0_12 -> m0_13  [key=0, style=solid, color=green];
m0_13 -> m0_14  [key=0, style=solid, color=green];
m0_13 -> m0_3  [key=2, style=dotted, color=green];
m0_13 -> m0_15  [key=2, style=dotted, color=green];
m0_13 -> m0_8  [key=2, style=dotted, color=green];
m0_14 -> m0_12  [key=0, style=bold, color=blue];
m0_27 -> m0_28  [key=0, style=solid];
m0_29 -> m0_23  [key=2, style=dotted];
m0_29 -> m0_30  [key=0, style=solid];
m0_29 -> m0_31  [key=1, style=dashed, color=darkseagreen4, label=values];
m0_29 -> m0_32  [key=1, style=dashed, color=darkseagreen4, label=values];
m0_28 -> m0_22  [key=2, style=dotted];
m0_28 -> m0_29  [key=0, style=solid];
m0_28 -> m0_33  [key=1, style=dashed, color=darkseagreen4, label=options];
m0_30 -> m0_31  [key=0, style=solid];
m0_30 -> m0_35  [key=2, style=dotted];
m0_31 -> m0_32  [key=0, style=solid];
m0_31 -> m0_35  [key=2, style=dotted];
m0_32 -> m0_33  [key=0, style=solid];
m0_32 -> m0_35  [key=2, style=dotted];
m0_33 -> m0_34  [key=0, style=solid];
m0_33 -> m0_36  [key=2, style=dotted];
m0_34 -> m0_27  [key=0, style=bold, color=blue];
m0_16 -> m0_17  [key=0, style=solid];
m0_20 -> m0_8  [key=2, style=dotted];
m0_20 -> m0_21  [key=0, style=solid];
m0_20 -> m0_24  [key=2, style=dotted];
m0_20 -> m0_26  [key=2, style=dotted];
m0_18 -> m0_20  [key=1, style=dashed, color=darkseagreen4, label=values];
m0_18 -> m0_19  [key=0, style=solid];
m0_18 -> m0_23  [key=2, style=dotted];
m0_19 -> m0_20  [key=0, style=solid];
m0_19 -> m0_24  [key=2, style=dotted];
m0_19 -> m0_25  [key=2, style=dotted];
m0_17 -> m0_18  [key=0, style=solid];
m0_17 -> m0_22  [key=2, style=dotted];
m0_21 -> m0_16  [key=0, style=bold, color=blue];
m0_4 -> m0_5  [key=0, style=solid];
m0_5 -> m0_3  [key=2, style=dotted];
m0_5 -> m0_8  [key=2, style=dotted];
m0_5 -> m0_6  [key=0, style=solid];
m0_5 -> m0_7  [key=2, style=dotted];
m0_6 -> m0_4  [key=0, style=bold, color=blue];
m0_0 -> m0_1  [key=0, style=solid];
m0_1 -> m0_3  [key=2, style=dotted];
m0_1 -> m0_2  [key=0, style=solid];
m0_2 -> m0_0  [key=0, style=bold, color=blue];
m0_9 -> m0_10  [key=0, style=solid];
m0_10 -> m0_3  [key=2, style=dotted];
m0_10 -> m0_8  [key=2, style=dotted];
m0_10 -> m0_11  [key=0, style=solid];
m0_10 -> m0_7  [key=2, style=dotted];
m0_11 -> m0_9  [key=0, style=bold, color=blue];
m0_37 -> m0_33  [key=1, style=dashed, color=darkseagreen4, label="CommandLine.Tests.ValueListAttributeFixture"];
}
