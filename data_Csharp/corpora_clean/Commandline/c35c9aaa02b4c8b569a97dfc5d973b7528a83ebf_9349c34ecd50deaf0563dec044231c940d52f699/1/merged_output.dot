digraph  {
d1 [cluster="CommandLine.ErrorExtensions.ToParserResult<T>(System.Collections.Generic.IEnumerable<CommandLine.Error>, T)", color=green, community=0, label="5: return errors.Any()\r\n                ? (ParserResult<T>)new NotParsed<T>(instance.GetType().ToTypeInfo(), errors)\r\n                : (ParserResult<T>)new Parsed<T>(instance);", span="12-14"];
d0 [cluster="CommandLine.ErrorExtensions.ToParserResult<T>(System.Collections.Generic.IEnumerable<CommandLine.Error>, T)", label="Entry CommandLine.ErrorExtensions.ToParserResult<T>(System.Collections.Generic.IEnumerable<CommandLine.Error>, T)", span="10-10"];
d2 [cluster="CommandLine.ErrorExtensions.ToParserResult<T>(System.Collections.Generic.IEnumerable<CommandLine.Error>, T)", label="Exit CommandLine.ErrorExtensions.ToParserResult<T>(System.Collections.Generic.IEnumerable<CommandLine.Error>, T)", span="10-10"];
d3 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
d4 [cluster="CommandLine.NotParsed<T>.NotParsed(CommandLine.TypeInfo, System.Collections.Generic.IEnumerable<CommandLine.Error>)", label="Entry CommandLine.NotParsed<T>.NotParsed(CommandLine.TypeInfo, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="163-163"];
d5 [cluster="object.GetType()", label="Entry object.GetType()", span="0-0"];
d6 [cluster="System.Type.ToTypeInfo()", label="Entry System.Type.ToTypeInfo()", span="174-174"];
d7 [cluster="CommandLine.Parsed<T>.Parsed(T)", label="Entry CommandLine.Parsed<T>.Parsed(T)", span="100-100"];
d9 [cluster="CommandLine.ErrorExtensions.OnlyMeaningfulOnes(System.Collections.Generic.IEnumerable<CommandLine.Error>)", color=green, community=0, label="4: return errors.Where(e => !e.StopsProcessing);", span="19-19"];
d8 [cluster="CommandLine.ErrorExtensions.OnlyMeaningfulOnes(System.Collections.Generic.IEnumerable<CommandLine.Error>)", label="Entry CommandLine.ErrorExtensions.OnlyMeaningfulOnes(System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="17-17"];
d10 [cluster="CommandLine.ErrorExtensions.OnlyMeaningfulOnes(System.Collections.Generic.IEnumerable<CommandLine.Error>)", label="Exit CommandLine.ErrorExtensions.OnlyMeaningfulOnes(System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="17-17"];
d11 [cluster="Unk.Where", label="Entry Unk.Where", span=""];
d12 [cluster="lambda expression", label="Entry lambda expression", span="19-19"];
d13 [cluster="lambda expression", color=green, community=0, label="2: !e.StopsProcessing", span="19-19"];
d14 [cluster="lambda expression", label="Exit lambda expression", span="19-19"];
d1 -> d2  [color=green, key=0, style=solid];
d1 -> d3  [color=green, key=2, style=dotted];
d1 -> d4  [color=green, key=2, style=dotted];
d1 -> d5  [color=green, key=2, style=dotted];
d1 -> d6  [color=green, key=2, style=dotted];
d1 -> d7  [color=green, key=2, style=dotted];
d0 -> d1  [color=green, key=0, style=solid];
d2 -> d0  [color=blue, key=0, style=bold];
d9 -> d10  [color=green, key=0, style=solid];
d9 -> d11  [color=green, key=2, style=dotted];
d9 -> d12  [color=green, key=1, label="lambda expression", style=dashed];
d8 -> d9  [color=green, key=0, style=solid];
d10 -> d8  [color=blue, key=0, style=bold];
d12 -> d13  [color=green, key=0, style=solid];
d13 -> d14  [color=green, key=0, style=solid];
d14 -> d12  [color=blue, key=0, style=bold];
}
