digraph  {
n13 [label="CommandLine.Core.OptionSpecification", span=""];
n0 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", span="17-17"];
n1 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", label="this.shortName = shortName", span="20-20"];
n2 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", label="this.longName = longName", span="21-21"];
n3 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", label="this.separator = separator", span="22-22"];
n4 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", label="this.setName = setName", span="23-23"];
n5 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", label="this.helpText = helpText", span="24-24"];
n6 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", label="this.metaValue = metaValue", span="25-25"];
n7 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", label="this.enumValues = enumValues", span="26-26"];
n8 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", label="Exit CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, int, int, char, CommandLine.Infrastructure.Maybe<object>, System.Type, string, string, System.Collections.Generic.IEnumerable<string>)", span="17-17"];
n9 [cluster="CommandLine.Core.OptionSpecification.FromAttribute(CommandLine.OptionAttribute, System.Type, System.Collections.Generic.IEnumerable<string>)", label="Entry CommandLine.Core.OptionSpecification.FromAttribute(CommandLine.OptionAttribute, System.Type, System.Collections.Generic.IEnumerable<string>)", span="29-29"];
n10 [cluster="CommandLine.Core.OptionSpecification.FromAttribute(CommandLine.OptionAttribute, System.Type, System.Collections.Generic.IEnumerable<string>)", label="return new OptionSpecification(\r\n                attribute.ShortName,\r\n                attribute.LongName,\r\n                attribute.Required,\r\n                attribute.SetName,\r\n                attribute.Min,\r\n                attribute.Max,\r\n                attribute.Separator,\r\n                attribute.DefaultValue.ToMaybe(),\r\n                conversionType,\r\n                attribute.HelpText,\r\n                attribute.MetaValue,\r\n                enumValues);", span="31-43"];
n11 [cluster="CommandLine.Core.OptionSpecification.FromAttribute(CommandLine.OptionAttribute, System.Type, System.Collections.Generic.IEnumerable<string>)", label="Exit CommandLine.Core.OptionSpecification.FromAttribute(CommandLine.OptionAttribute, System.Type, System.Collections.Generic.IEnumerable<string>)", span="29-29"];
n12 [cluster="T.ToMaybe<T>()", label="Entry T.ToMaybe<T>()", span="82-82"];
d3 [cluster="CommandLine.BaseAttribute.BaseAttribute()", color=green, community=0, label="helpText = string.Empty", prediction=0, span="24-24"];
d6 [label="CommandLine.BaseAttribute", span=""];
d2 [cluster="CommandLine.BaseAttribute.BaseAttribute()", label="max = -1", span="23-23"];
d4 [cluster="CommandLine.BaseAttribute.BaseAttribute()", color=green, community=0, label="metaValue = string.Empty", prediction=1, span="25-25"];
d5 [cluster="CommandLine.BaseAttribute.BaseAttribute()", label="Exit CommandLine.BaseAttribute.BaseAttribute()", span="20-20"];
d1 [cluster="CommandLine.BaseAttribute.BaseAttribute()", label="min = -1", span="22-22"];
d0 [cluster="CommandLine.BaseAttribute.BaseAttribute()", label="Entry CommandLine.BaseAttribute.BaseAttribute()", span="20-20"];
m1_8 [cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="NameLookupTests.cs", label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63"];
m1_6 [cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="NameLookupTests.cs", label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="68-68"];
m1_7 [cluster="OptionSpecification.cstr", file="NameLookupTests.cs", label="Entry OptionSpecification.cstr", span=""];
m1_0 [cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="NameLookupTests.cs", label="Entry CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", span="14-14"];
m1_1 [cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="NameLookupTests.cs", label="var expected = Maybe.Just(''.'')", span="17-17"];
m1_2 [cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", color=green, community=0, file="NameLookupTests.cs", label="var specs = new[] { new OptionSpecification(string.Empty, ''string-seq'',\r\n                false, string.Empty, Maybe.Nothing<int>(), Maybe.Nothing<int>(), '.', null, string.Empty, string.Empty, new List<string>(), typeof(IEnumerable<string>), TargetType.Sequence)}", prediction=2, span="18-19"];
m1_4 [cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="NameLookupTests.cs", label="expected.ShouldBeEquivalentTo(result)", span="25-25"];
m1_3 [cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="NameLookupTests.cs", label="var result = NameLookup.HavingSeparator(''string-seq'', specs, StringComparer.InvariantCulture)", span="22-22"];
m1_5 [cluster="CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", file="NameLookupTests.cs", label="Exit CommandLine.Tests.Unit.Core.NameLookupTests.Lookup_name_of_sequence_option_with_separator()", span="14-14"];
m1_10 [cluster="CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="NameLookupTests.cs", label="Entry CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="16-16"];
m1_11 [cluster="Unk.ShouldBeEquivalentTo", file="NameLookupTests.cs", label="Entry Unk.ShouldBeEquivalentTo", span=""];
m1_9 [cluster="System.Collections.Generic.List<T>.List()", file="NameLookupTests.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m2_11 [cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="OptionAttribute.cs", label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63"];
m2_10 [cluster="System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)", file="OptionAttribute.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource)", span="0-0"];
m2_5 [cluster="CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", file="OptionAttribute.cs", label="Entry CommandLine.Core.Scalar.Partition(System.Collections.Generic.IEnumerable<CommandLine.Core.Token>, System.Func<string, CommandLine.Infrastructure.Maybe<CommandLine.Core.TypeDescriptor>>)", span="11-11"];
m2_13 [cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="OptionAttribute.cs", label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="68-68"];
m2_14 [cluster="CommandLine.Tests.Unit.Core.ScalarTests.Partition_scalar_values()", file="OptionAttribute.cs", label="Entry CommandLine.Tests.Unit.Core.ScalarTests.Partition_scalar_values()", span="28-28"];
m2_16 [cluster="CommandLine.Tests.Unit.Core.ScalarTests.Partition_scalar_values()", file="OptionAttribute.cs", label="var result = Scalar.Partition(\r\n                new []\r\n                    {\r\n                        Token.Name(''str''), Token.Value(''strvalue''), Token.Value(''freevalue''),\r\n                        Token.Name(''x''), Token.Value(''freevalue2'')\r\n                    },\r\n                name =>\r\n                    new[] { ''str'', ''int'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TypeDescriptorKind.Scalar, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>())", span="32-41"];
m2_17 [cluster="CommandLine.Tests.Unit.Core.ScalarTests.Partition_scalar_values()", file="OptionAttribute.cs", label="expected.ShouldAllBeEquivalentTo(result)", span="43-43"];
m2_18 [cluster="CommandLine.Tests.Unit.Core.ScalarTests.Partition_scalar_values()", file="OptionAttribute.cs", label="Exit CommandLine.Tests.Unit.Core.ScalarTests.Partition_scalar_values()", span="28-28"];
m2_0 [cluster="CommandLine.Tests.Unit.Core.ScalarTests.Partition_scalar_values_from_empty_token_sequence()", file="OptionAttribute.cs", label="Entry CommandLine.Tests.Unit.Core.ScalarTests.Partition_scalar_values_from_empty_token_sequence()", span="13-13"];
m2_1 [cluster="CommandLine.Tests.Unit.Core.ScalarTests.Partition_scalar_values_from_empty_token_sequence()", file="OptionAttribute.cs", label="var expected = new Token[] { }", span="15-15"];
m2_3 [cluster="CommandLine.Tests.Unit.Core.ScalarTests.Partition_scalar_values_from_empty_token_sequence()", file="OptionAttribute.cs", label="expected.ShouldAllBeEquivalentTo(result)", span="24-24"];
m2_4 [cluster="CommandLine.Tests.Unit.Core.ScalarTests.Partition_scalar_values_from_empty_token_sequence()", file="OptionAttribute.cs", label="Exit CommandLine.Tests.Unit.Core.ScalarTests.Partition_scalar_values_from_empty_token_sequence()", span="13-13"];
m2_6 [cluster="Unk.ShouldAllBeEquivalentTo", file="OptionAttribute.cs", label="Entry Unk.ShouldAllBeEquivalentTo", span=""];
m2_21 [cluster="lambda expression", file="OptionAttribute.cs", label="Entry lambda expression", span="38-41"];
m2_7 [cluster="lambda expression", file="OptionAttribute.cs", label="Entry lambda expression", span="19-22"];
m2_8 [cluster="lambda expression", file="OptionAttribute.cs", label="new[] { ''str'', ''int'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TypeDescriptorKind.Scalar, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>()", span="20-22"];
m2_9 [cluster="lambda expression", file="OptionAttribute.cs", label="Exit lambda expression", span="19-22"];
m2_22 [cluster="lambda expression", file="OptionAttribute.cs", label="new[] { ''str'', ''int'' }.Contains(name)\r\n                        ? Maybe.Just(TypeDescriptor.Create(TypeDescriptorKind.Scalar, Maybe.Nothing<int>()))\r\n                        : Maybe.Nothing<TypeDescriptor>()", span="39-41"];
m2_23 [cluster="lambda expression", file="OptionAttribute.cs", label="Exit lambda expression", span="38-41"];
m2_12 [cluster="CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>)", file="OptionAttribute.cs", label="Entry CommandLine.Core.TypeDescriptor.Create(CommandLine.Core.TypeDescriptorKind, CommandLine.Infrastructure.Maybe<int>)", span="36-36"];
m2_19 [cluster="CommandLine.Core.Token.Name(string)", file="OptionAttribute.cs", label="Entry CommandLine.Core.Token.Name(string)", span="19-19"];
m2_20 [cluster="CommandLine.Core.Token.Value(string)", file="OptionAttribute.cs", label="Entry CommandLine.Core.Token.Value(string)", span="24-24"];
m3_8 [cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="OptionMapperTests.cs", label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63"];
m3_12 [cluster="Unk.Create", file="OptionMapperTests.cs", label="Entry Unk.Create", span=""];
m3_13 [cluster="Unk.Where", file="OptionMapperTests.cs", label="Entry Unk.Where", span=""];
m3_6 [cluster="System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", file="OptionMapperTests.cs", label="Entry System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", span="0-0"];
m3_7 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, char, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType, string, string, System.Collections.Generic.IEnumerable<string>)", file="OptionMapperTests.cs", label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, char, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType, string, string, System.Collections.Generic.IEnumerable<string>)", span="18-18"];
m3_11 [cluster="Unk.Single", file="OptionMapperTests.cs", label="Entry Unk.Single", span=""];
m3_15 [cluster="Unk.NotNull", file="OptionMapperTests.cs", label="Entry Unk.NotNull", span=""];
m3_27 [cluster="CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", file="OptionMapperTests.cs", label="Entry CommandLine.Core.TypeConverter.ChangeType(System.Collections.Generic.IEnumerable<string>, System.Type, bool, System.Globalization.CultureInfo)", span="12-12"];
m3_0 [cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="OptionMapperTests.cs", label="Entry CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", span="16-16"];
m3_1 [cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="OptionMapperTests.cs", label="var tokenPartitions = new[]\r\n                {\r\n                    new KeyValuePair<string, IEnumerable<string>>(''x'', new [] { ''true'' })\r\n                }", span="19-22"];
m3_3 [cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="OptionMapperTests.cs", label="var result = OptionMapper.MapValues(\r\n                specProps.Where(pt => pt.Specification.IsOption()),\r\n                tokenPartitions,\r\n                (vals, type, isScalar) => TypeConverter.ChangeType(vals, type, isScalar, CultureInfo.InvariantCulture),\r\n                StringComparer.InvariantCulture)", span="32-36"];
m3_4 [cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="OptionMapperTests.cs", label="Assert.NotNull(result.Value.Single(\r\n                a => a.Specification.IsOption()\r\n                && ((OptionSpecification)a.Specification).ShortName.Equals(''x'')\r\n                && (bool)((Just<object>)a.Value).Value))", span="39-42"];
m3_5 [cluster="CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", file="OptionMapperTests.cs", label="Exit CommandLine.Tests.Unit.Core.OptionMapperTests.Map_boolean_switch_creates_boolean_value()", span="16-16"];
m3_28 [cluster="lambda expression", file="OptionMapperTests.cs", label="Entry lambda expression", span="40-42"];
m3_16 [cluster="lambda expression", file="OptionMapperTests.cs", label="Entry lambda expression", span="27-27"];
m3_20 [cluster="lambda expression", file="OptionMapperTests.cs", label="Entry lambda expression", span="33-33"];
m3_24 [cluster="lambda expression", file="OptionMapperTests.cs", label="Entry lambda expression", span="35-35"];
m3_17 [cluster="lambda expression", file="OptionMapperTests.cs", label="p.Name.Equals(''BoolValue'', StringComparison.Ordinal)", span="27-27"];
m3_18 [cluster="lambda expression", file="OptionMapperTests.cs", label="Exit lambda expression", span="27-27"];
m3_21 [cluster="lambda expression", file="OptionMapperTests.cs", label="pt.Specification.IsOption()", span="33-33"];
m3_22 [cluster="lambda expression", file="OptionMapperTests.cs", label="Exit lambda expression", span="33-33"];
m3_25 [cluster="lambda expression", file="OptionMapperTests.cs", label="TypeConverter.ChangeType(vals, type, isScalar, CultureInfo.InvariantCulture)", span="35-35"];
m3_26 [cluster="lambda expression", file="OptionMapperTests.cs", label="Exit lambda expression", span="35-35"];
m3_29 [cluster="lambda expression", file="OptionMapperTests.cs", label="a.Specification.IsOption()\r\n                && ((OptionSpecification)a.Specification).ShortName.Equals(''x'')\r\n                && (bool)((Just<object>)a.Value).Value", span="40-42"];
m3_30 [cluster="lambda expression", file="OptionMapperTests.cs", label="Exit lambda expression", span="40-42"];
m3_31 [cluster="string.Equals(string)", file="OptionMapperTests.cs", label="Entry string.Equals(string)", span="0-0"];
m3_19 [cluster="string.Equals(string, System.StringComparison)", file="OptionMapperTests.cs", label="Entry string.Equals(string, System.StringComparison)", span="0-0"];
m3_23 [cluster="CommandLine.Core.Specification.IsOption()", file="OptionMapperTests.cs", label="Entry CommandLine.Core.Specification.IsOption()", span="10-10"];
m3_14 [cluster="Unk.MapValues", file="OptionMapperTests.cs", label="Entry Unk.MapValues", span=""];
m3_10 [cluster="System.Type.GetProperties()", file="OptionMapperTests.cs", label="Entry System.Type.GetProperties()", span="0-0"];
m3_9 [cluster="System.Collections.Generic.List<T>.List()", file="OptionMapperTests.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m4_12 [cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="OptionSpecification.cs", label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63"];
m4_15 [cluster="System.Type.ToTargetType()", file="OptionSpecification.cs", label="Entry System.Type.ToTargetType()", span="47-47"];
m4_13 [cluster="CommandLine.Infrastructure.Maybe.Just<T>(T)", file="OptionSpecification.cs", label="Entry CommandLine.Infrastructure.Maybe.Just<T>(T)", span="68-68"];
m4_0 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, char, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType, string, string, System.Collections.Generic.IEnumerable<string>)", file="OptionSpecification.cs", label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, char, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType, string, string, System.Collections.Generic.IEnumerable<string>)", span="18-18"];
m4_1 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, char, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType, string, string, System.Collections.Generic.IEnumerable<string>)", file="OptionSpecification.cs", label="this.shortName = shortName", span="23-23"];
m4_2 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, char, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType, string, string, System.Collections.Generic.IEnumerable<string>)", file="OptionSpecification.cs", label="this.longName = longName", span="24-24"];
m4_3 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, char, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType, string, string, System.Collections.Generic.IEnumerable<string>)", file="OptionSpecification.cs", label="this.separator = separator", span="25-25"];
m4_4 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, char, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType, string, string, System.Collections.Generic.IEnumerable<string>)", file="OptionSpecification.cs", label="this.setName = setName", span="26-26"];
m4_8 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, char, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType, string, string, System.Collections.Generic.IEnumerable<string>)", file="OptionSpecification.cs", label="Exit CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, char, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType, string, string, System.Collections.Generic.IEnumerable<string>)", span="18-18"];
m4_9 [cluster="CommandLine.Core.OptionSpecification.FromAttribute(CommandLine.OptionAttribute, System.Type, System.Collections.Generic.IEnumerable<string>)", file="OptionSpecification.cs", label="Entry CommandLine.Core.OptionSpecification.FromAttribute(CommandLine.OptionAttribute, System.Type, System.Collections.Generic.IEnumerable<string>)", span="32-32"];
m4_11 [cluster="CommandLine.Core.OptionSpecification.FromAttribute(CommandLine.OptionAttribute, System.Type, System.Collections.Generic.IEnumerable<string>)", file="OptionSpecification.cs", label="Exit CommandLine.Core.OptionSpecification.FromAttribute(CommandLine.OptionAttribute, System.Type, System.Collections.Generic.IEnumerable<string>)", span="32-32"];
m4_16 [file="OptionSpecification.cs", label="CommandLine.Core.OptionSpecification", span=""];
m5_27 [cluster="System.Linq.Enumerable.Empty<TResult>()", file="Specification.cs", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
m5_0 [cluster="CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType)", file="Specification.cs", label="Entry CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType)", span="35-35"];
m5_1 [cluster="CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType)", file="Specification.cs", label="this.tag = tag", span="38-38"];
m5_2 [cluster="CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType)", file="Specification.cs", label="this.required = required", span="39-39"];
m5_3 [cluster="CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType)", file="Specification.cs", label="this.min = min", span="40-40"];
m5_4 [cluster="CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType)", file="Specification.cs", label="this.max = max", span="41-41"];
m5_5 [cluster="CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType)", file="Specification.cs", label="this.defaultValue = defaultValue", span="42-42"];
m5_6 [cluster="CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType)", file="Specification.cs", label="this.conversionType = conversionType", span="43-43"];
m5_7 [cluster="CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType)", file="Specification.cs", label="this.targetType = targetType", span="44-44"];
m5_8 [cluster="CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType)", file="Specification.cs", label="Exit CommandLine.Core.Specification.Specification(CommandLine.Core.SpecificationType, bool, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType)", span="35-35"];
m5_24 [cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", file="Specification.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0"];
m5_23 [cluster="System.Collections.IEnumerable.OfType<TResult>()", file="Specification.cs", label="Entry System.Collections.IEnumerable.OfType<TResult>()", span="0-0"];
m5_31 [cluster="CommandLine.Core.ValueSpecification.FromAttribute(CommandLine.ValueAttribute, System.Type)", file="Specification.cs", label="Entry CommandLine.Core.ValueSpecification.FromAttribute(CommandLine.ValueAttribute, System.Type)", span="18-18"];
m5_26 [cluster="System.Enum.GetNames(System.Type)", file="Specification.cs", label="Entry System.Enum.GetNames(System.Type)", span="0-0"];
m5_29 [cluster="string.ToLowerInvariant()", file="Specification.cs", label="Entry string.ToLowerInvariant()", span="0-0"];
m5_9 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="Specification.cs", label="Entry CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", span="82-82"];
m5_10 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="Specification.cs", label="var attrs = property.GetCustomAttributes(true)", span="84-84"];
m5_13 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="Specification.cs", label="var spec = OptionSpecification.FromAttribute(oa.Single(), property.PropertyType,\r\n                    property.PropertyType.IsEnum\r\n                        ? Enum.GetNames(property.PropertyType)\r\n                        : Enumerable.Empty<string>())", span="88-91"];
m5_15 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="Specification.cs", label="return spec.WithLongName(property.Name.ToLowerInvariant());", span="94-94"];
m5_11 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="Specification.cs", label="var oa = attrs.OfType<OptionAttribute>()", span="85-85"];
m5_17 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="Specification.cs", label="var va = attrs.OfType<ValueAttribute>()", span="99-99"];
m5_12 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="Specification.cs", label="oa.Count() == 1", span="86-86"];
m5_14 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="Specification.cs", label="spec.ShortName.Length == 0 && spec.LongName.Length == 0", span="92-92"];
m5_16 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="Specification.cs", label="return spec;", span="96-96"];
m5_18 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="Specification.cs", label="va.Count() == 1", span="100-100"];
m5_20 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="Specification.cs", label="throw new InvalidOperationException();", span="105-105"];
m5_21 [cluster="CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", file="Specification.cs", label="Exit CommandLine.Core.Specification.FromProperty(System.Reflection.PropertyInfo)", span="82-82"];
m5_22 [cluster="System.Reflection.MemberInfo.GetCustomAttributes(bool)", file="Specification.cs", label="Entry System.Reflection.MemberInfo.GetCustomAttributes(bool)", span="0-0"];
m5_25 [cluster="System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", file="Specification.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Single<TSource>()", span="0-0"];
m5_30 [cluster="CommandLine.Core.OptionSpecification.WithLongName(string)", file="Specification.cs", label="Entry CommandLine.Core.OptionSpecification.WithLongName(string)", span="20-20"];
m5_32 [cluster="System.InvalidOperationException.InvalidOperationException()", file="Specification.cs", label="Entry System.InvalidOperationException.InvalidOperationException()", span="0-0"];
m5_33 [file="Specification.cs", label="CommandLine.Core.Specification", span=""];
m6_6 [cluster="CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string)", file="SpecificationExtensions.cs", label="Entry CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string)", span="20-20"];
m6_7 [cluster="CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string)", color=green, community=0, file="SpecificationExtensions.cs", label="return new OptionSpecification(\r\n                specification.ShortName,\r\n                newLongName,\r\n                specification.Required,\r\n                specification.SetName,\r\n                specification.Min,\r\n                specification.Max,\r\n                specification.Separator,\r\n                specification.DefaultValue,\r\n                specification.ConversionType,\r\n                specification.TargetType,\r\n                specification.HelpText,\r\n                specification.MetaValue,\r\n                specification.EnumValues);", prediction=3, span="22-35"];
m6_8 [cluster="CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string)", file="SpecificationExtensions.cs", label="Exit CommandLine.Core.SpecificationExtensions.WithLongName(CommandLine.Core.OptionSpecification, string)", span="20-20"];
m6_9 [cluster="CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, char, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType, string, string, System.Collections.Generic.IEnumerable<string>)", file="SpecificationExtensions.cs", label="Entry CommandLine.Core.OptionSpecification.OptionSpecification(string, string, bool, string, CommandLine.Infrastructure.Maybe<int>, CommandLine.Infrastructure.Maybe<int>, char, CommandLine.Infrastructure.Maybe<object>, System.Type, CommandLine.Core.TargetType, string, string, System.Collections.Generic.IEnumerable<string>)", span="18-18"];
m7_9 [cluster="CommandLine.Infrastructure.Maybe.Nothing<T>()", file="TokenizerTests.cs", label="Entry CommandLine.Infrastructure.Maybe.Nothing<T>()", span="63-63"];
m7_11 [cluster="System.Linq.Enumerable.Empty<TResult>()", file="TokenizerTests.cs", label="Entry System.Linq.Enumerable.Empty<TResult>()", span="0-0"];
m7_13 [cluster="CommandLine.Core.StatePair.Create<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", file="TokenizerTests.cs", label="Entry CommandLine.Core.StatePair.Create<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Error>)", span="58-58"];
m7_21 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", span="38-38"];
m7_23 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", color=green, community=0, file="TokenizerTests.cs", label="var specs = new[] { new OptionSpecification(string.Empty, ''string-seq'',\r\n                false, string.Empty, Maybe.Nothing<int>(), Maybe.Nothing<int>(), ',', null, string.Empty, string.Empty, new List<string>(), typeof(IEnumerable<string>), TargetType.Sequence)}", prediction=4, span="43-44"];
m7_22 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="TokenizerTests.cs", label="var expectedTokens = new[] { Token.Name(''x''), Token.Name(''string-seq''),\r\n                Token.Value(''aaa''), Token.Value(''bb''),  Token.Value(''cccc''), Token.Name(''switch'') }", span="41-42"];
m7_24 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="TokenizerTests.cs", label="var result =\r\n                Tokenizer.ExplodeOptionList(\r\n                    StatePair.Create(\r\n                        Enumerable.Empty<Token>().Concat(new[] { Token.Name(''x''),\r\n                            Token.Name(''string-seq''), Token.Value(''aaa,bb,cccc''), Token.Name(''switch'') }),\r\n                        Enumerable.Empty<Error>()),\r\n                        optionName => NameLookup.HavingSeparator(optionName, specs, StringComparer.InvariantCulture))", span="47-53"];
m7_25 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="TokenizerTests.cs", label="Assert.True(expectedTokens.SequenceEqual(result.Value))", span="56-56"];
m7_26 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", file="TokenizerTests.cs", label="Exit CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_even_args_input_returns_sequence()", span="38-38"];
m7_8 [cluster="OptionSpecification.cstr", file="TokenizerTests.cs", label="Entry OptionSpecification.cstr", span=""];
m7_20 [cluster="CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", file="TokenizerTests.cs", label="Entry CommandLine.Core.NameLookup.HavingSeparator(string, System.Collections.Generic.IEnumerable<CommandLine.Core.OptionSpecification>, System.StringComparer)", span="16-16"];
m7_16 [cluster="Unk.True", file="TokenizerTests.cs", label="Entry Unk.True", span=""];
m7_0 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="TokenizerTests.cs", label="Entry CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", span="14-14"];
m7_2 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", color=green, community=0, file="TokenizerTests.cs", label="var specs = new[] { new OptionSpecification(string.Empty, ''string-seq'',\r\n                false, string.Empty, Maybe.Nothing<int>(), Maybe.Nothing<int>(), ',', null, string.Empty, string.Empty, new List<string>(), typeof(IEnumerable<string>), TargetType.Sequence)}", prediction=5, span="19-20"];
m7_1 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="TokenizerTests.cs", label="var expectedTokens = new[] { Token.Name(''i''), Token.Value(''10''), Token.Name(''string-seq''),\r\n                Token.Value(''aaa''), Token.Value(''bb''),  Token.Value(''cccc''), Token.Name(''switch'') }", span="17-18"];
m7_3 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="TokenizerTests.cs", label="var result =\r\n                Tokenizer.ExplodeOptionList(\r\n                    StatePair.Create(\r\n                        Enumerable.Empty<Token>().Concat(new[] { Token.Name(''i''), Token.Value(''10''),\r\n                            Token.Name(''string-seq''), Token.Value(''aaa,bb,cccc''), Token.Name(''switch'') }),\r\n                        Enumerable.Empty<Error>()),\r\n                        optionName => NameLookup.HavingSeparator(optionName, specs, StringComparer.InvariantCulture))", span="23-29"];
m7_4 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="TokenizerTests.cs", label="Assert.True(expectedTokens.SequenceEqual(result.Value))", span="32-32"];
m7_5 [cluster="CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", file="TokenizerTests.cs", label="Exit CommandLine.Tests.Unit.Core.TokenizerTests.Explode_scalar_with_separator_in_odd_args_input_returns_sequence()", span="14-14"];
m7_27 [cluster="lambda expression", file="TokenizerTests.cs", label="Entry lambda expression", span="53-53"];
m7_18 [cluster="lambda expression", file="TokenizerTests.cs", label="NameLookup.HavingSeparator(optionName, specs, StringComparer.InvariantCulture)", span="29-29"];
m7_28 [cluster="lambda expression", file="TokenizerTests.cs", label="NameLookup.HavingSeparator(optionName, specs, StringComparer.InvariantCulture)", span="53-53"];
m7_17 [cluster="lambda expression", file="TokenizerTests.cs", label="Entry lambda expression", span="29-29"];
m7_19 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="29-29"];
m7_29 [cluster="lambda expression", file="TokenizerTests.cs", label="Exit lambda expression", span="53-53"];
m7_6 [cluster="CommandLine.Core.Token.Name(string)", file="TokenizerTests.cs", label="Entry CommandLine.Core.Token.Name(string)", span="19-19"];
m7_15 [cluster="Unk.SequenceEqual", file="TokenizerTests.cs", label="Entry Unk.SequenceEqual", span=""];
m7_14 [cluster="CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CommandLine.Infrastructure.Maybe<char>>)", file="TokenizerTests.cs", label="Entry CommandLine.Core.Tokenizer.ExplodeOptionList(CommandLine.Core.StatePair<System.Collections.Generic.IEnumerable<CommandLine.Core.Token>>, System.Func<string, CommandLine.Infrastructure.Maybe<char>>)", span="44-44"];
m7_12 [cluster="System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="TokenizerTests.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="0-0"];
m7_7 [cluster="CommandLine.Core.Token.Value(string)", file="TokenizerTests.cs", label="Entry CommandLine.Core.Token.Value(string)", span="24-24"];
m7_10 [cluster="System.Collections.Generic.List<T>.List()", file="TokenizerTests.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m7_30 [file="TokenizerTests.cs", label=specs, span=""];
m7_31 [file="TokenizerTests.cs", label=specs, span=""];
m9_17 [cluster="Unk.SingleOrDefault", file="ValueSpecification.cs", label="Entry Unk.SingleOrDefault", span=""];
m9_84 [cluster="CommandLine.Core.ReflectionExtensions.IsMutable(System.Type)", file="ValueSpecification.cs", label="Entry CommandLine.Core.ReflectionExtensions.IsMutable(System.Type)", span="128-128"];
m9_85 [cluster="CommandLine.Core.ReflectionExtensions.IsMutable(System.Type)", file="ValueSpecification.cs", label="Func<bool> isMutable = () => {\r\n                var props = type.GetProperties(BindingFlags.Public | BindingFlags.Instance).Any(p => p.CanWrite);\r\n                var fields = type.GetFields(BindingFlags.Public | BindingFlags.Instance).Any();\r\n                return props || fields;\r\n            }", span="130-134"];
m9_86 [cluster="CommandLine.Core.ReflectionExtensions.IsMutable(System.Type)", file="ValueSpecification.cs", label="return type != typeof(object) ? isMutable() : true;", span="135-135"];
m9_87 [cluster="CommandLine.Core.ReflectionExtensions.IsMutable(System.Type)", file="ValueSpecification.cs", label="Exit CommandLine.Core.ReflectionExtensions.IsMutable(System.Type)", span="128-128"];
m9_94 [cluster="System.Type.GetFields(System.Reflection.BindingFlags)", file="ValueSpecification.cs", label="Entry System.Type.GetFields(System.Reflection.BindingFlags)", span="0-0"];
m9_6 [cluster="Unk.>", file="ValueSpecification.cs", label="Entry Unk.>", span=""];
m9_75 [cluster="CommandLine.Core.ReflectionExtensions.GetDefaultValue(System.Type)", file="ValueSpecification.cs", label="Entry CommandLine.Core.ReflectionExtensions.GetDefaultValue(System.Type)", span="119-119"];
m9_77 [cluster="CommandLine.Core.ReflectionExtensions.GetDefaultValue(System.Type)", file="ValueSpecification.cs", label="return e.Compile()();", span="125-125"];
m9_76 [cluster="CommandLine.Core.ReflectionExtensions.GetDefaultValue(System.Type)", file="ValueSpecification.cs", label="var e = Expression.Lambda<Func<object>>(\r\n                Expression.Convert(\r\n                    Expression.Default(type),\r\n                    typeof(object)))", span="121-124"];
m9_78 [cluster="CommandLine.Core.ReflectionExtensions.GetDefaultValue(System.Type)", file="ValueSpecification.cs", label="Exit CommandLine.Core.ReflectionExtensions.GetDefaultValue(System.Type)", span="119-119"];
m9_7 [cluster="Unk.Any", file="ValueSpecification.cs", label="Entry Unk.Any", span=""];
m9_8 [cluster="Unk.First", file="ValueSpecification.cs", label="Entry Unk.First", span=""];
m9_45 [cluster="Unk.Where", file="ValueSpecification.cs", label="Entry Unk.Where", span=""];
m9_18 [cluster="Unk.ToMaybe", file="ValueSpecification.cs", label="Entry Unk.ToMaybe", span=""];
m9_83 [cluster="System.Func<TResult>.Invoke()", file="ValueSpecification.cs", label="Entry System.Func<TResult>.Invoke()", span="0-0"];
m9_22 [cluster="System.Reflection.MemberInfo.GetCustomAttributes(System.Type, bool)", file="ValueSpecification.cs", label="Entry System.Reflection.MemberInfo.GetCustomAttributes(System.Type, bool)", span="0-0"];
m9_4 [cluster="System.Collections.Generic.IEnumerable<TSource>.SelectMany<TSource, TResult>(System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>)", file="ValueSpecification.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.SelectMany<TSource, TResult>(System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>)", span="0-0"];
m9_14 [cluster="CommandLine.Core.ReflectionExtensions.GetVerbSpecification(System.Type)", file="ValueSpecification.cs", label="Entry CommandLine.Core.ReflectionExtensions.GetVerbSpecification(System.Type)", span="27-27"];
m9_15 [cluster="CommandLine.Core.ReflectionExtensions.GetVerbSpecification(System.Type)", color=green, community=0, file="ValueSpecification.cs", label="return\r\n                (from attr in\r\n                 type.FlattenHierarchy().SelectMany(x => x.GetCustomAttributes(typeof(VerbAttribute), true))\r\n                 let vattr = (VerbAttribute)attr\r\n                 select vattr)\r\n                    .SingleOrDefault()\r\n                    .ToMaybe();", prediction=6, span="29-35"];
m9_16 [cluster="CommandLine.Core.ReflectionExtensions.GetVerbSpecification(System.Type)", file="ValueSpecification.cs", label="Exit CommandLine.Core.ReflectionExtensions.GetVerbSpecification(System.Type)", span="27-27"];
m9_9 [cluster="Unk.selector", file="ValueSpecification.cs", label="Entry Unk.selector", span=""];
m9_47 [cluster="lambda expression", file="ValueSpecification.cs", label="Entry lambda expression", span="79-83"];
m9_10 [cluster="lambda expression", file="ValueSpecification.cs", label="Entry lambda expression", span="18-18"];
m9_19 [cluster="lambda expression", file="ValueSpecification.cs", label="Entry lambda expression", span="31-31"];
m9_20 [cluster="lambda expression", color=green, community=0, file="ValueSpecification.cs", label="x.GetCustomAttributes(typeof(VerbAttribute), true)", prediction=7, span="31-31"];
m9_21 [cluster="lambda expression", file="ValueSpecification.cs", label="Exit lambda expression", span="31-31"];
m9_89 [cluster="lambda expression", file="ValueSpecification.cs", label="var props = type.GetProperties(BindingFlags.Public | BindingFlags.Instance).Any(p => p.CanWrite)", span="131-131"];
m9_48 [cluster="lambda expression", file="ValueSpecification.cs", label="specProp.Property.SetValue(current, selector(specProp))", span="81-81"];
m9_12 [cluster="lambda expression", file="ValueSpecification.cs", label="Exit lambda expression", span="18-18"];
m9_11 [cluster="lambda expression", file="ValueSpecification.cs", label="x.GetProperties()", span="18-18"];
m9_88 [cluster="lambda expression", file="ValueSpecification.cs", label="Entry lambda expression", span="130-134"];
m9_90 [cluster="lambda expression", file="ValueSpecification.cs", label="var fields = type.GetFields(BindingFlags.Public | BindingFlags.Instance).Any()", span="132-132"];
m9_96 [cluster="lambda expression", file="ValueSpecification.cs", label="Entry lambda expression", span="131-131"];
m9_91 [cluster="lambda expression", file="ValueSpecification.cs", label="return props || fields;", span="133-133"];
m9_49 [cluster="lambda expression", file="ValueSpecification.cs", label="return instance;", span="82-82"];
m9_92 [cluster="lambda expression", file="ValueSpecification.cs", label="Exit lambda expression", span="130-134"];
m9_98 [cluster="lambda expression", file="ValueSpecification.cs", label="Exit lambda expression", span="131-131"];
m9_97 [cluster="lambda expression", file="ValueSpecification.cs", label="p.CanWrite", span="131-131"];
m9_50 [cluster="lambda expression", file="ValueSpecification.cs", label="Exit lambda expression", span="79-83"];
m9_95 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="ValueSpecification.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
m9_80 [cluster="System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression, System.Type)", file="ValueSpecification.cs", label="Entry System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression, System.Type)", span="0-0"];
m9_79 [cluster="System.Linq.Expressions.Expression.Default(System.Type)", file="ValueSpecification.cs", label="Entry System.Linq.Expressions.Expression.Default(System.Type)", span="0-0"];
m9_13 [cluster="System.Type.GetProperties()", file="ValueSpecification.cs", label="Entry System.Type.GetProperties()", span="0-0"];
m9_0 [cluster="CommandLine.Core.ReflectionExtensions.GetSpecifications<T>(System.Type, System.Func<System.Reflection.PropertyInfo, T>)", file="ValueSpecification.cs", label="Entry CommandLine.Core.ReflectionExtensions.GetSpecifications<T>(System.Type, System.Func<System.Reflection.PropertyInfo, T>)", span="16-16"];
m9_1 [cluster="CommandLine.Core.ReflectionExtensions.GetSpecifications<T>(System.Type, System.Func<System.Reflection.PropertyInfo, T>)", color=green, community=0, file="ValueSpecification.cs", label="return from pi in type.FlattenHierarchy().SelectMany(x => x.GetProperties())\r\n                   let attrs = pi.GetCustomAttributes(true)\r\n                   where\r\n                       attrs.OfType<OptionAttribute>().Any() ||\r\n                       attrs.OfType<ValueAttribute>().Any()\r\n                   group pi by pi.Name into g\r\n                   select selector(g.First());", prediction=8, span="18-24"];
m9_2 [cluster="CommandLine.Core.ReflectionExtensions.GetSpecifications<T>(System.Type, System.Func<System.Reflection.PropertyInfo, T>)", file="ValueSpecification.cs", label="Exit CommandLine.Core.ReflectionExtensions.GetSpecifications<T>(System.Type, System.Func<System.Reflection.PropertyInfo, T>)", span="16-16"];
m9_81 [cluster="System.Linq.Expressions.Expression.Lambda<TDelegate>(System.Linq.Expressions.Expression, params System.Linq.Expressions.ParameterExpression[])", file="ValueSpecification.cs", label="Entry System.Linq.Expressions.Expression.Lambda<TDelegate>(System.Linq.Expressions.Expression, params System.Linq.Expressions.ParameterExpression[])", span="0-0"];
m9_93 [cluster="System.Type.GetProperties(System.Reflection.BindingFlags)", file="ValueSpecification.cs", label="Entry System.Type.GetProperties(System.Reflection.BindingFlags)", span="0-0"];
m9_5 [cluster="System.Reflection.MemberInfo.GetCustomAttributes(bool)", file="ValueSpecification.cs", label="Entry System.Reflection.MemberInfo.GetCustomAttributes(bool)", span="0-0"];
m9_46 [cluster="Unk.Aggregate", file="ValueSpecification.cs", label="Entry Unk.Aggregate", span=""];
m9_42 [cluster="CommandLine.Core.ReflectionExtensions.SetProperties<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", file="ValueSpecification.cs", label="Entry CommandLine.Core.ReflectionExtensions.SetProperties<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", span="71-71"];
m9_43 [cluster="CommandLine.Core.ReflectionExtensions.SetProperties<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", file="ValueSpecification.cs", label="return specProps.Where(predicate).Aggregate(\r\n                instance,\r\n                (current, specProp) =>\r\n                    {\r\n                        specProp.Property.SetValue(current, selector(specProp));\r\n                        return instance;\r\n                    });", span="77-83"];
m9_44 [cluster="CommandLine.Core.ReflectionExtensions.SetProperties<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", file="ValueSpecification.cs", label="Exit CommandLine.Core.ReflectionExtensions.SetProperties<T>(T, System.Collections.Generic.IEnumerable<CommandLine.Core.SpecificationProperty>, System.Func<CommandLine.Core.SpecificationProperty, bool>, System.Func<CommandLine.Core.SpecificationProperty, object>)", span="71-71"];
m9_51 [cluster="Unk.SetValue", file="ValueSpecification.cs", label="Entry Unk.SetValue", span=""];
m9_3 [cluster="System.Type.FlattenHierarchy()", file="ValueSpecification.cs", label="Entry System.Type.FlattenHierarchy()", span="38-38"];
m9_82 [cluster="System.Linq.Expressions.Expression<TDelegate>.Compile()", file="ValueSpecification.cs", label="Entry System.Linq.Expressions.Expression<TDelegate>.Compile()", span="0-0"];
m9_126 [file="ValueSpecification.cs", label="System.Type", span=""];
m9_124 [file="ValueSpecification.cs", label="System.Func<CommandLine.Core.SpecificationProperty, object>", span=""];
m9_125 [file="ValueSpecification.cs", label=T, span=""];
m1_1 -> m1_4  [color=darkseagreen4, key=1, label=expected, style=dashed];
m2_16 -> m2_21  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_1 -> m2_3  [color=darkseagreen4, key=1, label=expected, style=dashed];
m3_3 -> m3_20  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_3 -> m3_24  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_4 -> m3_28  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m5_9 -> m5_15  [color=darkseagreen4, key=1, label="System.Reflection.PropertyInfo", style=dashed];
m5_13 -> m5_15  [color=darkseagreen4, key=1, label=spec, style=dashed];
m5_13 -> m5_16  [color=darkseagreen4, key=1, label=spec, style=dashed];
m7_23 -> m7_28  [color=green, key=1, label=specs, style=dashed];
m7_22 -> m7_25  [color=darkseagreen4, key=1, label=expectedTokens, style=dashed];
m7_24 -> m7_27  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_2 -> m7_18  [color=green, key=1, label=specs, style=dashed];
m7_1 -> m7_4  [color=darkseagreen4, key=1, label=expectedTokens, style=dashed];
m7_3 -> m7_17  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m7_30 -> m7_18  [color=darkseagreen4, key=1, label=specs, style=dashed];
m7_31 -> m7_28  [color=darkseagreen4, key=1, label=specs, style=dashed];
m9_84 -> m9_86  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m9_15 -> m9_19  [color=green, key=1, label="lambda expression", style=dashed];
m9_89 -> m9_96  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_89 -> m9_91  [color=darkseagreen4, key=1, label=props, style=dashed];
m9_1 -> m9_10  [color=green, key=1, label="lambda expression", style=dashed];
m9_42 -> m9_48  [color=darkseagreen4, key=1, label="System.Func<CommandLine.Core.SpecificationProperty, object>", style=dashed];
m9_42 -> m9_49  [color=darkseagreen4, key=1, label=T, style=dashed];
m9_43 -> m9_47  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m9_124 -> m9_48  [color=darkseagreen4, key=1, label="System.Func<CommandLine.Core.SpecificationProperty, object>", style=dashed];
m9_125 -> m9_49  [color=darkseagreen4, key=1, label=T, style=dashed];
}
