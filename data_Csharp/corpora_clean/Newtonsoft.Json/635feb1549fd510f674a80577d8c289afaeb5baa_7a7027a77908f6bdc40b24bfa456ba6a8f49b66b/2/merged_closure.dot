digraph  {
m0_7 [cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting, params Newtonsoft.Json.JsonConverter[])", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting, params Newtonsoft.Json.JsonConverter[])", span="705-705"];
m0_495 [cluster="XmlDocument.cstr", file="DefaultValueHandlingTests.cs", label="Entry XmlDocument.cstr", span=""];
m0_26 [cluster="Newtonsoft.Json.Converters.XmlDocumentWrapper.CreateXmlDeclaration(string, string, string)", file="DefaultValueHandlingTests.cs", label="Exit Newtonsoft.Json.Converters.XmlDocumentWrapper.CreateXmlDeclaration(string, string, string)", span="82-82"];
m0_174 [cluster="Newtonsoft.Json.Utilities.MiscellaneousUtils.GetLocalName(string)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Utilities.MiscellaneousUtils.GetLocalName(string)", span="103-103"];
m0_555 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ConvertTokenToXmlValue(Newtonsoft.Json.JsonReader)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Converters.XmlNodeConverter.ConvertTokenToXmlValue(Newtonsoft.Json.JsonReader)", span="1414-1414"];
m0_557 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ConvertTokenToXmlValue(Newtonsoft.Json.JsonReader)", file="DefaultValueHandlingTests.cs", label="reader.TokenType == JsonToken.String", span="1416-1416"];
m0_558 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ConvertTokenToXmlValue(Newtonsoft.Json.JsonReader)", file="DefaultValueHandlingTests.cs", label="return reader.Value.ToString();", span="1418-1418"];
m0_559 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ConvertTokenToXmlValue(Newtonsoft.Json.JsonReader)", file="DefaultValueHandlingTests.cs", label="reader.TokenType == JsonToken.Integer", span="1420-1420"];
m0_560 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ConvertTokenToXmlValue(Newtonsoft.Json.JsonReader)", file="DefaultValueHandlingTests.cs", label="reader.Value is BigInteger", span="1423-1423"];
m0_561 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ConvertTokenToXmlValue(Newtonsoft.Json.JsonReader)", file="DefaultValueHandlingTests.cs", label="return ((BigInteger)reader.Value).ToString(CultureInfo.InvariantCulture);", span="1424-1424"];
m0_562 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ConvertTokenToXmlValue(Newtonsoft.Json.JsonReader)", file="DefaultValueHandlingTests.cs", label="return XmlConvert.ToString(Convert.ToInt64(reader.Value, CultureInfo.InvariantCulture));", span="1427-1427"];
m0_563 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ConvertTokenToXmlValue(Newtonsoft.Json.JsonReader)", file="DefaultValueHandlingTests.cs", label="reader.TokenType == JsonToken.Float", span="1429-1429"];
m0_564 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ConvertTokenToXmlValue(Newtonsoft.Json.JsonReader)", file="DefaultValueHandlingTests.cs", label="reader.Value is decimal", span="1431-1431"];
m0_565 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ConvertTokenToXmlValue(Newtonsoft.Json.JsonReader)", file="DefaultValueHandlingTests.cs", label="return XmlConvert.ToString((decimal)reader.Value);", span="1432-1432"];
m0_566 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ConvertTokenToXmlValue(Newtonsoft.Json.JsonReader)", file="DefaultValueHandlingTests.cs", label="reader.Value is float", span="1433-1433"];
m0_567 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ConvertTokenToXmlValue(Newtonsoft.Json.JsonReader)", file="DefaultValueHandlingTests.cs", label="return XmlConvert.ToString((float)reader.Value);", span="1434-1434"];
m0_568 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ConvertTokenToXmlValue(Newtonsoft.Json.JsonReader)", file="DefaultValueHandlingTests.cs", label="return XmlConvert.ToString(Convert.ToDouble(reader.Value, CultureInfo.InvariantCulture));", span="1436-1436"];
m0_569 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ConvertTokenToXmlValue(Newtonsoft.Json.JsonReader)", file="DefaultValueHandlingTests.cs", label="reader.TokenType == JsonToken.Boolean", span="1438-1438"];
m0_570 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ConvertTokenToXmlValue(Newtonsoft.Json.JsonReader)", file="DefaultValueHandlingTests.cs", label="return XmlConvert.ToString(Convert.ToBoolean(reader.Value, CultureInfo.InvariantCulture));", span="1440-1440"];
m0_571 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ConvertTokenToXmlValue(Newtonsoft.Json.JsonReader)", file="DefaultValueHandlingTests.cs", label="reader.TokenType == JsonToken.Date", span="1442-1442"];
m0_572 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ConvertTokenToXmlValue(Newtonsoft.Json.JsonReader)", file="DefaultValueHandlingTests.cs", label="reader.Value is DateTimeOffset", span="1445-1445"];
m0_573 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ConvertTokenToXmlValue(Newtonsoft.Json.JsonReader)", file="DefaultValueHandlingTests.cs", label="return XmlConvert.ToString((DateTimeOffset)reader.Value);", span="1446-1446"];
m0_574 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ConvertTokenToXmlValue(Newtonsoft.Json.JsonReader)", file="DefaultValueHandlingTests.cs", label="DateTime d = Convert.ToDateTime(reader.Value, CultureInfo.InvariantCulture)", span="1449-1449"];
m0_576 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ConvertTokenToXmlValue(Newtonsoft.Json.JsonReader)", file="DefaultValueHandlingTests.cs", label="reader.TokenType == JsonToken.Null", span="1456-1456"];
m0_578 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ConvertTokenToXmlValue(Newtonsoft.Json.JsonReader)", file="DefaultValueHandlingTests.cs", label="throw JsonSerializationException.Create(reader, ''Cannot get an XML string value from token type '{0}'.''.FormatWith(CultureInfo.InvariantCulture, reader.TokenType));", span="1462-1462"];
m0_575 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ConvertTokenToXmlValue(Newtonsoft.Json.JsonReader)", file="DefaultValueHandlingTests.cs", label="return XmlConvert.ToString(d, DateTimeUtils.ToSerializationMode(d.Kind));", span="1451-1451"];
m0_577 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ConvertTokenToXmlValue(Newtonsoft.Json.JsonReader)", file="DefaultValueHandlingTests.cs", label="return null;", span="1458-1458"];
m0_579 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ConvertTokenToXmlValue(Newtonsoft.Json.JsonReader)", file="DefaultValueHandlingTests.cs", label="Exit Newtonsoft.Json.Converters.XmlNodeConverter.ConvertTokenToXmlValue(Newtonsoft.Json.JsonReader)", span="1414-1414"];
m0_34 [cluster="Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string, params Newtonsoft.Json.JsonConverter[])", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string, params Newtonsoft.Json.JsonConverter[])", span="867-867"];
m0_35 [cluster="System.Text.RegularExpressions.Regex.ToString()", file="DefaultValueHandlingTests.cs", label="Entry System.Text.RegularExpressions.Regex.ToString()", span="0-0"];
m0_36 [cluster="Newtonsoft.Json.Tests.Converters.RegexConverterTests.DeserializeFromBson()", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Converters.RegexConverterTests.DeserializeFromBson()", span="77-77"];
m0_521 [cluster="string.Equals(string, string, System.StringComparison)", file="DefaultValueHandlingTests.cs", label="Entry string.Equals(string, string, System.StringComparison)", span="0-0"];
m0_448 [cluster="Unk.All", file="DefaultValueHandlingTests.cs", label="Entry Unk.All", span=""];
m0_240 [cluster="XAttributeWrapper.cstr", file="DefaultValueHandlingTests.cs", label="Entry XAttributeWrapper.cstr", span=""];
m0_65 [cluster="Newtonsoft.Json.Converters.XmlElementWrapper.GetPrefixOfNamespace(string)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Converters.XmlElementWrapper.GetPrefixOfNamespace(string)", span="152-152"];
m0_66 [cluster="Newtonsoft.Json.Converters.XmlElementWrapper.GetPrefixOfNamespace(string)", file="DefaultValueHandlingTests.cs", label="return _element.GetPrefixOfNamespace(namespaceUri);", span="154-154"];
m0_67 [cluster="Newtonsoft.Json.Converters.XmlElementWrapper.GetPrefixOfNamespace(string)", file="DefaultValueHandlingTests.cs", label="Exit Newtonsoft.Json.Converters.XmlElementWrapper.GetPrefixOfNamespace(string)", span="152-152"];
m0_71 [cluster="Newtonsoft.Json.Converters.XmlDeclarationWrapper.XmlDeclarationWrapper(XmlDeclaration)", file="DefaultValueHandlingTests.cs", label="Exit Newtonsoft.Json.Converters.XmlDeclarationWrapper.XmlDeclarationWrapper(XmlDeclaration)", span="167-167"];
m0_68 [cluster="Unk.GetPrefixOfNamespace", file="DefaultValueHandlingTests.cs", label="Entry Unk.GetPrefixOfNamespace", span=""];
m0_73 [cluster="Newtonsoft.Json.Converters.XmlDocumentTypeWrapper.XmlDocumentTypeWrapper(XmlDocumentType)", file="DefaultValueHandlingTests.cs", label="_documentType = documentType", span="198-198"];
m0_69 [cluster="Newtonsoft.Json.Converters.XmlDeclarationWrapper.XmlDeclarationWrapper(XmlDeclaration)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Converters.XmlDeclarationWrapper.XmlDeclarationWrapper(XmlDeclaration)", span="167-167"];
m0_70 [cluster="Newtonsoft.Json.Converters.XmlDeclarationWrapper.XmlDeclarationWrapper(XmlDeclaration)", file="DefaultValueHandlingTests.cs", label="_declaration = declaration", span="170-170"];
m0_77 [cluster="Newtonsoft.Json.Converters.XmlNodeWrapper.XmlNodeWrapper(XmlNode)", file="DefaultValueHandlingTests.cs", label="Exit Newtonsoft.Json.Converters.XmlNodeWrapper.XmlNodeWrapper(XmlNode)", span="232-232"];
m0_74 [cluster="Newtonsoft.Json.Converters.XmlDocumentTypeWrapper.XmlDocumentTypeWrapper(XmlDocumentType)", file="DefaultValueHandlingTests.cs", label="Exit Newtonsoft.Json.Converters.XmlDocumentTypeWrapper.XmlDocumentTypeWrapper(XmlDocumentType)", span="195-195"];
m0_79 [cluster="Newtonsoft.Json.Converters.XmlNodeWrapper.WrapNode(XmlNode)", file="DefaultValueHandlingTests.cs", label="node.NodeType", span="267-267"];
m0_80 [cluster="Newtonsoft.Json.Converters.XmlNodeWrapper.WrapNode(XmlNode)", file="DefaultValueHandlingTests.cs", label="XmlNodeType.Element", span="269-269"];
m0_76 [cluster="Newtonsoft.Json.Converters.XmlNodeWrapper.XmlNodeWrapper(XmlNode)", file="DefaultValueHandlingTests.cs", label="_node = node", span="234-234"];
m0_78 [cluster="Newtonsoft.Json.Converters.XmlNodeWrapper.WrapNode(XmlNode)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Converters.XmlNodeWrapper.WrapNode(XmlNode)", span="265-265"];
m0_75 [cluster="Newtonsoft.Json.Converters.XmlNodeWrapper.XmlNodeWrapper(XmlNode)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Converters.XmlNodeWrapper.XmlNodeWrapper(XmlNode)", span="232-232"];
m0_72 [cluster="Newtonsoft.Json.Converters.XmlDocumentTypeWrapper.XmlDocumentTypeWrapper(XmlDocumentType)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Converters.XmlDocumentTypeWrapper.XmlDocumentTypeWrapper(XmlDocumentType)", span="195-195"];
m0_81 [cluster="Newtonsoft.Json.Converters.XmlNodeWrapper.WrapNode(XmlNode)", file="DefaultValueHandlingTests.cs", label="return new XmlElementWrapper((XmlElement) node);", span="270-270"];
m0_133 [cluster="Newtonsoft.Json.Converters.XDocumentWrapper.CreateComment(string)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Converters.XDocumentWrapper.CreateComment(string)", span="480-480"];
m0_134 [cluster="Newtonsoft.Json.Converters.XDocumentWrapper.CreateComment(string)", file="DefaultValueHandlingTests.cs", label="return new XObjectWrapper(new XComment(text));", span="482-482"];
m0_135 [cluster="Newtonsoft.Json.Converters.XDocumentWrapper.CreateComment(string)", file="DefaultValueHandlingTests.cs", label="Exit Newtonsoft.Json.Converters.XDocumentWrapper.CreateComment(string)", span="480-480"];
m0_95 [cluster="Newtonsoft.Json.Converters.IXmlDocument.CreateComment(string)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Converters.IXmlDocument.CreateComment(string)", span="332-332"];
m0_96 [cluster="Newtonsoft.Json.Converters.IXmlDocument.CreateComment(string)", file="DefaultValueHandlingTests.cs", label="Exit Newtonsoft.Json.Converters.IXmlDocument.CreateComment(string)", span="332-332"];
m0_109 [cluster="Newtonsoft.Json.Converters.IXmlDocument.CreateProcessingInstruction(string, string)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Converters.IXmlDocument.CreateProcessingInstruction(string, string)", span="339-339"];
m0_110 [cluster="Newtonsoft.Json.Converters.IXmlDocument.CreateProcessingInstruction(string, string)", file="DefaultValueHandlingTests.cs", label="Exit Newtonsoft.Json.Converters.IXmlDocument.CreateProcessingInstruction(string, string)", span="339-339"];
m0_519 [cluster="object.ToString()", file="DefaultValueHandlingTests.cs", label="Entry object.ToString()", span="0-0"];
m0_156 [cluster="Newtonsoft.Json.Converters.XDocumentWrapper.CreateXmlDocumentType(string, string, string, string)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Converters.XDocumentWrapper.CreateXmlDocumentType(string, string, string, string)", span="510-510"];
m0_157 [cluster="Newtonsoft.Json.Converters.XDocumentWrapper.CreateXmlDocumentType(string, string, string, string)", file="DefaultValueHandlingTests.cs", label="return new XDocumentTypeWrapper(new XDocumentType(name, publicId, systemId, internalSubset));", span="512-512"];
m0_158 [cluster="Newtonsoft.Json.Converters.XDocumentWrapper.CreateXmlDocumentType(string, string, string, string)", file="DefaultValueHandlingTests.cs", label="Exit Newtonsoft.Json.Converters.XDocumentWrapper.CreateXmlDocumentType(string, string, string, string)", span="510-510"];
m0_743 [cluster="string.StartsWith(string, System.StringComparison)", file="DefaultValueHandlingTests.cs", label="Entry string.StartsWith(string, System.StringComparison)", span="0-0"];
m0_200 [cluster="Newtonsoft.Json.Converters.XContainerWrapper.WrapNode(XObject)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Converters.XContainerWrapper.WrapNode(XObject)", span="690-690"];
m0_201 [cluster="Newtonsoft.Json.Converters.XContainerWrapper.WrapNode(XObject)", file="DefaultValueHandlingTests.cs", label="node is XDocument", span="692-692"];
m0_202 [cluster="Newtonsoft.Json.Converters.XContainerWrapper.WrapNode(XObject)", file="DefaultValueHandlingTests.cs", label="return new XDocumentWrapper((XDocument)node);", span="693-693"];
m0_203 [cluster="Newtonsoft.Json.Converters.XContainerWrapper.WrapNode(XObject)", file="DefaultValueHandlingTests.cs", label="node is XElement", span="694-694"];
m0_204 [cluster="Newtonsoft.Json.Converters.XContainerWrapper.WrapNode(XObject)", file="DefaultValueHandlingTests.cs", label="return new XElementWrapper((XElement)node);", span="695-695"];
m0_205 [cluster="Newtonsoft.Json.Converters.XContainerWrapper.WrapNode(XObject)", file="DefaultValueHandlingTests.cs", label="node is XContainer", span="696-696"];
m0_206 [cluster="Newtonsoft.Json.Converters.XContainerWrapper.WrapNode(XObject)", file="DefaultValueHandlingTests.cs", label="return new XContainerWrapper((XContainer)node);", span="697-697"];
m0_207 [cluster="Newtonsoft.Json.Converters.XContainerWrapper.WrapNode(XObject)", file="DefaultValueHandlingTests.cs", label="node is XProcessingInstruction", span="698-698"];
m0_208 [cluster="Newtonsoft.Json.Converters.XContainerWrapper.WrapNode(XObject)", file="DefaultValueHandlingTests.cs", label="return new XProcessingInstructionWrapper((XProcessingInstruction)node);", span="699-699"];
m0_209 [cluster="Newtonsoft.Json.Converters.XContainerWrapper.WrapNode(XObject)", file="DefaultValueHandlingTests.cs", label="node is XText", span="700-700"];
m0_210 [cluster="Newtonsoft.Json.Converters.XContainerWrapper.WrapNode(XObject)", file="DefaultValueHandlingTests.cs", label="return new XTextWrapper((XText)node);", span="701-701"];
m0_211 [cluster="Newtonsoft.Json.Converters.XContainerWrapper.WrapNode(XObject)", file="DefaultValueHandlingTests.cs", label="node is XComment", span="702-702"];
m0_212 [cluster="Newtonsoft.Json.Converters.XContainerWrapper.WrapNode(XObject)", file="DefaultValueHandlingTests.cs", label="return new XCommentWrapper((XComment)node);", span="703-703"];
m0_213 [cluster="Newtonsoft.Json.Converters.XContainerWrapper.WrapNode(XObject)", file="DefaultValueHandlingTests.cs", label="node is XAttribute", span="704-704"];
m0_214 [cluster="Newtonsoft.Json.Converters.XContainerWrapper.WrapNode(XObject)", file="DefaultValueHandlingTests.cs", label="return new XAttributeWrapper((XAttribute)node);", span="705-705"];
m0_215 [cluster="Newtonsoft.Json.Converters.XContainerWrapper.WrapNode(XObject)", file="DefaultValueHandlingTests.cs", label="node is XDocumentType", span="706-706"];
m0_216 [cluster="Newtonsoft.Json.Converters.XContainerWrapper.WrapNode(XObject)", file="DefaultValueHandlingTests.cs", label="return new XDocumentTypeWrapper((XDocumentType)node);", span="707-707"];
m0_217 [cluster="Newtonsoft.Json.Converters.XContainerWrapper.WrapNode(XObject)", file="DefaultValueHandlingTests.cs", label="return new XObjectWrapper(node);", span="709-709"];
m0_218 [cluster="Newtonsoft.Json.Converters.XContainerWrapper.WrapNode(XObject)", file="DefaultValueHandlingTests.cs", label="Exit Newtonsoft.Json.Converters.XContainerWrapper.WrapNode(XObject)", span="690-690"];
m0_170 [cluster="Newtonsoft.Json.Converters.XDocumentWrapper.CreateElement(string, string)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Converters.XDocumentWrapper.CreateElement(string, string)", span="525-525"];
m0_171 [cluster="Newtonsoft.Json.Converters.XDocumentWrapper.CreateElement(string, string)", file="DefaultValueHandlingTests.cs", label="string localName = MiscellaneousUtils.GetLocalName(qualifiedName)", span="527-527"];
m0_172 [cluster="Newtonsoft.Json.Converters.XDocumentWrapper.CreateElement(string, string)", file="DefaultValueHandlingTests.cs", label="return new XElementWrapper(new XElement(XName.Get(localName, namespaceUri)));", span="528-528"];
m0_173 [cluster="Newtonsoft.Json.Converters.XDocumentWrapper.CreateElement(string, string)", file="DefaultValueHandlingTests.cs", label="Exit Newtonsoft.Json.Converters.XDocumentWrapper.CreateElement(string, string)", span="525-525"];
m0_496 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadElement(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Converters.XmlNodeConverter.ReadElement(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string, XmlNamespaceManager)", span="1347-1347"];
m0_524 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadElement(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="string.IsNullOrEmpty(propertyName)", span="1349-1349"];
m0_526 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadElement(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="Dictionary<string, string> attributeNameValues = ReadAttributeElements(reader, manager)", span="1352-1352"];
m0_527 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadElement(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="string elementPrefix = MiscellaneousUtils.GetPrefix(propertyName)", span="1354-1354"];
m0_528 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadElement(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="propertyName.StartsWith('@')", span="1356-1356"];
m0_529 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadElement(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="string attributeName = propertyName.Substring(1)", span="1358-1358"];
m0_530 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadElement(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="string attributeValue = reader.Value.ToString()", span="1359-1359"];
m0_532 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadElement(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="IXmlNode attribute = (!string.IsNullOrEmpty(attributePrefix))\r\n                    ? document.CreateAttribute(attributeName, manager.LookupNamespace(attributePrefix), attributeValue)\r\n                    : document.CreateAttribute(attributeName, attributeValue)", span="1363-1365"];
m0_533 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadElement(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="((IXmlElement)currentNode).SetAttributeNode(attribute)", span="1367-1367"];
m0_534 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadElement(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="IXmlElement element = CreateElement(propertyName, document, elementPrefix, manager)", span="1371-1371"];
m0_535 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadElement(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="currentNode.AppendChild(element)", span="1373-1373"];
m0_538 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadElement(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="IXmlNode attribute = (!string.IsNullOrEmpty(attributePrefix))\r\n                        ? document.CreateAttribute(nameValue.Key, manager.LookupNamespace(attributePrefix) ?? string.Empty, nameValue.Value)\r\n                        : document.CreateAttribute(nameValue.Key, nameValue.Value)", span="1380-1382"];
m0_540 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadElement(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="reader.TokenType == JsonToken.String\r\n                    || reader.TokenType == JsonToken.Integer\r\n                    || reader.TokenType == JsonToken.Float\r\n                    || reader.TokenType == JsonToken.Boolean\r\n                    || reader.TokenType == JsonToken.Date", span="1387-1391"];
m0_541 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadElement(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="element.AppendChild(document.CreateTextNode(ConvertTokenToXmlValue(reader)))", span="1393-1393"];
m0_542 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadElement(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="reader.TokenType == JsonToken.Null", span="1395-1395"];
m0_543 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadElement(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="reader.TokenType != JsonToken.EndObject", span="1402-1402"];
m0_544 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadElement(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="manager.PushScope()", span="1404-1404"];
m0_545 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadElement(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="DeserializeNode(reader, document, manager, element)", span="1405-1405"];
m0_546 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadElement(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="manager.PopScope()", span="1406-1406"];
m0_547 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadElement(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="manager.RemoveNamespace(string.Empty, manager.DefaultNamespace)", span="1409-1409"];
m0_525 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadElement(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="throw new JsonSerializationException(''XmlNodeConverter cannot convert JSON with an empty property name to XML.'');", span="1350-1350"];
m0_536 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadElement(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label=attributeNameValues, span="1376-1376"];
m0_531 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadElement(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="string attributePrefix = MiscellaneousUtils.GetPrefix(attributeName)", span="1361-1361"];
m0_539 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadElement(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="element.SetAttributeNode(attribute)", span="1384-1384"];
m0_537 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadElement(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="string attributePrefix = MiscellaneousUtils.GetPrefix(nameValue.Key)", span="1378-1378"];
m0_548 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadElement(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="Exit Newtonsoft.Json.Converters.XmlNodeConverter.ReadElement(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string, XmlNamespaceManager)", span="1347-1347"];
m0_51 [cluster="Newtonsoft.Json.Tests.Converters.RegexConverterTests.ConvertEmptyRegexBson()", file="DefaultValueHandlingTests.cs", label="MemoryStream ms = new MemoryStream()", span="95-95"];
m0_117 [cluster="Newtonsoft.Json.Converters.IXmlDocument.CreateAttribute(string, string, string)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Converters.IXmlDocument.CreateAttribute(string, string, string)", span="343-343"];
m0_118 [cluster="Newtonsoft.Json.Converters.IXmlDocument.CreateAttribute(string, string, string)", file="DefaultValueHandlingTests.cs", label="Exit Newtonsoft.Json.Converters.IXmlDocument.CreateAttribute(string, string, string)", span="343-343"];
m0_159 [cluster="XDocumentType.cstr", file="DefaultValueHandlingTests.cs", label="Entry XDocumentType.cstr", span=""];
m0_179 [cluster="Newtonsoft.Json.Converters.XAttributeWrapper.XAttributeWrapper(XAttribute)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Converters.XAttributeWrapper.XAttributeWrapper(XAttribute)", span="784-784"];
m0_231 [cluster="Newtonsoft.Json.Converters.XAttributeWrapper.XAttributeWrapper(XAttribute)", file="DefaultValueHandlingTests.cs", label="Exit Newtonsoft.Json.Converters.XAttributeWrapper.XAttributeWrapper(XAttribute)", span="784-784"];
m0_322 [cluster="JsonSerializationException.cstr", file="DefaultValueHandlingTests.cs", label="Entry JsonSerializationException.cstr", span=""];
m0_21 [cluster="Newtonsoft.Json.Converters.XmlDocumentWrapper.CreateSignificantWhitespace(string)", file="DefaultValueHandlingTests.cs", label="return new XmlNodeWrapper(_document.CreateSignificantWhitespace(text));", span="79-79"];
m0_149 [cluster="Newtonsoft.Json.Converters.XDocumentWrapper.CreateSignificantWhitespace(string)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Converters.XDocumentWrapper.CreateSignificantWhitespace(string)", span="500-500"];
m0_150 [cluster="Newtonsoft.Json.Converters.XDocumentWrapper.CreateSignificantWhitespace(string)", file="DefaultValueHandlingTests.cs", label="return new XObjectWrapper(new XText(text));", span="502-502"];
m0_151 [cluster="Newtonsoft.Json.Converters.XDocumentWrapper.CreateSignificantWhitespace(string)", file="DefaultValueHandlingTests.cs", label="Exit Newtonsoft.Json.Converters.XDocumentWrapper.CreateSignificantWhitespace(string)", span="500-500"];
m0_57 [cluster="Newtonsoft.Json.Tests.Converters.RegexConverterTests.ConvertEmptyRegexBson()", file="DefaultValueHandlingTests.cs", label="BsonReader reader = new BsonReader(ms)", span="103-103"];
m0_58 [cluster="Newtonsoft.Json.Tests.Converters.RegexConverterTests.ConvertEmptyRegexBson()", file="DefaultValueHandlingTests.cs", label="serializer.Converters.Add(new RegexConverter())", span="104-104"];
m0_59 [cluster="Newtonsoft.Json.Tests.Converters.RegexConverterTests.ConvertEmptyRegexBson()", file="DefaultValueHandlingTests.cs", label="RegexTestClass c = serializer.Deserialize<RegexTestClass>(reader)", span="106-106"];
m0_332 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeGroupedNodes(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Converters.XmlNodeConverter.SerializeGroupedNodes(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", span="1023-1023"];
m0_333 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeGroupedNodes(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="Dictionary<string, List<IXmlNode>> nodesGroupedByName = new Dictionary<string, List<IXmlNode>>()", span="1026-1026"];
m0_335 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeGroupedNodes(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="i < node.ChildNodes.Count", span="1028-1028"];
m0_336 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeGroupedNodes(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="IXmlNode childNode = node.ChildNodes[i]", span="1030-1030"];
m0_337 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeGroupedNodes(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="string nodeName = GetPropertyName(childNode, manager)", span="1031-1031"];
m0_351 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeGroupedNodes(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="SerializeNode(writer, groupedNodes[0], manager, writePropertyName)", span="1061-1061"];
m0_353 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeGroupedNodes(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label=writePropertyName, span="1067-1067"];
m0_354 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeGroupedNodes(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="writer.WritePropertyName(elementNames)", span="1068-1068"];
m0_355 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeGroupedNodes(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="writer.WriteStartArray()", span="1070-1070"];
m0_358 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeGroupedNodes(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="SerializeNode(writer, groupedNodes[i], manager, false)", span="1074-1074"];
m0_360 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeGroupedNodes(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="writer.WriteEndArray()", span="1077-1077"];
m0_334 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeGroupedNodes(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="int i = 0", span="1028-1028"];
m0_339 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeGroupedNodes(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="!nodesGroupedByName.TryGetValue(nodeName, out nodes)", span="1034-1034"];
m0_341 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeGroupedNodes(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="nodesGroupedByName.Add(nodeName, nodes)", span="1037-1037"];
m0_344 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeGroupedNodes(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label=nodesGroupedByName, span="1045-1045"];
m0_343 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeGroupedNodes(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="i++", span="1028-1028"];
m0_342 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeGroupedNodes(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="nodes.Add(childNode)", span="1040-1040"];
m0_338 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeGroupedNodes(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="List<IXmlNode> nodes", span="1033-1033"];
m0_340 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeGroupedNodes(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="nodes = new List<IXmlNode>()", span="1036-1036"];
m0_345 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeGroupedNodes(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="List<IXmlNode> groupedNodes = nodeNameGroup.Value", span="1047-1047"];
m0_346 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeGroupedNodes(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="bool writeArray", span="1048-1048"];
m0_347 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeGroupedNodes(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="groupedNodes.Count == 1", span="1050-1050"];
m0_348 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeGroupedNodes(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="writeArray = IsArray(groupedNodes[0])", span="1052-1052"];
m0_352 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeGroupedNodes(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="string elementNames = nodeNameGroup.Key", span="1065-1065"];
m0_357 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeGroupedNodes(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="i < groupedNodes.Count", span="1072-1072"];
m0_349 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeGroupedNodes(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="writeArray = true", span="1056-1056"];
m0_350 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeGroupedNodes(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="!writeArray", span="1059-1059"];
m0_356 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeGroupedNodes(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="int i = 0", span="1072-1072"];
m0_359 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeGroupedNodes(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="i++", span="1072-1072"];
m0_361 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeGroupedNodes(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="Exit Newtonsoft.Json.Converters.XmlNodeConverter.SerializeGroupedNodes(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", span="1023-1023"];
m0_11 [cluster="Newtonsoft.Json.Tests.Converters.RegexConverterTests.SerializeToBson()", color=green, community=0, file="DefaultValueHandlingTests.cs", label="MemoryStream ms = new MemoryStream()", prediction=0, span="50-50"];
m0_83 [cluster="Newtonsoft.Json.Tests.Converters.RegexConverterTests.ConvertEmptyRegexJson()", file="DefaultValueHandlingTests.cs", label="Regex regex = new Regex('''')", span="144-144"];
m0_85 [cluster="Newtonsoft.Json.Tests.Converters.RegexConverterTests.ConvertEmptyRegexJson()", file="DefaultValueHandlingTests.cs", label="Assert.AreEqual(@''{\r\n  ''''Regex'''': {\r\n    ''''Pattern'''': '''''''',\r\n    ''''Options'''': 0\r\n  }\r\n}'', json)", span="148-153"];
m0_86 [cluster="Newtonsoft.Json.Tests.Converters.RegexConverterTests.ConvertEmptyRegexJson()", file="DefaultValueHandlingTests.cs", label="RegexTestClass newRegex = JsonConvert.DeserializeObject<RegexTestClass>(json, new RegexConverter())", span="155-155"];
m0_82 [cluster="Newtonsoft.Json.Tests.Converters.RegexConverterTests.ConvertEmptyRegexJson()", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Converters.RegexConverterTests.ConvertEmptyRegexJson()", span="142-142"];
m0_84 [cluster="Newtonsoft.Json.Tests.Converters.RegexConverterTests.ConvertEmptyRegexJson()", file="DefaultValueHandlingTests.cs", label="string json = JsonConvert.SerializeObject(new RegexTestClass { Regex = regex }, Formatting.Indented, new RegexConverter())", span="146-146"];
m0_87 [cluster="Newtonsoft.Json.Tests.Converters.RegexConverterTests.ConvertEmptyRegexJson()", file="DefaultValueHandlingTests.cs", label="Assert.AreEqual('''', newRegex.Regex.ToString())", span="156-156"];
m0_552 [cluster="string.Substring(int)", file="DefaultValueHandlingTests.cs", label="Entry string.Substring(int)", span="0-0"];
m0_64 [cluster="System.IO.MemoryStream.Seek(long, System.IO.SeekOrigin)", file="DefaultValueHandlingTests.cs", label="Entry System.IO.MemoryStream.Seek(long, System.IO.SeekOrigin)", span="0-0"];
m0_97 [cluster="Newtonsoft.Json.Converters.IXmlDocument.CreateTextNode(string)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Converters.IXmlDocument.CreateTextNode(string)", span="333-333"];
m0_98 [cluster="Newtonsoft.Json.Converters.IXmlDocument.CreateTextNode(string)", file="DefaultValueHandlingTests.cs", label="Exit Newtonsoft.Json.Converters.IXmlDocument.CreateTextNode(string)", span="333-333"];
m0_185 [cluster="Newtonsoft.Json.Converters.XDocumentWrapper.AppendChild(Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Converters.XDocumentWrapper.AppendChild(Newtonsoft.Json.Converters.IXmlNode)", span="553-553"];
m0_186 [cluster="Newtonsoft.Json.Converters.XDocumentWrapper.AppendChild(Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="XDeclarationWrapper declarationWrapper = newChild as XDeclarationWrapper", span="555-555"];
m0_190 [cluster="Newtonsoft.Json.Converters.XDocumentWrapper.AppendChild(Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="return base.AppendChild(newChild);", span="563-563"];
m0_187 [cluster="Newtonsoft.Json.Converters.XDocumentWrapper.AppendChild(Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="declarationWrapper != null", span="556-556"];
m0_188 [cluster="Newtonsoft.Json.Converters.XDocumentWrapper.AppendChild(Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="Document.Declaration = declarationWrapper.Declaration", span="558-558"];
m0_189 [cluster="Newtonsoft.Json.Converters.XDocumentWrapper.AppendChild(Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="return declarationWrapper;", span="559-559"];
m0_191 [cluster="Newtonsoft.Json.Converters.XDocumentWrapper.AppendChild(Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="Exit Newtonsoft.Json.Converters.XDocumentWrapper.AppendChild(Newtonsoft.Json.Converters.IXmlNode)", span="553-553"];
m0_584 [cluster="System.Convert.ToDateTime(object, System.IFormatProvider)", file="DefaultValueHandlingTests.cs", label="Entry System.Convert.ToDateTime(object, System.IFormatProvider)", span="0-0"];
m0_747 [cluster="Unk.Where", file="DefaultValueHandlingTests.cs", label="Entry Unk.Where", span=""];
m0_24 [cluster="Newtonsoft.Json.Tests.Converters.RegexConverterTests.RegexTestClass.RegexTestClass()", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Converters.RegexConverterTests.RegexTestClass.RegexTestClass()", span="27-27"];
m0_25 [cluster="Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter, object)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter, object)", span="510-510"];
m0_181 [cluster="Newtonsoft.Json.Converters.XDocumentWrapper.CreateAttribute(string, string, string)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Converters.XDocumentWrapper.CreateAttribute(string, string, string)", span="536-536"];
m0_182 [cluster="Newtonsoft.Json.Converters.XDocumentWrapper.CreateAttribute(string, string, string)", file="DefaultValueHandlingTests.cs", label="string localName = MiscellaneousUtils.GetLocalName(qualifiedName)", span="538-538"];
m0_183 [cluster="Newtonsoft.Json.Converters.XDocumentWrapper.CreateAttribute(string, string, string)", file="DefaultValueHandlingTests.cs", label="return new XAttributeWrapper(new XAttribute(XName.Get(localName, namespaceUri), value));", span="539-539"];
m0_184 [cluster="Newtonsoft.Json.Converters.XDocumentWrapper.CreateAttribute(string, string, string)", file="DefaultValueHandlingTests.cs", label="Exit Newtonsoft.Json.Converters.XDocumentWrapper.CreateAttribute(string, string, string)", span="536-536"];
m0_224 [cluster="Unk.Add", file="DefaultValueHandlingTests.cs", label="Entry Unk.Add", span=""];
m0_452 [cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmpty<T>(System.Collections.Generic.ICollection<T>)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmpty<T>(System.Collections.Generic.ICollection<T>)", span="50-50"];
m0_141 [cluster="XText.cstr", file="DefaultValueHandlingTests.cs", label="Entry XText.cstr", span=""];
m0_522 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateDocumentType(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Converters.XmlNodeConverter.CreateDocumentType(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode)", span="1640-1640"];
m0_677 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateDocumentType(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="string name = null", span="1642-1642"];
m0_681 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateDocumentType(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="reader.Read() && reader.TokenType != JsonToken.EndObject", span="1646-1646"];
m0_682 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateDocumentType(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="reader.Value.ToString()", span="1648-1648"];
m0_684 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateDocumentType(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="reader.Read()", span="1651-1651"];
m0_685 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateDocumentType(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="name = reader.Value.ToString()", span="1652-1652"];
m0_687 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateDocumentType(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="reader.Read()", span="1655-1655"];
m0_688 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateDocumentType(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="publicId = reader.Value.ToString()", span="1656-1656"];
m0_690 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateDocumentType(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="reader.Read()", span="1659-1659"];
m0_691 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateDocumentType(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="systemId = reader.Value.ToString()", span="1660-1660"];
m0_693 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateDocumentType(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="reader.Read()", span="1663-1663"];
m0_694 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateDocumentType(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="internalSubset = reader.Value.ToString()", span="1664-1664"];
m0_695 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateDocumentType(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="throw new JsonSerializationException(''Unexpected property name encountered while deserializing XmlDeclaration: '' + reader.Value);", span="1667-1667"];
m0_696 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateDocumentType(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="IXmlNode documentType = document.CreateXmlDocumentType(name, publicId, systemId, internalSubset)", span="1671-1671"];
m0_697 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateDocumentType(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="currentNode.AppendChild(documentType)", span="1672-1672"];
m0_678 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateDocumentType(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="string publicId = null", span="1643-1643"];
m0_679 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateDocumentType(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="string systemId = null", span="1644-1644"];
m0_680 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateDocumentType(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="string internalSubset = null", span="1645-1645"];
m0_683 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateDocumentType(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="''@name''", span="1650-1650"];
m0_686 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateDocumentType(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="''@public''", span="1654-1654"];
m0_689 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateDocumentType(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="''@system''", span="1658-1658"];
m0_692 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateDocumentType(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="''@internalSubset''", span="1662-1662"];
m0_698 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateDocumentType(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="Exit Newtonsoft.Json.Converters.XmlNodeConverter.CreateDocumentType(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode)", span="1640-1640"];
m0_551 [cluster="string.StartsWith(char)", file="DefaultValueHandlingTests.cs", label="Entry string.StartsWith(char)", span="200-200"];
m0_581 [cluster="System.Convert.ToInt64(object, System.IFormatProvider)", file="DefaultValueHandlingTests.cs", label="Entry System.Convert.ToInt64(object, System.IFormatProvider)", span="0-0"];
m0_60 [cluster="Newtonsoft.Json.Tests.Converters.RegexConverterTests.ConvertEmptyRegexBson()", file="DefaultValueHandlingTests.cs", label="Assert.AreEqual('''', c.Regex.ToString())", span="108-108"];
m0_61 [cluster="Newtonsoft.Json.Tests.Converters.RegexConverterTests.ConvertEmptyRegexBson()", file="DefaultValueHandlingTests.cs", label="Assert.AreEqual(RegexOptions.None, c.Regex.Options)", span="109-109"];
m0_62 [cluster="Newtonsoft.Json.Tests.Converters.RegexConverterTests.ConvertEmptyRegexBson()", file="DefaultValueHandlingTests.cs", label="Exit Newtonsoft.Json.Tests.Converters.RegexConverterTests.ConvertEmptyRegexBson()", span="91-91"];
m0_63 [cluster="System.Text.RegularExpressions.Regex.Regex(string)", file="DefaultValueHandlingTests.cs", label="Entry System.Text.RegularExpressions.Regex.Regex(string)", span="0-0"];
m0_107 [cluster="Newtonsoft.Json.Converters.IXmlDocument.CreateXmlDocumentType(string, string, string, string)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Converters.IXmlDocument.CreateXmlDocumentType(string, string, string, string)", span="338-338"];
m0_108 [cluster="Newtonsoft.Json.Converters.IXmlDocument.CreateXmlDocumentType(string, string, string, string)", file="DefaultValueHandlingTests.cs", label="Exit Newtonsoft.Json.Converters.IXmlDocument.CreateXmlDocumentType(string, string, string, string)", span="338-338"];
m0_602 [cluster="System.Collections.IEnumerable.OfType<TResult>()", file="DefaultValueHandlingTests.cs", label="Entry System.Collections.IEnumerable.OfType<TResult>()", span="0-0"];
m0_287 [cluster="Unk.AddNamespace", file="DefaultValueHandlingTests.cs", label="Entry Unk.AddNamespace", span=""];
m0_520 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateInstruction(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Converters.XmlNodeConverter.CreateInstruction(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string)", span="1602-1602"];
m0_656 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateInstruction(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string)", file="DefaultValueHandlingTests.cs", label="propertyName == DeclarationName", span="1604-1604"];
m0_660 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateInstruction(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string)", file="DefaultValueHandlingTests.cs", label="reader.Read() && reader.TokenType != JsonToken.EndObject", span="1609-1609"];
m0_661 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateInstruction(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string)", file="DefaultValueHandlingTests.cs", label="reader.Value.ToString()", span="1611-1611"];
m0_663 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateInstruction(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string)", file="DefaultValueHandlingTests.cs", label="reader.Read()", span="1614-1614"];
m0_664 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateInstruction(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string)", file="DefaultValueHandlingTests.cs", label="version = reader.Value.ToString()", span="1615-1615"];
m0_666 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateInstruction(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string)", file="DefaultValueHandlingTests.cs", label="reader.Read()", span="1618-1618"];
m0_667 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateInstruction(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string)", file="DefaultValueHandlingTests.cs", label="encoding = reader.Value.ToString()", span="1619-1619"];
m0_669 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateInstruction(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string)", file="DefaultValueHandlingTests.cs", label="reader.Read()", span="1622-1622"];
m0_670 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateInstruction(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string)", file="DefaultValueHandlingTests.cs", label="standalone = reader.Value.ToString()", span="1623-1623"];
m0_671 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateInstruction(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string)", file="DefaultValueHandlingTests.cs", label="throw new JsonSerializationException(''Unexpected property name encountered while deserializing XmlDeclaration: '' + reader.Value);", span="1626-1626"];
m0_672 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateInstruction(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string)", file="DefaultValueHandlingTests.cs", label="IXmlNode declaration = document.CreateXmlDeclaration(version, encoding, standalone)", span="1630-1630"];
m0_673 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateInstruction(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string)", file="DefaultValueHandlingTests.cs", label="currentNode.AppendChild(declaration)", span="1631-1631"];
m0_674 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateInstruction(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string)", file="DefaultValueHandlingTests.cs", label="IXmlNode instruction = document.CreateProcessingInstruction(propertyName.Substring(1), reader.Value.ToString())", span="1635-1635"];
m0_675 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateInstruction(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string)", file="DefaultValueHandlingTests.cs", label="currentNode.AppendChild(instruction)", span="1636-1636"];
m0_657 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateInstruction(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string)", file="DefaultValueHandlingTests.cs", label="string version = null", span="1606-1606"];
m0_658 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateInstruction(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string)", file="DefaultValueHandlingTests.cs", label="string encoding = null", span="1607-1607"];
m0_659 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateInstruction(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string)", file="DefaultValueHandlingTests.cs", label="string standalone = null", span="1608-1608"];
m0_662 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateInstruction(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string)", file="DefaultValueHandlingTests.cs", label="''@version''", span="1613-1613"];
m0_665 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateInstruction(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string)", file="DefaultValueHandlingTests.cs", label="''@encoding''", span="1617-1617"];
m0_668 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateInstruction(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string)", file="DefaultValueHandlingTests.cs", label="''@standalone''", span="1621-1621"];
m0_676 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateInstruction(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string)", file="DefaultValueHandlingTests.cs", label="Exit Newtonsoft.Json.Converters.XmlNodeConverter.CreateInstruction(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string)", span="1602-1602"];
m0_227 [cluster="Newtonsoft.Json.Converters.XObjectWrapper.AppendChild(Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Converters.XObjectWrapper.AppendChild(Newtonsoft.Json.Converters.IXmlNode)", span="766-766"];
m0_228 [cluster="Newtonsoft.Json.Converters.XObjectWrapper.AppendChild(Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="throw new InvalidOperationException();", span="768-768"];
m0_229 [cluster="Newtonsoft.Json.Converters.XObjectWrapper.AppendChild(Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="Exit Newtonsoft.Json.Converters.XObjectWrapper.AppendChild(Newtonsoft.Json.Converters.IXmlNode)", span="766-766"];
m0_8 [cluster="Unk.AreEqual", file="DefaultValueHandlingTests.cs", label="Entry Unk.AreEqual", span=""];
m0_9 [cluster="Newtonsoft.Json.Tests.Converters.RegexConverterTests.SerializeToBson()", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Converters.RegexConverterTests.SerializeToBson()", span="46-46"];
m0_10 [cluster="Newtonsoft.Json.Tests.Converters.RegexConverterTests.SerializeToBson()", color=green, community=0, file="DefaultValueHandlingTests.cs", label="Regex regex = new Regex(''abc'', RegexOptions.IgnoreCase | RegexOptions.CultureInvariant)", prediction=0, span="48-48"];
m0_19 [cluster="Newtonsoft.Json.Tests.Converters.RegexConverterTests.SerializeToBson()", file="DefaultValueHandlingTests.cs", label="Exit Newtonsoft.Json.Tests.Converters.RegexConverterTests.SerializeToBson()", span="46-46"];
m0_15 [cluster="Unk.CreateCDataSection", color=green, community=0, file="DefaultValueHandlingTests.cs", label="Entry Unk.CreateCDataSection", prediction=0, span=""];
m0_12 [cluster="Newtonsoft.Json.Converters.XmlDocumentWrapper.CreateCDataSection(string)", color=green, community=0, file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Converters.XmlDocumentWrapper.CreateCDataSection(string)", prediction=0, span="67-67"];
m0_17 [cluster="Newtonsoft.Json.Converters.XmlDocumentWrapper.CreateWhitespace(string)", color=green, community=0, file="DefaultValueHandlingTests.cs", label="return new XmlNodeWrapper(_document.CreateWhitespace(text));", prediction=0, span="74-74"];
m0_13 [cluster="Newtonsoft.Json.Converters.XmlDocumentWrapper.CreateCDataSection(string)", color=green, community=0, file="DefaultValueHandlingTests.cs", label="return new XmlNodeWrapper(_document.CreateCDataSection(data));", prediction=0, span="69-69"];
m0_14 [cluster="Newtonsoft.Json.Converters.XmlDocumentWrapper.CreateCDataSection(string)", color=green, community=0, file="DefaultValueHandlingTests.cs", label="Exit Newtonsoft.Json.Converters.XmlDocumentWrapper.CreateCDataSection(string)", prediction=6, span="67-67"];
m0_16 [cluster="Newtonsoft.Json.Converters.XmlDocumentWrapper.CreateWhitespace(string)", color=green, community=0, file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Converters.XmlDocumentWrapper.CreateWhitespace(string)", prediction=7, span="72-72"];
m0_18 [cluster="Newtonsoft.Json.Converters.XmlDocumentWrapper.CreateWhitespace(string)", color=green, community=0, file="DefaultValueHandlingTests.cs", label="Exit Newtonsoft.Json.Converters.XmlDocumentWrapper.CreateWhitespace(string)", prediction=7, span="72-72"];
m0_0 [cluster="Newtonsoft.Json.Tests.Converters.RegexConverterTests.SerializeToText()", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Converters.RegexConverterTests.SerializeToText()", span="33-33"];
m0_1 [cluster="Newtonsoft.Json.Tests.Converters.RegexConverterTests.SerializeToText()", file="DefaultValueHandlingTests.cs", label="Regex regex = new Regex(''abc'', RegexOptions.IgnoreCase | RegexOptions.CultureInvariant)", span="35-35"];
m0_2 [cluster="Newtonsoft.Json.Tests.Converters.RegexConverterTests.SerializeToText()", file="DefaultValueHandlingTests.cs", label="string json = JsonConvert.SerializeObject(regex, Formatting.Indented, new RegexConverter())", span="37-37"];
m0_550 [cluster="Newtonsoft.Json.Utilities.MiscellaneousUtils.GetPrefix(string)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Utilities.MiscellaneousUtils.GetPrefix(string)", span="94-94"];
m0_28 [cluster="Newtonsoft.Json.Tests.Converters.RegexConverterTests.DeserializeFromText()", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Converters.RegexConverterTests.DeserializeFromText()", span="64-64"];
m0_582 [cluster="System.Convert.ToDouble(object, System.IFormatProvider)", file="DefaultValueHandlingTests.cs", label="Entry System.Convert.ToDouble(object, System.IFormatProvider)", span="0-0"];
m0_113 [cluster="Newtonsoft.Json.Converters.IXmlDocument.CreateElement(string, string)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Converters.IXmlDocument.CreateElement(string, string)", span="341-341"];
m0_114 [cluster="Newtonsoft.Json.Converters.IXmlDocument.CreateElement(string, string)", file="DefaultValueHandlingTests.cs", label="Exit Newtonsoft.Json.Converters.IXmlDocument.CreateElement(string, string)", span="341-341"];
m0_145 [cluster="XCData.cstr", file="DefaultValueHandlingTests.cs", label="Entry XCData.cstr", span=""];
m0_364 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", file="DefaultValueHandlingTests.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0"];
m0_152 [cluster="Newtonsoft.Json.Converters.XDocumentWrapper.CreateXmlDeclaration(string, string, string)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Converters.XDocumentWrapper.CreateXmlDeclaration(string, string, string)", span="505-505"];
m0_153 [cluster="Newtonsoft.Json.Converters.XDocumentWrapper.CreateXmlDeclaration(string, string, string)", file="DefaultValueHandlingTests.cs", label="return new XDeclarationWrapper(new XDeclaration(version, encoding, standalone));", span="507-507"];
m0_154 [cluster="Newtonsoft.Json.Converters.XDocumentWrapper.CreateXmlDeclaration(string, string, string)", file="DefaultValueHandlingTests.cs", label="Exit Newtonsoft.Json.Converters.XDocumentWrapper.CreateXmlDeclaration(string, string, string)", span="505-505"];
m0_744 [cluster="string.Substring(int, int)", file="DefaultValueHandlingTests.cs", label="Entry string.Substring(int, int)", span="0-0"];
m0_3 [cluster="Newtonsoft.Json.Tests.Converters.RegexConverterTests.SerializeToText()", file="DefaultValueHandlingTests.cs", label="Assert.AreEqual(@''{\r\n  ''''Pattern'''': ''''abc'''',\r\n  ''''Options'''': 513\r\n}'', json)", span="39-42"];
m0_4 [cluster="Newtonsoft.Json.Tests.Converters.RegexConverterTests.SerializeToText()", file="DefaultValueHandlingTests.cs", label="Exit Newtonsoft.Json.Tests.Converters.RegexConverterTests.SerializeToText()", span="33-33"];
m0_5 [cluster="System.Text.RegularExpressions.Regex.Regex(string, System.Text.RegularExpressions.RegexOptions)", file="DefaultValueHandlingTests.cs", label="Entry System.Text.RegularExpressions.Regex.Regex(string, System.Text.RegularExpressions.RegexOptions)", span="0-0"];
m0_493 [cluster="Newtonsoft.Json.JsonSerializationException.JsonSerializationException(string)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.JsonSerializationException.JsonSerializationException(string)", span="52-52"];
m0_20 [cluster="System.IO.MemoryStream.MemoryStream()", file="DefaultValueHandlingTests.cs", label="Entry System.IO.MemoryStream.MemoryStream()", span="0-0"];
m0_22 [cluster="Newtonsoft.Json.JsonSerializer.JsonSerializer()", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.JsonSerializer.JsonSerializer()", span="327-327"];
m0_6 [cluster="Newtonsoft.Json.Converters.RegexConverter.RegexConverter()", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Converters.RegexConverter.RegexConverter()", span="10-10"];
m0_500 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeValue(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, string, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeValue(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, string, Newtonsoft.Json.Converters.IXmlNode)", span="1304-1304"];
m0_501 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeValue(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, string, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label=propertyName, span="1306-1306"];
m0_503 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeValue(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, string, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="currentNode.AppendChild(document.CreateTextNode(reader.Value.ToString()))", span="1309-1309"];
m0_505 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeValue(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, string, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="currentNode.AppendChild(document.CreateCDataSection(reader.Value.ToString()))", span="1312-1312"];
m0_507 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeValue(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, string, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="currentNode.AppendChild(document.CreateWhitespace(reader.Value.ToString()))", span="1315-1315"];
m0_509 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeValue(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, string, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="currentNode.AppendChild(document.CreateSignificantWhitespace(reader.Value.ToString()))", span="1318-1318"];
m0_510 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeValue(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, string, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="!string.IsNullOrEmpty(propertyName) && propertyName[0] == '?'", span="1322-1322"];
m0_511 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeValue(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, string, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="CreateInstruction(reader, document, currentNode, propertyName)", span="1324-1324"];
m0_512 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeValue(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, string, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="string.Equals(propertyName, ''!DOCTYPE'', StringComparison.OrdinalIgnoreCase)", span="1326-1326"];
m0_513 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeValue(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, string, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="CreateDocumentType(reader, document, currentNode)", span="1328-1328"];
m0_514 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeValue(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, string, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="reader.TokenType == JsonToken.StartArray", span="1332-1332"];
m0_515 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeValue(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, string, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="ReadArrayElements(reader, document, propertyName, currentNode, manager)", span="1335-1335"];
m0_517 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeValue(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, string, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="ReadElement(reader, document, currentNode, propertyName, manager)", span="1341-1341"];
m0_502 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeValue(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, string, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label=TextName, span="1308-1308"];
m0_504 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeValue(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, string, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label=CDataName, span="1311-1311"];
m0_506 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeValue(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, string, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label=WhitespaceName, span="1314-1314"];
m0_508 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeValue(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, string, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label=SignificantWhitespaceName, span="1317-1317"];
m0_516 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeValue(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, string, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="return;", span="1336-1336"];
m0_518 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeValue(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, string, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="Exit Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeValue(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, string, Newtonsoft.Json.Converters.IXmlNode)", span="1304-1304"];
m0_583 [cluster="System.Convert.ToBoolean(object, System.IFormatProvider)", file="DefaultValueHandlingTests.cs", label="Entry System.Convert.ToBoolean(object, System.IFormatProvider)", span="0-0"];
m0_195 [cluster="Newtonsoft.Json.Converters.XCommentWrapper.XCommentWrapper(XComment)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Converters.XCommentWrapper.XCommentWrapper(XComment)", span="605-605"];
m0_196 [cluster="Newtonsoft.Json.Converters.XCommentWrapper.XCommentWrapper(XComment)", file="DefaultValueHandlingTests.cs", label="Exit Newtonsoft.Json.Converters.XCommentWrapper.XCommentWrapper(XComment)", span="605-605"];
m0_88 [cluster="Newtonsoft.Json.Converters.XmlNodeWrapper.AppendChild(Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Converters.XmlNodeWrapper.AppendChild(Newtonsoft.Json.Converters.IXmlNode)", span="312-312"];
m0_89 [cluster="Newtonsoft.Json.Converters.XmlNodeWrapper.AppendChild(Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="XmlNodeWrapper xmlNodeWrapper = (XmlNodeWrapper) newChild", span="314-314"];
m0_328 [cluster="Unk.ToBoolean", file="DefaultValueHandlingTests.cs", label="Entry Unk.ToBoolean", span=""];
m0_94 [cluster="Unk.AppendChild", file="DefaultValueHandlingTests.cs", label="Entry Unk.AppendChild", span=""];
m0_585 [cluster="Newtonsoft.Json.Utilities.DateTimeUtils.ToSerializationMode(System.DateTimeKind)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Utilities.DateTimeUtils.ToSerializationMode(System.DateTimeKind)", span="60-60"];
m0_37 [cluster="Unk.CreateProcessingInstruction", color=green, community=0, file="DefaultValueHandlingTests.cs", label="Entry Unk.CreateProcessingInstruction", prediction=9, span=""];
m0_38 [cluster="Newtonsoft.Json.Converters.XmlDocumentWrapper.CreateElement(string)", color=green, community=0, file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Converters.XmlDocumentWrapper.CreateElement(string)", prediction=0, span="97-97"];
m0_39 [cluster="Newtonsoft.Json.Converters.XmlDocumentWrapper.CreateElement(string)", color=green, community=0, file="DefaultValueHandlingTests.cs", label="return new XmlElementWrapper(_document.CreateElement(elementName));", prediction=0, span="99-99"];
m0_41 [cluster="XmlElementWrapper.cstr", color=green, community=0, file="DefaultValueHandlingTests.cs", label="Entry XmlElementWrapper.cstr", prediction=0, span=""];
m0_40 [cluster="Newtonsoft.Json.Converters.XmlDocumentWrapper.CreateElement(string)", color=green, community=0, file="DefaultValueHandlingTests.cs", label="Exit Newtonsoft.Json.Converters.XmlDocumentWrapper.CreateElement(string)", prediction=13, span="97-97"];
m0_42 [cluster="Unk.CreateElement", color=green, community=0, file="DefaultValueHandlingTests.cs", label="Entry Unk.CreateElement", prediction=14, span=""];
m0_43 [cluster="Newtonsoft.Json.Converters.XmlDocumentWrapper.CreateElement(string, string)", color=green, community=0, file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Converters.XmlDocumentWrapper.CreateElement(string, string)", prediction=0, span="102-102"];
m0_44 [cluster="Newtonsoft.Json.Converters.XmlDocumentWrapper.CreateElement(string, string)", file="DefaultValueHandlingTests.cs", label="return new XmlElementWrapper(_document.CreateElement(qualifiedName, namespaceUri));", span="104-104"];
m0_48 [cluster="Newtonsoft.Json.Converters.XmlDocumentWrapper.CreateAttribute(string, string)", file="DefaultValueHandlingTests.cs", label="attribute.Value = value", span="110-110"];
m0_168 [cluster="Newtonsoft.Json.Converters.XElementWrapper.XElementWrapper(XElement)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Converters.XElementWrapper.XElementWrapper(XElement)", span="824-824"];
m0_232 [cluster="Newtonsoft.Json.Converters.XElementWrapper.XElementWrapper(XElement)", file="DefaultValueHandlingTests.cs", label="Exit Newtonsoft.Json.Converters.XElementWrapper.XElementWrapper(XElement)", span="824-824"];
m0_288 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ResolveFullName(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Converters.XmlNodeConverter.ResolveFullName(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", span="970-970"];
m0_289 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ResolveFullName(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="string prefix = (node.NamespaceUri == null || (node.LocalName == ''xmlns'' && node.NamespaceUri == ''http://www.w3.org/2000/xmlns/''))\r\n                ? null\r\n                : manager.LookupPrefix(node.NamespaceUri)", span="972-974"];
m0_291 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ResolveFullName(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="return prefix + '':'' + node.LocalName;", span="977-977"];
m0_292 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ResolveFullName(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="return node.LocalName;", span="979-979"];
m0_290 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ResolveFullName(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="!string.IsNullOrEmpty(prefix)", span="976-976"];
m0_293 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ResolveFullName(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="Exit Newtonsoft.Json.Converters.XmlNodeConverter.ResolveFullName(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", span="970-970"];
m0_267 [cluster="System.ArgumentException.ArgumentException(string, string)", file="DefaultValueHandlingTests.cs", label="Entry System.ArgumentException.ArgumentException(string, string)", span="0-0"];
m0_128 [cluster="Newtonsoft.Json.Converters.XDocumentTypeWrapper.XDocumentTypeWrapper(XDocumentType)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Converters.XDocumentTypeWrapper.XDocumentTypeWrapper(XDocumentType)", span="423-423"];
m0_129 [cluster="Newtonsoft.Json.Converters.XDocumentTypeWrapper.XDocumentTypeWrapper(XDocumentType)", file="DefaultValueHandlingTests.cs", label="_documentType = documentType", span="426-426"];
m0_130 [cluster="Newtonsoft.Json.Converters.XDocumentTypeWrapper.XDocumentTypeWrapper(XDocumentType)", file="DefaultValueHandlingTests.cs", label="Exit Newtonsoft.Json.Converters.XDocumentTypeWrapper.XDocumentTypeWrapper(XDocumentType)", span="423-423"];
m0_453 [cluster="Newtonsoft.Json.JsonWriter.WriteNull()", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.JsonWriter.WriteNull()", span="781-781"];
m0_241 [cluster="Newtonsoft.Json.Converters.XElementWrapper.GetPrefixOfNamespace(string)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Converters.XElementWrapper.GetPrefixOfNamespace(string)", span="856-856"];
m0_242 [cluster="Newtonsoft.Json.Converters.XElementWrapper.GetPrefixOfNamespace(string)", file="DefaultValueHandlingTests.cs", label="return Element.GetPrefixOfNamespace(namespaceUri);", span="858-858"];
m0_243 [cluster="Newtonsoft.Json.Converters.XElementWrapper.GetPrefixOfNamespace(string)", file="DefaultValueHandlingTests.cs", label="Exit Newtonsoft.Json.Converters.XElementWrapper.GetPrefixOfNamespace(string)", span="856-856"];
m0_449 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ValueAttributes(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Converters.IXmlNode>)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Converters.XmlNodeConverter.ValueAttributes(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Converters.IXmlNode>)", span="1763-1763"];
m0_745 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ValueAttributes(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Converters.IXmlNode>)", file="DefaultValueHandlingTests.cs", label="return c.Where(a => a.NamespaceUri != JsonNamespaceUri);", span="1765-1765"];
m0_746 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ValueAttributes(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Converters.IXmlNode>)", file="DefaultValueHandlingTests.cs", label="Exit Newtonsoft.Json.Converters.XmlNodeConverter.ValueAttributes(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Converters.IXmlNode>)", span="1763-1763"];
m0_49 [cluster="Newtonsoft.Json.Converters.XmlDocumentWrapper.CreateAttribute(string, string)", file="DefaultValueHandlingTests.cs", label="return attribute;", span="112-112"];
m0_55 [cluster="Newtonsoft.Json.Converters.XmlDocumentWrapper.CreateAttribute(string, string, string)", file="DefaultValueHandlingTests.cs", label="return attribute;", span="120-120"];
m0_52 [cluster="Newtonsoft.Json.Converters.XmlDocumentWrapper.CreateAttribute(string, string, string)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Converters.XmlDocumentWrapper.CreateAttribute(string, string, string)", span="115-115"];
m0_53 [cluster="Newtonsoft.Json.Converters.XmlDocumentWrapper.CreateAttribute(string, string, string)", file="DefaultValueHandlingTests.cs", label="XmlNodeWrapper attribute = new XmlNodeWrapper(_document.CreateAttribute(qualifiedName, namespaceUri))", span="117-117"];
m0_54 [cluster="Newtonsoft.Json.Converters.XmlDocumentWrapper.CreateAttribute(string, string, string)", file="DefaultValueHandlingTests.cs", label="attribute.Value = value", span="118-118"];
m0_50 [cluster="Newtonsoft.Json.Converters.XmlDocumentWrapper.CreateAttribute(string, string)", file="DefaultValueHandlingTests.cs", label="Exit Newtonsoft.Json.Converters.XmlDocumentWrapper.CreateAttribute(string, string)", span="107-107"];
m0_56 [cluster="Newtonsoft.Json.Converters.XmlDocumentWrapper.CreateAttribute(string, string, string)", file="DefaultValueHandlingTests.cs", label="Exit Newtonsoft.Json.Converters.XmlDocumentWrapper.CreateAttribute(string, string, string)", span="115-115"];
m0_285 [cluster="System.Collections.Generic.List<T>.Reverse()", file="DefaultValueHandlingTests.cs", label="Entry System.Collections.Generic.List<T>.Reverse()", span="0-0"];
m0_103 [cluster="Newtonsoft.Json.Converters.IXmlDocument.CreateSignificantWhitespace(string)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Converters.IXmlDocument.CreateSignificantWhitespace(string)", span="336-336"];
m0_104 [cluster="Newtonsoft.Json.Converters.IXmlDocument.CreateSignificantWhitespace(string)", file="DefaultValueHandlingTests.cs", label="Exit Newtonsoft.Json.Converters.IXmlDocument.CreateSignificantWhitespace(string)", span="336-336"];
m0_587 [cluster="Newtonsoft.Json.JsonSerializationException.Create(Newtonsoft.Json.JsonReader, string)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.JsonSerializationException.Create(Newtonsoft.Json.JsonReader, string)", span="82-82"];
m0_192 [cluster="Newtonsoft.Json.Converters.XContainerWrapper.AppendChild(Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Converters.XContainerWrapper.AppendChild(Newtonsoft.Json.Converters.IXmlNode)", span="712-712"];
m0_220 [cluster="Newtonsoft.Json.Converters.XContainerWrapper.AppendChild(Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="Container.Add(newChild.WrappedNode)", span="714-714"];
m0_222 [cluster="Newtonsoft.Json.Converters.XContainerWrapper.AppendChild(Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="return newChild;", span="717-717"];
m0_221 [cluster="Newtonsoft.Json.Converters.XContainerWrapper.AppendChild(Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="_childNodes = null", span="715-715"];
m0_223 [cluster="Newtonsoft.Json.Converters.XContainerWrapper.AppendChild(Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="Exit Newtonsoft.Json.Converters.XContainerWrapper.AppendChild(Newtonsoft.Json.Converters.IXmlNode)", span="712-712"];
m0_586 [cluster="string.FormatWith(System.IFormatProvider, object)", file="DefaultValueHandlingTests.cs", label="Entry string.FormatWith(System.IFormatProvider, object)", span="47-47"];
m0_323 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.IsArray(Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Converters.XmlNodeConverter.IsArray(Newtonsoft.Json.Converters.IXmlNode)", span="1014-1014"];
m0_324 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.IsArray(Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="IXmlNode jsonArrayAttribute = (node.Attributes != null)\r\n                ? node.Attributes.SingleOrDefault(a => a.LocalName == ''Array'' && a.NamespaceUri == JsonNamespaceUri)\r\n                : null", span="1016-1018"];
m0_325 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.IsArray(Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="return (jsonArrayAttribute != null && XmlConvert.ToBoolean(jsonArrayAttribute.Value));", span="1020-1020"];
m0_326 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.IsArray(Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="Exit Newtonsoft.Json.Converters.XmlNodeConverter.IsArray(Newtonsoft.Json.Converters.IXmlNode)", span="1014-1014"];
m0_160 [cluster="Newtonsoft.Json.Converters.XDocumentWrapper.CreateProcessingInstruction(string, string)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Converters.XDocumentWrapper.CreateProcessingInstruction(string, string)", span="515-515"];
m0_161 [cluster="Newtonsoft.Json.Converters.XDocumentWrapper.CreateProcessingInstruction(string, string)", file="DefaultValueHandlingTests.cs", label="return new XProcessingInstructionWrapper(new XProcessingInstruction(target, data));", span="517-517"];
m0_162 [cluster="Newtonsoft.Json.Converters.XDocumentWrapper.CreateProcessingInstruction(string, string)", file="DefaultValueHandlingTests.cs", label="Exit Newtonsoft.Json.Converters.XDocumentWrapper.CreateProcessingInstruction(string, string)", span="515-515"];
m0_23 [cluster="System.Collections.ObjectModel.Collection<T>.Add(T)", file="DefaultValueHandlingTests.cs", label="Entry System.Collections.ObjectModel.Collection<T>.Add(T)", span="0-0"];
m0_296 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.GetPropertyName(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Converters.XmlNodeConverter.GetPropertyName(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", span="982-982"];
m0_297 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.GetPropertyName(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="node.NodeType", span="984-984"];
m0_299 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.GetPropertyName(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="node.NamespaceUri == JsonNamespaceUri", span="987-987"];
m0_300 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.GetPropertyName(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="return ''$'' + node.LocalName;", span="988-988"];
m0_301 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.GetPropertyName(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="return ''@'' + ResolveFullName(node, manager);", span="990-990"];
m0_307 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.GetPropertyName(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="return ResolveFullName(node, manager);", span="996-996"];
m0_309 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.GetPropertyName(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="return ''?'' + ResolveFullName(node, manager);", span="998-998"];
m0_311 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.GetPropertyName(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="return ''!'' + ResolveFullName(node, manager);", span="1000-1000"];
m0_320 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.GetPropertyName(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="throw new JsonSerializationException(''Unexpected XmlNodeType when getting node name: '' + node.NodeType);", span="1010-1010"];
m0_298 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.GetPropertyName(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="XmlNodeType.Attribute", span="986-986"];
m0_302 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.GetPropertyName(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="XmlNodeType.CDATA", span="991-991"];
m0_304 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.GetPropertyName(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="XmlNodeType.Comment", span="993-993"];
m0_306 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.GetPropertyName(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="XmlNodeType.Element", span="995-995"];
m0_308 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.GetPropertyName(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="XmlNodeType.ProcessingInstruction", span="997-997"];
m0_310 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.GetPropertyName(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="XmlNodeType.DocumentType", span="999-999"];
m0_312 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.GetPropertyName(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="XmlNodeType.XmlDeclaration", span="1001-1001"];
m0_314 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.GetPropertyName(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="XmlNodeType.SignificantWhitespace", span="1003-1003"];
m0_316 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.GetPropertyName(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="XmlNodeType.Text", span="1005-1005"];
m0_318 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.GetPropertyName(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="XmlNodeType.Whitespace", span="1007-1007"];
m0_303 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.GetPropertyName(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="return CDataName;", span="992-992"];
m0_305 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.GetPropertyName(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="return CommentName;", span="994-994"];
m0_313 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.GetPropertyName(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="return DeclarationName;", span="1002-1002"];
m0_315 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.GetPropertyName(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="return SignificantWhitespaceName;", span="1004-1004"];
m0_317 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.GetPropertyName(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="return TextName;", span="1006-1006"];
m0_319 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.GetPropertyName(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="return WhitespaceName;", span="1008-1008"];
m0_321 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.GetPropertyName(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="Exit Newtonsoft.Json.Converters.XmlNodeConverter.GetPropertyName(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", span="982-982"];
m0_497 [cluster="Newtonsoft.Json.JsonReader.Read()", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.JsonReader.Read()", span="365-365"];
m0_165 [cluster="Newtonsoft.Json.Converters.XDocumentWrapper.CreateElement(string)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Converters.XDocumentWrapper.CreateElement(string)", span="520-520"];
m0_166 [cluster="Newtonsoft.Json.Converters.XDocumentWrapper.CreateElement(string)", file="DefaultValueHandlingTests.cs", label="return new XElementWrapper(new XElement(elementName));", span="522-522"];
m0_167 [cluster="Newtonsoft.Json.Converters.XDocumentWrapper.CreateElement(string)", file="DefaultValueHandlingTests.cs", label="Exit Newtonsoft.Json.Converters.XDocumentWrapper.CreateElement(string)", span="520-520"];
m0_164 [cluster="XProcessingInstruction.cstr", file="DefaultValueHandlingTests.cs", label="Entry XProcessingInstruction.cstr", span=""];
m0_459 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", span="1238-1238"];
m0_460 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs", label="reader.TokenType == JsonToken.Null", span="1240-1240"];
m0_465 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs", label="typeof(XObject).IsAssignableFrom(objectType)", span="1248-1248"];
m0_466 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs", label="objectType != typeof(XDocument) && objectType != typeof(XElement)", span="1250-1250"];
m0_471 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs", label="typeof(XmlNode).IsAssignableFrom(objectType)", span="1259-1259"];
m0_472 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs", label="objectType != typeof(XmlDocument)", span="1261-1261"];
m0_479 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs", label="throw new JsonSerializationException(''Unexpected type when converting XML: '' + objectType);", span="1274-1274"];
m0_480 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs", label="reader.TokenType != JsonToken.StartObject", span="1276-1276"];
m0_483 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs", label="ReadElement(reader, document, rootNode, DeserializeRootElementName, manager)", span="1283-1283"];
m0_484 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs", label="reader.Read()", span="1287-1287"];
m0_485 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs", label="DeserializeNode(reader, document, manager, rootNode)", span="1288-1288"];
m0_486 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs", label="objectType == typeof(XElement)", span="1292-1292"];
m0_461 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs", label="return null;", span="1241-1241"];
m0_462 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs", label="XmlNamespaceManager manager = new XmlNamespaceManager(new NameTable())", span="1243-1243"];
m0_463 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs", label="IXmlDocument document = null", span="1244-1244"];
m0_464 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs", label="IXmlNode rootNode = null", span="1245-1245"];
m0_478 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs", label="document == null || rootNode == null", span="1273-1273"];
m0_487 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs", label="XElement element = (XElement)document.DocumentElement.WrappedNode", span="1294-1294"];
m0_490 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs", label="return document.WrappedNode;", span="1301-1301"];
m0_467 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs", label="throw new JsonSerializationException(''XmlNodeConverter only supports deserializing XDocument or XElement.'');", span="1251-1251"];
m0_468 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs", label="XDocument d = new XDocument()", span="1253-1253"];
m0_469 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs", label="document = new XDocumentWrapper(d)", span="1254-1254"];
m0_470 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs", label="rootNode = document", span="1255-1255"];
m0_473 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs", label="throw new JsonSerializationException(''XmlNodeConverter only supports deserializing XmlDocuments'');", span="1262-1262"];
m0_474 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs", label="XmlDocument d = new XmlDocument()", span="1264-1264"];
m0_475 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs", label="d.XmlResolver = null", span="1266-1266"];
m0_476 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs", label="document = new XmlDocumentWrapper(d)", span="1268-1268"];
m0_477 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs", label="rootNode = document", span="1269-1269"];
m0_481 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs", label="throw new JsonSerializationException(''XmlNodeConverter can only convert JSON that begins with an object.'');", span="1277-1277"];
m0_482 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs", label="!string.IsNullOrEmpty(DeserializeRootElementName)", span="1279-1279"];
m0_488 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs", label="element.Remove()", span="1295-1295"];
m0_489 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs", label="return element;", span="1297-1297"];
m0_491 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs", label="Exit Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", span="1238-1238"];
m0_556 [cluster="Unk.RemoveNamespace", file="DefaultValueHandlingTests.cs", label="Entry Unk.RemoveNamespace", span=""];
m0_142 [cluster="Newtonsoft.Json.Converters.XDocumentWrapper.CreateCDataSection(string)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Converters.XDocumentWrapper.CreateCDataSection(string)", span="490-490"];
m0_143 [cluster="Newtonsoft.Json.Converters.XDocumentWrapper.CreateCDataSection(string)", file="DefaultValueHandlingTests.cs", label="return new XObjectWrapper(new XCData(data));", span="492-492"];
m0_144 [cluster="Newtonsoft.Json.Converters.XDocumentWrapper.CreateCDataSection(string)", file="DefaultValueHandlingTests.cs", label="Exit Newtonsoft.Json.Converters.XDocumentWrapper.CreateCDataSection(string)", span="490-490"];
m0_454 [cluster="Unk.PopScope", file="DefaultValueHandlingTests.cs", label="Entry Unk.PopScope", span=""];
m0_255 [cluster="XmlNamespaceManager.cstr", file="DefaultValueHandlingTests.cs", label="Entry XmlNamespaceManager.cstr", span=""];
m0_284 [cluster="System.Collections.Generic.List<T>.Add(T)", file="DefaultValueHandlingTests.cs", label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0"];
m0_455 [cluster="Newtonsoft.Json.JsonWriter.WriteComment(string)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.JsonWriter.WriteComment(string)", span="1246-1246"];
m0_176 [cluster="Newtonsoft.Json.Converters.XDocumentWrapper.CreateAttribute(string, string)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Converters.XDocumentWrapper.CreateAttribute(string, string)", span="531-531"];
m0_177 [cluster="Newtonsoft.Json.Converters.XDocumentWrapper.CreateAttribute(string, string)", file="DefaultValueHandlingTests.cs", label="return new XAttributeWrapper(new XAttribute(name, value));", span="533-533"];
m0_178 [cluster="Newtonsoft.Json.Converters.XDocumentWrapper.CreateAttribute(string, string)", file="DefaultValueHandlingTests.cs", label="Exit Newtonsoft.Json.Converters.XDocumentWrapper.CreateAttribute(string, string)", span="531-531"];
m0_451 [cluster="Newtonsoft.Json.JsonWriter.WriteValue(string)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.JsonWriter.WriteValue(string)", span="819-819"];
m0_362 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="DefaultValueHandlingTests.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m0_523 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadArrayElements(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, string, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Converters.XmlNodeConverter.ReadArrayElements(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, string, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", span="1466-1466"];
m0_588 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadArrayElements(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, string, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="string elementPrefix = MiscellaneousUtils.GetPrefix(propertyName)", span="1468-1468"];
m0_589 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadArrayElements(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, string, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="IXmlElement nestedArrayElement = CreateElement(propertyName, document, elementPrefix, manager)", span="1470-1470"];
m0_590 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadArrayElements(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, string, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="currentNode.AppendChild(nestedArrayElement)", span="1472-1472"];
m0_592 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadArrayElements(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, string, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="reader.Read() && reader.TokenType != JsonToken.EndArray", span="1475-1475"];
m0_593 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadArrayElements(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, string, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="DeserializeValue(reader, document, manager, propertyName, nestedArrayElement)", span="1477-1477"];
m0_596 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadArrayElements(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, string, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="AddJsonArrayAttribute(nestedArrayElement, document)", span="1483-1483"];
m0_598 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadArrayElements(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, string, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="IXmlElement arrayElement = nestedArrayElement.ChildNodes.OfType<IXmlElement>().Single(n => n.LocalName == propertyName)", span="1488-1488"];
m0_599 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadArrayElements(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, string, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="AddJsonArrayAttribute(arrayElement, document)", span="1489-1489"];
m0_591 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadArrayElements(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, string, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="int count = 0", span="1474-1474"];
m0_594 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadArrayElements(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, string, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="count++", span="1478-1478"];
m0_597 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadArrayElements(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, string, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="count == 1 && WriteArrayAttribute", span="1486-1486"];
m0_595 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadArrayElements(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, string, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label=WriteArrayAttribute, span="1481-1481"];
m0_600 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadArrayElements(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, string, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="Exit Newtonsoft.Json.Converters.XmlNodeConverter.ReadArrayElements(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, string, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", span="1466-1466"];
m0_125 [cluster="Newtonsoft.Json.Converters.XDeclarationWrapper.XDeclarationWrapper(XDeclaration)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Converters.XDeclarationWrapper.XDeclarationWrapper(XDeclaration)", span="390-390"];
m0_126 [cluster="Newtonsoft.Json.Converters.XDeclarationWrapper.XDeclarationWrapper(XDeclaration)", file="DefaultValueHandlingTests.cs", label="Declaration = declaration", span="393-393"];
m0_127 [cluster="Newtonsoft.Json.Converters.XDeclarationWrapper.XDeclarationWrapper(XDeclaration)", file="DefaultValueHandlingTests.cs", label="Exit Newtonsoft.Json.Converters.XDeclarationWrapper.XDeclarationWrapper(XDeclaration)", span="390-390"];
m0_365 [cluster="Newtonsoft.Json.JsonWriter.WritePropertyName(string)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.JsonWriter.WritePropertyName(string)", span="407-407"];
m0_119 [cluster="Newtonsoft.Json.Converters.IXmlElement.SetAttributeNode(Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Converters.IXmlElement.SetAttributeNode(Newtonsoft.Json.Converters.IXmlNode)", span="365-365"];
m0_120 [cluster="Newtonsoft.Json.Converters.IXmlElement.SetAttributeNode(Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="Exit Newtonsoft.Json.Converters.IXmlElement.SetAttributeNode(Newtonsoft.Json.Converters.IXmlNode)", span="365-365"];
m0_136 [cluster="XObjectWrapper.cstr", file="DefaultValueHandlingTests.cs", label="Entry XObjectWrapper.cstr", span=""];
m0_163 [cluster="Newtonsoft.Json.Converters.XProcessingInstructionWrapper.XProcessingInstructionWrapper(XProcessingInstruction)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Converters.XProcessingInstructionWrapper.XProcessingInstructionWrapper(XProcessingInstruction)", span="635-635"];
m0_197 [cluster="Newtonsoft.Json.Converters.XProcessingInstructionWrapper.XProcessingInstructionWrapper(XProcessingInstruction)", file="DefaultValueHandlingTests.cs", label="Exit Newtonsoft.Json.Converters.XProcessingInstructionWrapper.XProcessingInstructionWrapper(XProcessingInstruction)", span="635-635"];
m0_146 [cluster="Newtonsoft.Json.Converters.XDocumentWrapper.CreateWhitespace(string)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Converters.XDocumentWrapper.CreateWhitespace(string)", span="495-495"];
m0_147 [cluster="Newtonsoft.Json.Converters.XDocumentWrapper.CreateWhitespace(string)", file="DefaultValueHandlingTests.cs", label="return new XObjectWrapper(new XText(text));", span="497-497"];
m0_148 [cluster="Newtonsoft.Json.Converters.XDocumentWrapper.CreateWhitespace(string)", file="DefaultValueHandlingTests.cs", label="Exit Newtonsoft.Json.Converters.XDocumentWrapper.CreateWhitespace(string)", span="495-495"];
m0_580 [cluster="Unk.ToString", file="DefaultValueHandlingTests.cs", label="Entry Unk.ToString", span=""];
m0_654 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.IsNamespaceAttribute(string, out string)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Converters.XmlNodeConverter.IsNamespaceAttribute(string, out string)", span="1744-1744"];
m0_733 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.IsNamespaceAttribute(string, out string)", file="DefaultValueHandlingTests.cs", label="attributeName.StartsWith(''xmlns'', StringComparison.Ordinal)", span="1746-1746"];
m0_734 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.IsNamespaceAttribute(string, out string)", file="DefaultValueHandlingTests.cs", label="attributeName.Length == 5", span="1748-1748"];
m0_737 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.IsNamespaceAttribute(string, out string)", file="DefaultValueHandlingTests.cs", label="attributeName[5] == ':'", span="1753-1753"];
m0_738 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.IsNamespaceAttribute(string, out string)", file="DefaultValueHandlingTests.cs", label="prefix = attributeName.Substring(6, attributeName.Length - 6)", span="1755-1755"];
m0_740 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.IsNamespaceAttribute(string, out string)", file="DefaultValueHandlingTests.cs", label="prefix = null", span="1759-1759"];
m0_735 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.IsNamespaceAttribute(string, out string)", file="DefaultValueHandlingTests.cs", label="prefix = string.Empty", span="1750-1750"];
m0_736 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.IsNamespaceAttribute(string, out string)", file="DefaultValueHandlingTests.cs", label="return true;", span="1751-1751"];
m0_739 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.IsNamespaceAttribute(string, out string)", file="DefaultValueHandlingTests.cs", label="return true;", span="1756-1756"];
m0_741 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.IsNamespaceAttribute(string, out string)", file="DefaultValueHandlingTests.cs", label="return false;", span="1760-1760"];
m0_742 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.IsNamespaceAttribute(string, out string)", file="DefaultValueHandlingTests.cs", label="Exit Newtonsoft.Json.Converters.XmlNodeConverter.IsNamespaceAttribute(string, out string)", span="1744-1744"];
m0_180 [cluster="XAttribute.cstr", file="DefaultValueHandlingTests.cs", label="Entry XAttribute.cstr", span=""];
m0_367 [cluster="Newtonsoft.Json.JsonWriter.WriteEndArray()", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.JsonWriter.WriteEndArray()", span="381-381"];
m0_193 [cluster="Newtonsoft.Json.Converters.XTextWrapper.XTextWrapper(XText)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Converters.XTextWrapper.XTextWrapper(XText)", span="575-575"];
m0_194 [cluster="Newtonsoft.Json.Converters.XTextWrapper.XTextWrapper(XText)", file="DefaultValueHandlingTests.cs", label="Exit Newtonsoft.Json.Converters.XTextWrapper.XTextWrapper(XText)", span="575-575"];
m0_105 [cluster="Newtonsoft.Json.Converters.IXmlDocument.CreateXmlDeclaration(string, string, string)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Converters.IXmlDocument.CreateXmlDeclaration(string, string, string)", span="337-337"];
m0_106 [cluster="Newtonsoft.Json.Converters.IXmlDocument.CreateXmlDeclaration(string, string, string)", file="DefaultValueHandlingTests.cs", label="Exit Newtonsoft.Json.Converters.IXmlDocument.CreateXmlDeclaration(string, string, string)", span="337-337"];
m0_111 [cluster="Newtonsoft.Json.Converters.IXmlDocument.CreateElement(string)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Converters.IXmlDocument.CreateElement(string)", span="340-340"];
m0_112 [cluster="Newtonsoft.Json.Converters.IXmlDocument.CreateElement(string)", file="DefaultValueHandlingTests.cs", label="Exit Newtonsoft.Json.Converters.IXmlDocument.CreateElement(string)", span="340-340"];
m0_219 [cluster="Newtonsoft.Json.Converters.XObjectWrapper.XObjectWrapper(XObject)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Converters.XObjectWrapper.XObjectWrapper(XObject)", span="725-725"];
m0_225 [cluster="Newtonsoft.Json.Converters.XObjectWrapper.XObjectWrapper(XObject)", file="DefaultValueHandlingTests.cs", label="_xmlObject = xmlObject", span="727-727"];
m0_226 [cluster="Newtonsoft.Json.Converters.XObjectWrapper.XObjectWrapper(XObject)", file="DefaultValueHandlingTests.cs", label="Exit Newtonsoft.Json.Converters.XObjectWrapper.XObjectWrapper(XObject)", span="725-725"];
m0_751 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CanConvert(System.Type)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Converters.XmlNodeConverter.CanConvert(System.Type)", span="1776-1776"];
m0_752 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CanConvert(System.Type)", file="DefaultValueHandlingTests.cs", label="typeof(XObject).IsAssignableFrom(valueType)", span="1779-1779"];
m0_754 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CanConvert(System.Type)", file="DefaultValueHandlingTests.cs", label="typeof(XmlNode).IsAssignableFrom(valueType)", span="1783-1783"];
m0_753 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CanConvert(System.Type)", file="DefaultValueHandlingTests.cs", label="return true;", span="1780-1780"];
m0_755 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CanConvert(System.Type)", file="DefaultValueHandlingTests.cs", label="return true;", span="1784-1784"];
m0_756 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CanConvert(System.Type)", file="DefaultValueHandlingTests.cs", label="return false;", span="1787-1787"];
m0_757 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CanConvert(System.Type)", file="DefaultValueHandlingTests.cs", label="Exit Newtonsoft.Json.Converters.XmlNodeConverter.CanConvert(System.Type)", span="1776-1776"];
m0_492 [cluster="System.Type.IsAssignableFrom(System.Type)", file="DefaultValueHandlingTests.cs", label="Entry System.Type.IsAssignableFrom(System.Type)", span="0-0"];
m0_138 [cluster="Newtonsoft.Json.Converters.XDocumentWrapper.CreateTextNode(string)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Converters.XDocumentWrapper.CreateTextNode(string)", span="485-485"];
m0_139 [cluster="Newtonsoft.Json.Converters.XDocumentWrapper.CreateTextNode(string)", file="DefaultValueHandlingTests.cs", label="return new XObjectWrapper(new XText(text));", span="487-487"];
m0_140 [cluster="Newtonsoft.Json.Converters.XDocumentWrapper.CreateTextNode(string)", file="DefaultValueHandlingTests.cs", label="Exit Newtonsoft.Json.Converters.XDocumentWrapper.CreateTextNode(string)", span="485-485"];
m0_601 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.AddJsonArrayAttribute(Newtonsoft.Json.Converters.IXmlElement, Newtonsoft.Json.Converters.IXmlDocument)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Converters.XmlNodeConverter.AddJsonArrayAttribute(Newtonsoft.Json.Converters.IXmlElement, Newtonsoft.Json.Converters.IXmlDocument)", span="1493-1493"];
m0_607 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.AddJsonArrayAttribute(Newtonsoft.Json.Converters.IXmlElement, Newtonsoft.Json.Converters.IXmlDocument)", file="DefaultValueHandlingTests.cs", label="element.SetAttributeNode(document.CreateAttribute(''json:Array'', JsonNamespaceUri, ''true''))", span="1495-1495"];
m0_608 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.AddJsonArrayAttribute(Newtonsoft.Json.Converters.IXmlElement, Newtonsoft.Json.Converters.IXmlDocument)", file="DefaultValueHandlingTests.cs", label="element is XElementWrapper", span="1499-1499"];
m0_609 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.AddJsonArrayAttribute(Newtonsoft.Json.Converters.IXmlElement, Newtonsoft.Json.Converters.IXmlDocument)", file="DefaultValueHandlingTests.cs", label="element.GetPrefixOfNamespace(JsonNamespaceUri) == null", span="1501-1501"];
m0_610 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.AddJsonArrayAttribute(Newtonsoft.Json.Converters.IXmlElement, Newtonsoft.Json.Converters.IXmlDocument)", file="DefaultValueHandlingTests.cs", label="element.SetAttributeNode(document.CreateAttribute(''xmlns:json'', ''http://www.w3.org/2000/xmlns/'', JsonNamespaceUri))", span="1503-1503"];
m0_611 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.AddJsonArrayAttribute(Newtonsoft.Json.Converters.IXmlElement, Newtonsoft.Json.Converters.IXmlDocument)", file="DefaultValueHandlingTests.cs", label="Exit Newtonsoft.Json.Converters.XmlNodeConverter.AddJsonArrayAttribute(Newtonsoft.Json.Converters.IXmlElement, Newtonsoft.Json.Converters.IXmlDocument)", span="1493-1493"];
m0_748 [cluster="lambda expression", file="DefaultValueHandlingTests.cs", label="Entry lambda expression", span="1765-1765"];
m0_237 [cluster="lambda expression", file="DefaultValueHandlingTests.cs", label="Entry lambda expression", span="837-837"];
m0_238 [cluster="lambda expression", file="DefaultValueHandlingTests.cs", label="new XAttributeWrapper(a)", span="837-837"];
m0_239 [cluster="lambda expression", file="DefaultValueHandlingTests.cs", label="Exit lambda expression", span="837-837"];
m0_329 [cluster="lambda expression", file="DefaultValueHandlingTests.cs", label="Entry lambda expression", span="1017-1017"];
m0_330 [cluster="lambda expression", file="DefaultValueHandlingTests.cs", label="a.LocalName == ''Array'' && a.NamespaceUri == JsonNamespaceUri", span="1017-1017"];
m0_331 [cluster="lambda expression", file="DefaultValueHandlingTests.cs", label="Exit lambda expression", span="1017-1017"];
m0_457 [cluster="lambda expression", file="DefaultValueHandlingTests.cs", label="n.LocalName == node.LocalName", span="1091-1091"];
m0_456 [cluster="lambda expression", file="DefaultValueHandlingTests.cs", label="Entry lambda expression", span="1091-1091"];
m0_458 [cluster="lambda expression", file="DefaultValueHandlingTests.cs", label="Exit lambda expression", span="1091-1091"];
m0_605 [cluster="lambda expression", file="DefaultValueHandlingTests.cs", label="n.LocalName == propertyName", span="1488-1488"];
m0_604 [cluster="lambda expression", file="DefaultValueHandlingTests.cs", label="Entry lambda expression", span="1488-1488"];
m0_606 [cluster="lambda expression", file="DefaultValueHandlingTests.cs", label="Exit lambda expression", span="1488-1488"];
m0_731 [cluster="lambda expression", file="DefaultValueHandlingTests.cs", label="n.LocalName == propertyName", span="1708-1708"];
m0_730 [cluster="lambda expression", file="DefaultValueHandlingTests.cs", label="Entry lambda expression", span="1708-1708"];
m0_732 [cluster="lambda expression", file="DefaultValueHandlingTests.cs", label="Exit lambda expression", span="1708-1708"];
m0_749 [cluster="lambda expression", file="DefaultValueHandlingTests.cs", label="a.NamespaceUri != JsonNamespaceUri", span="1765-1765"];
m0_750 [cluster="lambda expression", file="DefaultValueHandlingTests.cs", label="Exit lambda expression", span="1765-1765"];
m0_494 [cluster="XDocument.cstr", file="DefaultValueHandlingTests.cs", label="Entry XDocument.cstr", span=""];
m0_295 [cluster="string.IsNullOrEmpty(string)", file="DefaultValueHandlingTests.cs", label="Entry string.IsNullOrEmpty(string)", span="0-0"];
m0_131 [cluster="Newtonsoft.Json.Converters.XDocumentWrapper.XDocumentWrapper(XDocument)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Converters.XDocumentWrapper.XDocumentWrapper(XDocument)", span="462-462"];
m0_132 [cluster="Newtonsoft.Json.Converters.XDocumentWrapper.XDocumentWrapper(XDocument)", file="DefaultValueHandlingTests.cs", label="Exit Newtonsoft.Json.Converters.XDocumentWrapper.XDocumentWrapper(XDocument)", span="462-462"];
m0_450 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="DefaultValueHandlingTests.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
m0_123 [cluster="Newtonsoft.Json.Converters.IXmlNode.AppendChild(Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Converters.IXmlNode.AppendChild(Newtonsoft.Json.Converters.IXmlNode)", span="378-378"];
m0_124 [cluster="Newtonsoft.Json.Converters.IXmlNode.AppendChild(Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="Exit Newtonsoft.Json.Converters.IXmlNode.AppendChild(Newtonsoft.Json.Converters.IXmlNode)", span="378-378"];
m0_45 [cluster="System.IO.MemoryStream.MemoryStream(byte[])", file="DefaultValueHandlingTests.cs", label="Entry System.IO.MemoryStream.MemoryStream(byte[])", span="0-0"];
m0_29 [cluster="Newtonsoft.Json.Tests.Converters.RegexConverterTests.DeserializeFromText()", color=green, community=0, file="DefaultValueHandlingTests.cs", label="string json = @''{\r\n  ''''Pattern'''': ''''abc'''',\r\n  ''''Options'''': 513\r\n}''", prediction=16, span="66-69"];
m0_30 [cluster="Newtonsoft.Json.Tests.Converters.RegexConverterTests.DeserializeFromText()", color=green, community=0, file="DefaultValueHandlingTests.cs", label="Regex newRegex = JsonConvert.DeserializeObject<Regex>(json, new RegexConverter())", prediction=17, span="71-71"];
m0_31 [cluster="Newtonsoft.Json.Tests.Converters.RegexConverterTests.DeserializeFromText()", color=green, community=0, file="DefaultValueHandlingTests.cs", label="Assert.AreEqual(''abc'', newRegex.ToString())", prediction=18, span="72-72"];
m0_121 [cluster="Newtonsoft.Json.Converters.IXmlElement.GetPrefixOfNamespace(string)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Converters.IXmlElement.GetPrefixOfNamespace(string)", span="366-366"];
m0_122 [cluster="Newtonsoft.Json.Converters.IXmlElement.GetPrefixOfNamespace(string)", file="DefaultValueHandlingTests.cs", label="Exit Newtonsoft.Json.Converters.IXmlElement.GetPrefixOfNamespace(string)", span="366-366"];
m0_258 [cluster="Newtonsoft.Json.JsonWriter.WriteStartObject()", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.JsonWriter.WriteStartObject()", span="357-357"];
m0_363 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.TryGetValue(TKey, out TValue)", file="DefaultValueHandlingTests.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.TryGetValue(TKey, out TValue)", span="0-0"];
m0_46 [cluster="Newtonsoft.Json.Converters.XmlDocumentWrapper.CreateAttribute(string, string)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Converters.XmlDocumentWrapper.CreateAttribute(string, string)", span="107-107"];
m0_230 [cluster="System.InvalidOperationException.InvalidOperationException()", file="DefaultValueHandlingTests.cs", label="Entry System.InvalidOperationException.InvalidOperationException()", span="0-0"];
m0_47 [cluster="Newtonsoft.Json.Converters.XmlDocumentWrapper.CreateAttribute(string, string)", file="DefaultValueHandlingTests.cs", label="XmlNodeWrapper attribute = new XmlNodeWrapper(_document.CreateAttribute(name))", span="109-109"];
m0_603 [cluster="Unk.Single", file="DefaultValueHandlingTests.cs", label="Entry Unk.Single", span=""];
m0_283 [cluster="System.Collections.Generic.List<T>.List()", file="DefaultValueHandlingTests.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m0_33 [cluster="Newtonsoft.Json.Tests.Converters.RegexConverterTests.DeserializeFromText()", file="DefaultValueHandlingTests.cs", label="Exit Newtonsoft.Json.Tests.Converters.RegexConverterTests.DeserializeFromText()", span="64-64"];
m0_27 [cluster="Newtonsoft.Json.Utilities.MiscellaneousUtils.BytesToHex(byte[])", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Utilities.MiscellaneousUtils.BytesToHex(byte[])", span="97-97"];
m0_655 [cluster="System.Nullable<T>.GetValueOrDefault()", file="DefaultValueHandlingTests.cs", label="Entry System.Nullable<T>.GetValueOrDefault()", span="0-0"];
m0_32 [cluster="Newtonsoft.Json.Tests.Converters.RegexConverterTests.DeserializeFromText()", color=green, community=0, file="DefaultValueHandlingTests.cs", label="Assert.AreEqual(RegexOptions.IgnoreCase | RegexOptions.CultureInvariant, newRegex.Options)", prediction=19, span="73-73"];
m0_99 [cluster="Newtonsoft.Json.Converters.IXmlDocument.CreateCDataSection(string)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Converters.IXmlDocument.CreateCDataSection(string)", span="334-334"];
m0_100 [cluster="Newtonsoft.Json.Converters.IXmlDocument.CreateCDataSection(string)", file="DefaultValueHandlingTests.cs", label="Exit Newtonsoft.Json.Converters.IXmlDocument.CreateCDataSection(string)", span="334-334"];
m0_198 [cluster="Newtonsoft.Json.Converters.XContainerWrapper.XContainerWrapper(XContainer)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Converters.XContainerWrapper.XContainerWrapper(XContainer)", span="661-661"];
m0_199 [cluster="Newtonsoft.Json.Converters.XContainerWrapper.XContainerWrapper(XContainer)", file="DefaultValueHandlingTests.cs", label="Exit Newtonsoft.Json.Converters.XContainerWrapper.XContainerWrapper(XContainer)", span="661-661"];
m0_366 [cluster="Newtonsoft.Json.JsonWriter.WriteStartArray()", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.JsonWriter.WriteStartArray()", span="373-373"];
m0_244 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Converters.XmlNodeConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", span="908-908"];
m0_245 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs", label="IXmlNode node = WrapXml(value)", span="910-910"];
m0_249 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs", label="writer.WriteStartObject()", span="916-916"];
m0_250 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs", label="SerializeNode(writer, node, manager, !OmitRootObject)", span="918-918"];
m0_252 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs", label="writer.WriteEndObject()", span="921-921"];
m0_246 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs", label="XmlNamespaceManager manager = new XmlNamespaceManager(new NameTable())", span="912-912"];
m0_247 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs", label="PushParentNamespaces(node, manager)", span="913-913"];
m0_248 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs", label="!OmitRootObject", span="915-915"];
m0_251 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs", label="!OmitRootObject", span="920-920"];
m0_253 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs", label="Exit Newtonsoft.Json.Converters.XmlNodeConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", span="908-908"];
m0_155 [cluster="XDeclaration.cstr", file="DefaultValueHandlingTests.cs", label="Entry XDeclaration.cstr", span=""];
m0_169 [cluster="XElement.cstr", file="DefaultValueHandlingTests.cs", label="Entry XElement.cstr", span=""];
m0_233 [cluster="Newtonsoft.Json.Converters.XElementWrapper.SetAttributeNode(Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Converters.XElementWrapper.SetAttributeNode(Newtonsoft.Json.Converters.IXmlNode)", span="829-829"];
m0_234 [cluster="Newtonsoft.Json.Converters.XElementWrapper.SetAttributeNode(Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="XObjectWrapper wrapper = (XObjectWrapper)attribute", span="831-831"];
m0_235 [cluster="Newtonsoft.Json.Converters.XElementWrapper.SetAttributeNode(Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="Element.Add(wrapper.WrappedNode)", span="832-832"];
m0_236 [cluster="Newtonsoft.Json.Converters.XElementWrapper.SetAttributeNode(Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="Exit Newtonsoft.Json.Converters.XElementWrapper.SetAttributeNode(Newtonsoft.Json.Converters.IXmlNode)", span="829-829"];
m0_256 [cluster="NameTable.cstr", file="DefaultValueHandlingTests.cs", label="Entry NameTable.cstr", span=""];
m0_137 [cluster="XComment.cstr", file="DefaultValueHandlingTests.cs", label="Entry XComment.cstr", span=""];
m0_254 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.WrapXml(object)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Converters.XmlNodeConverter.WrapXml(object)", span="924-924"];
m0_261 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.WrapXml(object)", file="DefaultValueHandlingTests.cs", label="value is XObject", span="927-927"];
m0_262 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.WrapXml(object)", file="DefaultValueHandlingTests.cs", label="return XContainerWrapper.WrapNode((XObject)value);", span="928-928"];
m0_263 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.WrapXml(object)", file="DefaultValueHandlingTests.cs", label="value is XmlNode", span="931-931"];
m0_264 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.WrapXml(object)", file="DefaultValueHandlingTests.cs", label="return XmlNodeWrapper.WrapNode((XmlNode)value);", span="932-932"];
m0_265 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.WrapXml(object)", file="DefaultValueHandlingTests.cs", label="throw new ArgumentException(''Value must be an XML object.'', ''value'');", span="935-935"];
m0_266 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.WrapXml(object)", file="DefaultValueHandlingTests.cs", label="Exit Newtonsoft.Json.Converters.XmlNodeConverter.WrapXml(object)", span="924-924"];
m0_260 [cluster="Newtonsoft.Json.JsonWriter.WriteEndObject()", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.JsonWriter.WriteEndObject()", span="365-365"];
m0_101 [cluster="Newtonsoft.Json.Converters.IXmlDocument.CreateWhitespace(string)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Converters.IXmlDocument.CreateWhitespace(string)", span="335-335"];
m0_102 [cluster="Newtonsoft.Json.Converters.IXmlDocument.CreateWhitespace(string)", file="DefaultValueHandlingTests.cs", label="Exit Newtonsoft.Json.Converters.IXmlDocument.CreateWhitespace(string)", span="335-335"];
m0_115 [cluster="Newtonsoft.Json.Converters.IXmlDocument.CreateAttribute(string, string)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Converters.IXmlDocument.CreateAttribute(string, string)", span="342-342"];
m0_116 [cluster="Newtonsoft.Json.Converters.IXmlDocument.CreateAttribute(string, string)", file="DefaultValueHandlingTests.cs", label="Exit Newtonsoft.Json.Converters.IXmlDocument.CreateAttribute(string, string)", span="342-342"];
m0_175 [cluster="Unk.Get", file="DefaultValueHandlingTests.cs", label="Entry Unk.Get", span=""];
m0_554 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateElement(string, Newtonsoft.Json.Converters.IXmlDocument, string, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Converters.XmlNodeConverter.CreateElement(string, Newtonsoft.Json.Converters.IXmlDocument, string, XmlNamespaceManager)", span="1675-1675"];
m0_699 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateElement(string, Newtonsoft.Json.Converters.IXmlDocument, string, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="string ns = string.IsNullOrEmpty(elementPrefix) ? manager.DefaultNamespace : manager.LookupNamespace(elementPrefix)", span="1677-1677"];
m0_700 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateElement(string, Newtonsoft.Json.Converters.IXmlDocument, string, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="IXmlElement element = (!string.IsNullOrEmpty(ns)) ? document.CreateElement(elementName, ns) : document.CreateElement(elementName)", span="1679-1679"];
m0_701 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateElement(string, Newtonsoft.Json.Converters.IXmlDocument, string, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="return element;", span="1681-1681"];
m0_702 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateElement(string, Newtonsoft.Json.Converters.IXmlDocument, string, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="Exit Newtonsoft.Json.Converters.XmlNodeConverter.CreateElement(string, Newtonsoft.Json.Converters.IXmlDocument, string, XmlNamespaceManager)", span="1675-1675"];
m0_499 [cluster="Unk.Remove", file="DefaultValueHandlingTests.cs", label="Entry Unk.Remove", span=""];
m0_92 [cluster="Newtonsoft.Json.Converters.XmlNodeWrapper.AppendChild(Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="return newChild;", span="318-318"];
m0_90 [cluster="Newtonsoft.Json.Converters.XmlNodeWrapper.AppendChild(Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="_node.AppendChild(xmlNodeWrapper._node)", span="315-315"];
m0_91 [cluster="Newtonsoft.Json.Converters.XmlNodeWrapper.AppendChild(Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="_childNodes = null", span="316-316"];
m0_93 [cluster="Newtonsoft.Json.Converters.XmlNodeWrapper.AppendChild(Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="Exit Newtonsoft.Json.Converters.XmlNodeWrapper.AppendChild(Newtonsoft.Json.Converters.IXmlNode)", span="312-312"];
m0_259 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", span="1082-1082"];
m0_368 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="node.NodeType", span="1084-1084"];
m0_371 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="SerializeGroupedNodes(writer, node, manager, writePropertyName)", span="1088-1088"];
m0_373 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="IsArray(node) && node.ChildNodes.All(n => n.LocalName == node.LocalName) && node.ChildNodes.Count > 0", span="1091-1091"];
m0_374 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="SerializeGroupedNodes(writer, node, manager, false)", span="1093-1093"];
m0_375 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="manager.PushScope()", span="1097-1097"];
m0_376 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="node.Attributes", span="1099-1099"];
m0_380 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="manager.AddNamespace(namespacePrefix, namespaceUri)", span="1108-1108"];
m0_381 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label=writePropertyName, span="1112-1112"];
m0_382 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="writer.WritePropertyName(GetPropertyName(node, manager))", span="1113-1113"];
m0_383 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="!ValueAttributes(node.Attributes).Any() && node.ChildNodes.Count == 1\r\n                            && node.ChildNodes[0].NodeType == XmlNodeType.Text", span="1115-1116"];
m0_384 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="writer.WriteValue(node.ChildNodes[0].Value)", span="1119-1119"];
m0_385 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="node.ChildNodes.Count == 0 && CollectionUtils.IsNullOrEmpty(node.Attributes)", span="1121-1121"];
m0_386 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="IXmlElement element = (IXmlElement)node", span="1123-1123"];
m0_388 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="writer.WriteNull()", span="1127-1127"];
m0_389 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="writer.WriteValue(string.Empty)", span="1129-1129"];
m0_390 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="writer.WriteStartObject()", span="1133-1133"];
m0_392 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="i < node.Attributes.Count", span="1135-1135"];
m0_393 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="SerializeNode(writer, node.Attributes[i], manager, true)", span="1137-1137"];
m0_395 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="SerializeGroupedNodes(writer, node, manager, true)", span="1140-1140"];
m0_396 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="writer.WriteEndObject()", span="1142-1142"];
m0_397 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="manager.PopScope()", span="1145-1145"];
m0_399 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label=writePropertyName, span="1150-1150"];
m0_400 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="writer.WriteComment(node.Value)", span="1151-1151"];
m0_407 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="node.NamespaceUri == ''http://www.w3.org/2000/xmlns/'' && node.Value == JsonNamespaceUri", span="1159-1159"];
m0_409 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="node.NamespaceUri == JsonNamespaceUri", span="1162-1162"];
m0_410 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="node.LocalName == ''Array''", span="1164-1164"];
m0_412 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label=writePropertyName, span="1168-1168"];
m0_413 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="writer.WritePropertyName(GetPropertyName(node, manager))", span="1169-1169"];
m0_414 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="writer.WriteValue(node.Value)", span="1170-1170"];
m0_416 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="IXmlDeclaration declaration = (IXmlDeclaration)node", span="1173-1173"];
m0_417 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="writer.WritePropertyName(GetPropertyName(node, manager))", span="1174-1174"];
m0_418 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="writer.WriteStartObject()", span="1175-1175"];
m0_420 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="writer.WritePropertyName(''@version'')", span="1179-1179"];
m0_421 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="writer.WriteValue(declaration.Version)", span="1180-1180"];
m0_423 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="writer.WritePropertyName(''@encoding'')", span="1184-1184"];
m0_424 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="writer.WriteValue(declaration.Encoding)", span="1185-1185"];
m0_426 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="writer.WritePropertyName(''@standalone'')", span="1189-1189"];
m0_427 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="writer.WriteValue(declaration.Standalone)", span="1190-1190"];
m0_428 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="writer.WriteEndObject()", span="1193-1193"];
m0_430 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="IXmlDocumentType documentType = (IXmlDocumentType)node", span="1196-1196"];
m0_431 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="writer.WritePropertyName(GetPropertyName(node, manager))", span="1197-1197"];
m0_432 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="writer.WriteStartObject()", span="1198-1198"];
m0_434 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="writer.WritePropertyName(''@name'')", span="1202-1202"];
m0_435 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="writer.WriteValue(documentType.Name)", span="1203-1203"];
m0_437 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="writer.WritePropertyName(''@public'')", span="1207-1207"];
m0_438 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="writer.WriteValue(documentType.Public)", span="1208-1208"];
m0_440 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="writer.WritePropertyName(''@system'')", span="1212-1212"];
m0_441 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="writer.WriteValue(documentType.System)", span="1213-1213"];
m0_443 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="writer.WritePropertyName(''@internalSubset'')", span="1217-1217"];
m0_444 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="writer.WriteValue(documentType.InternalSubset)", span="1218-1218"];
m0_445 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="writer.WriteEndObject()", span="1221-1221"];
m0_446 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="throw new JsonSerializationException(''Unexpected XmlNodeType when serializing nodes: '' + node.NodeType);", span="1224-1224"];
m0_369 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="XmlNodeType.Document", span="1086-1086"];
m0_372 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="XmlNodeType.Element", span="1090-1090"];
m0_398 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="XmlNodeType.Comment", span="1149-1149"];
m0_401 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="XmlNodeType.Attribute", span="1153-1153"];
m0_415 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="XmlNodeType.XmlDeclaration", span="1172-1172"];
m0_429 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="XmlNodeType.DocumentType", span="1195-1195"];
m0_370 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="XmlNodeType.DocumentFragment", span="1087-1087"];
m0_377 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="attribute.NamespaceUri == ''http://www.w3.org/2000/xmlns/''", span="1101-1101"];
m0_378 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="string namespacePrefix = (attribute.LocalName != ''xmlns'')\r\n                                    ? attribute.LocalName\r\n                                    : string.Empty", span="1103-1105"];
m0_379 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="string namespaceUri = attribute.Value", span="1106-1106"];
m0_387 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="element.IsEmpty", span="1126-1126"];
m0_391 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="int i = 0", span="1135-1135"];
m0_394 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="i++", span="1135-1135"];
m0_402 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="XmlNodeType.Text", span="1154-1154"];
m0_403 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="XmlNodeType.CDATA", span="1155-1155"];
m0_404 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="XmlNodeType.ProcessingInstruction", span="1156-1156"];
m0_405 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="XmlNodeType.Whitespace", span="1157-1157"];
m0_406 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="XmlNodeType.SignificantWhitespace", span="1158-1158"];
m0_408 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="return;", span="1160-1160"];
m0_411 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="return;", span="1165-1165"];
m0_419 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="!string.IsNullOrEmpty(declaration.Version)", span="1177-1177"];
m0_422 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="!string.IsNullOrEmpty(declaration.Encoding)", span="1182-1182"];
m0_425 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="!string.IsNullOrEmpty(declaration.Standalone)", span="1187-1187"];
m0_433 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="!string.IsNullOrEmpty(documentType.Name)", span="1200-1200"];
m0_436 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="!string.IsNullOrEmpty(documentType.Public)", span="1205-1205"];
m0_439 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="!string.IsNullOrEmpty(documentType.System)", span="1210-1210"];
m0_442 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="!string.IsNullOrEmpty(documentType.InternalSubset)", span="1215-1215"];
m0_447 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs", label="Exit Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", span="1082-1082"];
m0_257 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.PushParentNamespaces(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Converters.XmlNodeConverter.PushParentNamespaces(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", span="938-938"];
m0_268 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.PushParentNamespaces(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="List<IXmlNode> parentElements = null", span="940-940"];
m0_269 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.PushParentNamespaces(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="IXmlNode parent = node", span="942-942"];
m0_278 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.PushParentNamespaces(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="manager.PushScope()", span="960-960"];
m0_281 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.PushParentNamespaces(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="manager.AddNamespace(attribute.LocalName, attribute.Value)", span="964-964"];
m0_272 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.PushParentNamespaces(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="parentElements == null", span="947-947"];
m0_274 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.PushParentNamespaces(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="parentElements.Add(parent)", span="950-950"];
m0_275 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.PushParentNamespaces(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="parentElements != null", span="954-954"];
m0_276 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.PushParentNamespaces(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="parentElements.Reverse()", span="956-956"];
m0_277 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.PushParentNamespaces(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label=parentElements, span="958-958"];
m0_270 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.PushParentNamespaces(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="(parent = parent.ParentNode) != null", span="943-943"];
m0_271 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.PushParentNamespaces(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="parent.NodeType == XmlNodeType.Element", span="945-945"];
m0_273 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.PushParentNamespaces(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="parentElements = new List<IXmlNode>()", span="948-948"];
m0_279 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.PushParentNamespaces(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="parentElement.Attributes", span="961-961"];
m0_280 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.PushParentNamespaces(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="attribute.NamespaceUri == ''http://www.w3.org/2000/xmlns/'' && attribute.LocalName != ''xmlns''", span="963-963"];
m0_282 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.PushParentNamespaces(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="Exit Newtonsoft.Json.Converters.XmlNodeConverter.PushParentNamespaces(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", span="938-938"];
m0_553 [cluster="Unk.LookupNamespace", file="DefaultValueHandlingTests.cs", label="Entry Unk.LookupNamespace", span=""];
m0_549 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", span="1509-1509"];
m0_612 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="Dictionary<string, string> attributeNameValues = new Dictionary<string, string>()", span="1511-1511"];
m0_615 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="reader.TokenType != JsonToken.String\r\n                && reader.TokenType != JsonToken.Null\r\n                && reader.TokenType != JsonToken.Boolean\r\n                && reader.TokenType != JsonToken.Integer\r\n                && reader.TokenType != JsonToken.Float\r\n                && reader.TokenType != JsonToken.Date\r\n                && reader.TokenType != JsonToken.StartConstructor", span="1516-1522"];
m0_616 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="!finishedAttributes && !finishedElement && reader.Read()", span="1525-1525"];
m0_617 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="reader.TokenType", span="1527-1527"];
m0_619 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="string attributeName = reader.Value.ToString()", span="1530-1530"];
m0_626 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="reader.Read()", span="1541-1541"];
m0_627 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="attributeValue = ConvertTokenToXmlValue(reader)", span="1542-1542"];
m0_631 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="manager.AddNamespace(namespacePrefix, attributeValue)", span="1548-1548"];
m0_634 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="reader.Read()", span="1553-1553"];
m0_635 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="attributeValue = reader.Value.ToString()", span="1554-1554"];
m0_636 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="string jsonPrefix = manager.LookupPrefix(JsonNamespaceUri)", span="1558-1558"];
m0_639 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="manager.LookupNamespace(''json'' + i) != null", span="1563-1563"];
m0_643 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="manager.AddNamespace(jsonPrefix, JsonNamespaceUri)", span="1570-1570"];
m0_651 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="throw new JsonSerializationException(''Unexpected JsonToken: '' + reader.TokenType);", span="1594-1594"];
m0_613 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="bool finishedAttributes = false", span="1512-1512"];
m0_628 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="attributeNameValues.Add(attributeName, attributeValue)", span="1543-1543"];
m0_642 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="attributeNameValues.Add(''xmlns:'' + jsonPrefix, JsonNamespaceUri)", span="1569-1569"];
m0_644 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="attributeNameValues.Add(jsonPrefix + '':'' + attributeName, attributeValue)", span="1573-1573"];
m0_652 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="return attributeNameValues;", span="1599-1599"];
m0_614 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="bool finishedElement = false", span="1513-1513"];
m0_618 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="JsonToken.PropertyName", span="1529-1529"];
m0_647 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="JsonToken.EndObject", span="1587-1587"];
m0_649 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="JsonToken.Comment", span="1590-1590"];
m0_620 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="!string.IsNullOrEmpty(attributeName)", span="1532-1532"];
m0_621 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="char firstChar = attributeName[0]", span="1534-1534"];
m0_625 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="attributeName = attributeName.Substring(1)", span="1540-1540"];
m0_646 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="finishedAttributes = true", span="1583-1583"];
m0_622 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="string attributeValue", span="1535-1535"];
m0_623 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label=firstChar, span="1537-1537"];
m0_624 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="'@'", span="1539-1539"];
m0_632 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="'$'", span="1551-1551"];
m0_645 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="finishedAttributes = true", span="1576-1576"];
m0_630 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="IsNamespaceAttribute(attributeName, out namespacePrefix)", span="1546-1546"];
m0_633 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="attributeName = attributeName.Substring(1)", span="1552-1552"];
m0_629 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="string namespacePrefix", span="1545-1545"];
m0_637 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="jsonPrefix == null", span="1559-1559"];
m0_638 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="int? i = null", span="1562-1562"];
m0_640 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="i = i.GetValueOrDefault() + 1", span="1565-1565"];
m0_641 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="jsonPrefix = ''json'' + i", span="1567-1567"];
m0_648 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="finishedElement = true", span="1588-1588"];
m0_650 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="finishedElement = true", span="1591-1591"];
m0_653 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs", label="Exit Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", span="1509-1509"];
m0_327 [cluster="Unk.SingleOrDefault", file="DefaultValueHandlingTests.cs", label="Entry Unk.SingleOrDefault", span=""];
m0_294 [cluster="Unk.LookupPrefix", file="DefaultValueHandlingTests.cs", label="Entry Unk.LookupPrefix", span=""];
m0_498 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeNode(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="Entry Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeNode(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, Newtonsoft.Json.Converters.IXmlNode)", span="1684-1684"];
m0_703 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeNode(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="reader.TokenType", span="1688-1688"];
m0_705 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeNode(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="currentNode.NodeType == XmlNodeType.Document && document.DocumentElement != null", span="1691-1691"];
m0_707 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeNode(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="string propertyName = reader.Value.ToString()", span="1694-1694"];
m0_708 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeNode(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="reader.Read()", span="1695-1695"];
m0_709 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeNode(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="reader.TokenType == JsonToken.StartArray", span="1697-1697"];
m0_711 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeNode(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="reader.Read() && reader.TokenType != JsonToken.EndArray", span="1700-1700"];
m0_712 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeNode(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="DeserializeValue(reader, document, manager, propertyName, currentNode)", span="1702-1702"];
m0_715 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeNode(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="IXmlElement arrayElement = currentNode.ChildNodes.OfType<IXmlElement>().Single(n => n.LocalName == propertyName)", span="1708-1708"];
m0_716 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeNode(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="AddJsonArrayAttribute(arrayElement, document)", span="1709-1709"];
m0_717 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeNode(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="DeserializeValue(reader, document, manager, propertyName, currentNode)", span="1714-1714"];
m0_719 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeNode(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="string constructorName = reader.Value.ToString()", span="1718-1718"];
m0_720 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeNode(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="reader.Read() && reader.TokenType != JsonToken.EndConstructor", span="1720-1720"];
m0_721 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeNode(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="DeserializeValue(reader, document, manager, constructorName, currentNode)", span="1722-1722"];
m0_723 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeNode(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="currentNode.AppendChild(document.CreateComment((string)reader.Value))", span="1726-1726"];
m0_727 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeNode(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="throw new JsonSerializationException(''Unexpected JsonToken when deserializing node: '' + reader.TokenType);", span="1732-1732"];
m0_728 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeNode(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="reader.TokenType == JsonToken.PropertyName || reader.Read()", span="1734-1734"];
m0_704 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeNode(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="JsonToken.PropertyName", span="1690-1690"];
m0_718 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeNode(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="JsonToken.StartConstructor", span="1717-1717"];
m0_722 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeNode(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="JsonToken.Comment", span="1725-1725"];
m0_724 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeNode(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="JsonToken.EndObject", span="1728-1728"];
m0_706 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeNode(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="throw new JsonSerializationException(''JSON root object has multiple properties. The root object must have a single property in order to create a valid XML document. Consider specifing a DeserializeRootElementName.'');", span="1692-1692"];
m0_710 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeNode(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="int count = 0", span="1699-1699"];
m0_713 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeNode(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="count++", span="1703-1703"];
m0_714 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeNode(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="count == 1 && WriteArrayAttribute", span="1706-1706"];
m0_725 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeNode(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="JsonToken.EndArray", span="1729-1729"];
m0_726 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeNode(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="return;", span="1730-1730"];
m0_729 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeNode(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs", label="Exit Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeNode(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, Newtonsoft.Json.Converters.IXmlNode)", span="1684-1684"];
m0_286 [cluster="Unk.PushScope", file="DefaultValueHandlingTests.cs", label="Entry Unk.PushScope", span=""];
m0_758 [file="DefaultValueHandlingTests.cs", label="Newtonsoft.Json.Converters.XmlDocumentWrapper", span=""];
m0_759 [file="DefaultValueHandlingTests.cs", label="Newtonsoft.Json.Converters.XmlElementWrapper", span=""];
m0_760 [file="DefaultValueHandlingTests.cs", label="Newtonsoft.Json.Converters.XmlDeclarationWrapper", span=""];
m0_761 [file="DefaultValueHandlingTests.cs", label="Newtonsoft.Json.Converters.XmlDocumentTypeWrapper", span=""];
m0_762 [file="DefaultValueHandlingTests.cs", label="Newtonsoft.Json.Converters.XmlNodeWrapper", span=""];
m0_763 [file="DefaultValueHandlingTests.cs", label="Newtonsoft.Json.Converters.XDeclarationWrapper", span=""];
m0_764 [file="DefaultValueHandlingTests.cs", label="Newtonsoft.Json.Converters.XDocumentTypeWrapper", span=""];
m0_765 [file="DefaultValueHandlingTests.cs", label="Newtonsoft.Json.Converters.XDocumentWrapper", span=""];
m0_766 [file="DefaultValueHandlingTests.cs", label="Newtonsoft.Json.Converters.XContainerWrapper", span=""];
m0_767 [file="DefaultValueHandlingTests.cs", label="Newtonsoft.Json.Converters.XObjectWrapper", span=""];
m0_768 [file="DefaultValueHandlingTests.cs", label="Newtonsoft.Json.Converters.XElementWrapper", span=""];
m0_769 [file="DefaultValueHandlingTests.cs", label="Newtonsoft.Json.Converters.XmlNodeConverter", span=""];
m0_770 [file="DefaultValueHandlingTests.cs", label="Newtonsoft.Json.Converters.IXmlNode", span=""];
m0_771 [file="DefaultValueHandlingTests.cs", label=string, span=""];
m0_772 [file="DefaultValueHandlingTests.cs", label=propertyName, span=""];
m1_137 [cluster="Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.CreateStructMethodCall()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.CreateStructMethodCall()", span="221-221"];
m1_140 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionClear()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(1, o.Children().Count())", span="262-262"];
m1_143 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionClear()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(0, o.Children().Count())", span="267-267"];
m1_144 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionClear()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(null, p.Parent)", span="269-269"];
m1_138 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionClear()", file="DynamicReflectionDelegateFactoryTests.cs", label="out Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.TestStruct", span=""];
m1_139 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionClear()", file="DynamicReflectionDelegateFactoryTests.cs", label="o.Add(''PropertyNameValue'', new JValue(1))", span="261-261"];
m1_141 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionClear()", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p = (JProperty)o.Children().ElementAt(0)", span="264-264"];
m1_142 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionClear()", file="DynamicReflectionDelegateFactoryTests.cs", label="((ICollection<KeyValuePair<string, JToken>>)o).Clear()", span="266-266"];
m1_145 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionClear()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionClear()", span="258-258"];
m1_760 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenIsReadOnly()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenIsReadOnly()", span="1225-1225"];
m1_761 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenIsReadOnly()", file="DynamicReflectionDelegateFactoryTests.cs", label="IList<JToken> l = new JObject()", span="1227-1227"];
m1_762 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenIsReadOnly()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.IsFalse(l.IsReadOnly)", span="1228-1228"];
m1_763 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenIsReadOnly()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenIsReadOnly()", span="1225-1225"];
m1_56 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.TryGetValue()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.TryGetValue()", span="151-151"];
m1_173 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyTo()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyTo()", span="308-308"];
m1_178 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyTo()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(3, o.Children().Count())", span="314-314"];
m1_181 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyTo()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(default(KeyValuePair<string, JToken>), a[0])", span="320-320"];
m1_182 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyTo()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(''PropertyNameValue'', a[1].Key)", span="322-322"];
m1_183 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyTo()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(1, (int)a[1].Value)", span="323-323"];
m1_184 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyTo()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(''PropertyNameValue2'', a[2].Key)", span="325-325"];
m1_185 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyTo()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(2, (int)a[2].Value)", span="326-326"];
m1_186 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyTo()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(''PropertyNameValue3'', a[3].Key)", span="328-328"];
m1_187 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyTo()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(3, (int)a[3].Value)", span="329-329"];
m1_188 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyTo()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(default(KeyValuePair<string, JToken>), a[4])", span="331-331"];
m1_174 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyTo()", file="DynamicReflectionDelegateFactoryTests.cs", label="JObject o = new JObject()", span="310-310"];
m1_177 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyTo()", file="DynamicReflectionDelegateFactoryTests.cs", label="o.Add(''PropertyNameValue3'', new JValue(3))", span="313-313"];
m1_179 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyTo()", file="DynamicReflectionDelegateFactoryTests.cs", label="KeyValuePair<string, JToken>[] a = new KeyValuePair<string, JToken>[5]", span="316-316"];
m1_180 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyTo()", file="DynamicReflectionDelegateFactoryTests.cs", label="((ICollection<KeyValuePair<string, JToken>>)o).CopyTo(a, 1)", span="318-318"];
m1_175 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyTo()", file="DynamicReflectionDelegateFactoryTests.cs", label="o.Add(''PropertyNameValue'', new JValue(1))", span="311-311"];
m1_176 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyTo()", file="DynamicReflectionDelegateFactoryTests.cs", label="o.Add(''PropertyNameValue2'', new JValue(2))", span="312-312"];
m1_189 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyTo()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyTo()", span="308-308"];
m1_1087 [cluster="System.Guid.Guid(string)", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry System.Guid.Guid(string)", span="0-0"];
m1_1109 [cluster="Newtonsoft.Json.Linq.JArray.JArray(params object[])", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Linq.JArray.JArray(params object[])", span="82-82"];
m1_1031 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", span="1700-1700"];
m1_1040 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(false, prop1.CanResetValue(o))", span="1713-1713"];
m1_1041 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(false, prop1.ShouldSerializeValue(o))", span="1714-1714"];
m1_1046 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(false, prop2.CanResetValue(o))", span="1720-1720"];
m1_1047 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(false, prop2.ShouldSerializeValue(o))", span="1721-1721"];
m1_1052 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(false, prop3.CanResetValue(o))", span="1727-1727"];
m1_1053 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(false, prop3.ShouldSerializeValue(o))", span="1728-1728"];
m1_1058 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(false, prop4.CanResetValue(o))", span="1734-1734"];
m1_1059 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(false, prop4.ShouldSerializeValue(o))", span="1735-1735"];
m1_1035 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(4, properties.Count)", span="1707-1707"];
m1_1037 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(''prop1'', prop1.Name)", span="1710-1710"];
m1_1038 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(typeof(object), prop1.PropertyType)", span="1711-1711"];
m1_1039 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(typeof(JObject), prop1.ComponentType)", span="1712-1712"];
m1_1043 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(''prop2'', prop2.Name)", span="1717-1717"];
m1_1044 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(typeof(object), prop2.PropertyType)", span="1718-1718"];
m1_1045 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(typeof(JObject), prop2.ComponentType)", span="1719-1719"];
m1_1049 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(''prop3'', prop3.Name)", span="1724-1724"];
m1_1050 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(typeof(object), prop3.PropertyType)", span="1725-1725"];
m1_1051 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(typeof(JObject), prop3.ComponentType)", span="1726-1726"];
m1_1055 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(''prop4'', prop4.Name)", span="1731-1731"];
m1_1056 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(typeof(object), prop4.PropertyType)", span="1732-1732"];
m1_1057 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(typeof(JObject), prop4.ComponentType)", span="1733-1733"];
m1_1032 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", file="DynamicReflectionDelegateFactoryTests.cs", label="JObject o = JObject.Parse(''{'prop1':12,'prop2':'hi!','prop3':null,'prop4':[1,2,3]}'')", span="1702-1702"];
m1_1036 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", file="DynamicReflectionDelegateFactoryTests.cs", label="PropertyDescriptor prop1 = properties[0]", span="1709-1709"];
m1_1042 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", file="DynamicReflectionDelegateFactoryTests.cs", label="PropertyDescriptor prop2 = properties[1]", span="1716-1716"];
m1_1048 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", file="DynamicReflectionDelegateFactoryTests.cs", label="PropertyDescriptor prop3 = properties[2]", span="1723-1723"];
m1_1054 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", file="DynamicReflectionDelegateFactoryTests.cs", label="PropertyDescriptor prop4 = properties[3]", span="1730-1730"];
m1_1034 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", file="DynamicReflectionDelegateFactoryTests.cs", label="PropertyDescriptorCollection properties = descriptor.GetProperties()", span="1706-1706"];
m1_1033 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", file="DynamicReflectionDelegateFactoryTests.cs", label="ICustomTypeDescriptor descriptor = o", span="1704-1704"];
m1_1060 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", span="1700-1700"];
m1_808 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAllowNew()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAllowNew()", span="1306-1306"];
m1_810 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAllowNew()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(true, l.AllowNew)", span="1309-1309"];
m1_809 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAllowNew()", file="DynamicReflectionDelegateFactoryTests.cs", label="IBindingList l = new JObject()", span="1308-1308"];
m1_811 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAllowNew()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAllowNew()", span="1306-1306"];
m1_1192 [cluster="Newtonsoft.Json.Tests.TestObjects.Person.Person()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.TestObjects.Person.Person()", span="36-36"];
m1_33 [cluster="Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.ConstructorWithRefStringAndRefBoolAndRefBool()", file="DynamicReflectionDelegateFactoryTests.cs", label="var creator = DynamicReflectionDelegateFactory.Instance.CreateParameterizedConstructor(constructor)", span="85-85"];
m1_603 [cluster="System.Collections.IList.Insert(int, object)", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry System.Collections.IList.Insert(int, object)", span="0-0"];
m1_310 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Iterate()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.Iterate()", span="520-520"];
m1_317 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Iterate()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(''PropertyNameValue'' + i, property.Name)", span="531-531"];
m1_318 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Iterate()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(i, (int)property.Value)", span="532-532"];
m1_311 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Iterate()", file="DynamicReflectionDelegateFactoryTests.cs", label="JObject o = new JObject()", span="522-522"];
m1_315 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Iterate()", file="DynamicReflectionDelegateFactoryTests.cs", label="int i = 1", span="528-528"];
m1_316 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Iterate()", file="DynamicReflectionDelegateFactoryTests.cs", label=t, span="529-529"];
m1_319 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Iterate()", file="DynamicReflectionDelegateFactoryTests.cs", label="i++", span="534-534"];
m1_312 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Iterate()", file="DynamicReflectionDelegateFactoryTests.cs", label="o.Add(''PropertyNameValue1'', new JValue(1))", span="523-523"];
m1_313 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Iterate()", file="DynamicReflectionDelegateFactoryTests.cs", label="o.Add(''PropertyNameValue2'', new JValue(2))", span="524-524"];
m1_314 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Iterate()", file="DynamicReflectionDelegateFactoryTests.cs", label="JToken t = o", span="526-526"];
m1_320 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Iterate()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.Iterate()", span="520-520"];
m1_14 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry lambda expression", span="56-56"];
m1_198 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyToNegativeArrayIndexShouldThrow()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyToNegativeArrayIndexShouldThrow()", span="346-346"];
m1_199 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyToNegativeArrayIndexShouldThrow()", file="DynamicReflectionDelegateFactoryTests.cs", label="ExceptionAssert.Throws<ArgumentOutOfRangeException>(() =>\r\n            {\r\n                JObject o = new JObject();\r\n                ((ICollection<KeyValuePair<string, JToken>>)o).CopyTo(new KeyValuePair<string, JToken>[1], -1);\r\n            }, @''arrayIndex is less than 0.\r\nParameter name: arrayIndex'')", span="348-353"];
m1_200 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyToNegativeArrayIndexShouldThrow()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyToNegativeArrayIndexShouldThrow()", span="346-346"];
m1_91 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Remove()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.Remove()", span="193-193"];
m1_92 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Remove()", color=green, community=0, file="DynamicReflectionDelegateFactoryTests.cs", label="JObject o = new JObject()", prediction=20, span="195-195"];
m1_93 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Remove()", file="DynamicReflectionDelegateFactoryTests.cs", label="o.Add(''PropertyNameValue'', new JValue(1))", span="196-196"];
m1_94 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Remove()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(1, o.Children().Count())", span="197-197"];
m1_95 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Remove()", color=green, community=0, file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(false, o.Remove(''sdf''))", prediction=20, span="199-199"];
m1_96 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Remove()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(false, o.Remove(null))", span="200-200"];
m1_97 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Remove()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(true, o.Remove(''PropertyNameValue''))", span="201-201"];
m1_98 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Remove()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(0, o.Children().Count())", span="203-203"];
m1_99 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Remove()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.Remove()", span="193-193"];
m1_889 [cluster="System.ComponentModel.ITypedList.GetItemProperties(System.ComponentModel.PropertyDescriptor[])", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry System.ComponentModel.ITypedList.GetItemProperties(System.ComponentModel.PropertyDescriptor[])", span="0-0"];
m1_0 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.EmbedJValueStringInNewJObject()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.EmbedJValueStringInNewJObject()", span="65-65"];
m1_1 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.EmbedJValueStringInNewJObject()", file="DynamicReflectionDelegateFactoryTests.cs", label="string s = null", span="67-67"];
m1_2 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.EmbedJValueStringInNewJObject()", file="DynamicReflectionDelegateFactoryTests.cs", label="var v = new JValue(s)", span="68-68"];
m1_3 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.EmbedJValueStringInNewJObject()", file="DynamicReflectionDelegateFactoryTests.cs", label="dynamic o = JObject.FromObject(new { title = v })", span="69-69"];
m1_4 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.EmbedJValueStringInNewJObject()", file="DynamicReflectionDelegateFactoryTests.cs", label="string output = o.ToString()", span="71-71"];
m1_5 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.EmbedJValueStringInNewJObject()", file="DynamicReflectionDelegateFactoryTests.cs", label="StringAssert.AreEqual(@''{\r\n  ''''title'''': null\r\n}'', output)", span="73-75"];
m1_6 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.EmbedJValueStringInNewJObject()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(null, v.Value)", span="77-77"];
m1_7 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.EmbedJValueStringInNewJObject()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.IsNull((string)o.title)", span="78-78"];
m1_100 [cluster="Newtonsoft.Json.Linq.JObject.Remove(string)", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Linq.JObject.Remove(string)", span="498-498"];
m1_256 [cluster="Unk.IsTrue", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Unk.IsTrue", span=""];
m1_668 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenClear()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenClear()", span="1082-1082"];
m1_671 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenClear()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(1, l.Count)", span="1087-1087"];
m1_673 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenClear()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(0, l.Count)", span="1091-1091"];
m1_670 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenClear()", file="DynamicReflectionDelegateFactoryTests.cs", label="IList<JToken> l = new JObject(p)", span="1085-1085"];
m1_672 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenClear()", file="DynamicReflectionDelegateFactoryTests.cs", label="l.Clear()", span="1089-1089"];
m1_669 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenClear()", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p = new JProperty(''Test'', 1)", span="1084-1084"];
m1_674 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenClear()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenClear()", span="1082-1082"];
m1_721 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemove()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemove()", span="1167-1167"];
m1_735 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemove()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(null, p2.Parent)", span="1187-1187"];
m1_727 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemove()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(2, l.Count)", span="1177-1177"];
m1_729 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemove()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(1, l.Count)", span="1180-1180"];
m1_733 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemove()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(0, l.Count)", span="1185-1185"];
m1_723 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemove()", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="1170-1170"];
m1_734 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemove()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.IsFalse(l.Contains(p2))", span="1186-1186"];
m1_724 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemove()", file="DynamicReflectionDelegateFactoryTests.cs", label="IList<JToken> l = new JObject(p1, p2)", span="1171-1171"];
m1_726 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemove()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.IsFalse(l.Remove(p3))", span="1176-1176"];
m1_728 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemove()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.IsTrue(l.Remove(p1))", span="1179-1179"];
m1_730 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemove()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.IsFalse(l.Contains(p1))", span="1181-1181"];
m1_732 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemove()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.IsTrue(l.Remove(p2))", span="1184-1184"];
m1_722 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemove()", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p1 = new JProperty(''Test1'', 1)", span="1169-1169"];
m1_725 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemove()", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p3 = new JProperty(''Test3'', ''III'')", span="1173-1173"];
m1_731 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemove()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.IsTrue(l.Contains(p2))", span="1182-1182"];
m1_736 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemove()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemove()", span="1167-1167"];
m1_277 [cluster="Newtonsoft.Json.Linq.JObject.Parse(string)", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Linq.JObject.Parse(string)", span="359-359"];
m1_1174 [cluster="Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver.CamelCasePropertyNamesContractResolver()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver.CamelCasePropertyNamesContractResolver()", span="38-38"];
m1_946 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetGeocodeAddress()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GetGeocodeAddress()", span="1498-1498"];
m1_950 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetGeocodeAddress()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(''435 N Mulford Rd'', searchAddress)", span="1548-1548"];
m1_949 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetGeocodeAddress()", file="DynamicReflectionDelegateFactoryTests.cs", label="string searchAddress = (string)o[''Placemark''][0][''AddressDetails''][''Country''][''AdministrativeArea''][''SubAdministrativeArea''][''Locality''][''Thoroughfare''][''ThoroughfareName'']", span="1547-1547"];
m1_948 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetGeocodeAddress()", file="DynamicReflectionDelegateFactoryTests.cs", label="JObject o = JObject.Parse(json)", span="1545-1545"];
m1_947 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetGeocodeAddress()", file="DynamicReflectionDelegateFactoryTests.cs", label="string json = @''{\r\n  ''''name'''': ''''Address: 435 North Mulford Road Rockford, IL 61107'''',\r\n  ''''Status'''': {\r\n    ''''code'''': 200,\r\n    ''''request'''': ''''geocode''''\r\n  },\r\n  ''''Placemark'''': [ {\r\n    ''''id'''': ''''p1'''',\r\n    ''''address'''': ''''435 N Mulford Rd, Rockford, IL 61107, USA'''',\r\n    ''''AddressDetails'''': {\r\n   ''''Accuracy'''' : 8,\r\n   ''''Country'''' : {\r\n      ''''AdministrativeArea'''' : {\r\n         ''''AdministrativeAreaName'''' : ''''IL'''',\r\n         ''''SubAdministrativeArea'''' : {\r\n            ''''Locality'''' : {\r\n               ''''LocalityName'''' : ''''Rockford'''',\r\n               ''''PostalCode'''' : {\r\n                  ''''PostalCodeNumber'''' : ''''61107''''\r\n               },\r\n               ''''Thoroughfare'''' : {\r\n                  ''''ThoroughfareName'''' : ''''435 N Mulford Rd''''\r\n               }\r\n            },\r\n            ''''SubAdministrativeAreaName'''' : ''''Winnebago''''\r\n         }\r\n      },\r\n      ''''CountryName'''' : ''''USA'''',\r\n      ''''CountryNameCode'''' : ''''US''''\r\n   }\r\n},\r\n    ''''ExtendedData'''': {\r\n      ''''LatLonBox'''': {\r\n        ''''north'''': 42.2753076,\r\n        ''''south'''': 42.2690124,\r\n        ''''east'''': -88.9964645,\r\n        ''''west'''': -89.0027597\r\n      }\r\n    },\r\n    ''''Point'''': {\r\n      ''''coordinates'''': [ -88.9995886, 42.2721596, 0 ]\r\n    }\r\n  } ]\r\n}''", span="1500-1543"];
m1_951 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetGeocodeAddress()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GetGeocodeAddress()", span="1498-1498"];
m1_165 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericDictionaryContains()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericDictionaryContains()", span="297-297"];
m1_168 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericDictionaryContains()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(1, o.Children().Count())", span="301-301"];
m1_170 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericDictionaryContains()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(true, contains)", span="304-304"];
m1_166 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericDictionaryContains()", file="DynamicReflectionDelegateFactoryTests.cs", label="JObject o = new JObject()", span="299-299"];
m1_167 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericDictionaryContains()", file="DynamicReflectionDelegateFactoryTests.cs", label="o.Add(''PropertyNameValue'', new JValue(1))", span="300-300"];
m1_169 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericDictionaryContains()", file="DynamicReflectionDelegateFactoryTests.cs", label="bool contains = ((IDictionary<string, JToken>)o).ContainsKey(''PropertyNameValue'')", span="303-303"];
m1_171 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericDictionaryContains()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericDictionaryContains()", span="297-297"];
m1_123 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericDictionaryAdd()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericDictionaryAdd()", span="234-234"];
m1_124 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericDictionaryAdd()", file="DynamicReflectionDelegateFactoryTests.cs", label="JObject o = new JObject()", span="236-236"];
m1_125 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericDictionaryAdd()", file="DynamicReflectionDelegateFactoryTests.cs", label="o.Add(''PropertyNameValue'', new JValue(1))", span="238-238"];
m1_784 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSortDirection()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSortDirection()", span="1264-1264"];
m1_786 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSortDirection()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(ListSortDirection.Ascending, l.SortDirection)", span="1267-1267"];
m1_785 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSortDirection()", file="DynamicReflectionDelegateFactoryTests.cs", label="IBindingList l = new JObject()", span="1266-1266"];
m1_787 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSortDirection()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSortDirection()", span="1264-1264"];
m1_737 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemoveAt()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemoveAt()", span="1191-1191"];
m1_743 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemoveAt()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(1, l.Count)", span="1201-1201"];
m1_745 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemoveAt()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(0, l.Count)", span="1204-1204"];
m1_740 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemoveAt()", file="DynamicReflectionDelegateFactoryTests.cs", label="IList<JToken> l = new JObject(p1, p2)", span="1195-1195"];
m1_742 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemoveAt()", file="DynamicReflectionDelegateFactoryTests.cs", label="l.Remove(p1)", span="1200-1200"];
m1_744 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemoveAt()", file="DynamicReflectionDelegateFactoryTests.cs", label="l.Remove(p2)", span="1203-1203"];
m1_738 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemoveAt()", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p1 = new JProperty(''Test1'', 1)", span="1193-1193"];
m1_739 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemoveAt()", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="1194-1194"];
m1_741 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemoveAt()", file="DynamicReflectionDelegateFactoryTests.cs", label="l.RemoveAt(0)", span="1198-1198"];
m1_746 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemoveAt()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemoveAt()", span="1191-1191"];
m1_296 [cluster="Newtonsoft.Json.Linq.JToken.Value<T>(object)", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Linq.JToken.Value<T>(object)", span="319-319"];
m1_360 [cluster="Newtonsoft.Json.Tests.TestObjects.Shortie.Shortie()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.TestObjects.Shortie.Shortie()", span="27-27"];
m1_591 [cluster="System.Collections.IList.RemoveAt(int)", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry System.Collections.IList.RemoveAt(int)", span="0-0"];
m1_828 [cluster="System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor, System.ComponentModel.ListSortDirection)", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor, System.ComponentModel.ListSortDirection)", span="0-0"];
m1_74 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="object structTest = new StructTest()", span="134-134"];
m1_77 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(''Hi'', ((StructTest)structTest).StringProperty)", span="140-140"];
m1_79 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit lambda expression", span="132-143"];
m1_82 [cluster="Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.CreateSetWithBadObjectValue()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.CreateSetWithBadObjectValue()", span="147-147"];
m1_86 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="Movie m = new Movie()", span="151-151"];
m1_80 [cluster="Newtonsoft.Json.Tests.TestObjects.StructTest.StructTest()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.TestObjects.StructTest.StructTest()", span="27-27"];
m1_84 [cluster="Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.CreateSetWithBadObjectValue()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.CreateSetWithBadObjectValue()", span="147-147"];
m1_88 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="setter(m, new Version(''1.1.1.1''))", span="155-155"];
m1_76 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="setter(structTest, ''Hi'')", span="138-138"];
m1_78 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="setter(new TimeSpan(), ''Hi'')", span="142-142"];
m1_81 [cluster="System.TimeSpan.TimeSpan()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry System.TimeSpan.TimeSpan()", span="0-0"];
m1_85 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry lambda expression", span="149-156"];
m1_89 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit lambda expression", span="149-156"];
m1_385 [cluster="Newtonsoft.Json.Linq.JValue.JValue(System.DateTime)", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Linq.JValue.JValue(System.DateTime)", span="125-125"];
m1_59 [cluster="Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.CreateSetWithBadObjectTarget()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.CreateSetWithBadObjectTarget()", span="110-110"];
m1_61 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="Person p = new Person()", span="114-114"];
m1_65 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(m.Name, ''Hi'')", span="121-121"];
m1_62 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="Movie m = new Movie()", span="115-115"];
m1_64 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="setter(m, ''Hi'')", span="119-119"];
m1_66 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="setter(p, ''Hi'')", span="123-123"];
m1_57 [cluster="Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.CreateSetWithBadObjectTarget()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.CreateSetWithBadObjectTarget()", span="110-110"];
m1_60 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry lambda expression", span="112-126"];
m1_67 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(p.Name, ''Hi'')", span="125-125"];
m1_147 [cluster="System.Collections.Generic.ICollection<T>.Clear()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry System.Collections.Generic.ICollection<T>.Clear()", span="0-0"];
m1_410 [cluster="Newtonsoft.Json.Linq.JObject.JObject(params object[])", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Linq.JObject.JObject(params object[])", span="104-104"];
m1_604 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListIsReadOnly()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IListIsReadOnly()", span="984-984"];
m1_605 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListIsReadOnly()", file="DynamicReflectionDelegateFactoryTests.cs", label="IList l = new JObject()", span="986-986"];
m1_606 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListIsReadOnly()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.IsFalse(l.IsReadOnly)", span="987-987"];
m1_607 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListIsReadOnly()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IListIsReadOnly()", span="984-984"];
m1_711 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAddPropertyWithExistingName()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAddPropertyWithExistingName()", span="1152-1152"];
m1_712 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAddPropertyWithExistingName()", file="DynamicReflectionDelegateFactoryTests.cs", label="ExceptionAssert.Throws<ArgumentException>(() =>\r\n            {\r\n                JProperty p1 = new JProperty(''Test1'', 1);\r\n                JProperty p2 = new JProperty(''Test2'', ''Two'');\r\n                IList<JToken> l = new JObject(p1, p2);\r\n\r\n                JProperty p3 = new JProperty(''Test2'', ''II'');\r\n\r\n                l.Add(p3);\r\n            }, ''Can not add property Test2 to Newtonsoft.Json.Linq.JObject. Property with the same name already exists on object.'')", span="1154-1163"];
m1_713 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAddPropertyWithExistingName()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAddPropertyWithExistingName()", span="1152-1152"];
m1_1063 [cluster="System.ComponentModel.PropertyDescriptor.ShouldSerializeValue(object)", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry System.ComponentModel.PropertyDescriptor.ShouldSerializeValue(object)", span="0-0"];
m1_1081 [cluster="System.Uri.Uri(string)", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry System.Uri.Uri(string)", span="0-0"];
m1_499 [cluster="Newtonsoft.Json.Linq.JObject.JObject(object)", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Linq.JObject.JObject(object)", span="113-113"];
m1_608 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListIsFixedSize()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IListIsFixedSize()", span="991-991"];
m1_609 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListIsFixedSize()", file="DynamicReflectionDelegateFactoryTests.cs", label="IList l = new JObject()", span="993-993"];
m1_610 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListIsFixedSize()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.IsFalse(l.IsFixedSize)", span="994-994"];
m1_611 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListIsFixedSize()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IListIsFixedSize()", span="991-991"];
m1_231 [cluster="Newtonsoft.Json.Linq.JRaw.JRaw(object)", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Linq.JRaw.JRaw(object)", span="48-48"];
m1_1064 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseEmptyObjectWithComment()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.ParseEmptyObjectWithComment()", span="1740-1740"];
m1_1066 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseEmptyObjectWithComment()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(0, o.Count)", span="1743-1743"];
m1_1065 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseEmptyObjectWithComment()", file="DynamicReflectionDelegateFactoryTests.cs", label="JObject o = JObject.Parse(''{ /* A Comment */ }'')", span="1742-1742"];
m1_1067 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseEmptyObjectWithComment()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.ParseEmptyObjectWithComment()", span="1740-1740"];
m1_269 [cluster="Newtonsoft.Json.JsonSerializer.Deserialize(Newtonsoft.Json.JsonReader, System.Type)", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.JsonSerializer.Deserialize(Newtonsoft.Json.JsonReader, System.Type)", span="700-700"];
m1_837 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListRemoveIndex()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListRemoveIndex()", span="1348-1348"];
m1_838 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListRemoveIndex()", file="DynamicReflectionDelegateFactoryTests.cs", label="IBindingList l = new JObject()", span="1350-1350"];
m1_839 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListRemoveIndex()", file="DynamicReflectionDelegateFactoryTests.cs", label="l.RemoveIndex(null)", span="1352-1352"];
m1_840 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListRemoveIndex()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListRemoveIndex()", span="1348-1348"];
m1_632 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItemInvalid()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItemInvalid()", span="1029-1029"];
m1_633 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItemInvalid()", file="DynamicReflectionDelegateFactoryTests.cs", label="ExceptionAssert.Throws<ArgumentException>(() =>\r\n            {\r\n                JProperty p1 = new JProperty(''Test1'', 1);\r\n                JProperty p2 = new JProperty(''Test2'', ''Two'');\r\n                IList l = new JObject(p1, p2);\r\n\r\n                l[0] = new JValue(true);\r\n            }, @''Can not add Newtonsoft.Json.Linq.JValue to Newtonsoft.Json.Linq.JObject.'')", span="1031-1038"];
m1_634 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItemInvalid()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItemInvalid()", span="1029-1029"];
m1_792 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSupportsChangeNotification()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSupportsChangeNotification()", span="1278-1278"];
m1_794 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSupportsChangeNotification()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(true, l.SupportsChangeNotification)", span="1281-1281"];
m1_793 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSupportsChangeNotification()", file="DynamicReflectionDelegateFactoryTests.cs", label="IBindingList l = new JObject()", span="1280-1280"];
m1_795 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSupportsChangeNotification()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSupportsChangeNotification()", span="1278-1278"];
m1_675 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenCopyTo()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenCopyTo()", span="1095-1095"];
m1_681 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenCopyTo()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(p1, a[0])", span="1105-1105"];
m1_682 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenCopyTo()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(p2, a[1])", span="1106-1106"];
m1_676 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenCopyTo()", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p1 = new JProperty(''Test1'', 1)", span="1097-1097"];
m1_679 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenCopyTo()", file="DynamicReflectionDelegateFactoryTests.cs", label="JToken[] a = new JToken[l.Count]", span="1101-1101"];
m1_680 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenCopyTo()", file="DynamicReflectionDelegateFactoryTests.cs", label="l.CopyTo(a, 0)", span="1103-1103"];
m1_677 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenCopyTo()", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="1098-1098"];
m1_678 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenCopyTo()", file="DynamicReflectionDelegateFactoryTests.cs", label="IList<JToken> l = new JObject(p1, p2)", span="1099-1099"];
m1_683 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenCopyTo()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenCopyTo()", span="1095-1095"];
m1_971 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullDBNullValue()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullDBNullValue()", span="1588-1588"];
m1_974 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullDBNullValue()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(DBNull.Value, v.Value)", span="1592-1592"];
m1_975 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullDBNullValue()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(JTokenType.Null, v.Type)", span="1593-1593"];
m1_976 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullDBNullValue()", file="DynamicReflectionDelegateFactoryTests.cs", label="JObject o = new JObject()", span="1595-1595"];
m1_973 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullDBNullValue()", file="DynamicReflectionDelegateFactoryTests.cs", label="JValue v = new JValue(dbNull)", span="1591-1591"];
m1_977 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullDBNullValue()", file="DynamicReflectionDelegateFactoryTests.cs", label="o[''title''] = v", span="1596-1596"];
m1_978 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullDBNullValue()", file="DynamicReflectionDelegateFactoryTests.cs", label="string output = o.ToString()", span="1598-1598"];
m1_972 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullDBNullValue()", file="DynamicReflectionDelegateFactoryTests.cs", label="DBNull dbNull = DBNull.Value", span="1590-1590"];
m1_979 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullDBNullValue()", file="DynamicReflectionDelegateFactoryTests.cs", label="StringAssert.AreEqual(@''{\r\n  ''''title'''': null\r\n}'', output)", span="1600-1602"];
m1_980 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullDBNullValue()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullDBNullValue()", span="1588-1588"];
m1_101 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionRemove()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionRemove()", span="207-207"];
m1_69 [cluster="Newtonsoft.Json.Tests.TestObjects.Movie.Movie()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.TestObjects.Movie.Movie()", span="30-30"];
m1_1193 [cluster="Newtonsoft.Json.JsonSerializerSettings.JsonSerializerSettings()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.JsonSerializerSettings.JsonSerializerSettings()", span="382-382"];
m1_284 [cluster="Newtonsoft.Json.JsonConvert.DeserializeObject(string)", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.JsonConvert.DeserializeObject(string)", span="703-703"];
m1_1018 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.LoadFromNestedObjectIncomplete()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.LoadFromNestedObjectIncomplete()", span="1676-1676"];
m1_1019 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.LoadFromNestedObjectIncomplete()", file="DynamicReflectionDelegateFactoryTests.cs", label="ExceptionAssert.Throws<JsonReaderException>(() =>\r\n            {\r\n                string jsonText = @''{\r\n  ''''short'''':\r\n  {\r\n    ''''error'''':\r\n    {\r\n      ''''code'''':0'';\r\n\r\n                JsonReader reader = new JsonTextReader(new StringReader(jsonText));\r\n                reader.Read();\r\n                reader.Read();\r\n                reader.Read();\r\n                reader.Read();\r\n                reader.Read();\r\n\r\n                JToken.ReadFrom(reader);\r\n            }, ''Unexpected end of content while loading JObject. Path 'short.error.code', line 6, position 15.'')", span="1678-1695"];
m1_1020 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.LoadFromNestedObjectIncomplete()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.LoadFromNestedObjectIncomplete()", span="1676-1676"];
m1_126 [cluster="Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.StructMethod(Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.TestStruct)", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.StructMethod(Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.TestStruct)", span="215-215"];
m1_128 [cluster="Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.StructMethod(Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.TestStruct)", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.StructMethod(Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.TestStruct)", span="215-215"];
m1_129 [cluster="Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.CreateStructMethodCall()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.CreateStructMethodCall()", span="221-221"];
m1_127 [cluster="Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.StructMethod(Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.TestStruct)", file="DynamicReflectionDelegateFactoryTests.cs", label="return new TestStruct(s.Value + s.Value);", span="217-217"];
m1_130 [cluster="Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.CreateStructMethodCall()", file="DynamicReflectionDelegateFactoryTests.cs", label="MethodInfo methodInfo = typeof(DynamicReflectionDelegateFactoryTests).GetMethod(nameof(StructMethod), new[] { typeof(TestStruct) })", span="223-223"];
m1_18 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReadWithSupportMultipleContent()", file="DynamicReflectionDelegateFactoryTests.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="89-89"];
m1_1111 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ToListOnEmptyObject()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.ToListOnEmptyObject()", span="1844-1844"];
m1_1114 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ToListOnEmptyObject()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(0, l1.Count)", span="1848-1848"];
m1_1116 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ToListOnEmptyObject()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(0, l2.Count)", span="1851-1851"];
m1_1119 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ToListOnEmptyObject()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(1, l1.Count)", span="1856-1856"];
m1_1121 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ToListOnEmptyObject()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(1, l2.Count)", span="1859-1859"];
m1_1113 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ToListOnEmptyObject()", file="DynamicReflectionDelegateFactoryTests.cs", label="IList<JToken> l1 = o.ToList<JToken>()", span="1847-1847"];
m1_1115 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ToListOnEmptyObject()", file="DynamicReflectionDelegateFactoryTests.cs", label="IList<KeyValuePair<string, JToken>> l2 = o.ToList<KeyValuePair<string, JToken>>()", span="1850-1850"];
m1_1117 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ToListOnEmptyObject()", file="DynamicReflectionDelegateFactoryTests.cs", label="o = JObject.Parse(@''{'hi':null}'')", span="1853-1853"];
m1_1118 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ToListOnEmptyObject()", file="DynamicReflectionDelegateFactoryTests.cs", label="l1 = o.ToList<JToken>()", span="1855-1855"];
m1_1120 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ToListOnEmptyObject()", file="DynamicReflectionDelegateFactoryTests.cs", label="l2 = o.ToList<KeyValuePair<string, JToken>>()", span="1858-1858"];
m1_1112 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ToListOnEmptyObject()", file="DynamicReflectionDelegateFactoryTests.cs", label="JObject o = JObject.Parse(@''{}'')", span="1846-1846"];
m1_1122 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ToListOnEmptyObject()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.ToListOnEmptyObject()", span="1844-1844"];
m1_882 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ITypedListGetItemProperties()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.ITypedListGetItemProperties()", span="1408-1408"];
m1_883 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ITypedListGetItemProperties()", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p1 = new JProperty(''Test1'', 1)", span="1410-1410"];
m1_884 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ITypedListGetItemProperties()", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="1411-1411"];
m1_887 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ITypedListGetItemProperties()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.IsNull(propertyDescriptors)", span="1415-1415"];
m1_885 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ITypedListGetItemProperties()", file="DynamicReflectionDelegateFactoryTests.cs", label="ITypedList l = new JObject(p1, p2)", span="1412-1412"];
m1_886 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ITypedListGetItemProperties()", file="DynamicReflectionDelegateFactoryTests.cs", label="PropertyDescriptorCollection propertyDescriptors = l.GetItemProperties(null)", span="1414-1414"];
m1_888 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ITypedListGetItemProperties()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.ITypedListGetItemProperties()", span="1408-1408"];
m1_413 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", span="721-721"];
m1_424 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(''value1'', (string)o[''StringValue''])", span="745-745"];
m1_433 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(''value2'', (string)o[''StringValue''])", span="756-756"];
m1_439 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(null, (string)o[''StringValue''])", span="763-763"];
m1_445 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(JValue.CreateNull(), o[''NullValue''])", span="770-770"];
m1_422 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(null, changing)", span="743-743"];
m1_423 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(''value1'', changed)", span="744-744"];
m1_425 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(1, changingCount)", span="746-746"];
m1_426 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(1, changedCount)", span="747-747"];
m1_428 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(1, changingCount)", span="750-750"];
m1_429 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(1, changedCount)", span="751-751"];
m1_431 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(''value1'', changing)", span="754-754"];
m1_432 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(''value2'', changed)", span="755-755"];
m1_434 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(2, changingCount)", span="757-757"];
m1_435 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(2, changedCount)", span="758-758"];
m1_437 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(''value2'', changing)", span="761-761"];
m1_438 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(null, changed)", span="762-762"];
m1_440 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(3, changingCount)", span="764-764"];
m1_441 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(3, changedCount)", span="765-765"];
m1_443 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(null, changing)", span="768-768"];
m1_444 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(null, changed)", span="769-769"];
m1_446 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(4, changingCount)", span="771-771"];
m1_447 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(4, changedCount)", span="772-772"];
m1_449 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(4, changingCount)", span="775-775"];
m1_450 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(4, changedCount)", span="776-776"];
m1_418 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", file="DynamicReflectionDelegateFactoryTests.cs", label="JObject o = new JObject()", span="728-728"];
m1_421 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", file="DynamicReflectionDelegateFactoryTests.cs", label="o[''StringValue''] = ''value1''", span="742-742"];
m1_427 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", file="DynamicReflectionDelegateFactoryTests.cs", label="o[''StringValue''] = ''value1''", span="749-749"];
m1_430 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", file="DynamicReflectionDelegateFactoryTests.cs", label="o[''StringValue''] = ''value2''", span="753-753"];
m1_436 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", file="DynamicReflectionDelegateFactoryTests.cs", label="o[''StringValue''] = null", span="760-760"];
m1_442 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", file="DynamicReflectionDelegateFactoryTests.cs", label="o[''NullValue''] = null", span="767-767"];
m1_448 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", file="DynamicReflectionDelegateFactoryTests.cs", label="o[''NullValue''] = null", span="774-774"];
m1_417 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", file="DynamicReflectionDelegateFactoryTests.cs", label="int changedCount = 0", span="726-726"];
m1_419 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", file="DynamicReflectionDelegateFactoryTests.cs", label="o.PropertyChanging += (sender, args) =>\r\n            {\r\n                JObject s = (JObject)sender;\r\n                changing = (s[args.PropertyName] != null) ? ((JValue)s[args.PropertyName]).Value : null;\r\n                changingCount++;\r\n            }", span="729-734"];
m1_420 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", file="DynamicReflectionDelegateFactoryTests.cs", label="o.PropertyChanged += (sender, args) =>\r\n            {\r\n                JObject s = (JObject)sender;\r\n                changed = (s[args.PropertyName] != null) ? ((JValue)s[args.PropertyName]).Value : null;\r\n                changedCount++;\r\n            }", span="735-740"];
m1_416 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", file="DynamicReflectionDelegateFactoryTests.cs", label="int changingCount = 0", span="725-725"];
m1_414 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", file="DynamicReflectionDelegateFactoryTests.cs", label="object changing = null", span="723-723"];
m1_415 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", file="DynamicReflectionDelegateFactoryTests.cs", label="object changed = null", span="724-724"];
m1_451 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", span="721-721"];
m1_164 [cluster="System.Collections.Generic.ICollection<T>.Contains(T)", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry System.Collections.Generic.ICollection<T>.Contains(T)", span="0-0"];
m1_820 [cluster="System.ComponentModel.IBindingList.AddIndex(System.ComponentModel.PropertyDescriptor)", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry System.ComponentModel.IBindingList.AddIndex(System.ComponentModel.PropertyDescriptor)", span="0-0"];
m1_31 [cluster="Newtonsoft.Json.Linq.JToken.ReadFrom(Newtonsoft.Json.JsonReader)", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Linq.JToken.ReadFrom(Newtonsoft.Json.JsonReader)", span="1849-1849"];
m1_32 [cluster="System.Collections.Generic.ICollection<T>.Add(T)", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry System.Collections.Generic.ICollection<T>.Add(T)", span="0-0"];
m1_34 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JObjectWithComments()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.JObjectWithComments()", span="108-108"];
m1_35 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JObjectWithComments()", color=green, community=0, file="DynamicReflectionDelegateFactoryTests.cs", label="string json = @''{ /*comment2*/\r\n        ''''Name'''': /*comment3*/ ''''Apple'''' /*comment4*/, /*comment5*/\r\n        ''''ExpiryDate'''': ''''\/Date(1230422400000)\/'''',\r\n        ''''Price'''': 3.99,\r\n        ''''Sizes'''': /*comment6*/ [ /*comment7*/\r\n          ''''Small'''', /*comment8*/\r\n          ''''Medium'''' /*comment9*/,\r\n          /*comment10*/ ''''Large''''\r\n        /*comment11*/ ] /*comment12*/\r\n      } /*comment13*/''", prediction=22, span="110-119"];
m1_36 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JObjectWithComments()", file="DynamicReflectionDelegateFactoryTests.cs", label="JToken o = JToken.Parse(json)", span="121-121"];
m1_37 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JObjectWithComments()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(''Apple'', (string) o[''Name''])", span="123-123"];
m1_38 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JObjectWithComments()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.JObjectWithComments()", span="108-108"];
m1_39 [cluster="Newtonsoft.Json.Linq.JToken.Parse(string)", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Linq.JToken.Parse(string)", span="1902-1902"];
m1_40 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WritePropertyWithNoValue()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.WritePropertyWithNoValue()", span="127-127"];
m1_278 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseJavaScriptDate()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.ParseJavaScriptDate()", span="471-471"];
m1_282 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseJavaScriptDate()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(DateTimeUtils.ConvertJavaScriptTicksToDateTime(1207285200000), (DateTime)v)", span="478-478"];
m1_281 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseJavaScriptDate()", file="DynamicReflectionDelegateFactoryTests.cs", label="JValue v = (JValue)a[0]", span="476-476"];
m1_280 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseJavaScriptDate()", file="DynamicReflectionDelegateFactoryTests.cs", label="JArray a = (JArray)JsonConvert.DeserializeObject(json)", span="475-475"];
m1_279 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseJavaScriptDate()", file="DynamicReflectionDelegateFactoryTests.cs", label="string json = @''[new Date(1207285200000)]''", span="473-473"];
m1_283 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseJavaScriptDate()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.ParseJavaScriptDate()", span="471-471"];
m1_1124 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.EmptyObjectDeepEquals()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.EmptyObjectDeepEquals()", span="1863-1863"];
m1_1125 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.EmptyObjectDeepEquals()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.IsTrue(JToken.DeepEquals(new JObject(), new JObject()))", span="1865-1865"];
m1_1126 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.EmptyObjectDeepEquals()", file="DynamicReflectionDelegateFactoryTests.cs", label="JObject a = new JObject()", span="1867-1867"];
m1_1127 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.EmptyObjectDeepEquals()", file="DynamicReflectionDelegateFactoryTests.cs", label="JObject b = new JObject()", span="1868-1868"];
m1_1129 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.EmptyObjectDeepEquals()", file="DynamicReflectionDelegateFactoryTests.cs", label="b.Remove(''hi'')", span="1871-1871"];
m1_1128 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.EmptyObjectDeepEquals()", file="DynamicReflectionDelegateFactoryTests.cs", label="b.Add(''hi'', ''bye'')", span="1870-1870"];
m1_1130 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.EmptyObjectDeepEquals()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.IsTrue(JToken.DeepEquals(a, b))", span="1873-1873"];
m1_1131 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.EmptyObjectDeepEquals()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.IsTrue(JToken.DeepEquals(b, a))", span="1874-1874"];
m1_1132 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.EmptyObjectDeepEquals()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.EmptyObjectDeepEquals()", span="1863-1863"];
m1_205 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyToArrayIndexEqualGreaterToArrayLengthShouldThrow()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyToArrayIndexEqualGreaterToArrayLengthShouldThrow()", span="357-357"];
m1_206 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyToArrayIndexEqualGreaterToArrayLengthShouldThrow()", file="DynamicReflectionDelegateFactoryTests.cs", label="ExceptionAssert.Throws<ArgumentException>(() =>\r\n            {\r\n                JObject o = new JObject();\r\n                ((ICollection<KeyValuePair<string, JToken>>)o).CopyTo(new KeyValuePair<string, JToken>[1], 1);\r\n            }, @''arrayIndex is equal to or greater than the length of array.'')", span="359-363"];
m1_207 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyToArrayIndexEqualGreaterToArrayLengthShouldThrow()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyToArrayIndexEqualGreaterToArrayLengthShouldThrow()", span="357-357"];
m1_702 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAddBadValue()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAddBadValue()", span="1138-1138"];
m1_703 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAddBadValue()", file="DynamicReflectionDelegateFactoryTests.cs", label="ExceptionAssert.Throws<ArgumentException>(() =>\r\n            {\r\n                JProperty p1 = new JProperty(''Test1'', 1);\r\n                JProperty p2 = new JProperty(''Test2'', ''Two'');\r\n                IList<JToken> l = new JObject(p1, p2);\r\n\r\n                // string is implicitly converted to JValue\r\n                l.Add(''Bad!'');\r\n            }, ''Can not add Newtonsoft.Json.Linq.JValue to Newtonsoft.Json.Linq.JObject.'')", span="1140-1148"];
m1_704 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAddBadValue()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAddBadValue()", span="1138-1138"];
m1_759 [cluster="System.Collections.Generic.IList<T>.Insert(int, T)", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry System.Collections.Generic.IList<T>.Insert(int, T)", span="0-0"];
m1_959 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.SetValue()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.SetValue()", span="1562-1562"];
m1_963 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.SetValue()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(3, (int)o[key])", span="1569-1569"];
m1_961 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.SetValue()", file="DynamicReflectionDelegateFactoryTests.cs", label="JObject o = new JObject()", span="1566-1566"];
m1_960 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.SetValue()", file="DynamicReflectionDelegateFactoryTests.cs", label="object key = ''TestKey''", span="1564-1564"];
m1_962 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.SetValue()", file="DynamicReflectionDelegateFactoryTests.cs", label="o[key] = new JValue(3)", span="1567-1567"];
m1_964 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.SetValue()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.SetValue()", span="1562-1562"];
m1_812 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAllowRemove()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAllowRemove()", span="1313-1313"];
m1_814 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAllowRemove()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(true, l.AllowRemove)", span="1316-1316"];
m1_813 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAllowRemove()", file="DynamicReflectionDelegateFactoryTests.cs", label="IBindingList l = new JObject()", span="1315-1315"];
m1_815 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAllowRemove()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAllowRemove()", span="1313-1313"];
m1_10 [cluster="Newtonsoft.Json.Linq.JObject.FromObject(object)", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Linq.JObject.FromObject(object)", span="377-377"];
m1_44 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WritePropertyWithNoValue()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.WritePropertyWithNoValue()", span="127-127"];
m1_46 [cluster="Newtonsoft.Json.Linq.JProperty.JProperty(string)", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Linq.JProperty.JProperty(string)", span="270-270"];
m1_257 [cluster="Unk.IsFalse", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Unk.IsFalse", span=""];
m1_113 [cluster="Unk.call", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Unk.call", span=""];
m1_11 [cluster="Unk.ToString", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Unk.ToString", span=""];
m1_112 [cluster="System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", span="0-0"];
m1_409 [cluster="Newtonsoft.Json.Linq.JProperty.JProperty(string, object)", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Linq.JProperty.JProperty(string, object)", span="293-293"];
m1_8 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.EmbedJValueStringInNewJObject()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.EmbedJValueStringInNewJObject()", span="65-65"];
m1_321 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.KeyValuePairIterate()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.KeyValuePairIterate()", span="539-539"];
m1_327 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.KeyValuePairIterate()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(''PropertyNameValue'' + i, pair.Key)", span="548-548"];
m1_328 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.KeyValuePairIterate()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(i, (int)pair.Value)", span="549-549"];
m1_322 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.KeyValuePairIterate()", file="DynamicReflectionDelegateFactoryTests.cs", label="JObject o = new JObject()", span="541-541"];
m1_326 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.KeyValuePairIterate()", file="DynamicReflectionDelegateFactoryTests.cs", label=o, span="546-546"];
m1_325 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.KeyValuePairIterate()", file="DynamicReflectionDelegateFactoryTests.cs", label="int i = 1", span="545-545"];
m1_329 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.KeyValuePairIterate()", file="DynamicReflectionDelegateFactoryTests.cs", label="i++", span="551-551"];
m1_323 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.KeyValuePairIterate()", file="DynamicReflectionDelegateFactoryTests.cs", label="o.Add(''PropertyNameValue1'', new JValue(1))", span="542-542"];
m1_324 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.KeyValuePairIterate()", file="DynamicReflectionDelegateFactoryTests.cs", label="o.Add(''PropertyNameValue2'', new JValue(2))", span="543-543"];
m1_330 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.KeyValuePairIterate()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.KeyValuePairIterate()", span="539-539"];
m1_796 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSupportsSearching()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSupportsSearching()", span="1285-1285"];
m1_798 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSupportsSearching()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(false, l.SupportsSearching)", span="1288-1288"];
m1_797 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSupportsSearching()", file="DynamicReflectionDelegateFactoryTests.cs", label="IBindingList l = new JObject()", span="1287-1287"];
m1_799 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSupportsSearching()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSupportsSearching()", span="1285-1285"];
m1_526 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListAdd()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IListAdd()", span="870-870"];
m1_532 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListAdd()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(3, l.Count)", span="880-880"];
m1_533 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListAdd()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(p3, l[2])", span="881-881"];
m1_529 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListAdd()", file="DynamicReflectionDelegateFactoryTests.cs", label="IList l = new JObject(p1, p2)", span="874-874"];
m1_531 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListAdd()", file="DynamicReflectionDelegateFactoryTests.cs", label="l.Add(p3)", span="878-878"];
m1_530 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListAdd()", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p3 = new JProperty(''Test3'', ''III'')", span="876-876"];
m1_527 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListAdd()", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p1 = new JProperty(''Test1'', 1)", span="872-872"];
m1_528 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListAdd()", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="873-873"];
m1_534 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListAdd()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IListAdd()", span="870-870"];
m1_836 [cluster="System.ComponentModel.IBindingList.RemoveSort()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry System.ComponentModel.IBindingList.RemoveSort()", span="0-0"];
m1_1165 [cluster="Newtonsoft.Json.Linq.JObject.TryGetValue(string, System.StringComparison, out Newtonsoft.Json.Linq.JToken)", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Linq.JObject.TryGetValue(string, System.StringComparison, out Newtonsoft.Json.Linq.JToken)", span="465-465"];
m1_1017 [cluster="Newtonsoft.Json.Linq.JToken.ToString(Newtonsoft.Json.Formatting, params Newtonsoft.Json.JsonConverter[])", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Linq.JToken.ToString(Newtonsoft.Json.Formatting, params Newtonsoft.Json.JsonConverter[])", span="421-421"];
m1_649 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListIsSynchronized()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IListIsSynchronized()", span="1052-1052"];
m1_650 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListIsSynchronized()", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p1 = new JProperty(''Test1'', 1)", span="1054-1054"];
m1_651 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListIsSynchronized()", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="1055-1055"];
m1_653 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListIsSynchronized()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.IsFalse(l.IsSynchronized)", span="1058-1058"];
m1_652 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListIsSynchronized()", file="DynamicReflectionDelegateFactoryTests.cs", label="IList l = new JObject(p1, p2)", span="1056-1056"];
m1_654 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListIsSynchronized()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IListIsSynchronized()", span="1052-1052"];
m1_875 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ITypedListGetListName()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.ITypedListGetListName()", span="1398-1398"];
m1_879 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ITypedListGetListName()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(string.Empty, l.GetListName(null))", span="1404-1404"];
m1_878 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ITypedListGetListName()", file="DynamicReflectionDelegateFactoryTests.cs", label="ITypedList l = new JObject(p1, p2)", span="1402-1402"];
m1_876 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ITypedListGetListName()", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p1 = new JProperty(''Test1'', 1)", span="1400-1400"];
m1_877 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ITypedListGetListName()", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="1401-1401"];
m1_880 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ITypedListGetListName()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.ITypedListGetListName()", span="1398-1398"];
m1_592 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListInsert()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IListInsert()", span="967-967"];
m1_599 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListInsert()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(p1, l[0])", span="978-978"];
m1_601 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListInsert()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(p2, l[2])", span="980-980"];
m1_598 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListInsert()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(l, p3.Parent)", span="976-976"];
m1_600 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListInsert()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(p3, l[1])", span="979-979"];
m1_593 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListInsert()", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p1 = new JProperty(''Test1'', 1)", span="969-969"];
m1_595 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListInsert()", file="DynamicReflectionDelegateFactoryTests.cs", label="IList l = new JObject(p1, p2)", span="971-971"];
m1_594 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListInsert()", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="970-970"];
m1_596 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListInsert()", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p3 = new JProperty(''Test3'', ''III'')", span="973-973"];
m1_597 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListInsert()", file="DynamicReflectionDelegateFactoryTests.cs", label="l.Insert(1, p3)", span="975-975"];
m1_602 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListInsert()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IListInsert()", span="967-967"];
m1_1194 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FooJsonConverter.FooJsonConverter()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.FooJsonConverter.FooJsonConverter()", span="1927-1927"];
m1_146 [cluster="System.Collections.Generic.IEnumerable<TSource>.ElementAt<TSource>(int)", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.ElementAt<TSource>(int)", span="0-0"];
m1_788 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSortProperty()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSortProperty()", span="1271-1271"];
m1_790 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSortProperty()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(null, l.SortProperty)", span="1274-1274"];
m1_789 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSortProperty()", file="DynamicReflectionDelegateFactoryTests.cs", label="IBindingList l = new JObject()", span="1273-1273"];
m1_791 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSortProperty()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSortProperty()", span="1271-1271"];
m1_29 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="c.GetParameters().Count() == 2", span="69-69"];
m1_1074 [cluster="Newtonsoft.Json.Linq.JToken.FromObject(object)", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Linq.JToken.FromObject(object)", span="1674-1674"];
m1_109 [cluster="Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.CreatePropertyGetter()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.IsNotNull(result)", span="188-188"];
m1_105 [cluster="Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.CreatePropertyGetter()", file="DynamicReflectionDelegateFactoryTests.cs", label="var call = DynamicReflectionDelegateFactory.Instance.CreateGet<Person>(namePropertyInfo)", span="182-182"];
m1_106 [cluster="Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.CreatePropertyGetter()", file="DynamicReflectionDelegateFactoryTests.cs", label="Person p = new Person()", span="184-184"];
m1_107 [cluster="Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.CreatePropertyGetter()", file="DynamicReflectionDelegateFactoryTests.cs", label="p.Name = ''Name!''", span="185-185"];
m1_108 [cluster="Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.CreatePropertyGetter()", file="DynamicReflectionDelegateFactoryTests.cs", label="object result = call(p)", span="187-187"];
m1_110 [cluster="Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.CreatePropertyGetter()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(''Name!'', (string)result)", span="190-190"];
m1_103 [cluster="Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.CreatePropertyGetter()", file="DynamicReflectionDelegateFactoryTests.cs", label="PropertyInfo namePropertyInfo = typeof(Person).GetProperty(nameof(Person.Name))", span="178-178"];
m1_102 [cluster="Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.CreatePropertyGetter()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.CreatePropertyGetter()", span="176-176"];
m1_104 [cluster="Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.CreatePropertyGetter()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.IsNotNull(namePropertyInfo)", span="180-180"];
m1_111 [cluster="Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.CreatePropertyGetter()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.CreatePropertyGetter()", span="176-176"];
m1_114 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DuplicatePropertyNameShouldThrow()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.DuplicatePropertyNameShouldThrow()", span="223-223"];
m1_116 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DuplicatePropertyNameShouldThrow()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.DuplicatePropertyNameShouldThrow()", span="223-223"];
m1_117 [cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", span="354-354"];
m1_119 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="JObject o = new JObject()", span="227-227"];
m1_120 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="o.Add(''PropertyNameValue'', null)", span="228-228"];
m1_121 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="o.Add(''PropertyNameValue'', null)", span="229-229"];
m1_191 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyToNullArrayShouldThrow()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyToNullArrayShouldThrow()", span="335-335"];
m1_192 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyToNullArrayShouldThrow()", file="DynamicReflectionDelegateFactoryTests.cs", label="ExceptionAssert.Throws<ArgumentException>(() =>\r\n            {\r\n                JObject o = new JObject();\r\n                ((ICollection<KeyValuePair<string, JToken>>)o).CopyTo(null, 0);\r\n            }, @''Value cannot be null.\r\nParameter name: array'')", span="337-342"];
m1_193 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyToNullArrayShouldThrow()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyToNullArrayShouldThrow()", span="335-335"];
m1_1166 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FooJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.FooJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", span="1929-1929"];
m1_1170 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FooJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", file="DynamicReflectionDelegateFactoryTests.cs", label="o.AddFirst(new JProperty(''foo'', ''bar''))", span="1938-1938"];
m1_1167 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FooJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", file="DynamicReflectionDelegateFactoryTests.cs", label="var token = JToken.FromObject(value, new JsonSerializer\r\n                {\r\n                    ContractResolver = new CamelCasePropertyNamesContractResolver()\r\n                })", span="1931-1934"];
m1_1169 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FooJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", file="DynamicReflectionDelegateFactoryTests.cs", label="var o = (JObject)token", span="1937-1937"];
m1_1171 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FooJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", file="DynamicReflectionDelegateFactoryTests.cs", label="o.WriteTo(writer)", span="1939-1939"];
m1_1168 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FooJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", file="DynamicReflectionDelegateFactoryTests.cs", label="token.Type == JTokenType.Object", span="1935-1935"];
m1_1172 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FooJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", file="DynamicReflectionDelegateFactoryTests.cs", label="token.WriteTo(writer)", span="1942-1942"];
m1_1173 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FooJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.FooJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", span="1929-1929"];
m1_1076 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectUri()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectUri()", span="1756-1756"];
m1_1078 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectUri()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(v.Value, new Uri(''http://www.stuff.co.nz''))", span="1759-1759"];
m1_1079 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectUri()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(''http://www.stuff.co.nz/'', v.ToString())", span="1761-1761"];
m1_1077 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectUri()", file="DynamicReflectionDelegateFactoryTests.cs", label="JValue v = (JValue)JToken.FromObject(new Uri(''http://www.stuff.co.nz''))", span="1758-1758"];
m1_1080 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectUri()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectUri()", span="1756-1756"];
m1_952 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.SetValueWithInvalidPropertyName()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.SetValueWithInvalidPropertyName()", span="1552-1552"];
m1_953 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.SetValueWithInvalidPropertyName()", file="DynamicReflectionDelegateFactoryTests.cs", label="ExceptionAssert.Throws<ArgumentException>(() =>\r\n            {\r\n                JObject o = new JObject();\r\n                o[0] = new JValue(3);\r\n            }, ''Set JObject values with invalid key value: 0. Object property name expected.'')", span="1554-1558"];
m1_954 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.SetValueWithInvalidPropertyName()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.SetValueWithInvalidPropertyName()", span="1552-1552"];
m1_1195 [cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.JsonSerializerSettings)", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.JsonSerializerSettings)", span="570-570"];
m1_68 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit lambda expression", span="112-126"];
m1_849 [cluster="System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor, object)", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor, object)", span="0-0"];
m1_621 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItemAlreadyExists()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItemAlreadyExists()", span="1013-1013"];
m1_622 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItemAlreadyExists()", file="DynamicReflectionDelegateFactoryTests.cs", label="ExceptionAssert.Throws<ArgumentException>(() =>\r\n            {\r\n                JProperty p1 = new JProperty(''Test1'', 1);\r\n                JProperty p2 = new JProperty(''Test2'', ''Two'');\r\n                IList l = new JObject(p1, p2);\r\n\r\n                JProperty p3 = new JProperty(''Test3'', ''III'');\r\n\r\n                l[0] = p3;\r\n                l[1] = p3;\r\n            }, ''Can not add property Test3 to Newtonsoft.Json.Linq.JObject. Property with the same name already exists on object.'')", span="1015-1025"];
m1_623 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItemAlreadyExists()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItemAlreadyExists()", span="1013-1013"];
m1_47 [cluster="Newtonsoft.Json.Linq.JContainer.Add(object)", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Linq.JContainer.Add(object)", span="569-569"];
m1_412 [cluster="Newtonsoft.Json.Linq.JObject.Properties()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Linq.JObject.Properties()", span="229-229"];
m1_1108 [cluster="Newtonsoft.Json.Linq.JProperty.JProperty(string, params object[])", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Linq.JProperty.JProperty(string, params object[])", span="283-283"];
m1_841 [cluster="System.ComponentModel.IBindingList.RemoveIndex(System.ComponentModel.PropertyDescriptor)", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry System.ComponentModel.IBindingList.RemoveIndex(System.ComponentModel.PropertyDescriptor)", span="0-0"];
m1_981 [cluster="Newtonsoft.Json.Linq.JValue.JValue(object)", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Linq.JValue.JValue(object)", span="190-190"];
m1_1073 [cluster="System.TimeSpan.FromDays(double)", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry System.TimeSpan.FromDays(double)", span="0-0"];
m1_131 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionAdd()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionAdd()", span="248-248"];
m1_132 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionAdd()", file="DynamicReflectionDelegateFactoryTests.cs", label="JObject o = new JObject()", span="250-250"];
m1_133 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionAdd()", file="DynamicReflectionDelegateFactoryTests.cs", label="((ICollection<KeyValuePair<string, JToken>>)o).Add(new KeyValuePair<string, JToken>(''PropertyNameValue'', new JValue(1)))", span="251-251"];
m1_134 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionAdd()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(1, (int)o[''PropertyNameValue''])", span="253-253"];
m1_135 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionAdd()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(1, o.Children().Count())", span="254-254"];
m1_136 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionAdd()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionAdd()", span="248-248"];
m1_350 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeClassManually()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeClassManually()", span="602-602"];
m1_354 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeClassManually()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(''http://www.foo.com/'', shortie.Original)", span="630-630"];
m1_355 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeClassManually()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(''krehqk'', shortie.Short)", span="631-631"];
m1_356 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeClassManually()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(null, shortie.Shortened)", span="632-632"];
m1_357 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeClassManually()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(0, shortie.Error.Code)", span="633-633"];
m1_358 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeClassManually()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(''No action taken'', shortie.Error.ErrorMessage)", span="634-634"];
m1_353 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeClassManually()", file="DynamicReflectionDelegateFactoryTests.cs", label="Shortie shortie = new Shortie\r\n            {\r\n                Original = (string)json[''short''][''original''],\r\n                Short = (string)json[''short''][''short''],\r\n                Error = new ShortieException\r\n                {\r\n                    Code = (int)json[''short''][''error''][''code''],\r\n                    ErrorMessage = (string)json[''short''][''error''][''msg'']\r\n                }\r\n            }", span="619-628"];
m1_352 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeClassManually()", file="DynamicReflectionDelegateFactoryTests.cs", label="JObject json = JObject.Parse(jsonText)", span="617-617"];
m1_351 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeClassManually()", file="DynamicReflectionDelegateFactoryTests.cs", label="string jsonText = @''{\r\n  ''''short'''':\r\n  {\r\n    ''''original'''':''''http://www.foo.com/'''',\r\n    ''''short'''':''''krehqk'''',\r\n    ''''error'''':\r\n    {\r\n      ''''code'''':0,\r\n      ''''msg'''':''''No action taken''''\r\n    }\r\n  }\r\n}''", span="604-615"];
m1_359 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeClassManually()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeClassManually()", span="602-602"];
m1_516 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListCopyTo()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IListCopyTo()", span="855-855"];
m1_522 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListCopyTo()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(p1, a[0])", span="865-865"];
m1_523 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListCopyTo()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(p2, a[1])", span="866-866"];
m1_517 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListCopyTo()", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p1 = new JProperty(''Test1'', 1)", span="857-857"];
m1_520 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListCopyTo()", file="DynamicReflectionDelegateFactoryTests.cs", label="object[] a = new object[l.Count]", span="861-861"];
m1_521 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListCopyTo()", file="DynamicReflectionDelegateFactoryTests.cs", label="l.CopyTo(a, 0)", span="863-863"];
m1_518 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListCopyTo()", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="858-858"];
m1_519 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListCopyTo()", file="DynamicReflectionDelegateFactoryTests.cs", label="IList l = new JObject(p1, p2)", span="859-859"];
m1_524 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListCopyTo()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IListCopyTo()", span="855-855"];
m1_255 [cluster="Newtonsoft.Json.JsonReader.Read()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.JsonReader.Read()", span="365-365"];
m1_48 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry lambda expression", span="98-106"];
m1_15 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="c.GetParameters().Count() == 1", span="56-56"];
m1_24 [cluster="Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.ConstructorWithRefStringAndOutBool()", color=green, community=0, file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.IsNotNull(o)", prediction=23, span="75-75"];
m1_17 [cluster="System.Reflection.MethodBase.GetParameters()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry System.Reflection.MethodBase.GetParameters()", span="0-0"];
m1_23 [cluster="Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.ConstructorWithRefStringAndOutBool()", file="DynamicReflectionDelegateFactoryTests.cs", label="OutAndRefTestClass o = (OutAndRefTestClass)creator(args)", span="74-74"];
m1_20 [cluster="Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.ConstructorWithRefStringAndOutBool()", file="DynamicReflectionDelegateFactoryTests.cs", label="ConstructorInfo constructor = typeof(OutAndRefTestClass).GetConstructors().Single(c => c.GetParameters().Count() == 2)", span="69-69"];
m1_25 [cluster="Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.ConstructorWithRefStringAndOutBool()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(''Input'', o.Input)", span="76-76"];
m1_16 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit lambda expression", span="56-56"];
m1_22 [cluster="Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.ConstructorWithRefStringAndOutBool()", file="DynamicReflectionDelegateFactoryTests.cs", label="object[] args = new object[] { ''Input'', false }", span="73-73"];
m1_26 [cluster="Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.ConstructorWithRefStringAndOutBool()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(true, o.B1)", span="77-77"];
m1_19 [cluster="Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.ConstructorWithRefStringAndOutBool()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.ConstructorWithRefStringAndOutBool()", span="67-67"];
m1_21 [cluster="Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.ConstructorWithRefStringAndOutBool()", file="DynamicReflectionDelegateFactoryTests.cs", label="var creator = DynamicReflectionDelegateFactory.Instance.CreateParameterizedConstructor(constructor)", span="71-71"];
m1_27 [cluster="Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.ConstructorWithRefStringAndOutBool()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.ConstructorWithRefStringAndOutBool()", span="67-67"];
m1_222 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectRaw()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectRaw()", span="381-381"];
m1_225 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectRaw()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(''FirstNameValue'', (string)o[''first_name''])", span="392-392"];
m1_226 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectRaw()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(JTokenType.Raw, ((JValue)o[''RawContent'']).Type)", span="393-393"];
m1_227 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectRaw()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(''[1,2,3,4,5]'', (string)o[''RawContent''])", span="394-394"];
m1_228 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectRaw()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(''LastNameValue'', (string)o[''last_name''])", span="395-395"];
m1_224 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectRaw()", file="DynamicReflectionDelegateFactoryTests.cs", label="JObject o = JObject.FromObject(raw)", span="390-390"];
m1_223 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectRaw()", file="DynamicReflectionDelegateFactoryTests.cs", label="PersonRaw raw = new PersonRaw\r\n            {\r\n                FirstName = ''FirstNameValue'',\r\n                RawContent = new JRaw(''[1,2,3,4,5]''),\r\n                LastName = ''LastNameValue''\r\n            }", span="383-388"];
m1_229 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectRaw()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectRaw()", span="381-381"];
m1_268 [cluster="Newtonsoft.Json.JsonSerializer.JsonSerializer()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.JsonSerializer.JsonSerializer()", span="445-445"];
m1_232 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()", span="399-399"];
m1_237 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="413-413"];
m1_239 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="416-416"];
m1_241 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(JsonToken.String, reader.TokenType)", span="419-419"];
m1_243 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="422-422"];
m1_245 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(JsonToken.Raw, reader.TokenType)", span="425-425"];
m1_247 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="428-428"];
m1_249 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(JsonToken.String, reader.TokenType)", span="431-431"];
m1_251 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(JsonToken.EndObject, reader.TokenType)", span="434-434"];
m1_235 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()", file="DynamicReflectionDelegateFactoryTests.cs", label="JsonReader reader = new JTokenReader(o)", span="410-410"];
m1_236 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.IsTrue(reader.Read())", span="412-412"];
m1_238 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.IsTrue(reader.Read())", span="415-415"];
m1_240 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.IsTrue(reader.Read())", span="418-418"];
m1_242 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.IsTrue(reader.Read())", span="421-421"];
m1_244 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.IsTrue(reader.Read())", span="424-424"];
m1_246 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.IsTrue(reader.Read())", span="427-427"];
m1_248 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.IsTrue(reader.Read())", span="430-430"];
m1_250 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.IsTrue(reader.Read())", span="433-433"];
m1_252 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.IsFalse(reader.Read())", span="436-436"];
m1_234 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()", file="DynamicReflectionDelegateFactoryTests.cs", label="JObject o = JObject.FromObject(raw)", span="408-408"];
m1_233 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()", file="DynamicReflectionDelegateFactoryTests.cs", label="PersonRaw raw = new PersonRaw\r\n            {\r\n                FirstName = ''FirstNameValue'',\r\n                RawContent = new JRaw(''[1,2,3,4,5]''),\r\n                LastName = ''LastNameValue''\r\n            }", span="401-406"];
m1_253 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()", span="399-399"];
m1_41 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry lambda expression", span="83-83"];
m1_42 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="c.GetParameters().Count() == 3", span="83-83"];
m1_43 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit lambda expression", span="83-83"];
m1_1140 [cluster="Newtonsoft.Json.Linq.JObject.GetValue(string, System.StringComparison)", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Linq.JObject.GetValue(string, System.StringComparison)", span="433-433"];
m1_1088 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseAdditionalContent()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.ParseAdditionalContent()", span="1774-1774"];
m1_1089 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseAdditionalContent()", file="DynamicReflectionDelegateFactoryTests.cs", label="ExceptionAssert.Throws<JsonReaderException>(() =>\r\n            {\r\n                string json = @''{\r\n''''Name'''': ''''Apple'''',\r\n''''Expiry'''': new Date(1230422400000),\r\n''''Price'''': 3.99,\r\n''''Sizes'''': [\r\n''''Small'''',\r\n''''Medium'''',\r\n''''Large''''\r\n]\r\n}, 987987'';\r\n\r\n                JObject o = JObject.Parse(json);\r\n            }, ''Additional text encountered after finished reading JSON content: ,. Path '', line 10, position 2.'')", span="1776-1790"];
m1_1090 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseAdditionalContent()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.ParseAdditionalContent()", span="1774-1774"];
m1_9 [cluster="Unk.Single", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Unk.Single", span=""];
m1_918 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()", span="1459-1459"];
m1_929 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(p3, ((IList<JToken>)o)[index.Value])", span="1479-1479"];
m1_934 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(p4, ((IList<JToken>)o)[index.Value])", span="1486-1486"];
m1_940 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(2, (int)o[''Test1''])", span="1493-1493"];
m1_927 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(changedType, NotifyCollectionChangedAction.Add)", span="1477-1477"];
m1_928 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(index, 2)", span="1478-1478"];
m1_932 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(changedType, NotifyCollectionChangedAction.Replace)", span="1484-1484"];
m1_933 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(index, 2)", span="1485-1485"];
m1_938 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(changedType, NotifyCollectionChangedAction.Replace)", span="1491-1491"];
m1_939 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(index, 0)", span="1492-1492"];
m1_921 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()", file="DynamicReflectionDelegateFactoryTests.cs", label="JObject o = new JObject(p1, p2)", span="1463-1463"];
m1_925 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p3 = new JProperty(''Test3'', ''III'')", span="1474-1474"];
m1_930 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p4 = new JProperty(''Test4'', ''IV'')", span="1481-1481"];
m1_935 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.IsFalse(((IList<JToken>)o).Contains(p3))", span="1487-1487"];
m1_926 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()", file="DynamicReflectionDelegateFactoryTests.cs", label="o.Add(p3)", span="1476-1476"];
m1_931 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()", file="DynamicReflectionDelegateFactoryTests.cs", label="((IList<JToken>)o)[index.Value] = p4", span="1483-1483"];
m1_937 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()", file="DynamicReflectionDelegateFactoryTests.cs", label="o[''Test1''] = 2", span="1490-1490"];
m1_919 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p1 = new JProperty(''Test1'', 1)", span="1461-1461"];
m1_920 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="1462-1462"];
m1_922 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()", file="DynamicReflectionDelegateFactoryTests.cs", label="NotifyCollectionChangedAction? changedType = null", span="1465-1465"];
m1_924 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()", file="DynamicReflectionDelegateFactoryTests.cs", label="o._collectionChanged += (s, a) =>\r\n            {\r\n                changedType = a.Action;\r\n                index = a.NewStartingIndex;\r\n            }", span="1468-1472"];
m1_936 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.IsTrue(((IList<JToken>)o).Contains(p4))", span="1488-1488"];
m1_923 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()", file="DynamicReflectionDelegateFactoryTests.cs", label="int? index = null", span="1466-1466"];
m1_941 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()", span="1459-1459"];
m1_212 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyToInsufficientArrayCapacity()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyToInsufficientArrayCapacity()", span="367-367"];
m1_213 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyToInsufficientArrayCapacity()", file="DynamicReflectionDelegateFactoryTests.cs", label="ExceptionAssert.Throws<ArgumentException>(() =>\r\n            {\r\n                JObject o = new JObject();\r\n                o.Add(''PropertyNameValue'', new JValue(1));\r\n                o.Add(''PropertyNameValue2'', new JValue(2));\r\n                o.Add(''PropertyNameValue3'', new JValue(3));\r\n\r\n                ((ICollection<KeyValuePair<string, JToken>>)o).CopyTo(new KeyValuePair<string, JToken>[3], 1);\r\n            }, @''The number of elements in the source JObject is greater than the available space from arrayIndex to the end of the destination array.'')", span="369-377"];
m1_214 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyToInsufficientArrayCapacity()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyToInsufficientArrayCapacity()", span="367-367"];
m1_500 [cluster="System.Collections.IList.Contains(object)", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry System.Collections.IList.Contains(object)", span="0-0"];
m1_122 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit lambda expression", span="225-230"];
m1_816 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddIndex()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddIndex()", span="1320-1320"];
m1_817 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddIndex()", file="DynamicReflectionDelegateFactoryTests.cs", label="IBindingList l = new JObject()", span="1322-1322"];
m1_818 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddIndex()", file="DynamicReflectionDelegateFactoryTests.cs", label="l.AddIndex(null)", span="1324-1324"];
m1_819 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddIndex()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddIndex()", span="1320-1320"];
m1_70 [cluster="Newtonsoft.Json.Linq.JContainer.Children()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Linq.JContainer.Children()", span="251-251"];
m1_72 [cluster="Newtonsoft.Json.Linq.JObject.TryGetValue(string, out Newtonsoft.Json.Linq.JToken)", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Linq.JObject.TryGetValue(string, out Newtonsoft.Json.Linq.JToken)", span="514-514"];
m1_861 [cluster="System.ComponentModel.IBindingList.AddNew()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry System.ComponentModel.IBindingList.AddNew()", span="0-0"];
m1_545 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListAddBadValue()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IListAddBadValue()", span="898-898"];
m1_546 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListAddBadValue()", file="DynamicReflectionDelegateFactoryTests.cs", label="ExceptionAssert.Throws<ArgumentException>(() =>\r\n            {\r\n                JProperty p1 = new JProperty(''Test1'', 1);\r\n                JProperty p2 = new JProperty(''Test2'', ''Two'');\r\n                IList l = new JObject(p1, p2);\r\n\r\n                l.Add(''Bad!'');\r\n            }, ''Argument is not a JToken.'')", span="900-907"];
m1_547 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListAddBadValue()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IListAddBadValue()", span="898-898"];
m1_990 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.InvalidPropertyValueCastExceptionMessage()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.InvalidPropertyValueCastExceptionMessage()", span="1624-1624"];
m1_991 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.InvalidPropertyValueCastExceptionMessage()", file="DynamicReflectionDelegateFactoryTests.cs", label="ExceptionAssert.Throws<ArgumentException>(() =>\r\n            {\r\n                string json = @''{\r\n  ''''responseData'''': {}, \r\n  ''''responseDetails'''': null, \r\n  ''''responseStatus'''': 200\r\n}'';\r\n\r\n                JObject o = JObject.Parse(json);\r\n\r\n                string name = (string)o.Property(''responseData'');\r\n            }, ''Can not convert Object to String.'')", span="1626-1637"];
m1_992 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.InvalidPropertyValueCastExceptionMessage()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.InvalidPropertyValueCastExceptionMessage()", span="1624-1624"];
m1_13 [cluster="Unk.AreEqual", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Unk.AreEqual", span=""];
m1_501 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListIndexOf()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IListIndexOf()", span="832-832"];
m1_504 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListIndexOf()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(0, l.IndexOf(p))", span="837-837"];
m1_505 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListIndexOf()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(-1, l.IndexOf(new JProperty(''Test'', 1)))", span="838-838"];
m1_502 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListIndexOf()", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p = new JProperty(''Test'', 1)", span="834-834"];
m1_503 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListIndexOf()", file="DynamicReflectionDelegateFactoryTests.cs", label="IList l = new JObject(p)", span="835-835"];
m1_506 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListIndexOf()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IListIndexOf()", span="832-832"];
m1_667 [cluster="System.Collections.Generic.IList<T>.IndexOf(T)", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry System.Collections.Generic.IList<T>.IndexOf(T)", span="0-0"];
m1_386 [cluster="System.DateTime.DateTime(int, int, int)", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry System.DateTime.DateTime(int, int, int)", span="0-0"];
m1_800 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSupportsSorting()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSupportsSorting()", span="1292-1292"];
m1_802 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSupportsSorting()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(false, l.SupportsSorting)", span="1295-1295"];
m1_801 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSupportsSorting()", file="DynamicReflectionDelegateFactoryTests.cs", label="IBindingList l = new JObject()", span="1294-1294"];
m1_803 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSupportsSorting()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSupportsSorting()", span="1292-1292"];
m1_648 [cluster="Unk.IsNotNull", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Unk.IsNotNull", span=""];
m1_12 [cluster="Newtonsoft.Json.Tests.StringAssert.AreEqual(string, string)", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.StringAssert.AreEqual(string, string)", span="327-327"];
m1_172 [cluster="System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0"];
m1_829 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListRemoveSort()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListRemoveSort()", span="1338-1338"];
m1_830 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListRemoveSort()", file="DynamicReflectionDelegateFactoryTests.cs", label="ExceptionAssert.Throws<NotSupportedException>(() =>\r\n            {\r\n                IBindingList l = new JObject();\r\n                l.RemoveSort();\r\n            }, ''Specified method is not supported.'')", span="1340-1344"];
m1_831 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListRemoveSort()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListRemoveSort()", span="1338-1338"];
m1_580 [cluster="System.Collections.IList.Remove(object)", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry System.Collections.IList.Remove(object)", span="0-0"];
m1_554 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListAddPropertyWithExistingName()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IListAddPropertyWithExistingName()", span="911-911"];
m1_555 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListAddPropertyWithExistingName()", file="DynamicReflectionDelegateFactoryTests.cs", label="ExceptionAssert.Throws<ArgumentException>(() =>\r\n            {\r\n                JProperty p1 = new JProperty(''Test1'', 1);\r\n                JProperty p2 = new JProperty(''Test2'', ''Two'');\r\n                IList l = new JObject(p1, p2);\r\n\r\n                JProperty p3 = new JProperty(''Test2'', ''II'');\r\n\r\n                l.Add(p3);\r\n            }, ''Can not add property Test2 to Newtonsoft.Json.Linq.JObject. Property with the same name already exists on object.'')", span="913-922"];
m1_556 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListAddPropertyWithExistingName()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IListAddPropertyWithExistingName()", span="911-911"];
m1_1164 [cluster="Newtonsoft.Json.Linq.JObject.GetValue(string)", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Linq.JObject.GetValue(string)", span="420-420"];
m1_641 [cluster="Newtonsoft.Json.Linq.JValue.JValue(bool)", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Linq.JValue.JValue(bool)", span="145-145"];
m1_258 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeFromRaw()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeFromRaw()", span="440-440"];
m1_264 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeFromRaw()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(''FirstNameValue'', raw.FirstName)", span="455-455"];
m1_265 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeFromRaw()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(''LastNameValue'', raw.LastName)", span="456-456"];
m1_266 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeFromRaw()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(''[1,2,3,4,5]'', raw.RawContent.Value)", span="457-457"];
m1_263 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeFromRaw()", file="DynamicReflectionDelegateFactoryTests.cs", label="raw = (PersonRaw)serializer.Deserialize(reader, typeof(PersonRaw))", span="453-453"];
m1_261 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeFromRaw()", file="DynamicReflectionDelegateFactoryTests.cs", label="JsonReader reader = new JTokenReader(o)", span="451-451"];
m1_262 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeFromRaw()", file="DynamicReflectionDelegateFactoryTests.cs", label="JsonSerializer serializer = new JsonSerializer()", span="452-452"];
m1_260 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeFromRaw()", file="DynamicReflectionDelegateFactoryTests.cs", label="JObject o = JObject.FromObject(raw)", span="449-449"];
m1_259 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeFromRaw()", file="DynamicReflectionDelegateFactoryTests.cs", label="PersonRaw raw = new PersonRaw\r\n            {\r\n                FirstName = ''FirstNameValue'',\r\n                RawContent = new JRaw(''[1,2,3,4,5]''),\r\n                LastName = ''LastNameValue''\r\n            }", span="442-447"];
m1_267 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeFromRaw()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeFromRaw()", span="440-440"];
m1_331 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullStringValue()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullStringValue()", span="556-556"];
m1_334 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullStringValue()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(null, v.Value)", span="560-560"];
m1_335 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullStringValue()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(JTokenType.String, v.Type)", span="561-561"];
m1_336 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullStringValue()", file="DynamicReflectionDelegateFactoryTests.cs", label="JObject o = new JObject()", span="563-563"];
m1_333 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullStringValue()", file="DynamicReflectionDelegateFactoryTests.cs", label="JValue v = new JValue(s)", span="559-559"];
m1_337 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullStringValue()", file="DynamicReflectionDelegateFactoryTests.cs", label="o[''title''] = v", span="564-564"];
m1_338 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullStringValue()", file="DynamicReflectionDelegateFactoryTests.cs", label="string output = o.ToString()", span="566-566"];
m1_332 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullStringValue()", file="DynamicReflectionDelegateFactoryTests.cs", label="string s = null", span="558-558"];
m1_339 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullStringValue()", file="DynamicReflectionDelegateFactoryTests.cs", label="StringAssert.AreEqual(@''{\r\n  ''''title'''': null\r\n}'', output)", span="568-570"];
m1_340 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullStringValue()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullStringValue()", span="556-556"];
m1_1141 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()", span="1896-1896"];
m1_1146 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(null, a.GetValue(''NAME'', StringComparison.Ordinal))", span="1903-1903"];
m1_1147 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(null, a.GetValue(''NAME''))", span="1904-1904"];
m1_1148 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(null, a.GetValue(''TITLE''))", span="1905-1905"];
m1_1149 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(''Name!'', (string)a.GetValue(''NAME'', StringComparison.OrdinalIgnoreCase))", span="1906-1906"];
m1_1150 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(''name!'', (string)a.GetValue(''name'', StringComparison.Ordinal))", span="1907-1907"];
m1_1151 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(null, a.GetValue(null, StringComparison.Ordinal))", span="1908-1908"];
m1_1152 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(null, a.GetValue(null))", span="1909-1909"];
m1_1155 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(null, v)", span="1913-1913"];
m1_1159 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(''Name!'', (string)v)", span="1919-1919"];
m1_1161 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(''name!'', (string)v)", span="1922-1922"];
m1_1142 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()", file="DynamicReflectionDelegateFactoryTests.cs", label="JObject a = new JObject()", span="1898-1898"];
m1_1145 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()", file="DynamicReflectionDelegateFactoryTests.cs", label="a[''title''] = ''Title!''", span="1901-1901"];
m1_1153 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()", file="DynamicReflectionDelegateFactoryTests.cs", label="JToken v", span="1911-1911"];
m1_1154 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.IsFalse(a.TryGetValue(''NAME'', StringComparison.Ordinal, out v))", span="1912-1912"];
m1_1156 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.IsFalse(a.TryGetValue(''NAME'', out v))", span="1915-1915"];
m1_1158 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.IsTrue(a.TryGetValue(''NAME'', StringComparison.OrdinalIgnoreCase, out v))", span="1918-1918"];
m1_1160 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.IsTrue(a.TryGetValue(''name'', StringComparison.Ordinal, out v))", span="1921-1921"];
m1_1162 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.IsFalse(a.TryGetValue(null, StringComparison.Ordinal, out v))", span="1924-1924"];
m1_1143 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()", file="DynamicReflectionDelegateFactoryTests.cs", label="a[''Name''] = ''Name!''", span="1899-1899"];
m1_1144 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()", file="DynamicReflectionDelegateFactoryTests.cs", label="a[''name''] = ''name!''", span="1900-1900"];
m1_1157 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.IsFalse(a.TryGetValue(''TITLE'', out v))", span="1916-1916"];
m1_1163 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()", span="1896-1896"];
m1_362 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JObjectContainingHtml()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.JObjectContainingHtml()", span="638-638"];
m1_363 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JObjectContainingHtml()", file="DynamicReflectionDelegateFactoryTests.cs", label="JObject o = new JObject()", span="640-640"];
m1_364 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JObjectContainingHtml()", file="DynamicReflectionDelegateFactoryTests.cs", label="o[''rc''] = new JValue(200)", span="641-641"];
m1_365 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JObjectContainingHtml()", file="DynamicReflectionDelegateFactoryTests.cs", label="o[''m''] = new JValue('''')", span="642-642"];
m1_366 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JObjectContainingHtml()", file="DynamicReflectionDelegateFactoryTests.cs", label="o[''o''] = new JValue(@''<div class='s1'>'' + StringUtils.CarriageReturnLineFeed + @''</div>'')", span="643-643"];
m1_367 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JObjectContainingHtml()", file="DynamicReflectionDelegateFactoryTests.cs", label="StringAssert.AreEqual(@''{\r\n  ''''rc'''': 200,\r\n  ''''m'''': '''''''',\r\n  ''''o'''': ''''<div class='s1'>\r\n</div>''''\r\n}'', o.ToString())", span="645-649"];
m1_368 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JObjectContainingHtml()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.JObjectContainingHtml()", span="638-638"];
m1_747 [cluster="System.Collections.Generic.IList<T>.RemoveAt(int)", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry System.Collections.Generic.IList<T>.RemoveAt(int)", span="0-0"];
m1_890 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()", span="1419-1419"];
m1_901 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(p3, ((IList<JToken>)o)[index.Value])", span="1439-1439"];
m1_906 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(p4, ((IList<JToken>)o)[index.Value])", span="1446-1446"];
m1_912 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(2, (int)o[''Test1''])", span="1453-1453"];
m1_899 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(changedType, ListChangedType.ItemAdded)", span="1437-1437"];
m1_900 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(index, 2)", span="1438-1438"];
m1_904 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(changedType, ListChangedType.ItemChanged)", span="1444-1444"];
m1_905 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(index, 2)", span="1445-1445"];
m1_910 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(changedType, ListChangedType.ItemChanged)", span="1451-1451"];
m1_911 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(index, 0)", span="1452-1452"];
m1_893 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()", file="DynamicReflectionDelegateFactoryTests.cs", label="JObject o = new JObject(p1, p2)", span="1423-1423"];
m1_897 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p3 = new JProperty(''Test3'', ''III'')", span="1434-1434"];
m1_902 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p4 = new JProperty(''Test4'', ''IV'')", span="1441-1441"];
m1_907 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.IsFalse(((IList<JToken>)o).Contains(p3))", span="1447-1447"];
m1_898 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()", file="DynamicReflectionDelegateFactoryTests.cs", label="o.Add(p3)", span="1436-1436"];
m1_903 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()", file="DynamicReflectionDelegateFactoryTests.cs", label="((IList<JToken>)o)[index.Value] = p4", span="1443-1443"];
m1_909 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()", file="DynamicReflectionDelegateFactoryTests.cs", label="o[''Test1''] = 2", span="1450-1450"];
m1_891 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p1 = new JProperty(''Test1'', 1)", span="1421-1421"];
m1_892 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="1422-1422"];
m1_894 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()", file="DynamicReflectionDelegateFactoryTests.cs", label="ListChangedType? changedType = null", span="1425-1425"];
m1_896 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()", file="DynamicReflectionDelegateFactoryTests.cs", label="o.ListChanged += (s, a) =>\r\n            {\r\n                changedType = a.ListChangedType;\r\n                index = a.NewIndex;\r\n            }", span="1428-1432"];
m1_908 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.IsTrue(((IList<JToken>)o).Contains(p4))", span="1448-1448"];
m1_895 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()", file="DynamicReflectionDelegateFactoryTests.cs", label="int? index = null", span="1426-1426"];
m1_913 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()", span="1419-1419"];
m1_1091 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry lambda expression", span="1776-1790"];
m1_28 [cluster="System.Collections.Generic.List<T>.List()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m1_30 [cluster="System.IO.StringReader.StringReader(string)", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry System.IO.StringReader.StringReader(string)", span="0-0"];
m1_49 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Keys()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.Keys()", span="138-138"];
m1_50 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Keys()", file="DynamicReflectionDelegateFactoryTests.cs", label="var o = new JObject()", span="140-140"];
m1_52 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Keys()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(0, d.Keys.Count)", span="143-143"];
m1_53 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Keys()", file="DynamicReflectionDelegateFactoryTests.cs", label="o[''value''] = true", span="145-145"];
m1_73 [cluster="Newtonsoft.Json.Linq.JToken.DeepEquals(Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken)", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Linq.JToken.DeepEquals(Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken)", span="151-151"];
m1_195 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="JObject o = new JObject()", span="339-339"];
m1_202 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="JObject o = new JObject()", span="350-350"];
m1_209 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="JObject o = new JObject()", span="361-361"];
m1_216 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="JObject o = new JObject()", span="371-371"];
m1_825 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="IBindingList l = new JObject()", span="1332-1332"];
m1_833 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="IBindingList l = new JObject()", span="1342-1342"];
m1_846 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="IBindingList l = new JObject()", span="1360-1360"];
m1_858 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="IBindingList l = new JObject()", span="1377-1377"];
m1_956 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="JObject o = new JObject()", span="1556-1556"];
m1_454 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="changing = (s[args.PropertyName] != null) ? ((JValue)s[args.PropertyName]).Value : null", span="732-732"];
m1_459 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="changed = (s[args.PropertyName] != null) ? ((JValue)s[args.PropertyName]).Value : null", span="738-738"];
m1_455 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="changingCount++", span="733-733"];
m1_460 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="changedCount++", span="739-739"];
m1_490 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="changed = (s[args.PropertyName] != null) ? ((JValue)s[args.PropertyName]).Value : null", span="790-790"];
m1_491 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="changedCount++", span="791-791"];
m1_916 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="index = a.NewIndex", span="1431-1431"];
m1_915 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="changedType = a.ListChangedType", span="1430-1430"];
m1_944 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="index = a.NewStartingIndex", span="1471-1471"];
m1_943 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="changedType = a.Action", span="1470-1470"];
m1_217 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="o.Add(''PropertyNameValue'', new JValue(1))", span="372-372"];
m1_218 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="o.Add(''PropertyNameValue2'', new JValue(2))", span="373-373"];
m1_219 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="o.Add(''PropertyNameValue3'', new JValue(3))", span="374-374"];
m1_957 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="o[0] = new JValue(3)", span="1557-1557"];
m1_194 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry lambda expression", span="337-341"];
m1_196 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="((ICollection<KeyValuePair<string, JToken>>)o).CopyTo(null, 0)", span="340-340"];
m1_201 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry lambda expression", span="348-352"];
m1_203 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="((ICollection<KeyValuePair<string, JToken>>)o).CopyTo(new KeyValuePair<string, JToken>[1], -1)", span="351-351"];
m1_208 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry lambda expression", span="359-363"];
m1_210 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="((ICollection<KeyValuePair<string, JToken>>)o).CopyTo(new KeyValuePair<string, JToken>[1], 1)", span="362-362"];
m1_215 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry lambda expression", span="369-377"];
m1_220 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="((ICollection<KeyValuePair<string, JToken>>)o).CopyTo(new KeyValuePair<string, JToken>[3], 1)", span="376-376"];
m1_824 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry lambda expression", span="1330-1334"];
m1_826 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="l.ApplySort(null, ListSortDirection.Ascending)", span="1333-1333"];
m1_832 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry lambda expression", span="1340-1344"];
m1_834 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="l.RemoveSort()", span="1343-1343"];
m1_845 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry lambda expression", span="1358-1362"];
m1_847 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="l.Find(null, null)", span="1361-1361"];
m1_857 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry lambda expression", span="1375-1379"];
m1_859 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="l.AddNew()", span="1378-1378"];
m1_955 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry lambda expression", span="1554-1558"];
m1_1023 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="JsonReader reader = new JsonTextReader(new StringReader(jsonText))", span="1687-1687"];
m1_700 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="l.Add(new JValue(''Bad!''))", span="1133-1133"];
m1_709 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="l.Add(''Bad!'')", span="1147-1147"];
m1_719 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="l.Add(p3)", span="1162-1162"];
m1_1029 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="JToken.ReadFrom(reader)", span="1694-1694"];
m1_453 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="JObject s = (JObject)sender", span="731-731"];
m1_452 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry lambda expression", span="729-734"];
m1_456 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit lambda expression", span="729-734"];
m1_458 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="JObject s = (JObject)sender", span="737-737"];
m1_457 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry lambda expression", span="735-740"];
m1_461 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit lambda expression", span="735-740"];
m1_489 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="JObject s = (JObject)sender", span="789-789"];
m1_488 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry lambda expression", span="787-792"];
m1_492 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit lambda expression", span="787-792"];
m1_540 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p1 = new JProperty(''Test1'', 1)", span="889-889"];
m1_541 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="890-890"];
m1_549 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p1 = new JProperty(''Test1'', 1)", span="902-902"];
m1_550 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="903-903"];
m1_558 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p1 = new JProperty(''Test1'', 1)", span="915-915"];
m1_559 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="916-916"];
m1_561 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p3 = new JProperty(''Test2'', ''II'')", span="919-919"];
m1_625 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p1 = new JProperty(''Test1'', 1)", span="1017-1017"];
m1_626 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="1018-1018"];
m1_628 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p3 = new JProperty(''Test3'', ''III'')", span="1021-1021"];
m1_636 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p1 = new JProperty(''Test1'', 1)", span="1033-1033"];
m1_637 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="1034-1034"];
m1_697 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p1 = new JProperty(''Test1'', 1)", span="1129-1129"];
m1_698 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="1130-1130"];
m1_706 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p1 = new JProperty(''Test1'', 1)", span="1142-1142"];
m1_707 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="1143-1143"];
m1_715 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p1 = new JProperty(''Test1'', 1)", span="1156-1156"];
m1_716 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="1157-1157"];
m1_718 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p3 = new JProperty(''Test2'', ''II'')", span="1160-1160"];
m1_777 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p1 = new JProperty(''Test1'', 1)", span="1251-1251"];
m1_778 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="1252-1252"];
m1_780 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p3 = new JProperty(''Test3'', ''III'')", span="1255-1255"];
m1_914 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry lambda expression", span="1428-1432"];
m1_917 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit lambda expression", span="1428-1432"];
m1_942 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry lambda expression", span="1468-1472"];
m1_945 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit lambda expression", span="1468-1472"];
m1_958 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit lambda expression", span="1554-1558"];
m1_197 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit lambda expression", span="337-341"];
m1_204 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit lambda expression", span="348-352"];
m1_211 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit lambda expression", span="359-363"];
m1_221 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit lambda expression", span="369-377"];
m1_827 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit lambda expression", span="1330-1334"];
m1_835 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit lambda expression", span="1340-1344"];
m1_848 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit lambda expression", span="1358-1362"];
m1_860 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit lambda expression", span="1375-1379"];
m1_873 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="e.NewObject = new JProperty(''Property!'')", span="1386-1386"];
m1_1022 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="string jsonText = @''{\r\n  ''''short'''':\r\n  {\r\n    ''''error'''':\r\n    {\r\n      ''''code'''':0''", span="1680-1685"];
m1_1024 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="reader.Read()", span="1688-1688"];
m1_1025 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="reader.Read()", span="1689-1689"];
m1_1026 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="reader.Read()", span="1690-1690"];
m1_1027 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="reader.Read()", span="1691-1691"];
m1_1028 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="reader.Read()", span="1692-1692"];
m1_699 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="IList<JToken> l = new JObject(p1, p2)", span="1131-1131"];
m1_701 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit lambda expression", span="1127-1134"];
m1_708 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="IList<JToken> l = new JObject(p1, p2)", span="1144-1144"];
m1_710 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit lambda expression", span="1140-1148"];
m1_717 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="IList<JToken> l = new JObject(p1, p2)", span="1158-1158"];
m1_720 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit lambda expression", span="1154-1163"];
m1_1030 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit lambda expression", span="1678-1695"];
m1_543 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="l.Add(new JValue(''Bad!''))", span="893-893"];
m1_542 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="IList l = new JObject(p1, p2)", span="891-891"];
m1_551 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="IList l = new JObject(p1, p2)", span="904-904"];
m1_560 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="IList l = new JObject(p1, p2)", span="917-917"];
m1_627 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="IList l = new JObject(p1, p2)", span="1019-1019"];
m1_638 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="IList l = new JObject(p1, p2)", span="1035-1035"];
m1_779 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="IList<JToken> l = new JObject(p1, p2)", span="1253-1253"];
m1_539 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry lambda expression", span="887-894"];
m1_548 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry lambda expression", span="900-907"];
m1_557 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry lambda expression", span="913-922"];
m1_562 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="l.Add(p3)", span="921-921"];
m1_624 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry lambda expression", span="1015-1025"];
m1_629 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="l[0] = p3", span="1023-1023"];
m1_630 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="l[1] = p3", span="1024-1024"];
m1_635 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry lambda expression", span="1031-1038"];
m1_696 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry lambda expression", span="1127-1134"];
m1_705 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry lambda expression", span="1140-1148"];
m1_714 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry lambda expression", span="1154-1163"];
m1_776 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry lambda expression", span="1249-1259"];
m1_781 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="l[0] = p3", span="1257-1257"];
m1_782 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="l[1] = p3", span="1258-1258"];
m1_552 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="l.Add(''Bad!'')", span="906-906"];
m1_275 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="JObject.Parse(json)", span="466-466"];
m1_301 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="JObject.Parse(@''{\r\n    ''''name'''': ''''James'''',\r\n    ]!#$THIS IS: BAD JSON![{}}}}]\r\n  }'')", span="498-501"];
m1_987 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="JObject o = JObject.Parse(json)", span="1617-1617"];
m1_995 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="JObject o = JObject.Parse(json)", span="1634-1634"];
m1_1003 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="JObject.Parse(''{ foo:'')", span="1643-1643"];
m1_1093 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="JObject o = JObject.Parse(json)", span="1789-1789"];
m1_872 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry lambda expression", span="1386-1386"];
m1_874 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit lambda expression", span="1386-1386"];
m1_1021 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry lambda expression", span="1678-1695"];
m1_544 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit lambda expression", span="887-894"];
m1_639 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="l[0] = new JValue(true)", span="1037-1037"];
m1_553 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit lambda expression", span="900-907"];
m1_563 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit lambda expression", span="913-922"];
m1_631 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit lambda expression", span="1015-1025"];
m1_640 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit lambda expression", span="1031-1038"];
m1_783 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit lambda expression", span="1249-1259"];
m1_274 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="string json = @''[''''prop'''']''", span="465-465"];
m1_276 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit lambda expression", span="463-467"];
m1_300 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry lambda expression", span="498-501"];
m1_302 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit lambda expression", span="498-501"];
m1_986 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="string json = @''{\r\n  ''''responseData'''': {}, \r\n  ''''responseDetails'''': null, \r\n  ''''responseStatus'''': 200\r\n}''", span="1611-1615"];
m1_988 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="string name = (string)o[''responseData'']", span="1619-1619"];
m1_994 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="string json = @''{\r\n  ''''responseData'''': {}, \r\n  ''''responseDetails'''': null, \r\n  ''''responseStatus'''': 200\r\n}''", span="1628-1632"];
m1_996 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="string name = (string)o.Property(''responseData'')", span="1636-1636"];
m1_1002 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry lambda expression", span="1643-1643"];
m1_1004 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit lambda expression", span="1643-1643"];
m1_1092 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="string json = @''{\r\n''''Name'''': ''''Apple'''',\r\n''''Expiry'''': new Date(1230422400000),\r\n''''Price'''': 3.99,\r\n''''Sizes'''': [\r\n''''Small'''',\r\n''''Medium'''',\r\n''''Large''''\r\n]\r\n}, 987987''", span="1778-1787"];
m1_1094 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit lambda expression", span="1776-1790"];
m1_273 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry lambda expression", span="463-467"];
m1_985 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry lambda expression", span="1609-1620"];
m1_989 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit lambda expression", span="1609-1620"];
m1_993 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry lambda expression", span="1626-1637"];
m1_997 [cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit lambda expression", span="1626-1637"];
m1_965 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseMultipleProperties()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.ParseMultipleProperties()", span="1573-1573"];
m1_969 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseMultipleProperties()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(''Name2'', value)", span="1583-1583"];
m1_968 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseMultipleProperties()", file="DynamicReflectionDelegateFactoryTests.cs", label="string value = (string)o[''Name'']", span="1581-1581"];
m1_967 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseMultipleProperties()", file="DynamicReflectionDelegateFactoryTests.cs", label="JObject o = JObject.Parse(json)", span="1580-1580"];
m1_966 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseMultipleProperties()", file="DynamicReflectionDelegateFactoryTests.cs", label="string json = @''{\r\n        ''''Name'''': ''''Name1'''',\r\n        ''''Name'''': ''''Name2''''\r\n      }''", span="1575-1578"];
m1_970 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseMultipleProperties()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.ParseMultipleProperties()", span="1573-1573"];
m1_493 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListContains()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IListContains()", span="822-822"];
m1_494 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListContains()", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p = new JProperty(''Test'', 1)", span="824-824"];
m1_497 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListContains()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.IsFalse(l.Contains(new JProperty(''Test'', 1)))", span="828-828"];
m1_496 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListContains()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.IsTrue(l.Contains(p))", span="827-827"];
m1_495 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListContains()", file="DynamicReflectionDelegateFactoryTests.cs", label="IList l = new JObject(p)", span="825-825"];
m1_498 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListContains()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IListContains()", span="822-822"];
m1_1133 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValueBlogExample()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GetValueBlogExample()", span="1878-1878"];
m1_1137 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValueBlogExample()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(''Upper'', exactMatch)", span="1891-1891"];
m1_1138 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValueBlogExample()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(''Lower'', ignoreCase)", span="1892-1892"];
m1_1135 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValueBlogExample()", file="DynamicReflectionDelegateFactoryTests.cs", label="string exactMatch = (string)o.GetValue(''NAME'', StringComparison.OrdinalIgnoreCase)", span="1885-1885"];
m1_1136 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValueBlogExample()", file="DynamicReflectionDelegateFactoryTests.cs", label="string ignoreCase = (string)o.GetValue(''Name'', StringComparison.OrdinalIgnoreCase)", span="1888-1888"];
m1_1134 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValueBlogExample()", file="DynamicReflectionDelegateFactoryTests.cs", label="JObject o = JObject.Parse(@''{\r\n        'name': 'Lower',\r\n        'NAME': 'Upper'\r\n      }'')", span="1880-1883"];
m1_1139 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValueBlogExample()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GetValueBlogExample()", span="1878-1878"];
m1_748 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenInsert()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenInsert()", span="1208-1208"];
m1_755 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenInsert()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(p1, l[0])", span="1219-1219"];
m1_757 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenInsert()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(p2, l[2])", span="1221-1221"];
m1_754 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenInsert()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(l, p3.Parent)", span="1217-1217"];
m1_756 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenInsert()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(p3, l[1])", span="1220-1220"];
m1_749 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenInsert()", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p1 = new JProperty(''Test1'', 1)", span="1210-1210"];
m1_751 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenInsert()", file="DynamicReflectionDelegateFactoryTests.cs", label="IList<JToken> l = new JObject(p1, p2)", span="1212-1212"];
m1_750 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenInsert()", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="1211-1211"];
m1_752 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenInsert()", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p3 = new JProperty(''Test3'', ''III'')", span="1214-1214"];
m1_753 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenInsert()", file="DynamicReflectionDelegateFactoryTests.cs", label="l.Insert(1, p3)", span="1216-1216"];
m1_758 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenInsert()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenInsert()", span="1208-1208"];
m1_1005 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.LoadFromNestedObject()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.LoadFromNestedObject()", span="1647-1647"];
m1_1007 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.LoadFromNestedObject()", file="DynamicReflectionDelegateFactoryTests.cs", label="JsonReader reader = new JsonTextReader(new StringReader(jsonText))", span="1660-1660"];
m1_1013 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.LoadFromNestedObject()", file="DynamicReflectionDelegateFactoryTests.cs", label="JObject o = (JObject)JToken.ReadFrom(reader)", span="1667-1667"];
m1_1006 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.LoadFromNestedObject()", file="DynamicReflectionDelegateFactoryTests.cs", label="string jsonText = @''{\r\n  ''''short'''':\r\n  {\r\n    ''''error'''':\r\n    {\r\n      ''''code'''':0,\r\n      ''''msg'''':''''No action taken''''\r\n    }\r\n  }\r\n}''", span="1649-1658"];
m1_1008 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.LoadFromNestedObject()", file="DynamicReflectionDelegateFactoryTests.cs", label="reader.Read()", span="1661-1661"];
m1_1009 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.LoadFromNestedObject()", file="DynamicReflectionDelegateFactoryTests.cs", label="reader.Read()", span="1662-1662"];
m1_1010 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.LoadFromNestedObject()", file="DynamicReflectionDelegateFactoryTests.cs", label="reader.Read()", span="1663-1663"];
m1_1011 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.LoadFromNestedObject()", file="DynamicReflectionDelegateFactoryTests.cs", label="reader.Read()", span="1664-1664"];
m1_1012 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.LoadFromNestedObject()", file="DynamicReflectionDelegateFactoryTests.cs", label="reader.Read()", span="1665-1665"];
m1_1014 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.LoadFromNestedObject()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.IsNotNull(o)", span="1668-1668"];
m1_1015 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.LoadFromNestedObject()", file="DynamicReflectionDelegateFactoryTests.cs", label="StringAssert.AreEqual(@''{\r\n  ''''code'''': 0,\r\n  ''''msg'''': ''''No action taken''''\r\n}'', o.ToString(Formatting.Indented))", span="1669-1672"];
m1_1016 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.LoadFromNestedObject()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.LoadFromNestedObject()", span="1647-1647"];
m1_1110 [cluster="Newtonsoft.Json.Linq.JObject.DeepEquals(Newtonsoft.Json.Linq.JToken)", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Linq.JObject.DeepEquals(Newtonsoft.Json.Linq.JToken)", span="118-118"];
m1_842 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListFind()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListFind()", span="1356-1356"];
m1_843 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListFind()", file="DynamicReflectionDelegateFactoryTests.cs", label="ExceptionAssert.Throws<NotSupportedException>(() =>\r\n            {\r\n                IBindingList l = new JObject();\r\n                l.Find(null, null);\r\n            }, ''Specified method is not supported.'')", span="1358-1362"];
m1_844 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListFind()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListFind()", span="1356-1356"];
m1_1123 [cluster="System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", span="0-0"];
m1_303 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.RawChildValues()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.RawChildValues()", span="505-505"];
m1_304 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.RawChildValues()", file="DynamicReflectionDelegateFactoryTests.cs", label="JObject o = new JObject()", span="507-507"];
m1_305 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.RawChildValues()", file="DynamicReflectionDelegateFactoryTests.cs", label="o[''val1''] = new JRaw(''1'')", span="508-508"];
m1_306 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.RawChildValues()", file="DynamicReflectionDelegateFactoryTests.cs", label="o[''val2''] = new JRaw(''1'')", span="509-509"];
m1_307 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.RawChildValues()", file="DynamicReflectionDelegateFactoryTests.cs", label="string json = o.ToString()", span="511-511"];
m1_308 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.RawChildValues()", file="DynamicReflectionDelegateFactoryTests.cs", label="StringAssert.AreEqual(@''{\r\n  ''''val1'''': 1,\r\n  ''''val2'''': 1\r\n}'', json)", span="513-516"];
m1_309 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.RawChildValues()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.RawChildValues()", span="505-505"];
m1_1082 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectGuid()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectGuid()", span="1765-1765"];
m1_1084 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectGuid()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(v.Value, new Guid(''9065ACF3-C820-467D-BE50-8D4664BEAF35''))", span="1768-1768"];
m1_1085 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectGuid()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(''9065acf3-c820-467d-be50-8d4664beaf35'', v.ToString())", span="1770-1770"];
m1_1083 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectGuid()", file="DynamicReflectionDelegateFactoryTests.cs", label="JValue v = (JValue)JToken.FromObject(new Guid(''9065ACF3-C820-467D-BE50-8D4664BEAF35''))", span="1767-1767"];
m1_1086 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectGuid()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectGuid()", span="1765-1765"];
m1_525 [cluster="System.Collections.ICollection.CopyTo(System.Array, int)", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry System.Collections.ICollection.CopyTo(System.Array, int)", span="0-0"];
m1_190 [cluster="System.Collections.Generic.ICollection<T>.CopyTo(T[], int)", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry System.Collections.Generic.ICollection<T>.CopyTo(T[], int)", span="0-0"];
m1_693 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAddBadToken()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAddBadToken()", span="1125-1125"];
m1_694 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAddBadToken()", file="DynamicReflectionDelegateFactoryTests.cs", label="ExceptionAssert.Throws<ArgumentException>(() =>\r\n            {\r\n                JProperty p1 = new JProperty(''Test1'', 1);\r\n                JProperty p2 = new JProperty(''Test2'', ''Two'');\r\n                IList<JToken> l = new JObject(p1, p2);\r\n\r\n                l.Add(new JValue(''Bad!''));\r\n            }, ''Can not add Newtonsoft.Json.Linq.JValue to Newtonsoft.Json.Linq.JObject.'')", span="1127-1134"];
m1_695 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAddBadToken()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAddBadToken()", span="1125-1125"];
m1_642 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSyncRoot()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IListSyncRoot()", span="1042-1042"];
m1_643 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSyncRoot()", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p1 = new JProperty(''Test1'', 1)", span="1044-1044"];
m1_644 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSyncRoot()", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="1045-1045"];
m1_645 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSyncRoot()", file="DynamicReflectionDelegateFactoryTests.cs", label="IList l = new JObject(p1, p2)", span="1046-1046"];
m1_646 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSyncRoot()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.IsNotNull(l.SyncRoot)", span="1048-1048"];
m1_647 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSyncRoot()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IListSyncRoot()", span="1042-1042"];
m1_536 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListAddBadToken()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IListAddBadToken()", span="885-885"];
m1_537 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListAddBadToken()", file="DynamicReflectionDelegateFactoryTests.cs", label="ExceptionAssert.Throws<ArgumentException>(() =>\r\n            {\r\n                JProperty p1 = new JProperty(''Test1'', 1);\r\n                JProperty p2 = new JProperty(''Test2'', ''Two'');\r\n                IList l = new JObject(p1, p2);\r\n\r\n                l.Add(new JValue(''Bad!''));\r\n            }, ''Can not add Newtonsoft.Json.Linq.JValue to Newtonsoft.Json.Linq.JObject.'')", span="887-894"];
m1_538 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListAddBadToken()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IListAddBadToken()", span="885-885"];
m1_508 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListClear()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IListClear()", span="842-842"];
m1_511 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListClear()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(1, l.Count)", span="847-847"];
m1_513 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListClear()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(0, l.Count)", span="851-851"];
m1_510 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListClear()", file="DynamicReflectionDelegateFactoryTests.cs", label="IList l = new JObject(p)", span="845-845"];
m1_512 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListClear()", file="DynamicReflectionDelegateFactoryTests.cs", label="l.Clear()", span="849-849"];
m1_509 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListClear()", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p = new JProperty(''Test'', 1)", span="844-844"];
m1_514 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListClear()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IListClear()", span="842-842"];
m1_564 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemove()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemove()", span="926-926"];
m1_578 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemove()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(null, p2.Parent)", span="946-946"];
m1_570 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemove()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(2, l.Count)", span="936-936"];
m1_572 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemove()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(1, l.Count)", span="939-939"];
m1_576 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemove()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(0, l.Count)", span="944-944"];
m1_566 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemove()", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="929-929"];
m1_577 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemove()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.IsFalse(l.Contains(p2))", span="945-945"];
m1_567 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemove()", file="DynamicReflectionDelegateFactoryTests.cs", label="IList l = new JObject(p1, p2)", span="930-930"];
m1_569 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemove()", file="DynamicReflectionDelegateFactoryTests.cs", label="l.Remove(p3)", span="935-935"];
m1_571 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemove()", file="DynamicReflectionDelegateFactoryTests.cs", label="l.Remove(p1)", span="938-938"];
m1_573 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemove()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.IsFalse(l.Contains(p1))", span="940-940"];
m1_575 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemove()", file="DynamicReflectionDelegateFactoryTests.cs", label="l.Remove(p2)", span="943-943"];
m1_565 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemove()", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p1 = new JProperty(''Test1'', 1)", span="928-928"];
m1_568 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemove()", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p3 = new JProperty(''Test3'', ''III'')", span="932-932"];
m1_574 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemove()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.IsTrue(l.Contains(p2))", span="941-941"];
m1_579 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemove()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemove()", span="926-926"];
m1_411 [cluster="Newtonsoft.Json.Linq.JToken.Replace(Newtonsoft.Json.Linq.JToken)", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Linq.JToken.Replace(Newtonsoft.Json.Linq.JToken)", span="389-389"];
m1_661 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenIndexOf()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenIndexOf()", span="1072-1072"];
m1_664 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenIndexOf()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(0, l.IndexOf(p))", span="1077-1077"];
m1_665 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenIndexOf()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(-1, l.IndexOf(new JProperty(''Test'', 1)))", span="1078-1078"];
m1_662 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenIndexOf()", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p = new JProperty(''Test'', 1)", span="1074-1074"];
m1_663 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenIndexOf()", file="DynamicReflectionDelegateFactoryTests.cs", label="IList<JToken> l = new JObject(p)", span="1075-1075"];
m1_666 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenIndexOf()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenIndexOf()", span="1072-1072"];
m1_581 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemoveAt()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemoveAt()", span="950-950"];
m1_587 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemoveAt()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(1, l.Count)", span="960-960"];
m1_589 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemoveAt()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(0, l.Count)", span="963-963"];
m1_584 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemoveAt()", file="DynamicReflectionDelegateFactoryTests.cs", label="IList l = new JObject(p1, p2)", span="954-954"];
m1_586 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemoveAt()", file="DynamicReflectionDelegateFactoryTests.cs", label="l.Remove(p1)", span="959-959"];
m1_588 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemoveAt()", file="DynamicReflectionDelegateFactoryTests.cs", label="l.Remove(p2)", span="962-962"];
m1_582 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemoveAt()", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p1 = new JProperty(''Test1'', 1)", span="952-952"];
m1_583 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemoveAt()", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="953-953"];
m1_585 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemoveAt()", file="DynamicReflectionDelegateFactoryTests.cs", label="l.RemoveAt(0)", span="957-957"];
m1_590 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemoveAt()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemoveAt()", span="950-950"];
m1_90 [cluster="Newtonsoft.Json.Linq.JValue.CreateNull()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Linq.JValue.CreateNull()", span="547-547"];
m1_254 [cluster="Newtonsoft.Json.Linq.JTokenReader.JTokenReader(Newtonsoft.Json.Linq.JToken)", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Linq.JTokenReader.JTokenReader(Newtonsoft.Json.Linq.JToken)", span="52-52"];
m1_998 [cluster="Newtonsoft.Json.Linq.JObject.Property(string)", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Linq.JObject.Property(string)", span="239-239"];
m1_862 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddNewWithEvent()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddNewWithEvent()", span="1383-1383"];
m1_870 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddNewWithEvent()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(o, p.Parent)", span="1394-1394"];
m1_869 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddNewWithEvent()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(''Property!'', p.Name)", span="1393-1393"];
m1_863 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddNewWithEvent()", file="DynamicReflectionDelegateFactoryTests.cs", label="JObject o = new JObject()", span="1385-1385"];
m1_868 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddNewWithEvent()", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p = (JProperty)newObject", span="1392-1392"];
m1_864 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddNewWithEvent()", file="DynamicReflectionDelegateFactoryTests.cs", label="o._addingNew += (s, e) => e.NewObject = new JProperty(''Property!'')", span="1386-1386"];
m1_865 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddNewWithEvent()", file="DynamicReflectionDelegateFactoryTests.cs", label="IBindingList l = o", span="1388-1388"];
m1_866 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddNewWithEvent()", file="DynamicReflectionDelegateFactoryTests.cs", label="object newObject = l.AddNew()", span="1389-1389"];
m1_867 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddNewWithEvent()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.IsNotNull(newObject)", span="1390-1390"];
m1_871 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddNewWithEvent()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddNewWithEvent()", span="1383-1383"];
m1_764 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenSetItem()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenSetItem()", span="1232-1232"];
m1_771 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenSetItem()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(p2, l[1])", span="1243-1243"];
m1_770 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenSetItem()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(p3, l[0])", span="1242-1242"];
m1_766 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenSetItem()", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="1235-1235"];
m1_767 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenSetItem()", file="DynamicReflectionDelegateFactoryTests.cs", label="IList<JToken> l = new JObject(p1, p2)", span="1236-1236"];
m1_768 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenSetItem()", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p3 = new JProperty(''Test3'', ''III'')", span="1238-1238"];
m1_769 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenSetItem()", file="DynamicReflectionDelegateFactoryTests.cs", label="l[0] = p3", span="1240-1240"];
m1_765 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenSetItem()", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p1 = new JProperty(''Test1'', 1)", span="1234-1234"];
m1_772 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenSetItem()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenSetItem()", span="1232-1232"];
m1_361 [cluster="Newtonsoft.Json.Tests.TestObjects.ShortieException.ShortieException()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.TestObjects.ShortieException.ShortieException()", span="35-35"];
m1_1095 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeepEqualsIgnoreOrder()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.DeepEqualsIgnoreOrder()", span="1794-1794"];
m1_1096 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeepEqualsIgnoreOrder()", file="DynamicReflectionDelegateFactoryTests.cs", label="JObject o1 = new JObject(\r\n                new JProperty(''null'', null),\r\n                new JProperty(''integer'', 1),\r\n                new JProperty(''string'', ''string!''),\r\n                new JProperty(''decimal'', 0.5m),\r\n                new JProperty(''array'', new JArray(1, 2)))", span="1796-1801"];
m1_1098 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeepEqualsIgnoreOrder()", file="DynamicReflectionDelegateFactoryTests.cs", label="JObject o2 = new JObject(\r\n                new JProperty(''null'', null),\r\n                new JProperty(''string'', ''string!''),\r\n                new JProperty(''decimal'', 0.5m),\r\n                new JProperty(''integer'', 1),\r\n                new JProperty(''array'', new JArray(1, 2)))", span="1805-1810"];
m1_1100 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeepEqualsIgnoreOrder()", file="DynamicReflectionDelegateFactoryTests.cs", label="JObject o3 = new JObject(\r\n                new JProperty(''null'', null),\r\n                new JProperty(''string'', ''string!''),\r\n                new JProperty(''decimal'', 0.5m),\r\n                new JProperty(''integer'', 2),\r\n                new JProperty(''array'', new JArray(1, 2)))", span="1814-1819"];
m1_1102 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeepEqualsIgnoreOrder()", file="DynamicReflectionDelegateFactoryTests.cs", label="JObject o4 = new JObject(\r\n                new JProperty(''null'', null),\r\n                new JProperty(''string'', ''string!''),\r\n                new JProperty(''decimal'', 0.5m),\r\n                new JProperty(''integer'', 1),\r\n                new JProperty(''array'', new JArray(2, 1)))", span="1823-1828"];
m1_1104 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeepEqualsIgnoreOrder()", file="DynamicReflectionDelegateFactoryTests.cs", label="JObject o5 = new JObject(\r\n                new JProperty(''null'', null),\r\n                new JProperty(''string'', ''string!''),\r\n                new JProperty(''decimal'', 0.5m),\r\n                new JProperty(''integer'', 1))", span="1832-1836"];
m1_1097 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeepEqualsIgnoreOrder()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.IsTrue(o1.DeepEquals(o1))", span="1803-1803"];
m1_1099 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeepEqualsIgnoreOrder()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.IsTrue(o1.DeepEquals(o2))", span="1812-1812"];
m1_1101 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeepEqualsIgnoreOrder()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.IsFalse(o1.DeepEquals(o3))", span="1821-1821"];
m1_1103 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeepEqualsIgnoreOrder()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.IsFalse(o1.DeepEquals(o4))", span="1830-1830"];
m1_1105 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeepEqualsIgnoreOrder()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.IsFalse(o1.DeepEquals(o5))", span="1838-1838"];
m1_1106 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeepEqualsIgnoreOrder()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.IsFalse(o1.DeepEquals(null))", span="1840-1840"];
m1_1107 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeepEqualsIgnoreOrder()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.DeepEqualsIgnoreOrder()", span="1794-1794"];
m1_1068 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectTimeSpan()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectTimeSpan()", span="1747-1747"];
m1_1070 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectTimeSpan()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(v.Value, TimeSpan.FromDays(1))", span="1750-1750"];
m1_1071 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectTimeSpan()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(''1.00:00:00'', v.ToString())", span="1752-1752"];
m1_1069 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectTimeSpan()", file="DynamicReflectionDelegateFactoryTests.cs", label="JValue v = (JValue)JToken.FromObject(TimeSpan.FromDays(1))", span="1749-1749"];
m1_1072 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectTimeSpan()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectTimeSpan()", span="1747-1747"];
m1_821 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListApplySort()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListApplySort()", span="1328-1328"];
m1_822 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListApplySort()", file="DynamicReflectionDelegateFactoryTests.cs", label="ExceptionAssert.Throws<NotSupportedException>(() =>\r\n            {\r\n                IBindingList l = new JObject();\r\n                l.ApplySort(null, ListSortDirection.Ascending);\r\n            }, ''Specified method is not supported.'')", span="1330-1334"];
m1_823 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListApplySort()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListApplySort()", span="1328-1328"];
m1_773 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenSetItemAlreadyExists()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenSetItemAlreadyExists()", span="1247-1247"];
m1_774 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenSetItemAlreadyExists()", file="DynamicReflectionDelegateFactoryTests.cs", label="ExceptionAssert.Throws<ArgumentException>(() =>\r\n            {\r\n                JProperty p1 = new JProperty(''Test1'', 1);\r\n                JProperty p2 = new JProperty(''Test2'', ''Two'');\r\n                IList<JToken> l = new JObject(p1, p2);\r\n\r\n                JProperty p3 = new JProperty(''Test3'', ''III'');\r\n\r\n                l[0] = p3;\r\n                l[1] = p3;\r\n            }, ''Can not add property Test3 to Newtonsoft.Json.Linq.JObject. Property with the same name already exists on object.'')", span="1249-1259"];
m1_775 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenSetItemAlreadyExists()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenSetItemAlreadyExists()", span="1247-1247"];
m1_507 [cluster="System.Collections.IList.IndexOf(object)", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry System.Collections.IList.IndexOf(object)", span="0-0"];
m1_881 [cluster="System.ComponentModel.ITypedList.GetListName(System.ComponentModel.PropertyDescriptor[])", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry System.ComponentModel.ITypedList.GetListName(System.ComponentModel.PropertyDescriptor[])", span="0-0"];
m1_54 [cluster="Newtonsoft.Json.Tests.TestObjects.Organization.Person.Person()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.TestObjects.Organization.Person.Person()", span="34-34"];
m1_55 [cluster="System.Type.GetProperty(string)", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry System.Type.GetProperty(string)", span="0-0"];
m1_1186 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectInsideConverterWithCustomSerializer()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectInsideConverterWithCustomSerializer()", span="1962-1962"];
m1_1190 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectInsideConverterWithCustomSerializer()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(@''{''''foo'''':''''bar'''',''''name'''':''''Daniel Wertheim'''',''''birthDate'''':''''0001-01-01T00:00:00'''',''''lastModified'''':''''0001-01-01T00:00:00''''}'', json)", span="1977-1977"];
m1_1188 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectInsideConverterWithCustomSerializer()", file="DynamicReflectionDelegateFactoryTests.cs", label="var settings = new JsonSerializerSettings\r\n            {\r\n                Converters = new List<JsonConverter> { new FooJsonConverter() },\r\n                ContractResolver = new CamelCasePropertyNamesContractResolver()\r\n            }", span="1969-1973"];
m1_1189 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectInsideConverterWithCustomSerializer()", file="DynamicReflectionDelegateFactoryTests.cs", label="var json = JsonConvert.SerializeObject(p, settings)", span="1975-1975"];
m1_1187 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectInsideConverterWithCustomSerializer()", file="DynamicReflectionDelegateFactoryTests.cs", label="var p = new Person\r\n            {\r\n                Name = ''Daniel Wertheim'',\r\n            }", span="1964-1967"];
m1_1191 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectInsideConverterWithCustomSerializer()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectInsideConverterWithCustomSerializer()", span="1962-1962"];
m1_341 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Example()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.Example()", span="574-574"];
m1_347 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Example()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(''Apple'', name)", span="597-597"];
m1_348 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Example()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(''Small'', smallest)", span="598-598"];
m1_344 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Example()", file="DynamicReflectionDelegateFactoryTests.cs", label="string name = (string)o[''Name'']", span="589-589"];
m1_346 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Example()", file="DynamicReflectionDelegateFactoryTests.cs", label="string smallest = (string)sizes[0]", span="594-594"];
m1_343 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Example()", file="DynamicReflectionDelegateFactoryTests.cs", label="JObject o = JObject.Parse(json)", span="587-587"];
m1_345 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Example()", file="DynamicReflectionDelegateFactoryTests.cs", label="JArray sizes = (JArray)o[''Sizes'']", span="592-592"];
m1_342 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Example()", file="DynamicReflectionDelegateFactoryTests.cs", label="string json = @''{\r\n        ''''Name'''': ''''Apple'''',\r\n        ''''Expiry'''': new Date(1230422400000),\r\n        ''''Price'''': 3.99,\r\n        ''''Sizes'''': [\r\n          ''''Small'''',\r\n          ''''Medium'''',\r\n          ''''Large''''\r\n        ]\r\n      }''", span="576-585"];
m1_349 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Example()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.Example()", span="574-574"];
m1_515 [cluster="System.Collections.IList.Clear()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry System.Collections.IList.Clear()", span="0-0"];
m1_612 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItem()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItem()", span="998-998"];
m1_619 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItem()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(p2, l[1])", span="1009-1009"];
m1_618 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItem()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(p3, l[0])", span="1008-1008"];
m1_614 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItem()", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="1001-1001"];
m1_615 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItem()", file="DynamicReflectionDelegateFactoryTests.cs", label="IList l = new JObject(p1, p2)", span="1002-1002"];
m1_616 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItem()", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p3 = new JProperty(''Test3'', ''III'')", span="1004-1004"];
m1_617 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItem()", file="DynamicReflectionDelegateFactoryTests.cs", label="l[0] = p3", span="1006-1006"];
m1_613 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItem()", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p1 = new JProperty(''Test1'', 1)", span="1000-1000"];
m1_620 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItem()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItem()", span="998-998"];
m1_804 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAllowEdit()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAllowEdit()", span="1299-1299"];
m1_806 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAllowEdit()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(true, l.AllowEdit)", span="1302-1302"];
m1_805 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAllowEdit()", file="DynamicReflectionDelegateFactoryTests.cs", label="IBindingList l = new JObject()", span="1301-1301"];
m1_807 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAllowEdit()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAllowEdit()", span="1299-1299"];
m1_655 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenContains()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenContains()", span="1062-1062"];
m1_656 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenContains()", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p = new JProperty(''Test'', 1)", span="1064-1064"];
m1_659 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenContains()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.IsFalse(l.Contains(new JProperty(''Test'', 1)))", span="1068-1068"];
m1_658 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenContains()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.IsTrue(l.Contains(p))", span="1067-1067"];
m1_657 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenContains()", file="DynamicReflectionDelegateFactoryTests.cs", label="IList<JToken> l = new JObject(p)", span="1065-1065"];
m1_660 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenContains()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenContains()", span="1062-1062"];
m1_148 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionContains()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionContains()", span="273-273"];
m1_152 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionContains()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(1, o.Children().Count())", span="278-278"];
m1_154 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionContains()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(false, contains)", span="281-281"];
m1_156 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionContains()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(true, contains)", span="284-284"];
m1_158 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionContains()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(false, contains)", span="287-287"];
m1_160 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionContains()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(false, contains)", span="290-290"];
m1_162 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionContains()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(false, contains)", span="293-293"];
m1_150 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionContains()", file="DynamicReflectionDelegateFactoryTests.cs", label="JObject o = new JObject()", span="276-276"];
m1_151 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionContains()", file="DynamicReflectionDelegateFactoryTests.cs", label="o.Add(''PropertyNameValue'', v)", span="277-277"];
m1_153 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionContains()", file="DynamicReflectionDelegateFactoryTests.cs", label="bool contains = ((ICollection<KeyValuePair<string, JToken>>)o).Contains(new KeyValuePair<string, JToken>(''PropertyNameValue'', new JValue(1)))", span="280-280"];
m1_155 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionContains()", file="DynamicReflectionDelegateFactoryTests.cs", label="contains = ((ICollection<KeyValuePair<string, JToken>>)o).Contains(new KeyValuePair<string, JToken>(''PropertyNameValue'', v))", span="283-283"];
m1_157 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionContains()", file="DynamicReflectionDelegateFactoryTests.cs", label="contains = ((ICollection<KeyValuePair<string, JToken>>)o).Contains(new KeyValuePair<string, JToken>(''PropertyNameValue'', new JValue(2)))", span="286-286"];
m1_159 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionContains()", file="DynamicReflectionDelegateFactoryTests.cs", label="contains = ((ICollection<KeyValuePair<string, JToken>>)o).Contains(new KeyValuePair<string, JToken>(''PropertyNameValue1'', new JValue(1)))", span="289-289"];
m1_161 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionContains()", file="DynamicReflectionDelegateFactoryTests.cs", label="contains = ((ICollection<KeyValuePair<string, JToken>>)o).Contains(default(KeyValuePair<string, JToken>))", span="292-292"];
m1_149 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionContains()", file="DynamicReflectionDelegateFactoryTests.cs", label="JValue v = new JValue(1)", span="275-275"];
m1_163 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionContains()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionContains()", span="273-273"];
m1_297 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Blog()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.Blog()", span="496-496"];
m1_298 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Blog()", file="DynamicReflectionDelegateFactoryTests.cs", label="ExceptionAssert.Throws<JsonReaderException>(() => { JObject.Parse(@''{\r\n    ''''name'''': ''''James'''',\r\n    ]!#$THIS IS: BAD JSON![{}}}}]\r\n  }''); }, ''Invalid property identifier character: ]. Path 'name', line 3, position 5.'')", span="498-501"];
m1_299 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Blog()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.Blog()", span="496-496"];
m1_230 [cluster="Newtonsoft.Json.Tests.TestObjects.PersonRaw.PersonRaw()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.TestObjects.PersonRaw.PersonRaw()", span="30-30"];
m1_369 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ImplicitValueConversions()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.ImplicitValueConversions()", span="653-653"];
m1_370 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ImplicitValueConversions()", file="DynamicReflectionDelegateFactoryTests.cs", label="JObject moss = new JObject()", span="655-655"];
m1_377 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ImplicitValueConversions()", file="DynamicReflectionDelegateFactoryTests.cs", label="JObject jen = new JObject()", span="670-670"];
m1_371 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ImplicitValueConversions()", file="DynamicReflectionDelegateFactoryTests.cs", label="moss[''FirstName''] = new JValue(''Maurice'')", span="656-656"];
m1_372 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ImplicitValueConversions()", file="DynamicReflectionDelegateFactoryTests.cs", label="moss[''LastName''] = new JValue(''Moss'')", span="657-657"];
m1_373 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ImplicitValueConversions()", file="DynamicReflectionDelegateFactoryTests.cs", label="moss[''BirthDate''] = new JValue(new DateTime(1977, 12, 30))", span="658-658"];
m1_374 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ImplicitValueConversions()", file="DynamicReflectionDelegateFactoryTests.cs", label="moss[''Department''] = new JValue(''IT'')", span="659-659"];
m1_375 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ImplicitValueConversions()", file="DynamicReflectionDelegateFactoryTests.cs", label="moss[''JobTitle''] = new JValue(''Support'')", span="660-660"];
m1_376 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ImplicitValueConversions()", file="DynamicReflectionDelegateFactoryTests.cs", label="StringAssert.AreEqual(@''{\r\n  ''''FirstName'''': ''''Maurice'''',\r\n  ''''LastName'''': ''''Moss'''',\r\n  ''''BirthDate'''': ''''1977-12-30T00:00:00'''',\r\n  ''''Department'''': ''''IT'''',\r\n  ''''JobTitle'''': ''''Support''''\r\n}'', moss.ToString())", span="662-668"];
m1_378 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ImplicitValueConversions()", file="DynamicReflectionDelegateFactoryTests.cs", label="jen[''FirstName''] = ''Jen''", span="671-671"];
m1_379 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ImplicitValueConversions()", file="DynamicReflectionDelegateFactoryTests.cs", label="jen[''LastName''] = ''Barber''", span="672-672"];
m1_380 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ImplicitValueConversions()", file="DynamicReflectionDelegateFactoryTests.cs", label="jen[''BirthDate''] = new DateTime(1978, 3, 15)", span="673-673"];
m1_381 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ImplicitValueConversions()", file="DynamicReflectionDelegateFactoryTests.cs", label="jen[''Department''] = ''IT''", span="674-674"];
m1_382 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ImplicitValueConversions()", file="DynamicReflectionDelegateFactoryTests.cs", label="jen[''JobTitle''] = ''Manager''", span="675-675"];
m1_383 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ImplicitValueConversions()", file="DynamicReflectionDelegateFactoryTests.cs", label="StringAssert.AreEqual(@''{\r\n  ''''FirstName'''': ''''Jen'''',\r\n  ''''LastName'''': ''''Barber'''',\r\n  ''''BirthDate'''': ''''1978-03-15T00:00:00'''',\r\n  ''''Department'''': ''''IT'''',\r\n  ''''JobTitle'''': ''''Manager''''\r\n}'', jen.ToString())", span="677-683"];
m1_384 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ImplicitValueConversions()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.ImplicitValueConversions()", span="653-653"];
m1_1175 [cluster="Newtonsoft.Json.Linq.JToken.FromObject(object, Newtonsoft.Json.JsonSerializer)", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Linq.JToken.FromObject(object, Newtonsoft.Json.JsonSerializer)", span="1685-1685"];
m1_387 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()", span="687-687"];
m1_392 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(p1, l[0])", span="694-694"];
m1_396 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(null, p1.Parent)", span="700-700"];
m1_393 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(p2, l[1])", span="695-695"];
m1_399 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(p2, l[1])", span="704-704"];
m1_404 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(null, p2.Parent)", span="712-712"];
m1_401 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(2, o.Properties().Count())", span="707-707"];
m1_397 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(l, p3.Parent)", span="701-701"];
m1_398 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(p3, l[0])", span="703-703"];
m1_400 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(2, l.Count)", span="706-706"];
m1_405 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(l, p4.Parent)", span="713-713"];
m1_406 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(p3, l[0])", span="715-715"];
m1_407 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(p4, l[1])", span="716-716"];
m1_388 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p1 = new JProperty(''Test1'', 1)", span="689-689"];
m1_391 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()", file="DynamicReflectionDelegateFactoryTests.cs", label="IList l = o", span="693-693"];
m1_395 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()", file="DynamicReflectionDelegateFactoryTests.cs", label="p1.Replace(p3)", span="699-699"];
m1_389 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="690-690"];
m1_394 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p3 = new JProperty(''Test1'', ''III'')", span="697-697"];
m1_403 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()", file="DynamicReflectionDelegateFactoryTests.cs", label="p2.Replace(p4)", span="711-711"];
m1_390 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()", file="DynamicReflectionDelegateFactoryTests.cs", label="JObject o = new JObject(p1, p2)", span="692-692"];
m1_402 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p4 = new JProperty(''Test4'', ''IV'')", span="709-709"];
m1_408 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()", span="687-687"];
m1_684 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAdd()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAdd()", span="1110-1110"];
m1_690 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAdd()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(3, l.Count)", span="1120-1120"];
m1_691 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAdd()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(p3, l[2])", span="1121-1121"];
m1_687 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAdd()", file="DynamicReflectionDelegateFactoryTests.cs", label="IList<JToken> l = new JObject(p1, p2)", span="1114-1114"];
m1_689 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAdd()", file="DynamicReflectionDelegateFactoryTests.cs", label="l.Add(p3)", span="1118-1118"];
m1_688 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAdd()", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p3 = new JProperty(''Test3'', ''III'')", span="1116-1116"];
m1_685 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAdd()", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p1 = new JProperty(''Test1'', 1)", span="1112-1112"];
m1_686 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAdd()", file="DynamicReflectionDelegateFactoryTests.cs", label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="1113-1113"];
m1_692 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAdd()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAdd()", span="1110-1110"];
m1_1062 [cluster="System.ComponentModel.PropertyDescriptor.CanResetValue(object)", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry System.ComponentModel.PropertyDescriptor.CanResetValue(object)", span="0-0"];
m1_270 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Parse_ShouldThrowOnUnexpectedToken()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.Parse_ShouldThrowOnUnexpectedToken()", span="461-461"];
m1_271 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Parse_ShouldThrowOnUnexpectedToken()", file="DynamicReflectionDelegateFactoryTests.cs", label="ExceptionAssert.Throws<JsonReaderException>(() =>\r\n            {\r\n                string json = @''[''''prop'''']'';\r\n                JObject.Parse(json);\r\n            }, ''Error reading JObject from JsonReader. Current JsonReader item is not an object: StartArray. Path '', line 1, position 1.'')", span="463-467"];
m1_272 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Parse_ShouldThrowOnUnexpectedToken()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.Parse_ShouldThrowOnUnexpectedToken()", span="461-461"];
m1_1061 [cluster="System.ComponentModel.ICustomTypeDescriptor.GetProperties()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry System.ComponentModel.ICustomTypeDescriptor.GetProperties()", span="0-0"];
m1_999 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseIncomplete()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.ParseIncomplete()", span="1641-1641"];
m1_1000 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseIncomplete()", file="DynamicReflectionDelegateFactoryTests.cs", label="ExceptionAssert.Throws<Exception>(() => { JObject.Parse(''{ foo:''); }, ''Unexpected end of content while loading JObject. Path 'foo', line 1, position 6.'')", span="1643-1643"];
m1_1001 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseIncomplete()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.ParseIncomplete()", span="1641-1641"];
m1_854 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddNew()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddNew()", span="1373-1373"];
m1_855 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddNew()", file="DynamicReflectionDelegateFactoryTests.cs", label="ExceptionAssert.Throws<JsonException>(() =>\r\n            {\r\n                IBindingList l = new JObject();\r\n                l.AddNew();\r\n            }, ''Could not determine new value to add to 'Newtonsoft.Json.Linq.JObject'.'')", span="1375-1379"];
m1_856 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddNew()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddNew()", span="1373-1373"];
m1_1176 [cluster="Newtonsoft.Json.Linq.JContainer.AddFirst(object)", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Linq.JContainer.AddFirst(object)", span="583-583"];
m1_1178 [cluster="Newtonsoft.Json.Linq.JToken.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Linq.JToken.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])", span="402-402"];
m1_850 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListIsSorted()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListIsSorted()", span="1366-1366"];
m1_852 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListIsSorted()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(false, l.IsSorted)", span="1369-1369"];
m1_851 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListIsSorted()", file="DynamicReflectionDelegateFactoryTests.cs", label="IBindingList l = new JObject()", span="1368-1368"];
m1_853 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListIsSorted()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListIsSorted()", span="1366-1366"];
m1_1177 [cluster="Newtonsoft.Json.Linq.JObject.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Linq.JObject.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])", span="403-403"];
m1_982 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.InvalidValueCastExceptionMessage()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.InvalidValueCastExceptionMessage()", span="1607-1607"];
m1_983 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.InvalidValueCastExceptionMessage()", file="DynamicReflectionDelegateFactoryTests.cs", label="ExceptionAssert.Throws<ArgumentException>(() =>\r\n            {\r\n                string json = @''{\r\n  ''''responseData'''': {}, \r\n  ''''responseDetails'''': null, \r\n  ''''responseStatus'''': 200\r\n}'';\r\n\r\n                JObject o = JObject.Parse(json);\r\n\r\n                string name = (string)o[''responseData''];\r\n            }, ''Can not convert Object to String.'')", span="1609-1620"];
m1_984 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.InvalidValueCastExceptionMessage()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.InvalidValueCastExceptionMessage()", span="1607-1607"];
m1_1075 [cluster="Newtonsoft.Json.Linq.JValue.ToString()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Linq.JValue.ToString()", span="798-798"];
m1_286 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericValueCast()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericValueCast()", span="482-482"];
m1_290 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericValueCast()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(true, value)", span="487-487"];
m1_294 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericValueCast()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(null, value)", span="492-492"];
m1_289 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericValueCast()", file="DynamicReflectionDelegateFactoryTests.cs", label="bool? value = o.Value<bool?>(''foo'')", span="486-486"];
m1_291 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericValueCast()", file="DynamicReflectionDelegateFactoryTests.cs", label="json = @''{''''foo'''':null}''", span="489-489"];
m1_293 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericValueCast()", file="DynamicReflectionDelegateFactoryTests.cs", label="value = o.Value<bool?>(''foo'')", span="491-491"];
m1_288 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericValueCast()", file="DynamicReflectionDelegateFactoryTests.cs", label="JObject o = (JObject)JsonConvert.DeserializeObject(json)", span="485-485"];
m1_292 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericValueCast()", file="DynamicReflectionDelegateFactoryTests.cs", label="o = (JObject)JsonConvert.DeserializeObject(json)", span="490-490"];
m1_287 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericValueCast()", file="DynamicReflectionDelegateFactoryTests.cs", label="string json = @''{''''foo'''':true}''", span="484-484"];
m1_295 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericValueCast()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericValueCast()", span="482-482"];
m1_285 [cluster="Newtonsoft.Json.Utilities.DateTimeUtils.ConvertJavaScriptTicksToDateTime(long)", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Utilities.DateTimeUtils.ConvertJavaScriptTicksToDateTime(long)", span="181-181"];
m1_535 [cluster="System.Collections.IList.Add(object)", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry System.Collections.IList.Add(object)", span="0-0"];
m1_462 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", file="DynamicReflectionDelegateFactoryTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", span="781-781"];
m1_469 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(''value1'', (string)o[''StringValue''])", span="796-796"];
m1_475 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(''value2'', (string)o[''StringValue''])", span="804-804"];
m1_479 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(null, (string)o[''StringValue''])", span="809-809"];
m1_483 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(JValue.CreateNull(), o[''NullValue''])", span="814-814"];
m1_468 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(''value1'', changed)", span="795-795"];
m1_470 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(1, changedCount)", span="797-797"];
m1_472 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(1, changedCount)", span="800-800"];
m1_474 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(''value2'', changed)", span="803-803"];
m1_476 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(2, changedCount)", span="805-805"];
m1_478 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(null, changed)", span="808-808"];
m1_480 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(3, changedCount)", span="810-810"];
m1_482 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(null, changed)", span="813-813"];
m1_484 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(4, changedCount)", span="815-815"];
m1_486 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", file="DynamicReflectionDelegateFactoryTests.cs", label="Assert.AreEqual(4, changedCount)", span="818-818"];
m1_465 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", file="DynamicReflectionDelegateFactoryTests.cs", label="JObject o = new JObject()", span="786-786"];
m1_467 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", file="DynamicReflectionDelegateFactoryTests.cs", label="o[''StringValue''] = ''value1''", span="794-794"];
m1_471 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", file="DynamicReflectionDelegateFactoryTests.cs", label="o[''StringValue''] = ''value1''", span="799-799"];
m1_473 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", file="DynamicReflectionDelegateFactoryTests.cs", label="o[''StringValue''] = ''value2''", span="802-802"];
m1_477 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", file="DynamicReflectionDelegateFactoryTests.cs", label="o[''StringValue''] = null", span="807-807"];
m1_481 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", file="DynamicReflectionDelegateFactoryTests.cs", label="o[''NullValue''] = null", span="812-812"];
m1_485 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", file="DynamicReflectionDelegateFactoryTests.cs", label="o[''NullValue''] = null", span="817-817"];
m1_464 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", file="DynamicReflectionDelegateFactoryTests.cs", label="int changedCount = 0", span="784-784"];
m1_466 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", file="DynamicReflectionDelegateFactoryTests.cs", label="o.PropertyChanged += (sender, args) =>\r\n            {\r\n                JObject s = (JObject)sender;\r\n                changed = (s[args.PropertyName] != null) ? ((JValue)s[args.PropertyName]).Value : null;\r\n                changedCount++;\r\n            }", span="787-792"];
m1_463 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", file="DynamicReflectionDelegateFactoryTests.cs", label="object changed = null", span="783-783"];
m1_487 [cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", file="DynamicReflectionDelegateFactoryTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", span="781-781"];
m1_1196 [file="DynamicReflectionDelegateFactoryTests.cs", label=changingCount, span=""];
m1_1197 [file="DynamicReflectionDelegateFactoryTests.cs", label=changedCount, span=""];
m1_1198 [file="DynamicReflectionDelegateFactoryTests.cs", label=changedCount, span=""];
m3_5 [cluster="Newtonsoft.Json.Serialization.JsonPropertyCollection.JsonPropertyCollection(System.Type)", file="JsonConvertTest.cs", label="Entry Newtonsoft.Json.Serialization.JsonPropertyCollection.JsonPropertyCollection(System.Type)", span="45-45"];
m3_13 [cluster="System.Runtime.Serialization.FormatterServices.GetUninitializedObject(System.Type)", file="JsonConvertTest.cs", label="Entry System.Runtime.Serialization.FormatterServices.GetUninitializedObject(System.Type)", span="0-0"];
m3_0 [cluster="Newtonsoft.Json.Serialization.JsonObjectContract.JsonObjectContract(System.Type)", file="JsonConvertTest.cs", label="Entry Newtonsoft.Json.Serialization.JsonObjectContract.JsonObjectContract(System.Type)", span="174-174"];
m3_1 [cluster="Newtonsoft.Json.Serialization.JsonObjectContract.JsonObjectContract(System.Type)", file="JsonConvertTest.cs", label="ContractType = JsonContractType.Object", span="177-177"];
m3_2 [cluster="Newtonsoft.Json.Serialization.JsonObjectContract.JsonObjectContract(System.Type)", file="JsonConvertTest.cs", label="Properties = new JsonPropertyCollection(UnderlyingType)", span="179-179"];
m3_3 [cluster="Newtonsoft.Json.Serialization.JsonObjectContract.JsonObjectContract(System.Type)", file="JsonConvertTest.cs", label="CreatorParameters = new JsonPropertyCollection(UnderlyingType)", span="180-180"];
m3_4 [cluster="Newtonsoft.Json.Serialization.JsonObjectContract.JsonObjectContract(System.Type)", file="JsonConvertTest.cs", label="Exit Newtonsoft.Json.Serialization.JsonObjectContract.JsonObjectContract(System.Type)", span="174-174"];
m3_11 [cluster="Newtonsoft.Json.JsonException.JsonException(string)", file="JsonConvertTest.cs", label="Entry Newtonsoft.Json.JsonException.JsonException(string)", span="54-54"];
m3_6 [cluster="Newtonsoft.Json.Serialization.JsonObjectContract.GetUninitializedObject()", file="JsonConvertTest.cs", label="Entry Newtonsoft.Json.Serialization.JsonObjectContract.GetUninitializedObject()", span="187-187"];
m3_7 [cluster="Newtonsoft.Json.Serialization.JsonObjectContract.GetUninitializedObject()", file="JsonConvertTest.cs", label="!JsonTypeReflector.FullyTrusted", span="190-190"];
m3_8 [cluster="Newtonsoft.Json.Serialization.JsonObjectContract.GetUninitializedObject()", file="JsonConvertTest.cs", label="throw new JsonException(''Insufficient permissions. Creating an uninitialized '{0}' type requires full trust.''.FormatWith(CultureInfo.InvariantCulture, NonNullableUnderlyingType));", span="191-191"];
m3_9 [cluster="Newtonsoft.Json.Serialization.JsonObjectContract.GetUninitializedObject()", file="JsonConvertTest.cs", label="return FormatterServices.GetUninitializedObject(NonNullableUnderlyingType);", span="193-193"];
m3_10 [cluster="Newtonsoft.Json.Serialization.JsonObjectContract.GetUninitializedObject()", file="JsonConvertTest.cs", label="Exit Newtonsoft.Json.Serialization.JsonObjectContract.GetUninitializedObject()", span="187-187"];
m3_12 [cluster="string.FormatWith(System.IFormatProvider, object)", file="JsonConvertTest.cs", label="Entry string.FormatWith(System.IFormatProvider, object)", span="47-47"];
m3_14 [file="JsonConvertTest.cs", label="Newtonsoft.Json.Serialization.JsonObjectContract", span=""];
m4_13 [cluster="System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", file="JsonSchemaSpecTests.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", span="0-0"];
m4_14 [cluster="string.Join(string, params string[])", file="JsonSchemaSpecTests.cs", label="Entry string.Join(string, params string[])", span="0-0"];
m4_15 [cluster="Unk.AreEqual", file="JsonSchemaSpecTests.cs", label="Entry Unk.AreEqual", span=""];
m4_47 [cluster="Unk.ToList", file="JsonSchemaSpecTests.cs", label="Entry Unk.ToList", span=""];
m4_16 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTests.GetSpecTestDetails()", file="JsonSchemaSpecTests.cs", label="Entry Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTests.GetSpecTestDetails()", span="74-74"];
m4_17 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTests.GetSpecTestDetails()", file="JsonSchemaSpecTests.cs", label="IList<JsonSchemaSpecTest> specTests = new List<JsonSchemaSpecTest>()", span="76-76"];
m4_18 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTests.GetSpecTestDetails()", file="JsonSchemaSpecTests.cs", label="string baseDirectory = AppDomain.CurrentDomain.BaseDirectory", span="79-79"];
m4_33 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTests.GetSpecTestDetails()", file="JsonSchemaSpecTests.cs", label="jsonSchemaSpecTest.TestNumber = specTests.Count + 1", span="104-104"];
m4_34 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTests.GetSpecTestDetails()", file="JsonSchemaSpecTests.cs", label="specTests.Add(jsonSchemaSpecTest)", span="106-106"];
m4_35 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTests.GetSpecTestDetails()", file="JsonSchemaSpecTests.cs", label="specTests = specTests.Where(s => s.FileName != ''dependencies.json''\r\n                                             && s.TestCaseDescription != ''multiple disallow subschema''\r\n                                             && s.TestCaseDescription != ''types from separate schemas are merged''\r\n                                             && s.TestCaseDescription != ''when types includes a schema it should fully validate the schema''\r\n                                             && s.TestCaseDescription != ''types can include schemas'').ToList()", span="111-115"];
m4_19 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTests.GetSpecTestDetails()", file="JsonSchemaSpecTests.cs", label="string baseTestPath = Path.Combine(baseDirectory, Path.Combine(''Schema'', ''Specs''))", span="80-80"];
m4_20 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTests.GetSpecTestDetails()", file="JsonSchemaSpecTests.cs", label="string[] testFiles = Directory.GetFiles(baseTestPath, ''*.json'', SearchOption.AllDirectories)", span="82-82"];
m4_21 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTests.GetSpecTestDetails()", file="JsonSchemaSpecTests.cs", label=testFiles, span="85-85"];
m4_22 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTests.GetSpecTestDetails()", file="JsonSchemaSpecTests.cs", label="string testJson = System.IO.File.ReadAllText(testFile)", span="87-87"];
m4_27 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTests.GetSpecTestDetails()", file="JsonSchemaSpecTests.cs", label="jsonSchemaSpecTest.FileName = Path.GetFileName(testFile)", span="97-97"];
m4_23 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTests.GetSpecTestDetails()", file="JsonSchemaSpecTests.cs", label="JArray a = JArray.Parse(testJson)", span="89-89"];
m4_24 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTests.GetSpecTestDetails()", file="JsonSchemaSpecTests.cs", label=a, span="91-91"];
m4_25 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTests.GetSpecTestDetails()", file="JsonSchemaSpecTests.cs", label="testCase[''tests'']", span="93-93"];
m4_28 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTests.GetSpecTestDetails()", file="JsonSchemaSpecTests.cs", label="jsonSchemaSpecTest.TestCaseDescription = (string)testCase[''description'']", span="98-98"];
m4_29 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTests.GetSpecTestDetails()", file="JsonSchemaSpecTests.cs", label="jsonSchemaSpecTest.Schema = (JObject)testCase[''schema'']", span="99-99"];
m4_26 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTests.GetSpecTestDetails()", file="JsonSchemaSpecTests.cs", label="JsonSchemaSpecTest jsonSchemaSpecTest = new JsonSchemaSpecTest()", span="95-95"];
m4_30 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTests.GetSpecTestDetails()", file="JsonSchemaSpecTests.cs", label="jsonSchemaSpecTest.TestDescription = (string)test[''description'']", span="101-101"];
m4_31 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTests.GetSpecTestDetails()", file="JsonSchemaSpecTests.cs", label="jsonSchemaSpecTest.Data = test[''data'']", span="102-102"];
m4_32 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTests.GetSpecTestDetails()", file="JsonSchemaSpecTests.cs", label="jsonSchemaSpecTest.IsValid = (bool)test[''valid'']", span="103-103"];
m4_36 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTests.GetSpecTestDetails()", file="JsonSchemaSpecTests.cs", label="return specTests;", span="117-117"];
m4_37 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTests.GetSpecTestDetails()", file="JsonSchemaSpecTests.cs", label="Exit Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTests.GetSpecTestDetails()", span="74-74"];
m4_44 [cluster="System.IO.Path.GetFileName(string)", file="JsonSchemaSpecTests.cs", label="Entry System.IO.Path.GetFileName(string)", span="0-0"];
m4_3 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTests.SpecTest(Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTest)", file="JsonSchemaSpecTests.cs", label="Entry Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTests.SpecTest(Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTest)", span="63-63"];
m4_4 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTests.SpecTest(Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTest)", file="JsonSchemaSpecTests.cs", label="JsonSchema s = JsonSchema.Read(jsonSchemaSpecTest.Schema.CreateReader())", span="65-65"];
m4_6 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTests.SpecTest(Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTest)", file="JsonSchemaSpecTests.cs", label="bool v = jsonSchemaSpecTest.Data.IsValid(s, out e)", span="68-68"];
m4_8 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTests.SpecTest(Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTest)", file="JsonSchemaSpecTests.cs", label="Assert.AreEqual(jsonSchemaSpecTest.IsValid, v, jsonSchemaSpecTest.TestCaseDescription + '' - '' + jsonSchemaSpecTest.TestDescription + '' - errors: '' + string.Join('', '', errorMessages))", span="71-71"];
m4_5 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTests.SpecTest(Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTest)", file="JsonSchemaSpecTests.cs", label="IList<string> e", span="67-67"];
m4_7 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTests.SpecTest(Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTest)", file="JsonSchemaSpecTests.cs", label="string[] errorMessages = ((e != null) ? e.ToArray() : null) ?? new string[0]", span="69-69"];
m4_9 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTests.SpecTest(Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTest)", file="JsonSchemaSpecTests.cs", label="Exit Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTests.SpecTest(Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTest)", span="63-63"];
m4_10 [cluster="Newtonsoft.Json.Linq.JToken.CreateReader()", file="JsonSchemaSpecTests.cs", label="Entry Newtonsoft.Json.Linq.JToken.CreateReader()", span="1886-1886"];
m4_11 [cluster="Newtonsoft.Json.Schema.JsonSchema.Read(Newtonsoft.Json.JsonReader)", file="JsonSchemaSpecTests.cs", label="Entry Newtonsoft.Json.Schema.JsonSchema.Read(Newtonsoft.Json.JsonReader)", span="269-269"];
m4_46 [cluster="Unk.Where", file="JsonSchemaSpecTests.cs", label="Entry Unk.Where", span=""];
m4_48 [cluster="lambda expression", file="JsonSchemaSpecTests.cs", label="Entry lambda expression", span="111-115"];
m4_49 [cluster="lambda expression", file="JsonSchemaSpecTests.cs", label="s.FileName != ''dependencies.json''\r\n                                             && s.TestCaseDescription != ''multiple disallow subschema''\r\n                                             && s.TestCaseDescription != ''types from separate schemas are merged''\r\n                                             && s.TestCaseDescription != ''when types includes a schema it should fully validate the schema''\r\n                                             && s.TestCaseDescription != ''types can include schemas''", span="111-115"];
m4_50 [cluster="lambda expression", file="JsonSchemaSpecTests.cs", label="Exit lambda expression", span="111-115"];
m4_43 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTest.JsonSchemaSpecTest()", file="JsonSchemaSpecTests.cs", label="Entry Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTest.JsonSchemaSpecTest()", span="43-43"];
m4_39 [cluster="System.IO.Path.Combine(string, string)", file="JsonSchemaSpecTests.cs", label="Entry System.IO.Path.Combine(string, string)", span="0-0"];
m4_45 [cluster="System.Collections.Generic.ICollection<T>.Add(T)", file="JsonSchemaSpecTests.cs", label="Entry System.Collections.Generic.ICollection<T>.Add(T)", span="0-0"];
m4_12 [cluster="Newtonsoft.Json.Linq.JToken.IsValid(Newtonsoft.Json.Schema.JsonSchema, out System.Collections.Generic.IList<string>)", file="JsonSchemaSpecTests.cs", label="Entry Newtonsoft.Json.Linq.JToken.IsValid(Newtonsoft.Json.Schema.JsonSchema, out System.Collections.Generic.IList<string>)", span="79-79"];
m4_42 [cluster="Newtonsoft.Json.Linq.JArray.Parse(string)", file="JsonSchemaSpecTests.cs", label="Entry Newtonsoft.Json.Linq.JArray.Parse(string)", span="157-157"];
m4_0 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTest.ToString()", file="JsonSchemaSpecTests.cs", label="Entry Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTest.ToString()", span="53-53"];
m4_1 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTest.ToString()", file="JsonSchemaSpecTests.cs", label="return FileName + '' - '' + TestCaseDescription + '' - '' + TestDescription;", span="55-55"];
m4_2 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTest.ToString()", file="JsonSchemaSpecTests.cs", label="Exit Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTest.ToString()", span="53-53"];
m4_38 [cluster="System.Collections.Generic.List<T>.List()", file="JsonSchemaSpecTests.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m4_41 [cluster="System.IO.File.ReadAllText(string)", file="JsonSchemaSpecTests.cs", label="Entry System.IO.File.ReadAllText(string)", span="0-0"];
m4_40 [cluster="System.IO.Directory.GetFiles(string, string, System.IO.SearchOption)", file="JsonSchemaSpecTests.cs", label="Entry System.IO.Directory.GetFiles(string, string, System.IO.SearchOption)", span="0-0"];
m4_51 [file="JsonSchemaSpecTests.cs", label="Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTest", span=""];
m5_30 [cluster="System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.Reflection.MethodInfo)", file="ReadAsyncTests.cs", label="Entry System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.Reflection.MethodInfo)", span="0-0"];
m5_20 [cluster="Newtonsoft.Json.Utilities.ILGeneratorExtensions.UnboxIfNeeded(System.Reflection.Emit.ILGenerator, System.Type)", file="ReadAsyncTests.cs", label="Entry Newtonsoft.Json.Utilities.ILGeneratorExtensions.UnboxIfNeeded(System.Reflection.Emit.ILGenerator, System.Type)", span="58-58"];
m5_21 [cluster="Newtonsoft.Json.Utilities.ILGeneratorExtensions.UnboxIfNeeded(System.Reflection.Emit.ILGenerator, System.Type)", file="ReadAsyncTests.cs", label="type.IsValueType()", span="60-60"];
m5_22 [cluster="Newtonsoft.Json.Utilities.ILGeneratorExtensions.UnboxIfNeeded(System.Reflection.Emit.ILGenerator, System.Type)", file="ReadAsyncTests.cs", label="generator.Emit(OpCodes.Unbox_Any, type)", span="61-61"];
m5_23 [cluster="Newtonsoft.Json.Utilities.ILGeneratorExtensions.UnboxIfNeeded(System.Reflection.Emit.ILGenerator, System.Type)", file="ReadAsyncTests.cs", label="generator.Emit(OpCodes.Castclass, type)", span="63-63"];
m5_24 [cluster="Newtonsoft.Json.Utilities.ILGeneratorExtensions.UnboxIfNeeded(System.Reflection.Emit.ILGenerator, System.Type)", file="ReadAsyncTests.cs", label="Exit Newtonsoft.Json.Utilities.ILGeneratorExtensions.UnboxIfNeeded(System.Reflection.Emit.ILGenerator, System.Type)", span="58-58"];
m5_9 [cluster="Newtonsoft.Json.Utilities.ILGeneratorExtensions.PushArrayInstance(System.Reflection.Emit.ILGenerator, int, int)", file="ReadAsyncTests.cs", label="Entry Newtonsoft.Json.Utilities.ILGeneratorExtensions.PushArrayInstance(System.Reflection.Emit.ILGenerator, int, int)", span="43-43"];
m5_10 [cluster="Newtonsoft.Json.Utilities.ILGeneratorExtensions.PushArrayInstance(System.Reflection.Emit.ILGenerator, int, int)", file="ReadAsyncTests.cs", label="generator.Emit(OpCodes.Ldarg, argsIndex)", span="45-45"];
m5_11 [cluster="Newtonsoft.Json.Utilities.ILGeneratorExtensions.PushArrayInstance(System.Reflection.Emit.ILGenerator, int, int)", file="ReadAsyncTests.cs", label="generator.Emit(OpCodes.Ldc_I4, arrayIndex)", span="46-46"];
m5_12 [cluster="Newtonsoft.Json.Utilities.ILGeneratorExtensions.PushArrayInstance(System.Reflection.Emit.ILGenerator, int, int)", file="ReadAsyncTests.cs", label="generator.Emit(OpCodes.Ldelem_Ref)", span="47-47"];
m5_13 [cluster="Newtonsoft.Json.Utilities.ILGeneratorExtensions.PushArrayInstance(System.Reflection.Emit.ILGenerator, int, int)", file="ReadAsyncTests.cs", label="Exit Newtonsoft.Json.Utilities.ILGeneratorExtensions.PushArrayInstance(System.Reflection.Emit.ILGenerator, int, int)", span="43-43"];
m5_31 [cluster="Newtonsoft.Json.Utilities.ILGeneratorExtensions.Return(System.Reflection.Emit.ILGenerator)", file="ReadAsyncTests.cs", label="Entry Newtonsoft.Json.Utilities.ILGeneratorExtensions.Return(System.Reflection.Emit.ILGenerator)", span="74-74"];
m5_32 [cluster="Newtonsoft.Json.Utilities.ILGeneratorExtensions.Return(System.Reflection.Emit.ILGenerator)", file="ReadAsyncTests.cs", label="generator.Emit(OpCodes.Ret)", span="76-76"];
m5_33 [cluster="Newtonsoft.Json.Utilities.ILGeneratorExtensions.Return(System.Reflection.Emit.ILGenerator)", file="ReadAsyncTests.cs", label="Exit Newtonsoft.Json.Utilities.ILGeneratorExtensions.Return(System.Reflection.Emit.ILGenerator)", span="74-74"];
m5_25 [cluster="Newtonsoft.Json.Utilities.ILGeneratorExtensions.CallMethod(System.Reflection.Emit.ILGenerator, System.Reflection.MethodInfo)", file="ReadAsyncTests.cs", label="Entry Newtonsoft.Json.Utilities.ILGeneratorExtensions.CallMethod(System.Reflection.Emit.ILGenerator, System.Reflection.MethodInfo)", span="66-66"];
m5_26 [cluster="Newtonsoft.Json.Utilities.ILGeneratorExtensions.CallMethod(System.Reflection.Emit.ILGenerator, System.Reflection.MethodInfo)", file="ReadAsyncTests.cs", label="methodInfo.IsFinal || !methodInfo.IsVirtual", span="68-68"];
m5_27 [cluster="Newtonsoft.Json.Utilities.ILGeneratorExtensions.CallMethod(System.Reflection.Emit.ILGenerator, System.Reflection.MethodInfo)", file="ReadAsyncTests.cs", label="generator.Emit(OpCodes.Call, methodInfo)", span="69-69"];
m5_28 [cluster="Newtonsoft.Json.Utilities.ILGeneratorExtensions.CallMethod(System.Reflection.Emit.ILGenerator, System.Reflection.MethodInfo)", file="ReadAsyncTests.cs", label="generator.Emit(OpCodes.Callvirt, methodInfo)", span="71-71"];
m5_29 [cluster="Newtonsoft.Json.Utilities.ILGeneratorExtensions.CallMethod(System.Reflection.Emit.ILGenerator, System.Reflection.MethodInfo)", file="ReadAsyncTests.cs", label="Exit Newtonsoft.Json.Utilities.ILGeneratorExtensions.CallMethod(System.Reflection.Emit.ILGenerator, System.Reflection.MethodInfo)", span="66-66"];
m5_7 [cluster="System.Type.IsValueType()", file="ReadAsyncTests.cs", label="Entry System.Type.IsValueType()", span="539-539"];
m5_15 [cluster="Newtonsoft.Json.Utilities.ILGeneratorExtensions.BoxIfNeeded(System.Reflection.Emit.ILGenerator, System.Type)", file="ReadAsyncTests.cs", label="Entry Newtonsoft.Json.Utilities.ILGeneratorExtensions.BoxIfNeeded(System.Reflection.Emit.ILGenerator, System.Type)", span="50-50"];
m5_16 [cluster="Newtonsoft.Json.Utilities.ILGeneratorExtensions.BoxIfNeeded(System.Reflection.Emit.ILGenerator, System.Type)", file="ReadAsyncTests.cs", label="type.IsValueType()", span="52-52"];
m5_17 [cluster="Newtonsoft.Json.Utilities.ILGeneratorExtensions.BoxIfNeeded(System.Reflection.Emit.ILGenerator, System.Type)", file="ReadAsyncTests.cs", label="generator.Emit(OpCodes.Box, type)", span="53-53"];
m5_18 [cluster="Newtonsoft.Json.Utilities.ILGeneratorExtensions.BoxIfNeeded(System.Reflection.Emit.ILGenerator, System.Type)", file="ReadAsyncTests.cs", label="generator.Emit(OpCodes.Castclass, type)", span="55-55"];
m5_19 [cluster="Newtonsoft.Json.Utilities.ILGeneratorExtensions.BoxIfNeeded(System.Reflection.Emit.ILGenerator, System.Type)", file="ReadAsyncTests.cs", label="Exit Newtonsoft.Json.Utilities.ILGeneratorExtensions.BoxIfNeeded(System.Reflection.Emit.ILGenerator, System.Type)", span="50-50"];
m5_14 [cluster="System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, int)", file="ReadAsyncTests.cs", label="Entry System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, int)", span="0-0"];
m5_8 [cluster="System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.Type)", file="ReadAsyncTests.cs", label="Entry System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.Type)", span="0-0"];
m5_6 [cluster="System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)", file="ReadAsyncTests.cs", label="Entry System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)", span="0-0"];
m5_0 [cluster="Newtonsoft.Json.Utilities.ILGeneratorExtensions.PushInstance(System.Reflection.Emit.ILGenerator, System.Type)", file="ReadAsyncTests.cs", label="Entry Newtonsoft.Json.Utilities.ILGeneratorExtensions.PushInstance(System.Reflection.Emit.ILGenerator, System.Type)", span="34-34"];
m5_1 [cluster="Newtonsoft.Json.Utilities.ILGeneratorExtensions.PushInstance(System.Reflection.Emit.ILGenerator, System.Type)", file="ReadAsyncTests.cs", label="generator.Emit(OpCodes.Ldarg_0)", span="36-36"];
m5_2 [cluster="Newtonsoft.Json.Utilities.ILGeneratorExtensions.PushInstance(System.Reflection.Emit.ILGenerator, System.Type)", file="ReadAsyncTests.cs", label="type.IsValueType()", span="37-37"];
m5_3 [cluster="Newtonsoft.Json.Utilities.ILGeneratorExtensions.PushInstance(System.Reflection.Emit.ILGenerator, System.Type)", file="ReadAsyncTests.cs", label="generator.Emit(OpCodes.Unbox, type)", span="38-38"];
m5_4 [cluster="Newtonsoft.Json.Utilities.ILGeneratorExtensions.PushInstance(System.Reflection.Emit.ILGenerator, System.Type)", file="ReadAsyncTests.cs", label="generator.Emit(OpCodes.Castclass, type)", span="40-40"];
m5_5 [cluster="Newtonsoft.Json.Utilities.ILGeneratorExtensions.PushInstance(System.Reflection.Emit.ILGenerator, System.Type)", file="ReadAsyncTests.cs", label="Exit Newtonsoft.Json.Utilities.ILGeneratorExtensions.PushInstance(System.Reflection.Emit.ILGenerator, System.Type)", span="34-34"];
m6_15 [cluster="Unk.AreEqual", file="ReadTests.cs", label="Entry Unk.AreEqual", span=""];
m6_0 [cluster="Newtonsoft.Json.Tests.Documentation.Samples.Linq.ReadJTokenFromBson.Example()", file="ReadTests.cs", label="Entry Newtonsoft.Json.Tests.Documentation.Samples.Linq.ReadJTokenFromBson.Example()", span="40-40"];
m6_1 [cluster="Newtonsoft.Json.Tests.Documentation.Samples.Linq.ReadJTokenFromBson.Example()", file="ReadTests.cs", label="byte[] data = Convert.FromBase64String(''KQAAAAJuYW1lMQAHAAAAdmFsdWUxAAJuYW1lMgAHAAAAdmFsdWUyAAA='')", span="43-43"];
m6_2 [cluster="Newtonsoft.Json.Tests.Documentation.Samples.Linq.ReadJTokenFromBson.Example()", file="ReadTests.cs", label="MemoryStream ms = new MemoryStream(data)", span="44-44"];
m6_3 [cluster="Newtonsoft.Json.Tests.Documentation.Samples.Linq.ReadJTokenFromBson.Example()", file="ReadTests.cs", label="JObject o", span="46-46"];
m6_4 [cluster="Newtonsoft.Json.Tests.Documentation.Samples.Linq.ReadJTokenFromBson.Example()", file="ReadTests.cs", label="BsonReader reader = new BsonReader(ms)", span="47-47"];
m6_5 [cluster="Newtonsoft.Json.Tests.Documentation.Samples.Linq.ReadJTokenFromBson.Example()", file="ReadTests.cs", label="o = (JObject)JToken.ReadFrom(reader)", span="49-49"];
m6_6 [cluster="Newtonsoft.Json.Tests.Documentation.Samples.Linq.ReadJTokenFromBson.Example()", file="ReadTests.cs", label="string value = (string)o[''name1'']", span="52-52"];
m6_7 [cluster="Newtonsoft.Json.Tests.Documentation.Samples.Linq.ReadJTokenFromBson.Example()", file="ReadTests.cs", label="Console.WriteLine(value)", span="54-54"];
m6_8 [cluster="Newtonsoft.Json.Tests.Documentation.Samples.Linq.ReadJTokenFromBson.Example()", file="ReadTests.cs", label="Assert.AreEqual(''value1'', value)", span="58-58"];
m6_9 [cluster="Newtonsoft.Json.Tests.Documentation.Samples.Linq.ReadJTokenFromBson.Example()", file="ReadTests.cs", label="Exit Newtonsoft.Json.Tests.Documentation.Samples.Linq.ReadJTokenFromBson.Example()", span="40-40"];
m6_12 [cluster="Newtonsoft.Json.Bson.BsonReader.BsonReader(System.IO.Stream)", file="ReadTests.cs", label="Entry Newtonsoft.Json.Bson.BsonReader.BsonReader(System.IO.Stream)", span="125-125"];
m6_11 [cluster="System.IO.MemoryStream.MemoryStream(byte[])", file="ReadTests.cs", label="Entry System.IO.MemoryStream.MemoryStream(byte[])", span="0-0"];
m6_13 [cluster="Newtonsoft.Json.Linq.JToken.ReadFrom(Newtonsoft.Json.JsonReader)", file="ReadTests.cs", label="Entry Newtonsoft.Json.Linq.JToken.ReadFrom(Newtonsoft.Json.JsonReader)", span="1849-1849"];
m6_10 [cluster="System.Convert.FromBase64String(string)", file="ReadTests.cs", label="Entry System.Convert.FromBase64String(string)", span="0-0"];
m6_14 [cluster="System.Console.WriteLine(string)", file="ReadTests.cs", label="Entry System.Console.WriteLine(string)", span="0-0"];
m7_121 [cluster="System.Exception.Exception(string)", file="TestFixtureBase.cs", label="Entry System.Exception.Exception(string)", span="0-0"];
m7_86 [cluster="Unk.Contains", file="TestFixtureBase.cs", label="Entry Unk.Contains", span=""];
m7_76 [cluster="Newtonsoft.Json.Tests.CustomAssert.IsInstanceOfType(System.Type, object)", file="TestFixtureBase.cs", label="Entry Newtonsoft.Json.Tests.CustomAssert.IsInstanceOfType(System.Type, object)", span="301-301"];
m7_77 [cluster="Newtonsoft.Json.Tests.CustomAssert.IsInstanceOfType(System.Type, object)", file="TestFixtureBase.cs", label="Assert.IsInstanceOf(t, instance)", span="303-303"];
m7_78 [cluster="Newtonsoft.Json.Tests.CustomAssert.IsInstanceOfType(System.Type, object)", file="TestFixtureBase.cs", label="Exit Newtonsoft.Json.Tests.CustomAssert.IsInstanceOfType(System.Type, object)", span="301-301"];
m7_27 [cluster="System.IO.MemoryStream.ToArray()", file="TestFixtureBase.cs", label="Entry System.IO.MemoryStream.ToArray()", span="0-0"];
m7_34 [cluster="System.DateTime.SpecifyKind(System.DateTime, System.DateTimeKind)", file="TestFixtureBase.cs", label="Entry System.DateTime.SpecifyKind(System.DateTime, System.DateTimeKind)", span="0-0"];
m7_11 [cluster="System.Type.GetField(string)", file="TestFixtureBase.cs", label="Entry System.Type.GetField(string)", span="0-0"];
m7_12 [cluster="Newtonsoft.Json.Tests.TestReflectionUtils.GetMethod(System.Type, string)", file="TestFixtureBase.cs", label="Entry Newtonsoft.Json.Tests.TestReflectionUtils.GetMethod(System.Type, string)", span="88-88"];
m7_13 [cluster="Newtonsoft.Json.Tests.TestReflectionUtils.GetMethod(System.Type, string)", file="TestFixtureBase.cs", label="return type.GetMethod(name);", span="91-91"];
m7_14 [cluster="Newtonsoft.Json.Tests.TestReflectionUtils.GetMethod(System.Type, string)", file="TestFixtureBase.cs", label="Exit Newtonsoft.Json.Tests.TestReflectionUtils.GetMethod(System.Type, string)", span="88-88"];
m7_69 [cluster="Newtonsoft.Json.Tests.TestFixtureBase.WriteEscapedJson(string)", file="TestFixtureBase.cs", label="Entry Newtonsoft.Json.Tests.TestFixtureBase.WriteEscapedJson(string)", span="288-288"];
m7_70 [cluster="Newtonsoft.Json.Tests.TestFixtureBase.WriteEscapedJson(string)", file="TestFixtureBase.cs", label="Console.WriteLine(EscapeJson(json))", span="290-290"];
m7_71 [cluster="Newtonsoft.Json.Tests.TestFixtureBase.WriteEscapedJson(string)", file="TestFixtureBase.cs", label="Exit Newtonsoft.Json.Tests.TestFixtureBase.WriteEscapedJson(string)", span="288-288"];
m7_16 [cluster="Newtonsoft.Json.Tests.TestFixtureBase.GetDataContractJsonSerializeResult(object)", file="TestFixtureBase.cs", label="Entry Newtonsoft.Json.Tests.TestFixtureBase.GetDataContractJsonSerializeResult(object)", span="200-200"];
m7_17 [cluster="Newtonsoft.Json.Tests.TestFixtureBase.GetDataContractJsonSerializeResult(object)", file="TestFixtureBase.cs", label="MemoryStream ms = new MemoryStream()", span="202-202"];
m7_18 [cluster="Newtonsoft.Json.Tests.TestFixtureBase.GetDataContractJsonSerializeResult(object)", file="TestFixtureBase.cs", label="DataContractJsonSerializer s = new DataContractJsonSerializer(o.GetType())", span="203-203"];
m7_19 [cluster="Newtonsoft.Json.Tests.TestFixtureBase.GetDataContractJsonSerializeResult(object)", file="TestFixtureBase.cs", label="s.WriteObject(ms, o)", span="204-204"];
m7_20 [cluster="Newtonsoft.Json.Tests.TestFixtureBase.GetDataContractJsonSerializeResult(object)", file="TestFixtureBase.cs", label="var data = ms.ToArray()", span="206-206"];
m7_21 [cluster="Newtonsoft.Json.Tests.TestFixtureBase.GetDataContractJsonSerializeResult(object)", file="TestFixtureBase.cs", label="return Encoding.UTF8.GetString(data, 0, data.Length);", span="207-207"];
m7_22 [cluster="Newtonsoft.Json.Tests.TestFixtureBase.GetDataContractJsonSerializeResult(object)", file="TestFixtureBase.cs", label="Exit Newtonsoft.Json.Tests.TestFixtureBase.GetDataContractJsonSerializeResult(object)", span="200-200"];
m7_4 [cluster="Newtonsoft.Json.Tests.TestReflectionUtils.GetProperty(System.Type, string)", file="TestFixtureBase.cs", label="Entry Newtonsoft.Json.Tests.TestReflectionUtils.GetProperty(System.Type, string)", span="70-70"];
m7_5 [cluster="Newtonsoft.Json.Tests.TestReflectionUtils.GetProperty(System.Type, string)", file="TestFixtureBase.cs", label="return type.GetProperty(name);", span="73-73"];
m7_6 [cluster="Newtonsoft.Json.Tests.TestReflectionUtils.GetProperty(System.Type, string)", file="TestFixtureBase.cs", label="Exit Newtonsoft.Json.Tests.TestReflectionUtils.GetProperty(System.Type, string)", span="70-70"];
m7_83 [cluster="Newtonsoft.Json.Tests.CustomAssert.Contains(System.Collections.IList, object, string)", file="TestFixtureBase.cs", label="Entry Newtonsoft.Json.Tests.CustomAssert.Contains(System.Collections.IList, object, string)", span="311-311"];
m7_84 [cluster="Newtonsoft.Json.Tests.CustomAssert.Contains(System.Collections.IList, object, string)", file="TestFixtureBase.cs", label="Assert.Contains(value, collection, message)", span="314-314"];
m7_85 [cluster="Newtonsoft.Json.Tests.CustomAssert.Contains(System.Collections.IList, object, string)", file="TestFixtureBase.cs", label="Exit Newtonsoft.Json.Tests.CustomAssert.Contains(System.Collections.IList, object, string)", span="311-311"];
m7_92 [cluster="Newtonsoft.Json.Tests.StringAssert.Normalize(string)", file="TestFixtureBase.cs", label="Entry Newtonsoft.Json.Tests.StringAssert.Normalize(string)", span="344-344"];
m7_100 [cluster="Newtonsoft.Json.Tests.StringAssert.Normalize(string)", file="TestFixtureBase.cs", label="s != null", span="346-346"];
m7_101 [cluster="Newtonsoft.Json.Tests.StringAssert.Normalize(string)", file="TestFixtureBase.cs", label="s = Regex.Replace(s, ''\r\n'')", span="348-348"];
m7_102 [cluster="Newtonsoft.Json.Tests.StringAssert.Normalize(string)", file="TestFixtureBase.cs", label="return s;", span="351-351"];
m7_103 [cluster="Newtonsoft.Json.Tests.StringAssert.Normalize(string)", file="TestFixtureBase.cs", label="Exit Newtonsoft.Json.Tests.StringAssert.Normalize(string)", span="344-344"];
m7_122 [cluster="string.Join(string, params string[])", file="TestFixtureBase.cs", label="Entry string.Join(string, params string[])", span="0-0"];
m7_49 [cluster="Newtonsoft.Json.Tests.TestFixtureBase.HexToBytes(string)", file="TestFixtureBase.cs", label="Entry Newtonsoft.Json.Tests.TestFixtureBase.HexToBytes(string)", span="235-235"];
m7_50 [cluster="Newtonsoft.Json.Tests.TestFixtureBase.HexToBytes(string)", file="TestFixtureBase.cs", label="string fixedHex = hex.Replace(''-'', string.Empty)", span="237-237"];
m7_51 [cluster="Newtonsoft.Json.Tests.TestFixtureBase.HexToBytes(string)", file="TestFixtureBase.cs", label="byte[] bytes = new byte[fixedHex.Length / 2]", span="240-240"];
m7_54 [cluster="Newtonsoft.Json.Tests.TestFixtureBase.HexToBytes(string)", file="TestFixtureBase.cs", label=fixedHex, span="246-246"];
m7_52 [cluster="Newtonsoft.Json.Tests.TestFixtureBase.HexToBytes(string)", file="TestFixtureBase.cs", label="int shift = 4", span="242-242"];
m7_58 [cluster="Newtonsoft.Json.Tests.TestFixtureBase.HexToBytes(string)", file="TestFixtureBase.cs", label="bytes[offset] |= (byte)(b << shift)", span="257-257"];
m7_62 [cluster="Newtonsoft.Json.Tests.TestFixtureBase.HexToBytes(string)", file="TestFixtureBase.cs", label="return bytes;", span="266-266"];
m7_53 [cluster="Newtonsoft.Json.Tests.TestFixtureBase.HexToBytes(string)", file="TestFixtureBase.cs", label="int offset = 0", span="244-244"];
m7_59 [cluster="Newtonsoft.Json.Tests.TestFixtureBase.HexToBytes(string)", file="TestFixtureBase.cs", label="shift ^= 4", span="259-259"];
m7_61 [cluster="Newtonsoft.Json.Tests.TestFixtureBase.HexToBytes(string)", file="TestFixtureBase.cs", label="offset++", span="263-263"];
m7_55 [cluster="Newtonsoft.Json.Tests.TestFixtureBase.HexToBytes(string)", file="TestFixtureBase.cs", label="int b = (c - '0') % 32", span="250-250"];
m7_56 [cluster="Newtonsoft.Json.Tests.TestFixtureBase.HexToBytes(string)", file="TestFixtureBase.cs", label="b > 9", span="252-252"];
m7_57 [cluster="Newtonsoft.Json.Tests.TestFixtureBase.HexToBytes(string)", file="TestFixtureBase.cs", label="b -= 7", span="254-254"];
m7_60 [cluster="Newtonsoft.Json.Tests.TestFixtureBase.HexToBytes(string)", file="TestFixtureBase.cs", label="shift != 0", span="261-261"];
m7_63 [cluster="Newtonsoft.Json.Tests.TestFixtureBase.HexToBytes(string)", file="TestFixtureBase.cs", label="Exit Newtonsoft.Json.Tests.TestFixtureBase.HexToBytes(string)", span="235-235"];
m7_35 [cluster="System.DateTime.GetUtcOffset()", file="TestFixtureBase.cs", label="Entry System.DateTime.GetUtcOffset()", span="51-51"];
m7_8 [cluster="Newtonsoft.Json.Tests.TestReflectionUtils.GetField(System.Type, string)", file="TestFixtureBase.cs", label="Entry Newtonsoft.Json.Tests.TestReflectionUtils.GetField(System.Type, string)", span="79-79"];
m7_9 [cluster="Newtonsoft.Json.Tests.TestReflectionUtils.GetField(System.Type, string)", file="TestFixtureBase.cs", label="return type.GetField(name);", span="82-82"];
m7_10 [cluster="Newtonsoft.Json.Tests.TestReflectionUtils.GetField(System.Type, string)", file="TestFixtureBase.cs", label="Exit Newtonsoft.Json.Tests.TestReflectionUtils.GetField(System.Type, string)", span="79-79"];
m7_124 [cluster="System.Exception.GetType()", file="TestFixtureBase.cs", label="Entry System.Exception.GetType()", span="0-0"];
m7_125 [cluster="string.Format(string, object, object)", file="TestFixtureBase.cs", label="Entry string.Format(string, object, object)", span="0-0"];
m7_15 [cluster="System.Type.GetMethod(string)", file="TestFixtureBase.cs", label="Entry System.Type.GetMethod(string)", span="0-0"];
m7_104 [cluster="System.Text.RegularExpressions.Regex.Replace(string, string)", file="TestFixtureBase.cs", label="Entry System.Text.RegularExpressions.Regex.Replace(string, string)", span="0-0"];
m7_28 [cluster="System.Text.Encoding.GetString(byte[], int, int)", file="TestFixtureBase.cs", label="Entry System.Text.Encoding.GetString(byte[], int, int)", span="0-0"];
m7_3 [cluster="System.Type.GetConstructors()", file="TestFixtureBase.cs", label="Entry System.Type.GetConstructors()", span="0-0"];
m7_73 [cluster="System.Console.WriteLine(string)", file="TestFixtureBase.cs", label="Entry System.Console.WriteLine(string)", span="0-0"];
m7_94 [cluster="Newtonsoft.Json.Tests.StringAssert.Equals(string, string)", file="TestFixtureBase.cs", label="Entry Newtonsoft.Json.Tests.StringAssert.Equals(string, string)", span="336-336"];
m7_95 [cluster="Newtonsoft.Json.Tests.StringAssert.Equals(string, string)", file="TestFixtureBase.cs", label="s1 = Normalize(s1)", span="338-338"];
m7_96 [cluster="Newtonsoft.Json.Tests.StringAssert.Equals(string, string)", file="TestFixtureBase.cs", label="s2 = Normalize(s2)", span="339-339"];
m7_97 [cluster="Newtonsoft.Json.Tests.StringAssert.Equals(string, string)", file="TestFixtureBase.cs", label="return string.Equals(s1, s2);", span="341-341"];
m7_98 [cluster="Newtonsoft.Json.Tests.StringAssert.Equals(string, string)", file="TestFixtureBase.cs", label="Exit Newtonsoft.Json.Tests.StringAssert.Equals(string, string)", span="336-336"];
m7_119 [cluster="System.Action.Invoke()", file="TestFixtureBase.cs", label="Entry System.Action.Invoke()", span="0-0"];
m7_72 [cluster="Newtonsoft.Json.Tests.TestFixtureBase.EscapeJson(string)", file="TestFixtureBase.cs", label="Entry Newtonsoft.Json.Tests.TestFixtureBase.EscapeJson(string)", span="293-293"];
m7_74 [cluster="Newtonsoft.Json.Tests.TestFixtureBase.EscapeJson(string)", file="TestFixtureBase.cs", label="return @''@'''''' + json.Replace(@'''''''', @'''''''''''') + @'''''''';", span="295-295"];
m7_75 [cluster="Newtonsoft.Json.Tests.TestFixtureBase.EscapeJson(string)", file="TestFixtureBase.cs", label="Exit Newtonsoft.Json.Tests.TestFixtureBase.EscapeJson(string)", span="293-293"];
m7_0 [cluster="Newtonsoft.Json.Tests.TestReflectionUtils.GetConstructors(System.Type)", file="TestFixtureBase.cs", label="Entry Newtonsoft.Json.Tests.TestReflectionUtils.GetConstructors(System.Type)", span="61-61"];
m7_1 [cluster="Newtonsoft.Json.Tests.TestReflectionUtils.GetConstructors(System.Type)", file="TestFixtureBase.cs", label="return type.GetConstructors();", span="64-64"];
m7_2 [cluster="Newtonsoft.Json.Tests.TestReflectionUtils.GetConstructors(System.Type)", file="TestFixtureBase.cs", label="Exit Newtonsoft.Json.Tests.TestReflectionUtils.GetConstructors(System.Type)", span="61-61"];
m7_93 [cluster="Unk.AreEqual", file="TestFixtureBase.cs", label="Entry Unk.AreEqual", span=""];
m7_23 [cluster="System.IO.MemoryStream.MemoryStream()", file="TestFixtureBase.cs", label="Entry System.IO.MemoryStream.MemoryStream()", span="0-0"];
m7_99 [cluster="string.Equals(string, string)", file="TestFixtureBase.cs", label="Entry string.Equals(string, string)", span="0-0"];
m7_26 [cluster="Unk.WriteObject", file="TestFixtureBase.cs", label="Entry Unk.WriteObject", span=""];
m7_41 [cluster="Newtonsoft.Json.Tests.TestFixtureBase.BytesToHex(byte[], bool)", file="TestFixtureBase.cs", label="Entry Newtonsoft.Json.Tests.TestFixtureBase.BytesToHex(byte[], bool)", span="224-224"];
m7_42 [cluster="Newtonsoft.Json.Tests.TestFixtureBase.BytesToHex(byte[], bool)", file="TestFixtureBase.cs", label="string hex = BitConverter.ToString(bytes)", span="226-226"];
m7_43 [cluster="Newtonsoft.Json.Tests.TestFixtureBase.BytesToHex(byte[], bool)", file="TestFixtureBase.cs", label=removeDashes, span="227-227"];
m7_44 [cluster="Newtonsoft.Json.Tests.TestFixtureBase.BytesToHex(byte[], bool)", file="TestFixtureBase.cs", label="hex = hex.Replace(''-'', '''')", span="229-229"];
m7_45 [cluster="Newtonsoft.Json.Tests.TestFixtureBase.BytesToHex(byte[], bool)", file="TestFixtureBase.cs", label="return hex;", span="232-232"];
m7_46 [cluster="Newtonsoft.Json.Tests.TestFixtureBase.BytesToHex(byte[], bool)", file="TestFixtureBase.cs", label="Exit Newtonsoft.Json.Tests.TestFixtureBase.BytesToHex(byte[], bool)", span="224-224"];
m7_37 [cluster="string.String(char[], int, int)", file="TestFixtureBase.cs", label="Entry string.String(char[], int, int)", span="0-0"];
m7_123 [cluster="System.Exception.Exception(string, System.Exception)", file="TestFixtureBase.cs", label="Entry System.Exception.Exception(string, System.Exception)", span="0-0"];
m7_64 [cluster="Newtonsoft.Json.Tests.TestFixtureBase.TestSetup()", file="TestFixtureBase.cs", label="Entry Newtonsoft.Json.Tests.TestFixtureBase.TestSetup()", span="273-273"];
m7_65 [cluster="Newtonsoft.Json.Tests.TestFixtureBase.TestSetup()", file="TestFixtureBase.cs", label="Thread.CurrentThread.CurrentCulture = CultureInfo.InvariantCulture", span="281-281"];
m7_66 [cluster="Newtonsoft.Json.Tests.TestFixtureBase.TestSetup()", file="TestFixtureBase.cs", label="Thread.CurrentThread.CurrentUICulture = CultureInfo.InvariantCulture", span="282-282"];
m7_67 [cluster="Newtonsoft.Json.Tests.TestFixtureBase.TestSetup()", file="TestFixtureBase.cs", label="JsonConvert.DefaultSettings = null", span="285-285"];
m7_68 [cluster="Newtonsoft.Json.Tests.TestFixtureBase.TestSetup()", file="TestFixtureBase.cs", label="Exit Newtonsoft.Json.Tests.TestFixtureBase.TestSetup()", span="273-273"];
m7_48 [cluster="string.Replace(string, string)", file="TestFixtureBase.cs", label="Entry string.Replace(string, string)", span="0-0"];
m7_120 [cluster="Unk.Fail", file="TestFixtureBase.cs", label="Entry Unk.Fail", span=""];
m7_7 [cluster="System.Type.GetProperty(string)", file="TestFixtureBase.cs", label="Entry System.Type.GetProperty(string)", span="0-0"];
m7_24 [cluster="DataContractJsonSerializer.cstr", file="TestFixtureBase.cs", label="Entry DataContractJsonSerializer.cstr", span=""];
m7_29 [cluster="Newtonsoft.Json.Tests.TestFixtureBase.GetOffset(System.DateTime, Newtonsoft.Json.DateFormatHandling)", file="TestFixtureBase.cs", label="Entry Newtonsoft.Json.Tests.TestFixtureBase.GetOffset(System.DateTime, Newtonsoft.Json.DateFormatHandling)", span="211-211"];
m7_30 [cluster="Newtonsoft.Json.Tests.TestFixtureBase.GetOffset(System.DateTime, Newtonsoft.Json.DateFormatHandling)", file="TestFixtureBase.cs", label="char[] chars = new char[8]", span="213-213"];
m7_31 [cluster="Newtonsoft.Json.Tests.TestFixtureBase.GetOffset(System.DateTime, Newtonsoft.Json.DateFormatHandling)", file="TestFixtureBase.cs", label="int pos = DateTimeUtils.WriteDateTimeOffset(chars, 0, DateTime.SpecifyKind(d, DateTimeKind.Local).GetUtcOffset(), dateFormatHandling)", span="214-214"];
m7_32 [cluster="Newtonsoft.Json.Tests.TestFixtureBase.GetOffset(System.DateTime, Newtonsoft.Json.DateFormatHandling)", file="TestFixtureBase.cs", label="return new string(chars, 0, pos);", span="216-216"];
m7_33 [cluster="Newtonsoft.Json.Tests.TestFixtureBase.GetOffset(System.DateTime, Newtonsoft.Json.DateFormatHandling)", file="TestFixtureBase.cs", label="Exit Newtonsoft.Json.Tests.TestFixtureBase.GetOffset(System.DateTime, Newtonsoft.Json.DateFormatHandling)", span="211-211"];
m7_25 [cluster="object.GetType()", file="TestFixtureBase.cs", label="Entry object.GetType()", span="0-0"];
m7_87 [cluster="Newtonsoft.Json.Tests.StringAssert.AreEqual(string, string)", file="TestFixtureBase.cs", label="Entry Newtonsoft.Json.Tests.StringAssert.AreEqual(string, string)", span="328-328"];
m7_88 [cluster="Newtonsoft.Json.Tests.StringAssert.AreEqual(string, string)", file="TestFixtureBase.cs", label="expected = Normalize(expected)", span="330-330"];
m7_89 [cluster="Newtonsoft.Json.Tests.StringAssert.AreEqual(string, string)", file="TestFixtureBase.cs", label="actual = Normalize(actual)", span="331-331"];
m7_90 [cluster="Newtonsoft.Json.Tests.StringAssert.AreEqual(string, string)", file="TestFixtureBase.cs", label="Assert.AreEqual(expected, actual)", span="333-333"];
m7_91 [cluster="Newtonsoft.Json.Tests.StringAssert.AreEqual(string, string)", file="TestFixtureBase.cs", label="Exit Newtonsoft.Json.Tests.StringAssert.AreEqual(string, string)", span="328-328"];
m7_80 [cluster="Newtonsoft.Json.Tests.CustomAssert.Contains(System.Collections.IList, object)", file="TestFixtureBase.cs", label="Entry Newtonsoft.Json.Tests.CustomAssert.Contains(System.Collections.IList, object)", span="306-306"];
m7_81 [cluster="Newtonsoft.Json.Tests.CustomAssert.Contains(System.Collections.IList, object)", file="TestFixtureBase.cs", label="Contains(collection, value, null)", span="308-308"];
m7_82 [cluster="Newtonsoft.Json.Tests.CustomAssert.Contains(System.Collections.IList, object)", file="TestFixtureBase.cs", label="Exit Newtonsoft.Json.Tests.CustomAssert.Contains(System.Collections.IList, object)", span="306-306"];
m7_38 [cluster="Newtonsoft.Json.Tests.TestFixtureBase.BytesToHex(byte[])", file="TestFixtureBase.cs", label="Entry Newtonsoft.Json.Tests.TestFixtureBase.BytesToHex(byte[])", span="219-219"];
m7_39 [cluster="Newtonsoft.Json.Tests.TestFixtureBase.BytesToHex(byte[])", file="TestFixtureBase.cs", label="return BytesToHex(bytes, false);", span="221-221"];
m7_40 [cluster="Newtonsoft.Json.Tests.TestFixtureBase.BytesToHex(byte[])", file="TestFixtureBase.cs", label="Exit Newtonsoft.Json.Tests.TestFixtureBase.BytesToHex(byte[])", span="219-219"];
m7_36 [cluster="Newtonsoft.Json.Utilities.DateTimeUtils.WriteDateTimeOffset(char[], int, System.TimeSpan, Newtonsoft.Json.DateFormatHandling)", file="TestFixtureBase.cs", label="Entry Newtonsoft.Json.Utilities.DateTimeUtils.WriteDateTimeOffset(char[], int, System.TimeSpan, Newtonsoft.Json.DateFormatHandling)", span="746-746"];
m7_105 [cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", file="TestFixtureBase.cs", label="Entry Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", span="357-357"];
m7_106 [cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", file="TestFixtureBase.cs", label="action()", span="362-362"];
m7_110 [cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", file="TestFixtureBase.cs", label="possibleMessages == null || possibleMessages.Length == 0", span="369-369"];
m7_112 [cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", file="TestFixtureBase.cs", label=possibleMessages, span="373-373"];
m7_115 [cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", file="TestFixtureBase.cs", label="throw new Exception(''Unexpected exception message.'' + Environment.NewLine + ''Expected one of: '' + string.Join(Environment.NewLine, possibleMessages) + Environment.NewLine + ''Got: '' + ex.Message + Environment.NewLine + Environment.NewLine + ex);", span="381-381"];
m7_107 [cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", file="TestFixtureBase.cs", label="Assert.Fail(''Exception of type {0} expected. No exception thrown.'', typeof(TException).Name)", span="364-364"];
m7_108 [cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", file="TestFixtureBase.cs", label="return null;", span="365-365"];
m7_109 [cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", file="TestFixtureBase.cs", label=TException, span="367-367"];
m7_111 [cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", file="TestFixtureBase.cs", label="return ex;", span="371-371"];
m7_113 [cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", file="TestFixtureBase.cs", label="StringAssert.Equals(possibleMessage, ex.Message)", span="375-375"];
m7_114 [cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", file="TestFixtureBase.cs", label="return ex;", span="377-377"];
m7_116 [cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", file="TestFixtureBase.cs", label=Exception, span="383-383"];
m7_117 [cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", file="TestFixtureBase.cs", label="throw new Exception(string.Format(''Exception of type {0} expected; got exception of type {1}.'', typeof(TException).Name, ex.GetType().Name), ex);", span="385-385"];
m7_118 [cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", file="TestFixtureBase.cs", label="Exit Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", span="357-357"];
m7_47 [cluster="System.BitConverter.ToString(byte[])", file="TestFixtureBase.cs", label="Entry System.BitConverter.ToString(byte[])", span="0-0"];
m7_126 [cluster="Newtonsoft.Json.Tests.ExceptionAssert.ThrowsAsync<TException>(System.Func<System.Threading.Tasks.Task>, params string[])", file="TestFixtureBase.cs", label="Entry Newtonsoft.Json.Tests.ExceptionAssert.ThrowsAsync<TException>(System.Func<System.Threading.Tasks.Task>, params string[])", span="390-390"];
m7_127 [cluster="Newtonsoft.Json.Tests.ExceptionAssert.ThrowsAsync<TException>(System.Func<System.Threading.Tasks.Task>, params string[])", file="TestFixtureBase.cs", label="await action()", span="395-395"];
m7_131 [cluster="Newtonsoft.Json.Tests.ExceptionAssert.ThrowsAsync<TException>(System.Func<System.Threading.Tasks.Task>, params string[])", file="TestFixtureBase.cs", label="possibleMessages == null || possibleMessages.Length == 0", span="402-402"];
m7_133 [cluster="Newtonsoft.Json.Tests.ExceptionAssert.ThrowsAsync<TException>(System.Func<System.Threading.Tasks.Task>, params string[])", file="TestFixtureBase.cs", label=possibleMessages, span="406-406"];
m7_136 [cluster="Newtonsoft.Json.Tests.ExceptionAssert.ThrowsAsync<TException>(System.Func<System.Threading.Tasks.Task>, params string[])", file="TestFixtureBase.cs", label="throw new Exception(''Unexpected exception message.'' + Environment.NewLine + ''Expected one of: '' + string.Join(Environment.NewLine, possibleMessages) + Environment.NewLine + ''Got: '' + ex.Message + Environment.NewLine + Environment.NewLine + ex);", span="414-414"];
m7_128 [cluster="Newtonsoft.Json.Tests.ExceptionAssert.ThrowsAsync<TException>(System.Func<System.Threading.Tasks.Task>, params string[])", file="TestFixtureBase.cs", label="Assert.Fail(''Exception of type {0} expected. No exception thrown.'', typeof(TException).Name)", span="397-397"];
m7_129 [cluster="Newtonsoft.Json.Tests.ExceptionAssert.ThrowsAsync<TException>(System.Func<System.Threading.Tasks.Task>, params string[])", file="TestFixtureBase.cs", label="return null;", span="398-398"];
m7_130 [cluster="Newtonsoft.Json.Tests.ExceptionAssert.ThrowsAsync<TException>(System.Func<System.Threading.Tasks.Task>, params string[])", file="TestFixtureBase.cs", label=TException, span="400-400"];
m7_132 [cluster="Newtonsoft.Json.Tests.ExceptionAssert.ThrowsAsync<TException>(System.Func<System.Threading.Tasks.Task>, params string[])", file="TestFixtureBase.cs", label="return ex;", span="404-404"];
m7_134 [cluster="Newtonsoft.Json.Tests.ExceptionAssert.ThrowsAsync<TException>(System.Func<System.Threading.Tasks.Task>, params string[])", file="TestFixtureBase.cs", label="StringAssert.Equals(possibleMessage, ex.Message)", span="408-408"];
m7_135 [cluster="Newtonsoft.Json.Tests.ExceptionAssert.ThrowsAsync<TException>(System.Func<System.Threading.Tasks.Task>, params string[])", file="TestFixtureBase.cs", label="return ex;", span="410-410"];
m7_137 [cluster="Newtonsoft.Json.Tests.ExceptionAssert.ThrowsAsync<TException>(System.Func<System.Threading.Tasks.Task>, params string[])", file="TestFixtureBase.cs", label=Exception, span="416-416"];
m7_138 [cluster="Newtonsoft.Json.Tests.ExceptionAssert.ThrowsAsync<TException>(System.Func<System.Threading.Tasks.Task>, params string[])", file="TestFixtureBase.cs", label="throw new Exception(string.Format(''Exception of type {0} expected; got exception of type {1}.'', typeof(TException).Name, ex.GetType().Name), ex);", span="418-418"];
m7_139 [cluster="Newtonsoft.Json.Tests.ExceptionAssert.ThrowsAsync<TException>(System.Func<System.Threading.Tasks.Task>, params string[])", file="TestFixtureBase.cs", label="Exit Newtonsoft.Json.Tests.ExceptionAssert.ThrowsAsync<TException>(System.Func<System.Threading.Tasks.Task>, params string[])", span="390-390"];
m7_79 [cluster="Unk.IsInstanceOf", file="TestFixtureBase.cs", label="Entry Unk.IsInstanceOf", span=""];
m7_140 [cluster="System.Func<TResult>.Invoke()", file="TestFixtureBase.cs", label="Entry System.Func<TResult>.Invoke()", span="0-0"];
m7_141 [file="TestFixtureBase.cs", label="Newtonsoft.Json.Tests.TestFixtureBase", span=""];
m8_658 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ExistingBaseValue()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ExistingBaseValue()", span="1954-1954"];
m8_660 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ExistingBaseValue()", file="TypeNameHandlingTests.cs", label="GroupingInfo g = JsonConvert.DeserializeObject<GroupingInfo>(json, new JsonSerializerSettings\r\n            {\r\n                TypeNameHandling = TypeNameHandling.Objects\r\n            })", span="1970-1973"];
m8_659 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ExistingBaseValue()", file="TypeNameHandlingTests.cs", label="string json = @''{\r\n    ''''itemIdentifier'''': {\r\n        ''''$type'''': ''''Newtonsoft.Json.Tests.Serialization.ReportItemKeys, Newtonsoft.Json.Tests'''',\r\n        ''''dataType'''': 0,\r\n        ''''wantedUnitID'''': 1,\r\n        ''''application'''': 3,\r\n        ''''id'''': 101,\r\n        ''''name'''': ''''Machine''''\r\n    },\r\n    ''''isBusinessEntity'''': false,\r\n    ''''isKeyItem'''': true,\r\n    ''''summarizeOnThisItem'''': false\r\n}''", span="1956-1968"];
m8_661 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ExistingBaseValue()", file="TypeNameHandlingTests.cs", label="ReportItemKeys item = (ReportItemKeys)g.ItemIdentifier", span="1975-1975"];
m8_662 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ExistingBaseValue()", file="TypeNameHandlingTests.cs", label="Assert.AreEqual(1UL, item.WantedUnitID)", span="1976-1976"];
m8_663 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ExistingBaseValue()", file="TypeNameHandlingTests.cs", label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ExistingBaseValue()", span="1954-1954"];
m8_361 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>.AddFirst(T)", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>.AddFirst(T)", span="1158-1158"];
m8_362 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>.AddFirst(T)", file="TypeNameHandlingTests.cs", label="return new CustomEnumerable<T>(newVal, this);", span="1160-1160"];
m8_363 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>.AddFirst(T)", file="TypeNameHandlingTests.cs", label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>.AddFirst(T)", span="1158-1158"];
m8_225 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomSerializationBinder.CustomSerializationBinder()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomSerializationBinder.CustomSerializationBinder()", span="752-752"];
m8_96 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteTypeNameForObjects()", file="TypeNameHandlingTests.cs", label="EmployeeReference employee = new EmployeeReference()", span="323-323"];
m8_604 [cluster="System.Guid.Guid(string)", file="TypeNameHandlingTests.cs", label="Entry System.Guid.Guid(string)", span="0-0"];
m8_664 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.GenericItemTypeCollection()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.GenericItemTypeCollection()", span="1982-1982"];
m8_666 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.GenericItemTypeCollection()", file="TypeNameHandlingTests.cs", label="data.Rows.Add(''key'', new List<MyInterfaceImplementationType> { new MyInterfaceImplementationType() { SomeProperty = ''property'' } })", span="1985-1985"];
m8_665 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.GenericItemTypeCollection()", file="TypeNameHandlingTests.cs", label="DataType data = new DataType()", span="1984-1984"];
m8_667 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.GenericItemTypeCollection()", file="TypeNameHandlingTests.cs", label="string serialized = JsonConvert.SerializeObject(data, Formatting.Indented)", span="1986-1986"];
m8_668 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.GenericItemTypeCollection()", file="TypeNameHandlingTests.cs", label="StringAssert.AreEqual(@''{\r\n  ''''Rows'''': {\r\n    ''''key'''': {\r\n      ''''$type'''': ''''System.Collections.Generic.List`1[[Newtonsoft.Json.Tests.Serialization.MyInterfaceImplementationType, Newtonsoft.Json.Tests]], mscorlib'''',\r\n      ''''$values'''': [\r\n        {\r\n          ''''SomeProperty'''': ''''property''''\r\n        }\r\n      ]\r\n    }\r\n  }\r\n}'', serialized)", span="1988-1999"];
m8_669 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.GenericItemTypeCollection()", file="TypeNameHandlingTests.cs", label="DataType deserialized = JsonConvert.DeserializeObject<DataType>(serialized)", span="2001-2001"];
m8_670 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.GenericItemTypeCollection()", file="TypeNameHandlingTests.cs", label="Assert.AreEqual(''property'', deserialized.Rows[''key''].First().SomeProperty)", span="2003-2003"];
m8_671 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.GenericItemTypeCollection()", file="TypeNameHandlingTests.cs", label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.GenericItemTypeCollection()", span="1982-1982"];
m8_34 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="TypeNameHandlingTests.cs", label="WriteTokenInternal(c)", span="95-95"];
m8_437 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameList<T>.TypeNameList()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameList<T>.TypeNameList()", span="2329-2329"];
m8_202 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteListTypeNameForProperty()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteListTypeNameForProperty()", span="689-689"];
m8_204 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteListTypeNameForProperty()", file="TypeNameHandlingTests.cs", label="TypeNameProperty typeNameProperty = new TypeNameProperty\r\n            {\r\n                Name = ''Name!'',\r\n                Value = new List<int> { 1, 2, 3, 4, 5 }\r\n            }", span="693-697"];
m8_203 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteListTypeNameForProperty()", file="TypeNameHandlingTests.cs", label="string listRef = ReflectionUtils.GetTypeName(typeof(List<int>), TypeNameAssemblyFormatHandling.Simple, null)", span="691-691"];
m8_205 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteListTypeNameForProperty()", file="TypeNameHandlingTests.cs", label="string json = JsonConvert.SerializeObject(typeNameProperty, Formatting.Indented)", span="699-699"];
m8_206 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteListTypeNameForProperty()", file="TypeNameHandlingTests.cs", label="StringAssert.AreEqual(@''{\r\n  ''''Name'''': ''''Name!'''',\r\n  ''''Value'''': {\r\n    ''''$type'''': '''''' + listRef + @'''''',\r\n    ''''$values'''': [\r\n      1,\r\n      2,\r\n      3,\r\n      4,\r\n      5\r\n    ]\r\n  }\r\n}'', json)", span="701-713"];
m8_207 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteListTypeNameForProperty()", file="TypeNameHandlingTests.cs", label="TypeNameProperty deserialized = JsonConvert.DeserializeObject<TypeNameProperty>(json)", span="715-715"];
m8_208 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteListTypeNameForProperty()", file="TypeNameHandlingTests.cs", label="Assert.AreEqual(''Name!'', deserialized.Name)", span="716-716"];
m8_211 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteListTypeNameForProperty()", file="TypeNameHandlingTests.cs", label="Assert.AreEqual(5, nested.Count)", span="720-720"];
m8_212 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteListTypeNameForProperty()", file="TypeNameHandlingTests.cs", label="Assert.AreEqual(1, nested[0])", span="721-721"];
m8_213 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteListTypeNameForProperty()", file="TypeNameHandlingTests.cs", label="Assert.AreEqual(2, nested[1])", span="722-722"];
m8_214 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteListTypeNameForProperty()", file="TypeNameHandlingTests.cs", label="Assert.AreEqual(3, nested[2])", span="723-723"];
m8_215 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteListTypeNameForProperty()", file="TypeNameHandlingTests.cs", label="Assert.AreEqual(4, nested[3])", span="724-724"];
m8_216 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteListTypeNameForProperty()", file="TypeNameHandlingTests.cs", label="Assert.AreEqual(5, nested[4])", span="725-725"];
m8_209 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteListTypeNameForProperty()", file="TypeNameHandlingTests.cs", label="CustomAssert.IsInstanceOfType(typeof(List<int>), deserialized.Value)", span="717-717"];
m8_210 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteListTypeNameForProperty()", file="TypeNameHandlingTests.cs", label="List<int> nested = (List<int>)deserialized.Value", span="719-719"];
m8_217 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteListTypeNameForProperty()", file="TypeNameHandlingTests.cs", label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteListTypeNameForProperty()", span="689-689"];
m8_120 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeGenericObjectListWithTypeName()", file="TypeNameHandlingTests.cs", label="string json = JsonConvert.SerializeObject(values, Formatting.Indented, new JsonSerializerSettings\r\n            {\r\n                TypeNameHandling = TypeNameHandling.Objects,\r\n#pragma warning disable 618\r\n                TypeNameAssemblyFormat = FormatterAssemblyStyle.Full\r\n#pragma warning restore 618\r\n            })", span="402-408"];
m8_121 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeGenericObjectListWithTypeName()", file="TypeNameHandlingTests.cs", label="StringAssert.AreEqual(@''[\r\n  {\r\n    ''''$id'''': ''''1'''',\r\n    ''''$type'''': '''''' + employeeRef + @'''''',\r\n    ''''Name'''': ''''Bob'''',\r\n    ''''Manager'''': {\r\n      ''''$id'''': ''''2'''',\r\n      ''''$type'''': '''''' + employeeRef + @'''''',\r\n      ''''Name'''': ''''Frank'''',\r\n      ''''Manager'''': null\r\n    }\r\n  },\r\n  {\r\n    ''''$type'''': '''''' + personRef + @'''''',\r\n    ''''Name'''': null,\r\n    ''''BirthDate'''': ''''2000-12-30T00:00:00Z'''',\r\n    ''''LastModified'''': ''''2000-12-30T00:00:00Z''''\r\n  },\r\n  ''''String!'''',\r\n  -2147483648\r\n]'', json)", span="410-430"];
m8_122 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeGenericObjectListWithTypeName()", file="TypeNameHandlingTests.cs", label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeGenericObjectListWithTypeName()", span="380-380"];
m8_322 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteObjectTypeNameForPropertyDemo()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteObjectTypeNameForPropertyDemo()", span="1019-1019"];
m8_326 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteObjectTypeNameForPropertyDemo()", file="TypeNameHandlingTests.cs", label="string json = JsonConvert.SerializeObject(message, Formatting.Indented)", span="1029-1029"];
m8_327 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteObjectTypeNameForPropertyDemo()", file="TypeNameHandlingTests.cs", label="Message deserialized = JsonConvert.DeserializeObject<Message>(json)", span="1039-1039"];
m8_323 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteObjectTypeNameForPropertyDemo()", file="TypeNameHandlingTests.cs", label="Message message = new Message()", span="1021-1021"];
m8_325 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteObjectTypeNameForPropertyDemo()", file="TypeNameHandlingTests.cs", label="message.Body = new SearchDetails\r\n            {\r\n                Query = ''Json.NET'',\r\n                Language = ''en-us''\r\n            }", span="1023-1027"];
m8_328 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteObjectTypeNameForPropertyDemo()", file="TypeNameHandlingTests.cs", label="SearchDetails searchDetails = (SearchDetails)deserialized.Body", span="1041-1041"];
m8_324 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteObjectTypeNameForPropertyDemo()", file="TypeNameHandlingTests.cs", label="message.Address = ''http://www.google.com''", span="1022-1022"];
m8_329 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteObjectTypeNameForPropertyDemo()", file="TypeNameHandlingTests.cs", label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteObjectTypeNameForPropertyDemo()", span="1019-1019"];
m8_76 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="TypeNameHandlingTests.cs", label="_writer.Write(data)", span="176-176"];
m8_77 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="TypeNameHandlingTests.cs", label="BsonType.Regex", span="179-179"];
m8_78 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="TypeNameHandlingTests.cs", label="BsonRegex value = (BsonRegex)t", span="181-181"];
m8_79 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="TypeNameHandlingTests.cs", label="WriteString((string)value.Pattern.Value, value.Pattern.ByteCount, null)", span="183-183"];
m8_674 [cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", file="TypeNameHandlingTests.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0"];
m8_745 [cluster="Newtonsoft.Json.Tests.Serialization.Example.Equals(object)", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.Example.Equals(object)", span="2262-2262"];
m8_748 [cluster="Newtonsoft.Json.Tests.Serialization.Example.Equals(object)", file="TypeNameHandlingTests.cs", label="ReferenceEquals(this, obj)", span="2268-2268"];
m8_751 [cluster="Newtonsoft.Json.Tests.Serialization.Example.Equals(object)", file="TypeNameHandlingTests.cs", label="return Name.Equals(((IExample)obj).Name);", span="2274-2274"];
m8_746 [cluster="Newtonsoft.Json.Tests.Serialization.Example.Equals(object)", file="TypeNameHandlingTests.cs", label="obj == null", span="2264-2264"];
m8_749 [cluster="Newtonsoft.Json.Tests.Serialization.Example.Equals(object)", file="TypeNameHandlingTests.cs", label="return true;", span="2270-2270"];
m8_750 [cluster="Newtonsoft.Json.Tests.Serialization.Example.Equals(object)", file="TypeNameHandlingTests.cs", label="obj is IExample", span="2272-2272"];
m8_747 [cluster="Newtonsoft.Json.Tests.Serialization.Example.Equals(object)", file="TypeNameHandlingTests.cs", label="return false;", span="2266-2266"];
m8_752 [cluster="Newtonsoft.Json.Tests.Serialization.Example.Equals(object)", file="TypeNameHandlingTests.cs", label="return false;", span="2278-2278"];
m8_753 [cluster="Newtonsoft.Json.Tests.Serialization.Example.Equals(object)", file="TypeNameHandlingTests.cs", label="Exit Newtonsoft.Json.Tests.Serialization.Example.Equals(object)", span="2262-2262"];
m8_617 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameHandlingWithISerializableValuesAndArray()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameHandlingWithISerializableValuesAndArray()", span="1845-1845"];
m8_619 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameHandlingWithISerializableValuesAndArray()", file="TypeNameHandlingTests.cs", label="JsonSerializerSettings settings = new JsonSerializerSettings\r\n            {\r\n                TypeNameHandling = TypeNameHandling.Auto,\r\n                DateFormatHandling = DateFormatHandling.IsoDateFormat,\r\n                MissingMemberHandling = MissingMemberHandling.Ignore,\r\n                DefaultValueHandling = DefaultValueHandling.Ignore,\r\n                NullValueHandling = NullValueHandling.Ignore,\r\n                Formatting = Formatting.Indented\r\n            }", span="1855-1863"];
m8_621 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameHandlingWithISerializableValuesAndArray()", file="TypeNameHandlingTests.cs", label="StringAssert.AreEqual(@''{\r\n  ''''c'''': {\r\n    ''''$type'''': ''''Newtonsoft.Json.Tests.Serialization.MyChildList, Newtonsoft.Json.Tests'''',\r\n    ''''$values'''': [\r\n      ''''string!''''\r\n    ]\r\n  }\r\n}'', json)", span="1867-1874"];
m8_618 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameHandlingWithISerializableValuesAndArray()", file="TypeNameHandlingTests.cs", label="MyParent p = new MyParent\r\n            {\r\n                Child = new MyChildList\r\n                {\r\n                    ''string!''\r\n                }\r\n            }", span="1847-1853"];
m8_620 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameHandlingWithISerializableValuesAndArray()", file="TypeNameHandlingTests.cs", label="string json = JsonConvert.SerializeObject(p, settings)", span="1865-1865"];
m8_622 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameHandlingWithISerializableValuesAndArray()", file="TypeNameHandlingTests.cs", label="MyParent p2 = JsonConvert.DeserializeObject<MyParent>(json, settings)", span="1876-1876"];
m8_624 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameHandlingWithISerializableValuesAndArray()", file="TypeNameHandlingTests.cs", label="Assert.AreEqual(1, ((MyChildList)p2.Child).Count)", span="1878-1878"];
m8_625 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameHandlingWithISerializableValuesAndArray()", file="TypeNameHandlingTests.cs", label="Assert.AreEqual(''string!'', ((MyChildList)p2.Child)[0])", span="1879-1879"];
m8_623 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameHandlingWithISerializableValuesAndArray()", file="TypeNameHandlingTests.cs", label="CustomAssert.IsInstanceOfType(typeof(MyChildList), p2.Child)", span="1877-1877"];
m8_626 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameHandlingWithISerializableValuesAndArray()", file="TypeNameHandlingTests.cs", label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameHandlingWithISerializableValuesAndArray()", span="1845-1845"];
m8_7 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="TypeNameHandlingTests.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m8_26 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="TypeNameHandlingTests.cs", label="_writer.Write((byte)0)", span="83-83"];
m8_27 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="TypeNameHandlingTests.cs", label="BsonType.Array", span="86-86"];
m8_32 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="TypeNameHandlingTests.cs", label="_writer.Write((sbyte)c.Type)", span="93-93"];
m8_28 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="TypeNameHandlingTests.cs", label="BsonArray value = (BsonArray)t", span="88-88"];
m8_30 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="TypeNameHandlingTests.cs", label="ulong index = 0", span="90-90"];
m8_29 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="TypeNameHandlingTests.cs", label="_writer.Write(value.CalculatedSize)", span="89-89"];
m8_31 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="TypeNameHandlingTests.cs", label=value, span="91-91"];
m8_33 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="TypeNameHandlingTests.cs", label="WriteString(index.ToString(CultureInfo.InvariantCulture), MathUtils.IntLength(index), null)", span="94-94"];
m8_719 [cluster="Newtonsoft.Json.Tests.Serialization.MyParent.System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.MyParent.System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)", span="2160-2160"];
m8_720 [cluster="Newtonsoft.Json.Tests.Serialization.MyParent.System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)", file="TypeNameHandlingTests.cs", label="info.AddValue(''c'', Child)", span="2162-2162"];
m8_721 [cluster="Newtonsoft.Json.Tests.Serialization.MyParent.System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)", file="TypeNameHandlingTests.cs", label="Exit Newtonsoft.Json.Tests.Serialization.MyParent.System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)", span="2160-2160"];
m8_394 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.Car.Car()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.Car.Car()", span="1188-1188"];
m8_331 [cluster="Newtonsoft.Json.Tests.Serialization.SearchDetails.SearchDetails()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.SearchDetails.SearchDetails()", span="2189-2189"];
m8_332 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.GenericDictionaryObject()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.GenericDictionaryObject()", span="1052-1052"];
m8_333 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.GenericDictionaryObject()", file="TypeNameHandlingTests.cs", label="Dictionary<string, object> collection = new Dictionary<string, object>()\r\n            {\r\n                { ''First'', new UrlStatus { Status = 404, Url = @''http://www.bing.com'' } },\r\n                { ''Second'', new UrlStatus { Status = 400, Url = @''http://www.google.com'' } },\r\n                {\r\n                    ''List'', new List<UrlStatus>\r\n                    {\r\n                        new UrlStatus { Status = 300, Url = @''http://www.yahoo.com'' },\r\n                        new UrlStatus { Status = 200, Url = @''http://www.askjeeves.com'' }\r\n                    }\r\n                }\r\n            }", span="1054-1065"];
m8_334 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.GenericDictionaryObject()", file="TypeNameHandlingTests.cs", label="string json = JsonConvert.SerializeObject(collection, Formatting.Indented, new JsonSerializerSettings\r\n            {\r\n                TypeNameHandling = TypeNameHandling.All,\r\n#pragma warning disable 618\r\n                TypeNameAssemblyFormat = FormatterAssemblyStyle.Simple\r\n#pragma warning restore 618\r\n            })", span="1067-1073"];
m8_337 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.GenericDictionaryObject()", file="TypeNameHandlingTests.cs", label="object c = JsonConvert.DeserializeObject(json, new JsonSerializerSettings\r\n            {\r\n                TypeNameHandling = TypeNameHandling.All,\r\n#pragma warning disable 618\r\n                TypeNameAssemblyFormat = FormatterAssemblyStyle.Simple\r\n#pragma warning restore 618\r\n            })", span="1106-1112"];
m8_336 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.GenericDictionaryObject()", file="TypeNameHandlingTests.cs", label="StringAssert.AreEqual(@''{\r\n  ''''$type'''': ''''System.Collections.Generic.Dictionary`2[[System.String, mscorlib],[System.Object, mscorlib]], mscorlib'''',\r\n  ''''First'''': {\r\n    ''''$type'''': '''''' + urlStatusTypeName + @'''''',\r\n    ''''Status'''': 404,\r\n    ''''Url'''': ''''http://www.bing.com''''\r\n  },\r\n  ''''Second'''': {\r\n    ''''$type'''': '''''' + urlStatusTypeName + @'''''',\r\n    ''''Status'''': 400,\r\n    ''''Url'''': ''''http://www.google.com''''\r\n  },\r\n  ''''List'''': {\r\n    ''''$type'''': ''''System.Collections.Generic.List`1[['' + urlStatusTypeName + @'']], mscorlib'''',\r\n    ''''$values'''': [\r\n      {\r\n        ''''$type'''': '''''' + urlStatusTypeName + @'''''',\r\n        ''''Status'''': 300,\r\n        ''''Url'''': ''''http://www.yahoo.com''''\r\n      },\r\n      {\r\n        ''''$type'''': '''''' + urlStatusTypeName + @'''''',\r\n        ''''Status'''': 200,\r\n        ''''Url'''': ''''http://www.askjeeves.com''''\r\n      }\r\n    ]\r\n  }\r\n}'', json)", span="1077-1104"];
m8_335 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.GenericDictionaryObject()", file="TypeNameHandlingTests.cs", label="string urlStatusTypeName = ReflectionUtils.GetTypeName(typeof(UrlStatus), TypeNameAssemblyFormatHandling.Simple, null)", span="1075-1075"];
m8_338 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.GenericDictionaryObject()", file="TypeNameHandlingTests.cs", label="CustomAssert.IsInstanceOfType(typeof(Dictionary<string, object>), c)", span="1114-1114"];
m8_339 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.GenericDictionaryObject()", file="TypeNameHandlingTests.cs", label="Dictionary<string, object> newCollection = (Dictionary<string, object>)c", span="1116-1116"];
m8_340 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.GenericDictionaryObject()", file="TypeNameHandlingTests.cs", label="Assert.AreEqual(3, newCollection.Count)", span="1117-1117"];
m8_341 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.GenericDictionaryObject()", file="TypeNameHandlingTests.cs", label="Assert.AreEqual(@''http://www.bing.com'', ((UrlStatus)newCollection[''First'']).Url)", span="1118-1118"];
m8_343 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.GenericDictionaryObject()", file="TypeNameHandlingTests.cs", label="Assert.AreEqual(2, statues.Count)", span="1121-1121"];
m8_342 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.GenericDictionaryObject()", file="TypeNameHandlingTests.cs", label="List<UrlStatus> statues = (List<UrlStatus>)newCollection[''List'']", span="1120-1120"];
m8_344 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.GenericDictionaryObject()", file="TypeNameHandlingTests.cs", label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.GenericDictionaryObject()", span="1052-1052"];
m8_65 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="TypeNameHandlingTests.cs", label="ticks = DateTimeUtils.ConvertDateTimeToJavaScriptTicks(dateTimeOffset.UtcDateTime, dateTimeOffset.Offset)", span="154-154"];
m8_36 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="TypeNameHandlingTests.cs", label="_writer.Write((byte)0)", span="98-98"];
m8_723 [cluster="Newtonsoft.Json.Tests.Serialization.SerializableWrapper.Equals(object)", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.SerializableWrapper.Equals(object)", span="2212-2212"];
m8_726 [cluster="Newtonsoft.Json.Tests.Serialization.SerializableWrapper.Equals(object)", file="TypeNameHandlingTests.cs", label="return false;", span="2218-2218"];
m8_725 [cluster="Newtonsoft.Json.Tests.Serialization.SerializableWrapper.Equals(object)", file="TypeNameHandlingTests.cs", label="w == null", span="2216-2216"];
m8_727 [cluster="Newtonsoft.Json.Tests.Serialization.SerializableWrapper.Equals(object)", file="TypeNameHandlingTests.cs", label="return Equals(w.Content, Content);", span="2221-2221"];
m8_724 [cluster="Newtonsoft.Json.Tests.Serialization.SerializableWrapper.Equals(object)", file="TypeNameHandlingTests.cs", label="SerializableWrapper w = obj as SerializableWrapper", span="2214-2214"];
m8_728 [cluster="Newtonsoft.Json.Tests.Serialization.SerializableWrapper.Equals(object)", file="TypeNameHandlingTests.cs", label="Exit Newtonsoft.Json.Tests.Serialization.SerializableWrapper.Equals(object)", span="2212-2212"];
m8_317 [cluster="Newtonsoft.Json.Tests.TestObjects.ContentSubClass.ContentSubClass(string)", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.TestObjects.ContentSubClass.ContentSubClass(string)", span="33-33"];
m8_606 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameHandlingWithISerializableValues()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameHandlingWithISerializableValues()", span="1810-1810"];
m8_608 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameHandlingWithISerializableValues()", file="TypeNameHandlingTests.cs", label="JsonSerializerSettings settings = new JsonSerializerSettings\r\n            {\r\n                TypeNameHandling = TypeNameHandling.Auto,\r\n                DateFormatHandling = DateFormatHandling.IsoDateFormat,\r\n                MissingMemberHandling = MissingMemberHandling.Ignore,\r\n                DefaultValueHandling = DefaultValueHandling.Ignore,\r\n                NullValueHandling = NullValueHandling.Ignore,\r\n                Formatting = Formatting.Indented\r\n            }", span="1820-1828"];
m8_610 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameHandlingWithISerializableValues()", file="TypeNameHandlingTests.cs", label="StringAssert.AreEqual(@''{\r\n  ''''c'''': {\r\n    ''''$type'''': ''''Newtonsoft.Json.Tests.Serialization.MyChild, Newtonsoft.Json.Tests'''',\r\n    ''''p'''': ''''string!''''\r\n  }\r\n}'', json)", span="1832-1837"];
m8_607 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameHandlingWithISerializableValues()", file="TypeNameHandlingTests.cs", label="MyParent p = new MyParent\r\n            {\r\n                Child = new MyChild\r\n                {\r\n                    MyProperty = ''string!''\r\n                }\r\n            }", span="1812-1818"];
m8_609 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameHandlingWithISerializableValues()", file="TypeNameHandlingTests.cs", label="string json = JsonConvert.SerializeObject(p, settings)", span="1830-1830"];
m8_611 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameHandlingWithISerializableValues()", file="TypeNameHandlingTests.cs", label="MyParent p2 = JsonConvert.DeserializeObject<MyParent>(json, settings)", span="1839-1839"];
m8_613 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameHandlingWithISerializableValues()", file="TypeNameHandlingTests.cs", label="Assert.AreEqual(''string!'', ((MyChild)p2.Child).MyProperty)", span="1841-1841"];
m8_612 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameHandlingWithISerializableValues()", file="TypeNameHandlingTests.cs", label="CustomAssert.IsInstanceOfType(typeof(MyChild), p2.Child)", span="1840-1840"];
m8_614 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameHandlingWithISerializableValues()", file="TypeNameHandlingTests.cs", label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameHandlingWithISerializableValues()", span="1810-1810"];
m8_697 [cluster="Newtonsoft.Json.Tests.Serialization.Message2.Message2(string)", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.Message2.Message2(string)", span="2100-2100"];
m8_704 [cluster="Newtonsoft.Json.Tests.Serialization.Message2.Message2(string)", file="TypeNameHandlingTests.cs", label="value == null", span="2102-2102"];
m8_705 [cluster="Newtonsoft.Json.Tests.Serialization.Message2.Message2(string)", file="TypeNameHandlingTests.cs", label="throw new ArgumentNullException(nameof(value));", span="2102-2102"];
m8_706 [cluster="Newtonsoft.Json.Tests.Serialization.Message2.Message2(string)", file="TypeNameHandlingTests.cs", label="Value = value", span="2104-2104"];
m8_707 [cluster="Newtonsoft.Json.Tests.Serialization.Message2.Message2(string)", file="TypeNameHandlingTests.cs", label="Exit Newtonsoft.Json.Tests.Serialization.Message2.Message2(string)", span="2100-2100"];
m8_404 [cluster="Newtonsoft.Json.Tests.Serialization.SerializableWrapper.SerializableWrapper()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.SerializableWrapper.SerializableWrapper()", span="2208-2208"];
m8_491 [cluster="object.ToString()", file="TypeNameHandlingTests.cs", label="Entry object.ToString()", span="0-0"];
m8_92 [cluster="System.Convert.ToDouble(object, System.IFormatProvider)", file="TypeNameHandlingTests.cs", label="Entry System.Convert.ToDouble(object, System.IFormatProvider)", span="0-0"];
m8_420 [cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.DefaultContractResolver()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Serialization.DefaultContractResolver.DefaultContractResolver()", span="149-149"];
m8_756 [cluster="Newtonsoft.Json.Tests.Serialization.Example.GetHashCode()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.Example.GetHashCode()", span="2282-2282"];
m8_757 [cluster="Newtonsoft.Json.Tests.Serialization.Example.GetHashCode()", file="TypeNameHandlingTests.cs", label="Name == null", span="2284-2284"];
m8_759 [cluster="Newtonsoft.Json.Tests.Serialization.Example.GetHashCode()", file="TypeNameHandlingTests.cs", label="return Name.GetHashCode();", span="2289-2289"];
m8_758 [cluster="Newtonsoft.Json.Tests.Serialization.Example.GetHashCode()", file="TypeNameHandlingTests.cs", label="return 0;", span="2286-2286"];
m8_760 [cluster="Newtonsoft.Json.Tests.Serialization.Example.GetHashCode()", file="TypeNameHandlingTests.cs", label="Exit Newtonsoft.Json.Tests.Serialization.Example.GetHashCode()", span="2282-2282"];
m8_186 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeObjectWithMultipleGenericLists()", file="TypeNameHandlingTests.cs", label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeObjectWithMultipleGenericLists()", span="612-612"];
m8_48 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="TypeNameHandlingTests.cs", label="WriteString((string)value.Value, value.ByteCount, value.CalculatedSize - 4)", span="122-122"];
m8_53 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="TypeNameHandlingTests.cs", label="BsonType.Undefined", span="132-132"];
m8_50 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="TypeNameHandlingTests.cs", label="BsonValue value = (BsonValue)t", span="127-127"];
m8_51 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="TypeNameHandlingTests.cs", label="_writer.Write((bool)value.Value)", span="128-128"];
m8_52 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="TypeNameHandlingTests.cs", label="BsonType.Null", span="131-131"];
m8_54 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="TypeNameHandlingTests.cs", label="BsonType.Date", span="134-134"];
m8_49 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="TypeNameHandlingTests.cs", label="BsonType.Boolean", span="125-125"];
m8_55 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="TypeNameHandlingTests.cs", label="BsonValue value = (BsonValue)t", span="136-136"];
m8_56 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="TypeNameHandlingTests.cs", label="long ticks = 0", span="138-138"];
m8_57 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="TypeNameHandlingTests.cs", label="value.Value is DateTime", span="140-140"];
m8_58 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="TypeNameHandlingTests.cs", label="DateTime dateTime = (DateTime)value.Value", span="142-142"];
m8_244 [cluster="Newtonsoft.Json.Tests.Serialization.Purchase.Purchase()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.Purchase.Purchase()", span="2200-2200"];
m8_8 [cluster="System.Collections.ObjectModel.ReadOnlyCollection<T>.ReadOnlyCollection(System.Collections.Generic.IList<T>)", file="TypeNameHandlingTests.cs", label="Entry System.Collections.ObjectModel.ReadOnlyCollection<T>.ReadOnlyCollection(System.Collections.Generic.IList<T>)", span="0-0"];
m8_9 [cluster="System.Collections.Generic.HashSet<T>.HashSet()", file="TypeNameHandlingTests.cs", label="Entry System.Collections.Generic.HashSet<T>.HashSet()", span="0-0"];
m8_10 [cluster="System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.ReadOnlyDictionary(System.Collections.Generic.IDictionary<TKey, TValue>)", file="TypeNameHandlingTests.cs", label="Entry System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.ReadOnlyDictionary(System.Collections.Generic.IDictionary<TKey, TValue>)", span="0-0"];
m8_591 [cluster="Newtonsoft.Json.Tests.Serialization.PropertyItemTypeNameHandlingDynamic.PropertyItemTypeNameHandlingDynamic()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.PropertyItemTypeNameHandlingDynamic.PropertyItemTypeNameHandlingDynamic()", span="2301-2301"];
m8_218 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeUsingCustomBinder()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeUsingCustomBinder()", span="729-729"];
m8_220 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeUsingCustomBinder()", file="TypeNameHandlingTests.cs", label="object p = JsonConvert.DeserializeObject(json, null, new JsonSerializerSettings\r\n            {\r\n                TypeNameHandling = TypeNameHandling.Objects,\r\n#pragma warning disable CS0618 // Type or member is obsolete\r\n                Binder = new CustomSerializationBinder()\r\n#pragma warning restore CS0618 // Type or member is obsolete\r\n            })", span="737-743"];
m8_219 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeUsingCustomBinder()", file="TypeNameHandlingTests.cs", label="string json = @''{\r\n  ''''$id'''': ''''1'''',\r\n  ''''$type'''': ''''Newtonsoft.Json.Tests.TestObjects.Employee'''',\r\n  ''''Name'''': ''''Name!''''\r\n}''", span="731-735"];
m8_221 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeUsingCustomBinder()", file="TypeNameHandlingTests.cs", label="CustomAssert.IsInstanceOfType(typeof(Person), p)", span="745-745"];
m8_222 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeUsingCustomBinder()", file="TypeNameHandlingTests.cs", label="Person person = (Person)p", span="747-747"];
m8_223 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeUsingCustomBinder()", file="TypeNameHandlingTests.cs", label="Assert.AreEqual(''Name!'', person.Name)", span="749-749"];
m8_224 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeUsingCustomBinder()", file="TypeNameHandlingTests.cs", label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeUsingCustomBinder()", span="729-729"];
m8_490 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameObject.TypeNameObject()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameObject.TypeNameObject()", span="2339-2339"];
m8_63 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="TypeNameHandlingTests.cs", label="ticks = DateTimeUtils.ConvertDateTimeToJavaScriptTicks(dateTime, false)", span="148-148"];
m8_87 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeWrapper()", file="TypeNameHandlingTests.cs", label="Wrapper w2 = JsonConvert.DeserializeObject<Wrapper>(json)", span="313-313"];
m8_123 [cluster="Newtonsoft.Json.Tests.TestObjects.Organization.Person.Person()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.TestObjects.Organization.Person.Person()", span="34-34"];
m8_124 [cluster="System.DateTime.DateTime(int, int, int, int, int, int, System.DateTimeKind)", file="TypeNameHandlingTests.cs", label="Entry System.DateTime.DateTime(int, int, int, int, int, int, System.DateTimeKind)", span="0-0"];
m8_125 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeGenericObjectListWithTypeName()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeGenericObjectListWithTypeName()", span="434-434"];
m8_126 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeGenericObjectListWithTypeName()", file="TypeNameHandlingTests.cs", label="string employeeRef = typeof(EmployeeReference).AssemblyQualifiedName", span="436-436"];
m8_16 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DictionaryAuto()", file="TypeNameHandlingTests.cs", label="string json = JsonConvert.SerializeObject(dic, Formatting.Indented, new JsonSerializerSettings\r\n            {\r\n                TypeNameHandling = TypeNameHandling.Auto\r\n            })", span="134-137"];
m8_127 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeGenericObjectListWithTypeName()", file="TypeNameHandlingTests.cs", label="string personRef = typeof(Person).AssemblyQualifiedName", span="437-437"];
m8_129 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeGenericObjectListWithTypeName()", file="TypeNameHandlingTests.cs", label="List<object> values = (List<object>)JsonConvert.DeserializeObject(json, typeof(List<object>), new JsonSerializerSettings\r\n            {\r\n                TypeNameHandling = TypeNameHandling.Objects,\r\n#pragma warning disable 618\r\n                TypeNameAssemblyFormat = FormatterAssemblyStyle.Full\r\n#pragma warning restore 618\r\n            })", span="461-467"];
m8_140 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeGenericObjectListWithTypeName()", file="TypeNameHandlingTests.cs", label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeGenericObjectListWithTypeName()", span="434-434"];
m8_158 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeTypeNameOnly()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeTypeNameOnly()", span="535-535"];
m8_171 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeGenericTypeName()", file="TypeNameHandlingTests.cs", label="string json = @''{\r\n''''$type'''': '''''' + typeName + @'''''',\r\n''''RequestData'''': {\r\n''''$type'''': ''''System.Collections.Generic.Dictionary`2[[System.String, mscorlib,Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.String, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'''',\r\n''''Id'''': ''''siedemnaście'''',\r\n''''X'''': ''''323''''\r\n},\r\n''''Method'''': ''''GET'''',\r\n''''Url'''': ''''http://www.onet.pl'''',\r\n''''RequestEncoding'''': ''''UTF-8'''',\r\n''''CorrelationId'''': ''''xyz''''\r\n}''", span="582-593"];
m8_178 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeGenericTypeName()", file="TypeNameHandlingTests.cs", label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeGenericTypeName()", span="578-578"];
m8_184 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeObjectWithMultipleGenericLists()", file="TypeNameHandlingTests.cs", label="string json = JsonConvert.SerializeObject(container, Formatting.Indented,\r\n                new JsonSerializerSettings\r\n                {\r\n                    NullValueHandling = NullValueHandling.Ignore,\r\n                    TypeNameHandling = TypeNameHandling.All,\r\n#pragma warning disable 618\r\n                    TypeNameAssemblyFormat = FormatterAssemblyStyle.Full\r\n#pragma warning restore 618\r\n                })", span="623-631"];
m8_128 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeGenericObjectListWithTypeName()", file="TypeNameHandlingTests.cs", label="string json = @''[\r\n  {\r\n    ''''$id'''': ''''1'''',\r\n    ''''$type'''': '''''' + employeeRef + @'''''',\r\n    ''''Name'''': ''''Bob'''',\r\n    ''''Manager'''': {\r\n      ''''$id'''': ''''2'''',\r\n      ''''$type'''': '''''' + employeeRef + @'''''',\r\n      ''''Name'''': ''''Frank'''',\r\n      ''''Manager'''': null\r\n    }\r\n  },\r\n  {\r\n    ''''$type'''': '''''' + personRef + @'''''',\r\n    ''''Name'''': null,\r\n    ''''BirthDate'''': ''''\/Date(978134400000)\/'''',\r\n    ''''LastModified'''': ''''\/Date(978134400000)\/''''\r\n  },\r\n  ''''String!'''',\r\n  -2147483648\r\n]''", span="439-459"];
m8_139 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeGenericObjectListWithTypeName()", file="TypeNameHandlingTests.cs", label="Assert.AreEqual((long)int.MinValue, values[3])", span="482-482"];
m8_151 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeTypeNameWithNoTypeNameHandling()", file="TypeNameHandlingTests.cs", label="string employeeRef = typeof(EmployeeReference).AssemblyQualifiedName", span="517-517"];
m8_153 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeTypeNameWithNoTypeNameHandling()", file="TypeNameHandlingTests.cs", label="JObject o = (JObject)JsonConvert.DeserializeObject(json)", span="526-526"];
m8_155 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeTypeNameWithNoTypeNameHandling()", file="TypeNameHandlingTests.cs", label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeTypeNameWithNoTypeNameHandling()", span="515-515"];
m8_157 [cluster="Newtonsoft.Json.Linq.JToken.ToString()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Linq.JToken.ToString()", span="422-422"];
m8_163 [cluster="lambda expression", file="TypeNameHandlingTests.cs", label="JsonConvert.DeserializeObject(json, null, new JsonSerializerSettings\r\n                {\r\n                    TypeNameHandling = TypeNameHandling.Objects\r\n                })", span="546-549"];
m8_165 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="TypeNameHandlingTests.cs", label="BsonType.Null", span="293-293"];
m8_168 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="TypeNameHandlingTests.cs", label="BsonType.Date", span="296-296"];
m8_170 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeGenericTypeName()", file="TypeNameHandlingTests.cs", label="string typeName = typeof(SendHttpRequest).AssemblyQualifiedName", span="580-580"];
m8_175 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeGenericTypeName()", file="TypeNameHandlingTests.cs", label="Assert.AreEqual(''xyz'', request.CorrelationId)", span="606-606"];
m8_177 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeGenericTypeName()", file="TypeNameHandlingTests.cs", label="Assert.AreEqual(''siedemnaście'', request.RequestData[''Id''])", span="608-608"];
m8_130 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeGenericObjectListWithTypeName()", file="TypeNameHandlingTests.cs", label="Assert.AreEqual(4, values.Count)", span="469-469"];
m8_131 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeGenericObjectListWithTypeName()", file="TypeNameHandlingTests.cs", label="EmployeeReference e = (EmployeeReference)values[0]", span="471-471"];
m8_137 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeGenericObjectListWithTypeName()", file="TypeNameHandlingTests.cs", label="Assert.AreEqual(new DateTime(2000, 12, 30, 0, 0, 0, DateTimeKind.Utc), p.LastModified)", span="479-479"];
m8_135 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeGenericObjectListWithTypeName()", file="TypeNameHandlingTests.cs", label="Assert.AreEqual(null, p.Name)", span="477-477"];
m8_136 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeGenericObjectListWithTypeName()", file="TypeNameHandlingTests.cs", label="Assert.AreEqual(new DateTime(2000, 12, 30, 0, 0, 0, DateTimeKind.Utc), p.BirthDate)", span="478-478"];
m8_132 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeGenericObjectListWithTypeName()", file="TypeNameHandlingTests.cs", label="Person p = (Person)values[1]", span="472-472"];
m8_133 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeGenericObjectListWithTypeName()", file="TypeNameHandlingTests.cs", label="Assert.AreEqual(''Bob'', e.Name)", span="474-474"];
m8_134 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeGenericObjectListWithTypeName()", file="TypeNameHandlingTests.cs", label="Assert.AreEqual(''Frank'', e.Manager.Name)", span="475-475"];
m8_138 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeGenericObjectListWithTypeName()", file="TypeNameHandlingTests.cs", label="Assert.AreEqual(''String!'', values[2])", span="481-481"];
m8_141 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeWithBadTypeName()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeWithBadTypeName()", span="486-486"];
m8_143 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeWithBadTypeName()", file="TypeNameHandlingTests.cs", label="string personRef = typeof(Person).AssemblyQualifiedName", span="489-489"];
m8_149 [cluster="string.StartsWith(string)", file="TypeNameHandlingTests.cs", label="Entry string.StartsWith(string)", span="0-0"];
m8_150 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeTypeNameWithNoTypeNameHandling()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeTypeNameWithNoTypeNameHandling()", span="515-515"];
m8_142 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeWithBadTypeName()", file="TypeNameHandlingTests.cs", label="string employeeRef = typeof(EmployeeReference).AssemblyQualifiedName", span="488-488"];
m8_144 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeWithBadTypeName()", file="TypeNameHandlingTests.cs", label="string json = @''{\r\n  ''''$id'''': ''''1'''',\r\n  ''''$type'''': '''''' + employeeRef + @'''''',\r\n  ''''Name'''': ''''Name!'''',\r\n  ''''Manager'''': null\r\n}''", span="491-496"];
m8_148 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeWithBadTypeName()", file="TypeNameHandlingTests.cs", label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeWithBadTypeName()", span="486-486"];
m8_145 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeWithBadTypeName()", file="TypeNameHandlingTests.cs", label="JsonConvert.DeserializeObject(json, typeof(Person), new JsonSerializerSettings\r\n                {\r\n                    TypeNameHandling = TypeNameHandling.Objects,\r\n#pragma warning disable 618\r\n                    TypeNameAssemblyFormat = FormatterAssemblyStyle.Full\r\n#pragma warning restore 618\r\n                })", span="500-506"];
m8_147 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeWithBadTypeName()", file="TypeNameHandlingTests.cs", label="Assert.IsTrue(ex.Message.StartsWith(@''Type specified in JSON ''' + employeeRef + @''' is not compatible with ''' + personRef + @'''.''))", span="510-510"];
m8_146 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeWithBadTypeName()", file="TypeNameHandlingTests.cs", label=JsonSerializationException, span="508-508"];
m8_152 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeTypeNameWithNoTypeNameHandling()", file="TypeNameHandlingTests.cs", label="string json = @''{\r\n  ''''$id'''': ''''1'''',\r\n  ''''$type'''': '''''' + employeeRef + @'''''',\r\n  ''''Name'''': ''''Name!'''',\r\n  ''''Manager'''': null\r\n}''", span="519-524"];
m8_154 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeTypeNameWithNoTypeNameHandling()", file="TypeNameHandlingTests.cs", label="StringAssert.AreEqual(@''{\r\n  ''''Name'''': ''''Name!'''',\r\n  ''''Manager'''': null\r\n}'', o.ToString())", span="528-531"];
m8_156 [cluster="Newtonsoft.Json.JsonConvert.DeserializeObject(string)", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.JsonConvert.DeserializeObject(string)", span="667-667"];
m8_159 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeTypeNameOnly()", file="TypeNameHandlingTests.cs", label="string json = @''{\r\n  ''''$id'''': ''''1'''',\r\n  ''''$type'''': ''''Newtonsoft.Json.Tests.TestObjects.Employee'''',\r\n  ''''Name'''': ''''Name!'''',\r\n  ''''Manager'''': null\r\n}''", span="537-542"];
m8_160 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeTypeNameOnly()", file="TypeNameHandlingTests.cs", label="ExceptionAssert.Throws<JsonSerializationException>(() =>\r\n            {\r\n                JsonConvert.DeserializeObject(json, null, new JsonSerializerSettings\r\n                {\r\n                    TypeNameHandling = TypeNameHandling.Objects\r\n                });\r\n            }, ''Type specified in JSON 'Newtonsoft.Json.Tests.TestObjects.Employee' was not resolved. Path '$type', line 3, position 55.'')", span="544-550"];
m8_161 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeTypeNameOnly()", file="TypeNameHandlingTests.cs", label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeTypeNameOnly()", span="535-535"];
m8_162 [cluster="lambda expression", file="TypeNameHandlingTests.cs", label="Entry lambda expression", span="544-550"];
m8_164 [cluster="lambda expression", file="TypeNameHandlingTests.cs", label="Exit lambda expression", span="544-550"];
m8_166 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="TypeNameHandlingTests.cs", label="BsonType.Undefined", span="294-294"];
m8_167 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="TypeNameHandlingTests.cs", label="return 0;", span="295-295"];
m8_169 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeGenericTypeName()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeGenericTypeName()", span="578-578"];
m8_172 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeGenericTypeName()", file="TypeNameHandlingTests.cs", label="ICorrelatedMessage message = JsonConvert.DeserializeObject<ICorrelatedMessage>(json, new JsonSerializerSettings\r\n            {\r\n                TypeNameHandling = TypeNameHandling.Objects,\r\n#pragma warning disable 618\r\n                TypeNameAssemblyFormat = FormatterAssemblyStyle.Full\r\n#pragma warning restore 618\r\n            })", span="595-601"];
m8_173 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeGenericTypeName()", file="TypeNameHandlingTests.cs", label="CustomAssert.IsInstanceOfType(typeof(SendHttpRequest), message)", span="603-603"];
m8_174 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeGenericTypeName()", file="TypeNameHandlingTests.cs", label="SendHttpRequest request = (SendHttpRequest)message", span="605-605"];
m8_176 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeGenericTypeName()", file="TypeNameHandlingTests.cs", label="Assert.AreEqual(2, request.RequestData.Count)", span="607-607"];
m8_179 [cluster="Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string, Newtonsoft.Json.JsonSerializerSettings)", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string, Newtonsoft.Json.JsonSerializerSettings)", span="766-766"];
m8_180 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeObjectWithMultipleGenericLists()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeObjectWithMultipleGenericLists()", span="612-612"];
m8_181 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeObjectWithMultipleGenericLists()", file="TypeNameHandlingTests.cs", label="string containerTypeName = typeof(Container).AssemblyQualifiedName", span="614-614"];
m8_182 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeObjectWithMultipleGenericLists()", file="TypeNameHandlingTests.cs", label="string productListTypeName = typeof(List<Product>).AssemblyQualifiedName", span="615-615"];
m8_183 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeObjectWithMultipleGenericLists()", file="TypeNameHandlingTests.cs", label="Container container = new Container\r\n            {\r\n                In = new List<Product>(),\r\n                Out = new List<Product>()\r\n            }", span="617-621"];
m8_185 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeObjectWithMultipleGenericLists()", file="TypeNameHandlingTests.cs", label="StringAssert.AreEqual(@''{\r\n  ''''$type'''': '''''' + containerTypeName + @'''''',\r\n  ''''In'''': {\r\n    ''''$type'''': '''''' + productListTypeName + @'''''',\r\n    ''''$values'''': []\r\n  },\r\n  ''''Out'''': {\r\n    ''''$type'''': '''''' + productListTypeName + @'''''',\r\n    ''''$values'''': []\r\n  }\r\n}'', json)", span="633-643"];
m8_673 [cluster="Newtonsoft.Json.Tests.Serialization.MyInterfaceImplementationType.MyInterfaceImplementationType()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.MyInterfaceImplementationType.MyInterfaceImplementationType()", span="2134-2134"];
m8_761 [cluster="string.GetHashCode()", file="TypeNameHandlingTests.cs", label="Entry string.GetHashCode()", span="0-0"];
m8_456 [cluster="Newtonsoft.Json.Tests.TestObjects.Organization.Employee.Employee()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.TestObjects.Organization.Employee.Employee()", span="29-29"];
m8_675 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeComplexGenericDictionary_Simple()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeComplexGenericDictionary_Simple()", span="2009-2009"];
m8_677 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeComplexGenericDictionary_Simple()", file="TypeNameHandlingTests.cs", label="Dictionary<int, HashSet<string>> dictionary = new Dictionary<int, HashSet<string>>\r\n            {\r\n                { 1, new HashSet<string>(new[] { ''test'' }) },\r\n            }", span="2019-2022"];
m8_676 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeComplexGenericDictionary_Simple()", file="TypeNameHandlingTests.cs", label="JsonSerializerSettings serializerSettings = new JsonSerializerSettings\r\n            {\r\n                TypeNameHandling = TypeNameHandling.All,\r\n#pragma warning disable 618\r\n                TypeNameAssemblyFormat = FormatterAssemblyStyle.Simple\r\n#pragma warning restore 618\r\n            }", span="2011-2017"];
m8_678 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeComplexGenericDictionary_Simple()", file="TypeNameHandlingTests.cs", label="string obtainedJson = JsonConvert.SerializeObject(dictionary, serializerSettings)", span="2024-2024"];
m8_679 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeComplexGenericDictionary_Simple()", file="TypeNameHandlingTests.cs", label="Dictionary<int, HashSet<string>> obtainedDictionary = (Dictionary<int, HashSet<string>>)JsonConvert.DeserializeObject(obtainedJson, serializerSettings)", span="2026-2026"];
m8_680 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeComplexGenericDictionary_Simple()", file="TypeNameHandlingTests.cs", label="Assert.IsNotNull(obtainedDictionary)", span="2028-2028"];
m8_681 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeComplexGenericDictionary_Simple()", file="TypeNameHandlingTests.cs", label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeComplexGenericDictionary_Simple()", span="2009-2009"];
m8_243 [cluster="Newtonsoft.Json.Tests.Serialization.Customer.Customer()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.Customer.Customer()", span="2195-2195"];
m8_229 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeUsingCustomBinder()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeUsingCustomBinder()", span="762-762"];
m8_231 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeUsingCustomBinder()", file="TypeNameHandlingTests.cs", label="IList<object> values = new List<object>\r\n            {\r\n                new Customer\r\n                {\r\n                    Name = ''Caroline Customer''\r\n                },\r\n                new Purchase\r\n                {\r\n                    ProductName = ''Elbow Grease'',\r\n                    Price = 5.99m,\r\n                    Quantity = 1\r\n                }\r\n            }", span="766-778"];
m8_232 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeUsingCustomBinder()", file="TypeNameHandlingTests.cs", label="string json = JsonConvert.SerializeObject(values, Formatting.Indented, new JsonSerializerSettings\r\n            {\r\n                TypeNameHandling = TypeNameHandling.Auto,\r\n#pragma warning disable CS0618 // Type or member is obsolete\r\n                Binder = binder\r\n#pragma warning restore CS0618 // Type or member is obsolete\r\n            })", span="780-786"];
m8_234 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeUsingCustomBinder()", file="TypeNameHandlingTests.cs", label="IList<object> newValues = JsonConvert.DeserializeObject<IList<object>>(json, new JsonSerializerSettings\r\n            {\r\n                TypeNameHandling = TypeNameHandling.Auto,\r\n#pragma warning disable CS0618 // Type or member is obsolete\r\n                Binder = new TypeNameSerializationBinder(''Newtonsoft.Json.Tests.Serialization.{0}, Newtonsoft.Json.Tests'')\r\n#pragma warning restore CS0618 // Type or member is obsolete\r\n            })", span="814-820"];
m8_230 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeUsingCustomBinder()", file="TypeNameHandlingTests.cs", label="TypeNameSerializationBinder binder = new TypeNameSerializationBinder(''Newtonsoft.Json.Tests.Serialization.{0}, Newtonsoft.Json.Tests'')", span="764-764"];
m8_233 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeUsingCustomBinder()", file="TypeNameHandlingTests.cs", label="StringAssert.AreEqual(@''[\r\n  {\r\n    ''''$type'''': ''''Customer'''',\r\n    ''''Name'''': ''''Caroline Customer''''\r\n  },\r\n  {\r\n    ''''$type'''': ''''Purchase'''',\r\n    ''''ProductName'''': ''''Elbow Grease'''',\r\n    ''''Price'''': 5.99,\r\n    ''''Quantity'''': 1\r\n  }\r\n]'', json)", span="801-812"];
m8_235 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeUsingCustomBinder()", file="TypeNameHandlingTests.cs", label="CustomAssert.IsInstanceOfType(typeof(Customer), newValues[0])", span="822-822"];
m8_236 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeUsingCustomBinder()", file="TypeNameHandlingTests.cs", label="Customer customer = (Customer)newValues[0]", span="823-823"];
m8_238 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeUsingCustomBinder()", file="TypeNameHandlingTests.cs", label="CustomAssert.IsInstanceOfType(typeof(Purchase), newValues[1])", span="826-826"];
m8_239 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeUsingCustomBinder()", file="TypeNameHandlingTests.cs", label="Purchase purchase = (Purchase)newValues[1]", span="827-827"];
m8_237 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeUsingCustomBinder()", file="TypeNameHandlingTests.cs", label="Assert.AreEqual(''Caroline Customer'', customer.Name)", span="824-824"];
m8_240 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeUsingCustomBinder()", file="TypeNameHandlingTests.cs", label="Assert.AreEqual(''Elbow Grease'', purchase.ProductName)", span="828-828"];
m8_241 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeUsingCustomBinder()", file="TypeNameHandlingTests.cs", label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeUsingCustomBinder()", span="762-762"];
m8_62 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="TypeNameHandlingTests.cs", label="dateTime = dateTime.ToLocalTime()", span="146-146"];
m8_255 [cluster="string.Format(string, object)", file="TypeNameHandlingTests.cs", label="Entry string.Format(string, object)", span="0-0"];
m8_90 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeWrapper()", file="TypeNameHandlingTests.cs", label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeWrapper()", span="279-279"];
m8_11 [cluster="System.IO.BinaryWriter.Close()", file="TypeNameHandlingTests.cs", label="Entry System.IO.BinaryWriter.Close()", span="0-0"];
m8_471 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameDictionary<T>.TypeNameDictionary()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameDictionary<T>.TypeNameDictionary()", span="2334-2334"];
m8_4 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.KnownAutoTypesTest()", file="TypeNameHandlingTests.cs", label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.KnownAutoTypesTest()", span="76-76"];
m8_5 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.KnownAutoTypes.KnownAutoTypes()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.KnownAutoTypes.KnownAutoTypes()", span="64-64"];
m8_6 [cluster="System.Collections.Generic.List<T>.List()", file="TypeNameHandlingTests.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m8_564 [cluster="Newtonsoft.Json.Linq.JObject.JObject()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Linq.JObject.JObject()", span="87-87"];
m8_85 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeWrapper()", file="TypeNameHandlingTests.cs", label="string json = JsonConvert.SerializeObject(wrapper, Formatting.Indented, new JsonSerializerSettings\r\n            {\r\n                TypeNameHandling = TypeNameHandling.Auto\r\n            })", span="291-294"];
m8_102 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeTypeName()", file="TypeNameHandlingTests.cs", label="string employeeRef = ReflectionUtils.GetTypeName(typeof(EmployeeReference), TypeNameAssemblyFormatHandling.Simple, null)", span="341-341"];
m8_103 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeTypeName()", file="TypeNameHandlingTests.cs", label="string json = @''{\r\n  ''''$id'''': ''''1'''',\r\n  ''''$type'''': '''''' + employeeRef + @'''''',\r\n  ''''Name'''': ''''Name!'''',\r\n  ''''Manager'''': null\r\n}''", span="343-348"];
m8_104 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeTypeName()", file="TypeNameHandlingTests.cs", label="object employee = JsonConvert.DeserializeObject(json, null, new JsonSerializerSettings\r\n            {\r\n                TypeNameHandling = TypeNameHandling.Objects\r\n            })", span="350-353"];
m8_105 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeTypeName()", file="TypeNameHandlingTests.cs", label="CustomAssert.IsInstanceOfType(typeof(EmployeeReference), employee)", span="355-355"];
m8_106 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeTypeName()", file="TypeNameHandlingTests.cs", label="Assert.AreEqual(''Name!'', ((EmployeeReference)employee).Name)", span="356-356"];
m8_95 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteTypeNameForObjects()", file="TypeNameHandlingTests.cs", label="string employeeRef = ReflectionUtils.GetTypeName(typeof(EmployeeReference), TypeNameAssemblyFormatHandling.Simple, null)", span="321-321"];
m8_696 [cluster="Newtonsoft.Json.Tests.Serialization.ObjectWithOptionalMessage.ObjectWithOptionalMessage(Newtonsoft.Json.Tests.Serialization.Message2?)", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.ObjectWithOptionalMessage.ObjectWithOptionalMessage(Newtonsoft.Json.Tests.Serialization.Message2?)", span="2112-2112"];
m8_710 [cluster="Newtonsoft.Json.Tests.Serialization.ObjectWithOptionalMessage.ObjectWithOptionalMessage(Newtonsoft.Json.Tests.Serialization.Message2?)", file="TypeNameHandlingTests.cs", label="Message = message", span="2114-2114"];
m8_711 [cluster="Newtonsoft.Json.Tests.Serialization.ObjectWithOptionalMessage.ObjectWithOptionalMessage(Newtonsoft.Json.Tests.Serialization.Message2?)", file="TypeNameHandlingTests.cs", label="Exit Newtonsoft.Json.Tests.Serialization.ObjectWithOptionalMessage.ObjectWithOptionalMessage(Newtonsoft.Json.Tests.Serialization.Message2?)", span="2112-2112"];
m8_741 [cluster="System.Runtime.Serialization.SerializationInfo.GetString(string)", file="TypeNameHandlingTests.cs", label="Entry System.Runtime.Serialization.SerializationInfo.GetString(string)", span="0-0"];
m8_708 [cluster="System.ArgumentNullException.ArgumentNullException(string)", file="TypeNameHandlingTests.cs", label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0"];
m8_281 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CollectionWithAbstractItems()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CollectionWithAbstractItems()", span="945-945"];
m8_285 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CollectionWithAbstractItems()", file="TypeNameHandlingTests.cs", label="testObject.AnotherTestMember.Add(1, new List<ContentBaseClass>())", span="950-950"];
m8_284 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CollectionWithAbstractItems()", file="TypeNameHandlingTests.cs", label="testObject.AnotherTestMember = new Dictionary<int, IList<ContentBaseClass>>()", span="949-949"];
m8_282 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CollectionWithAbstractItems()", file="TypeNameHandlingTests.cs", label="HolderClass testObject = new HolderClass()", span="947-947"];
m8_286 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CollectionWithAbstractItems()", file="TypeNameHandlingTests.cs", label="testObject.AnotherTestMember[1].Add(new ContentSubClass(''Second One''))", span="951-951"];
m8_283 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CollectionWithAbstractItems()", file="TypeNameHandlingTests.cs", label="testObject.TestMember = new ContentSubClass(''First One'')", span="948-948"];
m8_300 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CollectionWithAbstractItems()", file="TypeNameHandlingTests.cs", label="StringAssert.AreEqual(expected, json)", span="991-991"];
m8_287 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CollectionWithAbstractItems()", file="TypeNameHandlingTests.cs", label="testObject.AThirdTestMember = new ContentSubClass(''Third One'')", span="952-952"];
m8_294 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CollectionWithAbstractItems()", file="TypeNameHandlingTests.cs", label="serializingTester.Serialize(jsonWriter, testObject)", span="962-962"];
m8_290 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CollectionWithAbstractItems()", file="TypeNameHandlingTests.cs", label="StringWriter sw = new StringWriter()", span="957-957"];
m8_291 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CollectionWithAbstractItems()", file="TypeNameHandlingTests.cs", label="JsonTextWriter jsonWriter = new JsonTextWriter(sw)", span="958-958"];
m8_310 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CollectionWithAbstractItems()", file="TypeNameHandlingTests.cs", label="Assert.AreEqual(1, anotherTestObject.AnotherTestMember.Count)", span="1009-1009"];
m8_313 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CollectionWithAbstractItems()", file="TypeNameHandlingTests.cs", label="Assert.AreEqual(1, list.Count)", span="1014-1014"];
m8_295 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CollectionWithAbstractItems()", file="TypeNameHandlingTests.cs", label="string json = sw.ToString()", span="965-965"];
m8_299 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CollectionWithAbstractItems()", file="TypeNameHandlingTests.cs", label="string expected = @''{\r\n  ''''TestMember'''': {\r\n    ''''$type'''': '''''' + contentSubClassRef + @'''''',\r\n    ''''SomeString'''': ''''First One''''\r\n  },\r\n  ''''AnotherTestMember'''': {\r\n    ''''$type'''': '''''' + dictionaryRef + @'''''',\r\n    ''''1'''': [\r\n      {\r\n        ''''$type'''': '''''' + contentSubClassRef + @'''''',\r\n        ''''SomeString'''': ''''Second One''''\r\n      }\r\n    ]\r\n  },\r\n  ''''AThirdTestMember'''': {\r\n    ''''$type'''': '''''' + contentSubClassRef + @'''''',\r\n    ''''SomeString'''': ''''Third One''''\r\n  }\r\n}''", span="971-989"];
m8_301 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CollectionWithAbstractItems()", file="TypeNameHandlingTests.cs", label="StringReader sr = new StringReader(json)", span="993-993"];
m8_296 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CollectionWithAbstractItems()", file="TypeNameHandlingTests.cs", label="string contentSubClassRef = ReflectionUtils.GetTypeName(typeof(ContentSubClass), TypeNameAssemblyFormatHandling.Simple, null)", span="967-967"];
m8_297 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CollectionWithAbstractItems()", file="TypeNameHandlingTests.cs", label="string dictionaryRef = ReflectionUtils.GetTypeName(typeof(Dictionary<int, IList<ContentBaseClass>>), TypeNameAssemblyFormatHandling.Simple, null)", span="968-968"];
m8_298 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CollectionWithAbstractItems()", file="TypeNameHandlingTests.cs", label="string listRef = ReflectionUtils.GetTypeName(typeof(List<ContentBaseClass>), TypeNameAssemblyFormatHandling.Simple, null)", span="969-969"];
m8_288 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CollectionWithAbstractItems()", file="TypeNameHandlingTests.cs", label="JsonSerializer serializingTester = new JsonSerializer()", span="954-954"];
m8_293 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CollectionWithAbstractItems()", file="TypeNameHandlingTests.cs", label="serializingTester.TypeNameHandling = TypeNameHandling.Auto", span="961-961"];
m8_302 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CollectionWithAbstractItems()", file="TypeNameHandlingTests.cs", label="JsonSerializer deserializingTester = new JsonSerializer()", span="995-995"];
m8_289 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CollectionWithAbstractItems()", file="TypeNameHandlingTests.cs", label="serializingTester.ReferenceLoopHandling = ReferenceLoopHandling.Ignore", span="955-955"];
m8_304 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CollectionWithAbstractItems()", file="TypeNameHandlingTests.cs", label="JsonTextReader jsonReader = new JsonTextReader(sr)", span="999-999"];
m8_306 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CollectionWithAbstractItems()", file="TypeNameHandlingTests.cs", label="anotherTestObject = deserializingTester.Deserialize<HolderClass>(jsonReader)", span="1003-1003"];
m8_292 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CollectionWithAbstractItems()", file="TypeNameHandlingTests.cs", label="jsonWriter.Formatting = Formatting.Indented", span="960-960"];
m8_309 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CollectionWithAbstractItems()", file="TypeNameHandlingTests.cs", label="CustomAssert.IsInstanceOfType(typeof(Dictionary<int, IList<ContentBaseClass>>), anotherTestObject.AnotherTestMember)", span="1008-1008"];
m8_311 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CollectionWithAbstractItems()", file="TypeNameHandlingTests.cs", label="IList<ContentBaseClass> list = anotherTestObject.AnotherTestMember[1]", span="1011-1011"];
m8_312 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CollectionWithAbstractItems()", file="TypeNameHandlingTests.cs", label="CustomAssert.IsInstanceOfType(typeof(List<ContentBaseClass>), list)", span="1013-1013"];
m8_314 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CollectionWithAbstractItems()", file="TypeNameHandlingTests.cs", label="CustomAssert.IsInstanceOfType(typeof(ContentSubClass), list[0])", span="1015-1015"];
m8_308 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CollectionWithAbstractItems()", file="TypeNameHandlingTests.cs", label="CustomAssert.IsInstanceOfType(typeof(ContentSubClass), anotherTestObject.TestMember)", span="1007-1007"];
m8_303 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CollectionWithAbstractItems()", file="TypeNameHandlingTests.cs", label="HolderClass anotherTestObject", span="997-997"];
m8_305 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CollectionWithAbstractItems()", file="TypeNameHandlingTests.cs", label="deserializingTester.TypeNameHandling = TypeNameHandling.Auto", span="1001-1001"];
m8_307 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CollectionWithAbstractItems()", file="TypeNameHandlingTests.cs", label="Assert.IsNotNull(anotherTestObject)", span="1006-1006"];
m8_315 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CollectionWithAbstractItems()", file="TypeNameHandlingTests.cs", label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CollectionWithAbstractItems()", span="945-945"];
m8_405 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TestJsonSerializationRoundTrip(Newtonsoft.Json.Tests.Serialization.SerializableWrapper, Newtonsoft.Json.TypeNameHandling)", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TestJsonSerializationRoundTrip(Newtonsoft.Json.Tests.Serialization.SerializableWrapper, Newtonsoft.Json.TypeNameHandling)", span="1265-1265"];
m8_406 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TestJsonSerializationRoundTrip(Newtonsoft.Json.Tests.Serialization.SerializableWrapper, Newtonsoft.Json.TypeNameHandling)", file="TypeNameHandlingTests.cs", label="StringWriter writer = new StringWriter()", span="1267-1267"];
m8_408 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TestJsonSerializationRoundTrip(Newtonsoft.Json.Tests.Serialization.SerializableWrapper, Newtonsoft.Json.TypeNameHandling)", file="TypeNameHandlingTests.cs", label="serializer.TypeNameHandling = flag", span="1271-1271"];
m8_409 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TestJsonSerializationRoundTrip(Newtonsoft.Json.Tests.Serialization.SerializableWrapper, Newtonsoft.Json.TypeNameHandling)", file="TypeNameHandlingTests.cs", label="serializer.Serialize(new JsonTextWriter(writer), e)", span="1274-1274"];
m8_411 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TestJsonSerializationRoundTrip(Newtonsoft.Json.Tests.Serialization.SerializableWrapper, Newtonsoft.Json.TypeNameHandling)", file="TypeNameHandlingTests.cs", label="Assert.AreEqual(e, f, ''Objects should be equal after round trip json serialization'')", span="1283-1283"];
m8_407 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TestJsonSerializationRoundTrip(Newtonsoft.Json.Tests.Serialization.SerializableWrapper, Newtonsoft.Json.TypeNameHandling)", file="TypeNameHandlingTests.cs", label="JsonSerializer serializer = new JsonSerializer()", span="1270-1270"];
m8_410 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TestJsonSerializationRoundTrip(Newtonsoft.Json.Tests.Serialization.SerializableWrapper, Newtonsoft.Json.TypeNameHandling)", file="TypeNameHandlingTests.cs", label="SerializableWrapper f = serializer.Deserialize<SerializableWrapper>(new JsonTextReader(new StringReader(writer.ToString())))", span="1280-1280"];
m8_412 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TestJsonSerializationRoundTrip(Newtonsoft.Json.Tests.Serialization.SerializableWrapper, Newtonsoft.Json.TypeNameHandling)", file="TypeNameHandlingTests.cs", label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TestJsonSerializationRoundTrip(Newtonsoft.Json.Tests.Serialization.SerializableWrapper, Newtonsoft.Json.TypeNameHandling)", span="1265-1265"];
m8_472 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameObjectItems()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameObjectItems()", span="1432-1432"];
m8_481 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameObjectItems()", file="TypeNameHandlingTests.cs", label="StringAssert.AreEqual(expected, json)", span="1455-1455"];
m8_488 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameObjectItems()", file="TypeNameHandlingTests.cs", label="StringAssert.AreEqual(@''{\r\n  ''''MyProperty'''': 2147483647\r\n}'', o2.ObjectNotHandled.ToString())", span="1464-1466"];
m8_474 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameObjectItems()", file="TypeNameHandlingTests.cs", label="o1.Object1 = new TestComponentSimple { MyProperty = 1 }", span="1436-1436"];
m8_476 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameObjectItems()", file="TypeNameHandlingTests.cs", label="o1.ObjectNotHandled = new TestComponentSimple { MyProperty = int.MaxValue }", span="1438-1438"];
m8_485 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameObjectItems()", file="TypeNameHandlingTests.cs", label="Assert.AreEqual(1, ((TestComponentSimple)o2.Object1).MyProperty)", span="1461-1461"];
m8_479 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameObjectItems()", file="TypeNameHandlingTests.cs", label="string json = JsonConvert.SerializeObject(o1, Formatting.Indented)", span="1442-1442"];
m8_480 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameObjectItems()", file="TypeNameHandlingTests.cs", label="string expected = @''{\r\n  ''''Object1'''': {\r\n    ''''$type'''': ''''Newtonsoft.Json.Tests.TestObjects.TestComponentSimple, Newtonsoft.Json.Tests'''',\r\n    ''''MyProperty'''': 1\r\n  },\r\n  ''''Object2'''': 123,\r\n  ''''ObjectNotHandled'''': {\r\n    ''''MyProperty'''': 2147483647\r\n  },\r\n  ''''String'''': ''''String!'''',\r\n  ''''Integer'''': 2147483647\r\n}''", span="1443-1454"];
m8_482 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameObjectItems()", file="TypeNameHandlingTests.cs", label="TypeNameObject o2 = JsonConvert.DeserializeObject<TypeNameObject>(json)", span="1457-1457"];
m8_487 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameObjectItems()", file="TypeNameHandlingTests.cs", label="CustomAssert.IsInstanceOfType(typeof(JObject), o2.ObjectNotHandled)", span="1463-1463"];
m8_473 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameObjectItems()", file="TypeNameHandlingTests.cs", label="TypeNameObject o1 = new TypeNameObject()", span="1434-1434"];
m8_475 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameObjectItems()", file="TypeNameHandlingTests.cs", label="o1.Object2 = 123", span="1437-1437"];
m8_477 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameObjectItems()", file="TypeNameHandlingTests.cs", label="o1.String = ''String!''", span="1439-1439"];
m8_484 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameObjectItems()", file="TypeNameHandlingTests.cs", label="CustomAssert.IsInstanceOfType(typeof(TestComponentSimple), o2.Object1)", span="1460-1460"];
m8_486 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameObjectItems()", file="TypeNameHandlingTests.cs", label="CustomAssert.IsInstanceOfType(typeof(long), o2.Object2)", span="1462-1462"];
m8_478 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameObjectItems()", file="TypeNameHandlingTests.cs", label="o1.Integer = int.MaxValue", span="1440-1440"];
m8_483 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameObjectItems()", file="TypeNameHandlingTests.cs", label="Assert.IsNotNull(o2)", span="1458-1458"];
m8_489 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameObjectItems()", file="TypeNameHandlingTests.cs", label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameObjectItems()", span="1432-1432"];
m8_346 [cluster="Newtonsoft.Json.JsonConvert.DeserializeObject(string, Newtonsoft.Json.JsonSerializerSettings)", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.JsonConvert.DeserializeObject(string, Newtonsoft.Json.JsonSerializerSettings)", span="681-681"];
m8_717 [cluster="System.Runtime.Serialization.SerializationInfo.GetValue(string, System.Type)", file="TypeNameHandlingTests.cs", label="Entry System.Runtime.Serialization.SerializationInfo.GetValue(string, System.Type)", span="0-0"];
m8_256 [cluster="System.Type.GetType(string, bool)", file="TypeNameHandlingTests.cs", label="Entry System.Type.GetType(string, bool)", span="0-0"];
m8_108 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteUtf8Bytes(string, int)", file="TypeNameHandlingTests.cs", label="s != null", span="204-204"];
m8_364 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>.GetEnumerator()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>.GetEnumerator()", span="1163-1163"];
m8_365 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>.GetEnumerator()", file="TypeNameHandlingTests.cs", label="count == 0", span="1165-1165"];
m8_367 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>.GetEnumerator()", file="TypeNameHandlingTests.cs", label="yield return value;", span="1169-1169"];
m8_368 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>.GetEnumerator()", file="TypeNameHandlingTests.cs", label="var nextInLine = next", span="1171-1171"];
m8_366 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>.GetEnumerator()", file="TypeNameHandlingTests.cs", label="yield break;", span="1167-1167"];
m8_369 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>.GetEnumerator()", file="TypeNameHandlingTests.cs", label="nextInLine != null", span="1172-1172"];
m8_370 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>.GetEnumerator()", file="TypeNameHandlingTests.cs", label="nextInLine.count != 0", span="1174-1174"];
m8_371 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>.GetEnumerator()", file="TypeNameHandlingTests.cs", label="yield return nextInLine.value;", span="1176-1176"];
m8_372 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>.GetEnumerator()", file="TypeNameHandlingTests.cs", label="nextInLine = nextInLine.next", span="1178-1178"];
m8_373 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>.GetEnumerator()", file="TypeNameHandlingTests.cs", label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>.GetEnumerator()", span="1163-1163"];
m8_562 [cluster="Newtonsoft.Json.Tests.Serialization.PropertyItemTypeNameHandlingObject.PropertyItemTypeNameHandlingObject()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.PropertyItemTypeNameHandlingObject.PropertyItemTypeNameHandlingObject()", span="2294-2294"];
m8_318 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", file="TypeNameHandlingTests.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0"];
m8_17 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DictionaryAuto()", file="TypeNameHandlingTests.cs", label="StringAssert.AreEqual(@''{\r\n  ''''movie'''': {\r\n    ''''$type'''': ''''Newtonsoft.Json.Tests.TestObjects.Movie, Newtonsoft.Json.Tests'''',\r\n    ''''Name'''': ''''Die Hard'''',\r\n    ''''Description'''': null,\r\n    ''''Classification'''': null,\r\n    ''''Studio'''': null,\r\n    ''''ReleaseDate'''': null,\r\n    ''''ReleaseCountries'''': null\r\n  }\r\n}'', json)", span="139-149"];
m8_18 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DictionaryAuto()", file="TypeNameHandlingTests.cs", label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DictionaryAuto()", span="127-127"];
m8_20 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.KeyValuePairAuto()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.KeyValuePairAuto()", span="153-153"];
m8_38 [cluster="lambda expression", file="TypeNameHandlingTests.cs", label="var reader = new JsonTextReader(new StringReader(sb.ToString()))", span="192-192"];
m8_41 [cluster="lambda expression", file="TypeNameHandlingTests.cs", label="ser.Deserialize<sbyte>(reader)", span="195-195"];
m8_44 [cluster="System.IO.StringReader.StringReader(string)", file="TypeNameHandlingTests.cs", label="Entry System.IO.StringReader.StringReader(string)", span="0-0"];
m8_47 [cluster="Newtonsoft.Json.JsonSerializer.Deserialize<T>(Newtonsoft.Json.JsonReader)", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.JsonSerializer.Deserialize<T>(Newtonsoft.Json.JsonReader)", span="838-838"];
m8_68 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeRootTypeNameAutoWithJsonConvert()", file="TypeNameHandlingTests.cs", label="string json = JsonConvert.SerializeObject(new WagePerson(), typeof(object), Formatting.Indented, new JsonSerializerSettings\r\n            {\r\n                TypeNameHandling = TypeNameHandling.Auto\r\n            })", span="230-233"];
m8_74 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeRootTypeNameAutoWithJsonConvert_Generic()", file="TypeNameHandlingTests.cs", label="StringAssert.AreEqual(@''{\r\n  ''''$type'''': ''''Newtonsoft.Json.Tests.TestObjects.Organization.WagePerson, Newtonsoft.Json.Tests'''',\r\n  ''''HourlyWage'''': 0.0,\r\n  ''''Name'''': null,\r\n  ''''BirthDate'''': ''''0001-01-01T00:00:00'''',\r\n  ''''LastModified'''': ''''0001-01-01T00:00:00''''\r\n}'', json)", span="252-258"];
m8_81 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeWrapper()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeWrapper()", span="279-279"];
m8_19 [cluster="Newtonsoft.Json.Tests.TestObjects.Movie.Movie()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.TestObjects.Movie.Movie()", span="30-30"];
m8_37 [cluster="lambda expression", file="TypeNameHandlingTests.cs", label="Entry lambda expression", span="190-196"];
m8_40 [cluster="lambda expression", file="TypeNameHandlingTests.cs", label="ser.MetadataPropertyHandling = MetadataPropertyHandling.Default", span="194-194"];
m8_43 [cluster="Newtonsoft.Json.JsonTextReader.JsonTextReader(System.IO.TextReader)", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.JsonTextReader.JsonTextReader(System.IO.TextReader)", span="75-75"];
m8_46 [cluster="Newtonsoft.Json.JsonSerializer.JsonSerializer()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.JsonSerializer.JsonSerializer()", span="530-530"];
m8_67 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeRootTypeNameAutoWithJsonConvert()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeRootTypeNameAutoWithJsonConvert()", span="228-228"];
m8_73 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeRootTypeNameAutoWithJsonConvert_Generic()", file="TypeNameHandlingTests.cs", label="string json = JsonConvert.SerializeObject(new WagePerson(), typeof(object), Formatting.Indented, new JsonSerializerSettings\r\n            {\r\n                TypeNameHandling = TypeNameHandling.Auto\r\n            })", span="247-250"];
m8_21 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.KeyValuePairAuto()", file="TypeNameHandlingTests.cs", label="IList<KeyValuePair<string, object>> dic = new List<KeyValuePair<string, object>>\r\n            {\r\n                new KeyValuePair<string, object>(''movie'', new Movie { Name = ''Die Hard'' })\r\n            }", span="155-158"];
m8_22 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.KeyValuePairAuto()", file="TypeNameHandlingTests.cs", label="string json = JsonConvert.SerializeObject(dic, Formatting.Indented, new JsonSerializerSettings\r\n            {\r\n                TypeNameHandling = TypeNameHandling.Auto\r\n            })", span="160-163"];
m8_23 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.KeyValuePairAuto()", file="TypeNameHandlingTests.cs", label="StringAssert.AreEqual(@''[\r\n  {\r\n    ''''Key'''': ''''movie'''',\r\n    ''''Value'''': {\r\n      ''''$type'''': ''''Newtonsoft.Json.Tests.TestObjects.Movie, Newtonsoft.Json.Tests'''',\r\n      ''''Name'''': ''''Die Hard'''',\r\n      ''''Description'''': null,\r\n      ''''Classification'''': null,\r\n      ''''Studio'''': null,\r\n      ''''ReleaseDate'''': null,\r\n      ''''ReleaseCountries'''': null\r\n    }\r\n  }\r\n]'', json)", span="165-178"];
m8_24 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.KeyValuePairAuto()", file="TypeNameHandlingTests.cs", label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.KeyValuePairAuto()", span="153-153"];
m8_25 [cluster="System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", file="TypeNameHandlingTests.cs", label="Entry System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", span="0-0"];
m8_35 [cluster="System.Text.StringBuilder.Append(string)", file="TypeNameHandlingTests.cs", label="Entry System.Text.StringBuilder.Append(string)", span="0-0"];
m8_39 [cluster="lambda expression", file="TypeNameHandlingTests.cs", label="var ser = new JsonSerializer()", span="193-193"];
m8_42 [cluster="lambda expression", file="TypeNameHandlingTests.cs", label="Exit lambda expression", span="190-196"];
m8_45 [cluster="System.Text.StringBuilder.ToString()", file="TypeNameHandlingTests.cs", label="Entry System.Text.StringBuilder.ToString()", span="0-0"];
m8_64 [cluster="string.Contains(string)", file="TypeNameHandlingTests.cs", label="Entry string.Contains(string)", span="0-0"];
m8_59 [cluster="System.IO.StringWriter.StringWriter()", file="TypeNameHandlingTests.cs", label="Entry System.IO.StringWriter.StringWriter()", span="0-0"];
m8_60 [cluster="Newtonsoft.Json.JsonTextWriter.JsonTextWriter(System.IO.TextWriter)", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.JsonTextWriter.JsonTextWriter(System.IO.TextWriter)", span="149-149"];
m8_61 [cluster="Newtonsoft.Json.Tests.TestObjects.Organization.WagePerson.WagePerson()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.TestObjects.Organization.WagePerson.WagePerson()", span="27-27"];
m8_66 [cluster="Newtonsoft.Json.Tests.CustomAssert.IsInstanceOfType(System.Type, object)", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.CustomAssert.IsInstanceOfType(System.Type, object)", span="301-301"];
m8_69 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeRootTypeNameAutoWithJsonConvert()", file="TypeNameHandlingTests.cs", label="StringAssert.AreEqual(@''{\r\n  ''''$type'''': ''''Newtonsoft.Json.Tests.TestObjects.Organization.WagePerson, Newtonsoft.Json.Tests'''',\r\n  ''''HourlyWage'''': 0.0,\r\n  ''''Name'''': null,\r\n  ''''BirthDate'''': ''''0001-01-01T00:00:00'''',\r\n  ''''LastModified'''': ''''0001-01-01T00:00:00''''\r\n}'', json)", span="235-241"];
m8_71 [cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, System.Type, Newtonsoft.Json.Formatting, Newtonsoft.Json.JsonSerializerSettings)", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object, System.Type, Newtonsoft.Json.Formatting, Newtonsoft.Json.JsonSerializerSettings)", span="638-638"];
m8_70 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeRootTypeNameAutoWithJsonConvert()", file="TypeNameHandlingTests.cs", label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeRootTypeNameAutoWithJsonConvert()", span="228-228"];
m8_72 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeRootTypeNameAutoWithJsonConvert_Generic()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeRootTypeNameAutoWithJsonConvert_Generic()", span="245-245"];
m8_75 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeRootTypeNameAutoWithJsonConvert_Generic()", file="TypeNameHandlingTests.cs", label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeRootTypeNameAutoWithJsonConvert_Generic()", span="245-245"];
m8_80 [cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, System.Type, Newtonsoft.Json.JsonSerializerSettings)", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object, System.Type, Newtonsoft.Json.JsonSerializerSettings)", span="601-601"];
m8_82 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeWrapper()", file="TypeNameHandlingTests.cs", label="Wrapper wrapper = new Wrapper()", span="281-281"];
m8_492 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandling()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandling()", span="1470-1470"];
m8_494 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandling()", file="TypeNameHandlingTests.cs", label="c1.Data = new List<object>\r\n            {\r\n                1,\r\n                ''two'',\r\n                new TestComponentSimple { MyProperty = 1 }\r\n            }", span="1473-1478"];
m8_493 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandling()", file="TypeNameHandlingTests.cs", label="PropertyItemTypeNameHandling c1 = new PropertyItemTypeNameHandling()", span="1472-1472"];
m8_495 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandling()", file="TypeNameHandlingTests.cs", label="string json = JsonConvert.SerializeObject(c1, Formatting.Indented)", span="1480-1480"];
m8_496 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandling()", file="TypeNameHandlingTests.cs", label="StringAssert.AreEqual(@''{\r\n  ''''Data'''': [\r\n    1,\r\n    ''''two'''',\r\n    {\r\n      ''''$type'''': ''''Newtonsoft.Json.Tests.TestObjects.TestComponentSimple, Newtonsoft.Json.Tests'''',\r\n      ''''MyProperty'''': 1\r\n    }\r\n  ]\r\n}'', json)", span="1481-1490"];
m8_497 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandling()", file="TypeNameHandlingTests.cs", label="PropertyItemTypeNameHandling c2 = JsonConvert.DeserializeObject<PropertyItemTypeNameHandling>(json)", span="1492-1492"];
m8_498 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandling()", file="TypeNameHandlingTests.cs", label="Assert.AreEqual(3, c2.Data.Count)", span="1493-1493"];
m8_503 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandling()", file="TypeNameHandlingTests.cs", label="Assert.AreEqual(1, c.MyProperty)", span="1499-1499"];
m8_499 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandling()", file="TypeNameHandlingTests.cs", label="CustomAssert.IsInstanceOfType(typeof(long), c2.Data[0])", span="1495-1495"];
m8_500 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandling()", file="TypeNameHandlingTests.cs", label="CustomAssert.IsInstanceOfType(typeof(string), c2.Data[1])", span="1496-1496"];
m8_501 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandling()", file="TypeNameHandlingTests.cs", label="CustomAssert.IsInstanceOfType(typeof(TestComponentSimple), c2.Data[2])", span="1497-1497"];
m8_502 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandling()", file="TypeNameHandlingTests.cs", label="TestComponentSimple c = (TestComponentSimple)c2.Data[2]", span="1498-1498"];
m8_504 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandling()", file="TypeNameHandlingTests.cs", label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandling()", span="1470-1470"];
m8_505 [cluster="Newtonsoft.Json.Tests.Serialization.PropertyItemTypeNameHandling.PropertyItemTypeNameHandling()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.PropertyItemTypeNameHandling.PropertyItemTypeNameHandling()", span="2322-2322"];
m8_110 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteUtf8Bytes(string, int)", file="TypeNameHandlingTests.cs", label="_largeByteBuffer = new byte[256]", span="208-208"];
m8_113 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteUtf8Bytes(string, int)", file="TypeNameHandlingTests.cs", label="_writer.Write(_largeByteBuffer, 0, byteCount)", span="213-213"];
m8_112 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteUtf8Bytes(string, int)", file="TypeNameHandlingTests.cs", label="Encoding.GetBytes(s, 0, s.Length, _largeByteBuffer, 0)", span="212-212"];
m8_114 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteUtf8Bytes(string, int)", file="TypeNameHandlingTests.cs", label="byte[] bytes = Encoding.GetBytes(s)", span="217-217"];
m8_111 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteUtf8Bytes(string, int)", file="TypeNameHandlingTests.cs", label="byteCount <= 256", span="210-210"];
m8_115 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteUtf8Bytes(string, int)", file="TypeNameHandlingTests.cs", label="_writer.Write(bytes)", span="218-218"];
m8_347 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializingIEnumerableOfTShouldRetainGenericTypeInfo()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializingIEnumerableOfTShouldRetainGenericTypeInfo()", span="1125-1125"];
m8_350 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializingIEnumerableOfTShouldRetainGenericTypeInfo()", file="TypeNameHandlingTests.cs", label="string json = JsonConvert.SerializeObject(products, Formatting.Indented, new JsonSerializerSettings { TypeNameHandling = TypeNameHandling.All })", span="1131-1131"];
m8_351 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializingIEnumerableOfTShouldRetainGenericTypeInfo()", file="TypeNameHandlingTests.cs", label="StringAssert.AreEqual(@''{\r\n  ''''$type'''': '''''' + productClassRef + @'''''',\r\n  ''''$values'''': []\r\n}'', json)", span="1133-1136"];
m8_349 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializingIEnumerableOfTShouldRetainGenericTypeInfo()", file="TypeNameHandlingTests.cs", label="CustomEnumerable<Product> products = new CustomEnumerable<Product>()", span="1129-1129"];
m8_348 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializingIEnumerableOfTShouldRetainGenericTypeInfo()", file="TypeNameHandlingTests.cs", label="string productClassRef = ReflectionUtils.GetTypeName(typeof(CustomEnumerable<Product>), TypeNameAssemblyFormatHandling.Simple, null)", span="1127-1127"];
m8_352 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializingIEnumerableOfTShouldRetainGenericTypeInfo()", file="TypeNameHandlingTests.cs", label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializingIEnumerableOfTShouldRetainGenericTypeInfo()", span="1125-1125"];
m8_117 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeGenericObjectListWithTypeName()", file="TypeNameHandlingTests.cs", label="string employeeRef = typeof(EmployeeReference).AssemblyQualifiedName", span="382-382"];
m8_99 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteTypeNameForObjects()", file="TypeNameHandlingTests.cs", label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteTypeNameForObjects()", span="319-319"];
m8_709 [cluster="Unk.nameof", file="TypeNameHandlingTests.cs", label="Entry Unk.nameof", span=""];
m8_592 [cluster="Newtonsoft.Json.Tests.Linq.DynamicDictionary.DynamicDictionary()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.DynamicDictionary.DynamicDictionary()", span="958-958"];
m8_722 [cluster="System.Runtime.Serialization.SerializationInfo.AddValue(string, object)", file="TypeNameHandlingTests.cs", label="Entry System.Runtime.Serialization.SerializationInfo.AddValue(string, object)", span="0-0"];
m8_316 [cluster="Newtonsoft.Json.Tests.TestObjects.HolderClass.HolderClass()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.TestObjects.HolderClass.HolderClass()", span="31-31"];
m8_754 [cluster="object.ReferenceEquals(object, object)", file="TypeNameHandlingTests.cs", label="Entry object.ReferenceEquals(object, object)", span="0-0"];
m8_0 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.BsonBinaryWriter(System.IO.BinaryWriter)", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Bson.BsonBinaryWriter.BsonBinaryWriter(System.IO.BinaryWriter)", span="43-43"];
m8_1 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.BsonBinaryWriter(System.IO.BinaryWriter)", color=green, community=0, file="TypeNameHandlingTests.cs", label="DateTimeKindHandling = DateTimeKind.Utc", prediction=24, span="45-45"];
m8_2 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.BsonBinaryWriter(System.IO.BinaryWriter)", file="TypeNameHandlingTests.cs", label="_writer = writer", span="46-46"];
m8_3 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.BsonBinaryWriter(System.IO.BinaryWriter)", file="TypeNameHandlingTests.cs", label="Exit Newtonsoft.Json.Bson.BsonBinaryWriter.BsonBinaryWriter(System.IO.BinaryWriter)", span="43-43"];
m8_89 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeWrapper()", file="TypeNameHandlingTests.cs", label="CustomAssert.IsInstanceOfType(typeof(Dictionary<string, EmployeeReference>), w2.Dictionary)", span="315-315"];
m8_396 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ISerializableTypeNameHandlingTest()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ISerializableTypeNameHandlingTest()", span="1243-1243"];
m8_399 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ISerializableTypeNameHandlingTest()", file="TypeNameHandlingTests.cs", label="TestJsonSerializationRoundTrip(w, TypeNameHandling.All)", span="1260-1260"];
m8_400 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ISerializableTypeNameHandlingTest()", file="TypeNameHandlingTests.cs", label="TestJsonSerializationRoundTrip(w, TypeNameHandling.Auto)", span="1261-1261"];
m8_401 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ISerializableTypeNameHandlingTest()", file="TypeNameHandlingTests.cs", label="TestJsonSerializationRoundTrip(w, TypeNameHandling.Objects)", span="1262-1262"];
m8_398 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ISerializableTypeNameHandlingTest()", file="TypeNameHandlingTests.cs", label="SerializableWrapper w = new SerializableWrapper\r\n            {\r\n                Content = e\r\n            }", span="1248-1251"];
m8_397 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ISerializableTypeNameHandlingTest()", file="TypeNameHandlingTests.cs", label="IExample e = new Example(''Rob'')", span="1246-1246"];
m8_402 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ISerializableTypeNameHandlingTest()", file="TypeNameHandlingTests.cs", label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ISerializableTypeNameHandlingTest()", span="1243-1243"];
m8_12 [cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting, Newtonsoft.Json.JsonSerializerSettings)", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting, Newtonsoft.Json.JsonSerializerSettings)", span="618-618"];
m8_13 [cluster="Newtonsoft.Json.Tests.StringAssert.AreEqual(string, string)", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.StringAssert.AreEqual(string, string)", span="328-328"];
m8_14 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DictionaryAuto()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DictionaryAuto()", span="127-127"];
m8_15 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DictionaryAuto()", file="TypeNameHandlingTests.cs", label="Dictionary<string, object> dic = new Dictionary<string, object>\r\n            {\r\n                { ''movie'', new Movie { Name = ''Die Hard'' } }\r\n            }", span="129-132"];
m8_374 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>.System.Collections.IEnumerable.GetEnumerator()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>.System.Collections.IEnumerable.GetEnumerator()", span="1182-1182"];
m8_375 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>.System.Collections.IEnumerable.GetEnumerator()", file="TypeNameHandlingTests.cs", label="return GetEnumerator();", span="1184-1184"];
m8_376 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>.System.Collections.IEnumerable.GetEnumerator()", file="TypeNameHandlingTests.cs", label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>.System.Collections.IEnumerable.GetEnumerator()", span="1182-1182"];
m8_83 [cluster="System.IO.BinaryWriter.Write(int)", file="TypeNameHandlingTests.cs", label="Entry System.IO.BinaryWriter.Write(int)", span="0-0"];
m8_84 [cluster="System.IO.BinaryWriter.Write(sbyte)", file="TypeNameHandlingTests.cs", label="Entry System.IO.BinaryWriter.Write(sbyte)", span="0-0"];
m8_86 [cluster="System.IO.BinaryWriter.Write(byte)", file="TypeNameHandlingTests.cs", label="Entry System.IO.BinaryWriter.Write(byte)", span="0-0"];
m8_88 [cluster="Newtonsoft.Json.Utilities.MathUtils.IntLength(ulong)", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Utilities.MathUtils.IntLength(ulong)", span="33-33"];
m8_742 [cluster="Newtonsoft.Json.Tests.Serialization.Example.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.Example.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)", span="2255-2255"];
m8_743 [cluster="Newtonsoft.Json.Tests.Serialization.Example.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)", file="TypeNameHandlingTests.cs", label="info.AddValue(''name'', Name)", span="2257-2257"];
m8_744 [cluster="Newtonsoft.Json.Tests.Serialization.Example.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)", file="TypeNameHandlingTests.cs", label="Exit Newtonsoft.Json.Tests.Serialization.Example.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)", span="2255-2255"];
m8_506 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedCollections()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedCollections()", span="1503-1503"];
m8_507 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedCollections()", file="TypeNameHandlingTests.cs", label="PropertyItemTypeNameHandling c1 = new PropertyItemTypeNameHandling\r\n            {\r\n                Data = new List<object>\r\n                {\r\n                    new TestComponentSimple { MyProperty = 1 },\r\n                    new List<object>\r\n                    {\r\n                        new List<object>\r\n                        {\r\n                            new List<object>()\r\n                        }\r\n                    }\r\n                }\r\n            }", span="1505-1518"];
m8_508 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedCollections()", file="TypeNameHandlingTests.cs", label="string json = JsonConvert.SerializeObject(c1, Formatting.Indented)", span="1520-1520"];
m8_509 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedCollections()", file="TypeNameHandlingTests.cs", label="StringAssert.AreEqual(@''{\r\n  ''''Data'''': [\r\n    {\r\n      ''''$type'''': ''''Newtonsoft.Json.Tests.TestObjects.TestComponentSimple, Newtonsoft.Json.Tests'''',\r\n      ''''MyProperty'''': 1\r\n    },\r\n    {\r\n      ''''$type'''': ''''System.Collections.Generic.List`1[[System.Object, mscorlib]], mscorlib'''',\r\n      ''''$values'''': [\r\n        [\r\n          []\r\n        ]\r\n      ]\r\n    }\r\n  ]\r\n}'', json)", span="1521-1536"];
m8_510 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedCollections()", file="TypeNameHandlingTests.cs", label="PropertyItemTypeNameHandling c2 = JsonConvert.DeserializeObject<PropertyItemTypeNameHandling>(json)", span="1538-1538"];
m8_511 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedCollections()", file="TypeNameHandlingTests.cs", label="Assert.AreEqual(2, c2.Data.Count)", span="1539-1539"];
m8_518 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedCollections()", file="TypeNameHandlingTests.cs", label="Assert.AreEqual(2, c2.Data.Count)", span="1565-1565"];
m8_524 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedCollections()", file="TypeNameHandlingTests.cs", label="Assert.AreEqual(1, (int)o[''MyProperty''])", span="1572-1572"];
m8_512 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedCollections()", file="TypeNameHandlingTests.cs", label="CustomAssert.IsInstanceOfType(typeof(TestComponentSimple), c2.Data[0])", span="1541-1541"];
m8_513 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedCollections()", file="TypeNameHandlingTests.cs", label="CustomAssert.IsInstanceOfType(typeof(List<object>), c2.Data[1])", span="1542-1542"];
m8_514 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedCollections()", file="TypeNameHandlingTests.cs", label="List<object> c = (List<object>)c2.Data[1]", span="1543-1543"];
m8_517 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedCollections()", file="TypeNameHandlingTests.cs", label="c2 = JsonConvert.DeserializeObject<PropertyItemTypeNameHandling>(json)", span="1564-1564"];
m8_519 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedCollections()", file="TypeNameHandlingTests.cs", label="CustomAssert.IsInstanceOfType(typeof(TestComponentSimple), c2.Data[0])", span="1567-1567"];
m8_523 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedCollections()", file="TypeNameHandlingTests.cs", label="JObject o = (JObject)c[0]", span="1571-1571"];
m8_515 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedCollections()", file="TypeNameHandlingTests.cs", label="CustomAssert.IsInstanceOfType(typeof(JArray), c[0])", span="1544-1544"];
m8_520 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedCollections()", file="TypeNameHandlingTests.cs", label="CustomAssert.IsInstanceOfType(typeof(List<object>), c2.Data[1])", span="1568-1568"];
m8_522 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedCollections()", file="TypeNameHandlingTests.cs", label="CustomAssert.IsInstanceOfType(typeof(JObject), c[0])", span="1570-1570"];
m8_516 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedCollections()", file="TypeNameHandlingTests.cs", label="json = @''{\r\n  ''''Data'''': [\r\n    {\r\n      ''''$type'''': ''''Newtonsoft.Json.Tests.TestObjects.TestComponentSimple, Newtonsoft.Json.Tests'''',\r\n      ''''MyProperty'''': 1\r\n    },\r\n    {\r\n      ''''$type'''': ''''System.Collections.Generic.List`1[[System.Object, mscorlib]], mscorlib'''',\r\n      ''''$values'''': [\r\n        {\r\n          ''''$type'''': ''''Newtonsoft.Json.Tests.TestObjects.TestComponentSimple, Newtonsoft.Json.Tests'''',\r\n          ''''MyProperty'''': 1\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}''", span="1546-1562"];
m8_521 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedCollections()", file="TypeNameHandlingTests.cs", label="c = (List<object>)c2.Data[1]", span="1569-1569"];
m8_525 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedCollections()", file="TypeNameHandlingTests.cs", label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedCollections()", span="1503-1503"];
m8_187 [cluster="Newtonsoft.Json.Tests.TestObjects.Container.Container()", file="TypeNameHandlingTests.cs", label="Newtonsoft.Json.Bson.BsonBinaryWriter", span=""];
m8_94 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteTypeNameForObjects()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteTypeNameForObjects()", span="319-319"];
m8_605 [cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.JsonSerializerSettings)", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.JsonSerializerSettings)", span="582-582"];
m8_101 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeTypeName()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeTypeName()", span="339-339"];
m8_270 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.NewTypeNameSerializationBinder.NewTypeNameSerializationBinder(string)", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.NewTypeNameSerializationBinder.NewTypeNameSerializationBinder(string)", span="925-925"];
m8_271 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.NewTypeNameSerializationBinder.NewTypeNameSerializationBinder(string)", file="TypeNameHandlingTests.cs", label="TypeFormat = typeFormat", span="927-927"];
m8_272 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.NewTypeNameSerializationBinder.NewTypeNameSerializationBinder(string)", file="TypeNameHandlingTests.cs", label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.NewTypeNameSerializationBinder.NewTypeNameSerializationBinder(string)", span="925-925"];
m8_107 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteUtf8Bytes(string, int)", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Bson.BsonBinaryWriter.WriteUtf8Bytes(string, int)", span="202-202"];
m8_546 [cluster="Newtonsoft.Json.Tests.Serialization.PropertyItemTypeNameHandlingDictionary.PropertyItemTypeNameHandlingDictionary()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.PropertyItemTypeNameHandlingDictionary.PropertyItemTypeNameHandlingDictionary()", span="2316-2316"];
m8_457 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameDictionary()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameDictionary()", span="1405-1405"];
m8_463 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameDictionary()", file="TypeNameHandlingTests.cs", label="StringAssert.AreEqual(@''{\r\n  ''''First'''': {\r\n    ''''$type'''': ''''Newtonsoft.Json.Tests.TestObjects.TestComponentSimple, Newtonsoft.Json.Tests'''',\r\n    ''''MyProperty'''': 1\r\n  },\r\n  ''''Second'''': ''''String!'''',\r\n  ''''Third'''': 9223372036854775807\r\n}'', json)", span="1413-1420"];
m8_459 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameDictionary()", file="TypeNameHandlingTests.cs", label="l.Add(''First'', new TestComponentSimple { MyProperty = 1 })", span="1408-1408"];
m8_460 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameDictionary()", file="TypeNameHandlingTests.cs", label="l.Add(''Second'', ''String!'')", span="1409-1409"];
m8_461 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameDictionary()", file="TypeNameHandlingTests.cs", label="l.Add(''Third'', long.MaxValue)", span="1410-1410"];
m8_465 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameDictionary()", file="TypeNameHandlingTests.cs", label="Assert.AreEqual(3, l2.Count)", span="1423-1423"];
m8_467 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameDictionary()", file="TypeNameHandlingTests.cs", label="Assert.AreEqual(1, ((TestComponentSimple)l2[''First'']).MyProperty)", span="1426-1426"];
m8_462 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameDictionary()", file="TypeNameHandlingTests.cs", label="string json = JsonConvert.SerializeObject(l, Formatting.Indented)", span="1412-1412"];
m8_464 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameDictionary()", file="TypeNameHandlingTests.cs", label="TypeNameDictionary<object> l2 = JsonConvert.DeserializeObject<TypeNameDictionary<object>>(json)", span="1422-1422"];
m8_458 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameDictionary()", file="TypeNameHandlingTests.cs", label="TypeNameDictionary<object> l = new TypeNameDictionary<object>()", span="1407-1407"];
m8_466 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameDictionary()", file="TypeNameHandlingTests.cs", label="CustomAssert.IsInstanceOfType(typeof(TestComponentSimple), l2[''First''])", span="1425-1425"];
m8_468 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameDictionary()", file="TypeNameHandlingTests.cs", label="CustomAssert.IsInstanceOfType(typeof(string), l2[''Second''])", span="1427-1427"];
m8_469 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameDictionary()", file="TypeNameHandlingTests.cs", label="CustomAssert.IsInstanceOfType(typeof(long), l2[''Third''])", span="1428-1428"];
m8_470 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameDictionary()", file="TypeNameHandlingTests.cs", label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameDictionary()", span="1405-1405"];
m8_413 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializationBinderWithFullName()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializationBinderWithFullName()", span="1289-1289"];
m8_415 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializationBinderWithFullName()", file="TypeNameHandlingTests.cs", label="string json = JsonConvert.SerializeObject(message, Formatting.Indented, new JsonSerializerSettings\r\n            {\r\n                TypeNameHandling = TypeNameHandling.All,\r\n#pragma warning disable CS0618 // Type or member is obsolete\r\n                TypeNameAssemblyFormat = FormatterAssemblyStyle.Full,\r\n                Binder = new MetroBinder(),\r\n#pragma warning restore CS0618 // Type or member is obsolete\r\n                ContractResolver = new DefaultContractResolver\r\n                {\r\n#if !(PORTABLE || DNXCORE50)\r\n                    IgnoreSerializableAttribute = true\r\n#endif\r\n                }\r\n            })", span="1297-1310"];
m8_416 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializationBinderWithFullName()", file="TypeNameHandlingTests.cs", label="StringAssert.AreEqual(@''{\r\n  ''''$type'''': '''':::MESSAGE:::, AssemblyName'''',\r\n  ''''Address'''': ''''jamesnk@testtown.com'''',\r\n  ''''Body'''': {\r\n    ''''$type'''': '''':::VERSION:::, AssemblyName'''',\r\n    ''''Major'''': 1,\r\n    ''''Minor'''': 2,\r\n    ''''Build'''': 3,\r\n    ''''Revision'''': 4,\r\n    ''''MajorRevision'''': 0,\r\n    ''''MinorRevision'''': 4\r\n  }\r\n}'', json)", span="1312-1324"];
m8_414 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializationBinderWithFullName()", file="TypeNameHandlingTests.cs", label="Message message = new Message\r\n            {\r\n                Address = ''jamesnk@testtown.com'',\r\n                Body = new Version(1, 2, 3, 4)\r\n            }", span="1291-1295"];
m8_417 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializationBinderWithFullName()", file="TypeNameHandlingTests.cs", label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializationBinderWithFullName()", span="1289-1289"];
m8_672 [cluster="Newtonsoft.Json.Tests.Serialization.DataType.DataType()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.DataType.DataType()", span="2120-2120"];
m8_712 [cluster="Newtonsoft.Json.Tests.Serialization.DataType.DataType()", file="TypeNameHandlingTests.cs", label="Rows = new Dictionary<string, IEnumerable<IMyInterfaceType>>()", span="2122-2122"];
m8_713 [cluster="Newtonsoft.Json.Tests.Serialization.DataType.DataType()", file="TypeNameHandlingTests.cs", label="Exit Newtonsoft.Json.Tests.Serialization.DataType.DataType()", span="2120-2120"];
m8_377 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ByteArrays()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ByteArrays()", span="1202-1202"];
m8_382 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ByteArrays()", file="TypeNameHandlingTests.cs", label="JsonSerializerSettings jsonSettings = new JsonSerializerSettings()", span="1209-1209"];
m8_385 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ByteArrays()", file="TypeNameHandlingTests.cs", label="string output = JsonConvert.SerializeObject(testerObject, Formatting.Indented, jsonSettings)", span="1213-1213"];
m8_387 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ByteArrays()", file="TypeNameHandlingTests.cs", label="StringAssert.AreEqual(output, @''{\r\n  ''''$type'''': '''''' + carClassRef + @'''''',\r\n  ''''Year'''': ''''2000-10-05T01:01:01Z'''',\r\n  ''''Objects'''': {\r\n    ''''$type'''': ''''System.Object[], mscorlib'''',\r\n    ''''$values'''': [\r\n      {\r\n        ''''$type'''': ''''System.Byte[], mscorlib'''',\r\n        ''''$value'''': ''''S0FSSVJB''''\r\n      },\r\n      ''''prueba''''\r\n    ]\r\n  }\r\n}'')", span="1217-1230"];
m8_381 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ByteArrays()", file="TypeNameHandlingTests.cs", label="testerObject.Objects = new object[] { data, ''prueba'' }", span="1207-1207"];
m8_383 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ByteArrays()", file="TypeNameHandlingTests.cs", label="jsonSettings.NullValueHandling = NullValueHandling.Ignore", span="1210-1210"];
m8_384 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ByteArrays()", file="TypeNameHandlingTests.cs", label="jsonSettings.TypeNameHandling = TypeNameHandling.All", span="1211-1211"];
m8_388 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ByteArrays()", file="TypeNameHandlingTests.cs", label="Car obj = JsonConvert.DeserializeObject<Car>(output, jsonSettings)", span="1231-1231"];
m8_378 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ByteArrays()", file="TypeNameHandlingTests.cs", label="Car testerObject = new Car()", span="1204-1204"];
m8_386 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ByteArrays()", file="TypeNameHandlingTests.cs", label="string carClassRef = ReflectionUtils.GetTypeName(typeof(Car), TypeNameAssemblyFormatHandling.Simple, null)", span="1215-1215"];
m8_379 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ByteArrays()", file="TypeNameHandlingTests.cs", label="testerObject.Year = new DateTime(2000, 10, 5, 1, 1, 1, DateTimeKind.Utc)", span="1205-1205"];
m8_380 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ByteArrays()", file="TypeNameHandlingTests.cs", label="byte[] data = new byte[] { 75, 65, 82, 73, 82, 65 }", span="1206-1206"];
m8_389 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ByteArrays()", file="TypeNameHandlingTests.cs", label="Assert.IsNotNull(obj)", span="1233-1233"];
m8_390 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ByteArrays()", file="TypeNameHandlingTests.cs", label="Assert.IsTrue(obj.Objects[0] is byte[])", span="1235-1235"];
m8_391 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ByteArrays()", file="TypeNameHandlingTests.cs", label="byte[] d = (byte[])obj.Objects[0]", span="1237-1237"];
m8_392 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ByteArrays()", file="TypeNameHandlingTests.cs", label="CollectionAssert.AreEquivalent(data, d)", span="1238-1238"];
m8_393 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ByteArrays()", file="TypeNameHandlingTests.cs", label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ByteArrays()", span="1202-1202"];
m8_652 [cluster="System.Collections.Generic.Stack<T>.Stack(System.Collections.Generic.IEnumerable<T>)", file="TypeNameHandlingTests.cs", label="Entry System.Collections.Generic.Stack<T>.Stack(System.Collections.Generic.IEnumerable<T>)", span="0-0"];
m8_91 [cluster="System.IO.BinaryWriter.Write(long)", file="TypeNameHandlingTests.cs", label="Entry System.IO.BinaryWriter.Write(long)", span="0-0"];
m8_200 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameProperty.TypeNameProperty()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameProperty.TypeNameProperty()", span="646-646"];
m8_320 [cluster="Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter, object)", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter, object)", span="1042-1042"];
m8_100 [cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetTypeName(System.Type, Newtonsoft.Json.TypeNameAssemblyFormatHandling, Newtonsoft.Json.Serialization.ISerializationBinder)", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.GetTypeName(System.Type, Newtonsoft.Json.TypeNameAssemblyFormatHandling, Newtonsoft.Json.Serialization.ISerializationBinder)", span="147-147"];
m8_116 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteUtf8Bytes(string, int)", file="TypeNameHandlingTests.cs", label="Exit Newtonsoft.Json.Bson.BsonBinaryWriter.WriteUtf8Bytes(string, int)", span="202-202"];
m8_119 [cluster="System.Text.Encoding.GetBytes(string)", file="TypeNameHandlingTests.cs", label="Entry System.Text.Encoding.GetBytes(string)", span="0-0"];
m8_118 [cluster="System.IO.BinaryWriter.Write(byte[], int, int)", file="TypeNameHandlingTests.cs", label="Entry System.IO.BinaryWriter.Write(byte[], int, int)", span="0-0"];
m8_345 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.UrlStatus.UrlStatus()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.UrlStatus.UrlStatus()", span="1045-1045"];
m8_438 [cluster="System.Collections.Generic.List<T>.Add(T)", file="TypeNameHandlingTests.cs", label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0"];
m8_593 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeDeserialize_DictionaryContextContainsGuid_DeserializesItemAsGuid()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeDeserialize_DictionaryContextContainsGuid_DeserializesItemAsGuid()", span="1784-1784"];
m8_596 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeDeserialize_DictionaryContextContainsGuid_DeserializesItemAsGuid()", file="TypeNameHandlingTests.cs", label="Dictionary<string, Guid> inputContext = new Dictionary<string, Guid>()", span="1789-1789"];
m8_598 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeDeserialize_DictionaryContextContainsGuid_DeserializesItemAsGuid()", file="TypeNameHandlingTests.cs", label="JsonSerializerSettings jsonSerializerSettings = new JsonSerializerSettings()\r\n            {\r\n                Formatting = Formatting.Indented,\r\n                TypeNameHandling = TypeNameHandling.All\r\n            }", span="1792-1796"];
m8_595 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeDeserialize_DictionaryContextContainsGuid_DeserializesItemAsGuid()", file="TypeNameHandlingTests.cs", label="var someValue = new Guid(''a6e986df-fc2c-4906-a1ef-9492388f7833'')", span="1787-1787"];
m8_597 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeDeserialize_DictionaryContextContainsGuid_DeserializesItemAsGuid()", file="TypeNameHandlingTests.cs", label="inputContext.Add(contextKey, someValue)", span="1790-1790"];
m8_599 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeDeserialize_DictionaryContextContainsGuid_DeserializesItemAsGuid()", file="TypeNameHandlingTests.cs", label="string serializedString = JsonConvert.SerializeObject(inputContext, jsonSerializerSettings)", span="1797-1797"];
m8_600 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeDeserialize_DictionaryContextContainsGuid_DeserializesItemAsGuid()", file="TypeNameHandlingTests.cs", label="StringAssert.AreEqual(@''{\r\n  ''''$type'''': ''''System.Collections.Generic.Dictionary`2[[System.String, mscorlib],[System.Guid, mscorlib]], mscorlib'''',\r\n  ''''k1'''': ''''a6e986df-fc2c-4906-a1ef-9492388f7833''''\r\n}'', serializedString)", span="1799-1802"];
m8_601 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeDeserialize_DictionaryContextContainsGuid_DeserializesItemAsGuid()", file="TypeNameHandlingTests.cs", label="var deserializedObject = (Dictionary<string, Guid>)JsonConvert.DeserializeObject(serializedString, jsonSerializerSettings)", span="1804-1804"];
m8_594 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeDeserialize_DictionaryContextContainsGuid_DeserializesItemAsGuid()", file="TypeNameHandlingTests.cs", label="string contextKey = ''k1''", span="1786-1786"];
m8_602 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeDeserialize_DictionaryContextContainsGuid_DeserializesItemAsGuid()", file="TypeNameHandlingTests.cs", label="Assert.AreEqual(someValue, deserializedObject[contextKey])", span="1806-1806"];
m8_603 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeDeserialize_DictionaryContextContainsGuid_DeserializesItemAsGuid()", file="TypeNameHandlingTests.cs", label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeDeserialize_DictionaryContextContainsGuid_DeserializesItemAsGuid()", span="1784-1784"];
m8_682 [cluster="System.Collections.Generic.HashSet<T>.HashSet(System.Collections.Generic.IEnumerable<T>)", file="TypeNameHandlingTests.cs", label="Entry System.Collections.Generic.HashSet<T>.HashSet(System.Collections.Generic.IEnumerable<T>)", span="0-0"];
m8_419 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.MetroBinder.MetroBinder()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.MetroBinder.MetroBinder()", span="1327-1327"];
m8_563 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTestObject.TypeNameHandlingTestObject()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTestObject.TypeNameHandlingTestObject()", span="2308-2308"];
m8_109 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteUtf8Bytes(string, int)", file="TypeNameHandlingTests.cs", label="_largeByteBuffer == null", span="206-206"];
m8_395 [cluster="Unk.AreEquivalent", file="TypeNameHandlingTests.cs", label="Entry Unk.AreEquivalent", span=""];
m8_257 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.NewSerializeUsingCustomBinder()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.NewSerializeUsingCustomBinder()", span="856-856"];
m8_259 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.NewSerializeUsingCustomBinder()", file="TypeNameHandlingTests.cs", label="IList<object> values = new List<object>\r\n            {\r\n                new Customer\r\n                {\r\n                    Name = ''Caroline Customer''\r\n                },\r\n                new Purchase\r\n                {\r\n                    ProductName = ''Elbow Grease'',\r\n                    Price = 5.99m,\r\n                    Quantity = 1\r\n                }\r\n            }", span="860-872"];
m8_260 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.NewSerializeUsingCustomBinder()", file="TypeNameHandlingTests.cs", label="string json = JsonConvert.SerializeObject(values, Formatting.Indented, new JsonSerializerSettings\r\n            {\r\n                TypeNameHandling = TypeNameHandling.Auto,\r\n                SerializationBinder = binder\r\n            })", span="874-878"];
m8_262 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.NewSerializeUsingCustomBinder()", file="TypeNameHandlingTests.cs", label="IList<object> newValues = JsonConvert.DeserializeObject<IList<object>>(json, new JsonSerializerSettings\r\n            {\r\n                TypeNameHandling = TypeNameHandling.Auto,\r\n                SerializationBinder = new NewTypeNameSerializationBinder(''Newtonsoft.Json.Tests.Serialization.{0}, Newtonsoft.Json.Tests'')\r\n            })", span="906-910"];
m8_258 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.NewSerializeUsingCustomBinder()", file="TypeNameHandlingTests.cs", label="NewTypeNameSerializationBinder binder = new NewTypeNameSerializationBinder(''Newtonsoft.Json.Tests.Serialization.{0}, Newtonsoft.Json.Tests'')", span="858-858"];
m8_261 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.NewSerializeUsingCustomBinder()", file="TypeNameHandlingTests.cs", label="StringAssert.AreEqual(@''[\r\n  {\r\n    ''''$type'''': ''''Customer'''',\r\n    ''''Name'''': ''''Caroline Customer''''\r\n  },\r\n  {\r\n    ''''$type'''': ''''Purchase'''',\r\n    ''''ProductName'''': ''''Elbow Grease'''',\r\n    ''''Price'''': 5.99,\r\n    ''''Quantity'''': 1\r\n  }\r\n]'', json)", span="893-904"];
m8_263 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.NewSerializeUsingCustomBinder()", file="TypeNameHandlingTests.cs", label="CustomAssert.IsInstanceOfType(typeof(Customer), newValues[0])", span="912-912"];
m8_264 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.NewSerializeUsingCustomBinder()", file="TypeNameHandlingTests.cs", label="Customer customer = (Customer)newValues[0]", span="913-913"];
m8_266 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.NewSerializeUsingCustomBinder()", file="TypeNameHandlingTests.cs", label="CustomAssert.IsInstanceOfType(typeof(Purchase), newValues[1])", span="916-916"];
m8_267 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.NewSerializeUsingCustomBinder()", file="TypeNameHandlingTests.cs", label="Purchase purchase = (Purchase)newValues[1]", span="917-917"];
m8_265 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.NewSerializeUsingCustomBinder()", file="TypeNameHandlingTests.cs", label="Assert.AreEqual(''Caroline Customer'', customer.Name)", span="914-914"];
m8_268 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.NewSerializeUsingCustomBinder()", file="TypeNameHandlingTests.cs", label="Assert.AreEqual(''Elbow Grease'', purchase.ProductName)", span="918-918"];
m8_269 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.NewSerializeUsingCustomBinder()", file="TypeNameHandlingTests.cs", label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.NewSerializeUsingCustomBinder()", span="856-856"];
m8_421 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.MetroBinder.BindToType(string, string)", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.MetroBinder.BindToType(string, string)", span="1329-1329"];
m8_422 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.MetroBinder.BindToType(string, string)", file="TypeNameHandlingTests.cs", label="return null;", span="1331-1331"];
m8_423 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.MetroBinder.BindToType(string, string)", file="TypeNameHandlingTests.cs", label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.MetroBinder.BindToType(string, string)", span="1329-1329"];
m8_321 [cluster="Unk.IsNotNull", file="TypeNameHandlingTests.cs", label="Entry Unk.IsNotNull", span=""];
m8_319 [cluster="System.Collections.Generic.ICollection<T>.Add(T)", file="TypeNameHandlingTests.cs", label="Entry System.Collections.Generic.ICollection<T>.Add(T)", span="0-0"];
m8_97 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteTypeNameForObjects()", file="TypeNameHandlingTests.cs", label="string json = JsonConvert.SerializeObject(employee, Formatting.Indented, new JsonSerializerSettings\r\n            {\r\n                TypeNameHandling = TypeNameHandling.Objects\r\n            })", span="325-328"];
m8_242 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameSerializationBinder.TypeNameSerializationBinder(string)", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameSerializationBinder.TypeNameSerializationBinder(string)", span="835-835"];
m8_245 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameSerializationBinder.TypeNameSerializationBinder(string)", file="TypeNameHandlingTests.cs", label="TypeFormat = typeFormat", span="837-837"];
m8_246 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameSerializationBinder.TypeNameSerializationBinder(string)", file="TypeNameHandlingTests.cs", label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameSerializationBinder.TypeNameSerializationBinder(string)", span="835-835"];
m8_353 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>.CustomEnumerable()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>.CustomEnumerable()", span="1153-1153"];
m8_359 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>.CustomEnumerable()", file="TypeNameHandlingTests.cs", label="count = 0", span="1155-1155"];
m8_360 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>.CustomEnumerable()", file="TypeNameHandlingTests.cs", label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>.CustomEnumerable()", span="1153-1153"];
m8_655 [cluster="lambda expression", file="TypeNameHandlingTests.cs", label="Entry lambda expression", span="1945-1945"];
m8_657 [cluster="lambda expression", file="TypeNameHandlingTests.cs", label="Exit lambda expression", span="1945-1945"];
m8_656 [cluster="lambda expression", file="TypeNameHandlingTests.cs", label=s, span="1945-1945"];
m8_98 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteTypeNameForObjects()", file="TypeNameHandlingTests.cs", label="StringAssert.AreEqual(@''{\r\n  ''''$id'''': ''''1'''',\r\n  ''''$type'''': '''''' + employeeRef + @'''''',\r\n  ''''Name'''': null,\r\n  ''''Manager'''': null\r\n}'', json)", span="330-335"];
m8_654 [cluster="System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", file="TypeNameHandlingTests.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", span="0-0"];
m8_188 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteObjectTypeNameForProperty()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteObjectTypeNameForProperty()", span="655-655"];
m8_192 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteObjectTypeNameForProperty()", file="TypeNameHandlingTests.cs", label="StringAssert.AreEqual(@''{\r\n  ''''Name'''': ''''Name!'''',\r\n  ''''Value'''': {\r\n    ''''$type'''': '''''' + typeNamePropertyRef + @'''''',\r\n    ''''Name'''': ''''Nested!'''',\r\n    ''''Value'''': null\r\n  }\r\n}'', json)", span="670-677"];
m8_190 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteObjectTypeNameForProperty()", file="TypeNameHandlingTests.cs", label="TypeNameProperty typeNameProperty = new TypeNameProperty\r\n            {\r\n                Name = ''Name!'',\r\n                Value = new TypeNameProperty\r\n                {\r\n                    Name = ''Nested!''\r\n                }\r\n            }", span="659-666"];
m8_194 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteObjectTypeNameForProperty()", file="TypeNameHandlingTests.cs", label="Assert.AreEqual(''Name!'', deserialized.Name)", span="680-680"];
m8_197 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteObjectTypeNameForProperty()", file="TypeNameHandlingTests.cs", label="Assert.AreEqual(''Nested!'', nested.Name)", span="684-684"];
m8_198 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteObjectTypeNameForProperty()", file="TypeNameHandlingTests.cs", label="Assert.AreEqual(null, nested.Value)", span="685-685"];
m8_189 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteObjectTypeNameForProperty()", file="TypeNameHandlingTests.cs", label="string typeNamePropertyRef = ReflectionUtils.GetTypeName(typeof(TypeNameProperty), TypeNameAssemblyFormatHandling.Simple, null)", span="657-657"];
m8_191 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteObjectTypeNameForProperty()", file="TypeNameHandlingTests.cs", label="string json = JsonConvert.SerializeObject(typeNameProperty, Formatting.Indented)", span="668-668"];
m8_193 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteObjectTypeNameForProperty()", file="TypeNameHandlingTests.cs", label="TypeNameProperty deserialized = JsonConvert.DeserializeObject<TypeNameProperty>(json)", span="679-679"];
m8_195 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteObjectTypeNameForProperty()", file="TypeNameHandlingTests.cs", label="CustomAssert.IsInstanceOfType(typeof(TypeNameProperty), deserialized.Value)", span="681-681"];
m8_196 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteObjectTypeNameForProperty()", file="TypeNameHandlingTests.cs", label="TypeNameProperty nested = (TypeNameProperty)deserialized.Value", span="683-683"];
m8_199 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteObjectTypeNameForProperty()", file="TypeNameHandlingTests.cs", label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteObjectTypeNameForProperty()", span="655-655"];
m8_429 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameIntList()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameIntList()", span="1347-1347"];
m8_435 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameIntList()", file="TypeNameHandlingTests.cs", label="StringAssert.AreEqual(@''[\r\n  1,\r\n  2,\r\n  3\r\n]'', json)", span="1355-1359"];
m8_431 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameIntList()", file="TypeNameHandlingTests.cs", label="l.Add(1)", span="1350-1350"];
m8_432 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameIntList()", file="TypeNameHandlingTests.cs", label="l.Add(2)", span="1351-1351"];
m8_433 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameIntList()", file="TypeNameHandlingTests.cs", label="l.Add(3)", span="1352-1352"];
m8_434 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameIntList()", file="TypeNameHandlingTests.cs", label="string json = JsonConvert.SerializeObject(l, Formatting.Indented)", span="1354-1354"];
m8_430 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameIntList()", file="TypeNameHandlingTests.cs", label="TypeNameList<int> l = new TypeNameList<int>()", span="1349-1349"];
m8_436 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameIntList()", file="TypeNameHandlingTests.cs", label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameIntList()", span="1347-1347"];
m8_565 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingDynamic()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingDynamic()", span="1710-1710"];
m8_574 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingDynamic()", file="TypeNameHandlingTests.cs", label="StringAssert.AreEqual(@''{\r\n  ''''Data'''': {\r\n    ''''one'''': {\r\n      ''''$type'''': ''''Newtonsoft.Json.Tests.TestObjects.TestComponentSimple, Newtonsoft.Json.Tests'''',\r\n      ''''MyProperty'''': 1\r\n    },\r\n    ''''two'''': {\r\n      ''''$type'''': ''''Newtonsoft.Json.Tests.Linq.DynamicDictionary, Newtonsoft.Json.Tests'''',\r\n      ''''one'''': {\r\n        ''''MyProperty'''': 2\r\n      }\r\n    }\r\n  }\r\n}'', json)", span="1731-1744"];
m8_568 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingDynamic()", file="TypeNameHandlingTests.cs", label="data.one = new TestComponentSimple\r\n            {\r\n                MyProperty = 1\r\n            }", span="1715-1718"];
m8_570 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingDynamic()", file="TypeNameHandlingTests.cs", label="data2.one = new TestComponentSimple\r\n            {\r\n                MyProperty = 2\r\n            }", span="1721-1724"];
m8_580 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingDynamic()", file="TypeNameHandlingTests.cs", label="Assert.AreEqual(1, c.MyProperty)", span="1752-1752"];
m8_583 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingDynamic()", file="TypeNameHandlingTests.cs", label="Assert.AreEqual(2, (int)o[''MyProperty''])", span="1756-1756"];
m8_589 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingDynamic()", file="TypeNameHandlingTests.cs", label="Assert.AreEqual(2, (int)o[''MyProperty''])", span="1778-1778"];
m8_573 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingDynamic()", file="TypeNameHandlingTests.cs", label="string json = JsonConvert.SerializeObject(d1, Formatting.Indented)", span="1730-1730"];
m8_575 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingDynamic()", file="TypeNameHandlingTests.cs", label="PropertyItemTypeNameHandlingDynamic d2 = JsonConvert.DeserializeObject<PropertyItemTypeNameHandlingDynamic>(json)", span="1746-1746"];
m8_567 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingDynamic()", file="TypeNameHandlingTests.cs", label="dynamic data = new DynamicDictionary()", span="1714-1714"];
m8_569 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingDynamic()", file="TypeNameHandlingTests.cs", label="dynamic data2 = new DynamicDictionary()", span="1720-1720"];
m8_571 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingDynamic()", file="TypeNameHandlingTests.cs", label="data.two = data2", span="1726-1726"];
m8_579 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingDynamic()", file="TypeNameHandlingTests.cs", label="TestComponentSimple c = (TestComponentSimple)data3.one", span="1751-1751"];
m8_581 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingDynamic()", file="TypeNameHandlingTests.cs", label="dynamic data4 = data3.two", span="1754-1754"];
m8_582 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingDynamic()", file="TypeNameHandlingTests.cs", label="JObject o = (JObject)data4.one", span="1755-1755"];
m8_584 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingDynamic()", file="TypeNameHandlingTests.cs", label="json = @''{\r\n  ''''Data'''': {\r\n    ''''one'''': {\r\n      ''''$type'''': ''''Newtonsoft.Json.Tests.TestObjects.TestComponentSimple, Newtonsoft.Json.Tests'''',\r\n      ''''MyProperty'''': 1\r\n    },\r\n    ''''two'''': {\r\n      ''''$type'''': ''''Newtonsoft.Json.Tests.Linq.DynamicDictionary, Newtonsoft.Json.Tests'''',\r\n      ''''one'''': {\r\n        ''''$type'''': ''''Newtonsoft.Json.Tests.TestObjects.TestComponentSimple, Newtonsoft.Json.Tests'''',\r\n        ''''MyProperty'''': 2\r\n      }\r\n    }\r\n  }\r\n}''", span="1758-1772"];
m8_588 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingDynamic()", file="TypeNameHandlingTests.cs", label="o = (JObject)data4.one", span="1777-1777"];
m8_566 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingDynamic()", file="TypeNameHandlingTests.cs", label="PropertyItemTypeNameHandlingDynamic d1 = new PropertyItemTypeNameHandlingDynamic()", span="1712-1712"];
m8_572 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingDynamic()", file="TypeNameHandlingTests.cs", label="d1.Data = (DynamicDictionary)data", span="1728-1728"];
m8_576 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingDynamic()", file="TypeNameHandlingTests.cs", label="Assert.IsNotNull(d2)", span="1747-1747"];
m8_577 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingDynamic()", file="TypeNameHandlingTests.cs", label="Assert.IsNotNull(d2.Data)", span="1748-1748"];
m8_578 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingDynamic()", file="TypeNameHandlingTests.cs", label="dynamic data3 = d2.Data", span="1750-1750"];
m8_585 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingDynamic()", file="TypeNameHandlingTests.cs", label="d2 = JsonConvert.DeserializeObject<PropertyItemTypeNameHandlingDynamic>(json)", span="1774-1774"];
m8_587 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingDynamic()", file="TypeNameHandlingTests.cs", label="data4 = data3.two", span="1776-1776"];
m8_586 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingDynamic()", file="TypeNameHandlingTests.cs", label="data3 = d2.Data", span="1775-1775"];
m8_590 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingDynamic()", file="TypeNameHandlingTests.cs", label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingDynamic()", span="1710-1710"];
m8_418 [cluster="System.Version.Version(int, int, int, int)", file="TypeNameHandlingTests.cs", label="Entry System.Version.Version(int, int, int, int)", span="0-0"];
m8_627 [cluster="Newtonsoft.Json.Tests.Serialization.MyChildList.MyChildList()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.MyChildList.MyChildList()", span="2172-2172"];
m8_653 [cluster="System.Collections.Generic.IEnumerable<TSource>.SelectMany<TSource, TResult>(System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>)", file="TypeNameHandlingTests.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.SelectMany<TSource, TResult>(System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>)", span="0-0"];
m8_616 [cluster="Newtonsoft.Json.Tests.Serialization.MyChild.MyChild()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.MyChild.MyChild()", span="2166-2166"];
m8_639 [cluster="Newtonsoft.Json.Tests.Serialization.ParentParent.ParentParent()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.ParentParent.ParentParent()", span="2140-2140"];
m8_615 [cluster="Newtonsoft.Json.Tests.Serialization.MyParent.MyParent()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.MyParent.MyParent()", span="2156-2156"];
m8_718 [cluster="Newtonsoft.Json.Tests.Serialization.MyParent.MyParent()", file="TypeNameHandlingTests.cs", label="Exit Newtonsoft.Json.Tests.Serialization.MyParent.MyParent()", span="2156-2156"];
m8_698 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeNullableStructProperty_Auto()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeNullableStructProperty_Auto()", span="2075-2075"];
m8_699 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeNullableStructProperty_Auto()", file="TypeNameHandlingTests.cs", label="JsonSerializerSettings serializerSettings = new JsonSerializerSettings\r\n            {\r\n                TypeNameHandling = TypeNameHandling.Auto,\r\n                Formatting = Formatting.Indented\r\n            }", span="2077-2081"];
m8_702 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeNullableStructProperty_Auto()", file="TypeNameHandlingTests.cs", label="StringAssert.AreEqual(''Hello!'', objWithMessage.Message.Value.Value)", span="2090-2090"];
m8_700 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeNullableStructProperty_Auto()", file="TypeNameHandlingTests.cs", label="string json = @''{\r\n  ''''Message'''': {\r\n    ''''Value'''': ''''Hello!''''\r\n  }\r\n}''", span="2083-2087"];
m8_701 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeNullableStructProperty_Auto()", file="TypeNameHandlingTests.cs", label="ObjectWithOptionalMessage objWithMessage = JsonConvert.DeserializeObject<ObjectWithOptionalMessage>(json, serializerSettings)", span="2088-2088"];
m8_703 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeNullableStructProperty_Auto()", file="TypeNameHandlingTests.cs", label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeNullableStructProperty_Auto()", span="2075-2075"];
m8_628 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ParentTypeNameHandlingWithISerializableValues()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ParentTypeNameHandlingWithISerializableValues()", span="1883-1883"];
m8_631 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ParentTypeNameHandlingWithISerializableValues()", file="TypeNameHandlingTests.cs", label="JsonSerializerSettings settings = new JsonSerializerSettings\r\n            {\r\n                DateFormatHandling = DateFormatHandling.IsoDateFormat,\r\n                MissingMemberHandling = MissingMemberHandling.Ignore,\r\n                DefaultValueHandling = DefaultValueHandling.Ignore,\r\n                NullValueHandling = NullValueHandling.Ignore,\r\n                Formatting = Formatting.Indented\r\n            }", span="1895-1902"];
m8_633 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ParentTypeNameHandlingWithISerializableValues()", file="TypeNameHandlingTests.cs", label="StringAssert.AreEqual(@''{\r\n  ''''ParentProp'''': {\r\n    ''''c'''': {\r\n      ''''$type'''': ''''Newtonsoft.Json.Tests.Serialization.MyChild, Newtonsoft.Json.Tests'''',\r\n      ''''p'''': ''''string!''''\r\n    }\r\n  }\r\n}'', json)", span="1906-1913"];
m8_630 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ParentTypeNameHandlingWithISerializableValues()", file="TypeNameHandlingTests.cs", label="pp.ParentProp = new MyParent\r\n            {\r\n                Child = new MyChild\r\n                {\r\n                    MyProperty = ''string!''\r\n                }\r\n            }", span="1887-1893"];
m8_632 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ParentTypeNameHandlingWithISerializableValues()", file="TypeNameHandlingTests.cs", label="string json = JsonConvert.SerializeObject(pp, settings)", span="1904-1904"];
m8_634 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ParentTypeNameHandlingWithISerializableValues()", file="TypeNameHandlingTests.cs", label="ParentParent pp2 = JsonConvert.DeserializeObject<ParentParent>(json, settings)", span="1915-1915"];
m8_637 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ParentTypeNameHandlingWithISerializableValues()", file="TypeNameHandlingTests.cs", label="Assert.AreEqual(''string!'', ((MyChild)p2.Child).MyProperty)", span="1918-1918"];
m8_629 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ParentTypeNameHandlingWithISerializableValues()", file="TypeNameHandlingTests.cs", label="ParentParent pp = new ParentParent()", span="1885-1885"];
m8_635 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ParentTypeNameHandlingWithISerializableValues()", file="TypeNameHandlingTests.cs", label="MyParent p2 = pp2.ParentProp", span="1916-1916"];
m8_636 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ParentTypeNameHandlingWithISerializableValues()", file="TypeNameHandlingTests.cs", label="CustomAssert.IsInstanceOfType(typeof(MyChild), p2.Child)", span="1917-1917"];
m8_638 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ParentTypeNameHandlingWithISerializableValues()", file="TypeNameHandlingTests.cs", label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ParentTypeNameHandlingWithISerializableValues()", span="1883-1883"];
m8_735 [cluster="object.GetHashCode()", file="TypeNameHandlingTests.cs", label="Entry object.GetHashCode()", span="0-0"];
m8_330 [cluster="Newtonsoft.Json.Tests.Serialization.Message.Message()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.Message.Message()", span="2181-2181"];
m8_640 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ListOfStackWithFullAssemblyName()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ListOfStackWithFullAssemblyName()", span="1923-1923"];
m8_641 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ListOfStackWithFullAssemblyName()", file="TypeNameHandlingTests.cs", label="var input = new List<Stack<string>>()", span="1925-1925"];
m8_642 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ListOfStackWithFullAssemblyName()", file="TypeNameHandlingTests.cs", label="input.Add(new Stack<string>(new List<string> { ''One'', ''Two'', ''Three'' }))", span="1927-1927"];
m8_643 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ListOfStackWithFullAssemblyName()", file="TypeNameHandlingTests.cs", label="input.Add(new Stack<string>(new List<string> { ''Four'', ''Five'', ''Six'' }))", span="1928-1928"];
m8_644 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ListOfStackWithFullAssemblyName()", file="TypeNameHandlingTests.cs", label="input.Add(new Stack<string>(new List<string> { ''Seven'', ''Eight'', ''Nine'' }))", span="1929-1929"];
m8_645 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ListOfStackWithFullAssemblyName()", file="TypeNameHandlingTests.cs", label="string serialized = JsonConvert.SerializeObject(input,\r\n                Newtonsoft.Json.Formatting.Indented,\r\n                new JsonSerializerSettings\r\n                {\r\n                    TypeNameHandling = TypeNameHandling.All,\r\n#pragma warning disable 618\r\n                    TypeNameAssemblyFormat = FormatterAssemblyStyle.Full // TypeNameHandling.Auto will work\r\n#pragma warning restore 618\r\n                })", span="1931-1939"];
m8_646 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ListOfStackWithFullAssemblyName()", file="TypeNameHandlingTests.cs", label="var output = JsonConvert.DeserializeObject<List<Stack<string>>>(serialized,\r\n                new JsonSerializerSettings { TypeNameHandling = TypeNameHandling.All }\r\n                )", span="1941-1943"];
m8_647 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ListOfStackWithFullAssemblyName()", file="TypeNameHandlingTests.cs", label="List<string> strings = output.SelectMany(s => s).ToList()", span="1945-1945"];
m8_648 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ListOfStackWithFullAssemblyName()", file="TypeNameHandlingTests.cs", label="Assert.AreEqual(9, strings.Count)", span="1947-1947"];
m8_649 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ListOfStackWithFullAssemblyName()", file="TypeNameHandlingTests.cs", label="Assert.AreEqual(''One'', strings[0])", span="1948-1948"];
m8_650 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ListOfStackWithFullAssemblyName()", file="TypeNameHandlingTests.cs", label="Assert.AreEqual(''Nine'', strings[8])", span="1949-1949"];
m8_651 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ListOfStackWithFullAssemblyName()", file="TypeNameHandlingTests.cs", label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ListOfStackWithFullAssemblyName()", span="1923-1923"];
m8_526 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedDictionaries()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedDictionaries()", span="1576-1576"];
m8_527 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedDictionaries()", file="TypeNameHandlingTests.cs", label="PropertyItemTypeNameHandlingDictionary c1 = new PropertyItemTypeNameHandlingDictionary()\r\n            {\r\n                Data = new Dictionary<string, object>\r\n                {\r\n                    {\r\n                        ''one'', new TestComponentSimple { MyProperty = 1 }\r\n                    },\r\n                    {\r\n                        ''two'', new Dictionary<string, object>\r\n                        {\r\n                            {\r\n                                ''one'', new Dictionary<string, object>\r\n                                {\r\n                                    { ''one'', 1 }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }", span="1578-1597"];
m8_528 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedDictionaries()", file="TypeNameHandlingTests.cs", label="string json = JsonConvert.SerializeObject(c1, Formatting.Indented)", span="1599-1599"];
m8_529 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedDictionaries()", file="TypeNameHandlingTests.cs", label="StringAssert.AreEqual(@''{\r\n  ''''Data'''': {\r\n    ''''one'''': {\r\n      ''''$type'''': ''''Newtonsoft.Json.Tests.TestObjects.TestComponentSimple, Newtonsoft.Json.Tests'''',\r\n      ''''MyProperty'''': 1\r\n    },\r\n    ''''two'''': {\r\n      ''''$type'''': ''''System.Collections.Generic.Dictionary`2[[System.String, mscorlib],[System.Object, mscorlib]], mscorlib'''',\r\n      ''''one'''': {\r\n        ''''one'''': 1\r\n      }\r\n    }\r\n  }\r\n}'', json)", span="1600-1613"];
m8_530 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedDictionaries()", file="TypeNameHandlingTests.cs", label="PropertyItemTypeNameHandlingDictionary c2 = JsonConvert.DeserializeObject<PropertyItemTypeNameHandlingDictionary>(json)", span="1615-1615"];
m8_531 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedDictionaries()", file="TypeNameHandlingTests.cs", label="Assert.AreEqual(2, c2.Data.Count)", span="1616-1616"];
m8_538 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedDictionaries()", file="TypeNameHandlingTests.cs", label="Assert.AreEqual(2, c2.Data.Count)", span="1640-1640"];
m8_544 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedDictionaries()", file="TypeNameHandlingTests.cs", label="Assert.AreEqual(1, (int)o[''MyProperty''])", span="1648-1648"];
m8_532 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedDictionaries()", file="TypeNameHandlingTests.cs", label="CustomAssert.IsInstanceOfType(typeof(TestComponentSimple), c2.Data[''one''])", span="1618-1618"];
m8_533 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedDictionaries()", file="TypeNameHandlingTests.cs", label="CustomAssert.IsInstanceOfType(typeof(Dictionary<string, object>), c2.Data[''two''])", span="1619-1619"];
m8_534 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedDictionaries()", file="TypeNameHandlingTests.cs", label="Dictionary<string, object> c = (Dictionary<string, object>)c2.Data[''two'']", span="1620-1620"];
m8_537 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedDictionaries()", file="TypeNameHandlingTests.cs", label="c2 = JsonConvert.DeserializeObject<PropertyItemTypeNameHandlingDictionary>(json)", span="1639-1639"];
m8_539 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedDictionaries()", file="TypeNameHandlingTests.cs", label="CustomAssert.IsInstanceOfType(typeof(TestComponentSimple), c2.Data[''one''])", span="1642-1642"];
m8_543 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedDictionaries()", file="TypeNameHandlingTests.cs", label="JObject o = (JObject)c[''one'']", span="1647-1647"];
m8_535 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedDictionaries()", file="TypeNameHandlingTests.cs", label="CustomAssert.IsInstanceOfType(typeof(JObject), c[''one''])", span="1621-1621"];
m8_540 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedDictionaries()", file="TypeNameHandlingTests.cs", label="CustomAssert.IsInstanceOfType(typeof(Dictionary<string, object>), c2.Data[''two''])", span="1643-1643"];
m8_542 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedDictionaries()", file="TypeNameHandlingTests.cs", label="CustomAssert.IsInstanceOfType(typeof(JObject), c[''one''])", span="1645-1645"];
m8_536 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedDictionaries()", file="TypeNameHandlingTests.cs", label="json = @''{\r\n  ''''Data'''': {\r\n    ''''one'''': {\r\n      ''''$type'''': ''''Newtonsoft.Json.Tests.TestObjects.TestComponentSimple, Newtonsoft.Json.Tests'''',\r\n      ''''MyProperty'''': 1\r\n    },\r\n    ''''two'''': {\r\n      ''''$type'''': ''''System.Collections.Generic.Dictionary`2[[System.String, mscorlib],[System.Object, mscorlib]], mscorlib'''',\r\n      ''''one'''': {\r\n        ''''$type'''': ''''Newtonsoft.Json.Tests.TestObjects.TestComponentSimple, Newtonsoft.Json.Tests'''',\r\n        ''''MyProperty'''': 1\r\n      }\r\n    }\r\n  }\r\n}''", span="1623-1637"];
m8_541 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedDictionaries()", file="TypeNameHandlingTests.cs", label="c = (Dictionary<string, object>)c2.Data[''two'']", span="1644-1644"];
m8_545 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedDictionaries()", file="TypeNameHandlingTests.cs", label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedDictionaries()", span="1576-1576"];
m8_547 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingObject()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingObject()", span="1652-1652"];
m8_548 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingObject()", file="TypeNameHandlingTests.cs", label="PropertyItemTypeNameHandlingObject o1 = new PropertyItemTypeNameHandlingObject\r\n            {\r\n                Data = new TypeNameHandlingTestObject\r\n                {\r\n                    Prop1 = new List<object>\r\n                    {\r\n                        new TestComponentSimple\r\n                        {\r\n                            MyProperty = 1\r\n                        }\r\n                    },\r\n                    Prop2 = new TestComponentSimple\r\n                    {\r\n                        MyProperty = 1\r\n                    },\r\n                    Prop3 = 3,\r\n                    Prop4 = new JObject()\r\n                }\r\n            }", span="1654-1672"];
m8_549 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingObject()", file="TypeNameHandlingTests.cs", label="string json = JsonConvert.SerializeObject(o1, Formatting.Indented)", span="1674-1674"];
m8_550 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingObject()", file="TypeNameHandlingTests.cs", label="StringAssert.AreEqual(@''{\r\n  ''''Data'''': {\r\n    ''''Prop1'''': {\r\n      ''''$type'''': ''''System.Collections.Generic.List`1[[System.Object, mscorlib]], mscorlib'''',\r\n      ''''$values'''': [\r\n        {\r\n          ''''MyProperty'''': 1\r\n        }\r\n      ]\r\n    },\r\n    ''''Prop2'''': {\r\n      ''''$type'''': ''''Newtonsoft.Json.Tests.TestObjects.TestComponentSimple, Newtonsoft.Json.Tests'''',\r\n      ''''MyProperty'''': 1\r\n    },\r\n    ''''Prop3'''': 3,\r\n    ''''Prop4'''': {}\r\n  }\r\n}'', json)", span="1675-1692"];
m8_551 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingObject()", file="TypeNameHandlingTests.cs", label="PropertyItemTypeNameHandlingObject o2 = JsonConvert.DeserializeObject<PropertyItemTypeNameHandlingObject>(json)", span="1694-1694"];
m8_560 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingObject()", file="TypeNameHandlingTests.cs", label="Assert.AreEqual(1, (int)j[''MyProperty''])", span="1705-1705"];
m8_552 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingObject()", file="TypeNameHandlingTests.cs", label="Assert.IsNotNull(o2)", span="1695-1695"];
m8_553 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingObject()", file="TypeNameHandlingTests.cs", label="Assert.IsNotNull(o2.Data)", span="1696-1696"];
m8_554 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingObject()", file="TypeNameHandlingTests.cs", label="CustomAssert.IsInstanceOfType(typeof(List<object>), o2.Data.Prop1)", span="1698-1698"];
m8_555 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingObject()", file="TypeNameHandlingTests.cs", label="CustomAssert.IsInstanceOfType(typeof(TestComponentSimple), o2.Data.Prop2)", span="1699-1699"];
m8_556 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingObject()", file="TypeNameHandlingTests.cs", label="CustomAssert.IsInstanceOfType(typeof(long), o2.Data.Prop3)", span="1700-1700"];
m8_557 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingObject()", file="TypeNameHandlingTests.cs", label="CustomAssert.IsInstanceOfType(typeof(JObject), o2.Data.Prop4)", span="1701-1701"];
m8_558 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingObject()", file="TypeNameHandlingTests.cs", label="List<object> o = (List<object>)o2.Data.Prop1", span="1703-1703"];
m8_559 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingObject()", file="TypeNameHandlingTests.cs", label="JObject j = (JObject)o[0]", span="1704-1704"];
m8_561 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingObject()", file="TypeNameHandlingTests.cs", label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingObject()", span="1652-1652"];
m8_729 [cluster="object.Equals(object, object)", file="TypeNameHandlingTests.cs", label="Entry object.Equals(object, object)", span="0-0"];
m8_201 [cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting)", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting)", span="537-537"];
m8_690 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeNullableStructProperty_Auto()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeNullableStructProperty_Auto()", span="2055-2055"];
m8_691 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeNullableStructProperty_Auto()", file="TypeNameHandlingTests.cs", label="JsonSerializerSettings serializerSettings = new JsonSerializerSettings\r\n            {\r\n                TypeNameHandling = TypeNameHandling.Auto,\r\n                Formatting = Formatting.Indented\r\n            }", span="2057-2061"];
m8_694 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeNullableStructProperty_Auto()", file="TypeNameHandlingTests.cs", label="StringAssert.AreEqual(@''{\r\n  ''''Message'''': {\r\n    ''''Value'''': ''''Hello!''''\r\n  }\r\n}'', json)", span="2067-2071"];
m8_692 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeNullableStructProperty_Auto()", file="TypeNameHandlingTests.cs", label="ObjectWithOptionalMessage objWithMessage = new ObjectWithOptionalMessage(new Message2(''Hello!''))", span="2063-2063"];
m8_693 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeNullableStructProperty_Auto()", file="TypeNameHandlingTests.cs", label="string json = JsonConvert.SerializeObject(objWithMessage, serializerSettings)", span="2065-2065"];
m8_695 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeNullableStructProperty_Auto()", file="TypeNameHandlingTests.cs", label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeNullableStructProperty_Auto()", span="2055-2055"];
m8_403 [cluster="Newtonsoft.Json.Tests.Serialization.Example.Example(string)", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.Example.Example(string)", span="2245-2245"];
m8_736 [cluster="Newtonsoft.Json.Tests.Serialization.Example.Example(string)", file="TypeNameHandlingTests.cs", label="Name = name", span="2247-2247"];
m8_737 [cluster="Newtonsoft.Json.Tests.Serialization.Example.Example(string)", file="TypeNameHandlingTests.cs", label="Exit Newtonsoft.Json.Tests.Serialization.Example.Example(string)", span="2245-2245"];
m8_277 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.NewTypeNameSerializationBinder.BindToType(string, string)", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.NewTypeNameSerializationBinder.BindToType(string, string)", span="936-936"];
m8_278 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.NewTypeNameSerializationBinder.BindToType(string, string)", file="TypeNameHandlingTests.cs", label="string resolvedTypeName = string.Format(TypeFormat, typeName)", span="938-938"];
m8_279 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.NewTypeNameSerializationBinder.BindToType(string, string)", file="TypeNameHandlingTests.cs", label="return Type.GetType(resolvedTypeName, true);", span="940-940"];
m8_280 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.NewTypeNameSerializationBinder.BindToType(string, string)", file="TypeNameHandlingTests.cs", label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.NewTypeNameSerializationBinder.BindToType(string, string)", span="936-936"];
m8_755 [cluster="string.Equals(string)", file="TypeNameHandlingTests.cs", label="Entry string.Equals(string)", span="0-0"];
m8_93 [cluster="System.IO.BinaryWriter.Write(double)", file="TypeNameHandlingTests.cs", label="Entry System.IO.BinaryWriter.Write(double)", span="0-0"];
m8_455 [cluster="Newtonsoft.Json.Tests.TestObjects.TestComponentSimple.TestComponentSimple()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.TestObjects.TestComponentSimple.TestComponentSimple()", span="33-33"];
m8_354 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>.CustomEnumerable(T, Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>)", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>.CustomEnumerable(T, Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>)", span="1146-1146"];
m8_355 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>.CustomEnumerable(T, Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>)", file="TypeNameHandlingTests.cs", label="this.value = value", span="1148-1148"];
m8_356 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>.CustomEnumerable(T, Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>)", file="TypeNameHandlingTests.cs", label="this.next = next", span="1149-1149"];
m8_357 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>.CustomEnumerable(T, Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>)", file="TypeNameHandlingTests.cs", label="count = this.next.count + 1", span="1150-1150"];
m8_358 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>.CustomEnumerable(T, Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>)", file="TypeNameHandlingTests.cs", label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>.CustomEnumerable(T, Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>)", span="1146-1146"];
m8_730 [cluster="Newtonsoft.Json.Tests.Serialization.SerializableWrapper.GetHashCode()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.SerializableWrapper.GetHashCode()", span="2224-2224"];
m8_731 [cluster="Newtonsoft.Json.Tests.Serialization.SerializableWrapper.GetHashCode()", file="TypeNameHandlingTests.cs", label="Content == null", span="2226-2226"];
m8_732 [cluster="Newtonsoft.Json.Tests.Serialization.SerializableWrapper.GetHashCode()", file="TypeNameHandlingTests.cs", label="return 0;", span="2228-2228"];
m8_733 [cluster="Newtonsoft.Json.Tests.Serialization.SerializableWrapper.GetHashCode()", file="TypeNameHandlingTests.cs", label="return Content.GetHashCode();", span="2231-2231"];
m8_734 [cluster="Newtonsoft.Json.Tests.Serialization.SerializableWrapper.GetHashCode()", file="TypeNameHandlingTests.cs", label="Exit Newtonsoft.Json.Tests.Serialization.SerializableWrapper.GetHashCode()", span="2224-2224"];
m8_439 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameComponentList()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameComponentList()", span="1363-1363"];
m8_447 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameComponentList()", file="TypeNameHandlingTests.cs", label="StringAssert.AreEqual(@''[\r\n  {\r\n    ''''$type'''': ''''Newtonsoft.Json.Tests.TestObjects.TestComponentSimple, Newtonsoft.Json.Tests'''',\r\n    ''''MyProperty'''': 0\r\n  },\r\n  {\r\n    ''''$type'''': ''''Newtonsoft.Json.Tests.TestObjects.Organization.Employee, Newtonsoft.Json.Tests'''',\r\n    ''''FirstName'''': null,\r\n    ''''LastName'''': null,\r\n    ''''BirthDate'''': ''''2000-12-12T12:12:12Z'''',\r\n    ''''Department'''': ''''Department!'''',\r\n    ''''JobTitle'''': null\r\n  },\r\n  ''''String!'''',\r\n  9223372036854775807\r\n]'', json)", span="1378-1393"];
m8_443 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameComponentList()", file="TypeNameHandlingTests.cs", label="l.Add(new Employee\r\n            {\r\n                BirthDate = new DateTime(2000, 12, 12, 12, 12, 12, DateTimeKind.Utc),\r\n                Department = ''Department!''\r\n            })", span="1369-1373"];
m8_440 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameComponentList()", file="TypeNameHandlingTests.cs", label="var c1 = new TestComponentSimple()", span="1365-1365"];
m8_442 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameComponentList()", file="TypeNameHandlingTests.cs", label="l.Add(c1)", span="1368-1368"];
m8_444 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameComponentList()", file="TypeNameHandlingTests.cs", label="l.Add(''String!'')", span="1374-1374"];
m8_445 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameComponentList()", file="TypeNameHandlingTests.cs", label="l.Add(long.MaxValue)", span="1375-1375"];
m8_449 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameComponentList()", file="TypeNameHandlingTests.cs", label="Assert.AreEqual(4, l2.Count)", span="1396-1396"];
m8_446 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameComponentList()", file="TypeNameHandlingTests.cs", label="string json = JsonConvert.SerializeObject(l, Formatting.Indented)", span="1377-1377"];
m8_448 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameComponentList()", file="TypeNameHandlingTests.cs", label="TypeNameList<object> l2 = JsonConvert.DeserializeObject<TypeNameList<object>>(json)", span="1395-1395"];
m8_441 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameComponentList()", file="TypeNameHandlingTests.cs", label="TypeNameList<object> l = new TypeNameList<object>()", span="1367-1367"];
m8_450 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameComponentList()", file="TypeNameHandlingTests.cs", label="CustomAssert.IsInstanceOfType(typeof(TestComponentSimple), l2[0])", span="1398-1398"];
m8_451 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameComponentList()", file="TypeNameHandlingTests.cs", label="CustomAssert.IsInstanceOfType(typeof(Employee), l2[1])", span="1399-1399"];
m8_452 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameComponentList()", file="TypeNameHandlingTests.cs", label="CustomAssert.IsInstanceOfType(typeof(string), l2[2])", span="1400-1400"];
m8_453 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameComponentList()", file="TypeNameHandlingTests.cs", label="CustomAssert.IsInstanceOfType(typeof(long), l2[3])", span="1401-1401"];
m8_454 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameComponentList()", file="TypeNameHandlingTests.cs", label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameComponentList()", span="1363-1363"];
m8_738 [cluster="Newtonsoft.Json.Tests.Serialization.Example.Example(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.Example.Example(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)", span="2250-2250"];
m8_739 [cluster="Newtonsoft.Json.Tests.Serialization.Example.Example(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)", file="TypeNameHandlingTests.cs", label="Name = info.GetString(''name'')", span="2252-2252"];
m8_740 [cluster="Newtonsoft.Json.Tests.Serialization.Example.Example(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)", file="TypeNameHandlingTests.cs", label="Exit Newtonsoft.Json.Tests.Serialization.Example.Example(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)", span="2250-2250"];
m8_714 [cluster="Newtonsoft.Json.Tests.Serialization.MyParent.MyParent(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.MyParent.MyParent(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)", span="2151-2151"];
m8_715 [cluster="Newtonsoft.Json.Tests.Serialization.MyParent.MyParent(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)", file="TypeNameHandlingTests.cs", label="Child = (ISomeBase)info.GetValue(''c'', typeof(ISomeBase))", span="2153-2153"];
m8_716 [cluster="Newtonsoft.Json.Tests.Serialization.MyParent.MyParent(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)", file="TypeNameHandlingTests.cs", label="Exit Newtonsoft.Json.Tests.Serialization.MyParent.MyParent(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)", span="2151-2151"];
m8_251 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameSerializationBinder.BindToType(string, string)", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameSerializationBinder.BindToType(string, string)", span="846-846"];
m8_252 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameSerializationBinder.BindToType(string, string)", file="TypeNameHandlingTests.cs", label="string resolvedTypeName = string.Format(TypeFormat, typeName)", span="848-848"];
m8_253 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameSerializationBinder.BindToType(string, string)", file="TypeNameHandlingTests.cs", label="return Type.GetType(resolvedTypeName, true);", span="850-850"];
m8_254 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameSerializationBinder.BindToType(string, string)", file="TypeNameHandlingTests.cs", label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameSerializationBinder.BindToType(string, string)", span="846-846"];
m8_683 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeComplexGenericDictionary_Full()", file="TypeNameHandlingTests.cs", label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeComplexGenericDictionary_Full()", span="2032-2032"];
m8_685 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeComplexGenericDictionary_Full()", file="TypeNameHandlingTests.cs", label="Dictionary<int, HashSet<string>> dictionary = new Dictionary<int, HashSet<string>>\r\n            {\r\n                { 1, new HashSet<string>(new[] { ''test'' }) },\r\n            }", span="2042-2045"];
m8_684 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeComplexGenericDictionary_Full()", file="TypeNameHandlingTests.cs", label="JsonSerializerSettings serializerSettings = new JsonSerializerSettings\r\n            {\r\n                TypeNameHandling = TypeNameHandling.All,\r\n#pragma warning disable 618\r\n                TypeNameAssemblyFormat = FormatterAssemblyStyle.Full\r\n#pragma warning restore 618\r\n            }", span="2034-2040"];
m8_686 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeComplexGenericDictionary_Full()", file="TypeNameHandlingTests.cs", label="string obtainedJson = JsonConvert.SerializeObject(dictionary, serializerSettings)", span="2047-2047"];
m8_687 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeComplexGenericDictionary_Full()", file="TypeNameHandlingTests.cs", label="Dictionary<int, HashSet<string>> obtainedDictionary = (Dictionary<int, HashSet<string>>)JsonConvert.DeserializeObject(obtainedJson, serializerSettings)", span="2049-2049"];
m8_688 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeComplexGenericDictionary_Full()", file="TypeNameHandlingTests.cs", label="Assert.IsNotNull(obtainedDictionary)", span="2051-2051"];
m8_689 [cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeComplexGenericDictionary_Full()", file="TypeNameHandlingTests.cs", label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeComplexGenericDictionary_Full()", span="2032-2032"];
m8_775 [file="TypeNameHandlingTests.cs", label="Newtonsoft.Json.Tests.Serialization.DataType", span=""];
m8_772 [file="TypeNameHandlingTests.cs", label="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests", span=""];
m8_767 [file="TypeNameHandlingTests.cs", label=json, span=""];
m8_769 [file="TypeNameHandlingTests.cs", label="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameSerializationBinder", span=""];
m8_770 [file="TypeNameHandlingTests.cs", label="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.NewTypeNameSerializationBinder", span=""];
m8_766 [file="TypeNameHandlingTests.cs", label=sb, span=""];
m8_778 [file="TypeNameHandlingTests.cs", label="Newtonsoft.Json.Tests.Serialization.Example", span=""];
m8_771 [file="TypeNameHandlingTests.cs", label="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>", span=""];
m8_774 [file="TypeNameHandlingTests.cs", label="Newtonsoft.Json.Tests.Serialization.ObjectWithOptionalMessage", span=""];
m8_773 [file="TypeNameHandlingTests.cs", label="out Newtonsoft.Json.Tests.Serialization.Message2", span=""];
m8_777 [file="TypeNameHandlingTests.cs", label="Newtonsoft.Json.Tests.Serialization.SerializableWrapper", span=""];
m8_776 [file="TypeNameHandlingTests.cs", label="Newtonsoft.Json.Tests.Serialization.MyParent", span=""];
m9_39 [cluster="Unk.AreEqual", file="VersionConverterTests.cs", label="Entry Unk.AreEqual", span=""];
m9_49 [cluster="Newtonsoft.Json.Tests.Converters.VersionConverterTests.RoundtripImplicitConverter()", file="VersionConverterTests.cs", label="Entry Newtonsoft.Json.Tests.Converters.VersionConverterTests.RoundtripImplicitConverter()", span="118-118"];
m9_50 [cluster="Newtonsoft.Json.Tests.Converters.VersionConverterTests.RoundtripImplicitConverter()", file="VersionConverterTests.cs", label="var version = new Version(1, 0, 0, 0)", span="120-120"];
m9_51 [cluster="Newtonsoft.Json.Tests.Converters.VersionConverterTests.RoundtripImplicitConverter()", file="VersionConverterTests.cs", label="string reportJSON = JsonConvert.SerializeObject(version)", span="121-121"];
m9_52 [cluster="Newtonsoft.Json.Tests.Converters.VersionConverterTests.RoundtripImplicitConverter()", file="VersionConverterTests.cs", label="Version report2 = JsonConvert.DeserializeObject<Version>(reportJSON)", span="124-124"];
m9_54 [cluster="Newtonsoft.Json.Tests.Converters.VersionConverterTests.RoundtripImplicitConverter()", file="VersionConverterTests.cs", label="Assert.AreEqual(reportJSON, reportJSON2)", span="127-127"];
m9_53 [cluster="Newtonsoft.Json.Tests.Converters.VersionConverterTests.RoundtripImplicitConverter()", file="VersionConverterTests.cs", label="string reportJSON2 = JsonConvert.SerializeObject(report2)", span="125-125"];
m9_55 [cluster="Newtonsoft.Json.Tests.Converters.VersionConverterTests.RoundtripImplicitConverter()", file="VersionConverterTests.cs", label="Exit Newtonsoft.Json.Tests.Converters.VersionConverterTests.RoundtripImplicitConverter()", span="118-118"];
m9_38 [cluster="Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string, params Newtonsoft.Json.JsonConverter[])", file="VersionConverterTests.cs", label="Entry Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string, params Newtonsoft.Json.JsonConverter[])", span="751-751"];
m9_18 [cluster="Newtonsoft.Json.Tests.StringAssert.AreEqual(string, string)", file="VersionConverterTests.cs", label="Entry Newtonsoft.Json.Tests.StringAssert.AreEqual(string, string)", span="328-328"];
m9_16 [cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting, params Newtonsoft.Json.JsonConverter[])", file="VersionConverterTests.cs", label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting, params Newtonsoft.Json.JsonConverter[])", span="564-564"];
m9_0 [cluster="Newtonsoft.Json.Tests.Converters.VersionClass.VersionClass(string, string)", file="VersionConverterTests.cs", label="Entry Newtonsoft.Json.Tests.Converters.VersionClass.VersionClass(string, string)", span="40-40"];
m9_1 [cluster="Newtonsoft.Json.Tests.Converters.VersionClass.VersionClass(string, string)", file="VersionConverterTests.cs", label="StringProperty1 = ''StringProperty1''", span="42-42"];
m9_2 [cluster="Newtonsoft.Json.Tests.Converters.VersionClass.VersionClass(string, string)", file="VersionConverterTests.cs", label="Version1 = new Version(version1)", span="43-43"];
m9_3 [cluster="Newtonsoft.Json.Tests.Converters.VersionClass.VersionClass(string, string)", file="VersionConverterTests.cs", label="Version2 = new Version(version2)", span="44-44"];
m9_4 [cluster="Newtonsoft.Json.Tests.Converters.VersionClass.VersionClass(string, string)", file="VersionConverterTests.cs", label="StringProperty2 = ''StringProperty2''", span="45-45"];
m9_5 [cluster="Newtonsoft.Json.Tests.Converters.VersionClass.VersionClass(string, string)", file="VersionConverterTests.cs", label="Exit Newtonsoft.Json.Tests.Converters.VersionClass.VersionClass(string, string)", span="40-40"];
m9_7 [cluster="Newtonsoft.Json.Tests.Converters.VersionClass.VersionClass()", file="VersionConverterTests.cs", label="Entry Newtonsoft.Json.Tests.Converters.VersionClass.VersionClass()", span="48-48"];
m9_8 [cluster="Newtonsoft.Json.Tests.Converters.VersionClass.VersionClass()", file="VersionConverterTests.cs", label="Exit Newtonsoft.Json.Tests.Converters.VersionClass.VersionClass()", span="48-48"];
m9_17 [cluster="string.Format(string, object, object)", file="VersionConverterTests.cs", label="Entry string.Format(string, object, object)", span="0-0"];
m9_19 [cluster="Newtonsoft.Json.Tests.Converters.VersionConverterTests.SerializeVersionClass()", file="VersionConverterTests.cs", label="Entry Newtonsoft.Json.Tests.Converters.VersionConverterTests.SerializeVersionClass()", span="78-78"];
m9_20 [cluster="Newtonsoft.Json.Tests.Converters.VersionConverterTests.SerializeVersionClass()", color=green, community=0, file="VersionConverterTests.cs", label="SerializeVersionClass(''1.0.0.0'', ''2.0.0.0'')", prediction=25, span="80-80"];
m9_21 [cluster="Newtonsoft.Json.Tests.Converters.VersionConverterTests.SerializeVersionClass()", color=green, community=0, file="VersionConverterTests.cs", label="SerializeVersionClass(''1.2.0.0'', ''2.3.0.0'')", prediction=25, span="81-81"];
m9_22 [cluster="Newtonsoft.Json.Tests.Converters.VersionConverterTests.SerializeVersionClass()", color=green, community=0, file="VersionConverterTests.cs", label="SerializeVersionClass(''1.2.3.0'', ''2.3.4.0'')", prediction=25, span="82-82"];
m9_23 [cluster="Newtonsoft.Json.Tests.Converters.VersionConverterTests.SerializeVersionClass()", color=green, community=0, file="VersionConverterTests.cs", label="SerializeVersionClass(''1.2.3.4'', ''2.3.4.5'')", prediction=25, span="83-83"];
m9_24 [cluster="Newtonsoft.Json.Tests.Converters.VersionConverterTests.SerializeVersionClass()", color=green, community=0, file="VersionConverterTests.cs", label="SerializeVersionClass(''1.2'', ''2.3'')", prediction=25, span="85-85"];
m9_25 [cluster="Newtonsoft.Json.Tests.Converters.VersionConverterTests.SerializeVersionClass()", color=green, community=0, file="VersionConverterTests.cs", label="SerializeVersionClass(''1.2.3'', ''2.3.4'')", prediction=25, span="86-86"];
m9_26 [cluster="Newtonsoft.Json.Tests.Converters.VersionConverterTests.SerializeVersionClass()", color=green, community=0, file="VersionConverterTests.cs", label="SerializeVersionClass(''1.2.3.4'', ''2.3.4.5'')", prediction=25, span="87-87"];
m9_27 [cluster="Newtonsoft.Json.Tests.Converters.VersionConverterTests.SerializeVersionClass()", file="VersionConverterTests.cs", label="Exit Newtonsoft.Json.Tests.Converters.VersionConverterTests.SerializeVersionClass()", span="78-78"];
m9_40 [cluster="Newtonsoft.Json.Tests.Converters.VersionConverterTests.DeserializeVersionClass()", file="VersionConverterTests.cs", label="Entry Newtonsoft.Json.Tests.Converters.VersionConverterTests.DeserializeVersionClass()", span="105-105"];
m9_44 [cluster="Newtonsoft.Json.Tests.Converters.VersionConverterTests.DeserializeVersionClass()", color=green, community=0, file="VersionConverterTests.cs", label="DeserializeVersionClass(''1.2.3.4'', ''2.3.4.5'')", prediction=25, span="110-110"];
m9_45 [cluster="Newtonsoft.Json.Tests.Converters.VersionConverterTests.DeserializeVersionClass()", color=green, community=0, file="VersionConverterTests.cs", label="DeserializeVersionClass(''1.2'', ''2.3'')", prediction=25, span="112-112"];
m9_46 [cluster="Newtonsoft.Json.Tests.Converters.VersionConverterTests.DeserializeVersionClass()", color=green, community=0, file="VersionConverterTests.cs", label="DeserializeVersionClass(''1.2.3'', ''2.3.4'')", prediction=25, span="113-113"];
m9_47 [cluster="Newtonsoft.Json.Tests.Converters.VersionConverterTests.DeserializeVersionClass()", color=green, community=1, file="VersionConverterTests.cs", label="DeserializeVersionClass(''1.2.3.4'', ''2.3.4.5'')", prediction=25, span="114-114"];
m9_48 [cluster="Newtonsoft.Json.Tests.Converters.VersionConverterTests.DeserializeVersionClass()", file="VersionConverterTests.cs", label="Exit Newtonsoft.Json.Tests.Converters.VersionConverterTests.DeserializeVersionClass()", span="105-105"];
m9_56 [cluster="System.Version.Version(int, int, int, int)", file="VersionConverterTests.cs", label="Entry System.Version.Version(int, int, int, int)", span="0-0"];
m9_57 [cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object)", file="VersionConverterTests.cs", label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object)", span="524-524"];
m9_58 [cluster="Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string)", file="VersionConverterTests.cs", label="Entry Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string)", span="703-703"];
m9_6 [cluster="System.Version.Version(string)", file="VersionConverterTests.cs", label="Entry System.Version.Version(string)", span="0-0"];
m9_9 [cluster="Newtonsoft.Json.Tests.Converters.VersionConverterTests.SerializeVersionClass(string, string)", file="VersionConverterTests.cs", label="Entry Newtonsoft.Json.Tests.Converters.VersionConverterTests.SerializeVersionClass(string, string)", span="61-61"];
m9_10 [cluster="Newtonsoft.Json.Tests.Converters.VersionConverterTests.SerializeVersionClass(string, string)", color=green, community=0, file="VersionConverterTests.cs", label="VersionClass versionClass = new VersionClass(version1, version2)", prediction=36, span="63-63"];
m9_12 [cluster="Newtonsoft.Json.Tests.Converters.VersionConverterTests.SerializeVersionClass(string, string)", color=green, community=1, file="VersionConverterTests.cs", label="string expectedJson = string.Format(@''{{\r\n  ''''StringProperty1'''': ''''StringProperty1'''',\r\n  ''''Version1'''': ''''{0}'''',\r\n  ''''Version2'''': ''''{1}'''',\r\n  ''''StringProperty2'''': ''''StringProperty2''''\r\n}}'', version1, version2)", prediction=37, span="67-72"];
m9_11 [cluster="Newtonsoft.Json.Tests.Converters.VersionConverterTests.SerializeVersionClass(string, string)", color=green, community=0, file="VersionConverterTests.cs", label="string json = JsonConvert.SerializeObject(versionClass, Formatting.Indented, new VersionConverter())", prediction=38, span="65-65"];
m9_14 [cluster="Newtonsoft.Json.Tests.Converters.VersionConverterTests.SerializeVersionClass(string, string)", file="VersionConverterTests.cs", label="Exit Newtonsoft.Json.Tests.Converters.VersionConverterTests.SerializeVersionClass(string, string)", span="61-61"];
m9_15 [cluster="Newtonsoft.Json.Converters.VersionConverter.VersionConverter()", file="VersionConverterTests.cs", label="Entry Newtonsoft.Json.Converters.VersionConverter.VersionConverter()", span="34-34"];
m9_28 [cluster="Newtonsoft.Json.Tests.Converters.VersionConverterTests.DeserializeVersionClass(string, string)", file="VersionConverterTests.cs", label="Entry Newtonsoft.Json.Tests.Converters.VersionConverterTests.DeserializeVersionClass(string, string)", span="90-90"];
m9_34 [cluster="Newtonsoft.Json.Tests.Converters.VersionConverterTests.DeserializeVersionClass(string, string)", color=green, community=0, file="VersionConverterTests.cs", label="Assert.AreEqual(expectedVersion1, versionClass.Version1)", prediction=39, span="99-99"];
m9_35 [cluster="Newtonsoft.Json.Tests.Converters.VersionConverterTests.DeserializeVersionClass(string, string)", color=green, community=0, file="VersionConverterTests.cs", label="Assert.AreEqual(expectedVersion2, versionClass.Version2)", prediction=40, span="100-100"];
m9_33 [cluster="Newtonsoft.Json.Tests.Converters.VersionConverterTests.DeserializeVersionClass(string, string)", color=green, community=0, file="VersionConverterTests.cs", label="Assert.AreEqual(''StringProperty1'', versionClass.StringProperty1)", prediction=41, span="98-98"];
m9_36 [cluster="Newtonsoft.Json.Tests.Converters.VersionConverterTests.DeserializeVersionClass(string, string)", color=green, community=0, file="VersionConverterTests.cs", label="Assert.AreEqual(''StringProperty2'', versionClass.StringProperty2)", prediction=42, span="101-101"];
m9_37 [cluster="Newtonsoft.Json.Tests.Converters.VersionConverterTests.DeserializeVersionClass(string, string)", file="VersionConverterTests.cs", label="Exit Newtonsoft.Json.Tests.Converters.VersionConverterTests.DeserializeVersionClass(string, string)", span="90-90"];
m9_59 [file="VersionConverterTests.cs", label="Newtonsoft.Json.Tests.Converters.VersionClass", span=""];
m9_60 [file="VersionConverterTests.cs", label="Newtonsoft.Json.Tests.Converters.VersionConverterTests", span=""];
m11_132 [cluster="XmlDocument.cstr", file="XmlNodeConverterTest.cs", label="Entry XmlDocument.cstr", span=""];
m11_439 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NestedArrays()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NestedArrays()", span="1208-1208"];
m11_440 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NestedArrays()", file="XmlNodeConverterTest.cs", label="string json = @''{\r\n  ''''available_sizes'''': [\r\n    [\r\n      ''''assets/images/resized/0001/1070/11070v1-max-150x150.jpg'''',\r\n      ''''assets/images/resized/0001/1070/11070v1-max-150x150.jpg''''\r\n    ],\r\n    [\r\n      ''''assets/images/resized/0001/1070/11070v1-max-250x250.jpg'''',\r\n      ''''assets/images/resized/0001/1070/11070v1-max-250x250.jpg''''\r\n    ],\r\n    [\r\n      ''''assets/images/resized/0001/1070/11070v1-max-250x250.jpg''''\r\n    ]\r\n  ]\r\n}''", span="1210-1224"];
m11_441 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NestedArrays()", file="XmlNodeConverterTest.cs", label="XmlDocument newDoc = JsonConvert.DeserializeXmlNode(json, ''myRoot'')", span="1227-1227"];
m11_444 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NestedArrays()", file="XmlNodeConverterTest.cs", label="XDocument newXDoc = JsonConvert.DeserializeXNode(json, ''myRoot'')", span="1247-1247"];
m11_442 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NestedArrays()", file="XmlNodeConverterTest.cs", label="string xml = IndentXml(newDoc.InnerXml)", span="1229-1229"];
m11_443 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NestedArrays()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(@''<myRoot>\r\n  <available_sizes>\r\n    <available_sizes>assets/images/resized/0001/1070/11070v1-max-150x150.jpg</available_sizes>\r\n    <available_sizes>assets/images/resized/0001/1070/11070v1-max-150x150.jpg</available_sizes>\r\n  </available_sizes>\r\n  <available_sizes>\r\n    <available_sizes>assets/images/resized/0001/1070/11070v1-max-250x250.jpg</available_sizes>\r\n    <available_sizes>assets/images/resized/0001/1070/11070v1-max-250x250.jpg</available_sizes>\r\n  </available_sizes>\r\n  <available_sizes>\r\n    <available_sizes>assets/images/resized/0001/1070/11070v1-max-250x250.jpg</available_sizes>\r\n  </available_sizes>\r\n</myRoot>'', IndentXml(newDoc.InnerXml))", span="1231-1243"];
m11_446 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NestedArrays()", file="XmlNodeConverterTest.cs", label="string newJson = JsonConvert.SerializeXmlNode(newDoc, Formatting.Indented)", span="1265-1265"];
m11_445 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NestedArrays()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(@''<myRoot>\r\n  <available_sizes>\r\n    <available_sizes>assets/images/resized/0001/1070/11070v1-max-150x150.jpg</available_sizes>\r\n    <available_sizes>assets/images/resized/0001/1070/11070v1-max-150x150.jpg</available_sizes>\r\n  </available_sizes>\r\n  <available_sizes>\r\n    <available_sizes>assets/images/resized/0001/1070/11070v1-max-250x250.jpg</available_sizes>\r\n    <available_sizes>assets/images/resized/0001/1070/11070v1-max-250x250.jpg</available_sizes>\r\n  </available_sizes>\r\n  <available_sizes>\r\n    <available_sizes>assets/images/resized/0001/1070/11070v1-max-250x250.jpg</available_sizes>\r\n  </available_sizes>\r\n</myRoot>'', IndentXml(newXDoc.ToString(SaveOptions.DisableFormatting)))", span="1249-1261"];
m11_447 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NestedArrays()", file="XmlNodeConverterTest.cs", label="Console.WriteLine(newJson)", span="1266-1266"];
m11_448 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NestedArrays()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NestedArrays()", span="1208-1208"];
m11_815 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Utc_Precision()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Utc_Precision()", span="2831-2831"];
m11_816 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Utc_Precision()", file="XmlNodeConverterTest.cs", label="string json = @''{''''CreatedDate'''': ''''2014-01-23T00:00:00.1234567Z''''}''", span="2833-2833"];
m11_817 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Utc_Precision()", file="XmlNodeConverterTest.cs", label="var dxml = JsonConvert.DeserializeXNode(json, ''root'')", span="2834-2834"];
m11_818 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Utc_Precision()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(''2014-01-23T00:00:00.1234567Z'', dxml.Root.Element(''CreatedDate'').Value)", span="2835-2835"];
m11_819 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Utc_Precision()", file="XmlNodeConverterTest.cs", label="Console.WriteLine(''DateTimeToXml_Utc: '' + dxml.Root.Element(''CreatedDate'').Value)", span="2837-2837"];
m11_820 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Utc_Precision()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Utc_Precision()", span="2831-2831"];
m11_742 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlIncompatibleCharsInPropertyName()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlIncompatibleCharsInPropertyName()", span="2690-2690"];
m11_743 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlIncompatibleCharsInPropertyName()", file="XmlNodeConverterTest.cs", label="var json = ''{\''%name\'':\''value\''}''", span="2692-2692"];
m11_744 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlIncompatibleCharsInPropertyName()", file="XmlNodeConverterTest.cs", label="XmlDocument node = JsonConvert.DeserializeXmlNode(json)", span="2694-2694"];
m11_747 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlIncompatibleCharsInPropertyName()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(json, json2)", span="2700-2700"];
m11_745 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlIncompatibleCharsInPropertyName()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(''<_x0025_name>value</_x0025_name>'', node.OuterXml)", span="2696-2696"];
m11_746 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlIncompatibleCharsInPropertyName()", file="XmlNodeConverterTest.cs", label="string json2 = JsonConvert.SerializeXmlNode(node)", span="2698-2698"];
m11_748 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlIncompatibleCharsInPropertyName()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlIncompatibleCharsInPropertyName()", span="2690-2690"];
m11_653 [cluster="System.IO.MemoryStream.ToArray()", file="XmlNodeConverterTest.cs", label="Entry System.IO.MemoryStream.ToArray()", span="0-0"];
m11_344 [cluster="Unk.GetIndentedInnerXml", file="XmlNodeConverterTest.cs", label="Entry Unk.GetIndentedInnerXml", span=""];
m11_652 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JsonBodyToSoapXml(System.IO.Stream, System.IO.Stream)", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JsonBodyToSoapXml(System.IO.Stream, System.IO.Stream)", span="2068-2068"];
m11_655 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JsonBodyToSoapXml(System.IO.Stream, System.IO.Stream)", file="XmlNodeConverterTest.cs", label="Newtonsoft.Json.JsonSerializerSettings settings = new Newtonsoft.Json.JsonSerializerSettings()", span="2070-2070"];
m11_658 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JsonBodyToSoapXml(System.IO.Stream, System.IO.Stream)", file="XmlNodeConverterTest.cs", label="Newtonsoft.Json.JsonTextReader reader = new Newtonsoft.Json.JsonTextReader(new System.IO.StreamReader(json))", span="2073-2073"];
m11_662 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JsonBodyToSoapXml(System.IO.Stream, System.IO.Stream)", file="XmlNodeConverterTest.cs", label="XmlWriter writer = XmlWriter.Create(xml)", span="2080-2080"];
m11_656 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JsonBodyToSoapXml(System.IO.Stream, System.IO.Stream)", file="XmlNodeConverterTest.cs", label="settings.Converters.Add(new Newtonsoft.Json.Converters.XmlNodeConverter())", span="2071-2071"];
m11_657 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JsonBodyToSoapXml(System.IO.Stream, System.IO.Stream)", file="XmlNodeConverterTest.cs", label="Newtonsoft.Json.JsonSerializer serializer = Newtonsoft.Json.JsonSerializer.Create(settings)", span="2072-2072"];
m11_659 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JsonBodyToSoapXml(System.IO.Stream, System.IO.Stream)", file="XmlNodeConverterTest.cs", label="XmlDocument doc = (XmlDocument)serializer.Deserialize(reader, typeof(XmlDocument))", span="2075-2075"];
m11_660 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JsonBodyToSoapXml(System.IO.Stream, System.IO.Stream)", file="XmlNodeConverterTest.cs", label="reader.Read() && reader.TokenType != JsonToken.Comment", span="2076-2076"];
m11_663 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JsonBodyToSoapXml(System.IO.Stream, System.IO.Stream)", file="XmlNodeConverterTest.cs", label="doc.Save(writer)", span="2082-2082"];
m11_661 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JsonBodyToSoapXml(System.IO.Stream, System.IO.Stream)", file="XmlNodeConverterTest.cs", label="throw new JsonSerializationException(''Additional text found in JSON string after finishing deserializing object.'');", span="2078-2078"];
m11_664 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JsonBodyToSoapXml(System.IO.Stream, System.IO.Stream)", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JsonBodyToSoapXml(System.IO.Stream, System.IO.Stream)", span="2068-2068"];
m11_319 [cluster="System.Text.StringBuilder.StringBuilder()", file="XmlNodeConverterTest.cs", label="Entry System.Text.StringBuilder.StringBuilder()", span="0-0"];
m11_808 [cluster="System.DateTime.ToString(string, System.IFormatProvider)", file="XmlNodeConverterTest.cs", label="Entry System.DateTime.ToString(string, System.IFormatProvider)", span="0-0"];
m11_68 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDollarProperty()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDollarProperty()", span="149-149"];
m11_69 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDollarProperty()", file="XmlNodeConverterTest.cs", label="string json1 = @''{''''$'''':''''test''''}''", span="151-151"];
m11_70 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDollarProperty()", file="XmlNodeConverterTest.cs", label="var doc = JsonConvert.DeserializeXNode(json1)", span="153-153"];
m11_73 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDollarProperty()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(json1, json2)", span="159-159"];
m11_71 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDollarProperty()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(@''<_x0024_>test</_x0024_>'', doc.ToString())", span="155-155"];
m11_72 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDollarProperty()", file="XmlNodeConverterTest.cs", label="var json2 = JsonConvert.SerializeXNode(doc)", span="157-157"];
m11_74 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDollarProperty()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDollarProperty()", span="149-149"];
m11_85 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ConvertNullString()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ConvertNullString()", span="184-184"];
m11_86 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ConvertNullString()", file="XmlNodeConverterTest.cs", label="JObject json = new JObject()", span="186-186"];
m11_87 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ConvertNullString()", file="XmlNodeConverterTest.cs", label="json[''Prop1''] = (string)null", span="187-187"];
m11_88 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ConvertNullString()", file="XmlNodeConverterTest.cs", label="json[''Prop2''] = new MyModel().MyProperty", span="188-188"];
m11_92 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ConvertNullString()", file="XmlNodeConverterTest.cs", label="XDocument d = json.ToObject<XDocument>(jsonSerializer)", span="193-193"];
m11_89 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ConvertNullString()", file="XmlNodeConverterTest.cs", label="var xmlNodeConverter = new XmlNodeConverter { DeserializeRootElementName = ''object'' }", span="190-190"];
m11_90 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ConvertNullString()", file="XmlNodeConverterTest.cs", label="var jsonSerializerSettings = new JsonSerializerSettings { Converters = new JsonConverter[] { xmlNodeConverter } }", span="191-191"];
m11_91 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ConvertNullString()", file="XmlNodeConverterTest.cs", label="var jsonSerializer = JsonSerializer.CreateDefault(jsonSerializerSettings)", span="192-192"];
m11_93 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ConvertNullString()", file="XmlNodeConverterTest.cs", label="StringAssert.Equals(@''<object>\r\n  <Prop1 />\r\n  <Prop2 />\r\n</object>'', d.ToString())", span="195-198"];
m11_94 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ConvertNullString()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ConvertNullString()", span="184-184"];
m11_47 [cluster="Newtonsoft.Json.JsonTextReader.Read()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.JsonTextReader.Read()", span="387-387"];
m11_179 [cluster="System.TimeSpan.FromMinutes(double)", file="XmlNodeConverterTest.cs", label="Entry System.TimeSpan.FromMinutes(double)", span="0-0"];
m11_111 [cluster="Unk.IsNull", file="XmlNodeConverterTest.cs", label="Entry Unk.IsNull", span=""];
m11_221 [cluster="Unk.DeserializeXmlNode", file="XmlNodeConverterTest.cs", label="Entry Unk.DeserializeXmlNode", span=""];
m11_594 [cluster="Newtonsoft.Json.Converters.IsoDateTimeConverter.IsoDateTimeConverter()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Converters.IsoDateTimeConverter.IsoDateTimeConverter()", span="34-34"];
m11_134 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlElement()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlElement()", span="276-276"];
m11_135 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlElement()", file="XmlNodeConverterTest.cs", label="string xml = @''<payload>\r\n    <Country>6</Country>\r\n    <FinancialTransactionApprovalRequestUID>79</FinancialTransactionApprovalRequestUID>\r\n    <TransactionStatus>Approved</TransactionStatus>\r\n    <StatusChangeComment></StatusChangeComment>\r\n    <RequestedBy>Someone</RequestedBy>\r\n</payload>''", span="278-284"];
m11_136 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlElement()", file="XmlNodeConverterTest.cs", label="var xmlDocument = new XmlDocument()", span="286-286"];
m11_137 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlElement()", file="XmlNodeConverterTest.cs", label="xmlDocument.LoadXml(xml)", span="288-288"];
m11_138 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlElement()", file="XmlNodeConverterTest.cs", label="var result = xmlDocument.FirstChild.ChildNodes.Cast<XmlNode>().ToArray()", span="290-290"];
m11_139 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlElement()", file="XmlNodeConverterTest.cs", label="var json = JsonConvert.SerializeObject(result, Formatting.Indented)", span="292-292"];
m11_140 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlElement()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(@''[\r\n  {\r\n    ''''Country'''': ''''6''''\r\n  },\r\n  {\r\n    ''''FinancialTransactionApprovalRequestUID'''': ''''79''''\r\n  },\r\n  {\r\n    ''''TransactionStatus'''': ''''Approved''''\r\n  },\r\n  {\r\n    ''''StatusChangeComment'''': ''''''''\r\n  },\r\n  {\r\n    ''''RequestedBy'''': ''''Someone''''\r\n  }\r\n]'', json)", span="294-310"];
m11_141 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlElement()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlElement()", span="276-276"];
m11_596 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ComplexSingleItemArrayPropertySerialization()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ComplexSingleItemArrayPropertySerialization()", span="1896-1896"];
m11_597 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ComplexSingleItemArrayPropertySerialization()", file="XmlNodeConverterTest.cs", label="TestComplexArrayClass o = new TestComplexArrayClass\r\n            {\r\n                Name = ''Hi'',\r\n                Products = new List<Product>\r\n                {\r\n                    new Product { Name = ''First'' }\r\n                }\r\n            }", span="1898-1905"];
m11_598 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ComplexSingleItemArrayPropertySerialization()", file="XmlNodeConverterTest.cs", label="string output = JsonConvert.SerializeObject(o, new IsoDateTimeConverter())", span="1907-1907"];
m11_599 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ComplexSingleItemArrayPropertySerialization()", file="XmlNodeConverterTest.cs", label="XmlDocument xmlProduct = JsonConvert.DeserializeXmlNode(output, ''test'', true)", span="1909-1909"];
m11_600 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ComplexSingleItemArrayPropertySerialization()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(@''<test>\r\n  <Name>Hi</Name>\r\n  <Products json:Array=''''true'''' xmlns:json=''''http://james.newtonking.com/projects/json''''>\r\n    <Name>First</Name>\r\n    <ExpiryDate>2000-01-01T00:00:00Z</ExpiryDate>\r\n    <Price>0</Price>\r\n    <Sizes />\r\n  </Products>\r\n</test>'', IndentXml(xmlProduct.InnerXml))", span="1911-1919"];
m11_601 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ComplexSingleItemArrayPropertySerialization()", file="XmlNodeConverterTest.cs", label="string output2 = JsonConvert.SerializeXmlNode(xmlProduct.DocumentElement, Formatting.Indented, true)", span="1921-1921"];
m11_602 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ComplexSingleItemArrayPropertySerialization()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(@''{\r\n  ''''Name'''': ''''Hi'''',\r\n  ''''Products'''': [\r\n    {\r\n      ''''Name'''': ''''First'''',\r\n      ''''ExpiryDate'''': ''''2000-01-01T00:00:00Z'''',\r\n      ''''Price'''': ''''0'''',\r\n      ''''Sizes'''': null\r\n    }\r\n  ]\r\n}'', output2)", span="1923-1933"];
m11_603 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ComplexSingleItemArrayPropertySerialization()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ComplexSingleItemArrayPropertySerialization()", span="1896-1896"];
m11_604 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.TestComplexArrayClass.TestComplexArrayClass()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.TestComplexArrayClass.TestComplexArrayClass()", span="1889-1889"];
m11_532 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNoId()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNoId()", span="1643-1643"];
m11_533 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNoId()", file="XmlNodeConverterTest.cs", label="string json = @''{\r\n  ''''$values'''': [\r\n    ''''1'''',\r\n    ''''2'''',\r\n    ''''3'''',\r\n    ''''4'''',\r\n    ''''5''''\r\n  ]\r\n}''", span="1645-1653"];
m11_534 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNoId()", file="XmlNodeConverterTest.cs", label="XmlNode node = JsonConvert.DeserializeXmlNode(json, ''root'')", span="1655-1655"];
m11_539 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNoId()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(json, newJson)", span="1671-1671"];
m11_535 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNoId()", file="XmlNodeConverterTest.cs", label="string xml = GetIndentedInnerXml(node)", span="1656-1656"];
m11_537 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNoId()", file="XmlNodeConverterTest.cs", label="string newJson = JsonConvert.SerializeXmlNode(node, Formatting.Indented, true)", span="1667-1667"];
m11_536 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNoId()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(@''<?xml version=''''1.0'''' encoding=''''utf-16''''?>\r\n<root xmlns:json=''''http://james.newtonking.com/projects/json''''>\r\n  <values xmlns=''''http://james.newtonking.com/projects/json''''>1</values>\r\n  <values xmlns=''''http://james.newtonking.com/projects/json''''>2</values>\r\n  <values xmlns=''''http://james.newtonking.com/projects/json''''>3</values>\r\n  <values xmlns=''''http://james.newtonking.com/projects/json''''>4</values>\r\n  <values xmlns=''''http://james.newtonking.com/projects/json''''>5</values>\r\n</root>'', xml)", span="1658-1665"];
m11_538 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNoId()", file="XmlNodeConverterTest.cs", label="Console.WriteLine(newJson)", span="1669-1669"];
m11_540 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNoId()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNoId()", span="1643-1643"];
m11_133 [cluster="Unk.LoadXml", file="XmlNodeConverterTest.cs", label="Entry Unk.LoadXml", span=""];
m11_639 [cluster="Newtonsoft.Json.JsonSerializer.Create(Newtonsoft.Json.JsonSerializerSettings)", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.JsonSerializer.Create(Newtonsoft.Json.JsonSerializerSettings)", span="574-574"];
m11_180 [cluster="System.TimeSpan.Add(System.TimeSpan)", file="XmlNodeConverterTest.cs", label="Entry System.TimeSpan.Add(System.TimeSpan)", span="0-0"];
m11_99 [cluster="Newtonsoft.Json.Linq.JToken.ToObject<T>(Newtonsoft.Json.JsonSerializer)", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Linq.JToken.ToObject<T>(Newtonsoft.Json.JsonSerializer)", span="2066-2066"];
m11_121 [cluster="Unk.SerializeObject", file="XmlNodeConverterTest.cs", label="Entry Unk.SerializeObject", span=""];
m11_214 [cluster="Unk.IsTrue", file="XmlNodeConverterTest.cs", label="Entry Unk.IsTrue", span=""];
m11_654 [cluster="System.Text.Encoding.GetString(byte[])", file="XmlNodeConverterTest.cs", label="Entry System.Text.Encoding.GetString(byte[])", span="0-0"];
m11_493 [cluster="Newtonsoft.Json.Linq.JObject.Parse(string)", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Linq.JObject.Parse(string)", span="404-404"];
m11_229 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentSerializeIndented()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentSerializeIndented()", span="511-511"];
m11_230 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentSerializeIndented()", file="XmlNodeConverterTest.cs", label="string xml = @''<?xml version=''''1.0'''' standalone=''''no''''?>\r\n<?xml-stylesheet href=''''classic.xsl'''' type=''''text/xml''''?>\r\n<span class=''''vevent''''>\r\n  <a class=''''url'''' href=''''http://www.web2con.com/''''>\r\n    <span class=''''summary''''>Web 2.0 Conference<![CDATA[my escaped text]]></span>\r\n    <abbr class=''''dtstart'''' title=''''2005-10-05''''>October 5</abbr>\r\n    <abbr class=''''dtend'''' title=''''2005-10-08''''>7</abbr>\r\n    <span class=''''location''''>Argent Hotel, San Francisco, CA</span>\r\n  </a>\r\n</span>''", span="513-522"];
m11_231 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentSerializeIndented()", file="XmlNodeConverterTest.cs", label="XmlDocument doc = new XmlDocument()", span="523-523"];
m11_232 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentSerializeIndented()", file="XmlNodeConverterTest.cs", label="doc.LoadXml(xml)", span="524-524"];
m11_233 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentSerializeIndented()", file="XmlNodeConverterTest.cs", label="string jsonText = SerializeXmlNode(doc)", span="526-526"];
m11_234 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentSerializeIndented()", file="XmlNodeConverterTest.cs", label="string expected = @''{\r\n  ''''?xml'''': {\r\n    ''''@version'''': ''''1.0'''',\r\n    ''''@standalone'''': ''''no''''\r\n  },\r\n  ''''?xml-stylesheet'''': ''''href=\''''classic.xsl\'''' type=\''''text/xml\'''''''',\r\n  ''''span'''': {\r\n    ''''@class'''': ''''vevent'''',\r\n    ''''a'''': {\r\n      ''''@class'''': ''''url'''',\r\n      ''''@href'''': ''''http://www.web2con.com/'''',\r\n      ''''span'''': [\r\n        {\r\n          ''''@class'''': ''''summary'''',\r\n          ''''#text'''': ''''Web 2.0 Conference'''',\r\n          ''''#cdata-section'''': ''''my escaped text''''\r\n        },\r\n        {\r\n          ''''@class'''': ''''location'''',\r\n          ''''#text'''': ''''Argent Hotel, San Francisco, CA''''\r\n        }\r\n      ],\r\n      ''''abbr'''': [\r\n        {\r\n          ''''@class'''': ''''dtstart'''',\r\n          ''''@title'''': ''''2005-10-05'''',\r\n          ''''#text'''': ''''October 5''''\r\n        },\r\n        {\r\n          ''''@class'''': ''''dtend'''',\r\n          ''''@title'''': ''''2005-10-08'''',\r\n          ''''#text'''': ''''7''''\r\n        }\r\n      ]\r\n    }\r\n  }\r\n}''", span="527-563"];
m11_235 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentSerializeIndented()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(expected, jsonText)", span="565-565"];
m11_236 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentSerializeIndented()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentSerializeIndented()", span="511-511"];
m11_592 [cluster="Newtonsoft.Json.Tests.TestObjects.Product.Product()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.TestObjects.Product.Product()", span="29-29"];
m11_669 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXNodeDefaultNamespace()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXNodeDefaultNamespace()", span="2090-2090"];
m11_670 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXNodeDefaultNamespace()", file="XmlNodeConverterTest.cs", label="string xaml = @''<Grid xmlns=''''http://schemas.microsoft.com/winfx/2006/xaml/presentation'''' xmlns:x=''''http://schemas.microsoft.com/winfx/2006/xaml'''' xmlns:toolkit=''''clr-namespace:Microsoft.Phone.Controls;assembly=Microsoft.Phone.Controls.Toolkit'''' Style=''''{StaticResource trimFormGrid}'''' x:Name=''''TrimObjectForm''''>\r\n  <Grid.ColumnDefinitions>\r\n    <ColumnDefinition Width=''''63*'''' />\r\n    <ColumnDefinition Width=''''320*'''' />\r\n  </Grid.ColumnDefinitions>\r\n  <Grid.RowDefinitions xmlns=''''''''>\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n  </Grid.RowDefinitions>\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding TypedTitle, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordTypedTitle'''' Grid.Column=''''1'''' Grid.Row=''''0'''' xmlns='''''''' />\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding ExternalReference, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordExternalReference'''' Grid.Column=''''1'''' Grid.Row=''''1'''' xmlns='''''''' />\r\n  <toolkit:DatePicker Style=''''{StaticResource trimFormGrid_DP}'''' Value=''''{Binding DateCreated, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordDateCreated'''' Grid.Column=''''1'''' Grid.Row=''''2'''' />\r\n  <toolkit:DatePicker Style=''''{StaticResource trimFormGrid_DP}'''' Value=''''{Binding DateDue, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordDateDue'''' Grid.Column=''''1'''' Grid.Row=''''3'''' />\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding Author, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordAuthor'''' Grid.Column=''''1'''' Grid.Row=''''4'''' xmlns='''''''' />\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding Container, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordContainer'''' Grid.Column=''''1'''' Grid.Row=''''5'''' xmlns='''''''' />\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding IsEnclosed, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordIsEnclosed'''' Grid.Column=''''1'''' Grid.Row=''''6'''' xmlns='''''''' />\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding Assignee, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordAssignee'''' Grid.Column=''''1'''' Grid.Row=''''7'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Title (Free Text Part)'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''0'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''External ID'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''1'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Date Created'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''2'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Date Due'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''3'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Author'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''4'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Container'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''5'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Enclosed?'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''6'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Assignee'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''7'''' xmlns='''''''' />\r\n</Grid>''", span="2092-2123"];
m11_671 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXNodeDefaultNamespace()", file="XmlNodeConverterTest.cs", label="string json = JsonConvert.SerializeXNode(XDocument.Parse(xaml), Formatting.Indented)", span="2125-2125"];
m11_672 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXNodeDefaultNamespace()", file="XmlNodeConverterTest.cs", label="string expectedJson = @''{\r\n  ''''Grid'''': {\r\n    ''''@xmlns'''': ''''http://schemas.microsoft.com/winfx/2006/xaml/presentation'''',\r\n    ''''@xmlns:x'''': ''''http://schemas.microsoft.com/winfx/2006/xaml'''',\r\n    ''''@xmlns:toolkit'''': ''''clr-namespace:Microsoft.Phone.Controls;assembly=Microsoft.Phone.Controls.Toolkit'''',\r\n    ''''@Style'''': ''''{StaticResource trimFormGrid}'''',\r\n    ''''@x:Name'''': ''''TrimObjectForm'''',\r\n    ''''Grid.ColumnDefinitions'''': {\r\n      ''''ColumnDefinition'''': [\r\n        {\r\n          ''''@Width'''': ''''63*''''\r\n        },\r\n        {\r\n          ''''@Width'''': ''''320*''''\r\n        }\r\n      ]\r\n    },\r\n    ''''Grid.RowDefinitions'''': {\r\n      ''''@xmlns'''': '''''''',\r\n      ''''RowDefinition'''': [\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null\r\n      ]\r\n    },\r\n    ''''TextBox'''': [\r\n      {\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_TB}'''',\r\n        ''''@Text'''': ''''{Binding TypedTitle, Converter={StaticResource trimPropertyConverter}}'''',\r\n        ''''@Name'''': ''''RecordTypedTitle'''',\r\n        ''''@Grid.Column'''': ''''1'''',\r\n        ''''@Grid.Row'''': ''''0'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_TB}'''',\r\n        ''''@Text'''': ''''{Binding ExternalReference, Converter={StaticResource trimPropertyConverter}}'''',\r\n        ''''@Name'''': ''''RecordExternalReference'''',\r\n        ''''@Grid.Column'''': ''''1'''',\r\n        ''''@Grid.Row'''': ''''1'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_TB}'''',\r\n        ''''@Text'''': ''''{Binding Author, Converter={StaticResource trimPropertyConverter}}'''',\r\n        ''''@Name'''': ''''RecordAuthor'''',\r\n        ''''@Grid.Column'''': ''''1'''',\r\n        ''''@Grid.Row'''': ''''4'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_TB}'''',\r\n        ''''@Text'''': ''''{Binding Container, Converter={StaticResource trimPropertyConverter}}'''',\r\n        ''''@Name'''': ''''RecordContainer'''',\r\n        ''''@Grid.Column'''': ''''1'''',\r\n        ''''@Grid.Row'''': ''''5'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_TB}'''',\r\n        ''''@Text'''': ''''{Binding IsEnclosed, Converter={StaticResource trimPropertyConverter}}'''',\r\n        ''''@Name'''': ''''RecordIsEnclosed'''',\r\n        ''''@Grid.Column'''': ''''1'''',\r\n        ''''@Grid.Row'''': ''''6'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_TB}'''',\r\n        ''''@Text'''': ''''{Binding Assignee, Converter={StaticResource trimPropertyConverter}}'''',\r\n        ''''@Name'''': ''''RecordAssignee'''',\r\n        ''''@Grid.Column'''': ''''1'''',\r\n        ''''@Grid.Row'''': ''''7'''',\r\n        ''''@xmlns'''': ''''''''\r\n      }\r\n    ],\r\n    ''''toolkit:DatePicker'''': [\r\n      {\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_DP}'''',\r\n        ''''@Value'''': ''''{Binding DateCreated, Converter={StaticResource trimPropertyConverter}}'''',\r\n        ''''@Name'''': ''''RecordDateCreated'''',\r\n        ''''@Grid.Column'''': ''''1'''',\r\n        ''''@Grid.Row'''': ''''2''''\r\n      },\r\n      {\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_DP}'''',\r\n        ''''@Value'''': ''''{Binding DateDue, Converter={StaticResource trimPropertyConverter}}'''',\r\n        ''''@Name'''': ''''RecordDateDue'''',\r\n        ''''@Grid.Column'''': ''''1'''',\r\n        ''''@Grid.Row'''': ''''3''''\r\n      }\r\n    ],\r\n    ''''TextBlock'''': [\r\n      {\r\n        ''''@Grid.Column'''': ''''0'''',\r\n        ''''@Text'''': ''''Title (Free Text Part)'''',\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_LBL}'''',\r\n        ''''@Grid.Row'''': ''''0'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Grid.Column'''': ''''0'''',\r\n        ''''@Text'''': ''''External ID'''',\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_LBL}'''',\r\n        ''''@Grid.Row'''': ''''1'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Grid.Column'''': ''''0'''',\r\n        ''''@Text'''': ''''Date Created'''',\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_LBL}'''',\r\n        ''''@Grid.Row'''': ''''2'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Grid.Column'''': ''''0'''',\r\n        ''''@Text'''': ''''Date Due'''',\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_LBL}'''',\r\n        ''''@Grid.Row'''': ''''3'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Grid.Column'''': ''''0'''',\r\n        ''''@Text'''': ''''Author'''',\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_LBL}'''',\r\n        ''''@Grid.Row'''': ''''4'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Grid.Column'''': ''''0'''',\r\n        ''''@Text'''': ''''Container'''',\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_LBL}'''',\r\n        ''''@Grid.Row'''': ''''5'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Grid.Column'''': ''''0'''',\r\n        ''''@Text'''': ''''Enclosed?'''',\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_LBL}'''',\r\n        ''''@Grid.Row'''': ''''6'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Grid.Column'''': ''''0'''',\r\n        ''''@Text'''': ''''Assignee'''',\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_LBL}'''',\r\n        ''''@Grid.Row'''': ''''7'''',\r\n        ''''@xmlns'''': ''''''''\r\n      }\r\n    ]\r\n  }\r\n}''", span="2127-2282"];
m11_673 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXNodeDefaultNamespace()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(expectedJson, json)", span="2284-2284"];
m11_674 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXNodeDefaultNamespace()", file="XmlNodeConverterTest.cs", label="XNode node = JsonConvert.DeserializeXNode(json)", span="2286-2286"];
m11_675 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXNodeDefaultNamespace()", file="XmlNodeConverterTest.cs", label="string xaml2 = node.ToString()", span="2288-2288"];
m11_676 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXNodeDefaultNamespace()", file="XmlNodeConverterTest.cs", label="string expectedXaml = @''<Grid xmlns=''''http://schemas.microsoft.com/winfx/2006/xaml/presentation'''' xmlns:x=''''http://schemas.microsoft.com/winfx/2006/xaml'''' xmlns:toolkit=''''clr-namespace:Microsoft.Phone.Controls;assembly=Microsoft.Phone.Controls.Toolkit'''' Style=''''{StaticResource trimFormGrid}'''' x:Name=''''TrimObjectForm''''>\r\n  <Grid.ColumnDefinitions>\r\n    <ColumnDefinition Width=''''63*'''' />\r\n    <ColumnDefinition Width=''''320*'''' />\r\n  </Grid.ColumnDefinitions>\r\n  <Grid.RowDefinitions xmlns=''''''''>\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n  </Grid.RowDefinitions>\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding TypedTitle, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordTypedTitle'''' Grid.Column=''''1'''' Grid.Row=''''0'''' xmlns='''''''' />\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding ExternalReference, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordExternalReference'''' Grid.Column=''''1'''' Grid.Row=''''1'''' xmlns='''''''' />\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding Author, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordAuthor'''' Grid.Column=''''1'''' Grid.Row=''''4'''' xmlns='''''''' />\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding Container, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordContainer'''' Grid.Column=''''1'''' Grid.Row=''''5'''' xmlns='''''''' />\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding IsEnclosed, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordIsEnclosed'''' Grid.Column=''''1'''' Grid.Row=''''6'''' xmlns='''''''' />\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding Assignee, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordAssignee'''' Grid.Column=''''1'''' Grid.Row=''''7'''' xmlns='''''''' />\r\n  <toolkit:DatePicker Style=''''{StaticResource trimFormGrid_DP}'''' Value=''''{Binding DateCreated, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordDateCreated'''' Grid.Column=''''1'''' Grid.Row=''''2'''' />\r\n  <toolkit:DatePicker Style=''''{StaticResource trimFormGrid_DP}'''' Value=''''{Binding DateDue, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordDateDue'''' Grid.Column=''''1'''' Grid.Row=''''3'''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Title (Free Text Part)'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''0'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''External ID'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''1'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Date Created'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''2'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Date Due'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''3'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Author'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''4'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Container'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''5'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Enclosed?'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''6'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Assignee'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''7'''' xmlns='''''''' />\r\n</Grid>''", span="2290-2321"];
m11_677 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXNodeDefaultNamespace()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(expectedXaml, xaml2)", span="2323-2323"];
m11_678 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXNodeDefaultNamespace()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXNodeDefaultNamespace()", span="2090-2090"];
m11_642 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializingBooleanValues()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializingBooleanValues()", span="2056-2056"];
m11_643 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializingBooleanValues()", file="XmlNodeConverterTest.cs", label="MemoryStream ms = new MemoryStream(System.Text.Encoding.UTF8.GetBytes(@''{root:{''''@booleanType'''':true}}''))", span="2058-2058"];
m11_644 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializingBooleanValues()", file="XmlNodeConverterTest.cs", label="MemoryStream xml = new MemoryStream()", span="2059-2059"];
m11_645 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializingBooleanValues()", file="XmlNodeConverterTest.cs", label="JsonBodyToSoapXml(ms, xml)", span="2061-2061"];
m11_646 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializingBooleanValues()", file="XmlNodeConverterTest.cs", label="string xmlString = System.Text.Encoding.UTF8.GetString(xml.ToArray())", span="2063-2063"];
m11_647 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializingBooleanValues()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(@''﻿<?xml version=''''1.0'''' encoding=''''utf-8''''?><root booleanType=''''true'''' />'', xmlString)", span="2065-2065"];
m11_648 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializingBooleanValues()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializingBooleanValues()", span="2056-2056"];
m11_867 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeDateInElementText()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeDateInElementText()", span="2922-2922"];
m11_868 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeDateInElementText()", file="XmlNodeConverterTest.cs", label="Model model = new Model()", span="2924-2924"];
m11_869 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeDateInElementText()", file="XmlNodeConverterTest.cs", label="model.Document = new XElement(''Value'', new XAttribute(''foo'', ''bar''))\r\n            {\r\n                Value = ''2001-01-01T11:11:11''\r\n            }", span="2925-2928"];
m11_875 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeDateInElementText()", file="XmlNodeConverterTest.cs", label="serializer.Serialize(jsonWriter, model)", span="2941-2941"];
m11_870 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeDateInElementText()", file="XmlNodeConverterTest.cs", label="var serializer = JsonSerializer.Create(new JsonSerializerSettings\r\n            {\r\n                Converters = new List<JsonConverter>(new[] { new XmlNodeConverter() })\r\n            })", span="2930-2933"];
m11_871 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeDateInElementText()", file="XmlNodeConverterTest.cs", label="var json = new StringBuilder(1024)", span="2935-2935"];
m11_879 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeDateInElementText()", file="XmlNodeConverterTest.cs", label="var document = (XDocument)serializer.Deserialize(jsonReader, typeof(XDocument))", span="2949-2949"];
m11_872 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeDateInElementText()", file="XmlNodeConverterTest.cs", label="var stringWriter = new StringWriter(json, CultureInfo.InvariantCulture)", span="2937-2937"];
m11_876 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeDateInElementText()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(@''{''''Document'''':{''''Value'''':{''''@foo'''':''''bar'''',''''#text'''':''''2001-01-01T11:11:11''''}}}'', json.ToString())", span="2943-2943"];
m11_877 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeDateInElementText()", file="XmlNodeConverterTest.cs", label="var stringReader = new StringReader(json.ToString())", span="2946-2946"];
m11_873 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeDateInElementText()", file="XmlNodeConverterTest.cs", label="var jsonWriter = new JsonTextWriter(stringWriter)", span="2938-2938"];
m11_874 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeDateInElementText()", file="XmlNodeConverterTest.cs", label="jsonWriter.Formatting = Formatting.None", span="2940-2940"];
m11_878 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeDateInElementText()", file="XmlNodeConverterTest.cs", label="var jsonReader = new JsonTextReader(stringReader)", span="2947-2947"];
m11_880 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeDateInElementText()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(@''<Document>\r\n  <Value foo=''''bar''''>2001-01-01T11:11:11</Value>\r\n</Document>'', document.ToString())", span="2951-2953"];
m11_881 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeDateInElementText()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeDateInElementText()", span="2922-2922"];
m11_205 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXmlWithNamespaceInChildrenAndNoValueInChildren()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXmlWithNamespaceInChildrenAndNoValueInChildren()", span="454-454"];
m11_206 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXmlWithNamespaceInChildrenAndNoValueInChildren()", file="XmlNodeConverterTest.cs", label="var xmlString = @''<root>\r\n                              <b xmlns='http://www.example.com/ns'/>\r\n                              <c>AAA</c>\r\n                              <test>adad</test>\r\n                              </root>''", span="456-460"];
m11_207 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXmlWithNamespaceInChildrenAndNoValueInChildren()", file="XmlNodeConverterTest.cs", label="var xml = XElement.Parse(xmlString)", span="462-462"];
m11_208 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXmlWithNamespaceInChildrenAndNoValueInChildren()", file="XmlNodeConverterTest.cs", label="var json1 = JsonConvert.SerializeXNode(xml)", span="464-464"];
m11_210 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXmlWithNamespaceInChildrenAndNoValueInChildren()", file="XmlNodeConverterTest.cs", label="var equals = XElement.DeepEquals(xmlBack, xml)", span="467-467"];
m11_209 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXmlWithNamespaceInChildrenAndNoValueInChildren()", file="XmlNodeConverterTest.cs", label="var xmlBack = JsonConvert.DeserializeObject<XElement>(json1)", span="465-465"];
m11_211 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXmlWithNamespaceInChildrenAndNoValueInChildren()", file="XmlNodeConverterTest.cs", label="Assert.IsTrue(equals)", span="468-468"];
m11_212 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXmlWithNamespaceInChildrenAndNoValueInChildren()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXmlWithNamespaceInChildrenAndNoValueInChildren()", span="454-454"];
m11_719 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXElementWithNamespaceInChildrenRootDontHaveNameSpace()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXElementWithNamespaceInChildrenRootDontHaveNameSpace()", span="2637-2637"];
m11_720 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXElementWithNamespaceInChildrenRootDontHaveNameSpace()", file="XmlNodeConverterTest.cs", label="var xmlString = @''<root>\r\n                              <b xmlns='http://www.example.com/ns'>Asd</b>\r\n                              <c>AAA</c>\r\n                              <test>adad</test>\r\n                              </root>''", span="2639-2643"];
m11_721 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXElementWithNamespaceInChildrenRootDontHaveNameSpace()", file="XmlNodeConverterTest.cs", label="var xml = XElement.Parse(xmlString)", span="2645-2645"];
m11_722 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXElementWithNamespaceInChildrenRootDontHaveNameSpace()", file="XmlNodeConverterTest.cs", label="var json1 = JsonConvert.SerializeXNode(xml)", span="2647-2647"];
m11_724 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXElementWithNamespaceInChildrenRootDontHaveNameSpace()", file="XmlNodeConverterTest.cs", label="var equals = XElement.DeepEquals(xmlBack, xml)", span="2650-2650"];
m11_723 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXElementWithNamespaceInChildrenRootDontHaveNameSpace()", file="XmlNodeConverterTest.cs", label="var xmlBack = JsonConvert.DeserializeObject<XElement>(json1)", span="2648-2648"];
m11_725 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXElementWithNamespaceInChildrenRootDontHaveNameSpace()", file="XmlNodeConverterTest.cs", label="Assert.IsTrue(equals)", span="2651-2651"];
m11_726 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXElementWithNamespaceInChildrenRootDontHaveNameSpace()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXElementWithNamespaceInChildrenRootDontHaveNameSpace()", span="2637-2637"];
m11_276 [cluster="Unk.CreateAttribute", file="XmlNodeConverterTest.cs", label="Entry Unk.CreateAttribute", span=""];
m11_120 [cluster="Unk.Parse", file="XmlNodeConverterTest.cs", label="Entry Unk.Parse", span=""];
m11_123 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXmlDocument()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXmlDocument()", span="248-248"];
m11_124 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXmlDocument()", file="XmlNodeConverterTest.cs", label="string xml = @''<result xp_0:end=''''2014-08-15 13:12:11.9184'''' xp_0:start=''''2014-08-15 13:11:49.3140'''' xp_0:time_diff=''''22604.3836'''' xmlns:xp_0=''''Test1'''' p2:end=''''2014-08-15 13:13:49.5522'''' p2:start=''''2014-08-15 13:13:49.0268'''' p2:time_diff=''''525.4646'''' xmlns:p2=''''Test2'''' />''", span="250-250"];
m11_125 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXmlDocument()", file="XmlNodeConverterTest.cs", label="XmlDocument d = new XmlDocument()", span="252-252"];
m11_126 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXmlDocument()", file="XmlNodeConverterTest.cs", label="d.LoadXml(xml)", span="253-253"];
m11_130 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXmlDocument()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(xml, doc.OuterXml)", span="272-272"];
m11_127 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXmlDocument()", file="XmlNodeConverterTest.cs", label="string json = JsonConvert.SerializeObject(d, Formatting.Indented)", span="255-255"];
m11_128 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXmlDocument()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(@''{\r\n  ''''result'''': {\r\n    ''''@xp_0:end'''': ''''2014-08-15 13:12:11.9184'''',\r\n    ''''@xp_0:start'''': ''''2014-08-15 13:11:49.3140'''',\r\n    ''''@xp_0:time_diff'''': ''''22604.3836'''',\r\n    ''''@xmlns:xp_0'''': ''''Test1'''',\r\n    ''''@p2:end'''': ''''2014-08-15 13:13:49.5522'''',\r\n    ''''@p2:start'''': ''''2014-08-15 13:13:49.0268'''',\r\n    ''''@p2:time_diff'''': ''''525.4646'''',\r\n    ''''@xmlns:p2'''': ''''Test2''''\r\n  }\r\n}'', json)", span="257-268"];
m11_129 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXmlDocument()", file="XmlNodeConverterTest.cs", label="XmlDocument doc = JsonConvert.DeserializeObject<XmlDocument>(json)", span="270-270"];
m11_131 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXmlDocument()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXmlDocument()", span="248-248"];
m11_800 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Local()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Local()", span="2809-2809"];
m11_801 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Local()", file="XmlNodeConverterTest.cs", label="DateTime dt = DateTime.Parse(''2014-01-23T00:00:00+01:00'')", span="2811-2811"];
m11_802 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Local()", file="XmlNodeConverterTest.cs", label="string json = @''{''''CreatedDate'''': ''''2014-01-23T00:00:00+01:00''''}''", span="2813-2813"];
m11_804 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Local()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(dt.ToString(''yyyy-MM-ddTHH:mm:sszzzzzzz'', CultureInfo.InvariantCulture), dxml.Root.Element(''CreatedDate'').Value)", span="2815-2815"];
m11_803 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Local()", file="XmlNodeConverterTest.cs", label="var dxml = JsonConvert.DeserializeXNode(json, ''root'')", span="2814-2814"];
m11_805 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Local()", file="XmlNodeConverterTest.cs", label="Console.WriteLine(''DateTimeToXml_Local: '' + dxml.Root.Element(''CreatedDate'').Value)", span="2817-2817"];
m11_806 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Local()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Local()", span="2809-2809"];
m11_473 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeComment()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeComment()", span="1381-1381"];
m11_474 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeComment()", file="XmlNodeConverterTest.cs", label="string xml = @''<span class=''''vevent''''>\r\n  <a class=''''url'''' href=''''http://www.web2con.com/''''><!-- Hi --><span>Text</span></a><!-- Hi! -->\r\n</span>''", span="1383-1385"];
m11_475 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeComment()", file="XmlNodeConverterTest.cs", label="XmlDocument doc = new XmlDocument()", span="1386-1386"];
m11_476 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeComment()", file="XmlNodeConverterTest.cs", label="doc.LoadXml(xml)", span="1387-1387"];
m11_477 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeComment()", file="XmlNodeConverterTest.cs", label="string jsonText = SerializeXmlNode(doc)", span="1389-1389"];
m11_478 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeComment()", file="XmlNodeConverterTest.cs", label="string expected = @''{\r\n  ''''span'''': {\r\n    ''''@class'''': ''''vevent'''',\r\n    ''''a'''': {\r\n      ''''@class'''': ''''url'''',\r\n      ''''@href'''': ''''http://www.web2con.com/''''/* Hi */,\r\n      ''''span'''': ''''Text''''\r\n    }/* Hi! */\r\n  }\r\n}''", span="1391-1400"];
m11_479 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeComment()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(expected, jsonText)", span="1402-1402"];
m11_480 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeComment()", file="XmlNodeConverterTest.cs", label="XmlDocument newDoc = (XmlDocument)DeserializeXmlNode(jsonText)", span="1404-1404"];
m11_481 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeComment()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(@''<span class=''''vevent''''><a class=''''url'''' href=''''http://www.web2con.com/''''><!-- Hi --><span>Text</span></a><!-- Hi! --></span>'', newDoc.InnerXml)", span="1405-1405"];
m11_482 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeComment()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeComment()", span="1381-1381"];
m11_763 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Serialize_XDocument_NoRoot()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Serialize_XDocument_NoRoot()", span="2748-2748"];
m11_764 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Serialize_XDocument_NoRoot()", file="XmlNodeConverterTest.cs", label="XDocument d = new XDocument()", span="2750-2750"];
m11_765 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Serialize_XDocument_NoRoot()", file="XmlNodeConverterTest.cs", label="string json = JsonConvert.SerializeXNode(d)", span="2752-2752"];
m11_766 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Serialize_XDocument_NoRoot()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(@''{}'', json)", span="2754-2754"];
m11_767 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Serialize_XDocument_NoRoot()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Serialize_XDocument_NoRoot()", span="2748-2748"];
m11_67 [cluster="System.IO.StringWriter.ToString()", file="XmlNodeConverterTest.cs", label="Entry System.IO.StringWriter.ToString()", span="0-0"];
m11_320 [cluster="Unk.Save", file="XmlNodeConverterTest.cs", label="Entry Unk.Save", span=""];
m11_48 [cluster="XmlNodeConverter.cstr", file="XmlNodeConverterTest.cs", label="Entry XmlNodeConverter.cstr", span=""];
m11_353 [cluster="Unk.WriteTo", file="XmlNodeConverterTest.cs", label="Entry Unk.WriteTo", span=""];
m11_277 [cluster="Unk.SetAttributeNode", file="XmlNodeConverterTest.cs", label="Entry Unk.SetAttributeNode", span=""];
m11_613 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmtpyElementWithArrayAttributeShouldWriteAttributes()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmtpyElementWithArrayAttributeShouldWriteAttributes()", span="1972-1972"];
m11_614 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmtpyElementWithArrayAttributeShouldWriteAttributes()", file="XmlNodeConverterTest.cs", label="string xml = @''<?xml version=''''1.0'''' encoding=''''utf-8'''' ?>\r\n<root xmlns:json=''''http://james.newtonking.com/projects/json''''>\r\n<A>\r\n<B name=''''sample'''' json:Array=''''true''''/>\r\n<C></C>\r\n<C></C>\r\n</A>\r\n</root>''", span="1974-1981"];
m11_615 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmtpyElementWithArrayAttributeShouldWriteAttributes()", file="XmlNodeConverterTest.cs", label="XmlDocument d = new XmlDocument()", span="1983-1983"];
m11_616 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmtpyElementWithArrayAttributeShouldWriteAttributes()", file="XmlNodeConverterTest.cs", label="d.LoadXml(xml)", span="1984-1984"];
m11_617 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmtpyElementWithArrayAttributeShouldWriteAttributes()", file="XmlNodeConverterTest.cs", label="string json = JsonConvert.SerializeXmlNode(d, Formatting.Indented)", span="1986-1986"];
m11_618 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmtpyElementWithArrayAttributeShouldWriteAttributes()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(@''{\r\n  ''''?xml'''': {\r\n    ''''@version'''': ''''1.0'''',\r\n    ''''@encoding'''': ''''utf-8''''\r\n  },\r\n  ''''root'''': {\r\n    ''''A'''': {\r\n      ''''B'''': [\r\n        {\r\n          ''''@name'''': ''''sample''''\r\n        }\r\n      ],\r\n      ''''C'''': [\r\n        '''''''',\r\n        ''''''''\r\n      ]\r\n    }\r\n  }\r\n}'', json)", span="1988-2006"];
m11_619 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmtpyElementWithArrayAttributeShouldWriteAttributes()", file="XmlNodeConverterTest.cs", label="XmlDocument d2 = JsonConvert.DeserializeXmlNode(json)", span="2008-2008"];
m11_620 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmtpyElementWithArrayAttributeShouldWriteAttributes()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(@''<?xml version=''''1.0'''' encoding=''''utf-8''''?>\r\n<root>\r\n  <A>\r\n    <B name=''''sample'''' />\r\n    <C></C>\r\n    <C></C>\r\n  </A>\r\n</root>'', ToStringWithDeclaration(d2, true))", span="2010-2017"];
m11_621 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmtpyElementWithArrayAttributeShouldWriteAttributes()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmtpyElementWithArrayAttributeShouldWriteAttributes()", span="1972-1972"];
m11_641 [cluster="Newtonsoft.Json.JsonSerializer.Deserialize(Newtonsoft.Json.JsonReader, System.Type)", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.JsonSerializer.Deserialize(Newtonsoft.Json.JsonReader, System.Type)", span="850-850"];
m11_666 [cluster="Unk.Add", file="XmlNodeConverterTest.cs", label="Entry Unk.Add", span=""];
m11_834 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeElementExplicitAttributeNamespace()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeElementExplicitAttributeNamespace()", span="2865-2865"];
m11_835 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeElementExplicitAttributeNamespace()", file="XmlNodeConverterTest.cs", label="var original = XElement.Parse(''<MyElement xmlns=\''http://example.com\'' />'')", span="2867-2867"];
m11_836 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeElementExplicitAttributeNamespace()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(@''<MyElement xmlns=''''http://example.com'''' />'', original.ToString())", span="2868-2868"];
m11_837 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeElementExplicitAttributeNamespace()", file="XmlNodeConverterTest.cs", label="var json = JsonConvert.SerializeObject(original)", span="2870-2870"];
m11_838 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeElementExplicitAttributeNamespace()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(@''{''''MyElement'''':{''''@xmlns'''':''''http://example.com''''}}'', json)", span="2871-2871"];
m11_839 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeElementExplicitAttributeNamespace()", file="XmlNodeConverterTest.cs", label="var deserialized = JsonConvert.DeserializeObject<XElement>(json)", span="2873-2873"];
m11_840 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeElementExplicitAttributeNamespace()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(@''<MyElement xmlns=''''http://example.com'''' />'', deserialized.ToString())", span="2874-2874"];
m11_841 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeElementExplicitAttributeNamespace()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeElementExplicitAttributeNamespace()", span="2865-2865"];
m11_98 [cluster="Newtonsoft.Json.JsonSerializer.CreateDefault(Newtonsoft.Json.JsonSerializerSettings)", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.JsonSerializer.CreateDefault(Newtonsoft.Json.JsonSerializerSettings)", span="615-615"];
m11_213 [cluster="Unk.DeepEquals", file="XmlNodeConverterTest.cs", label="Entry Unk.DeepEquals", span=""];
m11_279 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes_Encoding()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes_Encoding()", span="648-648"];
m11_280 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes_Encoding()", file="XmlNodeConverterTest.cs", label="XmlNode node = DeserializeXmlNode(@''{\r\n  ''''xs!:Choice!'''': {\r\n    ''''@msdata:IsDataSet!'''': '''''''',\r\n    ''''@xmlns:xs!'''': ''''http://www.w3.org/2001/XMLSchema'''',\r\n    ''''@xmlns:msdata'''': ''''urn:schemas-microsoft-com:xml-msdata'''',\r\n    ''''?xml-stylesheet'''': ''''href=\''''classic.xsl\'''' type=\''''text/xml\'''''''',\r\n    ''''#cdata-section'''': ''''<Kiwi>true</Kiwi>''''\r\n  }\r\n}'')", span="650-658"];
m11_281 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes_Encoding()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(@''<xs_x0021_:Choice_x0021_ msdata:IsDataSet_x0021_='''''''' xmlns:xs_x0021_=''''http://www.w3.org/2001/XMLSchema'''' xmlns:msdata=''''urn:schemas-microsoft-com:xml-msdata''''><?xml-stylesheet href=''''classic.xsl'''' type=''''text/xml''''?><![CDATA[<Kiwi>true</Kiwi>]]></xs_x0021_:Choice_x0021_>'', node.InnerXml)", span="660-660"];
m11_282 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes_Encoding()", file="XmlNodeConverterTest.cs", label="string json = SerializeXmlNode(node)", span="662-662"];
m11_283 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes_Encoding()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(@''{\r\n  ''''xs!:Choice!'''': {\r\n    ''''@msdata:IsDataSet!'''': '''''''',\r\n    ''''@xmlns:xs!'''': ''''http://www.w3.org/2001/XMLSchema'''',\r\n    ''''@xmlns:msdata'''': ''''urn:schemas-microsoft-com:xml-msdata'''',\r\n    ''''?xml-stylesheet'''': ''''href=\''''classic.xsl\'''' type=\''''text/xml\'''''''',\r\n    ''''#cdata-section'''': ''''<Kiwi>true</Kiwi>''''\r\n  }\r\n}'', json)", span="664-672"];
m11_284 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes_Encoding()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes_Encoding()", span="648-648"];
m11_97 [cluster="Newtonsoft.Json.JsonSerializerSettings.JsonSerializerSettings()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.JsonSerializerSettings.JsonSerializerSettings()", span="429-429"];
m11_95 [cluster="Newtonsoft.Json.Linq.JObject.JObject()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Linq.JObject.JObject()", span="87-87"];
m11_564 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNull()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNull()", span="1747-1747"];
m11_565 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNull()", file="XmlNodeConverterTest.cs", label="string json = @''{\r\n  ''''$id'''': ''''1'''',\r\n  ''''$values'''': null\r\n}''", span="1749-1752"];
m11_566 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNull()", file="XmlNodeConverterTest.cs", label="XmlNode node = JsonConvert.DeserializeXmlNode(json, ''root'')", span="1754-1754"];
m11_570 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNull()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(json, newJson)", span="1764-1764"];
m11_567 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNull()", file="XmlNodeConverterTest.cs", label="string xml = GetIndentedInnerXml(node)", span="1755-1755"];
m11_569 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNull()", file="XmlNodeConverterTest.cs", label="string newJson = JsonConvert.SerializeXmlNode(node, Formatting.Indented, true)", span="1762-1762"];
m11_568 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNull()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(@''<?xml version=''''1.0'''' encoding=''''utf-16''''?>\r\n<root xmlns:json=''''http://james.newtonking.com/projects/json'''' json:id=''''1''''>\r\n  <values xmlns=''''http://james.newtonking.com/projects/json'''' />\r\n</root>'', xml)", span="1757-1760"];
m11_571 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNull()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNull()", span="1747-1747"];
m11_15 [cluster="Unk.SerializeXmlNode", file="XmlNodeConverterTest.cs", label="Entry Unk.SerializeXmlNode", span=""];
m11_383 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RootObjectMultipleProperties()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RootObjectMultipleProperties()", span="1051-1051"];
m11_384 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RootObjectMultipleProperties()", file="XmlNodeConverterTest.cs", label="ExceptionAssert.Throws<JsonSerializationException>(\r\n                () => { XmlDocument newDoc = (XmlDocument)JsonConvert.DeserializeXmlNode(@''{Prop1:1,Prop2:2}''); },\r\n                ''JSON root object has multiple properties. The root object must have a single property in order to create a valid XML document. Consider specifying a DeserializeRootElementName. Path 'Prop2', line 1, position 15.'')", span="1053-1055"];
m11_385 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RootObjectMultipleProperties()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RootObjectMultipleProperties()", span="1051-1051"];
m11_271 [cluster="Unk.Element", file="XmlNodeConverterTest.cs", label="Entry Unk.Element", span=""];
m11_64 [cluster="Unk.Read", file="XmlNodeConverterTest.cs", label="Entry Unk.Read", span=""];
m11_362 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmptyNode()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmptyNode()", span="987-987"];
m11_363 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmptyNode()", file="XmlNodeConverterTest.cs", label="string xml = @''<?xml version=''''1.0'''' standalone=''''no''''?>\r\n			<root>\r\n			  <person id=''''1''''>\r\n				<name>Alan</name>\r\n				<url />\r\n			  </person>\r\n			  <person id=''''2''''>\r\n				<name>Louis</name>\r\n				<url>http://www.yahoo.com</url>\r\n			  </person>\r\n			</root>''", span="989-999"];
m11_364 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmptyNode()", file="XmlNodeConverterTest.cs", label="XmlDocument doc = new XmlDocument()", span="1001-1001"];
m11_365 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmptyNode()", file="XmlNodeConverterTest.cs", label="doc.LoadXml(xml)", span="1002-1002"];
m11_366 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmptyNode()", file="XmlNodeConverterTest.cs", label="string jsonText = SerializeXmlNode(doc)", span="1004-1004"];
m11_369 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmptyNode()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(doc.InnerXml, newDoc.InnerXml)", span="1029-1029"];
m11_367 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmptyNode()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(@''{\r\n  ''''?xml'''': {\r\n    ''''@version'''': ''''1.0'''',\r\n    ''''@standalone'''': ''''no''''\r\n  },\r\n  ''''root'''': {\r\n    ''''person'''': [\r\n      {\r\n        ''''@id'''': ''''1'''',\r\n        ''''name'''': ''''Alan'''',\r\n        ''''url'''': null\r\n      },\r\n      {\r\n        ''''@id'''': ''''2'''',\r\n        ''''name'''': ''''Louis'''',\r\n        ''''url'''': ''''http://www.yahoo.com''''\r\n      }\r\n    ]\r\n  }\r\n}'', jsonText)", span="1006-1025"];
m11_368 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmptyNode()", file="XmlNodeConverterTest.cs", label="XmlDocument newDoc = (XmlDocument)DeserializeXmlNode(jsonText)", span="1027-1027"];
m11_370 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmptyNode()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmptyNode()", span="987-987"];
m11_312 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Utf8StringWriter.Utf8StringWriter(System.Text.StringBuilder)", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Utf8StringWriter.Utf8StringWriter(System.Text.StringBuilder)", span="799-799"];
m11_313 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Utf8StringWriter.Utf8StringWriter(System.Text.StringBuilder)", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Utf8StringWriter.Utf8StringWriter(System.Text.StringBuilder)", span="799-799"];
m11_163 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DecimalContainer.DecimalContainer()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DecimalContainer.DecimalContainer()", span="351-351"];
m11_143 [cluster="Unk.ToArray", file="XmlNodeConverterTest.cs", label="Entry Unk.ToArray", span=""];
m11_522 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", file="XmlNodeConverterTest.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0"];
m11_24 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string)", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string)", span="91-91"];
m11_25 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string)", file="XmlNodeConverterTest.cs", label="return DeserializeXmlNode(json, null);", span="93-93"];
m11_26 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string)", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string)", span="91-91"];
m11_50 [cluster="Unk.ReadJson", file="XmlNodeConverterTest.cs", label="Entry Unk.ReadJson", span=""];
m11_294 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.XmlDocumentTypeSerialize()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.XmlDocumentTypeSerialize()", span="692-692"];
m11_295 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.XmlDocumentTypeSerialize()", file="XmlNodeConverterTest.cs", label="string xml = @''<?xml version=''''1.0'''' encoding=''''utf-8''''?><!DOCTYPE STOCKQUOTE PUBLIC ''''-//W3C//DTD StockQuote 1.5//EN'''' ''''http://www.idontexistnopenopewhatnope123.org/dtd/stockquote_1.5.dtd''''><STOCKQUOTE ROWCOUNT=''''2''''><RESULT><ROW><ASK>0</ASK><BID>0</BID><CHANGE>-16.310</CHANGE><COMPANYNAME>Dow Jones</COMPANYNAME><DATETIME>2014-04-17 15:50:37</DATETIME><DIVIDEND>0</DIVIDEND><EPS>0</EPS><EXCHANGE></EXCHANGE><HIGH>16460.490</HIGH><LASTDATETIME>2014-04-17 15:50:37</LASTDATETIME><LASTPRICE>16408.540</LASTPRICE><LOW>16368.140</LOW><OPEN>16424.140</OPEN><PCHANGE>-0.099</PCHANGE><PE>0</PE><PREVIOUSCLOSE>16424.850</PREVIOUSCLOSE><SHARES>0</SHARES><TICKER>DJII</TICKER><TRADES>0</TRADES><VOLUME>136188700</VOLUME><YEARHIGH>11309.000</YEARHIGH><YEARLOW>9302.280</YEARLOW><YIELD>0</YIELD></ROW><ROW><ASK>0</ASK><BID>0</BID><CHANGE>9.290</CHANGE><COMPANYNAME>NASDAQ</COMPANYNAME><DATETIME>2014-04-17 15:40:01</DATETIME><DIVIDEND>0</DIVIDEND><EPS>0</EPS><EXCHANGE></EXCHANGE><HIGH>4110.460</HIGH><LASTDATETIME>2014-04-17 15:40:01</LASTDATETIME><LASTPRICE>4095.520</LASTPRICE><LOW>4064.700</LOW><OPEN>4080.300</OPEN><PCHANGE>0.227</PCHANGE><PE>0</PE><PREVIOUSCLOSE>4086.230</PREVIOUSCLOSE><SHARES>0</SHARES><TICKER>COMP</TICKER><TRADES>0</TRADES><VOLUME>1784210100</VOLUME><YEARHIGH>4371.710</YEARHIGH><YEARLOW>3154.960</YEARLOW><YIELD>0</YIELD></ROW></RESULT><STATUS>Couldn't find ticker: SPIC?</STATUS><STATUSCODE>2</STATUSCODE></STOCKQUOTE>''", span="694-694"];
m11_296 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.XmlDocumentTypeSerialize()", file="XmlNodeConverterTest.cs", label="string expected = @''{\r\n  ''''?xml'''': {\r\n    ''''@version'''': ''''1.0'''',\r\n    ''''@encoding'''': ''''utf-8''''\r\n  },\r\n  ''''!DOCTYPE'''': {\r\n    ''''@name'''': ''''STOCKQUOTE'''',\r\n    ''''@public'''': ''''-//W3C//DTD StockQuote 1.5//EN'''',\r\n    ''''@system'''': ''''http://www.idontexistnopenopewhatnope123.org/dtd/stockquote_1.5.dtd''''\r\n  },\r\n  ''''STOCKQUOTE'''': {\r\n    ''''@ROWCOUNT'''': ''''2'''',\r\n    ''''RESULT'''': {\r\n      ''''ROW'''': [\r\n        {\r\n          ''''ASK'''': ''''0'''',\r\n          ''''BID'''': ''''0'''',\r\n          ''''CHANGE'''': ''''-16.310'''',\r\n          ''''COMPANYNAME'''': ''''Dow Jones'''',\r\n          ''''DATETIME'''': ''''2014-04-17 15:50:37'''',\r\n          ''''DIVIDEND'''': ''''0'''',\r\n          ''''EPS'''': ''''0'''',\r\n          ''''EXCHANGE'''': '''''''',\r\n          ''''HIGH'''': ''''16460.490'''',\r\n          ''''LASTDATETIME'''': ''''2014-04-17 15:50:37'''',\r\n          ''''LASTPRICE'''': ''''16408.540'''',\r\n          ''''LOW'''': ''''16368.140'''',\r\n          ''''OPEN'''': ''''16424.140'''',\r\n          ''''PCHANGE'''': ''''-0.099'''',\r\n          ''''PE'''': ''''0'''',\r\n          ''''PREVIOUSCLOSE'''': ''''16424.850'''',\r\n          ''''SHARES'''': ''''0'''',\r\n          ''''TICKER'''': ''''DJII'''',\r\n          ''''TRADES'''': ''''0'''',\r\n          ''''VOLUME'''': ''''136188700'''',\r\n          ''''YEARHIGH'''': ''''11309.000'''',\r\n          ''''YEARLOW'''': ''''9302.280'''',\r\n          ''''YIELD'''': ''''0''''\r\n        },\r\n        {\r\n          ''''ASK'''': ''''0'''',\r\n          ''''BID'''': ''''0'''',\r\n          ''''CHANGE'''': ''''9.290'''',\r\n          ''''COMPANYNAME'''': ''''NASDAQ'''',\r\n          ''''DATETIME'''': ''''2014-04-17 15:40:01'''',\r\n          ''''DIVIDEND'''': ''''0'''',\r\n          ''''EPS'''': ''''0'''',\r\n          ''''EXCHANGE'''': '''''''',\r\n          ''''HIGH'''': ''''4110.460'''',\r\n          ''''LASTDATETIME'''': ''''2014-04-17 15:40:01'''',\r\n          ''''LASTPRICE'''': ''''4095.520'''',\r\n          ''''LOW'''': ''''4064.700'''',\r\n          ''''OPEN'''': ''''4080.300'''',\r\n          ''''PCHANGE'''': ''''0.227'''',\r\n          ''''PE'''': ''''0'''',\r\n          ''''PREVIOUSCLOSE'''': ''''4086.230'''',\r\n          ''''SHARES'''': ''''0'''',\r\n          ''''TICKER'''': ''''COMP'''',\r\n          ''''TRADES'''': ''''0'''',\r\n          ''''VOLUME'''': ''''1784210100'''',\r\n          ''''YEARHIGH'''': ''''4371.710'''',\r\n          ''''YEARLOW'''': ''''3154.960'''',\r\n          ''''YIELD'''': ''''0''''\r\n        }\r\n      ]\r\n    },\r\n    ''''STATUS'''': ''''Couldn't find ticker: SPIC?'''',\r\n    ''''STATUSCODE'''': ''''2''''\r\n  }\r\n}''", span="696-765"];
m11_299 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.XmlDocumentTypeSerialize()", file="XmlNodeConverterTest.cs", label="doc1.LoadXml(xml)", span="769-769"];
m11_303 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.XmlDocumentTypeSerialize()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(xml, ToStringWithDeclaration(doc11))", span="777-777"];
m11_304 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.XmlDocumentTypeSerialize()", file="XmlNodeConverterTest.cs", label="XDocument doc2 = XDocument.Parse(xml)", span="780-780"];
m11_308 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.XmlDocumentTypeSerialize()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(xml, ToStringWithDeclaration(doc22))", span="788-788"];
m11_297 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.XmlDocumentTypeSerialize()", file="XmlNodeConverterTest.cs", label="XmlDocument doc1 = new XmlDocument()", span="767-767"];
m11_301 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.XmlDocumentTypeSerialize()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(expected, json1)", span="773-773"];
m11_306 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.XmlDocumentTypeSerialize()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(expected, json2)", span="784-784"];
m11_298 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.XmlDocumentTypeSerialize()", file="XmlNodeConverterTest.cs", label="doc1.XmlResolver = null", span="768-768"];
m11_300 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.XmlDocumentTypeSerialize()", file="XmlNodeConverterTest.cs", label="string json1 = JsonConvert.SerializeXmlNode(doc1, Formatting.Indented)", span="771-771"];
m11_302 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.XmlDocumentTypeSerialize()", file="XmlNodeConverterTest.cs", label="XmlDocument doc11 = JsonConvert.DeserializeXmlNode(json1)", span="775-775"];
m11_305 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.XmlDocumentTypeSerialize()", file="XmlNodeConverterTest.cs", label="string json2 = JsonConvert.SerializeXNode(doc2, Formatting.Indented)", span="782-782"];
m11_307 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.XmlDocumentTypeSerialize()", file="XmlNodeConverterTest.cs", label="XDocument doc22 = JsonConvert.DeserializeXNode(json2)", span="786-786"];
m11_309 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.XmlDocumentTypeSerialize()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.XmlDocumentTypeSerialize()", span="692-692"];
m11_75 [cluster="Unk.DeserializeXNode", file="XmlNodeConverterTest.cs", label="Entry Unk.DeserializeXNode", span=""];
m11_781 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Deserialize_XDocument_NoRootWithDeclaration()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Deserialize_XDocument_NoRootWithDeclaration()", span="2778-2778"];
m11_782 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Deserialize_XDocument_NoRootWithDeclaration()", file="XmlNodeConverterTest.cs", label="XDocument d = JsonConvert.DeserializeXNode(@''{''''?xml'''':{''''@version'''':''''Version!'''',''''@encoding'''':''''Encoding!'''',''''@standalone'''':''''Standalone!''''}}'')", span="2780-2780"];
m11_783 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Deserialize_XDocument_NoRootWithDeclaration()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(null, d.Root)", span="2782-2782"];
m11_784 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Deserialize_XDocument_NoRootWithDeclaration()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(''Version!'', d.Declaration.Version)", span="2783-2783"];
m11_785 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Deserialize_XDocument_NoRootWithDeclaration()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(''Encoding!'', d.Declaration.Encoding)", span="2784-2784"];
m11_786 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Deserialize_XDocument_NoRootWithDeclaration()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(''Standalone!'', d.Declaration.Standalone)", span="2785-2785"];
m11_787 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Deserialize_XDocument_NoRootWithDeclaration()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Deserialize_XDocument_NoRootWithDeclaration()", span="2778-2778"];
m11_345 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.GetIndentedInnerXml(XmlNode)", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.GetIndentedInnerXml(XmlNode)", span="946-946"];
m11_346 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.GetIndentedInnerXml(XmlNode)", file="XmlNodeConverterTest.cs", label="XmlWriterSettings settings = new XmlWriterSettings()", span="948-948"];
m11_350 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.GetIndentedInnerXml(XmlNode)", file="XmlNodeConverterTest.cs", label="node.WriteTo(writer)", span="955-955"];
m11_347 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.GetIndentedInnerXml(XmlNode)", file="XmlNodeConverterTest.cs", label="settings.Indent = true", span="949-949"];
m11_348 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.GetIndentedInnerXml(XmlNode)", file="XmlNodeConverterTest.cs", label="StringWriter sw = new StringWriter()", span="951-951"];
m11_349 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.GetIndentedInnerXml(XmlNode)", file="XmlNodeConverterTest.cs", label="XmlWriter writer = XmlWriter.Create(sw, settings)", span="953-953"];
m11_351 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.GetIndentedInnerXml(XmlNode)", file="XmlNodeConverterTest.cs", label="return sw.ToString();", span="958-958"];
m11_352 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.GetIndentedInnerXml(XmlNode)", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.GetIndentedInnerXml(XmlNode)", span="946-946"];
m11_16 [cluster="XmlNodeReader.cstr", file="XmlNodeConverterTest.cs", label="Entry XmlNodeReader.cstr", span=""];
m11_668 [cluster="Newtonsoft.Json.JsonSerializationException.JsonSerializationException(string)", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.JsonSerializationException.JsonSerializationException(string)", span="52-52"];
m11_556 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataWithNullValue()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataWithNullValue()", span="1727-1727"];
m11_557 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataWithNullValue()", file="XmlNodeConverterTest.cs", label="string json = @''{\r\n  ''''$id'''': null\r\n}''", span="1729-1731"];
m11_558 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataWithNullValue()", file="XmlNodeConverterTest.cs", label="XmlNode node = JsonConvert.DeserializeXmlNode(json, ''root'')", span="1733-1733"];
m11_559 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataWithNullValue()", file="XmlNodeConverterTest.cs", label="string xml = GetIndentedInnerXml(node)", span="1734-1734"];
m11_561 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataWithNullValue()", file="XmlNodeConverterTest.cs", label="string newJson = JsonConvert.SerializeXmlNode(node, Formatting.Indented, true)", span="1739-1739"];
m11_560 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataWithNullValue()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(@''<?xml version=''''1.0'''' encoding=''''utf-16''''?>\r\n<root xmlns:json=''''http://james.newtonking.com/projects/json'''' json:id='''''''' />'', xml)", span="1736-1737"];
m11_562 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataWithNullValue()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(@''{\r\n  ''''$id'''': ''''''''\r\n}'', newJson)", span="1741-1743"];
m11_563 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataWithNullValue()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataWithNullValue()", span="1727-1727"];
m11_310 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ToStringWithDeclaration(XmlDocument, bool)", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ToStringWithDeclaration(XmlDocument, bool)", span="816-816"];
m11_322 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ToStringWithDeclaration(XmlDocument, bool)", file="XmlNodeConverterTest.cs", label="StringBuilder builder = new StringBuilder()", span="818-818"];
m11_323 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ToStringWithDeclaration(XmlDocument, bool)", file="XmlNodeConverterTest.cs", label="var writer = XmlWriter.Create(new Utf8StringWriter(builder), new XmlWriterSettings { Indent = indent })", span="819-819"];
m11_324 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ToStringWithDeclaration(XmlDocument, bool)", file="XmlNodeConverterTest.cs", label="doc.Save(writer)", span="821-821"];
m11_325 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ToStringWithDeclaration(XmlDocument, bool)", file="XmlNodeConverterTest.cs", label="return builder.ToString();", span="823-823"];
m11_326 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ToStringWithDeclaration(XmlDocument, bool)", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ToStringWithDeclaration(XmlDocument, bool)", span="816-816"];
m11_467 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Encoding()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Encoding()", span="1366-1366"];
m11_468 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Encoding()", file="XmlNodeConverterTest.cs", label="XmlDocument doc = new XmlDocument()", span="1368-1368"];
m11_469 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Encoding()", file="XmlNodeConverterTest.cs", label="doc.LoadXml(@''<name>O''''Connor</name>'')", span="1370-1370"];
m11_470 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Encoding()", file="XmlNodeConverterTest.cs", label="string json = SerializeXmlNode(doc)", span="1372-1372"];
m11_471 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Encoding()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(@''{\r\n  ''''name'''': ''''O\''''Connor''''\r\n}'', json)", span="1373-1375"];
m11_472 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Encoding()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Encoding()", span="1366-1366"];
m11_651 [cluster="System.IO.MemoryStream.MemoryStream()", file="XmlNodeConverterTest.cs", label="Entry System.IO.MemoryStream.MemoryStream()", span="0-0"];
m11_580 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleItemArrayPropertySerialization()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleItemArrayPropertySerialization()", span="1855-1855"];
m11_581 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleItemArrayPropertySerialization()", file="XmlNodeConverterTest.cs", label="Product product = new Product()", span="1857-1857"];
m11_582 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleItemArrayPropertySerialization()", file="XmlNodeConverterTest.cs", label="product.Name = ''Apple''", span="1859-1859"];
m11_583 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleItemArrayPropertySerialization()", file="XmlNodeConverterTest.cs", label="product.ExpiryDate = new DateTime(2008, 12, 28, 0, 0, 0, DateTimeKind.Utc)", span="1860-1860"];
m11_584 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleItemArrayPropertySerialization()", file="XmlNodeConverterTest.cs", label="product.Price = 3.99M", span="1861-1861"];
m11_585 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleItemArrayPropertySerialization()", file="XmlNodeConverterTest.cs", label="product.Sizes = new string[] { ''Small'' }", span="1862-1862"];
m11_586 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleItemArrayPropertySerialization()", file="XmlNodeConverterTest.cs", label="string output = JsonConvert.SerializeObject(product, new IsoDateTimeConverter())", span="1864-1864"];
m11_587 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleItemArrayPropertySerialization()", file="XmlNodeConverterTest.cs", label="XmlDocument xmlProduct = JsonConvert.DeserializeXmlNode(output, ''product'', true)", span="1866-1866"];
m11_588 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleItemArrayPropertySerialization()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(@''<product>\r\n  <Name>Apple</Name>\r\n  <ExpiryDate>2008-12-28T00:00:00Z</ExpiryDate>\r\n  <Price>3.99</Price>\r\n  <Sizes json:Array=''''true'''' xmlns:json=''''http://james.newtonking.com/projects/json''''>Small</Sizes>\r\n</product>'', IndentXml(xmlProduct.InnerXml))", span="1868-1873"];
m11_589 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleItemArrayPropertySerialization()", file="XmlNodeConverterTest.cs", label="string output2 = JsonConvert.SerializeXmlNode(xmlProduct.DocumentElement, Formatting.Indented)", span="1875-1875"];
m11_590 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleItemArrayPropertySerialization()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(@''{\r\n  ''''product'''': {\r\n    ''''Name'''': ''''Apple'''',\r\n    ''''ExpiryDate'''': ''''2008-12-28T00:00:00Z'''',\r\n    ''''Price'''': ''''3.99'''',\r\n    ''''Sizes'''': [\r\n      ''''Small''''\r\n    ]\r\n  }\r\n}'', output2)", span="1877-1886"];
m11_591 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleItemArrayPropertySerialization()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleItemArrayPropertySerialization()", span="1855-1855"];
m11_828 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyNodeAndOmitRoot_XElement()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyNodeAndOmitRoot_XElement()", span="2853-2853"];
m11_829 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyNodeAndOmitRoot_XElement()", file="XmlNodeConverterTest.cs", label="string xmlString = @''<myemptynode />''", span="2855-2855"];
m11_830 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyNodeAndOmitRoot_XElement()", file="XmlNodeConverterTest.cs", label="var xml = XElement.Parse(xmlString)", span="2857-2857"];
m11_831 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyNodeAndOmitRoot_XElement()", file="XmlNodeConverterTest.cs", label="string json = JsonConvert.SerializeXNode(xml, Formatting.Indented, true)", span="2859-2859"];
m11_832 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyNodeAndOmitRoot_XElement()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(''null'', json)", span="2861-2861"];
m11_833 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyNodeAndOmitRoot_XElement()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyNodeAndOmitRoot_XElement()", span="2853-2853"];
m11_278 [cluster="Unk.AppendChild", file="XmlNodeConverterTest.cs", label="Entry Unk.AppendChild", span=""];
m11_20 [cluster="Unk.MoveToContent", file="XmlNodeConverterTest.cs", label="Entry Unk.MoveToContent", span=""];
m11_354 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleTextNode()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleTextNode()", span="962-962"];
m11_355 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleTextNode()", file="XmlNodeConverterTest.cs", label="string xml = @''<?xml version=''''1.0'''' standalone=''''no''''?>\r\n			<root>\r\n			  <person id=''''1''''>\r\n	  			<name>Alan</name>\r\n		  		<url>http://www.google.com</url>\r\n			  </person>\r\n			  <person id=''''2''''>\r\n			  	<name>Louis</name>\r\n				  <url>http://www.yahoo.com</url>\r\n			  </person>\r\n			</root>''", span="964-974"];
m11_356 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleTextNode()", file="XmlNodeConverterTest.cs", label="XmlDocument doc = new XmlDocument()", span="976-976"];
m11_357 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleTextNode()", file="XmlNodeConverterTest.cs", label="doc.LoadXml(xml)", span="977-977"];
m11_358 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleTextNode()", file="XmlNodeConverterTest.cs", label="string jsonText = SerializeXmlNode(doc)", span="979-979"];
m11_360 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleTextNode()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(doc.InnerXml, newDoc.InnerXml)", span="983-983"];
m11_359 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleTextNode()", file="XmlNodeConverterTest.cs", label="XmlDocument newDoc = (XmlDocument)DeserializeXmlNode(jsonText)", span="981-981"];
m11_361 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleTextNode()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleTextNode()", span="962-962"];
m11_398 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", span="1085-1085"];
m11_399 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs", label="string arrayXml = @''<root xmlns:json=''''http://james.newtonking.com/projects/json''''>\r\n			  <person id=''''1''''>\r\n				  <name>Alan</name>\r\n				  <url>http://www.google.com</url>\r\n				  <role json:Array=''''true''''>Admin</role>\r\n			  </person>\r\n			</root>''", span="1087-1093"];
m11_400 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs", label="XmlDocument arrayDoc = new XmlDocument()", span="1095-1095"];
m11_401 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs", label="arrayDoc.LoadXml(arrayXml)", span="1096-1096"];
m11_402 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs", label="string arrayJsonText = SerializeXmlNode(arrayDoc)", span="1098-1098"];
m11_403 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs", label="string expected = @''{\r\n  ''''root'''': {\r\n    ''''person'''': {\r\n      ''''@id'''': ''''1'''',\r\n      ''''name'''': ''''Alan'''',\r\n      ''''url'''': ''''http://www.google.com'''',\r\n      ''''role'''': [\r\n        ''''Admin''''\r\n      ]\r\n    }\r\n  }\r\n}''", span="1099-1110"];
m11_404 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(expected, arrayJsonText)", span="1111-1111"];
m11_405 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs", label="arrayXml = @''<root xmlns:json=''''http://james.newtonking.com/projects/json''''>\r\n			  <person id=''''1''''>\r\n				  <name>Alan</name>\r\n				  <url>http://www.google.com</url>\r\n				  <role json:Array=''''true''''>Admin1</role>\r\n				  <role json:Array=''''true''''>Admin2</role>\r\n			  </person>\r\n			</root>''", span="1113-1120"];
m11_406 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs", label="arrayDoc = new XmlDocument()", span="1122-1122"];
m11_407 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs", label="arrayDoc.LoadXml(arrayXml)", span="1123-1123"];
m11_408 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs", label="arrayJsonText = SerializeXmlNode(arrayDoc)", span="1125-1125"];
m11_409 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs", label="expected = @''{\r\n  ''''root'''': {\r\n    ''''person'''': {\r\n      ''''@id'''': ''''1'''',\r\n      ''''name'''': ''''Alan'''',\r\n      ''''url'''': ''''http://www.google.com'''',\r\n      ''''role'''': [\r\n        ''''Admin1'''',\r\n        ''''Admin2''''\r\n      ]\r\n    }\r\n  }\r\n}''", span="1126-1138"];
m11_410 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(expected, arrayJsonText)", span="1139-1139"];
m11_411 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs", label="arrayXml = @''<root xmlns:json=''''http://james.newtonking.com/projects/json''''>\r\n			  <person id=''''1''''>\r\n				  <name>Alan</name>\r\n				  <url>http://www.google.com</url>\r\n				  <role json:Array=''''false''''>Admin1</role>\r\n			  </person>\r\n			</root>''", span="1141-1147"];
m11_412 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs", label="arrayDoc = new XmlDocument()", span="1149-1149"];
m11_413 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs", label="arrayDoc.LoadXml(arrayXml)", span="1150-1150"];
m11_414 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs", label="arrayJsonText = SerializeXmlNode(arrayDoc)", span="1152-1152"];
m11_415 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", color=green, community=0, file="XmlNodeConverterTest.cs", label="expected = @''{\r\n  ''''root'''': {\r\n    ''''person'''': {\r\n      ''''@id'''': ''''1'''',\r\n      ''''name'''': ''''Alan'''',\r\n      ''''url'''': ''''http://www.google.com'''',\r\n      ''''role'''': ''''Admin1''''\r\n    }\r\n  }\r\n}''", prediction=43, span="1153-1162"];
m11_416 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", color=green, community=0, file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(expected, arrayJsonText)", prediction=44, span="1163-1163"];
m11_417 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", span="1085-1085"];
m11_45 [cluster="Newtonsoft.Json.JsonTextReader.JsonTextReader(System.IO.TextReader)", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.JsonTextReader.JsonTextReader(System.IO.TextReader)", span="75-75"];
m11_451 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RoundTripNestedArrays()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RoundTripNestedArrays()", span="1271-1271"];
m11_452 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RoundTripNestedArrays()", file="XmlNodeConverterTest.cs", label="string json = @''{\r\n  ''''available_sizes'''': [\r\n    [\r\n      ''''assets/images/resized/0001/1070/11070v1-max-150x150.jpg'''',\r\n      ''''assets/images/resized/0001/1070/11070v1-max-150x150.jpg''''\r\n    ],\r\n    [\r\n      ''''assets/images/resized/0001/1070/11070v1-max-250x250.jpg'''',\r\n      ''''assets/images/resized/0001/1070/11070v1-max-250x250.jpg''''\r\n    ],\r\n    [\r\n      ''''assets/images/resized/0001/1070/11070v1-max-250x250.jpg''''\r\n    ]\r\n  ]\r\n}''", span="1273-1287"];
m11_453 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RoundTripNestedArrays()", file="XmlNodeConverterTest.cs", label="XmlDocument newDoc = JsonConvert.DeserializeXmlNode(json, ''myRoot'', true)", span="1290-1290"];
m11_455 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RoundTripNestedArrays()", file="XmlNodeConverterTest.cs", label="XDocument newXDoc = JsonConvert.DeserializeXNode(json, ''myRoot'', true)", span="1308-1308"];
m11_458 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RoundTripNestedArrays()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(json, newJson)", span="1327-1327"];
m11_454 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RoundTripNestedArrays()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(@''<myRoot>\r\n  <available_sizes json:Array=''''true'''' xmlns:json=''''http://james.newtonking.com/projects/json''''>\r\n    <available_sizes>assets/images/resized/0001/1070/11070v1-max-150x150.jpg</available_sizes>\r\n    <available_sizes>assets/images/resized/0001/1070/11070v1-max-150x150.jpg</available_sizes>\r\n  </available_sizes>\r\n  <available_sizes json:Array=''''true'''' xmlns:json=''''http://james.newtonking.com/projects/json''''>\r\n    <available_sizes>assets/images/resized/0001/1070/11070v1-max-250x250.jpg</available_sizes>\r\n    <available_sizes>assets/images/resized/0001/1070/11070v1-max-250x250.jpg</available_sizes>\r\n  </available_sizes>\r\n  <available_sizes json:Array=''''true'''' xmlns:json=''''http://james.newtonking.com/projects/json''''>\r\n    <available_sizes json:Array=''''true''''>assets/images/resized/0001/1070/11070v1-max-250x250.jpg</available_sizes>\r\n  </available_sizes>\r\n</myRoot>'', IndentXml(newDoc.InnerXml))", span="1292-1304"];
m11_457 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RoundTripNestedArrays()", file="XmlNodeConverterTest.cs", label="string newJson = JsonConvert.SerializeXmlNode(newDoc, Formatting.Indented, true)", span="1326-1326"];
m11_456 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RoundTripNestedArrays()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(@''<myRoot>\r\n  <available_sizes json:Array=''''true'''' xmlns:json=''''http://james.newtonking.com/projects/json''''>\r\n    <available_sizes>assets/images/resized/0001/1070/11070v1-max-150x150.jpg</available_sizes>\r\n    <available_sizes>assets/images/resized/0001/1070/11070v1-max-150x150.jpg</available_sizes>\r\n  </available_sizes>\r\n  <available_sizes json:Array=''''true'''' xmlns:json=''''http://james.newtonking.com/projects/json''''>\r\n    <available_sizes>assets/images/resized/0001/1070/11070v1-max-250x250.jpg</available_sizes>\r\n    <available_sizes>assets/images/resized/0001/1070/11070v1-max-250x250.jpg</available_sizes>\r\n  </available_sizes>\r\n  <available_sizes json:Array=''''true'''' xmlns:json=''''http://james.newtonking.com/projects/json''''>\r\n    <available_sizes json:Array=''''true''''>assets/images/resized/0001/1070/11070v1-max-250x250.jpg</available_sizes>\r\n  </available_sizes>\r\n</myRoot>'', IndentXml(newXDoc.ToString(SaveOptions.DisableFormatting)))", span="1310-1322"];
m11_459 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RoundTripNestedArrays()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RoundTripNestedArrays()", span="1271-1271"];
m11_165 [cluster="Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string, Newtonsoft.Json.JsonSerializerSettings)", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string, Newtonsoft.Json.JsonSerializerSettings)", span="766-766"];
m11_572 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmptyPropertyName()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmptyPropertyName()", span="1768-1768"];
m11_573 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmptyPropertyName()", file="XmlNodeConverterTest.cs", label="string json = @''{\r\n  ''''8452309520V2'''': {\r\n    '''''''': {\r\n      ''''CLIENT'''': {\r\n        ''''ID_EXPIRATION_1'''': {\r\n          ''''VALUE'''': ''''12/12/2000'''',\r\n          ''''DATATYPE'''': ''''D'''',\r\n          ''''MSG'''': ''''Missing Identification Exp. Date 1''''\r\n        },\r\n        ''''ID_ISSUEDATE_1'''': {\r\n          ''''VALUE'''': '''''''',\r\n          ''''DATATYPE'''': ''''D'''',\r\n          ''''MSG'''': ''''Missing Identification Issue Date 1''''\r\n        }\r\n      }\r\n    },\r\n    ''''457463534534'''': {\r\n      ''''ACCOUNT'''': {\r\n        ''''FUNDING_SOURCE'''': {\r\n          ''''VALUE'''': ''''FS0'''',\r\n          ''''DATATYPE'''': ''''L'''',\r\n          ''''MSG'''': ''''Missing Source of Funds''''\r\n        }\r\n      }\r\n    }\r\n  }\r\n}{\r\n  ''''34534634535345'''': {\r\n    '''''''': {\r\n      ''''CLIENT'''': {\r\n        ''''ID_NUMBER_1'''': {\r\n          ''''VALUE'''': '''''''',\r\n          ''''DATATYPE'''': ''''S'''',\r\n          ''''MSG'''': ''''Missing Picture ID''''\r\n        },\r\n        ''''ID_EXPIRATION_1'''': {\r\n          ''''VALUE'''': ''''12/12/2000'''',\r\n          ''''DATATYPE'''': ''''D'''',\r\n          ''''MSG'''': ''''Missing Picture ID''''\r\n        },\r\n        ''''WALK_IN'''': {\r\n          ''''VALUE'''': '''''''',\r\n          ''''DATATYPE'''': ''''L'''',\r\n          ''''MSG'''': ''''Missing Walk in''''\r\n        },\r\n        ''''PERSONAL_MEETING'''': {\r\n          ''''VALUE'''': ''''PM1'''',\r\n          ''''DATATYPE'''': ''''L'''',\r\n          ''''MSG'''': ''''Missing Met Client in Person''''\r\n        },\r\n        ''''ID_ISSUEDATE_1'''': {\r\n          ''''VALUE'''': '''''''',\r\n          ''''DATATYPE'''': ''''D'''',\r\n          ''''MSG'''': ''''Missing Picture ID''''\r\n        },\r\n        ''''PHOTO_ID'''': {\r\n          ''''VALUE'''': '''''''',\r\n          ''''DATATYPE'''': ''''L'''',\r\n          ''''MSG'''': ''''Missing Picture ID''''\r\n        },\r\n        ''''ID_TYPE_1'''': {\r\n          ''''VALUE'''': '''''''',\r\n          ''''DATATYPE'''': ''''L'''',\r\n          ''''MSG'''': ''''Missing Picture ID''''\r\n        }\r\n      }\r\n    },\r\n    ''''45635624523'''': {\r\n      ''''ACCOUNT'''': {\r\n        ''''FUNDING_SOURCE'''': {\r\n          ''''VALUE'''': ''''FS1'''',\r\n          ''''DATATYPE'''': ''''L'''',\r\n          ''''MSG'''': ''''Missing Source of Funds''''\r\n        }\r\n      }\r\n    }\r\n  }\r\n}''", span="1770-1847"];
m11_574 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmptyPropertyName()", file="XmlNodeConverterTest.cs", label="ExceptionAssert.Throws<JsonSerializationException>(\r\n                () => { DeserializeXmlNode(json); },\r\n                ''XmlNodeConverter cannot convert JSON with an empty property name to XML. Path '8452309520V2.', line 3, position 9.'')", span="1849-1851"];
m11_575 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmptyPropertyName()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmptyPropertyName()", span="1768-1768"];
m11_483 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeExample()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeExample()", span="1409-1409"];
m11_484 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeExample()", file="XmlNodeConverterTest.cs", label="string xml = @''<?xml version=''''1.0'''' standalone=''''no''''?>\r\n			<root>\r\n			  <person id=''''1''''>\r\n				<name>Alan</name>\r\n				<url>http://www.google.com</url>\r\n			  </person>\r\n			  <person id=''''2''''>\r\n				<name>Louis</name>\r\n				<url>http://www.yahoo.com</url>\r\n			  </person>\r\n			</root>''", span="1411-1421"];
m11_485 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeExample()", file="XmlNodeConverterTest.cs", label="XmlDocument doc = new XmlDocument()", span="1423-1423"];
m11_486 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeExample()", file="XmlNodeConverterTest.cs", label="doc.LoadXml(xml)", span="1424-1424"];
m11_487 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeExample()", file="XmlNodeConverterTest.cs", label="string jsonText = SerializeXmlNode(doc)", span="1426-1426"];
m11_491 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeExample()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(doc.InnerXml, newDoc.InnerXml)", span="1474-1474"];
m11_488 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeExample()", file="XmlNodeConverterTest.cs", label="jsonText = JObject.Parse(jsonText).ToString()", span="1449-1449"];
m11_489 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeExample()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(@''{\r\n  ''''?xml'''': {\r\n    ''''@version'''': ''''1.0'''',\r\n    ''''@standalone'''': ''''no''''\r\n  },\r\n  ''''root'''': {\r\n    ''''person'''': [\r\n      {\r\n        ''''@id'''': ''''1'''',\r\n        ''''name'''': ''''Alan'''',\r\n        ''''url'''': ''''http://www.google.com''''\r\n      },\r\n      {\r\n        ''''@id'''': ''''2'''',\r\n        ''''name'''': ''''Louis'''',\r\n        ''''url'''': ''''http://www.yahoo.com''''\r\n      }\r\n    ]\r\n  }\r\n}'', jsonText)", span="1451-1470"];
m11_490 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeExample()", file="XmlNodeConverterTest.cs", label="XmlDocument newDoc = (XmlDocument)DeserializeXmlNode(jsonText)", span="1472-1472"];
m11_492 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeExample()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeExample()", span="1409-1409"];
m11_679 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNodeDefaultNamespace()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNodeDefaultNamespace()", span="2329-2329"];
m11_680 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNodeDefaultNamespace()", file="XmlNodeConverterTest.cs", label="string xaml = @''<Grid xmlns=''''http://schemas.microsoft.com/winfx/2006/xaml/presentation'''' xmlns:x=''''http://schemas.microsoft.com/winfx/2006/xaml'''' xmlns:toolkit=''''clr-namespace:Microsoft.Phone.Controls;assembly=Microsoft.Phone.Controls.Toolkit'''' Style=''''{StaticResource trimFormGrid}'''' x:Name=''''TrimObjectForm''''>\r\n  <Grid.ColumnDefinitions>\r\n    <ColumnDefinition Width=''''63*'''' />\r\n    <ColumnDefinition Width=''''320*'''' />\r\n  </Grid.ColumnDefinitions>\r\n  <Grid.RowDefinitions xmlns=''''''''>\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n  </Grid.RowDefinitions>\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding TypedTitle, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordTypedTitle'''' Grid.Column=''''1'''' Grid.Row=''''0'''' xmlns='''''''' />\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding ExternalReference, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordExternalReference'''' Grid.Column=''''1'''' Grid.Row=''''1'''' xmlns='''''''' />\r\n  <toolkit:DatePicker Style=''''{StaticResource trimFormGrid_DP}'''' Value=''''{Binding DateCreated, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordDateCreated'''' Grid.Column=''''1'''' Grid.Row=''''2'''' />\r\n  <toolkit:DatePicker Style=''''{StaticResource trimFormGrid_DP}'''' Value=''''{Binding DateDue, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordDateDue'''' Grid.Column=''''1'''' Grid.Row=''''3'''' />\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding Author, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordAuthor'''' Grid.Column=''''1'''' Grid.Row=''''4'''' xmlns='''''''' />\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding Container, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordContainer'''' Grid.Column=''''1'''' Grid.Row=''''5'''' xmlns='''''''' />\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding IsEnclosed, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordIsEnclosed'''' Grid.Column=''''1'''' Grid.Row=''''6'''' xmlns='''''''' />\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding Assignee, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordAssignee'''' Grid.Column=''''1'''' Grid.Row=''''7'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Title (Free Text Part)'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''0'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''External ID'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''1'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Date Created'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''2'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Date Due'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''3'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Author'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''4'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Container'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''5'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Enclosed?'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''6'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Assignee'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''7'''' xmlns='''''''' />\r\n</Grid>''", span="2331-2362"];
m11_681 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNodeDefaultNamespace()", file="XmlNodeConverterTest.cs", label="XmlDocument document = new XmlDocument()", span="2364-2364"];
m11_682 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNodeDefaultNamespace()", file="XmlNodeConverterTest.cs", label="document.LoadXml(xaml)", span="2365-2365"];
m11_683 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNodeDefaultNamespace()", file="XmlNodeConverterTest.cs", label="string json = JsonConvert.SerializeXmlNode(document, Formatting.Indented)", span="2367-2367"];
m11_684 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNodeDefaultNamespace()", file="XmlNodeConverterTest.cs", label="string expectedJson = @''{\r\n  ''''Grid'''': {\r\n    ''''@xmlns'''': ''''http://schemas.microsoft.com/winfx/2006/xaml/presentation'''',\r\n    ''''@xmlns:x'''': ''''http://schemas.microsoft.com/winfx/2006/xaml'''',\r\n    ''''@xmlns:toolkit'''': ''''clr-namespace:Microsoft.Phone.Controls;assembly=Microsoft.Phone.Controls.Toolkit'''',\r\n    ''''@Style'''': ''''{StaticResource trimFormGrid}'''',\r\n    ''''@x:Name'''': ''''TrimObjectForm'''',\r\n    ''''Grid.ColumnDefinitions'''': {\r\n      ''''ColumnDefinition'''': [\r\n        {\r\n          ''''@Width'''': ''''63*''''\r\n        },\r\n        {\r\n          ''''@Width'''': ''''320*''''\r\n        }\r\n      ]\r\n    },\r\n    ''''Grid.RowDefinitions'''': {\r\n      ''''@xmlns'''': '''''''',\r\n      ''''RowDefinition'''': [\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null\r\n      ]\r\n    },\r\n    ''''TextBox'''': [\r\n      {\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_TB}'''',\r\n        ''''@Text'''': ''''{Binding TypedTitle, Converter={StaticResource trimPropertyConverter}}'''',\r\n        ''''@Name'''': ''''RecordTypedTitle'''',\r\n        ''''@Grid.Column'''': ''''1'''',\r\n        ''''@Grid.Row'''': ''''0'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_TB}'''',\r\n        ''''@Text'''': ''''{Binding ExternalReference, Converter={StaticResource trimPropertyConverter}}'''',\r\n        ''''@Name'''': ''''RecordExternalReference'''',\r\n        ''''@Grid.Column'''': ''''1'''',\r\n        ''''@Grid.Row'''': ''''1'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_TB}'''',\r\n        ''''@Text'''': ''''{Binding Author, Converter={StaticResource trimPropertyConverter}}'''',\r\n        ''''@Name'''': ''''RecordAuthor'''',\r\n        ''''@Grid.Column'''': ''''1'''',\r\n        ''''@Grid.Row'''': ''''4'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_TB}'''',\r\n        ''''@Text'''': ''''{Binding Container, Converter={StaticResource trimPropertyConverter}}'''',\r\n        ''''@Name'''': ''''RecordContainer'''',\r\n        ''''@Grid.Column'''': ''''1'''',\r\n        ''''@Grid.Row'''': ''''5'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_TB}'''',\r\n        ''''@Text'''': ''''{Binding IsEnclosed, Converter={StaticResource trimPropertyConverter}}'''',\r\n        ''''@Name'''': ''''RecordIsEnclosed'''',\r\n        ''''@Grid.Column'''': ''''1'''',\r\n        ''''@Grid.Row'''': ''''6'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_TB}'''',\r\n        ''''@Text'''': ''''{Binding Assignee, Converter={StaticResource trimPropertyConverter}}'''',\r\n        ''''@Name'''': ''''RecordAssignee'''',\r\n        ''''@Grid.Column'''': ''''1'''',\r\n        ''''@Grid.Row'''': ''''7'''',\r\n        ''''@xmlns'''': ''''''''\r\n      }\r\n    ],\r\n    ''''toolkit:DatePicker'''': [\r\n      {\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_DP}'''',\r\n        ''''@Value'''': ''''{Binding DateCreated, Converter={StaticResource trimPropertyConverter}}'''',\r\n        ''''@Name'''': ''''RecordDateCreated'''',\r\n        ''''@Grid.Column'''': ''''1'''',\r\n        ''''@Grid.Row'''': ''''2''''\r\n      },\r\n      {\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_DP}'''',\r\n        ''''@Value'''': ''''{Binding DateDue, Converter={StaticResource trimPropertyConverter}}'''',\r\n        ''''@Name'''': ''''RecordDateDue'''',\r\n        ''''@Grid.Column'''': ''''1'''',\r\n        ''''@Grid.Row'''': ''''3''''\r\n      }\r\n    ],\r\n    ''''TextBlock'''': [\r\n      {\r\n        ''''@Grid.Column'''': ''''0'''',\r\n        ''''@Text'''': ''''Title (Free Text Part)'''',\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_LBL}'''',\r\n        ''''@Grid.Row'''': ''''0'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Grid.Column'''': ''''0'''',\r\n        ''''@Text'''': ''''External ID'''',\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_LBL}'''',\r\n        ''''@Grid.Row'''': ''''1'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Grid.Column'''': ''''0'''',\r\n        ''''@Text'''': ''''Date Created'''',\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_LBL}'''',\r\n        ''''@Grid.Row'''': ''''2'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Grid.Column'''': ''''0'''',\r\n        ''''@Text'''': ''''Date Due'''',\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_LBL}'''',\r\n        ''''@Grid.Row'''': ''''3'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Grid.Column'''': ''''0'''',\r\n        ''''@Text'''': ''''Author'''',\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_LBL}'''',\r\n        ''''@Grid.Row'''': ''''4'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Grid.Column'''': ''''0'''',\r\n        ''''@Text'''': ''''Container'''',\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_LBL}'''',\r\n        ''''@Grid.Row'''': ''''5'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Grid.Column'''': ''''0'''',\r\n        ''''@Text'''': ''''Enclosed?'''',\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_LBL}'''',\r\n        ''''@Grid.Row'''': ''''6'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Grid.Column'''': ''''0'''',\r\n        ''''@Text'''': ''''Assignee'''',\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_LBL}'''',\r\n        ''''@Grid.Row'''': ''''7'''',\r\n        ''''@xmlns'''': ''''''''\r\n      }\r\n    ]\r\n  }\r\n}''", span="2369-2524"];
m11_685 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNodeDefaultNamespace()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(expectedJson, json)", span="2526-2526"];
m11_686 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNodeDefaultNamespace()", file="XmlNodeConverterTest.cs", label="XmlNode node = JsonConvert.DeserializeXmlNode(json)", span="2528-2528"];
m11_687 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNodeDefaultNamespace()", file="XmlNodeConverterTest.cs", label="StringWriter sw = new StringWriter()", span="2530-2530"];
m11_689 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNodeDefaultNamespace()", file="XmlNodeConverterTest.cs", label="node.WriteTo(writer)", span="2536-2536"];
m11_688 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNodeDefaultNamespace()", file="XmlNodeConverterTest.cs", label="XmlWriter writer = XmlWriter.Create(sw, new XmlWriterSettings\r\n            {\r\n                Indent = true,\r\n                OmitXmlDeclaration = true\r\n            })", span="2531-2535"];
m11_691 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNodeDefaultNamespace()", file="XmlNodeConverterTest.cs", label="string xaml2 = sw.ToString()", span="2539-2539"];
m11_690 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNodeDefaultNamespace()", file="XmlNodeConverterTest.cs", label="writer.Flush()", span="2537-2537"];
m11_692 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNodeDefaultNamespace()", file="XmlNodeConverterTest.cs", label="string expectedXaml = @''<Grid xmlns=''''http://schemas.microsoft.com/winfx/2006/xaml/presentation'''' xmlns:x=''''http://schemas.microsoft.com/winfx/2006/xaml'''' xmlns:toolkit=''''clr-namespace:Microsoft.Phone.Controls;assembly=Microsoft.Phone.Controls.Toolkit'''' Style=''''{StaticResource trimFormGrid}'''' x:Name=''''TrimObjectForm''''>\r\n  <Grid.ColumnDefinitions>\r\n    <ColumnDefinition Width=''''63*'''' />\r\n    <ColumnDefinition Width=''''320*'''' />\r\n  </Grid.ColumnDefinitions>\r\n  <Grid.RowDefinitions xmlns=''''''''>\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n  </Grid.RowDefinitions>\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding TypedTitle, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordTypedTitle'''' Grid.Column=''''1'''' Grid.Row=''''0'''' xmlns='''''''' />\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding ExternalReference, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordExternalReference'''' Grid.Column=''''1'''' Grid.Row=''''1'''' xmlns='''''''' />\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding Author, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordAuthor'''' Grid.Column=''''1'''' Grid.Row=''''4'''' xmlns='''''''' />\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding Container, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordContainer'''' Grid.Column=''''1'''' Grid.Row=''''5'''' xmlns='''''''' />\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding IsEnclosed, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordIsEnclosed'''' Grid.Column=''''1'''' Grid.Row=''''6'''' xmlns='''''''' />\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding Assignee, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordAssignee'''' Grid.Column=''''1'''' Grid.Row=''''7'''' xmlns='''''''' />\r\n  <toolkit:DatePicker Style=''''{StaticResource trimFormGrid_DP}'''' Value=''''{Binding DateCreated, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordDateCreated'''' Grid.Column=''''1'''' Grid.Row=''''2'''' />\r\n  <toolkit:DatePicker Style=''''{StaticResource trimFormGrid_DP}'''' Value=''''{Binding DateDue, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordDateDue'''' Grid.Column=''''1'''' Grid.Row=''''3'''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Title (Free Text Part)'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''0'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''External ID'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''1'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Date Created'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''2'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Date Due'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''3'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Author'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''4'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Container'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''5'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Enclosed?'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''6'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Assignee'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''7'''' xmlns='''''''' />\r\n</Grid>''", span="2541-2572"];
m11_693 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNodeDefaultNamespace()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(expectedXaml, xaml2)", span="2574-2574"];
m11_694 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNodeDefaultNamespace()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNodeDefaultNamespace()", span="2329-2329"];
m11_883 [cluster="List<JsonConverter>.cstr", file="XmlNodeConverterTest.cs", label="Entry List<JsonConverter>.cstr", span=""];
m11_495 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeExample()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeExample()", span="1478-1478"];
m11_496 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeExample()", file="XmlNodeConverterTest.cs", label="string json = @''{\r\n        ''''?xml'''': {\r\n          ''''@version'''': ''''1.0'''',\r\n          ''''@standalone'''': ''''no''''\r\n        },\r\n        ''''root'''': {\r\n          ''''person'''': [\r\n            {\r\n              ''''@id'''': ''''1'''',\r\n              ''''name'''': ''''Alan'''',\r\n              ''''url'''': ''''http://www.google.com''''\r\n            },\r\n            {\r\n              ''''@id'''': ''''2'''',\r\n              ''''name'''': ''''Louis'''',\r\n              ''''url'''': ''''http://www.yahoo.com''''\r\n            }\r\n          ]\r\n        }\r\n      }''", span="1480-1499"];
m11_497 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeExample()", file="XmlNodeConverterTest.cs", label="XmlDocument doc = (XmlDocument)DeserializeXmlNode(json)", span="1501-1501"];
m11_498 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeExample()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(@''<?xml version=''''1.0'''' standalone=''''no''''?><root><person id=''''1''''><name>Alan</name><url>http://www.google.com</url></person><person id=''''2''''><name>Louis</name><url>http://www.yahoo.com</url></person></root>'', doc.InnerXml)", span="1514-1514"];
m11_499 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeExample()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeExample()", span="1478-1478"];
m11_718 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NullableXml.NullableXml()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NullableXml.NullableXml()", span="2615-2615"];
m11_100 [cluster="Unk.Equals", file="XmlNodeConverterTest.cs", label="Entry Unk.Equals", span=""];
m11_112 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXDocument()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXDocument()", span="219-219"];
m11_113 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXDocument()", file="XmlNodeConverterTest.cs", label="string xml = @''<result xp_0:end=''''2014-08-15 13:12:11.9184'''' xp_0:start=''''2014-08-15 13:11:49.3140'''' xp_0:time_diff=''''22604.3836'''' xmlns:xp_0=''''Test1'''' p2:end=''''2014-08-15 13:13:49.5522'''' p2:start=''''2014-08-15 13:13:49.0268'''' p2:time_diff=''''525.4646'''' xmlns:p2=''''Test2'''' />''", span="221-221"];
m11_114 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXDocument()", file="XmlNodeConverterTest.cs", label="XDocument d = XDocument.Parse(xml)", span="223-223"];
m11_118 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXDocument()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(xml, doc.ToString())", span="242-242"];
m11_115 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXDocument()", file="XmlNodeConverterTest.cs", label="string json = JsonConvert.SerializeObject(d, Formatting.Indented)", span="225-225"];
m11_116 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXDocument()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(@''{\r\n  ''''result'''': {\r\n    ''''@xp_0:end'''': ''''2014-08-15 13:12:11.9184'''',\r\n    ''''@xp_0:start'''': ''''2014-08-15 13:11:49.3140'''',\r\n    ''''@xp_0:time_diff'''': ''''22604.3836'''',\r\n    ''''@xmlns:xp_0'''': ''''Test1'''',\r\n    ''''@p2:end'''': ''''2014-08-15 13:13:49.5522'''',\r\n    ''''@p2:start'''': ''''2014-08-15 13:13:49.0268'''',\r\n    ''''@p2:time_diff'''': ''''525.4646'''',\r\n    ''''@xmlns:p2'''': ''''Test2''''\r\n  }\r\n}'', json)", span="227-238"];
m11_117 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXDocument()", file="XmlNodeConverterTest.cs", label="XDocument doc = JsonConvert.DeserializeObject<XDocument>(json)", span="240-240"];
m11_119 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXDocument()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXDocument()", span="219-219"];
m11_882 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Model.Model()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Model.Model()", span="2916-2916"];
m11_166 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeParseHandlingOffset()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeParseHandlingOffset()", span="386-386"];
m11_167 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeParseHandlingOffset()", file="XmlNodeConverterTest.cs", label="DateTimeOffset d = new DateTimeOffset(2012, 12, 12, 12, 44, 1, TimeSpan.FromHours(12).Add(TimeSpan.FromMinutes(34)))", span="388-388"];
m11_168 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeParseHandlingOffset()", file="XmlNodeConverterTest.cs", label="var x = new DateTimeOffsetContainer { Date = d }", span="389-389"];
m11_169 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeParseHandlingOffset()", file="XmlNodeConverterTest.cs", label="var json = JsonConvert.SerializeObject(x, Formatting.Indented)", span="391-391"];
m11_175 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeParseHandlingOffset()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(x.Date, x2.Date)", span="406-406"];
m11_170 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeParseHandlingOffset()", file="XmlNodeConverterTest.cs", label="XDocument doc1 = JsonConvert.DeserializeObject<XDocument>(json, new JsonSerializerSettings\r\n            {\r\n                Converters = { new XmlNodeConverter() },\r\n                DateParseHandling = DateParseHandling.DateTimeOffset\r\n            })", span="393-397"];
m11_171 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeParseHandlingOffset()", file="XmlNodeConverterTest.cs", label="var xml = doc1.ToString()", span="399-399"];
m11_173 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeParseHandlingOffset()", file="XmlNodeConverterTest.cs", label="string json2 = JsonConvert.SerializeObject(doc1, Formatting.Indented)", span="402-402"];
m11_172 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeParseHandlingOffset()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(''<Date>2012-12-12T12:44:01+12:34</Date>'', xml)", span="400-400"];
m11_174 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeParseHandlingOffset()", file="XmlNodeConverterTest.cs", label="DateTimeOffsetContainer x2 = JsonConvert.DeserializeObject<DateTimeOffsetContainer>(json2)", span="404-404"];
m11_176 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeParseHandlingOffset()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeParseHandlingOffset()", span="386-386"];
m11_237 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", span="569-569"];
m11_238 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs", label="XmlDocument doc = new XmlDocument()", span="571-571"];
m11_239 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs", label="string jsonText", span="572-572"];
m11_251 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs", label="XmlProcessingInstruction instruction = doc.CreateProcessingInstruction(''xml-stylesheet'', @''href=''''classic.xsl'''' type=''''text/xml'''''')", span="604-604"];
m11_254 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs", label="XmlCDataSection cDataSection = doc.CreateCDataSection(''<Kiwi>true</Kiwi>'')", span="611-611"];
m11_257 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs", label="XmlElement element = doc.CreateElement(''xs'', ''Choice'', ''http://www.w3.org/2001/XMLSchema'')", span="618-618"];
m11_258 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs", label="element.SetAttributeNode(doc.CreateAttribute(''msdata'', ''IsDataSet'', ''urn:schemas-microsoft-com:xml-msdata''))", span="619-619"];
m11_259 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs", label="XmlAttribute aa = doc.CreateAttribute(@''xmlns'', ''xs'', ''http://www.w3.org/2000/xmlns/'')", span="621-621"];
m11_262 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs", label="aa = doc.CreateAttribute(@''xmlns'', ''msdata'', ''http://www.w3.org/2000/xmlns/'')", span="625-625"];
m11_267 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs", label="doc.AppendChild(element)", span="632-632"];
m11_240 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs", label="string xml = @''<?xml version=''''1.0'''' encoding=''''utf-8'''' ?>\r\n<xs:schema xs:id=''''SomeID'''' \r\n	xmlns='''''''' \r\n	xmlns:xs=''''http://www.w3.org/2001/XMLSchema'''' \r\n	xmlns:msdata=''''urn:schemas-microsoft-com:xml-msdata''''>\r\n	<xs:element name=''''MyDataSet'''' msdata:IsDataSet=''''true''''>\r\n	</xs:element>\r\n</xs:schema>''", span="574-581"];
m11_241 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs", label="XmlDocument document = new XmlDocument()", span="583-583"];
m11_242 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs", label="document.LoadXml(xml)", span="584-584"];
m11_247 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs", label="XDocument d = XDocument.Parse(xml)", span="595-595"];
m11_243 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs", label="XmlAttribute attribute = document.DocumentElement.ChildNodes[0].Attributes[''IsDataSet'', ''urn:schemas-microsoft-com:xml-msdata'']", span="587-587"];
m11_244 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs", label="attribute.Value = ''true''", span="588-588"];
m11_245 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs", label="jsonText = JsonConvert.SerializeXmlNode(attribute)", span="590-590"];
m11_246 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(@''{''''@msdata:IsDataSet'''':''''true''''}'', jsonText)", span="592-592"];
m11_248 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs", label="XAttribute a = d.Root.Element(''{http://www.w3.org/2001/XMLSchema}element'').Attribute(''{urn:schemas-microsoft-com:xml-msdata}IsDataSet'')", span="596-596"];
m11_249 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs", label="jsonText = JsonConvert.SerializeXNode(a)", span="598-598"];
m11_250 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(@''{''''@msdata:IsDataSet'''':''''true''''}'', jsonText)", span="600-600"];
m11_252 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs", label="jsonText = JsonConvert.SerializeXmlNode(instruction)", span="606-606"];
m11_265 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs", label="element.AppendChild(instruction)", span="629-629"];
m11_253 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(@''{''''?xml-stylesheet'''':''''href=\''''classic.xsl\'''' type=\''''text/xml\''''''''}'', jsonText)", span="608-608"];
m11_255 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs", label="jsonText = JsonConvert.SerializeXmlNode(cDataSection)", span="613-613"];
m11_266 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs", label="element.AppendChild(cDataSection)", span="630-630"];
m11_256 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(@''{''''#cdata-section'''':''''<Kiwi>true</Kiwi>''''}'', jsonText)", span="615-615"];
m11_261 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs", label="element.SetAttributeNode(aa)", span="623-623"];
m11_264 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs", label="element.SetAttributeNode(aa)", span="627-627"];
m11_268 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs", label="jsonText = JsonConvert.SerializeXmlNode(element, Formatting.Indented)", span="634-634"];
m11_260 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs", label="aa.Value = ''http://www.w3.org/2001/XMLSchema''", span="622-622"];
m11_263 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs", label="aa.Value = ''urn:schemas-microsoft-com:xml-msdata''", span="626-626"];
m11_269 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(@''{\r\n  ''''xs:Choice'''': {\r\n    ''''@msdata:IsDataSet'''': '''''''',\r\n    ''''@xmlns:xs'''': ''''http://www.w3.org/2001/XMLSchema'''',\r\n    ''''@xmlns:msdata'''': ''''urn:schemas-microsoft-com:xml-msdata'''',\r\n    ''''?xml-stylesheet'''': ''''href=\''''classic.xsl\'''' type=\''''text/xml\'''''''',\r\n    ''''#cdata-section'''': ''''<Kiwi>true</Kiwi>''''\r\n  }\r\n}'', jsonText)", span="636-644"];
m11_270 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", span="569-569"];
m11_21 [cluster="Unk.ReadFrom", file="XmlNodeConverterTest.cs", label="Entry Unk.ReadFrom", span=""];
m11_142 [cluster="Unk.>", file="XmlNodeConverterTest.cs", label="Entry Unk.>", span=""];
m11_371 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.OtherElementDataTypes()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.OtherElementDataTypes()", span="1033-1033"];
m11_372 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.OtherElementDataTypes()", file="XmlNodeConverterTest.cs", label="string jsonText = @''{''''?xml'''':{''''@version'''':''''1.0'''',''''@standalone'''':''''no''''},''''root'''':{''''person'''':[{''''@id'''':''''1'''',''''Float'''':2.5,''''Integer'''':99},{''''Boolean'''':true,''''@id'''':''''2'''',''''date'''':''''\/Date(954374400000)\/''''}]}}''", span="1035-1035"];
m11_373 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.OtherElementDataTypes()", file="XmlNodeConverterTest.cs", label="XmlDocument newDoc = (XmlDocument)DeserializeXmlNode(jsonText)", span="1037-1037"];
m11_374 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.OtherElementDataTypes()", file="XmlNodeConverterTest.cs", label="string expected = @''<?xml version=''''1.0'''' standalone=''''no''''?><root><person id=''''1''''><Float>2.5</Float><Integer>99</Integer></person><person id=''''2''''><Boolean>true</Boolean><date>2000-03-30T00:00:00Z</date></person></root>''", span="1039-1039"];
m11_375 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.OtherElementDataTypes()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(expected, newDoc.InnerXml)", span="1041-1041"];
m11_376 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.OtherElementDataTypes()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.OtherElementDataTypes()", span="1033-1033"];
m11_769 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Deserialize_XDocument_NoRoot()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Deserialize_XDocument_NoRoot()", span="2758-2758"];
m11_770 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Deserialize_XDocument_NoRoot()", file="XmlNodeConverterTest.cs", label="XDocument d = JsonConvert.DeserializeXNode(@''{}'')", span="2760-2760"];
m11_771 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Deserialize_XDocument_NoRoot()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(null, d.Root)", span="2762-2762"];
m11_772 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Deserialize_XDocument_NoRoot()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(null, d.Declaration)", span="2763-2763"];
m11_773 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Deserialize_XDocument_NoRoot()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Deserialize_XDocument_NoRoot()", span="2758-2758"];
m11_425 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesXDocument()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesXDocument()", span="1179-1179"];
m11_426 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesXDocument()", color=green, community=0, file="XmlNodeConverterTest.cs", label="string json = @''{''''count'''': 773840,''''photos'''': null}''", prediction=45, span="1181-1181"];
m11_427 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesXDocument()", color=green, community=0, file="XmlNodeConverterTest.cs", label="ExceptionAssert.Throws<JsonSerializationException>(\r\n                () => { JsonConvert.DeserializeXNode(json); },\r\n                ''JSON root object has multiple properties. The root object must have a single property in order to create a valid XML document. Consider specifying a DeserializeRootElementName. Path 'photos', line 1, position 26.'')", prediction=46, span="1183-1185"];
m11_428 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesXDocument()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesXDocument()", span="1179-1179"];
m11_523 [cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting, Newtonsoft.Json.JsonSerializerSettings)", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting, Newtonsoft.Json.JsonSerializerSettings)", span="618-618"];
m11_377 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NoRootObject()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NoRootObject()", span="1045-1045"];
m11_378 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NoRootObject()", file="XmlNodeConverterTest.cs", label="ExceptionAssert.Throws<JsonSerializationException>(() => { XmlDocument newDoc = (XmlDocument)JsonConvert.DeserializeXmlNode(@''[1]''); }, ''XmlNodeConverter can only convert JSON that begins with an object.'')", span="1047-1047"];
m11_379 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NoRootObject()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NoRootObject()", span="1045-1045"];
m11_700 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializingXmlNamespaceScope()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializingXmlNamespaceScope()", span="2589-2589"];
m11_701 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializingXmlNamespaceScope()", file="XmlNodeConverterTest.cs", label="var xmlString = @''<root xmlns=''''http://www.example.com/ns''''>\r\n  <a/>\r\n  <bns:b xmlns:bns=''''http://www.example.com/ns''''/>\r\n  <c/>\r\n</root>''", span="2591-2595"];
m11_702 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializingXmlNamespaceScope()", file="XmlNodeConverterTest.cs", label="var xml = XElement.Parse(xmlString)", span="2598-2598"];
m11_706 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializingXmlNamespaceScope()", file="XmlNodeConverterTest.cs", label="xml1.LoadXml(xmlString)", span="2606-2606"];
m11_703 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializingXmlNamespaceScope()", file="XmlNodeConverterTest.cs", label="var json1 = JsonConvert.SerializeObject(xml)", span="2600-2600"];
m11_704 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializingXmlNamespaceScope()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(@''{''''root'''':{''''@xmlns'''':''''http://www.example.com/ns'''',''''a'''':null,''''bns:b'''':{''''@xmlns:bns'''':''''http://www.example.com/ns''''},''''c'''':null}}'', json1)", span="2602-2602"];
m11_705 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializingXmlNamespaceScope()", file="XmlNodeConverterTest.cs", label="var xml1 = new XmlDocument()", span="2605-2605"];
m11_707 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializingXmlNamespaceScope()", file="XmlNodeConverterTest.cs", label="var json2 = JsonConvert.SerializeObject(xml1)", span="2608-2608"];
m11_708 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializingXmlNamespaceScope()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(@''{''''root'''':{''''@xmlns'''':''''http://www.example.com/ns'''',''''a'''':null,''''bns:b'''':{''''@xmlns:bns'''':''''http://www.example.com/ns''''},''''c'''':null}}'', json2)", span="2610-2610"];
m11_709 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializingXmlNamespaceScope()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializingXmlNamespaceScope()", span="2589-2589"];
m11_794 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Utc()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Utc()", span="2799-2799"];
m11_795 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Utc()", file="XmlNodeConverterTest.cs", label="string json = @''{''''CreatedDate'''': ''''2014-01-23T00:00:00Z''''}''", span="2801-2801"];
m11_796 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Utc()", file="XmlNodeConverterTest.cs", label="var dxml = JsonConvert.DeserializeXNode(json, ''root'')", span="2802-2802"];
m11_797 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Utc()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(''2014-01-23T00:00:00Z'', dxml.Root.Element(''CreatedDate'').Value)", span="2803-2803"];
m11_798 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Utc()", file="XmlNodeConverterTest.cs", label="Console.WriteLine(''DateTimeToXml_Utc: '' + dxml.Root.Element(''CreatedDate'').Value)", span="2805-2805"];
m11_799 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Utc()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Utc()", span="2799-2799"];
m11_17 [cluster="Unk.Load", file="XmlNodeConverterTest.cs", label="Entry Unk.Load", span=""];
m11_494 [cluster="Newtonsoft.Json.Linq.JToken.ToString()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Linq.JToken.ToString()", span="422-422"];
m11_887 [cluster="Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter, object)", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter, object)", span="1042-1042"];
m11_49 [cluster="Newtonsoft.Json.JsonSerializer.JsonSerializer()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.JsonSerializer.JsonSerializer()", span="530-530"];
m11_640 [cluster="Newtonsoft.Json.Linq.JToken.CreateReader()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Linq.JToken.CreateReader()", span="1886-1886"];
m11_638 [cluster="Newtonsoft.Json.Linq.JObject.FromObject(object)", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Linq.JObject.FromObject(object)", span="442-442"];
m11_108 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Foo.Foo()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Foo.Foo()", span="201-201"];
m11_432 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesAddRootElement()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesAddRootElement()", span="1190-1190"];
m11_433 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesAddRootElement()", file="XmlNodeConverterTest.cs", label="string json = @''{''''count'''': 773840,''''photos'''': 773840}''", span="1192-1192"];
m11_434 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesAddRootElement()", file="XmlNodeConverterTest.cs", label="XmlDocument newDoc = JsonConvert.DeserializeXmlNode(json, ''myRoot'')", span="1195-1195"];
m11_436 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesAddRootElement()", file="XmlNodeConverterTest.cs", label="XDocument newXDoc = JsonConvert.DeserializeXNode(json, ''myRoot'')", span="1201-1201"];
m11_435 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesAddRootElement()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(@''<myRoot><count>773840</count><photos>773840</photos></myRoot>'', newDoc.InnerXml)", span="1197-1197"];
m11_437 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesAddRootElement()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(@''<myRoot><count>773840</count><photos>773840</photos></myRoot>'', newXDoc.ToString(SaveOptions.DisableFormatting))", span="1203-1203"];
m11_438 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesAddRootElement()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesAddRootElement()", span="1190-1190"];
m11_76 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNonKnownDollarProperty()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNonKnownDollarProperty()", span="163-163"];
m11_77 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNonKnownDollarProperty()", file="XmlNodeConverterTest.cs", label="string json1 = @''{''''$JELLY'''':''''test''''}''", span="165-165"];
m11_78 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNonKnownDollarProperty()", file="XmlNodeConverterTest.cs", label="var doc = JsonConvert.DeserializeXNode(json1)", span="167-167"];
m11_82 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNonKnownDollarProperty()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(json1, json2)", span="175-175"];
m11_79 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNonKnownDollarProperty()", file="XmlNodeConverterTest.cs", label="Console.WriteLine(doc.ToString())", span="169-169"];
m11_80 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNonKnownDollarProperty()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(@''<_x0024_JELLY>test</_x0024_JELLY>'', doc.ToString())", span="171-171"];
m11_81 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNonKnownDollarProperty()", file="XmlNodeConverterTest.cs", label="var json2 = JsonConvert.SerializeXNode(doc)", span="173-173"];
m11_83 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNonKnownDollarProperty()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNonKnownDollarProperty()", span="163-163"];
m11_809 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Unspecified_Precision()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Unspecified_Precision()", span="2821-2821"];
m11_810 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Unspecified_Precision()", file="XmlNodeConverterTest.cs", label="string json = @''{''''CreatedDate'''': ''''2014-01-23T00:00:00.1234567''''}''", span="2823-2823"];
m11_811 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Unspecified_Precision()", file="XmlNodeConverterTest.cs", label="var dxml = JsonConvert.DeserializeXNode(json, ''root'')", span="2824-2824"];
m11_812 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Unspecified_Precision()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(''2014-01-23T00:00:00.1234567'', dxml.Root.Element(''CreatedDate'').Value)", span="2825-2825"];
m11_813 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Unspecified_Precision()", file="XmlNodeConverterTest.cs", label="Console.WriteLine(''DateTimeToXml_Unspecified: '' + dxml.Root.Element(''CreatedDate'').Value)", span="2827-2827"];
m11_814 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Unspecified_Precision()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Unspecified_Precision()", span="2821-2821"];
m11_151 [cluster="Unk.Nodes", file="XmlNodeConverterTest.cs", label="Entry Unk.Nodes", span=""];
m11_450 [cluster="System.Console.WriteLine(string)", file="XmlNodeConverterTest.cs", label="Entry System.Console.WriteLine(string)", span="0-0"];
m11_63 [cluster="XmlWriterSettings.cstr", file="XmlNodeConverterTest.cs", label="Entry XmlWriterSettings.cstr", span=""];
m11_144 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXElement()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXElement()", span="316-316"];
m11_145 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXElement()", file="XmlNodeConverterTest.cs", label="string xml = @''<payload>\r\n    <Country>6</Country>\r\n    <FinancialTransactionApprovalRequestUID>79</FinancialTransactionApprovalRequestUID>\r\n    <TransactionStatus>Approved</TransactionStatus>\r\n    <StatusChangeComment></StatusChangeComment>\r\n    <RequestedBy>Someone</RequestedBy>\r\n</payload>''", span="318-324"];
m11_146 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXElement()", file="XmlNodeConverterTest.cs", label="var xmlDocument = XDocument.Parse(xml)", span="326-326"];
m11_147 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXElement()", file="XmlNodeConverterTest.cs", label="var result = xmlDocument.Root.Nodes().ToArray()", span="328-328"];
m11_148 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXElement()", file="XmlNodeConverterTest.cs", label="var json = JsonConvert.SerializeObject(result, Formatting.Indented)", span="330-330"];
m11_149 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXElement()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(@''[\r\n  {\r\n    ''''Country'''': ''''6''''\r\n  },\r\n  {\r\n    ''''FinancialTransactionApprovalRequestUID'''': ''''79''''\r\n  },\r\n  {\r\n    ''''TransactionStatus'''': ''''Approved''''\r\n  },\r\n  {\r\n    ''''StatusChangeComment'''': ''''''''\r\n  },\r\n  {\r\n    ''''RequestedBy'''': ''''Someone''''\r\n  }\r\n]'', json)", span="332-348"];
m11_150 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXElement()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXElement()", span="316-316"];
m11_637 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="XmlNodeConverterTest.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m11_23 [cluster="Unk.AreEqual", file="XmlNodeConverterTest.cs", label="Entry Unk.AreEqual", span=""];
m11_189 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyDocument()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyDocument()", span="427-427"];
m11_190 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyDocument()", file="XmlNodeConverterTest.cs", label="XmlDocument doc = new XmlDocument()", span="429-429"];
m11_191 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyDocument()", file="XmlNodeConverterTest.cs", label="doc.LoadXml(''<root />'')", span="430-430"];
m11_192 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyDocument()", file="XmlNodeConverterTest.cs", label="string json = JsonConvert.SerializeXmlNode(doc, Formatting.Indented, true)", span="432-432"];
m11_193 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyDocument()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(''null'', json)", span="433-433"];
m11_194 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyDocument()", file="XmlNodeConverterTest.cs", label="doc = new XmlDocument()", span="435-435"];
m11_195 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyDocument()", file="XmlNodeConverterTest.cs", label="doc.LoadXml(''<root></root>'')", span="436-436"];
m11_196 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyDocument()", file="XmlNodeConverterTest.cs", label="json = JsonConvert.SerializeXmlNode(doc, Formatting.Indented, true)", span="438-438"];
m11_197 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyDocument()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(@'''''''''''', json)", span="439-439"];
m11_198 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyDocument()", file="XmlNodeConverterTest.cs", label="XDocument doc1 = XDocument.Parse(''<root />'')", span="441-441"];
m11_199 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyDocument()", file="XmlNodeConverterTest.cs", label="json = JsonConvert.SerializeXNode(doc1, Formatting.Indented, true)", span="443-443"];
m11_200 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyDocument()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(''null'', json)", span="444-444"];
m11_201 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyDocument()", file="XmlNodeConverterTest.cs", label="doc1 = XDocument.Parse(''<root></root>'')", span="446-446"];
m11_202 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyDocument()", file="XmlNodeConverterTest.cs", label="json = JsonConvert.SerializeXNode(doc1, Formatting.Indented, true)", span="448-448"];
m11_203 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyDocument()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(@'''''''''''', json)", span="449-449"];
m11_204 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyDocument()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyDocument()", span="427-427"];
m11_101 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXElement()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXElement()", span="207-207"];
m11_102 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXElement()", file="XmlNodeConverterTest.cs", label="Foo foo = new Foo { Bar = null }", span="209-209"];
m11_103 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXElement()", file="XmlNodeConverterTest.cs", label="string json = JsonConvert.SerializeObject(foo)", span="210-210"];
m11_104 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXElement()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(@''{''''Bar'''':null}'', json)", span="212-212"];
m11_105 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXElement()", file="XmlNodeConverterTest.cs", label="Foo foo2 = JsonConvert.DeserializeObject<Foo>(json)", span="213-213"];
m11_106 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXElement()", file="XmlNodeConverterTest.cs", label="Assert.IsNull(foo2.Bar)", span="215-215"];
m11_107 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXElement()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXElement()", span="207-207"];
m11_807 [cluster="System.DateTime.Parse(string)", file="XmlNodeConverterTest.cs", label="Entry System.DateTime.Parse(string)", span="0-0"];
m11_51 [cluster="Unk.ToString", file="XmlNodeConverterTest.cs", label="Entry Unk.ToString", span=""];
m11_18 [cluster="XAttribute.cstr", file="XmlNodeConverterTest.cs", label="Entry XAttribute.cstr", span=""];
m11_710 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeNullableXml()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeNullableXml()", span="2623-2623"];
m11_711 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeNullableXml()", file="XmlNodeConverterTest.cs", label="var xml = new NullableXml { Name = ''test'', notNull = XElement.Parse(''<root>test</root>'') }", span="2625-2625"];
m11_712 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeNullableXml()", file="XmlNodeConverterTest.cs", label="var json = JsonConvert.SerializeObject(xml)", span="2626-2626"];
m11_714 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeNullableXml()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(xml.Name, w2.Name)", span="2629-2629"];
m11_715 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeNullableXml()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(xml.isNull, w2.isNull)", span="2630-2630"];
m11_716 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeNullableXml()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(xml.notNull.ToString(), w2.notNull.ToString())", span="2631-2631"];
m11_713 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeNullableXml()", file="XmlNodeConverterTest.cs", label="var w2 = JsonConvert.DeserializeObject<NullableXml>(json)", span="2628-2628"];
m11_717 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeNullableXml()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeNullableXml()", span="2623-2623"];
m11_84 [cluster="Unk.WriteLine", file="XmlNodeConverterTest.cs", label="Entry Unk.WriteLine", span=""];
m11_61 [cluster="Unk.Create", file="XmlNodeConverterTest.cs", label="Entry Unk.Create", span=""];
m11_0 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlNode(XmlNode)", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlNode(XmlNode)", span="61-61"];
m11_1 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlNode(XmlNode)", file="XmlNodeConverterTest.cs", label="string json = JsonConvert.SerializeXmlNode(node, Formatting.Indented)", span="63-63"];
m11_2 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlNode(XmlNode)", file="XmlNodeConverterTest.cs", label="XmlNodeReader reader = new XmlNodeReader(node)", span="64-64"];
m11_4 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlNode(XmlNode)", file="XmlNodeConverterTest.cs", label="node is XmlDocument", span="68-68"];
m11_6 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlNode(XmlNode)", file="XmlNodeConverterTest.cs", label="node is XmlAttribute", span="72-72"];
m11_7 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlNode(XmlNode)", file="XmlNodeConverterTest.cs", label="XmlAttribute attribute = (XmlAttribute)node", span="74-74"];
m11_12 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlNode(XmlNode)", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(json, linqJson)", span="85-85"];
m11_13 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlNode(XmlNode)", file="XmlNodeConverterTest.cs", label="return json;", span="88-88"];
m11_3 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlNode(XmlNode)", file="XmlNodeConverterTest.cs", label="XObject xNode", span="67-67"];
m11_5 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlNode(XmlNode)", file="XmlNodeConverterTest.cs", label="xNode = XDocument.Load(reader)", span="70-70"];
m11_9 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlNode(XmlNode)", file="XmlNodeConverterTest.cs", label="reader.MoveToContent()", span="79-79"];
m11_10 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlNode(XmlNode)", file="XmlNodeConverterTest.cs", label="xNode = XNode.ReadFrom(reader)", span="80-80"];
m11_8 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlNode(XmlNode)", file="XmlNodeConverterTest.cs", label="xNode = new XAttribute(XName.Get(attribute.LocalName, attribute.NamespaceURI), attribute.Value)", span="75-75"];
m11_11 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlNode(XmlNode)", file="XmlNodeConverterTest.cs", label="string linqJson = JsonConvert.SerializeXNode(xNode, Formatting.Indented)", span="83-83"];
m11_14 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlNode(XmlNode)", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlNode(XmlNode)", span="61-61"];
m11_449 [cluster="Unk.IndentXml", file="XmlNodeConverterTest.cs", label="Entry Unk.IndentXml", span=""];
m11_842 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeElementImplicitAttributeNamespace()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeElementImplicitAttributeNamespace()", span="2878-2878"];
m11_843 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeElementImplicitAttributeNamespace()", file="XmlNodeConverterTest.cs", label="var original = new XElement(''{http://example.com}MyElement'')", span="2880-2880"];
m11_844 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeElementImplicitAttributeNamespace()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(@''<MyElement xmlns=''''http://example.com'''' />'', original.ToString())", span="2881-2881"];
m11_845 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeElementImplicitAttributeNamespace()", file="XmlNodeConverterTest.cs", label="var json = JsonConvert.SerializeObject(original)", span="2883-2883"];
m11_846 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeElementImplicitAttributeNamespace()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(@''{''''MyElement'''':{''''@xmlns'''':''''http://example.com''''}}'', json)", span="2884-2884"];
m11_847 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeElementImplicitAttributeNamespace()", file="XmlNodeConverterTest.cs", label="var deserialized = JsonConvert.DeserializeObject<XElement>(json)", span="2886-2886"];
m11_848 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeElementImplicitAttributeNamespace()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(@''<MyElement xmlns=''''http://example.com'''' />'', deserialized.ToString())", span="2887-2887"];
m11_849 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeElementImplicitAttributeNamespace()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeElementImplicitAttributeNamespace()", span="2878-2878"];
m11_177 [cluster="System.DateTimeOffset.DateTimeOffset(int, int, int, int, int, int, System.TimeSpan)", file="XmlNodeConverterTest.cs", label="Entry System.DateTimeOffset.DateTimeOffset(int, int, int, int, int, int, System.TimeSpan)", span="0-0"];
m11_886 [cluster="Newtonsoft.Json.JsonTextWriter.JsonTextWriter(System.IO.TextWriter)", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.JsonTextWriter.JsonTextWriter(System.IO.TextWriter)", span="149-149"];
m11_122 [cluster="Newtonsoft.Json.Tests.StringAssert.AreEqual(string, string)", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.StringAssert.AreEqual(string, string)", span="328-328"];
m11_753 [cluster="lambda expression", file="XmlNodeConverterTest.cs", label="Entry lambda expression", span="2728-2728"];
m11_227 [cluster="lambda expression", file="XmlNodeConverterTest.cs", label="JsonConvert.DeserializeXmlNode(json)", span="506-506"];
m11_226 [cluster="lambda expression", file="XmlNodeConverterTest.cs", label="Entry lambda expression", span="506-506"];
m11_228 [cluster="lambda expression", file="XmlNodeConverterTest.cs", label="Exit lambda expression", span="506-506"];
m11_380 [cluster="lambda expression", file="XmlNodeConverterTest.cs", label="Entry lambda expression", span="1047-1047"];
m11_381 [cluster="lambda expression", file="XmlNodeConverterTest.cs", label="XmlDocument newDoc = (XmlDocument)JsonConvert.DeserializeXmlNode(@''[1]'')", span="1047-1047"];
m11_382 [cluster="lambda expression", file="XmlNodeConverterTest.cs", label="Exit lambda expression", span="1047-1047"];
m11_386 [cluster="lambda expression", file="XmlNodeConverterTest.cs", label="Entry lambda expression", span="1054-1054"];
m11_387 [cluster="lambda expression", file="XmlNodeConverterTest.cs", label="XmlDocument newDoc = (XmlDocument)JsonConvert.DeserializeXmlNode(@''{Prop1:1,Prop2:2}'')", span="1054-1054"];
m11_388 [cluster="lambda expression", file="XmlNodeConverterTest.cs", label="Exit lambda expression", span="1054-1054"];
m11_423 [cluster="lambda expression", color=green, community=0, file="XmlNodeConverterTest.cs", label="JsonConvert.DeserializeXmlNode(json)", prediction=47, span="1172-1172"];
m11_422 [cluster="lambda expression", file="XmlNodeConverterTest.cs", label="Entry lambda expression", span="1172-1172"];
m11_424 [cluster="lambda expression", file="XmlNodeConverterTest.cs", label="Exit lambda expression", span="1172-1172"];
m11_430 [cluster="lambda expression", color=green, community=0, file="XmlNodeConverterTest.cs", label="JsonConvert.DeserializeXNode(json)", prediction=45, span="1184-1184"];
m11_429 [cluster="lambda expression", file="XmlNodeConverterTest.cs", label="Entry lambda expression", span="1184-1184"];
m11_431 [cluster="lambda expression", file="XmlNodeConverterTest.cs", label="Exit lambda expression", span="1184-1184"];
m11_554 [cluster="lambda expression", file="XmlNodeConverterTest.cs", label="JsonConvert.DeserializeXmlNode(json, ''root'')", span="1722-1722"];
m11_553 [cluster="lambda expression", file="XmlNodeConverterTest.cs", label="Entry lambda expression", span="1722-1722"];
m11_555 [cluster="lambda expression", file="XmlNodeConverterTest.cs", label="Exit lambda expression", span="1722-1722"];
m11_578 [cluster="lambda expression", file="XmlNodeConverterTest.cs", label="DeserializeXmlNode(json)", span="1850-1850"];
m11_577 [cluster="lambda expression", file="XmlNodeConverterTest.cs", label="Entry lambda expression", span="1850-1850"];
m11_579 [cluster="lambda expression", file="XmlNodeConverterTest.cs", label="Exit lambda expression", span="1850-1850"];
m11_754 [cluster="lambda expression", file="XmlNodeConverterTest.cs", label="JsonConvert.DeserializeXmlNode(json)", span="2728-2728"];
m11_755 [cluster="lambda expression", file="XmlNodeConverterTest.cs", label="Exit lambda expression", span="2728-2728"];
m11_629 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeNonInt64IntegerValues()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeNonInt64IntegerValues()", span="2042-2042"];
m11_630 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeNonInt64IntegerValues()", file="XmlNodeConverterTest.cs", label="var dict = new Dictionary<string, object> { { ''Int16'', (short)1 }, { ''Float'', 2f }, { ''Int32'', 3 } }", span="2044-2044"];
m11_631 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeNonInt64IntegerValues()", file="XmlNodeConverterTest.cs", label="var obj = JObject.FromObject(dict)", span="2045-2045"];
m11_632 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeNonInt64IntegerValues()", file="XmlNodeConverterTest.cs", label="var serializer = JsonSerializer.Create(new JsonSerializerSettings { Converters = { new XmlNodeConverter() { DeserializeRootElementName = ''root'' } } })", span="2046-2046"];
m11_633 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeNonInt64IntegerValues()", file="XmlNodeConverterTest.cs", label="var reader = obj.CreateReader()", span="2047-2047"];
m11_634 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeNonInt64IntegerValues()", file="XmlNodeConverterTest.cs", label="var value = (XmlDocument)serializer.Deserialize(reader, typeof(XmlDocument))", span="2049-2049"];
m11_635 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeNonInt64IntegerValues()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(@''<root><Int16>1</Int16><Float>2</Float><Int32>3</Int32></root>'', value.InnerXml)", span="2051-2051"];
m11_636 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeNonInt64IntegerValues()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeNonInt64IntegerValues()", span="2042-2042"];
m11_695 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeAttributePropertyNotAtStart()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeAttributePropertyNotAtStart()", span="2578-2578"];
m11_696 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeAttributePropertyNotAtStart()", file="XmlNodeConverterTest.cs", label="string json = @''{''''item'''': {''''@action'''': ''''update'''', ''''@itemid'''': ''''1'''', ''''elements'''': [{''''@action'''': ''''none'''', ''''@id'''': ''''2''''},{''''@action'''': ''''none'''', ''''@id'''': ''''3''''}],''''@description'''': ''''temp''''}}''", span="2580-2580"];
m11_697 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeAttributePropertyNotAtStart()", file="XmlNodeConverterTest.cs", label="XmlDocument xmldoc = JsonConvert.DeserializeXmlNode(json)", span="2582-2582"];
m11_698 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeAttributePropertyNotAtStart()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(@''<item action=''''update'''' itemid=''''1'''' description=''''temp''''><elements action=''''none'''' id=''''2'''' /><elements action=''''none'''' id=''''3'''' /></item>'', xmldoc.InnerXml)", span="2584-2584"];
m11_699 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeAttributePropertyNotAtStart()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeAttributePropertyNotAtStart()", span="2578-2578"];
m11_768 [cluster="XDocument.cstr", file="XmlNodeConverterTest.cs", label="Entry XDocument.cstr", span=""];
m11_665 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.cstr", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Converters.XmlNodeConverter.cstr", span=""];
m11_507 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataProperties()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataProperties()", span="1562-1562"];
m11_508 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataProperties()", file="XmlNodeConverterTest.cs", label="PreserveReferencesHandlingTests.CircularDictionary circularDictionary = new PreserveReferencesHandlingTests.CircularDictionary()", span="1564-1564"];
m11_509 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataProperties()", file="XmlNodeConverterTest.cs", label="circularDictionary.Add(''other'', new PreserveReferencesHandlingTests.CircularDictionary { { ''blah'', null } })", span="1565-1565"];
m11_510 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataProperties()", file="XmlNodeConverterTest.cs", label="circularDictionary.Add(''self'', circularDictionary)", span="1566-1566"];
m11_511 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataProperties()", file="XmlNodeConverterTest.cs", label="string json = JsonConvert.SerializeObject(circularDictionary, Formatting.Indented,\r\n                new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.All })", span="1568-1569"];
m11_512 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataProperties()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(@''{\r\n  ''''$id'''': ''''1'''',\r\n  ''''other'''': {\r\n    ''''$id'''': ''''2'''',\r\n    ''''blah'''': null\r\n  },\r\n  ''''self'''': {\r\n    ''''$ref'''': ''''1''''\r\n  }\r\n}'', json)", span="1571-1580"];
m11_513 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataProperties()", file="XmlNodeConverterTest.cs", label="XmlNode node = DeserializeXmlNode(json, ''root'')", span="1582-1582"];
m11_514 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataProperties()", file="XmlNodeConverterTest.cs", label="string xml = GetIndentedInnerXml(node)", span="1583-1583"];
m11_517 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataProperties()", file="XmlNodeConverterTest.cs", label="string xmlJson = SerializeXmlNode(node)", span="1594-1594"];
m11_515 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataProperties()", file="XmlNodeConverterTest.cs", label="string expected = @''<?xml version=''''1.0'''' encoding=''''utf-16''''?>\r\n<root xmlns:json=''''http://james.newtonking.com/projects/json'''' json:id=''''1''''>\r\n  <other json:id=''''2''''>\r\n    <blah />\r\n  </other>\r\n  <self json:ref=''''1'''' />\r\n</root>''", span="1584-1590"];
m11_516 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataProperties()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(expected, xml)", span="1592-1592"];
m11_518 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataProperties()", file="XmlNodeConverterTest.cs", label="string expectedXmlJson = @''{\r\n  ''''root'''': {\r\n    ''''$id'''': ''''1'''',\r\n    ''''other'''': {\r\n      ''''$id'''': ''''2'''',\r\n      ''''blah'''': null\r\n    },\r\n    ''''self'''': {\r\n      ''''$ref'''': ''''1''''\r\n    }\r\n  }\r\n}''", span="1595-1606"];
m11_519 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataProperties()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(expectedXmlJson, xmlJson)", span="1608-1608"];
m11_520 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataProperties()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataProperties()", span="1562-1562"];
m11_821 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Local_Precision()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Local_Precision()", span="2841-2841"];
m11_822 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Local_Precision()", file="XmlNodeConverterTest.cs", label="DateTime dt = DateTime.Parse(''2014-01-23T00:00:00.1234567+01:00'')", span="2843-2843"];
m11_823 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Local_Precision()", file="XmlNodeConverterTest.cs", label="string json = @''{''''CreatedDate'''': ''''2014-01-23T00:00:00.1234567+01:00''''}''", span="2845-2845"];
m11_825 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Local_Precision()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(dt.ToString(''yyyy-MM-ddTHH:mm:ss.FFFFFFFK'', CultureInfo.InvariantCulture), dxml.Root.Element(''CreatedDate'').Value)", span="2847-2847"];
m11_824 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Local_Precision()", file="XmlNodeConverterTest.cs", label="var dxml = JsonConvert.DeserializeXNode(json, ''root'')", span="2846-2846"];
m11_826 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Local_Precision()", file="XmlNodeConverterTest.cs", label="Console.WriteLine(''DateTimeToXml_Local: '' + dxml.Root.Element(''CreatedDate'').Value)", span="2849-2849"];
m11_827 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Local_Precision()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Local_Precision()", span="2841-2841"];
m11_27 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string, string)", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string, string)", span="96-96"];
m11_28 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string, string)", file="XmlNodeConverterTest.cs", label="JsonTextReader reader", span="98-98"];
m11_29 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string, string)", file="XmlNodeConverterTest.cs", label="reader = new JsonTextReader(new StringReader(json))", span="100-100"];
m11_32 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string, string)", file="XmlNodeConverterTest.cs", label="deserializeRootElementName != null", span="103-103"];
m11_33 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string, string)", file="XmlNodeConverterTest.cs", label="converter.DeserializeRootElementName = deserializeRootElementName", span="105-105"];
m11_36 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string, string)", file="XmlNodeConverterTest.cs", label="reader = new JsonTextReader(new StringReader(json))", span="113-113"];
m11_30 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string, string)", file="XmlNodeConverterTest.cs", label="reader.Read()", span="101-101"];
m11_34 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string, string)", file="XmlNodeConverterTest.cs", label="XmlNode node = (XmlNode)converter.ReadJson(reader, typeof(XmlDocument), null, new JsonSerializer())", span="108-108"];
m11_31 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string, string)", file="XmlNodeConverterTest.cs", label="XmlNodeConverter converter = new XmlNodeConverter()", span="102-102"];
m11_38 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string, string)", file="XmlNodeConverterTest.cs", label="XDocument d = (XDocument)converter.ReadJson(reader, typeof(XDocument), null, new JsonSerializer())", span="115-115"];
m11_35 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string, string)", file="XmlNodeConverterTest.cs", label="string xmlText = node.OuterXml", span="111-111"];
m11_43 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string, string)", file="XmlNodeConverterTest.cs", label="return node;", span="126-126"];
m11_42 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string, string)", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(xmlText, linqXmlText)", span="123-123"];
m11_37 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string, string)", file="XmlNodeConverterTest.cs", label="reader.Read()", span="114-114"];
m11_39 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string, string)", file="XmlNodeConverterTest.cs", label="string linqXmlText = d.ToString(SaveOptions.DisableFormatting)", span="117-117"];
m11_40 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string, string)", file="XmlNodeConverterTest.cs", label="d.Declaration != null", span="118-118"];
m11_41 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string, string)", file="XmlNodeConverterTest.cs", label="linqXmlText = d.Declaration + linqXmlText", span="120-120"];
m11_44 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string, string)", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string, string)", span="96-96"];
m11_275 [cluster="Unk.CreateElement", file="XmlNodeConverterTest.cs", label="Entry Unk.CreateElement", span=""];
m11_65 [cluster="Unk.WriteNode", file="XmlNodeConverterTest.cs", label="Entry Unk.WriteNode", span=""];
m11_521 [cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.CircularDictionary.CircularDictionary()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.CircularDictionary.CircularDictionary()", span="433-433"];
m11_749 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RootPropertyError()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RootPropertyError()", span="2704-2704"];
m11_750 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RootPropertyError()", file="XmlNodeConverterTest.cs", label="string json = @''{\r\n  ''''$id'''': ''''1'''',\r\n  ''''AOSLocaleName'''': ''''en-US'''',\r\n  ''''AXLanguage'''': ''''EN-AU'''',\r\n  ''''Company'''': ''''AURE'''',\r\n  ''''CompanyTimeZone'''': 8,\r\n  ''''CurrencyInfo'''': {\r\n    ''''$id'''': ''''2'''',\r\n    ''''CurrencyCode'''': ''''AUD'''',\r\n    ''''Description'''': ''''Australian Dollar'''',\r\n    ''''ExchangeRate'''': 100.0,\r\n    ''''ISOCurrencyCode'''': ''''AUD'''',\r\n    ''''Prefix'''': '''''''',\r\n    ''''Suffix'''': ''''''''\r\n  },\r\n  ''''IsSysAdmin'''': true,\r\n  ''''UserId'''': ''''lamar.miller'''',\r\n  ''''UserPreferredCalendar'''': 0,\r\n  ''''UserPreferredTimeZone'''': 8\r\n}''", span="2706-2725"];
m11_751 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RootPropertyError()", file="XmlNodeConverterTest.cs", label="ExceptionAssert.Throws<JsonSerializationException>(\r\n                () => JsonConvert.DeserializeXmlNode(json),\r\n                ''JSON root object has property '$id' that will be converted to an attribute. A root object cannot have any attribute properties. Consider specifying a DeserializeRootElementName. Path '$id', line 2, position 12.'')", span="2727-2729"];
m11_752 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RootPropertyError()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RootPropertyError()", span="2704-2704"];
m11_46 [cluster="System.IO.StringReader.StringReader(string)", file="XmlNodeConverterTest.cs", label="Entry System.IO.StringReader.StringReader(string)", span="0-0"];
m11_460 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNestedArraysToXml()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNestedArraysToXml()", span="1332-1332"];
m11_461 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNestedArraysToXml()", file="XmlNodeConverterTest.cs", label="string json = @''{\r\n  ''''available_sizes'''': [\r\n    [\r\n      [113, 150],\r\n      ''''assets/images/resized/0001/1070/11070v1-max-150x150.jpg''''\r\n    ],\r\n    [\r\n      [189, 250],\r\n      ''''assets/images/resized/0001/1070/11070v1-max-250x250.jpg''''\r\n    ],\r\n    [\r\n      [341, 450],\r\n      ''''assets/images/resized/0001/1070/11070v1-max-450x450.jpg''''\r\n    ]\r\n  ]\r\n}''", span="1334-1349"];
m11_462 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNestedArraysToXml()", file="XmlNodeConverterTest.cs", label="XmlDocument newDoc = JsonConvert.DeserializeXmlNode(json, ''myRoot'')", span="1352-1352"];
m11_464 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNestedArraysToXml()", file="XmlNodeConverterTest.cs", label="XDocument newXDoc = JsonConvert.DeserializeXNode(json, ''myRoot'')", span="1358-1358"];
m11_463 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNestedArraysToXml()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(@''<myRoot><available_sizes><available_sizes><available_sizes>113</available_sizes><available_sizes>150</available_sizes></available_sizes><available_sizes>assets/images/resized/0001/1070/11070v1-max-150x150.jpg</available_sizes></available_sizes><available_sizes><available_sizes><available_sizes>189</available_sizes><available_sizes>250</available_sizes></available_sizes><available_sizes>assets/images/resized/0001/1070/11070v1-max-250x250.jpg</available_sizes></available_sizes><available_sizes><available_sizes><available_sizes>341</available_sizes><available_sizes>450</available_sizes></available_sizes><available_sizes>assets/images/resized/0001/1070/11070v1-max-450x450.jpg</available_sizes></available_sizes></myRoot>'', newDoc.InnerXml)", span="1354-1354"];
m11_465 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNestedArraysToXml()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(@''<myRoot><available_sizes><available_sizes><available_sizes>113</available_sizes><available_sizes>150</available_sizes></available_sizes><available_sizes>assets/images/resized/0001/1070/11070v1-max-150x150.jpg</available_sizes></available_sizes><available_sizes><available_sizes><available_sizes>189</available_sizes><available_sizes>250</available_sizes></available_sizes><available_sizes>assets/images/resized/0001/1070/11070v1-max-250x250.jpg</available_sizes></available_sizes><available_sizes><available_sizes><available_sizes>341</available_sizes><available_sizes>450</available_sizes></available_sizes><available_sizes>assets/images/resized/0001/1070/11070v1-max-450x450.jpg</available_sizes></available_sizes></myRoot>'', newXDoc.ToString(SaveOptions.DisableFormatting))", span="1360-1360"];
m11_466 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNestedArraysToXml()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNestedArraysToXml()", span="1332-1332"];
m11_788 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Unspecified()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Unspecified()", span="2789-2789"];
m11_789 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Unspecified()", file="XmlNodeConverterTest.cs", label="string json = @''{''''CreatedDate'''': ''''2014-01-23T00:00:00''''}''", span="2791-2791"];
m11_790 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Unspecified()", file="XmlNodeConverterTest.cs", label="var dxml = JsonConvert.DeserializeXNode(json, ''root'')", span="2792-2792"];
m11_791 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Unspecified()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(''2014-01-23T00:00:00'', dxml.Root.Element(''CreatedDate'').Value)", span="2793-2793"];
m11_792 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Unspecified()", file="XmlNodeConverterTest.cs", label="Console.WriteLine(''DateTimeToXml_Unspecified: '' + dxml.Root.Element(''CreatedDate'').Value)", span="2795-2795"];
m11_793 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Unspecified()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Unspecified()", span="2789-2789"];
m11_389 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JavaScriptConstructor()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JavaScriptConstructor()", span="1059-1059"];
m11_390 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JavaScriptConstructor()", file="XmlNodeConverterTest.cs", label="string jsonText = @''{root:{r:new Date(34343, 55)}}''", span="1061-1061"];
m11_391 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JavaScriptConstructor()", file="XmlNodeConverterTest.cs", label="XmlDocument newDoc = (XmlDocument)DeserializeXmlNode(jsonText)", span="1063-1063"];
m11_392 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JavaScriptConstructor()", file="XmlNodeConverterTest.cs", label="string expected = @''<root><r><Date>34343</Date><Date>55</Date></r></root>''", span="1065-1065"];
m11_393 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JavaScriptConstructor()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(expected, newDoc.InnerXml)", span="1067-1067"];
m11_394 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JavaScriptConstructor()", file="XmlNodeConverterTest.cs", label="string json = SerializeXmlNode(newDoc)", span="1069-1069"];
m11_395 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JavaScriptConstructor()", file="XmlNodeConverterTest.cs", label="expected = @''{\r\n  ''''root'''': {\r\n    ''''r'''': {\r\n      ''''Date'''': [\r\n        ''''34343'''',\r\n        ''''55''''\r\n      ]\r\n    }\r\n  }\r\n}''", span="1070-1079"];
m11_396 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JavaScriptConstructor()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(expected, json)", span="1081-1081"];
m11_397 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JavaScriptConstructor()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JavaScriptConstructor()", span="1059-1059"];
m11_66 [cluster="Unk.Flush", file="XmlNodeConverterTest.cs", label="Entry Unk.Flush", span=""];
m11_735 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeBigInteger()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeBigInteger()", span="2676-2676"];
m11_736 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeBigInteger()", file="XmlNodeConverterTest.cs", label="var json = ''{\''DocumentId\'':13779965364495889899 }''", span="2678-2678"];
m11_737 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeBigInteger()", file="XmlNodeConverterTest.cs", label="XmlDocument node = JsonConvert.DeserializeXmlNode(json)", span="2680-2680"];
m11_738 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeBigInteger()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(''<DocumentId>13779965364495889899</DocumentId>'', node.OuterXml)", span="2682-2682"];
m11_739 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeBigInteger()", file="XmlNodeConverterTest.cs", label="string json2 = JsonConvert.SerializeXmlNode(node)", span="2684-2684"];
m11_740 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeBigInteger()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(@''{''''DocumentId'''':''''13779965364495889899''''}'', json2)", span="2686-2686"];
m11_741 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeBigInteger()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeBigInteger()", span="2676-2676"];
m11_178 [cluster="System.TimeSpan.FromHours(double)", file="XmlNodeConverterTest.cs", label="Entry System.TimeSpan.FromHours(double)", span="0-0"];
m11_605 [cluster="System.Collections.Generic.List<T>.List()", file="XmlNodeConverterTest.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m11_311 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ToStringWithDeclaration(XDocument, bool)", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ToStringWithDeclaration(XDocument, bool)", span="805-805"];
m11_314 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ToStringWithDeclaration(XDocument, bool)", file="XmlNodeConverterTest.cs", label="StringBuilder builder = new StringBuilder()", span="807-807"];
m11_315 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ToStringWithDeclaration(XDocument, bool)", file="XmlNodeConverterTest.cs", label="var writer = XmlWriter.Create(new Utf8StringWriter(builder), new XmlWriterSettings { Indent = indent })", span="808-808"];
m11_316 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ToStringWithDeclaration(XDocument, bool)", file="XmlNodeConverterTest.cs", label="doc.Save(writer)", span="810-810"];
m11_317 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ToStringWithDeclaration(XDocument, bool)", file="XmlNodeConverterTest.cs", label="return builder.ToString();", span="812-812"];
m11_318 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ToStringWithDeclaration(XDocument, bool)", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ToStringWithDeclaration(XDocument, bool)", span="805-805"];
m11_181 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeOffsetContainer.DateTimeOffsetContainer()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeOffsetContainer.DateTimeOffsetContainer()", span="380-380"];
m11_727 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXmlElementWithNamespaceInChildrenRootDontHaveNameSpace()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXmlElementWithNamespaceInChildrenRootDontHaveNameSpace()", span="2657-2657"];
m11_728 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXmlElementWithNamespaceInChildrenRootDontHaveNameSpace()", file="XmlNodeConverterTest.cs", label="var xmlString = @''<root>\r\n                              <b xmlns='http://www.example.com/ns'>Asd</b>\r\n                              <c>AAA</c>\r\n                              <test>adad</test>\r\n                              </root>''", span="2659-2663"];
m11_729 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXmlElementWithNamespaceInChildrenRootDontHaveNameSpace()", file="XmlNodeConverterTest.cs", label="XmlDocument xml = new XmlDocument()", span="2665-2665"];
m11_730 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXmlElementWithNamespaceInChildrenRootDontHaveNameSpace()", file="XmlNodeConverterTest.cs", label="xml.LoadXml(xmlString)", span="2666-2666"];
m11_731 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXmlElementWithNamespaceInChildrenRootDontHaveNameSpace()", file="XmlNodeConverterTest.cs", label="var json1 = JsonConvert.SerializeXmlNode(xml)", span="2668-2668"];
m11_732 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXmlElementWithNamespaceInChildrenRootDontHaveNameSpace()", file="XmlNodeConverterTest.cs", label="var xmlBack = JsonConvert.DeserializeObject<XmlDocument>(json1)", span="2669-2669"];
m11_733 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXmlElementWithNamespaceInChildrenRootDontHaveNameSpace()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(@''<root><b xmlns=''''http://www.example.com/ns''''>Asd</b><c>AAA</c><test>adad</test></root>'', xmlBack.OuterXml)", span="2671-2671"];
m11_734 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXmlElementWithNamespaceInChildrenRootDontHaveNameSpace()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXmlElementWithNamespaceInChildrenRootDontHaveNameSpace()", span="2657-2657"];
m11_774 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Serialize_XDocument_NoRootWithDeclaration()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Serialize_XDocument_NoRootWithDeclaration()", span="2767-2767"];
m11_775 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Serialize_XDocument_NoRootWithDeclaration()", file="XmlNodeConverterTest.cs", label="XDocument d = new XDocument()", span="2769-2769"];
m11_776 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Serialize_XDocument_NoRootWithDeclaration()", file="XmlNodeConverterTest.cs", label="d.Declaration = new XDeclaration(''Version!'', ''Encoding!'', ''Standalone!'')", span="2770-2770"];
m11_777 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Serialize_XDocument_NoRootWithDeclaration()", file="XmlNodeConverterTest.cs", label="string json = JsonConvert.SerializeXNode(d)", span="2772-2772"];
m11_778 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Serialize_XDocument_NoRootWithDeclaration()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(@''{''''?xml'''':{''''@version'''':''''Version!'''',''''@encoding'''':''''Encoding!'''',''''@standalone'''':''''Standalone!''''}}'', json)", span="2774-2774"];
m11_779 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Serialize_XDocument_NoRootWithDeclaration()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Serialize_XDocument_NoRootWithDeclaration()", span="2767-2767"];
m11_667 [cluster="System.IO.StreamReader.StreamReader(System.IO.Stream)", file="XmlNodeConverterTest.cs", label="Entry System.IO.StreamReader.StreamReader(System.IO.Stream)", span="0-0"];
m11_780 [cluster="XDeclaration.cstr", file="XmlNodeConverterTest.cs", label="Entry XDeclaration.cstr", span=""];
m11_885 [cluster="System.IO.StringWriter.StringWriter(System.Text.StringBuilder, System.IFormatProvider)", file="XmlNodeConverterTest.cs", label="Entry System.IO.StringWriter.StringWriter(System.Text.StringBuilder, System.IFormatProvider)", span="0-0"];
m11_62 [cluster="System.IO.StringWriter.StringWriter()", file="XmlNodeConverterTest.cs", label="Entry System.IO.StringWriter.StringWriter()", span="0-0"];
m11_850 [cluster="XElement.cstr", file="XmlNodeConverterTest.cs", label="Entry XElement.cstr", span=""];
m11_274 [cluster="Unk.CreateCDataSection", file="XmlNodeConverterTest.cs", label="Entry Unk.CreateCDataSection", span=""];
m11_272 [cluster="Unk.Attribute", file="XmlNodeConverterTest.cs", label="Entry Unk.Attribute", span=""];
m11_500 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EscapingNames()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EscapingNames()", span="1518-1518"];
m11_501 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EscapingNames()", file="XmlNodeConverterTest.cs", label="string json = @''{\r\n              ''''root!'''': {\r\n                ''''person!'''': [\r\n                  {\r\n                    ''''@id!'''': ''''1'''',\r\n                    ''''name!'''': ''''Alan'''',\r\n                    ''''url!'''': ''''http://www.google.com''''\r\n                  },\r\n                  {\r\n                    ''''@id!'''': ''''2'''',\r\n                    ''''name!'''': ''''Louis'''',\r\n                    ''''url!'''': ''''http://www.yahoo.com''''\r\n                  }\r\n                ]\r\n              }\r\n            }''", span="1520-1535"];
m11_502 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EscapingNames()", file="XmlNodeConverterTest.cs", label="XmlDocument doc = (XmlDocument)DeserializeXmlNode(json)", span="1537-1537"];
m11_503 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EscapingNames()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(@''<root_x0021_><person_x0021_ id_x0021_=''''1''''><name_x0021_>Alan</name_x0021_><url_x0021_>http://www.google.com</url_x0021_></person_x0021_><person_x0021_ id_x0021_=''''2''''><name_x0021_>Louis</name_x0021_><url_x0021_>http://www.yahoo.com</url_x0021_></person_x0021_></root_x0021_>'', doc.InnerXml)", span="1539-1539"];
m11_504 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EscapingNames()", file="XmlNodeConverterTest.cs", label="string json2 = SerializeXmlNode(doc)", span="1541-1541"];
m11_505 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EscapingNames()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(@''{\r\n  ''''root!'''': {\r\n    ''''person!'''': [\r\n      {\r\n        ''''@id!'''': ''''1'''',\r\n        ''''name!'''': ''''Alan'''',\r\n        ''''url!'''': ''''http://www.google.com''''\r\n      },\r\n      {\r\n        ''''@id!'''': ''''2'''',\r\n        ''''name!'''': ''''Louis'''',\r\n        ''''url!'''': ''''http://www.yahoo.com''''\r\n      }\r\n    ]\r\n  }\r\n}'', json2)", span="1543-1558"];
m11_506 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EscapingNames()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EscapingNames()", span="1518-1518"];
m11_851 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDocumentExplicitAttributeNamespace()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDocumentExplicitAttributeNamespace()", span="2891-2891"];
m11_852 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDocumentExplicitAttributeNamespace()", file="XmlNodeConverterTest.cs", label="var original = XDocument.Parse(''<MyElement xmlns=\''http://example.com\'' />'')", span="2893-2893"];
m11_853 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDocumentExplicitAttributeNamespace()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(@''<MyElement xmlns=''''http://example.com'''' />'', original.ToString())", span="2894-2894"];
m11_854 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDocumentExplicitAttributeNamespace()", file="XmlNodeConverterTest.cs", label="var json = JsonConvert.SerializeObject(original)", span="2896-2896"];
m11_855 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDocumentExplicitAttributeNamespace()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(@''{''''MyElement'''':{''''@xmlns'''':''''http://example.com''''}}'', json)", span="2897-2897"];
m11_856 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDocumentExplicitAttributeNamespace()", file="XmlNodeConverterTest.cs", label="var deserialized = JsonConvert.DeserializeObject<XDocument>(json)", span="2899-2899"];
m11_857 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDocumentExplicitAttributeNamespace()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(@''<MyElement xmlns=''''http://example.com'''' />'', deserialized.ToString())", span="2900-2900"];
m11_858 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDocumentExplicitAttributeNamespace()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDocumentExplicitAttributeNamespace()", span="2891-2891"];
m11_285 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentFragmentSerialize()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentFragmentSerialize()", span="676-676"];
m11_286 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentFragmentSerialize()", file="XmlNodeConverterTest.cs", label="XmlDocument doc = new XmlDocument()", span="678-678"];
m11_287 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentFragmentSerialize()", file="XmlNodeConverterTest.cs", label="XmlDocumentFragment fragement = doc.CreateDocumentFragment()", span="680-680"];
m11_288 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentFragmentSerialize()", file="XmlNodeConverterTest.cs", label="fragement.InnerXml = ''<Item>widget</Item><Item>widget</Item>''", span="682-682"];
m11_289 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentFragmentSerialize()", file="XmlNodeConverterTest.cs", label="string jsonText = JsonConvert.SerializeXmlNode(fragement)", span="684-684"];
m11_290 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentFragmentSerialize()", file="XmlNodeConverterTest.cs", label="string expected = @''{''''Item'''':[''''widget'''',''''widget'''']}''", span="686-686"];
m11_291 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentFragmentSerialize()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(expected, jsonText)", span="688-688"];
m11_292 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentFragmentSerialize()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentFragmentSerialize()", span="676-676"];
m11_22 [cluster="Unk.SerializeXNode", file="XmlNodeConverterTest.cs", label="Entry Unk.SerializeXNode", span=""];
m11_273 [cluster="Unk.CreateProcessingInstruction", file="XmlNodeConverterTest.cs", label="Entry Unk.CreateProcessingInstruction", span=""];
m11_549 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeMetadataPropertyWithBadValue()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeMetadataPropertyWithBadValue()", span="1715-1715"];
m11_550 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeMetadataPropertyWithBadValue()", file="XmlNodeConverterTest.cs", label="string json = @''{\r\n  ''''$id'''': []\r\n}''", span="1717-1719"];
m11_551 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeMetadataPropertyWithBadValue()", file="XmlNodeConverterTest.cs", label="ExceptionAssert.Throws<JsonSerializationException>(\r\n                () => { JsonConvert.DeserializeXmlNode(json, ''root''); },\r\n                ''Unexpected JsonToken: StartArray. Path '$id', line 2, position 10.'')", span="1721-1723"];
m11_552 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeMetadataPropertyWithBadValue()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeMetadataPropertyWithBadValue()", span="1715-1715"];
m11_52 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.IndentXml(string)", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.IndentXml(string)", span="130-130"];
m11_53 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.IndentXml(string)", file="XmlNodeConverterTest.cs", label="XmlReader reader = XmlReader.Create(new StringReader(xml))", span="132-132"];
m11_54 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.IndentXml(string)", file="XmlNodeConverterTest.cs", label="StringWriter sw = new StringWriter()", span="134-134"];
m11_56 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.IndentXml(string)", file="XmlNodeConverterTest.cs", label="reader.Read()", span="137-137"];
m11_57 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.IndentXml(string)", file="XmlNodeConverterTest.cs", label="writer.WriteNode(reader, false)", span="139-139"];
m11_55 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.IndentXml(string)", file="XmlNodeConverterTest.cs", label="XmlWriter writer = XmlWriter.Create(sw, new XmlWriterSettings { Indent = true, OmitXmlDeclaration = true })", span="135-135"];
m11_59 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.IndentXml(string)", file="XmlNodeConverterTest.cs", label="return sw.ToString();", span="144-144"];
m11_58 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.IndentXml(string)", file="XmlNodeConverterTest.cs", label="writer.Flush()", span="142-142"];
m11_60 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.IndentXml(string)", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.IndentXml(string)", span="130-130"];
m11_19 [cluster="Unk.Get", file="XmlNodeConverterTest.cs", label="Entry Unk.Get", span=""];
m11_152 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.FloatParseHandlingDecimal()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.FloatParseHandlingDecimal()", span="357-357"];
m11_153 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.FloatParseHandlingDecimal()", file="XmlNodeConverterTest.cs", label="decimal d = (decimal)Math.PI + 1000000000m", span="359-359"];
m11_154 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.FloatParseHandlingDecimal()", file="XmlNodeConverterTest.cs", label="var x = new DecimalContainer { Number = d }", span="360-360"];
m11_155 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.FloatParseHandlingDecimal()", file="XmlNodeConverterTest.cs", label="var json = JsonConvert.SerializeObject(x, Formatting.Indented)", span="362-362"];
m11_161 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.FloatParseHandlingDecimal()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(x.Number, x2.Number)", span="377-377"];
m11_156 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.FloatParseHandlingDecimal()", file="XmlNodeConverterTest.cs", label="XDocument doc1 = JsonConvert.DeserializeObject<XDocument>(json, new JsonSerializerSettings\r\n            {\r\n                Converters = { new XmlNodeConverter() },\r\n                FloatParseHandling = FloatParseHandling.Decimal\r\n            })", span="364-368"];
m11_157 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.FloatParseHandlingDecimal()", file="XmlNodeConverterTest.cs", label="var xml = doc1.ToString()", span="370-370"];
m11_159 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.FloatParseHandlingDecimal()", file="XmlNodeConverterTest.cs", label="string json2 = JsonConvert.SerializeObject(doc1, Formatting.Indented)", span="373-373"];
m11_158 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.FloatParseHandlingDecimal()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(''<Number>1000000003.14159265358979</Number>'', xml)", span="371-371"];
m11_160 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.FloatParseHandlingDecimal()", file="XmlNodeConverterTest.cs", label="DecimalContainer x2 = JsonConvert.DeserializeObject<DecimalContainer>(json2)", span="375-375"];
m11_162 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.FloatParseHandlingDecimal()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.FloatParseHandlingDecimal()", span="357-357"];
m11_164 [cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting)", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting)", span="537-537"];
m11_182 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.GroupElementsOfTheSameName()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.GroupElementsOfTheSameName()", span="410-410"];
m11_183 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.GroupElementsOfTheSameName()", file="XmlNodeConverterTest.cs", label="string xml = ''<root><p>Text1<span>Span1</span> <span>Span2</span> Text2</p></root>''", span="412-412"];
m11_184 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.GroupElementsOfTheSameName()", file="XmlNodeConverterTest.cs", label="string json = JsonConvert.SerializeXNode(XElement.Parse(xml))", span="414-414"];
m11_185 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.GroupElementsOfTheSameName()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(@''{''''root'''':{''''p'''':{''''#text'''':[''''Text1'''','''' Text2''''],''''span'''':[''''Span1'''',''''Span2'''']}}}'', json)", span="416-416"];
m11_186 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.GroupElementsOfTheSameName()", file="XmlNodeConverterTest.cs", label="XDocument doc = JsonConvert.DeserializeXNode(json)", span="418-418"];
m11_187 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.GroupElementsOfTheSameName()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(@''<root>\r\n  <p>Text1 Text2<span>Span1</span><span>Span2</span></p>\r\n</root>'', doc.ToString())", span="420-422"];
m11_188 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.GroupElementsOfTheSameName()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.GroupElementsOfTheSameName()", span="410-410"];
m11_622 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmtpyElementWithArrayAttributeShouldWriteElement()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmtpyElementWithArrayAttributeShouldWriteElement()", span="2021-2021"];
m11_623 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmtpyElementWithArrayAttributeShouldWriteElement()", file="XmlNodeConverterTest.cs", label="string xml = @''<root>\r\n<Reports d1p1:Array=''''true'''' xmlns:d1p1=''''http://james.newtonking.com/projects/json'''' />\r\n</root>''", span="2023-2025"];
m11_624 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmtpyElementWithArrayAttributeShouldWriteElement()", file="XmlNodeConverterTest.cs", label="XmlDocument d = new XmlDocument()", span="2027-2027"];
m11_625 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmtpyElementWithArrayAttributeShouldWriteElement()", file="XmlNodeConverterTest.cs", label="d.LoadXml(xml)", span="2028-2028"];
m11_626 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmtpyElementWithArrayAttributeShouldWriteElement()", file="XmlNodeConverterTest.cs", label="string json = JsonConvert.SerializeXmlNode(d, Formatting.Indented)", span="2030-2030"];
m11_627 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmtpyElementWithArrayAttributeShouldWriteElement()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(@''{\r\n  ''''root'''': {\r\n    ''''Reports'''': [\r\n      {}\r\n    ]\r\n  }\r\n}'', json)", span="2032-2038"];
m11_628 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmtpyElementWithArrayAttributeShouldWriteElement()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmtpyElementWithArrayAttributeShouldWriteElement()", span="2021-2021"];
m11_109 [cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object)", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object)", span="524-524"];
m11_96 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MyModel.MyModel()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MyModel.MyModel()", span="178-178"];
m11_293 [cluster="Unk.CreateDocumentFragment", file="XmlNodeConverterTest.cs", label="Entry Unk.CreateDocumentFragment", span=""];
m11_110 [cluster="Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string)", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string)", span="703-703"];
m11_595 [cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, params Newtonsoft.Json.JsonConverter[])", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object, params Newtonsoft.Json.JsonConverter[])", span="548-548"];
m11_593 [cluster="System.DateTime.DateTime(int, int, int, int, int, int, System.DateTimeKind)", file="XmlNodeConverterTest.cs", label="Entry System.DateTime.DateTime(int, int, int, int, int, int, System.DateTimeKind)", span="0-0"];
m11_756 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyNodeAndOmitRoot()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyNodeAndOmitRoot()", span="2733-2733"];
m11_757 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyNodeAndOmitRoot()", file="XmlNodeConverterTest.cs", label="string xmlString = @''<myemptynode />''", span="2735-2735"];
m11_758 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyNodeAndOmitRoot()", file="XmlNodeConverterTest.cs", label="XmlDocument xml = new XmlDocument()", span="2737-2737"];
m11_759 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyNodeAndOmitRoot()", file="XmlNodeConverterTest.cs", label="xml.LoadXml(xmlString)", span="2738-2738"];
m11_760 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyNodeAndOmitRoot()", file="XmlNodeConverterTest.cs", label="string json = JsonConvert.SerializeXmlNode(xml, Formatting.Indented, true)", span="2740-2740"];
m11_761 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyNodeAndOmitRoot()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(''null'', json)", span="2742-2742"];
m11_762 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyNodeAndOmitRoot()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyNodeAndOmitRoot()", span="2733-2733"];
m11_884 [cluster="System.Text.StringBuilder.StringBuilder(int)", file="XmlNodeConverterTest.cs", label="Entry System.Text.StringBuilder.StringBuilder(int)", span="0-0"];
m11_215 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeUndeclaredNamespacePrefix()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeUndeclaredNamespacePrefix()", span="473-473"];
m11_216 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeUndeclaredNamespacePrefix()", file="XmlNodeConverterTest.cs", label="XmlDocument doc = JsonConvert.DeserializeXmlNode(''{ A: { '@xsi:nil': true } }'')", span="475-475"];
m11_217 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeUndeclaredNamespacePrefix()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(@''<A nil=''''true'''' />'', doc.OuterXml)", span="477-477"];
m11_219 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeUndeclaredNamespacePrefix()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(doc.OuterXml, xdoc.ToString())", span="481-481"];
m11_218 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeUndeclaredNamespacePrefix()", file="XmlNodeConverterTest.cs", label="XDocument xdoc = JsonConvert.DeserializeXNode(''{ A: { '@xsi:nil': true } }'')", span="479-479"];
m11_220 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeUndeclaredNamespacePrefix()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeUndeclaredNamespacePrefix()", span="473-473"];
m11_321 [cluster="System.Text.StringBuilder.ToString()", file="XmlNodeConverterTest.cs", label="Entry System.Text.StringBuilder.ToString()", span="0-0"];
m11_606 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.OmitRootObject()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.OmitRootObject()", span="1937-1937"];
m11_607 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.OmitRootObject()", file="XmlNodeConverterTest.cs", label="string xml = @''<test>\r\n  <Name>Hi</Name>\r\n  <Name>Hi</Name>\r\n  <Products json:Array=''''true'''' xmlns:json=''''http://james.newtonking.com/projects/json''''>\r\n    <Name>First</Name>\r\n    <ExpiryDate>2000-01-01T00:00:00Z</ExpiryDate>\r\n    <Price>0</Price>\r\n    <Sizes />\r\n  </Products>\r\n</test>''", span="1939-1948"];
m11_608 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.OmitRootObject()", file="XmlNodeConverterTest.cs", label="XmlDocument d = new XmlDocument()", span="1950-1950"];
m11_609 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.OmitRootObject()", file="XmlNodeConverterTest.cs", label="d.LoadXml(xml)", span="1951-1951"];
m11_610 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.OmitRootObject()", file="XmlNodeConverterTest.cs", label="string output = JsonConvert.SerializeXmlNode(d, Formatting.Indented, true)", span="1953-1953"];
m11_611 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.OmitRootObject()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(@''{\r\n  ''''Name'''': [\r\n    ''''Hi'''',\r\n    ''''Hi''''\r\n  ],\r\n  ''''Products'''': [\r\n    {\r\n      ''''Name'''': ''''First'''',\r\n      ''''ExpiryDate'''': ''''2000-01-01T00:00:00Z'''',\r\n      ''''Price'''': ''''0'''',\r\n      ''''Sizes'''': null\r\n    }\r\n  ]\r\n}'', output)", span="1955-1968"];
m11_612 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.OmitRootObject()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.OmitRootObject()", span="1937-1937"];
m11_327 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NamespaceSerializeDeserialize()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NamespaceSerializeDeserialize()", span="827-827"];
m11_328 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NamespaceSerializeDeserialize()", file="XmlNodeConverterTest.cs", label="string xml = @''<?xml version=''''1.0'''' encoding=''''utf-8'''' ?>\r\n<xs:schema xs:id=''''SomeID'''' \r\n	xmlns='''''''' \r\n	xmlns:xs=''''http://www.w3.org/2001/XMLSchema'''' \r\n	xmlns:msdata=''''urn:schemas-microsoft-com:xml-msdata''''>\r\n	<xs:element name=''''MyDataSet'''' msdata:IsDataSet=''''true''''>\r\n		<xs:complexType>\r\n			<xs:choice maxOccurs=''''unbounded''''>\r\n				<xs:element name=''''customers'''' >\r\n					<xs:complexType >\r\n						<xs:sequence>\r\n							<xs:element name=''''CustomerID'''' type=''''xs:integer'''' \r\n										 minOccurs=''''0'''' />\r\n							<xs:element name=''''CompanyName'''' type=''''xs:string'''' \r\n										 minOccurs=''''0'''' />\r\n							<xs:element name=''''Phone'''' type=''''xs:string'''' />\r\n						</xs:sequence>\r\n					</xs:complexType>\r\n				</xs:element>\r\n			</xs:choice>\r\n		</xs:complexType>\r\n	</xs:element>\r\n</xs:schema>''", span="829-851"];
m11_329 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NamespaceSerializeDeserialize()", file="XmlNodeConverterTest.cs", label="XmlDocument doc = new XmlDocument()", span="853-853"];
m11_330 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NamespaceSerializeDeserialize()", file="XmlNodeConverterTest.cs", label="doc.LoadXml(xml)", span="854-854"];
m11_331 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NamespaceSerializeDeserialize()", file="XmlNodeConverterTest.cs", label="string jsonText = SerializeXmlNode(doc)", span="856-856"];
m11_335 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NamespaceSerializeDeserialize()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(doc.InnerXml, deserializedDoc.InnerXml)", span="907-907"];
m11_332 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NamespaceSerializeDeserialize()", file="XmlNodeConverterTest.cs", label="string expected = @''{\r\n  ''''?xml'''': {\r\n    ''''@version'''': ''''1.0'''',\r\n    ''''@encoding'''': ''''utf-8''''\r\n  },\r\n  ''''xs:schema'''': {\r\n    ''''@xs:id'''': ''''SomeID'''',\r\n    ''''@xmlns'''': '''''''',\r\n    ''''@xmlns:xs'''': ''''http://www.w3.org/2001/XMLSchema'''',\r\n    ''''@xmlns:msdata'''': ''''urn:schemas-microsoft-com:xml-msdata'''',\r\n    ''''xs:element'''': {\r\n      ''''@name'''': ''''MyDataSet'''',\r\n      ''''@msdata:IsDataSet'''': ''''true'''',\r\n      ''''xs:complexType'''': {\r\n        ''''xs:choice'''': {\r\n          ''''@maxOccurs'''': ''''unbounded'''',\r\n          ''''xs:element'''': {\r\n            ''''@name'''': ''''customers'''',\r\n            ''''xs:complexType'''': {\r\n              ''''xs:sequence'''': {\r\n                ''''xs:element'''': [\r\n                  {\r\n                    ''''@name'''': ''''CustomerID'''',\r\n                    ''''@type'''': ''''xs:integer'''',\r\n                    ''''@minOccurs'''': ''''0''''\r\n                  },\r\n                  {\r\n                    ''''@name'''': ''''CompanyName'''',\r\n                    ''''@type'''': ''''xs:string'''',\r\n                    ''''@minOccurs'''': ''''0''''\r\n                  },\r\n                  {\r\n                    ''''@name'''': ''''Phone'''',\r\n                    ''''@type'''': ''''xs:string''''\r\n                  }\r\n                ]\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}''", span="858-901"];
m11_333 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NamespaceSerializeDeserialize()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(expected, jsonText)", span="903-903"];
m11_334 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NamespaceSerializeDeserialize()", file="XmlNodeConverterTest.cs", label="XmlDocument deserializedDoc = (XmlDocument)DeserializeXmlNode(jsonText)", span="905-905"];
m11_336 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NamespaceSerializeDeserialize()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NamespaceSerializeDeserialize()", span="827-827"];
m11_524 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArray()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArray()", span="1612-1612"];
m11_525 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArray()", file="XmlNodeConverterTest.cs", label="string json = @''{\r\n  ''''$id'''': ''''1'''',\r\n  ''''$values'''': [\r\n    ''''1'''',\r\n    ''''2'''',\r\n    ''''3'''',\r\n    ''''4'''',\r\n    ''''5''''\r\n  ]\r\n}''", span="1614-1623"];
m11_526 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArray()", file="XmlNodeConverterTest.cs", label="XmlNode node = JsonConvert.DeserializeXmlNode(json, ''root'')", span="1625-1625"];
m11_530 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArray()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(json, newJson)", span="1639-1639"];
m11_527 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArray()", file="XmlNodeConverterTest.cs", label="string xml = GetIndentedInnerXml(node)", span="1626-1626"];
m11_529 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArray()", file="XmlNodeConverterTest.cs", label="string newJson = JsonConvert.SerializeXmlNode(node, Formatting.Indented, true)", span="1637-1637"];
m11_528 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArray()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(@''<?xml version=''''1.0'''' encoding=''''utf-16''''?>\r\n<root xmlns:json=''''http://james.newtonking.com/projects/json'''' json:id=''''1''''>\r\n  <values xmlns=''''http://james.newtonking.com/projects/json''''>1</values>\r\n  <values xmlns=''''http://james.newtonking.com/projects/json''''>2</values>\r\n  <values xmlns=''''http://james.newtonking.com/projects/json''''>3</values>\r\n  <values xmlns=''''http://james.newtonking.com/projects/json''''>4</values>\r\n  <values xmlns=''''http://james.newtonking.com/projects/json''''>5</values>\r\n</root>'', xml)", span="1628-1635"];
m11_531 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArray()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArray()", span="1612-1612"];
m11_418 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesXmlDocument()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesXmlDocument()", span="1167-1167"];
m11_419 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesXmlDocument()", color=green, community=0, file="XmlNodeConverterTest.cs", label="string json = @''{''''count'''': 773840,''''photos'''': null}''", prediction=47, span="1169-1169"];
m11_420 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesXmlDocument()", color=green, community=0, file="XmlNodeConverterTest.cs", label="ExceptionAssert.Throws<JsonSerializationException>(\r\n                () => { JsonConvert.DeserializeXmlNode(json); },\r\n                ''JSON root object has multiple properties. The root object must have a single property in order to create a valid XML document. Consider specifying a DeserializeRootElementName. Path 'photos', line 1, position 26.'')", prediction=50, span="1171-1173"];
m11_421 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesXmlDocument()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesXmlDocument()", span="1167-1167"];
m11_222 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeMultipleRootElements()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeMultipleRootElements()", span="488-488"];
m11_223 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeMultipleRootElements()", file="XmlNodeConverterTest.cs", label="string json = @''{\r\n    ''''Id'''': 1,\r\n     ''''Email'''': ''''james@example.com'''',\r\n     ''''Active'''': true,\r\n     ''''CreatedDate'''': ''''2013-01-20T00:00:00Z'''',\r\n     ''''Roles'''': [\r\n       ''''User'''',\r\n       ''''Admin''''\r\n     ],\r\n    ''''Team'''': {\r\n        ''''Id'''': 2,\r\n        ''''Name'''': ''''Software Developers'''',\r\n        ''''Description'''': ''''Creators of fine software products and services.''''\r\n    }\r\n}''", span="490-504"];
m11_224 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeMultipleRootElements()", file="XmlNodeConverterTest.cs", label="ExceptionAssert.Throws<JsonSerializationException>(\r\n                () => { JsonConvert.DeserializeXmlNode(json); },\r\n                ''JSON root object has multiple properties. The root object must have a single property in order to create a valid XML document. Consider specifying a DeserializeRootElementName. Path 'Email', line 3, position 13.'')", span="505-507"];
m11_225 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeMultipleRootElements()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeMultipleRootElements()", span="488-488"];
m11_541 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayWithIdLast()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayWithIdLast()", span="1675-1675"];
m11_542 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayWithIdLast()", file="XmlNodeConverterTest.cs", label="string json = @''{\r\n  ''''$values'''': [\r\n    ''''1'''',\r\n    ''''2'''',\r\n    ''''3'''',\r\n    ''''4'''',\r\n    ''''5''''\r\n  ],\r\n  ''''$id'''': ''''1''''\r\n}''", span="1677-1686"];
m11_543 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayWithIdLast()", file="XmlNodeConverterTest.cs", label="XmlNode node = JsonConvert.DeserializeXmlNode(json, ''root'')", span="1688-1688"];
m11_544 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayWithIdLast()", file="XmlNodeConverterTest.cs", label="string xml = GetIndentedInnerXml(node)", span="1689-1689"];
m11_546 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayWithIdLast()", file="XmlNodeConverterTest.cs", label="string newJson = JsonConvert.SerializeXmlNode(node, Formatting.Indented, true)", span="1700-1700"];
m11_545 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayWithIdLast()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(@''<?xml version=''''1.0'''' encoding=''''utf-16''''?>\r\n<root xmlns:json=''''http://james.newtonking.com/projects/json'''' json:id=''''1''''>\r\n  <values xmlns=''''http://james.newtonking.com/projects/json''''>1</values>\r\n  <values xmlns=''''http://james.newtonking.com/projects/json''''>2</values>\r\n  <values xmlns=''''http://james.newtonking.com/projects/json''''>3</values>\r\n  <values xmlns=''''http://james.newtonking.com/projects/json''''>4</values>\r\n  <values xmlns=''''http://james.newtonking.com/projects/json''''>5</values>\r\n</root>'', xml)", span="1691-1698"];
m11_547 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayWithIdLast()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(@''{\r\n  ''''$id'''': ''''1'''',\r\n  ''''$values'''': [\r\n    ''''1'''',\r\n    ''''2'''',\r\n    ''''3'''',\r\n    ''''4'''',\r\n    ''''5''''\r\n  ]\r\n}'', newJson)", span="1702-1711"];
m11_548 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayWithIdLast()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayWithIdLast()", span="1675-1675"];
m11_649 [cluster="System.IO.MemoryStream.MemoryStream(byte[])", file="XmlNodeConverterTest.cs", label="Entry System.IO.MemoryStream.MemoryStream(byte[])", span="0-0"];
m11_337 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentDeserialize()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentDeserialize()", span="911-911"];
m11_338 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentDeserialize()", file="XmlNodeConverterTest.cs", label="string jsonText = @''{\r\n  ''''?xml'''': {\r\n    ''''@version'''': ''''1.0'''',\r\n    ''''@standalone'''': ''''no''''\r\n  },\r\n  ''''span'''': {\r\n    ''''@class'''': ''''vevent'''',\r\n    ''''a'''': {\r\n      ''''@class'''': ''''url'''',\r\n      ''''span'''': {\r\n        ''''@class'''': ''''summary'''',\r\n        ''''#text'''': ''''Web 2.0 Conference'''',\r\n        ''''#cdata-section'''': ''''my escaped text''''\r\n      },\r\n      ''''@href'''': ''''http://www.web2con.com/''''\r\n    }\r\n  }\r\n}''", span="913-930"];
m11_339 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentDeserialize()", file="XmlNodeConverterTest.cs", label="XmlDocument doc = (XmlDocument)DeserializeXmlNode(jsonText)", span="932-932"];
m11_340 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentDeserialize()", file="XmlNodeConverterTest.cs", label="string expected = @''<?xml version=''''1.0'''' standalone=''''no''''?>\r\n<span class=''''vevent''''>\r\n  <a class=''''url'''' href=''''http://www.web2con.com/''''>\r\n    <span class=''''summary''''>Web 2.0 Conference<![CDATA[my escaped text]]></span>\r\n  </a>\r\n</span>''", span="934-939"];
m11_341 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentDeserialize()", file="XmlNodeConverterTest.cs", label="string formattedXml = GetIndentedInnerXml(doc)", span="941-941"];
m11_342 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentDeserialize()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(expected, formattedXml)", span="943-943"];
m11_343 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentDeserialize()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentDeserialize()", span="911-911"];
m11_859 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDocumentImplicitAttributeNamespace()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDocumentImplicitAttributeNamespace()", span="2904-2904"];
m11_860 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDocumentImplicitAttributeNamespace()", file="XmlNodeConverterTest.cs", label="var original = new XDocument(new XElement(''{http://example.com}MyElement''))", span="2906-2906"];
m11_861 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDocumentImplicitAttributeNamespace()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(@''<MyElement xmlns=''''http://example.com'''' />'', original.ToString())", span="2907-2907"];
m11_862 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDocumentImplicitAttributeNamespace()", file="XmlNodeConverterTest.cs", label="var json = JsonConvert.SerializeObject(original)", span="2909-2909"];
m11_863 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDocumentImplicitAttributeNamespace()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(@''{''''MyElement'''':{''''@xmlns'''':''''http://example.com''''}}'', json)", span="2910-2910"];
m11_864 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDocumentImplicitAttributeNamespace()", file="XmlNodeConverterTest.cs", label="var deserialized = JsonConvert.DeserializeObject<XDocument>(json)", span="2912-2912"];
m11_865 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDocumentImplicitAttributeNamespace()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(@''<MyElement xmlns=''''http://example.com'''' />'', deserialized.ToString())", span="2913-2913"];
m11_866 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDocumentImplicitAttributeNamespace()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDocumentImplicitAttributeNamespace()", span="2904-2904"];
m11_650 [cluster="System.Text.Encoding.GetBytes(string)", file="XmlNodeConverterTest.cs", label="Entry System.Text.Encoding.GetBytes(string)", span="0-0"];
m11_576 [cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", span="357-357"];
m11_888 [file="XmlNodeConverterTest.cs", label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest", span=""];
m11_889 [file="XmlNodeConverterTest.cs", label=json, span=""];
m11_890 [file="XmlNodeConverterTest.cs", label=json, span=""];
m11_891 [file="XmlNodeConverterTest.cs", label=json, span=""];
m11_892 [file="XmlNodeConverterTest.cs", label=json, span=""];
m11_893 [file="XmlNodeConverterTest.cs", label=json, span=""];
m11_894 [file="XmlNodeConverterTest.cs", label=json, span=""];
m0_555 -> m0_558  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonReader", style=dashed];
m0_555 -> m0_559  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonReader", style=dashed];
m0_555 -> m0_560  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonReader", style=dashed];
m0_555 -> m0_561  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonReader", style=dashed];
m0_555 -> m0_562  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonReader", style=dashed];
m0_555 -> m0_563  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonReader", style=dashed];
m0_555 -> m0_564  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonReader", style=dashed];
m0_555 -> m0_565  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonReader", style=dashed];
m0_555 -> m0_566  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonReader", style=dashed];
m0_555 -> m0_567  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonReader", style=dashed];
m0_555 -> m0_568  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonReader", style=dashed];
m0_555 -> m0_569  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonReader", style=dashed];
m0_555 -> m0_570  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonReader", style=dashed];
m0_555 -> m0_571  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonReader", style=dashed];
m0_555 -> m0_572  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonReader", style=dashed];
m0_555 -> m0_573  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonReader", style=dashed];
m0_555 -> m0_576  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonReader", style=dashed];
m0_555 -> m0_578  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonReader", style=dashed];
m0_66 -> m0_71  [color=darkseagreen4, key=1, label=regex, style=dashed];
m0_67 -> m0_75  [color=darkseagreen4, key=1, label=ms, style=dashed];
m0_68 -> m0_71  [color=darkseagreen4, key=1, label=writer, style=dashed];
m0_69 -> m0_71  [color=darkseagreen4, key=1, label=serializer, style=dashed];
m0_69 -> m0_77  [color=darkseagreen4, key=1, label=serializer, style=dashed];
m0_69 -> m0_78  [color=darkseagreen4, key=1, label=serializer, style=dashed];
m0_76 -> m0_78  [color=darkseagreen4, key=1, label=reader, style=dashed];
m0_78 -> m0_80  [color=darkseagreen4, key=1, label=c, style=dashed];
m0_78 -> m0_81  [color=darkseagreen4, key=1, label=XmlNode, style=dashed];
m0_78 -> m0_85  [color=darkseagreen4, key=1, label=XmlNode, style=dashed];
m0_72 -> m0_74  [color=darkseagreen4, key=1, label=expected, style=dashed];
m0_200 -> m0_202  [color=darkseagreen4, key=1, label=XObject, style=dashed];
m0_200 -> m0_203  [color=darkseagreen4, key=1, label=XObject, style=dashed];
m0_200 -> m0_204  [color=darkseagreen4, key=1, label=XObject, style=dashed];
m0_200 -> m0_205  [color=darkseagreen4, key=1, label=XObject, style=dashed];
m0_200 -> m0_206  [color=darkseagreen4, key=1, label=XObject, style=dashed];
m0_200 -> m0_207  [color=darkseagreen4, key=1, label=XObject, style=dashed];
m0_200 -> m0_208  [color=darkseagreen4, key=1, label=XObject, style=dashed];
m0_200 -> m0_209  [color=darkseagreen4, key=1, label=XObject, style=dashed];
m0_200 -> m0_210  [color=darkseagreen4, key=1, label=XObject, style=dashed];
m0_200 -> m0_211  [color=darkseagreen4, key=1, label=XObject, style=dashed];
m0_200 -> m0_212  [color=darkseagreen4, key=1, label=XObject, style=dashed];
m0_200 -> m0_213  [color=darkseagreen4, key=1, label=XObject, style=dashed];
m0_200 -> m0_214  [color=darkseagreen4, key=1, label=XObject, style=dashed];
m0_200 -> m0_215  [color=darkseagreen4, key=1, label=XObject, style=dashed];
m0_200 -> m0_216  [color=darkseagreen4, key=1, label=XObject, style=dashed];
m0_200 -> m0_217  [color=darkseagreen4, key=1, label=XObject, style=dashed];
m0_170 -> m0_172  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_496 -> m0_528  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_496 -> m0_533  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.IXmlNode", style=dashed];
m0_496 -> m0_535  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.IXmlNode", style=dashed];
m0_496 -> m0_540  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonReader", style=dashed];
m0_496 -> m0_541  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonReader", style=dashed];
m0_496 -> m0_542  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonReader", style=dashed];
m0_496 -> m0_543  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonReader", style=dashed];
m0_496 -> m0_544  [color=darkseagreen4, key=1, label=XmlNamespaceManager, style=dashed];
m0_496 -> m0_545  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonReader", style=dashed];
m0_496 -> m0_546  [color=darkseagreen4, key=1, label=XmlNamespaceManager, style=dashed];
m0_496 -> m0_547  [color=darkseagreen4, key=1, label=XmlNamespaceManager, style=dashed];
m0_526 -> m0_536  [color=darkseagreen4, key=1, label=attributeNameValues, style=dashed];
m0_534 -> m0_539  [color=darkseagreen4, key=1, label=element, style=dashed];
m0_534 -> m0_541  [color=darkseagreen4, key=1, label=element, style=dashed];
m0_534 -> m0_545  [color=darkseagreen4, key=1, label=element, style=dashed];
m0_51 -> m0_56  [color=darkseagreen4, key=1, label=ms, style=dashed];
m0_59 -> m0_61  [color=darkseagreen4, key=1, label=c, style=dashed];
m0_332 -> m0_335  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.IXmlNode", style=dashed];
m0_332 -> m0_351  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonWriter", style=dashed];
m0_332 -> m0_353  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_332 -> m0_354  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonWriter", style=dashed];
m0_332 -> m0_355  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonWriter", style=dashed];
m0_332 -> m0_358  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonWriter", style=dashed];
m0_332 -> m0_360  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonWriter", style=dashed];
m0_333 -> m0_339  [color=darkseagreen4, key=1, label=nodesGroupedByName, style=dashed];
m0_333 -> m0_341  [color=darkseagreen4, key=1, label=nodesGroupedByName, style=dashed];
m0_333 -> m0_344  [color=darkseagreen4, key=1, label=nodesGroupedByName, style=dashed];
m0_336 -> m0_342  [color=darkseagreen4, key=1, label=childNode, style=dashed];
m0_337 -> m0_339  [color=darkseagreen4, key=1, label=nodeName, style=dashed];
m0_337 -> m0_341  [color=darkseagreen4, key=1, label=nodeName, style=dashed];
m0_334 -> m0_343  [color=darkseagreen4, key=1, label=i, style=dashed];
m0_343 -> m0_343  [color=darkseagreen4, key=1, label=i, style=dashed];
m0_340 -> m0_342  [color=darkseagreen4, key=1, label=nodes, style=dashed];
m0_345 -> m0_347  [color=darkseagreen4, key=1, label=groupedNodes, style=dashed];
m0_345 -> m0_351  [color=darkseagreen4, key=1, label=groupedNodes, style=dashed];
m0_345 -> m0_357  [color=darkseagreen4, key=1, label=groupedNodes, style=dashed];
m0_345 -> m0_358  [color=darkseagreen4, key=1, label=groupedNodes, style=dashed];
m0_352 -> m0_354  [color=darkseagreen4, key=1, label=elementNames, style=dashed];
m0_356 -> m0_358  [color=darkseagreen4, key=1, label=i, style=dashed];
m0_356 -> m0_359  [color=darkseagreen4, key=1, label=i, style=dashed];
m0_359 -> m0_359  [color=darkseagreen4, key=1, label=i, style=dashed];
m0_11 -> m0_17  [color=green, key=1, label=ms, style=dashed];
m0_86 -> m0_88  [color=darkseagreen4, key=1, label=newRegex, style=dashed];
m0_185 -> m0_190  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.IXmlNode", style=dashed];
m0_186 -> m0_189  [color=darkseagreen4, key=1, label=declarationWrapper, style=dashed];
m0_181 -> m0_183  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_522 -> m0_681  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonReader", style=dashed];
m0_522 -> m0_682  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonReader", style=dashed];
m0_522 -> m0_684  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonReader", style=dashed];
m0_522 -> m0_687  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonReader", style=dashed];
m0_522 -> m0_690  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonReader", style=dashed];
m0_522 -> m0_693  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonReader", style=dashed];
m0_522 -> m0_695  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonReader", style=dashed];
m0_522 -> m0_697  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.IXmlNode", style=dashed];
m0_520 -> m0_660  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonReader", style=dashed];
m0_520 -> m0_661  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonReader", style=dashed];
m0_520 -> m0_663  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonReader", style=dashed];
m0_520 -> m0_666  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonReader", style=dashed];
m0_520 -> m0_669  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonReader", style=dashed];
m0_520 -> m0_671  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonReader", style=dashed];
m0_520 -> m0_673  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.IXmlNode", style=dashed];
m0_520 -> m0_675  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.IXmlNode", style=dashed];
m0_10 -> m0_15  [color=green, key=1, label=regex, style=dashed];
m0_12 -> m0_15  [color=green, key=1, label=writer, style=dashed];
m0_13 -> m0_15  [color=green, key=1, label=serializer, style=dashed];
m0_16 -> m0_18  [color=green, key=1, label=expected, style=dashed];
m0_500 -> m0_503  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonReader", style=dashed];
m0_500 -> m0_505  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonReader", style=dashed];
m0_500 -> m0_507  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonReader", style=dashed];
m0_500 -> m0_509  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonReader", style=dashed];
m0_500 -> m0_510  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_500 -> m0_511  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonReader", style=dashed];
m0_500 -> m0_512  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_500 -> m0_513  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonReader", style=dashed];
m0_500 -> m0_514  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonReader", style=dashed];
m0_500 -> m0_515  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonReader", style=dashed];
m0_500 -> m0_517  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonReader", style=dashed];
m0_88 -> m0_92  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.IXmlNode", style=dashed];
m0_38 -> m0_41  [color=green, key=1, label=reader, style=dashed];
m0_39 -> m0_41  [color=green, key=1, label=serializer, style=dashed];
m0_41 -> m0_43  [color=green, key=1, label=c, style=dashed];
m0_288 -> m0_291  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.IXmlNode", style=dashed];
m0_288 -> m0_292  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.IXmlNode", style=dashed];
m0_289 -> m0_291  [color=darkseagreen4, key=1, label=prefix, style=dashed];
m0_745 -> m0_748  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_52 -> m0_55  [color=darkseagreen4, key=1, label=writer, style=dashed];
m0_53 -> m0_55  [color=darkseagreen4, key=1, label=attribute, style=dashed];
m0_53 -> m0_58  [color=darkseagreen4, key=1, label=serializer, style=dashed];
m0_50 -> m0_55  [color=darkseagreen4, key=1, label=regex, style=dashed];
m0_192 -> m0_222  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.IXmlNode", style=dashed];
m0_324 -> m0_329  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_296 -> m0_299  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.IXmlNode", style=dashed];
m0_296 -> m0_300  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.IXmlNode", style=dashed];
m0_296 -> m0_301  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.IXmlNode", style=dashed];
m0_296 -> m0_307  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.IXmlNode", style=dashed];
m0_296 -> m0_309  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.IXmlNode", style=dashed];
m0_296 -> m0_311  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.IXmlNode", style=dashed];
m0_296 -> m0_320  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.IXmlNode", style=dashed];
m0_459 -> m0_465  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m0_459 -> m0_466  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m0_459 -> m0_471  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m0_459 -> m0_472  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m0_459 -> m0_479  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m0_459 -> m0_480  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonReader", style=dashed];
m0_459 -> m0_483  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonReader", style=dashed];
m0_459 -> m0_484  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonReader", style=dashed];
m0_459 -> m0_485  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonReader", style=dashed];
m0_459 -> m0_486  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m0_462 -> m0_483  [color=darkseagreen4, key=1, label=manager, style=dashed];
m0_462 -> m0_485  [color=darkseagreen4, key=1, label=manager, style=dashed];
m0_463 -> m0_478  [color=darkseagreen4, key=1, label=document, style=dashed];
m0_463 -> m0_483  [color=darkseagreen4, key=1, label=document, style=dashed];
m0_463 -> m0_485  [color=darkseagreen4, key=1, label=document, style=dashed];
m0_463 -> m0_490  [color=darkseagreen4, key=1, label=document, style=dashed];
m0_464 -> m0_478  [color=darkseagreen4, key=1, label=rootNode, style=dashed];
m0_464 -> m0_483  [color=darkseagreen4, key=1, label=rootNode, style=dashed];
m0_464 -> m0_485  [color=darkseagreen4, key=1, label=rootNode, style=dashed];
m0_487 -> m0_489  [color=darkseagreen4, key=1, label=element, style=dashed];
m0_469 -> m0_478  [color=darkseagreen4, key=1, label=document, style=dashed];
m0_469 -> m0_483  [color=darkseagreen4, key=1, label=document, style=dashed];
m0_469 -> m0_485  [color=darkseagreen4, key=1, label=document, style=dashed];
m0_469 -> m0_490  [color=darkseagreen4, key=1, label=document, style=dashed];
m0_470 -> m0_478  [color=darkseagreen4, key=1, label=rootNode, style=dashed];
m0_470 -> m0_483  [color=darkseagreen4, key=1, label=rootNode, style=dashed];
m0_470 -> m0_485  [color=darkseagreen4, key=1, label=rootNode, style=dashed];
m0_476 -> m0_478  [color=darkseagreen4, key=1, label=document, style=dashed];
m0_476 -> m0_483  [color=darkseagreen4, key=1, label=document, style=dashed];
m0_476 -> m0_485  [color=darkseagreen4, key=1, label=document, style=dashed];
m0_476 -> m0_490  [color=darkseagreen4, key=1, label=document, style=dashed];
m0_477 -> m0_483  [color=darkseagreen4, key=1, label=rootNode, style=dashed];
m0_477 -> m0_485  [color=darkseagreen4, key=1, label=rootNode, style=dashed];
m0_523 -> m0_590  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.IXmlNode", style=dashed];
m0_523 -> m0_592  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonReader", style=dashed];
m0_523 -> m0_593  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonReader", style=dashed];
m0_523 -> m0_596  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.IXmlDocument", style=dashed];
m0_523 -> m0_605  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_523 -> m0_599  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.IXmlDocument", style=dashed];
m0_589 -> m0_593  [color=darkseagreen4, key=1, label=nestedArrayElement, style=dashed];
m0_589 -> m0_596  [color=darkseagreen4, key=1, label=nestedArrayElement, style=dashed];
m0_598 -> m0_604  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_591 -> m0_594  [color=darkseagreen4, key=1, label=count, style=dashed];
m0_591 -> m0_597  [color=darkseagreen4, key=1, label=count, style=dashed];
m0_594 -> m0_594  [color=darkseagreen4, key=1, label=count, style=dashed];
m0_594 -> m0_597  [color=darkseagreen4, key=1, label=count, style=dashed];
m0_654 -> m0_734  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_654 -> m0_737  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_740 -> m0_742  [color=darkseagreen4, key=1, label="out string", style=dashed];
m0_751 -> m0_754  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m0_601 -> m0_608  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.IXmlElement", style=dashed];
m0_601 -> m0_609  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.IXmlElement", style=dashed];
m0_601 -> m0_610  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.IXmlElement", style=dashed];
m0_47 -> m0_49  [color=darkseagreen4, key=1, label=attribute, style=dashed];
m0_244 -> m0_249  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonWriter", style=dashed];
m0_244 -> m0_250  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonWriter", style=dashed];
m0_244 -> m0_252  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonWriter", style=dashed];
m0_245 -> m0_247  [color=darkseagreen4, key=1, label=node, style=dashed];
m0_245 -> m0_250  [color=darkseagreen4, key=1, label=node, style=dashed];
m0_246 -> m0_250  [color=darkseagreen4, key=1, label=manager, style=dashed];
m0_254 -> m0_262  [color=darkseagreen4, key=1, label=object, style=dashed];
m0_254 -> m0_263  [color=darkseagreen4, key=1, label=object, style=dashed];
m0_254 -> m0_264  [color=darkseagreen4, key=1, label=object, style=dashed];
m0_259 -> m0_371  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonWriter", style=dashed];
m0_259 -> m0_373  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.IXmlNode", style=dashed];
m0_259 -> m0_457  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.IXmlNode", style=dashed];
m0_259 -> m0_374  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonWriter", style=dashed];
m0_259 -> m0_375  [color=darkseagreen4, key=1, label=XmlNamespaceManager, style=dashed];
m0_259 -> m0_376  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.IXmlNode", style=dashed];
m0_259 -> m0_380  [color=darkseagreen4, key=1, label=XmlNamespaceManager, style=dashed];
m0_259 -> m0_381  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_259 -> m0_382  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonWriter", style=dashed];
m0_259 -> m0_383  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.IXmlNode", style=dashed];
m0_259 -> m0_384  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonWriter", style=dashed];
m0_259 -> m0_385  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.IXmlNode", style=dashed];
m0_259 -> m0_388  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonWriter", style=dashed];
m0_259 -> m0_389  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonWriter", style=dashed];
m0_259 -> m0_390  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonWriter", style=dashed];
m0_259 -> m0_392  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.IXmlNode", style=dashed];
m0_259 -> m0_393  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonWriter", style=dashed];
m0_259 -> m0_395  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonWriter", style=dashed];
m0_259 -> m0_396  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonWriter", style=dashed];
m0_259 -> m0_397  [color=darkseagreen4, key=1, label=XmlNamespaceManager, style=dashed];
m0_259 -> m0_399  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_259 -> m0_400  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonWriter", style=dashed];
m0_259 -> m0_407  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.IXmlNode", style=dashed];
m0_259 -> m0_409  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.IXmlNode", style=dashed];
m0_259 -> m0_410  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.IXmlNode", style=dashed];
m0_259 -> m0_412  [color=darkseagreen4, key=1, label=bool, style=dashed];
m0_259 -> m0_413  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonWriter", style=dashed];
m0_259 -> m0_414  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonWriter", style=dashed];
m0_259 -> m0_417  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonWriter", style=dashed];
m0_259 -> m0_418  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonWriter", style=dashed];
m0_259 -> m0_420  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonWriter", style=dashed];
m0_259 -> m0_421  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonWriter", style=dashed];
m0_259 -> m0_423  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonWriter", style=dashed];
m0_259 -> m0_424  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonWriter", style=dashed];
m0_259 -> m0_426  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonWriter", style=dashed];
m0_259 -> m0_427  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonWriter", style=dashed];
m0_259 -> m0_428  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonWriter", style=dashed];
m0_259 -> m0_431  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonWriter", style=dashed];
m0_259 -> m0_432  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonWriter", style=dashed];
m0_259 -> m0_434  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonWriter", style=dashed];
m0_259 -> m0_435  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonWriter", style=dashed];
m0_259 -> m0_437  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonWriter", style=dashed];
m0_259 -> m0_438  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonWriter", style=dashed];
m0_259 -> m0_440  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonWriter", style=dashed];
m0_259 -> m0_441  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonWriter", style=dashed];
m0_259 -> m0_443  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonWriter", style=dashed];
m0_259 -> m0_444  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonWriter", style=dashed];
m0_259 -> m0_445  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonWriter", style=dashed];
m0_259 -> m0_446  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.IXmlNode", style=dashed];
m0_373 -> m0_456  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_416 -> m0_419  [color=darkseagreen4, key=1, label=declaration, style=dashed];
m0_416 -> m0_421  [color=darkseagreen4, key=1, label=declaration, style=dashed];
m0_416 -> m0_422  [color=darkseagreen4, key=1, label=declaration, style=dashed];
m0_416 -> m0_424  [color=darkseagreen4, key=1, label=declaration, style=dashed];
m0_416 -> m0_425  [color=darkseagreen4, key=1, label=declaration, style=dashed];
m0_416 -> m0_427  [color=darkseagreen4, key=1, label=declaration, style=dashed];
m0_430 -> m0_433  [color=darkseagreen4, key=1, label=documentType, style=dashed];
m0_430 -> m0_435  [color=darkseagreen4, key=1, label=documentType, style=dashed];
m0_430 -> m0_436  [color=darkseagreen4, key=1, label=documentType, style=dashed];
m0_430 -> m0_438  [color=darkseagreen4, key=1, label=documentType, style=dashed];
m0_430 -> m0_439  [color=darkseagreen4, key=1, label=documentType, style=dashed];
m0_430 -> m0_441  [color=darkseagreen4, key=1, label=documentType, style=dashed];
m0_430 -> m0_442  [color=darkseagreen4, key=1, label=documentType, style=dashed];
m0_430 -> m0_444  [color=darkseagreen4, key=1, label=documentType, style=dashed];
m0_378 -> m0_380  [color=darkseagreen4, key=1, label=namespacePrefix, style=dashed];
m0_391 -> m0_393  [color=darkseagreen4, key=1, label=i, style=dashed];
m0_391 -> m0_394  [color=darkseagreen4, key=1, label=i, style=dashed];
m0_394 -> m0_394  [color=darkseagreen4, key=1, label=i, style=dashed];
m0_257 -> m0_278  [color=darkseagreen4, key=1, label=XmlNamespaceManager, style=dashed];
m0_257 -> m0_281  [color=darkseagreen4, key=1, label=XmlNamespaceManager, style=dashed];
m0_268 -> m0_272  [color=darkseagreen4, key=1, label=parentElements, style=dashed];
m0_268 -> m0_274  [color=darkseagreen4, key=1, label=parentElements, style=dashed];
m0_268 -> m0_275  [color=darkseagreen4, key=1, label=parentElements, style=dashed];
m0_268 -> m0_276  [color=darkseagreen4, key=1, label=parentElements, style=dashed];
m0_268 -> m0_277  [color=darkseagreen4, key=1, label=parentElements, style=dashed];
m0_277 -> m0_279  [color=darkseagreen4, key=1, label=parentElement, style=dashed];
m0_270 -> m0_274  [color=darkseagreen4, key=1, label=parent, style=dashed];
m0_273 -> m0_275  [color=darkseagreen4, key=1, label=parentElements, style=dashed];
m0_273 -> m0_276  [color=darkseagreen4, key=1, label=parentElements, style=dashed];
m0_273 -> m0_277  [color=darkseagreen4, key=1, label=parentElements, style=dashed];
m0_279 -> m0_281  [color=darkseagreen4, key=1, label=attribute, style=dashed];
m0_549 -> m0_615  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonReader", style=dashed];
m0_549 -> m0_616  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonReader", style=dashed];
m0_549 -> m0_617  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonReader", style=dashed];
m0_549 -> m0_626  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonReader", style=dashed];
m0_549 -> m0_631  [color=darkseagreen4, key=1, label=XmlNamespaceManager, style=dashed];
m0_549 -> m0_634  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonReader", style=dashed];
m0_549 -> m0_639  [color=darkseagreen4, key=1, label=XmlNamespaceManager, style=dashed];
m0_549 -> m0_643  [color=darkseagreen4, key=1, label=XmlNamespaceManager, style=dashed];
m0_549 -> m0_651  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonReader", style=dashed];
m0_612 -> m0_628  [color=darkseagreen4, key=1, label=attributeNameValues, style=dashed];
m0_612 -> m0_642  [color=darkseagreen4, key=1, label=attributeNameValues, style=dashed];
m0_612 -> m0_644  [color=darkseagreen4, key=1, label=attributeNameValues, style=dashed];
m0_612 -> m0_652  [color=darkseagreen4, key=1, label=attributeNameValues, style=dashed];
m0_627 -> m0_631  [color=darkseagreen4, key=1, label=attributeValue, style=dashed];
m0_635 -> m0_644  [color=darkseagreen4, key=1, label=attributeValue, style=dashed];
m0_636 -> m0_644  [color=darkseagreen4, key=1, label=jsonPrefix, style=dashed];
m0_613 -> m0_616  [color=darkseagreen4, key=1, label=finishedAttributes, style=dashed];
m0_614 -> m0_616  [color=darkseagreen4, key=1, label=finishedElement, style=dashed];
m0_621 -> m0_623  [color=darkseagreen4, key=1, label=firstChar, style=dashed];
m0_625 -> m0_628  [color=darkseagreen4, key=1, label=attributeName, style=dashed];
m0_625 -> m0_630  [color=darkseagreen4, key=1, label=attributeName, style=dashed];
m0_633 -> m0_644  [color=darkseagreen4, key=1, label=attributeName, style=dashed];
m0_641 -> m0_643  [color=darkseagreen4, key=1, label=jsonPrefix, style=dashed];
m0_641 -> m0_644  [color=darkseagreen4, key=1, label=jsonPrefix, style=dashed];
m0_498 -> m0_705  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.IXmlDocument", style=dashed];
m0_498 -> m0_708  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonReader", style=dashed];
m0_498 -> m0_709  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonReader", style=dashed];
m0_498 -> m0_711  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonReader", style=dashed];
m0_498 -> m0_712  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonReader", style=dashed];
m0_498 -> m0_716  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.IXmlDocument", style=dashed];
m0_498 -> m0_717  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonReader", style=dashed];
m0_498 -> m0_720  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonReader", style=dashed];
m0_498 -> m0_721  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonReader", style=dashed];
m0_498 -> m0_723  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonReader", style=dashed];
m0_498 -> m0_727  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonReader", style=dashed];
m0_498 -> m0_728  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonReader", style=dashed];
m0_707 -> m0_712  [color=darkseagreen4, key=1, label=propertyName, style=dashed];
m0_707 -> m0_731  [color=darkseagreen4, key=1, label=propertyName, style=dashed];
m0_707 -> m0_717  [color=darkseagreen4, key=1, label=propertyName, style=dashed];
m0_715 -> m0_730  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_719 -> m0_721  [color=darkseagreen4, key=1, label=constructorName, style=dashed];
m0_710 -> m0_713  [color=darkseagreen4, key=1, label=count, style=dashed];
m0_710 -> m0_714  [color=darkseagreen4, key=1, label=count, style=dashed];
m0_713 -> m0_713  [color=darkseagreen4, key=1, label=count, style=dashed];
m0_713 -> m0_714  [color=darkseagreen4, key=1, label=count, style=dashed];
m0_758 -> m0_4  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.XmlDocumentWrapper", style=dashed];
m0_758 -> m0_9  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.XmlDocumentWrapper", style=dashed];
m0_758 -> m0_13  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.XmlDocumentWrapper", style=dashed];
m0_758 -> m0_17  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.XmlDocumentWrapper", style=dashed];
m0_758 -> m0_21  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.XmlDocumentWrapper", style=dashed];
m0_758 -> m0_25  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.XmlDocumentWrapper", style=dashed];
m0_758 -> m0_35  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.XmlDocumentWrapper", style=dashed];
m0_758 -> m0_39  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.XmlDocumentWrapper", style=dashed];
m0_758 -> m0_44  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.XmlDocumentWrapper", style=dashed];
m0_759 -> m0_58  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.XmlElementWrapper", style=dashed];
m0_759 -> m0_62  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.XmlElementWrapper", style=dashed];
m0_759 -> m0_66  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.XmlElementWrapper", style=dashed];
m0_762 -> m0_90  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.XmlNodeWrapper", style=dashed];
m0_765 -> m0_190  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.XDocumentWrapper", style=dashed];
m0_766 -> m0_220  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.XContainerWrapper", style=dashed];
m0_768 -> m0_235  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.XElementWrapper", style=dashed];
m0_768 -> m0_242  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.XElementWrapper", style=dashed];
m0_769 -> m0_247  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.XmlNodeConverter", style=dashed];
m0_769 -> m0_248  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.XmlNodeConverter", style=dashed];
m0_769 -> m0_250  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.XmlNodeConverter", style=dashed];
m0_769 -> m0_251  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.XmlNodeConverter", style=dashed];
m0_769 -> m0_301  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.XmlNodeConverter", style=dashed];
m0_769 -> m0_307  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.XmlNodeConverter", style=dashed];
m0_769 -> m0_309  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.XmlNodeConverter", style=dashed];
m0_769 -> m0_311  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.XmlNodeConverter", style=dashed];
m0_769 -> m0_351  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.XmlNodeConverter", style=dashed];
m0_769 -> m0_358  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.XmlNodeConverter", style=dashed];
m0_769 -> m0_371  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.XmlNodeConverter", style=dashed];
m0_769 -> m0_373  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.XmlNodeConverter", style=dashed];
m0_769 -> m0_374  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.XmlNodeConverter", style=dashed];
m0_769 -> m0_382  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.XmlNodeConverter", style=dashed];
m0_769 -> m0_383  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.XmlNodeConverter", style=dashed];
m0_769 -> m0_393  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.XmlNodeConverter", style=dashed];
m0_769 -> m0_395  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.XmlNodeConverter", style=dashed];
m0_769 -> m0_413  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.XmlNodeConverter", style=dashed];
m0_769 -> m0_417  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.XmlNodeConverter", style=dashed];
m0_769 -> m0_431  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.XmlNodeConverter", style=dashed];
m0_769 -> m0_482  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.XmlNodeConverter", style=dashed];
m0_769 -> m0_483  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.XmlNodeConverter", style=dashed];
m0_769 -> m0_485  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.XmlNodeConverter", style=dashed];
m0_769 -> m0_511  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.XmlNodeConverter", style=dashed];
m0_769 -> m0_513  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.XmlNodeConverter", style=dashed];
m0_769 -> m0_515  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.XmlNodeConverter", style=dashed];
m0_769 -> m0_517  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.XmlNodeConverter", style=dashed];
m0_769 -> m0_541  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.XmlNodeConverter", style=dashed];
m0_769 -> m0_545  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.XmlNodeConverter", style=dashed];
m0_769 -> m0_593  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.XmlNodeConverter", style=dashed];
m0_769 -> m0_595  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.XmlNodeConverter", style=dashed];
m0_769 -> m0_596  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.XmlNodeConverter", style=dashed];
m0_769 -> m0_597  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.XmlNodeConverter", style=dashed];
m0_769 -> m0_599  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.XmlNodeConverter", style=dashed];
m0_769 -> m0_630  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.XmlNodeConverter", style=dashed];
m0_769 -> m0_712  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.XmlNodeConverter", style=dashed];
m0_769 -> m0_714  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.XmlNodeConverter", style=dashed];
m0_769 -> m0_716  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.XmlNodeConverter", style=dashed];
m0_769 -> m0_717  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.XmlNodeConverter", style=dashed];
m0_769 -> m0_721  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.XmlNodeConverter", style=dashed];
m0_770 -> m0_457  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Converters.IXmlNode", style=dashed];
m0_771 -> m0_605  [color=darkseagreen4, key=1, label=string, style=dashed];
m0_772 -> m0_731  [color=darkseagreen4, key=1, label=propertyName, style=dashed];
m1_138 -> m1_140  [color=darkseagreen4, key=1, label=o, style=dashed];
m1_138 -> m1_143  [color=darkseagreen4, key=1, label=o, style=dashed];
m1_138 -> m1_142  [color=darkseagreen4, key=1, label=o, style=dashed];
m1_141 -> m1_144  [color=darkseagreen4, key=1, label=p, style=dashed];
m1_174 -> m1_178  [color=darkseagreen4, key=1, label=o, style=dashed];
m1_174 -> m1_176  [color=darkseagreen4, key=1, label=o, style=dashed];
m1_174 -> m1_177  [color=darkseagreen4, key=1, label=o, style=dashed];
m1_174 -> m1_180  [color=darkseagreen4, key=1, label=o, style=dashed];
m1_179 -> m1_181  [color=darkseagreen4, key=1, label=a, style=dashed];
m1_179 -> m1_182  [color=darkseagreen4, key=1, label=a, style=dashed];
m1_179 -> m1_183  [color=darkseagreen4, key=1, label=a, style=dashed];
m1_179 -> m1_184  [color=darkseagreen4, key=1, label=a, style=dashed];
m1_179 -> m1_185  [color=darkseagreen4, key=1, label=a, style=dashed];
m1_179 -> m1_186  [color=darkseagreen4, key=1, label=a, style=dashed];
m1_179 -> m1_187  [color=darkseagreen4, key=1, label=a, style=dashed];
m1_179 -> m1_188  [color=darkseagreen4, key=1, label=a, style=dashed];
m1_1032 -> m1_1040  [color=darkseagreen4, key=1, label=o, style=dashed];
m1_1032 -> m1_1041  [color=darkseagreen4, key=1, label=o, style=dashed];
m1_1032 -> m1_1046  [color=darkseagreen4, key=1, label=o, style=dashed];
m1_1032 -> m1_1047  [color=darkseagreen4, key=1, label=o, style=dashed];
m1_1032 -> m1_1052  [color=darkseagreen4, key=1, label=o, style=dashed];
m1_1032 -> m1_1053  [color=darkseagreen4, key=1, label=o, style=dashed];
m1_1032 -> m1_1058  [color=darkseagreen4, key=1, label=o, style=dashed];
m1_1032 -> m1_1059  [color=darkseagreen4, key=1, label=o, style=dashed];
m1_1036 -> m1_1040  [color=darkseagreen4, key=1, label=prop1, style=dashed];
m1_1036 -> m1_1041  [color=darkseagreen4, key=1, label=prop1, style=dashed];
m1_1036 -> m1_1038  [color=darkseagreen4, key=1, label=prop1, style=dashed];
m1_1036 -> m1_1039  [color=darkseagreen4, key=1, label=prop1, style=dashed];
m1_1042 -> m1_1046  [color=darkseagreen4, key=1, label=prop2, style=dashed];
m1_1042 -> m1_1047  [color=darkseagreen4, key=1, label=prop2, style=dashed];
m1_1042 -> m1_1044  [color=darkseagreen4, key=1, label=prop2, style=dashed];
m1_1042 -> m1_1045  [color=darkseagreen4, key=1, label=prop2, style=dashed];
m1_1048 -> m1_1052  [color=darkseagreen4, key=1, label=prop3, style=dashed];
m1_1048 -> m1_1053  [color=darkseagreen4, key=1, label=prop3, style=dashed];
m1_1048 -> m1_1050  [color=darkseagreen4, key=1, label=prop3, style=dashed];
m1_1048 -> m1_1051  [color=darkseagreen4, key=1, label=prop3, style=dashed];
m1_1054 -> m1_1058  [color=darkseagreen4, key=1, label=prop4, style=dashed];
m1_1054 -> m1_1059  [color=darkseagreen4, key=1, label=prop4, style=dashed];
m1_1054 -> m1_1056  [color=darkseagreen4, key=1, label=prop4, style=dashed];
m1_1054 -> m1_1057  [color=darkseagreen4, key=1, label=prop4, style=dashed];
m1_311 -> m1_313  [color=darkseagreen4, key=1, label=o, style=dashed];
m1_315 -> m1_317  [color=darkseagreen4, key=1, label=i, style=dashed];
m1_315 -> m1_318  [color=darkseagreen4, key=1, label=i, style=dashed];
m1_315 -> m1_319  [color=darkseagreen4, key=1, label=i, style=dashed];
m1_316 -> m1_318  [color=darkseagreen4, key=1, label=property, style=dashed];
m1_319 -> m1_319  [color=darkseagreen4, key=1, label=i, style=dashed];
m1_314 -> m1_316  [color=darkseagreen4, key=1, label=t, style=dashed];
m1_199 -> m1_201  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_92 -> m1_94  [color=green, key=1, label=o, style=dashed];
m1_92 -> m1_95  [color=green, key=1, label=o, style=dashed];
m1_92 -> m1_96  [color=green, key=1, label=o, style=dashed];
m1_92 -> m1_97  [color=green, key=1, label=o, style=dashed];
m1_92 -> m1_98  [color=green, key=1, label=o, style=dashed];
m1_95 -> m1_97  [color=darkseagreen4, key=1, label=result, style=dashed];
m1_1 -> m1_14  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_2 -> m1_6  [color=darkseagreen4, key=1, label=v, style=dashed];
m1_3 -> m1_7  [color=darkseagreen4, key=1, label=o, style=dashed];
m1_4 -> m1_6  [color=darkseagreen4, key=1, label=o, style=dashed];
m1_670 -> m1_673  [color=darkseagreen4, key=1, label=l, style=dashed];
m1_670 -> m1_672  [color=darkseagreen4, key=1, label=l, style=dashed];
m1_723 -> m1_735  [color=darkseagreen4, key=1, label=p2, style=dashed];
m1_723 -> m1_731  [color=darkseagreen4, key=1, label=p2, style=dashed];
m1_723 -> m1_732  [color=darkseagreen4, key=1, label=p2, style=dashed];
m1_723 -> m1_734  [color=darkseagreen4, key=1, label=p2, style=dashed];
m1_724 -> m1_727  [color=darkseagreen4, key=1, label=l, style=dashed];
m1_724 -> m1_729  [color=darkseagreen4, key=1, label=l, style=dashed];
m1_724 -> m1_733  [color=darkseagreen4, key=1, label=l, style=dashed];
m1_724 -> m1_734  [color=darkseagreen4, key=1, label=l, style=dashed];
m1_724 -> m1_726  [color=darkseagreen4, key=1, label=l, style=dashed];
m1_724 -> m1_728  [color=darkseagreen4, key=1, label=l, style=dashed];
m1_724 -> m1_730  [color=darkseagreen4, key=1, label=l, style=dashed];
m1_724 -> m1_731  [color=darkseagreen4, key=1, label=l, style=dashed];
m1_724 -> m1_732  [color=darkseagreen4, key=1, label=l, style=dashed];
m1_722 -> m1_728  [color=darkseagreen4, key=1, label=p1, style=dashed];
m1_722 -> m1_730  [color=darkseagreen4, key=1, label=p1, style=dashed];
m1_166 -> m1_168  [color=darkseagreen4, key=1, label=o, style=dashed];
m1_124 -> m1_138  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.TestStruct", style=dashed];
m1_124 -> m1_126  [color=darkseagreen4, key=1, label=o, style=dashed];
m1_124 -> m1_128  [color=darkseagreen4, key=1, label=o, style=dashed];
m1_124 -> m1_129  [color=darkseagreen4, key=1, label=o, style=dashed];
m1_124 -> m1_127  [color=darkseagreen4, key=1, label=o, style=dashed];
m1_740 -> m1_743  [color=darkseagreen4, key=1, label=l, style=dashed];
m1_740 -> m1_745  [color=darkseagreen4, key=1, label=l, style=dashed];
m1_740 -> m1_742  [color=darkseagreen4, key=1, label=l, style=dashed];
m1_740 -> m1_744  [color=darkseagreen4, key=1, label=l, style=dashed];
m1_738 -> m1_742  [color=darkseagreen4, key=1, label=p1, style=dashed];
m1_739 -> m1_744  [color=darkseagreen4, key=1, label=p2, style=dashed];
m1_74 -> m1_76  [color=darkseagreen4, key=1, label=structTest, style=dashed];
m1_74 -> m1_77  [color=darkseagreen4, key=1, label=structTest, style=dashed];
m1_86 -> m1_88  [color=darkseagreen4, key=1, label=m, style=dashed];
m1_61 -> m1_66  [color=darkseagreen4, key=1, label=p, style=dashed];
m1_61 -> m1_67  [color=darkseagreen4, key=1, label=p, style=dashed];
m1_62 -> m1_64  [color=darkseagreen4, key=1, label=m, style=dashed];
m1_62 -> m1_65  [color=darkseagreen4, key=1, label=m, style=dashed];
m1_57 -> m1_59  [color=darkseagreen4, key=1, label=o, style=dashed];
m1_57 -> m1_65  [color=darkseagreen4, key=1, label=o, style=dashed];
m1_712 -> m1_714  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_633 -> m1_635  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_676 -> m1_681  [color=darkseagreen4, key=1, label=p1, style=dashed];
m1_679 -> m1_681  [color=darkseagreen4, key=1, label=a, style=dashed];
m1_679 -> m1_682  [color=darkseagreen4, key=1, label=a, style=dashed];
m1_677 -> m1_682  [color=darkseagreen4, key=1, label=p2, style=dashed];
m1_678 -> m1_680  [color=darkseagreen4, key=1, label=l, style=dashed];
m1_973 -> m1_975  [color=darkseagreen4, key=1, label=v, style=dashed];
m1_1019 -> m1_1021  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_127 -> m1_127  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.TestStruct", style=dashed];
m1_418 -> m1_424  [color=darkseagreen4, key=1, label=o, style=dashed];
m1_418 -> m1_433  [color=darkseagreen4, key=1, label=o, style=dashed];
m1_418 -> m1_439  [color=darkseagreen4, key=1, label=o, style=dashed];
m1_418 -> m1_445  [color=darkseagreen4, key=1, label=o, style=dashed];
m1_419 -> m1_455  [color=darkseagreen4, key=1, label=changingCount, style=dashed];
m1_420 -> m1_460  [color=darkseagreen4, key=1, label=changedCount, style=dashed];
m1_32 -> m1_41  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_35 -> m1_37  [color=darkseagreen4, key=1, label=o, style=dashed];
m1_35 -> m1_38  [color=darkseagreen4, key=1, label=o, style=dashed];
m1_35 -> m1_39  [color=darkseagreen4, key=1, label=o, style=dashed];
m1_1126 -> m1_1130  [color=darkseagreen4, key=1, label=a, style=dashed];
m1_1126 -> m1_1131  [color=darkseagreen4, key=1, label=a, style=dashed];
m1_1127 -> m1_1129  [color=darkseagreen4, key=1, label=b, style=dashed];
m1_1127 -> m1_1130  [color=darkseagreen4, key=1, label=b, style=dashed];
m1_1127 -> m1_1131  [color=darkseagreen4, key=1, label=b, style=dashed];
m1_206 -> m1_208  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_703 -> m1_705  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_961 -> m1_963  [color=darkseagreen4, key=1, label=o, style=dashed];
m1_960 -> m1_963  [color=darkseagreen4, key=1, label=key, style=dashed];
m1_327 -> m1_327  [color=darkseagreen4, key=1, label=pair, style=dashed];
m1_328 -> m1_328  [color=darkseagreen4, key=1, label=pair, style=dashed];
m1_322 -> m1_324  [color=darkseagreen4, key=1, label=o, style=dashed];
m1_322 -> m1_326  [color=darkseagreen4, key=1, label=o, style=dashed];
m1_325 -> m1_327  [color=darkseagreen4, key=1, label=i, style=dashed];
m1_325 -> m1_328  [color=darkseagreen4, key=1, label=i, style=dashed];
m1_325 -> m1_329  [color=darkseagreen4, key=1, label=i, style=dashed];
m1_329 -> m1_329  [color=darkseagreen4, key=1, label=i, style=dashed];
m1_529 -> m1_532  [color=darkseagreen4, key=1, label=l, style=dashed];
m1_529 -> m1_533  [color=darkseagreen4, key=1, label=l, style=dashed];
m1_529 -> m1_531  [color=darkseagreen4, key=1, label=l, style=dashed];
m1_530 -> m1_533  [color=darkseagreen4, key=1, label=p3, style=dashed];
m1_593 -> m1_599  [color=darkseagreen4, key=1, label=p1, style=dashed];
m1_595 -> m1_599  [color=darkseagreen4, key=1, label=l, style=dashed];
m1_595 -> m1_601  [color=darkseagreen4, key=1, label=l, style=dashed];
m1_595 -> m1_598  [color=darkseagreen4, key=1, label=l, style=dashed];
m1_595 -> m1_600  [color=darkseagreen4, key=1, label=l, style=dashed];
m1_595 -> m1_597  [color=darkseagreen4, key=1, label=l, style=dashed];
m1_594 -> m1_601  [color=darkseagreen4, key=1, label=p2, style=dashed];
m1_596 -> m1_598  [color=darkseagreen4, key=1, label=p3, style=dashed];
m1_596 -> m1_600  [color=darkseagreen4, key=1, label=p3, style=dashed];
m1_108 -> m1_110  [color=darkseagreen4, key=1, label=result, style=dashed];
m1_103 -> m1_109  [color=darkseagreen4, key=1, label=o, style=dashed];
m1_103 -> m1_110  [color=darkseagreen4, key=1, label=o, style=dashed];
m1_102 -> m1_109  [color=darkseagreen4, key=1, label=v, style=dashed];
m1_102 -> m1_104  [color=darkseagreen4, key=1, label=v, style=dashed];
m1_117 -> m1_117  [color=darkseagreen4, key=1, label=myStruct1, style=dashed];
m1_119 -> m1_121  [color=darkseagreen4, key=1, label=o, style=dashed];
m1_120 -> m1_120  [color=darkseagreen4, key=1, label=myStruct2, style=dashed];
m1_192 -> m1_194  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_1166 -> m1_1171  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonWriter", style=dashed];
m1_1166 -> m1_1172  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonWriter", style=dashed];
m1_1167 -> m1_1172  [color=darkseagreen4, key=1, label=token, style=dashed];
m1_1169 -> m1_1171  [color=darkseagreen4, key=1, label=o, style=dashed];
m1_1077 -> m1_1079  [color=darkseagreen4, key=1, label=v, style=dashed];
m1_953 -> m1_955  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_622 -> m1_624  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_132 -> m1_134  [color=darkseagreen4, key=1, label=o, style=dashed];
m1_132 -> m1_135  [color=darkseagreen4, key=1, label=o, style=dashed];
m1_133 -> m1_135  [color=darkseagreen4, key=1, label=result, style=dashed];
m1_136 -> m1_136  [color=darkseagreen4, key=1, label=s, style=dashed];
m1_353 -> m1_355  [color=darkseagreen4, key=1, label=shortie, style=dashed];
m1_353 -> m1_356  [color=darkseagreen4, key=1, label=shortie, style=dashed];
m1_353 -> m1_357  [color=darkseagreen4, key=1, label=shortie, style=dashed];
m1_353 -> m1_358  [color=darkseagreen4, key=1, label=shortie, style=dashed];
m1_517 -> m1_522  [color=darkseagreen4, key=1, label=p1, style=dashed];
m1_520 -> m1_522  [color=darkseagreen4, key=1, label=a, style=dashed];
m1_520 -> m1_523  [color=darkseagreen4, key=1, label=a, style=dashed];
m1_518 -> m1_523  [color=darkseagreen4, key=1, label=p2, style=dashed];
m1_519 -> m1_521  [color=darkseagreen4, key=1, label=l, style=dashed];
m1_17 -> m1_24  [color=green, key=1, label=roles, style=dashed];
m1_17 -> m1_25  [color=darkseagreen4, key=1, label=roles, style=dashed];
m1_17 -> m1_26  [color=darkseagreen4, key=1, label=roles, style=dashed];
m1_23 -> m1_25  [color=darkseagreen4, key=1, label=o, style=dashed];
m1_23 -> m1_26  [color=darkseagreen4, key=1, label=o, style=dashed];
m1_20 -> m1_28  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_224 -> m1_226  [color=darkseagreen4, key=1, label=o, style=dashed];
m1_224 -> m1_227  [color=darkseagreen4, key=1, label=o, style=dashed];
m1_224 -> m1_228  [color=darkseagreen4, key=1, label=o, style=dashed];
m1_235 -> m1_237  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_235 -> m1_239  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_235 -> m1_241  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_235 -> m1_243  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_235 -> m1_245  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_235 -> m1_247  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_235 -> m1_249  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_235 -> m1_251  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_235 -> m1_238  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_235 -> m1_240  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_235 -> m1_242  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_235 -> m1_244  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_235 -> m1_246  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_235 -> m1_248  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_235 -> m1_250  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_235 -> m1_252  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_41 -> m1_43  [color=darkseagreen4, key=1, label=o, style=dashed];
m1_1089 -> m1_1091  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_921 -> m1_929  [color=darkseagreen4, key=1, label=o, style=dashed];
m1_921 -> m1_934  [color=darkseagreen4, key=1, label=o, style=dashed];
m1_921 -> m1_940  [color=darkseagreen4, key=1, label=o, style=dashed];
m1_921 -> m1_926  [color=darkseagreen4, key=1, label=o, style=dashed];
m1_921 -> m1_935  [color=darkseagreen4, key=1, label=o, style=dashed];
m1_921 -> m1_936  [color=darkseagreen4, key=1, label=o, style=dashed];
m1_925 -> m1_929  [color=darkseagreen4, key=1, label=p3, style=dashed];
m1_925 -> m1_935  [color=darkseagreen4, key=1, label=p3, style=dashed];
m1_930 -> m1_934  [color=darkseagreen4, key=1, label=p4, style=dashed];
m1_930 -> m1_936  [color=darkseagreen4, key=1, label=p4, style=dashed];
m1_213 -> m1_215  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_546 -> m1_548  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_991 -> m1_993  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_502 -> m1_504  [color=darkseagreen4, key=1, label=p, style=dashed];
m1_503 -> m1_505  [color=darkseagreen4, key=1, label=l, style=dashed];
m1_830 -> m1_832  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_555 -> m1_557  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_263 -> m1_265  [color=darkseagreen4, key=1, label=raw, style=dashed];
m1_263 -> m1_266  [color=darkseagreen4, key=1, label=raw, style=dashed];
m1_333 -> m1_335  [color=darkseagreen4, key=1, label=v, style=dashed];
m1_1142 -> m1_1146  [color=darkseagreen4, key=1, label=a, style=dashed];
m1_1142 -> m1_1147  [color=darkseagreen4, key=1, label=a, style=dashed];
m1_1142 -> m1_1148  [color=darkseagreen4, key=1, label=a, style=dashed];
m1_1142 -> m1_1149  [color=darkseagreen4, key=1, label=a, style=dashed];
m1_1142 -> m1_1150  [color=darkseagreen4, key=1, label=a, style=dashed];
m1_1142 -> m1_1151  [color=darkseagreen4, key=1, label=a, style=dashed];
m1_1142 -> m1_1152  [color=darkseagreen4, key=1, label=a, style=dashed];
m1_1142 -> m1_1154  [color=darkseagreen4, key=1, label=a, style=dashed];
m1_1142 -> m1_1156  [color=darkseagreen4, key=1, label=a, style=dashed];
m1_1142 -> m1_1157  [color=darkseagreen4, key=1, label=a, style=dashed];
m1_1142 -> m1_1158  [color=darkseagreen4, key=1, label=a, style=dashed];
m1_1142 -> m1_1160  [color=darkseagreen4, key=1, label=a, style=dashed];
m1_1142 -> m1_1162  [color=darkseagreen4, key=1, label=a, style=dashed];
m1_363 -> m1_367  [color=darkseagreen4, key=1, label=o, style=dashed];
m1_893 -> m1_901  [color=darkseagreen4, key=1, label=o, style=dashed];
m1_893 -> m1_906  [color=darkseagreen4, key=1, label=o, style=dashed];
m1_893 -> m1_912  [color=darkseagreen4, key=1, label=o, style=dashed];
m1_893 -> m1_898  [color=darkseagreen4, key=1, label=o, style=dashed];
m1_893 -> m1_907  [color=darkseagreen4, key=1, label=o, style=dashed];
m1_893 -> m1_908  [color=darkseagreen4, key=1, label=o, style=dashed];
m1_897 -> m1_901  [color=darkseagreen4, key=1, label=p3, style=dashed];
m1_897 -> m1_907  [color=darkseagreen4, key=1, label=p3, style=dashed];
m1_902 -> m1_906  [color=darkseagreen4, key=1, label=p4, style=dashed];
m1_902 -> m1_908  [color=darkseagreen4, key=1, label=p4, style=dashed];
m1_49 -> m1_52  [color=darkseagreen4, key=1, label=p, style=dashed];
m1_216 -> m1_218  [color=darkseagreen4, key=1, label=o, style=dashed];
m1_216 -> m1_219  [color=darkseagreen4, key=1, label=o, style=dashed];
m1_216 -> m1_220  [color=darkseagreen4, key=1, label=o, style=dashed];
m1_454 -> m1_422  [color=darkseagreen4, key=1, label=changing, style=dashed];
m1_454 -> m1_431  [color=darkseagreen4, key=1, label=changing, style=dashed];
m1_454 -> m1_437  [color=darkseagreen4, key=1, label=changing, style=dashed];
m1_454 -> m1_443  [color=darkseagreen4, key=1, label=changing, style=dashed];
m1_454 -> m1_456  [color=darkseagreen4, key=1, label=changing, style=dashed];
m1_459 -> m1_423  [color=darkseagreen4, key=1, label=changed, style=dashed];
m1_459 -> m1_432  [color=darkseagreen4, key=1, label=changed, style=dashed];
m1_459 -> m1_438  [color=darkseagreen4, key=1, label=changed, style=dashed];
m1_459 -> m1_444  [color=darkseagreen4, key=1, label=changed, style=dashed];
m1_459 -> m1_461  [color=darkseagreen4, key=1, label=changed, style=dashed];
m1_455 -> m1_425  [color=darkseagreen4, key=1, label=changingCount, style=dashed];
m1_455 -> m1_428  [color=darkseagreen4, key=1, label=changingCount, style=dashed];
m1_455 -> m1_434  [color=darkseagreen4, key=1, label=changingCount, style=dashed];
m1_455 -> m1_440  [color=darkseagreen4, key=1, label=changingCount, style=dashed];
m1_455 -> m1_446  [color=darkseagreen4, key=1, label=changingCount, style=dashed];
m1_455 -> m1_449  [color=darkseagreen4, key=1, label=changingCount, style=dashed];
m1_455 -> m1_455  [color=darkseagreen4, key=1, label=changingCount, style=dashed];
m1_460 -> m1_426  [color=darkseagreen4, key=1, label=changedCount, style=dashed];
m1_460 -> m1_429  [color=darkseagreen4, key=1, label=changedCount, style=dashed];
m1_460 -> m1_435  [color=darkseagreen4, key=1, label=changedCount, style=dashed];
m1_460 -> m1_441  [color=darkseagreen4, key=1, label=changedCount, style=dashed];
m1_460 -> m1_447  [color=darkseagreen4, key=1, label=changedCount, style=dashed];
m1_460 -> m1_450  [color=darkseagreen4, key=1, label=changedCount, style=dashed];
m1_460 -> m1_460  [color=darkseagreen4, key=1, label=changedCount, style=dashed];
m1_490 -> m1_468  [color=darkseagreen4, key=1, label=changed, style=dashed];
m1_490 -> m1_474  [color=darkseagreen4, key=1, label=changed, style=dashed];
m1_490 -> m1_478  [color=darkseagreen4, key=1, label=changed, style=dashed];
m1_490 -> m1_482  [color=darkseagreen4, key=1, label=changed, style=dashed];
m1_490 -> m1_492  [color=darkseagreen4, key=1, label=changed, style=dashed];
m1_491 -> m1_470  [color=darkseagreen4, key=1, label=changedCount, style=dashed];
m1_491 -> m1_472  [color=darkseagreen4, key=1, label=changedCount, style=dashed];
m1_491 -> m1_476  [color=darkseagreen4, key=1, label=changedCount, style=dashed];
m1_491 -> m1_480  [color=darkseagreen4, key=1, label=changedCount, style=dashed];
m1_491 -> m1_484  [color=darkseagreen4, key=1, label=changedCount, style=dashed];
m1_491 -> m1_486  [color=darkseagreen4, key=1, label=changedCount, style=dashed];
m1_491 -> m1_491  [color=darkseagreen4, key=1, label=changedCount, style=dashed];
m1_916 -> m1_901  [color=darkseagreen4, key=1, label=index, style=dashed];
m1_916 -> m1_906  [color=darkseagreen4, key=1, label=index, style=dashed];
m1_916 -> m1_900  [color=darkseagreen4, key=1, label=index, style=dashed];
m1_916 -> m1_905  [color=darkseagreen4, key=1, label=index, style=dashed];
m1_916 -> m1_911  [color=darkseagreen4, key=1, label=index, style=dashed];
m1_915 -> m1_899  [color=darkseagreen4, key=1, label=changedType, style=dashed];
m1_915 -> m1_904  [color=darkseagreen4, key=1, label=changedType, style=dashed];
m1_915 -> m1_910  [color=darkseagreen4, key=1, label=changedType, style=dashed];
m1_915 -> m1_917  [color=darkseagreen4, key=1, label=changedType, style=dashed];
m1_944 -> m1_929  [color=darkseagreen4, key=1, label=index, style=dashed];
m1_944 -> m1_934  [color=darkseagreen4, key=1, label=index, style=dashed];
m1_944 -> m1_928  [color=darkseagreen4, key=1, label=index, style=dashed];
m1_944 -> m1_933  [color=darkseagreen4, key=1, label=index, style=dashed];
m1_944 -> m1_939  [color=darkseagreen4, key=1, label=index, style=dashed];
m1_943 -> m1_927  [color=darkseagreen4, key=1, label=changedType, style=dashed];
m1_943 -> m1_932  [color=darkseagreen4, key=1, label=changedType, style=dashed];
m1_943 -> m1_938  [color=darkseagreen4, key=1, label=changedType, style=dashed];
m1_943 -> m1_945  [color=darkseagreen4, key=1, label=changedType, style=dashed];
m1_1023 -> m1_1025  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_1023 -> m1_1026  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_1023 -> m1_1027  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_1023 -> m1_1028  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_1023 -> m1_1029  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_717 -> m1_719  [color=darkseagreen4, key=1, label=l, style=dashed];
m1_560 -> m1_562  [color=darkseagreen4, key=1, label=l, style=dashed];
m1_494 -> m1_496  [color=darkseagreen4, key=1, label=p, style=dashed];
m1_495 -> m1_497  [color=darkseagreen4, key=1, label=l, style=dashed];
m1_1135 -> m1_1137  [color=darkseagreen4, key=1, label=exactMatch, style=dashed];
m1_1136 -> m1_1138  [color=darkseagreen4, key=1, label=ignoreCase, style=dashed];
m1_749 -> m1_755  [color=darkseagreen4, key=1, label=p1, style=dashed];
m1_751 -> m1_755  [color=darkseagreen4, key=1, label=l, style=dashed];
m1_751 -> m1_757  [color=darkseagreen4, key=1, label=l, style=dashed];
m1_751 -> m1_754  [color=darkseagreen4, key=1, label=l, style=dashed];
m1_751 -> m1_756  [color=darkseagreen4, key=1, label=l, style=dashed];
m1_751 -> m1_753  [color=darkseagreen4, key=1, label=l, style=dashed];
m1_750 -> m1_757  [color=darkseagreen4, key=1, label=p2, style=dashed];
m1_752 -> m1_754  [color=darkseagreen4, key=1, label=p3, style=dashed];
m1_752 -> m1_756  [color=darkseagreen4, key=1, label=p3, style=dashed];
m1_1007 -> m1_1009  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_1007 -> m1_1010  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_1007 -> m1_1011  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_1007 -> m1_1012  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_1013 -> m1_1015  [color=darkseagreen4, key=1, label=o, style=dashed];
m1_843 -> m1_845  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_1083 -> m1_1085  [color=darkseagreen4, key=1, label=v, style=dashed];
m1_694 -> m1_696  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_537 -> m1_539  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_510 -> m1_513  [color=darkseagreen4, key=1, label=l, style=dashed];
m1_510 -> m1_512  [color=darkseagreen4, key=1, label=l, style=dashed];
m1_566 -> m1_578  [color=darkseagreen4, key=1, label=p2, style=dashed];
m1_566 -> m1_574  [color=darkseagreen4, key=1, label=p2, style=dashed];
m1_566 -> m1_575  [color=darkseagreen4, key=1, label=p2, style=dashed];
m1_566 -> m1_577  [color=darkseagreen4, key=1, label=p2, style=dashed];
m1_567 -> m1_570  [color=darkseagreen4, key=1, label=l, style=dashed];
m1_567 -> m1_572  [color=darkseagreen4, key=1, label=l, style=dashed];
m1_567 -> m1_576  [color=darkseagreen4, key=1, label=l, style=dashed];
m1_567 -> m1_577  [color=darkseagreen4, key=1, label=l, style=dashed];
m1_567 -> m1_569  [color=darkseagreen4, key=1, label=l, style=dashed];
m1_567 -> m1_571  [color=darkseagreen4, key=1, label=l, style=dashed];
m1_567 -> m1_573  [color=darkseagreen4, key=1, label=l, style=dashed];
m1_567 -> m1_574  [color=darkseagreen4, key=1, label=l, style=dashed];
m1_567 -> m1_575  [color=darkseagreen4, key=1, label=l, style=dashed];
m1_565 -> m1_571  [color=darkseagreen4, key=1, label=p1, style=dashed];
m1_565 -> m1_573  [color=darkseagreen4, key=1, label=p1, style=dashed];
m1_662 -> m1_664  [color=darkseagreen4, key=1, label=p, style=dashed];
m1_663 -> m1_665  [color=darkseagreen4, key=1, label=l, style=dashed];
m1_584 -> m1_587  [color=darkseagreen4, key=1, label=l, style=dashed];
m1_584 -> m1_589  [color=darkseagreen4, key=1, label=l, style=dashed];
m1_584 -> m1_586  [color=darkseagreen4, key=1, label=l, style=dashed];
m1_584 -> m1_588  [color=darkseagreen4, key=1, label=l, style=dashed];
m1_582 -> m1_586  [color=darkseagreen4, key=1, label=p1, style=dashed];
m1_583 -> m1_588  [color=darkseagreen4, key=1, label=p2, style=dashed];
m1_863 -> m1_870  [color=darkseagreen4, key=1, label=o, style=dashed];
m1_868 -> m1_870  [color=darkseagreen4, key=1, label=p, style=dashed];
m1_766 -> m1_771  [color=darkseagreen4, key=1, label=p2, style=dashed];
m1_767 -> m1_771  [color=darkseagreen4, key=1, label=l, style=dashed];
m1_767 -> m1_770  [color=darkseagreen4, key=1, label=l, style=dashed];
m1_768 -> m1_770  [color=darkseagreen4, key=1, label=p3, style=dashed];
m1_1096 -> m1_1099  [color=darkseagreen4, key=1, label=o1, style=dashed];
m1_1096 -> m1_1101  [color=darkseagreen4, key=1, label=o1, style=dashed];
m1_1096 -> m1_1103  [color=darkseagreen4, key=1, label=o1, style=dashed];
m1_1096 -> m1_1105  [color=darkseagreen4, key=1, label=o1, style=dashed];
m1_1096 -> m1_1106  [color=darkseagreen4, key=1, label=o1, style=dashed];
m1_1069 -> m1_1071  [color=darkseagreen4, key=1, label=v, style=dashed];
m1_822 -> m1_824  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_774 -> m1_776  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_344 -> m1_347  [color=darkseagreen4, key=1, label=name, style=dashed];
m1_346 -> m1_348  [color=darkseagreen4, key=1, label=smallest, style=dashed];
m1_614 -> m1_619  [color=darkseagreen4, key=1, label=p2, style=dashed];
m1_615 -> m1_619  [color=darkseagreen4, key=1, label=l, style=dashed];
m1_615 -> m1_618  [color=darkseagreen4, key=1, label=l, style=dashed];
m1_616 -> m1_618  [color=darkseagreen4, key=1, label=p3, style=dashed];
m1_656 -> m1_658  [color=darkseagreen4, key=1, label=p, style=dashed];
m1_657 -> m1_659  [color=darkseagreen4, key=1, label=l, style=dashed];
m1_150 -> m1_152  [color=darkseagreen4, key=1, label=o, style=dashed];
m1_149 -> m1_151  [color=darkseagreen4, key=1, label=v, style=dashed];
m1_298 -> m1_300  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_370 -> m1_376  [color=darkseagreen4, key=1, label=moss, style=dashed];
m1_377 -> m1_383  [color=darkseagreen4, key=1, label=jen, style=dashed];
m1_388 -> m1_392  [color=darkseagreen4, key=1, label=p1, style=dashed];
m1_388 -> m1_396  [color=darkseagreen4, key=1, label=p1, style=dashed];
m1_388 -> m1_395  [color=darkseagreen4, key=1, label=p1, style=dashed];
m1_391 -> m1_393  [color=darkseagreen4, key=1, label=l, style=dashed];
m1_391 -> m1_399  [color=darkseagreen4, key=1, label=l, style=dashed];
m1_391 -> m1_397  [color=darkseagreen4, key=1, label=l, style=dashed];
m1_391 -> m1_398  [color=darkseagreen4, key=1, label=l, style=dashed];
m1_391 -> m1_400  [color=darkseagreen4, key=1, label=l, style=dashed];
m1_391 -> m1_405  [color=darkseagreen4, key=1, label=l, style=dashed];
m1_391 -> m1_406  [color=darkseagreen4, key=1, label=l, style=dashed];
m1_391 -> m1_407  [color=darkseagreen4, key=1, label=l, style=dashed];
m1_389 -> m1_393  [color=darkseagreen4, key=1, label=p2, style=dashed];
m1_389 -> m1_399  [color=darkseagreen4, key=1, label=p2, style=dashed];
m1_389 -> m1_404  [color=darkseagreen4, key=1, label=p2, style=dashed];
m1_389 -> m1_403  [color=darkseagreen4, key=1, label=p2, style=dashed];
m1_394 -> m1_397  [color=darkseagreen4, key=1, label=p3, style=dashed];
m1_394 -> m1_398  [color=darkseagreen4, key=1, label=p3, style=dashed];
m1_394 -> m1_406  [color=darkseagreen4, key=1, label=p3, style=dashed];
m1_390 -> m1_401  [color=darkseagreen4, key=1, label=o, style=dashed];
m1_402 -> m1_405  [color=darkseagreen4, key=1, label=p4, style=dashed];
m1_402 -> m1_407  [color=darkseagreen4, key=1, label=p4, style=dashed];
m1_687 -> m1_690  [color=darkseagreen4, key=1, label=l, style=dashed];
m1_687 -> m1_691  [color=darkseagreen4, key=1, label=l, style=dashed];
m1_687 -> m1_689  [color=darkseagreen4, key=1, label=l, style=dashed];
m1_688 -> m1_691  [color=darkseagreen4, key=1, label=p3, style=dashed];
m1_271 -> m1_273  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_1000 -> m1_1002  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_855 -> m1_857  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_983 -> m1_985  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_465 -> m1_469  [color=darkseagreen4, key=1, label=o, style=dashed];
m1_465 -> m1_475  [color=darkseagreen4, key=1, label=o, style=dashed];
m1_465 -> m1_479  [color=darkseagreen4, key=1, label=o, style=dashed];
m1_465 -> m1_483  [color=darkseagreen4, key=1, label=o, style=dashed];
m1_466 -> m1_491  [color=darkseagreen4, key=1, label=changedCount, style=dashed];
m1_1196 -> m1_455  [color=darkseagreen4, key=1, label=changingCount, style=dashed];
m1_1197 -> m1_460  [color=darkseagreen4, key=1, label=changedCount, style=dashed];
m1_1198 -> m1_491  [color=darkseagreen4, key=1, label=changedCount, style=dashed];
m3_14 -> m3_8  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Serialization.JsonObjectContract", style=dashed];
m3_14 -> m3_9  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Serialization.JsonObjectContract", style=dashed];
m4_17 -> m4_34  [color=darkseagreen4, key=1, label=specTests, style=dashed];
m4_35 -> m4_48  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m4_26 -> m4_34  [color=darkseagreen4, key=1, label=jsonSchemaSpecTest, style=dashed];
m4_3 -> m4_8  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTest", style=dashed];
m4_6 -> m4_8  [color=darkseagreen4, key=1, label=v, style=dashed];
m4_51 -> m4_1  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTest", style=dashed];
m5_20 -> m5_22  [color=darkseagreen4, key=1, label="System.Reflection.Emit.ILGenerator", style=dashed];
m5_20 -> m5_23  [color=darkseagreen4, key=1, label="System.Reflection.Emit.ILGenerator", style=dashed];
m5_9 -> m5_11  [color=darkseagreen4, key=1, label="System.Reflection.Emit.ILGenerator", style=dashed];
m5_9 -> m5_12  [color=darkseagreen4, key=1, label="System.Reflection.Emit.ILGenerator", style=dashed];
m5_25 -> m5_27  [color=darkseagreen4, key=1, label="System.Reflection.Emit.ILGenerator", style=dashed];
m5_25 -> m5_28  [color=darkseagreen4, key=1, label="System.Reflection.Emit.ILGenerator", style=dashed];
m5_15 -> m5_17  [color=darkseagreen4, key=1, label="System.Reflection.Emit.ILGenerator", style=dashed];
m5_15 -> m5_18  [color=darkseagreen4, key=1, label="System.Reflection.Emit.ILGenerator", style=dashed];
m5_0 -> m5_2  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m5_0 -> m5_3  [color=darkseagreen4, key=1, label="System.Reflection.Emit.ILGenerator", style=dashed];
m5_0 -> m5_4  [color=darkseagreen4, key=1, label="System.Reflection.Emit.ILGenerator", style=dashed];
m6_6 -> m6_8  [color=darkseagreen4, key=1, label=value, style=dashed];
m7_16 -> m7_19  [color=darkseagreen4, key=1, label=object, style=dashed];
m7_17 -> m7_19  [color=darkseagreen4, key=1, label=ms, style=dashed];
m7_92 -> m7_102  [color=darkseagreen4, key=1, label=string, style=dashed];
m7_50 -> m7_54  [color=darkseagreen4, key=1, label=fixedHex, style=dashed];
m7_51 -> m7_62  [color=darkseagreen4, key=1, label=bytes, style=dashed];
m7_53 -> m7_61  [color=darkseagreen4, key=1, label=offset, style=dashed];
m7_61 -> m7_61  [color=darkseagreen4, key=1, label=offset, style=dashed];
m7_95 -> m7_97  [color=darkseagreen4, key=1, label=string, style=dashed];
m7_41 -> m7_43  [color=darkseagreen4, key=1, label=bool, style=dashed];
m7_42 -> m7_45  [color=darkseagreen4, key=1, label=hex, style=dashed];
m7_30 -> m7_32  [color=darkseagreen4, key=1, label=chars, style=dashed];
m7_88 -> m7_90  [color=darkseagreen4, key=1, label=string, style=dashed];
m7_105 -> m7_110  [color=darkseagreen4, key=1, label="params string[]", style=dashed];
m7_105 -> m7_112  [color=darkseagreen4, key=1, label="params string[]", style=dashed];
m7_105 -> m7_115  [color=darkseagreen4, key=1, label="params string[]", style=dashed];
m7_126 -> m7_131  [color=darkseagreen4, key=1, label="params string[]", style=dashed];
m7_126 -> m7_133  [color=darkseagreen4, key=1, label="params string[]", style=dashed];
m7_126 -> m7_136  [color=darkseagreen4, key=1, label="params string[]", style=dashed];
m7_141 -> m7_39  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Tests.TestFixtureBase", style=dashed];
m7_141 -> m7_70  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Tests.TestFixtureBase", style=dashed];
m8_203 -> m8_206  [color=darkseagreen4, key=1, label=listRef, style=dashed];
m8_207 -> m8_209  [color=darkseagreen4, key=1, label=deserialized, style=dashed];
m8_210 -> m8_212  [color=darkseagreen4, key=1, label=nested, style=dashed];
m8_210 -> m8_213  [color=darkseagreen4, key=1, label=nested, style=dashed];
m8_210 -> m8_214  [color=darkseagreen4, key=1, label=nested, style=dashed];
m8_210 -> m8_215  [color=darkseagreen4, key=1, label=nested, style=dashed];
m8_210 -> m8_216  [color=darkseagreen4, key=1, label=nested, style=dashed];
m8_78 -> m8_80  [color=darkseagreen4, key=1, label=value, style=dashed];
m8_745 -> m8_748  [color=darkseagreen4, key=1, label=object, style=dashed];
m8_745 -> m8_751  [color=darkseagreen4, key=1, label=object, style=dashed];
m8_745 -> m8_750  [color=darkseagreen4, key=1, label=object, style=dashed];
m8_622 -> m8_624  [color=darkseagreen4, key=1, label=p2, style=dashed];
m8_622 -> m8_625  [color=darkseagreen4, key=1, label=p2, style=dashed];
m8_27 -> m8_32  [color=darkseagreen4, key=1, label=sb, style=dashed];
m8_32 -> m8_37  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_28 -> m8_31  [color=darkseagreen4, key=1, label=value, style=dashed];
m8_30 -> m8_33  [color=darkseagreen4, key=1, label=index, style=dashed];
m8_31 -> m8_31  [color=darkseagreen4, key=1, label=i, style=dashed];
m8_31 -> m8_34  [color=darkseagreen4, key=1, label=c, style=dashed];
m8_334 -> m8_336  [color=darkseagreen4, key=1, label=json, style=dashed];
m8_339 -> m8_341  [color=darkseagreen4, key=1, label=newCollection, style=dashed];
m8_724 -> m8_727  [color=darkseagreen4, key=1, label=w, style=dashed];
m8_611 -> m8_613  [color=darkseagreen4, key=1, label=p2, style=dashed];
m8_697 -> m8_705  [color=darkseagreen4, key=1, label=string, style=dashed];
m8_706 -> m8_773  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Tests.Serialization.Message2", style=dashed];
m8_50 -> m8_52  [color=darkseagreen4, key=1, label=sw, style=dashed];
m8_52 -> m8_54  [color=darkseagreen4, key=1, label=result, style=dashed];
m8_49 -> m8_51  [color=darkseagreen4, key=1, label=serializer, style=dashed];
m8_55 -> m8_57  [color=darkseagreen4, key=1, label=value, style=dashed];
m8_55 -> m8_64  [color=darkseagreen4, key=1, label=value, style=dashed];
m8_58 -> m8_60  [color=darkseagreen4, key=1, label=dateTime, style=dashed];
m8_87 -> m8_89  [color=darkseagreen4, key=1, label=w2, style=dashed];
m8_123 -> m8_125  [color=darkseagreen4, key=1, label=int, style=dashed];
m8_16 -> m8_140  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Bson.BsonToken", style=dashed];
m8_16 -> m8_158  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Bson.BsonToken", style=dashed];
m8_16 -> m8_178  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Bson.BsonToken", style=dashed];
m8_129 -> m8_137  [color=darkseagreen4, key=1, label=value, style=dashed];
m8_129 -> m8_138  [color=darkseagreen4, key=1, label=values, style=dashed];
m8_129 -> m8_139  [color=darkseagreen4, key=1, label=values, style=dashed];
m8_140 -> m8_149  [color=darkseagreen4, key=1, label=value, style=dashed];
m8_140 -> m8_150  [color=darkseagreen4, key=1, label=value, style=dashed];
m8_158 -> m8_161  [color=darkseagreen4, key=1, label=value, style=dashed];
m8_158 -> m8_162  [color=darkseagreen4, key=1, label=value, style=dashed];
m8_171 -> m8_173  [color=darkseagreen4, key=1, label=value, style=dashed];
m8_178 -> m8_180  [color=darkseagreen4, key=1, label=value, style=dashed];
m8_130 -> m8_135  [color=darkseagreen4, key=1, label=bases, style=dashed];
m8_130 -> m8_136  [color=darkseagreen4, key=1, label=bases, style=dashed];
m8_131 -> m8_133  [color=darkseagreen4, key=1, label=e, style=dashed];
m8_131 -> m8_134  [color=darkseagreen4, key=1, label=e, style=dashed];
m8_135 -> m8_135  [color=darkseagreen4, key=1, label=bases, style=dashed];
m8_135 -> m8_136  [color=darkseagreen4, key=1, label=bases, style=dashed];
m8_136 -> m8_136  [color=darkseagreen4, key=1, label=bases, style=dashed];
m8_136 -> m8_138  [color=darkseagreen4, key=1, label=bases, style=dashed];
m8_132 -> m8_135  [color=darkseagreen4, key=1, label=p, style=dashed];
m8_132 -> m8_136  [color=darkseagreen4, key=1, label=p, style=dashed];
m8_132 -> m8_137  [color=darkseagreen4, key=1, label=p, style=dashed];
m8_133 -> m8_133  [color=darkseagreen4, key=1, label=size, style=dashed];
m8_134 -> m8_134  [color=darkseagreen4, key=1, label=size, style=dashed];
m8_141 -> m8_148  [color=darkseagreen4, key=1, label=size, style=dashed];
m8_143 -> m8_146  [color=darkseagreen4, key=1, label=c, style=dashed];
m8_143 -> m8_147  [color=darkseagreen4, key=1, label=personRef, style=dashed];
m8_142 -> m8_147  [color=darkseagreen4, key=1, label=employeeRef, style=dashed];
m8_148 -> m8_148  [color=darkseagreen4, key=1, label=size, style=dashed];
m8_147 -> m8_147  [color=darkseagreen4, key=1, label=index, style=dashed];
m8_146 -> m8_146  [color=darkseagreen4, key=1, label=size, style=dashed];
m8_146 -> m8_148  [color=darkseagreen4, key=1, label=size, style=dashed];
m8_160 -> m8_162  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_174 -> m8_176  [color=darkseagreen4, key=1, label=request, style=dashed];
m8_174 -> m8_177  [color=darkseagreen4, key=1, label=request, style=dashed];
m8_180 -> m8_180  [color=darkseagreen4, key=1, label=size, style=dashed];
m8_181 -> m8_185  [color=darkseagreen4, key=1, label=containerTypeName, style=dashed];
m8_182 -> m8_185  [color=darkseagreen4, key=1, label=productListTypeName, style=dashed];
m8_234 -> m8_238  [color=darkseagreen4, key=1, label=newValues, style=dashed];
m8_104 -> m8_106  [color=darkseagreen4, key=1, label=employee, style=dashed];
m8_95 -> m8_98  [color=darkseagreen4, key=1, label=employeeRef, style=dashed];
m8_282 -> m8_285  [color=darkseagreen4, key=1, label=testObject, style=dashed];
m8_282 -> m8_286  [color=darkseagreen4, key=1, label=testObject, style=dashed];
m8_282 -> m8_294  [color=darkseagreen4, key=1, label=testObject, style=dashed];
m8_291 -> m8_294  [color=darkseagreen4, key=1, label=jsonWriter, style=dashed];
m8_295 -> m8_300  [color=darkseagreen4, key=1, label=json, style=dashed];
m8_288 -> m8_294  [color=darkseagreen4, key=1, label=serializingTester, style=dashed];
m8_306 -> m8_310  [color=darkseagreen4, key=1, label=anotherTestObject, style=dashed];
m8_306 -> m8_308  [color=darkseagreen4, key=1, label=anotherTestObject, style=dashed];
m8_306 -> m8_309  [color=darkseagreen4, key=1, label=anotherTestObject, style=dashed];
m8_311 -> m8_313  [color=darkseagreen4, key=1, label=list, style=dashed];
m8_311 -> m8_314  [color=darkseagreen4, key=1, label=list, style=dashed];
m8_405 -> m8_409  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Tests.Serialization.SerializableWrapper", style=dashed];
m8_405 -> m8_411  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Tests.Serialization.SerializableWrapper", style=dashed];
m8_406 -> m8_409  [color=darkseagreen4, key=1, label=writer, style=dashed];
m8_407 -> m8_409  [color=darkseagreen4, key=1, label=serializer, style=dashed];
m8_479 -> m8_481  [color=darkseagreen4, key=1, label=json, style=dashed];
m8_482 -> m8_488  [color=darkseagreen4, key=1, label=o2, style=dashed];
m8_482 -> m8_485  [color=darkseagreen4, key=1, label=o2, style=dashed];
m8_482 -> m8_484  [color=darkseagreen4, key=1, label=o2, style=dashed];
m8_482 -> m8_486  [color=darkseagreen4, key=1, label=o2, style=dashed];
m8_482 -> m8_487  [color=darkseagreen4, key=1, label=o2, style=dashed];
m8_368 -> m8_370  [color=darkseagreen4, key=1, label=nextInLine, style=dashed];
m8_368 -> m8_371  [color=darkseagreen4, key=1, label=nextInLine, style=dashed];
m8_17 -> m8_20  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Bson.BsonToken", style=dashed];
m8_17 -> m8_41  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Bson.BsonToken", style=dashed];
m8_17 -> m8_44  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Bson.BsonToken", style=dashed];
m8_17 -> m8_47  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Bson.BsonToken", style=dashed];
m8_17 -> m8_74  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Bson.BsonToken", style=dashed];
m8_17 -> m8_81  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Bson.BsonToken", style=dashed];
m8_38 -> m8_41  [color=darkseagreen4, key=1, label=reader, style=dashed];
m8_68 -> m8_71  [color=darkseagreen4, key=1, label=value, style=dashed];
m8_22 -> m8_24  [color=darkseagreen4, key=1, label=property, style=dashed];
m8_22 -> m8_25  [color=darkseagreen4, key=1, label=property, style=dashed];
m8_35 -> m8_35  [color=darkseagreen4, key=1, label=index, style=dashed];
m8_39 -> m8_41  [color=darkseagreen4, key=1, label=ser, style=dashed];
m8_60 -> m8_60  [color=darkseagreen4, key=1, label=dateTime, style=dashed];
m8_69 -> m8_72  [color=darkseagreen4, key=1, label=data, style=dashed];
m8_82 -> m8_84  [color=darkseagreen4, key=1, label=wrapper, style=dashed];
m8_497 -> m8_499  [color=darkseagreen4, key=1, label=c2, style=dashed];
m8_497 -> m8_500  [color=darkseagreen4, key=1, label=c2, style=dashed];
m8_497 -> m8_501  [color=darkseagreen4, key=1, label=c2, style=dashed];
m8_348 -> m8_351  [color=darkseagreen4, key=1, label=productClassRef, style=dashed];
m8_117 -> m8_121  [color=darkseagreen4, key=1, label=employeeRef, style=dashed];
m8_398 -> m8_400  [color=darkseagreen4, key=1, label=w, style=dashed];
m8_398 -> m8_401  [color=darkseagreen4, key=1, label=w, style=dashed];
m8_12 -> m8_14  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Bson.BsonToken", style=dashed];
m8_510 -> m8_512  [color=darkseagreen4, key=1, label=c2, style=dashed];
m8_510 -> m8_513  [color=darkseagreen4, key=1, label=c2, style=dashed];
m8_517 -> m8_519  [color=darkseagreen4, key=1, label=c2, style=dashed];
m8_517 -> m8_520  [color=darkseagreen4, key=1, label=c2, style=dashed];
m8_187 -> m8_5  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Bson.BsonBinaryWriter", style=dashed];
m8_187 -> m8_9  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Bson.BsonBinaryWriter", style=dashed];
m8_187 -> m8_13  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Bson.BsonBinaryWriter", style=dashed];
m8_187 -> m8_14  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Bson.BsonBinaryWriter", style=dashed];
m8_187 -> m8_23  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Bson.BsonBinaryWriter", style=dashed];
m8_187 -> m8_24  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Bson.BsonBinaryWriter", style=dashed];
m8_187 -> m8_25  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Bson.BsonBinaryWriter", style=dashed];
m8_187 -> m8_26  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Bson.BsonBinaryWriter", style=dashed];
m8_187 -> m8_29  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Bson.BsonBinaryWriter", style=dashed];
m8_187 -> m8_32  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Bson.BsonBinaryWriter", style=dashed];
m8_187 -> m8_33  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Bson.BsonBinaryWriter", style=dashed];
m8_187 -> m8_34  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Bson.BsonBinaryWriter", style=dashed];
m8_187 -> m8_36  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Bson.BsonBinaryWriter", style=dashed];
m8_187 -> m8_42  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Bson.BsonBinaryWriter", style=dashed];
m8_187 -> m8_45  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Bson.BsonBinaryWriter", style=dashed];
m8_187 -> m8_48  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Bson.BsonBinaryWriter", style=dashed];
m8_187 -> m8_51  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Bson.BsonBinaryWriter", style=dashed];
m8_187 -> m8_59  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Bson.BsonBinaryWriter", style=dashed];
m8_187 -> m8_61  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Bson.BsonBinaryWriter", style=dashed];
m8_187 -> m8_66  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Bson.BsonBinaryWriter", style=dashed];
m8_187 -> m8_70  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Bson.BsonBinaryWriter", style=dashed];
m8_187 -> m8_71  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Bson.BsonBinaryWriter", style=dashed];
m8_187 -> m8_72  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Bson.BsonBinaryWriter", style=dashed];
m8_187 -> m8_76  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Bson.BsonBinaryWriter", style=dashed];
m8_187 -> m8_79  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Bson.BsonBinaryWriter", style=dashed];
m8_187 -> m8_80  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Bson.BsonBinaryWriter", style=dashed];
m8_187 -> m8_105  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Bson.BsonBinaryWriter", style=dashed];
m8_187 -> m8_109  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Bson.BsonBinaryWriter", style=dashed];
m8_187 -> m8_112  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Bson.BsonBinaryWriter", style=dashed];
m8_187 -> m8_113  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Bson.BsonBinaryWriter", style=dashed];
m8_187 -> m8_115  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Bson.BsonBinaryWriter", style=dashed];
m8_187 -> m8_133  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Bson.BsonBinaryWriter", style=dashed];
m8_187 -> m8_134  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Bson.BsonBinaryWriter", style=dashed];
m8_187 -> m8_146  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Bson.BsonBinaryWriter", style=dashed];
m8_187 -> m8_161  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Bson.BsonBinaryWriter", style=dashed];
m8_187 -> m8_180  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Bson.BsonBinaryWriter", style=dashed];
m8_107 -> m8_111  [color=darkseagreen4, key=1, label=int, style=dashed];
m8_107 -> m8_112  [color=darkseagreen4, key=1, label=string, style=dashed];
m8_107 -> m8_113  [color=darkseagreen4, key=1, label=int, style=dashed];
m8_464 -> m8_467  [color=darkseagreen4, key=1, label=l2, style=dashed];
m8_464 -> m8_466  [color=darkseagreen4, key=1, label=l2, style=dashed];
m8_464 -> m8_468  [color=darkseagreen4, key=1, label=l2, style=dashed];
m8_464 -> m8_469  [color=darkseagreen4, key=1, label=l2, style=dashed];
m8_458 -> m8_460  [color=darkseagreen4, key=1, label=l, style=dashed];
m8_458 -> m8_461  [color=darkseagreen4, key=1, label=l, style=dashed];
m8_385 -> m8_387  [color=darkseagreen4, key=1, label=output, style=dashed];
m8_388 -> m8_390  [color=darkseagreen4, key=1, label=obj, style=dashed];
m8_380 -> m8_392  [color=darkseagreen4, key=1, label=data, style=dashed];
m8_118 -> m8_121  [color=darkseagreen4, key=1, label=personRef, style=dashed];
m8_595 -> m8_597  [color=darkseagreen4, key=1, label=someValue, style=dashed];
m8_595 -> m8_602  [color=darkseagreen4, key=1, label=someValue, style=dashed];
m8_594 -> m8_597  [color=darkseagreen4, key=1, label=contextKey, style=dashed];
m8_594 -> m8_602  [color=darkseagreen4, key=1, label=contextKey, style=dashed];
m8_262 -> m8_266  [color=darkseagreen4, key=1, label=newValues, style=dashed];
m8_189 -> m8_192  [color=darkseagreen4, key=1, label=typeNamePropertyRef, style=dashed];
m8_193 -> m8_195  [color=darkseagreen4, key=1, label=deserialized, style=dashed];
m8_196 -> m8_198  [color=darkseagreen4, key=1, label=nested, style=dashed];
m8_430 -> m8_432  [color=darkseagreen4, key=1, label=l, style=dashed];
m8_430 -> m8_433  [color=darkseagreen4, key=1, label=l, style=dashed];
m8_575 -> m8_577  [color=darkseagreen4, key=1, label=d2, style=dashed];
m8_635 -> m8_637  [color=darkseagreen4, key=1, label=p2, style=dashed];
m8_641 -> m8_643  [color=darkseagreen4, key=1, label=input, style=dashed];
m8_641 -> m8_644  [color=darkseagreen4, key=1, label=input, style=dashed];
m8_647 -> m8_655  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_647 -> m8_649  [color=darkseagreen4, key=1, label=strings, style=dashed];
m8_647 -> m8_650  [color=darkseagreen4, key=1, label=strings, style=dashed];
m8_530 -> m8_532  [color=darkseagreen4, key=1, label=c2, style=dashed];
m8_530 -> m8_533  [color=darkseagreen4, key=1, label=c2, style=dashed];
m8_537 -> m8_539  [color=darkseagreen4, key=1, label=c2, style=dashed];
m8_537 -> m8_540  [color=darkseagreen4, key=1, label=c2, style=dashed];
m8_551 -> m8_553  [color=darkseagreen4, key=1, label=o2, style=dashed];
m8_551 -> m8_554  [color=darkseagreen4, key=1, label=o2, style=dashed];
m8_551 -> m8_555  [color=darkseagreen4, key=1, label=o2, style=dashed];
m8_551 -> m8_556  [color=darkseagreen4, key=1, label=o2, style=dashed];
m8_551 -> m8_557  [color=darkseagreen4, key=1, label=o2, style=dashed];
m8_440 -> m8_442  [color=darkseagreen4, key=1, label=c1, style=dashed];
m8_448 -> m8_450  [color=darkseagreen4, key=1, label=l2, style=dashed];
m8_448 -> m8_451  [color=darkseagreen4, key=1, label=l2, style=dashed];
m8_448 -> m8_452  [color=darkseagreen4, key=1, label=l2, style=dashed];
m8_448 -> m8_453  [color=darkseagreen4, key=1, label=l2, style=dashed];
m8_441 -> m8_444  [color=darkseagreen4, key=1, label=l, style=dashed];
m8_441 -> m8_445  [color=darkseagreen4, key=1, label=l, style=dashed];
m8_772 -> m8_399  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests", style=dashed];
m8_772 -> m8_400  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests", style=dashed];
m8_772 -> m8_401  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests", style=dashed];
m8_778 -> m8_743  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Tests.Serialization.Example", style=dashed];
m8_778 -> m8_748  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Tests.Serialization.Example", style=dashed];
m8_778 -> m8_751  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Tests.Serialization.Example", style=dashed];
m8_778 -> m8_757  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Tests.Serialization.Example", style=dashed];
m8_778 -> m8_759  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Tests.Serialization.Example", style=dashed];
m8_771 -> m8_362  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>", style=dashed];
m8_771 -> m8_365  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>", style=dashed];
m8_771 -> m8_367  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>", style=dashed];
m8_771 -> m8_375  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>", style=dashed];
m8_777 -> m8_731  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Tests.Serialization.SerializableWrapper", style=dashed];
m8_777 -> m8_733  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Tests.Serialization.SerializableWrapper", style=dashed];
m8_777 -> m8_727  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Tests.Serialization.SerializableWrapper", style=dashed];
m8_776 -> m8_720  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Tests.Serialization.MyParent", style=dashed];
m9_51 -> m9_54  [color=darkseagreen4, key=1, label=reportJSON, style=dashed];
m9_60 -> m9_20  [color=green, key=1, label="Newtonsoft.Json.Tests.Converters.VersionConverterTests", style=dashed];
m9_60 -> m9_21  [color=green, key=1, label="Newtonsoft.Json.Tests.Converters.VersionConverterTests", style=dashed];
m9_60 -> m9_22  [color=green, key=1, label="Newtonsoft.Json.Tests.Converters.VersionConverterTests", style=dashed];
m9_60 -> m9_23  [color=green, key=1, label="Newtonsoft.Json.Tests.Converters.VersionConverterTests", style=dashed];
m9_60 -> m9_24  [color=green, key=1, label="Newtonsoft.Json.Tests.Converters.VersionConverterTests", style=dashed];
m9_60 -> m9_25  [color=green, key=1, label="Newtonsoft.Json.Tests.Converters.VersionConverterTests", style=dashed];
m9_60 -> m9_26  [color=green, key=1, label="Newtonsoft.Json.Tests.Converters.VersionConverterTests", style=dashed];
m9_60 -> m9_44  [color=green, key=1, label="Newtonsoft.Json.Tests.Converters.VersionConverterTests", style=dashed];
m9_60 -> m9_45  [color=green, key=1, label="Newtonsoft.Json.Tests.Converters.VersionConverterTests", style=dashed];
m9_60 -> m9_46  [color=green, key=1, label="Newtonsoft.Json.Tests.Converters.VersionConverterTests", style=dashed];
m9_60 -> m9_47  [color=green, key=1, label="Newtonsoft.Json.Tests.Converters.VersionConverterTests", style=dashed];
m11_441 -> m11_443  [color=darkseagreen4, key=1, label=newDoc, style=dashed];
m11_817 -> m11_819  [color=darkseagreen4, key=1, label=dxml, style=dashed];
m11_743 -> m11_747  [color=darkseagreen4, key=1, label=json, style=dashed];
m11_658 -> m11_660  [color=darkseagreen4, key=1, label=reader, style=dashed];
m11_659 -> m11_663  [color=darkseagreen4, key=1, label=doc, style=dashed];
m11_69 -> m11_73  [color=darkseagreen4, key=1, label=json1, style=dashed];
m11_135 -> m11_137  [color=darkseagreen4, key=1, label=xml, style=dashed];
m11_533 -> m11_539  [color=darkseagreen4, key=1, label=json, style=dashed];
m11_537 -> m11_539  [color=darkseagreen4, key=1, label=newJson, style=dashed];
m11_230 -> m11_232  [color=darkseagreen4, key=1, label=xml, style=dashed];
m11_233 -> m11_235  [color=darkseagreen4, key=1, label=jsonText, style=dashed];
m11_671 -> m11_673  [color=darkseagreen4, key=1, label=json, style=dashed];
m11_675 -> m11_677  [color=darkseagreen4, key=1, label=xaml2, style=dashed];
m11_643 -> m11_645  [color=darkseagreen4, key=1, label=ms, style=dashed];
m11_868 -> m11_875  [color=darkseagreen4, key=1, label=model, style=dashed];
m11_870 -> m11_875  [color=darkseagreen4, key=1, label=serializer, style=dashed];
m11_871 -> m11_876  [color=darkseagreen4, key=1, label=json, style=dashed];
m11_873 -> m11_875  [color=darkseagreen4, key=1, label=jsonWriter, style=dashed];
m11_124 -> m11_126  [color=darkseagreen4, key=1, label=xml, style=dashed];
m11_124 -> m11_130  [color=darkseagreen4, key=1, label=xml, style=dashed];
m11_801 -> m11_804  [color=darkseagreen4, key=1, label=dt, style=dashed];
m11_803 -> m11_805  [color=darkseagreen4, key=1, label=dxml, style=dashed];
m11_474 -> m11_476  [color=darkseagreen4, key=1, label=xml, style=dashed];
m11_477 -> m11_479  [color=darkseagreen4, key=1, label=jsonText, style=dashed];
m11_614 -> m11_616  [color=darkseagreen4, key=1, label=xml, style=dashed];
m11_565 -> m11_570  [color=darkseagreen4, key=1, label=json, style=dashed];
m11_384 -> m11_386  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_363 -> m11_365  [color=darkseagreen4, key=1, label=xml, style=dashed];
m11_364 -> m11_369  [color=darkseagreen4, key=1, label=doc, style=dashed];
m11_295 -> m11_299  [color=darkseagreen4, key=1, label=xml, style=dashed];
m11_295 -> m11_303  [color=darkseagreen4, key=1, label=xml, style=dashed];
m11_295 -> m11_308  [color=darkseagreen4, key=1, label=xml, style=dashed];
m11_296 -> m11_301  [color=darkseagreen4, key=1, label=expected, style=dashed];
m11_296 -> m11_306  [color=darkseagreen4, key=1, label=expected, style=dashed];
m11_782 -> m11_784  [color=darkseagreen4, key=1, label=d, style=dashed];
m11_782 -> m11_785  [color=darkseagreen4, key=1, label=d, style=dashed];
m11_782 -> m11_786  [color=darkseagreen4, key=1, label=d, style=dashed];
m11_345 -> m11_350  [color=darkseagreen4, key=1, label=XmlNode, style=dashed];
m11_348 -> m11_351  [color=darkseagreen4, key=1, label=sw, style=dashed];
m11_310 -> m11_324  [color=darkseagreen4, key=1, label=XmlDocument, style=dashed];
m11_322 -> m11_325  [color=darkseagreen4, key=1, label=builder, style=dashed];
m11_355 -> m11_357  [color=darkseagreen4, key=1, label=xml, style=dashed];
m11_356 -> m11_360  [color=darkseagreen4, key=1, label=doc, style=dashed];
m11_399 -> m11_401  [color=darkseagreen4, key=1, label=arrayXml, style=dashed];
m11_402 -> m11_404  [color=darkseagreen4, key=1, label=arrayJsonText, style=dashed];
m11_405 -> m11_407  [color=darkseagreen4, key=1, label=arrayXml, style=dashed];
m11_408 -> m11_410  [color=darkseagreen4, key=1, label=arrayJsonText, style=dashed];
m11_411 -> m11_413  [color=darkseagreen4, key=1, label=arrayXml, style=dashed];
m11_414 -> m11_416  [color=green, key=1, label=arrayJsonText, style=dashed];
m11_452 -> m11_458  [color=darkseagreen4, key=1, label=json, style=dashed];
m11_573 -> m11_578  [color=darkseagreen4, key=1, label=json, style=dashed];
m11_574 -> m11_577  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_484 -> m11_486  [color=darkseagreen4, key=1, label=xml, style=dashed];
m11_485 -> m11_491  [color=darkseagreen4, key=1, label=doc, style=dashed];
m11_680 -> m11_682  [color=darkseagreen4, key=1, label=xaml, style=dashed];
m11_683 -> m11_685  [color=darkseagreen4, key=1, label=json, style=dashed];
m11_686 -> m11_689  [color=darkseagreen4, key=1, label=node, style=dashed];
m11_688 -> m11_690  [color=darkseagreen4, key=1, label=writer, style=dashed];
m11_691 -> m11_693  [color=darkseagreen4, key=1, label=xaml2, style=dashed];
m11_113 -> m11_118  [color=darkseagreen4, key=1, label=xml, style=dashed];
m11_168 -> m11_175  [color=darkseagreen4, key=1, label=x, style=dashed];
m11_238 -> m11_258  [color=darkseagreen4, key=1, label=doc, style=dashed];
m11_238 -> m11_267  [color=darkseagreen4, key=1, label=doc, style=dashed];
m11_251 -> m11_265  [color=darkseagreen4, key=1, label=instruction, style=dashed];
m11_254 -> m11_266  [color=darkseagreen4, key=1, label=cDataSection, style=dashed];
m11_257 -> m11_261  [color=darkseagreen4, key=1, label=element, style=dashed];
m11_257 -> m11_264  [color=darkseagreen4, key=1, label=element, style=dashed];
m11_257 -> m11_265  [color=darkseagreen4, key=1, label=element, style=dashed];
m11_257 -> m11_266  [color=darkseagreen4, key=1, label=element, style=dashed];
m11_257 -> m11_267  [color=darkseagreen4, key=1, label=element, style=dashed];
m11_259 -> m11_261  [color=darkseagreen4, key=1, label=aa, style=dashed];
m11_262 -> m11_264  [color=darkseagreen4, key=1, label=aa, style=dashed];
m11_240 -> m11_242  [color=darkseagreen4, key=1, label=xml, style=dashed];
m11_373 -> m11_375  [color=darkseagreen4, key=1, label=newDoc, style=dashed];
m11_770 -> m11_772  [color=darkseagreen4, key=1, label=d, style=dashed];
m11_426 -> m11_430  [color=green, key=1, label=json, style=dashed];
m11_427 -> m11_429  [color=green, key=1, label="lambda expression", style=dashed];
m11_378 -> m11_380  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_701 -> m11_706  [color=darkseagreen4, key=1, label=xmlString, style=dashed];
m11_796 -> m11_798  [color=darkseagreen4, key=1, label=dxml, style=dashed];
m11_77 -> m11_82  [color=darkseagreen4, key=1, label=json1, style=dashed];
m11_78 -> m11_80  [color=darkseagreen4, key=1, label=doc, style=dashed];
m11_811 -> m11_813  [color=darkseagreen4, key=1, label=dxml, style=dashed];
m11_711 -> m11_714  [color=darkseagreen4, key=1, label=xml, style=dashed];
m11_711 -> m11_715  [color=darkseagreen4, key=1, label=xml, style=dashed];
m11_711 -> m11_716  [color=darkseagreen4, key=1, label=xml, style=dashed];
m11_713 -> m11_715  [color=darkseagreen4, key=1, label=w2, style=dashed];
m11_713 -> m11_716  [color=darkseagreen4, key=1, label=w2, style=dashed];
m11_0 -> m11_4  [color=darkseagreen4, key=1, label=XmlNode, style=dashed];
m11_0 -> m11_6  [color=darkseagreen4, key=1, label=XmlNode, style=dashed];
m11_1 -> m11_12  [color=darkseagreen4, key=1, label=json, style=dashed];
m11_1 -> m11_13  [color=darkseagreen4, key=1, label=json, style=dashed];
m11_2 -> m11_9  [color=darkseagreen4, key=1, label=reader, style=dashed];
m11_508 -> m11_510  [color=darkseagreen4, key=1, label=circularDictionary, style=dashed];
m11_514 -> m11_516  [color=darkseagreen4, key=1, label=xml, style=dashed];
m11_517 -> m11_519  [color=darkseagreen4, key=1, label=xmlJson, style=dashed];
m11_822 -> m11_825  [color=darkseagreen4, key=1, label=dt, style=dashed];
m11_824 -> m11_826  [color=darkseagreen4, key=1, label=dxml, style=dashed];
m11_27 -> m11_32  [color=darkseagreen4, key=1, label=string, style=dashed];
m11_34 -> m11_43  [color=darkseagreen4, key=1, label=node, style=dashed];
m11_38 -> m11_40  [color=darkseagreen4, key=1, label=d, style=dashed];
m11_35 -> m11_42  [color=darkseagreen4, key=1, label=xmlText, style=dashed];
m11_39 -> m11_42  [color=darkseagreen4, key=1, label=linqXmlText, style=dashed];
m11_750 -> m11_754  [color=darkseagreen4, key=1, label=json, style=dashed];
m11_751 -> m11_753  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_790 -> m11_792  [color=darkseagreen4, key=1, label=dxml, style=dashed];
m11_391 -> m11_393  [color=darkseagreen4, key=1, label=newDoc, style=dashed];
m11_394 -> m11_396  [color=darkseagreen4, key=1, label=json, style=dashed];
m11_311 -> m11_316  [color=darkseagreen4, key=1, label=XDocument, style=dashed];
m11_314 -> m11_317  [color=darkseagreen4, key=1, label=builder, style=dashed];
m11_728 -> m11_730  [color=darkseagreen4, key=1, label=xmlString, style=dashed];
m11_289 -> m11_291  [color=darkseagreen4, key=1, label=jsonText, style=dashed];
m11_550 -> m11_554  [color=darkseagreen4, key=1, label=json, style=dashed];
m11_551 -> m11_553  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_53 -> m11_56  [color=darkseagreen4, key=1, label=reader, style=dashed];
m11_53 -> m11_57  [color=darkseagreen4, key=1, label=reader, style=dashed];
m11_54 -> m11_59  [color=darkseagreen4, key=1, label=sw, style=dashed];
m11_55 -> m11_57  [color=darkseagreen4, key=1, label=writer, style=dashed];
m11_55 -> m11_58  [color=darkseagreen4, key=1, label=writer, style=dashed];
m11_154 -> m11_161  [color=darkseagreen4, key=1, label=x, style=dashed];
m11_623 -> m11_625  [color=darkseagreen4, key=1, label=xml, style=dashed];
m11_757 -> m11_759  [color=darkseagreen4, key=1, label=xmlString, style=dashed];
m11_216 -> m11_219  [color=darkseagreen4, key=1, label=doc, style=dashed];
m11_607 -> m11_609  [color=darkseagreen4, key=1, label=xml, style=dashed];
m11_328 -> m11_330  [color=darkseagreen4, key=1, label=xml, style=dashed];
m11_329 -> m11_335  [color=darkseagreen4, key=1, label=doc, style=dashed];
m11_331 -> m11_333  [color=darkseagreen4, key=1, label=jsonText, style=dashed];
m11_525 -> m11_530  [color=darkseagreen4, key=1, label=json, style=dashed];
m11_419 -> m11_423  [color=green, key=1, label=json, style=dashed];
m11_420 -> m11_422  [color=green, key=1, label="lambda expression", style=dashed];
m11_223 -> m11_227  [color=darkseagreen4, key=1, label=json, style=dashed];
m11_224 -> m11_226  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_340 -> m11_342  [color=darkseagreen4, key=1, label=expected, style=dashed];
m11_888 -> m11_25  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest", style=dashed];
m11_888 -> m11_443  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest", style=dashed];
m11_888 -> m11_445  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest", style=dashed];
m11_888 -> m11_454  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest", style=dashed];
m11_888 -> m11_456  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest", style=dashed];
m11_888 -> m11_574  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest", style=dashed];
m11_888 -> m11_578  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest", style=dashed];
m11_888 -> m11_588  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest", style=dashed];
m11_888 -> m11_600  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest", style=dashed];
m11_889 -> m11_227  [color=darkseagreen4, key=1, label=json, style=dashed];
m11_890 -> m11_423  [color=green, key=1, label=json, style=dashed];
m11_891 -> m11_430  [color=green, key=1, label=json, style=dashed];
m11_892 -> m11_554  [color=darkseagreen4, key=1, label=json, style=dashed];
m11_893 -> m11_578  [color=darkseagreen4, key=1, label=json, style=dashed];
m11_894 -> m11_754  [color=darkseagreen4, key=1, label=json, style=dashed];
}
