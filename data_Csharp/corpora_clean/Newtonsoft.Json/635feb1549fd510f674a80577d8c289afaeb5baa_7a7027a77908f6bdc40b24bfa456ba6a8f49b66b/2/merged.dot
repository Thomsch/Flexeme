digraph  {
m0_7 [label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting, params Newtonsoft.Json.JsonConverter[])", span="705-705", cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting, params Newtonsoft.Json.JsonConverter[])", file="DefaultValueHandlingTests.cs"];
m0_495 [label="Entry XmlDocument.cstr", span="", cluster="XmlDocument.cstr", file="DefaultValueHandlingTests.cs"];
m0_26 [label="Exit Newtonsoft.Json.Converters.XmlDocumentWrapper.CreateXmlDeclaration(string, string, string)", span="82-82", cluster="Newtonsoft.Json.Converters.XmlDocumentWrapper.CreateXmlDeclaration(string, string, string)", file="DefaultValueHandlingTests.cs"];
m0_174 [label="Entry Newtonsoft.Json.Utilities.MiscellaneousUtils.GetLocalName(string)", span="103-103", cluster="Newtonsoft.Json.Utilities.MiscellaneousUtils.GetLocalName(string)", file="DefaultValueHandlingTests.cs"];
m0_555 [label="Entry Newtonsoft.Json.Converters.XmlNodeConverter.ConvertTokenToXmlValue(Newtonsoft.Json.JsonReader)", span="1414-1414", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ConvertTokenToXmlValue(Newtonsoft.Json.JsonReader)", file="DefaultValueHandlingTests.cs"];
m0_557 [label="reader.TokenType == JsonToken.String", span="1416-1416", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ConvertTokenToXmlValue(Newtonsoft.Json.JsonReader)", file="DefaultValueHandlingTests.cs"];
m0_558 [label="return reader.Value.ToString();", span="1418-1418", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ConvertTokenToXmlValue(Newtonsoft.Json.JsonReader)", file="DefaultValueHandlingTests.cs"];
m0_559 [label="reader.TokenType == JsonToken.Integer", span="1420-1420", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ConvertTokenToXmlValue(Newtonsoft.Json.JsonReader)", file="DefaultValueHandlingTests.cs"];
m0_560 [label="reader.Value is BigInteger", span="1423-1423", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ConvertTokenToXmlValue(Newtonsoft.Json.JsonReader)", file="DefaultValueHandlingTests.cs"];
m0_561 [label="return ((BigInteger)reader.Value).ToString(CultureInfo.InvariantCulture);", span="1424-1424", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ConvertTokenToXmlValue(Newtonsoft.Json.JsonReader)", file="DefaultValueHandlingTests.cs"];
m0_562 [label="return XmlConvert.ToString(Convert.ToInt64(reader.Value, CultureInfo.InvariantCulture));", span="1427-1427", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ConvertTokenToXmlValue(Newtonsoft.Json.JsonReader)", file="DefaultValueHandlingTests.cs"];
m0_563 [label="reader.TokenType == JsonToken.Float", span="1429-1429", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ConvertTokenToXmlValue(Newtonsoft.Json.JsonReader)", file="DefaultValueHandlingTests.cs"];
m0_564 [label="reader.Value is decimal", span="1431-1431", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ConvertTokenToXmlValue(Newtonsoft.Json.JsonReader)", file="DefaultValueHandlingTests.cs"];
m0_565 [label="return XmlConvert.ToString((decimal)reader.Value);", span="1432-1432", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ConvertTokenToXmlValue(Newtonsoft.Json.JsonReader)", file="DefaultValueHandlingTests.cs"];
m0_566 [label="reader.Value is float", span="1433-1433", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ConvertTokenToXmlValue(Newtonsoft.Json.JsonReader)", file="DefaultValueHandlingTests.cs"];
m0_567 [label="return XmlConvert.ToString((float)reader.Value);", span="1434-1434", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ConvertTokenToXmlValue(Newtonsoft.Json.JsonReader)", file="DefaultValueHandlingTests.cs"];
m0_568 [label="return XmlConvert.ToString(Convert.ToDouble(reader.Value, CultureInfo.InvariantCulture));", span="1436-1436", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ConvertTokenToXmlValue(Newtonsoft.Json.JsonReader)", file="DefaultValueHandlingTests.cs"];
m0_569 [label="reader.TokenType == JsonToken.Boolean", span="1438-1438", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ConvertTokenToXmlValue(Newtonsoft.Json.JsonReader)", file="DefaultValueHandlingTests.cs"];
m0_570 [label="return XmlConvert.ToString(Convert.ToBoolean(reader.Value, CultureInfo.InvariantCulture));", span="1440-1440", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ConvertTokenToXmlValue(Newtonsoft.Json.JsonReader)", file="DefaultValueHandlingTests.cs"];
m0_571 [label="reader.TokenType == JsonToken.Date", span="1442-1442", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ConvertTokenToXmlValue(Newtonsoft.Json.JsonReader)", file="DefaultValueHandlingTests.cs"];
m0_572 [label="reader.Value is DateTimeOffset", span="1445-1445", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ConvertTokenToXmlValue(Newtonsoft.Json.JsonReader)", file="DefaultValueHandlingTests.cs"];
m0_573 [label="return XmlConvert.ToString((DateTimeOffset)reader.Value);", span="1446-1446", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ConvertTokenToXmlValue(Newtonsoft.Json.JsonReader)", file="DefaultValueHandlingTests.cs"];
m0_574 [label="DateTime d = Convert.ToDateTime(reader.Value, CultureInfo.InvariantCulture)", span="1449-1449", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ConvertTokenToXmlValue(Newtonsoft.Json.JsonReader)", file="DefaultValueHandlingTests.cs"];
m0_576 [label="reader.TokenType == JsonToken.Null", span="1456-1456", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ConvertTokenToXmlValue(Newtonsoft.Json.JsonReader)", file="DefaultValueHandlingTests.cs"];
m0_578 [label="throw JsonSerializationException.Create(reader, ''Cannot get an XML string value from token type '{0}'.''.FormatWith(CultureInfo.InvariantCulture, reader.TokenType));", span="1462-1462", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ConvertTokenToXmlValue(Newtonsoft.Json.JsonReader)", file="DefaultValueHandlingTests.cs"];
m0_575 [label="return XmlConvert.ToString(d, DateTimeUtils.ToSerializationMode(d.Kind));", span="1451-1451", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ConvertTokenToXmlValue(Newtonsoft.Json.JsonReader)", file="DefaultValueHandlingTests.cs"];
m0_577 [label="return null;", span="1458-1458", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ConvertTokenToXmlValue(Newtonsoft.Json.JsonReader)", file="DefaultValueHandlingTests.cs"];
m0_579 [label="Exit Newtonsoft.Json.Converters.XmlNodeConverter.ConvertTokenToXmlValue(Newtonsoft.Json.JsonReader)", span="1414-1414", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ConvertTokenToXmlValue(Newtonsoft.Json.JsonReader)", file="DefaultValueHandlingTests.cs"];
m0_34 [label="Entry Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string, params Newtonsoft.Json.JsonConverter[])", span="867-867", cluster="Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string, params Newtonsoft.Json.JsonConverter[])", file="DefaultValueHandlingTests.cs"];
m0_35 [label="Entry System.Text.RegularExpressions.Regex.ToString()", span="0-0", cluster="System.Text.RegularExpressions.Regex.ToString()", file="DefaultValueHandlingTests.cs"];
m0_36 [label="Entry Newtonsoft.Json.Tests.Converters.RegexConverterTests.DeserializeFromBson()", span="77-77", cluster="Newtonsoft.Json.Tests.Converters.RegexConverterTests.DeserializeFromBson()", file="DefaultValueHandlingTests.cs"];
m0_521 [label="Entry string.Equals(string, string, System.StringComparison)", span="0-0", cluster="string.Equals(string, string, System.StringComparison)", file="DefaultValueHandlingTests.cs"];
m0_448 [label="Entry Unk.All", span="", cluster="Unk.All", file="DefaultValueHandlingTests.cs"];
m0_240 [label="Entry XAttributeWrapper.cstr", span="", cluster="XAttributeWrapper.cstr", file="DefaultValueHandlingTests.cs"];
m0_65 [label="Entry Newtonsoft.Json.Converters.XmlElementWrapper.GetPrefixOfNamespace(string)", span="152-152", cluster="Newtonsoft.Json.Converters.XmlElementWrapper.GetPrefixOfNamespace(string)", file="DefaultValueHandlingTests.cs"];
m0_66 [label="return _element.GetPrefixOfNamespace(namespaceUri);", span="154-154", cluster="Newtonsoft.Json.Converters.XmlElementWrapper.GetPrefixOfNamespace(string)", file="DefaultValueHandlingTests.cs"];
m0_67 [label="Exit Newtonsoft.Json.Converters.XmlElementWrapper.GetPrefixOfNamespace(string)", span="152-152", cluster="Newtonsoft.Json.Converters.XmlElementWrapper.GetPrefixOfNamespace(string)", file="DefaultValueHandlingTests.cs"];
m0_71 [label="Exit Newtonsoft.Json.Converters.XmlDeclarationWrapper.XmlDeclarationWrapper(XmlDeclaration)", span="167-167", cluster="Newtonsoft.Json.Converters.XmlDeclarationWrapper.XmlDeclarationWrapper(XmlDeclaration)", file="DefaultValueHandlingTests.cs"];
m0_68 [label="Entry Unk.GetPrefixOfNamespace", span="", cluster="Unk.GetPrefixOfNamespace", file="DefaultValueHandlingTests.cs"];
m0_73 [label="_documentType = documentType", span="198-198", cluster="Newtonsoft.Json.Converters.XmlDocumentTypeWrapper.XmlDocumentTypeWrapper(XmlDocumentType)", file="DefaultValueHandlingTests.cs"];
m0_69 [label="Entry Newtonsoft.Json.Converters.XmlDeclarationWrapper.XmlDeclarationWrapper(XmlDeclaration)", span="167-167", cluster="Newtonsoft.Json.Converters.XmlDeclarationWrapper.XmlDeclarationWrapper(XmlDeclaration)", file="DefaultValueHandlingTests.cs"];
m0_70 [label="_declaration = declaration", span="170-170", cluster="Newtonsoft.Json.Converters.XmlDeclarationWrapper.XmlDeclarationWrapper(XmlDeclaration)", file="DefaultValueHandlingTests.cs"];
m0_77 [label="Exit Newtonsoft.Json.Converters.XmlNodeWrapper.XmlNodeWrapper(XmlNode)", span="232-232", cluster="Newtonsoft.Json.Converters.XmlNodeWrapper.XmlNodeWrapper(XmlNode)", file="DefaultValueHandlingTests.cs"];
m0_74 [label="Exit Newtonsoft.Json.Converters.XmlDocumentTypeWrapper.XmlDocumentTypeWrapper(XmlDocumentType)", span="195-195", cluster="Newtonsoft.Json.Converters.XmlDocumentTypeWrapper.XmlDocumentTypeWrapper(XmlDocumentType)", file="DefaultValueHandlingTests.cs"];
m0_79 [label="node.NodeType", span="267-267", cluster="Newtonsoft.Json.Converters.XmlNodeWrapper.WrapNode(XmlNode)", file="DefaultValueHandlingTests.cs"];
m0_80 [label="XmlNodeType.Element", span="269-269", cluster="Newtonsoft.Json.Converters.XmlNodeWrapper.WrapNode(XmlNode)", file="DefaultValueHandlingTests.cs"];
m0_76 [label="_node = node", span="234-234", cluster="Newtonsoft.Json.Converters.XmlNodeWrapper.XmlNodeWrapper(XmlNode)", file="DefaultValueHandlingTests.cs"];
m0_78 [label="Entry Newtonsoft.Json.Converters.XmlNodeWrapper.WrapNode(XmlNode)", span="265-265", cluster="Newtonsoft.Json.Converters.XmlNodeWrapper.WrapNode(XmlNode)", file="DefaultValueHandlingTests.cs"];
m0_75 [label="Entry Newtonsoft.Json.Converters.XmlNodeWrapper.XmlNodeWrapper(XmlNode)", span="232-232", cluster="Newtonsoft.Json.Converters.XmlNodeWrapper.XmlNodeWrapper(XmlNode)", file="DefaultValueHandlingTests.cs"];
m0_72 [label="Entry Newtonsoft.Json.Converters.XmlDocumentTypeWrapper.XmlDocumentTypeWrapper(XmlDocumentType)", span="195-195", cluster="Newtonsoft.Json.Converters.XmlDocumentTypeWrapper.XmlDocumentTypeWrapper(XmlDocumentType)", file="DefaultValueHandlingTests.cs"];
m0_81 [label="return new XmlElementWrapper((XmlElement) node);", span="270-270", cluster="Newtonsoft.Json.Converters.XmlNodeWrapper.WrapNode(XmlNode)", file="DefaultValueHandlingTests.cs"];
m0_133 [label="Entry Newtonsoft.Json.Converters.XDocumentWrapper.CreateComment(string)", span="480-480", cluster="Newtonsoft.Json.Converters.XDocumentWrapper.CreateComment(string)", file="DefaultValueHandlingTests.cs"];
m0_134 [label="return new XObjectWrapper(new XComment(text));", span="482-482", cluster="Newtonsoft.Json.Converters.XDocumentWrapper.CreateComment(string)", file="DefaultValueHandlingTests.cs"];
m0_135 [label="Exit Newtonsoft.Json.Converters.XDocumentWrapper.CreateComment(string)", span="480-480", cluster="Newtonsoft.Json.Converters.XDocumentWrapper.CreateComment(string)", file="DefaultValueHandlingTests.cs"];
m0_95 [label="Entry Newtonsoft.Json.Converters.IXmlDocument.CreateComment(string)", span="332-332", cluster="Newtonsoft.Json.Converters.IXmlDocument.CreateComment(string)", file="DefaultValueHandlingTests.cs"];
m0_96 [label="Exit Newtonsoft.Json.Converters.IXmlDocument.CreateComment(string)", span="332-332", cluster="Newtonsoft.Json.Converters.IXmlDocument.CreateComment(string)", file="DefaultValueHandlingTests.cs"];
m0_109 [label="Entry Newtonsoft.Json.Converters.IXmlDocument.CreateProcessingInstruction(string, string)", span="339-339", cluster="Newtonsoft.Json.Converters.IXmlDocument.CreateProcessingInstruction(string, string)", file="DefaultValueHandlingTests.cs"];
m0_110 [label="Exit Newtonsoft.Json.Converters.IXmlDocument.CreateProcessingInstruction(string, string)", span="339-339", cluster="Newtonsoft.Json.Converters.IXmlDocument.CreateProcessingInstruction(string, string)", file="DefaultValueHandlingTests.cs"];
m0_519 [label="Entry object.ToString()", span="0-0", cluster="object.ToString()", file="DefaultValueHandlingTests.cs"];
m0_156 [label="Entry Newtonsoft.Json.Converters.XDocumentWrapper.CreateXmlDocumentType(string, string, string, string)", span="510-510", cluster="Newtonsoft.Json.Converters.XDocumentWrapper.CreateXmlDocumentType(string, string, string, string)", file="DefaultValueHandlingTests.cs"];
m0_157 [label="return new XDocumentTypeWrapper(new XDocumentType(name, publicId, systemId, internalSubset));", span="512-512", cluster="Newtonsoft.Json.Converters.XDocumentWrapper.CreateXmlDocumentType(string, string, string, string)", file="DefaultValueHandlingTests.cs"];
m0_158 [label="Exit Newtonsoft.Json.Converters.XDocumentWrapper.CreateXmlDocumentType(string, string, string, string)", span="510-510", cluster="Newtonsoft.Json.Converters.XDocumentWrapper.CreateXmlDocumentType(string, string, string, string)", file="DefaultValueHandlingTests.cs"];
m0_743 [label="Entry string.StartsWith(string, System.StringComparison)", span="0-0", cluster="string.StartsWith(string, System.StringComparison)", file="DefaultValueHandlingTests.cs"];
m0_200 [label="Entry Newtonsoft.Json.Converters.XContainerWrapper.WrapNode(XObject)", span="690-690", cluster="Newtonsoft.Json.Converters.XContainerWrapper.WrapNode(XObject)", file="DefaultValueHandlingTests.cs"];
m0_201 [label="node is XDocument", span="692-692", cluster="Newtonsoft.Json.Converters.XContainerWrapper.WrapNode(XObject)", file="DefaultValueHandlingTests.cs"];
m0_202 [label="return new XDocumentWrapper((XDocument)node);", span="693-693", cluster="Newtonsoft.Json.Converters.XContainerWrapper.WrapNode(XObject)", file="DefaultValueHandlingTests.cs"];
m0_203 [label="node is XElement", span="694-694", cluster="Newtonsoft.Json.Converters.XContainerWrapper.WrapNode(XObject)", file="DefaultValueHandlingTests.cs"];
m0_204 [label="return new XElementWrapper((XElement)node);", span="695-695", cluster="Newtonsoft.Json.Converters.XContainerWrapper.WrapNode(XObject)", file="DefaultValueHandlingTests.cs"];
m0_205 [label="node is XContainer", span="696-696", cluster="Newtonsoft.Json.Converters.XContainerWrapper.WrapNode(XObject)", file="DefaultValueHandlingTests.cs"];
m0_206 [label="return new XContainerWrapper((XContainer)node);", span="697-697", cluster="Newtonsoft.Json.Converters.XContainerWrapper.WrapNode(XObject)", file="DefaultValueHandlingTests.cs"];
m0_207 [label="node is XProcessingInstruction", span="698-698", cluster="Newtonsoft.Json.Converters.XContainerWrapper.WrapNode(XObject)", file="DefaultValueHandlingTests.cs"];
m0_208 [label="return new XProcessingInstructionWrapper((XProcessingInstruction)node);", span="699-699", cluster="Newtonsoft.Json.Converters.XContainerWrapper.WrapNode(XObject)", file="DefaultValueHandlingTests.cs"];
m0_209 [label="node is XText", span="700-700", cluster="Newtonsoft.Json.Converters.XContainerWrapper.WrapNode(XObject)", file="DefaultValueHandlingTests.cs"];
m0_210 [label="return new XTextWrapper((XText)node);", span="701-701", cluster="Newtonsoft.Json.Converters.XContainerWrapper.WrapNode(XObject)", file="DefaultValueHandlingTests.cs"];
m0_211 [label="node is XComment", span="702-702", cluster="Newtonsoft.Json.Converters.XContainerWrapper.WrapNode(XObject)", file="DefaultValueHandlingTests.cs"];
m0_212 [label="return new XCommentWrapper((XComment)node);", span="703-703", cluster="Newtonsoft.Json.Converters.XContainerWrapper.WrapNode(XObject)", file="DefaultValueHandlingTests.cs"];
m0_213 [label="node is XAttribute", span="704-704", cluster="Newtonsoft.Json.Converters.XContainerWrapper.WrapNode(XObject)", file="DefaultValueHandlingTests.cs"];
m0_214 [label="return new XAttributeWrapper((XAttribute)node);", span="705-705", cluster="Newtonsoft.Json.Converters.XContainerWrapper.WrapNode(XObject)", file="DefaultValueHandlingTests.cs"];
m0_215 [label="node is XDocumentType", span="706-706", cluster="Newtonsoft.Json.Converters.XContainerWrapper.WrapNode(XObject)", file="DefaultValueHandlingTests.cs"];
m0_216 [label="return new XDocumentTypeWrapper((XDocumentType)node);", span="707-707", cluster="Newtonsoft.Json.Converters.XContainerWrapper.WrapNode(XObject)", file="DefaultValueHandlingTests.cs"];
m0_217 [label="return new XObjectWrapper(node);", span="709-709", cluster="Newtonsoft.Json.Converters.XContainerWrapper.WrapNode(XObject)", file="DefaultValueHandlingTests.cs"];
m0_218 [label="Exit Newtonsoft.Json.Converters.XContainerWrapper.WrapNode(XObject)", span="690-690", cluster="Newtonsoft.Json.Converters.XContainerWrapper.WrapNode(XObject)", file="DefaultValueHandlingTests.cs"];
m0_170 [label="Entry Newtonsoft.Json.Converters.XDocumentWrapper.CreateElement(string, string)", span="525-525", cluster="Newtonsoft.Json.Converters.XDocumentWrapper.CreateElement(string, string)", file="DefaultValueHandlingTests.cs"];
m0_171 [label="string localName = MiscellaneousUtils.GetLocalName(qualifiedName)", span="527-527", cluster="Newtonsoft.Json.Converters.XDocumentWrapper.CreateElement(string, string)", file="DefaultValueHandlingTests.cs"];
m0_172 [label="return new XElementWrapper(new XElement(XName.Get(localName, namespaceUri)));", span="528-528", cluster="Newtonsoft.Json.Converters.XDocumentWrapper.CreateElement(string, string)", file="DefaultValueHandlingTests.cs"];
m0_173 [label="Exit Newtonsoft.Json.Converters.XDocumentWrapper.CreateElement(string, string)", span="525-525", cluster="Newtonsoft.Json.Converters.XDocumentWrapper.CreateElement(string, string)", file="DefaultValueHandlingTests.cs"];
m0_496 [label="Entry Newtonsoft.Json.Converters.XmlNodeConverter.ReadElement(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string, XmlNamespaceManager)", span="1347-1347", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadElement(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_524 [label="string.IsNullOrEmpty(propertyName)", span="1349-1349", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadElement(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_526 [label="Dictionary<string, string> attributeNameValues = ReadAttributeElements(reader, manager)", span="1352-1352", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadElement(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_527 [label="string elementPrefix = MiscellaneousUtils.GetPrefix(propertyName)", span="1354-1354", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadElement(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_528 [label="propertyName.StartsWith('@')", span="1356-1356", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadElement(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_529 [label="string attributeName = propertyName.Substring(1)", span="1358-1358", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadElement(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_530 [label="string attributeValue = reader.Value.ToString()", span="1359-1359", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadElement(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_532 [label="IXmlNode attribute = (!string.IsNullOrEmpty(attributePrefix))\r\n                    ? document.CreateAttribute(attributeName, manager.LookupNamespace(attributePrefix), attributeValue)\r\n                    : document.CreateAttribute(attributeName, attributeValue)", span="1363-1365", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadElement(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_533 [label="((IXmlElement)currentNode).SetAttributeNode(attribute)", span="1367-1367", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadElement(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_534 [label="IXmlElement element = CreateElement(propertyName, document, elementPrefix, manager)", span="1371-1371", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadElement(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_535 [label="currentNode.AppendChild(element)", span="1373-1373", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadElement(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_538 [label="IXmlNode attribute = (!string.IsNullOrEmpty(attributePrefix))\r\n                        ? document.CreateAttribute(nameValue.Key, manager.LookupNamespace(attributePrefix) ?? string.Empty, nameValue.Value)\r\n                        : document.CreateAttribute(nameValue.Key, nameValue.Value)", span="1380-1382", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadElement(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_540 [label="reader.TokenType == JsonToken.String\r\n                    || reader.TokenType == JsonToken.Integer\r\n                    || reader.TokenType == JsonToken.Float\r\n                    || reader.TokenType == JsonToken.Boolean\r\n                    || reader.TokenType == JsonToken.Date", span="1387-1391", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadElement(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_541 [label="element.AppendChild(document.CreateTextNode(ConvertTokenToXmlValue(reader)))", span="1393-1393", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadElement(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_542 [label="reader.TokenType == JsonToken.Null", span="1395-1395", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadElement(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_543 [label="reader.TokenType != JsonToken.EndObject", span="1402-1402", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadElement(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_544 [label="manager.PushScope()", span="1404-1404", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadElement(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_545 [label="DeserializeNode(reader, document, manager, element)", span="1405-1405", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadElement(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_546 [label="manager.PopScope()", span="1406-1406", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadElement(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_547 [label="manager.RemoveNamespace(string.Empty, manager.DefaultNamespace)", span="1409-1409", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadElement(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_525 [label="throw new JsonSerializationException(''XmlNodeConverter cannot convert JSON with an empty property name to XML.'');", span="1350-1350", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadElement(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_536 [label=attributeNameValues, span="1376-1376", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadElement(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_531 [label="string attributePrefix = MiscellaneousUtils.GetPrefix(attributeName)", span="1361-1361", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadElement(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_539 [label="element.SetAttributeNode(attribute)", span="1384-1384", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadElement(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_537 [label="string attributePrefix = MiscellaneousUtils.GetPrefix(nameValue.Key)", span="1378-1378", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadElement(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_548 [label="Exit Newtonsoft.Json.Converters.XmlNodeConverter.ReadElement(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string, XmlNamespaceManager)", span="1347-1347", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadElement(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_51 [label="MemoryStream ms = new MemoryStream()", span="95-95", cluster="Newtonsoft.Json.Tests.Converters.RegexConverterTests.ConvertEmptyRegexBson()", file="DefaultValueHandlingTests.cs"];
m0_117 [label="Entry Newtonsoft.Json.Converters.IXmlDocument.CreateAttribute(string, string, string)", span="343-343", cluster="Newtonsoft.Json.Converters.IXmlDocument.CreateAttribute(string, string, string)", file="DefaultValueHandlingTests.cs"];
m0_118 [label="Exit Newtonsoft.Json.Converters.IXmlDocument.CreateAttribute(string, string, string)", span="343-343", cluster="Newtonsoft.Json.Converters.IXmlDocument.CreateAttribute(string, string, string)", file="DefaultValueHandlingTests.cs"];
m0_159 [label="Entry XDocumentType.cstr", span="", cluster="XDocumentType.cstr", file="DefaultValueHandlingTests.cs"];
m0_179 [label="Entry Newtonsoft.Json.Converters.XAttributeWrapper.XAttributeWrapper(XAttribute)", span="784-784", cluster="Newtonsoft.Json.Converters.XAttributeWrapper.XAttributeWrapper(XAttribute)", file="DefaultValueHandlingTests.cs"];
m0_231 [label="Exit Newtonsoft.Json.Converters.XAttributeWrapper.XAttributeWrapper(XAttribute)", span="784-784", cluster="Newtonsoft.Json.Converters.XAttributeWrapper.XAttributeWrapper(XAttribute)", file="DefaultValueHandlingTests.cs"];
m0_322 [label="Entry JsonSerializationException.cstr", span="", cluster="JsonSerializationException.cstr", file="DefaultValueHandlingTests.cs"];
m0_21 [label="return new XmlNodeWrapper(_document.CreateSignificantWhitespace(text));", span="79-79", cluster="Newtonsoft.Json.Converters.XmlDocumentWrapper.CreateSignificantWhitespace(string)", file="DefaultValueHandlingTests.cs"];
m0_149 [label="Entry Newtonsoft.Json.Converters.XDocumentWrapper.CreateSignificantWhitespace(string)", span="500-500", cluster="Newtonsoft.Json.Converters.XDocumentWrapper.CreateSignificantWhitespace(string)", file="DefaultValueHandlingTests.cs"];
m0_150 [label="return new XObjectWrapper(new XText(text));", span="502-502", cluster="Newtonsoft.Json.Converters.XDocumentWrapper.CreateSignificantWhitespace(string)", file="DefaultValueHandlingTests.cs"];
m0_151 [label="Exit Newtonsoft.Json.Converters.XDocumentWrapper.CreateSignificantWhitespace(string)", span="500-500", cluster="Newtonsoft.Json.Converters.XDocumentWrapper.CreateSignificantWhitespace(string)", file="DefaultValueHandlingTests.cs"];
m0_57 [label="BsonReader reader = new BsonReader(ms)", span="103-103", cluster="Newtonsoft.Json.Tests.Converters.RegexConverterTests.ConvertEmptyRegexBson()", file="DefaultValueHandlingTests.cs"];
m0_58 [label="serializer.Converters.Add(new RegexConverter())", span="104-104", cluster="Newtonsoft.Json.Tests.Converters.RegexConverterTests.ConvertEmptyRegexBson()", file="DefaultValueHandlingTests.cs"];
m0_59 [label="RegexTestClass c = serializer.Deserialize<RegexTestClass>(reader)", span="106-106", cluster="Newtonsoft.Json.Tests.Converters.RegexConverterTests.ConvertEmptyRegexBson()", file="DefaultValueHandlingTests.cs"];
m0_332 [label="Entry Newtonsoft.Json.Converters.XmlNodeConverter.SerializeGroupedNodes(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", span="1023-1023", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeGroupedNodes(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_333 [label="Dictionary<string, List<IXmlNode>> nodesGroupedByName = new Dictionary<string, List<IXmlNode>>()", span="1026-1026", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeGroupedNodes(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_335 [label="i < node.ChildNodes.Count", span="1028-1028", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeGroupedNodes(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_336 [label="IXmlNode childNode = node.ChildNodes[i]", span="1030-1030", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeGroupedNodes(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_337 [label="string nodeName = GetPropertyName(childNode, manager)", span="1031-1031", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeGroupedNodes(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_351 [label="SerializeNode(writer, groupedNodes[0], manager, writePropertyName)", span="1061-1061", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeGroupedNodes(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_353 [label=writePropertyName, span="1067-1067", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeGroupedNodes(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_354 [label="writer.WritePropertyName(elementNames)", span="1068-1068", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeGroupedNodes(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_355 [label="writer.WriteStartArray()", span="1070-1070", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeGroupedNodes(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_358 [label="SerializeNode(writer, groupedNodes[i], manager, false)", span="1074-1074", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeGroupedNodes(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_360 [label="writer.WriteEndArray()", span="1077-1077", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeGroupedNodes(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_334 [label="int i = 0", span="1028-1028", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeGroupedNodes(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_339 [label="!nodesGroupedByName.TryGetValue(nodeName, out nodes)", span="1034-1034", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeGroupedNodes(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_341 [label="nodesGroupedByName.Add(nodeName, nodes)", span="1037-1037", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeGroupedNodes(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_344 [label=nodesGroupedByName, span="1045-1045", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeGroupedNodes(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_343 [label="i++", span="1028-1028", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeGroupedNodes(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_342 [label="nodes.Add(childNode)", span="1040-1040", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeGroupedNodes(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_338 [label="List<IXmlNode> nodes", span="1033-1033", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeGroupedNodes(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_340 [label="nodes = new List<IXmlNode>()", span="1036-1036", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeGroupedNodes(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_345 [label="List<IXmlNode> groupedNodes = nodeNameGroup.Value", span="1047-1047", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeGroupedNodes(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_346 [label="bool writeArray", span="1048-1048", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeGroupedNodes(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_347 [label="groupedNodes.Count == 1", span="1050-1050", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeGroupedNodes(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_348 [label="writeArray = IsArray(groupedNodes[0])", span="1052-1052", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeGroupedNodes(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_352 [label="string elementNames = nodeNameGroup.Key", span="1065-1065", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeGroupedNodes(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_357 [label="i < groupedNodes.Count", span="1072-1072", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeGroupedNodes(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_349 [label="writeArray = true", span="1056-1056", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeGroupedNodes(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_350 [label="!writeArray", span="1059-1059", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeGroupedNodes(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_356 [label="int i = 0", span="1072-1072", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeGroupedNodes(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_359 [label="i++", span="1072-1072", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeGroupedNodes(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_361 [label="Exit Newtonsoft.Json.Converters.XmlNodeConverter.SerializeGroupedNodes(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", span="1023-1023", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeGroupedNodes(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_11 [label="MemoryStream ms = new MemoryStream()", span="50-50", cluster="Newtonsoft.Json.Tests.Converters.RegexConverterTests.SerializeToBson()", file="DefaultValueHandlingTests.cs", color=green, community=0];
m0_83 [label="Regex regex = new Regex('''')", span="144-144", cluster="Newtonsoft.Json.Tests.Converters.RegexConverterTests.ConvertEmptyRegexJson()", file="DefaultValueHandlingTests.cs"];
m0_85 [label="Assert.AreEqual(@''{\r\n  ''''Regex'''': {\r\n    ''''Pattern'''': '''''''',\r\n    ''''Options'''': 0\r\n  }\r\n}'', json)", span="148-153", cluster="Newtonsoft.Json.Tests.Converters.RegexConverterTests.ConvertEmptyRegexJson()", file="DefaultValueHandlingTests.cs"];
m0_86 [label="RegexTestClass newRegex = JsonConvert.DeserializeObject<RegexTestClass>(json, new RegexConverter())", span="155-155", cluster="Newtonsoft.Json.Tests.Converters.RegexConverterTests.ConvertEmptyRegexJson()", file="DefaultValueHandlingTests.cs"];
m0_82 [label="Entry Newtonsoft.Json.Tests.Converters.RegexConverterTests.ConvertEmptyRegexJson()", span="142-142", cluster="Newtonsoft.Json.Tests.Converters.RegexConverterTests.ConvertEmptyRegexJson()", file="DefaultValueHandlingTests.cs"];
m0_84 [label="string json = JsonConvert.SerializeObject(new RegexTestClass { Regex = regex }, Formatting.Indented, new RegexConverter())", span="146-146", cluster="Newtonsoft.Json.Tests.Converters.RegexConverterTests.ConvertEmptyRegexJson()", file="DefaultValueHandlingTests.cs"];
m0_87 [label="Assert.AreEqual('''', newRegex.Regex.ToString())", span="156-156", cluster="Newtonsoft.Json.Tests.Converters.RegexConverterTests.ConvertEmptyRegexJson()", file="DefaultValueHandlingTests.cs"];
m0_552 [label="Entry string.Substring(int)", span="0-0", cluster="string.Substring(int)", file="DefaultValueHandlingTests.cs"];
m0_64 [label="Entry System.IO.MemoryStream.Seek(long, System.IO.SeekOrigin)", span="0-0", cluster="System.IO.MemoryStream.Seek(long, System.IO.SeekOrigin)", file="DefaultValueHandlingTests.cs"];
m0_97 [label="Entry Newtonsoft.Json.Converters.IXmlDocument.CreateTextNode(string)", span="333-333", cluster="Newtonsoft.Json.Converters.IXmlDocument.CreateTextNode(string)", file="DefaultValueHandlingTests.cs"];
m0_98 [label="Exit Newtonsoft.Json.Converters.IXmlDocument.CreateTextNode(string)", span="333-333", cluster="Newtonsoft.Json.Converters.IXmlDocument.CreateTextNode(string)", file="DefaultValueHandlingTests.cs"];
m0_185 [label="Entry Newtonsoft.Json.Converters.XDocumentWrapper.AppendChild(Newtonsoft.Json.Converters.IXmlNode)", span="553-553", cluster="Newtonsoft.Json.Converters.XDocumentWrapper.AppendChild(Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_186 [label="XDeclarationWrapper declarationWrapper = newChild as XDeclarationWrapper", span="555-555", cluster="Newtonsoft.Json.Converters.XDocumentWrapper.AppendChild(Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_190 [label="return base.AppendChild(newChild);", span="563-563", cluster="Newtonsoft.Json.Converters.XDocumentWrapper.AppendChild(Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_187 [label="declarationWrapper != null", span="556-556", cluster="Newtonsoft.Json.Converters.XDocumentWrapper.AppendChild(Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_188 [label="Document.Declaration = declarationWrapper.Declaration", span="558-558", cluster="Newtonsoft.Json.Converters.XDocumentWrapper.AppendChild(Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_189 [label="return declarationWrapper;", span="559-559", cluster="Newtonsoft.Json.Converters.XDocumentWrapper.AppendChild(Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_191 [label="Exit Newtonsoft.Json.Converters.XDocumentWrapper.AppendChild(Newtonsoft.Json.Converters.IXmlNode)", span="553-553", cluster="Newtonsoft.Json.Converters.XDocumentWrapper.AppendChild(Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_584 [label="Entry System.Convert.ToDateTime(object, System.IFormatProvider)", span="0-0", cluster="System.Convert.ToDateTime(object, System.IFormatProvider)", file="DefaultValueHandlingTests.cs"];
m0_747 [label="Entry Unk.Where", span="", cluster="Unk.Where", file="DefaultValueHandlingTests.cs"];
m0_24 [label="Entry Newtonsoft.Json.Tests.Converters.RegexConverterTests.RegexTestClass.RegexTestClass()", span="27-27", cluster="Newtonsoft.Json.Tests.Converters.RegexConverterTests.RegexTestClass.RegexTestClass()", file="DefaultValueHandlingTests.cs"];
m0_25 [label="Entry Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter, object)", span="510-510", cluster="Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter, object)", file="DefaultValueHandlingTests.cs"];
m0_181 [label="Entry Newtonsoft.Json.Converters.XDocumentWrapper.CreateAttribute(string, string, string)", span="536-536", cluster="Newtonsoft.Json.Converters.XDocumentWrapper.CreateAttribute(string, string, string)", file="DefaultValueHandlingTests.cs"];
m0_182 [label="string localName = MiscellaneousUtils.GetLocalName(qualifiedName)", span="538-538", cluster="Newtonsoft.Json.Converters.XDocumentWrapper.CreateAttribute(string, string, string)", file="DefaultValueHandlingTests.cs"];
m0_183 [label="return new XAttributeWrapper(new XAttribute(XName.Get(localName, namespaceUri), value));", span="539-539", cluster="Newtonsoft.Json.Converters.XDocumentWrapper.CreateAttribute(string, string, string)", file="DefaultValueHandlingTests.cs"];
m0_184 [label="Exit Newtonsoft.Json.Converters.XDocumentWrapper.CreateAttribute(string, string, string)", span="536-536", cluster="Newtonsoft.Json.Converters.XDocumentWrapper.CreateAttribute(string, string, string)", file="DefaultValueHandlingTests.cs"];
m0_224 [label="Entry Unk.Add", span="", cluster="Unk.Add", file="DefaultValueHandlingTests.cs"];
m0_452 [label="Entry Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmpty<T>(System.Collections.Generic.ICollection<T>)", span="50-50", cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmpty<T>(System.Collections.Generic.ICollection<T>)", file="DefaultValueHandlingTests.cs"];
m0_141 [label="Entry XText.cstr", span="", cluster="XText.cstr", file="DefaultValueHandlingTests.cs"];
m0_522 [label="Entry Newtonsoft.Json.Converters.XmlNodeConverter.CreateDocumentType(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode)", span="1640-1640", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateDocumentType(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_677 [label="string name = null", span="1642-1642", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateDocumentType(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_681 [label="reader.Read() && reader.TokenType != JsonToken.EndObject", span="1646-1646", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateDocumentType(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_682 [label="reader.Value.ToString()", span="1648-1648", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateDocumentType(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_684 [label="reader.Read()", span="1651-1651", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateDocumentType(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_685 [label="name = reader.Value.ToString()", span="1652-1652", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateDocumentType(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_687 [label="reader.Read()", span="1655-1655", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateDocumentType(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_688 [label="publicId = reader.Value.ToString()", span="1656-1656", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateDocumentType(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_690 [label="reader.Read()", span="1659-1659", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateDocumentType(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_691 [label="systemId = reader.Value.ToString()", span="1660-1660", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateDocumentType(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_693 [label="reader.Read()", span="1663-1663", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateDocumentType(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_694 [label="internalSubset = reader.Value.ToString()", span="1664-1664", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateDocumentType(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_695 [label="throw new JsonSerializationException(''Unexpected property name encountered while deserializing XmlDeclaration: '' + reader.Value);", span="1667-1667", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateDocumentType(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_696 [label="IXmlNode documentType = document.CreateXmlDocumentType(name, publicId, systemId, internalSubset)", span="1671-1671", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateDocumentType(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_697 [label="currentNode.AppendChild(documentType)", span="1672-1672", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateDocumentType(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_678 [label="string publicId = null", span="1643-1643", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateDocumentType(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_679 [label="string systemId = null", span="1644-1644", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateDocumentType(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_680 [label="string internalSubset = null", span="1645-1645", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateDocumentType(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_683 [label="''@name''", span="1650-1650", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateDocumentType(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_686 [label="''@public''", span="1654-1654", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateDocumentType(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_689 [label="''@system''", span="1658-1658", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateDocumentType(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_692 [label="''@internalSubset''", span="1662-1662", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateDocumentType(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_698 [label="Exit Newtonsoft.Json.Converters.XmlNodeConverter.CreateDocumentType(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode)", span="1640-1640", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateDocumentType(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_551 [label="Entry string.StartsWith(char)", span="200-200", cluster="string.StartsWith(char)", file="DefaultValueHandlingTests.cs"];
m0_581 [label="Entry System.Convert.ToInt64(object, System.IFormatProvider)", span="0-0", cluster="System.Convert.ToInt64(object, System.IFormatProvider)", file="DefaultValueHandlingTests.cs"];
m0_60 [label="Assert.AreEqual('''', c.Regex.ToString())", span="108-108", cluster="Newtonsoft.Json.Tests.Converters.RegexConverterTests.ConvertEmptyRegexBson()", file="DefaultValueHandlingTests.cs"];
m0_61 [label="Assert.AreEqual(RegexOptions.None, c.Regex.Options)", span="109-109", cluster="Newtonsoft.Json.Tests.Converters.RegexConverterTests.ConvertEmptyRegexBson()", file="DefaultValueHandlingTests.cs"];
m0_62 [label="Exit Newtonsoft.Json.Tests.Converters.RegexConverterTests.ConvertEmptyRegexBson()", span="91-91", cluster="Newtonsoft.Json.Tests.Converters.RegexConverterTests.ConvertEmptyRegexBson()", file="DefaultValueHandlingTests.cs"];
m0_63 [label="Entry System.Text.RegularExpressions.Regex.Regex(string)", span="0-0", cluster="System.Text.RegularExpressions.Regex.Regex(string)", file="DefaultValueHandlingTests.cs"];
m0_107 [label="Entry Newtonsoft.Json.Converters.IXmlDocument.CreateXmlDocumentType(string, string, string, string)", span="338-338", cluster="Newtonsoft.Json.Converters.IXmlDocument.CreateXmlDocumentType(string, string, string, string)", file="DefaultValueHandlingTests.cs"];
m0_108 [label="Exit Newtonsoft.Json.Converters.IXmlDocument.CreateXmlDocumentType(string, string, string, string)", span="338-338", cluster="Newtonsoft.Json.Converters.IXmlDocument.CreateXmlDocumentType(string, string, string, string)", file="DefaultValueHandlingTests.cs"];
m0_602 [label="Entry System.Collections.IEnumerable.OfType<TResult>()", span="0-0", cluster="System.Collections.IEnumerable.OfType<TResult>()", file="DefaultValueHandlingTests.cs"];
m0_287 [label="Entry Unk.AddNamespace", span="", cluster="Unk.AddNamespace", file="DefaultValueHandlingTests.cs"];
m0_520 [label="Entry Newtonsoft.Json.Converters.XmlNodeConverter.CreateInstruction(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string)", span="1602-1602", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateInstruction(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string)", file="DefaultValueHandlingTests.cs"];
m0_656 [label="propertyName == DeclarationName", span="1604-1604", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateInstruction(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string)", file="DefaultValueHandlingTests.cs"];
m0_660 [label="reader.Read() && reader.TokenType != JsonToken.EndObject", span="1609-1609", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateInstruction(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string)", file="DefaultValueHandlingTests.cs"];
m0_661 [label="reader.Value.ToString()", span="1611-1611", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateInstruction(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string)", file="DefaultValueHandlingTests.cs"];
m0_663 [label="reader.Read()", span="1614-1614", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateInstruction(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string)", file="DefaultValueHandlingTests.cs"];
m0_664 [label="version = reader.Value.ToString()", span="1615-1615", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateInstruction(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string)", file="DefaultValueHandlingTests.cs"];
m0_666 [label="reader.Read()", span="1618-1618", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateInstruction(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string)", file="DefaultValueHandlingTests.cs"];
m0_667 [label="encoding = reader.Value.ToString()", span="1619-1619", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateInstruction(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string)", file="DefaultValueHandlingTests.cs"];
m0_669 [label="reader.Read()", span="1622-1622", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateInstruction(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string)", file="DefaultValueHandlingTests.cs"];
m0_670 [label="standalone = reader.Value.ToString()", span="1623-1623", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateInstruction(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string)", file="DefaultValueHandlingTests.cs"];
m0_671 [label="throw new JsonSerializationException(''Unexpected property name encountered while deserializing XmlDeclaration: '' + reader.Value);", span="1626-1626", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateInstruction(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string)", file="DefaultValueHandlingTests.cs"];
m0_672 [label="IXmlNode declaration = document.CreateXmlDeclaration(version, encoding, standalone)", span="1630-1630", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateInstruction(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string)", file="DefaultValueHandlingTests.cs"];
m0_673 [label="currentNode.AppendChild(declaration)", span="1631-1631", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateInstruction(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string)", file="DefaultValueHandlingTests.cs"];
m0_674 [label="IXmlNode instruction = document.CreateProcessingInstruction(propertyName.Substring(1), reader.Value.ToString())", span="1635-1635", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateInstruction(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string)", file="DefaultValueHandlingTests.cs"];
m0_675 [label="currentNode.AppendChild(instruction)", span="1636-1636", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateInstruction(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string)", file="DefaultValueHandlingTests.cs"];
m0_657 [label="string version = null", span="1606-1606", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateInstruction(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string)", file="DefaultValueHandlingTests.cs"];
m0_658 [label="string encoding = null", span="1607-1607", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateInstruction(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string)", file="DefaultValueHandlingTests.cs"];
m0_659 [label="string standalone = null", span="1608-1608", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateInstruction(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string)", file="DefaultValueHandlingTests.cs"];
m0_662 [label="''@version''", span="1613-1613", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateInstruction(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string)", file="DefaultValueHandlingTests.cs"];
m0_665 [label="''@encoding''", span="1617-1617", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateInstruction(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string)", file="DefaultValueHandlingTests.cs"];
m0_668 [label="''@standalone''", span="1621-1621", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateInstruction(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string)", file="DefaultValueHandlingTests.cs"];
m0_676 [label="Exit Newtonsoft.Json.Converters.XmlNodeConverter.CreateInstruction(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string)", span="1602-1602", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateInstruction(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, Newtonsoft.Json.Converters.IXmlNode, string)", file="DefaultValueHandlingTests.cs"];
m0_227 [label="Entry Newtonsoft.Json.Converters.XObjectWrapper.AppendChild(Newtonsoft.Json.Converters.IXmlNode)", span="766-766", cluster="Newtonsoft.Json.Converters.XObjectWrapper.AppendChild(Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_228 [label="throw new InvalidOperationException();", span="768-768", cluster="Newtonsoft.Json.Converters.XObjectWrapper.AppendChild(Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_229 [label="Exit Newtonsoft.Json.Converters.XObjectWrapper.AppendChild(Newtonsoft.Json.Converters.IXmlNode)", span="766-766", cluster="Newtonsoft.Json.Converters.XObjectWrapper.AppendChild(Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_8 [label="Entry Unk.AreEqual", span="", cluster="Unk.AreEqual", file="DefaultValueHandlingTests.cs"];
m0_9 [label="Entry Newtonsoft.Json.Tests.Converters.RegexConverterTests.SerializeToBson()", span="46-46", cluster="Newtonsoft.Json.Tests.Converters.RegexConverterTests.SerializeToBson()", file="DefaultValueHandlingTests.cs"];
m0_10 [label="Regex regex = new Regex(''abc'', RegexOptions.IgnoreCase | RegexOptions.CultureInvariant)", span="48-48", cluster="Newtonsoft.Json.Tests.Converters.RegexConverterTests.SerializeToBson()", file="DefaultValueHandlingTests.cs", color=green, community=0];
m0_19 [label="Exit Newtonsoft.Json.Tests.Converters.RegexConverterTests.SerializeToBson()", span="46-46", cluster="Newtonsoft.Json.Tests.Converters.RegexConverterTests.SerializeToBson()", file="DefaultValueHandlingTests.cs"];
m0_15 [label="Entry Unk.CreateCDataSection", span="", cluster="Unk.CreateCDataSection", color=green, community=0, file="DefaultValueHandlingTests.cs"];
m0_12 [label="Entry Newtonsoft.Json.Converters.XmlDocumentWrapper.CreateCDataSection(string)", span="67-67", cluster="Newtonsoft.Json.Converters.XmlDocumentWrapper.CreateCDataSection(string)", color=green, community=0, file="DefaultValueHandlingTests.cs"];
m0_17 [label="return new XmlNodeWrapper(_document.CreateWhitespace(text));", span="74-74", cluster="Newtonsoft.Json.Converters.XmlDocumentWrapper.CreateWhitespace(string)", color=green, community=0, file="DefaultValueHandlingTests.cs"];
m0_13 [label="return new XmlNodeWrapper(_document.CreateCDataSection(data));", span="69-69", cluster="Newtonsoft.Json.Converters.XmlDocumentWrapper.CreateCDataSection(string)", color=green, community=0, file="DefaultValueHandlingTests.cs"];
m0_14 [label="Exit Newtonsoft.Json.Converters.XmlDocumentWrapper.CreateCDataSection(string)", span="67-67", cluster="Newtonsoft.Json.Converters.XmlDocumentWrapper.CreateCDataSection(string)", color=green, community=0, file="DefaultValueHandlingTests.cs"];
m0_16 [label="Entry Newtonsoft.Json.Converters.XmlDocumentWrapper.CreateWhitespace(string)", span="72-72", cluster="Newtonsoft.Json.Converters.XmlDocumentWrapper.CreateWhitespace(string)", color=green, community=0, file="DefaultValueHandlingTests.cs"];
m0_18 [label="Exit Newtonsoft.Json.Converters.XmlDocumentWrapper.CreateWhitespace(string)", span="72-72", cluster="Newtonsoft.Json.Converters.XmlDocumentWrapper.CreateWhitespace(string)", color=green, community=0, file="DefaultValueHandlingTests.cs"];
m0_0 [label="Entry Newtonsoft.Json.Tests.Converters.RegexConverterTests.SerializeToText()", span="33-33", cluster="Newtonsoft.Json.Tests.Converters.RegexConverterTests.SerializeToText()", file="DefaultValueHandlingTests.cs"];
m0_1 [label="Regex regex = new Regex(''abc'', RegexOptions.IgnoreCase | RegexOptions.CultureInvariant)", span="35-35", cluster="Newtonsoft.Json.Tests.Converters.RegexConverterTests.SerializeToText()", file="DefaultValueHandlingTests.cs"];
m0_2 [label="string json = JsonConvert.SerializeObject(regex, Formatting.Indented, new RegexConverter())", span="37-37", cluster="Newtonsoft.Json.Tests.Converters.RegexConverterTests.SerializeToText()", file="DefaultValueHandlingTests.cs"];
m0_550 [label="Entry Newtonsoft.Json.Utilities.MiscellaneousUtils.GetPrefix(string)", span="94-94", cluster="Newtonsoft.Json.Utilities.MiscellaneousUtils.GetPrefix(string)", file="DefaultValueHandlingTests.cs"];
m0_28 [label="Entry Newtonsoft.Json.Tests.Converters.RegexConverterTests.DeserializeFromText()", span="64-64", cluster="Newtonsoft.Json.Tests.Converters.RegexConverterTests.DeserializeFromText()", file="DefaultValueHandlingTests.cs"];
m0_582 [label="Entry System.Convert.ToDouble(object, System.IFormatProvider)", span="0-0", cluster="System.Convert.ToDouble(object, System.IFormatProvider)", file="DefaultValueHandlingTests.cs"];
m0_113 [label="Entry Newtonsoft.Json.Converters.IXmlDocument.CreateElement(string, string)", span="341-341", cluster="Newtonsoft.Json.Converters.IXmlDocument.CreateElement(string, string)", file="DefaultValueHandlingTests.cs"];
m0_114 [label="Exit Newtonsoft.Json.Converters.IXmlDocument.CreateElement(string, string)", span="341-341", cluster="Newtonsoft.Json.Converters.IXmlDocument.CreateElement(string, string)", file="DefaultValueHandlingTests.cs"];
m0_145 [label="Entry XCData.cstr", span="", cluster="XCData.cstr", file="DefaultValueHandlingTests.cs"];
m0_364 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", file="DefaultValueHandlingTests.cs"];
m0_152 [label="Entry Newtonsoft.Json.Converters.XDocumentWrapper.CreateXmlDeclaration(string, string, string)", span="505-505", cluster="Newtonsoft.Json.Converters.XDocumentWrapper.CreateXmlDeclaration(string, string, string)", file="DefaultValueHandlingTests.cs"];
m0_153 [label="return new XDeclarationWrapper(new XDeclaration(version, encoding, standalone));", span="507-507", cluster="Newtonsoft.Json.Converters.XDocumentWrapper.CreateXmlDeclaration(string, string, string)", file="DefaultValueHandlingTests.cs"];
m0_154 [label="Exit Newtonsoft.Json.Converters.XDocumentWrapper.CreateXmlDeclaration(string, string, string)", span="505-505", cluster="Newtonsoft.Json.Converters.XDocumentWrapper.CreateXmlDeclaration(string, string, string)", file="DefaultValueHandlingTests.cs"];
m0_744 [label="Entry string.Substring(int, int)", span="0-0", cluster="string.Substring(int, int)", file="DefaultValueHandlingTests.cs"];
m0_3 [label="Assert.AreEqual(@''{\r\n  ''''Pattern'''': ''''abc'''',\r\n  ''''Options'''': 513\r\n}'', json)", span="39-42", cluster="Newtonsoft.Json.Tests.Converters.RegexConverterTests.SerializeToText()", file="DefaultValueHandlingTests.cs"];
m0_4 [label="Exit Newtonsoft.Json.Tests.Converters.RegexConverterTests.SerializeToText()", span="33-33", cluster="Newtonsoft.Json.Tests.Converters.RegexConverterTests.SerializeToText()", file="DefaultValueHandlingTests.cs"];
m0_5 [label="Entry System.Text.RegularExpressions.Regex.Regex(string, System.Text.RegularExpressions.RegexOptions)", span="0-0", cluster="System.Text.RegularExpressions.Regex.Regex(string, System.Text.RegularExpressions.RegexOptions)", file="DefaultValueHandlingTests.cs"];
m0_493 [label="Entry Newtonsoft.Json.JsonSerializationException.JsonSerializationException(string)", span="52-52", cluster="Newtonsoft.Json.JsonSerializationException.JsonSerializationException(string)", file="DefaultValueHandlingTests.cs"];
m0_20 [label="Entry System.IO.MemoryStream.MemoryStream()", span="0-0", cluster="System.IO.MemoryStream.MemoryStream()", file="DefaultValueHandlingTests.cs"];
m0_22 [label="Entry Newtonsoft.Json.JsonSerializer.JsonSerializer()", span="327-327", cluster="Newtonsoft.Json.JsonSerializer.JsonSerializer()", file="DefaultValueHandlingTests.cs"];
m0_6 [label="Entry Newtonsoft.Json.Converters.RegexConverter.RegexConverter()", span="10-10", cluster="Newtonsoft.Json.Converters.RegexConverter.RegexConverter()", file="DefaultValueHandlingTests.cs"];
m0_500 [label="Entry Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeValue(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, string, Newtonsoft.Json.Converters.IXmlNode)", span="1304-1304", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeValue(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, string, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_501 [label=propertyName, span="1306-1306", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeValue(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, string, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_503 [label="currentNode.AppendChild(document.CreateTextNode(reader.Value.ToString()))", span="1309-1309", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeValue(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, string, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_505 [label="currentNode.AppendChild(document.CreateCDataSection(reader.Value.ToString()))", span="1312-1312", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeValue(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, string, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_507 [label="currentNode.AppendChild(document.CreateWhitespace(reader.Value.ToString()))", span="1315-1315", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeValue(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, string, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_509 [label="currentNode.AppendChild(document.CreateSignificantWhitespace(reader.Value.ToString()))", span="1318-1318", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeValue(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, string, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_510 [label="!string.IsNullOrEmpty(propertyName) && propertyName[0] == '?'", span="1322-1322", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeValue(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, string, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_511 [label="CreateInstruction(reader, document, currentNode, propertyName)", span="1324-1324", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeValue(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, string, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_512 [label="string.Equals(propertyName, ''!DOCTYPE'', StringComparison.OrdinalIgnoreCase)", span="1326-1326", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeValue(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, string, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_513 [label="CreateDocumentType(reader, document, currentNode)", span="1328-1328", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeValue(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, string, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_514 [label="reader.TokenType == JsonToken.StartArray", span="1332-1332", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeValue(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, string, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_515 [label="ReadArrayElements(reader, document, propertyName, currentNode, manager)", span="1335-1335", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeValue(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, string, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_517 [label="ReadElement(reader, document, currentNode, propertyName, manager)", span="1341-1341", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeValue(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, string, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_502 [label=TextName, span="1308-1308", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeValue(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, string, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_504 [label=CDataName, span="1311-1311", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeValue(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, string, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_506 [label=WhitespaceName, span="1314-1314", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeValue(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, string, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_508 [label=SignificantWhitespaceName, span="1317-1317", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeValue(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, string, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_516 [label="return;", span="1336-1336", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeValue(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, string, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_518 [label="Exit Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeValue(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, string, Newtonsoft.Json.Converters.IXmlNode)", span="1304-1304", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeValue(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, string, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_583 [label="Entry System.Convert.ToBoolean(object, System.IFormatProvider)", span="0-0", cluster="System.Convert.ToBoolean(object, System.IFormatProvider)", file="DefaultValueHandlingTests.cs"];
m0_195 [label="Entry Newtonsoft.Json.Converters.XCommentWrapper.XCommentWrapper(XComment)", span="605-605", cluster="Newtonsoft.Json.Converters.XCommentWrapper.XCommentWrapper(XComment)", file="DefaultValueHandlingTests.cs"];
m0_196 [label="Exit Newtonsoft.Json.Converters.XCommentWrapper.XCommentWrapper(XComment)", span="605-605", cluster="Newtonsoft.Json.Converters.XCommentWrapper.XCommentWrapper(XComment)", file="DefaultValueHandlingTests.cs"];
m0_88 [label="Entry Newtonsoft.Json.Converters.XmlNodeWrapper.AppendChild(Newtonsoft.Json.Converters.IXmlNode)", span="312-312", cluster="Newtonsoft.Json.Converters.XmlNodeWrapper.AppendChild(Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_89 [label="XmlNodeWrapper xmlNodeWrapper = (XmlNodeWrapper) newChild", span="314-314", cluster="Newtonsoft.Json.Converters.XmlNodeWrapper.AppendChild(Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_328 [label="Entry Unk.ToBoolean", span="", cluster="Unk.ToBoolean", file="DefaultValueHandlingTests.cs"];
m0_94 [label="Entry Unk.AppendChild", span="", cluster="Unk.AppendChild", file="DefaultValueHandlingTests.cs"];
m0_585 [label="Entry Newtonsoft.Json.Utilities.DateTimeUtils.ToSerializationMode(System.DateTimeKind)", span="60-60", cluster="Newtonsoft.Json.Utilities.DateTimeUtils.ToSerializationMode(System.DateTimeKind)", file="DefaultValueHandlingTests.cs"];
m0_37 [label="Entry Unk.CreateProcessingInstruction", span="", cluster="Unk.CreateProcessingInstruction", color=green, community=0, file="DefaultValueHandlingTests.cs"];
m0_38 [label="Entry Newtonsoft.Json.Converters.XmlDocumentWrapper.CreateElement(string)", span="97-97", cluster="Newtonsoft.Json.Converters.XmlDocumentWrapper.CreateElement(string)", color=green, community=0, file="DefaultValueHandlingTests.cs"];
m0_39 [label="return new XmlElementWrapper(_document.CreateElement(elementName));", span="99-99", cluster="Newtonsoft.Json.Converters.XmlDocumentWrapper.CreateElement(string)", color=green, community=0, file="DefaultValueHandlingTests.cs"];
m0_41 [label="Entry XmlElementWrapper.cstr", span="", cluster="XmlElementWrapper.cstr", color=green, community=0, file="DefaultValueHandlingTests.cs"];
m0_40 [label="Exit Newtonsoft.Json.Converters.XmlDocumentWrapper.CreateElement(string)", span="97-97", cluster="Newtonsoft.Json.Converters.XmlDocumentWrapper.CreateElement(string)", color=green, community=0, file="DefaultValueHandlingTests.cs"];
m0_42 [label="Entry Unk.CreateElement", span="", cluster="Unk.CreateElement", color=green, community=0, file="DefaultValueHandlingTests.cs"];
m0_43 [label="Entry Newtonsoft.Json.Converters.XmlDocumentWrapper.CreateElement(string, string)", span="102-102", cluster="Newtonsoft.Json.Converters.XmlDocumentWrapper.CreateElement(string, string)", color=green, community=0, file="DefaultValueHandlingTests.cs"];
m0_44 [label="return new XmlElementWrapper(_document.CreateElement(qualifiedName, namespaceUri));", span="104-104", cluster="Newtonsoft.Json.Converters.XmlDocumentWrapper.CreateElement(string, string)", file="DefaultValueHandlingTests.cs"];
m0_48 [label="attribute.Value = value", span="110-110", cluster="Newtonsoft.Json.Converters.XmlDocumentWrapper.CreateAttribute(string, string)", file="DefaultValueHandlingTests.cs"];
m0_168 [label="Entry Newtonsoft.Json.Converters.XElementWrapper.XElementWrapper(XElement)", span="824-824", cluster="Newtonsoft.Json.Converters.XElementWrapper.XElementWrapper(XElement)", file="DefaultValueHandlingTests.cs"];
m0_232 [label="Exit Newtonsoft.Json.Converters.XElementWrapper.XElementWrapper(XElement)", span="824-824", cluster="Newtonsoft.Json.Converters.XElementWrapper.XElementWrapper(XElement)", file="DefaultValueHandlingTests.cs"];
m0_288 [label="Entry Newtonsoft.Json.Converters.XmlNodeConverter.ResolveFullName(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", span="970-970", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ResolveFullName(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_289 [label="string prefix = (node.NamespaceUri == null || (node.LocalName == ''xmlns'' && node.NamespaceUri == ''http://www.w3.org/2000/xmlns/''))\r\n                ? null\r\n                : manager.LookupPrefix(node.NamespaceUri)", span="972-974", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ResolveFullName(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_291 [label="return prefix + '':'' + node.LocalName;", span="977-977", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ResolveFullName(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_292 [label="return node.LocalName;", span="979-979", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ResolveFullName(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_290 [label="!string.IsNullOrEmpty(prefix)", span="976-976", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ResolveFullName(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_293 [label="Exit Newtonsoft.Json.Converters.XmlNodeConverter.ResolveFullName(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", span="970-970", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ResolveFullName(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_267 [label="Entry System.ArgumentException.ArgumentException(string, string)", span="0-0", cluster="System.ArgumentException.ArgumentException(string, string)", file="DefaultValueHandlingTests.cs"];
m0_128 [label="Entry Newtonsoft.Json.Converters.XDocumentTypeWrapper.XDocumentTypeWrapper(XDocumentType)", span="423-423", cluster="Newtonsoft.Json.Converters.XDocumentTypeWrapper.XDocumentTypeWrapper(XDocumentType)", file="DefaultValueHandlingTests.cs"];
m0_129 [label="_documentType = documentType", span="426-426", cluster="Newtonsoft.Json.Converters.XDocumentTypeWrapper.XDocumentTypeWrapper(XDocumentType)", file="DefaultValueHandlingTests.cs"];
m0_130 [label="Exit Newtonsoft.Json.Converters.XDocumentTypeWrapper.XDocumentTypeWrapper(XDocumentType)", span="423-423", cluster="Newtonsoft.Json.Converters.XDocumentTypeWrapper.XDocumentTypeWrapper(XDocumentType)", file="DefaultValueHandlingTests.cs"];
m0_453 [label="Entry Newtonsoft.Json.JsonWriter.WriteNull()", span="781-781", cluster="Newtonsoft.Json.JsonWriter.WriteNull()", file="DefaultValueHandlingTests.cs"];
m0_241 [label="Entry Newtonsoft.Json.Converters.XElementWrapper.GetPrefixOfNamespace(string)", span="856-856", cluster="Newtonsoft.Json.Converters.XElementWrapper.GetPrefixOfNamespace(string)", file="DefaultValueHandlingTests.cs"];
m0_242 [label="return Element.GetPrefixOfNamespace(namespaceUri);", span="858-858", cluster="Newtonsoft.Json.Converters.XElementWrapper.GetPrefixOfNamespace(string)", file="DefaultValueHandlingTests.cs"];
m0_243 [label="Exit Newtonsoft.Json.Converters.XElementWrapper.GetPrefixOfNamespace(string)", span="856-856", cluster="Newtonsoft.Json.Converters.XElementWrapper.GetPrefixOfNamespace(string)", file="DefaultValueHandlingTests.cs"];
m0_449 [label="Entry Newtonsoft.Json.Converters.XmlNodeConverter.ValueAttributes(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Converters.IXmlNode>)", span="1763-1763", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ValueAttributes(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Converters.IXmlNode>)", file="DefaultValueHandlingTests.cs"];
m0_745 [label="return c.Where(a => a.NamespaceUri != JsonNamespaceUri);", span="1765-1765", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ValueAttributes(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Converters.IXmlNode>)", file="DefaultValueHandlingTests.cs"];
m0_746 [label="Exit Newtonsoft.Json.Converters.XmlNodeConverter.ValueAttributes(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Converters.IXmlNode>)", span="1763-1763", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ValueAttributes(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Converters.IXmlNode>)", file="DefaultValueHandlingTests.cs"];
m0_49 [label="return attribute;", span="112-112", cluster="Newtonsoft.Json.Converters.XmlDocumentWrapper.CreateAttribute(string, string)", file="DefaultValueHandlingTests.cs"];
m0_55 [label="return attribute;", span="120-120", cluster="Newtonsoft.Json.Converters.XmlDocumentWrapper.CreateAttribute(string, string, string)", file="DefaultValueHandlingTests.cs"];
m0_52 [label="Entry Newtonsoft.Json.Converters.XmlDocumentWrapper.CreateAttribute(string, string, string)", span="115-115", cluster="Newtonsoft.Json.Converters.XmlDocumentWrapper.CreateAttribute(string, string, string)", file="DefaultValueHandlingTests.cs"];
m0_53 [label="XmlNodeWrapper attribute = new XmlNodeWrapper(_document.CreateAttribute(qualifiedName, namespaceUri))", span="117-117", cluster="Newtonsoft.Json.Converters.XmlDocumentWrapper.CreateAttribute(string, string, string)", file="DefaultValueHandlingTests.cs"];
m0_54 [label="attribute.Value = value", span="118-118", cluster="Newtonsoft.Json.Converters.XmlDocumentWrapper.CreateAttribute(string, string, string)", file="DefaultValueHandlingTests.cs"];
m0_50 [label="Exit Newtonsoft.Json.Converters.XmlDocumentWrapper.CreateAttribute(string, string)", span="107-107", cluster="Newtonsoft.Json.Converters.XmlDocumentWrapper.CreateAttribute(string, string)", file="DefaultValueHandlingTests.cs"];
m0_56 [label="Exit Newtonsoft.Json.Converters.XmlDocumentWrapper.CreateAttribute(string, string, string)", span="115-115", cluster="Newtonsoft.Json.Converters.XmlDocumentWrapper.CreateAttribute(string, string, string)", file="DefaultValueHandlingTests.cs"];
m0_285 [label="Entry System.Collections.Generic.List<T>.Reverse()", span="0-0", cluster="System.Collections.Generic.List<T>.Reverse()", file="DefaultValueHandlingTests.cs"];
m0_103 [label="Entry Newtonsoft.Json.Converters.IXmlDocument.CreateSignificantWhitespace(string)", span="336-336", cluster="Newtonsoft.Json.Converters.IXmlDocument.CreateSignificantWhitespace(string)", file="DefaultValueHandlingTests.cs"];
m0_104 [label="Exit Newtonsoft.Json.Converters.IXmlDocument.CreateSignificantWhitespace(string)", span="336-336", cluster="Newtonsoft.Json.Converters.IXmlDocument.CreateSignificantWhitespace(string)", file="DefaultValueHandlingTests.cs"];
m0_587 [label="Entry Newtonsoft.Json.JsonSerializationException.Create(Newtonsoft.Json.JsonReader, string)", span="82-82", cluster="Newtonsoft.Json.JsonSerializationException.Create(Newtonsoft.Json.JsonReader, string)", file="DefaultValueHandlingTests.cs"];
m0_192 [label="Entry Newtonsoft.Json.Converters.XContainerWrapper.AppendChild(Newtonsoft.Json.Converters.IXmlNode)", span="712-712", cluster="Newtonsoft.Json.Converters.XContainerWrapper.AppendChild(Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_220 [label="Container.Add(newChild.WrappedNode)", span="714-714", cluster="Newtonsoft.Json.Converters.XContainerWrapper.AppendChild(Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_222 [label="return newChild;", span="717-717", cluster="Newtonsoft.Json.Converters.XContainerWrapper.AppendChild(Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_221 [label="_childNodes = null", span="715-715", cluster="Newtonsoft.Json.Converters.XContainerWrapper.AppendChild(Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_223 [label="Exit Newtonsoft.Json.Converters.XContainerWrapper.AppendChild(Newtonsoft.Json.Converters.IXmlNode)", span="712-712", cluster="Newtonsoft.Json.Converters.XContainerWrapper.AppendChild(Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_586 [label="Entry string.FormatWith(System.IFormatProvider, object)", span="47-47", cluster="string.FormatWith(System.IFormatProvider, object)", file="DefaultValueHandlingTests.cs"];
m0_323 [label="Entry Newtonsoft.Json.Converters.XmlNodeConverter.IsArray(Newtonsoft.Json.Converters.IXmlNode)", span="1014-1014", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.IsArray(Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_324 [label="IXmlNode jsonArrayAttribute = (node.Attributes != null)\r\n                ? node.Attributes.SingleOrDefault(a => a.LocalName == ''Array'' && a.NamespaceUri == JsonNamespaceUri)\r\n                : null", span="1016-1018", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.IsArray(Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_325 [label="return (jsonArrayAttribute != null && XmlConvert.ToBoolean(jsonArrayAttribute.Value));", span="1020-1020", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.IsArray(Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_326 [label="Exit Newtonsoft.Json.Converters.XmlNodeConverter.IsArray(Newtonsoft.Json.Converters.IXmlNode)", span="1014-1014", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.IsArray(Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_160 [label="Entry Newtonsoft.Json.Converters.XDocumentWrapper.CreateProcessingInstruction(string, string)", span="515-515", cluster="Newtonsoft.Json.Converters.XDocumentWrapper.CreateProcessingInstruction(string, string)", file="DefaultValueHandlingTests.cs"];
m0_161 [label="return new XProcessingInstructionWrapper(new XProcessingInstruction(target, data));", span="517-517", cluster="Newtonsoft.Json.Converters.XDocumentWrapper.CreateProcessingInstruction(string, string)", file="DefaultValueHandlingTests.cs"];
m0_162 [label="Exit Newtonsoft.Json.Converters.XDocumentWrapper.CreateProcessingInstruction(string, string)", span="515-515", cluster="Newtonsoft.Json.Converters.XDocumentWrapper.CreateProcessingInstruction(string, string)", file="DefaultValueHandlingTests.cs"];
m0_23 [label="Entry System.Collections.ObjectModel.Collection<T>.Add(T)", span="0-0", cluster="System.Collections.ObjectModel.Collection<T>.Add(T)", file="DefaultValueHandlingTests.cs"];
m0_296 [label="Entry Newtonsoft.Json.Converters.XmlNodeConverter.GetPropertyName(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", span="982-982", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.GetPropertyName(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_297 [label="node.NodeType", span="984-984", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.GetPropertyName(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_299 [label="node.NamespaceUri == JsonNamespaceUri", span="987-987", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.GetPropertyName(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_300 [label="return ''$'' + node.LocalName;", span="988-988", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.GetPropertyName(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_301 [label="return ''@'' + ResolveFullName(node, manager);", span="990-990", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.GetPropertyName(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_307 [label="return ResolveFullName(node, manager);", span="996-996", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.GetPropertyName(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_309 [label="return ''?'' + ResolveFullName(node, manager);", span="998-998", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.GetPropertyName(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_311 [label="return ''!'' + ResolveFullName(node, manager);", span="1000-1000", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.GetPropertyName(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_320 [label="throw new JsonSerializationException(''Unexpected XmlNodeType when getting node name: '' + node.NodeType);", span="1010-1010", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.GetPropertyName(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_298 [label="XmlNodeType.Attribute", span="986-986", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.GetPropertyName(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_302 [label="XmlNodeType.CDATA", span="991-991", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.GetPropertyName(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_304 [label="XmlNodeType.Comment", span="993-993", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.GetPropertyName(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_306 [label="XmlNodeType.Element", span="995-995", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.GetPropertyName(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_308 [label="XmlNodeType.ProcessingInstruction", span="997-997", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.GetPropertyName(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_310 [label="XmlNodeType.DocumentType", span="999-999", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.GetPropertyName(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_312 [label="XmlNodeType.XmlDeclaration", span="1001-1001", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.GetPropertyName(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_314 [label="XmlNodeType.SignificantWhitespace", span="1003-1003", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.GetPropertyName(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_316 [label="XmlNodeType.Text", span="1005-1005", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.GetPropertyName(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_318 [label="XmlNodeType.Whitespace", span="1007-1007", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.GetPropertyName(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_303 [label="return CDataName;", span="992-992", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.GetPropertyName(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_305 [label="return CommentName;", span="994-994", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.GetPropertyName(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_313 [label="return DeclarationName;", span="1002-1002", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.GetPropertyName(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_315 [label="return SignificantWhitespaceName;", span="1004-1004", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.GetPropertyName(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_317 [label="return TextName;", span="1006-1006", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.GetPropertyName(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_319 [label="return WhitespaceName;", span="1008-1008", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.GetPropertyName(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_321 [label="Exit Newtonsoft.Json.Converters.XmlNodeConverter.GetPropertyName(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", span="982-982", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.GetPropertyName(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_497 [label="Entry Newtonsoft.Json.JsonReader.Read()", span="365-365", cluster="Newtonsoft.Json.JsonReader.Read()", file="DefaultValueHandlingTests.cs"];
m0_165 [label="Entry Newtonsoft.Json.Converters.XDocumentWrapper.CreateElement(string)", span="520-520", cluster="Newtonsoft.Json.Converters.XDocumentWrapper.CreateElement(string)", file="DefaultValueHandlingTests.cs"];
m0_166 [label="return new XElementWrapper(new XElement(elementName));", span="522-522", cluster="Newtonsoft.Json.Converters.XDocumentWrapper.CreateElement(string)", file="DefaultValueHandlingTests.cs"];
m0_167 [label="Exit Newtonsoft.Json.Converters.XDocumentWrapper.CreateElement(string)", span="520-520", cluster="Newtonsoft.Json.Converters.XDocumentWrapper.CreateElement(string)", file="DefaultValueHandlingTests.cs"];
m0_164 [label="Entry XProcessingInstruction.cstr", span="", cluster="XProcessingInstruction.cstr", file="DefaultValueHandlingTests.cs"];
m0_459 [label="Entry Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", span="1238-1238", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs"];
m0_460 [label="reader.TokenType == JsonToken.Null", span="1240-1240", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs"];
m0_465 [label="typeof(XObject).IsAssignableFrom(objectType)", span="1248-1248", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs"];
m0_466 [label="objectType != typeof(XDocument) && objectType != typeof(XElement)", span="1250-1250", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs"];
m0_471 [label="typeof(XmlNode).IsAssignableFrom(objectType)", span="1259-1259", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs"];
m0_472 [label="objectType != typeof(XmlDocument)", span="1261-1261", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs"];
m0_479 [label="throw new JsonSerializationException(''Unexpected type when converting XML: '' + objectType);", span="1274-1274", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs"];
m0_480 [label="reader.TokenType != JsonToken.StartObject", span="1276-1276", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs"];
m0_483 [label="ReadElement(reader, document, rootNode, DeserializeRootElementName, manager)", span="1283-1283", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs"];
m0_484 [label="reader.Read()", span="1287-1287", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs"];
m0_485 [label="DeserializeNode(reader, document, manager, rootNode)", span="1288-1288", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs"];
m0_486 [label="objectType == typeof(XElement)", span="1292-1292", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs"];
m0_461 [label="return null;", span="1241-1241", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs"];
m0_462 [label="XmlNamespaceManager manager = new XmlNamespaceManager(new NameTable())", span="1243-1243", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs"];
m0_463 [label="IXmlDocument document = null", span="1244-1244", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs"];
m0_464 [label="IXmlNode rootNode = null", span="1245-1245", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs"];
m0_478 [label="document == null || rootNode == null", span="1273-1273", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs"];
m0_487 [label="XElement element = (XElement)document.DocumentElement.WrappedNode", span="1294-1294", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs"];
m0_490 [label="return document.WrappedNode;", span="1301-1301", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs"];
m0_467 [label="throw new JsonSerializationException(''XmlNodeConverter only supports deserializing XDocument or XElement.'');", span="1251-1251", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs"];
m0_468 [label="XDocument d = new XDocument()", span="1253-1253", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs"];
m0_469 [label="document = new XDocumentWrapper(d)", span="1254-1254", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs"];
m0_470 [label="rootNode = document", span="1255-1255", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs"];
m0_473 [label="throw new JsonSerializationException(''XmlNodeConverter only supports deserializing XmlDocuments'');", span="1262-1262", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs"];
m0_474 [label="XmlDocument d = new XmlDocument()", span="1264-1264", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs"];
m0_475 [label="d.XmlResolver = null", span="1266-1266", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs"];
m0_476 [label="document = new XmlDocumentWrapper(d)", span="1268-1268", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs"];
m0_477 [label="rootNode = document", span="1269-1269", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs"];
m0_481 [label="throw new JsonSerializationException(''XmlNodeConverter can only convert JSON that begins with an object.'');", span="1277-1277", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs"];
m0_482 [label="!string.IsNullOrEmpty(DeserializeRootElementName)", span="1279-1279", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs"];
m0_488 [label="element.Remove()", span="1295-1295", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs"];
m0_489 [label="return element;", span="1297-1297", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs"];
m0_491 [label="Exit Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", span="1238-1238", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs"];
m0_556 [label="Entry Unk.RemoveNamespace", span="", cluster="Unk.RemoveNamespace", file="DefaultValueHandlingTests.cs"];
m0_142 [label="Entry Newtonsoft.Json.Converters.XDocumentWrapper.CreateCDataSection(string)", span="490-490", cluster="Newtonsoft.Json.Converters.XDocumentWrapper.CreateCDataSection(string)", file="DefaultValueHandlingTests.cs"];
m0_143 [label="return new XObjectWrapper(new XCData(data));", span="492-492", cluster="Newtonsoft.Json.Converters.XDocumentWrapper.CreateCDataSection(string)", file="DefaultValueHandlingTests.cs"];
m0_144 [label="Exit Newtonsoft.Json.Converters.XDocumentWrapper.CreateCDataSection(string)", span="490-490", cluster="Newtonsoft.Json.Converters.XDocumentWrapper.CreateCDataSection(string)", file="DefaultValueHandlingTests.cs"];
m0_454 [label="Entry Unk.PopScope", span="", cluster="Unk.PopScope", file="DefaultValueHandlingTests.cs"];
m0_255 [label="Entry XmlNamespaceManager.cstr", span="", cluster="XmlNamespaceManager.cstr", file="DefaultValueHandlingTests.cs"];
m0_284 [label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.List<T>.Add(T)", file="DefaultValueHandlingTests.cs"];
m0_455 [label="Entry Newtonsoft.Json.JsonWriter.WriteComment(string)", span="1246-1246", cluster="Newtonsoft.Json.JsonWriter.WriteComment(string)", file="DefaultValueHandlingTests.cs"];
m0_176 [label="Entry Newtonsoft.Json.Converters.XDocumentWrapper.CreateAttribute(string, string)", span="531-531", cluster="Newtonsoft.Json.Converters.XDocumentWrapper.CreateAttribute(string, string)", file="DefaultValueHandlingTests.cs"];
m0_177 [label="return new XAttributeWrapper(new XAttribute(name, value));", span="533-533", cluster="Newtonsoft.Json.Converters.XDocumentWrapper.CreateAttribute(string, string)", file="DefaultValueHandlingTests.cs"];
m0_178 [label="Exit Newtonsoft.Json.Converters.XDocumentWrapper.CreateAttribute(string, string)", span="531-531", cluster="Newtonsoft.Json.Converters.XDocumentWrapper.CreateAttribute(string, string)", file="DefaultValueHandlingTests.cs"];
m0_451 [label="Entry Newtonsoft.Json.JsonWriter.WriteValue(string)", span="819-819", cluster="Newtonsoft.Json.JsonWriter.WriteValue(string)", file="DefaultValueHandlingTests.cs"];
m0_362 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="DefaultValueHandlingTests.cs"];
m0_523 [label="Entry Newtonsoft.Json.Converters.XmlNodeConverter.ReadArrayElements(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, string, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", span="1466-1466", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadArrayElements(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, string, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_588 [label="string elementPrefix = MiscellaneousUtils.GetPrefix(propertyName)", span="1468-1468", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadArrayElements(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, string, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_589 [label="IXmlElement nestedArrayElement = CreateElement(propertyName, document, elementPrefix, manager)", span="1470-1470", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadArrayElements(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, string, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_590 [label="currentNode.AppendChild(nestedArrayElement)", span="1472-1472", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadArrayElements(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, string, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_592 [label="reader.Read() && reader.TokenType != JsonToken.EndArray", span="1475-1475", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadArrayElements(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, string, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_593 [label="DeserializeValue(reader, document, manager, propertyName, nestedArrayElement)", span="1477-1477", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadArrayElements(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, string, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_596 [label="AddJsonArrayAttribute(nestedArrayElement, document)", span="1483-1483", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadArrayElements(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, string, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_598 [label="IXmlElement arrayElement = nestedArrayElement.ChildNodes.OfType<IXmlElement>().Single(n => n.LocalName == propertyName)", span="1488-1488", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadArrayElements(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, string, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_599 [label="AddJsonArrayAttribute(arrayElement, document)", span="1489-1489", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadArrayElements(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, string, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_591 [label="int count = 0", span="1474-1474", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadArrayElements(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, string, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_594 [label="count++", span="1478-1478", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadArrayElements(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, string, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_597 [label="count == 1 && WriteArrayAttribute", span="1486-1486", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadArrayElements(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, string, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_595 [label=WriteArrayAttribute, span="1481-1481", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadArrayElements(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, string, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_600 [label="Exit Newtonsoft.Json.Converters.XmlNodeConverter.ReadArrayElements(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, string, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", span="1466-1466", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadArrayElements(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, string, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_125 [label="Entry Newtonsoft.Json.Converters.XDeclarationWrapper.XDeclarationWrapper(XDeclaration)", span="390-390", cluster="Newtonsoft.Json.Converters.XDeclarationWrapper.XDeclarationWrapper(XDeclaration)", file="DefaultValueHandlingTests.cs"];
m0_126 [label="Declaration = declaration", span="393-393", cluster="Newtonsoft.Json.Converters.XDeclarationWrapper.XDeclarationWrapper(XDeclaration)", file="DefaultValueHandlingTests.cs"];
m0_127 [label="Exit Newtonsoft.Json.Converters.XDeclarationWrapper.XDeclarationWrapper(XDeclaration)", span="390-390", cluster="Newtonsoft.Json.Converters.XDeclarationWrapper.XDeclarationWrapper(XDeclaration)", file="DefaultValueHandlingTests.cs"];
m0_365 [label="Entry Newtonsoft.Json.JsonWriter.WritePropertyName(string)", span="407-407", cluster="Newtonsoft.Json.JsonWriter.WritePropertyName(string)", file="DefaultValueHandlingTests.cs"];
m0_119 [label="Entry Newtonsoft.Json.Converters.IXmlElement.SetAttributeNode(Newtonsoft.Json.Converters.IXmlNode)", span="365-365", cluster="Newtonsoft.Json.Converters.IXmlElement.SetAttributeNode(Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_120 [label="Exit Newtonsoft.Json.Converters.IXmlElement.SetAttributeNode(Newtonsoft.Json.Converters.IXmlNode)", span="365-365", cluster="Newtonsoft.Json.Converters.IXmlElement.SetAttributeNode(Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_136 [label="Entry XObjectWrapper.cstr", span="", cluster="XObjectWrapper.cstr", file="DefaultValueHandlingTests.cs"];
m0_163 [label="Entry Newtonsoft.Json.Converters.XProcessingInstructionWrapper.XProcessingInstructionWrapper(XProcessingInstruction)", span="635-635", cluster="Newtonsoft.Json.Converters.XProcessingInstructionWrapper.XProcessingInstructionWrapper(XProcessingInstruction)", file="DefaultValueHandlingTests.cs"];
m0_197 [label="Exit Newtonsoft.Json.Converters.XProcessingInstructionWrapper.XProcessingInstructionWrapper(XProcessingInstruction)", span="635-635", cluster="Newtonsoft.Json.Converters.XProcessingInstructionWrapper.XProcessingInstructionWrapper(XProcessingInstruction)", file="DefaultValueHandlingTests.cs"];
m0_146 [label="Entry Newtonsoft.Json.Converters.XDocumentWrapper.CreateWhitespace(string)", span="495-495", cluster="Newtonsoft.Json.Converters.XDocumentWrapper.CreateWhitespace(string)", file="DefaultValueHandlingTests.cs"];
m0_147 [label="return new XObjectWrapper(new XText(text));", span="497-497", cluster="Newtonsoft.Json.Converters.XDocumentWrapper.CreateWhitespace(string)", file="DefaultValueHandlingTests.cs"];
m0_148 [label="Exit Newtonsoft.Json.Converters.XDocumentWrapper.CreateWhitespace(string)", span="495-495", cluster="Newtonsoft.Json.Converters.XDocumentWrapper.CreateWhitespace(string)", file="DefaultValueHandlingTests.cs"];
m0_580 [label="Entry Unk.ToString", span="", cluster="Unk.ToString", file="DefaultValueHandlingTests.cs"];
m0_654 [label="Entry Newtonsoft.Json.Converters.XmlNodeConverter.IsNamespaceAttribute(string, out string)", span="1744-1744", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.IsNamespaceAttribute(string, out string)", file="DefaultValueHandlingTests.cs"];
m0_733 [label="attributeName.StartsWith(''xmlns'', StringComparison.Ordinal)", span="1746-1746", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.IsNamespaceAttribute(string, out string)", file="DefaultValueHandlingTests.cs"];
m0_734 [label="attributeName.Length == 5", span="1748-1748", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.IsNamespaceAttribute(string, out string)", file="DefaultValueHandlingTests.cs"];
m0_737 [label="attributeName[5] == ':'", span="1753-1753", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.IsNamespaceAttribute(string, out string)", file="DefaultValueHandlingTests.cs"];
m0_738 [label="prefix = attributeName.Substring(6, attributeName.Length - 6)", span="1755-1755", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.IsNamespaceAttribute(string, out string)", file="DefaultValueHandlingTests.cs"];
m0_740 [label="prefix = null", span="1759-1759", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.IsNamespaceAttribute(string, out string)", file="DefaultValueHandlingTests.cs"];
m0_735 [label="prefix = string.Empty", span="1750-1750", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.IsNamespaceAttribute(string, out string)", file="DefaultValueHandlingTests.cs"];
m0_736 [label="return true;", span="1751-1751", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.IsNamespaceAttribute(string, out string)", file="DefaultValueHandlingTests.cs"];
m0_739 [label="return true;", span="1756-1756", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.IsNamespaceAttribute(string, out string)", file="DefaultValueHandlingTests.cs"];
m0_741 [label="return false;", span="1760-1760", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.IsNamespaceAttribute(string, out string)", file="DefaultValueHandlingTests.cs"];
m0_742 [label="Exit Newtonsoft.Json.Converters.XmlNodeConverter.IsNamespaceAttribute(string, out string)", span="1744-1744", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.IsNamespaceAttribute(string, out string)", file="DefaultValueHandlingTests.cs"];
m0_180 [label="Entry XAttribute.cstr", span="", cluster="XAttribute.cstr", file="DefaultValueHandlingTests.cs"];
m0_367 [label="Entry Newtonsoft.Json.JsonWriter.WriteEndArray()", span="381-381", cluster="Newtonsoft.Json.JsonWriter.WriteEndArray()", file="DefaultValueHandlingTests.cs"];
m0_193 [label="Entry Newtonsoft.Json.Converters.XTextWrapper.XTextWrapper(XText)", span="575-575", cluster="Newtonsoft.Json.Converters.XTextWrapper.XTextWrapper(XText)", file="DefaultValueHandlingTests.cs"];
m0_194 [label="Exit Newtonsoft.Json.Converters.XTextWrapper.XTextWrapper(XText)", span="575-575", cluster="Newtonsoft.Json.Converters.XTextWrapper.XTextWrapper(XText)", file="DefaultValueHandlingTests.cs"];
m0_105 [label="Entry Newtonsoft.Json.Converters.IXmlDocument.CreateXmlDeclaration(string, string, string)", span="337-337", cluster="Newtonsoft.Json.Converters.IXmlDocument.CreateXmlDeclaration(string, string, string)", file="DefaultValueHandlingTests.cs"];
m0_106 [label="Exit Newtonsoft.Json.Converters.IXmlDocument.CreateXmlDeclaration(string, string, string)", span="337-337", cluster="Newtonsoft.Json.Converters.IXmlDocument.CreateXmlDeclaration(string, string, string)", file="DefaultValueHandlingTests.cs"];
m0_111 [label="Entry Newtonsoft.Json.Converters.IXmlDocument.CreateElement(string)", span="340-340", cluster="Newtonsoft.Json.Converters.IXmlDocument.CreateElement(string)", file="DefaultValueHandlingTests.cs"];
m0_112 [label="Exit Newtonsoft.Json.Converters.IXmlDocument.CreateElement(string)", span="340-340", cluster="Newtonsoft.Json.Converters.IXmlDocument.CreateElement(string)", file="DefaultValueHandlingTests.cs"];
m0_219 [label="Entry Newtonsoft.Json.Converters.XObjectWrapper.XObjectWrapper(XObject)", span="725-725", cluster="Newtonsoft.Json.Converters.XObjectWrapper.XObjectWrapper(XObject)", file="DefaultValueHandlingTests.cs"];
m0_225 [label="_xmlObject = xmlObject", span="727-727", cluster="Newtonsoft.Json.Converters.XObjectWrapper.XObjectWrapper(XObject)", file="DefaultValueHandlingTests.cs"];
m0_226 [label="Exit Newtonsoft.Json.Converters.XObjectWrapper.XObjectWrapper(XObject)", span="725-725", cluster="Newtonsoft.Json.Converters.XObjectWrapper.XObjectWrapper(XObject)", file="DefaultValueHandlingTests.cs"];
m0_751 [label="Entry Newtonsoft.Json.Converters.XmlNodeConverter.CanConvert(System.Type)", span="1776-1776", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CanConvert(System.Type)", file="DefaultValueHandlingTests.cs"];
m0_752 [label="typeof(XObject).IsAssignableFrom(valueType)", span="1779-1779", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CanConvert(System.Type)", file="DefaultValueHandlingTests.cs"];
m0_754 [label="typeof(XmlNode).IsAssignableFrom(valueType)", span="1783-1783", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CanConvert(System.Type)", file="DefaultValueHandlingTests.cs"];
m0_753 [label="return true;", span="1780-1780", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CanConvert(System.Type)", file="DefaultValueHandlingTests.cs"];
m0_755 [label="return true;", span="1784-1784", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CanConvert(System.Type)", file="DefaultValueHandlingTests.cs"];
m0_756 [label="return false;", span="1787-1787", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CanConvert(System.Type)", file="DefaultValueHandlingTests.cs"];
m0_757 [label="Exit Newtonsoft.Json.Converters.XmlNodeConverter.CanConvert(System.Type)", span="1776-1776", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CanConvert(System.Type)", file="DefaultValueHandlingTests.cs"];
m0_492 [label="Entry System.Type.IsAssignableFrom(System.Type)", span="0-0", cluster="System.Type.IsAssignableFrom(System.Type)", file="DefaultValueHandlingTests.cs"];
m0_138 [label="Entry Newtonsoft.Json.Converters.XDocumentWrapper.CreateTextNode(string)", span="485-485", cluster="Newtonsoft.Json.Converters.XDocumentWrapper.CreateTextNode(string)", file="DefaultValueHandlingTests.cs"];
m0_139 [label="return new XObjectWrapper(new XText(text));", span="487-487", cluster="Newtonsoft.Json.Converters.XDocumentWrapper.CreateTextNode(string)", file="DefaultValueHandlingTests.cs"];
m0_140 [label="Exit Newtonsoft.Json.Converters.XDocumentWrapper.CreateTextNode(string)", span="485-485", cluster="Newtonsoft.Json.Converters.XDocumentWrapper.CreateTextNode(string)", file="DefaultValueHandlingTests.cs"];
m0_601 [label="Entry Newtonsoft.Json.Converters.XmlNodeConverter.AddJsonArrayAttribute(Newtonsoft.Json.Converters.IXmlElement, Newtonsoft.Json.Converters.IXmlDocument)", span="1493-1493", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.AddJsonArrayAttribute(Newtonsoft.Json.Converters.IXmlElement, Newtonsoft.Json.Converters.IXmlDocument)", file="DefaultValueHandlingTests.cs"];
m0_607 [label="element.SetAttributeNode(document.CreateAttribute(''json:Array'', JsonNamespaceUri, ''true''))", span="1495-1495", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.AddJsonArrayAttribute(Newtonsoft.Json.Converters.IXmlElement, Newtonsoft.Json.Converters.IXmlDocument)", file="DefaultValueHandlingTests.cs"];
m0_608 [label="element is XElementWrapper", span="1499-1499", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.AddJsonArrayAttribute(Newtonsoft.Json.Converters.IXmlElement, Newtonsoft.Json.Converters.IXmlDocument)", file="DefaultValueHandlingTests.cs"];
m0_609 [label="element.GetPrefixOfNamespace(JsonNamespaceUri) == null", span="1501-1501", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.AddJsonArrayAttribute(Newtonsoft.Json.Converters.IXmlElement, Newtonsoft.Json.Converters.IXmlDocument)", file="DefaultValueHandlingTests.cs"];
m0_610 [label="element.SetAttributeNode(document.CreateAttribute(''xmlns:json'', ''http://www.w3.org/2000/xmlns/'', JsonNamespaceUri))", span="1503-1503", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.AddJsonArrayAttribute(Newtonsoft.Json.Converters.IXmlElement, Newtonsoft.Json.Converters.IXmlDocument)", file="DefaultValueHandlingTests.cs"];
m0_611 [label="Exit Newtonsoft.Json.Converters.XmlNodeConverter.AddJsonArrayAttribute(Newtonsoft.Json.Converters.IXmlElement, Newtonsoft.Json.Converters.IXmlDocument)", span="1493-1493", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.AddJsonArrayAttribute(Newtonsoft.Json.Converters.IXmlElement, Newtonsoft.Json.Converters.IXmlDocument)", file="DefaultValueHandlingTests.cs"];
m0_748 [label="Entry lambda expression", span="1765-1765", cluster="lambda expression", file="DefaultValueHandlingTests.cs"];
m0_237 [label="Entry lambda expression", span="837-837", cluster="lambda expression", file="DefaultValueHandlingTests.cs"];
m0_238 [label="new XAttributeWrapper(a)", span="837-837", cluster="lambda expression", file="DefaultValueHandlingTests.cs"];
m0_239 [label="Exit lambda expression", span="837-837", cluster="lambda expression", file="DefaultValueHandlingTests.cs"];
m0_329 [label="Entry lambda expression", span="1017-1017", cluster="lambda expression", file="DefaultValueHandlingTests.cs"];
m0_330 [label="a.LocalName == ''Array'' && a.NamespaceUri == JsonNamespaceUri", span="1017-1017", cluster="lambda expression", file="DefaultValueHandlingTests.cs"];
m0_331 [label="Exit lambda expression", span="1017-1017", cluster="lambda expression", file="DefaultValueHandlingTests.cs"];
m0_457 [label="n.LocalName == node.LocalName", span="1091-1091", cluster="lambda expression", file="DefaultValueHandlingTests.cs"];
m0_456 [label="Entry lambda expression", span="1091-1091", cluster="lambda expression", file="DefaultValueHandlingTests.cs"];
m0_458 [label="Exit lambda expression", span="1091-1091", cluster="lambda expression", file="DefaultValueHandlingTests.cs"];
m0_605 [label="n.LocalName == propertyName", span="1488-1488", cluster="lambda expression", file="DefaultValueHandlingTests.cs"];
m0_604 [label="Entry lambda expression", span="1488-1488", cluster="lambda expression", file="DefaultValueHandlingTests.cs"];
m0_606 [label="Exit lambda expression", span="1488-1488", cluster="lambda expression", file="DefaultValueHandlingTests.cs"];
m0_731 [label="n.LocalName == propertyName", span="1708-1708", cluster="lambda expression", file="DefaultValueHandlingTests.cs"];
m0_730 [label="Entry lambda expression", span="1708-1708", cluster="lambda expression", file="DefaultValueHandlingTests.cs"];
m0_732 [label="Exit lambda expression", span="1708-1708", cluster="lambda expression", file="DefaultValueHandlingTests.cs"];
m0_749 [label="a.NamespaceUri != JsonNamespaceUri", span="1765-1765", cluster="lambda expression", file="DefaultValueHandlingTests.cs"];
m0_750 [label="Exit lambda expression", span="1765-1765", cluster="lambda expression", file="DefaultValueHandlingTests.cs"];
m0_494 [label="Entry XDocument.cstr", span="", cluster="XDocument.cstr", file="DefaultValueHandlingTests.cs"];
m0_295 [label="Entry string.IsNullOrEmpty(string)", span="0-0", cluster="string.IsNullOrEmpty(string)", file="DefaultValueHandlingTests.cs"];
m0_131 [label="Entry Newtonsoft.Json.Converters.XDocumentWrapper.XDocumentWrapper(XDocument)", span="462-462", cluster="Newtonsoft.Json.Converters.XDocumentWrapper.XDocumentWrapper(XDocument)", file="DefaultValueHandlingTests.cs"];
m0_132 [label="Exit Newtonsoft.Json.Converters.XDocumentWrapper.XDocumentWrapper(XDocument)", span="462-462", cluster="Newtonsoft.Json.Converters.XDocumentWrapper.XDocumentWrapper(XDocument)", file="DefaultValueHandlingTests.cs"];
m0_450 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="DefaultValueHandlingTests.cs"];
m0_123 [label="Entry Newtonsoft.Json.Converters.IXmlNode.AppendChild(Newtonsoft.Json.Converters.IXmlNode)", span="378-378", cluster="Newtonsoft.Json.Converters.IXmlNode.AppendChild(Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_124 [label="Exit Newtonsoft.Json.Converters.IXmlNode.AppendChild(Newtonsoft.Json.Converters.IXmlNode)", span="378-378", cluster="Newtonsoft.Json.Converters.IXmlNode.AppendChild(Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_45 [label="Entry System.IO.MemoryStream.MemoryStream(byte[])", span="0-0", cluster="System.IO.MemoryStream.MemoryStream(byte[])", file="DefaultValueHandlingTests.cs"];
m0_29 [label="string json = @''{\r\n  ''''Pattern'''': ''''abc'''',\r\n  ''''Options'''': 513\r\n}''", span="66-69", cluster="Newtonsoft.Json.Tests.Converters.RegexConverterTests.DeserializeFromText()", file="DefaultValueHandlingTests.cs", color=green, community=0];
m0_30 [label="Regex newRegex = JsonConvert.DeserializeObject<Regex>(json, new RegexConverter())", span="71-71", cluster="Newtonsoft.Json.Tests.Converters.RegexConverterTests.DeserializeFromText()", file="DefaultValueHandlingTests.cs", color=green, community=0];
m0_31 [label="Assert.AreEqual(''abc'', newRegex.ToString())", span="72-72", cluster="Newtonsoft.Json.Tests.Converters.RegexConverterTests.DeserializeFromText()", file="DefaultValueHandlingTests.cs", color=green, community=0];
m0_121 [label="Entry Newtonsoft.Json.Converters.IXmlElement.GetPrefixOfNamespace(string)", span="366-366", cluster="Newtonsoft.Json.Converters.IXmlElement.GetPrefixOfNamespace(string)", file="DefaultValueHandlingTests.cs"];
m0_122 [label="Exit Newtonsoft.Json.Converters.IXmlElement.GetPrefixOfNamespace(string)", span="366-366", cluster="Newtonsoft.Json.Converters.IXmlElement.GetPrefixOfNamespace(string)", file="DefaultValueHandlingTests.cs"];
m0_258 [label="Entry Newtonsoft.Json.JsonWriter.WriteStartObject()", span="357-357", cluster="Newtonsoft.Json.JsonWriter.WriteStartObject()", file="DefaultValueHandlingTests.cs"];
m0_363 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.TryGetValue(TKey, out TValue)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.TryGetValue(TKey, out TValue)", file="DefaultValueHandlingTests.cs"];
m0_46 [label="Entry Newtonsoft.Json.Converters.XmlDocumentWrapper.CreateAttribute(string, string)", span="107-107", cluster="Newtonsoft.Json.Converters.XmlDocumentWrapper.CreateAttribute(string, string)", file="DefaultValueHandlingTests.cs"];
m0_230 [label="Entry System.InvalidOperationException.InvalidOperationException()", span="0-0", cluster="System.InvalidOperationException.InvalidOperationException()", file="DefaultValueHandlingTests.cs"];
m0_47 [label="XmlNodeWrapper attribute = new XmlNodeWrapper(_document.CreateAttribute(name))", span="109-109", cluster="Newtonsoft.Json.Converters.XmlDocumentWrapper.CreateAttribute(string, string)", file="DefaultValueHandlingTests.cs"];
m0_603 [label="Entry Unk.Single", span="", cluster="Unk.Single", file="DefaultValueHandlingTests.cs"];
m0_283 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="DefaultValueHandlingTests.cs"];
m0_33 [label="Exit Newtonsoft.Json.Tests.Converters.RegexConverterTests.DeserializeFromText()", span="64-64", cluster="Newtonsoft.Json.Tests.Converters.RegexConverterTests.DeserializeFromText()", file="DefaultValueHandlingTests.cs"];
m0_27 [label="Entry Newtonsoft.Json.Utilities.MiscellaneousUtils.BytesToHex(byte[])", span="97-97", cluster="Newtonsoft.Json.Utilities.MiscellaneousUtils.BytesToHex(byte[])", file="DefaultValueHandlingTests.cs"];
m0_655 [label="Entry System.Nullable<T>.GetValueOrDefault()", span="0-0", cluster="System.Nullable<T>.GetValueOrDefault()", file="DefaultValueHandlingTests.cs"];
m0_32 [label="Assert.AreEqual(RegexOptions.IgnoreCase | RegexOptions.CultureInvariant, newRegex.Options)", span="73-73", cluster="Newtonsoft.Json.Tests.Converters.RegexConverterTests.DeserializeFromText()", file="DefaultValueHandlingTests.cs", color=green, community=0];
m0_99 [label="Entry Newtonsoft.Json.Converters.IXmlDocument.CreateCDataSection(string)", span="334-334", cluster="Newtonsoft.Json.Converters.IXmlDocument.CreateCDataSection(string)", file="DefaultValueHandlingTests.cs"];
m0_100 [label="Exit Newtonsoft.Json.Converters.IXmlDocument.CreateCDataSection(string)", span="334-334", cluster="Newtonsoft.Json.Converters.IXmlDocument.CreateCDataSection(string)", file="DefaultValueHandlingTests.cs"];
m0_198 [label="Entry Newtonsoft.Json.Converters.XContainerWrapper.XContainerWrapper(XContainer)", span="661-661", cluster="Newtonsoft.Json.Converters.XContainerWrapper.XContainerWrapper(XContainer)", file="DefaultValueHandlingTests.cs"];
m0_199 [label="Exit Newtonsoft.Json.Converters.XContainerWrapper.XContainerWrapper(XContainer)", span="661-661", cluster="Newtonsoft.Json.Converters.XContainerWrapper.XContainerWrapper(XContainer)", file="DefaultValueHandlingTests.cs"];
m0_366 [label="Entry Newtonsoft.Json.JsonWriter.WriteStartArray()", span="373-373", cluster="Newtonsoft.Json.JsonWriter.WriteStartArray()", file="DefaultValueHandlingTests.cs"];
m0_244 [label="Entry Newtonsoft.Json.Converters.XmlNodeConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", span="908-908", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs"];
m0_245 [label="IXmlNode node = WrapXml(value)", span="910-910", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs"];
m0_249 [label="writer.WriteStartObject()", span="916-916", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs"];
m0_250 [label="SerializeNode(writer, node, manager, !OmitRootObject)", span="918-918", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs"];
m0_252 [label="writer.WriteEndObject()", span="921-921", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs"];
m0_246 [label="XmlNamespaceManager manager = new XmlNamespaceManager(new NameTable())", span="912-912", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs"];
m0_247 [label="PushParentNamespaces(node, manager)", span="913-913", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs"];
m0_248 [label="!OmitRootObject", span="915-915", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs"];
m0_251 [label="!OmitRootObject", span="920-920", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs"];
m0_253 [label="Exit Newtonsoft.Json.Converters.XmlNodeConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", span="908-908", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", file="DefaultValueHandlingTests.cs"];
m0_155 [label="Entry XDeclaration.cstr", span="", cluster="XDeclaration.cstr", file="DefaultValueHandlingTests.cs"];
m0_169 [label="Entry XElement.cstr", span="", cluster="XElement.cstr", file="DefaultValueHandlingTests.cs"];
m0_233 [label="Entry Newtonsoft.Json.Converters.XElementWrapper.SetAttributeNode(Newtonsoft.Json.Converters.IXmlNode)", span="829-829", cluster="Newtonsoft.Json.Converters.XElementWrapper.SetAttributeNode(Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_234 [label="XObjectWrapper wrapper = (XObjectWrapper)attribute", span="831-831", cluster="Newtonsoft.Json.Converters.XElementWrapper.SetAttributeNode(Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_235 [label="Element.Add(wrapper.WrappedNode)", span="832-832", cluster="Newtonsoft.Json.Converters.XElementWrapper.SetAttributeNode(Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_236 [label="Exit Newtonsoft.Json.Converters.XElementWrapper.SetAttributeNode(Newtonsoft.Json.Converters.IXmlNode)", span="829-829", cluster="Newtonsoft.Json.Converters.XElementWrapper.SetAttributeNode(Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_256 [label="Entry NameTable.cstr", span="", cluster="NameTable.cstr", file="DefaultValueHandlingTests.cs"];
m0_137 [label="Entry XComment.cstr", span="", cluster="XComment.cstr", file="DefaultValueHandlingTests.cs"];
m0_254 [label="Entry Newtonsoft.Json.Converters.XmlNodeConverter.WrapXml(object)", span="924-924", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.WrapXml(object)", file="DefaultValueHandlingTests.cs"];
m0_261 [label="value is XObject", span="927-927", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.WrapXml(object)", file="DefaultValueHandlingTests.cs"];
m0_262 [label="return XContainerWrapper.WrapNode((XObject)value);", span="928-928", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.WrapXml(object)", file="DefaultValueHandlingTests.cs"];
m0_263 [label="value is XmlNode", span="931-931", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.WrapXml(object)", file="DefaultValueHandlingTests.cs"];
m0_264 [label="return XmlNodeWrapper.WrapNode((XmlNode)value);", span="932-932", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.WrapXml(object)", file="DefaultValueHandlingTests.cs"];
m0_265 [label="throw new ArgumentException(''Value must be an XML object.'', ''value'');", span="935-935", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.WrapXml(object)", file="DefaultValueHandlingTests.cs"];
m0_266 [label="Exit Newtonsoft.Json.Converters.XmlNodeConverter.WrapXml(object)", span="924-924", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.WrapXml(object)", file="DefaultValueHandlingTests.cs"];
m0_260 [label="Entry Newtonsoft.Json.JsonWriter.WriteEndObject()", span="365-365", cluster="Newtonsoft.Json.JsonWriter.WriteEndObject()", file="DefaultValueHandlingTests.cs"];
m0_101 [label="Entry Newtonsoft.Json.Converters.IXmlDocument.CreateWhitespace(string)", span="335-335", cluster="Newtonsoft.Json.Converters.IXmlDocument.CreateWhitespace(string)", file="DefaultValueHandlingTests.cs"];
m0_102 [label="Exit Newtonsoft.Json.Converters.IXmlDocument.CreateWhitespace(string)", span="335-335", cluster="Newtonsoft.Json.Converters.IXmlDocument.CreateWhitespace(string)", file="DefaultValueHandlingTests.cs"];
m0_115 [label="Entry Newtonsoft.Json.Converters.IXmlDocument.CreateAttribute(string, string)", span="342-342", cluster="Newtonsoft.Json.Converters.IXmlDocument.CreateAttribute(string, string)", file="DefaultValueHandlingTests.cs"];
m0_116 [label="Exit Newtonsoft.Json.Converters.IXmlDocument.CreateAttribute(string, string)", span="342-342", cluster="Newtonsoft.Json.Converters.IXmlDocument.CreateAttribute(string, string)", file="DefaultValueHandlingTests.cs"];
m0_175 [label="Entry Unk.Get", span="", cluster="Unk.Get", file="DefaultValueHandlingTests.cs"];
m0_554 [label="Entry Newtonsoft.Json.Converters.XmlNodeConverter.CreateElement(string, Newtonsoft.Json.Converters.IXmlDocument, string, XmlNamespaceManager)", span="1675-1675", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateElement(string, Newtonsoft.Json.Converters.IXmlDocument, string, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_699 [label="string ns = string.IsNullOrEmpty(elementPrefix) ? manager.DefaultNamespace : manager.LookupNamespace(elementPrefix)", span="1677-1677", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateElement(string, Newtonsoft.Json.Converters.IXmlDocument, string, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_700 [label="IXmlElement element = (!string.IsNullOrEmpty(ns)) ? document.CreateElement(elementName, ns) : document.CreateElement(elementName)", span="1679-1679", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateElement(string, Newtonsoft.Json.Converters.IXmlDocument, string, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_701 [label="return element;", span="1681-1681", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateElement(string, Newtonsoft.Json.Converters.IXmlDocument, string, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_702 [label="Exit Newtonsoft.Json.Converters.XmlNodeConverter.CreateElement(string, Newtonsoft.Json.Converters.IXmlDocument, string, XmlNamespaceManager)", span="1675-1675", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.CreateElement(string, Newtonsoft.Json.Converters.IXmlDocument, string, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_499 [label="Entry Unk.Remove", span="", cluster="Unk.Remove", file="DefaultValueHandlingTests.cs"];
m0_92 [label="return newChild;", span="318-318", cluster="Newtonsoft.Json.Converters.XmlNodeWrapper.AppendChild(Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_90 [label="_node.AppendChild(xmlNodeWrapper._node)", span="315-315", cluster="Newtonsoft.Json.Converters.XmlNodeWrapper.AppendChild(Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_91 [label="_childNodes = null", span="316-316", cluster="Newtonsoft.Json.Converters.XmlNodeWrapper.AppendChild(Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_93 [label="Exit Newtonsoft.Json.Converters.XmlNodeWrapper.AppendChild(Newtonsoft.Json.Converters.IXmlNode)", span="312-312", cluster="Newtonsoft.Json.Converters.XmlNodeWrapper.AppendChild(Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_259 [label="Entry Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", span="1082-1082", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_368 [label="node.NodeType", span="1084-1084", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_371 [label="SerializeGroupedNodes(writer, node, manager, writePropertyName)", span="1088-1088", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_373 [label="IsArray(node) && node.ChildNodes.All(n => n.LocalName == node.LocalName) && node.ChildNodes.Count > 0", span="1091-1091", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_374 [label="SerializeGroupedNodes(writer, node, manager, false)", span="1093-1093", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_375 [label="manager.PushScope()", span="1097-1097", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_376 [label="node.Attributes", span="1099-1099", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_380 [label="manager.AddNamespace(namespacePrefix, namespaceUri)", span="1108-1108", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_381 [label=writePropertyName, span="1112-1112", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_382 [label="writer.WritePropertyName(GetPropertyName(node, manager))", span="1113-1113", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_383 [label="!ValueAttributes(node.Attributes).Any() && node.ChildNodes.Count == 1\r\n                            && node.ChildNodes[0].NodeType == XmlNodeType.Text", span="1115-1116", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_384 [label="writer.WriteValue(node.ChildNodes[0].Value)", span="1119-1119", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_385 [label="node.ChildNodes.Count == 0 && CollectionUtils.IsNullOrEmpty(node.Attributes)", span="1121-1121", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_386 [label="IXmlElement element = (IXmlElement)node", span="1123-1123", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_388 [label="writer.WriteNull()", span="1127-1127", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_389 [label="writer.WriteValue(string.Empty)", span="1129-1129", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_390 [label="writer.WriteStartObject()", span="1133-1133", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_392 [label="i < node.Attributes.Count", span="1135-1135", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_393 [label="SerializeNode(writer, node.Attributes[i], manager, true)", span="1137-1137", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_395 [label="SerializeGroupedNodes(writer, node, manager, true)", span="1140-1140", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_396 [label="writer.WriteEndObject()", span="1142-1142", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_397 [label="manager.PopScope()", span="1145-1145", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_399 [label=writePropertyName, span="1150-1150", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_400 [label="writer.WriteComment(node.Value)", span="1151-1151", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_407 [label="node.NamespaceUri == ''http://www.w3.org/2000/xmlns/'' && node.Value == JsonNamespaceUri", span="1159-1159", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_409 [label="node.NamespaceUri == JsonNamespaceUri", span="1162-1162", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_410 [label="node.LocalName == ''Array''", span="1164-1164", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_412 [label=writePropertyName, span="1168-1168", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_413 [label="writer.WritePropertyName(GetPropertyName(node, manager))", span="1169-1169", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_414 [label="writer.WriteValue(node.Value)", span="1170-1170", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_416 [label="IXmlDeclaration declaration = (IXmlDeclaration)node", span="1173-1173", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_417 [label="writer.WritePropertyName(GetPropertyName(node, manager))", span="1174-1174", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_418 [label="writer.WriteStartObject()", span="1175-1175", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_420 [label="writer.WritePropertyName(''@version'')", span="1179-1179", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_421 [label="writer.WriteValue(declaration.Version)", span="1180-1180", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_423 [label="writer.WritePropertyName(''@encoding'')", span="1184-1184", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_424 [label="writer.WriteValue(declaration.Encoding)", span="1185-1185", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_426 [label="writer.WritePropertyName(''@standalone'')", span="1189-1189", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_427 [label="writer.WriteValue(declaration.Standalone)", span="1190-1190", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_428 [label="writer.WriteEndObject()", span="1193-1193", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_430 [label="IXmlDocumentType documentType = (IXmlDocumentType)node", span="1196-1196", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_431 [label="writer.WritePropertyName(GetPropertyName(node, manager))", span="1197-1197", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_432 [label="writer.WriteStartObject()", span="1198-1198", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_434 [label="writer.WritePropertyName(''@name'')", span="1202-1202", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_435 [label="writer.WriteValue(documentType.Name)", span="1203-1203", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_437 [label="writer.WritePropertyName(''@public'')", span="1207-1207", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_438 [label="writer.WriteValue(documentType.Public)", span="1208-1208", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_440 [label="writer.WritePropertyName(''@system'')", span="1212-1212", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_441 [label="writer.WriteValue(documentType.System)", span="1213-1213", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_443 [label="writer.WritePropertyName(''@internalSubset'')", span="1217-1217", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_444 [label="writer.WriteValue(documentType.InternalSubset)", span="1218-1218", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_445 [label="writer.WriteEndObject()", span="1221-1221", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_446 [label="throw new JsonSerializationException(''Unexpected XmlNodeType when serializing nodes: '' + node.NodeType);", span="1224-1224", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_369 [label="XmlNodeType.Document", span="1086-1086", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_372 [label="XmlNodeType.Element", span="1090-1090", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_398 [label="XmlNodeType.Comment", span="1149-1149", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_401 [label="XmlNodeType.Attribute", span="1153-1153", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_415 [label="XmlNodeType.XmlDeclaration", span="1172-1172", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_429 [label="XmlNodeType.DocumentType", span="1195-1195", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_370 [label="XmlNodeType.DocumentFragment", span="1087-1087", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_377 [label="attribute.NamespaceUri == ''http://www.w3.org/2000/xmlns/''", span="1101-1101", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_378 [label="string namespacePrefix = (attribute.LocalName != ''xmlns'')\r\n                                    ? attribute.LocalName\r\n                                    : string.Empty", span="1103-1105", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_379 [label="string namespaceUri = attribute.Value", span="1106-1106", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_387 [label="element.IsEmpty", span="1126-1126", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_391 [label="int i = 0", span="1135-1135", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_394 [label="i++", span="1135-1135", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_402 [label="XmlNodeType.Text", span="1154-1154", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_403 [label="XmlNodeType.CDATA", span="1155-1155", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_404 [label="XmlNodeType.ProcessingInstruction", span="1156-1156", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_405 [label="XmlNodeType.Whitespace", span="1157-1157", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_406 [label="XmlNodeType.SignificantWhitespace", span="1158-1158", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_408 [label="return;", span="1160-1160", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_411 [label="return;", span="1165-1165", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_419 [label="!string.IsNullOrEmpty(declaration.Version)", span="1177-1177", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_422 [label="!string.IsNullOrEmpty(declaration.Encoding)", span="1182-1182", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_425 [label="!string.IsNullOrEmpty(declaration.Standalone)", span="1187-1187", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_433 [label="!string.IsNullOrEmpty(documentType.Name)", span="1200-1200", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_436 [label="!string.IsNullOrEmpty(documentType.Public)", span="1205-1205", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_439 [label="!string.IsNullOrEmpty(documentType.System)", span="1210-1210", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_442 [label="!string.IsNullOrEmpty(documentType.InternalSubset)", span="1215-1215", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_447 [label="Exit Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", span="1082-1082", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.SerializeNode(Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager, bool)", file="DefaultValueHandlingTests.cs"];
m0_257 [label="Entry Newtonsoft.Json.Converters.XmlNodeConverter.PushParentNamespaces(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", span="938-938", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.PushParentNamespaces(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_268 [label="List<IXmlNode> parentElements = null", span="940-940", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.PushParentNamespaces(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_269 [label="IXmlNode parent = node", span="942-942", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.PushParentNamespaces(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_278 [label="manager.PushScope()", span="960-960", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.PushParentNamespaces(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_281 [label="manager.AddNamespace(attribute.LocalName, attribute.Value)", span="964-964", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.PushParentNamespaces(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_272 [label="parentElements == null", span="947-947", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.PushParentNamespaces(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_274 [label="parentElements.Add(parent)", span="950-950", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.PushParentNamespaces(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_275 [label="parentElements != null", span="954-954", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.PushParentNamespaces(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_276 [label="parentElements.Reverse()", span="956-956", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.PushParentNamespaces(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_277 [label=parentElements, span="958-958", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.PushParentNamespaces(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_270 [label="(parent = parent.ParentNode) != null", span="943-943", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.PushParentNamespaces(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_271 [label="parent.NodeType == XmlNodeType.Element", span="945-945", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.PushParentNamespaces(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_273 [label="parentElements = new List<IXmlNode>()", span="948-948", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.PushParentNamespaces(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_279 [label="parentElement.Attributes", span="961-961", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.PushParentNamespaces(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_280 [label="attribute.NamespaceUri == ''http://www.w3.org/2000/xmlns/'' && attribute.LocalName != ''xmlns''", span="963-963", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.PushParentNamespaces(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_282 [label="Exit Newtonsoft.Json.Converters.XmlNodeConverter.PushParentNamespaces(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", span="938-938", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.PushParentNamespaces(Newtonsoft.Json.Converters.IXmlNode, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_553 [label="Entry Unk.LookupNamespace", span="", cluster="Unk.LookupNamespace", file="DefaultValueHandlingTests.cs"];
m0_549 [label="Entry Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", span="1509-1509", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_612 [label="Dictionary<string, string> attributeNameValues = new Dictionary<string, string>()", span="1511-1511", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_615 [label="reader.TokenType != JsonToken.String\r\n                && reader.TokenType != JsonToken.Null\r\n                && reader.TokenType != JsonToken.Boolean\r\n                && reader.TokenType != JsonToken.Integer\r\n                && reader.TokenType != JsonToken.Float\r\n                && reader.TokenType != JsonToken.Date\r\n                && reader.TokenType != JsonToken.StartConstructor", span="1516-1522", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_616 [label="!finishedAttributes && !finishedElement && reader.Read()", span="1525-1525", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_617 [label="reader.TokenType", span="1527-1527", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_619 [label="string attributeName = reader.Value.ToString()", span="1530-1530", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_626 [label="reader.Read()", span="1541-1541", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_627 [label="attributeValue = ConvertTokenToXmlValue(reader)", span="1542-1542", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_631 [label="manager.AddNamespace(namespacePrefix, attributeValue)", span="1548-1548", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_634 [label="reader.Read()", span="1553-1553", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_635 [label="attributeValue = reader.Value.ToString()", span="1554-1554", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_636 [label="string jsonPrefix = manager.LookupPrefix(JsonNamespaceUri)", span="1558-1558", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_639 [label="manager.LookupNamespace(''json'' + i) != null", span="1563-1563", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_643 [label="manager.AddNamespace(jsonPrefix, JsonNamespaceUri)", span="1570-1570", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_651 [label="throw new JsonSerializationException(''Unexpected JsonToken: '' + reader.TokenType);", span="1594-1594", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_613 [label="bool finishedAttributes = false", span="1512-1512", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_628 [label="attributeNameValues.Add(attributeName, attributeValue)", span="1543-1543", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_642 [label="attributeNameValues.Add(''xmlns:'' + jsonPrefix, JsonNamespaceUri)", span="1569-1569", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_644 [label="attributeNameValues.Add(jsonPrefix + '':'' + attributeName, attributeValue)", span="1573-1573", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_652 [label="return attributeNameValues;", span="1599-1599", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_614 [label="bool finishedElement = false", span="1513-1513", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_618 [label="JsonToken.PropertyName", span="1529-1529", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_647 [label="JsonToken.EndObject", span="1587-1587", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_649 [label="JsonToken.Comment", span="1590-1590", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_620 [label="!string.IsNullOrEmpty(attributeName)", span="1532-1532", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_621 [label="char firstChar = attributeName[0]", span="1534-1534", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_625 [label="attributeName = attributeName.Substring(1)", span="1540-1540", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_646 [label="finishedAttributes = true", span="1583-1583", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_622 [label="string attributeValue", span="1535-1535", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_623 [label=firstChar, span="1537-1537", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_624 [label="'@'", span="1539-1539", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_632 [label="'$'", span="1551-1551", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_645 [label="finishedAttributes = true", span="1576-1576", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_630 [label="IsNamespaceAttribute(attributeName, out namespacePrefix)", span="1546-1546", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_633 [label="attributeName = attributeName.Substring(1)", span="1552-1552", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_629 [label="string namespacePrefix", span="1545-1545", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_637 [label="jsonPrefix == null", span="1559-1559", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_638 [label="int? i = null", span="1562-1562", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_640 [label="i = i.GetValueOrDefault() + 1", span="1565-1565", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_641 [label="jsonPrefix = ''json'' + i", span="1567-1567", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_648 [label="finishedElement = true", span="1588-1588", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_650 [label="finishedElement = true", span="1591-1591", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_653 [label="Exit Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", span="1509-1509", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.ReadAttributeElements(Newtonsoft.Json.JsonReader, XmlNamespaceManager)", file="DefaultValueHandlingTests.cs"];
m0_327 [label="Entry Unk.SingleOrDefault", span="", cluster="Unk.SingleOrDefault", file="DefaultValueHandlingTests.cs"];
m0_294 [label="Entry Unk.LookupPrefix", span="", cluster="Unk.LookupPrefix", file="DefaultValueHandlingTests.cs"];
m0_498 [label="Entry Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeNode(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, Newtonsoft.Json.Converters.IXmlNode)", span="1684-1684", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeNode(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_703 [label="reader.TokenType", span="1688-1688", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeNode(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_705 [label="currentNode.NodeType == XmlNodeType.Document && document.DocumentElement != null", span="1691-1691", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeNode(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_707 [label="string propertyName = reader.Value.ToString()", span="1694-1694", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeNode(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_708 [label="reader.Read()", span="1695-1695", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeNode(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_709 [label="reader.TokenType == JsonToken.StartArray", span="1697-1697", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeNode(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_711 [label="reader.Read() && reader.TokenType != JsonToken.EndArray", span="1700-1700", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeNode(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_712 [label="DeserializeValue(reader, document, manager, propertyName, currentNode)", span="1702-1702", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeNode(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_715 [label="IXmlElement arrayElement = currentNode.ChildNodes.OfType<IXmlElement>().Single(n => n.LocalName == propertyName)", span="1708-1708", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeNode(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_716 [label="AddJsonArrayAttribute(arrayElement, document)", span="1709-1709", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeNode(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_717 [label="DeserializeValue(reader, document, manager, propertyName, currentNode)", span="1714-1714", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeNode(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_719 [label="string constructorName = reader.Value.ToString()", span="1718-1718", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeNode(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_720 [label="reader.Read() && reader.TokenType != JsonToken.EndConstructor", span="1720-1720", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeNode(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_721 [label="DeserializeValue(reader, document, manager, constructorName, currentNode)", span="1722-1722", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeNode(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_723 [label="currentNode.AppendChild(document.CreateComment((string)reader.Value))", span="1726-1726", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeNode(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_727 [label="throw new JsonSerializationException(''Unexpected JsonToken when deserializing node: '' + reader.TokenType);", span="1732-1732", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeNode(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_728 [label="reader.TokenType == JsonToken.PropertyName || reader.Read()", span="1734-1734", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeNode(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_704 [label="JsonToken.PropertyName", span="1690-1690", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeNode(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_718 [label="JsonToken.StartConstructor", span="1717-1717", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeNode(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_722 [label="JsonToken.Comment", span="1725-1725", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeNode(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_724 [label="JsonToken.EndObject", span="1728-1728", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeNode(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_706 [label="throw new JsonSerializationException(''JSON root object has multiple properties. The root object must have a single property in order to create a valid XML document. Consider specifing a DeserializeRootElementName.'');", span="1692-1692", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeNode(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_710 [label="int count = 0", span="1699-1699", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeNode(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_713 [label="count++", span="1703-1703", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeNode(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_714 [label="count == 1 && WriteArrayAttribute", span="1706-1706", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeNode(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_725 [label="JsonToken.EndArray", span="1729-1729", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeNode(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_726 [label="return;", span="1730-1730", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeNode(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_729 [label="Exit Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeNode(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, Newtonsoft.Json.Converters.IXmlNode)", span="1684-1684", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeNode(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Converters.IXmlDocument, XmlNamespaceManager, Newtonsoft.Json.Converters.IXmlNode)", file="DefaultValueHandlingTests.cs"];
m0_286 [label="Entry Unk.PushScope", span="", cluster="Unk.PushScope", file="DefaultValueHandlingTests.cs"];
m0_758 [label="Newtonsoft.Json.Converters.XmlDocumentWrapper", span="", file="DefaultValueHandlingTests.cs"];
m0_759 [label="Newtonsoft.Json.Converters.XmlElementWrapper", span="", file="DefaultValueHandlingTests.cs"];
m0_760 [label="Newtonsoft.Json.Converters.XmlDeclarationWrapper", span="", file="DefaultValueHandlingTests.cs"];
m0_761 [label="Newtonsoft.Json.Converters.XmlDocumentTypeWrapper", span="", file="DefaultValueHandlingTests.cs"];
m0_762 [label="Newtonsoft.Json.Converters.XmlNodeWrapper", span="", file="DefaultValueHandlingTests.cs"];
m0_763 [label="Newtonsoft.Json.Converters.XDeclarationWrapper", span="", file="DefaultValueHandlingTests.cs"];
m0_764 [label="Newtonsoft.Json.Converters.XDocumentTypeWrapper", span="", file="DefaultValueHandlingTests.cs"];
m0_765 [label="Newtonsoft.Json.Converters.XDocumentWrapper", span="", file="DefaultValueHandlingTests.cs"];
m0_766 [label="Newtonsoft.Json.Converters.XContainerWrapper", span="", file="DefaultValueHandlingTests.cs"];
m0_767 [label="Newtonsoft.Json.Converters.XObjectWrapper", span="", file="DefaultValueHandlingTests.cs"];
m0_768 [label="Newtonsoft.Json.Converters.XElementWrapper", span="", file="DefaultValueHandlingTests.cs"];
m0_769 [label="Newtonsoft.Json.Converters.XmlNodeConverter", span="", file="DefaultValueHandlingTests.cs"];
m0_770 [label="Newtonsoft.Json.Converters.IXmlNode", span="", file="DefaultValueHandlingTests.cs"];
m0_771 [label=string, span="", file="DefaultValueHandlingTests.cs"];
m0_772 [label=propertyName, span="", file="DefaultValueHandlingTests.cs"];
m1_137 [label="Exit Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.CreateStructMethodCall()", span="221-221", cluster="Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.CreateStructMethodCall()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_140 [label="Assert.AreEqual(1, o.Children().Count())", span="262-262", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionClear()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_143 [label="Assert.AreEqual(0, o.Children().Count())", span="267-267", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionClear()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_144 [label="Assert.AreEqual(null, p.Parent)", span="269-269", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionClear()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_138 [label="out Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.TestStruct", span="", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionClear()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_139 [label="o.Add(''PropertyNameValue'', new JValue(1))", span="261-261", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionClear()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_141 [label="JProperty p = (JProperty)o.Children().ElementAt(0)", span="264-264", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionClear()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_142 [label="((ICollection<KeyValuePair<string, JToken>>)o).Clear()", span="266-266", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionClear()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_145 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionClear()", span="258-258", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionClear()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_760 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenIsReadOnly()", span="1225-1225", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenIsReadOnly()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_761 [label="IList<JToken> l = new JObject()", span="1227-1227", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenIsReadOnly()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_762 [label="Assert.IsFalse(l.IsReadOnly)", span="1228-1228", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenIsReadOnly()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_763 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenIsReadOnly()", span="1225-1225", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenIsReadOnly()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_56 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.TryGetValue()", span="151-151", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.TryGetValue()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_173 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyTo()", span="308-308", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyTo()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_178 [label="Assert.AreEqual(3, o.Children().Count())", span="314-314", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyTo()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_181 [label="Assert.AreEqual(default(KeyValuePair<string, JToken>), a[0])", span="320-320", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyTo()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_182 [label="Assert.AreEqual(''PropertyNameValue'', a[1].Key)", span="322-322", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyTo()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_183 [label="Assert.AreEqual(1, (int)a[1].Value)", span="323-323", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyTo()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_184 [label="Assert.AreEqual(''PropertyNameValue2'', a[2].Key)", span="325-325", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyTo()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_185 [label="Assert.AreEqual(2, (int)a[2].Value)", span="326-326", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyTo()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_186 [label="Assert.AreEqual(''PropertyNameValue3'', a[3].Key)", span="328-328", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyTo()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_187 [label="Assert.AreEqual(3, (int)a[3].Value)", span="329-329", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyTo()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_188 [label="Assert.AreEqual(default(KeyValuePair<string, JToken>), a[4])", span="331-331", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyTo()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_174 [label="JObject o = new JObject()", span="310-310", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyTo()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_177 [label="o.Add(''PropertyNameValue3'', new JValue(3))", span="313-313", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyTo()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_179 [label="KeyValuePair<string, JToken>[] a = new KeyValuePair<string, JToken>[5]", span="316-316", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyTo()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_180 [label="((ICollection<KeyValuePair<string, JToken>>)o).CopyTo(a, 1)", span="318-318", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyTo()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_175 [label="o.Add(''PropertyNameValue'', new JValue(1))", span="311-311", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyTo()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_176 [label="o.Add(''PropertyNameValue2'', new JValue(2))", span="312-312", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyTo()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_189 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyTo()", span="308-308", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyTo()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1087 [label="Entry System.Guid.Guid(string)", span="0-0", cluster="System.Guid.Guid(string)", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1109 [label="Entry Newtonsoft.Json.Linq.JArray.JArray(params object[])", span="82-82", cluster="Newtonsoft.Json.Linq.JArray.JArray(params object[])", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1031 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", span="1700-1700", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1040 [label="Assert.AreEqual(false, prop1.CanResetValue(o))", span="1713-1713", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1041 [label="Assert.AreEqual(false, prop1.ShouldSerializeValue(o))", span="1714-1714", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1046 [label="Assert.AreEqual(false, prop2.CanResetValue(o))", span="1720-1720", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1047 [label="Assert.AreEqual(false, prop2.ShouldSerializeValue(o))", span="1721-1721", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1052 [label="Assert.AreEqual(false, prop3.CanResetValue(o))", span="1727-1727", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1053 [label="Assert.AreEqual(false, prop3.ShouldSerializeValue(o))", span="1728-1728", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1058 [label="Assert.AreEqual(false, prop4.CanResetValue(o))", span="1734-1734", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1059 [label="Assert.AreEqual(false, prop4.ShouldSerializeValue(o))", span="1735-1735", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1035 [label="Assert.AreEqual(4, properties.Count)", span="1707-1707", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1037 [label="Assert.AreEqual(''prop1'', prop1.Name)", span="1710-1710", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1038 [label="Assert.AreEqual(typeof(object), prop1.PropertyType)", span="1711-1711", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1039 [label="Assert.AreEqual(typeof(JObject), prop1.ComponentType)", span="1712-1712", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1043 [label="Assert.AreEqual(''prop2'', prop2.Name)", span="1717-1717", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1044 [label="Assert.AreEqual(typeof(object), prop2.PropertyType)", span="1718-1718", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1045 [label="Assert.AreEqual(typeof(JObject), prop2.ComponentType)", span="1719-1719", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1049 [label="Assert.AreEqual(''prop3'', prop3.Name)", span="1724-1724", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1050 [label="Assert.AreEqual(typeof(object), prop3.PropertyType)", span="1725-1725", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1051 [label="Assert.AreEqual(typeof(JObject), prop3.ComponentType)", span="1726-1726", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1055 [label="Assert.AreEqual(''prop4'', prop4.Name)", span="1731-1731", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1056 [label="Assert.AreEqual(typeof(object), prop4.PropertyType)", span="1732-1732", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1057 [label="Assert.AreEqual(typeof(JObject), prop4.ComponentType)", span="1733-1733", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1032 [label="JObject o = JObject.Parse(''{'prop1':12,'prop2':'hi!','prop3':null,'prop4':[1,2,3]}'')", span="1702-1702", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1036 [label="PropertyDescriptor prop1 = properties[0]", span="1709-1709", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1042 [label="PropertyDescriptor prop2 = properties[1]", span="1716-1716", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1048 [label="PropertyDescriptor prop3 = properties[2]", span="1723-1723", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1054 [label="PropertyDescriptor prop4 = properties[3]", span="1730-1730", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1034 [label="PropertyDescriptorCollection properties = descriptor.GetProperties()", span="1706-1706", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1033 [label="ICustomTypeDescriptor descriptor = o", span="1704-1704", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1060 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", span="1700-1700", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetProperties()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_808 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAllowNew()", span="1306-1306", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAllowNew()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_810 [label="Assert.AreEqual(true, l.AllowNew)", span="1309-1309", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAllowNew()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_809 [label="IBindingList l = new JObject()", span="1308-1308", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAllowNew()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_811 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAllowNew()", span="1306-1306", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAllowNew()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1192 [label="Entry Newtonsoft.Json.Tests.TestObjects.Person.Person()", span="36-36", cluster="Newtonsoft.Json.Tests.TestObjects.Person.Person()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_33 [label="var creator = DynamicReflectionDelegateFactory.Instance.CreateParameterizedConstructor(constructor)", span="85-85", cluster="Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.ConstructorWithRefStringAndRefBoolAndRefBool()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_603 [label="Entry System.Collections.IList.Insert(int, object)", span="0-0", cluster="System.Collections.IList.Insert(int, object)", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_310 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.Iterate()", span="520-520", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Iterate()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_317 [label="Assert.AreEqual(''PropertyNameValue'' + i, property.Name)", span="531-531", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Iterate()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_318 [label="Assert.AreEqual(i, (int)property.Value)", span="532-532", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Iterate()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_311 [label="JObject o = new JObject()", span="522-522", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Iterate()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_315 [label="int i = 1", span="528-528", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Iterate()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_316 [label=t, span="529-529", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Iterate()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_319 [label="i++", span="534-534", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Iterate()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_312 [label="o.Add(''PropertyNameValue1'', new JValue(1))", span="523-523", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Iterate()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_313 [label="o.Add(''PropertyNameValue2'', new JValue(2))", span="524-524", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Iterate()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_314 [label="JToken t = o", span="526-526", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Iterate()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_320 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.Iterate()", span="520-520", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Iterate()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_14 [label="Entry lambda expression", span="56-56", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_198 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyToNegativeArrayIndexShouldThrow()", span="346-346", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyToNegativeArrayIndexShouldThrow()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_199 [label="ExceptionAssert.Throws<ArgumentOutOfRangeException>(() =>\r\n            {\r\n                JObject o = new JObject();\r\n                ((ICollection<KeyValuePair<string, JToken>>)o).CopyTo(new KeyValuePair<string, JToken>[1], -1);\r\n            }, @''arrayIndex is less than 0.\r\nParameter name: arrayIndex'')", span="348-353", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyToNegativeArrayIndexShouldThrow()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_200 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyToNegativeArrayIndexShouldThrow()", span="346-346", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyToNegativeArrayIndexShouldThrow()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_91 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.Remove()", span="193-193", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Remove()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_92 [label="JObject o = new JObject()", span="195-195", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Remove()", file="DynamicReflectionDelegateFactoryTests.cs", color=green, community=0];
m1_93 [label="o.Add(''PropertyNameValue'', new JValue(1))", span="196-196", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Remove()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_94 [label="Assert.AreEqual(1, o.Children().Count())", span="197-197", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Remove()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_95 [label="Assert.AreEqual(false, o.Remove(''sdf''))", span="199-199", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Remove()", file="DynamicReflectionDelegateFactoryTests.cs", color=green, community=0];
m1_96 [label="Assert.AreEqual(false, o.Remove(null))", span="200-200", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Remove()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_97 [label="Assert.AreEqual(true, o.Remove(''PropertyNameValue''))", span="201-201", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Remove()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_98 [label="Assert.AreEqual(0, o.Children().Count())", span="203-203", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Remove()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_99 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.Remove()", span="193-193", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Remove()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_889 [label="Entry System.ComponentModel.ITypedList.GetItemProperties(System.ComponentModel.PropertyDescriptor[])", span="0-0", cluster="System.ComponentModel.ITypedList.GetItemProperties(System.ComponentModel.PropertyDescriptor[])", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_0 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.EmbedJValueStringInNewJObject()", span="65-65", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.EmbedJValueStringInNewJObject()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1 [label="string s = null", span="67-67", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.EmbedJValueStringInNewJObject()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_2 [label="var v = new JValue(s)", span="68-68", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.EmbedJValueStringInNewJObject()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_3 [label="dynamic o = JObject.FromObject(new { title = v })", span="69-69", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.EmbedJValueStringInNewJObject()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_4 [label="string output = o.ToString()", span="71-71", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.EmbedJValueStringInNewJObject()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_5 [label="StringAssert.AreEqual(@''{\r\n  ''''title'''': null\r\n}'', output)", span="73-75", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.EmbedJValueStringInNewJObject()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_6 [label="Assert.AreEqual(null, v.Value)", span="77-77", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.EmbedJValueStringInNewJObject()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_7 [label="Assert.IsNull((string)o.title)", span="78-78", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.EmbedJValueStringInNewJObject()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_100 [label="Entry Newtonsoft.Json.Linq.JObject.Remove(string)", span="498-498", cluster="Newtonsoft.Json.Linq.JObject.Remove(string)", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_256 [label="Entry Unk.IsTrue", span="", cluster="Unk.IsTrue", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_668 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenClear()", span="1082-1082", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenClear()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_671 [label="Assert.AreEqual(1, l.Count)", span="1087-1087", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenClear()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_673 [label="Assert.AreEqual(0, l.Count)", span="1091-1091", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenClear()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_670 [label="IList<JToken> l = new JObject(p)", span="1085-1085", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenClear()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_672 [label="l.Clear()", span="1089-1089", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenClear()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_669 [label="JProperty p = new JProperty(''Test'', 1)", span="1084-1084", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenClear()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_674 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenClear()", span="1082-1082", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenClear()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_721 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemove()", span="1167-1167", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemove()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_735 [label="Assert.AreEqual(null, p2.Parent)", span="1187-1187", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemove()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_727 [label="Assert.AreEqual(2, l.Count)", span="1177-1177", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemove()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_729 [label="Assert.AreEqual(1, l.Count)", span="1180-1180", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemove()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_733 [label="Assert.AreEqual(0, l.Count)", span="1185-1185", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemove()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_723 [label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="1170-1170", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemove()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_734 [label="Assert.IsFalse(l.Contains(p2))", span="1186-1186", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemove()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_724 [label="IList<JToken> l = new JObject(p1, p2)", span="1171-1171", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemove()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_726 [label="Assert.IsFalse(l.Remove(p3))", span="1176-1176", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemove()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_728 [label="Assert.IsTrue(l.Remove(p1))", span="1179-1179", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemove()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_730 [label="Assert.IsFalse(l.Contains(p1))", span="1181-1181", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemove()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_732 [label="Assert.IsTrue(l.Remove(p2))", span="1184-1184", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemove()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_722 [label="JProperty p1 = new JProperty(''Test1'', 1)", span="1169-1169", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemove()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_725 [label="JProperty p3 = new JProperty(''Test3'', ''III'')", span="1173-1173", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemove()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_731 [label="Assert.IsTrue(l.Contains(p2))", span="1182-1182", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemove()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_736 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemove()", span="1167-1167", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemove()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_277 [label="Entry Newtonsoft.Json.Linq.JObject.Parse(string)", span="359-359", cluster="Newtonsoft.Json.Linq.JObject.Parse(string)", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1174 [label="Entry Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver.CamelCasePropertyNamesContractResolver()", span="38-38", cluster="Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver.CamelCasePropertyNamesContractResolver()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_946 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GetGeocodeAddress()", span="1498-1498", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetGeocodeAddress()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_950 [label="Assert.AreEqual(''435 N Mulford Rd'', searchAddress)", span="1548-1548", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetGeocodeAddress()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_949 [label="string searchAddress = (string)o[''Placemark''][0][''AddressDetails''][''Country''][''AdministrativeArea''][''SubAdministrativeArea''][''Locality''][''Thoroughfare''][''ThoroughfareName'']", span="1547-1547", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetGeocodeAddress()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_948 [label="JObject o = JObject.Parse(json)", span="1545-1545", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetGeocodeAddress()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_947 [label="string json = @''{\r\n  ''''name'''': ''''Address: 435 North Mulford Road Rockford, IL 61107'''',\r\n  ''''Status'''': {\r\n    ''''code'''': 200,\r\n    ''''request'''': ''''geocode''''\r\n  },\r\n  ''''Placemark'''': [ {\r\n    ''''id'''': ''''p1'''',\r\n    ''''address'''': ''''435 N Mulford Rd, Rockford, IL 61107, USA'''',\r\n    ''''AddressDetails'''': {\r\n   ''''Accuracy'''' : 8,\r\n   ''''Country'''' : {\r\n      ''''AdministrativeArea'''' : {\r\n         ''''AdministrativeAreaName'''' : ''''IL'''',\r\n         ''''SubAdministrativeArea'''' : {\r\n            ''''Locality'''' : {\r\n               ''''LocalityName'''' : ''''Rockford'''',\r\n               ''''PostalCode'''' : {\r\n                  ''''PostalCodeNumber'''' : ''''61107''''\r\n               },\r\n               ''''Thoroughfare'''' : {\r\n                  ''''ThoroughfareName'''' : ''''435 N Mulford Rd''''\r\n               }\r\n            },\r\n            ''''SubAdministrativeAreaName'''' : ''''Winnebago''''\r\n         }\r\n      },\r\n      ''''CountryName'''' : ''''USA'''',\r\n      ''''CountryNameCode'''' : ''''US''''\r\n   }\r\n},\r\n    ''''ExtendedData'''': {\r\n      ''''LatLonBox'''': {\r\n        ''''north'''': 42.2753076,\r\n        ''''south'''': 42.2690124,\r\n        ''''east'''': -88.9964645,\r\n        ''''west'''': -89.0027597\r\n      }\r\n    },\r\n    ''''Point'''': {\r\n      ''''coordinates'''': [ -88.9995886, 42.2721596, 0 ]\r\n    }\r\n  } ]\r\n}''", span="1500-1543", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetGeocodeAddress()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_951 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GetGeocodeAddress()", span="1498-1498", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetGeocodeAddress()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_165 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericDictionaryContains()", span="297-297", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericDictionaryContains()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_168 [label="Assert.AreEqual(1, o.Children().Count())", span="301-301", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericDictionaryContains()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_170 [label="Assert.AreEqual(true, contains)", span="304-304", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericDictionaryContains()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_166 [label="JObject o = new JObject()", span="299-299", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericDictionaryContains()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_167 [label="o.Add(''PropertyNameValue'', new JValue(1))", span="300-300", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericDictionaryContains()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_169 [label="bool contains = ((IDictionary<string, JToken>)o).ContainsKey(''PropertyNameValue'')", span="303-303", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericDictionaryContains()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_171 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericDictionaryContains()", span="297-297", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericDictionaryContains()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_123 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericDictionaryAdd()", span="234-234", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericDictionaryAdd()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_124 [label="JObject o = new JObject()", span="236-236", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericDictionaryAdd()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_125 [label="o.Add(''PropertyNameValue'', new JValue(1))", span="238-238", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericDictionaryAdd()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_784 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSortDirection()", span="1264-1264", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSortDirection()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_786 [label="Assert.AreEqual(ListSortDirection.Ascending, l.SortDirection)", span="1267-1267", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSortDirection()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_785 [label="IBindingList l = new JObject()", span="1266-1266", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSortDirection()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_787 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSortDirection()", span="1264-1264", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSortDirection()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_737 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemoveAt()", span="1191-1191", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemoveAt()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_743 [label="Assert.AreEqual(1, l.Count)", span="1201-1201", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemoveAt()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_745 [label="Assert.AreEqual(0, l.Count)", span="1204-1204", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemoveAt()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_740 [label="IList<JToken> l = new JObject(p1, p2)", span="1195-1195", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemoveAt()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_742 [label="l.Remove(p1)", span="1200-1200", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemoveAt()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_744 [label="l.Remove(p2)", span="1203-1203", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemoveAt()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_738 [label="JProperty p1 = new JProperty(''Test1'', 1)", span="1193-1193", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemoveAt()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_739 [label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="1194-1194", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemoveAt()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_741 [label="l.RemoveAt(0)", span="1198-1198", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemoveAt()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_746 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemoveAt()", span="1191-1191", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenRemoveAt()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_296 [label="Entry Newtonsoft.Json.Linq.JToken.Value<T>(object)", span="319-319", cluster="Newtonsoft.Json.Linq.JToken.Value<T>(object)", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_360 [label="Entry Newtonsoft.Json.Tests.TestObjects.Shortie.Shortie()", span="27-27", cluster="Newtonsoft.Json.Tests.TestObjects.Shortie.Shortie()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_591 [label="Entry System.Collections.IList.RemoveAt(int)", span="0-0", cluster="System.Collections.IList.RemoveAt(int)", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_828 [label="Entry System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor, System.ComponentModel.ListSortDirection)", span="0-0", cluster="System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor, System.ComponentModel.ListSortDirection)", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_74 [label="object structTest = new StructTest()", span="134-134", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_77 [label="Assert.AreEqual(''Hi'', ((StructTest)structTest).StringProperty)", span="140-140", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_79 [label="Exit lambda expression", span="132-143", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_82 [label="Entry Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.CreateSetWithBadObjectValue()", span="147-147", cluster="Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.CreateSetWithBadObjectValue()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_83 [label="ExceptionAssert.Throws<InvalidCastException>(() =>\r\n            {\r\n                Movie m = new Movie();\r\n\r\n                Action<object, object> setter = DynamicReflectionDelegateFactory.Instance.CreateSet<object>(typeof(Movie).GetProperty(''Name''));\r\n\r\n                setter(m, new Version(''1.1.1.1''));\r\n            }, ''Unable to cast object of type 'System.Version' to type 'System.String'.'')", span="149-156", cluster="Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.CreateSetWithBadObjectValue()", file="DynamicReflectionDelegateFactoryTests.cs", color=red, community=0];
m1_86 [label="Movie m = new Movie()", span="151-151", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_87 [label="Action<object, object> setter = DynamicReflectionDelegateFactory.Instance.CreateSet<object>(typeof(Movie).GetProperty(''Name''))", span="153-153", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", color=red, community=0];
m1_80 [label="Entry Newtonsoft.Json.Tests.TestObjects.StructTest.StructTest()", span="27-27", cluster="Newtonsoft.Json.Tests.TestObjects.StructTest.StructTest()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_84 [label="Exit Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.CreateSetWithBadObjectValue()", span="147-147", cluster="Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.CreateSetWithBadObjectValue()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_88 [label="setter(m, new Version(''1.1.1.1''))", span="155-155", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_75 [label="Action<object, object> setter = DynamicReflectionDelegateFactory.Instance.CreateSet<object>(typeof(StructTest).GetProperty(''StringProperty''))", span="136-136", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", color=red, community=0];
m1_76 [label="setter(structTest, ''Hi'')", span="138-138", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_78 [label="setter(new TimeSpan(), ''Hi'')", span="142-142", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_81 [label="Entry System.TimeSpan.TimeSpan()", span="0-0", cluster="System.TimeSpan.TimeSpan()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_85 [label="Entry lambda expression", span="149-156", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_89 [label="Exit lambda expression", span="149-156", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_385 [label="Entry Newtonsoft.Json.Linq.JValue.JValue(System.DateTime)", span="125-125", cluster="Newtonsoft.Json.Linq.JValue.JValue(System.DateTime)", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_59 [label="Exit Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.CreateSetWithBadObjectTarget()", span="110-110", cluster="Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.CreateSetWithBadObjectTarget()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_61 [label="Person p = new Person()", span="114-114", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_63 [label="Action<object, object> setter = DynamicReflectionDelegateFactory.Instance.CreateSet<object>(typeof(Movie).GetProperty(''Name''))", span="117-117", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs", color=red, community=0];
m1_65 [label="Assert.AreEqual(m.Name, ''Hi'')", span="121-121", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_62 [label="Movie m = new Movie()", span="115-115", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_64 [label="setter(m, ''Hi'')", span="119-119", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_66 [label="setter(p, ''Hi'')", span="123-123", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_57 [label="Entry Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.CreateSetWithBadObjectTarget()", span="110-110", cluster="Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.CreateSetWithBadObjectTarget()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_58 [label="ExceptionAssert.Throws<InvalidCastException>(() =>\r\n            {\r\n                Person p = new Person();\r\n                Movie m = new Movie();\r\n\r\n                Action<object, object> setter = DynamicReflectionDelegateFactory.Instance.CreateSet<object>(typeof(Movie).GetProperty(''Name''));\r\n\r\n                setter(m, ''Hi'');\r\n\r\n                Assert.AreEqual(m.Name, ''Hi'');\r\n\r\n                setter(p, ''Hi'');\r\n\r\n                Assert.AreEqual(p.Name, ''Hi'');\r\n            }, ''Unable to cast object of type 'Newtonsoft.Json.Tests.TestObjects.Organization.Person' to type 'Newtonsoft.Json.Tests.TestObjects.Movie'.'')", span="112-126", cluster="Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.CreateSetWithBadObjectTarget()", file="DynamicReflectionDelegateFactoryTests.cs", color=red, community=0];
m1_60 [label="Entry lambda expression", span="112-126", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_67 [label="Assert.AreEqual(p.Name, ''Hi'')", span="125-125", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_147 [label="Entry System.Collections.Generic.ICollection<T>.Clear()", span="0-0", cluster="System.Collections.Generic.ICollection<T>.Clear()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_410 [label="Entry Newtonsoft.Json.Linq.JObject.JObject(params object[])", span="104-104", cluster="Newtonsoft.Json.Linq.JObject.JObject(params object[])", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_604 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IListIsReadOnly()", span="984-984", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListIsReadOnly()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_605 [label="IList l = new JObject()", span="986-986", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListIsReadOnly()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_606 [label="Assert.IsFalse(l.IsReadOnly)", span="987-987", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListIsReadOnly()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_607 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IListIsReadOnly()", span="984-984", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListIsReadOnly()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_711 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAddPropertyWithExistingName()", span="1152-1152", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAddPropertyWithExistingName()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_712 [label="ExceptionAssert.Throws<ArgumentException>(() =>\r\n            {\r\n                JProperty p1 = new JProperty(''Test1'', 1);\r\n                JProperty p2 = new JProperty(''Test2'', ''Two'');\r\n                IList<JToken> l = new JObject(p1, p2);\r\n\r\n                JProperty p3 = new JProperty(''Test2'', ''II'');\r\n\r\n                l.Add(p3);\r\n            }, ''Can not add property Test2 to Newtonsoft.Json.Linq.JObject. Property with the same name already exists on object.'')", span="1154-1163", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAddPropertyWithExistingName()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_713 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAddPropertyWithExistingName()", span="1152-1152", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAddPropertyWithExistingName()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1063 [label="Entry System.ComponentModel.PropertyDescriptor.ShouldSerializeValue(object)", span="0-0", cluster="System.ComponentModel.PropertyDescriptor.ShouldSerializeValue(object)", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1081 [label="Entry System.Uri.Uri(string)", span="0-0", cluster="System.Uri.Uri(string)", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_499 [label="Entry Newtonsoft.Json.Linq.JObject.JObject(object)", span="113-113", cluster="Newtonsoft.Json.Linq.JObject.JObject(object)", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_608 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IListIsFixedSize()", span="991-991", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListIsFixedSize()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_609 [label="IList l = new JObject()", span="993-993", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListIsFixedSize()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_610 [label="Assert.IsFalse(l.IsFixedSize)", span="994-994", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListIsFixedSize()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_611 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IListIsFixedSize()", span="991-991", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListIsFixedSize()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_231 [label="Entry Newtonsoft.Json.Linq.JRaw.JRaw(object)", span="48-48", cluster="Newtonsoft.Json.Linq.JRaw.JRaw(object)", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1064 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.ParseEmptyObjectWithComment()", span="1740-1740", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseEmptyObjectWithComment()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1066 [label="Assert.AreEqual(0, o.Count)", span="1743-1743", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseEmptyObjectWithComment()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1065 [label="JObject o = JObject.Parse(''{ /* A Comment */ }'')", span="1742-1742", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseEmptyObjectWithComment()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1067 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.ParseEmptyObjectWithComment()", span="1740-1740", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseEmptyObjectWithComment()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_269 [label="Entry Newtonsoft.Json.JsonSerializer.Deserialize(Newtonsoft.Json.JsonReader, System.Type)", span="700-700", cluster="Newtonsoft.Json.JsonSerializer.Deserialize(Newtonsoft.Json.JsonReader, System.Type)", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_837 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListRemoveIndex()", span="1348-1348", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListRemoveIndex()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_838 [label="IBindingList l = new JObject()", span="1350-1350", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListRemoveIndex()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_839 [label="l.RemoveIndex(null)", span="1352-1352", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListRemoveIndex()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_840 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListRemoveIndex()", span="1348-1348", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListRemoveIndex()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_632 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItemInvalid()", span="1029-1029", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItemInvalid()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_633 [label="ExceptionAssert.Throws<ArgumentException>(() =>\r\n            {\r\n                JProperty p1 = new JProperty(''Test1'', 1);\r\n                JProperty p2 = new JProperty(''Test2'', ''Two'');\r\n                IList l = new JObject(p1, p2);\r\n\r\n                l[0] = new JValue(true);\r\n            }, @''Can not add Newtonsoft.Json.Linq.JValue to Newtonsoft.Json.Linq.JObject.'')", span="1031-1038", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItemInvalid()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_634 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItemInvalid()", span="1029-1029", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItemInvalid()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_792 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSupportsChangeNotification()", span="1278-1278", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSupportsChangeNotification()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_794 [label="Assert.AreEqual(true, l.SupportsChangeNotification)", span="1281-1281", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSupportsChangeNotification()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_793 [label="IBindingList l = new JObject()", span="1280-1280", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSupportsChangeNotification()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_795 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSupportsChangeNotification()", span="1278-1278", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSupportsChangeNotification()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_675 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenCopyTo()", span="1095-1095", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenCopyTo()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_681 [label="Assert.AreEqual(p1, a[0])", span="1105-1105", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenCopyTo()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_682 [label="Assert.AreEqual(p2, a[1])", span="1106-1106", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenCopyTo()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_676 [label="JProperty p1 = new JProperty(''Test1'', 1)", span="1097-1097", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenCopyTo()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_679 [label="JToken[] a = new JToken[l.Count]", span="1101-1101", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenCopyTo()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_680 [label="l.CopyTo(a, 0)", span="1103-1103", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenCopyTo()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_677 [label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="1098-1098", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenCopyTo()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_678 [label="IList<JToken> l = new JObject(p1, p2)", span="1099-1099", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenCopyTo()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_683 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenCopyTo()", span="1095-1095", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenCopyTo()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_971 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullDBNullValue()", span="1588-1588", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullDBNullValue()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_974 [label="Assert.AreEqual(DBNull.Value, v.Value)", span="1592-1592", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullDBNullValue()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_975 [label="Assert.AreEqual(JTokenType.Null, v.Type)", span="1593-1593", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullDBNullValue()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_976 [label="JObject o = new JObject()", span="1595-1595", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullDBNullValue()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_973 [label="JValue v = new JValue(dbNull)", span="1591-1591", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullDBNullValue()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_977 [label="o[''title''] = v", span="1596-1596", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullDBNullValue()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_978 [label="string output = o.ToString()", span="1598-1598", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullDBNullValue()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_972 [label="DBNull dbNull = DBNull.Value", span="1590-1590", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullDBNullValue()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_979 [label="StringAssert.AreEqual(@''{\r\n  ''''title'''': null\r\n}'', output)", span="1600-1602", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullDBNullValue()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_980 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullDBNullValue()", span="1588-1588", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullDBNullValue()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_101 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionRemove()", span="207-207", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionRemove()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_69 [label="Entry Newtonsoft.Json.Tests.TestObjects.Movie.Movie()", span="30-30", cluster="Newtonsoft.Json.Tests.TestObjects.Movie.Movie()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_45 [label="ExceptionAssert.Throws<InvalidCastException>(() =>\r\n            {\r\n                Person p = new Person();\r\n                p.Name = ''Hi'';\r\n\r\n                Func<object, object> setter = DynamicReflectionDelegateFactory.Instance.CreateGet<object>(typeof(Movie).GetProperty(''Name''));\r\n\r\n                setter(p);\r\n            }, ''Unable to cast object of type 'Newtonsoft.Json.Tests.TestObjects.Organization.Person' to type 'Newtonsoft.Json.Tests.TestObjects.Movie'.'')", span="98-106", cluster="Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.CreateGetWithBadObjectTarget()", file="DynamicReflectionDelegateFactoryTests.cs", color=red, community=0];
m1_1193 [label="Entry Newtonsoft.Json.JsonSerializerSettings.JsonSerializerSettings()", span="382-382", cluster="Newtonsoft.Json.JsonSerializerSettings.JsonSerializerSettings()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_284 [label="Entry Newtonsoft.Json.JsonConvert.DeserializeObject(string)", span="703-703", cluster="Newtonsoft.Json.JsonConvert.DeserializeObject(string)", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1018 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.LoadFromNestedObjectIncomplete()", span="1676-1676", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.LoadFromNestedObjectIncomplete()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1019 [label="ExceptionAssert.Throws<JsonReaderException>(() =>\r\n            {\r\n                string jsonText = @''{\r\n  ''''short'''':\r\n  {\r\n    ''''error'''':\r\n    {\r\n      ''''code'''':0'';\r\n\r\n                JsonReader reader = new JsonTextReader(new StringReader(jsonText));\r\n                reader.Read();\r\n                reader.Read();\r\n                reader.Read();\r\n                reader.Read();\r\n                reader.Read();\r\n\r\n                JToken.ReadFrom(reader);\r\n            }, ''Unexpected end of content while loading JObject. Path 'short.error.code', line 6, position 15.'')", span="1678-1695", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.LoadFromNestedObjectIncomplete()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1020 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.LoadFromNestedObjectIncomplete()", span="1676-1676", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.LoadFromNestedObjectIncomplete()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_126 [label="Entry Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.StructMethod(Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.TestStruct)", span="215-215", cluster="Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.StructMethod(Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.TestStruct)", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_128 [label="Exit Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.StructMethod(Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.TestStruct)", span="215-215", cluster="Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.StructMethod(Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.TestStruct)", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_129 [label="Entry Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.CreateStructMethodCall()", span="221-221", cluster="Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.CreateStructMethodCall()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_127 [label="return new TestStruct(s.Value + s.Value);", span="217-217", cluster="Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.StructMethod(Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.TestStruct)", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_130 [label="MethodInfo methodInfo = typeof(DynamicReflectionDelegateFactoryTests).GetMethod(nameof(StructMethod), new[] { typeof(TestStruct) })", span="223-223", cluster="Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.CreateStructMethodCall()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_71 [label="ExceptionAssert.Throws<InvalidCastException>(() =>\r\n            {\r\n                object structTest = new StructTest();\r\n\r\n                Action<object, object> setter = DynamicReflectionDelegateFactory.Instance.CreateSet<object>(typeof(StructTest).GetProperty(''StringProperty''));\r\n\r\n                setter(structTest, ''Hi'');\r\n\r\n                Assert.AreEqual(''Hi'', ((StructTest)structTest).StringProperty);\r\n\r\n                setter(new TimeSpan(), ''Hi'');\r\n            }, ''Specified cast is not valid.'')", span="132-143", cluster="Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.CreateSetWithBadTarget()", file="DynamicReflectionDelegateFactoryTests.cs", color=red, community=0];
m1_18 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="89-89", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReadWithSupportMultipleContent()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1111 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.ToListOnEmptyObject()", span="1844-1844", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ToListOnEmptyObject()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1114 [label="Assert.AreEqual(0, l1.Count)", span="1848-1848", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ToListOnEmptyObject()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1116 [label="Assert.AreEqual(0, l2.Count)", span="1851-1851", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ToListOnEmptyObject()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1119 [label="Assert.AreEqual(1, l1.Count)", span="1856-1856", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ToListOnEmptyObject()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1121 [label="Assert.AreEqual(1, l2.Count)", span="1859-1859", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ToListOnEmptyObject()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1113 [label="IList<JToken> l1 = o.ToList<JToken>()", span="1847-1847", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ToListOnEmptyObject()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1115 [label="IList<KeyValuePair<string, JToken>> l2 = o.ToList<KeyValuePair<string, JToken>>()", span="1850-1850", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ToListOnEmptyObject()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1117 [label="o = JObject.Parse(@''{'hi':null}'')", span="1853-1853", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ToListOnEmptyObject()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1118 [label="l1 = o.ToList<JToken>()", span="1855-1855", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ToListOnEmptyObject()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1120 [label="l2 = o.ToList<KeyValuePair<string, JToken>>()", span="1858-1858", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ToListOnEmptyObject()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1112 [label="JObject o = JObject.Parse(@''{}'')", span="1846-1846", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ToListOnEmptyObject()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1122 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.ToListOnEmptyObject()", span="1844-1844", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ToListOnEmptyObject()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_882 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.ITypedListGetItemProperties()", span="1408-1408", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ITypedListGetItemProperties()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_883 [label="JProperty p1 = new JProperty(''Test1'', 1)", span="1410-1410", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ITypedListGetItemProperties()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_884 [label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="1411-1411", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ITypedListGetItemProperties()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_887 [label="Assert.IsNull(propertyDescriptors)", span="1415-1415", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ITypedListGetItemProperties()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_885 [label="ITypedList l = new JObject(p1, p2)", span="1412-1412", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ITypedListGetItemProperties()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_886 [label="PropertyDescriptorCollection propertyDescriptors = l.GetItemProperties(null)", span="1414-1414", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ITypedListGetItemProperties()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_888 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.ITypedListGetItemProperties()", span="1408-1408", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ITypedListGetItemProperties()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_413 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", span="721-721", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_424 [label="Assert.AreEqual(''value1'', (string)o[''StringValue''])", span="745-745", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_433 [label="Assert.AreEqual(''value2'', (string)o[''StringValue''])", span="756-756", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_439 [label="Assert.AreEqual(null, (string)o[''StringValue''])", span="763-763", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_445 [label="Assert.AreEqual(JValue.CreateNull(), o[''NullValue''])", span="770-770", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_422 [label="Assert.AreEqual(null, changing)", span="743-743", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_423 [label="Assert.AreEqual(''value1'', changed)", span="744-744", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_425 [label="Assert.AreEqual(1, changingCount)", span="746-746", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_426 [label="Assert.AreEqual(1, changedCount)", span="747-747", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_428 [label="Assert.AreEqual(1, changingCount)", span="750-750", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_429 [label="Assert.AreEqual(1, changedCount)", span="751-751", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_431 [label="Assert.AreEqual(''value1'', changing)", span="754-754", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_432 [label="Assert.AreEqual(''value2'', changed)", span="755-755", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_434 [label="Assert.AreEqual(2, changingCount)", span="757-757", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_435 [label="Assert.AreEqual(2, changedCount)", span="758-758", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_437 [label="Assert.AreEqual(''value2'', changing)", span="761-761", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_438 [label="Assert.AreEqual(null, changed)", span="762-762", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_440 [label="Assert.AreEqual(3, changingCount)", span="764-764", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_441 [label="Assert.AreEqual(3, changedCount)", span="765-765", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_443 [label="Assert.AreEqual(null, changing)", span="768-768", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_444 [label="Assert.AreEqual(null, changed)", span="769-769", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_446 [label="Assert.AreEqual(4, changingCount)", span="771-771", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_447 [label="Assert.AreEqual(4, changedCount)", span="772-772", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_449 [label="Assert.AreEqual(4, changingCount)", span="775-775", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_450 [label="Assert.AreEqual(4, changedCount)", span="776-776", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_418 [label="JObject o = new JObject()", span="728-728", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_421 [label="o[''StringValue''] = ''value1''", span="742-742", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_427 [label="o[''StringValue''] = ''value1''", span="749-749", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_430 [label="o[''StringValue''] = ''value2''", span="753-753", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_436 [label="o[''StringValue''] = null", span="760-760", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_442 [label="o[''NullValue''] = null", span="767-767", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_448 [label="o[''NullValue''] = null", span="774-774", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_417 [label="int changedCount = 0", span="726-726", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_419 [label="o.PropertyChanging += (sender, args) =>\r\n            {\r\n                JObject s = (JObject)sender;\r\n                changing = (s[args.PropertyName] != null) ? ((JValue)s[args.PropertyName]).Value : null;\r\n                changingCount++;\r\n            }", span="729-734", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_420 [label="o.PropertyChanged += (sender, args) =>\r\n            {\r\n                JObject s = (JObject)sender;\r\n                changed = (s[args.PropertyName] != null) ? ((JValue)s[args.PropertyName]).Value : null;\r\n                changedCount++;\r\n            }", span="735-740", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_416 [label="int changingCount = 0", span="725-725", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_414 [label="object changing = null", span="723-723", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_415 [label="object changed = null", span="724-724", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_451 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", span="721-721", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanging()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_164 [label="Entry System.Collections.Generic.ICollection<T>.Contains(T)", span="0-0", cluster="System.Collections.Generic.ICollection<T>.Contains(T)", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_820 [label="Entry System.ComponentModel.IBindingList.AddIndex(System.ComponentModel.PropertyDescriptor)", span="0-0", cluster="System.ComponentModel.IBindingList.AddIndex(System.ComponentModel.PropertyDescriptor)", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_31 [label="Entry Newtonsoft.Json.Linq.JToken.ReadFrom(Newtonsoft.Json.JsonReader)", span="1849-1849", cluster="Newtonsoft.Json.Linq.JToken.ReadFrom(Newtonsoft.Json.JsonReader)", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_32 [label="Entry System.Collections.Generic.ICollection<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.ICollection<T>.Add(T)", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_34 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.JObjectWithComments()", span="108-108", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JObjectWithComments()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_35 [label="string json = @''{ /*comment2*/\r\n        ''''Name'''': /*comment3*/ ''''Apple'''' /*comment4*/, /*comment5*/\r\n        ''''ExpiryDate'''': ''''\/Date(1230422400000)\/'''',\r\n        ''''Price'''': 3.99,\r\n        ''''Sizes'''': /*comment6*/ [ /*comment7*/\r\n          ''''Small'''', /*comment8*/\r\n          ''''Medium'''' /*comment9*/,\r\n          /*comment10*/ ''''Large''''\r\n        /*comment11*/ ] /*comment12*/\r\n      } /*comment13*/''", span="110-119", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JObjectWithComments()", file="DynamicReflectionDelegateFactoryTests.cs", color=green, community=0];
m1_36 [label="JToken o = JToken.Parse(json)", span="121-121", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JObjectWithComments()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_37 [label="Assert.AreEqual(''Apple'', (string) o[''Name''])", span="123-123", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JObjectWithComments()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_38 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.JObjectWithComments()", span="108-108", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JObjectWithComments()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_39 [label="Entry Newtonsoft.Json.Linq.JToken.Parse(string)", span="1902-1902", cluster="Newtonsoft.Json.Linq.JToken.Parse(string)", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_40 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.WritePropertyWithNoValue()", span="127-127", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WritePropertyWithNoValue()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_278 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.ParseJavaScriptDate()", span="471-471", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseJavaScriptDate()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_282 [label="Assert.AreEqual(DateTimeUtils.ConvertJavaScriptTicksToDateTime(1207285200000), (DateTime)v)", span="478-478", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseJavaScriptDate()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_281 [label="JValue v = (JValue)a[0]", span="476-476", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseJavaScriptDate()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_280 [label="JArray a = (JArray)JsonConvert.DeserializeObject(json)", span="475-475", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseJavaScriptDate()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_279 [label="string json = @''[new Date(1207285200000)]''", span="473-473", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseJavaScriptDate()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_283 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.ParseJavaScriptDate()", span="471-471", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseJavaScriptDate()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1124 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.EmptyObjectDeepEquals()", span="1863-1863", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.EmptyObjectDeepEquals()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1125 [label="Assert.IsTrue(JToken.DeepEquals(new JObject(), new JObject()))", span="1865-1865", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.EmptyObjectDeepEquals()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1126 [label="JObject a = new JObject()", span="1867-1867", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.EmptyObjectDeepEquals()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1127 [label="JObject b = new JObject()", span="1868-1868", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.EmptyObjectDeepEquals()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1129 [label="b.Remove(''hi'')", span="1871-1871", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.EmptyObjectDeepEquals()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1128 [label="b.Add(''hi'', ''bye'')", span="1870-1870", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.EmptyObjectDeepEquals()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1130 [label="Assert.IsTrue(JToken.DeepEquals(a, b))", span="1873-1873", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.EmptyObjectDeepEquals()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1131 [label="Assert.IsTrue(JToken.DeepEquals(b, a))", span="1874-1874", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.EmptyObjectDeepEquals()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1132 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.EmptyObjectDeepEquals()", span="1863-1863", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.EmptyObjectDeepEquals()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_205 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyToArrayIndexEqualGreaterToArrayLengthShouldThrow()", span="357-357", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyToArrayIndexEqualGreaterToArrayLengthShouldThrow()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_206 [label="ExceptionAssert.Throws<ArgumentException>(() =>\r\n            {\r\n                JObject o = new JObject();\r\n                ((ICollection<KeyValuePair<string, JToken>>)o).CopyTo(new KeyValuePair<string, JToken>[1], 1);\r\n            }, @''arrayIndex is equal to or greater than the length of array.'')", span="359-363", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyToArrayIndexEqualGreaterToArrayLengthShouldThrow()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_207 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyToArrayIndexEqualGreaterToArrayLengthShouldThrow()", span="357-357", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyToArrayIndexEqualGreaterToArrayLengthShouldThrow()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_702 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAddBadValue()", span="1138-1138", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAddBadValue()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_703 [label="ExceptionAssert.Throws<ArgumentException>(() =>\r\n            {\r\n                JProperty p1 = new JProperty(''Test1'', 1);\r\n                JProperty p2 = new JProperty(''Test2'', ''Two'');\r\n                IList<JToken> l = new JObject(p1, p2);\r\n\r\n                // string is implicitly converted to JValue\r\n                l.Add(''Bad!'');\r\n            }, ''Can not add Newtonsoft.Json.Linq.JValue to Newtonsoft.Json.Linq.JObject.'')", span="1140-1148", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAddBadValue()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_704 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAddBadValue()", span="1138-1138", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAddBadValue()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_759 [label="Entry System.Collections.Generic.IList<T>.Insert(int, T)", span="0-0", cluster="System.Collections.Generic.IList<T>.Insert(int, T)", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_959 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.SetValue()", span="1562-1562", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.SetValue()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_963 [label="Assert.AreEqual(3, (int)o[key])", span="1569-1569", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.SetValue()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_961 [label="JObject o = new JObject()", span="1566-1566", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.SetValue()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_960 [label="object key = ''TestKey''", span="1564-1564", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.SetValue()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_962 [label="o[key] = new JValue(3)", span="1567-1567", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.SetValue()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_964 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.SetValue()", span="1562-1562", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.SetValue()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_812 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAllowRemove()", span="1313-1313", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAllowRemove()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_814 [label="Assert.AreEqual(true, l.AllowRemove)", span="1316-1316", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAllowRemove()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_813 [label="IBindingList l = new JObject()", span="1315-1315", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAllowRemove()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_815 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAllowRemove()", span="1313-1313", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAllowRemove()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_10 [label="Entry Newtonsoft.Json.Linq.JObject.FromObject(object)", span="377-377", cluster="Newtonsoft.Json.Linq.JObject.FromObject(object)", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_44 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.WritePropertyWithNoValue()", span="127-127", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WritePropertyWithNoValue()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_46 [label="Entry Newtonsoft.Json.Linq.JProperty.JProperty(string)", span="270-270", cluster="Newtonsoft.Json.Linq.JProperty.JProperty(string)", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_257 [label="Entry Unk.IsFalse", span="", cluster="Unk.IsFalse", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_113 [label="Entry Unk.call", span="", cluster="Unk.call", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_11 [label="Entry Unk.ToString", span="", cluster="Unk.ToString", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_112 [label="Entry System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", span="0-0", cluster="System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_409 [label="Entry Newtonsoft.Json.Linq.JProperty.JProperty(string, object)", span="293-293", cluster="Newtonsoft.Json.Linq.JProperty.JProperty(string, object)", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_8 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.EmbedJValueStringInNewJObject()", span="65-65", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.EmbedJValueStringInNewJObject()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_321 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.KeyValuePairIterate()", span="539-539", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.KeyValuePairIterate()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_327 [label="Assert.AreEqual(''PropertyNameValue'' + i, pair.Key)", span="548-548", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.KeyValuePairIterate()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_328 [label="Assert.AreEqual(i, (int)pair.Value)", span="549-549", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.KeyValuePairIterate()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_322 [label="JObject o = new JObject()", span="541-541", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.KeyValuePairIterate()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_326 [label=o, span="546-546", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.KeyValuePairIterate()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_325 [label="int i = 1", span="545-545", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.KeyValuePairIterate()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_329 [label="i++", span="551-551", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.KeyValuePairIterate()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_323 [label="o.Add(''PropertyNameValue1'', new JValue(1))", span="542-542", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.KeyValuePairIterate()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_324 [label="o.Add(''PropertyNameValue2'', new JValue(2))", span="543-543", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.KeyValuePairIterate()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_330 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.KeyValuePairIterate()", span="539-539", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.KeyValuePairIterate()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_796 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSupportsSearching()", span="1285-1285", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSupportsSearching()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_798 [label="Assert.AreEqual(false, l.SupportsSearching)", span="1288-1288", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSupportsSearching()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_797 [label="IBindingList l = new JObject()", span="1287-1287", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSupportsSearching()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_799 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSupportsSearching()", span="1285-1285", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSupportsSearching()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_526 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IListAdd()", span="870-870", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListAdd()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_532 [label="Assert.AreEqual(3, l.Count)", span="880-880", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListAdd()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_533 [label="Assert.AreEqual(p3, l[2])", span="881-881", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListAdd()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_529 [label="IList l = new JObject(p1, p2)", span="874-874", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListAdd()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_531 [label="l.Add(p3)", span="878-878", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListAdd()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_530 [label="JProperty p3 = new JProperty(''Test3'', ''III'')", span="876-876", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListAdd()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_527 [label="JProperty p1 = new JProperty(''Test1'', 1)", span="872-872", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListAdd()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_528 [label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="873-873", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListAdd()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_534 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IListAdd()", span="870-870", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListAdd()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_836 [label="Entry System.ComponentModel.IBindingList.RemoveSort()", span="0-0", cluster="System.ComponentModel.IBindingList.RemoveSort()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1165 [label="Entry Newtonsoft.Json.Linq.JObject.TryGetValue(string, System.StringComparison, out Newtonsoft.Json.Linq.JToken)", span="465-465", cluster="Newtonsoft.Json.Linq.JObject.TryGetValue(string, System.StringComparison, out Newtonsoft.Json.Linq.JToken)", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1017 [label="Entry Newtonsoft.Json.Linq.JToken.ToString(Newtonsoft.Json.Formatting, params Newtonsoft.Json.JsonConverter[])", span="421-421", cluster="Newtonsoft.Json.Linq.JToken.ToString(Newtonsoft.Json.Formatting, params Newtonsoft.Json.JsonConverter[])", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_649 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IListIsSynchronized()", span="1052-1052", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListIsSynchronized()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_650 [label="JProperty p1 = new JProperty(''Test1'', 1)", span="1054-1054", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListIsSynchronized()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_651 [label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="1055-1055", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListIsSynchronized()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_653 [label="Assert.IsFalse(l.IsSynchronized)", span="1058-1058", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListIsSynchronized()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_652 [label="IList l = new JObject(p1, p2)", span="1056-1056", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListIsSynchronized()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_654 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IListIsSynchronized()", span="1052-1052", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListIsSynchronized()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_875 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.ITypedListGetListName()", span="1398-1398", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ITypedListGetListName()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_879 [label="Assert.AreEqual(string.Empty, l.GetListName(null))", span="1404-1404", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ITypedListGetListName()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_878 [label="ITypedList l = new JObject(p1, p2)", span="1402-1402", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ITypedListGetListName()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_876 [label="JProperty p1 = new JProperty(''Test1'', 1)", span="1400-1400", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ITypedListGetListName()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_877 [label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="1401-1401", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ITypedListGetListName()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_880 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.ITypedListGetListName()", span="1398-1398", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ITypedListGetListName()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_592 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IListInsert()", span="967-967", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListInsert()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_599 [label="Assert.AreEqual(p1, l[0])", span="978-978", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListInsert()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_601 [label="Assert.AreEqual(p2, l[2])", span="980-980", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListInsert()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_598 [label="Assert.AreEqual(l, p3.Parent)", span="976-976", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListInsert()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_600 [label="Assert.AreEqual(p3, l[1])", span="979-979", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListInsert()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_593 [label="JProperty p1 = new JProperty(''Test1'', 1)", span="969-969", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListInsert()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_595 [label="IList l = new JObject(p1, p2)", span="971-971", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListInsert()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_594 [label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="970-970", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListInsert()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_596 [label="JProperty p3 = new JProperty(''Test3'', ''III'')", span="973-973", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListInsert()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_597 [label="l.Insert(1, p3)", span="975-975", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListInsert()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_602 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IListInsert()", span="967-967", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListInsert()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1194 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.FooJsonConverter.FooJsonConverter()", span="1927-1927", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FooJsonConverter.FooJsonConverter()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_146 [label="Entry System.Collections.Generic.IEnumerable<TSource>.ElementAt<TSource>(int)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.ElementAt<TSource>(int)", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_788 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSortProperty()", span="1271-1271", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSortProperty()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_790 [label="Assert.AreEqual(null, l.SortProperty)", span="1274-1274", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSortProperty()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_789 [label="IBindingList l = new JObject()", span="1273-1273", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSortProperty()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_791 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSortProperty()", span="1271-1271", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSortProperty()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_29 [label="c.GetParameters().Count() == 2", span="69-69", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1074 [label="Entry Newtonsoft.Json.Linq.JToken.FromObject(object)", span="1674-1674", cluster="Newtonsoft.Json.Linq.JToken.FromObject(object)", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_109 [label="Assert.IsNotNull(result)", span="188-188", cluster="Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.CreatePropertyGetter()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_105 [label="var call = DynamicReflectionDelegateFactory.Instance.CreateGet<Person>(namePropertyInfo)", span="182-182", cluster="Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.CreatePropertyGetter()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_106 [label="Person p = new Person()", span="184-184", cluster="Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.CreatePropertyGetter()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_107 [label="p.Name = ''Name!''", span="185-185", cluster="Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.CreatePropertyGetter()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_108 [label="object result = call(p)", span="187-187", cluster="Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.CreatePropertyGetter()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_110 [label="Assert.AreEqual(''Name!'', (string)result)", span="190-190", cluster="Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.CreatePropertyGetter()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_103 [label="PropertyInfo namePropertyInfo = typeof(Person).GetProperty(nameof(Person.Name))", span="178-178", cluster="Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.CreatePropertyGetter()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_102 [label="Entry Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.CreatePropertyGetter()", span="176-176", cluster="Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.CreatePropertyGetter()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_104 [label="Assert.IsNotNull(namePropertyInfo)", span="180-180", cluster="Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.CreatePropertyGetter()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_111 [label="Exit Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.CreatePropertyGetter()", span="176-176", cluster="Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.CreatePropertyGetter()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_114 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.DuplicatePropertyNameShouldThrow()", span="223-223", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DuplicatePropertyNameShouldThrow()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_115 [label="ExceptionAssert.Throws<ArgumentException>(() =>\r\n            {\r\n                JObject o = new JObject();\r\n                o.Add(''PropertyNameValue'', null);\r\n                o.Add(''PropertyNameValue'', null);\r\n            }, ''Can not add property PropertyNameValue to Newtonsoft.Json.Linq.JObject. Property with the same name already exists on object.'')", span="225-230", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DuplicatePropertyNameShouldThrow()", color=red, community=0, file="DynamicReflectionDelegateFactoryTests.cs"];
m1_116 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.DuplicatePropertyNameShouldThrow()", span="223-223", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DuplicatePropertyNameShouldThrow()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_117 [label="Entry Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", span="354-354", cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_118 [label="Entry lambda expression", span="225-230", cluster="lambda expression", color=red, community=0, file="DynamicReflectionDelegateFactoryTests.cs"];
m1_119 [label="JObject o = new JObject()", span="227-227", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_120 [label="o.Add(''PropertyNameValue'', null)", span="228-228", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_121 [label="o.Add(''PropertyNameValue'', null)", span="229-229", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_191 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyToNullArrayShouldThrow()", span="335-335", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyToNullArrayShouldThrow()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_192 [label="ExceptionAssert.Throws<ArgumentException>(() =>\r\n            {\r\n                JObject o = new JObject();\r\n                ((ICollection<KeyValuePair<string, JToken>>)o).CopyTo(null, 0);\r\n            }, @''Value cannot be null.\r\nParameter name: array'')", span="337-342", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyToNullArrayShouldThrow()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_193 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyToNullArrayShouldThrow()", span="335-335", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyToNullArrayShouldThrow()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1166 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.FooJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", span="1929-1929", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FooJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1170 [label="o.AddFirst(new JProperty(''foo'', ''bar''))", span="1938-1938", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FooJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1167 [label="var token = JToken.FromObject(value, new JsonSerializer\r\n                {\r\n                    ContractResolver = new CamelCasePropertyNamesContractResolver()\r\n                })", span="1931-1934", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FooJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1169 [label="var o = (JObject)token", span="1937-1937", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FooJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1171 [label="o.WriteTo(writer)", span="1939-1939", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FooJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1168 [label="token.Type == JTokenType.Object", span="1935-1935", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FooJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1172 [label="token.WriteTo(writer)", span="1942-1942", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FooJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1173 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.FooJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", span="1929-1929", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FooJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1076 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectUri()", span="1756-1756", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectUri()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1078 [label="Assert.AreEqual(v.Value, new Uri(''http://www.stuff.co.nz''))", span="1759-1759", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectUri()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1079 [label="Assert.AreEqual(''http://www.stuff.co.nz/'', v.ToString())", span="1761-1761", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectUri()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1077 [label="JValue v = (JValue)JToken.FromObject(new Uri(''http://www.stuff.co.nz''))", span="1758-1758", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectUri()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1080 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectUri()", span="1756-1756", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectUri()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_952 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.SetValueWithInvalidPropertyName()", span="1552-1552", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.SetValueWithInvalidPropertyName()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_953 [label="ExceptionAssert.Throws<ArgumentException>(() =>\r\n            {\r\n                JObject o = new JObject();\r\n                o[0] = new JValue(3);\r\n            }, ''Set JObject values with invalid key value: 0. Object property name expected.'')", span="1554-1558", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.SetValueWithInvalidPropertyName()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_954 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.SetValueWithInvalidPropertyName()", span="1552-1552", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.SetValueWithInvalidPropertyName()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1195 [label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.JsonSerializerSettings)", span="570-570", cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.JsonSerializerSettings)", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_68 [label="Exit lambda expression", span="112-126", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_849 [label="Entry System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor, object)", span="0-0", cluster="System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor, object)", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_621 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItemAlreadyExists()", span="1013-1013", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItemAlreadyExists()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_622 [label="ExceptionAssert.Throws<ArgumentException>(() =>\r\n            {\r\n                JProperty p1 = new JProperty(''Test1'', 1);\r\n                JProperty p2 = new JProperty(''Test2'', ''Two'');\r\n                IList l = new JObject(p1, p2);\r\n\r\n                JProperty p3 = new JProperty(''Test3'', ''III'');\r\n\r\n                l[0] = p3;\r\n                l[1] = p3;\r\n            }, ''Can not add property Test3 to Newtonsoft.Json.Linq.JObject. Property with the same name already exists on object.'')", span="1015-1025", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItemAlreadyExists()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_623 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItemAlreadyExists()", span="1013-1013", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItemAlreadyExists()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_47 [label="Entry Newtonsoft.Json.Linq.JContainer.Add(object)", span="569-569", cluster="Newtonsoft.Json.Linq.JContainer.Add(object)", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_412 [label="Entry Newtonsoft.Json.Linq.JObject.Properties()", span="229-229", cluster="Newtonsoft.Json.Linq.JObject.Properties()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1108 [label="Entry Newtonsoft.Json.Linq.JProperty.JProperty(string, params object[])", span="283-283", cluster="Newtonsoft.Json.Linq.JProperty.JProperty(string, params object[])", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_841 [label="Entry System.ComponentModel.IBindingList.RemoveIndex(System.ComponentModel.PropertyDescriptor)", span="0-0", cluster="System.ComponentModel.IBindingList.RemoveIndex(System.ComponentModel.PropertyDescriptor)", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_981 [label="Entry Newtonsoft.Json.Linq.JValue.JValue(object)", span="190-190", cluster="Newtonsoft.Json.Linq.JValue.JValue(object)", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1073 [label="Entry System.TimeSpan.FromDays(double)", span="0-0", cluster="System.TimeSpan.FromDays(double)", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_131 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionAdd()", span="248-248", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionAdd()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_132 [label="JObject o = new JObject()", span="250-250", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionAdd()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_133 [label="((ICollection<KeyValuePair<string, JToken>>)o).Add(new KeyValuePair<string, JToken>(''PropertyNameValue'', new JValue(1)))", span="251-251", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionAdd()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_134 [label="Assert.AreEqual(1, (int)o[''PropertyNameValue''])", span="253-253", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionAdd()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_135 [label="Assert.AreEqual(1, o.Children().Count())", span="254-254", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionAdd()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_136 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionAdd()", span="248-248", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionAdd()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_350 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeClassManually()", span="602-602", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeClassManually()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_354 [label="Assert.AreEqual(''http://www.foo.com/'', shortie.Original)", span="630-630", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeClassManually()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_355 [label="Assert.AreEqual(''krehqk'', shortie.Short)", span="631-631", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeClassManually()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_356 [label="Assert.AreEqual(null, shortie.Shortened)", span="632-632", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeClassManually()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_357 [label="Assert.AreEqual(0, shortie.Error.Code)", span="633-633", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeClassManually()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_358 [label="Assert.AreEqual(''No action taken'', shortie.Error.ErrorMessage)", span="634-634", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeClassManually()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_353 [label="Shortie shortie = new Shortie\r\n            {\r\n                Original = (string)json[''short''][''original''],\r\n                Short = (string)json[''short''][''short''],\r\n                Error = new ShortieException\r\n                {\r\n                    Code = (int)json[''short''][''error''][''code''],\r\n                    ErrorMessage = (string)json[''short''][''error''][''msg'']\r\n                }\r\n            }", span="619-628", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeClassManually()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_352 [label="JObject json = JObject.Parse(jsonText)", span="617-617", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeClassManually()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_351 [label="string jsonText = @''{\r\n  ''''short'''':\r\n  {\r\n    ''''original'''':''''http://www.foo.com/'''',\r\n    ''''short'''':''''krehqk'''',\r\n    ''''error'''':\r\n    {\r\n      ''''code'''':0,\r\n      ''''msg'''':''''No action taken''''\r\n    }\r\n  }\r\n}''", span="604-615", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeClassManually()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_359 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeClassManually()", span="602-602", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeClassManually()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_516 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IListCopyTo()", span="855-855", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListCopyTo()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_522 [label="Assert.AreEqual(p1, a[0])", span="865-865", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListCopyTo()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_523 [label="Assert.AreEqual(p2, a[1])", span="866-866", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListCopyTo()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_517 [label="JProperty p1 = new JProperty(''Test1'', 1)", span="857-857", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListCopyTo()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_520 [label="object[] a = new object[l.Count]", span="861-861", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListCopyTo()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_521 [label="l.CopyTo(a, 0)", span="863-863", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListCopyTo()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_518 [label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="858-858", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListCopyTo()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_519 [label="IList l = new JObject(p1, p2)", span="859-859", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListCopyTo()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_524 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IListCopyTo()", span="855-855", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListCopyTo()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_255 [label="Entry Newtonsoft.Json.JsonReader.Read()", span="365-365", cluster="Newtonsoft.Json.JsonReader.Read()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_48 [label="Entry lambda expression", span="98-106", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_15 [label="c.GetParameters().Count() == 1", span="56-56", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_24 [label="Assert.IsNotNull(o)", span="75-75", cluster="Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.ConstructorWithRefStringAndOutBool()", color=green, community=0, file="DynamicReflectionDelegateFactoryTests.cs"];
m1_17 [label="Entry System.Reflection.MethodBase.GetParameters()", span="0-0", cluster="System.Reflection.MethodBase.GetParameters()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_23 [label="OutAndRefTestClass o = (OutAndRefTestClass)creator(args)", span="74-74", cluster="Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.ConstructorWithRefStringAndOutBool()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_20 [label="ConstructorInfo constructor = typeof(OutAndRefTestClass).GetConstructors().Single(c => c.GetParameters().Count() == 2)", span="69-69", cluster="Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.ConstructorWithRefStringAndOutBool()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_25 [label="Assert.AreEqual(''Input'', o.Input)", span="76-76", cluster="Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.ConstructorWithRefStringAndOutBool()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_16 [label="Exit lambda expression", span="56-56", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_22 [label="object[] args = new object[] { ''Input'', false }", span="73-73", cluster="Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.ConstructorWithRefStringAndOutBool()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_26 [label="Assert.AreEqual(true, o.B1)", span="77-77", cluster="Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.ConstructorWithRefStringAndOutBool()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_19 [label="Entry Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.ConstructorWithRefStringAndOutBool()", span="67-67", cluster="Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.ConstructorWithRefStringAndOutBool()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_21 [label="var creator = DynamicReflectionDelegateFactory.Instance.CreateParameterizedConstructor(constructor)", span="71-71", cluster="Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.ConstructorWithRefStringAndOutBool()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_27 [label="Exit Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.ConstructorWithRefStringAndOutBool()", span="67-67", cluster="Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.ConstructorWithRefStringAndOutBool()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_222 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectRaw()", span="381-381", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectRaw()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_225 [label="Assert.AreEqual(''FirstNameValue'', (string)o[''first_name''])", span="392-392", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectRaw()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_226 [label="Assert.AreEqual(JTokenType.Raw, ((JValue)o[''RawContent'']).Type)", span="393-393", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectRaw()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_227 [label="Assert.AreEqual(''[1,2,3,4,5]'', (string)o[''RawContent''])", span="394-394", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectRaw()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_228 [label="Assert.AreEqual(''LastNameValue'', (string)o[''last_name''])", span="395-395", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectRaw()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_224 [label="JObject o = JObject.FromObject(raw)", span="390-390", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectRaw()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_223 [label="PersonRaw raw = new PersonRaw\r\n            {\r\n                FirstName = ''FirstNameValue'',\r\n                RawContent = new JRaw(''[1,2,3,4,5]''),\r\n                LastName = ''LastNameValue''\r\n            }", span="383-388", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectRaw()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_229 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectRaw()", span="381-381", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectRaw()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_268 [label="Entry Newtonsoft.Json.JsonSerializer.JsonSerializer()", span="445-445", cluster="Newtonsoft.Json.JsonSerializer.JsonSerializer()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_232 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()", span="399-399", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_237 [label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="413-413", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_239 [label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="416-416", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_241 [label="Assert.AreEqual(JsonToken.String, reader.TokenType)", span="419-419", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_243 [label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="422-422", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_245 [label="Assert.AreEqual(JsonToken.Raw, reader.TokenType)", span="425-425", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_247 [label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="428-428", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_249 [label="Assert.AreEqual(JsonToken.String, reader.TokenType)", span="431-431", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_251 [label="Assert.AreEqual(JsonToken.EndObject, reader.TokenType)", span="434-434", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_235 [label="JsonReader reader = new JTokenReader(o)", span="410-410", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_236 [label="Assert.IsTrue(reader.Read())", span="412-412", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_238 [label="Assert.IsTrue(reader.Read())", span="415-415", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_240 [label="Assert.IsTrue(reader.Read())", span="418-418", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_242 [label="Assert.IsTrue(reader.Read())", span="421-421", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_244 [label="Assert.IsTrue(reader.Read())", span="424-424", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_246 [label="Assert.IsTrue(reader.Read())", span="427-427", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_248 [label="Assert.IsTrue(reader.Read())", span="430-430", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_250 [label="Assert.IsTrue(reader.Read())", span="433-433", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_252 [label="Assert.IsFalse(reader.Read())", span="436-436", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_234 [label="JObject o = JObject.FromObject(raw)", span="408-408", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_233 [label="PersonRaw raw = new PersonRaw\r\n            {\r\n                FirstName = ''FirstNameValue'',\r\n                RawContent = new JRaw(''[1,2,3,4,5]''),\r\n                LastName = ''LastNameValue''\r\n            }", span="401-406", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_253 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()", span="399-399", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JTokenReader()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_41 [label="Entry lambda expression", span="83-83", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_42 [label="c.GetParameters().Count() == 3", span="83-83", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_43 [label="Exit lambda expression", span="83-83", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1140 [label="Entry Newtonsoft.Json.Linq.JObject.GetValue(string, System.StringComparison)", span="433-433", cluster="Newtonsoft.Json.Linq.JObject.GetValue(string, System.StringComparison)", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1088 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.ParseAdditionalContent()", span="1774-1774", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseAdditionalContent()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1089 [label="ExceptionAssert.Throws<JsonReaderException>(() =>\r\n            {\r\n                string json = @''{\r\n''''Name'''': ''''Apple'''',\r\n''''Expiry'''': new Date(1230422400000),\r\n''''Price'''': 3.99,\r\n''''Sizes'''': [\r\n''''Small'''',\r\n''''Medium'''',\r\n''''Large''''\r\n]\r\n}, 987987'';\r\n\r\n                JObject o = JObject.Parse(json);\r\n            }, ''Additional text encountered after finished reading JSON content: ,. Path '', line 10, position 2.'')", span="1776-1790", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseAdditionalContent()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1090 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.ParseAdditionalContent()", span="1774-1774", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseAdditionalContent()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_9 [label="Entry Unk.Single", span="", cluster="Unk.Single", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_918 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()", span="1459-1459", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_929 [label="Assert.AreEqual(p3, ((IList<JToken>)o)[index.Value])", span="1479-1479", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_934 [label="Assert.AreEqual(p4, ((IList<JToken>)o)[index.Value])", span="1486-1486", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_940 [label="Assert.AreEqual(2, (int)o[''Test1''])", span="1493-1493", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_927 [label="Assert.AreEqual(changedType, NotifyCollectionChangedAction.Add)", span="1477-1477", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_928 [label="Assert.AreEqual(index, 2)", span="1478-1478", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_932 [label="Assert.AreEqual(changedType, NotifyCollectionChangedAction.Replace)", span="1484-1484", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_933 [label="Assert.AreEqual(index, 2)", span="1485-1485", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_938 [label="Assert.AreEqual(changedType, NotifyCollectionChangedAction.Replace)", span="1491-1491", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_939 [label="Assert.AreEqual(index, 0)", span="1492-1492", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_921 [label="JObject o = new JObject(p1, p2)", span="1463-1463", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_925 [label="JProperty p3 = new JProperty(''Test3'', ''III'')", span="1474-1474", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_930 [label="JProperty p4 = new JProperty(''Test4'', ''IV'')", span="1481-1481", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_935 [label="Assert.IsFalse(((IList<JToken>)o).Contains(p3))", span="1487-1487", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_926 [label="o.Add(p3)", span="1476-1476", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_931 [label="((IList<JToken>)o)[index.Value] = p4", span="1483-1483", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_937 [label="o[''Test1''] = 2", span="1490-1490", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_919 [label="JProperty p1 = new JProperty(''Test1'', 1)", span="1461-1461", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_920 [label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="1462-1462", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_922 [label="NotifyCollectionChangedAction? changedType = null", span="1465-1465", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_924 [label="o._collectionChanged += (s, a) =>\r\n            {\r\n                changedType = a.Action;\r\n                index = a.NewStartingIndex;\r\n            }", span="1468-1472", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_936 [label="Assert.IsTrue(((IList<JToken>)o).Contains(p4))", span="1488-1488", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_923 [label="int? index = null", span="1466-1466", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_941 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()", span="1459-1459", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.CollectionChanged()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_212 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyToInsufficientArrayCapacity()", span="367-367", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyToInsufficientArrayCapacity()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_213 [label="ExceptionAssert.Throws<ArgumentException>(() =>\r\n            {\r\n                JObject o = new JObject();\r\n                o.Add(''PropertyNameValue'', new JValue(1));\r\n                o.Add(''PropertyNameValue2'', new JValue(2));\r\n                o.Add(''PropertyNameValue3'', new JValue(3));\r\n\r\n                ((ICollection<KeyValuePair<string, JToken>>)o).CopyTo(new KeyValuePair<string, JToken>[3], 1);\r\n            }, @''The number of elements in the source JObject is greater than the available space from arrayIndex to the end of the destination array.'')", span="369-377", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyToInsufficientArrayCapacity()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_214 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyToInsufficientArrayCapacity()", span="367-367", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionCopyToInsufficientArrayCapacity()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_500 [label="Entry System.Collections.IList.Contains(object)", span="0-0", cluster="System.Collections.IList.Contains(object)", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_122 [label="Exit lambda expression", span="225-230", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_816 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddIndex()", span="1320-1320", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddIndex()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_817 [label="IBindingList l = new JObject()", span="1322-1322", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddIndex()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_818 [label="l.AddIndex(null)", span="1324-1324", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddIndex()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_819 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddIndex()", span="1320-1320", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddIndex()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_70 [label="Entry Newtonsoft.Json.Linq.JContainer.Children()", span="251-251", cluster="Newtonsoft.Json.Linq.JContainer.Children()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_72 [label="Entry Newtonsoft.Json.Linq.JObject.TryGetValue(string, out Newtonsoft.Json.Linq.JToken)", span="514-514", cluster="Newtonsoft.Json.Linq.JObject.TryGetValue(string, out Newtonsoft.Json.Linq.JToken)", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_861 [label="Entry System.ComponentModel.IBindingList.AddNew()", span="0-0", cluster="System.ComponentModel.IBindingList.AddNew()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_545 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IListAddBadValue()", span="898-898", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListAddBadValue()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_546 [label="ExceptionAssert.Throws<ArgumentException>(() =>\r\n            {\r\n                JProperty p1 = new JProperty(''Test1'', 1);\r\n                JProperty p2 = new JProperty(''Test2'', ''Two'');\r\n                IList l = new JObject(p1, p2);\r\n\r\n                l.Add(''Bad!'');\r\n            }, ''Argument is not a JToken.'')", span="900-907", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListAddBadValue()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_547 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IListAddBadValue()", span="898-898", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListAddBadValue()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_990 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.InvalidPropertyValueCastExceptionMessage()", span="1624-1624", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.InvalidPropertyValueCastExceptionMessage()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_991 [label="ExceptionAssert.Throws<ArgumentException>(() =>\r\n            {\r\n                string json = @''{\r\n  ''''responseData'''': {}, \r\n  ''''responseDetails'''': null, \r\n  ''''responseStatus'''': 200\r\n}'';\r\n\r\n                JObject o = JObject.Parse(json);\r\n\r\n                string name = (string)o.Property(''responseData'');\r\n            }, ''Can not convert Object to String.'')", span="1626-1637", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.InvalidPropertyValueCastExceptionMessage()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_992 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.InvalidPropertyValueCastExceptionMessage()", span="1624-1624", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.InvalidPropertyValueCastExceptionMessage()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_13 [label="Entry Unk.AreEqual", span="", cluster="Unk.AreEqual", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_501 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IListIndexOf()", span="832-832", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListIndexOf()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_504 [label="Assert.AreEqual(0, l.IndexOf(p))", span="837-837", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListIndexOf()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_505 [label="Assert.AreEqual(-1, l.IndexOf(new JProperty(''Test'', 1)))", span="838-838", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListIndexOf()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_502 [label="JProperty p = new JProperty(''Test'', 1)", span="834-834", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListIndexOf()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_503 [label="IList l = new JObject(p)", span="835-835", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListIndexOf()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_506 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IListIndexOf()", span="832-832", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListIndexOf()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_667 [label="Entry System.Collections.Generic.IList<T>.IndexOf(T)", span="0-0", cluster="System.Collections.Generic.IList<T>.IndexOf(T)", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_386 [label="Entry System.DateTime.DateTime(int, int, int)", span="0-0", cluster="System.DateTime.DateTime(int, int, int)", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_800 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSupportsSorting()", span="1292-1292", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSupportsSorting()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_802 [label="Assert.AreEqual(false, l.SupportsSorting)", span="1295-1295", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSupportsSorting()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_801 [label="IBindingList l = new JObject()", span="1294-1294", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSupportsSorting()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_803 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSupportsSorting()", span="1292-1292", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListSupportsSorting()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_648 [label="Entry Unk.IsNotNull", span="", cluster="Unk.IsNotNull", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_12 [label="Entry Newtonsoft.Json.Tests.StringAssert.AreEqual(string, string)", span="327-327", cluster="Newtonsoft.Json.Tests.StringAssert.AreEqual(string, string)", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_172 [label="Entry System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0", cluster="System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_829 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListRemoveSort()", span="1338-1338", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListRemoveSort()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_830 [label="ExceptionAssert.Throws<NotSupportedException>(() =>\r\n            {\r\n                IBindingList l = new JObject();\r\n                l.RemoveSort();\r\n            }, ''Specified method is not supported.'')", span="1340-1344", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListRemoveSort()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_831 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListRemoveSort()", span="1338-1338", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListRemoveSort()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_580 [label="Entry System.Collections.IList.Remove(object)", span="0-0", cluster="System.Collections.IList.Remove(object)", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_554 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IListAddPropertyWithExistingName()", span="911-911", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListAddPropertyWithExistingName()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_555 [label="ExceptionAssert.Throws<ArgumentException>(() =>\r\n            {\r\n                JProperty p1 = new JProperty(''Test1'', 1);\r\n                JProperty p2 = new JProperty(''Test2'', ''Two'');\r\n                IList l = new JObject(p1, p2);\r\n\r\n                JProperty p3 = new JProperty(''Test2'', ''II'');\r\n\r\n                l.Add(p3);\r\n            }, ''Can not add property Test2 to Newtonsoft.Json.Linq.JObject. Property with the same name already exists on object.'')", span="913-922", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListAddPropertyWithExistingName()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_556 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IListAddPropertyWithExistingName()", span="911-911", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListAddPropertyWithExistingName()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1164 [label="Entry Newtonsoft.Json.Linq.JObject.GetValue(string)", span="420-420", cluster="Newtonsoft.Json.Linq.JObject.GetValue(string)", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_641 [label="Entry Newtonsoft.Json.Linq.JValue.JValue(bool)", span="145-145", cluster="Newtonsoft.Json.Linq.JValue.JValue(bool)", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_258 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeFromRaw()", span="440-440", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeFromRaw()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_264 [label="Assert.AreEqual(''FirstNameValue'', raw.FirstName)", span="455-455", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeFromRaw()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_265 [label="Assert.AreEqual(''LastNameValue'', raw.LastName)", span="456-456", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeFromRaw()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_266 [label="Assert.AreEqual(''[1,2,3,4,5]'', raw.RawContent.Value)", span="457-457", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeFromRaw()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_263 [label="raw = (PersonRaw)serializer.Deserialize(reader, typeof(PersonRaw))", span="453-453", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeFromRaw()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_261 [label="JsonReader reader = new JTokenReader(o)", span="451-451", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeFromRaw()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_262 [label="JsonSerializer serializer = new JsonSerializer()", span="452-452", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeFromRaw()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_260 [label="JObject o = JObject.FromObject(raw)", span="449-449", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeFromRaw()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_259 [label="PersonRaw raw = new PersonRaw\r\n            {\r\n                FirstName = ''FirstNameValue'',\r\n                RawContent = new JRaw(''[1,2,3,4,5]''),\r\n                LastName = ''LastNameValue''\r\n            }", span="442-447", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeFromRaw()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_267 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeFromRaw()", span="440-440", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeserializeFromRaw()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_331 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullStringValue()", span="556-556", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullStringValue()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_334 [label="Assert.AreEqual(null, v.Value)", span="560-560", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullStringValue()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_335 [label="Assert.AreEqual(JTokenType.String, v.Type)", span="561-561", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullStringValue()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_336 [label="JObject o = new JObject()", span="563-563", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullStringValue()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_333 [label="JValue v = new JValue(s)", span="559-559", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullStringValue()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_337 [label="o[''title''] = v", span="564-564", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullStringValue()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_338 [label="string output = o.ToString()", span="566-566", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullStringValue()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_332 [label="string s = null", span="558-558", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullStringValue()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_339 [label="StringAssert.AreEqual(@''{\r\n  ''''title'''': null\r\n}'', output)", span="568-570", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullStringValue()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_340 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullStringValue()", span="556-556", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.WriteObjectNullStringValue()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1141 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()", span="1896-1896", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1146 [label="Assert.AreEqual(null, a.GetValue(''NAME'', StringComparison.Ordinal))", span="1903-1903", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1147 [label="Assert.AreEqual(null, a.GetValue(''NAME''))", span="1904-1904", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1148 [label="Assert.AreEqual(null, a.GetValue(''TITLE''))", span="1905-1905", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1149 [label="Assert.AreEqual(''Name!'', (string)a.GetValue(''NAME'', StringComparison.OrdinalIgnoreCase))", span="1906-1906", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1150 [label="Assert.AreEqual(''name!'', (string)a.GetValue(''name'', StringComparison.Ordinal))", span="1907-1907", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1151 [label="Assert.AreEqual(null, a.GetValue(null, StringComparison.Ordinal))", span="1908-1908", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1152 [label="Assert.AreEqual(null, a.GetValue(null))", span="1909-1909", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1155 [label="Assert.AreEqual(null, v)", span="1913-1913", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1159 [label="Assert.AreEqual(''Name!'', (string)v)", span="1919-1919", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1161 [label="Assert.AreEqual(''name!'', (string)v)", span="1922-1922", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1142 [label="JObject a = new JObject()", span="1898-1898", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1145 [label="a[''title''] = ''Title!''", span="1901-1901", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1153 [label="JToken v", span="1911-1911", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1154 [label="Assert.IsFalse(a.TryGetValue(''NAME'', StringComparison.Ordinal, out v))", span="1912-1912", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1156 [label="Assert.IsFalse(a.TryGetValue(''NAME'', out v))", span="1915-1915", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1158 [label="Assert.IsTrue(a.TryGetValue(''NAME'', StringComparison.OrdinalIgnoreCase, out v))", span="1918-1918", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1160 [label="Assert.IsTrue(a.TryGetValue(''name'', StringComparison.Ordinal, out v))", span="1921-1921", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1162 [label="Assert.IsFalse(a.TryGetValue(null, StringComparison.Ordinal, out v))", span="1924-1924", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1143 [label="a[''Name''] = ''Name!''", span="1899-1899", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1144 [label="a[''name''] = ''name!''", span="1900-1900", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1157 [label="Assert.IsFalse(a.TryGetValue(''TITLE'', out v))", span="1916-1916", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1163 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()", span="1896-1896", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValue()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_362 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.JObjectContainingHtml()", span="638-638", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JObjectContainingHtml()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_363 [label="JObject o = new JObject()", span="640-640", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JObjectContainingHtml()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_364 [label="o[''rc''] = new JValue(200)", span="641-641", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JObjectContainingHtml()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_365 [label="o[''m''] = new JValue('''')", span="642-642", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JObjectContainingHtml()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_366 [label="o[''o''] = new JValue(@''<div class='s1'>'' + StringUtils.CarriageReturnLineFeed + @''</div>'')", span="643-643", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JObjectContainingHtml()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_367 [label="StringAssert.AreEqual(@''{\r\n  ''''rc'''': 200,\r\n  ''''m'''': '''''''',\r\n  ''''o'''': ''''<div class='s1'>\r\n</div>''''\r\n}'', o.ToString())", span="645-649", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JObjectContainingHtml()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_368 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.JObjectContainingHtml()", span="638-638", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.JObjectContainingHtml()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_747 [label="Entry System.Collections.Generic.IList<T>.RemoveAt(int)", span="0-0", cluster="System.Collections.Generic.IList<T>.RemoveAt(int)", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_890 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()", span="1419-1419", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_901 [label="Assert.AreEqual(p3, ((IList<JToken>)o)[index.Value])", span="1439-1439", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_906 [label="Assert.AreEqual(p4, ((IList<JToken>)o)[index.Value])", span="1446-1446", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_912 [label="Assert.AreEqual(2, (int)o[''Test1''])", span="1453-1453", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_899 [label="Assert.AreEqual(changedType, ListChangedType.ItemAdded)", span="1437-1437", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_900 [label="Assert.AreEqual(index, 2)", span="1438-1438", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_904 [label="Assert.AreEqual(changedType, ListChangedType.ItemChanged)", span="1444-1444", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_905 [label="Assert.AreEqual(index, 2)", span="1445-1445", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_910 [label="Assert.AreEqual(changedType, ListChangedType.ItemChanged)", span="1451-1451", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_911 [label="Assert.AreEqual(index, 0)", span="1452-1452", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_893 [label="JObject o = new JObject(p1, p2)", span="1423-1423", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_897 [label="JProperty p3 = new JProperty(''Test3'', ''III'')", span="1434-1434", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_902 [label="JProperty p4 = new JProperty(''Test4'', ''IV'')", span="1441-1441", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_907 [label="Assert.IsFalse(((IList<JToken>)o).Contains(p3))", span="1447-1447", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_898 [label="o.Add(p3)", span="1436-1436", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_903 [label="((IList<JToken>)o)[index.Value] = p4", span="1443-1443", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_909 [label="o[''Test1''] = 2", span="1450-1450", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_891 [label="JProperty p1 = new JProperty(''Test1'', 1)", span="1421-1421", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_892 [label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="1422-1422", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_894 [label="ListChangedType? changedType = null", span="1425-1425", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_896 [label="o.ListChanged += (s, a) =>\r\n            {\r\n                changedType = a.ListChangedType;\r\n                index = a.NewIndex;\r\n            }", span="1428-1432", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_908 [label="Assert.IsTrue(((IList<JToken>)o).Contains(p4))", span="1448-1448", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_895 [label="int? index = null", span="1426-1426", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_913 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()", span="1419-1419", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ListChanged()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1091 [label="Entry lambda expression", span="1776-1790", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_28 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_30 [label="Entry System.IO.StringReader.StringReader(string)", span="0-0", cluster="System.IO.StringReader.StringReader(string)", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_49 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.Keys()", span="138-138", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Keys()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_50 [label="var o = new JObject()", span="140-140", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Keys()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_52 [label="Assert.AreEqual(0, d.Keys.Count)", span="143-143", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Keys()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_51 [label="var d = (IDictionary<string, JToken>)o", span="141-141", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Keys()", color=red, community=0, file="DynamicReflectionDelegateFactoryTests.cs"];
m1_53 [label="o[''value''] = true", span="145-145", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Keys()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_73 [label="Entry Newtonsoft.Json.Linq.JToken.DeepEquals(Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken)", span="151-151", cluster="Newtonsoft.Json.Linq.JToken.DeepEquals(Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken)", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_195 [label="JObject o = new JObject()", span="339-339", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_202 [label="JObject o = new JObject()", span="350-350", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_209 [label="JObject o = new JObject()", span="361-361", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_216 [label="JObject o = new JObject()", span="371-371", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_825 [label="IBindingList l = new JObject()", span="1332-1332", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_833 [label="IBindingList l = new JObject()", span="1342-1342", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_846 [label="IBindingList l = new JObject()", span="1360-1360", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_858 [label="IBindingList l = new JObject()", span="1377-1377", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_956 [label="JObject o = new JObject()", span="1556-1556", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_454 [label="changing = (s[args.PropertyName] != null) ? ((JValue)s[args.PropertyName]).Value : null", span="732-732", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_459 [label="changed = (s[args.PropertyName] != null) ? ((JValue)s[args.PropertyName]).Value : null", span="738-738", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_455 [label="changingCount++", span="733-733", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_460 [label="changedCount++", span="739-739", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_490 [label="changed = (s[args.PropertyName] != null) ? ((JValue)s[args.PropertyName]).Value : null", span="790-790", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_491 [label="changedCount++", span="791-791", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_916 [label="index = a.NewIndex", span="1431-1431", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_915 [label="changedType = a.ListChangedType", span="1430-1430", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_944 [label="index = a.NewStartingIndex", span="1471-1471", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_943 [label="changedType = a.Action", span="1470-1470", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_217 [label="o.Add(''PropertyNameValue'', new JValue(1))", span="372-372", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_218 [label="o.Add(''PropertyNameValue2'', new JValue(2))", span="373-373", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_219 [label="o.Add(''PropertyNameValue3'', new JValue(3))", span="374-374", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_957 [label="o[0] = new JValue(3)", span="1557-1557", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_194 [label="Entry lambda expression", span="337-341", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_196 [label="((ICollection<KeyValuePair<string, JToken>>)o).CopyTo(null, 0)", span="340-340", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_201 [label="Entry lambda expression", span="348-352", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_203 [label="((ICollection<KeyValuePair<string, JToken>>)o).CopyTo(new KeyValuePair<string, JToken>[1], -1)", span="351-351", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_208 [label="Entry lambda expression", span="359-363", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_210 [label="((ICollection<KeyValuePair<string, JToken>>)o).CopyTo(new KeyValuePair<string, JToken>[1], 1)", span="362-362", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_215 [label="Entry lambda expression", span="369-377", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_220 [label="((ICollection<KeyValuePair<string, JToken>>)o).CopyTo(new KeyValuePair<string, JToken>[3], 1)", span="376-376", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_824 [label="Entry lambda expression", span="1330-1334", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_826 [label="l.ApplySort(null, ListSortDirection.Ascending)", span="1333-1333", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_832 [label="Entry lambda expression", span="1340-1344", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_834 [label="l.RemoveSort()", span="1343-1343", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_845 [label="Entry lambda expression", span="1358-1362", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_847 [label="l.Find(null, null)", span="1361-1361", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_857 [label="Entry lambda expression", span="1375-1379", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_859 [label="l.AddNew()", span="1378-1378", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_955 [label="Entry lambda expression", span="1554-1558", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1023 [label="JsonReader reader = new JsonTextReader(new StringReader(jsonText))", span="1687-1687", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_700 [label="l.Add(new JValue(''Bad!''))", span="1133-1133", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_709 [label="l.Add(''Bad!'')", span="1147-1147", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_719 [label="l.Add(p3)", span="1162-1162", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1029 [label="JToken.ReadFrom(reader)", span="1694-1694", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_453 [label="JObject s = (JObject)sender", span="731-731", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_452 [label="Entry lambda expression", span="729-734", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_456 [label="Exit lambda expression", span="729-734", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_458 [label="JObject s = (JObject)sender", span="737-737", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_457 [label="Entry lambda expression", span="735-740", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_461 [label="Exit lambda expression", span="735-740", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_489 [label="JObject s = (JObject)sender", span="789-789", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_488 [label="Entry lambda expression", span="787-792", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_492 [label="Exit lambda expression", span="787-792", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_540 [label="JProperty p1 = new JProperty(''Test1'', 1)", span="889-889", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_541 [label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="890-890", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_549 [label="JProperty p1 = new JProperty(''Test1'', 1)", span="902-902", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_550 [label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="903-903", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_558 [label="JProperty p1 = new JProperty(''Test1'', 1)", span="915-915", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_559 [label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="916-916", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_561 [label="JProperty p3 = new JProperty(''Test2'', ''II'')", span="919-919", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_625 [label="JProperty p1 = new JProperty(''Test1'', 1)", span="1017-1017", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_626 [label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="1018-1018", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_628 [label="JProperty p3 = new JProperty(''Test3'', ''III'')", span="1021-1021", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_636 [label="JProperty p1 = new JProperty(''Test1'', 1)", span="1033-1033", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_637 [label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="1034-1034", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_697 [label="JProperty p1 = new JProperty(''Test1'', 1)", span="1129-1129", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_698 [label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="1130-1130", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_706 [label="JProperty p1 = new JProperty(''Test1'', 1)", span="1142-1142", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_707 [label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="1143-1143", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_715 [label="JProperty p1 = new JProperty(''Test1'', 1)", span="1156-1156", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_716 [label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="1157-1157", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_718 [label="JProperty p3 = new JProperty(''Test2'', ''II'')", span="1160-1160", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_777 [label="JProperty p1 = new JProperty(''Test1'', 1)", span="1251-1251", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_778 [label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="1252-1252", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_780 [label="JProperty p3 = new JProperty(''Test3'', ''III'')", span="1255-1255", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_914 [label="Entry lambda expression", span="1428-1432", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_917 [label="Exit lambda expression", span="1428-1432", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_942 [label="Entry lambda expression", span="1468-1472", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_945 [label="Exit lambda expression", span="1468-1472", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_958 [label="Exit lambda expression", span="1554-1558", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_197 [label="Exit lambda expression", span="337-341", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_204 [label="Exit lambda expression", span="348-352", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_211 [label="Exit lambda expression", span="359-363", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_221 [label="Exit lambda expression", span="369-377", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_827 [label="Exit lambda expression", span="1330-1334", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_835 [label="Exit lambda expression", span="1340-1344", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_848 [label="Exit lambda expression", span="1358-1362", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_860 [label="Exit lambda expression", span="1375-1379", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_873 [label="e.NewObject = new JProperty(''Property!'')", span="1386-1386", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1022 [label="string jsonText = @''{\r\n  ''''short'''':\r\n  {\r\n    ''''error'''':\r\n    {\r\n      ''''code'''':0''", span="1680-1685", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1024 [label="reader.Read()", span="1688-1688", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1025 [label="reader.Read()", span="1689-1689", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1026 [label="reader.Read()", span="1690-1690", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1027 [label="reader.Read()", span="1691-1691", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1028 [label="reader.Read()", span="1692-1692", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_699 [label="IList<JToken> l = new JObject(p1, p2)", span="1131-1131", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_701 [label="Exit lambda expression", span="1127-1134", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_708 [label="IList<JToken> l = new JObject(p1, p2)", span="1144-1144", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_710 [label="Exit lambda expression", span="1140-1148", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_717 [label="IList<JToken> l = new JObject(p1, p2)", span="1158-1158", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_720 [label="Exit lambda expression", span="1154-1163", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1030 [label="Exit lambda expression", span="1678-1695", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_543 [label="l.Add(new JValue(''Bad!''))", span="893-893", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_542 [label="IList l = new JObject(p1, p2)", span="891-891", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_551 [label="IList l = new JObject(p1, p2)", span="904-904", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_560 [label="IList l = new JObject(p1, p2)", span="917-917", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_627 [label="IList l = new JObject(p1, p2)", span="1019-1019", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_638 [label="IList l = new JObject(p1, p2)", span="1035-1035", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_779 [label="IList<JToken> l = new JObject(p1, p2)", span="1253-1253", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_539 [label="Entry lambda expression", span="887-894", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_548 [label="Entry lambda expression", span="900-907", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_557 [label="Entry lambda expression", span="913-922", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_562 [label="l.Add(p3)", span="921-921", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_624 [label="Entry lambda expression", span="1015-1025", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_629 [label="l[0] = p3", span="1023-1023", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_630 [label="l[1] = p3", span="1024-1024", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_635 [label="Entry lambda expression", span="1031-1038", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_696 [label="Entry lambda expression", span="1127-1134", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_705 [label="Entry lambda expression", span="1140-1148", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_714 [label="Entry lambda expression", span="1154-1163", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_776 [label="Entry lambda expression", span="1249-1259", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_781 [label="l[0] = p3", span="1257-1257", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_782 [label="l[1] = p3", span="1258-1258", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_552 [label="l.Add(''Bad!'')", span="906-906", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_275 [label="JObject.Parse(json)", span="466-466", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_301 [label="JObject.Parse(@''{\r\n    ''''name'''': ''''James'''',\r\n    ]!#$THIS IS: BAD JSON![{}}}}]\r\n  }'')", span="498-501", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_987 [label="JObject o = JObject.Parse(json)", span="1617-1617", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_995 [label="JObject o = JObject.Parse(json)", span="1634-1634", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1003 [label="JObject.Parse(''{ foo:'')", span="1643-1643", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1093 [label="JObject o = JObject.Parse(json)", span="1789-1789", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_872 [label="Entry lambda expression", span="1386-1386", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_874 [label="Exit lambda expression", span="1386-1386", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1021 [label="Entry lambda expression", span="1678-1695", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_544 [label="Exit lambda expression", span="887-894", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_639 [label="l[0] = new JValue(true)", span="1037-1037", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_553 [label="Exit lambda expression", span="900-907", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_563 [label="Exit lambda expression", span="913-922", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_631 [label="Exit lambda expression", span="1015-1025", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_640 [label="Exit lambda expression", span="1031-1038", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_783 [label="Exit lambda expression", span="1249-1259", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_274 [label="string json = @''[''''prop'''']''", span="465-465", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_276 [label="Exit lambda expression", span="463-467", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_300 [label="Entry lambda expression", span="498-501", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_302 [label="Exit lambda expression", span="498-501", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_986 [label="string json = @''{\r\n  ''''responseData'''': {}, \r\n  ''''responseDetails'''': null, \r\n  ''''responseStatus'''': 200\r\n}''", span="1611-1615", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_988 [label="string name = (string)o[''responseData'']", span="1619-1619", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_994 [label="string json = @''{\r\n  ''''responseData'''': {}, \r\n  ''''responseDetails'''': null, \r\n  ''''responseStatus'''': 200\r\n}''", span="1628-1632", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_996 [label="string name = (string)o.Property(''responseData'')", span="1636-1636", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1002 [label="Entry lambda expression", span="1643-1643", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1004 [label="Exit lambda expression", span="1643-1643", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1092 [label="string json = @''{\r\n''''Name'''': ''''Apple'''',\r\n''''Expiry'''': new Date(1230422400000),\r\n''''Price'''': 3.99,\r\n''''Sizes'''': [\r\n''''Small'''',\r\n''''Medium'''',\r\n''''Large''''\r\n]\r\n}, 987987''", span="1778-1787", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1094 [label="Exit lambda expression", span="1776-1790", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_273 [label="Entry lambda expression", span="463-467", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_985 [label="Entry lambda expression", span="1609-1620", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_989 [label="Exit lambda expression", span="1609-1620", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_993 [label="Entry lambda expression", span="1626-1637", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_997 [label="Exit lambda expression", span="1626-1637", cluster="lambda expression", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_965 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.ParseMultipleProperties()", span="1573-1573", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseMultipleProperties()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_969 [label="Assert.AreEqual(''Name2'', value)", span="1583-1583", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseMultipleProperties()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_968 [label="string value = (string)o[''Name'']", span="1581-1581", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseMultipleProperties()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_967 [label="JObject o = JObject.Parse(json)", span="1580-1580", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseMultipleProperties()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_966 [label="string json = @''{\r\n        ''''Name'''': ''''Name1'''',\r\n        ''''Name'''': ''''Name2''''\r\n      }''", span="1575-1578", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseMultipleProperties()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_970 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.ParseMultipleProperties()", span="1573-1573", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseMultipleProperties()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_493 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IListContains()", span="822-822", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListContains()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_494 [label="JProperty p = new JProperty(''Test'', 1)", span="824-824", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListContains()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_497 [label="Assert.IsFalse(l.Contains(new JProperty(''Test'', 1)))", span="828-828", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListContains()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_496 [label="Assert.IsTrue(l.Contains(p))", span="827-827", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListContains()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_495 [label="IList l = new JObject(p)", span="825-825", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListContains()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_498 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IListContains()", span="822-822", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListContains()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1133 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GetValueBlogExample()", span="1878-1878", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValueBlogExample()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1137 [label="Assert.AreEqual(''Upper'', exactMatch)", span="1891-1891", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValueBlogExample()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1138 [label="Assert.AreEqual(''Lower'', ignoreCase)", span="1892-1892", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValueBlogExample()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1135 [label="string exactMatch = (string)o.GetValue(''NAME'', StringComparison.OrdinalIgnoreCase)", span="1885-1885", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValueBlogExample()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1136 [label="string ignoreCase = (string)o.GetValue(''Name'', StringComparison.OrdinalIgnoreCase)", span="1888-1888", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValueBlogExample()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1134 [label="JObject o = JObject.Parse(@''{\r\n        'name': 'Lower',\r\n        'NAME': 'Upper'\r\n      }'')", span="1880-1883", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValueBlogExample()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1139 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GetValueBlogExample()", span="1878-1878", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GetValueBlogExample()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_748 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenInsert()", span="1208-1208", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenInsert()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_755 [label="Assert.AreEqual(p1, l[0])", span="1219-1219", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenInsert()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_757 [label="Assert.AreEqual(p2, l[2])", span="1221-1221", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenInsert()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_754 [label="Assert.AreEqual(l, p3.Parent)", span="1217-1217", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenInsert()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_756 [label="Assert.AreEqual(p3, l[1])", span="1220-1220", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenInsert()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_749 [label="JProperty p1 = new JProperty(''Test1'', 1)", span="1210-1210", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenInsert()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_751 [label="IList<JToken> l = new JObject(p1, p2)", span="1212-1212", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenInsert()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_750 [label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="1211-1211", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenInsert()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_752 [label="JProperty p3 = new JProperty(''Test3'', ''III'')", span="1214-1214", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenInsert()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_753 [label="l.Insert(1, p3)", span="1216-1216", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenInsert()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_758 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenInsert()", span="1208-1208", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenInsert()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1005 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.LoadFromNestedObject()", span="1647-1647", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.LoadFromNestedObject()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1007 [label="JsonReader reader = new JsonTextReader(new StringReader(jsonText))", span="1660-1660", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.LoadFromNestedObject()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1013 [label="JObject o = (JObject)JToken.ReadFrom(reader)", span="1667-1667", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.LoadFromNestedObject()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1006 [label="string jsonText = @''{\r\n  ''''short'''':\r\n  {\r\n    ''''error'''':\r\n    {\r\n      ''''code'''':0,\r\n      ''''msg'''':''''No action taken''''\r\n    }\r\n  }\r\n}''", span="1649-1658", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.LoadFromNestedObject()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1008 [label="reader.Read()", span="1661-1661", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.LoadFromNestedObject()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1009 [label="reader.Read()", span="1662-1662", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.LoadFromNestedObject()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1010 [label="reader.Read()", span="1663-1663", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.LoadFromNestedObject()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1011 [label="reader.Read()", span="1664-1664", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.LoadFromNestedObject()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1012 [label="reader.Read()", span="1665-1665", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.LoadFromNestedObject()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1014 [label="Assert.IsNotNull(o)", span="1668-1668", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.LoadFromNestedObject()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1015 [label="StringAssert.AreEqual(@''{\r\n  ''''code'''': 0,\r\n  ''''msg'''': ''''No action taken''''\r\n}'', o.ToString(Formatting.Indented))", span="1669-1672", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.LoadFromNestedObject()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1016 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.LoadFromNestedObject()", span="1647-1647", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.LoadFromNestedObject()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1110 [label="Entry Newtonsoft.Json.Linq.JObject.DeepEquals(Newtonsoft.Json.Linq.JToken)", span="118-118", cluster="Newtonsoft.Json.Linq.JObject.DeepEquals(Newtonsoft.Json.Linq.JToken)", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_842 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListFind()", span="1356-1356", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListFind()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_843 [label="ExceptionAssert.Throws<NotSupportedException>(() =>\r\n            {\r\n                IBindingList l = new JObject();\r\n                l.Find(null, null);\r\n            }, ''Specified method is not supported.'')", span="1358-1362", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListFind()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_844 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListFind()", span="1356-1356", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListFind()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1123 [label="Entry System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_303 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.RawChildValues()", span="505-505", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.RawChildValues()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_304 [label="JObject o = new JObject()", span="507-507", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.RawChildValues()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_305 [label="o[''val1''] = new JRaw(''1'')", span="508-508", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.RawChildValues()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_306 [label="o[''val2''] = new JRaw(''1'')", span="509-509", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.RawChildValues()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_307 [label="string json = o.ToString()", span="511-511", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.RawChildValues()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_308 [label="StringAssert.AreEqual(@''{\r\n  ''''val1'''': 1,\r\n  ''''val2'''': 1\r\n}'', json)", span="513-516", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.RawChildValues()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_309 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.RawChildValues()", span="505-505", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.RawChildValues()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1082 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectGuid()", span="1765-1765", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectGuid()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1084 [label="Assert.AreEqual(v.Value, new Guid(''9065ACF3-C820-467D-BE50-8D4664BEAF35''))", span="1768-1768", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectGuid()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1085 [label="Assert.AreEqual(''9065acf3-c820-467d-be50-8d4664beaf35'', v.ToString())", span="1770-1770", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectGuid()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1083 [label="JValue v = (JValue)JToken.FromObject(new Guid(''9065ACF3-C820-467D-BE50-8D4664BEAF35''))", span="1767-1767", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectGuid()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1086 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectGuid()", span="1765-1765", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectGuid()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_525 [label="Entry System.Collections.ICollection.CopyTo(System.Array, int)", span="0-0", cluster="System.Collections.ICollection.CopyTo(System.Array, int)", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_190 [label="Entry System.Collections.Generic.ICollection<T>.CopyTo(T[], int)", span="0-0", cluster="System.Collections.Generic.ICollection<T>.CopyTo(T[], int)", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_693 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAddBadToken()", span="1125-1125", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAddBadToken()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_694 [label="ExceptionAssert.Throws<ArgumentException>(() =>\r\n            {\r\n                JProperty p1 = new JProperty(''Test1'', 1);\r\n                JProperty p2 = new JProperty(''Test2'', ''Two'');\r\n                IList<JToken> l = new JObject(p1, p2);\r\n\r\n                l.Add(new JValue(''Bad!''));\r\n            }, ''Can not add Newtonsoft.Json.Linq.JValue to Newtonsoft.Json.Linq.JObject.'')", span="1127-1134", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAddBadToken()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_695 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAddBadToken()", span="1125-1125", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAddBadToken()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_642 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IListSyncRoot()", span="1042-1042", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSyncRoot()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_643 [label="JProperty p1 = new JProperty(''Test1'', 1)", span="1044-1044", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSyncRoot()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_644 [label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="1045-1045", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSyncRoot()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_645 [label="IList l = new JObject(p1, p2)", span="1046-1046", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSyncRoot()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_646 [label="Assert.IsNotNull(l.SyncRoot)", span="1048-1048", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSyncRoot()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_647 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IListSyncRoot()", span="1042-1042", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSyncRoot()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_536 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IListAddBadToken()", span="885-885", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListAddBadToken()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_537 [label="ExceptionAssert.Throws<ArgumentException>(() =>\r\n            {\r\n                JProperty p1 = new JProperty(''Test1'', 1);\r\n                JProperty p2 = new JProperty(''Test2'', ''Two'');\r\n                IList l = new JObject(p1, p2);\r\n\r\n                l.Add(new JValue(''Bad!''));\r\n            }, ''Can not add Newtonsoft.Json.Linq.JValue to Newtonsoft.Json.Linq.JObject.'')", span="887-894", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListAddBadToken()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_538 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IListAddBadToken()", span="885-885", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListAddBadToken()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_508 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IListClear()", span="842-842", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListClear()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_511 [label="Assert.AreEqual(1, l.Count)", span="847-847", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListClear()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_513 [label="Assert.AreEqual(0, l.Count)", span="851-851", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListClear()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_510 [label="IList l = new JObject(p)", span="845-845", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListClear()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_512 [label="l.Clear()", span="849-849", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListClear()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_509 [label="JProperty p = new JProperty(''Test'', 1)", span="844-844", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListClear()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_514 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IListClear()", span="842-842", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListClear()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_564 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemove()", span="926-926", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemove()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_578 [label="Assert.AreEqual(null, p2.Parent)", span="946-946", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemove()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_570 [label="Assert.AreEqual(2, l.Count)", span="936-936", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemove()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_572 [label="Assert.AreEqual(1, l.Count)", span="939-939", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemove()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_576 [label="Assert.AreEqual(0, l.Count)", span="944-944", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemove()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_566 [label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="929-929", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemove()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_577 [label="Assert.IsFalse(l.Contains(p2))", span="945-945", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemove()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_567 [label="IList l = new JObject(p1, p2)", span="930-930", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemove()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_569 [label="l.Remove(p3)", span="935-935", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemove()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_571 [label="l.Remove(p1)", span="938-938", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemove()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_573 [label="Assert.IsFalse(l.Contains(p1))", span="940-940", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemove()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_575 [label="l.Remove(p2)", span="943-943", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemove()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_565 [label="JProperty p1 = new JProperty(''Test1'', 1)", span="928-928", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemove()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_568 [label="JProperty p3 = new JProperty(''Test3'', ''III'')", span="932-932", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemove()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_574 [label="Assert.IsTrue(l.Contains(p2))", span="941-941", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemove()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_579 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemove()", span="926-926", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemove()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_411 [label="Entry Newtonsoft.Json.Linq.JToken.Replace(Newtonsoft.Json.Linq.JToken)", span="389-389", cluster="Newtonsoft.Json.Linq.JToken.Replace(Newtonsoft.Json.Linq.JToken)", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_661 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenIndexOf()", span="1072-1072", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenIndexOf()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_664 [label="Assert.AreEqual(0, l.IndexOf(p))", span="1077-1077", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenIndexOf()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_665 [label="Assert.AreEqual(-1, l.IndexOf(new JProperty(''Test'', 1)))", span="1078-1078", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenIndexOf()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_662 [label="JProperty p = new JProperty(''Test'', 1)", span="1074-1074", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenIndexOf()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_663 [label="IList<JToken> l = new JObject(p)", span="1075-1075", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenIndexOf()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_666 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenIndexOf()", span="1072-1072", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenIndexOf()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_581 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemoveAt()", span="950-950", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemoveAt()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_587 [label="Assert.AreEqual(1, l.Count)", span="960-960", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemoveAt()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_589 [label="Assert.AreEqual(0, l.Count)", span="963-963", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemoveAt()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_584 [label="IList l = new JObject(p1, p2)", span="954-954", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemoveAt()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_586 [label="l.Remove(p1)", span="959-959", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemoveAt()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_588 [label="l.Remove(p2)", span="962-962", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemoveAt()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_582 [label="JProperty p1 = new JProperty(''Test1'', 1)", span="952-952", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemoveAt()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_583 [label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="953-953", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemoveAt()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_585 [label="l.RemoveAt(0)", span="957-957", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemoveAt()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_590 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemoveAt()", span="950-950", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListRemoveAt()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_90 [label="Entry Newtonsoft.Json.Linq.JValue.CreateNull()", span="547-547", cluster="Newtonsoft.Json.Linq.JValue.CreateNull()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_254 [label="Entry Newtonsoft.Json.Linq.JTokenReader.JTokenReader(Newtonsoft.Json.Linq.JToken)", span="52-52", cluster="Newtonsoft.Json.Linq.JTokenReader.JTokenReader(Newtonsoft.Json.Linq.JToken)", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_998 [label="Entry Newtonsoft.Json.Linq.JObject.Property(string)", span="239-239", cluster="Newtonsoft.Json.Linq.JObject.Property(string)", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_862 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddNewWithEvent()", span="1383-1383", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddNewWithEvent()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_870 [label="Assert.AreEqual(o, p.Parent)", span="1394-1394", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddNewWithEvent()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_869 [label="Assert.AreEqual(''Property!'', p.Name)", span="1393-1393", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddNewWithEvent()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_863 [label="JObject o = new JObject()", span="1385-1385", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddNewWithEvent()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_868 [label="JProperty p = (JProperty)newObject", span="1392-1392", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddNewWithEvent()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_864 [label="o._addingNew += (s, e) => e.NewObject = new JProperty(''Property!'')", span="1386-1386", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddNewWithEvent()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_865 [label="IBindingList l = o", span="1388-1388", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddNewWithEvent()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_866 [label="object newObject = l.AddNew()", span="1389-1389", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddNewWithEvent()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_867 [label="Assert.IsNotNull(newObject)", span="1390-1390", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddNewWithEvent()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_871 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddNewWithEvent()", span="1383-1383", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddNewWithEvent()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_764 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenSetItem()", span="1232-1232", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenSetItem()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_771 [label="Assert.AreEqual(p2, l[1])", span="1243-1243", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenSetItem()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_770 [label="Assert.AreEqual(p3, l[0])", span="1242-1242", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenSetItem()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_766 [label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="1235-1235", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenSetItem()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_767 [label="IList<JToken> l = new JObject(p1, p2)", span="1236-1236", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenSetItem()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_768 [label="JProperty p3 = new JProperty(''Test3'', ''III'')", span="1238-1238", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenSetItem()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_769 [label="l[0] = p3", span="1240-1240", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenSetItem()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_765 [label="JProperty p1 = new JProperty(''Test1'', 1)", span="1234-1234", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenSetItem()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_772 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenSetItem()", span="1232-1232", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenSetItem()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_361 [label="Entry Newtonsoft.Json.Tests.TestObjects.ShortieException.ShortieException()", span="35-35", cluster="Newtonsoft.Json.Tests.TestObjects.ShortieException.ShortieException()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1095 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.DeepEqualsIgnoreOrder()", span="1794-1794", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeepEqualsIgnoreOrder()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1096 [label="JObject o1 = new JObject(\r\n                new JProperty(''null'', null),\r\n                new JProperty(''integer'', 1),\r\n                new JProperty(''string'', ''string!''),\r\n                new JProperty(''decimal'', 0.5m),\r\n                new JProperty(''array'', new JArray(1, 2)))", span="1796-1801", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeepEqualsIgnoreOrder()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1098 [label="JObject o2 = new JObject(\r\n                new JProperty(''null'', null),\r\n                new JProperty(''string'', ''string!''),\r\n                new JProperty(''decimal'', 0.5m),\r\n                new JProperty(''integer'', 1),\r\n                new JProperty(''array'', new JArray(1, 2)))", span="1805-1810", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeepEqualsIgnoreOrder()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1100 [label="JObject o3 = new JObject(\r\n                new JProperty(''null'', null),\r\n                new JProperty(''string'', ''string!''),\r\n                new JProperty(''decimal'', 0.5m),\r\n                new JProperty(''integer'', 2),\r\n                new JProperty(''array'', new JArray(1, 2)))", span="1814-1819", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeepEqualsIgnoreOrder()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1102 [label="JObject o4 = new JObject(\r\n                new JProperty(''null'', null),\r\n                new JProperty(''string'', ''string!''),\r\n                new JProperty(''decimal'', 0.5m),\r\n                new JProperty(''integer'', 1),\r\n                new JProperty(''array'', new JArray(2, 1)))", span="1823-1828", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeepEqualsIgnoreOrder()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1104 [label="JObject o5 = new JObject(\r\n                new JProperty(''null'', null),\r\n                new JProperty(''string'', ''string!''),\r\n                new JProperty(''decimal'', 0.5m),\r\n                new JProperty(''integer'', 1))", span="1832-1836", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeepEqualsIgnoreOrder()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1097 [label="Assert.IsTrue(o1.DeepEquals(o1))", span="1803-1803", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeepEqualsIgnoreOrder()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1099 [label="Assert.IsTrue(o1.DeepEquals(o2))", span="1812-1812", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeepEqualsIgnoreOrder()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1101 [label="Assert.IsFalse(o1.DeepEquals(o3))", span="1821-1821", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeepEqualsIgnoreOrder()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1103 [label="Assert.IsFalse(o1.DeepEquals(o4))", span="1830-1830", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeepEqualsIgnoreOrder()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1105 [label="Assert.IsFalse(o1.DeepEquals(o5))", span="1838-1838", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeepEqualsIgnoreOrder()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1106 [label="Assert.IsFalse(o1.DeepEquals(null))", span="1840-1840", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeepEqualsIgnoreOrder()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1107 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.DeepEqualsIgnoreOrder()", span="1794-1794", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.DeepEqualsIgnoreOrder()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1068 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectTimeSpan()", span="1747-1747", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectTimeSpan()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1070 [label="Assert.AreEqual(v.Value, TimeSpan.FromDays(1))", span="1750-1750", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectTimeSpan()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1071 [label="Assert.AreEqual(''1.00:00:00'', v.ToString())", span="1752-1752", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectTimeSpan()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1069 [label="JValue v = (JValue)JToken.FromObject(TimeSpan.FromDays(1))", span="1749-1749", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectTimeSpan()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1072 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectTimeSpan()", span="1747-1747", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectTimeSpan()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_821 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListApplySort()", span="1328-1328", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListApplySort()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_822 [label="ExceptionAssert.Throws<NotSupportedException>(() =>\r\n            {\r\n                IBindingList l = new JObject();\r\n                l.ApplySort(null, ListSortDirection.Ascending);\r\n            }, ''Specified method is not supported.'')", span="1330-1334", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListApplySort()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_823 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListApplySort()", span="1328-1328", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListApplySort()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_773 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenSetItemAlreadyExists()", span="1247-1247", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenSetItemAlreadyExists()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_774 [label="ExceptionAssert.Throws<ArgumentException>(() =>\r\n            {\r\n                JProperty p1 = new JProperty(''Test1'', 1);\r\n                JProperty p2 = new JProperty(''Test2'', ''Two'');\r\n                IList<JToken> l = new JObject(p1, p2);\r\n\r\n                JProperty p3 = new JProperty(''Test3'', ''III'');\r\n\r\n                l[0] = p3;\r\n                l[1] = p3;\r\n            }, ''Can not add property Test3 to Newtonsoft.Json.Linq.JObject. Property with the same name already exists on object.'')", span="1249-1259", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenSetItemAlreadyExists()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_775 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenSetItemAlreadyExists()", span="1247-1247", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenSetItemAlreadyExists()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_507 [label="Entry System.Collections.IList.IndexOf(object)", span="0-0", cluster="System.Collections.IList.IndexOf(object)", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_881 [label="Entry System.ComponentModel.ITypedList.GetListName(System.ComponentModel.PropertyDescriptor[])", span="0-0", cluster="System.ComponentModel.ITypedList.GetListName(System.ComponentModel.PropertyDescriptor[])", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_54 [label="Entry Newtonsoft.Json.Tests.TestObjects.Organization.Person.Person()", span="34-34", cluster="Newtonsoft.Json.Tests.TestObjects.Organization.Person.Person()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_55 [label="Entry System.Type.GetProperty(string)", span="0-0", cluster="System.Type.GetProperty(string)", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1186 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectInsideConverterWithCustomSerializer()", span="1962-1962", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectInsideConverterWithCustomSerializer()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1190 [label="Assert.AreEqual(@''{''''foo'''':''''bar'''',''''name'''':''''Daniel Wertheim'''',''''birthDate'''':''''0001-01-01T00:00:00'''',''''lastModified'''':''''0001-01-01T00:00:00''''}'', json)", span="1977-1977", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectInsideConverterWithCustomSerializer()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1188 [label="var settings = new JsonSerializerSettings\r\n            {\r\n                Converters = new List<JsonConverter> { new FooJsonConverter() },\r\n                ContractResolver = new CamelCasePropertyNamesContractResolver()\r\n            }", span="1969-1973", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectInsideConverterWithCustomSerializer()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1189 [label="var json = JsonConvert.SerializeObject(p, settings)", span="1975-1975", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectInsideConverterWithCustomSerializer()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1187 [label="var p = new Person\r\n            {\r\n                Name = ''Daniel Wertheim'',\r\n            }", span="1964-1967", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectInsideConverterWithCustomSerializer()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1191 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectInsideConverterWithCustomSerializer()", span="1962-1962", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.FromObjectInsideConverterWithCustomSerializer()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_341 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.Example()", span="574-574", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Example()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_347 [label="Assert.AreEqual(''Apple'', name)", span="597-597", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Example()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_348 [label="Assert.AreEqual(''Small'', smallest)", span="598-598", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Example()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_344 [label="string name = (string)o[''Name'']", span="589-589", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Example()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_346 [label="string smallest = (string)sizes[0]", span="594-594", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Example()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_343 [label="JObject o = JObject.Parse(json)", span="587-587", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Example()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_345 [label="JArray sizes = (JArray)o[''Sizes'']", span="592-592", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Example()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_342 [label="string json = @''{\r\n        ''''Name'''': ''''Apple'''',\r\n        ''''Expiry'''': new Date(1230422400000),\r\n        ''''Price'''': 3.99,\r\n        ''''Sizes'''': [\r\n          ''''Small'''',\r\n          ''''Medium'''',\r\n          ''''Large''''\r\n        ]\r\n      }''", span="576-585", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Example()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_349 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.Example()", span="574-574", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Example()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_515 [label="Entry System.Collections.IList.Clear()", span="0-0", cluster="System.Collections.IList.Clear()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_612 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItem()", span="998-998", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItem()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_619 [label="Assert.AreEqual(p2, l[1])", span="1009-1009", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItem()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_618 [label="Assert.AreEqual(p3, l[0])", span="1008-1008", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItem()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_614 [label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="1001-1001", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItem()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_615 [label="IList l = new JObject(p1, p2)", span="1002-1002", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItem()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_616 [label="JProperty p3 = new JProperty(''Test3'', ''III'')", span="1004-1004", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItem()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_617 [label="l[0] = p3", span="1006-1006", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItem()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_613 [label="JProperty p1 = new JProperty(''Test1'', 1)", span="1000-1000", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItem()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_620 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItem()", span="998-998", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IListSetItem()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_804 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAllowEdit()", span="1299-1299", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAllowEdit()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_806 [label="Assert.AreEqual(true, l.AllowEdit)", span="1302-1302", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAllowEdit()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_805 [label="IBindingList l = new JObject()", span="1301-1301", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAllowEdit()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_807 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAllowEdit()", span="1299-1299", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAllowEdit()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_655 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenContains()", span="1062-1062", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenContains()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_656 [label="JProperty p = new JProperty(''Test'', 1)", span="1064-1064", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenContains()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_659 [label="Assert.IsFalse(l.Contains(new JProperty(''Test'', 1)))", span="1068-1068", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenContains()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_658 [label="Assert.IsTrue(l.Contains(p))", span="1067-1067", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenContains()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_657 [label="IList<JToken> l = new JObject(p)", span="1065-1065", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenContains()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_660 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenContains()", span="1062-1062", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenContains()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_148 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionContains()", span="273-273", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionContains()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_152 [label="Assert.AreEqual(1, o.Children().Count())", span="278-278", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionContains()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_154 [label="Assert.AreEqual(false, contains)", span="281-281", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionContains()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_156 [label="Assert.AreEqual(true, contains)", span="284-284", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionContains()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_158 [label="Assert.AreEqual(false, contains)", span="287-287", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionContains()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_160 [label="Assert.AreEqual(false, contains)", span="290-290", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionContains()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_162 [label="Assert.AreEqual(false, contains)", span="293-293", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionContains()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_150 [label="JObject o = new JObject()", span="276-276", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionContains()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_151 [label="o.Add(''PropertyNameValue'', v)", span="277-277", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionContains()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_153 [label="bool contains = ((ICollection<KeyValuePair<string, JToken>>)o).Contains(new KeyValuePair<string, JToken>(''PropertyNameValue'', new JValue(1)))", span="280-280", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionContains()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_155 [label="contains = ((ICollection<KeyValuePair<string, JToken>>)o).Contains(new KeyValuePair<string, JToken>(''PropertyNameValue'', v))", span="283-283", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionContains()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_157 [label="contains = ((ICollection<KeyValuePair<string, JToken>>)o).Contains(new KeyValuePair<string, JToken>(''PropertyNameValue'', new JValue(2)))", span="286-286", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionContains()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_159 [label="contains = ((ICollection<KeyValuePair<string, JToken>>)o).Contains(new KeyValuePair<string, JToken>(''PropertyNameValue1'', new JValue(1)))", span="289-289", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionContains()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_161 [label="contains = ((ICollection<KeyValuePair<string, JToken>>)o).Contains(default(KeyValuePair<string, JToken>))", span="292-292", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionContains()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_149 [label="JValue v = new JValue(1)", span="275-275", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionContains()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_163 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionContains()", span="273-273", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericCollectionContains()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_297 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.Blog()", span="496-496", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Blog()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_298 [label="ExceptionAssert.Throws<JsonReaderException>(() => { JObject.Parse(@''{\r\n    ''''name'''': ''''James'''',\r\n    ]!#$THIS IS: BAD JSON![{}}}}]\r\n  }''); }, ''Invalid property identifier character: ]. Path 'name', line 3, position 5.'')", span="498-501", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Blog()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_299 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.Blog()", span="496-496", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Blog()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_230 [label="Entry Newtonsoft.Json.Tests.TestObjects.PersonRaw.PersonRaw()", span="30-30", cluster="Newtonsoft.Json.Tests.TestObjects.PersonRaw.PersonRaw()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_369 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.ImplicitValueConversions()", span="653-653", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ImplicitValueConversions()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_370 [label="JObject moss = new JObject()", span="655-655", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ImplicitValueConversions()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_377 [label="JObject jen = new JObject()", span="670-670", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ImplicitValueConversions()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_371 [label="moss[''FirstName''] = new JValue(''Maurice'')", span="656-656", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ImplicitValueConversions()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_372 [label="moss[''LastName''] = new JValue(''Moss'')", span="657-657", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ImplicitValueConversions()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_373 [label="moss[''BirthDate''] = new JValue(new DateTime(1977, 12, 30))", span="658-658", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ImplicitValueConversions()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_374 [label="moss[''Department''] = new JValue(''IT'')", span="659-659", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ImplicitValueConversions()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_375 [label="moss[''JobTitle''] = new JValue(''Support'')", span="660-660", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ImplicitValueConversions()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_376 [label="StringAssert.AreEqual(@''{\r\n  ''''FirstName'''': ''''Maurice'''',\r\n  ''''LastName'''': ''''Moss'''',\r\n  ''''BirthDate'''': ''''1977-12-30T00:00:00'''',\r\n  ''''Department'''': ''''IT'''',\r\n  ''''JobTitle'''': ''''Support''''\r\n}'', moss.ToString())", span="662-668", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ImplicitValueConversions()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_378 [label="jen[''FirstName''] = ''Jen''", span="671-671", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ImplicitValueConversions()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_379 [label="jen[''LastName''] = ''Barber''", span="672-672", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ImplicitValueConversions()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_380 [label="jen[''BirthDate''] = new DateTime(1978, 3, 15)", span="673-673", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ImplicitValueConversions()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_381 [label="jen[''Department''] = ''IT''", span="674-674", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ImplicitValueConversions()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_382 [label="jen[''JobTitle''] = ''Manager''", span="675-675", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ImplicitValueConversions()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_383 [label="StringAssert.AreEqual(@''{\r\n  ''''FirstName'''': ''''Jen'''',\r\n  ''''LastName'''': ''''Barber'''',\r\n  ''''BirthDate'''': ''''1978-03-15T00:00:00'''',\r\n  ''''Department'''': ''''IT'''',\r\n  ''''JobTitle'''': ''''Manager''''\r\n}'', jen.ToString())", span="677-683", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ImplicitValueConversions()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_384 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.ImplicitValueConversions()", span="653-653", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ImplicitValueConversions()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1175 [label="Entry Newtonsoft.Json.Linq.JToken.FromObject(object, Newtonsoft.Json.JsonSerializer)", span="1685-1685", cluster="Newtonsoft.Json.Linq.JToken.FromObject(object, Newtonsoft.Json.JsonSerializer)", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_387 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()", span="687-687", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_392 [label="Assert.AreEqual(p1, l[0])", span="694-694", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_396 [label="Assert.AreEqual(null, p1.Parent)", span="700-700", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_393 [label="Assert.AreEqual(p2, l[1])", span="695-695", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_399 [label="Assert.AreEqual(p2, l[1])", span="704-704", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_404 [label="Assert.AreEqual(null, p2.Parent)", span="712-712", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_401 [label="Assert.AreEqual(2, o.Properties().Count())", span="707-707", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_397 [label="Assert.AreEqual(l, p3.Parent)", span="701-701", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_398 [label="Assert.AreEqual(p3, l[0])", span="703-703", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_400 [label="Assert.AreEqual(2, l.Count)", span="706-706", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_405 [label="Assert.AreEqual(l, p4.Parent)", span="713-713", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_406 [label="Assert.AreEqual(p3, l[0])", span="715-715", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_407 [label="Assert.AreEqual(p4, l[1])", span="716-716", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_388 [label="JProperty p1 = new JProperty(''Test1'', 1)", span="689-689", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_391 [label="IList l = o", span="693-693", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_395 [label="p1.Replace(p3)", span="699-699", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_389 [label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="690-690", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_394 [label="JProperty p3 = new JProperty(''Test1'', ''III'')", span="697-697", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_403 [label="p2.Replace(p4)", span="711-711", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_390 [label="JObject o = new JObject(p1, p2)", span="692-692", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_402 [label="JProperty p4 = new JProperty(''Test4'', ''IV'')", span="709-709", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_408 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()", span="687-687", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ReplaceJPropertyWithJPropertyWithSameName()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_684 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAdd()", span="1110-1110", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAdd()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_690 [label="Assert.AreEqual(3, l.Count)", span="1120-1120", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAdd()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_691 [label="Assert.AreEqual(p3, l[2])", span="1121-1121", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAdd()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_687 [label="IList<JToken> l = new JObject(p1, p2)", span="1114-1114", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAdd()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_689 [label="l.Add(p3)", span="1118-1118", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAdd()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_688 [label="JProperty p3 = new JProperty(''Test3'', ''III'')", span="1116-1116", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAdd()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_685 [label="JProperty p1 = new JProperty(''Test1'', 1)", span="1112-1112", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAdd()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_686 [label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="1113-1113", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAdd()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_692 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAdd()", span="1110-1110", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericListJTokenAdd()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1062 [label="Entry System.ComponentModel.PropertyDescriptor.CanResetValue(object)", span="0-0", cluster="System.ComponentModel.PropertyDescriptor.CanResetValue(object)", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_270 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.Parse_ShouldThrowOnUnexpectedToken()", span="461-461", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Parse_ShouldThrowOnUnexpectedToken()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_271 [label="ExceptionAssert.Throws<JsonReaderException>(() =>\r\n            {\r\n                string json = @''[''''prop'''']'';\r\n                JObject.Parse(json);\r\n            }, ''Error reading JObject from JsonReader. Current JsonReader item is not an object: StartArray. Path '', line 1, position 1.'')", span="463-467", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Parse_ShouldThrowOnUnexpectedToken()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_272 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.Parse_ShouldThrowOnUnexpectedToken()", span="461-461", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.Parse_ShouldThrowOnUnexpectedToken()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1061 [label="Entry System.ComponentModel.ICustomTypeDescriptor.GetProperties()", span="0-0", cluster="System.ComponentModel.ICustomTypeDescriptor.GetProperties()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_999 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.ParseIncomplete()", span="1641-1641", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseIncomplete()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1000 [label="ExceptionAssert.Throws<Exception>(() => { JObject.Parse(''{ foo:''); }, ''Unexpected end of content while loading JObject. Path 'foo', line 1, position 6.'')", span="1643-1643", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseIncomplete()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1001 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.ParseIncomplete()", span="1641-1641", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.ParseIncomplete()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_854 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddNew()", span="1373-1373", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddNew()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_855 [label="ExceptionAssert.Throws<JsonException>(() =>\r\n            {\r\n                IBindingList l = new JObject();\r\n                l.AddNew();\r\n            }, ''Could not determine new value to add to 'Newtonsoft.Json.Linq.JObject'.'')", span="1375-1379", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddNew()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_856 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddNew()", span="1373-1373", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListAddNew()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1176 [label="Entry Newtonsoft.Json.Linq.JContainer.AddFirst(object)", span="583-583", cluster="Newtonsoft.Json.Linq.JContainer.AddFirst(object)", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1178 [label="Entry Newtonsoft.Json.Linq.JToken.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])", span="402-402", cluster="Newtonsoft.Json.Linq.JToken.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_850 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListIsSorted()", span="1366-1366", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListIsSorted()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_852 [label="Assert.AreEqual(false, l.IsSorted)", span="1369-1369", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListIsSorted()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_851 [label="IBindingList l = new JObject()", span="1368-1368", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListIsSorted()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_853 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListIsSorted()", span="1366-1366", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.IBindingListIsSorted()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1177 [label="Entry Newtonsoft.Json.Linq.JObject.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])", span="403-403", cluster="Newtonsoft.Json.Linq.JObject.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_982 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.InvalidValueCastExceptionMessage()", span="1607-1607", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.InvalidValueCastExceptionMessage()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_983 [label="ExceptionAssert.Throws<ArgumentException>(() =>\r\n            {\r\n                string json = @''{\r\n  ''''responseData'''': {}, \r\n  ''''responseDetails'''': null, \r\n  ''''responseStatus'''': 200\r\n}'';\r\n\r\n                JObject o = JObject.Parse(json);\r\n\r\n                string name = (string)o[''responseData''];\r\n            }, ''Can not convert Object to String.'')", span="1609-1620", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.InvalidValueCastExceptionMessage()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_984 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.InvalidValueCastExceptionMessage()", span="1607-1607", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.InvalidValueCastExceptionMessage()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1075 [label="Entry Newtonsoft.Json.Linq.JValue.ToString()", span="798-798", cluster="Newtonsoft.Json.Linq.JValue.ToString()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_286 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.GenericValueCast()", span="482-482", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericValueCast()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_290 [label="Assert.AreEqual(true, value)", span="487-487", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericValueCast()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_294 [label="Assert.AreEqual(null, value)", span="492-492", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericValueCast()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_289 [label="bool? value = o.Value<bool?>(''foo'')", span="486-486", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericValueCast()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_291 [label="json = @''{''''foo'''':null}''", span="489-489", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericValueCast()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_293 [label="value = o.Value<bool?>(''foo'')", span="491-491", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericValueCast()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_288 [label="JObject o = (JObject)JsonConvert.DeserializeObject(json)", span="485-485", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericValueCast()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_292 [label="o = (JObject)JsonConvert.DeserializeObject(json)", span="490-490", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericValueCast()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_287 [label="string json = @''{''''foo'''':true}''", span="484-484", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericValueCast()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_295 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.GenericValueCast()", span="482-482", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.GenericValueCast()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_285 [label="Entry Newtonsoft.Json.Utilities.DateTimeUtils.ConvertJavaScriptTicksToDateTime(long)", span="181-181", cluster="Newtonsoft.Json.Utilities.DateTimeUtils.ConvertJavaScriptTicksToDateTime(long)", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_535 [label="Entry System.Collections.IList.Add(object)", span="0-0", cluster="System.Collections.IList.Add(object)", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_462 [label="Entry Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", span="781-781", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_469 [label="Assert.AreEqual(''value1'', (string)o[''StringValue''])", span="796-796", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_475 [label="Assert.AreEqual(''value2'', (string)o[''StringValue''])", span="804-804", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_479 [label="Assert.AreEqual(null, (string)o[''StringValue''])", span="809-809", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_483 [label="Assert.AreEqual(JValue.CreateNull(), o[''NullValue''])", span="814-814", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_468 [label="Assert.AreEqual(''value1'', changed)", span="795-795", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_470 [label="Assert.AreEqual(1, changedCount)", span="797-797", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_472 [label="Assert.AreEqual(1, changedCount)", span="800-800", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_474 [label="Assert.AreEqual(''value2'', changed)", span="803-803", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_476 [label="Assert.AreEqual(2, changedCount)", span="805-805", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_478 [label="Assert.AreEqual(null, changed)", span="808-808", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_480 [label="Assert.AreEqual(3, changedCount)", span="810-810", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_482 [label="Assert.AreEqual(null, changed)", span="813-813", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_484 [label="Assert.AreEqual(4, changedCount)", span="815-815", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_486 [label="Assert.AreEqual(4, changedCount)", span="818-818", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_465 [label="JObject o = new JObject()", span="786-786", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_467 [label="o[''StringValue''] = ''value1''", span="794-794", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_471 [label="o[''StringValue''] = ''value1''", span="799-799", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_473 [label="o[''StringValue''] = ''value2''", span="802-802", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_477 [label="o[''StringValue''] = null", span="807-807", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_481 [label="o[''NullValue''] = null", span="812-812", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_485 [label="o[''NullValue''] = null", span="817-817", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_464 [label="int changedCount = 0", span="784-784", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_466 [label="o.PropertyChanged += (sender, args) =>\r\n            {\r\n                JObject s = (JObject)sender;\r\n                changed = (s[args.PropertyName] != null) ? ((JValue)s[args.PropertyName]).Value : null;\r\n                changedCount++;\r\n            }", span="787-792", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_463 [label="object changed = null", span="783-783", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_487 [label="Exit Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", span="781-781", cluster="Newtonsoft.Json.Tests.Linq.JObjectTests.PropertyChanged()", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1196 [label=changingCount, span="", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1197 [label=changedCount, span="", file="DynamicReflectionDelegateFactoryTests.cs"];
m1_1198 [label=changedCount, span="", file="DynamicReflectionDelegateFactoryTests.cs"];
m3_5 [label="Entry Newtonsoft.Json.Serialization.JsonPropertyCollection.JsonPropertyCollection(System.Type)", span="45-45", cluster="Newtonsoft.Json.Serialization.JsonPropertyCollection.JsonPropertyCollection(System.Type)", file="JsonConvertTest.cs"];
m3_13 [label="Entry System.Runtime.Serialization.FormatterServices.GetUninitializedObject(System.Type)", span="0-0", cluster="System.Runtime.Serialization.FormatterServices.GetUninitializedObject(System.Type)", file="JsonConvertTest.cs"];
m3_0 [label="Entry Newtonsoft.Json.Serialization.JsonObjectContract.JsonObjectContract(System.Type)", span="174-174", cluster="Newtonsoft.Json.Serialization.JsonObjectContract.JsonObjectContract(System.Type)", file="JsonConvertTest.cs"];
m3_1 [label="ContractType = JsonContractType.Object", span="177-177", cluster="Newtonsoft.Json.Serialization.JsonObjectContract.JsonObjectContract(System.Type)", file="JsonConvertTest.cs"];
m3_2 [label="Properties = new JsonPropertyCollection(UnderlyingType)", span="179-179", cluster="Newtonsoft.Json.Serialization.JsonObjectContract.JsonObjectContract(System.Type)", file="JsonConvertTest.cs"];
m3_3 [label="CreatorParameters = new JsonPropertyCollection(UnderlyingType)", span="180-180", cluster="Newtonsoft.Json.Serialization.JsonObjectContract.JsonObjectContract(System.Type)", file="JsonConvertTest.cs"];
m3_4 [label="Exit Newtonsoft.Json.Serialization.JsonObjectContract.JsonObjectContract(System.Type)", span="174-174", cluster="Newtonsoft.Json.Serialization.JsonObjectContract.JsonObjectContract(System.Type)", file="JsonConvertTest.cs"];
m3_11 [label="Entry Newtonsoft.Json.JsonException.JsonException(string)", span="54-54", cluster="Newtonsoft.Json.JsonException.JsonException(string)", file="JsonConvertTest.cs"];
m3_6 [label="Entry Newtonsoft.Json.Serialization.JsonObjectContract.GetUninitializedObject()", span="187-187", cluster="Newtonsoft.Json.Serialization.JsonObjectContract.GetUninitializedObject()", file="JsonConvertTest.cs"];
m3_7 [label="!JsonTypeReflector.FullyTrusted", span="190-190", cluster="Newtonsoft.Json.Serialization.JsonObjectContract.GetUninitializedObject()", file="JsonConvertTest.cs"];
m3_8 [label="throw new JsonException(''Insufficient permissions. Creating an uninitialized '{0}' type requires full trust.''.FormatWith(CultureInfo.InvariantCulture, NonNullableUnderlyingType));", span="191-191", cluster="Newtonsoft.Json.Serialization.JsonObjectContract.GetUninitializedObject()", file="JsonConvertTest.cs"];
m3_9 [label="return FormatterServices.GetUninitializedObject(NonNullableUnderlyingType);", span="193-193", cluster="Newtonsoft.Json.Serialization.JsonObjectContract.GetUninitializedObject()", file="JsonConvertTest.cs"];
m3_10 [label="Exit Newtonsoft.Json.Serialization.JsonObjectContract.GetUninitializedObject()", span="187-187", cluster="Newtonsoft.Json.Serialization.JsonObjectContract.GetUninitializedObject()", file="JsonConvertTest.cs"];
m3_12 [label="Entry string.FormatWith(System.IFormatProvider, object)", span="47-47", cluster="string.FormatWith(System.IFormatProvider, object)", file="JsonConvertTest.cs"];
m3_14 [label="Newtonsoft.Json.Serialization.JsonObjectContract", span="", file="JsonConvertTest.cs"];
m4_13 [label="Entry System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", file="JsonSchemaSpecTests.cs"];
m4_14 [label="Entry string.Join(string, params string[])", span="0-0", cluster="string.Join(string, params string[])", file="JsonSchemaSpecTests.cs"];
m4_15 [label="Entry Unk.AreEqual", span="", cluster="Unk.AreEqual", file="JsonSchemaSpecTests.cs"];
m4_47 [label="Entry Unk.ToList", span="", cluster="Unk.ToList", file="JsonSchemaSpecTests.cs"];
m4_16 [label="Entry Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTests.GetSpecTestDetails()", span="74-74", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTests.GetSpecTestDetails()", file="JsonSchemaSpecTests.cs"];
m4_17 [label="IList<JsonSchemaSpecTest> specTests = new List<JsonSchemaSpecTest>()", span="76-76", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTests.GetSpecTestDetails()", file="JsonSchemaSpecTests.cs"];
m4_18 [label="string baseDirectory = AppDomain.CurrentDomain.BaseDirectory", span="79-79", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTests.GetSpecTestDetails()", file="JsonSchemaSpecTests.cs"];
m4_33 [label="jsonSchemaSpecTest.TestNumber = specTests.Count + 1", span="104-104", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTests.GetSpecTestDetails()", file="JsonSchemaSpecTests.cs"];
m4_34 [label="specTests.Add(jsonSchemaSpecTest)", span="106-106", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTests.GetSpecTestDetails()", file="JsonSchemaSpecTests.cs"];
m4_35 [label="specTests = specTests.Where(s => s.FileName != ''dependencies.json''\r\n                                             && s.TestCaseDescription != ''multiple disallow subschema''\r\n                                             && s.TestCaseDescription != ''types from separate schemas are merged''\r\n                                             && s.TestCaseDescription != ''when types includes a schema it should fully validate the schema''\r\n                                             && s.TestCaseDescription != ''types can include schemas'').ToList()", span="111-115", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTests.GetSpecTestDetails()", file="JsonSchemaSpecTests.cs"];
m4_19 [label="string baseTestPath = Path.Combine(baseDirectory, Path.Combine(''Schema'', ''Specs''))", span="80-80", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTests.GetSpecTestDetails()", file="JsonSchemaSpecTests.cs"];
m4_20 [label="string[] testFiles = Directory.GetFiles(baseTestPath, ''*.json'', SearchOption.AllDirectories)", span="82-82", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTests.GetSpecTestDetails()", file="JsonSchemaSpecTests.cs"];
m4_21 [label=testFiles, span="85-85", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTests.GetSpecTestDetails()", file="JsonSchemaSpecTests.cs"];
m4_22 [label="string testJson = System.IO.File.ReadAllText(testFile)", span="87-87", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTests.GetSpecTestDetails()", file="JsonSchemaSpecTests.cs"];
m4_27 [label="jsonSchemaSpecTest.FileName = Path.GetFileName(testFile)", span="97-97", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTests.GetSpecTestDetails()", file="JsonSchemaSpecTests.cs"];
m4_23 [label="JArray a = JArray.Parse(testJson)", span="89-89", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTests.GetSpecTestDetails()", file="JsonSchemaSpecTests.cs"];
m4_24 [label=a, span="91-91", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTests.GetSpecTestDetails()", file="JsonSchemaSpecTests.cs"];
m4_25 [label="testCase[''tests'']", span="93-93", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTests.GetSpecTestDetails()", file="JsonSchemaSpecTests.cs"];
m4_28 [label="jsonSchemaSpecTest.TestCaseDescription = (string)testCase[''description'']", span="98-98", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTests.GetSpecTestDetails()", file="JsonSchemaSpecTests.cs"];
m4_29 [label="jsonSchemaSpecTest.Schema = (JObject)testCase[''schema'']", span="99-99", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTests.GetSpecTestDetails()", file="JsonSchemaSpecTests.cs"];
m4_26 [label="JsonSchemaSpecTest jsonSchemaSpecTest = new JsonSchemaSpecTest()", span="95-95", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTests.GetSpecTestDetails()", file="JsonSchemaSpecTests.cs"];
m4_30 [label="jsonSchemaSpecTest.TestDescription = (string)test[''description'']", span="101-101", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTests.GetSpecTestDetails()", file="JsonSchemaSpecTests.cs"];
m4_31 [label="jsonSchemaSpecTest.Data = test[''data'']", span="102-102", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTests.GetSpecTestDetails()", file="JsonSchemaSpecTests.cs"];
m4_32 [label="jsonSchemaSpecTest.IsValid = (bool)test[''valid'']", span="103-103", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTests.GetSpecTestDetails()", file="JsonSchemaSpecTests.cs"];
m4_36 [label="return specTests;", span="117-117", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTests.GetSpecTestDetails()", file="JsonSchemaSpecTests.cs"];
m4_37 [label="Exit Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTests.GetSpecTestDetails()", span="74-74", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTests.GetSpecTestDetails()", file="JsonSchemaSpecTests.cs"];
m4_44 [label="Entry System.IO.Path.GetFileName(string)", span="0-0", cluster="System.IO.Path.GetFileName(string)", file="JsonSchemaSpecTests.cs"];
m4_3 [label="Entry Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTests.SpecTest(Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTest)", span="63-63", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTests.SpecTest(Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTest)", file="JsonSchemaSpecTests.cs"];
m4_4 [label="JsonSchema s = JsonSchema.Read(jsonSchemaSpecTest.Schema.CreateReader())", span="65-65", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTests.SpecTest(Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTest)", file="JsonSchemaSpecTests.cs"];
m4_6 [label="bool v = jsonSchemaSpecTest.Data.IsValid(s, out e)", span="68-68", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTests.SpecTest(Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTest)", file="JsonSchemaSpecTests.cs"];
m4_8 [label="Assert.AreEqual(jsonSchemaSpecTest.IsValid, v, jsonSchemaSpecTest.TestCaseDescription + '' - '' + jsonSchemaSpecTest.TestDescription + '' - errors: '' + string.Join('', '', errorMessages))", span="71-71", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTests.SpecTest(Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTest)", file="JsonSchemaSpecTests.cs"];
m4_5 [label="IList<string> e", span="67-67", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTests.SpecTest(Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTest)", file="JsonSchemaSpecTests.cs"];
m4_7 [label="string[] errorMessages = ((e != null) ? e.ToArray() : null) ?? new string[0]", span="69-69", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTests.SpecTest(Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTest)", file="JsonSchemaSpecTests.cs"];
m4_9 [label="Exit Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTests.SpecTest(Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTest)", span="63-63", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTests.SpecTest(Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTest)", file="JsonSchemaSpecTests.cs"];
m4_10 [label="Entry Newtonsoft.Json.Linq.JToken.CreateReader()", span="1886-1886", cluster="Newtonsoft.Json.Linq.JToken.CreateReader()", file="JsonSchemaSpecTests.cs"];
m4_11 [label="Entry Newtonsoft.Json.Schema.JsonSchema.Read(Newtonsoft.Json.JsonReader)", span="269-269", cluster="Newtonsoft.Json.Schema.JsonSchema.Read(Newtonsoft.Json.JsonReader)", file="JsonSchemaSpecTests.cs"];
m4_46 [label="Entry Unk.Where", span="", cluster="Unk.Where", file="JsonSchemaSpecTests.cs"];
m4_48 [label="Entry lambda expression", span="111-115", cluster="lambda expression", file="JsonSchemaSpecTests.cs"];
m4_49 [label="s.FileName != ''dependencies.json''\r\n                                             && s.TestCaseDescription != ''multiple disallow subschema''\r\n                                             && s.TestCaseDescription != ''types from separate schemas are merged''\r\n                                             && s.TestCaseDescription != ''when types includes a schema it should fully validate the schema''\r\n                                             && s.TestCaseDescription != ''types can include schemas''", span="111-115", cluster="lambda expression", file="JsonSchemaSpecTests.cs"];
m4_50 [label="Exit lambda expression", span="111-115", cluster="lambda expression", file="JsonSchemaSpecTests.cs"];
m4_43 [label="Entry Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTest.JsonSchemaSpecTest()", span="43-43", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTest.JsonSchemaSpecTest()", file="JsonSchemaSpecTests.cs"];
m4_39 [label="Entry System.IO.Path.Combine(string, string)", span="0-0", cluster="System.IO.Path.Combine(string, string)", file="JsonSchemaSpecTests.cs"];
m4_45 [label="Entry System.Collections.Generic.ICollection<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.ICollection<T>.Add(T)", file="JsonSchemaSpecTests.cs"];
m4_12 [label="Entry Newtonsoft.Json.Linq.JToken.IsValid(Newtonsoft.Json.Schema.JsonSchema, out System.Collections.Generic.IList<string>)", span="79-79", cluster="Newtonsoft.Json.Linq.JToken.IsValid(Newtonsoft.Json.Schema.JsonSchema, out System.Collections.Generic.IList<string>)", file="JsonSchemaSpecTests.cs"];
m4_42 [label="Entry Newtonsoft.Json.Linq.JArray.Parse(string)", span="157-157", cluster="Newtonsoft.Json.Linq.JArray.Parse(string)", file="JsonSchemaSpecTests.cs"];
m4_0 [label="Entry Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTest.ToString()", span="53-53", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTest.ToString()", file="JsonSchemaSpecTests.cs"];
m4_1 [label="return FileName + '' - '' + TestCaseDescription + '' - '' + TestDescription;", span="55-55", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTest.ToString()", file="JsonSchemaSpecTests.cs"];
m4_2 [label="Exit Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTest.ToString()", span="53-53", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTest.ToString()", file="JsonSchemaSpecTests.cs"];
m4_38 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="JsonSchemaSpecTests.cs"];
m4_41 [label="Entry System.IO.File.ReadAllText(string)", span="0-0", cluster="System.IO.File.ReadAllText(string)", file="JsonSchemaSpecTests.cs"];
m4_40 [label="Entry System.IO.Directory.GetFiles(string, string, System.IO.SearchOption)", span="0-0", cluster="System.IO.Directory.GetFiles(string, string, System.IO.SearchOption)", file="JsonSchemaSpecTests.cs"];
m4_51 [label="Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTest", span="", file="JsonSchemaSpecTests.cs"];
m5_30 [label="Entry System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.Reflection.MethodInfo)", span="0-0", cluster="System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.Reflection.MethodInfo)", file="ReadAsyncTests.cs"];
m5_20 [label="Entry Newtonsoft.Json.Utilities.ILGeneratorExtensions.UnboxIfNeeded(System.Reflection.Emit.ILGenerator, System.Type)", span="58-58", cluster="Newtonsoft.Json.Utilities.ILGeneratorExtensions.UnboxIfNeeded(System.Reflection.Emit.ILGenerator, System.Type)", file="ReadAsyncTests.cs"];
m5_21 [label="type.IsValueType()", span="60-60", cluster="Newtonsoft.Json.Utilities.ILGeneratorExtensions.UnboxIfNeeded(System.Reflection.Emit.ILGenerator, System.Type)", file="ReadAsyncTests.cs"];
m5_22 [label="generator.Emit(OpCodes.Unbox_Any, type)", span="61-61", cluster="Newtonsoft.Json.Utilities.ILGeneratorExtensions.UnboxIfNeeded(System.Reflection.Emit.ILGenerator, System.Type)", file="ReadAsyncTests.cs"];
m5_23 [label="generator.Emit(OpCodes.Castclass, type)", span="63-63", cluster="Newtonsoft.Json.Utilities.ILGeneratorExtensions.UnboxIfNeeded(System.Reflection.Emit.ILGenerator, System.Type)", file="ReadAsyncTests.cs"];
m5_24 [label="Exit Newtonsoft.Json.Utilities.ILGeneratorExtensions.UnboxIfNeeded(System.Reflection.Emit.ILGenerator, System.Type)", span="58-58", cluster="Newtonsoft.Json.Utilities.ILGeneratorExtensions.UnboxIfNeeded(System.Reflection.Emit.ILGenerator, System.Type)", file="ReadAsyncTests.cs"];
m5_9 [label="Entry Newtonsoft.Json.Utilities.ILGeneratorExtensions.PushArrayInstance(System.Reflection.Emit.ILGenerator, int, int)", span="43-43", cluster="Newtonsoft.Json.Utilities.ILGeneratorExtensions.PushArrayInstance(System.Reflection.Emit.ILGenerator, int, int)", file="ReadAsyncTests.cs"];
m5_10 [label="generator.Emit(OpCodes.Ldarg, argsIndex)", span="45-45", cluster="Newtonsoft.Json.Utilities.ILGeneratorExtensions.PushArrayInstance(System.Reflection.Emit.ILGenerator, int, int)", file="ReadAsyncTests.cs"];
m5_11 [label="generator.Emit(OpCodes.Ldc_I4, arrayIndex)", span="46-46", cluster="Newtonsoft.Json.Utilities.ILGeneratorExtensions.PushArrayInstance(System.Reflection.Emit.ILGenerator, int, int)", file="ReadAsyncTests.cs"];
m5_12 [label="generator.Emit(OpCodes.Ldelem_Ref)", span="47-47", cluster="Newtonsoft.Json.Utilities.ILGeneratorExtensions.PushArrayInstance(System.Reflection.Emit.ILGenerator, int, int)", file="ReadAsyncTests.cs"];
m5_13 [label="Exit Newtonsoft.Json.Utilities.ILGeneratorExtensions.PushArrayInstance(System.Reflection.Emit.ILGenerator, int, int)", span="43-43", cluster="Newtonsoft.Json.Utilities.ILGeneratorExtensions.PushArrayInstance(System.Reflection.Emit.ILGenerator, int, int)", file="ReadAsyncTests.cs"];
m5_31 [label="Entry Newtonsoft.Json.Utilities.ILGeneratorExtensions.Return(System.Reflection.Emit.ILGenerator)", span="74-74", cluster="Newtonsoft.Json.Utilities.ILGeneratorExtensions.Return(System.Reflection.Emit.ILGenerator)", file="ReadAsyncTests.cs"];
m5_32 [label="generator.Emit(OpCodes.Ret)", span="76-76", cluster="Newtonsoft.Json.Utilities.ILGeneratorExtensions.Return(System.Reflection.Emit.ILGenerator)", file="ReadAsyncTests.cs"];
m5_33 [label="Exit Newtonsoft.Json.Utilities.ILGeneratorExtensions.Return(System.Reflection.Emit.ILGenerator)", span="74-74", cluster="Newtonsoft.Json.Utilities.ILGeneratorExtensions.Return(System.Reflection.Emit.ILGenerator)", file="ReadAsyncTests.cs"];
m5_25 [label="Entry Newtonsoft.Json.Utilities.ILGeneratorExtensions.CallMethod(System.Reflection.Emit.ILGenerator, System.Reflection.MethodInfo)", span="66-66", cluster="Newtonsoft.Json.Utilities.ILGeneratorExtensions.CallMethod(System.Reflection.Emit.ILGenerator, System.Reflection.MethodInfo)", file="ReadAsyncTests.cs"];
m5_26 [label="methodInfo.IsFinal || !methodInfo.IsVirtual", span="68-68", cluster="Newtonsoft.Json.Utilities.ILGeneratorExtensions.CallMethod(System.Reflection.Emit.ILGenerator, System.Reflection.MethodInfo)", file="ReadAsyncTests.cs"];
m5_27 [label="generator.Emit(OpCodes.Call, methodInfo)", span="69-69", cluster="Newtonsoft.Json.Utilities.ILGeneratorExtensions.CallMethod(System.Reflection.Emit.ILGenerator, System.Reflection.MethodInfo)", file="ReadAsyncTests.cs"];
m5_28 [label="generator.Emit(OpCodes.Callvirt, methodInfo)", span="71-71", cluster="Newtonsoft.Json.Utilities.ILGeneratorExtensions.CallMethod(System.Reflection.Emit.ILGenerator, System.Reflection.MethodInfo)", file="ReadAsyncTests.cs"];
m5_29 [label="Exit Newtonsoft.Json.Utilities.ILGeneratorExtensions.CallMethod(System.Reflection.Emit.ILGenerator, System.Reflection.MethodInfo)", span="66-66", cluster="Newtonsoft.Json.Utilities.ILGeneratorExtensions.CallMethod(System.Reflection.Emit.ILGenerator, System.Reflection.MethodInfo)", file="ReadAsyncTests.cs"];
m5_7 [label="Entry System.Type.IsValueType()", span="539-539", cluster="System.Type.IsValueType()", file="ReadAsyncTests.cs"];
m5_15 [label="Entry Newtonsoft.Json.Utilities.ILGeneratorExtensions.BoxIfNeeded(System.Reflection.Emit.ILGenerator, System.Type)", span="50-50", cluster="Newtonsoft.Json.Utilities.ILGeneratorExtensions.BoxIfNeeded(System.Reflection.Emit.ILGenerator, System.Type)", file="ReadAsyncTests.cs"];
m5_16 [label="type.IsValueType()", span="52-52", cluster="Newtonsoft.Json.Utilities.ILGeneratorExtensions.BoxIfNeeded(System.Reflection.Emit.ILGenerator, System.Type)", file="ReadAsyncTests.cs"];
m5_17 [label="generator.Emit(OpCodes.Box, type)", span="53-53", cluster="Newtonsoft.Json.Utilities.ILGeneratorExtensions.BoxIfNeeded(System.Reflection.Emit.ILGenerator, System.Type)", file="ReadAsyncTests.cs"];
m5_18 [label="generator.Emit(OpCodes.Castclass, type)", span="55-55", cluster="Newtonsoft.Json.Utilities.ILGeneratorExtensions.BoxIfNeeded(System.Reflection.Emit.ILGenerator, System.Type)", file="ReadAsyncTests.cs"];
m5_19 [label="Exit Newtonsoft.Json.Utilities.ILGeneratorExtensions.BoxIfNeeded(System.Reflection.Emit.ILGenerator, System.Type)", span="50-50", cluster="Newtonsoft.Json.Utilities.ILGeneratorExtensions.BoxIfNeeded(System.Reflection.Emit.ILGenerator, System.Type)", file="ReadAsyncTests.cs"];
m5_14 [label="Entry System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, int)", span="0-0", cluster="System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, int)", file="ReadAsyncTests.cs"];
m5_8 [label="Entry System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.Type)", span="0-0", cluster="System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.Type)", file="ReadAsyncTests.cs"];
m5_6 [label="Entry System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)", span="0-0", cluster="System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)", file="ReadAsyncTests.cs"];
m5_0 [label="Entry Newtonsoft.Json.Utilities.ILGeneratorExtensions.PushInstance(System.Reflection.Emit.ILGenerator, System.Type)", span="34-34", cluster="Newtonsoft.Json.Utilities.ILGeneratorExtensions.PushInstance(System.Reflection.Emit.ILGenerator, System.Type)", file="ReadAsyncTests.cs"];
m5_1 [label="generator.Emit(OpCodes.Ldarg_0)", span="36-36", cluster="Newtonsoft.Json.Utilities.ILGeneratorExtensions.PushInstance(System.Reflection.Emit.ILGenerator, System.Type)", file="ReadAsyncTests.cs"];
m5_2 [label="type.IsValueType()", span="37-37", cluster="Newtonsoft.Json.Utilities.ILGeneratorExtensions.PushInstance(System.Reflection.Emit.ILGenerator, System.Type)", file="ReadAsyncTests.cs"];
m5_3 [label="generator.Emit(OpCodes.Unbox, type)", span="38-38", cluster="Newtonsoft.Json.Utilities.ILGeneratorExtensions.PushInstance(System.Reflection.Emit.ILGenerator, System.Type)", file="ReadAsyncTests.cs"];
m5_4 [label="generator.Emit(OpCodes.Castclass, type)", span="40-40", cluster="Newtonsoft.Json.Utilities.ILGeneratorExtensions.PushInstance(System.Reflection.Emit.ILGenerator, System.Type)", file="ReadAsyncTests.cs"];
m5_5 [label="Exit Newtonsoft.Json.Utilities.ILGeneratorExtensions.PushInstance(System.Reflection.Emit.ILGenerator, System.Type)", span="34-34", cluster="Newtonsoft.Json.Utilities.ILGeneratorExtensions.PushInstance(System.Reflection.Emit.ILGenerator, System.Type)", file="ReadAsyncTests.cs"];
m6_15 [label="Entry Unk.AreEqual", span="", cluster="Unk.AreEqual", file="ReadTests.cs"];
m6_0 [label="Entry Newtonsoft.Json.Tests.Documentation.Samples.Linq.ReadJTokenFromBson.Example()", span="40-40", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Linq.ReadJTokenFromBson.Example()", file="ReadTests.cs"];
m6_1 [label="byte[] data = Convert.FromBase64String(''KQAAAAJuYW1lMQAHAAAAdmFsdWUxAAJuYW1lMgAHAAAAdmFsdWUyAAA='')", span="43-43", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Linq.ReadJTokenFromBson.Example()", file="ReadTests.cs"];
m6_2 [label="MemoryStream ms = new MemoryStream(data)", span="44-44", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Linq.ReadJTokenFromBson.Example()", file="ReadTests.cs"];
m6_3 [label="JObject o", span="46-46", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Linq.ReadJTokenFromBson.Example()", file="ReadTests.cs"];
m6_4 [label="BsonReader reader = new BsonReader(ms)", span="47-47", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Linq.ReadJTokenFromBson.Example()", file="ReadTests.cs"];
m6_5 [label="o = (JObject)JToken.ReadFrom(reader)", span="49-49", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Linq.ReadJTokenFromBson.Example()", file="ReadTests.cs"];
m6_6 [label="string value = (string)o[''name1'']", span="52-52", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Linq.ReadJTokenFromBson.Example()", file="ReadTests.cs"];
m6_7 [label="Console.WriteLine(value)", span="54-54", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Linq.ReadJTokenFromBson.Example()", file="ReadTests.cs"];
m6_8 [label="Assert.AreEqual(''value1'', value)", span="58-58", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Linq.ReadJTokenFromBson.Example()", file="ReadTests.cs"];
m6_9 [label="Exit Newtonsoft.Json.Tests.Documentation.Samples.Linq.ReadJTokenFromBson.Example()", span="40-40", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Linq.ReadJTokenFromBson.Example()", file="ReadTests.cs"];
m6_12 [label="Entry Newtonsoft.Json.Bson.BsonReader.BsonReader(System.IO.Stream)", span="125-125", cluster="Newtonsoft.Json.Bson.BsonReader.BsonReader(System.IO.Stream)", file="ReadTests.cs"];
m6_11 [label="Entry System.IO.MemoryStream.MemoryStream(byte[])", span="0-0", cluster="System.IO.MemoryStream.MemoryStream(byte[])", file="ReadTests.cs"];
m6_13 [label="Entry Newtonsoft.Json.Linq.JToken.ReadFrom(Newtonsoft.Json.JsonReader)", span="1849-1849", cluster="Newtonsoft.Json.Linq.JToken.ReadFrom(Newtonsoft.Json.JsonReader)", file="ReadTests.cs"];
m6_10 [label="Entry System.Convert.FromBase64String(string)", span="0-0", cluster="System.Convert.FromBase64String(string)", file="ReadTests.cs"];
m6_14 [label="Entry System.Console.WriteLine(string)", span="0-0", cluster="System.Console.WriteLine(string)", file="ReadTests.cs"];
m7_121 [label="Entry System.Exception.Exception(string)", span="0-0", cluster="System.Exception.Exception(string)", file="TestFixtureBase.cs"];
m7_86 [label="Entry Unk.Contains", span="", cluster="Unk.Contains", file="TestFixtureBase.cs"];
m7_76 [label="Entry Newtonsoft.Json.Tests.CustomAssert.IsInstanceOfType(System.Type, object)", span="301-301", cluster="Newtonsoft.Json.Tests.CustomAssert.IsInstanceOfType(System.Type, object)", file="TestFixtureBase.cs"];
m7_77 [label="Assert.IsInstanceOf(t, instance)", span="303-303", cluster="Newtonsoft.Json.Tests.CustomAssert.IsInstanceOfType(System.Type, object)", file="TestFixtureBase.cs"];
m7_78 [label="Exit Newtonsoft.Json.Tests.CustomAssert.IsInstanceOfType(System.Type, object)", span="301-301", cluster="Newtonsoft.Json.Tests.CustomAssert.IsInstanceOfType(System.Type, object)", file="TestFixtureBase.cs"];
m7_27 [label="Entry System.IO.MemoryStream.ToArray()", span="0-0", cluster="System.IO.MemoryStream.ToArray()", file="TestFixtureBase.cs"];
m7_34 [label="Entry System.DateTime.SpecifyKind(System.DateTime, System.DateTimeKind)", span="0-0", cluster="System.DateTime.SpecifyKind(System.DateTime, System.DateTimeKind)", file="TestFixtureBase.cs"];
m7_11 [label="Entry System.Type.GetField(string)", span="0-0", cluster="System.Type.GetField(string)", file="TestFixtureBase.cs"];
m7_12 [label="Entry Newtonsoft.Json.Tests.TestReflectionUtils.GetMethod(System.Type, string)", span="88-88", cluster="Newtonsoft.Json.Tests.TestReflectionUtils.GetMethod(System.Type, string)", file="TestFixtureBase.cs"];
m7_13 [label="return type.GetMethod(name);", span="91-91", cluster="Newtonsoft.Json.Tests.TestReflectionUtils.GetMethod(System.Type, string)", file="TestFixtureBase.cs"];
m7_14 [label="Exit Newtonsoft.Json.Tests.TestReflectionUtils.GetMethod(System.Type, string)", span="88-88", cluster="Newtonsoft.Json.Tests.TestReflectionUtils.GetMethod(System.Type, string)", file="TestFixtureBase.cs"];
m7_69 [label="Entry Newtonsoft.Json.Tests.TestFixtureBase.WriteEscapedJson(string)", span="288-288", cluster="Newtonsoft.Json.Tests.TestFixtureBase.WriteEscapedJson(string)", file="TestFixtureBase.cs"];
m7_70 [label="Console.WriteLine(EscapeJson(json))", span="290-290", cluster="Newtonsoft.Json.Tests.TestFixtureBase.WriteEscapedJson(string)", file="TestFixtureBase.cs"];
m7_71 [label="Exit Newtonsoft.Json.Tests.TestFixtureBase.WriteEscapedJson(string)", span="288-288", cluster="Newtonsoft.Json.Tests.TestFixtureBase.WriteEscapedJson(string)", file="TestFixtureBase.cs"];
m7_16 [label="Entry Newtonsoft.Json.Tests.TestFixtureBase.GetDataContractJsonSerializeResult(object)", span="200-200", cluster="Newtonsoft.Json.Tests.TestFixtureBase.GetDataContractJsonSerializeResult(object)", file="TestFixtureBase.cs"];
m7_17 [label="MemoryStream ms = new MemoryStream()", span="202-202", cluster="Newtonsoft.Json.Tests.TestFixtureBase.GetDataContractJsonSerializeResult(object)", file="TestFixtureBase.cs"];
m7_18 [label="DataContractJsonSerializer s = new DataContractJsonSerializer(o.GetType())", span="203-203", cluster="Newtonsoft.Json.Tests.TestFixtureBase.GetDataContractJsonSerializeResult(object)", file="TestFixtureBase.cs"];
m7_19 [label="s.WriteObject(ms, o)", span="204-204", cluster="Newtonsoft.Json.Tests.TestFixtureBase.GetDataContractJsonSerializeResult(object)", file="TestFixtureBase.cs"];
m7_20 [label="var data = ms.ToArray()", span="206-206", cluster="Newtonsoft.Json.Tests.TestFixtureBase.GetDataContractJsonSerializeResult(object)", file="TestFixtureBase.cs"];
m7_21 [label="return Encoding.UTF8.GetString(data, 0, data.Length);", span="207-207", cluster="Newtonsoft.Json.Tests.TestFixtureBase.GetDataContractJsonSerializeResult(object)", file="TestFixtureBase.cs"];
m7_22 [label="Exit Newtonsoft.Json.Tests.TestFixtureBase.GetDataContractJsonSerializeResult(object)", span="200-200", cluster="Newtonsoft.Json.Tests.TestFixtureBase.GetDataContractJsonSerializeResult(object)", file="TestFixtureBase.cs"];
m7_4 [label="Entry Newtonsoft.Json.Tests.TestReflectionUtils.GetProperty(System.Type, string)", span="70-70", cluster="Newtonsoft.Json.Tests.TestReflectionUtils.GetProperty(System.Type, string)", file="TestFixtureBase.cs"];
m7_5 [label="return type.GetProperty(name);", span="73-73", cluster="Newtonsoft.Json.Tests.TestReflectionUtils.GetProperty(System.Type, string)", file="TestFixtureBase.cs"];
m7_6 [label="Exit Newtonsoft.Json.Tests.TestReflectionUtils.GetProperty(System.Type, string)", span="70-70", cluster="Newtonsoft.Json.Tests.TestReflectionUtils.GetProperty(System.Type, string)", file="TestFixtureBase.cs"];
m7_83 [label="Entry Newtonsoft.Json.Tests.CustomAssert.Contains(System.Collections.IList, object, string)", span="311-311", cluster="Newtonsoft.Json.Tests.CustomAssert.Contains(System.Collections.IList, object, string)", file="TestFixtureBase.cs"];
m7_84 [label="Assert.Contains(value, collection, message)", span="314-314", cluster="Newtonsoft.Json.Tests.CustomAssert.Contains(System.Collections.IList, object, string)", file="TestFixtureBase.cs"];
m7_85 [label="Exit Newtonsoft.Json.Tests.CustomAssert.Contains(System.Collections.IList, object, string)", span="311-311", cluster="Newtonsoft.Json.Tests.CustomAssert.Contains(System.Collections.IList, object, string)", file="TestFixtureBase.cs"];
m7_92 [label="Entry Newtonsoft.Json.Tests.StringAssert.Normalize(string)", span="344-344", cluster="Newtonsoft.Json.Tests.StringAssert.Normalize(string)", file="TestFixtureBase.cs"];
m7_100 [label="s != null", span="346-346", cluster="Newtonsoft.Json.Tests.StringAssert.Normalize(string)", file="TestFixtureBase.cs"];
m7_101 [label="s = Regex.Replace(s, ''\r\n'')", span="348-348", cluster="Newtonsoft.Json.Tests.StringAssert.Normalize(string)", file="TestFixtureBase.cs"];
m7_102 [label="return s;", span="351-351", cluster="Newtonsoft.Json.Tests.StringAssert.Normalize(string)", file="TestFixtureBase.cs"];
m7_103 [label="Exit Newtonsoft.Json.Tests.StringAssert.Normalize(string)", span="344-344", cluster="Newtonsoft.Json.Tests.StringAssert.Normalize(string)", file="TestFixtureBase.cs"];
m7_122 [label="Entry string.Join(string, params string[])", span="0-0", cluster="string.Join(string, params string[])", file="TestFixtureBase.cs"];
m7_49 [label="Entry Newtonsoft.Json.Tests.TestFixtureBase.HexToBytes(string)", span="235-235", cluster="Newtonsoft.Json.Tests.TestFixtureBase.HexToBytes(string)", file="TestFixtureBase.cs"];
m7_50 [label="string fixedHex = hex.Replace(''-'', string.Empty)", span="237-237", cluster="Newtonsoft.Json.Tests.TestFixtureBase.HexToBytes(string)", file="TestFixtureBase.cs"];
m7_51 [label="byte[] bytes = new byte[fixedHex.Length / 2]", span="240-240", cluster="Newtonsoft.Json.Tests.TestFixtureBase.HexToBytes(string)", file="TestFixtureBase.cs"];
m7_54 [label=fixedHex, span="246-246", cluster="Newtonsoft.Json.Tests.TestFixtureBase.HexToBytes(string)", file="TestFixtureBase.cs"];
m7_52 [label="int shift = 4", span="242-242", cluster="Newtonsoft.Json.Tests.TestFixtureBase.HexToBytes(string)", file="TestFixtureBase.cs"];
m7_58 [label="bytes[offset] |= (byte)(b << shift)", span="257-257", cluster="Newtonsoft.Json.Tests.TestFixtureBase.HexToBytes(string)", file="TestFixtureBase.cs"];
m7_62 [label="return bytes;", span="266-266", cluster="Newtonsoft.Json.Tests.TestFixtureBase.HexToBytes(string)", file="TestFixtureBase.cs"];
m7_53 [label="int offset = 0", span="244-244", cluster="Newtonsoft.Json.Tests.TestFixtureBase.HexToBytes(string)", file="TestFixtureBase.cs"];
m7_59 [label="shift ^= 4", span="259-259", cluster="Newtonsoft.Json.Tests.TestFixtureBase.HexToBytes(string)", file="TestFixtureBase.cs"];
m7_61 [label="offset++", span="263-263", cluster="Newtonsoft.Json.Tests.TestFixtureBase.HexToBytes(string)", file="TestFixtureBase.cs"];
m7_55 [label="int b = (c - '0') % 32", span="250-250", cluster="Newtonsoft.Json.Tests.TestFixtureBase.HexToBytes(string)", file="TestFixtureBase.cs"];
m7_56 [label="b > 9", span="252-252", cluster="Newtonsoft.Json.Tests.TestFixtureBase.HexToBytes(string)", file="TestFixtureBase.cs"];
m7_57 [label="b -= 7", span="254-254", cluster="Newtonsoft.Json.Tests.TestFixtureBase.HexToBytes(string)", file="TestFixtureBase.cs"];
m7_60 [label="shift != 0", span="261-261", cluster="Newtonsoft.Json.Tests.TestFixtureBase.HexToBytes(string)", file="TestFixtureBase.cs"];
m7_63 [label="Exit Newtonsoft.Json.Tests.TestFixtureBase.HexToBytes(string)", span="235-235", cluster="Newtonsoft.Json.Tests.TestFixtureBase.HexToBytes(string)", file="TestFixtureBase.cs"];
m7_35 [label="Entry System.DateTime.GetUtcOffset()", span="51-51", cluster="System.DateTime.GetUtcOffset()", file="TestFixtureBase.cs"];
m7_8 [label="Entry Newtonsoft.Json.Tests.TestReflectionUtils.GetField(System.Type, string)", span="79-79", cluster="Newtonsoft.Json.Tests.TestReflectionUtils.GetField(System.Type, string)", file="TestFixtureBase.cs"];
m7_9 [label="return type.GetField(name);", span="82-82", cluster="Newtonsoft.Json.Tests.TestReflectionUtils.GetField(System.Type, string)", file="TestFixtureBase.cs"];
m7_10 [label="Exit Newtonsoft.Json.Tests.TestReflectionUtils.GetField(System.Type, string)", span="79-79", cluster="Newtonsoft.Json.Tests.TestReflectionUtils.GetField(System.Type, string)", file="TestFixtureBase.cs"];
m7_124 [label="Entry System.Exception.GetType()", span="0-0", cluster="System.Exception.GetType()", file="TestFixtureBase.cs"];
m7_125 [label="Entry string.Format(string, object, object)", span="0-0", cluster="string.Format(string, object, object)", file="TestFixtureBase.cs"];
m7_15 [label="Entry System.Type.GetMethod(string)", span="0-0", cluster="System.Type.GetMethod(string)", file="TestFixtureBase.cs"];
m7_104 [label="Entry System.Text.RegularExpressions.Regex.Replace(string, string)", span="0-0", cluster="System.Text.RegularExpressions.Regex.Replace(string, string)", file="TestFixtureBase.cs"];
m7_28 [label="Entry System.Text.Encoding.GetString(byte[], int, int)", span="0-0", cluster="System.Text.Encoding.GetString(byte[], int, int)", file="TestFixtureBase.cs"];
m7_3 [label="Entry System.Type.GetConstructors()", span="0-0", cluster="System.Type.GetConstructors()", file="TestFixtureBase.cs"];
m7_73 [label="Entry System.Console.WriteLine(string)", span="0-0", cluster="System.Console.WriteLine(string)", file="TestFixtureBase.cs"];
m7_94 [label="Entry Newtonsoft.Json.Tests.StringAssert.Equals(string, string)", span="336-336", cluster="Newtonsoft.Json.Tests.StringAssert.Equals(string, string)", file="TestFixtureBase.cs"];
m7_95 [label="s1 = Normalize(s1)", span="338-338", cluster="Newtonsoft.Json.Tests.StringAssert.Equals(string, string)", file="TestFixtureBase.cs"];
m7_96 [label="s2 = Normalize(s2)", span="339-339", cluster="Newtonsoft.Json.Tests.StringAssert.Equals(string, string)", file="TestFixtureBase.cs"];
m7_97 [label="return string.Equals(s1, s2);", span="341-341", cluster="Newtonsoft.Json.Tests.StringAssert.Equals(string, string)", file="TestFixtureBase.cs"];
m7_98 [label="Exit Newtonsoft.Json.Tests.StringAssert.Equals(string, string)", span="336-336", cluster="Newtonsoft.Json.Tests.StringAssert.Equals(string, string)", file="TestFixtureBase.cs"];
m7_119 [label="Entry System.Action.Invoke()", span="0-0", cluster="System.Action.Invoke()", file="TestFixtureBase.cs"];
m7_72 [label="Entry Newtonsoft.Json.Tests.TestFixtureBase.EscapeJson(string)", span="293-293", cluster="Newtonsoft.Json.Tests.TestFixtureBase.EscapeJson(string)", file="TestFixtureBase.cs"];
m7_74 [label="return @''@'''''' + json.Replace(@'''''''', @'''''''''''') + @'''''''';", span="295-295", cluster="Newtonsoft.Json.Tests.TestFixtureBase.EscapeJson(string)", file="TestFixtureBase.cs"];
m7_75 [label="Exit Newtonsoft.Json.Tests.TestFixtureBase.EscapeJson(string)", span="293-293", cluster="Newtonsoft.Json.Tests.TestFixtureBase.EscapeJson(string)", file="TestFixtureBase.cs"];
m7_0 [label="Entry Newtonsoft.Json.Tests.TestReflectionUtils.GetConstructors(System.Type)", span="61-61", cluster="Newtonsoft.Json.Tests.TestReflectionUtils.GetConstructors(System.Type)", file="TestFixtureBase.cs"];
m7_1 [label="return type.GetConstructors();", span="64-64", cluster="Newtonsoft.Json.Tests.TestReflectionUtils.GetConstructors(System.Type)", file="TestFixtureBase.cs"];
m7_2 [label="Exit Newtonsoft.Json.Tests.TestReflectionUtils.GetConstructors(System.Type)", span="61-61", cluster="Newtonsoft.Json.Tests.TestReflectionUtils.GetConstructors(System.Type)", file="TestFixtureBase.cs"];
m7_93 [label="Entry Unk.AreEqual", span="", cluster="Unk.AreEqual", file="TestFixtureBase.cs"];
m7_23 [label="Entry System.IO.MemoryStream.MemoryStream()", span="0-0", cluster="System.IO.MemoryStream.MemoryStream()", file="TestFixtureBase.cs"];
m7_99 [label="Entry string.Equals(string, string)", span="0-0", cluster="string.Equals(string, string)", file="TestFixtureBase.cs"];
m7_26 [label="Entry Unk.WriteObject", span="", cluster="Unk.WriteObject", file="TestFixtureBase.cs"];
m7_41 [label="Entry Newtonsoft.Json.Tests.TestFixtureBase.BytesToHex(byte[], bool)", span="224-224", cluster="Newtonsoft.Json.Tests.TestFixtureBase.BytesToHex(byte[], bool)", file="TestFixtureBase.cs"];
m7_42 [label="string hex = BitConverter.ToString(bytes)", span="226-226", cluster="Newtonsoft.Json.Tests.TestFixtureBase.BytesToHex(byte[], bool)", file="TestFixtureBase.cs"];
m7_43 [label=removeDashes, span="227-227", cluster="Newtonsoft.Json.Tests.TestFixtureBase.BytesToHex(byte[], bool)", file="TestFixtureBase.cs"];
m7_44 [label="hex = hex.Replace(''-'', '''')", span="229-229", cluster="Newtonsoft.Json.Tests.TestFixtureBase.BytesToHex(byte[], bool)", file="TestFixtureBase.cs"];
m7_45 [label="return hex;", span="232-232", cluster="Newtonsoft.Json.Tests.TestFixtureBase.BytesToHex(byte[], bool)", file="TestFixtureBase.cs"];
m7_46 [label="Exit Newtonsoft.Json.Tests.TestFixtureBase.BytesToHex(byte[], bool)", span="224-224", cluster="Newtonsoft.Json.Tests.TestFixtureBase.BytesToHex(byte[], bool)", file="TestFixtureBase.cs"];
m7_37 [label="Entry string.String(char[], int, int)", span="0-0", cluster="string.String(char[], int, int)", file="TestFixtureBase.cs"];
m7_123 [label="Entry System.Exception.Exception(string, System.Exception)", span="0-0", cluster="System.Exception.Exception(string, System.Exception)", file="TestFixtureBase.cs"];
m7_64 [label="Entry Newtonsoft.Json.Tests.TestFixtureBase.TestSetup()", span="273-273", cluster="Newtonsoft.Json.Tests.TestFixtureBase.TestSetup()", file="TestFixtureBase.cs"];
m7_65 [label="Thread.CurrentThread.CurrentCulture = CultureInfo.InvariantCulture", span="281-281", cluster="Newtonsoft.Json.Tests.TestFixtureBase.TestSetup()", file="TestFixtureBase.cs"];
m7_66 [label="Thread.CurrentThread.CurrentUICulture = CultureInfo.InvariantCulture", span="282-282", cluster="Newtonsoft.Json.Tests.TestFixtureBase.TestSetup()", file="TestFixtureBase.cs"];
m7_67 [label="JsonConvert.DefaultSettings = null", span="285-285", cluster="Newtonsoft.Json.Tests.TestFixtureBase.TestSetup()", file="TestFixtureBase.cs"];
m7_68 [label="Exit Newtonsoft.Json.Tests.TestFixtureBase.TestSetup()", span="273-273", cluster="Newtonsoft.Json.Tests.TestFixtureBase.TestSetup()", file="TestFixtureBase.cs"];
m7_48 [label="Entry string.Replace(string, string)", span="0-0", cluster="string.Replace(string, string)", file="TestFixtureBase.cs"];
m7_120 [label="Entry Unk.Fail", span="", cluster="Unk.Fail", file="TestFixtureBase.cs"];
m7_7 [label="Entry System.Type.GetProperty(string)", span="0-0", cluster="System.Type.GetProperty(string)", file="TestFixtureBase.cs"];
m7_24 [label="Entry DataContractJsonSerializer.cstr", span="", cluster="DataContractJsonSerializer.cstr", file="TestFixtureBase.cs"];
m7_29 [label="Entry Newtonsoft.Json.Tests.TestFixtureBase.GetOffset(System.DateTime, Newtonsoft.Json.DateFormatHandling)", span="211-211", cluster="Newtonsoft.Json.Tests.TestFixtureBase.GetOffset(System.DateTime, Newtonsoft.Json.DateFormatHandling)", file="TestFixtureBase.cs"];
m7_30 [label="char[] chars = new char[8]", span="213-213", cluster="Newtonsoft.Json.Tests.TestFixtureBase.GetOffset(System.DateTime, Newtonsoft.Json.DateFormatHandling)", file="TestFixtureBase.cs"];
m7_31 [label="int pos = DateTimeUtils.WriteDateTimeOffset(chars, 0, DateTime.SpecifyKind(d, DateTimeKind.Local).GetUtcOffset(), dateFormatHandling)", span="214-214", cluster="Newtonsoft.Json.Tests.TestFixtureBase.GetOffset(System.DateTime, Newtonsoft.Json.DateFormatHandling)", file="TestFixtureBase.cs"];
m7_32 [label="return new string(chars, 0, pos);", span="216-216", cluster="Newtonsoft.Json.Tests.TestFixtureBase.GetOffset(System.DateTime, Newtonsoft.Json.DateFormatHandling)", file="TestFixtureBase.cs"];
m7_33 [label="Exit Newtonsoft.Json.Tests.TestFixtureBase.GetOffset(System.DateTime, Newtonsoft.Json.DateFormatHandling)", span="211-211", cluster="Newtonsoft.Json.Tests.TestFixtureBase.GetOffset(System.DateTime, Newtonsoft.Json.DateFormatHandling)", file="TestFixtureBase.cs"];
m7_25 [label="Entry object.GetType()", span="0-0", cluster="object.GetType()", file="TestFixtureBase.cs"];
m7_87 [label="Entry Newtonsoft.Json.Tests.StringAssert.AreEqual(string, string)", span="328-328", cluster="Newtonsoft.Json.Tests.StringAssert.AreEqual(string, string)", file="TestFixtureBase.cs"];
m7_88 [label="expected = Normalize(expected)", span="330-330", cluster="Newtonsoft.Json.Tests.StringAssert.AreEqual(string, string)", file="TestFixtureBase.cs"];
m7_89 [label="actual = Normalize(actual)", span="331-331", cluster="Newtonsoft.Json.Tests.StringAssert.AreEqual(string, string)", file="TestFixtureBase.cs"];
m7_90 [label="Assert.AreEqual(expected, actual)", span="333-333", cluster="Newtonsoft.Json.Tests.StringAssert.AreEqual(string, string)", file="TestFixtureBase.cs"];
m7_91 [label="Exit Newtonsoft.Json.Tests.StringAssert.AreEqual(string, string)", span="328-328", cluster="Newtonsoft.Json.Tests.StringAssert.AreEqual(string, string)", file="TestFixtureBase.cs"];
m7_80 [label="Entry Newtonsoft.Json.Tests.CustomAssert.Contains(System.Collections.IList, object)", span="306-306", cluster="Newtonsoft.Json.Tests.CustomAssert.Contains(System.Collections.IList, object)", file="TestFixtureBase.cs"];
m7_81 [label="Contains(collection, value, null)", span="308-308", cluster="Newtonsoft.Json.Tests.CustomAssert.Contains(System.Collections.IList, object)", file="TestFixtureBase.cs"];
m7_82 [label="Exit Newtonsoft.Json.Tests.CustomAssert.Contains(System.Collections.IList, object)", span="306-306", cluster="Newtonsoft.Json.Tests.CustomAssert.Contains(System.Collections.IList, object)", file="TestFixtureBase.cs"];
m7_38 [label="Entry Newtonsoft.Json.Tests.TestFixtureBase.BytesToHex(byte[])", span="219-219", cluster="Newtonsoft.Json.Tests.TestFixtureBase.BytesToHex(byte[])", file="TestFixtureBase.cs"];
m7_39 [label="return BytesToHex(bytes, false);", span="221-221", cluster="Newtonsoft.Json.Tests.TestFixtureBase.BytesToHex(byte[])", file="TestFixtureBase.cs"];
m7_40 [label="Exit Newtonsoft.Json.Tests.TestFixtureBase.BytesToHex(byte[])", span="219-219", cluster="Newtonsoft.Json.Tests.TestFixtureBase.BytesToHex(byte[])", file="TestFixtureBase.cs"];
m7_36 [label="Entry Newtonsoft.Json.Utilities.DateTimeUtils.WriteDateTimeOffset(char[], int, System.TimeSpan, Newtonsoft.Json.DateFormatHandling)", span="746-746", cluster="Newtonsoft.Json.Utilities.DateTimeUtils.WriteDateTimeOffset(char[], int, System.TimeSpan, Newtonsoft.Json.DateFormatHandling)", file="TestFixtureBase.cs"];
m7_105 [label="Entry Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", span="357-357", cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", file="TestFixtureBase.cs"];
m7_106 [label="action()", span="362-362", cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", file="TestFixtureBase.cs"];
m7_110 [label="possibleMessages == null || possibleMessages.Length == 0", span="369-369", cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", file="TestFixtureBase.cs"];
m7_112 [label=possibleMessages, span="373-373", cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", file="TestFixtureBase.cs"];
m7_115 [label="throw new Exception(''Unexpected exception message.'' + Environment.NewLine + ''Expected one of: '' + string.Join(Environment.NewLine, possibleMessages) + Environment.NewLine + ''Got: '' + ex.Message + Environment.NewLine + Environment.NewLine + ex);", span="381-381", cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", file="TestFixtureBase.cs"];
m7_107 [label="Assert.Fail(''Exception of type {0} expected. No exception thrown.'', typeof(TException).Name)", span="364-364", cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", file="TestFixtureBase.cs"];
m7_108 [label="return null;", span="365-365", cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", file="TestFixtureBase.cs"];
m7_109 [label=TException, span="367-367", cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", file="TestFixtureBase.cs"];
m7_111 [label="return ex;", span="371-371", cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", file="TestFixtureBase.cs"];
m7_113 [label="StringAssert.Equals(possibleMessage, ex.Message)", span="375-375", cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", file="TestFixtureBase.cs"];
m7_114 [label="return ex;", span="377-377", cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", file="TestFixtureBase.cs"];
m7_116 [label=Exception, span="383-383", cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", file="TestFixtureBase.cs"];
m7_117 [label="throw new Exception(string.Format(''Exception of type {0} expected; got exception of type {1}.'', typeof(TException).Name, ex.GetType().Name), ex);", span="385-385", cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", file="TestFixtureBase.cs"];
m7_118 [label="Exit Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", span="357-357", cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", file="TestFixtureBase.cs"];
m7_47 [label="Entry System.BitConverter.ToString(byte[])", span="0-0", cluster="System.BitConverter.ToString(byte[])", file="TestFixtureBase.cs"];
m7_126 [label="Entry Newtonsoft.Json.Tests.ExceptionAssert.ThrowsAsync<TException>(System.Func<System.Threading.Tasks.Task>, params string[])", span="390-390", cluster="Newtonsoft.Json.Tests.ExceptionAssert.ThrowsAsync<TException>(System.Func<System.Threading.Tasks.Task>, params string[])", file="TestFixtureBase.cs"];
m7_127 [label="await action()", span="395-395", cluster="Newtonsoft.Json.Tests.ExceptionAssert.ThrowsAsync<TException>(System.Func<System.Threading.Tasks.Task>, params string[])", file="TestFixtureBase.cs"];
m7_131 [label="possibleMessages == null || possibleMessages.Length == 0", span="402-402", cluster="Newtonsoft.Json.Tests.ExceptionAssert.ThrowsAsync<TException>(System.Func<System.Threading.Tasks.Task>, params string[])", file="TestFixtureBase.cs"];
m7_133 [label=possibleMessages, span="406-406", cluster="Newtonsoft.Json.Tests.ExceptionAssert.ThrowsAsync<TException>(System.Func<System.Threading.Tasks.Task>, params string[])", file="TestFixtureBase.cs"];
m7_136 [label="throw new Exception(''Unexpected exception message.'' + Environment.NewLine + ''Expected one of: '' + string.Join(Environment.NewLine, possibleMessages) + Environment.NewLine + ''Got: '' + ex.Message + Environment.NewLine + Environment.NewLine + ex);", span="414-414", cluster="Newtonsoft.Json.Tests.ExceptionAssert.ThrowsAsync<TException>(System.Func<System.Threading.Tasks.Task>, params string[])", file="TestFixtureBase.cs"];
m7_128 [label="Assert.Fail(''Exception of type {0} expected. No exception thrown.'', typeof(TException).Name)", span="397-397", cluster="Newtonsoft.Json.Tests.ExceptionAssert.ThrowsAsync<TException>(System.Func<System.Threading.Tasks.Task>, params string[])", file="TestFixtureBase.cs"];
m7_129 [label="return null;", span="398-398", cluster="Newtonsoft.Json.Tests.ExceptionAssert.ThrowsAsync<TException>(System.Func<System.Threading.Tasks.Task>, params string[])", file="TestFixtureBase.cs"];
m7_130 [label=TException, span="400-400", cluster="Newtonsoft.Json.Tests.ExceptionAssert.ThrowsAsync<TException>(System.Func<System.Threading.Tasks.Task>, params string[])", file="TestFixtureBase.cs"];
m7_132 [label="return ex;", span="404-404", cluster="Newtonsoft.Json.Tests.ExceptionAssert.ThrowsAsync<TException>(System.Func<System.Threading.Tasks.Task>, params string[])", file="TestFixtureBase.cs"];
m7_134 [label="StringAssert.Equals(possibleMessage, ex.Message)", span="408-408", cluster="Newtonsoft.Json.Tests.ExceptionAssert.ThrowsAsync<TException>(System.Func<System.Threading.Tasks.Task>, params string[])", file="TestFixtureBase.cs"];
m7_135 [label="return ex;", span="410-410", cluster="Newtonsoft.Json.Tests.ExceptionAssert.ThrowsAsync<TException>(System.Func<System.Threading.Tasks.Task>, params string[])", file="TestFixtureBase.cs"];
m7_137 [label=Exception, span="416-416", cluster="Newtonsoft.Json.Tests.ExceptionAssert.ThrowsAsync<TException>(System.Func<System.Threading.Tasks.Task>, params string[])", file="TestFixtureBase.cs"];
m7_138 [label="throw new Exception(string.Format(''Exception of type {0} expected; got exception of type {1}.'', typeof(TException).Name, ex.GetType().Name), ex);", span="418-418", cluster="Newtonsoft.Json.Tests.ExceptionAssert.ThrowsAsync<TException>(System.Func<System.Threading.Tasks.Task>, params string[])", file="TestFixtureBase.cs"];
m7_139 [label="Exit Newtonsoft.Json.Tests.ExceptionAssert.ThrowsAsync<TException>(System.Func<System.Threading.Tasks.Task>, params string[])", span="390-390", cluster="Newtonsoft.Json.Tests.ExceptionAssert.ThrowsAsync<TException>(System.Func<System.Threading.Tasks.Task>, params string[])", file="TestFixtureBase.cs"];
m7_79 [label="Entry Unk.IsInstanceOf", span="", cluster="Unk.IsInstanceOf", file="TestFixtureBase.cs"];
m7_140 [label="Entry System.Func<TResult>.Invoke()", span="0-0", cluster="System.Func<TResult>.Invoke()", file="TestFixtureBase.cs"];
m7_141 [label="Newtonsoft.Json.Tests.TestFixtureBase", span="", file="TestFixtureBase.cs"];
m8_658 [label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ExistingBaseValue()", span="1954-1954", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ExistingBaseValue()", file="TypeNameHandlingTests.cs"];
m8_660 [label="GroupingInfo g = JsonConvert.DeserializeObject<GroupingInfo>(json, new JsonSerializerSettings\r\n            {\r\n                TypeNameHandling = TypeNameHandling.Objects\r\n            })", span="1970-1973", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ExistingBaseValue()", file="TypeNameHandlingTests.cs"];
m8_659 [label="string json = @''{\r\n    ''''itemIdentifier'''': {\r\n        ''''$type'''': ''''Newtonsoft.Json.Tests.Serialization.ReportItemKeys, Newtonsoft.Json.Tests'''',\r\n        ''''dataType'''': 0,\r\n        ''''wantedUnitID'''': 1,\r\n        ''''application'''': 3,\r\n        ''''id'''': 101,\r\n        ''''name'''': ''''Machine''''\r\n    },\r\n    ''''isBusinessEntity'''': false,\r\n    ''''isKeyItem'''': true,\r\n    ''''summarizeOnThisItem'''': false\r\n}''", span="1956-1968", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ExistingBaseValue()", file="TypeNameHandlingTests.cs"];
m8_661 [label="ReportItemKeys item = (ReportItemKeys)g.ItemIdentifier", span="1975-1975", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ExistingBaseValue()", file="TypeNameHandlingTests.cs"];
m8_662 [label="Assert.AreEqual(1UL, item.WantedUnitID)", span="1976-1976", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ExistingBaseValue()", file="TypeNameHandlingTests.cs"];
m8_663 [label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ExistingBaseValue()", span="1954-1954", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ExistingBaseValue()", file="TypeNameHandlingTests.cs"];
m8_361 [label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>.AddFirst(T)", span="1158-1158", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>.AddFirst(T)", file="TypeNameHandlingTests.cs"];
m8_362 [label="return new CustomEnumerable<T>(newVal, this);", span="1160-1160", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>.AddFirst(T)", file="TypeNameHandlingTests.cs"];
m8_363 [label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>.AddFirst(T)", span="1158-1158", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>.AddFirst(T)", file="TypeNameHandlingTests.cs"];
m8_225 [label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomSerializationBinder.CustomSerializationBinder()", span="752-752", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomSerializationBinder.CustomSerializationBinder()", file="TypeNameHandlingTests.cs"];
m8_96 [label="EmployeeReference employee = new EmployeeReference()", span="323-323", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteTypeNameForObjects()", file="TypeNameHandlingTests.cs"];
m8_604 [label="Entry System.Guid.Guid(string)", span="0-0", cluster="System.Guid.Guid(string)", file="TypeNameHandlingTests.cs"];
m8_664 [label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.GenericItemTypeCollection()", span="1982-1982", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.GenericItemTypeCollection()", file="TypeNameHandlingTests.cs"];
m8_666 [label="data.Rows.Add(''key'', new List<MyInterfaceImplementationType> { new MyInterfaceImplementationType() { SomeProperty = ''property'' } })", span="1985-1985", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.GenericItemTypeCollection()", file="TypeNameHandlingTests.cs"];
m8_665 [label="DataType data = new DataType()", span="1984-1984", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.GenericItemTypeCollection()", file="TypeNameHandlingTests.cs"];
m8_667 [label="string serialized = JsonConvert.SerializeObject(data, Formatting.Indented)", span="1986-1986", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.GenericItemTypeCollection()", file="TypeNameHandlingTests.cs"];
m8_668 [label="StringAssert.AreEqual(@''{\r\n  ''''Rows'''': {\r\n    ''''key'''': {\r\n      ''''$type'''': ''''System.Collections.Generic.List`1[[Newtonsoft.Json.Tests.Serialization.MyInterfaceImplementationType, Newtonsoft.Json.Tests]], mscorlib'''',\r\n      ''''$values'''': [\r\n        {\r\n          ''''SomeProperty'''': ''''property''''\r\n        }\r\n      ]\r\n    }\r\n  }\r\n}'', serialized)", span="1988-1999", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.GenericItemTypeCollection()", file="TypeNameHandlingTests.cs"];
m8_669 [label="DataType deserialized = JsonConvert.DeserializeObject<DataType>(serialized)", span="2001-2001", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.GenericItemTypeCollection()", file="TypeNameHandlingTests.cs"];
m8_670 [label="Assert.AreEqual(''property'', deserialized.Rows[''key''].First().SomeProperty)", span="2003-2003", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.GenericItemTypeCollection()", file="TypeNameHandlingTests.cs"];
m8_671 [label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.GenericItemTypeCollection()", span="1982-1982", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.GenericItemTypeCollection()", file="TypeNameHandlingTests.cs"];
m8_34 [label="WriteTokenInternal(c)", span="95-95", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="TypeNameHandlingTests.cs"];
m8_437 [label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameList<T>.TypeNameList()", span="2329-2329", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameList<T>.TypeNameList()", file="TypeNameHandlingTests.cs"];
m8_202 [label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteListTypeNameForProperty()", span="689-689", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteListTypeNameForProperty()", file="TypeNameHandlingTests.cs"];
m8_204 [label="TypeNameProperty typeNameProperty = new TypeNameProperty\r\n            {\r\n                Name = ''Name!'',\r\n                Value = new List<int> { 1, 2, 3, 4, 5 }\r\n            }", span="693-697", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteListTypeNameForProperty()", file="TypeNameHandlingTests.cs"];
m8_203 [label="string listRef = ReflectionUtils.GetTypeName(typeof(List<int>), TypeNameAssemblyFormatHandling.Simple, null)", span="691-691", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteListTypeNameForProperty()", file="TypeNameHandlingTests.cs"];
m8_205 [label="string json = JsonConvert.SerializeObject(typeNameProperty, Formatting.Indented)", span="699-699", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteListTypeNameForProperty()", file="TypeNameHandlingTests.cs"];
m8_206 [label="StringAssert.AreEqual(@''{\r\n  ''''Name'''': ''''Name!'''',\r\n  ''''Value'''': {\r\n    ''''$type'''': '''''' + listRef + @'''''',\r\n    ''''$values'''': [\r\n      1,\r\n      2,\r\n      3,\r\n      4,\r\n      5\r\n    ]\r\n  }\r\n}'', json)", span="701-713", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteListTypeNameForProperty()", file="TypeNameHandlingTests.cs"];
m8_207 [label="TypeNameProperty deserialized = JsonConvert.DeserializeObject<TypeNameProperty>(json)", span="715-715", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteListTypeNameForProperty()", file="TypeNameHandlingTests.cs"];
m8_208 [label="Assert.AreEqual(''Name!'', deserialized.Name)", span="716-716", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteListTypeNameForProperty()", file="TypeNameHandlingTests.cs"];
m8_211 [label="Assert.AreEqual(5, nested.Count)", span="720-720", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteListTypeNameForProperty()", file="TypeNameHandlingTests.cs"];
m8_212 [label="Assert.AreEqual(1, nested[0])", span="721-721", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteListTypeNameForProperty()", file="TypeNameHandlingTests.cs"];
m8_213 [label="Assert.AreEqual(2, nested[1])", span="722-722", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteListTypeNameForProperty()", file="TypeNameHandlingTests.cs"];
m8_214 [label="Assert.AreEqual(3, nested[2])", span="723-723", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteListTypeNameForProperty()", file="TypeNameHandlingTests.cs"];
m8_215 [label="Assert.AreEqual(4, nested[3])", span="724-724", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteListTypeNameForProperty()", file="TypeNameHandlingTests.cs"];
m8_216 [label="Assert.AreEqual(5, nested[4])", span="725-725", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteListTypeNameForProperty()", file="TypeNameHandlingTests.cs"];
m8_209 [label="CustomAssert.IsInstanceOfType(typeof(List<int>), deserialized.Value)", span="717-717", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteListTypeNameForProperty()", file="TypeNameHandlingTests.cs"];
m8_210 [label="List<int> nested = (List<int>)deserialized.Value", span="719-719", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteListTypeNameForProperty()", file="TypeNameHandlingTests.cs"];
m8_217 [label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteListTypeNameForProperty()", span="689-689", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteListTypeNameForProperty()", file="TypeNameHandlingTests.cs"];
m8_120 [label="string json = JsonConvert.SerializeObject(values, Formatting.Indented, new JsonSerializerSettings\r\n            {\r\n                TypeNameHandling = TypeNameHandling.Objects,\r\n#pragma warning disable 618\r\n                TypeNameAssemblyFormat = FormatterAssemblyStyle.Full\r\n#pragma warning restore 618\r\n            })", span="402-408", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeGenericObjectListWithTypeName()", file="TypeNameHandlingTests.cs"];
m8_121 [label="StringAssert.AreEqual(@''[\r\n  {\r\n    ''''$id'''': ''''1'''',\r\n    ''''$type'''': '''''' + employeeRef + @'''''',\r\n    ''''Name'''': ''''Bob'''',\r\n    ''''Manager'''': {\r\n      ''''$id'''': ''''2'''',\r\n      ''''$type'''': '''''' + employeeRef + @'''''',\r\n      ''''Name'''': ''''Frank'''',\r\n      ''''Manager'''': null\r\n    }\r\n  },\r\n  {\r\n    ''''$type'''': '''''' + personRef + @'''''',\r\n    ''''Name'''': null,\r\n    ''''BirthDate'''': ''''2000-12-30T00:00:00Z'''',\r\n    ''''LastModified'''': ''''2000-12-30T00:00:00Z''''\r\n  },\r\n  ''''String!'''',\r\n  -2147483648\r\n]'', json)", span="410-430", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeGenericObjectListWithTypeName()", file="TypeNameHandlingTests.cs"];
m8_122 [label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeGenericObjectListWithTypeName()", span="380-380", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeGenericObjectListWithTypeName()", file="TypeNameHandlingTests.cs"];
m8_322 [label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteObjectTypeNameForPropertyDemo()", span="1019-1019", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteObjectTypeNameForPropertyDemo()", file="TypeNameHandlingTests.cs"];
m8_326 [label="string json = JsonConvert.SerializeObject(message, Formatting.Indented)", span="1029-1029", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteObjectTypeNameForPropertyDemo()", file="TypeNameHandlingTests.cs"];
m8_327 [label="Message deserialized = JsonConvert.DeserializeObject<Message>(json)", span="1039-1039", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteObjectTypeNameForPropertyDemo()", file="TypeNameHandlingTests.cs"];
m8_323 [label="Message message = new Message()", span="1021-1021", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteObjectTypeNameForPropertyDemo()", file="TypeNameHandlingTests.cs"];
m8_325 [label="message.Body = new SearchDetails\r\n            {\r\n                Query = ''Json.NET'',\r\n                Language = ''en-us''\r\n            }", span="1023-1027", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteObjectTypeNameForPropertyDemo()", file="TypeNameHandlingTests.cs"];
m8_328 [label="SearchDetails searchDetails = (SearchDetails)deserialized.Body", span="1041-1041", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteObjectTypeNameForPropertyDemo()", file="TypeNameHandlingTests.cs"];
m8_324 [label="message.Address = ''http://www.google.com''", span="1022-1022", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteObjectTypeNameForPropertyDemo()", file="TypeNameHandlingTests.cs"];
m8_329 [label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteObjectTypeNameForPropertyDemo()", span="1019-1019", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteObjectTypeNameForPropertyDemo()", file="TypeNameHandlingTests.cs"];
m8_76 [label="_writer.Write(data)", span="176-176", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="TypeNameHandlingTests.cs"];
m8_77 [label="BsonType.Regex", span="179-179", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="TypeNameHandlingTests.cs"];
m8_78 [label="BsonRegex value = (BsonRegex)t", span="181-181", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="TypeNameHandlingTests.cs"];
m8_79 [label="WriteString((string)value.Pattern.Value, value.Pattern.ByteCount, null)", span="183-183", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="TypeNameHandlingTests.cs"];
m8_674 [label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", file="TypeNameHandlingTests.cs"];
m8_745 [label="Entry Newtonsoft.Json.Tests.Serialization.Example.Equals(object)", span="2262-2262", cluster="Newtonsoft.Json.Tests.Serialization.Example.Equals(object)", file="TypeNameHandlingTests.cs"];
m8_748 [label="ReferenceEquals(this, obj)", span="2268-2268", cluster="Newtonsoft.Json.Tests.Serialization.Example.Equals(object)", file="TypeNameHandlingTests.cs"];
m8_751 [label="return Name.Equals(((IExample)obj).Name);", span="2274-2274", cluster="Newtonsoft.Json.Tests.Serialization.Example.Equals(object)", file="TypeNameHandlingTests.cs"];
m8_746 [label="obj == null", span="2264-2264", cluster="Newtonsoft.Json.Tests.Serialization.Example.Equals(object)", file="TypeNameHandlingTests.cs"];
m8_749 [label="return true;", span="2270-2270", cluster="Newtonsoft.Json.Tests.Serialization.Example.Equals(object)", file="TypeNameHandlingTests.cs"];
m8_750 [label="obj is IExample", span="2272-2272", cluster="Newtonsoft.Json.Tests.Serialization.Example.Equals(object)", file="TypeNameHandlingTests.cs"];
m8_747 [label="return false;", span="2266-2266", cluster="Newtonsoft.Json.Tests.Serialization.Example.Equals(object)", file="TypeNameHandlingTests.cs"];
m8_752 [label="return false;", span="2278-2278", cluster="Newtonsoft.Json.Tests.Serialization.Example.Equals(object)", file="TypeNameHandlingTests.cs"];
m8_753 [label="Exit Newtonsoft.Json.Tests.Serialization.Example.Equals(object)", span="2262-2262", cluster="Newtonsoft.Json.Tests.Serialization.Example.Equals(object)", file="TypeNameHandlingTests.cs"];
m8_617 [label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameHandlingWithISerializableValuesAndArray()", span="1845-1845", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameHandlingWithISerializableValuesAndArray()", file="TypeNameHandlingTests.cs"];
m8_619 [label="JsonSerializerSettings settings = new JsonSerializerSettings\r\n            {\r\n                TypeNameHandling = TypeNameHandling.Auto,\r\n                DateFormatHandling = DateFormatHandling.IsoDateFormat,\r\n                MissingMemberHandling = MissingMemberHandling.Ignore,\r\n                DefaultValueHandling = DefaultValueHandling.Ignore,\r\n                NullValueHandling = NullValueHandling.Ignore,\r\n                Formatting = Formatting.Indented\r\n            }", span="1855-1863", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameHandlingWithISerializableValuesAndArray()", file="TypeNameHandlingTests.cs"];
m8_621 [label="StringAssert.AreEqual(@''{\r\n  ''''c'''': {\r\n    ''''$type'''': ''''Newtonsoft.Json.Tests.Serialization.MyChildList, Newtonsoft.Json.Tests'''',\r\n    ''''$values'''': [\r\n      ''''string!''''\r\n    ]\r\n  }\r\n}'', json)", span="1867-1874", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameHandlingWithISerializableValuesAndArray()", file="TypeNameHandlingTests.cs"];
m8_618 [label="MyParent p = new MyParent\r\n            {\r\n                Child = new MyChildList\r\n                {\r\n                    ''string!''\r\n                }\r\n            }", span="1847-1853", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameHandlingWithISerializableValuesAndArray()", file="TypeNameHandlingTests.cs"];
m8_620 [label="string json = JsonConvert.SerializeObject(p, settings)", span="1865-1865", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameHandlingWithISerializableValuesAndArray()", file="TypeNameHandlingTests.cs"];
m8_622 [label="MyParent p2 = JsonConvert.DeserializeObject<MyParent>(json, settings)", span="1876-1876", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameHandlingWithISerializableValuesAndArray()", file="TypeNameHandlingTests.cs"];
m8_624 [label="Assert.AreEqual(1, ((MyChildList)p2.Child).Count)", span="1878-1878", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameHandlingWithISerializableValuesAndArray()", file="TypeNameHandlingTests.cs"];
m8_625 [label="Assert.AreEqual(''string!'', ((MyChildList)p2.Child)[0])", span="1879-1879", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameHandlingWithISerializableValuesAndArray()", file="TypeNameHandlingTests.cs"];
m8_623 [label="CustomAssert.IsInstanceOfType(typeof(MyChildList), p2.Child)", span="1877-1877", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameHandlingWithISerializableValuesAndArray()", file="TypeNameHandlingTests.cs"];
m8_626 [label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameHandlingWithISerializableValuesAndArray()", span="1845-1845", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameHandlingWithISerializableValuesAndArray()", file="TypeNameHandlingTests.cs"];
m8_7 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="TypeNameHandlingTests.cs"];
m8_26 [label="_writer.Write((byte)0)", span="83-83", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="TypeNameHandlingTests.cs"];
m8_27 [label="BsonType.Array", span="86-86", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="TypeNameHandlingTests.cs"];
m8_32 [label="_writer.Write((sbyte)c.Type)", span="93-93", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="TypeNameHandlingTests.cs"];
m8_28 [label="BsonArray value = (BsonArray)t", span="88-88", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="TypeNameHandlingTests.cs"];
m8_30 [label="ulong index = 0", span="90-90", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="TypeNameHandlingTests.cs"];
m8_29 [label="_writer.Write(value.CalculatedSize)", span="89-89", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="TypeNameHandlingTests.cs"];
m8_31 [label=value, span="91-91", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="TypeNameHandlingTests.cs"];
m8_33 [label="WriteString(index.ToString(CultureInfo.InvariantCulture), MathUtils.IntLength(index), null)", span="94-94", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="TypeNameHandlingTests.cs"];
m8_719 [label="Entry Newtonsoft.Json.Tests.Serialization.MyParent.System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)", span="2160-2160", cluster="Newtonsoft.Json.Tests.Serialization.MyParent.System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)", file="TypeNameHandlingTests.cs"];
m8_720 [label="info.AddValue(''c'', Child)", span="2162-2162", cluster="Newtonsoft.Json.Tests.Serialization.MyParent.System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)", file="TypeNameHandlingTests.cs"];
m8_721 [label="Exit Newtonsoft.Json.Tests.Serialization.MyParent.System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)", span="2160-2160", cluster="Newtonsoft.Json.Tests.Serialization.MyParent.System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)", file="TypeNameHandlingTests.cs"];
m8_394 [label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.Car.Car()", span="1188-1188", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.Car.Car()", file="TypeNameHandlingTests.cs"];
m8_331 [label="Entry Newtonsoft.Json.Tests.Serialization.SearchDetails.SearchDetails()", span="2189-2189", cluster="Newtonsoft.Json.Tests.Serialization.SearchDetails.SearchDetails()", file="TypeNameHandlingTests.cs"];
m8_332 [label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.GenericDictionaryObject()", span="1052-1052", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.GenericDictionaryObject()", file="TypeNameHandlingTests.cs"];
m8_333 [label="Dictionary<string, object> collection = new Dictionary<string, object>()\r\n            {\r\n                { ''First'', new UrlStatus { Status = 404, Url = @''http://www.bing.com'' } },\r\n                { ''Second'', new UrlStatus { Status = 400, Url = @''http://www.google.com'' } },\r\n                {\r\n                    ''List'', new List<UrlStatus>\r\n                    {\r\n                        new UrlStatus { Status = 300, Url = @''http://www.yahoo.com'' },\r\n                        new UrlStatus { Status = 200, Url = @''http://www.askjeeves.com'' }\r\n                    }\r\n                }\r\n            }", span="1054-1065", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.GenericDictionaryObject()", file="TypeNameHandlingTests.cs"];
m8_334 [label="string json = JsonConvert.SerializeObject(collection, Formatting.Indented, new JsonSerializerSettings\r\n            {\r\n                TypeNameHandling = TypeNameHandling.All,\r\n#pragma warning disable 618\r\n                TypeNameAssemblyFormat = FormatterAssemblyStyle.Simple\r\n#pragma warning restore 618\r\n            })", span="1067-1073", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.GenericDictionaryObject()", file="TypeNameHandlingTests.cs"];
m8_337 [label="object c = JsonConvert.DeserializeObject(json, new JsonSerializerSettings\r\n            {\r\n                TypeNameHandling = TypeNameHandling.All,\r\n#pragma warning disable 618\r\n                TypeNameAssemblyFormat = FormatterAssemblyStyle.Simple\r\n#pragma warning restore 618\r\n            })", span="1106-1112", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.GenericDictionaryObject()", file="TypeNameHandlingTests.cs"];
m8_336 [label="StringAssert.AreEqual(@''{\r\n  ''''$type'''': ''''System.Collections.Generic.Dictionary`2[[System.String, mscorlib],[System.Object, mscorlib]], mscorlib'''',\r\n  ''''First'''': {\r\n    ''''$type'''': '''''' + urlStatusTypeName + @'''''',\r\n    ''''Status'''': 404,\r\n    ''''Url'''': ''''http://www.bing.com''''\r\n  },\r\n  ''''Second'''': {\r\n    ''''$type'''': '''''' + urlStatusTypeName + @'''''',\r\n    ''''Status'''': 400,\r\n    ''''Url'''': ''''http://www.google.com''''\r\n  },\r\n  ''''List'''': {\r\n    ''''$type'''': ''''System.Collections.Generic.List`1[['' + urlStatusTypeName + @'']], mscorlib'''',\r\n    ''''$values'''': [\r\n      {\r\n        ''''$type'''': '''''' + urlStatusTypeName + @'''''',\r\n        ''''Status'''': 300,\r\n        ''''Url'''': ''''http://www.yahoo.com''''\r\n      },\r\n      {\r\n        ''''$type'''': '''''' + urlStatusTypeName + @'''''',\r\n        ''''Status'''': 200,\r\n        ''''Url'''': ''''http://www.askjeeves.com''''\r\n      }\r\n    ]\r\n  }\r\n}'', json)", span="1077-1104", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.GenericDictionaryObject()", file="TypeNameHandlingTests.cs"];
m8_335 [label="string urlStatusTypeName = ReflectionUtils.GetTypeName(typeof(UrlStatus), TypeNameAssemblyFormatHandling.Simple, null)", span="1075-1075", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.GenericDictionaryObject()", file="TypeNameHandlingTests.cs"];
m8_338 [label="CustomAssert.IsInstanceOfType(typeof(Dictionary<string, object>), c)", span="1114-1114", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.GenericDictionaryObject()", file="TypeNameHandlingTests.cs"];
m8_339 [label="Dictionary<string, object> newCollection = (Dictionary<string, object>)c", span="1116-1116", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.GenericDictionaryObject()", file="TypeNameHandlingTests.cs"];
m8_340 [label="Assert.AreEqual(3, newCollection.Count)", span="1117-1117", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.GenericDictionaryObject()", file="TypeNameHandlingTests.cs"];
m8_341 [label="Assert.AreEqual(@''http://www.bing.com'', ((UrlStatus)newCollection[''First'']).Url)", span="1118-1118", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.GenericDictionaryObject()", file="TypeNameHandlingTests.cs"];
m8_343 [label="Assert.AreEqual(2, statues.Count)", span="1121-1121", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.GenericDictionaryObject()", file="TypeNameHandlingTests.cs"];
m8_342 [label="List<UrlStatus> statues = (List<UrlStatus>)newCollection[''List'']", span="1120-1120", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.GenericDictionaryObject()", file="TypeNameHandlingTests.cs"];
m8_344 [label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.GenericDictionaryObject()", span="1052-1052", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.GenericDictionaryObject()", file="TypeNameHandlingTests.cs"];
m8_65 [label="ticks = DateTimeUtils.ConvertDateTimeToJavaScriptTicks(dateTimeOffset.UtcDateTime, dateTimeOffset.Offset)", span="154-154", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="TypeNameHandlingTests.cs"];
m8_36 [label="_writer.Write((byte)0)", span="98-98", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="TypeNameHandlingTests.cs"];
m8_723 [label="Entry Newtonsoft.Json.Tests.Serialization.SerializableWrapper.Equals(object)", span="2212-2212", cluster="Newtonsoft.Json.Tests.Serialization.SerializableWrapper.Equals(object)", file="TypeNameHandlingTests.cs"];
m8_726 [label="return false;", span="2218-2218", cluster="Newtonsoft.Json.Tests.Serialization.SerializableWrapper.Equals(object)", file="TypeNameHandlingTests.cs"];
m8_725 [label="w == null", span="2216-2216", cluster="Newtonsoft.Json.Tests.Serialization.SerializableWrapper.Equals(object)", file="TypeNameHandlingTests.cs"];
m8_727 [label="return Equals(w.Content, Content);", span="2221-2221", cluster="Newtonsoft.Json.Tests.Serialization.SerializableWrapper.Equals(object)", file="TypeNameHandlingTests.cs"];
m8_724 [label="SerializableWrapper w = obj as SerializableWrapper", span="2214-2214", cluster="Newtonsoft.Json.Tests.Serialization.SerializableWrapper.Equals(object)", file="TypeNameHandlingTests.cs"];
m8_728 [label="Exit Newtonsoft.Json.Tests.Serialization.SerializableWrapper.Equals(object)", span="2212-2212", cluster="Newtonsoft.Json.Tests.Serialization.SerializableWrapper.Equals(object)", file="TypeNameHandlingTests.cs"];
m8_317 [label="Entry Newtonsoft.Json.Tests.TestObjects.ContentSubClass.ContentSubClass(string)", span="33-33", cluster="Newtonsoft.Json.Tests.TestObjects.ContentSubClass.ContentSubClass(string)", file="TypeNameHandlingTests.cs"];
m8_606 [label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameHandlingWithISerializableValues()", span="1810-1810", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameHandlingWithISerializableValues()", file="TypeNameHandlingTests.cs"];
m8_608 [label="JsonSerializerSettings settings = new JsonSerializerSettings\r\n            {\r\n                TypeNameHandling = TypeNameHandling.Auto,\r\n                DateFormatHandling = DateFormatHandling.IsoDateFormat,\r\n                MissingMemberHandling = MissingMemberHandling.Ignore,\r\n                DefaultValueHandling = DefaultValueHandling.Ignore,\r\n                NullValueHandling = NullValueHandling.Ignore,\r\n                Formatting = Formatting.Indented\r\n            }", span="1820-1828", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameHandlingWithISerializableValues()", file="TypeNameHandlingTests.cs"];
m8_610 [label="StringAssert.AreEqual(@''{\r\n  ''''c'''': {\r\n    ''''$type'''': ''''Newtonsoft.Json.Tests.Serialization.MyChild, Newtonsoft.Json.Tests'''',\r\n    ''''p'''': ''''string!''''\r\n  }\r\n}'', json)", span="1832-1837", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameHandlingWithISerializableValues()", file="TypeNameHandlingTests.cs"];
m8_607 [label="MyParent p = new MyParent\r\n            {\r\n                Child = new MyChild\r\n                {\r\n                    MyProperty = ''string!''\r\n                }\r\n            }", span="1812-1818", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameHandlingWithISerializableValues()", file="TypeNameHandlingTests.cs"];
m8_609 [label="string json = JsonConvert.SerializeObject(p, settings)", span="1830-1830", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameHandlingWithISerializableValues()", file="TypeNameHandlingTests.cs"];
m8_611 [label="MyParent p2 = JsonConvert.DeserializeObject<MyParent>(json, settings)", span="1839-1839", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameHandlingWithISerializableValues()", file="TypeNameHandlingTests.cs"];
m8_613 [label="Assert.AreEqual(''string!'', ((MyChild)p2.Child).MyProperty)", span="1841-1841", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameHandlingWithISerializableValues()", file="TypeNameHandlingTests.cs"];
m8_612 [label="CustomAssert.IsInstanceOfType(typeof(MyChild), p2.Child)", span="1840-1840", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameHandlingWithISerializableValues()", file="TypeNameHandlingTests.cs"];
m8_614 [label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameHandlingWithISerializableValues()", span="1810-1810", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameHandlingWithISerializableValues()", file="TypeNameHandlingTests.cs"];
m8_697 [label="Entry Newtonsoft.Json.Tests.Serialization.Message2.Message2(string)", span="2100-2100", cluster="Newtonsoft.Json.Tests.Serialization.Message2.Message2(string)", file="TypeNameHandlingTests.cs"];
m8_704 [label="value == null", span="2102-2102", cluster="Newtonsoft.Json.Tests.Serialization.Message2.Message2(string)", file="TypeNameHandlingTests.cs"];
m8_705 [label="throw new ArgumentNullException(nameof(value));", span="2102-2102", cluster="Newtonsoft.Json.Tests.Serialization.Message2.Message2(string)", file="TypeNameHandlingTests.cs"];
m8_706 [label="Value = value", span="2104-2104", cluster="Newtonsoft.Json.Tests.Serialization.Message2.Message2(string)", file="TypeNameHandlingTests.cs"];
m8_707 [label="Exit Newtonsoft.Json.Tests.Serialization.Message2.Message2(string)", span="2100-2100", cluster="Newtonsoft.Json.Tests.Serialization.Message2.Message2(string)", file="TypeNameHandlingTests.cs"];
m8_404 [label="Entry Newtonsoft.Json.Tests.Serialization.SerializableWrapper.SerializableWrapper()", span="2208-2208", cluster="Newtonsoft.Json.Tests.Serialization.SerializableWrapper.SerializableWrapper()", file="TypeNameHandlingTests.cs"];
m8_491 [label="Entry object.ToString()", span="0-0", cluster="object.ToString()", file="TypeNameHandlingTests.cs"];
m8_92 [label="Entry System.Convert.ToDouble(object, System.IFormatProvider)", span="0-0", cluster="System.Convert.ToDouble(object, System.IFormatProvider)", file="TypeNameHandlingTests.cs"];
m8_420 [label="Entry Newtonsoft.Json.Serialization.DefaultContractResolver.DefaultContractResolver()", span="149-149", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.DefaultContractResolver()", file="TypeNameHandlingTests.cs"];
m8_756 [label="Entry Newtonsoft.Json.Tests.Serialization.Example.GetHashCode()", span="2282-2282", cluster="Newtonsoft.Json.Tests.Serialization.Example.GetHashCode()", file="TypeNameHandlingTests.cs"];
m8_757 [label="Name == null", span="2284-2284", cluster="Newtonsoft.Json.Tests.Serialization.Example.GetHashCode()", file="TypeNameHandlingTests.cs"];
m8_759 [label="return Name.GetHashCode();", span="2289-2289", cluster="Newtonsoft.Json.Tests.Serialization.Example.GetHashCode()", file="TypeNameHandlingTests.cs"];
m8_758 [label="return 0;", span="2286-2286", cluster="Newtonsoft.Json.Tests.Serialization.Example.GetHashCode()", file="TypeNameHandlingTests.cs"];
m8_760 [label="Exit Newtonsoft.Json.Tests.Serialization.Example.GetHashCode()", span="2282-2282", cluster="Newtonsoft.Json.Tests.Serialization.Example.GetHashCode()", file="TypeNameHandlingTests.cs"];
m8_186 [label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeObjectWithMultipleGenericLists()", span="612-612", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeObjectWithMultipleGenericLists()", file="TypeNameHandlingTests.cs"];
m8_48 [label="WriteString((string)value.Value, value.ByteCount, value.CalculatedSize - 4)", span="122-122", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="TypeNameHandlingTests.cs"];
m8_53 [label="BsonType.Undefined", span="132-132", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="TypeNameHandlingTests.cs"];
m8_50 [label="BsonValue value = (BsonValue)t", span="127-127", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="TypeNameHandlingTests.cs"];
m8_51 [label="_writer.Write((bool)value.Value)", span="128-128", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="TypeNameHandlingTests.cs"];
m8_52 [label="BsonType.Null", span="131-131", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="TypeNameHandlingTests.cs"];
m8_54 [label="BsonType.Date", span="134-134", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="TypeNameHandlingTests.cs"];
m8_49 [label="BsonType.Boolean", span="125-125", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="TypeNameHandlingTests.cs"];
m8_55 [label="BsonValue value = (BsonValue)t", span="136-136", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="TypeNameHandlingTests.cs"];
m8_56 [label="long ticks = 0", span="138-138", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="TypeNameHandlingTests.cs"];
m8_57 [label="value.Value is DateTime", span="140-140", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="TypeNameHandlingTests.cs"];
m8_58 [label="DateTime dateTime = (DateTime)value.Value", span="142-142", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="TypeNameHandlingTests.cs"];
m8_244 [label="Entry Newtonsoft.Json.Tests.Serialization.Purchase.Purchase()", span="2200-2200", cluster="Newtonsoft.Json.Tests.Serialization.Purchase.Purchase()", file="TypeNameHandlingTests.cs"];
m8_8 [label="Entry System.Collections.ObjectModel.ReadOnlyCollection<T>.ReadOnlyCollection(System.Collections.Generic.IList<T>)", span="0-0", cluster="System.Collections.ObjectModel.ReadOnlyCollection<T>.ReadOnlyCollection(System.Collections.Generic.IList<T>)", file="TypeNameHandlingTests.cs"];
m8_9 [label="Entry System.Collections.Generic.HashSet<T>.HashSet()", span="0-0", cluster="System.Collections.Generic.HashSet<T>.HashSet()", file="TypeNameHandlingTests.cs"];
m8_10 [label="Entry System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.ReadOnlyDictionary(System.Collections.Generic.IDictionary<TKey, TValue>)", span="0-0", cluster="System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.ReadOnlyDictionary(System.Collections.Generic.IDictionary<TKey, TValue>)", file="TypeNameHandlingTests.cs"];
m8_591 [label="Entry Newtonsoft.Json.Tests.Serialization.PropertyItemTypeNameHandlingDynamic.PropertyItemTypeNameHandlingDynamic()", span="2301-2301", cluster="Newtonsoft.Json.Tests.Serialization.PropertyItemTypeNameHandlingDynamic.PropertyItemTypeNameHandlingDynamic()", file="TypeNameHandlingTests.cs"];
m8_218 [label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeUsingCustomBinder()", span="729-729", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeUsingCustomBinder()", file="TypeNameHandlingTests.cs"];
m8_220 [label="object p = JsonConvert.DeserializeObject(json, null, new JsonSerializerSettings\r\n            {\r\n                TypeNameHandling = TypeNameHandling.Objects,\r\n#pragma warning disable CS0618 // Type or member is obsolete\r\n                Binder = new CustomSerializationBinder()\r\n#pragma warning restore CS0618 // Type or member is obsolete\r\n            })", span="737-743", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeUsingCustomBinder()", file="TypeNameHandlingTests.cs"];
m8_219 [label="string json = @''{\r\n  ''''$id'''': ''''1'''',\r\n  ''''$type'''': ''''Newtonsoft.Json.Tests.TestObjects.Employee'''',\r\n  ''''Name'''': ''''Name!''''\r\n}''", span="731-735", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeUsingCustomBinder()", file="TypeNameHandlingTests.cs"];
m8_221 [label="CustomAssert.IsInstanceOfType(typeof(Person), p)", span="745-745", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeUsingCustomBinder()", file="TypeNameHandlingTests.cs"];
m8_222 [label="Person person = (Person)p", span="747-747", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeUsingCustomBinder()", file="TypeNameHandlingTests.cs"];
m8_223 [label="Assert.AreEqual(''Name!'', person.Name)", span="749-749", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeUsingCustomBinder()", file="TypeNameHandlingTests.cs"];
m8_224 [label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeUsingCustomBinder()", span="729-729", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeUsingCustomBinder()", file="TypeNameHandlingTests.cs"];
m8_490 [label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameObject.TypeNameObject()", span="2339-2339", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameObject.TypeNameObject()", file="TypeNameHandlingTests.cs"];
m8_63 [label="ticks = DateTimeUtils.ConvertDateTimeToJavaScriptTicks(dateTime, false)", span="148-148", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="TypeNameHandlingTests.cs"];
m8_87 [label="Wrapper w2 = JsonConvert.DeserializeObject<Wrapper>(json)", span="313-313", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeWrapper()", file="TypeNameHandlingTests.cs"];
m8_123 [label="Entry Newtonsoft.Json.Tests.TestObjects.Organization.Person.Person()", span="34-34", cluster="Newtonsoft.Json.Tests.TestObjects.Organization.Person.Person()", file="TypeNameHandlingTests.cs"];
m8_124 [label="Entry System.DateTime.DateTime(int, int, int, int, int, int, System.DateTimeKind)", span="0-0", cluster="System.DateTime.DateTime(int, int, int, int, int, int, System.DateTimeKind)", file="TypeNameHandlingTests.cs"];
m8_125 [label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeGenericObjectListWithTypeName()", span="434-434", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeGenericObjectListWithTypeName()", file="TypeNameHandlingTests.cs"];
m8_126 [label="string employeeRef = typeof(EmployeeReference).AssemblyQualifiedName", span="436-436", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeGenericObjectListWithTypeName()", file="TypeNameHandlingTests.cs"];
m8_16 [label="string json = JsonConvert.SerializeObject(dic, Formatting.Indented, new JsonSerializerSettings\r\n            {\r\n                TypeNameHandling = TypeNameHandling.Auto\r\n            })", span="134-137", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DictionaryAuto()", file="TypeNameHandlingTests.cs"];
m8_127 [label="string personRef = typeof(Person).AssemblyQualifiedName", span="437-437", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeGenericObjectListWithTypeName()", file="TypeNameHandlingTests.cs"];
m8_129 [label="List<object> values = (List<object>)JsonConvert.DeserializeObject(json, typeof(List<object>), new JsonSerializerSettings\r\n            {\r\n                TypeNameHandling = TypeNameHandling.Objects,\r\n#pragma warning disable 618\r\n                TypeNameAssemblyFormat = FormatterAssemblyStyle.Full\r\n#pragma warning restore 618\r\n            })", span="461-467", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeGenericObjectListWithTypeName()", file="TypeNameHandlingTests.cs"];
m8_140 [label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeGenericObjectListWithTypeName()", span="434-434", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeGenericObjectListWithTypeName()", file="TypeNameHandlingTests.cs"];
m8_158 [label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeTypeNameOnly()", span="535-535", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeTypeNameOnly()", file="TypeNameHandlingTests.cs"];
m8_171 [label="string json = @''{\r\n''''$type'''': '''''' + typeName + @'''''',\r\n''''RequestData'''': {\r\n''''$type'''': ''''System.Collections.Generic.Dictionary`2[[System.String, mscorlib,Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089],[System.String, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]], mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'''',\r\n''''Id'''': ''''siedemnaście'''',\r\n''''X'''': ''''323''''\r\n},\r\n''''Method'''': ''''GET'''',\r\n''''Url'''': ''''http://www.onet.pl'''',\r\n''''RequestEncoding'''': ''''UTF-8'''',\r\n''''CorrelationId'''': ''''xyz''''\r\n}''", span="582-593", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeGenericTypeName()", file="TypeNameHandlingTests.cs"];
m8_178 [label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeGenericTypeName()", span="578-578", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeGenericTypeName()", file="TypeNameHandlingTests.cs"];
m8_184 [label="string json = JsonConvert.SerializeObject(container, Formatting.Indented,\r\n                new JsonSerializerSettings\r\n                {\r\n                    NullValueHandling = NullValueHandling.Ignore,\r\n                    TypeNameHandling = TypeNameHandling.All,\r\n#pragma warning disable 618\r\n                    TypeNameAssemblyFormat = FormatterAssemblyStyle.Full\r\n#pragma warning restore 618\r\n                })", span="623-631", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeObjectWithMultipleGenericLists()", file="TypeNameHandlingTests.cs"];
m8_128 [label="string json = @''[\r\n  {\r\n    ''''$id'''': ''''1'''',\r\n    ''''$type'''': '''''' + employeeRef + @'''''',\r\n    ''''Name'''': ''''Bob'''',\r\n    ''''Manager'''': {\r\n      ''''$id'''': ''''2'''',\r\n      ''''$type'''': '''''' + employeeRef + @'''''',\r\n      ''''Name'''': ''''Frank'''',\r\n      ''''Manager'''': null\r\n    }\r\n  },\r\n  {\r\n    ''''$type'''': '''''' + personRef + @'''''',\r\n    ''''Name'''': null,\r\n    ''''BirthDate'''': ''''\/Date(978134400000)\/'''',\r\n    ''''LastModified'''': ''''\/Date(978134400000)\/''''\r\n  },\r\n  ''''String!'''',\r\n  -2147483648\r\n]''", span="439-459", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeGenericObjectListWithTypeName()", file="TypeNameHandlingTests.cs"];
m8_139 [label="Assert.AreEqual((long)int.MinValue, values[3])", span="482-482", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeGenericObjectListWithTypeName()", file="TypeNameHandlingTests.cs"];
m8_151 [label="string employeeRef = typeof(EmployeeReference).AssemblyQualifiedName", span="517-517", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeTypeNameWithNoTypeNameHandling()", file="TypeNameHandlingTests.cs"];
m8_153 [label="JObject o = (JObject)JsonConvert.DeserializeObject(json)", span="526-526", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeTypeNameWithNoTypeNameHandling()", file="TypeNameHandlingTests.cs"];
m8_155 [label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeTypeNameWithNoTypeNameHandling()", span="515-515", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeTypeNameWithNoTypeNameHandling()", file="TypeNameHandlingTests.cs"];
m8_157 [label="Entry Newtonsoft.Json.Linq.JToken.ToString()", span="422-422", cluster="Newtonsoft.Json.Linq.JToken.ToString()", file="TypeNameHandlingTests.cs"];
m8_163 [label="JsonConvert.DeserializeObject(json, null, new JsonSerializerSettings\r\n                {\r\n                    TypeNameHandling = TypeNameHandling.Objects\r\n                })", span="546-549", cluster="lambda expression", file="TypeNameHandlingTests.cs"];
m8_165 [label="BsonType.Null", span="293-293", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="TypeNameHandlingTests.cs"];
m8_168 [label="BsonType.Date", span="296-296", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="TypeNameHandlingTests.cs"];
m8_170 [label="string typeName = typeof(SendHttpRequest).AssemblyQualifiedName", span="580-580", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeGenericTypeName()", file="TypeNameHandlingTests.cs"];
m8_175 [label="Assert.AreEqual(''xyz'', request.CorrelationId)", span="606-606", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeGenericTypeName()", file="TypeNameHandlingTests.cs"];
m8_177 [label="Assert.AreEqual(''siedemnaście'', request.RequestData[''Id''])", span="608-608", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeGenericTypeName()", file="TypeNameHandlingTests.cs"];
m8_130 [label="Assert.AreEqual(4, values.Count)", span="469-469", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeGenericObjectListWithTypeName()", file="TypeNameHandlingTests.cs"];
m8_131 [label="EmployeeReference e = (EmployeeReference)values[0]", span="471-471", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeGenericObjectListWithTypeName()", file="TypeNameHandlingTests.cs"];
m8_137 [label="Assert.AreEqual(new DateTime(2000, 12, 30, 0, 0, 0, DateTimeKind.Utc), p.LastModified)", span="479-479", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeGenericObjectListWithTypeName()", file="TypeNameHandlingTests.cs"];
m8_135 [label="Assert.AreEqual(null, p.Name)", span="477-477", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeGenericObjectListWithTypeName()", file="TypeNameHandlingTests.cs"];
m8_136 [label="Assert.AreEqual(new DateTime(2000, 12, 30, 0, 0, 0, DateTimeKind.Utc), p.BirthDate)", span="478-478", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeGenericObjectListWithTypeName()", file="TypeNameHandlingTests.cs"];
m8_132 [label="Person p = (Person)values[1]", span="472-472", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeGenericObjectListWithTypeName()", file="TypeNameHandlingTests.cs"];
m8_133 [label="Assert.AreEqual(''Bob'', e.Name)", span="474-474", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeGenericObjectListWithTypeName()", file="TypeNameHandlingTests.cs"];
m8_134 [label="Assert.AreEqual(''Frank'', e.Manager.Name)", span="475-475", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeGenericObjectListWithTypeName()", file="TypeNameHandlingTests.cs"];
m8_138 [label="Assert.AreEqual(''String!'', values[2])", span="481-481", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeGenericObjectListWithTypeName()", file="TypeNameHandlingTests.cs"];
m8_141 [label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeWithBadTypeName()", span="486-486", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeWithBadTypeName()", file="TypeNameHandlingTests.cs"];
m8_143 [label="string personRef = typeof(Person).AssemblyQualifiedName", span="489-489", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeWithBadTypeName()", file="TypeNameHandlingTests.cs"];
m8_149 [label="Entry string.StartsWith(string)", span="0-0", cluster="string.StartsWith(string)", file="TypeNameHandlingTests.cs"];
m8_150 [label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeTypeNameWithNoTypeNameHandling()", span="515-515", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeTypeNameWithNoTypeNameHandling()", file="TypeNameHandlingTests.cs"];
m8_142 [label="string employeeRef = typeof(EmployeeReference).AssemblyQualifiedName", span="488-488", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeWithBadTypeName()", file="TypeNameHandlingTests.cs"];
m8_144 [label="string json = @''{\r\n  ''''$id'''': ''''1'''',\r\n  ''''$type'''': '''''' + employeeRef + @'''''',\r\n  ''''Name'''': ''''Name!'''',\r\n  ''''Manager'''': null\r\n}''", span="491-496", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeWithBadTypeName()", file="TypeNameHandlingTests.cs"];
m8_148 [label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeWithBadTypeName()", span="486-486", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeWithBadTypeName()", file="TypeNameHandlingTests.cs"];
m8_145 [label="JsonConvert.DeserializeObject(json, typeof(Person), new JsonSerializerSettings\r\n                {\r\n                    TypeNameHandling = TypeNameHandling.Objects,\r\n#pragma warning disable 618\r\n                    TypeNameAssemblyFormat = FormatterAssemblyStyle.Full\r\n#pragma warning restore 618\r\n                })", span="500-506", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeWithBadTypeName()", file="TypeNameHandlingTests.cs"];
m8_147 [label="Assert.IsTrue(ex.Message.StartsWith(@''Type specified in JSON ''' + employeeRef + @''' is not compatible with ''' + personRef + @'''.''))", span="510-510", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeWithBadTypeName()", file="TypeNameHandlingTests.cs"];
m8_146 [label=JsonSerializationException, span="508-508", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeWithBadTypeName()", file="TypeNameHandlingTests.cs"];
m8_152 [label="string json = @''{\r\n  ''''$id'''': ''''1'''',\r\n  ''''$type'''': '''''' + employeeRef + @'''''',\r\n  ''''Name'''': ''''Name!'''',\r\n  ''''Manager'''': null\r\n}''", span="519-524", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeTypeNameWithNoTypeNameHandling()", file="TypeNameHandlingTests.cs"];
m8_154 [label="StringAssert.AreEqual(@''{\r\n  ''''Name'''': ''''Name!'''',\r\n  ''''Manager'''': null\r\n}'', o.ToString())", span="528-531", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeTypeNameWithNoTypeNameHandling()", file="TypeNameHandlingTests.cs"];
m8_156 [label="Entry Newtonsoft.Json.JsonConvert.DeserializeObject(string)", span="667-667", cluster="Newtonsoft.Json.JsonConvert.DeserializeObject(string)", file="TypeNameHandlingTests.cs"];
m8_159 [label="string json = @''{\r\n  ''''$id'''': ''''1'''',\r\n  ''''$type'''': ''''Newtonsoft.Json.Tests.TestObjects.Employee'''',\r\n  ''''Name'''': ''''Name!'''',\r\n  ''''Manager'''': null\r\n}''", span="537-542", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeTypeNameOnly()", file="TypeNameHandlingTests.cs"];
m8_160 [label="ExceptionAssert.Throws<JsonSerializationException>(() =>\r\n            {\r\n                JsonConvert.DeserializeObject(json, null, new JsonSerializerSettings\r\n                {\r\n                    TypeNameHandling = TypeNameHandling.Objects\r\n                });\r\n            }, ''Type specified in JSON 'Newtonsoft.Json.Tests.TestObjects.Employee' was not resolved. Path '$type', line 3, position 55.'')", span="544-550", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeTypeNameOnly()", file="TypeNameHandlingTests.cs"];
m8_161 [label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeTypeNameOnly()", span="535-535", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeTypeNameOnly()", file="TypeNameHandlingTests.cs"];
m8_162 [label="Entry lambda expression", span="544-550", cluster="lambda expression", file="TypeNameHandlingTests.cs"];
m8_164 [label="Exit lambda expression", span="544-550", cluster="lambda expression", file="TypeNameHandlingTests.cs"];
m8_166 [label="BsonType.Undefined", span="294-294", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="TypeNameHandlingTests.cs"];
m8_167 [label="return 0;", span="295-295", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="TypeNameHandlingTests.cs"];
m8_169 [label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeGenericTypeName()", span="578-578", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeGenericTypeName()", file="TypeNameHandlingTests.cs"];
m8_172 [label="ICorrelatedMessage message = JsonConvert.DeserializeObject<ICorrelatedMessage>(json, new JsonSerializerSettings\r\n            {\r\n                TypeNameHandling = TypeNameHandling.Objects,\r\n#pragma warning disable 618\r\n                TypeNameAssemblyFormat = FormatterAssemblyStyle.Full\r\n#pragma warning restore 618\r\n            })", span="595-601", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeGenericTypeName()", file="TypeNameHandlingTests.cs"];
m8_173 [label="CustomAssert.IsInstanceOfType(typeof(SendHttpRequest), message)", span="603-603", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeGenericTypeName()", file="TypeNameHandlingTests.cs"];
m8_174 [label="SendHttpRequest request = (SendHttpRequest)message", span="605-605", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeGenericTypeName()", file="TypeNameHandlingTests.cs"];
m8_176 [label="Assert.AreEqual(2, request.RequestData.Count)", span="607-607", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeGenericTypeName()", file="TypeNameHandlingTests.cs"];
m8_179 [label="Entry Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string, Newtonsoft.Json.JsonSerializerSettings)", span="766-766", cluster="Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string, Newtonsoft.Json.JsonSerializerSettings)", file="TypeNameHandlingTests.cs"];
m8_180 [label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeObjectWithMultipleGenericLists()", span="612-612", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeObjectWithMultipleGenericLists()", file="TypeNameHandlingTests.cs"];
m8_181 [label="string containerTypeName = typeof(Container).AssemblyQualifiedName", span="614-614", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeObjectWithMultipleGenericLists()", file="TypeNameHandlingTests.cs"];
m8_182 [label="string productListTypeName = typeof(List<Product>).AssemblyQualifiedName", span="615-615", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeObjectWithMultipleGenericLists()", file="TypeNameHandlingTests.cs"];
m8_183 [label="Container container = new Container\r\n            {\r\n                In = new List<Product>(),\r\n                Out = new List<Product>()\r\n            }", span="617-621", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeObjectWithMultipleGenericLists()", file="TypeNameHandlingTests.cs"];
m8_185 [label="StringAssert.AreEqual(@''{\r\n  ''''$type'''': '''''' + containerTypeName + @'''''',\r\n  ''''In'''': {\r\n    ''''$type'''': '''''' + productListTypeName + @'''''',\r\n    ''''$values'''': []\r\n  },\r\n  ''''Out'''': {\r\n    ''''$type'''': '''''' + productListTypeName + @'''''',\r\n    ''''$values'''': []\r\n  }\r\n}'', json)", span="633-643", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeObjectWithMultipleGenericLists()", file="TypeNameHandlingTests.cs"];
m8_673 [label="Entry Newtonsoft.Json.Tests.Serialization.MyInterfaceImplementationType.MyInterfaceImplementationType()", span="2134-2134", cluster="Newtonsoft.Json.Tests.Serialization.MyInterfaceImplementationType.MyInterfaceImplementationType()", file="TypeNameHandlingTests.cs"];
m8_761 [label="Entry string.GetHashCode()", span="0-0", cluster="string.GetHashCode()", file="TypeNameHandlingTests.cs"];
m8_456 [label="Entry Newtonsoft.Json.Tests.TestObjects.Organization.Employee.Employee()", span="29-29", cluster="Newtonsoft.Json.Tests.TestObjects.Organization.Employee.Employee()", file="TypeNameHandlingTests.cs"];
m8_675 [label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeComplexGenericDictionary_Simple()", span="2009-2009", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeComplexGenericDictionary_Simple()", file="TypeNameHandlingTests.cs"];
m8_677 [label="Dictionary<int, HashSet<string>> dictionary = new Dictionary<int, HashSet<string>>\r\n            {\r\n                { 1, new HashSet<string>(new[] { ''test'' }) },\r\n            }", span="2019-2022", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeComplexGenericDictionary_Simple()", file="TypeNameHandlingTests.cs"];
m8_676 [label="JsonSerializerSettings serializerSettings = new JsonSerializerSettings\r\n            {\r\n                TypeNameHandling = TypeNameHandling.All,\r\n#pragma warning disable 618\r\n                TypeNameAssemblyFormat = FormatterAssemblyStyle.Simple\r\n#pragma warning restore 618\r\n            }", span="2011-2017", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeComplexGenericDictionary_Simple()", file="TypeNameHandlingTests.cs"];
m8_678 [label="string obtainedJson = JsonConvert.SerializeObject(dictionary, serializerSettings)", span="2024-2024", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeComplexGenericDictionary_Simple()", file="TypeNameHandlingTests.cs"];
m8_679 [label="Dictionary<int, HashSet<string>> obtainedDictionary = (Dictionary<int, HashSet<string>>)JsonConvert.DeserializeObject(obtainedJson, serializerSettings)", span="2026-2026", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeComplexGenericDictionary_Simple()", file="TypeNameHandlingTests.cs"];
m8_680 [label="Assert.IsNotNull(obtainedDictionary)", span="2028-2028", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeComplexGenericDictionary_Simple()", file="TypeNameHandlingTests.cs"];
m8_681 [label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeComplexGenericDictionary_Simple()", span="2009-2009", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeComplexGenericDictionary_Simple()", file="TypeNameHandlingTests.cs"];
m8_243 [label="Entry Newtonsoft.Json.Tests.Serialization.Customer.Customer()", span="2195-2195", cluster="Newtonsoft.Json.Tests.Serialization.Customer.Customer()", file="TypeNameHandlingTests.cs"];
m8_229 [label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeUsingCustomBinder()", span="762-762", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeUsingCustomBinder()", file="TypeNameHandlingTests.cs"];
m8_231 [label="IList<object> values = new List<object>\r\n            {\r\n                new Customer\r\n                {\r\n                    Name = ''Caroline Customer''\r\n                },\r\n                new Purchase\r\n                {\r\n                    ProductName = ''Elbow Grease'',\r\n                    Price = 5.99m,\r\n                    Quantity = 1\r\n                }\r\n            }", span="766-778", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeUsingCustomBinder()", file="TypeNameHandlingTests.cs"];
m8_232 [label="string json = JsonConvert.SerializeObject(values, Formatting.Indented, new JsonSerializerSettings\r\n            {\r\n                TypeNameHandling = TypeNameHandling.Auto,\r\n#pragma warning disable CS0618 // Type or member is obsolete\r\n                Binder = binder\r\n#pragma warning restore CS0618 // Type or member is obsolete\r\n            })", span="780-786", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeUsingCustomBinder()", file="TypeNameHandlingTests.cs"];
m8_234 [label="IList<object> newValues = JsonConvert.DeserializeObject<IList<object>>(json, new JsonSerializerSettings\r\n            {\r\n                TypeNameHandling = TypeNameHandling.Auto,\r\n#pragma warning disable CS0618 // Type or member is obsolete\r\n                Binder = new TypeNameSerializationBinder(''Newtonsoft.Json.Tests.Serialization.{0}, Newtonsoft.Json.Tests'')\r\n#pragma warning restore CS0618 // Type or member is obsolete\r\n            })", span="814-820", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeUsingCustomBinder()", file="TypeNameHandlingTests.cs"];
m8_230 [label="TypeNameSerializationBinder binder = new TypeNameSerializationBinder(''Newtonsoft.Json.Tests.Serialization.{0}, Newtonsoft.Json.Tests'')", span="764-764", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeUsingCustomBinder()", file="TypeNameHandlingTests.cs"];
m8_233 [label="StringAssert.AreEqual(@''[\r\n  {\r\n    ''''$type'''': ''''Customer'''',\r\n    ''''Name'''': ''''Caroline Customer''''\r\n  },\r\n  {\r\n    ''''$type'''': ''''Purchase'''',\r\n    ''''ProductName'''': ''''Elbow Grease'''',\r\n    ''''Price'''': 5.99,\r\n    ''''Quantity'''': 1\r\n  }\r\n]'', json)", span="801-812", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeUsingCustomBinder()", file="TypeNameHandlingTests.cs"];
m8_235 [label="CustomAssert.IsInstanceOfType(typeof(Customer), newValues[0])", span="822-822", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeUsingCustomBinder()", file="TypeNameHandlingTests.cs"];
m8_236 [label="Customer customer = (Customer)newValues[0]", span="823-823", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeUsingCustomBinder()", file="TypeNameHandlingTests.cs"];
m8_238 [label="CustomAssert.IsInstanceOfType(typeof(Purchase), newValues[1])", span="826-826", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeUsingCustomBinder()", file="TypeNameHandlingTests.cs"];
m8_239 [label="Purchase purchase = (Purchase)newValues[1]", span="827-827", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeUsingCustomBinder()", file="TypeNameHandlingTests.cs"];
m8_237 [label="Assert.AreEqual(''Caroline Customer'', customer.Name)", span="824-824", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeUsingCustomBinder()", file="TypeNameHandlingTests.cs"];
m8_240 [label="Assert.AreEqual(''Elbow Grease'', purchase.ProductName)", span="828-828", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeUsingCustomBinder()", file="TypeNameHandlingTests.cs"];
m8_241 [label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeUsingCustomBinder()", span="762-762", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeUsingCustomBinder()", file="TypeNameHandlingTests.cs"];
m8_62 [label="dateTime = dateTime.ToLocalTime()", span="146-146", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="TypeNameHandlingTests.cs"];
m8_255 [label="Entry string.Format(string, object)", span="0-0", cluster="string.Format(string, object)", file="TypeNameHandlingTests.cs"];
m8_90 [label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeWrapper()", span="279-279", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeWrapper()", file="TypeNameHandlingTests.cs"];
m8_11 [label="Entry System.IO.BinaryWriter.Close()", span="0-0", cluster="System.IO.BinaryWriter.Close()", file="TypeNameHandlingTests.cs"];
m8_471 [label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameDictionary<T>.TypeNameDictionary()", span="2334-2334", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameDictionary<T>.TypeNameDictionary()", file="TypeNameHandlingTests.cs"];
m8_4 [label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.KnownAutoTypesTest()", span="76-76", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.KnownAutoTypesTest()", file="TypeNameHandlingTests.cs"];
m8_5 [label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.KnownAutoTypes.KnownAutoTypes()", span="64-64", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.KnownAutoTypes.KnownAutoTypes()", file="TypeNameHandlingTests.cs"];
m8_6 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="TypeNameHandlingTests.cs"];
m8_564 [label="Entry Newtonsoft.Json.Linq.JObject.JObject()", span="87-87", cluster="Newtonsoft.Json.Linq.JObject.JObject()", file="TypeNameHandlingTests.cs"];
m8_85 [label="string json = JsonConvert.SerializeObject(wrapper, Formatting.Indented, new JsonSerializerSettings\r\n            {\r\n                TypeNameHandling = TypeNameHandling.Auto\r\n            })", span="291-294", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeWrapper()", file="TypeNameHandlingTests.cs"];
m8_102 [label="string employeeRef = ReflectionUtils.GetTypeName(typeof(EmployeeReference), TypeNameAssemblyFormatHandling.Simple, null)", span="341-341", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeTypeName()", file="TypeNameHandlingTests.cs"];
m8_103 [label="string json = @''{\r\n  ''''$id'''': ''''1'''',\r\n  ''''$type'''': '''''' + employeeRef + @'''''',\r\n  ''''Name'''': ''''Name!'''',\r\n  ''''Manager'''': null\r\n}''", span="343-348", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeTypeName()", file="TypeNameHandlingTests.cs"];
m8_104 [label="object employee = JsonConvert.DeserializeObject(json, null, new JsonSerializerSettings\r\n            {\r\n                TypeNameHandling = TypeNameHandling.Objects\r\n            })", span="350-353", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeTypeName()", file="TypeNameHandlingTests.cs"];
m8_105 [label="CustomAssert.IsInstanceOfType(typeof(EmployeeReference), employee)", span="355-355", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeTypeName()", file="TypeNameHandlingTests.cs"];
m8_106 [label="Assert.AreEqual(''Name!'', ((EmployeeReference)employee).Name)", span="356-356", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeTypeName()", file="TypeNameHandlingTests.cs"];
m8_95 [label="string employeeRef = ReflectionUtils.GetTypeName(typeof(EmployeeReference), TypeNameAssemblyFormatHandling.Simple, null)", span="321-321", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteTypeNameForObjects()", file="TypeNameHandlingTests.cs"];
m8_696 [label="Entry Newtonsoft.Json.Tests.Serialization.ObjectWithOptionalMessage.ObjectWithOptionalMessage(Newtonsoft.Json.Tests.Serialization.Message2?)", span="2112-2112", cluster="Newtonsoft.Json.Tests.Serialization.ObjectWithOptionalMessage.ObjectWithOptionalMessage(Newtonsoft.Json.Tests.Serialization.Message2?)", file="TypeNameHandlingTests.cs"];
m8_710 [label="Message = message", span="2114-2114", cluster="Newtonsoft.Json.Tests.Serialization.ObjectWithOptionalMessage.ObjectWithOptionalMessage(Newtonsoft.Json.Tests.Serialization.Message2?)", file="TypeNameHandlingTests.cs"];
m8_711 [label="Exit Newtonsoft.Json.Tests.Serialization.ObjectWithOptionalMessage.ObjectWithOptionalMessage(Newtonsoft.Json.Tests.Serialization.Message2?)", span="2112-2112", cluster="Newtonsoft.Json.Tests.Serialization.ObjectWithOptionalMessage.ObjectWithOptionalMessage(Newtonsoft.Json.Tests.Serialization.Message2?)", file="TypeNameHandlingTests.cs"];
m8_741 [label="Entry System.Runtime.Serialization.SerializationInfo.GetString(string)", span="0-0", cluster="System.Runtime.Serialization.SerializationInfo.GetString(string)", file="TypeNameHandlingTests.cs"];
m8_708 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)", file="TypeNameHandlingTests.cs"];
m8_281 [label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CollectionWithAbstractItems()", span="945-945", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CollectionWithAbstractItems()", file="TypeNameHandlingTests.cs"];
m8_285 [label="testObject.AnotherTestMember.Add(1, new List<ContentBaseClass>())", span="950-950", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CollectionWithAbstractItems()", file="TypeNameHandlingTests.cs"];
m8_284 [label="testObject.AnotherTestMember = new Dictionary<int, IList<ContentBaseClass>>()", span="949-949", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CollectionWithAbstractItems()", file="TypeNameHandlingTests.cs"];
m8_282 [label="HolderClass testObject = new HolderClass()", span="947-947", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CollectionWithAbstractItems()", file="TypeNameHandlingTests.cs"];
m8_286 [label="testObject.AnotherTestMember[1].Add(new ContentSubClass(''Second One''))", span="951-951", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CollectionWithAbstractItems()", file="TypeNameHandlingTests.cs"];
m8_283 [label="testObject.TestMember = new ContentSubClass(''First One'')", span="948-948", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CollectionWithAbstractItems()", file="TypeNameHandlingTests.cs"];
m8_300 [label="StringAssert.AreEqual(expected, json)", span="991-991", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CollectionWithAbstractItems()", file="TypeNameHandlingTests.cs"];
m8_287 [label="testObject.AThirdTestMember = new ContentSubClass(''Third One'')", span="952-952", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CollectionWithAbstractItems()", file="TypeNameHandlingTests.cs"];
m8_294 [label="serializingTester.Serialize(jsonWriter, testObject)", span="962-962", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CollectionWithAbstractItems()", file="TypeNameHandlingTests.cs"];
m8_290 [label="StringWriter sw = new StringWriter()", span="957-957", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CollectionWithAbstractItems()", file="TypeNameHandlingTests.cs"];
m8_291 [label="JsonTextWriter jsonWriter = new JsonTextWriter(sw)", span="958-958", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CollectionWithAbstractItems()", file="TypeNameHandlingTests.cs"];
m8_310 [label="Assert.AreEqual(1, anotherTestObject.AnotherTestMember.Count)", span="1009-1009", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CollectionWithAbstractItems()", file="TypeNameHandlingTests.cs"];
m8_313 [label="Assert.AreEqual(1, list.Count)", span="1014-1014", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CollectionWithAbstractItems()", file="TypeNameHandlingTests.cs"];
m8_295 [label="string json = sw.ToString()", span="965-965", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CollectionWithAbstractItems()", file="TypeNameHandlingTests.cs"];
m8_299 [label="string expected = @''{\r\n  ''''TestMember'''': {\r\n    ''''$type'''': '''''' + contentSubClassRef + @'''''',\r\n    ''''SomeString'''': ''''First One''''\r\n  },\r\n  ''''AnotherTestMember'''': {\r\n    ''''$type'''': '''''' + dictionaryRef + @'''''',\r\n    ''''1'''': [\r\n      {\r\n        ''''$type'''': '''''' + contentSubClassRef + @'''''',\r\n        ''''SomeString'''': ''''Second One''''\r\n      }\r\n    ]\r\n  },\r\n  ''''AThirdTestMember'''': {\r\n    ''''$type'''': '''''' + contentSubClassRef + @'''''',\r\n    ''''SomeString'''': ''''Third One''''\r\n  }\r\n}''", span="971-989", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CollectionWithAbstractItems()", file="TypeNameHandlingTests.cs"];
m8_301 [label="StringReader sr = new StringReader(json)", span="993-993", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CollectionWithAbstractItems()", file="TypeNameHandlingTests.cs"];
m8_296 [label="string contentSubClassRef = ReflectionUtils.GetTypeName(typeof(ContentSubClass), TypeNameAssemblyFormatHandling.Simple, null)", span="967-967", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CollectionWithAbstractItems()", file="TypeNameHandlingTests.cs"];
m8_297 [label="string dictionaryRef = ReflectionUtils.GetTypeName(typeof(Dictionary<int, IList<ContentBaseClass>>), TypeNameAssemblyFormatHandling.Simple, null)", span="968-968", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CollectionWithAbstractItems()", file="TypeNameHandlingTests.cs"];
m8_298 [label="string listRef = ReflectionUtils.GetTypeName(typeof(List<ContentBaseClass>), TypeNameAssemblyFormatHandling.Simple, null)", span="969-969", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CollectionWithAbstractItems()", file="TypeNameHandlingTests.cs"];
m8_288 [label="JsonSerializer serializingTester = new JsonSerializer()", span="954-954", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CollectionWithAbstractItems()", file="TypeNameHandlingTests.cs"];
m8_293 [label="serializingTester.TypeNameHandling = TypeNameHandling.Auto", span="961-961", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CollectionWithAbstractItems()", file="TypeNameHandlingTests.cs"];
m8_302 [label="JsonSerializer deserializingTester = new JsonSerializer()", span="995-995", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CollectionWithAbstractItems()", file="TypeNameHandlingTests.cs"];
m8_289 [label="serializingTester.ReferenceLoopHandling = ReferenceLoopHandling.Ignore", span="955-955", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CollectionWithAbstractItems()", file="TypeNameHandlingTests.cs"];
m8_304 [label="JsonTextReader jsonReader = new JsonTextReader(sr)", span="999-999", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CollectionWithAbstractItems()", file="TypeNameHandlingTests.cs"];
m8_306 [label="anotherTestObject = deserializingTester.Deserialize<HolderClass>(jsonReader)", span="1003-1003", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CollectionWithAbstractItems()", file="TypeNameHandlingTests.cs"];
m8_292 [label="jsonWriter.Formatting = Formatting.Indented", span="960-960", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CollectionWithAbstractItems()", file="TypeNameHandlingTests.cs"];
m8_309 [label="CustomAssert.IsInstanceOfType(typeof(Dictionary<int, IList<ContentBaseClass>>), anotherTestObject.AnotherTestMember)", span="1008-1008", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CollectionWithAbstractItems()", file="TypeNameHandlingTests.cs"];
m8_311 [label="IList<ContentBaseClass> list = anotherTestObject.AnotherTestMember[1]", span="1011-1011", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CollectionWithAbstractItems()", file="TypeNameHandlingTests.cs"];
m8_312 [label="CustomAssert.IsInstanceOfType(typeof(List<ContentBaseClass>), list)", span="1013-1013", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CollectionWithAbstractItems()", file="TypeNameHandlingTests.cs"];
m8_314 [label="CustomAssert.IsInstanceOfType(typeof(ContentSubClass), list[0])", span="1015-1015", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CollectionWithAbstractItems()", file="TypeNameHandlingTests.cs"];
m8_308 [label="CustomAssert.IsInstanceOfType(typeof(ContentSubClass), anotherTestObject.TestMember)", span="1007-1007", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CollectionWithAbstractItems()", file="TypeNameHandlingTests.cs"];
m8_303 [label="HolderClass anotherTestObject", span="997-997", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CollectionWithAbstractItems()", file="TypeNameHandlingTests.cs"];
m8_305 [label="deserializingTester.TypeNameHandling = TypeNameHandling.Auto", span="1001-1001", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CollectionWithAbstractItems()", file="TypeNameHandlingTests.cs"];
m8_307 [label="Assert.IsNotNull(anotherTestObject)", span="1006-1006", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CollectionWithAbstractItems()", file="TypeNameHandlingTests.cs"];
m8_315 [label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CollectionWithAbstractItems()", span="945-945", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CollectionWithAbstractItems()", file="TypeNameHandlingTests.cs"];
m8_405 [label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TestJsonSerializationRoundTrip(Newtonsoft.Json.Tests.Serialization.SerializableWrapper, Newtonsoft.Json.TypeNameHandling)", span="1265-1265", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TestJsonSerializationRoundTrip(Newtonsoft.Json.Tests.Serialization.SerializableWrapper, Newtonsoft.Json.TypeNameHandling)", file="TypeNameHandlingTests.cs"];
m8_406 [label="StringWriter writer = new StringWriter()", span="1267-1267", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TestJsonSerializationRoundTrip(Newtonsoft.Json.Tests.Serialization.SerializableWrapper, Newtonsoft.Json.TypeNameHandling)", file="TypeNameHandlingTests.cs"];
m8_408 [label="serializer.TypeNameHandling = flag", span="1271-1271", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TestJsonSerializationRoundTrip(Newtonsoft.Json.Tests.Serialization.SerializableWrapper, Newtonsoft.Json.TypeNameHandling)", file="TypeNameHandlingTests.cs"];
m8_409 [label="serializer.Serialize(new JsonTextWriter(writer), e)", span="1274-1274", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TestJsonSerializationRoundTrip(Newtonsoft.Json.Tests.Serialization.SerializableWrapper, Newtonsoft.Json.TypeNameHandling)", file="TypeNameHandlingTests.cs"];
m8_411 [label="Assert.AreEqual(e, f, ''Objects should be equal after round trip json serialization'')", span="1283-1283", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TestJsonSerializationRoundTrip(Newtonsoft.Json.Tests.Serialization.SerializableWrapper, Newtonsoft.Json.TypeNameHandling)", file="TypeNameHandlingTests.cs"];
m8_407 [label="JsonSerializer serializer = new JsonSerializer()", span="1270-1270", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TestJsonSerializationRoundTrip(Newtonsoft.Json.Tests.Serialization.SerializableWrapper, Newtonsoft.Json.TypeNameHandling)", file="TypeNameHandlingTests.cs"];
m8_410 [label="SerializableWrapper f = serializer.Deserialize<SerializableWrapper>(new JsonTextReader(new StringReader(writer.ToString())))", span="1280-1280", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TestJsonSerializationRoundTrip(Newtonsoft.Json.Tests.Serialization.SerializableWrapper, Newtonsoft.Json.TypeNameHandling)", file="TypeNameHandlingTests.cs"];
m8_412 [label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TestJsonSerializationRoundTrip(Newtonsoft.Json.Tests.Serialization.SerializableWrapper, Newtonsoft.Json.TypeNameHandling)", span="1265-1265", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TestJsonSerializationRoundTrip(Newtonsoft.Json.Tests.Serialization.SerializableWrapper, Newtonsoft.Json.TypeNameHandling)", file="TypeNameHandlingTests.cs"];
m8_472 [label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameObjectItems()", span="1432-1432", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameObjectItems()", file="TypeNameHandlingTests.cs"];
m8_481 [label="StringAssert.AreEqual(expected, json)", span="1455-1455", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameObjectItems()", file="TypeNameHandlingTests.cs"];
m8_488 [label="StringAssert.AreEqual(@''{\r\n  ''''MyProperty'''': 2147483647\r\n}'', o2.ObjectNotHandled.ToString())", span="1464-1466", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameObjectItems()", file="TypeNameHandlingTests.cs"];
m8_474 [label="o1.Object1 = new TestComponentSimple { MyProperty = 1 }", span="1436-1436", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameObjectItems()", file="TypeNameHandlingTests.cs"];
m8_476 [label="o1.ObjectNotHandled = new TestComponentSimple { MyProperty = int.MaxValue }", span="1438-1438", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameObjectItems()", file="TypeNameHandlingTests.cs"];
m8_485 [label="Assert.AreEqual(1, ((TestComponentSimple)o2.Object1).MyProperty)", span="1461-1461", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameObjectItems()", file="TypeNameHandlingTests.cs"];
m8_479 [label="string json = JsonConvert.SerializeObject(o1, Formatting.Indented)", span="1442-1442", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameObjectItems()", file="TypeNameHandlingTests.cs"];
m8_480 [label="string expected = @''{\r\n  ''''Object1'''': {\r\n    ''''$type'''': ''''Newtonsoft.Json.Tests.TestObjects.TestComponentSimple, Newtonsoft.Json.Tests'''',\r\n    ''''MyProperty'''': 1\r\n  },\r\n  ''''Object2'''': 123,\r\n  ''''ObjectNotHandled'''': {\r\n    ''''MyProperty'''': 2147483647\r\n  },\r\n  ''''String'''': ''''String!'''',\r\n  ''''Integer'''': 2147483647\r\n}''", span="1443-1454", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameObjectItems()", file="TypeNameHandlingTests.cs"];
m8_482 [label="TypeNameObject o2 = JsonConvert.DeserializeObject<TypeNameObject>(json)", span="1457-1457", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameObjectItems()", file="TypeNameHandlingTests.cs"];
m8_487 [label="CustomAssert.IsInstanceOfType(typeof(JObject), o2.ObjectNotHandled)", span="1463-1463", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameObjectItems()", file="TypeNameHandlingTests.cs"];
m8_473 [label="TypeNameObject o1 = new TypeNameObject()", span="1434-1434", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameObjectItems()", file="TypeNameHandlingTests.cs"];
m8_475 [label="o1.Object2 = 123", span="1437-1437", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameObjectItems()", file="TypeNameHandlingTests.cs"];
m8_477 [label="o1.String = ''String!''", span="1439-1439", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameObjectItems()", file="TypeNameHandlingTests.cs"];
m8_484 [label="CustomAssert.IsInstanceOfType(typeof(TestComponentSimple), o2.Object1)", span="1460-1460", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameObjectItems()", file="TypeNameHandlingTests.cs"];
m8_486 [label="CustomAssert.IsInstanceOfType(typeof(long), o2.Object2)", span="1462-1462", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameObjectItems()", file="TypeNameHandlingTests.cs"];
m8_478 [label="o1.Integer = int.MaxValue", span="1440-1440", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameObjectItems()", file="TypeNameHandlingTests.cs"];
m8_483 [label="Assert.IsNotNull(o2)", span="1458-1458", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameObjectItems()", file="TypeNameHandlingTests.cs"];
m8_489 [label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameObjectItems()", span="1432-1432", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameObjectItems()", file="TypeNameHandlingTests.cs"];
m8_346 [label="Entry Newtonsoft.Json.JsonConvert.DeserializeObject(string, Newtonsoft.Json.JsonSerializerSettings)", span="681-681", cluster="Newtonsoft.Json.JsonConvert.DeserializeObject(string, Newtonsoft.Json.JsonSerializerSettings)", file="TypeNameHandlingTests.cs"];
m8_717 [label="Entry System.Runtime.Serialization.SerializationInfo.GetValue(string, System.Type)", span="0-0", cluster="System.Runtime.Serialization.SerializationInfo.GetValue(string, System.Type)", file="TypeNameHandlingTests.cs"];
m8_256 [label="Entry System.Type.GetType(string, bool)", span="0-0", cluster="System.Type.GetType(string, bool)", file="TypeNameHandlingTests.cs"];
m8_108 [label="s != null", span="204-204", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteUtf8Bytes(string, int)", file="TypeNameHandlingTests.cs"];
m8_364 [label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>.GetEnumerator()", span="1163-1163", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>.GetEnumerator()", file="TypeNameHandlingTests.cs"];
m8_365 [label="count == 0", span="1165-1165", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>.GetEnumerator()", file="TypeNameHandlingTests.cs"];
m8_367 [label="yield return value;", span="1169-1169", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>.GetEnumerator()", file="TypeNameHandlingTests.cs"];
m8_368 [label="var nextInLine = next", span="1171-1171", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>.GetEnumerator()", file="TypeNameHandlingTests.cs"];
m8_366 [label="yield break;", span="1167-1167", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>.GetEnumerator()", file="TypeNameHandlingTests.cs"];
m8_369 [label="nextInLine != null", span="1172-1172", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>.GetEnumerator()", file="TypeNameHandlingTests.cs"];
m8_370 [label="nextInLine.count != 0", span="1174-1174", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>.GetEnumerator()", file="TypeNameHandlingTests.cs"];
m8_371 [label="yield return nextInLine.value;", span="1176-1176", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>.GetEnumerator()", file="TypeNameHandlingTests.cs"];
m8_372 [label="nextInLine = nextInLine.next", span="1178-1178", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>.GetEnumerator()", file="TypeNameHandlingTests.cs"];
m8_373 [label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>.GetEnumerator()", span="1163-1163", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>.GetEnumerator()", file="TypeNameHandlingTests.cs"];
m8_562 [label="Entry Newtonsoft.Json.Tests.Serialization.PropertyItemTypeNameHandlingObject.PropertyItemTypeNameHandlingObject()", span="2294-2294", cluster="Newtonsoft.Json.Tests.Serialization.PropertyItemTypeNameHandlingObject.PropertyItemTypeNameHandlingObject()", file="TypeNameHandlingTests.cs"];
m8_318 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", file="TypeNameHandlingTests.cs"];
m8_17 [label="StringAssert.AreEqual(@''{\r\n  ''''movie'''': {\r\n    ''''$type'''': ''''Newtonsoft.Json.Tests.TestObjects.Movie, Newtonsoft.Json.Tests'''',\r\n    ''''Name'''': ''''Die Hard'''',\r\n    ''''Description'''': null,\r\n    ''''Classification'''': null,\r\n    ''''Studio'''': null,\r\n    ''''ReleaseDate'''': null,\r\n    ''''ReleaseCountries'''': null\r\n  }\r\n}'', json)", span="139-149", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DictionaryAuto()", file="TypeNameHandlingTests.cs"];
m8_18 [label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DictionaryAuto()", span="127-127", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DictionaryAuto()", file="TypeNameHandlingTests.cs"];
m8_20 [label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.KeyValuePairAuto()", span="153-153", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.KeyValuePairAuto()", file="TypeNameHandlingTests.cs"];
m8_38 [label="var reader = new JsonTextReader(new StringReader(sb.ToString()))", span="192-192", cluster="lambda expression", file="TypeNameHandlingTests.cs"];
m8_41 [label="ser.Deserialize<sbyte>(reader)", span="195-195", cluster="lambda expression", file="TypeNameHandlingTests.cs"];
m8_44 [label="Entry System.IO.StringReader.StringReader(string)", span="0-0", cluster="System.IO.StringReader.StringReader(string)", file="TypeNameHandlingTests.cs"];
m8_47 [label="Entry Newtonsoft.Json.JsonSerializer.Deserialize<T>(Newtonsoft.Json.JsonReader)", span="838-838", cluster="Newtonsoft.Json.JsonSerializer.Deserialize<T>(Newtonsoft.Json.JsonReader)", file="TypeNameHandlingTests.cs"];
m8_68 [label="string json = JsonConvert.SerializeObject(new WagePerson(), typeof(object), Formatting.Indented, new JsonSerializerSettings\r\n            {\r\n                TypeNameHandling = TypeNameHandling.Auto\r\n            })", span="230-233", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeRootTypeNameAutoWithJsonConvert()", file="TypeNameHandlingTests.cs"];
m8_74 [label="StringAssert.AreEqual(@''{\r\n  ''''$type'''': ''''Newtonsoft.Json.Tests.TestObjects.Organization.WagePerson, Newtonsoft.Json.Tests'''',\r\n  ''''HourlyWage'''': 0.0,\r\n  ''''Name'''': null,\r\n  ''''BirthDate'''': ''''0001-01-01T00:00:00'''',\r\n  ''''LastModified'''': ''''0001-01-01T00:00:00''''\r\n}'', json)", span="252-258", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeRootTypeNameAutoWithJsonConvert_Generic()", file="TypeNameHandlingTests.cs"];
m8_81 [label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeWrapper()", span="279-279", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeWrapper()", file="TypeNameHandlingTests.cs"];
m8_19 [label="Entry Newtonsoft.Json.Tests.TestObjects.Movie.Movie()", span="30-30", cluster="Newtonsoft.Json.Tests.TestObjects.Movie.Movie()", file="TypeNameHandlingTests.cs"];
m8_37 [label="Entry lambda expression", span="190-196", cluster="lambda expression", file="TypeNameHandlingTests.cs"];
m8_40 [label="ser.MetadataPropertyHandling = MetadataPropertyHandling.Default", span="194-194", cluster="lambda expression", file="TypeNameHandlingTests.cs"];
m8_43 [label="Entry Newtonsoft.Json.JsonTextReader.JsonTextReader(System.IO.TextReader)", span="75-75", cluster="Newtonsoft.Json.JsonTextReader.JsonTextReader(System.IO.TextReader)", file="TypeNameHandlingTests.cs"];
m8_46 [label="Entry Newtonsoft.Json.JsonSerializer.JsonSerializer()", span="530-530", cluster="Newtonsoft.Json.JsonSerializer.JsonSerializer()", file="TypeNameHandlingTests.cs"];
m8_67 [label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeRootTypeNameAutoWithJsonConvert()", span="228-228", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeRootTypeNameAutoWithJsonConvert()", file="TypeNameHandlingTests.cs"];
m8_73 [label="string json = JsonConvert.SerializeObject(new WagePerson(), typeof(object), Formatting.Indented, new JsonSerializerSettings\r\n            {\r\n                TypeNameHandling = TypeNameHandling.Auto\r\n            })", span="247-250", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeRootTypeNameAutoWithJsonConvert_Generic()", file="TypeNameHandlingTests.cs"];
m8_21 [label="IList<KeyValuePair<string, object>> dic = new List<KeyValuePair<string, object>>\r\n            {\r\n                new KeyValuePair<string, object>(''movie'', new Movie { Name = ''Die Hard'' })\r\n            }", span="155-158", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.KeyValuePairAuto()", file="TypeNameHandlingTests.cs"];
m8_22 [label="string json = JsonConvert.SerializeObject(dic, Formatting.Indented, new JsonSerializerSettings\r\n            {\r\n                TypeNameHandling = TypeNameHandling.Auto\r\n            })", span="160-163", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.KeyValuePairAuto()", file="TypeNameHandlingTests.cs"];
m8_23 [label="StringAssert.AreEqual(@''[\r\n  {\r\n    ''''Key'''': ''''movie'''',\r\n    ''''Value'''': {\r\n      ''''$type'''': ''''Newtonsoft.Json.Tests.TestObjects.Movie, Newtonsoft.Json.Tests'''',\r\n      ''''Name'''': ''''Die Hard'''',\r\n      ''''Description'''': null,\r\n      ''''Classification'''': null,\r\n      ''''Studio'''': null,\r\n      ''''ReleaseDate'''': null,\r\n      ''''ReleaseCountries'''': null\r\n    }\r\n  }\r\n]'', json)", span="165-178", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.KeyValuePairAuto()", file="TypeNameHandlingTests.cs"];
m8_24 [label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.KeyValuePairAuto()", span="153-153", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.KeyValuePairAuto()", file="TypeNameHandlingTests.cs"];
m8_25 [label="Entry System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", span="0-0", cluster="System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", file="TypeNameHandlingTests.cs"];
m8_35 [label="Entry System.Text.StringBuilder.Append(string)", span="0-0", cluster="System.Text.StringBuilder.Append(string)", file="TypeNameHandlingTests.cs"];
m8_39 [label="var ser = new JsonSerializer()", span="193-193", cluster="lambda expression", file="TypeNameHandlingTests.cs"];
m8_42 [label="Exit lambda expression", span="190-196", cluster="lambda expression", file="TypeNameHandlingTests.cs"];
m8_45 [label="Entry System.Text.StringBuilder.ToString()", span="0-0", cluster="System.Text.StringBuilder.ToString()", file="TypeNameHandlingTests.cs"];
m8_64 [label="Entry string.Contains(string)", span="0-0", cluster="string.Contains(string)", file="TypeNameHandlingTests.cs"];
m8_59 [label="Entry System.IO.StringWriter.StringWriter()", span="0-0", cluster="System.IO.StringWriter.StringWriter()", file="TypeNameHandlingTests.cs"];
m8_60 [label="Entry Newtonsoft.Json.JsonTextWriter.JsonTextWriter(System.IO.TextWriter)", span="149-149", cluster="Newtonsoft.Json.JsonTextWriter.JsonTextWriter(System.IO.TextWriter)", file="TypeNameHandlingTests.cs"];
m8_61 [label="Entry Newtonsoft.Json.Tests.TestObjects.Organization.WagePerson.WagePerson()", span="27-27", cluster="Newtonsoft.Json.Tests.TestObjects.Organization.WagePerson.WagePerson()", file="TypeNameHandlingTests.cs"];
m8_66 [label="Entry Newtonsoft.Json.Tests.CustomAssert.IsInstanceOfType(System.Type, object)", span="301-301", cluster="Newtonsoft.Json.Tests.CustomAssert.IsInstanceOfType(System.Type, object)", file="TypeNameHandlingTests.cs"];
m8_69 [label="StringAssert.AreEqual(@''{\r\n  ''''$type'''': ''''Newtonsoft.Json.Tests.TestObjects.Organization.WagePerson, Newtonsoft.Json.Tests'''',\r\n  ''''HourlyWage'''': 0.0,\r\n  ''''Name'''': null,\r\n  ''''BirthDate'''': ''''0001-01-01T00:00:00'''',\r\n  ''''LastModified'''': ''''0001-01-01T00:00:00''''\r\n}'', json)", span="235-241", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeRootTypeNameAutoWithJsonConvert()", file="TypeNameHandlingTests.cs"];
m8_71 [label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object, System.Type, Newtonsoft.Json.Formatting, Newtonsoft.Json.JsonSerializerSettings)", span="638-638", cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, System.Type, Newtonsoft.Json.Formatting, Newtonsoft.Json.JsonSerializerSettings)", file="TypeNameHandlingTests.cs"];
m8_70 [label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeRootTypeNameAutoWithJsonConvert()", span="228-228", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeRootTypeNameAutoWithJsonConvert()", file="TypeNameHandlingTests.cs"];
m8_72 [label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeRootTypeNameAutoWithJsonConvert_Generic()", span="245-245", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeRootTypeNameAutoWithJsonConvert_Generic()", file="TypeNameHandlingTests.cs"];
m8_75 [label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeRootTypeNameAutoWithJsonConvert_Generic()", span="245-245", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeRootTypeNameAutoWithJsonConvert_Generic()", file="TypeNameHandlingTests.cs"];
m8_80 [label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object, System.Type, Newtonsoft.Json.JsonSerializerSettings)", span="601-601", cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, System.Type, Newtonsoft.Json.JsonSerializerSettings)", file="TypeNameHandlingTests.cs"];
m8_82 [label="Wrapper wrapper = new Wrapper()", span="281-281", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeWrapper()", file="TypeNameHandlingTests.cs"];
m8_492 [label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandling()", span="1470-1470", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandling()", file="TypeNameHandlingTests.cs"];
m8_494 [label="c1.Data = new List<object>\r\n            {\r\n                1,\r\n                ''two'',\r\n                new TestComponentSimple { MyProperty = 1 }\r\n            }", span="1473-1478", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandling()", file="TypeNameHandlingTests.cs"];
m8_493 [label="PropertyItemTypeNameHandling c1 = new PropertyItemTypeNameHandling()", span="1472-1472", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandling()", file="TypeNameHandlingTests.cs"];
m8_495 [label="string json = JsonConvert.SerializeObject(c1, Formatting.Indented)", span="1480-1480", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandling()", file="TypeNameHandlingTests.cs"];
m8_496 [label="StringAssert.AreEqual(@''{\r\n  ''''Data'''': [\r\n    1,\r\n    ''''two'''',\r\n    {\r\n      ''''$type'''': ''''Newtonsoft.Json.Tests.TestObjects.TestComponentSimple, Newtonsoft.Json.Tests'''',\r\n      ''''MyProperty'''': 1\r\n    }\r\n  ]\r\n}'', json)", span="1481-1490", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandling()", file="TypeNameHandlingTests.cs"];
m8_497 [label="PropertyItemTypeNameHandling c2 = JsonConvert.DeserializeObject<PropertyItemTypeNameHandling>(json)", span="1492-1492", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandling()", file="TypeNameHandlingTests.cs"];
m8_498 [label="Assert.AreEqual(3, c2.Data.Count)", span="1493-1493", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandling()", file="TypeNameHandlingTests.cs"];
m8_503 [label="Assert.AreEqual(1, c.MyProperty)", span="1499-1499", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandling()", file="TypeNameHandlingTests.cs"];
m8_499 [label="CustomAssert.IsInstanceOfType(typeof(long), c2.Data[0])", span="1495-1495", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandling()", file="TypeNameHandlingTests.cs"];
m8_500 [label="CustomAssert.IsInstanceOfType(typeof(string), c2.Data[1])", span="1496-1496", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandling()", file="TypeNameHandlingTests.cs"];
m8_501 [label="CustomAssert.IsInstanceOfType(typeof(TestComponentSimple), c2.Data[2])", span="1497-1497", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandling()", file="TypeNameHandlingTests.cs"];
m8_502 [label="TestComponentSimple c = (TestComponentSimple)c2.Data[2]", span="1498-1498", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandling()", file="TypeNameHandlingTests.cs"];
m8_504 [label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandling()", span="1470-1470", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandling()", file="TypeNameHandlingTests.cs"];
m8_505 [label="Entry Newtonsoft.Json.Tests.Serialization.PropertyItemTypeNameHandling.PropertyItemTypeNameHandling()", span="2322-2322", cluster="Newtonsoft.Json.Tests.Serialization.PropertyItemTypeNameHandling.PropertyItemTypeNameHandling()", file="TypeNameHandlingTests.cs"];
m8_110 [label="_largeByteBuffer = new byte[256]", span="208-208", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteUtf8Bytes(string, int)", file="TypeNameHandlingTests.cs"];
m8_113 [label="_writer.Write(_largeByteBuffer, 0, byteCount)", span="213-213", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteUtf8Bytes(string, int)", file="TypeNameHandlingTests.cs"];
m8_112 [label="Encoding.GetBytes(s, 0, s.Length, _largeByteBuffer, 0)", span="212-212", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteUtf8Bytes(string, int)", file="TypeNameHandlingTests.cs"];
m8_114 [label="byte[] bytes = Encoding.GetBytes(s)", span="217-217", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteUtf8Bytes(string, int)", file="TypeNameHandlingTests.cs"];
m8_111 [label="byteCount <= 256", span="210-210", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteUtf8Bytes(string, int)", file="TypeNameHandlingTests.cs"];
m8_115 [label="_writer.Write(bytes)", span="218-218", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteUtf8Bytes(string, int)", file="TypeNameHandlingTests.cs"];
m8_347 [label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializingIEnumerableOfTShouldRetainGenericTypeInfo()", span="1125-1125", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializingIEnumerableOfTShouldRetainGenericTypeInfo()", file="TypeNameHandlingTests.cs"];
m8_350 [label="string json = JsonConvert.SerializeObject(products, Formatting.Indented, new JsonSerializerSettings { TypeNameHandling = TypeNameHandling.All })", span="1131-1131", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializingIEnumerableOfTShouldRetainGenericTypeInfo()", file="TypeNameHandlingTests.cs"];
m8_351 [label="StringAssert.AreEqual(@''{\r\n  ''''$type'''': '''''' + productClassRef + @'''''',\r\n  ''''$values'''': []\r\n}'', json)", span="1133-1136", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializingIEnumerableOfTShouldRetainGenericTypeInfo()", file="TypeNameHandlingTests.cs"];
m8_349 [label="CustomEnumerable<Product> products = new CustomEnumerable<Product>()", span="1129-1129", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializingIEnumerableOfTShouldRetainGenericTypeInfo()", file="TypeNameHandlingTests.cs"];
m8_348 [label="string productClassRef = ReflectionUtils.GetTypeName(typeof(CustomEnumerable<Product>), TypeNameAssemblyFormatHandling.Simple, null)", span="1127-1127", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializingIEnumerableOfTShouldRetainGenericTypeInfo()", file="TypeNameHandlingTests.cs"];
m8_352 [label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializingIEnumerableOfTShouldRetainGenericTypeInfo()", span="1125-1125", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializingIEnumerableOfTShouldRetainGenericTypeInfo()", file="TypeNameHandlingTests.cs"];
m8_117 [label="string employeeRef = typeof(EmployeeReference).AssemblyQualifiedName", span="382-382", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeGenericObjectListWithTypeName()", file="TypeNameHandlingTests.cs"];
m8_99 [label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteTypeNameForObjects()", span="319-319", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteTypeNameForObjects()", file="TypeNameHandlingTests.cs"];
m8_709 [label="Entry Unk.nameof", span="", cluster="Unk.nameof", file="TypeNameHandlingTests.cs"];
m8_592 [label="Entry Newtonsoft.Json.Tests.Linq.DynamicDictionary.DynamicDictionary()", span="958-958", cluster="Newtonsoft.Json.Tests.Linq.DynamicDictionary.DynamicDictionary()", file="TypeNameHandlingTests.cs"];
m8_722 [label="Entry System.Runtime.Serialization.SerializationInfo.AddValue(string, object)", span="0-0", cluster="System.Runtime.Serialization.SerializationInfo.AddValue(string, object)", file="TypeNameHandlingTests.cs"];
m8_316 [label="Entry Newtonsoft.Json.Tests.TestObjects.HolderClass.HolderClass()", span="31-31", cluster="Newtonsoft.Json.Tests.TestObjects.HolderClass.HolderClass()", file="TypeNameHandlingTests.cs"];
m8_754 [label="Entry object.ReferenceEquals(object, object)", span="0-0", cluster="object.ReferenceEquals(object, object)", file="TypeNameHandlingTests.cs"];
m8_0 [label="Entry Newtonsoft.Json.Bson.BsonBinaryWriter.BsonBinaryWriter(System.IO.BinaryWriter)", span="43-43", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.BsonBinaryWriter(System.IO.BinaryWriter)", file="TypeNameHandlingTests.cs"];
m8_1 [label="DateTimeKindHandling = DateTimeKind.Utc", span="45-45", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.BsonBinaryWriter(System.IO.BinaryWriter)", color=green, community=0, file="TypeNameHandlingTests.cs"];
m8_2 [label="_writer = writer", span="46-46", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.BsonBinaryWriter(System.IO.BinaryWriter)", file="TypeNameHandlingTests.cs"];
m8_3 [label="Exit Newtonsoft.Json.Bson.BsonBinaryWriter.BsonBinaryWriter(System.IO.BinaryWriter)", span="43-43", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.BsonBinaryWriter(System.IO.BinaryWriter)", file="TypeNameHandlingTests.cs"];
m8_89 [label="CustomAssert.IsInstanceOfType(typeof(Dictionary<string, EmployeeReference>), w2.Dictionary)", span="315-315", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeWrapper()", file="TypeNameHandlingTests.cs"];
m8_396 [label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ISerializableTypeNameHandlingTest()", span="1243-1243", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ISerializableTypeNameHandlingTest()", file="TypeNameHandlingTests.cs"];
m8_399 [label="TestJsonSerializationRoundTrip(w, TypeNameHandling.All)", span="1260-1260", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ISerializableTypeNameHandlingTest()", file="TypeNameHandlingTests.cs"];
m8_400 [label="TestJsonSerializationRoundTrip(w, TypeNameHandling.Auto)", span="1261-1261", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ISerializableTypeNameHandlingTest()", file="TypeNameHandlingTests.cs"];
m8_401 [label="TestJsonSerializationRoundTrip(w, TypeNameHandling.Objects)", span="1262-1262", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ISerializableTypeNameHandlingTest()", file="TypeNameHandlingTests.cs"];
m8_398 [label="SerializableWrapper w = new SerializableWrapper\r\n            {\r\n                Content = e\r\n            }", span="1248-1251", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ISerializableTypeNameHandlingTest()", file="TypeNameHandlingTests.cs"];
m8_397 [label="IExample e = new Example(''Rob'')", span="1246-1246", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ISerializableTypeNameHandlingTest()", file="TypeNameHandlingTests.cs"];
m8_402 [label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ISerializableTypeNameHandlingTest()", span="1243-1243", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ISerializableTypeNameHandlingTest()", file="TypeNameHandlingTests.cs"];
m8_12 [label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting, Newtonsoft.Json.JsonSerializerSettings)", span="618-618", cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting, Newtonsoft.Json.JsonSerializerSettings)", file="TypeNameHandlingTests.cs"];
m8_13 [label="Entry Newtonsoft.Json.Tests.StringAssert.AreEqual(string, string)", span="328-328", cluster="Newtonsoft.Json.Tests.StringAssert.AreEqual(string, string)", file="TypeNameHandlingTests.cs"];
m8_14 [label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DictionaryAuto()", span="127-127", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DictionaryAuto()", file="TypeNameHandlingTests.cs"];
m8_15 [label="Dictionary<string, object> dic = new Dictionary<string, object>\r\n            {\r\n                { ''movie'', new Movie { Name = ''Die Hard'' } }\r\n            }", span="129-132", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DictionaryAuto()", file="TypeNameHandlingTests.cs"];
m8_374 [label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>.System.Collections.IEnumerable.GetEnumerator()", span="1182-1182", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>.System.Collections.IEnumerable.GetEnumerator()", file="TypeNameHandlingTests.cs"];
m8_375 [label="return GetEnumerator();", span="1184-1184", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>.System.Collections.IEnumerable.GetEnumerator()", file="TypeNameHandlingTests.cs"];
m8_376 [label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>.System.Collections.IEnumerable.GetEnumerator()", span="1182-1182", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>.System.Collections.IEnumerable.GetEnumerator()", file="TypeNameHandlingTests.cs"];
m8_83 [label="Entry System.IO.BinaryWriter.Write(int)", span="0-0", cluster="System.IO.BinaryWriter.Write(int)", file="TypeNameHandlingTests.cs"];
m8_84 [label="Entry System.IO.BinaryWriter.Write(sbyte)", span="0-0", cluster="System.IO.BinaryWriter.Write(sbyte)", file="TypeNameHandlingTests.cs"];
m8_86 [label="Entry System.IO.BinaryWriter.Write(byte)", span="0-0", cluster="System.IO.BinaryWriter.Write(byte)", file="TypeNameHandlingTests.cs"];
m8_88 [label="Entry Newtonsoft.Json.Utilities.MathUtils.IntLength(ulong)", span="33-33", cluster="Newtonsoft.Json.Utilities.MathUtils.IntLength(ulong)", file="TypeNameHandlingTests.cs"];
m8_742 [label="Entry Newtonsoft.Json.Tests.Serialization.Example.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)", span="2255-2255", cluster="Newtonsoft.Json.Tests.Serialization.Example.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)", file="TypeNameHandlingTests.cs"];
m8_743 [label="info.AddValue(''name'', Name)", span="2257-2257", cluster="Newtonsoft.Json.Tests.Serialization.Example.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)", file="TypeNameHandlingTests.cs"];
m8_744 [label="Exit Newtonsoft.Json.Tests.Serialization.Example.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)", span="2255-2255", cluster="Newtonsoft.Json.Tests.Serialization.Example.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)", file="TypeNameHandlingTests.cs"];
m8_506 [label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedCollections()", span="1503-1503", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedCollections()", file="TypeNameHandlingTests.cs"];
m8_507 [label="PropertyItemTypeNameHandling c1 = new PropertyItemTypeNameHandling\r\n            {\r\n                Data = new List<object>\r\n                {\r\n                    new TestComponentSimple { MyProperty = 1 },\r\n                    new List<object>\r\n                    {\r\n                        new List<object>\r\n                        {\r\n                            new List<object>()\r\n                        }\r\n                    }\r\n                }\r\n            }", span="1505-1518", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedCollections()", file="TypeNameHandlingTests.cs"];
m8_508 [label="string json = JsonConvert.SerializeObject(c1, Formatting.Indented)", span="1520-1520", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedCollections()", file="TypeNameHandlingTests.cs"];
m8_509 [label="StringAssert.AreEqual(@''{\r\n  ''''Data'''': [\r\n    {\r\n      ''''$type'''': ''''Newtonsoft.Json.Tests.TestObjects.TestComponentSimple, Newtonsoft.Json.Tests'''',\r\n      ''''MyProperty'''': 1\r\n    },\r\n    {\r\n      ''''$type'''': ''''System.Collections.Generic.List`1[[System.Object, mscorlib]], mscorlib'''',\r\n      ''''$values'''': [\r\n        [\r\n          []\r\n        ]\r\n      ]\r\n    }\r\n  ]\r\n}'', json)", span="1521-1536", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedCollections()", file="TypeNameHandlingTests.cs"];
m8_510 [label="PropertyItemTypeNameHandling c2 = JsonConvert.DeserializeObject<PropertyItemTypeNameHandling>(json)", span="1538-1538", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedCollections()", file="TypeNameHandlingTests.cs"];
m8_511 [label="Assert.AreEqual(2, c2.Data.Count)", span="1539-1539", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedCollections()", file="TypeNameHandlingTests.cs"];
m8_518 [label="Assert.AreEqual(2, c2.Data.Count)", span="1565-1565", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedCollections()", file="TypeNameHandlingTests.cs"];
m8_524 [label="Assert.AreEqual(1, (int)o[''MyProperty''])", span="1572-1572", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedCollections()", file="TypeNameHandlingTests.cs"];
m8_512 [label="CustomAssert.IsInstanceOfType(typeof(TestComponentSimple), c2.Data[0])", span="1541-1541", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedCollections()", file="TypeNameHandlingTests.cs"];
m8_513 [label="CustomAssert.IsInstanceOfType(typeof(List<object>), c2.Data[1])", span="1542-1542", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedCollections()", file="TypeNameHandlingTests.cs"];
m8_514 [label="List<object> c = (List<object>)c2.Data[1]", span="1543-1543", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedCollections()", file="TypeNameHandlingTests.cs"];
m8_517 [label="c2 = JsonConvert.DeserializeObject<PropertyItemTypeNameHandling>(json)", span="1564-1564", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedCollections()", file="TypeNameHandlingTests.cs"];
m8_519 [label="CustomAssert.IsInstanceOfType(typeof(TestComponentSimple), c2.Data[0])", span="1567-1567", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedCollections()", file="TypeNameHandlingTests.cs"];
m8_523 [label="JObject o = (JObject)c[0]", span="1571-1571", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedCollections()", file="TypeNameHandlingTests.cs"];
m8_515 [label="CustomAssert.IsInstanceOfType(typeof(JArray), c[0])", span="1544-1544", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedCollections()", file="TypeNameHandlingTests.cs"];
m8_520 [label="CustomAssert.IsInstanceOfType(typeof(List<object>), c2.Data[1])", span="1568-1568", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedCollections()", file="TypeNameHandlingTests.cs"];
m8_522 [label="CustomAssert.IsInstanceOfType(typeof(JObject), c[0])", span="1570-1570", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedCollections()", file="TypeNameHandlingTests.cs"];
m8_516 [label="json = @''{\r\n  ''''Data'''': [\r\n    {\r\n      ''''$type'''': ''''Newtonsoft.Json.Tests.TestObjects.TestComponentSimple, Newtonsoft.Json.Tests'''',\r\n      ''''MyProperty'''': 1\r\n    },\r\n    {\r\n      ''''$type'''': ''''System.Collections.Generic.List`1[[System.Object, mscorlib]], mscorlib'''',\r\n      ''''$values'''': [\r\n        {\r\n          ''''$type'''': ''''Newtonsoft.Json.Tests.TestObjects.TestComponentSimple, Newtonsoft.Json.Tests'''',\r\n          ''''MyProperty'''': 1\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}''", span="1546-1562", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedCollections()", file="TypeNameHandlingTests.cs"];
m8_521 [label="c = (List<object>)c2.Data[1]", span="1569-1569", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedCollections()", file="TypeNameHandlingTests.cs"];
m8_525 [label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedCollections()", span="1503-1503", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedCollections()", file="TypeNameHandlingTests.cs"];
m8_187 [label="Newtonsoft.Json.Bson.BsonBinaryWriter", span="", cluster="Newtonsoft.Json.Tests.TestObjects.Container.Container()", file="TypeNameHandlingTests.cs"];
m8_94 [label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteTypeNameForObjects()", span="319-319", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteTypeNameForObjects()", file="TypeNameHandlingTests.cs"];
m8_605 [label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.JsonSerializerSettings)", span="582-582", cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.JsonSerializerSettings)", file="TypeNameHandlingTests.cs"];
m8_101 [label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeTypeName()", span="339-339", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeTypeName()", file="TypeNameHandlingTests.cs"];
m8_270 [label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.NewTypeNameSerializationBinder.NewTypeNameSerializationBinder(string)", span="925-925", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.NewTypeNameSerializationBinder.NewTypeNameSerializationBinder(string)", file="TypeNameHandlingTests.cs"];
m8_271 [label="TypeFormat = typeFormat", span="927-927", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.NewTypeNameSerializationBinder.NewTypeNameSerializationBinder(string)", file="TypeNameHandlingTests.cs"];
m8_272 [label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.NewTypeNameSerializationBinder.NewTypeNameSerializationBinder(string)", span="925-925", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.NewTypeNameSerializationBinder.NewTypeNameSerializationBinder(string)", file="TypeNameHandlingTests.cs"];
m8_107 [label="Entry Newtonsoft.Json.Bson.BsonBinaryWriter.WriteUtf8Bytes(string, int)", span="202-202", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteUtf8Bytes(string, int)", file="TypeNameHandlingTests.cs"];
m8_546 [label="Entry Newtonsoft.Json.Tests.Serialization.PropertyItemTypeNameHandlingDictionary.PropertyItemTypeNameHandlingDictionary()", span="2316-2316", cluster="Newtonsoft.Json.Tests.Serialization.PropertyItemTypeNameHandlingDictionary.PropertyItemTypeNameHandlingDictionary()", file="TypeNameHandlingTests.cs"];
m8_457 [label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameDictionary()", span="1405-1405", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameDictionary()", file="TypeNameHandlingTests.cs"];
m8_463 [label="StringAssert.AreEqual(@''{\r\n  ''''First'''': {\r\n    ''''$type'''': ''''Newtonsoft.Json.Tests.TestObjects.TestComponentSimple, Newtonsoft.Json.Tests'''',\r\n    ''''MyProperty'''': 1\r\n  },\r\n  ''''Second'''': ''''String!'''',\r\n  ''''Third'''': 9223372036854775807\r\n}'', json)", span="1413-1420", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameDictionary()", file="TypeNameHandlingTests.cs"];
m8_459 [label="l.Add(''First'', new TestComponentSimple { MyProperty = 1 })", span="1408-1408", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameDictionary()", file="TypeNameHandlingTests.cs"];
m8_460 [label="l.Add(''Second'', ''String!'')", span="1409-1409", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameDictionary()", file="TypeNameHandlingTests.cs"];
m8_461 [label="l.Add(''Third'', long.MaxValue)", span="1410-1410", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameDictionary()", file="TypeNameHandlingTests.cs"];
m8_465 [label="Assert.AreEqual(3, l2.Count)", span="1423-1423", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameDictionary()", file="TypeNameHandlingTests.cs"];
m8_467 [label="Assert.AreEqual(1, ((TestComponentSimple)l2[''First'']).MyProperty)", span="1426-1426", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameDictionary()", file="TypeNameHandlingTests.cs"];
m8_462 [label="string json = JsonConvert.SerializeObject(l, Formatting.Indented)", span="1412-1412", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameDictionary()", file="TypeNameHandlingTests.cs"];
m8_464 [label="TypeNameDictionary<object> l2 = JsonConvert.DeserializeObject<TypeNameDictionary<object>>(json)", span="1422-1422", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameDictionary()", file="TypeNameHandlingTests.cs"];
m8_458 [label="TypeNameDictionary<object> l = new TypeNameDictionary<object>()", span="1407-1407", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameDictionary()", file="TypeNameHandlingTests.cs"];
m8_466 [label="CustomAssert.IsInstanceOfType(typeof(TestComponentSimple), l2[''First''])", span="1425-1425", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameDictionary()", file="TypeNameHandlingTests.cs"];
m8_468 [label="CustomAssert.IsInstanceOfType(typeof(string), l2[''Second''])", span="1427-1427", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameDictionary()", file="TypeNameHandlingTests.cs"];
m8_469 [label="CustomAssert.IsInstanceOfType(typeof(long), l2[''Third''])", span="1428-1428", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameDictionary()", file="TypeNameHandlingTests.cs"];
m8_470 [label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameDictionary()", span="1405-1405", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameDictionary()", file="TypeNameHandlingTests.cs"];
m8_413 [label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializationBinderWithFullName()", span="1289-1289", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializationBinderWithFullName()", file="TypeNameHandlingTests.cs"];
m8_415 [label="string json = JsonConvert.SerializeObject(message, Formatting.Indented, new JsonSerializerSettings\r\n            {\r\n                TypeNameHandling = TypeNameHandling.All,\r\n#pragma warning disable CS0618 // Type or member is obsolete\r\n                TypeNameAssemblyFormat = FormatterAssemblyStyle.Full,\r\n                Binder = new MetroBinder(),\r\n#pragma warning restore CS0618 // Type or member is obsolete\r\n                ContractResolver = new DefaultContractResolver\r\n                {\r\n#if !(PORTABLE || DNXCORE50)\r\n                    IgnoreSerializableAttribute = true\r\n#endif\r\n                }\r\n            })", span="1297-1310", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializationBinderWithFullName()", file="TypeNameHandlingTests.cs"];
m8_416 [label="StringAssert.AreEqual(@''{\r\n  ''''$type'''': '''':::MESSAGE:::, AssemblyName'''',\r\n  ''''Address'''': ''''jamesnk@testtown.com'''',\r\n  ''''Body'''': {\r\n    ''''$type'''': '''':::VERSION:::, AssemblyName'''',\r\n    ''''Major'''': 1,\r\n    ''''Minor'''': 2,\r\n    ''''Build'''': 3,\r\n    ''''Revision'''': 4,\r\n    ''''MajorRevision'''': 0,\r\n    ''''MinorRevision'''': 4\r\n  }\r\n}'', json)", span="1312-1324", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializationBinderWithFullName()", file="TypeNameHandlingTests.cs"];
m8_414 [label="Message message = new Message\r\n            {\r\n                Address = ''jamesnk@testtown.com'',\r\n                Body = new Version(1, 2, 3, 4)\r\n            }", span="1291-1295", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializationBinderWithFullName()", file="TypeNameHandlingTests.cs"];
m8_417 [label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializationBinderWithFullName()", span="1289-1289", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializationBinderWithFullName()", file="TypeNameHandlingTests.cs"];
m8_672 [label="Entry Newtonsoft.Json.Tests.Serialization.DataType.DataType()", span="2120-2120", cluster="Newtonsoft.Json.Tests.Serialization.DataType.DataType()", file="TypeNameHandlingTests.cs"];
m8_712 [label="Rows = new Dictionary<string, IEnumerable<IMyInterfaceType>>()", span="2122-2122", cluster="Newtonsoft.Json.Tests.Serialization.DataType.DataType()", file="TypeNameHandlingTests.cs"];
m8_713 [label="Exit Newtonsoft.Json.Tests.Serialization.DataType.DataType()", span="2120-2120", cluster="Newtonsoft.Json.Tests.Serialization.DataType.DataType()", file="TypeNameHandlingTests.cs"];
m8_377 [label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ByteArrays()", span="1202-1202", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ByteArrays()", file="TypeNameHandlingTests.cs"];
m8_382 [label="JsonSerializerSettings jsonSettings = new JsonSerializerSettings()", span="1209-1209", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ByteArrays()", file="TypeNameHandlingTests.cs"];
m8_385 [label="string output = JsonConvert.SerializeObject(testerObject, Formatting.Indented, jsonSettings)", span="1213-1213", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ByteArrays()", file="TypeNameHandlingTests.cs"];
m8_387 [label="StringAssert.AreEqual(output, @''{\r\n  ''''$type'''': '''''' + carClassRef + @'''''',\r\n  ''''Year'''': ''''2000-10-05T01:01:01Z'''',\r\n  ''''Objects'''': {\r\n    ''''$type'''': ''''System.Object[], mscorlib'''',\r\n    ''''$values'''': [\r\n      {\r\n        ''''$type'''': ''''System.Byte[], mscorlib'''',\r\n        ''''$value'''': ''''S0FSSVJB''''\r\n      },\r\n      ''''prueba''''\r\n    ]\r\n  }\r\n}'')", span="1217-1230", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ByteArrays()", file="TypeNameHandlingTests.cs"];
m8_381 [label="testerObject.Objects = new object[] { data, ''prueba'' }", span="1207-1207", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ByteArrays()", file="TypeNameHandlingTests.cs"];
m8_383 [label="jsonSettings.NullValueHandling = NullValueHandling.Ignore", span="1210-1210", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ByteArrays()", file="TypeNameHandlingTests.cs"];
m8_384 [label="jsonSettings.TypeNameHandling = TypeNameHandling.All", span="1211-1211", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ByteArrays()", file="TypeNameHandlingTests.cs"];
m8_388 [label="Car obj = JsonConvert.DeserializeObject<Car>(output, jsonSettings)", span="1231-1231", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ByteArrays()", file="TypeNameHandlingTests.cs"];
m8_378 [label="Car testerObject = new Car()", span="1204-1204", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ByteArrays()", file="TypeNameHandlingTests.cs"];
m8_386 [label="string carClassRef = ReflectionUtils.GetTypeName(typeof(Car), TypeNameAssemblyFormatHandling.Simple, null)", span="1215-1215", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ByteArrays()", file="TypeNameHandlingTests.cs"];
m8_379 [label="testerObject.Year = new DateTime(2000, 10, 5, 1, 1, 1, DateTimeKind.Utc)", span="1205-1205", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ByteArrays()", file="TypeNameHandlingTests.cs"];
m8_380 [label="byte[] data = new byte[] { 75, 65, 82, 73, 82, 65 }", span="1206-1206", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ByteArrays()", file="TypeNameHandlingTests.cs"];
m8_389 [label="Assert.IsNotNull(obj)", span="1233-1233", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ByteArrays()", file="TypeNameHandlingTests.cs"];
m8_390 [label="Assert.IsTrue(obj.Objects[0] is byte[])", span="1235-1235", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ByteArrays()", file="TypeNameHandlingTests.cs"];
m8_391 [label="byte[] d = (byte[])obj.Objects[0]", span="1237-1237", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ByteArrays()", file="TypeNameHandlingTests.cs"];
m8_392 [label="CollectionAssert.AreEquivalent(data, d)", span="1238-1238", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ByteArrays()", file="TypeNameHandlingTests.cs"];
m8_393 [label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ByteArrays()", span="1202-1202", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ByteArrays()", file="TypeNameHandlingTests.cs"];
m8_652 [label="Entry System.Collections.Generic.Stack<T>.Stack(System.Collections.Generic.IEnumerable<T>)", span="0-0", cluster="System.Collections.Generic.Stack<T>.Stack(System.Collections.Generic.IEnumerable<T>)", file="TypeNameHandlingTests.cs"];
m8_91 [label="Entry System.IO.BinaryWriter.Write(long)", span="0-0", cluster="System.IO.BinaryWriter.Write(long)", file="TypeNameHandlingTests.cs"];
m8_200 [label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameProperty.TypeNameProperty()", span="646-646", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameProperty.TypeNameProperty()", file="TypeNameHandlingTests.cs"];
m8_320 [label="Entry Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter, object)", span="1042-1042", cluster="Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter, object)", file="TypeNameHandlingTests.cs"];
m8_100 [label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.GetTypeName(System.Type, Newtonsoft.Json.TypeNameAssemblyFormatHandling, Newtonsoft.Json.Serialization.ISerializationBinder)", span="147-147", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetTypeName(System.Type, Newtonsoft.Json.TypeNameAssemblyFormatHandling, Newtonsoft.Json.Serialization.ISerializationBinder)", file="TypeNameHandlingTests.cs"];
m8_116 [label="Exit Newtonsoft.Json.Bson.BsonBinaryWriter.WriteUtf8Bytes(string, int)", span="202-202", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteUtf8Bytes(string, int)", file="TypeNameHandlingTests.cs"];
m8_119 [label="Entry System.Text.Encoding.GetBytes(string)", span="0-0", cluster="System.Text.Encoding.GetBytes(string)", file="TypeNameHandlingTests.cs"];
m8_118 [label="Entry System.IO.BinaryWriter.Write(byte[], int, int)", span="0-0", cluster="System.IO.BinaryWriter.Write(byte[], int, int)", file="TypeNameHandlingTests.cs"];
m8_345 [label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.UrlStatus.UrlStatus()", span="1045-1045", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.UrlStatus.UrlStatus()", file="TypeNameHandlingTests.cs"];
m8_438 [label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.List<T>.Add(T)", file="TypeNameHandlingTests.cs"];
m8_593 [label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeDeserialize_DictionaryContextContainsGuid_DeserializesItemAsGuid()", span="1784-1784", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeDeserialize_DictionaryContextContainsGuid_DeserializesItemAsGuid()", file="TypeNameHandlingTests.cs"];
m8_596 [label="Dictionary<string, Guid> inputContext = new Dictionary<string, Guid>()", span="1789-1789", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeDeserialize_DictionaryContextContainsGuid_DeserializesItemAsGuid()", file="TypeNameHandlingTests.cs"];
m8_598 [label="JsonSerializerSettings jsonSerializerSettings = new JsonSerializerSettings()\r\n            {\r\n                Formatting = Formatting.Indented,\r\n                TypeNameHandling = TypeNameHandling.All\r\n            }", span="1792-1796", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeDeserialize_DictionaryContextContainsGuid_DeserializesItemAsGuid()", file="TypeNameHandlingTests.cs"];
m8_595 [label="var someValue = new Guid(''a6e986df-fc2c-4906-a1ef-9492388f7833'')", span="1787-1787", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeDeserialize_DictionaryContextContainsGuid_DeserializesItemAsGuid()", file="TypeNameHandlingTests.cs"];
m8_597 [label="inputContext.Add(contextKey, someValue)", span="1790-1790", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeDeserialize_DictionaryContextContainsGuid_DeserializesItemAsGuid()", file="TypeNameHandlingTests.cs"];
m8_599 [label="string serializedString = JsonConvert.SerializeObject(inputContext, jsonSerializerSettings)", span="1797-1797", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeDeserialize_DictionaryContextContainsGuid_DeserializesItemAsGuid()", file="TypeNameHandlingTests.cs"];
m8_600 [label="StringAssert.AreEqual(@''{\r\n  ''''$type'''': ''''System.Collections.Generic.Dictionary`2[[System.String, mscorlib],[System.Guid, mscorlib]], mscorlib'''',\r\n  ''''k1'''': ''''a6e986df-fc2c-4906-a1ef-9492388f7833''''\r\n}'', serializedString)", span="1799-1802", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeDeserialize_DictionaryContextContainsGuid_DeserializesItemAsGuid()", file="TypeNameHandlingTests.cs"];
m8_601 [label="var deserializedObject = (Dictionary<string, Guid>)JsonConvert.DeserializeObject(serializedString, jsonSerializerSettings)", span="1804-1804", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeDeserialize_DictionaryContextContainsGuid_DeserializesItemAsGuid()", file="TypeNameHandlingTests.cs"];
m8_594 [label="string contextKey = ''k1''", span="1786-1786", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeDeserialize_DictionaryContextContainsGuid_DeserializesItemAsGuid()", file="TypeNameHandlingTests.cs"];
m8_602 [label="Assert.AreEqual(someValue, deserializedObject[contextKey])", span="1806-1806", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeDeserialize_DictionaryContextContainsGuid_DeserializesItemAsGuid()", file="TypeNameHandlingTests.cs"];
m8_603 [label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeDeserialize_DictionaryContextContainsGuid_DeserializesItemAsGuid()", span="1784-1784", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeDeserialize_DictionaryContextContainsGuid_DeserializesItemAsGuid()", file="TypeNameHandlingTests.cs"];
m8_682 [label="Entry System.Collections.Generic.HashSet<T>.HashSet(System.Collections.Generic.IEnumerable<T>)", span="0-0", cluster="System.Collections.Generic.HashSet<T>.HashSet(System.Collections.Generic.IEnumerable<T>)", file="TypeNameHandlingTests.cs"];
m8_419 [label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.MetroBinder.MetroBinder()", span="1327-1327", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.MetroBinder.MetroBinder()", file="TypeNameHandlingTests.cs"];
m8_563 [label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTestObject.TypeNameHandlingTestObject()", span="2308-2308", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTestObject.TypeNameHandlingTestObject()", file="TypeNameHandlingTests.cs"];
m8_109 [label="_largeByteBuffer == null", span="206-206", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteUtf8Bytes(string, int)", file="TypeNameHandlingTests.cs"];
m8_395 [label="Entry Unk.AreEquivalent", span="", cluster="Unk.AreEquivalent", file="TypeNameHandlingTests.cs"];
m8_257 [label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.NewSerializeUsingCustomBinder()", span="856-856", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.NewSerializeUsingCustomBinder()", file="TypeNameHandlingTests.cs"];
m8_259 [label="IList<object> values = new List<object>\r\n            {\r\n                new Customer\r\n                {\r\n                    Name = ''Caroline Customer''\r\n                },\r\n                new Purchase\r\n                {\r\n                    ProductName = ''Elbow Grease'',\r\n                    Price = 5.99m,\r\n                    Quantity = 1\r\n                }\r\n            }", span="860-872", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.NewSerializeUsingCustomBinder()", file="TypeNameHandlingTests.cs"];
m8_260 [label="string json = JsonConvert.SerializeObject(values, Formatting.Indented, new JsonSerializerSettings\r\n            {\r\n                TypeNameHandling = TypeNameHandling.Auto,\r\n                SerializationBinder = binder\r\n            })", span="874-878", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.NewSerializeUsingCustomBinder()", file="TypeNameHandlingTests.cs"];
m8_262 [label="IList<object> newValues = JsonConvert.DeserializeObject<IList<object>>(json, new JsonSerializerSettings\r\n            {\r\n                TypeNameHandling = TypeNameHandling.Auto,\r\n                SerializationBinder = new NewTypeNameSerializationBinder(''Newtonsoft.Json.Tests.Serialization.{0}, Newtonsoft.Json.Tests'')\r\n            })", span="906-910", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.NewSerializeUsingCustomBinder()", file="TypeNameHandlingTests.cs"];
m8_258 [label="NewTypeNameSerializationBinder binder = new NewTypeNameSerializationBinder(''Newtonsoft.Json.Tests.Serialization.{0}, Newtonsoft.Json.Tests'')", span="858-858", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.NewSerializeUsingCustomBinder()", file="TypeNameHandlingTests.cs"];
m8_261 [label="StringAssert.AreEqual(@''[\r\n  {\r\n    ''''$type'''': ''''Customer'''',\r\n    ''''Name'''': ''''Caroline Customer''''\r\n  },\r\n  {\r\n    ''''$type'''': ''''Purchase'''',\r\n    ''''ProductName'''': ''''Elbow Grease'''',\r\n    ''''Price'''': 5.99,\r\n    ''''Quantity'''': 1\r\n  }\r\n]'', json)", span="893-904", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.NewSerializeUsingCustomBinder()", file="TypeNameHandlingTests.cs"];
m8_263 [label="CustomAssert.IsInstanceOfType(typeof(Customer), newValues[0])", span="912-912", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.NewSerializeUsingCustomBinder()", file="TypeNameHandlingTests.cs"];
m8_264 [label="Customer customer = (Customer)newValues[0]", span="913-913", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.NewSerializeUsingCustomBinder()", file="TypeNameHandlingTests.cs"];
m8_266 [label="CustomAssert.IsInstanceOfType(typeof(Purchase), newValues[1])", span="916-916", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.NewSerializeUsingCustomBinder()", file="TypeNameHandlingTests.cs"];
m8_267 [label="Purchase purchase = (Purchase)newValues[1]", span="917-917", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.NewSerializeUsingCustomBinder()", file="TypeNameHandlingTests.cs"];
m8_265 [label="Assert.AreEqual(''Caroline Customer'', customer.Name)", span="914-914", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.NewSerializeUsingCustomBinder()", file="TypeNameHandlingTests.cs"];
m8_268 [label="Assert.AreEqual(''Elbow Grease'', purchase.ProductName)", span="918-918", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.NewSerializeUsingCustomBinder()", file="TypeNameHandlingTests.cs"];
m8_269 [label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.NewSerializeUsingCustomBinder()", span="856-856", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.NewSerializeUsingCustomBinder()", file="TypeNameHandlingTests.cs"];
m8_421 [label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.MetroBinder.BindToType(string, string)", span="1329-1329", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.MetroBinder.BindToType(string, string)", file="TypeNameHandlingTests.cs"];
m8_422 [label="return null;", span="1331-1331", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.MetroBinder.BindToType(string, string)", file="TypeNameHandlingTests.cs"];
m8_423 [label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.MetroBinder.BindToType(string, string)", span="1329-1329", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.MetroBinder.BindToType(string, string)", file="TypeNameHandlingTests.cs"];
m8_321 [label="Entry Unk.IsNotNull", span="", cluster="Unk.IsNotNull", file="TypeNameHandlingTests.cs"];
m8_319 [label="Entry System.Collections.Generic.ICollection<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.ICollection<T>.Add(T)", file="TypeNameHandlingTests.cs"];
m8_97 [label="string json = JsonConvert.SerializeObject(employee, Formatting.Indented, new JsonSerializerSettings\r\n            {\r\n                TypeNameHandling = TypeNameHandling.Objects\r\n            })", span="325-328", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteTypeNameForObjects()", file="TypeNameHandlingTests.cs"];
m8_242 [label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameSerializationBinder.TypeNameSerializationBinder(string)", span="835-835", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameSerializationBinder.TypeNameSerializationBinder(string)", file="TypeNameHandlingTests.cs"];
m8_245 [label="TypeFormat = typeFormat", span="837-837", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameSerializationBinder.TypeNameSerializationBinder(string)", file="TypeNameHandlingTests.cs"];
m8_246 [label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameSerializationBinder.TypeNameSerializationBinder(string)", span="835-835", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameSerializationBinder.TypeNameSerializationBinder(string)", file="TypeNameHandlingTests.cs"];
m8_353 [label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>.CustomEnumerable()", span="1153-1153", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>.CustomEnumerable()", file="TypeNameHandlingTests.cs"];
m8_359 [label="count = 0", span="1155-1155", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>.CustomEnumerable()", file="TypeNameHandlingTests.cs"];
m8_360 [label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>.CustomEnumerable()", span="1153-1153", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>.CustomEnumerable()", file="TypeNameHandlingTests.cs"];
m8_655 [label="Entry lambda expression", span="1945-1945", cluster="lambda expression", file="TypeNameHandlingTests.cs"];
m8_657 [label="Exit lambda expression", span="1945-1945", cluster="lambda expression", file="TypeNameHandlingTests.cs"];
m8_656 [label=s, span="1945-1945", cluster="lambda expression", file="TypeNameHandlingTests.cs"];
m8_98 [label="StringAssert.AreEqual(@''{\r\n  ''''$id'''': ''''1'''',\r\n  ''''$type'''': '''''' + employeeRef + @'''''',\r\n  ''''Name'''': null,\r\n  ''''Manager'''': null\r\n}'', json)", span="330-335", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteTypeNameForObjects()", file="TypeNameHandlingTests.cs"];
m8_654 [label="Entry System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", file="TypeNameHandlingTests.cs"];
m8_188 [label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteObjectTypeNameForProperty()", span="655-655", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteObjectTypeNameForProperty()", file="TypeNameHandlingTests.cs"];
m8_192 [label="StringAssert.AreEqual(@''{\r\n  ''''Name'''': ''''Name!'''',\r\n  ''''Value'''': {\r\n    ''''$type'''': '''''' + typeNamePropertyRef + @'''''',\r\n    ''''Name'''': ''''Nested!'''',\r\n    ''''Value'''': null\r\n  }\r\n}'', json)", span="670-677", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteObjectTypeNameForProperty()", file="TypeNameHandlingTests.cs"];
m8_190 [label="TypeNameProperty typeNameProperty = new TypeNameProperty\r\n            {\r\n                Name = ''Name!'',\r\n                Value = new TypeNameProperty\r\n                {\r\n                    Name = ''Nested!''\r\n                }\r\n            }", span="659-666", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteObjectTypeNameForProperty()", file="TypeNameHandlingTests.cs"];
m8_194 [label="Assert.AreEqual(''Name!'', deserialized.Name)", span="680-680", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteObjectTypeNameForProperty()", file="TypeNameHandlingTests.cs"];
m8_197 [label="Assert.AreEqual(''Nested!'', nested.Name)", span="684-684", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteObjectTypeNameForProperty()", file="TypeNameHandlingTests.cs"];
m8_198 [label="Assert.AreEqual(null, nested.Value)", span="685-685", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteObjectTypeNameForProperty()", file="TypeNameHandlingTests.cs"];
m8_189 [label="string typeNamePropertyRef = ReflectionUtils.GetTypeName(typeof(TypeNameProperty), TypeNameAssemblyFormatHandling.Simple, null)", span="657-657", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteObjectTypeNameForProperty()", file="TypeNameHandlingTests.cs"];
m8_191 [label="string json = JsonConvert.SerializeObject(typeNameProperty, Formatting.Indented)", span="668-668", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteObjectTypeNameForProperty()", file="TypeNameHandlingTests.cs"];
m8_193 [label="TypeNameProperty deserialized = JsonConvert.DeserializeObject<TypeNameProperty>(json)", span="679-679", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteObjectTypeNameForProperty()", file="TypeNameHandlingTests.cs"];
m8_195 [label="CustomAssert.IsInstanceOfType(typeof(TypeNameProperty), deserialized.Value)", span="681-681", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteObjectTypeNameForProperty()", file="TypeNameHandlingTests.cs"];
m8_196 [label="TypeNameProperty nested = (TypeNameProperty)deserialized.Value", span="683-683", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteObjectTypeNameForProperty()", file="TypeNameHandlingTests.cs"];
m8_199 [label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteObjectTypeNameForProperty()", span="655-655", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.WriteObjectTypeNameForProperty()", file="TypeNameHandlingTests.cs"];
m8_429 [label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameIntList()", span="1347-1347", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameIntList()", file="TypeNameHandlingTests.cs"];
m8_435 [label="StringAssert.AreEqual(@''[\r\n  1,\r\n  2,\r\n  3\r\n]'', json)", span="1355-1359", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameIntList()", file="TypeNameHandlingTests.cs"];
m8_431 [label="l.Add(1)", span="1350-1350", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameIntList()", file="TypeNameHandlingTests.cs"];
m8_432 [label="l.Add(2)", span="1351-1351", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameIntList()", file="TypeNameHandlingTests.cs"];
m8_433 [label="l.Add(3)", span="1352-1352", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameIntList()", file="TypeNameHandlingTests.cs"];
m8_434 [label="string json = JsonConvert.SerializeObject(l, Formatting.Indented)", span="1354-1354", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameIntList()", file="TypeNameHandlingTests.cs"];
m8_430 [label="TypeNameList<int> l = new TypeNameList<int>()", span="1349-1349", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameIntList()", file="TypeNameHandlingTests.cs"];
m8_436 [label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameIntList()", span="1347-1347", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameIntList()", file="TypeNameHandlingTests.cs"];
m8_565 [label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingDynamic()", span="1710-1710", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingDynamic()", file="TypeNameHandlingTests.cs"];
m8_574 [label="StringAssert.AreEqual(@''{\r\n  ''''Data'''': {\r\n    ''''one'''': {\r\n      ''''$type'''': ''''Newtonsoft.Json.Tests.TestObjects.TestComponentSimple, Newtonsoft.Json.Tests'''',\r\n      ''''MyProperty'''': 1\r\n    },\r\n    ''''two'''': {\r\n      ''''$type'''': ''''Newtonsoft.Json.Tests.Linq.DynamicDictionary, Newtonsoft.Json.Tests'''',\r\n      ''''one'''': {\r\n        ''''MyProperty'''': 2\r\n      }\r\n    }\r\n  }\r\n}'', json)", span="1731-1744", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingDynamic()", file="TypeNameHandlingTests.cs"];
m8_568 [label="data.one = new TestComponentSimple\r\n            {\r\n                MyProperty = 1\r\n            }", span="1715-1718", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingDynamic()", file="TypeNameHandlingTests.cs"];
m8_570 [label="data2.one = new TestComponentSimple\r\n            {\r\n                MyProperty = 2\r\n            }", span="1721-1724", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingDynamic()", file="TypeNameHandlingTests.cs"];
m8_580 [label="Assert.AreEqual(1, c.MyProperty)", span="1752-1752", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingDynamic()", file="TypeNameHandlingTests.cs"];
m8_583 [label="Assert.AreEqual(2, (int)o[''MyProperty''])", span="1756-1756", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingDynamic()", file="TypeNameHandlingTests.cs"];
m8_589 [label="Assert.AreEqual(2, (int)o[''MyProperty''])", span="1778-1778", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingDynamic()", file="TypeNameHandlingTests.cs"];
m8_573 [label="string json = JsonConvert.SerializeObject(d1, Formatting.Indented)", span="1730-1730", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingDynamic()", file="TypeNameHandlingTests.cs"];
m8_575 [label="PropertyItemTypeNameHandlingDynamic d2 = JsonConvert.DeserializeObject<PropertyItemTypeNameHandlingDynamic>(json)", span="1746-1746", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingDynamic()", file="TypeNameHandlingTests.cs"];
m8_567 [label="dynamic data = new DynamicDictionary()", span="1714-1714", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingDynamic()", file="TypeNameHandlingTests.cs"];
m8_569 [label="dynamic data2 = new DynamicDictionary()", span="1720-1720", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingDynamic()", file="TypeNameHandlingTests.cs"];
m8_571 [label="data.two = data2", span="1726-1726", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingDynamic()", file="TypeNameHandlingTests.cs"];
m8_579 [label="TestComponentSimple c = (TestComponentSimple)data3.one", span="1751-1751", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingDynamic()", file="TypeNameHandlingTests.cs"];
m8_581 [label="dynamic data4 = data3.two", span="1754-1754", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingDynamic()", file="TypeNameHandlingTests.cs"];
m8_582 [label="JObject o = (JObject)data4.one", span="1755-1755", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingDynamic()", file="TypeNameHandlingTests.cs"];
m8_584 [label="json = @''{\r\n  ''''Data'''': {\r\n    ''''one'''': {\r\n      ''''$type'''': ''''Newtonsoft.Json.Tests.TestObjects.TestComponentSimple, Newtonsoft.Json.Tests'''',\r\n      ''''MyProperty'''': 1\r\n    },\r\n    ''''two'''': {\r\n      ''''$type'''': ''''Newtonsoft.Json.Tests.Linq.DynamicDictionary, Newtonsoft.Json.Tests'''',\r\n      ''''one'''': {\r\n        ''''$type'''': ''''Newtonsoft.Json.Tests.TestObjects.TestComponentSimple, Newtonsoft.Json.Tests'''',\r\n        ''''MyProperty'''': 2\r\n      }\r\n    }\r\n  }\r\n}''", span="1758-1772", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingDynamic()", file="TypeNameHandlingTests.cs"];
m8_588 [label="o = (JObject)data4.one", span="1777-1777", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingDynamic()", file="TypeNameHandlingTests.cs"];
m8_566 [label="PropertyItemTypeNameHandlingDynamic d1 = new PropertyItemTypeNameHandlingDynamic()", span="1712-1712", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingDynamic()", file="TypeNameHandlingTests.cs"];
m8_572 [label="d1.Data = (DynamicDictionary)data", span="1728-1728", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingDynamic()", file="TypeNameHandlingTests.cs"];
m8_576 [label="Assert.IsNotNull(d2)", span="1747-1747", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingDynamic()", file="TypeNameHandlingTests.cs"];
m8_577 [label="Assert.IsNotNull(d2.Data)", span="1748-1748", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingDynamic()", file="TypeNameHandlingTests.cs"];
m8_578 [label="dynamic data3 = d2.Data", span="1750-1750", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingDynamic()", file="TypeNameHandlingTests.cs"];
m8_585 [label="d2 = JsonConvert.DeserializeObject<PropertyItemTypeNameHandlingDynamic>(json)", span="1774-1774", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingDynamic()", file="TypeNameHandlingTests.cs"];
m8_587 [label="data4 = data3.two", span="1776-1776", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingDynamic()", file="TypeNameHandlingTests.cs"];
m8_586 [label="data3 = d2.Data", span="1775-1775", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingDynamic()", file="TypeNameHandlingTests.cs"];
m8_590 [label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingDynamic()", span="1710-1710", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingDynamic()", file="TypeNameHandlingTests.cs"];
m8_418 [label="Entry System.Version.Version(int, int, int, int)", span="0-0", cluster="System.Version.Version(int, int, int, int)", file="TypeNameHandlingTests.cs"];
m8_627 [label="Entry Newtonsoft.Json.Tests.Serialization.MyChildList.MyChildList()", span="2172-2172", cluster="Newtonsoft.Json.Tests.Serialization.MyChildList.MyChildList()", file="TypeNameHandlingTests.cs"];
m8_653 [label="Entry System.Collections.Generic.IEnumerable<TSource>.SelectMany<TSource, TResult>(System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.SelectMany<TSource, TResult>(System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>)", file="TypeNameHandlingTests.cs"];
m8_616 [label="Entry Newtonsoft.Json.Tests.Serialization.MyChild.MyChild()", span="2166-2166", cluster="Newtonsoft.Json.Tests.Serialization.MyChild.MyChild()", file="TypeNameHandlingTests.cs"];
m8_639 [label="Entry Newtonsoft.Json.Tests.Serialization.ParentParent.ParentParent()", span="2140-2140", cluster="Newtonsoft.Json.Tests.Serialization.ParentParent.ParentParent()", file="TypeNameHandlingTests.cs"];
m8_615 [label="Entry Newtonsoft.Json.Tests.Serialization.MyParent.MyParent()", span="2156-2156", cluster="Newtonsoft.Json.Tests.Serialization.MyParent.MyParent()", file="TypeNameHandlingTests.cs"];
m8_718 [label="Exit Newtonsoft.Json.Tests.Serialization.MyParent.MyParent()", span="2156-2156", cluster="Newtonsoft.Json.Tests.Serialization.MyParent.MyParent()", file="TypeNameHandlingTests.cs"];
m8_698 [label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeNullableStructProperty_Auto()", span="2075-2075", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeNullableStructProperty_Auto()", file="TypeNameHandlingTests.cs"];
m8_699 [label="JsonSerializerSettings serializerSettings = new JsonSerializerSettings\r\n            {\r\n                TypeNameHandling = TypeNameHandling.Auto,\r\n                Formatting = Formatting.Indented\r\n            }", span="2077-2081", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeNullableStructProperty_Auto()", file="TypeNameHandlingTests.cs"];
m8_702 [label="StringAssert.AreEqual(''Hello!'', objWithMessage.Message.Value.Value)", span="2090-2090", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeNullableStructProperty_Auto()", file="TypeNameHandlingTests.cs"];
m8_700 [label="string json = @''{\r\n  ''''Message'''': {\r\n    ''''Value'''': ''''Hello!''''\r\n  }\r\n}''", span="2083-2087", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeNullableStructProperty_Auto()", file="TypeNameHandlingTests.cs"];
m8_701 [label="ObjectWithOptionalMessage objWithMessage = JsonConvert.DeserializeObject<ObjectWithOptionalMessage>(json, serializerSettings)", span="2088-2088", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeNullableStructProperty_Auto()", file="TypeNameHandlingTests.cs"];
m8_703 [label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeNullableStructProperty_Auto()", span="2075-2075", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeNullableStructProperty_Auto()", file="TypeNameHandlingTests.cs"];
m8_628 [label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ParentTypeNameHandlingWithISerializableValues()", span="1883-1883", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ParentTypeNameHandlingWithISerializableValues()", file="TypeNameHandlingTests.cs"];
m8_631 [label="JsonSerializerSettings settings = new JsonSerializerSettings\r\n            {\r\n                DateFormatHandling = DateFormatHandling.IsoDateFormat,\r\n                MissingMemberHandling = MissingMemberHandling.Ignore,\r\n                DefaultValueHandling = DefaultValueHandling.Ignore,\r\n                NullValueHandling = NullValueHandling.Ignore,\r\n                Formatting = Formatting.Indented\r\n            }", span="1895-1902", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ParentTypeNameHandlingWithISerializableValues()", file="TypeNameHandlingTests.cs"];
m8_633 [label="StringAssert.AreEqual(@''{\r\n  ''''ParentProp'''': {\r\n    ''''c'''': {\r\n      ''''$type'''': ''''Newtonsoft.Json.Tests.Serialization.MyChild, Newtonsoft.Json.Tests'''',\r\n      ''''p'''': ''''string!''''\r\n    }\r\n  }\r\n}'', json)", span="1906-1913", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ParentTypeNameHandlingWithISerializableValues()", file="TypeNameHandlingTests.cs"];
m8_630 [label="pp.ParentProp = new MyParent\r\n            {\r\n                Child = new MyChild\r\n                {\r\n                    MyProperty = ''string!''\r\n                }\r\n            }", span="1887-1893", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ParentTypeNameHandlingWithISerializableValues()", file="TypeNameHandlingTests.cs"];
m8_632 [label="string json = JsonConvert.SerializeObject(pp, settings)", span="1904-1904", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ParentTypeNameHandlingWithISerializableValues()", file="TypeNameHandlingTests.cs"];
m8_634 [label="ParentParent pp2 = JsonConvert.DeserializeObject<ParentParent>(json, settings)", span="1915-1915", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ParentTypeNameHandlingWithISerializableValues()", file="TypeNameHandlingTests.cs"];
m8_637 [label="Assert.AreEqual(''string!'', ((MyChild)p2.Child).MyProperty)", span="1918-1918", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ParentTypeNameHandlingWithISerializableValues()", file="TypeNameHandlingTests.cs"];
m8_629 [label="ParentParent pp = new ParentParent()", span="1885-1885", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ParentTypeNameHandlingWithISerializableValues()", file="TypeNameHandlingTests.cs"];
m8_635 [label="MyParent p2 = pp2.ParentProp", span="1916-1916", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ParentTypeNameHandlingWithISerializableValues()", file="TypeNameHandlingTests.cs"];
m8_636 [label="CustomAssert.IsInstanceOfType(typeof(MyChild), p2.Child)", span="1917-1917", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ParentTypeNameHandlingWithISerializableValues()", file="TypeNameHandlingTests.cs"];
m8_638 [label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ParentTypeNameHandlingWithISerializableValues()", span="1883-1883", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ParentTypeNameHandlingWithISerializableValues()", file="TypeNameHandlingTests.cs"];
m8_735 [label="Entry object.GetHashCode()", span="0-0", cluster="object.GetHashCode()", file="TypeNameHandlingTests.cs"];
m8_330 [label="Entry Newtonsoft.Json.Tests.Serialization.Message.Message()", span="2181-2181", cluster="Newtonsoft.Json.Tests.Serialization.Message.Message()", file="TypeNameHandlingTests.cs"];
m8_640 [label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ListOfStackWithFullAssemblyName()", span="1923-1923", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ListOfStackWithFullAssemblyName()", file="TypeNameHandlingTests.cs"];
m8_641 [label="var input = new List<Stack<string>>()", span="1925-1925", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ListOfStackWithFullAssemblyName()", file="TypeNameHandlingTests.cs"];
m8_642 [label="input.Add(new Stack<string>(new List<string> { ''One'', ''Two'', ''Three'' }))", span="1927-1927", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ListOfStackWithFullAssemblyName()", file="TypeNameHandlingTests.cs"];
m8_643 [label="input.Add(new Stack<string>(new List<string> { ''Four'', ''Five'', ''Six'' }))", span="1928-1928", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ListOfStackWithFullAssemblyName()", file="TypeNameHandlingTests.cs"];
m8_644 [label="input.Add(new Stack<string>(new List<string> { ''Seven'', ''Eight'', ''Nine'' }))", span="1929-1929", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ListOfStackWithFullAssemblyName()", file="TypeNameHandlingTests.cs"];
m8_645 [label="string serialized = JsonConvert.SerializeObject(input,\r\n                Newtonsoft.Json.Formatting.Indented,\r\n                new JsonSerializerSettings\r\n                {\r\n                    TypeNameHandling = TypeNameHandling.All,\r\n#pragma warning disable 618\r\n                    TypeNameAssemblyFormat = FormatterAssemblyStyle.Full // TypeNameHandling.Auto will work\r\n#pragma warning restore 618\r\n                })", span="1931-1939", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ListOfStackWithFullAssemblyName()", file="TypeNameHandlingTests.cs"];
m8_646 [label="var output = JsonConvert.DeserializeObject<List<Stack<string>>>(serialized,\r\n                new JsonSerializerSettings { TypeNameHandling = TypeNameHandling.All }\r\n                )", span="1941-1943", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ListOfStackWithFullAssemblyName()", file="TypeNameHandlingTests.cs"];
m8_647 [label="List<string> strings = output.SelectMany(s => s).ToList()", span="1945-1945", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ListOfStackWithFullAssemblyName()", file="TypeNameHandlingTests.cs"];
m8_648 [label="Assert.AreEqual(9, strings.Count)", span="1947-1947", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ListOfStackWithFullAssemblyName()", file="TypeNameHandlingTests.cs"];
m8_649 [label="Assert.AreEqual(''One'', strings[0])", span="1948-1948", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ListOfStackWithFullAssemblyName()", file="TypeNameHandlingTests.cs"];
m8_650 [label="Assert.AreEqual(''Nine'', strings[8])", span="1949-1949", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ListOfStackWithFullAssemblyName()", file="TypeNameHandlingTests.cs"];
m8_651 [label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ListOfStackWithFullAssemblyName()", span="1923-1923", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.ListOfStackWithFullAssemblyName()", file="TypeNameHandlingTests.cs"];
m8_526 [label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedDictionaries()", span="1576-1576", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedDictionaries()", file="TypeNameHandlingTests.cs"];
m8_527 [label="PropertyItemTypeNameHandlingDictionary c1 = new PropertyItemTypeNameHandlingDictionary()\r\n            {\r\n                Data = new Dictionary<string, object>\r\n                {\r\n                    {\r\n                        ''one'', new TestComponentSimple { MyProperty = 1 }\r\n                    },\r\n                    {\r\n                        ''two'', new Dictionary<string, object>\r\n                        {\r\n                            {\r\n                                ''one'', new Dictionary<string, object>\r\n                                {\r\n                                    { ''one'', 1 }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }", span="1578-1597", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedDictionaries()", file="TypeNameHandlingTests.cs"];
m8_528 [label="string json = JsonConvert.SerializeObject(c1, Formatting.Indented)", span="1599-1599", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedDictionaries()", file="TypeNameHandlingTests.cs"];
m8_529 [label="StringAssert.AreEqual(@''{\r\n  ''''Data'''': {\r\n    ''''one'''': {\r\n      ''''$type'''': ''''Newtonsoft.Json.Tests.TestObjects.TestComponentSimple, Newtonsoft.Json.Tests'''',\r\n      ''''MyProperty'''': 1\r\n    },\r\n    ''''two'''': {\r\n      ''''$type'''': ''''System.Collections.Generic.Dictionary`2[[System.String, mscorlib],[System.Object, mscorlib]], mscorlib'''',\r\n      ''''one'''': {\r\n        ''''one'''': 1\r\n      }\r\n    }\r\n  }\r\n}'', json)", span="1600-1613", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedDictionaries()", file="TypeNameHandlingTests.cs"];
m8_530 [label="PropertyItemTypeNameHandlingDictionary c2 = JsonConvert.DeserializeObject<PropertyItemTypeNameHandlingDictionary>(json)", span="1615-1615", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedDictionaries()", file="TypeNameHandlingTests.cs"];
m8_531 [label="Assert.AreEqual(2, c2.Data.Count)", span="1616-1616", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedDictionaries()", file="TypeNameHandlingTests.cs"];
m8_538 [label="Assert.AreEqual(2, c2.Data.Count)", span="1640-1640", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedDictionaries()", file="TypeNameHandlingTests.cs"];
m8_544 [label="Assert.AreEqual(1, (int)o[''MyProperty''])", span="1648-1648", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedDictionaries()", file="TypeNameHandlingTests.cs"];
m8_532 [label="CustomAssert.IsInstanceOfType(typeof(TestComponentSimple), c2.Data[''one''])", span="1618-1618", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedDictionaries()", file="TypeNameHandlingTests.cs"];
m8_533 [label="CustomAssert.IsInstanceOfType(typeof(Dictionary<string, object>), c2.Data[''two''])", span="1619-1619", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedDictionaries()", file="TypeNameHandlingTests.cs"];
m8_534 [label="Dictionary<string, object> c = (Dictionary<string, object>)c2.Data[''two'']", span="1620-1620", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedDictionaries()", file="TypeNameHandlingTests.cs"];
m8_537 [label="c2 = JsonConvert.DeserializeObject<PropertyItemTypeNameHandlingDictionary>(json)", span="1639-1639", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedDictionaries()", file="TypeNameHandlingTests.cs"];
m8_539 [label="CustomAssert.IsInstanceOfType(typeof(TestComponentSimple), c2.Data[''one''])", span="1642-1642", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedDictionaries()", file="TypeNameHandlingTests.cs"];
m8_543 [label="JObject o = (JObject)c[''one'']", span="1647-1647", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedDictionaries()", file="TypeNameHandlingTests.cs"];
m8_535 [label="CustomAssert.IsInstanceOfType(typeof(JObject), c[''one''])", span="1621-1621", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedDictionaries()", file="TypeNameHandlingTests.cs"];
m8_540 [label="CustomAssert.IsInstanceOfType(typeof(Dictionary<string, object>), c2.Data[''two''])", span="1643-1643", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedDictionaries()", file="TypeNameHandlingTests.cs"];
m8_542 [label="CustomAssert.IsInstanceOfType(typeof(JObject), c[''one''])", span="1645-1645", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedDictionaries()", file="TypeNameHandlingTests.cs"];
m8_536 [label="json = @''{\r\n  ''''Data'''': {\r\n    ''''one'''': {\r\n      ''''$type'''': ''''Newtonsoft.Json.Tests.TestObjects.TestComponentSimple, Newtonsoft.Json.Tests'''',\r\n      ''''MyProperty'''': 1\r\n    },\r\n    ''''two'''': {\r\n      ''''$type'''': ''''System.Collections.Generic.Dictionary`2[[System.String, mscorlib],[System.Object, mscorlib]], mscorlib'''',\r\n      ''''one'''': {\r\n        ''''$type'''': ''''Newtonsoft.Json.Tests.TestObjects.TestComponentSimple, Newtonsoft.Json.Tests'''',\r\n        ''''MyProperty'''': 1\r\n      }\r\n    }\r\n  }\r\n}''", span="1623-1637", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedDictionaries()", file="TypeNameHandlingTests.cs"];
m8_541 [label="c = (Dictionary<string, object>)c2.Data[''two'']", span="1644-1644", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedDictionaries()", file="TypeNameHandlingTests.cs"];
m8_545 [label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedDictionaries()", span="1576-1576", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingNestedDictionaries()", file="TypeNameHandlingTests.cs"];
m8_547 [label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingObject()", span="1652-1652", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingObject()", file="TypeNameHandlingTests.cs"];
m8_548 [label="PropertyItemTypeNameHandlingObject o1 = new PropertyItemTypeNameHandlingObject\r\n            {\r\n                Data = new TypeNameHandlingTestObject\r\n                {\r\n                    Prop1 = new List<object>\r\n                    {\r\n                        new TestComponentSimple\r\n                        {\r\n                            MyProperty = 1\r\n                        }\r\n                    },\r\n                    Prop2 = new TestComponentSimple\r\n                    {\r\n                        MyProperty = 1\r\n                    },\r\n                    Prop3 = 3,\r\n                    Prop4 = new JObject()\r\n                }\r\n            }", span="1654-1672", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingObject()", file="TypeNameHandlingTests.cs"];
m8_549 [label="string json = JsonConvert.SerializeObject(o1, Formatting.Indented)", span="1674-1674", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingObject()", file="TypeNameHandlingTests.cs"];
m8_550 [label="StringAssert.AreEqual(@''{\r\n  ''''Data'''': {\r\n    ''''Prop1'''': {\r\n      ''''$type'''': ''''System.Collections.Generic.List`1[[System.Object, mscorlib]], mscorlib'''',\r\n      ''''$values'''': [\r\n        {\r\n          ''''MyProperty'''': 1\r\n        }\r\n      ]\r\n    },\r\n    ''''Prop2'''': {\r\n      ''''$type'''': ''''Newtonsoft.Json.Tests.TestObjects.TestComponentSimple, Newtonsoft.Json.Tests'''',\r\n      ''''MyProperty'''': 1\r\n    },\r\n    ''''Prop3'''': 3,\r\n    ''''Prop4'''': {}\r\n  }\r\n}'', json)", span="1675-1692", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingObject()", file="TypeNameHandlingTests.cs"];
m8_551 [label="PropertyItemTypeNameHandlingObject o2 = JsonConvert.DeserializeObject<PropertyItemTypeNameHandlingObject>(json)", span="1694-1694", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingObject()", file="TypeNameHandlingTests.cs"];
m8_560 [label="Assert.AreEqual(1, (int)j[''MyProperty''])", span="1705-1705", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingObject()", file="TypeNameHandlingTests.cs"];
m8_552 [label="Assert.IsNotNull(o2)", span="1695-1695", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingObject()", file="TypeNameHandlingTests.cs"];
m8_553 [label="Assert.IsNotNull(o2.Data)", span="1696-1696", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingObject()", file="TypeNameHandlingTests.cs"];
m8_554 [label="CustomAssert.IsInstanceOfType(typeof(List<object>), o2.Data.Prop1)", span="1698-1698", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingObject()", file="TypeNameHandlingTests.cs"];
m8_555 [label="CustomAssert.IsInstanceOfType(typeof(TestComponentSimple), o2.Data.Prop2)", span="1699-1699", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingObject()", file="TypeNameHandlingTests.cs"];
m8_556 [label="CustomAssert.IsInstanceOfType(typeof(long), o2.Data.Prop3)", span="1700-1700", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingObject()", file="TypeNameHandlingTests.cs"];
m8_557 [label="CustomAssert.IsInstanceOfType(typeof(JObject), o2.Data.Prop4)", span="1701-1701", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingObject()", file="TypeNameHandlingTests.cs"];
m8_558 [label="List<object> o = (List<object>)o2.Data.Prop1", span="1703-1703", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingObject()", file="TypeNameHandlingTests.cs"];
m8_559 [label="JObject j = (JObject)o[0]", span="1704-1704", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingObject()", file="TypeNameHandlingTests.cs"];
m8_561 [label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingObject()", span="1652-1652", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.PropertyItemTypeNameHandlingObject()", file="TypeNameHandlingTests.cs"];
m8_729 [label="Entry object.Equals(object, object)", span="0-0", cluster="object.Equals(object, object)", file="TypeNameHandlingTests.cs"];
m8_201 [label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting)", span="537-537", cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting)", file="TypeNameHandlingTests.cs"];
m8_690 [label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeNullableStructProperty_Auto()", span="2055-2055", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeNullableStructProperty_Auto()", file="TypeNameHandlingTests.cs"];
m8_691 [label="JsonSerializerSettings serializerSettings = new JsonSerializerSettings\r\n            {\r\n                TypeNameHandling = TypeNameHandling.Auto,\r\n                Formatting = Formatting.Indented\r\n            }", span="2057-2061", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeNullableStructProperty_Auto()", file="TypeNameHandlingTests.cs"];
m8_694 [label="StringAssert.AreEqual(@''{\r\n  ''''Message'''': {\r\n    ''''Value'''': ''''Hello!''''\r\n  }\r\n}'', json)", span="2067-2071", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeNullableStructProperty_Auto()", file="TypeNameHandlingTests.cs"];
m8_692 [label="ObjectWithOptionalMessage objWithMessage = new ObjectWithOptionalMessage(new Message2(''Hello!''))", span="2063-2063", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeNullableStructProperty_Auto()", file="TypeNameHandlingTests.cs"];
m8_693 [label="string json = JsonConvert.SerializeObject(objWithMessage, serializerSettings)", span="2065-2065", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeNullableStructProperty_Auto()", file="TypeNameHandlingTests.cs"];
m8_695 [label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeNullableStructProperty_Auto()", span="2055-2055", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.SerializeNullableStructProperty_Auto()", file="TypeNameHandlingTests.cs"];
m8_403 [label="Entry Newtonsoft.Json.Tests.Serialization.Example.Example(string)", span="2245-2245", cluster="Newtonsoft.Json.Tests.Serialization.Example.Example(string)", file="TypeNameHandlingTests.cs"];
m8_736 [label="Name = name", span="2247-2247", cluster="Newtonsoft.Json.Tests.Serialization.Example.Example(string)", file="TypeNameHandlingTests.cs"];
m8_737 [label="Exit Newtonsoft.Json.Tests.Serialization.Example.Example(string)", span="2245-2245", cluster="Newtonsoft.Json.Tests.Serialization.Example.Example(string)", file="TypeNameHandlingTests.cs"];
m8_277 [label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.NewTypeNameSerializationBinder.BindToType(string, string)", span="936-936", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.NewTypeNameSerializationBinder.BindToType(string, string)", file="TypeNameHandlingTests.cs"];
m8_278 [label="string resolvedTypeName = string.Format(TypeFormat, typeName)", span="938-938", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.NewTypeNameSerializationBinder.BindToType(string, string)", file="TypeNameHandlingTests.cs"];
m8_279 [label="return Type.GetType(resolvedTypeName, true);", span="940-940", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.NewTypeNameSerializationBinder.BindToType(string, string)", file="TypeNameHandlingTests.cs"];
m8_280 [label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.NewTypeNameSerializationBinder.BindToType(string, string)", span="936-936", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.NewTypeNameSerializationBinder.BindToType(string, string)", file="TypeNameHandlingTests.cs"];
m8_755 [label="Entry string.Equals(string)", span="0-0", cluster="string.Equals(string)", file="TypeNameHandlingTests.cs"];
m8_93 [label="Entry System.IO.BinaryWriter.Write(double)", span="0-0", cluster="System.IO.BinaryWriter.Write(double)", file="TypeNameHandlingTests.cs"];
m8_455 [label="Entry Newtonsoft.Json.Tests.TestObjects.TestComponentSimple.TestComponentSimple()", span="33-33", cluster="Newtonsoft.Json.Tests.TestObjects.TestComponentSimple.TestComponentSimple()", file="TypeNameHandlingTests.cs"];
m8_354 [label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>.CustomEnumerable(T, Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>)", span="1146-1146", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>.CustomEnumerable(T, Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>)", file="TypeNameHandlingTests.cs"];
m8_355 [label="this.value = value", span="1148-1148", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>.CustomEnumerable(T, Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>)", file="TypeNameHandlingTests.cs"];
m8_356 [label="this.next = next", span="1149-1149", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>.CustomEnumerable(T, Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>)", file="TypeNameHandlingTests.cs"];
m8_357 [label="count = this.next.count + 1", span="1150-1150", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>.CustomEnumerable(T, Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>)", file="TypeNameHandlingTests.cs"];
m8_358 [label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>.CustomEnumerable(T, Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>)", span="1146-1146", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>.CustomEnumerable(T, Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>)", file="TypeNameHandlingTests.cs"];
m8_730 [label="Entry Newtonsoft.Json.Tests.Serialization.SerializableWrapper.GetHashCode()", span="2224-2224", cluster="Newtonsoft.Json.Tests.Serialization.SerializableWrapper.GetHashCode()", file="TypeNameHandlingTests.cs"];
m8_731 [label="Content == null", span="2226-2226", cluster="Newtonsoft.Json.Tests.Serialization.SerializableWrapper.GetHashCode()", file="TypeNameHandlingTests.cs"];
m8_732 [label="return 0;", span="2228-2228", cluster="Newtonsoft.Json.Tests.Serialization.SerializableWrapper.GetHashCode()", file="TypeNameHandlingTests.cs"];
m8_733 [label="return Content.GetHashCode();", span="2231-2231", cluster="Newtonsoft.Json.Tests.Serialization.SerializableWrapper.GetHashCode()", file="TypeNameHandlingTests.cs"];
m8_734 [label="Exit Newtonsoft.Json.Tests.Serialization.SerializableWrapper.GetHashCode()", span="2224-2224", cluster="Newtonsoft.Json.Tests.Serialization.SerializableWrapper.GetHashCode()", file="TypeNameHandlingTests.cs"];
m8_439 [label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameComponentList()", span="1363-1363", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameComponentList()", file="TypeNameHandlingTests.cs"];
m8_447 [label="StringAssert.AreEqual(@''[\r\n  {\r\n    ''''$type'''': ''''Newtonsoft.Json.Tests.TestObjects.TestComponentSimple, Newtonsoft.Json.Tests'''',\r\n    ''''MyProperty'''': 0\r\n  },\r\n  {\r\n    ''''$type'''': ''''Newtonsoft.Json.Tests.TestObjects.Organization.Employee, Newtonsoft.Json.Tests'''',\r\n    ''''FirstName'''': null,\r\n    ''''LastName'''': null,\r\n    ''''BirthDate'''': ''''2000-12-12T12:12:12Z'''',\r\n    ''''Department'''': ''''Department!'''',\r\n    ''''JobTitle'''': null\r\n  },\r\n  ''''String!'''',\r\n  9223372036854775807\r\n]'', json)", span="1378-1393", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameComponentList()", file="TypeNameHandlingTests.cs"];
m8_443 [label="l.Add(new Employee\r\n            {\r\n                BirthDate = new DateTime(2000, 12, 12, 12, 12, 12, DateTimeKind.Utc),\r\n                Department = ''Department!''\r\n            })", span="1369-1373", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameComponentList()", file="TypeNameHandlingTests.cs"];
m8_440 [label="var c1 = new TestComponentSimple()", span="1365-1365", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameComponentList()", file="TypeNameHandlingTests.cs"];
m8_442 [label="l.Add(c1)", span="1368-1368", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameComponentList()", file="TypeNameHandlingTests.cs"];
m8_444 [label="l.Add(''String!'')", span="1374-1374", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameComponentList()", file="TypeNameHandlingTests.cs"];
m8_445 [label="l.Add(long.MaxValue)", span="1375-1375", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameComponentList()", file="TypeNameHandlingTests.cs"];
m8_449 [label="Assert.AreEqual(4, l2.Count)", span="1396-1396", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameComponentList()", file="TypeNameHandlingTests.cs"];
m8_446 [label="string json = JsonConvert.SerializeObject(l, Formatting.Indented)", span="1377-1377", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameComponentList()", file="TypeNameHandlingTests.cs"];
m8_448 [label="TypeNameList<object> l2 = JsonConvert.DeserializeObject<TypeNameList<object>>(json)", span="1395-1395", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameComponentList()", file="TypeNameHandlingTests.cs"];
m8_441 [label="TypeNameList<object> l = new TypeNameList<object>()", span="1367-1367", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameComponentList()", file="TypeNameHandlingTests.cs"];
m8_450 [label="CustomAssert.IsInstanceOfType(typeof(TestComponentSimple), l2[0])", span="1398-1398", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameComponentList()", file="TypeNameHandlingTests.cs"];
m8_451 [label="CustomAssert.IsInstanceOfType(typeof(Employee), l2[1])", span="1399-1399", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameComponentList()", file="TypeNameHandlingTests.cs"];
m8_452 [label="CustomAssert.IsInstanceOfType(typeof(string), l2[2])", span="1400-1400", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameComponentList()", file="TypeNameHandlingTests.cs"];
m8_453 [label="CustomAssert.IsInstanceOfType(typeof(long), l2[3])", span="1401-1401", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameComponentList()", file="TypeNameHandlingTests.cs"];
m8_454 [label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameComponentList()", span="1363-1363", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameComponentList()", file="TypeNameHandlingTests.cs"];
m8_738 [label="Entry Newtonsoft.Json.Tests.Serialization.Example.Example(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)", span="2250-2250", cluster="Newtonsoft.Json.Tests.Serialization.Example.Example(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)", file="TypeNameHandlingTests.cs"];
m8_739 [label="Name = info.GetString(''name'')", span="2252-2252", cluster="Newtonsoft.Json.Tests.Serialization.Example.Example(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)", file="TypeNameHandlingTests.cs"];
m8_740 [label="Exit Newtonsoft.Json.Tests.Serialization.Example.Example(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)", span="2250-2250", cluster="Newtonsoft.Json.Tests.Serialization.Example.Example(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)", file="TypeNameHandlingTests.cs"];
m8_714 [label="Entry Newtonsoft.Json.Tests.Serialization.MyParent.MyParent(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)", span="2151-2151", cluster="Newtonsoft.Json.Tests.Serialization.MyParent.MyParent(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)", file="TypeNameHandlingTests.cs"];
m8_715 [label="Child = (ISomeBase)info.GetValue(''c'', typeof(ISomeBase))", span="2153-2153", cluster="Newtonsoft.Json.Tests.Serialization.MyParent.MyParent(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)", file="TypeNameHandlingTests.cs"];
m8_716 [label="Exit Newtonsoft.Json.Tests.Serialization.MyParent.MyParent(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)", span="2151-2151", cluster="Newtonsoft.Json.Tests.Serialization.MyParent.MyParent(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)", file="TypeNameHandlingTests.cs"];
m8_251 [label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameSerializationBinder.BindToType(string, string)", span="846-846", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameSerializationBinder.BindToType(string, string)", file="TypeNameHandlingTests.cs"];
m8_252 [label="string resolvedTypeName = string.Format(TypeFormat, typeName)", span="848-848", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameSerializationBinder.BindToType(string, string)", file="TypeNameHandlingTests.cs"];
m8_253 [label="return Type.GetType(resolvedTypeName, true);", span="850-850", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameSerializationBinder.BindToType(string, string)", file="TypeNameHandlingTests.cs"];
m8_254 [label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameSerializationBinder.BindToType(string, string)", span="846-846", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameSerializationBinder.BindToType(string, string)", file="TypeNameHandlingTests.cs"];
m8_683 [label="Entry Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeComplexGenericDictionary_Full()", span="2032-2032", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeComplexGenericDictionary_Full()", file="TypeNameHandlingTests.cs"];
m8_685 [label="Dictionary<int, HashSet<string>> dictionary = new Dictionary<int, HashSet<string>>\r\n            {\r\n                { 1, new HashSet<string>(new[] { ''test'' }) },\r\n            }", span="2042-2045", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeComplexGenericDictionary_Full()", file="TypeNameHandlingTests.cs"];
m8_684 [label="JsonSerializerSettings serializerSettings = new JsonSerializerSettings\r\n            {\r\n                TypeNameHandling = TypeNameHandling.All,\r\n#pragma warning disable 618\r\n                TypeNameAssemblyFormat = FormatterAssemblyStyle.Full\r\n#pragma warning restore 618\r\n            }", span="2034-2040", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeComplexGenericDictionary_Full()", file="TypeNameHandlingTests.cs"];
m8_686 [label="string obtainedJson = JsonConvert.SerializeObject(dictionary, serializerSettings)", span="2047-2047", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeComplexGenericDictionary_Full()", file="TypeNameHandlingTests.cs"];
m8_687 [label="Dictionary<int, HashSet<string>> obtainedDictionary = (Dictionary<int, HashSet<string>>)JsonConvert.DeserializeObject(obtainedJson, serializerSettings)", span="2049-2049", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeComplexGenericDictionary_Full()", file="TypeNameHandlingTests.cs"];
m8_688 [label="Assert.IsNotNull(obtainedDictionary)", span="2051-2051", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeComplexGenericDictionary_Full()", file="TypeNameHandlingTests.cs"];
m8_689 [label="Exit Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeComplexGenericDictionary_Full()", span="2032-2032", cluster="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.DeserializeComplexGenericDictionary_Full()", file="TypeNameHandlingTests.cs"];
m8_775 [label="Newtonsoft.Json.Tests.Serialization.DataType", span="", file="TypeNameHandlingTests.cs"];
m8_772 [label="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests", span="", file="TypeNameHandlingTests.cs"];
m8_767 [label=json, span="", file="TypeNameHandlingTests.cs"];
m8_769 [label="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameSerializationBinder", span="", file="TypeNameHandlingTests.cs"];
m8_770 [label="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.NewTypeNameSerializationBinder", span="", file="TypeNameHandlingTests.cs"];
m8_766 [label=sb, span="", file="TypeNameHandlingTests.cs"];
m8_778 [label="Newtonsoft.Json.Tests.Serialization.Example", span="", file="TypeNameHandlingTests.cs"];
m8_771 [label="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>", span="", file="TypeNameHandlingTests.cs"];
m8_774 [label="Newtonsoft.Json.Tests.Serialization.ObjectWithOptionalMessage", span="", file="TypeNameHandlingTests.cs"];
m8_773 [label="out Newtonsoft.Json.Tests.Serialization.Message2", span="", file="TypeNameHandlingTests.cs"];
m8_777 [label="Newtonsoft.Json.Tests.Serialization.SerializableWrapper", span="", file="TypeNameHandlingTests.cs"];
m8_776 [label="Newtonsoft.Json.Tests.Serialization.MyParent", span="", file="TypeNameHandlingTests.cs"];
m9_39 [label="Entry Unk.AreEqual", span="", cluster="Unk.AreEqual", file="VersionConverterTests.cs"];
m9_49 [label="Entry Newtonsoft.Json.Tests.Converters.VersionConverterTests.RoundtripImplicitConverter()", span="118-118", cluster="Newtonsoft.Json.Tests.Converters.VersionConverterTests.RoundtripImplicitConverter()", file="VersionConverterTests.cs"];
m9_50 [label="var version = new Version(1, 0, 0, 0)", span="120-120", cluster="Newtonsoft.Json.Tests.Converters.VersionConverterTests.RoundtripImplicitConverter()", file="VersionConverterTests.cs"];
m9_51 [label="string reportJSON = JsonConvert.SerializeObject(version)", span="121-121", cluster="Newtonsoft.Json.Tests.Converters.VersionConverterTests.RoundtripImplicitConverter()", file="VersionConverterTests.cs"];
m9_52 [label="Version report2 = JsonConvert.DeserializeObject<Version>(reportJSON)", span="124-124", cluster="Newtonsoft.Json.Tests.Converters.VersionConverterTests.RoundtripImplicitConverter()", file="VersionConverterTests.cs"];
m9_54 [label="Assert.AreEqual(reportJSON, reportJSON2)", span="127-127", cluster="Newtonsoft.Json.Tests.Converters.VersionConverterTests.RoundtripImplicitConverter()", file="VersionConverterTests.cs"];
m9_53 [label="string reportJSON2 = JsonConvert.SerializeObject(report2)", span="125-125", cluster="Newtonsoft.Json.Tests.Converters.VersionConverterTests.RoundtripImplicitConverter()", file="VersionConverterTests.cs"];
m9_55 [label="Exit Newtonsoft.Json.Tests.Converters.VersionConverterTests.RoundtripImplicitConverter()", span="118-118", cluster="Newtonsoft.Json.Tests.Converters.VersionConverterTests.RoundtripImplicitConverter()", file="VersionConverterTests.cs"];
m9_38 [label="Entry Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string, params Newtonsoft.Json.JsonConverter[])", span="751-751", cluster="Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string, params Newtonsoft.Json.JsonConverter[])", file="VersionConverterTests.cs"];
m9_18 [label="Entry Newtonsoft.Json.Tests.StringAssert.AreEqual(string, string)", span="328-328", cluster="Newtonsoft.Json.Tests.StringAssert.AreEqual(string, string)", file="VersionConverterTests.cs"];
m9_16 [label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting, params Newtonsoft.Json.JsonConverter[])", span="564-564", cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting, params Newtonsoft.Json.JsonConverter[])", file="VersionConverterTests.cs"];
m9_0 [label="Entry Newtonsoft.Json.Tests.Converters.VersionClass.VersionClass(string, string)", span="40-40", cluster="Newtonsoft.Json.Tests.Converters.VersionClass.VersionClass(string, string)", file="VersionConverterTests.cs"];
m9_1 [label="StringProperty1 = ''StringProperty1''", span="42-42", cluster="Newtonsoft.Json.Tests.Converters.VersionClass.VersionClass(string, string)", file="VersionConverterTests.cs"];
m9_2 [label="Version1 = new Version(version1)", span="43-43", cluster="Newtonsoft.Json.Tests.Converters.VersionClass.VersionClass(string, string)", file="VersionConverterTests.cs"];
m9_3 [label="Version2 = new Version(version2)", span="44-44", cluster="Newtonsoft.Json.Tests.Converters.VersionClass.VersionClass(string, string)", file="VersionConverterTests.cs"];
m9_4 [label="StringProperty2 = ''StringProperty2''", span="45-45", cluster="Newtonsoft.Json.Tests.Converters.VersionClass.VersionClass(string, string)", file="VersionConverterTests.cs"];
m9_5 [label="Exit Newtonsoft.Json.Tests.Converters.VersionClass.VersionClass(string, string)", span="40-40", cluster="Newtonsoft.Json.Tests.Converters.VersionClass.VersionClass(string, string)", file="VersionConverterTests.cs"];
m9_7 [label="Entry Newtonsoft.Json.Tests.Converters.VersionClass.VersionClass()", span="48-48", cluster="Newtonsoft.Json.Tests.Converters.VersionClass.VersionClass()", file="VersionConverterTests.cs"];
m9_8 [label="Exit Newtonsoft.Json.Tests.Converters.VersionClass.VersionClass()", span="48-48", cluster="Newtonsoft.Json.Tests.Converters.VersionClass.VersionClass()", file="VersionConverterTests.cs"];
m9_17 [label="Entry string.Format(string, object, object)", span="0-0", cluster="string.Format(string, object, object)", file="VersionConverterTests.cs"];
m9_19 [label="Entry Newtonsoft.Json.Tests.Converters.VersionConverterTests.SerializeVersionClass()", span="78-78", cluster="Newtonsoft.Json.Tests.Converters.VersionConverterTests.SerializeVersionClass()", file="VersionConverterTests.cs"];
m9_20 [label="SerializeVersionClass(''1.0.0.0'', ''2.0.0.0'')", span="80-80", cluster="Newtonsoft.Json.Tests.Converters.VersionConverterTests.SerializeVersionClass()", color=green, community=0, file="VersionConverterTests.cs"];
m9_21 [label="SerializeVersionClass(''1.2.0.0'', ''2.3.0.0'')", span="81-81", cluster="Newtonsoft.Json.Tests.Converters.VersionConverterTests.SerializeVersionClass()", color=green, community=0, file="VersionConverterTests.cs"];
m9_22 [label="SerializeVersionClass(''1.2.3.0'', ''2.3.4.0'')", span="82-82", cluster="Newtonsoft.Json.Tests.Converters.VersionConverterTests.SerializeVersionClass()", color=green, community=0, file="VersionConverterTests.cs"];
m9_23 [label="SerializeVersionClass(''1.2.3.4'', ''2.3.4.5'')", span="83-83", cluster="Newtonsoft.Json.Tests.Converters.VersionConverterTests.SerializeVersionClass()", color=green, community=0, file="VersionConverterTests.cs"];
m9_24 [label="SerializeVersionClass(''1.2'', ''2.3'')", span="85-85", cluster="Newtonsoft.Json.Tests.Converters.VersionConverterTests.SerializeVersionClass()", color=green, community=0, file="VersionConverterTests.cs"];
m9_25 [label="SerializeVersionClass(''1.2.3'', ''2.3.4'')", span="86-86", cluster="Newtonsoft.Json.Tests.Converters.VersionConverterTests.SerializeVersionClass()", color=green, community=0, file="VersionConverterTests.cs"];
m9_26 [label="SerializeVersionClass(''1.2.3.4'', ''2.3.4.5'')", span="87-87", cluster="Newtonsoft.Json.Tests.Converters.VersionConverterTests.SerializeVersionClass()", color=green, community=0, file="VersionConverterTests.cs"];
m9_27 [label="Exit Newtonsoft.Json.Tests.Converters.VersionConverterTests.SerializeVersionClass()", span="78-78", cluster="Newtonsoft.Json.Tests.Converters.VersionConverterTests.SerializeVersionClass()", file="VersionConverterTests.cs"];
m9_40 [label="Entry Newtonsoft.Json.Tests.Converters.VersionConverterTests.DeserializeVersionClass()", span="105-105", cluster="Newtonsoft.Json.Tests.Converters.VersionConverterTests.DeserializeVersionClass()", file="VersionConverterTests.cs"];
m9_41 [label="DeserializeVersionClass(''1.0.0.0'', ''2.0.0.0'')", span="107-107", cluster="Newtonsoft.Json.Tests.Converters.VersionConverterTests.DeserializeVersionClass()", color=red, community=0, file="VersionConverterTests.cs"];
m9_42 [label="DeserializeVersionClass(''1.2.0.0'', ''2.3.0.0'')", span="108-108", cluster="Newtonsoft.Json.Tests.Converters.VersionConverterTests.DeserializeVersionClass()", color=red, community=0, file="VersionConverterTests.cs"];
m9_43 [label="DeserializeVersionClass(''1.2.3.0'', ''2.3.4.0'')", span="109-109", cluster="Newtonsoft.Json.Tests.Converters.VersionConverterTests.DeserializeVersionClass()", color=red, community=0, file="VersionConverterTests.cs"];
m9_44 [label="DeserializeVersionClass(''1.2.3.4'', ''2.3.4.5'')", span="110-110", cluster="Newtonsoft.Json.Tests.Converters.VersionConverterTests.DeserializeVersionClass()", color=green, community=0, file="VersionConverterTests.cs"];
m9_45 [label="DeserializeVersionClass(''1.2'', ''2.3'')", span="112-112", cluster="Newtonsoft.Json.Tests.Converters.VersionConverterTests.DeserializeVersionClass()", color=green, community=0, file="VersionConverterTests.cs"];
m9_46 [label="DeserializeVersionClass(''1.2.3'', ''2.3.4'')", span="113-113", cluster="Newtonsoft.Json.Tests.Converters.VersionConverterTests.DeserializeVersionClass()", color=green, community=0, file="VersionConverterTests.cs"];
m9_47 [label="DeserializeVersionClass(''1.2.3.4'', ''2.3.4.5'')", span="114-114", cluster="Newtonsoft.Json.Tests.Converters.VersionConverterTests.DeserializeVersionClass()", color=green, community=1, file="VersionConverterTests.cs"];
m9_48 [label="Exit Newtonsoft.Json.Tests.Converters.VersionConverterTests.DeserializeVersionClass()", span="105-105", cluster="Newtonsoft.Json.Tests.Converters.VersionConverterTests.DeserializeVersionClass()", file="VersionConverterTests.cs"];
m9_56 [label="Entry System.Version.Version(int, int, int, int)", span="0-0", cluster="System.Version.Version(int, int, int, int)", file="VersionConverterTests.cs"];
m9_57 [label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object)", span="524-524", cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object)", file="VersionConverterTests.cs"];
m9_58 [label="Entry Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string)", span="703-703", cluster="Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string)", file="VersionConverterTests.cs"];
m9_6 [label="Entry System.Version.Version(string)", span="0-0", cluster="System.Version.Version(string)", file="VersionConverterTests.cs"];
m9_9 [label="Entry Newtonsoft.Json.Tests.Converters.VersionConverterTests.SerializeVersionClass(string, string)", span="61-61", cluster="Newtonsoft.Json.Tests.Converters.VersionConverterTests.SerializeVersionClass(string, string)", file="VersionConverterTests.cs"];
m9_10 [label="VersionClass versionClass = new VersionClass(version1, version2)", span="63-63", cluster="Newtonsoft.Json.Tests.Converters.VersionConverterTests.SerializeVersionClass(string, string)", color=green, community=0, file="VersionConverterTests.cs"];
m9_12 [label="string expectedJson = string.Format(@''{{\r\n  ''''StringProperty1'''': ''''StringProperty1'''',\r\n  ''''Version1'''': ''''{0}'''',\r\n  ''''Version2'''': ''''{1}'''',\r\n  ''''StringProperty2'''': ''''StringProperty2''''\r\n}}'', version1, version2)", span="67-72", cluster="Newtonsoft.Json.Tests.Converters.VersionConverterTests.SerializeVersionClass(string, string)", color=green, community=1, file="VersionConverterTests.cs"];
m9_11 [label="string json = JsonConvert.SerializeObject(versionClass, Formatting.Indented, new VersionConverter())", span="65-65", cluster="Newtonsoft.Json.Tests.Converters.VersionConverterTests.SerializeVersionClass(string, string)", color=green, community=0, file="VersionConverterTests.cs"];
m9_13 [label="StringAssert.AreEqual(expectedJson, json)", span="74-74", cluster="Newtonsoft.Json.Tests.Converters.VersionConverterTests.SerializeVersionClass(string, string)", color=red, community=0, file="VersionConverterTests.cs"];
m9_14 [label="Exit Newtonsoft.Json.Tests.Converters.VersionConverterTests.SerializeVersionClass(string, string)", span="61-61", cluster="Newtonsoft.Json.Tests.Converters.VersionConverterTests.SerializeVersionClass(string, string)", file="VersionConverterTests.cs"];
m9_15 [label="Entry Newtonsoft.Json.Converters.VersionConverter.VersionConverter()", span="34-34", cluster="Newtonsoft.Json.Converters.VersionConverter.VersionConverter()", file="VersionConverterTests.cs"];
m9_28 [label="Entry Newtonsoft.Json.Tests.Converters.VersionConverterTests.DeserializeVersionClass(string, string)", span="90-90", cluster="Newtonsoft.Json.Tests.Converters.VersionConverterTests.DeserializeVersionClass(string, string)", file="VersionConverterTests.cs"];
m9_29 [label="string json = string.Format(@''{{''''StringProperty1'''': ''''StringProperty1'''', ''''Version1'''': ''''{0}'''', ''''Version2'''': ''''{1}'''', ''''StringProperty2'''': ''''StringProperty2''''}}'', version1, version2)", span="92-92", cluster="Newtonsoft.Json.Tests.Converters.VersionConverterTests.DeserializeVersionClass(string, string)", color=red, community=0, file="VersionConverterTests.cs"];
m9_30 [label="Version expectedVersion1 = new Version(version1)", span="93-93", cluster="Newtonsoft.Json.Tests.Converters.VersionConverterTests.DeserializeVersionClass(string, string)", color=red, community=0, file="VersionConverterTests.cs"];
m9_31 [label="Version expectedVersion2 = new Version(version2)", span="94-94", cluster="Newtonsoft.Json.Tests.Converters.VersionConverterTests.DeserializeVersionClass(string, string)", color=red, community=0, file="VersionConverterTests.cs"];
m9_32 [label="VersionClass versionClass = JsonConvert.DeserializeObject<VersionClass>(json, new VersionConverter())", span="96-96", cluster="Newtonsoft.Json.Tests.Converters.VersionConverterTests.DeserializeVersionClass(string, string)", color=red, community=0, file="VersionConverterTests.cs"];
m9_34 [label="Assert.AreEqual(expectedVersion1, versionClass.Version1)", span="99-99", cluster="Newtonsoft.Json.Tests.Converters.VersionConverterTests.DeserializeVersionClass(string, string)", color=green, community=0, file="VersionConverterTests.cs"];
m9_35 [label="Assert.AreEqual(expectedVersion2, versionClass.Version2)", span="100-100", cluster="Newtonsoft.Json.Tests.Converters.VersionConverterTests.DeserializeVersionClass(string, string)", color=green, community=0, file="VersionConverterTests.cs"];
m9_33 [label="Assert.AreEqual(''StringProperty1'', versionClass.StringProperty1)", span="98-98", cluster="Newtonsoft.Json.Tests.Converters.VersionConverterTests.DeserializeVersionClass(string, string)", color=green, community=0, file="VersionConverterTests.cs"];
m9_36 [label="Assert.AreEqual(''StringProperty2'', versionClass.StringProperty2)", span="101-101", cluster="Newtonsoft.Json.Tests.Converters.VersionConverterTests.DeserializeVersionClass(string, string)", color=green, community=0, file="VersionConverterTests.cs"];
m9_37 [label="Exit Newtonsoft.Json.Tests.Converters.VersionConverterTests.DeserializeVersionClass(string, string)", span="90-90", cluster="Newtonsoft.Json.Tests.Converters.VersionConverterTests.DeserializeVersionClass(string, string)", file="VersionConverterTests.cs"];
m9_59 [label="Newtonsoft.Json.Tests.Converters.VersionClass", span="", file="VersionConverterTests.cs"];
m9_60 [label="Newtonsoft.Json.Tests.Converters.VersionConverterTests", span="", file="VersionConverterTests.cs"];
m11_132 [label="Entry XmlDocument.cstr", span="", cluster="XmlDocument.cstr", file="XmlNodeConverterTest.cs"];
m11_439 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NestedArrays()", span="1208-1208", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NestedArrays()", file="XmlNodeConverterTest.cs"];
m11_440 [label="string json = @''{\r\n  ''''available_sizes'''': [\r\n    [\r\n      ''''assets/images/resized/0001/1070/11070v1-max-150x150.jpg'''',\r\n      ''''assets/images/resized/0001/1070/11070v1-max-150x150.jpg''''\r\n    ],\r\n    [\r\n      ''''assets/images/resized/0001/1070/11070v1-max-250x250.jpg'''',\r\n      ''''assets/images/resized/0001/1070/11070v1-max-250x250.jpg''''\r\n    ],\r\n    [\r\n      ''''assets/images/resized/0001/1070/11070v1-max-250x250.jpg''''\r\n    ]\r\n  ]\r\n}''", span="1210-1224", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NestedArrays()", file="XmlNodeConverterTest.cs"];
m11_441 [label="XmlDocument newDoc = JsonConvert.DeserializeXmlNode(json, ''myRoot'')", span="1227-1227", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NestedArrays()", file="XmlNodeConverterTest.cs"];
m11_444 [label="XDocument newXDoc = JsonConvert.DeserializeXNode(json, ''myRoot'')", span="1247-1247", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NestedArrays()", file="XmlNodeConverterTest.cs"];
m11_442 [label="string xml = IndentXml(newDoc.InnerXml)", span="1229-1229", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NestedArrays()", file="XmlNodeConverterTest.cs"];
m11_443 [label="StringAssert.AreEqual(@''<myRoot>\r\n  <available_sizes>\r\n    <available_sizes>assets/images/resized/0001/1070/11070v1-max-150x150.jpg</available_sizes>\r\n    <available_sizes>assets/images/resized/0001/1070/11070v1-max-150x150.jpg</available_sizes>\r\n  </available_sizes>\r\n  <available_sizes>\r\n    <available_sizes>assets/images/resized/0001/1070/11070v1-max-250x250.jpg</available_sizes>\r\n    <available_sizes>assets/images/resized/0001/1070/11070v1-max-250x250.jpg</available_sizes>\r\n  </available_sizes>\r\n  <available_sizes>\r\n    <available_sizes>assets/images/resized/0001/1070/11070v1-max-250x250.jpg</available_sizes>\r\n  </available_sizes>\r\n</myRoot>'', IndentXml(newDoc.InnerXml))", span="1231-1243", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NestedArrays()", file="XmlNodeConverterTest.cs"];
m11_446 [label="string newJson = JsonConvert.SerializeXmlNode(newDoc, Formatting.Indented)", span="1265-1265", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NestedArrays()", file="XmlNodeConverterTest.cs"];
m11_445 [label="StringAssert.AreEqual(@''<myRoot>\r\n  <available_sizes>\r\n    <available_sizes>assets/images/resized/0001/1070/11070v1-max-150x150.jpg</available_sizes>\r\n    <available_sizes>assets/images/resized/0001/1070/11070v1-max-150x150.jpg</available_sizes>\r\n  </available_sizes>\r\n  <available_sizes>\r\n    <available_sizes>assets/images/resized/0001/1070/11070v1-max-250x250.jpg</available_sizes>\r\n    <available_sizes>assets/images/resized/0001/1070/11070v1-max-250x250.jpg</available_sizes>\r\n  </available_sizes>\r\n  <available_sizes>\r\n    <available_sizes>assets/images/resized/0001/1070/11070v1-max-250x250.jpg</available_sizes>\r\n  </available_sizes>\r\n</myRoot>'', IndentXml(newXDoc.ToString(SaveOptions.DisableFormatting)))", span="1249-1261", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NestedArrays()", file="XmlNodeConverterTest.cs"];
m11_447 [label="Console.WriteLine(newJson)", span="1266-1266", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NestedArrays()", file="XmlNodeConverterTest.cs"];
m11_448 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NestedArrays()", span="1208-1208", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NestedArrays()", file="XmlNodeConverterTest.cs"];
m11_815 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Utc_Precision()", span="2831-2831", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Utc_Precision()", file="XmlNodeConverterTest.cs"];
m11_816 [label="string json = @''{''''CreatedDate'''': ''''2014-01-23T00:00:00.1234567Z''''}''", span="2833-2833", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Utc_Precision()", file="XmlNodeConverterTest.cs"];
m11_817 [label="var dxml = JsonConvert.DeserializeXNode(json, ''root'')", span="2834-2834", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Utc_Precision()", file="XmlNodeConverterTest.cs"];
m11_818 [label="Assert.AreEqual(''2014-01-23T00:00:00.1234567Z'', dxml.Root.Element(''CreatedDate'').Value)", span="2835-2835", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Utc_Precision()", file="XmlNodeConverterTest.cs"];
m11_819 [label="Console.WriteLine(''DateTimeToXml_Utc: '' + dxml.Root.Element(''CreatedDate'').Value)", span="2837-2837", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Utc_Precision()", file="XmlNodeConverterTest.cs"];
m11_820 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Utc_Precision()", span="2831-2831", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Utc_Precision()", file="XmlNodeConverterTest.cs"];
m11_742 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlIncompatibleCharsInPropertyName()", span="2690-2690", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlIncompatibleCharsInPropertyName()", file="XmlNodeConverterTest.cs"];
m11_743 [label="var json = ''{\''%name\'':\''value\''}''", span="2692-2692", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlIncompatibleCharsInPropertyName()", file="XmlNodeConverterTest.cs"];
m11_744 [label="XmlDocument node = JsonConvert.DeserializeXmlNode(json)", span="2694-2694", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlIncompatibleCharsInPropertyName()", file="XmlNodeConverterTest.cs"];
m11_747 [label="Assert.AreEqual(json, json2)", span="2700-2700", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlIncompatibleCharsInPropertyName()", file="XmlNodeConverterTest.cs"];
m11_745 [label="Assert.AreEqual(''<_x0025_name>value</_x0025_name>'', node.OuterXml)", span="2696-2696", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlIncompatibleCharsInPropertyName()", file="XmlNodeConverterTest.cs"];
m11_746 [label="string json2 = JsonConvert.SerializeXmlNode(node)", span="2698-2698", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlIncompatibleCharsInPropertyName()", file="XmlNodeConverterTest.cs"];
m11_748 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlIncompatibleCharsInPropertyName()", span="2690-2690", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlIncompatibleCharsInPropertyName()", file="XmlNodeConverterTest.cs"];
m11_653 [label="Entry System.IO.MemoryStream.ToArray()", span="0-0", cluster="System.IO.MemoryStream.ToArray()", file="XmlNodeConverterTest.cs"];
m11_344 [label="Entry Unk.GetIndentedInnerXml", span="", cluster="Unk.GetIndentedInnerXml", file="XmlNodeConverterTest.cs"];
m11_652 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JsonBodyToSoapXml(System.IO.Stream, System.IO.Stream)", span="2068-2068", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JsonBodyToSoapXml(System.IO.Stream, System.IO.Stream)", file="XmlNodeConverterTest.cs"];
m11_655 [label="Newtonsoft.Json.JsonSerializerSettings settings = new Newtonsoft.Json.JsonSerializerSettings()", span="2070-2070", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JsonBodyToSoapXml(System.IO.Stream, System.IO.Stream)", file="XmlNodeConverterTest.cs"];
m11_658 [label="Newtonsoft.Json.JsonTextReader reader = new Newtonsoft.Json.JsonTextReader(new System.IO.StreamReader(json))", span="2073-2073", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JsonBodyToSoapXml(System.IO.Stream, System.IO.Stream)", file="XmlNodeConverterTest.cs"];
m11_662 [label="XmlWriter writer = XmlWriter.Create(xml)", span="2080-2080", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JsonBodyToSoapXml(System.IO.Stream, System.IO.Stream)", file="XmlNodeConverterTest.cs"];
m11_656 [label="settings.Converters.Add(new Newtonsoft.Json.Converters.XmlNodeConverter())", span="2071-2071", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JsonBodyToSoapXml(System.IO.Stream, System.IO.Stream)", file="XmlNodeConverterTest.cs"];
m11_657 [label="Newtonsoft.Json.JsonSerializer serializer = Newtonsoft.Json.JsonSerializer.Create(settings)", span="2072-2072", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JsonBodyToSoapXml(System.IO.Stream, System.IO.Stream)", file="XmlNodeConverterTest.cs"];
m11_659 [label="XmlDocument doc = (XmlDocument)serializer.Deserialize(reader, typeof(XmlDocument))", span="2075-2075", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JsonBodyToSoapXml(System.IO.Stream, System.IO.Stream)", file="XmlNodeConverterTest.cs"];
m11_660 [label="reader.Read() && reader.TokenType != JsonToken.Comment", span="2076-2076", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JsonBodyToSoapXml(System.IO.Stream, System.IO.Stream)", file="XmlNodeConverterTest.cs"];
m11_663 [label="doc.Save(writer)", span="2082-2082", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JsonBodyToSoapXml(System.IO.Stream, System.IO.Stream)", file="XmlNodeConverterTest.cs"];
m11_661 [label="throw new JsonSerializationException(''Additional text found in JSON string after finishing deserializing object.'');", span="2078-2078", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JsonBodyToSoapXml(System.IO.Stream, System.IO.Stream)", file="XmlNodeConverterTest.cs"];
m11_664 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JsonBodyToSoapXml(System.IO.Stream, System.IO.Stream)", span="2068-2068", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JsonBodyToSoapXml(System.IO.Stream, System.IO.Stream)", file="XmlNodeConverterTest.cs"];
m11_319 [label="Entry System.Text.StringBuilder.StringBuilder()", span="0-0", cluster="System.Text.StringBuilder.StringBuilder()", file="XmlNodeConverterTest.cs"];
m11_808 [label="Entry System.DateTime.ToString(string, System.IFormatProvider)", span="0-0", cluster="System.DateTime.ToString(string, System.IFormatProvider)", file="XmlNodeConverterTest.cs"];
m11_68 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDollarProperty()", span="149-149", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDollarProperty()", file="XmlNodeConverterTest.cs"];
m11_69 [label="string json1 = @''{''''$'''':''''test''''}''", span="151-151", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDollarProperty()", file="XmlNodeConverterTest.cs"];
m11_70 [label="var doc = JsonConvert.DeserializeXNode(json1)", span="153-153", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDollarProperty()", file="XmlNodeConverterTest.cs"];
m11_73 [label="Assert.AreEqual(json1, json2)", span="159-159", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDollarProperty()", file="XmlNodeConverterTest.cs"];
m11_71 [label="Assert.AreEqual(@''<_x0024_>test</_x0024_>'', doc.ToString())", span="155-155", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDollarProperty()", file="XmlNodeConverterTest.cs"];
m11_72 [label="var json2 = JsonConvert.SerializeXNode(doc)", span="157-157", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDollarProperty()", file="XmlNodeConverterTest.cs"];
m11_74 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDollarProperty()", span="149-149", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDollarProperty()", file="XmlNodeConverterTest.cs"];
m11_85 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ConvertNullString()", span="184-184", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ConvertNullString()", file="XmlNodeConverterTest.cs"];
m11_86 [label="JObject json = new JObject()", span="186-186", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ConvertNullString()", file="XmlNodeConverterTest.cs"];
m11_87 [label="json[''Prop1''] = (string)null", span="187-187", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ConvertNullString()", file="XmlNodeConverterTest.cs"];
m11_88 [label="json[''Prop2''] = new MyModel().MyProperty", span="188-188", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ConvertNullString()", file="XmlNodeConverterTest.cs"];
m11_92 [label="XDocument d = json.ToObject<XDocument>(jsonSerializer)", span="193-193", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ConvertNullString()", file="XmlNodeConverterTest.cs"];
m11_89 [label="var xmlNodeConverter = new XmlNodeConverter { DeserializeRootElementName = ''object'' }", span="190-190", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ConvertNullString()", file="XmlNodeConverterTest.cs"];
m11_90 [label="var jsonSerializerSettings = new JsonSerializerSettings { Converters = new JsonConverter[] { xmlNodeConverter } }", span="191-191", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ConvertNullString()", file="XmlNodeConverterTest.cs"];
m11_91 [label="var jsonSerializer = JsonSerializer.CreateDefault(jsonSerializerSettings)", span="192-192", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ConvertNullString()", file="XmlNodeConverterTest.cs"];
m11_93 [label="StringAssert.Equals(@''<object>\r\n  <Prop1 />\r\n  <Prop2 />\r\n</object>'', d.ToString())", span="195-198", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ConvertNullString()", file="XmlNodeConverterTest.cs"];
m11_94 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ConvertNullString()", span="184-184", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ConvertNullString()", file="XmlNodeConverterTest.cs"];
m11_47 [label="Entry Newtonsoft.Json.JsonTextReader.Read()", span="387-387", cluster="Newtonsoft.Json.JsonTextReader.Read()", file="XmlNodeConverterTest.cs"];
m11_179 [label="Entry System.TimeSpan.FromMinutes(double)", span="0-0", cluster="System.TimeSpan.FromMinutes(double)", file="XmlNodeConverterTest.cs"];
m11_111 [label="Entry Unk.IsNull", span="", cluster="Unk.IsNull", file="XmlNodeConverterTest.cs"];
m11_221 [label="Entry Unk.DeserializeXmlNode", span="", cluster="Unk.DeserializeXmlNode", file="XmlNodeConverterTest.cs"];
m11_594 [label="Entry Newtonsoft.Json.Converters.IsoDateTimeConverter.IsoDateTimeConverter()", span="34-34", cluster="Newtonsoft.Json.Converters.IsoDateTimeConverter.IsoDateTimeConverter()", file="XmlNodeConverterTest.cs"];
m11_134 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlElement()", span="276-276", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlElement()", file="XmlNodeConverterTest.cs"];
m11_135 [label="string xml = @''<payload>\r\n    <Country>6</Country>\r\n    <FinancialTransactionApprovalRequestUID>79</FinancialTransactionApprovalRequestUID>\r\n    <TransactionStatus>Approved</TransactionStatus>\r\n    <StatusChangeComment></StatusChangeComment>\r\n    <RequestedBy>Someone</RequestedBy>\r\n</payload>''", span="278-284", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlElement()", file="XmlNodeConverterTest.cs"];
m11_136 [label="var xmlDocument = new XmlDocument()", span="286-286", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlElement()", file="XmlNodeConverterTest.cs"];
m11_137 [label="xmlDocument.LoadXml(xml)", span="288-288", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlElement()", file="XmlNodeConverterTest.cs"];
m11_138 [label="var result = xmlDocument.FirstChild.ChildNodes.Cast<XmlNode>().ToArray()", span="290-290", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlElement()", file="XmlNodeConverterTest.cs"];
m11_139 [label="var json = JsonConvert.SerializeObject(result, Formatting.Indented)", span="292-292", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlElement()", file="XmlNodeConverterTest.cs"];
m11_140 [label="StringAssert.AreEqual(@''[\r\n  {\r\n    ''''Country'''': ''''6''''\r\n  },\r\n  {\r\n    ''''FinancialTransactionApprovalRequestUID'''': ''''79''''\r\n  },\r\n  {\r\n    ''''TransactionStatus'''': ''''Approved''''\r\n  },\r\n  {\r\n    ''''StatusChangeComment'''': ''''''''\r\n  },\r\n  {\r\n    ''''RequestedBy'''': ''''Someone''''\r\n  }\r\n]'', json)", span="294-310", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlElement()", file="XmlNodeConverterTest.cs"];
m11_141 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlElement()", span="276-276", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlElement()", file="XmlNodeConverterTest.cs"];
m11_596 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ComplexSingleItemArrayPropertySerialization()", span="1896-1896", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ComplexSingleItemArrayPropertySerialization()", file="XmlNodeConverterTest.cs"];
m11_597 [label="TestComplexArrayClass o = new TestComplexArrayClass\r\n            {\r\n                Name = ''Hi'',\r\n                Products = new List<Product>\r\n                {\r\n                    new Product { Name = ''First'' }\r\n                }\r\n            }", span="1898-1905", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ComplexSingleItemArrayPropertySerialization()", file="XmlNodeConverterTest.cs"];
m11_598 [label="string output = JsonConvert.SerializeObject(o, new IsoDateTimeConverter())", span="1907-1907", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ComplexSingleItemArrayPropertySerialization()", file="XmlNodeConverterTest.cs"];
m11_599 [label="XmlDocument xmlProduct = JsonConvert.DeserializeXmlNode(output, ''test'', true)", span="1909-1909", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ComplexSingleItemArrayPropertySerialization()", file="XmlNodeConverterTest.cs"];
m11_600 [label="StringAssert.AreEqual(@''<test>\r\n  <Name>Hi</Name>\r\n  <Products json:Array=''''true'''' xmlns:json=''''http://james.newtonking.com/projects/json''''>\r\n    <Name>First</Name>\r\n    <ExpiryDate>2000-01-01T00:00:00Z</ExpiryDate>\r\n    <Price>0</Price>\r\n    <Sizes />\r\n  </Products>\r\n</test>'', IndentXml(xmlProduct.InnerXml))", span="1911-1919", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ComplexSingleItemArrayPropertySerialization()", file="XmlNodeConverterTest.cs"];
m11_601 [label="string output2 = JsonConvert.SerializeXmlNode(xmlProduct.DocumentElement, Formatting.Indented, true)", span="1921-1921", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ComplexSingleItemArrayPropertySerialization()", file="XmlNodeConverterTest.cs"];
m11_602 [label="StringAssert.AreEqual(@''{\r\n  ''''Name'''': ''''Hi'''',\r\n  ''''Products'''': [\r\n    {\r\n      ''''Name'''': ''''First'''',\r\n      ''''ExpiryDate'''': ''''2000-01-01T00:00:00Z'''',\r\n      ''''Price'''': ''''0'''',\r\n      ''''Sizes'''': null\r\n    }\r\n  ]\r\n}'', output2)", span="1923-1933", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ComplexSingleItemArrayPropertySerialization()", file="XmlNodeConverterTest.cs"];
m11_603 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ComplexSingleItemArrayPropertySerialization()", span="1896-1896", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ComplexSingleItemArrayPropertySerialization()", file="XmlNodeConverterTest.cs"];
m11_604 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.TestComplexArrayClass.TestComplexArrayClass()", span="1889-1889", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.TestComplexArrayClass.TestComplexArrayClass()", file="XmlNodeConverterTest.cs"];
m11_532 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNoId()", span="1643-1643", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNoId()", file="XmlNodeConverterTest.cs"];
m11_533 [label="string json = @''{\r\n  ''''$values'''': [\r\n    ''''1'''',\r\n    ''''2'''',\r\n    ''''3'''',\r\n    ''''4'''',\r\n    ''''5''''\r\n  ]\r\n}''", span="1645-1653", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNoId()", file="XmlNodeConverterTest.cs"];
m11_534 [label="XmlNode node = JsonConvert.DeserializeXmlNode(json, ''root'')", span="1655-1655", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNoId()", file="XmlNodeConverterTest.cs"];
m11_539 [label="StringAssert.AreEqual(json, newJson)", span="1671-1671", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNoId()", file="XmlNodeConverterTest.cs"];
m11_535 [label="string xml = GetIndentedInnerXml(node)", span="1656-1656", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNoId()", file="XmlNodeConverterTest.cs"];
m11_537 [label="string newJson = JsonConvert.SerializeXmlNode(node, Formatting.Indented, true)", span="1667-1667", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNoId()", file="XmlNodeConverterTest.cs"];
m11_536 [label="StringAssert.AreEqual(@''<?xml version=''''1.0'''' encoding=''''utf-16''''?>\r\n<root xmlns:json=''''http://james.newtonking.com/projects/json''''>\r\n  <values xmlns=''''http://james.newtonking.com/projects/json''''>1</values>\r\n  <values xmlns=''''http://james.newtonking.com/projects/json''''>2</values>\r\n  <values xmlns=''''http://james.newtonking.com/projects/json''''>3</values>\r\n  <values xmlns=''''http://james.newtonking.com/projects/json''''>4</values>\r\n  <values xmlns=''''http://james.newtonking.com/projects/json''''>5</values>\r\n</root>'', xml)", span="1658-1665", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNoId()", file="XmlNodeConverterTest.cs"];
m11_538 [label="Console.WriteLine(newJson)", span="1669-1669", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNoId()", file="XmlNodeConverterTest.cs"];
m11_540 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNoId()", span="1643-1643", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNoId()", file="XmlNodeConverterTest.cs"];
m11_133 [label="Entry Unk.LoadXml", span="", cluster="Unk.LoadXml", file="XmlNodeConverterTest.cs"];
m11_639 [label="Entry Newtonsoft.Json.JsonSerializer.Create(Newtonsoft.Json.JsonSerializerSettings)", span="574-574", cluster="Newtonsoft.Json.JsonSerializer.Create(Newtonsoft.Json.JsonSerializerSettings)", file="XmlNodeConverterTest.cs"];
m11_180 [label="Entry System.TimeSpan.Add(System.TimeSpan)", span="0-0", cluster="System.TimeSpan.Add(System.TimeSpan)", file="XmlNodeConverterTest.cs"];
m11_99 [label="Entry Newtonsoft.Json.Linq.JToken.ToObject<T>(Newtonsoft.Json.JsonSerializer)", span="2066-2066", cluster="Newtonsoft.Json.Linq.JToken.ToObject<T>(Newtonsoft.Json.JsonSerializer)", file="XmlNodeConverterTest.cs"];
m11_121 [label="Entry Unk.SerializeObject", span="", cluster="Unk.SerializeObject", file="XmlNodeConverterTest.cs"];
m11_214 [label="Entry Unk.IsTrue", span="", cluster="Unk.IsTrue", file="XmlNodeConverterTest.cs"];
m11_654 [label="Entry System.Text.Encoding.GetString(byte[])", span="0-0", cluster="System.Text.Encoding.GetString(byte[])", file="XmlNodeConverterTest.cs"];
m11_493 [label="Entry Newtonsoft.Json.Linq.JObject.Parse(string)", span="404-404", cluster="Newtonsoft.Json.Linq.JObject.Parse(string)", file="XmlNodeConverterTest.cs"];
m11_229 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentSerializeIndented()", span="511-511", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentSerializeIndented()", file="XmlNodeConverterTest.cs"];
m11_230 [label="string xml = @''<?xml version=''''1.0'''' standalone=''''no''''?>\r\n<?xml-stylesheet href=''''classic.xsl'''' type=''''text/xml''''?>\r\n<span class=''''vevent''''>\r\n  <a class=''''url'''' href=''''http://www.web2con.com/''''>\r\n    <span class=''''summary''''>Web 2.0 Conference<![CDATA[my escaped text]]></span>\r\n    <abbr class=''''dtstart'''' title=''''2005-10-05''''>October 5</abbr>\r\n    <abbr class=''''dtend'''' title=''''2005-10-08''''>7</abbr>\r\n    <span class=''''location''''>Argent Hotel, San Francisco, CA</span>\r\n  </a>\r\n</span>''", span="513-522", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentSerializeIndented()", file="XmlNodeConverterTest.cs"];
m11_231 [label="XmlDocument doc = new XmlDocument()", span="523-523", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentSerializeIndented()", file="XmlNodeConverterTest.cs"];
m11_232 [label="doc.LoadXml(xml)", span="524-524", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentSerializeIndented()", file="XmlNodeConverterTest.cs"];
m11_233 [label="string jsonText = SerializeXmlNode(doc)", span="526-526", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentSerializeIndented()", file="XmlNodeConverterTest.cs"];
m11_234 [label="string expected = @''{\r\n  ''''?xml'''': {\r\n    ''''@version'''': ''''1.0'''',\r\n    ''''@standalone'''': ''''no''''\r\n  },\r\n  ''''?xml-stylesheet'''': ''''href=\''''classic.xsl\'''' type=\''''text/xml\'''''''',\r\n  ''''span'''': {\r\n    ''''@class'''': ''''vevent'''',\r\n    ''''a'''': {\r\n      ''''@class'''': ''''url'''',\r\n      ''''@href'''': ''''http://www.web2con.com/'''',\r\n      ''''span'''': [\r\n        {\r\n          ''''@class'''': ''''summary'''',\r\n          ''''#text'''': ''''Web 2.0 Conference'''',\r\n          ''''#cdata-section'''': ''''my escaped text''''\r\n        },\r\n        {\r\n          ''''@class'''': ''''location'''',\r\n          ''''#text'''': ''''Argent Hotel, San Francisco, CA''''\r\n        }\r\n      ],\r\n      ''''abbr'''': [\r\n        {\r\n          ''''@class'''': ''''dtstart'''',\r\n          ''''@title'''': ''''2005-10-05'''',\r\n          ''''#text'''': ''''October 5''''\r\n        },\r\n        {\r\n          ''''@class'''': ''''dtend'''',\r\n          ''''@title'''': ''''2005-10-08'''',\r\n          ''''#text'''': ''''7''''\r\n        }\r\n      ]\r\n    }\r\n  }\r\n}''", span="527-563", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentSerializeIndented()", file="XmlNodeConverterTest.cs"];
m11_235 [label="StringAssert.AreEqual(expected, jsonText)", span="565-565", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentSerializeIndented()", file="XmlNodeConverterTest.cs"];
m11_236 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentSerializeIndented()", span="511-511", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentSerializeIndented()", file="XmlNodeConverterTest.cs"];
m11_592 [label="Entry Newtonsoft.Json.Tests.TestObjects.Product.Product()", span="29-29", cluster="Newtonsoft.Json.Tests.TestObjects.Product.Product()", file="XmlNodeConverterTest.cs"];
m11_669 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXNodeDefaultNamespace()", span="2090-2090", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXNodeDefaultNamespace()", file="XmlNodeConverterTest.cs"];
m11_670 [label="string xaml = @''<Grid xmlns=''''http://schemas.microsoft.com/winfx/2006/xaml/presentation'''' xmlns:x=''''http://schemas.microsoft.com/winfx/2006/xaml'''' xmlns:toolkit=''''clr-namespace:Microsoft.Phone.Controls;assembly=Microsoft.Phone.Controls.Toolkit'''' Style=''''{StaticResource trimFormGrid}'''' x:Name=''''TrimObjectForm''''>\r\n  <Grid.ColumnDefinitions>\r\n    <ColumnDefinition Width=''''63*'''' />\r\n    <ColumnDefinition Width=''''320*'''' />\r\n  </Grid.ColumnDefinitions>\r\n  <Grid.RowDefinitions xmlns=''''''''>\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n  </Grid.RowDefinitions>\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding TypedTitle, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordTypedTitle'''' Grid.Column=''''1'''' Grid.Row=''''0'''' xmlns='''''''' />\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding ExternalReference, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordExternalReference'''' Grid.Column=''''1'''' Grid.Row=''''1'''' xmlns='''''''' />\r\n  <toolkit:DatePicker Style=''''{StaticResource trimFormGrid_DP}'''' Value=''''{Binding DateCreated, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordDateCreated'''' Grid.Column=''''1'''' Grid.Row=''''2'''' />\r\n  <toolkit:DatePicker Style=''''{StaticResource trimFormGrid_DP}'''' Value=''''{Binding DateDue, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordDateDue'''' Grid.Column=''''1'''' Grid.Row=''''3'''' />\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding Author, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordAuthor'''' Grid.Column=''''1'''' Grid.Row=''''4'''' xmlns='''''''' />\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding Container, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordContainer'''' Grid.Column=''''1'''' Grid.Row=''''5'''' xmlns='''''''' />\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding IsEnclosed, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordIsEnclosed'''' Grid.Column=''''1'''' Grid.Row=''''6'''' xmlns='''''''' />\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding Assignee, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordAssignee'''' Grid.Column=''''1'''' Grid.Row=''''7'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Title (Free Text Part)'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''0'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''External ID'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''1'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Date Created'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''2'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Date Due'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''3'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Author'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''4'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Container'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''5'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Enclosed?'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''6'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Assignee'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''7'''' xmlns='''''''' />\r\n</Grid>''", span="2092-2123", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXNodeDefaultNamespace()", file="XmlNodeConverterTest.cs"];
m11_671 [label="string json = JsonConvert.SerializeXNode(XDocument.Parse(xaml), Formatting.Indented)", span="2125-2125", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXNodeDefaultNamespace()", file="XmlNodeConverterTest.cs"];
m11_672 [label="string expectedJson = @''{\r\n  ''''Grid'''': {\r\n    ''''@xmlns'''': ''''http://schemas.microsoft.com/winfx/2006/xaml/presentation'''',\r\n    ''''@xmlns:x'''': ''''http://schemas.microsoft.com/winfx/2006/xaml'''',\r\n    ''''@xmlns:toolkit'''': ''''clr-namespace:Microsoft.Phone.Controls;assembly=Microsoft.Phone.Controls.Toolkit'''',\r\n    ''''@Style'''': ''''{StaticResource trimFormGrid}'''',\r\n    ''''@x:Name'''': ''''TrimObjectForm'''',\r\n    ''''Grid.ColumnDefinitions'''': {\r\n      ''''ColumnDefinition'''': [\r\n        {\r\n          ''''@Width'''': ''''63*''''\r\n        },\r\n        {\r\n          ''''@Width'''': ''''320*''''\r\n        }\r\n      ]\r\n    },\r\n    ''''Grid.RowDefinitions'''': {\r\n      ''''@xmlns'''': '''''''',\r\n      ''''RowDefinition'''': [\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null\r\n      ]\r\n    },\r\n    ''''TextBox'''': [\r\n      {\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_TB}'''',\r\n        ''''@Text'''': ''''{Binding TypedTitle, Converter={StaticResource trimPropertyConverter}}'''',\r\n        ''''@Name'''': ''''RecordTypedTitle'''',\r\n        ''''@Grid.Column'''': ''''1'''',\r\n        ''''@Grid.Row'''': ''''0'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_TB}'''',\r\n        ''''@Text'''': ''''{Binding ExternalReference, Converter={StaticResource trimPropertyConverter}}'''',\r\n        ''''@Name'''': ''''RecordExternalReference'''',\r\n        ''''@Grid.Column'''': ''''1'''',\r\n        ''''@Grid.Row'''': ''''1'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_TB}'''',\r\n        ''''@Text'''': ''''{Binding Author, Converter={StaticResource trimPropertyConverter}}'''',\r\n        ''''@Name'''': ''''RecordAuthor'''',\r\n        ''''@Grid.Column'''': ''''1'''',\r\n        ''''@Grid.Row'''': ''''4'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_TB}'''',\r\n        ''''@Text'''': ''''{Binding Container, Converter={StaticResource trimPropertyConverter}}'''',\r\n        ''''@Name'''': ''''RecordContainer'''',\r\n        ''''@Grid.Column'''': ''''1'''',\r\n        ''''@Grid.Row'''': ''''5'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_TB}'''',\r\n        ''''@Text'''': ''''{Binding IsEnclosed, Converter={StaticResource trimPropertyConverter}}'''',\r\n        ''''@Name'''': ''''RecordIsEnclosed'''',\r\n        ''''@Grid.Column'''': ''''1'''',\r\n        ''''@Grid.Row'''': ''''6'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_TB}'''',\r\n        ''''@Text'''': ''''{Binding Assignee, Converter={StaticResource trimPropertyConverter}}'''',\r\n        ''''@Name'''': ''''RecordAssignee'''',\r\n        ''''@Grid.Column'''': ''''1'''',\r\n        ''''@Grid.Row'''': ''''7'''',\r\n        ''''@xmlns'''': ''''''''\r\n      }\r\n    ],\r\n    ''''toolkit:DatePicker'''': [\r\n      {\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_DP}'''',\r\n        ''''@Value'''': ''''{Binding DateCreated, Converter={StaticResource trimPropertyConverter}}'''',\r\n        ''''@Name'''': ''''RecordDateCreated'''',\r\n        ''''@Grid.Column'''': ''''1'''',\r\n        ''''@Grid.Row'''': ''''2''''\r\n      },\r\n      {\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_DP}'''',\r\n        ''''@Value'''': ''''{Binding DateDue, Converter={StaticResource trimPropertyConverter}}'''',\r\n        ''''@Name'''': ''''RecordDateDue'''',\r\n        ''''@Grid.Column'''': ''''1'''',\r\n        ''''@Grid.Row'''': ''''3''''\r\n      }\r\n    ],\r\n    ''''TextBlock'''': [\r\n      {\r\n        ''''@Grid.Column'''': ''''0'''',\r\n        ''''@Text'''': ''''Title (Free Text Part)'''',\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_LBL}'''',\r\n        ''''@Grid.Row'''': ''''0'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Grid.Column'''': ''''0'''',\r\n        ''''@Text'''': ''''External ID'''',\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_LBL}'''',\r\n        ''''@Grid.Row'''': ''''1'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Grid.Column'''': ''''0'''',\r\n        ''''@Text'''': ''''Date Created'''',\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_LBL}'''',\r\n        ''''@Grid.Row'''': ''''2'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Grid.Column'''': ''''0'''',\r\n        ''''@Text'''': ''''Date Due'''',\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_LBL}'''',\r\n        ''''@Grid.Row'''': ''''3'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Grid.Column'''': ''''0'''',\r\n        ''''@Text'''': ''''Author'''',\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_LBL}'''',\r\n        ''''@Grid.Row'''': ''''4'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Grid.Column'''': ''''0'''',\r\n        ''''@Text'''': ''''Container'''',\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_LBL}'''',\r\n        ''''@Grid.Row'''': ''''5'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Grid.Column'''': ''''0'''',\r\n        ''''@Text'''': ''''Enclosed?'''',\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_LBL}'''',\r\n        ''''@Grid.Row'''': ''''6'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Grid.Column'''': ''''0'''',\r\n        ''''@Text'''': ''''Assignee'''',\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_LBL}'''',\r\n        ''''@Grid.Row'''': ''''7'''',\r\n        ''''@xmlns'''': ''''''''\r\n      }\r\n    ]\r\n  }\r\n}''", span="2127-2282", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXNodeDefaultNamespace()", file="XmlNodeConverterTest.cs"];
m11_673 [label="StringAssert.AreEqual(expectedJson, json)", span="2284-2284", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXNodeDefaultNamespace()", file="XmlNodeConverterTest.cs"];
m11_674 [label="XNode node = JsonConvert.DeserializeXNode(json)", span="2286-2286", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXNodeDefaultNamespace()", file="XmlNodeConverterTest.cs"];
m11_675 [label="string xaml2 = node.ToString()", span="2288-2288", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXNodeDefaultNamespace()", file="XmlNodeConverterTest.cs"];
m11_676 [label="string expectedXaml = @''<Grid xmlns=''''http://schemas.microsoft.com/winfx/2006/xaml/presentation'''' xmlns:x=''''http://schemas.microsoft.com/winfx/2006/xaml'''' xmlns:toolkit=''''clr-namespace:Microsoft.Phone.Controls;assembly=Microsoft.Phone.Controls.Toolkit'''' Style=''''{StaticResource trimFormGrid}'''' x:Name=''''TrimObjectForm''''>\r\n  <Grid.ColumnDefinitions>\r\n    <ColumnDefinition Width=''''63*'''' />\r\n    <ColumnDefinition Width=''''320*'''' />\r\n  </Grid.ColumnDefinitions>\r\n  <Grid.RowDefinitions xmlns=''''''''>\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n  </Grid.RowDefinitions>\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding TypedTitle, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordTypedTitle'''' Grid.Column=''''1'''' Grid.Row=''''0'''' xmlns='''''''' />\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding ExternalReference, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordExternalReference'''' Grid.Column=''''1'''' Grid.Row=''''1'''' xmlns='''''''' />\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding Author, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordAuthor'''' Grid.Column=''''1'''' Grid.Row=''''4'''' xmlns='''''''' />\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding Container, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordContainer'''' Grid.Column=''''1'''' Grid.Row=''''5'''' xmlns='''''''' />\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding IsEnclosed, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordIsEnclosed'''' Grid.Column=''''1'''' Grid.Row=''''6'''' xmlns='''''''' />\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding Assignee, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordAssignee'''' Grid.Column=''''1'''' Grid.Row=''''7'''' xmlns='''''''' />\r\n  <toolkit:DatePicker Style=''''{StaticResource trimFormGrid_DP}'''' Value=''''{Binding DateCreated, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordDateCreated'''' Grid.Column=''''1'''' Grid.Row=''''2'''' />\r\n  <toolkit:DatePicker Style=''''{StaticResource trimFormGrid_DP}'''' Value=''''{Binding DateDue, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordDateDue'''' Grid.Column=''''1'''' Grid.Row=''''3'''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Title (Free Text Part)'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''0'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''External ID'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''1'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Date Created'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''2'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Date Due'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''3'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Author'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''4'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Container'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''5'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Enclosed?'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''6'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Assignee'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''7'''' xmlns='''''''' />\r\n</Grid>''", span="2290-2321", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXNodeDefaultNamespace()", file="XmlNodeConverterTest.cs"];
m11_677 [label="StringAssert.AreEqual(expectedXaml, xaml2)", span="2323-2323", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXNodeDefaultNamespace()", file="XmlNodeConverterTest.cs"];
m11_678 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXNodeDefaultNamespace()", span="2090-2090", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXNodeDefaultNamespace()", file="XmlNodeConverterTest.cs"];
m11_642 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializingBooleanValues()", span="2056-2056", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializingBooleanValues()", file="XmlNodeConverterTest.cs"];
m11_643 [label="MemoryStream ms = new MemoryStream(System.Text.Encoding.UTF8.GetBytes(@''{root:{''''@booleanType'''':true}}''))", span="2058-2058", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializingBooleanValues()", file="XmlNodeConverterTest.cs"];
m11_644 [label="MemoryStream xml = new MemoryStream()", span="2059-2059", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializingBooleanValues()", file="XmlNodeConverterTest.cs"];
m11_645 [label="JsonBodyToSoapXml(ms, xml)", span="2061-2061", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializingBooleanValues()", file="XmlNodeConverterTest.cs"];
m11_646 [label="string xmlString = System.Text.Encoding.UTF8.GetString(xml.ToArray())", span="2063-2063", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializingBooleanValues()", file="XmlNodeConverterTest.cs"];
m11_647 [label="Assert.AreEqual(@''﻿<?xml version=''''1.0'''' encoding=''''utf-8''''?><root booleanType=''''true'''' />'', xmlString)", span="2065-2065", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializingBooleanValues()", file="XmlNodeConverterTest.cs"];
m11_648 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializingBooleanValues()", span="2056-2056", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializingBooleanValues()", file="XmlNodeConverterTest.cs"];
m11_867 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeDateInElementText()", span="2922-2922", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeDateInElementText()", file="XmlNodeConverterTest.cs"];
m11_868 [label="Model model = new Model()", span="2924-2924", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeDateInElementText()", file="XmlNodeConverterTest.cs"];
m11_869 [label="model.Document = new XElement(''Value'', new XAttribute(''foo'', ''bar''))\r\n            {\r\n                Value = ''2001-01-01T11:11:11''\r\n            }", span="2925-2928", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeDateInElementText()", file="XmlNodeConverterTest.cs"];
m11_875 [label="serializer.Serialize(jsonWriter, model)", span="2941-2941", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeDateInElementText()", file="XmlNodeConverterTest.cs"];
m11_870 [label="var serializer = JsonSerializer.Create(new JsonSerializerSettings\r\n            {\r\n                Converters = new List<JsonConverter>(new[] { new XmlNodeConverter() })\r\n            })", span="2930-2933", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeDateInElementText()", file="XmlNodeConverterTest.cs"];
m11_871 [label="var json = new StringBuilder(1024)", span="2935-2935", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeDateInElementText()", file="XmlNodeConverterTest.cs"];
m11_879 [label="var document = (XDocument)serializer.Deserialize(jsonReader, typeof(XDocument))", span="2949-2949", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeDateInElementText()", file="XmlNodeConverterTest.cs"];
m11_872 [label="var stringWriter = new StringWriter(json, CultureInfo.InvariantCulture)", span="2937-2937", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeDateInElementText()", file="XmlNodeConverterTest.cs"];
m11_876 [label="Assert.AreEqual(@''{''''Document'''':{''''Value'''':{''''@foo'''':''''bar'''',''''#text'''':''''2001-01-01T11:11:11''''}}}'', json.ToString())", span="2943-2943", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeDateInElementText()", file="XmlNodeConverterTest.cs"];
m11_877 [label="var stringReader = new StringReader(json.ToString())", span="2946-2946", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeDateInElementText()", file="XmlNodeConverterTest.cs"];
m11_873 [label="var jsonWriter = new JsonTextWriter(stringWriter)", span="2938-2938", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeDateInElementText()", file="XmlNodeConverterTest.cs"];
m11_874 [label="jsonWriter.Formatting = Formatting.None", span="2940-2940", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeDateInElementText()", file="XmlNodeConverterTest.cs"];
m11_878 [label="var jsonReader = new JsonTextReader(stringReader)", span="2947-2947", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeDateInElementText()", file="XmlNodeConverterTest.cs"];
m11_880 [label="StringAssert.AreEqual(@''<Document>\r\n  <Value foo=''''bar''''>2001-01-01T11:11:11</Value>\r\n</Document>'', document.ToString())", span="2951-2953", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeDateInElementText()", file="XmlNodeConverterTest.cs"];
m11_881 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeDateInElementText()", span="2922-2922", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeDateInElementText()", file="XmlNodeConverterTest.cs"];
m11_205 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXmlWithNamespaceInChildrenAndNoValueInChildren()", span="454-454", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXmlWithNamespaceInChildrenAndNoValueInChildren()", file="XmlNodeConverterTest.cs"];
m11_206 [label="var xmlString = @''<root>\r\n                              <b xmlns='http://www.example.com/ns'/>\r\n                              <c>AAA</c>\r\n                              <test>adad</test>\r\n                              </root>''", span="456-460", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXmlWithNamespaceInChildrenAndNoValueInChildren()", file="XmlNodeConverterTest.cs"];
m11_207 [label="var xml = XElement.Parse(xmlString)", span="462-462", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXmlWithNamespaceInChildrenAndNoValueInChildren()", file="XmlNodeConverterTest.cs"];
m11_208 [label="var json1 = JsonConvert.SerializeXNode(xml)", span="464-464", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXmlWithNamespaceInChildrenAndNoValueInChildren()", file="XmlNodeConverterTest.cs"];
m11_210 [label="var equals = XElement.DeepEquals(xmlBack, xml)", span="467-467", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXmlWithNamespaceInChildrenAndNoValueInChildren()", file="XmlNodeConverterTest.cs"];
m11_209 [label="var xmlBack = JsonConvert.DeserializeObject<XElement>(json1)", span="465-465", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXmlWithNamespaceInChildrenAndNoValueInChildren()", file="XmlNodeConverterTest.cs"];
m11_211 [label="Assert.IsTrue(equals)", span="468-468", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXmlWithNamespaceInChildrenAndNoValueInChildren()", file="XmlNodeConverterTest.cs"];
m11_212 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXmlWithNamespaceInChildrenAndNoValueInChildren()", span="454-454", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXmlWithNamespaceInChildrenAndNoValueInChildren()", file="XmlNodeConverterTest.cs"];
m11_719 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXElementWithNamespaceInChildrenRootDontHaveNameSpace()", span="2637-2637", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXElementWithNamespaceInChildrenRootDontHaveNameSpace()", file="XmlNodeConverterTest.cs"];
m11_720 [label="var xmlString = @''<root>\r\n                              <b xmlns='http://www.example.com/ns'>Asd</b>\r\n                              <c>AAA</c>\r\n                              <test>adad</test>\r\n                              </root>''", span="2639-2643", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXElementWithNamespaceInChildrenRootDontHaveNameSpace()", file="XmlNodeConverterTest.cs"];
m11_721 [label="var xml = XElement.Parse(xmlString)", span="2645-2645", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXElementWithNamespaceInChildrenRootDontHaveNameSpace()", file="XmlNodeConverterTest.cs"];
m11_722 [label="var json1 = JsonConvert.SerializeXNode(xml)", span="2647-2647", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXElementWithNamespaceInChildrenRootDontHaveNameSpace()", file="XmlNodeConverterTest.cs"];
m11_724 [label="var equals = XElement.DeepEquals(xmlBack, xml)", span="2650-2650", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXElementWithNamespaceInChildrenRootDontHaveNameSpace()", file="XmlNodeConverterTest.cs"];
m11_723 [label="var xmlBack = JsonConvert.DeserializeObject<XElement>(json1)", span="2648-2648", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXElementWithNamespaceInChildrenRootDontHaveNameSpace()", file="XmlNodeConverterTest.cs"];
m11_725 [label="Assert.IsTrue(equals)", span="2651-2651", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXElementWithNamespaceInChildrenRootDontHaveNameSpace()", file="XmlNodeConverterTest.cs"];
m11_726 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXElementWithNamespaceInChildrenRootDontHaveNameSpace()", span="2637-2637", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXElementWithNamespaceInChildrenRootDontHaveNameSpace()", file="XmlNodeConverterTest.cs"];
m11_276 [label="Entry Unk.CreateAttribute", span="", cluster="Unk.CreateAttribute", file="XmlNodeConverterTest.cs"];
m11_120 [label="Entry Unk.Parse", span="", cluster="Unk.Parse", file="XmlNodeConverterTest.cs"];
m11_123 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXmlDocument()", span="248-248", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXmlDocument()", file="XmlNodeConverterTest.cs"];
m11_124 [label="string xml = @''<result xp_0:end=''''2014-08-15 13:12:11.9184'''' xp_0:start=''''2014-08-15 13:11:49.3140'''' xp_0:time_diff=''''22604.3836'''' xmlns:xp_0=''''Test1'''' p2:end=''''2014-08-15 13:13:49.5522'''' p2:start=''''2014-08-15 13:13:49.0268'''' p2:time_diff=''''525.4646'''' xmlns:p2=''''Test2'''' />''", span="250-250", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXmlDocument()", file="XmlNodeConverterTest.cs"];
m11_125 [label="XmlDocument d = new XmlDocument()", span="252-252", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXmlDocument()", file="XmlNodeConverterTest.cs"];
m11_126 [label="d.LoadXml(xml)", span="253-253", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXmlDocument()", file="XmlNodeConverterTest.cs"];
m11_130 [label="StringAssert.AreEqual(xml, doc.OuterXml)", span="272-272", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXmlDocument()", file="XmlNodeConverterTest.cs"];
m11_127 [label="string json = JsonConvert.SerializeObject(d, Formatting.Indented)", span="255-255", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXmlDocument()", file="XmlNodeConverterTest.cs"];
m11_128 [label="StringAssert.AreEqual(@''{\r\n  ''''result'''': {\r\n    ''''@xp_0:end'''': ''''2014-08-15 13:12:11.9184'''',\r\n    ''''@xp_0:start'''': ''''2014-08-15 13:11:49.3140'''',\r\n    ''''@xp_0:time_diff'''': ''''22604.3836'''',\r\n    ''''@xmlns:xp_0'''': ''''Test1'''',\r\n    ''''@p2:end'''': ''''2014-08-15 13:13:49.5522'''',\r\n    ''''@p2:start'''': ''''2014-08-15 13:13:49.0268'''',\r\n    ''''@p2:time_diff'''': ''''525.4646'''',\r\n    ''''@xmlns:p2'''': ''''Test2''''\r\n  }\r\n}'', json)", span="257-268", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXmlDocument()", file="XmlNodeConverterTest.cs"];
m11_129 [label="XmlDocument doc = JsonConvert.DeserializeObject<XmlDocument>(json)", span="270-270", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXmlDocument()", file="XmlNodeConverterTest.cs"];
m11_131 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXmlDocument()", span="248-248", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXmlDocument()", file="XmlNodeConverterTest.cs"];
m11_800 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Local()", span="2809-2809", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Local()", file="XmlNodeConverterTest.cs"];
m11_801 [label="DateTime dt = DateTime.Parse(''2014-01-23T00:00:00+01:00'')", span="2811-2811", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Local()", file="XmlNodeConverterTest.cs"];
m11_802 [label="string json = @''{''''CreatedDate'''': ''''2014-01-23T00:00:00+01:00''''}''", span="2813-2813", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Local()", file="XmlNodeConverterTest.cs"];
m11_804 [label="Assert.AreEqual(dt.ToString(''yyyy-MM-ddTHH:mm:sszzzzzzz'', CultureInfo.InvariantCulture), dxml.Root.Element(''CreatedDate'').Value)", span="2815-2815", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Local()", file="XmlNodeConverterTest.cs"];
m11_803 [label="var dxml = JsonConvert.DeserializeXNode(json, ''root'')", span="2814-2814", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Local()", file="XmlNodeConverterTest.cs"];
m11_805 [label="Console.WriteLine(''DateTimeToXml_Local: '' + dxml.Root.Element(''CreatedDate'').Value)", span="2817-2817", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Local()", file="XmlNodeConverterTest.cs"];
m11_806 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Local()", span="2809-2809", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Local()", file="XmlNodeConverterTest.cs"];
m11_473 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeComment()", span="1381-1381", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeComment()", file="XmlNodeConverterTest.cs"];
m11_474 [label="string xml = @''<span class=''''vevent''''>\r\n  <a class=''''url'''' href=''''http://www.web2con.com/''''><!-- Hi --><span>Text</span></a><!-- Hi! -->\r\n</span>''", span="1383-1385", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeComment()", file="XmlNodeConverterTest.cs"];
m11_475 [label="XmlDocument doc = new XmlDocument()", span="1386-1386", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeComment()", file="XmlNodeConverterTest.cs"];
m11_476 [label="doc.LoadXml(xml)", span="1387-1387", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeComment()", file="XmlNodeConverterTest.cs"];
m11_477 [label="string jsonText = SerializeXmlNode(doc)", span="1389-1389", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeComment()", file="XmlNodeConverterTest.cs"];
m11_478 [label="string expected = @''{\r\n  ''''span'''': {\r\n    ''''@class'''': ''''vevent'''',\r\n    ''''a'''': {\r\n      ''''@class'''': ''''url'''',\r\n      ''''@href'''': ''''http://www.web2con.com/''''/* Hi */,\r\n      ''''span'''': ''''Text''''\r\n    }/* Hi! */\r\n  }\r\n}''", span="1391-1400", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeComment()", file="XmlNodeConverterTest.cs"];
m11_479 [label="StringAssert.AreEqual(expected, jsonText)", span="1402-1402", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeComment()", file="XmlNodeConverterTest.cs"];
m11_480 [label="XmlDocument newDoc = (XmlDocument)DeserializeXmlNode(jsonText)", span="1404-1404", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeComment()", file="XmlNodeConverterTest.cs"];
m11_481 [label="Assert.AreEqual(@''<span class=''''vevent''''><a class=''''url'''' href=''''http://www.web2con.com/''''><!-- Hi --><span>Text</span></a><!-- Hi! --></span>'', newDoc.InnerXml)", span="1405-1405", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeComment()", file="XmlNodeConverterTest.cs"];
m11_482 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeComment()", span="1381-1381", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeComment()", file="XmlNodeConverterTest.cs"];
m11_763 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Serialize_XDocument_NoRoot()", span="2748-2748", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Serialize_XDocument_NoRoot()", file="XmlNodeConverterTest.cs"];
m11_764 [label="XDocument d = new XDocument()", span="2750-2750", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Serialize_XDocument_NoRoot()", file="XmlNodeConverterTest.cs"];
m11_765 [label="string json = JsonConvert.SerializeXNode(d)", span="2752-2752", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Serialize_XDocument_NoRoot()", file="XmlNodeConverterTest.cs"];
m11_766 [label="Assert.AreEqual(@''{}'', json)", span="2754-2754", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Serialize_XDocument_NoRoot()", file="XmlNodeConverterTest.cs"];
m11_767 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Serialize_XDocument_NoRoot()", span="2748-2748", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Serialize_XDocument_NoRoot()", file="XmlNodeConverterTest.cs"];
m11_67 [label="Entry System.IO.StringWriter.ToString()", span="0-0", cluster="System.IO.StringWriter.ToString()", file="XmlNodeConverterTest.cs"];
m11_320 [label="Entry Unk.Save", span="", cluster="Unk.Save", file="XmlNodeConverterTest.cs"];
m11_48 [label="Entry XmlNodeConverter.cstr", span="", cluster="XmlNodeConverter.cstr", file="XmlNodeConverterTest.cs"];
m11_353 [label="Entry Unk.WriteTo", span="", cluster="Unk.WriteTo", file="XmlNodeConverterTest.cs"];
m11_277 [label="Entry Unk.SetAttributeNode", span="", cluster="Unk.SetAttributeNode", file="XmlNodeConverterTest.cs"];
m11_613 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmtpyElementWithArrayAttributeShouldWriteAttributes()", span="1972-1972", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmtpyElementWithArrayAttributeShouldWriteAttributes()", file="XmlNodeConverterTest.cs"];
m11_614 [label="string xml = @''<?xml version=''''1.0'''' encoding=''''utf-8'''' ?>\r\n<root xmlns:json=''''http://james.newtonking.com/projects/json''''>\r\n<A>\r\n<B name=''''sample'''' json:Array=''''true''''/>\r\n<C></C>\r\n<C></C>\r\n</A>\r\n</root>''", span="1974-1981", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmtpyElementWithArrayAttributeShouldWriteAttributes()", file="XmlNodeConverterTest.cs"];
m11_615 [label="XmlDocument d = new XmlDocument()", span="1983-1983", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmtpyElementWithArrayAttributeShouldWriteAttributes()", file="XmlNodeConverterTest.cs"];
m11_616 [label="d.LoadXml(xml)", span="1984-1984", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmtpyElementWithArrayAttributeShouldWriteAttributes()", file="XmlNodeConverterTest.cs"];
m11_617 [label="string json = JsonConvert.SerializeXmlNode(d, Formatting.Indented)", span="1986-1986", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmtpyElementWithArrayAttributeShouldWriteAttributes()", file="XmlNodeConverterTest.cs"];
m11_618 [label="StringAssert.AreEqual(@''{\r\n  ''''?xml'''': {\r\n    ''''@version'''': ''''1.0'''',\r\n    ''''@encoding'''': ''''utf-8''''\r\n  },\r\n  ''''root'''': {\r\n    ''''A'''': {\r\n      ''''B'''': [\r\n        {\r\n          ''''@name'''': ''''sample''''\r\n        }\r\n      ],\r\n      ''''C'''': [\r\n        '''''''',\r\n        ''''''''\r\n      ]\r\n    }\r\n  }\r\n}'', json)", span="1988-2006", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmtpyElementWithArrayAttributeShouldWriteAttributes()", file="XmlNodeConverterTest.cs"];
m11_619 [label="XmlDocument d2 = JsonConvert.DeserializeXmlNode(json)", span="2008-2008", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmtpyElementWithArrayAttributeShouldWriteAttributes()", file="XmlNodeConverterTest.cs"];
m11_620 [label="StringAssert.AreEqual(@''<?xml version=''''1.0'''' encoding=''''utf-8''''?>\r\n<root>\r\n  <A>\r\n    <B name=''''sample'''' />\r\n    <C></C>\r\n    <C></C>\r\n  </A>\r\n</root>'', ToStringWithDeclaration(d2, true))", span="2010-2017", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmtpyElementWithArrayAttributeShouldWriteAttributes()", file="XmlNodeConverterTest.cs"];
m11_621 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmtpyElementWithArrayAttributeShouldWriteAttributes()", span="1972-1972", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmtpyElementWithArrayAttributeShouldWriteAttributes()", file="XmlNodeConverterTest.cs"];
m11_641 [label="Entry Newtonsoft.Json.JsonSerializer.Deserialize(Newtonsoft.Json.JsonReader, System.Type)", span="850-850", cluster="Newtonsoft.Json.JsonSerializer.Deserialize(Newtonsoft.Json.JsonReader, System.Type)", file="XmlNodeConverterTest.cs"];
m11_666 [label="Entry Unk.Add", span="", cluster="Unk.Add", file="XmlNodeConverterTest.cs"];
m11_834 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeElementExplicitAttributeNamespace()", span="2865-2865", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeElementExplicitAttributeNamespace()", file="XmlNodeConverterTest.cs"];
m11_835 [label="var original = XElement.Parse(''<MyElement xmlns=\''http://example.com\'' />'')", span="2867-2867", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeElementExplicitAttributeNamespace()", file="XmlNodeConverterTest.cs"];
m11_836 [label="Assert.AreEqual(@''<MyElement xmlns=''''http://example.com'''' />'', original.ToString())", span="2868-2868", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeElementExplicitAttributeNamespace()", file="XmlNodeConverterTest.cs"];
m11_837 [label="var json = JsonConvert.SerializeObject(original)", span="2870-2870", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeElementExplicitAttributeNamespace()", file="XmlNodeConverterTest.cs"];
m11_838 [label="Assert.AreEqual(@''{''''MyElement'''':{''''@xmlns'''':''''http://example.com''''}}'', json)", span="2871-2871", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeElementExplicitAttributeNamespace()", file="XmlNodeConverterTest.cs"];
m11_839 [label="var deserialized = JsonConvert.DeserializeObject<XElement>(json)", span="2873-2873", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeElementExplicitAttributeNamespace()", file="XmlNodeConverterTest.cs"];
m11_840 [label="Assert.AreEqual(@''<MyElement xmlns=''''http://example.com'''' />'', deserialized.ToString())", span="2874-2874", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeElementExplicitAttributeNamespace()", file="XmlNodeConverterTest.cs"];
m11_841 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeElementExplicitAttributeNamespace()", span="2865-2865", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeElementExplicitAttributeNamespace()", file="XmlNodeConverterTest.cs"];
m11_98 [label="Entry Newtonsoft.Json.JsonSerializer.CreateDefault(Newtonsoft.Json.JsonSerializerSettings)", span="615-615", cluster="Newtonsoft.Json.JsonSerializer.CreateDefault(Newtonsoft.Json.JsonSerializerSettings)", file="XmlNodeConverterTest.cs"];
m11_213 [label="Entry Unk.DeepEquals", span="", cluster="Unk.DeepEquals", file="XmlNodeConverterTest.cs"];
m11_279 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes_Encoding()", span="648-648", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes_Encoding()", file="XmlNodeConverterTest.cs"];
m11_280 [label="XmlNode node = DeserializeXmlNode(@''{\r\n  ''''xs!:Choice!'''': {\r\n    ''''@msdata:IsDataSet!'''': '''''''',\r\n    ''''@xmlns:xs!'''': ''''http://www.w3.org/2001/XMLSchema'''',\r\n    ''''@xmlns:msdata'''': ''''urn:schemas-microsoft-com:xml-msdata'''',\r\n    ''''?xml-stylesheet'''': ''''href=\''''classic.xsl\'''' type=\''''text/xml\'''''''',\r\n    ''''#cdata-section'''': ''''<Kiwi>true</Kiwi>''''\r\n  }\r\n}'')", span="650-658", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes_Encoding()", file="XmlNodeConverterTest.cs"];
m11_281 [label="Assert.AreEqual(@''<xs_x0021_:Choice_x0021_ msdata:IsDataSet_x0021_='''''''' xmlns:xs_x0021_=''''http://www.w3.org/2001/XMLSchema'''' xmlns:msdata=''''urn:schemas-microsoft-com:xml-msdata''''><?xml-stylesheet href=''''classic.xsl'''' type=''''text/xml''''?><![CDATA[<Kiwi>true</Kiwi>]]></xs_x0021_:Choice_x0021_>'', node.InnerXml)", span="660-660", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes_Encoding()", file="XmlNodeConverterTest.cs"];
m11_282 [label="string json = SerializeXmlNode(node)", span="662-662", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes_Encoding()", file="XmlNodeConverterTest.cs"];
m11_283 [label="StringAssert.AreEqual(@''{\r\n  ''''xs!:Choice!'''': {\r\n    ''''@msdata:IsDataSet!'''': '''''''',\r\n    ''''@xmlns:xs!'''': ''''http://www.w3.org/2001/XMLSchema'''',\r\n    ''''@xmlns:msdata'''': ''''urn:schemas-microsoft-com:xml-msdata'''',\r\n    ''''?xml-stylesheet'''': ''''href=\''''classic.xsl\'''' type=\''''text/xml\'''''''',\r\n    ''''#cdata-section'''': ''''<Kiwi>true</Kiwi>''''\r\n  }\r\n}'', json)", span="664-672", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes_Encoding()", file="XmlNodeConverterTest.cs"];
m11_284 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes_Encoding()", span="648-648", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes_Encoding()", file="XmlNodeConverterTest.cs"];
m11_97 [label="Entry Newtonsoft.Json.JsonSerializerSettings.JsonSerializerSettings()", span="429-429", cluster="Newtonsoft.Json.JsonSerializerSettings.JsonSerializerSettings()", file="XmlNodeConverterTest.cs"];
m11_95 [label="Entry Newtonsoft.Json.Linq.JObject.JObject()", span="87-87", cluster="Newtonsoft.Json.Linq.JObject.JObject()", file="XmlNodeConverterTest.cs"];
m11_564 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNull()", span="1747-1747", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNull()", file="XmlNodeConverterTest.cs"];
m11_565 [label="string json = @''{\r\n  ''''$id'''': ''''1'''',\r\n  ''''$values'''': null\r\n}''", span="1749-1752", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNull()", file="XmlNodeConverterTest.cs"];
m11_566 [label="XmlNode node = JsonConvert.DeserializeXmlNode(json, ''root'')", span="1754-1754", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNull()", file="XmlNodeConverterTest.cs"];
m11_570 [label="StringAssert.AreEqual(json, newJson)", span="1764-1764", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNull()", file="XmlNodeConverterTest.cs"];
m11_567 [label="string xml = GetIndentedInnerXml(node)", span="1755-1755", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNull()", file="XmlNodeConverterTest.cs"];
m11_569 [label="string newJson = JsonConvert.SerializeXmlNode(node, Formatting.Indented, true)", span="1762-1762", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNull()", file="XmlNodeConverterTest.cs"];
m11_568 [label="StringAssert.AreEqual(@''<?xml version=''''1.0'''' encoding=''''utf-16''''?>\r\n<root xmlns:json=''''http://james.newtonking.com/projects/json'''' json:id=''''1''''>\r\n  <values xmlns=''''http://james.newtonking.com/projects/json'''' />\r\n</root>'', xml)", span="1757-1760", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNull()", file="XmlNodeConverterTest.cs"];
m11_571 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNull()", span="1747-1747", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNull()", file="XmlNodeConverterTest.cs"];
m11_15 [label="Entry Unk.SerializeXmlNode", span="", cluster="Unk.SerializeXmlNode", file="XmlNodeConverterTest.cs"];
m11_383 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RootObjectMultipleProperties()", span="1051-1051", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RootObjectMultipleProperties()", file="XmlNodeConverterTest.cs"];
m11_384 [label="ExceptionAssert.Throws<JsonSerializationException>(\r\n                () => { XmlDocument newDoc = (XmlDocument)JsonConvert.DeserializeXmlNode(@''{Prop1:1,Prop2:2}''); },\r\n                ''JSON root object has multiple properties. The root object must have a single property in order to create a valid XML document. Consider specifying a DeserializeRootElementName. Path 'Prop2', line 1, position 15.'')", span="1053-1055", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RootObjectMultipleProperties()", file="XmlNodeConverterTest.cs"];
m11_385 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RootObjectMultipleProperties()", span="1051-1051", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RootObjectMultipleProperties()", file="XmlNodeConverterTest.cs"];
m11_271 [label="Entry Unk.Element", span="", cluster="Unk.Element", file="XmlNodeConverterTest.cs"];
m11_64 [label="Entry Unk.Read", span="", cluster="Unk.Read", file="XmlNodeConverterTest.cs"];
m11_362 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmptyNode()", span="987-987", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmptyNode()", file="XmlNodeConverterTest.cs"];
m11_363 [label="string xml = @''<?xml version=''''1.0'''' standalone=''''no''''?>\r\n			<root>\r\n			  <person id=''''1''''>\r\n				<name>Alan</name>\r\n				<url />\r\n			  </person>\r\n			  <person id=''''2''''>\r\n				<name>Louis</name>\r\n				<url>http://www.yahoo.com</url>\r\n			  </person>\r\n			</root>''", span="989-999", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmptyNode()", file="XmlNodeConverterTest.cs"];
m11_364 [label="XmlDocument doc = new XmlDocument()", span="1001-1001", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmptyNode()", file="XmlNodeConverterTest.cs"];
m11_365 [label="doc.LoadXml(xml)", span="1002-1002", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmptyNode()", file="XmlNodeConverterTest.cs"];
m11_366 [label="string jsonText = SerializeXmlNode(doc)", span="1004-1004", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmptyNode()", file="XmlNodeConverterTest.cs"];
m11_369 [label="Assert.AreEqual(doc.InnerXml, newDoc.InnerXml)", span="1029-1029", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmptyNode()", file="XmlNodeConverterTest.cs"];
m11_367 [label="StringAssert.AreEqual(@''{\r\n  ''''?xml'''': {\r\n    ''''@version'''': ''''1.0'''',\r\n    ''''@standalone'''': ''''no''''\r\n  },\r\n  ''''root'''': {\r\n    ''''person'''': [\r\n      {\r\n        ''''@id'''': ''''1'''',\r\n        ''''name'''': ''''Alan'''',\r\n        ''''url'''': null\r\n      },\r\n      {\r\n        ''''@id'''': ''''2'''',\r\n        ''''name'''': ''''Louis'''',\r\n        ''''url'''': ''''http://www.yahoo.com''''\r\n      }\r\n    ]\r\n  }\r\n}'', jsonText)", span="1006-1025", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmptyNode()", file="XmlNodeConverterTest.cs"];
m11_368 [label="XmlDocument newDoc = (XmlDocument)DeserializeXmlNode(jsonText)", span="1027-1027", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmptyNode()", file="XmlNodeConverterTest.cs"];
m11_370 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmptyNode()", span="987-987", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmptyNode()", file="XmlNodeConverterTest.cs"];
m11_312 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Utf8StringWriter.Utf8StringWriter(System.Text.StringBuilder)", span="799-799", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Utf8StringWriter.Utf8StringWriter(System.Text.StringBuilder)", file="XmlNodeConverterTest.cs"];
m11_313 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Utf8StringWriter.Utf8StringWriter(System.Text.StringBuilder)", span="799-799", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Utf8StringWriter.Utf8StringWriter(System.Text.StringBuilder)", file="XmlNodeConverterTest.cs"];
m11_163 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DecimalContainer.DecimalContainer()", span="351-351", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DecimalContainer.DecimalContainer()", file="XmlNodeConverterTest.cs"];
m11_143 [label="Entry Unk.ToArray", span="", cluster="Unk.ToArray", file="XmlNodeConverterTest.cs"];
m11_522 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", file="XmlNodeConverterTest.cs"];
m11_24 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string)", span="91-91", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string)", file="XmlNodeConverterTest.cs"];
m11_25 [label="return DeserializeXmlNode(json, null);", span="93-93", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string)", file="XmlNodeConverterTest.cs"];
m11_26 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string)", span="91-91", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string)", file="XmlNodeConverterTest.cs"];
m11_50 [label="Entry Unk.ReadJson", span="", cluster="Unk.ReadJson", file="XmlNodeConverterTest.cs"];
m11_294 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.XmlDocumentTypeSerialize()", span="692-692", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.XmlDocumentTypeSerialize()", file="XmlNodeConverterTest.cs"];
m11_295 [label="string xml = @''<?xml version=''''1.0'''' encoding=''''utf-8''''?><!DOCTYPE STOCKQUOTE PUBLIC ''''-//W3C//DTD StockQuote 1.5//EN'''' ''''http://www.idontexistnopenopewhatnope123.org/dtd/stockquote_1.5.dtd''''><STOCKQUOTE ROWCOUNT=''''2''''><RESULT><ROW><ASK>0</ASK><BID>0</BID><CHANGE>-16.310</CHANGE><COMPANYNAME>Dow Jones</COMPANYNAME><DATETIME>2014-04-17 15:50:37</DATETIME><DIVIDEND>0</DIVIDEND><EPS>0</EPS><EXCHANGE></EXCHANGE><HIGH>16460.490</HIGH><LASTDATETIME>2014-04-17 15:50:37</LASTDATETIME><LASTPRICE>16408.540</LASTPRICE><LOW>16368.140</LOW><OPEN>16424.140</OPEN><PCHANGE>-0.099</PCHANGE><PE>0</PE><PREVIOUSCLOSE>16424.850</PREVIOUSCLOSE><SHARES>0</SHARES><TICKER>DJII</TICKER><TRADES>0</TRADES><VOLUME>136188700</VOLUME><YEARHIGH>11309.000</YEARHIGH><YEARLOW>9302.280</YEARLOW><YIELD>0</YIELD></ROW><ROW><ASK>0</ASK><BID>0</BID><CHANGE>9.290</CHANGE><COMPANYNAME>NASDAQ</COMPANYNAME><DATETIME>2014-04-17 15:40:01</DATETIME><DIVIDEND>0</DIVIDEND><EPS>0</EPS><EXCHANGE></EXCHANGE><HIGH>4110.460</HIGH><LASTDATETIME>2014-04-17 15:40:01</LASTDATETIME><LASTPRICE>4095.520</LASTPRICE><LOW>4064.700</LOW><OPEN>4080.300</OPEN><PCHANGE>0.227</PCHANGE><PE>0</PE><PREVIOUSCLOSE>4086.230</PREVIOUSCLOSE><SHARES>0</SHARES><TICKER>COMP</TICKER><TRADES>0</TRADES><VOLUME>1784210100</VOLUME><YEARHIGH>4371.710</YEARHIGH><YEARLOW>3154.960</YEARLOW><YIELD>0</YIELD></ROW></RESULT><STATUS>Couldn't find ticker: SPIC?</STATUS><STATUSCODE>2</STATUSCODE></STOCKQUOTE>''", span="694-694", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.XmlDocumentTypeSerialize()", file="XmlNodeConverterTest.cs"];
m11_296 [label="string expected = @''{\r\n  ''''?xml'''': {\r\n    ''''@version'''': ''''1.0'''',\r\n    ''''@encoding'''': ''''utf-8''''\r\n  },\r\n  ''''!DOCTYPE'''': {\r\n    ''''@name'''': ''''STOCKQUOTE'''',\r\n    ''''@public'''': ''''-//W3C//DTD StockQuote 1.5//EN'''',\r\n    ''''@system'''': ''''http://www.idontexistnopenopewhatnope123.org/dtd/stockquote_1.5.dtd''''\r\n  },\r\n  ''''STOCKQUOTE'''': {\r\n    ''''@ROWCOUNT'''': ''''2'''',\r\n    ''''RESULT'''': {\r\n      ''''ROW'''': [\r\n        {\r\n          ''''ASK'''': ''''0'''',\r\n          ''''BID'''': ''''0'''',\r\n          ''''CHANGE'''': ''''-16.310'''',\r\n          ''''COMPANYNAME'''': ''''Dow Jones'''',\r\n          ''''DATETIME'''': ''''2014-04-17 15:50:37'''',\r\n          ''''DIVIDEND'''': ''''0'''',\r\n          ''''EPS'''': ''''0'''',\r\n          ''''EXCHANGE'''': '''''''',\r\n          ''''HIGH'''': ''''16460.490'''',\r\n          ''''LASTDATETIME'''': ''''2014-04-17 15:50:37'''',\r\n          ''''LASTPRICE'''': ''''16408.540'''',\r\n          ''''LOW'''': ''''16368.140'''',\r\n          ''''OPEN'''': ''''16424.140'''',\r\n          ''''PCHANGE'''': ''''-0.099'''',\r\n          ''''PE'''': ''''0'''',\r\n          ''''PREVIOUSCLOSE'''': ''''16424.850'''',\r\n          ''''SHARES'''': ''''0'''',\r\n          ''''TICKER'''': ''''DJII'''',\r\n          ''''TRADES'''': ''''0'''',\r\n          ''''VOLUME'''': ''''136188700'''',\r\n          ''''YEARHIGH'''': ''''11309.000'''',\r\n          ''''YEARLOW'''': ''''9302.280'''',\r\n          ''''YIELD'''': ''''0''''\r\n        },\r\n        {\r\n          ''''ASK'''': ''''0'''',\r\n          ''''BID'''': ''''0'''',\r\n          ''''CHANGE'''': ''''9.290'''',\r\n          ''''COMPANYNAME'''': ''''NASDAQ'''',\r\n          ''''DATETIME'''': ''''2014-04-17 15:40:01'''',\r\n          ''''DIVIDEND'''': ''''0'''',\r\n          ''''EPS'''': ''''0'''',\r\n          ''''EXCHANGE'''': '''''''',\r\n          ''''HIGH'''': ''''4110.460'''',\r\n          ''''LASTDATETIME'''': ''''2014-04-17 15:40:01'''',\r\n          ''''LASTPRICE'''': ''''4095.520'''',\r\n          ''''LOW'''': ''''4064.700'''',\r\n          ''''OPEN'''': ''''4080.300'''',\r\n          ''''PCHANGE'''': ''''0.227'''',\r\n          ''''PE'''': ''''0'''',\r\n          ''''PREVIOUSCLOSE'''': ''''4086.230'''',\r\n          ''''SHARES'''': ''''0'''',\r\n          ''''TICKER'''': ''''COMP'''',\r\n          ''''TRADES'''': ''''0'''',\r\n          ''''VOLUME'''': ''''1784210100'''',\r\n          ''''YEARHIGH'''': ''''4371.710'''',\r\n          ''''YEARLOW'''': ''''3154.960'''',\r\n          ''''YIELD'''': ''''0''''\r\n        }\r\n      ]\r\n    },\r\n    ''''STATUS'''': ''''Couldn't find ticker: SPIC?'''',\r\n    ''''STATUSCODE'''': ''''2''''\r\n  }\r\n}''", span="696-765", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.XmlDocumentTypeSerialize()", file="XmlNodeConverterTest.cs"];
m11_299 [label="doc1.LoadXml(xml)", span="769-769", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.XmlDocumentTypeSerialize()", file="XmlNodeConverterTest.cs"];
m11_303 [label="StringAssert.AreEqual(xml, ToStringWithDeclaration(doc11))", span="777-777", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.XmlDocumentTypeSerialize()", file="XmlNodeConverterTest.cs"];
m11_304 [label="XDocument doc2 = XDocument.Parse(xml)", span="780-780", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.XmlDocumentTypeSerialize()", file="XmlNodeConverterTest.cs"];
m11_308 [label="StringAssert.AreEqual(xml, ToStringWithDeclaration(doc22))", span="788-788", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.XmlDocumentTypeSerialize()", file="XmlNodeConverterTest.cs"];
m11_297 [label="XmlDocument doc1 = new XmlDocument()", span="767-767", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.XmlDocumentTypeSerialize()", file="XmlNodeConverterTest.cs"];
m11_301 [label="StringAssert.AreEqual(expected, json1)", span="773-773", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.XmlDocumentTypeSerialize()", file="XmlNodeConverterTest.cs"];
m11_306 [label="StringAssert.AreEqual(expected, json2)", span="784-784", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.XmlDocumentTypeSerialize()", file="XmlNodeConverterTest.cs"];
m11_298 [label="doc1.XmlResolver = null", span="768-768", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.XmlDocumentTypeSerialize()", file="XmlNodeConverterTest.cs"];
m11_300 [label="string json1 = JsonConvert.SerializeXmlNode(doc1, Formatting.Indented)", span="771-771", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.XmlDocumentTypeSerialize()", file="XmlNodeConverterTest.cs"];
m11_302 [label="XmlDocument doc11 = JsonConvert.DeserializeXmlNode(json1)", span="775-775", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.XmlDocumentTypeSerialize()", file="XmlNodeConverterTest.cs"];
m11_305 [label="string json2 = JsonConvert.SerializeXNode(doc2, Formatting.Indented)", span="782-782", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.XmlDocumentTypeSerialize()", file="XmlNodeConverterTest.cs"];
m11_307 [label="XDocument doc22 = JsonConvert.DeserializeXNode(json2)", span="786-786", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.XmlDocumentTypeSerialize()", file="XmlNodeConverterTest.cs"];
m11_309 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.XmlDocumentTypeSerialize()", span="692-692", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.XmlDocumentTypeSerialize()", file="XmlNodeConverterTest.cs"];
m11_75 [label="Entry Unk.DeserializeXNode", span="", cluster="Unk.DeserializeXNode", file="XmlNodeConverterTest.cs"];
m11_781 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Deserialize_XDocument_NoRootWithDeclaration()", span="2778-2778", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Deserialize_XDocument_NoRootWithDeclaration()", file="XmlNodeConverterTest.cs"];
m11_782 [label="XDocument d = JsonConvert.DeserializeXNode(@''{''''?xml'''':{''''@version'''':''''Version!'''',''''@encoding'''':''''Encoding!'''',''''@standalone'''':''''Standalone!''''}}'')", span="2780-2780", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Deserialize_XDocument_NoRootWithDeclaration()", file="XmlNodeConverterTest.cs"];
m11_783 [label="Assert.AreEqual(null, d.Root)", span="2782-2782", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Deserialize_XDocument_NoRootWithDeclaration()", file="XmlNodeConverterTest.cs"];
m11_784 [label="Assert.AreEqual(''Version!'', d.Declaration.Version)", span="2783-2783", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Deserialize_XDocument_NoRootWithDeclaration()", file="XmlNodeConverterTest.cs"];
m11_785 [label="Assert.AreEqual(''Encoding!'', d.Declaration.Encoding)", span="2784-2784", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Deserialize_XDocument_NoRootWithDeclaration()", file="XmlNodeConverterTest.cs"];
m11_786 [label="Assert.AreEqual(''Standalone!'', d.Declaration.Standalone)", span="2785-2785", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Deserialize_XDocument_NoRootWithDeclaration()", file="XmlNodeConverterTest.cs"];
m11_787 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Deserialize_XDocument_NoRootWithDeclaration()", span="2778-2778", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Deserialize_XDocument_NoRootWithDeclaration()", file="XmlNodeConverterTest.cs"];
m11_345 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.GetIndentedInnerXml(XmlNode)", span="946-946", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.GetIndentedInnerXml(XmlNode)", file="XmlNodeConverterTest.cs"];
m11_346 [label="XmlWriterSettings settings = new XmlWriterSettings()", span="948-948", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.GetIndentedInnerXml(XmlNode)", file="XmlNodeConverterTest.cs"];
m11_350 [label="node.WriteTo(writer)", span="955-955", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.GetIndentedInnerXml(XmlNode)", file="XmlNodeConverterTest.cs"];
m11_347 [label="settings.Indent = true", span="949-949", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.GetIndentedInnerXml(XmlNode)", file="XmlNodeConverterTest.cs"];
m11_348 [label="StringWriter sw = new StringWriter()", span="951-951", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.GetIndentedInnerXml(XmlNode)", file="XmlNodeConverterTest.cs"];
m11_349 [label="XmlWriter writer = XmlWriter.Create(sw, settings)", span="953-953", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.GetIndentedInnerXml(XmlNode)", file="XmlNodeConverterTest.cs"];
m11_351 [label="return sw.ToString();", span="958-958", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.GetIndentedInnerXml(XmlNode)", file="XmlNodeConverterTest.cs"];
m11_352 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.GetIndentedInnerXml(XmlNode)", span="946-946", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.GetIndentedInnerXml(XmlNode)", file="XmlNodeConverterTest.cs"];
m11_16 [label="Entry XmlNodeReader.cstr", span="", cluster="XmlNodeReader.cstr", file="XmlNodeConverterTest.cs"];
m11_668 [label="Entry Newtonsoft.Json.JsonSerializationException.JsonSerializationException(string)", span="52-52", cluster="Newtonsoft.Json.JsonSerializationException.JsonSerializationException(string)", file="XmlNodeConverterTest.cs"];
m11_556 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataWithNullValue()", span="1727-1727", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataWithNullValue()", file="XmlNodeConverterTest.cs"];
m11_557 [label="string json = @''{\r\n  ''''$id'''': null\r\n}''", span="1729-1731", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataWithNullValue()", file="XmlNodeConverterTest.cs"];
m11_558 [label="XmlNode node = JsonConvert.DeserializeXmlNode(json, ''root'')", span="1733-1733", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataWithNullValue()", file="XmlNodeConverterTest.cs"];
m11_559 [label="string xml = GetIndentedInnerXml(node)", span="1734-1734", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataWithNullValue()", file="XmlNodeConverterTest.cs"];
m11_561 [label="string newJson = JsonConvert.SerializeXmlNode(node, Formatting.Indented, true)", span="1739-1739", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataWithNullValue()", file="XmlNodeConverterTest.cs"];
m11_560 [label="StringAssert.AreEqual(@''<?xml version=''''1.0'''' encoding=''''utf-16''''?>\r\n<root xmlns:json=''''http://james.newtonking.com/projects/json'''' json:id='''''''' />'', xml)", span="1736-1737", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataWithNullValue()", file="XmlNodeConverterTest.cs"];
m11_562 [label="StringAssert.AreEqual(@''{\r\n  ''''$id'''': ''''''''\r\n}'', newJson)", span="1741-1743", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataWithNullValue()", file="XmlNodeConverterTest.cs"];
m11_563 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataWithNullValue()", span="1727-1727", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataWithNullValue()", file="XmlNodeConverterTest.cs"];
m11_310 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ToStringWithDeclaration(XmlDocument, bool)", span="816-816", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ToStringWithDeclaration(XmlDocument, bool)", file="XmlNodeConverterTest.cs"];
m11_322 [label="StringBuilder builder = new StringBuilder()", span="818-818", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ToStringWithDeclaration(XmlDocument, bool)", file="XmlNodeConverterTest.cs"];
m11_323 [label="var writer = XmlWriter.Create(new Utf8StringWriter(builder), new XmlWriterSettings { Indent = indent })", span="819-819", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ToStringWithDeclaration(XmlDocument, bool)", file="XmlNodeConverterTest.cs"];
m11_324 [label="doc.Save(writer)", span="821-821", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ToStringWithDeclaration(XmlDocument, bool)", file="XmlNodeConverterTest.cs"];
m11_325 [label="return builder.ToString();", span="823-823", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ToStringWithDeclaration(XmlDocument, bool)", file="XmlNodeConverterTest.cs"];
m11_326 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ToStringWithDeclaration(XmlDocument, bool)", span="816-816", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ToStringWithDeclaration(XmlDocument, bool)", file="XmlNodeConverterTest.cs"];
m11_467 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Encoding()", span="1366-1366", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Encoding()", file="XmlNodeConverterTest.cs"];
m11_468 [label="XmlDocument doc = new XmlDocument()", span="1368-1368", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Encoding()", file="XmlNodeConverterTest.cs"];
m11_469 [label="doc.LoadXml(@''<name>O''''Connor</name>'')", span="1370-1370", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Encoding()", file="XmlNodeConverterTest.cs"];
m11_470 [label="string json = SerializeXmlNode(doc)", span="1372-1372", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Encoding()", file="XmlNodeConverterTest.cs"];
m11_471 [label="StringAssert.AreEqual(@''{\r\n  ''''name'''': ''''O\''''Connor''''\r\n}'', json)", span="1373-1375", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Encoding()", file="XmlNodeConverterTest.cs"];
m11_472 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Encoding()", span="1366-1366", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Encoding()", file="XmlNodeConverterTest.cs"];
m11_651 [label="Entry System.IO.MemoryStream.MemoryStream()", span="0-0", cluster="System.IO.MemoryStream.MemoryStream()", file="XmlNodeConverterTest.cs"];
m11_580 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleItemArrayPropertySerialization()", span="1855-1855", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleItemArrayPropertySerialization()", file="XmlNodeConverterTest.cs"];
m11_581 [label="Product product = new Product()", span="1857-1857", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleItemArrayPropertySerialization()", file="XmlNodeConverterTest.cs"];
m11_582 [label="product.Name = ''Apple''", span="1859-1859", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleItemArrayPropertySerialization()", file="XmlNodeConverterTest.cs"];
m11_583 [label="product.ExpiryDate = new DateTime(2008, 12, 28, 0, 0, 0, DateTimeKind.Utc)", span="1860-1860", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleItemArrayPropertySerialization()", file="XmlNodeConverterTest.cs"];
m11_584 [label="product.Price = 3.99M", span="1861-1861", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleItemArrayPropertySerialization()", file="XmlNodeConverterTest.cs"];
m11_585 [label="product.Sizes = new string[] { ''Small'' }", span="1862-1862", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleItemArrayPropertySerialization()", file="XmlNodeConverterTest.cs"];
m11_586 [label="string output = JsonConvert.SerializeObject(product, new IsoDateTimeConverter())", span="1864-1864", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleItemArrayPropertySerialization()", file="XmlNodeConverterTest.cs"];
m11_587 [label="XmlDocument xmlProduct = JsonConvert.DeserializeXmlNode(output, ''product'', true)", span="1866-1866", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleItemArrayPropertySerialization()", file="XmlNodeConverterTest.cs"];
m11_588 [label="StringAssert.AreEqual(@''<product>\r\n  <Name>Apple</Name>\r\n  <ExpiryDate>2008-12-28T00:00:00Z</ExpiryDate>\r\n  <Price>3.99</Price>\r\n  <Sizes json:Array=''''true'''' xmlns:json=''''http://james.newtonking.com/projects/json''''>Small</Sizes>\r\n</product>'', IndentXml(xmlProduct.InnerXml))", span="1868-1873", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleItemArrayPropertySerialization()", file="XmlNodeConverterTest.cs"];
m11_589 [label="string output2 = JsonConvert.SerializeXmlNode(xmlProduct.DocumentElement, Formatting.Indented)", span="1875-1875", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleItemArrayPropertySerialization()", file="XmlNodeConverterTest.cs"];
m11_590 [label="StringAssert.AreEqual(@''{\r\n  ''''product'''': {\r\n    ''''Name'''': ''''Apple'''',\r\n    ''''ExpiryDate'''': ''''2008-12-28T00:00:00Z'''',\r\n    ''''Price'''': ''''3.99'''',\r\n    ''''Sizes'''': [\r\n      ''''Small''''\r\n    ]\r\n  }\r\n}'', output2)", span="1877-1886", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleItemArrayPropertySerialization()", file="XmlNodeConverterTest.cs"];
m11_591 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleItemArrayPropertySerialization()", span="1855-1855", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleItemArrayPropertySerialization()", file="XmlNodeConverterTest.cs"];
m11_828 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyNodeAndOmitRoot_XElement()", span="2853-2853", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyNodeAndOmitRoot_XElement()", file="XmlNodeConverterTest.cs"];
m11_829 [label="string xmlString = @''<myemptynode />''", span="2855-2855", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyNodeAndOmitRoot_XElement()", file="XmlNodeConverterTest.cs"];
m11_830 [label="var xml = XElement.Parse(xmlString)", span="2857-2857", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyNodeAndOmitRoot_XElement()", file="XmlNodeConverterTest.cs"];
m11_831 [label="string json = JsonConvert.SerializeXNode(xml, Formatting.Indented, true)", span="2859-2859", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyNodeAndOmitRoot_XElement()", file="XmlNodeConverterTest.cs"];
m11_832 [label="Assert.AreEqual(''null'', json)", span="2861-2861", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyNodeAndOmitRoot_XElement()", file="XmlNodeConverterTest.cs"];
m11_833 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyNodeAndOmitRoot_XElement()", span="2853-2853", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyNodeAndOmitRoot_XElement()", file="XmlNodeConverterTest.cs"];
m11_278 [label="Entry Unk.AppendChild", span="", cluster="Unk.AppendChild", file="XmlNodeConverterTest.cs"];
m11_20 [label="Entry Unk.MoveToContent", span="", cluster="Unk.MoveToContent", file="XmlNodeConverterTest.cs"];
m11_354 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleTextNode()", span="962-962", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleTextNode()", file="XmlNodeConverterTest.cs"];
m11_355 [label="string xml = @''<?xml version=''''1.0'''' standalone=''''no''''?>\r\n			<root>\r\n			  <person id=''''1''''>\r\n	  			<name>Alan</name>\r\n		  		<url>http://www.google.com</url>\r\n			  </person>\r\n			  <person id=''''2''''>\r\n			  	<name>Louis</name>\r\n				  <url>http://www.yahoo.com</url>\r\n			  </person>\r\n			</root>''", span="964-974", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleTextNode()", file="XmlNodeConverterTest.cs"];
m11_356 [label="XmlDocument doc = new XmlDocument()", span="976-976", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleTextNode()", file="XmlNodeConverterTest.cs"];
m11_357 [label="doc.LoadXml(xml)", span="977-977", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleTextNode()", file="XmlNodeConverterTest.cs"];
m11_358 [label="string jsonText = SerializeXmlNode(doc)", span="979-979", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleTextNode()", file="XmlNodeConverterTest.cs"];
m11_360 [label="Assert.AreEqual(doc.InnerXml, newDoc.InnerXml)", span="983-983", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleTextNode()", file="XmlNodeConverterTest.cs"];
m11_359 [label="XmlDocument newDoc = (XmlDocument)DeserializeXmlNode(jsonText)", span="981-981", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleTextNode()", file="XmlNodeConverterTest.cs"];
m11_361 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleTextNode()", span="962-962", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleTextNode()", file="XmlNodeConverterTest.cs"];
m11_398 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", span="1085-1085", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs"];
m11_399 [label="string arrayXml = @''<root xmlns:json=''''http://james.newtonking.com/projects/json''''>\r\n			  <person id=''''1''''>\r\n				  <name>Alan</name>\r\n				  <url>http://www.google.com</url>\r\n				  <role json:Array=''''true''''>Admin</role>\r\n			  </person>\r\n			</root>''", span="1087-1093", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs"];
m11_400 [label="XmlDocument arrayDoc = new XmlDocument()", span="1095-1095", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs"];
m11_401 [label="arrayDoc.LoadXml(arrayXml)", span="1096-1096", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs"];
m11_402 [label="string arrayJsonText = SerializeXmlNode(arrayDoc)", span="1098-1098", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs"];
m11_403 [label="string expected = @''{\r\n  ''''root'''': {\r\n    ''''person'''': {\r\n      ''''@id'''': ''''1'''',\r\n      ''''name'''': ''''Alan'''',\r\n      ''''url'''': ''''http://www.google.com'''',\r\n      ''''role'''': [\r\n        ''''Admin''''\r\n      ]\r\n    }\r\n  }\r\n}''", span="1099-1110", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs"];
m11_404 [label="StringAssert.AreEqual(expected, arrayJsonText)", span="1111-1111", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs"];
m11_405 [label="arrayXml = @''<root xmlns:json=''''http://james.newtonking.com/projects/json''''>\r\n			  <person id=''''1''''>\r\n				  <name>Alan</name>\r\n				  <url>http://www.google.com</url>\r\n				  <role json:Array=''''true''''>Admin1</role>\r\n				  <role json:Array=''''true''''>Admin2</role>\r\n			  </person>\r\n			</root>''", span="1113-1120", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs"];
m11_406 [label="arrayDoc = new XmlDocument()", span="1122-1122", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs"];
m11_407 [label="arrayDoc.LoadXml(arrayXml)", span="1123-1123", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs"];
m11_408 [label="arrayJsonText = SerializeXmlNode(arrayDoc)", span="1125-1125", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs"];
m11_409 [label="expected = @''{\r\n  ''''root'''': {\r\n    ''''person'''': {\r\n      ''''@id'''': ''''1'''',\r\n      ''''name'''': ''''Alan'''',\r\n      ''''url'''': ''''http://www.google.com'''',\r\n      ''''role'''': [\r\n        ''''Admin1'''',\r\n        ''''Admin2''''\r\n      ]\r\n    }\r\n  }\r\n}''", span="1126-1138", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs"];
m11_410 [label="StringAssert.AreEqual(expected, arrayJsonText)", span="1139-1139", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs"];
m11_411 [label="arrayXml = @''<root xmlns:json=''''http://james.newtonking.com/projects/json''''>\r\n			  <person id=''''1''''>\r\n				  <name>Alan</name>\r\n				  <url>http://www.google.com</url>\r\n				  <role json:Array=''''false''''>Admin1</role>\r\n			  </person>\r\n			</root>''", span="1141-1147", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs"];
m11_412 [label="arrayDoc = new XmlDocument()", span="1149-1149", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs"];
m11_413 [label="arrayDoc.LoadXml(arrayXml)", span="1150-1150", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs"];
m11_414 [label="arrayJsonText = SerializeXmlNode(arrayDoc)", span="1152-1152", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs"];
m11_415 [label="expected = @''{\r\n  ''''root'''': {\r\n    ''''person'''': {\r\n      ''''@id'''': ''''1'''',\r\n      ''''name'''': ''''Alan'''',\r\n      ''''url'''': ''''http://www.google.com'''',\r\n      ''''role'''': ''''Admin1''''\r\n    }\r\n  }\r\n}''", span="1153-1162", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs", color=green, community=0];
m11_416 [label="StringAssert.AreEqual(expected, arrayJsonText)", span="1163-1163", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs", color=green, community=0];
m11_417 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", span="1085-1085", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs"];
m11_45 [label="Entry Newtonsoft.Json.JsonTextReader.JsonTextReader(System.IO.TextReader)", span="75-75", cluster="Newtonsoft.Json.JsonTextReader.JsonTextReader(System.IO.TextReader)", file="XmlNodeConverterTest.cs"];
m11_451 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RoundTripNestedArrays()", span="1271-1271", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RoundTripNestedArrays()", file="XmlNodeConverterTest.cs"];
m11_452 [label="string json = @''{\r\n  ''''available_sizes'''': [\r\n    [\r\n      ''''assets/images/resized/0001/1070/11070v1-max-150x150.jpg'''',\r\n      ''''assets/images/resized/0001/1070/11070v1-max-150x150.jpg''''\r\n    ],\r\n    [\r\n      ''''assets/images/resized/0001/1070/11070v1-max-250x250.jpg'''',\r\n      ''''assets/images/resized/0001/1070/11070v1-max-250x250.jpg''''\r\n    ],\r\n    [\r\n      ''''assets/images/resized/0001/1070/11070v1-max-250x250.jpg''''\r\n    ]\r\n  ]\r\n}''", span="1273-1287", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RoundTripNestedArrays()", file="XmlNodeConverterTest.cs"];
m11_453 [label="XmlDocument newDoc = JsonConvert.DeserializeXmlNode(json, ''myRoot'', true)", span="1290-1290", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RoundTripNestedArrays()", file="XmlNodeConverterTest.cs"];
m11_455 [label="XDocument newXDoc = JsonConvert.DeserializeXNode(json, ''myRoot'', true)", span="1308-1308", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RoundTripNestedArrays()", file="XmlNodeConverterTest.cs"];
m11_458 [label="StringAssert.AreEqual(json, newJson)", span="1327-1327", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RoundTripNestedArrays()", file="XmlNodeConverterTest.cs"];
m11_454 [label="StringAssert.AreEqual(@''<myRoot>\r\n  <available_sizes json:Array=''''true'''' xmlns:json=''''http://james.newtonking.com/projects/json''''>\r\n    <available_sizes>assets/images/resized/0001/1070/11070v1-max-150x150.jpg</available_sizes>\r\n    <available_sizes>assets/images/resized/0001/1070/11070v1-max-150x150.jpg</available_sizes>\r\n  </available_sizes>\r\n  <available_sizes json:Array=''''true'''' xmlns:json=''''http://james.newtonking.com/projects/json''''>\r\n    <available_sizes>assets/images/resized/0001/1070/11070v1-max-250x250.jpg</available_sizes>\r\n    <available_sizes>assets/images/resized/0001/1070/11070v1-max-250x250.jpg</available_sizes>\r\n  </available_sizes>\r\n  <available_sizes json:Array=''''true'''' xmlns:json=''''http://james.newtonking.com/projects/json''''>\r\n    <available_sizes json:Array=''''true''''>assets/images/resized/0001/1070/11070v1-max-250x250.jpg</available_sizes>\r\n  </available_sizes>\r\n</myRoot>'', IndentXml(newDoc.InnerXml))", span="1292-1304", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RoundTripNestedArrays()", file="XmlNodeConverterTest.cs"];
m11_457 [label="string newJson = JsonConvert.SerializeXmlNode(newDoc, Formatting.Indented, true)", span="1326-1326", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RoundTripNestedArrays()", file="XmlNodeConverterTest.cs"];
m11_456 [label="StringAssert.AreEqual(@''<myRoot>\r\n  <available_sizes json:Array=''''true'''' xmlns:json=''''http://james.newtonking.com/projects/json''''>\r\n    <available_sizes>assets/images/resized/0001/1070/11070v1-max-150x150.jpg</available_sizes>\r\n    <available_sizes>assets/images/resized/0001/1070/11070v1-max-150x150.jpg</available_sizes>\r\n  </available_sizes>\r\n  <available_sizes json:Array=''''true'''' xmlns:json=''''http://james.newtonking.com/projects/json''''>\r\n    <available_sizes>assets/images/resized/0001/1070/11070v1-max-250x250.jpg</available_sizes>\r\n    <available_sizes>assets/images/resized/0001/1070/11070v1-max-250x250.jpg</available_sizes>\r\n  </available_sizes>\r\n  <available_sizes json:Array=''''true'''' xmlns:json=''''http://james.newtonking.com/projects/json''''>\r\n    <available_sizes json:Array=''''true''''>assets/images/resized/0001/1070/11070v1-max-250x250.jpg</available_sizes>\r\n  </available_sizes>\r\n</myRoot>'', IndentXml(newXDoc.ToString(SaveOptions.DisableFormatting)))", span="1310-1322", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RoundTripNestedArrays()", file="XmlNodeConverterTest.cs"];
m11_459 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RoundTripNestedArrays()", span="1271-1271", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RoundTripNestedArrays()", file="XmlNodeConverterTest.cs"];
m11_165 [label="Entry Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string, Newtonsoft.Json.JsonSerializerSettings)", span="766-766", cluster="Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string, Newtonsoft.Json.JsonSerializerSettings)", file="XmlNodeConverterTest.cs"];
m11_572 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmptyPropertyName()", span="1768-1768", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmptyPropertyName()", file="XmlNodeConverterTest.cs"];
m11_573 [label="string json = @''{\r\n  ''''8452309520V2'''': {\r\n    '''''''': {\r\n      ''''CLIENT'''': {\r\n        ''''ID_EXPIRATION_1'''': {\r\n          ''''VALUE'''': ''''12/12/2000'''',\r\n          ''''DATATYPE'''': ''''D'''',\r\n          ''''MSG'''': ''''Missing Identification Exp. Date 1''''\r\n        },\r\n        ''''ID_ISSUEDATE_1'''': {\r\n          ''''VALUE'''': '''''''',\r\n          ''''DATATYPE'''': ''''D'''',\r\n          ''''MSG'''': ''''Missing Identification Issue Date 1''''\r\n        }\r\n      }\r\n    },\r\n    ''''457463534534'''': {\r\n      ''''ACCOUNT'''': {\r\n        ''''FUNDING_SOURCE'''': {\r\n          ''''VALUE'''': ''''FS0'''',\r\n          ''''DATATYPE'''': ''''L'''',\r\n          ''''MSG'''': ''''Missing Source of Funds''''\r\n        }\r\n      }\r\n    }\r\n  }\r\n}{\r\n  ''''34534634535345'''': {\r\n    '''''''': {\r\n      ''''CLIENT'''': {\r\n        ''''ID_NUMBER_1'''': {\r\n          ''''VALUE'''': '''''''',\r\n          ''''DATATYPE'''': ''''S'''',\r\n          ''''MSG'''': ''''Missing Picture ID''''\r\n        },\r\n        ''''ID_EXPIRATION_1'''': {\r\n          ''''VALUE'''': ''''12/12/2000'''',\r\n          ''''DATATYPE'''': ''''D'''',\r\n          ''''MSG'''': ''''Missing Picture ID''''\r\n        },\r\n        ''''WALK_IN'''': {\r\n          ''''VALUE'''': '''''''',\r\n          ''''DATATYPE'''': ''''L'''',\r\n          ''''MSG'''': ''''Missing Walk in''''\r\n        },\r\n        ''''PERSONAL_MEETING'''': {\r\n          ''''VALUE'''': ''''PM1'''',\r\n          ''''DATATYPE'''': ''''L'''',\r\n          ''''MSG'''': ''''Missing Met Client in Person''''\r\n        },\r\n        ''''ID_ISSUEDATE_1'''': {\r\n          ''''VALUE'''': '''''''',\r\n          ''''DATATYPE'''': ''''D'''',\r\n          ''''MSG'''': ''''Missing Picture ID''''\r\n        },\r\n        ''''PHOTO_ID'''': {\r\n          ''''VALUE'''': '''''''',\r\n          ''''DATATYPE'''': ''''L'''',\r\n          ''''MSG'''': ''''Missing Picture ID''''\r\n        },\r\n        ''''ID_TYPE_1'''': {\r\n          ''''VALUE'''': '''''''',\r\n          ''''DATATYPE'''': ''''L'''',\r\n          ''''MSG'''': ''''Missing Picture ID''''\r\n        }\r\n      }\r\n    },\r\n    ''''45635624523'''': {\r\n      ''''ACCOUNT'''': {\r\n        ''''FUNDING_SOURCE'''': {\r\n          ''''VALUE'''': ''''FS1'''',\r\n          ''''DATATYPE'''': ''''L'''',\r\n          ''''MSG'''': ''''Missing Source of Funds''''\r\n        }\r\n      }\r\n    }\r\n  }\r\n}''", span="1770-1847", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmptyPropertyName()", file="XmlNodeConverterTest.cs"];
m11_574 [label="ExceptionAssert.Throws<JsonSerializationException>(\r\n                () => { DeserializeXmlNode(json); },\r\n                ''XmlNodeConverter cannot convert JSON with an empty property name to XML. Path '8452309520V2.', line 3, position 9.'')", span="1849-1851", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmptyPropertyName()", file="XmlNodeConverterTest.cs"];
m11_575 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmptyPropertyName()", span="1768-1768", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmptyPropertyName()", file="XmlNodeConverterTest.cs"];
m11_483 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeExample()", span="1409-1409", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeExample()", file="XmlNodeConverterTest.cs"];
m11_484 [label="string xml = @''<?xml version=''''1.0'''' standalone=''''no''''?>\r\n			<root>\r\n			  <person id=''''1''''>\r\n				<name>Alan</name>\r\n				<url>http://www.google.com</url>\r\n			  </person>\r\n			  <person id=''''2''''>\r\n				<name>Louis</name>\r\n				<url>http://www.yahoo.com</url>\r\n			  </person>\r\n			</root>''", span="1411-1421", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeExample()", file="XmlNodeConverterTest.cs"];
m11_485 [label="XmlDocument doc = new XmlDocument()", span="1423-1423", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeExample()", file="XmlNodeConverterTest.cs"];
m11_486 [label="doc.LoadXml(xml)", span="1424-1424", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeExample()", file="XmlNodeConverterTest.cs"];
m11_487 [label="string jsonText = SerializeXmlNode(doc)", span="1426-1426", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeExample()", file="XmlNodeConverterTest.cs"];
m11_491 [label="Assert.AreEqual(doc.InnerXml, newDoc.InnerXml)", span="1474-1474", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeExample()", file="XmlNodeConverterTest.cs"];
m11_488 [label="jsonText = JObject.Parse(jsonText).ToString()", span="1449-1449", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeExample()", file="XmlNodeConverterTest.cs"];
m11_489 [label="StringAssert.AreEqual(@''{\r\n  ''''?xml'''': {\r\n    ''''@version'''': ''''1.0'''',\r\n    ''''@standalone'''': ''''no''''\r\n  },\r\n  ''''root'''': {\r\n    ''''person'''': [\r\n      {\r\n        ''''@id'''': ''''1'''',\r\n        ''''name'''': ''''Alan'''',\r\n        ''''url'''': ''''http://www.google.com''''\r\n      },\r\n      {\r\n        ''''@id'''': ''''2'''',\r\n        ''''name'''': ''''Louis'''',\r\n        ''''url'''': ''''http://www.yahoo.com''''\r\n      }\r\n    ]\r\n  }\r\n}'', jsonText)", span="1451-1470", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeExample()", file="XmlNodeConverterTest.cs"];
m11_490 [label="XmlDocument newDoc = (XmlDocument)DeserializeXmlNode(jsonText)", span="1472-1472", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeExample()", file="XmlNodeConverterTest.cs"];
m11_492 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeExample()", span="1409-1409", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeExample()", file="XmlNodeConverterTest.cs"];
m11_679 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNodeDefaultNamespace()", span="2329-2329", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNodeDefaultNamespace()", file="XmlNodeConverterTest.cs"];
m11_680 [label="string xaml = @''<Grid xmlns=''''http://schemas.microsoft.com/winfx/2006/xaml/presentation'''' xmlns:x=''''http://schemas.microsoft.com/winfx/2006/xaml'''' xmlns:toolkit=''''clr-namespace:Microsoft.Phone.Controls;assembly=Microsoft.Phone.Controls.Toolkit'''' Style=''''{StaticResource trimFormGrid}'''' x:Name=''''TrimObjectForm''''>\r\n  <Grid.ColumnDefinitions>\r\n    <ColumnDefinition Width=''''63*'''' />\r\n    <ColumnDefinition Width=''''320*'''' />\r\n  </Grid.ColumnDefinitions>\r\n  <Grid.RowDefinitions xmlns=''''''''>\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n  </Grid.RowDefinitions>\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding TypedTitle, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordTypedTitle'''' Grid.Column=''''1'''' Grid.Row=''''0'''' xmlns='''''''' />\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding ExternalReference, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordExternalReference'''' Grid.Column=''''1'''' Grid.Row=''''1'''' xmlns='''''''' />\r\n  <toolkit:DatePicker Style=''''{StaticResource trimFormGrid_DP}'''' Value=''''{Binding DateCreated, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordDateCreated'''' Grid.Column=''''1'''' Grid.Row=''''2'''' />\r\n  <toolkit:DatePicker Style=''''{StaticResource trimFormGrid_DP}'''' Value=''''{Binding DateDue, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordDateDue'''' Grid.Column=''''1'''' Grid.Row=''''3'''' />\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding Author, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordAuthor'''' Grid.Column=''''1'''' Grid.Row=''''4'''' xmlns='''''''' />\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding Container, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordContainer'''' Grid.Column=''''1'''' Grid.Row=''''5'''' xmlns='''''''' />\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding IsEnclosed, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordIsEnclosed'''' Grid.Column=''''1'''' Grid.Row=''''6'''' xmlns='''''''' />\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding Assignee, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordAssignee'''' Grid.Column=''''1'''' Grid.Row=''''7'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Title (Free Text Part)'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''0'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''External ID'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''1'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Date Created'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''2'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Date Due'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''3'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Author'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''4'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Container'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''5'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Enclosed?'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''6'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Assignee'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''7'''' xmlns='''''''' />\r\n</Grid>''", span="2331-2362", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNodeDefaultNamespace()", file="XmlNodeConverterTest.cs"];
m11_681 [label="XmlDocument document = new XmlDocument()", span="2364-2364", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNodeDefaultNamespace()", file="XmlNodeConverterTest.cs"];
m11_682 [label="document.LoadXml(xaml)", span="2365-2365", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNodeDefaultNamespace()", file="XmlNodeConverterTest.cs"];
m11_683 [label="string json = JsonConvert.SerializeXmlNode(document, Formatting.Indented)", span="2367-2367", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNodeDefaultNamespace()", file="XmlNodeConverterTest.cs"];
m11_684 [label="string expectedJson = @''{\r\n  ''''Grid'''': {\r\n    ''''@xmlns'''': ''''http://schemas.microsoft.com/winfx/2006/xaml/presentation'''',\r\n    ''''@xmlns:x'''': ''''http://schemas.microsoft.com/winfx/2006/xaml'''',\r\n    ''''@xmlns:toolkit'''': ''''clr-namespace:Microsoft.Phone.Controls;assembly=Microsoft.Phone.Controls.Toolkit'''',\r\n    ''''@Style'''': ''''{StaticResource trimFormGrid}'''',\r\n    ''''@x:Name'''': ''''TrimObjectForm'''',\r\n    ''''Grid.ColumnDefinitions'''': {\r\n      ''''ColumnDefinition'''': [\r\n        {\r\n          ''''@Width'''': ''''63*''''\r\n        },\r\n        {\r\n          ''''@Width'''': ''''320*''''\r\n        }\r\n      ]\r\n    },\r\n    ''''Grid.RowDefinitions'''': {\r\n      ''''@xmlns'''': '''''''',\r\n      ''''RowDefinition'''': [\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null\r\n      ]\r\n    },\r\n    ''''TextBox'''': [\r\n      {\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_TB}'''',\r\n        ''''@Text'''': ''''{Binding TypedTitle, Converter={StaticResource trimPropertyConverter}}'''',\r\n        ''''@Name'''': ''''RecordTypedTitle'''',\r\n        ''''@Grid.Column'''': ''''1'''',\r\n        ''''@Grid.Row'''': ''''0'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_TB}'''',\r\n        ''''@Text'''': ''''{Binding ExternalReference, Converter={StaticResource trimPropertyConverter}}'''',\r\n        ''''@Name'''': ''''RecordExternalReference'''',\r\n        ''''@Grid.Column'''': ''''1'''',\r\n        ''''@Grid.Row'''': ''''1'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_TB}'''',\r\n        ''''@Text'''': ''''{Binding Author, Converter={StaticResource trimPropertyConverter}}'''',\r\n        ''''@Name'''': ''''RecordAuthor'''',\r\n        ''''@Grid.Column'''': ''''1'''',\r\n        ''''@Grid.Row'''': ''''4'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_TB}'''',\r\n        ''''@Text'''': ''''{Binding Container, Converter={StaticResource trimPropertyConverter}}'''',\r\n        ''''@Name'''': ''''RecordContainer'''',\r\n        ''''@Grid.Column'''': ''''1'''',\r\n        ''''@Grid.Row'''': ''''5'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_TB}'''',\r\n        ''''@Text'''': ''''{Binding IsEnclosed, Converter={StaticResource trimPropertyConverter}}'''',\r\n        ''''@Name'''': ''''RecordIsEnclosed'''',\r\n        ''''@Grid.Column'''': ''''1'''',\r\n        ''''@Grid.Row'''': ''''6'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_TB}'''',\r\n        ''''@Text'''': ''''{Binding Assignee, Converter={StaticResource trimPropertyConverter}}'''',\r\n        ''''@Name'''': ''''RecordAssignee'''',\r\n        ''''@Grid.Column'''': ''''1'''',\r\n        ''''@Grid.Row'''': ''''7'''',\r\n        ''''@xmlns'''': ''''''''\r\n      }\r\n    ],\r\n    ''''toolkit:DatePicker'''': [\r\n      {\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_DP}'''',\r\n        ''''@Value'''': ''''{Binding DateCreated, Converter={StaticResource trimPropertyConverter}}'''',\r\n        ''''@Name'''': ''''RecordDateCreated'''',\r\n        ''''@Grid.Column'''': ''''1'''',\r\n        ''''@Grid.Row'''': ''''2''''\r\n      },\r\n      {\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_DP}'''',\r\n        ''''@Value'''': ''''{Binding DateDue, Converter={StaticResource trimPropertyConverter}}'''',\r\n        ''''@Name'''': ''''RecordDateDue'''',\r\n        ''''@Grid.Column'''': ''''1'''',\r\n        ''''@Grid.Row'''': ''''3''''\r\n      }\r\n    ],\r\n    ''''TextBlock'''': [\r\n      {\r\n        ''''@Grid.Column'''': ''''0'''',\r\n        ''''@Text'''': ''''Title (Free Text Part)'''',\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_LBL}'''',\r\n        ''''@Grid.Row'''': ''''0'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Grid.Column'''': ''''0'''',\r\n        ''''@Text'''': ''''External ID'''',\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_LBL}'''',\r\n        ''''@Grid.Row'''': ''''1'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Grid.Column'''': ''''0'''',\r\n        ''''@Text'''': ''''Date Created'''',\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_LBL}'''',\r\n        ''''@Grid.Row'''': ''''2'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Grid.Column'''': ''''0'''',\r\n        ''''@Text'''': ''''Date Due'''',\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_LBL}'''',\r\n        ''''@Grid.Row'''': ''''3'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Grid.Column'''': ''''0'''',\r\n        ''''@Text'''': ''''Author'''',\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_LBL}'''',\r\n        ''''@Grid.Row'''': ''''4'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Grid.Column'''': ''''0'''',\r\n        ''''@Text'''': ''''Container'''',\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_LBL}'''',\r\n        ''''@Grid.Row'''': ''''5'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Grid.Column'''': ''''0'''',\r\n        ''''@Text'''': ''''Enclosed?'''',\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_LBL}'''',\r\n        ''''@Grid.Row'''': ''''6'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Grid.Column'''': ''''0'''',\r\n        ''''@Text'''': ''''Assignee'''',\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_LBL}'''',\r\n        ''''@Grid.Row'''': ''''7'''',\r\n        ''''@xmlns'''': ''''''''\r\n      }\r\n    ]\r\n  }\r\n}''", span="2369-2524", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNodeDefaultNamespace()", file="XmlNodeConverterTest.cs"];
m11_685 [label="StringAssert.AreEqual(expectedJson, json)", span="2526-2526", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNodeDefaultNamespace()", file="XmlNodeConverterTest.cs"];
m11_686 [label="XmlNode node = JsonConvert.DeserializeXmlNode(json)", span="2528-2528", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNodeDefaultNamespace()", file="XmlNodeConverterTest.cs"];
m11_687 [label="StringWriter sw = new StringWriter()", span="2530-2530", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNodeDefaultNamespace()", file="XmlNodeConverterTest.cs"];
m11_689 [label="node.WriteTo(writer)", span="2536-2536", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNodeDefaultNamespace()", file="XmlNodeConverterTest.cs"];
m11_688 [label="XmlWriter writer = XmlWriter.Create(sw, new XmlWriterSettings\r\n            {\r\n                Indent = true,\r\n                OmitXmlDeclaration = true\r\n            })", span="2531-2535", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNodeDefaultNamespace()", file="XmlNodeConverterTest.cs"];
m11_691 [label="string xaml2 = sw.ToString()", span="2539-2539", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNodeDefaultNamespace()", file="XmlNodeConverterTest.cs"];
m11_690 [label="writer.Flush()", span="2537-2537", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNodeDefaultNamespace()", file="XmlNodeConverterTest.cs"];
m11_692 [label="string expectedXaml = @''<Grid xmlns=''''http://schemas.microsoft.com/winfx/2006/xaml/presentation'''' xmlns:x=''''http://schemas.microsoft.com/winfx/2006/xaml'''' xmlns:toolkit=''''clr-namespace:Microsoft.Phone.Controls;assembly=Microsoft.Phone.Controls.Toolkit'''' Style=''''{StaticResource trimFormGrid}'''' x:Name=''''TrimObjectForm''''>\r\n  <Grid.ColumnDefinitions>\r\n    <ColumnDefinition Width=''''63*'''' />\r\n    <ColumnDefinition Width=''''320*'''' />\r\n  </Grid.ColumnDefinitions>\r\n  <Grid.RowDefinitions xmlns=''''''''>\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n  </Grid.RowDefinitions>\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding TypedTitle, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordTypedTitle'''' Grid.Column=''''1'''' Grid.Row=''''0'''' xmlns='''''''' />\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding ExternalReference, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordExternalReference'''' Grid.Column=''''1'''' Grid.Row=''''1'''' xmlns='''''''' />\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding Author, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordAuthor'''' Grid.Column=''''1'''' Grid.Row=''''4'''' xmlns='''''''' />\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding Container, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordContainer'''' Grid.Column=''''1'''' Grid.Row=''''5'''' xmlns='''''''' />\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding IsEnclosed, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordIsEnclosed'''' Grid.Column=''''1'''' Grid.Row=''''6'''' xmlns='''''''' />\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding Assignee, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordAssignee'''' Grid.Column=''''1'''' Grid.Row=''''7'''' xmlns='''''''' />\r\n  <toolkit:DatePicker Style=''''{StaticResource trimFormGrid_DP}'''' Value=''''{Binding DateCreated, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordDateCreated'''' Grid.Column=''''1'''' Grid.Row=''''2'''' />\r\n  <toolkit:DatePicker Style=''''{StaticResource trimFormGrid_DP}'''' Value=''''{Binding DateDue, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordDateDue'''' Grid.Column=''''1'''' Grid.Row=''''3'''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Title (Free Text Part)'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''0'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''External ID'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''1'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Date Created'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''2'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Date Due'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''3'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Author'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''4'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Container'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''5'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Enclosed?'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''6'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Assignee'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''7'''' xmlns='''''''' />\r\n</Grid>''", span="2541-2572", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNodeDefaultNamespace()", file="XmlNodeConverterTest.cs"];
m11_693 [label="StringAssert.AreEqual(expectedXaml, xaml2)", span="2574-2574", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNodeDefaultNamespace()", file="XmlNodeConverterTest.cs"];
m11_694 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNodeDefaultNamespace()", span="2329-2329", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNodeDefaultNamespace()", file="XmlNodeConverterTest.cs"];
m11_883 [label="Entry List<JsonConverter>.cstr", span="", cluster="List<JsonConverter>.cstr", file="XmlNodeConverterTest.cs"];
m11_495 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeExample()", span="1478-1478", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeExample()", file="XmlNodeConverterTest.cs"];
m11_496 [label="string json = @''{\r\n        ''''?xml'''': {\r\n          ''''@version'''': ''''1.0'''',\r\n          ''''@standalone'''': ''''no''''\r\n        },\r\n        ''''root'''': {\r\n          ''''person'''': [\r\n            {\r\n              ''''@id'''': ''''1'''',\r\n              ''''name'''': ''''Alan'''',\r\n              ''''url'''': ''''http://www.google.com''''\r\n            },\r\n            {\r\n              ''''@id'''': ''''2'''',\r\n              ''''name'''': ''''Louis'''',\r\n              ''''url'''': ''''http://www.yahoo.com''''\r\n            }\r\n          ]\r\n        }\r\n      }''", span="1480-1499", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeExample()", file="XmlNodeConverterTest.cs"];
m11_497 [label="XmlDocument doc = (XmlDocument)DeserializeXmlNode(json)", span="1501-1501", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeExample()", file="XmlNodeConverterTest.cs"];
m11_498 [label="StringAssert.AreEqual(@''<?xml version=''''1.0'''' standalone=''''no''''?><root><person id=''''1''''><name>Alan</name><url>http://www.google.com</url></person><person id=''''2''''><name>Louis</name><url>http://www.yahoo.com</url></person></root>'', doc.InnerXml)", span="1514-1514", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeExample()", file="XmlNodeConverterTest.cs"];
m11_499 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeExample()", span="1478-1478", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeExample()", file="XmlNodeConverterTest.cs"];
m11_718 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NullableXml.NullableXml()", span="2615-2615", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NullableXml.NullableXml()", file="XmlNodeConverterTest.cs"];
m11_100 [label="Entry Unk.Equals", span="", cluster="Unk.Equals", file="XmlNodeConverterTest.cs"];
m11_112 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXDocument()", span="219-219", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXDocument()", file="XmlNodeConverterTest.cs"];
m11_113 [label="string xml = @''<result xp_0:end=''''2014-08-15 13:12:11.9184'''' xp_0:start=''''2014-08-15 13:11:49.3140'''' xp_0:time_diff=''''22604.3836'''' xmlns:xp_0=''''Test1'''' p2:end=''''2014-08-15 13:13:49.5522'''' p2:start=''''2014-08-15 13:13:49.0268'''' p2:time_diff=''''525.4646'''' xmlns:p2=''''Test2'''' />''", span="221-221", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXDocument()", file="XmlNodeConverterTest.cs"];
m11_114 [label="XDocument d = XDocument.Parse(xml)", span="223-223", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXDocument()", file="XmlNodeConverterTest.cs"];
m11_118 [label="StringAssert.AreEqual(xml, doc.ToString())", span="242-242", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXDocument()", file="XmlNodeConverterTest.cs"];
m11_115 [label="string json = JsonConvert.SerializeObject(d, Formatting.Indented)", span="225-225", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXDocument()", file="XmlNodeConverterTest.cs"];
m11_116 [label="StringAssert.AreEqual(@''{\r\n  ''''result'''': {\r\n    ''''@xp_0:end'''': ''''2014-08-15 13:12:11.9184'''',\r\n    ''''@xp_0:start'''': ''''2014-08-15 13:11:49.3140'''',\r\n    ''''@xp_0:time_diff'''': ''''22604.3836'''',\r\n    ''''@xmlns:xp_0'''': ''''Test1'''',\r\n    ''''@p2:end'''': ''''2014-08-15 13:13:49.5522'''',\r\n    ''''@p2:start'''': ''''2014-08-15 13:13:49.0268'''',\r\n    ''''@p2:time_diff'''': ''''525.4646'''',\r\n    ''''@xmlns:p2'''': ''''Test2''''\r\n  }\r\n}'', json)", span="227-238", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXDocument()", file="XmlNodeConverterTest.cs"];
m11_117 [label="XDocument doc = JsonConvert.DeserializeObject<XDocument>(json)", span="240-240", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXDocument()", file="XmlNodeConverterTest.cs"];
m11_119 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXDocument()", span="219-219", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXDocument()", file="XmlNodeConverterTest.cs"];
m11_882 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Model.Model()", span="2916-2916", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Model.Model()", file="XmlNodeConverterTest.cs"];
m11_166 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeParseHandlingOffset()", span="386-386", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeParseHandlingOffset()", file="XmlNodeConverterTest.cs"];
m11_167 [label="DateTimeOffset d = new DateTimeOffset(2012, 12, 12, 12, 44, 1, TimeSpan.FromHours(12).Add(TimeSpan.FromMinutes(34)))", span="388-388", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeParseHandlingOffset()", file="XmlNodeConverterTest.cs"];
m11_168 [label="var x = new DateTimeOffsetContainer { Date = d }", span="389-389", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeParseHandlingOffset()", file="XmlNodeConverterTest.cs"];
m11_169 [label="var json = JsonConvert.SerializeObject(x, Formatting.Indented)", span="391-391", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeParseHandlingOffset()", file="XmlNodeConverterTest.cs"];
m11_175 [label="Assert.AreEqual(x.Date, x2.Date)", span="406-406", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeParseHandlingOffset()", file="XmlNodeConverterTest.cs"];
m11_170 [label="XDocument doc1 = JsonConvert.DeserializeObject<XDocument>(json, new JsonSerializerSettings\r\n            {\r\n                Converters = { new XmlNodeConverter() },\r\n                DateParseHandling = DateParseHandling.DateTimeOffset\r\n            })", span="393-397", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeParseHandlingOffset()", file="XmlNodeConverterTest.cs"];
m11_171 [label="var xml = doc1.ToString()", span="399-399", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeParseHandlingOffset()", file="XmlNodeConverterTest.cs"];
m11_173 [label="string json2 = JsonConvert.SerializeObject(doc1, Formatting.Indented)", span="402-402", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeParseHandlingOffset()", file="XmlNodeConverterTest.cs"];
m11_172 [label="Assert.AreEqual(''<Date>2012-12-12T12:44:01+12:34</Date>'', xml)", span="400-400", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeParseHandlingOffset()", file="XmlNodeConverterTest.cs"];
m11_174 [label="DateTimeOffsetContainer x2 = JsonConvert.DeserializeObject<DateTimeOffsetContainer>(json2)", span="404-404", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeParseHandlingOffset()", file="XmlNodeConverterTest.cs"];
m11_176 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeParseHandlingOffset()", span="386-386", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeParseHandlingOffset()", file="XmlNodeConverterTest.cs"];
m11_237 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", span="569-569", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs"];
m11_238 [label="XmlDocument doc = new XmlDocument()", span="571-571", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs"];
m11_239 [label="string jsonText", span="572-572", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs"];
m11_251 [label="XmlProcessingInstruction instruction = doc.CreateProcessingInstruction(''xml-stylesheet'', @''href=''''classic.xsl'''' type=''''text/xml'''''')", span="604-604", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs"];
m11_254 [label="XmlCDataSection cDataSection = doc.CreateCDataSection(''<Kiwi>true</Kiwi>'')", span="611-611", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs"];
m11_257 [label="XmlElement element = doc.CreateElement(''xs'', ''Choice'', ''http://www.w3.org/2001/XMLSchema'')", span="618-618", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs"];
m11_258 [label="element.SetAttributeNode(doc.CreateAttribute(''msdata'', ''IsDataSet'', ''urn:schemas-microsoft-com:xml-msdata''))", span="619-619", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs"];
m11_259 [label="XmlAttribute aa = doc.CreateAttribute(@''xmlns'', ''xs'', ''http://www.w3.org/2000/xmlns/'')", span="621-621", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs"];
m11_262 [label="aa = doc.CreateAttribute(@''xmlns'', ''msdata'', ''http://www.w3.org/2000/xmlns/'')", span="625-625", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs"];
m11_267 [label="doc.AppendChild(element)", span="632-632", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs"];
m11_240 [label="string xml = @''<?xml version=''''1.0'''' encoding=''''utf-8'''' ?>\r\n<xs:schema xs:id=''''SomeID'''' \r\n	xmlns='''''''' \r\n	xmlns:xs=''''http://www.w3.org/2001/XMLSchema'''' \r\n	xmlns:msdata=''''urn:schemas-microsoft-com:xml-msdata''''>\r\n	<xs:element name=''''MyDataSet'''' msdata:IsDataSet=''''true''''>\r\n	</xs:element>\r\n</xs:schema>''", span="574-581", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs"];
m11_241 [label="XmlDocument document = new XmlDocument()", span="583-583", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs"];
m11_242 [label="document.LoadXml(xml)", span="584-584", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs"];
m11_247 [label="XDocument d = XDocument.Parse(xml)", span="595-595", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs"];
m11_243 [label="XmlAttribute attribute = document.DocumentElement.ChildNodes[0].Attributes[''IsDataSet'', ''urn:schemas-microsoft-com:xml-msdata'']", span="587-587", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs"];
m11_244 [label="attribute.Value = ''true''", span="588-588", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs"];
m11_245 [label="jsonText = JsonConvert.SerializeXmlNode(attribute)", span="590-590", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs"];
m11_246 [label="Assert.AreEqual(@''{''''@msdata:IsDataSet'''':''''true''''}'', jsonText)", span="592-592", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs"];
m11_248 [label="XAttribute a = d.Root.Element(''{http://www.w3.org/2001/XMLSchema}element'').Attribute(''{urn:schemas-microsoft-com:xml-msdata}IsDataSet'')", span="596-596", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs"];
m11_249 [label="jsonText = JsonConvert.SerializeXNode(a)", span="598-598", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs"];
m11_250 [label="Assert.AreEqual(@''{''''@msdata:IsDataSet'''':''''true''''}'', jsonText)", span="600-600", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs"];
m11_252 [label="jsonText = JsonConvert.SerializeXmlNode(instruction)", span="606-606", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs"];
m11_265 [label="element.AppendChild(instruction)", span="629-629", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs"];
m11_253 [label="Assert.AreEqual(@''{''''?xml-stylesheet'''':''''href=\''''classic.xsl\'''' type=\''''text/xml\''''''''}'', jsonText)", span="608-608", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs"];
m11_255 [label="jsonText = JsonConvert.SerializeXmlNode(cDataSection)", span="613-613", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs"];
m11_266 [label="element.AppendChild(cDataSection)", span="630-630", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs"];
m11_256 [label="Assert.AreEqual(@''{''''#cdata-section'''':''''<Kiwi>true</Kiwi>''''}'', jsonText)", span="615-615", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs"];
m11_261 [label="element.SetAttributeNode(aa)", span="623-623", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs"];
m11_264 [label="element.SetAttributeNode(aa)", span="627-627", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs"];
m11_268 [label="jsonText = JsonConvert.SerializeXmlNode(element, Formatting.Indented)", span="634-634", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs"];
m11_260 [label="aa.Value = ''http://www.w3.org/2001/XMLSchema''", span="622-622", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs"];
m11_263 [label="aa.Value = ''urn:schemas-microsoft-com:xml-msdata''", span="626-626", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs"];
m11_269 [label="StringAssert.AreEqual(@''{\r\n  ''''xs:Choice'''': {\r\n    ''''@msdata:IsDataSet'''': '''''''',\r\n    ''''@xmlns:xs'''': ''''http://www.w3.org/2001/XMLSchema'''',\r\n    ''''@xmlns:msdata'''': ''''urn:schemas-microsoft-com:xml-msdata'''',\r\n    ''''?xml-stylesheet'''': ''''href=\''''classic.xsl\'''' type=\''''text/xml\'''''''',\r\n    ''''#cdata-section'''': ''''<Kiwi>true</Kiwi>''''\r\n  }\r\n}'', jsonText)", span="636-644", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs"];
m11_270 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", span="569-569", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs"];
m11_21 [label="Entry Unk.ReadFrom", span="", cluster="Unk.ReadFrom", file="XmlNodeConverterTest.cs"];
m11_142 [label="Entry Unk.>", span="", cluster="Unk.>", file="XmlNodeConverterTest.cs"];
m11_371 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.OtherElementDataTypes()", span="1033-1033", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.OtherElementDataTypes()", file="XmlNodeConverterTest.cs"];
m11_372 [label="string jsonText = @''{''''?xml'''':{''''@version'''':''''1.0'''',''''@standalone'''':''''no''''},''''root'''':{''''person'''':[{''''@id'''':''''1'''',''''Float'''':2.5,''''Integer'''':99},{''''Boolean'''':true,''''@id'''':''''2'''',''''date'''':''''\/Date(954374400000)\/''''}]}}''", span="1035-1035", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.OtherElementDataTypes()", file="XmlNodeConverterTest.cs"];
m11_373 [label="XmlDocument newDoc = (XmlDocument)DeserializeXmlNode(jsonText)", span="1037-1037", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.OtherElementDataTypes()", file="XmlNodeConverterTest.cs"];
m11_374 [label="string expected = @''<?xml version=''''1.0'''' standalone=''''no''''?><root><person id=''''1''''><Float>2.5</Float><Integer>99</Integer></person><person id=''''2''''><Boolean>true</Boolean><date>2000-03-30T00:00:00Z</date></person></root>''", span="1039-1039", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.OtherElementDataTypes()", file="XmlNodeConverterTest.cs"];
m11_375 [label="Assert.AreEqual(expected, newDoc.InnerXml)", span="1041-1041", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.OtherElementDataTypes()", file="XmlNodeConverterTest.cs"];
m11_376 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.OtherElementDataTypes()", span="1033-1033", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.OtherElementDataTypes()", file="XmlNodeConverterTest.cs"];
m11_769 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Deserialize_XDocument_NoRoot()", span="2758-2758", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Deserialize_XDocument_NoRoot()", file="XmlNodeConverterTest.cs"];
m11_770 [label="XDocument d = JsonConvert.DeserializeXNode(@''{}'')", span="2760-2760", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Deserialize_XDocument_NoRoot()", file="XmlNodeConverterTest.cs"];
m11_771 [label="Assert.AreEqual(null, d.Root)", span="2762-2762", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Deserialize_XDocument_NoRoot()", file="XmlNodeConverterTest.cs"];
m11_772 [label="Assert.AreEqual(null, d.Declaration)", span="2763-2763", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Deserialize_XDocument_NoRoot()", file="XmlNodeConverterTest.cs"];
m11_773 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Deserialize_XDocument_NoRoot()", span="2758-2758", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Deserialize_XDocument_NoRoot()", file="XmlNodeConverterTest.cs"];
m11_425 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesXDocument()", span="1179-1179", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesXDocument()", file="XmlNodeConverterTest.cs"];
m11_426 [label="string json = @''{''''count'''': 773840,''''photos'''': null}''", span="1181-1181", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesXDocument()", file="XmlNodeConverterTest.cs", color=green, community=0];
m11_427 [label="ExceptionAssert.Throws<JsonSerializationException>(\r\n                () => { JsonConvert.DeserializeXNode(json); },\r\n                ''JSON root object has multiple properties. The root object must have a single property in order to create a valid XML document. Consider specifying a DeserializeRootElementName. Path 'photos', line 1, position 26.'')", span="1183-1185", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesXDocument()", file="XmlNodeConverterTest.cs", color=green, community=0];
m11_428 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesXDocument()", span="1179-1179", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesXDocument()", file="XmlNodeConverterTest.cs"];
m11_523 [label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting, Newtonsoft.Json.JsonSerializerSettings)", span="618-618", cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting, Newtonsoft.Json.JsonSerializerSettings)", file="XmlNodeConverterTest.cs"];
m11_377 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NoRootObject()", span="1045-1045", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NoRootObject()", file="XmlNodeConverterTest.cs"];
m11_378 [label="ExceptionAssert.Throws<JsonSerializationException>(() => { XmlDocument newDoc = (XmlDocument)JsonConvert.DeserializeXmlNode(@''[1]''); }, ''XmlNodeConverter can only convert JSON that begins with an object.'')", span="1047-1047", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NoRootObject()", file="XmlNodeConverterTest.cs"];
m11_379 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NoRootObject()", span="1045-1045", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NoRootObject()", file="XmlNodeConverterTest.cs"];
m11_700 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializingXmlNamespaceScope()", span="2589-2589", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializingXmlNamespaceScope()", file="XmlNodeConverterTest.cs"];
m11_701 [label="var xmlString = @''<root xmlns=''''http://www.example.com/ns''''>\r\n  <a/>\r\n  <bns:b xmlns:bns=''''http://www.example.com/ns''''/>\r\n  <c/>\r\n</root>''", span="2591-2595", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializingXmlNamespaceScope()", file="XmlNodeConverterTest.cs"];
m11_702 [label="var xml = XElement.Parse(xmlString)", span="2598-2598", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializingXmlNamespaceScope()", file="XmlNodeConverterTest.cs"];
m11_706 [label="xml1.LoadXml(xmlString)", span="2606-2606", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializingXmlNamespaceScope()", file="XmlNodeConverterTest.cs"];
m11_703 [label="var json1 = JsonConvert.SerializeObject(xml)", span="2600-2600", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializingXmlNamespaceScope()", file="XmlNodeConverterTest.cs"];
m11_704 [label="Assert.AreEqual(@''{''''root'''':{''''@xmlns'''':''''http://www.example.com/ns'''',''''a'''':null,''''bns:b'''':{''''@xmlns:bns'''':''''http://www.example.com/ns''''},''''c'''':null}}'', json1)", span="2602-2602", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializingXmlNamespaceScope()", file="XmlNodeConverterTest.cs"];
m11_705 [label="var xml1 = new XmlDocument()", span="2605-2605", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializingXmlNamespaceScope()", file="XmlNodeConverterTest.cs"];
m11_707 [label="var json2 = JsonConvert.SerializeObject(xml1)", span="2608-2608", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializingXmlNamespaceScope()", file="XmlNodeConverterTest.cs"];
m11_708 [label="Assert.AreEqual(@''{''''root'''':{''''@xmlns'''':''''http://www.example.com/ns'''',''''a'''':null,''''bns:b'''':{''''@xmlns:bns'''':''''http://www.example.com/ns''''},''''c'''':null}}'', json2)", span="2610-2610", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializingXmlNamespaceScope()", file="XmlNodeConverterTest.cs"];
m11_709 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializingXmlNamespaceScope()", span="2589-2589", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializingXmlNamespaceScope()", file="XmlNodeConverterTest.cs"];
m11_794 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Utc()", span="2799-2799", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Utc()", file="XmlNodeConverterTest.cs"];
m11_795 [label="string json = @''{''''CreatedDate'''': ''''2014-01-23T00:00:00Z''''}''", span="2801-2801", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Utc()", file="XmlNodeConverterTest.cs"];
m11_796 [label="var dxml = JsonConvert.DeserializeXNode(json, ''root'')", span="2802-2802", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Utc()", file="XmlNodeConverterTest.cs"];
m11_797 [label="Assert.AreEqual(''2014-01-23T00:00:00Z'', dxml.Root.Element(''CreatedDate'').Value)", span="2803-2803", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Utc()", file="XmlNodeConverterTest.cs"];
m11_798 [label="Console.WriteLine(''DateTimeToXml_Utc: '' + dxml.Root.Element(''CreatedDate'').Value)", span="2805-2805", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Utc()", file="XmlNodeConverterTest.cs"];
m11_799 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Utc()", span="2799-2799", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Utc()", file="XmlNodeConverterTest.cs"];
m11_17 [label="Entry Unk.Load", span="", cluster="Unk.Load", file="XmlNodeConverterTest.cs"];
m11_494 [label="Entry Newtonsoft.Json.Linq.JToken.ToString()", span="422-422", cluster="Newtonsoft.Json.Linq.JToken.ToString()", file="XmlNodeConverterTest.cs"];
m11_887 [label="Entry Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter, object)", span="1042-1042", cluster="Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter, object)", file="XmlNodeConverterTest.cs"];
m11_49 [label="Entry Newtonsoft.Json.JsonSerializer.JsonSerializer()", span="530-530", cluster="Newtonsoft.Json.JsonSerializer.JsonSerializer()", file="XmlNodeConverterTest.cs"];
m11_640 [label="Entry Newtonsoft.Json.Linq.JToken.CreateReader()", span="1886-1886", cluster="Newtonsoft.Json.Linq.JToken.CreateReader()", file="XmlNodeConverterTest.cs"];
m11_638 [label="Entry Newtonsoft.Json.Linq.JObject.FromObject(object)", span="442-442", cluster="Newtonsoft.Json.Linq.JObject.FromObject(object)", file="XmlNodeConverterTest.cs"];
m11_108 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Foo.Foo()", span="201-201", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Foo.Foo()", file="XmlNodeConverterTest.cs"];
m11_432 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesAddRootElement()", span="1190-1190", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesAddRootElement()", file="XmlNodeConverterTest.cs"];
m11_433 [label="string json = @''{''''count'''': 773840,''''photos'''': 773840}''", span="1192-1192", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesAddRootElement()", file="XmlNodeConverterTest.cs"];
m11_434 [label="XmlDocument newDoc = JsonConvert.DeserializeXmlNode(json, ''myRoot'')", span="1195-1195", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesAddRootElement()", file="XmlNodeConverterTest.cs"];
m11_436 [label="XDocument newXDoc = JsonConvert.DeserializeXNode(json, ''myRoot'')", span="1201-1201", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesAddRootElement()", file="XmlNodeConverterTest.cs"];
m11_435 [label="Assert.AreEqual(@''<myRoot><count>773840</count><photos>773840</photos></myRoot>'', newDoc.InnerXml)", span="1197-1197", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesAddRootElement()", file="XmlNodeConverterTest.cs"];
m11_437 [label="Assert.AreEqual(@''<myRoot><count>773840</count><photos>773840</photos></myRoot>'', newXDoc.ToString(SaveOptions.DisableFormatting))", span="1203-1203", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesAddRootElement()", file="XmlNodeConverterTest.cs"];
m11_438 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesAddRootElement()", span="1190-1190", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesAddRootElement()", file="XmlNodeConverterTest.cs"];
m11_76 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNonKnownDollarProperty()", span="163-163", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNonKnownDollarProperty()", file="XmlNodeConverterTest.cs"];
m11_77 [label="string json1 = @''{''''$JELLY'''':''''test''''}''", span="165-165", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNonKnownDollarProperty()", file="XmlNodeConverterTest.cs"];
m11_78 [label="var doc = JsonConvert.DeserializeXNode(json1)", span="167-167", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNonKnownDollarProperty()", file="XmlNodeConverterTest.cs"];
m11_82 [label="Assert.AreEqual(json1, json2)", span="175-175", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNonKnownDollarProperty()", file="XmlNodeConverterTest.cs"];
m11_79 [label="Console.WriteLine(doc.ToString())", span="169-169", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNonKnownDollarProperty()", file="XmlNodeConverterTest.cs"];
m11_80 [label="Assert.AreEqual(@''<_x0024_JELLY>test</_x0024_JELLY>'', doc.ToString())", span="171-171", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNonKnownDollarProperty()", file="XmlNodeConverterTest.cs"];
m11_81 [label="var json2 = JsonConvert.SerializeXNode(doc)", span="173-173", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNonKnownDollarProperty()", file="XmlNodeConverterTest.cs"];
m11_83 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNonKnownDollarProperty()", span="163-163", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNonKnownDollarProperty()", file="XmlNodeConverterTest.cs"];
m11_809 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Unspecified_Precision()", span="2821-2821", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Unspecified_Precision()", file="XmlNodeConverterTest.cs"];
m11_810 [label="string json = @''{''''CreatedDate'''': ''''2014-01-23T00:00:00.1234567''''}''", span="2823-2823", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Unspecified_Precision()", file="XmlNodeConverterTest.cs"];
m11_811 [label="var dxml = JsonConvert.DeserializeXNode(json, ''root'')", span="2824-2824", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Unspecified_Precision()", file="XmlNodeConverterTest.cs"];
m11_812 [label="Assert.AreEqual(''2014-01-23T00:00:00.1234567'', dxml.Root.Element(''CreatedDate'').Value)", span="2825-2825", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Unspecified_Precision()", file="XmlNodeConverterTest.cs"];
m11_813 [label="Console.WriteLine(''DateTimeToXml_Unspecified: '' + dxml.Root.Element(''CreatedDate'').Value)", span="2827-2827", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Unspecified_Precision()", file="XmlNodeConverterTest.cs"];
m11_814 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Unspecified_Precision()", span="2821-2821", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Unspecified_Precision()", file="XmlNodeConverterTest.cs"];
m11_151 [label="Entry Unk.Nodes", span="", cluster="Unk.Nodes", file="XmlNodeConverterTest.cs"];
m11_450 [label="Entry System.Console.WriteLine(string)", span="0-0", cluster="System.Console.WriteLine(string)", file="XmlNodeConverterTest.cs"];
m11_63 [label="Entry XmlWriterSettings.cstr", span="", cluster="XmlWriterSettings.cstr", file="XmlNodeConverterTest.cs"];
m11_144 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXElement()", span="316-316", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXElement()", file="XmlNodeConverterTest.cs"];
m11_145 [label="string xml = @''<payload>\r\n    <Country>6</Country>\r\n    <FinancialTransactionApprovalRequestUID>79</FinancialTransactionApprovalRequestUID>\r\n    <TransactionStatus>Approved</TransactionStatus>\r\n    <StatusChangeComment></StatusChangeComment>\r\n    <RequestedBy>Someone</RequestedBy>\r\n</payload>''", span="318-324", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXElement()", file="XmlNodeConverterTest.cs"];
m11_146 [label="var xmlDocument = XDocument.Parse(xml)", span="326-326", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXElement()", file="XmlNodeConverterTest.cs"];
m11_147 [label="var result = xmlDocument.Root.Nodes().ToArray()", span="328-328", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXElement()", file="XmlNodeConverterTest.cs"];
m11_148 [label="var json = JsonConvert.SerializeObject(result, Formatting.Indented)", span="330-330", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXElement()", file="XmlNodeConverterTest.cs"];
m11_149 [label="StringAssert.AreEqual(@''[\r\n  {\r\n    ''''Country'''': ''''6''''\r\n  },\r\n  {\r\n    ''''FinancialTransactionApprovalRequestUID'''': ''''79''''\r\n  },\r\n  {\r\n    ''''TransactionStatus'''': ''''Approved''''\r\n  },\r\n  {\r\n    ''''StatusChangeComment'''': ''''''''\r\n  },\r\n  {\r\n    ''''RequestedBy'''': ''''Someone''''\r\n  }\r\n]'', json)", span="332-348", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXElement()", file="XmlNodeConverterTest.cs"];
m11_150 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXElement()", span="316-316", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXElement()", file="XmlNodeConverterTest.cs"];
m11_637 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="XmlNodeConverterTest.cs"];
m11_23 [label="Entry Unk.AreEqual", span="", cluster="Unk.AreEqual", file="XmlNodeConverterTest.cs"];
m11_189 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyDocument()", span="427-427", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyDocument()", file="XmlNodeConverterTest.cs"];
m11_190 [label="XmlDocument doc = new XmlDocument()", span="429-429", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyDocument()", file="XmlNodeConverterTest.cs"];
m11_191 [label="doc.LoadXml(''<root />'')", span="430-430", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyDocument()", file="XmlNodeConverterTest.cs"];
m11_192 [label="string json = JsonConvert.SerializeXmlNode(doc, Formatting.Indented, true)", span="432-432", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyDocument()", file="XmlNodeConverterTest.cs"];
m11_193 [label="Assert.AreEqual(''null'', json)", span="433-433", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyDocument()", file="XmlNodeConverterTest.cs"];
m11_194 [label="doc = new XmlDocument()", span="435-435", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyDocument()", file="XmlNodeConverterTest.cs"];
m11_195 [label="doc.LoadXml(''<root></root>'')", span="436-436", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyDocument()", file="XmlNodeConverterTest.cs"];
m11_196 [label="json = JsonConvert.SerializeXmlNode(doc, Formatting.Indented, true)", span="438-438", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyDocument()", file="XmlNodeConverterTest.cs"];
m11_197 [label="Assert.AreEqual(@'''''''''''', json)", span="439-439", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyDocument()", file="XmlNodeConverterTest.cs"];
m11_198 [label="XDocument doc1 = XDocument.Parse(''<root />'')", span="441-441", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyDocument()", file="XmlNodeConverterTest.cs"];
m11_199 [label="json = JsonConvert.SerializeXNode(doc1, Formatting.Indented, true)", span="443-443", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyDocument()", file="XmlNodeConverterTest.cs"];
m11_200 [label="Assert.AreEqual(''null'', json)", span="444-444", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyDocument()", file="XmlNodeConverterTest.cs"];
m11_201 [label="doc1 = XDocument.Parse(''<root></root>'')", span="446-446", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyDocument()", file="XmlNodeConverterTest.cs"];
m11_202 [label="json = JsonConvert.SerializeXNode(doc1, Formatting.Indented, true)", span="448-448", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyDocument()", file="XmlNodeConverterTest.cs"];
m11_203 [label="Assert.AreEqual(@'''''''''''', json)", span="449-449", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyDocument()", file="XmlNodeConverterTest.cs"];
m11_204 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyDocument()", span="427-427", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyDocument()", file="XmlNodeConverterTest.cs"];
m11_101 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXElement()", span="207-207", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXElement()", file="XmlNodeConverterTest.cs"];
m11_102 [label="Foo foo = new Foo { Bar = null }", span="209-209", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXElement()", file="XmlNodeConverterTest.cs"];
m11_103 [label="string json = JsonConvert.SerializeObject(foo)", span="210-210", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXElement()", file="XmlNodeConverterTest.cs"];
m11_104 [label="Assert.AreEqual(@''{''''Bar'''':null}'', json)", span="212-212", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXElement()", file="XmlNodeConverterTest.cs"];
m11_105 [label="Foo foo2 = JsonConvert.DeserializeObject<Foo>(json)", span="213-213", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXElement()", file="XmlNodeConverterTest.cs"];
m11_106 [label="Assert.IsNull(foo2.Bar)", span="215-215", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXElement()", file="XmlNodeConverterTest.cs"];
m11_107 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXElement()", span="207-207", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXElement()", file="XmlNodeConverterTest.cs"];
m11_807 [label="Entry System.DateTime.Parse(string)", span="0-0", cluster="System.DateTime.Parse(string)", file="XmlNodeConverterTest.cs"];
m11_51 [label="Entry Unk.ToString", span="", cluster="Unk.ToString", file="XmlNodeConverterTest.cs"];
m11_18 [label="Entry XAttribute.cstr", span="", cluster="XAttribute.cstr", file="XmlNodeConverterTest.cs"];
m11_710 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeNullableXml()", span="2623-2623", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeNullableXml()", file="XmlNodeConverterTest.cs"];
m11_711 [label="var xml = new NullableXml { Name = ''test'', notNull = XElement.Parse(''<root>test</root>'') }", span="2625-2625", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeNullableXml()", file="XmlNodeConverterTest.cs"];
m11_712 [label="var json = JsonConvert.SerializeObject(xml)", span="2626-2626", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeNullableXml()", file="XmlNodeConverterTest.cs"];
m11_714 [label="Assert.AreEqual(xml.Name, w2.Name)", span="2629-2629", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeNullableXml()", file="XmlNodeConverterTest.cs"];
m11_715 [label="Assert.AreEqual(xml.isNull, w2.isNull)", span="2630-2630", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeNullableXml()", file="XmlNodeConverterTest.cs"];
m11_716 [label="Assert.AreEqual(xml.notNull.ToString(), w2.notNull.ToString())", span="2631-2631", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeNullableXml()", file="XmlNodeConverterTest.cs"];
m11_713 [label="var w2 = JsonConvert.DeserializeObject<NullableXml>(json)", span="2628-2628", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeNullableXml()", file="XmlNodeConverterTest.cs"];
m11_717 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeNullableXml()", span="2623-2623", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeNullableXml()", file="XmlNodeConverterTest.cs"];
m11_84 [label="Entry Unk.WriteLine", span="", cluster="Unk.WriteLine", file="XmlNodeConverterTest.cs"];
m11_61 [label="Entry Unk.Create", span="", cluster="Unk.Create", file="XmlNodeConverterTest.cs"];
m11_0 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlNode(XmlNode)", span="61-61", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlNode(XmlNode)", file="XmlNodeConverterTest.cs"];
m11_1 [label="string json = JsonConvert.SerializeXmlNode(node, Formatting.Indented)", span="63-63", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlNode(XmlNode)", file="XmlNodeConverterTest.cs"];
m11_2 [label="XmlNodeReader reader = new XmlNodeReader(node)", span="64-64", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlNode(XmlNode)", file="XmlNodeConverterTest.cs"];
m11_4 [label="node is XmlDocument", span="68-68", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlNode(XmlNode)", file="XmlNodeConverterTest.cs"];
m11_6 [label="node is XmlAttribute", span="72-72", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlNode(XmlNode)", file="XmlNodeConverterTest.cs"];
m11_7 [label="XmlAttribute attribute = (XmlAttribute)node", span="74-74", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlNode(XmlNode)", file="XmlNodeConverterTest.cs"];
m11_12 [label="Assert.AreEqual(json, linqJson)", span="85-85", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlNode(XmlNode)", file="XmlNodeConverterTest.cs"];
m11_13 [label="return json;", span="88-88", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlNode(XmlNode)", file="XmlNodeConverterTest.cs"];
m11_3 [label="XObject xNode", span="67-67", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlNode(XmlNode)", file="XmlNodeConverterTest.cs"];
m11_5 [label="xNode = XDocument.Load(reader)", span="70-70", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlNode(XmlNode)", file="XmlNodeConverterTest.cs"];
m11_9 [label="reader.MoveToContent()", span="79-79", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlNode(XmlNode)", file="XmlNodeConverterTest.cs"];
m11_10 [label="xNode = XNode.ReadFrom(reader)", span="80-80", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlNode(XmlNode)", file="XmlNodeConverterTest.cs"];
m11_8 [label="xNode = new XAttribute(XName.Get(attribute.LocalName, attribute.NamespaceURI), attribute.Value)", span="75-75", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlNode(XmlNode)", file="XmlNodeConverterTest.cs"];
m11_11 [label="string linqJson = JsonConvert.SerializeXNode(xNode, Formatting.Indented)", span="83-83", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlNode(XmlNode)", file="XmlNodeConverterTest.cs"];
m11_14 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlNode(XmlNode)", span="61-61", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlNode(XmlNode)", file="XmlNodeConverterTest.cs"];
m11_449 [label="Entry Unk.IndentXml", span="", cluster="Unk.IndentXml", file="XmlNodeConverterTest.cs"];
m11_842 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeElementImplicitAttributeNamespace()", span="2878-2878", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeElementImplicitAttributeNamespace()", file="XmlNodeConverterTest.cs"];
m11_843 [label="var original = new XElement(''{http://example.com}MyElement'')", span="2880-2880", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeElementImplicitAttributeNamespace()", file="XmlNodeConverterTest.cs"];
m11_844 [label="Assert.AreEqual(@''<MyElement xmlns=''''http://example.com'''' />'', original.ToString())", span="2881-2881", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeElementImplicitAttributeNamespace()", file="XmlNodeConverterTest.cs"];
m11_845 [label="var json = JsonConvert.SerializeObject(original)", span="2883-2883", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeElementImplicitAttributeNamespace()", file="XmlNodeConverterTest.cs"];
m11_846 [label="Assert.AreEqual(@''{''''MyElement'''':{''''@xmlns'''':''''http://example.com''''}}'', json)", span="2884-2884", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeElementImplicitAttributeNamespace()", file="XmlNodeConverterTest.cs"];
m11_847 [label="var deserialized = JsonConvert.DeserializeObject<XElement>(json)", span="2886-2886", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeElementImplicitAttributeNamespace()", file="XmlNodeConverterTest.cs"];
m11_848 [label="Assert.AreEqual(@''<MyElement xmlns=''''http://example.com'''' />'', deserialized.ToString())", span="2887-2887", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeElementImplicitAttributeNamespace()", file="XmlNodeConverterTest.cs"];
m11_849 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeElementImplicitAttributeNamespace()", span="2878-2878", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeElementImplicitAttributeNamespace()", file="XmlNodeConverterTest.cs"];
m11_177 [label="Entry System.DateTimeOffset.DateTimeOffset(int, int, int, int, int, int, System.TimeSpan)", span="0-0", cluster="System.DateTimeOffset.DateTimeOffset(int, int, int, int, int, int, System.TimeSpan)", file="XmlNodeConverterTest.cs"];
m11_886 [label="Entry Newtonsoft.Json.JsonTextWriter.JsonTextWriter(System.IO.TextWriter)", span="149-149", cluster="Newtonsoft.Json.JsonTextWriter.JsonTextWriter(System.IO.TextWriter)", file="XmlNodeConverterTest.cs"];
m11_122 [label="Entry Newtonsoft.Json.Tests.StringAssert.AreEqual(string, string)", span="328-328", cluster="Newtonsoft.Json.Tests.StringAssert.AreEqual(string, string)", file="XmlNodeConverterTest.cs"];
m11_753 [label="Entry lambda expression", span="2728-2728", cluster="lambda expression", file="XmlNodeConverterTest.cs"];
m11_227 [label="JsonConvert.DeserializeXmlNode(json)", span="506-506", cluster="lambda expression", file="XmlNodeConverterTest.cs"];
m11_226 [label="Entry lambda expression", span="506-506", cluster="lambda expression", file="XmlNodeConverterTest.cs"];
m11_228 [label="Exit lambda expression", span="506-506", cluster="lambda expression", file="XmlNodeConverterTest.cs"];
m11_380 [label="Entry lambda expression", span="1047-1047", cluster="lambda expression", file="XmlNodeConverterTest.cs"];
m11_381 [label="XmlDocument newDoc = (XmlDocument)JsonConvert.DeserializeXmlNode(@''[1]'')", span="1047-1047", cluster="lambda expression", file="XmlNodeConverterTest.cs"];
m11_382 [label="Exit lambda expression", span="1047-1047", cluster="lambda expression", file="XmlNodeConverterTest.cs"];
m11_386 [label="Entry lambda expression", span="1054-1054", cluster="lambda expression", file="XmlNodeConverterTest.cs"];
m11_387 [label="XmlDocument newDoc = (XmlDocument)JsonConvert.DeserializeXmlNode(@''{Prop1:1,Prop2:2}'')", span="1054-1054", cluster="lambda expression", file="XmlNodeConverterTest.cs"];
m11_388 [label="Exit lambda expression", span="1054-1054", cluster="lambda expression", file="XmlNodeConverterTest.cs"];
m11_423 [label="JsonConvert.DeserializeXmlNode(json)", span="1172-1172", cluster="lambda expression", file="XmlNodeConverterTest.cs", color=green, community=0];
m11_422 [label="Entry lambda expression", span="1172-1172", cluster="lambda expression", file="XmlNodeConverterTest.cs"];
m11_424 [label="Exit lambda expression", span="1172-1172", cluster="lambda expression", file="XmlNodeConverterTest.cs"];
m11_430 [label="JsonConvert.DeserializeXNode(json)", span="1184-1184", cluster="lambda expression", file="XmlNodeConverterTest.cs", color=green, community=0];
m11_429 [label="Entry lambda expression", span="1184-1184", cluster="lambda expression", file="XmlNodeConverterTest.cs"];
m11_431 [label="Exit lambda expression", span="1184-1184", cluster="lambda expression", file="XmlNodeConverterTest.cs"];
m11_554 [label="JsonConvert.DeserializeXmlNode(json, ''root'')", span="1722-1722", cluster="lambda expression", file="XmlNodeConverterTest.cs"];
m11_553 [label="Entry lambda expression", span="1722-1722", cluster="lambda expression", file="XmlNodeConverterTest.cs"];
m11_555 [label="Exit lambda expression", span="1722-1722", cluster="lambda expression", file="XmlNodeConverterTest.cs"];
m11_578 [label="DeserializeXmlNode(json)", span="1850-1850", cluster="lambda expression", file="XmlNodeConverterTest.cs"];
m11_577 [label="Entry lambda expression", span="1850-1850", cluster="lambda expression", file="XmlNodeConverterTest.cs"];
m11_579 [label="Exit lambda expression", span="1850-1850", cluster="lambda expression", file="XmlNodeConverterTest.cs"];
m11_754 [label="JsonConvert.DeserializeXmlNode(json)", span="2728-2728", cluster="lambda expression", file="XmlNodeConverterTest.cs"];
m11_755 [label="Exit lambda expression", span="2728-2728", cluster="lambda expression", file="XmlNodeConverterTest.cs"];
m11_629 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeNonInt64IntegerValues()", span="2042-2042", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeNonInt64IntegerValues()", file="XmlNodeConverterTest.cs"];
m11_630 [label="var dict = new Dictionary<string, object> { { ''Int16'', (short)1 }, { ''Float'', 2f }, { ''Int32'', 3 } }", span="2044-2044", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeNonInt64IntegerValues()", file="XmlNodeConverterTest.cs"];
m11_631 [label="var obj = JObject.FromObject(dict)", span="2045-2045", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeNonInt64IntegerValues()", file="XmlNodeConverterTest.cs"];
m11_632 [label="var serializer = JsonSerializer.Create(new JsonSerializerSettings { Converters = { new XmlNodeConverter() { DeserializeRootElementName = ''root'' } } })", span="2046-2046", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeNonInt64IntegerValues()", file="XmlNodeConverterTest.cs"];
m11_633 [label="var reader = obj.CreateReader()", span="2047-2047", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeNonInt64IntegerValues()", file="XmlNodeConverterTest.cs"];
m11_634 [label="var value = (XmlDocument)serializer.Deserialize(reader, typeof(XmlDocument))", span="2049-2049", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeNonInt64IntegerValues()", file="XmlNodeConverterTest.cs"];
m11_635 [label="Assert.AreEqual(@''<root><Int16>1</Int16><Float>2</Float><Int32>3</Int32></root>'', value.InnerXml)", span="2051-2051", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeNonInt64IntegerValues()", file="XmlNodeConverterTest.cs"];
m11_636 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeNonInt64IntegerValues()", span="2042-2042", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeNonInt64IntegerValues()", file="XmlNodeConverterTest.cs"];
m11_695 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeAttributePropertyNotAtStart()", span="2578-2578", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeAttributePropertyNotAtStart()", file="XmlNodeConverterTest.cs"];
m11_696 [label="string json = @''{''''item'''': {''''@action'''': ''''update'''', ''''@itemid'''': ''''1'''', ''''elements'''': [{''''@action'''': ''''none'''', ''''@id'''': ''''2''''},{''''@action'''': ''''none'''', ''''@id'''': ''''3''''}],''''@description'''': ''''temp''''}}''", span="2580-2580", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeAttributePropertyNotAtStart()", file="XmlNodeConverterTest.cs"];
m11_697 [label="XmlDocument xmldoc = JsonConvert.DeserializeXmlNode(json)", span="2582-2582", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeAttributePropertyNotAtStart()", file="XmlNodeConverterTest.cs"];
m11_698 [label="Assert.AreEqual(@''<item action=''''update'''' itemid=''''1'''' description=''''temp''''><elements action=''''none'''' id=''''2'''' /><elements action=''''none'''' id=''''3'''' /></item>'', xmldoc.InnerXml)", span="2584-2584", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeAttributePropertyNotAtStart()", file="XmlNodeConverterTest.cs"];
m11_699 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeAttributePropertyNotAtStart()", span="2578-2578", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeAttributePropertyNotAtStart()", file="XmlNodeConverterTest.cs"];
m11_768 [label="Entry XDocument.cstr", span="", cluster="XDocument.cstr", file="XmlNodeConverterTest.cs"];
m11_665 [label="Entry Newtonsoft.Json.Converters.XmlNodeConverter.cstr", span="", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.cstr", file="XmlNodeConverterTest.cs"];
m11_507 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataProperties()", span="1562-1562", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataProperties()", file="XmlNodeConverterTest.cs"];
m11_508 [label="PreserveReferencesHandlingTests.CircularDictionary circularDictionary = new PreserveReferencesHandlingTests.CircularDictionary()", span="1564-1564", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataProperties()", file="XmlNodeConverterTest.cs"];
m11_509 [label="circularDictionary.Add(''other'', new PreserveReferencesHandlingTests.CircularDictionary { { ''blah'', null } })", span="1565-1565", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataProperties()", file="XmlNodeConverterTest.cs"];
m11_510 [label="circularDictionary.Add(''self'', circularDictionary)", span="1566-1566", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataProperties()", file="XmlNodeConverterTest.cs"];
m11_511 [label="string json = JsonConvert.SerializeObject(circularDictionary, Formatting.Indented,\r\n                new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.All })", span="1568-1569", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataProperties()", file="XmlNodeConverterTest.cs"];
m11_512 [label="StringAssert.AreEqual(@''{\r\n  ''''$id'''': ''''1'''',\r\n  ''''other'''': {\r\n    ''''$id'''': ''''2'''',\r\n    ''''blah'''': null\r\n  },\r\n  ''''self'''': {\r\n    ''''$ref'''': ''''1''''\r\n  }\r\n}'', json)", span="1571-1580", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataProperties()", file="XmlNodeConverterTest.cs"];
m11_513 [label="XmlNode node = DeserializeXmlNode(json, ''root'')", span="1582-1582", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataProperties()", file="XmlNodeConverterTest.cs"];
m11_514 [label="string xml = GetIndentedInnerXml(node)", span="1583-1583", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataProperties()", file="XmlNodeConverterTest.cs"];
m11_517 [label="string xmlJson = SerializeXmlNode(node)", span="1594-1594", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataProperties()", file="XmlNodeConverterTest.cs"];
m11_515 [label="string expected = @''<?xml version=''''1.0'''' encoding=''''utf-16''''?>\r\n<root xmlns:json=''''http://james.newtonking.com/projects/json'''' json:id=''''1''''>\r\n  <other json:id=''''2''''>\r\n    <blah />\r\n  </other>\r\n  <self json:ref=''''1'''' />\r\n</root>''", span="1584-1590", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataProperties()", file="XmlNodeConverterTest.cs"];
m11_516 [label="StringAssert.AreEqual(expected, xml)", span="1592-1592", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataProperties()", file="XmlNodeConverterTest.cs"];
m11_518 [label="string expectedXmlJson = @''{\r\n  ''''root'''': {\r\n    ''''$id'''': ''''1'''',\r\n    ''''other'''': {\r\n      ''''$id'''': ''''2'''',\r\n      ''''blah'''': null\r\n    },\r\n    ''''self'''': {\r\n      ''''$ref'''': ''''1''''\r\n    }\r\n  }\r\n}''", span="1595-1606", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataProperties()", file="XmlNodeConverterTest.cs"];
m11_519 [label="StringAssert.AreEqual(expectedXmlJson, xmlJson)", span="1608-1608", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataProperties()", file="XmlNodeConverterTest.cs"];
m11_520 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataProperties()", span="1562-1562", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataProperties()", file="XmlNodeConverterTest.cs"];
m11_821 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Local_Precision()", span="2841-2841", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Local_Precision()", file="XmlNodeConverterTest.cs"];
m11_822 [label="DateTime dt = DateTime.Parse(''2014-01-23T00:00:00.1234567+01:00'')", span="2843-2843", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Local_Precision()", file="XmlNodeConverterTest.cs"];
m11_823 [label="string json = @''{''''CreatedDate'''': ''''2014-01-23T00:00:00.1234567+01:00''''}''", span="2845-2845", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Local_Precision()", file="XmlNodeConverterTest.cs"];
m11_825 [label="Assert.AreEqual(dt.ToString(''yyyy-MM-ddTHH:mm:ss.FFFFFFFK'', CultureInfo.InvariantCulture), dxml.Root.Element(''CreatedDate'').Value)", span="2847-2847", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Local_Precision()", file="XmlNodeConverterTest.cs"];
m11_824 [label="var dxml = JsonConvert.DeserializeXNode(json, ''root'')", span="2846-2846", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Local_Precision()", file="XmlNodeConverterTest.cs"];
m11_826 [label="Console.WriteLine(''DateTimeToXml_Local: '' + dxml.Root.Element(''CreatedDate'').Value)", span="2849-2849", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Local_Precision()", file="XmlNodeConverterTest.cs"];
m11_827 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Local_Precision()", span="2841-2841", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Local_Precision()", file="XmlNodeConverterTest.cs"];
m11_27 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string, string)", span="96-96", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string, string)", file="XmlNodeConverterTest.cs"];
m11_28 [label="JsonTextReader reader", span="98-98", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string, string)", file="XmlNodeConverterTest.cs"];
m11_29 [label="reader = new JsonTextReader(new StringReader(json))", span="100-100", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string, string)", file="XmlNodeConverterTest.cs"];
m11_32 [label="deserializeRootElementName != null", span="103-103", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string, string)", file="XmlNodeConverterTest.cs"];
m11_33 [label="converter.DeserializeRootElementName = deserializeRootElementName", span="105-105", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string, string)", file="XmlNodeConverterTest.cs"];
m11_36 [label="reader = new JsonTextReader(new StringReader(json))", span="113-113", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string, string)", file="XmlNodeConverterTest.cs"];
m11_30 [label="reader.Read()", span="101-101", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string, string)", file="XmlNodeConverterTest.cs"];
m11_34 [label="XmlNode node = (XmlNode)converter.ReadJson(reader, typeof(XmlDocument), null, new JsonSerializer())", span="108-108", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string, string)", file="XmlNodeConverterTest.cs"];
m11_31 [label="XmlNodeConverter converter = new XmlNodeConverter()", span="102-102", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string, string)", file="XmlNodeConverterTest.cs"];
m11_38 [label="XDocument d = (XDocument)converter.ReadJson(reader, typeof(XDocument), null, new JsonSerializer())", span="115-115", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string, string)", file="XmlNodeConverterTest.cs"];
m11_35 [label="string xmlText = node.OuterXml", span="111-111", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string, string)", file="XmlNodeConverterTest.cs"];
m11_43 [label="return node;", span="126-126", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string, string)", file="XmlNodeConverterTest.cs"];
m11_42 [label="Assert.AreEqual(xmlText, linqXmlText)", span="123-123", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string, string)", file="XmlNodeConverterTest.cs"];
m11_37 [label="reader.Read()", span="114-114", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string, string)", file="XmlNodeConverterTest.cs"];
m11_39 [label="string linqXmlText = d.ToString(SaveOptions.DisableFormatting)", span="117-117", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string, string)", file="XmlNodeConverterTest.cs"];
m11_40 [label="d.Declaration != null", span="118-118", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string, string)", file="XmlNodeConverterTest.cs"];
m11_41 [label="linqXmlText = d.Declaration + linqXmlText", span="120-120", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string, string)", file="XmlNodeConverterTest.cs"];
m11_44 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string, string)", span="96-96", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string, string)", file="XmlNodeConverterTest.cs"];
m11_275 [label="Entry Unk.CreateElement", span="", cluster="Unk.CreateElement", file="XmlNodeConverterTest.cs"];
m11_65 [label="Entry Unk.WriteNode", span="", cluster="Unk.WriteNode", file="XmlNodeConverterTest.cs"];
m11_521 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.CircularDictionary.CircularDictionary()", span="433-433", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.CircularDictionary.CircularDictionary()", file="XmlNodeConverterTest.cs"];
m11_749 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RootPropertyError()", span="2704-2704", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RootPropertyError()", file="XmlNodeConverterTest.cs"];
m11_750 [label="string json = @''{\r\n  ''''$id'''': ''''1'''',\r\n  ''''AOSLocaleName'''': ''''en-US'''',\r\n  ''''AXLanguage'''': ''''EN-AU'''',\r\n  ''''Company'''': ''''AURE'''',\r\n  ''''CompanyTimeZone'''': 8,\r\n  ''''CurrencyInfo'''': {\r\n    ''''$id'''': ''''2'''',\r\n    ''''CurrencyCode'''': ''''AUD'''',\r\n    ''''Description'''': ''''Australian Dollar'''',\r\n    ''''ExchangeRate'''': 100.0,\r\n    ''''ISOCurrencyCode'''': ''''AUD'''',\r\n    ''''Prefix'''': '''''''',\r\n    ''''Suffix'''': ''''''''\r\n  },\r\n  ''''IsSysAdmin'''': true,\r\n  ''''UserId'''': ''''lamar.miller'''',\r\n  ''''UserPreferredCalendar'''': 0,\r\n  ''''UserPreferredTimeZone'''': 8\r\n}''", span="2706-2725", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RootPropertyError()", file="XmlNodeConverterTest.cs"];
m11_751 [label="ExceptionAssert.Throws<JsonSerializationException>(\r\n                () => JsonConvert.DeserializeXmlNode(json),\r\n                ''JSON root object has property '$id' that will be converted to an attribute. A root object cannot have any attribute properties. Consider specifying a DeserializeRootElementName. Path '$id', line 2, position 12.'')", span="2727-2729", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RootPropertyError()", file="XmlNodeConverterTest.cs"];
m11_752 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RootPropertyError()", span="2704-2704", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RootPropertyError()", file="XmlNodeConverterTest.cs"];
m11_46 [label="Entry System.IO.StringReader.StringReader(string)", span="0-0", cluster="System.IO.StringReader.StringReader(string)", file="XmlNodeConverterTest.cs"];
m11_460 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNestedArraysToXml()", span="1332-1332", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNestedArraysToXml()", file="XmlNodeConverterTest.cs"];
m11_461 [label="string json = @''{\r\n  ''''available_sizes'''': [\r\n    [\r\n      [113, 150],\r\n      ''''assets/images/resized/0001/1070/11070v1-max-150x150.jpg''''\r\n    ],\r\n    [\r\n      [189, 250],\r\n      ''''assets/images/resized/0001/1070/11070v1-max-250x250.jpg''''\r\n    ],\r\n    [\r\n      [341, 450],\r\n      ''''assets/images/resized/0001/1070/11070v1-max-450x450.jpg''''\r\n    ]\r\n  ]\r\n}''", span="1334-1349", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNestedArraysToXml()", file="XmlNodeConverterTest.cs"];
m11_462 [label="XmlDocument newDoc = JsonConvert.DeserializeXmlNode(json, ''myRoot'')", span="1352-1352", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNestedArraysToXml()", file="XmlNodeConverterTest.cs"];
m11_464 [label="XDocument newXDoc = JsonConvert.DeserializeXNode(json, ''myRoot'')", span="1358-1358", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNestedArraysToXml()", file="XmlNodeConverterTest.cs"];
m11_463 [label="Assert.AreEqual(@''<myRoot><available_sizes><available_sizes><available_sizes>113</available_sizes><available_sizes>150</available_sizes></available_sizes><available_sizes>assets/images/resized/0001/1070/11070v1-max-150x150.jpg</available_sizes></available_sizes><available_sizes><available_sizes><available_sizes>189</available_sizes><available_sizes>250</available_sizes></available_sizes><available_sizes>assets/images/resized/0001/1070/11070v1-max-250x250.jpg</available_sizes></available_sizes><available_sizes><available_sizes><available_sizes>341</available_sizes><available_sizes>450</available_sizes></available_sizes><available_sizes>assets/images/resized/0001/1070/11070v1-max-450x450.jpg</available_sizes></available_sizes></myRoot>'', newDoc.InnerXml)", span="1354-1354", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNestedArraysToXml()", file="XmlNodeConverterTest.cs"];
m11_465 [label="Assert.AreEqual(@''<myRoot><available_sizes><available_sizes><available_sizes>113</available_sizes><available_sizes>150</available_sizes></available_sizes><available_sizes>assets/images/resized/0001/1070/11070v1-max-150x150.jpg</available_sizes></available_sizes><available_sizes><available_sizes><available_sizes>189</available_sizes><available_sizes>250</available_sizes></available_sizes><available_sizes>assets/images/resized/0001/1070/11070v1-max-250x250.jpg</available_sizes></available_sizes><available_sizes><available_sizes><available_sizes>341</available_sizes><available_sizes>450</available_sizes></available_sizes><available_sizes>assets/images/resized/0001/1070/11070v1-max-450x450.jpg</available_sizes></available_sizes></myRoot>'', newXDoc.ToString(SaveOptions.DisableFormatting))", span="1360-1360", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNestedArraysToXml()", file="XmlNodeConverterTest.cs"];
m11_466 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNestedArraysToXml()", span="1332-1332", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNestedArraysToXml()", file="XmlNodeConverterTest.cs"];
m11_788 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Unspecified()", span="2789-2789", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Unspecified()", file="XmlNodeConverterTest.cs"];
m11_789 [label="string json = @''{''''CreatedDate'''': ''''2014-01-23T00:00:00''''}''", span="2791-2791", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Unspecified()", file="XmlNodeConverterTest.cs"];
m11_790 [label="var dxml = JsonConvert.DeserializeXNode(json, ''root'')", span="2792-2792", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Unspecified()", file="XmlNodeConverterTest.cs"];
m11_791 [label="Assert.AreEqual(''2014-01-23T00:00:00'', dxml.Root.Element(''CreatedDate'').Value)", span="2793-2793", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Unspecified()", file="XmlNodeConverterTest.cs"];
m11_792 [label="Console.WriteLine(''DateTimeToXml_Unspecified: '' + dxml.Root.Element(''CreatedDate'').Value)", span="2795-2795", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Unspecified()", file="XmlNodeConverterTest.cs"];
m11_793 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Unspecified()", span="2789-2789", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Unspecified()", file="XmlNodeConverterTest.cs"];
m11_389 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JavaScriptConstructor()", span="1059-1059", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JavaScriptConstructor()", file="XmlNodeConverterTest.cs"];
m11_390 [label="string jsonText = @''{root:{r:new Date(34343, 55)}}''", span="1061-1061", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JavaScriptConstructor()", file="XmlNodeConverterTest.cs"];
m11_391 [label="XmlDocument newDoc = (XmlDocument)DeserializeXmlNode(jsonText)", span="1063-1063", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JavaScriptConstructor()", file="XmlNodeConverterTest.cs"];
m11_392 [label="string expected = @''<root><r><Date>34343</Date><Date>55</Date></r></root>''", span="1065-1065", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JavaScriptConstructor()", file="XmlNodeConverterTest.cs"];
m11_393 [label="Assert.AreEqual(expected, newDoc.InnerXml)", span="1067-1067", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JavaScriptConstructor()", file="XmlNodeConverterTest.cs"];
m11_394 [label="string json = SerializeXmlNode(newDoc)", span="1069-1069", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JavaScriptConstructor()", file="XmlNodeConverterTest.cs"];
m11_395 [label="expected = @''{\r\n  ''''root'''': {\r\n    ''''r'''': {\r\n      ''''Date'''': [\r\n        ''''34343'''',\r\n        ''''55''''\r\n      ]\r\n    }\r\n  }\r\n}''", span="1070-1079", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JavaScriptConstructor()", file="XmlNodeConverterTest.cs"];
m11_396 [label="StringAssert.AreEqual(expected, json)", span="1081-1081", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JavaScriptConstructor()", file="XmlNodeConverterTest.cs"];
m11_397 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JavaScriptConstructor()", span="1059-1059", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JavaScriptConstructor()", file="XmlNodeConverterTest.cs"];
m11_66 [label="Entry Unk.Flush", span="", cluster="Unk.Flush", file="XmlNodeConverterTest.cs"];
m11_735 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeBigInteger()", span="2676-2676", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeBigInteger()", file="XmlNodeConverterTest.cs"];
m11_736 [label="var json = ''{\''DocumentId\'':13779965364495889899 }''", span="2678-2678", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeBigInteger()", file="XmlNodeConverterTest.cs"];
m11_737 [label="XmlDocument node = JsonConvert.DeserializeXmlNode(json)", span="2680-2680", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeBigInteger()", file="XmlNodeConverterTest.cs"];
m11_738 [label="Assert.AreEqual(''<DocumentId>13779965364495889899</DocumentId>'', node.OuterXml)", span="2682-2682", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeBigInteger()", file="XmlNodeConverterTest.cs"];
m11_739 [label="string json2 = JsonConvert.SerializeXmlNode(node)", span="2684-2684", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeBigInteger()", file="XmlNodeConverterTest.cs"];
m11_740 [label="Assert.AreEqual(@''{''''DocumentId'''':''''13779965364495889899''''}'', json2)", span="2686-2686", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeBigInteger()", file="XmlNodeConverterTest.cs"];
m11_741 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeBigInteger()", span="2676-2676", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeBigInteger()", file="XmlNodeConverterTest.cs"];
m11_178 [label="Entry System.TimeSpan.FromHours(double)", span="0-0", cluster="System.TimeSpan.FromHours(double)", file="XmlNodeConverterTest.cs"];
m11_605 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="XmlNodeConverterTest.cs"];
m11_311 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ToStringWithDeclaration(XDocument, bool)", span="805-805", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ToStringWithDeclaration(XDocument, bool)", file="XmlNodeConverterTest.cs"];
m11_314 [label="StringBuilder builder = new StringBuilder()", span="807-807", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ToStringWithDeclaration(XDocument, bool)", file="XmlNodeConverterTest.cs"];
m11_315 [label="var writer = XmlWriter.Create(new Utf8StringWriter(builder), new XmlWriterSettings { Indent = indent })", span="808-808", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ToStringWithDeclaration(XDocument, bool)", file="XmlNodeConverterTest.cs"];
m11_316 [label="doc.Save(writer)", span="810-810", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ToStringWithDeclaration(XDocument, bool)", file="XmlNodeConverterTest.cs"];
m11_317 [label="return builder.ToString();", span="812-812", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ToStringWithDeclaration(XDocument, bool)", file="XmlNodeConverterTest.cs"];
m11_318 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ToStringWithDeclaration(XDocument, bool)", span="805-805", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ToStringWithDeclaration(XDocument, bool)", file="XmlNodeConverterTest.cs"];
m11_181 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeOffsetContainer.DateTimeOffsetContainer()", span="380-380", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeOffsetContainer.DateTimeOffsetContainer()", file="XmlNodeConverterTest.cs"];
m11_727 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXmlElementWithNamespaceInChildrenRootDontHaveNameSpace()", span="2657-2657", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXmlElementWithNamespaceInChildrenRootDontHaveNameSpace()", file="XmlNodeConverterTest.cs"];
m11_728 [label="var xmlString = @''<root>\r\n                              <b xmlns='http://www.example.com/ns'>Asd</b>\r\n                              <c>AAA</c>\r\n                              <test>adad</test>\r\n                              </root>''", span="2659-2663", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXmlElementWithNamespaceInChildrenRootDontHaveNameSpace()", file="XmlNodeConverterTest.cs"];
m11_729 [label="XmlDocument xml = new XmlDocument()", span="2665-2665", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXmlElementWithNamespaceInChildrenRootDontHaveNameSpace()", file="XmlNodeConverterTest.cs"];
m11_730 [label="xml.LoadXml(xmlString)", span="2666-2666", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXmlElementWithNamespaceInChildrenRootDontHaveNameSpace()", file="XmlNodeConverterTest.cs"];
m11_731 [label="var json1 = JsonConvert.SerializeXmlNode(xml)", span="2668-2668", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXmlElementWithNamespaceInChildrenRootDontHaveNameSpace()", file="XmlNodeConverterTest.cs"];
m11_732 [label="var xmlBack = JsonConvert.DeserializeObject<XmlDocument>(json1)", span="2669-2669", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXmlElementWithNamespaceInChildrenRootDontHaveNameSpace()", file="XmlNodeConverterTest.cs"];
m11_733 [label="Assert.AreEqual(@''<root><b xmlns=''''http://www.example.com/ns''''>Asd</b><c>AAA</c><test>adad</test></root>'', xmlBack.OuterXml)", span="2671-2671", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXmlElementWithNamespaceInChildrenRootDontHaveNameSpace()", file="XmlNodeConverterTest.cs"];
m11_734 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXmlElementWithNamespaceInChildrenRootDontHaveNameSpace()", span="2657-2657", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXmlElementWithNamespaceInChildrenRootDontHaveNameSpace()", file="XmlNodeConverterTest.cs"];
m11_774 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Serialize_XDocument_NoRootWithDeclaration()", span="2767-2767", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Serialize_XDocument_NoRootWithDeclaration()", file="XmlNodeConverterTest.cs"];
m11_775 [label="XDocument d = new XDocument()", span="2769-2769", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Serialize_XDocument_NoRootWithDeclaration()", file="XmlNodeConverterTest.cs"];
m11_776 [label="d.Declaration = new XDeclaration(''Version!'', ''Encoding!'', ''Standalone!'')", span="2770-2770", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Serialize_XDocument_NoRootWithDeclaration()", file="XmlNodeConverterTest.cs"];
m11_777 [label="string json = JsonConvert.SerializeXNode(d)", span="2772-2772", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Serialize_XDocument_NoRootWithDeclaration()", file="XmlNodeConverterTest.cs"];
m11_778 [label="Assert.AreEqual(@''{''''?xml'''':{''''@version'''':''''Version!'''',''''@encoding'''':''''Encoding!'''',''''@standalone'''':''''Standalone!''''}}'', json)", span="2774-2774", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Serialize_XDocument_NoRootWithDeclaration()", file="XmlNodeConverterTest.cs"];
m11_779 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Serialize_XDocument_NoRootWithDeclaration()", span="2767-2767", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Serialize_XDocument_NoRootWithDeclaration()", file="XmlNodeConverterTest.cs"];
m11_667 [label="Entry System.IO.StreamReader.StreamReader(System.IO.Stream)", span="0-0", cluster="System.IO.StreamReader.StreamReader(System.IO.Stream)", file="XmlNodeConverterTest.cs"];
m11_780 [label="Entry XDeclaration.cstr", span="", cluster="XDeclaration.cstr", file="XmlNodeConverterTest.cs"];
m11_885 [label="Entry System.IO.StringWriter.StringWriter(System.Text.StringBuilder, System.IFormatProvider)", span="0-0", cluster="System.IO.StringWriter.StringWriter(System.Text.StringBuilder, System.IFormatProvider)", file="XmlNodeConverterTest.cs"];
m11_62 [label="Entry System.IO.StringWriter.StringWriter()", span="0-0", cluster="System.IO.StringWriter.StringWriter()", file="XmlNodeConverterTest.cs"];
m11_850 [label="Entry XElement.cstr", span="", cluster="XElement.cstr", file="XmlNodeConverterTest.cs"];
m11_274 [label="Entry Unk.CreateCDataSection", span="", cluster="Unk.CreateCDataSection", file="XmlNodeConverterTest.cs"];
m11_272 [label="Entry Unk.Attribute", span="", cluster="Unk.Attribute", file="XmlNodeConverterTest.cs"];
m11_500 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EscapingNames()", span="1518-1518", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EscapingNames()", file="XmlNodeConverterTest.cs"];
m11_501 [label="string json = @''{\r\n              ''''root!'''': {\r\n                ''''person!'''': [\r\n                  {\r\n                    ''''@id!'''': ''''1'''',\r\n                    ''''name!'''': ''''Alan'''',\r\n                    ''''url!'''': ''''http://www.google.com''''\r\n                  },\r\n                  {\r\n                    ''''@id!'''': ''''2'''',\r\n                    ''''name!'''': ''''Louis'''',\r\n                    ''''url!'''': ''''http://www.yahoo.com''''\r\n                  }\r\n                ]\r\n              }\r\n            }''", span="1520-1535", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EscapingNames()", file="XmlNodeConverterTest.cs"];
m11_502 [label="XmlDocument doc = (XmlDocument)DeserializeXmlNode(json)", span="1537-1537", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EscapingNames()", file="XmlNodeConverterTest.cs"];
m11_503 [label="Assert.AreEqual(@''<root_x0021_><person_x0021_ id_x0021_=''''1''''><name_x0021_>Alan</name_x0021_><url_x0021_>http://www.google.com</url_x0021_></person_x0021_><person_x0021_ id_x0021_=''''2''''><name_x0021_>Louis</name_x0021_><url_x0021_>http://www.yahoo.com</url_x0021_></person_x0021_></root_x0021_>'', doc.InnerXml)", span="1539-1539", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EscapingNames()", file="XmlNodeConverterTest.cs"];
m11_504 [label="string json2 = SerializeXmlNode(doc)", span="1541-1541", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EscapingNames()", file="XmlNodeConverterTest.cs"];
m11_505 [label="StringAssert.AreEqual(@''{\r\n  ''''root!'''': {\r\n    ''''person!'''': [\r\n      {\r\n        ''''@id!'''': ''''1'''',\r\n        ''''name!'''': ''''Alan'''',\r\n        ''''url!'''': ''''http://www.google.com''''\r\n      },\r\n      {\r\n        ''''@id!'''': ''''2'''',\r\n        ''''name!'''': ''''Louis'''',\r\n        ''''url!'''': ''''http://www.yahoo.com''''\r\n      }\r\n    ]\r\n  }\r\n}'', json2)", span="1543-1558", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EscapingNames()", file="XmlNodeConverterTest.cs"];
m11_506 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EscapingNames()", span="1518-1518", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EscapingNames()", file="XmlNodeConverterTest.cs"];
m11_851 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDocumentExplicitAttributeNamespace()", span="2891-2891", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDocumentExplicitAttributeNamespace()", file="XmlNodeConverterTest.cs"];
m11_852 [label="var original = XDocument.Parse(''<MyElement xmlns=\''http://example.com\'' />'')", span="2893-2893", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDocumentExplicitAttributeNamespace()", file="XmlNodeConverterTest.cs"];
m11_853 [label="Assert.AreEqual(@''<MyElement xmlns=''''http://example.com'''' />'', original.ToString())", span="2894-2894", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDocumentExplicitAttributeNamespace()", file="XmlNodeConverterTest.cs"];
m11_854 [label="var json = JsonConvert.SerializeObject(original)", span="2896-2896", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDocumentExplicitAttributeNamespace()", file="XmlNodeConverterTest.cs"];
m11_855 [label="Assert.AreEqual(@''{''''MyElement'''':{''''@xmlns'''':''''http://example.com''''}}'', json)", span="2897-2897", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDocumentExplicitAttributeNamespace()", file="XmlNodeConverterTest.cs"];
m11_856 [label="var deserialized = JsonConvert.DeserializeObject<XDocument>(json)", span="2899-2899", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDocumentExplicitAttributeNamespace()", file="XmlNodeConverterTest.cs"];
m11_857 [label="Assert.AreEqual(@''<MyElement xmlns=''''http://example.com'''' />'', deserialized.ToString())", span="2900-2900", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDocumentExplicitAttributeNamespace()", file="XmlNodeConverterTest.cs"];
m11_858 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDocumentExplicitAttributeNamespace()", span="2891-2891", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDocumentExplicitAttributeNamespace()", file="XmlNodeConverterTest.cs"];
m11_285 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentFragmentSerialize()", span="676-676", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentFragmentSerialize()", file="XmlNodeConverterTest.cs"];
m11_286 [label="XmlDocument doc = new XmlDocument()", span="678-678", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentFragmentSerialize()", file="XmlNodeConverterTest.cs"];
m11_287 [label="XmlDocumentFragment fragement = doc.CreateDocumentFragment()", span="680-680", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentFragmentSerialize()", file="XmlNodeConverterTest.cs"];
m11_288 [label="fragement.InnerXml = ''<Item>widget</Item><Item>widget</Item>''", span="682-682", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentFragmentSerialize()", file="XmlNodeConverterTest.cs"];
m11_289 [label="string jsonText = JsonConvert.SerializeXmlNode(fragement)", span="684-684", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentFragmentSerialize()", file="XmlNodeConverterTest.cs"];
m11_290 [label="string expected = @''{''''Item'''':[''''widget'''',''''widget'''']}''", span="686-686", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentFragmentSerialize()", file="XmlNodeConverterTest.cs"];
m11_291 [label="Assert.AreEqual(expected, jsonText)", span="688-688", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentFragmentSerialize()", file="XmlNodeConverterTest.cs"];
m11_292 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentFragmentSerialize()", span="676-676", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentFragmentSerialize()", file="XmlNodeConverterTest.cs"];
m11_22 [label="Entry Unk.SerializeXNode", span="", cluster="Unk.SerializeXNode", file="XmlNodeConverterTest.cs"];
m11_273 [label="Entry Unk.CreateProcessingInstruction", span="", cluster="Unk.CreateProcessingInstruction", file="XmlNodeConverterTest.cs"];
m11_549 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeMetadataPropertyWithBadValue()", span="1715-1715", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeMetadataPropertyWithBadValue()", file="XmlNodeConverterTest.cs"];
m11_550 [label="string json = @''{\r\n  ''''$id'''': []\r\n}''", span="1717-1719", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeMetadataPropertyWithBadValue()", file="XmlNodeConverterTest.cs"];
m11_551 [label="ExceptionAssert.Throws<JsonSerializationException>(\r\n                () => { JsonConvert.DeserializeXmlNode(json, ''root''); },\r\n                ''Unexpected JsonToken: StartArray. Path '$id', line 2, position 10.'')", span="1721-1723", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeMetadataPropertyWithBadValue()", file="XmlNodeConverterTest.cs"];
m11_552 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeMetadataPropertyWithBadValue()", span="1715-1715", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeMetadataPropertyWithBadValue()", file="XmlNodeConverterTest.cs"];
m11_52 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.IndentXml(string)", span="130-130", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.IndentXml(string)", file="XmlNodeConverterTest.cs"];
m11_53 [label="XmlReader reader = XmlReader.Create(new StringReader(xml))", span="132-132", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.IndentXml(string)", file="XmlNodeConverterTest.cs"];
m11_54 [label="StringWriter sw = new StringWriter()", span="134-134", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.IndentXml(string)", file="XmlNodeConverterTest.cs"];
m11_56 [label="reader.Read()", span="137-137", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.IndentXml(string)", file="XmlNodeConverterTest.cs"];
m11_57 [label="writer.WriteNode(reader, false)", span="139-139", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.IndentXml(string)", file="XmlNodeConverterTest.cs"];
m11_55 [label="XmlWriter writer = XmlWriter.Create(sw, new XmlWriterSettings { Indent = true, OmitXmlDeclaration = true })", span="135-135", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.IndentXml(string)", file="XmlNodeConverterTest.cs"];
m11_59 [label="return sw.ToString();", span="144-144", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.IndentXml(string)", file="XmlNodeConverterTest.cs"];
m11_58 [label="writer.Flush()", span="142-142", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.IndentXml(string)", file="XmlNodeConverterTest.cs"];
m11_60 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.IndentXml(string)", span="130-130", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.IndentXml(string)", file="XmlNodeConverterTest.cs"];
m11_19 [label="Entry Unk.Get", span="", cluster="Unk.Get", file="XmlNodeConverterTest.cs"];
m11_152 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.FloatParseHandlingDecimal()", span="357-357", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.FloatParseHandlingDecimal()", file="XmlNodeConverterTest.cs"];
m11_153 [label="decimal d = (decimal)Math.PI + 1000000000m", span="359-359", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.FloatParseHandlingDecimal()", file="XmlNodeConverterTest.cs"];
m11_154 [label="var x = new DecimalContainer { Number = d }", span="360-360", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.FloatParseHandlingDecimal()", file="XmlNodeConverterTest.cs"];
m11_155 [label="var json = JsonConvert.SerializeObject(x, Formatting.Indented)", span="362-362", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.FloatParseHandlingDecimal()", file="XmlNodeConverterTest.cs"];
m11_161 [label="Assert.AreEqual(x.Number, x2.Number)", span="377-377", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.FloatParseHandlingDecimal()", file="XmlNodeConverterTest.cs"];
m11_156 [label="XDocument doc1 = JsonConvert.DeserializeObject<XDocument>(json, new JsonSerializerSettings\r\n            {\r\n                Converters = { new XmlNodeConverter() },\r\n                FloatParseHandling = FloatParseHandling.Decimal\r\n            })", span="364-368", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.FloatParseHandlingDecimal()", file="XmlNodeConverterTest.cs"];
m11_157 [label="var xml = doc1.ToString()", span="370-370", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.FloatParseHandlingDecimal()", file="XmlNodeConverterTest.cs"];
m11_159 [label="string json2 = JsonConvert.SerializeObject(doc1, Formatting.Indented)", span="373-373", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.FloatParseHandlingDecimal()", file="XmlNodeConverterTest.cs"];
m11_158 [label="Assert.AreEqual(''<Number>1000000003.14159265358979</Number>'', xml)", span="371-371", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.FloatParseHandlingDecimal()", file="XmlNodeConverterTest.cs"];
m11_160 [label="DecimalContainer x2 = JsonConvert.DeserializeObject<DecimalContainer>(json2)", span="375-375", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.FloatParseHandlingDecimal()", file="XmlNodeConverterTest.cs"];
m11_162 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.FloatParseHandlingDecimal()", span="357-357", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.FloatParseHandlingDecimal()", file="XmlNodeConverterTest.cs"];
m11_164 [label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting)", span="537-537", cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting)", file="XmlNodeConverterTest.cs"];
m11_182 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.GroupElementsOfTheSameName()", span="410-410", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.GroupElementsOfTheSameName()", file="XmlNodeConverterTest.cs"];
m11_183 [label="string xml = ''<root><p>Text1<span>Span1</span> <span>Span2</span> Text2</p></root>''", span="412-412", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.GroupElementsOfTheSameName()", file="XmlNodeConverterTest.cs"];
m11_184 [label="string json = JsonConvert.SerializeXNode(XElement.Parse(xml))", span="414-414", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.GroupElementsOfTheSameName()", file="XmlNodeConverterTest.cs"];
m11_185 [label="Assert.AreEqual(@''{''''root'''':{''''p'''':{''''#text'''':[''''Text1'''','''' Text2''''],''''span'''':[''''Span1'''',''''Span2'''']}}}'', json)", span="416-416", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.GroupElementsOfTheSameName()", file="XmlNodeConverterTest.cs"];
m11_186 [label="XDocument doc = JsonConvert.DeserializeXNode(json)", span="418-418", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.GroupElementsOfTheSameName()", file="XmlNodeConverterTest.cs"];
m11_187 [label="StringAssert.AreEqual(@''<root>\r\n  <p>Text1 Text2<span>Span1</span><span>Span2</span></p>\r\n</root>'', doc.ToString())", span="420-422", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.GroupElementsOfTheSameName()", file="XmlNodeConverterTest.cs"];
m11_188 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.GroupElementsOfTheSameName()", span="410-410", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.GroupElementsOfTheSameName()", file="XmlNodeConverterTest.cs"];
m11_622 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmtpyElementWithArrayAttributeShouldWriteElement()", span="2021-2021", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmtpyElementWithArrayAttributeShouldWriteElement()", file="XmlNodeConverterTest.cs"];
m11_623 [label="string xml = @''<root>\r\n<Reports d1p1:Array=''''true'''' xmlns:d1p1=''''http://james.newtonking.com/projects/json'''' />\r\n</root>''", span="2023-2025", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmtpyElementWithArrayAttributeShouldWriteElement()", file="XmlNodeConverterTest.cs"];
m11_624 [label="XmlDocument d = new XmlDocument()", span="2027-2027", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmtpyElementWithArrayAttributeShouldWriteElement()", file="XmlNodeConverterTest.cs"];
m11_625 [label="d.LoadXml(xml)", span="2028-2028", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmtpyElementWithArrayAttributeShouldWriteElement()", file="XmlNodeConverterTest.cs"];
m11_626 [label="string json = JsonConvert.SerializeXmlNode(d, Formatting.Indented)", span="2030-2030", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmtpyElementWithArrayAttributeShouldWriteElement()", file="XmlNodeConverterTest.cs"];
m11_627 [label="StringAssert.AreEqual(@''{\r\n  ''''root'''': {\r\n    ''''Reports'''': [\r\n      {}\r\n    ]\r\n  }\r\n}'', json)", span="2032-2038", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmtpyElementWithArrayAttributeShouldWriteElement()", file="XmlNodeConverterTest.cs"];
m11_628 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmtpyElementWithArrayAttributeShouldWriteElement()", span="2021-2021", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmtpyElementWithArrayAttributeShouldWriteElement()", file="XmlNodeConverterTest.cs"];
m11_109 [label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object)", span="524-524", cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object)", file="XmlNodeConverterTest.cs"];
m11_96 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MyModel.MyModel()", span="178-178", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MyModel.MyModel()", file="XmlNodeConverterTest.cs"];
m11_293 [label="Entry Unk.CreateDocumentFragment", span="", cluster="Unk.CreateDocumentFragment", file="XmlNodeConverterTest.cs"];
m11_110 [label="Entry Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string)", span="703-703", cluster="Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string)", file="XmlNodeConverterTest.cs"];
m11_595 [label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object, params Newtonsoft.Json.JsonConverter[])", span="548-548", cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, params Newtonsoft.Json.JsonConverter[])", file="XmlNodeConverterTest.cs"];
m11_593 [label="Entry System.DateTime.DateTime(int, int, int, int, int, int, System.DateTimeKind)", span="0-0", cluster="System.DateTime.DateTime(int, int, int, int, int, int, System.DateTimeKind)", file="XmlNodeConverterTest.cs"];
m11_756 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyNodeAndOmitRoot()", span="2733-2733", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyNodeAndOmitRoot()", file="XmlNodeConverterTest.cs"];
m11_757 [label="string xmlString = @''<myemptynode />''", span="2735-2735", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyNodeAndOmitRoot()", file="XmlNodeConverterTest.cs"];
m11_758 [label="XmlDocument xml = new XmlDocument()", span="2737-2737", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyNodeAndOmitRoot()", file="XmlNodeConverterTest.cs"];
m11_759 [label="xml.LoadXml(xmlString)", span="2738-2738", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyNodeAndOmitRoot()", file="XmlNodeConverterTest.cs"];
m11_760 [label="string json = JsonConvert.SerializeXmlNode(xml, Formatting.Indented, true)", span="2740-2740", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyNodeAndOmitRoot()", file="XmlNodeConverterTest.cs"];
m11_761 [label="Assert.AreEqual(''null'', json)", span="2742-2742", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyNodeAndOmitRoot()", file="XmlNodeConverterTest.cs"];
m11_762 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyNodeAndOmitRoot()", span="2733-2733", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyNodeAndOmitRoot()", file="XmlNodeConverterTest.cs"];
m11_884 [label="Entry System.Text.StringBuilder.StringBuilder(int)", span="0-0", cluster="System.Text.StringBuilder.StringBuilder(int)", file="XmlNodeConverterTest.cs"];
m11_215 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeUndeclaredNamespacePrefix()", span="473-473", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeUndeclaredNamespacePrefix()", file="XmlNodeConverterTest.cs"];
m11_216 [label="XmlDocument doc = JsonConvert.DeserializeXmlNode(''{ A: { '@xsi:nil': true } }'')", span="475-475", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeUndeclaredNamespacePrefix()", file="XmlNodeConverterTest.cs"];
m11_217 [label="Assert.AreEqual(@''<A nil=''''true'''' />'', doc.OuterXml)", span="477-477", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeUndeclaredNamespacePrefix()", file="XmlNodeConverterTest.cs"];
m11_219 [label="Assert.AreEqual(doc.OuterXml, xdoc.ToString())", span="481-481", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeUndeclaredNamespacePrefix()", file="XmlNodeConverterTest.cs"];
m11_218 [label="XDocument xdoc = JsonConvert.DeserializeXNode(''{ A: { '@xsi:nil': true } }'')", span="479-479", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeUndeclaredNamespacePrefix()", file="XmlNodeConverterTest.cs"];
m11_220 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeUndeclaredNamespacePrefix()", span="473-473", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeUndeclaredNamespacePrefix()", file="XmlNodeConverterTest.cs"];
m11_321 [label="Entry System.Text.StringBuilder.ToString()", span="0-0", cluster="System.Text.StringBuilder.ToString()", file="XmlNodeConverterTest.cs"];
m11_606 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.OmitRootObject()", span="1937-1937", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.OmitRootObject()", file="XmlNodeConverterTest.cs"];
m11_607 [label="string xml = @''<test>\r\n  <Name>Hi</Name>\r\n  <Name>Hi</Name>\r\n  <Products json:Array=''''true'''' xmlns:json=''''http://james.newtonking.com/projects/json''''>\r\n    <Name>First</Name>\r\n    <ExpiryDate>2000-01-01T00:00:00Z</ExpiryDate>\r\n    <Price>0</Price>\r\n    <Sizes />\r\n  </Products>\r\n</test>''", span="1939-1948", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.OmitRootObject()", file="XmlNodeConverterTest.cs"];
m11_608 [label="XmlDocument d = new XmlDocument()", span="1950-1950", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.OmitRootObject()", file="XmlNodeConverterTest.cs"];
m11_609 [label="d.LoadXml(xml)", span="1951-1951", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.OmitRootObject()", file="XmlNodeConverterTest.cs"];
m11_610 [label="string output = JsonConvert.SerializeXmlNode(d, Formatting.Indented, true)", span="1953-1953", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.OmitRootObject()", file="XmlNodeConverterTest.cs"];
m11_611 [label="StringAssert.AreEqual(@''{\r\n  ''''Name'''': [\r\n    ''''Hi'''',\r\n    ''''Hi''''\r\n  ],\r\n  ''''Products'''': [\r\n    {\r\n      ''''Name'''': ''''First'''',\r\n      ''''ExpiryDate'''': ''''2000-01-01T00:00:00Z'''',\r\n      ''''Price'''': ''''0'''',\r\n      ''''Sizes'''': null\r\n    }\r\n  ]\r\n}'', output)", span="1955-1968", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.OmitRootObject()", file="XmlNodeConverterTest.cs"];
m11_612 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.OmitRootObject()", span="1937-1937", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.OmitRootObject()", file="XmlNodeConverterTest.cs"];
m11_327 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NamespaceSerializeDeserialize()", span="827-827", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NamespaceSerializeDeserialize()", file="XmlNodeConverterTest.cs"];
m11_328 [label="string xml = @''<?xml version=''''1.0'''' encoding=''''utf-8'''' ?>\r\n<xs:schema xs:id=''''SomeID'''' \r\n	xmlns='''''''' \r\n	xmlns:xs=''''http://www.w3.org/2001/XMLSchema'''' \r\n	xmlns:msdata=''''urn:schemas-microsoft-com:xml-msdata''''>\r\n	<xs:element name=''''MyDataSet'''' msdata:IsDataSet=''''true''''>\r\n		<xs:complexType>\r\n			<xs:choice maxOccurs=''''unbounded''''>\r\n				<xs:element name=''''customers'''' >\r\n					<xs:complexType >\r\n						<xs:sequence>\r\n							<xs:element name=''''CustomerID'''' type=''''xs:integer'''' \r\n										 minOccurs=''''0'''' />\r\n							<xs:element name=''''CompanyName'''' type=''''xs:string'''' \r\n										 minOccurs=''''0'''' />\r\n							<xs:element name=''''Phone'''' type=''''xs:string'''' />\r\n						</xs:sequence>\r\n					</xs:complexType>\r\n				</xs:element>\r\n			</xs:choice>\r\n		</xs:complexType>\r\n	</xs:element>\r\n</xs:schema>''", span="829-851", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NamespaceSerializeDeserialize()", file="XmlNodeConverterTest.cs"];
m11_329 [label="XmlDocument doc = new XmlDocument()", span="853-853", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NamespaceSerializeDeserialize()", file="XmlNodeConverterTest.cs"];
m11_330 [label="doc.LoadXml(xml)", span="854-854", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NamespaceSerializeDeserialize()", file="XmlNodeConverterTest.cs"];
m11_331 [label="string jsonText = SerializeXmlNode(doc)", span="856-856", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NamespaceSerializeDeserialize()", file="XmlNodeConverterTest.cs"];
m11_335 [label="Assert.AreEqual(doc.InnerXml, deserializedDoc.InnerXml)", span="907-907", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NamespaceSerializeDeserialize()", file="XmlNodeConverterTest.cs"];
m11_332 [label="string expected = @''{\r\n  ''''?xml'''': {\r\n    ''''@version'''': ''''1.0'''',\r\n    ''''@encoding'''': ''''utf-8''''\r\n  },\r\n  ''''xs:schema'''': {\r\n    ''''@xs:id'''': ''''SomeID'''',\r\n    ''''@xmlns'''': '''''''',\r\n    ''''@xmlns:xs'''': ''''http://www.w3.org/2001/XMLSchema'''',\r\n    ''''@xmlns:msdata'''': ''''urn:schemas-microsoft-com:xml-msdata'''',\r\n    ''''xs:element'''': {\r\n      ''''@name'''': ''''MyDataSet'''',\r\n      ''''@msdata:IsDataSet'''': ''''true'''',\r\n      ''''xs:complexType'''': {\r\n        ''''xs:choice'''': {\r\n          ''''@maxOccurs'''': ''''unbounded'''',\r\n          ''''xs:element'''': {\r\n            ''''@name'''': ''''customers'''',\r\n            ''''xs:complexType'''': {\r\n              ''''xs:sequence'''': {\r\n                ''''xs:element'''': [\r\n                  {\r\n                    ''''@name'''': ''''CustomerID'''',\r\n                    ''''@type'''': ''''xs:integer'''',\r\n                    ''''@minOccurs'''': ''''0''''\r\n                  },\r\n                  {\r\n                    ''''@name'''': ''''CompanyName'''',\r\n                    ''''@type'''': ''''xs:string'''',\r\n                    ''''@minOccurs'''': ''''0''''\r\n                  },\r\n                  {\r\n                    ''''@name'''': ''''Phone'''',\r\n                    ''''@type'''': ''''xs:string''''\r\n                  }\r\n                ]\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}''", span="858-901", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NamespaceSerializeDeserialize()", file="XmlNodeConverterTest.cs"];
m11_333 [label="StringAssert.AreEqual(expected, jsonText)", span="903-903", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NamespaceSerializeDeserialize()", file="XmlNodeConverterTest.cs"];
m11_334 [label="XmlDocument deserializedDoc = (XmlDocument)DeserializeXmlNode(jsonText)", span="905-905", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NamespaceSerializeDeserialize()", file="XmlNodeConverterTest.cs"];
m11_336 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NamespaceSerializeDeserialize()", span="827-827", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NamespaceSerializeDeserialize()", file="XmlNodeConverterTest.cs"];
m11_524 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArray()", span="1612-1612", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArray()", file="XmlNodeConverterTest.cs"];
m11_525 [label="string json = @''{\r\n  ''''$id'''': ''''1'''',\r\n  ''''$values'''': [\r\n    ''''1'''',\r\n    ''''2'''',\r\n    ''''3'''',\r\n    ''''4'''',\r\n    ''''5''''\r\n  ]\r\n}''", span="1614-1623", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArray()", file="XmlNodeConverterTest.cs"];
m11_526 [label="XmlNode node = JsonConvert.DeserializeXmlNode(json, ''root'')", span="1625-1625", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArray()", file="XmlNodeConverterTest.cs"];
m11_530 [label="StringAssert.AreEqual(json, newJson)", span="1639-1639", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArray()", file="XmlNodeConverterTest.cs"];
m11_527 [label="string xml = GetIndentedInnerXml(node)", span="1626-1626", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArray()", file="XmlNodeConverterTest.cs"];
m11_529 [label="string newJson = JsonConvert.SerializeXmlNode(node, Formatting.Indented, true)", span="1637-1637", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArray()", file="XmlNodeConverterTest.cs"];
m11_528 [label="StringAssert.AreEqual(@''<?xml version=''''1.0'''' encoding=''''utf-16''''?>\r\n<root xmlns:json=''''http://james.newtonking.com/projects/json'''' json:id=''''1''''>\r\n  <values xmlns=''''http://james.newtonking.com/projects/json''''>1</values>\r\n  <values xmlns=''''http://james.newtonking.com/projects/json''''>2</values>\r\n  <values xmlns=''''http://james.newtonking.com/projects/json''''>3</values>\r\n  <values xmlns=''''http://james.newtonking.com/projects/json''''>4</values>\r\n  <values xmlns=''''http://james.newtonking.com/projects/json''''>5</values>\r\n</root>'', xml)", span="1628-1635", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArray()", file="XmlNodeConverterTest.cs"];
m11_531 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArray()", span="1612-1612", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArray()", file="XmlNodeConverterTest.cs"];
m11_418 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesXmlDocument()", span="1167-1167", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesXmlDocument()", file="XmlNodeConverterTest.cs"];
m11_419 [label="string json = @''{''''count'''': 773840,''''photos'''': null}''", span="1169-1169", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesXmlDocument()", file="XmlNodeConverterTest.cs", color=green, community=0];
m11_420 [label="ExceptionAssert.Throws<JsonSerializationException>(\r\n                () => { JsonConvert.DeserializeXmlNode(json); },\r\n                ''JSON root object has multiple properties. The root object must have a single property in order to create a valid XML document. Consider specifying a DeserializeRootElementName. Path 'photos', line 1, position 26.'')", span="1171-1173", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesXmlDocument()", file="XmlNodeConverterTest.cs", color=green, community=0];
m11_421 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesXmlDocument()", span="1167-1167", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesXmlDocument()", file="XmlNodeConverterTest.cs"];
m11_222 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeMultipleRootElements()", span="488-488", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeMultipleRootElements()", file="XmlNodeConverterTest.cs"];
m11_223 [label="string json = @''{\r\n    ''''Id'''': 1,\r\n     ''''Email'''': ''''james@example.com'''',\r\n     ''''Active'''': true,\r\n     ''''CreatedDate'''': ''''2013-01-20T00:00:00Z'''',\r\n     ''''Roles'''': [\r\n       ''''User'''',\r\n       ''''Admin''''\r\n     ],\r\n    ''''Team'''': {\r\n        ''''Id'''': 2,\r\n        ''''Name'''': ''''Software Developers'''',\r\n        ''''Description'''': ''''Creators of fine software products and services.''''\r\n    }\r\n}''", span="490-504", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeMultipleRootElements()", file="XmlNodeConverterTest.cs"];
m11_224 [label="ExceptionAssert.Throws<JsonSerializationException>(\r\n                () => { JsonConvert.DeserializeXmlNode(json); },\r\n                ''JSON root object has multiple properties. The root object must have a single property in order to create a valid XML document. Consider specifying a DeserializeRootElementName. Path 'Email', line 3, position 13.'')", span="505-507", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeMultipleRootElements()", file="XmlNodeConverterTest.cs"];
m11_225 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeMultipleRootElements()", span="488-488", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeMultipleRootElements()", file="XmlNodeConverterTest.cs"];
m11_541 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayWithIdLast()", span="1675-1675", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayWithIdLast()", file="XmlNodeConverterTest.cs"];
m11_542 [label="string json = @''{\r\n  ''''$values'''': [\r\n    ''''1'''',\r\n    ''''2'''',\r\n    ''''3'''',\r\n    ''''4'''',\r\n    ''''5''''\r\n  ],\r\n  ''''$id'''': ''''1''''\r\n}''", span="1677-1686", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayWithIdLast()", file="XmlNodeConverterTest.cs"];
m11_543 [label="XmlNode node = JsonConvert.DeserializeXmlNode(json, ''root'')", span="1688-1688", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayWithIdLast()", file="XmlNodeConverterTest.cs"];
m11_544 [label="string xml = GetIndentedInnerXml(node)", span="1689-1689", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayWithIdLast()", file="XmlNodeConverterTest.cs"];
m11_546 [label="string newJson = JsonConvert.SerializeXmlNode(node, Formatting.Indented, true)", span="1700-1700", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayWithIdLast()", file="XmlNodeConverterTest.cs"];
m11_545 [label="StringAssert.AreEqual(@''<?xml version=''''1.0'''' encoding=''''utf-16''''?>\r\n<root xmlns:json=''''http://james.newtonking.com/projects/json'''' json:id=''''1''''>\r\n  <values xmlns=''''http://james.newtonking.com/projects/json''''>1</values>\r\n  <values xmlns=''''http://james.newtonking.com/projects/json''''>2</values>\r\n  <values xmlns=''''http://james.newtonking.com/projects/json''''>3</values>\r\n  <values xmlns=''''http://james.newtonking.com/projects/json''''>4</values>\r\n  <values xmlns=''''http://james.newtonking.com/projects/json''''>5</values>\r\n</root>'', xml)", span="1691-1698", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayWithIdLast()", file="XmlNodeConverterTest.cs"];
m11_547 [label="StringAssert.AreEqual(@''{\r\n  ''''$id'''': ''''1'''',\r\n  ''''$values'''': [\r\n    ''''1'''',\r\n    ''''2'''',\r\n    ''''3'''',\r\n    ''''4'''',\r\n    ''''5''''\r\n  ]\r\n}'', newJson)", span="1702-1711", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayWithIdLast()", file="XmlNodeConverterTest.cs"];
m11_548 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayWithIdLast()", span="1675-1675", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayWithIdLast()", file="XmlNodeConverterTest.cs"];
m11_649 [label="Entry System.IO.MemoryStream.MemoryStream(byte[])", span="0-0", cluster="System.IO.MemoryStream.MemoryStream(byte[])", file="XmlNodeConverterTest.cs"];
m11_337 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentDeserialize()", span="911-911", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentDeserialize()", file="XmlNodeConverterTest.cs"];
m11_338 [label="string jsonText = @''{\r\n  ''''?xml'''': {\r\n    ''''@version'''': ''''1.0'''',\r\n    ''''@standalone'''': ''''no''''\r\n  },\r\n  ''''span'''': {\r\n    ''''@class'''': ''''vevent'''',\r\n    ''''a'''': {\r\n      ''''@class'''': ''''url'''',\r\n      ''''span'''': {\r\n        ''''@class'''': ''''summary'''',\r\n        ''''#text'''': ''''Web 2.0 Conference'''',\r\n        ''''#cdata-section'''': ''''my escaped text''''\r\n      },\r\n      ''''@href'''': ''''http://www.web2con.com/''''\r\n    }\r\n  }\r\n}''", span="913-930", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentDeserialize()", file="XmlNodeConverterTest.cs"];
m11_339 [label="XmlDocument doc = (XmlDocument)DeserializeXmlNode(jsonText)", span="932-932", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentDeserialize()", file="XmlNodeConverterTest.cs"];
m11_340 [label="string expected = @''<?xml version=''''1.0'''' standalone=''''no''''?>\r\n<span class=''''vevent''''>\r\n  <a class=''''url'''' href=''''http://www.web2con.com/''''>\r\n    <span class=''''summary''''>Web 2.0 Conference<![CDATA[my escaped text]]></span>\r\n  </a>\r\n</span>''", span="934-939", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentDeserialize()", file="XmlNodeConverterTest.cs"];
m11_341 [label="string formattedXml = GetIndentedInnerXml(doc)", span="941-941", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentDeserialize()", file="XmlNodeConverterTest.cs"];
m11_342 [label="StringAssert.AreEqual(expected, formattedXml)", span="943-943", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentDeserialize()", file="XmlNodeConverterTest.cs"];
m11_343 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentDeserialize()", span="911-911", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentDeserialize()", file="XmlNodeConverterTest.cs"];
m11_859 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDocumentImplicitAttributeNamespace()", span="2904-2904", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDocumentImplicitAttributeNamespace()", file="XmlNodeConverterTest.cs"];
m11_860 [label="var original = new XDocument(new XElement(''{http://example.com}MyElement''))", span="2906-2906", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDocumentImplicitAttributeNamespace()", file="XmlNodeConverterTest.cs"];
m11_861 [label="Assert.AreEqual(@''<MyElement xmlns=''''http://example.com'''' />'', original.ToString())", span="2907-2907", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDocumentImplicitAttributeNamespace()", file="XmlNodeConverterTest.cs"];
m11_862 [label="var json = JsonConvert.SerializeObject(original)", span="2909-2909", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDocumentImplicitAttributeNamespace()", file="XmlNodeConverterTest.cs"];
m11_863 [label="Assert.AreEqual(@''{''''MyElement'''':{''''@xmlns'''':''''http://example.com''''}}'', json)", span="2910-2910", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDocumentImplicitAttributeNamespace()", file="XmlNodeConverterTest.cs"];
m11_864 [label="var deserialized = JsonConvert.DeserializeObject<XDocument>(json)", span="2912-2912", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDocumentImplicitAttributeNamespace()", file="XmlNodeConverterTest.cs"];
m11_865 [label="Assert.AreEqual(@''<MyElement xmlns=''''http://example.com'''' />'', deserialized.ToString())", span="2913-2913", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDocumentImplicitAttributeNamespace()", file="XmlNodeConverterTest.cs"];
m11_866 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDocumentImplicitAttributeNamespace()", span="2904-2904", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDocumentImplicitAttributeNamespace()", file="XmlNodeConverterTest.cs"];
m11_650 [label="Entry System.Text.Encoding.GetBytes(string)", span="0-0", cluster="System.Text.Encoding.GetBytes(string)", file="XmlNodeConverterTest.cs"];
m11_576 [label="Entry Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", span="357-357", cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", file="XmlNodeConverterTest.cs"];
m11_888 [label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest", span="", file="XmlNodeConverterTest.cs"];
m11_889 [label=json, span="", file="XmlNodeConverterTest.cs"];
m11_890 [label=json, span="", file="XmlNodeConverterTest.cs"];
m11_891 [label=json, span="", file="XmlNodeConverterTest.cs"];
m11_892 [label=json, span="", file="XmlNodeConverterTest.cs"];
m11_893 [label=json, span="", file="XmlNodeConverterTest.cs"];
m11_894 [label=json, span="", file="XmlNodeConverterTest.cs"];
m0_26 -> m0_24  [key=0, style=bold, color=blue];
m0_555 -> m0_557  [key=0, style=solid];
m0_555 -> m0_558  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_555 -> m0_559  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_555 -> m0_560  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_555 -> m0_561  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_555 -> m0_562  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_555 -> m0_563  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_555 -> m0_564  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_555 -> m0_565  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_555 -> m0_566  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_555 -> m0_567  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_555 -> m0_568  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_555 -> m0_569  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_555 -> m0_570  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_555 -> m0_571  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_555 -> m0_572  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_555 -> m0_573  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_555 -> m0_574  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_555 -> m0_576  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_555 -> m0_578  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_557 -> m0_558  [key=0, style=solid];
m0_557 -> m0_559  [key=0, style=solid];
m0_558 -> m0_579  [key=0, style=solid];
m0_558 -> m0_519  [key=2, style=dotted];
m0_559 -> m0_560  [key=0, style=solid];
m0_559 -> m0_563  [key=0, style=solid];
m0_560 -> m0_561  [key=0, style=solid];
m0_560 -> m0_562  [key=0, style=solid];
m0_561 -> m0_579  [key=0, style=solid];
m0_561 -> m0_580  [key=2, style=dotted];
m0_562 -> m0_579  [key=0, style=solid];
m0_562 -> m0_581  [key=2, style=dotted];
m0_562 -> m0_580  [key=2, style=dotted];
m0_563 -> m0_564  [key=0, style=solid];
m0_563 -> m0_569  [key=0, style=solid];
m0_564 -> m0_565  [key=0, style=solid];
m0_564 -> m0_566  [key=0, style=solid];
m0_565 -> m0_579  [key=0, style=solid];
m0_565 -> m0_580  [key=2, style=dotted];
m0_566 -> m0_567  [key=0, style=solid];
m0_566 -> m0_568  [key=0, style=solid];
m0_567 -> m0_579  [key=0, style=solid];
m0_567 -> m0_580  [key=2, style=dotted];
m0_568 -> m0_579  [key=0, style=solid];
m0_568 -> m0_582  [key=2, style=dotted];
m0_568 -> m0_580  [key=2, style=dotted];
m0_569 -> m0_570  [key=0, style=solid];
m0_569 -> m0_571  [key=0, style=solid];
m0_570 -> m0_579  [key=0, style=solid];
m0_570 -> m0_583  [key=2, style=dotted];
m0_570 -> m0_580  [key=2, style=dotted];
m0_571 -> m0_572  [key=0, style=solid];
m0_571 -> m0_576  [key=0, style=solid];
m0_572 -> m0_573  [key=0, style=solid];
m0_572 -> m0_574  [key=0, style=solid];
m0_573 -> m0_579  [key=0, style=solid];
m0_573 -> m0_580  [key=2, style=dotted];
m0_574 -> m0_575  [key=0, style=solid];
m0_574 -> m0_584  [key=2, style=dotted];
m0_576 -> m0_577  [key=0, style=solid];
m0_576 -> m0_578  [key=0, style=solid];
m0_578 -> m0_579  [key=0, style=solid];
m0_578 -> m0_586  [key=2, style=dotted];
m0_578 -> m0_587  [key=2, style=dotted];
m0_575 -> m0_579  [key=0, style=solid];
m0_575 -> m0_585  [key=2, style=dotted];
m0_575 -> m0_580  [key=2, style=dotted];
m0_577 -> m0_579  [key=0, style=solid];
m0_579 -> m0_555  [key=0, style=bold, color=blue];
m0_34 -> m0_35  [key=0, style=solid];
m0_35 -> m0_36  [key=0, style=solid];
m0_35 -> m0_6  [key=2, style=dotted];
m0_35 -> m0_37  [key=2, style=dotted];
m0_36 -> m0_34  [key=0, style=bold, color=blue];
m0_36 -> m0_37  [key=0, style=solid, color=green];
m0_65 -> m0_66  [key=0, style=solid];
m0_66 -> m0_5  [key=2, style=dotted];
m0_66 -> m0_67  [key=0, style=solid];
m0_66 -> m0_71  [key=1, style=dashed, color=darkseagreen4, label=regex];
m0_66 -> m0_68  [key=2, style=dotted];
m0_67 -> m0_20  [key=2, style=dotted];
m0_67 -> m0_68  [key=0, style=solid];
m0_67 -> m0_73  [key=1, style=dashed, color=darkseagreen4, label=ms];
m0_67 -> m0_75  [key=1, style=dashed, color=darkseagreen4, label=ms];
m0_67 -> m0_76  [key=1, style=dashed, color=darkseagreen4, label=ms];
m0_67 -> m0_65  [key=0, style=bold, color=blue];
m0_71 -> m0_24  [key=2, style=dotted];
m0_71 -> m0_25  [key=2, style=dotted];
m0_71 -> m0_72  [key=0, style=solid];
m0_71 -> m0_69  [key=0, style=bold, color=blue];
m0_68 -> m0_21  [key=2, style=dotted];
m0_68 -> m0_71  [key=1, style=dashed, color=darkseagreen4, label=writer];
m0_68 -> m0_69  [key=0, style=solid];
m0_73 -> m0_26  [key=2, style=dotted];
m0_73 -> m0_27  [key=2, style=dotted];
m0_73 -> m0_74  [key=0, style=solid];
m0_69 -> m0_22  [key=2, style=dotted];
m0_69 -> m0_71  [key=1, style=dashed, color=darkseagreen4, label=serializer];
m0_69 -> m0_70  [key=0, style=solid];
m0_69 -> m0_77  [key=1, style=dashed, color=darkseagreen4, label=serializer];
m0_69 -> m0_78  [key=1, style=dashed, color=darkseagreen4, label=serializer];
m0_70 -> m0_6  [key=2, style=dotted];
m0_70 -> m0_23  [key=2, style=dotted];
m0_70 -> m0_71  [key=0, style=solid];
m0_77 -> m0_6  [key=2, style=dotted];
m0_77 -> m0_23  [key=2, style=dotted];
m0_77 -> m0_78  [key=0, style=solid];
m0_77 -> m0_75  [key=0, style=bold, color=blue];
m0_74 -> m0_8  [key=2, style=dotted];
m0_74 -> m0_75  [key=0, style=solid];
m0_74 -> m0_72  [key=0, style=bold, color=blue];
m0_79 -> m0_8  [key=2, style=dotted];
m0_79 -> m0_35  [key=2, style=dotted];
m0_79 -> m0_80  [key=0, style=solid];
m0_79 -> m0_82  [key=0, style=solid];
m0_79 -> m0_84  [key=0, style=solid];
m0_79 -> m0_86  [key=0, style=solid];
m0_80 -> m0_8  [key=2, style=dotted];
m0_80 -> m0_81  [key=0, style=solid];
m0_76 -> m0_47  [key=2, style=dotted];
m0_76 -> m0_77  [key=0, style=solid];
m0_76 -> m0_78  [key=1, style=dashed, color=darkseagreen4, label=reader];
m0_78 -> m0_48  [key=2, style=dotted];
m0_78 -> m0_79  [key=0, style=solid];
m0_78 -> m0_80  [key=1, style=dashed, color=darkseagreen4, label=c];
m0_78 -> m0_81  [key=1, style=dashed, color=darkseagreen4, label=XmlNode];
m0_78 -> m0_83  [key=1, style=dashed, color=darkseagreen4, label=XmlNode];
m0_78 -> m0_85  [key=1, style=dashed, color=darkseagreen4, label=XmlNode];
m0_78 -> m0_86  [key=1, style=dashed, color=darkseagreen4, label=XmlNode];
m0_75 -> m0_76  [key=0, style=solid];
m0_75 -> m0_64  [key=2, style=dotted];
m0_72 -> m0_73  [key=0, style=solid];
m0_72 -> m0_74  [key=1, style=dashed, color=darkseagreen4, label=expected];
m0_72 -> m0_72  [key=3, color=darkorchid, style=bold, label="Local variable string expected"];
m0_81 -> m0_65  [key=0, style=bold, color=blue];
m0_81 -> m0_87  [key=0, style=solid];
m0_81 -> m0_57  [key=2, style=dotted];
m0_133 -> m0_134  [key=0, style=solid];
m0_134 -> m0_135  [key=0, style=solid];
m0_134 -> m0_136  [key=2, style=dotted];
m0_134 -> m0_137  [key=2, style=dotted];
m0_135 -> m0_133  [key=0, style=bold, color=blue];
m0_95 -> m0_96  [key=0, style=solid];
m0_96 -> m0_95  [key=0, style=bold, color=blue];
m0_109 -> m0_110  [key=0, style=solid];
m0_110 -> m0_109  [key=0, style=bold, color=blue];
m0_156 -> m0_157  [key=0, style=solid];
m0_157 -> m0_158  [key=0, style=solid];
m0_157 -> m0_128  [key=2, style=dotted];
m0_157 -> m0_159  [key=2, style=dotted];
m0_158 -> m0_156  [key=0, style=bold, color=blue];
m0_200 -> m0_201  [key=0, style=solid];
m0_200 -> m0_202  [key=1, style=dashed, color=darkseagreen4, label=XObject];
m0_200 -> m0_203  [key=1, style=dashed, color=darkseagreen4, label=XObject];
m0_200 -> m0_204  [key=1, style=dashed, color=darkseagreen4, label=XObject];
m0_200 -> m0_205  [key=1, style=dashed, color=darkseagreen4, label=XObject];
m0_200 -> m0_206  [key=1, style=dashed, color=darkseagreen4, label=XObject];
m0_200 -> m0_207  [key=1, style=dashed, color=darkseagreen4, label=XObject];
m0_200 -> m0_208  [key=1, style=dashed, color=darkseagreen4, label=XObject];
m0_200 -> m0_209  [key=1, style=dashed, color=darkseagreen4, label=XObject];
m0_200 -> m0_210  [key=1, style=dashed, color=darkseagreen4, label=XObject];
m0_200 -> m0_211  [key=1, style=dashed, color=darkseagreen4, label=XObject];
m0_200 -> m0_212  [key=1, style=dashed, color=darkseagreen4, label=XObject];
m0_200 -> m0_213  [key=1, style=dashed, color=darkseagreen4, label=XObject];
m0_200 -> m0_214  [key=1, style=dashed, color=darkseagreen4, label=XObject];
m0_200 -> m0_215  [key=1, style=dashed, color=darkseagreen4, label=XObject];
m0_200 -> m0_216  [key=1, style=dashed, color=darkseagreen4, label=XObject];
m0_200 -> m0_217  [key=1, style=dashed, color=darkseagreen4, label=XObject];
m0_201 -> m0_202  [key=0, style=solid];
m0_201 -> m0_203  [key=0, style=solid];
m0_202 -> m0_218  [key=0, style=solid];
m0_202 -> m0_131  [key=2, style=dotted];
m0_203 -> m0_204  [key=0, style=solid];
m0_203 -> m0_205  [key=0, style=solid];
m0_204 -> m0_218  [key=0, style=solid];
m0_204 -> m0_168  [key=2, style=dotted];
m0_205 -> m0_206  [key=0, style=solid];
m0_205 -> m0_207  [key=0, style=solid];
m0_206 -> m0_218  [key=0, style=solid];
m0_206 -> m0_198  [key=2, style=dotted];
m0_207 -> m0_208  [key=0, style=solid];
m0_207 -> m0_209  [key=0, style=solid];
m0_208 -> m0_218  [key=0, style=solid];
m0_208 -> m0_163  [key=2, style=dotted];
m0_209 -> m0_210  [key=0, style=solid];
m0_209 -> m0_211  [key=0, style=solid];
m0_210 -> m0_218  [key=0, style=solid];
m0_210 -> m0_193  [key=2, style=dotted];
m0_211 -> m0_212  [key=0, style=solid];
m0_211 -> m0_213  [key=0, style=solid];
m0_212 -> m0_218  [key=0, style=solid];
m0_212 -> m0_195  [key=2, style=dotted];
m0_213 -> m0_214  [key=0, style=solid];
m0_213 -> m0_215  [key=0, style=solid];
m0_214 -> m0_218  [key=0, style=solid];
m0_214 -> m0_179  [key=2, style=dotted];
m0_215 -> m0_216  [key=0, style=solid];
m0_215 -> m0_217  [key=0, style=solid];
m0_216 -> m0_218  [key=0, style=solid];
m0_216 -> m0_128  [key=2, style=dotted];
m0_217 -> m0_218  [key=0, style=solid];
m0_217 -> m0_219  [key=2, style=dotted];
m0_218 -> m0_200  [key=0, style=bold, color=blue];
m0_170 -> m0_171  [key=0, style=solid];
m0_170 -> m0_172  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_171 -> m0_172  [key=0, style=solid];
m0_171 -> m0_174  [key=2, style=dotted];
m0_172 -> m0_173  [key=0, style=solid];
m0_172 -> m0_168  [key=2, style=dotted];
m0_172 -> m0_169  [key=2, style=dotted];
m0_172 -> m0_175  [key=2, style=dotted];
m0_173 -> m0_170  [key=0, style=bold, color=blue];
m0_496 -> m0_524  [key=0, style=solid];
m0_496 -> m0_526  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_496 -> m0_527  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_496 -> m0_528  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_496 -> m0_529  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_496 -> m0_530  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_496 -> m0_532  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.IXmlDocument"];
m0_496 -> m0_533  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.IXmlNode"];
m0_496 -> m0_534  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.IXmlDocument"];
m0_496 -> m0_535  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.IXmlNode"];
m0_496 -> m0_538  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.IXmlDocument"];
m0_496 -> m0_540  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_496 -> m0_541  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_496 -> m0_542  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_496 -> m0_543  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_496 -> m0_544  [key=1, style=dashed, color=darkseagreen4, label=XmlNamespaceManager];
m0_496 -> m0_545  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_496 -> m0_546  [key=1, style=dashed, color=darkseagreen4, label=XmlNamespaceManager];
m0_496 -> m0_547  [key=1, style=dashed, color=darkseagreen4, label=XmlNamespaceManager];
m0_524 -> m0_525  [key=0, style=solid];
m0_524 -> m0_526  [key=0, style=solid];
m0_524 -> m0_295  [key=2, style=dotted];
m0_526 -> m0_527  [key=0, style=solid];
m0_526 -> m0_549  [key=2, style=dotted];
m0_526 -> m0_536  [key=1, style=dashed, color=darkseagreen4, label=attributeNameValues];
m0_527 -> m0_528  [key=0, style=solid];
m0_527 -> m0_550  [key=2, style=dotted];
m0_527 -> m0_534  [key=1, style=dashed, color=darkseagreen4, label=elementPrefix];
m0_528 -> m0_529  [key=0, style=solid];
m0_528 -> m0_534  [key=0, style=solid];
m0_528 -> m0_551  [key=2, style=dotted];
m0_529 -> m0_530  [key=0, style=solid];
m0_529 -> m0_552  [key=2, style=dotted];
m0_529 -> m0_531  [key=1, style=dashed, color=darkseagreen4, label=attributeName];
m0_529 -> m0_532  [key=1, style=dashed, color=darkseagreen4, label=attributeName];
m0_530 -> m0_531  [key=0, style=solid];
m0_530 -> m0_519  [key=2, style=dotted];
m0_530 -> m0_532  [key=1, style=dashed, color=darkseagreen4, label=attributeValue];
m0_532 -> m0_533  [key=0, style=solid];
m0_532 -> m0_295  [key=2, style=dotted];
m0_532 -> m0_553  [key=2, style=dotted];
m0_532 -> m0_51  [key=2, style=dotted];
m0_532 -> m0_115  [key=2, style=dotted];
m0_533 -> m0_548  [key=0, style=solid];
m0_533 -> m0_119  [key=2, style=dotted];
m0_534 -> m0_535  [key=0, style=solid];
m0_534 -> m0_554  [key=2, style=dotted];
m0_534 -> m0_539  [key=1, style=dashed, color=darkseagreen4, label=element];
m0_534 -> m0_541  [key=1, style=dashed, color=darkseagreen4, label=element];
m0_534 -> m0_545  [key=1, style=dashed, color=darkseagreen4, label=element];
m0_535 -> m0_536  [key=0, style=solid];
m0_535 -> m0_123  [key=2, style=dotted];
m0_538 -> m0_539  [key=0, style=solid];
m0_538 -> m0_295  [key=2, style=dotted];
m0_538 -> m0_553  [key=2, style=dotted];
m0_538 -> m0_51  [key=2, style=dotted];
m0_538 -> m0_115  [key=2, style=dotted];
m0_538 -> m0_538  [key=1, style=dashed, color=darkseagreen4, label=nameValue];
m0_540 -> m0_541  [key=0, style=solid];
m0_540 -> m0_542  [key=0, style=solid];
m0_541 -> m0_548  [key=0, style=solid];
m0_541 -> m0_555  [key=2, style=dotted];
m0_541 -> m0_97  [key=2, style=dotted];
m0_541 -> m0_123  [key=2, style=dotted];
m0_542 -> m0_543  [key=0, style=solid];
m0_542 -> m0_548  [key=0, style=solid];
m0_543 -> m0_544  [key=0, style=solid];
m0_543 -> m0_547  [key=0, style=solid];
m0_544 -> m0_545  [key=0, style=solid];
m0_544 -> m0_286  [key=2, style=dotted];
m0_545 -> m0_546  [key=0, style=solid];
m0_545 -> m0_498  [key=2, style=dotted];
m0_546 -> m0_547  [key=0, style=solid];
m0_546 -> m0_454  [key=2, style=dotted];
m0_547 -> m0_548  [key=0, style=solid];
m0_547 -> m0_556  [key=2, style=dotted];
m0_525 -> m0_548  [key=0, style=solid];
m0_525 -> m0_493  [key=2, style=dotted];
m0_536 -> m0_537  [key=0, style=solid];
m0_536 -> m0_540  [key=0, style=solid];
m0_531 -> m0_532  [key=0, style=solid];
m0_531 -> m0_550  [key=2, style=dotted];
m0_539 -> m0_536  [key=0, style=solid];
m0_539 -> m0_119  [key=2, style=dotted];
m0_537 -> m0_538  [key=0, style=solid];
m0_537 -> m0_550  [key=2, style=dotted];
m0_537 -> m0_537  [key=1, style=dashed, color=darkseagreen4, label=nameValue];
m0_548 -> m0_496  [key=0, style=bold, color=blue];
m0_51 -> m0_20  [key=2, style=dotted];
m0_51 -> m0_52  [key=0, style=solid];
m0_51 -> m0_56  [key=1, style=dashed, color=darkseagreen4, label=ms];
m0_51 -> m0_57  [key=1, style=dashed, color=darkseagreen4, label=ms];
m0_117 -> m0_118  [key=0, style=solid];
m0_118 -> m0_117  [key=0, style=bold, color=blue];
m0_179 -> m0_231  [key=0, style=solid];
m0_231 -> m0_179  [key=0, style=bold, color=blue];
m0_21 -> m0_22  [key=0, style=solid];
m0_21 -> m0_6  [key=2, style=dotted];
m0_21 -> m0_23  [key=2, style=dotted];
m0_149 -> m0_150  [key=0, style=solid];
m0_150 -> m0_151  [key=0, style=solid];
m0_150 -> m0_136  [key=2, style=dotted];
m0_150 -> m0_141  [key=2, style=dotted];
m0_151 -> m0_149  [key=0, style=bold, color=blue];
m0_57 -> m0_58  [key=0, style=solid];
m0_57 -> m0_47  [key=2, style=dotted];
m0_57 -> m0_59  [key=1, style=dashed, color=darkseagreen4, label=reader];
m0_58 -> m0_59  [key=0, style=solid];
m0_58 -> m0_6  [key=2, style=dotted];
m0_58 -> m0_23  [key=2, style=dotted];
m0_59 -> m0_57  [key=0, style=bold, color=blue];
m0_59 -> m0_48  [key=2, style=dotted];
m0_59 -> m0_60  [key=0, style=solid];
m0_59 -> m0_61  [key=1, style=dashed, color=darkseagreen4, label=c];
m0_332 -> m0_333  [key=0, style=solid];
m0_332 -> m0_335  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.IXmlNode"];
m0_332 -> m0_336  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.IXmlNode"];
m0_332 -> m0_337  [key=1, style=dashed, color=darkseagreen4, label=XmlNamespaceManager];
m0_332 -> m0_351  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m0_332 -> m0_353  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_332 -> m0_354  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m0_332 -> m0_355  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m0_332 -> m0_358  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m0_332 -> m0_360  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m0_333 -> m0_334  [key=0, style=solid];
m0_333 -> m0_362  [key=2, style=dotted];
m0_333 -> m0_339  [key=1, style=dashed, color=darkseagreen4, label=nodesGroupedByName];
m0_333 -> m0_341  [key=1, style=dashed, color=darkseagreen4, label=nodesGroupedByName];
m0_333 -> m0_344  [key=1, style=dashed, color=darkseagreen4, label=nodesGroupedByName];
m0_335 -> m0_336  [key=0, style=solid];
m0_335 -> m0_344  [key=0, style=solid];
m0_336 -> m0_337  [key=0, style=solid];
m0_336 -> m0_342  [key=1, style=dashed, color=darkseagreen4, label=childNode];
m0_337 -> m0_338  [key=0, style=solid];
m0_337 -> m0_296  [key=2, style=dotted];
m0_337 -> m0_339  [key=1, style=dashed, color=darkseagreen4, label=nodeName];
m0_337 -> m0_341  [key=1, style=dashed, color=darkseagreen4, label=nodeName];
m0_351 -> m0_344  [key=0, style=solid];
m0_351 -> m0_259  [key=2, style=dotted];
m0_353 -> m0_354  [key=0, style=solid];
m0_353 -> m0_355  [key=0, style=solid];
m0_354 -> m0_355  [key=0, style=solid];
m0_354 -> m0_365  [key=2, style=dotted];
m0_355 -> m0_356  [key=0, style=solid];
m0_355 -> m0_366  [key=2, style=dotted];
m0_358 -> m0_359  [key=0, style=solid];
m0_358 -> m0_259  [key=2, style=dotted];
m0_360 -> m0_344  [key=0, style=solid];
m0_360 -> m0_367  [key=2, style=dotted];
m0_334 -> m0_335  [key=0, style=solid];
m0_334 -> m0_336  [key=1, style=dashed, color=darkseagreen4, label=i];
m0_334 -> m0_343  [key=1, style=dashed, color=darkseagreen4, label=i];
m0_339 -> m0_340  [key=0, style=solid];
m0_339 -> m0_342  [key=0, style=solid];
m0_339 -> m0_363  [key=2, style=dotted];
m0_341 -> m0_342  [key=0, style=solid];
m0_341 -> m0_364  [key=2, style=dotted];
m0_344 -> m0_345  [key=0, style=solid];
m0_344 -> m0_361  [key=0, style=solid];
m0_343 -> m0_335  [key=0, style=solid];
m0_343 -> m0_343  [key=1, style=dashed, color=darkseagreen4, label=i];
m0_342 -> m0_343  [key=0, style=solid];
m0_342 -> m0_284  [key=2, style=dotted];
m0_338 -> m0_339  [key=0, style=solid];
m0_340 -> m0_341  [key=0, style=solid];
m0_340 -> m0_283  [key=2, style=dotted];
m0_340 -> m0_342  [key=1, style=dashed, color=darkseagreen4, label=nodes];
m0_345 -> m0_346  [key=0, style=solid];
m0_345 -> m0_345  [key=1, style=dashed, color=darkseagreen4, label=nodeNameGroup];
m0_345 -> m0_347  [key=1, style=dashed, color=darkseagreen4, label=groupedNodes];
m0_345 -> m0_348  [key=1, style=dashed, color=darkseagreen4, label=groupedNodes];
m0_345 -> m0_351  [key=1, style=dashed, color=darkseagreen4, label=groupedNodes];
m0_345 -> m0_352  [key=1, style=dashed, color=darkseagreen4, label=nodeNameGroup];
m0_345 -> m0_357  [key=1, style=dashed, color=darkseagreen4, label=groupedNodes];
m0_345 -> m0_358  [key=1, style=dashed, color=darkseagreen4, label=groupedNodes];
m0_346 -> m0_347  [key=0, style=solid];
m0_347 -> m0_348  [key=0, style=solid];
m0_347 -> m0_349  [key=0, style=solid];
m0_348 -> m0_350  [key=0, style=solid];
m0_348 -> m0_323  [key=2, style=dotted];
m0_352 -> m0_353  [key=0, style=solid];
m0_352 -> m0_352  [key=1, style=dashed, color=darkseagreen4, label=nodeNameGroup];
m0_352 -> m0_354  [key=1, style=dashed, color=darkseagreen4, label=elementNames];
m0_357 -> m0_358  [key=0, style=solid];
m0_357 -> m0_360  [key=0, style=solid];
m0_349 -> m0_350  [key=0, style=solid];
m0_350 -> m0_351  [key=0, style=solid];
m0_350 -> m0_352  [key=0, style=solid];
m0_356 -> m0_357  [key=0, style=solid];
m0_356 -> m0_358  [key=1, style=dashed, color=darkseagreen4, label=i];
m0_356 -> m0_359  [key=1, style=dashed, color=darkseagreen4, label=i];
m0_359 -> m0_357  [key=0, style=solid];
m0_359 -> m0_359  [key=1, style=dashed, color=darkseagreen4, label=i];
m0_361 -> m0_332  [key=0, style=bold, color=blue];
m0_11 -> m0_12  [key=0, style=solid, color=green];
m0_11 -> m0_20  [key=2, style=dotted, color=green];
m0_11 -> m0_17  [key=1, style=dashed, color=green, label=ms];
m0_83 -> m0_87  [key=0, style=solid];
m0_83 -> m0_69  [key=2, style=dotted];
m0_83 -> m0_84  [key=0, style=solid];
m0_83 -> m0_63  [key=2, style=dotted];
m0_85 -> m0_87  [key=0, style=solid];
m0_85 -> m0_72  [key=2, style=dotted];
m0_85 -> m0_8  [key=2, style=dotted];
m0_85 -> m0_86  [key=0, style=solid];
m0_86 -> m0_87  [key=0, style=solid];
m0_86 -> m0_75  [key=2, style=dotted];
m0_86 -> m0_6  [key=2, style=dotted];
m0_86 -> m0_34  [key=2, style=dotted];
m0_86 -> m0_88  [key=1, style=dashed, color=darkseagreen4, label=newRegex];
m0_82 -> m0_83  [key=0, style=solid];
m0_84 -> m0_85  [key=0, style=solid];
m0_84 -> m0_24  [key=2, style=dotted];
m0_84 -> m0_6  [key=2, style=dotted];
m0_84 -> m0_7  [key=2, style=dotted];
m0_84 -> m0_86  [key=1, style=dashed, color=darkseagreen4, label=json];
m0_87 -> m0_78  [key=0, style=bold, color=blue];
m0_87 -> m0_8  [key=2, style=dotted];
m0_87 -> m0_35  [key=2, style=dotted];
m0_87 -> m0_88  [key=0, style=solid];
m0_97 -> m0_98  [key=0, style=solid];
m0_98 -> m0_97  [key=0, style=bold, color=blue];
m0_185 -> m0_186  [key=0, style=solid];
m0_185 -> m0_190  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.IXmlNode"];
m0_186 -> m0_187  [key=0, style=solid];
m0_186 -> m0_188  [key=1, style=dashed, color=darkseagreen4, label=declarationWrapper];
m0_186 -> m0_189  [key=1, style=dashed, color=darkseagreen4, label=declarationWrapper];
m0_190 -> m0_191  [key=0, style=solid];
m0_190 -> m0_192  [key=2, style=dotted];
m0_187 -> m0_188  [key=0, style=solid];
m0_187 -> m0_190  [key=0, style=solid];
m0_188 -> m0_189  [key=0, style=solid];
m0_189 -> m0_191  [key=0, style=solid];
m0_191 -> m0_185  [key=0, style=bold, color=blue];
m0_24 -> m0_25  [key=0, style=solid];
m0_25 -> m0_26  [key=0, style=solid];
m0_25 -> m0_27  [key=2, style=dotted];
m0_25 -> m0_28  [key=2, style=dotted];
m0_181 -> m0_182  [key=0, style=solid];
m0_181 -> m0_183  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_182 -> m0_183  [key=0, style=solid];
m0_182 -> m0_174  [key=2, style=dotted];
m0_183 -> m0_184  [key=0, style=solid];
m0_183 -> m0_179  [key=2, style=dotted];
m0_183 -> m0_180  [key=2, style=dotted];
m0_183 -> m0_175  [key=2, style=dotted];
m0_184 -> m0_181  [key=0, style=bold, color=blue];
m0_522 -> m0_677  [key=0, style=solid];
m0_522 -> m0_681  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_522 -> m0_682  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_522 -> m0_684  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_522 -> m0_685  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_522 -> m0_687  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_522 -> m0_688  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_522 -> m0_690  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_522 -> m0_691  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_522 -> m0_693  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_522 -> m0_694  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_522 -> m0_695  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_522 -> m0_696  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.IXmlDocument"];
m0_522 -> m0_697  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.IXmlNode"];
m0_677 -> m0_678  [key=0, style=solid];
m0_677 -> m0_696  [key=1, style=dashed, color=darkseagreen4, label=name];
m0_681 -> m0_682  [key=0, style=solid];
m0_681 -> m0_696  [key=0, style=solid];
m0_681 -> m0_497  [key=2, style=dotted];
m0_682 -> m0_683  [key=0, style=solid];
m0_682 -> m0_686  [key=0, style=solid];
m0_682 -> m0_689  [key=0, style=solid];
m0_682 -> m0_692  [key=0, style=solid];
m0_682 -> m0_695  [key=0, style=solid];
m0_682 -> m0_519  [key=2, style=dotted];
m0_684 -> m0_685  [key=0, style=solid];
m0_684 -> m0_497  [key=2, style=dotted];
m0_685 -> m0_681  [key=0, style=solid];
m0_685 -> m0_519  [key=2, style=dotted];
m0_685 -> m0_696  [key=1, style=dashed, color=darkseagreen4, label=name];
m0_687 -> m0_688  [key=0, style=solid];
m0_687 -> m0_497  [key=2, style=dotted];
m0_688 -> m0_681  [key=0, style=solid];
m0_688 -> m0_519  [key=2, style=dotted];
m0_688 -> m0_696  [key=1, style=dashed, color=darkseagreen4, label=publicId];
m0_690 -> m0_691  [key=0, style=solid];
m0_690 -> m0_497  [key=2, style=dotted];
m0_691 -> m0_681  [key=0, style=solid];
m0_691 -> m0_519  [key=2, style=dotted];
m0_691 -> m0_696  [key=1, style=dashed, color=darkseagreen4, label=systemId];
m0_693 -> m0_694  [key=0, style=solid];
m0_693 -> m0_497  [key=2, style=dotted];
m0_694 -> m0_681  [key=0, style=solid];
m0_694 -> m0_519  [key=2, style=dotted];
m0_694 -> m0_696  [key=1, style=dashed, color=darkseagreen4, label=internalSubset];
m0_695 -> m0_698  [key=0, style=solid];
m0_695 -> m0_493  [key=2, style=dotted];
m0_696 -> m0_697  [key=0, style=solid];
m0_696 -> m0_107  [key=2, style=dotted];
m0_697 -> m0_698  [key=0, style=solid];
m0_697 -> m0_123  [key=2, style=dotted];
m0_678 -> m0_679  [key=0, style=solid];
m0_678 -> m0_696  [key=1, style=dashed, color=darkseagreen4, label=publicId];
m0_679 -> m0_680  [key=0, style=solid];
m0_679 -> m0_696  [key=1, style=dashed, color=darkseagreen4, label=systemId];
m0_680 -> m0_681  [key=0, style=solid];
m0_680 -> m0_696  [key=1, style=dashed, color=darkseagreen4, label=internalSubset];
m0_683 -> m0_684  [key=0, style=solid];
m0_686 -> m0_687  [key=0, style=solid];
m0_689 -> m0_690  [key=0, style=solid];
m0_692 -> m0_693  [key=0, style=solid];
m0_698 -> m0_522  [key=0, style=bold, color=blue];
m0_60 -> m0_61  [key=0, style=solid];
m0_60 -> m0_8  [key=2, style=dotted];
m0_60 -> m0_35  [key=2, style=dotted];
m0_61 -> m0_62  [key=0, style=solid];
m0_61 -> m0_8  [key=2, style=dotted];
m0_62 -> m0_63  [key=0, style=solid];
m0_62 -> m0_64  [key=2, style=dotted];
m0_62 -> m0_49  [key=0, style=bold, color=blue];
m0_63 -> m0_60  [key=0, style=bold, color=blue];
m0_107 -> m0_108  [key=0, style=solid];
m0_108 -> m0_107  [key=0, style=bold, color=blue];
m0_520 -> m0_656  [key=0, style=solid];
m0_520 -> m0_660  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_520 -> m0_661  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_520 -> m0_663  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_520 -> m0_664  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_520 -> m0_666  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_520 -> m0_667  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_520 -> m0_669  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_520 -> m0_670  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_520 -> m0_671  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_520 -> m0_672  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.IXmlDocument"];
m0_520 -> m0_673  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.IXmlNode"];
m0_520 -> m0_674  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_520 -> m0_675  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.IXmlNode"];
m0_656 -> m0_657  [key=0, style=solid];
m0_656 -> m0_674  [key=0, style=solid];
m0_660 -> m0_661  [key=0, style=solid];
m0_660 -> m0_672  [key=0, style=solid];
m0_660 -> m0_497  [key=2, style=dotted];
m0_661 -> m0_662  [key=0, style=solid];
m0_661 -> m0_665  [key=0, style=solid];
m0_661 -> m0_668  [key=0, style=solid];
m0_661 -> m0_671  [key=0, style=solid];
m0_661 -> m0_519  [key=2, style=dotted];
m0_663 -> m0_664  [key=0, style=solid];
m0_663 -> m0_497  [key=2, style=dotted];
m0_664 -> m0_660  [key=0, style=solid];
m0_664 -> m0_519  [key=2, style=dotted];
m0_664 -> m0_672  [key=1, style=dashed, color=darkseagreen4, label=version];
m0_666 -> m0_667  [key=0, style=solid];
m0_666 -> m0_497  [key=2, style=dotted];
m0_667 -> m0_660  [key=0, style=solid];
m0_667 -> m0_519  [key=2, style=dotted];
m0_667 -> m0_672  [key=1, style=dashed, color=darkseagreen4, label=encoding];
m0_669 -> m0_670  [key=0, style=solid];
m0_669 -> m0_497  [key=2, style=dotted];
m0_670 -> m0_660  [key=0, style=solid];
m0_670 -> m0_519  [key=2, style=dotted];
m0_670 -> m0_672  [key=1, style=dashed, color=darkseagreen4, label=standalone];
m0_671 -> m0_676  [key=0, style=solid];
m0_671 -> m0_493  [key=2, style=dotted];
m0_672 -> m0_673  [key=0, style=solid];
m0_672 -> m0_105  [key=2, style=dotted];
m0_673 -> m0_676  [key=0, style=solid];
m0_673 -> m0_123  [key=2, style=dotted];
m0_674 -> m0_675  [key=0, style=solid];
m0_674 -> m0_552  [key=2, style=dotted];
m0_674 -> m0_519  [key=2, style=dotted];
m0_674 -> m0_109  [key=2, style=dotted];
m0_675 -> m0_676  [key=0, style=solid];
m0_675 -> m0_123  [key=2, style=dotted];
m0_657 -> m0_658  [key=0, style=solid];
m0_657 -> m0_672  [key=1, style=dashed, color=darkseagreen4, label=version];
m0_658 -> m0_659  [key=0, style=solid];
m0_658 -> m0_672  [key=1, style=dashed, color=darkseagreen4, label=encoding];
m0_659 -> m0_660  [key=0, style=solid];
m0_659 -> m0_672  [key=1, style=dashed, color=darkseagreen4, label=standalone];
m0_662 -> m0_663  [key=0, style=solid];
m0_665 -> m0_666  [key=0, style=solid];
m0_668 -> m0_669  [key=0, style=solid];
m0_676 -> m0_520  [key=0, style=bold, color=blue];
m0_227 -> m0_228  [key=0, style=solid];
m0_228 -> m0_229  [key=0, style=solid];
m0_228 -> m0_230  [key=2, style=dotted];
m0_229 -> m0_227  [key=0, style=bold, color=blue];
m0_8 -> m0_9  [key=0, style=solid];
m0_9 -> m0_10  [key=0, style=solid, color=green];
m0_9 -> m0_6  [key=2, style=dotted];
m0_9 -> m0_11  [key=2, style=dotted];
m0_10 -> m0_8  [key=0, style=bold, color=blue];
m0_10 -> m0_11  [key=0, style=solid, color=green];
m0_10 -> m0_5  [key=2, style=dotted, color=green];
m0_10 -> m0_15  [key=1, style=dashed, color=green, label=regex];
m0_19 -> m0_9  [key=0, style=bold, color=blue];
m0_15 -> m0_16  [key=0, style=solid, color=green];
m0_15 -> m0_24  [key=2, style=dotted, color=green];
m0_15 -> m0_25  [key=2, style=dotted, color=green];
m0_12 -> m0_15  [key=1, style=dashed, color=green, label=writer];
m0_12 -> m0_13  [key=0, style=solid, color=green];
m0_12 -> m0_21  [key=2, style=dotted, color=green];
m0_17 -> m0_18  [key=0, style=solid, color=green];
m0_17 -> m0_26  [key=2, style=dotted, color=green];
m0_17 -> m0_27  [key=2, style=dotted, color=green];
m0_17 -> m0_6  [key=2, style=dotted];
m0_17 -> m0_19  [key=2, style=dotted];
m0_13 -> m0_15  [key=1, style=dashed, color=green, label=serializer];
m0_13 -> m0_14  [key=0, style=solid, color=green];
m0_13 -> m0_22  [key=2, style=dotted, color=green];
m0_13 -> m0_6  [key=2, style=dotted];
m0_14 -> m0_15  [key=0, style=solid, color=green];
m0_14 -> m0_6  [key=2, style=dotted, color=green];
m0_14 -> m0_23  [key=2, style=dotted, color=green];
m0_14 -> m0_12  [key=0, style=bold, color=blue];
m0_16 -> m0_17  [key=0, style=solid, color=green];
m0_16 -> m0_16  [key=3, color=green, style=bold, label="Local variable string expected"];
m0_16 -> m0_18  [key=1, style=dashed, color=green, label=expected];
m0_18 -> m0_19  [key=0, style=solid, color=green];
m0_18 -> m0_8  [key=2, style=dotted, color=green];
m0_18 -> m0_16  [key=0, style=bold, color=blue];
m0_0 -> m0_1  [key=0, style=solid];
m0_0 -> m0_16  [key=3, color=darkorchid, style=bold, label="Property variable Newtonsoft.Json.Tests.Serialization.DefaultValueHandlingTests.MyEnum Status"];
m0_1 -> m0_2  [key=0, style=solid];
m0_1 -> m0_5  [key=2, style=dotted];
m0_2 -> m0_0  [key=0, style=bold, color=blue];
m0_2 -> m0_6  [key=2, style=dotted];
m0_2 -> m0_3  [key=0, style=solid];
m0_2 -> m0_7  [key=2, style=dotted];
m0_28 -> m0_29  [key=0, style=solid, color=green];
m0_113 -> m0_114  [key=0, style=solid];
m0_114 -> m0_113  [key=0, style=bold, color=blue];
m0_152 -> m0_153  [key=0, style=solid];
m0_153 -> m0_154  [key=0, style=solid];
m0_153 -> m0_125  [key=2, style=dotted];
m0_153 -> m0_155  [key=2, style=dotted];
m0_154 -> m0_152  [key=0, style=bold, color=blue];
m0_3 -> m0_4  [key=0, style=solid];
m0_3 -> m0_8  [key=2, style=dotted];
m0_4 -> m0_5  [key=0, style=solid];
m0_4 -> m0_6  [key=2, style=dotted];
m0_4 -> m0_7  [key=2, style=dotted];
m0_4 -> m0_0  [key=0, style=bold, color=blue];
m0_5 -> m0_3  [key=0, style=bold, color=blue];
m0_20 -> m0_21  [key=0, style=solid];
m0_22 -> m0_20  [key=0, style=bold, color=blue];
m0_500 -> m0_501  [key=0, style=solid];
m0_500 -> m0_503  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_500 -> m0_505  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_500 -> m0_507  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_500 -> m0_509  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_500 -> m0_510  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_500 -> m0_511  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_500 -> m0_512  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_500 -> m0_513  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_500 -> m0_514  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_500 -> m0_515  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_500 -> m0_517  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_501 -> m0_502  [key=0, style=solid];
m0_501 -> m0_504  [key=0, style=solid];
m0_501 -> m0_506  [key=0, style=solid];
m0_501 -> m0_508  [key=0, style=solid];
m0_501 -> m0_510  [key=0, style=solid];
m0_503 -> m0_518  [key=0, style=solid];
m0_503 -> m0_519  [key=2, style=dotted];
m0_503 -> m0_97  [key=2, style=dotted];
m0_503 -> m0_123  [key=2, style=dotted];
m0_505 -> m0_518  [key=0, style=solid];
m0_505 -> m0_519  [key=2, style=dotted];
m0_505 -> m0_99  [key=2, style=dotted];
m0_505 -> m0_123  [key=2, style=dotted];
m0_507 -> m0_518  [key=0, style=solid];
m0_507 -> m0_519  [key=2, style=dotted];
m0_507 -> m0_101  [key=2, style=dotted];
m0_507 -> m0_123  [key=2, style=dotted];
m0_509 -> m0_518  [key=0, style=solid];
m0_509 -> m0_519  [key=2, style=dotted];
m0_509 -> m0_103  [key=2, style=dotted];
m0_509 -> m0_123  [key=2, style=dotted];
m0_510 -> m0_511  [key=0, style=solid];
m0_510 -> m0_512  [key=0, style=solid];
m0_510 -> m0_295  [key=2, style=dotted];
m0_511 -> m0_518  [key=0, style=solid];
m0_511 -> m0_520  [key=2, style=dotted];
m0_512 -> m0_513  [key=0, style=solid];
m0_512 -> m0_514  [key=0, style=solid];
m0_512 -> m0_521  [key=2, style=dotted];
m0_513 -> m0_518  [key=0, style=solid];
m0_513 -> m0_522  [key=2, style=dotted];
m0_514 -> m0_515  [key=0, style=solid];
m0_514 -> m0_517  [key=0, style=solid];
m0_515 -> m0_516  [key=0, style=solid];
m0_515 -> m0_523  [key=2, style=dotted];
m0_517 -> m0_518  [key=0, style=solid];
m0_517 -> m0_496  [key=2, style=dotted];
m0_502 -> m0_503  [key=0, style=solid];
m0_504 -> m0_505  [key=0, style=solid];
m0_506 -> m0_507  [key=0, style=solid];
m0_508 -> m0_509  [key=0, style=solid];
m0_516 -> m0_518  [key=0, style=solid];
m0_518 -> m0_500  [key=0, style=bold, color=blue];
m0_195 -> m0_196  [key=0, style=solid];
m0_196 -> m0_195  [key=0, style=bold, color=blue];
m0_88 -> m0_8  [key=2, style=dotted];
m0_88 -> m0_89  [key=0, style=solid];
m0_88 -> m0_92  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.IXmlNode"];
m0_89 -> m0_82  [key=0, style=bold, color=blue];
m0_89 -> m0_90  [key=0, style=solid];
m0_37 -> m0_38  [key=0, style=solid, color=green];
m0_37 -> m0_45  [key=2, style=dotted, color=green];
m0_37 -> m0_46  [key=2, style=dotted, color=green];
m0_38 -> m0_39  [key=0, style=solid, color=green];
m0_38 -> m0_47  [key=2, style=dotted, color=green];
m0_38 -> m0_41  [key=1, style=dashed, color=green, label=reader];
m0_39 -> m0_40  [key=0, style=solid, color=green];
m0_39 -> m0_22  [key=2, style=dotted, color=green];
m0_39 -> m0_41  [key=1, style=dashed, color=green, label=serializer];
m0_39 -> m0_42  [key=2, style=dotted];
m0_41 -> m0_42  [key=0, style=solid, color=green];
m0_41 -> m0_48  [key=2, style=dotted, color=green];
m0_41 -> m0_43  [key=1, style=dashed, color=green, label=c];
m0_40 -> m0_41  [key=0, style=solid, color=green];
m0_40 -> m0_6  [key=2, style=dotted, color=green];
m0_40 -> m0_23  [key=2, style=dotted, color=green];
m0_40 -> m0_38  [key=0, style=bold, color=blue];
m0_42 -> m0_43  [key=0, style=solid, color=green];
m0_42 -> m0_35  [key=2, style=dotted, color=green];
m0_42 -> m0_8  [key=2, style=dotted, color=green];
m0_43 -> m0_44  [key=0, style=solid, color=green];
m0_43 -> m0_8  [key=2, style=dotted, color=green];
m0_44 -> m0_36  [key=0, style=bold, color=blue];
m0_44 -> m0_45  [key=0, style=solid];
m0_44 -> m0_41  [key=2, style=dotted];
m0_44 -> m0_42  [key=2, style=dotted];
m0_48 -> m0_49  [key=0, style=solid];
m0_168 -> m0_232  [key=0, style=solid];
m0_232 -> m0_168  [key=0, style=bold, color=blue];
m0_288 -> m0_289  [key=0, style=solid];
m0_288 -> m0_291  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.IXmlNode"];
m0_288 -> m0_292  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.IXmlNode"];
m0_289 -> m0_290  [key=0, style=solid];
m0_289 -> m0_294  [key=2, style=dotted];
m0_289 -> m0_291  [key=1, style=dashed, color=darkseagreen4, label=prefix];
m0_291 -> m0_293  [key=0, style=solid];
m0_292 -> m0_293  [key=0, style=solid];
m0_290 -> m0_291  [key=0, style=solid];
m0_290 -> m0_292  [key=0, style=solid];
m0_290 -> m0_295  [key=2, style=dotted];
m0_293 -> m0_288  [key=0, style=bold, color=blue];
m0_128 -> m0_129  [key=0, style=solid];
m0_129 -> m0_130  [key=0, style=solid];
m0_130 -> m0_128  [key=0, style=bold, color=blue];
m0_241 -> m0_242  [key=0, style=solid];
m0_242 -> m0_243  [key=0, style=solid];
m0_242 -> m0_68  [key=2, style=dotted];
m0_243 -> m0_241  [key=0, style=bold, color=blue];
m0_449 -> m0_745  [key=0, style=solid];
m0_745 -> m0_746  [key=0, style=solid];
m0_745 -> m0_747  [key=2, style=dotted];
m0_745 -> m0_748  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_746 -> m0_449  [key=0, style=bold, color=blue];
m0_49 -> m0_50  [key=0, style=solid];
m0_55 -> m0_24  [key=2, style=dotted];
m0_55 -> m0_25  [key=2, style=dotted];
m0_55 -> m0_56  [key=0, style=solid];
m0_52 -> m0_21  [key=2, style=dotted];
m0_52 -> m0_55  [key=1, style=dashed, color=darkseagreen4, label=writer];
m0_52 -> m0_53  [key=0, style=solid];
m0_52 -> m0_54  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_53 -> m0_22  [key=2, style=dotted];
m0_53 -> m0_55  [key=1, style=dashed, color=darkseagreen4, label=attribute];
m0_53 -> m0_54  [key=0, style=solid];
m0_53 -> m0_58  [key=1, style=dashed, color=darkseagreen4, label=serializer];
m0_53 -> m0_59  [key=1, style=dashed, color=darkseagreen4, label=serializer];
m0_53 -> m0_6  [key=2, style=dotted];
m0_53 -> m0_51  [key=2, style=dotted];
m0_54 -> m0_6  [key=2, style=dotted];
m0_54 -> m0_23  [key=2, style=dotted];
m0_54 -> m0_55  [key=0, style=solid];
m0_50 -> m0_51  [key=0, style=solid];
m0_50 -> m0_55  [key=1, style=dashed, color=darkseagreen4, label=regex];
m0_50 -> m0_63  [key=2, style=dotted];
m0_50 -> m0_46  [key=0, style=bold, color=blue];
m0_56 -> m0_57  [key=0, style=solid];
m0_56 -> m0_64  [key=2, style=dotted];
m0_56 -> m0_52  [key=0, style=bold, color=blue];
m0_103 -> m0_104  [key=0, style=solid];
m0_104 -> m0_103  [key=0, style=bold, color=blue];
m0_192 -> m0_220  [key=0, style=solid];
m0_192 -> m0_222  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.IXmlNode"];
m0_220 -> m0_221  [key=0, style=solid];
m0_220 -> m0_224  [key=2, style=dotted];
m0_222 -> m0_223  [key=0, style=solid];
m0_221 -> m0_222  [key=0, style=solid];
m0_223 -> m0_192  [key=0, style=bold, color=blue];
m0_323 -> m0_324  [key=0, style=solid];
m0_324 -> m0_325  [key=0, style=solid];
m0_324 -> m0_327  [key=2, style=dotted];
m0_324 -> m0_329  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_325 -> m0_326  [key=0, style=solid];
m0_325 -> m0_328  [key=2, style=dotted];
m0_326 -> m0_323  [key=0, style=bold, color=blue];
m0_160 -> m0_161  [key=0, style=solid];
m0_161 -> m0_162  [key=0, style=solid];
m0_161 -> m0_163  [key=2, style=dotted];
m0_161 -> m0_164  [key=2, style=dotted];
m0_162 -> m0_160  [key=0, style=bold, color=blue];
m0_296 -> m0_297  [key=0, style=solid];
m0_296 -> m0_299  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.IXmlNode"];
m0_296 -> m0_300  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.IXmlNode"];
m0_296 -> m0_301  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.IXmlNode"];
m0_296 -> m0_307  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.IXmlNode"];
m0_296 -> m0_309  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.IXmlNode"];
m0_296 -> m0_311  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.IXmlNode"];
m0_296 -> m0_320  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.IXmlNode"];
m0_297 -> m0_298  [key=0, style=solid];
m0_297 -> m0_302  [key=0, style=solid];
m0_297 -> m0_304  [key=0, style=solid];
m0_297 -> m0_306  [key=0, style=solid];
m0_297 -> m0_308  [key=0, style=solid];
m0_297 -> m0_310  [key=0, style=solid];
m0_297 -> m0_312  [key=0, style=solid];
m0_297 -> m0_314  [key=0, style=solid];
m0_297 -> m0_316  [key=0, style=solid];
m0_297 -> m0_318  [key=0, style=solid];
m0_297 -> m0_320  [key=0, style=solid];
m0_299 -> m0_300  [key=0, style=solid];
m0_299 -> m0_301  [key=0, style=solid];
m0_300 -> m0_321  [key=0, style=solid];
m0_301 -> m0_321  [key=0, style=solid];
m0_301 -> m0_288  [key=2, style=dotted];
m0_307 -> m0_321  [key=0, style=solid];
m0_307 -> m0_288  [key=2, style=dotted];
m0_309 -> m0_321  [key=0, style=solid];
m0_309 -> m0_288  [key=2, style=dotted];
m0_311 -> m0_321  [key=0, style=solid];
m0_311 -> m0_288  [key=2, style=dotted];
m0_320 -> m0_321  [key=0, style=solid];
m0_320 -> m0_322  [key=2, style=dotted];
m0_298 -> m0_299  [key=0, style=solid];
m0_302 -> m0_303  [key=0, style=solid];
m0_304 -> m0_305  [key=0, style=solid];
m0_306 -> m0_307  [key=0, style=solid];
m0_308 -> m0_309  [key=0, style=solid];
m0_310 -> m0_311  [key=0, style=solid];
m0_312 -> m0_313  [key=0, style=solid];
m0_314 -> m0_315  [key=0, style=solid];
m0_316 -> m0_317  [key=0, style=solid];
m0_318 -> m0_319  [key=0, style=solid];
m0_303 -> m0_321  [key=0, style=solid];
m0_305 -> m0_321  [key=0, style=solid];
m0_313 -> m0_321  [key=0, style=solid];
m0_315 -> m0_321  [key=0, style=solid];
m0_317 -> m0_321  [key=0, style=solid];
m0_319 -> m0_321  [key=0, style=solid];
m0_321 -> m0_296  [key=0, style=bold, color=blue];
m0_165 -> m0_166  [key=0, style=solid];
m0_166 -> m0_167  [key=0, style=solid];
m0_166 -> m0_168  [key=2, style=dotted];
m0_166 -> m0_169  [key=2, style=dotted];
m0_167 -> m0_165  [key=0, style=bold, color=blue];
m0_459 -> m0_460  [key=0, style=solid];
m0_459 -> m0_465  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m0_459 -> m0_466  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m0_459 -> m0_471  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m0_459 -> m0_472  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m0_459 -> m0_479  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m0_459 -> m0_480  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_459 -> m0_483  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_459 -> m0_484  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_459 -> m0_485  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_459 -> m0_486  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m0_460 -> m0_461  [key=0, style=solid];
m0_460 -> m0_462  [key=0, style=solid];
m0_465 -> m0_466  [key=0, style=solid];
m0_465 -> m0_471  [key=0, style=solid];
m0_465 -> m0_492  [key=2, style=dotted];
m0_466 -> m0_467  [key=0, style=solid];
m0_466 -> m0_468  [key=0, style=solid];
m0_471 -> m0_472  [key=0, style=solid];
m0_471 -> m0_478  [key=0, style=solid];
m0_471 -> m0_492  [key=2, style=dotted];
m0_472 -> m0_473  [key=0, style=solid];
m0_472 -> m0_474  [key=0, style=solid];
m0_479 -> m0_491  [key=0, style=solid];
m0_479 -> m0_493  [key=2, style=dotted];
m0_480 -> m0_481  [key=0, style=solid];
m0_480 -> m0_482  [key=0, style=solid];
m0_483 -> m0_486  [key=0, style=solid];
m0_483 -> m0_496  [key=2, style=dotted];
m0_484 -> m0_485  [key=0, style=solid];
m0_484 -> m0_497  [key=2, style=dotted];
m0_485 -> m0_486  [key=0, style=solid];
m0_485 -> m0_498  [key=2, style=dotted];
m0_486 -> m0_487  [key=0, style=solid];
m0_486 -> m0_490  [key=0, style=solid];
m0_461 -> m0_491  [key=0, style=solid];
m0_462 -> m0_463  [key=0, style=solid];
m0_462 -> m0_255  [key=2, style=dotted];
m0_462 -> m0_256  [key=2, style=dotted];
m0_462 -> m0_483  [key=1, style=dashed, color=darkseagreen4, label=manager];
m0_462 -> m0_485  [key=1, style=dashed, color=darkseagreen4, label=manager];
m0_463 -> m0_464  [key=0, style=solid];
m0_463 -> m0_478  [key=1, style=dashed, color=darkseagreen4, label=document];
m0_463 -> m0_483  [key=1, style=dashed, color=darkseagreen4, label=document];
m0_463 -> m0_485  [key=1, style=dashed, color=darkseagreen4, label=document];
m0_463 -> m0_487  [key=1, style=dashed, color=darkseagreen4, label=document];
m0_463 -> m0_490  [key=1, style=dashed, color=darkseagreen4, label=document];
m0_464 -> m0_465  [key=0, style=solid];
m0_464 -> m0_478  [key=1, style=dashed, color=darkseagreen4, label=rootNode];
m0_464 -> m0_483  [key=1, style=dashed, color=darkseagreen4, label=rootNode];
m0_464 -> m0_485  [key=1, style=dashed, color=darkseagreen4, label=rootNode];
m0_478 -> m0_479  [key=0, style=solid];
m0_478 -> m0_480  [key=0, style=solid];
m0_487 -> m0_488  [key=0, style=solid];
m0_487 -> m0_489  [key=1, style=dashed, color=darkseagreen4, label=element];
m0_490 -> m0_491  [key=0, style=solid];
m0_467 -> m0_491  [key=0, style=solid];
m0_467 -> m0_493  [key=2, style=dotted];
m0_468 -> m0_469  [key=0, style=solid];
m0_468 -> m0_494  [key=2, style=dotted];
m0_469 -> m0_470  [key=0, style=solid];
m0_469 -> m0_131  [key=2, style=dotted];
m0_469 -> m0_478  [key=1, style=dashed, color=darkseagreen4, label=document];
m0_469 -> m0_483  [key=1, style=dashed, color=darkseagreen4, label=document];
m0_469 -> m0_485  [key=1, style=dashed, color=darkseagreen4, label=document];
m0_469 -> m0_487  [key=1, style=dashed, color=darkseagreen4, label=document];
m0_469 -> m0_490  [key=1, style=dashed, color=darkseagreen4, label=document];
m0_470 -> m0_471  [key=0, style=solid];
m0_470 -> m0_478  [key=1, style=dashed, color=darkseagreen4, label=rootNode];
m0_470 -> m0_483  [key=1, style=dashed, color=darkseagreen4, label=rootNode];
m0_470 -> m0_485  [key=1, style=dashed, color=darkseagreen4, label=rootNode];
m0_473 -> m0_491  [key=0, style=solid];
m0_473 -> m0_493  [key=2, style=dotted];
m0_474 -> m0_475  [key=0, style=solid];
m0_474 -> m0_495  [key=2, style=dotted];
m0_475 -> m0_476  [key=0, style=solid];
m0_475 -> m0_475  [key=1, style=dashed, color=darkseagreen4, label=d];
m0_476 -> m0_477  [key=0, style=solid];
m0_476 -> m0_0  [key=2, style=dotted];
m0_476 -> m0_478  [key=1, style=dashed, color=darkseagreen4, label=document];
m0_476 -> m0_483  [key=1, style=dashed, color=darkseagreen4, label=document];
m0_476 -> m0_485  [key=1, style=dashed, color=darkseagreen4, label=document];
m0_476 -> m0_487  [key=1, style=dashed, color=darkseagreen4, label=document];
m0_476 -> m0_490  [key=1, style=dashed, color=darkseagreen4, label=document];
m0_477 -> m0_478  [key=0, style=solid];
m0_477 -> m0_483  [key=1, style=dashed, color=darkseagreen4, label=rootNode];
m0_477 -> m0_485  [key=1, style=dashed, color=darkseagreen4, label=rootNode];
m0_481 -> m0_491  [key=0, style=solid];
m0_481 -> m0_493  [key=2, style=dotted];
m0_482 -> m0_483  [key=0, style=solid];
m0_482 -> m0_484  [key=0, style=solid];
m0_482 -> m0_295  [key=2, style=dotted];
m0_488 -> m0_489  [key=0, style=solid];
m0_488 -> m0_499  [key=2, style=dotted];
m0_489 -> m0_491  [key=0, style=solid];
m0_491 -> m0_459  [key=0, style=bold, color=blue];
m0_142 -> m0_143  [key=0, style=solid];
m0_143 -> m0_144  [key=0, style=solid];
m0_143 -> m0_136  [key=2, style=dotted];
m0_143 -> m0_145  [key=2, style=dotted];
m0_144 -> m0_142  [key=0, style=bold, color=blue];
m0_176 -> m0_177  [key=0, style=solid];
m0_177 -> m0_178  [key=0, style=solid];
m0_177 -> m0_179  [key=2, style=dotted];
m0_177 -> m0_180  [key=2, style=dotted];
m0_178 -> m0_176  [key=0, style=bold, color=blue];
m0_523 -> m0_588  [key=0, style=solid];
m0_523 -> m0_589  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.IXmlDocument"];
m0_523 -> m0_590  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.IXmlNode"];
m0_523 -> m0_592  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_523 -> m0_593  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_523 -> m0_596  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.IXmlDocument"];
m0_523 -> m0_598  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_523 -> m0_605  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_523 -> m0_599  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.IXmlDocument"];
m0_588 -> m0_589  [key=0, style=solid];
m0_588 -> m0_550  [key=2, style=dotted];
m0_589 -> m0_590  [key=0, style=solid];
m0_589 -> m0_554  [key=2, style=dotted];
m0_589 -> m0_593  [key=1, style=dashed, color=darkseagreen4, label=nestedArrayElement];
m0_589 -> m0_596  [key=1, style=dashed, color=darkseagreen4, label=nestedArrayElement];
m0_589 -> m0_598  [key=1, style=dashed, color=darkseagreen4, label=nestedArrayElement];
m0_590 -> m0_591  [key=0, style=solid];
m0_590 -> m0_123  [key=2, style=dotted];
m0_592 -> m0_593  [key=0, style=solid];
m0_592 -> m0_595  [key=0, style=solid];
m0_592 -> m0_497  [key=2, style=dotted];
m0_593 -> m0_594  [key=0, style=solid];
m0_593 -> m0_500  [key=2, style=dotted];
m0_596 -> m0_597  [key=0, style=solid];
m0_596 -> m0_601  [key=2, style=dotted];
m0_598 -> m0_599  [key=0, style=solid];
m0_598 -> m0_602  [key=2, style=dotted];
m0_598 -> m0_603  [key=2, style=dotted];
m0_598 -> m0_604  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_599 -> m0_600  [key=0, style=solid];
m0_599 -> m0_601  [key=2, style=dotted];
m0_591 -> m0_592  [key=0, style=solid];
m0_591 -> m0_594  [key=1, style=dashed, color=darkseagreen4, label=count];
m0_591 -> m0_597  [key=1, style=dashed, color=darkseagreen4, label=count];
m0_594 -> m0_592  [key=0, style=solid];
m0_594 -> m0_594  [key=1, style=dashed, color=darkseagreen4, label=count];
m0_594 -> m0_597  [key=1, style=dashed, color=darkseagreen4, label=count];
m0_597 -> m0_598  [key=0, style=solid];
m0_597 -> m0_600  [key=0, style=solid];
m0_595 -> m0_596  [key=0, style=solid];
m0_595 -> m0_597  [key=0, style=solid];
m0_600 -> m0_523  [key=0, style=bold, color=blue];
m0_125 -> m0_126  [key=0, style=solid];
m0_126 -> m0_127  [key=0, style=solid];
m0_127 -> m0_125  [key=0, style=bold, color=blue];
m0_119 -> m0_120  [key=0, style=solid];
m0_120 -> m0_119  [key=0, style=bold, color=blue];
m0_163 -> m0_197  [key=0, style=solid];
m0_197 -> m0_163  [key=0, style=bold, color=blue];
m0_146 -> m0_147  [key=0, style=solid];
m0_147 -> m0_148  [key=0, style=solid];
m0_147 -> m0_136  [key=2, style=dotted];
m0_147 -> m0_141  [key=2, style=dotted];
m0_148 -> m0_146  [key=0, style=bold, color=blue];
m0_654 -> m0_733  [key=0, style=solid];
m0_654 -> m0_734  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_654 -> m0_737  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_654 -> m0_738  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_733 -> m0_734  [key=0, style=solid];
m0_733 -> m0_740  [key=0, style=solid];
m0_733 -> m0_743  [key=2, style=dotted];
m0_734 -> m0_735  [key=0, style=solid];
m0_734 -> m0_737  [key=0, style=solid];
m0_737 -> m0_738  [key=0, style=solid];
m0_737 -> m0_740  [key=0, style=solid];
m0_738 -> m0_739  [key=0, style=solid];
m0_738 -> m0_744  [key=2, style=dotted];
m0_740 -> m0_741  [key=0, style=solid];
m0_740 -> m0_742  [key=1, style=dashed, color=darkseagreen4, label="out string"];
m0_735 -> m0_736  [key=0, style=solid];
m0_736 -> m0_742  [key=0, style=solid];
m0_739 -> m0_742  [key=0, style=solid];
m0_741 -> m0_742  [key=0, style=solid];
m0_742 -> m0_654  [key=0, style=bold, color=blue];
m0_193 -> m0_194  [key=0, style=solid];
m0_194 -> m0_193  [key=0, style=bold, color=blue];
m0_105 -> m0_106  [key=0, style=solid];
m0_106 -> m0_105  [key=0, style=bold, color=blue];
m0_111 -> m0_112  [key=0, style=solid];
m0_112 -> m0_111  [key=0, style=bold, color=blue];
m0_219 -> m0_225  [key=0, style=solid];
m0_225 -> m0_226  [key=0, style=solid];
m0_226 -> m0_219  [key=0, style=bold, color=blue];
m0_751 -> m0_752  [key=0, style=solid];
m0_751 -> m0_754  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m0_752 -> m0_753  [key=0, style=solid];
m0_752 -> m0_754  [key=0, style=solid];
m0_752 -> m0_492  [key=2, style=dotted];
m0_754 -> m0_755  [key=0, style=solid];
m0_754 -> m0_756  [key=0, style=solid];
m0_754 -> m0_492  [key=2, style=dotted];
m0_753 -> m0_757  [key=0, style=solid];
m0_755 -> m0_757  [key=0, style=solid];
m0_756 -> m0_757  [key=0, style=solid];
m0_757 -> m0_751  [key=0, style=bold, color=blue];
m0_138 -> m0_139  [key=0, style=solid];
m0_139 -> m0_140  [key=0, style=solid];
m0_139 -> m0_136  [key=2, style=dotted];
m0_139 -> m0_141  [key=2, style=dotted];
m0_140 -> m0_138  [key=0, style=bold, color=blue];
m0_601 -> m0_607  [key=0, style=solid];
m0_601 -> m0_608  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.IXmlElement"];
m0_601 -> m0_609  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.IXmlElement"];
m0_601 -> m0_610  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.IXmlElement"];
m0_607 -> m0_608  [key=0, style=solid];
m0_607 -> m0_117  [key=2, style=dotted];
m0_607 -> m0_119  [key=2, style=dotted];
m0_608 -> m0_609  [key=0, style=solid];
m0_608 -> m0_611  [key=0, style=solid];
m0_609 -> m0_610  [key=0, style=solid];
m0_609 -> m0_611  [key=0, style=solid];
m0_609 -> m0_121  [key=2, style=dotted];
m0_610 -> m0_611  [key=0, style=solid];
m0_610 -> m0_117  [key=2, style=dotted];
m0_610 -> m0_119  [key=2, style=dotted];
m0_611 -> m0_601  [key=0, style=bold, color=blue];
m0_748 -> m0_749  [key=0, style=solid];
m0_237 -> m0_238  [key=0, style=solid];
m0_238 -> m0_239  [key=0, style=solid];
m0_238 -> m0_240  [key=2, style=dotted];
m0_239 -> m0_237  [key=0, style=bold, color=blue];
m0_329 -> m0_330  [key=0, style=solid];
m0_330 -> m0_331  [key=0, style=solid];
m0_331 -> m0_329  [key=0, style=bold, color=blue];
m0_457 -> m0_458  [key=0, style=solid];
m0_456 -> m0_457  [key=0, style=solid];
m0_458 -> m0_456  [key=0, style=bold, color=blue];
m0_605 -> m0_606  [key=0, style=solid];
m0_604 -> m0_605  [key=0, style=solid];
m0_606 -> m0_604  [key=0, style=bold, color=blue];
m0_731 -> m0_732  [key=0, style=solid];
m0_730 -> m0_731  [key=0, style=solid];
m0_732 -> m0_730  [key=0, style=bold, color=blue];
m0_749 -> m0_750  [key=0, style=solid];
m0_750 -> m0_748  [key=0, style=bold, color=blue];
m0_131 -> m0_132  [key=0, style=solid];
m0_132 -> m0_131  [key=0, style=bold, color=blue];
m0_123 -> m0_124  [key=0, style=solid];
m0_124 -> m0_123  [key=0, style=bold, color=blue];
m0_45 -> m0_43  [key=0, style=bold, color=blue];
m0_29 -> m0_30  [key=0, style=solid, color=green];
m0_29 -> m0_29  [key=3, color=green, style=bold, label="Local variable string json"];
m0_30 -> m0_31  [key=0, style=solid, color=green];
m0_30 -> m0_32  [key=2, style=dotted];
m0_30 -> m0_33  [key=2, style=dotted];
m0_30 -> m0_6  [key=2, style=dotted, color=green];
m0_30 -> m0_34  [key=2, style=dotted, color=green];
m0_31 -> m0_29  [key=0, style=bold, color=blue];
m0_31 -> m0_32  [key=0, style=solid, color=green];
m0_31 -> m0_35  [key=2, style=dotted, color=green];
m0_31 -> m0_8  [key=2, style=dotted, color=green];
m0_121 -> m0_122  [key=0, style=solid];
m0_122 -> m0_121  [key=0, style=bold, color=blue];
m0_46 -> m0_47  [key=0, style=solid];
m0_46 -> m0_48  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_47 -> m0_48  [key=0, style=solid];
m0_47 -> m0_6  [key=2, style=dotted];
m0_47 -> m0_51  [key=2, style=dotted];
m0_47 -> m0_49  [key=1, style=dashed, color=darkseagreen4, label=attribute];
m0_33 -> m0_28  [key=0, style=bold, color=blue];
m0_32 -> m0_33  [key=0, style=solid, color=green];
m0_32 -> m0_8  [key=2, style=dotted, color=green];
m0_99 -> m0_100  [key=0, style=solid];
m0_100 -> m0_99  [key=0, style=bold, color=blue];
m0_198 -> m0_199  [key=0, style=solid];
m0_199 -> m0_198  [key=0, style=bold, color=blue];
m0_244 -> m0_245  [key=0, style=solid];
m0_244 -> m0_249  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m0_244 -> m0_250  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m0_244 -> m0_252  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m0_245 -> m0_246  [key=0, style=solid];
m0_245 -> m0_254  [key=2, style=dotted];
m0_245 -> m0_247  [key=1, style=dashed, color=darkseagreen4, label=node];
m0_245 -> m0_250  [key=1, style=dashed, color=darkseagreen4, label=node];
m0_249 -> m0_250  [key=0, style=solid];
m0_249 -> m0_258  [key=2, style=dotted];
m0_250 -> m0_251  [key=0, style=solid];
m0_250 -> m0_259  [key=2, style=dotted];
m0_252 -> m0_253  [key=0, style=solid];
m0_252 -> m0_260  [key=2, style=dotted];
m0_246 -> m0_247  [key=0, style=solid];
m0_246 -> m0_255  [key=2, style=dotted];
m0_246 -> m0_256  [key=2, style=dotted];
m0_246 -> m0_250  [key=1, style=dashed, color=darkseagreen4, label=manager];
m0_247 -> m0_248  [key=0, style=solid];
m0_247 -> m0_257  [key=2, style=dotted];
m0_248 -> m0_249  [key=0, style=solid];
m0_248 -> m0_250  [key=0, style=solid];
m0_251 -> m0_252  [key=0, style=solid];
m0_251 -> m0_253  [key=0, style=solid];
m0_253 -> m0_244  [key=0, style=bold, color=blue];
m0_233 -> m0_234  [key=0, style=solid];
m0_234 -> m0_235  [key=0, style=solid];
m0_235 -> m0_236  [key=0, style=solid];
m0_235 -> m0_224  [key=2, style=dotted];
m0_236 -> m0_233  [key=0, style=bold, color=blue];
m0_254 -> m0_261  [key=0, style=solid];
m0_254 -> m0_262  [key=1, style=dashed, color=darkseagreen4, label=object];
m0_254 -> m0_263  [key=1, style=dashed, color=darkseagreen4, label=object];
m0_254 -> m0_264  [key=1, style=dashed, color=darkseagreen4, label=object];
m0_261 -> m0_262  [key=0, style=solid];
m0_261 -> m0_263  [key=0, style=solid];
m0_262 -> m0_266  [key=0, style=solid];
m0_262 -> m0_200  [key=2, style=dotted];
m0_263 -> m0_264  [key=0, style=solid];
m0_263 -> m0_265  [key=0, style=solid];
m0_264 -> m0_266  [key=0, style=solid];
m0_264 -> m0_78  [key=2, style=dotted];
m0_265 -> m0_266  [key=0, style=solid];
m0_265 -> m0_267  [key=2, style=dotted];
m0_266 -> m0_254  [key=0, style=bold, color=blue];
m0_101 -> m0_102  [key=0, style=solid];
m0_102 -> m0_101  [key=0, style=bold, color=blue];
m0_115 -> m0_116  [key=0, style=solid];
m0_115 -> m0_73  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m0_116 -> m0_115  [key=0, style=bold, color=blue];
m0_554 -> m0_699  [key=0, style=solid];
m0_554 -> m0_700  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_699 -> m0_700  [key=0, style=solid];
m0_699 -> m0_295  [key=2, style=dotted];
m0_699 -> m0_553  [key=2, style=dotted];
m0_700 -> m0_701  [key=0, style=solid];
m0_700 -> m0_295  [key=2, style=dotted];
m0_700 -> m0_113  [key=2, style=dotted];
m0_700 -> m0_111  [key=2, style=dotted];
m0_701 -> m0_702  [key=0, style=solid];
m0_702 -> m0_554  [key=0, style=bold, color=blue];
m0_92 -> m0_93  [key=0, style=solid];
m0_90 -> m0_91  [key=0, style=solid];
m0_90 -> m0_94  [key=2, style=dotted];
m0_91 -> m0_92  [key=0, style=solid];
m0_93 -> m0_88  [key=0, style=bold, color=blue];
m0_259 -> m0_368  [key=0, style=solid];
m0_259 -> m0_371  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m0_259 -> m0_373  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.IXmlNode"];
m0_259 -> m0_457  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.IXmlNode"];
m0_259 -> m0_374  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m0_259 -> m0_375  [key=1, style=dashed, color=darkseagreen4, label=XmlNamespaceManager];
m0_259 -> m0_376  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.IXmlNode"];
m0_259 -> m0_380  [key=1, style=dashed, color=darkseagreen4, label=XmlNamespaceManager];
m0_259 -> m0_381  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_259 -> m0_382  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m0_259 -> m0_383  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.IXmlNode"];
m0_259 -> m0_384  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m0_259 -> m0_385  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.IXmlNode"];
m0_259 -> m0_386  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.IXmlNode"];
m0_259 -> m0_388  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m0_259 -> m0_389  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m0_259 -> m0_390  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m0_259 -> m0_392  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.IXmlNode"];
m0_259 -> m0_393  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m0_259 -> m0_395  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m0_259 -> m0_396  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m0_259 -> m0_397  [key=1, style=dashed, color=darkseagreen4, label=XmlNamespaceManager];
m0_259 -> m0_399  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_259 -> m0_400  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m0_259 -> m0_407  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.IXmlNode"];
m0_259 -> m0_409  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.IXmlNode"];
m0_259 -> m0_410  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.IXmlNode"];
m0_259 -> m0_412  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_259 -> m0_413  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m0_259 -> m0_414  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m0_259 -> m0_416  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.IXmlNode"];
m0_259 -> m0_417  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m0_259 -> m0_418  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m0_259 -> m0_420  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m0_259 -> m0_421  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m0_259 -> m0_423  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m0_259 -> m0_424  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m0_259 -> m0_426  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m0_259 -> m0_427  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m0_259 -> m0_428  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m0_259 -> m0_430  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.IXmlNode"];
m0_259 -> m0_431  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m0_259 -> m0_432  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m0_259 -> m0_434  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m0_259 -> m0_435  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m0_259 -> m0_437  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m0_259 -> m0_438  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m0_259 -> m0_440  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m0_259 -> m0_441  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m0_259 -> m0_443  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m0_259 -> m0_444  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m0_259 -> m0_445  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m0_259 -> m0_446  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.IXmlNode"];
m0_368 -> m0_369  [key=0, style=solid];
m0_368 -> m0_372  [key=0, style=solid];
m0_368 -> m0_398  [key=0, style=solid];
m0_368 -> m0_401  [key=0, style=solid];
m0_368 -> m0_415  [key=0, style=solid];
m0_368 -> m0_429  [key=0, style=solid];
m0_368 -> m0_446  [key=0, style=solid];
m0_371 -> m0_447  [key=0, style=solid];
m0_371 -> m0_332  [key=2, style=dotted];
m0_373 -> m0_374  [key=0, style=solid];
m0_373 -> m0_375  [key=0, style=solid];
m0_373 -> m0_323  [key=2, style=dotted];
m0_373 -> m0_448  [key=2, style=dotted];
m0_373 -> m0_456  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_374 -> m0_447  [key=0, style=solid];
m0_374 -> m0_332  [key=2, style=dotted];
m0_375 -> m0_376  [key=0, style=solid];
m0_375 -> m0_286  [key=2, style=dotted];
m0_376 -> m0_377  [key=0, style=solid];
m0_376 -> m0_381  [key=0, style=solid];
m0_376 -> m0_378  [key=1, style=dashed, color=darkseagreen4, label=attribute];
m0_376 -> m0_379  [key=1, style=dashed, color=darkseagreen4, label=attribute];
m0_380 -> m0_376  [key=0, style=solid];
m0_380 -> m0_287  [key=2, style=dotted];
m0_381 -> m0_382  [key=0, style=solid];
m0_381 -> m0_383  [key=0, style=solid];
m0_382 -> m0_383  [key=0, style=solid];
m0_382 -> m0_296  [key=2, style=dotted];
m0_382 -> m0_365  [key=2, style=dotted];
m0_383 -> m0_384  [key=0, style=solid];
m0_383 -> m0_385  [key=0, style=solid];
m0_383 -> m0_449  [key=2, style=dotted];
m0_383 -> m0_450  [key=2, style=dotted];
m0_384 -> m0_397  [key=0, style=solid];
m0_384 -> m0_451  [key=2, style=dotted];
m0_385 -> m0_386  [key=0, style=solid];
m0_385 -> m0_390  [key=0, style=solid];
m0_385 -> m0_452  [key=2, style=dotted];
m0_386 -> m0_387  [key=0, style=solid];
m0_388 -> m0_397  [key=0, style=solid];
m0_388 -> m0_453  [key=2, style=dotted];
m0_389 -> m0_397  [key=0, style=solid];
m0_389 -> m0_451  [key=2, style=dotted];
m0_390 -> m0_391  [key=0, style=solid];
m0_390 -> m0_258  [key=2, style=dotted];
m0_392 -> m0_393  [key=0, style=solid];
m0_392 -> m0_395  [key=0, style=solid];
m0_393 -> m0_394  [key=0, style=solid];
m0_393 -> m0_259  [key=2, style=dotted];
m0_395 -> m0_396  [key=0, style=solid];
m0_395 -> m0_332  [key=2, style=dotted];
m0_396 -> m0_397  [key=0, style=solid];
m0_396 -> m0_260  [key=2, style=dotted];
m0_397 -> m0_447  [key=0, style=solid];
m0_397 -> m0_454  [key=2, style=dotted];
m0_399 -> m0_400  [key=0, style=solid];
m0_399 -> m0_447  [key=0, style=solid];
m0_400 -> m0_447  [key=0, style=solid];
m0_400 -> m0_455  [key=2, style=dotted];
m0_407 -> m0_408  [key=0, style=solid];
m0_407 -> m0_409  [key=0, style=solid];
m0_409 -> m0_410  [key=0, style=solid];
m0_409 -> m0_412  [key=0, style=solid];
m0_410 -> m0_411  [key=0, style=solid];
m0_410 -> m0_412  [key=0, style=solid];
m0_412 -> m0_413  [key=0, style=solid];
m0_412 -> m0_414  [key=0, style=solid];
m0_413 -> m0_414  [key=0, style=solid];
m0_413 -> m0_296  [key=2, style=dotted];
m0_413 -> m0_365  [key=2, style=dotted];
m0_414 -> m0_447  [key=0, style=solid];
m0_414 -> m0_451  [key=2, style=dotted];
m0_416 -> m0_417  [key=0, style=solid];
m0_416 -> m0_419  [key=1, style=dashed, color=darkseagreen4, label=declaration];
m0_416 -> m0_421  [key=1, style=dashed, color=darkseagreen4, label=declaration];
m0_416 -> m0_422  [key=1, style=dashed, color=darkseagreen4, label=declaration];
m0_416 -> m0_424  [key=1, style=dashed, color=darkseagreen4, label=declaration];
m0_416 -> m0_425  [key=1, style=dashed, color=darkseagreen4, label=declaration];
m0_416 -> m0_427  [key=1, style=dashed, color=darkseagreen4, label=declaration];
m0_417 -> m0_418  [key=0, style=solid];
m0_417 -> m0_296  [key=2, style=dotted];
m0_417 -> m0_365  [key=2, style=dotted];
m0_418 -> m0_419  [key=0, style=solid];
m0_418 -> m0_258  [key=2, style=dotted];
m0_420 -> m0_421  [key=0, style=solid];
m0_420 -> m0_365  [key=2, style=dotted];
m0_421 -> m0_422  [key=0, style=solid];
m0_421 -> m0_451  [key=2, style=dotted];
m0_423 -> m0_424  [key=0, style=solid];
m0_423 -> m0_365  [key=2, style=dotted];
m0_424 -> m0_425  [key=0, style=solid];
m0_424 -> m0_451  [key=2, style=dotted];
m0_426 -> m0_427  [key=0, style=solid];
m0_426 -> m0_365  [key=2, style=dotted];
m0_427 -> m0_428  [key=0, style=solid];
m0_427 -> m0_451  [key=2, style=dotted];
m0_428 -> m0_447  [key=0, style=solid];
m0_428 -> m0_260  [key=2, style=dotted];
m0_430 -> m0_431  [key=0, style=solid];
m0_430 -> m0_433  [key=1, style=dashed, color=darkseagreen4, label=documentType];
m0_430 -> m0_435  [key=1, style=dashed, color=darkseagreen4, label=documentType];
m0_430 -> m0_436  [key=1, style=dashed, color=darkseagreen4, label=documentType];
m0_430 -> m0_438  [key=1, style=dashed, color=darkseagreen4, label=documentType];
m0_430 -> m0_439  [key=1, style=dashed, color=darkseagreen4, label=documentType];
m0_430 -> m0_441  [key=1, style=dashed, color=darkseagreen4, label=documentType];
m0_430 -> m0_442  [key=1, style=dashed, color=darkseagreen4, label=documentType];
m0_430 -> m0_444  [key=1, style=dashed, color=darkseagreen4, label=documentType];
m0_431 -> m0_432  [key=0, style=solid];
m0_431 -> m0_296  [key=2, style=dotted];
m0_431 -> m0_365  [key=2, style=dotted];
m0_432 -> m0_433  [key=0, style=solid];
m0_432 -> m0_258  [key=2, style=dotted];
m0_434 -> m0_435  [key=0, style=solid];
m0_434 -> m0_365  [key=2, style=dotted];
m0_435 -> m0_436  [key=0, style=solid];
m0_435 -> m0_451  [key=2, style=dotted];
m0_437 -> m0_438  [key=0, style=solid];
m0_437 -> m0_365  [key=2, style=dotted];
m0_438 -> m0_439  [key=0, style=solid];
m0_438 -> m0_451  [key=2, style=dotted];
m0_440 -> m0_441  [key=0, style=solid];
m0_440 -> m0_365  [key=2, style=dotted];
m0_441 -> m0_442  [key=0, style=solid];
m0_441 -> m0_451  [key=2, style=dotted];
m0_443 -> m0_444  [key=0, style=solid];
m0_443 -> m0_365  [key=2, style=dotted];
m0_444 -> m0_445  [key=0, style=solid];
m0_444 -> m0_451  [key=2, style=dotted];
m0_445 -> m0_447  [key=0, style=solid];
m0_445 -> m0_260  [key=2, style=dotted];
m0_446 -> m0_447  [key=0, style=solid];
m0_446 -> m0_322  [key=2, style=dotted];
m0_369 -> m0_370  [key=0, style=solid];
m0_372 -> m0_373  [key=0, style=solid];
m0_398 -> m0_399  [key=0, style=solid];
m0_401 -> m0_402  [key=0, style=solid];
m0_415 -> m0_416  [key=0, style=solid];
m0_429 -> m0_430  [key=0, style=solid];
m0_370 -> m0_371  [key=0, style=solid];
m0_377 -> m0_378  [key=0, style=solid];
m0_377 -> m0_376  [key=0, style=solid];
m0_378 -> m0_379  [key=0, style=solid];
m0_378 -> m0_380  [key=1, style=dashed, color=darkseagreen4, label=namespacePrefix];
m0_379 -> m0_380  [key=0, style=solid];
m0_387 -> m0_388  [key=0, style=solid];
m0_387 -> m0_389  [key=0, style=solid];
m0_391 -> m0_392  [key=0, style=solid];
m0_391 -> m0_393  [key=1, style=dashed, color=darkseagreen4, label=i];
m0_391 -> m0_394  [key=1, style=dashed, color=darkseagreen4, label=i];
m0_394 -> m0_392  [key=0, style=solid];
m0_394 -> m0_394  [key=1, style=dashed, color=darkseagreen4, label=i];
m0_402 -> m0_403  [key=0, style=solid];
m0_403 -> m0_404  [key=0, style=solid];
m0_404 -> m0_405  [key=0, style=solid];
m0_405 -> m0_406  [key=0, style=solid];
m0_406 -> m0_407  [key=0, style=solid];
m0_408 -> m0_447  [key=0, style=solid];
m0_411 -> m0_447  [key=0, style=solid];
m0_419 -> m0_420  [key=0, style=solid];
m0_419 -> m0_422  [key=0, style=solid];
m0_419 -> m0_295  [key=2, style=dotted];
m0_422 -> m0_423  [key=0, style=solid];
m0_422 -> m0_425  [key=0, style=solid];
m0_422 -> m0_295  [key=2, style=dotted];
m0_425 -> m0_426  [key=0, style=solid];
m0_425 -> m0_428  [key=0, style=solid];
m0_425 -> m0_295  [key=2, style=dotted];
m0_433 -> m0_434  [key=0, style=solid];
m0_433 -> m0_436  [key=0, style=solid];
m0_433 -> m0_295  [key=2, style=dotted];
m0_436 -> m0_437  [key=0, style=solid];
m0_436 -> m0_439  [key=0, style=solid];
m0_436 -> m0_295  [key=2, style=dotted];
m0_439 -> m0_440  [key=0, style=solid];
m0_439 -> m0_442  [key=0, style=solid];
m0_439 -> m0_295  [key=2, style=dotted];
m0_442 -> m0_443  [key=0, style=solid];
m0_442 -> m0_445  [key=0, style=solid];
m0_442 -> m0_295  [key=2, style=dotted];
m0_447 -> m0_259  [key=0, style=bold, color=blue];
m0_257 -> m0_268  [key=0, style=solid];
m0_257 -> m0_269  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.IXmlNode"];
m0_257 -> m0_278  [key=1, style=dashed, color=darkseagreen4, label=XmlNamespaceManager];
m0_257 -> m0_281  [key=1, style=dashed, color=darkseagreen4, label=XmlNamespaceManager];
m0_268 -> m0_269  [key=0, style=solid];
m0_268 -> m0_272  [key=1, style=dashed, color=darkseagreen4, label=parentElements];
m0_268 -> m0_274  [key=1, style=dashed, color=darkseagreen4, label=parentElements];
m0_268 -> m0_275  [key=1, style=dashed, color=darkseagreen4, label=parentElements];
m0_268 -> m0_276  [key=1, style=dashed, color=darkseagreen4, label=parentElements];
m0_268 -> m0_277  [key=1, style=dashed, color=darkseagreen4, label=parentElements];
m0_269 -> m0_270  [key=0, style=solid];
m0_278 -> m0_279  [key=0, style=solid];
m0_278 -> m0_286  [key=2, style=dotted];
m0_281 -> m0_279  [key=0, style=solid];
m0_281 -> m0_287  [key=2, style=dotted];
m0_272 -> m0_273  [key=0, style=solid];
m0_272 -> m0_274  [key=0, style=solid];
m0_274 -> m0_270  [key=0, style=solid];
m0_274 -> m0_284  [key=2, style=dotted];
m0_275 -> m0_276  [key=0, style=solid];
m0_275 -> m0_282  [key=0, style=solid];
m0_276 -> m0_277  [key=0, style=solid];
m0_276 -> m0_285  [key=2, style=dotted];
m0_277 -> m0_278  [key=0, style=solid];
m0_277 -> m0_282  [key=0, style=solid];
m0_277 -> m0_279  [key=1, style=dashed, color=darkseagreen4, label=parentElement];
m0_270 -> m0_271  [key=0, style=solid];
m0_270 -> m0_275  [key=0, style=solid];
m0_270 -> m0_270  [key=1, style=dashed, color=darkseagreen4, label=parent];
m0_270 -> m0_274  [key=1, style=dashed, color=darkseagreen4, label=parent];
m0_271 -> m0_272  [key=0, style=solid];
m0_271 -> m0_270  [key=0, style=solid];
m0_273 -> m0_274  [key=0, style=solid];
m0_273 -> m0_283  [key=2, style=dotted];
m0_273 -> m0_275  [key=1, style=dashed, color=darkseagreen4, label=parentElements];
m0_273 -> m0_276  [key=1, style=dashed, color=darkseagreen4, label=parentElements];
m0_273 -> m0_277  [key=1, style=dashed, color=darkseagreen4, label=parentElements];
m0_279 -> m0_280  [key=0, style=solid];
m0_279 -> m0_277  [key=0, style=solid];
m0_279 -> m0_281  [key=1, style=dashed, color=darkseagreen4, label=attribute];
m0_280 -> m0_281  [key=0, style=solid];
m0_280 -> m0_279  [key=0, style=solid];
m0_282 -> m0_257  [key=0, style=bold, color=blue];
m0_549 -> m0_612  [key=0, style=solid];
m0_549 -> m0_615  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_549 -> m0_616  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_549 -> m0_617  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_549 -> m0_619  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_549 -> m0_626  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_549 -> m0_627  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_549 -> m0_631  [key=1, style=dashed, color=darkseagreen4, label=XmlNamespaceManager];
m0_549 -> m0_634  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_549 -> m0_635  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_549 -> m0_636  [key=1, style=dashed, color=darkseagreen4, label=XmlNamespaceManager];
m0_549 -> m0_639  [key=1, style=dashed, color=darkseagreen4, label=XmlNamespaceManager];
m0_549 -> m0_643  [key=1, style=dashed, color=darkseagreen4, label=XmlNamespaceManager];
m0_549 -> m0_651  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_612 -> m0_613  [key=0, style=solid];
m0_612 -> m0_362  [key=2, style=dotted];
m0_612 -> m0_628  [key=1, style=dashed, color=darkseagreen4, label=attributeNameValues];
m0_612 -> m0_642  [key=1, style=dashed, color=darkseagreen4, label=attributeNameValues];
m0_612 -> m0_644  [key=1, style=dashed, color=darkseagreen4, label=attributeNameValues];
m0_612 -> m0_652  [key=1, style=dashed, color=darkseagreen4, label=attributeNameValues];
m0_615 -> m0_616  [key=0, style=solid];
m0_615 -> m0_652  [key=0, style=solid];
m0_616 -> m0_617  [key=0, style=solid];
m0_616 -> m0_652  [key=0, style=solid];
m0_616 -> m0_497  [key=2, style=dotted];
m0_617 -> m0_618  [key=0, style=solid];
m0_617 -> m0_647  [key=0, style=solid];
m0_617 -> m0_649  [key=0, style=solid];
m0_617 -> m0_651  [key=0, style=solid];
m0_619 -> m0_620  [key=0, style=solid];
m0_619 -> m0_519  [key=2, style=dotted];
m0_619 -> m0_621  [key=1, style=dashed, color=darkseagreen4, label=attributeName];
m0_619 -> m0_625  [key=1, style=dashed, color=darkseagreen4, label=attributeName];
m0_626 -> m0_627  [key=0, style=solid];
m0_626 -> m0_497  [key=2, style=dotted];
m0_627 -> m0_628  [key=0, style=solid];
m0_627 -> m0_555  [key=2, style=dotted];
m0_627 -> m0_631  [key=1, style=dashed, color=darkseagreen4, label=attributeValue];
m0_631 -> m0_616  [key=0, style=solid];
m0_631 -> m0_287  [key=2, style=dotted];
m0_634 -> m0_635  [key=0, style=solid];
m0_634 -> m0_497  [key=2, style=dotted];
m0_635 -> m0_636  [key=0, style=solid];
m0_635 -> m0_519  [key=2, style=dotted];
m0_635 -> m0_644  [key=1, style=dashed, color=darkseagreen4, label=attributeValue];
m0_636 -> m0_637  [key=0, style=solid];
m0_636 -> m0_294  [key=2, style=dotted];
m0_636 -> m0_644  [key=1, style=dashed, color=darkseagreen4, label=jsonPrefix];
m0_639 -> m0_640  [key=0, style=solid];
m0_639 -> m0_641  [key=0, style=solid];
m0_639 -> m0_553  [key=2, style=dotted];
m0_643 -> m0_644  [key=0, style=solid];
m0_643 -> m0_287  [key=2, style=dotted];
m0_651 -> m0_653  [key=0, style=solid];
m0_651 -> m0_493  [key=2, style=dotted];
m0_613 -> m0_614  [key=0, style=solid];
m0_613 -> m0_616  [key=1, style=dashed, color=darkseagreen4, label=finishedAttributes];
m0_628 -> m0_629  [key=0, style=solid];
m0_628 -> m0_364  [key=2, style=dotted];
m0_642 -> m0_643  [key=0, style=solid];
m0_642 -> m0_364  [key=2, style=dotted];
m0_644 -> m0_616  [key=0, style=solid];
m0_644 -> m0_364  [key=2, style=dotted];
m0_652 -> m0_653  [key=0, style=solid];
m0_614 -> m0_615  [key=0, style=solid];
m0_614 -> m0_616  [key=1, style=dashed, color=darkseagreen4, label=finishedElement];
m0_618 -> m0_619  [key=0, style=solid];
m0_647 -> m0_648  [key=0, style=solid];
m0_649 -> m0_650  [key=0, style=solid];
m0_620 -> m0_621  [key=0, style=solid];
m0_620 -> m0_646  [key=0, style=solid];
m0_620 -> m0_295  [key=2, style=dotted];
m0_621 -> m0_622  [key=0, style=solid];
m0_621 -> m0_623  [key=1, style=dashed, color=darkseagreen4, label=firstChar];
m0_625 -> m0_626  [key=0, style=solid];
m0_625 -> m0_552  [key=2, style=dotted];
m0_625 -> m0_625  [key=1, style=dashed, color=darkseagreen4, label=attributeName];
m0_625 -> m0_628  [key=1, style=dashed, color=darkseagreen4, label=attributeName];
m0_625 -> m0_630  [key=1, style=dashed, color=darkseagreen4, label=attributeName];
m0_625 -> m0_633  [key=1, style=dashed, color=darkseagreen4, label=attributeName];
m0_646 -> m0_616  [key=0, style=solid];
m0_622 -> m0_623  [key=0, style=solid];
m0_623 -> m0_624  [key=0, style=solid];
m0_623 -> m0_632  [key=0, style=solid];
m0_623 -> m0_645  [key=0, style=solid];
m0_624 -> m0_625  [key=0, style=solid];
m0_632 -> m0_633  [key=0, style=solid];
m0_645 -> m0_616  [key=0, style=solid];
m0_630 -> m0_631  [key=0, style=solid];
m0_630 -> m0_616  [key=0, style=solid];
m0_630 -> m0_654  [key=2, style=dotted];
m0_633 -> m0_634  [key=0, style=solid];
m0_633 -> m0_552  [key=2, style=dotted];
m0_633 -> m0_633  [key=1, style=dashed, color=darkseagreen4, label=attributeName];
m0_633 -> m0_644  [key=1, style=dashed, color=darkseagreen4, label=attributeName];
m0_629 -> m0_630  [key=0, style=solid];
m0_637 -> m0_638  [key=0, style=solid];
m0_637 -> m0_644  [key=0, style=solid];
m0_638 -> m0_639  [key=0, style=solid];
m0_638 -> m0_640  [key=1, style=dashed, color=darkseagreen4, label=i];
m0_638 -> m0_641  [key=1, style=dashed, color=darkseagreen4, label=i];
m0_640 -> m0_639  [key=0, style=solid];
m0_640 -> m0_655  [key=2, style=dotted];
m0_640 -> m0_640  [key=1, style=dashed, color=darkseagreen4, label=i];
m0_640 -> m0_641  [key=1, style=dashed, color=darkseagreen4, label=i];
m0_641 -> m0_642  [key=0, style=solid];
m0_641 -> m0_643  [key=1, style=dashed, color=darkseagreen4, label=jsonPrefix];
m0_641 -> m0_644  [key=1, style=dashed, color=darkseagreen4, label=jsonPrefix];
m0_648 -> m0_616  [key=0, style=solid];
m0_650 -> m0_616  [key=0, style=solid];
m0_653 -> m0_549  [key=0, style=bold, color=blue];
m0_498 -> m0_703  [key=0, style=solid];
m0_498 -> m0_705  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.IXmlDocument"];
m0_498 -> m0_707  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_498 -> m0_708  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_498 -> m0_709  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_498 -> m0_711  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_498 -> m0_712  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_498 -> m0_715  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.IXmlNode"];
m0_498 -> m0_716  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.IXmlDocument"];
m0_498 -> m0_717  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_498 -> m0_719  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_498 -> m0_720  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_498 -> m0_721  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_498 -> m0_723  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_498 -> m0_727  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_498 -> m0_728  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_703 -> m0_704  [key=0, style=solid];
m0_703 -> m0_718  [key=0, style=solid];
m0_703 -> m0_722  [key=0, style=solid];
m0_703 -> m0_724  [key=0, style=solid];
m0_703 -> m0_727  [key=0, style=solid];
m0_705 -> m0_706  [key=0, style=solid];
m0_705 -> m0_707  [key=0, style=solid];
m0_707 -> m0_708  [key=0, style=solid];
m0_707 -> m0_519  [key=2, style=dotted];
m0_707 -> m0_712  [key=1, style=dashed, color=darkseagreen4, label=propertyName];
m0_707 -> m0_715  [key=1, style=dashed, color=darkseagreen4, label=propertyName];
m0_707 -> m0_731  [key=1, style=dashed, color=darkseagreen4, label=propertyName];
m0_707 -> m0_717  [key=1, style=dashed, color=darkseagreen4, label=propertyName];
m0_708 -> m0_709  [key=0, style=solid];
m0_708 -> m0_497  [key=2, style=dotted];
m0_709 -> m0_710  [key=0, style=solid];
m0_709 -> m0_717  [key=0, style=solid];
m0_711 -> m0_712  [key=0, style=solid];
m0_711 -> m0_714  [key=0, style=solid];
m0_711 -> m0_497  [key=2, style=dotted];
m0_712 -> m0_713  [key=0, style=solid];
m0_712 -> m0_500  [key=2, style=dotted];
m0_715 -> m0_716  [key=0, style=solid];
m0_715 -> m0_602  [key=2, style=dotted];
m0_715 -> m0_603  [key=2, style=dotted];
m0_715 -> m0_730  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_716 -> m0_728  [key=0, style=solid];
m0_716 -> m0_601  [key=2, style=dotted];
m0_717 -> m0_728  [key=0, style=solid];
m0_717 -> m0_500  [key=2, style=dotted];
m0_719 -> m0_720  [key=0, style=solid];
m0_719 -> m0_519  [key=2, style=dotted];
m0_719 -> m0_721  [key=1, style=dashed, color=darkseagreen4, label=constructorName];
m0_720 -> m0_721  [key=0, style=solid];
m0_720 -> m0_728  [key=0, style=solid];
m0_720 -> m0_497  [key=2, style=dotted];
m0_721 -> m0_720  [key=0, style=solid];
m0_721 -> m0_500  [key=2, style=dotted];
m0_723 -> m0_728  [key=0, style=solid];
m0_723 -> m0_95  [key=2, style=dotted];
m0_723 -> m0_123  [key=2, style=dotted];
m0_727 -> m0_729  [key=0, style=solid];
m0_727 -> m0_493  [key=2, style=dotted];
m0_728 -> m0_498  [key=0, style=solid];
m0_728 -> m0_729  [key=0, style=solid];
m0_728 -> m0_497  [key=2, style=dotted];
m0_704 -> m0_705  [key=0, style=solid];
m0_718 -> m0_719  [key=0, style=solid];
m0_722 -> m0_723  [key=0, style=solid];
m0_724 -> m0_725  [key=0, style=solid];
m0_706 -> m0_729  [key=0, style=solid];
m0_706 -> m0_493  [key=2, style=dotted];
m0_710 -> m0_711  [key=0, style=solid];
m0_710 -> m0_713  [key=1, style=dashed, color=darkseagreen4, label=count];
m0_710 -> m0_714  [key=1, style=dashed, color=darkseagreen4, label=count];
m0_713 -> m0_711  [key=0, style=solid];
m0_713 -> m0_713  [key=1, style=dashed, color=darkseagreen4, label=count];
m0_713 -> m0_714  [key=1, style=dashed, color=darkseagreen4, label=count];
m0_714 -> m0_715  [key=0, style=solid];
m0_714 -> m0_728  [key=0, style=solid];
m0_725 -> m0_726  [key=0, style=solid];
m0_726 -> m0_729  [key=0, style=solid];
m0_729 -> m0_498  [key=0, style=bold, color=blue];
m0_758 -> m0_1  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.XmlDocumentWrapper"];
m0_758 -> m0_4  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.XmlDocumentWrapper"];
m0_758 -> m0_9  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.XmlDocumentWrapper"];
m0_758 -> m0_13  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.XmlDocumentWrapper"];
m0_758 -> m0_17  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.XmlDocumentWrapper"];
m0_758 -> m0_21  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.XmlDocumentWrapper"];
m0_758 -> m0_25  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.XmlDocumentWrapper"];
m0_758 -> m0_30  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.XmlDocumentWrapper"];
m0_758 -> m0_35  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.XmlDocumentWrapper"];
m0_758 -> m0_39  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.XmlDocumentWrapper"];
m0_758 -> m0_44  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.XmlDocumentWrapper"];
m0_758 -> m0_47  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.XmlDocumentWrapper"];
m0_758 -> m0_53  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.XmlDocumentWrapper"];
m0_759 -> m0_58  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.XmlElementWrapper"];
m0_759 -> m0_62  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.XmlElementWrapper"];
m0_759 -> m0_66  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.XmlElementWrapper"];
m0_760 -> m0_70  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.XmlDeclarationWrapper"];
m0_761 -> m0_73  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.XmlDocumentTypeWrapper"];
m0_762 -> m0_76  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.XmlNodeWrapper"];
m0_762 -> m0_90  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.XmlNodeWrapper"];
m0_762 -> m0_91  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.XmlNodeWrapper"];
m0_763 -> m0_126  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.XDeclarationWrapper"];
m0_764 -> m0_129  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.XDocumentTypeWrapper"];
m0_765 -> m0_188  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.XDocumentWrapper"];
m0_765 -> m0_190  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.XDocumentWrapper"];
m0_766 -> m0_220  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.XContainerWrapper"];
m0_766 -> m0_221  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.XContainerWrapper"];
m0_767 -> m0_225  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.XObjectWrapper"];
m0_768 -> m0_235  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.XElementWrapper"];
m0_768 -> m0_242  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.XElementWrapper"];
m0_769 -> m0_245  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.XmlNodeConverter"];
m0_769 -> m0_247  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.XmlNodeConverter"];
m0_769 -> m0_248  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.XmlNodeConverter"];
m0_769 -> m0_250  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.XmlNodeConverter"];
m0_769 -> m0_251  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.XmlNodeConverter"];
m0_769 -> m0_301  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.XmlNodeConverter"];
m0_769 -> m0_307  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.XmlNodeConverter"];
m0_769 -> m0_309  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.XmlNodeConverter"];
m0_769 -> m0_311  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.XmlNodeConverter"];
m0_769 -> m0_337  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.XmlNodeConverter"];
m0_769 -> m0_348  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.XmlNodeConverter"];
m0_769 -> m0_351  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.XmlNodeConverter"];
m0_769 -> m0_358  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.XmlNodeConverter"];
m0_769 -> m0_371  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.XmlNodeConverter"];
m0_769 -> m0_373  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.XmlNodeConverter"];
m0_769 -> m0_374  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.XmlNodeConverter"];
m0_769 -> m0_382  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.XmlNodeConverter"];
m0_769 -> m0_383  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.XmlNodeConverter"];
m0_769 -> m0_393  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.XmlNodeConverter"];
m0_769 -> m0_395  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.XmlNodeConverter"];
m0_769 -> m0_413  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.XmlNodeConverter"];
m0_769 -> m0_417  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.XmlNodeConverter"];
m0_769 -> m0_431  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.XmlNodeConverter"];
m0_769 -> m0_482  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.XmlNodeConverter"];
m0_769 -> m0_483  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.XmlNodeConverter"];
m0_769 -> m0_485  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.XmlNodeConverter"];
m0_769 -> m0_511  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.XmlNodeConverter"];
m0_769 -> m0_513  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.XmlNodeConverter"];
m0_769 -> m0_515  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.XmlNodeConverter"];
m0_769 -> m0_517  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.XmlNodeConverter"];
m0_769 -> m0_526  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.XmlNodeConverter"];
m0_769 -> m0_534  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.XmlNodeConverter"];
m0_769 -> m0_541  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.XmlNodeConverter"];
m0_769 -> m0_545  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.XmlNodeConverter"];
m0_769 -> m0_589  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.XmlNodeConverter"];
m0_769 -> m0_593  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.XmlNodeConverter"];
m0_769 -> m0_595  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.XmlNodeConverter"];
m0_769 -> m0_596  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.XmlNodeConverter"];
m0_769 -> m0_597  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.XmlNodeConverter"];
m0_769 -> m0_599  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.XmlNodeConverter"];
m0_769 -> m0_627  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.XmlNodeConverter"];
m0_769 -> m0_630  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.XmlNodeConverter"];
m0_769 -> m0_712  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.XmlNodeConverter"];
m0_769 -> m0_714  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.XmlNodeConverter"];
m0_769 -> m0_716  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.XmlNodeConverter"];
m0_769 -> m0_717  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.XmlNodeConverter"];
m0_769 -> m0_721  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.XmlNodeConverter"];
m0_770 -> m0_457  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Converters.IXmlNode"];
m0_771 -> m0_605  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_772 -> m0_731  [key=1, style=dashed, color=darkseagreen4, label=propertyName];
m1_137 -> m1_138  [key=0, style=solid];
m1_137 -> m1_129  [key=0, style=bold, color=blue];
m1_140 -> m1_13  [key=2, style=dotted];
m1_140 -> m1_141  [key=0, style=solid];
m1_140 -> m1_70  [key=2, style=dotted];
m1_140 -> m1_71  [key=2, style=dotted];
m1_143 -> m1_13  [key=2, style=dotted];
m1_143 -> m1_144  [key=0, style=solid];
m1_143 -> m1_70  [key=2, style=dotted];
m1_143 -> m1_71  [key=2, style=dotted];
m1_144 -> m1_13  [key=2, style=dotted];
m1_144 -> m1_145  [key=0, style=solid];
m1_138 -> m1_45  [key=2, style=dotted];
m1_138 -> m1_140  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_138 -> m1_143  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_138 -> m1_139  [key=0, style=solid];
m1_138 -> m1_141  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_138 -> m1_142  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_139 -> m1_140  [key=0, style=solid];
m1_139 -> m1_68  [key=2, style=dotted];
m1_139 -> m1_69  [key=2, style=dotted];
m1_141 -> m1_144  [key=1, style=dashed, color=darkseagreen4, label=p];
m1_141 -> m1_70  [key=2, style=dotted];
m1_141 -> m1_142  [key=0, style=solid];
m1_141 -> m1_146  [key=2, style=dotted];
m1_142 -> m1_143  [key=0, style=solid];
m1_142 -> m1_147  [key=2, style=dotted];
m1_145 -> m1_137  [key=0, style=bold, color=blue];
m1_760 -> m1_761  [key=0, style=solid];
m1_761 -> m1_45  [key=2, style=dotted];
m1_761 -> m1_762  [key=0, style=solid];
m1_762 -> m1_763  [key=0, style=solid];
m1_762 -> m1_257  [key=2, style=dotted];
m1_763 -> m1_760  [key=0, style=bold, color=blue];
m1_56 -> m1_57  [key=0, style=solid];
m1_173 -> m1_174  [key=0, style=solid];
m1_178 -> m1_13  [key=2, style=dotted];
m1_178 -> m1_179  [key=0, style=solid];
m1_178 -> m1_70  [key=2, style=dotted];
m1_178 -> m1_71  [key=2, style=dotted];
m1_181 -> m1_13  [key=2, style=dotted];
m1_181 -> m1_182  [key=0, style=solid];
m1_182 -> m1_13  [key=2, style=dotted];
m1_182 -> m1_183  [key=0, style=solid];
m1_183 -> m1_13  [key=2, style=dotted];
m1_183 -> m1_184  [key=0, style=solid];
m1_184 -> m1_13  [key=2, style=dotted];
m1_184 -> m1_185  [key=0, style=solid];
m1_185 -> m1_13  [key=2, style=dotted];
m1_185 -> m1_186  [key=0, style=solid];
m1_186 -> m1_13  [key=2, style=dotted];
m1_186 -> m1_187  [key=0, style=solid];
m1_187 -> m1_13  [key=2, style=dotted];
m1_187 -> m1_188  [key=0, style=solid];
m1_188 -> m1_13  [key=2, style=dotted];
m1_188 -> m1_189  [key=0, style=solid];
m1_174 -> m1_45  [key=2, style=dotted];
m1_174 -> m1_178  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_174 -> m1_175  [key=0, style=solid];
m1_174 -> m1_176  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_174 -> m1_177  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_174 -> m1_180  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_177 -> m1_178  [key=0, style=solid];
m1_177 -> m1_68  [key=2, style=dotted];
m1_177 -> m1_69  [key=2, style=dotted];
m1_179 -> m1_181  [key=1, style=dashed, color=darkseagreen4, label=a];
m1_179 -> m1_182  [key=1, style=dashed, color=darkseagreen4, label=a];
m1_179 -> m1_183  [key=1, style=dashed, color=darkseagreen4, label=a];
m1_179 -> m1_184  [key=1, style=dashed, color=darkseagreen4, label=a];
m1_179 -> m1_185  [key=1, style=dashed, color=darkseagreen4, label=a];
m1_179 -> m1_186  [key=1, style=dashed, color=darkseagreen4, label=a];
m1_179 -> m1_187  [key=1, style=dashed, color=darkseagreen4, label=a];
m1_179 -> m1_188  [key=1, style=dashed, color=darkseagreen4, label=a];
m1_179 -> m1_180  [key=0, style=solid];
m1_180 -> m1_181  [key=0, style=solid];
m1_180 -> m1_190  [key=2, style=dotted];
m1_175 -> m1_68  [key=2, style=dotted];
m1_175 -> m1_69  [key=2, style=dotted];
m1_175 -> m1_176  [key=0, style=solid];
m1_176 -> m1_68  [key=2, style=dotted];
m1_176 -> m1_69  [key=2, style=dotted];
m1_176 -> m1_177  [key=0, style=solid];
m1_189 -> m1_173  [key=0, style=bold, color=blue];
m1_1031 -> m1_1032  [key=0, style=solid];
m1_1040 -> m1_13  [key=2, style=dotted];
m1_1040 -> m1_1041  [key=0, style=solid];
m1_1040 -> m1_1062  [key=2, style=dotted];
m1_1041 -> m1_13  [key=2, style=dotted];
m1_1041 -> m1_1042  [key=0, style=solid];
m1_1041 -> m1_1063  [key=2, style=dotted];
m1_1046 -> m1_13  [key=2, style=dotted];
m1_1046 -> m1_1047  [key=0, style=solid];
m1_1046 -> m1_1062  [key=2, style=dotted];
m1_1047 -> m1_13  [key=2, style=dotted];
m1_1047 -> m1_1048  [key=0, style=solid];
m1_1047 -> m1_1063  [key=2, style=dotted];
m1_1052 -> m1_13  [key=2, style=dotted];
m1_1052 -> m1_1053  [key=0, style=solid];
m1_1052 -> m1_1062  [key=2, style=dotted];
m1_1053 -> m1_13  [key=2, style=dotted];
m1_1053 -> m1_1054  [key=0, style=solid];
m1_1053 -> m1_1063  [key=2, style=dotted];
m1_1058 -> m1_13  [key=2, style=dotted];
m1_1058 -> m1_1059  [key=0, style=solid];
m1_1058 -> m1_1062  [key=2, style=dotted];
m1_1059 -> m1_13  [key=2, style=dotted];
m1_1059 -> m1_1060  [key=0, style=solid];
m1_1059 -> m1_1063  [key=2, style=dotted];
m1_1035 -> m1_13  [key=2, style=dotted];
m1_1035 -> m1_1036  [key=0, style=solid];
m1_1037 -> m1_13  [key=2, style=dotted];
m1_1037 -> m1_1038  [key=0, style=solid];
m1_1038 -> m1_13  [key=2, style=dotted];
m1_1038 -> m1_1039  [key=0, style=solid];
m1_1039 -> m1_13  [key=2, style=dotted];
m1_1039 -> m1_1040  [key=0, style=solid];
m1_1043 -> m1_13  [key=2, style=dotted];
m1_1043 -> m1_1044  [key=0, style=solid];
m1_1044 -> m1_13  [key=2, style=dotted];
m1_1044 -> m1_1045  [key=0, style=solid];
m1_1045 -> m1_13  [key=2, style=dotted];
m1_1045 -> m1_1046  [key=0, style=solid];
m1_1049 -> m1_13  [key=2, style=dotted];
m1_1049 -> m1_1050  [key=0, style=solid];
m1_1050 -> m1_13  [key=2, style=dotted];
m1_1050 -> m1_1051  [key=0, style=solid];
m1_1051 -> m1_13  [key=2, style=dotted];
m1_1051 -> m1_1052  [key=0, style=solid];
m1_1055 -> m1_13  [key=2, style=dotted];
m1_1055 -> m1_1056  [key=0, style=solid];
m1_1056 -> m1_13  [key=2, style=dotted];
m1_1056 -> m1_1057  [key=0, style=solid];
m1_1057 -> m1_13  [key=2, style=dotted];
m1_1057 -> m1_1058  [key=0, style=solid];
m1_1032 -> m1_1040  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_1032 -> m1_1041  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_1032 -> m1_1046  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_1032 -> m1_1047  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_1032 -> m1_1052  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_1032 -> m1_1053  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_1032 -> m1_1058  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_1032 -> m1_1059  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_1032 -> m1_1033  [key=0, style=solid];
m1_1032 -> m1_277  [key=2, style=dotted];
m1_1036 -> m1_1040  [key=1, style=dashed, color=darkseagreen4, label=prop1];
m1_1036 -> m1_1041  [key=1, style=dashed, color=darkseagreen4, label=prop1];
m1_1036 -> m1_1037  [key=0, style=solid];
m1_1036 -> m1_1038  [key=1, style=dashed, color=darkseagreen4, label=prop1];
m1_1036 -> m1_1039  [key=1, style=dashed, color=darkseagreen4, label=prop1];
m1_1042 -> m1_1046  [key=1, style=dashed, color=darkseagreen4, label=prop2];
m1_1042 -> m1_1047  [key=1, style=dashed, color=darkseagreen4, label=prop2];
m1_1042 -> m1_1043  [key=0, style=solid];
m1_1042 -> m1_1044  [key=1, style=dashed, color=darkseagreen4, label=prop2];
m1_1042 -> m1_1045  [key=1, style=dashed, color=darkseagreen4, label=prop2];
m1_1048 -> m1_1052  [key=1, style=dashed, color=darkseagreen4, label=prop3];
m1_1048 -> m1_1053  [key=1, style=dashed, color=darkseagreen4, label=prop3];
m1_1048 -> m1_1049  [key=0, style=solid];
m1_1048 -> m1_1050  [key=1, style=dashed, color=darkseagreen4, label=prop3];
m1_1048 -> m1_1051  [key=1, style=dashed, color=darkseagreen4, label=prop3];
m1_1054 -> m1_1058  [key=1, style=dashed, color=darkseagreen4, label=prop4];
m1_1054 -> m1_1059  [key=1, style=dashed, color=darkseagreen4, label=prop4];
m1_1054 -> m1_1055  [key=0, style=solid];
m1_1054 -> m1_1056  [key=1, style=dashed, color=darkseagreen4, label=prop4];
m1_1054 -> m1_1057  [key=1, style=dashed, color=darkseagreen4, label=prop4];
m1_1034 -> m1_1035  [key=0, style=solid];
m1_1034 -> m1_1036  [key=1, style=dashed, color=darkseagreen4, label=properties];
m1_1034 -> m1_1042  [key=1, style=dashed, color=darkseagreen4, label=properties];
m1_1034 -> m1_1048  [key=1, style=dashed, color=darkseagreen4, label=properties];
m1_1034 -> m1_1054  [key=1, style=dashed, color=darkseagreen4, label=properties];
m1_1034 -> m1_1061  [key=2, style=dotted];
m1_1033 -> m1_1034  [key=0, style=solid];
m1_1060 -> m1_1031  [key=0, style=bold, color=blue];
m1_808 -> m1_809  [key=0, style=solid];
m1_810 -> m1_13  [key=2, style=dotted];
m1_810 -> m1_811  [key=0, style=solid];
m1_809 -> m1_45  [key=2, style=dotted];
m1_809 -> m1_810  [key=0, style=solid];
m1_811 -> m1_808  [key=0, style=bold, color=blue];
m1_33 -> m1_34  [key=0, style=solid];
m1_33 -> m1_10  [key=2, style=dotted];
m1_33 -> m1_35  [key=1, style=dashed, color=darkseagreen4, label=creator];
m1_310 -> m1_311  [key=0, style=solid];
m1_317 -> m1_13  [key=2, style=dotted];
m1_317 -> m1_318  [key=0, style=solid];
m1_318 -> m1_13  [key=2, style=dotted];
m1_318 -> m1_319  [key=0, style=solid];
m1_311 -> m1_45  [key=2, style=dotted];
m1_311 -> m1_312  [key=0, style=solid];
m1_311 -> m1_313  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_311 -> m1_314  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_315 -> m1_317  [key=1, style=dashed, color=darkseagreen4, label=i];
m1_315 -> m1_318  [key=1, style=dashed, color=darkseagreen4, label=i];
m1_315 -> m1_316  [key=0, style=solid];
m1_315 -> m1_319  [key=1, style=dashed, color=darkseagreen4, label=i];
m1_316 -> m1_317  [key=0, style=solid];
m1_316 -> m1_318  [key=1, style=dashed, color=darkseagreen4, label=property];
m1_316 -> m1_320  [key=0, style=solid];
m1_319 -> m1_316  [key=0, style=solid];
m1_319 -> m1_319  [key=1, style=dashed, color=darkseagreen4, label=i];
m1_312 -> m1_68  [key=2, style=dotted];
m1_312 -> m1_69  [key=2, style=dotted];
m1_312 -> m1_313  [key=0, style=solid];
m1_313 -> m1_68  [key=2, style=dotted];
m1_313 -> m1_69  [key=2, style=dotted];
m1_313 -> m1_314  [key=0, style=solid];
m1_314 -> m1_315  [key=0, style=solid];
m1_314 -> m1_316  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_320 -> m1_310  [key=0, style=bold, color=blue];
m1_14 -> m1_15  [key=0, style=solid];
m1_198 -> m1_199  [key=0, style=solid];
m1_199 -> m1_201  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_199 -> m1_200  [key=0, style=solid];
m1_199 -> m1_117  [key=2, style=dotted];
m1_200 -> m1_198  [key=0, style=bold, color=blue];
m1_91 -> m1_92  [key=0, style=solid, color=green];
m1_92 -> m1_93  [key=0, style=solid, color=green];
m1_92 -> m1_100  [key=2, style=dotted];
m1_92 -> m1_94  [key=1, style=dashed, color=green, label=o];
m1_92 -> m1_45  [key=2, style=dotted, color=green];
m1_92 -> m1_95  [key=1, style=dashed, color=green, label=o];
m1_92 -> m1_96  [key=1, style=dashed, color=green, label=o];
m1_92 -> m1_97  [key=1, style=dashed, color=green, label=o];
m1_92 -> m1_98  [key=1, style=dashed, color=green, label=o];
m1_93 -> m1_94  [key=0, style=solid];
m1_93 -> m1_12  [key=2, style=dotted];
m1_93 -> m1_68  [key=2, style=dotted];
m1_93 -> m1_69  [key=2, style=dotted];
m1_94 -> m1_95  [key=0, style=solid, color=green];
m1_94 -> m1_47  [key=2, style=dotted];
m1_94 -> m1_13  [key=2, style=dotted];
m1_94 -> m1_70  [key=2, style=dotted];
m1_94 -> m1_71  [key=2, style=dotted];
m1_95 -> m1_96  [key=0, style=solid, color=green];
m1_95 -> m1_101  [key=2, style=dotted];
m1_95 -> m1_97  [key=1, style=dashed, color=darkseagreen4, label=result];
m1_95 -> m1_100  [key=2, style=dotted, color=green];
m1_95 -> m1_13  [key=2, style=dotted, color=green];
m1_96 -> m1_97  [key=0, style=solid];
m1_96 -> m1_12  [key=2, style=dotted];
m1_96 -> m1_13  [key=2, style=dotted];
m1_96 -> m1_100  [key=2, style=dotted];
m1_97 -> m1_98  [key=0, style=solid];
m1_97 -> m1_13  [key=2, style=dotted];
m1_97 -> m1_100  [key=2, style=dotted];
m1_98 -> m1_99  [key=0, style=solid];
m1_98 -> m1_13  [key=2, style=dotted];
m1_98 -> m1_70  [key=2, style=dotted];
m1_98 -> m1_71  [key=2, style=dotted];
m1_99 -> m1_91  [key=0, style=bold, color=blue];
m1_0 -> m1_1  [key=0, style=solid];
m1_1 -> m1_2  [key=0, style=solid];
m1_1 -> m1_8  [key=2, style=dotted];
m1_1 -> m1_9  [key=2, style=dotted];
m1_1 -> m1_14  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_2 -> m1_3  [key=0, style=solid];
m1_2 -> m1_10  [key=2, style=dotted];
m1_2 -> m1_4  [key=1, style=dashed, color=darkseagreen4, label=creator];
m1_2 -> m1_6  [key=1, style=dashed, color=darkseagreen4, label=v];
m1_2 -> m1_9  [key=2, style=dotted];
m1_3 -> m1_4  [key=0, style=solid];
m1_3 -> m1_7  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_3 -> m1_10  [key=2, style=dotted];
m1_4 -> m1_5  [key=0, style=solid];
m1_4 -> m1_11  [key=2, style=dotted];
m1_4 -> m1_6  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_5 -> m1_6  [key=0, style=solid];
m1_5 -> m1_12  [key=2, style=dotted];
m1_6 -> m1_7  [key=0, style=solid];
m1_6 -> m1_13  [key=2, style=dotted];
m1_7 -> m1_0  [key=0, style=bold, color=blue];
m1_7 -> m1_8  [key=0, style=solid];
m1_7 -> m1_14  [key=2, style=dotted];
m1_668 -> m1_669  [key=0, style=solid];
m1_671 -> m1_13  [key=2, style=dotted];
m1_671 -> m1_672  [key=0, style=solid];
m1_673 -> m1_13  [key=2, style=dotted];
m1_673 -> m1_674  [key=0, style=solid];
m1_670 -> m1_671  [key=0, style=solid];
m1_670 -> m1_673  [key=1, style=dashed, color=darkseagreen4, label=l];
m1_670 -> m1_499  [key=2, style=dotted];
m1_670 -> m1_672  [key=1, style=dashed, color=darkseagreen4, label=l];
m1_672 -> m1_673  [key=0, style=solid];
m1_672 -> m1_147  [key=2, style=dotted];
m1_669 -> m1_409  [key=2, style=dotted];
m1_669 -> m1_670  [key=0, style=solid];
m1_674 -> m1_668  [key=0, style=bold, color=blue];
m1_721 -> m1_722  [key=0, style=solid];
m1_735 -> m1_13  [key=2, style=dotted];
m1_735 -> m1_736  [key=0, style=solid];
m1_727 -> m1_13  [key=2, style=dotted];
m1_727 -> m1_728  [key=0, style=solid];
m1_729 -> m1_13  [key=2, style=dotted];
m1_729 -> m1_730  [key=0, style=solid];
m1_733 -> m1_13  [key=2, style=dotted];
m1_733 -> m1_734  [key=0, style=solid];
m1_723 -> m1_735  [key=1, style=dashed, color=darkseagreen4, label=p2];
m1_723 -> m1_409  [key=2, style=dotted];
m1_723 -> m1_724  [key=0, style=solid];
m1_723 -> m1_731  [key=1, style=dashed, color=darkseagreen4, label=p2];
m1_723 -> m1_732  [key=1, style=dashed, color=darkseagreen4, label=p2];
m1_723 -> m1_734  [key=1, style=dashed, color=darkseagreen4, label=p2];
m1_734 -> m1_735  [key=0, style=solid];
m1_734 -> m1_164  [key=2, style=dotted];
m1_734 -> m1_257  [key=2, style=dotted];
m1_724 -> m1_727  [key=1, style=dashed, color=darkseagreen4, label=l];
m1_724 -> m1_729  [key=1, style=dashed, color=darkseagreen4, label=l];
m1_724 -> m1_733  [key=1, style=dashed, color=darkseagreen4, label=l];
m1_724 -> m1_734  [key=1, style=dashed, color=darkseagreen4, label=l];
m1_724 -> m1_725  [key=0, style=solid];
m1_724 -> m1_410  [key=2, style=dotted];
m1_724 -> m1_726  [key=1, style=dashed, color=darkseagreen4, label=l];
m1_724 -> m1_728  [key=1, style=dashed, color=darkseagreen4, label=l];
m1_724 -> m1_730  [key=1, style=dashed, color=darkseagreen4, label=l];
m1_724 -> m1_731  [key=1, style=dashed, color=darkseagreen4, label=l];
m1_724 -> m1_732  [key=1, style=dashed, color=darkseagreen4, label=l];
m1_726 -> m1_727  [key=0, style=solid];
m1_726 -> m1_113  [key=2, style=dotted];
m1_726 -> m1_257  [key=2, style=dotted];
m1_728 -> m1_729  [key=0, style=solid];
m1_728 -> m1_113  [key=2, style=dotted];
m1_728 -> m1_256  [key=2, style=dotted];
m1_730 -> m1_731  [key=0, style=solid];
m1_730 -> m1_164  [key=2, style=dotted];
m1_730 -> m1_257  [key=2, style=dotted];
m1_732 -> m1_733  [key=0, style=solid];
m1_732 -> m1_113  [key=2, style=dotted];
m1_732 -> m1_256  [key=2, style=dotted];
m1_722 -> m1_409  [key=2, style=dotted];
m1_722 -> m1_723  [key=0, style=solid];
m1_722 -> m1_724  [key=1, style=dashed, color=darkseagreen4, label=p1];
m1_722 -> m1_728  [key=1, style=dashed, color=darkseagreen4, label=p1];
m1_722 -> m1_730  [key=1, style=dashed, color=darkseagreen4, label=p1];
m1_725 -> m1_409  [key=2, style=dotted];
m1_725 -> m1_726  [key=0, style=solid];
m1_731 -> m1_732  [key=0, style=solid];
m1_731 -> m1_256  [key=2, style=dotted];
m1_731 -> m1_164  [key=2, style=dotted];
m1_736 -> m1_721  [key=0, style=bold, color=blue];
m1_946 -> m1_947  [key=0, style=solid];
m1_950 -> m1_13  [key=2, style=dotted];
m1_950 -> m1_951  [key=0, style=solid];
m1_949 -> m1_950  [key=0, style=solid];
m1_948 -> m1_949  [key=0, style=solid];
m1_948 -> m1_277  [key=2, style=dotted];
m1_947 -> m1_948  [key=0, style=solid];
m1_951 -> m1_946  [key=0, style=bold, color=blue];
m1_165 -> m1_166  [key=0, style=solid];
m1_168 -> m1_13  [key=2, style=dotted];
m1_168 -> m1_169  [key=0, style=solid];
m1_168 -> m1_70  [key=2, style=dotted];
m1_168 -> m1_71  [key=2, style=dotted];
m1_170 -> m1_13  [key=2, style=dotted];
m1_170 -> m1_171  [key=0, style=solid];
m1_166 -> m1_45  [key=2, style=dotted];
m1_166 -> m1_168  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_166 -> m1_167  [key=0, style=solid];
m1_166 -> m1_169  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_167 -> m1_168  [key=0, style=solid];
m1_167 -> m1_68  [key=2, style=dotted];
m1_167 -> m1_69  [key=2, style=dotted];
m1_169 -> m1_170  [key=0, style=solid];
m1_169 -> m1_172  [key=2, style=dotted];
m1_171 -> m1_165  [key=0, style=bold, color=blue];
m1_123 -> m1_124  [key=0, style=solid];
m1_124 -> m1_125  [key=0, style=solid];
m1_124 -> m1_138  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.TestStruct"];
m1_124 -> m1_45  [key=2, style=dotted];
m1_124 -> m1_126  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_124 -> m1_128  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_124 -> m1_129  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_124 -> m1_127  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_125 -> m1_123  [key=0, style=bold, color=blue];
m1_125 -> m1_126  [key=0, style=solid];
m1_125 -> m1_68  [key=2, style=dotted];
m1_125 -> m1_69  [key=2, style=dotted];
m1_784 -> m1_785  [key=0, style=solid];
m1_786 -> m1_13  [key=2, style=dotted];
m1_786 -> m1_787  [key=0, style=solid];
m1_785 -> m1_45  [key=2, style=dotted];
m1_785 -> m1_786  [key=0, style=solid];
m1_787 -> m1_784  [key=0, style=bold, color=blue];
m1_737 -> m1_738  [key=0, style=solid];
m1_743 -> m1_13  [key=2, style=dotted];
m1_743 -> m1_744  [key=0, style=solid];
m1_745 -> m1_13  [key=2, style=dotted];
m1_745 -> m1_746  [key=0, style=solid];
m1_740 -> m1_743  [key=1, style=dashed, color=darkseagreen4, label=l];
m1_740 -> m1_745  [key=1, style=dashed, color=darkseagreen4, label=l];
m1_740 -> m1_741  [key=0, style=solid];
m1_740 -> m1_410  [key=2, style=dotted];
m1_740 -> m1_742  [key=1, style=dashed, color=darkseagreen4, label=l];
m1_740 -> m1_744  [key=1, style=dashed, color=darkseagreen4, label=l];
m1_742 -> m1_743  [key=0, style=solid];
m1_742 -> m1_113  [key=2, style=dotted];
m1_744 -> m1_745  [key=0, style=solid];
m1_744 -> m1_113  [key=2, style=dotted];
m1_738 -> m1_409  [key=2, style=dotted];
m1_738 -> m1_740  [key=1, style=dashed, color=darkseagreen4, label=p1];
m1_738 -> m1_742  [key=1, style=dashed, color=darkseagreen4, label=p1];
m1_738 -> m1_739  [key=0, style=solid];
m1_739 -> m1_409  [key=2, style=dotted];
m1_739 -> m1_740  [key=0, style=solid];
m1_739 -> m1_744  [key=1, style=dashed, color=darkseagreen4, label=p2];
m1_741 -> m1_742  [key=0, style=solid];
m1_741 -> m1_747  [key=2, style=dotted];
m1_746 -> m1_737  [key=0, style=bold, color=blue];
m1_74 -> m1_75  [key=0, style=solid, color=red];
m1_74 -> m1_80  [key=2, style=dotted];
m1_74 -> m1_76  [key=1, style=dashed, color=darkseagreen4, label=structTest];
m1_74 -> m1_77  [key=1, style=dashed, color=darkseagreen4, label=structTest];
m1_77 -> m1_13  [key=2, style=dotted];
m1_77 -> m1_78  [key=0, style=solid];
m1_77 -> m1_70  [key=2, style=dotted];
m1_77 -> m1_71  [key=2, style=dotted];
m1_79 -> m1_13  [key=2, style=dotted];
m1_79 -> m1_80  [key=0, style=solid];
m1_79 -> m1_72  [key=2, style=dotted];
m1_79 -> m1_73  [key=0, style=bold, color=blue];
m1_82 -> m1_13  [key=2, style=dotted];
m1_82 -> m1_83  [key=0, style=solid, color=red];
m1_82 -> m1_70  [key=2, style=dotted];
m1_82 -> m1_71  [key=2, style=dotted];
m1_83 -> m1_13  [key=2, style=dotted];
m1_83 -> m1_84  [key=0, style=solid, color=red];
m1_83 -> m1_72  [key=2, style=dotted];
m1_83 -> m1_47  [key=2, style=dotted, color=red];
m1_83 -> m1_85  [key=1, style=dashed, color=red, label="lambda expression"];
m1_86 -> m1_13  [key=2, style=dotted];
m1_86 -> m1_87  [key=0, style=solid, color=red];
m1_86 -> m1_70  [key=2, style=dotted];
m1_86 -> m1_71  [key=2, style=dotted];
m1_86 -> m1_69  [key=2, style=dotted];
m1_86 -> m1_88  [key=1, style=dashed, color=darkseagreen4, label=m];
m1_87 -> m1_13  [key=2, style=dotted];
m1_87 -> m1_88  [key=0, style=solid, color=red];
m1_87 -> m1_72  [key=2, style=dotted];
m1_87 -> m1_55  [key=2, style=dotted, color=red];
m1_87 -> m1_47  [key=2, style=dotted, color=red];
m1_80 -> m1_13  [key=2, style=dotted];
m1_80 -> m1_81  [key=0, style=solid];
m1_80 -> m1_68  [key=2, style=dotted];
m1_80 -> m1_73  [key=2, style=dotted];
m1_84 -> m1_13  [key=2, style=dotted];
m1_84 -> m1_85  [key=0, style=solid];
m1_84 -> m1_68  [key=2, style=dotted];
m1_84 -> m1_73  [key=2, style=dotted];
m1_84 -> m1_82  [key=0, style=bold, color=blue];
m1_88 -> m1_13  [key=2, style=dotted];
m1_88 -> m1_89  [key=0, style=solid];
m1_88 -> m1_90  [key=2, style=dotted];
m1_88 -> m1_73  [key=2, style=dotted];
m1_88 -> m1_56  [key=2, style=dotted];
m1_75 -> m1_45  [key=2, style=dotted];
m1_75 -> m1_77  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_75 -> m1_79  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_75 -> m1_82  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_75 -> m1_83  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_75 -> m1_86  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_75 -> m1_87  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_75 -> m1_76  [key=0, style=solid, color=red];
m1_75 -> m1_81  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_75 -> m1_85  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_75 -> m1_55  [key=2, style=dotted, color=red];
m1_75 -> m1_47  [key=2, style=dotted, color=red];
m1_75 -> m1_78  [key=1, style=dashed, color=red, label=setter];
m1_76 -> m1_77  [key=0, style=solid];
m1_76 -> m1_68  [key=2, style=dotted];
m1_76 -> m1_56  [key=2, style=dotted];
m1_78 -> m1_79  [key=0, style=solid];
m1_78 -> m1_81  [key=2, style=dotted];
m1_78 -> m1_56  [key=2, style=dotted];
m1_81 -> m1_82  [key=0, style=solid];
m1_81 -> m1_68  [key=2, style=dotted];
m1_85 -> m1_86  [key=0, style=solid];
m1_89 -> m1_74  [key=0, style=bold, color=blue];
m1_89 -> m1_85  [key=0, style=bold, color=blue];
m1_59 -> m1_13  [key=2, style=dotted];
m1_59 -> m1_60  [key=0, style=solid];
m1_59 -> m1_70  [key=2, style=dotted];
m1_59 -> m1_71  [key=2, style=dotted];
m1_59 -> m1_57  [key=0, style=bold, color=blue];
m1_61 -> m1_13  [key=2, style=dotted];
m1_61 -> m1_62  [key=0, style=solid];
m1_61 -> m1_72  [key=2, style=dotted];
m1_61 -> m1_54  [key=2, style=dotted];
m1_61 -> m1_66  [key=1, style=dashed, color=darkseagreen4, label=p];
m1_61 -> m1_67  [key=1, style=dashed, color=darkseagreen4, label=p];
m1_63 -> m1_13  [key=2, style=dotted];
m1_63 -> m1_64  [key=0, style=solid, color=red];
m1_63 -> m1_72  [key=2, style=dotted];
m1_63 -> m1_55  [key=2, style=dotted, color=red];
m1_63 -> m1_47  [key=2, style=dotted, color=red];
m1_63 -> m1_66  [key=1, style=dashed, color=red, label=setter];
m1_65 -> m1_13  [key=2, style=dotted];
m1_65 -> m1_66  [key=0, style=solid];
m1_65 -> m1_72  [key=2, style=dotted];
m1_62 -> m1_13  [key=2, style=dotted];
m1_62 -> m1_63  [key=0, style=solid, color=red];
m1_62 -> m1_69  [key=2, style=dotted];
m1_62 -> m1_64  [key=1, style=dashed, color=darkseagreen4, label=m];
m1_62 -> m1_65  [key=1, style=dashed, color=darkseagreen4, label=m];
m1_64 -> m1_13  [key=2, style=dotted];
m1_64 -> m1_65  [key=0, style=solid];
m1_64 -> m1_56  [key=2, style=dotted];
m1_66 -> m1_13  [key=2, style=dotted];
m1_66 -> m1_67  [key=0, style=solid];
m1_66 -> m1_68  [key=2, style=dotted];
m1_66 -> m1_73  [key=2, style=dotted];
m1_66 -> m1_56  [key=2, style=dotted];
m1_57 -> m1_45  [key=2, style=dotted];
m1_57 -> m1_59  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_57 -> m1_61  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_57 -> m1_63  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_57 -> m1_65  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_57 -> m1_58  [key=0, style=solid, color=red];
m1_58 -> m1_59  [key=0, style=solid, color=red];
m1_58 -> m1_68  [key=2, style=dotted];
m1_58 -> m1_69  [key=2, style=dotted];
m1_58 -> m1_47  [key=2, style=dotted, color=red];
m1_58 -> m1_60  [key=1, style=dashed, color=red, label="lambda expression"];
m1_60 -> m1_61  [key=0, style=solid];
m1_67 -> m1_56  [key=0, style=bold, color=blue];
m1_67 -> m1_68  [key=0, style=solid];
m1_67 -> m1_13  [key=2, style=dotted];
m1_604 -> m1_605  [key=0, style=solid];
m1_605 -> m1_45  [key=2, style=dotted];
m1_605 -> m1_606  [key=0, style=solid];
m1_606 -> m1_607  [key=0, style=solid];
m1_606 -> m1_257  [key=2, style=dotted];
m1_607 -> m1_604  [key=0, style=bold, color=blue];
m1_711 -> m1_712  [key=0, style=solid];
m1_712 -> m1_714  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_712 -> m1_117  [key=2, style=dotted];
m1_712 -> m1_713  [key=0, style=solid];
m1_713 -> m1_711  [key=0, style=bold, color=blue];
m1_608 -> m1_609  [key=0, style=solid];
m1_609 -> m1_45  [key=2, style=dotted];
m1_609 -> m1_610  [key=0, style=solid];
m1_610 -> m1_611  [key=0, style=solid];
m1_610 -> m1_257  [key=2, style=dotted];
m1_611 -> m1_608  [key=0, style=bold, color=blue];
m1_1064 -> m1_1065  [key=0, style=solid];
m1_1066 -> m1_13  [key=2, style=dotted];
m1_1066 -> m1_1067  [key=0, style=solid];
m1_1065 -> m1_1066  [key=0, style=solid];
m1_1065 -> m1_277  [key=2, style=dotted];
m1_1067 -> m1_1064  [key=0, style=bold, color=blue];
m1_837 -> m1_838  [key=0, style=solid];
m1_838 -> m1_45  [key=2, style=dotted];
m1_838 -> m1_839  [key=0, style=solid];
m1_839 -> m1_840  [key=0, style=solid];
m1_839 -> m1_841  [key=2, style=dotted];
m1_840 -> m1_837  [key=0, style=bold, color=blue];
m1_632 -> m1_633  [key=0, style=solid];
m1_633 -> m1_635  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_633 -> m1_117  [key=2, style=dotted];
m1_633 -> m1_634  [key=0, style=solid];
m1_634 -> m1_632  [key=0, style=bold, color=blue];
m1_792 -> m1_793  [key=0, style=solid];
m1_794 -> m1_13  [key=2, style=dotted];
m1_794 -> m1_795  [key=0, style=solid];
m1_793 -> m1_45  [key=2, style=dotted];
m1_793 -> m1_794  [key=0, style=solid];
m1_795 -> m1_792  [key=0, style=bold, color=blue];
m1_675 -> m1_676  [key=0, style=solid];
m1_681 -> m1_13  [key=2, style=dotted];
m1_681 -> m1_682  [key=0, style=solid];
m1_682 -> m1_13  [key=2, style=dotted];
m1_682 -> m1_683  [key=0, style=solid];
m1_676 -> m1_681  [key=1, style=dashed, color=darkseagreen4, label=p1];
m1_676 -> m1_409  [key=2, style=dotted];
m1_676 -> m1_677  [key=0, style=solid];
m1_676 -> m1_678  [key=1, style=dashed, color=darkseagreen4, label=p1];
m1_679 -> m1_681  [key=1, style=dashed, color=darkseagreen4, label=a];
m1_679 -> m1_682  [key=1, style=dashed, color=darkseagreen4, label=a];
m1_679 -> m1_680  [key=0, style=solid];
m1_680 -> m1_681  [key=0, style=solid];
m1_680 -> m1_190  [key=2, style=dotted];
m1_677 -> m1_682  [key=1, style=dashed, color=darkseagreen4, label=p2];
m1_677 -> m1_409  [key=2, style=dotted];
m1_677 -> m1_678  [key=0, style=solid];
m1_678 -> m1_679  [key=0, style=solid];
m1_678 -> m1_680  [key=1, style=dashed, color=darkseagreen4, label=l];
m1_678 -> m1_410  [key=2, style=dotted];
m1_683 -> m1_675  [key=0, style=bold, color=blue];
m1_971 -> m1_972  [key=0, style=solid];
m1_974 -> m1_13  [key=2, style=dotted];
m1_974 -> m1_975  [key=0, style=solid];
m1_975 -> m1_13  [key=2, style=dotted];
m1_975 -> m1_976  [key=0, style=solid];
m1_976 -> m1_45  [key=2, style=dotted];
m1_976 -> m1_977  [key=0, style=solid];
m1_976 -> m1_978  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_973 -> m1_974  [key=0, style=solid];
m1_973 -> m1_975  [key=1, style=dashed, color=darkseagreen4, label=v];
m1_973 -> m1_981  [key=2, style=dotted];
m1_973 -> m1_977  [key=1, style=dashed, color=darkseagreen4, label=v];
m1_977 -> m1_978  [key=0, style=solid];
m1_978 -> m1_979  [key=0, style=solid];
m1_978 -> m1_48  [key=2, style=dotted];
m1_972 -> m1_973  [key=0, style=solid];
m1_979 -> m1_12  [key=2, style=dotted];
m1_979 -> m1_980  [key=0, style=solid];
m1_980 -> m1_971  [key=0, style=bold, color=blue];
m1_101 -> m1_102  [key=0, style=solid];
m1_45 -> m1_46  [key=0, style=solid, color=red];
m1_45 -> m1_47  [key=2, style=dotted, color=red];
m1_45 -> m1_48  [key=1, style=dashed, color=red, label="lambda expression"];
m1_1018 -> m1_1019  [key=0, style=solid];
m1_1019 -> m1_117  [key=2, style=dotted];
m1_1019 -> m1_1021  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_1019 -> m1_1020  [key=0, style=solid];
m1_1020 -> m1_1018  [key=0, style=bold, color=blue];
m1_126 -> m1_13  [key=2, style=dotted];
m1_126 -> m1_127  [key=0, style=solid];
m1_128 -> m1_13  [key=2, style=dotted];
m1_128 -> m1_129  [key=0, style=solid];
m1_128 -> m1_126  [key=0, style=bold, color=blue];
m1_129 -> m1_13  [key=2, style=dotted];
m1_129 -> m1_130  [key=0, style=solid];
m1_129 -> m1_70  [key=2, style=dotted];
m1_129 -> m1_71  [key=2, style=dotted];
m1_127 -> m1_128  [key=0, style=solid];
m1_127 -> m1_69  [key=2, style=dotted];
m1_127 -> m1_123  [key=2, style=dotted];
m1_127 -> m1_127  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Utilities.DynamicReflectionDelegateFactoryTests.TestStruct"];
m1_130 -> m1_123  [key=0, style=bold, color=blue];
m1_130 -> m1_131  [key=0, style=solid];
m1_130 -> m1_112  [key=2, style=dotted];
m1_130 -> m1_100  [key=2, style=dotted];
m1_130 -> m1_132  [key=1, style=dashed, color=darkseagreen4, label=methodInfo];
m1_71 -> m1_72  [key=0, style=solid, color=red];
m1_71 -> m1_47  [key=2, style=dotted, color=red];
m1_71 -> m1_73  [key=1, style=dashed, color=red, label="lambda expression"];
m1_18 -> m1_23  [key=1, style=dashed, color=darkseagreen4, label=reader];
m1_18 -> m1_19  [key=0, style=solid];
m1_18 -> m1_29  [key=2, style=dotted];
m1_18 -> m1_30  [key=2, style=dotted];
m1_18 -> m1_21  [key=1, style=dashed, color=darkseagreen4, label=reader];
m1_1111 -> m1_1112  [key=0, style=solid];
m1_1114 -> m1_13  [key=2, style=dotted];
m1_1114 -> m1_1115  [key=0, style=solid];
m1_1116 -> m1_13  [key=2, style=dotted];
m1_1116 -> m1_1117  [key=0, style=solid];
m1_1119 -> m1_13  [key=2, style=dotted];
m1_1119 -> m1_1120  [key=0, style=solid];
m1_1121 -> m1_13  [key=2, style=dotted];
m1_1121 -> m1_1122  [key=0, style=solid];
m1_1113 -> m1_1114  [key=0, style=solid];
m1_1113 -> m1_1123  [key=2, style=dotted];
m1_1115 -> m1_1116  [key=0, style=solid];
m1_1115 -> m1_1123  [key=2, style=dotted];
m1_1117 -> m1_1118  [key=0, style=solid];
m1_1117 -> m1_277  [key=2, style=dotted];
m1_1117 -> m1_1120  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_1118 -> m1_1119  [key=0, style=solid];
m1_1118 -> m1_1123  [key=2, style=dotted];
m1_1120 -> m1_1121  [key=0, style=solid];
m1_1120 -> m1_1123  [key=2, style=dotted];
m1_1112 -> m1_1113  [key=0, style=solid];
m1_1112 -> m1_1115  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_1112 -> m1_277  [key=2, style=dotted];
m1_1122 -> m1_1111  [key=0, style=bold, color=blue];
m1_882 -> m1_883  [key=0, style=solid];
m1_883 -> m1_409  [key=2, style=dotted];
m1_883 -> m1_884  [key=0, style=solid];
m1_883 -> m1_885  [key=1, style=dashed, color=darkseagreen4, label=p1];
m1_884 -> m1_409  [key=2, style=dotted];
m1_884 -> m1_885  [key=0, style=solid];
m1_887 -> m1_14  [key=2, style=dotted];
m1_887 -> m1_888  [key=0, style=solid];
m1_885 -> m1_410  [key=2, style=dotted];
m1_885 -> m1_886  [key=0, style=solid];
m1_886 -> m1_887  [key=0, style=solid];
m1_886 -> m1_889  [key=2, style=dotted];
m1_888 -> m1_882  [key=0, style=bold, color=blue];
m1_413 -> m1_414  [key=0, style=solid];
m1_424 -> m1_13  [key=2, style=dotted];
m1_424 -> m1_425  [key=0, style=solid];
m1_433 -> m1_13  [key=2, style=dotted];
m1_433 -> m1_434  [key=0, style=solid];
m1_439 -> m1_13  [key=2, style=dotted];
m1_439 -> m1_440  [key=0, style=solid];
m1_445 -> m1_13  [key=2, style=dotted];
m1_445 -> m1_446  [key=0, style=solid];
m1_445 -> m1_90  [key=2, style=dotted];
m1_422 -> m1_13  [key=2, style=dotted];
m1_422 -> m1_423  [key=0, style=solid];
m1_423 -> m1_13  [key=2, style=dotted];
m1_423 -> m1_424  [key=0, style=solid];
m1_425 -> m1_13  [key=2, style=dotted];
m1_425 -> m1_426  [key=0, style=solid];
m1_426 -> m1_13  [key=2, style=dotted];
m1_426 -> m1_427  [key=0, style=solid];
m1_428 -> m1_13  [key=2, style=dotted];
m1_428 -> m1_429  [key=0, style=solid];
m1_429 -> m1_13  [key=2, style=dotted];
m1_429 -> m1_430  [key=0, style=solid];
m1_431 -> m1_13  [key=2, style=dotted];
m1_431 -> m1_432  [key=0, style=solid];
m1_432 -> m1_13  [key=2, style=dotted];
m1_432 -> m1_433  [key=0, style=solid];
m1_434 -> m1_13  [key=2, style=dotted];
m1_434 -> m1_435  [key=0, style=solid];
m1_435 -> m1_13  [key=2, style=dotted];
m1_435 -> m1_436  [key=0, style=solid];
m1_437 -> m1_13  [key=2, style=dotted];
m1_437 -> m1_438  [key=0, style=solid];
m1_438 -> m1_13  [key=2, style=dotted];
m1_438 -> m1_439  [key=0, style=solid];
m1_440 -> m1_13  [key=2, style=dotted];
m1_440 -> m1_441  [key=0, style=solid];
m1_441 -> m1_13  [key=2, style=dotted];
m1_441 -> m1_442  [key=0, style=solid];
m1_443 -> m1_13  [key=2, style=dotted];
m1_443 -> m1_444  [key=0, style=solid];
m1_444 -> m1_13  [key=2, style=dotted];
m1_444 -> m1_445  [key=0, style=solid];
m1_446 -> m1_13  [key=2, style=dotted];
m1_446 -> m1_447  [key=0, style=solid];
m1_447 -> m1_13  [key=2, style=dotted];
m1_447 -> m1_448  [key=0, style=solid];
m1_449 -> m1_13  [key=2, style=dotted];
m1_449 -> m1_450  [key=0, style=solid];
m1_450 -> m1_13  [key=2, style=dotted];
m1_450 -> m1_451  [key=0, style=solid];
m1_418 -> m1_45  [key=2, style=dotted];
m1_418 -> m1_424  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_418 -> m1_433  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_418 -> m1_439  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_418 -> m1_445  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_418 -> m1_419  [key=0, style=solid];
m1_418 -> m1_420  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_418 -> m1_421  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_418 -> m1_427  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_418 -> m1_430  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_418 -> m1_436  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_418 -> m1_442  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_418 -> m1_448  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_421 -> m1_422  [key=0, style=solid];
m1_427 -> m1_428  [key=0, style=solid];
m1_430 -> m1_431  [key=0, style=solid];
m1_436 -> m1_437  [key=0, style=solid];
m1_442 -> m1_443  [key=0, style=solid];
m1_448 -> m1_449  [key=0, style=solid];
m1_417 -> m1_418  [key=0, style=solid];
m1_417 -> m1_420  [key=1, style=dashed, color=darkseagreen4, label=changedCount];
m1_419 -> m1_454  [key=1, style=dashed, color=darkseagreen4, label="System.ComponentModel.PropertyChangingEventArgs"];
m1_419 -> m1_455  [key=1, style=dashed, color=darkseagreen4, label=changingCount];
m1_419 -> m1_419  [key=1, style=dashed, color=darkseagreen4, label=changingCount];
m1_419 -> m1_420  [key=0, style=solid];
m1_419 -> m1_453  [key=1, style=dashed, color=darkseagreen4, label=object];
m1_420 -> m1_421  [key=0, style=solid];
m1_420 -> m1_459  [key=1, style=dashed, color=darkseagreen4, label="System.ComponentModel.PropertyChangedEventArgs"];
m1_420 -> m1_460  [key=1, style=dashed, color=darkseagreen4, label=changedCount];
m1_420 -> m1_420  [key=1, style=dashed, color=darkseagreen4, label=changedCount];
m1_420 -> m1_458  [key=1, style=dashed, color=darkseagreen4, label=object];
m1_416 -> m1_417  [key=0, style=solid];
m1_416 -> m1_419  [key=1, style=dashed, color=darkseagreen4, label=changingCount];
m1_414 -> m1_415  [key=0, style=solid];
m1_415 -> m1_416  [key=0, style=solid];
m1_451 -> m1_413  [key=0, style=bold, color=blue];
m1_31 -> m1_32  [key=0, style=solid];
m1_32 -> m1_33  [key=0, style=solid];
m1_32 -> m1_8  [key=2, style=dotted];
m1_32 -> m1_9  [key=2, style=dotted];
m1_32 -> m1_41  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_34 -> m1_35  [key=0, style=solid, color=green];
m1_35 -> m1_36  [key=0, style=solid, color=green];
m1_35 -> m1_11  [key=2, style=dotted];
m1_35 -> m1_37  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_35 -> m1_38  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_35 -> m1_39  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_36 -> m1_37  [key=0, style=solid];
m1_36 -> m1_12  [key=2, style=dotted];
m1_36 -> m1_39  [key=2, style=dotted];
m1_37 -> m1_38  [key=0, style=solid];
m1_37 -> m1_13  [key=2, style=dotted];
m1_38 -> m1_39  [key=0, style=solid];
m1_38 -> m1_13  [key=2, style=dotted];
m1_38 -> m1_34  [key=0, style=bold, color=blue];
m1_39 -> m1_40  [key=0, style=solid];
m1_39 -> m1_13  [key=2, style=dotted];
m1_40 -> m1_31  [key=0, style=bold, color=blue];
m1_40 -> m1_41  [key=0, style=solid];
m1_278 -> m1_279  [key=0, style=solid];
m1_282 -> m1_13  [key=2, style=dotted];
m1_282 -> m1_283  [key=0, style=solid];
m1_282 -> m1_285  [key=2, style=dotted];
m1_281 -> m1_282  [key=0, style=solid];
m1_280 -> m1_281  [key=0, style=solid];
m1_280 -> m1_284  [key=2, style=dotted];
m1_279 -> m1_280  [key=0, style=solid];
m1_283 -> m1_278  [key=0, style=bold, color=blue];
m1_1124 -> m1_1125  [key=0, style=solid];
m1_1125 -> m1_45  [key=2, style=dotted];
m1_1125 -> m1_1126  [key=0, style=solid];
m1_1125 -> m1_73  [key=2, style=dotted];
m1_1125 -> m1_256  [key=2, style=dotted];
m1_1126 -> m1_45  [key=2, style=dotted];
m1_1126 -> m1_1127  [key=0, style=solid];
m1_1126 -> m1_1130  [key=1, style=dashed, color=darkseagreen4, label=a];
m1_1126 -> m1_1131  [key=1, style=dashed, color=darkseagreen4, label=a];
m1_1127 -> m1_45  [key=2, style=dotted];
m1_1127 -> m1_1128  [key=0, style=solid];
m1_1127 -> m1_1129  [key=1, style=dashed, color=darkseagreen4, label=b];
m1_1127 -> m1_1130  [key=1, style=dashed, color=darkseagreen4, label=b];
m1_1127 -> m1_1131  [key=1, style=dashed, color=darkseagreen4, label=b];
m1_1129 -> m1_100  [key=2, style=dotted];
m1_1129 -> m1_1130  [key=0, style=solid];
m1_1128 -> m1_69  [key=2, style=dotted];
m1_1128 -> m1_1129  [key=0, style=solid];
m1_1130 -> m1_73  [key=2, style=dotted];
m1_1130 -> m1_256  [key=2, style=dotted];
m1_1130 -> m1_1131  [key=0, style=solid];
m1_1131 -> m1_73  [key=2, style=dotted];
m1_1131 -> m1_256  [key=2, style=dotted];
m1_1131 -> m1_1132  [key=0, style=solid];
m1_1132 -> m1_1124  [key=0, style=bold, color=blue];
m1_205 -> m1_206  [key=0, style=solid];
m1_206 -> m1_208  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_206 -> m1_207  [key=0, style=solid];
m1_206 -> m1_117  [key=2, style=dotted];
m1_207 -> m1_205  [key=0, style=bold, color=blue];
m1_702 -> m1_703  [key=0, style=solid];
m1_703 -> m1_705  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_703 -> m1_117  [key=2, style=dotted];
m1_703 -> m1_704  [key=0, style=solid];
m1_704 -> m1_702  [key=0, style=bold, color=blue];
m1_959 -> m1_960  [key=0, style=solid];
m1_963 -> m1_13  [key=2, style=dotted];
m1_963 -> m1_964  [key=0, style=solid];
m1_961 -> m1_45  [key=2, style=dotted];
m1_961 -> m1_963  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_961 -> m1_962  [key=0, style=solid];
m1_960 -> m1_963  [key=1, style=dashed, color=darkseagreen4, label=key];
m1_960 -> m1_961  [key=0, style=solid];
m1_960 -> m1_962  [key=1, style=dashed, color=darkseagreen4, label=key];
m1_962 -> m1_963  [key=0, style=solid];
m1_962 -> m1_68  [key=2, style=dotted];
m1_964 -> m1_959  [key=0, style=bold, color=blue];
m1_812 -> m1_813  [key=0, style=solid];
m1_814 -> m1_13  [key=2, style=dotted];
m1_814 -> m1_815  [key=0, style=solid];
m1_813 -> m1_45  [key=2, style=dotted];
m1_813 -> m1_814  [key=0, style=solid];
m1_815 -> m1_812  [key=0, style=bold, color=blue];
m1_44 -> m1_45  [key=0, style=solid, color=red];
m1_44 -> m1_40  [key=0, style=bold, color=blue];
m1_46 -> m1_44  [key=0, style=bold, color=blue];
m1_8 -> m1_0  [key=0, style=bold, color=blue];
m1_321 -> m1_322  [key=0, style=solid];
m1_327 -> m1_13  [key=2, style=dotted];
m1_327 -> m1_327  [key=1, style=dashed, color=darkseagreen4, label=pair];
m1_327 -> m1_328  [key=0, style=solid];
m1_328 -> m1_13  [key=2, style=dotted];
m1_328 -> m1_328  [key=1, style=dashed, color=darkseagreen4, label=pair];
m1_328 -> m1_329  [key=0, style=solid];
m1_322 -> m1_45  [key=2, style=dotted];
m1_322 -> m1_323  [key=0, style=solid];
m1_322 -> m1_324  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_322 -> m1_326  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_326 -> m1_327  [key=0, style=solid];
m1_326 -> m1_330  [key=0, style=solid];
m1_325 -> m1_327  [key=1, style=dashed, color=darkseagreen4, label=i];
m1_325 -> m1_328  [key=1, style=dashed, color=darkseagreen4, label=i];
m1_325 -> m1_326  [key=0, style=solid];
m1_325 -> m1_329  [key=1, style=dashed, color=darkseagreen4, label=i];
m1_329 -> m1_326  [key=0, style=solid];
m1_329 -> m1_329  [key=1, style=dashed, color=darkseagreen4, label=i];
m1_323 -> m1_68  [key=2, style=dotted];
m1_323 -> m1_69  [key=2, style=dotted];
m1_323 -> m1_324  [key=0, style=solid];
m1_324 -> m1_68  [key=2, style=dotted];
m1_324 -> m1_69  [key=2, style=dotted];
m1_324 -> m1_325  [key=0, style=solid];
m1_330 -> m1_321  [key=0, style=bold, color=blue];
m1_796 -> m1_797  [key=0, style=solid];
m1_798 -> m1_13  [key=2, style=dotted];
m1_798 -> m1_799  [key=0, style=solid];
m1_797 -> m1_45  [key=2, style=dotted];
m1_797 -> m1_798  [key=0, style=solid];
m1_799 -> m1_796  [key=0, style=bold, color=blue];
m1_526 -> m1_527  [key=0, style=solid];
m1_532 -> m1_13  [key=2, style=dotted];
m1_532 -> m1_533  [key=0, style=solid];
m1_533 -> m1_13  [key=2, style=dotted];
m1_533 -> m1_534  [key=0, style=solid];
m1_529 -> m1_532  [key=1, style=dashed, color=darkseagreen4, label=l];
m1_529 -> m1_533  [key=1, style=dashed, color=darkseagreen4, label=l];
m1_529 -> m1_530  [key=0, style=solid];
m1_529 -> m1_410  [key=2, style=dotted];
m1_529 -> m1_531  [key=1, style=dashed, color=darkseagreen4, label=l];
m1_531 -> m1_532  [key=0, style=solid];
m1_531 -> m1_535  [key=2, style=dotted];
m1_530 -> m1_533  [key=1, style=dashed, color=darkseagreen4, label=p3];
m1_530 -> m1_409  [key=2, style=dotted];
m1_530 -> m1_531  [key=0, style=solid];
m1_527 -> m1_409  [key=2, style=dotted];
m1_527 -> m1_529  [key=1, style=dashed, color=darkseagreen4, label=p1];
m1_527 -> m1_528  [key=0, style=solid];
m1_528 -> m1_409  [key=2, style=dotted];
m1_528 -> m1_529  [key=0, style=solid];
m1_534 -> m1_526  [key=0, style=bold, color=blue];
m1_649 -> m1_650  [key=0, style=solid];
m1_650 -> m1_409  [key=2, style=dotted];
m1_650 -> m1_651  [key=0, style=solid];
m1_650 -> m1_652  [key=1, style=dashed, color=darkseagreen4, label=p1];
m1_651 -> m1_409  [key=2, style=dotted];
m1_651 -> m1_652  [key=0, style=solid];
m1_653 -> m1_257  [key=2, style=dotted];
m1_653 -> m1_654  [key=0, style=solid];
m1_652 -> m1_410  [key=2, style=dotted];
m1_652 -> m1_653  [key=0, style=solid];
m1_654 -> m1_649  [key=0, style=bold, color=blue];
m1_875 -> m1_876  [key=0, style=solid];
m1_879 -> m1_13  [key=2, style=dotted];
m1_879 -> m1_880  [key=0, style=solid];
m1_879 -> m1_881  [key=2, style=dotted];
m1_878 -> m1_879  [key=0, style=solid];
m1_878 -> m1_410  [key=2, style=dotted];
m1_876 -> m1_409  [key=2, style=dotted];
m1_876 -> m1_878  [key=1, style=dashed, color=darkseagreen4, label=p1];
m1_876 -> m1_877  [key=0, style=solid];
m1_877 -> m1_409  [key=2, style=dotted];
m1_877 -> m1_878  [key=0, style=solid];
m1_880 -> m1_875  [key=0, style=bold, color=blue];
m1_592 -> m1_593  [key=0, style=solid];
m1_599 -> m1_13  [key=2, style=dotted];
m1_599 -> m1_600  [key=0, style=solid];
m1_601 -> m1_13  [key=2, style=dotted];
m1_601 -> m1_602  [key=0, style=solid];
m1_598 -> m1_13  [key=2, style=dotted];
m1_598 -> m1_599  [key=0, style=solid];
m1_600 -> m1_13  [key=2, style=dotted];
m1_600 -> m1_601  [key=0, style=solid];
m1_593 -> m1_599  [key=1, style=dashed, color=darkseagreen4, label=p1];
m1_593 -> m1_409  [key=2, style=dotted];
m1_593 -> m1_594  [key=0, style=solid];
m1_593 -> m1_595  [key=1, style=dashed, color=darkseagreen4, label=p1];
m1_595 -> m1_599  [key=1, style=dashed, color=darkseagreen4, label=l];
m1_595 -> m1_601  [key=1, style=dashed, color=darkseagreen4, label=l];
m1_595 -> m1_598  [key=1, style=dashed, color=darkseagreen4, label=l];
m1_595 -> m1_600  [key=1, style=dashed, color=darkseagreen4, label=l];
m1_595 -> m1_596  [key=0, style=solid];
m1_595 -> m1_410  [key=2, style=dotted];
m1_595 -> m1_597  [key=1, style=dashed, color=darkseagreen4, label=l];
m1_594 -> m1_601  [key=1, style=dashed, color=darkseagreen4, label=p2];
m1_594 -> m1_409  [key=2, style=dotted];
m1_594 -> m1_595  [key=0, style=solid];
m1_596 -> m1_598  [key=1, style=dashed, color=darkseagreen4, label=p3];
m1_596 -> m1_600  [key=1, style=dashed, color=darkseagreen4, label=p3];
m1_596 -> m1_409  [key=2, style=dotted];
m1_596 -> m1_597  [key=0, style=solid];
m1_597 -> m1_598  [key=0, style=solid];
m1_597 -> m1_603  [key=2, style=dotted];
m1_602 -> m1_592  [key=0, style=bold, color=blue];
m1_788 -> m1_789  [key=0, style=solid];
m1_790 -> m1_13  [key=2, style=dotted];
m1_790 -> m1_791  [key=0, style=solid];
m1_789 -> m1_45  [key=2, style=dotted];
m1_789 -> m1_790  [key=0, style=solid];
m1_791 -> m1_788  [key=0, style=bold, color=blue];
m1_29 -> m1_30  [key=0, style=solid];
m1_29 -> m1_17  [key=2, style=dotted];
m1_29 -> m1_18  [key=2, style=dotted];
m1_109 -> m1_13  [key=2, style=dotted];
m1_109 -> m1_110  [key=0, style=solid];
m1_109 -> m1_112  [key=2, style=dotted];
m1_109 -> m1_113  [key=2, style=dotted];
m1_109 -> m1_12  [key=2, style=dotted];
m1_105 -> m1_13  [key=2, style=dotted];
m1_105 -> m1_106  [key=0, style=solid];
m1_105 -> m1_70  [key=2, style=dotted];
m1_105 -> m1_71  [key=2, style=dotted];
m1_105 -> m1_101  [key=3, color=darkorchid, style=bold, label="Property variable int Value"];
m1_105 -> m1_47  [key=2, style=dotted];
m1_105 -> m1_108  [key=1, style=dashed, color=darkseagreen4, label=call];
m1_106 -> m1_13  [key=2, style=dotted];
m1_106 -> m1_107  [key=0, style=solid];
m1_106 -> m1_112  [key=2, style=dotted];
m1_106 -> m1_68  [key=2, style=dotted];
m1_106 -> m1_113  [key=2, style=dotted];
m1_106 -> m1_54  [key=2, style=dotted];
m1_106 -> m1_108  [key=1, style=dashed, color=darkseagreen4, label=p];
m1_107 -> m1_13  [key=2, style=dotted];
m1_107 -> m1_108  [key=0, style=solid];
m1_107 -> m1_112  [key=2, style=dotted];
m1_107 -> m1_68  [key=2, style=dotted];
m1_107 -> m1_113  [key=2, style=dotted];
m1_108 -> m1_13  [key=2, style=dotted];
m1_108 -> m1_109  [key=0, style=solid];
m1_108 -> m1_112  [key=2, style=dotted];
m1_108 -> m1_68  [key=2, style=dotted];
m1_108 -> m1_113  [key=2, style=dotted];
m1_108 -> m1_110  [key=1, style=dashed, color=darkseagreen4, label=result];
m1_110 -> m1_13  [key=2, style=dotted];
m1_110 -> m1_111  [key=0, style=solid];
m1_110 -> m1_70  [key=2, style=dotted];
m1_110 -> m1_71  [key=2, style=dotted];
m1_103 -> m1_45  [key=2, style=dotted];
m1_103 -> m1_109  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_103 -> m1_105  [key=1, style=dashed, color=darkseagreen4, label=namePropertyInfo];
m1_103 -> m1_106  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_103 -> m1_107  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_103 -> m1_108  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_103 -> m1_110  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_103 -> m1_104  [key=0, style=solid];
m1_103 -> m1_112  [key=2, style=dotted];
m1_103 -> m1_55  [key=2, style=dotted];
m1_102 -> m1_109  [key=1, style=dashed, color=darkseagreen4, label=v];
m1_102 -> m1_68  [key=2, style=dotted];
m1_102 -> m1_103  [key=0, style=solid];
m1_102 -> m1_104  [key=1, style=dashed, color=darkseagreen4, label=v];
m1_104 -> m1_105  [key=0, style=solid];
m1_104 -> m1_69  [key=2, style=dotted];
m1_104 -> m1_12  [key=2, style=dotted];
m1_111 -> m1_101  [key=0, style=bold, color=blue];
m1_111 -> m1_102  [key=0, style=bold, color=blue];
m1_114 -> m1_115  [key=0, style=solid, color=red];
m1_115 -> m1_116  [key=0, style=solid, color=red];
m1_115 -> m1_47  [key=2, style=dotted, color=red];
m1_115 -> m1_118  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_115 -> m1_117  [key=2, style=dotted];
m1_116 -> m1_117  [key=0, style=solid];
m1_116 -> m1_122  [key=2, style=dotted];
m1_116 -> m1_114  [key=0, style=bold, color=blue];
m1_117 -> m1_118  [key=0, style=solid, color=red];
m1_117 -> m1_13  [key=2, style=dotted];
m1_117 -> m1_117  [key=1, style=dashed, color=darkseagreen4, label=myStruct1];
m1_118 -> m1_119  [key=0, style=solid, color=red];
m1_118 -> m1_47  [key=2, style=dotted, color=red];
m1_119 -> m1_120  [key=0, style=solid];
m1_119 -> m1_122  [key=2, style=dotted];
m1_119 -> m1_45  [key=2, style=dotted];
m1_119 -> m1_121  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_120 -> m1_121  [key=0, style=solid];
m1_120 -> m1_13  [key=2, style=dotted];
m1_120 -> m1_120  [key=1, style=dashed, color=darkseagreen4, label=myStruct2];
m1_120 -> m1_69  [key=2, style=dotted];
m1_121 -> m1_114  [key=0, style=bold, color=blue];
m1_121 -> m1_69  [key=2, style=dotted];
m1_121 -> m1_122  [key=0, style=solid];
m1_191 -> m1_192  [key=0, style=solid];
m1_192 -> m1_194  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_192 -> m1_193  [key=0, style=solid];
m1_192 -> m1_117  [key=2, style=dotted];
m1_193 -> m1_191  [key=0, style=bold, color=blue];
m1_1166 -> m1_1167  [key=0, style=solid];
m1_1166 -> m1_1171  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m1_1166 -> m1_1172  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m1_1170 -> m1_409  [key=2, style=dotted];
m1_1170 -> m1_1171  [key=0, style=solid];
m1_1170 -> m1_1176  [key=2, style=dotted];
m1_1167 -> m1_1174  [key=2, style=dotted];
m1_1167 -> m1_1168  [key=0, style=solid];
m1_1167 -> m1_268  [key=2, style=dotted];
m1_1167 -> m1_1175  [key=2, style=dotted];
m1_1167 -> m1_1169  [key=1, style=dashed, color=darkseagreen4, label=token];
m1_1167 -> m1_1172  [key=1, style=dashed, color=darkseagreen4, label=token];
m1_1169 -> m1_1170  [key=0, style=solid];
m1_1169 -> m1_1171  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_1171 -> m1_1173  [key=0, style=solid];
m1_1171 -> m1_1177  [key=2, style=dotted];
m1_1168 -> m1_1169  [key=0, style=solid];
m1_1168 -> m1_1172  [key=0, style=solid];
m1_1172 -> m1_1173  [key=0, style=solid];
m1_1172 -> m1_1178  [key=2, style=dotted];
m1_1173 -> m1_1166  [key=0, style=bold, color=blue];
m1_1076 -> m1_1077  [key=0, style=solid];
m1_1078 -> m1_13  [key=2, style=dotted];
m1_1078 -> m1_1079  [key=0, style=solid];
m1_1078 -> m1_1081  [key=2, style=dotted];
m1_1079 -> m1_13  [key=2, style=dotted];
m1_1079 -> m1_1080  [key=0, style=solid];
m1_1079 -> m1_1075  [key=2, style=dotted];
m1_1077 -> m1_1078  [key=0, style=solid];
m1_1077 -> m1_1079  [key=1, style=dashed, color=darkseagreen4, label=v];
m1_1077 -> m1_1081  [key=2, style=dotted];
m1_1077 -> m1_1074  [key=2, style=dotted];
m1_1080 -> m1_1076  [key=0, style=bold, color=blue];
m1_952 -> m1_953  [key=0, style=solid];
m1_953 -> m1_955  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_953 -> m1_954  [key=0, style=solid];
m1_953 -> m1_117  [key=2, style=dotted];
m1_954 -> m1_952  [key=0, style=bold, color=blue];
m1_68 -> m1_60  [key=0, style=bold, color=blue];
m1_621 -> m1_622  [key=0, style=solid];
m1_622 -> m1_624  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_622 -> m1_117  [key=2, style=dotted];
m1_622 -> m1_623  [key=0, style=solid];
m1_623 -> m1_621  [key=0, style=bold, color=blue];
m1_131 -> m1_132  [key=0, style=solid];
m1_131 -> m1_12  [key=2, style=dotted];
m1_132 -> m1_133  [key=0, style=solid];
m1_132 -> m1_47  [key=2, style=dotted];
m1_132 -> m1_45  [key=2, style=dotted];
m1_132 -> m1_134  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_132 -> m1_135  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_133 -> m1_134  [key=0, style=solid];
m1_133 -> m1_123  [key=2, style=dotted];
m1_133 -> m1_101  [key=2, style=dotted];
m1_133 -> m1_135  [key=1, style=dashed, color=darkseagreen4, label=result];
m1_133 -> m1_68  [key=2, style=dotted];
m1_133 -> m1_32  [key=2, style=dotted];
m1_133 -> m1_112  [key=2, style=dotted];
m1_134 -> m1_135  [key=0, style=solid];
m1_134 -> m1_12  [key=2, style=dotted];
m1_134 -> m1_13  [key=2, style=dotted];
m1_135 -> m1_136  [key=0, style=solid];
m1_135 -> m1_13  [key=2, style=dotted];
m1_135 -> m1_70  [key=2, style=dotted];
m1_135 -> m1_71  [key=2, style=dotted];
m1_136 -> m1_137  [key=0, style=solid];
m1_136 -> m1_13  [key=2, style=dotted];
m1_136 -> m1_136  [key=1, style=dashed, color=darkseagreen4, label=s];
m1_136 -> m1_131  [key=0, style=bold, color=blue];
m1_350 -> m1_351  [key=0, style=solid];
m1_354 -> m1_13  [key=2, style=dotted];
m1_354 -> m1_355  [key=0, style=solid];
m1_355 -> m1_13  [key=2, style=dotted];
m1_355 -> m1_356  [key=0, style=solid];
m1_356 -> m1_13  [key=2, style=dotted];
m1_356 -> m1_357  [key=0, style=solid];
m1_357 -> m1_13  [key=2, style=dotted];
m1_357 -> m1_358  [key=0, style=solid];
m1_358 -> m1_13  [key=2, style=dotted];
m1_358 -> m1_359  [key=0, style=solid];
m1_353 -> m1_354  [key=0, style=solid];
m1_353 -> m1_355  [key=1, style=dashed, color=darkseagreen4, label=shortie];
m1_353 -> m1_356  [key=1, style=dashed, color=darkseagreen4, label=shortie];
m1_353 -> m1_357  [key=1, style=dashed, color=darkseagreen4, label=shortie];
m1_353 -> m1_358  [key=1, style=dashed, color=darkseagreen4, label=shortie];
m1_353 -> m1_360  [key=2, style=dotted];
m1_353 -> m1_361  [key=2, style=dotted];
m1_352 -> m1_353  [key=0, style=solid];
m1_352 -> m1_277  [key=2, style=dotted];
m1_351 -> m1_352  [key=0, style=solid];
m1_359 -> m1_350  [key=0, style=bold, color=blue];
m1_516 -> m1_517  [key=0, style=solid];
m1_522 -> m1_13  [key=2, style=dotted];
m1_522 -> m1_523  [key=0, style=solid];
m1_523 -> m1_13  [key=2, style=dotted];
m1_523 -> m1_524  [key=0, style=solid];
m1_517 -> m1_522  [key=1, style=dashed, color=darkseagreen4, label=p1];
m1_517 -> m1_409  [key=2, style=dotted];
m1_517 -> m1_518  [key=0, style=solid];
m1_517 -> m1_519  [key=1, style=dashed, color=darkseagreen4, label=p1];
m1_520 -> m1_522  [key=1, style=dashed, color=darkseagreen4, label=a];
m1_520 -> m1_523  [key=1, style=dashed, color=darkseagreen4, label=a];
m1_520 -> m1_521  [key=0, style=solid];
m1_521 -> m1_522  [key=0, style=solid];
m1_521 -> m1_525  [key=2, style=dotted];
m1_518 -> m1_523  [key=1, style=dashed, color=darkseagreen4, label=p2];
m1_518 -> m1_409  [key=2, style=dotted];
m1_518 -> m1_519  [key=0, style=solid];
m1_519 -> m1_520  [key=0, style=solid];
m1_519 -> m1_521  [key=1, style=dashed, color=darkseagreen4, label=l];
m1_519 -> m1_410  [key=2, style=dotted];
m1_524 -> m1_516  [key=0, style=bold, color=blue];
m1_48 -> m1_49  [key=0, style=solid];
m1_15 -> m1_16  [key=0, style=solid];
m1_15 -> m1_17  [key=2, style=dotted];
m1_15 -> m1_18  [key=2, style=dotted];
m1_24 -> m1_25  [key=0, style=solid, color=green];
m1_24 -> m1_13  [key=2, style=dotted, color=green];
m1_24 -> m1_12  [key=2, style=dotted];
m1_17 -> m1_24  [key=1, style=dashed, color=green, label=roles];
m1_17 -> m1_18  [key=0, style=solid];
m1_17 -> m1_28  [key=2, style=dotted];
m1_17 -> m1_22  [key=1, style=dashed, color=darkseagreen4, label=roles];
m1_17 -> m1_25  [key=1, style=dashed, color=darkseagreen4, label=roles];
m1_17 -> m1_26  [key=1, style=dashed, color=darkseagreen4, label=roles];
m1_23 -> m1_24  [key=0, style=solid, color=green];
m1_23 -> m1_20  [key=0, style=solid];
m1_23 -> m1_33  [key=2, style=dotted];
m1_23 -> m1_11  [key=2, style=dotted];
m1_23 -> m1_25  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_23 -> m1_26  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_20 -> m1_24  [key=0, style=solid, color=green];
m1_20 -> m1_21  [key=0, style=solid];
m1_20 -> m1_8  [key=2, style=dotted];
m1_20 -> m1_9  [key=2, style=dotted];
m1_20 -> m1_28  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_25 -> m1_26  [key=0, style=solid];
m1_25 -> m1_13  [key=2, style=dotted];
m1_16 -> m1_17  [key=0, style=solid];
m1_16 -> m1_18  [key=1, style=dashed, color=darkseagreen4, label=json];
m1_16 -> m1_14  [key=0, style=bold, color=blue];
m1_22 -> m1_23  [key=0, style=solid];
m1_22 -> m1_32  [key=2, style=dotted];
m1_26 -> m1_13  [key=2, style=dotted];
m1_26 -> m1_27  [key=0, style=solid];
m1_19 -> m1_20  [key=0, style=solid];
m1_21 -> m1_22  [key=0, style=solid];
m1_21 -> m1_31  [key=2, style=dotted];
m1_21 -> m1_10  [key=2, style=dotted];
m1_21 -> m1_23  [key=1, style=dashed, color=darkseagreen4, label=creator];
m1_27 -> m1_15  [key=0, style=bold, color=blue];
m1_27 -> m1_19  [key=0, style=bold, color=blue];
m1_222 -> m1_223  [key=0, style=solid];
m1_225 -> m1_13  [key=2, style=dotted];
m1_225 -> m1_226  [key=0, style=solid];
m1_226 -> m1_13  [key=2, style=dotted];
m1_226 -> m1_227  [key=0, style=solid];
m1_227 -> m1_13  [key=2, style=dotted];
m1_227 -> m1_228  [key=0, style=solid];
m1_228 -> m1_13  [key=2, style=dotted];
m1_228 -> m1_229  [key=0, style=solid];
m1_224 -> m1_225  [key=0, style=solid];
m1_224 -> m1_226  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_224 -> m1_227  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_224 -> m1_228  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_224 -> m1_10  [key=2, style=dotted];
m1_223 -> m1_224  [key=0, style=solid];
m1_223 -> m1_230  [key=2, style=dotted];
m1_223 -> m1_231  [key=2, style=dotted];
m1_229 -> m1_222  [key=0, style=bold, color=blue];
m1_232 -> m1_233  [key=0, style=solid];
m1_237 -> m1_13  [key=2, style=dotted];
m1_237 -> m1_238  [key=0, style=solid];
m1_239 -> m1_13  [key=2, style=dotted];
m1_239 -> m1_240  [key=0, style=solid];
m1_241 -> m1_13  [key=2, style=dotted];
m1_241 -> m1_242  [key=0, style=solid];
m1_243 -> m1_13  [key=2, style=dotted];
m1_243 -> m1_244  [key=0, style=solid];
m1_245 -> m1_13  [key=2, style=dotted];
m1_245 -> m1_246  [key=0, style=solid];
m1_247 -> m1_13  [key=2, style=dotted];
m1_247 -> m1_248  [key=0, style=solid];
m1_249 -> m1_13  [key=2, style=dotted];
m1_249 -> m1_250  [key=0, style=solid];
m1_251 -> m1_13  [key=2, style=dotted];
m1_251 -> m1_252  [key=0, style=solid];
m1_235 -> m1_237  [key=1, style=dashed, color=darkseagreen4, label=reader];
m1_235 -> m1_239  [key=1, style=dashed, color=darkseagreen4, label=reader];
m1_235 -> m1_241  [key=1, style=dashed, color=darkseagreen4, label=reader];
m1_235 -> m1_243  [key=1, style=dashed, color=darkseagreen4, label=reader];
m1_235 -> m1_245  [key=1, style=dashed, color=darkseagreen4, label=reader];
m1_235 -> m1_247  [key=1, style=dashed, color=darkseagreen4, label=reader];
m1_235 -> m1_249  [key=1, style=dashed, color=darkseagreen4, label=reader];
m1_235 -> m1_251  [key=1, style=dashed, color=darkseagreen4, label=reader];
m1_235 -> m1_236  [key=0, style=solid];
m1_235 -> m1_254  [key=2, style=dotted];
m1_235 -> m1_238  [key=1, style=dashed, color=darkseagreen4, label=reader];
m1_235 -> m1_240  [key=1, style=dashed, color=darkseagreen4, label=reader];
m1_235 -> m1_242  [key=1, style=dashed, color=darkseagreen4, label=reader];
m1_235 -> m1_244  [key=1, style=dashed, color=darkseagreen4, label=reader];
m1_235 -> m1_246  [key=1, style=dashed, color=darkseagreen4, label=reader];
m1_235 -> m1_248  [key=1, style=dashed, color=darkseagreen4, label=reader];
m1_235 -> m1_250  [key=1, style=dashed, color=darkseagreen4, label=reader];
m1_235 -> m1_252  [key=1, style=dashed, color=darkseagreen4, label=reader];
m1_236 -> m1_237  [key=0, style=solid];
m1_236 -> m1_255  [key=2, style=dotted];
m1_236 -> m1_256  [key=2, style=dotted];
m1_238 -> m1_239  [key=0, style=solid];
m1_238 -> m1_255  [key=2, style=dotted];
m1_238 -> m1_256  [key=2, style=dotted];
m1_240 -> m1_241  [key=0, style=solid];
m1_240 -> m1_255  [key=2, style=dotted];
m1_240 -> m1_256  [key=2, style=dotted];
m1_242 -> m1_243  [key=0, style=solid];
m1_242 -> m1_255  [key=2, style=dotted];
m1_242 -> m1_256  [key=2, style=dotted];
m1_244 -> m1_245  [key=0, style=solid];
m1_244 -> m1_255  [key=2, style=dotted];
m1_244 -> m1_256  [key=2, style=dotted];
m1_246 -> m1_247  [key=0, style=solid];
m1_246 -> m1_255  [key=2, style=dotted];
m1_246 -> m1_256  [key=2, style=dotted];
m1_248 -> m1_249  [key=0, style=solid];
m1_248 -> m1_255  [key=2, style=dotted];
m1_248 -> m1_256  [key=2, style=dotted];
m1_250 -> m1_251  [key=0, style=solid];
m1_250 -> m1_255  [key=2, style=dotted];
m1_250 -> m1_256  [key=2, style=dotted];
m1_252 -> m1_253  [key=0, style=solid];
m1_252 -> m1_255  [key=2, style=dotted];
m1_252 -> m1_257  [key=2, style=dotted];
m1_234 -> m1_235  [key=0, style=solid];
m1_234 -> m1_10  [key=2, style=dotted];
m1_233 -> m1_234  [key=0, style=solid];
m1_233 -> m1_231  [key=2, style=dotted];
m1_233 -> m1_230  [key=2, style=dotted];
m1_253 -> m1_232  [key=0, style=bold, color=blue];
m1_41 -> m1_45  [key=2, style=dotted];
m1_41 -> m1_42  [key=0, style=solid];
m1_41 -> m1_43  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_42 -> m1_43  [key=0, style=solid];
m1_42 -> m1_46  [key=2, style=dotted];
m1_42 -> m1_47  [key=2, style=dotted];
m1_42 -> m1_17  [key=2, style=dotted];
m1_42 -> m1_18  [key=2, style=dotted];
m1_43 -> m1_44  [key=0, style=solid];
m1_43 -> m1_48  [key=2, style=dotted];
m1_43 -> m1_12  [key=2, style=dotted];
m1_43 -> m1_41  [key=0, style=bold, color=blue];
m1_1088 -> m1_1089  [key=0, style=solid];
m1_1089 -> m1_117  [key=2, style=dotted];
m1_1089 -> m1_1090  [key=0, style=solid];
m1_1089 -> m1_1091  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_1090 -> m1_1088  [key=0, style=bold, color=blue];
m1_918 -> m1_919  [key=0, style=solid];
m1_929 -> m1_13  [key=2, style=dotted];
m1_929 -> m1_930  [key=0, style=solid];
m1_934 -> m1_13  [key=2, style=dotted];
m1_934 -> m1_935  [key=0, style=solid];
m1_940 -> m1_13  [key=2, style=dotted];
m1_940 -> m1_941  [key=0, style=solid];
m1_927 -> m1_13  [key=2, style=dotted];
m1_927 -> m1_928  [key=0, style=solid];
m1_928 -> m1_13  [key=2, style=dotted];
m1_928 -> m1_929  [key=0, style=solid];
m1_932 -> m1_13  [key=2, style=dotted];
m1_932 -> m1_933  [key=0, style=solid];
m1_933 -> m1_13  [key=2, style=dotted];
m1_933 -> m1_934  [key=0, style=solid];
m1_938 -> m1_13  [key=2, style=dotted];
m1_938 -> m1_939  [key=0, style=solid];
m1_939 -> m1_13  [key=2, style=dotted];
m1_939 -> m1_940  [key=0, style=solid];
m1_921 -> m1_929  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_921 -> m1_934  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_921 -> m1_940  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_921 -> m1_922  [key=0, style=solid];
m1_921 -> m1_410  [key=2, style=dotted];
m1_921 -> m1_924  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_921 -> m1_926  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_921 -> m1_931  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_921 -> m1_935  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_921 -> m1_936  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_921 -> m1_937  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_925 -> m1_929  [key=1, style=dashed, color=darkseagreen4, label=p3];
m1_925 -> m1_409  [key=2, style=dotted];
m1_925 -> m1_926  [key=0, style=solid];
m1_925 -> m1_935  [key=1, style=dashed, color=darkseagreen4, label=p3];
m1_930 -> m1_934  [key=1, style=dashed, color=darkseagreen4, label=p4];
m1_930 -> m1_409  [key=2, style=dotted];
m1_930 -> m1_931  [key=0, style=solid];
m1_930 -> m1_936  [key=1, style=dashed, color=darkseagreen4, label=p4];
m1_935 -> m1_936  [key=0, style=solid];
m1_935 -> m1_164  [key=2, style=dotted];
m1_935 -> m1_257  [key=2, style=dotted];
m1_926 -> m1_927  [key=0, style=solid];
m1_926 -> m1_47  [key=2, style=dotted];
m1_931 -> m1_932  [key=0, style=solid];
m1_937 -> m1_938  [key=0, style=solid];
m1_919 -> m1_409  [key=2, style=dotted];
m1_919 -> m1_921  [key=1, style=dashed, color=darkseagreen4, label=p1];
m1_919 -> m1_920  [key=0, style=solid];
m1_920 -> m1_409  [key=2, style=dotted];
m1_920 -> m1_921  [key=0, style=solid];
m1_922 -> m1_923  [key=0, style=solid];
m1_924 -> m1_925  [key=0, style=solid];
m1_924 -> m1_944  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Specialized.NotifyCollectionChangedEventArgs"];
m1_924 -> m1_943  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Specialized.NotifyCollectionChangedEventArgs"];
m1_936 -> m1_937  [key=0, style=solid];
m1_936 -> m1_256  [key=2, style=dotted];
m1_936 -> m1_164  [key=2, style=dotted];
m1_923 -> m1_924  [key=0, style=solid];
m1_941 -> m1_918  [key=0, style=bold, color=blue];
m1_212 -> m1_213  [key=0, style=solid];
m1_213 -> m1_215  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_213 -> m1_214  [key=0, style=solid];
m1_213 -> m1_117  [key=2, style=dotted];
m1_214 -> m1_212  [key=0, style=bold, color=blue];
m1_122 -> m1_118  [key=0, style=bold, color=blue];
m1_816 -> m1_817  [key=0, style=solid];
m1_817 -> m1_45  [key=2, style=dotted];
m1_817 -> m1_818  [key=0, style=solid];
m1_818 -> m1_819  [key=0, style=solid];
m1_818 -> m1_820  [key=2, style=dotted];
m1_819 -> m1_816  [key=0, style=bold, color=blue];
m1_70 -> m1_71  [key=0, style=solid, color=red];
m1_72 -> m1_70  [key=0, style=bold, color=blue];
m1_545 -> m1_546  [key=0, style=solid];
m1_546 -> m1_548  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_546 -> m1_117  [key=2, style=dotted];
m1_546 -> m1_547  [key=0, style=solid];
m1_547 -> m1_545  [key=0, style=bold, color=blue];
m1_990 -> m1_991  [key=0, style=solid];
m1_991 -> m1_117  [key=2, style=dotted];
m1_991 -> m1_992  [key=0, style=solid];
m1_991 -> m1_993  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_992 -> m1_990  [key=0, style=bold, color=blue];
m1_501 -> m1_502  [key=0, style=solid];
m1_504 -> m1_13  [key=2, style=dotted];
m1_504 -> m1_505  [key=0, style=solid];
m1_504 -> m1_507  [key=2, style=dotted];
m1_505 -> m1_13  [key=2, style=dotted];
m1_505 -> m1_506  [key=0, style=solid];
m1_505 -> m1_409  [key=2, style=dotted];
m1_505 -> m1_507  [key=2, style=dotted];
m1_502 -> m1_504  [key=1, style=dashed, color=darkseagreen4, label=p];
m1_502 -> m1_503  [key=0, style=solid];
m1_502 -> m1_409  [key=2, style=dotted];
m1_503 -> m1_504  [key=0, style=solid];
m1_503 -> m1_505  [key=1, style=dashed, color=darkseagreen4, label=l];
m1_503 -> m1_499  [key=2, style=dotted];
m1_506 -> m1_501  [key=0, style=bold, color=blue];
m1_800 -> m1_801  [key=0, style=solid];
m1_802 -> m1_13  [key=2, style=dotted];
m1_802 -> m1_803  [key=0, style=solid];
m1_801 -> m1_45  [key=2, style=dotted];
m1_801 -> m1_802  [key=0, style=solid];
m1_803 -> m1_800  [key=0, style=bold, color=blue];
m1_829 -> m1_830  [key=0, style=solid];
m1_830 -> m1_832  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_830 -> m1_831  [key=0, style=solid];
m1_830 -> m1_117  [key=2, style=dotted];
m1_831 -> m1_829  [key=0, style=bold, color=blue];
m1_554 -> m1_555  [key=0, style=solid];
m1_555 -> m1_557  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_555 -> m1_117  [key=2, style=dotted];
m1_555 -> m1_556  [key=0, style=solid];
m1_556 -> m1_554  [key=0, style=bold, color=blue];
m1_258 -> m1_259  [key=0, style=solid];
m1_264 -> m1_13  [key=2, style=dotted];
m1_264 -> m1_265  [key=0, style=solid];
m1_265 -> m1_13  [key=2, style=dotted];
m1_265 -> m1_266  [key=0, style=solid];
m1_266 -> m1_13  [key=2, style=dotted];
m1_266 -> m1_267  [key=0, style=solid];
m1_263 -> m1_264  [key=0, style=solid];
m1_263 -> m1_265  [key=1, style=dashed, color=darkseagreen4, label=raw];
m1_263 -> m1_266  [key=1, style=dashed, color=darkseagreen4, label=raw];
m1_263 -> m1_269  [key=2, style=dotted];
m1_261 -> m1_263  [key=1, style=dashed, color=darkseagreen4, label=reader];
m1_261 -> m1_254  [key=2, style=dotted];
m1_261 -> m1_262  [key=0, style=solid];
m1_262 -> m1_263  [key=0, style=solid];
m1_262 -> m1_268  [key=2, style=dotted];
m1_260 -> m1_10  [key=2, style=dotted];
m1_260 -> m1_261  [key=0, style=solid];
m1_259 -> m1_231  [key=2, style=dotted];
m1_259 -> m1_230  [key=2, style=dotted];
m1_259 -> m1_260  [key=0, style=solid];
m1_267 -> m1_258  [key=0, style=bold, color=blue];
m1_331 -> m1_332  [key=0, style=solid];
m1_334 -> m1_13  [key=2, style=dotted];
m1_334 -> m1_335  [key=0, style=solid];
m1_335 -> m1_13  [key=2, style=dotted];
m1_335 -> m1_336  [key=0, style=solid];
m1_336 -> m1_45  [key=2, style=dotted];
m1_336 -> m1_337  [key=0, style=solid];
m1_336 -> m1_338  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_333 -> m1_334  [key=0, style=solid];
m1_333 -> m1_335  [key=1, style=dashed, color=darkseagreen4, label=v];
m1_333 -> m1_9  [key=2, style=dotted];
m1_333 -> m1_337  [key=1, style=dashed, color=darkseagreen4, label=v];
m1_337 -> m1_338  [key=0, style=solid];
m1_338 -> m1_339  [key=0, style=solid];
m1_338 -> m1_48  [key=2, style=dotted];
m1_332 -> m1_333  [key=0, style=solid];
m1_339 -> m1_12  [key=2, style=dotted];
m1_339 -> m1_340  [key=0, style=solid];
m1_340 -> m1_331  [key=0, style=bold, color=blue];
m1_1141 -> m1_1142  [key=0, style=solid];
m1_1146 -> m1_13  [key=2, style=dotted];
m1_1146 -> m1_1147  [key=0, style=solid];
m1_1146 -> m1_1140  [key=2, style=dotted];
m1_1147 -> m1_13  [key=2, style=dotted];
m1_1147 -> m1_1148  [key=0, style=solid];
m1_1147 -> m1_1164  [key=2, style=dotted];
m1_1148 -> m1_13  [key=2, style=dotted];
m1_1148 -> m1_1149  [key=0, style=solid];
m1_1148 -> m1_1164  [key=2, style=dotted];
m1_1149 -> m1_13  [key=2, style=dotted];
m1_1149 -> m1_1150  [key=0, style=solid];
m1_1149 -> m1_1140  [key=2, style=dotted];
m1_1150 -> m1_13  [key=2, style=dotted];
m1_1150 -> m1_1151  [key=0, style=solid];
m1_1150 -> m1_1140  [key=2, style=dotted];
m1_1151 -> m1_13  [key=2, style=dotted];
m1_1151 -> m1_1152  [key=0, style=solid];
m1_1151 -> m1_1140  [key=2, style=dotted];
m1_1152 -> m1_13  [key=2, style=dotted];
m1_1152 -> m1_1153  [key=0, style=solid];
m1_1152 -> m1_1164  [key=2, style=dotted];
m1_1155 -> m1_13  [key=2, style=dotted];
m1_1155 -> m1_1156  [key=0, style=solid];
m1_1159 -> m1_13  [key=2, style=dotted];
m1_1159 -> m1_1160  [key=0, style=solid];
m1_1161 -> m1_13  [key=2, style=dotted];
m1_1161 -> m1_1162  [key=0, style=solid];
m1_1142 -> m1_45  [key=2, style=dotted];
m1_1142 -> m1_1146  [key=1, style=dashed, color=darkseagreen4, label=a];
m1_1142 -> m1_1147  [key=1, style=dashed, color=darkseagreen4, label=a];
m1_1142 -> m1_1148  [key=1, style=dashed, color=darkseagreen4, label=a];
m1_1142 -> m1_1149  [key=1, style=dashed, color=darkseagreen4, label=a];
m1_1142 -> m1_1150  [key=1, style=dashed, color=darkseagreen4, label=a];
m1_1142 -> m1_1151  [key=1, style=dashed, color=darkseagreen4, label=a];
m1_1142 -> m1_1152  [key=1, style=dashed, color=darkseagreen4, label=a];
m1_1142 -> m1_1143  [key=0, style=solid];
m1_1142 -> m1_1144  [key=1, style=dashed, color=darkseagreen4, label=a];
m1_1142 -> m1_1145  [key=1, style=dashed, color=darkseagreen4, label=a];
m1_1142 -> m1_1154  [key=1, style=dashed, color=darkseagreen4, label=a];
m1_1142 -> m1_1156  [key=1, style=dashed, color=darkseagreen4, label=a];
m1_1142 -> m1_1157  [key=1, style=dashed, color=darkseagreen4, label=a];
m1_1142 -> m1_1158  [key=1, style=dashed, color=darkseagreen4, label=a];
m1_1142 -> m1_1160  [key=1, style=dashed, color=darkseagreen4, label=a];
m1_1142 -> m1_1162  [key=1, style=dashed, color=darkseagreen4, label=a];
m1_1145 -> m1_1146  [key=0, style=solid];
m1_1153 -> m1_1154  [key=0, style=solid];
m1_1154 -> m1_1155  [key=0, style=solid];
m1_1154 -> m1_1165  [key=2, style=dotted];
m1_1154 -> m1_257  [key=2, style=dotted];
m1_1156 -> m1_72  [key=2, style=dotted];
m1_1156 -> m1_1157  [key=0, style=solid];
m1_1156 -> m1_257  [key=2, style=dotted];
m1_1158 -> m1_1159  [key=0, style=solid];
m1_1158 -> m1_1165  [key=2, style=dotted];
m1_1158 -> m1_256  [key=2, style=dotted];
m1_1160 -> m1_1161  [key=0, style=solid];
m1_1160 -> m1_1165  [key=2, style=dotted];
m1_1160 -> m1_256  [key=2, style=dotted];
m1_1162 -> m1_1163  [key=0, style=solid];
m1_1162 -> m1_1165  [key=2, style=dotted];
m1_1162 -> m1_257  [key=2, style=dotted];
m1_1143 -> m1_1144  [key=0, style=solid];
m1_1144 -> m1_1145  [key=0, style=solid];
m1_1157 -> m1_72  [key=2, style=dotted];
m1_1157 -> m1_1158  [key=0, style=solid];
m1_1157 -> m1_257  [key=2, style=dotted];
m1_1163 -> m1_1141  [key=0, style=bold, color=blue];
m1_362 -> m1_363  [key=0, style=solid];
m1_363 -> m1_45  [key=2, style=dotted];
m1_363 -> m1_364  [key=0, style=solid];
m1_363 -> m1_365  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_363 -> m1_366  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_363 -> m1_367  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_364 -> m1_68  [key=2, style=dotted];
m1_364 -> m1_365  [key=0, style=solid];
m1_365 -> m1_366  [key=0, style=solid];
m1_365 -> m1_9  [key=2, style=dotted];
m1_366 -> m1_367  [key=0, style=solid];
m1_366 -> m1_9  [key=2, style=dotted];
m1_367 -> m1_368  [key=0, style=solid];
m1_367 -> m1_48  [key=2, style=dotted];
m1_367 -> m1_12  [key=2, style=dotted];
m1_368 -> m1_362  [key=0, style=bold, color=blue];
m1_890 -> m1_891  [key=0, style=solid];
m1_901 -> m1_13  [key=2, style=dotted];
m1_901 -> m1_902  [key=0, style=solid];
m1_906 -> m1_13  [key=2, style=dotted];
m1_906 -> m1_907  [key=0, style=solid];
m1_912 -> m1_13  [key=2, style=dotted];
m1_912 -> m1_913  [key=0, style=solid];
m1_899 -> m1_13  [key=2, style=dotted];
m1_899 -> m1_900  [key=0, style=solid];
m1_900 -> m1_13  [key=2, style=dotted];
m1_900 -> m1_901  [key=0, style=solid];
m1_904 -> m1_13  [key=2, style=dotted];
m1_904 -> m1_905  [key=0, style=solid];
m1_905 -> m1_13  [key=2, style=dotted];
m1_905 -> m1_906  [key=0, style=solid];
m1_910 -> m1_13  [key=2, style=dotted];
m1_910 -> m1_911  [key=0, style=solid];
m1_911 -> m1_13  [key=2, style=dotted];
m1_911 -> m1_912  [key=0, style=solid];
m1_893 -> m1_901  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_893 -> m1_906  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_893 -> m1_912  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_893 -> m1_894  [key=0, style=solid];
m1_893 -> m1_410  [key=2, style=dotted];
m1_893 -> m1_896  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_893 -> m1_898  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_893 -> m1_903  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_893 -> m1_907  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_893 -> m1_908  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_893 -> m1_909  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_897 -> m1_901  [key=1, style=dashed, color=darkseagreen4, label=p3];
m1_897 -> m1_409  [key=2, style=dotted];
m1_897 -> m1_898  [key=0, style=solid];
m1_897 -> m1_907  [key=1, style=dashed, color=darkseagreen4, label=p3];
m1_902 -> m1_906  [key=1, style=dashed, color=darkseagreen4, label=p4];
m1_902 -> m1_409  [key=2, style=dotted];
m1_902 -> m1_903  [key=0, style=solid];
m1_902 -> m1_908  [key=1, style=dashed, color=darkseagreen4, label=p4];
m1_907 -> m1_908  [key=0, style=solid];
m1_907 -> m1_164  [key=2, style=dotted];
m1_907 -> m1_257  [key=2, style=dotted];
m1_898 -> m1_899  [key=0, style=solid];
m1_898 -> m1_47  [key=2, style=dotted];
m1_903 -> m1_904  [key=0, style=solid];
m1_909 -> m1_910  [key=0, style=solid];
m1_891 -> m1_409  [key=2, style=dotted];
m1_891 -> m1_893  [key=1, style=dashed, color=darkseagreen4, label=p1];
m1_891 -> m1_892  [key=0, style=solid];
m1_892 -> m1_409  [key=2, style=dotted];
m1_892 -> m1_893  [key=0, style=solid];
m1_894 -> m1_895  [key=0, style=solid];
m1_896 -> m1_897  [key=0, style=solid];
m1_896 -> m1_916  [key=1, style=dashed, color=darkseagreen4, label="System.ComponentModel.ListChangedEventArgs"];
m1_896 -> m1_915  [key=1, style=dashed, color=darkseagreen4, label="System.ComponentModel.ListChangedEventArgs"];
m1_908 -> m1_909  [key=0, style=solid];
m1_908 -> m1_256  [key=2, style=dotted];
m1_908 -> m1_164  [key=2, style=dotted];
m1_895 -> m1_896  [key=0, style=solid];
m1_913 -> m1_890  [key=0, style=bold, color=blue];
m1_1091 -> m1_1092  [key=0, style=solid];
m1_28 -> m1_29  [key=0, style=solid];
m1_30 -> m1_28  [key=0, style=bold, color=blue];
m1_49 -> m1_50  [key=0, style=solid];
m1_49 -> m1_54  [key=2, style=dotted];
m1_49 -> m1_52  [key=1, style=dashed, color=darkseagreen4, label=p];
m1_50 -> m1_51  [key=0, style=solid, color=red];
m1_50 -> m1_45  [key=2, style=dotted];
m1_50 -> m1_53  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_52 -> m1_53  [key=0, style=solid];
m1_52 -> m1_56  [key=2, style=dotted];
m1_52 -> m1_13  [key=2, style=dotted];
m1_51 -> m1_52  [key=0, style=solid, color=red];
m1_51 -> m1_55  [key=2, style=dotted, color=red];
m1_51 -> m1_47  [key=2, style=dotted, color=red];
m1_51 -> m1_54  [key=1, style=dashed, color=darkseagreen4, label=d];
m1_53 -> m1_48  [key=0, style=bold, color=blue];
m1_53 -> m1_54  [key=0, style=solid];
m1_73 -> m1_74  [key=0, style=solid];
m1_195 -> m1_45  [key=2, style=dotted];
m1_195 -> m1_196  [key=0, style=solid];
m1_202 -> m1_45  [key=2, style=dotted];
m1_202 -> m1_203  [key=0, style=solid];
m1_209 -> m1_45  [key=2, style=dotted];
m1_209 -> m1_210  [key=0, style=solid];
m1_216 -> m1_45  [key=2, style=dotted];
m1_216 -> m1_217  [key=0, style=solid];
m1_216 -> m1_218  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_216 -> m1_219  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_216 -> m1_220  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_825 -> m1_45  [key=2, style=dotted];
m1_825 -> m1_826  [key=0, style=solid];
m1_833 -> m1_45  [key=2, style=dotted];
m1_833 -> m1_834  [key=0, style=solid];
m1_846 -> m1_45  [key=2, style=dotted];
m1_846 -> m1_847  [key=0, style=solid];
m1_858 -> m1_45  [key=2, style=dotted];
m1_858 -> m1_859  [key=0, style=solid];
m1_956 -> m1_45  [key=2, style=dotted];
m1_956 -> m1_957  [key=0, style=solid];
m1_454 -> m1_422  [key=1, style=dashed, color=darkseagreen4, label=changing];
m1_454 -> m1_431  [key=1, style=dashed, color=darkseagreen4, label=changing];
m1_454 -> m1_437  [key=1, style=dashed, color=darkseagreen4, label=changing];
m1_454 -> m1_443  [key=1, style=dashed, color=darkseagreen4, label=changing];
m1_454 -> m1_455  [key=0, style=solid];
m1_454 -> m1_456  [key=1, style=dashed, color=darkseagreen4, label=changing];
m1_459 -> m1_423  [key=1, style=dashed, color=darkseagreen4, label=changed];
m1_459 -> m1_432  [key=1, style=dashed, color=darkseagreen4, label=changed];
m1_459 -> m1_438  [key=1, style=dashed, color=darkseagreen4, label=changed];
m1_459 -> m1_444  [key=1, style=dashed, color=darkseagreen4, label=changed];
m1_459 -> m1_460  [key=0, style=solid];
m1_459 -> m1_461  [key=1, style=dashed, color=darkseagreen4, label=changed];
m1_455 -> m1_425  [key=1, style=dashed, color=darkseagreen4, label=changingCount];
m1_455 -> m1_428  [key=1, style=dashed, color=darkseagreen4, label=changingCount];
m1_455 -> m1_434  [key=1, style=dashed, color=darkseagreen4, label=changingCount];
m1_455 -> m1_440  [key=1, style=dashed, color=darkseagreen4, label=changingCount];
m1_455 -> m1_446  [key=1, style=dashed, color=darkseagreen4, label=changingCount];
m1_455 -> m1_449  [key=1, style=dashed, color=darkseagreen4, label=changingCount];
m1_455 -> m1_455  [key=1, style=dashed, color=darkseagreen4, label=changingCount];
m1_455 -> m1_456  [key=0, style=solid];
m1_460 -> m1_426  [key=1, style=dashed, color=darkseagreen4, label=changedCount];
m1_460 -> m1_429  [key=1, style=dashed, color=darkseagreen4, label=changedCount];
m1_460 -> m1_435  [key=1, style=dashed, color=darkseagreen4, label=changedCount];
m1_460 -> m1_441  [key=1, style=dashed, color=darkseagreen4, label=changedCount];
m1_460 -> m1_447  [key=1, style=dashed, color=darkseagreen4, label=changedCount];
m1_460 -> m1_450  [key=1, style=dashed, color=darkseagreen4, label=changedCount];
m1_460 -> m1_460  [key=1, style=dashed, color=darkseagreen4, label=changedCount];
m1_460 -> m1_461  [key=0, style=solid];
m1_490 -> m1_468  [key=1, style=dashed, color=darkseagreen4, label=changed];
m1_490 -> m1_474  [key=1, style=dashed, color=darkseagreen4, label=changed];
m1_490 -> m1_478  [key=1, style=dashed, color=darkseagreen4, label=changed];
m1_490 -> m1_482  [key=1, style=dashed, color=darkseagreen4, label=changed];
m1_490 -> m1_491  [key=0, style=solid];
m1_490 -> m1_492  [key=1, style=dashed, color=darkseagreen4, label=changed];
m1_491 -> m1_470  [key=1, style=dashed, color=darkseagreen4, label=changedCount];
m1_491 -> m1_472  [key=1, style=dashed, color=darkseagreen4, label=changedCount];
m1_491 -> m1_476  [key=1, style=dashed, color=darkseagreen4, label=changedCount];
m1_491 -> m1_480  [key=1, style=dashed, color=darkseagreen4, label=changedCount];
m1_491 -> m1_484  [key=1, style=dashed, color=darkseagreen4, label=changedCount];
m1_491 -> m1_486  [key=1, style=dashed, color=darkseagreen4, label=changedCount];
m1_491 -> m1_491  [key=1, style=dashed, color=darkseagreen4, label=changedCount];
m1_491 -> m1_492  [key=0, style=solid];
m1_916 -> m1_901  [key=1, style=dashed, color=darkseagreen4, label=index];
m1_916 -> m1_906  [key=1, style=dashed, color=darkseagreen4, label=index];
m1_916 -> m1_900  [key=1, style=dashed, color=darkseagreen4, label=index];
m1_916 -> m1_905  [key=1, style=dashed, color=darkseagreen4, label=index];
m1_916 -> m1_911  [key=1, style=dashed, color=darkseagreen4, label=index];
m1_916 -> m1_917  [key=0, style=solid];
m1_916 -> m1_903  [key=1, style=dashed, color=darkseagreen4, label=index];
m1_915 -> m1_899  [key=1, style=dashed, color=darkseagreen4, label=changedType];
m1_915 -> m1_904  [key=1, style=dashed, color=darkseagreen4, label=changedType];
m1_915 -> m1_910  [key=1, style=dashed, color=darkseagreen4, label=changedType];
m1_915 -> m1_916  [key=0, style=solid];
m1_915 -> m1_917  [key=1, style=dashed, color=darkseagreen4, label=changedType];
m1_944 -> m1_929  [key=1, style=dashed, color=darkseagreen4, label=index];
m1_944 -> m1_934  [key=1, style=dashed, color=darkseagreen4, label=index];
m1_944 -> m1_928  [key=1, style=dashed, color=darkseagreen4, label=index];
m1_944 -> m1_933  [key=1, style=dashed, color=darkseagreen4, label=index];
m1_944 -> m1_939  [key=1, style=dashed, color=darkseagreen4, label=index];
m1_944 -> m1_945  [key=0, style=solid];
m1_944 -> m1_931  [key=1, style=dashed, color=darkseagreen4, label=index];
m1_943 -> m1_927  [key=1, style=dashed, color=darkseagreen4, label=changedType];
m1_943 -> m1_932  [key=1, style=dashed, color=darkseagreen4, label=changedType];
m1_943 -> m1_938  [key=1, style=dashed, color=darkseagreen4, label=changedType];
m1_943 -> m1_944  [key=0, style=solid];
m1_943 -> m1_945  [key=1, style=dashed, color=darkseagreen4, label=changedType];
m1_217 -> m1_68  [key=2, style=dotted];
m1_217 -> m1_69  [key=2, style=dotted];
m1_217 -> m1_218  [key=0, style=solid];
m1_218 -> m1_68  [key=2, style=dotted];
m1_218 -> m1_69  [key=2, style=dotted];
m1_218 -> m1_219  [key=0, style=solid];
m1_219 -> m1_68  [key=2, style=dotted];
m1_219 -> m1_69  [key=2, style=dotted];
m1_219 -> m1_220  [key=0, style=solid];
m1_957 -> m1_68  [key=2, style=dotted];
m1_957 -> m1_958  [key=0, style=solid];
m1_194 -> m1_195  [key=0, style=solid];
m1_196 -> m1_197  [key=0, style=solid];
m1_196 -> m1_190  [key=2, style=dotted];
m1_201 -> m1_202  [key=0, style=solid];
m1_203 -> m1_204  [key=0, style=solid];
m1_203 -> m1_190  [key=2, style=dotted];
m1_208 -> m1_209  [key=0, style=solid];
m1_210 -> m1_211  [key=0, style=solid];
m1_210 -> m1_190  [key=2, style=dotted];
m1_215 -> m1_216  [key=0, style=solid];
m1_220 -> m1_221  [key=0, style=solid];
m1_220 -> m1_190  [key=2, style=dotted];
m1_824 -> m1_825  [key=0, style=solid];
m1_826 -> m1_827  [key=0, style=solid];
m1_826 -> m1_828  [key=2, style=dotted];
m1_832 -> m1_833  [key=0, style=solid];
m1_834 -> m1_835  [key=0, style=solid];
m1_834 -> m1_836  [key=2, style=dotted];
m1_845 -> m1_846  [key=0, style=solid];
m1_847 -> m1_848  [key=0, style=solid];
m1_847 -> m1_849  [key=2, style=dotted];
m1_857 -> m1_858  [key=0, style=solid];
m1_859 -> m1_860  [key=0, style=solid];
m1_859 -> m1_861  [key=2, style=dotted];
m1_955 -> m1_956  [key=0, style=solid];
m1_1023 -> m1_29  [key=2, style=dotted];
m1_1023 -> m1_30  [key=2, style=dotted];
m1_1023 -> m1_1024  [key=0, style=solid];
m1_1023 -> m1_1025  [key=1, style=dashed, color=darkseagreen4, label=reader];
m1_1023 -> m1_1026  [key=1, style=dashed, color=darkseagreen4, label=reader];
m1_1023 -> m1_1027  [key=1, style=dashed, color=darkseagreen4, label=reader];
m1_1023 -> m1_1028  [key=1, style=dashed, color=darkseagreen4, label=reader];
m1_1023 -> m1_1029  [key=1, style=dashed, color=darkseagreen4, label=reader];
m1_700 -> m1_32  [key=2, style=dotted];
m1_700 -> m1_701  [key=0, style=solid];
m1_700 -> m1_9  [key=2, style=dotted];
m1_709 -> m1_32  [key=2, style=dotted];
m1_709 -> m1_710  [key=0, style=solid];
m1_719 -> m1_32  [key=2, style=dotted];
m1_719 -> m1_720  [key=0, style=solid];
m1_1029 -> m1_31  [key=2, style=dotted];
m1_1029 -> m1_1030  [key=0, style=solid];
m1_453 -> m1_454  [key=0, style=solid];
m1_452 -> m1_454  [key=1, style=dashed, color=darkseagreen4, label="System.ComponentModel.PropertyChangingEventArgs"];
m1_452 -> m1_453  [key=0, style=solid];
m1_456 -> m1_452  [key=0, style=bold, color=blue];
m1_458 -> m1_459  [key=0, style=solid];
m1_457 -> m1_459  [key=1, style=dashed, color=darkseagreen4, label="System.ComponentModel.PropertyChangedEventArgs"];
m1_457 -> m1_458  [key=0, style=solid];
m1_461 -> m1_457  [key=0, style=bold, color=blue];
m1_489 -> m1_490  [key=0, style=solid];
m1_488 -> m1_490  [key=1, style=dashed, color=darkseagreen4, label="System.ComponentModel.PropertyChangedEventArgs"];
m1_488 -> m1_489  [key=0, style=solid];
m1_492 -> m1_488  [key=0, style=bold, color=blue];
m1_540 -> m1_409  [key=2, style=dotted];
m1_540 -> m1_541  [key=0, style=solid];
m1_540 -> m1_542  [key=1, style=dashed, color=darkseagreen4, label=p1];
m1_541 -> m1_409  [key=2, style=dotted];
m1_541 -> m1_542  [key=0, style=solid];
m1_549 -> m1_409  [key=2, style=dotted];
m1_549 -> m1_550  [key=0, style=solid];
m1_549 -> m1_551  [key=1, style=dashed, color=darkseagreen4, label=p1];
m1_550 -> m1_409  [key=2, style=dotted];
m1_550 -> m1_551  [key=0, style=solid];
m1_558 -> m1_409  [key=2, style=dotted];
m1_558 -> m1_559  [key=0, style=solid];
m1_558 -> m1_560  [key=1, style=dashed, color=darkseagreen4, label=p1];
m1_559 -> m1_409  [key=2, style=dotted];
m1_559 -> m1_560  [key=0, style=solid];
m1_561 -> m1_409  [key=2, style=dotted];
m1_561 -> m1_562  [key=0, style=solid];
m1_625 -> m1_409  [key=2, style=dotted];
m1_625 -> m1_626  [key=0, style=solid];
m1_625 -> m1_627  [key=1, style=dashed, color=darkseagreen4, label=p1];
m1_626 -> m1_409  [key=2, style=dotted];
m1_626 -> m1_627  [key=0, style=solid];
m1_628 -> m1_409  [key=2, style=dotted];
m1_628 -> m1_629  [key=0, style=solid];
m1_628 -> m1_630  [key=1, style=dashed, color=darkseagreen4, label=p3];
m1_636 -> m1_409  [key=2, style=dotted];
m1_636 -> m1_637  [key=0, style=solid];
m1_636 -> m1_638  [key=1, style=dashed, color=darkseagreen4, label=p1];
m1_637 -> m1_409  [key=2, style=dotted];
m1_637 -> m1_638  [key=0, style=solid];
m1_697 -> m1_409  [key=2, style=dotted];
m1_697 -> m1_698  [key=0, style=solid];
m1_697 -> m1_699  [key=1, style=dashed, color=darkseagreen4, label=p1];
m1_698 -> m1_409  [key=2, style=dotted];
m1_698 -> m1_699  [key=0, style=solid];
m1_706 -> m1_409  [key=2, style=dotted];
m1_706 -> m1_707  [key=0, style=solid];
m1_706 -> m1_708  [key=1, style=dashed, color=darkseagreen4, label=p1];
m1_707 -> m1_409  [key=2, style=dotted];
m1_707 -> m1_708  [key=0, style=solid];
m1_715 -> m1_409  [key=2, style=dotted];
m1_715 -> m1_716  [key=0, style=solid];
m1_715 -> m1_717  [key=1, style=dashed, color=darkseagreen4, label=p1];
m1_716 -> m1_409  [key=2, style=dotted];
m1_716 -> m1_717  [key=0, style=solid];
m1_718 -> m1_409  [key=2, style=dotted];
m1_718 -> m1_719  [key=0, style=solid];
m1_777 -> m1_409  [key=2, style=dotted];
m1_777 -> m1_778  [key=0, style=solid];
m1_777 -> m1_779  [key=1, style=dashed, color=darkseagreen4, label=p1];
m1_778 -> m1_409  [key=2, style=dotted];
m1_778 -> m1_779  [key=0, style=solid];
m1_780 -> m1_409  [key=2, style=dotted];
m1_780 -> m1_781  [key=0, style=solid];
m1_780 -> m1_782  [key=1, style=dashed, color=darkseagreen4, label=p3];
m1_914 -> m1_916  [key=1, style=dashed, color=darkseagreen4, label="System.ComponentModel.ListChangedEventArgs"];
m1_914 -> m1_915  [key=0, style=solid];
m1_917 -> m1_914  [key=0, style=bold, color=blue];
m1_942 -> m1_944  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Specialized.NotifyCollectionChangedEventArgs"];
m1_942 -> m1_943  [key=0, style=solid];
m1_945 -> m1_942  [key=0, style=bold, color=blue];
m1_958 -> m1_955  [key=0, style=bold, color=blue];
m1_197 -> m1_194  [key=0, style=bold, color=blue];
m1_204 -> m1_201  [key=0, style=bold, color=blue];
m1_211 -> m1_208  [key=0, style=bold, color=blue];
m1_221 -> m1_215  [key=0, style=bold, color=blue];
m1_827 -> m1_824  [key=0, style=bold, color=blue];
m1_835 -> m1_832  [key=0, style=bold, color=blue];
m1_848 -> m1_845  [key=0, style=bold, color=blue];
m1_860 -> m1_857  [key=0, style=bold, color=blue];
m1_873 -> m1_46  [key=2, style=dotted];
m1_873 -> m1_874  [key=0, style=solid];
m1_1022 -> m1_1023  [key=0, style=solid];
m1_1024 -> m1_255  [key=2, style=dotted];
m1_1024 -> m1_1025  [key=0, style=solid];
m1_1025 -> m1_255  [key=2, style=dotted];
m1_1025 -> m1_1026  [key=0, style=solid];
m1_1026 -> m1_255  [key=2, style=dotted];
m1_1026 -> m1_1027  [key=0, style=solid];
m1_1027 -> m1_255  [key=2, style=dotted];
m1_1027 -> m1_1028  [key=0, style=solid];
m1_1028 -> m1_1029  [key=0, style=solid];
m1_1028 -> m1_255  [key=2, style=dotted];
m1_699 -> m1_700  [key=0, style=solid];
m1_699 -> m1_410  [key=2, style=dotted];
m1_701 -> m1_696  [key=0, style=bold, color=blue];
m1_708 -> m1_709  [key=0, style=solid];
m1_708 -> m1_410  [key=2, style=dotted];
m1_710 -> m1_705  [key=0, style=bold, color=blue];
m1_717 -> m1_719  [key=1, style=dashed, color=darkseagreen4, label=l];
m1_717 -> m1_410  [key=2, style=dotted];
m1_717 -> m1_718  [key=0, style=solid];
m1_720 -> m1_714  [key=0, style=bold, color=blue];
m1_1030 -> m1_1021  [key=0, style=bold, color=blue];
m1_543 -> m1_9  [key=2, style=dotted];
m1_543 -> m1_535  [key=2, style=dotted];
m1_543 -> m1_544  [key=0, style=solid];
m1_542 -> m1_410  [key=2, style=dotted];
m1_542 -> m1_543  [key=0, style=solid];
m1_551 -> m1_410  [key=2, style=dotted];
m1_551 -> m1_552  [key=0, style=solid];
m1_560 -> m1_410  [key=2, style=dotted];
m1_560 -> m1_561  [key=0, style=solid];
m1_560 -> m1_562  [key=1, style=dashed, color=darkseagreen4, label=l];
m1_627 -> m1_410  [key=2, style=dotted];
m1_627 -> m1_628  [key=0, style=solid];
m1_627 -> m1_629  [key=1, style=dashed, color=darkseagreen4, label=l];
m1_627 -> m1_630  [key=1, style=dashed, color=darkseagreen4, label=l];
m1_638 -> m1_410  [key=2, style=dotted];
m1_638 -> m1_639  [key=0, style=solid];
m1_779 -> m1_410  [key=2, style=dotted];
m1_779 -> m1_780  [key=0, style=solid];
m1_779 -> m1_781  [key=1, style=dashed, color=darkseagreen4, label=l];
m1_779 -> m1_782  [key=1, style=dashed, color=darkseagreen4, label=l];
m1_539 -> m1_540  [key=0, style=solid];
m1_548 -> m1_549  [key=0, style=solid];
m1_557 -> m1_558  [key=0, style=solid];
m1_562 -> m1_535  [key=2, style=dotted];
m1_562 -> m1_563  [key=0, style=solid];
m1_624 -> m1_625  [key=0, style=solid];
m1_629 -> m1_630  [key=0, style=solid];
m1_630 -> m1_631  [key=0, style=solid];
m1_635 -> m1_636  [key=0, style=solid];
m1_696 -> m1_697  [key=0, style=solid];
m1_705 -> m1_706  [key=0, style=solid];
m1_714 -> m1_715  [key=0, style=solid];
m1_776 -> m1_777  [key=0, style=solid];
m1_781 -> m1_782  [key=0, style=solid];
m1_782 -> m1_783  [key=0, style=solid];
m1_552 -> m1_535  [key=2, style=dotted];
m1_552 -> m1_553  [key=0, style=solid];
m1_275 -> m1_277  [key=2, style=dotted];
m1_275 -> m1_276  [key=0, style=solid];
m1_301 -> m1_277  [key=2, style=dotted];
m1_301 -> m1_302  [key=0, style=solid];
m1_987 -> m1_277  [key=2, style=dotted];
m1_987 -> m1_988  [key=0, style=solid];
m1_995 -> m1_277  [key=2, style=dotted];
m1_995 -> m1_996  [key=0, style=solid];
m1_1003 -> m1_277  [key=2, style=dotted];
m1_1003 -> m1_1004  [key=0, style=solid];
m1_1093 -> m1_277  [key=2, style=dotted];
m1_1093 -> m1_1094  [key=0, style=solid];
m1_872 -> m1_873  [key=0, style=solid];
m1_874 -> m1_872  [key=0, style=bold, color=blue];
m1_1021 -> m1_1022  [key=0, style=solid];
m1_544 -> m1_539  [key=0, style=bold, color=blue];
m1_639 -> m1_640  [key=0, style=solid];
m1_639 -> m1_641  [key=2, style=dotted];
m1_553 -> m1_548  [key=0, style=bold, color=blue];
m1_563 -> m1_557  [key=0, style=bold, color=blue];
m1_631 -> m1_624  [key=0, style=bold, color=blue];
m1_640 -> m1_635  [key=0, style=bold, color=blue];
m1_783 -> m1_776  [key=0, style=bold, color=blue];
m1_274 -> m1_275  [key=0, style=solid];
m1_276 -> m1_273  [key=0, style=bold, color=blue];
m1_300 -> m1_301  [key=0, style=solid];
m1_302 -> m1_300  [key=0, style=bold, color=blue];
m1_986 -> m1_987  [key=0, style=solid];
m1_988 -> m1_989  [key=0, style=solid];
m1_994 -> m1_995  [key=0, style=solid];
m1_996 -> m1_997  [key=0, style=solid];
m1_996 -> m1_998  [key=2, style=dotted];
m1_1002 -> m1_1003  [key=0, style=solid];
m1_1004 -> m1_1002  [key=0, style=bold, color=blue];
m1_1092 -> m1_1093  [key=0, style=solid];
m1_1094 -> m1_1091  [key=0, style=bold, color=blue];
m1_273 -> m1_274  [key=0, style=solid];
m1_985 -> m1_986  [key=0, style=solid];
m1_989 -> m1_985  [key=0, style=bold, color=blue];
m1_993 -> m1_994  [key=0, style=solid];
m1_997 -> m1_993  [key=0, style=bold, color=blue];
m1_965 -> m1_966  [key=0, style=solid];
m1_969 -> m1_13  [key=2, style=dotted];
m1_969 -> m1_970  [key=0, style=solid];
m1_968 -> m1_969  [key=0, style=solid];
m1_967 -> m1_968  [key=0, style=solid];
m1_967 -> m1_277  [key=2, style=dotted];
m1_966 -> m1_967  [key=0, style=solid];
m1_970 -> m1_965  [key=0, style=bold, color=blue];
m1_493 -> m1_494  [key=0, style=solid];
m1_494 -> m1_409  [key=2, style=dotted];
m1_494 -> m1_495  [key=0, style=solid];
m1_494 -> m1_496  [key=1, style=dashed, color=darkseagreen4, label=p];
m1_497 -> m1_409  [key=2, style=dotted];
m1_497 -> m1_257  [key=2, style=dotted];
m1_497 -> m1_498  [key=0, style=solid];
m1_497 -> m1_500  [key=2, style=dotted];
m1_496 -> m1_256  [key=2, style=dotted];
m1_496 -> m1_497  [key=0, style=solid];
m1_496 -> m1_500  [key=2, style=dotted];
m1_495 -> m1_499  [key=2, style=dotted];
m1_495 -> m1_497  [key=1, style=dashed, color=darkseagreen4, label=l];
m1_495 -> m1_496  [key=0, style=solid];
m1_498 -> m1_493  [key=0, style=bold, color=blue];
m1_1133 -> m1_1134  [key=0, style=solid];
m1_1137 -> m1_13  [key=2, style=dotted];
m1_1137 -> m1_1138  [key=0, style=solid];
m1_1138 -> m1_13  [key=2, style=dotted];
m1_1138 -> m1_1139  [key=0, style=solid];
m1_1135 -> m1_1137  [key=1, style=dashed, color=darkseagreen4, label=exactMatch];
m1_1135 -> m1_1136  [key=0, style=solid];
m1_1135 -> m1_1140  [key=2, style=dotted];
m1_1136 -> m1_1137  [key=0, style=solid];
m1_1136 -> m1_1138  [key=1, style=dashed, color=darkseagreen4, label=ignoreCase];
m1_1136 -> m1_1140  [key=2, style=dotted];
m1_1134 -> m1_1135  [key=0, style=solid];
m1_1134 -> m1_1136  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_1134 -> m1_277  [key=2, style=dotted];
m1_1139 -> m1_1133  [key=0, style=bold, color=blue];
m1_748 -> m1_749  [key=0, style=solid];
m1_755 -> m1_13  [key=2, style=dotted];
m1_755 -> m1_756  [key=0, style=solid];
m1_757 -> m1_13  [key=2, style=dotted];
m1_757 -> m1_758  [key=0, style=solid];
m1_754 -> m1_13  [key=2, style=dotted];
m1_754 -> m1_755  [key=0, style=solid];
m1_756 -> m1_13  [key=2, style=dotted];
m1_756 -> m1_757  [key=0, style=solid];
m1_749 -> m1_755  [key=1, style=dashed, color=darkseagreen4, label=p1];
m1_749 -> m1_409  [key=2, style=dotted];
m1_749 -> m1_750  [key=0, style=solid];
m1_749 -> m1_751  [key=1, style=dashed, color=darkseagreen4, label=p1];
m1_751 -> m1_755  [key=1, style=dashed, color=darkseagreen4, label=l];
m1_751 -> m1_757  [key=1, style=dashed, color=darkseagreen4, label=l];
m1_751 -> m1_754  [key=1, style=dashed, color=darkseagreen4, label=l];
m1_751 -> m1_756  [key=1, style=dashed, color=darkseagreen4, label=l];
m1_751 -> m1_752  [key=0, style=solid];
m1_751 -> m1_410  [key=2, style=dotted];
m1_751 -> m1_753  [key=1, style=dashed, color=darkseagreen4, label=l];
m1_750 -> m1_757  [key=1, style=dashed, color=darkseagreen4, label=p2];
m1_750 -> m1_409  [key=2, style=dotted];
m1_750 -> m1_751  [key=0, style=solid];
m1_752 -> m1_754  [key=1, style=dashed, color=darkseagreen4, label=p3];
m1_752 -> m1_756  [key=1, style=dashed, color=darkseagreen4, label=p3];
m1_752 -> m1_409  [key=2, style=dotted];
m1_752 -> m1_753  [key=0, style=solid];
m1_753 -> m1_754  [key=0, style=solid];
m1_753 -> m1_759  [key=2, style=dotted];
m1_758 -> m1_748  [key=0, style=bold, color=blue];
m1_1005 -> m1_1006  [key=0, style=solid];
m1_1007 -> m1_29  [key=2, style=dotted];
m1_1007 -> m1_30  [key=2, style=dotted];
m1_1007 -> m1_1008  [key=0, style=solid];
m1_1007 -> m1_1009  [key=1, style=dashed, color=darkseagreen4, label=reader];
m1_1007 -> m1_1010  [key=1, style=dashed, color=darkseagreen4, label=reader];
m1_1007 -> m1_1011  [key=1, style=dashed, color=darkseagreen4, label=reader];
m1_1007 -> m1_1012  [key=1, style=dashed, color=darkseagreen4, label=reader];
m1_1007 -> m1_1013  [key=1, style=dashed, color=darkseagreen4, label=reader];
m1_1013 -> m1_31  [key=2, style=dotted];
m1_1013 -> m1_1014  [key=0, style=solid];
m1_1013 -> m1_1015  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_1006 -> m1_1007  [key=0, style=solid];
m1_1008 -> m1_255  [key=2, style=dotted];
m1_1008 -> m1_1009  [key=0, style=solid];
m1_1009 -> m1_255  [key=2, style=dotted];
m1_1009 -> m1_1010  [key=0, style=solid];
m1_1010 -> m1_255  [key=2, style=dotted];
m1_1010 -> m1_1011  [key=0, style=solid];
m1_1011 -> m1_255  [key=2, style=dotted];
m1_1011 -> m1_1012  [key=0, style=solid];
m1_1012 -> m1_1013  [key=0, style=solid];
m1_1012 -> m1_255  [key=2, style=dotted];
m1_1014 -> m1_1015  [key=0, style=solid];
m1_1014 -> m1_648  [key=2, style=dotted];
m1_1015 -> m1_12  [key=2, style=dotted];
m1_1015 -> m1_1016  [key=0, style=solid];
m1_1015 -> m1_1017  [key=2, style=dotted];
m1_1016 -> m1_1005  [key=0, style=bold, color=blue];
m1_842 -> m1_843  [key=0, style=solid];
m1_843 -> m1_845  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_843 -> m1_844  [key=0, style=solid];
m1_843 -> m1_117  [key=2, style=dotted];
m1_844 -> m1_842  [key=0, style=bold, color=blue];
m1_303 -> m1_304  [key=0, style=solid];
m1_304 -> m1_45  [key=2, style=dotted];
m1_304 -> m1_305  [key=0, style=solid];
m1_304 -> m1_306  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_304 -> m1_307  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_305 -> m1_306  [key=0, style=solid];
m1_305 -> m1_231  [key=2, style=dotted];
m1_306 -> m1_307  [key=0, style=solid];
m1_306 -> m1_231  [key=2, style=dotted];
m1_307 -> m1_308  [key=0, style=solid];
m1_307 -> m1_48  [key=2, style=dotted];
m1_308 -> m1_12  [key=2, style=dotted];
m1_308 -> m1_309  [key=0, style=solid];
m1_309 -> m1_303  [key=0, style=bold, color=blue];
m1_1082 -> m1_1083  [key=0, style=solid];
m1_1084 -> m1_13  [key=2, style=dotted];
m1_1084 -> m1_1085  [key=0, style=solid];
m1_1084 -> m1_1087  [key=2, style=dotted];
m1_1085 -> m1_13  [key=2, style=dotted];
m1_1085 -> m1_1086  [key=0, style=solid];
m1_1085 -> m1_1075  [key=2, style=dotted];
m1_1083 -> m1_1084  [key=0, style=solid];
m1_1083 -> m1_1085  [key=1, style=dashed, color=darkseagreen4, label=v];
m1_1083 -> m1_1087  [key=2, style=dotted];
m1_1083 -> m1_1074  [key=2, style=dotted];
m1_1086 -> m1_1082  [key=0, style=bold, color=blue];
m1_693 -> m1_694  [key=0, style=solid];
m1_694 -> m1_696  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_694 -> m1_117  [key=2, style=dotted];
m1_694 -> m1_695  [key=0, style=solid];
m1_695 -> m1_693  [key=0, style=bold, color=blue];
m1_642 -> m1_643  [key=0, style=solid];
m1_643 -> m1_409  [key=2, style=dotted];
m1_643 -> m1_644  [key=0, style=solid];
m1_643 -> m1_645  [key=1, style=dashed, color=darkseagreen4, label=p1];
m1_644 -> m1_409  [key=2, style=dotted];
m1_644 -> m1_645  [key=0, style=solid];
m1_645 -> m1_410  [key=2, style=dotted];
m1_645 -> m1_646  [key=0, style=solid];
m1_646 -> m1_648  [key=2, style=dotted];
m1_646 -> m1_647  [key=0, style=solid];
m1_647 -> m1_642  [key=0, style=bold, color=blue];
m1_536 -> m1_537  [key=0, style=solid];
m1_537 -> m1_539  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_537 -> m1_117  [key=2, style=dotted];
m1_537 -> m1_538  [key=0, style=solid];
m1_538 -> m1_536  [key=0, style=bold, color=blue];
m1_508 -> m1_509  [key=0, style=solid];
m1_511 -> m1_13  [key=2, style=dotted];
m1_511 -> m1_512  [key=0, style=solid];
m1_513 -> m1_13  [key=2, style=dotted];
m1_513 -> m1_514  [key=0, style=solid];
m1_510 -> m1_511  [key=0, style=solid];
m1_510 -> m1_513  [key=1, style=dashed, color=darkseagreen4, label=l];
m1_510 -> m1_499  [key=2, style=dotted];
m1_510 -> m1_512  [key=1, style=dashed, color=darkseagreen4, label=l];
m1_512 -> m1_513  [key=0, style=solid];
m1_512 -> m1_515  [key=2, style=dotted];
m1_509 -> m1_409  [key=2, style=dotted];
m1_509 -> m1_510  [key=0, style=solid];
m1_514 -> m1_508  [key=0, style=bold, color=blue];
m1_564 -> m1_565  [key=0, style=solid];
m1_578 -> m1_13  [key=2, style=dotted];
m1_578 -> m1_579  [key=0, style=solid];
m1_570 -> m1_13  [key=2, style=dotted];
m1_570 -> m1_571  [key=0, style=solid];
m1_572 -> m1_13  [key=2, style=dotted];
m1_572 -> m1_573  [key=0, style=solid];
m1_576 -> m1_13  [key=2, style=dotted];
m1_576 -> m1_577  [key=0, style=solid];
m1_566 -> m1_578  [key=1, style=dashed, color=darkseagreen4, label=p2];
m1_566 -> m1_409  [key=2, style=dotted];
m1_566 -> m1_567  [key=0, style=solid];
m1_566 -> m1_574  [key=1, style=dashed, color=darkseagreen4, label=p2];
m1_566 -> m1_575  [key=1, style=dashed, color=darkseagreen4, label=p2];
m1_566 -> m1_577  [key=1, style=dashed, color=darkseagreen4, label=p2];
m1_577 -> m1_578  [key=0, style=solid];
m1_577 -> m1_500  [key=2, style=dotted];
m1_577 -> m1_257  [key=2, style=dotted];
m1_567 -> m1_570  [key=1, style=dashed, color=darkseagreen4, label=l];
m1_567 -> m1_572  [key=1, style=dashed, color=darkseagreen4, label=l];
m1_567 -> m1_576  [key=1, style=dashed, color=darkseagreen4, label=l];
m1_567 -> m1_577  [key=1, style=dashed, color=darkseagreen4, label=l];
m1_567 -> m1_568  [key=0, style=solid];
m1_567 -> m1_410  [key=2, style=dotted];
m1_567 -> m1_569  [key=1, style=dashed, color=darkseagreen4, label=l];
m1_567 -> m1_571  [key=1, style=dashed, color=darkseagreen4, label=l];
m1_567 -> m1_573  [key=1, style=dashed, color=darkseagreen4, label=l];
m1_567 -> m1_574  [key=1, style=dashed, color=darkseagreen4, label=l];
m1_567 -> m1_575  [key=1, style=dashed, color=darkseagreen4, label=l];
m1_569 -> m1_570  [key=0, style=solid];
m1_569 -> m1_580  [key=2, style=dotted];
m1_571 -> m1_572  [key=0, style=solid];
m1_571 -> m1_580  [key=2, style=dotted];
m1_573 -> m1_574  [key=0, style=solid];
m1_573 -> m1_500  [key=2, style=dotted];
m1_573 -> m1_257  [key=2, style=dotted];
m1_575 -> m1_576  [key=0, style=solid];
m1_575 -> m1_580  [key=2, style=dotted];
m1_565 -> m1_409  [key=2, style=dotted];
m1_565 -> m1_566  [key=0, style=solid];
m1_565 -> m1_567  [key=1, style=dashed, color=darkseagreen4, label=p1];
m1_565 -> m1_571  [key=1, style=dashed, color=darkseagreen4, label=p1];
m1_565 -> m1_573  [key=1, style=dashed, color=darkseagreen4, label=p1];
m1_568 -> m1_409  [key=2, style=dotted];
m1_568 -> m1_569  [key=0, style=solid];
m1_574 -> m1_575  [key=0, style=solid];
m1_574 -> m1_256  [key=2, style=dotted];
m1_574 -> m1_500  [key=2, style=dotted];
m1_579 -> m1_564  [key=0, style=bold, color=blue];
m1_661 -> m1_662  [key=0, style=solid];
m1_664 -> m1_13  [key=2, style=dotted];
m1_664 -> m1_665  [key=0, style=solid];
m1_664 -> m1_667  [key=2, style=dotted];
m1_665 -> m1_13  [key=2, style=dotted];
m1_665 -> m1_666  [key=0, style=solid];
m1_665 -> m1_409  [key=2, style=dotted];
m1_665 -> m1_667  [key=2, style=dotted];
m1_662 -> m1_664  [key=1, style=dashed, color=darkseagreen4, label=p];
m1_662 -> m1_409  [key=2, style=dotted];
m1_662 -> m1_663  [key=0, style=solid];
m1_663 -> m1_664  [key=0, style=solid];
m1_663 -> m1_665  [key=1, style=dashed, color=darkseagreen4, label=l];
m1_663 -> m1_499  [key=2, style=dotted];
m1_666 -> m1_661  [key=0, style=bold, color=blue];
m1_581 -> m1_582  [key=0, style=solid];
m1_587 -> m1_13  [key=2, style=dotted];
m1_587 -> m1_588  [key=0, style=solid];
m1_589 -> m1_13  [key=2, style=dotted];
m1_589 -> m1_590  [key=0, style=solid];
m1_584 -> m1_587  [key=1, style=dashed, color=darkseagreen4, label=l];
m1_584 -> m1_589  [key=1, style=dashed, color=darkseagreen4, label=l];
m1_584 -> m1_585  [key=0, style=solid];
m1_584 -> m1_410  [key=2, style=dotted];
m1_584 -> m1_586  [key=1, style=dashed, color=darkseagreen4, label=l];
m1_584 -> m1_588  [key=1, style=dashed, color=darkseagreen4, label=l];
m1_586 -> m1_587  [key=0, style=solid];
m1_586 -> m1_580  [key=2, style=dotted];
m1_588 -> m1_589  [key=0, style=solid];
m1_588 -> m1_580  [key=2, style=dotted];
m1_582 -> m1_409  [key=2, style=dotted];
m1_582 -> m1_584  [key=1, style=dashed, color=darkseagreen4, label=p1];
m1_582 -> m1_586  [key=1, style=dashed, color=darkseagreen4, label=p1];
m1_582 -> m1_583  [key=0, style=solid];
m1_583 -> m1_409  [key=2, style=dotted];
m1_583 -> m1_584  [key=0, style=solid];
m1_583 -> m1_588  [key=1, style=dashed, color=darkseagreen4, label=p2];
m1_585 -> m1_586  [key=0, style=solid];
m1_585 -> m1_591  [key=2, style=dotted];
m1_590 -> m1_581  [key=0, style=bold, color=blue];
m1_862 -> m1_863  [key=0, style=solid];
m1_870 -> m1_13  [key=2, style=dotted];
m1_870 -> m1_871  [key=0, style=solid];
m1_869 -> m1_13  [key=2, style=dotted];
m1_869 -> m1_870  [key=0, style=solid];
m1_863 -> m1_45  [key=2, style=dotted];
m1_863 -> m1_870  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_863 -> m1_864  [key=0, style=solid];
m1_863 -> m1_865  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_868 -> m1_870  [key=1, style=dashed, color=darkseagreen4, label=p];
m1_868 -> m1_869  [key=0, style=solid];
m1_864 -> m1_865  [key=0, style=solid];
m1_864 -> m1_873  [key=1, style=dashed, color=darkseagreen4, label="System.ComponentModel.AddingNewEventArgs"];
m1_865 -> m1_866  [key=0, style=solid];
m1_866 -> m1_868  [key=1, style=dashed, color=darkseagreen4, label=newObject];
m1_866 -> m1_867  [key=0, style=solid];
m1_866 -> m1_861  [key=2, style=dotted];
m1_867 -> m1_868  [key=0, style=solid];
m1_867 -> m1_648  [key=2, style=dotted];
m1_871 -> m1_862  [key=0, style=bold, color=blue];
m1_764 -> m1_765  [key=0, style=solid];
m1_771 -> m1_13  [key=2, style=dotted];
m1_771 -> m1_772  [key=0, style=solid];
m1_770 -> m1_13  [key=2, style=dotted];
m1_770 -> m1_771  [key=0, style=solid];
m1_766 -> m1_771  [key=1, style=dashed, color=darkseagreen4, label=p2];
m1_766 -> m1_409  [key=2, style=dotted];
m1_766 -> m1_767  [key=0, style=solid];
m1_767 -> m1_771  [key=1, style=dashed, color=darkseagreen4, label=l];
m1_767 -> m1_770  [key=1, style=dashed, color=darkseagreen4, label=l];
m1_767 -> m1_768  [key=0, style=solid];
m1_767 -> m1_410  [key=2, style=dotted];
m1_767 -> m1_769  [key=1, style=dashed, color=darkseagreen4, label=l];
m1_768 -> m1_770  [key=1, style=dashed, color=darkseagreen4, label=p3];
m1_768 -> m1_409  [key=2, style=dotted];
m1_768 -> m1_769  [key=0, style=solid];
m1_769 -> m1_770  [key=0, style=solid];
m1_765 -> m1_409  [key=2, style=dotted];
m1_765 -> m1_766  [key=0, style=solid];
m1_765 -> m1_767  [key=1, style=dashed, color=darkseagreen4, label=p1];
m1_772 -> m1_764  [key=0, style=bold, color=blue];
m1_1095 -> m1_1096  [key=0, style=solid];
m1_1096 -> m1_409  [key=2, style=dotted];
m1_1096 -> m1_410  [key=2, style=dotted];
m1_1096 -> m1_1097  [key=0, style=solid];
m1_1096 -> m1_1108  [key=2, style=dotted];
m1_1096 -> m1_1109  [key=2, style=dotted];
m1_1096 -> m1_1099  [key=1, style=dashed, color=darkseagreen4, label=o1];
m1_1096 -> m1_1101  [key=1, style=dashed, color=darkseagreen4, label=o1];
m1_1096 -> m1_1103  [key=1, style=dashed, color=darkseagreen4, label=o1];
m1_1096 -> m1_1105  [key=1, style=dashed, color=darkseagreen4, label=o1];
m1_1096 -> m1_1106  [key=1, style=dashed, color=darkseagreen4, label=o1];
m1_1098 -> m1_409  [key=2, style=dotted];
m1_1098 -> m1_410  [key=2, style=dotted];
m1_1098 -> m1_1099  [key=0, style=solid];
m1_1098 -> m1_1108  [key=2, style=dotted];
m1_1098 -> m1_1109  [key=2, style=dotted];
m1_1100 -> m1_409  [key=2, style=dotted];
m1_1100 -> m1_410  [key=2, style=dotted];
m1_1100 -> m1_1101  [key=0, style=solid];
m1_1100 -> m1_1108  [key=2, style=dotted];
m1_1100 -> m1_1109  [key=2, style=dotted];
m1_1102 -> m1_409  [key=2, style=dotted];
m1_1102 -> m1_410  [key=2, style=dotted];
m1_1102 -> m1_1103  [key=0, style=solid];
m1_1102 -> m1_1108  [key=2, style=dotted];
m1_1102 -> m1_1109  [key=2, style=dotted];
m1_1104 -> m1_409  [key=2, style=dotted];
m1_1104 -> m1_410  [key=2, style=dotted];
m1_1104 -> m1_1105  [key=0, style=solid];
m1_1104 -> m1_1108  [key=2, style=dotted];
m1_1097 -> m1_256  [key=2, style=dotted];
m1_1097 -> m1_1098  [key=0, style=solid];
m1_1097 -> m1_1110  [key=2, style=dotted];
m1_1099 -> m1_256  [key=2, style=dotted];
m1_1099 -> m1_1100  [key=0, style=solid];
m1_1099 -> m1_1110  [key=2, style=dotted];
m1_1101 -> m1_257  [key=2, style=dotted];
m1_1101 -> m1_1102  [key=0, style=solid];
m1_1101 -> m1_1110  [key=2, style=dotted];
m1_1103 -> m1_257  [key=2, style=dotted];
m1_1103 -> m1_1104  [key=0, style=solid];
m1_1103 -> m1_1110  [key=2, style=dotted];
m1_1105 -> m1_257  [key=2, style=dotted];
m1_1105 -> m1_1106  [key=0, style=solid];
m1_1105 -> m1_1110  [key=2, style=dotted];
m1_1106 -> m1_257  [key=2, style=dotted];
m1_1106 -> m1_1107  [key=0, style=solid];
m1_1106 -> m1_1110  [key=2, style=dotted];
m1_1107 -> m1_1095  [key=0, style=bold, color=blue];
m1_1068 -> m1_1069  [key=0, style=solid];
m1_1070 -> m1_13  [key=2, style=dotted];
m1_1070 -> m1_1071  [key=0, style=solid];
m1_1070 -> m1_1073  [key=2, style=dotted];
m1_1071 -> m1_13  [key=2, style=dotted];
m1_1071 -> m1_1072  [key=0, style=solid];
m1_1071 -> m1_1075  [key=2, style=dotted];
m1_1069 -> m1_1070  [key=0, style=solid];
m1_1069 -> m1_1071  [key=1, style=dashed, color=darkseagreen4, label=v];
m1_1069 -> m1_1073  [key=2, style=dotted];
m1_1069 -> m1_1074  [key=2, style=dotted];
m1_1072 -> m1_1068  [key=0, style=bold, color=blue];
m1_821 -> m1_822  [key=0, style=solid];
m1_822 -> m1_824  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_822 -> m1_823  [key=0, style=solid];
m1_822 -> m1_117  [key=2, style=dotted];
m1_823 -> m1_821  [key=0, style=bold, color=blue];
m1_773 -> m1_774  [key=0, style=solid];
m1_774 -> m1_776  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_774 -> m1_117  [key=2, style=dotted];
m1_774 -> m1_775  [key=0, style=solid];
m1_775 -> m1_773  [key=0, style=bold, color=blue];
m1_54 -> m1_13  [key=2, style=dotted];
m1_54 -> m1_55  [key=0, style=solid];
m1_55 -> m1_49  [key=0, style=bold, color=blue];
m1_1186 -> m1_1187  [key=0, style=solid];
m1_1190 -> m1_13  [key=2, style=dotted];
m1_1190 -> m1_1191  [key=0, style=solid];
m1_1188 -> m1_28  [key=2, style=dotted];
m1_1188 -> m1_1189  [key=0, style=solid];
m1_1188 -> m1_1193  [key=2, style=dotted];
m1_1188 -> m1_1194  [key=2, style=dotted];
m1_1188 -> m1_1174  [key=2, style=dotted];
m1_1189 -> m1_1190  [key=0, style=solid];
m1_1189 -> m1_1195  [key=2, style=dotted];
m1_1187 -> m1_1188  [key=0, style=solid];
m1_1187 -> m1_1189  [key=1, style=dashed, color=darkseagreen4, label=p];
m1_1187 -> m1_1192  [key=2, style=dotted];
m1_1191 -> m1_1186  [key=0, style=bold, color=blue];
m1_341 -> m1_342  [key=0, style=solid];
m1_347 -> m1_13  [key=2, style=dotted];
m1_347 -> m1_348  [key=0, style=solid];
m1_348 -> m1_13  [key=2, style=dotted];
m1_348 -> m1_349  [key=0, style=solid];
m1_344 -> m1_347  [key=1, style=dashed, color=darkseagreen4, label=name];
m1_344 -> m1_345  [key=0, style=solid];
m1_346 -> m1_347  [key=0, style=solid];
m1_346 -> m1_348  [key=1, style=dashed, color=darkseagreen4, label=smallest];
m1_343 -> m1_344  [key=0, style=solid];
m1_343 -> m1_277  [key=2, style=dotted];
m1_343 -> m1_345  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_345 -> m1_346  [key=0, style=solid];
m1_342 -> m1_343  [key=0, style=solid];
m1_349 -> m1_341  [key=0, style=bold, color=blue];
m1_612 -> m1_613  [key=0, style=solid];
m1_619 -> m1_13  [key=2, style=dotted];
m1_619 -> m1_620  [key=0, style=solid];
m1_618 -> m1_13  [key=2, style=dotted];
m1_618 -> m1_619  [key=0, style=solid];
m1_614 -> m1_619  [key=1, style=dashed, color=darkseagreen4, label=p2];
m1_614 -> m1_409  [key=2, style=dotted];
m1_614 -> m1_615  [key=0, style=solid];
m1_615 -> m1_619  [key=1, style=dashed, color=darkseagreen4, label=l];
m1_615 -> m1_618  [key=1, style=dashed, color=darkseagreen4, label=l];
m1_615 -> m1_616  [key=0, style=solid];
m1_615 -> m1_410  [key=2, style=dotted];
m1_615 -> m1_617  [key=1, style=dashed, color=darkseagreen4, label=l];
m1_616 -> m1_618  [key=1, style=dashed, color=darkseagreen4, label=p3];
m1_616 -> m1_409  [key=2, style=dotted];
m1_616 -> m1_617  [key=0, style=solid];
m1_617 -> m1_618  [key=0, style=solid];
m1_613 -> m1_409  [key=2, style=dotted];
m1_613 -> m1_614  [key=0, style=solid];
m1_613 -> m1_615  [key=1, style=dashed, color=darkseagreen4, label=p1];
m1_620 -> m1_612  [key=0, style=bold, color=blue];
m1_804 -> m1_805  [key=0, style=solid];
m1_806 -> m1_13  [key=2, style=dotted];
m1_806 -> m1_807  [key=0, style=solid];
m1_805 -> m1_45  [key=2, style=dotted];
m1_805 -> m1_806  [key=0, style=solid];
m1_807 -> m1_804  [key=0, style=bold, color=blue];
m1_655 -> m1_656  [key=0, style=solid];
m1_656 -> m1_409  [key=2, style=dotted];
m1_656 -> m1_657  [key=0, style=solid];
m1_656 -> m1_658  [key=1, style=dashed, color=darkseagreen4, label=p];
m1_659 -> m1_409  [key=2, style=dotted];
m1_659 -> m1_164  [key=2, style=dotted];
m1_659 -> m1_257  [key=2, style=dotted];
m1_659 -> m1_660  [key=0, style=solid];
m1_658 -> m1_256  [key=2, style=dotted];
m1_658 -> m1_164  [key=2, style=dotted];
m1_658 -> m1_659  [key=0, style=solid];
m1_657 -> m1_499  [key=2, style=dotted];
m1_657 -> m1_659  [key=1, style=dashed, color=darkseagreen4, label=l];
m1_657 -> m1_658  [key=0, style=solid];
m1_660 -> m1_655  [key=0, style=bold, color=blue];
m1_148 -> m1_149  [key=0, style=solid];
m1_152 -> m1_13  [key=2, style=dotted];
m1_152 -> m1_153  [key=0, style=solid];
m1_152 -> m1_70  [key=2, style=dotted];
m1_152 -> m1_71  [key=2, style=dotted];
m1_154 -> m1_13  [key=2, style=dotted];
m1_154 -> m1_155  [key=0, style=solid];
m1_156 -> m1_13  [key=2, style=dotted];
m1_156 -> m1_157  [key=0, style=solid];
m1_158 -> m1_13  [key=2, style=dotted];
m1_158 -> m1_159  [key=0, style=solid];
m1_160 -> m1_13  [key=2, style=dotted];
m1_160 -> m1_161  [key=0, style=solid];
m1_162 -> m1_13  [key=2, style=dotted];
m1_162 -> m1_163  [key=0, style=solid];
m1_150 -> m1_45  [key=2, style=dotted];
m1_150 -> m1_152  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_150 -> m1_151  [key=0, style=solid];
m1_150 -> m1_153  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_150 -> m1_155  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_150 -> m1_157  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_150 -> m1_159  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_150 -> m1_161  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_151 -> m1_152  [key=0, style=solid];
m1_151 -> m1_69  [key=2, style=dotted];
m1_153 -> m1_154  [key=0, style=solid];
m1_153 -> m1_68  [key=2, style=dotted];
m1_153 -> m1_112  [key=2, style=dotted];
m1_153 -> m1_164  [key=2, style=dotted];
m1_155 -> m1_156  [key=0, style=solid];
m1_155 -> m1_112  [key=2, style=dotted];
m1_155 -> m1_164  [key=2, style=dotted];
m1_157 -> m1_158  [key=0, style=solid];
m1_157 -> m1_68  [key=2, style=dotted];
m1_157 -> m1_112  [key=2, style=dotted];
m1_157 -> m1_164  [key=2, style=dotted];
m1_159 -> m1_160  [key=0, style=solid];
m1_159 -> m1_68  [key=2, style=dotted];
m1_159 -> m1_112  [key=2, style=dotted];
m1_159 -> m1_164  [key=2, style=dotted];
m1_161 -> m1_162  [key=0, style=solid];
m1_161 -> m1_164  [key=2, style=dotted];
m1_149 -> m1_68  [key=2, style=dotted];
m1_149 -> m1_150  [key=0, style=solid];
m1_149 -> m1_151  [key=1, style=dashed, color=darkseagreen4, label=v];
m1_149 -> m1_155  [key=1, style=dashed, color=darkseagreen4, label=v];
m1_163 -> m1_148  [key=0, style=bold, color=blue];
m1_297 -> m1_298  [key=0, style=solid];
m1_298 -> m1_117  [key=2, style=dotted];
m1_298 -> m1_300  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_298 -> m1_299  [key=0, style=solid];
m1_299 -> m1_297  [key=0, style=bold, color=blue];
m1_369 -> m1_370  [key=0, style=solid];
m1_370 -> m1_45  [key=2, style=dotted];
m1_370 -> m1_371  [key=0, style=solid];
m1_370 -> m1_372  [key=1, style=dashed, color=darkseagreen4, label=moss];
m1_370 -> m1_373  [key=1, style=dashed, color=darkseagreen4, label=moss];
m1_370 -> m1_374  [key=1, style=dashed, color=darkseagreen4, label=moss];
m1_370 -> m1_375  [key=1, style=dashed, color=darkseagreen4, label=moss];
m1_370 -> m1_376  [key=1, style=dashed, color=darkseagreen4, label=moss];
m1_377 -> m1_45  [key=2, style=dotted];
m1_377 -> m1_378  [key=0, style=solid];
m1_377 -> m1_379  [key=1, style=dashed, color=darkseagreen4, label=jen];
m1_377 -> m1_380  [key=1, style=dashed, color=darkseagreen4, label=jen];
m1_377 -> m1_381  [key=1, style=dashed, color=darkseagreen4, label=jen];
m1_377 -> m1_382  [key=1, style=dashed, color=darkseagreen4, label=jen];
m1_377 -> m1_383  [key=1, style=dashed, color=darkseagreen4, label=jen];
m1_371 -> m1_372  [key=0, style=solid];
m1_371 -> m1_9  [key=2, style=dotted];
m1_372 -> m1_373  [key=0, style=solid];
m1_372 -> m1_9  [key=2, style=dotted];
m1_373 -> m1_374  [key=0, style=solid];
m1_373 -> m1_385  [key=2, style=dotted];
m1_373 -> m1_386  [key=2, style=dotted];
m1_374 -> m1_375  [key=0, style=solid];
m1_374 -> m1_9  [key=2, style=dotted];
m1_375 -> m1_376  [key=0, style=solid];
m1_375 -> m1_9  [key=2, style=dotted];
m1_376 -> m1_377  [key=0, style=solid];
m1_376 -> m1_48  [key=2, style=dotted];
m1_376 -> m1_12  [key=2, style=dotted];
m1_378 -> m1_379  [key=0, style=solid];
m1_379 -> m1_380  [key=0, style=solid];
m1_380 -> m1_381  [key=0, style=solid];
m1_380 -> m1_386  [key=2, style=dotted];
m1_381 -> m1_382  [key=0, style=solid];
m1_382 -> m1_383  [key=0, style=solid];
m1_383 -> m1_384  [key=0, style=solid];
m1_383 -> m1_48  [key=2, style=dotted];
m1_383 -> m1_12  [key=2, style=dotted];
m1_384 -> m1_369  [key=0, style=bold, color=blue];
m1_387 -> m1_388  [key=0, style=solid];
m1_392 -> m1_13  [key=2, style=dotted];
m1_392 -> m1_393  [key=0, style=solid];
m1_396 -> m1_13  [key=2, style=dotted];
m1_396 -> m1_397  [key=0, style=solid];
m1_393 -> m1_13  [key=2, style=dotted];
m1_393 -> m1_394  [key=0, style=solid];
m1_399 -> m1_13  [key=2, style=dotted];
m1_399 -> m1_400  [key=0, style=solid];
m1_404 -> m1_13  [key=2, style=dotted];
m1_404 -> m1_405  [key=0, style=solid];
m1_401 -> m1_13  [key=2, style=dotted];
m1_401 -> m1_402  [key=0, style=solid];
m1_401 -> m1_412  [key=2, style=dotted];
m1_401 -> m1_71  [key=2, style=dotted];
m1_397 -> m1_13  [key=2, style=dotted];
m1_397 -> m1_398  [key=0, style=solid];
m1_398 -> m1_13  [key=2, style=dotted];
m1_398 -> m1_399  [key=0, style=solid];
m1_400 -> m1_13  [key=2, style=dotted];
m1_400 -> m1_401  [key=0, style=solid];
m1_405 -> m1_13  [key=2, style=dotted];
m1_405 -> m1_406  [key=0, style=solid];
m1_406 -> m1_13  [key=2, style=dotted];
m1_406 -> m1_407  [key=0, style=solid];
m1_407 -> m1_13  [key=2, style=dotted];
m1_407 -> m1_408  [key=0, style=solid];
m1_388 -> m1_392  [key=1, style=dashed, color=darkseagreen4, label=p1];
m1_388 -> m1_396  [key=1, style=dashed, color=darkseagreen4, label=p1];
m1_388 -> m1_389  [key=0, style=solid];
m1_388 -> m1_409  [key=2, style=dotted];
m1_388 -> m1_390  [key=1, style=dashed, color=darkseagreen4, label=p1];
m1_388 -> m1_395  [key=1, style=dashed, color=darkseagreen4, label=p1];
m1_391 -> m1_392  [key=0, style=solid];
m1_391 -> m1_393  [key=1, style=dashed, color=darkseagreen4, label=l];
m1_391 -> m1_399  [key=1, style=dashed, color=darkseagreen4, label=l];
m1_391 -> m1_397  [key=1, style=dashed, color=darkseagreen4, label=l];
m1_391 -> m1_398  [key=1, style=dashed, color=darkseagreen4, label=l];
m1_391 -> m1_400  [key=1, style=dashed, color=darkseagreen4, label=l];
m1_391 -> m1_405  [key=1, style=dashed, color=darkseagreen4, label=l];
m1_391 -> m1_406  [key=1, style=dashed, color=darkseagreen4, label=l];
m1_391 -> m1_407  [key=1, style=dashed, color=darkseagreen4, label=l];
m1_395 -> m1_396  [key=0, style=solid];
m1_395 -> m1_411  [key=2, style=dotted];
m1_389 -> m1_393  [key=1, style=dashed, color=darkseagreen4, label=p2];
m1_389 -> m1_399  [key=1, style=dashed, color=darkseagreen4, label=p2];
m1_389 -> m1_404  [key=1, style=dashed, color=darkseagreen4, label=p2];
m1_389 -> m1_390  [key=0, style=solid];
m1_389 -> m1_409  [key=2, style=dotted];
m1_389 -> m1_403  [key=1, style=dashed, color=darkseagreen4, label=p2];
m1_394 -> m1_397  [key=1, style=dashed, color=darkseagreen4, label=p3];
m1_394 -> m1_398  [key=1, style=dashed, color=darkseagreen4, label=p3];
m1_394 -> m1_406  [key=1, style=dashed, color=darkseagreen4, label=p3];
m1_394 -> m1_395  [key=0, style=solid];
m1_394 -> m1_409  [key=2, style=dotted];
m1_403 -> m1_404  [key=0, style=solid];
m1_403 -> m1_411  [key=2, style=dotted];
m1_390 -> m1_401  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_390 -> m1_391  [key=0, style=solid];
m1_390 -> m1_410  [key=2, style=dotted];
m1_402 -> m1_405  [key=1, style=dashed, color=darkseagreen4, label=p4];
m1_402 -> m1_407  [key=1, style=dashed, color=darkseagreen4, label=p4];
m1_402 -> m1_403  [key=0, style=solid];
m1_402 -> m1_409  [key=2, style=dotted];
m1_408 -> m1_387  [key=0, style=bold, color=blue];
m1_684 -> m1_685  [key=0, style=solid];
m1_690 -> m1_13  [key=2, style=dotted];
m1_690 -> m1_691  [key=0, style=solid];
m1_691 -> m1_13  [key=2, style=dotted];
m1_691 -> m1_692  [key=0, style=solid];
m1_687 -> m1_690  [key=1, style=dashed, color=darkseagreen4, label=l];
m1_687 -> m1_691  [key=1, style=dashed, color=darkseagreen4, label=l];
m1_687 -> m1_688  [key=0, style=solid];
m1_687 -> m1_410  [key=2, style=dotted];
m1_687 -> m1_689  [key=1, style=dashed, color=darkseagreen4, label=l];
m1_689 -> m1_690  [key=0, style=solid];
m1_689 -> m1_32  [key=2, style=dotted];
m1_688 -> m1_691  [key=1, style=dashed, color=darkseagreen4, label=p3];
m1_688 -> m1_409  [key=2, style=dotted];
m1_688 -> m1_689  [key=0, style=solid];
m1_685 -> m1_409  [key=2, style=dotted];
m1_685 -> m1_687  [key=1, style=dashed, color=darkseagreen4, label=p1];
m1_685 -> m1_686  [key=0, style=solid];
m1_686 -> m1_409  [key=2, style=dotted];
m1_686 -> m1_687  [key=0, style=solid];
m1_692 -> m1_684  [key=0, style=bold, color=blue];
m1_270 -> m1_271  [key=0, style=solid];
m1_271 -> m1_117  [key=2, style=dotted];
m1_271 -> m1_272  [key=0, style=solid];
m1_271 -> m1_273  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_272 -> m1_270  [key=0, style=bold, color=blue];
m1_999 -> m1_1000  [key=0, style=solid];
m1_1000 -> m1_117  [key=2, style=dotted];
m1_1000 -> m1_1002  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_1000 -> m1_1001  [key=0, style=solid];
m1_1001 -> m1_999  [key=0, style=bold, color=blue];
m1_854 -> m1_855  [key=0, style=solid];
m1_855 -> m1_857  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_855 -> m1_856  [key=0, style=solid];
m1_855 -> m1_117  [key=2, style=dotted];
m1_856 -> m1_854  [key=0, style=bold, color=blue];
m1_850 -> m1_851  [key=0, style=solid];
m1_852 -> m1_13  [key=2, style=dotted];
m1_852 -> m1_853  [key=0, style=solid];
m1_851 -> m1_45  [key=2, style=dotted];
m1_851 -> m1_852  [key=0, style=solid];
m1_853 -> m1_850  [key=0, style=bold, color=blue];
m1_982 -> m1_983  [key=0, style=solid];
m1_983 -> m1_117  [key=2, style=dotted];
m1_983 -> m1_984  [key=0, style=solid];
m1_983 -> m1_985  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_984 -> m1_982  [key=0, style=bold, color=blue];
m1_286 -> m1_287  [key=0, style=solid];
m1_290 -> m1_13  [key=2, style=dotted];
m1_290 -> m1_291  [key=0, style=solid];
m1_294 -> m1_13  [key=2, style=dotted];
m1_294 -> m1_295  [key=0, style=solid];
m1_289 -> m1_290  [key=0, style=solid];
m1_289 -> m1_296  [key=2, style=dotted];
m1_291 -> m1_292  [key=0, style=solid];
m1_293 -> m1_294  [key=0, style=solid];
m1_293 -> m1_296  [key=2, style=dotted];
m1_288 -> m1_289  [key=0, style=solid];
m1_288 -> m1_284  [key=2, style=dotted];
m1_292 -> m1_293  [key=0, style=solid];
m1_292 -> m1_284  [key=2, style=dotted];
m1_287 -> m1_288  [key=0, style=solid];
m1_295 -> m1_286  [key=0, style=bold, color=blue];
m1_462 -> m1_463  [key=0, style=solid];
m1_469 -> m1_13  [key=2, style=dotted];
m1_469 -> m1_470  [key=0, style=solid];
m1_475 -> m1_13  [key=2, style=dotted];
m1_475 -> m1_476  [key=0, style=solid];
m1_479 -> m1_13  [key=2, style=dotted];
m1_479 -> m1_480  [key=0, style=solid];
m1_483 -> m1_13  [key=2, style=dotted];
m1_483 -> m1_484  [key=0, style=solid];
m1_483 -> m1_90  [key=2, style=dotted];
m1_468 -> m1_13  [key=2, style=dotted];
m1_468 -> m1_469  [key=0, style=solid];
m1_470 -> m1_13  [key=2, style=dotted];
m1_470 -> m1_471  [key=0, style=solid];
m1_472 -> m1_13  [key=2, style=dotted];
m1_472 -> m1_473  [key=0, style=solid];
m1_474 -> m1_13  [key=2, style=dotted];
m1_474 -> m1_475  [key=0, style=solid];
m1_476 -> m1_13  [key=2, style=dotted];
m1_476 -> m1_477  [key=0, style=solid];
m1_478 -> m1_13  [key=2, style=dotted];
m1_478 -> m1_479  [key=0, style=solid];
m1_480 -> m1_13  [key=2, style=dotted];
m1_480 -> m1_481  [key=0, style=solid];
m1_482 -> m1_13  [key=2, style=dotted];
m1_482 -> m1_483  [key=0, style=solid];
m1_484 -> m1_13  [key=2, style=dotted];
m1_484 -> m1_485  [key=0, style=solid];
m1_486 -> m1_13  [key=2, style=dotted];
m1_486 -> m1_487  [key=0, style=solid];
m1_465 -> m1_45  [key=2, style=dotted];
m1_465 -> m1_469  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_465 -> m1_475  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_465 -> m1_479  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_465 -> m1_483  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_465 -> m1_466  [key=0, style=solid];
m1_465 -> m1_467  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_465 -> m1_471  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_465 -> m1_473  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_465 -> m1_477  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_465 -> m1_481  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_465 -> m1_485  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_467 -> m1_468  [key=0, style=solid];
m1_471 -> m1_472  [key=0, style=solid];
m1_473 -> m1_474  [key=0, style=solid];
m1_477 -> m1_478  [key=0, style=solid];
m1_481 -> m1_482  [key=0, style=solid];
m1_485 -> m1_486  [key=0, style=solid];
m1_464 -> m1_465  [key=0, style=solid];
m1_464 -> m1_466  [key=1, style=dashed, color=darkseagreen4, label=changedCount];
m1_466 -> m1_467  [key=0, style=solid];
m1_466 -> m1_490  [key=1, style=dashed, color=darkseagreen4, label="System.ComponentModel.PropertyChangedEventArgs"];
m1_466 -> m1_491  [key=1, style=dashed, color=darkseagreen4, label=changedCount];
m1_466 -> m1_466  [key=1, style=dashed, color=darkseagreen4, label=changedCount];
m1_466 -> m1_489  [key=1, style=dashed, color=darkseagreen4, label=object];
m1_463 -> m1_464  [key=0, style=solid];
m1_487 -> m1_462  [key=0, style=bold, color=blue];
m1_1196 -> m1_455  [key=1, style=dashed, color=darkseagreen4, label=changingCount];
m1_1197 -> m1_460  [key=1, style=dashed, color=darkseagreen4, label=changedCount];
m1_1198 -> m1_491  [key=1, style=dashed, color=darkseagreen4, label=changedCount];
m3_0 -> m3_1  [key=0, style=solid];
m3_1 -> m3_2  [key=0, style=solid];
m3_2 -> m3_3  [key=0, style=solid];
m3_2 -> m3_5  [key=2, style=dotted];
m3_3 -> m3_4  [key=0, style=solid];
m3_3 -> m3_5  [key=2, style=dotted];
m3_4 -> m3_0  [key=0, style=bold, color=blue];
m3_6 -> m3_7  [key=0, style=solid];
m3_7 -> m3_8  [key=0, style=solid];
m3_7 -> m3_9  [key=0, style=solid];
m3_8 -> m3_10  [key=0, style=solid];
m3_8 -> m3_11  [key=2, style=dotted];
m3_8 -> m3_12  [key=2, style=dotted];
m3_9 -> m3_10  [key=0, style=solid];
m3_9 -> m3_13  [key=2, style=dotted];
m3_10 -> m3_6  [key=0, style=bold, color=blue];
m3_14 -> m3_1  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonObjectContract"];
m3_14 -> m3_2  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonObjectContract"];
m3_14 -> m3_3  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonObjectContract"];
m3_14 -> m3_8  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonObjectContract"];
m3_14 -> m3_9  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonObjectContract"];
m4_16 -> m4_17  [key=0, style=solid];
m4_17 -> m4_18  [key=0, style=solid];
m4_17 -> m4_38  [key=2, style=dotted];
m4_17 -> m4_33  [key=1, style=dashed, color=darkseagreen4, label=specTests];
m4_17 -> m4_34  [key=1, style=dashed, color=darkseagreen4, label=specTests];
m4_17 -> m4_35  [key=1, style=dashed, color=darkseagreen4, label=specTests];
m4_18 -> m4_19  [key=0, style=solid];
m4_33 -> m4_34  [key=0, style=solid];
m4_34 -> m4_25  [key=0, style=solid];
m4_34 -> m4_45  [key=2, style=dotted];
m4_35 -> m4_36  [key=0, style=solid];
m4_35 -> m4_46  [key=2, style=dotted];
m4_35 -> m4_47  [key=2, style=dotted];
m4_35 -> m4_35  [key=1, style=dashed, color=darkseagreen4, label=specTests];
m4_35 -> m4_48  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_19 -> m4_20  [key=0, style=solid];
m4_19 -> m4_39  [key=2, style=dotted];
m4_20 -> m4_21  [key=0, style=solid];
m4_20 -> m4_40  [key=2, style=dotted];
m4_21 -> m4_22  [key=0, style=solid];
m4_21 -> m4_35  [key=0, style=solid];
m4_21 -> m4_27  [key=1, style=dashed, color=darkseagreen4, label=testFile];
m4_22 -> m4_23  [key=0, style=solid];
m4_22 -> m4_41  [key=2, style=dotted];
m4_27 -> m4_28  [key=0, style=solid];
m4_27 -> m4_44  [key=2, style=dotted];
m4_23 -> m4_24  [key=0, style=solid];
m4_23 -> m4_42  [key=2, style=dotted];
m4_24 -> m4_25  [key=0, style=solid];
m4_24 -> m4_21  [key=0, style=solid];
m4_24 -> m4_28  [key=1, style=dashed, color=darkseagreen4, label=testCase];
m4_24 -> m4_29  [key=1, style=dashed, color=darkseagreen4, label=testCase];
m4_25 -> m4_26  [key=0, style=solid];
m4_25 -> m4_24  [key=0, style=solid];
m4_25 -> m4_30  [key=1, style=dashed, color=darkseagreen4, label=test];
m4_25 -> m4_31  [key=1, style=dashed, color=darkseagreen4, label=test];
m4_25 -> m4_32  [key=1, style=dashed, color=darkseagreen4, label=test];
m4_28 -> m4_29  [key=0, style=solid];
m4_29 -> m4_30  [key=0, style=solid];
m4_26 -> m4_27  [key=0, style=solid];
m4_26 -> m4_43  [key=2, style=dotted];
m4_26 -> m4_28  [key=1, style=dashed, color=darkseagreen4, label=jsonSchemaSpecTest];
m4_26 -> m4_29  [key=1, style=dashed, color=darkseagreen4, label=jsonSchemaSpecTest];
m4_26 -> m4_30  [key=1, style=dashed, color=darkseagreen4, label=jsonSchemaSpecTest];
m4_26 -> m4_31  [key=1, style=dashed, color=darkseagreen4, label=jsonSchemaSpecTest];
m4_26 -> m4_32  [key=1, style=dashed, color=darkseagreen4, label=jsonSchemaSpecTest];
m4_26 -> m4_33  [key=1, style=dashed, color=darkseagreen4, label=jsonSchemaSpecTest];
m4_26 -> m4_34  [key=1, style=dashed, color=darkseagreen4, label=jsonSchemaSpecTest];
m4_30 -> m4_31  [key=0, style=solid];
m4_31 -> m4_32  [key=0, style=solid];
m4_32 -> m4_33  [key=0, style=solid];
m4_36 -> m4_37  [key=0, style=solid];
m4_37 -> m4_16  [key=0, style=bold, color=blue];
m4_3 -> m4_4  [key=0, style=solid];
m4_3 -> m4_6  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTest"];
m4_3 -> m4_8  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTest"];
m4_4 -> m4_5  [key=0, style=solid];
m4_4 -> m4_10  [key=2, style=dotted];
m4_4 -> m4_11  [key=2, style=dotted];
m4_4 -> m4_6  [key=1, style=dashed, color=darkseagreen4, label=s];
m4_6 -> m4_7  [key=0, style=solid];
m4_6 -> m4_12  [key=2, style=dotted];
m4_6 -> m4_8  [key=1, style=dashed, color=darkseagreen4, label=v];
m4_8 -> m4_9  [key=0, style=solid];
m4_8 -> m4_14  [key=2, style=dotted];
m4_8 -> m4_15  [key=2, style=dotted];
m4_5 -> m4_6  [key=0, style=solid];
m4_7 -> m4_8  [key=0, style=solid];
m4_7 -> m4_13  [key=2, style=dotted];
m4_9 -> m4_3  [key=0, style=bold, color=blue];
m4_48 -> m4_49  [key=0, style=solid];
m4_49 -> m4_50  [key=0, style=solid];
m4_50 -> m4_48  [key=0, style=bold, color=blue];
m4_0 -> m4_1  [key=0, style=solid];
m4_1 -> m4_2  [key=0, style=solid];
m4_2 -> m4_0  [key=0, style=bold, color=blue];
m4_51 -> m4_1  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Schema.JsonSchemaSpecTest"];
m5_20 -> m5_21  [key=0, style=solid];
m5_20 -> m5_22  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.Emit.ILGenerator"];
m5_20 -> m5_23  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.Emit.ILGenerator"];
m5_21 -> m5_22  [key=0, style=solid];
m5_21 -> m5_23  [key=0, style=solid];
m5_21 -> m5_7  [key=2, style=dotted];
m5_22 -> m5_24  [key=0, style=solid];
m5_22 -> m5_8  [key=2, style=dotted];
m5_23 -> m5_24  [key=0, style=solid];
m5_23 -> m5_8  [key=2, style=dotted];
m5_24 -> m5_20  [key=0, style=bold, color=blue];
m5_9 -> m5_10  [key=0, style=solid];
m5_9 -> m5_11  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.Emit.ILGenerator"];
m5_9 -> m5_12  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.Emit.ILGenerator"];
m5_10 -> m5_11  [key=0, style=solid];
m5_10 -> m5_14  [key=2, style=dotted];
m5_11 -> m5_12  [key=0, style=solid];
m5_11 -> m5_14  [key=2, style=dotted];
m5_12 -> m5_13  [key=0, style=solid];
m5_12 -> m5_6  [key=2, style=dotted];
m5_13 -> m5_9  [key=0, style=bold, color=blue];
m5_31 -> m5_32  [key=0, style=solid];
m5_32 -> m5_33  [key=0, style=solid];
m5_32 -> m5_6  [key=2, style=dotted];
m5_33 -> m5_31  [key=0, style=bold, color=blue];
m5_25 -> m5_26  [key=0, style=solid];
m5_25 -> m5_27  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.Emit.ILGenerator"];
m5_25 -> m5_28  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.Emit.ILGenerator"];
m5_26 -> m5_27  [key=0, style=solid];
m5_26 -> m5_28  [key=0, style=solid];
m5_27 -> m5_29  [key=0, style=solid];
m5_27 -> m5_30  [key=2, style=dotted];
m5_28 -> m5_29  [key=0, style=solid];
m5_28 -> m5_30  [key=2, style=dotted];
m5_29 -> m5_25  [key=0, style=bold, color=blue];
m5_15 -> m5_16  [key=0, style=solid];
m5_15 -> m5_17  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.Emit.ILGenerator"];
m5_15 -> m5_18  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.Emit.ILGenerator"];
m5_16 -> m5_17  [key=0, style=solid];
m5_16 -> m5_18  [key=0, style=solid];
m5_16 -> m5_7  [key=2, style=dotted];
m5_17 -> m5_19  [key=0, style=solid];
m5_17 -> m5_8  [key=2, style=dotted];
m5_18 -> m5_19  [key=0, style=solid];
m5_18 -> m5_8  [key=2, style=dotted];
m5_19 -> m5_15  [key=0, style=bold, color=blue];
m5_0 -> m5_1  [key=0, style=solid];
m5_0 -> m5_2  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m5_0 -> m5_3  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.Emit.ILGenerator"];
m5_0 -> m5_4  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.Emit.ILGenerator"];
m5_1 -> m5_2  [key=0, style=solid];
m5_1 -> m5_6  [key=2, style=dotted];
m5_2 -> m5_3  [key=0, style=solid];
m5_2 -> m5_4  [key=0, style=solid];
m5_2 -> m5_7  [key=2, style=dotted];
m5_3 -> m5_5  [key=0, style=solid];
m5_3 -> m5_8  [key=2, style=dotted];
m5_4 -> m5_5  [key=0, style=solid];
m5_4 -> m5_8  [key=2, style=dotted];
m5_5 -> m5_0  [key=0, style=bold, color=blue];
m6_0 -> m6_1  [key=0, style=solid];
m6_1 -> m6_2  [key=0, style=solid];
m6_1 -> m6_10  [key=2, style=dotted];
m6_2 -> m6_3  [key=0, style=solid];
m6_2 -> m6_11  [key=2, style=dotted];
m6_2 -> m6_4  [key=1, style=dashed, color=darkseagreen4, label=ms];
m6_3 -> m6_4  [key=0, style=solid];
m6_4 -> m6_5  [key=0, style=solid];
m6_4 -> m6_12  [key=2, style=dotted];
m6_5 -> m6_6  [key=0, style=solid];
m6_5 -> m6_13  [key=2, style=dotted];
m6_6 -> m6_7  [key=0, style=solid];
m6_6 -> m6_8  [key=1, style=dashed, color=darkseagreen4, label=value];
m6_7 -> m6_8  [key=0, style=solid];
m6_7 -> m6_14  [key=2, style=dotted];
m6_8 -> m6_9  [key=0, style=solid];
m6_8 -> m6_15  [key=2, style=dotted];
m6_9 -> m6_0  [key=0, style=bold, color=blue];
m7_76 -> m7_77  [key=0, style=solid];
m7_77 -> m7_78  [key=0, style=solid];
m7_77 -> m7_79  [key=2, style=dotted];
m7_78 -> m7_76  [key=0, style=bold, color=blue];
m7_12 -> m7_13  [key=0, style=solid];
m7_13 -> m7_14  [key=0, style=solid];
m7_13 -> m7_15  [key=2, style=dotted];
m7_14 -> m7_12  [key=0, style=bold, color=blue];
m7_69 -> m7_70  [key=0, style=solid];
m7_70 -> m7_71  [key=0, style=solid];
m7_70 -> m7_72  [key=2, style=dotted];
m7_70 -> m7_73  [key=2, style=dotted];
m7_71 -> m7_69  [key=0, style=bold, color=blue];
m7_16 -> m7_17  [key=0, style=solid];
m7_16 -> m7_18  [key=1, style=dashed, color=darkseagreen4, label=object];
m7_16 -> m7_19  [key=1, style=dashed, color=darkseagreen4, label=object];
m7_17 -> m7_18  [key=0, style=solid];
m7_17 -> m7_23  [key=2, style=dotted];
m7_17 -> m7_19  [key=1, style=dashed, color=darkseagreen4, label=ms];
m7_17 -> m7_20  [key=1, style=dashed, color=darkseagreen4, label=ms];
m7_18 -> m7_19  [key=0, style=solid];
m7_18 -> m7_24  [key=2, style=dotted];
m7_18 -> m7_25  [key=2, style=dotted];
m7_19 -> m7_20  [key=0, style=solid];
m7_19 -> m7_26  [key=2, style=dotted];
m7_20 -> m7_21  [key=0, style=solid];
m7_20 -> m7_27  [key=2, style=dotted];
m7_21 -> m7_22  [key=0, style=solid];
m7_21 -> m7_28  [key=2, style=dotted];
m7_22 -> m7_16  [key=0, style=bold, color=blue];
m7_4 -> m7_5  [key=0, style=solid];
m7_5 -> m7_6  [key=0, style=solid];
m7_5 -> m7_7  [key=2, style=dotted];
m7_6 -> m7_4  [key=0, style=bold, color=blue];
m7_83 -> m7_84  [key=0, style=solid];
m7_83 -> m7_80  [key=3, color=darkorchid, style=bold, label="Parameter variable object value"];
m7_83 -> m7_81  [key=3, color=darkorchid, style=bold, label="Parameter variable string message"];
m7_84 -> m7_85  [key=0, style=solid];
m7_84 -> m7_86  [key=2, style=dotted];
m7_85 -> m7_83  [key=0, style=bold, color=blue];
m7_92 -> m7_100  [key=0, style=solid];
m7_92 -> m7_101  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_92 -> m7_102  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_92 -> m7_87  [key=3, color=darkorchid, style=bold, label="Parameter variable string s"];
m7_92 -> m7_94  [key=3, color=darkorchid, style=bold, label="Parameter variable string s"];
m7_92 -> m7_92  [key=3, color=darkorchid, style=bold, label="method methodReturn string Normalize"];
m7_100 -> m7_101  [key=0, style=solid];
m7_100 -> m7_102  [key=0, style=solid];
m7_101 -> m7_102  [key=0, style=solid];
m7_101 -> m7_104  [key=2, style=dotted];
m7_101 -> m7_101  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_102 -> m7_103  [key=0, style=solid];
m7_103 -> m7_92  [key=0, style=bold, color=blue];
m7_49 -> m7_50  [key=0, style=solid];
m7_49 -> m7_51  [key=3, color=darkorchid, style=bold, label="method methodReturn byte[] HexToBytes"];
m7_50 -> m7_51  [key=0, style=solid];
m7_50 -> m7_48  [key=2, style=dotted];
m7_50 -> m7_54  [key=1, style=dashed, color=darkseagreen4, label=fixedHex];
m7_51 -> m7_52  [key=0, style=solid];
m7_51 -> m7_58  [key=1, style=dashed, color=darkseagreen4, label=bytes];
m7_51 -> m7_62  [key=1, style=dashed, color=darkseagreen4, label=bytes];
m7_54 -> m7_55  [key=0, style=solid];
m7_54 -> m7_62  [key=0, style=solid];
m7_52 -> m7_53  [key=0, style=solid];
m7_52 -> m7_58  [key=1, style=dashed, color=darkseagreen4, label=shift];
m7_52 -> m7_59  [key=1, style=dashed, color=darkseagreen4, label=shift];
m7_52 -> m7_52  [key=3, color=darkorchid, style=bold, label="Local variable int shift"];
m7_58 -> m7_59  [key=0, style=solid];
m7_62 -> m7_63  [key=0, style=solid];
m7_53 -> m7_54  [key=0, style=solid];
m7_53 -> m7_58  [key=1, style=dashed, color=darkseagreen4, label=offset];
m7_53 -> m7_61  [key=1, style=dashed, color=darkseagreen4, label=offset];
m7_53 -> m7_31  [key=3, color=darkorchid, style=bold, label="Local variable int offset"];
m7_59 -> m7_60  [key=0, style=solid];
m7_59 -> m7_59  [key=1, style=dashed, color=darkseagreen4, label=shift];
m7_61 -> m7_54  [key=0, style=solid];
m7_61 -> m7_61  [key=1, style=dashed, color=darkseagreen4, label=offset];
m7_55 -> m7_56  [key=0, style=solid];
m7_55 -> m7_57  [key=1, style=dashed, color=darkseagreen4, label=b];
m7_55 -> m7_58  [key=1, style=dashed, color=darkseagreen4, label=b];
m7_56 -> m7_57  [key=0, style=solid];
m7_56 -> m7_58  [key=0, style=solid];
m7_57 -> m7_58  [key=0, style=solid];
m7_57 -> m7_57  [key=1, style=dashed, color=darkseagreen4, label=b];
m7_60 -> m7_61  [key=0, style=solid];
m7_60 -> m7_54  [key=0, style=solid];
m7_63 -> m7_49  [key=0, style=bold, color=blue];
m7_8 -> m7_9  [key=0, style=solid];
m7_9 -> m7_10  [key=0, style=solid];
m7_9 -> m7_11  [key=2, style=dotted];
m7_10 -> m7_8  [key=0, style=bold, color=blue];
m7_94 -> m7_95  [key=0, style=solid];
m7_94 -> m7_96  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_94 -> m7_92  [key=3, color=darkorchid, style=bold, label="Parameter variable string s2"];
m7_94 -> m7_112  [key=3, color=darkorchid, style=bold, label="Parameter variable string s1"];
m7_94 -> m7_133  [key=3, color=darkorchid, style=bold, label="Parameter variable string s1"];
m7_95 -> m7_96  [key=0, style=solid];
m7_95 -> m7_92  [key=2, style=dotted];
m7_95 -> m7_95  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_95 -> m7_97  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_96 -> m7_97  [key=0, style=solid];
m7_96 -> m7_92  [key=2, style=dotted];
m7_96 -> m7_96  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_97 -> m7_98  [key=0, style=solid];
m7_97 -> m7_99  [key=2, style=dotted];
m7_98 -> m7_94  [key=0, style=bold, color=blue];
m7_72 -> m7_74  [key=0, style=solid];
m7_72 -> m7_69  [key=3, color=darkorchid, style=bold, label="Parameter variable string json"];
m7_74 -> m7_75  [key=0, style=solid];
m7_74 -> m7_48  [key=2, style=dotted];
m7_75 -> m7_72  [key=0, style=bold, color=blue];
m7_0 -> m7_1  [key=0, style=solid];
m7_1 -> m7_2  [key=0, style=solid];
m7_1 -> m7_3  [key=2, style=dotted];
m7_2 -> m7_0  [key=0, style=bold, color=blue];
m7_41 -> m7_42  [key=0, style=solid];
m7_41 -> m7_43  [key=1, style=dashed, color=darkseagreen4, label=bool];
m7_41 -> m7_38  [key=3, color=darkorchid, style=bold, label="Parameter variable byte[] bytes"];
m7_41 -> m7_39  [key=3, color=darkorchid, style=bold, label="Parameter variable bool removeDashes"];
m7_42 -> m7_43  [key=0, style=solid];
m7_42 -> m7_47  [key=2, style=dotted];
m7_42 -> m7_44  [key=1, style=dashed, color=darkseagreen4, label=hex];
m7_42 -> m7_45  [key=1, style=dashed, color=darkseagreen4, label=hex];
m7_43 -> m7_44  [key=0, style=solid];
m7_43 -> m7_45  [key=0, style=solid];
m7_44 -> m7_45  [key=0, style=solid];
m7_44 -> m7_48  [key=2, style=dotted];
m7_44 -> m7_44  [key=1, style=dashed, color=darkseagreen4, label=hex];
m7_45 -> m7_46  [key=0, style=solid];
m7_46 -> m7_41  [key=0, style=bold, color=blue];
m7_64 -> m7_65  [key=0, style=solid];
m7_65 -> m7_66  [key=0, style=solid];
m7_66 -> m7_67  [key=0, style=solid];
m7_67 -> m7_68  [key=0, style=solid];
m7_68 -> m7_64  [key=0, style=bold, color=blue];
m7_29 -> m7_30  [key=0, style=solid];
m7_29 -> m7_31  [key=1, style=dashed, color=darkseagreen4, label="System.DateTime"];
m7_30 -> m7_31  [key=0, style=solid];
m7_30 -> m7_32  [key=1, style=dashed, color=darkseagreen4, label=chars];
m7_31 -> m7_32  [key=0, style=solid];
m7_31 -> m7_34  [key=2, style=dotted];
m7_31 -> m7_35  [key=2, style=dotted];
m7_31 -> m7_36  [key=2, style=dotted];
m7_32 -> m7_33  [key=0, style=solid];
m7_32 -> m7_37  [key=2, style=dotted];
m7_33 -> m7_29  [key=0, style=bold, color=blue];
m7_87 -> m7_88  [key=0, style=solid];
m7_87 -> m7_89  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_87 -> m7_92  [key=3, color=darkorchid, style=bold, label="Parameter variable string actual"];
m7_88 -> m7_89  [key=0, style=solid];
m7_88 -> m7_92  [key=2, style=dotted];
m7_88 -> m7_88  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_88 -> m7_90  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_89 -> m7_90  [key=0, style=solid];
m7_89 -> m7_92  [key=2, style=dotted];
m7_89 -> m7_89  [key=1, style=dashed, color=darkseagreen4, label=string];
m7_90 -> m7_91  [key=0, style=solid];
m7_90 -> m7_93  [key=2, style=dotted];
m7_91 -> m7_87  [key=0, style=bold, color=blue];
m7_80 -> m7_81  [key=0, style=solid];
m7_81 -> m7_82  [key=0, style=solid];
m7_81 -> m7_83  [key=2, style=dotted];
m7_82 -> m7_80  [key=0, style=bold, color=blue];
m7_38 -> m7_39  [key=0, style=solid];
m7_38 -> m7_41  [key=3, color=darkorchid, style=bold, label="method methodReturn string BytesToHex"];
m7_39 -> m7_40  [key=0, style=solid];
m7_39 -> m7_41  [key=2, style=dotted];
m7_40 -> m7_38  [key=0, style=bold, color=blue];
m7_105 -> m7_106  [key=0, style=solid];
m7_105 -> m7_110  [key=1, style=dashed, color=darkseagreen4, label="params string[]"];
m7_105 -> m7_112  [key=1, style=dashed, color=darkseagreen4, label="params string[]"];
m7_105 -> m7_115  [key=1, style=dashed, color=darkseagreen4, label="params string[]"];
m7_105 -> m7_81  [key=3, color=darkorchid, style=bold, label="method methodReturn TException Throws"];
m7_105 -> m7_109  [key=3, color=darkorchid, style=bold, label="method methodReturn TException Throws"];
m7_106 -> m7_107  [key=0, style=solid];
m7_106 -> m7_119  [key=2, style=dotted];
m7_110 -> m7_111  [key=0, style=solid];
m7_110 -> m7_112  [key=0, style=solid];
m7_112 -> m7_113  [key=0, style=solid];
m7_112 -> m7_115  [key=0, style=solid];
m7_115 -> m7_118  [key=0, style=solid];
m7_115 -> m7_121  [key=2, style=dotted];
m7_115 -> m7_122  [key=2, style=dotted];
m7_107 -> m7_108  [key=0, style=solid];
m7_107 -> m7_120  [key=2, style=dotted];
m7_108 -> m7_118  [key=0, style=solid];
m7_109 -> m7_110  [key=0, style=solid];
m7_111 -> m7_118  [key=0, style=solid];
m7_113 -> m7_114  [key=0, style=solid];
m7_113 -> m7_112  [key=0, style=solid];
m7_113 -> m7_94  [key=2, style=dotted];
m7_114 -> m7_118  [key=0, style=solid];
m7_116 -> m7_117  [key=0, style=solid];
m7_117 -> m7_118  [key=0, style=solid];
m7_117 -> m7_123  [key=2, style=dotted];
m7_117 -> m7_124  [key=2, style=dotted];
m7_117 -> m7_125  [key=2, style=dotted];
m7_118 -> m7_105  [key=0, style=bold, color=blue];
m7_126 -> m7_127  [key=0, style=solid];
m7_126 -> m7_131  [key=1, style=dashed, color=darkseagreen4, label="params string[]"];
m7_126 -> m7_133  [key=1, style=dashed, color=darkseagreen4, label="params string[]"];
m7_126 -> m7_136  [key=1, style=dashed, color=darkseagreen4, label="params string[]"];
m7_126 -> m7_81  [key=3, color=darkorchid, style=bold, label="method methodReturn System.Threading.Tasks.Task<TException> ThrowsAsync"];
m7_126 -> m7_130  [key=3, color=darkorchid, style=bold, label="method methodReturn System.Threading.Tasks.Task<TException> ThrowsAsync"];
m7_127 -> m7_128  [key=0, style=solid];
m7_127 -> m7_140  [key=2, style=dotted];
m7_131 -> m7_132  [key=0, style=solid];
m7_131 -> m7_133  [key=0, style=solid];
m7_133 -> m7_134  [key=0, style=solid];
m7_133 -> m7_136  [key=0, style=solid];
m7_136 -> m7_139  [key=0, style=solid];
m7_136 -> m7_121  [key=2, style=dotted];
m7_136 -> m7_122  [key=2, style=dotted];
m7_128 -> m7_129  [key=0, style=solid];
m7_128 -> m7_120  [key=2, style=dotted];
m7_129 -> m7_139  [key=0, style=solid];
m7_130 -> m7_131  [key=0, style=solid];
m7_132 -> m7_139  [key=0, style=solid];
m7_134 -> m7_135  [key=0, style=solid];
m7_134 -> m7_133  [key=0, style=solid];
m7_134 -> m7_94  [key=2, style=dotted];
m7_135 -> m7_139  [key=0, style=solid];
m7_137 -> m7_138  [key=0, style=solid];
m7_138 -> m7_139  [key=0, style=solid];
m7_138 -> m7_123  [key=2, style=dotted];
m7_138 -> m7_124  [key=2, style=dotted];
m7_138 -> m7_125  [key=2, style=dotted];
m7_139 -> m7_126  [key=0, style=bold, color=blue];
m7_141 -> m7_39  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.TestFixtureBase"];
m7_141 -> m7_70  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.TestFixtureBase"];
m8_658 -> m8_659  [key=0, style=solid];
m8_660 -> m8_11  [key=2, style=dotted];
m8_660 -> m8_661  [key=0, style=solid];
m8_660 -> m8_179  [key=2, style=dotted];
m8_659 -> m8_660  [key=0, style=solid];
m8_659 -> m8_659  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m8_661 -> m8_662  [key=0, style=solid];
m8_662 -> m8_109  [key=2, style=dotted];
m8_662 -> m8_663  [key=0, style=solid];
m8_663 -> m8_658  [key=0, style=bold, color=blue];
m8_361 -> m8_362  [key=0, style=solid];
m8_362 -> m8_363  [key=0, style=solid];
m8_362 -> m8_354  [key=2, style=dotted];
m8_363 -> m8_361  [key=0, style=bold, color=blue];
m8_96 -> m8_97  [key=0, style=solid];
m8_96 -> m8_92  [key=2, style=dotted];
m8_664 -> m8_665  [key=0, style=solid];
m8_666 -> m8_6  [key=2, style=dotted];
m8_666 -> m8_667  [key=0, style=solid];
m8_666 -> m8_673  [key=2, style=dotted];
m8_666 -> m8_318  [key=2, style=dotted];
m8_665 -> m8_666  [key=0, style=solid];
m8_665 -> m8_672  [key=2, style=dotted];
m8_665 -> m8_667  [key=1, style=dashed, color=darkseagreen4, label=data];
m8_667 -> m8_668  [key=0, style=solid];
m8_667 -> m8_201  [key=2, style=dotted];
m8_667 -> m8_669  [key=1, style=dashed, color=darkseagreen4, label=serialized];
m8_668 -> m8_13  [key=2, style=dotted];
m8_668 -> m8_669  [key=0, style=solid];
m8_669 -> m8_670  [key=0, style=solid];
m8_669 -> m8_93  [key=2, style=dotted];
m8_670 -> m8_109  [key=2, style=dotted];
m8_670 -> m8_671  [key=0, style=solid];
m8_670 -> m8_674  [key=2, style=dotted];
m8_671 -> m8_664  [key=0, style=bold, color=blue];
m8_34 -> m8_35  [key=0, style=solid];
m8_34 -> m8_17  [key=2, style=dotted];
m8_202 -> m8_203  [key=0, style=solid];
m8_204 -> m8_6  [key=2, style=dotted];
m8_204 -> m8_205  [key=0, style=solid];
m8_204 -> m8_200  [key=2, style=dotted];
m8_203 -> m8_204  [key=0, style=solid];
m8_203 -> m8_100  [key=2, style=dotted];
m8_203 -> m8_206  [key=1, style=dashed, color=darkseagreen4, label=listRef];
m8_205 -> m8_206  [key=0, style=solid];
m8_205 -> m8_201  [key=2, style=dotted];
m8_205 -> m8_207  [key=1, style=dashed, color=darkseagreen4, label=json];
m8_206 -> m8_13  [key=2, style=dotted];
m8_206 -> m8_207  [key=0, style=solid];
m8_207 -> m8_208  [key=0, style=solid];
m8_207 -> m8_93  [key=2, style=dotted];
m8_207 -> m8_209  [key=1, style=dashed, color=darkseagreen4, label=deserialized];
m8_207 -> m8_210  [key=1, style=dashed, color=darkseagreen4, label=deserialized];
m8_208 -> m8_109  [key=2, style=dotted];
m8_208 -> m8_209  [key=0, style=solid];
m8_211 -> m8_109  [key=2, style=dotted];
m8_211 -> m8_212  [key=0, style=solid];
m8_212 -> m8_109  [key=2, style=dotted];
m8_212 -> m8_213  [key=0, style=solid];
m8_213 -> m8_109  [key=2, style=dotted];
m8_213 -> m8_214  [key=0, style=solid];
m8_214 -> m8_109  [key=2, style=dotted];
m8_214 -> m8_215  [key=0, style=solid];
m8_215 -> m8_109  [key=2, style=dotted];
m8_215 -> m8_216  [key=0, style=solid];
m8_216 -> m8_109  [key=2, style=dotted];
m8_216 -> m8_217  [key=0, style=solid];
m8_209 -> m8_66  [key=2, style=dotted];
m8_209 -> m8_210  [key=0, style=solid];
m8_210 -> m8_211  [key=0, style=solid];
m8_210 -> m8_212  [key=1, style=dashed, color=darkseagreen4, label=nested];
m8_210 -> m8_213  [key=1, style=dashed, color=darkseagreen4, label=nested];
m8_210 -> m8_214  [key=1, style=dashed, color=darkseagreen4, label=nested];
m8_210 -> m8_215  [key=1, style=dashed, color=darkseagreen4, label=nested];
m8_210 -> m8_216  [key=1, style=dashed, color=darkseagreen4, label=nested];
m8_217 -> m8_202  [key=0, style=bold, color=blue];
m8_120 -> m8_121  [key=0, style=solid];
m8_120 -> m8_11  [key=2, style=dotted];
m8_120 -> m8_12  [key=2, style=dotted];
m8_121 -> m8_122  [key=0, style=solid];
m8_121 -> m8_13  [key=2, style=dotted];
m8_122 -> m8_120  [key=0, style=bold, color=blue];
m8_122 -> m8_116  [key=0, style=bold, color=blue];
m8_322 -> m8_323  [key=0, style=solid];
m8_326 -> m8_201  [key=2, style=dotted];
m8_326 -> m8_327  [key=0, style=solid];
m8_327 -> m8_93  [key=2, style=dotted];
m8_327 -> m8_328  [key=0, style=solid];
m8_323 -> m8_330  [key=2, style=dotted];
m8_323 -> m8_326  [key=1, style=dashed, color=darkseagreen4, label=message];
m8_323 -> m8_324  [key=0, style=solid];
m8_323 -> m8_325  [key=1, style=dashed, color=darkseagreen4, label=message];
m8_325 -> m8_326  [key=0, style=solid];
m8_325 -> m8_331  [key=2, style=dotted];
m8_328 -> m8_329  [key=0, style=solid];
m8_324 -> m8_325  [key=0, style=solid];
m8_329 -> m8_322  [key=0, style=bold, color=blue];
m8_76 -> m8_77  [key=0, style=solid];
m8_76 -> m8_82  [key=0, style=solid];
m8_76 -> m8_99  [key=2, style=dotted];
m8_77 -> m8_11  [key=2, style=dotted];
m8_77 -> m8_78  [key=0, style=solid];
m8_77 -> m8_61  [key=2, style=dotted];
m8_77 -> m8_80  [key=2, style=dotted];
m8_78 -> m8_13  [key=2, style=dotted];
m8_78 -> m8_79  [key=0, style=solid];
m8_78 -> m8_80  [key=1, style=dashed, color=darkseagreen4, label=value];
m8_79 -> m8_76  [key=0, style=bold, color=blue];
m8_79 -> m8_80  [key=0, style=solid];
m8_79 -> m8_85  [key=2, style=dotted];
m8_745 -> m8_748  [key=1, style=dashed, color=darkseagreen4, label=object];
m8_745 -> m8_751  [key=1, style=dashed, color=darkseagreen4, label=object];
m8_745 -> m8_746  [key=0, style=solid];
m8_745 -> m8_750  [key=1, style=dashed, color=darkseagreen4, label=object];
m8_745 -> m8_726  [key=3, color=darkorchid, style=bold, label="method methodReturn bool Equals"];
m8_745 -> m8_749  [key=3, color=darkorchid, style=bold, label="method methodReturn bool Equals"];
m8_748 -> m8_749  [key=0, style=solid];
m8_748 -> m8_750  [key=0, style=solid];
m8_748 -> m8_754  [key=2, style=dotted];
m8_751 -> m8_753  [key=0, style=solid];
m8_751 -> m8_755  [key=2, style=dotted];
m8_746 -> m8_748  [key=0, style=solid];
m8_746 -> m8_747  [key=0, style=solid];
m8_749 -> m8_753  [key=0, style=solid];
m8_750 -> m8_751  [key=0, style=solid];
m8_750 -> m8_752  [key=0, style=solid];
m8_747 -> m8_753  [key=0, style=solid];
m8_752 -> m8_753  [key=0, style=solid];
m8_753 -> m8_745  [key=0, style=bold, color=blue];
m8_617 -> m8_618  [key=0, style=solid];
m8_619 -> m8_11  [key=2, style=dotted];
m8_619 -> m8_620  [key=0, style=solid];
m8_619 -> m8_622  [key=1, style=dashed, color=darkseagreen4, label=settings];
m8_621 -> m8_13  [key=2, style=dotted];
m8_621 -> m8_622  [key=0, style=solid];
m8_618 -> m8_619  [key=0, style=solid];
m8_618 -> m8_615  [key=2, style=dotted];
m8_618 -> m8_627  [key=2, style=dotted];
m8_618 -> m8_620  [key=1, style=dashed, color=darkseagreen4, label=p];
m8_620 -> m8_621  [key=0, style=solid];
m8_620 -> m8_605  [key=2, style=dotted];
m8_620 -> m8_622  [key=1, style=dashed, color=darkseagreen4, label=json];
m8_622 -> m8_179  [key=2, style=dotted];
m8_622 -> m8_623  [key=0, style=solid];
m8_622 -> m8_624  [key=1, style=dashed, color=darkseagreen4, label=p2];
m8_622 -> m8_625  [key=1, style=dashed, color=darkseagreen4, label=p2];
m8_624 -> m8_109  [key=2, style=dotted];
m8_624 -> m8_625  [key=0, style=solid];
m8_625 -> m8_109  [key=2, style=dotted];
m8_625 -> m8_626  [key=0, style=solid];
m8_623 -> m8_624  [key=0, style=solid];
m8_623 -> m8_66  [key=2, style=dotted];
m8_626 -> m8_617  [key=0, style=bold, color=blue];
m8_26 -> m8_27  [key=0, style=solid];
m8_26 -> m8_82  [key=0, style=solid];
m8_26 -> m8_86  [key=2, style=dotted];
m8_27 -> m8_38  [key=1, style=dashed, color=darkseagreen4, label=sb];
m8_27 -> m8_28  [key=0, style=solid];
m8_27 -> m8_34  [key=2, style=dotted];
m8_27 -> m8_30  [key=1, style=dashed, color=darkseagreen4, label=sb];
m8_27 -> m8_32  [key=1, style=dashed, color=darkseagreen4, label=sb];
m8_32 -> m8_36  [key=2, style=dotted];
m8_32 -> m8_37  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_32 -> m8_33  [key=0, style=solid];
m8_32 -> m8_84  [key=2, style=dotted];
m8_28 -> m8_28  [key=3, color=darkorchid, style=bold, label="Local variable int i"];
m8_28 -> m8_29  [key=0, style=solid];
m8_28 -> m8_31  [key=1, style=dashed, color=darkseagreen4, label=value];
m8_30 -> m8_31  [key=0, style=solid];
m8_30 -> m8_35  [key=2, style=dotted];
m8_30 -> m8_33  [key=1, style=dashed, color=darkseagreen4, label=index];
m8_29 -> m8_32  [key=0, style=solid];
m8_29 -> m8_30  [key=0, style=solid];
m8_29 -> m8_83  [key=2, style=dotted];
m8_31 -> m8_29  [key=0, style=solid];
m8_31 -> m8_31  [key=1, style=dashed, color=darkseagreen4, label=i];
m8_31 -> m8_32  [key=0, style=solid];
m8_31 -> m8_36  [key=0, style=solid];
m8_31 -> m8_34  [key=1, style=dashed, color=darkseagreen4, label=c];
m8_33 -> m8_26  [key=0, style=bold, color=blue];
m8_33 -> m8_34  [key=0, style=solid];
m8_33 -> m8_87  [key=2, style=dotted];
m8_33 -> m8_88  [key=2, style=dotted];
m8_33 -> m8_85  [key=2, style=dotted];
m8_719 -> m8_720  [key=0, style=solid];
m8_720 -> m8_722  [key=2, style=dotted];
m8_720 -> m8_721  [key=0, style=solid];
m8_721 -> m8_719  [key=0, style=bold, color=blue];
m8_332 -> m8_333  [key=0, style=solid];
m8_333 -> m8_6  [key=2, style=dotted];
m8_333 -> m8_7  [key=2, style=dotted];
m8_333 -> m8_334  [key=0, style=solid];
m8_333 -> m8_345  [key=2, style=dotted];
m8_334 -> m8_11  [key=2, style=dotted];
m8_334 -> m8_12  [key=2, style=dotted];
m8_334 -> m8_335  [key=0, style=solid];
m8_334 -> m8_336  [key=1, style=dashed, color=darkseagreen4, label=json];
m8_334 -> m8_337  [key=1, style=dashed, color=darkseagreen4, label=json];
m8_337 -> m8_11  [key=2, style=dotted];
m8_337 -> m8_338  [key=0, style=solid];
m8_337 -> m8_346  [key=2, style=dotted];
m8_337 -> m8_339  [key=1, style=dashed, color=darkseagreen4, label=c];
m8_336 -> m8_13  [key=2, style=dotted];
m8_336 -> m8_337  [key=0, style=solid];
m8_335 -> m8_336  [key=0, style=solid];
m8_335 -> m8_100  [key=2, style=dotted];
m8_338 -> m8_339  [key=0, style=solid];
m8_338 -> m8_66  [key=2, style=dotted];
m8_339 -> m8_340  [key=0, style=solid];
m8_339 -> m8_341  [key=1, style=dashed, color=darkseagreen4, label=newCollection];
m8_339 -> m8_342  [key=1, style=dashed, color=darkseagreen4, label=newCollection];
m8_340 -> m8_109  [key=2, style=dotted];
m8_340 -> m8_341  [key=0, style=solid];
m8_341 -> m8_109  [key=2, style=dotted];
m8_341 -> m8_342  [key=0, style=solid];
m8_343 -> m8_109  [key=2, style=dotted];
m8_343 -> m8_344  [key=0, style=solid];
m8_342 -> m8_343  [key=0, style=solid];
m8_344 -> m8_332  [key=0, style=bold, color=blue];
m8_65 -> m8_66  [key=0, style=solid];
m8_65 -> m8_98  [key=2, style=dotted];
m8_65 -> m8_65  [key=1, style=dashed, color=darkseagreen4, label=dateTimeOffset];
m8_36 -> m8_82  [key=0, style=solid];
m8_36 -> m8_86  [key=2, style=dotted];
m8_723 -> m8_726  [key=3, color=darkorchid, style=bold, label="method methodReturn bool Equals"];
m8_723 -> m8_724  [key=0, style=solid];
m8_726 -> m8_728  [key=0, style=solid];
m8_725 -> m8_726  [key=0, style=solid];
m8_725 -> m8_727  [key=0, style=solid];
m8_727 -> m8_728  [key=0, style=solid];
m8_727 -> m8_729  [key=2, style=dotted];
m8_724 -> m8_725  [key=0, style=solid];
m8_724 -> m8_727  [key=1, style=dashed, color=darkseagreen4, label=w];
m8_728 -> m8_723  [key=0, style=bold, color=blue];
m8_606 -> m8_607  [key=0, style=solid];
m8_608 -> m8_11  [key=2, style=dotted];
m8_608 -> m8_609  [key=0, style=solid];
m8_608 -> m8_611  [key=1, style=dashed, color=darkseagreen4, label=settings];
m8_610 -> m8_13  [key=2, style=dotted];
m8_610 -> m8_611  [key=0, style=solid];
m8_607 -> m8_608  [key=0, style=solid];
m8_607 -> m8_615  [key=2, style=dotted];
m8_607 -> m8_616  [key=2, style=dotted];
m8_607 -> m8_609  [key=1, style=dashed, color=darkseagreen4, label=p];
m8_609 -> m8_610  [key=0, style=solid];
m8_609 -> m8_605  [key=2, style=dotted];
m8_609 -> m8_611  [key=1, style=dashed, color=darkseagreen4, label=json];
m8_611 -> m8_179  [key=2, style=dotted];
m8_611 -> m8_612  [key=0, style=solid];
m8_611 -> m8_613  [key=1, style=dashed, color=darkseagreen4, label=p2];
m8_613 -> m8_109  [key=2, style=dotted];
m8_613 -> m8_614  [key=0, style=solid];
m8_612 -> m8_613  [key=0, style=solid];
m8_612 -> m8_66  [key=2, style=dotted];
m8_614 -> m8_606  [key=0, style=bold, color=blue];
m8_697 -> m8_704  [key=0, style=solid];
m8_697 -> m8_705  [key=1, style=dashed, color=darkseagreen4, label=string];
m8_697 -> m8_706  [key=1, style=dashed, color=darkseagreen4, label=string];
m8_704 -> m8_705  [key=0, style=solid];
m8_704 -> m8_706  [key=0, style=solid];
m8_705 -> m8_707  [key=0, style=solid];
m8_705 -> m8_708  [key=2, style=dotted];
m8_705 -> m8_709  [key=2, style=dotted];
m8_706 -> m8_707  [key=0, style=solid];
m8_706 -> m8_773  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.Message2"];
m8_707 -> m8_697  [key=0, style=bold, color=blue];
m8_756 -> m8_28  [key=3, color=darkorchid, style=bold, label="method methodReturn int GetHashCode"];
m8_756 -> m8_757  [key=0, style=solid];
m8_757 -> m8_758  [key=0, style=solid];
m8_757 -> m8_759  [key=0, style=solid];
m8_759 -> m8_760  [key=0, style=solid];
m8_759 -> m8_761  [key=2, style=dotted];
m8_758 -> m8_760  [key=0, style=solid];
m8_760 -> m8_756  [key=0, style=bold, color=blue];
m8_186 -> m8_180  [key=0, style=bold, color=blue];
m8_48 -> m8_49  [key=0, style=solid];
m8_48 -> m8_82  [key=0, style=solid];
m8_48 -> m8_85  [key=2, style=dotted];
m8_53 -> m8_13  [key=2, style=dotted];
m8_53 -> m8_54  [key=0, style=solid];
m8_53 -> m8_82  [key=0, style=solid];
m8_50 -> m8_59  [key=2, style=dotted];
m8_50 -> m8_51  [key=0, style=solid];
m8_50 -> m8_52  [key=1, style=dashed, color=darkseagreen4, label=sw];
m8_51 -> m8_60  [key=2, style=dotted];
m8_51 -> m8_61  [key=2, style=dotted];
m8_51 -> m8_52  [key=0, style=solid];
m8_51 -> m8_62  [key=2, style=dotted];
m8_51 -> m8_82  [key=0, style=solid];
m8_51 -> m8_94  [key=2, style=dotted];
m8_52 -> m8_53  [key=0, style=solid];
m8_52 -> m8_63  [key=2, style=dotted];
m8_52 -> m8_54  [key=1, style=dashed, color=darkseagreen4, label=result];
m8_52 -> m8_55  [key=1, style=dashed, color=darkseagreen4, label=result];
m8_54 -> m8_55  [key=0, style=solid];
m8_54 -> m8_64  [key=2, style=dotted];
m8_54 -> m8_65  [key=2, style=dotted];
m8_49 -> m8_46  [key=2, style=dotted];
m8_49 -> m8_50  [key=0, style=solid];
m8_49 -> m8_51  [key=1, style=dashed, color=darkseagreen4, label=serializer];
m8_49 -> m8_56  [key=1, style=dashed, color=darkseagreen4, label=serializer];
m8_55 -> m8_43  [key=2, style=dotted];
m8_55 -> m8_44  [key=2, style=dotted];
m8_55 -> m8_56  [key=0, style=solid];
m8_55 -> m8_57  [key=1, style=dashed, color=darkseagreen4, label=value];
m8_55 -> m8_58  [key=1, style=dashed, color=darkseagreen4, label=value];
m8_55 -> m8_64  [key=1, style=dashed, color=darkseagreen4, label=value];
m8_56 -> m8_47  [key=2, style=dotted];
m8_56 -> m8_57  [key=0, style=solid];
m8_57 -> m8_66  [key=2, style=dotted];
m8_57 -> m8_58  [key=0, style=solid];
m8_57 -> m8_64  [key=0, style=solid];
m8_58 -> m8_48  [key=0, style=bold, color=blue];
m8_58 -> m8_59  [key=0, style=solid];
m8_58 -> m8_60  [key=1, style=dashed, color=darkseagreen4, label=dateTime];
m8_58 -> m8_62  [key=1, style=dashed, color=darkseagreen4, label=dateTime];
m8_58 -> m8_63  [key=1, style=dashed, color=darkseagreen4, label=dateTime];
m8_8 -> m8_9  [key=0, style=solid];
m8_9 -> m8_10  [key=0, style=solid];
m8_9 -> m8_11  [key=2, style=dotted];
m8_10 -> m8_8  [key=0, style=bold, color=blue];
m8_218 -> m8_219  [key=0, style=solid];
m8_220 -> m8_11  [key=2, style=dotted];
m8_220 -> m8_221  [key=0, style=solid];
m8_220 -> m8_225  [key=2, style=dotted];
m8_220 -> m8_108  [key=2, style=dotted];
m8_220 -> m8_222  [key=1, style=dashed, color=darkseagreen4, label=p];
m8_219 -> m8_220  [key=0, style=solid];
m8_219 -> m8_219  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m8_221 -> m8_222  [key=0, style=solid];
m8_221 -> m8_66  [key=2, style=dotted];
m8_222 -> m8_223  [key=0, style=solid];
m8_223 -> m8_109  [key=2, style=dotted];
m8_223 -> m8_224  [key=0, style=solid];
m8_224 -> m8_218  [key=0, style=bold, color=blue];
m8_63 -> m8_66  [key=0, style=solid];
m8_63 -> m8_97  [key=2, style=dotted];
m8_87 -> m8_88  [key=0, style=solid];
m8_87 -> m8_93  [key=2, style=dotted];
m8_87 -> m8_89  [key=1, style=dashed, color=darkseagreen4, label=w2];
m8_123 -> m8_124  [key=0, style=solid];
m8_123 -> m8_125  [key=1, style=dashed, color=darkseagreen4, label=int];
m8_124 -> m8_125  [key=0, style=solid];
m8_125 -> m8_126  [key=0, style=solid];
m8_126 -> m8_123  [key=0, style=bold, color=blue];
m8_126 -> m8_128  [key=1, style=dashed, color=darkseagreen4, label=employeeRef];
m8_126 -> m8_127  [key=0, style=solid];
m8_16 -> m8_127  [key=0, style=solid];
m8_16 -> m8_129  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonToken"];
m8_16 -> m8_140  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonToken"];
m8_16 -> m8_158  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonToken"];
m8_16 -> m8_171  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonToken"];
m8_16 -> m8_178  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonToken"];
m8_16 -> m8_184  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonToken"];
m8_16 -> m8_11  [key=2, style=dotted];
m8_16 -> m8_12  [key=2, style=dotted];
m8_16 -> m8_17  [key=0, style=solid];
m8_127 -> m8_128  [key=0, style=solid];
m8_127 -> m8_139  [key=0, style=solid];
m8_127 -> m8_151  [key=0, style=solid];
m8_127 -> m8_153  [key=0, style=solid];
m8_127 -> m8_155  [key=0, style=solid];
m8_127 -> m8_157  [key=0, style=solid];
m8_127 -> m8_163  [key=0, style=solid];
m8_127 -> m8_165  [key=0, style=solid];
m8_127 -> m8_168  [key=0, style=solid];
m8_127 -> m8_170  [key=0, style=solid];
m8_127 -> m8_175  [key=0, style=solid];
m8_127 -> m8_177  [key=0, style=solid];
m8_127 -> m8_184  [key=0, style=solid];
m8_129 -> m8_130  [key=0, style=solid];
m8_129 -> m8_131  [key=1, style=dashed, color=darkseagreen4, label=values];
m8_129 -> m8_137  [key=1, style=dashed, color=darkseagreen4, label=value];
m8_129 -> m8_11  [key=2, style=dotted];
m8_129 -> m8_108  [key=2, style=dotted];
m8_129 -> m8_132  [key=1, style=dashed, color=darkseagreen4, label=values];
m8_129 -> m8_138  [key=1, style=dashed, color=darkseagreen4, label=values];
m8_129 -> m8_139  [key=1, style=dashed, color=darkseagreen4, label=values];
m8_140 -> m8_141  [key=0, style=solid];
m8_140 -> m8_143  [key=1, style=dashed, color=darkseagreen4, label=value];
m8_140 -> m8_149  [key=1, style=dashed, color=darkseagreen4, label=value];
m8_140 -> m8_150  [key=1, style=dashed, color=darkseagreen4, label=value];
m8_140 -> m8_125  [key=0, style=bold, color=blue];
m8_158 -> m8_159  [key=0, style=solid];
m8_158 -> m8_160  [key=1, style=dashed, color=darkseagreen4, label=value];
m8_158 -> m8_161  [key=1, style=dashed, color=darkseagreen4, label=value];
m8_158 -> m8_162  [key=1, style=dashed, color=darkseagreen4, label=value];
m8_171 -> m8_172  [key=0, style=solid];
m8_171 -> m8_173  [key=1, style=dashed, color=darkseagreen4, label=value];
m8_171 -> m8_174  [key=1, style=dashed, color=darkseagreen4, label=value];
m8_178 -> m8_179  [key=0, style=solid];
m8_178 -> m8_180  [key=1, style=dashed, color=darkseagreen4, label=value];
m8_178 -> m8_181  [key=1, style=dashed, color=darkseagreen4, label=value];
m8_178 -> m8_182  [key=1, style=dashed, color=darkseagreen4, label=value];
m8_178 -> m8_183  [key=1, style=dashed, color=darkseagreen4, label=value];
m8_178 -> m8_169  [key=0, style=bold, color=blue];
m8_184 -> m8_185  [key=0, style=solid];
m8_184 -> m8_100  [key=2, style=dotted];
m8_184 -> m8_101  [key=2, style=dotted];
m8_184 -> m8_11  [key=2, style=dotted];
m8_184 -> m8_12  [key=2, style=dotted];
m8_128 -> m8_129  [key=0, style=solid];
m8_139 -> m8_140  [key=0, style=solid];
m8_139 -> m8_109  [key=2, style=dotted];
m8_151 -> m8_152  [key=0, style=solid];
m8_153 -> m8_154  [key=0, style=solid];
m8_153 -> m8_156  [key=2, style=dotted];
m8_155 -> m8_156  [key=0, style=solid];
m8_155 -> m8_150  [key=0, style=bold, color=blue];
m8_157 -> m8_158  [key=0, style=solid];
m8_163 -> m8_164  [key=0, style=solid];
m8_163 -> m8_11  [key=2, style=dotted];
m8_163 -> m8_108  [key=2, style=dotted];
m8_165 -> m8_166  [key=0, style=solid];
m8_168 -> m8_169  [key=0, style=solid];
m8_170 -> m8_171  [key=0, style=solid];
m8_175 -> m8_176  [key=0, style=solid];
m8_175 -> m8_109  [key=2, style=dotted];
m8_177 -> m8_178  [key=0, style=solid];
m8_177 -> m8_109  [key=2, style=dotted];
m8_130 -> m8_131  [key=0, style=solid];
m8_130 -> m8_135  [key=1, style=dashed, color=darkseagreen4, label=bases];
m8_130 -> m8_136  [key=1, style=dashed, color=darkseagreen4, label=bases];
m8_130 -> m8_109  [key=2, style=dotted];
m8_131 -> m8_132  [key=0, style=solid];
m8_131 -> m8_136  [key=0, style=solid];
m8_131 -> m8_133  [key=1, style=dashed, color=darkseagreen4, label=e];
m8_131 -> m8_134  [key=1, style=dashed, color=darkseagreen4, label=e];
m8_137 -> m8_138  [key=0, style=solid];
m8_137 -> m8_124  [key=2, style=dotted];
m8_137 -> m8_109  [key=2, style=dotted];
m8_135 -> m8_131  [key=0, style=solid];
m8_135 -> m8_135  [key=1, style=dashed, color=darkseagreen4, label=bases];
m8_135 -> m8_136  [key=1, style=dashed, color=darkseagreen4, label=bases];
m8_135 -> m8_109  [key=2, style=dotted];
m8_136 -> m8_137  [key=0, style=solid];
m8_136 -> m8_136  [key=1, style=dashed, color=darkseagreen4, label=bases];
m8_136 -> m8_138  [key=1, style=dashed, color=darkseagreen4, label=bases];
m8_136 -> m8_124  [key=2, style=dotted];
m8_136 -> m8_109  [key=2, style=dotted];
m8_132 -> m8_133  [key=0, style=solid];
m8_132 -> m8_135  [key=1, style=dashed, color=darkseagreen4, label=p];
m8_132 -> m8_136  [key=1, style=dashed, color=darkseagreen4, label=p];
m8_132 -> m8_137  [key=1, style=dashed, color=darkseagreen4, label=p];
m8_133 -> m8_134  [key=0, style=solid];
m8_133 -> m8_16  [key=2, style=dotted];
m8_133 -> m8_133  [key=1, style=dashed, color=darkseagreen4, label=size];
m8_133 -> m8_109  [key=2, style=dotted];
m8_134 -> m8_135  [key=0, style=solid];
m8_134 -> m8_16  [key=2, style=dotted];
m8_134 -> m8_134  [key=1, style=dashed, color=darkseagreen4, label=size];
m8_134 -> m8_109  [key=2, style=dotted];
m8_138 -> m8_185  [key=0, style=solid];
m8_138 -> m8_109  [key=2, style=dotted];
m8_138 -> m8_139  [key=0, style=solid];
m8_141 -> m8_142  [key=0, style=solid];
m8_141 -> m8_144  [key=1, style=dashed, color=darkseagreen4, label=size];
m8_141 -> m8_148  [key=1, style=dashed, color=darkseagreen4, label=size];
m8_143 -> m8_144  [key=0, style=solid];
m8_143 -> m8_148  [key=0, style=solid];
m8_143 -> m8_146  [key=1, style=dashed, color=darkseagreen4, label=c];
m8_143 -> m8_147  [key=1, style=dashed, color=darkseagreen4, label=personRef];
m8_149 -> m8_150  [key=0, style=solid];
m8_150 -> m8_185  [key=0, style=solid];
m8_150 -> m8_151  [key=0, style=solid];
m8_142 -> m8_143  [key=0, style=solid];
m8_142 -> m8_145  [key=1, style=dashed, color=darkseagreen4, label=index];
m8_142 -> m8_147  [key=1, style=dashed, color=darkseagreen4, label=employeeRef];
m8_142 -> m8_144  [key=1, style=dashed, color=darkseagreen4, label=employeeRef];
m8_144 -> m8_145  [key=0, style=solid];
m8_144 -> m8_144  [key=1, style=dashed, color=darkseagreen4, label=size];
m8_148 -> m8_149  [key=0, style=solid];
m8_148 -> m8_148  [key=1, style=dashed, color=darkseagreen4, label=size];
m8_148 -> m8_141  [key=0, style=bold, color=blue];
m8_145 -> m8_146  [key=0, style=solid];
m8_145 -> m8_88  [key=2, style=dotted];
m8_145 -> m8_120  [key=2, style=dotted];
m8_145 -> m8_145  [key=1, style=dashed, color=darkseagreen4, label=size];
m8_145 -> m8_11  [key=2, style=dotted];
m8_145 -> m8_148  [key=0, style=solid];
m8_145 -> m8_108  [key=2, style=dotted];
m8_147 -> m8_143  [key=0, style=solid];
m8_147 -> m8_147  [key=1, style=dashed, color=darkseagreen4, label=index];
m8_147 -> m8_148  [key=0, style=solid];
m8_147 -> m8_149  [key=2, style=dotted];
m8_147 -> m8_65  [key=2, style=dotted];
m8_146 -> m8_147  [key=0, style=solid];
m8_146 -> m8_16  [key=2, style=dotted];
m8_146 -> m8_146  [key=1, style=dashed, color=darkseagreen4, label=size];
m8_146 -> m8_148  [key=1, style=dashed, color=darkseagreen4, label=size];
m8_152 -> m8_185  [key=0, style=solid];
m8_152 -> m8_153  [key=0, style=solid];
m8_154 -> m8_185  [key=0, style=solid];
m8_154 -> m8_13  [key=2, style=dotted];
m8_154 -> m8_155  [key=0, style=solid];
m8_154 -> m8_157  [key=2, style=dotted];
m8_156 -> m8_185  [key=0, style=solid];
m8_159 -> m8_160  [key=0, style=solid];
m8_159 -> m8_163  [key=1, style=dashed, color=darkseagreen4, label=json];
m8_159 -> m8_159  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m8_160 -> m8_161  [key=0, style=solid];
m8_160 -> m8_186  [key=2, style=dotted];
m8_160 -> m8_162  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_160 -> m8_36  [key=2, style=dotted];
m8_161 -> m8_162  [key=0, style=solid];
m8_161 -> m8_123  [key=2, style=dotted];
m8_161 -> m8_158  [key=0, style=bold, color=blue];
m8_162 -> m8_185  [key=0, style=solid];
m8_162 -> m8_163  [key=0, style=solid];
m8_164 -> m8_185  [key=0, style=solid];
m8_164 -> m8_162  [key=0, style=bold, color=blue];
m8_166 -> m8_167  [key=0, style=solid];
m8_167 -> m8_185  [key=0, style=solid];
m8_169 -> m8_185  [key=0, style=solid];
m8_169 -> m8_170  [key=0, style=solid];
m8_172 -> m8_173  [key=0, style=solid];
m8_172 -> m8_11  [key=2, style=dotted];
m8_172 -> m8_179  [key=2, style=dotted];
m8_172 -> m8_174  [key=1, style=dashed, color=darkseagreen4, label=message];
m8_173 -> m8_174  [key=0, style=solid];
m8_173 -> m8_66  [key=2, style=dotted];
m8_174 -> m8_185  [key=0, style=solid];
m8_174 -> m8_175  [key=0, style=solid];
m8_174 -> m8_176  [key=1, style=dashed, color=darkseagreen4, label=request];
m8_174 -> m8_177  [key=1, style=dashed, color=darkseagreen4, label=request];
m8_176 -> m8_185  [key=0, style=solid];
m8_176 -> m8_109  [key=2, style=dotted];
m8_176 -> m8_177  [key=0, style=solid];
m8_179 -> m8_180  [key=0, style=solid];
m8_180 -> m8_181  [key=0, style=solid];
m8_180 -> m8_16  [key=2, style=dotted];
m8_180 -> m8_180  [key=1, style=dashed, color=darkseagreen4, label=size];
m8_181 -> m8_182  [key=0, style=solid];
m8_181 -> m8_16  [key=2, style=dotted];
m8_181 -> m8_181  [key=1, style=dashed, color=darkseagreen4, label=size];
m8_181 -> m8_185  [key=1, style=dashed, color=darkseagreen4, label=containerTypeName];
m8_182 -> m8_183  [key=0, style=solid];
m8_182 -> m8_185  [key=1, style=dashed, color=darkseagreen4, label=productListTypeName];
m8_183 -> m8_185  [key=0, style=solid];
m8_183 -> m8_6  [key=2, style=dotted];
m8_183 -> m8_184  [key=0, style=solid];
m8_183 -> m8_187  [key=2, style=dotted];
m8_185 -> m8_16  [key=0, style=bold, color=blue];
m8_185 -> m8_13  [key=2, style=dotted];
m8_185 -> m8_186  [key=0, style=solid];
m8_675 -> m8_676  [key=0, style=solid];
m8_677 -> m8_7  [key=2, style=dotted];
m8_677 -> m8_678  [key=0, style=solid];
m8_677 -> m8_682  [key=2, style=dotted];
m8_676 -> m8_11  [key=2, style=dotted];
m8_676 -> m8_677  [key=0, style=solid];
m8_676 -> m8_678  [key=1, style=dashed, color=darkseagreen4, label=serializerSettings];
m8_676 -> m8_679  [key=1, style=dashed, color=darkseagreen4, label=serializerSettings];
m8_678 -> m8_679  [key=0, style=solid];
m8_678 -> m8_605  [key=2, style=dotted];
m8_679 -> m8_346  [key=2, style=dotted];
m8_679 -> m8_680  [key=0, style=solid];
m8_680 -> m8_681  [key=0, style=solid];
m8_680 -> m8_321  [key=2, style=dotted];
m8_681 -> m8_675  [key=0, style=bold, color=blue];
m8_229 -> m8_230  [key=0, style=solid];
m8_231 -> m8_6  [key=2, style=dotted];
m8_231 -> m8_232  [key=0, style=solid];
m8_231 -> m8_243  [key=2, style=dotted];
m8_231 -> m8_244  [key=2, style=dotted];
m8_232 -> m8_11  [key=2, style=dotted];
m8_232 -> m8_12  [key=2, style=dotted];
m8_232 -> m8_233  [key=0, style=solid];
m8_232 -> m8_234  [key=1, style=dashed, color=darkseagreen4, label=json];
m8_234 -> m8_11  [key=2, style=dotted];
m8_234 -> m8_235  [key=0, style=solid];
m8_234 -> m8_242  [key=2, style=dotted];
m8_234 -> m8_179  [key=2, style=dotted];
m8_234 -> m8_236  [key=1, style=dashed, color=darkseagreen4, label=newValues];
m8_234 -> m8_238  [key=1, style=dashed, color=darkseagreen4, label=newValues];
m8_234 -> m8_239  [key=1, style=dashed, color=darkseagreen4, label=newValues];
m8_230 -> m8_231  [key=0, style=solid];
m8_230 -> m8_232  [key=1, style=dashed, color=darkseagreen4, label=binder];
m8_230 -> m8_242  [key=2, style=dotted];
m8_233 -> m8_13  [key=2, style=dotted];
m8_233 -> m8_234  [key=0, style=solid];
m8_235 -> m8_236  [key=0, style=solid];
m8_235 -> m8_66  [key=2, style=dotted];
m8_236 -> m8_237  [key=0, style=solid];
m8_238 -> m8_239  [key=0, style=solid];
m8_238 -> m8_66  [key=2, style=dotted];
m8_239 -> m8_240  [key=0, style=solid];
m8_237 -> m8_109  [key=2, style=dotted];
m8_237 -> m8_238  [key=0, style=solid];
m8_240 -> m8_109  [key=2, style=dotted];
m8_240 -> m8_241  [key=0, style=solid];
m8_241 -> m8_229  [key=0, style=bold, color=blue];
m8_62 -> m8_63  [key=0, style=solid];
m8_62 -> m8_96  [key=2, style=dotted];
m8_62 -> m8_62  [key=1, style=dashed, color=darkseagreen4, label=dateTime];
m8_90 -> m8_81  [key=0, style=bold, color=blue];
m8_4 -> m8_5  [key=0, style=solid];
m8_4 -> m8_0  [key=0, style=bold, color=blue];
m8_5 -> m8_6  [key=0, style=solid];
m8_5 -> m8_7  [key=2, style=dotted];
m8_6 -> m8_4  [key=0, style=bold, color=blue];
m8_85 -> m8_102  [key=0, style=solid];
m8_85 -> m8_103  [key=1, style=dashed, color=darkseagreen4, label="int?"];
m8_85 -> m8_104  [key=1, style=dashed, color=darkseagreen4, label=string];
m8_85 -> m8_11  [key=2, style=dotted];
m8_85 -> m8_12  [key=2, style=dotted];
m8_85 -> m8_86  [key=0, style=solid];
m8_85 -> m8_87  [key=1, style=dashed, color=darkseagreen4, label=json];
m8_102 -> m8_103  [key=0, style=solid];
m8_102 -> m8_104  [key=0, style=solid];
m8_102 -> m8_100  [key=2, style=dotted];
m8_103 -> m8_104  [key=0, style=solid];
m8_103 -> m8_83  [key=2, style=dotted];
m8_104 -> m8_105  [key=0, style=solid];
m8_104 -> m8_107  [key=2, style=dotted];
m8_104 -> m8_11  [key=2, style=dotted];
m8_104 -> m8_108  [key=2, style=dotted];
m8_104 -> m8_106  [key=1, style=dashed, color=darkseagreen4, label=employee];
m8_105 -> m8_106  [key=0, style=solid];
m8_105 -> m8_86  [key=2, style=dotted];
m8_105 -> m8_66  [key=2, style=dotted];
m8_106 -> m8_85  [key=0, style=bold, color=blue];
m8_106 -> m8_109  [key=2, style=dotted];
m8_106 -> m8_107  [key=0, style=solid];
m8_95 -> m8_98  [key=1, style=dashed, color=darkseagreen4, label=employeeRef];
m8_95 -> m8_96  [key=0, style=solid];
m8_95 -> m8_100  [key=2, style=dotted];
m8_696 -> m8_710  [key=0, style=solid];
m8_710 -> m8_711  [key=0, style=solid];
m8_711 -> m8_696  [key=0, style=bold, color=blue];
m8_281 -> m8_282  [key=0, style=solid];
m8_285 -> m8_6  [key=2, style=dotted];
m8_285 -> m8_286  [key=0, style=solid];
m8_285 -> m8_318  [key=2, style=dotted];
m8_284 -> m8_7  [key=2, style=dotted];
m8_284 -> m8_285  [key=0, style=solid];
m8_282 -> m8_285  [key=1, style=dashed, color=darkseagreen4, label=testObject];
m8_282 -> m8_284  [key=1, style=dashed, color=darkseagreen4, label=testObject];
m8_282 -> m8_283  [key=0, style=solid];
m8_282 -> m8_316  [key=2, style=dotted];
m8_282 -> m8_286  [key=1, style=dashed, color=darkseagreen4, label=testObject];
m8_282 -> m8_287  [key=1, style=dashed, color=darkseagreen4, label=testObject];
m8_282 -> m8_294  [key=1, style=dashed, color=darkseagreen4, label=testObject];
m8_286 -> m8_287  [key=0, style=solid];
m8_286 -> m8_317  [key=2, style=dotted];
m8_286 -> m8_319  [key=2, style=dotted];
m8_283 -> m8_284  [key=0, style=solid];
m8_283 -> m8_317  [key=2, style=dotted];
m8_300 -> m8_13  [key=2, style=dotted];
m8_300 -> m8_301  [key=0, style=solid];
m8_287 -> m8_288  [key=0, style=solid];
m8_287 -> m8_317  [key=2, style=dotted];
m8_294 -> m8_320  [key=2, style=dotted];
m8_294 -> m8_295  [key=0, style=solid];
m8_290 -> m8_59  [key=2, style=dotted];
m8_290 -> m8_291  [key=0, style=solid];
m8_290 -> m8_295  [key=1, style=dashed, color=darkseagreen4, label=sw];
m8_291 -> m8_60  [key=2, style=dotted];
m8_291 -> m8_294  [key=1, style=dashed, color=darkseagreen4, label=jsonWriter];
m8_291 -> m8_292  [key=0, style=solid];
m8_310 -> m8_109  [key=2, style=dotted];
m8_310 -> m8_311  [key=0, style=solid];
m8_313 -> m8_109  [key=2, style=dotted];
m8_313 -> m8_314  [key=0, style=solid];
m8_295 -> m8_300  [key=1, style=dashed, color=darkseagreen4, label=json];
m8_295 -> m8_63  [key=2, style=dotted];
m8_295 -> m8_296  [key=0, style=solid];
m8_295 -> m8_301  [key=1, style=dashed, color=darkseagreen4, label=json];
m8_299 -> m8_300  [key=0, style=solid];
m8_301 -> m8_44  [key=2, style=dotted];
m8_301 -> m8_302  [key=0, style=solid];
m8_301 -> m8_304  [key=1, style=dashed, color=darkseagreen4, label=sr];
m8_296 -> m8_100  [key=2, style=dotted];
m8_296 -> m8_299  [key=1, style=dashed, color=darkseagreen4, label=contentSubClassRef];
m8_296 -> m8_297  [key=0, style=solid];
m8_297 -> m8_100  [key=2, style=dotted];
m8_297 -> m8_299  [key=1, style=dashed, color=darkseagreen4, label=dictionaryRef];
m8_297 -> m8_298  [key=0, style=solid];
m8_298 -> m8_100  [key=2, style=dotted];
m8_298 -> m8_299  [key=0, style=solid];
m8_288 -> m8_294  [key=1, style=dashed, color=darkseagreen4, label=serializingTester];
m8_288 -> m8_46  [key=2, style=dotted];
m8_288 -> m8_289  [key=0, style=solid];
m8_288 -> m8_293  [key=1, style=dashed, color=darkseagreen4, label=serializingTester];
m8_293 -> m8_294  [key=0, style=solid];
m8_302 -> m8_46  [key=2, style=dotted];
m8_302 -> m8_303  [key=0, style=solid];
m8_302 -> m8_305  [key=1, style=dashed, color=darkseagreen4, label=deserializingTester];
m8_302 -> m8_306  [key=1, style=dashed, color=darkseagreen4, label=deserializingTester];
m8_289 -> m8_290  [key=0, style=solid];
m8_304 -> m8_43  [key=2, style=dotted];
m8_304 -> m8_305  [key=0, style=solid];
m8_304 -> m8_306  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m8_306 -> m8_47  [key=2, style=dotted];
m8_306 -> m8_310  [key=1, style=dashed, color=darkseagreen4, label=anotherTestObject];
m8_306 -> m8_307  [key=0, style=solid];
m8_306 -> m8_308  [key=1, style=dashed, color=darkseagreen4, label=anotherTestObject];
m8_306 -> m8_309  [key=1, style=dashed, color=darkseagreen4, label=anotherTestObject];
m8_306 -> m8_311  [key=1, style=dashed, color=darkseagreen4, label=anotherTestObject];
m8_292 -> m8_293  [key=0, style=solid];
m8_309 -> m8_310  [key=0, style=solid];
m8_309 -> m8_66  [key=2, style=dotted];
m8_311 -> m8_313  [key=1, style=dashed, color=darkseagreen4, label=list];
m8_311 -> m8_312  [key=0, style=solid];
m8_311 -> m8_314  [key=1, style=dashed, color=darkseagreen4, label=list];
m8_312 -> m8_313  [key=0, style=solid];
m8_312 -> m8_66  [key=2, style=dotted];
m8_314 -> m8_66  [key=2, style=dotted];
m8_314 -> m8_315  [key=0, style=solid];
m8_308 -> m8_66  [key=2, style=dotted];
m8_308 -> m8_309  [key=0, style=solid];
m8_303 -> m8_304  [key=0, style=solid];
m8_305 -> m8_306  [key=0, style=solid];
m8_307 -> m8_308  [key=0, style=solid];
m8_307 -> m8_321  [key=2, style=dotted];
m8_315 -> m8_281  [key=0, style=bold, color=blue];
m8_405 -> m8_2  [key=3, color=darkorchid, style=bold, label="Parameter variable Newtonsoft.Json.TypeNameHandling flag"];
m8_405 -> m8_406  [key=0, style=solid];
m8_405 -> m8_408  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.TypeNameHandling"];
m8_405 -> m8_409  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.SerializableWrapper"];
m8_405 -> m8_411  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.SerializableWrapper"];
m8_405 -> m8_398  [key=3, color=darkorchid, style=bold, label="Parameter variable Newtonsoft.Json.Tests.Serialization.SerializableWrapper e"];
m8_405 -> m8_399  [key=3, color=darkorchid, style=bold, label="Parameter variable Newtonsoft.Json.TypeNameHandling flag"];
m8_405 -> m8_400  [key=3, color=darkorchid, style=bold, label="Parameter variable Newtonsoft.Json.TypeNameHandling flag"];
m8_406 -> m8_407  [key=0, style=solid];
m8_406 -> m8_59  [key=2, style=dotted];
m8_406 -> m8_409  [key=1, style=dashed, color=darkseagreen4, label=writer];
m8_406 -> m8_410  [key=1, style=dashed, color=darkseagreen4, label=writer];
m8_408 -> m8_409  [key=0, style=solid];
m8_409 -> m8_410  [key=0, style=solid];
m8_409 -> m8_60  [key=2, style=dotted];
m8_409 -> m8_320  [key=2, style=dotted];
m8_411 -> m8_412  [key=0, style=solid];
m8_411 -> m8_109  [key=2, style=dotted];
m8_407 -> m8_408  [key=0, style=solid];
m8_407 -> m8_409  [key=1, style=dashed, color=darkseagreen4, label=serializer];
m8_407 -> m8_46  [key=2, style=dotted];
m8_407 -> m8_410  [key=1, style=dashed, color=darkseagreen4, label=serializer];
m8_410 -> m8_411  [key=0, style=solid];
m8_410 -> m8_43  [key=2, style=dotted];
m8_410 -> m8_44  [key=2, style=dotted];
m8_410 -> m8_63  [key=2, style=dotted];
m8_410 -> m8_47  [key=2, style=dotted];
m8_412 -> m8_405  [key=0, style=bold, color=blue];
m8_472 -> m8_473  [key=0, style=solid];
m8_481 -> m8_13  [key=2, style=dotted];
m8_481 -> m8_482  [key=0, style=solid];
m8_488 -> m8_13  [key=2, style=dotted];
m8_488 -> m8_489  [key=0, style=solid];
m8_488 -> m8_491  [key=2, style=dotted];
m8_474 -> m8_455  [key=2, style=dotted];
m8_474 -> m8_475  [key=0, style=solid];
m8_476 -> m8_455  [key=2, style=dotted];
m8_476 -> m8_477  [key=0, style=solid];
m8_485 -> m8_109  [key=2, style=dotted];
m8_485 -> m8_486  [key=0, style=solid];
m8_479 -> m8_481  [key=1, style=dashed, color=darkseagreen4, label=json];
m8_479 -> m8_201  [key=2, style=dotted];
m8_479 -> m8_480  [key=0, style=solid];
m8_479 -> m8_482  [key=1, style=dashed, color=darkseagreen4, label=json];
m8_480 -> m8_481  [key=0, style=solid];
m8_480 -> m8_480  [key=3, color=darkorchid, style=bold, label="Local variable string expected"];
m8_482 -> m8_488  [key=1, style=dashed, color=darkseagreen4, label=o2];
m8_482 -> m8_485  [key=1, style=dashed, color=darkseagreen4, label=o2];
m8_482 -> m8_483  [key=0, style=solid];
m8_482 -> m8_93  [key=2, style=dotted];
m8_482 -> m8_484  [key=1, style=dashed, color=darkseagreen4, label=o2];
m8_482 -> m8_486  [key=1, style=dashed, color=darkseagreen4, label=o2];
m8_482 -> m8_487  [key=1, style=dashed, color=darkseagreen4, label=o2];
m8_487 -> m8_488  [key=0, style=solid];
m8_487 -> m8_66  [key=2, style=dotted];
m8_473 -> m8_474  [key=0, style=solid];
m8_473 -> m8_476  [key=1, style=dashed, color=darkseagreen4, label=o1];
m8_473 -> m8_479  [key=1, style=dashed, color=darkseagreen4, label=o1];
m8_473 -> m8_490  [key=2, style=dotted];
m8_473 -> m8_475  [key=1, style=dashed, color=darkseagreen4, label=o1];
m8_473 -> m8_477  [key=1, style=dashed, color=darkseagreen4, label=o1];
m8_473 -> m8_478  [key=1, style=dashed, color=darkseagreen4, label=o1];
m8_475 -> m8_476  [key=0, style=solid];
m8_477 -> m8_478  [key=0, style=solid];
m8_484 -> m8_485  [key=0, style=solid];
m8_484 -> m8_66  [key=2, style=dotted];
m8_486 -> m8_487  [key=0, style=solid];
m8_486 -> m8_66  [key=2, style=dotted];
m8_478 -> m8_479  [key=0, style=solid];
m8_483 -> m8_484  [key=0, style=solid];
m8_483 -> m8_321  [key=2, style=dotted];
m8_489 -> m8_472  [key=0, style=bold, color=blue];
m8_108 -> m8_109  [key=0, style=solid];
m8_108 -> m8_116  [key=0, style=solid];
m8_364 -> m8_365  [key=0, style=solid];
m8_364 -> m8_367  [key=0, style=bold, color=crimson];
m8_364 -> m8_366  [key=0, style=bold, color=crimson];
m8_364 -> m8_371  [key=0, style=bold, color=crimson];
m8_365 -> m8_366  [key=0, style=solid];
m8_365 -> m8_367  [key=0, style=solid];
m8_367 -> m8_368  [key=0, style=solid];
m8_368 -> m8_369  [key=0, style=solid];
m8_368 -> m8_370  [key=1, style=dashed, color=darkseagreen4, label=nextInLine];
m8_368 -> m8_371  [key=1, style=dashed, color=darkseagreen4, label=nextInLine];
m8_368 -> m8_372  [key=1, style=dashed, color=darkseagreen4, label=nextInLine];
m8_366 -> m8_367  [key=0, style=solid];
m8_369 -> m8_370  [key=0, style=solid];
m8_369 -> m8_373  [key=0, style=solid];
m8_370 -> m8_371  [key=0, style=solid];
m8_370 -> m8_372  [key=0, style=solid];
m8_371 -> m8_372  [key=0, style=solid];
m8_372 -> m8_369  [key=0, style=solid];
m8_372 -> m8_372  [key=1, style=dashed, color=darkseagreen4, label=nextInLine];
m8_373 -> m8_364  [key=0, style=bold, color=blue];
m8_17 -> m8_18  [key=0, style=solid];
m8_17 -> m8_20  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonToken"];
m8_17 -> m8_28  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonToken"];
m8_17 -> m8_38  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonToken"];
m8_17 -> m8_41  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonToken"];
m8_17 -> m8_44  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonToken"];
m8_17 -> m8_47  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonToken"];
m8_17 -> m8_50  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonToken"];
m8_17 -> m8_55  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonToken"];
m8_17 -> m8_68  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonToken"];
m8_17 -> m8_74  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonToken"];
m8_17 -> m8_78  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonToken"];
m8_17 -> m8_81  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonToken"];
m8_17 -> m8_13  [key=2, style=dotted];
m8_18 -> m8_19  [key=0, style=solid];
m8_18 -> m8_27  [key=0, style=solid];
m8_18 -> m8_37  [key=0, style=solid];
m8_18 -> m8_40  [key=0, style=solid];
m8_18 -> m8_43  [key=0, style=solid];
m8_18 -> m8_46  [key=0, style=solid];
m8_18 -> m8_49  [key=0, style=solid];
m8_18 -> m8_52  [key=0, style=solid];
m8_18 -> m8_54  [key=0, style=solid];
m8_18 -> m8_67  [key=0, style=solid];
m8_18 -> m8_73  [key=0, style=solid];
m8_18 -> m8_77  [key=0, style=solid];
m8_18 -> m8_81  [key=0, style=solid];
m8_18 -> m8_14  [key=0, style=bold, color=blue];
m8_20 -> m8_21  [key=0, style=solid];
m8_20 -> m8_22  [key=1, style=dashed, color=darkseagreen4, label=value];
m8_38 -> m8_39  [key=0, style=solid];
m8_38 -> m8_43  [key=2, style=dotted];
m8_38 -> m8_44  [key=2, style=dotted];
m8_38 -> m8_45  [key=2, style=dotted];
m8_38 -> m8_41  [key=1, style=dashed, color=darkseagreen4, label=reader];
m8_41 -> m8_42  [key=0, style=solid];
m8_41 -> m8_47  [key=2, style=dotted];
m8_44 -> m8_45  [key=0, style=solid];
m8_47 -> m8_48  [key=0, style=solid];
m8_68 -> m8_69  [key=0, style=solid];
m8_68 -> m8_71  [key=1, style=dashed, color=darkseagreen4, label=value];
m8_68 -> m8_11  [key=2, style=dotted];
m8_68 -> m8_61  [key=2, style=dotted];
m8_74 -> m8_75  [key=0, style=solid];
m8_74 -> m8_13  [key=2, style=dotted];
m8_81 -> m8_82  [key=0, style=solid];
m8_81 -> m8_100  [key=2, style=dotted];
m8_81 -> m8_101  [key=2, style=dotted];
m8_19 -> m8_20  [key=0, style=solid];
m8_37 -> m8_38  [key=0, style=solid];
m8_40 -> m8_41  [key=0, style=solid];
m8_43 -> m8_44  [key=0, style=solid];
m8_46 -> m8_47  [key=0, style=solid];
m8_67 -> m8_68  [key=0, style=solid];
m8_73 -> m8_74  [key=0, style=solid];
m8_73 -> m8_11  [key=2, style=dotted];
m8_73 -> m8_61  [key=2, style=dotted];
m8_73 -> m8_71  [key=2, style=dotted];
m8_21 -> m8_22  [key=0, style=solid];
m8_21 -> m8_83  [key=2, style=dotted];
m8_21 -> m8_6  [key=2, style=dotted];
m8_21 -> m8_25  [key=2, style=dotted];
m8_21 -> m8_19  [key=2, style=dotted];
m8_22 -> m8_23  [key=0, style=solid];
m8_22 -> m8_26  [key=0, style=solid];
m8_22 -> m8_24  [key=1, style=dashed, color=darkseagreen4, label=property];
m8_22 -> m8_25  [key=1, style=dashed, color=darkseagreen4, label=property];
m8_22 -> m8_11  [key=2, style=dotted];
m8_22 -> m8_12  [key=2, style=dotted];
m8_23 -> m8_24  [key=0, style=solid];
m8_23 -> m8_84  [key=2, style=dotted];
m8_23 -> m8_13  [key=2, style=dotted];
m8_24 -> m8_25  [key=0, style=solid];
m8_24 -> m8_85  [key=2, style=dotted];
m8_24 -> m8_20  [key=0, style=bold, color=blue];
m8_25 -> m8_22  [key=0, style=solid];
m8_25 -> m8_17  [key=2, style=dotted];
m8_35 -> m8_31  [key=0, style=solid];
m8_35 -> m8_35  [key=1, style=dashed, color=darkseagreen4, label=index];
m8_39 -> m8_82  [key=0, style=solid];
m8_39 -> m8_89  [key=2, style=dotted];
m8_39 -> m8_83  [key=2, style=dotted];
m8_39 -> m8_46  [key=2, style=dotted];
m8_39 -> m8_40  [key=0, style=solid];
m8_39 -> m8_41  [key=1, style=dashed, color=darkseagreen4, label=ser];
m8_42 -> m8_82  [key=0, style=solid];
m8_42 -> m8_90  [key=2, style=dotted];
m8_42 -> m8_91  [key=2, style=dotted];
m8_42 -> m8_37  [key=0, style=bold, color=blue];
m8_45 -> m8_82  [key=0, style=solid];
m8_45 -> m8_92  [key=2, style=dotted];
m8_45 -> m8_93  [key=2, style=dotted];
m8_64 -> m8_65  [key=0, style=solid];
m8_59 -> m8_60  [key=0, style=solid];
m8_59 -> m8_61  [key=0, style=solid];
m8_60 -> m8_63  [key=0, style=solid];
m8_60 -> m8_95  [key=2, style=dotted];
m8_60 -> m8_60  [key=1, style=dashed, color=darkseagreen4, label=dateTime];
m8_61 -> m8_62  [key=0, style=solid];
m8_61 -> m8_63  [key=0, style=solid];
m8_66 -> m8_82  [key=0, style=solid];
m8_66 -> m8_91  [key=2, style=dotted];
m8_69 -> m8_70  [key=0, style=solid];
m8_69 -> m8_72  [key=1, style=dashed, color=darkseagreen4, label=data];
m8_69 -> m8_13  [key=2, style=dotted];
m8_71 -> m8_72  [key=0, style=solid];
m8_71 -> m8_86  [key=2, style=dotted];
m8_70 -> m8_71  [key=0, style=solid];
m8_70 -> m8_83  [key=2, style=dotted];
m8_70 -> m8_67  [key=0, style=bold, color=blue];
m8_72 -> m8_82  [key=0, style=solid];
m8_72 -> m8_99  [key=2, style=dotted];
m8_72 -> m8_73  [key=0, style=solid];
m8_75 -> m8_76  [key=0, style=solid];
m8_75 -> m8_72  [key=0, style=bold, color=blue];
m8_80 -> m8_82  [key=0, style=solid];
m8_80 -> m8_85  [key=2, style=dotted];
m8_82 -> m8_17  [key=0, style=bold, color=blue];
m8_82 -> m8_83  [key=0, style=solid];
m8_82 -> m8_84  [key=1, style=dashed, color=darkseagreen4, label=wrapper];
m8_82 -> m8_85  [key=1, style=dashed, color=darkseagreen4, label=wrapper];
m8_82 -> m8_91  [key=2, style=dotted];
m8_492 -> m8_493  [key=0, style=solid];
m8_494 -> m8_6  [key=2, style=dotted];
m8_494 -> m8_495  [key=0, style=solid];
m8_494 -> m8_455  [key=2, style=dotted];
m8_493 -> m8_494  [key=0, style=solid];
m8_493 -> m8_505  [key=2, style=dotted];
m8_493 -> m8_495  [key=1, style=dashed, color=darkseagreen4, label=c1];
m8_495 -> m8_496  [key=0, style=solid];
m8_495 -> m8_201  [key=2, style=dotted];
m8_495 -> m8_497  [key=1, style=dashed, color=darkseagreen4, label=json];
m8_496 -> m8_13  [key=2, style=dotted];
m8_496 -> m8_497  [key=0, style=solid];
m8_497 -> m8_498  [key=0, style=solid];
m8_497 -> m8_93  [key=2, style=dotted];
m8_497 -> m8_499  [key=1, style=dashed, color=darkseagreen4, label=c2];
m8_497 -> m8_500  [key=1, style=dashed, color=darkseagreen4, label=c2];
m8_497 -> m8_501  [key=1, style=dashed, color=darkseagreen4, label=c2];
m8_497 -> m8_502  [key=1, style=dashed, color=darkseagreen4, label=c2];
m8_498 -> m8_109  [key=2, style=dotted];
m8_498 -> m8_499  [key=0, style=solid];
m8_503 -> m8_109  [key=2, style=dotted];
m8_503 -> m8_504  [key=0, style=solid];
m8_499 -> m8_66  [key=2, style=dotted];
m8_499 -> m8_500  [key=0, style=solid];
m8_500 -> m8_66  [key=2, style=dotted];
m8_500 -> m8_501  [key=0, style=solid];
m8_501 -> m8_66  [key=2, style=dotted];
m8_501 -> m8_502  [key=0, style=solid];
m8_502 -> m8_503  [key=0, style=solid];
m8_504 -> m8_492  [key=0, style=bold, color=blue];
m8_110 -> m8_111  [key=0, style=solid];
m8_113 -> m8_11  [key=2, style=dotted];
m8_113 -> m8_114  [key=0, style=solid];
m8_113 -> m8_108  [key=2, style=dotted];
m8_113 -> m8_116  [key=0, style=solid];
m8_113 -> m8_118  [key=2, style=dotted];
m8_112 -> m8_113  [key=0, style=solid];
m8_112 -> m8_117  [key=2, style=dotted];
m8_114 -> m8_115  [key=0, style=solid];
m8_114 -> m8_66  [key=2, style=dotted];
m8_114 -> m8_119  [key=2, style=dotted];
m8_111 -> m8_112  [key=0, style=solid];
m8_111 -> m8_100  [key=2, style=dotted];
m8_111 -> m8_114  [key=0, style=solid];
m8_115 -> m8_110  [key=0, style=bold, color=blue];
m8_115 -> m8_116  [key=0, style=solid];
m8_115 -> m8_99  [key=2, style=dotted];
m8_347 -> m8_348  [key=0, style=solid];
m8_350 -> m8_11  [key=2, style=dotted];
m8_350 -> m8_12  [key=2, style=dotted];
m8_350 -> m8_351  [key=0, style=solid];
m8_351 -> m8_13  [key=2, style=dotted];
m8_351 -> m8_352  [key=0, style=solid];
m8_349 -> m8_350  [key=0, style=solid];
m8_349 -> m8_353  [key=2, style=dotted];
m8_348 -> m8_351  [key=1, style=dashed, color=darkseagreen4, label=productClassRef];
m8_348 -> m8_349  [key=0, style=solid];
m8_348 -> m8_100  [key=2, style=dotted];
m8_352 -> m8_347  [key=0, style=bold, color=blue];
m8_117 -> m8_118  [key=0, style=solid];
m8_117 -> m8_121  [key=1, style=dashed, color=darkseagreen4, label=employeeRef];
m8_99 -> m8_94  [key=0, style=bold, color=blue];
m8_0 -> m8_1  [key=0, style=solid, color=green];
m8_0 -> m8_2  [key=1, style=dashed, color=darkseagreen4, label="System.IO.BinaryWriter"];
m8_1 -> m8_2  [key=0, style=solid, color=green];
m8_1 -> m8_5  [key=2, style=dotted, color=green];
m8_1 -> m8_6  [key=2, style=dotted, color=green];
m8_1 -> m8_7  [key=2, style=dotted, color=green];
m8_1 -> m8_8  [key=2, style=dotted, color=green];
m8_1 -> m8_9  [key=2, style=dotted, color=green];
m8_1 -> m8_10  [key=2, style=dotted, color=green];
m8_2 -> m8_3  [key=0, style=solid];
m8_2 -> m8_11  [key=2, style=dotted];
m8_2 -> m8_12  [key=2, style=dotted];
m8_3 -> m8_4  [key=0, style=solid];
m8_3 -> m8_13  [key=2, style=dotted];
m8_3 -> m8_0  [key=0, style=bold, color=blue];
m8_89 -> m8_90  [key=0, style=solid];
m8_89 -> m8_66  [key=2, style=dotted];
m8_396 -> m8_397  [key=0, style=solid];
m8_399 -> m8_405  [key=2, style=dotted];
m8_399 -> m8_400  [key=0, style=solid];
m8_400 -> m8_405  [key=2, style=dotted];
m8_400 -> m8_401  [key=0, style=solid];
m8_401 -> m8_405  [key=2, style=dotted];
m8_401 -> m8_402  [key=0, style=solid];
m8_398 -> m8_399  [key=0, style=solid];
m8_398 -> m8_400  [key=1, style=dashed, color=darkseagreen4, label=w];
m8_398 -> m8_401  [key=1, style=dashed, color=darkseagreen4, label=w];
m8_398 -> m8_404  [key=2, style=dotted];
m8_397 -> m8_398  [key=0, style=solid];
m8_397 -> m8_403  [key=2, style=dotted];
m8_402 -> m8_396  [key=0, style=bold, color=blue];
m8_12 -> m8_13  [key=0, style=solid];
m8_12 -> m8_14  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonToken"];
m8_13 -> m8_14  [key=0, style=solid];
m8_13 -> m8_16  [key=2, style=dotted];
m8_14 -> m8_15  [key=0, style=solid];
m8_14 -> m8_17  [key=2, style=dotted];
m8_15 -> m8_12  [key=0, style=bold, color=blue];
m8_15 -> m8_7  [key=2, style=dotted];
m8_15 -> m8_16  [key=0, style=solid];
m8_15 -> m8_19  [key=2, style=dotted];
m8_374 -> m8_375  [key=0, style=solid];
m8_374 -> m8_364  [key=3, color=darkorchid, style=bold, label="method methodReturn System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator"];
m8_375 -> m8_376  [key=0, style=solid];
m8_375 -> m8_364  [key=2, style=dotted];
m8_376 -> m8_374  [key=0, style=bold, color=blue];
m8_83 -> m8_6  [key=2, style=dotted];
m8_83 -> m8_84  [key=0, style=solid];
m8_83 -> m8_92  [key=2, style=dotted];
m8_84 -> m8_7  [key=2, style=dotted];
m8_84 -> m8_85  [key=0, style=solid];
m8_84 -> m8_92  [key=2, style=dotted];
m8_86 -> m8_13  [key=2, style=dotted];
m8_86 -> m8_87  [key=0, style=solid];
m8_88 -> m8_89  [key=0, style=solid];
m8_88 -> m8_66  [key=2, style=dotted];
m8_742 -> m8_743  [key=0, style=solid];
m8_743 -> m8_744  [key=0, style=solid];
m8_743 -> m8_722  [key=2, style=dotted];
m8_744 -> m8_742  [key=0, style=bold, color=blue];
m8_506 -> m8_507  [key=0, style=solid];
m8_507 -> m8_6  [key=2, style=dotted];
m8_507 -> m8_508  [key=0, style=solid];
m8_507 -> m8_505  [key=2, style=dotted];
m8_507 -> m8_455  [key=2, style=dotted];
m8_508 -> m8_509  [key=0, style=solid];
m8_508 -> m8_201  [key=2, style=dotted];
m8_508 -> m8_510  [key=1, style=dashed, color=darkseagreen4, label=json];
m8_509 -> m8_13  [key=2, style=dotted];
m8_509 -> m8_510  [key=0, style=solid];
m8_510 -> m8_511  [key=0, style=solid];
m8_510 -> m8_93  [key=2, style=dotted];
m8_510 -> m8_512  [key=1, style=dashed, color=darkseagreen4, label=c2];
m8_510 -> m8_513  [key=1, style=dashed, color=darkseagreen4, label=c2];
m8_510 -> m8_514  [key=1, style=dashed, color=darkseagreen4, label=c2];
m8_511 -> m8_109  [key=2, style=dotted];
m8_511 -> m8_512  [key=0, style=solid];
m8_518 -> m8_109  [key=2, style=dotted];
m8_518 -> m8_519  [key=0, style=solid];
m8_524 -> m8_109  [key=2, style=dotted];
m8_524 -> m8_525  [key=0, style=solid];
m8_512 -> m8_66  [key=2, style=dotted];
m8_512 -> m8_513  [key=0, style=solid];
m8_513 -> m8_66  [key=2, style=dotted];
m8_513 -> m8_514  [key=0, style=solid];
m8_514 -> m8_515  [key=0, style=solid];
m8_517 -> m8_518  [key=0, style=solid];
m8_517 -> m8_93  [key=2, style=dotted];
m8_517 -> m8_519  [key=1, style=dashed, color=darkseagreen4, label=c2];
m8_517 -> m8_520  [key=1, style=dashed, color=darkseagreen4, label=c2];
m8_517 -> m8_521  [key=1, style=dashed, color=darkseagreen4, label=c2];
m8_519 -> m8_66  [key=2, style=dotted];
m8_519 -> m8_520  [key=0, style=solid];
m8_523 -> m8_524  [key=0, style=solid];
m8_515 -> m8_66  [key=2, style=dotted];
m8_515 -> m8_516  [key=0, style=solid];
m8_520 -> m8_66  [key=2, style=dotted];
m8_520 -> m8_521  [key=0, style=solid];
m8_522 -> m8_66  [key=2, style=dotted];
m8_522 -> m8_523  [key=0, style=solid];
m8_516 -> m8_517  [key=0, style=solid];
m8_521 -> m8_523  [key=1, style=dashed, color=darkseagreen4, label=c];
m8_521 -> m8_522  [key=0, style=solid];
m8_525 -> m8_506  [key=0, style=bold, color=blue];
m8_187 -> m8_1  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonBinaryWriter"];
m8_187 -> m8_2  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonBinaryWriter"];
m8_187 -> m8_5  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonBinaryWriter"];
m8_187 -> m8_9  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonBinaryWriter"];
m8_187 -> m8_13  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonBinaryWriter"];
m8_187 -> m8_14  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonBinaryWriter"];
m8_187 -> m8_21  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonBinaryWriter"];
m8_187 -> m8_23  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonBinaryWriter"];
m8_187 -> m8_24  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonBinaryWriter"];
m8_187 -> m8_25  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonBinaryWriter"];
m8_187 -> m8_26  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonBinaryWriter"];
m8_187 -> m8_29  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonBinaryWriter"];
m8_187 -> m8_32  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonBinaryWriter"];
m8_187 -> m8_33  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonBinaryWriter"];
m8_187 -> m8_34  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonBinaryWriter"];
m8_187 -> m8_36  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonBinaryWriter"];
m8_187 -> m8_39  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonBinaryWriter"];
m8_187 -> m8_42  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonBinaryWriter"];
m8_187 -> m8_45  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonBinaryWriter"];
m8_187 -> m8_48  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonBinaryWriter"];
m8_187 -> m8_51  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonBinaryWriter"];
m8_187 -> m8_59  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonBinaryWriter"];
m8_187 -> m8_61  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonBinaryWriter"];
m8_187 -> m8_66  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonBinaryWriter"];
m8_187 -> m8_70  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonBinaryWriter"];
m8_187 -> m8_71  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonBinaryWriter"];
m8_187 -> m8_72  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonBinaryWriter"];
m8_187 -> m8_76  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonBinaryWriter"];
m8_187 -> m8_79  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonBinaryWriter"];
m8_187 -> m8_80  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonBinaryWriter"];
m8_187 -> m8_103  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonBinaryWriter"];
m8_187 -> m8_104  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonBinaryWriter"];
m8_187 -> m8_105  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonBinaryWriter"];
m8_187 -> m8_109  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonBinaryWriter"];
m8_187 -> m8_110  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonBinaryWriter"];
m8_187 -> m8_112  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonBinaryWriter"];
m8_187 -> m8_113  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonBinaryWriter"];
m8_187 -> m8_115  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonBinaryWriter"];
m8_187 -> m8_133  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonBinaryWriter"];
m8_187 -> m8_134  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonBinaryWriter"];
m8_187 -> m8_145  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonBinaryWriter"];
m8_187 -> m8_146  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonBinaryWriter"];
m8_187 -> m8_161  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonBinaryWriter"];
m8_187 -> m8_180  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonBinaryWriter"];
m8_187 -> m8_181  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Bson.BsonBinaryWriter"];
m8_94 -> m8_95  [key=0, style=solid];
m8_101 -> m8_102  [key=0, style=solid];
m8_270 -> m8_271  [key=0, style=solid];
m8_271 -> m8_272  [key=0, style=solid];
m8_272 -> m8_270  [key=0, style=bold, color=blue];
m8_107 -> m8_101  [key=0, style=bold, color=blue];
m8_107 -> m8_108  [key=0, style=solid];
m8_107 -> m8_111  [key=1, style=dashed, color=darkseagreen4, label=int];
m8_107 -> m8_112  [key=1, style=dashed, color=darkseagreen4, label=string];
m8_107 -> m8_113  [key=1, style=dashed, color=darkseagreen4, label=int];
m8_107 -> m8_114  [key=1, style=dashed, color=darkseagreen4, label=string];
m8_457 -> m8_458  [key=0, style=solid];
m8_463 -> m8_13  [key=2, style=dotted];
m8_463 -> m8_464  [key=0, style=solid];
m8_459 -> m8_318  [key=2, style=dotted];
m8_459 -> m8_455  [key=2, style=dotted];
m8_459 -> m8_460  [key=0, style=solid];
m8_460 -> m8_318  [key=2, style=dotted];
m8_460 -> m8_461  [key=0, style=solid];
m8_461 -> m8_318  [key=2, style=dotted];
m8_461 -> m8_462  [key=0, style=solid];
m8_465 -> m8_109  [key=2, style=dotted];
m8_465 -> m8_466  [key=0, style=solid];
m8_467 -> m8_109  [key=2, style=dotted];
m8_467 -> m8_468  [key=0, style=solid];
m8_462 -> m8_463  [key=0, style=solid];
m8_462 -> m8_201  [key=2, style=dotted];
m8_462 -> m8_464  [key=1, style=dashed, color=darkseagreen4, label=json];
m8_464 -> m8_465  [key=0, style=solid];
m8_464 -> m8_467  [key=1, style=dashed, color=darkseagreen4, label=l2];
m8_464 -> m8_93  [key=2, style=dotted];
m8_464 -> m8_466  [key=1, style=dashed, color=darkseagreen4, label=l2];
m8_464 -> m8_468  [key=1, style=dashed, color=darkseagreen4, label=l2];
m8_464 -> m8_469  [key=1, style=dashed, color=darkseagreen4, label=l2];
m8_458 -> m8_459  [key=0, style=solid];
m8_458 -> m8_460  [key=1, style=dashed, color=darkseagreen4, label=l];
m8_458 -> m8_461  [key=1, style=dashed, color=darkseagreen4, label=l];
m8_458 -> m8_462  [key=1, style=dashed, color=darkseagreen4, label=l];
m8_458 -> m8_471  [key=2, style=dotted];
m8_466 -> m8_467  [key=0, style=solid];
m8_466 -> m8_66  [key=2, style=dotted];
m8_468 -> m8_66  [key=2, style=dotted];
m8_468 -> m8_469  [key=0, style=solid];
m8_469 -> m8_66  [key=2, style=dotted];
m8_469 -> m8_470  [key=0, style=solid];
m8_470 -> m8_457  [key=0, style=bold, color=blue];
m8_413 -> m8_414  [key=0, style=solid];
m8_415 -> m8_11  [key=2, style=dotted];
m8_415 -> m8_12  [key=2, style=dotted];
m8_415 -> m8_416  [key=0, style=solid];
m8_415 -> m8_419  [key=2, style=dotted];
m8_415 -> m8_420  [key=2, style=dotted];
m8_416 -> m8_13  [key=2, style=dotted];
m8_416 -> m8_417  [key=0, style=solid];
m8_414 -> m8_415  [key=0, style=solid];
m8_414 -> m8_330  [key=2, style=dotted];
m8_414 -> m8_418  [key=2, style=dotted];
m8_417 -> m8_413  [key=0, style=bold, color=blue];
m8_672 -> m8_712  [key=0, style=solid];
m8_712 -> m8_7  [key=2, style=dotted];
m8_712 -> m8_713  [key=0, style=solid];
m8_713 -> m8_672  [key=0, style=bold, color=blue];
m8_377 -> m8_378  [key=0, style=solid];
m8_382 -> m8_11  [key=2, style=dotted];
m8_382 -> m8_383  [key=0, style=solid];
m8_382 -> m8_384  [key=1, style=dashed, color=darkseagreen4, label=jsonSettings];
m8_382 -> m8_385  [key=1, style=dashed, color=darkseagreen4, label=jsonSettings];
m8_382 -> m8_388  [key=1, style=dashed, color=darkseagreen4, label=jsonSettings];
m8_385 -> m8_12  [key=2, style=dotted];
m8_385 -> m8_386  [key=0, style=solid];
m8_385 -> m8_387  [key=1, style=dashed, color=darkseagreen4, label=output];
m8_385 -> m8_388  [key=1, style=dashed, color=darkseagreen4, label=output];
m8_387 -> m8_13  [key=2, style=dotted];
m8_387 -> m8_388  [key=0, style=solid];
m8_381 -> m8_382  [key=0, style=solid];
m8_383 -> m8_384  [key=0, style=solid];
m8_384 -> m8_385  [key=0, style=solid];
m8_388 -> m8_179  [key=2, style=dotted];
m8_388 -> m8_389  [key=0, style=solid];
m8_388 -> m8_390  [key=1, style=dashed, color=darkseagreen4, label=obj];
m8_388 -> m8_391  [key=1, style=dashed, color=darkseagreen4, label=obj];
m8_378 -> m8_385  [key=1, style=dashed, color=darkseagreen4, label=testerObject];
m8_378 -> m8_381  [key=1, style=dashed, color=darkseagreen4, label=testerObject];
m8_378 -> m8_379  [key=0, style=solid];
m8_378 -> m8_394  [key=2, style=dotted];
m8_386 -> m8_387  [key=0, style=solid];
m8_386 -> m8_100  [key=2, style=dotted];
m8_379 -> m8_124  [key=2, style=dotted];
m8_379 -> m8_380  [key=0, style=solid];
m8_380 -> m8_381  [key=0, style=solid];
m8_380 -> m8_392  [key=1, style=dashed, color=darkseagreen4, label=data];
m8_389 -> m8_390  [key=0, style=solid];
m8_389 -> m8_321  [key=2, style=dotted];
m8_390 -> m8_391  [key=0, style=solid];
m8_390 -> m8_65  [key=2, style=dotted];
m8_391 -> m8_392  [key=0, style=solid];
m8_392 -> m8_393  [key=0, style=solid];
m8_392 -> m8_395  [key=2, style=dotted];
m8_393 -> m8_377  [key=0, style=bold, color=blue];
m8_116 -> m8_117  [key=0, style=solid];
m8_116 -> m8_107  [key=0, style=bold, color=blue];
m8_119 -> m8_6  [key=2, style=dotted];
m8_119 -> m8_120  [key=0, style=solid];
m8_119 -> m8_92  [key=2, style=dotted];
m8_119 -> m8_123  [key=2, style=dotted];
m8_119 -> m8_124  [key=2, style=dotted];
m8_118 -> m8_119  [key=0, style=solid];
m8_118 -> m8_121  [key=1, style=dashed, color=darkseagreen4, label=personRef];
m8_593 -> m8_594  [key=0, style=solid];
m8_596 -> m8_7  [key=2, style=dotted];
m8_596 -> m8_597  [key=0, style=solid];
m8_596 -> m8_599  [key=1, style=dashed, color=darkseagreen4, label=inputContext];
m8_598 -> m8_11  [key=2, style=dotted];
m8_598 -> m8_599  [key=0, style=solid];
m8_598 -> m8_601  [key=1, style=dashed, color=darkseagreen4, label=jsonSerializerSettings];
m8_595 -> m8_596  [key=0, style=solid];
m8_595 -> m8_604  [key=2, style=dotted];
m8_595 -> m8_597  [key=1, style=dashed, color=darkseagreen4, label=someValue];
m8_595 -> m8_602  [key=1, style=dashed, color=darkseagreen4, label=someValue];
m8_597 -> m8_598  [key=0, style=solid];
m8_597 -> m8_318  [key=2, style=dotted];
m8_599 -> m8_600  [key=0, style=solid];
m8_599 -> m8_605  [key=2, style=dotted];
m8_599 -> m8_601  [key=1, style=dashed, color=darkseagreen4, label=serializedString];
m8_600 -> m8_13  [key=2, style=dotted];
m8_600 -> m8_601  [key=0, style=solid];
m8_601 -> m8_346  [key=2, style=dotted];
m8_601 -> m8_602  [key=0, style=solid];
m8_594 -> m8_595  [key=0, style=solid];
m8_594 -> m8_597  [key=1, style=dashed, color=darkseagreen4, label=contextKey];
m8_594 -> m8_594  [key=3, color=darkorchid, style=bold, label="Local variable string contextKey"];
m8_594 -> m8_602  [key=1, style=dashed, color=darkseagreen4, label=contextKey];
m8_602 -> m8_109  [key=2, style=dotted];
m8_602 -> m8_603  [key=0, style=solid];
m8_603 -> m8_593  [key=0, style=bold, color=blue];
m8_109 -> m8_110  [key=0, style=solid];
m8_109 -> m8_111  [key=0, style=solid];
m8_257 -> m8_258  [key=0, style=solid];
m8_259 -> m8_6  [key=2, style=dotted];
m8_259 -> m8_260  [key=0, style=solid];
m8_259 -> m8_243  [key=2, style=dotted];
m8_259 -> m8_244  [key=2, style=dotted];
m8_260 -> m8_11  [key=2, style=dotted];
m8_260 -> m8_12  [key=2, style=dotted];
m8_260 -> m8_261  [key=0, style=solid];
m8_260 -> m8_262  [key=1, style=dashed, color=darkseagreen4, label=json];
m8_262 -> m8_11  [key=2, style=dotted];
m8_262 -> m8_263  [key=0, style=solid];
m8_262 -> m8_270  [key=2, style=dotted];
m8_262 -> m8_179  [key=2, style=dotted];
m8_262 -> m8_264  [key=1, style=dashed, color=darkseagreen4, label=newValues];
m8_262 -> m8_266  [key=1, style=dashed, color=darkseagreen4, label=newValues];
m8_262 -> m8_267  [key=1, style=dashed, color=darkseagreen4, label=newValues];
m8_258 -> m8_259  [key=0, style=solid];
m8_258 -> m8_260  [key=1, style=dashed, color=darkseagreen4, label=binder];
m8_258 -> m8_270  [key=2, style=dotted];
m8_261 -> m8_13  [key=2, style=dotted];
m8_261 -> m8_262  [key=0, style=solid];
m8_263 -> m8_264  [key=0, style=solid];
m8_263 -> m8_66  [key=2, style=dotted];
m8_264 -> m8_265  [key=0, style=solid];
m8_266 -> m8_267  [key=0, style=solid];
m8_266 -> m8_66  [key=2, style=dotted];
m8_267 -> m8_268  [key=0, style=solid];
m8_265 -> m8_109  [key=2, style=dotted];
m8_265 -> m8_266  [key=0, style=solid];
m8_268 -> m8_109  [key=2, style=dotted];
m8_268 -> m8_269  [key=0, style=solid];
m8_269 -> m8_257  [key=0, style=bold, color=blue];
m8_421 -> m8_95  [key=3, color=darkorchid, style=bold, label="method methodReturn System.Type BindToType"];
m8_421 -> m8_422  [key=0, style=solid];
m8_422 -> m8_423  [key=0, style=solid];
m8_423 -> m8_421  [key=0, style=bold, color=blue];
m8_97 -> m8_11  [key=2, style=dotted];
m8_97 -> m8_12  [key=2, style=dotted];
m8_97 -> m8_98  [key=0, style=solid];
m8_242 -> m8_245  [key=0, style=solid];
m8_245 -> m8_246  [key=0, style=solid];
m8_246 -> m8_242  [key=0, style=bold, color=blue];
m8_353 -> m8_359  [key=0, style=solid];
m8_359 -> m8_360  [key=0, style=solid];
m8_360 -> m8_353  [key=0, style=bold, color=blue];
m8_655 -> m8_656  [key=0, style=solid];
m8_657 -> m8_655  [key=0, style=bold, color=blue];
m8_656 -> m8_657  [key=0, style=solid];
m8_98 -> m8_13  [key=2, style=dotted];
m8_98 -> m8_99  [key=0, style=solid];
m8_188 -> m8_189  [key=0, style=solid];
m8_192 -> m8_13  [key=2, style=dotted];
m8_192 -> m8_193  [key=0, style=solid];
m8_190 -> m8_200  [key=2, style=dotted];
m8_190 -> m8_191  [key=0, style=solid];
m8_194 -> m8_109  [key=2, style=dotted];
m8_194 -> m8_195  [key=0, style=solid];
m8_197 -> m8_109  [key=2, style=dotted];
m8_197 -> m8_198  [key=0, style=solid];
m8_198 -> m8_109  [key=2, style=dotted];
m8_198 -> m8_199  [key=0, style=solid];
m8_189 -> m8_192  [key=1, style=dashed, color=darkseagreen4, label=typeNamePropertyRef];
m8_189 -> m8_100  [key=2, style=dotted];
m8_189 -> m8_190  [key=0, style=solid];
m8_191 -> m8_192  [key=0, style=solid];
m8_191 -> m8_201  [key=2, style=dotted];
m8_191 -> m8_193  [key=1, style=dashed, color=darkseagreen4, label=json];
m8_193 -> m8_194  [key=0, style=solid];
m8_193 -> m8_93  [key=2, style=dotted];
m8_193 -> m8_195  [key=1, style=dashed, color=darkseagreen4, label=deserialized];
m8_193 -> m8_196  [key=1, style=dashed, color=darkseagreen4, label=deserialized];
m8_195 -> m8_66  [key=2, style=dotted];
m8_195 -> m8_196  [key=0, style=solid];
m8_196 -> m8_197  [key=0, style=solid];
m8_196 -> m8_198  [key=1, style=dashed, color=darkseagreen4, label=nested];
m8_199 -> m8_188  [key=0, style=bold, color=blue];
m8_429 -> m8_430  [key=0, style=solid];
m8_435 -> m8_13  [key=2, style=dotted];
m8_435 -> m8_436  [key=0, style=solid];
m8_431 -> m8_438  [key=2, style=dotted];
m8_431 -> m8_432  [key=0, style=solid];
m8_432 -> m8_438  [key=2, style=dotted];
m8_432 -> m8_433  [key=0, style=solid];
m8_433 -> m8_438  [key=2, style=dotted];
m8_433 -> m8_434  [key=0, style=solid];
m8_434 -> m8_435  [key=0, style=solid];
m8_434 -> m8_201  [key=2, style=dotted];
m8_430 -> m8_431  [key=0, style=solid];
m8_430 -> m8_432  [key=1, style=dashed, color=darkseagreen4, label=l];
m8_430 -> m8_433  [key=1, style=dashed, color=darkseagreen4, label=l];
m8_430 -> m8_434  [key=1, style=dashed, color=darkseagreen4, label=l];
m8_430 -> m8_437  [key=2, style=dotted];
m8_436 -> m8_429  [key=0, style=bold, color=blue];
m8_565 -> m8_566  [key=0, style=solid];
m8_574 -> m8_13  [key=2, style=dotted];
m8_574 -> m8_575  [key=0, style=solid];
m8_568 -> m8_455  [key=2, style=dotted];
m8_568 -> m8_569  [key=0, style=solid];
m8_570 -> m8_455  [key=2, style=dotted];
m8_570 -> m8_571  [key=0, style=solid];
m8_580 -> m8_109  [key=2, style=dotted];
m8_580 -> m8_581  [key=0, style=solid];
m8_583 -> m8_109  [key=2, style=dotted];
m8_583 -> m8_584  [key=0, style=solid];
m8_589 -> m8_109  [key=2, style=dotted];
m8_589 -> m8_590  [key=0, style=solid];
m8_573 -> m8_574  [key=0, style=solid];
m8_573 -> m8_201  [key=2, style=dotted];
m8_573 -> m8_575  [key=1, style=dashed, color=darkseagreen4, label=json];
m8_575 -> m8_576  [key=0, style=solid];
m8_575 -> m8_93  [key=2, style=dotted];
m8_575 -> m8_577  [key=1, style=dashed, color=darkseagreen4, label=d2];
m8_575 -> m8_578  [key=1, style=dashed, color=darkseagreen4, label=d2];
m8_567 -> m8_568  [key=0, style=solid];
m8_567 -> m8_592  [key=2, style=dotted];
m8_567 -> m8_571  [key=1, style=dashed, color=darkseagreen4, label=data];
m8_567 -> m8_572  [key=1, style=dashed, color=darkseagreen4, label=data];
m8_569 -> m8_570  [key=0, style=solid];
m8_569 -> m8_592  [key=2, style=dotted];
m8_569 -> m8_571  [key=1, style=dashed, color=darkseagreen4, label=data2];
m8_571 -> m8_572  [key=0, style=solid];
m8_579 -> m8_580  [key=0, style=solid];
m8_581 -> m8_582  [key=0, style=solid];
m8_582 -> m8_583  [key=0, style=solid];
m8_584 -> m8_585  [key=0, style=solid];
m8_588 -> m8_589  [key=0, style=solid];
m8_566 -> m8_573  [key=1, style=dashed, color=darkseagreen4, label=d1];
m8_566 -> m8_567  [key=0, style=solid];
m8_566 -> m8_591  [key=2, style=dotted];
m8_566 -> m8_572  [key=1, style=dashed, color=darkseagreen4, label=d1];
m8_572 -> m8_573  [key=0, style=solid];
m8_576 -> m8_577  [key=0, style=solid];
m8_576 -> m8_321  [key=2, style=dotted];
m8_577 -> m8_578  [key=0, style=solid];
m8_577 -> m8_321  [key=2, style=dotted];
m8_578 -> m8_579  [key=0, style=solid];
m8_578 -> m8_581  [key=1, style=dashed, color=darkseagreen4, label=data3];
m8_585 -> m8_93  [key=2, style=dotted];
m8_585 -> m8_586  [key=0, style=solid];
m8_587 -> m8_588  [key=0, style=solid];
m8_586 -> m8_587  [key=0, style=solid];
m8_590 -> m8_565  [key=0, style=bold, color=blue];
m8_615 -> m8_718  [key=0, style=solid];
m8_718 -> m8_615  [key=0, style=bold, color=blue];
m8_698 -> m8_699  [key=0, style=solid];
m8_699 -> m8_11  [key=2, style=dotted];
m8_699 -> m8_700  [key=0, style=solid];
m8_699 -> m8_701  [key=1, style=dashed, color=darkseagreen4, label=serializerSettings];
m8_702 -> m8_13  [key=2, style=dotted];
m8_702 -> m8_703  [key=0, style=solid];
m8_700 -> m8_694  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m8_700 -> m8_701  [key=0, style=solid];
m8_701 -> m8_702  [key=0, style=solid];
m8_701 -> m8_179  [key=2, style=dotted];
m8_703 -> m8_698  [key=0, style=bold, color=blue];
m8_628 -> m8_629  [key=0, style=solid];
m8_631 -> m8_11  [key=2, style=dotted];
m8_631 -> m8_632  [key=0, style=solid];
m8_631 -> m8_634  [key=1, style=dashed, color=darkseagreen4, label=settings];
m8_633 -> m8_13  [key=2, style=dotted];
m8_633 -> m8_634  [key=0, style=solid];
m8_630 -> m8_631  [key=0, style=solid];
m8_630 -> m8_615  [key=2, style=dotted];
m8_630 -> m8_616  [key=2, style=dotted];
m8_632 -> m8_633  [key=0, style=solid];
m8_632 -> m8_605  [key=2, style=dotted];
m8_632 -> m8_634  [key=1, style=dashed, color=darkseagreen4, label=json];
m8_634 -> m8_179  [key=2, style=dotted];
m8_634 -> m8_635  [key=0, style=solid];
m8_637 -> m8_109  [key=2, style=dotted];
m8_637 -> m8_638  [key=0, style=solid];
m8_629 -> m8_630  [key=0, style=solid];
m8_629 -> m8_632  [key=1, style=dashed, color=darkseagreen4, label=pp];
m8_629 -> m8_639  [key=2, style=dotted];
m8_635 -> m8_637  [key=1, style=dashed, color=darkseagreen4, label=p2];
m8_635 -> m8_636  [key=0, style=solid];
m8_636 -> m8_637  [key=0, style=solid];
m8_636 -> m8_66  [key=2, style=dotted];
m8_638 -> m8_628  [key=0, style=bold, color=blue];
m8_640 -> m8_641  [key=0, style=solid];
m8_641 -> m8_6  [key=2, style=dotted];
m8_641 -> m8_642  [key=0, style=solid];
m8_641 -> m8_643  [key=1, style=dashed, color=darkseagreen4, label=input];
m8_641 -> m8_644  [key=1, style=dashed, color=darkseagreen4, label=input];
m8_641 -> m8_645  [key=1, style=dashed, color=darkseagreen4, label=input];
m8_642 -> m8_6  [key=2, style=dotted];
m8_642 -> m8_643  [key=0, style=solid];
m8_642 -> m8_652  [key=2, style=dotted];
m8_642 -> m8_438  [key=2, style=dotted];
m8_643 -> m8_6  [key=2, style=dotted];
m8_643 -> m8_644  [key=0, style=solid];
m8_643 -> m8_652  [key=2, style=dotted];
m8_643 -> m8_438  [key=2, style=dotted];
m8_644 -> m8_6  [key=2, style=dotted];
m8_644 -> m8_645  [key=0, style=solid];
m8_644 -> m8_652  [key=2, style=dotted];
m8_644 -> m8_438  [key=2, style=dotted];
m8_645 -> m8_11  [key=2, style=dotted];
m8_645 -> m8_12  [key=2, style=dotted];
m8_645 -> m8_646  [key=0, style=solid];
m8_646 -> m8_11  [key=2, style=dotted];
m8_646 -> m8_647  [key=0, style=solid];
m8_646 -> m8_179  [key=2, style=dotted];
m8_647 -> m8_648  [key=0, style=solid];
m8_647 -> m8_653  [key=2, style=dotted];
m8_647 -> m8_654  [key=2, style=dotted];
m8_647 -> m8_655  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m8_647 -> m8_649  [key=1, style=dashed, color=darkseagreen4, label=strings];
m8_647 -> m8_650  [key=1, style=dashed, color=darkseagreen4, label=strings];
m8_648 -> m8_109  [key=2, style=dotted];
m8_648 -> m8_649  [key=0, style=solid];
m8_649 -> m8_109  [key=2, style=dotted];
m8_649 -> m8_650  [key=0, style=solid];
m8_650 -> m8_109  [key=2, style=dotted];
m8_650 -> m8_651  [key=0, style=solid];
m8_651 -> m8_640  [key=0, style=bold, color=blue];
m8_526 -> m8_527  [key=0, style=solid];
m8_527 -> m8_7  [key=2, style=dotted];
m8_527 -> m8_528  [key=0, style=solid];
m8_527 -> m8_546  [key=2, style=dotted];
m8_527 -> m8_455  [key=2, style=dotted];
m8_528 -> m8_529  [key=0, style=solid];
m8_528 -> m8_201  [key=2, style=dotted];
m8_528 -> m8_530  [key=1, style=dashed, color=darkseagreen4, label=json];
m8_529 -> m8_13  [key=2, style=dotted];
m8_529 -> m8_530  [key=0, style=solid];
m8_530 -> m8_531  [key=0, style=solid];
m8_530 -> m8_93  [key=2, style=dotted];
m8_530 -> m8_532  [key=1, style=dashed, color=darkseagreen4, label=c2];
m8_530 -> m8_533  [key=1, style=dashed, color=darkseagreen4, label=c2];
m8_530 -> m8_534  [key=1, style=dashed, color=darkseagreen4, label=c2];
m8_531 -> m8_109  [key=2, style=dotted];
m8_531 -> m8_532  [key=0, style=solid];
m8_538 -> m8_109  [key=2, style=dotted];
m8_538 -> m8_539  [key=0, style=solid];
m8_544 -> m8_109  [key=2, style=dotted];
m8_544 -> m8_545  [key=0, style=solid];
m8_532 -> m8_66  [key=2, style=dotted];
m8_532 -> m8_533  [key=0, style=solid];
m8_533 -> m8_66  [key=2, style=dotted];
m8_533 -> m8_534  [key=0, style=solid];
m8_534 -> m8_535  [key=0, style=solid];
m8_537 -> m8_538  [key=0, style=solid];
m8_537 -> m8_93  [key=2, style=dotted];
m8_537 -> m8_539  [key=1, style=dashed, color=darkseagreen4, label=c2];
m8_537 -> m8_540  [key=1, style=dashed, color=darkseagreen4, label=c2];
m8_537 -> m8_541  [key=1, style=dashed, color=darkseagreen4, label=c2];
m8_539 -> m8_66  [key=2, style=dotted];
m8_539 -> m8_540  [key=0, style=solid];
m8_543 -> m8_544  [key=0, style=solid];
m8_535 -> m8_66  [key=2, style=dotted];
m8_535 -> m8_536  [key=0, style=solid];
m8_540 -> m8_66  [key=2, style=dotted];
m8_540 -> m8_541  [key=0, style=solid];
m8_542 -> m8_66  [key=2, style=dotted];
m8_542 -> m8_543  [key=0, style=solid];
m8_536 -> m8_537  [key=0, style=solid];
m8_541 -> m8_543  [key=1, style=dashed, color=darkseagreen4, label=c];
m8_541 -> m8_542  [key=0, style=solid];
m8_545 -> m8_526  [key=0, style=bold, color=blue];
m8_547 -> m8_548  [key=0, style=solid];
m8_548 -> m8_6  [key=2, style=dotted];
m8_548 -> m8_549  [key=0, style=solid];
m8_548 -> m8_562  [key=2, style=dotted];
m8_548 -> m8_563  [key=2, style=dotted];
m8_548 -> m8_455  [key=2, style=dotted];
m8_548 -> m8_564  [key=2, style=dotted];
m8_549 -> m8_550  [key=0, style=solid];
m8_549 -> m8_201  [key=2, style=dotted];
m8_549 -> m8_551  [key=1, style=dashed, color=darkseagreen4, label=json];
m8_550 -> m8_13  [key=2, style=dotted];
m8_550 -> m8_551  [key=0, style=solid];
m8_551 -> m8_552  [key=0, style=solid];
m8_551 -> m8_93  [key=2, style=dotted];
m8_551 -> m8_553  [key=1, style=dashed, color=darkseagreen4, label=o2];
m8_551 -> m8_554  [key=1, style=dashed, color=darkseagreen4, label=o2];
m8_551 -> m8_555  [key=1, style=dashed, color=darkseagreen4, label=o2];
m8_551 -> m8_556  [key=1, style=dashed, color=darkseagreen4, label=o2];
m8_551 -> m8_557  [key=1, style=dashed, color=darkseagreen4, label=o2];
m8_551 -> m8_558  [key=1, style=dashed, color=darkseagreen4, label=o2];
m8_560 -> m8_109  [key=2, style=dotted];
m8_560 -> m8_561  [key=0, style=solid];
m8_552 -> m8_553  [key=0, style=solid];
m8_552 -> m8_321  [key=2, style=dotted];
m8_553 -> m8_554  [key=0, style=solid];
m8_553 -> m8_321  [key=2, style=dotted];
m8_554 -> m8_66  [key=2, style=dotted];
m8_554 -> m8_555  [key=0, style=solid];
m8_555 -> m8_66  [key=2, style=dotted];
m8_555 -> m8_556  [key=0, style=solid];
m8_556 -> m8_66  [key=2, style=dotted];
m8_556 -> m8_557  [key=0, style=solid];
m8_557 -> m8_66  [key=2, style=dotted];
m8_557 -> m8_558  [key=0, style=solid];
m8_558 -> m8_559  [key=0, style=solid];
m8_559 -> m8_560  [key=0, style=solid];
m8_561 -> m8_547  [key=0, style=bold, color=blue];
m8_690 -> m8_691  [key=0, style=solid];
m8_691 -> m8_11  [key=2, style=dotted];
m8_691 -> m8_692  [key=0, style=solid];
m8_691 -> m8_693  [key=1, style=dashed, color=darkseagreen4, label=serializerSettings];
m8_694 -> m8_13  [key=2, style=dotted];
m8_694 -> m8_695  [key=0, style=solid];
m8_692 -> m8_693  [key=0, style=solid];
m8_692 -> m8_696  [key=2, style=dotted];
m8_692 -> m8_697  [key=2, style=dotted];
m8_693 -> m8_694  [key=0, style=solid];
m8_693 -> m8_605  [key=2, style=dotted];
m8_695 -> m8_690  [key=0, style=bold, color=blue];
m8_403 -> m8_736  [key=0, style=solid];
m8_736 -> m8_737  [key=0, style=solid];
m8_737 -> m8_403  [key=0, style=bold, color=blue];
m8_277 -> m8_278  [key=0, style=solid];
m8_278 -> m8_279  [key=0, style=solid];
m8_278 -> m8_255  [key=2, style=dotted];
m8_279 -> m8_280  [key=0, style=solid];
m8_279 -> m8_256  [key=2, style=dotted];
m8_280 -> m8_277  [key=0, style=bold, color=blue];
m8_354 -> m8_355  [key=0, style=solid];
m8_354 -> m8_356  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>"];
m8_355 -> m8_356  [key=0, style=solid];
m8_356 -> m8_357  [key=0, style=solid];
m8_357 -> m8_358  [key=0, style=solid];
m8_358 -> m8_354  [key=0, style=bold, color=blue];
m8_730 -> m8_28  [key=3, color=darkorchid, style=bold, label="method methodReturn int GetHashCode"];
m8_730 -> m8_731  [key=0, style=solid];
m8_731 -> m8_732  [key=0, style=solid];
m8_731 -> m8_733  [key=0, style=solid];
m8_732 -> m8_734  [key=0, style=solid];
m8_733 -> m8_734  [key=0, style=solid];
m8_733 -> m8_735  [key=2, style=dotted];
m8_734 -> m8_730  [key=0, style=bold, color=blue];
m8_439 -> m8_440  [key=0, style=solid];
m8_447 -> m8_13  [key=2, style=dotted];
m8_447 -> m8_448  [key=0, style=solid];
m8_443 -> m8_124  [key=2, style=dotted];
m8_443 -> m8_438  [key=2, style=dotted];
m8_443 -> m8_444  [key=0, style=solid];
m8_443 -> m8_456  [key=2, style=dotted];
m8_440 -> m8_455  [key=2, style=dotted];
m8_440 -> m8_441  [key=0, style=solid];
m8_440 -> m8_442  [key=1, style=dashed, color=darkseagreen4, label=c1];
m8_442 -> m8_438  [key=2, style=dotted];
m8_442 -> m8_443  [key=0, style=solid];
m8_444 -> m8_438  [key=2, style=dotted];
m8_444 -> m8_445  [key=0, style=solid];
m8_445 -> m8_438  [key=2, style=dotted];
m8_445 -> m8_446  [key=0, style=solid];
m8_449 -> m8_109  [key=2, style=dotted];
m8_449 -> m8_450  [key=0, style=solid];
m8_446 -> m8_447  [key=0, style=solid];
m8_446 -> m8_201  [key=2, style=dotted];
m8_446 -> m8_448  [key=1, style=dashed, color=darkseagreen4, label=json];
m8_448 -> m8_449  [key=0, style=solid];
m8_448 -> m8_93  [key=2, style=dotted];
m8_448 -> m8_450  [key=1, style=dashed, color=darkseagreen4, label=l2];
m8_448 -> m8_451  [key=1, style=dashed, color=darkseagreen4, label=l2];
m8_448 -> m8_452  [key=1, style=dashed, color=darkseagreen4, label=l2];
m8_448 -> m8_453  [key=1, style=dashed, color=darkseagreen4, label=l2];
m8_441 -> m8_443  [key=1, style=dashed, color=darkseagreen4, label=l];
m8_441 -> m8_442  [key=0, style=solid];
m8_441 -> m8_444  [key=1, style=dashed, color=darkseagreen4, label=l];
m8_441 -> m8_445  [key=1, style=dashed, color=darkseagreen4, label=l];
m8_441 -> m8_446  [key=1, style=dashed, color=darkseagreen4, label=l];
m8_441 -> m8_437  [key=2, style=dotted];
m8_450 -> m8_66  [key=2, style=dotted];
m8_450 -> m8_451  [key=0, style=solid];
m8_451 -> m8_66  [key=2, style=dotted];
m8_451 -> m8_452  [key=0, style=solid];
m8_452 -> m8_66  [key=2, style=dotted];
m8_452 -> m8_453  [key=0, style=solid];
m8_453 -> m8_66  [key=2, style=dotted];
m8_453 -> m8_454  [key=0, style=solid];
m8_454 -> m8_439  [key=0, style=bold, color=blue];
m8_738 -> m8_739  [key=0, style=solid];
m8_739 -> m8_740  [key=0, style=solid];
m8_739 -> m8_741  [key=2, style=dotted];
m8_740 -> m8_738  [key=0, style=bold, color=blue];
m8_714 -> m8_715  [key=0, style=solid];
m8_715 -> m8_716  [key=0, style=solid];
m8_715 -> m8_717  [key=2, style=dotted];
m8_716 -> m8_714  [key=0, style=bold, color=blue];
m8_251 -> m8_252  [key=0, style=solid];
m8_252 -> m8_253  [key=0, style=solid];
m8_252 -> m8_255  [key=2, style=dotted];
m8_253 -> m8_254  [key=0, style=solid];
m8_253 -> m8_256  [key=2, style=dotted];
m8_254 -> m8_251  [key=0, style=bold, color=blue];
m8_683 -> m8_684  [key=0, style=solid];
m8_685 -> m8_7  [key=2, style=dotted];
m8_685 -> m8_686  [key=0, style=solid];
m8_685 -> m8_682  [key=2, style=dotted];
m8_684 -> m8_11  [key=2, style=dotted];
m8_684 -> m8_685  [key=0, style=solid];
m8_684 -> m8_686  [key=1, style=dashed, color=darkseagreen4, label=serializerSettings];
m8_684 -> m8_687  [key=1, style=dashed, color=darkseagreen4, label=serializerSettings];
m8_686 -> m8_687  [key=0, style=solid];
m8_686 -> m8_605  [key=2, style=dotted];
m8_687 -> m8_346  [key=2, style=dotted];
m8_687 -> m8_688  [key=0, style=solid];
m8_688 -> m8_689  [key=0, style=solid];
m8_688 -> m8_321  [key=2, style=dotted];
m8_689 -> m8_683  [key=0, style=bold, color=blue];
m8_775 -> m8_712  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.DataType"];
m8_772 -> m8_399  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests"];
m8_772 -> m8_400  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests"];
m8_772 -> m8_401  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests"];
m8_767 -> m8_163  [key=1, style=dashed, color=darkseagreen4, label=json];
m8_769 -> m8_245  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameSerializationBinder"];
m8_769 -> m8_252  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.TypeNameSerializationBinder"];
m8_770 -> m8_271  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.NewTypeNameSerializationBinder"];
m8_770 -> m8_278  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.NewTypeNameSerializationBinder"];
m8_766 -> m8_38  [key=1, style=dashed, color=darkseagreen4, label=sb];
m8_778 -> m8_736  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.Example"];
m8_778 -> m8_739  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.Example"];
m8_778 -> m8_743  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.Example"];
m8_778 -> m8_748  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.Example"];
m8_778 -> m8_751  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.Example"];
m8_778 -> m8_757  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.Example"];
m8_778 -> m8_759  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.Example"];
m8_771 -> m8_359  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>"];
m8_771 -> m8_355  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>"];
m8_771 -> m8_356  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>"];
m8_771 -> m8_357  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>"];
m8_771 -> m8_362  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>"];
m8_771 -> m8_365  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>"];
m8_771 -> m8_367  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>"];
m8_771 -> m8_368  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>"];
m8_771 -> m8_375  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.TypeNameHandlingTests.CustomEnumerable<T>"];
m8_774 -> m8_710  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.ObjectWithOptionalMessage"];
m8_777 -> m8_731  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.SerializableWrapper"];
m8_777 -> m8_733  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.SerializableWrapper"];
m8_777 -> m8_727  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.SerializableWrapper"];
m8_776 -> m8_720  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.MyParent"];
m8_776 -> m8_715  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.MyParent"];
m9_49 -> m9_50  [key=0, style=solid];
m9_50 -> m9_51  [key=0, style=solid];
m9_50 -> m9_56  [key=2, style=dotted];
m9_51 -> m9_52  [key=0, style=solid];
m9_51 -> m9_57  [key=2, style=dotted];
m9_51 -> m9_54  [key=1, style=dashed, color=darkseagreen4, label=reportJSON];
m9_52 -> m9_53  [key=0, style=solid];
m9_52 -> m9_58  [key=2, style=dotted];
m9_54 -> m9_55  [key=0, style=solid];
m9_54 -> m9_39  [key=2, style=dotted];
m9_53 -> m9_54  [key=0, style=solid];
m9_53 -> m9_57  [key=2, style=dotted];
m9_55 -> m9_49  [key=0, style=bold, color=blue];
m9_0 -> m9_1  [key=0, style=solid];
m9_0 -> m9_2  [key=1, style=dashed, color=darkseagreen4, label=string];
m9_0 -> m9_3  [key=1, style=dashed, color=darkseagreen4, label=string];
m9_1 -> m9_2  [key=0, style=solid];
m9_2 -> m9_3  [key=0, style=solid];
m9_2 -> m9_6  [key=2, style=dotted];
m9_3 -> m9_4  [key=0, style=solid];
m9_3 -> m9_6  [key=2, style=dotted];
m9_4 -> m9_5  [key=0, style=solid];
m9_5 -> m9_0  [key=0, style=bold, color=blue];
m9_7 -> m9_8  [key=0, style=solid];
m9_8 -> m9_7  [key=0, style=bold, color=blue];
m9_19 -> m9_20  [key=0, style=solid, color=green];
m9_20 -> m9_21  [key=0, style=solid, color=green];
m9_20 -> m9_9  [key=2, style=dotted, color=green];
m9_21 -> m9_22  [key=0, style=solid, color=green];
m9_21 -> m9_9  [key=2, style=dotted, color=green];
m9_22 -> m9_23  [key=0, style=solid, color=green];
m9_22 -> m9_9  [key=2, style=dotted, color=green];
m9_23 -> m9_24  [key=0, style=solid, color=green];
m9_23 -> m9_9  [key=2, style=dotted, color=green];
m9_24 -> m9_25  [key=0, style=solid, color=green];
m9_24 -> m9_9  [key=2, style=dotted, color=green];
m9_25 -> m9_26  [key=0, style=solid, color=green];
m9_25 -> m9_9  [key=2, style=dotted, color=green];
m9_26 -> m9_27  [key=0, style=solid, color=green];
m9_26 -> m9_9  [key=2, style=dotted, color=green];
m9_27 -> m9_19  [key=0, style=bold, color=blue];
m9_40 -> m9_41  [key=0, style=solid, color=red];
m9_41 -> m9_42  [key=0, style=solid, color=red];
m9_41 -> m9_28  [key=2, style=dotted, color=red];
m9_42 -> m9_43  [key=0, style=solid, color=red];
m9_42 -> m9_28  [key=2, style=dotted, color=red];
m9_43 -> m9_44  [key=0, style=solid, color=green];
m9_43 -> m9_28  [key=2, style=dotted, color=red];
m9_44 -> m9_45  [key=0, style=solid, color=green];
m9_44 -> m9_28  [key=2, style=dotted, color=green];
m9_45 -> m9_46  [key=0, style=solid, color=green];
m9_45 -> m9_28  [key=2, style=dotted, color=green];
m9_46 -> m9_47  [key=0, style=solid, color=green];
m9_46 -> m9_28  [key=2, style=dotted, color=green];
m9_47 -> m9_48  [key=0, style=solid, color=green];
m9_47 -> m9_28  [key=2, style=dotted, color=green];
m9_48 -> m9_40  [key=0, style=bold, color=blue];
m9_9 -> m9_10  [key=0, style=solid, color=green];
m9_9 -> m9_12  [key=1, style=dashed, color=green, label=string];
m9_9 -> m9_20  [key=3, color=green, style=bold, label="Parameter variable string version2"];
m9_9 -> m9_21  [key=3, color=green, style=bold, label="Parameter variable string version2"];
m9_9 -> m9_22  [key=3, color=green, style=bold, label="Parameter variable string version2"];
m9_9 -> m9_23  [key=3, color=green, style=bold, label="Parameter variable string version2"];
m9_9 -> m9_24  [key=3, color=green, style=bold, label="Parameter variable string version2"];
m9_9 -> m9_25  [key=3, color=green, style=bold, label="Parameter variable string version2"];
m9_10 -> m9_11  [key=0, style=solid, color=green];
m9_10 -> m9_0  [key=2, style=dotted, color=green];
m9_12 -> m9_13  [key=0, style=solid, color=green];
m9_12 -> m9_17  [key=2, style=dotted, color=green];
m9_11 -> m9_12  [key=0, style=solid, color=green];
m9_11 -> m9_15  [key=2, style=dotted, color=green];
m9_11 -> m9_16  [key=2, style=dotted, color=green];
m9_11 -> m9_13  [key=1, style=dashed, color=green, label=json];
m9_13 -> m9_14  [key=0, style=solid, color=red];
m9_13 -> m9_18  [key=2, style=dotted, color=red];
m9_14 -> m9_9  [key=0, style=bold, color=blue];
m9_28 -> m9_29  [key=0, style=solid, color=red];
m9_28 -> m9_30  [key=1, style=dashed, color=darkseagreen4, label=string];
m9_28 -> m9_31  [key=1, style=dashed, color=darkseagreen4, label=string];
m9_28 -> m9_20  [key=3, color=green, style=bold, label="Parameter variable string version2"];
m9_28 -> m9_21  [key=3, color=green, style=bold, label="Parameter variable string version2"];
m9_28 -> m9_22  [key=3, color=green, style=bold, label="Parameter variable string version2"];
m9_28 -> m9_23  [key=3, color=green, style=bold, label="Parameter variable string version2"];
m9_28 -> m9_24  [key=3, color=green, style=bold, label="Parameter variable string version2"];
m9_28 -> m9_25  [key=3, color=green, style=bold, label="Parameter variable string version2"];
m9_29 -> m9_30  [key=0, style=solid, color=red];
m9_29 -> m9_17  [key=2, style=dotted, color=red];
m9_29 -> m9_32  [key=1, style=dashed, color=darkseagreen4, label=json];
m9_30 -> m9_31  [key=0, style=solid, color=red];
m9_30 -> m9_6  [key=2, style=dotted, color=red];
m9_30 -> m9_34  [key=1, style=dashed, color=green, label=expectedVersion1];
m9_31 -> m9_32  [key=0, style=solid, color=red];
m9_31 -> m9_6  [key=2, style=dotted, color=red];
m9_31 -> m9_35  [key=1, style=dashed, color=green, label=expectedVersion2];
m9_32 -> m9_33  [key=0, style=solid, color=green];
m9_32 -> m9_15  [key=2, style=dotted, color=red];
m9_32 -> m9_38  [key=2, style=dotted, color=red];
m9_32 -> m9_34  [key=1, style=dashed, color=green, label=versionClass];
m9_32 -> m9_35  [key=1, style=dashed, color=green, label=versionClass];
m9_32 -> m9_36  [key=1, style=dashed, color=green, label=versionClass];
m9_34 -> m9_35  [key=0, style=solid, color=green];
m9_34 -> m9_39  [key=2, style=dotted, color=green];
m9_35 -> m9_36  [key=0, style=solid, color=green];
m9_35 -> m9_39  [key=2, style=dotted, color=green];
m9_33 -> m9_34  [key=0, style=solid, color=green];
m9_33 -> m9_39  [key=2, style=dotted, color=green];
m9_36 -> m9_37  [key=0, style=solid, color=green];
m9_36 -> m9_39  [key=2, style=dotted, color=green];
m9_37 -> m9_28  [key=0, style=bold, color=blue];
m9_59 -> m9_1  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.VersionClass"];
m9_59 -> m9_2  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.VersionClass"];
m9_59 -> m9_3  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.VersionClass"];
m9_59 -> m9_4  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.VersionClass"];
m9_60 -> m9_20  [key=1, style=dashed, color=green, label="Newtonsoft.Json.Tests.Converters.VersionConverterTests"];
m9_60 -> m9_21  [key=1, style=dashed, color=green, label="Newtonsoft.Json.Tests.Converters.VersionConverterTests"];
m9_60 -> m9_22  [key=1, style=dashed, color=green, label="Newtonsoft.Json.Tests.Converters.VersionConverterTests"];
m9_60 -> m9_23  [key=1, style=dashed, color=green, label="Newtonsoft.Json.Tests.Converters.VersionConverterTests"];
m9_60 -> m9_24  [key=1, style=dashed, color=green, label="Newtonsoft.Json.Tests.Converters.VersionConverterTests"];
m9_60 -> m9_25  [key=1, style=dashed, color=green, label="Newtonsoft.Json.Tests.Converters.VersionConverterTests"];
m9_60 -> m9_26  [key=1, style=dashed, color=green, label="Newtonsoft.Json.Tests.Converters.VersionConverterTests"];
m9_60 -> m9_41  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.VersionConverterTests"];
m9_60 -> m9_42  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.VersionConverterTests"];
m9_60 -> m9_43  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.VersionConverterTests"];
m9_60 -> m9_44  [key=1, style=dashed, color=green, label="Newtonsoft.Json.Tests.Converters.VersionConverterTests"];
m9_60 -> m9_45  [key=1, style=dashed, color=green, label="Newtonsoft.Json.Tests.Converters.VersionConverterTests"];
m9_60 -> m9_46  [key=1, style=dashed, color=green, label="Newtonsoft.Json.Tests.Converters.VersionConverterTests"];
m9_60 -> m9_47  [key=1, style=dashed, color=green, label="Newtonsoft.Json.Tests.Converters.VersionConverterTests"];
m11_439 -> m11_440  [key=0, style=solid];
m11_440 -> m11_441  [key=0, style=solid];
m11_440 -> m11_444  [key=1, style=dashed, color=darkseagreen4, label=json];
m11_440 -> m11_440  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m11_441 -> m11_442  [key=0, style=solid];
m11_441 -> m11_221  [key=2, style=dotted];
m11_441 -> m11_443  [key=1, style=dashed, color=darkseagreen4, label=newDoc];
m11_441 -> m11_446  [key=1, style=dashed, color=darkseagreen4, label=newDoc];
m11_444 -> m11_445  [key=0, style=solid];
m11_444 -> m11_75  [key=2, style=dotted];
m11_442 -> m11_443  [key=0, style=solid];
m11_442 -> m11_449  [key=2, style=dotted];
m11_443 -> m11_444  [key=0, style=solid];
m11_443 -> m11_449  [key=2, style=dotted];
m11_443 -> m11_122  [key=2, style=dotted];
m11_446 -> m11_447  [key=0, style=solid];
m11_446 -> m11_15  [key=2, style=dotted];
m11_445 -> m11_446  [key=0, style=solid];
m11_445 -> m11_51  [key=2, style=dotted];
m11_445 -> m11_449  [key=2, style=dotted];
m11_445 -> m11_122  [key=2, style=dotted];
m11_447 -> m11_448  [key=0, style=solid];
m11_447 -> m11_450  [key=2, style=dotted];
m11_448 -> m11_439  [key=0, style=bold, color=blue];
m11_815 -> m11_816  [key=0, style=solid];
m11_816 -> m11_817  [key=0, style=solid];
m11_816 -> m11_816  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m11_817 -> m11_818  [key=0, style=solid];
m11_817 -> m11_75  [key=2, style=dotted];
m11_817 -> m11_819  [key=1, style=dashed, color=darkseagreen4, label=dxml];
m11_818 -> m11_819  [key=0, style=solid];
m11_818 -> m11_271  [key=2, style=dotted];
m11_818 -> m11_23  [key=2, style=dotted];
m11_819 -> m11_820  [key=0, style=solid];
m11_819 -> m11_271  [key=2, style=dotted];
m11_819 -> m11_84  [key=2, style=dotted];
m11_820 -> m11_815  [key=0, style=bold, color=blue];
m11_742 -> m11_743  [key=0, style=solid];
m11_743 -> m11_744  [key=0, style=solid];
m11_743 -> m11_747  [key=1, style=dashed, color=darkseagreen4, label=json];
m11_743 -> m11_743  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m11_744 -> m11_745  [key=0, style=solid];
m11_744 -> m11_221  [key=2, style=dotted];
m11_744 -> m11_746  [key=1, style=dashed, color=darkseagreen4, label=node];
m11_747 -> m11_748  [key=0, style=solid];
m11_747 -> m11_23  [key=2, style=dotted];
m11_745 -> m11_746  [key=0, style=solid];
m11_745 -> m11_23  [key=2, style=dotted];
m11_746 -> m11_747  [key=0, style=solid];
m11_746 -> m11_15  [key=2, style=dotted];
m11_748 -> m11_742  [key=0, style=bold, color=blue];
m11_652 -> m11_655  [key=0, style=solid];
m11_652 -> m11_658  [key=1, style=dashed, color=darkseagreen4, label="System.IO.Stream"];
m11_652 -> m11_662  [key=1, style=dashed, color=darkseagreen4, label="System.IO.Stream"];
m11_652 -> m11_643  [key=3, color=darkorchid, style=bold, label="Parameter variable System.IO.Stream json"];
m11_652 -> m11_644  [key=3, color=darkorchid, style=bold, label="Parameter variable System.IO.Stream xml"];
m11_655 -> m11_656  [key=0, style=solid];
m11_655 -> m11_97  [key=2, style=dotted];
m11_655 -> m11_657  [key=1, style=dashed, color=darkseagreen4, label=settings];
m11_658 -> m11_659  [key=0, style=solid];
m11_658 -> m11_45  [key=2, style=dotted];
m11_658 -> m11_667  [key=2, style=dotted];
m11_658 -> m11_660  [key=1, style=dashed, color=darkseagreen4, label=reader];
m11_662 -> m11_663  [key=0, style=solid];
m11_662 -> m11_61  [key=2, style=dotted];
m11_656 -> m11_657  [key=0, style=solid];
m11_656 -> m11_665  [key=2, style=dotted];
m11_656 -> m11_666  [key=2, style=dotted];
m11_657 -> m11_658  [key=0, style=solid];
m11_657 -> m11_639  [key=2, style=dotted];
m11_657 -> m11_659  [key=1, style=dashed, color=darkseagreen4, label=serializer];
m11_659 -> m11_660  [key=0, style=solid];
m11_659 -> m11_641  [key=2, style=dotted];
m11_659 -> m11_663  [key=1, style=dashed, color=darkseagreen4, label=doc];
m11_660 -> m11_661  [key=0, style=solid];
m11_660 -> m11_662  [key=0, style=solid];
m11_660 -> m11_47  [key=2, style=dotted];
m11_663 -> m11_664  [key=0, style=solid];
m11_663 -> m11_320  [key=2, style=dotted];
m11_661 -> m11_664  [key=0, style=solid];
m11_661 -> m11_668  [key=2, style=dotted];
m11_664 -> m11_652  [key=0, style=bold, color=blue];
m11_68 -> m11_69  [key=0, style=solid];
m11_69 -> m11_70  [key=0, style=solid];
m11_69 -> m11_73  [key=1, style=dashed, color=darkseagreen4, label=json1];
m11_69 -> m11_69  [key=3, color=darkorchid, style=bold, label="Local variable string json1"];
m11_70 -> m11_71  [key=0, style=solid];
m11_70 -> m11_75  [key=2, style=dotted];
m11_70 -> m11_72  [key=1, style=dashed, color=darkseagreen4, label=doc];
m11_73 -> m11_74  [key=0, style=solid];
m11_73 -> m11_23  [key=2, style=dotted];
m11_71 -> m11_72  [key=0, style=solid];
m11_71 -> m11_51  [key=2, style=dotted];
m11_71 -> m11_23  [key=2, style=dotted];
m11_72 -> m11_73  [key=0, style=solid];
m11_72 -> m11_22  [key=2, style=dotted];
m11_74 -> m11_68  [key=0, style=bold, color=blue];
m11_85 -> m11_86  [key=0, style=solid];
m11_86 -> m11_87  [key=0, style=solid];
m11_86 -> m11_95  [key=2, style=dotted];
m11_86 -> m11_88  [key=1, style=dashed, color=darkseagreen4, label=json];
m11_86 -> m11_92  [key=1, style=dashed, color=darkseagreen4, label=json];
m11_87 -> m11_88  [key=0, style=solid];
m11_88 -> m11_89  [key=0, style=solid];
m11_88 -> m11_96  [key=2, style=dotted];
m11_92 -> m11_93  [key=0, style=solid];
m11_92 -> m11_99  [key=2, style=dotted];
m11_89 -> m11_90  [key=0, style=solid];
m11_89 -> m11_48  [key=2, style=dotted];
m11_90 -> m11_91  [key=0, style=solid];
m11_90 -> m11_97  [key=2, style=dotted];
m11_91 -> m11_92  [key=0, style=solid];
m11_91 -> m11_98  [key=2, style=dotted];
m11_93 -> m11_94  [key=0, style=solid];
m11_93 -> m11_51  [key=2, style=dotted];
m11_93 -> m11_100  [key=2, style=dotted];
m11_94 -> m11_85  [key=0, style=bold, color=blue];
m11_134 -> m11_135  [key=0, style=solid];
m11_135 -> m11_136  [key=0, style=solid];
m11_135 -> m11_137  [key=1, style=dashed, color=darkseagreen4, label=xml];
m11_135 -> m11_135  [key=3, color=darkorchid, style=bold, label="Local variable string xml"];
m11_136 -> m11_137  [key=0, style=solid];
m11_136 -> m11_132  [key=2, style=dotted];
m11_136 -> m11_138  [key=1, style=dashed, color=darkseagreen4, label=xmlDocument];
m11_137 -> m11_138  [key=0, style=solid];
m11_137 -> m11_133  [key=2, style=dotted];
m11_138 -> m11_139  [key=0, style=solid];
m11_138 -> m11_142  [key=2, style=dotted];
m11_138 -> m11_143  [key=2, style=dotted];
m11_139 -> m11_140  [key=0, style=solid];
m11_139 -> m11_121  [key=2, style=dotted];
m11_140 -> m11_141  [key=0, style=solid];
m11_140 -> m11_122  [key=2, style=dotted];
m11_141 -> m11_134  [key=0, style=bold, color=blue];
m11_596 -> m11_597  [key=0, style=solid];
m11_597 -> m11_598  [key=0, style=solid];
m11_597 -> m11_604  [key=2, style=dotted];
m11_597 -> m11_605  [key=2, style=dotted];
m11_597 -> m11_592  [key=2, style=dotted];
m11_598 -> m11_599  [key=0, style=solid];
m11_598 -> m11_594  [key=2, style=dotted];
m11_598 -> m11_595  [key=2, style=dotted];
m11_599 -> m11_600  [key=0, style=solid];
m11_599 -> m11_221  [key=2, style=dotted];
m11_599 -> m11_601  [key=1, style=dashed, color=darkseagreen4, label=xmlProduct];
m11_600 -> m11_601  [key=0, style=solid];
m11_600 -> m11_449  [key=2, style=dotted];
m11_600 -> m11_122  [key=2, style=dotted];
m11_601 -> m11_602  [key=0, style=solid];
m11_601 -> m11_15  [key=2, style=dotted];
m11_602 -> m11_603  [key=0, style=solid];
m11_602 -> m11_122  [key=2, style=dotted];
m11_603 -> m11_596  [key=0, style=bold, color=blue];
m11_532 -> m11_533  [key=0, style=solid];
m11_533 -> m11_534  [key=0, style=solid];
m11_533 -> m11_539  [key=1, style=dashed, color=darkseagreen4, label=json];
m11_533 -> m11_533  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m11_534 -> m11_535  [key=0, style=solid];
m11_534 -> m11_221  [key=2, style=dotted];
m11_534 -> m11_537  [key=1, style=dashed, color=darkseagreen4, label=node];
m11_539 -> m11_540  [key=0, style=solid];
m11_539 -> m11_122  [key=2, style=dotted];
m11_535 -> m11_536  [key=0, style=solid];
m11_535 -> m11_345  [key=2, style=dotted];
m11_537 -> m11_538  [key=0, style=solid];
m11_537 -> m11_15  [key=2, style=dotted];
m11_537 -> m11_539  [key=1, style=dashed, color=darkseagreen4, label=newJson];
m11_536 -> m11_537  [key=0, style=solid];
m11_536 -> m11_122  [key=2, style=dotted];
m11_538 -> m11_539  [key=0, style=solid];
m11_538 -> m11_450  [key=2, style=dotted];
m11_540 -> m11_532  [key=0, style=bold, color=blue];
m11_229 -> m11_230  [key=0, style=solid];
m11_230 -> m11_231  [key=0, style=solid];
m11_230 -> m11_232  [key=1, style=dashed, color=darkseagreen4, label=xml];
m11_230 -> m11_230  [key=3, color=darkorchid, style=bold, label="Local variable string xml"];
m11_231 -> m11_232  [key=0, style=solid];
m11_231 -> m11_132  [key=2, style=dotted];
m11_231 -> m11_233  [key=1, style=dashed, color=darkseagreen4, label=doc];
m11_232 -> m11_233  [key=0, style=solid];
m11_232 -> m11_133  [key=2, style=dotted];
m11_233 -> m11_234  [key=0, style=solid];
m11_233 -> m11_15  [key=2, style=dotted];
m11_233 -> m11_235  [key=1, style=dashed, color=darkseagreen4, label=jsonText];
m11_234 -> m11_235  [key=0, style=solid];
m11_234 -> m11_234  [key=3, color=darkorchid, style=bold, label="Local variable string expected"];
m11_235 -> m11_236  [key=0, style=solid];
m11_235 -> m11_122  [key=2, style=dotted];
m11_236 -> m11_229  [key=0, style=bold, color=blue];
m11_669 -> m11_670  [key=0, style=solid];
m11_670 -> m11_671  [key=0, style=solid];
m11_670 -> m11_670  [key=3, color=darkorchid, style=bold, label="Local variable string xaml"];
m11_671 -> m11_672  [key=0, style=solid];
m11_671 -> m11_120  [key=2, style=dotted];
m11_671 -> m11_22  [key=2, style=dotted];
m11_671 -> m11_673  [key=1, style=dashed, color=darkseagreen4, label=json];
m11_671 -> m11_674  [key=1, style=dashed, color=darkseagreen4, label=json];
m11_672 -> m11_673  [key=0, style=solid];
m11_672 -> m11_672  [key=3, color=darkorchid, style=bold, label="Local variable string expectedJson"];
m11_673 -> m11_674  [key=0, style=solid];
m11_673 -> m11_122  [key=2, style=dotted];
m11_674 -> m11_675  [key=0, style=solid];
m11_674 -> m11_75  [key=2, style=dotted];
m11_675 -> m11_676  [key=0, style=solid];
m11_675 -> m11_51  [key=2, style=dotted];
m11_675 -> m11_677  [key=1, style=dashed, color=darkseagreen4, label=xaml2];
m11_676 -> m11_677  [key=0, style=solid];
m11_676 -> m11_676  [key=3, color=darkorchid, style=bold, label="Local variable string expectedXaml"];
m11_677 -> m11_678  [key=0, style=solid];
m11_677 -> m11_122  [key=2, style=dotted];
m11_678 -> m11_669  [key=0, style=bold, color=blue];
m11_642 -> m11_643  [key=0, style=solid];
m11_643 -> m11_644  [key=0, style=solid];
m11_643 -> m11_649  [key=2, style=dotted];
m11_643 -> m11_650  [key=2, style=dotted];
m11_643 -> m11_645  [key=1, style=dashed, color=darkseagreen4, label=ms];
m11_644 -> m11_645  [key=0, style=solid];
m11_644 -> m11_651  [key=2, style=dotted];
m11_644 -> m11_646  [key=1, style=dashed, color=darkseagreen4, label=xml];
m11_645 -> m11_646  [key=0, style=solid];
m11_645 -> m11_652  [key=2, style=dotted];
m11_646 -> m11_647  [key=0, style=solid];
m11_646 -> m11_653  [key=2, style=dotted];
m11_646 -> m11_654  [key=2, style=dotted];
m11_647 -> m11_648  [key=0, style=solid];
m11_647 -> m11_23  [key=2, style=dotted];
m11_648 -> m11_642  [key=0, style=bold, color=blue];
m11_867 -> m11_868  [key=0, style=solid];
m11_868 -> m11_869  [key=0, style=solid];
m11_868 -> m11_882  [key=2, style=dotted];
m11_868 -> m11_875  [key=1, style=dashed, color=darkseagreen4, label=model];
m11_869 -> m11_870  [key=0, style=solid];
m11_869 -> m11_850  [key=2, style=dotted];
m11_869 -> m11_18  [key=2, style=dotted];
m11_875 -> m11_876  [key=0, style=solid];
m11_875 -> m11_887  [key=2, style=dotted];
m11_870 -> m11_871  [key=0, style=solid];
m11_870 -> m11_97  [key=2, style=dotted];
m11_870 -> m11_883  [key=2, style=dotted];
m11_870 -> m11_48  [key=2, style=dotted];
m11_870 -> m11_639  [key=2, style=dotted];
m11_870 -> m11_875  [key=1, style=dashed, color=darkseagreen4, label=serializer];
m11_870 -> m11_879  [key=1, style=dashed, color=darkseagreen4, label=serializer];
m11_871 -> m11_872  [key=0, style=solid];
m11_871 -> m11_884  [key=2, style=dotted];
m11_871 -> m11_876  [key=1, style=dashed, color=darkseagreen4, label=json];
m11_871 -> m11_877  [key=1, style=dashed, color=darkseagreen4, label=json];
m11_879 -> m11_880  [key=0, style=solid];
m11_879 -> m11_641  [key=2, style=dotted];
m11_872 -> m11_873  [key=0, style=solid];
m11_872 -> m11_885  [key=2, style=dotted];
m11_876 -> m11_877  [key=0, style=solid];
m11_876 -> m11_321  [key=2, style=dotted];
m11_876 -> m11_23  [key=2, style=dotted];
m11_877 -> m11_878  [key=0, style=solid];
m11_877 -> m11_46  [key=2, style=dotted];
m11_877 -> m11_321  [key=2, style=dotted];
m11_873 -> m11_874  [key=0, style=solid];
m11_873 -> m11_886  [key=2, style=dotted];
m11_873 -> m11_875  [key=1, style=dashed, color=darkseagreen4, label=jsonWriter];
m11_874 -> m11_875  [key=0, style=solid];
m11_878 -> m11_879  [key=0, style=solid];
m11_878 -> m11_45  [key=2, style=dotted];
m11_880 -> m11_881  [key=0, style=solid];
m11_880 -> m11_51  [key=2, style=dotted];
m11_880 -> m11_23  [key=2, style=dotted];
m11_881 -> m11_867  [key=0, style=bold, color=blue];
m11_205 -> m11_206  [key=0, style=solid];
m11_206 -> m11_207  [key=0, style=solid];
m11_206 -> m11_206  [key=3, color=darkorchid, style=bold, label="Local variable string xmlString"];
m11_207 -> m11_208  [key=0, style=solid];
m11_207 -> m11_120  [key=2, style=dotted];
m11_207 -> m11_210  [key=1, style=dashed, color=darkseagreen4, label=xml];
m11_208 -> m11_209  [key=0, style=solid];
m11_208 -> m11_22  [key=2, style=dotted];
m11_208 -> m11_208  [key=3, color=green, style=bold, label="Local variable string content"];
m11_210 -> m11_211  [key=0, style=solid];
m11_210 -> m11_213  [key=2, style=dotted];
m11_209 -> m11_210  [key=0, style=solid];
m11_209 -> m11_142  [key=2, style=dotted];
m11_211 -> m11_212  [key=0, style=solid];
m11_211 -> m11_214  [key=2, style=dotted];
m11_212 -> m11_205  [key=0, style=bold, color=blue];
m11_719 -> m11_720  [key=0, style=solid];
m11_720 -> m11_721  [key=0, style=solid];
m11_720 -> m11_720  [key=3, color=darkorchid, style=bold, label="Local variable string xmlString"];
m11_721 -> m11_722  [key=0, style=solid];
m11_721 -> m11_120  [key=2, style=dotted];
m11_721 -> m11_724  [key=1, style=dashed, color=darkseagreen4, label=xml];
m11_722 -> m11_723  [key=0, style=solid];
m11_722 -> m11_22  [key=2, style=dotted];
m11_724 -> m11_725  [key=0, style=solid];
m11_724 -> m11_213  [key=2, style=dotted];
m11_723 -> m11_724  [key=0, style=solid];
m11_723 -> m11_142  [key=2, style=dotted];
m11_725 -> m11_726  [key=0, style=solid];
m11_725 -> m11_214  [key=2, style=dotted];
m11_726 -> m11_719  [key=0, style=bold, color=blue];
m11_123 -> m11_124  [key=0, style=solid];
m11_124 -> m11_125  [key=0, style=solid];
m11_124 -> m11_126  [key=1, style=dashed, color=darkseagreen4, label=xml];
m11_124 -> m11_130  [key=1, style=dashed, color=darkseagreen4, label=xml];
m11_124 -> m11_113  [key=3, color=darkorchid, style=bold, label="Local variable string xml"];
m11_125 -> m11_126  [key=0, style=solid];
m11_125 -> m11_132  [key=2, style=dotted];
m11_125 -> m11_127  [key=1, style=dashed, color=darkseagreen4, label=d];
m11_126 -> m11_127  [key=0, style=solid];
m11_126 -> m11_133  [key=2, style=dotted];
m11_130 -> m11_131  [key=0, style=solid];
m11_130 -> m11_23  [key=2, style=dotted];
m11_127 -> m11_128  [key=0, style=solid];
m11_127 -> m11_121  [key=2, style=dotted];
m11_127 -> m11_129  [key=1, style=dashed, color=darkseagreen4, label=json];
m11_128 -> m11_129  [key=0, style=solid];
m11_128 -> m11_122  [key=2, style=dotted];
m11_129 -> m11_130  [key=0, style=solid];
m11_129 -> m11_110  [key=2, style=dotted];
m11_131 -> m11_123  [key=0, style=bold, color=blue];
m11_800 -> m11_801  [key=0, style=solid];
m11_801 -> m11_802  [key=0, style=solid];
m11_801 -> m11_807  [key=2, style=dotted];
m11_801 -> m11_804  [key=1, style=dashed, color=darkseagreen4, label=dt];
m11_802 -> m11_803  [key=0, style=solid];
m11_802 -> m11_802  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m11_804 -> m11_805  [key=0, style=solid];
m11_804 -> m11_808  [key=2, style=dotted];
m11_804 -> m11_271  [key=2, style=dotted];
m11_804 -> m11_23  [key=2, style=dotted];
m11_803 -> m11_804  [key=0, style=solid];
m11_803 -> m11_75  [key=2, style=dotted];
m11_803 -> m11_805  [key=1, style=dashed, color=darkseagreen4, label=dxml];
m11_805 -> m11_806  [key=0, style=solid];
m11_805 -> m11_271  [key=2, style=dotted];
m11_805 -> m11_84  [key=2, style=dotted];
m11_806 -> m11_800  [key=0, style=bold, color=blue];
m11_473 -> m11_474  [key=0, style=solid];
m11_474 -> m11_475  [key=0, style=solid];
m11_474 -> m11_476  [key=1, style=dashed, color=darkseagreen4, label=xml];
m11_474 -> m11_474  [key=3, color=darkorchid, style=bold, label="Local variable string xml"];
m11_475 -> m11_476  [key=0, style=solid];
m11_475 -> m11_132  [key=2, style=dotted];
m11_475 -> m11_477  [key=1, style=dashed, color=darkseagreen4, label=doc];
m11_476 -> m11_477  [key=0, style=solid];
m11_476 -> m11_133  [key=2, style=dotted];
m11_477 -> m11_478  [key=0, style=solid];
m11_477 -> m11_15  [key=2, style=dotted];
m11_477 -> m11_479  [key=1, style=dashed, color=darkseagreen4, label=jsonText];
m11_477 -> m11_480  [key=1, style=dashed, color=darkseagreen4, label=jsonText];
m11_478 -> m11_479  [key=0, style=solid];
m11_478 -> m11_478  [key=3, color=darkorchid, style=bold, label="Local variable string expected"];
m11_479 -> m11_480  [key=0, style=solid];
m11_479 -> m11_122  [key=2, style=dotted];
m11_480 -> m11_481  [key=0, style=solid];
m11_480 -> m11_24  [key=2, style=dotted];
m11_481 -> m11_482  [key=0, style=solid];
m11_481 -> m11_23  [key=2, style=dotted];
m11_482 -> m11_473  [key=0, style=bold, color=blue];
m11_763 -> m11_764  [key=0, style=solid];
m11_764 -> m11_765  [key=0, style=solid];
m11_764 -> m11_768  [key=2, style=dotted];
m11_765 -> m11_766  [key=0, style=solid];
m11_765 -> m11_22  [key=2, style=dotted];
m11_766 -> m11_767  [key=0, style=solid];
m11_766 -> m11_23  [key=2, style=dotted];
m11_767 -> m11_763  [key=0, style=bold, color=blue];
m11_613 -> m11_614  [key=0, style=solid];
m11_614 -> m11_615  [key=0, style=solid];
m11_614 -> m11_616  [key=1, style=dashed, color=darkseagreen4, label=xml];
m11_614 -> m11_614  [key=3, color=darkorchid, style=bold, label="Local variable string xml"];
m11_615 -> m11_616  [key=0, style=solid];
m11_615 -> m11_132  [key=2, style=dotted];
m11_615 -> m11_617  [key=1, style=dashed, color=darkseagreen4, label=d];
m11_616 -> m11_617  [key=0, style=solid];
m11_616 -> m11_133  [key=2, style=dotted];
m11_617 -> m11_618  [key=0, style=solid];
m11_617 -> m11_15  [key=2, style=dotted];
m11_617 -> m11_619  [key=1, style=dashed, color=darkseagreen4, label=json];
m11_618 -> m11_619  [key=0, style=solid];
m11_618 -> m11_122  [key=2, style=dotted];
m11_619 -> m11_620  [key=0, style=solid];
m11_619 -> m11_221  [key=2, style=dotted];
m11_620 -> m11_621  [key=0, style=solid];
m11_620 -> m11_310  [key=2, style=dotted];
m11_620 -> m11_122  [key=2, style=dotted];
m11_621 -> m11_613  [key=0, style=bold, color=blue];
m11_834 -> m11_835  [key=0, style=solid];
m11_835 -> m11_836  [key=0, style=solid];
m11_835 -> m11_120  [key=2, style=dotted];
m11_835 -> m11_837  [key=1, style=dashed, color=darkseagreen4, label=original];
m11_836 -> m11_837  [key=0, style=solid];
m11_836 -> m11_51  [key=2, style=dotted];
m11_836 -> m11_23  [key=2, style=dotted];
m11_837 -> m11_838  [key=0, style=solid];
m11_837 -> m11_121  [key=2, style=dotted];
m11_837 -> m11_839  [key=1, style=dashed, color=darkseagreen4, label=json];
m11_838 -> m11_839  [key=0, style=solid];
m11_838 -> m11_23  [key=2, style=dotted];
m11_839 -> m11_840  [key=0, style=solid];
m11_839 -> m11_110  [key=2, style=dotted];
m11_840 -> m11_841  [key=0, style=solid];
m11_840 -> m11_51  [key=2, style=dotted];
m11_840 -> m11_23  [key=2, style=dotted];
m11_841 -> m11_834  [key=0, style=bold, color=blue];
m11_279 -> m11_280  [key=0, style=solid];
m11_280 -> m11_281  [key=0, style=solid];
m11_280 -> m11_24  [key=2, style=dotted];
m11_280 -> m11_282  [key=1, style=dashed, color=darkseagreen4, label=node];
m11_281 -> m11_282  [key=0, style=solid];
m11_281 -> m11_23  [key=2, style=dotted];
m11_282 -> m11_283  [key=0, style=solid];
m11_282 -> m11_0  [key=2, style=dotted];
m11_283 -> m11_284  [key=0, style=solid];
m11_283 -> m11_122  [key=2, style=dotted];
m11_284 -> m11_279  [key=0, style=bold, color=blue];
m11_564 -> m11_565  [key=0, style=solid];
m11_565 -> m11_566  [key=0, style=solid];
m11_565 -> m11_570  [key=1, style=dashed, color=darkseagreen4, label=json];
m11_565 -> m11_565  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m11_566 -> m11_567  [key=0, style=solid];
m11_566 -> m11_221  [key=2, style=dotted];
m11_566 -> m11_569  [key=1, style=dashed, color=darkseagreen4, label=node];
m11_570 -> m11_571  [key=0, style=solid];
m11_570 -> m11_122  [key=2, style=dotted];
m11_567 -> m11_568  [key=0, style=solid];
m11_567 -> m11_345  [key=2, style=dotted];
m11_569 -> m11_570  [key=0, style=solid];
m11_569 -> m11_15  [key=2, style=dotted];
m11_568 -> m11_569  [key=0, style=solid];
m11_568 -> m11_122  [key=2, style=dotted];
m11_571 -> m11_564  [key=0, style=bold, color=blue];
m11_383 -> m11_384  [key=0, style=solid];
m11_384 -> m11_385  [key=0, style=solid];
m11_384 -> m11_142  [key=2, style=dotted];
m11_384 -> m11_386  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m11_385 -> m11_383  [key=0, style=bold, color=blue];
m11_362 -> m11_363  [key=0, style=solid];
m11_363 -> m11_364  [key=0, style=solid];
m11_363 -> m11_365  [key=1, style=dashed, color=darkseagreen4, label=xml];
m11_363 -> m11_363  [key=3, color=darkorchid, style=bold, label="Local variable string xml"];
m11_364 -> m11_365  [key=0, style=solid];
m11_364 -> m11_132  [key=2, style=dotted];
m11_364 -> m11_366  [key=1, style=dashed, color=darkseagreen4, label=doc];
m11_364 -> m11_369  [key=1, style=dashed, color=darkseagreen4, label=doc];
m11_365 -> m11_366  [key=0, style=solid];
m11_365 -> m11_133  [key=2, style=dotted];
m11_366 -> m11_367  [key=0, style=solid];
m11_366 -> m11_15  [key=2, style=dotted];
m11_366 -> m11_368  [key=1, style=dashed, color=darkseagreen4, label=jsonText];
m11_369 -> m11_370  [key=0, style=solid];
m11_369 -> m11_23  [key=2, style=dotted];
m11_367 -> m11_368  [key=0, style=solid];
m11_367 -> m11_122  [key=2, style=dotted];
m11_368 -> m11_369  [key=0, style=solid];
m11_368 -> m11_24  [key=2, style=dotted];
m11_370 -> m11_362  [key=0, style=bold, color=blue];
m11_312 -> m11_313  [key=0, style=solid];
m11_313 -> m11_312  [key=0, style=bold, color=blue];
m11_24 -> m11_25  [key=0, style=solid];
m11_24 -> m11_27  [key=3, color=darkorchid, style=bold, label="method methodReturn XmlNode DeserializeXmlNode"];
m11_24 -> m11_283  [key=3, color=darkorchid, style=bold, label="Parameter variable string json"];
m11_24 -> m11_331  [key=3, color=darkorchid, style=bold, label="Parameter variable string json"];
m11_24 -> m11_338  [key=3, color=darkorchid, style=bold, label="Parameter variable string json"];
m11_24 -> m11_358  [key=3, color=darkorchid, style=bold, label="Parameter variable string json"];
m11_24 -> m11_366  [key=3, color=darkorchid, style=bold, label="Parameter variable string json"];
m11_24 -> m11_372  [key=3, color=darkorchid, style=bold, label="Parameter variable string json"];
m11_24 -> m11_390  [key=3, color=darkorchid, style=bold, label="Parameter variable string json"];
m11_24 -> m11_477  [key=3, color=darkorchid, style=bold, label="Parameter variable string json"];
m11_24 -> m11_487  [key=3, color=darkorchid, style=bold, label="Parameter variable string json"];
m11_24 -> m11_496  [key=3, color=darkorchid, style=bold, label="Parameter variable string json"];
m11_24 -> m11_501  [key=3, color=darkorchid, style=bold, label="Parameter variable string json"];
m11_24 -> m11_573  [key=3, color=darkorchid, style=bold, label="Parameter variable string json"];
m11_25 -> m11_26  [key=0, style=solid];
m11_25 -> m11_27  [key=2, style=dotted];
m11_26 -> m11_24  [key=0, style=bold, color=blue];
m11_294 -> m11_295  [key=0, style=solid];
m11_295 -> m11_296  [key=0, style=solid];
m11_295 -> m11_299  [key=1, style=dashed, color=darkseagreen4, label=xml];
m11_295 -> m11_303  [key=1, style=dashed, color=darkseagreen4, label=xml];
m11_295 -> m11_304  [key=1, style=dashed, color=darkseagreen4, label=xml];
m11_295 -> m11_308  [key=1, style=dashed, color=darkseagreen4, label=xml];
m11_295 -> m11_295  [key=3, color=darkorchid, style=bold, label="Local variable string xml"];
m11_296 -> m11_297  [key=0, style=solid];
m11_296 -> m11_301  [key=1, style=dashed, color=darkseagreen4, label=expected];
m11_296 -> m11_306  [key=1, style=dashed, color=darkseagreen4, label=expected];
m11_296 -> m11_296  [key=3, color=green, style=bold, label="Property variable bool CanWrite"];
m11_299 -> m11_300  [key=0, style=solid];
m11_299 -> m11_133  [key=2, style=dotted];
m11_299 -> m11_296  [key=3, color=green, style=bold, label="Local variable dynamic d"];
m11_303 -> m11_304  [key=0, style=solid];
m11_303 -> m11_310  [key=2, style=dotted];
m11_303 -> m11_122  [key=2, style=dotted];
m11_304 -> m11_305  [key=0, style=solid];
m11_304 -> m11_120  [key=2, style=dotted];
m11_308 -> m11_309  [key=0, style=solid];
m11_308 -> m11_311  [key=2, style=dotted];
m11_308 -> m11_122  [key=2, style=dotted];
m11_297 -> m11_298  [key=0, style=solid];
m11_297 -> m11_132  [key=2, style=dotted];
m11_301 -> m11_302  [key=0, style=solid];
m11_301 -> m11_122  [key=2, style=dotted];
m11_306 -> m11_307  [key=0, style=solid];
m11_306 -> m11_122  [key=2, style=dotted];
m11_298 -> m11_299  [key=0, style=solid];
m11_298 -> m11_298  [key=1, style=dashed, color=darkseagreen4, label=doc1];
m11_298 -> m11_300  [key=1, style=dashed, color=darkseagreen4, label=doc1];
m11_300 -> m11_301  [key=0, style=solid];
m11_300 -> m11_15  [key=2, style=dotted];
m11_300 -> m11_302  [key=1, style=dashed, color=darkseagreen4, label=json1];
m11_302 -> m11_303  [key=0, style=solid];
m11_302 -> m11_221  [key=2, style=dotted];
m11_305 -> m11_306  [key=0, style=solid];
m11_305 -> m11_22  [key=2, style=dotted];
m11_305 -> m11_307  [key=1, style=dashed, color=darkseagreen4, label=json2];
m11_307 -> m11_308  [key=0, style=solid];
m11_307 -> m11_75  [key=2, style=dotted];
m11_309 -> m11_294  [key=0, style=bold, color=blue];
m11_781 -> m11_782  [key=0, style=solid];
m11_782 -> m11_783  [key=0, style=solid];
m11_782 -> m11_75  [key=2, style=dotted];
m11_782 -> m11_784  [key=1, style=dashed, color=darkseagreen4, label=d];
m11_782 -> m11_785  [key=1, style=dashed, color=darkseagreen4, label=d];
m11_782 -> m11_786  [key=1, style=dashed, color=darkseagreen4, label=d];
m11_783 -> m11_784  [key=0, style=solid];
m11_783 -> m11_23  [key=2, style=dotted];
m11_784 -> m11_785  [key=0, style=solid];
m11_784 -> m11_23  [key=2, style=dotted];
m11_785 -> m11_786  [key=0, style=solid];
m11_785 -> m11_23  [key=2, style=dotted];
m11_786 -> m11_787  [key=0, style=solid];
m11_786 -> m11_23  [key=2, style=dotted];
m11_787 -> m11_781  [key=0, style=bold, color=blue];
m11_345 -> m11_346  [key=0, style=solid];
m11_345 -> m11_350  [key=1, style=dashed, color=darkseagreen4, label=XmlNode];
m11_345 -> m11_513  [key=3, color=darkorchid, style=bold, label="Parameter variable XmlNode node"];
m11_345 -> m11_526  [key=3, color=darkorchid, style=bold, label="Parameter variable XmlNode node"];
m11_345 -> m11_534  [key=3, color=darkorchid, style=bold, label="Parameter variable XmlNode node"];
m11_345 -> m11_543  [key=3, color=darkorchid, style=bold, label="Parameter variable XmlNode node"];
m11_345 -> m11_558  [key=3, color=darkorchid, style=bold, label="Parameter variable XmlNode node"];
m11_345 -> m11_566  [key=3, color=darkorchid, style=bold, label="Parameter variable XmlNode node"];
m11_346 -> m11_347  [key=0, style=solid];
m11_346 -> m11_63  [key=2, style=dotted];
m11_350 -> m11_351  [key=0, style=solid];
m11_350 -> m11_353  [key=2, style=dotted];
m11_347 -> m11_348  [key=0, style=solid];
m11_347 -> m11_347  [key=1, style=dashed, color=darkseagreen4, label=settings];
m11_347 -> m11_349  [key=1, style=dashed, color=darkseagreen4, label=settings];
m11_348 -> m11_349  [key=0, style=solid];
m11_348 -> m11_62  [key=2, style=dotted];
m11_348 -> m11_351  [key=1, style=dashed, color=darkseagreen4, label=sw];
m11_349 -> m11_350  [key=0, style=solid];
m11_349 -> m11_61  [key=2, style=dotted];
m11_351 -> m11_352  [key=0, style=solid];
m11_351 -> m11_67  [key=2, style=dotted];
m11_352 -> m11_345  [key=0, style=bold, color=blue];
m11_556 -> m11_557  [key=0, style=solid];
m11_557 -> m11_558  [key=0, style=solid];
m11_557 -> m11_557  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m11_558 -> m11_559  [key=0, style=solid];
m11_558 -> m11_221  [key=2, style=dotted];
m11_558 -> m11_561  [key=1, style=dashed, color=darkseagreen4, label=node];
m11_559 -> m11_560  [key=0, style=solid];
m11_559 -> m11_345  [key=2, style=dotted];
m11_561 -> m11_562  [key=0, style=solid];
m11_561 -> m11_15  [key=2, style=dotted];
m11_560 -> m11_561  [key=0, style=solid];
m11_560 -> m11_122  [key=2, style=dotted];
m11_562 -> m11_563  [key=0, style=solid];
m11_562 -> m11_122  [key=2, style=dotted];
m11_563 -> m11_556  [key=0, style=bold, color=blue];
m11_310 -> m11_322  [key=0, style=solid];
m11_310 -> m11_323  [key=1, style=dashed, color=darkseagreen4, label=bool];
m11_310 -> m11_324  [key=1, style=dashed, color=darkseagreen4, label=XmlDocument];
m11_310 -> m11_302  [key=3, color=darkorchid, style=bold, label="Parameter variable XmlDocument doc"];
m11_310 -> m11_619  [key=3, color=darkorchid, style=bold, label="Parameter variable XmlDocument doc"];
m11_310 -> m11_620  [key=3, color=darkorchid, style=bold, label="Parameter variable bool indent"];
m11_322 -> m11_323  [key=0, style=solid];
m11_322 -> m11_319  [key=2, style=dotted];
m11_322 -> m11_325  [key=1, style=dashed, color=darkseagreen4, label=builder];
m11_323 -> m11_324  [key=0, style=solid];
m11_323 -> m11_312  [key=2, style=dotted];
m11_323 -> m11_63  [key=2, style=dotted];
m11_323 -> m11_61  [key=2, style=dotted];
m11_324 -> m11_325  [key=0, style=solid];
m11_324 -> m11_320  [key=2, style=dotted];
m11_325 -> m11_326  [key=0, style=solid];
m11_325 -> m11_321  [key=2, style=dotted];
m11_326 -> m11_310  [key=0, style=bold, color=blue];
m11_467 -> m11_468  [key=0, style=solid];
m11_468 -> m11_469  [key=0, style=solid];
m11_468 -> m11_132  [key=2, style=dotted];
m11_468 -> m11_470  [key=1, style=dashed, color=darkseagreen4, label=doc];
m11_469 -> m11_470  [key=0, style=solid];
m11_469 -> m11_133  [key=2, style=dotted];
m11_470 -> m11_471  [key=0, style=solid];
m11_470 -> m11_15  [key=2, style=dotted];
m11_471 -> m11_472  [key=0, style=solid];
m11_471 -> m11_122  [key=2, style=dotted];
m11_472 -> m11_467  [key=0, style=bold, color=blue];
m11_580 -> m11_581  [key=0, style=solid];
m11_581 -> m11_582  [key=0, style=solid];
m11_581 -> m11_592  [key=2, style=dotted];
m11_581 -> m11_583  [key=1, style=dashed, color=darkseagreen4, label=product];
m11_581 -> m11_584  [key=1, style=dashed, color=darkseagreen4, label=product];
m11_581 -> m11_585  [key=1, style=dashed, color=darkseagreen4, label=product];
m11_581 -> m11_586  [key=1, style=dashed, color=darkseagreen4, label=product];
m11_582 -> m11_583  [key=0, style=solid];
m11_583 -> m11_584  [key=0, style=solid];
m11_583 -> m11_593  [key=2, style=dotted];
m11_584 -> m11_585  [key=0, style=solid];
m11_585 -> m11_586  [key=0, style=solid];
m11_586 -> m11_587  [key=0, style=solid];
m11_586 -> m11_594  [key=2, style=dotted];
m11_586 -> m11_595  [key=2, style=dotted];
m11_587 -> m11_588  [key=0, style=solid];
m11_587 -> m11_221  [key=2, style=dotted];
m11_587 -> m11_589  [key=1, style=dashed, color=darkseagreen4, label=xmlProduct];
m11_588 -> m11_589  [key=0, style=solid];
m11_588 -> m11_449  [key=2, style=dotted];
m11_588 -> m11_122  [key=2, style=dotted];
m11_589 -> m11_590  [key=0, style=solid];
m11_589 -> m11_15  [key=2, style=dotted];
m11_590 -> m11_591  [key=0, style=solid];
m11_590 -> m11_122  [key=2, style=dotted];
m11_591 -> m11_580  [key=0, style=bold, color=blue];
m11_828 -> m11_829  [key=0, style=solid];
m11_829 -> m11_830  [key=0, style=solid];
m11_829 -> m11_757  [key=3, color=darkorchid, style=bold, label="Local variable string xmlString"];
m11_830 -> m11_831  [key=0, style=solid];
m11_830 -> m11_120  [key=2, style=dotted];
m11_831 -> m11_832  [key=0, style=solid];
m11_831 -> m11_22  [key=2, style=dotted];
m11_832 -> m11_833  [key=0, style=solid];
m11_832 -> m11_23  [key=2, style=dotted];
m11_833 -> m11_828  [key=0, style=bold, color=blue];
m11_354 -> m11_355  [key=0, style=solid];
m11_355 -> m11_356  [key=0, style=solid];
m11_355 -> m11_357  [key=1, style=dashed, color=darkseagreen4, label=xml];
m11_355 -> m11_355  [key=3, color=darkorchid, style=bold, label="Local variable string xml"];
m11_356 -> m11_357  [key=0, style=solid];
m11_356 -> m11_132  [key=2, style=dotted];
m11_356 -> m11_358  [key=1, style=dashed, color=darkseagreen4, label=doc];
m11_356 -> m11_360  [key=1, style=dashed, color=darkseagreen4, label=doc];
m11_357 -> m11_358  [key=0, style=solid];
m11_357 -> m11_133  [key=2, style=dotted];
m11_358 -> m11_359  [key=0, style=solid];
m11_358 -> m11_15  [key=2, style=dotted];
m11_360 -> m11_361  [key=0, style=solid];
m11_360 -> m11_23  [key=2, style=dotted];
m11_359 -> m11_360  [key=0, style=solid];
m11_359 -> m11_24  [key=2, style=dotted];
m11_361 -> m11_354  [key=0, style=bold, color=blue];
m11_398 -> m11_399  [key=0, style=solid];
m11_399 -> m11_400  [key=0, style=solid];
m11_399 -> m11_401  [key=1, style=dashed, color=darkseagreen4, label=arrayXml];
m11_399 -> m11_399  [key=3, color=darkorchid, style=bold, label="Local variable string arrayXml"];
m11_400 -> m11_401  [key=0, style=solid];
m11_400 -> m11_132  [key=2, style=dotted];
m11_400 -> m11_402  [key=1, style=dashed, color=darkseagreen4, label=arrayDoc];
m11_401 -> m11_402  [key=0, style=solid];
m11_401 -> m11_133  [key=2, style=dotted];
m11_402 -> m11_403  [key=0, style=solid];
m11_402 -> m11_15  [key=2, style=dotted];
m11_402 -> m11_404  [key=1, style=dashed, color=darkseagreen4, label=arrayJsonText];
m11_403 -> m11_404  [key=0, style=solid];
m11_403 -> m11_403  [key=3, color=darkorchid, style=bold, label="Local variable string expected"];
m11_404 -> m11_405  [key=0, style=solid];
m11_404 -> m11_122  [key=2, style=dotted];
m11_405 -> m11_406  [key=0, style=solid];
m11_405 -> m11_407  [key=1, style=dashed, color=darkseagreen4, label=arrayXml];
m11_406 -> m11_407  [key=0, style=solid];
m11_406 -> m11_132  [key=2, style=dotted];
m11_406 -> m11_408  [key=1, style=dashed, color=darkseagreen4, label=arrayDoc];
m11_407 -> m11_408  [key=0, style=solid];
m11_407 -> m11_133  [key=2, style=dotted];
m11_408 -> m11_409  [key=0, style=solid];
m11_408 -> m11_15  [key=2, style=dotted];
m11_408 -> m11_410  [key=1, style=dashed, color=darkseagreen4, label=arrayJsonText];
m11_409 -> m11_410  [key=0, style=solid];
m11_410 -> m11_411  [key=0, style=solid];
m11_410 -> m11_122  [key=2, style=dotted];
m11_411 -> m11_412  [key=0, style=solid];
m11_411 -> m11_413  [key=1, style=dashed, color=darkseagreen4, label=arrayXml];
m11_412 -> m11_413  [key=0, style=solid];
m11_412 -> m11_132  [key=2, style=dotted];
m11_412 -> m11_414  [key=1, style=dashed, color=darkseagreen4, label=arrayDoc];
m11_413 -> m11_414  [key=0, style=solid];
m11_413 -> m11_133  [key=2, style=dotted];
m11_414 -> m11_415  [key=0, style=solid, color=green];
m11_414 -> m11_15  [key=2, style=dotted];
m11_414 -> m11_416  [key=1, style=dashed, color=green, label=arrayJsonText];
m11_415 -> m11_416  [key=0, style=solid, color=green];
m11_416 -> m11_417  [key=0, style=solid, color=green];
m11_416 -> m11_122  [key=2, style=dotted, color=green];
m11_417 -> m11_398  [key=0, style=bold, color=blue];
m11_451 -> m11_452  [key=0, style=solid];
m11_452 -> m11_453  [key=0, style=solid];
m11_452 -> m11_455  [key=1, style=dashed, color=darkseagreen4, label=json];
m11_452 -> m11_458  [key=1, style=dashed, color=darkseagreen4, label=json];
m11_452 -> m11_440  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m11_453 -> m11_454  [key=0, style=solid];
m11_453 -> m11_221  [key=2, style=dotted];
m11_453 -> m11_457  [key=1, style=dashed, color=darkseagreen4, label=newDoc];
m11_455 -> m11_456  [key=0, style=solid];
m11_455 -> m11_75  [key=2, style=dotted];
m11_458 -> m11_459  [key=0, style=solid];
m11_458 -> m11_122  [key=2, style=dotted];
m11_454 -> m11_455  [key=0, style=solid];
m11_454 -> m11_449  [key=2, style=dotted];
m11_454 -> m11_122  [key=2, style=dotted];
m11_457 -> m11_458  [key=0, style=solid];
m11_457 -> m11_15  [key=2, style=dotted];
m11_456 -> m11_457  [key=0, style=solid];
m11_456 -> m11_51  [key=2, style=dotted];
m11_456 -> m11_449  [key=2, style=dotted];
m11_456 -> m11_122  [key=2, style=dotted];
m11_459 -> m11_451  [key=0, style=bold, color=blue];
m11_572 -> m11_573  [key=0, style=solid];
m11_573 -> m11_574  [key=0, style=solid];
m11_573 -> m11_578  [key=1, style=dashed, color=darkseagreen4, label=json];
m11_573 -> m11_573  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m11_574 -> m11_575  [key=0, style=solid];
m11_574 -> m11_576  [key=2, style=dotted];
m11_574 -> m11_577  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m11_575 -> m11_572  [key=0, style=bold, color=blue];
m11_483 -> m11_484  [key=0, style=solid];
m11_484 -> m11_485  [key=0, style=solid];
m11_484 -> m11_486  [key=1, style=dashed, color=darkseagreen4, label=xml];
m11_484 -> m11_484  [key=3, color=darkorchid, style=bold, label="Local variable string xml"];
m11_485 -> m11_486  [key=0, style=solid];
m11_485 -> m11_132  [key=2, style=dotted];
m11_485 -> m11_487  [key=1, style=dashed, color=darkseagreen4, label=doc];
m11_485 -> m11_491  [key=1, style=dashed, color=darkseagreen4, label=doc];
m11_486 -> m11_487  [key=0, style=solid];
m11_486 -> m11_133  [key=2, style=dotted];
m11_487 -> m11_488  [key=0, style=solid];
m11_487 -> m11_15  [key=2, style=dotted];
m11_491 -> m11_492  [key=0, style=solid];
m11_491 -> m11_23  [key=2, style=dotted];
m11_488 -> m11_489  [key=0, style=solid];
m11_488 -> m11_493  [key=2, style=dotted];
m11_488 -> m11_494  [key=2, style=dotted];
m11_488 -> m11_488  [key=1, style=dashed, color=darkseagreen4, label=jsonText];
m11_488 -> m11_490  [key=1, style=dashed, color=darkseagreen4, label=jsonText];
m11_489 -> m11_490  [key=0, style=solid];
m11_489 -> m11_122  [key=2, style=dotted];
m11_490 -> m11_491  [key=0, style=solid];
m11_490 -> m11_24  [key=2, style=dotted];
m11_492 -> m11_483  [key=0, style=bold, color=blue];
m11_679 -> m11_680  [key=0, style=solid];
m11_680 -> m11_681  [key=0, style=solid];
m11_680 -> m11_682  [key=1, style=dashed, color=darkseagreen4, label=xaml];
m11_680 -> m11_670  [key=3, color=darkorchid, style=bold, label="Local variable string xaml"];
m11_681 -> m11_682  [key=0, style=solid];
m11_681 -> m11_132  [key=2, style=dotted];
m11_681 -> m11_683  [key=1, style=dashed, color=darkseagreen4, label=document];
m11_682 -> m11_683  [key=0, style=solid];
m11_682 -> m11_133  [key=2, style=dotted];
m11_683 -> m11_684  [key=0, style=solid];
m11_683 -> m11_15  [key=2, style=dotted];
m11_683 -> m11_685  [key=1, style=dashed, color=darkseagreen4, label=json];
m11_683 -> m11_686  [key=1, style=dashed, color=darkseagreen4, label=json];
m11_684 -> m11_685  [key=0, style=solid];
m11_684 -> m11_672  [key=3, color=darkorchid, style=bold, label="Local variable string expectedJson"];
m11_685 -> m11_686  [key=0, style=solid];
m11_685 -> m11_122  [key=2, style=dotted];
m11_686 -> m11_687  [key=0, style=solid];
m11_686 -> m11_221  [key=2, style=dotted];
m11_686 -> m11_689  [key=1, style=dashed, color=darkseagreen4, label=node];
m11_687 -> m11_688  [key=0, style=solid];
m11_687 -> m11_62  [key=2, style=dotted];
m11_687 -> m11_691  [key=1, style=dashed, color=darkseagreen4, label=sw];
m11_689 -> m11_690  [key=0, style=solid];
m11_689 -> m11_353  [key=2, style=dotted];
m11_688 -> m11_689  [key=0, style=solid];
m11_688 -> m11_63  [key=2, style=dotted];
m11_688 -> m11_61  [key=2, style=dotted];
m11_688 -> m11_690  [key=1, style=dashed, color=darkseagreen4, label=writer];
m11_691 -> m11_692  [key=0, style=solid];
m11_691 -> m11_67  [key=2, style=dotted];
m11_691 -> m11_693  [key=1, style=dashed, color=darkseagreen4, label=xaml2];
m11_690 -> m11_691  [key=0, style=solid];
m11_690 -> m11_66  [key=2, style=dotted];
m11_692 -> m11_693  [key=0, style=solid];
m11_692 -> m11_676  [key=3, color=darkorchid, style=bold, label="Local variable string expectedXaml"];
m11_693 -> m11_694  [key=0, style=solid];
m11_693 -> m11_122  [key=2, style=dotted];
m11_694 -> m11_679  [key=0, style=bold, color=blue];
m11_495 -> m11_496  [key=0, style=solid];
m11_496 -> m11_497  [key=0, style=solid];
m11_496 -> m11_496  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m11_497 -> m11_498  [key=0, style=solid];
m11_497 -> m11_24  [key=2, style=dotted];
m11_498 -> m11_499  [key=0, style=solid];
m11_498 -> m11_23  [key=2, style=dotted];
m11_499 -> m11_495  [key=0, style=bold, color=blue];
m11_112 -> m11_113  [key=0, style=solid];
m11_113 -> m11_114  [key=0, style=solid];
m11_113 -> m11_118  [key=1, style=dashed, color=darkseagreen4, label=xml];
m11_113 -> m11_113  [key=3, color=darkorchid, style=bold, label="Local variable string xml"];
m11_114 -> m11_115  [key=0, style=solid];
m11_114 -> m11_120  [key=2, style=dotted];
m11_118 -> m11_119  [key=0, style=solid];
m11_118 -> m11_51  [key=2, style=dotted];
m11_118 -> m11_23  [key=2, style=dotted];
m11_115 -> m11_116  [key=0, style=solid];
m11_115 -> m11_121  [key=2, style=dotted];
m11_115 -> m11_117  [key=1, style=dashed, color=darkseagreen4, label=json];
m11_116 -> m11_117  [key=0, style=solid];
m11_116 -> m11_122  [key=2, style=dotted];
m11_117 -> m11_118  [key=0, style=solid];
m11_117 -> m11_110  [key=2, style=dotted];
m11_119 -> m11_112  [key=0, style=bold, color=blue];
m11_166 -> m11_167  [key=0, style=solid];
m11_167 -> m11_168  [key=0, style=solid];
m11_167 -> m11_177  [key=2, style=dotted];
m11_167 -> m11_178  [key=2, style=dotted];
m11_167 -> m11_179  [key=2, style=dotted];
m11_167 -> m11_180  [key=2, style=dotted];
m11_168 -> m11_169  [key=0, style=solid];
m11_168 -> m11_181  [key=2, style=dotted];
m11_168 -> m11_175  [key=1, style=dashed, color=darkseagreen4, label=x];
m11_169 -> m11_170  [key=0, style=solid];
m11_169 -> m11_164  [key=2, style=dotted];
m11_175 -> m11_176  [key=0, style=solid];
m11_175 -> m11_23  [key=2, style=dotted];
m11_170 -> m11_171  [key=0, style=solid];
m11_170 -> m11_97  [key=2, style=dotted];
m11_170 -> m11_48  [key=2, style=dotted];
m11_170 -> m11_165  [key=2, style=dotted];
m11_170 -> m11_173  [key=1, style=dashed, color=darkseagreen4, label=doc1];
m11_171 -> m11_172  [key=0, style=solid];
m11_171 -> m11_51  [key=2, style=dotted];
m11_173 -> m11_174  [key=0, style=solid];
m11_173 -> m11_121  [key=2, style=dotted];
m11_172 -> m11_173  [key=0, style=solid];
m11_172 -> m11_23  [key=2, style=dotted];
m11_174 -> m11_175  [key=0, style=solid];
m11_174 -> m11_110  [key=2, style=dotted];
m11_176 -> m11_166  [key=0, style=bold, color=blue];
m11_237 -> m11_238  [key=0, style=solid];
m11_238 -> m11_239  [key=0, style=solid];
m11_238 -> m11_132  [key=2, style=dotted];
m11_238 -> m11_251  [key=1, style=dashed, color=darkseagreen4, label=doc];
m11_238 -> m11_254  [key=1, style=dashed, color=darkseagreen4, label=doc];
m11_238 -> m11_257  [key=1, style=dashed, color=darkseagreen4, label=doc];
m11_238 -> m11_258  [key=1, style=dashed, color=darkseagreen4, label=doc];
m11_238 -> m11_259  [key=1, style=dashed, color=darkseagreen4, label=doc];
m11_238 -> m11_262  [key=1, style=dashed, color=darkseagreen4, label=doc];
m11_238 -> m11_267  [key=1, style=dashed, color=darkseagreen4, label=doc];
m11_239 -> m11_240  [key=0, style=solid];
m11_251 -> m11_252  [key=0, style=solid];
m11_251 -> m11_273  [key=2, style=dotted];
m11_251 -> m11_265  [key=1, style=dashed, color=darkseagreen4, label=instruction];
m11_254 -> m11_255  [key=0, style=solid];
m11_254 -> m11_274  [key=2, style=dotted];
m11_254 -> m11_266  [key=1, style=dashed, color=darkseagreen4, label=cDataSection];
m11_257 -> m11_258  [key=0, style=solid];
m11_257 -> m11_275  [key=2, style=dotted];
m11_257 -> m11_261  [key=1, style=dashed, color=darkseagreen4, label=element];
m11_257 -> m11_264  [key=1, style=dashed, color=darkseagreen4, label=element];
m11_257 -> m11_265  [key=1, style=dashed, color=darkseagreen4, label=element];
m11_257 -> m11_266  [key=1, style=dashed, color=darkseagreen4, label=element];
m11_257 -> m11_267  [key=1, style=dashed, color=darkseagreen4, label=element];
m11_257 -> m11_268  [key=1, style=dashed, color=darkseagreen4, label=element];
m11_258 -> m11_259  [key=0, style=solid];
m11_258 -> m11_276  [key=2, style=dotted];
m11_258 -> m11_277  [key=2, style=dotted];
m11_259 -> m11_260  [key=0, style=solid];
m11_259 -> m11_276  [key=2, style=dotted];
m11_259 -> m11_261  [key=1, style=dashed, color=darkseagreen4, label=aa];
m11_262 -> m11_263  [key=0, style=solid];
m11_262 -> m11_276  [key=2, style=dotted];
m11_262 -> m11_264  [key=1, style=dashed, color=darkseagreen4, label=aa];
m11_267 -> m11_268  [key=0, style=solid];
m11_267 -> m11_278  [key=2, style=dotted];
m11_240 -> m11_241  [key=0, style=solid];
m11_240 -> m11_242  [key=1, style=dashed, color=darkseagreen4, label=xml];
m11_240 -> m11_247  [key=1, style=dashed, color=darkseagreen4, label=xml];
m11_240 -> m11_240  [key=3, color=darkorchid, style=bold, label="Local variable string xml"];
m11_241 -> m11_242  [key=0, style=solid];
m11_241 -> m11_132  [key=2, style=dotted];
m11_241 -> m11_243  [key=1, style=dashed, color=darkseagreen4, label=document];
m11_242 -> m11_243  [key=0, style=solid];
m11_242 -> m11_133  [key=2, style=dotted];
m11_247 -> m11_248  [key=0, style=solid];
m11_247 -> m11_120  [key=2, style=dotted];
m11_243 -> m11_244  [key=0, style=solid];
m11_243 -> m11_245  [key=1, style=dashed, color=darkseagreen4, label=attribute];
m11_244 -> m11_245  [key=0, style=solid];
m11_245 -> m11_246  [key=0, style=solid];
m11_245 -> m11_15  [key=2, style=dotted];
m11_246 -> m11_247  [key=0, style=solid];
m11_246 -> m11_23  [key=2, style=dotted];
m11_248 -> m11_249  [key=0, style=solid];
m11_248 -> m11_271  [key=2, style=dotted];
m11_248 -> m11_272  [key=2, style=dotted];
m11_249 -> m11_250  [key=0, style=solid];
m11_249 -> m11_22  [key=2, style=dotted];
m11_250 -> m11_251  [key=0, style=solid];
m11_250 -> m11_23  [key=2, style=dotted];
m11_252 -> m11_253  [key=0, style=solid];
m11_252 -> m11_15  [key=2, style=dotted];
m11_265 -> m11_266  [key=0, style=solid];
m11_265 -> m11_278  [key=2, style=dotted];
m11_253 -> m11_254  [key=0, style=solid];
m11_253 -> m11_23  [key=2, style=dotted];
m11_255 -> m11_256  [key=0, style=solid];
m11_255 -> m11_15  [key=2, style=dotted];
m11_266 -> m11_267  [key=0, style=solid];
m11_266 -> m11_278  [key=2, style=dotted];
m11_256 -> m11_257  [key=0, style=solid];
m11_256 -> m11_23  [key=2, style=dotted];
m11_261 -> m11_262  [key=0, style=solid];
m11_261 -> m11_277  [key=2, style=dotted];
m11_264 -> m11_265  [key=0, style=solid];
m11_264 -> m11_277  [key=2, style=dotted];
m11_268 -> m11_269  [key=0, style=solid];
m11_268 -> m11_15  [key=2, style=dotted];
m11_260 -> m11_261  [key=0, style=solid];
m11_263 -> m11_264  [key=0, style=solid];
m11_263 -> m11_263  [key=3, color=green, style=bold, label="Local variable string example"];
m11_269 -> m11_270  [key=0, style=solid];
m11_269 -> m11_122  [key=2, style=dotted];
m11_270 -> m11_237  [key=0, style=bold, color=blue];
m11_371 -> m11_372  [key=0, style=solid];
m11_372 -> m11_373  [key=0, style=solid];
m11_372 -> m11_372  [key=3, color=darkorchid, style=bold, label="Local variable string jsonText"];
m11_373 -> m11_374  [key=0, style=solid];
m11_373 -> m11_24  [key=2, style=dotted];
m11_373 -> m11_375  [key=1, style=dashed, color=darkseagreen4, label=newDoc];
m11_374 -> m11_375  [key=0, style=solid];
m11_374 -> m11_374  [key=3, color=darkorchid, style=bold, label="Local variable string expected"];
m11_375 -> m11_376  [key=0, style=solid];
m11_375 -> m11_23  [key=2, style=dotted];
m11_376 -> m11_371  [key=0, style=bold, color=blue];
m11_769 -> m11_770  [key=0, style=solid];
m11_770 -> m11_771  [key=0, style=solid];
m11_770 -> m11_75  [key=2, style=dotted];
m11_770 -> m11_772  [key=1, style=dashed, color=darkseagreen4, label=d];
m11_771 -> m11_772  [key=0, style=solid];
m11_771 -> m11_23  [key=2, style=dotted];
m11_772 -> m11_773  [key=0, style=solid];
m11_772 -> m11_23  [key=2, style=dotted];
m11_773 -> m11_769  [key=0, style=bold, color=blue];
m11_425 -> m11_426  [key=0, style=solid, color=green];
m11_426 -> m11_427  [key=0, style=solid, color=green];
m11_426 -> m11_430  [key=1, style=dashed, color=green, label=json];
m11_426 -> m11_419  [key=3, color=green, style=bold, label="Local variable string json"];
m11_427 -> m11_428  [key=0, style=solid, color=green];
m11_427 -> m11_142  [key=2, style=dotted, color=green];
m11_427 -> m11_429  [key=1, style=dashed, color=green, label="lambda expression"];
m11_428 -> m11_425  [key=0, style=bold, color=blue];
m11_377 -> m11_378  [key=0, style=solid];
m11_378 -> m11_379  [key=0, style=solid];
m11_378 -> m11_142  [key=2, style=dotted];
m11_378 -> m11_380  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m11_379 -> m11_377  [key=0, style=bold, color=blue];
m11_700 -> m11_701  [key=0, style=solid];
m11_701 -> m11_702  [key=0, style=solid];
m11_701 -> m11_706  [key=1, style=dashed, color=darkseagreen4, label=xmlString];
m11_701 -> m11_701  [key=3, color=darkorchid, style=bold, label="Local variable string xmlString"];
m11_702 -> m11_703  [key=0, style=solid];
m11_702 -> m11_120  [key=2, style=dotted];
m11_706 -> m11_707  [key=0, style=solid];
m11_706 -> m11_133  [key=2, style=dotted];
m11_703 -> m11_704  [key=0, style=solid];
m11_703 -> m11_121  [key=2, style=dotted];
m11_704 -> m11_705  [key=0, style=solid];
m11_704 -> m11_23  [key=2, style=dotted];
m11_705 -> m11_706  [key=0, style=solid];
m11_705 -> m11_132  [key=2, style=dotted];
m11_705 -> m11_707  [key=1, style=dashed, color=darkseagreen4, label=xml1];
m11_707 -> m11_708  [key=0, style=solid];
m11_707 -> m11_121  [key=2, style=dotted];
m11_708 -> m11_709  [key=0, style=solid];
m11_708 -> m11_23  [key=2, style=dotted];
m11_709 -> m11_700  [key=0, style=bold, color=blue];
m11_794 -> m11_795  [key=0, style=solid];
m11_795 -> m11_796  [key=0, style=solid];
m11_795 -> m11_795  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m11_796 -> m11_797  [key=0, style=solid];
m11_796 -> m11_75  [key=2, style=dotted];
m11_796 -> m11_798  [key=1, style=dashed, color=darkseagreen4, label=dxml];
m11_797 -> m11_798  [key=0, style=solid];
m11_797 -> m11_271  [key=2, style=dotted];
m11_797 -> m11_23  [key=2, style=dotted];
m11_798 -> m11_799  [key=0, style=solid];
m11_798 -> m11_271  [key=2, style=dotted];
m11_798 -> m11_84  [key=2, style=dotted];
m11_799 -> m11_794  [key=0, style=bold, color=blue];
m11_432 -> m11_433  [key=0, style=solid];
m11_433 -> m11_434  [key=0, style=solid];
m11_433 -> m11_436  [key=1, style=dashed, color=darkseagreen4, label=json];
m11_433 -> m11_433  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m11_434 -> m11_435  [key=0, style=solid];
m11_434 -> m11_221  [key=2, style=dotted];
m11_436 -> m11_437  [key=0, style=solid];
m11_436 -> m11_75  [key=2, style=dotted];
m11_435 -> m11_436  [key=0, style=solid];
m11_435 -> m11_23  [key=2, style=dotted];
m11_437 -> m11_438  [key=0, style=solid];
m11_437 -> m11_51  [key=2, style=dotted];
m11_437 -> m11_23  [key=2, style=dotted];
m11_438 -> m11_432  [key=0, style=bold, color=blue];
m11_76 -> m11_77  [key=0, style=solid];
m11_77 -> m11_78  [key=0, style=solid];
m11_77 -> m11_82  [key=1, style=dashed, color=darkseagreen4, label=json1];
m11_77 -> m11_77  [key=3, color=darkorchid, style=bold, label="Local variable string json1"];
m11_78 -> m11_79  [key=0, style=solid];
m11_78 -> m11_75  [key=2, style=dotted];
m11_78 -> m11_80  [key=1, style=dashed, color=darkseagreen4, label=doc];
m11_78 -> m11_81  [key=1, style=dashed, color=darkseagreen4, label=doc];
m11_82 -> m11_83  [key=0, style=solid];
m11_82 -> m11_23  [key=2, style=dotted];
m11_79 -> m11_80  [key=0, style=solid];
m11_79 -> m11_51  [key=2, style=dotted];
m11_79 -> m11_84  [key=2, style=dotted];
m11_80 -> m11_81  [key=0, style=solid];
m11_80 -> m11_51  [key=2, style=dotted];
m11_80 -> m11_23  [key=2, style=dotted];
m11_81 -> m11_82  [key=0, style=solid];
m11_81 -> m11_22  [key=2, style=dotted];
m11_83 -> m11_76  [key=0, style=bold, color=blue];
m11_809 -> m11_810  [key=0, style=solid];
m11_810 -> m11_811  [key=0, style=solid];
m11_810 -> m11_810  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m11_811 -> m11_812  [key=0, style=solid];
m11_811 -> m11_75  [key=2, style=dotted];
m11_811 -> m11_813  [key=1, style=dashed, color=darkseagreen4, label=dxml];
m11_812 -> m11_813  [key=0, style=solid];
m11_812 -> m11_271  [key=2, style=dotted];
m11_812 -> m11_23  [key=2, style=dotted];
m11_813 -> m11_814  [key=0, style=solid];
m11_813 -> m11_271  [key=2, style=dotted];
m11_813 -> m11_84  [key=2, style=dotted];
m11_814 -> m11_809  [key=0, style=bold, color=blue];
m11_144 -> m11_145  [key=0, style=solid];
m11_145 -> m11_146  [key=0, style=solid];
m11_145 -> m11_135  [key=3, color=darkorchid, style=bold, label="Local variable string xml"];
m11_146 -> m11_147  [key=0, style=solid];
m11_146 -> m11_120  [key=2, style=dotted];
m11_147 -> m11_148  [key=0, style=solid];
m11_147 -> m11_151  [key=2, style=dotted];
m11_147 -> m11_143  [key=2, style=dotted];
m11_148 -> m11_149  [key=0, style=solid];
m11_148 -> m11_121  [key=2, style=dotted];
m11_149 -> m11_150  [key=0, style=solid];
m11_149 -> m11_122  [key=2, style=dotted];
m11_150 -> m11_144  [key=0, style=bold, color=blue];
m11_189 -> m11_190  [key=0, style=solid];
m11_190 -> m11_191  [key=0, style=solid];
m11_190 -> m11_132  [key=2, style=dotted];
m11_190 -> m11_192  [key=1, style=dashed, color=darkseagreen4, label=doc];
m11_191 -> m11_192  [key=0, style=solid];
m11_191 -> m11_133  [key=2, style=dotted];
m11_192 -> m11_193  [key=0, style=solid];
m11_192 -> m11_15  [key=2, style=dotted];
m11_193 -> m11_194  [key=0, style=solid];
m11_193 -> m11_23  [key=2, style=dotted];
m11_194 -> m11_195  [key=0, style=solid];
m11_194 -> m11_132  [key=2, style=dotted];
m11_194 -> m11_196  [key=1, style=dashed, color=darkseagreen4, label=doc];
m11_195 -> m11_196  [key=0, style=solid];
m11_195 -> m11_133  [key=2, style=dotted];
m11_196 -> m11_197  [key=0, style=solid];
m11_196 -> m11_15  [key=2, style=dotted];
m11_197 -> m11_198  [key=0, style=solid];
m11_197 -> m11_23  [key=2, style=dotted];
m11_198 -> m11_199  [key=0, style=solid];
m11_198 -> m11_120  [key=2, style=dotted];
m11_199 -> m11_200  [key=0, style=solid];
m11_199 -> m11_22  [key=2, style=dotted];
m11_199 -> m11_199  [key=3, color=green, style=bold, label="Local variable string json"];
m11_200 -> m11_201  [key=0, style=solid];
m11_200 -> m11_23  [key=2, style=dotted];
m11_201 -> m11_202  [key=0, style=solid];
m11_201 -> m11_120  [key=2, style=dotted];
m11_202 -> m11_203  [key=0, style=solid];
m11_202 -> m11_22  [key=2, style=dotted];
m11_203 -> m11_204  [key=0, style=solid];
m11_203 -> m11_23  [key=2, style=dotted];
m11_204 -> m11_189  [key=0, style=bold, color=blue];
m11_101 -> m11_102  [key=0, style=solid];
m11_102 -> m11_103  [key=0, style=solid];
m11_102 -> m11_108  [key=2, style=dotted];
m11_103 -> m11_104  [key=0, style=solid];
m11_103 -> m11_109  [key=2, style=dotted];
m11_103 -> m11_105  [key=1, style=dashed, color=darkseagreen4, label=json];
m11_104 -> m11_105  [key=0, style=solid];
m11_104 -> m11_23  [key=2, style=dotted];
m11_105 -> m11_106  [key=0, style=solid];
m11_105 -> m11_110  [key=2, style=dotted];
m11_106 -> m11_107  [key=0, style=solid];
m11_106 -> m11_111  [key=2, style=dotted];
m11_107 -> m11_101  [key=0, style=bold, color=blue];
m11_710 -> m11_711  [key=0, style=solid];
m11_711 -> m11_712  [key=0, style=solid];
m11_711 -> m11_718  [key=2, style=dotted];
m11_711 -> m11_120  [key=2, style=dotted];
m11_711 -> m11_714  [key=1, style=dashed, color=darkseagreen4, label=xml];
m11_711 -> m11_715  [key=1, style=dashed, color=darkseagreen4, label=xml];
m11_711 -> m11_716  [key=1, style=dashed, color=darkseagreen4, label=xml];
m11_712 -> m11_713  [key=0, style=solid];
m11_712 -> m11_109  [key=2, style=dotted];
m11_714 -> m11_715  [key=0, style=solid];
m11_714 -> m11_23  [key=2, style=dotted];
m11_715 -> m11_716  [key=0, style=solid];
m11_715 -> m11_23  [key=2, style=dotted];
m11_716 -> m11_717  [key=0, style=solid];
m11_716 -> m11_51  [key=2, style=dotted];
m11_716 -> m11_23  [key=2, style=dotted];
m11_713 -> m11_714  [key=0, style=solid];
m11_713 -> m11_110  [key=2, style=dotted];
m11_713 -> m11_715  [key=1, style=dashed, color=darkseagreen4, label=w2];
m11_713 -> m11_716  [key=1, style=dashed, color=darkseagreen4, label=w2];
m11_717 -> m11_710  [key=0, style=bold, color=blue];
m11_0 -> m11_1  [key=0, style=solid];
m11_0 -> m11_2  [key=1, style=dashed, color=darkseagreen4, label=XmlNode];
m11_0 -> m11_4  [key=1, style=dashed, color=darkseagreen4, label=XmlNode];
m11_0 -> m11_6  [key=1, style=dashed, color=darkseagreen4, label=XmlNode];
m11_0 -> m11_7  [key=1, style=dashed, color=darkseagreen4, label=XmlNode];
m11_0 -> m11_280  [key=3, color=darkorchid, style=bold, label="Parameter variable XmlNode node"];
m11_0 -> m11_513  [key=3, color=darkorchid, style=bold, label="Parameter variable XmlNode node"];
m11_1 -> m11_2  [key=0, style=solid];
m11_1 -> m11_15  [key=2, style=dotted];
m11_1 -> m11_12  [key=1, style=dashed, color=darkseagreen4, label=json];
m11_1 -> m11_13  [key=1, style=dashed, color=darkseagreen4, label=json];
m11_2 -> m11_3  [key=0, style=solid];
m11_2 -> m11_16  [key=2, style=dotted];
m11_2 -> m11_5  [key=1, style=dashed, color=darkseagreen4, label=reader];
m11_2 -> m11_9  [key=1, style=dashed, color=darkseagreen4, label=reader];
m11_2 -> m11_10  [key=1, style=dashed, color=darkseagreen4, label=reader];
m11_4 -> m11_5  [key=0, style=solid];
m11_4 -> m11_6  [key=0, style=solid];
m11_6 -> m11_7  [key=0, style=solid];
m11_6 -> m11_9  [key=0, style=solid];
m11_7 -> m11_8  [key=0, style=solid];
m11_12 -> m11_13  [key=0, style=solid];
m11_12 -> m11_23  [key=2, style=dotted];
m11_13 -> m11_14  [key=0, style=solid];
m11_3 -> m11_4  [key=0, style=solid];
m11_5 -> m11_11  [key=0, style=solid];
m11_5 -> m11_17  [key=2, style=dotted];
m11_9 -> m11_10  [key=0, style=solid];
m11_9 -> m11_20  [key=2, style=dotted];
m11_10 -> m11_11  [key=0, style=solid];
m11_10 -> m11_21  [key=2, style=dotted];
m11_8 -> m11_11  [key=0, style=solid];
m11_8 -> m11_18  [key=2, style=dotted];
m11_8 -> m11_19  [key=2, style=dotted];
m11_11 -> m11_12  [key=0, style=solid];
m11_11 -> m11_22  [key=2, style=dotted];
m11_14 -> m11_0  [key=0, style=bold, color=blue];
m11_842 -> m11_843  [key=0, style=solid];
m11_843 -> m11_844  [key=0, style=solid];
m11_843 -> m11_850  [key=2, style=dotted];
m11_843 -> m11_845  [key=1, style=dashed, color=darkseagreen4, label=original];
m11_844 -> m11_845  [key=0, style=solid];
m11_844 -> m11_51  [key=2, style=dotted];
m11_844 -> m11_23  [key=2, style=dotted];
m11_845 -> m11_846  [key=0, style=solid];
m11_845 -> m11_121  [key=2, style=dotted];
m11_845 -> m11_847  [key=1, style=dashed, color=darkseagreen4, label=json];
m11_846 -> m11_847  [key=0, style=solid];
m11_846 -> m11_23  [key=2, style=dotted];
m11_847 -> m11_848  [key=0, style=solid];
m11_847 -> m11_110  [key=2, style=dotted];
m11_848 -> m11_849  [key=0, style=solid];
m11_848 -> m11_51  [key=2, style=dotted];
m11_848 -> m11_23  [key=2, style=dotted];
m11_849 -> m11_842  [key=0, style=bold, color=blue];
m11_753 -> m11_754  [key=0, style=solid];
m11_227 -> m11_228  [key=0, style=solid];
m11_227 -> m11_221  [key=2, style=dotted];
m11_226 -> m11_227  [key=0, style=solid];
m11_228 -> m11_226  [key=0, style=bold, color=blue];
m11_380 -> m11_381  [key=0, style=solid];
m11_381 -> m11_382  [key=0, style=solid];
m11_381 -> m11_221  [key=2, style=dotted];
m11_382 -> m11_380  [key=0, style=bold, color=blue];
m11_386 -> m11_387  [key=0, style=solid];
m11_387 -> m11_388  [key=0, style=solid];
m11_387 -> m11_221  [key=2, style=dotted];
m11_388 -> m11_386  [key=0, style=bold, color=blue];
m11_423 -> m11_424  [key=0, style=solid, color=green];
m11_423 -> m11_221  [key=2, style=dotted, color=green];
m11_422 -> m11_423  [key=0, style=solid, color=green];
m11_424 -> m11_422  [key=0, style=bold, color=blue];
m11_430 -> m11_431  [key=0, style=solid, color=green];
m11_430 -> m11_75  [key=2, style=dotted, color=green];
m11_429 -> m11_430  [key=0, style=solid, color=green];
m11_431 -> m11_429  [key=0, style=bold, color=blue];
m11_554 -> m11_555  [key=0, style=solid];
m11_554 -> m11_221  [key=2, style=dotted];
m11_553 -> m11_554  [key=0, style=solid];
m11_555 -> m11_553  [key=0, style=bold, color=blue];
m11_578 -> m11_579  [key=0, style=solid];
m11_578 -> m11_24  [key=2, style=dotted];
m11_577 -> m11_578  [key=0, style=solid];
m11_579 -> m11_577  [key=0, style=bold, color=blue];
m11_754 -> m11_755  [key=0, style=solid];
m11_754 -> m11_221  [key=2, style=dotted];
m11_755 -> m11_753  [key=0, style=bold, color=blue];
m11_629 -> m11_630  [key=0, style=solid];
m11_630 -> m11_631  [key=0, style=solid];
m11_630 -> m11_637  [key=2, style=dotted];
m11_631 -> m11_632  [key=0, style=solid];
m11_631 -> m11_638  [key=2, style=dotted];
m11_631 -> m11_633  [key=1, style=dashed, color=darkseagreen4, label=obj];
m11_632 -> m11_633  [key=0, style=solid];
m11_632 -> m11_97  [key=2, style=dotted];
m11_632 -> m11_48  [key=2, style=dotted];
m11_632 -> m11_639  [key=2, style=dotted];
m11_632 -> m11_634  [key=1, style=dashed, color=darkseagreen4, label=serializer];
m11_633 -> m11_634  [key=0, style=solid];
m11_633 -> m11_640  [key=2, style=dotted];
m11_634 -> m11_635  [key=0, style=solid];
m11_634 -> m11_641  [key=2, style=dotted];
m11_635 -> m11_636  [key=0, style=solid];
m11_635 -> m11_23  [key=2, style=dotted];
m11_636 -> m11_629  [key=0, style=bold, color=blue];
m11_695 -> m11_696  [key=0, style=solid];
m11_696 -> m11_697  [key=0, style=solid];
m11_696 -> m11_696  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m11_697 -> m11_698  [key=0, style=solid];
m11_697 -> m11_221  [key=2, style=dotted];
m11_698 -> m11_699  [key=0, style=solid];
m11_698 -> m11_23  [key=2, style=dotted];
m11_699 -> m11_695  [key=0, style=bold, color=blue];
m11_507 -> m11_508  [key=0, style=solid];
m11_508 -> m11_509  [key=0, style=solid];
m11_508 -> m11_521  [key=2, style=dotted];
m11_508 -> m11_510  [key=1, style=dashed, color=darkseagreen4, label=circularDictionary];
m11_508 -> m11_511  [key=1, style=dashed, color=darkseagreen4, label=circularDictionary];
m11_509 -> m11_510  [key=0, style=solid];
m11_509 -> m11_521  [key=2, style=dotted];
m11_509 -> m11_522  [key=2, style=dotted];
m11_510 -> m11_511  [key=0, style=solid];
m11_510 -> m11_522  [key=2, style=dotted];
m11_511 -> m11_512  [key=0, style=solid];
m11_511 -> m11_97  [key=2, style=dotted];
m11_511 -> m11_523  [key=2, style=dotted];
m11_511 -> m11_513  [key=1, style=dashed, color=darkseagreen4, label=json];
m11_512 -> m11_513  [key=0, style=solid];
m11_512 -> m11_122  [key=2, style=dotted];
m11_513 -> m11_514  [key=0, style=solid];
m11_513 -> m11_27  [key=2, style=dotted];
m11_513 -> m11_517  [key=1, style=dashed, color=darkseagreen4, label=node];
m11_514 -> m11_515  [key=0, style=solid];
m11_514 -> m11_345  [key=2, style=dotted];
m11_514 -> m11_516  [key=1, style=dashed, color=darkseagreen4, label=xml];
m11_517 -> m11_518  [key=0, style=solid];
m11_517 -> m11_0  [key=2, style=dotted];
m11_517 -> m11_519  [key=1, style=dashed, color=darkseagreen4, label=xmlJson];
m11_515 -> m11_516  [key=0, style=solid];
m11_515 -> m11_515  [key=3, color=darkorchid, style=bold, label="Local variable string expected"];
m11_516 -> m11_517  [key=0, style=solid];
m11_516 -> m11_122  [key=2, style=dotted];
m11_518 -> m11_519  [key=0, style=solid];
m11_518 -> m11_518  [key=3, color=darkorchid, style=bold, label="Local variable string expectedXmlJson"];
m11_519 -> m11_520  [key=0, style=solid];
m11_519 -> m11_122  [key=2, style=dotted];
m11_520 -> m11_507  [key=0, style=bold, color=blue];
m11_821 -> m11_822  [key=0, style=solid];
m11_822 -> m11_823  [key=0, style=solid];
m11_822 -> m11_807  [key=2, style=dotted];
m11_822 -> m11_825  [key=1, style=dashed, color=darkseagreen4, label=dt];
m11_823 -> m11_824  [key=0, style=solid];
m11_823 -> m11_823  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m11_825 -> m11_826  [key=0, style=solid];
m11_825 -> m11_808  [key=2, style=dotted];
m11_825 -> m11_271  [key=2, style=dotted];
m11_825 -> m11_23  [key=2, style=dotted];
m11_824 -> m11_825  [key=0, style=solid];
m11_824 -> m11_75  [key=2, style=dotted];
m11_824 -> m11_826  [key=1, style=dashed, color=darkseagreen4, label=dxml];
m11_826 -> m11_827  [key=0, style=solid];
m11_826 -> m11_271  [key=2, style=dotted];
m11_826 -> m11_84  [key=2, style=dotted];
m11_827 -> m11_821  [key=0, style=bold, color=blue];
m11_27 -> m11_28  [key=0, style=solid];
m11_27 -> m11_29  [key=1, style=dashed, color=darkseagreen4, label=string];
m11_27 -> m11_32  [key=1, style=dashed, color=darkseagreen4, label=string];
m11_27 -> m11_33  [key=1, style=dashed, color=darkseagreen4, label=string];
m11_27 -> m11_36  [key=1, style=dashed, color=darkseagreen4, label=string];
m11_27 -> m11_24  [key=3, color=darkorchid, style=bold, label="Parameter variable string json"];
m11_27 -> m11_511  [key=3, color=darkorchid, style=bold, label="Parameter variable string json"];
m11_27 -> m11_25  [key=3, color=darkorchid, style=bold, label="Parameter variable string deserializeRootElementName"];
m11_27 -> m11_513  [key=3, color=darkorchid, style=bold, label="Parameter variable string deserializeRootElementName"];
m11_27 -> m11_34  [key=3, color=darkorchid, style=bold, label="method methodReturn XmlNode DeserializeXmlNode"];
m11_28 -> m11_29  [key=0, style=solid];
m11_29 -> m11_30  [key=0, style=solid];
m11_29 -> m11_45  [key=2, style=dotted];
m11_29 -> m11_46  [key=2, style=dotted];
m11_29 -> m11_34  [key=1, style=dashed, color=darkseagreen4, label=reader];
m11_32 -> m11_33  [key=0, style=solid];
m11_32 -> m11_34  [key=0, style=solid];
m11_33 -> m11_34  [key=0, style=solid];
m11_33 -> m11_33  [key=1, style=dashed, color=darkseagreen4, label=converter];
m11_33 -> m11_38  [key=1, style=dashed, color=darkseagreen4, label=converter];
m11_36 -> m11_37  [key=0, style=solid];
m11_36 -> m11_45  [key=2, style=dotted];
m11_36 -> m11_46  [key=2, style=dotted];
m11_36 -> m11_38  [key=1, style=dashed, color=darkseagreen4, label=reader];
m11_30 -> m11_31  [key=0, style=solid];
m11_30 -> m11_47  [key=2, style=dotted];
m11_34 -> m11_35  [key=0, style=solid];
m11_34 -> m11_49  [key=2, style=dotted];
m11_34 -> m11_50  [key=2, style=dotted];
m11_34 -> m11_43  [key=1, style=dashed, color=darkseagreen4, label=node];
m11_31 -> m11_32  [key=0, style=solid];
m11_31 -> m11_48  [key=2, style=dotted];
m11_31 -> m11_33  [key=1, style=dashed, color=darkseagreen4, label=converter];
m11_31 -> m11_34  [key=1, style=dashed, color=darkseagreen4, label=converter];
m11_31 -> m11_38  [key=1, style=dashed, color=darkseagreen4, label=converter];
m11_38 -> m11_39  [key=0, style=solid];
m11_38 -> m11_49  [key=2, style=dotted];
m11_38 -> m11_50  [key=2, style=dotted];
m11_38 -> m11_40  [key=1, style=dashed, color=darkseagreen4, label=d];
m11_38 -> m11_41  [key=1, style=dashed, color=darkseagreen4, label=d];
m11_35 -> m11_36  [key=0, style=solid];
m11_35 -> m11_42  [key=1, style=dashed, color=darkseagreen4, label=xmlText];
m11_43 -> m11_44  [key=0, style=solid];
m11_42 -> m11_43  [key=0, style=solid];
m11_42 -> m11_23  [key=2, style=dotted];
m11_37 -> m11_38  [key=0, style=solid];
m11_37 -> m11_47  [key=2, style=dotted];
m11_39 -> m11_40  [key=0, style=solid];
m11_39 -> m11_51  [key=2, style=dotted];
m11_39 -> m11_41  [key=1, style=dashed, color=darkseagreen4, label=linqXmlText];
m11_39 -> m11_42  [key=1, style=dashed, color=darkseagreen4, label=linqXmlText];
m11_40 -> m11_41  [key=0, style=solid];
m11_40 -> m11_42  [key=0, style=solid];
m11_41 -> m11_42  [key=0, style=solid];
m11_41 -> m11_41  [key=1, style=dashed, color=darkseagreen4, label=linqXmlText];
m11_44 -> m11_27  [key=0, style=bold, color=blue];
m11_749 -> m11_750  [key=0, style=solid];
m11_750 -> m11_751  [key=0, style=solid];
m11_750 -> m11_754  [key=1, style=dashed, color=darkseagreen4, label=json];
m11_750 -> m11_750  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m11_751 -> m11_752  [key=0, style=solid];
m11_751 -> m11_142  [key=2, style=dotted];
m11_751 -> m11_753  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m11_752 -> m11_749  [key=0, style=bold, color=blue];
m11_460 -> m11_461  [key=0, style=solid];
m11_461 -> m11_462  [key=0, style=solid];
m11_461 -> m11_464  [key=1, style=dashed, color=darkseagreen4, label=json];
m11_461 -> m11_461  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m11_462 -> m11_463  [key=0, style=solid];
m11_462 -> m11_221  [key=2, style=dotted];
m11_464 -> m11_465  [key=0, style=solid];
m11_464 -> m11_75  [key=2, style=dotted];
m11_463 -> m11_464  [key=0, style=solid];
m11_463 -> m11_23  [key=2, style=dotted];
m11_465 -> m11_466  [key=0, style=solid];
m11_465 -> m11_51  [key=2, style=dotted];
m11_465 -> m11_23  [key=2, style=dotted];
m11_466 -> m11_460  [key=0, style=bold, color=blue];
m11_788 -> m11_789  [key=0, style=solid];
m11_789 -> m11_790  [key=0, style=solid];
m11_789 -> m11_789  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m11_790 -> m11_791  [key=0, style=solid];
m11_790 -> m11_75  [key=2, style=dotted];
m11_790 -> m11_792  [key=1, style=dashed, color=darkseagreen4, label=dxml];
m11_791 -> m11_792  [key=0, style=solid];
m11_791 -> m11_271  [key=2, style=dotted];
m11_791 -> m11_23  [key=2, style=dotted];
m11_792 -> m11_793  [key=0, style=solid];
m11_792 -> m11_271  [key=2, style=dotted];
m11_792 -> m11_84  [key=2, style=dotted];
m11_793 -> m11_788  [key=0, style=bold, color=blue];
m11_389 -> m11_390  [key=0, style=solid];
m11_390 -> m11_391  [key=0, style=solid];
m11_390 -> m11_390  [key=3, color=darkorchid, style=bold, label="Local variable string jsonText"];
m11_391 -> m11_392  [key=0, style=solid];
m11_391 -> m11_24  [key=2, style=dotted];
m11_391 -> m11_393  [key=1, style=dashed, color=darkseagreen4, label=newDoc];
m11_391 -> m11_394  [key=1, style=dashed, color=darkseagreen4, label=newDoc];
m11_392 -> m11_393  [key=0, style=solid];
m11_392 -> m11_392  [key=3, color=darkorchid, style=bold, label="Local variable string expected"];
m11_393 -> m11_394  [key=0, style=solid];
m11_393 -> m11_23  [key=2, style=dotted];
m11_394 -> m11_395  [key=0, style=solid];
m11_394 -> m11_15  [key=2, style=dotted];
m11_394 -> m11_396  [key=1, style=dashed, color=darkseagreen4, label=json];
m11_395 -> m11_396  [key=0, style=solid];
m11_396 -> m11_397  [key=0, style=solid];
m11_396 -> m11_122  [key=2, style=dotted];
m11_397 -> m11_389  [key=0, style=bold, color=blue];
m11_735 -> m11_736  [key=0, style=solid];
m11_736 -> m11_737  [key=0, style=solid];
m11_736 -> m11_736  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m11_737 -> m11_738  [key=0, style=solid];
m11_737 -> m11_221  [key=2, style=dotted];
m11_737 -> m11_739  [key=1, style=dashed, color=darkseagreen4, label=node];
m11_738 -> m11_739  [key=0, style=solid];
m11_738 -> m11_23  [key=2, style=dotted];
m11_739 -> m11_740  [key=0, style=solid];
m11_739 -> m11_15  [key=2, style=dotted];
m11_740 -> m11_741  [key=0, style=solid];
m11_740 -> m11_23  [key=2, style=dotted];
m11_741 -> m11_735  [key=0, style=bold, color=blue];
m11_311 -> m11_314  [key=0, style=solid];
m11_311 -> m11_315  [key=1, style=dashed, color=darkseagreen4, label=bool];
m11_311 -> m11_316  [key=1, style=dashed, color=darkseagreen4, label=XDocument];
m11_311 -> m11_307  [key=3, color=darkorchid, style=bold, label="Parameter variable XDocument doc"];
m11_314 -> m11_315  [key=0, style=solid];
m11_314 -> m11_319  [key=2, style=dotted];
m11_314 -> m11_317  [key=1, style=dashed, color=darkseagreen4, label=builder];
m11_315 -> m11_316  [key=0, style=solid];
m11_315 -> m11_312  [key=2, style=dotted];
m11_315 -> m11_63  [key=2, style=dotted];
m11_315 -> m11_61  [key=2, style=dotted];
m11_316 -> m11_317  [key=0, style=solid];
m11_316 -> m11_320  [key=2, style=dotted];
m11_317 -> m11_318  [key=0, style=solid];
m11_317 -> m11_321  [key=2, style=dotted];
m11_318 -> m11_311  [key=0, style=bold, color=blue];
m11_727 -> m11_728  [key=0, style=solid];
m11_728 -> m11_729  [key=0, style=solid];
m11_728 -> m11_730  [key=1, style=dashed, color=darkseagreen4, label=xmlString];
m11_728 -> m11_720  [key=3, color=darkorchid, style=bold, label="Local variable string xmlString"];
m11_729 -> m11_730  [key=0, style=solid];
m11_729 -> m11_132  [key=2, style=dotted];
m11_729 -> m11_731  [key=1, style=dashed, color=darkseagreen4, label=xml];
m11_730 -> m11_731  [key=0, style=solid];
m11_730 -> m11_133  [key=2, style=dotted];
m11_731 -> m11_732  [key=0, style=solid];
m11_731 -> m11_15  [key=2, style=dotted];
m11_732 -> m11_733  [key=0, style=solid];
m11_732 -> m11_142  [key=2, style=dotted];
m11_733 -> m11_734  [key=0, style=solid];
m11_733 -> m11_23  [key=2, style=dotted];
m11_734 -> m11_727  [key=0, style=bold, color=blue];
m11_774 -> m11_775  [key=0, style=solid];
m11_775 -> m11_776  [key=0, style=solid];
m11_775 -> m11_768  [key=2, style=dotted];
m11_776 -> m11_777  [key=0, style=solid];
m11_776 -> m11_780  [key=2, style=dotted];
m11_776 -> m11_776  [key=1, style=dashed, color=darkseagreen4, label=d];
m11_777 -> m11_778  [key=0, style=solid];
m11_777 -> m11_22  [key=2, style=dotted];
m11_778 -> m11_779  [key=0, style=solid];
m11_778 -> m11_23  [key=2, style=dotted];
m11_779 -> m11_774  [key=0, style=bold, color=blue];
m11_500 -> m11_501  [key=0, style=solid];
m11_501 -> m11_502  [key=0, style=solid];
m11_501 -> m11_501  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m11_502 -> m11_503  [key=0, style=solid];
m11_502 -> m11_24  [key=2, style=dotted];
m11_502 -> m11_504  [key=1, style=dashed, color=darkseagreen4, label=doc];
m11_503 -> m11_504  [key=0, style=solid];
m11_503 -> m11_23  [key=2, style=dotted];
m11_504 -> m11_505  [key=0, style=solid];
m11_504 -> m11_15  [key=2, style=dotted];
m11_505 -> m11_506  [key=0, style=solid];
m11_505 -> m11_122  [key=2, style=dotted];
m11_506 -> m11_500  [key=0, style=bold, color=blue];
m11_851 -> m11_852  [key=0, style=solid];
m11_852 -> m11_853  [key=0, style=solid];
m11_852 -> m11_120  [key=2, style=dotted];
m11_852 -> m11_854  [key=1, style=dashed, color=darkseagreen4, label=original];
m11_853 -> m11_854  [key=0, style=solid];
m11_853 -> m11_51  [key=2, style=dotted];
m11_853 -> m11_23  [key=2, style=dotted];
m11_854 -> m11_855  [key=0, style=solid];
m11_854 -> m11_121  [key=2, style=dotted];
m11_854 -> m11_856  [key=1, style=dashed, color=darkseagreen4, label=json];
m11_855 -> m11_856  [key=0, style=solid];
m11_855 -> m11_23  [key=2, style=dotted];
m11_856 -> m11_857  [key=0, style=solid];
m11_856 -> m11_110  [key=2, style=dotted];
m11_857 -> m11_858  [key=0, style=solid];
m11_857 -> m11_51  [key=2, style=dotted];
m11_857 -> m11_23  [key=2, style=dotted];
m11_858 -> m11_851  [key=0, style=bold, color=blue];
m11_285 -> m11_286  [key=0, style=solid];
m11_286 -> m11_287  [key=0, style=solid];
m11_286 -> m11_132  [key=2, style=dotted];
m11_287 -> m11_288  [key=0, style=solid];
m11_287 -> m11_293  [key=2, style=dotted];
m11_288 -> m11_289  [key=0, style=solid];
m11_288 -> m11_288  [key=1, style=dashed, color=darkseagreen4, label=fragement];
m11_289 -> m11_290  [key=0, style=solid];
m11_289 -> m11_15  [key=2, style=dotted];
m11_289 -> m11_291  [key=1, style=dashed, color=darkseagreen4, label=jsonText];
m11_290 -> m11_291  [key=0, style=solid];
m11_290 -> m11_290  [key=3, color=darkorchid, style=bold, label="Local variable string expected"];
m11_291 -> m11_292  [key=0, style=solid];
m11_291 -> m11_23  [key=2, style=dotted];
m11_292 -> m11_285  [key=0, style=bold, color=blue];
m11_549 -> m11_550  [key=0, style=solid];
m11_550 -> m11_551  [key=0, style=solid];
m11_550 -> m11_554  [key=1, style=dashed, color=darkseagreen4, label=json];
m11_550 -> m11_550  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m11_551 -> m11_552  [key=0, style=solid];
m11_551 -> m11_142  [key=2, style=dotted];
m11_551 -> m11_553  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m11_552 -> m11_549  [key=0, style=bold, color=blue];
m11_52 -> m11_53  [key=0, style=solid];
m11_53 -> m11_54  [key=0, style=solid];
m11_53 -> m11_46  [key=2, style=dotted];
m11_53 -> m11_61  [key=2, style=dotted];
m11_53 -> m11_56  [key=1, style=dashed, color=darkseagreen4, label=reader];
m11_53 -> m11_57  [key=1, style=dashed, color=darkseagreen4, label=reader];
m11_54 -> m11_55  [key=0, style=solid];
m11_54 -> m11_62  [key=2, style=dotted];
m11_54 -> m11_59  [key=1, style=dashed, color=darkseagreen4, label=sw];
m11_56 -> m11_57  [key=0, style=solid];
m11_56 -> m11_58  [key=0, style=solid];
m11_56 -> m11_64  [key=2, style=dotted];
m11_57 -> m11_56  [key=0, style=solid];
m11_57 -> m11_65  [key=2, style=dotted];
m11_55 -> m11_56  [key=0, style=solid];
m11_55 -> m11_63  [key=2, style=dotted];
m11_55 -> m11_61  [key=2, style=dotted];
m11_55 -> m11_57  [key=1, style=dashed, color=darkseagreen4, label=writer];
m11_55 -> m11_58  [key=1, style=dashed, color=darkseagreen4, label=writer];
m11_59 -> m11_60  [key=0, style=solid];
m11_59 -> m11_67  [key=2, style=dotted];
m11_58 -> m11_59  [key=0, style=solid];
m11_58 -> m11_66  [key=2, style=dotted];
m11_60 -> m11_52  [key=0, style=bold, color=blue];
m11_152 -> m11_153  [key=0, style=solid];
m11_153 -> m11_154  [key=0, style=solid];
m11_153 -> m11_153  [key=3, color=darkorchid, style=bold, label="Local variable decimal d"];
m11_154 -> m11_155  [key=0, style=solid];
m11_154 -> m11_163  [key=2, style=dotted];
m11_154 -> m11_161  [key=1, style=dashed, color=darkseagreen4, label=x];
m11_155 -> m11_156  [key=0, style=solid];
m11_155 -> m11_164  [key=2, style=dotted];
m11_161 -> m11_162  [key=0, style=solid];
m11_161 -> m11_23  [key=2, style=dotted];
m11_156 -> m11_157  [key=0, style=solid];
m11_156 -> m11_97  [key=2, style=dotted];
m11_156 -> m11_48  [key=2, style=dotted];
m11_156 -> m11_165  [key=2, style=dotted];
m11_156 -> m11_159  [key=1, style=dashed, color=darkseagreen4, label=doc1];
m11_157 -> m11_158  [key=0, style=solid];
m11_157 -> m11_51  [key=2, style=dotted];
m11_159 -> m11_160  [key=0, style=solid];
m11_159 -> m11_121  [key=2, style=dotted];
m11_158 -> m11_159  [key=0, style=solid];
m11_158 -> m11_23  [key=2, style=dotted];
m11_160 -> m11_161  [key=0, style=solid];
m11_160 -> m11_110  [key=2, style=dotted];
m11_162 -> m11_152  [key=0, style=bold, color=blue];
m11_182 -> m11_183  [key=0, style=solid];
m11_183 -> m11_184  [key=0, style=solid];
m11_183 -> m11_183  [key=3, color=darkorchid, style=bold, label="Local variable string xml"];
m11_184 -> m11_185  [key=0, style=solid];
m11_184 -> m11_120  [key=2, style=dotted];
m11_184 -> m11_22  [key=2, style=dotted];
m11_184 -> m11_186  [key=1, style=dashed, color=darkseagreen4, label=json];
m11_185 -> m11_186  [key=0, style=solid];
m11_185 -> m11_23  [key=2, style=dotted];
m11_186 -> m11_187  [key=0, style=solid];
m11_186 -> m11_75  [key=2, style=dotted];
m11_187 -> m11_188  [key=0, style=solid];
m11_187 -> m11_51  [key=2, style=dotted];
m11_187 -> m11_23  [key=2, style=dotted];
m11_188 -> m11_182  [key=0, style=bold, color=blue];
m11_622 -> m11_623  [key=0, style=solid];
m11_623 -> m11_624  [key=0, style=solid];
m11_623 -> m11_625  [key=1, style=dashed, color=darkseagreen4, label=xml];
m11_623 -> m11_623  [key=3, color=darkorchid, style=bold, label="Local variable string xml"];
m11_624 -> m11_625  [key=0, style=solid];
m11_624 -> m11_132  [key=2, style=dotted];
m11_624 -> m11_626  [key=1, style=dashed, color=darkseagreen4, label=d];
m11_625 -> m11_626  [key=0, style=solid];
m11_625 -> m11_133  [key=2, style=dotted];
m11_626 -> m11_627  [key=0, style=solid];
m11_626 -> m11_15  [key=2, style=dotted];
m11_627 -> m11_628  [key=0, style=solid];
m11_627 -> m11_122  [key=2, style=dotted];
m11_628 -> m11_622  [key=0, style=bold, color=blue];
m11_756 -> m11_757  [key=0, style=solid];
m11_757 -> m11_758  [key=0, style=solid];
m11_757 -> m11_759  [key=1, style=dashed, color=darkseagreen4, label=xmlString];
m11_757 -> m11_757  [key=3, color=darkorchid, style=bold, label="Local variable string xmlString"];
m11_758 -> m11_759  [key=0, style=solid];
m11_758 -> m11_132  [key=2, style=dotted];
m11_758 -> m11_760  [key=1, style=dashed, color=darkseagreen4, label=xml];
m11_759 -> m11_760  [key=0, style=solid];
m11_759 -> m11_133  [key=2, style=dotted];
m11_760 -> m11_761  [key=0, style=solid];
m11_760 -> m11_15  [key=2, style=dotted];
m11_761 -> m11_762  [key=0, style=solid];
m11_761 -> m11_23  [key=2, style=dotted];
m11_762 -> m11_756  [key=0, style=bold, color=blue];
m11_215 -> m11_216  [key=0, style=solid];
m11_216 -> m11_217  [key=0, style=solid];
m11_216 -> m11_221  [key=2, style=dotted];
m11_216 -> m11_219  [key=1, style=dashed, color=darkseagreen4, label=doc];
m11_217 -> m11_218  [key=0, style=solid];
m11_217 -> m11_23  [key=2, style=dotted];
m11_219 -> m11_220  [key=0, style=solid];
m11_219 -> m11_51  [key=2, style=dotted];
m11_219 -> m11_23  [key=2, style=dotted];
m11_218 -> m11_219  [key=0, style=solid];
m11_218 -> m11_75  [key=2, style=dotted];
m11_220 -> m11_215  [key=0, style=bold, color=blue];
m11_606 -> m11_607  [key=0, style=solid];
m11_607 -> m11_608  [key=0, style=solid];
m11_607 -> m11_609  [key=1, style=dashed, color=darkseagreen4, label=xml];
m11_607 -> m11_607  [key=3, color=darkorchid, style=bold, label="Local variable string xml"];
m11_608 -> m11_609  [key=0, style=solid];
m11_608 -> m11_132  [key=2, style=dotted];
m11_608 -> m11_610  [key=1, style=dashed, color=darkseagreen4, label=d];
m11_609 -> m11_610  [key=0, style=solid];
m11_609 -> m11_133  [key=2, style=dotted];
m11_610 -> m11_611  [key=0, style=solid];
m11_610 -> m11_15  [key=2, style=dotted];
m11_611 -> m11_612  [key=0, style=solid];
m11_611 -> m11_122  [key=2, style=dotted];
m11_612 -> m11_606  [key=0, style=bold, color=blue];
m11_327 -> m11_328  [key=0, style=solid];
m11_328 -> m11_329  [key=0, style=solid];
m11_328 -> m11_330  [key=1, style=dashed, color=darkseagreen4, label=xml];
m11_328 -> m11_328  [key=3, color=darkorchid, style=bold, label="Local variable string xml"];
m11_329 -> m11_330  [key=0, style=solid];
m11_329 -> m11_132  [key=2, style=dotted];
m11_329 -> m11_331  [key=1, style=dashed, color=darkseagreen4, label=doc];
m11_329 -> m11_335  [key=1, style=dashed, color=darkseagreen4, label=doc];
m11_330 -> m11_331  [key=0, style=solid];
m11_330 -> m11_133  [key=2, style=dotted];
m11_331 -> m11_332  [key=0, style=solid];
m11_331 -> m11_15  [key=2, style=dotted];
m11_331 -> m11_333  [key=1, style=dashed, color=darkseagreen4, label=jsonText];
m11_331 -> m11_334  [key=1, style=dashed, color=darkseagreen4, label=jsonText];
m11_335 -> m11_336  [key=0, style=solid];
m11_335 -> m11_23  [key=2, style=dotted];
m11_332 -> m11_333  [key=0, style=solid];
m11_332 -> m11_332  [key=3, color=darkorchid, style=bold, label="Local variable string expected"];
m11_333 -> m11_334  [key=0, style=solid];
m11_333 -> m11_122  [key=2, style=dotted];
m11_334 -> m11_335  [key=0, style=solid];
m11_334 -> m11_24  [key=2, style=dotted];
m11_336 -> m11_327  [key=0, style=bold, color=blue];
m11_524 -> m11_525  [key=0, style=solid];
m11_525 -> m11_526  [key=0, style=solid];
m11_525 -> m11_530  [key=1, style=dashed, color=darkseagreen4, label=json];
m11_525 -> m11_547  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m11_526 -> m11_527  [key=0, style=solid];
m11_526 -> m11_221  [key=2, style=dotted];
m11_526 -> m11_529  [key=1, style=dashed, color=darkseagreen4, label=node];
m11_530 -> m11_531  [key=0, style=solid];
m11_530 -> m11_122  [key=2, style=dotted];
m11_527 -> m11_528  [key=0, style=solid];
m11_527 -> m11_345  [key=2, style=dotted];
m11_529 -> m11_530  [key=0, style=solid];
m11_529 -> m11_15  [key=2, style=dotted];
m11_528 -> m11_529  [key=0, style=solid];
m11_528 -> m11_122  [key=2, style=dotted];
m11_531 -> m11_524  [key=0, style=bold, color=blue];
m11_418 -> m11_419  [key=0, style=solid, color=green];
m11_419 -> m11_420  [key=0, style=solid, color=green];
m11_419 -> m11_423  [key=1, style=dashed, color=green, label=json];
m11_419 -> m11_419  [key=3, color=green, style=bold, label="Local variable string json"];
m11_420 -> m11_421  [key=0, style=solid, color=green];
m11_420 -> m11_142  [key=2, style=dotted, color=green];
m11_420 -> m11_422  [key=1, style=dashed, color=green, label="lambda expression"];
m11_421 -> m11_418  [key=0, style=bold, color=blue];
m11_222 -> m11_223  [key=0, style=solid];
m11_223 -> m11_224  [key=0, style=solid];
m11_223 -> m11_227  [key=1, style=dashed, color=darkseagreen4, label=json];
m11_223 -> m11_223  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m11_224 -> m11_225  [key=0, style=solid];
m11_224 -> m11_142  [key=2, style=dotted];
m11_224 -> m11_226  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m11_225 -> m11_222  [key=0, style=bold, color=blue];
m11_541 -> m11_542  [key=0, style=solid];
m11_542 -> m11_543  [key=0, style=solid];
m11_542 -> m11_542  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m11_543 -> m11_544  [key=0, style=solid];
m11_543 -> m11_221  [key=2, style=dotted];
m11_543 -> m11_546  [key=1, style=dashed, color=darkseagreen4, label=node];
m11_544 -> m11_545  [key=0, style=solid];
m11_544 -> m11_345  [key=2, style=dotted];
m11_546 -> m11_547  [key=0, style=solid];
m11_546 -> m11_15  [key=2, style=dotted];
m11_545 -> m11_546  [key=0, style=solid];
m11_545 -> m11_122  [key=2, style=dotted];
m11_547 -> m11_548  [key=0, style=solid];
m11_547 -> m11_122  [key=2, style=dotted];
m11_548 -> m11_541  [key=0, style=bold, color=blue];
m11_337 -> m11_338  [key=0, style=solid];
m11_338 -> m11_339  [key=0, style=solid];
m11_338 -> m11_338  [key=3, color=darkorchid, style=bold, label="Local variable string jsonText"];
m11_339 -> m11_340  [key=0, style=solid];
m11_339 -> m11_24  [key=2, style=dotted];
m11_339 -> m11_341  [key=1, style=dashed, color=darkseagreen4, label=doc];
m11_340 -> m11_341  [key=0, style=solid];
m11_340 -> m11_342  [key=1, style=dashed, color=darkseagreen4, label=expected];
m11_340 -> m11_340  [key=3, color=darkorchid, style=bold, label="Local variable string expected"];
m11_341 -> m11_342  [key=0, style=solid];
m11_341 -> m11_344  [key=2, style=dotted];
m11_342 -> m11_343  [key=0, style=solid];
m11_342 -> m11_122  [key=2, style=dotted];
m11_343 -> m11_337  [key=0, style=bold, color=blue];
m11_859 -> m11_860  [key=0, style=solid];
m11_860 -> m11_861  [key=0, style=solid];
m11_860 -> m11_768  [key=2, style=dotted];
m11_860 -> m11_850  [key=2, style=dotted];
m11_860 -> m11_862  [key=1, style=dashed, color=darkseagreen4, label=original];
m11_861 -> m11_862  [key=0, style=solid];
m11_861 -> m11_51  [key=2, style=dotted];
m11_861 -> m11_23  [key=2, style=dotted];
m11_862 -> m11_863  [key=0, style=solid];
m11_862 -> m11_121  [key=2, style=dotted];
m11_862 -> m11_864  [key=1, style=dashed, color=darkseagreen4, label=json];
m11_863 -> m11_864  [key=0, style=solid];
m11_863 -> m11_23  [key=2, style=dotted];
m11_864 -> m11_865  [key=0, style=solid];
m11_864 -> m11_110  [key=2, style=dotted];
m11_865 -> m11_866  [key=0, style=solid];
m11_865 -> m11_51  [key=2, style=dotted];
m11_865 -> m11_23  [key=2, style=dotted];
m11_866 -> m11_859  [key=0, style=bold, color=blue];
m11_888 -> m11_25  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m11_888 -> m11_233  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m11_888 -> m11_280  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m11_888 -> m11_282  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m11_888 -> m11_331  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m11_888 -> m11_334  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m11_888 -> m11_339  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m11_888 -> m11_341  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m11_888 -> m11_358  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m11_888 -> m11_359  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m11_888 -> m11_366  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m11_888 -> m11_368  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m11_888 -> m11_373  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m11_888 -> m11_391  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m11_888 -> m11_394  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m11_888 -> m11_402  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m11_888 -> m11_408  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m11_888 -> m11_414  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m11_888 -> m11_442  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m11_888 -> m11_443  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m11_888 -> m11_445  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m11_888 -> m11_454  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m11_888 -> m11_456  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m11_888 -> m11_470  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m11_888 -> m11_477  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m11_888 -> m11_480  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m11_888 -> m11_487  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m11_888 -> m11_490  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m11_888 -> m11_497  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m11_888 -> m11_502  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m11_888 -> m11_504  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m11_888 -> m11_513  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m11_888 -> m11_514  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m11_888 -> m11_517  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m11_888 -> m11_527  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m11_888 -> m11_535  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m11_888 -> m11_544  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m11_888 -> m11_559  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m11_888 -> m11_567  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m11_888 -> m11_574  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m11_888 -> m11_578  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m11_888 -> m11_588  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m11_888 -> m11_600  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m11_889 -> m11_227  [key=1, style=dashed, color=darkseagreen4, label=json];
m11_890 -> m11_423  [key=1, style=dashed, color=green, label=json];
m11_891 -> m11_430  [key=1, style=dashed, color=green, label=json];
m11_892 -> m11_554  [key=1, style=dashed, color=darkseagreen4, label=json];
m11_893 -> m11_578  [key=1, style=dashed, color=darkseagreen4, label=json];
m11_894 -> m11_754  [key=1, style=dashed, color=darkseagreen4, label=json];
}
