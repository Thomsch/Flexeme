digraph  {
n16 [label="Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter", span=""];
n0 [label="Entry Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", span="10-10", cluster="Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)"];
n1 [label=current, span="12-12", cluster="Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)"];
n5 [label="yield return v;", span="20-20", cluster="Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)"];
n8 [label="yield return v;", span="29-29", cluster="Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)"];
n3 [label="JToken v = GetTokenIndex(t, errorWhenNoMatch, Index.Value)", span="16-16", cluster="Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", color=red, community=0];
n9 [label=errorWhenNoMatch, span="34-34", cluster="Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)"];
n2 [label="Index != null", span="14-14", cluster="Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)"];
n11 [label="Exit Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", span="10-10", cluster="Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)"];
n6 [label="t is JArray || t is JConstructor", span="25-25", cluster="Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)"];
n7 [label=t, span="27-27", cluster="Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)"];
n10 [label="throw new JsonException(''Index * not valid on {0}.''.FormatWith(CultureInfo.InvariantCulture, t.GetType().Name));", span="36-36", cluster="Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)"];
n4 [label="v != null", span="18-18", cluster="Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)"];
n12 [label="Entry Newtonsoft.Json.Linq.JsonPath.PathFilter.GetTokenIndex(Newtonsoft.Json.Linq.JToken, bool, int)", span="10-10", cluster="Newtonsoft.Json.Linq.JsonPath.PathFilter.GetTokenIndex(Newtonsoft.Json.Linq.JToken, bool, int)"];
n13 [label="Entry Newtonsoft.Json.JsonException.JsonException(string)", span="54-54", cluster="Newtonsoft.Json.JsonException.JsonException(string)"];
n14 [label="Entry object.GetType()", span="0-0", cluster="object.GetType()"];
n15 [label="Entry string.FormatWith(System.IFormatProvider, object)", span="47-47", cluster="string.FormatWith(System.IFormatProvider, object)"];
d3 [label="JToken v = GetTokenIndex(t, errorWhenNoMatch, Index.Value)", span="16-16", cluster="Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", color=green, community=0];
m0_65 [label="Entry Newtonsoft.Json.Serialization.IAttributeProvider.GetAttributes(bool)", span="40-40", cluster="Newtonsoft.Json.Serialization.IAttributeProvider.GetAttributes(bool)", file="ArraySliceFilter.cs"];
m0_126 [label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CustomList<T>.CustomList()", span="222-222", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CustomList<T>.CustomList()", file="ArraySliceFilter.cs"];
m0_9 [label="Start < 0", span="31-31", cluster="Newtonsoft.Json.Linq.JsonPath.ArraySliceFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="ArraySliceFilter.cs"];
m0_58 [label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.PropertyAttributeProvider()", span="160-160", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.PropertyAttributeProvider()", file="ArraySliceFilter.cs"];
m0_59 [label="var resolver = new DefaultContractResolver()", span="162-162", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.PropertyAttributeProvider()", file="ArraySliceFilter.cs"];
m0_60 [label="var contract = (JsonObjectContract)resolver.ResolveContract(typeof(Invoice))", span="163-163", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.PropertyAttributeProvider()", file="ArraySliceFilter.cs"];
m0_61 [label="JsonProperty property = contract.Properties[''FollowUpDays'']", span="165-165", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.PropertyAttributeProvider()", file="ArraySliceFilter.cs"];
m0_62 [label="Assert.AreEqual(1, property.AttributeProvider.GetAttributes(false).Count)", span="166-166", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.PropertyAttributeProvider()", file="ArraySliceFilter.cs"];
m0_63 [label="Assert.AreEqual(typeof(DefaultValueAttribute), property.AttributeProvider.GetAttributes(false)[0].GetType())", span="167-167", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.PropertyAttributeProvider()", file="ArraySliceFilter.cs"];
m0_64 [label="Exit Newtonsoft.Json.Tests.Serialization.ContractResolverTests.PropertyAttributeProvider()", span="160-160", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.PropertyAttributeProvider()", file="ArraySliceFilter.cs"];
m0_78 [label="Entry Unk.IsFalse", span="", cluster="Unk.IsFalse", file="ArraySliceFilter.cs"];
m0_90 [label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractListTestClass()", span="196-196", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractListTestClass()", file="ArraySliceFilter.cs"];
m0_91 [label="var resolver = new DefaultContractResolver()", span="198-198", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractListTestClass()", file="ArraySliceFilter.cs"];
m0_92 [label="var contract = (JsonArrayContract)resolver.ResolveContract(typeof(AbstractListTestClass<int>))", span="199-199", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractListTestClass()", file="ArraySliceFilter.cs"];
m0_96 [label="ExceptionAssert.Throws<JsonSerializationException>(() => JsonConvert.DeserializeObject<AbstractListTestClass<int>>(@''[1,2]'', new JsonSerializerSettings\r\n            {\r\n                ContractResolver = resolver\r\n            }), ''Could not create an instance of type Newtonsoft.Json.Tests.Serialization.AbstractListTestClass`1[System.Int32]. Type is an interface or abstract class and cannot be instantiated. Path '', line 1, position 1.'')", span="205-208", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractListTestClass()", file="ArraySliceFilter.cs"];
m0_98 [label="var l = JsonConvert.DeserializeObject<AbstractListTestClass<int>>(@''[1,2]'', new JsonSerializerSettings\r\n            {\r\n                ContractResolver = resolver\r\n            })", span="212-215", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractListTestClass()", file="ArraySliceFilter.cs"];
m0_93 [label="Assert.IsFalse(contract.IsInstantiable)", span="201-201", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractListTestClass()", file="ArraySliceFilter.cs"];
m0_94 [label="Assert.IsNull(contract.DefaultCreator)", span="202-202", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractListTestClass()", file="ArraySliceFilter.cs"];
m0_95 [label="Assert.IsFalse(contract.HasParameterizedCreatorInternal)", span="203-203", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractListTestClass()", file="ArraySliceFilter.cs"];
m0_97 [label="contract.DefaultCreator = () => new AbstractImplementationListTestClass<int>()", span="210-210", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractListTestClass()", file="ArraySliceFilter.cs"];
m0_99 [label="Assert.AreEqual(2, l.Count)", span="217-217", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractListTestClass()", file="ArraySliceFilter.cs"];
m0_100 [label="Assert.AreEqual(1, l[0])", span="218-218", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractListTestClass()", file="ArraySliceFilter.cs"];
m0_101 [label="Assert.AreEqual(2, l[1])", span="219-219", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractListTestClass()", file="ArraySliceFilter.cs"];
m0_102 [label="Exit Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractListTestClass()", span="196-196", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractListTestClass()", file="ArraySliceFilter.cs"];
m0_163 [label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeWithEscapedPropertyName()", span="303-303", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeWithEscapedPropertyName()", file="ArraySliceFilter.cs"];
m0_164 [label="string json = JsonConvert.SerializeObject(\r\n                new AddressWithDataMember\r\n                {\r\n                    AddressLine1 = ''value!''\r\n                },\r\n                new JsonSerializerSettings\r\n                {\r\n                    ContractResolver = new EscapedPropertiesContractResolver\r\n                    {\r\n                        PropertySuffix = @''-'-''''-''\r\n                    }\r\n                })", span="305-316", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeWithEscapedPropertyName()", file="ArraySliceFilter.cs"];
m0_165 [label="Assert.AreEqual(@''{''''AddressLine1-'-\''''-'''':''''value!''''}'', json)", span="318-318", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeWithEscapedPropertyName()", file="ArraySliceFilter.cs"];
m0_166 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="320-320", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeWithEscapedPropertyName()", file="ArraySliceFilter.cs"];
m0_167 [label="reader.Read()", span="321-321", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeWithEscapedPropertyName()", file="ArraySliceFilter.cs"];
m0_168 [label="reader.Read()", span="322-322", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeWithEscapedPropertyName()", file="ArraySliceFilter.cs"];
m0_169 [label="Assert.AreEqual(@''AddressLine1-'-''''-'', reader.Value)", span="324-324", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeWithEscapedPropertyName()", file="ArraySliceFilter.cs"];
m0_170 [label="Exit Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeWithEscapedPropertyName()", span="303-303", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeWithEscapedPropertyName()", file="ArraySliceFilter.cs"];
m0_175 [label="Entry System.IO.StringReader.StringReader(string)", span="0-0", cluster="System.IO.StringReader.StringReader(string)", file="ArraySliceFilter.cs"];
m0_324 [label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ClassWithExtensionData.ClassWithExtensionData()", span="613-613", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ClassWithExtensionData.ClassWithExtensionData()", file="ArraySliceFilter.cs"];
m0_310 [label="Entry Newtonsoft.Json.Linq.JObject.Parse(string)", span="409-409", cluster="Newtonsoft.Json.Linq.JObject.Parse(string)", file="ArraySliceFilter.cs"];
m0_286 [label="Entry Newtonsoft.Json.Tests.Serialization.IPersonContractResolver.IPersonContractResolver()", span="95-95", cluster="Newtonsoft.Json.Tests.Serialization.IPersonContractResolver.IPersonContractResolver()", file="ArraySliceFilter.cs"];
m0_143 [label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractDictionaryTestClass()", span="276-276", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractDictionaryTestClass()", file="ArraySliceFilter.cs"];
m0_144 [label="var resolver = new DefaultContractResolver()", span="278-278", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractDictionaryTestClass()", file="ArraySliceFilter.cs"];
m0_145 [label="var contract = (JsonDictionaryContract)resolver.ResolveContract(typeof(AbstractDictionaryTestClass<string, int>))", span="279-279", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractDictionaryTestClass()", file="ArraySliceFilter.cs"];
m0_149 [label="ExceptionAssert.Throws<JsonSerializationException>(() => JsonConvert.DeserializeObject<AbstractDictionaryTestClass<string, int>>(@''{key1:1,key2:2}'', new JsonSerializerSettings\r\n            {\r\n                ContractResolver = resolver\r\n            }), ''Could not create an instance of type Newtonsoft.Json.Tests.Serialization.AbstractDictionaryTestClass`2[System.String,System.Int32]. Type is an interface or abstract class and cannot be instantiated. Path 'key1', line 1, position 6.'')", span="285-288", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractDictionaryTestClass()", file="ArraySliceFilter.cs"];
m0_151 [label="var d = JsonConvert.DeserializeObject<AbstractDictionaryTestClass<string, int>>(@''{key1:1,key2:2}'', new JsonSerializerSettings\r\n            {\r\n                ContractResolver = resolver\r\n            })", span="292-295", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractDictionaryTestClass()", file="ArraySliceFilter.cs"];
m0_146 [label="Assert.IsFalse(contract.IsInstantiable)", span="281-281", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractDictionaryTestClass()", file="ArraySliceFilter.cs"];
m0_147 [label="Assert.IsNull(contract.DefaultCreator)", span="282-282", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractDictionaryTestClass()", file="ArraySliceFilter.cs"];
m0_148 [label="Assert.IsFalse(contract.HasParameterizedCreatorInternal)", span="283-283", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractDictionaryTestClass()", file="ArraySliceFilter.cs"];
m0_150 [label="contract.DefaultCreator = () => new AbstractImplementationDictionaryTestClass<string, int>()", span="290-290", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractDictionaryTestClass()", file="ArraySliceFilter.cs"];
m0_152 [label="Assert.AreEqual(2, d.Count)", span="297-297", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractDictionaryTestClass()", file="ArraySliceFilter.cs"];
m0_153 [label="Assert.AreEqual(1, d[''key1''])", span="298-298", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractDictionaryTestClass()", file="ArraySliceFilter.cs"];
m0_154 [label="Assert.AreEqual(2, d[''key2''])", span="299-299", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractDictionaryTestClass()", file="ArraySliceFilter.cs"];
m0_155 [label="Exit Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractDictionaryTestClass()", span="276-276", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractDictionaryTestClass()", file="ArraySliceFilter.cs"];
m0_15 [label="stopIndex = Math.Max(stopIndex, -1)", span="45-45", cluster="Newtonsoft.Json.Linq.JsonPath.ArraySliceFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="ArraySliceFilter.cs"];
m0_225 [label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DeserializeDataMemberClassWithNoDataContract()", span="417-417", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DeserializeDataMemberClassWithNoDataContract()", file="ArraySliceFilter.cs"];
m0_226 [label="var resolver = new DefaultContractResolver()", span="419-419", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DeserializeDataMemberClassWithNoDataContract()", file="ArraySliceFilter.cs"];
m0_227 [label="var contract = (JsonObjectContract)resolver.ResolveContract(typeof(AddressWithDataMember))", span="420-420", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DeserializeDataMemberClassWithNoDataContract()", file="ArraySliceFilter.cs"];
m0_228 [label="Assert.AreEqual(''AddressLine1'', contract.Properties[0].PropertyName)", span="422-422", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DeserializeDataMemberClassWithNoDataContract()", file="ArraySliceFilter.cs"];
m0_229 [label="Exit Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DeserializeDataMemberClassWithNoDataContract()", span="417-417", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DeserializeDataMemberClassWithNoDataContract()", file="ArraySliceFilter.cs"];
m0_14 [label="startIndex = Math.Min(startIndex, (stepCount > 0) ? a.Count : a.Count - 1)", span="44-44", cluster="Newtonsoft.Json.Linq.JsonPath.ArraySliceFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="ArraySliceFilter.cs"];
m0_171 [label="Entry Newtonsoft.Json.Tests.Serialization.AddressWithDataMember.AddressWithDataMember()", span="108-108", cluster="Newtonsoft.Json.Tests.Serialization.AddressWithDataMember.AddressWithDataMember()", file="ArraySliceFilter.cs"];
m0_251 [label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.OverrideCreator()", span="456-456", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.OverrideCreator()", file="ArraySliceFilter.cs"];
m0_252 [label="var resolver = new DefaultContractResolver()", span="458-458", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.OverrideCreator()", file="ArraySliceFilter.cs"];
m0_253 [label="var contract = (JsonObjectContract)resolver.ResolveContract(typeof(MultipleParametrizedConstructorsJsonConstructor))", span="459-459", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.OverrideCreator()", file="ArraySliceFilter.cs"];
m0_254 [label="Assert.IsNull(contract.DefaultCreator)", span="461-461", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.OverrideCreator()", file="ArraySliceFilter.cs"];
m0_255 [label="Assert.IsNotNull(contract.OverrideCreator)", span="462-462", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.OverrideCreator()", file="ArraySliceFilter.cs"];
m0_256 [label="Assert.AreEqual(contract.OverrideConstructor, typeof(MultipleParametrizedConstructorsJsonConstructor).GetConstructor(new[] { typeof(string), typeof(int) }))", span="464-464", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.OverrideCreator()", file="ArraySliceFilter.cs"];
m0_257 [label="Assert.AreEqual(2, contract.CreatorParameters.Count)", span="466-466", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.OverrideCreator()", file="ArraySliceFilter.cs"];
m0_258 [label="Assert.AreEqual(''Value'', contract.CreatorParameters[0].PropertyName)", span="467-467", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.OverrideCreator()", file="ArraySliceFilter.cs"];
m0_259 [label="Assert.AreEqual(''Age'', contract.CreatorParameters[1].PropertyName)", span="468-468", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.OverrideCreator()", file="ArraySliceFilter.cs"];
m0_260 [label="contract.OverrideConstructor = null", span="471-471", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.OverrideCreator()", file="ArraySliceFilter.cs"];
m0_261 [label="Assert.IsNull(contract.OverrideCreator)", span="473-473", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.OverrideCreator()", file="ArraySliceFilter.cs"];
m0_262 [label="Exit Newtonsoft.Json.Tests.Serialization.ContractResolverTests.OverrideCreator()", span="456-456", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.OverrideCreator()", file="ArraySliceFilter.cs"];
m0_279 [label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeInterface()", span="504-504", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeInterface()", file="ArraySliceFilter.cs"];
m0_280 [label="Employee employee = new Employee\r\n            {\r\n                BirthDate = new DateTime(1977, 12, 30, 1, 1, 1, DateTimeKind.Utc),\r\n                FirstName = ''Maurice'',\r\n                LastName = ''Moss'',\r\n                Department = ''IT'',\r\n                JobTitle = ''Support''\r\n            }", span="506-513", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeInterface()", file="ArraySliceFilter.cs"];
m0_281 [label="string iPersonJson = JsonConvert.SerializeObject(employee, Formatting.Indented,\r\n                new JsonSerializerSettings { ContractResolver = new IPersonContractResolver() })", span="515-516", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeInterface()", file="ArraySliceFilter.cs"];
m0_282 [label="StringAssert.AreEqual(@''{\r\n  ''''FirstName'''': ''''Maurice'''',\r\n  ''''LastName'''': ''''Moss'''',\r\n  ''''BirthDate'''': ''''1977-12-30T01:01:01Z''''\r\n}'', iPersonJson)", span="518-522", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeInterface()", file="ArraySliceFilter.cs"];
m0_283 [label="Exit Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeInterface()", span="504-504", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeInterface()", file="ArraySliceFilter.cs"];
m0_0 [label="Entry Newtonsoft.Json.Tests.Serialization.DynamicContractResolver.DynamicContractResolver(char)", span="55-55", cluster="Newtonsoft.Json.Tests.Serialization.DynamicContractResolver.DynamicContractResolver(char)", file="ArraySliceFilter.cs"];
m0_24 [label="Exit Newtonsoft.Json.Tests.Serialization.IPersonContractResolver.CreateContract(System.Type)", span="97-97", cluster="Newtonsoft.Json.Tests.Serialization.IPersonContractResolver.CreateContract(System.Type)", color=green, community=0, file="ArraySliceFilter.cs"];
m0_23 [label="return base.CreateContract(objectType);", span="104-104", cluster="Newtonsoft.Json.Tests.Serialization.IPersonContractResolver.CreateContract(System.Type)", file="ArraySliceFilter.cs"];
m0_1 [label="_startingWithChar = startingWithChar", span="60-60", cluster="Newtonsoft.Json.Tests.Serialization.DynamicContractResolver.DynamicContractResolver(char)", file="ArraySliceFilter.cs"];
m0_6 [label="return properties;", span="71-71", cluster="Newtonsoft.Json.Tests.Serialization.DynamicContractResolver.CreateProperties(System.Type, Newtonsoft.Json.MemberSerialization)", file="ArraySliceFilter.cs"];
m0_7 [label="Exit Newtonsoft.Json.Tests.Serialization.DynamicContractResolver.CreateProperties(System.Type, Newtonsoft.Json.MemberSerialization)", span="63-63", cluster="Newtonsoft.Json.Tests.Serialization.DynamicContractResolver.CreateProperties(System.Type, Newtonsoft.Json.MemberSerialization)", file="ArraySliceFilter.cs"];
m0_8 [label="Entry Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperties(System.Type, Newtonsoft.Json.MemberSerialization)", span="1297-1297", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperties(System.Type, Newtonsoft.Json.MemberSerialization)", file="ArraySliceFilter.cs"];
m0_11 [label="Entry lambda expression", span="69-69", cluster="lambda expression", file="ArraySliceFilter.cs"];
m0_18 [label="Exit Newtonsoft.Json.Tests.Serialization.EscapedPropertiesContractResolver.ResolvePropertyName(string)", span="80-80", cluster="Newtonsoft.Json.Tests.Serialization.EscapedPropertiesContractResolver.ResolvePropertyName(string)", file="ArraySliceFilter.cs"];
m0_20 [label="Entry Newtonsoft.Json.Tests.Serialization.IPersonContractResolver.CreateContract(System.Type)", span="97-97", cluster="Newtonsoft.Json.Tests.Serialization.IPersonContractResolver.CreateContract(System.Type)", file="ArraySliceFilter.cs"];
m0_3 [label="Entry Newtonsoft.Json.Tests.Serialization.DynamicContractResolver.CreateProperties(System.Type, Newtonsoft.Json.MemberSerialization)", span="63-63", cluster="Newtonsoft.Json.Tests.Serialization.DynamicContractResolver.CreateProperties(System.Type, Newtonsoft.Json.MemberSerialization)", file="ArraySliceFilter.cs"];
m0_2 [label="Exit Newtonsoft.Json.Tests.Serialization.DynamicContractResolver.DynamicContractResolver(char)", span="55-55", cluster="Newtonsoft.Json.Tests.Serialization.DynamicContractResolver.DynamicContractResolver(char)", file="ArraySliceFilter.cs"];
m0_26 [label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.JsonPropertyDefaultValue()", span="120-120", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.JsonPropertyDefaultValue()", file="ArraySliceFilter.cs"];
m0_5 [label="properties =\r\n                properties.Where(p => p.PropertyName.StartsWith(_startingWithChar.ToString())).ToList()", span="68-69", cluster="Newtonsoft.Json.Tests.Serialization.DynamicContractResolver.CreateProperties(System.Type, Newtonsoft.Json.MemberSerialization)", file="ArraySliceFilter.cs"];
m0_22 [label="objectType = typeof(IPerson)", span="101-101", cluster="Newtonsoft.Json.Tests.Serialization.IPersonContractResolver.CreateContract(System.Type)", file="ArraySliceFilter.cs"];
m0_13 [label="Exit lambda expression", span="69-69", cluster="lambda expression", file="ArraySliceFilter.cs"];
m0_17 [label="return base.ResolvePropertyName(PropertyPrefix + propertyName + PropertySuffix);", span="82-82", cluster="Newtonsoft.Json.Tests.Serialization.EscapedPropertiesContractResolver.ResolvePropertyName(string)", file="ArraySliceFilter.cs"];
m0_4 [label="IList<JsonProperty> properties = base.CreateProperties(type, memberSerialization)", span="65-65", cluster="Newtonsoft.Json.Tests.Serialization.DynamicContractResolver.CreateProperties(System.Type, Newtonsoft.Json.MemberSerialization)", file="ArraySliceFilter.cs"];
m0_10 [label="Entry Unk.ToList", span="", cluster="Unk.ToList", file="ArraySliceFilter.cs"];
m0_12 [label="p.PropertyName.StartsWith(_startingWithChar.ToString())", span="69-69", cluster="lambda expression", file="ArraySliceFilter.cs"];
m0_16 [label="Entry Newtonsoft.Json.Tests.Serialization.EscapedPropertiesContractResolver.ResolvePropertyName(string)", span="80-80", cluster="Newtonsoft.Json.Tests.Serialization.EscapedPropertiesContractResolver.ResolvePropertyName(string)", file="ArraySliceFilter.cs"];
m0_19 [label="Entry Newtonsoft.Json.Serialization.DefaultContractResolver.ResolvePropertyName(string)", span="1596-1596", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.ResolvePropertyName(string)", file="ArraySliceFilter.cs"];
m0_21 [label="objectType == typeof(Employee)", span="99-99", cluster="Newtonsoft.Json.Tests.Serialization.IPersonContractResolver.CreateContract(System.Type)", file="ArraySliceFilter.cs"];
m0_25 [label="Entry Newtonsoft.Json.Serialization.DefaultContractResolver.CreateContract(System.Type)", span="1118-1118", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateContract(System.Type)", file="ArraySliceFilter.cs"];
m0_27 [label="JsonProperty p = new JsonProperty()", span="122-122", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.JsonPropertyDefaultValue()", file="ArraySliceFilter.cs"];
m0_311 [label="Entry System.Console.WriteLine(string)", span="0-0", cluster="System.Console.WriteLine(string)", file="ArraySliceFilter.cs"];
m0_30 [label="p.PropertyType = typeof(int)", span="127-127", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.JsonPropertyDefaultValue()", file="ArraySliceFilter.cs"];
m0_79 [label="Entry Unk.IsNull", span="", cluster="Unk.IsNull", file="ArraySliceFilter.cs"];
m0_287 [label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting, Newtonsoft.Json.JsonSerializerSettings)", span="621-621", cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting, Newtonsoft.Json.JsonSerializerSettings)", file="ArraySliceFilter.cs"];
m0_47 [label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterface()", span="149-149", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterface()", file="ArraySliceFilter.cs"];
m0_48 [label="var resolver = new DefaultContractResolver()", span="151-151", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterface()", file="ArraySliceFilter.cs"];
m0_49 [label="var contract = (JsonArrayContract)resolver.ResolveContract(typeof(IList<int>))", span="152-152", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterface()", file="ArraySliceFilter.cs"];
m0_50 [label="Assert.IsTrue(contract.IsInstantiable)", span="154-154", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterface()", file="ArraySliceFilter.cs"];
m0_51 [label="Assert.AreEqual(typeof(List<int>), contract.CreatedType)", span="155-155", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterface()", file="ArraySliceFilter.cs"];
m0_52 [label="Assert.IsNotNull(contract.DefaultCreator)", span="156-156", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterface()", file="ArraySliceFilter.cs"];
m0_53 [label="Exit Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterface()", span="149-149", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterface()", file="ArraySliceFilter.cs"];
m0_235 [label="Entry Unk.Any", span="", cluster="Unk.Any", file="ArraySliceFilter.cs"];
m0_56 [label="Entry Unk.IsTrue", span="", cluster="Unk.IsTrue", file="ArraySliceFilter.cs"];
m0_43 [label="Entry Newtonsoft.Json.Serialization.JsonProperty.JsonProperty()", span="38-38", cluster="Newtonsoft.Json.Serialization.JsonProperty.JsonProperty()", file="ArraySliceFilter.cs"];
m0_82 [label="Entry Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string, Newtonsoft.Json.JsonSerializerSettings)", span="817-817", cluster="Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string, Newtonsoft.Json.JsonSerializerSettings)", file="ArraySliceFilter.cs"];
m0_177 [label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeWithHtmlEscapedPropertyName()", span="328-328", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeWithHtmlEscapedPropertyName()", file="ArraySliceFilter.cs"];
m0_178 [label="string json = JsonConvert.SerializeObject(\r\n                new AddressWithDataMember\r\n                {\r\n                    AddressLine1 = ''value!''\r\n                },\r\n                new JsonSerializerSettings\r\n                {\r\n                    ContractResolver = new EscapedPropertiesContractResolver\r\n                    {\r\n                        PropertyPrefix = ''<b>'',\r\n                        PropertySuffix = ''</b>''\r\n                    },\r\n                    StringEscapeHandling = StringEscapeHandling.EscapeHtml\r\n                })", span="330-343", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeWithHtmlEscapedPropertyName()", file="ArraySliceFilter.cs"];
m0_179 [label="Assert.AreEqual(@''{''''\u003cb\u003eAddressLine1\u003c/b\u003e'''':''''value!''''}'', json)", span="345-345", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeWithHtmlEscapedPropertyName()", file="ArraySliceFilter.cs"];
m0_180 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="347-347", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeWithHtmlEscapedPropertyName()", file="ArraySliceFilter.cs"];
m0_181 [label="reader.Read()", span="348-348", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeWithHtmlEscapedPropertyName()", file="ArraySliceFilter.cs"];
m0_182 [label="reader.Read()", span="349-349", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeWithHtmlEscapedPropertyName()", file="ArraySliceFilter.cs"];
m0_183 [label="Assert.AreEqual(@''<b>AddressLine1</b>'', reader.Value)", span="351-351", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeWithHtmlEscapedPropertyName()", file="ArraySliceFilter.cs"];
m0_184 [label="Exit Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeWithHtmlEscapedPropertyName()", span="328-328", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeWithHtmlEscapedPropertyName()", file="ArraySliceFilter.cs"];
m0_31 [label="Assert.AreEqual(0, p.GetResolvedDefaultValue())", span="129-129", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.JsonPropertyDefaultValue()", file="ArraySliceFilter.cs"];
m0_36 [label="p.PropertyType = null", span="137-137", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.JsonPropertyDefaultValue()", file="ArraySliceFilter.cs"];
m0_37 [label="Assert.AreEqual(null, p.GetResolvedDefaultValue())", span="139-139", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.JsonPropertyDefaultValue()", file="ArraySliceFilter.cs"];
m0_38 [label="Assert.AreEqual(null, p.DefaultValue)", span="140-140", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.JsonPropertyDefaultValue()", file="ArraySliceFilter.cs"];
m0_39 [label="p.PropertyType = typeof(CompareOptions)", span="142-142", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.JsonPropertyDefaultValue()", file="ArraySliceFilter.cs"];
m0_44 [label="Entry Newtonsoft.Json.Serialization.JsonProperty.GetResolvedDefaultValue()", span="172-172", cluster="Newtonsoft.Json.Serialization.JsonProperty.GetResolvedDefaultValue()", file="ArraySliceFilter.cs"];
m0_28 [label="Assert.AreEqual(null, p.GetResolvedDefaultValue())", span="124-124", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.JsonPropertyDefaultValue()", file="ArraySliceFilter.cs"];
m0_29 [label="Entry System.Math.Max(int, int)", span="0-0", cluster="System.Math.Max(int, int)", file="ArraySliceFilter.cs"];
m0_32 [label="Entry int.ToString(System.IFormatProvider)", span="0-0", cluster="int.ToString(System.IFormatProvider)", file="ArraySliceFilter.cs"];
m0_33 [label="Entry string.FormatWith(System.IFormatProvider, object, object)", span="52-52", cluster="string.FormatWith(System.IFormatProvider, object, object)", file="ArraySliceFilter.cs"];
m0_34 [label="Entry object.GetType()", span="0-0", cluster="object.GetType()", file="ArraySliceFilter.cs"];
m0_35 [label="Entry string.FormatWith(System.IFormatProvider, object)", span="47-47", cluster="string.FormatWith(System.IFormatProvider, object)", file="ArraySliceFilter.cs"];
m0_40 [label="Newtonsoft.Json.Linq.JsonPath.ArraySliceFilter", span="", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.JsonPropertyDefaultValue()", file="ArraySliceFilter.cs"];
m0_41 [label="Assert.AreEqual(null, p.DefaultValue)", span="145-145", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.JsonPropertyDefaultValue()", file="ArraySliceFilter.cs"];
m0_42 [label="Exit Newtonsoft.Json.Tests.Serialization.ContractResolverTests.JsonPropertyDefaultValue()", span="120-120", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.JsonPropertyDefaultValue()", file="ArraySliceFilter.cs"];
m0_45 [label="Entry Unk.AreEqual", span="", cluster="Unk.AreEqual", file="ArraySliceFilter.cs"];
m0_328 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="ArraySliceFilter.cs"];
m0_46 [label="Entry System.DateTime.DateTime()", span="0-0", cluster="System.DateTime.DateTime()", file="ArraySliceFilter.cs"];
m0_230 [label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ResolveProperties_IgnoreStatic()", span="427-427", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ResolveProperties_IgnoreStatic()", file="ArraySliceFilter.cs"];
m0_231 [label="var resolver = new DefaultContractResolver()", span="429-429", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ResolveProperties_IgnoreStatic()", file="ArraySliceFilter.cs"];
m0_232 [label="var contract = (JsonObjectContract)resolver.ResolveContract(typeof(NumberFormatInfo))", span="430-430", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ResolveProperties_IgnoreStatic()", file="ArraySliceFilter.cs"];
m0_233 [label="Assert.IsFalse(contract.Properties.Any(c => c.PropertyName == ''InvariantInfo''))", span="432-432", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ResolveProperties_IgnoreStatic()", file="ArraySliceFilter.cs"];
m0_234 [label="Exit Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ResolveProperties_IgnoreStatic()", span="427-427", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ResolveProperties_IgnoreStatic()", file="ArraySliceFilter.cs"];
m0_142 [label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CustomDictionary<TKey, TValue>.CustomDictionary()", span="249-249", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CustomDictionary<TKey, TValue>.CustomDictionary()", file="ArraySliceFilter.cs"];
m0_127 [label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DictionaryInterfaceDefaultCreator()", span="254-254", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DictionaryInterfaceDefaultCreator()", file="ArraySliceFilter.cs"];
m0_128 [label="var resolver = new DefaultContractResolver()", span="256-256", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DictionaryInterfaceDefaultCreator()", file="ArraySliceFilter.cs"];
m0_129 [label="var contract = (JsonDictionaryContract)resolver.ResolveContract(typeof(IDictionary<string, int>))", span="257-257", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DictionaryInterfaceDefaultCreator()", file="ArraySliceFilter.cs"];
m0_133 [label="var d = JsonConvert.DeserializeObject<IDictionary<string, int>>(@''{key1:1,key2:2}'', new JsonSerializerSettings\r\n            {\r\n                ContractResolver = resolver\r\n            })", span="264-267", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DictionaryInterfaceDefaultCreator()", file="ArraySliceFilter.cs"];
m0_130 [label="Assert.IsTrue(contract.IsInstantiable)", span="259-259", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DictionaryInterfaceDefaultCreator()", file="ArraySliceFilter.cs"];
m0_131 [label="Assert.IsNotNull(contract.DefaultCreator)", span="260-260", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DictionaryInterfaceDefaultCreator()", file="ArraySliceFilter.cs"];
m0_132 [label="contract.DefaultCreator = () => new CustomDictionary<string, int>()", span="262-262", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DictionaryInterfaceDefaultCreator()", file="ArraySliceFilter.cs"];
m0_134 [label="Assert.AreEqual(typeof(CustomDictionary<string, int>), d.GetType())", span="269-269", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DictionaryInterfaceDefaultCreator()", file="ArraySliceFilter.cs"];
m0_135 [label="Assert.AreEqual(2, d.Count)", span="270-270", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DictionaryInterfaceDefaultCreator()", file="ArraySliceFilter.cs"];
m0_136 [label="Assert.AreEqual(1, d[''key1''])", span="271-271", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DictionaryInterfaceDefaultCreator()", file="ArraySliceFilter.cs"];
m0_137 [label="Assert.AreEqual(2, d[''key2''])", span="272-272", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DictionaryInterfaceDefaultCreator()", file="ArraySliceFilter.cs"];
m0_138 [label="Exit Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DictionaryInterfaceDefaultCreator()", span="254-254", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DictionaryInterfaceDefaultCreator()", file="ArraySliceFilter.cs"];
m0_174 [label="Entry Newtonsoft.Json.JsonTextReader.JsonTextReader(System.IO.TextReader)", span="78-78", cluster="Newtonsoft.Json.JsonTextReader.JsonTextReader(System.IO.TextReader)", file="ArraySliceFilter.cs"];
m0_326 [label="Entry Newtonsoft.Json.Serialization.ExtensionDataGetter.Invoke(object)", span="75-75", cluster="Newtonsoft.Json.Serialization.ExtensionDataGetter.Invoke(object)", file="ArraySliceFilter.cs"];
m0_185 [label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", span="355-355", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs"];
m0_186 [label="JsonProperty p = new JsonProperty { PropertyName = ''abc'' }", span="357-357", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs"];
m0_187 [label="Assert.IsTrue(p._skipPropertyNameEscape)", span="358-358", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs"];
m0_188 [label="p = new JsonProperty { PropertyName = ''123'' }", span="360-360", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs"];
m0_189 [label="Assert.IsTrue(p._skipPropertyNameEscape)", span="361-361", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs"];
m0_190 [label="p = new JsonProperty { PropertyName = ''._-'' }", span="363-363", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs"];
m0_191 [label="Assert.IsTrue(p._skipPropertyNameEscape)", span="364-364", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs"];
m0_192 [label="p = new JsonProperty { PropertyName = ''!@#'' }", span="366-366", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs"];
m0_193 [label="Assert.IsTrue(p._skipPropertyNameEscape)", span="367-367", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs"];
m0_194 [label="p = new JsonProperty { PropertyName = ''$%^'' }", span="369-369", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs"];
m0_195 [label="Assert.IsTrue(p._skipPropertyNameEscape)", span="370-370", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs"];
m0_196 [label="p = new JsonProperty { PropertyName = ''?*('' }", span="372-372", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs"];
m0_197 [label="Assert.IsTrue(p._skipPropertyNameEscape)", span="373-373", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs"];
m0_198 [label="p = new JsonProperty { PropertyName = '')_+'' }", span="375-375", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs"];
m0_199 [label="Assert.IsTrue(p._skipPropertyNameEscape)", span="376-376", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs"];
m0_200 [label="p = new JsonProperty { PropertyName = ''=:,'' }", span="378-378", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs"];
m0_201 [label="Assert.IsTrue(p._skipPropertyNameEscape)", span="379-379", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs"];
m0_202 [label="p = new JsonProperty { PropertyName = null }", span="381-381", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs"];
m0_203 [label="Assert.IsTrue(p._skipPropertyNameEscape)", span="382-382", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs"];
m0_204 [label="p = new JsonProperty { PropertyName = ''&'' }", span="384-384", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs"];
m0_205 [label="Assert.IsFalse(p._skipPropertyNameEscape)", span="385-385", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs"];
m0_206 [label="p = new JsonProperty { PropertyName = ''<'' }", span="387-387", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs"];
m0_207 [label="Assert.IsFalse(p._skipPropertyNameEscape)", span="388-388", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs"];
m0_208 [label="p = new JsonProperty { PropertyName = ''>'' }", span="390-390", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs"];
m0_209 [label="Assert.IsFalse(p._skipPropertyNameEscape)", span="391-391", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs"];
m0_210 [label="p = new JsonProperty { PropertyName = ''''' }", span="393-393", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs"];
m0_211 [label="Assert.IsFalse(p._skipPropertyNameEscape)", span="394-394", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs"];
m0_212 [label="p = new JsonProperty { PropertyName = @'''''''' }", span="396-396", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs"];
m0_213 [label="Assert.IsFalse(p._skipPropertyNameEscape)", span="397-397", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs"];
m0_214 [label="p = new JsonProperty { PropertyName = Environment.NewLine }", span="399-399", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs"];
m0_215 [label="Assert.IsFalse(p._skipPropertyNameEscape)", span="400-400", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs"];
m0_216 [label="p = new JsonProperty { PropertyName = ''\0'' }", span="402-402", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs"];
m0_217 [label="Assert.IsFalse(p._skipPropertyNameEscape)", span="403-403", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs"];
m0_218 [label="p = new JsonProperty { PropertyName = ''\n'' }", span="405-405", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs"];
m0_219 [label="Assert.IsFalse(p._skipPropertyNameEscape)", span="406-406", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs"];
m0_220 [label="p = new JsonProperty { PropertyName = ''\v'' }", span="408-408", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs"];
m0_221 [label="Assert.IsFalse(p._skipPropertyNameEscape)", span="409-409", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs"];
m0_222 [label="p = new JsonProperty { PropertyName = ''\u00B9'' }", span="411-411", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs"];
m0_223 [label="Assert.IsFalse(p._skipPropertyNameEscape)", span="412-412", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs"];
m0_224 [label="Exit Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", span="355-355", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs"];
m0_332 [label="Entry lambda expression", span="635-635", cluster="lambda expression", file="ArraySliceFilter.cs"];
m0_84 [label="JsonConvert.DeserializeObject<AbstractTestClass>(@''{Value:'Value!'}'', new JsonSerializerSettings\r\n            {\r\n                ContractResolver = resolver\r\n            })", span="180-183", cluster="lambda expression", file="ArraySliceFilter.cs"];
m0_83 [label="Entry lambda expression", span="180-183", cluster="lambda expression", file="ArraySliceFilter.cs"];
m0_85 [label="Exit lambda expression", span="180-183", cluster="lambda expression", file="ArraySliceFilter.cs"];
m0_86 [label="Entry lambda expression", span="185-185", cluster="lambda expression", file="ArraySliceFilter.cs"];
m0_87 [label="new AbstractImplementationTestClass()", span="185-185", cluster="lambda expression", file="ArraySliceFilter.cs"];
m0_88 [label="Exit lambda expression", span="185-185", cluster="lambda expression", file="ArraySliceFilter.cs"];
m0_104 [label="JsonConvert.DeserializeObject<AbstractListTestClass<int>>(@''[1,2]'', new JsonSerializerSettings\r\n            {\r\n                ContractResolver = resolver\r\n            })", span="205-208", cluster="lambda expression", file="ArraySliceFilter.cs"];
m0_103 [label="Entry lambda expression", span="205-208", cluster="lambda expression", file="ArraySliceFilter.cs"];
m0_105 [label="Exit lambda expression", span="205-208", cluster="lambda expression", file="ArraySliceFilter.cs"];
m0_106 [label="Entry lambda expression", span="210-210", cluster="lambda expression", file="ArraySliceFilter.cs"];
m0_107 [label="new AbstractImplementationListTestClass<int>()", span="210-210", cluster="lambda expression", file="ArraySliceFilter.cs"];
m0_108 [label="Exit lambda expression", span="210-210", cluster="lambda expression", file="ArraySliceFilter.cs"];
m0_123 [label="Entry lambda expression", span="235-235", cluster="lambda expression", file="ArraySliceFilter.cs"];
m0_124 [label="new CustomList<int>()", span="235-235", cluster="lambda expression", file="ArraySliceFilter.cs"];
m0_125 [label="Exit lambda expression", span="235-235", cluster="lambda expression", file="ArraySliceFilter.cs"];
m0_139 [label="Entry lambda expression", span="262-262", cluster="lambda expression", file="ArraySliceFilter.cs"];
m0_140 [label="new CustomDictionary<string, int>()", span="262-262", cluster="lambda expression", file="ArraySliceFilter.cs"];
m0_141 [label="Exit lambda expression", span="262-262", cluster="lambda expression", file="ArraySliceFilter.cs"];
m0_157 [label="JsonConvert.DeserializeObject<AbstractDictionaryTestClass<string, int>>(@''{key1:1,key2:2}'', new JsonSerializerSettings\r\n            {\r\n                ContractResolver = resolver\r\n            })", span="285-288", cluster="lambda expression", file="ArraySliceFilter.cs"];
m0_156 [label="Entry lambda expression", span="285-288", cluster="lambda expression", file="ArraySliceFilter.cs"];
m0_158 [label="Exit lambda expression", span="285-288", cluster="lambda expression", file="ArraySliceFilter.cs"];
m0_159 [label="Entry lambda expression", span="290-290", cluster="lambda expression", file="ArraySliceFilter.cs"];
m0_160 [label="new AbstractImplementationDictionaryTestClass<string, int>()", span="290-290", cluster="lambda expression", file="ArraySliceFilter.cs"];
m0_161 [label="Exit lambda expression", span="290-290", cluster="lambda expression", file="ArraySliceFilter.cs"];
m0_236 [label="Entry lambda expression", span="432-432", cluster="lambda expression", file="ArraySliceFilter.cs"];
m0_237 [label="c.PropertyName == ''InvariantInfo''", span="432-432", cluster="lambda expression", file="ArraySliceFilter.cs"];
m0_238 [label="Exit lambda expression", span="432-432", cluster="lambda expression", file="ArraySliceFilter.cs"];
m0_276 [label="return new MultipleParametrizedConstructorsJsonConstructor((string)args[0], (int)args[1]);", span="487-487", cluster="lambda expression", file="ArraySliceFilter.cs"];
m0_274 [label="Entry lambda expression", span="484-488", cluster="lambda expression", file="ArraySliceFilter.cs"];
m0_275 [label="ensureCustomCreatorCalled = true", span="486-486", cluster="lambda expression", file="ArraySliceFilter.cs"];
m0_277 [label="Exit lambda expression", span="484-488", cluster="lambda expression", file="ArraySliceFilter.cs"];
m0_329 [label="Entry lambda expression", span="635-635", cluster="lambda expression", file="ArraySliceFilter.cs"];
m0_330 [label="kv.Key", span="635-635", cluster="lambda expression", file="ArraySliceFilter.cs"];
m0_331 [label="Exit lambda expression", span="635-635", cluster="lambda expression", file="ArraySliceFilter.cs"];
m0_333 [label="kv.Value", span="635-635", cluster="lambda expression", file="ArraySliceFilter.cs"];
m0_334 [label="Exit lambda expression", span="635-635", cluster="lambda expression", file="ArraySliceFilter.cs"];
m0_110 [label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterfaceDefaultCreator()", span="227-227", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterfaceDefaultCreator()", file="ArraySliceFilter.cs"];
m0_111 [label="var resolver = new DefaultContractResolver()", span="229-229", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterfaceDefaultCreator()", file="ArraySliceFilter.cs"];
m0_112 [label="var contract = (JsonArrayContract)resolver.ResolveContract(typeof(IList<int>))", span="230-230", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterfaceDefaultCreator()", file="ArraySliceFilter.cs"];
m0_116 [label="var l = JsonConvert.DeserializeObject<IList<int>>(@''[1,2,3]'', new JsonSerializerSettings\r\n            {\r\n                ContractResolver = resolver\r\n            })", span="237-240", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterfaceDefaultCreator()", file="ArraySliceFilter.cs"];
m0_113 [label="Assert.IsTrue(contract.IsInstantiable)", span="232-232", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterfaceDefaultCreator()", file="ArraySliceFilter.cs"];
m0_114 [label="Assert.IsNotNull(contract.DefaultCreator)", span="233-233", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterfaceDefaultCreator()", file="ArraySliceFilter.cs"];
m0_115 [label="contract.DefaultCreator = () => new CustomList<int>()", span="235-235", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterfaceDefaultCreator()", file="ArraySliceFilter.cs"];
m0_117 [label="Assert.AreEqual(typeof(CustomList<int>), l.GetType())", span="242-242", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterfaceDefaultCreator()", file="ArraySliceFilter.cs"];
m0_118 [label="Assert.AreEqual(3, l.Count)", span="243-243", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterfaceDefaultCreator()", file="ArraySliceFilter.cs"];
m0_119 [label="Assert.AreEqual(1, l[0])", span="244-244", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterfaceDefaultCreator()", file="ArraySliceFilter.cs"];
m0_120 [label="Assert.AreEqual(2, l[1])", span="245-245", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterfaceDefaultCreator()", file="ArraySliceFilter.cs"];
m0_121 [label="Assert.AreEqual(3, l[2])", span="246-246", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterfaceDefaultCreator()", file="ArraySliceFilter.cs"];
m0_122 [label="Exit Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterfaceDefaultCreator()", span="227-227", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterfaceDefaultCreator()", file="ArraySliceFilter.cs"];
m0_67 [label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractTestClass()", span="171-171", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractTestClass()", file="ArraySliceFilter.cs"];
m0_68 [label="var resolver = new DefaultContractResolver()", span="173-173", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractTestClass()", file="ArraySliceFilter.cs"];
m0_69 [label="var contract = (JsonObjectContract)resolver.ResolveContract(typeof(AbstractTestClass))", span="174-174", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractTestClass()", file="ArraySliceFilter.cs"];
m0_73 [label="ExceptionAssert.Throws<JsonSerializationException>(() => JsonConvert.DeserializeObject<AbstractTestClass>(@''{Value:'Value!'}'', new JsonSerializerSettings\r\n            {\r\n                ContractResolver = resolver\r\n            }), ''Could not create an instance of type Newtonsoft.Json.Tests.Serialization.AbstractTestClass. Type is an interface or abstract class and cannot be instantiated. Path 'Value', line 1, position 7.'')", span="180-183", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractTestClass()", file="ArraySliceFilter.cs"];
m0_75 [label="var o = JsonConvert.DeserializeObject<AbstractTestClass>(@''{Value:'Value!'}'', new JsonSerializerSettings\r\n            {\r\n                ContractResolver = resolver\r\n            })", span="187-190", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractTestClass()", file="ArraySliceFilter.cs"];
m0_70 [label="Assert.IsFalse(contract.IsInstantiable)", span="176-176", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractTestClass()", file="ArraySliceFilter.cs"];
m0_71 [label="Assert.IsNull(contract.DefaultCreator)", span="177-177", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractTestClass()", file="ArraySliceFilter.cs"];
m0_72 [label="Assert.IsNull(contract.OverrideCreator)", span="178-178", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractTestClass()", file="ArraySliceFilter.cs"];
m0_74 [label="contract.DefaultCreator = () => new AbstractImplementationTestClass()", span="185-185", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractTestClass()", file="ArraySliceFilter.cs"];
m0_76 [label="Assert.AreEqual(''Value!'', o.Value)", span="192-192", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractTestClass()", file="ArraySliceFilter.cs"];
m0_77 [label="Exit Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractTestClass()", span="171-171", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractTestClass()", file="ArraySliceFilter.cs"];
m0_176 [label="Entry Newtonsoft.Json.JsonTextReader.Read()", span="366-366", cluster="Newtonsoft.Json.JsonTextReader.Read()", file="ArraySliceFilter.cs"];
m0_250 [label="Entry System.Type.GetConstructor(System.Type[])", span="0-0", cluster="System.Type.GetConstructor(System.Type[])", file="ArraySliceFilter.cs"];
m0_325 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="ArraySliceFilter.cs"];
m0_54 [label="Entry Newtonsoft.Json.Serialization.DefaultContractResolver.DefaultContractResolver()", span="195-195", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.DefaultContractResolver()", file="ArraySliceFilter.cs"];
m0_80 [label="Entry Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", span="350-350", cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", file="ArraySliceFilter.cs"];
m0_289 [label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SingleTypeWithMultipleContractResolvers()", span="526-526", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SingleTypeWithMultipleContractResolvers()", file="ArraySliceFilter.cs"];
m0_290 [label="Book book = new Book\r\n            {\r\n                BookName = ''The Gathering Storm'',\r\n                BookPrice = 16.19m,\r\n                AuthorName = ''Brandon Sanderson'',\r\n                AuthorAge = 34,\r\n                AuthorCountry = ''United States of America''\r\n            }", span="528-535", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SingleTypeWithMultipleContractResolvers()", file="ArraySliceFilter.cs"];
m0_291 [label="string startingWithA = JsonConvert.SerializeObject(book, Formatting.Indented,\r\n                new JsonSerializerSettings { ContractResolver = new DynamicContractResolver('A') })", span="537-538", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SingleTypeWithMultipleContractResolvers()", file="ArraySliceFilter.cs"];
m0_292 [label="string startingWithB = JsonConvert.SerializeObject(book, Formatting.Indented,\r\n                new JsonSerializerSettings { ContractResolver = new DynamicContractResolver('B') })", span="546-547", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SingleTypeWithMultipleContractResolvers()", file="ArraySliceFilter.cs"];
m0_293 [label="StringAssert.AreEqual(@''{\r\n  ''''AuthorName'''': ''''Brandon Sanderson'''',\r\n  ''''AuthorAge'''': 34,\r\n  ''''AuthorCountry'''': ''''United States of America''''\r\n}'', startingWithA)", span="554-558", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SingleTypeWithMultipleContractResolvers()", file="ArraySliceFilter.cs"];
m0_294 [label="StringAssert.AreEqual(@''{\r\n  ''''BookName'''': ''''The Gathering Storm'''',\r\n  ''''BookPrice'''': 16.19\r\n}'', startingWithB)", span="560-563", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SingleTypeWithMultipleContractResolvers()", file="ArraySliceFilter.cs"];
m0_295 [label="Exit Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SingleTypeWithMultipleContractResolvers()", span="526-526", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SingleTypeWithMultipleContractResolvers()", file="ArraySliceFilter.cs"];
m0_172 [label="Entry Newtonsoft.Json.Tests.Serialization.EscapedPropertiesContractResolver.EscapedPropertiesContractResolver()", span="75-75", cluster="Newtonsoft.Json.Tests.Serialization.EscapedPropertiesContractResolver.EscapedPropertiesContractResolver()", file="ArraySliceFilter.cs"];
m0_173 [label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.JsonSerializerSettings)", span="585-585", cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.JsonSerializerSettings)", file="ArraySliceFilter.cs"];
m0_309 [label="Entry Newtonsoft.Json.Tests.TestObjects.StructTest.StructTest()", span="27-27", cluster="Newtonsoft.Json.Tests.TestObjects.StructTest.StructTest()", file="ArraySliceFilter.cs"];
m0_162 [label="Entry Newtonsoft.Json.Tests.Serialization.AbstractImplementationDictionaryTestClass<TKey, TValue>.AbstractImplementationDictionaryTestClass()", span="9826-9826", cluster="Newtonsoft.Json.Tests.Serialization.AbstractImplementationDictionaryTestClass<TKey, TValue>.AbstractImplementationDictionaryTestClass()", file="ArraySliceFilter.cs"];
m0_278 [label="Entry Newtonsoft.Json.Tests.Serialization.MultipleParametrizedConstructorsJsonConstructor.MultipleParametrizedConstructorsJsonConstructor(string, int)", span="9861-9861", cluster="Newtonsoft.Json.Tests.Serialization.MultipleParametrizedConstructorsJsonConstructor.MultipleParametrizedConstructorsJsonConstructor(string, int)", file="ArraySliceFilter.cs"];
m0_66 [label="Entry object.GetType()", span="0-0", cluster="object.GetType()", file="ArraySliceFilter.cs"];
m0_297 [label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeCompilerGeneratedMembers()", span="569-569", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeCompilerGeneratedMembers()", file="ArraySliceFilter.cs"];
m0_298 [label="StructTest structTest = new StructTest\r\n            {\r\n                IntField = 1,\r\n                IntProperty = 2,\r\n                StringField = ''Field'',\r\n                StringProperty = ''Property''\r\n            }", span="571-577", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeCompilerGeneratedMembers()", file="ArraySliceFilter.cs"];
m0_299 [label="DefaultContractResolver skipCompilerGeneratedResolver = new DefaultContractResolver\r\n            {\r\n                DefaultMembersSearchFlags = BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public\r\n            }", span="579-582", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeCompilerGeneratedMembers()", file="ArraySliceFilter.cs"];
m0_300 [label="string skipCompilerGeneratedJson = JsonConvert.SerializeObject(structTest, Formatting.Indented,\r\n                new JsonSerializerSettings { ContractResolver = skipCompilerGeneratedResolver })", span="584-585", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeCompilerGeneratedMembers()", file="ArraySliceFilter.cs"];
m0_303 [label="string includeCompilerGeneratedJson = JsonConvert.SerializeObject(structTest, Formatting.Indented,\r\n                new JsonSerializerSettings { ContractResolver = includeCompilerGeneratedResolver })", span="600-601", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeCompilerGeneratedMembers()", file="ArraySliceFilter.cs"];
m0_301 [label="StringAssert.AreEqual(@''{\r\n  ''''StringField'''': ''''Field'''',\r\n  ''''IntField'''': 1,\r\n  ''''StringProperty'''': ''''Property'''',\r\n  ''''IntProperty'''': 2\r\n}'', skipCompilerGeneratedJson)", span="587-592", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeCompilerGeneratedMembers()", file="ArraySliceFilter.cs"];
m0_302 [label="DefaultContractResolver includeCompilerGeneratedResolver = new DefaultContractResolver\r\n            {\r\n                DefaultMembersSearchFlags = BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public,\r\n                SerializeCompilerGeneratedMembers = true\r\n            }", span="594-598", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeCompilerGeneratedMembers()", file="ArraySliceFilter.cs"];
m0_304 [label="JObject o = JObject.Parse(includeCompilerGeneratedJson)", span="603-603", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeCompilerGeneratedMembers()", file="ArraySliceFilter.cs"];
m0_305 [label="Console.WriteLine(includeCompilerGeneratedJson)", span="605-605", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeCompilerGeneratedMembers()", file="ArraySliceFilter.cs"];
m0_306 [label="Assert.AreEqual(''Property'', (string)o[''<StringProperty>k__BackingField''])", span="607-607", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeCompilerGeneratedMembers()", file="ArraySliceFilter.cs"];
m0_307 [label="Assert.AreEqual(2, (int)o[''<IntProperty>k__BackingField''])", span="608-608", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeCompilerGeneratedMembers()", file="ArraySliceFilter.cs"];
m0_308 [label="Exit Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeCompilerGeneratedMembers()", span="569-569", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeCompilerGeneratedMembers()", file="ArraySliceFilter.cs"];
m0_89 [label="Entry Newtonsoft.Json.Tests.Serialization.AbstractImplementationTestClass.AbstractImplementationTestClass()", span="9810-9810", cluster="Newtonsoft.Json.Tests.Serialization.AbstractImplementationTestClass.AbstractImplementationTestClass()", file="ArraySliceFilter.cs"];
m0_285 [label="Entry System.DateTime.DateTime(int, int, int, int, int, int, System.DateTimeKind)", span="0-0", cluster="System.DateTime.DateTime(int, int, int, int, int, int, System.DateTimeKind)", file="ArraySliceFilter.cs"];
m0_239 [label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ParameterizedCreator()", span="436-436", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ParameterizedCreator()", file="ArraySliceFilter.cs"];
m0_240 [label="var resolver = new DefaultContractResolver()", span="438-438", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ParameterizedCreator()", file="ArraySliceFilter.cs"];
m0_241 [label="var contract = (JsonObjectContract)resolver.ResolveContract(typeof(PublicParameterizedConstructorWithPropertyNameConflictWithAttribute))", span="439-439", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ParameterizedCreator()", file="ArraySliceFilter.cs"];
m0_242 [label="Assert.IsNull(contract.DefaultCreator)", span="441-441", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ParameterizedCreator()", file="ArraySliceFilter.cs"];
m0_243 [label="Assert.IsNotNull(contract.ParameterizedCreator)", span="442-442", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ParameterizedCreator()", file="ArraySliceFilter.cs"];
m0_244 [label="Assert.AreEqual(contract.ParametrizedConstructor, typeof(PublicParameterizedConstructorWithPropertyNameConflictWithAttribute).GetConstructor(new[] { typeof(string) }))", span="444-444", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ParameterizedCreator()", file="ArraySliceFilter.cs"];
m0_245 [label="Assert.AreEqual(1, contract.CreatorParameters.Count)", span="446-446", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ParameterizedCreator()", file="ArraySliceFilter.cs"];
m0_246 [label="Assert.AreEqual(''name'', contract.CreatorParameters[0].PropertyName)", span="447-447", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ParameterizedCreator()", file="ArraySliceFilter.cs"];
m0_247 [label="contract.ParametrizedConstructor = null", span="450-450", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ParameterizedCreator()", file="ArraySliceFilter.cs"];
m0_248 [label="Assert.IsNull(contract.ParameterizedCreator)", span="452-452", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ParameterizedCreator()", file="ArraySliceFilter.cs"];
m0_249 [label="Exit Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ParameterizedCreator()", span="436-436", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ParameterizedCreator()", file="ArraySliceFilter.cs"];
m0_55 [label="Entry Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContract(System.Type)", span="239-239", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContract(System.Type)", file="ArraySliceFilter.cs"];
m0_284 [label="Entry Newtonsoft.Json.Tests.TestObjects.Employee.Employee()", span="63-63", cluster="Newtonsoft.Json.Tests.TestObjects.Employee.Employee()", file="ArraySliceFilter.cs"];
m0_263 [label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CustomOverrideCreator()", span="477-477", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CustomOverrideCreator()", file="ArraySliceFilter.cs"];
m0_264 [label="var resolver = new DefaultContractResolver()", span="479-479", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CustomOverrideCreator()", file="ArraySliceFilter.cs"];
m0_265 [label="var contract = (JsonObjectContract)resolver.ResolveContract(typeof(MultipleParametrizedConstructorsJsonConstructor))", span="480-480", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CustomOverrideCreator()", file="ArraySliceFilter.cs"];
m0_269 [label="var o = JsonConvert.DeserializeObject<MultipleParametrizedConstructorsJsonConstructor>(''{Value:'value!', Age:1}'', new JsonSerializerSettings\r\n            {\r\n                ContractResolver = resolver\r\n            })", span="493-496", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CustomOverrideCreator()", file="ArraySliceFilter.cs"];
m0_266 [label="bool ensureCustomCreatorCalled = false", span="482-482", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CustomOverrideCreator()", file="ArraySliceFilter.cs"];
m0_267 [label="contract.OverrideCreator = args =>\r\n            {\r\n                ensureCustomCreatorCalled = true;\r\n                return new MultipleParametrizedConstructorsJsonConstructor((string)args[0], (int)args[1]);\r\n            }", span="484-488", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CustomOverrideCreator()", file="ArraySliceFilter.cs"];
m0_268 [label="Assert.IsNull(contract.OverrideConstructor)", span="490-490", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CustomOverrideCreator()", file="ArraySliceFilter.cs"];
m0_270 [label="Assert.AreEqual(''value!'', o.Value)", span="498-498", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CustomOverrideCreator()", file="ArraySliceFilter.cs"];
m0_271 [label="Assert.AreEqual(1, o.Age)", span="499-499", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CustomOverrideCreator()", file="ArraySliceFilter.cs"];
m0_272 [label="Assert.IsTrue(ensureCustomCreatorCalled)", span="500-500", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CustomOverrideCreator()", file="ArraySliceFilter.cs"];
m0_273 [label="Exit Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CustomOverrideCreator()", span="477-477", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CustomOverrideCreator()", file="ArraySliceFilter.cs"];
m0_288 [label="Entry Newtonsoft.Json.Tests.StringAssert.AreEqual(string, string)", span="321-321", cluster="Newtonsoft.Json.Tests.StringAssert.AreEqual(string, string)", file="ArraySliceFilter.cs"];
m0_109 [label="Entry Newtonsoft.Json.Tests.Serialization.AbstractImplementationListTestClass<T>.AbstractImplementationListTestClass()", span="9818-9818", cluster="Newtonsoft.Json.Tests.Serialization.AbstractImplementationListTestClass<T>.AbstractImplementationListTestClass()", file="ArraySliceFilter.cs"];
m0_312 [label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ExtensionDataGetterCanBeIteratedMultipleTimes()", span="620-620", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ExtensionDataGetterCanBeIteratedMultipleTimes()", file="ArraySliceFilter.cs"];
m0_313 [label="DefaultContractResolver resolver = new DefaultContractResolver()", span="622-622", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ExtensionDataGetterCanBeIteratedMultipleTimes()", file="ArraySliceFilter.cs"];
m0_314 [label="JsonObjectContract contract = (JsonObjectContract)resolver.ResolveContract(typeof(ClassWithExtensionData))", span="623-623", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ExtensionDataGetterCanBeIteratedMultipleTimes()", file="ArraySliceFilter.cs"];
m0_315 [label="ClassWithExtensionData myClass = new ClassWithExtensionData\r\n            {\r\n                Data = new Dictionary<string, object>\r\n                {\r\n                    { ''SomeField'', ''Field'' },\r\n                }\r\n            }", span="625-631", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ExtensionDataGetterCanBeIteratedMultipleTimes()", file="ArraySliceFilter.cs"];
m0_316 [label="ExtensionDataGetter getter = contract.ExtensionDataGetter", span="633-633", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ExtensionDataGetterCanBeIteratedMultipleTimes()", file="ArraySliceFilter.cs"];
m0_317 [label="IEnumerable<KeyValuePair<object, object>> dictionaryData = getter(myClass).ToDictionary(kv => kv.Key, kv => kv.Value)", span="635-635", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ExtensionDataGetterCanBeIteratedMultipleTimes()", file="ArraySliceFilter.cs"];
m0_320 [label="IEnumerable<KeyValuePair<object, object>> extensionData = getter(myClass)", span="639-639", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ExtensionDataGetterCanBeIteratedMultipleTimes()", file="ArraySliceFilter.cs"];
m0_318 [label="Assert.IsTrue(dictionaryData.Any())", span="636-636", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ExtensionDataGetterCanBeIteratedMultipleTimes()", file="ArraySliceFilter.cs"];
m0_319 [label="Assert.IsTrue(dictionaryData.Any())", span="637-637", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ExtensionDataGetterCanBeIteratedMultipleTimes()", file="ArraySliceFilter.cs"];
m0_321 [label="Assert.IsTrue(extensionData.Any())", span="640-640", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ExtensionDataGetterCanBeIteratedMultipleTimes()", file="ArraySliceFilter.cs"];
m0_322 [label="Assert.IsTrue(extensionData.Any())", span="641-641", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ExtensionDataGetterCanBeIteratedMultipleTimes()", file="ArraySliceFilter.cs"];
m0_323 [label="Exit Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ExtensionDataGetterCanBeIteratedMultipleTimes()", span="620-620", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ExtensionDataGetterCanBeIteratedMultipleTimes()", file="ArraySliceFilter.cs"];
m0_327 [label="Entry Unk.ToDictionary", span="", cluster="Unk.ToDictionary", file="ArraySliceFilter.cs"];
m0_296 [label="Entry Newtonsoft.Json.Tests.Serialization.Book.Book()", span="86-86", cluster="Newtonsoft.Json.Tests.Serialization.Book.Book()", file="ArraySliceFilter.cs"];
m0_57 [label="Entry Unk.IsNotNull", span="", cluster="Unk.IsNotNull", file="ArraySliceFilter.cs"];
m0_81 [label="Entry Newtonsoft.Json.JsonSerializerSettings.JsonSerializerSettings()", span="433-433", cluster="Newtonsoft.Json.JsonSerializerSettings.JsonSerializerSettings()", file="ArraySliceFilter.cs"];
m0_335 [label="Newtonsoft.Json.Tests.Serialization.DynamicContractResolver", span="", file="ArraySliceFilter.cs"];
m0_336 [label="Newtonsoft.Json.Tests.Serialization.EscapedPropertiesContractResolver", span="", file="ArraySliceFilter.cs"];
m0_337 [label="Newtonsoft.Json.Tests.Serialization.IPersonContractResolver", span="", file="ArraySliceFilter.cs"];
m0_338 [label=resolver, span="", file="ArraySliceFilter.cs"];
m0_339 [label=resolver, span="", file="ArraySliceFilter.cs"];
m0_340 [label=resolver, span="", file="ArraySliceFilter.cs"];
m1_273 [label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.AddArrayToSelf()", span="450-450", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddArrayToSelf()", file="BinaryConverter.cs"];
m1_274 [label="JArray a = new JArray(1, 2)", span="452-452", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddArrayToSelf()", file="BinaryConverter.cs"];
m1_275 [label="a.Add(a)", span="453-453", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddArrayToSelf()", file="BinaryConverter.cs"];
m1_276 [label="Assert.AreEqual(3, a.Count)", span="455-455", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddArrayToSelf()", file="BinaryConverter.cs"];
m1_277 [label="Assert.AreEqual(1, (int)a[0])", span="456-456", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddArrayToSelf()", file="BinaryConverter.cs"];
m1_278 [label="Assert.AreEqual(2, (int)a[1])", span="457-457", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddArrayToSelf()", file="BinaryConverter.cs"];
m1_279 [label="Assert.AreNotSame(a, a[2])", span="458-458", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddArrayToSelf()", file="BinaryConverter.cs"];
m1_280 [label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.AddArrayToSelf()", span="450-450", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddArrayToSelf()", file="BinaryConverter.cs"];
m1_207 [label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.InsertOutOfRangeIndexShouldThrow()", span="327-327", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertOutOfRangeIndexShouldThrow()", file="BinaryConverter.cs"];
m1_208 [label="JArray j = new JArray()", span="329-329", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertOutOfRangeIndexShouldThrow()", file="BinaryConverter.cs"];
m1_209 [label="ExceptionAssert.Throws<ArgumentOutOfRangeException>(() => { j.Insert(2, new JValue(1)); }, @''Index must be within the bounds of the List.\r\nParameter name: index'')", span="331-332", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertOutOfRangeIndexShouldThrow()", file="BinaryConverter.cs"];
m1_210 [label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.InsertOutOfRangeIndexShouldThrow()", span="327-327", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertOutOfRangeIndexShouldThrow()", file="BinaryConverter.cs"];
m1_357 [label="Entry Newtonsoft.Json.IJsonLineInfo.HasLineInfo()", span="38-38", cluster="Newtonsoft.Json.IJsonLineInfo.HasLineInfo()", file="BinaryConverter.cs"];
m1_16 [label="Exit Newtonsoft.Json.Converters.BinaryConverter.GetByteArray(object)", span="64-64", cluster="Newtonsoft.Json.Converters.BinaryConverter.GetByteArray(object)", file="BinaryConverter.cs"];
m1_17 [label="JArray a = new JArray { 1 }", span="71-71", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Clear()", file="BinaryConverter.cs"];
m1_18 [label="Entry System.Type.AssignableToTypeName(string)", span="548-548", cluster="System.Type.AssignableToTypeName(string)", file="BinaryConverter.cs"];
m1_19 [label="Entry Newtonsoft.Json.Converters.BinaryConverter.EnsureReflectionObject(System.Type)", span="82-82", cluster="Newtonsoft.Json.Converters.BinaryConverter.EnsureReflectionObject(System.Type)", file="BinaryConverter.cs"];
m1_20 [label="Entry Newtonsoft.Json.Utilities.ReflectionObject.GetValue(object, string)", span="57-57", cluster="Newtonsoft.Json.Utilities.ReflectionObject.GetValue(object, string)", file="BinaryConverter.cs"];
m1_21 [label="Entry Newtonsoft.Json.JsonSerializationException.JsonSerializationException(string)", span="52-52", cluster="Newtonsoft.Json.JsonSerializationException.JsonSerializationException(string)", file="BinaryConverter.cs"];
m1_167 [label="Entry Newtonsoft.Json.Linq.JArray.Insert(int, Newtonsoft.Json.Linq.JToken)", span="311-311", cluster="Newtonsoft.Json.Linq.JArray.Insert(int, Newtonsoft.Json.Linq.JToken)", file="BinaryConverter.cs"];
m1_51 [label="Assert.AreEqual(1, (int)a[1])", span="115-115", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.GenericCollectionCopyTo()", file="BinaryConverter.cs"];
m1_195 [label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.InsertNull()", span="309-309", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertNull()", file="BinaryConverter.cs"];
m1_196 [label="JArray j = new JArray()", span="311-311", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertNull()", file="BinaryConverter.cs"];
m1_197 [label="j.Insert(0, null)", span="312-312", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertNull()", file="BinaryConverter.cs"];
m1_198 [label="Assert.AreEqual(null, ((JValue)j[0]).Value)", span="314-314", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertNull()", file="BinaryConverter.cs"];
m1_199 [label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.InsertNull()", span="309-309", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertNull()", file="BinaryConverter.cs"];
m1_246 [label="Entry Newtonsoft.Json.Linq.JObject.JObject(object)", span="114-114", cluster="Newtonsoft.Json.Linq.JObject.JObject(object)", file="BinaryConverter.cs"];
m1_71 [label="Exit lambda expression", span="138-138", cluster="lambda expression", file="BinaryConverter.cs"];
m1_70 [label="((ICollection<JToken>)j).CopyTo(new JToken[1], -1)", span="138-138", cluster="lambda expression", file="BinaryConverter.cs"];
m1_65 [label="throw JsonSerializationException.Create(reader, ''Unexpected token when reading bytes: {0}''.FormatWith(CultureInfo.InvariantCulture, reader.TokenType));", span="167-167", cluster="Newtonsoft.Json.Converters.BinaryConverter.ReadByteArray(Newtonsoft.Json.JsonReader)", file="BinaryConverter.cs"];
m1_66 [label="throw JsonSerializationException.Create(reader, ''Unexpected end when reading bytes.'');", span="171-171", cluster="Newtonsoft.Json.Converters.BinaryConverter.ReadByteArray(Newtonsoft.Json.JsonReader)", file="BinaryConverter.cs"];
m1_67 [label="Exit Newtonsoft.Json.Converters.BinaryConverter.ReadByteArray(Newtonsoft.Json.JsonReader)", span="150-150", cluster="Newtonsoft.Json.Converters.BinaryConverter.ReadByteArray(Newtonsoft.Json.JsonReader)", file="BinaryConverter.cs"];
m1_68 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="BinaryConverter.cs"];
m1_22 [label="Entry string.FormatWith(System.IFormatProvider, object)", span="47-47", cluster="string.FormatWith(System.IFormatProvider, object)", file="BinaryConverter.cs"];
m1_54 [label="Assert.AreEqual(null, a[4])", span="121-121", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.GenericCollectionCopyTo()", file="BinaryConverter.cs"];
m1_138 [label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAtOutOfRangeIndexShouldError()", span="230-230", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAtOutOfRangeIndexShouldError()", file="BinaryConverter.cs"];
m1_139 [label="JArray j = new JArray()", span="232-232", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAtOutOfRangeIndexShouldError()", file="BinaryConverter.cs"];
m1_140 [label="ExceptionAssert.Throws<ArgumentOutOfRangeException>(() => { j.RemoveAt(0); }, @''Index is equal to or greater than Count.\r\nParameter name: index'')", span="234-235", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAtOutOfRangeIndexShouldError()", file="BinaryConverter.cs"];
m1_141 [label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAtOutOfRangeIndexShouldError()", span="230-230", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAtOutOfRangeIndexShouldError()", file="BinaryConverter.cs"];
m1_29 [label="Type t = (ReflectionUtils.IsNullableType(objectType))\r\n                ? Nullable.GetUnderlyingType(objectType)\r\n                : objectType", span="101-103", cluster="Newtonsoft.Json.Converters.BinaryConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="BinaryConverter.cs"];
m1_9 [label="Entry Newtonsoft.Json.JsonWriter.WriteValue(byte[])", span="1363-1363", cluster="Newtonsoft.Json.JsonWriter.WriteValue(byte[])", file="BinaryConverter.cs"];
m1_8 [label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveSpecificAndRemoveSelf()", span="49-49", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveSpecificAndRemoveSelf()", file="BinaryConverter.cs"];
m1_15 [label="Entry Unk.AreEqual", span="", cluster="Unk.AreEqual", file="BinaryConverter.cs"];
m1_13 [label="Entry Unk.IsTrue", span="", cluster="Unk.IsTrue", file="BinaryConverter.cs"];
m1_11 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Last<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Last<TSource>()", file="BinaryConverter.cs"];
m1_12 [label="Entry Newtonsoft.Json.Linq.JArray.Remove(Newtonsoft.Json.Linq.JToken)", span="399-399", cluster="Newtonsoft.Json.Linq.JArray.Remove(Newtonsoft.Json.Linq.JToken)", file="BinaryConverter.cs"];
m1_10 [label="Entry Newtonsoft.Json.Linq.JArray.JArray(params object[])", span="82-82", cluster="Newtonsoft.Json.Linq.JArray.JArray(params object[])", file="BinaryConverter.cs"];
m1_14 [label="Entry Newtonsoft.Json.Linq.JToken.Remove()", span="385-385", cluster="Newtonsoft.Json.Linq.JToken.Remove()", file="BinaryConverter.cs"];
m1_270 [label="Entry Newtonsoft.Json.Linq.JArray.JArray(object)", span="91-91", cluster="Newtonsoft.Json.Linq.JArray.JArray(object)", file="BinaryConverter.cs"];
m1_79 [label="Exit Newtonsoft.Json.Converters.BinaryConverter.CanConvert(System.Type)", span="181-181", cluster="Newtonsoft.Json.Converters.BinaryConverter.CanConvert(System.Type)", file="BinaryConverter.cs"];
m1_80 [label="Newtonsoft.Json.Converters.BinaryConverter", span="", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.GenericCollectionCopyToInsufficientArrayCapacity()", file="BinaryConverter.cs"];
m1_81 [label="j.Add(new JValue(1))", span="154-154", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.GenericCollectionCopyToInsufficientArrayCapacity()", file="BinaryConverter.cs"];
m1_82 [label="j.Add(new JValue(2))", span="155-155", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.GenericCollectionCopyToInsufficientArrayCapacity()", file="BinaryConverter.cs"];
m1_83 [label="j.Add(new JValue(3))", span="156-156", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.GenericCollectionCopyToInsufficientArrayCapacity()", file="BinaryConverter.cs"];
m1_84 [label="ExceptionAssert.Throws<ArgumentException>(() => { ((ICollection<JToken>)j).CopyTo(new JToken[3], 1); }, @''The number of elements in the source JObject is greater than the available space from arrayIndex to the end of the destination array.'')", span="158-158", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.GenericCollectionCopyToInsufficientArrayCapacity()", file="BinaryConverter.cs"];
m1_85 [label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.GenericCollectionCopyToInsufficientArrayCapacity()", span="151-151", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.GenericCollectionCopyToInsufficientArrayCapacity()", file="BinaryConverter.cs"];
m1_324 [label="Entry lambda expression", span="523-523", cluster="lambda expression", file="BinaryConverter.cs"];
m1_63 [label="return byteList.ToArray();", span="162-162", cluster="Newtonsoft.Json.Converters.BinaryConverter.ReadByteArray(Newtonsoft.Json.JsonReader)", file="BinaryConverter.cs"];
m1_62 [label="JsonToken.EndArray", span="161-161", cluster="Newtonsoft.Json.Converters.BinaryConverter.ReadByteArray(Newtonsoft.Json.JsonReader)", file="BinaryConverter.cs"];
m1_64 [label="JsonToken.Comment", span="163-163", cluster="Newtonsoft.Json.Converters.BinaryConverter.ReadByteArray(Newtonsoft.Json.JsonReader)", file="BinaryConverter.cs"];
m1_69 [label="Entry Newtonsoft.Json.JsonReader.Read()", span="409-409", cluster="Newtonsoft.Json.JsonReader.Read()", file="BinaryConverter.cs"];
m1_77 [label="return true;", span="192-192", cluster="Newtonsoft.Json.Converters.BinaryConverter.CanConvert(System.Type)", file="BinaryConverter.cs"];
m1_76 [label="objectType == typeof(SqlBinary) || objectType == typeof(SqlBinary?)", span="190-190", cluster="Newtonsoft.Json.Converters.BinaryConverter.CanConvert(System.Type)", file="BinaryConverter.cs"];
m1_78 [label="return false;", span="195-195", cluster="Newtonsoft.Json.Converters.BinaryConverter.CanConvert(System.Type)", file="BinaryConverter.cs"];
m1_87 [label="((ICollection<JToken>)j).CopyTo(new JToken[3], 1)", span="158-158", cluster="lambda expression", file="BinaryConverter.cs"];
m1_86 [label="Entry lambda expression", span="158-158", cluster="lambda expression", file="BinaryConverter.cs"];
m1_88 [label="Exit lambda expression", span="158-158", cluster="lambda expression", file="BinaryConverter.cs"];
m1_143 [label="j.RemoveAt(0)", span="234-234", cluster="lambda expression", file="BinaryConverter.cs"];
m1_142 [label="Entry lambda expression", span="234-234", cluster="lambda expression", file="BinaryConverter.cs"];
m1_144 [label="Exit lambda expression", span="234-234", cluster="lambda expression", file="BinaryConverter.cs"];
m1_150 [label="j.RemoveAt(-1)", span="243-243", cluster="lambda expression", file="BinaryConverter.cs"];
m1_149 [label="Entry lambda expression", span="243-243", cluster="lambda expression", file="BinaryConverter.cs"];
m1_151 [label="Exit lambda expression", span="243-243", cluster="lambda expression", file="BinaryConverter.cs"];
m1_205 [label="j.Insert(-1, new JValue(1))", span="322-322", cluster="lambda expression", file="BinaryConverter.cs"];
m1_204 [label="Entry lambda expression", span="322-322", cluster="lambda expression", file="BinaryConverter.cs"];
m1_206 [label="Exit lambda expression", span="322-322", cluster="lambda expression", file="BinaryConverter.cs"];
m1_212 [label="j.Insert(2, new JValue(1))", span="331-331", cluster="lambda expression", file="BinaryConverter.cs"];
m1_211 [label="Entry lambda expression", span="331-331", cluster="lambda expression", file="BinaryConverter.cs"];
m1_213 [label="Exit lambda expression", span="331-331", cluster="lambda expression", file="BinaryConverter.cs"];
m1_234 [label="JArray.Parse(json)", span="362-362", cluster="lambda expression", file="BinaryConverter.cs"];
m1_233 [label="Entry lambda expression", span="362-362", cluster="lambda expression", file="BinaryConverter.cs"];
m1_235 [label="Exit lambda expression", span="362-362", cluster="lambda expression", file="BinaryConverter.cs"];
m1_285 [label="Entry lambda expression", span="464-468", cluster="lambda expression", file="BinaryConverter.cs"];
m1_286 [label="JArray a = new JArray()", span="466-466", cluster="lambda expression", file="BinaryConverter.cs"];
m1_287 [label="a[''badvalue''] = new JValue(3)", span="467-467", cluster="lambda expression", file="BinaryConverter.cs"];
m1_288 [label="Exit lambda expression", span="464-468", cluster="lambda expression", file="BinaryConverter.cs"];
m1_309 [label="Entry lambda expression", span="499-499", cluster="lambda expression", file="BinaryConverter.cs"];
m1_310 [label="JArray.Parse(''[1'')", span="499-499", cluster="lambda expression", file="BinaryConverter.cs"];
m1_311 [label="Exit lambda expression", span="499-499", cluster="lambda expression", file="BinaryConverter.cs"];
m1_325 [label="JArray.Parse(json)", span="523-523", cluster="lambda expression", file="BinaryConverter.cs"];
m1_326 [label="Exit lambda expression", span="523-523", cluster="lambda expression", file="BinaryConverter.cs"];
m1_89 [label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.Remove()", span="162-162", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Remove()", file="BinaryConverter.cs"];
m1_90 [label="JValue v = new JValue(1)", span="164-164", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Remove()", file="BinaryConverter.cs"];
m1_91 [label="JArray j = new JArray()", span="165-165", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Remove()", file="BinaryConverter.cs"];
m1_92 [label="j.Add(v)", span="166-166", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Remove()", file="BinaryConverter.cs"];
m1_96 [label="Assert.AreEqual(true, j.Remove(v))", span="172-172", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Remove()", file="BinaryConverter.cs"];
m1_97 [label="Assert.AreEqual(false, j.Remove(v))", span="173-173", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Remove()", file="BinaryConverter.cs"];
m1_93 [label="Assert.AreEqual(1, j.Count)", span="168-168", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Remove()", file="BinaryConverter.cs"];
m1_94 [label="Assert.AreEqual(false, j.Remove(new JValue(1)))", span="170-170", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Remove()", file="BinaryConverter.cs"];
m1_95 [label="Assert.AreEqual(false, j.Remove(null))", span="171-171", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Remove()", file="BinaryConverter.cs"];
m1_98 [label="Assert.AreEqual(0, j.Count)", span="175-175", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Remove()", file="BinaryConverter.cs"];
m1_99 [label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.Remove()", span="162-162", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Remove()", file="BinaryConverter.cs"];
m1_50 [label="Assert.AreEqual(null, a[0])", span="113-113", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.GenericCollectionCopyTo()", file="BinaryConverter.cs"];
m1_272 [label="Entry Unk.IsNotNull", span="", cluster="Unk.IsNotNull", file="BinaryConverter.cs"];
m1_271 [label="Entry System.ComponentModel.ITypedList.GetItemProperties(System.ComponentModel.PropertyDescriptor[])", span="0-0", cluster="System.ComponentModel.ITypedList.GetItemProperties(System.ComponentModel.PropertyDescriptor[])", file="BinaryConverter.cs"];
m1_27 [label="Assert.IsFalse(ReferenceEquals(a[0], a))", span="84-84", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddToSelf()", file="BinaryConverter.cs"];
m1_349 [label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_LineInfo()", span="559-559", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_LineInfo()", file="BinaryConverter.cs"];
m1_350 [label="string json = ''[1,2,3]''", span="561-561", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_LineInfo()", file="BinaryConverter.cs"];
m1_351 [label="JArray a = JArray.Parse(json, new JsonLoadSettings\r\n            {\r\n                LineInfoHandling = LineInfoHandling.Load\r\n            })", span="563-566", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_LineInfo()", file="BinaryConverter.cs"];
m1_352 [label="Assert.AreEqual(false, ((IJsonLineInfo)a).HasLineInfo())", span="568-568", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_LineInfo()", file="BinaryConverter.cs"];
m1_353 [label="Assert.AreEqual(false, ((IJsonLineInfo)a[0]).HasLineInfo())", span="569-569", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_LineInfo()", file="BinaryConverter.cs"];
m1_354 [label="Assert.AreEqual(false, ((IJsonLineInfo)a[1]).HasLineInfo())", span="570-570", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_LineInfo()", file="BinaryConverter.cs"];
m1_355 [label="Assert.AreEqual(false, ((IJsonLineInfo)a[2]).HasLineInfo())", span="571-571", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_LineInfo()", file="BinaryConverter.cs"];
m1_356 [label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_LineInfo()", span="559-559", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_LineInfo()", file="BinaryConverter.cs"];
m1_214 [label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.Item()", span="336-336", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Item()", file="BinaryConverter.cs"];
m1_215 [label="JValue v1 = new JValue(1)", span="338-338", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Item()", file="BinaryConverter.cs"];
m1_216 [label="JValue v2 = new JValue(2)", span="339-339", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Item()", file="BinaryConverter.cs"];
m1_220 [label="j.Add(v1)", span="345-345", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Item()", file="BinaryConverter.cs"];
m1_217 [label="JValue v3 = new JValue(3)", span="340-340", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Item()", file="BinaryConverter.cs"];
m1_221 [label="j.Add(v2)", span="346-346", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Item()", file="BinaryConverter.cs"];
m1_224 [label="Assert.AreEqual(null, v2.Parent)", span="351-351", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Item()", file="BinaryConverter.cs"];
m1_225 [label="Assert.AreEqual(-1, j.IndexOf(v2))", span="352-352", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Item()", file="BinaryConverter.cs"];
m1_218 [label="JValue v4 = new JValue(4)", span="341-341", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Item()", file="BinaryConverter.cs"];
m1_222 [label="j.Add(v3)", span="347-347", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Item()", file="BinaryConverter.cs"];
m1_219 [label="JArray j = new JArray()", span="343-343", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Item()", file="BinaryConverter.cs"];
m1_223 [label="j[1] = v4", span="349-349", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Item()", file="BinaryConverter.cs"];
m1_226 [label="Assert.AreEqual(j, v4.Parent)", span="353-353", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Item()", file="BinaryConverter.cs"];
m1_227 [label="Assert.AreEqual(1, j.IndexOf(v4))", span="354-354", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Item()", file="BinaryConverter.cs"];
m1_228 [label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.Item()", span="336-336", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Item()", file="BinaryConverter.cs"];
m1_23 [label="_reflectionObject == null", span="84-84", cluster="Newtonsoft.Json.Converters.BinaryConverter.EnsureReflectionObject(System.Type)", file="BinaryConverter.cs"];
m1_31 [label="!ReflectionUtils.IsNullable(objectType)", span="107-107", cluster="Newtonsoft.Json.Converters.BinaryConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="BinaryConverter.cs"];
m1_185 [label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.InsertShouldInsertAtZeroIndex()", span="293-293", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertShouldInsertAtZeroIndex()", file="BinaryConverter.cs"];
m1_186 [label="JValue v1 = new JValue(1)", span="295-295", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertShouldInsertAtZeroIndex()", file="BinaryConverter.cs"];
m1_187 [label="JValue v2 = new JValue(2)", span="296-296", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertShouldInsertAtZeroIndex()", file="BinaryConverter.cs"];
m1_189 [label="j.Insert(0, v1)", span="300-300", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertShouldInsertAtZeroIndex()", file="BinaryConverter.cs"];
m1_190 [label="Assert.AreEqual(0, j.IndexOf(v1))", span="301-301", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertShouldInsertAtZeroIndex()", file="BinaryConverter.cs"];
m1_192 [label="Assert.AreEqual(1, j.IndexOf(v1))", span="304-304", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertShouldInsertAtZeroIndex()", file="BinaryConverter.cs"];
m1_188 [label="JArray j = new JArray()", span="298-298", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertShouldInsertAtZeroIndex()", file="BinaryConverter.cs"];
m1_191 [label="j.Insert(0, v2)", span="303-303", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertShouldInsertAtZeroIndex()", file="BinaryConverter.cs"];
m1_193 [label="Assert.AreEqual(0, j.IndexOf(v2))", span="305-305", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertShouldInsertAtZeroIndex()", file="BinaryConverter.cs"];
m1_194 [label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.InsertShouldInsertAtZeroIndex()", span="293-293", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertShouldInsertAtZeroIndex()", file="BinaryConverter.cs"];
m1_337 [label="Entry Newtonsoft.Json.Linq.JObject.Parse(string)", span="409-409", cluster="Newtonsoft.Json.Linq.JObject.Parse(string)", file="BinaryConverter.cs"];
m1_56 [label="Entry SqlBinary.cstr", span="", cluster="SqlBinary.cstr", file="BinaryConverter.cs"];
m1_248 [label="Entry JArray.cstr", span="", cluster="JArray.cstr", file="BinaryConverter.cs"];
m1_55 [label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.GenericCollectionCopyTo()", span="101-101", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.GenericCollectionCopyTo()", file="BinaryConverter.cs"];
m1_119 [label="Entry Newtonsoft.Json.Linq.JArray.IndexOf(Newtonsoft.Json.Linq.JToken)", span="298-298", cluster="Newtonsoft.Json.Linq.JArray.IndexOf(Newtonsoft.Json.Linq.JToken)", file="BinaryConverter.cs"];
m1_24 [label="_reflectionObject = ReflectionObject.Create(t, t.GetConstructor(new[] { typeof(byte[]) }), BinaryToArrayName)", span="86-86", cluster="Newtonsoft.Json.Converters.BinaryConverter.EnsureReflectionObject(System.Type)", file="BinaryConverter.cs"];
m1_25 [label="Exit Newtonsoft.Json.Converters.BinaryConverter.EnsureReflectionObject(System.Type)", span="82-82", cluster="Newtonsoft.Json.Converters.BinaryConverter.EnsureReflectionObject(System.Type)", file="BinaryConverter.cs"];
m1_26 [label="Entry System.Type.GetConstructor(System.Type[])", span="0-0", cluster="System.Type.GetConstructor(System.Type[])", file="BinaryConverter.cs"];
m1_28 [label="Entry Newtonsoft.Json.Converters.BinaryConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", span="99-99", cluster="Newtonsoft.Json.Converters.BinaryConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="BinaryConverter.cs"];
m1_327 [label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.ToListOnEmptyArray()", span="527-527", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ToListOnEmptyArray()", file="BinaryConverter.cs"];
m1_328 [label="string json = @''{''''decks'''':[]}''", span="529-529", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ToListOnEmptyArray()", file="BinaryConverter.cs"];
m1_329 [label="JArray decks = (JArray)JObject.Parse(json)[''decks'']", span="531-531", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ToListOnEmptyArray()", file="BinaryConverter.cs"];
m1_330 [label="IList<JToken> l = decks.ToList()", span="532-532", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ToListOnEmptyArray()", file="BinaryConverter.cs"];
m1_331 [label="Assert.AreEqual(0, l.Count)", span="533-533", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ToListOnEmptyArray()", file="BinaryConverter.cs"];
m1_332 [label="json = @''{''''decks'''':[1]}''", span="535-535", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ToListOnEmptyArray()", file="BinaryConverter.cs"];
m1_333 [label="decks = (JArray)JObject.Parse(json)[''decks'']", span="537-537", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ToListOnEmptyArray()", file="BinaryConverter.cs"];
m1_334 [label="l = decks.ToList()", span="538-538", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ToListOnEmptyArray()", file="BinaryConverter.cs"];
m1_335 [label="Assert.AreEqual(1, l.Count)", span="539-539", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ToListOnEmptyArray()", file="BinaryConverter.cs"];
m1_336 [label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.ToListOnEmptyArray()", span="527-527", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ToListOnEmptyArray()", file="BinaryConverter.cs"];
m1_48 [label="JToken[] a = new JToken[5]", span="109-109", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.GenericCollectionCopyTo()", file="BinaryConverter.cs"];
m1_338 [label="Entry System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", file="BinaryConverter.cs"];
m1_348 [label="Entry Newtonsoft.Json.Linq.JArray.Parse(string, Newtonsoft.Json.Linq.JsonLoadSettings)", span="172-172", cluster="Newtonsoft.Json.Linq.JArray.Parse(string, Newtonsoft.Json.Linq.JsonLoadSettings)", file="BinaryConverter.cs"];
m1_347 [label="Entry Newtonsoft.Json.Linq.JsonLoadSettings.JsonLoadSettings()", span="7-7", cluster="Newtonsoft.Json.Linq.JsonLoadSettings.JsonLoadSettings()", file="BinaryConverter.cs"];
m1_137 [label="Entry Newtonsoft.Json.Linq.JArray.RemoveAt(int)", span="323-323", cluster="Newtonsoft.Json.Linq.JArray.RemoveAt(int)", file="BinaryConverter.cs"];
m1_229 [label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_ShouldThrowOnUnexpectedToken()", span="358-358", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_ShouldThrowOnUnexpectedToken()", file="BinaryConverter.cs"];
m1_230 [label="string json = @''{''''prop'''':''''value''''}''", span="360-360", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_ShouldThrowOnUnexpectedToken()", file="BinaryConverter.cs"];
m1_231 [label="ExceptionAssert.Throws<JsonReaderException>(() => { JArray.Parse(json); }, ''Error reading JArray from JsonReader. Current JsonReader item is not an array: StartObject. Path '', line 1, position 1.'')", span="362-362", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_ShouldThrowOnUnexpectedToken()", file="BinaryConverter.cs"];
m1_232 [label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_ShouldThrowOnUnexpectedToken()", span="358-358", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_ShouldThrowOnUnexpectedToken()", file="BinaryConverter.cs"];
m1_237 [label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.ArrayOrder()", span="372-372", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ArrayOrder()", file="BinaryConverter.cs"];
m1_238 [label="string itemZeroText = ''Zero text''", span="374-374", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ArrayOrder()", file="BinaryConverter.cs"];
m1_239 [label="IEnumerable<ListItemFields> t = new List<ListItemFields>\r\n            {\r\n                new ListItemFields { ListItemText = ''First'', ListItemValue = 1 },\r\n                new ListItemFields { ListItemText = ''Second'', ListItemValue = 2 },\r\n                new ListItemFields { ListItemText = ''Third'', ListItemValue = 3 }\r\n            }", span="376-381", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ArrayOrder()", file="BinaryConverter.cs"];
m1_240 [label="JObject optionValues =\r\n                new JObject(\r\n                    new JProperty(''options'',\r\n                        new JArray(\r\n                            new JObject(\r\n                                new JProperty(''text'', itemZeroText),\r\n                                new JProperty(''value'', ''0'')),\r\n                            from r in t\r\n                            orderby r.ListItemValue\r\n                            select new JObject(\r\n                                new JProperty(''text'', r.ListItemText),\r\n                                new JProperty(''value'', r.ListItemValue.ToString())))))", span="383-394", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ArrayOrder()", file="BinaryConverter.cs"];
m1_241 [label="string result = ''myOptions = '' + optionValues.ToString()", span="396-396", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ArrayOrder()", file="BinaryConverter.cs"];
m1_242 [label="StringAssert.AreEqual(@''myOptions = {\r\n  ''''options'''': [\r\n    {\r\n      ''''text'''': ''''Zero text'''',\r\n      ''''value'''': ''''0''''\r\n    },\r\n    {\r\n      ''''text'''': ''''First'''',\r\n      ''''value'''': ''''1''''\r\n    },\r\n    {\r\n      ''''text'''': ''''Second'''',\r\n      ''''value'''': ''''2''''\r\n    },\r\n    {\r\n      ''''text'''': ''''Third'''',\r\n      ''''value'''': ''''3''''\r\n    }\r\n  ]\r\n}'', result)", span="398-417", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ArrayOrder()", file="BinaryConverter.cs"];
m1_243 [label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.ArrayOrder()", span="372-372", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ArrayOrder()", file="BinaryConverter.cs"];
m1_100 [label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", span="179-179", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", file="BinaryConverter.cs"];
m1_101 [label="JValue v1 = new JValue(1)", span="181-181", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", file="BinaryConverter.cs"];
m1_102 [label="JValue v2 = new JValue(1)", span="182-182", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", file="BinaryConverter.cs"];
m1_105 [label="j.Add(v1)", span="187-187", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", file="BinaryConverter.cs"];
m1_106 [label="Assert.AreEqual(0, j.IndexOf(v1))", span="188-188", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", file="BinaryConverter.cs"];
m1_108 [label="Assert.AreEqual(0, j.IndexOf(v1))", span="191-191", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", file="BinaryConverter.cs"];
m1_111 [label="Assert.AreEqual(1, j.IndexOf(v1))", span="195-195", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", file="BinaryConverter.cs"];
m1_115 [label="Assert.AreEqual(0, j.IndexOf(v1))", span="200-200", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", file="BinaryConverter.cs"];
m1_103 [label="JValue v3 = new JValue(1)", span="183-183", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", file="BinaryConverter.cs"];
m1_107 [label="j.Add(v2)", span="190-190", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", file="BinaryConverter.cs"];
m1_109 [label="Assert.AreEqual(1, j.IndexOf(v2))", span="192-192", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", file="BinaryConverter.cs"];
m1_112 [label="Assert.AreEqual(2, j.IndexOf(v2))", span="196-196", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", file="BinaryConverter.cs"];
m1_116 [label="Assert.AreEqual(1, j.IndexOf(v2))", span="201-201", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", file="BinaryConverter.cs"];
m1_104 [label="JArray j = new JArray()", span="185-185", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", file="BinaryConverter.cs"];
m1_110 [label="j.AddFirst(v3)", span="194-194", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", file="BinaryConverter.cs"];
m1_113 [label="Assert.AreEqual(0, j.IndexOf(v3))", span="197-197", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", file="BinaryConverter.cs"];
m1_114 [label="v3.Remove()", span="199-199", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", file="BinaryConverter.cs"];
m1_117 [label="Assert.AreEqual(-1, j.IndexOf(v3))", span="202-202", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", file="BinaryConverter.cs"];
m1_118 [label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", span="179-179", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", file="BinaryConverter.cs"];
m1_121 [label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAt()", span="206-206", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAt()", file="BinaryConverter.cs"];
m1_122 [label="JValue v1 = new JValue(1)", span="208-208", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAt()", file="BinaryConverter.cs"];
m1_123 [label="JValue v2 = new JValue(1)", span="209-209", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAt()", file="BinaryConverter.cs"];
m1_126 [label="j.Add(v1)", span="214-214", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAt()", file="BinaryConverter.cs"];
m1_129 [label="Assert.AreEqual(true, j.Contains(v1))", span="218-218", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAt()", file="BinaryConverter.cs"];
m1_131 [label="Assert.AreEqual(false, j.Contains(v1))", span="220-220", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAt()", file="BinaryConverter.cs"];
m1_124 [label="JValue v3 = new JValue(1)", span="210-210", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAt()", file="BinaryConverter.cs"];
m1_127 [label="j.Add(v2)", span="215-215", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAt()", file="BinaryConverter.cs"];
m1_125 [label="JArray j = new JArray()", span="212-212", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAt()", file="BinaryConverter.cs"];
m1_128 [label="j.Add(v3)", span="216-216", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAt()", file="BinaryConverter.cs"];
m1_132 [label="Assert.AreEqual(true, j.Contains(v3))", span="222-222", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAt()", file="BinaryConverter.cs"];
m1_134 [label="Assert.AreEqual(false, j.Contains(v3))", span="224-224", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAt()", file="BinaryConverter.cs"];
m1_130 [label="j.RemoveAt(0)", span="219-219", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAt()", file="BinaryConverter.cs"];
m1_133 [label="j.RemoveAt(1)", span="223-223", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAt()", file="BinaryConverter.cs"];
m1_135 [label="Assert.AreEqual(1, j.Count)", span="226-226", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAt()", file="BinaryConverter.cs"];
m1_136 [label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAt()", span="206-206", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAt()", file="BinaryConverter.cs"];
m1_145 [label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAtNegativeIndexShouldError()", span="239-239", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAtNegativeIndexShouldError()", file="BinaryConverter.cs"];
m1_146 [label="JArray j = new JArray()", span="241-241", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAtNegativeIndexShouldError()", file="BinaryConverter.cs"];
m1_147 [label="ExceptionAssert.Throws<ArgumentOutOfRangeException>(() => { j.RemoveAt(-1); }, @''Index is less than 0.\r\nParameter name: index'')", span="243-244", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAtNegativeIndexShouldError()", file="BinaryConverter.cs"];
m1_148 [label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAtNegativeIndexShouldError()", span="239-239", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAtNegativeIndexShouldError()", file="BinaryConverter.cs"];
m1_251 [label="Entry Newtonsoft.Json.Linq.JToken.ToString()", span="422-422", cluster="Newtonsoft.Json.Linq.JToken.ToString()", file="BinaryConverter.cs"];
m1_339 [label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_NoComments()", span="543-543", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_NoComments()", file="BinaryConverter.cs"];
m1_340 [label="string json = ''[1,2/*comment*/,3]''", span="545-545", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_NoComments()", file="BinaryConverter.cs"];
m1_341 [label="JArray a = JArray.Parse(json, new JsonLoadSettings\r\n            {\r\n                CommentHandling = CommentHandling.Ignore\r\n            })", span="547-550", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_NoComments()", file="BinaryConverter.cs"];
m1_342 [label="Assert.AreEqual(3, a.Count)", span="552-552", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_NoComments()", file="BinaryConverter.cs"];
m1_343 [label="Assert.AreEqual(1, (int)a[0])", span="553-553", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_NoComments()", file="BinaryConverter.cs"];
m1_344 [label="Assert.AreEqual(2, (int)a[1])", span="554-554", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_NoComments()", file="BinaryConverter.cs"];
m1_345 [label="Assert.AreEqual(3, (int)a[2])", span="555-555", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_NoComments()", file="BinaryConverter.cs"];
m1_346 [label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_NoComments()", span="543-543", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_NoComments()", file="BinaryConverter.cs"];
m1_281 [label="Entry Unk.AreNotSame", span="", cluster="Unk.AreNotSame", file="BinaryConverter.cs"];
m1_200 [label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.InsertNegativeIndexShouldThrow()", span="318-318", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertNegativeIndexShouldThrow()", file="BinaryConverter.cs"];
m1_201 [label="JArray j = new JArray()", span="320-320", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertNegativeIndexShouldThrow()", file="BinaryConverter.cs"];
m1_202 [label="ExceptionAssert.Throws<ArgumentOutOfRangeException>(() => { j.Insert(-1, new JValue(1)); }, @''Index was out of range. Must be non-negative and less than the size of the collection.\r\nParameter name: index'')", span="322-323", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertNegativeIndexShouldThrow()", file="BinaryConverter.cs"];
m1_203 [label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.InsertNegativeIndexShouldThrow()", span="318-318", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertNegativeIndexShouldThrow()", file="BinaryConverter.cs"];
m1_236 [label="Entry Newtonsoft.Json.Linq.JArray.Parse(string)", span="157-157", cluster="Newtonsoft.Json.Linq.JArray.Parse(string)", file="BinaryConverter.cs"];
m1_247 [label="Entry Newtonsoft.Json.Linq.JProperty.JProperty(string, object)", span="326-326", cluster="Newtonsoft.Json.Linq.JProperty.JProperty(string, object)", file="BinaryConverter.cs"];
m1_42 [label="EnsureReflectionObject(t)", span="136-136", cluster="Newtonsoft.Json.Converters.BinaryConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="BinaryConverter.cs"];
m1_43 [label="return _reflectionObject.Creator(data);", span="138-138", cluster="Newtonsoft.Json.Converters.BinaryConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", color=red, community=0, file="BinaryConverter.cs"];
m1_44 [label="t == typeof(SqlBinary)", span="142-142", cluster="Newtonsoft.Json.Converters.BinaryConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", color=red, community=0, file="BinaryConverter.cs"];
m1_45 [label="return new SqlBinary(data);", span="144-144", cluster="Newtonsoft.Json.Converters.BinaryConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="BinaryConverter.cs"];
m1_46 [label="throw JsonSerializationException.Create(reader, ''Unexpected object type when writing binary: {0}''.FormatWith(CultureInfo.InvariantCulture, objectType));", span="147-147", cluster="Newtonsoft.Json.Converters.BinaryConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="BinaryConverter.cs"];
m1_47 [label="Exit Newtonsoft.Json.Converters.BinaryConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", span="99-99", cluster="Newtonsoft.Json.Converters.BinaryConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="BinaryConverter.cs"];
m1_49 [label="Entry System.Nullable.GetUnderlyingType(System.Type)", span="0-0", cluster="System.Nullable.GetUnderlyingType(System.Type)", file="BinaryConverter.cs"];
m1_52 [label="Entry Newtonsoft.Json.Converters.BinaryConverter.ReadByteArray(Newtonsoft.Json.JsonReader)", span="150-150", cluster="Newtonsoft.Json.Converters.BinaryConverter.ReadByteArray(Newtonsoft.Json.JsonReader)", file="BinaryConverter.cs"];
m1_53 [label="Entry object.ToString()", span="0-0", cluster="object.ToString()", file="BinaryConverter.cs"];
m1_40 [label="throw JsonSerializationException.Create(reader, ''Unexpected token parsing binary. Expected String or StartArray, got {0}.''.FormatWith(CultureInfo.InvariantCulture, reader.TokenType));", span="130-130", cluster="Newtonsoft.Json.Converters.BinaryConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="BinaryConverter.cs", color=green, community=0];
m1_253 [label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.Iterate()", span="421-421", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Iterate()", file="BinaryConverter.cs"];
m1_254 [label="JArray a = new JArray(1, 2, 3, 4, 5)", span="423-423", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Iterate()", file="BinaryConverter.cs"];
m1_255 [label="int i = 1", span="425-425", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Iterate()", file="BinaryConverter.cs"];
m1_256 [label=a, span="426-426", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Iterate()", file="BinaryConverter.cs"];
m1_257 [label="Assert.AreEqual(i, (int)token)", span="428-428", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Iterate()", file="BinaryConverter.cs"];
m1_258 [label="i++", span="429-429", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Iterate()", file="BinaryConverter.cs"];
m1_259 [label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.Iterate()", span="421-421", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Iterate()", file="BinaryConverter.cs"];
m1_72 [label="Entry System.Collections.Generic.List<T>.ToArray()", span="0-0", cluster="System.Collections.Generic.List<T>.ToArray()", file="BinaryConverter.cs"];
m1_73 [label="Entry Newtonsoft.Json.Converters.BinaryConverter.CanConvert(System.Type)", span="181-181", cluster="Newtonsoft.Json.Converters.BinaryConverter.CanConvert(System.Type)", file="BinaryConverter.cs"];
m1_74 [label="objectType.AssignableToTypeName(BinaryTypeName)", span="184-184", cluster="Newtonsoft.Json.Converters.BinaryConverter.CanConvert(System.Type)", file="BinaryConverter.cs"];
m1_75 [label="return true;", span="186-186", cluster="Newtonsoft.Json.Converters.BinaryConverter.CanConvert(System.Type)", file="BinaryConverter.cs"];
m1_312 [label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.InsertAddEnd()", span="503-503", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertAddEnd()", file="BinaryConverter.cs"];
m1_313 [label="JArray array = new JArray()", span="505-505", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertAddEnd()", file="BinaryConverter.cs"];
m1_314 [label="array.Insert(0, 123)", span="506-506", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertAddEnd()", file="BinaryConverter.cs"];
m1_315 [label="array.Insert(1, 456)", span="507-507", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertAddEnd()", file="BinaryConverter.cs"];
m1_316 [label="Assert.AreEqual(2, array.Count)", span="509-509", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertAddEnd()", file="BinaryConverter.cs"];
m1_317 [label="Assert.AreEqual(123, (int)array[0])", span="510-510", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertAddEnd()", file="BinaryConverter.cs"];
m1_318 [label="Assert.AreEqual(456, (int)array[1])", span="511-511", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertAddEnd()", file="BinaryConverter.cs"];
m1_319 [label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.InsertAddEnd()", span="503-503", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertAddEnd()", file="BinaryConverter.cs"];
m1_244 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="BinaryConverter.cs"];
m1_57 [label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.GenericCollectionCopyToNullArrayShouldThrow()", span="125-125", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.GenericCollectionCopyToNullArrayShouldThrow()", file="BinaryConverter.cs"];
m1_58 [label="JArray j = new JArray()", span="127-127", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.GenericCollectionCopyToNullArrayShouldThrow()", file="BinaryConverter.cs"];
m1_59 [label="ExceptionAssert.Throws<ArgumentNullException>(() => { ((ICollection<JToken>)j).CopyTo(null, 0); }, @''Value cannot be null.\r\nParameter name: array'')", span="129-130", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.GenericCollectionCopyToNullArrayShouldThrow()", file="BinaryConverter.cs"];
m1_61 [label="Entry Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", span="350-350", cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", file="BinaryConverter.cs"];
m1_60 [label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.GenericCollectionCopyToNullArrayShouldThrow()", span="125-125", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.GenericCollectionCopyToNullArrayShouldThrow()", file="BinaryConverter.cs"];
m1_7 [label="Assert.AreEqual(2, a.Count)", span="65-65", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveSpecificAndRemoveSelf()", file="BinaryConverter.cs"];
m1_30 [label="reader.TokenType == JsonToken.Null", span="105-105", cluster="Newtonsoft.Json.Converters.BinaryConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="BinaryConverter.cs"];
m1_0 [label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveSpecificAndRemoveSelf()", span="49-49", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveSpecificAndRemoveSelf()", file="BinaryConverter.cs"];
m1_4 [label="Assert.IsTrue(a.Remove(last))", span="60-60", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveSpecificAndRemoveSelf()", file="BinaryConverter.cs"];
m1_1 [label="JObject o = new JObject\r\n            {\r\n                { ''results'', new JArray(1, 2, 3, 4) }\r\n            }", span="51-54", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveSpecificAndRemoveSelf()", file="BinaryConverter.cs"];
m1_5 [label="last = a.Last()", span="62-62", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveSpecificAndRemoveSelf()", file="BinaryConverter.cs"];
m1_2 [label="JArray a = (JArray)o[''results'']", span="56-56", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveSpecificAndRemoveSelf()", file="BinaryConverter.cs"];
m1_3 [label="var last = a.Last()", span="58-58", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveSpecificAndRemoveSelf()", file="BinaryConverter.cs"];
m1_6 [label="last.Remove()", span="63-63", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveSpecificAndRemoveSelf()", file="BinaryConverter.cs"];
m1_249 [label="Entry Newtonsoft.Json.Linq.JObject.JObject(params object[])", span="105-105", cluster="Newtonsoft.Json.Linq.JObject.JObject(params object[])", file="BinaryConverter.cs"];
m1_320 [label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.ParseAdditionalContent()", span="515-515", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ParseAdditionalContent()", file="BinaryConverter.cs"];
m1_321 [label="string json = @''[\r\n''''Small'''',\r\n''''Medium'''',\r\n''''Large''''\r\n], 987987''", span="517-521", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ParseAdditionalContent()", file="BinaryConverter.cs"];
m1_322 [label="ExceptionAssert.Throws<JsonReaderException>(() => { JArray.Parse(json); }, ''Additional text encountered after finished reading JSON content: ,. Path '', line 5, position 1.'')", span="523-523", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ParseAdditionalContent()", file="BinaryConverter.cs"];
m1_323 [label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.ParseAdditionalContent()", span="515-515", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ParseAdditionalContent()", file="BinaryConverter.cs"];
m1_295 [label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.ReplaceAll()", span="483-483", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ReplaceAll()", file="BinaryConverter.cs"];
m1_296 [label="JArray a = new JArray(new[] { 1, 2, 3 })", span="485-485", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ReplaceAll()", file="BinaryConverter.cs"];
m1_297 [label="Assert.AreEqual(3, a.Count)", span="486-486", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ReplaceAll()", file="BinaryConverter.cs"];
m1_298 [label="Assert.AreEqual(1, (int)a[0])", span="487-487", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ReplaceAll()", file="BinaryConverter.cs"];
m1_299 [label="Assert.AreEqual(2, (int)a[1])", span="488-488", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ReplaceAll()", file="BinaryConverter.cs"];
m1_300 [label="Assert.AreEqual(3, (int)a[2])", span="489-489", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ReplaceAll()", file="BinaryConverter.cs"];
m1_301 [label="a.ReplaceAll(1)", span="491-491", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ReplaceAll()", file="BinaryConverter.cs"];
m1_302 [label="Assert.AreEqual(1, a.Count)", span="492-492", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ReplaceAll()", file="BinaryConverter.cs"];
m1_303 [label="Assert.AreEqual(1, (int)a[0])", span="493-493", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ReplaceAll()", file="BinaryConverter.cs"];
m1_304 [label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.ReplaceAll()", span="483-483", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ReplaceAll()", file="BinaryConverter.cs"];
m1_120 [label="Entry Newtonsoft.Json.Linq.JContainer.AddFirst(object)", span="649-649", cluster="Newtonsoft.Json.Linq.JContainer.AddFirst(object)", file="BinaryConverter.cs"];
m1_252 [label="Entry Newtonsoft.Json.Tests.StringAssert.AreEqual(string, string)", span="321-321", cluster="Newtonsoft.Json.Tests.StringAssert.AreEqual(string, string)", file="BinaryConverter.cs"];
m1_305 [label="Entry Newtonsoft.Json.Linq.JContainer.ReplaceAll(object)", span="699-699", cluster="Newtonsoft.Json.Linq.JContainer.ReplaceAll(object)", file="BinaryConverter.cs"];
m1_260 [label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.ITypedListGetItemProperties()", span="435-435", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ITypedListGetItemProperties()", file="BinaryConverter.cs"];
m1_261 [label="JProperty p1 = new JProperty(''Test1'', 1)", span="437-437", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ITypedListGetItemProperties()", file="BinaryConverter.cs"];
m1_262 [label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="438-438", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ITypedListGetItemProperties()", file="BinaryConverter.cs"];
m1_263 [label="ITypedList a = new JArray(new JObject(p1, p2))", span="439-439", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ITypedListGetItemProperties()", file="BinaryConverter.cs"];
m1_264 [label="PropertyDescriptorCollection propertyDescriptors = a.GetItemProperties(null)", span="441-441", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ITypedListGetItemProperties()", file="BinaryConverter.cs"];
m1_265 [label="Assert.IsNotNull(propertyDescriptors)", span="442-442", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ITypedListGetItemProperties()", file="BinaryConverter.cs"];
m1_266 [label="Assert.AreEqual(2, propertyDescriptors.Count)", span="443-443", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ITypedListGetItemProperties()", file="BinaryConverter.cs"];
m1_267 [label="Assert.AreEqual(''Test1'', propertyDescriptors[0].Name)", span="444-444", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ITypedListGetItemProperties()", file="BinaryConverter.cs"];
m1_268 [label="Assert.AreEqual(''Test2'', propertyDescriptors[1].Name)", span="445-445", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ITypedListGetItemProperties()", file="BinaryConverter.cs"];
m1_269 [label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.ITypedListGetItemProperties()", span="435-435", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ITypedListGetItemProperties()", file="BinaryConverter.cs"];
m1_37 [label="Assert.AreEqual(false, a.Contains(null))", span="96-96", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Contains()", file="BinaryConverter.cs"];
m1_32 [label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.Contains()", span="88-88", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Contains()", file="BinaryConverter.cs"];
m1_35 [label="Assert.AreEqual(false, a.Contains(new JValue(2)))", span="94-94", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Contains()", file="BinaryConverter.cs"];
m1_36 [label="Assert.AreEqual(false, a.Contains(new JValue(1)))", span="95-95", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Contains()", file="BinaryConverter.cs"];
m1_38 [label="Assert.AreEqual(true, a.Contains(v))", span="97-97", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Contains()", file="BinaryConverter.cs"];
m1_33 [label="JValue v = new JValue(1)", span="90-90", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Contains()", file="BinaryConverter.cs"];
m1_34 [label="JArray a = new JArray { v }", span="92-92", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Contains()", file="BinaryConverter.cs"];
m1_41 [label="Entry Newtonsoft.Json.Linq.JArray.Contains(Newtonsoft.Json.Linq.JToken)", span="367-367", cluster="Newtonsoft.Json.Linq.JArray.Contains(Newtonsoft.Json.Linq.JToken)", file="BinaryConverter.cs"];
m1_39 [label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.Contains()", span="88-88", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Contains()", file="BinaryConverter.cs"];
m1_250 [label="Entry object.ToString()", span="0-0", cluster="object.ToString()", file="BinaryConverter.cs"];
m1_168 [label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.AddFirstAddedTokenShouldBeFirst()", span="269-269", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddFirstAddedTokenShouldBeFirst()", file="BinaryConverter.cs"];
m1_169 [label="JValue v1 = new JValue(1)", span="271-271", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddFirstAddedTokenShouldBeFirst()", file="BinaryConverter.cs"];
m1_170 [label="JValue v2 = new JValue(2)", span="272-272", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddFirstAddedTokenShouldBeFirst()", file="BinaryConverter.cs"];
m1_175 [label="j.AddFirst(v1)", span="279-279", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddFirstAddedTokenShouldBeFirst()", file="BinaryConverter.cs"];
m1_176 [label="Assert.AreEqual(v1, j.First)", span="280-280", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddFirstAddedTokenShouldBeFirst()", file="BinaryConverter.cs"];
m1_177 [label="Assert.AreEqual(v1, j.Last)", span="281-281", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddFirstAddedTokenShouldBeFirst()", file="BinaryConverter.cs"];
m1_180 [label="Assert.AreEqual(v1, j.Last)", span="285-285", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddFirstAddedTokenShouldBeFirst()", file="BinaryConverter.cs"];
m1_183 [label="Assert.AreEqual(v1, j.Last)", span="289-289", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddFirstAddedTokenShouldBeFirst()", file="BinaryConverter.cs"];
m1_171 [label="JValue v3 = new JValue(3)", span="273-273", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddFirstAddedTokenShouldBeFirst()", file="BinaryConverter.cs"];
m1_178 [label="j.AddFirst(v2)", span="283-283", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddFirstAddedTokenShouldBeFirst()", file="BinaryConverter.cs"];
m1_179 [label="Assert.AreEqual(v2, j.First)", span="284-284", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddFirstAddedTokenShouldBeFirst()", file="BinaryConverter.cs"];
m1_172 [label="JArray j = new JArray()", span="275-275", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddFirstAddedTokenShouldBeFirst()", file="BinaryConverter.cs"];
m1_181 [label="j.AddFirst(v3)", span="287-287", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddFirstAddedTokenShouldBeFirst()", file="BinaryConverter.cs"];
m1_182 [label="Assert.AreEqual(v3, j.First)", span="288-288", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddFirstAddedTokenShouldBeFirst()", file="BinaryConverter.cs"];
m1_173 [label="Assert.AreEqual(null, j.First)", span="276-276", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddFirstAddedTokenShouldBeFirst()", file="BinaryConverter.cs"];
m1_174 [label="Assert.AreEqual(null, j.Last)", span="277-277", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddFirstAddedTokenShouldBeFirst()", file="BinaryConverter.cs"];
m1_184 [label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.AddFirstAddedTokenShouldBeFirst()", span="269-269", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddFirstAddedTokenShouldBeFirst()", file="BinaryConverter.cs"];
m1_152 [label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.Insert()", span="248-248", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Insert()", file="BinaryConverter.cs"];
m1_153 [label="JValue v1 = new JValue(1)", span="250-250", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Insert()", file="BinaryConverter.cs"];
m1_154 [label="JValue v2 = new JValue(2)", span="251-251", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Insert()", file="BinaryConverter.cs"];
m1_158 [label="j.Add(v1)", span="257-257", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Insert()", file="BinaryConverter.cs"];
m1_162 [label="Assert.AreEqual(0, j.IndexOf(v1))", span="262-262", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Insert()", file="BinaryConverter.cs"];
m1_155 [label="JValue v3 = new JValue(3)", span="252-252", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Insert()", file="BinaryConverter.cs"];
m1_159 [label="j.Add(v2)", span="258-258", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Insert()", file="BinaryConverter.cs"];
m1_164 [label="Assert.AreEqual(2, j.IndexOf(v2))", span="264-264", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Insert()", file="BinaryConverter.cs"];
m1_156 [label="JValue v4 = new JValue(4)", span="253-253", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Insert()", file="BinaryConverter.cs"];
m1_160 [label="j.Add(v3)", span="259-259", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Insert()", file="BinaryConverter.cs"];
m1_165 [label="Assert.AreEqual(3, j.IndexOf(v3))", span="265-265", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Insert()", file="BinaryConverter.cs"];
m1_157 [label="JArray j = new JArray()", span="255-255", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Insert()", file="BinaryConverter.cs"];
m1_161 [label="j.Insert(1, v4)", span="260-260", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Insert()", file="BinaryConverter.cs"];
m1_163 [label="Assert.AreEqual(1, j.IndexOf(v4))", span="263-263", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Insert()", file="BinaryConverter.cs"];
m1_166 [label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.Insert()", span="248-248", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Insert()", file="BinaryConverter.cs"];
m1_306 [label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.ParseIncomplete()", span="497-497", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ParseIncomplete()", file="BinaryConverter.cs"];
m1_307 [label="ExceptionAssert.Throws<JsonReaderException>(() => { JArray.Parse(''[1''); }, ''Unexpected end of content while loading JArray. Path '[0]', line 1, position 2.'')", span="499-499", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ParseIncomplete()", file="BinaryConverter.cs"];
m1_308 [label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.ParseIncomplete()", span="497-497", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ParseIncomplete()", file="BinaryConverter.cs"];
m1_282 [label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.SetValueWithInvalidIndex()", span="462-462", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.SetValueWithInvalidIndex()", file="BinaryConverter.cs"];
m1_283 [label="ExceptionAssert.Throws<ArgumentException>(() =>\r\n            {\r\n                JArray a = new JArray();\r\n                a[''badvalue''] = new JValue(3);\r\n            }, @''Set JArray values with invalid key value: ''''badvalue''''. Int32 array index expected.'')", span="464-468", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.SetValueWithInvalidIndex()", file="BinaryConverter.cs"];
m1_284 [label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.SetValueWithInvalidIndex()", span="462-462", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.SetValueWithInvalidIndex()", file="BinaryConverter.cs"];
m1_289 [label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.SetValue()", span="472-472", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.SetValue()", file="BinaryConverter.cs"];
m1_290 [label="object key = 0", span="474-474", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.SetValue()", file="BinaryConverter.cs"];
m1_291 [label="JArray a = new JArray((object)null)", span="476-476", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.SetValue()", file="BinaryConverter.cs"];
m1_292 [label="a[key] = new JValue(3)", span="477-477", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.SetValue()", file="BinaryConverter.cs"];
m1_293 [label="Assert.AreEqual(3, (int)a[key])", span="479-479", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.SetValue()", file="BinaryConverter.cs"];
m1_294 [label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.SetValue()", span="472-472", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.SetValue()", file="BinaryConverter.cs"];
m1_245 [label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.ListItemFields.ListItemFields()", span="365-365", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ListItemFields.ListItemFields()", file="BinaryConverter.cs"];
m1_358 [label=j, span="", file="BinaryConverter.cs"];
m1_359 [label=j, span="", file="BinaryConverter.cs"];
m1_360 [label=j, span="", file="BinaryConverter.cs"];
m1_361 [label=j, span="", file="BinaryConverter.cs"];
m1_362 [label=j, span="", file="BinaryConverter.cs"];
m1_363 [label=j, span="", file="BinaryConverter.cs"];
m1_364 [label=j, span="", file="BinaryConverter.cs"];
m1_365 [label=j, span="", file="BinaryConverter.cs"];
m1_366 [label=json, span="", file="BinaryConverter.cs"];
m1_367 [label=json, span="", file="BinaryConverter.cs"];
m2_97 [label="Entry Newtonsoft.Json.Utilities.DateTimeUtils.ConvertDateTimeToJavaScriptTicks(System.DateTime, bool)", span="176-176", cluster="Newtonsoft.Json.Utilities.DateTimeUtils.ConvertDateTimeToJavaScriptTicks(System.DateTime, bool)", file="BsonBinaryWriter.cs"];
m2_91 [label="Entry System.IO.BinaryWriter.Write(long)", span="0-0", cluster="System.IO.BinaryWriter.Write(long)", file="BsonBinaryWriter.cs"];
m2_187 [label="Entry System.Text.Encoding.GetByteCount(string)", span="0-0", cluster="System.Text.Encoding.GetByteCount(string)", file="BsonBinaryWriter.cs"];
m2_119 [label="Entry System.IO.BinaryWriter.Write(byte[], int, int)", span="0-0", cluster="System.IO.BinaryWriter.Write(byte[], int, int)", file="BsonBinaryWriter.cs"];
m2_4 [label="Entry Newtonsoft.Json.Bson.BsonBinaryWriter.Flush()", span="49-49", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.Flush()", file="BsonBinaryWriter.cs"];
m2_5 [label="_writer.Flush()", span="51-51", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.Flush()", file="BsonBinaryWriter.cs"];
m2_6 [label="Exit Newtonsoft.Json.Bson.BsonBinaryWriter.Flush()", span="49-49", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.Flush()", file="BsonBinaryWriter.cs"];
m2_124 [label="Entry Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSizeWithLength(int, bool)", span="234-234", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSizeWithLength(int, bool)", file="BsonBinaryWriter.cs"];
m2_125 [label="int baseSize = (includeSize)\r\n                ? 5 // size bytes + terminator\r\n                : 1", span="236-238", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSizeWithLength(int, bool)", file="BsonBinaryWriter.cs"];
m2_126 [label="return baseSize + stringByteCount;", span="240-240", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSizeWithLength(int, bool)", file="BsonBinaryWriter.cs"];
m2_127 [label="Exit Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSizeWithLength(int, bool)", span="234-234", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSizeWithLength(int, bool)", file="BsonBinaryWriter.cs"];
m2_95 [label="Entry System.DateTime.ToUniversalTime()", span="0-0", cluster="System.DateTime.ToUniversalTime()", file="BsonBinaryWriter.cs"];
m2_94 [label="Entry System.IO.BinaryWriter.Write(bool)", span="0-0", cluster="System.IO.BinaryWriter.Write(bool)", file="BsonBinaryWriter.cs"];
m2_88 [label="Entry Newtonsoft.Json.Utilities.MathUtils.IntLength(ulong)", span="33-33", cluster="Newtonsoft.Json.Utilities.MathUtils.IntLength(ulong)", file="BsonBinaryWriter.cs"];
m2_108 [label="Entry Newtonsoft.Json.Bson.BsonBinaryWriter.WriteUtf8Bytes(string, int)", span="208-208", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteUtf8Bytes(string, int)", file="BsonBinaryWriter.cs"];
m2_109 [label="s != null", span="210-210", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteUtf8Bytes(string, int)", file="BsonBinaryWriter.cs"];
m2_112 [label="byteCount <= 256", span="216-216", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteUtf8Bytes(string, int)", file="BsonBinaryWriter.cs"];
m2_113 [label="Encoding.GetBytes(s, 0, s.Length, _largeByteBuffer, 0)", span="218-218", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteUtf8Bytes(string, int)", file="BsonBinaryWriter.cs"];
m2_114 [label="_writer.Write(_largeByteBuffer, 0, byteCount)", span="219-219", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteUtf8Bytes(string, int)", file="BsonBinaryWriter.cs"];
m2_115 [label="byte[] bytes = Encoding.GetBytes(s)", span="223-223", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteUtf8Bytes(string, int)", file="BsonBinaryWriter.cs"];
m2_110 [label="_largeByteBuffer == null", span="212-212", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteUtf8Bytes(string, int)", file="BsonBinaryWriter.cs"];
m2_111 [label="_largeByteBuffer = new byte[256]", span="214-214", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteUtf8Bytes(string, int)", file="BsonBinaryWriter.cs"];
m2_116 [label="_writer.Write(bytes)", span="224-224", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteUtf8Bytes(string, int)", file="BsonBinaryWriter.cs"];
m2_117 [label="Exit Newtonsoft.Json.Bson.BsonBinaryWriter.WriteUtf8Bytes(string, int)", span="208-208", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteUtf8Bytes(string, int)", file="BsonBinaryWriter.cs"];
m2_96 [label="Entry System.DateTime.ToLocalTime()", span="0-0", cluster="System.DateTime.ToLocalTime()", file="BsonBinaryWriter.cs"];
m2_89 [label="Entry System.Convert.ToInt32(object, System.IFormatProvider)", span="0-0", cluster="System.Convert.ToInt32(object, System.IFormatProvider)", file="BsonBinaryWriter.cs"];
m2_12 [label="Entry Newtonsoft.Json.Bson.BsonBinaryWriter.WriteToken(Newtonsoft.Json.Bson.BsonToken)", span="63-63", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteToken(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_13 [label="CalculateSize(t)", span="65-65", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteToken(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_14 [label="WriteTokenInternal(t)", span="66-66", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteToken(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_15 [label="Exit Newtonsoft.Json.Bson.BsonBinaryWriter.WriteToken(Newtonsoft.Json.Bson.BsonToken)", span="63-63", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteToken(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_98 [label="Entry Newtonsoft.Json.Utilities.DateTimeUtils.ConvertDateTimeToJavaScriptTicks(System.DateTime, System.TimeSpan)", span="164-164", cluster="Newtonsoft.Json.Utilities.DateTimeUtils.ConvertDateTimeToJavaScriptTicks(System.DateTime, System.TimeSpan)", file="BsonBinaryWriter.cs"];
m2_100 [label="Entry System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string, string)", span="0-0", cluster="System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string, string)", file="BsonBinaryWriter.cs"];
m2_86 [label="Entry System.IO.BinaryWriter.Write(byte)", span="0-0", cluster="System.IO.BinaryWriter.Write(byte)", file="BsonBinaryWriter.cs"];
m2_118 [label="Entry System.Text.Encoding.GetBytes(string, int, int, byte[], int)", span="0-0", cluster="System.Text.Encoding.GetBytes(string, int, int, byte[], int)", file="BsonBinaryWriter.cs"];
m2_83 [label="Entry System.IO.BinaryWriter.Write(int)", span="0-0", cluster="System.IO.BinaryWriter.Write(int)", file="BsonBinaryWriter.cs"];
m2_121 [label="Entry Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(int)", span="229-229", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(int)", file="BsonBinaryWriter.cs"];
m2_122 [label="return stringByteCount + 1;", span="231-231", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(int)", file="BsonBinaryWriter.cs"];
m2_123 [label="Exit Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(int)", span="229-229", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(int)", file="BsonBinaryWriter.cs"];
m2_101 [label="Entry Unk.nameof", span="", cluster="Unk.nameof", file="BsonBinaryWriter.cs"];
m2_90 [label="Entry System.Convert.ToInt64(object, System.IFormatProvider)", span="0-0", cluster="System.Convert.ToInt64(object, System.IFormatProvider)", file="BsonBinaryWriter.cs"];
m2_0 [label="Entry Newtonsoft.Json.Bson.BsonBinaryWriter.BsonBinaryWriter(System.IO.BinaryWriter)", span="43-43", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.BsonBinaryWriter(System.IO.BinaryWriter)", file="BsonBinaryWriter.cs"];
m2_1 [label="DateTimeKindHandling = DateTimeKind.Utc", span="45-45", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.BsonBinaryWriter(System.IO.BinaryWriter)", file="BsonBinaryWriter.cs"];
m2_2 [label="_writer = writer", span="46-46", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.BsonBinaryWriter(System.IO.BinaryWriter)", file="BsonBinaryWriter.cs"];
m2_3 [label="Exit Newtonsoft.Json.Bson.BsonBinaryWriter.BsonBinaryWriter(System.IO.BinaryWriter)", span="43-43", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.BsonBinaryWriter(System.IO.BinaryWriter)", file="BsonBinaryWriter.cs"];
m2_11 [label="Entry System.IO.BinaryWriter.Close()", span="0-0", cluster="System.IO.BinaryWriter.Close()", file="BsonBinaryWriter.cs"];
m2_7 [label="Entry System.IO.BinaryWriter.Flush()", span="0-0", cluster="System.IO.BinaryWriter.Flush()", file="BsonBinaryWriter.cs"];
m2_99 [label="Entry System.IO.BinaryWriter.Write(byte[])", span="0-0", cluster="System.IO.BinaryWriter.Write(byte[])", file="BsonBinaryWriter.cs"];
m2_8 [label="Entry Newtonsoft.Json.Bson.BsonBinaryWriter.Close()", span="54-54", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.Close()", file="BsonBinaryWriter.cs"];
m2_9 [label="_writer.Close()", span="57-57", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.Close()", file="BsonBinaryWriter.cs"];
m2_10 [label="Exit Newtonsoft.Json.Bson.BsonBinaryWriter.Close()", span="54-54", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.Close()", file="BsonBinaryWriter.cs"];
m2_16 [label="Entry Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", span="243-243", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_128 [label="t.Type", span="245-245", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_130 [label="BsonObject value = (BsonObject)t", span="249-249", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_141 [label="BsonArray value = (BsonArray)t", span="266-266", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_159 [label="BsonString value = (BsonString)t", span="290-290", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_172 [label="BsonBinary value = (BsonBinary)t", span="306-306", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_179 [label="BsonRegex value = (BsonRegex)t", span="317-317", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_185 [label="throw new ArgumentOutOfRangeException(nameof(t), ''Unexpected token when writing BSON: {0}''.FormatWith(CultureInfo.InvariantCulture, t.Type));", span="326-326", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_129 [label="BsonType.Object", span="247-247", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_140 [label="BsonType.Array", span="264-264", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_152 [label="BsonType.Integer", span="282-282", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_154 [label="BsonType.Long", span="284-284", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_156 [label="BsonType.Number", span="286-286", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_158 [label="BsonType.String", span="288-288", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_164 [label="BsonType.Boolean", span="297-297", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_166 [label="BsonType.Null", span="299-299", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_169 [label="BsonType.Date", span="302-302", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_171 [label="BsonType.Binary", span="304-304", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_176 [label="BsonType.Oid", span="313-313", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_178 [label="BsonType.Regex", span="315-315", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_131 [label="int bases = 4", span="251-251", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_132 [label=value, span="252-252", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_138 [label="value.CalculatedSize = bases", span="261-261", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_136 [label="bases += size", span="258-258", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_137 [label="bases += 1", span="260-260", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_133 [label="int size = 1", span="254-254", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_134 [label="size += CalculateSize(p.Name)", span="255-255", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_135 [label="size += CalculateSize(p.Value)", span="256-256", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_139 [label="return bases;", span="262-262", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_142 [label="int size = 4", span="268-268", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_144 [label=value, span="270-270", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_150 [label="value.CalculatedSize = size", span="278-278", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_151 [label="return value.CalculatedSize;", span="280-280", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_143 [label="ulong index = 0", span="269-269", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_145 [label="size += 1", span="272-272", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_149 [label="size += 1", span="277-277", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_146 [label="size += CalculateSize(MathUtils.IntLength(index))", span="273-273", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_148 [label="index++", span="275-275", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_147 [label="size += CalculateSize(c)", span="274-274", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_153 [label="return 4;", span="283-283", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_155 [label="return 8;", span="285-285", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_157 [label="return 8;", span="287-287", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_160 [label="string s = (string)value.Value", span="291-291", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_161 [label="value.ByteCount = (s != null) ? Encoding.GetByteCount(s) : 0", span="292-292", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_162 [label="value.CalculatedSize = CalculateSizeWithLength(value.ByteCount, value.IncludeLength)", span="293-293", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_163 [label="return value.CalculatedSize;", span="295-295", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_165 [label="return 1;", span="298-298", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_167 [label="BsonType.Undefined", span="300-300", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_168 [label="return 0;", span="301-301", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_170 [label="return 8;", span="303-303", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_173 [label="byte[] data = (byte[])value.Value", span="308-308", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_174 [label="value.CalculatedSize = 4 + 1 + data.Length", span="309-309", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_175 [label="return value.CalculatedSize;", span="311-311", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_177 [label="return 12;", span="314-314", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_180 [label="int size = 0", span="318-318", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_181 [label="size += CalculateSize(value.Pattern)", span="319-319", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_182 [label="size += CalculateSize(value.Options)", span="320-320", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_183 [label="value.CalculatedSize = size", span="321-321", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_184 [label="return value.CalculatedSize;", span="323-323", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_186 [label="Exit Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", span="243-243", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_120 [label="Entry System.Text.Encoding.GetBytes(string)", span="0-0", cluster="System.Text.Encoding.GetBytes(string)", file="BsonBinaryWriter.cs"];
m2_92 [label="Entry System.Convert.ToDouble(object, System.IFormatProvider)", span="0-0", cluster="System.Convert.ToDouble(object, System.IFormatProvider)", file="BsonBinaryWriter.cs"];
m2_93 [label="Entry System.IO.BinaryWriter.Write(double)", span="0-0", cluster="System.IO.BinaryWriter.Write(double)", file="BsonBinaryWriter.cs"];
m2_17 [label="Entry Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", span="69-69", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_18 [label="t.Type", span="71-71", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_20 [label="BsonObject value = (BsonObject)t", span="75-75", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_28 [label="BsonArray value = (BsonArray)t", span="88-88", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_38 [label="BsonValue value = (BsonValue)t", span="103-103", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_41 [label="BsonValue value = (BsonValue)t", span="109-109", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_44 [label="BsonValue value = (BsonValue)t", span="115-115", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_47 [label="BsonString value = (BsonString)t", span="121-121", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_50 [label="BsonValue value = (BsonValue)t", span="127-127", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_55 [label="BsonValue value = (BsonValue)t", span="136-136", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_68 [label="BsonBinary value = (BsonBinary)t", span="167-167", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_74 [label="BsonValue value = (BsonValue)t", span="177-177", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_78 [label="BsonRegex value = (BsonRegex)t", span="185-185", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_81 [label="throw new ArgumentOutOfRangeException(nameof(t), ''Unexpected token when writing BSON: {0}''.FormatWith(CultureInfo.InvariantCulture, t.Type));", span="192-192", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_19 [label="BsonType.Object", span="73-73", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_27 [label="BsonType.Array", span="86-86", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_37 [label="BsonType.Integer", span="101-101", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_40 [label="BsonType.Long", span="107-107", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_43 [label="BsonType.Number", span="113-113", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_46 [label="BsonType.String", span="119-119", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_49 [label="BsonType.Boolean", span="125-125", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_52 [label="BsonType.Null", span="131-131", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_54 [label="BsonType.Date", span="134-134", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_67 [label="BsonType.Binary", span="165-165", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_73 [label="BsonType.Oid", span="175-175", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_77 [label="BsonType.Regex", span="183-183", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_21 [label="_writer.Write(value.CalculatedSize)", span="76-76", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_22 [label=value, span="77-77", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_23 [label="_writer.Write((sbyte)property.Value.Type)", span="79-79", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_26 [label="_writer.Write((byte)0)", span="83-83", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_24 [label="WriteString((string)property.Name.Value, property.Name.ByteCount, null)", span="80-80", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_25 [label="WriteTokenInternal(property.Value)", span="81-81", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_29 [label="_writer.Write(value.CalculatedSize)", span="89-89", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_31 [label=value, span="91-91", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_30 [label="ulong index = 0", span="90-90", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_33 [label="WriteString(index.ToString(CultureInfo.InvariantCulture), MathUtils.IntLength(index), null)", span="94-94", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_35 [label="index++", span="96-96", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_32 [label="_writer.Write((sbyte)c.Type)", span="93-93", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_36 [label="_writer.Write((byte)0)", span="98-98", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_34 [label="WriteTokenInternal(c)", span="95-95", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_39 [label="_writer.Write(Convert.ToInt32(value.Value, CultureInfo.InvariantCulture))", span="104-104", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_42 [label="_writer.Write(Convert.ToInt64(value.Value, CultureInfo.InvariantCulture))", span="110-110", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_45 [label="_writer.Write(Convert.ToDouble(value.Value, CultureInfo.InvariantCulture))", span="116-116", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_48 [label="WriteString((string)value.Value, value.ByteCount, value.CalculatedSize - 4)", span="122-122", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_51 [label="_writer.Write((bool)value.Value)", span="128-128", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_53 [label="BsonType.Undefined", span="132-132", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_56 [label="long ticks = 0", span="138-138", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_57 [label="value.Value is DateTime", span="140-140", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_58 [label="DateTime dateTime = (DateTime)value.Value", span="142-142", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_64 [label="DateTimeOffset dateTimeOffset = (DateTimeOffset)value.Value", span="157-157", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_59 [label="DateTimeKindHandling == DateTimeKind.Utc", span="143-143", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_60 [label="dateTime = dateTime.ToUniversalTime()", span="145-145", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_62 [label="dateTime = dateTime.ToLocalTime()", span="149-149", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_63 [label="ticks = DateTimeUtils.ConvertDateTimeToJavaScriptTicks(dateTime, false)", span="152-152", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_61 [label="DateTimeKindHandling == DateTimeKind.Local", span="147-147", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_65 [label="ticks = DateTimeUtils.ConvertDateTimeToJavaScriptTicks(dateTimeOffset.UtcDateTime, dateTimeOffset.Offset)", span="158-158", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_66 [label="_writer.Write(ticks)", span="162-162", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_69 [label="byte[] data = (byte[])value.Value", span="169-169", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_71 [label="_writer.Write((byte)value.BinaryType)", span="171-171", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_70 [label="_writer.Write(data.Length)", span="170-170", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_72 [label="_writer.Write(data)", span="172-172", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_75 [label="byte[] data = (byte[])value.Value", span="179-179", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_76 [label="_writer.Write(data)", span="180-180", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_79 [label="WriteString((string)value.Pattern.Value, value.Pattern.ByteCount, null)", span="187-187", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_80 [label="WriteString((string)value.Options.Value, value.Options.ByteCount, null)", span="188-188", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_82 [label="Exit Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", span="69-69", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs"];
m2_85 [label="Entry Newtonsoft.Json.Bson.BsonBinaryWriter.WriteString(string, int, int?)", span="196-196", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteString(string, int, int?)", file="BsonBinaryWriter.cs"];
m2_103 [label="calculatedlengthPrefix != null", span="198-198", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteString(string, int, int?)", file="BsonBinaryWriter.cs"];
m2_104 [label="_writer.Write(calculatedlengthPrefix.Value)", span="200-200", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteString(string, int, int?)", color=green, community=0, file="BsonBinaryWriter.cs"];
m2_105 [label="WriteUtf8Bytes(s, byteCount)", span="203-203", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteString(string, int, int?)", file="BsonBinaryWriter.cs"];
m2_106 [label="_writer.Write((byte)0)", span="205-205", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteString(string, int, int?)", file="BsonBinaryWriter.cs"];
m2_107 [label="Exit Newtonsoft.Json.Bson.BsonBinaryWriter.WriteString(string, int, int?)", span="196-196", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteString(string, int, int?)", file="BsonBinaryWriter.cs"];
m2_87 [label="Entry ulong.ToString(System.IFormatProvider)", span="0-0", cluster="ulong.ToString(System.IFormatProvider)", file="BsonBinaryWriter.cs"];
m2_84 [label="Entry System.IO.BinaryWriter.Write(sbyte)", span="0-0", cluster="System.IO.BinaryWriter.Write(sbyte)", file="BsonBinaryWriter.cs"];
m2_188 [label="Newtonsoft.Json.Bson.BsonBinaryWriter", span="", file="BsonBinaryWriter.cs"];
m3_20 [label="JPath path = new JPath(''Blah[0].Two.Three[1].Four'')", span="75-75", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.MultiplePropertiesAndIndexers()", file="JavaScriptDateTimeConverter.cs"];
m3_29 [label="throw JsonSerializationException.Create(reader, ''Unexpected token or value when parsing date. Token: {0}, Value: {1}''.FormatWith(CultureInfo.InvariantCulture, reader.TokenType, reader.Value));", span="98-98", cluster="Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="JavaScriptDateTimeConverter.cs"];
m3_30 [label="reader.Read()", span="101-101", cluster="Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="JavaScriptDateTimeConverter.cs"];
m3_31 [label="reader.TokenType != JsonToken.Integer", span="103-103", cluster="Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="JavaScriptDateTimeConverter.cs"];
m3_69 [label="Entry Newtonsoft.Json.Tests.Linq.JPathTests.AdjacentIndexers()", span="151-151", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.AdjacentIndexers()", file="JavaScriptDateTimeConverter.cs"];
m3_71 [label="Assert.AreEqual(4, path.Parts.Count)", span="154-154", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.AdjacentIndexers()", file="JavaScriptDateTimeConverter.cs"];
m3_72 [label="Assert.AreEqual(1, path.Parts[0])", span="155-155", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.AdjacentIndexers()", file="JavaScriptDateTimeConverter.cs"];
m3_73 [label="Assert.AreEqual(0, path.Parts[1])", span="156-156", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.AdjacentIndexers()", file="JavaScriptDateTimeConverter.cs"];
m3_74 [label="Assert.AreEqual(0, path.Parts[2])", span="157-157", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.AdjacentIndexers()", file="JavaScriptDateTimeConverter.cs"];
m3_75 [label="Assert.AreEqual(int.MaxValue, path.Parts[3])", span="158-158", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.AdjacentIndexers()", file="JavaScriptDateTimeConverter.cs"];
m3_70 [label="JPath path = new JPath(''[1][0][0]['' + int.MaxValue + '']'')", span="153-153", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.AdjacentIndexers()", file="JavaScriptDateTimeConverter.cs"];
m3_76 [label="Exit Newtonsoft.Json.Tests.Linq.JPathTests.AdjacentIndexers()", span="151-151", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.AdjacentIndexers()", file="JavaScriptDateTimeConverter.cs"];
m3_146 [label="Entry Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateArrayOutOfBoundsIndxerWithError()", span="277-277", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateArrayOutOfBoundsIndxerWithError()", file="JavaScriptDateTimeConverter.cs"];
m3_147 [label="JArray a = new JArray(1, 2, 3, 4, 5)", span="279-279", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateArrayOutOfBoundsIndxerWithError()", file="JavaScriptDateTimeConverter.cs"];
m3_148 [label="ExceptionAssert.Throws<IndexOutOfRangeException>(\r\n        ''Index 1000 outside the bounds of JArray.'',\r\n        () =>\r\n        {\r\n          a.SelectToken(''[1000].Ha'', true);\r\n        })", span="281-286", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateArrayOutOfBoundsIndxerWithError()", file="JavaScriptDateTimeConverter.cs"];
m3_149 [label="Exit Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateArrayOutOfBoundsIndxerWithError()", span="277-277", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateArrayOutOfBoundsIndxerWithError()", file="JavaScriptDateTimeConverter.cs"];
m3_19 [label="Entry Newtonsoft.Json.JsonWriter.WriteStartConstructor(string)", span="439-439", cluster="Newtonsoft.Json.JsonWriter.WriteStartConstructor(string)", file="JavaScriptDateTimeConverter.cs"];
m3_21 [label="Entry Newtonsoft.Json.JsonWriter.WriteEndConstructor()", span="447-447", cluster="Newtonsoft.Json.JsonWriter.WriteEndConstructor()", file="JavaScriptDateTimeConverter.cs"];
m3_22 [label="Entry Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", span="78-78", cluster="Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="JavaScriptDateTimeConverter.cs"];
m3_23 [label="Type t = (ReflectionUtils.IsNullableType(objectType))\r\n                ? Nullable.GetUnderlyingType(objectType)\r\n                : objectType", span="81-83", cluster="Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="JavaScriptDateTimeConverter.cs", color=red, community=1];
m3_24 [label="reader.TokenType == JsonToken.Null", span="86-86", cluster="Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="JavaScriptDateTimeConverter.cs"];
m3_25 [label="!ReflectionUtils.IsNullable(objectType)", span="88-88", cluster="Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="JavaScriptDateTimeConverter.cs"];
m3_26 [label="throw JsonSerializationException.Create(reader, ''Cannot convert null value to {0}.''.FormatWith(CultureInfo.InvariantCulture, objectType));", span="90-90", cluster="Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="JavaScriptDateTimeConverter.cs"];
m3_27 [label="return null;", span="93-93", cluster="Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="JavaScriptDateTimeConverter.cs"];
m3_28 [label="reader.TokenType != JsonToken.StartConstructor || !string.Equals(reader.Value.ToString(), ''Date'', StringComparison.Ordinal)", span="96-96", cluster="Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="JavaScriptDateTimeConverter.cs"];
m3_141 [label="Entry Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateOutOfBoundsIndxer()", span="268-268", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateOutOfBoundsIndxer()", file="JavaScriptDateTimeConverter.cs"];
m3_143 [label="JToken t = a.SelectToken(''[1000].Ha'')", span="272-272", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateOutOfBoundsIndxer()", file="JavaScriptDateTimeConverter.cs"];
m3_142 [label="JArray a = new JArray(1, 2, 3, 4, 5)", span="270-270", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateOutOfBoundsIndxer()", file="JavaScriptDateTimeConverter.cs"];
m3_144 [label="Assert.IsNull(t)", span="273-273", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateOutOfBoundsIndxer()", file="JavaScriptDateTimeConverter.cs"];
m3_145 [label="Exit Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateOutOfBoundsIndxer()", span="268-268", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateOutOfBoundsIndxer()", file="JavaScriptDateTimeConverter.cs"];
m3_77 [label="Entry Newtonsoft.Json.Tests.Linq.JPathTests.MissingDotAfterIndexer()", span="162-162", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.MissingDotAfterIndexer()", file="JavaScriptDateTimeConverter.cs"];
m3_78 [label="ExceptionAssert.Throws<JsonException>(\r\n        ''Unexpected character following indexer: B'',\r\n        () =>\r\n        {\r\n          new JPath(''[1]Blah'');\r\n        })", span="164-169", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.MissingDotAfterIndexer()", file="JavaScriptDateTimeConverter.cs"];
m3_79 [label="Exit Newtonsoft.Json.Tests.Linq.JPathTests.MissingDotAfterIndexer()", span="162-162", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.MissingDotAfterIndexer()", file="JavaScriptDateTimeConverter.cs"];
m3_32 [label="Entry Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(string, System.Action)", span="121-121", cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(string, System.Action)", file="JavaScriptDateTimeConverter.cs"];
m3_33 [label="Entry lambda expression", span="90-93", cluster="lambda expression", file="JavaScriptDateTimeConverter.cs"];
m3_35 [label="Exit lambda expression", span="90-93", cluster="lambda expression", file="JavaScriptDateTimeConverter.cs"];
m3_36 [label="Entry Newtonsoft.Json.Tests.Linq.JPathTests.UnclosedIndexer()", span="97-97", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.UnclosedIndexer()", file="JavaScriptDateTimeConverter.cs"];
m3_37 [label="ExceptionAssert.Throws<JsonException>(\r\n        @''Path ended with open indexer. Expected ]'',\r\n        () =>\r\n        {\r\n          new JPath(''Blah[0'');\r\n        })", span="99-104", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.UnclosedIndexer()", file="JavaScriptDateTimeConverter.cs"];
m3_38 [label="Exit Newtonsoft.Json.Tests.Linq.JPathTests.UnclosedIndexer()", span="97-97", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.UnclosedIndexer()", file="JavaScriptDateTimeConverter.cs"];
m3_34 [label="new JPath(''Blah[[0]].Two.Three[1].Four'')", span="92-92", cluster="lambda expression", file="JavaScriptDateTimeConverter.cs"];
m3_39 [label="Entry lambda expression", span="101-104", cluster="lambda expression", file="JavaScriptDateTimeConverter.cs"];
m3_40 [label="new JPath(''Blah[0'')", span="103-103", cluster="lambda expression", file="JavaScriptDateTimeConverter.cs"];
m3_41 [label="Exit lambda expression", span="101-104", cluster="lambda expression", file="JavaScriptDateTimeConverter.cs"];
m3_91 [label="Entry Newtonsoft.Json.Linq.JProperty.JProperty(string, object)", span="192-192", cluster="Newtonsoft.Json.Linq.JProperty.JProperty(string, object)", file="JavaScriptDateTimeConverter.cs"];
m3_46 [label="Assert.AreEqual(0, path.Parts[1])", span="113-113", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.AdditionalDots()", file="JavaScriptDateTimeConverter.cs"];
m3_175 [label="Entry Newtonsoft.Json.Tests.Linq.JPathTests.PathWithConstructor()", span="325-325", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.PathWithConstructor()", file="JavaScriptDateTimeConverter.cs"];
m3_178 [label="Assert.AreEqual(1L, v.Value)", span="349-349", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.PathWithConstructor()", file="JavaScriptDateTimeConverter.cs"];
m3_177 [label="JValue v = (JValue)a.SelectToken(''[1].Property2[1][0]'')", span="348-348", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.PathWithConstructor()", file="JavaScriptDateTimeConverter.cs"];
m3_176 [label="JArray a = JArray.Parse(@''[\r\n  {\r\n    ''''Property1'''': [\r\n      1,\r\n      [\r\n        [\r\n          []\r\n        ]\r\n      ]\r\n    ]\r\n  },\r\n  {\r\n    ''''Property2'''': new Constructor1(\r\n      null,\r\n      [\r\n        1\r\n      ]\r\n    )\r\n  }\r\n]'')", span="327-346", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.PathWithConstructor()", file="JavaScriptDateTimeConverter.cs"];
m3_179 [label="Exit Newtonsoft.Json.Tests.Linq.JPathTests.PathWithConstructor()", span="325-325", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.PathWithConstructor()", file="JavaScriptDateTimeConverter.cs"];
m3_94 [label="Entry Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateMissingProperty()", span="185-185", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateMissingProperty()", file="JavaScriptDateTimeConverter.cs"];
m3_96 [label="JToken t = o.SelectToken(''Missing[1]'')", span="190-190", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateMissingProperty()", file="JavaScriptDateTimeConverter.cs"];
m3_95 [label="JObject o = new JObject(\r\n        new JProperty(''Blah'', 1))", span="187-188", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateMissingProperty()", file="JavaScriptDateTimeConverter.cs"];
m3_97 [label="Assert.IsNull(t)", span="191-191", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateMissingProperty()", file="JavaScriptDateTimeConverter.cs"];
m3_98 [label="Exit Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateMissingProperty()", span="185-185", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateMissingProperty()", file="JavaScriptDateTimeConverter.cs"];
m3_15 [label="Assert.AreEqual(2, path.Parts.Count)", span="67-67", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.SinglePropertyAndIndexer()", file="JavaScriptDateTimeConverter.cs"];
m3_92 [label="Entry Newtonsoft.Json.Linq.JToken.SelectToken(string)", span="1867-1867", cluster="Newtonsoft.Json.Linq.JToken.SelectToken(string)", file="JavaScriptDateTimeConverter.cs"];
m3_90 [label="Entry Newtonsoft.Json.Linq.JObject.JObject(object)", span="113-113", cluster="Newtonsoft.Json.Linq.JObject.JObject(object)", file="JavaScriptDateTimeConverter.cs"];
m3_174 [label="Entry Newtonsoft.Json.Linq.JObject.Parse(string)", span="325-325", cluster="Newtonsoft.Json.Linq.JObject.Parse(string)", file="JavaScriptDateTimeConverter.cs"];
m3_47 [label="Assert.AreEqual(''Two'', path.Parts[2])", span="114-114", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.AdditionalDots()", file="JavaScriptDateTimeConverter.cs", color=green, community=0];
m3_5 [label="ticks = DateTimeUtils.ConvertDateTimeToJavaScriptTicks(utcDateTime)", span="50-50", cluster="Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", file="JavaScriptDateTimeConverter.cs"];
m3_57 [label="Entry Newtonsoft.Json.Tests.Linq.JPathTests.EmptyIndexer()", span="129-129", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EmptyIndexer()", file="JavaScriptDateTimeConverter.cs"];
m3_58 [label="ExceptionAssert.Throws<JsonException>(\r\n        ''Empty path indexer.'',\r\n        () =>\r\n        {\r\n          new JPath(''[]'');\r\n        })", span="131-136", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EmptyIndexer()", file="JavaScriptDateTimeConverter.cs"];
m3_59 [label="Exit Newtonsoft.Json.Tests.Linq.JPathTests.EmptyIndexer()", span="129-129", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EmptyIndexer()", file="JavaScriptDateTimeConverter.cs"];
m3_119 [label="Entry Newtonsoft.Json.Tests.Linq.JPathTests.EvaluatePropertyOnArrayWithError()", span="228-228", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluatePropertyOnArrayWithError()", file="JavaScriptDateTimeConverter.cs"];
m3_120 [label="JArray a = new JArray(1, 2, 3, 4, 5)", span="230-230", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluatePropertyOnArrayWithError()", file="JavaScriptDateTimeConverter.cs"];
m3_121 [label="ExceptionAssert.Throws<JsonException>(\r\n        @''Property 'BlahBlah' not valid on JArray.'',\r\n        () =>\r\n        {\r\n          a.SelectToken(''BlahBlah'', true);\r\n        })", span="232-237", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluatePropertyOnArrayWithError()", file="JavaScriptDateTimeConverter.cs"];
m3_122 [label="Exit Newtonsoft.Json.Tests.Linq.JPathTests.EvaluatePropertyOnArrayWithError()", span="228-228", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluatePropertyOnArrayWithError()", file="JavaScriptDateTimeConverter.cs"];
m3_99 [label="Entry Unk.IsNull", span="", cluster="Unk.IsNull", file="JavaScriptDateTimeConverter.cs"];
m3_16 [label="Assert.AreEqual(''Blah'', path.Parts[0])", span="68-68", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.SinglePropertyAndIndexer()", file="JavaScriptDateTimeConverter.cs"];
m3_6 [label="value is DateTimeOffset", span="53-53", cluster="Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", file="JavaScriptDateTimeConverter.cs"];
m3_51 [label="Exit Newtonsoft.Json.Tests.Linq.JPathTests.AdditionalDots()", span="108-108", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.AdditionalDots()", file="JavaScriptDateTimeConverter.cs"];
m3_113 [label="Entry Newtonsoft.Json.Tests.Linq.JPathTests.EvaluatePropertyOnArray()", span="219-219", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluatePropertyOnArray()", file="JavaScriptDateTimeConverter.cs"];
m3_115 [label="JToken t = a.SelectToken(''BlahBlah'')", span="223-223", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluatePropertyOnArray()", file="JavaScriptDateTimeConverter.cs"];
m3_114 [label="JArray a = new JArray(1, 2, 3, 4, 5)", span="221-221", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluatePropertyOnArray()", file="JavaScriptDateTimeConverter.cs"];
m3_116 [label="Assert.IsNull(t)", span="224-224", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluatePropertyOnArray()", file="JavaScriptDateTimeConverter.cs"];
m3_117 [label="Exit Newtonsoft.Json.Tests.Linq.JPathTests.EvaluatePropertyOnArray()", span="219-219", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluatePropertyOnArray()", file="JavaScriptDateTimeConverter.cs"];
m3_52 [label="Entry Newtonsoft.Json.Tests.Linq.JPathTests.IndexerOnly()", span="121-121", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.IndexerOnly()", file="JavaScriptDateTimeConverter.cs"];
m3_42 [label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.IsNullableType(System.Type)", span="267-267", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.IsNullableType(System.Type)", file="JavaScriptDateTimeConverter.cs"];
m3_43 [label="Entry System.Nullable.GetUnderlyingType(System.Type)", span="0-0", cluster="System.Nullable.GetUnderlyingType(System.Type)", file="JavaScriptDateTimeConverter.cs"];
m3_48 [label="Entry string.Equals(string, string, System.StringComparison)", span="0-0", cluster="string.Equals(string, string, System.StringComparison)", color=green, community=0, file="JavaScriptDateTimeConverter.cs"];
m3_49 [label="Entry string.FormatWith(System.IFormatProvider, object, object)", span="52-52", cluster="string.FormatWith(System.IFormatProvider, object, object)", color=green, community=0, file="JavaScriptDateTimeConverter.cs"];
m3_50 [label="Entry Newtonsoft.Json.JsonReader.Read()", span="409-409", cluster="Newtonsoft.Json.JsonReader.Read()", file="JavaScriptDateTimeConverter.cs"];
m3_44 [label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.IsNullable(System.Type)", span="255-255", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.IsNullable(System.Type)", file="JavaScriptDateTimeConverter.cs"];
m3_45 [label="Assert.AreEqual(''Blah'', path.Parts[0])", span="112-112", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.AdditionalDots()", file="JavaScriptDateTimeConverter.cs"];
m3_169 [label="Entry Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateLastSingleCharacterProperty()", span="316-316", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateLastSingleCharacterProperty()", file="JavaScriptDateTimeConverter.cs"];
m3_172 [label="Assert.AreEqual(''Jeff'', a2)", span="321-321", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateLastSingleCharacterProperty()", file="JavaScriptDateTimeConverter.cs"];
m3_171 [label="string a2 = (string)o2.SelectToken(''People[0].N'')", span="319-319", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateLastSingleCharacterProperty()", file="JavaScriptDateTimeConverter.cs"];
m3_170 [label="JObject o2 = JObject.Parse(''{'People':[{'N':'Jeff'}]}'')", span="318-318", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateLastSingleCharacterProperty()", file="JavaScriptDateTimeConverter.cs"];
m3_173 [label="Exit Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateLastSingleCharacterProperty()", span="316-316", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateLastSingleCharacterProperty()", file="JavaScriptDateTimeConverter.cs"];
m3_83 [label="Entry Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateSingleProperty()", span="173-173", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateSingleProperty()", file="JavaScriptDateTimeConverter.cs"];
m3_87 [label="Assert.AreEqual(JTokenType.Integer, t.Type)", span="180-180", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateSingleProperty()", file="JavaScriptDateTimeConverter.cs"];
m3_88 [label="Assert.AreEqual(1, (int)t)", span="181-181", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateSingleProperty()", file="JavaScriptDateTimeConverter.cs"];
m3_85 [label="JToken t = o.SelectToken(''Blah'')", span="178-178", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateSingleProperty()", file="JavaScriptDateTimeConverter.cs"];
m3_86 [label="Assert.IsNotNull(t)", span="179-179", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateSingleProperty()", file="JavaScriptDateTimeConverter.cs"];
m3_84 [label="JObject o = new JObject(\r\n        new JProperty(''Blah'', 1))", span="175-176", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateSingleProperty()", file="JavaScriptDateTimeConverter.cs"];
m3_89 [label="Exit Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateSingleProperty()", span="173-173", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateSingleProperty()", file="JavaScriptDateTimeConverter.cs"];
m3_150 [label="Entry lambda expression", span="283-286", cluster="lambda expression", file="JavaScriptDateTimeConverter.cs"];
m3_61 [label="new JPath(''[]'')", span="135-135", cluster="lambda expression", file="JavaScriptDateTimeConverter.cs"];
m3_67 [label="new JPath('']'')", span="146-146", cluster="lambda expression", file="JavaScriptDateTimeConverter.cs"];
m3_81 [label="new JPath(''[1]Blah'')", span="168-168", cluster="lambda expression", file="JavaScriptDateTimeConverter.cs"];
m3_60 [label="Entry lambda expression", span="133-136", cluster="lambda expression", file="JavaScriptDateTimeConverter.cs"];
m3_62 [label="Exit lambda expression", span="133-136", cluster="lambda expression", file="JavaScriptDateTimeConverter.cs"];
m3_66 [label="Entry lambda expression", span="144-147", cluster="lambda expression", file="JavaScriptDateTimeConverter.cs"];
m3_68 [label="Exit lambda expression", span="144-147", cluster="lambda expression", file="JavaScriptDateTimeConverter.cs"];
m3_80 [label="Entry lambda expression", span="166-169", cluster="lambda expression", file="JavaScriptDateTimeConverter.cs"];
m3_82 [label="Exit lambda expression", span="166-169", cluster="lambda expression", file="JavaScriptDateTimeConverter.cs"];
m3_203 [label="Entry lambda expression", span="400-400", cluster="lambda expression", file="JavaScriptDateTimeConverter.cs"];
m3_209 [label="Entry lambda expression", span="408-408", cluster="lambda expression", file="JavaScriptDateTimeConverter.cs"];
m3_206 [label="Entry lambda expression", span="404-404", cluster="lambda expression", file="JavaScriptDateTimeConverter.cs"];
m3_207 [label="(string)m.SelectToken(''Products[1].Name'')", span="404-404", cluster="lambda expression", file="JavaScriptDateTimeConverter.cs"];
m3_210 [label="(decimal)m.SelectToken(''Products[0].Price'')", span="408-408", cluster="lambda expression", file="JavaScriptDateTimeConverter.cs"];
m3_205 [label="Exit lambda expression", span="400-400", cluster="lambda expression", file="JavaScriptDateTimeConverter.cs"];
m3_204 [label="(string)s", span="400-400", cluster="lambda expression", file="JavaScriptDateTimeConverter.cs"];
m3_211 [label="Exit lambda expression", span="408-408", cluster="lambda expression", file="JavaScriptDateTimeConverter.cs"];
m3_208 [label="Exit lambda expression", span="404-404", cluster="lambda expression", file="JavaScriptDateTimeConverter.cs"];
m3_110 [label="o.SelectToken(''[1]'', true)", span="214-214", cluster="lambda expression", file="JavaScriptDateTimeConverter.cs"];
m3_139 [label="o.SelectToken(''Missing'', true)", span="263-263", cluster="lambda expression", file="JavaScriptDateTimeConverter.cs"];
m3_124 [label="a.SelectToken(''BlahBlah'', true)", span="236-236", cluster="lambda expression", file="JavaScriptDateTimeConverter.cs"];
m3_151 [label="a.SelectToken(''[1000].Ha'', true)", span="285-285", cluster="lambda expression", file="JavaScriptDateTimeConverter.cs"];
m3_109 [label="Entry lambda expression", span="212-215", cluster="lambda expression", file="JavaScriptDateTimeConverter.cs"];
m3_123 [label="Entry lambda expression", span="234-237", cluster="lambda expression", file="JavaScriptDateTimeConverter.cs"];
m3_131 [label="Entry lambda expression", span="247-250", cluster="lambda expression", file="JavaScriptDateTimeConverter.cs"];
m3_138 [label="Entry lambda expression", span="261-264", cluster="lambda expression", file="JavaScriptDateTimeConverter.cs"];
m3_111 [label="Exit lambda expression", span="212-215", cluster="lambda expression", file="JavaScriptDateTimeConverter.cs"];
m3_140 [label="Exit lambda expression", span="261-264", cluster="lambda expression", file="JavaScriptDateTimeConverter.cs"];
m3_125 [label="Exit lambda expression", span="234-237", cluster="lambda expression", file="JavaScriptDateTimeConverter.cs"];
m3_152 [label="Exit lambda expression", span="283-286", cluster="lambda expression", file="JavaScriptDateTimeConverter.cs"];
m3_132 [label="c.SelectToken(''[1]'', true)", span="249-249", cluster="lambda expression", file="JavaScriptDateTimeConverter.cs"];
m3_133 [label="Exit lambda expression", span="247-250", cluster="lambda expression", file="JavaScriptDateTimeConverter.cs"];
m3_202 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Sum<TSource>(System.Func<TSource, decimal>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Sum<TSource>(System.Func<TSource, decimal>)", file="JavaScriptDateTimeConverter.cs"];
m3_180 [label="Entry Newtonsoft.Json.Linq.JArray.Parse(string)", span="143-143", cluster="Newtonsoft.Json.Linq.JArray.Parse(string)", file="JavaScriptDateTimeConverter.cs"];
m3_105 [label="Entry Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateIndexerOnObjectWithError()", span="205-205", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateIndexerOnObjectWithError()", file="JavaScriptDateTimeConverter.cs"];
m3_106 [label="JObject o = new JObject(\r\n        new JProperty(''Blah'', 1))", span="207-208", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateIndexerOnObjectWithError()", file="JavaScriptDateTimeConverter.cs"];
m3_107 [label="ExceptionAssert.Throws<JsonException>(\r\n        @''Index 1 not valid on JObject.'',\r\n        () =>\r\n        {\r\n          o.SelectToken(''[1]'', true);\r\n        })", span="210-215", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateIndexerOnObjectWithError()", file="JavaScriptDateTimeConverter.cs"];
m3_108 [label="Exit Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateIndexerOnObjectWithError()", span="205-205", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateIndexerOnObjectWithError()", file="JavaScriptDateTimeConverter.cs"];
m3_134 [label="Entry Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateMissingPropertyWithError()", span="254-254", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateMissingPropertyWithError()", file="JavaScriptDateTimeConverter.cs"];
m3_135 [label="JObject o = new JObject(\r\n        new JProperty(''Blah'', 1))", span="256-257", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateMissingPropertyWithError()", file="JavaScriptDateTimeConverter.cs"];
m3_136 [label="ExceptionAssert.Throws<JsonException>(\r\n        ''Property 'Missing' does not exist on JObject.'',\r\n        () =>\r\n        {\r\n          o.SelectToken(''Missing'', true);\r\n        })", span="259-264", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateMissingPropertyWithError()", file="JavaScriptDateTimeConverter.cs"];
m3_137 [label="Exit Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateMissingPropertyWithError()", span="254-254", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateMissingPropertyWithError()", file="JavaScriptDateTimeConverter.cs"];
m3_126 [label="Entry Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateConstructorOutOfBoundsIndxerWithError()", span="241-241", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateConstructorOutOfBoundsIndxerWithError()", file="JavaScriptDateTimeConverter.cs"];
m3_128 [label="ExceptionAssert.Throws<IndexOutOfRangeException>(\r\n        @''Index 1 outside the bounds of JConstructor.'',\r\n        () =>\r\n        {\r\n          c.SelectToken(''[1]'', true);\r\n        })", span="245-250", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateConstructorOutOfBoundsIndxerWithError()", file="JavaScriptDateTimeConverter.cs"];
m3_127 [label="JConstructor c = new JConstructor(''Blah'')", span="243-243", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateConstructorOutOfBoundsIndxerWithError()", file="JavaScriptDateTimeConverter.cs"];
m3_129 [label="Exit Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateConstructorOutOfBoundsIndxerWithError()", span="241-241", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateConstructorOutOfBoundsIndxerWithError()", file="JavaScriptDateTimeConverter.cs"];
m3_201 [label="Entry Unk.ToList", span="", cluster="Unk.ToList", file="JavaScriptDateTimeConverter.cs"];
m3_13 [label="writer.WriteEndConstructor()", span="67-67", cluster="Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", file="JavaScriptDateTimeConverter.cs"];
m3_17 [label="Entry System.DateTimeOffset.ToUniversalTime()", span="0-0", cluster="System.DateTimeOffset.ToUniversalTime()", file="JavaScriptDateTimeConverter.cs"];
m3_14 [label="Exit Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", span="42-42", cluster="Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", file="JavaScriptDateTimeConverter.cs"];
m3_18 [label="Entry Newtonsoft.Json.JsonSerializationException.JsonSerializationException(string)", span="52-52", cluster="Newtonsoft.Json.JsonSerializationException.JsonSerializationException(string)", file="JavaScriptDateTimeConverter.cs"];
m3_153 [label="Entry Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateArray()", span="290-290", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateArray()", file="JavaScriptDateTimeConverter.cs"];
m3_157 [label="Assert.AreEqual(JTokenType.Integer, t.Type)", span="296-296", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateArray()", file="JavaScriptDateTimeConverter.cs"];
m3_158 [label="Assert.AreEqual(2, (int)t)", span="297-297", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateArray()", file="JavaScriptDateTimeConverter.cs"];
m3_155 [label="JToken t = a.SelectToken(''[1]'')", span="294-294", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateArray()", file="JavaScriptDateTimeConverter.cs"];
m3_156 [label="Assert.IsNotNull(t)", span="295-295", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateArray()", file="JavaScriptDateTimeConverter.cs"];
m3_154 [label="JArray a = new JArray(1, 2, 3, 4)", span="292-292", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateArray()", file="JavaScriptDateTimeConverter.cs"];
m3_159 [label="Exit Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateArray()", span="290-290", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateArray()", file="JavaScriptDateTimeConverter.cs"];
m3_0 [label="Entry Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", span="42-42", cluster="Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", file="JavaScriptDateTimeConverter.cs"];
m3_2 [label="value is DateTime", span="46-46", cluster="Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", file="JavaScriptDateTimeConverter.cs"];
m3_3 [label="DateTime dateTime = (DateTime)value", span="48-48", cluster="Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", file="JavaScriptDateTimeConverter.cs"];
m3_1 [label="long ticks", span="44-44", cluster="Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", file="JavaScriptDateTimeConverter.cs"];
m3_4 [label="DateTime utcDateTime = dateTime.ToUniversalTime()", span="49-49", cluster="Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", file="JavaScriptDateTimeConverter.cs"];
m3_54 [label="Assert.AreEqual(1, path.Parts.Count)", span="124-124", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.IndexerOnly()", file="JavaScriptDateTimeConverter.cs"];
m3_55 [label="Assert.AreEqual(111119990, path.Parts[0])", span="125-125", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.IndexerOnly()", file="JavaScriptDateTimeConverter.cs"];
m3_53 [label="JPath path = new JPath(''[111119990]'')", span="123-123", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.IndexerOnly()", file="JavaScriptDateTimeConverter.cs"];
m3_56 [label="Exit Newtonsoft.Json.Tests.Linq.JPathTests.IndexerOnly()", span="121-121", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.IndexerOnly()", file="JavaScriptDateTimeConverter.cs"];
m3_118 [label="Entry Newtonsoft.Json.Linq.JArray.JArray(params object[])", span="81-81", cluster="Newtonsoft.Json.Linq.JArray.JArray(params object[])", file="JavaScriptDateTimeConverter.cs"];
m3_7 [label="Entry Newtonsoft.Json.Tests.Linq.JPathTests.TwoProperties()", span="55-55", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.TwoProperties()", file="JavaScriptDateTimeConverter.cs"];
m3_11 [label="Assert.AreEqual(''Two'', path.Parts[1])", span="60-60", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.TwoProperties()", file="JavaScriptDateTimeConverter.cs"];
m3_12 [label="Exit Newtonsoft.Json.Tests.Linq.JPathTests.TwoProperties()", span="55-55", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.TwoProperties()", file="JavaScriptDateTimeConverter.cs"];
m3_10 [label="Assert.AreEqual(''Blah'', path.Parts[0])", span="59-59", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.TwoProperties()", file="JavaScriptDateTimeConverter.cs"];
m3_8 [label="JPath path = new JPath(''Blah.Two'')", span="57-57", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.TwoProperties()", file="JavaScriptDateTimeConverter.cs"];
m3_9 [label="Assert.AreEqual(2, path.Parts.Count)", span="58-58", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.TwoProperties()", file="JavaScriptDateTimeConverter.cs"];
m3_160 [label="Entry Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateSinglePropertyReturningArray()", span="301-301", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateSinglePropertyReturningArray()", file="JavaScriptDateTimeConverter.cs"];
m3_164 [label="Assert.AreEqual(JTokenType.Array, t.Type)", span="308-308", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateSinglePropertyReturningArray()", file="JavaScriptDateTimeConverter.cs"];
m3_166 [label="Assert.AreEqual(JTokenType.Integer, t.Type)", span="311-311", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateSinglePropertyReturningArray()", file="JavaScriptDateTimeConverter.cs"];
m3_167 [label="Assert.AreEqual(3, (int)t)", span="312-312", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateSinglePropertyReturningArray()", file="JavaScriptDateTimeConverter.cs"];
m3_162 [label="JToken t = o.SelectToken(''Blah'')", span="306-306", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateSinglePropertyReturningArray()", file="JavaScriptDateTimeConverter.cs"];
m3_163 [label="Assert.IsNotNull(t)", span="307-307", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateSinglePropertyReturningArray()", file="JavaScriptDateTimeConverter.cs"];
m3_165 [label="t = o.SelectToken(''Blah[2]'')", span="310-310", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateSinglePropertyReturningArray()", file="JavaScriptDateTimeConverter.cs"];
m3_161 [label="JObject o = new JObject(\r\n        new JProperty(''Blah'', new [] { 1, 2, 3 }))", span="303-304", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateSinglePropertyReturningArray()", file="JavaScriptDateTimeConverter.cs"];
m3_168 [label="Exit Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateSinglePropertyReturningArray()", span="301-301", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateSinglePropertyReturningArray()", file="JavaScriptDateTimeConverter.cs"];
m3_181 [label="Entry Newtonsoft.Json.Tests.Linq.JPathTests.Example()", span="354-354", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.Example()", file="JavaScriptDateTimeConverter.cs"];
m3_186 [label="Assert.AreEqual(''Acme Co'', name)", span="396-396", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.Example()", file="JavaScriptDateTimeConverter.cs"];
m3_187 [label="Assert.AreEqual(50m, productPrice)", span="397-397", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.Example()", file="JavaScriptDateTimeConverter.cs"];
m3_188 [label="Assert.AreEqual(''Elbow Grease'', productName)", span="398-398", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.Example()", file="JavaScriptDateTimeConverter.cs"];
m3_192 [label="Assert.AreEqual(2, storeNames.Count)", span="411-411", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.Example()", file="JavaScriptDateTimeConverter.cs"];
m3_193 [label="Assert.AreEqual(''Lambton Quay'', storeNames[0])", span="412-412", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.Example()", file="JavaScriptDateTimeConverter.cs"];
m3_194 [label="Assert.AreEqual(''Willis Street'', storeNames[1])", span="413-413", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.Example()", file="JavaScriptDateTimeConverter.cs"];
m3_195 [label="Assert.AreEqual(2, firstProductNames.Count)", span="414-414", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.Example()", file="JavaScriptDateTimeConverter.cs"];
m3_196 [label="Assert.AreEqual(null, firstProductNames[0])", span="415-415", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.Example()", file="JavaScriptDateTimeConverter.cs"];
m3_197 [label="Assert.AreEqual(''Headlight Fluid'', firstProductNames[1])", span="416-416", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.Example()", file="JavaScriptDateTimeConverter.cs"];
m3_198 [label="Assert.AreEqual(149.95m, totalPrice)", span="417-417", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.Example()", file="JavaScriptDateTimeConverter.cs"];
m3_183 [label="string name = (string)o.SelectToken(''Manufacturers[0].Name'')", span="387-387", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.Example()", file="JavaScriptDateTimeConverter.cs"];
m3_185 [label="string productName = (string)o.SelectToken(''Manufacturers[1].Products[0].Name'')", span="393-393", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.Example()", file="JavaScriptDateTimeConverter.cs"];
m3_184 [label="decimal productPrice = (decimal)o.SelectToken(''Manufacturers[0].Products[0].Price'')", span="390-390", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.Example()", file="JavaScriptDateTimeConverter.cs"];
m3_189 [label="IList<string> storeNames = o.SelectToken(''Stores'').Select(s => (string)s).ToList()", span="400-400", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.Example()", file="JavaScriptDateTimeConverter.cs"];
m3_191 [label="decimal totalPrice = o[''Manufacturers''].Sum(m => (decimal)m.SelectToken(''Products[0].Price''))", span="408-408", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.Example()", file="JavaScriptDateTimeConverter.cs"];
m3_190 [label="IList<string> firstProductNames = o[''Manufacturers''].Select(m => (string)m.SelectToken(''Products[1].Name'')).ToList()", span="404-404", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.Example()", file="JavaScriptDateTimeConverter.cs"];
m3_182 [label="JObject o = JObject.Parse(@''{\r\n        ''''Stores'''': [\r\n          ''''Lambton Quay'''',\r\n          ''''Willis Street''''\r\n        ],\r\n        ''''Manufacturers'''': [\r\n          {\r\n            ''''Name'''': ''''Acme Co'''',\r\n            ''''Products'''': [\r\n              {\r\n                ''''Name'''': ''''Anvil'''',\r\n                ''''Price'''': 50\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            ''''Name'''': ''''Contoso'''',\r\n            ''''Products'''': [\r\n              {\r\n                ''''Name'''': ''''Elbow Grease'''',\r\n                ''''Price'''': 99.95\r\n              },\r\n              {\r\n                ''''Name'''': ''''Headlight Fluid'''',\r\n                ''''Price'''': 4\r\n              }\r\n            ]\r\n          }\r\n        ]\r\n      }'')", span="356-385", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.Example()", file="JavaScriptDateTimeConverter.cs"];
m3_199 [label="Exit Newtonsoft.Json.Tests.Linq.JPathTests.Example()", span="354-354", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.Example()", file="JavaScriptDateTimeConverter.cs"];
m3_112 [label="Entry Newtonsoft.Json.Linq.JToken.SelectToken(string, bool)", span="1883-1883", cluster="Newtonsoft.Json.Linq.JToken.SelectToken(string, bool)", file="JavaScriptDateTimeConverter.cs"];
m3_200 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="JavaScriptDateTimeConverter.cs"];
m3_63 [label="Entry Newtonsoft.Json.Tests.Linq.JPathTests.IndexerCloseInProperty()", span="140-140", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.IndexerCloseInProperty()", file="JavaScriptDateTimeConverter.cs"];
m3_64 [label="ExceptionAssert.Throws<JsonException>(\r\n        ''Unexpected character while parsing path: ]'',\r\n        () =>\r\n        {\r\n          new JPath('']'');\r\n        })", span="142-147", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.IndexerCloseInProperty()", file="JavaScriptDateTimeConverter.cs"];
m3_65 [label="Exit Newtonsoft.Json.Tests.Linq.JPathTests.IndexerCloseInProperty()", span="140-140", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.IndexerCloseInProperty()", file="JavaScriptDateTimeConverter.cs"];
m3_130 [label="Entry Newtonsoft.Json.Linq.JConstructor.JConstructor(string)", span="110-110", cluster="Newtonsoft.Json.Linq.JConstructor.JConstructor(string)", file="JavaScriptDateTimeConverter.cs"];
m3_93 [label="Entry Unk.IsNotNull", span="", cluster="Unk.IsNotNull", file="JavaScriptDateTimeConverter.cs"];
m3_100 [label="Entry Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateIndexerOnObject()", span="195-195", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateIndexerOnObject()", file="JavaScriptDateTimeConverter.cs"];
m3_102 [label="JToken t = o.SelectToken(''[1]'')", span="200-200", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateIndexerOnObject()", file="JavaScriptDateTimeConverter.cs"];
m3_101 [label="JObject o = new JObject(\r\n        new JProperty(''Blah'', 1))", span="197-198", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateIndexerOnObject()", file="JavaScriptDateTimeConverter.cs"];
m3_103 [label="Assert.IsNull(t)", span="201-201", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateIndexerOnObject()", file="JavaScriptDateTimeConverter.cs"];
m3_104 [label="Exit Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateIndexerOnObject()", span="195-195", cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateIndexerOnObject()", file="JavaScriptDateTimeConverter.cs"];
m3_212 [label=o, span="", file="JavaScriptDateTimeConverter.cs"];
m3_215 [label=o, span="", file="JavaScriptDateTimeConverter.cs"];
m3_213 [label=a, span="", file="JavaScriptDateTimeConverter.cs"];
m3_216 [label=a, span="", file="JavaScriptDateTimeConverter.cs"];
m3_214 [label=c, span="", file="JavaScriptDateTimeConverter.cs"];
m4_4 [label="Entry Newtonsoft.Json.Serialization.JsonPropertyCollection.JsonPropertyCollection(System.Type)", span="46-46", cluster="Newtonsoft.Json.Serialization.JsonPropertyCollection.JsonPropertyCollection(System.Type)", file="JsonObjectContract.cs"];
m4_5 [label="Entry Newtonsoft.Json.Serialization.JsonObjectContract.GetUninitializedObject()", span="214-214", cluster="Newtonsoft.Json.Serialization.JsonObjectContract.GetUninitializedObject()", file="JsonObjectContract.cs"];
m4_6 [label="!JsonTypeReflector.FullyTrusted", span="217-217", cluster="Newtonsoft.Json.Serialization.JsonObjectContract.GetUninitializedObject()", file="JsonObjectContract.cs"];
m4_7 [label="throw new JsonException(''Insufficient permissions. Creating an uninitialized '{0}' type requires full trust.''.FormatWith(CultureInfo.InvariantCulture, NonNullableUnderlyingType));", span="219-219", cluster="Newtonsoft.Json.Serialization.JsonObjectContract.GetUninitializedObject()", file="JsonObjectContract.cs"];
m4_8 [label="return FormatterServices.GetUninitializedObject(NonNullableUnderlyingType);", span="222-222", cluster="Newtonsoft.Json.Serialization.JsonObjectContract.GetUninitializedObject()", file="JsonObjectContract.cs"];
m4_9 [label="Exit Newtonsoft.Json.Serialization.JsonObjectContract.GetUninitializedObject()", span="214-214", cluster="Newtonsoft.Json.Serialization.JsonObjectContract.GetUninitializedObject()", file="JsonObjectContract.cs"];
m4_0 [label="Entry Newtonsoft.Json.Serialization.JsonObjectContract.JsonObjectContract(System.Type)", span="202-202", cluster="Newtonsoft.Json.Serialization.JsonObjectContract.JsonObjectContract(System.Type)", file="JsonObjectContract.cs"];
m4_1 [label="ContractType = JsonContractType.Object", span="205-205", cluster="Newtonsoft.Json.Serialization.JsonObjectContract.JsonObjectContract(System.Type)", file="JsonObjectContract.cs"];
m4_2 [label="Properties = new JsonPropertyCollection(UnderlyingType)", span="207-207", cluster="Newtonsoft.Json.Serialization.JsonObjectContract.JsonObjectContract(System.Type)", file="JsonObjectContract.cs"];
m4_3 [label="Exit Newtonsoft.Json.Serialization.JsonObjectContract.JsonObjectContract(System.Type)", span="202-202", cluster="Newtonsoft.Json.Serialization.JsonObjectContract.JsonObjectContract(System.Type)", file="JsonObjectContract.cs"];
m4_12 [label="Entry System.Runtime.Serialization.FormatterServices.GetUninitializedObject(System.Type)", span="0-0", cluster="System.Runtime.Serialization.FormatterServices.GetUninitializedObject(System.Type)", file="JsonObjectContract.cs"];
m4_11 [label="Entry string.FormatWith(System.IFormatProvider, object)", span="47-47", cluster="string.FormatWith(System.IFormatProvider, object)", file="JsonObjectContract.cs"];
m4_13 [label="Newtonsoft.Json.Serialization.JsonObjectContract", span="", file="JsonObjectContract.cs"];
m5_97 [label="Entry Newtonsoft.Json.Utilities.DateTimeUtils.ConvertDateTimeToJavaScriptTicks(System.DateTime, bool)", span="176-176", cluster="Newtonsoft.Json.Utilities.DateTimeUtils.ConvertDateTimeToJavaScriptTicks(System.DateTime, bool)", file="JsonPosition.cs"];
m5_91 [label="Entry System.IO.BinaryWriter.Write(long)", span="0-0", cluster="System.IO.BinaryWriter.Write(long)", file="JsonPosition.cs"];
m5_187 [label="Entry System.Text.Encoding.GetByteCount(string)", span="0-0", cluster="System.Text.Encoding.GetByteCount(string)", file="JsonPosition.cs"];
m5_119 [label="Entry System.IO.BinaryWriter.Write(byte[], int, int)", span="0-0", cluster="System.IO.BinaryWriter.Write(byte[], int, int)", file="JsonPosition.cs"];
m5_4 [label="Entry Newtonsoft.Json.Bson.BsonBinaryWriter.Flush()", span="49-49", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.Flush()", file="JsonPosition.cs"];
m5_5 [label="_writer.Flush()", span="51-51", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.Flush()", file="JsonPosition.cs"];
m5_6 [label="Exit Newtonsoft.Json.Bson.BsonBinaryWriter.Flush()", span="49-49", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.Flush()", file="JsonPosition.cs"];
m5_124 [label="Entry Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSizeWithLength(int, bool)", span="234-234", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSizeWithLength(int, bool)", file="JsonPosition.cs"];
m5_125 [label="int baseSize = (includeSize)\r\n                ? 5 // size bytes + terminator\r\n                : 1", span="236-238", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSizeWithLength(int, bool)", file="JsonPosition.cs"];
m5_126 [label="return baseSize + stringByteCount;", span="240-240", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSizeWithLength(int, bool)", file="JsonPosition.cs"];
m5_127 [label="Exit Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSizeWithLength(int, bool)", span="234-234", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSizeWithLength(int, bool)", file="JsonPosition.cs"];
m5_95 [label="Entry System.DateTime.ToUniversalTime()", span="0-0", cluster="System.DateTime.ToUniversalTime()", file="JsonPosition.cs"];
m5_94 [label="Entry System.IO.BinaryWriter.Write(bool)", span="0-0", cluster="System.IO.BinaryWriter.Write(bool)", file="JsonPosition.cs"];
m5_88 [label="Entry Newtonsoft.Json.Utilities.MathUtils.IntLength(ulong)", span="33-33", cluster="Newtonsoft.Json.Utilities.MathUtils.IntLength(ulong)", file="JsonPosition.cs"];
m5_108 [label="Entry Newtonsoft.Json.Bson.BsonBinaryWriter.WriteUtf8Bytes(string, int)", span="208-208", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteUtf8Bytes(string, int)", file="JsonPosition.cs"];
m5_109 [label="s != null", span="210-210", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteUtf8Bytes(string, int)", file="JsonPosition.cs"];
m5_112 [label="byteCount <= 256", span="216-216", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteUtf8Bytes(string, int)", file="JsonPosition.cs"];
m5_113 [label="Encoding.GetBytes(s, 0, s.Length, _largeByteBuffer, 0)", span="218-218", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteUtf8Bytes(string, int)", file="JsonPosition.cs"];
m5_114 [label="_writer.Write(_largeByteBuffer, 0, byteCount)", span="219-219", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteUtf8Bytes(string, int)", file="JsonPosition.cs"];
m5_115 [label="byte[] bytes = Encoding.GetBytes(s)", span="223-223", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteUtf8Bytes(string, int)", file="JsonPosition.cs"];
m5_110 [label="_largeByteBuffer == null", span="212-212", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteUtf8Bytes(string, int)", file="JsonPosition.cs"];
m5_111 [label="_largeByteBuffer = new byte[256]", span="214-214", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteUtf8Bytes(string, int)", file="JsonPosition.cs"];
m5_116 [label="_writer.Write(bytes)", span="224-224", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteUtf8Bytes(string, int)", file="JsonPosition.cs"];
m5_117 [label="Exit Newtonsoft.Json.Bson.BsonBinaryWriter.WriteUtf8Bytes(string, int)", span="208-208", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteUtf8Bytes(string, int)", file="JsonPosition.cs"];
m5_96 [label="Entry System.DateTime.ToLocalTime()", span="0-0", cluster="System.DateTime.ToLocalTime()", file="JsonPosition.cs"];
m5_89 [label="Entry System.Convert.ToInt32(object, System.IFormatProvider)", span="0-0", cluster="System.Convert.ToInt32(object, System.IFormatProvider)", file="JsonPosition.cs"];
m5_12 [label="Entry Newtonsoft.Json.Bson.BsonBinaryWriter.WriteToken(Newtonsoft.Json.Bson.BsonToken)", span="63-63", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteToken(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_13 [label="CalculateSize(t)", span="65-65", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteToken(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_14 [label="WriteTokenInternal(t)", span="66-66", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteToken(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_15 [label="Exit Newtonsoft.Json.Bson.BsonBinaryWriter.WriteToken(Newtonsoft.Json.Bson.BsonToken)", span="63-63", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteToken(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_98 [label="Entry Newtonsoft.Json.Utilities.DateTimeUtils.ConvertDateTimeToJavaScriptTicks(System.DateTime, System.TimeSpan)", span="164-164", cluster="Newtonsoft.Json.Utilities.DateTimeUtils.ConvertDateTimeToJavaScriptTicks(System.DateTime, System.TimeSpan)", file="JsonPosition.cs"];
m5_100 [label="Entry System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string, string)", span="0-0", cluster="System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string, string)", file="JsonPosition.cs"];
m5_86 [label="Entry System.IO.BinaryWriter.Write(byte)", span="0-0", cluster="System.IO.BinaryWriter.Write(byte)", file="JsonPosition.cs"];
m5_118 [label="Entry System.Text.Encoding.GetBytes(string, int, int, byte[], int)", span="0-0", cluster="System.Text.Encoding.GetBytes(string, int, int, byte[], int)", file="JsonPosition.cs"];
m5_83 [label="Entry System.IO.BinaryWriter.Write(int)", span="0-0", cluster="System.IO.BinaryWriter.Write(int)", file="JsonPosition.cs"];
m5_121 [label="Entry Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(int)", span="229-229", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(int)", file="JsonPosition.cs"];
m5_122 [label="return stringByteCount + 1;", span="231-231", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(int)", file="JsonPosition.cs"];
m5_123 [label="Exit Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(int)", span="229-229", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(int)", file="JsonPosition.cs"];
m5_101 [label="Entry Unk.nameof", span="", cluster="Unk.nameof", file="JsonPosition.cs"];
m5_90 [label="Entry System.Convert.ToInt64(object, System.IFormatProvider)", span="0-0", cluster="System.Convert.ToInt64(object, System.IFormatProvider)", file="JsonPosition.cs"];
m5_0 [label="Entry Newtonsoft.Json.Bson.BsonBinaryWriter.BsonBinaryWriter(System.IO.BinaryWriter)", span="43-43", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.BsonBinaryWriter(System.IO.BinaryWriter)", file="JsonPosition.cs"];
m5_1 [label="DateTimeKindHandling = DateTimeKind.Utc", span="45-45", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.BsonBinaryWriter(System.IO.BinaryWriter)", file="JsonPosition.cs"];
m5_2 [label="_writer = writer", span="46-46", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.BsonBinaryWriter(System.IO.BinaryWriter)", file="JsonPosition.cs"];
m5_3 [label="Exit Newtonsoft.Json.Bson.BsonBinaryWriter.BsonBinaryWriter(System.IO.BinaryWriter)", span="43-43", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.BsonBinaryWriter(System.IO.BinaryWriter)", file="JsonPosition.cs"];
m5_11 [label="Entry System.IO.BinaryWriter.Close()", span="0-0", cluster="System.IO.BinaryWriter.Close()", file="JsonPosition.cs"];
m5_7 [label="Entry System.IO.BinaryWriter.Flush()", span="0-0", cluster="System.IO.BinaryWriter.Flush()", file="JsonPosition.cs"];
m5_99 [label="Entry System.IO.BinaryWriter.Write(byte[])", span="0-0", cluster="System.IO.BinaryWriter.Write(byte[])", file="JsonPosition.cs"];
m5_8 [label="Entry Newtonsoft.Json.Bson.BsonBinaryWriter.Close()", span="54-54", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.Close()", file="JsonPosition.cs"];
m5_9 [label="_writer.Close()", span="57-57", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.Close()", file="JsonPosition.cs"];
m5_10 [label="Exit Newtonsoft.Json.Bson.BsonBinaryWriter.Close()", span="54-54", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.Close()", file="JsonPosition.cs"];
m5_16 [label="Entry Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", span="243-243", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_128 [label="t.Type", span="245-245", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_130 [label="BsonObject value = (BsonObject)t", span="249-249", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_141 [label="BsonArray value = (BsonArray)t", span="266-266", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_159 [label="BsonString value = (BsonString)t", span="290-290", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_172 [label="BsonBinary value = (BsonBinary)t", span="306-306", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_179 [label="BsonRegex value = (BsonRegex)t", span="317-317", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_185 [label="throw new ArgumentOutOfRangeException(nameof(t), ''Unexpected token when writing BSON: {0}''.FormatWith(CultureInfo.InvariantCulture, t.Type));", span="326-326", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_129 [label="BsonType.Object", span="247-247", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_140 [label="BsonType.Array", span="264-264", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_152 [label="BsonType.Integer", span="282-282", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_154 [label="BsonType.Long", span="284-284", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_156 [label="BsonType.Number", span="286-286", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_158 [label="BsonType.String", span="288-288", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_164 [label="BsonType.Boolean", span="297-297", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_166 [label="BsonType.Null", span="299-299", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_169 [label="BsonType.Date", span="302-302", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_171 [label="BsonType.Binary", span="304-304", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_176 [label="BsonType.Oid", span="313-313", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_178 [label="BsonType.Regex", span="315-315", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_131 [label="int bases = 4", span="251-251", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_132 [label=value, span="252-252", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_138 [label="value.CalculatedSize = bases", span="261-261", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_136 [label="bases += size", span="258-258", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_137 [label="bases += 1", span="260-260", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_133 [label="int size = 1", span="254-254", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_134 [label="size += CalculateSize(p.Name)", span="255-255", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_135 [label="size += CalculateSize(p.Value)", span="256-256", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_139 [label="return bases;", span="262-262", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_142 [label="int size = 4", span="268-268", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_144 [label=value, span="270-270", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_150 [label="value.CalculatedSize = size", span="278-278", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_151 [label="return value.CalculatedSize;", span="280-280", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_143 [label="ulong index = 0", span="269-269", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_145 [label="size += 1", span="272-272", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_149 [label="size += 1", span="277-277", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_146 [label="size += CalculateSize(MathUtils.IntLength(index))", span="273-273", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_148 [label="index++", span="275-275", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_147 [label="size += CalculateSize(c)", span="274-274", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_153 [label="return 4;", span="283-283", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_155 [label="return 8;", span="285-285", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_157 [label="return 8;", span="287-287", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_160 [label="string s = (string)value.Value", span="291-291", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_161 [label="value.ByteCount = (s != null) ? Encoding.GetByteCount(s) : 0", span="292-292", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_162 [label="value.CalculatedSize = CalculateSizeWithLength(value.ByteCount, value.IncludeLength)", span="293-293", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_163 [label="return value.CalculatedSize;", span="295-295", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_165 [label="return 1;", span="298-298", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_167 [label="BsonType.Undefined", span="300-300", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_168 [label="return 0;", span="301-301", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_170 [label="return 8;", span="303-303", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_173 [label="byte[] data = (byte[])value.Value", span="308-308", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_174 [label="value.CalculatedSize = 4 + 1 + data.Length", span="309-309", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_175 [label="return value.CalculatedSize;", span="311-311", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_177 [label="return 12;", span="314-314", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_180 [label="int size = 0", span="318-318", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_181 [label="size += CalculateSize(value.Pattern)", span="319-319", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_182 [label="size += CalculateSize(value.Options)", span="320-320", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_183 [label="value.CalculatedSize = size", span="321-321", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_184 [label="return value.CalculatedSize;", span="323-323", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_186 [label="Exit Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", span="243-243", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_120 [label="Entry System.Text.Encoding.GetBytes(string)", span="0-0", cluster="System.Text.Encoding.GetBytes(string)", file="JsonPosition.cs"];
m5_92 [label="Entry System.Convert.ToDouble(object, System.IFormatProvider)", span="0-0", cluster="System.Convert.ToDouble(object, System.IFormatProvider)", file="JsonPosition.cs"];
m5_93 [label="Entry System.IO.BinaryWriter.Write(double)", span="0-0", cluster="System.IO.BinaryWriter.Write(double)", file="JsonPosition.cs"];
m5_17 [label="Entry Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", span="69-69", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_18 [label="t.Type", span="71-71", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_20 [label="BsonObject value = (BsonObject)t", span="75-75", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_28 [label="BsonArray value = (BsonArray)t", span="88-88", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_38 [label="BsonValue value = (BsonValue)t", span="103-103", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_41 [label="BsonValue value = (BsonValue)t", span="109-109", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_44 [label="BsonValue value = (BsonValue)t", span="115-115", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_47 [label="BsonString value = (BsonString)t", span="121-121", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_50 [label="BsonValue value = (BsonValue)t", span="127-127", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_55 [label="BsonValue value = (BsonValue)t", span="136-136", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_68 [label="BsonBinary value = (BsonBinary)t", span="167-167", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_74 [label="BsonValue value = (BsonValue)t", span="177-177", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_78 [label="BsonRegex value = (BsonRegex)t", span="185-185", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_81 [label="throw new ArgumentOutOfRangeException(nameof(t), ''Unexpected token when writing BSON: {0}''.FormatWith(CultureInfo.InvariantCulture, t.Type));", span="192-192", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_19 [label="BsonType.Object", span="73-73", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_27 [label="BsonType.Array", span="86-86", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_37 [label="BsonType.Integer", span="101-101", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_40 [label="BsonType.Long", span="107-107", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_43 [label="BsonType.Number", span="113-113", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_46 [label="BsonType.String", span="119-119", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_49 [label="BsonType.Boolean", span="125-125", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_52 [label="BsonType.Null", span="131-131", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_54 [label="BsonType.Date", span="134-134", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_67 [label="BsonType.Binary", span="165-165", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_73 [label="BsonType.Oid", span="175-175", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_77 [label="BsonType.Regex", span="183-183", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_21 [label="_writer.Write(value.CalculatedSize)", span="76-76", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_22 [label=value, span="77-77", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_23 [label="_writer.Write((sbyte)property.Value.Type)", span="79-79", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_26 [label="_writer.Write((byte)0)", span="83-83", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_24 [label="WriteString((string)property.Name.Value, property.Name.ByteCount, null)", span="80-80", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_25 [label="WriteTokenInternal(property.Value)", span="81-81", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_29 [label="_writer.Write(value.CalculatedSize)", span="89-89", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_31 [label=value, span="91-91", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_30 [label="ulong index = 0", span="90-90", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_33 [label="WriteString(index.ToString(CultureInfo.InvariantCulture), MathUtils.IntLength(index), null)", span="94-94", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_35 [label="index++", span="96-96", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_32 [label="_writer.Write((sbyte)c.Type)", span="93-93", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_36 [label="_writer.Write((byte)0)", span="98-98", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_34 [label="WriteTokenInternal(c)", span="95-95", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_39 [label="_writer.Write(Convert.ToInt32(value.Value, CultureInfo.InvariantCulture))", span="104-104", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_42 [label="_writer.Write(Convert.ToInt64(value.Value, CultureInfo.InvariantCulture))", span="110-110", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_45 [label="_writer.Write(Convert.ToDouble(value.Value, CultureInfo.InvariantCulture))", span="116-116", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_48 [label="WriteString((string)value.Value, value.ByteCount, value.CalculatedSize - 4)", span="122-122", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_51 [label="_writer.Write((bool)value.Value)", span="128-128", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_53 [label="BsonType.Undefined", span="132-132", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_56 [label="long ticks = 0", span="138-138", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_57 [label="value.Value is DateTime", span="140-140", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_58 [label="DateTime dateTime = (DateTime)value.Value", span="142-142", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_64 [label="DateTimeOffset dateTimeOffset = (DateTimeOffset)value.Value", span="157-157", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_59 [label="DateTimeKindHandling == DateTimeKind.Utc", span="143-143", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_60 [label="dateTime = dateTime.ToUniversalTime()", span="145-145", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_62 [label="dateTime = dateTime.ToLocalTime()", span="149-149", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_63 [label="ticks = DateTimeUtils.ConvertDateTimeToJavaScriptTicks(dateTime, false)", span="152-152", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_61 [label="DateTimeKindHandling == DateTimeKind.Local", span="147-147", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_65 [label="ticks = DateTimeUtils.ConvertDateTimeToJavaScriptTicks(dateTimeOffset.UtcDateTime, dateTimeOffset.Offset)", span="158-158", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_66 [label="_writer.Write(ticks)", span="162-162", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_69 [label="byte[] data = (byte[])value.Value", span="169-169", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_71 [label="_writer.Write((byte)value.BinaryType)", span="171-171", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_70 [label="_writer.Write(data.Length)", span="170-170", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_72 [label="_writer.Write(data)", span="172-172", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_75 [label="byte[] data = (byte[])value.Value", span="179-179", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_76 [label="_writer.Write(data)", span="180-180", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_79 [label="WriteString((string)value.Pattern.Value, value.Pattern.ByteCount, null)", span="187-187", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_80 [label="WriteString((string)value.Options.Value, value.Options.ByteCount, null)", span="188-188", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_82 [label="Exit Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", span="69-69", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs"];
m5_85 [label="Entry Newtonsoft.Json.Bson.BsonBinaryWriter.WriteString(string, int, int?)", span="196-196", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteString(string, int, int?)", file="JsonPosition.cs"];
m5_103 [label="calculatedlengthPrefix != null", span="198-198", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteString(string, int, int?)", file="JsonPosition.cs"];
m5_104 [label="_writer.Write(calculatedlengthPrefix.Value)", span="200-200", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteString(string, int, int?)", file="JsonPosition.cs"];
m5_105 [label="WriteUtf8Bytes(s, byteCount)", span="203-203", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteString(string, int, int?)", file="JsonPosition.cs"];
m5_106 [label="_writer.Write((byte)0)", span="205-205", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteString(string, int, int?)", file="JsonPosition.cs"];
m5_107 [label="Exit Newtonsoft.Json.Bson.BsonBinaryWriter.WriteString(string, int, int?)", span="196-196", cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteString(string, int, int?)", file="JsonPosition.cs"];
m5_87 [label="Entry ulong.ToString(System.IFormatProvider)", span="0-0", cluster="ulong.ToString(System.IFormatProvider)", file="JsonPosition.cs"];
m5_84 [label="Entry System.IO.BinaryWriter.Write(sbyte)", span="0-0", cluster="System.IO.BinaryWriter.Write(sbyte)", file="JsonPosition.cs"];
m5_188 [label="Newtonsoft.Json.Bson.BsonBinaryWriter", span="", file="JsonPosition.cs"];
m6_9 [label="Entry Newtonsoft.Json.JsonConvert.WriteDateTimeOffset(System.IO.TextWriter, System.TimeSpan, Newtonsoft.Json.DateFormatHandling)", span="234-234", cluster="Newtonsoft.Json.JsonConvert.WriteDateTimeOffset(System.IO.TextWriter, System.TimeSpan, Newtonsoft.Json.DateFormatHandling)", file="JsonReader.cs"];
m6_44 [label="Entry string.Format(string, object, object)", span="0-0", cluster="string.Format(string, object, object)", file="JsonReader.cs"];
m6_10 [label="Entry System.IO.TextWriter.Flush()", span="0-0", cluster="System.IO.TextWriter.Flush()", file="JsonReader.cs"];
m6_43 [label="Entry System.Exception.GetType()", span="0-0", cluster="System.Exception.GetType()", file="JsonReader.cs"];
m6_0 [label="Entry Newtonsoft.Json.Tests.TestFixtureBase.GetOffset(System.DateTime, Newtonsoft.Json.DateFormatHandling)", span="55-55", cluster="Newtonsoft.Json.Tests.TestFixtureBase.GetOffset(System.DateTime, Newtonsoft.Json.DateFormatHandling)", file="JsonReader.cs"];
m6_1 [label="StringWriter sw = new StringWriter()", span="57-57", cluster="Newtonsoft.Json.Tests.TestFixtureBase.GetOffset(System.DateTime, Newtonsoft.Json.DateFormatHandling)", file="JsonReader.cs"];
m6_2 [label="JsonConvert.WriteDateTimeOffset(sw, DateTime.SpecifyKind(d, DateTimeKind.Local).GetUtcOffset(), dateFormatHandling)", span="58-58", cluster="Newtonsoft.Json.Tests.TestFixtureBase.GetOffset(System.DateTime, Newtonsoft.Json.DateFormatHandling)", file="JsonReader.cs"];
m6_3 [label="sw.Flush()", span="59-59", cluster="Newtonsoft.Json.Tests.TestFixtureBase.GetOffset(System.DateTime, Newtonsoft.Json.DateFormatHandling)", file="JsonReader.cs"];
m6_4 [label="return sw.ToString();", span="61-61", cluster="Newtonsoft.Json.Tests.TestFixtureBase.GetOffset(System.DateTime, Newtonsoft.Json.DateFormatHandling)", file="JsonReader.cs"];
m6_5 [label="Exit Newtonsoft.Json.Tests.TestFixtureBase.GetOffset(System.DateTime, Newtonsoft.Json.DateFormatHandling)", span="55-55", cluster="Newtonsoft.Json.Tests.TestFixtureBase.GetOffset(System.DateTime, Newtonsoft.Json.DateFormatHandling)", file="JsonReader.cs"];
m6_14 [label="Entry Newtonsoft.Json.Tests.TestFixtureBase.WriteEscapedJson(string)", span="73-73", cluster="Newtonsoft.Json.Tests.TestFixtureBase.WriteEscapedJson(string)", file="JsonReader.cs"];
m6_15 [label="Console.WriteLine(EscapeJson(json))", span="75-75", cluster="Newtonsoft.Json.Tests.TestFixtureBase.WriteEscapedJson(string)", file="JsonReader.cs"];
m6_16 [label="Exit Newtonsoft.Json.Tests.TestFixtureBase.WriteEscapedJson(string)", span="73-73", cluster="Newtonsoft.Json.Tests.TestFixtureBase.WriteEscapedJson(string)", file="JsonReader.cs"];
m6_39 [label="Entry System.Action.Invoke()", span="0-0", cluster="System.Action.Invoke()", file="JsonReader.cs"];
m6_18 [label="Entry System.Console.WriteLine(string)", span="0-0", cluster="System.Console.WriteLine(string)", file="JsonReader.cs"];
m6_22 [label="Entry Newtonsoft.Json.Tests.CustomAssert.IsInstanceOfType(System.Type, object)", span="96-96", cluster="Newtonsoft.Json.Tests.CustomAssert.IsInstanceOfType(System.Type, object)", file="JsonReader.cs"];
m6_23 [label="Assert.IsInstanceOf(t, instance)", span="104-104", cluster="Newtonsoft.Json.Tests.CustomAssert.IsInstanceOfType(System.Type, object)", file="JsonReader.cs"];
m6_24 [label="Exit Newtonsoft.Json.Tests.CustomAssert.IsInstanceOfType(System.Type, object)", span="96-96", cluster="Newtonsoft.Json.Tests.CustomAssert.IsInstanceOfType(System.Type, object)", file="JsonReader.cs"];
m6_7 [label="Entry System.DateTime.SpecifyKind(System.DateTime, System.DateTimeKind)", span="0-0", cluster="System.DateTime.SpecifyKind(System.DateTime, System.DateTimeKind)", file="JsonReader.cs"];
m6_26 [label="Entry Newtonsoft.Json.Tests.CustomAssert.Contains(System.Collections.IList, object)", span="108-108", cluster="Newtonsoft.Json.Tests.CustomAssert.Contains(System.Collections.IList, object)", file="JsonReader.cs"];
m6_27 [label="Assert.Contains(value, collection)", span="111-111", cluster="Newtonsoft.Json.Tests.CustomAssert.Contains(System.Collections.IList, object)", file="JsonReader.cs"];
m6_28 [label="Exit Newtonsoft.Json.Tests.CustomAssert.Contains(System.Collections.IList, object)", span="108-108", cluster="Newtonsoft.Json.Tests.CustomAssert.Contains(System.Collections.IList, object)", file="JsonReader.cs"];
m6_25 [label="Entry Unk.IsInstanceOf", span="", cluster="Unk.IsInstanceOf", file="JsonReader.cs"];
m6_12 [label="Entry Newtonsoft.Json.Tests.TestFixtureBase.TestSetup()", span="66-66", cluster="Newtonsoft.Json.Tests.TestFixtureBase.TestSetup()", file="JsonReader.cs"];
m6_13 [label="Exit Newtonsoft.Json.Tests.TestFixtureBase.TestSetup()", span="66-66", cluster="Newtonsoft.Json.Tests.TestFixtureBase.TestSetup()", file="JsonReader.cs"];
m6_41 [label="Entry Unk.AreEqual", span="", cluster="Unk.AreEqual", file="JsonReader.cs"];
m6_17 [label="Entry Newtonsoft.Json.Tests.TestFixtureBase.EscapeJson(string)", span="78-78", cluster="Newtonsoft.Json.Tests.TestFixtureBase.EscapeJson(string)", file="JsonReader.cs"];
m6_19 [label="return @''@'''''' + json.Replace(@'''''''', @'''''''''''') + @'''''''';", span="80-80", cluster="Newtonsoft.Json.Tests.TestFixtureBase.EscapeJson(string)", file="JsonReader.cs"];
m6_20 [label="Exit Newtonsoft.Json.Tests.TestFixtureBase.EscapeJson(string)", span="78-78", cluster="Newtonsoft.Json.Tests.TestFixtureBase.EscapeJson(string)", file="JsonReader.cs"];
m6_29 [label="Entry Unk.Contains", span="", cluster="Unk.Contains", file="JsonReader.cs"];
m6_6 [label="Entry System.IO.StringWriter.StringWriter()", span="0-0", cluster="System.IO.StringWriter.StringWriter()", file="JsonReader.cs"];
m6_8 [label="Entry System.DateTime.GetUtcOffset()", span="40-40", cluster="System.DateTime.GetUtcOffset()", file="JsonReader.cs"];
m6_40 [label="Entry Unk.Fail", span="", cluster="Unk.Fail", file="JsonReader.cs"];
m6_30 [label="Entry Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(string, System.Action)", span="121-121", cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(string, System.Action)", file="JsonReader.cs"];
m6_31 [label="action()", span="126-126", cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(string, System.Action)", file="JsonReader.cs"];
m6_34 [label="message != null", span="132-132", cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(string, System.Action)", file="JsonReader.cs"];
m6_35 [label="Assert.AreEqual(message, ex.Message, ''Unexpected exception message.'' + Environment.NewLine + ''Expected: '' + message + Environment.NewLine + ''Got: '' + ex.Message + Environment.NewLine + Environment.NewLine + ex)", span="133-133", cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(string, System.Action)", file="JsonReader.cs"];
m6_32 [label="Assert.Fail(''Exception of type {0} expected; got none exception'', typeof(TException).Name)", span="128-128", cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(string, System.Action)", file="JsonReader.cs"];
m6_33 [label=TException, span="130-130", cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(string, System.Action)", file="JsonReader.cs"];
m6_36 [label=Exception, span="135-135", cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(string, System.Action)", file="JsonReader.cs"];
m6_37 [label="throw new Exception(string.Format(''Exception of type {0} expected; got exception of type {1}.'', typeof(TException).Name, ex.GetType().Name), ex);", span="137-137", cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(string, System.Action)", file="JsonReader.cs"];
m6_38 [label="Exit Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(string, System.Action)", span="121-121", cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(string, System.Action)", file="JsonReader.cs"];
m6_21 [label="Entry string.Replace(string, string)", span="0-0", cluster="string.Replace(string, string)", file="JsonReader.cs"];
m6_42 [label="Entry System.Exception.Exception(string, System.Exception)", span="0-0", cluster="System.Exception.Exception(string, System.Exception)", file="JsonReader.cs"];
m6_11 [label="Entry System.IO.StringWriter.ToString()", span="0-0", cluster="System.IO.StringWriter.ToString()", file="JsonReader.cs"];
m6_45 [label="Newtonsoft.Json.Tests.TestFixtureBase", span="", file="JsonReader.cs"];
m7_217 [label="Entry Newtonsoft.Json.Schema.JsonSchemaModelBuilder.Build(Newtonsoft.Json.Schema.JsonSchema)", span="43-43", cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.Build(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs"];
m7_71 [label="_writer.WritePropertyName(JsonSchemaConstants.ExtendsPropertyName)", span="149-149", cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteSchema(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs"];
m7_72 [label="schema.Extends.Count == 1", span="150-150", cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteSchema(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs"];
m7_76 [label="ReferenceOrWriteSchema(jsonSchema)", span="159-159", cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteSchema(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs"];
m7_77 [label="_writer.WriteEndArray()", span="161-161", cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteSchema(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs"];
m7_73 [label="ReferenceOrWriteSchema(schema.Extends[0])", span="152-152", cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteSchema(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs"];
m7_74 [label="_writer.WriteStartArray()", span="156-156", cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteSchema(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs"];
m7_75 [label="schema.Extends", span="157-157", cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteSchema(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs"];
m7_78 [label="_writer.WriteEndObject()", span="164-164", cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteSchema(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs"];
m7_88 [label="return JsonSchemaType.Integer;", span="379-379", cluster="Newtonsoft.Json.JsonValidatingReader.GetCurrentNodeSchemaType()", file="JsonSchemaWriter.cs"];
m7_263 [label="Entry Newtonsoft.Json.Linq.JToken.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])", span="422-422", cluster="Newtonsoft.Json.Linq.JToken.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])", file="JsonSchemaWriter.cs"];
m7_53 [label="WritePropertyIfNotNull(_writer, JsonSchemaConstants.MaximumLengthPropertyName, schema.MaximumLength)", span="122-122", cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteSchema(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs"];
m7_262 [label="Entry Newtonsoft.Json.JsonTextWriter.JsonTextWriter(System.IO.TextWriter)", span="148-148", cluster="Newtonsoft.Json.JsonTextWriter.JsonTextWriter(System.IO.TextWriter)", file="JsonSchemaWriter.cs"];
m7_131 [label="DateTimeOffset? dateTimeOffset = _reader.ReadAsDateTimeOffset()", span="462-462", cluster="Newtonsoft.Json.JsonValidatingReader.ReadAsDateTimeOffset()", file="JsonSchemaWriter.cs"];
m7_28 [label="WritePropertyIfNotNull(_writer, JsonSchemaConstants.ReadOnlyPropertyName, schema.ReadOnly)", span="81-81", cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteSchema(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs"];
m7_413 [label="Entry Newtonsoft.Json.JsonValidatingReader.IsPropertyDefinied(Newtonsoft.Json.Schema.JsonSchemaModel, string)", span="957-957", cluster="Newtonsoft.Json.JsonValidatingReader.IsPropertyDefinied(Newtonsoft.Json.Schema.JsonSchemaModel, string)", file="JsonSchemaWriter.cs"];
m7_414 [label="schema.Properties != null && schema.Properties.ContainsKey(propertyName)", span="959-959", cluster="Newtonsoft.Json.JsonValidatingReader.IsPropertyDefinied(Newtonsoft.Json.Schema.JsonSchemaModel, string)", file="JsonSchemaWriter.cs"];
m7_416 [label="schema.PatternProperties != null", span="964-964", cluster="Newtonsoft.Json.JsonValidatingReader.IsPropertyDefinied(Newtonsoft.Json.Schema.JsonSchemaModel, string)", file="JsonSchemaWriter.cs"];
m7_417 [label="schema.PatternProperties.Keys", span="966-966", cluster="Newtonsoft.Json.JsonValidatingReader.IsPropertyDefinied(Newtonsoft.Json.Schema.JsonSchemaModel, string)", file="JsonSchemaWriter.cs"];
m7_418 [label="Regex.IsMatch(propertyName, pattern)", span="968-968", cluster="Newtonsoft.Json.JsonValidatingReader.IsPropertyDefinied(Newtonsoft.Json.Schema.JsonSchemaModel, string)", file="JsonSchemaWriter.cs"];
m7_415 [label="return true;", span="961-961", cluster="Newtonsoft.Json.JsonValidatingReader.IsPropertyDefinied(Newtonsoft.Json.Schema.JsonSchemaModel, string)", file="JsonSchemaWriter.cs"];
m7_420 [label="return false;", span="975-975", cluster="Newtonsoft.Json.JsonValidatingReader.IsPropertyDefinied(Newtonsoft.Json.Schema.JsonSchemaModel, string)", file="JsonSchemaWriter.cs"];
m7_419 [label="return true;", span="970-970", cluster="Newtonsoft.Json.JsonValidatingReader.IsPropertyDefinied(Newtonsoft.Json.Schema.JsonSchemaModel, string)", file="JsonSchemaWriter.cs"];
m7_421 [label="Exit Newtonsoft.Json.JsonValidatingReader.IsPropertyDefinied(Newtonsoft.Json.Schema.JsonSchemaModel, string)", span="957-957", cluster="Newtonsoft.Json.JsonValidatingReader.IsPropertyDefinied(Newtonsoft.Json.Schema.JsonSchemaModel, string)", file="JsonSchemaWriter.cs"];
m7_396 [label="Entry System.Math.Floor(double)", span="0-0", cluster="System.Math.Floor(double)", file="JsonSchemaWriter.cs"];
m7_357 [label="Entry System.Math.Truncate(double)", span="0-0", cluster="System.Math.Truncate(double)", file="JsonSchemaWriter.cs"];
m7_27 [label="WritePropertyIfNotNull(_writer, JsonSchemaConstants.RequiredPropertyName, schema.Required)", span="80-80", cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteSchema(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs"];
m7_36 [label="schema.AdditionalProperties != null", span="95-95", cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteSchema(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs"];
m7_37 [label="_writer.WritePropertyName(JsonSchemaConstants.AdditionalPropertiesPropertyName)", span="97-97", cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteSchema(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs"];
m7_38 [label="ReferenceOrWriteSchema(schema.AdditionalProperties)", span="98-98", cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteSchema(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs"];
m7_39 [label="!schema.AllowAdditionalItems", span="101-101", cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteSchema(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs"];
m7_422 [label="Entry System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0", cluster="System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)", file="JsonSchemaWriter.cs"];
m7_412 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", file="JsonSchemaWriter.cs"];
m7_54 [label="WritePropertyIfNotNull(_writer, JsonSchemaConstants.MinimumItemsPropertyName, schema.MinimumItems)", span="123-123", cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteSchema(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs"];
m7_134 [label="Exit Newtonsoft.Json.JsonValidatingReader.ReadAsDateTimeOffset()", span="460-460", cluster="Newtonsoft.Json.JsonValidatingReader.ReadAsDateTimeOffset()", file="JsonSchemaWriter.cs"];
m7_13 [label="Exit Newtonsoft.Json.Schema.JsonSchemaWriter.ReferenceOrWriteSchema(Newtonsoft.Json.Schema.JsonSchema)", span="52-52", cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.ReferenceOrWriteSchema(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs"];
m7_16 [label="Entry Newtonsoft.Json.JsonWriter.WritePropertyName(string)", span="456-456", cluster="Newtonsoft.Json.JsonWriter.WritePropertyName(string)", file="JsonSchemaWriter.cs"];
m7_19 [label="Entry Newtonsoft.Json.Schema.JsonSchemaWriter.WriteSchema(Newtonsoft.Json.Schema.JsonSchema)", span="67-67", cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteSchema(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs"];
m7_14 [label="Entry Newtonsoft.Json.Schema.JsonSchemaResolver.GetSchema(string)", span="66-66", cluster="Newtonsoft.Json.Schema.JsonSchemaResolver.GetSchema(string)", file="JsonSchemaWriter.cs"];
m7_15 [label="Entry Newtonsoft.Json.JsonWriter.WriteStartObject()", span="406-406", cluster="Newtonsoft.Json.JsonWriter.WriteStartObject()", file="JsonSchemaWriter.cs"];
m7_17 [label="Entry Newtonsoft.Json.JsonWriter.WriteValue(string)", span="917-917", cluster="Newtonsoft.Json.JsonWriter.WriteValue(string)", file="JsonSchemaWriter.cs"];
m7_18 [label="Entry Newtonsoft.Json.JsonWriter.WriteEndObject()", span="414-414", cluster="Newtonsoft.Json.JsonWriter.WriteEndObject()", file="JsonSchemaWriter.cs"];
m7_20 [label="ValidationUtils.ArgumentNotNull(schema, ''schema'')", span="69-69", cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteSchema(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs"];
m7_21 [label="!_resolver.LoadedSchemas.Contains(schema)", span="71-71", cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteSchema(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs"];
m7_30 [label="WritePropertyIfNotNull(_writer, JsonSchemaConstants.TransientPropertyName, schema.Transient)", span="83-83", cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteSchema(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs"];
m7_33 [label="!schema.AllowAdditionalProperties", span="88-88", cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteSchema(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs"];
m7_31 [label="schema.Type != null", span="84-84", cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteSchema(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs"];
m7_32 [label="WriteType(JsonSchemaConstants.TypePropertyName, _writer, schema.Type.Value)", span="86-86", cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteSchema(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs", color=green, community=0];
m7_34 [label="_writer.WritePropertyName(JsonSchemaConstants.AdditionalPropertiesPropertyName)", span="90-90", cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteSchema(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs"];
m7_35 [label="_writer.WriteValue(schema.AllowAdditionalProperties)", span="91-91", cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteSchema(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs"];
m7_265 [label="Entry lambda expression", span="614-614", cluster="lambda expression", file="JsonSchemaWriter.cs"];
m7_268 [label="Entry lambda expression", span="640-640", cluster="lambda expression", file="JsonSchemaWriter.cs"];
m7_271 [label="Entry lambda expression", span="645-645", cluster="lambda expression", file="JsonSchemaWriter.cs"];
m7_266 [label="s.Enum != null", span="614-614", cluster="lambda expression", file="JsonSchemaWriter.cs"];
m7_267 [label="Exit lambda expression", span="614-614", cluster="lambda expression", file="JsonSchemaWriter.cs"];
m7_269 [label="s.UniqueItems", span="640-640", cluster="lambda expression", file="JsonSchemaWriter.cs"];
m7_270 [label="Exit lambda expression", span="640-640", cluster="lambda expression", file="JsonSchemaWriter.cs"];
m7_272 [label="s.Enum != null", span="645-645", cluster="lambda expression", file="JsonSchemaWriter.cs"];
m7_273 [label="Exit lambda expression", span="645-645", cluster="lambda expression", file="JsonSchemaWriter.cs"];
m7_284 [label="Entry lambda expression", span="678-678", cluster="lambda expression", file="JsonSchemaWriter.cs"];
m7_287 [label="Entry lambda expression", span="678-678", cluster="lambda expression", file="JsonSchemaWriter.cs"];
m7_285 [label="!kv.Value", span="678-678", cluster="lambda expression", file="JsonSchemaWriter.cs"];
m7_286 [label="Exit lambda expression", span="678-678", cluster="lambda expression", file="JsonSchemaWriter.cs"];
m7_288 [label="kv.Key", span="678-678", cluster="lambda expression", file="JsonSchemaWriter.cs"];
m7_289 [label="Exit lambda expression", span="678-678", cluster="lambda expression", file="JsonSchemaWriter.cs"];
m7_135 [label="Entry Newtonsoft.Json.JsonReader.ReadAsDateTimeOffset()", span="446-446", cluster="Newtonsoft.Json.JsonReader.ReadAsDateTimeOffset()", file="JsonSchemaWriter.cs"];
m7_136 [label="Entry Newtonsoft.Json.JsonValidatingReader.Read()", span="475-475", cluster="Newtonsoft.Json.JsonValidatingReader.Read()", file="JsonSchemaWriter.cs"];
m7_63 [label="token.WriteTo(_writer)", span="134-134", cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteSchema(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs"];
m7_70 [label="schema.Extends != null && schema.Extends.Count > 0", span="147-147", cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteSchema(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs"];
m7_85 [label="JsonToken.StartArray", span="376-376", cluster="Newtonsoft.Json.JsonValidatingReader.GetCurrentNodeSchemaType()", file="JsonSchemaWriter.cs"];
m7_95 [label="JsonToken.Null", span="386-386", cluster="Newtonsoft.Json.JsonValidatingReader.GetCurrentNodeSchemaType()", file="JsonSchemaWriter.cs"];
m7_94 [label="return JsonSchemaType.Boolean;", span="385-385", cluster="Newtonsoft.Json.JsonValidatingReader.GetCurrentNodeSchemaType()", file="JsonSchemaWriter.cs"];
m7_93 [label="JsonToken.Boolean", span="384-384", cluster="Newtonsoft.Json.JsonValidatingReader.GetCurrentNodeSchemaType()", file="JsonSchemaWriter.cs"];
m7_92 [label="return JsonSchemaType.String;", span="383-383", cluster="Newtonsoft.Json.JsonValidatingReader.GetCurrentNodeSchemaType()", file="JsonSchemaWriter.cs"];
m7_91 [label="JsonToken.String", span="382-382", cluster="Newtonsoft.Json.JsonValidatingReader.GetCurrentNodeSchemaType()", file="JsonSchemaWriter.cs"];
m7_96 [label="return JsonSchemaType.Null;", span="387-387", cluster="Newtonsoft.Json.JsonValidatingReader.GetCurrentNodeSchemaType()", file="JsonSchemaWriter.cs"];
m7_90 [label="return JsonSchemaType.Float;", span="381-381", cluster="Newtonsoft.Json.JsonValidatingReader.GetCurrentNodeSchemaType()", file="JsonSchemaWriter.cs"];
m7_97 [label="return null;", span="389-389", cluster="Newtonsoft.Json.JsonValidatingReader.GetCurrentNodeSchemaType()", file="JsonSchemaWriter.cs"];
m7_46 [label="WriteSchemaDictionaryIfNotNull(_writer, JsonSchemaConstants.PatternPropertiesPropertyName, schema.PatternProperties)", span="115-115", cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteSchema(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs"];
m7_132 [label="ValidateCurrentToken()", span="464-464", cluster="Newtonsoft.Json.JsonValidatingReader.ReadAsDateTimeOffset()", file="JsonSchemaWriter.cs"];
m7_220 [label="Entry Unk.ToList", span="", cluster="Unk.ToList", file="JsonSchemaWriter.cs"];
m7_256 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource, System.Collections.Generic.IEqualityComparer<TSource>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource, System.Collections.Generic.IEqualityComparer<TSource>)", file="JsonSchemaWriter.cs"];
m7_0 [label="Entry Newtonsoft.Json.JsonValidatingReader.SchemaScope.SchemaScope(Newtonsoft.Json.Linq.JTokenType, System.Collections.Generic.IList<Newtonsoft.Json.Schema.JsonSchemaModel>)", span="83-83", cluster="Newtonsoft.Json.JsonValidatingReader.SchemaScope.SchemaScope(Newtonsoft.Json.Linq.JTokenType, System.Collections.Generic.IList<Newtonsoft.Json.Schema.JsonSchemaModel>)", file="JsonSchemaWriter.cs"];
m7_2 [label="_schemas = schemas", span="86-86", cluster="Newtonsoft.Json.JsonValidatingReader.SchemaScope.SchemaScope(Newtonsoft.Json.Linq.JTokenType, System.Collections.Generic.IList<Newtonsoft.Json.Schema.JsonSchemaModel>)", file="JsonSchemaWriter.cs", color=red, community=0];
m7_3 [label="_requiredProperties = schemas.SelectMany<JsonSchemaModel, string>(GetRequiredProperties).Distinct().ToDictionary(p => p, p => false)", span="88-88", cluster="Newtonsoft.Json.JsonValidatingReader.SchemaScope.SchemaScope(Newtonsoft.Json.Linq.JTokenType, System.Collections.Generic.IList<Newtonsoft.Json.Schema.JsonSchemaModel>)", file="JsonSchemaWriter.cs"];
m7_1 [label="_tokenType = tokenType", span="85-85", cluster="Newtonsoft.Json.JsonValidatingReader.SchemaScope.SchemaScope(Newtonsoft.Json.Linq.JTokenType, System.Collections.Generic.IList<Newtonsoft.Json.Schema.JsonSchemaModel>)", file="JsonSchemaWriter.cs"];
m7_4 [label="tokenType == JTokenType.Array && schemas.Any(s => s.UniqueItems)", span="90-90", cluster="Newtonsoft.Json.JsonValidatingReader.SchemaScope.SchemaScope(Newtonsoft.Json.Linq.JTokenType, System.Collections.Generic.IList<Newtonsoft.Json.Schema.JsonSchemaModel>)", file="JsonSchemaWriter.cs"];
m7_130 [label="Entry Newtonsoft.Json.Utilities.EnumUtils.GetFlagsValues<T>(T)", span="74-74", cluster="Newtonsoft.Json.Utilities.EnumUtils.GetFlagsValues<T>(T)", file="JsonSchemaWriter.cs"];
m7_133 [label="Entry Newtonsoft.Json.Schema.JsonSchemaBuilder.MapType(Newtonsoft.Json.Schema.JsonSchemaType)", span="489-489", cluster="Newtonsoft.Json.Schema.JsonSchemaBuilder.MapType(Newtonsoft.Json.Schema.JsonSchemaType)", file="JsonSchemaWriter.cs"];
m7_392 [label="Entry Newtonsoft.Json.JsonConvert.ToString(double)", span="293-293", cluster="Newtonsoft.Json.JsonConvert.ToString(double)", file="JsonSchemaWriter.cs"];
m7_89 [label="JsonToken.Float", span="380-380", cluster="Newtonsoft.Json.JsonValidatingReader.GetCurrentNodeSchemaType()", file="JsonSchemaWriter.cs"];
m7_10 [label="_writer.WriteValue(schema.Id)", span="58-58", cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.ReferenceOrWriteSchema(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs"];
m7_304 [label="Entry Newtonsoft.Json.JsonValidatingReader.TestType(Newtonsoft.Json.Schema.JsonSchemaModel, Newtonsoft.Json.Schema.JsonSchemaType)", span="998-998", cluster="Newtonsoft.Json.JsonValidatingReader.TestType(Newtonsoft.Json.Schema.JsonSchemaModel, Newtonsoft.Json.Schema.JsonSchemaType)", file="JsonSchemaWriter.cs"];
m7_433 [label="!JsonSchemaGenerator.HasFlag(currentSchema.Type, currentType)", span="1000-1000", cluster="Newtonsoft.Json.JsonValidatingReader.TestType(Newtonsoft.Json.Schema.JsonSchemaModel, Newtonsoft.Json.Schema.JsonSchemaType)", file="JsonSchemaWriter.cs"];
m7_434 [label="RaiseError(''Invalid type. Expected {0} but got {1}.''.FormatWith(CultureInfo.InvariantCulture, currentSchema.Type, currentType), currentSchema)", span="1002-1002", cluster="Newtonsoft.Json.JsonValidatingReader.TestType(Newtonsoft.Json.Schema.JsonSchemaModel, Newtonsoft.Json.Schema.JsonSchemaType)", file="JsonSchemaWriter.cs"];
m7_436 [label="return true;", span="1006-1006", cluster="Newtonsoft.Json.JsonValidatingReader.TestType(Newtonsoft.Json.Schema.JsonSchemaModel, Newtonsoft.Json.Schema.JsonSchemaType)", file="JsonSchemaWriter.cs"];
m7_435 [label="return false;", span="1003-1003", cluster="Newtonsoft.Json.JsonValidatingReader.TestType(Newtonsoft.Json.Schema.JsonSchemaModel, Newtonsoft.Json.Schema.JsonSchemaType)", file="JsonSchemaWriter.cs"];
m7_437 [label="Exit Newtonsoft.Json.JsonValidatingReader.TestType(Newtonsoft.Json.Schema.JsonSchemaModel, Newtonsoft.Json.Schema.JsonSchemaType)", span="998-998", cluster="Newtonsoft.Json.JsonValidatingReader.TestType(Newtonsoft.Json.Schema.JsonSchemaModel, Newtonsoft.Json.Schema.JsonSchemaType)", file="JsonSchemaWriter.cs"];
m7_80 [label="Entry System.Collections.Generic.ICollection<T>.Contains(T)", span="0-0", cluster="System.Collections.Generic.ICollection<T>.Contains(T)", file="JsonSchemaWriter.cs"];
m7_105 [label="_writer.WriteEndObject()", span="200-200", cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteItems(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs"];
m7_145 [label="_model == null", span="494-494", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs"];
m7_146 [label="JsonSchemaModelBuilder builder = new JsonSchemaModelBuilder()", span="496-496", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs"];
m7_150 [label="_reader.TokenType", span="505-505", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs"];
m7_147 [label="_model = builder.Build(_schema)", span="497-497", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs"];
m7_148 [label="!JsonTokenUtils.IsStartToken(_reader.TokenType)", span="499-499", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs"];
m7_149 [label="Push(new SchemaScope(JTokenType.None, CurrentMemberSchemas))", span="501-501", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs"];
m7_151 [label="JsonToken.StartObject", span="507-507", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs"];
m7_156 [label="JsonToken.StartArray", span="513-513", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs"];
m7_161 [label="JsonToken.StartConstructor", span="519-519", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs"];
m7_165 [label="JsonToken.PropertyName", span="524-524", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs"];
m7_169 [label="JsonToken.Raw", span="531-531", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs"];
m7_171 [label="JsonToken.Integer", span="534-534", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs"];
m7_176 [label="JsonToken.Float", span="542-542", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs"];
m7_181 [label="JsonToken.String", span="550-550", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs"];
m7_186 [label="JsonToken.Boolean", span="558-558", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs"];
m7_191 [label="JsonToken.Null", span="566-566", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs"];
m7_196 [label="JsonToken.EndObject", span="574-574", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs"];
m7_201 [label="JsonToken.EndArray", span="582-582", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs"];
m7_206 [label="JsonToken.EndConstructor", span="590-590", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs"];
m7_209 [label="JsonToken.Undefined", span="594-594", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs"];
m7_213 [label="JsonToken.None", span="600-600", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs"];
m7_214 [label="throw new ArgumentOutOfRangeException();", span="604-604", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs"];
m7_152 [label="ProcessValue()", span="508-508", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs"];
m7_153 [label="IList<JsonSchemaModel> objectSchemas = CurrentMemberSchemas.Where(ValidateObject).ToList()", span="509-509", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs"];
m7_154 [label="Push(new SchemaScope(JTokenType.Object, objectSchemas))", span="510-510", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs"];
m7_155 [label="WriteToken(CurrentSchemas)", span="511-511", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs"];
m7_157 [label="ProcessValue()", span="514-514", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs"];
m7_158 [label="IList<JsonSchemaModel> arraySchemas = CurrentMemberSchemas.Where(ValidateArray).ToList()", span="515-515", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs"];
m7_159 [label="Push(new SchemaScope(JTokenType.Array, arraySchemas))", span="516-516", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs"];
m7_160 [label="WriteToken(CurrentSchemas)", span="517-517", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs"];
m7_162 [label="ProcessValue()", span="520-520", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs"];
m7_163 [label="Push(new SchemaScope(JTokenType.Constructor, null))", span="521-521", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs"];
m7_164 [label="WriteToken(CurrentSchemas)", span="522-522", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs"];
m7_166 [label="WriteToken(CurrentSchemas)", span="525-525", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs"];
m7_167 [label=CurrentSchemas, span="526-526", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs"];
m7_168 [label="ValidatePropertyName(schema)", span="528-528", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs"];
m7_170 [label="ProcessValue()", span="532-532", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs"];
m7_172 [label="ProcessValue()", span="535-535", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs"];
m7_173 [label="WriteToken(CurrentMemberSchemas)", span="536-536", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs"];
m7_174 [label=CurrentMemberSchemas, span="537-537", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs"];
m7_175 [label="ValidateInteger(schema)", span="539-539", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs"];
m7_177 [label="ProcessValue()", span="543-543", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs"];
m7_178 [label="WriteToken(CurrentMemberSchemas)", span="544-544", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs"];
m7_179 [label=CurrentMemberSchemas, span="545-545", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs"];
m7_180 [label="ValidateFloat(schema)", span="547-547", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs"];
m7_182 [label="ProcessValue()", span="551-551", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs"];
m7_183 [label="WriteToken(CurrentMemberSchemas)", span="552-552", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs"];
m7_184 [label=CurrentMemberSchemas, span="553-553", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs"];
m7_185 [label="ValidateString(schema)", span="555-555", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs"];
m7_187 [label="ProcessValue()", span="559-559", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs"];
m7_188 [label="WriteToken(CurrentMemberSchemas)", span="560-560", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs"];
m7_189 [label=CurrentMemberSchemas, span="561-561", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs"];
m7_190 [label="ValidateBoolean(schema)", span="563-563", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs"];
m7_192 [label="ProcessValue()", span="567-567", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs"];
m7_193 [label="WriteToken(CurrentMemberSchemas)", span="568-568", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs"];
m7_194 [label=CurrentMemberSchemas, span="569-569", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs"];
m7_195 [label="ValidateNull(schema)", span="571-571", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs"];
m7_197 [label="WriteToken(CurrentSchemas)", span="575-575", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs"];
m7_198 [label=CurrentSchemas, span="576-576", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs"];
m7_199 [label="ValidateEndObject(schema)", span="578-578", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs"];
m7_200 [label="Pop()", span="580-580", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs"];
m7_202 [label="WriteToken(CurrentSchemas)", span="583-583", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs"];
m7_203 [label=CurrentSchemas, span="584-584", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs"];
m7_204 [label="ValidateEndArray(schema)", span="586-586", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs"];
m7_205 [label="Pop()", span="588-588", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs"];
m7_207 [label="WriteToken(CurrentSchemas)", span="591-591", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs"];
m7_208 [label="Pop()", span="592-592", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs"];
m7_210 [label="JsonToken.Date", span="595-595", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs"];
m7_211 [label="JsonToken.Bytes", span="596-596", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs"];
m7_212 [label="WriteToken(CurrentMemberSchemas)", span="598-598", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs"];
m7_215 [label="Exit Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", span="491-491", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs"];
m7_224 [label="Entry Newtonsoft.Json.JsonValidatingReader.ValidateFloat(Newtonsoft.Json.Schema.JsonSchemaModel)", span="867-867", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateFloat(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_370 [label="schema == null", span="869-869", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateFloat(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_372 [label="!TestType(schema, JsonSchemaType.Float)", span="874-874", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateFloat(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_374 [label="ValidateNotDisallowed(schema)", span="879-879", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateFloat(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_376 [label="schema.Maximum != null", span="883-883", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateFloat(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_377 [label="value > schema.Maximum", span="885-885", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateFloat(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_378 [label="RaiseError(''Float {0} exceeds maximum value of {1}.''.FormatWith(CultureInfo.InvariantCulture, JsonConvert.ToString(value), schema.Maximum), schema)", span="887-887", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateFloat(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_379 [label="schema.ExclusiveMaximum && value == schema.Maximum", span="889-889", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateFloat(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_380 [label="RaiseError(''Float {0} equals maximum value of {1} and exclusive maximum is true.''.FormatWith(CultureInfo.InvariantCulture, JsonConvert.ToString(value), schema.Maximum), schema)", span="891-891", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateFloat(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_381 [label="schema.Minimum != null", span="895-895", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateFloat(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_382 [label="value < schema.Minimum", span="897-897", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateFloat(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_383 [label="RaiseError(''Float {0} is less than minimum value of {1}.''.FormatWith(CultureInfo.InvariantCulture, JsonConvert.ToString(value), schema.Minimum), schema)", span="899-899", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateFloat(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_384 [label="schema.ExclusiveMinimum && value == schema.Minimum", span="901-901", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateFloat(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_385 [label="RaiseError(''Float {0} equals minimum value of {1} and exclusive minimum is true.''.FormatWith(CultureInfo.InvariantCulture, JsonConvert.ToString(value), schema.Minimum), schema)", span="903-903", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateFloat(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_386 [label="schema.DivisibleBy != null", span="907-907", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateFloat(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_387 [label="double remainder = FloatingPointRemainder(value, schema.DivisibleBy.Value)", span="909-909", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateFloat(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_389 [label="RaiseError(''Float {0} is not evenly divisible by {1}.''.FormatWith(CultureInfo.InvariantCulture, JsonConvert.ToString(value), schema.DivisibleBy), schema)", span="913-913", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateFloat(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_371 [label="return;", span="871-871", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateFloat(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_373 [label="return;", span="876-876", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateFloat(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_375 [label="double value = Convert.ToDouble(_reader.Value, CultureInfo.InvariantCulture)", span="881-881", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateFloat(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_388 [label="!IsZero(remainder)", span="911-911", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateFloat(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_390 [label="Exit Newtonsoft.Json.JsonValidatingReader.ValidateFloat(Newtonsoft.Json.Schema.JsonSchemaModel)", span="867-867", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateFloat(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_99 [label="return;", span="186-186", cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteItems(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs"];
m7_100 [label="_writer.WritePropertyName(JsonSchemaConstants.ItemsPropertyName)", span="189-189", cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteItems(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs"];
m7_101 [label="!schema.PositionalItemsValidation", span="191-191", cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteItems(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs"];
m7_102 [label="schema.Items != null && schema.Items.Count > 0", span="193-193", cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteItems(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs"];
m7_103 [label="ReferenceOrWriteSchema(schema.Items[0])", span="195-195", cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteItems(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs"];
m7_9 [label="_writer.WritePropertyName(JsonTypeReflector.RefPropertyName)", span="57-57", cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.ReferenceOrWriteSchema(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs"];
m7_124 [label=types, span="242-242", cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteType(string, Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Schema.JsonSchemaType)", file="JsonSchemaWriter.cs"];
m7_125 [label="writer.WriteValue(JsonSchemaBuilder.MapType(jsonSchemaType))", span="244-244", cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteType(string, Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Schema.JsonSchemaType)", file="JsonSchemaWriter.cs"];
m7_126 [label="writer.WriteEndArray()", span="246-246", cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteType(string, Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Schema.JsonSchemaType)", file="JsonSchemaWriter.cs"];
m7_127 [label="Exit Newtonsoft.Json.Schema.JsonSchemaWriter.WriteType(string, Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Schema.JsonSchemaType)", span="216-216", cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteType(string, Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Schema.JsonSchemaType)", file="JsonSchemaWriter.cs"];
m7_128 [label="Entry System.Enum.IsDefined(System.Type, object)", span="0-0", cluster="System.Enum.IsDefined(System.Type, object)", file="JsonSchemaWriter.cs"];
m7_283 [label="Entry string.Join(string, params string[])", span="0-0", cluster="string.Join(string, params string[])", file="JsonSchemaWriter.cs"];
m7_5 [label="IsUniqueArray = true", span="92-92", cluster="Newtonsoft.Json.JsonValidatingReader.SchemaScope.SchemaScope(Newtonsoft.Json.Linq.JTokenType, System.Collections.Generic.IList<Newtonsoft.Json.Schema.JsonSchemaModel>)", file="JsonSchemaWriter.cs"];
m7_69 [label="WriteType(JsonSchemaConstants.DisallowPropertyName, _writer, schema.Disallow.Value)", span="145-145", cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteSchema(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs", color=green, community=0];
m7_218 [label="Entry Newtonsoft.Json.Utilities.JsonTokenUtils.IsStartToken(Newtonsoft.Json.JsonToken)", span="45-45", cluster="Newtonsoft.Json.Utilities.JsonTokenUtils.IsStartToken(Newtonsoft.Json.JsonToken)", file="JsonSchemaWriter.cs"];
m7_257 [label="Entry Unk.First", span="", cluster="Unk.First", file="JsonSchemaWriter.cs"];
m7_219 [label="Entry Newtonsoft.Json.JsonValidatingReader.ProcessValue()", span="847-847", cluster="Newtonsoft.Json.JsonValidatingReader.ProcessValue()", file="JsonSchemaWriter.cs"];
m7_364 [label="_currentScope != null && _currentScope.TokenType == JTokenType.Array", span="849-849", cluster="Newtonsoft.Json.JsonValidatingReader.ProcessValue()", file="JsonSchemaWriter.cs"];
m7_365 [label="_currentScope.ArrayItemCount++", span="851-851", cluster="Newtonsoft.Json.JsonValidatingReader.ProcessValue()", file="JsonSchemaWriter.cs"];
m7_366 [label=CurrentSchemas, span="853-853", cluster="Newtonsoft.Json.JsonValidatingReader.ProcessValue()", file="JsonSchemaWriter.cs"];
m7_367 [label="currentSchema != null\r\n                        && currentSchema.PositionalItemsValidation\r\n                        && !currentSchema.AllowAdditionalItems\r\n                        && (currentSchema.Items == null || _currentScope.ArrayItemCount - 1 >= currentSchema.Items.Count)", span="856-859", cluster="Newtonsoft.Json.JsonValidatingReader.ProcessValue()", file="JsonSchemaWriter.cs"];
m7_368 [label="RaiseError(''Index {0} has not been defined and the schema does not allow additional items.''.FormatWith(CultureInfo.InvariantCulture, _currentScope.ArrayItemCount), currentSchema)", span="861-861", cluster="Newtonsoft.Json.JsonValidatingReader.ProcessValue()", file="JsonSchemaWriter.cs"];
m7_369 [label="Exit Newtonsoft.Json.JsonValidatingReader.ProcessValue()", span="847-847", cluster="Newtonsoft.Json.JsonValidatingReader.ProcessValue()", file="JsonSchemaWriter.cs"];
m7_118 [label="return;", span="230-230", cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteType(string, Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Schema.JsonSchemaType)", file="JsonSchemaWriter.cs"];
m7_119 [label="writer.WritePropertyName(propertyName)", span="233-233", cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteType(string, Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Schema.JsonSchemaType)", file="JsonSchemaWriter.cs"];
m7_120 [label="types.Count == 1", span="235-235", cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteType(string, Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Schema.JsonSchemaType)", file="JsonSchemaWriter.cs"];
m7_121 [label="writer.WriteValue(JsonSchemaBuilder.MapType(types[0]))", span="237-237", cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteType(string, Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Schema.JsonSchemaType)", file="JsonSchemaWriter.cs"];
m7_122 [label="return;", span="238-238", cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteType(string, Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Schema.JsonSchemaType)", file="JsonSchemaWriter.cs"];
m7_81 [label="Entry System.Collections.Generic.ICollection<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.ICollection<T>.Add(T)", file="JsonSchemaWriter.cs"];
m7_259 [label="Entry System.Collections.Generic.ICollection<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.ICollection<T>.Add(T)", file="JsonSchemaWriter.cs"];
m7_361 [label="Entry System.Convert.ToInt64(object, System.IFormatProvider)", span="0-0", cluster="System.Convert.ToInt64(object, System.IFormatProvider)", file="JsonSchemaWriter.cs"];
m7_83 [label="JsonToken.StartObject", span="374-374", cluster="Newtonsoft.Json.JsonValidatingReader.GetCurrentNodeSchemaType()", file="JsonSchemaWriter.cs"];
m7_113 [label="decimal? d = _reader.ReadAsDecimal()", span="425-425", cluster="Newtonsoft.Json.JsonValidatingReader.ReadAsDecimal()", file="JsonSchemaWriter.cs"];
m7_114 [label="ValidateCurrentToken()", span="427-427", cluster="Newtonsoft.Json.JsonValidatingReader.ReadAsDecimal()", file="JsonSchemaWriter.cs"];
m7_115 [label="return d;", span="428-428", cluster="Newtonsoft.Json.JsonValidatingReader.ReadAsDecimal()", file="JsonSchemaWriter.cs"];
m7_116 [label="Exit Newtonsoft.Json.JsonValidatingReader.ReadAsDecimal()", span="423-423", cluster="Newtonsoft.Json.JsonValidatingReader.ReadAsDecimal()", file="JsonSchemaWriter.cs"];
m7_123 [label="Entry Newtonsoft.Json.JsonReader.ReadAsString()", span="421-421", cluster="Newtonsoft.Json.JsonReader.ReadAsString()", file="JsonSchemaWriter.cs"];
m7_117 [label="Entry Newtonsoft.Json.JsonReader.ReadAsDecimal()", span="433-433", cluster="Newtonsoft.Json.JsonReader.ReadAsDecimal()", file="JsonSchemaWriter.cs"];
m7_253 [label="Entry Newtonsoft.Json.Utilities.JsonTokenUtils.IsEndToken(Newtonsoft.Json.JsonToken)", span="32-32", cluster="Newtonsoft.Json.Utilities.JsonTokenUtils.IsEndToken(Newtonsoft.Json.JsonToken)", file="JsonSchemaWriter.cs"];
m7_106 [label="return;", span="202-202", cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteItems(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs"];
m7_107 [label="_writer.WriteStartArray()", span="205-205", cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteItems(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs"];
m7_108 [label="schema.Items != null", span="206-206", cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteItems(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs"];
m7_109 [label="schema.Items", span="208-208", cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteItems(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs"];
m7_110 [label="ReferenceOrWriteSchema(itemSchema)", span="210-210", cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteItems(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs"];
m7_6 [label="UniqueArrayItems = new List<JToken>()", span="93-93", cluster="Newtonsoft.Json.JsonValidatingReader.SchemaScope.SchemaScope(Newtonsoft.Json.Linq.JTokenType, System.Collections.Generic.IList<Newtonsoft.Json.Schema.JsonSchemaModel>)", file="JsonSchemaWriter.cs"];
m7_7 [label="Exit Newtonsoft.Json.JsonValidatingReader.SchemaScope.SchemaScope(Newtonsoft.Json.Linq.JTokenType, System.Collections.Generic.IList<Newtonsoft.Json.Schema.JsonSchemaModel>)", span="83-83", cluster="Newtonsoft.Json.JsonValidatingReader.SchemaScope.SchemaScope(Newtonsoft.Json.Linq.JTokenType, System.Collections.Generic.IList<Newtonsoft.Json.Schema.JsonSchemaModel>)", file="JsonSchemaWriter.cs"];
m7_8 [label="Entry System.Collections.Generic.IEnumerable<TSource>.SelectMany<TSource, TResult>(System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.SelectMany<TSource, TResult>(System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>)", file="JsonSchemaWriter.cs"];
m7_11 [label="Entry Unk.Any", span="", cluster="Unk.Any", file="JsonSchemaWriter.cs"];
m7_12 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="JsonSchemaWriter.cs"];
m7_230 [label="Entry System.ArgumentOutOfRangeException.ArgumentOutOfRangeException()", span="0-0", cluster="System.ArgumentOutOfRangeException.ArgumentOutOfRangeException()", file="JsonSchemaWriter.cs"];
m7_55 [label="WritePropertyIfNotNull(_writer, JsonSchemaConstants.MaximumItemsPropertyName, schema.MaximumItems)", span="124-124", cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteSchema(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs"];
m7_56 [label="WritePropertyIfNotNull(_writer, JsonSchemaConstants.DivisibleByPropertyName, schema.DivisibleBy)", span="125-125", cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteSchema(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs"];
m7_57 [label="WritePropertyIfNotNull(_writer, JsonSchemaConstants.FormatPropertyName, schema.Format)", span="126-126", cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteSchema(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs"];
m7_59 [label="schema.Enum != null", span="128-128", cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteSchema(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs"];
m7_60 [label="_writer.WritePropertyName(JsonSchemaConstants.EnumPropertyName)", span="130-130", cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteSchema(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs"];
m7_58 [label="WritePropertyIfNotNull(_writer, JsonSchemaConstants.PatternPropertyName, schema.Pattern)", span="127-127", cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteSchema(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs"];
m7_61 [label="_writer.WriteStartArray()", span="131-131", cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteSchema(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs"];
m7_223 [label="Entry Newtonsoft.Json.JsonValidatingReader.ValidateInteger(Newtonsoft.Json.Schema.JsonSchemaModel)", span="775-775", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateInteger(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_328 [label="schema == null", span="777-777", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateInteger(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_330 [label="!TestType(schema, JsonSchemaType.Integer)", span="782-782", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateInteger(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_332 [label="ValidateNotDisallowed(schema)", span="787-787", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateInteger(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_334 [label="schema.Maximum != null", span="791-791", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateInteger(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_335 [label="JValue.Compare(JTokenType.Integer, value, schema.Maximum) > 0", span="793-793", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateInteger(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_336 [label="RaiseError(''Integer {0} exceeds maximum value of {1}.''.FormatWith(CultureInfo.InvariantCulture, value, schema.Maximum), schema)", span="795-795", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateInteger(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_337 [label="schema.ExclusiveMaximum && JValue.Compare(JTokenType.Integer, value, schema.Maximum) == 0", span="797-797", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateInteger(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_338 [label="RaiseError(''Integer {0} equals maximum value of {1} and exclusive maximum is true.''.FormatWith(CultureInfo.InvariantCulture, value, schema.Maximum), schema)", span="799-799", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateInteger(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_339 [label="schema.Minimum != null", span="803-803", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateInteger(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_340 [label="JValue.Compare(JTokenType.Integer, value, schema.Minimum) < 0", span="805-805", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateInteger(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_341 [label="RaiseError(''Integer {0} is less than minimum value of {1}.''.FormatWith(CultureInfo.InvariantCulture, value, schema.Minimum), schema)", span="807-807", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateInteger(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_342 [label="schema.ExclusiveMinimum && JValue.Compare(JTokenType.Integer, value, schema.Minimum) == 0", span="809-809", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateInteger(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_343 [label="RaiseError(''Integer {0} equals minimum value of {1} and exclusive minimum is true.''.FormatWith(CultureInfo.InvariantCulture, value, schema.Minimum), schema)", span="811-811", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateInteger(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_344 [label="schema.DivisibleBy != null", span="815-815", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateInteger(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_348 [label="bool divisibleNonInteger = !Math.Abs(schema.DivisibleBy.Value - Math.Truncate(schema.DivisibleBy.Value)).Equals(0)", span="824-824", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateInteger(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_351 [label="notDivisible = i % new BigInteger(schema.DivisibleBy.Value) != 0", span="831-831", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateInteger(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_352 [label="notDivisible = !IsZero(Convert.ToInt64(value, CultureInfo.InvariantCulture) % schema.DivisibleBy.Value)", span="837-837", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateInteger(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_354 [label="RaiseError(''Integer {0} is not evenly divisible by {1}.''.FormatWith(CultureInfo.InvariantCulture, JsonConvert.ToString(value), schema.DivisibleBy), schema)", span="842-842", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateInteger(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_329 [label="return;", span="779-779", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateInteger(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_331 [label="return;", span="784-784", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateInteger(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_333 [label="object value = _reader.Value", span="789-789", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateInteger(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_346 [label="value is BigInteger", span="819-819", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateInteger(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_347 [label="BigInteger i = (BigInteger)value", span="823-823", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateInteger(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_345 [label="bool notDivisible", span="817-817", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateInteger(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_350 [label="notDivisible = i != 0", span="827-827", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateInteger(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_349 [label=divisibleNonInteger, span="825-825", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateInteger(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_353 [label=notDivisible, span="840-840", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateInteger(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_355 [label="Exit Newtonsoft.Json.JsonValidatingReader.ValidateInteger(Newtonsoft.Json.Schema.JsonSchemaModel)", span="775-775", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateInteger(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_391 [label="Entry System.Convert.ToDouble(object, System.IFormatProvider)", span="0-0", cluster="System.Convert.ToDouble(object, System.IFormatProvider)", file="JsonSchemaWriter.cs"];
m7_29 [label="WritePropertyIfNotNull(_writer, JsonSchemaConstants.HiddenPropertyName, schema.Hidden)", span="82-82", cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteSchema(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs"];
m7_428 [label="Entry Newtonsoft.Json.JsonValidatingReader.ValidateObject(Newtonsoft.Json.Schema.JsonSchemaModel)", span="988-988", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateObject(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_429 [label="schema == null", span="990-990", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateObject(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_431 [label="return (TestType(schema, JsonSchemaType.Object));", span="995-995", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateObject(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_430 [label="return true;", span="992-992", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateObject(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_432 [label="Exit Newtonsoft.Json.JsonValidatingReader.ValidateObject(Newtonsoft.Json.Schema.JsonSchemaModel)", span="988-988", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateObject(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_68 [label="Exit Newtonsoft.Json.JsonValidatingReader.JsonValidatingReader(Newtonsoft.Json.JsonReader)", span="318-318", cluster="Newtonsoft.Json.JsonValidatingReader.JsonValidatingReader(Newtonsoft.Json.JsonReader)", file="JsonSchemaWriter.cs"];
m7_22 [label="Entry Newtonsoft.Json.JsonValidatingReader.SchemaScope.GetRequiredProperties(Newtonsoft.Json.Schema.JsonSchemaModel)", span="97-97", cluster="Newtonsoft.Json.JsonValidatingReader.SchemaScope.GetRequiredProperties(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_23 [label="schema == null || schema.Properties == null", span="99-99", cluster="Newtonsoft.Json.JsonValidatingReader.SchemaScope.GetRequiredProperties(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_24 [label="return Enumerable.Empty<string>();", span="101-101", cluster="Newtonsoft.Json.JsonValidatingReader.SchemaScope.GetRequiredProperties(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_25 [label="return schema.Properties.Where(p => p.Value.Required).Select(p => p.Key);", span="104-104", cluster="Newtonsoft.Json.JsonValidatingReader.SchemaScope.GetRequiredProperties(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_26 [label="Exit Newtonsoft.Json.JsonValidatingReader.SchemaScope.GetRequiredProperties(Newtonsoft.Json.Schema.JsonSchemaModel)", span="97-97", cluster="Newtonsoft.Json.JsonValidatingReader.SchemaScope.GetRequiredProperties(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_40 [label="Entry System.Collections.Generic.Stack<T>.Push(T)", span="0-0", cluster="System.Collections.Generic.Stack<T>.Push(T)", file="JsonSchemaWriter.cs"];
m7_41 [label="Entry Newtonsoft.Json.JsonValidatingReader.Pop()", span="179-179", cluster="Newtonsoft.Json.JsonValidatingReader.Pop()", file="JsonSchemaWriter.cs"];
m7_43 [label="_currentScope = (_stack.Count != 0)\r\n                ? _stack.Peek()\r\n                : null", span="182-184", cluster="Newtonsoft.Json.JsonValidatingReader.Pop()", file="JsonSchemaWriter.cs"];
m7_44 [label="return poppedScope;", span="186-186", cluster="Newtonsoft.Json.JsonValidatingReader.Pop()", file="JsonSchemaWriter.cs"];
m7_45 [label="Exit Newtonsoft.Json.JsonValidatingReader.Pop()", span="179-179", cluster="Newtonsoft.Json.JsonValidatingReader.Pop()", file="JsonSchemaWriter.cs"];
m7_47 [label="Entry System.Collections.Generic.Stack<T>.Peek()", span="0-0", cluster="System.Collections.Generic.Stack<T>.Peek()", file="JsonSchemaWriter.cs"];
m7_48 [label="Entry Newtonsoft.Json.JsonValidatingReader.RaiseError(string, Newtonsoft.Json.Schema.JsonSchemaModel)", span="289-289", cluster="Newtonsoft.Json.JsonValidatingReader.RaiseError(string, Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_49 [label="IJsonLineInfo lineInfo = this", span="291-291", cluster="Newtonsoft.Json.JsonValidatingReader.RaiseError(string, Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_50 [label="string exceptionMessage = (lineInfo.HasLineInfo())\r\n                ? message + '' Line {0}, position {1}.''.FormatWith(CultureInfo.InvariantCulture, lineInfo.LineNumber, lineInfo.LinePosition)\r\n                : message", span="293-295", cluster="Newtonsoft.Json.JsonValidatingReader.RaiseError(string, Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_51 [label="OnValidationEvent(new JsonSchemaException(exceptionMessage, null, Path, lineInfo.LineNumber, lineInfo.LinePosition))", span="297-297", cluster="Newtonsoft.Json.JsonValidatingReader.RaiseError(string, Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_52 [label="Exit Newtonsoft.Json.JsonValidatingReader.RaiseError(string, Newtonsoft.Json.Schema.JsonSchemaModel)", span="289-289", cluster="Newtonsoft.Json.JsonValidatingReader.RaiseError(string, Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_64 [label="Entry Newtonsoft.Json.JsonValidatingReader.JsonValidatingReader(Newtonsoft.Json.JsonReader)", span="318-318", cluster="Newtonsoft.Json.JsonValidatingReader.JsonValidatingReader(Newtonsoft.Json.JsonReader)", file="JsonSchemaWriter.cs"];
m7_66 [label="_reader = reader", span="321-321", cluster="Newtonsoft.Json.JsonValidatingReader.JsonValidatingReader(Newtonsoft.Json.JsonReader)", file="JsonSchemaWriter.cs"];
m7_67 [label="_stack = new Stack<SchemaScope>()", span="322-322", cluster="Newtonsoft.Json.JsonValidatingReader.JsonValidatingReader(Newtonsoft.Json.JsonReader)", file="JsonSchemaWriter.cs"];
m7_42 [label="SchemaScope poppedScope = _stack.Pop()", span="181-181", cluster="Newtonsoft.Json.JsonValidatingReader.Pop()", file="JsonSchemaWriter.cs"];
m7_62 [label="Entry Newtonsoft.Json.Schema.ValidationEventArgs.ValidationEventArgs(Newtonsoft.Json.Schema.JsonSchemaException)", span="43-43", cluster="Newtonsoft.Json.Schema.ValidationEventArgs.ValidationEventArgs(Newtonsoft.Json.Schema.JsonSchemaException)", file="JsonSchemaWriter.cs"];
m7_65 [label="ValidationUtils.ArgumentNotNull(reader, ''reader'')", span="320-320", cluster="Newtonsoft.Json.JsonValidatingReader.JsonValidatingReader(Newtonsoft.Json.JsonReader)", file="JsonSchemaWriter.cs"];
m7_79 [label="Entry Newtonsoft.Json.JsonValidatingReader.GetCurrentNodeSchemaType()", span="370-370", cluster="Newtonsoft.Json.JsonValidatingReader.GetCurrentNodeSchemaType()", file="JsonSchemaWriter.cs"];
m7_222 [label="Entry Newtonsoft.Json.JsonValidatingReader.ValidatePropertyName(Newtonsoft.Json.Schema.JsonSchemaModel)", span="930-930", cluster="Newtonsoft.Json.JsonValidatingReader.ValidatePropertyName(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_400 [label="schema == null", span="932-932", cluster="Newtonsoft.Json.JsonValidatingReader.ValidatePropertyName(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_405 [label="!schema.AllowAdditionalProperties", span="944-944", cluster="Newtonsoft.Json.JsonValidatingReader.ValidatePropertyName(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_406 [label="bool propertyDefinied = IsPropertyDefinied(schema, propertyName)", span="946-946", cluster="Newtonsoft.Json.JsonValidatingReader.ValidatePropertyName(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_408 [label="RaiseError(''Property '{0}' has not been defined and the schema does not allow additional properties.''.FormatWith(CultureInfo.InvariantCulture, propertyName), schema)", span="950-950", cluster="Newtonsoft.Json.JsonValidatingReader.ValidatePropertyName(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_401 [label="return;", span="934-934", cluster="Newtonsoft.Json.JsonValidatingReader.ValidatePropertyName(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_402 [label="string propertyName = Convert.ToString(_reader.Value, CultureInfo.InvariantCulture)", span="937-937", cluster="Newtonsoft.Json.JsonValidatingReader.ValidatePropertyName(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_403 [label="_currentScope.RequiredProperties.ContainsKey(propertyName)", span="939-939", cluster="Newtonsoft.Json.JsonValidatingReader.ValidatePropertyName(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_404 [label="_currentScope.RequiredProperties[propertyName] = true", span="941-941", cluster="Newtonsoft.Json.JsonValidatingReader.ValidatePropertyName(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_409 [label="_currentScope.CurrentPropertyName = propertyName", span="954-954", cluster="Newtonsoft.Json.JsonValidatingReader.ValidatePropertyName(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_407 [label="!propertyDefinied", span="948-948", cluster="Newtonsoft.Json.JsonValidatingReader.ValidatePropertyName(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_410 [label="Exit Newtonsoft.Json.JsonValidatingReader.ValidatePropertyName(Newtonsoft.Json.Schema.JsonSchemaModel)", span="930-930", cluster="Newtonsoft.Json.JsonValidatingReader.ValidatePropertyName(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_260 [label="Entry System.Collections.Generic.IEnumerable<TSource>.ContainsValue<TSource>(TSource, System.Collections.Generic.IEqualityComparer<TSource>)", span="163-163", cluster="System.Collections.Generic.IEnumerable<TSource>.ContainsValue<TSource>(TSource, System.Collections.Generic.IEqualityComparer<TSource>)", file="JsonSchemaWriter.cs"];
m7_255 [label="Entry Newtonsoft.Json.JsonWriter.WriteToken(Newtonsoft.Json.JsonReader, bool)", span="493-493", cluster="Newtonsoft.Json.JsonWriter.WriteToken(Newtonsoft.Json.JsonReader, bool)", file="JsonSchemaWriter.cs"];
m7_358 [label="Entry System.Math.Abs(double)", span="0-0", cluster="System.Math.Abs(double)", file="JsonSchemaWriter.cs"];
m7_84 [label="return JsonSchemaType.Object;", span="375-375", cluster="Newtonsoft.Json.JsonValidatingReader.GetCurrentNodeSchemaType()", file="JsonSchemaWriter.cs"];
m7_129 [label="Entry Newtonsoft.Json.JsonReader.ReadAsDateTime()", span="439-439", cluster="Newtonsoft.Json.JsonReader.ReadAsDateTime()", file="JsonSchemaWriter.cs"];
m7_111 [label="_writer.WriteEndArray()", span="213-213", cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteItems(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs"];
m7_228 [label="Entry Newtonsoft.Json.JsonValidatingReader.ValidateEndObject(Newtonsoft.Json.Schema.JsonSchemaModel)", span="666-666", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateEndObject(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_274 [label="schema == null", span="668-668", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateEndObject(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_280 [label="RaiseError(''Required properties are missing from object: {0}.''.FormatWith(CultureInfo.InvariantCulture, string.Join('', '', unmatchedRequiredProperties.ToArray())), schema)", span="682-682", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateEndObject(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_275 [label="return;", span="670-670", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateEndObject(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_276 [label="Dictionary<string, bool> requiredProperties = _currentScope.RequiredProperties", span="673-673", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateEndObject(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_277 [label="requiredProperties != null", span="675-675", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateEndObject(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_278 [label="List<string> unmatchedRequiredProperties =\r\n                    requiredProperties.Where(kv => !kv.Value).Select(kv => kv.Key).ToList()", span="677-678", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateEndObject(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_279 [label="unmatchedRequiredProperties.Count > 0", span="680-680", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateEndObject(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_281 [label="Exit Newtonsoft.Json.JsonValidatingReader.ValidateEndObject(Newtonsoft.Json.Schema.JsonSchemaModel)", span="666-666", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateEndObject(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_360 [label="Entry BigInteger.cstr", span="", cluster="BigInteger.cstr", file="JsonSchemaWriter.cs"];
m7_104 [label="_writer.WriteStartObject()", span="199-199", cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteItems(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs"];
m7_82 [label="Entry Newtonsoft.Json.Schema.JsonSchemaWriter.WritePropertyIfNotNull(Newtonsoft.Json.JsonWriter, string, object)", span="249-249", cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WritePropertyIfNotNull(Newtonsoft.Json.JsonWriter, string, object)", file="JsonSchemaWriter.cs"];
m7_87 [label="Entry Newtonsoft.Json.JsonWriter.WriteStartArray()", span="422-422", cluster="Newtonsoft.Json.JsonWriter.WriteStartArray()", file="JsonSchemaWriter.cs"];
m7_86 [label="Entry Newtonsoft.Json.Schema.JsonSchemaWriter.WriteItems(Newtonsoft.Json.Schema.JsonSchema)", span="182-182", cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteItems(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs"];
m7_98 [label="schema.Items == null && !schema.PositionalItemsValidation", span="184-184", cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteItems(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs"];
m7_254 [label="Entry Newtonsoft.Json.Linq.JTokenWriter.JTokenWriter()", span="85-85", cluster="Newtonsoft.Json.Linq.JTokenWriter.JTokenWriter()", file="JsonSchemaWriter.cs"];
m7_423 [label="Entry Newtonsoft.Json.JsonValidatingReader.ValidateArray(Newtonsoft.Json.Schema.JsonSchemaModel)", span="978-978", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateArray(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_424 [label="schema == null", span="980-980", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateArray(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_426 [label="return (TestType(schema, JsonSchemaType.Array));", span="985-985", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateArray(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_425 [label="return true;", span="982-982", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateArray(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_427 [label="Exit Newtonsoft.Json.JsonValidatingReader.ValidateArray(Newtonsoft.Json.Schema.JsonSchemaModel)", span="978-978", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateArray(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_227 [label="Entry Newtonsoft.Json.JsonValidatingReader.ValidateNull(Newtonsoft.Json.Schema.JsonSchemaModel)", span="707-707", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateNull(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_298 [label="schema == null", span="709-709", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateNull(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_300 [label="!TestType(schema, JsonSchemaType.Null)", span="714-714", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateNull(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_302 [label="ValidateNotDisallowed(schema)", span="719-719", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateNull(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_299 [label="return;", span="711-711", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateNull(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_301 [label="return;", span="716-716", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateNull(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_303 [label="Exit Newtonsoft.Json.JsonValidatingReader.ValidateNull(Newtonsoft.Json.Schema.JsonSchemaModel)", span="707-707", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateNull(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_261 [label="Entry System.IO.StringWriter.StringWriter(System.IFormatProvider)", span="0-0", cluster="System.IO.StringWriter.StringWriter(System.IFormatProvider)", file="JsonSchemaWriter.cs"];
m7_393 [label="Entry Newtonsoft.Json.JsonValidatingReader.FloatingPointRemainder(double, double)", span="918-918", cluster="Newtonsoft.Json.JsonValidatingReader.FloatingPointRemainder(double, double)", file="JsonSchemaWriter.cs"];
m7_394 [label="return dividend - Math.Floor(dividend / divisor) * divisor;", span="920-920", cluster="Newtonsoft.Json.JsonValidatingReader.FloatingPointRemainder(double, double)", file="JsonSchemaWriter.cs"];
m7_395 [label="Exit Newtonsoft.Json.JsonValidatingReader.FloatingPointRemainder(double, double)", span="918-918", cluster="Newtonsoft.Json.JsonValidatingReader.FloatingPointRemainder(double, double)", file="JsonSchemaWriter.cs"];
m7_359 [label="Entry double.Equals(double)", span="0-0", cluster="double.Equals(double)", file="JsonSchemaWriter.cs"];
m7_327 [label="Entry System.Text.RegularExpressions.Regex.IsMatch(string, string)", span="0-0", cluster="System.Text.RegularExpressions.Regex.IsMatch(string, string)", file="JsonSchemaWriter.cs"];
m7_363 [label="Entry Newtonsoft.Json.JsonConvert.ToString(object)", span="457-457", cluster="Newtonsoft.Json.JsonConvert.ToString(object)", file="JsonSchemaWriter.cs"];
m7_282 [label="Entry System.Collections.Generic.List<T>.ToArray()", span="0-0", cluster="System.Collections.Generic.List<T>.ToArray()", file="JsonSchemaWriter.cs"];
m7_362 [label="Entry Newtonsoft.Json.JsonValidatingReader.IsZero(double)", span="923-923", cluster="Newtonsoft.Json.JsonValidatingReader.IsZero(double)", file="JsonSchemaWriter.cs"];
m7_397 [label="double epsilon = 2.2204460492503131e-016", span="925-925", cluster="Newtonsoft.Json.JsonValidatingReader.IsZero(double)", file="JsonSchemaWriter.cs"];
m7_398 [label="return Math.Abs(value) < 20.0 * epsilon;", span="927-927", cluster="Newtonsoft.Json.JsonValidatingReader.IsZero(double)", file="JsonSchemaWriter.cs"];
m7_399 [label="Exit Newtonsoft.Json.JsonValidatingReader.IsZero(double)", span="923-923", cluster="Newtonsoft.Json.JsonValidatingReader.IsZero(double)", file="JsonSchemaWriter.cs"];
m7_326 [label="Entry object.ToString()", span="0-0", cluster="object.ToString()", file="JsonSchemaWriter.cs"];
m7_112 [label="Exit Newtonsoft.Json.Schema.JsonSchemaWriter.WriteItems(Newtonsoft.Json.Schema.JsonSchema)", span="182-182", cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteItems(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs"];
m7_438 [label="Entry Newtonsoft.Json.JsonValidatingReader.Newtonsoft.Json.IJsonLineInfo.HasLineInfo()", span="1009-1009", cluster="Newtonsoft.Json.JsonValidatingReader.Newtonsoft.Json.IJsonLineInfo.HasLineInfo()", file="JsonSchemaWriter.cs"];
m7_439 [label="IJsonLineInfo lineInfo = _reader as IJsonLineInfo", span="1011-1011", cluster="Newtonsoft.Json.JsonValidatingReader.Newtonsoft.Json.IJsonLineInfo.HasLineInfo()", file="JsonSchemaWriter.cs"];
m7_440 [label="return lineInfo != null && lineInfo.HasLineInfo();", span="1012-1012", cluster="Newtonsoft.Json.JsonValidatingReader.Newtonsoft.Json.IJsonLineInfo.HasLineInfo()", file="JsonSchemaWriter.cs"];
m7_441 [label="Exit Newtonsoft.Json.JsonValidatingReader.Newtonsoft.Json.IJsonLineInfo.HasLineInfo()", span="1009-1009", cluster="Newtonsoft.Json.JsonValidatingReader.Newtonsoft.Json.IJsonLineInfo.HasLineInfo()", file="JsonSchemaWriter.cs"];
m7_226 [label="Entry Newtonsoft.Json.JsonValidatingReader.ValidateBoolean(Newtonsoft.Json.Schema.JsonSchemaModel)", span="722-722", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateBoolean(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_305 [label="schema == null", span="724-724", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateBoolean(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_307 [label="!TestType(schema, JsonSchemaType.Boolean)", span="729-729", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateBoolean(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_309 [label="ValidateNotDisallowed(schema)", span="734-734", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateBoolean(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_306 [label="return;", span="726-726", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateBoolean(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_308 [label="return;", span="731-731", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateBoolean(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_310 [label="Exit Newtonsoft.Json.JsonValidatingReader.ValidateBoolean(Newtonsoft.Json.Schema.JsonSchemaModel)", span="722-722", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateBoolean(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_229 [label="Entry Newtonsoft.Json.JsonValidatingReader.ValidateEndArray(Newtonsoft.Json.Schema.JsonSchemaModel)", span="687-687", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateEndArray(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_290 [label="schema == null", span="689-689", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateEndArray(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_293 [label="schema.MaximumItems != null && arrayItemCount > schema.MaximumItems", span="696-696", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateEndArray(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_294 [label="RaiseError(''Array item count {0} exceeds maximum count of {1}.''.FormatWith(CultureInfo.InvariantCulture, arrayItemCount, schema.MaximumItems), schema)", span="698-698", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateEndArray(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_295 [label="schema.MinimumItems != null && arrayItemCount < schema.MinimumItems", span="701-701", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateEndArray(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_296 [label="RaiseError(''Array item count {0} is less than minimum count of {1}.''.FormatWith(CultureInfo.InvariantCulture, arrayItemCount, schema.MinimumItems), schema)", span="703-703", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateEndArray(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_291 [label="return;", span="691-691", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateEndArray(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_292 [label="int arrayItemCount = _currentScope.ArrayItemCount", span="694-694", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateEndArray(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_297 [label="Exit Newtonsoft.Json.JsonValidatingReader.ValidateEndArray(Newtonsoft.Json.Schema.JsonSchemaModel)", span="687-687", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateEndArray(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_137 [label="value != null", span="251-251", cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WritePropertyIfNotNull(Newtonsoft.Json.JsonWriter, string, object)", file="JsonSchemaWriter.cs"];
m7_138 [label="writer.WritePropertyName(propertyName)", span="253-253", cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WritePropertyIfNotNull(Newtonsoft.Json.JsonWriter, string, object)", file="JsonSchemaWriter.cs"];
m7_139 [label="writer.WriteValue(value)", span="254-254", cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WritePropertyIfNotNull(Newtonsoft.Json.JsonWriter, string, object)", file="JsonSchemaWriter.cs"];
m7_140 [label="Exit Newtonsoft.Json.Schema.JsonSchemaWriter.WritePropertyIfNotNull(Newtonsoft.Json.JsonWriter, string, object)", span="249-249", cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WritePropertyIfNotNull(Newtonsoft.Json.JsonWriter, string, object)", file="JsonSchemaWriter.cs"];
m7_141 [label="Entry Newtonsoft.Json.JsonWriter.WriteValue(object)", span="1396-1396", cluster="Newtonsoft.Json.JsonWriter.WriteValue(object)", file="JsonSchemaWriter.cs"];
m7_142 [label="Newtonsoft.Json.Schema.JsonSchemaWriter", span="", cluster="Newtonsoft.Json.JsonValidatingReader.Read()", file="JsonSchemaWriter.cs"];
m7_143 [label="Exit Newtonsoft.Json.JsonValidatingReader.Read()", span="475-475", cluster="Newtonsoft.Json.JsonValidatingReader.Read()", file="JsonSchemaWriter.cs"];
m7_225 [label="Entry Newtonsoft.Json.JsonValidatingReader.ValidateString(Newtonsoft.Json.Schema.JsonSchemaModel)", span="737-737", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateString(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_311 [label="schema == null", span="739-739", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateString(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_313 [label="!TestType(schema, JsonSchemaType.String)", span="744-744", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateString(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_315 [label="ValidateNotDisallowed(schema)", span="749-749", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateString(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_317 [label="schema.MaximumLength != null && value.Length > schema.MaximumLength", span="753-753", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateString(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_318 [label="RaiseError(''String '{0}' exceeds maximum length of {1}.''.FormatWith(CultureInfo.InvariantCulture, value, schema.MaximumLength), schema)", span="755-755", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateString(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_319 [label="schema.MinimumLength != null && value.Length < schema.MinimumLength", span="758-758", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateString(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_320 [label="RaiseError(''String '{0}' is less than minimum length of {1}.''.FormatWith(CultureInfo.InvariantCulture, value, schema.MinimumLength), schema)", span="760-760", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateString(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_321 [label="schema.Patterns != null", span="763-763", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateString(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_322 [label="schema.Patterns", span="765-765", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateString(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_324 [label="RaiseError(''String '{0}' does not match regex pattern '{1}'.''.FormatWith(CultureInfo.InvariantCulture, value, pattern), schema)", span="769-769", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateString(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_312 [label="return;", span="741-741", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateString(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_314 [label="return;", span="746-746", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateString(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_316 [label="string value = _reader.Value.ToString()", span="751-751", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateString(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_323 [label="!Regex.IsMatch(value, pattern)", span="767-767", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateString(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_325 [label="Exit Newtonsoft.Json.JsonValidatingReader.ValidateString(Newtonsoft.Json.Schema.JsonSchemaModel)", span="737-737", cluster="Newtonsoft.Json.JsonValidatingReader.ValidateString(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs"];
m7_221 [label="Entry Newtonsoft.Json.JsonValidatingReader.WriteToken(System.Collections.Generic.IList<Newtonsoft.Json.Schema.JsonSchemaModel>)", span="608-608", cluster="Newtonsoft.Json.JsonValidatingReader.WriteToken(System.Collections.Generic.IList<Newtonsoft.Json.Schema.JsonSchemaModel>)", file="JsonSchemaWriter.cs"];
m7_231 [label=_stack, span="610-610", cluster="Newtonsoft.Json.JsonValidatingReader.WriteToken(System.Collections.Generic.IList<Newtonsoft.Json.Schema.JsonSchemaModel>)", file="JsonSchemaWriter.cs"];
m7_233 [label="isInUniqueArray || schemas.Any(s => s.Enum != null)", span="614-614", cluster="Newtonsoft.Json.JsonValidatingReader.WriteToken(System.Collections.Generic.IList<Newtonsoft.Json.Schema.JsonSchemaModel>)", file="JsonSchemaWriter.cs"];
m7_245 [label="schemas.Any(s => s.Enum != null)", span="645-645", cluster="Newtonsoft.Json.JsonValidatingReader.WriteToken(System.Collections.Generic.IList<Newtonsoft.Json.Schema.JsonSchemaModel>)", file="JsonSchemaWriter.cs"];
m7_246 [label=schemas, span="647-647", cluster="Newtonsoft.Json.JsonValidatingReader.WriteToken(System.Collections.Generic.IList<Newtonsoft.Json.Schema.JsonSchemaModel>)", file="JsonSchemaWriter.cs"];
m7_232 [label="bool isInUniqueArray = (schemaScope.TokenType == JTokenType.Array && schemaScope.IsUniqueArray && schemaScope.ArrayItemCount > 0)", span="612-612", cluster="Newtonsoft.Json.JsonValidatingReader.WriteToken(System.Collections.Generic.IList<Newtonsoft.Json.Schema.JsonSchemaModel>)", file="JsonSchemaWriter.cs"];
m7_234 [label="schemaScope.CurrentItemWriter == null", span="616-616", cluster="Newtonsoft.Json.JsonValidatingReader.WriteToken(System.Collections.Generic.IList<Newtonsoft.Json.Schema.JsonSchemaModel>)", file="JsonSchemaWriter.cs"];
m7_236 [label="schemaScope.CurrentItemWriter = new JTokenWriter()", span="623-623", cluster="Newtonsoft.Json.JsonValidatingReader.WriteToken(System.Collections.Generic.IList<Newtonsoft.Json.Schema.JsonSchemaModel>)", file="JsonSchemaWriter.cs"];
m7_237 [label="schemaScope.CurrentItemWriter.WriteToken(_reader, false)", span="626-626", cluster="Newtonsoft.Json.JsonValidatingReader.WriteToken(System.Collections.Generic.IList<Newtonsoft.Json.Schema.JsonSchemaModel>)", file="JsonSchemaWriter.cs"];
m7_238 [label="schemaScope.CurrentItemWriter.Top == 0 && _reader.TokenType != JsonToken.PropertyName", span="629-629", cluster="Newtonsoft.Json.JsonValidatingReader.WriteToken(System.Collections.Generic.IList<Newtonsoft.Json.Schema.JsonSchemaModel>)", file="JsonSchemaWriter.cs"];
m7_239 [label="JToken finishedItem = schemaScope.CurrentItemWriter.Token", span="631-631", cluster="Newtonsoft.Json.JsonValidatingReader.WriteToken(System.Collections.Generic.IList<Newtonsoft.Json.Schema.JsonSchemaModel>)", file="JsonSchemaWriter.cs"];
m7_240 [label="schemaScope.CurrentItemWriter = null", span="634-634", cluster="Newtonsoft.Json.JsonValidatingReader.WriteToken(System.Collections.Generic.IList<Newtonsoft.Json.Schema.JsonSchemaModel>)", file="JsonSchemaWriter.cs"];
m7_242 [label="schemaScope.UniqueArrayItems.Contains(finishedItem, JToken.EqualityComparer)", span="638-638", cluster="Newtonsoft.Json.JsonValidatingReader.WriteToken(System.Collections.Generic.IList<Newtonsoft.Json.Schema.JsonSchemaModel>)", file="JsonSchemaWriter.cs"];
m7_243 [label="RaiseError(''Non-unique array item at index {0}.''.FormatWith(CultureInfo.InvariantCulture, schemaScope.ArrayItemCount - 1), schemaScope.Schemas.First(s => s.UniqueItems))", span="640-640", cluster="Newtonsoft.Json.JsonValidatingReader.WriteToken(System.Collections.Generic.IList<Newtonsoft.Json.Schema.JsonSchemaModel>)", file="JsonSchemaWriter.cs"];
m7_244 [label="schemaScope.UniqueArrayItems.Add(finishedItem)", span="643-643", cluster="Newtonsoft.Json.JsonValidatingReader.WriteToken(System.Collections.Generic.IList<Newtonsoft.Json.Schema.JsonSchemaModel>)", file="JsonSchemaWriter.cs"];
m7_241 [label=isInUniqueArray, span="636-636", cluster="Newtonsoft.Json.JsonValidatingReader.WriteToken(System.Collections.Generic.IList<Newtonsoft.Json.Schema.JsonSchemaModel>)", file="JsonSchemaWriter.cs"];
m7_235 [label="JsonTokenUtils.IsEndToken(_reader.TokenType)", span="618-618", cluster="Newtonsoft.Json.JsonValidatingReader.WriteToken(System.Collections.Generic.IList<Newtonsoft.Json.Schema.JsonSchemaModel>)", file="JsonSchemaWriter.cs"];
m7_248 [label="!schema.Enum.ContainsValue(finishedItem, JToken.EqualityComparer)", span="651-651", cluster="Newtonsoft.Json.JsonValidatingReader.WriteToken(System.Collections.Generic.IList<Newtonsoft.Json.Schema.JsonSchemaModel>)", file="JsonSchemaWriter.cs"];
m7_250 [label="finishedItem.WriteTo(new JsonTextWriter(sw))", span="654-654", cluster="Newtonsoft.Json.JsonValidatingReader.WriteToken(System.Collections.Generic.IList<Newtonsoft.Json.Schema.JsonSchemaModel>)", file="JsonSchemaWriter.cs"];
m7_247 [label="schema.Enum != null", span="649-649", cluster="Newtonsoft.Json.JsonValidatingReader.WriteToken(System.Collections.Generic.IList<Newtonsoft.Json.Schema.JsonSchemaModel>)", file="JsonSchemaWriter.cs"];
m7_251 [label="RaiseError(''Value {0} is not defined in enum.''.FormatWith(CultureInfo.InvariantCulture, sw.ToString()), schema)", span="656-656", cluster="Newtonsoft.Json.JsonValidatingReader.WriteToken(System.Collections.Generic.IList<Newtonsoft.Json.Schema.JsonSchemaModel>)", file="JsonSchemaWriter.cs"];
m7_249 [label="StringWriter sw = new StringWriter(CultureInfo.InvariantCulture)", span="653-653", cluster="Newtonsoft.Json.JsonValidatingReader.WriteToken(System.Collections.Generic.IList<Newtonsoft.Json.Schema.JsonSchemaModel>)", file="JsonSchemaWriter.cs"];
m7_252 [label="Exit Newtonsoft.Json.JsonValidatingReader.WriteToken(System.Collections.Generic.IList<Newtonsoft.Json.Schema.JsonSchemaModel>)", span="608-608", cluster="Newtonsoft.Json.JsonValidatingReader.WriteToken(System.Collections.Generic.IList<Newtonsoft.Json.Schema.JsonSchemaModel>)", file="JsonSchemaWriter.cs"];
m7_411 [label="Entry System.Convert.ToString(object, System.IFormatProvider)", span="0-0", cluster="System.Convert.ToString(object, System.IFormatProvider)", file="JsonSchemaWriter.cs"];
m7_216 [label="Entry Newtonsoft.Json.Schema.JsonSchemaModelBuilder.JsonSchemaModelBuilder()", span="37-37", cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.JsonSchemaModelBuilder()", file="JsonSchemaWriter.cs"];
m7_144 [label="Entry Newtonsoft.Json.JsonReader.Read()", span="409-409", cluster="Newtonsoft.Json.JsonReader.Read()", file="JsonSchemaWriter.cs"];
m7_264 [label="Entry System.IO.StringWriter.ToString()", span="0-0", cluster="System.IO.StringWriter.ToString()", file="JsonSchemaWriter.cs"];
m7_258 [label="Entry Unk.RaiseError", span="", cluster="Unk.RaiseError", file="JsonSchemaWriter.cs"];
m7_356 [label="Entry Newtonsoft.Json.Linq.JValue.Compare(Newtonsoft.Json.Linq.JTokenType, object, object)", span="248-248", cluster="Newtonsoft.Json.Linq.JValue.Compare(Newtonsoft.Json.Linq.JTokenType, object, object)", file="JsonSchemaWriter.cs"];
m7_442 [label="Newtonsoft.Json.JsonValidatingReader.SchemaScope", span="", file="JsonSchemaWriter.cs"];
m7_443 [label="Newtonsoft.Json.JsonValidatingReader", span="", file="JsonSchemaWriter.cs"];
m8_50 [label="JToken stringToken = JToken.FromObject(''pie lol'')", span="99-99", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.ValidateWithOutEventHandlerSuccess()", file="JsonSerializer.cs"];
m8_51 [label="stringToken.Validate(schema)", span="100-100", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.ValidateWithOutEventHandlerSuccess()", file="JsonSerializer.cs"];
m8_52 [label="Exit Newtonsoft.Json.Tests.Schema.ExtensionsTests.ValidateWithOutEventHandlerSuccess()", span="96-96", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.ValidateWithOutEventHandlerSuccess()", file="JsonSerializer.cs"];
m8_57 [label="o.Validate(schema, (sender, args) => errors.Add(args.Message))", span="110-110", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.ValidateFailureWithOutLineInfoBecauseOfEndToken()", file="JsonSerializer.cs"];
m8_53 [label="Entry Newtonsoft.Json.Tests.Schema.ExtensionsTests.ValidateFailureWithOutLineInfoBecauseOfEndToken()", span="104-104", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.ValidateFailureWithOutLineInfoBecauseOfEndToken()", file="JsonSerializer.cs"];
m8_54 [label="JsonSchema schema = JsonSchema.Parse(''{'properties':{'lol':{'required':true}}}'')", span="106-106", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.ValidateFailureWithOutLineInfoBecauseOfEndToken()", file="JsonSerializer.cs"];
m8_59 [label="Assert.AreEqual(1, errors.Count)", span="113-113", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.ValidateFailureWithOutLineInfoBecauseOfEndToken()", file="JsonSerializer.cs"];
m8_60 [label="Exit Newtonsoft.Json.Tests.Schema.ExtensionsTests.ValidateFailureWithOutLineInfoBecauseOfEndToken()", span="104-104", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.ValidateFailureWithOutLineInfoBecauseOfEndToken()", file="JsonSerializer.cs"];
m8_55 [label="JObject o = JObject.Parse(''{}'')", span="107-107", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.ValidateFailureWithOutLineInfoBecauseOfEndToken()", file="JsonSerializer.cs"];
m8_56 [label="List<string> errors = new List<string>()", span="109-109", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.ValidateFailureWithOutLineInfoBecauseOfEndToken()", file="JsonSerializer.cs"];
m8_58 [label="Assert.AreEqual(''Required properties are missing from object: lol.'', errors[0])", span="112-112", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.ValidateFailureWithOutLineInfoBecauseOfEndToken()", file="JsonSerializer.cs"];
m8_61 [label="Entry Newtonsoft.Json.Linq.JObject.Parse(string)", span="323-323", cluster="Newtonsoft.Json.Linq.JObject.Parse(string)", file="JsonSerializer.cs"];
m8_75 [label="Entry Newtonsoft.Json.Linq.JToken.ToString()", span="393-393", cluster="Newtonsoft.Json.Linq.JToken.ToString()", file="JsonSerializer.cs"];
m8_76 [label="Entry lambda expression", span="123-123", cluster="lambda expression", file="JsonSerializer.cs"];
m8_77 [label="errors.Add(args.Path + '' - '' + args.Message)", span="123-123", cluster="lambda expression", file="JsonSerializer.cs"];
m8_78 [label="Exit lambda expression", span="123-123", cluster="lambda expression", file="JsonSerializer.cs"];
m8_79 [label="Entry Newtonsoft.Json.Tests.Schema.ExtensionsTests.Blog()", span="131-131", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.Blog()", file="JsonSerializer.cs"];
m8_80 [label="string schemaJson = @''\r\n{\r\n  ''''description'''': ''''A person schema'''',\r\n  ''''type'''': ''''object'''',\r\n  ''''properties'''':\r\n  {\r\n    ''''name'''': {''''type'''':''''string''''},\r\n    ''''hobbies'''': {\r\n      ''''type'''': ''''array'''',\r\n      ''''items'''': {''''type'''':''''string''''}\r\n    }\r\n  }\r\n}\r\n''", span="133-146", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.Blog()", file="JsonSerializer.cs", color=green, community=0];
m8_81 [label="JsonSchema schema = JsonSchema.Parse(schemaJson)", span="156-156", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.Blog()", file="JsonSerializer.cs"];
m8_138 [label="JsonConvert.DeserializeObject<Currency>(@''{''''Case'''':''''abcdefg'''',''''Fields'''':[]}'')", span="248-248", cluster="lambda expression", file="JsonSerializer.cs"];
m8_152 [label="Assert.AreEqual(''Property 'g' has not been defined and the schema does not allow additional properties. Line 1, position 5.'', errors[0])", span="235-235", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UndefinedPropertyOnNoPropertySchema()", file="JsonSerializer.cs"];
m8_153 [label="Exit Newtonsoft.Json.Tests.Schema.ExtensionsTests.UndefinedPropertyOnNoPropertySchema()", span="219-219", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UndefinedPropertyOnNoPropertySchema()", file="JsonSerializer.cs"];
m8_154 [label="Entry lambda expression", span="232-232", cluster="lambda expression", file="JsonSerializer.cs"];
m8_239 [label="Entry Newtonsoft.Json.Linq.JObject.JObject(object)", span="111-111", cluster="Newtonsoft.Json.Linq.JObject.JObject(object)", file="JsonSerializer.cs"];
m8_275 [label="Entry Newtonsoft.Json.Tests.Schema.ExtensionsTests.Items_Positional()", span="438-438", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.Items_Positional()", file="JsonSerializer.cs"];
m8_282 [label="Assert.AreEqual(0, errorMessages.Count)", span="451-451", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.Items_Positional()", file="JsonSerializer.cs"];
m8_281 [label="Assert.IsTrue(a.IsValid(schema, out errorMessages))", span="450-450", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.Items_Positional()", file="JsonSerializer.cs"];
m8_277 [label="schema.Items = new List<JsonSchema>\r\n        {\r\n          new JsonSchema { Type = JsonSchemaType.Object },\r\n          new JsonSchema { Type = JsonSchemaType.Integer }\r\n        }", span="441-445", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.Items_Positional()", file="JsonSerializer.cs"];
m8_276 [label="JsonSchema schema = new JsonSchema()", span="440-440", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.Items_Positional()", file="JsonSerializer.cs"];
m8_279 [label="JArray a = new JArray(new JObject(), 1)", span="448-448", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.Items_Positional()", file="JsonSerializer.cs"];
m8_280 [label="IList<string> errorMessages", span="449-449", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.Items_Positional()", file="JsonSerializer.cs"];
m8_278 [label="schema.PositionalItemsValidation = true", span="446-446", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.Items_Positional()", file="JsonSerializer.cs"];
m8_283 [label="Exit Newtonsoft.Json.Tests.Schema.ExtensionsTests.Items_Positional()", span="438-438", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.Items_Positional()", file="JsonSerializer.cs"];
m8_34 [label="Stopwatch ts = new Stopwatch()", span="100-100", cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializePerformance()", file="JsonSerializer.cs"];
m8_105 [label="Entry string.Join(string, params string[])", span="0-0", cluster="string.Join(string, params string[])", file="JsonSerializer.cs"];
m8_139 [label="Exit lambda expression", span="248-248", cluster="lambda expression", file="JsonSerializer.cs"];
m8_133 [label="Entry Newtonsoft.Json.Tests.TestObjects.Person.Person()", span="34-34", cluster="Newtonsoft.Json.Tests.TestObjects.Person.Person()", file="JsonSerializer.cs"];
m8_134 [label="Entry Newtonsoft.Json.Tests.TestObjects.PersonRaw.PersonRaw()", span="30-30", cluster="Newtonsoft.Json.Tests.TestObjects.PersonRaw.PersonRaw()", file="JsonSerializer.cs"];
m8_135 [label="Entry Newtonsoft.Json.Tests.TestObjects.CircularReferenceClass.CircularReferenceClass()", span="27-27", cluster="Newtonsoft.Json.Tests.TestObjects.CircularReferenceClass.CircularReferenceClass()", file="JsonSerializer.cs"];
m8_82 [label="Entry Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.CreateUnion(System.Type)", span="187-187", cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.CreateUnion(System.Type)", file="JsonSerializer.cs"];
m8_83 [label="Union u = new Union()", span="189-189", cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.CreateUnion(System.Type)", file="JsonSerializer.cs"];
m8_84 [label="u.TagReader = FSharpFunc<object, int>.ToConverter(FSharpValue.PreComputeUnionTagReader(t, null))", span="191-191", cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.CreateUnion(System.Type)", file="JsonSerializer.cs"];
m8_164 [label="JValue v = new JValue(10)", span="248-248", cluster="lambda expression", file="JsonSerializer.cs"];
m8_165 [label="v.Validate(schema)", span="249-249", cluster="lambda expression", file="JsonSerializer.cs"];
m8_166 [label="Exit lambda expression", span="242-250", cluster="lambda expression", file="JsonSerializer.cs"];
m8_132 [label="Exit lambda expression", span="233-233", cluster="lambda expression", file="JsonSerializer.cs"];
m8_267 [label="Entry Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_Property()", span="415-415", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_Property()", file="JsonSerializer.cs"];
m8_273 [label="Assert.AreEqual(1, errorMessages.Count)", span="434-434", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_Property()", file="JsonSerializer.cs"];
m8_272 [label="Assert.IsFalse(o.IsValid(schema, out errorMessages))", span="433-433", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_Property()", file="JsonSerializer.cs"];
m8_268 [label="JsonSchema schema = new JsonSchema()", span="417-417", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_Property()", file="JsonSerializer.cs"];
m8_270 [label="JObject o = new JObject(\r\n        new JProperty(''bar'', new JArray(1, 2, 3, 3))\r\n        )", span="429-431", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_Property()", file="JsonSerializer.cs"];
m8_271 [label="IList<string> errorMessages", span="432-432", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_Property()", file="JsonSerializer.cs"];
m8_269 [label="schema.Properties = new Dictionary<string, JsonSchema>\r\n        {\r\n          {\r\n            ''bar'',\r\n            new JsonSchema\r\n            {\r\n              UniqueItems = true\r\n            }\r\n          }\r\n        }", span="418-427", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_Property()", file="JsonSerializer.cs"];
m8_274 [label="Exit Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_Property()", span="415-415", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_Property()", file="JsonSerializer.cs"];
m8_284 [label="Entry Newtonsoft.Json.Linq.JObject.JObject()", span="85-85", cluster="Newtonsoft.Json.Linq.JObject.JObject()", file="JsonSerializer.cs"];
m8_104 [label="Entry System.Collections.Generic.List<T>.ToArray()", span="0-0", cluster="System.Collections.Generic.List<T>.ToArray()", file="JsonSerializer.cs"];
m8_38 [label="JsonConvert.SerializeObject(values)", span="105-105", cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializePerformance()", file="JsonSerializer.cs"];
m8_39 [label="i++", span="103-103", cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializePerformance()", file="JsonSerializer.cs"];
m8_40 [label="ts.Stop()", span="108-108", cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializePerformance()", file="JsonSerializer.cs"];
m8_15 [label="Shape c = JsonConvert.DeserializeObject<Shape>(json, new DoubleDoubleConverter())", span="72-72", cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializeUnionWithConverter()", file="JsonSerializer.cs"];
m8_203 [label="Entry lambda expression", span="302-309", cluster="lambda expression", file="JsonSerializer.cs"];
m8_119 [label="GenerateSchemaAndSerializeFromType(new ClassWithArray())", span="199-199", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.GenerateSchemaAndSerializeFromTypeTests()", file="JsonSerializer.cs"];
m8_118 [label="GenerateSchemaAndSerializeFromType(new CircularReferenceWithIdClass())", span="198-198", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.GenerateSchemaAndSerializeFromTypeTests()", file="JsonSerializer.cs"];
m8_120 [label="GenerateSchemaAndSerializeFromType(new ClassWithGuid())", span="200-200", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.GenerateSchemaAndSerializeFromTypeTests()", file="JsonSerializer.cs"];
m8_130 [label="Exit Newtonsoft.Json.Tests.Schema.ExtensionsTests.GenerateSchemaAndSerializeFromTypeTests()", span="189-189", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.GenerateSchemaAndSerializeFromTypeTests()", file="JsonSerializer.cs"];
m8_131 [label="Entry System.Version.Version(string)", span="0-0", cluster="System.Version.Version(string)", file="JsonSerializer.cs"];
m8_137 [label="Entry Newtonsoft.Json.Tests.TestObjects.ClassWithArray.ClassWithArray()", span="35-35", cluster="Newtonsoft.Json.Tests.TestObjects.ClassWithArray.ClassWithArray()", file="JsonSerializer.cs"];
m8_143 [label="Entry System.DateTime.DateTime(int, int, int, int, int, int, System.DateTimeKind)", span="0-0", cluster="System.DateTime.DateTime(int, int, int, int, int, int, System.DateTimeKind)", file="JsonSerializer.cs"];
m8_144 [label="Entry System.TimeSpan.FromTicks(long)", span="0-0", cluster="System.TimeSpan.FromTicks(long)", file="JsonSerializer.cs"];
m8_145 [label="Entry Newtonsoft.Json.Tests.TestObjects.JsonPropertyWithHandlingValues.JsonPropertyWithHandlingValues()", span="29-29", cluster="Newtonsoft.Json.Tests.TestObjects.JsonPropertyWithHandlingValues.JsonPropertyWithHandlingValues()", file="JsonSerializer.cs"];
m8_149 [label="List<string> errors = new List<string>()", span="231-231", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UndefinedPropertyOnNoPropertySchema()", file="JsonSerializer.cs"];
m8_150 [label="o.Validate(schema, (sender, args) => errors.Add(args.Message))", span="232-232", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UndefinedPropertyOnNoPropertySchema()", file="JsonSerializer.cs"];
m8_151 [label="Assert.AreEqual(1, errors.Count)", span="234-234", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UndefinedPropertyOnNoPropertySchema()", file="JsonSerializer.cs"];
m8_155 [label="errors.Add(args.Message)", span="232-232", cluster="lambda expression", file="JsonSerializer.cs"];
m8_156 [label="Exit lambda expression", span="232-232", cluster="lambda expression", file="JsonSerializer.cs"];
m8_157 [label="Entry Newtonsoft.Json.Tests.Schema.ExtensionsTests.ExclusiveMaximum_Int()", span="239-239", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.ExclusiveMaximum_Int()", file="JsonSerializer.cs"];
m8_161 [label="JsonSchema schema = new JsonSchema()", span="244-244", cluster="lambda expression", file="JsonSerializer.cs"];
m8_162 [label="schema.Maximum = 10", span="245-245", cluster="lambda expression", file="JsonSerializer.cs"];
m8_163 [label="schema.ExclusiveMaximum = true", span="246-246", cluster="lambda expression", file="JsonSerializer.cs"];
m8_167 [label="Entry Newtonsoft.Json.Schema.JsonSchema.JsonSchema()", span="220-220", cluster="Newtonsoft.Json.Schema.JsonSchema.JsonSchema()", file="JsonSerializer.cs"];
m8_168 [label="Entry Newtonsoft.Json.Linq.JValue.JValue(long)", span="69-69", cluster="Newtonsoft.Json.Linq.JValue.JValue(long)", file="JsonSerializer.cs"];
m8_169 [label="Entry Newtonsoft.Json.Tests.Schema.ExtensionsTests.ExclusiveMaximum_Float()", span="254-254", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.ExclusiveMaximum_Float()", file="JsonSerializer.cs"];
m8_43 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="JsonSerializer.cs"];
m8_42 [label="Exit Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializePerformance()", span="90-90", cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializePerformance()", file="JsonSerializer.cs"];
m8_44 [label="Entry Newtonsoft.Json.Tests.TestObjects.Shape.NewCircle(double)", span="60-60", cluster="Newtonsoft.Json.Tests.TestObjects.Shape.NewCircle(double)", file="JsonSerializer.cs"];
m8_45 [label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting)", span="525-525", cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting)", file="JsonSerializer.cs"];
m8_31 [label="Entry Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializePerformance()", span="90-90", cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializePerformance()", file="JsonSerializer.cs"];
m8_35 [label="ts.Start()", span="101-101", cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializePerformance()", file="JsonSerializer.cs"];
m8_46 [label="Entry System.Diagnostics.Stopwatch.Stopwatch()", span="0-0", cluster="System.Diagnostics.Stopwatch.Stopwatch()", file="JsonSerializer.cs"];
m8_62 [label="Entry Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string)", span="739-739", cluster="Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string)", file="JsonSerializer.cs"];
m8_63 [label="Entry Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializeUnionWithFields()", span="140-140", cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializeUnionWithFields()", file="JsonSerializer.cs"];
m8_32 [label="List<Shape> values = new List<Shape>\r\n            {\r\n                Shape.NewRectangle(10.0, 5.0),\r\n                Shape.NewCircle(7.5)\r\n            }", span="92-96", cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializePerformance()", file="JsonSerializer.cs"];
m8_36 [label="int i = 0", span="103-103", cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializePerformance()", file="JsonSerializer.cs"];
m8_33 [label="string json = JsonConvert.SerializeObject(values, Formatting.Indented)", span="98-98", cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializePerformance()", file="JsonSerializer.cs"];
m8_37 [label="i < 2000", span="103-103", cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializePerformance()", file="JsonSerializer.cs"];
m8_177 [label="Assert.AreEqual(10.0, r.width)", span="298-298", cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializeUnionWithTypeNameHandlingAndReferenceTracking()", file="JsonSerializer.cs"];
m8_188 [label="v.Validate(schema)", span="279-279", cluster="lambda expression", file="JsonSerializer.cs"];
m8_198 [label="v.Validate(schema)", span="294-294", cluster="lambda expression", file="JsonSerializer.cs"];
m8_207 [label="v.Validate(schema)", span="308-308", cluster="lambda expression", file="JsonSerializer.cs"];
m8_64 [label="string json = JsonConvert.SerializeObject(Shape.NewRectangle(10.0, 5.0))", span="142-142", cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializeUnionWithFields()", file="JsonSerializer.cs"];
m8_107 [label="Shape value = Shape.NewRectangle(10.0, 5.0)", span="214-214", cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.Serialize()", file="JsonSerializer.cs"];
m8_173 [label="Shape c = JsonConvert.DeserializeObject<Shape>(json)", span="292-292", cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializeUnionWithTypeNameHandlingAndReferenceTracking()", file="JsonSerializer.cs"];
m8_176 [label="Assert.AreEqual(5.0, r.length)", span="297-297", cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializeUnionWithTypeNameHandlingAndReferenceTracking()", file="JsonSerializer.cs"];
m8_178 [label="Exit Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializeUnionWithTypeNameHandlingAndReferenceTracking()", span="282-282", cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializeUnionWithTypeNameHandlingAndReferenceTracking()", file="JsonSerializer.cs"];
m8_184 [label="JsonSchema schema = new JsonSchema()", span="274-274", cluster="lambda expression", file="JsonSerializer.cs"];
m8_187 [label="JValue v = new JValue(10)", span="278-278", cluster="lambda expression", file="JsonSerializer.cs"];
m8_189 [label="Exit lambda expression", span="272-280", cluster="lambda expression", file="JsonSerializer.cs"];
m8_194 [label="JsonSchema schema = new JsonSchema()", span="289-289", cluster="lambda expression", file="JsonSerializer.cs"];
m8_197 [label="JValue v = new JValue(10.1)", span="293-293", cluster="lambda expression", file="JsonSerializer.cs"];
m8_199 [label="Exit lambda expression", span="287-295", cluster="lambda expression", file="JsonSerializer.cs"];
m8_204 [label="JsonSchema schema = new JsonSchema()", span="304-304", cluster="lambda expression", file="JsonSerializer.cs"];
m8_206 [label="JValue v = new JValue(10)", span="307-307", cluster="lambda expression", file="JsonSerializer.cs"];
m8_208 [label="Exit lambda expression", span="302-309", cluster="lambda expression", file="JsonSerializer.cs"];
m8_108 [label="Union union = CreateUnion(value.GetType())", span="216-216", cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.Serialize()", file="JsonSerializer.cs"];
m8_160 [label="Exit Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.DeserializeBasicUnion_FieldsObject()", span="270-270", cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.DeserializeBasicUnion_FieldsObject()", file="JsonSerializer.cs"];
m8_172 [label="Assert.AreEqual(@''{''''Case'''':''''Rectangle'''',''''Fields'''':[10.0,5.0]}'', json)", span="290-290", cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializeUnionWithTypeNameHandlingAndReferenceTracking()", file="JsonSerializer.cs"];
m8_183 [label="Entry lambda expression", span="272-280", cluster="lambda expression", file="JsonSerializer.cs"];
m8_193 [label="Entry lambda expression", span="287-295", cluster="lambda expression", file="JsonSerializer.cs"];
m8_174 [label="Assert.AreEqual(true, c.IsRectangle)", span="293-293", cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializeUnionWithTypeNameHandlingAndReferenceTracking()", file="JsonSerializer.cs"];
m8_175 [label="Shape.Rectangle r = (Shape.Rectangle)c", span="295-295", cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializeUnionWithTypeNameHandlingAndReferenceTracking()", file="JsonSerializer.cs"];
m8_185 [label="schema.Minimum = 10", span="275-275", cluster="lambda expression", file="JsonSerializer.cs"];
m8_186 [label="schema.ExclusiveMinimum = true", span="276-276", cluster="lambda expression", file="JsonSerializer.cs"];
m8_195 [label="schema.Minimum = 10.1", span="290-290", cluster="lambda expression", file="JsonSerializer.cs"];
m8_196 [label="schema.ExclusiveMinimum = true", span="291-291", cluster="lambda expression", file="JsonSerializer.cs"];
m8_205 [label="schema.DivisibleBy = 3", span="305-305", cluster="lambda expression", file="JsonSerializer.cs"];
m8_109 [label="int tag = union.TagReader.Invoke(value)", span="218-218", cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.Serialize()", file="JsonSerializer.cs"];
m8_9 [label="Assert.AreEqual(false, stringToken.IsValid(schema, out errorMessages))", span="60-60", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.IsValid()", file="JsonSerializer.cs"];
m8_10 [label="Assert.AreEqual(1, errorMessages.Count)", span="61-61", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.IsValid()", file="JsonSerializer.cs"];
m8_11 [label="Assert.AreEqual(''Invalid type. Expected Integer but got String.'', errorMessages[0])", span="62-62", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.IsValid()", file="JsonSerializer.cs"];
m8_103 [label="Entry Newtonsoft.Json.Linq.JToken.ReadFrom(Newtonsoft.Json.JsonReader)", span="1763-1763", cluster="Newtonsoft.Json.Linq.JToken.ReadFrom(Newtonsoft.Json.JsonReader)", file="JsonSerializer.cs"];
m8_106 [label="Entry Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.Serialize()", span="212-212", cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.Serialize()", file="JsonSerializer.cs"];
m8_180 [label="Entry Newtonsoft.Json.Tests.Schema.ExtensionsTests.ExclusiveMinimum_Int()", span="269-269", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.ExclusiveMinimum_Int()", file="JsonSerializer.cs"];
m8_217 [label="Entry Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_SimpleDuplicate()", span="323-323", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_SimpleDuplicate()", file="JsonSerializer.cs"];
m8_223 [label="Assert.AreEqual(2, errorMessages.Count)", span="331-331", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_SimpleDuplicate()", file="JsonSerializer.cs"];
m8_224 [label="Assert.AreEqual(''Non-unique array item at index 3.'', errorMessages[0])", span="332-332", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_SimpleDuplicate()", file="JsonSerializer.cs"];
m8_225 [label="Assert.AreEqual(''Non-unique array item at index 4.'', errorMessages[1])", span="333-333", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_SimpleDuplicate()", file="JsonSerializer.cs"];
m8_222 [label="Assert.IsFalse(a.IsValid(schema, out errorMessages))", span="330-330", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_SimpleDuplicate()", file="JsonSerializer.cs"];
m8_218 [label="JsonSchema schema = new JsonSchema()", span="325-325", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_SimpleDuplicate()", file="JsonSerializer.cs"];
m8_220 [label="JArray a = new JArray(1, 2, 3, 2, 2)", span="328-328", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_SimpleDuplicate()", file="JsonSerializer.cs"];
m8_221 [label="IList<string> errorMessages", span="329-329", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_SimpleDuplicate()", file="JsonSerializer.cs"];
m8_219 [label="schema.UniqueItems = true", span="326-326", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_SimpleDuplicate()", file="JsonSerializer.cs"];
m8_226 [label="Exit Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_SimpleDuplicate()", span="323-323", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_SimpleDuplicate()", file="JsonSerializer.cs"];
m8_0 [label="Entry Newtonsoft.Json.Tests.Schema.ExtensionsTests.IsValid()", span="48-48", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.IsValid()", file="JsonSerializer.cs"];
m8_1 [label="JsonSchema schema = JsonSchema.Parse(''{'type':'integer'}'')", span="50-50", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.IsValid()", file="JsonSerializer.cs"];
m8_2 [label="JToken stringToken = JToken.FromObject(''pie'')", span="51-51", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.IsValid()", file="JsonSerializer.cs"];
m8_3 [label="JToken integerToken = JToken.FromObject(1)", span="52-52", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.IsValid()", file="JsonSerializer.cs"];
m8_170 [label="ExceptionAssert.Throws<JsonSchemaException>(''Float 10.1 equals maximum value of 10.1 and exclusive maximum is true.'',\r\n      () =>\r\n      {\r\n        JsonSchema schema = new JsonSchema();\r\n        schema.Maximum = 10.1;\r\n        schema.ExclusiveMaximum = true;\r\n\r\n        JValue v = new JValue(10.1);\r\n        v.Validate(schema);\r\n      })", span="256-265", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.ExclusiveMaximum_Float()", file="JsonSerializer.cs"];
m8_171 [label="Exit Newtonsoft.Json.Tests.Schema.ExtensionsTests.ExclusiveMaximum_Float()", span="254-254", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.ExclusiveMaximum_Float()", file="JsonSerializer.cs"];
m8_99 [label="Entry Unk.ToConverter", span="", cluster="Unk.ToConverter", file="JsonSerializer.cs"];
m8_136 [label="Entry Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", span="354-354", cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", file="JsonSerializer.cs"];
m8_227 [label="Entry Unk.IsFalse", span="", cluster="Unk.IsFalse", file="JsonSerializer.cs"];
m8_22 [label="stringToken.Validate(schema, (sender, args) => errors.Add(args.Message))", span="72-72", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.ValidateWithEventHandler()", file="JsonSerializer.cs"];
m8_13 [label="string json = JsonConvert.SerializeObject(Shape.NewRectangle(10.0, 5.0), new DoubleDoubleConverter())", span="68-68", cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializeUnionWithConverter()", file="JsonSerializer.cs"];
m8_121 [label="GenerateSchemaAndSerializeFromType(new NullableDateTimeTestClass())", span="202-202", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.GenerateSchemaAndSerializeFromTypeTests()", file="JsonSerializer.cs"];
m8_122 [label="GenerateSchemaAndSerializeFromType(new DataSet())", span="205-205", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.GenerateSchemaAndSerializeFromTypeTests()", file="JsonSerializer.cs"];
m8_123 [label="GenerateSchemaAndSerializeFromType(new object())", span="207-207", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.GenerateSchemaAndSerializeFromTypeTests()", file="JsonSerializer.cs"];
m8_124 [label="GenerateSchemaAndSerializeFromType(1)", span="208-208", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.GenerateSchemaAndSerializeFromTypeTests()", file="JsonSerializer.cs"];
m8_125 [label="GenerateSchemaAndSerializeFromType(''Hi'')", span="209-209", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.GenerateSchemaAndSerializeFromTypeTests()", file="JsonSerializer.cs"];
m8_126 [label="GenerateSchemaAndSerializeFromType(new DateTime(2000, 12, 29, 23, 59, 0, DateTimeKind.Utc))", span="210-210", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.GenerateSchemaAndSerializeFromTypeTests()", file="JsonSerializer.cs"];
m8_127 [label="GenerateSchemaAndSerializeFromType(TimeSpan.FromTicks(1000000))", span="211-211", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.GenerateSchemaAndSerializeFromTypeTests()", file="JsonSerializer.cs"];
m8_128 [label="GenerateSchemaAndSerializeFromType(DBNull.Value)", span="213-213", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.GenerateSchemaAndSerializeFromTypeTests()", file="JsonSerializer.cs"];
m8_241 [label="Entry Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_NestedDuplicate()", span="352-352", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_NestedDuplicate()", file="JsonSerializer.cs"];
m8_249 [label="Assert.AreEqual(4, errorMessages.Count)", span="374-374", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_NestedDuplicate()", file="JsonSerializer.cs"];
m8_250 [label="Assert.AreEqual(''Non-unique array item at index 1.'', errorMessages[0])", span="375-375", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_NestedDuplicate()", file="JsonSerializer.cs"];
m8_251 [label="Assert.AreEqual(''Non-unique array item at index 3.'', errorMessages[1])", span="376-376", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_NestedDuplicate()", file="JsonSerializer.cs"];
m8_252 [label="Assert.AreEqual(''Non-unique array item at index 1.'', errorMessages[2])", span="377-377", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_NestedDuplicate()", file="JsonSerializer.cs"];
m8_253 [label="Assert.AreEqual(''Non-unique array item at index 4.'', errorMessages[3])", span="378-378", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_NestedDuplicate()", file="JsonSerializer.cs"];
m8_248 [label="Assert.IsFalse(a.IsValid(schema, out errorMessages))", span="373-373", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_NestedDuplicate()", file="JsonSerializer.cs"];
m8_244 [label="schema.Items = new List<JsonSchema>\r\n        {\r\n          new JsonSchema\r\n            {\r\n              UniqueItems = true\r\n            }\r\n        }", span="356-362", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_NestedDuplicate()", file="JsonSerializer.cs"];
m8_242 [label="JsonSchema schema = new JsonSchema()", span="354-354", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_NestedDuplicate()", file="JsonSerializer.cs"];
m8_246 [label="JArray a = new JArray(\r\n        new JArray(1, 2),\r\n        new JArray(1, 1),\r\n        new JArray(3, 4),\r\n        new JArray(1, 2),\r\n        new JArray(1, 1)\r\n        )", span="365-371", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_NestedDuplicate()", file="JsonSerializer.cs"];
m8_247 [label="IList<string> errorMessages", span="372-372", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_NestedDuplicate()", file="JsonSerializer.cs"];
m8_243 [label="schema.UniqueItems = true", span="355-355", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_NestedDuplicate()", file="JsonSerializer.cs"];
m8_245 [label="schema.PositionalItemsValidation = false", span="363-363", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_NestedDuplicate()", file="JsonSerializer.cs"];
m8_254 [label="Exit Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_NestedDuplicate()", span="352-352", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_NestedDuplicate()", file="JsonSerializer.cs"];
m8_17 [label="Shape.Rectangle r = (Shape.Rectangle)c", span="75-75", cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializeUnionWithConverter()", file="JsonSerializer.cs"];
m8_65 [label="Assert.AreEqual(@''{''''Case'''':''''Rectangle'''',''''Fields'''':[10.0,5.0]}'', json)", span="144-144", cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializeUnionWithFields()", file="JsonSerializer.cs"];
m8_66 [label="Exit Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializeUnionWithFields()", span="140-140", cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializeUnionWithFields()", file="JsonSerializer.cs"];
m8_67 [label="Entry Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.DeserializeBasicUnion()", span="148-148", cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.DeserializeBasicUnion()", file="JsonSerializer.cs"];
m8_69 [label="Assert.AreEqual(Currency.AUD, c)", span="151-151", cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.DeserializeBasicUnion()", file="JsonSerializer.cs"];
m8_68 [label="Currency c = JsonConvert.DeserializeObject<Currency>(@''{''''Case'''':''''AUD''''}'')", span="150-150", cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.DeserializeBasicUnion()", file="JsonSerializer.cs"];
m8_71 [label="Assert.AreEqual(Currency.EUR, c)", span="154-154", cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.DeserializeBasicUnion()", file="JsonSerializer.cs"];
m8_70 [label="c = JsonConvert.DeserializeObject<Currency>(@''{''''Case'''':''''EUR''''}'')", span="153-153", cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.DeserializeBasicUnion()", file="JsonSerializer.cs"];
m8_72 [label="c = JsonConvert.DeserializeObject<Currency>(@''null'')", span="156-156", cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.DeserializeBasicUnion()", file="JsonSerializer.cs"];
m8_73 [label="Assert.AreEqual(null, c)", span="157-157", cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.DeserializeBasicUnion()", file="JsonSerializer.cs"];
m8_158 [label="ExceptionAssert.Throws<JsonSchemaException>(''Integer 10 equals maximum value of 10 and exclusive maximum is true.'',\r\n      () =>\r\n      {\r\n        JsonSchema schema = new JsonSchema();\r\n        schema.Maximum = 10;\r\n        schema.ExclusiveMaximum = true;\r\n\r\n        JValue v = new JValue(10);\r\n        v.Validate(schema);\r\n      })", span="241-250", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.ExclusiveMaximum_Int()", file="JsonSerializer.cs"];
m8_159 [label="Exit Newtonsoft.Json.Tests.Schema.ExtensionsTests.ExclusiveMaximum_Int()", span="239-239", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.ExclusiveMaximum_Int()", file="JsonSerializer.cs"];
m8_18 [label="Assert.AreEqual(5.0, r.length)", span="77-77", cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializeUnionWithConverter()", file="JsonSerializer.cs"];
m8_19 [label="Assert.AreEqual(10.0, r.width)", span="78-78", cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializeUnionWithConverter()", file="JsonSerializer.cs"];
m8_20 [label="Exit Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializeUnionWithConverter()", span="66-66", cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializeUnionWithConverter()", file="JsonSerializer.cs"];
m8_25 [label="Entry Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string, params Newtonsoft.Json.JsonConverter[])", span="787-787", cluster="Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string, params Newtonsoft.Json.JsonConverter[])", file="JsonSerializer.cs"];
m8_21 [label="Entry Newtonsoft.Json.Tests.TestObjects.Shape.NewRectangle(double, double)", span="72-72", cluster="Newtonsoft.Json.Tests.TestObjects.Shape.NewRectangle(double, double)", file="JsonSerializer.cs"];
m8_23 [label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object, params Newtonsoft.Json.JsonConverter[])", span="536-536", cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, params Newtonsoft.Json.JsonConverter[])", file="JsonSerializer.cs"];
m8_24 [label="Entry Unk.AreEqual", span="", cluster="Unk.AreEqual", file="JsonSerializer.cs"];
m8_26 [label="Entry Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializeBasicUnion()", span="82-82", cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializeBasicUnion()", file="JsonSerializer.cs"];
m8_27 [label="string json = JsonConvert.SerializeObject(Currency.AUD)", span="84-84", cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializeBasicUnion()", file="JsonSerializer.cs"];
m8_28 [label="Assert.AreEqual(@''{''''Case'''':''''AUD''''}'', json)", span="86-86", cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializeBasicUnion()", file="JsonSerializer.cs"];
m8_110 [label="UnionCase caseInfo = union.Cases.Single(c => c.Tag == tag)", span="220-220", cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.Serialize()", file="JsonSerializer.cs"];
m8_111 [label="object[] fields = caseInfo.FieldReader.Invoke(value)", span="222-222", cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.Serialize()", file="JsonSerializer.cs"];
m8_112 [label="Assert.AreEqual(10, fields[0])", span="224-224", cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.Serialize()", file="JsonSerializer.cs"];
m8_113 [label="Assert.AreEqual(5, fields[1])", span="225-225", cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.Serialize()", file="JsonSerializer.cs"];
m8_114 [label="Exit Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.Serialize()", span="212-212", cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.Serialize()", file="JsonSerializer.cs"];
m8_115 [label="GenerateSchemaAndSerializeFromType(new Person())", span="195-195", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.GenerateSchemaAndSerializeFromTypeTests()", file="JsonSerializer.cs"];
m8_116 [label="Entry System.Converter<TInput, TOutput>.Invoke(TInput)", span="0-0", cluster="System.Converter<TInput, TOutput>.Invoke(TInput)", file="JsonSerializer.cs"];
m8_117 [label="Entry Unk.Single", span="", cluster="Unk.Single", file="JsonSerializer.cs"];
m8_129 [label="Entry object.ToString()", span="0-0", cluster="object.ToString()", file="JsonSerializer.cs"];
m8_101 [label="Entry Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.UnionCase.UnionCase()", span="178-178", cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.UnionCase.UnionCase()", file="JsonSerializer.cs"];
m8_48 [label="Entry System.Diagnostics.Stopwatch.Stop()", span="0-0", cluster="System.Diagnostics.Stopwatch.Stop()", file="JsonSerializer.cs"];
m8_49 [label="Entry System.Console.WriteLine(double)", span="0-0", cluster="System.Console.WriteLine(double)", file="JsonSerializer.cs"];
m8_209 [label="Entry Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_SimpleUnique()", span="313-313", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_SimpleUnique()", file="JsonSerializer.cs"];
m8_213 [label="Assert.IsTrue(a.IsValid(schema))", span="319-319", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_SimpleUnique()", file="JsonSerializer.cs"];
m8_210 [label="JsonSchema schema = new JsonSchema()", span="315-315", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_SimpleUnique()", file="JsonSerializer.cs"];
m8_212 [label="JArray a = new JArray(1, 2, 3)", span="318-318", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_SimpleUnique()", file="JsonSerializer.cs"];
m8_211 [label="schema.UniqueItems = true", span="316-316", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_SimpleUnique()", file="JsonSerializer.cs"];
m8_214 [label="Exit Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_SimpleUnique()", span="313-313", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_SimpleUnique()", file="JsonSerializer.cs"];
m8_97 [label="Entry Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.Union.Union()", span="172-172", cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.Union.Union()", file="JsonSerializer.cs"];
m8_14 [label="Assert.AreEqual(@''{''''Case'''':''''Rectangle'''',''''Fields'''':[20.0,10.0]}'', json)", span="70-70", cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializeUnionWithConverter()", file="JsonSerializer.cs"];
m8_200 [label="Entry Newtonsoft.Json.Tests.Schema.ExtensionsTests.DivisibleBy_Int()", span="299-299", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.DivisibleBy_Int()", file="JsonSerializer.cs"];
m8_201 [label="ExceptionAssert.Throws<JsonSchemaException>(''Integer 10 is not evenly divisible by 3.'',\r\n        () =>\r\n          {\r\n            JsonSchema schema = new JsonSchema();\r\n            schema.DivisibleBy = 3;\r\n\r\n            JValue v = new JValue(10);\r\n            v.Validate(schema);\r\n          })", span="301-309", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.DivisibleBy_Int()", file="JsonSerializer.cs"];
m8_202 [label="Exit Newtonsoft.Json.Tests.Schema.ExtensionsTests.DivisibleBy_Int()", span="299-299", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.DivisibleBy_Int()", file="JsonSerializer.cs"];
m8_146 [label="Entry Newtonsoft.Json.Tests.Schema.ExtensionsTests.UndefinedPropertyOnNoPropertySchema()", span="219-219", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UndefinedPropertyOnNoPropertySchema()", file="JsonSerializer.cs"];
m8_147 [label="JsonSchema schema = JsonSchema.Parse(@''{\r\n  ''''description'''': ''''test'''',\r\n  ''''type'''': ''''object'''',\r\n  ''''additionalProperties'''': false,\r\n  ''''properties'''': {\r\n  }\r\n}'')", span="221-227", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UndefinedPropertyOnNoPropertySchema()", file="JsonSerializer.cs"];
m8_148 [label="JObject o = JObject.Parse(''{'g':1}'')", span="229-229", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UndefinedPropertyOnNoPropertySchema()", file="JsonSerializer.cs"];
m8_85 [label="u.Cases = new List<UnionCase>()", span="192-192", cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.CreateUnion(System.Type)", file="JsonSerializer.cs"];
m8_93 [label="unionCase.Constructor = FSharpFunc<object[], object>.ToConverter(FSharpValue.PreComputeUnionConstructor(unionCaseInfo, null))", span="203-203", cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.CreateUnion(System.Type)", file="JsonSerializer.cs"];
m8_92 [label="unionCase.FieldReader = FSharpFunc<object, object[]>.ToConverter(FSharpValue.PreComputeUnionReader(unionCaseInfo, null))", span="202-202", cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.CreateUnion(System.Type)", file="JsonSerializer.cs"];
m8_88 [label="UnionCase unionCase = new UnionCase()", span="198-198", cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.CreateUnion(System.Type)", file="JsonSerializer.cs"];
m8_91 [label="unionCase.Fields = unionCaseInfo.GetFields()", span="201-201", cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.CreateUnion(System.Type)", file="JsonSerializer.cs"];
m8_94 [label="u.Cases.Add(unionCase)", span="205-205", cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.CreateUnion(System.Type)", file="JsonSerializer.cs"];
m8_95 [label="return u;", span="208-208", cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.CreateUnion(System.Type)", file="JsonSerializer.cs"];
m8_86 [label="UnionCaseInfo[] cases = FSharpType.GetUnionCases(t, null)", span="194-194", cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.CreateUnion(System.Type)", file="JsonSerializer.cs"];
m8_87 [label=cases, span="196-196", cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.CreateUnion(System.Type)", file="JsonSerializer.cs"];
m8_89 [label="unionCase.Tag = unionCaseInfo.Tag", span="199-199", cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.CreateUnion(System.Type)", file="JsonSerializer.cs"];
m8_90 [label="unionCase.Name = unionCaseInfo.Name", span="200-200", cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.CreateUnion(System.Type)", file="JsonSerializer.cs"];
m8_96 [label="Exit Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.CreateUnion(System.Type)", span="187-187", cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.CreateUnion(System.Type)", file="JsonSerializer.cs"];
m8_30 [label="Entry Newtonsoft.Json.Linq.JToken.Validate(Newtonsoft.Json.Schema.JsonSchema, Newtonsoft.Json.Schema.ValidationEventHandler)", span="86-86", cluster="Newtonsoft.Json.Linq.JToken.Validate(Newtonsoft.Json.Schema.JsonSchema, Newtonsoft.Json.Schema.ValidationEventHandler)", file="JsonSerializer.cs"];
m8_266 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="JsonSerializer.cs"];
m8_5 [label="Entry Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.DoubleDoubleConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", span="52-52", cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.DoubleDoubleConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="JsonSerializer.cs"];
m8_6 [label="double d = (double)reader.Value", span="54-54", cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.DoubleDoubleConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="JsonSerializer.cs"];
m8_8 [label="Exit Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.DoubleDoubleConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", span="52-52", cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.DoubleDoubleConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="JsonSerializer.cs"];
m8_4 [label="Entry Newtonsoft.Json.JsonWriter.WriteValue(double)", span="875-875", cluster="Newtonsoft.Json.JsonWriter.WriteValue(double)", file="JsonSerializer.cs"];
m8_7 [label="return d / 2;", span="56-56", cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.DoubleDoubleConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="JsonSerializer.cs"];
m8_12 [label="Entry Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializeUnionWithConverter()", span="66-66", cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializeUnionWithConverter()", file="JsonSerializer.cs"];
m8_240 [label="Entry Newtonsoft.Json.Linq.JProperty.JProperty(string, object)", span="192-192", cluster="Newtonsoft.Json.Linq.JProperty.JProperty(string, object)", file="JsonSerializer.cs"];
m8_100 [label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting)", span="839-839", cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting)", file="JsonSerializer.cs"];
m8_181 [label="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests", span="", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.ExclusiveMinimum_Int()", file="JsonSerializer.cs"];
m8_182 [label=tag, span="", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.ExclusiveMinimum_Int()", file="JsonSerializer.cs"];
m8_29 [label="Exit Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializeBasicUnion()", span="82-82", cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializeBasicUnion()", file="JsonSerializer.cs"];
m8_142 [label="Exit Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.DeserializeBasicUnion_MismatchedFieldCount()", span="252-252", cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.DeserializeBasicUnion_MismatchedFieldCount()", file="JsonSerializer.cs"];
m8_16 [label="Assert.AreEqual(true, c.IsRectangle)", span="73-73", cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializeUnionWithConverter()", file="JsonSerializer.cs"];
m8_102 [label="Entry System.IO.StringReader.StringReader(string)", span="0-0", cluster="System.IO.StringReader.StringReader(string)", file="JsonSerializer.cs"];
m8_41 [label="Entry Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(string, System.Action)", span="121-121", cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(string, System.Action)", file="JsonSerializer.cs"];
m8_98 [label="Entry Unk.PreComputeUnionTagReader", span="", cluster="Unk.PreComputeUnionTagReader", file="JsonSerializer.cs"];
m8_179 [label="Entry Newtonsoft.Json.JsonSerializerSettings.JsonSerializerSettings()", span="359-359", cluster="Newtonsoft.Json.JsonSerializerSettings.JsonSerializerSettings()", file="JsonSerializer.cs"];
m8_228 [label="Entry Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_ComplexDuplicate()", span="337-337", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_ComplexDuplicate()", file="JsonSerializer.cs"];
m8_234 [label="Assert.AreEqual(3, errorMessages.Count)", span="345-345", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_ComplexDuplicate()", file="JsonSerializer.cs"];
m8_235 [label="Assert.AreEqual(''Non-unique array item at index 4.'', errorMessages[0])", span="346-346", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_ComplexDuplicate()", file="JsonSerializer.cs"];
m8_236 [label="Assert.AreEqual(''Non-unique array item at index 6.'', errorMessages[1])", span="347-347", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_ComplexDuplicate()", file="JsonSerializer.cs"];
m8_237 [label="Assert.AreEqual(''Non-unique array item at index 7.'', errorMessages[2])", span="348-348", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_ComplexDuplicate()", file="JsonSerializer.cs"];
m8_233 [label="Assert.IsFalse(a.IsValid(schema, out errorMessages))", span="344-344", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_ComplexDuplicate()", file="JsonSerializer.cs"];
m8_229 [label="JsonSchema schema = new JsonSchema()", span="339-339", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_ComplexDuplicate()", file="JsonSerializer.cs"];
m8_231 [label="JArray a = new JArray(1, new JObject(new JProperty(''value'', ''value!'')), 3, 2, new JObject(new JProperty(''value'', ''value!'')), 4, 2, new JObject(new JProperty(''value'', ''value!'')))", span="342-342", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_ComplexDuplicate()", file="JsonSerializer.cs"];
m8_232 [label="IList<string> errorMessages", span="343-343", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_ComplexDuplicate()", file="JsonSerializer.cs"];
m8_230 [label="schema.UniqueItems = true", span="340-340", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_ComplexDuplicate()", file="JsonSerializer.cs"];
m8_238 [label="Exit Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_ComplexDuplicate()", span="337-337", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_ComplexDuplicate()", file="JsonSerializer.cs"];
m8_190 [label="Entry Newtonsoft.Json.Tests.Schema.ExtensionsTests.ExclusiveMinimum_Float()", span="284-284", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.ExclusiveMinimum_Float()", file="JsonSerializer.cs"];
m8_191 [label="ExceptionAssert.Throws<JsonSchemaException>(''Float 10.1 equals minimum value of 10.1 and exclusive minimum is true.'',\r\n      () =>\r\n      {\r\n        JsonSchema schema = new JsonSchema();\r\n        schema.Minimum = 10.1;\r\n        schema.ExclusiveMinimum = true;\r\n\r\n        JValue v = new JValue(10.1);\r\n        v.Validate(schema);\r\n      })", span="286-295", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.ExclusiveMinimum_Float()", file="JsonSerializer.cs"];
m8_192 [label="Exit Newtonsoft.Json.Tests.Schema.ExtensionsTests.ExclusiveMinimum_Float()", span="284-284", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.ExclusiveMinimum_Float()", file="JsonSerializer.cs"];
m8_140 [label="Entry Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.DeserializeBasicUnion_MismatchedFieldCount()", span="252-252", cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.DeserializeBasicUnion_MismatchedFieldCount()", file="JsonSerializer.cs"];
m8_74 [label="Exit Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.DeserializeBasicUnion()", span="148-148", cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.DeserializeBasicUnion()", file="JsonSerializer.cs"];
m8_47 [label="Entry Newtonsoft.Json.Linq.JToken.Validate(Newtonsoft.Json.Schema.JsonSchema)", span="75-75", cluster="Newtonsoft.Json.Linq.JToken.Validate(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSerializer.cs"];
m8_141 [label="ExceptionAssert.Throws<JsonSerializationException>(() => JsonConvert.DeserializeObject<Currency>(@''{''''Case'''':''''AUD'''',''''Fields'''':[1]}''), ''The number of field values does not match the number of properties definied by union 'AUD'. Path '', line 1, position 27.'')", span="254-254", cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.DeserializeBasicUnion_MismatchedFieldCount()", file="JsonSerializer.cs"];
m8_216 [label="Entry Unk.IsTrue", span="", cluster="Unk.IsTrue", file="JsonSerializer.cs"];
m8_255 [label="Entry Newtonsoft.Json.Tests.Schema.ExtensionsTests.Enum_Properties()", span="382-382", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.Enum_Properties()", file="JsonSerializer.cs"];
m8_261 [label="Assert.AreEqual(0, errorMessages.Count)", span="405-405", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.Enum_Properties()", file="JsonSerializer.cs"];
m8_264 [label="Assert.AreEqual(1, errorMessages.Count)", span="411-411", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.Enum_Properties()", file="JsonSerializer.cs"];
m8_260 [label="Assert.IsTrue(o.IsValid(schema, out errorMessages))", span="404-404", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.Enum_Properties()", file="JsonSerializer.cs"];
m8_263 [label="Assert.IsFalse(o.IsValid(schema, out errorMessages))", span="410-410", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.Enum_Properties()", file="JsonSerializer.cs"];
m8_257 [label="schema.Properties = new Dictionary<string, JsonSchema>\r\n        {\r\n          {\r\n            ''bar'',\r\n            new JsonSchema\r\n            {\r\n              Enum = new List<JToken>\r\n                {\r\n                  new JValue(1),\r\n                  new JValue(2)\r\n                }\r\n            }\r\n          }\r\n        }", span="385-398", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.Enum_Properties()", file="JsonSerializer.cs"];
m8_262 [label="o = new JObject(\r\n        new JProperty(''bar'', 3)\r\n        )", span="407-409", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.Enum_Properties()", file="JsonSerializer.cs"];
m8_256 [label="JsonSchema schema = new JsonSchema()", span="384-384", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.Enum_Properties()", file="JsonSerializer.cs"];
m8_258 [label="JObject o = new JObject(\r\n        new JProperty(''bar'', 1)\r\n        )", span="400-402", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.Enum_Properties()", file="JsonSerializer.cs"];
m8_259 [label="IList<string> errorMessages", span="403-403", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.Enum_Properties()", file="JsonSerializer.cs"];
m8_265 [label="Exit Newtonsoft.Json.Tests.Schema.ExtensionsTests.Enum_Properties()", span="382-382", cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.Enum_Properties()", file="JsonSerializer.cs"];
m8_215 [label="Entry Newtonsoft.Json.Linq.JArray.JArray(params object[])", span="81-81", cluster="Newtonsoft.Json.Linq.JArray.JArray(params object[])", file="JsonSerializer.cs"];
m8_286 [label=errors, span="", file="JsonSerializer.cs"];
m8_287 [label=errors, span="", file="JsonSerializer.cs"];
m8_290 [label=errors, span="", file="JsonSerializer.cs"];
m8_285 [label=errors, span="", file="JsonSerializer.cs"];
m8_289 [label="Newtonsoft.Json.Tests.Schema.ExtensionsTests", span="", file="JsonSerializer.cs"];
m8_288 [label=errors, span="", file="JsonSerializer.cs"];
m9_101 [label="Entry Newtonsoft.Json.Linq.JRaw.Create(Newtonsoft.Json.JsonReader)", span="58-58", cluster="Newtonsoft.Json.Linq.JRaw.Create(Newtonsoft.Json.JsonReader)", file="JsonSerializerInternalReader.cs"];
m9_291 [label="Entry Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateNewObject(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonProperty, string, out bool)", span="2259-2259", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateNewObject(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonProperty, string, out bool)", file="JsonSerializerInternalReader.cs"];
m9_1071 [label="object newObject = null", span="2261-2261", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateNewObject(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonProperty, string, out bool)", file="JsonSerializerInternalReader.cs"];
m9_1072 [label="objectContract.OverrideCreator != null", span="2263-2263", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateNewObject(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonProperty, string, out bool)", file="JsonSerializerInternalReader.cs"];
m9_1073 [label="objectContract.CreatorParameters.Count > 0", span="2265-2265", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateNewObject(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonProperty, string, out bool)", file="JsonSerializerInternalReader.cs"];
m9_1075 [label="return CreateObjectUsingCreatorWithParameters(reader, objectContract, containerMember, objectContract.OverrideCreator, id);", span="2268-2268", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateNewObject(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonProperty, string, out bool)", file="JsonSerializerInternalReader.cs"];
m9_1076 [label="newObject = objectContract.OverrideCreator(new object[0])", span="2271-2271", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateNewObject(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonProperty, string, out bool)", file="JsonSerializerInternalReader.cs"];
m9_1077 [label="objectContract.DefaultCreator != null &&\r\n                     (!objectContract.DefaultCreatorNonPublic || Serializer._constructorHandling == ConstructorHandling.AllowNonPublicDefaultConstructor || objectContract.ParameterizedCreator == null)", span="2273-2274", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateNewObject(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonProperty, string, out bool)", file="JsonSerializerInternalReader.cs"];
m9_1078 [label="newObject = objectContract.DefaultCreator()", span="2280-2280", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateNewObject(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonProperty, string, out bool)", file="JsonSerializerInternalReader.cs"];
m9_1079 [label="objectContract.ParameterizedCreator != null", span="2282-2282", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateNewObject(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonProperty, string, out bool)", file="JsonSerializerInternalReader.cs"];
m9_1081 [label="return CreateObjectUsingCreatorWithParameters(reader, objectContract, containerMember, objectContract.ParameterizedCreator, id);", span="2285-2285", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateNewObject(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonProperty, string, out bool)", file="JsonSerializerInternalReader.cs"];
m9_1083 [label="!objectContract.IsInstantiable", span="2290-2290", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateNewObject(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonProperty, string, out bool)", file="JsonSerializerInternalReader.cs"];
m9_1084 [label="throw JsonSerializationException.Create(reader, ''Could not create an instance of type {0}. Type is an interface or abstract class and cannot be instantiated.''.FormatWith(CultureInfo.InvariantCulture, objectContract.UnderlyingType));", span="2292-2292", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateNewObject(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonProperty, string, out bool)", file="JsonSerializerInternalReader.cs"];
m9_1085 [label="throw JsonSerializationException.Create(reader, ''Unable to find a constructor to use for type {0}. A class should either have a default constructor, one constructor with arguments or a constructor marked with the JsonConstructor attribute.''.FormatWith(CultureInfo.InvariantCulture, objectContract.UnderlyingType));", span="2295-2295", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateNewObject(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonProperty, string, out bool)", file="JsonSerializerInternalReader.cs"];
m9_1082 [label="newObject == null", span="2288-2288", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateNewObject(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonProperty, string, out bool)", file="JsonSerializerInternalReader.cs"];
m9_1087 [label="return newObject;", span="2299-2299", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateNewObject(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonProperty, string, out bool)", file="JsonSerializerInternalReader.cs"];
m9_1074 [label="createdFromNonDefaultCreator = true", span="2267-2267", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateNewObject(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonProperty, string, out bool)", file="JsonSerializerInternalReader.cs"];
m9_1080 [label="createdFromNonDefaultCreator = true", span="2284-2284", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateNewObject(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonProperty, string, out bool)", file="JsonSerializerInternalReader.cs"];
m9_1086 [label="createdFromNonDefaultCreator = false", span="2298-2298", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateNewObject(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonProperty, string, out bool)", file="JsonSerializerInternalReader.cs"];
m9_1088 [label="Exit Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateNewObject(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonProperty, string, out bool)", span="2259-2259", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateNewObject(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.JsonProperty, string, out bool)", file="JsonSerializerInternalReader.cs"];
m9_635 [label="Entry Newtonsoft.Json.Serialization.JsonDictionaryContract.CreateTemporaryDictionary()", span="229-229", cluster="Newtonsoft.Json.Serialization.JsonDictionaryContract.CreateTemporaryDictionary()", file="JsonSerializerInternalReader.cs"];
m9_0 [label="Entry Newtonsoft.Json.Serialization.JsonSerializerInternalReader.JsonSerializerInternalReader(Newtonsoft.Json.JsonSerializer)", span="60-60", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.JsonSerializerInternalReader(Newtonsoft.Json.JsonSerializer)", file="JsonSerializerInternalReader.cs"];
m9_1 [label="Exit Newtonsoft.Json.Serialization.JsonSerializerInternalReader.JsonSerializerInternalReader(Newtonsoft.Json.JsonSerializer)", span="60-60", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.JsonSerializerInternalReader(Newtonsoft.Json.JsonSerializer)", file="JsonSerializerInternalReader.cs"];
m9_471 [label="Entry System.Array.CreateInstance(System.Type, int)", span="0-0", cluster="System.Array.CreateInstance(System.Type, int)", file="JsonSerializerInternalReader.cs"];
m9_33 [label="Entry Newtonsoft.Json.JsonSerializationException.Create(Newtonsoft.Json.JsonReader, string)", span="82-82", cluster="Newtonsoft.Json.JsonSerializationException.Create(Newtonsoft.Json.JsonReader, string)", file="JsonSerializerInternalReader.cs"];
m9_530 [label="Entry System.Action<T1, T2>.Invoke(T1, T2)", span="0-0", cluster="System.Action<T1, T2>.Invoke(T1, T2)", file="JsonSerializerInternalReader.cs"];
m9_503 [label="Entry Newtonsoft.Json.Utilities.MiscellaneousUtils.FormatValueForPrint(object)", span="146-146", cluster="Newtonsoft.Json.Utilities.MiscellaneousUtils.FormatValueForPrint(object)", file="JsonSerializerInternalReader.cs"];
m9_984 [label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.List<T>.Add(T)", file="JsonSerializerInternalReader.cs"];
m9_496 [label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.GetObjectType(object)", span="148-148", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetObjectType(object)", file="JsonSerializerInternalReader.cs"];
m9_41 [label="Entry Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateDictionary(System.Collections.IDictionary, Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonDictionaryContract, Newtonsoft.Json.Serialization.JsonProperty, string)", span="1306-1306", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateDictionary(System.Collections.IDictionary, Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonDictionaryContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_648 [label="IWrappedDictionary wrappedDictionary = dictionary as IWrappedDictionary", span="1308-1308", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateDictionary(System.Collections.IDictionary, Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonDictionaryContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_649 [label="object underlyingDictionary = wrappedDictionary != null ? wrappedDictionary.UnderlyingDictionary : dictionary", span="1309-1309", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateDictionary(System.Collections.IDictionary, Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonDictionaryContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_650 [label="id != null", span="1311-1311", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateDictionary(System.Collections.IDictionary, Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonDictionaryContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_651 [label="AddReference(reader, id, underlyingDictionary)", span="1313-1313", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateDictionary(System.Collections.IDictionary, Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonDictionaryContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_652 [label="OnDeserializing(reader, contract, underlyingDictionary)", span="1316-1316", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateDictionary(System.Collections.IDictionary, Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonDictionaryContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_653 [label="int initialDepth = reader.Depth", span="1318-1318", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateDictionary(System.Collections.IDictionary, Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonDictionaryContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_654 [label="contract.KeyContract == null", span="1320-1320", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateDictionary(System.Collections.IDictionary, Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonDictionaryContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_655 [label="contract.KeyContract = GetContractSafe(contract.DictionaryKeyType)", span="1322-1322", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateDictionary(System.Collections.IDictionary, Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonDictionaryContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_656 [label="contract.ItemContract == null", span="1325-1325", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateDictionary(System.Collections.IDictionary, Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonDictionaryContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_657 [label="contract.ItemContract = GetContractSafe(contract.DictionaryValueType)", span="1327-1327", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateDictionary(System.Collections.IDictionary, Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonDictionaryContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_658 [label="JsonConverter dictionaryValueConverter = contract.ItemConverter ?? GetConverter(contract.ItemContract, null, contract, containerProperty)", span="1330-1330", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateDictionary(System.Collections.IDictionary, Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonDictionaryContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_659 [label="PrimitiveTypeCode keyTypeCode = (contract.KeyContract is JsonPrimitiveContract) ? ((JsonPrimitiveContract)contract.KeyContract).TypeCode : PrimitiveTypeCode.Empty", span="1331-1331", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateDictionary(System.Collections.IDictionary, Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonDictionaryContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_661 [label="reader.TokenType", span="1336-1336", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateDictionary(System.Collections.IDictionary, Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonDictionaryContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_663 [label="object keyValue = reader.Value", span="1339-1339", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateDictionary(System.Collections.IDictionary, Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonDictionaryContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_664 [label="CheckPropertyName(reader, keyValue.ToString())", span="1340-1340", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateDictionary(System.Collections.IDictionary, Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonDictionaryContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_669 [label="DateTimeUtils.TryParseDateTime(keyValue.ToString(), reader.DateTimeZoneHandling, reader.DateFormatString, reader.Culture, out dt)", span="1356-1356", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateDictionary(System.Collections.IDictionary, Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonDictionaryContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_671 [label="keyValue = EnsureType(reader, keyValue, CultureInfo.InvariantCulture, contract.KeyContract, contract.DictionaryKeyType)", span="1362-1362", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateDictionary(System.Collections.IDictionary, Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonDictionaryContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_675 [label="DateTimeUtils.TryParseDateTimeOffset(keyValue.ToString(), reader.DateFormatString, reader.Culture, out dt)", span="1371-1371", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateDictionary(System.Collections.IDictionary, Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonDictionaryContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_677 [label="keyValue = EnsureType(reader, keyValue, CultureInfo.InvariantCulture, contract.KeyContract, contract.DictionaryKeyType)", span="1377-1377", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateDictionary(System.Collections.IDictionary, Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonDictionaryContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_678 [label="keyValue = EnsureType(reader, keyValue, CultureInfo.InvariantCulture, contract.KeyContract, contract.DictionaryKeyType)", span="1383-1383", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateDictionary(System.Collections.IDictionary, Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonDictionaryContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_680 [label="throw JsonSerializationException.Create(reader, ''Could not convert string '{0}' to dictionary key type '{1}'. Create a TypeConverter to convert from the string to the key type object.''.FormatWith(CultureInfo.InvariantCulture, reader.Value, contract.DictionaryKeyType), ex);", span="1389-1389", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateDictionary(System.Collections.IDictionary, Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonDictionaryContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_681 [label="!ReadForType(reader, contract.ItemContract, dictionaryValueConverter != null)", span="1392-1392", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateDictionary(System.Collections.IDictionary, Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonDictionaryContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_682 [label="throw JsonSerializationException.Create(reader, ''Unexpected end when deserializing object.'');", span="1394-1394", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateDictionary(System.Collections.IDictionary, Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonDictionaryContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_685 [label="itemValue = DeserializeConvertable(dictionaryValueConverter, reader, contract.DictionaryValueType, null)", span="1400-1400", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateDictionary(System.Collections.IDictionary, Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonDictionaryContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_686 [label="itemValue = CreateValueInternal(reader, contract.DictionaryValueType, contract.ItemContract, null, contract, containerProperty, null)", span="1404-1404", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateDictionary(System.Collections.IDictionary, Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonDictionaryContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_687 [label="dictionary[keyValue] = itemValue", span="1407-1407", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateDictionary(System.Collections.IDictionary, Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonDictionaryContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_689 [label="IsErrorHandled(underlyingDictionary, contract, keyValue, reader as IJsonLineInfo, reader.Path, ex)", span="1411-1411", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateDictionary(System.Collections.IDictionary, Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonDictionaryContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_690 [label="HandleError(reader, true, initialDepth)", span="1413-1413", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateDictionary(System.Collections.IDictionary, Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonDictionaryContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_695 [label="throw JsonSerializationException.Create(reader, ''Unexpected token when deserializing object: '' + reader.TokenType);", span="1427-1427", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateDictionary(System.Collections.IDictionary, Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonDictionaryContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_696 [label="!finished && reader.Read()", span="1429-1429", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateDictionary(System.Collections.IDictionary, Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonDictionaryContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_698 [label="ThrowUnexpectedEndException(reader, contract, underlyingDictionary, ''Unexpected end when deserializing object.'')", span="1433-1433", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateDictionary(System.Collections.IDictionary, Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonDictionaryContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_699 [label="OnDeserialized(reader, contract, underlyingDictionary)", span="1436-1436", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateDictionary(System.Collections.IDictionary, Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonDictionaryContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_700 [label="return underlyingDictionary;", span="1437-1437", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateDictionary(System.Collections.IDictionary, Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonDictionaryContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_684 [label="dictionaryValueConverter != null && dictionaryValueConverter.CanRead", span="1398-1398", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateDictionary(System.Collections.IDictionary, Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonDictionaryContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_660 [label="bool finished = false", span="1333-1333", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateDictionary(System.Collections.IDictionary, Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonDictionaryContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_665 [label=keyTypeCode, span="1350-1350", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateDictionary(System.Collections.IDictionary, Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonDictionaryContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_662 [label="JsonToken.PropertyName", span="1338-1338", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateDictionary(System.Collections.IDictionary, Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonDictionaryContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_692 [label="JsonToken.Comment", span="1421-1421", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateDictionary(System.Collections.IDictionary, Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonDictionaryContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_693 [label="JsonToken.EndObject", span="1423-1423", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateDictionary(System.Collections.IDictionary, Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonDictionaryContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_666 [label="PrimitiveTypeCode.DateTime", span="1352-1352", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateDictionary(System.Collections.IDictionary, Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonDictionaryContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_672 [label="PrimitiveTypeCode.DateTimeOffset", span="1367-1367", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateDictionary(System.Collections.IDictionary, Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonDictionaryContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_667 [label="PrimitiveTypeCode.DateTimeNullable", span="1353-1353", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateDictionary(System.Collections.IDictionary, Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonDictionaryContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_668 [label="DateTime dt", span="1355-1355", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateDictionary(System.Collections.IDictionary, Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonDictionaryContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_670 [label="keyValue = dt", span="1358-1358", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateDictionary(System.Collections.IDictionary, Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonDictionaryContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_673 [label="PrimitiveTypeCode.DateTimeOffsetNullable", span="1368-1368", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateDictionary(System.Collections.IDictionary, Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonDictionaryContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_674 [label="DateTimeOffset dt", span="1370-1370", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateDictionary(System.Collections.IDictionary, Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonDictionaryContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_676 [label="keyValue = dt", span="1373-1373", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateDictionary(System.Collections.IDictionary, Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonDictionaryContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_679 [label=Exception, span="1387-1387", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateDictionary(System.Collections.IDictionary, Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonDictionaryContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_683 [label="object itemValue", span="1397-1397", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateDictionary(System.Collections.IDictionary, Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonDictionaryContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_688 [label=Exception, span="1409-1409", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateDictionary(System.Collections.IDictionary, Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonDictionaryContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_691 [label="throw;", span="1417-1417", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateDictionary(System.Collections.IDictionary, Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonDictionaryContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_694 [label="finished = true", span="1424-1424", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateDictionary(System.Collections.IDictionary, Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonDictionaryContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_697 [label="!finished", span="1431-1431", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateDictionary(System.Collections.IDictionary, Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonDictionaryContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_701 [label="Exit Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateDictionary(System.Collections.IDictionary, Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonDictionaryContract, Newtonsoft.Json.Serialization.JsonProperty, string)", span="1306-1306", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.PopulateDictionary(System.Collections.IDictionary, Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonDictionaryContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_165 [label="Entry System.Convert.FromBase64String(string)", span="0-0", cluster="System.Convert.FromBase64String(string)", file="JsonSerializerInternalReader.cs"];
m9_528 [label="Entry Newtonsoft.Json.Serialization.JsonSerializerInternalReader.ShouldSetPropertyValue(Newtonsoft.Json.Serialization.JsonProperty, object)", span="1155-1155", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.ShouldSetPropertyValue(Newtonsoft.Json.Serialization.JsonProperty, object)", file="JsonSerializerInternalReader.cs"];
m9_576 [label="property.NullValueHandling.GetValueOrDefault(Serializer._nullValueHandling) == NullValueHandling.Ignore && value == null", span="1157-1157", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.ShouldSetPropertyValue(Newtonsoft.Json.Serialization.JsonProperty, object)", file="JsonSerializerInternalReader.cs"];
m9_578 [label="HasFlag(property.DefaultValueHandling.GetValueOrDefault(Serializer._defaultValueHandling), DefaultValueHandling.Ignore)\r\n                && !HasFlag(property.DefaultValueHandling.GetValueOrDefault(Serializer._defaultValueHandling), DefaultValueHandling.Populate)\r\n                && MiscellaneousUtils.ValueEquals(value, property.GetResolvedDefaultValue())", span="1162-1164", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.ShouldSetPropertyValue(Newtonsoft.Json.Serialization.JsonProperty, object)", file="JsonSerializerInternalReader.cs"];
m9_580 [label="!property.Writable", span="1169-1169", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.ShouldSetPropertyValue(Newtonsoft.Json.Serialization.JsonProperty, object)", file="JsonSerializerInternalReader.cs"];
m9_577 [label="return false;", span="1159-1159", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.ShouldSetPropertyValue(Newtonsoft.Json.Serialization.JsonProperty, object)", file="JsonSerializerInternalReader.cs"];
m9_579 [label="return false;", span="1166-1166", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.ShouldSetPropertyValue(Newtonsoft.Json.Serialization.JsonProperty, object)", file="JsonSerializerInternalReader.cs"];
m9_581 [label="return false;", span="1171-1171", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.ShouldSetPropertyValue(Newtonsoft.Json.Serialization.JsonProperty, object)", file="JsonSerializerInternalReader.cs"];
m9_582 [label="return true;", span="1174-1174", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.ShouldSetPropertyValue(Newtonsoft.Json.Serialization.JsonProperty, object)", file="JsonSerializerInternalReader.cs"];
m9_583 [label="Exit Newtonsoft.Json.Serialization.JsonSerializerInternalReader.ShouldSetPropertyValue(Newtonsoft.Json.Serialization.JsonProperty, object)", span="1155-1155", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.ShouldSetPropertyValue(Newtonsoft.Json.Serialization.JsonProperty, object)", file="JsonSerializerInternalReader.cs"];
m9_31 [label="Entry Newtonsoft.Json.Serialization.IContractResolver.ResolveContract(System.Type)", span="43-43", cluster="Newtonsoft.Json.Serialization.IContractResolver.ResolveContract(System.Type)", file="JsonSerializerInternalReader.cs"];
m9_1006 [label="Entry Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", span="54-54", cluster="Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="JsonSerializerInternalReader.cs"];
m9_469 [label="Entry System.Type.GetArrayRank()", span="0-0", cluster="System.Type.GetArrayRank()", file="JsonSerializerInternalReader.cs"];
m9_348 [label="Entry Newtonsoft.Json.JsonSerializationException.Create(Newtonsoft.Json.IJsonLineInfo, string, string, System.Exception)", span="92-92", cluster="Newtonsoft.Json.JsonSerializationException.Create(Newtonsoft.Json.IJsonLineInfo, string, string, System.Exception)", file="JsonSerializerInternalReader.cs"];
m9_472 [label="Entry System.Collections.ICollection.CopyTo(System.Array, int)", span="0-0", cluster="System.Collections.ICollection.CopyTo(System.Array, int)", file="JsonSerializerInternalReader.cs"];
m9_985 [label="Entry System.Collections.Generic.IEnumerable<TSource>.ForgivingCaseSensitiveFind<TSource>(System.Func<TSource, string>, string)", span="146-146", cluster="System.Collections.Generic.IEnumerable<TSource>.ForgivingCaseSensitiveFind<TSource>(System.Func<TSource, string>, string)", file="JsonSerializerInternalReader.cs"];
m9_642 [label="Entry Newtonsoft.Json.Serialization.JsonSerializerInternalReader.OnDeserialized(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonContract, object)", span="1296-1296", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.OnDeserialized(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonContract, object)", file="JsonSerializerInternalReader.cs"];
m9_643 [label="TraceWriter != null && TraceWriter.LevelFilter >= TraceLevel.Info", span="1298-1298", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.OnDeserialized(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonContract, object)", file="JsonSerializerInternalReader.cs"];
m9_644 [label="TraceWriter.Trace(TraceLevel.Info, JsonPosition.FormatMessage(reader as IJsonLineInfo, reader.Path, ''Finished deserializing {0}''.FormatWith(CultureInfo.InvariantCulture, contract.UnderlyingType)), null)", span="1300-1300", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.OnDeserialized(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonContract, object)", file="JsonSerializerInternalReader.cs"];
m9_645 [label="contract.InvokeOnDeserialized(value, Serializer._context)", span="1303-1303", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.OnDeserialized(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonContract, object)", file="JsonSerializerInternalReader.cs"];
m9_646 [label="Exit Newtonsoft.Json.Serialization.JsonSerializerInternalReader.OnDeserialized(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonContract, object)", span="1296-1296", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.OnDeserialized(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonContract, object)", file="JsonSerializerInternalReader.cs"];
m9_295 [label="Entry Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateISerializable(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonISerializableContract, Newtonsoft.Json.Serialization.JsonProperty, string)", span="1691-1691", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateISerializable(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonISerializableContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_809 [label="Type objectType = contract.UnderlyingType", span="1693-1693", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateISerializable(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonISerializableContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_813 [label="throw JsonSerializationException.Create(reader, message);", span="1701-1701", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateISerializable(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonISerializableContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_815 [label="TraceWriter.Trace(TraceLevel.Info, JsonPosition.FormatMessage(reader as IJsonLineInfo, reader.Path, ''Deserializing {0} using ISerializable constructor.''.FormatWith(CultureInfo.InvariantCulture, contract.UnderlyingType)), null)", span="1706-1706", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateISerializable(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonISerializableContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_816 [label="SerializationInfo serializationInfo = new SerializationInfo(contract.UnderlyingType, new JsonFormatterConverter(this, contract, member))", span="1709-1709", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateISerializable(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonISerializableContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_818 [label="reader.TokenType", span="1714-1714", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateISerializable(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonISerializableContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_820 [label="string memberName = reader.Value.ToString()", span="1717-1717", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateISerializable(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonISerializableContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_821 [label="!reader.Read()", span="1718-1718", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateISerializable(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonISerializableContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_822 [label="throw JsonSerializationException.Create(reader, ''Unexpected end when setting {0}'s value.''.FormatWith(CultureInfo.InvariantCulture, memberName));", span="1720-1720", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateISerializable(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonISerializableContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_823 [label="serializationInfo.AddValue(memberName, JToken.ReadFrom(reader))", span="1722-1722", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateISerializable(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonISerializableContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_827 [label="throw JsonSerializationException.Create(reader, ''Unexpected token when deserializing object: '' + reader.TokenType);", span="1730-1730", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateISerializable(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonISerializableContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_828 [label="!finished && reader.Read()", span="1732-1732", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateISerializable(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonISerializableContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_830 [label="ThrowUnexpectedEndException(reader, contract, serializationInfo, ''Unexpected end when deserializing object.'')", span="1736-1736", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateISerializable(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonISerializableContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_831 [label="contract.ISerializableCreator == null", span="1739-1739", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateISerializable(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonISerializableContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_832 [label="throw JsonSerializationException.Create(reader, ''ISerializable type '{0}' does not have a valid constructor. To correctly implement ISerializable a constructor that takes SerializationInfo and StreamingContext parameters should be present.''.FormatWith(CultureInfo.InvariantCulture, objectType));", span="1741-1741", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateISerializable(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonISerializableContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_833 [label="object createdObject = contract.ISerializableCreator(serializationInfo, Serializer._context)", span="1744-1744", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateISerializable(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonISerializableContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_834 [label="id != null", span="1746-1746", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateISerializable(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonISerializableContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_835 [label="AddReference(reader, id, createdObject)", span="1748-1748", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateISerializable(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonISerializableContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_836 [label="OnDeserializing(reader, contract, createdObject)", span="1752-1752", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateISerializable(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonISerializableContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_837 [label="OnDeserialized(reader, contract, createdObject)", span="1753-1753", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateISerializable(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonISerializableContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_810 [label="!JsonTypeReflector.FullyTrusted", span="1695-1695", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateISerializable(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonISerializableContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_812 [label="message = message.FormatWith(CultureInfo.InvariantCulture, objectType)", span="1699-1699", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateISerializable(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonISerializableContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_811 [label="string message = @''Type '{0}' implements ISerializable but cannot be deserialized using the ISerializable interface because the current application is not fully trusted and ISerializable can expose secure data.'' + Environment.NewLine +\r\n                                 @''To fix this error either change the environment to be fully trusted, change the application to not deserialize the type, add JsonObjectAttribute to the type or change the JsonSerializer setting ContractResolver to use a new DefaultContractResolver with IgnoreSerializableInterface set to true.'' + Environment.NewLine", span="1697-1698", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateISerializable(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonISerializableContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_814 [label="TraceWriter != null && TraceWriter.LevelFilter >= TraceLevel.Info", span="1704-1704", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateISerializable(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonISerializableContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_817 [label="bool finished = false", span="1711-1711", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateISerializable(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonISerializableContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_819 [label="JsonToken.PropertyName", span="1716-1716", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateISerializable(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonISerializableContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_824 [label="JsonToken.Comment", span="1724-1724", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateISerializable(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonISerializableContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_825 [label="JsonToken.EndObject", span="1726-1726", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateISerializable(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonISerializableContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_826 [label="finished = true", span="1727-1727", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateISerializable(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonISerializableContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_829 [label="!finished", span="1734-1734", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateISerializable(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonISerializableContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_838 [label="return createdObject;", span="1755-1755", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateISerializable(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonISerializableContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_839 [label="Exit Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateISerializable(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonISerializableContract, Newtonsoft.Json.Serialization.JsonProperty, string)", span="1691-1691", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateISerializable(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonISerializableContract, Newtonsoft.Json.Serialization.JsonProperty, string)", file="JsonSerializerInternalReader.cs"];
m9_566 [label="Entry Newtonsoft.Json.Serialization.JsonSerializerInternalReader.AddReference(Newtonsoft.Json.JsonReader, string, object)", span="1133-1133", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.AddReference(Newtonsoft.Json.JsonReader, string, object)", file="JsonSerializerInternalReader.cs"];
m9_567 [label="TraceWriter != null && TraceWriter.LevelFilter >= TraceLevel.Verbose", span="1137-1137", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.AddReference(Newtonsoft.Json.JsonReader, string, object)", file="JsonSerializerInternalReader.cs"];
m9_568 [label="TraceWriter.Trace(TraceLevel.Verbose, JsonPosition.FormatMessage(reader as IJsonLineInfo, reader.Path, ''Read object reference Id '{0}' for {1}.''.FormatWith(CultureInfo.InvariantCulture, id, value.GetType())), null)", span="1139-1139", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.AddReference(Newtonsoft.Json.JsonReader, string, object)", file="JsonSerializerInternalReader.cs"];
m9_569 [label="Serializer.GetReferenceResolver().AddReference(this, id, value)", span="1142-1142", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.AddReference(Newtonsoft.Json.JsonReader, string, object)", file="JsonSerializerInternalReader.cs"];
m9_571 [label="throw JsonSerializationException.Create(reader, ''Error reading object reference '{0}'.''.FormatWith(CultureInfo.InvariantCulture, id), ex);", span="1146-1146", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.AddReference(Newtonsoft.Json.JsonReader, string, object)", file="JsonSerializerInternalReader.cs"];
m9_570 [label=Exception, span="1144-1144", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.AddReference(Newtonsoft.Json.JsonReader, string, object)", file="JsonSerializerInternalReader.cs"];
m9_572 [label="Exit Newtonsoft.Json.Serialization.JsonSerializerInternalReader.AddReference(Newtonsoft.Json.JsonReader, string, object)", span="1133-1133", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.AddReference(Newtonsoft.Json.JsonReader, string, object)", file="JsonSerializerInternalReader.cs"];
m9_75 [label="Entry Newtonsoft.Json.Serialization.JsonSerializerInternalReader.ReadForType(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonContract, bool)", span="2209-2209", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.ReadForType(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonContract, bool)", file="JsonSerializerInternalReader.cs"];
m9_1041 [label=hasConverter, span="2213-2213", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.ReadForType(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonContract, bool)", file="JsonSerializerInternalReader.cs"];
m9_1042 [label="return reader.Read();", span="2215-2215", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.ReadForType(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonContract, bool)", file="JsonSerializerInternalReader.cs"];
m9_1043 [label="ReadType t = (contract != null) ? contract.InternalReadType : ReadType.Read", span="2218-2218", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.ReadForType(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonContract, bool)", file="JsonSerializerInternalReader.cs"];
m9_1046 [label="!reader.Read()", span="2225-2225", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.ReadForType(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonContract, bool)", file="JsonSerializerInternalReader.cs"];
m9_1048 [label="reader.TokenType == JsonToken.Comment", span="2229-2229", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.ReadForType(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonContract, bool)", file="JsonSerializerInternalReader.cs"];
m9_1051 [label="reader.ReadAsInt32()", span="2233-2233", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.ReadForType(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonContract, bool)", file="JsonSerializerInternalReader.cs"];
m9_1053 [label="reader.ReadAsDecimal()", span="2236-2236", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.ReadForType(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonContract, bool)", file="JsonSerializerInternalReader.cs"];
m9_1055 [label="reader.ReadAsBytes()", span="2239-2239", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.ReadForType(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonContract, bool)", file="JsonSerializerInternalReader.cs"];
m9_1057 [label="reader.ReadAsString()", span="2242-2242", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.ReadForType(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonContract, bool)", file="JsonSerializerInternalReader.cs"];
m9_1059 [label="reader.ReadAsDateTime()", span="2245-2245", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.ReadForType(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonContract, bool)", file="JsonSerializerInternalReader.cs"];
m9_1061 [label="reader.ReadAsDateTimeOffset()", span="2249-2249", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.ReadForType(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonContract, bool)", file="JsonSerializerInternalReader.cs"];
m9_1063 [label="return (reader.TokenType != JsonToken.None);", span="2256-2256", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.ReadForType(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonContract, bool)", file="JsonSerializerInternalReader.cs"];
m9_1044 [label=t, span="2220-2220", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.ReadForType(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonContract, bool)", file="JsonSerializerInternalReader.cs"];
m9_1045 [label="ReadType.Read", span="2222-2222", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.ReadForType(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonContract, bool)", file="JsonSerializerInternalReader.cs"];
m9_1050 [label="ReadType.ReadAsInt32", span="2232-2232", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.ReadForType(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonContract, bool)", file="JsonSerializerInternalReader.cs"];
m9_1052 [label="ReadType.ReadAsDecimal", span="2235-2235", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.ReadForType(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonContract, bool)", file="JsonSerializerInternalReader.cs"];
m9_1054 [label="ReadType.ReadAsBytes", span="2238-2238", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.ReadForType(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonContract, bool)", file="JsonSerializerInternalReader.cs"];
m9_1056 [label="ReadType.ReadAsString", span="2241-2241", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.ReadForType(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonContract, bool)", file="JsonSerializerInternalReader.cs"];
m9_1058 [label="ReadType.ReadAsDateTime", span="2244-2244", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.ReadForType(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonContract, bool)", file="JsonSerializerInternalReader.cs"];
m9_1060 [label="ReadType.ReadAsDateTimeOffset", span="2248-2248", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.ReadForType(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonContract, bool)", file="JsonSerializerInternalReader.cs"];
m9_1062 [label="throw new ArgumentOutOfRangeException();", span="2253-2253", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.ReadForType(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonContract, bool)", file="JsonSerializerInternalReader.cs"];
m9_1047 [label="return false;", span="2227-2227", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.ReadForType(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonContract, bool)", file="JsonSerializerInternalReader.cs"];
m9_1049 [label="return true;", span="2231-2231", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.ReadForType(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonContract, bool)", file="JsonSerializerInternalReader.cs"];
m9_1064 [label="Exit Newtonsoft.Json.Serialization.JsonSerializerInternalReader.ReadForType(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonContract, bool)", span="2209-2209", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.ReadForType(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonContract, bool)", file="JsonSerializerInternalReader.cs"];
m9_296 [label="Entry string.FormatWith(System.IFormatProvider, object, object)", span="52-52", cluster="string.FormatWith(System.IFormatProvider, object, object)", file="JsonSerializerInternalReader.cs"];
m9_840 [label="Entry System.Runtime.Serialization.SerializationInfo.SerializationInfo(System.Type, System.Runtime.Serialization.IFormatterConverter)", span="0-0", cluster="System.Runtime.Serialization.SerializationInfo.SerializationInfo(System.Type, System.Runtime.Serialization.IFormatterConverter)", file="JsonSerializerInternalReader.cs"];
m9_1145 [label="Entry lambda expression", span="2308-2308", cluster="lambda expression", file="JsonSerializerInternalReader.cs"];
m9_990 [label="Entry lambda expression", span="1913-1913", cluster="lambda expression", file="JsonSerializerInternalReader.cs"];
m9_994 [label="p.Property != property", span="1922-1922", cluster="lambda expression", file="JsonSerializerInternalReader.cs"];
m9_993 [label="Entry lambda expression", span="1922-1922", cluster="lambda expression", file="JsonSerializerInternalReader.cs"];
m9_996 [label="Entry lambda expression", span="1967-1967", cluster="lambda expression", file="JsonSerializerInternalReader.cs"];
m9_991 [label="p.PropertyName", span="1913-1913", cluster="lambda expression", file="JsonSerializerInternalReader.cs"];
m9_992 [label="Exit lambda expression", span="1913-1913", cluster="lambda expression", file="JsonSerializerInternalReader.cs"];
m9_995 [label="Exit lambda expression", span="1922-1922", cluster="lambda expression", file="JsonSerializerInternalReader.cs"];
m9_997 [label="p.PropertyName", span="1967-1967", cluster="lambda expression", file="JsonSerializerInternalReader.cs"];
m9_998 [label="Exit lambda expression", span="1967-1967", cluster="lambda expression", file="JsonSerializerInternalReader.cs"];
m9_1142 [label="Entry lambda expression", span="2308-2308", cluster="lambda expression", file="JsonSerializerInternalReader.cs"];
m9_1143 [label=m, span="2308-2308", cluster="lambda expression", file="JsonSerializerInternalReader.cs"];
m9_1144 [label="Exit lambda expression", span="2308-2308", cluster="lambda expression", file="JsonSerializerInternalReader.cs"];
m9_1146 [label="PropertyPresence.None", span="2308-2308", cluster="lambda expression", file="JsonSerializerInternalReader.cs"];
m9_1147 [label="Exit lambda expression", span="2308-2308", cluster="lambda expression", file="JsonSerializerInternalReader.cs"];
m9_121 [label="Entry Newtonsoft.Json.Linq.JTokenWriter.WriteStartObject()", span="107-107", cluster="Newtonsoft.Json.Linq.JTokenWriter.WriteStartObject()", file="JsonSerializerInternalReader.cs"];
m9_352 [label="Entry Newtonsoft.Json.Serialization.ITraceWriter.Trace(System.Diagnostics.TraceLevel, string, System.Exception)", span="25-25", cluster="Newtonsoft.Json.Serialization.ITraceWriter.Trace(System.Diagnostics.TraceLevel, string, System.Exception)", file="JsonSerializerInternalReader.cs"];
m9_758 [label="Entry System.Collections.Generic.Stack<T>.Stack()", span="0-0", cluster="System.Collections.Generic.Stack<T>.Stack()", file="JsonSerializerInternalReader.cs"];
m9_841 [label="Entry Newtonsoft.Json.Serialization.JsonFormatterConverter.JsonFormatterConverter(Newtonsoft.Json.Serialization.JsonSerializerInternalReader, Newtonsoft.Json.Serialization.JsonISerializableContract, Newtonsoft.Json.Serialization.JsonProperty)", span="40-40", cluster="Newtonsoft.Json.Serialization.JsonFormatterConverter.JsonFormatterConverter(Newtonsoft.Json.Serialization.JsonSerializerInternalReader, Newtonsoft.Json.Serialization.JsonISerializableContract, Newtonsoft.Json.Serialization.JsonProperty)", file="JsonSerializerInternalReader.cs"];
m9_760 [label="Entry System.Collections.Generic.Stack<T>.Pop()", span="0-0", cluster="System.Collections.Generic.Stack<T>.Pop()", file="JsonSerializerInternalReader.cs"];
m9_987 [label="Entry System.Collections.IDictionary.Add(object, object)", span="0-0", cluster="System.Collections.IDictionary.Add(object, object)", file="JsonSerializerInternalReader.cs"];
m9_1070 [label="Entry Newtonsoft.Json.JsonReader.ReadAsDateTimeOffset()", span="446-446", cluster="Newtonsoft.Json.JsonReader.ReadAsDateTimeOffset()", file="JsonSerializerInternalReader.cs"];
m9_415 [label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.SplitFullyQualifiedTypeName(string, out string, out string)", span="858-858", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.SplitFullyQualifiedTypeName(string, out string, out string)", file="JsonSerializerInternalReader.cs"];
m9_636 [label="Entry Newtonsoft.Json.Serialization.JsonSerializerInternalReader.OnDeserializing(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonContract, object)", span="1286-1286", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.OnDeserializing(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonContract, object)", file="JsonSerializerInternalReader.cs"];
m9_637 [label="TraceWriter != null && TraceWriter.LevelFilter >= TraceLevel.Info", span="1288-1288", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.OnDeserializing(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonContract, object)", file="JsonSerializerInternalReader.cs"];
m9_638 [label="TraceWriter.Trace(TraceLevel.Info, JsonPosition.FormatMessage(reader as IJsonLineInfo, reader.Path, ''Started deserializing {0}''.FormatWith(CultureInfo.InvariantCulture, contract.UnderlyingType)), null)", span="1290-1290", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.OnDeserializing(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonContract, object)", file="JsonSerializerInternalReader.cs"];
m9_639 [label="contract.InvokeOnDeserializing(value, Serializer._context)", span="1293-1293", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.OnDeserializing(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonContract, object)", file="JsonSerializerInternalReader.cs"];
m9_640 [label="Exit Newtonsoft.Json.Serialization.JsonSerializerInternalReader.OnDeserializing(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonContract, object)", span="1286-1286", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.OnDeserializing(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonContract, object)", file="JsonSerializerInternalReader.cs"];
m9_899 [label="Entry Newtonsoft.Json.Serialization.JsonDynamicContract.TrySetMember(System.Dynamic.IDynamicMetaObjectProvider, string, object)", span="105-105", cluster="Newtonsoft.Json.Serialization.JsonDynamicContract.TrySetMember(System.Dynamic.IDynamicMetaObjectProvider, string, object)", file="JsonSerializerInternalReader.cs"];
m9_470 [label="Entry Newtonsoft.Json.Utilities.CollectionUtils.ToMultidimensionalArray(System.Collections.IList, System.Type, int)", span="332-332", cluster="Newtonsoft.Json.Utilities.CollectionUtils.ToMultidimensionalArray(System.Collections.IList, System.Type, int)", file="JsonSerializerInternalReader.cs"];
m9_1138 [label="Entry Unk.ToDictionary", span="", cluster="Unk.ToDictionary", file="JsonSerializerInternalReader.cs"];
m9_88 [label="Entry Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateJToken(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonContract)", span="210-210", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateJToken(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonContract)", file="JsonSerializerInternalReader.cs"];
m9_89 [label="ValidationUtils.ArgumentNotNull(reader, ''reader'')", span="212-212", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateJToken(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonContract)", file="JsonSerializerInternalReader.cs"];
m9_90 [label="contract != null", span="214-214", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateJToken(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonContract)", file="JsonSerializerInternalReader.cs"];
m9_91 [label="contract.UnderlyingType == typeof(JRaw)", span="216-216", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateJToken(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonContract)", file="JsonSerializerInternalReader.cs"];
m9_92 [label="return JRaw.Create(reader);", span="218-218", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateJToken(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonContract)", file="JsonSerializerInternalReader.cs"];
m9_93 [label="reader.TokenType == JsonToken.Null\r\n                    && !(contract.UnderlyingType == typeof(JValue) || contract.UnderlyingType == typeof(JToken))", span="220-221", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateJToken(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonContract)", file="JsonSerializerInternalReader.cs"];
m9_97 [label="writer.WriteToken(reader)", span="230-230", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateJToken(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonContract)", file="JsonSerializerInternalReader.cs"];
m9_95 [label="JToken token", span="227-227", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateJToken(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonContract)", file="JsonSerializerInternalReader.cs"];
m9_94 [label="return null;", span="223-223", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateJToken(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonContract)", file="JsonSerializerInternalReader.cs"];
m9_96 [label="JTokenWriter writer = new JTokenWriter()", span="228-228", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateJToken(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonContract)", file="JsonSerializerInternalReader.cs"];
m9_98 [label="token = writer.Token", span="231-231", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateJToken(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonContract)", file="JsonSerializerInternalReader.cs"];
m9_99 [label="return token;", span="234-234", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateJToken(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonContract)", file="JsonSerializerInternalReader.cs"];
m9_100 [label="Exit Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateJToken(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonContract)", span="210-210", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateJToken(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonContract)", file="JsonSerializerInternalReader.cs"];
m9_1040 [label="Entry Newtonsoft.Json.Serialization.JsonSerializerInternalReader.ReadExtensionDataValue(Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.JsonReader)", span="2491-2491", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.ReadExtensionDataValue(Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.JsonReader)", file="JsonSerializerInternalReader.cs"];
m9_1174 [label="object value", span="2493-2493", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.ReadExtensionDataValue(Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.JsonReader)", file="JsonSerializerInternalReader.cs"];
m9_1175 [label="contract.ExtensionDataIsJToken", span="2494-2494", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.ReadExtensionDataValue(Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.JsonReader)", file="JsonSerializerInternalReader.cs"];
m9_1176 [label="value = JToken.ReadFrom(reader)", span="2496-2496", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.ReadExtensionDataValue(Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.JsonReader)", file="JsonSerializerInternalReader.cs"];
m9_1177 [label="value = CreateValueInternal(reader, null, null, null, contract, member, null)", span="2500-2500", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.ReadExtensionDataValue(Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.JsonReader)", file="JsonSerializerInternalReader.cs"];
m9_1178 [label="return value;", span="2502-2502", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.ReadExtensionDataValue(Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.JsonReader)", file="JsonSerializerInternalReader.cs"];
m9_1179 [label="Exit Newtonsoft.Json.Serialization.JsonSerializerInternalReader.ReadExtensionDataValue(Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.JsonReader)", span="2491-2491", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.ReadExtensionDataValue(Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.JsonReader)", file="JsonSerializerInternalReader.cs"];
m9_1140 [label="Entry Newtonsoft.Json.Serialization.JsonSerializerInternalReader.ShouldDeserialize(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonProperty, object)", span="2436-2436", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.ShouldDeserialize(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonProperty, object)", file="JsonSerializerInternalReader.cs"];
m9_1148 [label="property.ShouldDeserialize == null", span="2438-2438", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.ShouldDeserialize(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonProperty, object)", file="JsonSerializerInternalReader.cs"];
m9_1150 [label="bool shouldDeserialize = property.ShouldDeserialize(target)", span="2443-2443", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.ShouldDeserialize(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonProperty, object)", file="JsonSerializerInternalReader.cs"];
m9_1152 [label="TraceWriter.Trace(TraceLevel.Verbose, JsonPosition.FormatMessage(null, reader.Path, ''ShouldDeserialize result for property '{0}' on {1}: {2}''.FormatWith(CultureInfo.InvariantCulture, property.PropertyName, property.DeclaringType, shouldDeserialize)), null)", span="2447-2447", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.ShouldDeserialize(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonProperty, object)", file="JsonSerializerInternalReader.cs"];
m9_1149 [label="return true;", span="2440-2440", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.ShouldDeserialize(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonProperty, object)", file="JsonSerializerInternalReader.cs"];
m9_1151 [label="TraceWriter != null && TraceWriter.LevelFilter >= TraceLevel.Verbose", span="2445-2445", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.ShouldDeserialize(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonProperty, object)", file="JsonSerializerInternalReader.cs"];
m9_1153 [label="return shouldDeserialize;", span="2450-2450", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.ShouldDeserialize(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonProperty, object)", file="JsonSerializerInternalReader.cs"];
m9_1154 [label="Exit Newtonsoft.Json.Serialization.JsonSerializerInternalReader.ShouldDeserialize(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonProperty, object)", span="2436-2436", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.ShouldDeserialize(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonProperty, object)", file="JsonSerializerInternalReader.cs"];
m9_163 [label="Entry Newtonsoft.Json.Serialization.JsonSerializerInternalReader.EnsureType(Newtonsoft.Json.JsonReader, object, System.Globalization.CultureInfo, Newtonsoft.Json.Serialization.JsonContract, System.Type)", span="948-948", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.EnsureType(Newtonsoft.Json.JsonReader, object, System.Globalization.CultureInfo, Newtonsoft.Json.Serialization.JsonContract, System.Type)", file="JsonSerializerInternalReader.cs"];
m9_475 [label="targetType == null", span="950-950", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.EnsureType(Newtonsoft.Json.JsonReader, object, System.Globalization.CultureInfo, Newtonsoft.Json.Serialization.JsonContract, System.Type)", file="JsonSerializerInternalReader.cs"];
m9_476 [label="return value;", span="952-952", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.EnsureType(Newtonsoft.Json.JsonReader, object, System.Globalization.CultureInfo, Newtonsoft.Json.Serialization.JsonContract, System.Type)", file="JsonSerializerInternalReader.cs"];
m9_477 [label="Type valueType = ReflectionUtils.GetObjectType(value)", span="955-955", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.EnsureType(Newtonsoft.Json.JsonReader, object, System.Globalization.CultureInfo, Newtonsoft.Json.Serialization.JsonContract, System.Type)", file="JsonSerializerInternalReader.cs"];
m9_478 [label="valueType != targetType", span="959-959", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.EnsureType(Newtonsoft.Json.JsonReader, object, System.Globalization.CultureInfo, Newtonsoft.Json.Serialization.JsonContract, System.Type)", file="JsonSerializerInternalReader.cs"];
m9_479 [label="value == null && contract.IsNullable", span="961-961", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.EnsureType(Newtonsoft.Json.JsonReader, object, System.Globalization.CultureInfo, Newtonsoft.Json.Serialization.JsonContract, System.Type)", file="JsonSerializerInternalReader.cs"];
m9_481 [label="contract.IsConvertable", span="968-968", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.EnsureType(Newtonsoft.Json.JsonReader, object, System.Globalization.CultureInfo, Newtonsoft.Json.Serialization.JsonContract, System.Type)", file="JsonSerializerInternalReader.cs"];
m9_482 [label="JsonPrimitiveContract primitiveContract = (JsonPrimitiveContract)contract", span="970-970", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.EnsureType(Newtonsoft.Json.JsonReader, object, System.Globalization.CultureInfo, Newtonsoft.Json.Serialization.JsonContract, System.Type)", file="JsonSerializerInternalReader.cs"];
m9_483 [label="contract.IsEnum", span="972-972", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.EnsureType(Newtonsoft.Json.JsonReader, object, System.Globalization.CultureInfo, Newtonsoft.Json.Serialization.JsonContract, System.Type)", file="JsonSerializerInternalReader.cs"];
m9_484 [label="value is string", span="974-974", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.EnsureType(Newtonsoft.Json.JsonReader, object, System.Globalization.CultureInfo, Newtonsoft.Json.Serialization.JsonContract, System.Type)", file="JsonSerializerInternalReader.cs"];
m9_485 [label="return Enum.Parse(contract.NonNullableUnderlyingType, value.ToString(), true);", span="976-976", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.EnsureType(Newtonsoft.Json.JsonReader, object, System.Globalization.CultureInfo, Newtonsoft.Json.Serialization.JsonContract, System.Type)", file="JsonSerializerInternalReader.cs"];
m9_487 [label="return Enum.ToObject(contract.NonNullableUnderlyingType, value);", span="980-980", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.EnsureType(Newtonsoft.Json.JsonReader, object, System.Globalization.CultureInfo, Newtonsoft.Json.Serialization.JsonContract, System.Type)", file="JsonSerializerInternalReader.cs"];
m9_488 [label="value is BigInteger", span="985-985", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.EnsureType(Newtonsoft.Json.JsonReader, object, System.Globalization.CultureInfo, Newtonsoft.Json.Serialization.JsonContract, System.Type)", file="JsonSerializerInternalReader.cs"];
m9_489 [label="return ConvertUtils.FromBigInteger((BigInteger)value, contract.NonNullableUnderlyingType);", span="987-987", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.EnsureType(Newtonsoft.Json.JsonReader, object, System.Globalization.CultureInfo, Newtonsoft.Json.Serialization.JsonContract, System.Type)", file="JsonSerializerInternalReader.cs"];
m9_490 [label="return Convert.ChangeType(value, contract.NonNullableUnderlyingType, culture);", span="992-992", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.EnsureType(Newtonsoft.Json.JsonReader, object, System.Globalization.CultureInfo, Newtonsoft.Json.Serialization.JsonContract, System.Type)", file="JsonSerializerInternalReader.cs"];
m9_491 [label="return ConvertUtils.ConvertOrCast(value, culture, contract.NonNullableUnderlyingType);", span="995-995", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.EnsureType(Newtonsoft.Json.JsonReader, object, System.Globalization.CultureInfo, Newtonsoft.Json.Serialization.JsonContract, System.Type)", file="JsonSerializerInternalReader.cs"];
m9_493 [label="throw JsonSerializationException.Create(reader, ''Error converting value {0} to type '{1}'.''.FormatWith(CultureInfo.InvariantCulture, MiscellaneousUtils.FormatValueForPrint(value), targetType), ex);", span="999-999", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.EnsureType(Newtonsoft.Json.JsonReader, object, System.Globalization.CultureInfo, Newtonsoft.Json.Serialization.JsonContract, System.Type)", file="JsonSerializerInternalReader.cs"];
m9_494 [label="return value;", span="1003-1003", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.EnsureType(Newtonsoft.Json.JsonReader, object, System.Globalization.CultureInfo, Newtonsoft.Json.Serialization.JsonContract, System.Type)", file="JsonSerializerInternalReader.cs"];
m9_480 [label="return null;", span="963-963", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.EnsureType(Newtonsoft.Json.JsonReader, object, System.Globalization.CultureInfo, Newtonsoft.Json.Serialization.JsonContract, System.Type)", file="JsonSerializerInternalReader.cs"];
m9_486 [label="ConvertUtils.IsInteger(primitiveContract.TypeCode)", span="978-978", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.EnsureType(Newtonsoft.Json.JsonReader, object, System.Globalization.CultureInfo, Newtonsoft.Json.Serialization.JsonContract, System.Type)", file="JsonSerializerInternalReader.cs"];
m9_492 [label=Exception, span="997-997", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.EnsureType(Newtonsoft.Json.JsonReader, object, System.Globalization.CultureInfo, Newtonsoft.Json.Serialization.JsonContract, System.Type)", file="JsonSerializerInternalReader.cs"];
m9_495 [label="Exit Newtonsoft.Json.Serialization.JsonSerializerInternalReader.EnsureType(Newtonsoft.Json.JsonReader, object, System.Globalization.CultureInfo, Newtonsoft.Json.Serialization.JsonContract, System.Type)", span="948-948", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.EnsureType(Newtonsoft.Json.JsonReader, object, System.Globalization.CultureInfo, Newtonsoft.Json.Serialization.JsonContract, System.Type)", file="JsonSerializerInternalReader.cs"];
m9_900 [label="Entry Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor<object>, string)", span="1902-1902", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor<object>, string)", file="JsonSerializerInternalReader.cs"];
m9_901 [label="ValidationUtils.ArgumentNotNull(creator, ''creator'')", span="1904-1904", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor<object>, string)", file="JsonSerializerInternalReader.cs"];
m9_902 [label="bool trackPresence = (contract.HasRequiredOrDefaultValueProperties || HasFlag(Serializer._defaultValueHandling, DefaultValueHandling.Populate))", span="1907-1907", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor<object>, string)", file="JsonSerializerInternalReader.cs"];
m9_903 [label="Type objectType = contract.UnderlyingType", span="1909-1909", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor<object>, string)", file="JsonSerializerInternalReader.cs"];
m9_905 [label="string parameters = string.Join('', '', contract.CreatorParameters.Select(p => p.PropertyName).ToArray())", span="1913-1913", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor<object>, string)", file="JsonSerializerInternalReader.cs"];
m9_906 [label="TraceWriter.Trace(TraceLevel.Info, JsonPosition.FormatMessage(reader as IJsonLineInfo, reader.Path, ''Deserializing {0} using creator with parameters: {1}.''.FormatWith(CultureInfo.InvariantCulture, contract.UnderlyingType, parameters)), null)", span="1914-1914", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor<object>, string)", file="JsonSerializerInternalReader.cs"];
m9_907 [label="List<CreatorPropertyContext> propertyContexts = ResolvePropertyAndCreatorValues(contract, containerProperty, reader, objectType)", span="1917-1917", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor<object>, string)", file="JsonSerializerInternalReader.cs"];
m9_909 [label="contract.Properties", span="1920-1920", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor<object>, string)", file="JsonSerializerInternalReader.cs"];
m9_912 [label="object[] creatorParameterValues = new object[contract.CreatorParameters.Count]", span="1934-1934", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor<object>, string)", file="JsonSerializerInternalReader.cs"];
m9_926 [label="constructorProperty = contract.CreatorParameters.ForgivingCaseSensitiveFind(p => p.PropertyName, context.Property.UnderlyingName)", span="1967-1967", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor<object>, string)", file="JsonSerializerInternalReader.cs"];
m9_933 [label="context.Value = EnsureType(\r\n                                    reader,\r\n                                    constructorProperty.GetResolvedDefaultValue(),\r\n                                    CultureInfo.InvariantCulture,\r\n                                    constructorProperty.PropertyContract,\r\n                                    constructorProperty.PropertyType)", span="1985-1990", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor<object>, string)", file="JsonSerializerInternalReader.cs"];
m9_934 [label="int i = contract.CreatorParameters.IndexOf(constructorProperty)", span="1995-1995", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor<object>, string)", file="JsonSerializerInternalReader.cs"];
m9_937 [label="object createdObject = creator(creatorParameterValues)", span="2002-2002", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor<object>, string)", file="JsonSerializerInternalReader.cs"];
m9_938 [label="id != null", span="2004-2004", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor<object>, string)", file="JsonSerializerInternalReader.cs"];
m9_939 [label="AddReference(reader, id, createdObject)", span="2006-2006", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor<object>, string)", file="JsonSerializerInternalReader.cs"];
m9_940 [label="OnDeserializing(reader, contract, createdObject)", span="2009-2009", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor<object>, string)", file="JsonSerializerInternalReader.cs"];
m9_967 [label="contract.ExtensionDataSetter != null", span="2072-2072", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor<object>, string)", file="JsonSerializerInternalReader.cs"];
m9_970 [label="contract.ExtensionDataSetter(createdObject, propertyValue.Name, propertyValue.Value)", span="2078-2078", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor<object>, string)", file="JsonSerializerInternalReader.cs"];
m9_974 [label="EndProcessProperty(\r\n                        createdObject,\r\n                        reader,\r\n                        contract,\r\n                        reader.Depth,\r\n                        context.Property,\r\n                        context.Presence.Value,\r\n                        !context.Used)", span="2092-2099", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor<object>, string)", color=red, community=0, file="JsonSerializerInternalReader.cs"];
m9_975 [label="OnDeserialized(reader, contract, createdObject)", span="2103-2103", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor<object>, string)", file="JsonSerializerInternalReader.cs"];
m9_908 [label=trackPresence, span="1918-1918", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor<object>, string)", file="JsonSerializerInternalReader.cs"];
m9_914 [label=trackPresence, span="1939-1939", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor<object>, string)", file="JsonSerializerInternalReader.cs"];
m9_928 [label=trackPresence, span="1974-1974", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor<object>, string)", file="JsonSerializerInternalReader.cs"];
m9_971 [label=trackPresence, span="2083-2083", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor<object>, string)", file="JsonSerializerInternalReader.cs"];
m9_904 [label="TraceWriter != null && TraceWriter.LevelFilter >= TraceLevel.Info", span="1911-1911", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor<object>, string)", file="JsonSerializerInternalReader.cs"];
m9_910 [label="propertyContexts.All(p => p.Property != property)", span="1922-1922", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor<object>, string)", file="JsonSerializerInternalReader.cs"];
m9_911 [label="propertyContexts.Add(new CreatorPropertyContext\r\n                        {\r\n                            Property = property,\r\n                            Name = property.PropertyName,\r\n                            Presence = PropertyPresence.None\r\n                        })", span="1924-1929", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor<object>, string)", file="JsonSerializerInternalReader.cs"];
m9_913 [label=propertyContexts, span="1936-1936", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor<object>, string)", file="JsonSerializerInternalReader.cs"];
m9_941 [label=propertyContexts, span="2012-2012", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor<object>, string)", file="JsonSerializerInternalReader.cs"];
m9_968 [label=propertyContexts, span="2074-2074", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor<object>, string)", file="JsonSerializerInternalReader.cs"];
m9_972 [label=propertyContexts, span="2085-2085", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor<object>, string)", file="JsonSerializerInternalReader.cs"];
m9_935 [label="creatorParameterValues[i] = context.Value", span="1996-1996", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor<object>, string)", file="JsonSerializerInternalReader.cs"];
m9_915 [label="context.Property != null && context.Presence == null", span="1941-1941", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor<object>, string)", file="JsonSerializerInternalReader.cs"];
m9_916 [label="object v = context.Value", span="1943-1943", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor<object>, string)", file="JsonSerializerInternalReader.cs"];
m9_921 [label="propertyPresence = CoerceEmptyStringToNull(context.Property.PropertyType, context.Property.PropertyContract, (string)v)\r\n                                ? PropertyPresence.Null\r\n                                : PropertyPresence.Value", span="1951-1953", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor<object>, string)", file="JsonSerializerInternalReader.cs"];
m9_923 [label="context.Presence = propertyPresence", span="1960-1960", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor<object>, string)", file="JsonSerializerInternalReader.cs"];
m9_924 [label="JsonProperty constructorProperty = context.ConstructorProperty", span="1964-1964", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor<object>, string)", file="JsonSerializerInternalReader.cs"];
m9_925 [label="constructorProperty == null && context.Property != null", span="1965-1965", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor<object>, string)", file="JsonSerializerInternalReader.cs"];
m9_929 [label="context.Presence == PropertyPresence.None || context.Presence == PropertyPresence.Null", span="1976-1976", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor<object>, string)", file="JsonSerializerInternalReader.cs"];
m9_936 [label="context.Used = true", span="1998-1998", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor<object>, string)", file="JsonSerializerInternalReader.cs"];
m9_917 [label="PropertyPresence propertyPresence", span="1944-1944", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor<object>, string)", file="JsonSerializerInternalReader.cs"];
m9_918 [label="v == null", span="1945-1945", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor<object>, string)", file="JsonSerializerInternalReader.cs"];
m9_920 [label="v is string", span="1949-1949", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor<object>, string)", file="JsonSerializerInternalReader.cs"];
m9_919 [label="propertyPresence = PropertyPresence.Null", span="1947-1947", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor<object>, string)", file="JsonSerializerInternalReader.cs"];
m9_922 [label="propertyPresence = PropertyPresence.Value", span="1957-1957", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor<object>, string)", file="JsonSerializerInternalReader.cs"];
m9_927 [label="constructorProperty != null && !constructorProperty.Ignored", span="1970-1970", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor<object>, string)", file="JsonSerializerInternalReader.cs"];
m9_930 [label="constructorProperty.PropertyContract == null", span="1978-1978", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor<object>, string)", file="JsonSerializerInternalReader.cs"];
m9_931 [label="constructorProperty.PropertyContract = GetContractSafe(constructorProperty.PropertyType)", span="1980-1980", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor<object>, string)", file="JsonSerializerInternalReader.cs"];
m9_932 [label="HasFlag(constructorProperty.DefaultValueHandling.GetValueOrDefault(Serializer._defaultValueHandling), DefaultValueHandling.Populate)", span="1983-1983", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor<object>, string)", file="JsonSerializerInternalReader.cs"];
m9_946 [label="property.ValueProvider.SetValue(createdObject, value)", span="2027-2027", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor<object>, string)", file="JsonSerializerInternalReader.cs"];
m9_952 [label="object createdObjectCollection = property.ValueProvider.GetValue(createdObject)", span="2039-2039", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor<object>, string)", file="JsonSerializerInternalReader.cs"];
m9_960 [label="object createdObjectDictionary = property.ValueProvider.GetValue(createdObject)", span="2055-2055", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor<object>, string)", file="JsonSerializerInternalReader.cs"];
m9_976 [label="return createdObject;", span="2104-2104", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor<object>, string)", file="JsonSerializerInternalReader.cs"];
m9_942 [label="context.Used ||\r\n                    context.Property == null ||\r\n                    context.Property.Ignored ||\r\n                    context.Presence == PropertyPresence.None", span="2014-2017", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor<object>, string)", file="JsonSerializerInternalReader.cs"];
m9_943 [label="JsonProperty property = context.Property", span="2022-2022", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor<object>, string)", file="JsonSerializerInternalReader.cs"];
m9_944 [label="object value = context.Value", span="2023-2023", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor<object>, string)", file="JsonSerializerInternalReader.cs"];
m9_947 [label="context.Used = true", span="2028-2028", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor<object>, string)", file="JsonSerializerInternalReader.cs"];
m9_966 [label="context.Used = true", span="2068-2068", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor<object>, string)", file="JsonSerializerInternalReader.cs"];
m9_945 [label="ShouldSetPropertyValue(property, value)", span="2025-2025", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor<object>, string)", file="JsonSerializerInternalReader.cs"];
m9_948 [label="!property.Writable && value != null", span="2030-2030", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor<object>, string)", file="JsonSerializerInternalReader.cs"];
m9_949 [label="JsonContract propertyContract = Serializer._contractResolver.ResolveContract(property.PropertyType)", span="2033-2033", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor<object>, string)", file="JsonSerializerInternalReader.cs"];
m9_955 [label="IWrappedCollection newValues = propertyArrayContract.CreateWrapper(value)", span="2043-2043", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor<object>, string)", file="JsonSerializerInternalReader.cs"];
m9_963 [label="IDictionary newValues = (dictionaryContract.ShouldCreateWrapper) ? dictionaryContract.CreateWrapper(value) : (IDictionary)value", span="2059-2059", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor<object>, string)", file="JsonSerializerInternalReader.cs"];
m9_950 [label="propertyContract.ContractType == JsonContractType.Array", span="2035-2035", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor<object>, string)", file="JsonSerializerInternalReader.cs"];
m9_951 [label="JsonArrayContract propertyArrayContract = (JsonArrayContract)propertyContract", span="2037-2037", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor<object>, string)", file="JsonSerializerInternalReader.cs"];
m9_958 [label="propertyContract.ContractType == JsonContractType.Dictionary", span="2051-2051", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor<object>, string)", file="JsonSerializerInternalReader.cs"];
m9_959 [label="JsonDictionaryContract dictionaryContract = (JsonDictionaryContract)propertyContract", span="2053-2053", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor<object>, string)", file="JsonSerializerInternalReader.cs"];
m9_954 [label="IWrappedCollection createdObjectCollectionWrapper = propertyArrayContract.CreateWrapper(createdObjectCollection)", span="2042-2042", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor<object>, string)", file="JsonSerializerInternalReader.cs"];
m9_953 [label="createdObjectCollection != null", span="2040-2040", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor<object>, string)", file="JsonSerializerInternalReader.cs"];
m9_957 [label="createdObjectCollectionWrapper.Add(newValue)", span="2047-2047", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor<object>, string)", file="JsonSerializerInternalReader.cs"];
m9_956 [label=newValues, span="2045-2045", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor<object>, string)", file="JsonSerializerInternalReader.cs"];
m9_962 [label="IDictionary targetDictionary = (dictionaryContract.ShouldCreateWrapper) ? dictionaryContract.CreateWrapper(createdObjectDictionary) : (IDictionary)createdObjectDictionary", span="2058-2058", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor<object>, string)", file="JsonSerializerInternalReader.cs"];
m9_961 [label="createdObjectDictionary != null", span="2056-2056", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor<object>, string)", file="JsonSerializerInternalReader.cs"];
m9_965 [label="targetDictionary.Add(newValue.Key, newValue.Value)", span="2063-2063", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor<object>, string)", file="JsonSerializerInternalReader.cs"];
m9_964 [label=newValues, span="2061-2061", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor<object>, string)", file="JsonSerializerInternalReader.cs"];
m9_969 [label="!propertyValue.Used", span="2076-2076", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor<object>, string)", file="JsonSerializerInternalReader.cs"];
m9_973 [label="context.Property == null", span="2087-2087", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor<object>, string)", file="JsonSerializerInternalReader.cs"];
m9_977 [label="Exit Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor<object>, string)", span="1902-1902", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateObjectUsingCreatorWithParameters(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonObjectContract, Newtonsoft.Json.Serialization.JsonProperty, Newtonsoft.Json.Serialization.ObjectConstructor<object>, string)", file="JsonSerializerInternalReader.cs"];
m9_74 [label="Entry Newtonsoft.Json.Serialization.JsonSerializerInternalReader.GetConverter(Newtonsoft.Json.Serialization.JsonContract, Newtonsoft.Json.JsonConverter, Newtonsoft.Json.Serialization.JsonContainerContract, Newtonsoft.Json.Serialization.JsonProperty)", span="377-377", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.GetConverter(Newtonsoft.Json.Serialization.JsonContract, Newtonsoft.Json.JsonConverter, Newtonsoft.Json.Serialization.JsonContainerContract, Newtonsoft.Json.Serialization.JsonProperty)", file="JsonSerializerInternalReader.cs"];
m9_186 [label="JsonConverter converter = null", span="379-379", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.GetConverter(Newtonsoft.Json.Serialization.JsonContract, Newtonsoft.Json.JsonConverter, Newtonsoft.Json.Serialization.JsonContainerContract, Newtonsoft.Json.Serialization.JsonProperty)", file="JsonSerializerInternalReader.cs"];
m9_187 [label="memberConverter != null", span="380-380", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.GetConverter(Newtonsoft.Json.Serialization.JsonContract, Newtonsoft.Json.JsonConverter, Newtonsoft.Json.Serialization.JsonContainerContract, Newtonsoft.Json.Serialization.JsonProperty)", file="JsonSerializerInternalReader.cs"];
m9_188 [label="converter = memberConverter", span="383-383", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.GetConverter(Newtonsoft.Json.Serialization.JsonContract, Newtonsoft.Json.JsonConverter, Newtonsoft.Json.Serialization.JsonContainerContract, Newtonsoft.Json.Serialization.JsonProperty)", file="JsonSerializerInternalReader.cs"];
m9_189 [label="containerProperty != null && containerProperty.ItemConverter != null", span="385-385", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.GetConverter(Newtonsoft.Json.Serialization.JsonContract, Newtonsoft.Json.JsonConverter, Newtonsoft.Json.Serialization.JsonContainerContract, Newtonsoft.Json.Serialization.JsonProperty)", file="JsonSerializerInternalReader.cs"];
m9_190 [label="converter = containerProperty.ItemConverter", span="387-387", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.GetConverter(Newtonsoft.Json.Serialization.JsonContract, Newtonsoft.Json.JsonConverter, Newtonsoft.Json.Serialization.JsonContainerContract, Newtonsoft.Json.Serialization.JsonProperty)", file="JsonSerializerInternalReader.cs"];
m9_191 [label="containerContract != null && containerContract.ItemConverter != null", span="389-389", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.GetConverter(Newtonsoft.Json.Serialization.JsonContract, Newtonsoft.Json.JsonConverter, Newtonsoft.Json.Serialization.JsonContainerContract, Newtonsoft.Json.Serialization.JsonProperty)", file="JsonSerializerInternalReader.cs"];
m9_192 [label="converter = containerContract.ItemConverter", span="391-391", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.GetConverter(Newtonsoft.Json.Serialization.JsonContract, Newtonsoft.Json.JsonConverter, Newtonsoft.Json.Serialization.JsonContainerContract, Newtonsoft.Json.Serialization.JsonProperty)", file="JsonSerializerInternalReader.cs"];
m9_193 [label="contract != null", span="393-393", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.GetConverter(Newtonsoft.Json.Serialization.JsonContract, Newtonsoft.Json.JsonConverter, Newtonsoft.Json.Serialization.JsonContainerContract, Newtonsoft.Json.Serialization.JsonProperty)", file="JsonSerializerInternalReader.cs"];
m9_195 [label="contract.Converter != null", span="396-396", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.GetConverter(Newtonsoft.Json.Serialization.JsonContract, Newtonsoft.Json.JsonConverter, Newtonsoft.Json.Serialization.JsonContainerContract, Newtonsoft.Json.Serialization.JsonProperty)", file="JsonSerializerInternalReader.cs"];
m9_196 [label="converter = contract.Converter", span="399-399", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.GetConverter(Newtonsoft.Json.Serialization.JsonContract, Newtonsoft.Json.JsonConverter, Newtonsoft.Json.Serialization.JsonContainerContract, Newtonsoft.Json.Serialization.JsonProperty)", file="JsonSerializerInternalReader.cs"];
m9_197 [label="(matchingConverter = Serializer.GetMatchingConverter(contract.UnderlyingType)) != null", span="401-401", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.GetConverter(Newtonsoft.Json.Serialization.JsonContract, Newtonsoft.Json.JsonConverter, Newtonsoft.Json.Serialization.JsonContainerContract, Newtonsoft.Json.Serialization.JsonProperty)", file="JsonSerializerInternalReader.cs"];
m9_199 [label="contract.InternalConverter != null", span="406-406", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.GetConverter(Newtonsoft.Json.Serialization.JsonContract, Newtonsoft.Json.JsonConverter, Newtonsoft.Json.Serialization.JsonContainerContract, Newtonsoft.Json.Serialization.JsonProperty)", file="JsonSerializerInternalReader.cs"];
m9_200 [label="converter = contract.InternalConverter", span="409-409", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.GetConverter(Newtonsoft.Json.Serialization.JsonContract, Newtonsoft.Json.JsonConverter, Newtonsoft.Json.Serialization.JsonContainerContract, Newtonsoft.Json.Serialization.JsonProperty)", file="JsonSerializerInternalReader.cs"];
m9_201 [label="return converter;", span="412-412", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.GetConverter(Newtonsoft.Json.Serialization.JsonContract, Newtonsoft.Json.JsonConverter, Newtonsoft.Json.Serialization.JsonContainerContract, Newtonsoft.Json.Serialization.JsonProperty)", file="JsonSerializerInternalReader.cs"];
m9_194 [label="JsonConverter matchingConverter", span="395-395", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.GetConverter(Newtonsoft.Json.Serialization.JsonContract, Newtonsoft.Json.JsonConverter, Newtonsoft.Json.Serialization.JsonContainerContract, Newtonsoft.Json.Serialization.JsonProperty)", file="JsonSerializerInternalReader.cs"];
m9_198 [label="converter = matchingConverter", span="404-404", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.GetConverter(Newtonsoft.Json.Serialization.JsonContract, Newtonsoft.Json.JsonConverter, Newtonsoft.Json.Serialization.JsonContainerContract, Newtonsoft.Json.Serialization.JsonProperty)", file="JsonSerializerInternalReader.cs"];
m9_202 [label="Exit Newtonsoft.Json.Serialization.JsonSerializerInternalReader.GetConverter(Newtonsoft.Json.Serialization.JsonContract, Newtonsoft.Json.JsonConverter, Newtonsoft.Json.Serialization.JsonContainerContract, Newtonsoft.Json.Serialization.JsonProperty)", span="377-377", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.GetConverter(Newtonsoft.Json.Serialization.JsonContract, Newtonsoft.Json.JsonConverter, Newtonsoft.Json.Serialization.JsonContainerContract, Newtonsoft.Json.Serialization.JsonProperty)", file="JsonSerializerInternalReader.cs"];
m9_79 [label="Entry Newtonsoft.Json.Serialization.JsonSerializerInternalBase.IsErrorHandled(object, Newtonsoft.Json.Serialization.JsonContract, object, Newtonsoft.Json.IJsonLineInfo, string, System.Exception)", span="108-108", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalBase.IsErrorHandled(object, Newtonsoft.Json.Serialization.JsonContract, object, Newtonsoft.Json.IJsonLineInfo, string, System.Exception)", file="JsonSerializerInternalReader.cs"];
m9_203 [label="Entry Newtonsoft.Json.JsonSerializer.GetMatchingConverter(System.Type)", span="1098-1098", cluster="Newtonsoft.Json.JsonSerializer.GetMatchingConverter(System.Type)", file="JsonSerializerInternalReader.cs"];
m9_72 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)", file="JsonSerializerInternalReader.cs"];
m9_292 [label="Entry Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateNewDictionary(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonDictionaryContract, out bool)", span="1238-1238", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateNewDictionary(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonDictionaryContract, out bool)", file="JsonSerializerInternalReader.cs"];
m9_613 [label="contract.OverrideCreator != null", span="1240-1240", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateNewDictionary(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonDictionaryContract, out bool)", file="JsonSerializerInternalReader.cs"];
m9_614 [label="contract.HasParameterizedCreator", span="1242-1242", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateNewDictionary(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonDictionaryContract, out bool)", file="JsonSerializerInternalReader.cs"];
m9_616 [label="return contract.CreateTemporaryDictionary();", span="1245-1245", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateNewDictionary(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonDictionaryContract, out bool)", file="JsonSerializerInternalReader.cs"];
m9_618 [label="return (IDictionary)contract.OverrideCreator();", span="1250-1250", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateNewDictionary(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonDictionaryContract, out bool)", file="JsonSerializerInternalReader.cs"];
m9_619 [label="contract.IsReadOnlyOrFixedSize", span="1253-1253", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateNewDictionary(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonDictionaryContract, out bool)", file="JsonSerializerInternalReader.cs"];
m9_621 [label="return contract.CreateTemporaryDictionary();", span="1256-1256", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateNewDictionary(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonDictionaryContract, out bool)", file="JsonSerializerInternalReader.cs"];
m9_622 [label="contract.DefaultCreator != null && (!contract.DefaultCreatorNonPublic || Serializer._constructorHandling == ConstructorHandling.AllowNonPublicDefaultConstructor)", span="1258-1258", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateNewDictionary(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonDictionaryContract, out bool)", file="JsonSerializerInternalReader.cs"];
m9_623 [label="object dictionary = contract.DefaultCreator()", span="1260-1260", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateNewDictionary(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonDictionaryContract, out bool)", file="JsonSerializerInternalReader.cs"];
m9_624 [label="contract.ShouldCreateWrapper", span="1262-1262", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateNewDictionary(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonDictionaryContract, out bool)", file="JsonSerializerInternalReader.cs"];
m9_625 [label="dictionary = contract.CreateWrapper(dictionary)", span="1264-1264", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateNewDictionary(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonDictionaryContract, out bool)", file="JsonSerializerInternalReader.cs"];
m9_628 [label="contract.HasParameterizedCreatorInternal", span="1270-1270", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateNewDictionary(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonDictionaryContract, out bool)", file="JsonSerializerInternalReader.cs"];
m9_630 [label="return contract.CreateTemporaryDictionary();", span="1273-1273", cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalReader.CreateNewDictionary(Newtonsoft.Json.JsonReader, Newtonsoft.Json.Serialization.JsonDictionaryContract, out bool)", file="JsonSerializerInternalReader.cs"];
}
