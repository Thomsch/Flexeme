digraph  {
m0_48 [label="Entry Newtonsoft.Json.Converters.DiscriminatedUnionConverter.ReadAndAssert(Newtonsoft.Json.JsonReader)", span="175-175", cluster="Newtonsoft.Json.Converters.DiscriminatedUnionConverter.ReadAndAssert(Newtonsoft.Json.JsonReader)", file="DiscriminatedUnionConverter.cs"];
m0_80 [label="!reader.Read()", span="177-177", cluster="Newtonsoft.Json.Converters.DiscriminatedUnionConverter.ReadAndAssert(Newtonsoft.Json.JsonReader)", file="DiscriminatedUnionConverter.cs"];
m0_81 [label="throw new JsonSerializationException(''Unexpected end.'');", span="178-178", cluster="Newtonsoft.Json.Converters.DiscriminatedUnionConverter.ReadAndAssert(Newtonsoft.Json.JsonReader)", file="DiscriminatedUnionConverter.cs"];
m0_82 [label="Exit Newtonsoft.Json.Converters.DiscriminatedUnionConverter.ReadAndAssert(Newtonsoft.Json.JsonReader)", span="175-175", cluster="Newtonsoft.Json.Converters.DiscriminatedUnionConverter.ReadAndAssert(Newtonsoft.Json.JsonReader)", file="DiscriminatedUnionConverter.cs"];
m0_55 [label="Entry System.Collections.Generic.List<T>.ToArray()", span="0-0", cluster="System.Collections.Generic.List<T>.ToArray()", file="DiscriminatedUnionConverter.cs"];
m0_23 [label="Entry Newtonsoft.Json.Converters.DiscriminatedUnionConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", span="83-83", cluster="Newtonsoft.Json.Converters.DiscriminatedUnionConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DiscriminatedUnionConverter.cs"];
m0_26 [label="IEnumerable cases = (IEnumerable)FSharpUtils.GetUnionCases(null, objectType, null)", span="88-88", cluster="Newtonsoft.Json.Converters.DiscriminatedUnionConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", color=green, community=0, file="DiscriminatedUnionConverter.cs"];
m0_24 [label="reader.TokenType == JsonToken.Null", span="85-85", cluster="Newtonsoft.Json.Converters.DiscriminatedUnionConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DiscriminatedUnionConverter.cs"];
m0_27 [label="ReadAndAssertProperty(reader, CasePropertyName)", span="90-90", cluster="Newtonsoft.Json.Converters.DiscriminatedUnionConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DiscriminatedUnionConverter.cs"];
m0_31 [label=cases, span="96-96", cluster="Newtonsoft.Json.Converters.DiscriminatedUnionConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DiscriminatedUnionConverter.cs"];
m0_32 [label="(string)FSharpUtils.GetUnionCaseInfoName(c) == caseName", span="98-98", cluster="Newtonsoft.Json.Converters.DiscriminatedUnionConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", color=green, community=0, file="DiscriminatedUnionConverter.cs"];
m0_29 [label="string caseName = reader.Value.ToString()", span="93-93", cluster="Newtonsoft.Json.Converters.DiscriminatedUnionConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DiscriminatedUnionConverter.cs"];
m0_33 [label="matchingCaseInfo = c", span="100-100", cluster="Newtonsoft.Json.Converters.DiscriminatedUnionConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DiscriminatedUnionConverter.cs"];
m0_39 [label="PropertyInfo[] fieldProperties = (PropertyInfo[])FSharpUtils.GetUnionCaseInfoFields(matchingCaseInfo)", span="114-114", cluster="Newtonsoft.Json.Converters.DiscriminatedUnionConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", color=green, community=0, file="DiscriminatedUnionConverter.cs"];
m0_38 [label="ReadAndAssert(reader)", span="112-112", cluster="Newtonsoft.Json.Converters.DiscriminatedUnionConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DiscriminatedUnionConverter.cs"];
m0_30 [label="object matchingCaseInfo = null", span="95-95", cluster="Newtonsoft.Json.Converters.DiscriminatedUnionConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DiscriminatedUnionConverter.cs"];
m0_40 [label="List<object> fieldValues = new List<object>()", span="115-115", cluster="Newtonsoft.Json.Converters.DiscriminatedUnionConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DiscriminatedUnionConverter.cs"];
m0_41 [label=fieldProperties, span="116-116", cluster="Newtonsoft.Json.Converters.DiscriminatedUnionConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DiscriminatedUnionConverter.cs"];
m0_45 [label="return FSharpUtils.MakeUnion(null, matchingCaseInfo, fieldValues.ToArray(), null);", span="125-125", cluster="Newtonsoft.Json.Converters.DiscriminatedUnionConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", color=green, community=0, file="DiscriminatedUnionConverter.cs"];
m0_44 [label="ReadAndAssert(reader)", span="123-123", cluster="Newtonsoft.Json.Converters.DiscriminatedUnionConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DiscriminatedUnionConverter.cs"];
m0_28 [label="ReadAndAssert(reader)", span="91-91", cluster="Newtonsoft.Json.Converters.DiscriminatedUnionConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DiscriminatedUnionConverter.cs"];
m0_36 [label="ReadAndAssertProperty(reader, FieldsPropertyName)", span="108-108", cluster="Newtonsoft.Json.Converters.DiscriminatedUnionConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DiscriminatedUnionConverter.cs"];
m0_37 [label="ReadAndAssert(reader)", span="110-110", cluster="Newtonsoft.Json.Converters.DiscriminatedUnionConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DiscriminatedUnionConverter.cs"];
m0_42 [label="fieldValues.Add(serializer.Deserialize(reader, field.PropertyType))", span="118-118", cluster="Newtonsoft.Json.Converters.DiscriminatedUnionConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DiscriminatedUnionConverter.cs"];
m0_43 [label="ReadAndAssert(reader)", span="119-119", cluster="Newtonsoft.Json.Converters.DiscriminatedUnionConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DiscriminatedUnionConverter.cs"];
m0_25 [label="return null;", span="86-86", cluster="Newtonsoft.Json.Converters.DiscriminatedUnionConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DiscriminatedUnionConverter.cs"];
m0_34 [label="matchingCaseInfo == null", span="105-105", cluster="Newtonsoft.Json.Converters.DiscriminatedUnionConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DiscriminatedUnionConverter.cs"];
m0_35 [label="throw new JsonSerializationException(''No union type found with the name '{0}'.''.FormatWith(CultureInfo.InvariantCulture, caseName));", span="106-106", cluster="Newtonsoft.Json.Converters.DiscriminatedUnionConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DiscriminatedUnionConverter.cs"];
m0_46 [label="Exit Newtonsoft.Json.Converters.DiscriminatedUnionConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", span="83-83", cluster="Newtonsoft.Json.Converters.DiscriminatedUnionConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="DiscriminatedUnionConverter.cs"];
m0_72 [label="Entry System.Reflection.MemberInfo.GetCustomAttributes(bool)", span="0-0", cluster="System.Reflection.MemberInfo.GetCustomAttributes(bool)", file="DiscriminatedUnionConverter.cs"];
m0_14 [label="Entry object.GetType()", span="0-0", cluster="object.GetType()", file="DiscriminatedUnionConverter.cs"];
m0_83 [label="Entry Newtonsoft.Json.JsonReader.Read()", span="355-355", cluster="Newtonsoft.Json.JsonReader.Read()", file="DiscriminatedUnionConverter.cs"];
m0_73 [label="Entry System.Type.Assembly()", span="152-152", cluster="System.Type.Assembly()", file="DiscriminatedUnionConverter.cs"];
m0_74 [label="Entry Newtonsoft.Json.Utilities.FSharpUtils.EnsureInitialized(System.Reflection.Assembly)", span="54-54", cluster="Newtonsoft.Json.Utilities.FSharpUtils.EnsureInitialized(System.Reflection.Assembly)", file="DiscriminatedUnionConverter.cs"];
m0_19 [label="Entry Newtonsoft.Json.JsonWriter.WritePropertyName(string)", span="407-407", cluster="Newtonsoft.Json.JsonWriter.WritePropertyName(string)", file="DiscriminatedUnionConverter.cs"];
m0_15 [label="Entry Newtonsoft.Json.Utilities.MethodCall<T, TResult>.Invoke(T, params object[])", span="27-27", cluster="Newtonsoft.Json.Utilities.MethodCall<T, TResult>.Invoke(T, params object[])", file="DiscriminatedUnionConverter.cs"];
m0_52 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="DiscriminatedUnionConverter.cs"];
m0_51 [label="Entry string.FormatWith(System.IFormatProvider, object)", span="47-47", cluster="string.FormatWith(System.IFormatProvider, object)", file="DiscriminatedUnionConverter.cs"];
m0_0 [label="Entry Newtonsoft.Json.Converters.DiscriminatedUnionConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", span="56-56", cluster="Newtonsoft.Json.Converters.DiscriminatedUnionConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", file="DiscriminatedUnionConverter.cs"];
m0_3 [label="object result = FSharpUtils.GetUnionFields(null, value, t, null)", span="62-62", cluster="Newtonsoft.Json.Converters.DiscriminatedUnionConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", color=green, community=0, file="DiscriminatedUnionConverter.cs"];
m0_2 [label="Type t = value.GetType()", span="60-60", cluster="Newtonsoft.Json.Converters.DiscriminatedUnionConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", file="DiscriminatedUnionConverter.cs"];
m0_4 [label="object info = FSharpUtils.GetUnionCaseInfo(result)", span="63-63", cluster="Newtonsoft.Json.Converters.DiscriminatedUnionConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", color=green, community=0, file="DiscriminatedUnionConverter.cs"];
m0_5 [label="object fields = FSharpUtils.GetUnionCaseFields(result)", span="64-64", cluster="Newtonsoft.Json.Converters.DiscriminatedUnionConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", color=green, community=0, file="DiscriminatedUnionConverter.cs"];
m0_6 [label="object caseName = FSharpUtils.GetUnionCaseInfoName(info)", span="65-65", cluster="Newtonsoft.Json.Converters.DiscriminatedUnionConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", color=green, community=0, file="DiscriminatedUnionConverter.cs"];
m0_11 [label="serializer.Serialize(writer, fields)", span="71-71", cluster="Newtonsoft.Json.Converters.DiscriminatedUnionConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", file="DiscriminatedUnionConverter.cs"];
m0_7 [label="writer.WriteStartObject()", span="67-67", cluster="Newtonsoft.Json.Converters.DiscriminatedUnionConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", file="DiscriminatedUnionConverter.cs"];
m0_9 [label="writer.WriteValue((string)caseName)", span="69-69", cluster="Newtonsoft.Json.Converters.DiscriminatedUnionConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", file="DiscriminatedUnionConverter.cs"];
m0_1 [label="DefaultContractResolver resolver = serializer.ContractResolver as DefaultContractResolver", span="58-58", cluster="Newtonsoft.Json.Converters.DiscriminatedUnionConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", file="DiscriminatedUnionConverter.cs"];
m0_8 [label="writer.WritePropertyName((resolver != null) ? resolver.GetResolvedPropertyName(CasePropertyName) : CasePropertyName)", span="68-68", cluster="Newtonsoft.Json.Converters.DiscriminatedUnionConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", file="DiscriminatedUnionConverter.cs"];
m0_10 [label="writer.WritePropertyName((resolver != null) ? resolver.GetResolvedPropertyName(FieldsPropertyName) : FieldsPropertyName)", span="70-70", cluster="Newtonsoft.Json.Converters.DiscriminatedUnionConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", file="DiscriminatedUnionConverter.cs"];
m0_12 [label="writer.WriteEndObject()", span="72-72", cluster="Newtonsoft.Json.Converters.DiscriminatedUnionConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", file="DiscriminatedUnionConverter.cs"];
m0_13 [label="Exit Newtonsoft.Json.Converters.DiscriminatedUnionConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", span="56-56", cluster="Newtonsoft.Json.Converters.DiscriminatedUnionConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", file="DiscriminatedUnionConverter.cs"];
m0_21 [label="Entry Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter, object)", span="789-789", cluster="Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter, object)", file="DiscriminatedUnionConverter.cs"];
m0_47 [label="Entry Newtonsoft.Json.Converters.DiscriminatedUnionConverter.ReadAndAssertProperty(Newtonsoft.Json.JsonReader, string)", span="167-167", cluster="Newtonsoft.Json.Converters.DiscriminatedUnionConverter.ReadAndAssertProperty(Newtonsoft.Json.JsonReader, string)", file="DiscriminatedUnionConverter.cs"];
m0_75 [label="ReadAndAssert(reader)", span="169-169", cluster="Newtonsoft.Json.Converters.DiscriminatedUnionConverter.ReadAndAssertProperty(Newtonsoft.Json.JsonReader, string)", file="DiscriminatedUnionConverter.cs"];
m0_76 [label="reader.TokenType != JsonToken.PropertyName || !string.Equals(reader.Value.ToString(), propertyName, StringComparison.OrdinalIgnoreCase)", span="171-171", cluster="Newtonsoft.Json.Converters.DiscriminatedUnionConverter.ReadAndAssertProperty(Newtonsoft.Json.JsonReader, string)", file="DiscriminatedUnionConverter.cs"];
m0_77 [label="throw new JsonSerializationException(''Expected JSON property '{0}'.''.FormatWith(CultureInfo.InvariantCulture, propertyName));", span="172-172", cluster="Newtonsoft.Json.Converters.DiscriminatedUnionConverter.ReadAndAssertProperty(Newtonsoft.Json.JsonReader, string)", file="DiscriminatedUnionConverter.cs"];
m0_78 [label="Exit Newtonsoft.Json.Converters.DiscriminatedUnionConverter.ReadAndAssertProperty(Newtonsoft.Json.JsonReader, string)", span="167-167", cluster="Newtonsoft.Json.Converters.DiscriminatedUnionConverter.ReadAndAssertProperty(Newtonsoft.Json.JsonReader, string)", file="DiscriminatedUnionConverter.cs"];
m0_16 [label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0", cluster="System.Func<T, TResult>.Invoke(T)", file="DiscriminatedUnionConverter.cs"];
m0_50 [label="Entry Newtonsoft.Json.JsonSerializationException.JsonSerializationException(string)", span="52-52", cluster="Newtonsoft.Json.JsonSerializationException.JsonSerializationException(string)", file="DiscriminatedUnionConverter.cs"];
m0_18 [label="Entry Newtonsoft.Json.Serialization.DefaultContractResolver.GetResolvedPropertyName(string)", span="1334-1334", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetResolvedPropertyName(string)", file="DiscriminatedUnionConverter.cs"];
m0_54 [label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.List<T>.Add(T)", file="DiscriminatedUnionConverter.cs"];
m0_53 [label="Entry Newtonsoft.Json.JsonSerializer.Deserialize(Newtonsoft.Json.JsonReader, System.Type)", span="670-670", cluster="Newtonsoft.Json.JsonSerializer.Deserialize(Newtonsoft.Json.JsonReader, System.Type)", file="DiscriminatedUnionConverter.cs"];
m0_20 [label="Entry Newtonsoft.Json.JsonWriter.WriteValue(string)", span="810-810", cluster="Newtonsoft.Json.JsonWriter.WriteValue(string)", file="DiscriminatedUnionConverter.cs"];
m0_56 [label="Entry Newtonsoft.Json.Converters.DiscriminatedUnionConverter.CanConvert(System.Type)", span="135-135", cluster="Newtonsoft.Json.Converters.DiscriminatedUnionConverter.CanConvert(System.Type)", file="DiscriminatedUnionConverter.cs"];
m0_69 [label="return (bool)FSharpUtils.IsUnion(null, objectType, null);", span="164-164", cluster="Newtonsoft.Json.Converters.DiscriminatedUnionConverter.CanConvert(System.Type)", color=green, community=0, file="DiscriminatedUnionConverter.cs"];
m0_67 [label="!isFSharpType", span="161-161", cluster="Newtonsoft.Json.Converters.DiscriminatedUnionConverter.CanConvert(System.Type)", file="DiscriminatedUnionConverter.cs"];
m0_65 [label="FSharpUtils.EnsureInitialized(attributeType.Assembly())", span="154-154", cluster="Newtonsoft.Json.Converters.DiscriminatedUnionConverter.CanConvert(System.Type)", color=green, community=0, file="DiscriminatedUnionConverter.cs"];
m0_63 [label="Type attributeType = attribute.GetType()", span="151-151", cluster="Newtonsoft.Json.Converters.DiscriminatedUnionConverter.CanConvert(System.Type)", file="DiscriminatedUnionConverter.cs"];
m0_64 [label="attributeType.Name == ''CompilationMappingAttribute''", span="152-152", cluster="Newtonsoft.Json.Converters.DiscriminatedUnionConverter.CanConvert(System.Type)", file="DiscriminatedUnionConverter.cs"];
m0_66 [label="isFSharpType = true", span="156-156", cluster="Newtonsoft.Json.Converters.DiscriminatedUnionConverter.CanConvert(System.Type)", file="DiscriminatedUnionConverter.cs"];
m0_57 [label="typeof(IEnumerable).IsAssignableFrom(objectType)", span="137-137", cluster="Newtonsoft.Json.Converters.DiscriminatedUnionConverter.CanConvert(System.Type)", file="DiscriminatedUnionConverter.cs"];
m0_60 [label="attributes = objectType.GetCustomAttributes(true)", span="144-144", cluster="Newtonsoft.Json.Converters.DiscriminatedUnionConverter.CanConvert(System.Type)", file="DiscriminatedUnionConverter.cs"];
m0_58 [label="return false;", span="138-138", cluster="Newtonsoft.Json.Converters.DiscriminatedUnionConverter.CanConvert(System.Type)", file="DiscriminatedUnionConverter.cs"];
m0_61 [label="bool isFSharpType = false", span="148-148", cluster="Newtonsoft.Json.Converters.DiscriminatedUnionConverter.CanConvert(System.Type)", file="DiscriminatedUnionConverter.cs"];
m0_62 [label=attributes, span="149-149", cluster="Newtonsoft.Json.Converters.DiscriminatedUnionConverter.CanConvert(System.Type)", file="DiscriminatedUnionConverter.cs"];
m0_68 [label="return false;", span="162-162", cluster="Newtonsoft.Json.Converters.DiscriminatedUnionConverter.CanConvert(System.Type)", file="DiscriminatedUnionConverter.cs"];
m0_59 [label="object[] attributes", span="142-142", cluster="Newtonsoft.Json.Converters.DiscriminatedUnionConverter.CanConvert(System.Type)", file="DiscriminatedUnionConverter.cs"];
m0_70 [label="Exit Newtonsoft.Json.Converters.DiscriminatedUnionConverter.CanConvert(System.Type)", span="135-135", cluster="Newtonsoft.Json.Converters.DiscriminatedUnionConverter.CanConvert(System.Type)", file="DiscriminatedUnionConverter.cs"];
m0_22 [label="Entry Newtonsoft.Json.JsonWriter.WriteEndObject()", span="365-365", cluster="Newtonsoft.Json.JsonWriter.WriteEndObject()", file="DiscriminatedUnionConverter.cs"];
m0_49 [label="Entry object.ToString()", span="0-0", cluster="object.ToString()", file="DiscriminatedUnionConverter.cs"];
m0_71 [label="Entry System.Type.IsAssignableFrom(System.Type)", span="0-0", cluster="System.Type.IsAssignableFrom(System.Type)", file="DiscriminatedUnionConverter.cs"];
m0_17 [label="Entry Newtonsoft.Json.JsonWriter.WriteStartObject()", span="357-357", cluster="Newtonsoft.Json.JsonWriter.WriteStartObject()", file="DiscriminatedUnionConverter.cs"];
m0_79 [label="Entry string.Equals(string, string, System.StringComparison)", span="0-0", cluster="string.Equals(string, string, System.StringComparison)", file="DiscriminatedUnionConverter.cs"];
m2_14 [label="Entry Newtonsoft.Json.Tests.Serialization.FSharpTests.Set()", span="59-59", cluster="Newtonsoft.Json.Tests.Serialization.FSharpTests.Set()", file="FSharpTests.cs"];
m2_15 [label="FSharpSet<int> l = SetModule.OfSeq(new List<int> { 1, 2, 3 })", span="61-61", cluster="Newtonsoft.Json.Tests.Serialization.FSharpTests.Set()", color=green, community=0, file="FSharpTests.cs"];
m2_16 [label="string json = JsonConvert.SerializeObject(l, Formatting.Indented)", span="63-63", cluster="Newtonsoft.Json.Tests.Serialization.FSharpTests.Set()", color=green, community=0, file="FSharpTests.cs"];
m2_19 [label="Assert.AreEqual(l.Count, l2.Count)", span="73-73", cluster="Newtonsoft.Json.Tests.Serialization.FSharpTests.Set()", color=green, community=0, file="FSharpTests.cs"];
m2_20 [label="CollectionAssert.AreEquivalent(l, l2)", span="74-74", cluster="Newtonsoft.Json.Tests.Serialization.FSharpTests.Set()", color=green, community=0, file="FSharpTests.cs"];
m2_17 [label="Assert.AreEqual(@''[\r\n  1,\r\n  2,\r\n  3\r\n]'', json)", span="65-69", cluster="Newtonsoft.Json.Tests.Serialization.FSharpTests.Set()", color=green, community=0, file="FSharpTests.cs"];
m2_18 [label="FSharpSet<int> l2 = JsonConvert.DeserializeObject<FSharpSet<int>>(json)", span="71-71", cluster="Newtonsoft.Json.Tests.Serialization.FSharpTests.Set()", color=green, community=0, file="FSharpTests.cs"];
m2_21 [label="Exit Newtonsoft.Json.Tests.Serialization.FSharpTests.Set()", span="59-59", cluster="Newtonsoft.Json.Tests.Serialization.FSharpTests.Set()", file="FSharpTests.cs"];
m2_22 [label="Entry Newtonsoft.Json.Tests.Serialization.FSharpTests.Map()", span="78-78", cluster="Newtonsoft.Json.Tests.Serialization.FSharpTests.Map()", file="FSharpTests.cs"];
m2_23 [label="FSharpMap<string, int> m1 = MapModule.OfSeq(new List<Tuple<string, int>> { Tuple.Create(''one'', 1), Tuple.Create(''II'', 2), Tuple.Create(''3'', 3) })", span="80-80", cluster="Newtonsoft.Json.Tests.Serialization.FSharpTests.Map()", color=green, community=0, file="FSharpTests.cs"];
m2_24 [label="string json = JsonConvert.SerializeObject(m1, Formatting.Indented)", span="82-82", cluster="Newtonsoft.Json.Tests.Serialization.FSharpTests.Map()", color=green, community=0, file="FSharpTests.cs"];
m2_26 [label="Assert.AreEqual(m1.Count, m2.Count)", span="86-86", cluster="Newtonsoft.Json.Tests.Serialization.FSharpTests.Map()", color=green, community=0, file="FSharpTests.cs"];
m2_25 [label="FSharpMap<string, int> m2 = JsonConvert.DeserializeObject<FSharpMap<string, int>>(json)", span="84-84", cluster="Newtonsoft.Json.Tests.Serialization.FSharpTests.Map()", color=green, community=0, file="FSharpTests.cs"];
m2_27 [label="Assert.AreEqual(1, m2[''one''])", span="87-87", cluster="Newtonsoft.Json.Tests.Serialization.FSharpTests.Map()", color=green, community=0, file="FSharpTests.cs"];
m2_28 [label="Assert.AreEqual(2, m2[''II''])", span="88-88", cluster="Newtonsoft.Json.Tests.Serialization.FSharpTests.Map()", color=green, community=0, file="FSharpTests.cs"];
m2_29 [label="Assert.AreEqual(3, m2[''3''])", span="89-89", cluster="Newtonsoft.Json.Tests.Serialization.FSharpTests.Map()", color=green, community=0, file="FSharpTests.cs"];
m2_30 [label="Exit Newtonsoft.Json.Tests.Serialization.FSharpTests.Map()", span="78-78", cluster="Newtonsoft.Json.Tests.Serialization.FSharpTests.Map()", file="FSharpTests.cs"];
m2_11 [label="Entry Unk.AreEqual", span="", cluster="Unk.AreEqual", file="FSharpTests.cs"];
m2_8 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="FSharpTests.cs"];
m2_13 [label="Entry Unk.AreEquivalent", span="", cluster="Unk.AreEquivalent", file="FSharpTests.cs"];
m2_9 [label="Entry Unk.OfSeq", span="", cluster="Unk.OfSeq", file="FSharpTests.cs"];
m2_12 [label="Entry Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string)", span="726-726", cluster="Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string)", file="FSharpTests.cs"];
m2_0 [label="Entry Newtonsoft.Json.Tests.Serialization.FSharpTests.List()", span="40-40", cluster="Newtonsoft.Json.Tests.Serialization.FSharpTests.List()", file="FSharpTests.cs"];
m2_1 [label="FSharpList<int> l = ListModule.OfSeq(new List<int> {1,2,3})", span="42-42", cluster="Newtonsoft.Json.Tests.Serialization.FSharpTests.List()", color=green, community=0, file="FSharpTests.cs"];
m2_2 [label="string json = JsonConvert.SerializeObject(l, Formatting.Indented)", span="44-44", cluster="Newtonsoft.Json.Tests.Serialization.FSharpTests.List()", color=green, community=0, file="FSharpTests.cs"];
m2_5 [label="Assert.AreEqual(l.Length, l2.Length)", span="54-54", cluster="Newtonsoft.Json.Tests.Serialization.FSharpTests.List()", color=green, community=0, file="FSharpTests.cs"];
m2_6 [label="CollectionAssert.AreEquivalent(l, l2)", span="55-55", cluster="Newtonsoft.Json.Tests.Serialization.FSharpTests.List()", color=green, community=0, file="FSharpTests.cs"];
m2_3 [label="Assert.AreEqual(@''[\r\n  1,\r\n  2,\r\n  3\r\n]'', json)", span="46-50", cluster="Newtonsoft.Json.Tests.Serialization.FSharpTests.List()", color=green, community=0, file="FSharpTests.cs"];
m2_4 [label="FSharpList<int> l2 = JsonConvert.DeserializeObject<FSharpList<int>>(json)", span="52-52", cluster="Newtonsoft.Json.Tests.Serialization.FSharpTests.List()", color=green, community=0, file="FSharpTests.cs"];
m2_7 [label="Exit Newtonsoft.Json.Tests.Serialization.FSharpTests.List()", span="40-40", cluster="Newtonsoft.Json.Tests.Serialization.FSharpTests.List()", file="FSharpTests.cs"];
m2_10 [label="Entry Unk.SerializeObject", span="", cluster="Unk.SerializeObject", file="FSharpTests.cs"];
m2_31 [label="Entry System.Tuple.Create<T1, T2>(T1, T2)", span="0-0", cluster="System.Tuple.Create<T1, T2>(T1, T2)", file="FSharpTests.cs"];
m3_11 [label="Entry JArray.cstr", span="", cluster="JArray.cstr", file="FSharpUtils.cs"];
m3_14 [label="Entry System.Console.WriteLine(string)", span="0-0", cluster="System.Console.WriteLine(string)", file="FSharpUtils.cs"];
m3_9 [label="Entry Newtonsoft.Json.Linq.JProperty.JProperty(string, object)", span="192-192", cluster="Newtonsoft.Json.Linq.JProperty.JProperty(string, object)", file="FSharpUtils.cs"];
m3_3 [label="Entry Newtonsoft.Json.Tests.Documentation.Examples.Linq.CreateJsonDeclaratively.Example()", span="25-25", cluster="Newtonsoft.Json.Tests.Documentation.Examples.Linq.CreateJsonDeclaratively.Example()", file="FSharpUtils.cs"];
m3_4 [label="List<Post> posts = GetPosts()", span="28-28", cluster="Newtonsoft.Json.Tests.Documentation.Examples.Linq.CreateJsonDeclaratively.Example()", color=green, community=0, file="FSharpUtils.cs"];
m3_5 [label="JObject rss =\r\n        new JObject(\r\n          new JProperty(''channel'',\r\n            new JObject(\r\n              new JProperty(''title'', ''James Newton-King''),\r\n              new JProperty(''link'', ''http://james.newtonking.com''),\r\n              new JProperty(''description'', ''James Newton-King's blog.''),\r\n              new JProperty(''item'',\r\n                new JArray(\r\n                  from p in posts\r\n                  orderby p.Title\r\n                  select new JObject(\r\n                    new JProperty(''title'', p.Title),\r\n                    new JProperty(''description'', p.Description),\r\n                    new JProperty(''link'', p.Link),\r\n                    new JProperty(''category'',\r\n                      new JArray(\r\n                        from c in p.Categories\r\n                        select new JValue(c)))))))))", span="30-48", cluster="Newtonsoft.Json.Tests.Documentation.Examples.Linq.CreateJsonDeclaratively.Example()", color=green, community=0, file="FSharpUtils.cs"];
m3_6 [label="Console.WriteLine(rss.ToString())", span="50-50", cluster="Newtonsoft.Json.Tests.Documentation.Examples.Linq.CreateJsonDeclaratively.Example()", color=green, community=0, file="FSharpUtils.cs"];
m3_7 [label="Exit Newtonsoft.Json.Tests.Documentation.Examples.Linq.CreateJsonDeclaratively.Example()", span="25-25", cluster="Newtonsoft.Json.Tests.Documentation.Examples.Linq.CreateJsonDeclaratively.Example()", file="FSharpUtils.cs"];
m3_12 [label="Entry Newtonsoft.Json.Linq.JValue.JValue(string)", span="127-127", cluster="Newtonsoft.Json.Linq.JValue.JValue(string)", file="FSharpUtils.cs"];
m3_13 [label="Entry Newtonsoft.Json.Linq.JToken.ToString()", span="389-389", cluster="Newtonsoft.Json.Linq.JToken.ToString()", file="FSharpUtils.cs"];
m3_10 [label="Entry Newtonsoft.Json.Linq.JObject.JObject(params object[])", span="104-104", cluster="Newtonsoft.Json.Linq.JObject.JObject(params object[])", file="FSharpUtils.cs"];
m3_0 [label="Entry Newtonsoft.Json.Tests.Documentation.Examples.Linq.CreateJsonDeclaratively.GetPosts()", span="20-20", cluster="Newtonsoft.Json.Tests.Documentation.Examples.Linq.CreateJsonDeclaratively.GetPosts()", file="FSharpUtils.cs"];
m3_1 [label="return null;", span="22-22", cluster="Newtonsoft.Json.Tests.Documentation.Examples.Linq.CreateJsonDeclaratively.GetPosts()", color=green, community=0, file="FSharpUtils.cs"];
m3_2 [label="Exit Newtonsoft.Json.Tests.Documentation.Examples.Linq.CreateJsonDeclaratively.GetPosts()", span="20-20", cluster="Newtonsoft.Json.Tests.Documentation.Examples.Linq.CreateJsonDeclaratively.GetPosts()", file="FSharpUtils.cs"];
m3_8 [label="Entry Newtonsoft.Json.Linq.JObject.JObject(object)", span="113-113", cluster="Newtonsoft.Json.Linq.JObject.JObject(object)", file="FSharpUtils.cs"];
m3_15 [label="Newtonsoft.Json.Tests.Documentation.Examples.Linq.CreateJsonDeclaratively", span="", file="FSharpUtils.cs"];
m4_281 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScanNestResults()", span="456-456", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScanNestResults()", file="JPathExecuteTests.cs"];
m4_288 [label="Assert.AreEqual(4, t.Count)", span="465-465", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScanNestResults()", file="JPathExecuteTests.cs"];
m4_289 [label="Assert.AreEqual(1, (int)t[0])", span="466-466", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScanNestResults()", file="JPathExecuteTests.cs"];
m4_290 [label="Assert.AreEqual(2, (int)t[1])", span="467-467", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScanNestResults()", file="JPathExecuteTests.cs"];
m4_286 [label="IList<JToken> t = a.SelectTokens(''$..Name'').ToList()", span="463-463", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScanNestResults()", file="JPathExecuteTests.cs"];
m4_287 [label="Assert.IsNotNull(t)", span="464-464", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScanNestResults()", file="JPathExecuteTests.cs"];
m4_291 [label="Assert.IsTrue(JToken.DeepEquals(new JObject { { ''Name'', new JArray(3) } }, t[2]))", span="468-468", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScanNestResults()", file="JPathExecuteTests.cs"];
m4_285 [label="JArray a = new JArray(o1, o2, o3)", span="461-461", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScanNestResults()", file="JPathExecuteTests.cs"];
m4_292 [label="Assert.IsTrue(JToken.DeepEquals(new JArray(3), t[3]))", span="469-469", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScanNestResults()", file="JPathExecuteTests.cs"];
m4_284 [label="JObject o3 = new JObject { { ''Name'', new JObject { { ''Name'', new JArray(3) } } } }", span="460-460", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScanNestResults()", file="JPathExecuteTests.cs"];
m4_282 [label="JObject o1 = new JObject { { ''Name'', 1 } }", span="458-458", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScanNestResults()", file="JPathExecuteTests.cs"];
m4_283 [label="JObject o2 = new JObject { { ''Name'', 2 } }", span="459-459", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScanNestResults()", file="JPathExecuteTests.cs"];
m4_293 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScanNestResults()", span="456-456", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScanNestResults()", file="JPathExecuteTests.cs"];
m4_182 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayOutOfBoundsIndxerWithError()", span="329-329", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayOutOfBoundsIndxerWithError()", file="JPathExecuteTests.cs"];
m4_184 [label="ExceptionAssert.Throws<JsonException>(\r\n                ''Index 1000 outside the bounds of JArray.'',\r\n                () => { a.SelectToken(''[1000].Ha'', true); })", span="333-335", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayOutOfBoundsIndxerWithError()", file="JPathExecuteTests.cs"];
m4_183 [label="JArray a = new JArray(1, 2, 3, 4, 5)", span="331-331", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayOutOfBoundsIndxerWithError()", file="JPathExecuteTests.cs"];
m4_185 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayOutOfBoundsIndxerWithError()", span="329-329", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayOutOfBoundsIndxerWithError()", file="JPathExecuteTests.cs"];
m4_135 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingPropertyWithError()", span="264-264", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingPropertyWithError()", file="JPathExecuteTests.cs"];
m4_136 [label="JObject o = new JObject(\r\n                new JProperty(''Blah'', 1))", span="266-267", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingPropertyWithError()", file="JPathExecuteTests.cs"];
m4_137 [label="ExceptionAssert.Throws<JsonException>(\r\n                ''Property 'Missing' does not exist on JObject.'',\r\n                () => { o.SelectToken(''Missing'', true); })", span="269-271", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingPropertyWithError()", file="JPathExecuteTests.cs"];
m4_138 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingPropertyWithError()", span="264-264", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingPropertyWithError()", file="JPathExecuteTests.cs"];
m4_342 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsQuery()", span="544-544", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsQuery()", file="JPathExecuteTests.cs"];
m4_343 [label="JArray a = new JArray(\r\n                new JArray(new JObject(new JProperty(''hi'', ''ho''))),\r\n                new JArray(new JObject(new JProperty(''hi'', ''ha''))))", span="546-548", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsQuery()", file="JPathExecuteTests.cs"];
m4_347 [label="Assert.IsTrue(JToken.DeepEquals(new JArray(new JObject(new JProperty(''hi'', ''ho''))), t[0]))", span="553-553", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsQuery()", file="JPathExecuteTests.cs"];
m4_346 [label="Assert.AreEqual(1, t.Count)", span="552-552", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsQuery()", file="JPathExecuteTests.cs"];
m4_344 [label="IList<JToken> t = a.SelectTokens(''[ ?( @..hi <> 'ha' ) ]'').ToList()", span="550-550", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsQuery()", file="JPathExecuteTests.cs"];
m4_345 [label="Assert.IsNotNull(t)", span="551-551", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsQuery()", file="JPathExecuteTests.cs"];
m4_348 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsQuery()", span="544-544", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsQuery()", file="JPathExecuteTests.cs"];
m4_255 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScan()", span="425-425", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScan()", file="JPathExecuteTests.cs"];
m4_261 [label="Assert.AreEqual(2, t.Count)", span="433-433", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScan()", file="JPathExecuteTests.cs"];
m4_262 [label="Assert.AreEqual(1, (int)t[0])", span="434-434", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScan()", file="JPathExecuteTests.cs"];
m4_263 [label="Assert.AreEqual(2, (int)t[1])", span="435-435", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScan()", file="JPathExecuteTests.cs"];
m4_259 [label="IList<JToken> t = a.SelectTokens(''$..Name'').ToList()", span="431-431", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScan()", file="JPathExecuteTests.cs"];
m4_260 [label="Assert.IsNotNull(t)", span="432-432", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScan()", file="JPathExecuteTests.cs"];
m4_258 [label="JArray a = new JArray(o1, o2)", span="429-429", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScan()", file="JPathExecuteTests.cs"];
m4_256 [label="JObject o1 = new JObject{ {''Name'', 1} }", span="427-427", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScan()", file="JPathExecuteTests.cs"];
m4_257 [label="JObject o2 = new JObject{ {''Name'', 2} }", span="428-428", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScan()", file="JPathExecuteTests.cs"];
m4_264 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScan()", span="425-425", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScan()", file="JPathExecuteTests.cs"];
m4_177 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateOutOfBoundsIndxer()", span="320-320", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateOutOfBoundsIndxer()", file="JPathExecuteTests.cs"];
m4_179 [label="JToken t = a.SelectToken(''[1000].Ha'')", span="324-324", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateOutOfBoundsIndxer()", file="JPathExecuteTests.cs"];
m4_178 [label="JArray a = new JArray(1, 2, 3, 4, 5)", span="322-322", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateOutOfBoundsIndxer()", file="JPathExecuteTests.cs"];
m4_180 [label="Assert.IsNull(t)", span="325-325", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateOutOfBoundsIndxer()", file="JPathExecuteTests.cs"];
m4_181 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateOutOfBoundsIndxer()", span="320-320", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateOutOfBoundsIndxer()", file="JPathExecuteTests.cs"];
m4_6 [label="Entry Newtonsoft.Json.Linq.JProperty.JProperty(string, object)", span="196-196", cluster="Newtonsoft.Json.Linq.JProperty.JProperty(string, object)", file="JPathExecuteTests.cs"];
m4_379 [label="Entry JProperty.cstr", span="", cluster="JProperty.cstr", file="JPathExecuteTests.cs"];
m4_253 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", file="JPathExecuteTests.cs"];
m4_83 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardIndexOnObjectWithError()", span="185-185", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardIndexOnObjectWithError()", file="JPathExecuteTests.cs"];
m4_84 [label="JObject o = new JObject(\r\n                new JProperty(''Blah'', 1))", span="187-188", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardIndexOnObjectWithError()", file="JPathExecuteTests.cs"];
m4_85 [label="ExceptionAssert.Throws<JsonException>(\r\n                @''Index * not valid on JObject.'',\r\n                () => { o.SelectToken(''[*]'', true); })", span="190-192", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardIndexOnObjectWithError()", file="JPathExecuteTests.cs"];
m4_86 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardIndexOnObjectWithError()", span="185-185", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardIndexOnObjectWithError()", file="JPathExecuteTests.cs"];
m4_36 [label="Entry Newtonsoft.Json.Linq.JArray.JArray(params object[])", span="81-81", cluster="Newtonsoft.Json.Linq.JArray.JArray(params object[])", file="JPathExecuteTests.cs"];
m4_349 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NoPathQuery()", span="557-557", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NoPathQuery()", file="JPathExecuteTests.cs"];
m4_353 [label="Assert.AreEqual(2, t.Count)", span="563-563", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NoPathQuery()", file="JPathExecuteTests.cs"];
m4_354 [label="Assert.AreEqual(2, (int)t[0])", span="564-564", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NoPathQuery()", file="JPathExecuteTests.cs"];
m4_355 [label="Assert.AreEqual(3, (int)t[1])", span="565-565", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NoPathQuery()", file="JPathExecuteTests.cs"];
m4_351 [label="IList<JToken> t = a.SelectTokens(''[ ?( @ > 1 ) ]'').ToList()", span="561-561", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NoPathQuery()", file="JPathExecuteTests.cs"];
m4_352 [label="Assert.IsNotNull(t)", span="562-562", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NoPathQuery()", file="JPathExecuteTests.cs"];
m4_350 [label="JArray a = new JArray(1, 2, 3)", span="559-559", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NoPathQuery()", file="JPathExecuteTests.cs"];
m4_356 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NoPathQuery()", span="557-557", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NoPathQuery()", file="JPathExecuteTests.cs"];
m4_53 [label="Entry Newtonsoft.Json.Linq.JObject.JObject(params object[])", span="105-105", cluster="Newtonsoft.Json.Linq.JObject.JObject(params object[])", file="JPathExecuteTests.cs"];
m4_97 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyOnArray()", span="207-207", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyOnArray()", file="JPathExecuteTests.cs"];
m4_99 [label="JToken t = a.SelectToken(''BlahBlah'')", span="211-211", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyOnArray()", file="JPathExecuteTests.cs"];
m4_98 [label="JArray a = new JArray(1, 2, 3, 4, 5)", span="209-209", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyOnArray()", file="JPathExecuteTests.cs"];
m4_100 [label="Assert.IsNull(t)", span="212-212", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyOnArray()", file="JPathExecuteTests.cs"];
m4_101 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyOnArray()", span="207-207", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyOnArray()", file="JPathExecuteTests.cs"];
m4_68 [label="Entry Unk.IsNull", span="", cluster="Unk.IsNull", file="JPathExecuteTests.cs"];
m4_0 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyPropertyIndexer()", span="53-53", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyPropertyIndexer()", file="JPathExecuteTests.cs"];
m4_1 [label="JObject o = new JObject(\r\n                new JProperty('''', 1))", span="55-56", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyPropertyIndexer()", color=green, community=1, file="JPathExecuteTests.cs"];
m4_2 [label="JToken t = o.SelectToken(''['']'')", span="58-58", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyPropertyIndexer()", color=green, community=0, file="JPathExecuteTests.cs"];
m4_3 [label="Assert.AreEqual(1, (int)t)", span="59-59", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyPropertyIndexer()", color=green, community=0, file="JPathExecuteTests.cs"];
m4_4 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyPropertyIndexer()", span="53-53", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyPropertyIndexer()", file="JPathExecuteTests.cs"];
m4_7 [label="Entry Newtonsoft.Json.Linq.JToken.SelectToken(string)", span="1922-1922", cluster="Newtonsoft.Json.Linq.JToken.SelectToken(string)", file="JPathExecuteTests.cs"];
m4_328 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ExistsQuery()", span="520-520", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ExistsQuery()", file="JPathExecuteTests.cs"];
m4_329 [label="JArray a = new JArray(new JObject(new JProperty(''hi'', ''ho'')), new JObject(new JProperty(''hi2'', ''ha'')))", span="522-522", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ExistsQuery()", file="JPathExecuteTests.cs"];
m4_333 [label="Assert.IsTrue(JToken.DeepEquals(new JObject(new JProperty(''hi'', ''ho'')), t[0]))", span="527-527", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ExistsQuery()", file="JPathExecuteTests.cs"];
m4_332 [label="Assert.AreEqual(1, t.Count)", span="526-526", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ExistsQuery()", file="JPathExecuteTests.cs"];
m4_330 [label="IList<JToken> t = a.SelectTokens(''[ ?( @.hi ) ]'').ToList()", span="524-524", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ExistsQuery()", file="JPathExecuteTests.cs"];
m4_331 [label="Assert.IsNotNull(t)", span="525-525", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ExistsQuery()", file="JPathExecuteTests.cs"];
m4_334 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ExistsQuery()", span="520-520", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ExistsQuery()", file="JPathExecuteTests.cs"];
m4_109 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyOnArrayWithError()", span="226-226", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyOnArrayWithError()", file="JPathExecuteTests.cs"];
m4_111 [label="ExceptionAssert.Throws<JsonException>(\r\n                @''Property 'BlahBlah' not valid on JArray.'',\r\n                () => { a.SelectToken(''BlahBlah'', true); })", span="230-232", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyOnArrayWithError()", file="JPathExecuteTests.cs"];
m4_110 [label="JArray a = new JArray(1, 2, 3, 4, 5)", span="228-228", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyOnArrayWithError()", file="JPathExecuteTests.cs"];
m4_112 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyOnArrayWithError()", span="226-226", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyOnArrayWithError()", file="JPathExecuteTests.cs"];
m4_265 [label="Entry Newtonsoft.Json.Linq.JObject.JObject()", span="88-88", cluster="Newtonsoft.Json.Linq.JObject.JObject()", file="JPathExecuteTests.cs"];
m4_37 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSingleProperty()", span="116-116", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSingleProperty()", file="JPathExecuteTests.cs"];
m4_38 [label="JObject o = new JObject(\r\n                new JProperty(''Blah'', 1))", span="118-119", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSingleProperty()", file="JPathExecuteTests.cs"];
m4_39 [label="JToken t = o.SelectToken(''Blah'')", span="121-121", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSingleProperty()", file="JPathExecuteTests.cs"];
m4_41 [label="Assert.AreEqual(JTokenType.Integer, t.Type)", span="123-123", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSingleProperty()", file="JPathExecuteTests.cs"];
m4_42 [label="Assert.AreEqual(1, (int)t)", span="124-124", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSingleProperty()", file="JPathExecuteTests.cs"];
m4_40 [label="Assert.IsNotNull(t)", span="122-122", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSingleProperty()", file="JPathExecuteTests.cs"];
m4_43 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSingleProperty()", span="116-116", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSingleProperty()", file="JPathExecuteTests.cs"];
m4_363 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQuery()", span="582-582", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQuery()", file="JPathExecuteTests.cs"];
m4_364 [label="JArray a = new JArray(\r\n                new JObject(new JProperty(''hi'', 1)),\r\n                new JObject(new JProperty(''hi'', 2)),\r\n                new JObject(new JProperty(''hi'', 3)))", span="584-587", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQuery()", file="JPathExecuteTests.cs"];
m4_368 [label="Assert.IsTrue(JToken.DeepEquals(new JObject(new JProperty(''hi'', 2)), t[0]))", span="592-592", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQuery()", file="JPathExecuteTests.cs"];
m4_369 [label="Assert.IsTrue(JToken.DeepEquals(new JObject(new JProperty(''hi'', 3)), t[1]))", span="593-593", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQuery()", file="JPathExecuteTests.cs"];
m4_367 [label="Assert.AreEqual(2, t.Count)", span="591-591", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQuery()", file="JPathExecuteTests.cs"];
m4_365 [label="IList<JToken> t = a.SelectTokens(''[ ?( @.hi > 1 ) ]'').ToList()", span="589-589", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQuery()", file="JPathExecuteTests.cs"];
m4_366 [label="Assert.IsNotNull(t)", span="590-590", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQuery()", file="JPathExecuteTests.cs"];
m4_370 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQuery()", span="582-582", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQuery()", file="JPathExecuteTests.cs"];
m4_322 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateLastSingleCharacterProperty()", span="511-511", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateLastSingleCharacterProperty()", file="JPathExecuteTests.cs"];
m4_324 [label="string a2 = (string)o2.SelectToken(''People[0].N'')", span="514-514", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateLastSingleCharacterProperty()", file="JPathExecuteTests.cs"];
m4_325 [label="Assert.AreEqual(''Jeff'', a2)", span="516-516", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateLastSingleCharacterProperty()", file="JPathExecuteTests.cs"];
m4_323 [label="JObject o2 = JObject.Parse(''{'People':[{'N':'Jeff'}]}'')", span="513-513", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateLastSingleCharacterProperty()", file="JPathExecuteTests.cs"];
m4_326 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateLastSingleCharacterProperty()", span="511-511", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateLastSingleCharacterProperty()", file="JPathExecuteTests.cs"];
m4_425 [label="Entry Unk.ToList", span="", cluster="Unk.ToList", file="JPathExecuteTests.cs"];
m4_8 [label="Entry Unk.AreEqual", span="", cluster="Unk.AreEqual", file="JPathExecuteTests.cs"];
m4_371 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQueryBigInteger()", span="598-598", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQueryBigInteger()", file="JPathExecuteTests.cs"];
m4_372 [label="JArray a = new JArray(\r\n                new JObject(new JProperty(''hi'', new BigInteger(1))),\r\n                new JObject(new JProperty(''hi'', new BigInteger(2))),\r\n                new JObject(new JProperty(''hi'', new BigInteger(3))))", span="600-603", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQueryBigInteger()", file="JPathExecuteTests.cs"];
m4_376 [label="Assert.IsTrue(JToken.DeepEquals(new JObject(new JProperty(''hi'', 2)), t[0]))", span="608-608", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQueryBigInteger()", file="JPathExecuteTests.cs"];
m4_377 [label="Assert.IsTrue(JToken.DeepEquals(new JObject(new JProperty(''hi'', 3)), t[1]))", span="609-609", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQueryBigInteger()", file="JPathExecuteTests.cs"];
m4_375 [label="Assert.AreEqual(2, t.Count)", span="607-607", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQueryBigInteger()", file="JPathExecuteTests.cs"];
m4_373 [label="IList<JToken> t = a.SelectTokens(''[ ?( @.hi > 1 ) ]'').ToList()", span="605-605", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQueryBigInteger()", file="JPathExecuteTests.cs"];
m4_374 [label="Assert.IsNotNull(t)", span="606-606", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQueryBigInteger()", file="JPathExecuteTests.cs"];
m4_378 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQueryBigInteger()", span="598-598", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQueryBigInteger()", file="JPathExecuteTests.cs"];
m4_56 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QuoteName()", span="142-142", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QuoteName()", file="JPathExecuteTests.cs"];
m4_57 [label="JObject o = new JObject(\r\n                new JProperty(''Blah'', 1))", span="144-145", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QuoteName()", file="JPathExecuteTests.cs"];
m4_58 [label="JToken t = o.SelectToken(''['Blah']'')", span="147-147", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QuoteName()", file="JPathExecuteTests.cs"];
m4_60 [label="Assert.AreEqual(JTokenType.Integer, t.Type)", span="149-149", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QuoteName()", file="JPathExecuteTests.cs"];
m4_61 [label="Assert.AreEqual(1, (int)t)", span="150-150", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QuoteName()", file="JPathExecuteTests.cs"];
m4_59 [label="Assert.IsNotNull(t)", span="148-148", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QuoteName()", file="JPathExecuteTests.cs"];
m4_62 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QuoteName()", span="142-142", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QuoteName()", file="JPathExecuteTests.cs"];
m4_234 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardArray()", span="398-398", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardArray()", file="JPathExecuteTests.cs"];
m4_238 [label="Assert.AreEqual(4, t.Count)", span="404-404", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardArray()", file="JPathExecuteTests.cs"];
m4_239 [label="Assert.AreEqual(1, (int)t[0])", span="405-405", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardArray()", file="JPathExecuteTests.cs"];
m4_240 [label="Assert.AreEqual(2, (int)t[1])", span="406-406", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardArray()", file="JPathExecuteTests.cs"];
m4_241 [label="Assert.AreEqual(3, (int)t[2])", span="407-407", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardArray()", file="JPathExecuteTests.cs"];
m4_242 [label="Assert.AreEqual(4, (int)t[3])", span="408-408", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardArray()", file="JPathExecuteTests.cs"];
m4_236 [label="List<JToken> t = a.SelectTokens(''[*]'').ToList()", span="402-402", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardArray()", file="JPathExecuteTests.cs"];
m4_237 [label="Assert.IsNotNull(t)", span="403-403", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardArray()", file="JPathExecuteTests.cs"];
m4_235 [label="JArray a = new JArray(1, 2, 3, 4)", span="400-400", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardArray()", file="JPathExecuteTests.cs"];
m4_243 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardArray()", span="398-398", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardArray()", file="JPathExecuteTests.cs"];
m4_295 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", span="473-473", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="JPathExecuteTests.cs"];
m4_302 [label="Assert.AreEqual(9, t.Count)", span="482-482", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="JPathExecuteTests.cs"];
m4_305 [label="Assert.AreEqual(1, (int)t[2])", span="486-486", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="JPathExecuteTests.cs"];
m4_307 [label="Assert.AreEqual(2, (int)t[4])", span="488-488", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="JPathExecuteTests.cs"];
m4_311 [label="Assert.AreEqual(3, (int)t[8])", span="492-492", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="JPathExecuteTests.cs"];
m4_300 [label="IList<JToken> t = a.SelectTokens(''$..*'').ToList()", span="480-480", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="JPathExecuteTests.cs"];
m4_301 [label="Assert.IsNotNull(t)", span="481-481", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="JPathExecuteTests.cs"];
m4_303 [label="Assert.IsTrue(JToken.DeepEquals(a, t[0]))", span="484-484", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="JPathExecuteTests.cs"];
m4_304 [label="Assert.IsTrue(JToken.DeepEquals(o1, t[1]))", span="485-485", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="JPathExecuteTests.cs"];
m4_306 [label="Assert.IsTrue(JToken.DeepEquals(o2, t[3]))", span="487-487", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="JPathExecuteTests.cs"];
m4_308 [label="Assert.IsTrue(JToken.DeepEquals(o3, t[5]))", span="489-489", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="JPathExecuteTests.cs"];
m4_310 [label="Assert.IsTrue(JToken.DeepEquals(new JArray(3), t[7]))", span="491-491", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="JPathExecuteTests.cs"];
m4_299 [label="JArray a = new JArray(o1, o2, o3)", span="478-478", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="JPathExecuteTests.cs"];
m4_309 [label="Assert.IsTrue(JToken.DeepEquals(new JObject { { ''Name'', new JArray(3) } }, t[6]))", span="490-490", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="JPathExecuteTests.cs"];
m4_298 [label="JObject o3 = new JObject { { ''Name'', new JObject { { ''Name'', new JArray(3) } } } }", span="477-477", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="JPathExecuteTests.cs"];
m4_296 [label="JObject o1 = new JObject { { ''Name'', 1 } }", span="475-475", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="JPathExecuteTests.cs"];
m4_297 [label="JObject o2 = new JObject { { ''Name'', 2 } }", span="476-476", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="JPathExecuteTests.cs"];
m4_312 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", span="473-473", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="JPathExecuteTests.cs"];
m4_357 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.MultipleQueries()", span="569-569", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.MultipleQueries()", file="JPathExecuteTests.cs"];
m4_361 [label="Assert.AreEqual(0, t.Count)", span="578-578", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.MultipleQueries()", file="JPathExecuteTests.cs"];
m4_359 [label="IList<JToken> t = a.SelectTokens(''[?(@ <> 1)][?(@ <> 4)][?(@ < 7)]'').ToList()", span="576-576", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.MultipleQueries()", file="JPathExecuteTests.cs"];
m4_360 [label="Assert.IsNotNull(t)", span="577-577", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.MultipleQueries()", file="JPathExecuteTests.cs"];
m4_358 [label="JArray a = new JArray(1, 2, 3, 4, 5, 6, 7, 8, 9)", span="571-571", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.MultipleQueries()", file="JPathExecuteTests.cs"];
m4_362 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.MultipleQueries()", span="569-569", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.MultipleQueries()", file="JPathExecuteTests.cs"];
m4_102 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMultipleResultsError()", span="216-216", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMultipleResultsError()", file="JPathExecuteTests.cs"];
m4_104 [label="ExceptionAssert.Throws<JsonException>(\r\n                @''Path returned multiple tokens.'',\r\n                () => { a.SelectToken(''[0, 1]''); })", span="220-222", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMultipleResultsError()", file="JPathExecuteTests.cs"];
m4_103 [label="JArray a = new JArray(1, 2, 3, 4, 5)", span="218-218", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMultipleResultsError()", file="JPathExecuteTests.cs"];
m4_105 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMultipleResultsError()", span="216-216", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMultipleResultsError()", file="JPathExecuteTests.cs"];
m4_189 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArray()", span="339-339", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArray()", file="JPathExecuteTests.cs"];
m4_191 [label="JToken t = a.SelectToken(''[1]'')", span="343-343", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArray()", file="JPathExecuteTests.cs"];
m4_193 [label="Assert.AreEqual(JTokenType.Integer, t.Type)", span="345-345", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArray()", file="JPathExecuteTests.cs"];
m4_194 [label="Assert.AreEqual(2, (int)t)", span="346-346", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArray()", file="JPathExecuteTests.cs"];
m4_190 [label="JArray a = new JArray(1, 2, 3, 4)", span="341-341", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArray()", file="JPathExecuteTests.cs"];
m4_192 [label="Assert.IsNotNull(t)", span="344-344", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArray()", file="JPathExecuteTests.cs"];
m4_195 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArray()", span="339-339", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArray()", file="JPathExecuteTests.cs"];
m4_380 [label="Entry BigInteger.cstr", span="", cluster="BigInteger.cstr", file="JPathExecuteTests.cs"];
m4_44 [label="Entry Unk.IsNotNull", span="", cluster="Unk.IsNotNull", file="JPathExecuteTests.cs"];
m4_404 [label="Entry Newtonsoft.Json.Linq.JArray.Parse(string)", span="143-143", cluster="Newtonsoft.Json.Linq.JArray.Parse(string)", file="JPathExecuteTests.cs"];
m4_186 [label="Entry lambda expression", span="335-335", cluster="lambda expression", file="JPathExecuteTests.cs"];
m4_147 [label="o.SelectToken(''['Missing','Missing2']'', true)", span="282-282", cluster="lambda expression", color=green, community=0, file="JPathExecuteTests.cs"];
m4_146 [label="Entry lambda expression", span="282-282", cluster="lambda expression", file="JPathExecuteTests.cs"];
m4_148 [label="Exit lambda expression", span="282-282", cluster="lambda expression", file="JPathExecuteTests.cs"];
m4_107 [label="a.SelectToken(''[0, 1]'')", span="222-222", cluster="lambda expression", file="JPathExecuteTests.cs"];
m4_431 [label="(string)m.SelectToken(''Products[1].Name'')", span="736-736", cluster="lambda expression", file="JPathExecuteTests.cs"];
m4_434 [label="(decimal)m.SelectToken(''Products[0].Price'')", span="740-740", cluster="lambda expression", file="JPathExecuteTests.cs"];
m4_80 [label="o.SelectToken(''[1]'', true)", span="181-181", cluster="lambda expression", file="JPathExecuteTests.cs"];
m4_88 [label="o.SelectToken(''[*]'', true)", span="192-192", cluster="lambda expression", file="JPathExecuteTests.cs"];
m4_95 [label="o.SelectToken(''[:]'', true)", span="203-203", cluster="lambda expression", file="JPathExecuteTests.cs"];
m4_114 [label="a.SelectToken(''BlahBlah'', true)", span="232-232", cluster="lambda expression", file="JPathExecuteTests.cs"];
m4_121 [label="a.SelectToken(''[9,10]'', true)", span="242-242", cluster="lambda expression", file="JPathExecuteTests.cs"];
m4_129 [label="c.SelectToken(''[1]'', true)", span="252-252", cluster="lambda expression", file="JPathExecuteTests.cs"];
m4_140 [label="o.SelectToken(''Missing'', true)", span="271-271", cluster="lambda expression", file="JPathExecuteTests.cs"];
m4_154 [label="a.SelectToken(''['Missing','Missing2']'', true)", span="292-292", cluster="lambda expression", file="JPathExecuteTests.cs"];
m4_166 [label="a.SelectToken(''[99:]'', true)", span="302-302", cluster="lambda expression", file="JPathExecuteTests.cs"];
m4_169 [label="a.SelectToken(''[1:-19]'', true)", span="306-306", cluster="lambda expression", file="JPathExecuteTests.cs"];
m4_172 [label="a.SelectToken(''[:-19]'', true)", span="310-310", cluster="lambda expression", file="JPathExecuteTests.cs"];
m4_175 [label="a.SelectToken(''[:]'', true)", span="316-316", cluster="lambda expression", file="JPathExecuteTests.cs"];
m4_187 [label="a.SelectToken(''[1000].Ha'', true)", span="335-335", cluster="lambda expression", file="JPathExecuteTests.cs"];
m4_106 [label="Entry lambda expression", span="222-222", cluster="lambda expression", file="JPathExecuteTests.cs"];
m4_108 [label="Exit lambda expression", span="222-222", cluster="lambda expression", file="JPathExecuteTests.cs"];
m4_427 [label="Entry lambda expression", span="732-732", cluster="lambda expression", file="JPathExecuteTests.cs"];
m4_430 [label="Entry lambda expression", span="736-736", cluster="lambda expression", file="JPathExecuteTests.cs"];
m4_432 [label="Exit lambda expression", span="736-736", cluster="lambda expression", file="JPathExecuteTests.cs"];
m4_433 [label="Entry lambda expression", span="740-740", cluster="lambda expression", file="JPathExecuteTests.cs"];
m4_435 [label="Exit lambda expression", span="740-740", cluster="lambda expression", file="JPathExecuteTests.cs"];
m4_79 [label="Entry lambda expression", span="181-181", cluster="lambda expression", file="JPathExecuteTests.cs"];
m4_87 [label="Entry lambda expression", span="192-192", cluster="lambda expression", file="JPathExecuteTests.cs"];
m4_94 [label="Entry lambda expression", span="203-203", cluster="lambda expression", file="JPathExecuteTests.cs"];
m4_113 [label="Entry lambda expression", span="232-232", cluster="lambda expression", file="JPathExecuteTests.cs"];
m4_120 [label="Entry lambda expression", span="242-242", cluster="lambda expression", file="JPathExecuteTests.cs"];
m4_128 [label="Entry lambda expression", span="252-252", cluster="lambda expression", file="JPathExecuteTests.cs"];
m4_139 [label="Entry lambda expression", span="271-271", cluster="lambda expression", file="JPathExecuteTests.cs"];
m4_153 [label="Entry lambda expression", span="292-292", cluster="lambda expression", file="JPathExecuteTests.cs"];
m4_165 [label="Entry lambda expression", span="302-302", cluster="lambda expression", file="JPathExecuteTests.cs"];
m4_168 [label="Entry lambda expression", span="306-306", cluster="lambda expression", file="JPathExecuteTests.cs"];
m4_171 [label="Entry lambda expression", span="310-310", cluster="lambda expression", file="JPathExecuteTests.cs"];
m4_174 [label="Entry lambda expression", span="316-316", cluster="lambda expression", file="JPathExecuteTests.cs"];
m4_81 [label="Exit lambda expression", span="181-181", cluster="lambda expression", file="JPathExecuteTests.cs"];
m4_89 [label="Exit lambda expression", span="192-192", cluster="lambda expression", file="JPathExecuteTests.cs"];
m4_96 [label="Exit lambda expression", span="203-203", cluster="lambda expression", file="JPathExecuteTests.cs"];
m4_115 [label="Exit lambda expression", span="232-232", cluster="lambda expression", file="JPathExecuteTests.cs"];
m4_122 [label="Exit lambda expression", span="242-242", cluster="lambda expression", file="JPathExecuteTests.cs"];
m4_130 [label="Exit lambda expression", span="252-252", cluster="lambda expression", file="JPathExecuteTests.cs"];
m4_141 [label="Exit lambda expression", span="271-271", cluster="lambda expression", file="JPathExecuteTests.cs"];
m4_155 [label="Exit lambda expression", span="292-292", cluster="lambda expression", file="JPathExecuteTests.cs"];
m4_167 [label="Exit lambda expression", span="302-302", cluster="lambda expression", file="JPathExecuteTests.cs"];
m4_170 [label="Exit lambda expression", span="306-306", cluster="lambda expression", file="JPathExecuteTests.cs"];
m4_173 [label="Exit lambda expression", span="310-310", cluster="lambda expression", file="JPathExecuteTests.cs"];
m4_176 [label="Exit lambda expression", span="316-316", cluster="lambda expression", file="JPathExecuteTests.cs"];
m4_188 [label="Exit lambda expression", span="335-335", cluster="lambda expression", file="JPathExecuteTests.cs"];
m4_428 [label="(string)s", span="732-732", cluster="lambda expression", file="JPathExecuteTests.cs"];
m4_429 [label="Exit lambda expression", span="732-732", cluster="lambda expression", file="JPathExecuteTests.cs"];
m4_294 [label="Entry Newtonsoft.Json.Linq.JArray.JArray(object)", span="90-90", cluster="Newtonsoft.Json.Linq.JArray.JArray(object)", file="JPathExecuteTests.cs"];
m4_16 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyStringWithMatchingEmptyProperty()", span="76-76", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyStringWithMatchingEmptyProperty()", file="JPathExecuteTests.cs"];
m4_17 [label="JObject o = new JObject(\r\n                new JProperty('' '', 1))", span="78-79", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyStringWithMatchingEmptyProperty()", color=green, community=1, file="JPathExecuteTests.cs"];
m4_18 [label="JToken t = o.SelectToken(''[' ']'')", span="81-81", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyStringWithMatchingEmptyProperty()", color=green, community=0, file="JPathExecuteTests.cs"];
m4_19 [label="Assert.AreEqual(1, (int)t)", span="82-82", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyStringWithMatchingEmptyProperty()", color=green, community=0, file="JPathExecuteTests.cs"];
m4_20 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyStringWithMatchingEmptyProperty()", span="76-76", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyStringWithMatchingEmptyProperty()", file="JPathExecuteTests.cs"];
m4_313 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSinglePropertyReturningArray()", span="496-496", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSinglePropertyReturningArray()", file="JPathExecuteTests.cs"];
m4_314 [label="JObject o = new JObject(\r\n                new JProperty(''Blah'', new[] { 1, 2, 3 }))", span="498-499", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSinglePropertyReturningArray()", file="JPathExecuteTests.cs"];
m4_315 [label="JToken t = o.SelectToken(''Blah'')", span="501-501", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSinglePropertyReturningArray()", file="JPathExecuteTests.cs"];
m4_318 [label="t = o.SelectToken(''Blah[2]'')", span="505-505", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSinglePropertyReturningArray()", file="JPathExecuteTests.cs"];
m4_317 [label="Assert.AreEqual(JTokenType.Array, t.Type)", span="503-503", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSinglePropertyReturningArray()", file="JPathExecuteTests.cs"];
m4_319 [label="Assert.AreEqual(JTokenType.Integer, t.Type)", span="506-506", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSinglePropertyReturningArray()", file="JPathExecuteTests.cs"];
m4_320 [label="Assert.AreEqual(3, (int)t)", span="507-507", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSinglePropertyReturningArray()", file="JPathExecuteTests.cs"];
m4_316 [label="Assert.IsNotNull(t)", span="502-502", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSinglePropertyReturningArray()", file="JPathExecuteTests.cs"];
m4_321 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSinglePropertyReturningArray()", span="496-496", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSinglePropertyReturningArray()", file="JPathExecuteTests.cs"];
m4_149 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMultiPropertyIndexOnArrayWithError()", span="286-286", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMultiPropertyIndexOnArrayWithError()", file="JPathExecuteTests.cs"];
m4_151 [label="ExceptionAssert.Throws<JsonException>(\r\n                ''Properties 'Missing', 'Missing2' not valid on JArray.'',\r\n                () => { a.SelectToken(''['Missing','Missing2']'', true); })", span="290-292", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMultiPropertyIndexOnArrayWithError()", file="JPathExecuteTests.cs"];
m4_150 [label="JArray a = new JArray(1, 2, 3, 4, 5)", span="288-288", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMultiPropertyIndexOnArrayWithError()", file="JPathExecuteTests.cs"];
m4_152 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMultiPropertyIndexOnArrayWithError()", span="286-286", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMultiPropertyIndexOnArrayWithError()", file="JPathExecuteTests.cs"];
m4_90 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSliceOnObjectWithError()", span="196-196", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSliceOnObjectWithError()", file="JPathExecuteTests.cs"];
m4_91 [label="JObject o = new JObject(\r\n                new JProperty(''Blah'', 1))", span="198-199", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSliceOnObjectWithError()", file="JPathExecuteTests.cs"];
m4_92 [label="ExceptionAssert.Throws<JsonException>(\r\n                @''Array slice is not valid on JObject.'',\r\n                () => { o.SelectToken(''[:]'', true); })", span="201-203", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSliceOnObjectWithError()", file="JPathExecuteTests.cs"];
m4_93 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSliceOnObjectWithError()", span="196-196", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSliceOnObjectWithError()", file="JPathExecuteTests.cs"];
m4_21 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWhitespaceString()", span="86-86", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWhitespaceString()", file="JPathExecuteTests.cs"];
m4_22 [label="JObject o = new JObject(\r\n                new JProperty(''Blah'', 1))", span="88-89", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWhitespaceString()", file="JPathExecuteTests.cs"];
m4_23 [label="JToken t = o.SelectToken('' '')", span="91-91", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWhitespaceString()", file="JPathExecuteTests.cs"];
m4_24 [label="Assert.AreEqual(o, t)", span="92-92", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWhitespaceString()", file="JPathExecuteTests.cs"];
m4_25 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWhitespaceString()", span="86-86", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWhitespaceString()", file="JPathExecuteTests.cs"];
m4_399 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.PathWithConstructor()", span="657-657", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.PathWithConstructor()", file="JPathExecuteTests.cs"];
m4_401 [label="JValue v = (JValue)a.SelectToken(''[1].Property2[1][0]'')", span="680-680", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.PathWithConstructor()", file="JPathExecuteTests.cs"];
m4_402 [label="Assert.AreEqual(1L, v.Value)", span="681-681", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.PathWithConstructor()", file="JPathExecuteTests.cs"];
m4_400 [label="JArray a = JArray.Parse(@''[\r\n  {\r\n    ''''Property1'''': [\r\n      1,\r\n      [\r\n        [\r\n          []\r\n        ]\r\n      ]\r\n    ]\r\n  },\r\n  {\r\n    ''''Property2'''': new Constructor1(\r\n      null,\r\n      [\r\n        1\r\n      ]\r\n    )\r\n  }\r\n]'')", span="659-678", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.PathWithConstructor()", file="JPathExecuteTests.cs"];
m4_403 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.PathWithConstructor()", span="657-657", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.PathWithConstructor()", file="JPathExecuteTests.cs"];
m4_381 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterOrEqualQuery()", span="614-614", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterOrEqualQuery()", file="JPathExecuteTests.cs"];
m4_382 [label="JArray a = new JArray(\r\n                new JObject(new JProperty(''hi'', 1)),\r\n                new JObject(new JProperty(''hi'', 2)),\r\n                new JObject(new JProperty(''hi'', 2.0)),\r\n                new JObject(new JProperty(''hi'', 3)))", span="616-620", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterOrEqualQuery()", file="JPathExecuteTests.cs"];
m4_386 [label="Assert.IsTrue(JToken.DeepEquals(new JObject(new JProperty(''hi'', 1)), t[0]))", span="625-625", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterOrEqualQuery()", file="JPathExecuteTests.cs"];
m4_387 [label="Assert.IsTrue(JToken.DeepEquals(new JObject(new JProperty(''hi'', 2)), t[1]))", span="626-626", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterOrEqualQuery()", file="JPathExecuteTests.cs"];
m4_388 [label="Assert.IsTrue(JToken.DeepEquals(new JObject(new JProperty(''hi'', 2.0)), t[2]))", span="627-627", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterOrEqualQuery()", file="JPathExecuteTests.cs"];
m4_389 [label="Assert.IsTrue(JToken.DeepEquals(new JObject(new JProperty(''hi'', 3)), t[3]))", span="628-628", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterOrEqualQuery()", file="JPathExecuteTests.cs"];
m4_385 [label="Assert.AreEqual(4, t.Count)", span="624-624", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterOrEqualQuery()", file="JPathExecuteTests.cs"];
m4_383 [label="IList<JToken> t = a.SelectTokens(''[ ?( @.hi >= 1 ) ]'').ToList()", span="622-622", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterOrEqualQuery()", file="JPathExecuteTests.cs"];
m4_384 [label="Assert.IsNotNull(t)", span="623-623", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterOrEqualQuery()", file="JPathExecuteTests.cs"];
m4_390 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterOrEqualQuery()", span="614-614", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterOrEqualQuery()", file="JPathExecuteTests.cs"];
m4_391 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NestedQuery()", span="632-632", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NestedQuery()", file="JPathExecuteTests.cs"];
m4_392 [label="JArray a = new JArray(\r\n                new JObject(\r\n                    new JProperty(''name'', ''Bad Boys''),\r\n                    new JProperty(''cast'', new JArray(\r\n                        new JObject(new JProperty(''name'', ''Will Smith''))))),\r\n                new JObject(\r\n                    new JProperty(''name'', ''Independence Day''),\r\n                    new JProperty(''cast'', new JArray(\r\n                        new JObject(new JProperty(''name'', ''Will Smith''))))),\r\n                new JObject(\r\n                    new JProperty(''name'', ''The Rock''),\r\n                    new JProperty(''cast'', new JArray(\r\n                        new JObject(new JProperty(''name'', ''Nick Cage'')))))\r\n                        )", span="634-647", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NestedQuery()", file="JPathExecuteTests.cs"];
m4_395 [label="Assert.AreEqual(2, t.Count)", span="651-651", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NestedQuery()", file="JPathExecuteTests.cs"];
m4_396 [label="Assert.AreEqual(''Bad Boys'', (string)t[0])", span="652-652", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NestedQuery()", file="JPathExecuteTests.cs"];
m4_397 [label="Assert.AreEqual(''Independence Day'', (string)t[1])", span="653-653", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NestedQuery()", file="JPathExecuteTests.cs"];
m4_393 [label="IList<JToken> t = a.SelectTokens(''[?(@.cast[?(@.name=='Will Smith')])].name'').ToList()", span="649-649", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NestedQuery()", file="JPathExecuteTests.cs"];
m4_394 [label="Assert.IsNotNull(t)", span="650-650", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NestedQuery()", file="JPathExecuteTests.cs"];
m4_398 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NestedQuery()", span="632-632", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NestedQuery()", file="JPathExecuteTests.cs"];
m4_9 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyString()", span="63-63", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyString()", file="JPathExecuteTests.cs"];
m4_13 [label="t = o.SelectToken(''['']'')", span="71-71", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyString()", color=green, community=0, file="JPathExecuteTests.cs"];
m4_10 [label="JObject o = new JObject(\r\n                new JProperty(''Blah'', 1))", span="65-66", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyString()", file="JPathExecuteTests.cs"];
m4_12 [label="Assert.AreEqual(o, t)", span="69-69", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyString()", file="JPathExecuteTests.cs"];
m4_14 [label="Assert.AreEqual(null, t)", span="72-72", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyString()", color=green, community=0, file="JPathExecuteTests.cs"];
m4_11 [label="JToken t = o.SelectToken('''')", span="68-68", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyString()", file="JPathExecuteTests.cs"];
m4_15 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyString()", span="63-63", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyString()", file="JPathExecuteTests.cs"];
m4_156 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySliceWithError()", span="296-296", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySliceWithError()", file="JPathExecuteTests.cs"];
m4_158 [label="ExceptionAssert.Throws<JsonException>(\r\n                ''Array slice of 99 to * returned no results.'',\r\n                () => { a.SelectToken(''[99:]'', true); })", span="300-302", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySliceWithError()", file="JPathExecuteTests.cs"];
m4_159 [label="ExceptionAssert.Throws<JsonException>(\r\n                ''Array slice of 1 to -19 returned no results.'',\r\n                () => { a.SelectToken(''[1:-19]'', true); })", span="304-306", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySliceWithError()", file="JPathExecuteTests.cs"];
m4_160 [label="ExceptionAssert.Throws<JsonException>(\r\n                ''Array slice of * to -19 returned no results.'',\r\n                () => { a.SelectToken(''[:-19]'', true); })", span="308-310", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySliceWithError()", file="JPathExecuteTests.cs"];
m4_162 [label="ExceptionAssert.Throws<JsonException>(\r\n                ''Array slice of * to * returned no results.'',\r\n                () => { a.SelectToken(''[:]'', true); })", span="314-316", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySliceWithError()", file="JPathExecuteTests.cs"];
m4_157 [label="JArray a = new JArray(1, 2, 3, 4, 5)", span="298-298", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySliceWithError()", file="JPathExecuteTests.cs"];
m4_161 [label="a = new JArray()", span="312-312", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySliceWithError()", file="JPathExecuteTests.cs"];
m4_163 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySliceWithError()", span="296-296", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySliceWithError()", file="JPathExecuteTests.cs"];
m4_426 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Sum<TSource>(System.Func<TSource, decimal>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Sum<TSource>(System.Func<TSource, decimal>)", file="JPathExecuteTests.cs"];
m4_123 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateConstructorOutOfBoundsIndxerWithError()", span="246-246", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateConstructorOutOfBoundsIndxerWithError()", file="JPathExecuteTests.cs"];
m4_125 [label="ExceptionAssert.Throws<JsonException>(\r\n                @''Index 1 outside the bounds of JConstructor.'',\r\n                () => { c.SelectToken(''[1]'', true); })", span="250-252", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateConstructorOutOfBoundsIndxerWithError()", file="JPathExecuteTests.cs"];
m4_124 [label="JConstructor c = new JConstructor(''Blah'')", span="248-248", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateConstructorOutOfBoundsIndxerWithError()", file="JPathExecuteTests.cs"];
m4_126 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateConstructorOutOfBoundsIndxerWithError()", span="246-246", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateConstructorOutOfBoundsIndxerWithError()", file="JPathExecuteTests.cs"];
m4_31 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateDollarTypeString()", span="106-106", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateDollarTypeString()", file="JPathExecuteTests.cs"];
m4_32 [label="JObject o = new JObject(\r\n                new JProperty(''$values'', new JArray(1, 2, 3)))", span="108-109", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateDollarTypeString()", file="JPathExecuteTests.cs"];
m4_33 [label="JToken t = o.SelectToken(''$values[1]'')", span="111-111", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateDollarTypeString()", file="JPathExecuteTests.cs"];
m4_34 [label="Assert.AreEqual(2, (int)t)", span="112-112", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateDollarTypeString()", file="JPathExecuteTests.cs"];
m4_35 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateDollarTypeString()", span="106-106", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateDollarTypeString()", file="JPathExecuteTests.cs"];
m4_142 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingPropertyIndexWithError()", span="275-275", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingPropertyIndexWithError()", file="JPathExecuteTests.cs"];
m4_143 [label="JObject o = new JObject(\r\n                new JProperty(''Blah'', 1))", span="277-278", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingPropertyIndexWithError()", color=green, community=1, file="JPathExecuteTests.cs"];
m4_144 [label="ExceptionAssert.Throws<JsonException>(\r\n                ''Property 'Missing' does not exist on JObject.'',\r\n                () => { o.SelectToken(''['Missing','Missing2']'', true); })", span="280-282", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingPropertyIndexWithError()", color=green, community=0, file="JPathExecuteTests.cs"];
m4_145 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingPropertyIndexWithError()", span="275-275", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingPropertyIndexWithError()", file="JPathExecuteTests.cs"];
m4_54 [label="Entry Newtonsoft.Json.Linq.JToken.SelectTokens(string)", span="1958-1958", cluster="Newtonsoft.Json.Linq.JToken.SelectTokens(string)", file="JPathExecuteTests.cs"];
m4_254 [label="Entry System.Collections.Generic.IEnumerable<TSource>.ElementAt<TSource>(int)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.ElementAt<TSource>(int)", file="JPathExecuteTests.cs"];
m4_279 [label="Entry Newtonsoft.Json.Linq.JToken.DeepEquals(Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken)", span="150-150", cluster="Newtonsoft.Json.Linq.JToken.DeepEquals(Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken)", file="JPathExecuteTests.cs"];
m4_266 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScan()", span="439-439", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScan()", file="JPathExecuteTests.cs"];
m4_272 [label="Assert.AreEqual(5, t.Count)", span="447-447", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScan()", file="JPathExecuteTests.cs"];
m4_275 [label="Assert.AreEqual(1, (int)t[2])", span="450-450", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScan()", file="JPathExecuteTests.cs"];
m4_277 [label="Assert.AreEqual(2, (int)t[4])", span="452-452", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScan()", file="JPathExecuteTests.cs"];
m4_270 [label="IList<JToken> t = a.SelectTokens(''$..*'').ToList()", span="445-445", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScan()", file="JPathExecuteTests.cs"];
m4_271 [label="Assert.IsNotNull(t)", span="446-446", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScan()", file="JPathExecuteTests.cs"];
m4_273 [label="Assert.IsTrue(JToken.DeepEquals(a, t[0]))", span="448-448", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScan()", file="JPathExecuteTests.cs"];
m4_274 [label="Assert.IsTrue(JToken.DeepEquals(o1, t[1]))", span="449-449", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScan()", file="JPathExecuteTests.cs"];
m4_276 [label="Assert.IsTrue(JToken.DeepEquals(o2, t[3]))", span="451-451", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScan()", file="JPathExecuteTests.cs"];
m4_269 [label="JArray a = new JArray(o1, o2)", span="443-443", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScan()", file="JPathExecuteTests.cs"];
m4_267 [label="JObject o1 = new JObject { { ''Name'', 1 } }", span="441-441", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScan()", file="JPathExecuteTests.cs"];
m4_268 [label="JObject o2 = new JObject { { ''Name'', 2 } }", span="442-442", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScan()", file="JPathExecuteTests.cs"];
m4_278 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScan()", span="439-439", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScan()", file="JPathExecuteTests.cs"];
m4_26 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateDollarString()", span="96-96", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateDollarString()", file="JPathExecuteTests.cs"];
m4_27 [label="JObject o = new JObject(\r\n                new JProperty(''Blah'', 1))", span="98-99", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateDollarString()", file="JPathExecuteTests.cs"];
m4_28 [label="JToken t = o.SelectToken(''$'')", span="101-101", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateDollarString()", file="JPathExecuteTests.cs"];
m4_29 [label="Assert.AreEqual(o, t)", span="102-102", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateDollarString()", file="JPathExecuteTests.cs"];
m4_30 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateDollarString()", span="96-96", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateDollarString()", file="JPathExecuteTests.cs"];
m4_63 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingProperty()", span="154-154", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingProperty()", file="JPathExecuteTests.cs"];
m4_64 [label="JObject o = new JObject(\r\n                new JProperty(''Blah'', 1))", span="156-157", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingProperty()", file="JPathExecuteTests.cs"];
m4_65 [label="JToken t = o.SelectToken(''Missing[1]'')", span="159-159", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingProperty()", file="JPathExecuteTests.cs"];
m4_66 [label="Assert.IsNull(t)", span="160-160", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingProperty()", file="JPathExecuteTests.cs"];
m4_67 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingProperty()", span="154-154", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingProperty()", file="JPathExecuteTests.cs"];
m4_405 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", span="686-686", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="JPathExecuteTests.cs"];
m4_407 [label="string name = (string)o.SelectToken(''Manufacturers[0].Name'')", span="719-719", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="JPathExecuteTests.cs"];
m4_408 [label="decimal productPrice = (decimal)o.SelectToken(''Manufacturers[0].Products[0].Price'')", span="722-722", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="JPathExecuteTests.cs"];
m4_409 [label="string productName = (string)o.SelectToken(''Manufacturers[1].Products[0].Name'')", span="725-725", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="JPathExecuteTests.cs"];
m4_413 [label="IList<string> storeNames = o.SelectToken(''Stores'').Select(s => (string)s).ToList()", span="732-732", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="JPathExecuteTests.cs"];
m4_410 [label="Assert.AreEqual(''Acme Co'', name)", span="728-728", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="JPathExecuteTests.cs"];
m4_411 [label="Assert.AreEqual(50m, productPrice)", span="729-729", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="JPathExecuteTests.cs"];
m4_412 [label="Assert.AreEqual(''Elbow Grease'', productName)", span="730-730", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="JPathExecuteTests.cs"];
m4_416 [label="Assert.AreEqual(2, storeNames.Count)", span="743-743", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="JPathExecuteTests.cs"];
m4_417 [label="Assert.AreEqual(''Lambton Quay'', storeNames[0])", span="744-744", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="JPathExecuteTests.cs"];
m4_418 [label="Assert.AreEqual(''Willis Street'', storeNames[1])", span="745-745", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="JPathExecuteTests.cs"];
m4_419 [label="Assert.AreEqual(2, firstProductNames.Count)", span="746-746", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="JPathExecuteTests.cs"];
m4_420 [label="Assert.AreEqual(null, firstProductNames[0])", span="747-747", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="JPathExecuteTests.cs"];
m4_421 [label="Assert.AreEqual(''Headlight Fluid'', firstProductNames[1])", span="748-748", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="JPathExecuteTests.cs"];
m4_422 [label="Assert.AreEqual(149.95m, totalPrice)", span="749-749", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="JPathExecuteTests.cs"];
m4_406 [label="JObject o = JObject.Parse(@''{\r\n        ''''Stores'''': [\r\n          ''''Lambton Quay'''',\r\n          ''''Willis Street''''\r\n        ],\r\n        ''''Manufacturers'''': [\r\n          {\r\n            ''''Name'''': ''''Acme Co'''',\r\n            ''''Products'''': [\r\n              {\r\n                ''''Name'''': ''''Anvil'''',\r\n                ''''Price'''': 50\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            ''''Name'''': ''''Contoso'''',\r\n            ''''Products'''': [\r\n              {\r\n                ''''Name'''': ''''Elbow Grease'''',\r\n                ''''Price'''': 99.95\r\n              },\r\n              {\r\n                ''''Name'''': ''''Headlight Fluid'''',\r\n                ''''Price'''': 4\r\n              }\r\n            ]\r\n          }\r\n        ]\r\n      }'')", span="688-717", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="JPathExecuteTests.cs"];
m4_414 [label="IList<string> firstProductNames = o[''Manufacturers''].Select(m => (string)m.SelectToken(''Products[1].Name'')).ToList()", span="736-736", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="JPathExecuteTests.cs"];
m4_415 [label="decimal totalPrice = o[''Manufacturers''].Sum(m => (decimal)m.SelectToken(''Products[0].Price''))", span="740-740", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="JPathExecuteTests.cs"];
m4_423 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", span="686-686", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="JPathExecuteTests.cs"];
m4_244 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayMultipleIndexes()", span="412-412", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayMultipleIndexes()", file="JPathExecuteTests.cs"];
m4_248 [label="Assert.AreEqual(3, t.Count())", span="418-418", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayMultipleIndexes()", file="JPathExecuteTests.cs"];
m4_249 [label="Assert.AreEqual(2, (int)t.ElementAt(0))", span="419-419", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayMultipleIndexes()", file="JPathExecuteTests.cs"];
m4_250 [label="Assert.AreEqual(3, (int)t.ElementAt(1))", span="420-420", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayMultipleIndexes()", file="JPathExecuteTests.cs"];
m4_251 [label="Assert.AreEqual(1, (int)t.ElementAt(2))", span="421-421", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayMultipleIndexes()", file="JPathExecuteTests.cs"];
m4_246 [label="IEnumerable<JToken> t = a.SelectTokens(''[1,2,0]'')", span="416-416", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayMultipleIndexes()", file="JPathExecuteTests.cs"];
m4_247 [label="Assert.IsNotNull(t)", span="417-417", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayMultipleIndexes()", file="JPathExecuteTests.cs"];
m4_245 [label="JArray a = new JArray(1, 2, 3, 4)", span="414-414", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayMultipleIndexes()", file="JPathExecuteTests.cs"];
m4_252 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayMultipleIndexes()", span="412-412", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayMultipleIndexes()", file="JPathExecuteTests.cs"];
m4_127 [label="Entry Newtonsoft.Json.Linq.JConstructor.JConstructor(string)", span="110-110", cluster="Newtonsoft.Json.Linq.JConstructor.JConstructor(string)", file="JPathExecuteTests.cs"];
m4_69 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateIndexerOnObject()", span="164-164", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateIndexerOnObject()", file="JPathExecuteTests.cs"];
m4_70 [label="JObject o = new JObject(\r\n                new JProperty(''Blah'', 1))", span="166-167", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateIndexerOnObject()", file="JPathExecuteTests.cs"];
m4_71 [label="JToken t = o.SelectToken(''[1]'')", span="169-169", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateIndexerOnObject()", file="JPathExecuteTests.cs"];
m4_72 [label="Assert.IsNull(t)", span="170-170", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateIndexerOnObject()", file="JPathExecuteTests.cs"];
m4_73 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateIndexerOnObject()", span="164-164", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateIndexerOnObject()", file="JPathExecuteTests.cs"];
m4_116 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateNoResultsWithMultipleArrayIndexes()", span="236-236", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateNoResultsWithMultipleArrayIndexes()", file="JPathExecuteTests.cs"];
m4_118 [label="ExceptionAssert.Throws<JsonException>(\r\n                @''Index 9 outside the bounds of JArray.'',\r\n                () => { a.SelectToken(''[9,10]'', true); })", span="240-242", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateNoResultsWithMultipleArrayIndexes()", file="JPathExecuteTests.cs"];
m4_117 [label="JArray a = new JArray(1, 2, 3, 4, 5)", span="238-238", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateNoResultsWithMultipleArrayIndexes()", file="JPathExecuteTests.cs"];
m4_119 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateNoResultsWithMultipleArrayIndexes()", span="236-236", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateNoResultsWithMultipleArrayIndexes()", file="JPathExecuteTests.cs"];
m4_424 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="JPathExecuteTests.cs"];
m4_335 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EqualsQuery()", span="531-531", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EqualsQuery()", file="JPathExecuteTests.cs"];
m4_336 [label="JArray a = new JArray(\r\n                new JObject(new JProperty(''hi'', ''ho'')),\r\n                new JObject(new JProperty(''hi'', ''ha'')))", span="533-535", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EqualsQuery()", file="JPathExecuteTests.cs"];
m4_340 [label="Assert.IsTrue(JToken.DeepEquals(new JObject(new JProperty(''hi'', ''ha'')), t[0]))", span="540-540", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EqualsQuery()", file="JPathExecuteTests.cs"];
m4_339 [label="Assert.AreEqual(1, t.Count)", span="539-539", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EqualsQuery()", file="JPathExecuteTests.cs"];
m4_337 [label="IList<JToken> t = a.SelectTokens(''[ ?( @.['hi'] == 'ha' ) ]'').ToList()", span="537-537", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EqualsQuery()", file="JPathExecuteTests.cs"];
m4_338 [label="Assert.IsNotNull(t)", span="538-538", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EqualsQuery()", file="JPathExecuteTests.cs"];
m4_341 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EqualsQuery()", span="531-531", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EqualsQuery()", file="JPathExecuteTests.cs"];
m4_45 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardProperty()", span="128-128", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardProperty()", file="JPathExecuteTests.cs"];
m4_46 [label="JObject o = new JObject(\r\n                new JProperty(''Blah'', 1),\r\n                new JProperty(''Blah2'', 2))", span="130-132", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardProperty()", file="JPathExecuteTests.cs"];
m4_49 [label="Assert.AreEqual(2, t.Count)", span="136-136", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardProperty()", file="JPathExecuteTests.cs"];
m4_50 [label="Assert.AreEqual(1, (int)t[0])", span="137-137", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardProperty()", file="JPathExecuteTests.cs"];
m4_51 [label="Assert.AreEqual(2, (int)t[1])", span="138-138", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardProperty()", file="JPathExecuteTests.cs"];
m4_47 [label="IList<JToken> t = o.SelectTokens(''$.*'').ToList()", span="134-134", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardProperty()", file="JPathExecuteTests.cs"];
m4_48 [label="Assert.IsNotNull(t)", span="135-135", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardProperty()", file="JPathExecuteTests.cs"];
m4_52 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardProperty()", span="128-128", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardProperty()", file="JPathExecuteTests.cs"];
m4_196 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", span="350-350", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m4_200 [label="Assert.AreEqual(3, t.Count)", span="356-356", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m4_201 [label="Assert.AreEqual(7, (int)t[0])", span="357-357", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m4_202 [label="Assert.AreEqual(8, (int)t[1])", span="358-358", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m4_203 [label="Assert.AreEqual(9, (int)t[2])", span="359-359", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m4_205 [label="Assert.AreEqual(1, t.Count)", span="362-362", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m4_206 [label="Assert.AreEqual(9, (int)t[0])", span="363-363", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m4_208 [label="Assert.AreEqual(1, t.Count)", span="366-366", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m4_209 [label="Assert.AreEqual(8, (int)t[0])", span="367-367", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m4_211 [label="Assert.AreEqual(0, t.Count)", span="370-370", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m4_213 [label="Assert.AreEqual(1, t.Count)", span="373-373", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m4_214 [label="Assert.AreEqual(2, (int)t[0])", span="374-374", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m4_216 [label="Assert.AreEqual(9, t.Count)", span="377-377", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m4_217 [label="Assert.AreEqual(9, (int)t[0])", span="378-378", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m4_218 [label="Assert.AreEqual(8, (int)t[1])", span="379-379", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m4_219 [label="Assert.AreEqual(7, (int)t[2])", span="380-380", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m4_220 [label="Assert.AreEqual(6, (int)t[3])", span="381-381", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m4_221 [label="Assert.AreEqual(5, (int)t[4])", span="382-382", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m4_222 [label="Assert.AreEqual(4, (int)t[5])", span="383-383", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m4_223 [label="Assert.AreEqual(3, (int)t[6])", span="384-384", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m4_224 [label="Assert.AreEqual(2, (int)t[7])", span="385-385", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m4_225 [label="Assert.AreEqual(1, (int)t[8])", span="386-386", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m4_227 [label="Assert.AreEqual(5, t.Count)", span="389-389", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m4_228 [label="Assert.AreEqual(9, (int)t[0])", span="390-390", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m4_229 [label="Assert.AreEqual(7, (int)t[1])", span="391-391", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m4_230 [label="Assert.AreEqual(5, (int)t[2])", span="392-392", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m4_231 [label="Assert.AreEqual(3, (int)t[3])", span="393-393", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m4_232 [label="Assert.AreEqual(1, (int)t[4])", span="394-394", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m4_199 [label="t = a.SelectTokens(''[-3:]'').ToList()", span="355-355", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m4_204 [label="t = a.SelectTokens(''[-1:-2:-1]'').ToList()", span="361-361", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m4_207 [label="t = a.SelectTokens(''[-2:-1]'').ToList()", span="365-365", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m4_210 [label="t = a.SelectTokens(''[1:1]'').ToList()", span="369-369", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m4_212 [label="t = a.SelectTokens(''[1:2]'').ToList()", span="372-372", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m4_215 [label="t = a.SelectTokens(''[::-1]'').ToList()", span="376-376", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m4_226 [label="t = a.SelectTokens(''[::-2]'').ToList()", span="388-388", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m4_197 [label="JArray a = new JArray(1, 2, 3, 4, 5, 6, 7, 8, 9)", span="352-352", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m4_198 [label="IList<JToken> t = null", span="353-353", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m4_233 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", span="350-350", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m4_280 [label="Entry Unk.IsTrue", span="", cluster="Unk.IsTrue", file="JPathExecuteTests.cs"];
m4_82 [label="Entry Newtonsoft.Json.Linq.JToken.SelectToken(string, bool)", span="1935-1935", cluster="Newtonsoft.Json.Linq.JToken.SelectToken(string, bool)", file="JPathExecuteTests.cs"];
m4_74 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateIndexerOnObjectWithError()", span="174-174", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateIndexerOnObjectWithError()", file="JPathExecuteTests.cs"];
m4_75 [label="JObject o = new JObject(\r\n                new JProperty(''Blah'', 1))", span="176-177", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateIndexerOnObjectWithError()", file="JPathExecuteTests.cs"];
m4_76 [label="ExceptionAssert.Throws<JsonException>(\r\n                @''Index 1 not valid on JObject.'',\r\n                () => { o.SelectToken(''[1]'', true); })", span="179-181", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateIndexerOnObjectWithError()", file="JPathExecuteTests.cs"];
m4_77 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateIndexerOnObjectWithError()", span="174-174", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateIndexerOnObjectWithError()", file="JPathExecuteTests.cs"];
m4_327 [label="Entry Newtonsoft.Json.Linq.JObject.Parse(string)", span="326-326", cluster="Newtonsoft.Json.Linq.JObject.Parse(string)", file="JPathExecuteTests.cs"];
m4_131 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateConstructorOutOfBoundsIndxer()", span="256-256", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateConstructorOutOfBoundsIndxer()", file="JPathExecuteTests.cs"];
m4_133 [label="Assert.IsNull(c.SelectToken(''[1]''))", span="260-260", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateConstructorOutOfBoundsIndxer()", file="JPathExecuteTests.cs"];
m4_132 [label="JConstructor c = new JConstructor(''Blah'')", span="258-258", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateConstructorOutOfBoundsIndxer()", file="JPathExecuteTests.cs"];
m4_134 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateConstructorOutOfBoundsIndxer()", span="256-256", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateConstructorOutOfBoundsIndxer()", file="JPathExecuteTests.cs"];
m4_55 [label="Entry System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", file="JPathExecuteTests.cs"];
m4_78 [label="Entry Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(string, System.Action)", span="175-175", cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(string, System.Action)", file="JPathExecuteTests.cs"];
m4_164 [label="Entry Newtonsoft.Json.Linq.JArray.JArray()", span="64-64", cluster="Newtonsoft.Json.Linq.JArray.JArray()", file="JPathExecuteTests.cs"];
m4_5 [label="Entry Newtonsoft.Json.Linq.JObject.JObject(object)", span="114-114", cluster="Newtonsoft.Json.Linq.JObject.JObject(object)", file="JPathExecuteTests.cs"];
m4_444 [label=o, span="", file="JPathExecuteTests.cs"];
m4_439 [label=a, span="", file="JPathExecuteTests.cs"];
m4_436 [label=o, span="", file="JPathExecuteTests.cs"];
m4_437 [label=o, span="", file="JPathExecuteTests.cs"];
m4_438 [label=o, span="", file="JPathExecuteTests.cs"];
m4_440 [label=a, span="", file="JPathExecuteTests.cs"];
m4_441 [label=a, span="", file="JPathExecuteTests.cs"];
m4_442 [label=c, span="", file="JPathExecuteTests.cs"];
m4_443 [label=o, span="", file="JPathExecuteTests.cs"];
m4_445 [label=a, span="", file="JPathExecuteTests.cs"];
m4_446 [label=a, span="", file="JPathExecuteTests.cs"];
m4_447 [label=a, span="", file="JPathExecuteTests.cs"];
m5_16 [label="Entry Newtonsoft.Json.Linq.JToken.Remove()", span="356-356", cluster="Newtonsoft.Json.Linq.JToken.Remove()", file="JsonArrayContract.cs"];
m5_14 [label="Entry string.ToUpper()", span="0-0", cluster="string.ToUpper()", file="JsonArrayContract.cs"];
m5_18 [label="Entry Newtonsoft.Json.Linq.JToken.AddAfterSelf(object)", span="222-222", cluster="Newtonsoft.Json.Linq.JToken.AddAfterSelf(object)", file="JsonArrayContract.cs"];
m5_19 [label="Entry Newtonsoft.Json.Linq.JArray.Add(Newtonsoft.Json.Linq.JToken)", span="282-282", cluster="Newtonsoft.Json.Linq.JArray.Add(Newtonsoft.Json.Linq.JToken)", file="JsonArrayContract.cs"];
m5_21 [label="Entry System.Console.WriteLine(string)", span="0-0", cluster="System.Console.WriteLine(string)", file="JsonArrayContract.cs"];
m5_17 [label="Entry Newtonsoft.Json.Linq.JProperty.JProperty(string, object)", span="192-192", cluster="Newtonsoft.Json.Linq.JProperty.JProperty(string, object)", file="JsonArrayContract.cs"];
m5_15 [label="Entry Newtonsoft.Json.Linq.JObject.Property(string)", span="205-205", cluster="Newtonsoft.Json.Linq.JObject.Property(string)", file="JsonArrayContract.cs"];
m5_0 [label="Entry Newtonsoft.Json.Tests.Documentation.Examples.Linq.ModifyJson.Example()", span="10-10", cluster="Newtonsoft.Json.Tests.Documentation.Examples.Linq.ModifyJson.Example()", file="JsonArrayContract.cs"];
m5_1 [label="string json = @''{\r\n        ''''channel'''': {\r\n          ''''title'''': ''''Star Wars'''',\r\n          ''''link'''': ''''http://www.starwars.com'''',\r\n          ''''description'''': ''''Star Wars blog.'''',\r\n          ''''obsolete'''': ''''Obsolete value'''',\r\n          ''''item'''': []\r\n        }\r\n      }''", span="13-21", cluster="Newtonsoft.Json.Tests.Documentation.Examples.Linq.ModifyJson.Example()", file="JsonArrayContract.cs"];
m5_2 [label="JObject rss = JObject.Parse(json)", span="23-23", cluster="Newtonsoft.Json.Tests.Documentation.Examples.Linq.ModifyJson.Example()", file="JsonArrayContract.cs"];
m5_3 [label="JObject channel = (JObject)rss[''channel'']", span="25-25", cluster="Newtonsoft.Json.Tests.Documentation.Examples.Linq.ModifyJson.Example()", file="JsonArrayContract.cs"];
m5_11 [label="Console.WriteLine(rss.ToString())", span="38-38", cluster="Newtonsoft.Json.Tests.Documentation.Examples.Linq.ModifyJson.Example()", file="JsonArrayContract.cs"];
m5_4 [label="channel[''title''] = ((string)channel[''title'']).ToUpper()", span="27-27", cluster="Newtonsoft.Json.Tests.Documentation.Examples.Linq.ModifyJson.Example()", file="JsonArrayContract.cs"];
m5_5 [label="channel[''description''] = ((string)channel[''description'']).ToUpper()", span="28-28", cluster="Newtonsoft.Json.Tests.Documentation.Examples.Linq.ModifyJson.Example()", file="JsonArrayContract.cs"];
m5_6 [label="channel.Property(''obsolete'').Remove()", span="30-30", cluster="Newtonsoft.Json.Tests.Documentation.Examples.Linq.ModifyJson.Example()", file="JsonArrayContract.cs"];
m5_7 [label="channel.Property(''description'').AddAfterSelf(new JProperty(''new'', ''New value''))", span="32-32", cluster="Newtonsoft.Json.Tests.Documentation.Examples.Linq.ModifyJson.Example()", file="JsonArrayContract.cs"];
m5_8 [label="JArray item = (JArray) channel[''item'']", span="34-34", cluster="Newtonsoft.Json.Tests.Documentation.Examples.Linq.ModifyJson.Example()", file="JsonArrayContract.cs"];
m5_9 [label="item.Add(''Item 1'')", span="35-35", cluster="Newtonsoft.Json.Tests.Documentation.Examples.Linq.ModifyJson.Example()", file="JsonArrayContract.cs"];
m5_10 [label="item.Add(''Item 2'')", span="36-36", cluster="Newtonsoft.Json.Tests.Documentation.Examples.Linq.ModifyJson.Example()", file="JsonArrayContract.cs"];
m5_12 [label="Exit Newtonsoft.Json.Tests.Documentation.Examples.Linq.ModifyJson.Example()", span="10-10", cluster="Newtonsoft.Json.Tests.Documentation.Examples.Linq.ModifyJson.Example()", file="JsonArrayContract.cs"];
m5_20 [label="Entry Newtonsoft.Json.Linq.JToken.ToString()", span="389-389", cluster="Newtonsoft.Json.Linq.JToken.ToString()", file="JsonArrayContract.cs"];
m5_13 [label="Entry Newtonsoft.Json.Linq.JObject.Parse(string)", span="325-325", cluster="Newtonsoft.Json.Linq.JObject.Parse(string)", file="JsonArrayContract.cs"];
m6_0 [label="Entry Newtonsoft.Json.Tests.Documentation.Examples.Schema.JTokenIsValid.Example()", span="11-11", cluster="Newtonsoft.Json.Tests.Documentation.Examples.Schema.JTokenIsValid.Example()", file="JsonDictionaryContract.cs"];
m6_1 [label="string schemaJson = @''{\r\n        'description': 'A person',\r\n        'type': 'object',\r\n        'properties': {\r\n          'name': {'type':'string'},\r\n          'hobbies': {\r\n            'type': 'array',\r\n            'items': {'type':'string'}\r\n          }\r\n        }\r\n      }''", span="14-24", cluster="Newtonsoft.Json.Tests.Documentation.Examples.Schema.JTokenIsValid.Example()", file="JsonDictionaryContract.cs"];
m6_2 [label="JsonSchema schema = JsonSchema.Parse(schemaJson)", span="26-26", cluster="Newtonsoft.Json.Tests.Documentation.Examples.Schema.JTokenIsValid.Example()", file="JsonDictionaryContract.cs"];
m6_3 [label="JObject person = JObject.Parse(@''{\r\n        'name': 'James',\r\n        'hobbies': ['.NET', 'Blogging', 'Reading', 'Xbox', 'LOLCATS']\r\n      }'')", span="28-31", cluster="Newtonsoft.Json.Tests.Documentation.Examples.Schema.JTokenIsValid.Example()", file="JsonDictionaryContract.cs"];
m6_4 [label="bool valid = person.IsValid(schema)", span="33-33", cluster="Newtonsoft.Json.Tests.Documentation.Examples.Schema.JTokenIsValid.Example()", file="JsonDictionaryContract.cs"];
m6_5 [label="Console.WriteLine(valid)", span="35-35", cluster="Newtonsoft.Json.Tests.Documentation.Examples.Schema.JTokenIsValid.Example()", file="JsonDictionaryContract.cs"];
m6_6 [label="Exit Newtonsoft.Json.Tests.Documentation.Examples.Schema.JTokenIsValid.Example()", span="11-11", cluster="Newtonsoft.Json.Tests.Documentation.Examples.Schema.JTokenIsValid.Example()", file="JsonDictionaryContract.cs"];
m6_9 [label="Entry Newtonsoft.Json.Linq.JToken.IsValid(Newtonsoft.Json.Schema.JsonSchema)", span="44-44", cluster="Newtonsoft.Json.Linq.JToken.IsValid(Newtonsoft.Json.Schema.JsonSchema)", file="JsonDictionaryContract.cs"];
m6_8 [label="Entry Newtonsoft.Json.Linq.JObject.Parse(string)", span="325-325", cluster="Newtonsoft.Json.Linq.JObject.Parse(string)", file="JsonDictionaryContract.cs"];
m6_7 [label="Entry Newtonsoft.Json.Schema.JsonSchema.Parse(string)", span="256-256", cluster="Newtonsoft.Json.Schema.JsonSchema.Parse(string)", file="JsonDictionaryContract.cs"];
m6_10 [label="Entry System.Console.WriteLine(bool)", span="0-0", cluster="System.Console.WriteLine(bool)", file="JsonDictionaryContract.cs"];
m8_12 [label="Entry System.Console.WriteLine(string)", span="0-0", cluster="System.Console.WriteLine(string)", file="JsonTextReader.cs"];
m8_13 [label="Entry System.Console.WriteLine(object)", span="0-0", cluster="System.Console.WriteLine(object)", file="JsonTextReader.cs"];
m8_0 [label="Entry Newtonsoft.Json.Tests.Documentation.Examples.Linq.QueryJsonDynamic.Example()", span="11-11", cluster="Newtonsoft.Json.Tests.Documentation.Examples.Linq.QueryJsonDynamic.Example()", file="JsonTextReader.cs"];
m8_1 [label="string json = @''[\r\n        {\r\n          ''''Title'''': ''''Json.NET is awesome!'''',\r\n          ''''Author'''': {\r\n            ''''Name'''': ''''James Newton-King'''',\r\n            ''''Twitter'''': ''''@JamesNK'''',\r\n            ''''Picture'''': ''''/jamesnk.png''''\r\n          },\r\n          ''''Date'''': ''''2013-01-23T19:30:00'''',\r\n          ''''BodyHtml'''': ''''&lt;h3&gt;Title!&lt;/h3&gt;\r\n&lt;p&gt;Content!&lt;/p&gt;''''\r\n        }\r\n      ]''", span="13-24", cluster="Newtonsoft.Json.Tests.Documentation.Examples.Linq.QueryJsonDynamic.Example()", file="JsonTextReader.cs"];
m8_2 [label="dynamic blogPosts = JArray.Parse(json)", span="26-26", cluster="Newtonsoft.Json.Tests.Documentation.Examples.Linq.QueryJsonDynamic.Example()", file="JsonTextReader.cs"];
m8_3 [label="dynamic blogPost = blogPosts[0]", span="28-28", cluster="Newtonsoft.Json.Tests.Documentation.Examples.Linq.QueryJsonDynamic.Example()", file="JsonTextReader.cs"];
m8_4 [label="string title = blogPost.Title", span="30-30", cluster="Newtonsoft.Json.Tests.Documentation.Examples.Linq.QueryJsonDynamic.Example()", file="JsonTextReader.cs"];
m8_6 [label="string author = blogPost.Author.Name", span="34-34", cluster="Newtonsoft.Json.Tests.Documentation.Examples.Linq.QueryJsonDynamic.Example()", file="JsonTextReader.cs"];
m8_8 [label="DateTime postDate = blogPost.Date", span="38-38", cluster="Newtonsoft.Json.Tests.Documentation.Examples.Linq.QueryJsonDynamic.Example()", file="JsonTextReader.cs"];
m8_5 [label="Console.WriteLine(title)", span="31-31", cluster="Newtonsoft.Json.Tests.Documentation.Examples.Linq.QueryJsonDynamic.Example()", file="JsonTextReader.cs"];
m8_7 [label="Console.WriteLine(author)", span="35-35", cluster="Newtonsoft.Json.Tests.Documentation.Examples.Linq.QueryJsonDynamic.Example()", file="JsonTextReader.cs"];
m8_9 [label="Console.WriteLine(postDate)", span="39-39", cluster="Newtonsoft.Json.Tests.Documentation.Examples.Linq.QueryJsonDynamic.Example()", file="JsonTextReader.cs"];
m8_10 [label="Exit Newtonsoft.Json.Tests.Documentation.Examples.Linq.QueryJsonDynamic.Example()", span="11-11", cluster="Newtonsoft.Json.Tests.Documentation.Examples.Linq.QueryJsonDynamic.Example()", file="JsonTextReader.cs"];
m8_11 [label="Entry Newtonsoft.Json.Linq.JArray.Parse(string)", span="143-143", cluster="Newtonsoft.Json.Linq.JArray.Parse(string)", file="JsonTextReader.cs"];
m10_11 [label="Entry System.Console.WriteLine(string)", span="0-0", cluster="System.Console.WriteLine(string)", file="ReflectionUtils.cs"];
m10_12 [label="Entry Newtonsoft.Json.Linq.JToken.DeepClone()", span="1743-1743", cluster="Newtonsoft.Json.Linq.JToken.DeepClone()", file="ReflectionUtils.cs"];
m10_15 [label="Entry object.ReferenceEquals(object, object)", span="0-0", cluster="object.ReferenceEquals(object, object)", file="ReflectionUtils.cs"];
m10_9 [label="Entry Newtonsoft.Json.Linq.JArray.JArray(params object[])", span="81-81", cluster="Newtonsoft.Json.Linq.JArray.JArray(params object[])", file="ReflectionUtils.cs"];
m10_10 [label="Entry Newtonsoft.Json.Linq.JToken.ToString()", span="389-389", cluster="Newtonsoft.Json.Linq.JToken.ToString()", file="ReflectionUtils.cs"];
m10_8 [label="Entry Newtonsoft.Json.Linq.JObject.JObject()", span="87-87", cluster="Newtonsoft.Json.Linq.JObject.JObject()", file="ReflectionUtils.cs"];
m10_0 [label="Entry Newtonsoft.Json.Tests.Documentation.Examples.Linq.Clone.Example()", span="10-10", cluster="Newtonsoft.Json.Tests.Documentation.Examples.Linq.Clone.Example()", file="ReflectionUtils.cs"];
m10_1 [label="JObject o1 = new JObject\r\n        {\r\n          {''String'', ''A string!''},\r\n          {''Items'', new JArray(1, 2)}\r\n        }", span="12-16", cluster="Newtonsoft.Json.Tests.Documentation.Examples.Linq.Clone.Example()", file="ReflectionUtils.cs"];
m10_2 [label="Console.WriteLine(o1.ToString())", span="18-18", cluster="Newtonsoft.Json.Tests.Documentation.Examples.Linq.Clone.Example()", file="ReflectionUtils.cs"];
m10_3 [label="JObject o2 = (JObject) o1.DeepClone()", span="27-27", cluster="Newtonsoft.Json.Tests.Documentation.Examples.Linq.Clone.Example()", file="ReflectionUtils.cs"];
m10_5 [label="Console.WriteLine(JToken.DeepEquals(o1, o2))", span="38-38", cluster="Newtonsoft.Json.Tests.Documentation.Examples.Linq.Clone.Example()", file="ReflectionUtils.cs"];
m10_6 [label="Console.WriteLine(Object.ReferenceEquals(o1, o2))", span="41-41", cluster="Newtonsoft.Json.Tests.Documentation.Examples.Linq.Clone.Example()", file="ReflectionUtils.cs"];
m10_4 [label="Console.WriteLine(o2.ToString())", span="29-29", cluster="Newtonsoft.Json.Tests.Documentation.Examples.Linq.Clone.Example()", file="ReflectionUtils.cs"];
m10_7 [label="Exit Newtonsoft.Json.Tests.Documentation.Examples.Linq.Clone.Example()", span="10-10", cluster="Newtonsoft.Json.Tests.Documentation.Examples.Linq.Clone.Example()", file="ReflectionUtils.cs"];
m10_13 [label="Entry Newtonsoft.Json.Linq.JToken.DeepEquals(Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken)", span="144-144", cluster="Newtonsoft.Json.Linq.JToken.DeepEquals(Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken)", file="ReflectionUtils.cs"];
m10_14 [label="Entry System.Console.WriteLine(bool)", span="0-0", cluster="System.Console.WriteLine(bool)", file="ReflectionUtils.cs"];
m0_48 -> m0_23  [key=3, color=darkorchid, style=bold, label="Parameter variable Newtonsoft.Json.JsonReader reader"];
m0_48 -> m0_47  [key=3, color=darkorchid, style=bold, label="Parameter variable Newtonsoft.Json.JsonReader reader"];
m0_48 -> m0_80  [key=0, style=solid];
m0_80 -> m0_82  [key=0, style=solid];
m0_80 -> m0_81  [key=0, style=solid];
m0_80 -> m0_83  [key=2, style=dotted];
m0_81 -> m0_82  [key=0, style=solid];
m0_81 -> m0_50  [key=2, style=dotted];
m0_82 -> m0_48  [key=0, style=bold, color=blue];
m0_23 -> m0_26  [key=1, style=dashed, color=green, label="System.Type"];
m0_23 -> m0_24  [key=0, style=solid];
m0_23 -> m0_27  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_23 -> m0_28  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_23 -> m0_29  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_23 -> m0_36  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_23 -> m0_37  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_23 -> m0_38  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_23 -> m0_42  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_23 -> m0_43  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_23 -> m0_44  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_23 -> m0_25  [key=3, color=darkorchid, style=bold, label="method methodReturn object ReadJson"];
m0_26 -> m0_27  [key=0, style=solid, color=green];
m0_26 -> m0_15  [key=2, style=dotted, color=green];
m0_26 -> m0_31  [key=1, style=dashed, color=green, label=cases];
m0_24 -> m0_26  [key=0, style=solid, color=green];
m0_24 -> m0_25  [key=0, style=solid];
m0_27 -> m0_28  [key=0, style=solid];
m0_27 -> m0_47  [key=2, style=dotted];
m0_31 -> m0_32  [key=0, style=solid, color=green];
m0_31 -> m0_34  [key=0, style=solid];
m0_31 -> m0_33  [key=1, style=dashed, color=darkseagreen4, label=c];
m0_32 -> m0_33  [key=0, style=solid, color=green];
m0_32 -> m0_31  [key=0, style=solid, color=green];
m0_32 -> m0_16  [key=2, style=dotted, color=green];
m0_29 -> m0_32  [key=1, style=dashed, color=green, label=caseName];
m0_29 -> m0_30  [key=0, style=solid];
m0_29 -> m0_49  [key=2, style=dotted];
m0_29 -> m0_35  [key=1, style=dashed, color=darkseagreen4, label=caseName];
m0_33 -> m0_39  [key=1, style=dashed, color=green, label=matchingCaseInfo];
m0_33 -> m0_45  [key=1, style=dashed, color=green, label=matchingCaseInfo];
m0_33 -> m0_34  [key=0, style=solid];
m0_39 -> m0_40  [key=0, style=solid, color=green];
m0_39 -> m0_15  [key=2, style=dotted, color=green];
m0_39 -> m0_41  [key=1, style=dashed, color=green, label=fieldProperties];
m0_38 -> m0_39  [key=0, style=solid, color=green];
m0_38 -> m0_48  [key=2, style=dotted];
m0_30 -> m0_39  [key=1, style=dashed, color=green, label=matchingCaseInfo];
m0_30 -> m0_45  [key=1, style=dashed, color=green, label=matchingCaseInfo];
m0_30 -> m0_31  [key=0, style=solid];
m0_30 -> m0_34  [key=1, style=dashed, color=darkseagreen4, label=matchingCaseInfo];
m0_30 -> m0_25  [key=3, color=darkorchid, style=bold, label="Local variable object matchingCaseInfo"];
m0_40 -> m0_45  [key=1, style=dashed, color=green, label=fieldValues];
m0_40 -> m0_41  [key=0, style=solid];
m0_40 -> m0_52  [key=2, style=dotted];
m0_40 -> m0_42  [key=1, style=dashed, color=darkseagreen4, label=fieldValues];
m0_41 -> m0_42  [key=0, style=solid];
m0_41 -> m0_44  [key=0, style=solid];
m0_45 -> m0_46  [key=0, style=solid, color=green];
m0_45 -> m0_55  [key=2, style=dotted, color=green];
m0_45 -> m0_15  [key=2, style=dotted, color=green];
m0_44 -> m0_45  [key=0, style=solid, color=green];
m0_44 -> m0_48  [key=2, style=dotted];
m0_28 -> m0_29  [key=0, style=solid];
m0_28 -> m0_48  [key=2, style=dotted];
m0_36 -> m0_47  [key=2, style=dotted];
m0_36 -> m0_37  [key=0, style=solid];
m0_37 -> m0_38  [key=0, style=solid];
m0_37 -> m0_48  [key=2, style=dotted];
m0_42 -> m0_43  [key=0, style=solid];
m0_42 -> m0_53  [key=2, style=dotted];
m0_42 -> m0_54  [key=2, style=dotted];
m0_43 -> m0_41  [key=0, style=solid];
m0_43 -> m0_48  [key=2, style=dotted];
m0_25 -> m0_46  [key=0, style=solid];
m0_34 -> m0_36  [key=0, style=solid];
m0_34 -> m0_35  [key=0, style=solid];
m0_35 -> m0_46  [key=0, style=solid];
m0_35 -> m0_50  [key=2, style=dotted];
m0_35 -> m0_51  [key=2, style=dotted];
m0_46 -> m0_23  [key=0, style=bold, color=blue];
m0_51 -> m0_51  [key=3, color=darkorchid, style=bold, label="Field variable string CasePropertyName"];
m0_0 -> m0_3  [key=1, style=dashed, color=green, label=object];
m0_0 -> m0_1  [key=0, style=solid];
m0_0 -> m0_2  [key=1, style=dashed, color=darkseagreen4, label=object];
m0_0 -> m0_7  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m0_0 -> m0_8  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m0_0 -> m0_9  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m0_0 -> m0_10  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m0_0 -> m0_11  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m0_0 -> m0_12  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonWriter"];
m0_3 -> m0_4  [key=0, style=solid, color=green];
m0_3 -> m0_15  [key=2, style=dotted, color=green];
m0_3 -> m0_5  [key=1, style=dashed, color=green, label=result];
m0_2 -> m0_3  [key=0, style=solid, color=green];
m0_2 -> m0_14  [key=2, style=dotted];
m0_4 -> m0_5  [key=0, style=solid, color=green];
m0_4 -> m0_16  [key=2, style=dotted, color=green];
m0_4 -> m0_6  [key=1, style=dashed, color=green, label=info];
m0_5 -> m0_6  [key=0, style=solid, color=green];
m0_5 -> m0_16  [key=2, style=dotted, color=green];
m0_5 -> m0_11  [key=1, style=dashed, color=green, label=fields];
m0_6 -> m0_7  [key=0, style=solid, color=green];
m0_6 -> m0_16  [key=2, style=dotted, color=green];
m0_6 -> m0_9  [key=1, style=dashed, color=green, label=caseName];
m0_11 -> m0_12  [key=0, style=solid];
m0_11 -> m0_21  [key=2, style=dotted];
m0_7 -> m0_8  [key=0, style=solid];
m0_7 -> m0_17  [key=2, style=dotted];
m0_9 -> m0_10  [key=0, style=solid];
m0_9 -> m0_20  [key=2, style=dotted];
m0_1 -> m0_2  [key=0, style=solid];
m0_1 -> m0_8  [key=1, style=dashed, color=darkseagreen4, label=resolver];
m0_1 -> m0_10  [key=1, style=dashed, color=darkseagreen4, label=resolver];
m0_8 -> m0_9  [key=0, style=solid];
m0_8 -> m0_18  [key=2, style=dotted];
m0_8 -> m0_19  [key=2, style=dotted];
m0_10 -> m0_11  [key=0, style=solid];
m0_10 -> m0_18  [key=2, style=dotted];
m0_10 -> m0_19  [key=2, style=dotted];
m0_12 -> m0_13  [key=0, style=solid];
m0_12 -> m0_22  [key=2, style=dotted];
m0_13 -> m0_0  [key=0, style=bold, color=blue];
m0_47 -> m0_23  [key=3, color=darkorchid, style=bold, label="Parameter variable Newtonsoft.Json.JsonReader reader"];
m0_47 -> m0_75  [key=0, style=solid];
m0_47 -> m0_76  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m0_47 -> m0_77  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_47 -> m0_51  [key=3, color=darkorchid, style=bold, label="Parameter variable string propertyName"];
m0_75 -> m0_48  [key=2, style=dotted];
m0_75 -> m0_76  [key=0, style=solid];
m0_76 -> m0_49  [key=2, style=dotted];
m0_76 -> m0_78  [key=0, style=solid];
m0_76 -> m0_77  [key=0, style=solid];
m0_76 -> m0_79  [key=2, style=dotted];
m0_77 -> m0_78  [key=0, style=solid];
m0_77 -> m0_50  [key=2, style=dotted];
m0_77 -> m0_51  [key=2, style=dotted];
m0_78 -> m0_47  [key=0, style=bold, color=blue];
m0_56 -> m0_69  [key=1, style=dashed, color=green, label="System.Type"];
m0_56 -> m0_57  [key=0, style=solid];
m0_56 -> m0_60  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m0_56 -> m0_58  [key=3, color=darkorchid, style=bold, label="method methodReturn bool CanConvert"];
m0_69 -> m0_70  [key=0, style=solid, color=green];
m0_69 -> m0_15  [key=2, style=dotted, color=green];
m0_67 -> m0_69  [key=0, style=solid, color=green];
m0_67 -> m0_68  [key=0, style=solid];
m0_65 -> m0_66  [key=0, style=solid, color=green];
m0_65 -> m0_73  [key=2, style=dotted, color=green];
m0_65 -> m0_74  [key=2, style=dotted, color=green];
m0_63 -> m0_65  [key=1, style=dashed, color=green, label=attributeType];
m0_63 -> m0_64  [key=0, style=solid];
m0_63 -> m0_14  [key=2, style=dotted];
m0_64 -> m0_65  [key=0, style=solid, color=green];
m0_64 -> m0_62  [key=0, style=solid];
m0_66 -> m0_67  [key=0, style=solid];
m0_57 -> m0_58  [key=0, style=solid];
m0_57 -> m0_59  [key=0, style=solid];
m0_57 -> m0_71  [key=2, style=dotted];
m0_60 -> m0_61  [key=0, style=solid];
m0_60 -> m0_72  [key=2, style=dotted];
m0_60 -> m0_62  [key=1, style=dashed, color=darkseagreen4, label=attributes];
m0_58 -> m0_70  [key=0, style=solid];
m0_61 -> m0_67  [key=1, style=dashed, color=darkseagreen4, label=isFSharpType];
m0_61 -> m0_58  [key=3, color=darkorchid, style=bold, label="Local variable bool isFSharpType"];
m0_61 -> m0_62  [key=0, style=solid];
m0_62 -> m0_67  [key=0, style=solid];
m0_62 -> m0_63  [key=0, style=solid];
m0_68 -> m0_70  [key=0, style=solid];
m0_59 -> m0_60  [key=0, style=solid];
m0_70 -> m0_56  [key=0, style=bold, color=blue];
m2_14 -> m2_15  [key=0, style=solid, color=green];
m2_15 -> m2_16  [key=0, style=solid, color=green];
m2_15 -> m2_8  [key=2, style=dotted, color=green];
m2_15 -> m2_9  [key=2, style=dotted, color=green];
m2_15 -> m2_19  [key=1, style=dashed, color=green, label=l];
m2_15 -> m2_20  [key=1, style=dashed, color=green, label=l];
m2_16 -> m2_17  [key=0, style=solid, color=green];
m2_16 -> m2_10  [key=2, style=dotted, color=green];
m2_16 -> m2_18  [key=1, style=dashed, color=green, label=json];
m2_19 -> m2_20  [key=0, style=solid, color=green];
m2_19 -> m2_11  [key=2, style=dotted, color=green];
m2_20 -> m2_21  [key=0, style=solid, color=green];
m2_20 -> m2_13  [key=2, style=dotted, color=green];
m2_17 -> m2_18  [key=0, style=solid, color=green];
m2_17 -> m2_11  [key=2, style=dotted, color=green];
m2_18 -> m2_19  [key=0, style=solid, color=green];
m2_18 -> m2_20  [key=1, style=dashed, color=green, label=l2];
m2_18 -> m2_12  [key=2, style=dotted, color=green];
m2_21 -> m2_14  [key=0, style=bold, color=blue];
m2_22 -> m2_23  [key=0, style=solid, color=green];
m2_23 -> m2_24  [key=0, style=solid, color=green];
m2_23 -> m2_8  [key=2, style=dotted, color=green];
m2_23 -> m2_31  [key=2, style=dotted, color=green];
m2_23 -> m2_9  [key=2, style=dotted, color=green];
m2_23 -> m2_26  [key=1, style=dashed, color=green, label=m1];
m2_24 -> m2_25  [key=0, style=solid, color=green];
m2_24 -> m2_10  [key=2, style=dotted, color=green];
m2_26 -> m2_27  [key=0, style=solid, color=green];
m2_26 -> m2_11  [key=2, style=dotted, color=green];
m2_25 -> m2_26  [key=0, style=solid, color=green];
m2_25 -> m2_12  [key=2, style=dotted, color=green];
m2_25 -> m2_27  [key=1, style=dashed, color=green, label=m2];
m2_25 -> m2_28  [key=1, style=dashed, color=green, label=m2];
m2_25 -> m2_29  [key=1, style=dashed, color=green, label=m2];
m2_27 -> m2_28  [key=0, style=solid, color=green];
m2_27 -> m2_11  [key=2, style=dotted, color=green];
m2_28 -> m2_29  [key=0, style=solid, color=green];
m2_28 -> m2_11  [key=2, style=dotted, color=green];
m2_29 -> m2_30  [key=0, style=solid, color=green];
m2_29 -> m2_11  [key=2, style=dotted, color=green];
m2_30 -> m2_22  [key=0, style=bold, color=blue];
m2_0 -> m2_1  [key=0, style=solid, color=green];
m2_1 -> m2_2  [key=0, style=solid, color=green];
m2_1 -> m2_8  [key=2, style=dotted, color=green];
m2_1 -> m2_9  [key=2, style=dotted, color=green];
m2_1 -> m2_5  [key=1, style=dashed, color=green, label=l];
m2_1 -> m2_6  [key=1, style=dashed, color=green, label=l];
m2_2 -> m2_3  [key=0, style=solid, color=green];
m2_2 -> m2_10  [key=2, style=dotted, color=green];
m2_2 -> m2_4  [key=1, style=dashed, color=green, label=json];
m2_5 -> m2_6  [key=0, style=solid, color=green];
m2_5 -> m2_11  [key=2, style=dotted, color=green];
m2_6 -> m2_7  [key=0, style=solid, color=green];
m2_6 -> m2_13  [key=2, style=dotted, color=green];
m2_3 -> m2_4  [key=0, style=solid, color=green];
m2_3 -> m2_11  [key=2, style=dotted, color=green];
m2_4 -> m2_5  [key=0, style=solid, color=green];
m2_4 -> m2_6  [key=1, style=dashed, color=green, label=l2];
m2_4 -> m2_12  [key=2, style=dotted, color=green];
m2_7 -> m2_0  [key=0, style=bold, color=blue];
m3_3 -> m3_4  [key=0, style=solid, color=green];
m3_4 -> m3_5  [key=0, style=solid, color=green];
m3_4 -> m3_0  [key=2, style=dotted, color=green];
m3_5 -> m3_5  [key=1, style=dashed, color=green, label=p];
m3_5 -> m3_6  [key=0, style=solid, color=green];
m3_5 -> m3_8  [key=2, style=dotted, color=green];
m3_5 -> m3_9  [key=2, style=dotted, color=green];
m3_5 -> m3_10  [key=2, style=dotted, color=green];
m3_5 -> m3_11  [key=2, style=dotted, color=green];
m3_5 -> m3_12  [key=2, style=dotted, color=green];
m3_6 -> m3_6  [key=3, color=green, style=bold, label="Field variable string FSharpSetTypeName"];
m3_6 -> m3_7  [key=0, style=solid, color=green];
m3_6 -> m3_13  [key=2, style=dotted, color=green];
m3_6 -> m3_14  [key=2, style=dotted, color=green];
m3_7 -> m3_3  [key=0, style=bold, color=blue];
m3_0 -> m3_1  [key=0, style=solid, color=green];
m3_1 -> m3_2  [key=0, style=solid, color=green];
m3_2 -> m3_0  [key=0, style=bold, color=blue];
m3_15 -> m3_4  [key=1, style=dashed, color=green, label="Newtonsoft.Json.Tests.Documentation.Examples.Linq.CreateJsonDeclaratively"];
m4_281 -> m4_282  [key=0, style=solid];
m4_288 -> m4_8  [key=2, style=dotted];
m4_288 -> m4_289  [key=0, style=solid];
m4_289 -> m4_8  [key=2, style=dotted];
m4_289 -> m4_290  [key=0, style=solid];
m4_290 -> m4_8  [key=2, style=dotted];
m4_290 -> m4_291  [key=0, style=solid];
m4_286 -> m4_288  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_286 -> m4_289  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_286 -> m4_290  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_286 -> m4_287  [key=0, style=solid];
m4_286 -> m4_54  [key=2, style=dotted];
m4_286 -> m4_55  [key=2, style=dotted];
m4_286 -> m4_291  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_286 -> m4_292  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_287 -> m4_288  [key=0, style=solid];
m4_287 -> m4_44  [key=2, style=dotted];
m4_291 -> m4_279  [key=2, style=dotted];
m4_291 -> m4_280  [key=2, style=dotted];
m4_291 -> m4_294  [key=2, style=dotted];
m4_291 -> m4_292  [key=0, style=solid];
m4_291 -> m4_265  [key=2, style=dotted];
m4_285 -> m4_36  [key=2, style=dotted];
m4_285 -> m4_286  [key=0, style=solid];
m4_292 -> m4_279  [key=2, style=dotted];
m4_292 -> m4_280  [key=2, style=dotted];
m4_292 -> m4_294  [key=2, style=dotted];
m4_292 -> m4_293  [key=0, style=solid];
m4_284 -> m4_294  [key=2, style=dotted];
m4_284 -> m4_285  [key=0, style=solid];
m4_284 -> m4_265  [key=2, style=dotted];
m4_282 -> m4_285  [key=1, style=dashed, color=darkseagreen4, label=o1];
m4_282 -> m4_265  [key=2, style=dotted];
m4_282 -> m4_283  [key=0, style=solid];
m4_283 -> m4_285  [key=1, style=dashed, color=darkseagreen4, label=o2];
m4_283 -> m4_284  [key=0, style=solid];
m4_283 -> m4_265  [key=2, style=dotted];
m4_293 -> m4_281  [key=0, style=bold, color=blue];
m4_182 -> m4_183  [key=0, style=solid];
m4_184 -> m4_78  [key=2, style=dotted];
m4_184 -> m4_185  [key=0, style=solid];
m4_184 -> m4_186  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_183 -> m4_184  [key=0, style=solid];
m4_183 -> m4_187  [key=1, style=dashed, color=darkseagreen4, label=a];
m4_183 -> m4_36  [key=2, style=dotted];
m4_185 -> m4_182  [key=0, style=bold, color=blue];
m4_135 -> m4_136  [key=0, style=solid];
m4_136 -> m4_5  [key=2, style=dotted];
m4_136 -> m4_6  [key=2, style=dotted];
m4_136 -> m4_137  [key=0, style=solid];
m4_136 -> m4_140  [key=1, style=dashed, color=darkseagreen4, label=o];
m4_137 -> m4_78  [key=2, style=dotted];
m4_137 -> m4_138  [key=0, style=solid];
m4_137 -> m4_139  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_138 -> m4_135  [key=0, style=bold, color=blue];
m4_342 -> m4_343  [key=0, style=solid];
m4_343 -> m4_5  [key=2, style=dotted];
m4_343 -> m4_6  [key=2, style=dotted];
m4_343 -> m4_344  [key=0, style=solid];
m4_343 -> m4_36  [key=2, style=dotted];
m4_343 -> m4_294  [key=2, style=dotted];
m4_347 -> m4_5  [key=2, style=dotted];
m4_347 -> m4_6  [key=2, style=dotted];
m4_347 -> m4_348  [key=0, style=solid];
m4_347 -> m4_294  [key=2, style=dotted];
m4_347 -> m4_279  [key=2, style=dotted];
m4_347 -> m4_280  [key=2, style=dotted];
m4_346 -> m4_8  [key=2, style=dotted];
m4_346 -> m4_347  [key=0, style=solid];
m4_344 -> m4_347  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_344 -> m4_346  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_344 -> m4_345  [key=0, style=solid];
m4_344 -> m4_54  [key=2, style=dotted];
m4_344 -> m4_55  [key=2, style=dotted];
m4_345 -> m4_346  [key=0, style=solid];
m4_345 -> m4_44  [key=2, style=dotted];
m4_348 -> m4_342  [key=0, style=bold, color=blue];
m4_255 -> m4_256  [key=0, style=solid];
m4_261 -> m4_8  [key=2, style=dotted];
m4_261 -> m4_262  [key=0, style=solid];
m4_262 -> m4_8  [key=2, style=dotted];
m4_262 -> m4_263  [key=0, style=solid];
m4_263 -> m4_8  [key=2, style=dotted];
m4_263 -> m4_264  [key=0, style=solid];
m4_259 -> m4_261  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_259 -> m4_262  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_259 -> m4_263  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_259 -> m4_260  [key=0, style=solid];
m4_259 -> m4_54  [key=2, style=dotted];
m4_259 -> m4_55  [key=2, style=dotted];
m4_260 -> m4_261  [key=0, style=solid];
m4_260 -> m4_44  [key=2, style=dotted];
m4_258 -> m4_36  [key=2, style=dotted];
m4_258 -> m4_259  [key=0, style=solid];
m4_256 -> m4_258  [key=1, style=dashed, color=darkseagreen4, label=o1];
m4_256 -> m4_265  [key=2, style=dotted];
m4_256 -> m4_257  [key=0, style=solid];
m4_257 -> m4_258  [key=0, style=solid];
m4_257 -> m4_265  [key=2, style=dotted];
m4_264 -> m4_255  [key=0, style=bold, color=blue];
m4_177 -> m4_178  [key=0, style=solid];
m4_179 -> m4_7  [key=2, style=dotted];
m4_179 -> m4_180  [key=0, style=solid];
m4_178 -> m4_179  [key=0, style=solid];
m4_178 -> m4_36  [key=2, style=dotted];
m4_180 -> m4_68  [key=2, style=dotted];
m4_180 -> m4_181  [key=0, style=solid];
m4_181 -> m4_177  [key=0, style=bold, color=blue];
m4_83 -> m4_84  [key=0, style=solid];
m4_84 -> m4_5  [key=2, style=dotted];
m4_84 -> m4_6  [key=2, style=dotted];
m4_84 -> m4_85  [key=0, style=solid];
m4_84 -> m4_88  [key=1, style=dashed, color=darkseagreen4, label=o];
m4_85 -> m4_78  [key=2, style=dotted];
m4_85 -> m4_86  [key=0, style=solid];
m4_85 -> m4_87  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_86 -> m4_83  [key=0, style=bold, color=blue];
m4_349 -> m4_350  [key=0, style=solid];
m4_353 -> m4_8  [key=2, style=dotted];
m4_353 -> m4_354  [key=0, style=solid];
m4_354 -> m4_8  [key=2, style=dotted];
m4_354 -> m4_355  [key=0, style=solid];
m4_355 -> m4_8  [key=2, style=dotted];
m4_355 -> m4_356  [key=0, style=solid];
m4_351 -> m4_353  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_351 -> m4_354  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_351 -> m4_355  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_351 -> m4_352  [key=0, style=solid];
m4_351 -> m4_54  [key=2, style=dotted];
m4_351 -> m4_55  [key=2, style=dotted];
m4_352 -> m4_353  [key=0, style=solid];
m4_352 -> m4_44  [key=2, style=dotted];
m4_350 -> m4_36  [key=2, style=dotted];
m4_350 -> m4_351  [key=0, style=solid];
m4_356 -> m4_349  [key=0, style=bold, color=blue];
m4_97 -> m4_98  [key=0, style=solid];
m4_99 -> m4_7  [key=2, style=dotted];
m4_99 -> m4_100  [key=0, style=solid];
m4_98 -> m4_99  [key=0, style=solid];
m4_98 -> m4_36  [key=2, style=dotted];
m4_100 -> m4_101  [key=0, style=solid];
m4_100 -> m4_68  [key=2, style=dotted];
m4_101 -> m4_97  [key=0, style=bold, color=blue];
m4_0 -> m4_1  [key=0, style=solid, color=green];
m4_1 -> m4_2  [key=0, style=solid, color=green];
m4_1 -> m4_5  [key=2, style=dotted, color=green];
m4_1 -> m4_6  [key=2, style=dotted, color=green];
m4_2 -> m4_3  [key=0, style=solid, color=green];
m4_2 -> m4_7  [key=2, style=dotted, color=green];
m4_3 -> m4_4  [key=0, style=solid, color=green];
m4_3 -> m4_8  [key=2, style=dotted, color=green];
m4_4 -> m4_0  [key=0, style=bold, color=blue];
m4_328 -> m4_329  [key=0, style=solid];
m4_329 -> m4_5  [key=2, style=dotted];
m4_329 -> m4_6  [key=2, style=dotted];
m4_329 -> m4_330  [key=0, style=solid];
m4_329 -> m4_36  [key=2, style=dotted];
m4_333 -> m4_5  [key=2, style=dotted];
m4_333 -> m4_6  [key=2, style=dotted];
m4_333 -> m4_334  [key=0, style=solid];
m4_333 -> m4_279  [key=2, style=dotted];
m4_333 -> m4_280  [key=2, style=dotted];
m4_332 -> m4_8  [key=2, style=dotted];
m4_332 -> m4_333  [key=0, style=solid];
m4_330 -> m4_333  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_330 -> m4_332  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_330 -> m4_331  [key=0, style=solid];
m4_330 -> m4_54  [key=2, style=dotted];
m4_330 -> m4_55  [key=2, style=dotted];
m4_331 -> m4_332  [key=0, style=solid];
m4_331 -> m4_44  [key=2, style=dotted];
m4_334 -> m4_328  [key=0, style=bold, color=blue];
m4_109 -> m4_110  [key=0, style=solid];
m4_111 -> m4_78  [key=2, style=dotted];
m4_111 -> m4_112  [key=0, style=solid];
m4_111 -> m4_113  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_110 -> m4_111  [key=0, style=solid];
m4_110 -> m4_114  [key=1, style=dashed, color=darkseagreen4, label=a];
m4_110 -> m4_36  [key=2, style=dotted];
m4_112 -> m4_109  [key=0, style=bold, color=blue];
m4_37 -> m4_38  [key=0, style=solid];
m4_38 -> m4_5  [key=2, style=dotted];
m4_38 -> m4_6  [key=2, style=dotted];
m4_38 -> m4_39  [key=0, style=solid];
m4_39 -> m4_7  [key=2, style=dotted];
m4_39 -> m4_40  [key=0, style=solid];
m4_39 -> m4_41  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_39 -> m4_42  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_41 -> m4_8  [key=2, style=dotted];
m4_41 -> m4_42  [key=0, style=solid];
m4_42 -> m4_8  [key=2, style=dotted];
m4_42 -> m4_43  [key=0, style=solid];
m4_40 -> m4_41  [key=0, style=solid];
m4_40 -> m4_44  [key=2, style=dotted];
m4_43 -> m4_37  [key=0, style=bold, color=blue];
m4_363 -> m4_364  [key=0, style=solid];
m4_364 -> m4_5  [key=2, style=dotted];
m4_364 -> m4_6  [key=2, style=dotted];
m4_364 -> m4_365  [key=0, style=solid];
m4_364 -> m4_36  [key=2, style=dotted];
m4_368 -> m4_5  [key=2, style=dotted];
m4_368 -> m4_6  [key=2, style=dotted];
m4_368 -> m4_369  [key=0, style=solid];
m4_368 -> m4_279  [key=2, style=dotted];
m4_368 -> m4_280  [key=2, style=dotted];
m4_369 -> m4_5  [key=2, style=dotted];
m4_369 -> m4_6  [key=2, style=dotted];
m4_369 -> m4_370  [key=0, style=solid];
m4_369 -> m4_279  [key=2, style=dotted];
m4_369 -> m4_280  [key=2, style=dotted];
m4_367 -> m4_8  [key=2, style=dotted];
m4_367 -> m4_368  [key=0, style=solid];
m4_365 -> m4_368  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_365 -> m4_369  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_365 -> m4_367  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_365 -> m4_366  [key=0, style=solid];
m4_365 -> m4_54  [key=2, style=dotted];
m4_365 -> m4_55  [key=2, style=dotted];
m4_366 -> m4_367  [key=0, style=solid];
m4_366 -> m4_44  [key=2, style=dotted];
m4_370 -> m4_363  [key=0, style=bold, color=blue];
m4_322 -> m4_323  [key=0, style=solid];
m4_324 -> m4_7  [key=2, style=dotted];
m4_324 -> m4_325  [key=0, style=solid];
m4_325 -> m4_8  [key=2, style=dotted];
m4_325 -> m4_326  [key=0, style=solid];
m4_323 -> m4_324  [key=0, style=solid];
m4_323 -> m4_327  [key=2, style=dotted];
m4_326 -> m4_322  [key=0, style=bold, color=blue];
m4_371 -> m4_372  [key=0, style=solid];
m4_372 -> m4_5  [key=2, style=dotted];
m4_372 -> m4_373  [key=0, style=solid];
m4_372 -> m4_36  [key=2, style=dotted];
m4_372 -> m4_379  [key=2, style=dotted];
m4_372 -> m4_380  [key=2, style=dotted];
m4_376 -> m4_5  [key=2, style=dotted];
m4_376 -> m4_6  [key=2, style=dotted];
m4_376 -> m4_377  [key=0, style=solid];
m4_376 -> m4_279  [key=2, style=dotted];
m4_376 -> m4_280  [key=2, style=dotted];
m4_377 -> m4_5  [key=2, style=dotted];
m4_377 -> m4_6  [key=2, style=dotted];
m4_377 -> m4_378  [key=0, style=solid];
m4_377 -> m4_279  [key=2, style=dotted];
m4_377 -> m4_280  [key=2, style=dotted];
m4_375 -> m4_8  [key=2, style=dotted];
m4_375 -> m4_376  [key=0, style=solid];
m4_373 -> m4_376  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_373 -> m4_377  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_373 -> m4_375  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_373 -> m4_374  [key=0, style=solid];
m4_373 -> m4_54  [key=2, style=dotted];
m4_373 -> m4_55  [key=2, style=dotted];
m4_374 -> m4_375  [key=0, style=solid];
m4_374 -> m4_44  [key=2, style=dotted];
m4_378 -> m4_371  [key=0, style=bold, color=blue];
m4_56 -> m4_57  [key=0, style=solid];
m4_57 -> m4_5  [key=2, style=dotted];
m4_57 -> m4_6  [key=2, style=dotted];
m4_57 -> m4_58  [key=0, style=solid];
m4_58 -> m4_7  [key=2, style=dotted];
m4_58 -> m4_59  [key=0, style=solid];
m4_58 -> m4_60  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_58 -> m4_61  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_60 -> m4_8  [key=2, style=dotted];
m4_60 -> m4_61  [key=0, style=solid];
m4_61 -> m4_8  [key=2, style=dotted];
m4_61 -> m4_62  [key=0, style=solid];
m4_59 -> m4_60  [key=0, style=solid];
m4_59 -> m4_44  [key=2, style=dotted];
m4_62 -> m4_56  [key=0, style=bold, color=blue];
m4_234 -> m4_235  [key=0, style=solid];
m4_238 -> m4_8  [key=2, style=dotted];
m4_238 -> m4_239  [key=0, style=solid];
m4_239 -> m4_8  [key=2, style=dotted];
m4_239 -> m4_240  [key=0, style=solid];
m4_240 -> m4_8  [key=2, style=dotted];
m4_240 -> m4_241  [key=0, style=solid];
m4_241 -> m4_8  [key=2, style=dotted];
m4_241 -> m4_242  [key=0, style=solid];
m4_242 -> m4_8  [key=2, style=dotted];
m4_242 -> m4_243  [key=0, style=solid];
m4_236 -> m4_238  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_236 -> m4_239  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_236 -> m4_240  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_236 -> m4_241  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_236 -> m4_242  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_236 -> m4_237  [key=0, style=solid];
m4_236 -> m4_54  [key=2, style=dotted];
m4_236 -> m4_55  [key=2, style=dotted];
m4_237 -> m4_238  [key=0, style=solid];
m4_237 -> m4_44  [key=2, style=dotted];
m4_235 -> m4_36  [key=2, style=dotted];
m4_235 -> m4_236  [key=0, style=solid];
m4_243 -> m4_234  [key=0, style=bold, color=blue];
m4_295 -> m4_296  [key=0, style=solid];
m4_302 -> m4_8  [key=2, style=dotted];
m4_302 -> m4_303  [key=0, style=solid];
m4_305 -> m4_8  [key=2, style=dotted];
m4_305 -> m4_306  [key=0, style=solid];
m4_307 -> m4_8  [key=2, style=dotted];
m4_307 -> m4_308  [key=0, style=solid];
m4_311 -> m4_8  [key=2, style=dotted];
m4_311 -> m4_312  [key=0, style=solid];
m4_300 -> m4_302  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_300 -> m4_305  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_300 -> m4_307  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_300 -> m4_311  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_300 -> m4_301  [key=0, style=solid];
m4_300 -> m4_54  [key=2, style=dotted];
m4_300 -> m4_55  [key=2, style=dotted];
m4_300 -> m4_303  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_300 -> m4_304  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_300 -> m4_306  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_300 -> m4_308  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_300 -> m4_309  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_300 -> m4_310  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_301 -> m4_302  [key=0, style=solid];
m4_301 -> m4_44  [key=2, style=dotted];
m4_303 -> m4_279  [key=2, style=dotted];
m4_303 -> m4_280  [key=2, style=dotted];
m4_303 -> m4_304  [key=0, style=solid];
m4_304 -> m4_305  [key=0, style=solid];
m4_304 -> m4_279  [key=2, style=dotted];
m4_304 -> m4_280  [key=2, style=dotted];
m4_306 -> m4_307  [key=0, style=solid];
m4_306 -> m4_279  [key=2, style=dotted];
m4_306 -> m4_280  [key=2, style=dotted];
m4_308 -> m4_279  [key=2, style=dotted];
m4_308 -> m4_280  [key=2, style=dotted];
m4_308 -> m4_309  [key=0, style=solid];
m4_310 -> m4_311  [key=0, style=solid];
m4_310 -> m4_279  [key=2, style=dotted];
m4_310 -> m4_280  [key=2, style=dotted];
m4_310 -> m4_294  [key=2, style=dotted];
m4_299 -> m4_36  [key=2, style=dotted];
m4_299 -> m4_300  [key=0, style=solid];
m4_299 -> m4_303  [key=1, style=dashed, color=darkseagreen4, label=a];
m4_309 -> m4_279  [key=2, style=dotted];
m4_309 -> m4_280  [key=2, style=dotted];
m4_309 -> m4_294  [key=2, style=dotted];
m4_309 -> m4_310  [key=0, style=solid];
m4_309 -> m4_265  [key=2, style=dotted];
m4_298 -> m4_294  [key=2, style=dotted];
m4_298 -> m4_308  [key=1, style=dashed, color=darkseagreen4, label=o3];
m4_298 -> m4_299  [key=0, style=solid];
m4_298 -> m4_265  [key=2, style=dotted];
m4_296 -> m4_304  [key=1, style=dashed, color=darkseagreen4, label=o1];
m4_296 -> m4_299  [key=1, style=dashed, color=darkseagreen4, label=o1];
m4_296 -> m4_265  [key=2, style=dotted];
m4_296 -> m4_297  [key=0, style=solid];
m4_297 -> m4_306  [key=1, style=dashed, color=darkseagreen4, label=o2];
m4_297 -> m4_299  [key=1, style=dashed, color=darkseagreen4, label=o2];
m4_297 -> m4_298  [key=0, style=solid];
m4_297 -> m4_265  [key=2, style=dotted];
m4_312 -> m4_295  [key=0, style=bold, color=blue];
m4_357 -> m4_358  [key=0, style=solid];
m4_361 -> m4_8  [key=2, style=dotted];
m4_361 -> m4_362  [key=0, style=solid];
m4_359 -> m4_361  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_359 -> m4_360  [key=0, style=solid];
m4_359 -> m4_54  [key=2, style=dotted];
m4_359 -> m4_55  [key=2, style=dotted];
m4_360 -> m4_361  [key=0, style=solid];
m4_360 -> m4_44  [key=2, style=dotted];
m4_358 -> m4_36  [key=2, style=dotted];
m4_358 -> m4_359  [key=0, style=solid];
m4_362 -> m4_357  [key=0, style=bold, color=blue];
m4_102 -> m4_103  [key=0, style=solid];
m4_104 -> m4_78  [key=2, style=dotted];
m4_104 -> m4_105  [key=0, style=solid];
m4_104 -> m4_106  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_103 -> m4_107  [key=1, style=dashed, color=darkseagreen4, label=a];
m4_103 -> m4_104  [key=0, style=solid];
m4_103 -> m4_36  [key=2, style=dotted];
m4_105 -> m4_102  [key=0, style=bold, color=blue];
m4_189 -> m4_190  [key=0, style=solid];
m4_191 -> m4_7  [key=2, style=dotted];
m4_191 -> m4_192  [key=0, style=solid];
m4_191 -> m4_193  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_191 -> m4_194  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_193 -> m4_8  [key=2, style=dotted];
m4_193 -> m4_194  [key=0, style=solid];
m4_194 -> m4_8  [key=2, style=dotted];
m4_194 -> m4_195  [key=0, style=solid];
m4_190 -> m4_191  [key=0, style=solid];
m4_190 -> m4_36  [key=2, style=dotted];
m4_192 -> m4_193  [key=0, style=solid];
m4_192 -> m4_44  [key=2, style=dotted];
m4_195 -> m4_189  [key=0, style=bold, color=blue];
m4_186 -> m4_187  [key=0, style=solid];
m4_147 -> m4_148  [key=0, style=solid, color=green];
m4_147 -> m4_82  [key=2, style=dotted, color=green];
m4_146 -> m4_147  [key=0, style=solid, color=green];
m4_148 -> m4_146  [key=0, style=bold, color=blue];
m4_107 -> m4_7  [key=2, style=dotted];
m4_107 -> m4_108  [key=0, style=solid];
m4_431 -> m4_7  [key=2, style=dotted];
m4_431 -> m4_432  [key=0, style=solid];
m4_434 -> m4_7  [key=2, style=dotted];
m4_434 -> m4_435  [key=0, style=solid];
m4_80 -> m4_82  [key=2, style=dotted];
m4_80 -> m4_81  [key=0, style=solid];
m4_88 -> m4_82  [key=2, style=dotted];
m4_88 -> m4_89  [key=0, style=solid];
m4_95 -> m4_82  [key=2, style=dotted];
m4_95 -> m4_96  [key=0, style=solid];
m4_114 -> m4_82  [key=2, style=dotted];
m4_114 -> m4_115  [key=0, style=solid];
m4_121 -> m4_82  [key=2, style=dotted];
m4_121 -> m4_122  [key=0, style=solid];
m4_129 -> m4_82  [key=2, style=dotted];
m4_129 -> m4_130  [key=0, style=solid];
m4_140 -> m4_82  [key=2, style=dotted];
m4_140 -> m4_141  [key=0, style=solid];
m4_154 -> m4_82  [key=2, style=dotted];
m4_154 -> m4_155  [key=0, style=solid];
m4_166 -> m4_82  [key=2, style=dotted];
m4_166 -> m4_167  [key=0, style=solid];
m4_169 -> m4_82  [key=2, style=dotted];
m4_169 -> m4_170  [key=0, style=solid];
m4_172 -> m4_82  [key=2, style=dotted];
m4_172 -> m4_173  [key=0, style=solid];
m4_175 -> m4_82  [key=2, style=dotted];
m4_175 -> m4_176  [key=0, style=solid];
m4_187 -> m4_82  [key=2, style=dotted];
m4_187 -> m4_188  [key=0, style=solid];
m4_106 -> m4_107  [key=0, style=solid];
m4_108 -> m4_106  [key=0, style=bold, color=blue];
m4_427 -> m4_428  [key=0, style=solid];
m4_430 -> m4_431  [key=0, style=solid];
m4_432 -> m4_430  [key=0, style=bold, color=blue];
m4_433 -> m4_434  [key=0, style=solid];
m4_435 -> m4_433  [key=0, style=bold, color=blue];
m4_79 -> m4_80  [key=0, style=solid];
m4_87 -> m4_88  [key=0, style=solid];
m4_94 -> m4_95  [key=0, style=solid];
m4_113 -> m4_114  [key=0, style=solid];
m4_120 -> m4_121  [key=0, style=solid];
m4_128 -> m4_129  [key=0, style=solid];
m4_139 -> m4_140  [key=0, style=solid];
m4_153 -> m4_154  [key=0, style=solid];
m4_165 -> m4_166  [key=0, style=solid];
m4_168 -> m4_169  [key=0, style=solid];
m4_171 -> m4_172  [key=0, style=solid];
m4_174 -> m4_175  [key=0, style=solid];
m4_81 -> m4_79  [key=0, style=bold, color=blue];
m4_89 -> m4_87  [key=0, style=bold, color=blue];
m4_96 -> m4_94  [key=0, style=bold, color=blue];
m4_115 -> m4_113  [key=0, style=bold, color=blue];
m4_122 -> m4_120  [key=0, style=bold, color=blue];
m4_130 -> m4_128  [key=0, style=bold, color=blue];
m4_141 -> m4_139  [key=0, style=bold, color=blue];
m4_155 -> m4_153  [key=0, style=bold, color=blue];
m4_167 -> m4_165  [key=0, style=bold, color=blue];
m4_170 -> m4_168  [key=0, style=bold, color=blue];
m4_173 -> m4_171  [key=0, style=bold, color=blue];
m4_176 -> m4_174  [key=0, style=bold, color=blue];
m4_188 -> m4_186  [key=0, style=bold, color=blue];
m4_428 -> m4_429  [key=0, style=solid];
m4_429 -> m4_427  [key=0, style=bold, color=blue];
m4_16 -> m4_17  [key=0, style=solid, color=green];
m4_17 -> m4_18  [key=0, style=solid, color=green];
m4_17 -> m4_5  [key=2, style=dotted, color=green];
m4_17 -> m4_6  [key=2, style=dotted, color=green];
m4_18 -> m4_19  [key=0, style=solid, color=green];
m4_18 -> m4_7  [key=2, style=dotted, color=green];
m4_19 -> m4_20  [key=0, style=solid, color=green];
m4_19 -> m4_8  [key=2, style=dotted, color=green];
m4_20 -> m4_16  [key=0, style=bold, color=blue];
m4_313 -> m4_314  [key=0, style=solid];
m4_314 -> m4_5  [key=2, style=dotted];
m4_314 -> m4_6  [key=2, style=dotted];
m4_314 -> m4_315  [key=0, style=solid];
m4_314 -> m4_318  [key=1, style=dashed, color=darkseagreen4, label=o];
m4_315 -> m4_7  [key=2, style=dotted];
m4_315 -> m4_316  [key=0, style=solid];
m4_315 -> m4_317  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_318 -> m4_7  [key=2, style=dotted];
m4_318 -> m4_319  [key=0, style=solid];
m4_318 -> m4_320  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_317 -> m4_8  [key=2, style=dotted];
m4_317 -> m4_318  [key=0, style=solid];
m4_319 -> m4_8  [key=2, style=dotted];
m4_319 -> m4_320  [key=0, style=solid];
m4_320 -> m4_8  [key=2, style=dotted];
m4_320 -> m4_321  [key=0, style=solid];
m4_316 -> m4_317  [key=0, style=solid];
m4_316 -> m4_44  [key=2, style=dotted];
m4_321 -> m4_313  [key=0, style=bold, color=blue];
m4_149 -> m4_150  [key=0, style=solid];
m4_151 -> m4_78  [key=2, style=dotted];
m4_151 -> m4_152  [key=0, style=solid];
m4_151 -> m4_153  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_150 -> m4_151  [key=0, style=solid];
m4_150 -> m4_154  [key=1, style=dashed, color=darkseagreen4, label=a];
m4_150 -> m4_36  [key=2, style=dotted];
m4_152 -> m4_149  [key=0, style=bold, color=blue];
m4_90 -> m4_91  [key=0, style=solid];
m4_91 -> m4_5  [key=2, style=dotted];
m4_91 -> m4_6  [key=2, style=dotted];
m4_91 -> m4_92  [key=0, style=solid];
m4_91 -> m4_95  [key=1, style=dashed, color=darkseagreen4, label=o];
m4_92 -> m4_78  [key=2, style=dotted];
m4_92 -> m4_93  [key=0, style=solid];
m4_92 -> m4_94  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_93 -> m4_90  [key=0, style=bold, color=blue];
m4_21 -> m4_22  [key=0, style=solid];
m4_22 -> m4_5  [key=2, style=dotted];
m4_22 -> m4_6  [key=2, style=dotted];
m4_22 -> m4_23  [key=0, style=solid];
m4_22 -> m4_24  [key=1, style=dashed, color=darkseagreen4, label=o];
m4_23 -> m4_7  [key=2, style=dotted];
m4_23 -> m4_24  [key=0, style=solid];
m4_24 -> m4_8  [key=2, style=dotted];
m4_24 -> m4_25  [key=0, style=solid];
m4_25 -> m4_21  [key=0, style=bold, color=blue];
m4_399 -> m4_400  [key=0, style=solid];
m4_401 -> m4_7  [key=2, style=dotted];
m4_401 -> m4_402  [key=0, style=solid];
m4_402 -> m4_8  [key=2, style=dotted];
m4_402 -> m4_403  [key=0, style=solid];
m4_400 -> m4_401  [key=0, style=solid];
m4_400 -> m4_404  [key=2, style=dotted];
m4_403 -> m4_399  [key=0, style=bold, color=blue];
m4_381 -> m4_382  [key=0, style=solid];
m4_382 -> m4_5  [key=2, style=dotted];
m4_382 -> m4_6  [key=2, style=dotted];
m4_382 -> m4_383  [key=0, style=solid];
m4_382 -> m4_36  [key=2, style=dotted];
m4_386 -> m4_5  [key=2, style=dotted];
m4_386 -> m4_6  [key=2, style=dotted];
m4_386 -> m4_387  [key=0, style=solid];
m4_386 -> m4_279  [key=2, style=dotted];
m4_386 -> m4_280  [key=2, style=dotted];
m4_387 -> m4_5  [key=2, style=dotted];
m4_387 -> m4_6  [key=2, style=dotted];
m4_387 -> m4_388  [key=0, style=solid];
m4_387 -> m4_279  [key=2, style=dotted];
m4_387 -> m4_280  [key=2, style=dotted];
m4_388 -> m4_5  [key=2, style=dotted];
m4_388 -> m4_6  [key=2, style=dotted];
m4_388 -> m4_389  [key=0, style=solid];
m4_388 -> m4_279  [key=2, style=dotted];
m4_388 -> m4_280  [key=2, style=dotted];
m4_389 -> m4_5  [key=2, style=dotted];
m4_389 -> m4_6  [key=2, style=dotted];
m4_389 -> m4_390  [key=0, style=solid];
m4_389 -> m4_279  [key=2, style=dotted];
m4_389 -> m4_280  [key=2, style=dotted];
m4_385 -> m4_8  [key=2, style=dotted];
m4_385 -> m4_386  [key=0, style=solid];
m4_383 -> m4_386  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_383 -> m4_387  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_383 -> m4_388  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_383 -> m4_389  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_383 -> m4_385  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_383 -> m4_384  [key=0, style=solid];
m4_383 -> m4_54  [key=2, style=dotted];
m4_383 -> m4_55  [key=2, style=dotted];
m4_384 -> m4_385  [key=0, style=solid];
m4_384 -> m4_44  [key=2, style=dotted];
m4_390 -> m4_381  [key=0, style=bold, color=blue];
m4_391 -> m4_392  [key=0, style=solid];
m4_392 -> m4_5  [key=2, style=dotted];
m4_392 -> m4_6  [key=2, style=dotted];
m4_392 -> m4_393  [key=0, style=solid];
m4_392 -> m4_36  [key=2, style=dotted];
m4_392 -> m4_53  [key=2, style=dotted];
m4_392 -> m4_294  [key=2, style=dotted];
m4_395 -> m4_8  [key=2, style=dotted];
m4_395 -> m4_396  [key=0, style=solid];
m4_396 -> m4_8  [key=2, style=dotted];
m4_396 -> m4_397  [key=0, style=solid];
m4_397 -> m4_8  [key=2, style=dotted];
m4_397 -> m4_398  [key=0, style=solid];
m4_393 -> m4_395  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_393 -> m4_396  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_393 -> m4_397  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_393 -> m4_394  [key=0, style=solid];
m4_393 -> m4_54  [key=2, style=dotted];
m4_393 -> m4_55  [key=2, style=dotted];
m4_394 -> m4_395  [key=0, style=solid];
m4_394 -> m4_44  [key=2, style=dotted];
m4_398 -> m4_391  [key=0, style=bold, color=blue];
m4_9 -> m4_10  [key=0, style=solid];
m4_13 -> m4_14  [key=0, style=solid, color=green];
m4_13 -> m4_7  [key=2, style=dotted, color=green];
m4_10 -> m4_13  [key=1, style=dashed, color=green, label=o];
m4_10 -> m4_5  [key=2, style=dotted];
m4_10 -> m4_6  [key=2, style=dotted];
m4_10 -> m4_11  [key=0, style=solid];
m4_10 -> m4_12  [key=1, style=dashed, color=darkseagreen4, label=o];
m4_12 -> m4_13  [key=0, style=solid, color=green];
m4_12 -> m4_8  [key=2, style=dotted];
m4_14 -> m4_15  [key=0, style=solid, color=green];
m4_14 -> m4_8  [key=2, style=dotted, color=green];
m4_11 -> m4_7  [key=2, style=dotted];
m4_11 -> m4_12  [key=0, style=solid];
m4_15 -> m4_9  [key=0, style=bold, color=blue];
m4_156 -> m4_157  [key=0, style=solid];
m4_158 -> m4_78  [key=2, style=dotted];
m4_158 -> m4_159  [key=0, style=solid];
m4_158 -> m4_165  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_159 -> m4_78  [key=2, style=dotted];
m4_159 -> m4_160  [key=0, style=solid];
m4_159 -> m4_168  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_160 -> m4_78  [key=2, style=dotted];
m4_160 -> m4_161  [key=0, style=solid];
m4_160 -> m4_171  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_162 -> m4_78  [key=2, style=dotted];
m4_162 -> m4_163  [key=0, style=solid];
m4_162 -> m4_174  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_157 -> m4_158  [key=0, style=solid];
m4_157 -> m4_159  [key=1, style=dashed, color=darkseagreen4, label=a];
m4_157 -> m4_160  [key=1, style=dashed, color=darkseagreen4, label=a];
m4_157 -> m4_166  [key=1, style=dashed, color=darkseagreen4, label=a];
m4_157 -> m4_169  [key=1, style=dashed, color=darkseagreen4, label=a];
m4_157 -> m4_172  [key=1, style=dashed, color=darkseagreen4, label=a];
m4_157 -> m4_36  [key=2, style=dotted];
m4_161 -> m4_162  [key=0, style=solid];
m4_161 -> m4_175  [key=1, style=dashed, color=darkseagreen4, label=a];
m4_161 -> m4_164  [key=2, style=dotted];
m4_163 -> m4_156  [key=0, style=bold, color=blue];
m4_123 -> m4_124  [key=0, style=solid];
m4_125 -> m4_78  [key=2, style=dotted];
m4_125 -> m4_126  [key=0, style=solid];
m4_125 -> m4_128  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_124 -> m4_125  [key=0, style=solid];
m4_124 -> m4_129  [key=1, style=dashed, color=darkseagreen4, label=c];
m4_124 -> m4_127  [key=2, style=dotted];
m4_126 -> m4_123  [key=0, style=bold, color=blue];
m4_31 -> m4_32  [key=0, style=solid];
m4_32 -> m4_5  [key=2, style=dotted];
m4_32 -> m4_6  [key=2, style=dotted];
m4_32 -> m4_33  [key=0, style=solid];
m4_32 -> m4_36  [key=2, style=dotted];
m4_33 -> m4_7  [key=2, style=dotted];
m4_33 -> m4_34  [key=0, style=solid];
m4_34 -> m4_8  [key=2, style=dotted];
m4_34 -> m4_35  [key=0, style=solid];
m4_35 -> m4_31  [key=0, style=bold, color=blue];
m4_142 -> m4_143  [key=0, style=solid, color=green];
m4_143 -> m4_144  [key=0, style=solid, color=green];
m4_143 -> m4_5  [key=2, style=dotted, color=green];
m4_143 -> m4_6  [key=2, style=dotted, color=green];
m4_143 -> m4_147  [key=1, style=dashed, color=green, label=o];
m4_144 -> m4_145  [key=0, style=solid, color=green];
m4_144 -> m4_78  [key=2, style=dotted, color=green];
m4_144 -> m4_146  [key=1, style=dashed, color=green, label="lambda expression"];
m4_145 -> m4_142  [key=0, style=bold, color=blue];
m4_266 -> m4_267  [key=0, style=solid];
m4_272 -> m4_8  [key=2, style=dotted];
m4_272 -> m4_273  [key=0, style=solid];
m4_275 -> m4_8  [key=2, style=dotted];
m4_275 -> m4_276  [key=0, style=solid];
m4_277 -> m4_8  [key=2, style=dotted];
m4_277 -> m4_278  [key=0, style=solid];
m4_270 -> m4_272  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_270 -> m4_275  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_270 -> m4_277  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_270 -> m4_271  [key=0, style=solid];
m4_270 -> m4_54  [key=2, style=dotted];
m4_270 -> m4_55  [key=2, style=dotted];
m4_270 -> m4_273  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_270 -> m4_274  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_270 -> m4_276  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_271 -> m4_272  [key=0, style=solid];
m4_271 -> m4_44  [key=2, style=dotted];
m4_273 -> m4_279  [key=2, style=dotted];
m4_273 -> m4_280  [key=2, style=dotted];
m4_273 -> m4_274  [key=0, style=solid];
m4_274 -> m4_275  [key=0, style=solid];
m4_274 -> m4_279  [key=2, style=dotted];
m4_274 -> m4_280  [key=2, style=dotted];
m4_276 -> m4_277  [key=0, style=solid];
m4_276 -> m4_279  [key=2, style=dotted];
m4_276 -> m4_280  [key=2, style=dotted];
m4_269 -> m4_36  [key=2, style=dotted];
m4_269 -> m4_270  [key=0, style=solid];
m4_269 -> m4_273  [key=1, style=dashed, color=darkseagreen4, label=a];
m4_267 -> m4_274  [key=1, style=dashed, color=darkseagreen4, label=o1];
m4_267 -> m4_269  [key=1, style=dashed, color=darkseagreen4, label=o1];
m4_267 -> m4_268  [key=0, style=solid];
m4_267 -> m4_265  [key=2, style=dotted];
m4_268 -> m4_276  [key=1, style=dashed, color=darkseagreen4, label=o2];
m4_268 -> m4_269  [key=0, style=solid];
m4_268 -> m4_265  [key=2, style=dotted];
m4_278 -> m4_266  [key=0, style=bold, color=blue];
m4_26 -> m4_27  [key=0, style=solid];
m4_27 -> m4_5  [key=2, style=dotted];
m4_27 -> m4_6  [key=2, style=dotted];
m4_27 -> m4_28  [key=0, style=solid];
m4_27 -> m4_29  [key=1, style=dashed, color=darkseagreen4, label=o];
m4_28 -> m4_7  [key=2, style=dotted];
m4_28 -> m4_29  [key=0, style=solid];
m4_29 -> m4_8  [key=2, style=dotted];
m4_29 -> m4_30  [key=0, style=solid];
m4_30 -> m4_26  [key=0, style=bold, color=blue];
m4_63 -> m4_64  [key=0, style=solid];
m4_64 -> m4_5  [key=2, style=dotted];
m4_64 -> m4_6  [key=2, style=dotted];
m4_64 -> m4_65  [key=0, style=solid];
m4_65 -> m4_7  [key=2, style=dotted];
m4_65 -> m4_66  [key=0, style=solid];
m4_66 -> m4_67  [key=0, style=solid];
m4_66 -> m4_68  [key=2, style=dotted];
m4_67 -> m4_63  [key=0, style=bold, color=blue];
m4_405 -> m4_406  [key=0, style=solid];
m4_407 -> m4_7  [key=2, style=dotted];
m4_407 -> m4_408  [key=0, style=solid];
m4_407 -> m4_410  [key=1, style=dashed, color=darkseagreen4, label=name];
m4_408 -> m4_7  [key=2, style=dotted];
m4_408 -> m4_409  [key=0, style=solid];
m4_408 -> m4_411  [key=1, style=dashed, color=darkseagreen4, label=productPrice];
m4_409 -> m4_7  [key=2, style=dotted];
m4_409 -> m4_410  [key=0, style=solid];
m4_409 -> m4_412  [key=1, style=dashed, color=darkseagreen4, label=productName];
m4_413 -> m4_7  [key=2, style=dotted];
m4_413 -> m4_414  [key=0, style=solid];
m4_413 -> m4_424  [key=2, style=dotted];
m4_413 -> m4_425  [key=2, style=dotted];
m4_413 -> m4_427  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_413 -> m4_416  [key=1, style=dashed, color=darkseagreen4, label=storeNames];
m4_413 -> m4_417  [key=1, style=dashed, color=darkseagreen4, label=storeNames];
m4_413 -> m4_418  [key=1, style=dashed, color=darkseagreen4, label=storeNames];
m4_410 -> m4_8  [key=2, style=dotted];
m4_410 -> m4_411  [key=0, style=solid];
m4_411 -> m4_8  [key=2, style=dotted];
m4_411 -> m4_412  [key=0, style=solid];
m4_412 -> m4_8  [key=2, style=dotted];
m4_412 -> m4_413  [key=0, style=solid];
m4_416 -> m4_8  [key=2, style=dotted];
m4_416 -> m4_417  [key=0, style=solid];
m4_417 -> m4_8  [key=2, style=dotted];
m4_417 -> m4_418  [key=0, style=solid];
m4_418 -> m4_8  [key=2, style=dotted];
m4_418 -> m4_419  [key=0, style=solid];
m4_419 -> m4_8  [key=2, style=dotted];
m4_419 -> m4_420  [key=0, style=solid];
m4_420 -> m4_8  [key=2, style=dotted];
m4_420 -> m4_421  [key=0, style=solid];
m4_421 -> m4_8  [key=2, style=dotted];
m4_421 -> m4_422  [key=0, style=solid];
m4_422 -> m4_8  [key=2, style=dotted];
m4_422 -> m4_423  [key=0, style=solid];
m4_406 -> m4_407  [key=0, style=solid];
m4_406 -> m4_408  [key=1, style=dashed, color=darkseagreen4, label=o];
m4_406 -> m4_409  [key=1, style=dashed, color=darkseagreen4, label=o];
m4_406 -> m4_413  [key=1, style=dashed, color=darkseagreen4, label=o];
m4_406 -> m4_327  [key=2, style=dotted];
m4_406 -> m4_414  [key=1, style=dashed, color=darkseagreen4, label=o];
m4_406 -> m4_415  [key=1, style=dashed, color=darkseagreen4, label=o];
m4_414 -> m4_419  [key=1, style=dashed, color=darkseagreen4, label=firstProductNames];
m4_414 -> m4_420  [key=1, style=dashed, color=darkseagreen4, label=firstProductNames];
m4_414 -> m4_421  [key=1, style=dashed, color=darkseagreen4, label=firstProductNames];
m4_414 -> m4_415  [key=0, style=solid];
m4_414 -> m4_424  [key=2, style=dotted];
m4_414 -> m4_425  [key=2, style=dotted];
m4_414 -> m4_430  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_415 -> m4_416  [key=0, style=solid];
m4_415 -> m4_422  [key=1, style=dashed, color=darkseagreen4, label=totalPrice];
m4_415 -> m4_433  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_415 -> m4_426  [key=2, style=dotted];
m4_423 -> m4_405  [key=0, style=bold, color=blue];
m4_244 -> m4_245  [key=0, style=solid];
m4_248 -> m4_8  [key=2, style=dotted];
m4_248 -> m4_249  [key=0, style=solid];
m4_248 -> m4_253  [key=2, style=dotted];
m4_249 -> m4_8  [key=2, style=dotted];
m4_249 -> m4_250  [key=0, style=solid];
m4_249 -> m4_254  [key=2, style=dotted];
m4_250 -> m4_8  [key=2, style=dotted];
m4_250 -> m4_251  [key=0, style=solid];
m4_250 -> m4_254  [key=2, style=dotted];
m4_251 -> m4_8  [key=2, style=dotted];
m4_251 -> m4_252  [key=0, style=solid];
m4_251 -> m4_254  [key=2, style=dotted];
m4_246 -> m4_248  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_246 -> m4_249  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_246 -> m4_250  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_246 -> m4_251  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_246 -> m4_247  [key=0, style=solid];
m4_246 -> m4_54  [key=2, style=dotted];
m4_247 -> m4_248  [key=0, style=solid];
m4_247 -> m4_44  [key=2, style=dotted];
m4_245 -> m4_36  [key=2, style=dotted];
m4_245 -> m4_246  [key=0, style=solid];
m4_252 -> m4_244  [key=0, style=bold, color=blue];
m4_69 -> m4_70  [key=0, style=solid];
m4_70 -> m4_5  [key=2, style=dotted];
m4_70 -> m4_6  [key=2, style=dotted];
m4_70 -> m4_71  [key=0, style=solid];
m4_71 -> m4_7  [key=2, style=dotted];
m4_71 -> m4_72  [key=0, style=solid];
m4_72 -> m4_73  [key=0, style=solid];
m4_72 -> m4_68  [key=2, style=dotted];
m4_73 -> m4_69  [key=0, style=bold, color=blue];
m4_116 -> m4_117  [key=0, style=solid];
m4_118 -> m4_78  [key=2, style=dotted];
m4_118 -> m4_119  [key=0, style=solid];
m4_118 -> m4_120  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_117 -> m4_118  [key=0, style=solid];
m4_117 -> m4_121  [key=1, style=dashed, color=darkseagreen4, label=a];
m4_117 -> m4_36  [key=2, style=dotted];
m4_119 -> m4_116  [key=0, style=bold, color=blue];
m4_335 -> m4_336  [key=0, style=solid];
m4_336 -> m4_5  [key=2, style=dotted];
m4_336 -> m4_6  [key=2, style=dotted];
m4_336 -> m4_337  [key=0, style=solid];
m4_336 -> m4_36  [key=2, style=dotted];
m4_340 -> m4_5  [key=2, style=dotted];
m4_340 -> m4_6  [key=2, style=dotted];
m4_340 -> m4_341  [key=0, style=solid];
m4_340 -> m4_279  [key=2, style=dotted];
m4_340 -> m4_280  [key=2, style=dotted];
m4_339 -> m4_8  [key=2, style=dotted];
m4_339 -> m4_340  [key=0, style=solid];
m4_337 -> m4_340  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_337 -> m4_339  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_337 -> m4_338  [key=0, style=solid];
m4_337 -> m4_54  [key=2, style=dotted];
m4_337 -> m4_55  [key=2, style=dotted];
m4_338 -> m4_339  [key=0, style=solid];
m4_338 -> m4_44  [key=2, style=dotted];
m4_341 -> m4_335  [key=0, style=bold, color=blue];
m4_45 -> m4_46  [key=0, style=solid];
m4_46 -> m4_6  [key=2, style=dotted];
m4_46 -> m4_47  [key=0, style=solid];
m4_46 -> m4_53  [key=2, style=dotted];
m4_49 -> m4_8  [key=2, style=dotted];
m4_49 -> m4_50  [key=0, style=solid];
m4_50 -> m4_8  [key=2, style=dotted];
m4_50 -> m4_51  [key=0, style=solid];
m4_51 -> m4_8  [key=2, style=dotted];
m4_51 -> m4_52  [key=0, style=solid];
m4_47 -> m4_49  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_47 -> m4_50  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_47 -> m4_51  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_47 -> m4_48  [key=0, style=solid];
m4_47 -> m4_54  [key=2, style=dotted];
m4_47 -> m4_55  [key=2, style=dotted];
m4_48 -> m4_49  [key=0, style=solid];
m4_48 -> m4_44  [key=2, style=dotted];
m4_52 -> m4_45  [key=0, style=bold, color=blue];
m4_196 -> m4_197  [key=0, style=solid];
m4_200 -> m4_8  [key=2, style=dotted];
m4_200 -> m4_201  [key=0, style=solid];
m4_201 -> m4_8  [key=2, style=dotted];
m4_201 -> m4_202  [key=0, style=solid];
m4_202 -> m4_8  [key=2, style=dotted];
m4_202 -> m4_203  [key=0, style=solid];
m4_203 -> m4_8  [key=2, style=dotted];
m4_203 -> m4_204  [key=0, style=solid];
m4_205 -> m4_8  [key=2, style=dotted];
m4_205 -> m4_206  [key=0, style=solid];
m4_206 -> m4_8  [key=2, style=dotted];
m4_206 -> m4_207  [key=0, style=solid];
m4_208 -> m4_8  [key=2, style=dotted];
m4_208 -> m4_209  [key=0, style=solid];
m4_209 -> m4_8  [key=2, style=dotted];
m4_209 -> m4_210  [key=0, style=solid];
m4_211 -> m4_8  [key=2, style=dotted];
m4_211 -> m4_212  [key=0, style=solid];
m4_213 -> m4_8  [key=2, style=dotted];
m4_213 -> m4_214  [key=0, style=solid];
m4_214 -> m4_8  [key=2, style=dotted];
m4_214 -> m4_215  [key=0, style=solid];
m4_216 -> m4_8  [key=2, style=dotted];
m4_216 -> m4_217  [key=0, style=solid];
m4_217 -> m4_8  [key=2, style=dotted];
m4_217 -> m4_218  [key=0, style=solid];
m4_218 -> m4_8  [key=2, style=dotted];
m4_218 -> m4_219  [key=0, style=solid];
m4_219 -> m4_8  [key=2, style=dotted];
m4_219 -> m4_220  [key=0, style=solid];
m4_220 -> m4_8  [key=2, style=dotted];
m4_220 -> m4_221  [key=0, style=solid];
m4_221 -> m4_8  [key=2, style=dotted];
m4_221 -> m4_222  [key=0, style=solid];
m4_222 -> m4_8  [key=2, style=dotted];
m4_222 -> m4_223  [key=0, style=solid];
m4_223 -> m4_8  [key=2, style=dotted];
m4_223 -> m4_224  [key=0, style=solid];
m4_224 -> m4_8  [key=2, style=dotted];
m4_224 -> m4_225  [key=0, style=solid];
m4_225 -> m4_8  [key=2, style=dotted];
m4_225 -> m4_226  [key=0, style=solid];
m4_227 -> m4_8  [key=2, style=dotted];
m4_227 -> m4_228  [key=0, style=solid];
m4_228 -> m4_8  [key=2, style=dotted];
m4_228 -> m4_229  [key=0, style=solid];
m4_229 -> m4_8  [key=2, style=dotted];
m4_229 -> m4_230  [key=0, style=solid];
m4_230 -> m4_8  [key=2, style=dotted];
m4_230 -> m4_231  [key=0, style=solid];
m4_231 -> m4_8  [key=2, style=dotted];
m4_231 -> m4_232  [key=0, style=solid];
m4_232 -> m4_8  [key=2, style=dotted];
m4_232 -> m4_233  [key=0, style=solid];
m4_199 -> m4_200  [key=0, style=solid];
m4_199 -> m4_201  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_199 -> m4_202  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_199 -> m4_203  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_199 -> m4_54  [key=2, style=dotted];
m4_199 -> m4_55  [key=2, style=dotted];
m4_204 -> m4_205  [key=0, style=solid];
m4_204 -> m4_206  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_204 -> m4_54  [key=2, style=dotted];
m4_204 -> m4_55  [key=2, style=dotted];
m4_207 -> m4_208  [key=0, style=solid];
m4_207 -> m4_209  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_207 -> m4_54  [key=2, style=dotted];
m4_207 -> m4_55  [key=2, style=dotted];
m4_210 -> m4_211  [key=0, style=solid];
m4_210 -> m4_54  [key=2, style=dotted];
m4_210 -> m4_55  [key=2, style=dotted];
m4_212 -> m4_213  [key=0, style=solid];
m4_212 -> m4_214  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_212 -> m4_54  [key=2, style=dotted];
m4_212 -> m4_55  [key=2, style=dotted];
m4_215 -> m4_216  [key=0, style=solid];
m4_215 -> m4_217  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_215 -> m4_218  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_215 -> m4_219  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_215 -> m4_220  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_215 -> m4_221  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_215 -> m4_222  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_215 -> m4_223  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_215 -> m4_224  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_215 -> m4_225  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_215 -> m4_54  [key=2, style=dotted];
m4_215 -> m4_55  [key=2, style=dotted];
m4_226 -> m4_227  [key=0, style=solid];
m4_226 -> m4_228  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_226 -> m4_229  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_226 -> m4_230  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_226 -> m4_231  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_226 -> m4_232  [key=1, style=dashed, color=darkseagreen4, label=t];
m4_226 -> m4_54  [key=2, style=dotted];
m4_226 -> m4_55  [key=2, style=dotted];
m4_197 -> m4_36  [key=2, style=dotted];
m4_197 -> m4_199  [key=1, style=dashed, color=darkseagreen4, label=a];
m4_197 -> m4_204  [key=1, style=dashed, color=darkseagreen4, label=a];
m4_197 -> m4_207  [key=1, style=dashed, color=darkseagreen4, label=a];
m4_197 -> m4_210  [key=1, style=dashed, color=darkseagreen4, label=a];
m4_197 -> m4_212  [key=1, style=dashed, color=darkseagreen4, label=a];
m4_197 -> m4_215  [key=1, style=dashed, color=darkseagreen4, label=a];
m4_197 -> m4_226  [key=1, style=dashed, color=darkseagreen4, label=a];
m4_197 -> m4_198  [key=0, style=solid];
m4_198 -> m4_199  [key=0, style=solid];
m4_198 -> m4_198  [key=3, color=darkorchid, style=bold, label="Local variable System.Collections.Generic.IList<Newtonsoft.Json.Linq.JToken> t"];
m4_233 -> m4_196  [key=0, style=bold, color=blue];
m4_74 -> m4_75  [key=0, style=solid];
m4_75 -> m4_5  [key=2, style=dotted];
m4_75 -> m4_6  [key=2, style=dotted];
m4_75 -> m4_76  [key=0, style=solid];
m4_75 -> m4_80  [key=1, style=dashed, color=darkseagreen4, label=o];
m4_76 -> m4_78  [key=2, style=dotted];
m4_76 -> m4_77  [key=0, style=solid];
m4_76 -> m4_79  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_77 -> m4_74  [key=0, style=bold, color=blue];
m4_131 -> m4_132  [key=0, style=solid];
m4_133 -> m4_7  [key=2, style=dotted];
m4_133 -> m4_134  [key=0, style=solid];
m4_133 -> m4_68  [key=2, style=dotted];
m4_132 -> m4_133  [key=0, style=solid];
m4_132 -> m4_127  [key=2, style=dotted];
m4_134 -> m4_131  [key=0, style=bold, color=blue];
m4_444 -> m4_147  [key=1, style=dashed, color=green, label=o];
m4_439 -> m4_107  [key=1, style=dashed, color=darkseagreen4, label=a];
m4_436 -> m4_80  [key=1, style=dashed, color=darkseagreen4, label=o];
m4_437 -> m4_88  [key=1, style=dashed, color=darkseagreen4, label=o];
m4_438 -> m4_95  [key=1, style=dashed, color=darkseagreen4, label=o];
m4_440 -> m4_114  [key=1, style=dashed, color=darkseagreen4, label=a];
m4_441 -> m4_121  [key=1, style=dashed, color=darkseagreen4, label=a];
m4_442 -> m4_129  [key=1, style=dashed, color=darkseagreen4, label=c];
m4_443 -> m4_140  [key=1, style=dashed, color=darkseagreen4, label=o];
m4_445 -> m4_154  [key=1, style=dashed, color=darkseagreen4, label=a];
m4_446 -> m4_166  [key=1, style=dashed, color=darkseagreen4, label=a];
m4_446 -> m4_169  [key=1, style=dashed, color=darkseagreen4, label=a];
m4_446 -> m4_172  [key=1, style=dashed, color=darkseagreen4, label=a];
m4_446 -> m4_175  [key=1, style=dashed, color=darkseagreen4, label=a];
m4_447 -> m4_187  [key=1, style=dashed, color=darkseagreen4, label=a];
m5_0 -> m5_1  [key=0, style=solid];
m5_1 -> m5_2  [key=0, style=solid];
m5_2 -> m5_3  [key=0, style=solid];
m5_2 -> m5_13  [key=2, style=dotted];
m5_2 -> m5_11  [key=1, style=dashed, color=darkseagreen4, label=rss];
m5_3 -> m5_4  [key=0, style=solid];
m5_3 -> m5_5  [key=1, style=dashed, color=darkseagreen4, label=channel];
m5_3 -> m5_6  [key=1, style=dashed, color=darkseagreen4, label=channel];
m5_3 -> m5_7  [key=1, style=dashed, color=darkseagreen4, label=channel];
m5_3 -> m5_8  [key=1, style=dashed, color=darkseagreen4, label=channel];
m5_11 -> m5_12  [key=0, style=solid];
m5_11 -> m5_20  [key=2, style=dotted];
m5_11 -> m5_21  [key=2, style=dotted];
m5_4 -> m5_5  [key=0, style=solid];
m5_4 -> m5_14  [key=2, style=dotted];
m5_5 -> m5_6  [key=0, style=solid];
m5_5 -> m5_14  [key=2, style=dotted];
m5_6 -> m5_7  [key=0, style=solid];
m5_6 -> m5_15  [key=2, style=dotted];
m5_6 -> m5_16  [key=2, style=dotted];
m5_7 -> m5_8  [key=0, style=solid];
m5_7 -> m5_15  [key=2, style=dotted];
m5_7 -> m5_17  [key=2, style=dotted];
m5_7 -> m5_18  [key=2, style=dotted];
m5_8 -> m5_9  [key=0, style=solid];
m5_8 -> m5_10  [key=1, style=dashed, color=darkseagreen4, label=item];
m5_9 -> m5_10  [key=0, style=solid];
m5_9 -> m5_19  [key=2, style=dotted];
m5_10 -> m5_11  [key=0, style=solid];
m5_10 -> m5_19  [key=2, style=dotted];
m5_12 -> m5_0  [key=0, style=bold, color=blue];
m6_0 -> m6_1  [key=0, style=solid];
m6_1 -> m6_2  [key=0, style=solid];
m6_1 -> m6_1  [key=3, color=darkorchid, style=bold, label="Local variable string schemaJson"];
m6_2 -> m6_3  [key=0, style=solid];
m6_2 -> m6_7  [key=2, style=dotted];
m6_2 -> m6_4  [key=1, style=dashed, color=darkseagreen4, label=schema];
m6_3 -> m6_4  [key=0, style=solid];
m6_3 -> m6_8  [key=2, style=dotted];
m6_4 -> m6_5  [key=0, style=solid];
m6_4 -> m6_9  [key=2, style=dotted];
m6_5 -> m6_6  [key=0, style=solid];
m6_5 -> m6_10  [key=2, style=dotted];
m6_6 -> m6_0  [key=0, style=bold, color=blue];
m8_0 -> m8_1  [key=0, style=solid];
m8_1 -> m8_2  [key=0, style=solid];
m8_2 -> m8_3  [key=0, style=solid];
m8_2 -> m8_11  [key=2, style=dotted];
m8_3 -> m8_4  [key=0, style=solid];
m8_3 -> m8_6  [key=1, style=dashed, color=darkseagreen4, label=blogPost];
m8_3 -> m8_8  [key=1, style=dashed, color=darkseagreen4, label=blogPost];
m8_4 -> m8_5  [key=0, style=solid];
m8_6 -> m8_7  [key=0, style=solid];
m8_8 -> m8_9  [key=0, style=solid];
m8_5 -> m8_6  [key=0, style=solid];
m8_5 -> m8_12  [key=2, style=dotted];
m8_7 -> m8_8  [key=0, style=solid];
m8_7 -> m8_12  [key=2, style=dotted];
m8_9 -> m8_10  [key=0, style=solid];
m8_9 -> m8_13  [key=2, style=dotted];
m8_10 -> m8_0  [key=0, style=bold, color=blue];
m10_0 -> m10_1  [key=0, style=solid];
m10_1 -> m10_2  [key=0, style=solid];
m10_1 -> m10_8  [key=2, style=dotted];
m10_1 -> m10_9  [key=2, style=dotted];
m10_1 -> m10_3  [key=1, style=dashed, color=darkseagreen4, label=o1];
m10_1 -> m10_5  [key=1, style=dashed, color=darkseagreen4, label=o1];
m10_1 -> m10_6  [key=1, style=dashed, color=darkseagreen4, label=o1];
m10_2 -> m10_3  [key=0, style=solid];
m10_2 -> m10_10  [key=2, style=dotted];
m10_2 -> m10_11  [key=2, style=dotted];
m10_3 -> m10_4  [key=0, style=solid];
m10_3 -> m10_12  [key=2, style=dotted];
m10_3 -> m10_5  [key=1, style=dashed, color=darkseagreen4, label=o2];
m10_3 -> m10_6  [key=1, style=dashed, color=darkseagreen4, label=o2];
m10_5 -> m10_6  [key=0, style=solid];
m10_5 -> m10_13  [key=2, style=dotted];
m10_5 -> m10_14  [key=2, style=dotted];
m10_6 -> m10_7  [key=0, style=solid];
m10_6 -> m10_15  [key=2, style=dotted];
m10_6 -> m10_14  [key=2, style=dotted];
m10_4 -> m10_5  [key=0, style=solid];
m10_4 -> m10_10  [key=2, style=dotted];
m10_4 -> m10_11  [key=2, style=dotted];
m10_7 -> m10_0  [key=0, style=bold, color=blue];
}
