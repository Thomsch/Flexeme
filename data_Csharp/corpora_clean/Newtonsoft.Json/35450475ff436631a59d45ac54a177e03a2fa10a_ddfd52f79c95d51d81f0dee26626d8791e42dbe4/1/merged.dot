digraph  {
d304 [label="length > 10 || (length == 10 && chars[start] - '0' > 2)", span="670-670", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int32TryParse(char[], int, int, out int)", color=green, community=0];
d293 [label="Entry Newtonsoft.Json.Utilities.ConvertUtils.Int32TryParse(char[], int, int, out int)", span="646-646", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int32TryParse(char[], int, int, out int)"];
d301 [label="start++", span="661-661", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int32TryParse(char[], int, int, out int)"];
d302 [label="length--", span="662-662", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int32TryParse(char[], int, int, out int)"];
d303 [label="int end = start + length", span="665-665", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int32TryParse(char[], int, int, out int)"];
d305 [label="int i = start", span="673-673", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int32TryParse(char[], int, int, out int)"];
d312 [label="int i = start", span="684-684", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int32TryParse(char[], int, int, out int)"];
d333 [label="Exit Newtonsoft.Json.Utilities.ConvertUtils.Int32TryParse(char[], int, int, out int)", span="646-646", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int32TryParse(char[], int, int, out int)"];
d294 [label="value = 0", span="648-648", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int32TryParse(char[], int, int, out int)"];
d295 [label="length == 0", span="650-650", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int32TryParse(char[], int, int, out int)"];
d297 [label="bool isNegative = (chars[start] == '-')", span="653-653", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int32TryParse(char[], int, int, out int)"];
d299 [label="length == 1", span="658-658", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int32TryParse(char[], int, int, out int)"];
d307 [label="int c = chars[i] - '0'", span="675-675", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int32TryParse(char[], int, int, out int)"];
d314 [label="int c = chars[i] - '0'", span="686-686", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int32TryParse(char[], int, int, out int)"];
d321 [label="c = chars[i] - '0'", span="702-702", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int32TryParse(char[], int, int, out int)"];
d210 [label="return ConvertResult.NoValidConversion;", span="546-546", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvertInternal(object, System.Globalization.CultureInfo, System.Type, out object)"];
d208 [label="return ConvertResult.NotInstantiableType;", span="542-542", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvertInternal(object, System.Globalization.CultureInfo, System.Type, out object)"];
d19 [label="return PrimitiveTypeCode.Object;", span="218-218", cluster="Newtonsoft.Json.Utilities.ConvertUtils.GetTypeCode(System.Type, out bool)"];
d317 [label="int newValue = (10 * value) - c", span="691-691", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int32TryParse(char[], int, int, out int)"];
d298 [label=isNegative, span="655-655", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int32TryParse(char[], int, int, out int)"];
d306 [label="i < end", span="673-673", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int32TryParse(char[], int, int, out int)"];
d313 [label="i < end", span="684-684", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int32TryParse(char[], int, int, out int)"];
d320 [label="i < end", span="700-700", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int32TryParse(char[], int, int, out int)"];
d310 [label="i++", span="673-673", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int32TryParse(char[], int, int, out int)"];
d319 [label="i++", span="696-696", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int32TryParse(char[], int, int, out int)"];
d327 [label="i++", span="684-684", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int32TryParse(char[], int, int, out int)"];
d331 [label="value = -value", span="722-722", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int32TryParse(char[], int, int, out int)"];
d296 [label="return ParseResult.Invalid;", span="651-651", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int32TryParse(char[], int, int, out int)"];
d300 [label="return ParseResult.Invalid;", span="659-659", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int32TryParse(char[], int, int, out int)"];
d311 [label="return ParseResult.Overflow;", span="681-681", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int32TryParse(char[], int, int, out int)"];
d309 [label="return ParseResult.Invalid;", span="678-678", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int32TryParse(char[], int, int, out int)"];
d316 [label="return ParseResult.Invalid;", span="689-689", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int32TryParse(char[], int, int, out int)"];
d326 [label="value = newValue", span="711-711", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int32TryParse(char[], int, int, out int)"];
d325 [label="return ParseResult.Overflow;", span="708-708", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int32TryParse(char[], int, int, out int)"];
d323 [label="return ParseResult.Invalid;", span="705-705", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int32TryParse(char[], int, int, out int)"];
d332 [label="return ParseResult.Success;", span="725-725", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int32TryParse(char[], int, int, out int)"];
d330 [label="return ParseResult.Overflow;", span="720-720", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int32TryParse(char[], int, int, out int)"];
d318 [label="newValue > value", span="694-694", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int32TryParse(char[], int, int, out int)"];
d329 [label="value == int.MinValue", span="719-719", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int32TryParse(char[], int, int, out int)"];
d328 [label="!isNegative", span="716-716", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int32TryParse(char[], int, int, out int)"];
d308 [label="c < 0 || c > 9", span="677-677", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int32TryParse(char[], int, int, out int)"];
d315 [label="c < 0 || c > 9", span="688-688", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int32TryParse(char[], int, int, out int)"];
d322 [label="c < 0 || c > 9", span="704-704", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int32TryParse(char[], int, int, out int)"];
d127 [label="Entry Newtonsoft.Json.Utilities.ConvertUtils.TryConvertInternal(object, System.Globalization.CultureInfo, System.Type, out object)", span="399-399", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvertInternal(object, System.Globalization.CultureInfo, System.Type, out object)"];
d209 [label="value = null", span="545-545", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvertInternal(object, System.Globalization.CultureInfo, System.Type, out object)"];
d334 [label="Entry Newtonsoft.Json.Utilities.ConvertUtils.Int64TryParse(char[], int, int, out long)", span="728-728", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int64TryParse(char[], int, int, out long)"];
d211 [label="Exit Newtonsoft.Json.Utilities.ConvertUtils.TryConvertInternal(object, System.Globalization.CultureInfo, System.Type, out object)", span="399-399", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvertInternal(object, System.Globalization.CultureInfo, System.Type, out object)"];
d207 [label="value = null", span="541-541", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvertInternal(object, System.Globalization.CultureInfo, System.Type, out object)"];
d4 [label="Entry Newtonsoft.Json.Utilities.ConvertUtils.GetTypeCode(System.Type, out bool)", span="190-190", cluster="Newtonsoft.Json.Utilities.ConvertUtils.GetTypeCode(System.Type, out bool)"];
d18 [label="isEnum = false", span="217-217", cluster="Newtonsoft.Json.Utilities.ConvertUtils.GetTypeCode(System.Type, out bool)"];
d20 [label="Exit Newtonsoft.Json.Utilities.ConvertUtils.GetTypeCode(System.Type, out bool)", span="190-190", cluster="Newtonsoft.Json.Utilities.ConvertUtils.GetTypeCode(System.Type, out bool)"];
d324 [label="i++", span="700-700", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int32TryParse(char[], int, int, out int)"];
d32 [label="Entry Newtonsoft.Json.Utilities.ConvertUtils.IsConvertible(System.Type)", span="229-229", cluster="Newtonsoft.Json.Utilities.ConvertUtils.IsConvertible(System.Type)"];
d36 [label="Entry Newtonsoft.Json.Utilities.ConvertUtils.ParseTimeSpan(string)", span="240-240", cluster="Newtonsoft.Json.Utilities.ConvertUtils.ParseTimeSpan(string)"];
d71 [label="Entry Newtonsoft.Json.Utilities.ConvertUtils.ToBigInteger(object)", span="307-307", cluster="Newtonsoft.Json.Utilities.ConvertUtils.ToBigInteger(object)"];
d99 [label="Entry Newtonsoft.Json.Utilities.ConvertUtils.FromBigInteger(BigInteger, System.Type)", span="333-333", cluster="Newtonsoft.Json.Utilities.ConvertUtils.FromBigInteger(BigInteger, System.Type)"];
d116 [label="TryConvertInternal(initialValue, culture, targetType, out value)", span="367-367", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Convert(object, System.Globalization.CultureInfo, System.Type)"];
d133 [label="TryConvertInternal(initialValue, culture, targetType, out value) == ConvertResult.Success", span="386-386", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvert(object, System.Globalization.CultureInfo, System.Type, out object)"];
d215 [label="Entry Newtonsoft.Json.Utilities.ConvertUtils.IsInteger(object)", span="628-628", cluster="Newtonsoft.Json.Utilities.ConvertUtils.IsInteger(object)"];
d224 [label="Entry Newtonsoft.Json.Utilities.ConvertUtils.GetConverter(System.Type)", span="622-622", cluster="Newtonsoft.Json.Utilities.ConvertUtils.GetConverter(System.Type)"];
d230 [label="Entry Newtonsoft.Json.Utilities.ConvertUtils.EnsureTypeAssignable(object, System.Type, System.Type)", span="579-579", cluster="Newtonsoft.Json.Utilities.ConvertUtils.EnsureTypeAssignable(object, System.Type, System.Type)"];
d231 [label="Entry Newtonsoft.Json.Utilities.ConvertUtils.ToValue(INullable)", span="602-602", cluster="Newtonsoft.Json.Utilities.ConvertUtils.ToValue(INullable)"];
d140 [label="initialValue == null", span="401-401", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvertInternal(object, System.Globalization.CultureInfo, System.Type, out object)"];
d142 [label="ReflectionUtils.IsNullableType(targetType)", span="404-404", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvertInternal(object, System.Globalization.CultureInfo, System.Type, out object)"];
d143 [label="targetType = Nullable.GetUnderlyingType(targetType)", span="405-405", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvertInternal(object, System.Globalization.CultureInfo, System.Type, out object)"];
d144 [label="Type initialType = initialValue.GetType()", span="407-407", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvertInternal(object, System.Globalization.CultureInfo, System.Type, out object)"];
d145 [label="targetType == initialType", span="409-409", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvertInternal(object, System.Globalization.CultureInfo, System.Type, out object)"];
d146 [label="value = initialValue", span="411-411", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvertInternal(object, System.Globalization.CultureInfo, System.Type, out object)"];
d148 [label="ConvertUtils.IsConvertible(initialValue.GetType()) && ConvertUtils.IsConvertible(targetType)", span="416-416", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvertInternal(object, System.Globalization.CultureInfo, System.Type, out object)"];
d149 [label="targetType.IsEnum()", span="418-418", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvertInternal(object, System.Globalization.CultureInfo, System.Type, out object)"];
d150 [label="initialValue is string", span="420-420", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvertInternal(object, System.Globalization.CultureInfo, System.Type, out object)"];
d151 [label="value = Enum.Parse(targetType, initialValue.ToString(), true)", span="422-422", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvertInternal(object, System.Globalization.CultureInfo, System.Type, out object)"];
d153 [label="IsInteger(initialValue)", span="425-425", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvertInternal(object, System.Globalization.CultureInfo, System.Type, out object)"];
d154 [label="value = Enum.ToObject(targetType, initialValue)", span="427-427", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvertInternal(object, System.Globalization.CultureInfo, System.Type, out object)"];
d156 [label="value = System.Convert.ChangeType(initialValue, targetType, culture)", span="432-432", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvertInternal(object, System.Globalization.CultureInfo, System.Type, out object)"];
d158 [label="initialValue is DateTime && targetType == typeof(DateTimeOffset)", span="437-437", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvertInternal(object, System.Globalization.CultureInfo, System.Type, out object)"];
d159 [label="value = new DateTimeOffset((DateTime)initialValue)", span="439-439", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvertInternal(object, System.Globalization.CultureInfo, System.Type, out object)"];
d161 [label="initialValue is byte[] && targetType == typeof(Guid)", span="444-444", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvertInternal(object, System.Globalization.CultureInfo, System.Type, out object)"];
d162 [label="value = new Guid((byte[])initialValue)", span="446-446", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvertInternal(object, System.Globalization.CultureInfo, System.Type, out object)"];
d164 [label="initialValue is Guid && targetType == typeof(byte[])", span="450-450", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvertInternal(object, System.Globalization.CultureInfo, System.Type, out object)"];
d165 [label="value = ((Guid)initialValue).ToByteArray()", span="452-452", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvertInternal(object, System.Globalization.CultureInfo, System.Type, out object)"];
d167 [label="initialValue is string", span="456-456", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvertInternal(object, System.Globalization.CultureInfo, System.Type, out object)"];
d168 [label="targetType == typeof(Guid)", span="458-458", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvertInternal(object, System.Globalization.CultureInfo, System.Type, out object)"];
d169 [label="value = new Guid((string)initialValue)", span="460-460", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvertInternal(object, System.Globalization.CultureInfo, System.Type, out object)"];
d171 [label="targetType == typeof(Uri)", span="463-463", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvertInternal(object, System.Globalization.CultureInfo, System.Type, out object)"];
d172 [label="value = new Uri((string)initialValue, UriKind.RelativeOrAbsolute)", span="465-465", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvertInternal(object, System.Globalization.CultureInfo, System.Type, out object)"];
d174 [label="targetType == typeof(TimeSpan)", span="468-468", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvertInternal(object, System.Globalization.CultureInfo, System.Type, out object)"];
d175 [label="value = ParseTimeSpan((string)initialValue)", span="470-470", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvertInternal(object, System.Globalization.CultureInfo, System.Type, out object)"];
d177 [label="targetType == typeof(byte[])", span="473-473", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvertInternal(object, System.Globalization.CultureInfo, System.Type, out object)"];
d178 [label="value = System.Convert.FromBase64String((string)initialValue)", span="475-475", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvertInternal(object, System.Globalization.CultureInfo, System.Type, out object)"];
d180 [label="typeof(Type).IsAssignableFrom(targetType)", span="478-478", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvertInternal(object, System.Globalization.CultureInfo, System.Type, out object)"];
d181 [label="value = Type.GetType((string)initialValue, true)", span="480-480", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvertInternal(object, System.Globalization.CultureInfo, System.Type, out object)"];
d183 [label="targetType == typeof(BigInteger)", span="486-486", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvertInternal(object, System.Globalization.CultureInfo, System.Type, out object)"];
d184 [label="value = ToBigInteger(initialValue)", span="488-488", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvertInternal(object, System.Globalization.CultureInfo, System.Type, out object)"];
d186 [label="initialValue is BigInteger", span="491-491", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvertInternal(object, System.Globalization.CultureInfo, System.Type, out object)"];
d187 [label="value = FromBigInteger((BigInteger)initialValue, targetType)", span="493-493", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvertInternal(object, System.Globalization.CultureInfo, System.Type, out object)"];
d190 [label="toConverter != null && toConverter.CanConvertTo(targetType)", span="502-502", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvertInternal(object, System.Globalization.CultureInfo, System.Type, out object)"];
d191 [label="value = toConverter.ConvertTo(null, culture, initialValue, targetType)", span="504-504", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvertInternal(object, System.Globalization.CultureInfo, System.Type, out object)"];
d193 [label="TypeConverter fromConverter = GetConverter(targetType)", span="508-508", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvertInternal(object, System.Globalization.CultureInfo, System.Type, out object)"];
d195 [label="value = fromConverter.ConvertFrom(null, culture, initialValue)", span="512-512", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvertInternal(object, System.Globalization.CultureInfo, System.Type, out object)"];
d197 [label="initialValue == DBNull.Value", span="518-518", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvertInternal(object, System.Globalization.CultureInfo, System.Type, out object)"];
d198 [label="ReflectionUtils.IsNullable(targetType)", span="520-520", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvertInternal(object, System.Globalization.CultureInfo, System.Type, out object)"];
d199 [label="value = EnsureTypeAssignable(null, initialType, targetType)", span="522-522", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvertInternal(object, System.Globalization.CultureInfo, System.Type, out object)"];
d203 [label="initialValue is INullable", span="532-532", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvertInternal(object, System.Globalization.CultureInfo, System.Type, out object)"];
d204 [label="value = EnsureTypeAssignable(ToValue((INullable)initialValue), initialType, targetType)", span="534-534", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvertInternal(object, System.Globalization.CultureInfo, System.Type, out object)"];
d206 [label="targetType.IsInterface() || targetType.IsGenericTypeDefinition() || targetType.IsAbstract()", span="539-539", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvertInternal(object, System.Globalization.CultureInfo, System.Type, out object)"];
d114 [label="Entry Newtonsoft.Json.Utilities.ConvertUtils.Convert(object, System.Globalization.CultureInfo, System.Type)", span="364-364", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Convert(object, System.Globalization.CultureInfo, System.Type)"];
d132 [label="Entry Newtonsoft.Json.Utilities.ConvertUtils.TryConvert(object, System.Globalization.CultureInfo, System.Type, out object)", span="382-382", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvert(object, System.Globalization.CultureInfo, System.Type, out object)"];
d115 [label="object value", span="366-366", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Convert(object, System.Globalization.CultureInfo, System.Type)"];
d147 [label="return ConvertResult.Success;", span="412-412", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvertInternal(object, System.Globalization.CultureInfo, System.Type, out object)"];
d346 [label="int i = start", span="753-753", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int64TryParse(char[], int, int, out long)"];
d353 [label="int i = start", span="764-764", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int64TryParse(char[], int, int, out long)"];
d374 [label="Exit Newtonsoft.Json.Utilities.ConvertUtils.Int64TryParse(char[], int, int, out long)", span="728-728", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int64TryParse(char[], int, int, out long)"];
d335 [label="value = 0", span="730-730", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int64TryParse(char[], int, int, out long)"];
d336 [label="length == 0", span="732-732", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int64TryParse(char[], int, int, out long)"];
d338 [label="bool isNegative = (chars[start] == '-')", span="735-735", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int64TryParse(char[], int, int, out long)"];
d340 [label="length == 1", span="740-740", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int64TryParse(char[], int, int, out long)"];
d342 [label="start++", span="743-743", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int64TryParse(char[], int, int, out long)"];
d343 [label="length--", span="744-744", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int64TryParse(char[], int, int, out long)"];
d344 [label="int end = start + length", span="747-747", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int64TryParse(char[], int, int, out long)"];
d345 [label="length > 19", span="750-750", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int64TryParse(char[], int, int, out long)"];
d348 [label="int c = chars[i] - '0'", span="755-755", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int64TryParse(char[], int, int, out long)"];
d355 [label="int c = chars[i] - '0'", span="766-766", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int64TryParse(char[], int, int, out long)"];
d362 [label="c = chars[i] - '0'", span="782-782", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int64TryParse(char[], int, int, out long)"];
d358 [label="long newValue = (10 * value) - c", span="771-771", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int64TryParse(char[], int, int, out long)"];
d141 [label="throw new ArgumentNullException(''initialValue'');", span="402-402", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvertInternal(object, System.Globalization.CultureInfo, System.Type, out object)"];
d152 [label="return ConvertResult.Success;", span="423-423", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvertInternal(object, System.Globalization.CultureInfo, System.Type, out object)"];
d155 [label="return ConvertResult.Success;", span="428-428", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvertInternal(object, System.Globalization.CultureInfo, System.Type, out object)"];
d157 [label="return ConvertResult.Success;", span="433-433", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvertInternal(object, System.Globalization.CultureInfo, System.Type, out object)"];
d160 [label="return ConvertResult.Success;", span="440-440", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvertInternal(object, System.Globalization.CultureInfo, System.Type, out object)"];
d163 [label="return ConvertResult.Success;", span="447-447", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvertInternal(object, System.Globalization.CultureInfo, System.Type, out object)"];
d166 [label="return ConvertResult.Success;", span="453-453", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvertInternal(object, System.Globalization.CultureInfo, System.Type, out object)"];
d170 [label="return ConvertResult.Success;", span="461-461", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvertInternal(object, System.Globalization.CultureInfo, System.Type, out object)"];
d173 [label="return ConvertResult.Success;", span="466-466", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvertInternal(object, System.Globalization.CultureInfo, System.Type, out object)"];
d176 [label="return ConvertResult.Success;", span="471-471", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvertInternal(object, System.Globalization.CultureInfo, System.Type, out object)"];
d179 [label="return ConvertResult.Success;", span="476-476", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvertInternal(object, System.Globalization.CultureInfo, System.Type, out object)"];
d182 [label="return ConvertResult.Success;", span="481-481", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvertInternal(object, System.Globalization.CultureInfo, System.Type, out object)"];
d185 [label="return ConvertResult.Success;", span="489-489", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvertInternal(object, System.Globalization.CultureInfo, System.Type, out object)"];
d188 [label="return ConvertResult.Success;", span="494-494", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvertInternal(object, System.Globalization.CultureInfo, System.Type, out object)"];
d192 [label="return ConvertResult.Success;", span="505-505", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvertInternal(object, System.Globalization.CultureInfo, System.Type, out object)"];
d196 [label="return ConvertResult.Success;", span="513-513", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvertInternal(object, System.Globalization.CultureInfo, System.Type, out object)"];
d200 [label="return ConvertResult.Success;", span="523-523", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvertInternal(object, System.Globalization.CultureInfo, System.Type, out object)"];
d202 [label="return ConvertResult.CannotConvertNull;", span="528-528", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvertInternal(object, System.Globalization.CultureInfo, System.Type, out object)"];
d205 [label="return ConvertResult.Success;", span="535-535", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvertInternal(object, System.Globalization.CultureInfo, System.Type, out object)"];
d0 [label="Entry Newtonsoft.Json.Utilities.ConvertUtils.GetTypeCode(System.Type)", span="184-184", cluster="Newtonsoft.Json.Utilities.ConvertUtils.GetTypeCode(System.Type)"];
d2 [label="return GetTypeCode(t, out isEnum);", span="187-187", cluster="Newtonsoft.Json.Utilities.ConvertUtils.GetTypeCode(System.Type)"];
d5 [label="PrimitiveTypeCode typeCode", span="192-192", cluster="Newtonsoft.Json.Utilities.ConvertUtils.GetTypeCode(System.Type, out bool)"];
d6 [label="TypeCodeMap.TryGetValue(t, out typeCode)", span="193-193", cluster="Newtonsoft.Json.Utilities.ConvertUtils.GetTypeCode(System.Type, out bool)"];
d9 [label="t.IsEnum()", span="199-199", cluster="Newtonsoft.Json.Utilities.ConvertUtils.GetTypeCode(System.Type, out bool)"];
d11 [label="return GetTypeCode(Enum.GetUnderlyingType(t));", span="202-202", cluster="Newtonsoft.Json.Utilities.ConvertUtils.GetTypeCode(System.Type, out bool)"];
d12 [label="ReflectionUtils.IsNullableType(t)", span="206-206", cluster="Newtonsoft.Json.Utilities.ConvertUtils.GetTypeCode(System.Type, out bool)"];
d13 [label="Type nonNullable = Nullable.GetUnderlyingType(t)", span="208-208", cluster="Newtonsoft.Json.Utilities.ConvertUtils.GetTypeCode(System.Type, out bool)"];
d1 [label="bool isEnum", span="186-186", cluster="Newtonsoft.Json.Utilities.ConvertUtils.GetTypeCode(System.Type)"];
d14 [label="nonNullable.IsEnum()", span="209-209", cluster="Newtonsoft.Json.Utilities.ConvertUtils.GetTypeCode(System.Type, out bool)"];
d8 [label="return typeCode;", span="196-196", cluster="Newtonsoft.Json.Utilities.ConvertUtils.GetTypeCode(System.Type, out bool)"];
d17 [label="return GetTypeCode(nullableUnderlyingType);", span="213-213", cluster="Newtonsoft.Json.Utilities.ConvertUtils.GetTypeCode(System.Type, out bool)"];
d34 [label="Exit Newtonsoft.Json.Utilities.ConvertUtils.IsConvertible(System.Type)", span="229-229", cluster="Newtonsoft.Json.Utilities.ConvertUtils.IsConvertible(System.Type)"];
d33 [label="return typeof(IConvertible).IsAssignableFrom(t);", span="232-232", cluster="Newtonsoft.Json.Utilities.ConvertUtils.IsConvertible(System.Type)"];
d38 [label="Exit Newtonsoft.Json.Utilities.ConvertUtils.ParseTimeSpan(string)", span="240-240", cluster="Newtonsoft.Json.Utilities.ConvertUtils.ParseTimeSpan(string)"];
d37 [label="return TimeSpan.Parse(input, CultureInfo.InvariantCulture);", span="243-243", cluster="Newtonsoft.Json.Utilities.ConvertUtils.ParseTimeSpan(string)"];
d93 [label="Exit Newtonsoft.Json.Utilities.ConvertUtils.ToBigInteger(object)", span="307-307", cluster="Newtonsoft.Json.Utilities.ConvertUtils.ToBigInteger(object)"];
d72 [label="value is BigInteger", span="309-309", cluster="Newtonsoft.Json.Utilities.ConvertUtils.ToBigInteger(object)"];
d73 [label="return (BigInteger)value;", span="310-310", cluster="Newtonsoft.Json.Utilities.ConvertUtils.ToBigInteger(object)"];
d74 [label="value is string", span="311-311", cluster="Newtonsoft.Json.Utilities.ConvertUtils.ToBigInteger(object)"];
d75 [label="return BigInteger.Parse((string)value, CultureInfo.InvariantCulture);", span="312-312", cluster="Newtonsoft.Json.Utilities.ConvertUtils.ToBigInteger(object)"];
d76 [label="value is float", span="313-313", cluster="Newtonsoft.Json.Utilities.ConvertUtils.ToBigInteger(object)"];
d77 [label="return new BigInteger((float)value);", span="314-314", cluster="Newtonsoft.Json.Utilities.ConvertUtils.ToBigInteger(object)"];
d78 [label="value is double", span="315-315", cluster="Newtonsoft.Json.Utilities.ConvertUtils.ToBigInteger(object)"];
d79 [label="return new BigInteger((double)value);", span="316-316", cluster="Newtonsoft.Json.Utilities.ConvertUtils.ToBigInteger(object)"];
d80 [label="value is decimal", span="317-317", cluster="Newtonsoft.Json.Utilities.ConvertUtils.ToBigInteger(object)"];
d81 [label="return new BigInteger((decimal)value);", span="318-318", cluster="Newtonsoft.Json.Utilities.ConvertUtils.ToBigInteger(object)"];
d82 [label="value is int", span="319-319", cluster="Newtonsoft.Json.Utilities.ConvertUtils.ToBigInteger(object)"];
d83 [label="return new BigInteger((int)value);", span="320-320", cluster="Newtonsoft.Json.Utilities.ConvertUtils.ToBigInteger(object)"];
d84 [label="value is long", span="321-321", cluster="Newtonsoft.Json.Utilities.ConvertUtils.ToBigInteger(object)"];
d85 [label="return new BigInteger((long)value);", span="322-322", cluster="Newtonsoft.Json.Utilities.ConvertUtils.ToBigInteger(object)"];
d86 [label="value is uint", span="323-323", cluster="Newtonsoft.Json.Utilities.ConvertUtils.ToBigInteger(object)"];
d87 [label="return new BigInteger((uint)value);", span="324-324", cluster="Newtonsoft.Json.Utilities.ConvertUtils.ToBigInteger(object)"];
d88 [label="value is ulong", span="325-325", cluster="Newtonsoft.Json.Utilities.ConvertUtils.ToBigInteger(object)"];
d89 [label="return new BigInteger((ulong)value);", span="326-326", cluster="Newtonsoft.Json.Utilities.ConvertUtils.ToBigInteger(object)"];
d90 [label="value is byte[]", span="327-327", cluster="Newtonsoft.Json.Utilities.ConvertUtils.ToBigInteger(object)"];
d91 [label="return new BigInteger((byte[])value);", span="328-328", cluster="Newtonsoft.Json.Utilities.ConvertUtils.ToBigInteger(object)"];
d92 [label="throw new InvalidCastException(''Cannot convert {0} to BigInteger.''.FormatWith(CultureInfo.InvariantCulture, value.GetType()));", span="330-330", cluster="Newtonsoft.Json.Utilities.ConvertUtils.ToBigInteger(object)"];
d111 [label="Exit Newtonsoft.Json.Utilities.ConvertUtils.FromBigInteger(BigInteger, System.Type)", span="333-333", cluster="Newtonsoft.Json.Utilities.ConvertUtils.FromBigInteger(BigInteger, System.Type)"];
d100 [label="targetType == typeof(decimal)", span="335-335", cluster="Newtonsoft.Json.Utilities.ConvertUtils.FromBigInteger(BigInteger, System.Type)"];
d101 [label="return (decimal)i;", span="336-336", cluster="Newtonsoft.Json.Utilities.ConvertUtils.FromBigInteger(BigInteger, System.Type)"];
d102 [label="targetType == typeof(double)", span="337-337", cluster="Newtonsoft.Json.Utilities.ConvertUtils.FromBigInteger(BigInteger, System.Type)"];
d103 [label="return (double)i;", span="338-338", cluster="Newtonsoft.Json.Utilities.ConvertUtils.FromBigInteger(BigInteger, System.Type)"];
d104 [label="targetType == typeof(float)", span="339-339", cluster="Newtonsoft.Json.Utilities.ConvertUtils.FromBigInteger(BigInteger, System.Type)"];
d105 [label="return (float)i;", span="340-340", cluster="Newtonsoft.Json.Utilities.ConvertUtils.FromBigInteger(BigInteger, System.Type)"];
d106 [label="targetType == typeof(ulong)", span="341-341", cluster="Newtonsoft.Json.Utilities.ConvertUtils.FromBigInteger(BigInteger, System.Type)"];
d107 [label="return (ulong)i;", span="342-342", cluster="Newtonsoft.Json.Utilities.ConvertUtils.FromBigInteger(BigInteger, System.Type)"];
d108 [label="return System.Convert.ChangeType((long)i, targetType, CultureInfo.InvariantCulture);", span="346-346", cluster="Newtonsoft.Json.Utilities.ConvertUtils.FromBigInteger(BigInteger, System.Type)"];
d110 [label="throw new InvalidOperationException(''Can not convert from BigInteger to {0}.''.FormatWith(CultureInfo.InvariantCulture, targetType), ex);", span="350-350", cluster="Newtonsoft.Json.Utilities.ConvertUtils.FromBigInteger(BigInteger, System.Type)"];
d117 [label="ConvertResult.Success", span="369-369", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Convert(object, System.Globalization.CultureInfo, System.Type)"];
d119 [label="ConvertResult.CannotConvertNull", span="371-371", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Convert(object, System.Globalization.CultureInfo, System.Type)"];
d121 [label="ConvertResult.NotInstantiableType", span="373-373", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Convert(object, System.Globalization.CultureInfo, System.Type)"];
d123 [label="ConvertResult.NoValidConversion", span="375-375", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Convert(object, System.Globalization.CultureInfo, System.Type)"];
d125 [label="throw new InvalidOperationException(''Unexpected conversion result.'');", span="378-378", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Convert(object, System.Globalization.CultureInfo, System.Type)"];
d118 [label="return value;", span="370-370", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Convert(object, System.Globalization.CultureInfo, System.Type)"];
d134 [label="return true;", span="387-387", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvert(object, System.Globalization.CultureInfo, System.Type, out object)"];
d135 [label="value = null", span="389-389", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvert(object, System.Globalization.CultureInfo, System.Type, out object)"];
d292 [label="Exit Newtonsoft.Json.Utilities.ConvertUtils.IsInteger(object)", span="628-628", cluster="Newtonsoft.Json.Utilities.ConvertUtils.IsInteger(object)"];
d281 [label="GetTypeCode(value.GetType())", span="630-630", cluster="Newtonsoft.Json.Utilities.ConvertUtils.IsInteger(object)"];
d50 [label="return false;", span="278-278", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TypeConvertKey.Equals(object)"];
d189 [label="TypeConverter toConverter = GetConverter(initialType)", span="500-500", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvertInternal(object, System.Globalization.CultureInfo, System.Type, out object)"];
d279 [label="Exit Newtonsoft.Json.Utilities.ConvertUtils.GetConverter(System.Type)", span="622-622", cluster="Newtonsoft.Json.Utilities.ConvertUtils.GetConverter(System.Type)"];
d278 [label="return JsonTypeReflector.GetTypeConverter(t);", span="624-624", cluster="Newtonsoft.Json.Utilities.ConvertUtils.GetConverter(System.Type)"];
d235 [label="Entry Newtonsoft.Json.Utilities.ConvertUtils.ConvertOrCast(object, System.Globalization.CultureInfo, System.Type)", span="562-562", cluster="Newtonsoft.Json.Utilities.ConvertUtils.ConvertOrCast(object, System.Globalization.CultureInfo, System.Type)"];
d243 [label="return EnsureTypeAssignable(initialValue, ReflectionUtils.GetObjectType(initialValue), targetType);", span="575-575", cluster="Newtonsoft.Json.Utilities.ConvertUtils.ConvertOrCast(object, System.Globalization.CultureInfo, System.Type)"];
d256 [label="Exit Newtonsoft.Json.Utilities.ConvertUtils.EnsureTypeAssignable(object, System.Type, System.Type)", span="579-579", cluster="Newtonsoft.Json.Utilities.ConvertUtils.EnsureTypeAssignable(object, System.Type, System.Type)"];
d246 [label="Type valueType = (value != null) ? value.GetType() : null", span="581-581", cluster="Newtonsoft.Json.Utilities.ConvertUtils.EnsureTypeAssignable(object, System.Type, System.Type)"];
d247 [label="value != null", span="583-583", cluster="Newtonsoft.Json.Utilities.ConvertUtils.EnsureTypeAssignable(object, System.Type, System.Type)"];
d248 [label="targetType.IsAssignableFrom(valueType)", span="585-585", cluster="Newtonsoft.Json.Utilities.ConvertUtils.EnsureTypeAssignable(object, System.Type, System.Type)"];
d249 [label="return value;", span="586-586", cluster="Newtonsoft.Json.Utilities.ConvertUtils.EnsureTypeAssignable(object, System.Type, System.Type)"];
d250 [label="Func<object, object> castConverter = CastConverters.Get(new TypeConvertKey(valueType, targetType))", span="588-588", cluster="Newtonsoft.Json.Utilities.ConvertUtils.EnsureTypeAssignable(object, System.Type, System.Type)"];
d252 [label="return castConverter(value);", span="590-590", cluster="Newtonsoft.Json.Utilities.ConvertUtils.EnsureTypeAssignable(object, System.Type, System.Type)"];
d253 [label="ReflectionUtils.IsNullable(targetType)", span="594-594", cluster="Newtonsoft.Json.Utilities.ConvertUtils.EnsureTypeAssignable(object, System.Type, System.Type)"];
d255 [label="throw new ArgumentException(''Could not cast or convert from {0} to {1}.''.FormatWith(CultureInfo.InvariantCulture, (initialType != null) ? initialType.ToString() : ''{null}'', targetType));", span="598-598", cluster="Newtonsoft.Json.Utilities.ConvertUtils.EnsureTypeAssignable(object, System.Type, System.Type)"];
d61 [label="return null;", span="299-299", cluster="Newtonsoft.Json.Utilities.ConvertUtils.CreateCastConverter(Newtonsoft.Json.Utilities.ConvertUtils.TypeConvertKey)"];
d274 [label="Exit Newtonsoft.Json.Utilities.ConvertUtils.ToValue(INullable)", span="602-602", cluster="Newtonsoft.Json.Utilities.ConvertUtils.ToValue(INullable)"];
d261 [label="nullableValue == null", span="604-604", cluster="Newtonsoft.Json.Utilities.ConvertUtils.ToValue(INullable)"];
d263 [label="nullableValue is SqlInt32", span="606-606", cluster="Newtonsoft.Json.Utilities.ConvertUtils.ToValue(INullable)"];
d264 [label="return ToValue((SqlInt32)nullableValue);", span="607-607", cluster="Newtonsoft.Json.Utilities.ConvertUtils.ToValue(INullable)"];
d265 [label="nullableValue is SqlInt64", span="608-608", cluster="Newtonsoft.Json.Utilities.ConvertUtils.ToValue(INullable)"];
d266 [label="return ToValue((SqlInt64)nullableValue);", span="609-609", cluster="Newtonsoft.Json.Utilities.ConvertUtils.ToValue(INullable)"];
d267 [label="nullableValue is SqlBoolean", span="610-610", cluster="Newtonsoft.Json.Utilities.ConvertUtils.ToValue(INullable)"];
d268 [label="return ToValue((SqlBoolean)nullableValue);", span="611-611", cluster="Newtonsoft.Json.Utilities.ConvertUtils.ToValue(INullable)"];
d269 [label="nullableValue is SqlString", span="612-612", cluster="Newtonsoft.Json.Utilities.ConvertUtils.ToValue(INullable)"];
d270 [label="return ToValue((SqlString)nullableValue);", span="613-613", cluster="Newtonsoft.Json.Utilities.ConvertUtils.ToValue(INullable)"];
d271 [label="nullableValue is SqlDateTime", span="614-614", cluster="Newtonsoft.Json.Utilities.ConvertUtils.ToValue(INullable)"];
d272 [label="return ToValue((SqlDateTime)nullableValue);", span="615-615", cluster="Newtonsoft.Json.Utilities.ConvertUtils.ToValue(INullable)"];
d273 [label="throw new ArgumentException(''Unsupported INullable type: {0}''.FormatWith(CultureInfo.InvariantCulture, nullableValue.GetType()));", span="617-617", cluster="Newtonsoft.Json.Utilities.ConvertUtils.ToValue(INullable)"];
d24 [label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.IsNullableType(System.Type)", span="247-247", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.IsNullableType(System.Type)"];
d25 [label="Entry System.Nullable.GetUnderlyingType(System.Type)", span="0-0", cluster="System.Nullable.GetUnderlyingType(System.Type)"];
d97 [label="Entry object.GetType()", span="0-0", cluster="object.GetType()"];
d194 [label="fromConverter != null && fromConverter.CanConvertFrom(initialType)", span="510-510", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvertInternal(object, System.Globalization.CultureInfo, System.Type, out object)"];
d22 [label="Entry System.Type.IsEnum()", span="173-173", cluster="System.Type.IsEnum()"];
d213 [label="Entry object.ToString()", span="0-0", cluster="object.ToString()"];
d214 [label="Entry System.Enum.Parse(System.Type, string, bool)", span="0-0", cluster="System.Enum.Parse(System.Type, string, bool)"];
d216 [label="Entry System.Enum.ToObject(System.Type, object)", span="0-0", cluster="System.Enum.ToObject(System.Type, object)"];
d112 [label="Entry System.Convert.ChangeType(object, System.Type, System.IFormatProvider)", span="0-0", cluster="System.Convert.ChangeType(object, System.Type, System.IFormatProvider)"];
d217 [label="Entry System.DateTimeOffset.DateTimeOffset(System.DateTime)", span="0-0", cluster="System.DateTimeOffset.DateTimeOffset(System.DateTime)"];
d218 [label="Entry System.Guid.Guid(byte[])", span="0-0", cluster="System.Guid.Guid(byte[])"];
d219 [label="Entry System.Guid.ToByteArray()", span="0-0", cluster="System.Guid.ToByteArray()"];
d220 [label="Entry System.Guid.Guid(string)", span="0-0", cluster="System.Guid.Guid(string)"];
d221 [label="Entry System.Uri.Uri(string, System.UriKind)", span="0-0", cluster="System.Uri.Uri(string, System.UriKind)"];
d222 [label="Entry System.Convert.FromBase64String(string)", span="0-0", cluster="System.Convert.FromBase64String(string)"];
d35 [label="Entry System.Type.IsAssignableFrom(System.Type)", span="0-0", cluster="System.Type.IsAssignableFrom(System.Type)"];
d223 [label="Entry System.Type.GetType(string, bool)", span="0-0", cluster="System.Type.GetType(string, bool)"];
d225 [label="Entry System.ComponentModel.TypeConverter.CanConvertTo(System.Type)", span="0-0", cluster="System.ComponentModel.TypeConverter.CanConvertTo(System.Type)"];
d226 [label="Entry System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, object, System.Type)", span="0-0", cluster="System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, object, System.Type)"];
d228 [label="Entry System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, object)", span="0-0", cluster="System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, object)"];
d201 [label="value = null", span="527-527", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvertInternal(object, System.Globalization.CultureInfo, System.Type, out object)"];
d229 [label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.IsNullable(System.Type)", span="237-237", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.IsNullable(System.Type)"];
d232 [label="Entry System.Type.IsInterface()", span="128-128", cluster="System.Type.IsInterface()"];
d233 [label="Entry System.Type.IsGenericTypeDefinition()", span="146-146", cluster="System.Type.IsGenericTypeDefinition()"];
d234 [label="Entry System.Type.IsAbstract()", span="492-492", cluster="System.Type.IsAbstract()"];
d126 [label="Exit Newtonsoft.Json.Utilities.ConvertUtils.Convert(object, System.Globalization.CultureInfo, System.Type)", span="364-364", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Convert(object, System.Globalization.CultureInfo, System.Type)"];
d120 [label="throw new Exception(''Can not convert null {0} into non-nullable {1}.''.FormatWith(CultureInfo.InvariantCulture, initialValue.GetType(), targetType));", span="372-372", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Convert(object, System.Globalization.CultureInfo, System.Type)"];
d122 [label="throw new ArgumentException(''Target type {0} is not a value type or a non-abstract class.''.FormatWith(CultureInfo.InvariantCulture, targetType), ''targetType'');", span="374-374", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Convert(object, System.Globalization.CultureInfo, System.Type)"];
d124 [label="throw new InvalidOperationException(''Can not convert from {0} to {1}.''.FormatWith(CultureInfo.InvariantCulture, initialValue.GetType(), targetType));", span="376-376", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Convert(object, System.Globalization.CultureInfo, System.Type)"];
d139 [label="Exit Newtonsoft.Json.Utilities.ConvertUtils.TryConvert(object, System.Globalization.CultureInfo, System.Type, out object)", span="382-382", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvert(object, System.Globalization.CultureInfo, System.Type, out object)"];
d241 [label="TryConvert(initialValue, culture, targetType, out convertedValue)", span="572-572", cluster="Newtonsoft.Json.Utilities.ConvertUtils.ConvertOrCast(object, System.Globalization.CultureInfo, System.Type)"];
d236 [label="object convertedValue", span="564-564", cluster="Newtonsoft.Json.Utilities.ConvertUtils.ConvertOrCast(object, System.Globalization.CultureInfo, System.Type)"];
d347 [label="i < end", span="753-753", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int64TryParse(char[], int, int, out long)"];
d351 [label="i++", span="753-753", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int64TryParse(char[], int, int, out long)"];
d354 [label="i < end", span="764-764", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int64TryParse(char[], int, int, out long)"];
d360 [label="i++", span="776-776", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int64TryParse(char[], int, int, out long)"];
d368 [label="i++", span="764-764", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int64TryParse(char[], int, int, out long)"];
d372 [label="value = -value", span="802-802", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int64TryParse(char[], int, int, out long)"];
d337 [label="return ParseResult.Invalid;", span="733-733", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int64TryParse(char[], int, int, out long)"];
d341 [label="return ParseResult.Invalid;", span="741-741", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int64TryParse(char[], int, int, out long)"];
d352 [label="return ParseResult.Overflow;", span="761-761", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int64TryParse(char[], int, int, out long)"];
d350 [label="return ParseResult.Invalid;", span="758-758", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int64TryParse(char[], int, int, out long)"];
d357 [label="return ParseResult.Invalid;", span="769-769", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int64TryParse(char[], int, int, out long)"];
d367 [label="value = newValue", span="791-791", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int64TryParse(char[], int, int, out long)"];
d366 [label="return ParseResult.Overflow;", span="788-788", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int64TryParse(char[], int, int, out long)"];
d364 [label="return ParseResult.Invalid;", span="785-785", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int64TryParse(char[], int, int, out long)"];
d373 [label="return ParseResult.Success;", span="805-805", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int64TryParse(char[], int, int, out long)"];
d371 [label="return ParseResult.Overflow;", span="800-800", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int64TryParse(char[], int, int, out long)"];
d359 [label="newValue > value", span="774-774", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int64TryParse(char[], int, int, out long)"];
d370 [label="value == long.MinValue", span="799-799", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int64TryParse(char[], int, int, out long)"];
d339 [label=isNegative, span="737-737", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int64TryParse(char[], int, int, out long)"];
d369 [label="!isNegative", span="796-796", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int64TryParse(char[], int, int, out long)"];
d361 [label="i < end", span="780-780", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int64TryParse(char[], int, int, out long)"];
d349 [label="c < 0 || c > 9", span="757-757", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int64TryParse(char[], int, int, out long)"];
d356 [label="c < 0 || c > 9", span="768-768", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int64TryParse(char[], int, int, out long)"];
d363 [label="c < 0 || c > 9", span="784-784", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int64TryParse(char[], int, int, out long)"];
d212 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)"];
d3 [label="Exit Newtonsoft.Json.Utilities.ConvertUtils.GetTypeCode(System.Type)", span="184-184", cluster="Newtonsoft.Json.Utilities.ConvertUtils.GetTypeCode(System.Type)"];
d15 [label="Type nullableUnderlyingType = typeof(Nullable<>).MakeGenericType(Enum.GetUnderlyingType(nonNullable))", span="211-211", cluster="Newtonsoft.Json.Utilities.ConvertUtils.GetTypeCode(System.Type, out bool)"];
d7 [label="isEnum = false", span="195-195", cluster="Newtonsoft.Json.Utilities.ConvertUtils.GetTypeCode(System.Type, out bool)"];
d21 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.TryGetValue(TKey, out TValue)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.TryGetValue(TKey, out TValue)"];
d10 [label="isEnum = true", span="201-201", cluster="Newtonsoft.Json.Utilities.ConvertUtils.GetTypeCode(System.Type, out bool)"];
d23 [label="Entry System.Enum.GetUnderlyingType(System.Type)", span="0-0", cluster="System.Enum.GetUnderlyingType(System.Type)"];
d16 [label="isEnum = true", span="212-212", cluster="Newtonsoft.Json.Utilities.ConvertUtils.GetTypeCode(System.Type, out bool)"];
d39 [label="Entry System.TimeSpan.Parse(string, System.IFormatProvider)", span="0-0", cluster="System.TimeSpan.Parse(string, System.IFormatProvider)"];
d94 [label="Entry Unk.Parse", span="", cluster="Unk.Parse"];
d95 [label="Entry BigInteger.cstr", span="", cluster="BigInteger.cstr"];
d96 [label="Entry System.InvalidCastException.InvalidCastException(string)", span="0-0", cluster="System.InvalidCastException.InvalidCastException(string)"];
d98 [label="Entry string.FormatWith(System.IFormatProvider, object)", span="47-47", cluster="string.FormatWith(System.IFormatProvider, object)"];
d109 [label=Exception, span="348-348", cluster="Newtonsoft.Json.Utilities.ConvertUtils.FromBigInteger(BigInteger, System.Type)"];
d113 [label="Entry System.InvalidOperationException.InvalidOperationException(string, System.Exception)", span="0-0", cluster="System.InvalidOperationException.InvalidOperationException(string, System.Exception)"];
d131 [label="Entry System.InvalidOperationException.InvalidOperationException(string)", span="0-0", cluster="System.InvalidOperationException.InvalidOperationException(string)"];
d136 [label="return false;", span="390-390", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvert(object, System.Globalization.CultureInfo, System.Type, out object)"];
d291 [label="return false;", span="642-642", cluster="Newtonsoft.Json.Utilities.ConvertUtils.IsInteger(object)"];
d290 [label="return true;", span="640-640", cluster="Newtonsoft.Json.Utilities.ConvertUtils.IsInteger(object)"];
d282 [label="PrimitiveTypeCode.SByte", span="632-632", cluster="Newtonsoft.Json.Utilities.ConvertUtils.IsInteger(object)"];
d48 [label="Entry Newtonsoft.Json.Utilities.ConvertUtils.TypeConvertKey.Equals(object)", span="275-275", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TypeConvertKey.Equals(object)"];
d49 [label="!(obj is TypeConvertKey)", span="277-277", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TypeConvertKey.Equals(object)"];
d52 [label="Exit Newtonsoft.Json.Utilities.ConvertUtils.TypeConvertKey.Equals(object)", span="275-275", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TypeConvertKey.Equals(object)"];
d280 [label="Entry Newtonsoft.Json.Serialization.JsonTypeReflector.GetTypeConverter(System.Type)", span="217-217", cluster="Newtonsoft.Json.Serialization.JsonTypeReflector.GetTypeConverter(System.Type)"];
d244 [label="Exit Newtonsoft.Json.Utilities.ConvertUtils.ConvertOrCast(object, System.Globalization.CultureInfo, System.Type)", span="562-562", cluster="Newtonsoft.Json.Utilities.ConvertUtils.ConvertOrCast(object, System.Globalization.CultureInfo, System.Type)"];
d237 [label="targetType == typeof(object)", span="566-566", cluster="Newtonsoft.Json.Utilities.ConvertUtils.ConvertOrCast(object, System.Globalization.CultureInfo, System.Type)"];
d238 [label="return initialValue;", span="567-567", cluster="Newtonsoft.Json.Utilities.ConvertUtils.ConvertOrCast(object, System.Globalization.CultureInfo, System.Type)"];
d239 [label="initialValue == null && ReflectionUtils.IsNullable(targetType)", span="569-569", cluster="Newtonsoft.Json.Utilities.ConvertUtils.ConvertOrCast(object, System.Globalization.CultureInfo, System.Type)"];
d245 [label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.GetObjectType(object)", span="136-136", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetObjectType(object)"];
d254 [label="return null;", span="595-595", cluster="Newtonsoft.Json.Utilities.ConvertUtils.EnsureTypeAssignable(object, System.Type, System.Type)"];
d251 [label="castConverter != null", span="589-589", cluster="Newtonsoft.Json.Utilities.ConvertUtils.EnsureTypeAssignable(object, System.Type, System.Type)"];
d40 [label="Entry Newtonsoft.Json.Utilities.ConvertUtils.TypeConvertKey.TypeConvertKey(System.Type, System.Type)", span="264-264", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TypeConvertKey.TypeConvertKey(System.Type, System.Type)"];
d257 [label="Entry Newtonsoft.Json.Utilities.ThreadSafeStore<TKey, TValue>.Get(TKey)", span="50-50", cluster="Newtonsoft.Json.Utilities.ThreadSafeStore<TKey, TValue>.Get(TKey)"];
d258 [label="Entry System.Func<T, TResult>.Invoke(T)", span="0-0", cluster="System.Func<T, TResult>.Invoke(T)"];
d259 [label="Entry System.ArgumentException.ArgumentException(string)", span="0-0", cluster="System.ArgumentException.ArgumentException(string)"];
d260 [label="Entry System.Type.ToString()", span="0-0", cluster="System.Type.ToString()"];
d129 [label="Entry string.FormatWith(System.IFormatProvider, object, object)", span="52-52", cluster="string.FormatWith(System.IFormatProvider, object, object)"];
d56 [label="Entry Newtonsoft.Json.Utilities.ConvertUtils.CreateCastConverter(Newtonsoft.Json.Utilities.ConvertUtils.TypeConvertKey)", span="292-292", cluster="Newtonsoft.Json.Utilities.ConvertUtils.CreateCastConverter(Newtonsoft.Json.Utilities.ConvertUtils.TypeConvertKey)"];
d60 [label="castMethodInfo == null", span="298-298", cluster="Newtonsoft.Json.Utilities.ConvertUtils.CreateCastConverter(Newtonsoft.Json.Utilities.ConvertUtils.TypeConvertKey)"];
d64 [label="Exit Newtonsoft.Json.Utilities.ConvertUtils.CreateCastConverter(Newtonsoft.Json.Utilities.ConvertUtils.TypeConvertKey)", span="292-292", cluster="Newtonsoft.Json.Utilities.ConvertUtils.CreateCastConverter(Newtonsoft.Json.Utilities.ConvertUtils.TypeConvertKey)"];
d262 [label="return null;", span="605-605", cluster="Newtonsoft.Json.Utilities.ConvertUtils.ToValue(INullable)"];
d275 [label="Entry Unk.ToValue", span="", cluster="Unk.ToValue"];
d276 [label="Entry Unk.GetType", span="", cluster="Unk.GetType"];
d277 [label="Entry Unk.FormatWith", span="", cluster="Unk.FormatWith"];
d227 [label="Entry System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)", span="0-0", cluster="System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)"];
d128 [label="Entry System.Exception.Exception(string)", span="0-0", cluster="System.Exception.Exception(string)"];
d130 [label="Entry System.ArgumentException.ArgumentException(string, string)", span="0-0", cluster="System.ArgumentException.ArgumentException(string, string)"];
d137 [label="value = null", span="394-394", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvert(object, System.Globalization.CultureInfo, System.Type, out object)"];
d138 [label="return false;", span="395-395", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TryConvert(object, System.Globalization.CultureInfo, System.Type, out object)"];
d242 [label="return convertedValue;", span="573-573", cluster="Newtonsoft.Json.Utilities.ConvertUtils.ConvertOrCast(object, System.Globalization.CultureInfo, System.Type)"];
d365 [label="i++", span="780-780", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int64TryParse(char[], int, int, out long)"];
d26 [label="Entry System.Type.MakeGenericType(params System.Type[])", span="0-0", cluster="System.Type.MakeGenericType(params System.Type[])"];
d289 [label="PrimitiveTypeCode.UInt64", span="639-639", cluster="Newtonsoft.Json.Utilities.ConvertUtils.IsInteger(object)"];
d283 [label="PrimitiveTypeCode.Byte", span="633-633", cluster="Newtonsoft.Json.Utilities.ConvertUtils.IsInteger(object)"];
d53 [label="Entry Newtonsoft.Json.Utilities.ConvertUtils.TypeConvertKey.Equals(Newtonsoft.Json.Utilities.ConvertUtils.TypeConvertKey)", span="283-283", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TypeConvertKey.Equals(Newtonsoft.Json.Utilities.ConvertUtils.TypeConvertKey)"];
d51 [label="return Equals((TypeConvertKey)obj);", span="280-280", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TypeConvertKey.Equals(object)"];
d381 [label="ref Newtonsoft.Json.Utilities.ConvertUtils.TypeConvertKey", span=""];
d240 [label="return null;", span="570-570", cluster="Newtonsoft.Json.Utilities.ConvertUtils.ConvertOrCast(object, System.Globalization.CultureInfo, System.Type)"];
d43 [label="Exit Newtonsoft.Json.Utilities.ConvertUtils.TypeConvertKey.TypeConvertKey(System.Type, System.Type)", span="264-264", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TypeConvertKey.TypeConvertKey(System.Type, System.Type)"];
d41 [label="_initialType = initialType", span="266-266", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TypeConvertKey.TypeConvertKey(System.Type, System.Type)"];
d42 [label="_targetType = targetType", span="267-267", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TypeConvertKey.TypeConvertKey(System.Type, System.Type)"];
d57 [label="MethodInfo castMethodInfo = t.TargetType.GetMethod(''op_Implicit'', new[] { t.InitialType })", span="294-294", cluster="Newtonsoft.Json.Utilities.ConvertUtils.CreateCastConverter(Newtonsoft.Json.Utilities.ConvertUtils.TypeConvertKey)"];
d63 [label="return o => call(null, o);", span="303-303", cluster="Newtonsoft.Json.Utilities.ConvertUtils.CreateCastConverter(Newtonsoft.Json.Utilities.ConvertUtils.TypeConvertKey)"];
d58 [label="castMethodInfo == null", span="295-295", cluster="Newtonsoft.Json.Utilities.ConvertUtils.CreateCastConverter(Newtonsoft.Json.Utilities.ConvertUtils.TypeConvertKey)"];
d59 [label="castMethodInfo = t.TargetType.GetMethod(''op_Explicit'', new[] { t.InitialType })", span="296-296", cluster="Newtonsoft.Json.Utilities.ConvertUtils.CreateCastConverter(Newtonsoft.Json.Utilities.ConvertUtils.TypeConvertKey)"];
d62 [label="MethodCall<object, object> call = JsonTypeReflector.ReflectionDelegateFactory.CreateMethodCall<object>(castMethodInfo)", span="301-301", cluster="Newtonsoft.Json.Utilities.ConvertUtils.CreateCastConverter(Newtonsoft.Json.Utilities.ConvertUtils.TypeConvertKey)"];
d288 [label="PrimitiveTypeCode.Int64", span="638-638", cluster="Newtonsoft.Json.Utilities.ConvertUtils.IsInteger(object)"];
d284 [label="PrimitiveTypeCode.Int16", span="634-634", cluster="Newtonsoft.Json.Utilities.ConvertUtils.IsInteger(object)"];
d55 [label="Exit Newtonsoft.Json.Utilities.ConvertUtils.TypeConvertKey.Equals(Newtonsoft.Json.Utilities.ConvertUtils.TypeConvertKey)", span="283-283", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TypeConvertKey.Equals(Newtonsoft.Json.Utilities.ConvertUtils.TypeConvertKey)"];
d54 [label="return (_initialType == other._initialType && _targetType == other._targetType);", span="285-285", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TypeConvertKey.Equals(Newtonsoft.Json.Utilities.ConvertUtils.TypeConvertKey)"];
d380 [label="Newtonsoft.Json.Utilities.ConvertUtils.TypeConvertKey", span=""];
d379 [label="out Newtonsoft.Json.Utilities.ConvertUtils.TypeConvertKey", span=""];
d65 [label="Entry System.Type.GetMethod(string, System.Type[])", span="0-0", cluster="System.Type.GetMethod(string, System.Type[])"];
d68 [label="call(null, o)", span="303-303", cluster="lambda expression"];
d66 [label="Entry Newtonsoft.Json.Utilities.ReflectionDelegateFactory.CreateMethodCall<T>(System.Reflection.MethodBase)", span="64-64", cluster="Newtonsoft.Json.Utilities.ReflectionDelegateFactory.CreateMethodCall<T>(System.Reflection.MethodBase)"];
d287 [label="PrimitiveTypeCode.UInt32", span="637-637", cluster="Newtonsoft.Json.Utilities.ConvertUtils.IsInteger(object)"];
d285 [label="PrimitiveTypeCode.UInt16", span="635-635", cluster="Newtonsoft.Json.Utilities.ConvertUtils.IsInteger(object)"];
d45 [label="return _initialType.GetHashCode() ^ _targetType.GetHashCode();", span="272-272", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TypeConvertKey.GetHashCode()"];
d382 [label=call, span=""];
d67 [label="Entry lambda expression", span="303-303", cluster="lambda expression"];
d69 [label="Exit lambda expression", span="303-303", cluster="lambda expression"];
d70 [label="Entry Newtonsoft.Json.Utilities.MethodCall<T, TResult>.Invoke(T, params object[])", span="27-27", cluster="Newtonsoft.Json.Utilities.MethodCall<T, TResult>.Invoke(T, params object[])"];
d286 [label="PrimitiveTypeCode.Int32", span="636-636", cluster="Newtonsoft.Json.Utilities.ConvertUtils.IsInteger(object)"];
d44 [label="Entry Newtonsoft.Json.Utilities.ConvertUtils.TypeConvertKey.GetHashCode()", span="270-270", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TypeConvertKey.GetHashCode()"];
d46 [label="Exit Newtonsoft.Json.Utilities.ConvertUtils.TypeConvertKey.GetHashCode()", span="270-270", cluster="Newtonsoft.Json.Utilities.ConvertUtils.TypeConvertKey.GetHashCode()"];
d47 [label="Entry System.Type.GetHashCode()", span="0-0", cluster="System.Type.GetHashCode()"];
m0_32 [label="Entry string.ToCharArray()", span="0-0", cluster="string.ToCharArray()", file="ConvertUtilsTests.cs"];
m0_34 [label="Entry Unk.AreEqual", span="", cluster="Unk.AreEqual", file="ConvertUtilsTests.cs"];
m0_35 [label="Entry Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", span="87-87", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs"];
m0_54 [label="int j = 2", span="112-112", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", color=green, community=0, file="ConvertUtilsTests.cs"];
m0_53 [label="Assert.AreEqual(ParseResult.Overflow, result)", span="110-110", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs"];
m0_56 [label="int k = 2", span="114-114", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", color=green, community=0, file="ConvertUtilsTests.cs"];
m0_64 [label="int j = 2", span="125-125", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", color=green, community=0, file="ConvertUtilsTests.cs"];
m0_66 [label="int k = 2", span="127-127", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", color=green, community=0, file="ConvertUtilsTests.cs"];
m0_55 [label="j < 10", span="112-112", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", color=green, community=0, file="ConvertUtilsTests.cs"];
m0_58 [label="string t = j.ToString(CultureInfo.InvariantCulture) + k.ToString(CultureInfo.InvariantCulture) + ''47483647''", span="116-116", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", color=green, community=0, file="ConvertUtilsTests.cs"];
m0_63 [label="j++", span="112-112", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", color=green, community=0, file="ConvertUtilsTests.cs"];
m0_57 [label="k < 10", span="114-114", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", color=green, community=0, file="ConvertUtilsTests.cs"];
m0_59 [label="c = t.ToCharArray()", span="118-118", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", color=green, community=0, file="ConvertUtilsTests.cs"];
m0_62 [label="k++", span="114-114", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", color=green, community=0, file="ConvertUtilsTests.cs"];
m0_65 [label="j < 10", span="125-125", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", color=green, community=0, file="ConvertUtilsTests.cs"];
m0_68 [label="string t = ''-'' + j.ToString(CultureInfo.InvariantCulture) + k.ToString(CultureInfo.InvariantCulture) + ''47483648''", span="129-129", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", color=green, community=0, file="ConvertUtilsTests.cs"];
m0_73 [label="j++", span="125-125", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", color=green, community=0, file="ConvertUtilsTests.cs"];
m0_61 [label="Assert.AreEqual(ParseResult.Overflow, result)", span="121-121", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", color=green, community=0, file="ConvertUtilsTests.cs"];
m0_60 [label="result = ConvertUtils.Int32TryParse(c, 0, c.Length, out i)", span="119-119", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", color=green, community=0, file="ConvertUtilsTests.cs"];
m0_67 [label="k < 10", span="127-127", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", color=green, community=0, file="ConvertUtilsTests.cs"];
m0_69 [label="c = t.ToCharArray()", span="131-131", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", color=green, community=0, file="ConvertUtilsTests.cs"];
m0_72 [label="k++", span="127-127", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", color=green, community=0, file="ConvertUtilsTests.cs"];
m0_71 [label="Assert.AreEqual(ParseResult.Overflow, result)", span="134-134", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", color=green, community=0, file="ConvertUtilsTests.cs"];
m0_70 [label="result = ConvertUtils.Int32TryParse(c, 0, c.Length, out i)", span="132-132", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", color=green, community=0, file="ConvertUtilsTests.cs"];
m0_52 [label="result = ConvertUtils.Int32TryParse(c, 0, c.Length, out i)", span="109-109", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs"];
m0_37 [label="char[] c = ''43443333227''.ToCharArray()", span="90-90", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs"];
m0_40 [label="c = ''2147483647''.ToCharArray()", span="94-94", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs"];
m0_44 [label="c = ''2147483648''.ToCharArray()", span="99-99", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs"];
m0_47 [label="c = ''-2147483648''.ToCharArray()", span="103-103", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs"];
m0_51 [label="c = ''-2147483649''.ToCharArray()", span="108-108", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs"];
m0_38 [label="ParseResult result = ConvertUtils.Int32TryParse(c, 0, c.Length, out i)", span="91-91", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs"];
m0_41 [label="result = ConvertUtils.Int32TryParse(c, 0, c.Length, out i)", span="95-95", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs"];
m0_45 [label="result = ConvertUtils.Int32TryParse(c, 0, c.Length, out i)", span="100-100", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs"];
m0_48 [label="result = ConvertUtils.Int32TryParse(c, 0, c.Length, out i)", span="104-104", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs"];
m0_39 [label="Assert.AreEqual(ParseResult.Overflow, result)", span="92-92", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs"];
m0_42 [label="Assert.AreEqual(ParseResult.Success, result)", span="96-96", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs"];
m0_43 [label="Assert.AreEqual(2147483647, i)", span="97-97", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs"];
m0_46 [label="Assert.AreEqual(ParseResult.Overflow, result)", span="101-101", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs"];
m0_49 [label="Assert.AreEqual(ParseResult.Success, result)", span="105-105", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs"];
m0_50 [label="Assert.AreEqual(-2147483648, i)", span="106-106", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs"];
m0_36 [label="int i", span="89-89", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs"];
m0_74 [label="Exit Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", span="87-87", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int32TryParse()", file="ConvertUtilsTests.cs"];
m0_76 [label="Entry int.ToString(System.IFormatProvider)", span="0-0", cluster="int.ToString(System.IFormatProvider)", file="ConvertUtilsTests.cs"];
m0_75 [label="Entry Newtonsoft.Json.Utilities.ConvertUtils.Int32TryParse(char[], int, int, out int)", span="646-646", cluster="Newtonsoft.Json.Utilities.ConvertUtils.Int32TryParse(char[], int, int, out int)", file="ConvertUtilsTests.cs"];
m0_0 [label="Entry Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", span="46-46", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs"];
m0_2 [label="char[] c = ''43443333222211111117''.ToCharArray()", span="49-49", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs"];
m0_5 [label="c = ''9223372036854775807''.ToCharArray()", span="53-53", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs"];
m0_9 [label="c = ''9223372036854775808''.ToCharArray()", span="58-58", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs"];
m0_14 [label="c = (''9'' + i + ''23372036854775807'').ToCharArray()", span="64-64", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs"];
m0_18 [label="c = ''-9223372036854775808''.ToCharArray()", span="69-69", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs"];
m0_22 [label="c = ''-9223372036854775809''.ToCharArray()", span="74-74", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs"];
m0_27 [label="c = (''-9'' + i + ''23372036854775808'').ToCharArray()", span="80-80", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs"];
m0_4 [label="Assert.AreEqual(ParseResult.Overflow, result)", span="51-51", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs"];
m0_7 [label="Assert.AreEqual(ParseResult.Success, result)", span="55-55", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs"];
m0_8 [label="Assert.AreEqual(9223372036854775807L, l)", span="56-56", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs"];
m0_11 [label="Assert.AreEqual(ParseResult.Overflow, result)", span="60-60", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs"];
m0_16 [label="Assert.AreEqual(ParseResult.Overflow, result)", span="66-66", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs"];
m0_20 [label="Assert.AreEqual(ParseResult.Success, result)", span="71-71", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs"];
m0_21 [label="Assert.AreEqual(-9223372036854775808L, l)", span="72-72", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs"];
m0_24 [label="Assert.AreEqual(ParseResult.Overflow, result)", span="76-76", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs"];
m0_29 [label="Assert.AreEqual(ParseResult.Overflow, result)", span="82-82", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs"];
m0_1 [label="long l", span="48-48", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs"];
m0_3 [label="ParseResult result = ConvertUtils.Int64TryParse(c, 0, c.Length, out l)", span="50-50", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs"];
m0_6 [label="result = ConvertUtils.Int64TryParse(c, 0, c.Length, out l)", span="54-54", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs"];
m0_10 [label="result = ConvertUtils.Int64TryParse(c, 0, c.Length, out l)", span="59-59", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs"];
m0_12 [label="int i = 3", span="62-62", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs"];
m0_13 [label="i < 10", span="62-62", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs"];
m0_15 [label="result = ConvertUtils.Int64TryParse(c, 0, c.Length, out l)", span="65-65", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs"];
m0_19 [label="result = ConvertUtils.Int64TryParse(c, 0, c.Length, out l)", span="70-70", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs"];
m0_23 [label="result = ConvertUtils.Int64TryParse(c, 0, c.Length, out l)", span="75-75", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs"];
m0_25 [label="int i = 3", span="78-78", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs"];
m0_26 [label="i < 10", span="78-78", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs"];
m0_28 [label="result = ConvertUtils.Int64TryParse(c, 0, c.Length, out l)", span="81-81", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs"];
m0_17 [label="i++", span="62-62", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs"];
m0_30 [label="i++", span="78-78", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs"];
m0_31 [label="Exit Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", span="46-46", cluster="Newtonsoft.Json.Tests.Utilities.ConvertUtilsTests.Int64TryParse()", file="ConvertUtilsTests.cs"];
m1_158 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingPropertyWithError()", span="328-328", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingPropertyWithError()", file="JPathExecuteTests.cs"];
m1_159 [label="JObject o = new JObject(\r\n                new JProperty(''Blah'', 1))", span="330-331", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingPropertyWithError()", file="JPathExecuteTests.cs"];
m1_160 [label="ExceptionAssert.Throws<JsonException>(() => { o.SelectToken(''Missing'', true); }, ''Property 'Missing' does not exist on JObject.'')", span="333-333", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingPropertyWithError()", file="JPathExecuteTests.cs"];
m1_161 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingPropertyWithError()", span="328-328", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingPropertyWithError()", file="JPathExecuteTests.cs"];
m1_418 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NestedQuery()", span="690-690", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NestedQuery()", file="JPathExecuteTests.cs"];
m1_419 [label="JArray a = new JArray(\r\n                new JObject(\r\n                    new JProperty(''name'', ''Bad Boys''),\r\n                    new JProperty(''cast'', new JArray(\r\n                        new JObject(new JProperty(''name'', ''Will Smith''))))),\r\n                new JObject(\r\n                    new JProperty(''name'', ''Independence Day''),\r\n                    new JProperty(''cast'', new JArray(\r\n                        new JObject(new JProperty(''name'', ''Will Smith''))))),\r\n                new JObject(\r\n                    new JProperty(''name'', ''The Rock''),\r\n                    new JProperty(''cast'', new JArray(\r\n                        new JObject(new JProperty(''name'', ''Nick Cage'')))))\r\n                )", span="692-705", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NestedQuery()", file="JPathExecuteTests.cs"];
m1_420 [label="IList<JToken> t = a.SelectTokens(''[?(@.cast[?(@.name=='Will Smith')])].name'').ToList()", span="707-707", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NestedQuery()", file="JPathExecuteTests.cs"];
m1_422 [label="Assert.AreEqual(2, t.Count)", span="709-709", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NestedQuery()", file="JPathExecuteTests.cs"];
m1_423 [label="Assert.AreEqual(''Bad Boys'', (string)t[0])", span="710-710", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NestedQuery()", file="JPathExecuteTests.cs"];
m1_424 [label="Assert.AreEqual(''Independence Day'', (string)t[1])", span="711-711", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NestedQuery()", file="JPathExecuteTests.cs"];
m1_421 [label="Assert.IsNotNull(t)", span="708-708", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NestedQuery()", file="JPathExecuteTests.cs"];
m1_425 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NestedQuery()", span="690-690", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NestedQuery()", file="JPathExecuteTests.cs"];
m1_217 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArray()", span="397-397", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArray()", file="JPathExecuteTests.cs"];
m1_221 [label="Assert.AreEqual(JTokenType.Integer, t.Type)", span="403-403", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArray()", file="JPathExecuteTests.cs"];
m1_222 [label="Assert.AreEqual(2, (int)t)", span="404-404", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArray()", file="JPathExecuteTests.cs"];
m1_218 [label="JArray a = new JArray(1, 2, 3, 4)", span="399-399", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArray()", file="JPathExecuteTests.cs"];
m1_219 [label="JToken t = a.SelectToken(''[1]'')", span="401-401", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArray()", file="JPathExecuteTests.cs"];
m1_220 [label="Assert.IsNotNull(t)", span="402-402", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArray()", file="JPathExecuteTests.cs"];
m1_223 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArray()", span="397-397", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArray()", file="JPathExecuteTests.cs"];
m1_62 [label="Entry Newtonsoft.Json.Linq.JArray.JArray(params object[])", span="82-82", cluster="Newtonsoft.Json.Linq.JArray.JArray(params object[])", file="JPathExecuteTests.cs"];
m1_154 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateConstructorOutOfBoundsIndxer()", span="320-320", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateConstructorOutOfBoundsIndxer()", file="JPathExecuteTests.cs"];
m1_156 [label="Assert.IsNull(c.SelectToken(''[1]''))", span="324-324", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateConstructorOutOfBoundsIndxer()", file="JPathExecuteTests.cs"];
m1_155 [label="JConstructor c = new JConstructor(''Blah'')", span="322-322", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateConstructorOutOfBoundsIndxer()", file="JPathExecuteTests.cs"];
m1_157 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateConstructorOutOfBoundsIndxer()", span="320-320", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateConstructorOutOfBoundsIndxer()", file="JPathExecuteTests.cs"];
m1_92 [label="Entry Unk.IsNull", span="", cluster="Unk.IsNull", file="JPathExecuteTests.cs"];
m1_384 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.MultipleQueries()", span="627-627", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.MultipleQueries()", file="JPathExecuteTests.cs"];
m1_386 [label="IList<JToken> t = a.SelectTokens(''[?(@ <> 1)][?(@ <> 4)][?(@ < 7)]'').ToList()", span="634-634", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.MultipleQueries()", file="JPathExecuteTests.cs"];
m1_388 [label="Assert.AreEqual(0, t.Count)", span="636-636", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.MultipleQueries()", file="JPathExecuteTests.cs"];
m1_385 [label="JArray a = new JArray(1, 2, 3, 4, 5, 6, 7, 8, 9)", span="629-629", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.MultipleQueries()", file="JPathExecuteTests.cs"];
m1_387 [label="Assert.IsNotNull(t)", span="635-635", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.MultipleQueries()", file="JPathExecuteTests.cs"];
m1_389 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.MultipleQueries()", span="627-627", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.MultipleQueries()", file="JPathExecuteTests.cs"];
m1_480 [label="Entry Unk.ToList", span="", cluster="Unk.ToList", file="JPathExecuteTests.cs"];
m1_308 [label="Entry Unk.IsTrue", span="", cluster="Unk.IsTrue", file="JPathExecuteTests.cs"];
m1_10 [label="OnDeserializing != null", span="143-143", cluster="Newtonsoft.Json.Serialization.JsonContract.InvokeOnDeserializing(object, System.Runtime.Serialization.StreamingContext)", file="JPathExecuteTests.cs"];
m1_9 [label="Entry Newtonsoft.Json.Serialization.JsonContract.InvokeOnDeserializing(object, System.Runtime.Serialization.StreamingContext)", span="140-140", cluster="Newtonsoft.Json.Serialization.JsonContract.InvokeOnDeserializing(object, System.Runtime.Serialization.StreamingContext)", file="JPathExecuteTests.cs"];
m1_98 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateIndexerOnObjectWithError()", span="252-252", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateIndexerOnObjectWithError()", file="JPathExecuteTests.cs"];
m1_99 [label="JObject o = new JObject(\r\n                new JProperty(''Blah'', 1))", span="254-255", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateIndexerOnObjectWithError()", file="JPathExecuteTests.cs"];
m1_100 [label="ExceptionAssert.Throws<JsonException>(() => { o.SelectToken(''[1]'', true); }, @''Index 1 not valid on JObject.'')", span="257-257", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateIndexerOnObjectWithError()", file="JPathExecuteTests.cs"];
m1_101 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateIndexerOnObjectWithError()", span="252-252", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateIndexerOnObjectWithError()", file="JPathExecuteTests.cs"];
m1_426 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.PathWithConstructor()", span="715-715", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.PathWithConstructor()", file="JPathExecuteTests.cs"];
m1_429 [label="Assert.AreEqual(1L, v.Value)", span="739-739", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.PathWithConstructor()", file="JPathExecuteTests.cs"];
m1_428 [label="JValue v = (JValue)a.SelectToken(''[1].Property2[1][0]'')", span="738-738", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.PathWithConstructor()", file="JPathExecuteTests.cs"];
m1_427 [label="JArray a = JArray.Parse(@''[\r\n  {\r\n    ''''Property1'''': [\r\n      1,\r\n      [\r\n        [\r\n          []\r\n        ]\r\n      ]\r\n    ]\r\n  },\r\n  {\r\n    ''''Property2'''': new Constructor1(\r\n      null,\r\n      [\r\n        1\r\n      ]\r\n    )\r\n  }\r\n]'')", span="717-736", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.PathWithConstructor()", file="JPathExecuteTests.cs"];
m1_430 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.PathWithConstructor()", span="715-715", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.PathWithConstructor()", file="JPathExecuteTests.cs"];
m1_369 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsQuery()", span="602-602", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsQuery()", file="JPathExecuteTests.cs"];
m1_370 [label="JArray a = new JArray(\r\n                new JArray(new JObject(new JProperty(''hi'', ''ho''))),\r\n                new JArray(new JObject(new JProperty(''hi'', ''ha''))))", span="604-606", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsQuery()", file="JPathExecuteTests.cs"];
m1_374 [label="Assert.IsTrue(JToken.DeepEquals(new JArray(new JObject(new JProperty(''hi'', ''ho''))), t[0]))", span="611-611", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsQuery()", file="JPathExecuteTests.cs"];
m1_371 [label="IList<JToken> t = a.SelectTokens(''[ ?( @..hi <> 'ha' ) ]'').ToList()", span="608-608", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsQuery()", file="JPathExecuteTests.cs"];
m1_373 [label="Assert.AreEqual(1, t.Count)", span="610-610", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsQuery()", file="JPathExecuteTests.cs"];
m1_372 [label="Assert.IsNotNull(t)", span="609-609", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsQuery()", file="JPathExecuteTests.cs"];
m1_375 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsQuery()", span="602-602", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsQuery()", file="JPathExecuteTests.cs"];
m1_323 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", span="531-531", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="JPathExecuteTests.cs"];
m1_328 [label="IList<JToken> t = a.SelectTokens(''$..*'').ToList()", span="538-538", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="JPathExecuteTests.cs"];
m1_330 [label="Assert.AreEqual(9, t.Count)", span="540-540", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="JPathExecuteTests.cs"];
m1_333 [label="Assert.AreEqual(1, (int)t[2])", span="544-544", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="JPathExecuteTests.cs"];
m1_335 [label="Assert.AreEqual(2, (int)t[4])", span="546-546", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="JPathExecuteTests.cs"];
m1_339 [label="Assert.AreEqual(3, (int)t[8])", span="550-550", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="JPathExecuteTests.cs"];
m1_327 [label="JArray a = new JArray(o1, o2, o3)", span="536-536", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="JPathExecuteTests.cs"];
m1_329 [label="Assert.IsNotNull(t)", span="539-539", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="JPathExecuteTests.cs"];
m1_331 [label="Assert.IsTrue(JToken.DeepEquals(a, t[0]))", span="542-542", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="JPathExecuteTests.cs"];
m1_332 [label="Assert.IsTrue(JToken.DeepEquals(o1, t[1]))", span="543-543", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="JPathExecuteTests.cs"];
m1_334 [label="Assert.IsTrue(JToken.DeepEquals(o2, t[3]))", span="545-545", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="JPathExecuteTests.cs"];
m1_336 [label="Assert.IsTrue(JToken.DeepEquals(o3, t[5]))", span="547-547", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="JPathExecuteTests.cs"];
m1_337 [label="Assert.IsTrue(JToken.DeepEquals(new JObject { { ''Name'', new JArray(3) } }, t[6]))", span="548-548", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="JPathExecuteTests.cs"];
m1_338 [label="Assert.IsTrue(JToken.DeepEquals(new JArray(3), t[7]))", span="549-549", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="JPathExecuteTests.cs"];
m1_326 [label="JObject o3 = new JObject { { ''Name'', new JObject { { ''Name'', new JArray(3) } } } }", span="535-535", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="JPathExecuteTests.cs"];
m1_324 [label="JObject o1 = new JObject { { ''Name'', 1 } }", span="533-533", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="JPathExecuteTests.cs"];
m1_325 [label="JObject o2 = new JObject { { ''Name'', 2 } }", span="534-534", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="JPathExecuteTests.cs"];
m1_340 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", span="531-531", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="JPathExecuteTests.cs"];
m1_481 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Sum<TSource>(System.Func<TSource, decimal>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Sum<TSource>(System.Func<TSource, decimal>)", file="JPathExecuteTests.cs"];
m1_350 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateLastSingleCharacterProperty()", span="569-569", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateLastSingleCharacterProperty()", file="JPathExecuteTests.cs"];
m1_353 [label="Assert.AreEqual(''Jeff'', a2)", span="574-574", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateLastSingleCharacterProperty()", file="JPathExecuteTests.cs"];
m1_352 [label="string a2 = (string)o2.SelectToken(''People[0].N'')", span="572-572", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateLastSingleCharacterProperty()", file="JPathExecuteTests.cs"];
m1_351 [label="JObject o2 = JObject.Parse(''{'People':[{'N':'Jeff'}]}'')", span="571-571", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateLastSingleCharacterProperty()", file="JPathExecuteTests.cs"];
m1_354 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateLastSingleCharacterProperty()", span="569-569", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateLastSingleCharacterProperty()", file="JPathExecuteTests.cs"];
m1_184 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySliceWithError()", span="364-364", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySliceWithError()", file="JPathExecuteTests.cs"];
m1_185 [label="JArray a = new JArray(1, 2, 3, 4, 5)", span="366-366", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySliceWithError()", file="JPathExecuteTests.cs"];
m1_186 [label="ExceptionAssert.Throws<JsonException>(() => { a.SelectToken(''[99:]'', true); }, ''Array slice of 99 to * returned no results.'')", span="368-368", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySliceWithError()", file="JPathExecuteTests.cs"];
m1_187 [label="ExceptionAssert.Throws<JsonException>(() => { a.SelectToken(''[1:-19]'', true); }, ''Array slice of 1 to -19 returned no results.'')", span="370-370", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySliceWithError()", file="JPathExecuteTests.cs"];
m1_188 [label="ExceptionAssert.Throws<JsonException>(() => { a.SelectToken(''[:-19]'', true); }, ''Array slice of * to -19 returned no results.'')", span="372-372", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySliceWithError()", file="JPathExecuteTests.cs"];
m1_190 [label="ExceptionAssert.Throws<JsonException>(() => { a.SelectToken(''[:]'', true); }, ''Array slice of * to * returned no results.'')", span="376-376", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySliceWithError()", file="JPathExecuteTests.cs"];
m1_189 [label="a = new JArray()", span="374-374", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySliceWithError()", file="JPathExecuteTests.cs"];
m1_191 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySliceWithError()", span="364-364", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySliceWithError()", file="JPathExecuteTests.cs"];
m1_432 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QueryAgainstNonStringValues()", span="743-743", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QueryAgainstNonStringValues()", file="JPathExecuteTests.cs"];
m1_433 [label="IList<object> values = new List<object>\r\n            {\r\n                ''ff2dc672-6e15-4aa2-afb0-18f4f69596ad'',\r\n                new Guid(''ff2dc672-6e15-4aa2-afb0-18f4f69596ad''),\r\n                ''http://localhost'',\r\n                new Uri(''http://localhost''),\r\n                ''2000-12-05T05:07:59Z'',\r\n                new DateTime(2000, 12, 5, 5, 7, 59, DateTimeKind.Utc),\r\n#if !NET20\r\n                ''2000-12-05T05:07:59-10:00'',\r\n                new DateTimeOffset(2000, 12, 5, 5, 7, 59, -TimeSpan.FromHours(10)),\r\n#endif\r\n                ''SGVsbG8gd29ybGQ='',\r\n                Encoding.UTF8.GetBytes(''Hello world''),\r\n                ''365.23:59:59'',\r\n                new TimeSpan(365, 23, 59, 59)\r\n            }", span="745-761", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QueryAgainstNonStringValues()", color=green, community=0, file="JPathExecuteTests.cs"];
m1_434 [label="JObject o = new JObject(\r\n                new JProperty(''prop'',\r\n                    new JArray(\r\n                        values.Select(v => new JObject(new JProperty(''childProp'', v)))\r\n                    )\r\n                )\r\n            )", span="763-769", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QueryAgainstNonStringValues()", file="JPathExecuteTests.cs"];
m1_435 [label="IList<JToken> t = o.SelectTokens(''$.prop[?(@.childProp =='ff2dc672-6e15-4aa2-afb0-18f4f69596ad')]'').ToList()", span="771-771", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QueryAgainstNonStringValues()", file="JPathExecuteTests.cs"];
m1_437 [label="t = o.SelectTokens(''$.prop[?(@.childProp =='http://localhost')]'').ToList()", span="774-774", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QueryAgainstNonStringValues()", file="JPathExecuteTests.cs"];
m1_439 [label="t = o.SelectTokens(''$.prop[?(@.childProp =='2000-12-05T05:07:59Z')]'').ToList()", span="777-777", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QueryAgainstNonStringValues()", file="JPathExecuteTests.cs"];
m1_441 [label="t = o.SelectTokens(''$.prop[?(@.childProp =='2000-12-05T05:07:59-10:00')]'').ToList()", span="781-781", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QueryAgainstNonStringValues()", file="JPathExecuteTests.cs"];
m1_443 [label="t = o.SelectTokens(''$.prop[?(@.childProp =='SGVsbG8gd29ybGQ=')]'').ToList()", span="785-785", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QueryAgainstNonStringValues()", file="JPathExecuteTests.cs"];
m1_445 [label="t = o.SelectTokens(''$.prop[?(@.childProp =='365.23:59:59')]'').ToList()", span="788-788", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QueryAgainstNonStringValues()", file="JPathExecuteTests.cs"];
m1_446 [label="Assert.AreEqual(2, t.Count)", span="789-789", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QueryAgainstNonStringValues()", file="JPathExecuteTests.cs"];
m1_436 [label="Assert.AreEqual(2, t.Count)", span="772-772", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QueryAgainstNonStringValues()", file="JPathExecuteTests.cs"];
m1_438 [label="Assert.AreEqual(2, t.Count)", span="775-775", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QueryAgainstNonStringValues()", file="JPathExecuteTests.cs"];
m1_440 [label="Assert.AreEqual(2, t.Count)", span="778-778", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QueryAgainstNonStringValues()", file="JPathExecuteTests.cs"];
m1_442 [label="Assert.AreEqual(2, t.Count)", span="782-782", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QueryAgainstNonStringValues()", file="JPathExecuteTests.cs"];
m1_444 [label="Assert.AreEqual(2, t.Count)", span="786-786", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QueryAgainstNonStringValues()", file="JPathExecuteTests.cs"];
m1_447 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QueryAgainstNonStringValues()", span="743-743", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QueryAgainstNonStringValues()", file="JPathExecuteTests.cs"];
m1_125 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMultipleResultsError()", span="288-288", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMultipleResultsError()", file="JPathExecuteTests.cs"];
m1_126 [label="JArray a = new JArray(1, 2, 3, 4, 5)", span="290-290", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMultipleResultsError()", file="JPathExecuteTests.cs"];
m1_127 [label="ExceptionAssert.Throws<JsonException>(() => { a.SelectToken(''[0, 1]''); }, @''Path returned multiple tokens.'')", span="292-292", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMultipleResultsError()", file="JPathExecuteTests.cs"];
m1_128 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMultipleResultsError()", span="288-288", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMultipleResultsError()", file="JPathExecuteTests.cs"];
m1_431 [label="Entry Newtonsoft.Json.Linq.JArray.Parse(string)", span="144-144", cluster="Newtonsoft.Json.Linq.JArray.Parse(string)", file="JPathExecuteTests.cs"];
m1_79 [label="Entry Newtonsoft.Json.Linq.JObject.JObject(params object[])", span="104-104", cluster="Newtonsoft.Json.Linq.JObject.JObject(params object[])", file="JPathExecuteTests.cs"];
m1_355 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ExistsQuery()", span="578-578", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ExistsQuery()", file="JPathExecuteTests.cs"];
m1_356 [label="JArray a = new JArray(new JObject(new JProperty(''hi'', ''ho'')), new JObject(new JProperty(''hi2'', ''ha'')))", span="580-580", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ExistsQuery()", file="JPathExecuteTests.cs"];
m1_360 [label="Assert.IsTrue(JToken.DeepEquals(new JObject(new JProperty(''hi'', ''ho'')), t[0]))", span="585-585", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ExistsQuery()", file="JPathExecuteTests.cs"];
m1_357 [label="IList<JToken> t = a.SelectTokens(''[ ?( @.hi ) ]'').ToList()", span="582-582", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ExistsQuery()", file="JPathExecuteTests.cs"];
m1_359 [label="Assert.AreEqual(1, t.Count)", span="584-584", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ExistsQuery()", file="JPathExecuteTests.cs"];
m1_358 [label="Assert.IsNotNull(t)", span="583-583", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ExistsQuery()", file="JPathExecuteTests.cs"];
m1_361 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ExistsQuery()", span="578-578", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ExistsQuery()", file="JPathExecuteTests.cs"];
m1_4 [label="Assert.AreEqual(3, tokens.Count)", span="97-97", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ParseWithEmptyArrayContent()", file="JPathExecuteTests.cs"];
m1_47 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWhitespaceString()", span="164-164", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWhitespaceString()", file="JPathExecuteTests.cs"];
m1_48 [label="JObject o = new JObject(\r\n                new JProperty(''Blah'', 1))", span="166-167", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWhitespaceString()", file="JPathExecuteTests.cs"];
m1_49 [label="JToken t = o.SelectToken('' '')", span="169-169", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWhitespaceString()", file="JPathExecuteTests.cs"];
m1_50 [label="Assert.AreEqual(o, t)", span="170-170", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWhitespaceString()", file="JPathExecuteTests.cs"];
m1_51 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWhitespaceString()", span="164-164", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWhitespaceString()", file="JPathExecuteTests.cs"];
m1_461 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", span="793-793", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="JPathExecuteTests.cs"];
m1_469 [label="IList<string> storeNames = o.SelectToken(''Stores'').Select(s => (string)s).ToList()", span="839-839", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="JPathExecuteTests.cs"];
m1_470 [label="IList<string> firstProductNames = o[''Manufacturers''].Select(m => (string)m.SelectToken(''Products[1].Name'')).ToList()", span="843-843", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="JPathExecuteTests.cs"];
m1_462 [label="JObject o = JObject.Parse(@''{\r\n        ''''Stores'''': [\r\n          ''''Lambton Quay'''',\r\n          ''''Willis Street''''\r\n        ],\r\n        ''''Manufacturers'''': [\r\n          {\r\n            ''''Name'''': ''''Acme Co'''',\r\n            ''''Products'''': [\r\n              {\r\n                ''''Name'''': ''''Anvil'''',\r\n                ''''Price'''': 50\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            ''''Name'''': ''''Contoso'''',\r\n            ''''Products'''': [\r\n              {\r\n                ''''Name'''': ''''Elbow Grease'''',\r\n                ''''Price'''': 99.95\r\n              },\r\n              {\r\n                ''''Name'''': ''''Headlight Fluid'''',\r\n                ''''Price'''': 4\r\n              }\r\n            ]\r\n          }\r\n        ]\r\n      }'')", span="795-824", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="JPathExecuteTests.cs"];
m1_468 [label="Assert.AreEqual(''Elbow Grease'', productName)", span="837-837", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="JPathExecuteTests.cs"];
m1_472 [label="Assert.AreEqual(2, storeNames.Count)", span="850-850", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="JPathExecuteTests.cs"];
m1_473 [label="Assert.AreEqual(''Lambton Quay'', storeNames[0])", span="851-851", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="JPathExecuteTests.cs"];
m1_474 [label="Assert.AreEqual(''Willis Street'', storeNames[1])", span="852-852", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="JPathExecuteTests.cs"];
m1_471 [label="decimal totalPrice = o[''Manufacturers''].Sum(m => (decimal)m.SelectToken(''Products[0].Price''))", span="847-847", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="JPathExecuteTests.cs"];
m1_475 [label="Assert.AreEqual(2, firstProductNames.Count)", span="853-853", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="JPathExecuteTests.cs"];
m1_476 [label="Assert.AreEqual(null, firstProductNames[0])", span="854-854", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="JPathExecuteTests.cs"];
m1_477 [label="Assert.AreEqual(''Headlight Fluid'', firstProductNames[1])", span="855-855", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="JPathExecuteTests.cs"];
m1_466 [label="Assert.AreEqual(''Acme Co'', name)", span="835-835", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="JPathExecuteTests.cs"];
m1_467 [label="Assert.AreEqual(50m, productPrice)", span="836-836", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="JPathExecuteTests.cs"];
m1_478 [label="Assert.AreEqual(149.95m, totalPrice)", span="856-856", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="JPathExecuteTests.cs"];
m1_463 [label="string name = (string)o.SelectToken(''Manufacturers[0].Name'')", span="826-826", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="JPathExecuteTests.cs"];
m1_464 [label="decimal productPrice = (decimal)o.SelectToken(''Manufacturers[0].Products[0].Price'')", span="829-829", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="JPathExecuteTests.cs"];
m1_465 [label="string productName = (string)o.SelectToken(''Manufacturers[1].Products[0].Name'')", span="832-832", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="JPathExecuteTests.cs"];
m1_479 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", span="793-793", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="JPathExecuteTests.cs"];
m1_36 [label="JObject o = new JObject(\r\n                new JProperty(''Blah'', 1))", span="143-144", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyString()", file="JPathExecuteTests.cs"];
m1_93 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateIndexerOnObject()", span="242-242", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateIndexerOnObject()", file="JPathExecuteTests.cs"];
m1_94 [label="JObject o = new JObject(\r\n                new JProperty(''Blah'', 1))", span="244-245", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateIndexerOnObject()", file="JPathExecuteTests.cs"];
m1_95 [label="JToken t = o.SelectToken(''[1]'')", span="247-247", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateIndexerOnObject()", file="JPathExecuteTests.cs"];
m1_96 [label="Assert.IsNull(t)", span="248-248", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateIndexerOnObject()", file="JPathExecuteTests.cs"];
m1_97 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateIndexerOnObject()", span="242-242", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateIndexerOnObject()", file="JPathExecuteTests.cs"];
m1_450 [label="Entry System.Uri.Uri(string)", span="0-0", cluster="System.Uri.Uri(string)", file="JPathExecuteTests.cs"];
m1_32 [label="NonNullableUnderlyingType == typeof(DateTimeOffset)", span="184-184", cluster="Newtonsoft.Json.Serialization.JsonContract.JsonContract(System.Type)", file="JPathExecuteTests.cs"];
m1_224 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", span="408-408", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m1_227 [label="t = a.SelectTokens(''[-3:]'').ToList()", span="413-413", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m1_232 [label="t = a.SelectTokens(''[-1:-2:-1]'').ToList()", span="419-419", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m1_235 [label="t = a.SelectTokens(''[-2:-1]'').ToList()", span="423-423", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m1_238 [label="t = a.SelectTokens(''[1:1]'').ToList()", span="427-427", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m1_240 [label="t = a.SelectTokens(''[1:2]'').ToList()", span="430-430", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m1_243 [label="t = a.SelectTokens(''[::-1]'').ToList()", span="434-434", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m1_254 [label="t = a.SelectTokens(''[::-2]'').ToList()", span="446-446", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m1_228 [label="Assert.AreEqual(3, t.Count)", span="414-414", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m1_229 [label="Assert.AreEqual(7, (int)t[0])", span="415-415", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m1_230 [label="Assert.AreEqual(8, (int)t[1])", span="416-416", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m1_231 [label="Assert.AreEqual(9, (int)t[2])", span="417-417", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m1_233 [label="Assert.AreEqual(1, t.Count)", span="420-420", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m1_234 [label="Assert.AreEqual(9, (int)t[0])", span="421-421", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m1_236 [label="Assert.AreEqual(1, t.Count)", span="424-424", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m1_237 [label="Assert.AreEqual(8, (int)t[0])", span="425-425", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m1_239 [label="Assert.AreEqual(0, t.Count)", span="428-428", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m1_241 [label="Assert.AreEqual(1, t.Count)", span="431-431", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m1_242 [label="Assert.AreEqual(2, (int)t[0])", span="432-432", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m1_244 [label="Assert.AreEqual(9, t.Count)", span="435-435", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m1_245 [label="Assert.AreEqual(9, (int)t[0])", span="436-436", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m1_246 [label="Assert.AreEqual(8, (int)t[1])", span="437-437", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m1_247 [label="Assert.AreEqual(7, (int)t[2])", span="438-438", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m1_248 [label="Assert.AreEqual(6, (int)t[3])", span="439-439", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m1_249 [label="Assert.AreEqual(5, (int)t[4])", span="440-440", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m1_250 [label="Assert.AreEqual(4, (int)t[5])", span="441-441", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m1_251 [label="Assert.AreEqual(3, (int)t[6])", span="442-442", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m1_252 [label="Assert.AreEqual(2, (int)t[7])", span="443-443", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m1_253 [label="Assert.AreEqual(1, (int)t[8])", span="444-444", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m1_255 [label="Assert.AreEqual(5, t.Count)", span="447-447", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m1_256 [label="Assert.AreEqual(9, (int)t[0])", span="448-448", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m1_257 [label="Assert.AreEqual(7, (int)t[1])", span="449-449", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m1_258 [label="Assert.AreEqual(5, (int)t[2])", span="450-450", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m1_259 [label="Assert.AreEqual(3, (int)t[3])", span="451-451", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m1_260 [label="Assert.AreEqual(1, (int)t[4])", span="452-452", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m1_225 [label="JArray a = new JArray(1, 2, 3, 4, 5, 6, 7, 8, 9)", span="410-410", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m1_226 [label="IList<JToken> t = null", span="411-411", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m1_261 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", span="408-408", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m1_283 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScan()", span="483-483", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScan()", file="JPathExecuteTests.cs"];
m1_287 [label="IList<JToken> t = a.SelectTokens(''$..Name'').ToList()", span="489-489", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScan()", file="JPathExecuteTests.cs"];
m1_289 [label="Assert.AreEqual(2, t.Count)", span="491-491", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScan()", file="JPathExecuteTests.cs"];
m1_290 [label="Assert.AreEqual(1, (int)t[0])", span="492-492", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScan()", file="JPathExecuteTests.cs"];
m1_291 [label="Assert.AreEqual(2, (int)t[1])", span="493-493", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScan()", file="JPathExecuteTests.cs"];
m1_286 [label="JArray a = new JArray(o1, o2)", span="487-487", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScan()", file="JPathExecuteTests.cs"];
m1_288 [label="Assert.IsNotNull(t)", span="490-490", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScan()", file="JPathExecuteTests.cs"];
m1_284 [label="JObject o1 = new JObject { { ''Name'', 1 } }", span="485-485", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScan()", file="JPathExecuteTests.cs"];
m1_285 [label="JObject o2 = new JObject { { ''Name'', 2 } }", span="486-486", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScan()", file="JPathExecuteTests.cs"];
m1_292 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScan()", span="483-483", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScan()", file="JPathExecuteTests.cs"];
m1_71 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardProperty()", span="206-206", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardProperty()", file="JPathExecuteTests.cs"];
m1_72 [label="JObject o = new JObject(\r\n                new JProperty(''Blah'', 1),\r\n                new JProperty(''Blah2'', 2))", span="208-210", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardProperty()", file="JPathExecuteTests.cs"];
m1_73 [label="IList<JToken> t = o.SelectTokens(''$.*'').ToList()", span="212-212", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardProperty()", file="JPathExecuteTests.cs"];
m1_75 [label="Assert.AreEqual(2, t.Count)", span="214-214", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardProperty()", file="JPathExecuteTests.cs"];
m1_76 [label="Assert.AreEqual(1, (int)t[0])", span="215-215", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardProperty()", file="JPathExecuteTests.cs"];
m1_77 [label="Assert.AreEqual(2, (int)t[1])", span="216-216", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardProperty()", file="JPathExecuteTests.cs"];
m1_74 [label="Assert.IsNotNull(t)", span="213-213", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardProperty()", file="JPathExecuteTests.cs"];
m1_78 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardProperty()", span="206-206", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardProperty()", file="JPathExecuteTests.cs"];
m1_309 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScanNestResults()", span="514-514", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScanNestResults()", file="JPathExecuteTests.cs"];
m1_314 [label="IList<JToken> t = a.SelectTokens(''$..Name'').ToList()", span="521-521", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScanNestResults()", file="JPathExecuteTests.cs"];
m1_316 [label="Assert.AreEqual(4, t.Count)", span="523-523", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScanNestResults()", file="JPathExecuteTests.cs"];
m1_317 [label="Assert.AreEqual(1, (int)t[0])", span="524-524", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScanNestResults()", file="JPathExecuteTests.cs"];
m1_318 [label="Assert.AreEqual(2, (int)t[1])", span="525-525", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScanNestResults()", file="JPathExecuteTests.cs"];
m1_313 [label="JArray a = new JArray(o1, o2, o3)", span="519-519", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScanNestResults()", file="JPathExecuteTests.cs"];
m1_315 [label="Assert.IsNotNull(t)", span="522-522", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScanNestResults()", file="JPathExecuteTests.cs"];
m1_319 [label="Assert.IsTrue(JToken.DeepEquals(new JObject { { ''Name'', new JArray(3) } }, t[2]))", span="526-526", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScanNestResults()", file="JPathExecuteTests.cs"];
m1_320 [label="Assert.IsTrue(JToken.DeepEquals(new JArray(3), t[3]))", span="527-527", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScanNestResults()", file="JPathExecuteTests.cs"];
m1_312 [label="JObject o3 = new JObject { { ''Name'', new JObject { { ''Name'', new JArray(3) } } } }", span="518-518", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScanNestResults()", file="JPathExecuteTests.cs"];
m1_310 [label="JObject o1 = new JObject { { ''Name'', 1 } }", span="516-516", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScanNestResults()", file="JPathExecuteTests.cs"];
m1_311 [label="JObject o2 = new JObject { { ''Name'', 2 } }", span="517-517", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScanNestResults()", file="JPathExecuteTests.cs"];
m1_321 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScanNestResults()", span="514-514", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScanNestResults()", file="JPathExecuteTests.cs"];
m1_0 [label="Entry Newtonsoft.Json.Serialization.JsonContract.InvokeOnSerializing(object, System.Runtime.Serialization.StreamingContext)", span="124-124", cluster="Newtonsoft.Json.Serialization.JsonContract.InvokeOnSerializing(object, System.Runtime.Serialization.StreamingContext)", file="JPathExecuteTests.cs"];
m1_3 [label="Exit Newtonsoft.Json.Serialization.JsonContract.InvokeOnSerializing(object, System.Runtime.Serialization.StreamingContext)", span="124-124", cluster="Newtonsoft.Json.Serialization.JsonContract.InvokeOnSerializing(object, System.Runtime.Serialization.StreamingContext)", file="JPathExecuteTests.cs"];
m1_5 [label="Entry Newtonsoft.Json.Serialization.JsonContract.InvokeOnSerialized(object, System.Runtime.Serialization.StreamingContext)", span="132-132", cluster="Newtonsoft.Json.Serialization.JsonContract.InvokeOnSerialized(object, System.Runtime.Serialization.StreamingContext)", file="JPathExecuteTests.cs"];
m1_6 [label="OnSerialized != null", span="135-135", cluster="Newtonsoft.Json.Serialization.JsonContract.InvokeOnSerialized(object, System.Runtime.Serialization.StreamingContext)", file="JPathExecuteTests.cs"];
m1_7 [label="OnSerialized.Invoke(o, new object[] {context})", span="136-136", cluster="Newtonsoft.Json.Serialization.JsonContract.InvokeOnSerialized(object, System.Runtime.Serialization.StreamingContext)", file="JPathExecuteTests.cs"];
m1_2 [label="OnSerializing.Invoke(o, new object[] {context})", span="128-128", cluster="Newtonsoft.Json.Serialization.JsonContract.InvokeOnSerializing(object, System.Runtime.Serialization.StreamingContext)", file="JPathExecuteTests.cs"];
m1_1 [label="OnSerializing != null", span="127-127", cluster="Newtonsoft.Json.Serialization.JsonContract.InvokeOnSerializing(object, System.Runtime.Serialization.StreamingContext)", file="JPathExecuteTests.cs"];
m1_8 [label="Exit Newtonsoft.Json.Serialization.JsonContract.InvokeOnSerialized(object, System.Runtime.Serialization.StreamingContext)", span="132-132", cluster="Newtonsoft.Json.Serialization.JsonContract.InvokeOnSerialized(object, System.Runtime.Serialization.StreamingContext)", file="JPathExecuteTests.cs"];
m1_38 [label="Assert.AreEqual(o, t)", span="147-147", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyString()", file="JPathExecuteTests.cs"];
m1_293 [label="Entry Newtonsoft.Json.Linq.JObject.JObject()", span="87-87", cluster="Newtonsoft.Json.Linq.JObject.JObject()", file="JPathExecuteTests.cs"];
m1_13 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.SelectTokenAfterEmptyContainer()", span="104-104", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.SelectTokenAfterEmptyContainer()", file="JPathExecuteTests.cs"];
m1_14 [label="string json = @''{\r\n    'cont': [],\r\n    'test': 'no one will find me'\r\n}''", span="106-109", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.SelectTokenAfterEmptyContainer()", file="JPathExecuteTests.cs"];
m1_15 [label="JObject o = JObject.Parse(json)", span="111-111", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.SelectTokenAfterEmptyContainer()", file="JPathExecuteTests.cs"];
m1_16 [label="IList<JToken> results = o.SelectTokens(''$..test'').ToList()", span="113-113", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.SelectTokenAfterEmptyContainer()", file="JPathExecuteTests.cs"];
m1_281 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", file="JPathExecuteTests.cs"];
m1_20 [label="Exit Newtonsoft.Json.Serialization.JsonContract.InvokeOnError(object, System.Runtime.Serialization.StreamingContext, Newtonsoft.Json.Serialization.ErrorContext)", span="156-156", cluster="Newtonsoft.Json.Serialization.JsonContract.InvokeOnError(object, System.Runtime.Serialization.StreamingContext, Newtonsoft.Json.Serialization.ErrorContext)", file="JPathExecuteTests.cs"];
m1_24 [label="CreatedType = underlyingType", span="167-167", cluster="Newtonsoft.Json.Serialization.JsonContract.JsonContract(System.Type)", file="JPathExecuteTests.cs"];
m1_23 [label="UnderlyingType = underlyingType", span="166-166", cluster="Newtonsoft.Json.Serialization.JsonContract.JsonContract(System.Type)", file="JPathExecuteTests.cs"];
m1_22 [label="ValidationUtils.ArgumentNotNull(underlyingType, ''underlyingType'')", span="164-164", cluster="Newtonsoft.Json.Serialization.JsonContract.JsonContract(System.Type)", file="JPathExecuteTests.cs"];
m1_21 [label="Entry Newtonsoft.Json.Serialization.JsonContract.JsonContract(System.Type)", span="162-162", cluster="Newtonsoft.Json.Serialization.JsonContract.JsonContract(System.Type)", file="JPathExecuteTests.cs"];
m1_25 [label="IsNullable = ReflectionUtils.IsNullable(underlyingType)", span="169-169", cluster="Newtonsoft.Json.Serialization.JsonContract.JsonContract(System.Type)", file="JPathExecuteTests.cs"];
m1_17 [label="Assert.AreEqual(1, results.Count)", span="115-115", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.SelectTokenAfterEmptyContainer()", file="JPathExecuteTests.cs"];
m1_18 [label="Assert.AreEqual(''no one will find me'', (string)results[0])", span="116-116", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.SelectTokenAfterEmptyContainer()", file="JPathExecuteTests.cs"];
m1_19 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.SelectTokenAfterEmptyContainer()", span="104-104", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.SelectTokenAfterEmptyContainer()", file="JPathExecuteTests.cs"];
m1_210 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayOutOfBoundsIndxerWithError()", span="389-389", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayOutOfBoundsIndxerWithError()", file="JPathExecuteTests.cs"];
m1_211 [label="JArray a = new JArray(1, 2, 3, 4, 5)", span="391-391", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayOutOfBoundsIndxerWithError()", file="JPathExecuteTests.cs"];
m1_212 [label="ExceptionAssert.Throws<JsonException>(() => { a.SelectToken(''[1000].Ha'', true); }, ''Index 1000 outside the bounds of JArray.'')", span="393-393", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayOutOfBoundsIndxerWithError()", file="JPathExecuteTests.cs"];
m1_213 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayOutOfBoundsIndxerWithError()", span="389-389", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayOutOfBoundsIndxerWithError()", file="JPathExecuteTests.cs"];
m1_205 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateOutOfBoundsIndxer()", span="380-380", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateOutOfBoundsIndxer()", file="JPathExecuteTests.cs"];
m1_206 [label="JArray a = new JArray(1, 2, 3, 4, 5)", span="382-382", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateOutOfBoundsIndxer()", file="JPathExecuteTests.cs"];
m1_207 [label="JToken t = a.SelectToken(''[1000].Ha'')", span="384-384", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateOutOfBoundsIndxer()", file="JPathExecuteTests.cs"];
m1_208 [label="Assert.IsNull(t)", span="385-385", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateOutOfBoundsIndxer()", file="JPathExecuteTests.cs"];
m1_209 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateOutOfBoundsIndxer()", span="380-380", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateOutOfBoundsIndxer()", file="JPathExecuteTests.cs"];
m1_456 [label="Entry JArray.cstr", span="", cluster="JArray.cstr", file="JPathExecuteTests.cs"];
m1_80 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QuoteName()", span="220-220", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QuoteName()", file="JPathExecuteTests.cs"];
m1_81 [label="JObject o = new JObject(\r\n                new JProperty(''Blah'', 1))", span="222-223", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QuoteName()", file="JPathExecuteTests.cs"];
m1_82 [label="JToken t = o.SelectToken(''['Blah']'')", span="225-225", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QuoteName()", file="JPathExecuteTests.cs"];
m1_84 [label="Assert.AreEqual(JTokenType.Integer, t.Type)", span="227-227", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QuoteName()", file="JPathExecuteTests.cs"];
m1_85 [label="Assert.AreEqual(1, (int)t)", span="228-228", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QuoteName()", file="JPathExecuteTests.cs"];
m1_83 [label="Assert.IsNotNull(t)", span="226-226", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QuoteName()", file="JPathExecuteTests.cs"];
m1_86 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QuoteName()", span="220-220", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QuoteName()", file="JPathExecuteTests.cs"];
m1_33 [label="InternalReadType = ReadType.ReadAsDateTimeOffset", span="186-186", cluster="Newtonsoft.Json.Serialization.JsonContract.JsonContract(System.Type)", file="JPathExecuteTests.cs"];
m1_170 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingPropertyIndexWithError()", span="347-347", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingPropertyIndexWithError()", file="JPathExecuteTests.cs"];
m1_171 [label="JObject o = new JObject(\r\n                new JProperty(''Blah'', 1))", span="349-350", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingPropertyIndexWithError()", file="JPathExecuteTests.cs"];
m1_172 [label="ExceptionAssert.Throws<JsonException>(() => { o.SelectToken(''['Missing','Missing2']'', true); }, ''Property 'Missing' does not exist on JObject.'')", span="352-352", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingPropertyIndexWithError()", file="JPathExecuteTests.cs"];
m1_173 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingPropertyIndexWithError()", span="347-347", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingPropertyIndexWithError()", file="JPathExecuteTests.cs"];
m1_42 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyStringWithMatchingEmptyProperty()", span="154-154", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyStringWithMatchingEmptyProperty()", file="JPathExecuteTests.cs"];
m1_43 [label="JObject o = new JObject(\r\n                new JProperty('' '', 1))", span="156-157", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyStringWithMatchingEmptyProperty()", file="JPathExecuteTests.cs"];
m1_44 [label="JToken t = o.SelectToken(''[' ']'')", span="159-159", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyStringWithMatchingEmptyProperty()", file="JPathExecuteTests.cs"];
m1_45 [label="Assert.AreEqual(1, (int)t)", span="160-160", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyStringWithMatchingEmptyProperty()", file="JPathExecuteTests.cs"];
m1_46 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyStringWithMatchingEmptyProperty()", span="154-154", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyStringWithMatchingEmptyProperty()", file="JPathExecuteTests.cs"];
m1_282 [label="Entry System.Collections.Generic.IEnumerable<TSource>.ElementAt<TSource>(int)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.ElementAt<TSource>(int)", file="JPathExecuteTests.cs"];
m1_362 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EqualsQuery()", span="589-589", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EqualsQuery()", file="JPathExecuteTests.cs"];
m1_363 [label="JArray a = new JArray(\r\n                new JObject(new JProperty(''hi'', ''ho'')),\r\n                new JObject(new JProperty(''hi'', ''ha'')))", span="591-593", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EqualsQuery()", file="JPathExecuteTests.cs"];
m1_367 [label="Assert.IsTrue(JToken.DeepEquals(new JObject(new JProperty(''hi'', ''ha'')), t[0]))", span="598-598", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EqualsQuery()", file="JPathExecuteTests.cs"];
m1_364 [label="IList<JToken> t = a.SelectTokens(''[ ?( @.['hi'] == 'ha' ) ]'').ToList()", span="595-595", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EqualsQuery()", file="JPathExecuteTests.cs"];
m1_366 [label="Assert.AreEqual(1, t.Count)", span="597-597", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EqualsQuery()", file="JPathExecuteTests.cs"];
m1_365 [label="Assert.IsNotNull(t)", span="596-596", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EqualsQuery()", file="JPathExecuteTests.cs"];
m1_368 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EqualsQuery()", span="589-589", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EqualsQuery()", file="JPathExecuteTests.cs"];
m1_63 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSingleProperty()", span="194-194", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSingleProperty()", file="JPathExecuteTests.cs"];
m1_64 [label="JObject o = new JObject(\r\n                new JProperty(''Blah'', 1))", span="196-197", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSingleProperty()", file="JPathExecuteTests.cs"];
m1_65 [label="JToken t = o.SelectToken(''Blah'')", span="199-199", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSingleProperty()", file="JPathExecuteTests.cs"];
m1_67 [label="Assert.AreEqual(JTokenType.Integer, t.Type)", span="201-201", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSingleProperty()", file="JPathExecuteTests.cs"];
m1_68 [label="Assert.AreEqual(1, (int)t)", span="202-202", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSingleProperty()", file="JPathExecuteTests.cs"];
m1_66 [label="Assert.IsNotNull(t)", span="200-200", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSingleProperty()", file="JPathExecuteTests.cs"];
m1_69 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSingleProperty()", span="194-194", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSingleProperty()", file="JPathExecuteTests.cs"];
m1_294 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScan()", span="497-497", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScan()", file="JPathExecuteTests.cs"];
m1_298 [label="IList<JToken> t = a.SelectTokens(''$..*'').ToList()", span="503-503", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScan()", file="JPathExecuteTests.cs"];
m1_300 [label="Assert.AreEqual(5, t.Count)", span="505-505", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScan()", file="JPathExecuteTests.cs"];
m1_303 [label="Assert.AreEqual(1, (int)t[2])", span="508-508", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScan()", file="JPathExecuteTests.cs"];
m1_305 [label="Assert.AreEqual(2, (int)t[4])", span="510-510", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScan()", file="JPathExecuteTests.cs"];
m1_297 [label="JArray a = new JArray(o1, o2)", span="501-501", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScan()", file="JPathExecuteTests.cs"];
m1_299 [label="Assert.IsNotNull(t)", span="504-504", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScan()", file="JPathExecuteTests.cs"];
m1_301 [label="Assert.IsTrue(JToken.DeepEquals(a, t[0]))", span="506-506", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScan()", file="JPathExecuteTests.cs"];
m1_302 [label="Assert.IsTrue(JToken.DeepEquals(o1, t[1]))", span="507-507", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScan()", file="JPathExecuteTests.cs"];
m1_304 [label="Assert.IsTrue(JToken.DeepEquals(o2, t[3]))", span="509-509", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScan()", file="JPathExecuteTests.cs"];
m1_295 [label="JObject o1 = new JObject { { ''Name'', 1 } }", span="499-499", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScan()", file="JPathExecuteTests.cs"];
m1_296 [label="JObject o2 = new JObject { { ''Name'', 2 } }", span="500-500", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScan()", file="JPathExecuteTests.cs"];
m1_306 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScan()", span="497-497", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScan()", file="JPathExecuteTests.cs"];
m1_398 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQueryBigInteger()", span="656-656", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQueryBigInteger()", file="JPathExecuteTests.cs"];
m1_399 [label="JArray a = new JArray(\r\n                new JObject(new JProperty(''hi'', new BigInteger(1))),\r\n                new JObject(new JProperty(''hi'', new BigInteger(2))),\r\n                new JObject(new JProperty(''hi'', new BigInteger(3))))", span="658-661", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQueryBigInteger()", file="JPathExecuteTests.cs"];
m1_403 [label="Assert.IsTrue(JToken.DeepEquals(new JObject(new JProperty(''hi'', 2)), t[0]))", span="666-666", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQueryBigInteger()", file="JPathExecuteTests.cs"];
m1_404 [label="Assert.IsTrue(JToken.DeepEquals(new JObject(new JProperty(''hi'', 3)), t[1]))", span="667-667", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQueryBigInteger()", file="JPathExecuteTests.cs"];
m1_400 [label="IList<JToken> t = a.SelectTokens(''[ ?( @.hi > 1 ) ]'').ToList()", span="663-663", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQueryBigInteger()", file="JPathExecuteTests.cs"];
m1_402 [label="Assert.AreEqual(2, t.Count)", span="665-665", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQueryBigInteger()", file="JPathExecuteTests.cs"];
m1_401 [label="Assert.IsNotNull(t)", span="664-664", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQueryBigInteger()", file="JPathExecuteTests.cs"];
m1_405 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQueryBigInteger()", span="656-656", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQueryBigInteger()", file="JPathExecuteTests.cs"];
m1_322 [label="Entry Newtonsoft.Json.Linq.JArray.JArray(object)", span="91-91", cluster="Newtonsoft.Json.Linq.JArray.JArray(object)", file="JPathExecuteTests.cs"];
m1_57 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateDollarTypeString()", span="184-184", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateDollarTypeString()", file="JPathExecuteTests.cs"];
m1_58 [label="JObject o = new JObject(\r\n                new JProperty(''$values'', new JArray(1, 2, 3)))", span="186-187", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateDollarTypeString()", file="JPathExecuteTests.cs"];
m1_59 [label="JToken t = o.SelectToken(''$values[1]'')", span="189-189", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateDollarTypeString()", file="JPathExecuteTests.cs"];
m1_60 [label="Assert.AreEqual(2, (int)t)", span="190-190", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateDollarTypeString()", file="JPathExecuteTests.cs"];
m1_61 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateDollarTypeString()", span="184-184", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateDollarTypeString()", file="JPathExecuteTests.cs"];
m1_262 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardArray()", span="456-456", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardArray()", file="JPathExecuteTests.cs"];
m1_264 [label="List<JToken> t = a.SelectTokens(''[*]'').ToList()", span="460-460", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardArray()", file="JPathExecuteTests.cs"];
m1_266 [label="Assert.AreEqual(4, t.Count)", span="462-462", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardArray()", file="JPathExecuteTests.cs"];
m1_267 [label="Assert.AreEqual(1, (int)t[0])", span="463-463", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardArray()", file="JPathExecuteTests.cs"];
m1_268 [label="Assert.AreEqual(2, (int)t[1])", span="464-464", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardArray()", file="JPathExecuteTests.cs"];
m1_269 [label="Assert.AreEqual(3, (int)t[2])", span="465-465", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardArray()", file="JPathExecuteTests.cs"];
m1_270 [label="Assert.AreEqual(4, (int)t[3])", span="466-466", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardArray()", file="JPathExecuteTests.cs"];
m1_263 [label="JArray a = new JArray(1, 2, 3, 4)", span="458-458", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardArray()", file="JPathExecuteTests.cs"];
m1_265 [label="Assert.IsNotNull(t)", span="461-461", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardArray()", file="JPathExecuteTests.cs"];
m1_271 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardArray()", span="456-456", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardArray()", file="JPathExecuteTests.cs"];
m1_165 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyWithoutError()", span="337-337", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyWithoutError()", file="JPathExecuteTests.cs"];
m1_166 [label="JObject o = new JObject(\r\n                new JProperty(''Blah'', 1))", span="339-340", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyWithoutError()", file="JPathExecuteTests.cs"];
m1_167 [label="JValue v = (JValue)o.SelectToken(''Blah'', true)", span="342-342", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyWithoutError()", file="JPathExecuteTests.cs"];
m1_168 [label="Assert.AreEqual(1, v.Value)", span="343-343", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyWithoutError()", file="JPathExecuteTests.cs"];
m1_169 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyWithoutError()", span="337-337", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyWithoutError()", file="JPathExecuteTests.cs"];
m1_146 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateConstructorOutOfBoundsIndxerWithError()", span="312-312", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateConstructorOutOfBoundsIndxerWithError()", file="JPathExecuteTests.cs"];
m1_148 [label="ExceptionAssert.Throws<JsonException>(() => { c.SelectToken(''[1]'', true); }, @''Index 1 outside the bounds of JConstructor.'')", span="316-316", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateConstructorOutOfBoundsIndxerWithError()", file="JPathExecuteTests.cs"];
m1_147 [label="JConstructor c = new JConstructor(''Blah'')", span="314-314", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateConstructorOutOfBoundsIndxerWithError()", file="JPathExecuteTests.cs"];
m1_149 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateConstructorOutOfBoundsIndxerWithError()", span="312-312", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateConstructorOutOfBoundsIndxerWithError()", file="JPathExecuteTests.cs"];
m1_341 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSinglePropertyReturningArray()", span="554-554", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSinglePropertyReturningArray()", file="JPathExecuteTests.cs"];
m1_342 [label="JObject o = new JObject(\r\n                new JProperty(''Blah'', new[] { 1, 2, 3 }))", span="556-557", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSinglePropertyReturningArray()", file="JPathExecuteTests.cs"];
m1_343 [label="JToken t = o.SelectToken(''Blah'')", span="559-559", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSinglePropertyReturningArray()", file="JPathExecuteTests.cs"];
m1_346 [label="t = o.SelectToken(''Blah[2]'')", span="563-563", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSinglePropertyReturningArray()", file="JPathExecuteTests.cs"];
m1_345 [label="Assert.AreEqual(JTokenType.Array, t.Type)", span="561-561", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSinglePropertyReturningArray()", file="JPathExecuteTests.cs"];
m1_347 [label="Assert.AreEqual(JTokenType.Integer, t.Type)", span="564-564", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSinglePropertyReturningArray()", file="JPathExecuteTests.cs"];
m1_348 [label="Assert.AreEqual(3, (int)t)", span="565-565", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSinglePropertyReturningArray()", file="JPathExecuteTests.cs"];
m1_344 [label="Assert.IsNotNull(t)", span="560-560", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSinglePropertyReturningArray()", file="JPathExecuteTests.cs"];
m1_349 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSinglePropertyReturningArray()", span="554-554", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSinglePropertyReturningArray()", file="JPathExecuteTests.cs"];
m1_390 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQuery()", span="640-640", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQuery()", file="JPathExecuteTests.cs"];
m1_391 [label="JArray a = new JArray(\r\n                new JObject(new JProperty(''hi'', 1)),\r\n                new JObject(new JProperty(''hi'', 2)),\r\n                new JObject(new JProperty(''hi'', 3)))", span="642-645", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQuery()", file="JPathExecuteTests.cs"];
m1_395 [label="Assert.IsTrue(JToken.DeepEquals(new JObject(new JProperty(''hi'', 2)), t[0]))", span="650-650", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQuery()", file="JPathExecuteTests.cs"];
m1_396 [label="Assert.IsTrue(JToken.DeepEquals(new JObject(new JProperty(''hi'', 3)), t[1]))", span="651-651", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQuery()", file="JPathExecuteTests.cs"];
m1_392 [label="IList<JToken> t = a.SelectTokens(''[ ?( @.hi > 1 ) ]'').ToList()", span="647-647", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQuery()", file="JPathExecuteTests.cs"];
m1_394 [label="Assert.AreEqual(2, t.Count)", span="649-649", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQuery()", file="JPathExecuteTests.cs"];
m1_393 [label="Assert.IsNotNull(t)", span="648-648", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQuery()", file="JPathExecuteTests.cs"];
m1_397 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQuery()", span="640-640", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQuery()", file="JPathExecuteTests.cs"];
m1_150 [label="Entry Newtonsoft.Json.Linq.JConstructor.JConstructor(string)", span="122-122", cluster="Newtonsoft.Json.Linq.JConstructor.JConstructor(string)", file="JPathExecuteTests.cs"];
m1_457 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="JPathExecuteTests.cs"];
m1_39 [label="t = o.SelectToken(''['']'')", span="149-149", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyString()", file="JPathExecuteTests.cs"];
m1_52 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateDollarString()", span="174-174", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateDollarString()", file="JPathExecuteTests.cs"];
m1_53 [label="JObject o = new JObject(\r\n                new JProperty(''Blah'', 1))", span="176-177", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateDollarString()", file="JPathExecuteTests.cs"];
m1_54 [label="JToken t = o.SelectToken(''$'')", span="179-179", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateDollarString()", file="JPathExecuteTests.cs"];
m1_55 [label="Assert.AreEqual(o, t)", span="180-180", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateDollarString()", file="JPathExecuteTests.cs"];
m1_56 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateDollarString()", span="174-174", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateDollarString()", file="JPathExecuteTests.cs"];
m1_87 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingProperty()", span="232-232", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingProperty()", file="JPathExecuteTests.cs"];
m1_88 [label="JObject o = new JObject(\r\n                new JProperty(''Blah'', 1))", span="234-235", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingProperty()", file="JPathExecuteTests.cs"];
m1_89 [label="JToken t = o.SelectToken(''Missing[1]'')", span="237-237", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingProperty()", file="JPathExecuteTests.cs"];
m1_90 [label="Assert.IsNull(t)", span="238-238", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingProperty()", file="JPathExecuteTests.cs"];
m1_91 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingProperty()", span="232-232", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingProperty()", file="JPathExecuteTests.cs"];
m1_34 [label="InternalReadType = ReadType.Read", span="191-191", cluster="Newtonsoft.Json.Serialization.JsonContract.JsonContract(System.Type)", file="JPathExecuteTests.cs"];
m1_139 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateNoResultsWithMultipleArrayIndexes()", span="304-304", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateNoResultsWithMultipleArrayIndexes()", file="JPathExecuteTests.cs"];
m1_140 [label="JArray a = new JArray(1, 2, 3, 4, 5)", span="306-306", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateNoResultsWithMultipleArrayIndexes()", file="JPathExecuteTests.cs"];
m1_141 [label="ExceptionAssert.Throws<JsonException>(() => { a.SelectToken(''[9,10]'', true); }, @''Index 9 outside the bounds of JArray.'')", span="308-308", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateNoResultsWithMultipleArrayIndexes()", file="JPathExecuteTests.cs"];
m1_142 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateNoResultsWithMultipleArrayIndexes()", span="304-304", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateNoResultsWithMultipleArrayIndexes()", file="JPathExecuteTests.cs"];
m1_26 [label="Entry Newtonsoft.Json.Linq.JToken.SelectToken(string, bool)", span="2003-2003", cluster="Newtonsoft.Json.Linq.JToken.SelectToken(string, bool)", file="JPathExecuteTests.cs"];
m1_27 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyPropertyIndexer()", span="131-131", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyPropertyIndexer()", file="JPathExecuteTests.cs"];
m1_28 [label="JObject o = new JObject(\r\n                new JProperty('''', 1))", span="133-134", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyPropertyIndexer()", file="JPathExecuteTests.cs"];
m1_29 [label="JToken t = o.SelectToken(''['']'')", span="136-136", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyPropertyIndexer()", file="JPathExecuteTests.cs"];
m1_30 [label="Assert.AreEqual(1, (int)t)", span="137-137", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyPropertyIndexer()", file="JPathExecuteTests.cs"];
m1_31 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyPropertyIndexer()", span="131-131", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyPropertyIndexer()", file="JPathExecuteTests.cs"];
m1_35 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyString()", span="141-141", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyString()", file="JPathExecuteTests.cs"];
m1_408 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterOrEqualQuery()", span="672-672", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterOrEqualQuery()", file="JPathExecuteTests.cs"];
m1_409 [label="JArray a = new JArray(\r\n                new JObject(new JProperty(''hi'', 1)),\r\n                new JObject(new JProperty(''hi'', 2)),\r\n                new JObject(new JProperty(''hi'', 2.0)),\r\n                new JObject(new JProperty(''hi'', 3)))", span="674-678", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterOrEqualQuery()", file="JPathExecuteTests.cs"];
m1_413 [label="Assert.IsTrue(JToken.DeepEquals(new JObject(new JProperty(''hi'', 1)), t[0]))", span="683-683", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterOrEqualQuery()", file="JPathExecuteTests.cs"];
m1_414 [label="Assert.IsTrue(JToken.DeepEquals(new JObject(new JProperty(''hi'', 2)), t[1]))", span="684-684", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterOrEqualQuery()", file="JPathExecuteTests.cs"];
m1_415 [label="Assert.IsTrue(JToken.DeepEquals(new JObject(new JProperty(''hi'', 2.0)), t[2]))", span="685-685", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterOrEqualQuery()", file="JPathExecuteTests.cs"];
m1_416 [label="Assert.IsTrue(JToken.DeepEquals(new JObject(new JProperty(''hi'', 3)), t[3]))", span="686-686", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterOrEqualQuery()", file="JPathExecuteTests.cs"];
m1_410 [label="IList<JToken> t = a.SelectTokens(''[ ?( @.hi >= 1 ) ]'').ToList()", span="680-680", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterOrEqualQuery()", file="JPathExecuteTests.cs"];
m1_412 [label="Assert.AreEqual(4, t.Count)", span="682-682", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterOrEqualQuery()", file="JPathExecuteTests.cs"];
m1_411 [label="Assert.IsNotNull(t)", span="681-681", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterOrEqualQuery()", file="JPathExecuteTests.cs"];
m1_417 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterOrEqualQuery()", span="672-672", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterOrEqualQuery()", file="JPathExecuteTests.cs"];
m1_12 [label="Exit Newtonsoft.Json.Serialization.JsonContract.InvokeOnDeserializing(object, System.Runtime.Serialization.StreamingContext)", span="140-140", cluster="Newtonsoft.Json.Serialization.JsonContract.InvokeOnDeserializing(object, System.Runtime.Serialization.StreamingContext)", file="JPathExecuteTests.cs"];
m1_70 [label="Entry Unk.IsNotNull", span="", cluster="Unk.IsNotNull", file="JPathExecuteTests.cs"];
m1_37 [label="JToken t = o.SelectToken('''')", span="146-146", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyString()", file="JPathExecuteTests.cs"];
m1_452 [label="Entry System.DateTimeOffset.DateTimeOffset(int, int, int, int, int, int, System.TimeSpan)", span="0-0", cluster="System.DateTimeOffset.DateTimeOffset(int, int, int, int, int, int, System.TimeSpan)", file="JPathExecuteTests.cs"];
m1_40 [label="Assert.AreEqual(null, t)", span="150-150", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyString()", file="JPathExecuteTests.cs"];
m1_376 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NoPathQuery()", span="615-615", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NoPathQuery()", file="JPathExecuteTests.cs"];
m1_378 [label="IList<JToken> t = a.SelectTokens(''[ ?( @ > 1 ) ]'').ToList()", span="619-619", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NoPathQuery()", file="JPathExecuteTests.cs"];
m1_380 [label="Assert.AreEqual(2, t.Count)", span="621-621", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NoPathQuery()", file="JPathExecuteTests.cs"];
m1_381 [label="Assert.AreEqual(2, (int)t[0])", span="622-622", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NoPathQuery()", file="JPathExecuteTests.cs"];
m1_382 [label="Assert.AreEqual(3, (int)t[1])", span="623-623", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NoPathQuery()", file="JPathExecuteTests.cs"];
m1_377 [label="JArray a = new JArray(1, 2, 3)", span="617-617", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NoPathQuery()", file="JPathExecuteTests.cs"];
m1_379 [label="Assert.IsNotNull(t)", span="620-620", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NoPathQuery()", file="JPathExecuteTests.cs"];
m1_383 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NoPathQuery()", span="615-615", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NoPathQuery()", file="JPathExecuteTests.cs"];
m1_202 [label="Entry lambda expression", span="376-376", cluster="lambda expression", file="JPathExecuteTests.cs"];
m1_458 [label="Entry lambda expression", span="766-766", cluster="lambda expression", file="JPathExecuteTests.cs"];
m1_459 [label="new JObject(new JProperty(''childProp'', v))", span="766-766", cluster="lambda expression", file="JPathExecuteTests.cs"];
m1_460 [label="Exit lambda expression", span="766-766", cluster="lambda expression", file="JPathExecuteTests.cs"];
m1_104 [label="o.SelectToken(''[1]'', true)", span="257-257", cluster="lambda expression", file="JPathExecuteTests.cs"];
m1_111 [label="o.SelectToken(''[*]'', true)", span="266-266", cluster="lambda expression", file="JPathExecuteTests.cs"];
m1_118 [label="o.SelectToken(''[:]'', true)", span="275-275", cluster="lambda expression", file="JPathExecuteTests.cs"];
m1_163 [label="o.SelectToken(''Missing'', true)", span="333-333", cluster="lambda expression", file="JPathExecuteTests.cs"];
m1_175 [label="o.SelectToken(''['Missing','Missing2']'', true)", span="352-352", cluster="lambda expression", file="JPathExecuteTests.cs"];
m1_482 [label="Entry lambda expression", span="839-839", cluster="lambda expression", file="JPathExecuteTests.cs"];
m1_485 [label="Entry lambda expression", span="843-843", cluster="lambda expression", file="JPathExecuteTests.cs"];
m1_103 [label="Entry lambda expression", span="257-257", cluster="lambda expression", file="JPathExecuteTests.cs"];
m1_105 [label="Exit lambda expression", span="257-257", cluster="lambda expression", file="JPathExecuteTests.cs"];
m1_110 [label="Entry lambda expression", span="266-266", cluster="lambda expression", file="JPathExecuteTests.cs"];
m1_112 [label="Exit lambda expression", span="266-266", cluster="lambda expression", file="JPathExecuteTests.cs"];
m1_117 [label="Entry lambda expression", span="275-275", cluster="lambda expression", file="JPathExecuteTests.cs"];
m1_119 [label="Exit lambda expression", span="275-275", cluster="lambda expression", file="JPathExecuteTests.cs"];
m1_162 [label="Entry lambda expression", span="333-333", cluster="lambda expression", file="JPathExecuteTests.cs"];
m1_164 [label="Exit lambda expression", span="333-333", cluster="lambda expression", file="JPathExecuteTests.cs"];
m1_174 [label="Entry lambda expression", span="352-352", cluster="lambda expression", file="JPathExecuteTests.cs"];
m1_176 [label="Exit lambda expression", span="352-352", cluster="lambda expression", file="JPathExecuteTests.cs"];
m1_130 [label="a.SelectToken(''[0, 1]'')", span="292-292", cluster="lambda expression", file="JPathExecuteTests.cs"];
m1_486 [label="(string)m.SelectToken(''Products[1].Name'')", span="843-843", cluster="lambda expression", file="JPathExecuteTests.cs"];
m1_489 [label="(decimal)m.SelectToken(''Products[0].Price'')", span="847-847", cluster="lambda expression", file="JPathExecuteTests.cs"];
m1_484 [label="Exit lambda expression", span="839-839", cluster="lambda expression", file="JPathExecuteTests.cs"];
m1_483 [label="(string)s", span="839-839", cluster="lambda expression", file="JPathExecuteTests.cs"];
m1_488 [label="Entry lambda expression", span="847-847", cluster="lambda expression", file="JPathExecuteTests.cs"];
m1_487 [label="Exit lambda expression", span="843-843", cluster="lambda expression", file="JPathExecuteTests.cs"];
m1_137 [label="a.SelectToken(''BlahBlah'', true)", span="300-300", cluster="lambda expression", file="JPathExecuteTests.cs"];
m1_144 [label="a.SelectToken(''[9,10]'', true)", span="308-308", cluster="lambda expression", file="JPathExecuteTests.cs"];
m1_182 [label="a.SelectToken(''['Missing','Missing2']'', true)", span="360-360", cluster="lambda expression", file="JPathExecuteTests.cs"];
m1_194 [label="a.SelectToken(''[99:]'', true)", span="368-368", cluster="lambda expression", file="JPathExecuteTests.cs"];
m1_197 [label="a.SelectToken(''[1:-19]'', true)", span="370-370", cluster="lambda expression", file="JPathExecuteTests.cs"];
m1_200 [label="a.SelectToken(''[:-19]'', true)", span="372-372", cluster="lambda expression", file="JPathExecuteTests.cs"];
m1_215 [label="a.SelectToken(''[1000].Ha'', true)", span="393-393", cluster="lambda expression", file="JPathExecuteTests.cs"];
m1_152 [label="c.SelectToken(''[1]'', true)", span="316-316", cluster="lambda expression", file="JPathExecuteTests.cs"];
m1_203 [label="a.SelectToken(''[:]'', true)", span="376-376", cluster="lambda expression", file="JPathExecuteTests.cs"];
m1_129 [label="Entry lambda expression", span="292-292", cluster="lambda expression", file="JPathExecuteTests.cs"];
m1_131 [label="Exit lambda expression", span="292-292", cluster="lambda expression", file="JPathExecuteTests.cs"];
m1_490 [label="Exit lambda expression", span="847-847", cluster="lambda expression", file="JPathExecuteTests.cs"];
m1_136 [label="Entry lambda expression", span="300-300", cluster="lambda expression", file="JPathExecuteTests.cs"];
m1_138 [label="Exit lambda expression", span="300-300", cluster="lambda expression", file="JPathExecuteTests.cs"];
m1_143 [label="Entry lambda expression", span="308-308", cluster="lambda expression", file="JPathExecuteTests.cs"];
m1_145 [label="Exit lambda expression", span="308-308", cluster="lambda expression", file="JPathExecuteTests.cs"];
m1_181 [label="Entry lambda expression", span="360-360", cluster="lambda expression", file="JPathExecuteTests.cs"];
m1_183 [label="Exit lambda expression", span="360-360", cluster="lambda expression", file="JPathExecuteTests.cs"];
m1_193 [label="Entry lambda expression", span="368-368", cluster="lambda expression", file="JPathExecuteTests.cs"];
m1_195 [label="Exit lambda expression", span="368-368", cluster="lambda expression", file="JPathExecuteTests.cs"];
m1_196 [label="Entry lambda expression", span="370-370", cluster="lambda expression", file="JPathExecuteTests.cs"];
m1_198 [label="Exit lambda expression", span="370-370", cluster="lambda expression", file="JPathExecuteTests.cs"];
m1_199 [label="Entry lambda expression", span="372-372", cluster="lambda expression", file="JPathExecuteTests.cs"];
m1_201 [label="Exit lambda expression", span="372-372", cluster="lambda expression", file="JPathExecuteTests.cs"];
m1_214 [label="Entry lambda expression", span="393-393", cluster="lambda expression", file="JPathExecuteTests.cs"];
m1_216 [label="Exit lambda expression", span="393-393", cluster="lambda expression", file="JPathExecuteTests.cs"];
m1_151 [label="Entry lambda expression", span="316-316", cluster="lambda expression", file="JPathExecuteTests.cs"];
m1_153 [label="Exit lambda expression", span="316-316", cluster="lambda expression", file="JPathExecuteTests.cs"];
m1_204 [label="Exit lambda expression", span="376-376", cluster="lambda expression", file="JPathExecuteTests.cs"];
m1_272 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayMultipleIndexes()", span="470-470", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayMultipleIndexes()", file="JPathExecuteTests.cs"];
m1_274 [label="IEnumerable<JToken> t = a.SelectTokens(''[1,2,0]'')", span="474-474", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayMultipleIndexes()", file="JPathExecuteTests.cs"];
m1_276 [label="Assert.AreEqual(3, t.Count())", span="476-476", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayMultipleIndexes()", file="JPathExecuteTests.cs"];
m1_277 [label="Assert.AreEqual(2, (int)t.ElementAt(0))", span="477-477", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayMultipleIndexes()", file="JPathExecuteTests.cs"];
m1_278 [label="Assert.AreEqual(3, (int)t.ElementAt(1))", span="478-478", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayMultipleIndexes()", file="JPathExecuteTests.cs"];
m1_279 [label="Assert.AreEqual(1, (int)t.ElementAt(2))", span="479-479", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayMultipleIndexes()", file="JPathExecuteTests.cs"];
m1_273 [label="JArray a = new JArray(1, 2, 3, 4)", span="472-472", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayMultipleIndexes()", file="JPathExecuteTests.cs"];
m1_275 [label="Assert.IsNotNull(t)", span="475-475", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayMultipleIndexes()", file="JPathExecuteTests.cs"];
m1_280 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayMultipleIndexes()", span="470-470", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayMultipleIndexes()", file="JPathExecuteTests.cs"];
m1_192 [label="Entry Newtonsoft.Json.Linq.JArray.JArray()", span="65-65", cluster="Newtonsoft.Json.Linq.JArray.JArray()", file="JPathExecuteTests.cs"];
m1_455 [label="Entry System.TimeSpan.TimeSpan(int, int, int, int)", span="0-0", cluster="System.TimeSpan.TimeSpan(int, int, int, int)", file="JPathExecuteTests.cs"];
m1_11 [label="OnDeserializing.Invoke(o, new object[] {context})", span="144-144", cluster="Newtonsoft.Json.Serialization.JsonContract.InvokeOnDeserializing(object, System.Runtime.Serialization.StreamingContext)", file="JPathExecuteTests.cs"];
m1_406 [label="Entry JProperty.cstr", span="", cluster="JProperty.cstr", file="JPathExecuteTests.cs"];
m1_132 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyOnArrayWithError()", span="296-296", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyOnArrayWithError()", file="JPathExecuteTests.cs"];
m1_133 [label="JArray a = new JArray(1, 2, 3, 4, 5)", span="298-298", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyOnArrayWithError()", file="JPathExecuteTests.cs"];
m1_134 [label="ExceptionAssert.Throws<JsonException>(() => { a.SelectToken(''BlahBlah'', true); }, @''Property 'BlahBlah' not valid on JArray.'')", span="300-300", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyOnArrayWithError()", file="JPathExecuteTests.cs"];
m1_135 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyOnArrayWithError()", span="296-296", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyOnArrayWithError()", file="JPathExecuteTests.cs"];
m1_448 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="JPathExecuteTests.cs"];
m1_453 [label="Entry System.TimeSpan.FromHours(double)", span="0-0", cluster="System.TimeSpan.FromHours(double)", file="JPathExecuteTests.cs"];
m1_407 [label="Entry BigInteger.cstr", span="", cluster="BigInteger.cstr", file="JPathExecuteTests.cs"];
m1_113 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSliceOnObjectWithError()", span="270-270", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSliceOnObjectWithError()", file="JPathExecuteTests.cs"];
m1_114 [label="JObject o = new JObject(\r\n                new JProperty(''Blah'', 1))", span="272-273", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSliceOnObjectWithError()", file="JPathExecuteTests.cs"];
m1_115 [label="ExceptionAssert.Throws<JsonException>(() => { o.SelectToken(''[:]'', true); }, @''Array slice is not valid on JObject.'')", span="275-275", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSliceOnObjectWithError()", file="JPathExecuteTests.cs"];
m1_116 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSliceOnObjectWithError()", span="270-270", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSliceOnObjectWithError()", file="JPathExecuteTests.cs"];
m1_177 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMultiPropertyIndexOnArrayWithError()", span="356-356", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMultiPropertyIndexOnArrayWithError()", file="JPathExecuteTests.cs"];
m1_178 [label="JArray a = new JArray(1, 2, 3, 4, 5)", span="358-358", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMultiPropertyIndexOnArrayWithError()", file="JPathExecuteTests.cs"];
m1_179 [label="ExceptionAssert.Throws<JsonException>(() => { a.SelectToken(''['Missing','Missing2']'', true); }, ''Properties 'Missing', 'Missing2' not valid on JArray.'')", span="360-360", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMultiPropertyIndexOnArrayWithError()", file="JPathExecuteTests.cs"];
m1_180 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMultiPropertyIndexOnArrayWithError()", span="356-356", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMultiPropertyIndexOnArrayWithError()", file="JPathExecuteTests.cs"];
m1_307 [label="Entry Newtonsoft.Json.Linq.JToken.DeepEquals(Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken)", span="151-151", cluster="Newtonsoft.Json.Linq.JToken.DeepEquals(Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken)", file="JPathExecuteTests.cs"];
m1_106 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardIndexOnObjectWithError()", span="261-261", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardIndexOnObjectWithError()", file="JPathExecuteTests.cs"];
m1_107 [label="JObject o = new JObject(\r\n                new JProperty(''Blah'', 1))", span="263-264", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardIndexOnObjectWithError()", file="JPathExecuteTests.cs"];
m1_108 [label="ExceptionAssert.Throws<JsonException>(() => { o.SelectToken(''[*]'', true); }, @''Index * not valid on JObject.'')", span="266-266", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardIndexOnObjectWithError()", file="JPathExecuteTests.cs"];
m1_109 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardIndexOnObjectWithError()", span="261-261", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardIndexOnObjectWithError()", file="JPathExecuteTests.cs"];
m1_451 [label="Entry System.DateTime.DateTime(int, int, int, int, int, int, System.DateTimeKind)", span="0-0", cluster="System.DateTime.DateTime(int, int, int, int, int, int, System.DateTimeKind)", file="JPathExecuteTests.cs"];
m1_454 [label="Entry System.Text.Encoding.GetBytes(string)", span="0-0", cluster="System.Text.Encoding.GetBytes(string)", file="JPathExecuteTests.cs"];
m1_102 [label="Entry Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", span="358-358", cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", file="JPathExecuteTests.cs"];
m1_120 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyOnArray()", span="279-279", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyOnArray()", file="JPathExecuteTests.cs"];
m1_121 [label="JArray a = new JArray(1, 2, 3, 4, 5)", span="281-281", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyOnArray()", file="JPathExecuteTests.cs"];
m1_122 [label="JToken t = a.SelectToken(''BlahBlah'')", span="283-283", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyOnArray()", file="JPathExecuteTests.cs"];
m1_123 [label="Assert.IsNull(t)", span="284-284", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyOnArray()", file="JPathExecuteTests.cs"];
m1_124 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyOnArray()", span="279-279", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyOnArray()", file="JPathExecuteTests.cs"];
m1_41 [label="Newtonsoft.Json.Serialization.JsonContract", span="", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyString()", file="JPathExecuteTests.cs"];
m1_491 [label=o, span="", file="JPathExecuteTests.cs"];
m1_492 [label=o, span="", file="JPathExecuteTests.cs"];
m1_493 [label=o, span="", file="JPathExecuteTests.cs"];
m1_498 [label=o, span="", file="JPathExecuteTests.cs"];
m1_499 [label=o, span="", file="JPathExecuteTests.cs"];
m1_494 [label=a, span="", file="JPathExecuteTests.cs"];
m1_495 [label=a, span="", file="JPathExecuteTests.cs"];
m1_496 [label=a, span="", file="JPathExecuteTests.cs"];
m1_500 [label=a, span="", file="JPathExecuteTests.cs"];
m1_501 [label=a, span="", file="JPathExecuteTests.cs"];
m1_502 [label=a, span="", file="JPathExecuteTests.cs"];
m1_497 [label=c, span="", file="JPathExecuteTests.cs"];
d304 -> d305  [key=0, style=solid, color=green];
d304 -> d312  [key=0, style=solid, color=green];
d293 -> d304  [key=1, style=dashed, color=green, label="char[]"];
d293 -> d294  [key=0, style=solid];
d293 -> d295  [key=1, style=dashed, color=darkseagreen4, label=int];
d293 -> d297  [key=1, style=dashed, color=darkseagreen4, label="char[]"];
d293 -> d299  [key=1, style=dashed, color=darkseagreen4, label=int];
d293 -> d301  [key=1, style=dashed, color=darkseagreen4, label=int];
d293 -> d302  [key=1, style=dashed, color=darkseagreen4, label=int];
d293 -> d303  [key=1, style=dashed, color=darkseagreen4, label=int];
d293 -> d305  [key=1, style=dashed, color=darkseagreen4, label=int];
d293 -> d307  [key=1, style=dashed, color=darkseagreen4, label="char[]"];
d293 -> d312  [key=1, style=dashed, color=darkseagreen4, label=int];
d293 -> d314  [key=1, style=dashed, color=darkseagreen4, label="char[]"];
d293 -> d321  [key=1, style=dashed, color=darkseagreen4, label="char[]"];
d293 -> d210  [key=3, color=darkorchid, style=bold, label="method methodReturn Newtonsoft.Json.Utilities.ParseResult Int32TryParse"];
d293 -> d208  [key=3, color=darkorchid, style=bold, label="method methodReturn Newtonsoft.Json.Utilities.ParseResult Int32TryParse"];
d293 -> d19  [key=3, color=darkorchid, style=bold, label="method methodReturn Newtonsoft.Json.Utilities.ParseResult Int32TryParse"];
d293 -> d317  [key=3, color=darkorchid, style=bold, label="Parameter variable int value"];
d301 -> d304  [key=1, style=dashed, color=green, label=int];
d301 -> d301  [key=1, style=dashed, color=darkseagreen4, label=int];
d301 -> d302  [key=0, style=solid];
d301 -> d303  [key=1, style=dashed, color=darkseagreen4, label=int];
d301 -> d305  [key=1, style=dashed, color=darkseagreen4, label=int];
d301 -> d312  [key=1, style=dashed, color=darkseagreen4, label=int];
d302 -> d304  [key=1, style=dashed, color=green, label=int];
d302 -> d302  [key=1, style=dashed, color=darkseagreen4, label=int];
d302 -> d303  [key=0, style=solid];
d303 -> d304  [key=0, style=solid, color=green];
d303 -> d306  [key=1, style=dashed, color=darkseagreen4, label=end];
d303 -> d313  [key=1, style=dashed, color=darkseagreen4, label=end];
d303 -> d320  [key=1, style=dashed, color=darkseagreen4, label=end];
d305 -> d293  [key=3, color=darkorchid, style=bold, label="Local variable int i"];
d305 -> d306  [key=0, style=solid];
d305 -> d307  [key=1, style=dashed, color=darkseagreen4, label=i];
d305 -> d310  [key=1, style=dashed, color=darkseagreen4, label=i];
d312 -> d293  [key=3, color=darkorchid, style=bold, label="Local variable int i"];
d312 -> d313  [key=0, style=solid];
d312 -> d314  [key=1, style=dashed, color=darkseagreen4, label=i];
d312 -> d319  [key=1, style=dashed, color=darkseagreen4, label=i];
d312 -> d327  [key=1, style=dashed, color=darkseagreen4, label=i];
d333 -> d293  [key=0, style=bold, color=blue];
d294 -> d333  [key=1, style=dashed, color=darkseagreen4, label="out int"];
d294 -> d295  [key=0, style=solid];
d294 -> d317  [key=1, style=dashed, color=darkseagreen4, label="out int"];
d294 -> d318  [key=1, style=dashed, color=darkseagreen4, label="out int"];
d294 -> d329  [key=1, style=dashed, color=darkseagreen4, label="out int"];
d294 -> d331  [key=1, style=dashed, color=darkseagreen4, label="out int"];
d295 -> d296  [key=0, style=solid];
d295 -> d297  [key=0, style=solid];
d297 -> d298  [key=0, style=solid];
d297 -> d328  [key=1, style=dashed, color=darkseagreen4, label=isNegative];
d299 -> d301  [key=0, style=solid];
d299 -> d300  [key=0, style=solid];
d307 -> d308  [key=0, style=solid];
d314 -> d315  [key=0, style=solid];
d314 -> d317  [key=1, style=dashed, color=darkseagreen4, label=c];
d321 -> d322  [key=0, style=solid];
d210 -> d211  [key=0, style=solid];
d208 -> d211  [key=0, style=solid];
d19 -> d20  [key=0, style=solid];
d317 -> d318  [key=0, style=solid];
d317 -> d326  [key=1, style=dashed, color=darkseagreen4, label=newValue];
d298 -> d303  [key=0, style=solid];
d298 -> d299  [key=0, style=solid];
d306 -> d307  [key=0, style=solid];
d306 -> d311  [key=0, style=solid];
d313 -> d314  [key=0, style=solid];
d313 -> d328  [key=0, style=solid];
d320 -> d321  [key=0, style=solid];
d320 -> d325  [key=0, style=solid];
d310 -> d306  [key=0, style=solid];
d310 -> d310  [key=1, style=dashed, color=darkseagreen4, label=i];
d319 -> d321  [key=1, style=dashed, color=darkseagreen4, label=i];
d319 -> d320  [key=0, style=solid];
d319 -> d319  [key=1, style=dashed, color=darkseagreen4, label=i];
d319 -> d324  [key=1, style=dashed, color=darkseagreen4, label=i];
d319 -> d327  [key=1, style=dashed, color=darkseagreen4, label=i];
d327 -> d313  [key=0, style=solid];
d327 -> d327  [key=1, style=dashed, color=darkseagreen4, label=i];
d331 -> d333  [key=1, style=dashed, color=darkseagreen4, label="out int"];
d331 -> d331  [key=1, style=dashed, color=darkseagreen4, label="out int"];
d331 -> d332  [key=0, style=solid];
d296 -> d333  [key=0, style=solid];
d300 -> d333  [key=0, style=solid];
d311 -> d333  [key=0, style=solid];
d309 -> d333  [key=0, style=solid];
d316 -> d333  [key=0, style=solid];
d326 -> d333  [key=1, style=dashed, color=darkseagreen4, label="out int"];
d326 -> d327  [key=0, style=solid];
d326 -> d331  [key=1, style=dashed, color=darkseagreen4, label="out int"];
d326 -> d329  [key=1, style=dashed, color=darkseagreen4, label="out int"];
d325 -> d333  [key=0, style=solid];
d323 -> d333  [key=0, style=solid];
d332 -> d333  [key=0, style=solid];
d330 -> d333  [key=0, style=solid];
d318 -> d319  [key=0, style=solid];
d318 -> d326  [key=0, style=solid];
d329 -> d331  [key=0, style=solid];
d329 -> d330  [key=0, style=solid];
d328 -> d332  [key=0, style=solid];
d328 -> d329  [key=0, style=solid];
d308 -> d310  [key=0, style=solid];
d308 -> d309  [key=0, style=solid];
d315 -> d317  [key=0, style=solid];
d315 -> d316  [key=0, style=solid];
d322 -> d323  [key=0, style=solid];
d322 -> d324  [key=0, style=solid];
d127 -> d210  [key=3, color=darkorchid, style=bold, label="method methodReturn Newtonsoft.Json.Utilities.ConvertUtils.ConvertResult TryConvertInternal"];
d127 -> d208  [key=3, color=darkorchid, style=bold, label="method methodReturn Newtonsoft.Json.Utilities.ConvertUtils.ConvertResult TryConvertInternal"];
d127 -> d19  [key=3, color=darkorchid, style=bold, label="method methodReturn Newtonsoft.Json.Utilities.ConvertUtils.ConvertResult TryConvertInternal"];
d127 -> d127  [key=3, color=darkorchid, style=bold, label="Parameter variable object value"];
d127 -> d140  [key=0, style=solid];
d127 -> d142  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d127 -> d143  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d127 -> d144  [key=1, style=dashed, color=darkseagreen4, label=object];
d127 -> d145  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d127 -> d146  [key=1, style=dashed, color=darkseagreen4, label=object];
d127 -> d148  [key=1, style=dashed, color=darkseagreen4, label=object];
d127 -> d149  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d127 -> d150  [key=1, style=dashed, color=darkseagreen4, label=object];
d127 -> d151  [key=1, style=dashed, color=darkseagreen4, label=object];
d127 -> d153  [key=1, style=dashed, color=darkseagreen4, label=object];
d127 -> d154  [key=1, style=dashed, color=darkseagreen4, label=object];
d127 -> d156  [key=1, style=dashed, color=darkseagreen4, label=object];
d127 -> d158  [key=1, style=dashed, color=darkseagreen4, label=object];
d127 -> d159  [key=1, style=dashed, color=darkseagreen4, label=object];
d127 -> d161  [key=1, style=dashed, color=darkseagreen4, label=object];
d127 -> d162  [key=1, style=dashed, color=darkseagreen4, label=object];
d127 -> d164  [key=1, style=dashed, color=darkseagreen4, label=object];
d127 -> d165  [key=1, style=dashed, color=darkseagreen4, label=object];
d127 -> d167  [key=1, style=dashed, color=darkseagreen4, label=object];
d127 -> d168  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d127 -> d169  [key=1, style=dashed, color=darkseagreen4, label=object];
d127 -> d171  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d127 -> d172  [key=1, style=dashed, color=darkseagreen4, label=object];
d127 -> d174  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d127 -> d175  [key=1, style=dashed, color=darkseagreen4, label=object];
d127 -> d177  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d127 -> d178  [key=1, style=dashed, color=darkseagreen4, label=object];
d127 -> d180  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d127 -> d181  [key=1, style=dashed, color=darkseagreen4, label=object];
d127 -> d183  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d127 -> d184  [key=1, style=dashed, color=darkseagreen4, label=object];
d127 -> d186  [key=1, style=dashed, color=darkseagreen4, label=object];
d127 -> d187  [key=1, style=dashed, color=darkseagreen4, label=object];
d127 -> d190  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d127 -> d191  [key=1, style=dashed, color=darkseagreen4, label=object];
d127 -> d193  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d127 -> d195  [key=1, style=dashed, color=darkseagreen4, label=object];
d127 -> d197  [key=1, style=dashed, color=darkseagreen4, label=object];
d127 -> d198  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d127 -> d199  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d127 -> d203  [key=1, style=dashed, color=darkseagreen4, label=object];
d127 -> d204  [key=1, style=dashed, color=darkseagreen4, label=object];
d127 -> d206  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d127 -> d114  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Type targetType"];
d127 -> d132  [key=3, color=darkorchid, style=bold, label="Parameter variable object value"];
d127 -> d115  [key=3, color=darkorchid, style=bold, label="Parameter variable object value"];
d127 -> d36  [key=3, color=darkorchid, style=bold, label="Parameter variable object value"];
d127 -> d71  [key=3, color=darkorchid, style=bold, label="Parameter variable object value"];
d127 -> d99  [key=3, color=darkorchid, style=bold, label="Parameter variable object value"];
d127 -> d230  [key=3, color=darkorchid, style=bold, label="Parameter variable object value"];
d127 -> d147  [key=3, color=darkorchid, style=bold, label="method methodReturn Newtonsoft.Json.Utilities.ConvertUtils.ConvertResult TryConvertInternal"];
d209 -> d210  [key=0, style=solid];
d209 -> d211  [key=1, style=dashed, color=darkseagreen4, label="out object"];
d334 -> d210  [key=3, color=darkorchid, style=bold, label="method methodReturn Newtonsoft.Json.Utilities.ParseResult Int64TryParse"];
d334 -> d208  [key=3, color=darkorchid, style=bold, label="method methodReturn Newtonsoft.Json.Utilities.ParseResult Int64TryParse"];
d334 -> d19  [key=3, color=darkorchid, style=bold, label="method methodReturn Newtonsoft.Json.Utilities.ParseResult Int64TryParse"];
d334 -> d335  [key=0, style=solid];
d334 -> d336  [key=1, style=dashed, color=darkseagreen4, label=int];
d334 -> d338  [key=1, style=dashed, color=darkseagreen4, label="char[]"];
d334 -> d340  [key=1, style=dashed, color=darkseagreen4, label=int];
d334 -> d342  [key=1, style=dashed, color=darkseagreen4, label=int];
d334 -> d343  [key=1, style=dashed, color=darkseagreen4, label=int];
d334 -> d344  [key=1, style=dashed, color=darkseagreen4, label=int];
d334 -> d345  [key=1, style=dashed, color=darkseagreen4, label=int];
d334 -> d346  [key=1, style=dashed, color=darkseagreen4, label=int];
d334 -> d348  [key=1, style=dashed, color=darkseagreen4, label="char[]"];
d334 -> d353  [key=1, style=dashed, color=darkseagreen4, label=int];
d334 -> d355  [key=1, style=dashed, color=darkseagreen4, label="char[]"];
d334 -> d362  [key=1, style=dashed, color=darkseagreen4, label="char[]"];
d334 -> d358  [key=3, color=darkorchid, style=bold, label="Parameter variable long value"];
d211 -> d127  [key=0, style=bold, color=blue];
d207 -> d208  [key=0, style=solid];
d4 -> d19  [key=3, color=darkorchid, style=bold, label="method methodReturn Newtonsoft.Json.Utilities.PrimitiveTypeCode GetTypeCode"];
d4 -> d5  [key=0, style=solid];
d4 -> d6  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d4 -> d9  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d4 -> d11  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d4 -> d12  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d4 -> d13  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d4 -> d0  [key=3, color=darkorchid, style=bold, label="method methodReturn Newtonsoft.Json.Utilities.PrimitiveTypeCode GetTypeCode"];
d4 -> d1  [key=3, color=darkorchid, style=bold, label="Parameter variable bool isEnum"];
d18 -> d19  [key=0, style=solid];
d18 -> d20  [key=1, style=dashed, color=darkseagreen4, label="out bool"];
d20 -> d4  [key=0, style=bold, color=blue];
d324 -> d320  [key=0, style=solid];
d324 -> d327  [key=1, style=dashed, color=darkseagreen4, label=i];
d324 -> d324  [key=1, style=dashed, color=darkseagreen4, label=i];
d32 -> d127  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Type t"];
d32 -> d33  [key=0, style=solid];
d36 -> d127  [key=3, color=darkorchid, style=bold, label="Parameter variable string input"];
d36 -> d37  [key=0, style=solid];
d71 -> d127  [key=3, color=darkorchid, style=bold, label="Parameter variable object value"];
d71 -> d71  [key=3, color=darkorchid, style=bold, label="method methodReturn BigInteger ToBigInteger"];
d71 -> d72  [key=0, style=solid];
d71 -> d73  [key=1, style=dashed, color=darkseagreen4, label=object];
d71 -> d74  [key=1, style=dashed, color=darkseagreen4, label=object];
d71 -> d75  [key=1, style=dashed, color=darkseagreen4, label=object];
d71 -> d76  [key=1, style=dashed, color=darkseagreen4, label=object];
d71 -> d77  [key=1, style=dashed, color=darkseagreen4, label=object];
d71 -> d78  [key=1, style=dashed, color=darkseagreen4, label=object];
d71 -> d79  [key=1, style=dashed, color=darkseagreen4, label=object];
d71 -> d80  [key=1, style=dashed, color=darkseagreen4, label=object];
d71 -> d81  [key=1, style=dashed, color=darkseagreen4, label=object];
d71 -> d82  [key=1, style=dashed, color=darkseagreen4, label=object];
d71 -> d83  [key=1, style=dashed, color=darkseagreen4, label=object];
d71 -> d84  [key=1, style=dashed, color=darkseagreen4, label=object];
d71 -> d85  [key=1, style=dashed, color=darkseagreen4, label=object];
d71 -> d86  [key=1, style=dashed, color=darkseagreen4, label=object];
d71 -> d87  [key=1, style=dashed, color=darkseagreen4, label=object];
d71 -> d88  [key=1, style=dashed, color=darkseagreen4, label=object];
d71 -> d89  [key=1, style=dashed, color=darkseagreen4, label=object];
d71 -> d90  [key=1, style=dashed, color=darkseagreen4, label=object];
d71 -> d91  [key=1, style=dashed, color=darkseagreen4, label=object];
d71 -> d92  [key=1, style=dashed, color=darkseagreen4, label=object];
d99 -> d127  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Type targetType"];
d99 -> d99  [key=3, color=darkorchid, style=bold, label="method methodReturn object FromBigInteger"];
d99 -> d100  [key=0, style=solid];
d99 -> d101  [key=1, style=dashed, color=darkseagreen4, label=BigInteger];
d99 -> d102  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d99 -> d103  [key=1, style=dashed, color=darkseagreen4, label=BigInteger];
d99 -> d104  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d99 -> d105  [key=1, style=dashed, color=darkseagreen4, label=BigInteger];
d99 -> d106  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d99 -> d107  [key=1, style=dashed, color=darkseagreen4, label=BigInteger];
d99 -> d108  [key=1, style=dashed, color=darkseagreen4, label=BigInteger];
d99 -> d110  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d116 -> d127  [key=2, style=dotted];
d116 -> d117  [key=0, style=solid];
d116 -> d119  [key=0, style=solid];
d116 -> d121  [key=0, style=solid];
d116 -> d123  [key=0, style=solid];
d116 -> d125  [key=0, style=solid];
d116 -> d118  [key=1, style=dashed, color=darkseagreen4, label=value];
d133 -> d127  [key=2, style=dotted];
d133 -> d134  [key=0, style=solid];
d133 -> d135  [key=0, style=solid];
d215 -> d127  [key=3, color=darkorchid, style=bold, label="Parameter variable object value"];
d215 -> d281  [key=0, style=solid];
d215 -> d134  [key=3, color=darkorchid, style=bold, label="method methodReturn bool IsInteger"];
d215 -> d50  [key=3, color=darkorchid, style=bold, label="method methodReturn bool IsInteger"];
d224 -> d127  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Type t"];
d224 -> d278  [key=0, style=solid];
d224 -> d144  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Type t"];
d230 -> d127  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Type targetType"];
d230 -> d230  [key=3, color=darkorchid, style=bold, label="method methodReturn object EnsureTypeAssignable"];
d230 -> d246  [key=0, style=solid];
d230 -> d247  [key=1, style=dashed, color=darkseagreen4, label=object];
d230 -> d248  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d230 -> d249  [key=1, style=dashed, color=darkseagreen4, label=object];
d230 -> d250  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d230 -> d252  [key=1, style=dashed, color=darkseagreen4, label=object];
d230 -> d253  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d230 -> d255  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d230 -> d61  [key=3, color=darkorchid, style=bold, label="method methodReturn object EnsureTypeAssignable"];
d230 -> d231  [key=3, color=darkorchid, style=bold, label="Parameter variable object value"];
d230 -> d235  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Type targetType"];
d230 -> d144  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Type initialType"];
d231 -> d127  [key=3, color=darkorchid, style=bold, label="Parameter variable INullable nullableValue"];
d231 -> d261  [key=0, style=solid];
d231 -> d263  [key=1, style=dashed, color=darkseagreen4, label=INullable];
d231 -> d264  [key=1, style=dashed, color=darkseagreen4, label=INullable];
d231 -> d265  [key=1, style=dashed, color=darkseagreen4, label=INullable];
d231 -> d266  [key=1, style=dashed, color=darkseagreen4, label=INullable];
d231 -> d267  [key=1, style=dashed, color=darkseagreen4, label=INullable];
d231 -> d268  [key=1, style=dashed, color=darkseagreen4, label=INullable];
d231 -> d269  [key=1, style=dashed, color=darkseagreen4, label=INullable];
d231 -> d270  [key=1, style=dashed, color=darkseagreen4, label=INullable];
d231 -> d271  [key=1, style=dashed, color=darkseagreen4, label=INullable];
d231 -> d272  [key=1, style=dashed, color=darkseagreen4, label=INullable];
d231 -> d273  [key=1, style=dashed, color=darkseagreen4, label=INullable];
d231 -> d61  [key=3, color=darkorchid, style=bold, label="method methodReturn object ToValue"];
d140 -> d141  [key=0, style=solid];
d140 -> d142  [key=0, style=solid];
d142 -> d143  [key=0, style=solid];
d142 -> d144  [key=0, style=solid];
d142 -> d24  [key=2, style=dotted];
d143 -> d143  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d143 -> d144  [key=0, style=solid];
d143 -> d25  [key=2, style=dotted];
d143 -> d145  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d143 -> d148  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d143 -> d149  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d143 -> d151  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d143 -> d154  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d143 -> d156  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d143 -> d158  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d143 -> d161  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d143 -> d164  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d143 -> d168  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d143 -> d171  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d143 -> d174  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d143 -> d177  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d143 -> d180  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d143 -> d183  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d143 -> d187  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d143 -> d190  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d143 -> d191  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d143 -> d193  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d143 -> d198  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d143 -> d199  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d143 -> d204  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d143 -> d206  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d144 -> d145  [key=0, style=solid];
d144 -> d97  [key=2, style=dotted];
d144 -> d189  [key=1, style=dashed, color=darkseagreen4, label=initialType];
d144 -> d194  [key=1, style=dashed, color=darkseagreen4, label=initialType];
d144 -> d199  [key=1, style=dashed, color=darkseagreen4, label=initialType];
d144 -> d204  [key=1, style=dashed, color=darkseagreen4, label=initialType];
d145 -> d146  [key=0, style=solid];
d145 -> d148  [key=0, style=solid];
d146 -> d147  [key=0, style=solid];
d148 -> d32  [key=2, style=dotted];
d148 -> d149  [key=0, style=solid];
d148 -> d158  [key=0, style=solid];
d148 -> d97  [key=2, style=dotted];
d149 -> d150  [key=0, style=solid];
d149 -> d156  [key=0, style=solid];
d149 -> d22  [key=2, style=dotted];
d150 -> d151  [key=0, style=solid];
d150 -> d153  [key=0, style=solid];
d151 -> d152  [key=0, style=solid];
d151 -> d213  [key=2, style=dotted];
d151 -> d214  [key=2, style=dotted];
d153 -> d215  [key=2, style=dotted];
d153 -> d154  [key=0, style=solid];
d153 -> d156  [key=0, style=solid];
d154 -> d155  [key=0, style=solid];
d154 -> d216  [key=2, style=dotted];
d156 -> d157  [key=0, style=solid];
d156 -> d112  [key=2, style=dotted];
d158 -> d159  [key=0, style=solid];
d158 -> d161  [key=0, style=solid];
d159 -> d160  [key=0, style=solid];
d159 -> d217  [key=2, style=dotted];
d161 -> d162  [key=0, style=solid];
d161 -> d164  [key=0, style=solid];
d162 -> d163  [key=0, style=solid];
d162 -> d218  [key=2, style=dotted];
d164 -> d165  [key=0, style=solid];
d164 -> d167  [key=0, style=solid];
d165 -> d166  [key=0, style=solid];
d165 -> d219  [key=2, style=dotted];
d167 -> d168  [key=0, style=solid];
d167 -> d183  [key=0, style=solid];
d168 -> d169  [key=0, style=solid];
d168 -> d171  [key=0, style=solid];
d169 -> d170  [key=0, style=solid];
d169 -> d220  [key=2, style=dotted];
d171 -> d172  [key=0, style=solid];
d171 -> d174  [key=0, style=solid];
d172 -> d173  [key=0, style=solid];
d172 -> d221  [key=2, style=dotted];
d174 -> d175  [key=0, style=solid];
d174 -> d177  [key=0, style=solid];
d175 -> d36  [key=2, style=dotted];
d175 -> d176  [key=0, style=solid];
d177 -> d178  [key=0, style=solid];
d177 -> d180  [key=0, style=solid];
d178 -> d179  [key=0, style=solid];
d178 -> d222  [key=2, style=dotted];
d180 -> d181  [key=0, style=solid];
d180 -> d183  [key=0, style=solid];
d180 -> d35  [key=2, style=dotted];
d181 -> d182  [key=0, style=solid];
d181 -> d223  [key=2, style=dotted];
d183 -> d184  [key=0, style=solid];
d183 -> d186  [key=0, style=solid];
d184 -> d71  [key=2, style=dotted];
d184 -> d185  [key=0, style=solid];
d186 -> d187  [key=0, style=solid];
d186 -> d189  [key=0, style=solid];
d187 -> d99  [key=2, style=dotted];
d187 -> d188  [key=0, style=solid];
d190 -> d191  [key=0, style=solid];
d190 -> d193  [key=0, style=solid];
d190 -> d225  [key=2, style=dotted];
d191 -> d192  [key=0, style=solid];
d191 -> d226  [key=2, style=dotted];
d193 -> d224  [key=2, style=dotted];
d193 -> d194  [key=0, style=solid];
d193 -> d195  [key=1, style=dashed, color=darkseagreen4, label=fromConverter];
d195 -> d196  [key=0, style=solid];
d195 -> d228  [key=2, style=dotted];
d197 -> d198  [key=0, style=solid];
d197 -> d203  [key=0, style=solid];
d198 -> d199  [key=0, style=solid];
d198 -> d201  [key=0, style=solid];
d198 -> d229  [key=2, style=dotted];
d199 -> d230  [key=2, style=dotted];
d199 -> d200  [key=0, style=solid];
d203 -> d204  [key=0, style=solid];
d203 -> d206  [key=0, style=solid];
d204 -> d230  [key=2, style=dotted];
d204 -> d231  [key=2, style=dotted];
d204 -> d205  [key=0, style=solid];
d206 -> d209  [key=0, style=solid];
d206 -> d207  [key=0, style=solid];
d206 -> d232  [key=2, style=dotted];
d206 -> d233  [key=2, style=dotted];
d206 -> d234  [key=2, style=dotted];
d114 -> d116  [key=1, style=dashed, color=darkseagreen4, label=object];
d114 -> d115  [key=0, style=solid];
d114 -> d120  [key=1, style=dashed, color=darkseagreen4, label=object];
d114 -> d122  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d114 -> d124  [key=1, style=dashed, color=darkseagreen4, label=object];
d132 -> d133  [key=0, style=solid];
d132 -> d134  [key=3, color=darkorchid, style=bold, label="method methodReturn bool TryConvert"];
d132 -> d50  [key=3, color=darkorchid, style=bold, label="method methodReturn bool TryConvert"];
d132 -> d235  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Type targetType"];
d132 -> d236  [key=3, color=darkorchid, style=bold, label="Parameter variable object value"];
d115 -> d116  [key=0, style=solid];
d147 -> d211  [key=0, style=solid];
d346 -> d334  [key=3, color=darkorchid, style=bold, label="Local variable int i"];
d346 -> d347  [key=0, style=solid];
d346 -> d348  [key=1, style=dashed, color=darkseagreen4, label=i];
d346 -> d351  [key=1, style=dashed, color=darkseagreen4, label=i];
d353 -> d334  [key=3, color=darkorchid, style=bold, label="Local variable int i"];
d353 -> d354  [key=0, style=solid];
d353 -> d355  [key=1, style=dashed, color=darkseagreen4, label=i];
d353 -> d360  [key=1, style=dashed, color=darkseagreen4, label=i];
d353 -> d368  [key=1, style=dashed, color=darkseagreen4, label=i];
d374 -> d334  [key=0, style=bold, color=blue];
d335 -> d374  [key=1, style=dashed, color=darkseagreen4, label="out long"];
d335 -> d336  [key=0, style=solid];
d335 -> d358  [key=1, style=dashed, color=darkseagreen4, label="out long"];
d335 -> d359  [key=1, style=dashed, color=darkseagreen4, label="out long"];
d335 -> d370  [key=1, style=dashed, color=darkseagreen4, label="out long"];
d335 -> d372  [key=1, style=dashed, color=darkseagreen4, label="out long"];
d336 -> d337  [key=0, style=solid];
d336 -> d338  [key=0, style=solid];
d338 -> d339  [key=0, style=solid];
d338 -> d369  [key=1, style=dashed, color=darkseagreen4, label=isNegative];
d340 -> d341  [key=0, style=solid];
d340 -> d342  [key=0, style=solid];
d342 -> d346  [key=1, style=dashed, color=darkseagreen4, label=int];
d342 -> d353  [key=1, style=dashed, color=darkseagreen4, label=int];
d342 -> d342  [key=1, style=dashed, color=darkseagreen4, label=int];
d342 -> d343  [key=0, style=solid];
d342 -> d344  [key=1, style=dashed, color=darkseagreen4, label=int];
d343 -> d343  [key=1, style=dashed, color=darkseagreen4, label=int];
d343 -> d344  [key=0, style=solid];
d343 -> d345  [key=1, style=dashed, color=darkseagreen4, label=int];
d344 -> d345  [key=0, style=solid];
d344 -> d347  [key=1, style=dashed, color=darkseagreen4, label=end];
d344 -> d354  [key=1, style=dashed, color=darkseagreen4, label=end];
d344 -> d361  [key=1, style=dashed, color=darkseagreen4, label=end];
d345 -> d346  [key=0, style=solid];
d345 -> d353  [key=0, style=solid];
d348 -> d349  [key=0, style=solid];
d355 -> d356  [key=0, style=solid];
d355 -> d358  [key=1, style=dashed, color=darkseagreen4, label=c];
d362 -> d363  [key=0, style=solid];
d358 -> d359  [key=0, style=solid];
d358 -> d367  [key=1, style=dashed, color=darkseagreen4, label=newValue];
d141 -> d211  [key=0, style=solid];
d141 -> d212  [key=2, style=dotted];
d152 -> d211  [key=0, style=solid];
d155 -> d211  [key=0, style=solid];
d157 -> d211  [key=0, style=solid];
d160 -> d211  [key=0, style=solid];
d163 -> d211  [key=0, style=solid];
d166 -> d211  [key=0, style=solid];
d170 -> d211  [key=0, style=solid];
d173 -> d211  [key=0, style=solid];
d176 -> d211  [key=0, style=solid];
d179 -> d211  [key=0, style=solid];
d182 -> d211  [key=0, style=solid];
d185 -> d211  [key=0, style=solid];
d188 -> d211  [key=0, style=solid];
d192 -> d211  [key=0, style=solid];
d196 -> d211  [key=0, style=solid];
d200 -> d211  [key=0, style=solid];
d202 -> d211  [key=0, style=solid];
d205 -> d211  [key=0, style=solid];
d0 -> d4  [key=3, color=darkorchid, style=bold, label="method methodReturn Newtonsoft.Json.Utilities.PrimitiveTypeCode GetTypeCode"];
d0 -> d1  [key=0, style=solid];
d0 -> d2  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d0 -> d15  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Type t"];
d2 -> d4  [key=2, style=dotted];
d2 -> d3  [key=0, style=solid];
d5 -> d6  [key=0, style=solid];
d6 -> d7  [key=0, style=solid];
d6 -> d9  [key=0, style=solid];
d6 -> d21  [key=2, style=dotted];
d6 -> d8  [key=1, style=dashed, color=darkseagreen4, label=typeCode];
d9 -> d10  [key=0, style=solid];
d9 -> d12  [key=0, style=solid];
d9 -> d22  [key=2, style=dotted];
d11 -> d20  [key=0, style=solid];
d11 -> d0  [key=2, style=dotted];
d11 -> d23  [key=2, style=dotted];
d12 -> d18  [key=0, style=solid];
d12 -> d13  [key=0, style=solid];
d12 -> d24  [key=2, style=dotted];
d13 -> d14  [key=0, style=solid];
d13 -> d25  [key=2, style=dotted];
d13 -> d15  [key=1, style=dashed, color=darkseagreen4, label=nonNullable];
d1 -> d2  [key=0, style=solid];
d14 -> d18  [key=0, style=solid];
d14 -> d15  [key=0, style=solid];
d14 -> d22  [key=2, style=dotted];
d8 -> d20  [key=0, style=solid];
d17 -> d20  [key=0, style=solid];
d17 -> d0  [key=2, style=dotted];
d34 -> d32  [key=0, style=bold, color=blue];
d33 -> d34  [key=0, style=solid];
d33 -> d35  [key=2, style=dotted];
d38 -> d36  [key=0, style=bold, color=blue];
d37 -> d38  [key=0, style=solid];
d37 -> d39  [key=2, style=dotted];
d93 -> d71  [key=0, style=bold, color=blue];
d72 -> d73  [key=0, style=solid];
d72 -> d74  [key=0, style=solid];
d73 -> d93  [key=0, style=solid];
d74 -> d75  [key=0, style=solid];
d74 -> d76  [key=0, style=solid];
d75 -> d93  [key=0, style=solid];
d75 -> d94  [key=2, style=dotted];
d76 -> d77  [key=0, style=solid];
d76 -> d78  [key=0, style=solid];
d77 -> d93  [key=0, style=solid];
d77 -> d95  [key=2, style=dotted];
d78 -> d79  [key=0, style=solid];
d78 -> d80  [key=0, style=solid];
d79 -> d93  [key=0, style=solid];
d79 -> d95  [key=2, style=dotted];
d80 -> d81  [key=0, style=solid];
d80 -> d82  [key=0, style=solid];
d81 -> d93  [key=0, style=solid];
d81 -> d95  [key=2, style=dotted];
d82 -> d83  [key=0, style=solid];
d82 -> d84  [key=0, style=solid];
d83 -> d93  [key=0, style=solid];
d83 -> d95  [key=2, style=dotted];
d84 -> d85  [key=0, style=solid];
d84 -> d86  [key=0, style=solid];
d85 -> d93  [key=0, style=solid];
d85 -> d95  [key=2, style=dotted];
d86 -> d87  [key=0, style=solid];
d86 -> d88  [key=0, style=solid];
d87 -> d93  [key=0, style=solid];
d87 -> d95  [key=2, style=dotted];
d88 -> d89  [key=0, style=solid];
d88 -> d90  [key=0, style=solid];
d89 -> d93  [key=0, style=solid];
d89 -> d95  [key=2, style=dotted];
d90 -> d91  [key=0, style=solid];
d90 -> d92  [key=0, style=solid];
d91 -> d93  [key=0, style=solid];
d91 -> d95  [key=2, style=dotted];
d92 -> d93  [key=0, style=solid];
d92 -> d96  [key=2, style=dotted];
d92 -> d97  [key=2, style=dotted];
d92 -> d98  [key=2, style=dotted];
d111 -> d99  [key=0, style=bold, color=blue];
d100 -> d101  [key=0, style=solid];
d100 -> d102  [key=0, style=solid];
d101 -> d111  [key=0, style=solid];
d102 -> d103  [key=0, style=solid];
d102 -> d104  [key=0, style=solid];
d103 -> d111  [key=0, style=solid];
d104 -> d105  [key=0, style=solid];
d104 -> d106  [key=0, style=solid];
d105 -> d111  [key=0, style=solid];
d106 -> d107  [key=0, style=solid];
d106 -> d108  [key=0, style=solid];
d107 -> d111  [key=0, style=solid];
d108 -> d111  [key=0, style=solid];
d108 -> d112  [key=2, style=dotted];
d110 -> d111  [key=0, style=solid];
d110 -> d113  [key=2, style=dotted];
d110 -> d98  [key=2, style=dotted];
d117 -> d118  [key=0, style=solid];
d119 -> d120  [key=0, style=solid];
d121 -> d122  [key=0, style=solid];
d123 -> d124  [key=0, style=solid];
d125 -> d126  [key=0, style=solid];
d125 -> d131  [key=2, style=dotted];
d118 -> d126  [key=0, style=solid];
d134 -> d139  [key=0, style=solid];
d135 -> d136  [key=0, style=solid];
d292 -> d215  [key=0, style=bold, color=blue];
d281 -> d0  [key=2, style=dotted];
d281 -> d282  [key=0, style=solid];
d281 -> d291  [key=0, style=solid];
d281 -> d97  [key=2, style=dotted];
d50 -> d52  [key=0, style=solid];
d189 -> d224  [key=2, style=dotted];
d189 -> d190  [key=0, style=solid];
d189 -> d191  [key=1, style=dashed, color=darkseagreen4, label=toConverter];
d279 -> d224  [key=0, style=bold, color=blue];
d278 -> d279  [key=0, style=solid];
d278 -> d280  [key=2, style=dotted];
d235 -> d230  [key=3, color=darkorchid, style=bold, label="method methodReturn object ConvertOrCast"];
d235 -> d235  [key=3, color=darkorchid, style=bold, label="method methodReturn object ConvertOrCast"];
d235 -> d236  [key=0, style=solid];
d235 -> d237  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d235 -> d238  [key=1, style=dashed, color=darkseagreen4, label=object];
d235 -> d239  [key=1, style=dashed, color=darkseagreen4, label=object];
d235 -> d241  [key=1, style=dashed, color=darkseagreen4, label=object];
d235 -> d243  [key=1, style=dashed, color=darkseagreen4, label=object];
d235 -> d61  [key=3, color=darkorchid, style=bold, label="method methodReturn object ConvertOrCast"];
d243 -> d230  [key=2, style=dotted];
d243 -> d244  [key=0, style=solid];
d243 -> d245  [key=2, style=dotted];
d256 -> d230  [key=0, style=bold, color=blue];
d246 -> d247  [key=0, style=solid];
d246 -> d97  [key=2, style=dotted];
d246 -> d248  [key=1, style=dashed, color=darkseagreen4, label=valueType];
d246 -> d250  [key=1, style=dashed, color=darkseagreen4, label=valueType];
d247 -> d248  [key=0, style=solid];
d247 -> d253  [key=0, style=solid];
d248 -> d249  [key=0, style=solid];
d248 -> d250  [key=0, style=solid];
d248 -> d35  [key=2, style=dotted];
d249 -> d256  [key=0, style=solid];
d250 -> d251  [key=0, style=solid];
d250 -> d40  [key=2, style=dotted];
d250 -> d257  [key=2, style=dotted];
d250 -> d252  [key=1, style=dashed, color=darkseagreen4, label=castConverter];
d252 -> d256  [key=0, style=solid];
d252 -> d258  [key=2, style=dotted];
d253 -> d254  [key=0, style=solid];
d253 -> d255  [key=0, style=solid];
d253 -> d229  [key=2, style=dotted];
d255 -> d256  [key=0, style=solid];
d255 -> d259  [key=2, style=dotted];
d255 -> d260  [key=2, style=dotted];
d255 -> d129  [key=2, style=dotted];
d61 -> d64  [key=0, style=solid];
d274 -> d231  [key=0, style=bold, color=blue];
d261 -> d262  [key=0, style=solid];
d261 -> d263  [key=0, style=solid];
d263 -> d264  [key=0, style=solid];
d263 -> d265  [key=0, style=solid];
d264 -> d274  [key=0, style=solid];
d264 -> d275  [key=2, style=dotted];
d265 -> d266  [key=0, style=solid];
d265 -> d267  [key=0, style=solid];
d266 -> d274  [key=0, style=solid];
d266 -> d275  [key=2, style=dotted];
d267 -> d268  [key=0, style=solid];
d267 -> d269  [key=0, style=solid];
d268 -> d274  [key=0, style=solid];
d268 -> d275  [key=2, style=dotted];
d269 -> d270  [key=0, style=solid];
d269 -> d271  [key=0, style=solid];
d270 -> d274  [key=0, style=solid];
d270 -> d275  [key=2, style=dotted];
d271 -> d272  [key=0, style=solid];
d271 -> d273  [key=0, style=solid];
d272 -> d274  [key=0, style=solid];
d272 -> d275  [key=2, style=dotted];
d273 -> d274  [key=0, style=solid];
d273 -> d259  [key=2, style=dotted];
d273 -> d276  [key=2, style=dotted];
d273 -> d277  [key=2, style=dotted];
d194 -> d195  [key=0, style=solid];
d194 -> d197  [key=0, style=solid];
d194 -> d227  [key=2, style=dotted];
d201 -> d202  [key=0, style=solid];
d126 -> d114  [key=0, style=bold, color=blue];
d120 -> d97  [key=2, style=dotted];
d120 -> d126  [key=0, style=solid];
d120 -> d128  [key=2, style=dotted];
d120 -> d129  [key=2, style=dotted];
d122 -> d126  [key=0, style=solid];
d122 -> d130  [key=2, style=dotted];
d122 -> d98  [key=2, style=dotted];
d124 -> d97  [key=2, style=dotted];
d124 -> d126  [key=0, style=solid];
d124 -> d131  [key=2, style=dotted];
d124 -> d129  [key=2, style=dotted];
d139 -> d132  [key=0, style=bold, color=blue];
d241 -> d132  [key=2, style=dotted];
d241 -> d243  [key=0, style=solid];
d241 -> d242  [key=0, style=solid];
d236 -> d237  [key=0, style=solid];
d347 -> d348  [key=0, style=solid];
d347 -> d352  [key=0, style=solid];
d351 -> d347  [key=0, style=solid];
d351 -> d351  [key=1, style=dashed, color=darkseagreen4, label=i];
d354 -> d355  [key=0, style=solid];
d354 -> d369  [key=0, style=solid];
d360 -> d362  [key=1, style=dashed, color=darkseagreen4, label=i];
d360 -> d360  [key=1, style=dashed, color=darkseagreen4, label=i];
d360 -> d361  [key=0, style=solid];
d360 -> d365  [key=1, style=dashed, color=darkseagreen4, label=i];
d360 -> d368  [key=1, style=dashed, color=darkseagreen4, label=i];
d368 -> d354  [key=0, style=solid];
d368 -> d368  [key=1, style=dashed, color=darkseagreen4, label=i];
d372 -> d374  [key=1, style=dashed, color=darkseagreen4, label="out long"];
d372 -> d372  [key=1, style=dashed, color=darkseagreen4, label="out long"];
d372 -> d373  [key=0, style=solid];
d337 -> d374  [key=0, style=solid];
d341 -> d374  [key=0, style=solid];
d352 -> d374  [key=0, style=solid];
d350 -> d374  [key=0, style=solid];
d357 -> d374  [key=0, style=solid];
d367 -> d374  [key=1, style=dashed, color=darkseagreen4, label="out long"];
d367 -> d368  [key=0, style=solid];
d367 -> d372  [key=1, style=dashed, color=darkseagreen4, label="out long"];
d367 -> d370  [key=1, style=dashed, color=darkseagreen4, label="out long"];
d366 -> d374  [key=0, style=solid];
d364 -> d374  [key=0, style=solid];
d373 -> d374  [key=0, style=solid];
d371 -> d374  [key=0, style=solid];
d359 -> d360  [key=0, style=solid];
d359 -> d367  [key=0, style=solid];
d370 -> d372  [key=0, style=solid];
d370 -> d371  [key=0, style=solid];
d339 -> d340  [key=0, style=solid];
d339 -> d344  [key=0, style=solid];
d369 -> d373  [key=0, style=solid];
d369 -> d370  [key=0, style=solid];
d361 -> d362  [key=0, style=solid];
d361 -> d366  [key=0, style=solid];
d349 -> d351  [key=0, style=solid];
d349 -> d350  [key=0, style=solid];
d356 -> d358  [key=0, style=solid];
d356 -> d357  [key=0, style=solid];
d363 -> d364  [key=0, style=solid];
d363 -> d365  [key=0, style=solid];
d3 -> d0  [key=0, style=bold, color=blue];
d15 -> d17  [key=1, style=dashed, color=darkseagreen4, label=nullableUnderlyingType];
d15 -> d16  [key=0, style=solid];
d15 -> d23  [key=2, style=dotted];
d15 -> d26  [key=2, style=dotted];
d7 -> d8  [key=0, style=solid];
d10 -> d11  [key=0, style=solid];
d16 -> d17  [key=0, style=solid];
d109 -> d110  [key=0, style=solid];
d136 -> d139  [key=0, style=solid];
d291 -> d292  [key=0, style=solid];
d290 -> d292  [key=0, style=solid];
d282 -> d283  [key=0, style=solid];
d48 -> d50  [key=3, color=darkorchid, style=bold, label="method methodReturn bool Equals"];
d48 -> d49  [key=0, style=solid];
d48 -> d51  [key=1, style=dashed, color=darkseagreen4, label=object];
d48 -> d53  [key=3, color=darkorchid, style=bold, label="method methodReturn bool Equals"];
d49 -> d50  [key=0, style=solid];
d49 -> d51  [key=0, style=solid];
d52 -> d48  [key=0, style=bold, color=blue];
d244 -> d235  [key=0, style=bold, color=blue];
d237 -> d238  [key=0, style=solid];
d237 -> d239  [key=0, style=solid];
d238 -> d244  [key=0, style=solid];
d239 -> d229  [key=2, style=dotted];
d239 -> d241  [key=0, style=solid];
d239 -> d240  [key=0, style=solid];
d254 -> d256  [key=0, style=solid];
d251 -> d252  [key=0, style=solid];
d251 -> d255  [key=0, style=solid];
d40 -> d41  [key=0, style=solid];
d40 -> d42  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
d56 -> d61  [key=3, color=darkorchid, style=bold, label="method methodReturn System.Func<object, object> CreateCastConverter"];
d56 -> d57  [key=0, style=solid];
d56 -> d63  [key=3, color=darkorchid, style=bold, label="method methodReturn System.Func<object, object> CreateCastConverter"];
d60 -> d61  [key=0, style=solid];
d60 -> d62  [key=0, style=solid];
d64 -> d56  [key=0, style=bold, color=blue];
d262 -> d274  [key=0, style=solid];
d137 -> d139  [key=1, style=dashed, color=darkseagreen4, label="out object"];
d137 -> d138  [key=0, style=solid];
d138 -> d139  [key=0, style=solid];
d242 -> d244  [key=0, style=solid];
d365 -> d368  [key=1, style=dashed, color=darkseagreen4, label=i];
d365 -> d361  [key=0, style=solid];
d365 -> d365  [key=1, style=dashed, color=darkseagreen4, label=i];
d289 -> d290  [key=0, style=solid];
d283 -> d284  [key=0, style=solid];
d53 -> d48  [key=3, color=darkorchid, style=bold, label="Parameter variable Newtonsoft.Json.Utilities.ConvertUtils.TypeConvertKey other"];
d53 -> d54  [key=0, style=solid];
d51 -> d52  [key=0, style=solid];
d51 -> d53  [key=2, style=dotted];
d51 -> d381  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Utilities.ConvertUtils.TypeConvertKey"];
d381 -> d52  [key=1, style=dashed, color=darkseagreen4, label="ref Newtonsoft.Json.Utilities.ConvertUtils.TypeConvertKey"];
d240 -> d244  [key=0, style=solid];
d43 -> d40  [key=0, style=bold, color=blue];
d41 -> d42  [key=0, style=solid];
d41 -> d379  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Utilities.ConvertUtils.TypeConvertKey"];
d42 -> d43  [key=0, style=solid];
d42 -> d379  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Utilities.ConvertUtils.TypeConvertKey"];
d57 -> d60  [key=1, style=dashed, color=darkseagreen4, label=castMethodInfo];
d57 -> d57  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Utilities.ConvertUtils.TypeConvertKey"];
d57 -> d58  [key=0, style=solid];
d57 -> d65  [key=2, style=dotted];
d57 -> d59  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Utilities.ConvertUtils.TypeConvertKey"];
d57 -> d62  [key=1, style=dashed, color=darkseagreen4, label=castMethodInfo];
d63 -> d64  [key=0, style=solid];
d63 -> d68  [key=1, style=dashed, color=darkseagreen4, label=object];
d58 -> d60  [key=0, style=solid];
d58 -> d59  [key=0, style=solid];
d59 -> d60  [key=0, style=solid];
d59 -> d59  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Utilities.ConvertUtils.TypeConvertKey"];
d59 -> d65  [key=2, style=dotted];
d59 -> d62  [key=1, style=dashed, color=darkseagreen4, label=castMethodInfo];
d62 -> d63  [key=0, style=solid];
d62 -> d66  [key=2, style=dotted];
d62 -> d68  [key=1, style=dashed, color=darkseagreen4, label=call];
d288 -> d289  [key=0, style=solid];
d284 -> d285  [key=0, style=solid];
d55 -> d53  [key=0, style=bold, color=blue];
d54 -> d55  [key=0, style=solid];
d380 -> d51  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Utilities.ConvertUtils.TypeConvertKey"];
d380 -> d54  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Utilities.ConvertUtils.TypeConvertKey"];
d380 -> d45  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Utilities.ConvertUtils.TypeConvertKey"];
d68 -> d69  [key=0, style=solid];
d68 -> d70  [key=2, style=dotted];
d287 -> d288  [key=0, style=solid];
d285 -> d286  [key=0, style=solid];
d45 -> d46  [key=0, style=solid];
d45 -> d47  [key=2, style=dotted];
d382 -> d68  [key=1, style=dashed, color=darkseagreen4, label=call];
d67 -> d68  [key=0, style=solid];
d69 -> d67  [key=0, style=bold, color=blue];
d286 -> d287  [key=0, style=solid];
d44 -> d45  [key=0, style=solid];
d46 -> d44  [key=0, style=bold, color=blue];
m0_35 -> m0_36  [key=0, style=solid];
m0_54 -> m0_54  [key=3, color=green, style=bold, label="Local variable int j"];
m0_54 -> m0_55  [key=0, style=solid, color=green];
m0_54 -> m0_58  [key=1, style=dashed, color=green, label=j];
m0_54 -> m0_63  [key=1, style=dashed, color=green, label=j];
m0_53 -> m0_54  [key=0, style=solid, color=green];
m0_53 -> m0_34  [key=2, style=dotted];
m0_56 -> m0_54  [key=3, color=green, style=bold, label="Local variable int k"];
m0_56 -> m0_58  [key=1, style=dashed, color=green, label=k];
m0_56 -> m0_57  [key=0, style=solid, color=green];
m0_56 -> m0_62  [key=1, style=dashed, color=green, label=k];
m0_64 -> m0_54  [key=3, color=green, style=bold, label="Local variable int j"];
m0_64 -> m0_65  [key=0, style=solid, color=green];
m0_64 -> m0_68  [key=1, style=dashed, color=green, label=j];
m0_64 -> m0_73  [key=1, style=dashed, color=green, label=j];
m0_66 -> m0_54  [key=3, color=green, style=bold, label="Local variable int k"];
m0_66 -> m0_68  [key=1, style=dashed, color=green, label=k];
m0_66 -> m0_67  [key=0, style=solid, color=green];
m0_66 -> m0_72  [key=1, style=dashed, color=green, label=k];
m0_55 -> m0_56  [key=0, style=solid, color=green];
m0_55 -> m0_64  [key=0, style=solid, color=green];
m0_58 -> m0_59  [key=0, style=solid, color=green];
m0_58 -> m0_76  [key=2, style=dotted, color=green];
m0_63 -> m0_55  [key=0, style=solid, color=green];
m0_63 -> m0_63  [key=1, style=dashed, color=green, label=j];
m0_57 -> m0_58  [key=0, style=solid, color=green];
m0_57 -> m0_63  [key=0, style=solid, color=green];
m0_59 -> m0_60  [key=0, style=solid, color=green];
m0_59 -> m0_32  [key=2, style=dotted, color=green];
m0_62 -> m0_57  [key=0, style=solid, color=green];
m0_62 -> m0_62  [key=1, style=dashed, color=green, label=k];
m0_65 -> m0_66  [key=0, style=solid, color=green];
m0_65 -> m0_74  [key=0, style=solid, color=green];
m0_68 -> m0_69  [key=0, style=solid, color=green];
m0_68 -> m0_76  [key=2, style=dotted, color=green];
m0_73 -> m0_65  [key=0, style=solid, color=green];
m0_73 -> m0_73  [key=1, style=dashed, color=green, label=j];
m0_61 -> m0_62  [key=0, style=solid, color=green];
m0_61 -> m0_34  [key=2, style=dotted, color=green];
m0_60 -> m0_61  [key=0, style=solid, color=green];
m0_60 -> m0_75  [key=2, style=dotted, color=green];
m0_67 -> m0_68  [key=0, style=solid, color=green];
m0_67 -> m0_73  [key=0, style=solid, color=green];
m0_69 -> m0_70  [key=0, style=solid, color=green];
m0_69 -> m0_32  [key=2, style=dotted, color=green];
m0_72 -> m0_67  [key=0, style=solid, color=green];
m0_72 -> m0_72  [key=1, style=dashed, color=green, label=k];
m0_71 -> m0_72  [key=0, style=solid, color=green];
m0_71 -> m0_34  [key=2, style=dotted, color=green];
m0_70 -> m0_71  [key=0, style=solid, color=green];
m0_70 -> m0_75  [key=2, style=dotted, color=green];
m0_52 -> m0_53  [key=0, style=solid];
m0_52 -> m0_75  [key=2, style=dotted];
m0_37 -> m0_32  [key=2, style=dotted];
m0_37 -> m0_38  [key=0, style=solid];
m0_40 -> m0_32  [key=2, style=dotted];
m0_40 -> m0_41  [key=0, style=solid];
m0_44 -> m0_32  [key=2, style=dotted];
m0_44 -> m0_45  [key=0, style=solid];
m0_47 -> m0_32  [key=2, style=dotted];
m0_47 -> m0_48  [key=0, style=solid];
m0_51 -> m0_32  [key=2, style=dotted];
m0_51 -> m0_52  [key=0, style=solid];
m0_38 -> m0_75  [key=2, style=dotted];
m0_38 -> m0_39  [key=0, style=solid];
m0_41 -> m0_75  [key=2, style=dotted];
m0_41 -> m0_42  [key=0, style=solid];
m0_41 -> m0_43  [key=1, style=dashed, color=darkseagreen4, label=i];
m0_45 -> m0_75  [key=2, style=dotted];
m0_45 -> m0_46  [key=0, style=solid];
m0_48 -> m0_75  [key=2, style=dotted];
m0_48 -> m0_49  [key=0, style=solid];
m0_48 -> m0_50  [key=1, style=dashed, color=darkseagreen4, label=i];
m0_39 -> m0_34  [key=2, style=dotted];
m0_39 -> m0_40  [key=0, style=solid];
m0_42 -> m0_34  [key=2, style=dotted];
m0_42 -> m0_43  [key=0, style=solid];
m0_43 -> m0_34  [key=2, style=dotted];
m0_43 -> m0_44  [key=0, style=solid];
m0_46 -> m0_34  [key=2, style=dotted];
m0_46 -> m0_47  [key=0, style=solid];
m0_49 -> m0_34  [key=2, style=dotted];
m0_49 -> m0_50  [key=0, style=solid];
m0_50 -> m0_34  [key=2, style=dotted];
m0_50 -> m0_51  [key=0, style=solid];
m0_36 -> m0_37  [key=0, style=solid];
m0_74 -> m0_35  [key=0, style=bold, color=blue];
m0_0 -> m0_1  [key=0, style=solid];
m0_2 -> m0_32  [key=2, style=dotted];
m0_2 -> m0_3  [key=0, style=solid];
m0_5 -> m0_32  [key=2, style=dotted];
m0_5 -> m0_6  [key=0, style=solid];
m0_9 -> m0_32  [key=2, style=dotted];
m0_9 -> m0_10  [key=0, style=solid];
m0_14 -> m0_32  [key=2, style=dotted];
m0_14 -> m0_15  [key=0, style=solid];
m0_18 -> m0_32  [key=2, style=dotted];
m0_18 -> m0_19  [key=0, style=solid];
m0_22 -> m0_32  [key=2, style=dotted];
m0_22 -> m0_23  [key=0, style=solid];
m0_27 -> m0_32  [key=2, style=dotted];
m0_27 -> m0_28  [key=0, style=solid];
m0_4 -> m0_34  [key=2, style=dotted];
m0_4 -> m0_5  [key=0, style=solid];
m0_7 -> m0_34  [key=2, style=dotted];
m0_7 -> m0_8  [key=0, style=solid];
m0_8 -> m0_34  [key=2, style=dotted];
m0_8 -> m0_9  [key=0, style=solid];
m0_11 -> m0_34  [key=2, style=dotted];
m0_11 -> m0_12  [key=0, style=solid];
m0_16 -> m0_34  [key=2, style=dotted];
m0_16 -> m0_17  [key=0, style=solid];
m0_20 -> m0_34  [key=2, style=dotted];
m0_20 -> m0_21  [key=0, style=solid];
m0_21 -> m0_34  [key=2, style=dotted];
m0_21 -> m0_22  [key=0, style=solid];
m0_24 -> m0_34  [key=2, style=dotted];
m0_24 -> m0_25  [key=0, style=solid];
m0_29 -> m0_34  [key=2, style=dotted];
m0_29 -> m0_30  [key=0, style=solid];
m0_1 -> m0_2  [key=0, style=solid];
m0_3 -> m0_4  [key=0, style=solid];
m0_3 -> d334  [key=2, style=dotted];
m0_6 -> m0_7  [key=0, style=solid];
m0_6 -> m0_8  [key=1, style=dashed, color=darkseagreen4, label=l];
m0_6 -> d334  [key=2, style=dotted];
m0_10 -> m0_11  [key=0, style=solid];
m0_10 -> d334  [key=2, style=dotted];
m0_12 -> m0_14  [key=1, style=dashed, color=darkseagreen4, label=i];
m0_12 -> m0_12  [key=3, color=darkorchid, style=bold, label="Local variable int i"];
m0_12 -> m0_13  [key=0, style=solid];
m0_12 -> m0_17  [key=1, style=dashed, color=darkseagreen4, label=i];
m0_13 -> m0_14  [key=0, style=solid];
m0_13 -> m0_18  [key=0, style=solid];
m0_15 -> m0_16  [key=0, style=solid];
m0_15 -> d334  [key=2, style=dotted];
m0_19 -> m0_20  [key=0, style=solid];
m0_19 -> m0_21  [key=1, style=dashed, color=darkseagreen4, label=l];
m0_19 -> d334  [key=2, style=dotted];
m0_23 -> m0_24  [key=0, style=solid];
m0_23 -> d334  [key=2, style=dotted];
m0_25 -> m0_27  [key=1, style=dashed, color=darkseagreen4, label=i];
m0_25 -> m0_12  [key=3, color=darkorchid, style=bold, label="Local variable int i"];
m0_25 -> m0_26  [key=0, style=solid];
m0_25 -> m0_30  [key=1, style=dashed, color=darkseagreen4, label=i];
m0_26 -> m0_27  [key=0, style=solid];
m0_26 -> m0_31  [key=0, style=solid];
m0_28 -> m0_29  [key=0, style=solid];
m0_28 -> d334  [key=2, style=dotted];
m0_17 -> m0_13  [key=0, style=solid];
m0_17 -> m0_17  [key=1, style=dashed, color=darkseagreen4, label=i];
m0_30 -> m0_26  [key=0, style=solid];
m0_30 -> m0_30  [key=1, style=dashed, color=darkseagreen4, label=i];
m0_31 -> m0_0  [key=0, style=bold, color=blue];
m1_158 -> m1_159  [key=0, style=solid];
m1_159 -> m1_32  [key=2, style=dotted];
m1_159 -> m1_33  [key=2, style=dotted];
m1_159 -> m1_160  [key=0, style=solid];
m1_159 -> m1_163  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_160 -> m1_161  [key=0, style=solid];
m1_160 -> m1_102  [key=2, style=dotted];
m1_160 -> m1_162  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_161 -> m1_158  [key=0, style=bold, color=blue];
m1_418 -> m1_419  [key=0, style=solid];
m1_419 -> m1_32  [key=2, style=dotted];
m1_419 -> m1_33  [key=2, style=dotted];
m1_419 -> m1_420  [key=0, style=solid];
m1_419 -> m1_62  [key=2, style=dotted];
m1_419 -> m1_79  [key=2, style=dotted];
m1_419 -> m1_322  [key=2, style=dotted];
m1_420 -> m1_10  [key=2, style=dotted];
m1_420 -> m1_11  [key=2, style=dotted];
m1_420 -> m1_421  [key=0, style=solid];
m1_420 -> m1_422  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_420 -> m1_423  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_420 -> m1_424  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_422 -> m1_12  [key=2, style=dotted];
m1_422 -> m1_423  [key=0, style=solid];
m1_423 -> m1_12  [key=2, style=dotted];
m1_423 -> m1_424  [key=0, style=solid];
m1_424 -> m1_12  [key=2, style=dotted];
m1_424 -> m1_425  [key=0, style=solid];
m1_421 -> m1_422  [key=0, style=solid];
m1_421 -> m1_70  [key=2, style=dotted];
m1_425 -> m1_418  [key=0, style=bold, color=blue];
m1_217 -> m1_218  [key=0, style=solid];
m1_221 -> m1_12  [key=2, style=dotted];
m1_221 -> m1_222  [key=0, style=solid];
m1_222 -> m1_12  [key=2, style=dotted];
m1_222 -> m1_223  [key=0, style=solid];
m1_218 -> m1_62  [key=2, style=dotted];
m1_218 -> m1_219  [key=0, style=solid];
m1_219 -> m1_34  [key=2, style=dotted];
m1_219 -> m1_221  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_219 -> m1_222  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_219 -> m1_220  [key=0, style=solid];
m1_220 -> m1_221  [key=0, style=solid];
m1_220 -> m1_70  [key=2, style=dotted];
m1_223 -> m1_217  [key=0, style=bold, color=blue];
m1_154 -> m1_155  [key=0, style=solid];
m1_156 -> m1_34  [key=2, style=dotted];
m1_156 -> m1_157  [key=0, style=solid];
m1_156 -> m1_92  [key=2, style=dotted];
m1_155 -> m1_156  [key=0, style=solid];
m1_155 -> m1_150  [key=2, style=dotted];
m1_157 -> m1_154  [key=0, style=bold, color=blue];
m1_384 -> m1_385  [key=0, style=solid];
m1_386 -> m1_10  [key=2, style=dotted];
m1_386 -> m1_11  [key=2, style=dotted];
m1_386 -> m1_387  [key=0, style=solid];
m1_386 -> m1_388  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_388 -> m1_12  [key=2, style=dotted];
m1_388 -> m1_389  [key=0, style=solid];
m1_385 -> m1_386  [key=0, style=solid];
m1_385 -> m1_62  [key=2, style=dotted];
m1_387 -> m1_388  [key=0, style=solid];
m1_387 -> m1_70  [key=2, style=dotted];
m1_389 -> m1_384  [key=0, style=bold, color=blue];
m1_10 -> m1_11  [key=0, style=solid];
m1_10 -> m1_12  [key=0, style=solid];
m1_9 -> m1_10  [key=0, style=solid];
m1_9 -> m1_11  [key=1, style=dashed, color=darkseagreen4, label=object];
m1_98 -> m1_99  [key=0, style=solid];
m1_99 -> m1_32  [key=2, style=dotted];
m1_99 -> m1_33  [key=2, style=dotted];
m1_99 -> m1_100  [key=0, style=solid];
m1_99 -> m1_104  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_100 -> m1_101  [key=0, style=solid];
m1_100 -> m1_102  [key=2, style=dotted];
m1_100 -> m1_103  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_101 -> m1_98  [key=0, style=bold, color=blue];
m1_426 -> m1_427  [key=0, style=solid];
m1_429 -> m1_12  [key=2, style=dotted];
m1_429 -> m1_430  [key=0, style=solid];
m1_428 -> m1_34  [key=2, style=dotted];
m1_428 -> m1_429  [key=0, style=solid];
m1_427 -> m1_428  [key=0, style=solid];
m1_427 -> m1_431  [key=2, style=dotted];
m1_430 -> m1_426  [key=0, style=bold, color=blue];
m1_369 -> m1_370  [key=0, style=solid];
m1_370 -> m1_32  [key=2, style=dotted];
m1_370 -> m1_33  [key=2, style=dotted];
m1_370 -> m1_371  [key=0, style=solid];
m1_370 -> m1_62  [key=2, style=dotted];
m1_370 -> m1_322  [key=2, style=dotted];
m1_374 -> m1_32  [key=2, style=dotted];
m1_374 -> m1_33  [key=2, style=dotted];
m1_374 -> m1_375  [key=0, style=solid];
m1_374 -> m1_322  [key=2, style=dotted];
m1_374 -> m1_307  [key=2, style=dotted];
m1_374 -> m1_308  [key=2, style=dotted];
m1_371 -> m1_10  [key=2, style=dotted];
m1_371 -> m1_11  [key=2, style=dotted];
m1_371 -> m1_374  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_371 -> m1_372  [key=0, style=solid];
m1_371 -> m1_373  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_373 -> m1_374  [key=0, style=solid];
m1_373 -> m1_12  [key=2, style=dotted];
m1_372 -> m1_373  [key=0, style=solid];
m1_372 -> m1_70  [key=2, style=dotted];
m1_375 -> m1_369  [key=0, style=bold, color=blue];
m1_323 -> m1_324  [key=0, style=solid];
m1_328 -> m1_10  [key=2, style=dotted];
m1_328 -> m1_11  [key=2, style=dotted];
m1_328 -> m1_329  [key=0, style=solid];
m1_328 -> m1_330  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_328 -> m1_331  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_328 -> m1_332  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_328 -> m1_333  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_328 -> m1_334  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_328 -> m1_335  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_328 -> m1_336  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_328 -> m1_337  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_328 -> m1_338  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_328 -> m1_339  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_330 -> m1_12  [key=2, style=dotted];
m1_330 -> m1_331  [key=0, style=solid];
m1_333 -> m1_12  [key=2, style=dotted];
m1_333 -> m1_334  [key=0, style=solid];
m1_335 -> m1_12  [key=2, style=dotted];
m1_335 -> m1_336  [key=0, style=solid];
m1_339 -> m1_12  [key=2, style=dotted];
m1_339 -> m1_340  [key=0, style=solid];
m1_327 -> m1_328  [key=0, style=solid];
m1_327 -> m1_62  [key=2, style=dotted];
m1_327 -> m1_331  [key=1, style=dashed, color=darkseagreen4, label=a];
m1_329 -> m1_330  [key=0, style=solid];
m1_329 -> m1_70  [key=2, style=dotted];
m1_331 -> m1_307  [key=2, style=dotted];
m1_331 -> m1_308  [key=2, style=dotted];
m1_331 -> m1_332  [key=0, style=solid];
m1_332 -> m1_307  [key=2, style=dotted];
m1_332 -> m1_308  [key=2, style=dotted];
m1_332 -> m1_333  [key=0, style=solid];
m1_334 -> m1_307  [key=2, style=dotted];
m1_334 -> m1_308  [key=2, style=dotted];
m1_334 -> m1_335  [key=0, style=solid];
m1_336 -> m1_307  [key=2, style=dotted];
m1_336 -> m1_308  [key=2, style=dotted];
m1_336 -> m1_337  [key=0, style=solid];
m1_337 -> m1_307  [key=2, style=dotted];
m1_337 -> m1_308  [key=2, style=dotted];
m1_337 -> m1_322  [key=2, style=dotted];
m1_337 -> m1_338  [key=0, style=solid];
m1_337 -> m1_293  [key=2, style=dotted];
m1_338 -> m1_307  [key=2, style=dotted];
m1_338 -> m1_308  [key=2, style=dotted];
m1_338 -> m1_322  [key=2, style=dotted];
m1_338 -> m1_339  [key=0, style=solid];
m1_326 -> m1_322  [key=2, style=dotted];
m1_326 -> m1_327  [key=0, style=solid];
m1_326 -> m1_336  [key=1, style=dashed, color=darkseagreen4, label=o3];
m1_326 -> m1_293  [key=2, style=dotted];
m1_324 -> m1_327  [key=1, style=dashed, color=darkseagreen4, label=o1];
m1_324 -> m1_332  [key=1, style=dashed, color=darkseagreen4, label=o1];
m1_324 -> m1_293  [key=2, style=dotted];
m1_324 -> m1_325  [key=0, style=solid];
m1_325 -> m1_327  [key=1, style=dashed, color=darkseagreen4, label=o2];
m1_325 -> m1_334  [key=1, style=dashed, color=darkseagreen4, label=o2];
m1_325 -> m1_326  [key=0, style=solid];
m1_325 -> m1_293  [key=2, style=dotted];
m1_340 -> m1_323  [key=0, style=bold, color=blue];
m1_350 -> m1_351  [key=0, style=solid];
m1_353 -> m1_12  [key=2, style=dotted];
m1_353 -> m1_354  [key=0, style=solid];
m1_352 -> m1_34  [key=2, style=dotted];
m1_352 -> m1_353  [key=0, style=solid];
m1_351 -> m1_9  [key=2, style=dotted];
m1_351 -> m1_352  [key=0, style=solid];
m1_354 -> m1_350  [key=0, style=bold, color=blue];
m1_184 -> m1_185  [key=0, style=solid];
m1_185 -> m1_62  [key=2, style=dotted];
m1_185 -> m1_186  [key=0, style=solid];
m1_185 -> m1_194  [key=1, style=dashed, color=darkseagreen4, label=a];
m1_185 -> m1_187  [key=1, style=dashed, color=darkseagreen4, label=a];
m1_185 -> m1_197  [key=1, style=dashed, color=darkseagreen4, label=a];
m1_185 -> m1_188  [key=1, style=dashed, color=darkseagreen4, label=a];
m1_185 -> m1_200  [key=1, style=dashed, color=darkseagreen4, label=a];
m1_186 -> m1_102  [key=2, style=dotted];
m1_186 -> m1_187  [key=0, style=solid];
m1_186 -> m1_193  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_187 -> m1_102  [key=2, style=dotted];
m1_187 -> m1_188  [key=0, style=solid];
m1_187 -> m1_196  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_188 -> m1_102  [key=2, style=dotted];
m1_188 -> m1_189  [key=0, style=solid];
m1_188 -> m1_199  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_190 -> m1_102  [key=2, style=dotted];
m1_190 -> m1_191  [key=0, style=solid];
m1_190 -> m1_202  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_189 -> m1_190  [key=0, style=solid];
m1_189 -> m1_203  [key=1, style=dashed, color=darkseagreen4, label=a];
m1_189 -> m1_192  [key=2, style=dotted];
m1_191 -> m1_184  [key=0, style=bold, color=blue];
m1_432 -> m1_433  [key=0, style=solid, color=green];
m1_433 -> m1_434  [key=0, style=solid, color=green];
m1_433 -> m1_448  [key=2, style=dotted, color=green];
m1_433 -> d220  [key=2, style=dotted, color=green];
m1_433 -> m1_450  [key=2, style=dotted, color=green];
m1_433 -> m1_451  [key=2, style=dotted, color=green];
m1_433 -> m1_452  [key=2, style=dotted, color=green];
m1_433 -> m1_453  [key=2, style=dotted, color=green];
m1_433 -> m1_454  [key=2, style=dotted, color=green];
m1_433 -> m1_455  [key=2, style=dotted, color=green];
m1_434 -> m1_435  [key=0, style=solid];
m1_434 -> m1_32  [key=2, style=dotted];
m1_434 -> m1_33  [key=2, style=dotted];
m1_434 -> m1_456  [key=2, style=dotted];
m1_434 -> m1_457  [key=2, style=dotted];
m1_434 -> m1_458  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_434 -> m1_437  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_434 -> m1_439  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_434 -> m1_441  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_434 -> m1_443  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_434 -> m1_445  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_435 -> m1_436  [key=0, style=solid];
m1_435 -> m1_10  [key=2, style=dotted];
m1_435 -> m1_11  [key=2, style=dotted];
m1_437 -> m1_438  [key=0, style=solid];
m1_437 -> m1_10  [key=2, style=dotted];
m1_437 -> m1_11  [key=2, style=dotted];
m1_439 -> m1_440  [key=0, style=solid];
m1_439 -> m1_10  [key=2, style=dotted];
m1_439 -> m1_11  [key=2, style=dotted];
m1_441 -> m1_442  [key=0, style=solid];
m1_441 -> m1_10  [key=2, style=dotted];
m1_441 -> m1_11  [key=2, style=dotted];
m1_443 -> m1_444  [key=0, style=solid];
m1_443 -> m1_10  [key=2, style=dotted];
m1_443 -> m1_11  [key=2, style=dotted];
m1_445 -> m1_446  [key=0, style=solid];
m1_445 -> m1_10  [key=2, style=dotted];
m1_445 -> m1_11  [key=2, style=dotted];
m1_446 -> m1_447  [key=0, style=solid];
m1_446 -> m1_12  [key=2, style=dotted];
m1_436 -> m1_437  [key=0, style=solid];
m1_436 -> m1_12  [key=2, style=dotted];
m1_438 -> m1_439  [key=0, style=solid];
m1_438 -> m1_12  [key=2, style=dotted];
m1_440 -> m1_441  [key=0, style=solid];
m1_440 -> m1_12  [key=2, style=dotted];
m1_442 -> m1_443  [key=0, style=solid];
m1_442 -> m1_12  [key=2, style=dotted];
m1_444 -> m1_445  [key=0, style=solid];
m1_444 -> m1_12  [key=2, style=dotted];
m1_447 -> m1_432  [key=0, style=bold, color=blue];
m1_125 -> m1_126  [key=0, style=solid];
m1_126 -> m1_62  [key=2, style=dotted];
m1_126 -> m1_127  [key=0, style=solid];
m1_126 -> m1_130  [key=1, style=dashed, color=darkseagreen4, label=a];
m1_127 -> m1_102  [key=2, style=dotted];
m1_127 -> m1_128  [key=0, style=solid];
m1_127 -> m1_129  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_128 -> m1_125  [key=0, style=bold, color=blue];
m1_355 -> m1_356  [key=0, style=solid];
m1_356 -> m1_32  [key=2, style=dotted];
m1_356 -> m1_33  [key=2, style=dotted];
m1_356 -> m1_357  [key=0, style=solid];
m1_356 -> m1_62  [key=2, style=dotted];
m1_360 -> m1_32  [key=2, style=dotted];
m1_360 -> m1_33  [key=2, style=dotted];
m1_360 -> m1_361  [key=0, style=solid];
m1_360 -> m1_307  [key=2, style=dotted];
m1_360 -> m1_308  [key=2, style=dotted];
m1_357 -> m1_10  [key=2, style=dotted];
m1_357 -> m1_11  [key=2, style=dotted];
m1_357 -> m1_360  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_357 -> m1_358  [key=0, style=solid];
m1_357 -> m1_359  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_359 -> m1_360  [key=0, style=solid];
m1_359 -> m1_12  [key=2, style=dotted];
m1_358 -> m1_359  [key=0, style=solid];
m1_358 -> m1_70  [key=2, style=dotted];
m1_361 -> m1_355  [key=0, style=bold, color=blue];
m1_4 -> m1_12  [key=2, style=dotted];
m1_4 -> m1_5  [key=0, style=solid];
m1_47 -> m1_48  [key=0, style=solid];
m1_48 -> m1_32  [key=2, style=dotted];
m1_48 -> m1_33  [key=2, style=dotted];
m1_48 -> m1_49  [key=0, style=solid];
m1_48 -> m1_50  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_49 -> m1_50  [key=0, style=solid];
m1_49 -> m1_34  [key=2, style=dotted];
m1_50 -> m1_12  [key=2, style=dotted];
m1_50 -> m1_51  [key=0, style=solid];
m1_51 -> m1_47  [key=0, style=bold, color=blue];
m1_461 -> m1_462  [key=0, style=solid];
m1_469 -> m1_457  [key=2, style=dotted];
m1_469 -> m1_470  [key=0, style=solid];
m1_469 -> m1_34  [key=2, style=dotted];
m1_469 -> m1_480  [key=2, style=dotted];
m1_469 -> m1_482  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_469 -> m1_472  [key=1, style=dashed, color=darkseagreen4, label=storeNames];
m1_469 -> m1_473  [key=1, style=dashed, color=darkseagreen4, label=storeNames];
m1_469 -> m1_474  [key=1, style=dashed, color=darkseagreen4, label=storeNames];
m1_470 -> m1_457  [key=2, style=dotted];
m1_470 -> m1_471  [key=0, style=solid];
m1_470 -> m1_480  [key=2, style=dotted];
m1_470 -> m1_485  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_470 -> m1_475  [key=1, style=dashed, color=darkseagreen4, label=firstProductNames];
m1_470 -> m1_476  [key=1, style=dashed, color=darkseagreen4, label=firstProductNames];
m1_470 -> m1_477  [key=1, style=dashed, color=darkseagreen4, label=firstProductNames];
m1_462 -> m1_469  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_462 -> m1_470  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_462 -> m1_463  [key=0, style=solid];
m1_462 -> m1_9  [key=2, style=dotted];
m1_462 -> m1_464  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_462 -> m1_465  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_462 -> m1_471  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_468 -> m1_469  [key=0, style=solid];
m1_468 -> m1_12  [key=2, style=dotted];
m1_472 -> m1_12  [key=2, style=dotted];
m1_472 -> m1_473  [key=0, style=solid];
m1_473 -> m1_12  [key=2, style=dotted];
m1_473 -> m1_474  [key=0, style=solid];
m1_474 -> m1_12  [key=2, style=dotted];
m1_474 -> m1_475  [key=0, style=solid];
m1_471 -> m1_472  [key=0, style=solid];
m1_471 -> m1_481  [key=2, style=dotted];
m1_471 -> m1_488  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_471 -> m1_478  [key=1, style=dashed, color=darkseagreen4, label=totalPrice];
m1_475 -> m1_12  [key=2, style=dotted];
m1_475 -> m1_476  [key=0, style=solid];
m1_476 -> m1_12  [key=2, style=dotted];
m1_476 -> m1_477  [key=0, style=solid];
m1_477 -> m1_12  [key=2, style=dotted];
m1_477 -> m1_478  [key=0, style=solid];
m1_466 -> m1_12  [key=2, style=dotted];
m1_466 -> m1_467  [key=0, style=solid];
m1_467 -> m1_12  [key=2, style=dotted];
m1_467 -> m1_468  [key=0, style=solid];
m1_478 -> m1_12  [key=2, style=dotted];
m1_478 -> m1_479  [key=0, style=solid];
m1_463 -> m1_34  [key=2, style=dotted];
m1_463 -> m1_466  [key=1, style=dashed, color=darkseagreen4, label=name];
m1_463 -> m1_464  [key=0, style=solid];
m1_464 -> m1_34  [key=2, style=dotted];
m1_464 -> m1_467  [key=1, style=dashed, color=darkseagreen4, label=productPrice];
m1_464 -> m1_465  [key=0, style=solid];
m1_465 -> m1_468  [key=1, style=dashed, color=darkseagreen4, label=productName];
m1_465 -> m1_34  [key=2, style=dotted];
m1_465 -> m1_466  [key=0, style=solid];
m1_479 -> m1_461  [key=0, style=bold, color=blue];
m1_36 -> m1_32  [key=2, style=dotted];
m1_36 -> m1_33  [key=2, style=dotted];
m1_36 -> m1_37  [key=0, style=solid];
m1_36 -> m1_38  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_36 -> m1_39  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_93 -> m1_94  [key=0, style=solid];
m1_94 -> m1_32  [key=2, style=dotted];
m1_94 -> m1_33  [key=2, style=dotted];
m1_94 -> m1_95  [key=0, style=solid];
m1_95 -> m1_96  [key=0, style=solid];
m1_95 -> m1_34  [key=2, style=dotted];
m1_96 -> m1_97  [key=0, style=solid];
m1_96 -> m1_92  [key=2, style=dotted];
m1_97 -> m1_93  [key=0, style=bold, color=blue];
m1_32 -> m1_33  [key=0, style=solid];
m1_32 -> m1_34  [key=0, style=solid];
m1_224 -> m1_225  [key=0, style=solid];
m1_227 -> m1_10  [key=2, style=dotted];
m1_227 -> m1_11  [key=2, style=dotted];
m1_227 -> m1_228  [key=0, style=solid];
m1_227 -> m1_229  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_227 -> m1_230  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_227 -> m1_231  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_232 -> m1_10  [key=2, style=dotted];
m1_232 -> m1_11  [key=2, style=dotted];
m1_232 -> m1_233  [key=0, style=solid];
m1_232 -> m1_234  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_235 -> m1_10  [key=2, style=dotted];
m1_235 -> m1_11  [key=2, style=dotted];
m1_235 -> m1_236  [key=0, style=solid];
m1_235 -> m1_237  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_238 -> m1_10  [key=2, style=dotted];
m1_238 -> m1_11  [key=2, style=dotted];
m1_238 -> m1_239  [key=0, style=solid];
m1_240 -> m1_10  [key=2, style=dotted];
m1_240 -> m1_11  [key=2, style=dotted];
m1_240 -> m1_241  [key=0, style=solid];
m1_240 -> m1_242  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_243 -> m1_10  [key=2, style=dotted];
m1_243 -> m1_11  [key=2, style=dotted];
m1_243 -> m1_244  [key=0, style=solid];
m1_243 -> m1_245  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_243 -> m1_246  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_243 -> m1_247  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_243 -> m1_248  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_243 -> m1_249  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_243 -> m1_250  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_243 -> m1_251  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_243 -> m1_252  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_243 -> m1_253  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_254 -> m1_10  [key=2, style=dotted];
m1_254 -> m1_11  [key=2, style=dotted];
m1_254 -> m1_255  [key=0, style=solid];
m1_254 -> m1_256  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_254 -> m1_257  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_254 -> m1_258  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_254 -> m1_259  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_254 -> m1_260  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_228 -> m1_12  [key=2, style=dotted];
m1_228 -> m1_229  [key=0, style=solid];
m1_229 -> m1_12  [key=2, style=dotted];
m1_229 -> m1_230  [key=0, style=solid];
m1_230 -> m1_12  [key=2, style=dotted];
m1_230 -> m1_231  [key=0, style=solid];
m1_231 -> m1_12  [key=2, style=dotted];
m1_231 -> m1_232  [key=0, style=solid];
m1_233 -> m1_12  [key=2, style=dotted];
m1_233 -> m1_234  [key=0, style=solid];
m1_234 -> m1_12  [key=2, style=dotted];
m1_234 -> m1_235  [key=0, style=solid];
m1_236 -> m1_12  [key=2, style=dotted];
m1_236 -> m1_237  [key=0, style=solid];
m1_237 -> m1_12  [key=2, style=dotted];
m1_237 -> m1_238  [key=0, style=solid];
m1_239 -> m1_12  [key=2, style=dotted];
m1_239 -> m1_240  [key=0, style=solid];
m1_241 -> m1_12  [key=2, style=dotted];
m1_241 -> m1_242  [key=0, style=solid];
m1_242 -> m1_12  [key=2, style=dotted];
m1_242 -> m1_243  [key=0, style=solid];
m1_244 -> m1_12  [key=2, style=dotted];
m1_244 -> m1_245  [key=0, style=solid];
m1_245 -> m1_12  [key=2, style=dotted];
m1_245 -> m1_246  [key=0, style=solid];
m1_246 -> m1_12  [key=2, style=dotted];
m1_246 -> m1_247  [key=0, style=solid];
m1_247 -> m1_12  [key=2, style=dotted];
m1_247 -> m1_248  [key=0, style=solid];
m1_248 -> m1_12  [key=2, style=dotted];
m1_248 -> m1_249  [key=0, style=solid];
m1_249 -> m1_12  [key=2, style=dotted];
m1_249 -> m1_250  [key=0, style=solid];
m1_250 -> m1_12  [key=2, style=dotted];
m1_250 -> m1_251  [key=0, style=solid];
m1_251 -> m1_12  [key=2, style=dotted];
m1_251 -> m1_252  [key=0, style=solid];
m1_252 -> m1_12  [key=2, style=dotted];
m1_252 -> m1_253  [key=0, style=solid];
m1_253 -> m1_12  [key=2, style=dotted];
m1_253 -> m1_254  [key=0, style=solid];
m1_255 -> m1_12  [key=2, style=dotted];
m1_255 -> m1_256  [key=0, style=solid];
m1_256 -> m1_12  [key=2, style=dotted];
m1_256 -> m1_257  [key=0, style=solid];
m1_257 -> m1_12  [key=2, style=dotted];
m1_257 -> m1_258  [key=0, style=solid];
m1_258 -> m1_12  [key=2, style=dotted];
m1_258 -> m1_259  [key=0, style=solid];
m1_259 -> m1_12  [key=2, style=dotted];
m1_259 -> m1_260  [key=0, style=solid];
m1_260 -> m1_12  [key=2, style=dotted];
m1_260 -> m1_261  [key=0, style=solid];
m1_225 -> m1_227  [key=1, style=dashed, color=darkseagreen4, label=a];
m1_225 -> m1_232  [key=1, style=dashed, color=darkseagreen4, label=a];
m1_225 -> m1_235  [key=1, style=dashed, color=darkseagreen4, label=a];
m1_225 -> m1_238  [key=1, style=dashed, color=darkseagreen4, label=a];
m1_225 -> m1_240  [key=1, style=dashed, color=darkseagreen4, label=a];
m1_225 -> m1_243  [key=1, style=dashed, color=darkseagreen4, label=a];
m1_225 -> m1_254  [key=1, style=dashed, color=darkseagreen4, label=a];
m1_225 -> m1_62  [key=2, style=dotted];
m1_225 -> m1_226  [key=0, style=solid];
m1_226 -> m1_227  [key=0, style=solid];
m1_226 -> m1_226  [key=3, color=darkorchid, style=bold, label="Local variable System.Collections.Generic.IList<Newtonsoft.Json.Linq.JToken> t"];
m1_261 -> m1_224  [key=0, style=bold, color=blue];
m1_283 -> m1_284  [key=0, style=solid];
m1_287 -> m1_10  [key=2, style=dotted];
m1_287 -> m1_11  [key=2, style=dotted];
m1_287 -> m1_288  [key=0, style=solid];
m1_287 -> m1_289  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_287 -> m1_290  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_287 -> m1_291  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_289 -> m1_12  [key=2, style=dotted];
m1_289 -> m1_290  [key=0, style=solid];
m1_290 -> m1_12  [key=2, style=dotted];
m1_290 -> m1_291  [key=0, style=solid];
m1_291 -> m1_12  [key=2, style=dotted];
m1_291 -> m1_292  [key=0, style=solid];
m1_286 -> m1_287  [key=0, style=solid];
m1_286 -> m1_62  [key=2, style=dotted];
m1_288 -> m1_289  [key=0, style=solid];
m1_288 -> m1_70  [key=2, style=dotted];
m1_284 -> m1_286  [key=1, style=dashed, color=darkseagreen4, label=o1];
m1_284 -> m1_285  [key=0, style=solid];
m1_284 -> m1_293  [key=2, style=dotted];
m1_285 -> m1_286  [key=0, style=solid];
m1_285 -> m1_293  [key=2, style=dotted];
m1_292 -> m1_283  [key=0, style=bold, color=blue];
m1_71 -> m1_72  [key=0, style=solid];
m1_72 -> m1_33  [key=2, style=dotted];
m1_72 -> m1_73  [key=0, style=solid];
m1_72 -> m1_79  [key=2, style=dotted];
m1_73 -> m1_10  [key=2, style=dotted];
m1_73 -> m1_11  [key=2, style=dotted];
m1_73 -> m1_74  [key=0, style=solid];
m1_73 -> m1_75  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_73 -> m1_76  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_73 -> m1_77  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_75 -> m1_12  [key=2, style=dotted];
m1_75 -> m1_76  [key=0, style=solid];
m1_76 -> m1_12  [key=2, style=dotted];
m1_76 -> m1_77  [key=0, style=solid];
m1_77 -> m1_12  [key=2, style=dotted];
m1_77 -> m1_78  [key=0, style=solid];
m1_74 -> m1_75  [key=0, style=solid];
m1_74 -> m1_70  [key=2, style=dotted];
m1_78 -> m1_71  [key=0, style=bold, color=blue];
m1_309 -> m1_310  [key=0, style=solid];
m1_314 -> m1_10  [key=2, style=dotted];
m1_314 -> m1_11  [key=2, style=dotted];
m1_314 -> m1_315  [key=0, style=solid];
m1_314 -> m1_316  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_314 -> m1_317  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_314 -> m1_318  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_314 -> m1_319  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_314 -> m1_320  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_316 -> m1_12  [key=2, style=dotted];
m1_316 -> m1_317  [key=0, style=solid];
m1_317 -> m1_12  [key=2, style=dotted];
m1_317 -> m1_318  [key=0, style=solid];
m1_318 -> m1_12  [key=2, style=dotted];
m1_318 -> m1_319  [key=0, style=solid];
m1_313 -> m1_314  [key=0, style=solid];
m1_313 -> m1_62  [key=2, style=dotted];
m1_315 -> m1_316  [key=0, style=solid];
m1_315 -> m1_70  [key=2, style=dotted];
m1_319 -> m1_307  [key=2, style=dotted];
m1_319 -> m1_308  [key=2, style=dotted];
m1_319 -> m1_322  [key=2, style=dotted];
m1_319 -> m1_320  [key=0, style=solid];
m1_319 -> m1_293  [key=2, style=dotted];
m1_320 -> m1_307  [key=2, style=dotted];
m1_320 -> m1_308  [key=2, style=dotted];
m1_320 -> m1_322  [key=2, style=dotted];
m1_320 -> m1_321  [key=0, style=solid];
m1_312 -> m1_322  [key=2, style=dotted];
m1_312 -> m1_313  [key=0, style=solid];
m1_312 -> m1_293  [key=2, style=dotted];
m1_310 -> m1_313  [key=1, style=dashed, color=darkseagreen4, label=o1];
m1_310 -> m1_311  [key=0, style=solid];
m1_310 -> m1_293  [key=2, style=dotted];
m1_311 -> m1_313  [key=1, style=dashed, color=darkseagreen4, label=o2];
m1_311 -> m1_312  [key=0, style=solid];
m1_311 -> m1_293  [key=2, style=dotted];
m1_321 -> m1_309  [key=0, style=bold, color=blue];
m1_0 -> m1_1  [key=0, style=solid];
m1_0 -> m1_2  [key=1, style=dashed, color=darkseagreen4, label=object];
m1_3 -> m1_10  [key=2, style=dotted];
m1_3 -> m1_11  [key=2, style=dotted];
m1_3 -> m1_4  [key=0, style=solid];
m1_3 -> m1_5  [key=1, style=dashed, color=darkseagreen4, label=tokens];
m1_3 -> m1_6  [key=1, style=dashed, color=darkseagreen4, label=tokens];
m1_3 -> m1_7  [key=1, style=dashed, color=darkseagreen4, label=tokens];
m1_3 -> m1_0  [key=0, style=bold, color=blue];
m1_5 -> m1_12  [key=2, style=dotted];
m1_5 -> m1_6  [key=0, style=solid];
m1_5 -> m1_7  [key=1, style=dashed, color=darkseagreen4, label=object];
m1_6 -> m1_12  [key=2, style=dotted];
m1_6 -> m1_7  [key=0, style=solid];
m1_6 -> m1_8  [key=0, style=solid];
m1_7 -> m1_12  [key=2, style=dotted];
m1_7 -> m1_8  [key=0, style=solid];
m1_7 -> m1_4  [key=2, style=dotted];
m1_2 -> m1_3  [key=0, style=solid];
m1_2 -> m1_9  [key=2, style=dotted];
m1_2 -> m1_4  [key=2, style=dotted];
m1_1 -> m1_2  [key=0, style=solid];
m1_1 -> m1_1  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m1_1 -> m1_3  [key=0, style=solid];
m1_8 -> m1_0  [key=0, style=bold, color=blue];
m1_8 -> m1_5  [key=0, style=bold, color=blue];
m1_38 -> m1_12  [key=2, style=dotted];
m1_38 -> m1_39  [key=0, style=solid];
m1_13 -> m1_14  [key=0, style=solid];
m1_13 -> m1_15  [key=1, style=dashed, color=darkseagreen4, label=object];
m1_14 -> m1_15  [key=0, style=solid];
m1_14 -> m1_16  [key=0, style=solid];
m1_14 -> m1_14  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m1_15 -> m1_16  [key=0, style=solid];
m1_15 -> m1_4  [key=2, style=dotted];
m1_15 -> m1_9  [key=2, style=dotted];
m1_16 -> m1_13  [key=0, style=bold, color=blue];
m1_16 -> m1_10  [key=2, style=dotted];
m1_16 -> m1_11  [key=2, style=dotted];
m1_16 -> m1_17  [key=0, style=solid];
m1_16 -> m1_18  [key=1, style=dashed, color=darkseagreen4, label=results];
m1_20 -> m1_21  [key=0, style=solid];
m1_20 -> m1_17  [key=0, style=bold, color=blue];
m1_24 -> m1_12  [key=2, style=dotted];
m1_24 -> m1_25  [key=0, style=solid];
m1_23 -> m1_24  [key=0, style=solid];
m1_23 -> m1_26  [key=2, style=dotted];
m1_22 -> m1_9  [key=2, style=dotted];
m1_22 -> m1_23  [key=0, style=solid];
m1_22 -> m1_36  [key=2, style=dotted];
m1_21 -> m1_22  [key=0, style=solid];
m1_21 -> m1_21  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m1_21 -> m1_23  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m1_21 -> m1_24  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m1_21 -> m1_25  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m1_21 -> m1_26  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m1_25 -> m1_20  [key=0, style=bold, color=blue];
m1_25 -> m1_26  [key=0, style=solid];
m1_25 -> m1_37  [key=2, style=dotted];
m1_17 -> m1_18  [key=0, style=solid];
m1_17 -> m1_19  [key=1, style=dashed, color=darkseagreen4, label=object];
m1_17 -> m1_12  [key=2, style=dotted];
m1_18 -> m1_19  [key=0, style=solid];
m1_18 -> m1_20  [key=0, style=solid];
m1_18 -> m1_12  [key=2, style=dotted];
m1_19 -> m1_20  [key=0, style=solid];
m1_19 -> m1_4  [key=2, style=dotted];
m1_19 -> m1_13  [key=0, style=bold, color=blue];
m1_210 -> m1_211  [key=0, style=solid];
m1_211 -> m1_62  [key=2, style=dotted];
m1_211 -> m1_212  [key=0, style=solid];
m1_211 -> m1_215  [key=1, style=dashed, color=darkseagreen4, label=a];
m1_212 -> m1_102  [key=2, style=dotted];
m1_212 -> m1_213  [key=0, style=solid];
m1_212 -> m1_214  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_213 -> m1_210  [key=0, style=bold, color=blue];
m1_205 -> m1_206  [key=0, style=solid];
m1_206 -> m1_62  [key=2, style=dotted];
m1_206 -> m1_207  [key=0, style=solid];
m1_207 -> m1_34  [key=2, style=dotted];
m1_207 -> m1_208  [key=0, style=solid];
m1_208 -> m1_92  [key=2, style=dotted];
m1_208 -> m1_209  [key=0, style=solid];
m1_209 -> m1_205  [key=0, style=bold, color=blue];
m1_80 -> m1_81  [key=0, style=solid];
m1_81 -> m1_32  [key=2, style=dotted];
m1_81 -> m1_33  [key=2, style=dotted];
m1_81 -> m1_82  [key=0, style=solid];
m1_82 -> m1_83  [key=0, style=solid];
m1_82 -> m1_34  [key=2, style=dotted];
m1_82 -> m1_84  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_82 -> m1_85  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_84 -> m1_12  [key=2, style=dotted];
m1_84 -> m1_85  [key=0, style=solid];
m1_85 -> m1_12  [key=2, style=dotted];
m1_85 -> m1_86  [key=0, style=solid];
m1_83 -> m1_84  [key=0, style=solid];
m1_83 -> m1_70  [key=2, style=dotted];
m1_86 -> m1_80  [key=0, style=bold, color=blue];
m1_33 -> m1_35  [key=0, style=solid];
m1_170 -> m1_171  [key=0, style=solid];
m1_171 -> m1_32  [key=2, style=dotted];
m1_171 -> m1_33  [key=2, style=dotted];
m1_171 -> m1_172  [key=0, style=solid];
m1_171 -> m1_175  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_172 -> m1_173  [key=0, style=solid];
m1_172 -> m1_102  [key=2, style=dotted];
m1_172 -> m1_174  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_173 -> m1_170  [key=0, style=bold, color=blue];
m1_42 -> m1_43  [key=0, style=solid];
m1_43 -> m1_32  [key=2, style=dotted];
m1_43 -> m1_33  [key=2, style=dotted];
m1_43 -> m1_44  [key=0, style=solid];
m1_44 -> m1_45  [key=0, style=solid];
m1_44 -> m1_34  [key=2, style=dotted];
m1_45 -> m1_12  [key=2, style=dotted];
m1_45 -> m1_46  [key=0, style=solid];
m1_46 -> m1_42  [key=0, style=bold, color=blue];
m1_362 -> m1_363  [key=0, style=solid];
m1_363 -> m1_32  [key=2, style=dotted];
m1_363 -> m1_33  [key=2, style=dotted];
m1_363 -> m1_364  [key=0, style=solid];
m1_363 -> m1_62  [key=2, style=dotted];
m1_367 -> m1_32  [key=2, style=dotted];
m1_367 -> m1_33  [key=2, style=dotted];
m1_367 -> m1_368  [key=0, style=solid];
m1_367 -> m1_307  [key=2, style=dotted];
m1_367 -> m1_308  [key=2, style=dotted];
m1_364 -> m1_10  [key=2, style=dotted];
m1_364 -> m1_11  [key=2, style=dotted];
m1_364 -> m1_367  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_364 -> m1_365  [key=0, style=solid];
m1_364 -> m1_366  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_366 -> m1_367  [key=0, style=solid];
m1_366 -> m1_12  [key=2, style=dotted];
m1_365 -> m1_366  [key=0, style=solid];
m1_365 -> m1_70  [key=2, style=dotted];
m1_368 -> m1_362  [key=0, style=bold, color=blue];
m1_63 -> m1_64  [key=0, style=solid];
m1_64 -> m1_32  [key=2, style=dotted];
m1_64 -> m1_33  [key=2, style=dotted];
m1_64 -> m1_65  [key=0, style=solid];
m1_65 -> m1_66  [key=0, style=solid];
m1_65 -> m1_34  [key=2, style=dotted];
m1_65 -> m1_67  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_65 -> m1_68  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_67 -> m1_12  [key=2, style=dotted];
m1_67 -> m1_68  [key=0, style=solid];
m1_68 -> m1_12  [key=2, style=dotted];
m1_68 -> m1_69  [key=0, style=solid];
m1_66 -> m1_67  [key=0, style=solid];
m1_66 -> m1_70  [key=2, style=dotted];
m1_69 -> m1_63  [key=0, style=bold, color=blue];
m1_294 -> m1_295  [key=0, style=solid];
m1_298 -> m1_10  [key=2, style=dotted];
m1_298 -> m1_11  [key=2, style=dotted];
m1_298 -> m1_299  [key=0, style=solid];
m1_298 -> m1_300  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_298 -> m1_301  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_298 -> m1_302  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_298 -> m1_303  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_298 -> m1_304  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_298 -> m1_305  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_300 -> m1_12  [key=2, style=dotted];
m1_300 -> m1_301  [key=0, style=solid];
m1_303 -> m1_12  [key=2, style=dotted];
m1_303 -> m1_304  [key=0, style=solid];
m1_305 -> m1_12  [key=2, style=dotted];
m1_305 -> m1_306  [key=0, style=solid];
m1_297 -> m1_298  [key=0, style=solid];
m1_297 -> m1_62  [key=2, style=dotted];
m1_297 -> m1_301  [key=1, style=dashed, color=darkseagreen4, label=a];
m1_299 -> m1_300  [key=0, style=solid];
m1_299 -> m1_70  [key=2, style=dotted];
m1_301 -> m1_307  [key=2, style=dotted];
m1_301 -> m1_308  [key=2, style=dotted];
m1_301 -> m1_302  [key=0, style=solid];
m1_302 -> m1_307  [key=2, style=dotted];
m1_302 -> m1_308  [key=2, style=dotted];
m1_302 -> m1_303  [key=0, style=solid];
m1_304 -> m1_307  [key=2, style=dotted];
m1_304 -> m1_308  [key=2, style=dotted];
m1_304 -> m1_305  [key=0, style=solid];
m1_295 -> m1_297  [key=1, style=dashed, color=darkseagreen4, label=o1];
m1_295 -> m1_302  [key=1, style=dashed, color=darkseagreen4, label=o1];
m1_295 -> m1_296  [key=0, style=solid];
m1_295 -> m1_293  [key=2, style=dotted];
m1_296 -> m1_297  [key=0, style=solid];
m1_296 -> m1_304  [key=1, style=dashed, color=darkseagreen4, label=o2];
m1_296 -> m1_293  [key=2, style=dotted];
m1_306 -> m1_294  [key=0, style=bold, color=blue];
m1_398 -> m1_399  [key=0, style=solid];
m1_399 -> m1_32  [key=2, style=dotted];
m1_399 -> m1_400  [key=0, style=solid];
m1_399 -> m1_62  [key=2, style=dotted];
m1_399 -> m1_406  [key=2, style=dotted];
m1_399 -> m1_407  [key=2, style=dotted];
m1_403 -> m1_32  [key=2, style=dotted];
m1_403 -> m1_33  [key=2, style=dotted];
m1_403 -> m1_404  [key=0, style=solid];
m1_403 -> m1_307  [key=2, style=dotted];
m1_403 -> m1_308  [key=2, style=dotted];
m1_404 -> m1_32  [key=2, style=dotted];
m1_404 -> m1_33  [key=2, style=dotted];
m1_404 -> m1_405  [key=0, style=solid];
m1_404 -> m1_307  [key=2, style=dotted];
m1_404 -> m1_308  [key=2, style=dotted];
m1_400 -> m1_10  [key=2, style=dotted];
m1_400 -> m1_11  [key=2, style=dotted];
m1_400 -> m1_403  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_400 -> m1_404  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_400 -> m1_401  [key=0, style=solid];
m1_400 -> m1_402  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_402 -> m1_403  [key=0, style=solid];
m1_402 -> m1_12  [key=2, style=dotted];
m1_401 -> m1_402  [key=0, style=solid];
m1_401 -> m1_70  [key=2, style=dotted];
m1_405 -> m1_398  [key=0, style=bold, color=blue];
m1_57 -> m1_58  [key=0, style=solid];
m1_58 -> m1_32  [key=2, style=dotted];
m1_58 -> m1_33  [key=2, style=dotted];
m1_58 -> m1_59  [key=0, style=solid];
m1_58 -> m1_62  [key=2, style=dotted];
m1_59 -> m1_60  [key=0, style=solid];
m1_59 -> m1_34  [key=2, style=dotted];
m1_60 -> m1_12  [key=2, style=dotted];
m1_60 -> m1_61  [key=0, style=solid];
m1_61 -> m1_57  [key=0, style=bold, color=blue];
m1_262 -> m1_263  [key=0, style=solid];
m1_264 -> m1_10  [key=2, style=dotted];
m1_264 -> m1_11  [key=2, style=dotted];
m1_264 -> m1_265  [key=0, style=solid];
m1_264 -> m1_266  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_264 -> m1_267  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_264 -> m1_268  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_264 -> m1_269  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_264 -> m1_270  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_266 -> m1_12  [key=2, style=dotted];
m1_266 -> m1_267  [key=0, style=solid];
m1_267 -> m1_12  [key=2, style=dotted];
m1_267 -> m1_268  [key=0, style=solid];
m1_268 -> m1_12  [key=2, style=dotted];
m1_268 -> m1_269  [key=0, style=solid];
m1_269 -> m1_12  [key=2, style=dotted];
m1_269 -> m1_270  [key=0, style=solid];
m1_270 -> m1_12  [key=2, style=dotted];
m1_270 -> m1_271  [key=0, style=solid];
m1_263 -> m1_264  [key=0, style=solid];
m1_263 -> m1_62  [key=2, style=dotted];
m1_265 -> m1_266  [key=0, style=solid];
m1_265 -> m1_70  [key=2, style=dotted];
m1_271 -> m1_262  [key=0, style=bold, color=blue];
m1_165 -> m1_166  [key=0, style=solid];
m1_166 -> m1_32  [key=2, style=dotted];
m1_166 -> m1_33  [key=2, style=dotted];
m1_166 -> m1_167  [key=0, style=solid];
m1_167 -> m1_168  [key=0, style=solid];
m1_167 -> m1_26  [key=2, style=dotted];
m1_168 -> m1_12  [key=2, style=dotted];
m1_168 -> m1_169  [key=0, style=solid];
m1_169 -> m1_165  [key=0, style=bold, color=blue];
m1_146 -> m1_147  [key=0, style=solid];
m1_148 -> m1_102  [key=2, style=dotted];
m1_148 -> m1_149  [key=0, style=solid];
m1_148 -> m1_151  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_147 -> m1_148  [key=0, style=solid];
m1_147 -> m1_152  [key=1, style=dashed, color=darkseagreen4, label=c];
m1_147 -> m1_150  [key=2, style=dotted];
m1_149 -> m1_146  [key=0, style=bold, color=blue];
m1_341 -> m1_342  [key=0, style=solid];
m1_342 -> m1_32  [key=2, style=dotted];
m1_342 -> m1_33  [key=2, style=dotted];
m1_342 -> m1_343  [key=0, style=solid];
m1_342 -> m1_346  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_343 -> m1_344  [key=0, style=solid];
m1_343 -> m1_34  [key=2, style=dotted];
m1_343 -> m1_345  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_346 -> m1_347  [key=0, style=solid];
m1_346 -> m1_34  [key=2, style=dotted];
m1_346 -> m1_348  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_345 -> m1_12  [key=2, style=dotted];
m1_345 -> m1_346  [key=0, style=solid];
m1_347 -> m1_12  [key=2, style=dotted];
m1_347 -> m1_348  [key=0, style=solid];
m1_348 -> m1_12  [key=2, style=dotted];
m1_348 -> m1_349  [key=0, style=solid];
m1_344 -> m1_345  [key=0, style=solid];
m1_344 -> m1_70  [key=2, style=dotted];
m1_349 -> m1_341  [key=0, style=bold, color=blue];
m1_390 -> m1_391  [key=0, style=solid];
m1_391 -> m1_32  [key=2, style=dotted];
m1_391 -> m1_33  [key=2, style=dotted];
m1_391 -> m1_392  [key=0, style=solid];
m1_391 -> m1_62  [key=2, style=dotted];
m1_395 -> m1_32  [key=2, style=dotted];
m1_395 -> m1_33  [key=2, style=dotted];
m1_395 -> m1_396  [key=0, style=solid];
m1_395 -> m1_307  [key=2, style=dotted];
m1_395 -> m1_308  [key=2, style=dotted];
m1_396 -> m1_32  [key=2, style=dotted];
m1_396 -> m1_33  [key=2, style=dotted];
m1_396 -> m1_397  [key=0, style=solid];
m1_396 -> m1_307  [key=2, style=dotted];
m1_396 -> m1_308  [key=2, style=dotted];
m1_392 -> m1_10  [key=2, style=dotted];
m1_392 -> m1_11  [key=2, style=dotted];
m1_392 -> m1_395  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_392 -> m1_396  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_392 -> m1_393  [key=0, style=solid];
m1_392 -> m1_394  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_394 -> m1_395  [key=0, style=solid];
m1_394 -> m1_12  [key=2, style=dotted];
m1_393 -> m1_394  [key=0, style=solid];
m1_393 -> m1_70  [key=2, style=dotted];
m1_397 -> m1_390  [key=0, style=bold, color=blue];
m1_39 -> m1_40  [key=0, style=solid];
m1_39 -> m1_34  [key=2, style=dotted];
m1_52 -> m1_53  [key=0, style=solid];
m1_53 -> m1_32  [key=2, style=dotted];
m1_53 -> m1_33  [key=2, style=dotted];
m1_53 -> m1_54  [key=0, style=solid];
m1_53 -> m1_55  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_54 -> m1_55  [key=0, style=solid];
m1_54 -> m1_34  [key=2, style=dotted];
m1_55 -> m1_12  [key=2, style=dotted];
m1_55 -> m1_56  [key=0, style=solid];
m1_56 -> m1_52  [key=0, style=bold, color=blue];
m1_87 -> m1_88  [key=0, style=solid];
m1_88 -> m1_32  [key=2, style=dotted];
m1_88 -> m1_33  [key=2, style=dotted];
m1_88 -> m1_89  [key=0, style=solid];
m1_89 -> m1_90  [key=0, style=solid];
m1_89 -> m1_34  [key=2, style=dotted];
m1_90 -> m1_91  [key=0, style=solid];
m1_90 -> m1_92  [key=2, style=dotted];
m1_91 -> m1_87  [key=0, style=bold, color=blue];
m1_34 -> m1_35  [key=0, style=solid];
m1_139 -> m1_140  [key=0, style=solid];
m1_140 -> m1_62  [key=2, style=dotted];
m1_140 -> m1_141  [key=0, style=solid];
m1_140 -> m1_144  [key=1, style=dashed, color=darkseagreen4, label=a];
m1_141 -> m1_102  [key=2, style=dotted];
m1_141 -> m1_142  [key=0, style=solid];
m1_141 -> m1_143  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_142 -> m1_139  [key=0, style=bold, color=blue];
m1_26 -> m1_27  [key=0, style=solid];
m1_26 -> m1_38  [key=2, style=dotted];
m1_26 -> m1_39  [key=2, style=dotted];
m1_27 -> m1_28  [key=0, style=solid];
m1_27 -> m1_40  [key=2, style=dotted];
m1_28 -> m1_29  [key=0, style=solid];
m1_28 -> m1_30  [key=0, style=solid];
m1_28 -> m1_32  [key=2, style=dotted];
m1_28 -> m1_33  [key=2, style=dotted];
m1_29 -> m1_35  [key=0, style=solid];
m1_29 -> m1_30  [key=0, style=solid];
m1_29 -> m1_34  [key=2, style=dotted];
m1_30 -> m1_31  [key=0, style=solid];
m1_30 -> m1_32  [key=0, style=solid];
m1_30 -> m1_12  [key=2, style=dotted];
m1_31 -> m1_35  [key=0, style=solid];
m1_31 -> m1_27  [key=0, style=bold, color=blue];
m1_35 -> m1_21  [key=0, style=bold, color=blue];
m1_35 -> m1_36  [key=0, style=solid];
m1_408 -> m1_409  [key=0, style=solid];
m1_409 -> m1_32  [key=2, style=dotted];
m1_409 -> m1_33  [key=2, style=dotted];
m1_409 -> m1_410  [key=0, style=solid];
m1_409 -> m1_62  [key=2, style=dotted];
m1_413 -> m1_32  [key=2, style=dotted];
m1_413 -> m1_33  [key=2, style=dotted];
m1_413 -> m1_414  [key=0, style=solid];
m1_413 -> m1_307  [key=2, style=dotted];
m1_413 -> m1_308  [key=2, style=dotted];
m1_414 -> m1_32  [key=2, style=dotted];
m1_414 -> m1_33  [key=2, style=dotted];
m1_414 -> m1_415  [key=0, style=solid];
m1_414 -> m1_307  [key=2, style=dotted];
m1_414 -> m1_308  [key=2, style=dotted];
m1_415 -> m1_32  [key=2, style=dotted];
m1_415 -> m1_33  [key=2, style=dotted];
m1_415 -> m1_416  [key=0, style=solid];
m1_415 -> m1_307  [key=2, style=dotted];
m1_415 -> m1_308  [key=2, style=dotted];
m1_416 -> m1_32  [key=2, style=dotted];
m1_416 -> m1_33  [key=2, style=dotted];
m1_416 -> m1_417  [key=0, style=solid];
m1_416 -> m1_307  [key=2, style=dotted];
m1_416 -> m1_308  [key=2, style=dotted];
m1_410 -> m1_10  [key=2, style=dotted];
m1_410 -> m1_11  [key=2, style=dotted];
m1_410 -> m1_413  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_410 -> m1_414  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_410 -> m1_415  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_410 -> m1_416  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_410 -> m1_411  [key=0, style=solid];
m1_410 -> m1_412  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_412 -> m1_413  [key=0, style=solid];
m1_412 -> m1_12  [key=2, style=dotted];
m1_411 -> m1_412  [key=0, style=solid];
m1_411 -> m1_70  [key=2, style=dotted];
m1_417 -> m1_408  [key=0, style=bold, color=blue];
m1_12 -> m1_9  [key=0, style=bold, color=blue];
m1_37 -> m1_38  [key=0, style=solid];
m1_37 -> m1_34  [key=2, style=dotted];
m1_40 -> m1_12  [key=2, style=dotted];
m1_40 -> m1_41  [key=0, style=solid];
m1_376 -> m1_377  [key=0, style=solid];
m1_378 -> m1_10  [key=2, style=dotted];
m1_378 -> m1_11  [key=2, style=dotted];
m1_378 -> m1_379  [key=0, style=solid];
m1_378 -> m1_380  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_378 -> m1_381  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_378 -> m1_382  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_380 -> m1_12  [key=2, style=dotted];
m1_380 -> m1_381  [key=0, style=solid];
m1_381 -> m1_12  [key=2, style=dotted];
m1_381 -> m1_382  [key=0, style=solid];
m1_382 -> m1_12  [key=2, style=dotted];
m1_382 -> m1_383  [key=0, style=solid];
m1_377 -> m1_378  [key=0, style=solid];
m1_377 -> m1_62  [key=2, style=dotted];
m1_379 -> m1_380  [key=0, style=solid];
m1_379 -> m1_70  [key=2, style=dotted];
m1_383 -> m1_376  [key=0, style=bold, color=blue];
m1_202 -> m1_203  [key=0, style=solid];
m1_458 -> m1_459  [key=0, style=solid];
m1_459 -> m1_32  [key=2, style=dotted];
m1_459 -> m1_33  [key=2, style=dotted];
m1_459 -> m1_460  [key=0, style=solid];
m1_460 -> m1_458  [key=0, style=bold, color=blue];
m1_104 -> m1_105  [key=0, style=solid];
m1_104 -> m1_26  [key=2, style=dotted];
m1_111 -> m1_112  [key=0, style=solid];
m1_111 -> m1_26  [key=2, style=dotted];
m1_118 -> m1_119  [key=0, style=solid];
m1_118 -> m1_26  [key=2, style=dotted];
m1_163 -> m1_164  [key=0, style=solid];
m1_163 -> m1_26  [key=2, style=dotted];
m1_175 -> m1_176  [key=0, style=solid];
m1_175 -> m1_26  [key=2, style=dotted];
m1_482 -> m1_483  [key=0, style=solid];
m1_485 -> m1_486  [key=0, style=solid];
m1_103 -> m1_104  [key=0, style=solid];
m1_105 -> m1_103  [key=0, style=bold, color=blue];
m1_110 -> m1_111  [key=0, style=solid];
m1_112 -> m1_110  [key=0, style=bold, color=blue];
m1_117 -> m1_118  [key=0, style=solid];
m1_119 -> m1_117  [key=0, style=bold, color=blue];
m1_162 -> m1_163  [key=0, style=solid];
m1_164 -> m1_162  [key=0, style=bold, color=blue];
m1_174 -> m1_175  [key=0, style=solid];
m1_176 -> m1_174  [key=0, style=bold, color=blue];
m1_130 -> m1_34  [key=2, style=dotted];
m1_130 -> m1_131  [key=0, style=solid];
m1_486 -> m1_34  [key=2, style=dotted];
m1_486 -> m1_487  [key=0, style=solid];
m1_489 -> m1_34  [key=2, style=dotted];
m1_489 -> m1_490  [key=0, style=solid];
m1_484 -> m1_482  [key=0, style=bold, color=blue];
m1_483 -> m1_484  [key=0, style=solid];
m1_488 -> m1_489  [key=0, style=solid];
m1_487 -> m1_485  [key=0, style=bold, color=blue];
m1_137 -> m1_26  [key=2, style=dotted];
m1_137 -> m1_138  [key=0, style=solid];
m1_144 -> m1_26  [key=2, style=dotted];
m1_144 -> m1_145  [key=0, style=solid];
m1_182 -> m1_26  [key=2, style=dotted];
m1_182 -> m1_183  [key=0, style=solid];
m1_194 -> m1_26  [key=2, style=dotted];
m1_194 -> m1_195  [key=0, style=solid];
m1_197 -> m1_26  [key=2, style=dotted];
m1_197 -> m1_198  [key=0, style=solid];
m1_200 -> m1_26  [key=2, style=dotted];
m1_200 -> m1_201  [key=0, style=solid];
m1_215 -> m1_26  [key=2, style=dotted];
m1_215 -> m1_216  [key=0, style=solid];
m1_152 -> m1_26  [key=2, style=dotted];
m1_152 -> m1_153  [key=0, style=solid];
m1_203 -> m1_26  [key=2, style=dotted];
m1_203 -> m1_204  [key=0, style=solid];
m1_129 -> m1_130  [key=0, style=solid];
m1_131 -> m1_129  [key=0, style=bold, color=blue];
m1_490 -> m1_488  [key=0, style=bold, color=blue];
m1_136 -> m1_137  [key=0, style=solid];
m1_138 -> m1_136  [key=0, style=bold, color=blue];
m1_143 -> m1_144  [key=0, style=solid];
m1_145 -> m1_143  [key=0, style=bold, color=blue];
m1_181 -> m1_182  [key=0, style=solid];
m1_183 -> m1_181  [key=0, style=bold, color=blue];
m1_193 -> m1_194  [key=0, style=solid];
m1_195 -> m1_193  [key=0, style=bold, color=blue];
m1_196 -> m1_197  [key=0, style=solid];
m1_198 -> m1_196  [key=0, style=bold, color=blue];
m1_199 -> m1_200  [key=0, style=solid];
m1_201 -> m1_199  [key=0, style=bold, color=blue];
m1_214 -> m1_215  [key=0, style=solid];
m1_216 -> m1_214  [key=0, style=bold, color=blue];
m1_151 -> m1_152  [key=0, style=solid];
m1_153 -> m1_151  [key=0, style=bold, color=blue];
m1_204 -> m1_202  [key=0, style=bold, color=blue];
m1_272 -> m1_273  [key=0, style=solid];
m1_274 -> m1_10  [key=2, style=dotted];
m1_274 -> m1_275  [key=0, style=solid];
m1_274 -> m1_276  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_274 -> m1_277  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_274 -> m1_278  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_274 -> m1_279  [key=1, style=dashed, color=darkseagreen4, label=t];
m1_276 -> m1_12  [key=2, style=dotted];
m1_276 -> m1_277  [key=0, style=solid];
m1_276 -> m1_281  [key=2, style=dotted];
m1_277 -> m1_12  [key=2, style=dotted];
m1_277 -> m1_278  [key=0, style=solid];
m1_277 -> m1_282  [key=2, style=dotted];
m1_278 -> m1_12  [key=2, style=dotted];
m1_278 -> m1_279  [key=0, style=solid];
m1_278 -> m1_282  [key=2, style=dotted];
m1_279 -> m1_12  [key=2, style=dotted];
m1_279 -> m1_280  [key=0, style=solid];
m1_279 -> m1_282  [key=2, style=dotted];
m1_273 -> m1_274  [key=0, style=solid];
m1_273 -> m1_62  [key=2, style=dotted];
m1_275 -> m1_276  [key=0, style=solid];
m1_275 -> m1_70  [key=2, style=dotted];
m1_280 -> m1_272  [key=0, style=bold, color=blue];
m1_11 -> m1_12  [key=0, style=solid];
m1_11 -> m1_4  [key=2, style=dotted];
m1_132 -> m1_133  [key=0, style=solid];
m1_133 -> m1_62  [key=2, style=dotted];
m1_133 -> m1_134  [key=0, style=solid];
m1_133 -> m1_137  [key=1, style=dashed, color=darkseagreen4, label=a];
m1_134 -> m1_102  [key=2, style=dotted];
m1_134 -> m1_135  [key=0, style=solid];
m1_134 -> m1_136  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_135 -> m1_132  [key=0, style=bold, color=blue];
m1_113 -> m1_114  [key=0, style=solid];
m1_114 -> m1_32  [key=2, style=dotted];
m1_114 -> m1_33  [key=2, style=dotted];
m1_114 -> m1_115  [key=0, style=solid];
m1_114 -> m1_118  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_115 -> m1_116  [key=0, style=solid];
m1_115 -> m1_102  [key=2, style=dotted];
m1_115 -> m1_117  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_116 -> m1_113  [key=0, style=bold, color=blue];
m1_177 -> m1_178  [key=0, style=solid];
m1_178 -> m1_62  [key=2, style=dotted];
m1_178 -> m1_179  [key=0, style=solid];
m1_178 -> m1_182  [key=1, style=dashed, color=darkseagreen4, label=a];
m1_179 -> m1_102  [key=2, style=dotted];
m1_179 -> m1_180  [key=0, style=solid];
m1_179 -> m1_181  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_180 -> m1_177  [key=0, style=bold, color=blue];
m1_106 -> m1_107  [key=0, style=solid];
m1_107 -> m1_32  [key=2, style=dotted];
m1_107 -> m1_33  [key=2, style=dotted];
m1_107 -> m1_108  [key=0, style=solid];
m1_107 -> m1_111  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_108 -> m1_109  [key=0, style=solid];
m1_108 -> m1_102  [key=2, style=dotted];
m1_108 -> m1_110  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m1_109 -> m1_106  [key=0, style=bold, color=blue];
m1_120 -> m1_121  [key=0, style=solid];
m1_121 -> m1_62  [key=2, style=dotted];
m1_121 -> m1_122  [key=0, style=solid];
m1_122 -> m1_34  [key=2, style=dotted];
m1_122 -> m1_123  [key=0, style=solid];
m1_123 -> m1_92  [key=2, style=dotted];
m1_123 -> m1_124  [key=0, style=solid];
m1_124 -> m1_120  [key=0, style=bold, color=blue];
m1_41 -> m1_35  [key=0, style=bold, color=blue];
m1_41 -> m1_1  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonContract"];
m1_41 -> m1_2  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonContract"];
m1_41 -> m1_6  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonContract"];
m1_41 -> m1_7  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonContract"];
m1_41 -> m1_10  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonContract"];
m1_41 -> m1_11  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonContract"];
m1_41 -> m1_14  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonContract"];
m1_41 -> m1_15  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonContract"];
m1_41 -> m1_18  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonContract"];
m1_41 -> m1_19  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonContract"];
m1_41 -> m1_23  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonContract"];
m1_41 -> m1_24  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonContract"];
m1_41 -> m1_25  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonContract"];
m1_41 -> m1_26  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonContract"];
m1_41 -> m1_27  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonContract"];
m1_41 -> m1_28  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonContract"];
m1_41 -> m1_29  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonContract"];
m1_41 -> m1_30  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonContract"];
m1_41 -> m1_31  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonContract"];
m1_41 -> m1_32  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonContract"];
m1_41 -> m1_33  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonContract"];
m1_41 -> m1_34  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonContract"];
m1_491 -> m1_104  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_492 -> m1_111  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_493 -> m1_118  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_498 -> m1_163  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_499 -> m1_175  [key=1, style=dashed, color=darkseagreen4, label=o];
m1_494 -> m1_130  [key=1, style=dashed, color=darkseagreen4, label=a];
m1_495 -> m1_137  [key=1, style=dashed, color=darkseagreen4, label=a];
m1_496 -> m1_144  [key=1, style=dashed, color=darkseagreen4, label=a];
m1_500 -> m1_182  [key=1, style=dashed, color=darkseagreen4, label=a];
m1_501 -> m1_194  [key=1, style=dashed, color=darkseagreen4, label=a];
m1_501 -> m1_197  [key=1, style=dashed, color=darkseagreen4, label=a];
m1_501 -> m1_200  [key=1, style=dashed, color=darkseagreen4, label=a];
m1_501 -> m1_203  [key=1, style=dashed, color=darkseagreen4, label=a];
m1_502 -> m1_215  [key=1, style=dashed, color=darkseagreen4, label=a];
m1_497 -> m1_152  [key=1, style=dashed, color=darkseagreen4, label=c];
}
