digraph  {
n0 [label="Entry Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver.CamelCasePropertyNamesContractResolver()", span="38-38", cluster="Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver.CamelCasePropertyNamesContractResolver()"];
n1 [label="Exit Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver.CamelCasePropertyNamesContractResolver()", span="38-38", cluster="Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver.CamelCasePropertyNamesContractResolver()"];
n2 [label="Entry Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver.ResolvePropertyName(string)", span="50-50", cluster="Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver.ResolvePropertyName(string)"];
n3 [label="return StringUtils.ToCamelCase(propertyName);", span="53-53", cluster="Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver.ResolvePropertyName(string)"];
n4 [label="Exit Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver.ResolvePropertyName(string)", span="50-50", cluster="Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver.ResolvePropertyName(string)"];
n5 [label="Entry Newtonsoft.Json.Utilities.StringUtils.ToCamelCase(string)", span="156-156", cluster="Newtonsoft.Json.Utilities.StringUtils.ToCamelCase(string)"];
m0_419 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsQuery()", span="827-827", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsQuery()", file="ConvertUtils.cs"];
m0_421 [label="IList<JToken> t = a.SelectTokens(''[ ?( @..hi <> 'ha' ) ]'').ToList()", span="833-833", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsQuery()", file="ConvertUtils.cs"];
m0_423 [label="Assert.AreEqual(1, t.Count)", span="835-835", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsQuery()", file="ConvertUtils.cs"];
m0_422 [label="Assert.IsNotNull(t)", span="834-834", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsQuery()", file="ConvertUtils.cs"];
m0_420 [label="JArray a = new JArray(\r\n                new JArray(new JObject(new JProperty(''hi'', ''ho''))),\r\n                new JArray(new JObject(new JProperty(''hi'', ''ha''))))", span="829-831", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsQuery()", file="ConvertUtils.cs"];
m0_424 [label="Assert.IsTrue(JToken.DeepEquals(new JArray(new JObject(new JProperty(''hi'', ''ho''))), t[0]))", span="836-836", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsQuery()", file="ConvertUtils.cs"];
m0_425 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsQuery()", span="827-827", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsQuery()", file="ConvertUtils.cs"];
m0_464 [label="Entry JProperty.cstr", span="", cluster="JProperty.cstr", file="ConvertUtils.cs"];
m0_490 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.MultiplePaths()", span="983-983", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.MultiplePaths()", file="ConvertUtils.cs"];
m0_492 [label="var results = a.SelectTokens(''[?(@.price > @.max_price)]'').ToList()", span="1000-1000", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.MultiplePaths()", file="ConvertUtils.cs"];
m0_494 [label="Assert.AreEqual(a[2], results[0])", span="1002-1002", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.MultiplePaths()", file="ConvertUtils.cs"];
m0_493 [label="Assert.AreEqual(1, results.Count)", span="1001-1001", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.MultiplePaths()", file="ConvertUtils.cs"];
m0_491 [label="JArray a = JArray.Parse(@''[\r\n  {\r\n    ''''price'''': 199,\r\n    ''''max_price'''': 200\r\n  },\r\n  {\r\n    ''''price'''': 200,\r\n    ''''max_price'''': 200\r\n  },\r\n  {\r\n    ''''price'''': 201,\r\n    ''''max_price'''': 200\r\n  }\r\n]'')", span="985-998", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.MultiplePaths()", file="ConvertUtils.cs"];
m0_495 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.MultiplePaths()", span="983-983", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.MultiplePaths()", file="ConvertUtils.cs"];
m0_547 [label="Entry System.TimeSpan.TimeSpan(int, int, int, int)", span="0-0", cluster="System.TimeSpan.TimeSpan(int, int, int, int)", file="ConvertUtils.cs"];
m0_143 [label="Entry Unk.IsNull", span="", cluster="Unk.IsNull", file="ConvertUtils.cs"];
m0_114 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSingleProperty()", span="419-419", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSingleProperty()", file="ConvertUtils.cs"];
m0_118 [label="Assert.AreEqual(JTokenType.Integer, t.Type)", span="426-426", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSingleProperty()", file="ConvertUtils.cs"];
m0_119 [label="Assert.AreEqual(1, (int)t)", span="427-427", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSingleProperty()", file="ConvertUtils.cs"];
m0_117 [label="Assert.IsNotNull(t)", span="425-425", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSingleProperty()", file="ConvertUtils.cs"];
m0_116 [label="JToken t = o.SelectToken(''Blah'')", span="424-424", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSingleProperty()", file="ConvertUtils.cs"];
m0_115 [label="JObject o = new JObject(\r\n                new JProperty(''Blah'', 1))", span="421-422", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSingleProperty()", file="ConvertUtils.cs"];
m0_120 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSingleProperty()", span="419-419", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSingleProperty()", file="ConvertUtils.cs"];
m0_440 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQuery()", span="865-865", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQuery()", file="ConvertUtils.cs"];
m0_442 [label="IList<JToken> t = a.SelectTokens(''[ ?( @.hi > 1 ) ]'').ToList()", span="872-872", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQuery()", file="ConvertUtils.cs"];
m0_444 [label="Assert.AreEqual(2, t.Count)", span="874-874", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQuery()", file="ConvertUtils.cs"];
m0_443 [label="Assert.IsNotNull(t)", span="873-873", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQuery()", file="ConvertUtils.cs"];
m0_445 [label="Assert.IsTrue(JToken.DeepEquals(new JObject(new JProperty(''hi'', 2)), t[0]))", span="875-875", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQuery()", file="ConvertUtils.cs"];
m0_446 [label="Assert.IsTrue(JToken.DeepEquals(new JObject(new JProperty(''hi'', 3)), t[1]))", span="876-876", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQuery()", file="ConvertUtils.cs"];
m0_441 [label="JArray a = new JArray(\r\n                new JObject(new JProperty(''hi'', 1)),\r\n                new JObject(new JProperty(''hi'', 2)),\r\n                new JObject(new JProperty(''hi'', 3)))", span="867-870", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQuery()", file="ConvertUtils.cs"];
m0_447 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQuery()", span="865-865", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQuery()", file="ConvertUtils.cs"];
m0_400 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateLastSingleCharacterProperty()", span="794-794", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateLastSingleCharacterProperty()", file="ConvertUtils.cs"];
m0_403 [label="Assert.AreEqual(''Jeff'', a2)", span="799-799", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateLastSingleCharacterProperty()", file="ConvertUtils.cs"];
m0_402 [label="string a2 = (string)o2.SelectToken(''People[0].N'')", span="797-797", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateLastSingleCharacterProperty()", file="ConvertUtils.cs"];
m0_401 [label="JObject o2 = JObject.Parse(''{'People':[{'N':'Jeff'}]}'')", span="796-796", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateLastSingleCharacterProperty()", file="ConvertUtils.cs"];
m0_404 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateLastSingleCharacterProperty()", span="794-794", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateLastSingleCharacterProperty()", file="ConvertUtils.cs"];
m0_572 [label="Entry Unk.ToList", span="", cluster="Unk.ToList", file="ConvertUtils.cs"];
m0_618 [label="Entry Newtonsoft.Json.Linq.JValue.JValue(System.DateTime)", span="125-125", cluster="Newtonsoft.Json.Linq.JValue.JValue(System.DateTime)", file="ConvertUtils.cs"];
m0_313 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardArray()", span="681-681", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardArray()", file="ConvertUtils.cs"];
m0_315 [label="List<JToken> t = a.SelectTokens(''[*]'').ToList()", span="685-685", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardArray()", file="ConvertUtils.cs"];
m0_317 [label="Assert.AreEqual(4, t.Count)", span="687-687", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardArray()", file="ConvertUtils.cs"];
m0_318 [label="Assert.AreEqual(1, (int)t[0])", span="688-688", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardArray()", file="ConvertUtils.cs"];
m0_319 [label="Assert.AreEqual(2, (int)t[1])", span="689-689", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardArray()", file="ConvertUtils.cs"];
m0_320 [label="Assert.AreEqual(3, (int)t[2])", span="690-690", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardArray()", file="ConvertUtils.cs"];
m0_321 [label="Assert.AreEqual(4, (int)t[3])", span="691-691", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardArray()", file="ConvertUtils.cs"];
m0_316 [label="Assert.IsNotNull(t)", span="686-686", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardArray()", file="ConvertUtils.cs"];
m0_314 [label="JArray a = new JArray(1, 2, 3, 4)", span="683-683", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardArray()", file="ConvertUtils.cs"];
m0_322 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardArray()", span="681-681", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardArray()", file="ConvertUtils.cs"];
m0_131 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QuoteName()", span="445-445", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QuoteName()", file="ConvertUtils.cs"];
m0_135 [label="Assert.AreEqual(JTokenType.Integer, t.Type)", span="452-452", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QuoteName()", file="ConvertUtils.cs"];
m0_136 [label="Assert.AreEqual(1, (int)t)", span="453-453", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QuoteName()", file="ConvertUtils.cs"];
m0_134 [label="Assert.IsNotNull(t)", span="451-451", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QuoteName()", file="ConvertUtils.cs"];
m0_133 [label="JToken t = o.SelectToken(''['Blah']'')", span="450-450", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QuoteName()", file="ConvertUtils.cs"];
m0_132 [label="JObject o = new JObject(\r\n                new JProperty(''Blah'', 1))", span="447-448", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QuoteName()", file="ConvertUtils.cs"];
m0_137 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QuoteName()", span="445-445", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QuoteName()", file="ConvertUtils.cs"];
m0_504 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Exists_Null()", span="1031-1031", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Exists_Null()", file="ConvertUtils.cs"];
m0_506 [label="var results = a.SelectTokens(''[?(true)]'').ToList()", span="1048-1048", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Exists_Null()", file="ConvertUtils.cs"];
m0_508 [label="Assert.AreEqual(a[0], results[0])", span="1050-1050", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Exists_Null()", file="ConvertUtils.cs"];
m0_509 [label="Assert.AreEqual(a[1], results[1])", span="1051-1051", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Exists_Null()", file="ConvertUtils.cs"];
m0_510 [label="Assert.AreEqual(a[2], results[2])", span="1052-1052", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Exists_Null()", file="ConvertUtils.cs"];
m0_507 [label="Assert.AreEqual(3, results.Count)", span="1049-1049", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Exists_Null()", file="ConvertUtils.cs"];
m0_505 [label="JArray a = JArray.Parse(@''[\r\n  {\r\n    ''''price'''': 199,\r\n    ''''max_price'''': 200\r\n  },\r\n  {\r\n    ''''price'''': 200,\r\n    ''''max_price'''': 200\r\n  },\r\n  {\r\n    ''''price'''': 201,\r\n    ''''max_price'''': 200\r\n  }\r\n]'')", span="1033-1046", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Exists_Null()", file="ConvertUtils.cs"];
m0_511 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Exists_Null()", span="1031-1031", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Exists_Null()", file="ConvertUtils.cs"];
m0_524 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QueryAgainstNonStringValues()", span="1102-1102", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QueryAgainstNonStringValues()", file="ConvertUtils.cs"];
m0_527 [label="IList<JToken> t = o.SelectTokens(''$.prop[?(@.childProp =='ff2dc672-6e15-4aa2-afb0-18f4f69596ad')]'').ToList()", span="1130-1130", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QueryAgainstNonStringValues()", file="ConvertUtils.cs"];
m0_529 [label="t = o.SelectTokens(''$.prop[?(@.childProp =='http://localhost')]'').ToList()", span="1133-1133", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QueryAgainstNonStringValues()", file="ConvertUtils.cs"];
m0_531 [label="t = o.SelectTokens(''$.prop[?(@.childProp =='2000-12-05T05:07:59Z')]'').ToList()", span="1136-1136", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QueryAgainstNonStringValues()", file="ConvertUtils.cs"];
m0_533 [label="t = o.SelectTokens(''$.prop[?(@.childProp =='2000-12-05T05:07:59-10:00')]'').ToList()", span="1140-1140", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QueryAgainstNonStringValues()", file="ConvertUtils.cs"];
m0_535 [label="t = o.SelectTokens(''$.prop[?(@.childProp =='SGVsbG8gd29ybGQ=')]'').ToList()", span="1144-1144", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QueryAgainstNonStringValues()", file="ConvertUtils.cs"];
m0_537 [label="t = o.SelectTokens(''$.prop[?(@.childProp =='365.23:59:59')]'').ToList()", span="1147-1147", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QueryAgainstNonStringValues()", file="ConvertUtils.cs"];
m0_528 [label="Assert.AreEqual(2, t.Count)", span="1131-1131", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QueryAgainstNonStringValues()", file="ConvertUtils.cs"];
m0_530 [label="Assert.AreEqual(2, t.Count)", span="1134-1134", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QueryAgainstNonStringValues()", file="ConvertUtils.cs"];
m0_532 [label="Assert.AreEqual(2, t.Count)", span="1137-1137", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QueryAgainstNonStringValues()", file="ConvertUtils.cs"];
m0_534 [label="Assert.AreEqual(2, t.Count)", span="1141-1141", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QueryAgainstNonStringValues()", file="ConvertUtils.cs"];
m0_536 [label="Assert.AreEqual(2, t.Count)", span="1145-1145", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QueryAgainstNonStringValues()", file="ConvertUtils.cs"];
m0_538 [label="Assert.AreEqual(2, t.Count)", span="1148-1148", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QueryAgainstNonStringValues()", file="ConvertUtils.cs"];
m0_526 [label="JObject o = new JObject(\r\n                new JProperty(''prop'',\r\n                    new JArray(\r\n                        values.Select(v => new JObject(new JProperty(''childProp'', v)))\r\n                        )\r\n                    )\r\n                )", span="1122-1128", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QueryAgainstNonStringValues()", file="ConvertUtils.cs"];
m0_525 [label="IList<object> values = new List<object>\r\n            {\r\n                ''ff2dc672-6e15-4aa2-afb0-18f4f69596ad'',\r\n                new Guid(''ff2dc672-6e15-4aa2-afb0-18f4f69596ad''),\r\n                ''http://localhost'',\r\n                new Uri(''http://localhost''),\r\n                ''2000-12-05T05:07:59Z'',\r\n                new DateTime(2000, 12, 5, 5, 7, 59, DateTimeKind.Utc),\r\n#if !NET20\r\n                ''2000-12-05T05:07:59-10:00'',\r\n                new DateTimeOffset(2000, 12, 5, 5, 7, 59, -TimeSpan.FromHours(10)),\r\n#endif\r\n                ''SGVsbG8gd29ybGQ='',\r\n                Encoding.UTF8.GetBytes(''Hello world''),\r\n                ''365.23:59:59'',\r\n                new TimeSpan(365, 23, 59, 59)\r\n            }", span="1104-1120", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QueryAgainstNonStringValues()", file="ConvertUtils.cs"];
m0_539 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QueryAgainstNonStringValues()", span="1102-1102", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QueryAgainstNonStringValues()", file="ConvertUtils.cs"];
m0_372 [label="Entry Newtonsoft.Json.Linq.JArray.JArray(object)", span="91-91", cluster="Newtonsoft.Json.Linq.JArray.JArray(object)", file="ConvertUtils.cs"];
m0_228 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMultiPropertyIndexOnArrayWithError()", span="581-581", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMultiPropertyIndexOnArrayWithError()", file="ConvertUtils.cs"];
m0_229 [label="JArray a = new JArray(1, 2, 3, 4, 5)", span="583-583", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMultiPropertyIndexOnArrayWithError()", file="ConvertUtils.cs"];
m0_230 [label="ExceptionAssert.Throws<JsonException>(() => { a.SelectToken(''['Missing','Missing2']'', true); }, ''Properties 'Missing', 'Missing2' not valid on JArray.'')", span="585-585", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMultiPropertyIndexOnArrayWithError()", file="ConvertUtils.cs"];
m0_231 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMultiPropertyIndexOnArrayWithError()", span="581-581", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMultiPropertyIndexOnArrayWithError()", file="ConvertUtils.cs"];
m0_605 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.RootInFilterWithRootObject()", span="1318-1318", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.RootInFilterWithRootObject()", file="ConvertUtils.cs"];
m0_608 [label="List<JToken> result = a.SelectTokens(''$..book[?(@.price <= $['expensive'])]'').ToList()", span="1362-1362", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.RootInFilterWithRootObject()", file="ConvertUtils.cs"];
m0_610 [label="result = a.SelectTokens(''$.store..[?(@.price > $.expensive)]'').ToList()", span="1365-1365", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.RootInFilterWithRootObject()", file="ConvertUtils.cs"];
m0_609 [label="Assert.AreEqual(2, result.Count)", span="1363-1363", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.RootInFilterWithRootObject()", file="ConvertUtils.cs"];
m0_611 [label="Assert.AreEqual(3, result.Count)", span="1366-1366", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.RootInFilterWithRootObject()", file="ConvertUtils.cs"];
m0_607 [label="JObject a = JObject.Parse(json)", span="1360-1360", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.RootInFilterWithRootObject()", file="ConvertUtils.cs"];
m0_606 [label="string json = @''{\r\n                ''''store'''' : {\r\n                    ''''book'''' : [\r\n                        {\r\n                            ''''category'''' : ''''reference'''',\r\n                            ''''author'''' : ''''Nigel Rees'''',\r\n                            ''''title'''' : ''''Sayings of the Century'''',\r\n                            ''''price'''' : 8.95\r\n                        },\r\n                        {\r\n                            ''''category'''' : ''''fiction'''',\r\n                            ''''author'''' : ''''Evelyn Waugh'''',\r\n                            ''''title'''' : ''''Sword of Honour'''',\r\n                            ''''price'''' : 12.99\r\n                        },\r\n                        {\r\n                            ''''category'''' : ''''fiction'''',\r\n                            ''''author'''' : ''''Herman Melville'''',\r\n                            ''''title'''' : ''''Moby Dick'''',\r\n                            ''''isbn'''' : ''''0-553-21311-3'''',\r\n                            ''''price'''' : 8.99\r\n                        },\r\n                        {\r\n                            ''''category'''' : ''''fiction'''',\r\n                            ''''author'''' : ''''J. R. R. Tolkien'''',\r\n                            ''''title'''' : ''''The Lord of the Rings'''',\r\n                            ''''isbn'''' : ''''0-395-19395-8'''',\r\n                            ''''price'''' : 22.99\r\n                        }\r\n                    ],\r\n                    ''''bicycle'''' : [\r\n                        {\r\n                            ''''color'''' : ''''red'''',\r\n                            ''''price'''' : 19.95\r\n                        }\r\n                    ]\r\n                },\r\n                ''''expensive'''' : 10\r\n            }''", span="1320-1358", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.RootInFilterWithRootObject()", file="ConvertUtils.cs"];
m0_612 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.RootInFilterWithRootObject()", span="1318-1318", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.RootInFilterWithRootObject()", file="ConvertUtils.cs"];
m0_164 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSliceOnObjectWithError()", span="495-495", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSliceOnObjectWithError()", file="ConvertUtils.cs"];
m0_165 [label="JObject o = new JObject(\r\n                new JProperty(''Blah'', 1))", span="497-498", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSliceOnObjectWithError()", file="ConvertUtils.cs"];
m0_166 [label="ExceptionAssert.Throws<JsonException>(() => { o.SelectToken(''[:]'', true); }, @''Array slice is not valid on JObject.'')", span="500-500", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSliceOnObjectWithError()", file="ConvertUtils.cs"];
m0_167 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSliceOnObjectWithError()", span="495-495", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSliceOnObjectWithError()", file="ConvertUtils.cs"];
m0_448 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.LesserQuery_ValueFirst()", span="880-880", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.LesserQuery_ValueFirst()", file="ConvertUtils.cs"];
m0_450 [label="IList<JToken> t = a.SelectTokens(''[ ?( 1 < @.hi ) ]'').ToList()", span="887-887", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.LesserQuery_ValueFirst()", file="ConvertUtils.cs"];
m0_452 [label="Assert.AreEqual(2, t.Count)", span="889-889", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.LesserQuery_ValueFirst()", file="ConvertUtils.cs"];
m0_451 [label="Assert.IsNotNull(t)", span="888-888", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.LesserQuery_ValueFirst()", file="ConvertUtils.cs"];
m0_453 [label="Assert.IsTrue(JToken.DeepEquals(new JObject(new JProperty(''hi'', 2)), t[0]))", span="890-890", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.LesserQuery_ValueFirst()", file="ConvertUtils.cs"];
m0_454 [label="Assert.IsTrue(JToken.DeepEquals(new JObject(new JProperty(''hi'', 3)), t[1]))", span="891-891", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.LesserQuery_ValueFirst()", file="ConvertUtils.cs"];
m0_449 [label="JArray a = new JArray(\r\n                new JObject(new JProperty(''hi'', 1)),\r\n                new JObject(new JProperty(''hi'', 2)),\r\n                new JObject(new JProperty(''hi'', 3)))", span="882-885", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.LesserQuery_ValueFirst()", file="ConvertUtils.cs"];
m0_455 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.LesserQuery_ValueFirst()", span="880-880", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.LesserQuery_ValueFirst()", file="ConvertUtils.cs"];
m0_86 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyString()", span="366-366", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyString()", file="ConvertUtils.cs"];
m0_89 [label="Assert.AreEqual(o, t)", span="372-372", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyString()", file="ConvertUtils.cs"];
m0_91 [label="Assert.AreEqual(null, t)", span="375-375", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyString()", file="ConvertUtils.cs"];
m0_87 [label="JObject o = new JObject(\r\n                new JProperty(''Blah'', 1))", span="368-369", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyString()", file="ConvertUtils.cs"];
m0_88 [label="JToken t = o.SelectToken('''')", span="371-371", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyString()", file="ConvertUtils.cs"];
m0_90 [label="t = o.SelectToken(''['']'')", span="374-374", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyString()", file="ConvertUtils.cs"];
m0_92 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyString()", span="366-366", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyString()", file="ConvertUtils.cs"];
m0_221 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingPropertyIndexWithError()", span="572-572", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingPropertyIndexWithError()", file="ConvertUtils.cs"];
m0_222 [label="JObject o = new JObject(\r\n                new JProperty(''Blah'', 1))", span="574-575", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingPropertyIndexWithError()", file="ConvertUtils.cs"];
m0_223 [label="ExceptionAssert.Throws<JsonException>(() => { o.SelectToken(''['Missing','Missing2']'', true); }, ''Property 'Missing' does not exist on JObject.'')", span="577-577", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingPropertyIndexWithError()", file="ConvertUtils.cs"];
m0_224 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingPropertyIndexWithError()", span="572-572", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingPropertyIndexWithError()", file="ConvertUtils.cs"];
m0_357 [label="Entry Newtonsoft.Json.Linq.JToken.DeepEquals(Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken)", span="155-155", cluster="Newtonsoft.Json.Linq.JToken.DeepEquals(Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken)", file="ConvertUtils.cs"];
m0_138 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingProperty()", span="457-457", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingProperty()", file="ConvertUtils.cs"];
m0_139 [label="JObject o = new JObject(\r\n                new JProperty(''Blah'', 1))", span="459-460", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingProperty()", file="ConvertUtils.cs"];
m0_140 [label="JToken t = o.SelectToken(''Missing[1]'')", span="462-462", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingProperty()", file="ConvertUtils.cs"];
m0_141 [label="Assert.IsNull(t)", span="463-463", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingProperty()", file="ConvertUtils.cs"];
m0_142 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingProperty()", span="457-457", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingProperty()", file="ConvertUtils.cs"];
m0_201 [label="Entry Newtonsoft.Json.Linq.JConstructor.JConstructor(string)", span="131-131", cluster="Newtonsoft.Json.Linq.JConstructor.JConstructor(string)", file="ConvertUtils.cs"];
m0_64 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.SelectTokenAfterEmptyContainer()", span="329-329", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.SelectTokenAfterEmptyContainer()", file="ConvertUtils.cs"];
m0_67 [label="IList<JToken> results = o.SelectTokens(''$..test'').ToList()", span="338-338", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.SelectTokenAfterEmptyContainer()", file="ConvertUtils.cs"];
m0_68 [label="Assert.AreEqual(1, results.Count)", span="340-340", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.SelectTokenAfterEmptyContainer()", file="ConvertUtils.cs"];
m0_69 [label="Assert.AreEqual(''no one will find me'', (string)results[0])", span="341-341", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.SelectTokenAfterEmptyContainer()", file="ConvertUtils.cs"];
m0_66 [label="JObject o = JObject.Parse(json)", span="336-336", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.SelectTokenAfterEmptyContainer()", file="ConvertUtils.cs"];
m0_65 [label="string json = @''{\r\n    'cont': [],\r\n    'test': 'no one will find me'\r\n}''", span="331-334", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.SelectTokenAfterEmptyContainer()", file="ConvertUtils.cs"];
m0_70 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.SelectTokenAfterEmptyContainer()", span="329-329", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.SelectTokenAfterEmptyContainer()", file="ConvertUtils.cs"];
m0_43 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanMultipleQuoted()", span="244-244", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanMultipleQuoted()", file="ConvertUtils.cs"];
m0_46 [label="var results = models.SelectTokens(''$..['My.Child.Node','Prop1','Prop2']'').ToList()", span="272-272", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanMultipleQuoted()", file="ConvertUtils.cs"];
m0_47 [label="Assert.AreEqual(''Val1'', (string)results[0])", span="273-273", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanMultipleQuoted()", file="ConvertUtils.cs"];
m0_48 [label="Assert.AreEqual(''Val2'', (string)results[1])", span="274-274", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanMultipleQuoted()", file="ConvertUtils.cs"];
m0_49 [label="Assert.AreEqual(JTokenType.Object, results[2].Type)", span="275-275", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanMultipleQuoted()", file="ConvertUtils.cs"];
m0_50 [label="Assert.AreEqual(''Val3'', (string)results[3])", span="276-276", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanMultipleQuoted()", file="ConvertUtils.cs"];
m0_51 [label="Assert.AreEqual(''Val4'', (string)results[4])", span="277-277", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanMultipleQuoted()", file="ConvertUtils.cs"];
m0_52 [label="Assert.AreEqual(''Val5'', (string)results[5])", span="278-278", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanMultipleQuoted()", file="ConvertUtils.cs"];
m0_53 [label="Assert.AreEqual(''Val6'', (string)results[6])", span="279-279", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanMultipleQuoted()", file="ConvertUtils.cs"];
m0_45 [label="JObject models = JObject.Parse(json)", span="270-270", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanMultipleQuoted()", file="ConvertUtils.cs"];
m0_44 [label="string json = @''{\r\n    ''''Node1'''': {\r\n        ''''Child1'''': {\r\n            ''''Name'''': ''''IsMe'''',\r\n            ''''TargetNode'''': {\r\n                ''''Prop1'''': ''''Val1'''',\r\n                ''''Prop2'''': ''''Val2''''\r\n            }\r\n        },\r\n        ''''My.Child.Node'''': {\r\n            ''''TargetNode'''': {\r\n                ''''Prop1'''': ''''Val3'''',\r\n                ''''Prop2'''': ''''Val4''''\r\n            }\r\n        }\r\n    },\r\n    ''''Node2'''': {\r\n        ''''TargetNode'''': {\r\n            ''''Prop1'''': ''''Val5'''',\r\n            ''''Prop2'''': ''''Val6''''\r\n        }\r\n    }\r\n}''", span="246-268", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanMultipleQuoted()", file="ConvertUtils.cs"];
m0_54 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanMultipleQuoted()", span="244-244", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanMultipleQuoted()", file="ConvertUtils.cs"];
m0_275 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", span="633-633", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="ConvertUtils.cs"];
m0_305 [label="t = a.SelectTokens(''[::-2]'').ToList()", span="671-671", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", color=green, community=0, file="ConvertUtils.cs"];
m0_276 [label="JArray a = new JArray(1, 2, 3, 4, 5, 6, 7, 8, 9)", span="635-635", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="ConvertUtils.cs"];
m0_304 [label="Assert.AreEqual(1, (int)t[8])", span="669-669", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", color=green, community=0, file="ConvertUtils.cs"];
m0_306 [label="Assert.AreEqual(5, t.Count)", span="672-672", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", color=green, community=0, file="ConvertUtils.cs"];
m0_307 [label="Assert.AreEqual(9, (int)t[0])", span="673-673", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", color=green, community=0, file="ConvertUtils.cs"];
m0_308 [label="Assert.AreEqual(7, (int)t[1])", span="674-674", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", color=green, community=0, file="ConvertUtils.cs"];
m0_309 [label="Assert.AreEqual(5, (int)t[2])", span="675-675", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", color=green, community=0, file="ConvertUtils.cs"];
m0_310 [label="Assert.AreEqual(3, (int)t[3])", span="676-676", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", color=green, community=0, file="ConvertUtils.cs"];
m0_311 [label="Assert.AreEqual(1, (int)t[4])", span="677-677", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", color=green, community=0, file="ConvertUtils.cs"];
m0_302 [label="Assert.AreEqual(3, (int)t[6])", span="667-667", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", color=green, community=0, file="ConvertUtils.cs"];
m0_294 [label="t = a.SelectTokens(''[::-1]'').ToList()", span="659-659", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="ConvertUtils.cs"];
m0_301 [label="Assert.AreEqual(4, (int)t[5])", span="666-666", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="ConvertUtils.cs"];
m0_303 [label="Assert.AreEqual(2, (int)t[7])", span="668-668", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", color=green, community=0, file="ConvertUtils.cs"];
m0_277 [label="IList<JToken> t = null", span="636-636", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="ConvertUtils.cs"];
m0_278 [label="t = a.SelectTokens(''[-3:]'').ToList()", span="638-638", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="ConvertUtils.cs"];
m0_283 [label="t = a.SelectTokens(''[-1:-2:-1]'').ToList()", span="644-644", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="ConvertUtils.cs"];
m0_286 [label="t = a.SelectTokens(''[-2:-1]'').ToList()", span="648-648", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="ConvertUtils.cs"];
m0_289 [label="t = a.SelectTokens(''[1:1]'').ToList()", span="652-652", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="ConvertUtils.cs"];
m0_291 [label="t = a.SelectTokens(''[1:2]'').ToList()", span="655-655", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="ConvertUtils.cs"];
m0_293 [label="Assert.AreEqual(2, (int)t[0])", span="657-657", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="ConvertUtils.cs"];
m0_295 [label="Assert.AreEqual(9, t.Count)", span="660-660", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="ConvertUtils.cs"];
m0_296 [label="Assert.AreEqual(9, (int)t[0])", span="661-661", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="ConvertUtils.cs"];
m0_297 [label="Assert.AreEqual(8, (int)t[1])", span="662-662", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="ConvertUtils.cs"];
m0_298 [label="Assert.AreEqual(7, (int)t[2])", span="663-663", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="ConvertUtils.cs"];
m0_299 [label="Assert.AreEqual(6, (int)t[3])", span="664-664", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="ConvertUtils.cs"];
m0_300 [label="Assert.AreEqual(5, (int)t[4])", span="665-665", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="ConvertUtils.cs"];
m0_279 [label="Assert.AreEqual(3, t.Count)", span="639-639", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="ConvertUtils.cs"];
m0_280 [label="Assert.AreEqual(7, (int)t[0])", span="640-640", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="ConvertUtils.cs"];
m0_281 [label="Assert.AreEqual(8, (int)t[1])", span="641-641", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="ConvertUtils.cs"];
m0_282 [label="Assert.AreEqual(9, (int)t[2])", span="642-642", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="ConvertUtils.cs"];
m0_284 [label="Assert.AreEqual(1, t.Count)", span="645-645", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="ConvertUtils.cs"];
m0_285 [label="Assert.AreEqual(9, (int)t[0])", span="646-646", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="ConvertUtils.cs"];
m0_287 [label="Assert.AreEqual(1, t.Count)", span="649-649", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="ConvertUtils.cs"];
m0_288 [label="Assert.AreEqual(8, (int)t[0])", span="650-650", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="ConvertUtils.cs"];
m0_290 [label="Assert.AreEqual(0, t.Count)", span="653-653", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="ConvertUtils.cs"];
m0_292 [label="Assert.AreEqual(1, t.Count)", span="656-656", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="ConvertUtils.cs"];
m0_312 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", span="633-633", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="ConvertUtils.cs"];
m0_541 [label="Entry System.Guid.Guid(string)", span="0-0", cluster="System.Guid.Guid(string)", file="ConvertUtils.cs"];
m0_543 [label="Entry System.DateTime.DateTime(int, int, int, int, int, int, System.DateTimeKind)", span="0-0", cluster="System.DateTime.DateTime(int, int, int, int, int, int, System.DateTimeKind)", file="ConvertUtils.cs"];
m0_243 [label="Entry Newtonsoft.Json.Linq.JArray.JArray()", span="65-65", cluster="Newtonsoft.Json.Linq.JArray.JArray()", file="ConvertUtils.cs"];
m0_55 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ParseWithEmptyArrayContent()", span="283-283", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ParseWithEmptyArrayContent()", file="ConvertUtils.cs"];
m0_58 [label="IList<JToken> tokens = jToken.SelectTokens(''$..en-US'').ToList()", span="320-320", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ParseWithEmptyArrayContent()", file="ConvertUtils.cs"];
m0_59 [label="Assert.AreEqual(3, tokens.Count)", span="322-322", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ParseWithEmptyArrayContent()", file="ConvertUtils.cs"];
m0_60 [label="Assert.AreEqual(''Add'', (string)tokens[0])", span="323-323", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ParseWithEmptyArrayContent()", file="ConvertUtils.cs"];
m0_61 [label="Assert.AreEqual(''Sort by'', (string)tokens[1])", span="324-324", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ParseWithEmptyArrayContent()", file="ConvertUtils.cs"];
m0_62 [label="Assert.AreEqual(''Name'', (string)tokens[2])", span="325-325", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ParseWithEmptyArrayContent()", file="ConvertUtils.cs"];
m0_57 [label="JObject jToken = JObject.Parse(json)", span="319-319", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ParseWithEmptyArrayContent()", file="ConvertUtils.cs"];
m0_56 [label="var json = @''{\r\n    'controls': [\r\n        {\r\n            'messages': {\r\n                'addSuggestion': {\r\n                    'en-US': 'Add'\r\n                }\r\n            }\r\n        },\r\n        {\r\n            'header': {\r\n                'controls': []\r\n            },\r\n            'controls': [\r\n                {\r\n                    'controls': [\r\n                        {\r\n                            'defaultCaption': {\r\n                                'en-US': 'Sort by'\r\n                            },\r\n                            'sortOptions': [\r\n                                {\r\n                                    'label': {\r\n                                        'en-US': 'Name'\r\n                                    }\r\n                                }\r\n                            ]\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}''", span="285-318", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ParseWithEmptyArrayContent()", file="ConvertUtils.cs"];
m0_63 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ParseWithEmptyArrayContent()", span="283-283", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ParseWithEmptyArrayContent()", file="ConvertUtils.cs"];
m0_42 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", file="ConvertUtils.cs"];
m0_333 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScan()", span="708-708", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScan()", file="ConvertUtils.cs"];
m0_337 [label="IList<JToken> t = a.SelectTokens(''$..Name'').ToList()", span="714-714", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScan()", file="ConvertUtils.cs"];
m0_339 [label="Assert.AreEqual(2, t.Count)", span="716-716", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScan()", file="ConvertUtils.cs"];
m0_340 [label="Assert.AreEqual(1, (int)t[0])", span="717-717", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScan()", file="ConvertUtils.cs"];
m0_341 [label="Assert.AreEqual(2, (int)t[1])", span="718-718", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScan()", file="ConvertUtils.cs"];
m0_338 [label="Assert.IsNotNull(t)", span="715-715", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScan()", file="ConvertUtils.cs"];
m0_334 [label="JObject o1 = new JObject { { ''Name'', 1 } }", span="710-710", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScan()", file="ConvertUtils.cs"];
m0_335 [label="JObject o2 = new JObject { { ''Name'', 2 } }", span="711-711", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScan()", file="ConvertUtils.cs"];
m0_336 [label="JArray a = new JArray(o1, o2)", span="712-712", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScan()", file="ConvertUtils.cs"];
m0_342 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScan()", span="708-708", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScan()", file="ConvertUtils.cs"];
m0_84 [label="Entry Newtonsoft.Json.Linq.JProperty.JProperty(string, object)", span="316-316", cluster="Newtonsoft.Json.Linq.JProperty.JProperty(string, object)", file="ConvertUtils.cs"];
m0_85 [label="Entry Newtonsoft.Json.Linq.JToken.SelectToken(string)", span="2310-2310", cluster="Newtonsoft.Json.Linq.JToken.SelectToken(string)", file="ConvertUtils.cs"];
m0_183 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyOnArrayWithError()", span="521-521", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyOnArrayWithError()", file="ConvertUtils.cs"];
m0_184 [label="JArray a = new JArray(1, 2, 3, 4, 5)", span="523-523", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyOnArrayWithError()", file="ConvertUtils.cs"];
m0_185 [label="ExceptionAssert.Throws<JsonException>(() => { a.SelectToken(''BlahBlah'', true); }, @''Property 'BlahBlah' not valid on JArray.'')", span="525-525", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyOnArrayWithError()", file="ConvertUtils.cs"];
m0_186 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyOnArrayWithError()", span="521-521", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyOnArrayWithError()", file="ConvertUtils.cs"];
m0_583 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsAndNonPrimativeValues()", span="1219-1219", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsAndNonPrimativeValues()", file="ConvertUtils.cs"];
m0_586 [label="List<JToken> result = a.SelectTokens(''$.[?(@.value!=1)]'').ToList()", span="1249-1249", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsAndNonPrimativeValues()", file="ConvertUtils.cs"];
m0_588 [label="result = a.SelectTokens(''$.[?(@.value!='2000-12-05T05:07:59-10:00')]'').ToList()", span="1252-1252", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsAndNonPrimativeValues()", file="ConvertUtils.cs"];
m0_590 [label="result = a.SelectTokens(''$.[?(@.value!=null)]'').ToList()", span="1255-1255", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsAndNonPrimativeValues()", file="ConvertUtils.cs"];
m0_592 [label="result = a.SelectTokens(''$.[?(@.value!=123)]'').ToList()", span="1258-1258", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsAndNonPrimativeValues()", file="ConvertUtils.cs"];
m0_594 [label="result = a.SelectTokens(''$.[?(@.value)]'').ToList()", span="1261-1261", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsAndNonPrimativeValues()", file="ConvertUtils.cs"];
m0_587 [label="Assert.AreEqual(4, result.Count)", span="1250-1250", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsAndNonPrimativeValues()", file="ConvertUtils.cs"];
m0_589 [label="Assert.AreEqual(4, result.Count)", span="1253-1253", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsAndNonPrimativeValues()", file="ConvertUtils.cs"];
m0_591 [label="Assert.AreEqual(4, result.Count)", span="1256-1256", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsAndNonPrimativeValues()", file="ConvertUtils.cs"];
m0_593 [label="Assert.AreEqual(3, result.Count)", span="1259-1259", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsAndNonPrimativeValues()", file="ConvertUtils.cs"];
m0_595 [label="Assert.AreEqual(4, result.Count)", span="1262-1262", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsAndNonPrimativeValues()", file="ConvertUtils.cs"];
m0_585 [label="JArray a = JArray.Parse(json)", span="1247-1247", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsAndNonPrimativeValues()", file="ConvertUtils.cs"];
m0_584 [label="string json = @''[\r\n  {\r\n    ''''name'''': ''''string'''',\r\n    ''''value'''': ''''aString''''\r\n  },\r\n  {\r\n    ''''name'''': ''''number'''',\r\n    ''''value'''': 123\r\n  },\r\n  {\r\n    ''''name'''': ''''array'''',\r\n    ''''value'''': [\r\n      1,\r\n      2,\r\n      3,\r\n      4\r\n    ]\r\n  },\r\n  {\r\n    ''''name'''': ''''object'''',\r\n    ''''value'''': {\r\n      ''''1'''': 1\r\n    }\r\n  }\r\n]''", span="1221-1245", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsAndNonPrimativeValues()", file="ConvertUtils.cs"];
m0_596 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsAndNonPrimativeValues()", span="1219-1219", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsAndNonPrimativeValues()", file="ConvertUtils.cs"];
m0_121 [label="Entry Unk.IsNotNull", span="", cluster="Unk.IsNotNull", file="ConvertUtils.cs"];
m0_434 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.MultipleQueries()", span="852-852", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.MultipleQueries()", file="ConvertUtils.cs"];
m0_436 [label="IList<JToken> t = a.SelectTokens(''[?(@ <> 1)][?(@ <> 4)][?(@ < 7)]'').ToList()", span="859-859", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.MultipleQueries()", file="ConvertUtils.cs"];
m0_438 [label="Assert.AreEqual(0, t.Count)", span="861-861", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.MultipleQueries()", file="ConvertUtils.cs"];
m0_437 [label="Assert.IsNotNull(t)", span="860-860", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.MultipleQueries()", file="ConvertUtils.cs"];
m0_435 [label="JArray a = new JArray(1, 2, 3, 4, 5, 6, 7, 8, 9)", span="854-854", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.MultipleQueries()", file="ConvertUtils.cs"];
m0_439 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.MultipleQueries()", span="852-852", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.MultipleQueries()", file="ConvertUtils.cs"];
m0_544 [label="Entry System.DateTimeOffset.DateTimeOffset(int, int, int, int, int, int, System.TimeSpan)", span="0-0", cluster="System.DateTimeOffset.DateTimeOffset(int, int, int, int, int, int, System.TimeSpan)", file="ConvertUtils.cs"];
m0_268 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArray()", span="622-622", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArray()", file="ConvertUtils.cs"];
m0_272 [label="Assert.AreEqual(JTokenType.Integer, t.Type)", span="628-628", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArray()", file="ConvertUtils.cs"];
m0_273 [label="Assert.AreEqual(2, (int)t)", span="629-629", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArray()", file="ConvertUtils.cs"];
m0_271 [label="Assert.IsNotNull(t)", span="627-627", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArray()", file="ConvertUtils.cs"];
m0_269 [label="JArray a = new JArray(1, 2, 3, 4)", span="624-624", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArray()", file="ConvertUtils.cs"];
m0_270 [label="JToken t = a.SelectToken(''[1]'')", span="626-626", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArray()", file="ConvertUtils.cs"];
m0_274 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArray()", span="622-622", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArray()", file="ConvertUtils.cs"];
m0_489 [label="Entry Newtonsoft.Json.Linq.JArray.Parse(string)", span="157-157", cluster="Newtonsoft.Json.Linq.JArray.Parse(string)", file="ConvertUtils.cs"];
m0_476 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NestedQuery()", span="930-930", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NestedQuery()", file="ConvertUtils.cs"];
m0_478 [label="IList<JToken> t = a.SelectTokens(''[?(@.cast[?(@.name=='Will Smith')])].name'').ToList()", span="947-947", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NestedQuery()", file="ConvertUtils.cs"];
m0_480 [label="Assert.AreEqual(2, t.Count)", span="949-949", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NestedQuery()", file="ConvertUtils.cs"];
m0_481 [label="Assert.AreEqual(''Bad Boys'', (string)t[0])", span="950-950", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NestedQuery()", file="ConvertUtils.cs"];
m0_482 [label="Assert.AreEqual(''Independence Day'', (string)t[1])", span="951-951", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NestedQuery()", file="ConvertUtils.cs"];
m0_479 [label="Assert.IsNotNull(t)", span="948-948", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NestedQuery()", file="ConvertUtils.cs"];
m0_477 [label="JArray a = new JArray(\r\n                new JObject(\r\n                    new JProperty(''name'', ''Bad Boys''),\r\n                    new JProperty(''cast'', new JArray(\r\n                        new JObject(new JProperty(''name'', ''Will Smith''))))),\r\n                new JObject(\r\n                    new JProperty(''name'', ''Independence Day''),\r\n                    new JProperty(''cast'', new JArray(\r\n                        new JObject(new JProperty(''name'', ''Will Smith''))))),\r\n                new JObject(\r\n                    new JProperty(''name'', ''The Rock''),\r\n                    new JProperty(''cast'', new JArray(\r\n                        new JObject(new JProperty(''name'', ''Nick Cage'')))))\r\n                )", span="932-945", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NestedQuery()", file="ConvertUtils.cs"];
m0_483 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NestedQuery()", span="930-930", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NestedQuery()", file="ConvertUtils.cs"];
m0_235 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySliceWithError()", span="589-589", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySliceWithError()", file="ConvertUtils.cs"];
m0_236 [label="JArray a = new JArray(1, 2, 3, 4, 5)", span="591-591", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySliceWithError()", file="ConvertUtils.cs"];
m0_237 [label="ExceptionAssert.Throws<JsonException>(() => { a.SelectToken(''[99:]'', true); }, ''Array slice of 99 to * returned no results.'')", span="593-593", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySliceWithError()", file="ConvertUtils.cs"];
m0_238 [label="ExceptionAssert.Throws<JsonException>(() => { a.SelectToken(''[1:-19]'', true); }, ''Array slice of 1 to -19 returned no results.'')", span="595-595", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySliceWithError()", file="ConvertUtils.cs"];
m0_239 [label="ExceptionAssert.Throws<JsonException>(() => { a.SelectToken(''[:-19]'', true); }, ''Array slice of * to -19 returned no results.'')", span="597-597", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySliceWithError()", file="ConvertUtils.cs"];
m0_240 [label="a = new JArray()", span="599-599", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySliceWithError()", file="ConvertUtils.cs"];
m0_241 [label="ExceptionAssert.Throws<JsonException>(() => { a.SelectToken(''[:]'', true); }, ''Array slice of * to * returned no results.'')", span="601-601", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySliceWithError()", file="ConvertUtils.cs"];
m0_242 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySliceWithError()", span="589-589", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySliceWithError()", file="ConvertUtils.cs"];
m0_108 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateDollarTypeString()", span="409-409", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateDollarTypeString()", file="ConvertUtils.cs"];
m0_111 [label="Assert.AreEqual(2, (int)t)", span="415-415", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateDollarTypeString()", file="ConvertUtils.cs"];
m0_109 [label="JObject o = new JObject(\r\n                new JProperty(''$values'', new JArray(1, 2, 3)))", span="411-412", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateDollarTypeString()", file="ConvertUtils.cs"];
m0_110 [label="JToken t = o.SelectToken(''$values[1]'')", span="414-414", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateDollarTypeString()", file="ConvertUtils.cs"];
m0_112 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateDollarTypeString()", span="409-409", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateDollarTypeString()", file="ConvertUtils.cs"];
m0_34 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanQuoted()", span="208-208", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanQuoted()", file="ConvertUtils.cs"];
m0_37 [label="int result = models.SelectTokens(''$..['My.Child.Node']'').Count()", span="236-236", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanQuoted()", file="ConvertUtils.cs"];
m0_39 [label="result = models.SelectTokens(''..['My.Child.Node']'').Count()", span="239-239", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanQuoted()", file="ConvertUtils.cs"];
m0_38 [label="Assert.AreEqual(1, result)", span="237-237", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanQuoted()", file="ConvertUtils.cs"];
m0_40 [label="Assert.AreEqual(1, result)", span="240-240", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanQuoted()", file="ConvertUtils.cs"];
m0_36 [label="JObject models = JObject.Parse(json)", span="234-234", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanQuoted()", file="ConvertUtils.cs"];
m0_35 [label="string json = @''{\r\n    ''''Node1'''': {\r\n        ''''Child1'''': {\r\n            ''''Name'''': ''''IsMe'''',\r\n            ''''TargetNode'''': {\r\n                ''''Prop1'''': ''''Val1'''',\r\n                ''''Prop2'''': ''''Val2''''\r\n            }\r\n        },\r\n        ''''My.Child.Node'''': {\r\n            ''''TargetNode'''': {\r\n                ''''Prop1'''': ''''Val1'''',\r\n                ''''Prop2'''': ''''Val2''''\r\n            }\r\n        }\r\n    },\r\n    ''''Node2'''': {\r\n        ''''TargetNode'''': {\r\n            ''''Prop1'''': ''''Val1'''',\r\n            ''''Prop2'''': ''''Val2''''\r\n        }\r\n    }\r\n}''", span="210-232", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanQuoted()", file="ConvertUtils.cs"];
m0_41 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanQuoted()", span="208-208", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanQuoted()", file="ConvertUtils.cs"];
m0_332 [label="Entry System.Collections.Generic.IEnumerable<TSource>.ElementAt<TSource>(int)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.ElementAt<TSource>(int)", file="ConvertUtils.cs"];
m0_549 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="ConvertUtils.cs"];
m0_597 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.RootInFilter()", span="1266-1266", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.RootInFilter()", file="ConvertUtils.cs"];
m0_600 [label="List<JToken> result = a.SelectTokens(''$.[?($.[0].store.bicycle.price < 20)]'').ToList()", span="1310-1310", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.RootInFilter()", file="ConvertUtils.cs"];
m0_602 [label="result = a.SelectTokens(''$.[?($.[0].store.bicycle.price < 10)]'').ToList()", span="1313-1313", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.RootInFilter()", file="ConvertUtils.cs"];
m0_601 [label="Assert.AreEqual(1, result.Count)", span="1311-1311", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.RootInFilter()", file="ConvertUtils.cs"];
m0_603 [label="Assert.AreEqual(0, result.Count)", span="1314-1314", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.RootInFilter()", file="ConvertUtils.cs"];
m0_599 [label="JArray a = JArray.Parse(json)", span="1308-1308", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.RootInFilter()", file="ConvertUtils.cs"];
m0_598 [label="string json = @''[\r\n   {\r\n      ''''store'''' : {\r\n         ''''book'''' : [\r\n            {\r\n               ''''category'''' : ''''reference'''',\r\n               ''''author'''' : ''''Nigel Rees'''',\r\n               ''''title'''' : ''''Sayings of the Century'''',\r\n               ''''price'''' : 8.95\r\n            },\r\n            {\r\n               ''''category'''' : ''''fiction'''',\r\n               ''''author'''' : ''''Evelyn Waugh'''',\r\n               ''''title'''' : ''''Sword of Honour'''',\r\n               ''''price'''' : 12.99\r\n            },\r\n            {\r\n               ''''category'''' : ''''fiction'''',\r\n               ''''author'''' : ''''Herman Melville'''',\r\n               ''''title'''' : ''''Moby Dick'''',\r\n               ''''isbn'''' : ''''0-553-21311-3'''',\r\n               ''''price'''' : 8.99\r\n            },\r\n            {\r\n               ''''category'''' : ''''fiction'''',\r\n               ''''author'''' : ''''J. R. R. Tolkien'''',\r\n               ''''title'''' : ''''The Lord of the Rings'''',\r\n               ''''isbn'''' : ''''0-395-19395-8'''',\r\n               ''''price'''' : 22.99\r\n            }\r\n         ],\r\n         ''''bicycle'''' : {\r\n            ''''color'''' : ''''red'''',\r\n            ''''price'''' : 19.95\r\n         }\r\n      },\r\n      ''''expensive'''' : 10\r\n   }\r\n]''", span="1268-1306", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.RootInFilter()", file="ConvertUtils.cs"];
m0_604 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.RootInFilter()", span="1266-1266", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.RootInFilter()", file="ConvertUtils.cs"];
m0_149 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateIndexerOnObjectWithError()", span="477-477", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateIndexerOnObjectWithError()", file="ConvertUtils.cs"];
m0_150 [label="JObject o = new JObject(\r\n                new JProperty(''Blah'', 1))", span="479-480", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateIndexerOnObjectWithError()", file="ConvertUtils.cs"];
m0_151 [label="ExceptionAssert.Throws<JsonException>(() => { o.SelectToken(''[1]'', true); }, @''Index 1 not valid on JObject.'')", span="482-482", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateIndexerOnObjectWithError()", file="ConvertUtils.cs"];
m0_152 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateIndexerOnObjectWithError()", span="477-477", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateIndexerOnObjectWithError()", file="ConvertUtils.cs"];
m0_205 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateConstructorOutOfBoundsIndxer()", span="545-545", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateConstructorOutOfBoundsIndxer()", file="ConvertUtils.cs"];
m0_207 [label="Assert.IsNull(c.SelectToken(''[1]''))", span="549-549", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateConstructorOutOfBoundsIndxer()", file="ConvertUtils.cs"];
m0_206 [label="JConstructor c = new JConstructor(''Blah'')", span="547-547", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateConstructorOutOfBoundsIndxer()", file="ConvertUtils.cs"];
m0_208 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateConstructorOutOfBoundsIndxer()", span="545-545", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateConstructorOutOfBoundsIndxer()", file="ConvertUtils.cs"];
m0_412 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EqualsQuery()", span="814-814", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EqualsQuery()", file="ConvertUtils.cs"];
m0_414 [label="IList<JToken> t = a.SelectTokens(''[ ?( @.['hi'] == 'ha' ) ]'').ToList()", span="820-820", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EqualsQuery()", file="ConvertUtils.cs"];
m0_416 [label="Assert.AreEqual(1, t.Count)", span="822-822", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EqualsQuery()", file="ConvertUtils.cs"];
m0_415 [label="Assert.IsNotNull(t)", span="821-821", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EqualsQuery()", file="ConvertUtils.cs"];
m0_417 [label="Assert.IsTrue(JToken.DeepEquals(new JObject(new JProperty(''hi'', ''ha'')), t[0]))", span="823-823", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EqualsQuery()", file="ConvertUtils.cs"];
m0_413 [label="JArray a = new JArray(\r\n                new JObject(new JProperty(''hi'', ''ho'')),\r\n                new JObject(new JProperty(''hi'', ''ha'')))", span="816-818", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EqualsQuery()", file="ConvertUtils.cs"];
m0_418 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EqualsQuery()", span="814-814", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EqualsQuery()", file="ConvertUtils.cs"];
m0_261 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayOutOfBoundsIndxerWithError()", span="614-614", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayOutOfBoundsIndxerWithError()", file="ConvertUtils.cs"];
m0_262 [label="JArray a = new JArray(1, 2, 3, 4, 5)", span="616-616", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayOutOfBoundsIndxerWithError()", file="ConvertUtils.cs"];
m0_263 [label="ExceptionAssert.Throws<JsonException>(() => { a.SelectToken(''[1000].Ha'', true); }, ''Index 1000 outside the bounds of JArray.'')", span="618-618", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayOutOfBoundsIndxerWithError()", file="ConvertUtils.cs"];
m0_264 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayOutOfBoundsIndxerWithError()", span="614-614", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayOutOfBoundsIndxerWithError()", file="ConvertUtils.cs"];
m0_256 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateOutOfBoundsIndxer()", span="605-605", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateOutOfBoundsIndxer()", file="ConvertUtils.cs"];
m0_257 [label="JArray a = new JArray(1, 2, 3, 4, 5)", span="607-607", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateOutOfBoundsIndxer()", file="ConvertUtils.cs"];
m0_258 [label="JToken t = a.SelectToken(''[1000].Ha'')", span="609-609", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateOutOfBoundsIndxer()", file="ConvertUtils.cs"];
m0_259 [label="Assert.IsNull(t)", span="610-610", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateOutOfBoundsIndxer()", file="ConvertUtils.cs"];
m0_260 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateOutOfBoundsIndxer()", span="605-605", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateOutOfBoundsIndxer()", file="ConvertUtils.cs"];
m0_512 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.WildcardWithProperty()", span="1056-1056", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.WildcardWithProperty()", file="ConvertUtils.cs"];
m0_514 [label="IList<JToken> tokens = o.SelectTokens(''$..*[?(@.text)]'').ToList()", span="1090-1090", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.WildcardWithProperty()", file="ConvertUtils.cs"];
m0_516 [label="Assert.AreEqual(''Sort system'', (string)tokens[i++][''text''])", span="1092-1092", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.WildcardWithProperty()", file="ConvertUtils.cs"];
m0_517 [label="Assert.AreEqual(''TSP-1'', (string)tokens[i++][''text''])", span="1093-1093", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.WildcardWithProperty()", file="ConvertUtils.cs"];
m0_518 [label="Assert.AreEqual(''Passenger 15'', (string)tokens[i++][''text''])", span="1094-1094", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.WildcardWithProperty()", file="ConvertUtils.cs"];
m0_519 [label="Assert.AreEqual(''Yard 11'', (string)tokens[i++][''text''])", span="1095-1095", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.WildcardWithProperty()", file="ConvertUtils.cs"];
m0_520 [label="Assert.AreEqual(''Sort yard 12'', (string)tokens[i++][''text''])", span="1096-1096", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.WildcardWithProperty()", file="ConvertUtils.cs"];
m0_521 [label="Assert.AreEqual(''Yard 13'', (string)tokens[i++][''text''])", span="1097-1097", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.WildcardWithProperty()", file="ConvertUtils.cs"];
m0_522 [label="Assert.AreEqual(6, tokens.Count)", span="1098-1098", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.WildcardWithProperty()", file="ConvertUtils.cs"];
m0_513 [label="JObject o = JObject.Parse(@''{\r\n    ''''station'''': 92000041000001, \r\n    ''''containers'''': [\r\n        {\r\n            ''''id'''': 1,\r\n            ''''text'''': ''''Sort system'''',\r\n            ''''containers'''': [\r\n                {\r\n                    ''''id'''': ''''2'''',\r\n                    ''''text'''': ''''Yard 11''''\r\n                },\r\n                {\r\n                    ''''id'''': ''''92000020100006'''',\r\n                    ''''text'''': ''''Sort yard 12''''\r\n                },\r\n                {\r\n                    ''''id'''': ''''92000020100005'''',\r\n                    ''''text'''': ''''Yard 13''''\r\n                } \r\n            ]\r\n        }, \r\n        {\r\n            ''''id'''': ''''92000020100011'''',\r\n            ''''text'''': ''''TSP-1''''\r\n        }, \r\n        {\r\n            ''''id'''':''''92000020100007'''',\r\n            ''''text'''': ''''Passenger 15''''\r\n        }\r\n    ]\r\n}'')", span="1058-1088", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.WildcardWithProperty()", file="ConvertUtils.cs"];
m0_515 [label="int i = 0", span="1091-1091", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.WildcardWithProperty()", file="ConvertUtils.cs"];
m0_523 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.WildcardWithProperty()", span="1056-1056", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.WildcardWithProperty()", file="ConvertUtils.cs"];
m0_113 [label="Entry Newtonsoft.Json.Linq.JArray.JArray(params object[])", span="82-82", cluster="Newtonsoft.Json.Linq.JArray.JArray(params object[])", file="ConvertUtils.cs"];
m0_426 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NoPathQuery()", span="840-840", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NoPathQuery()", file="ConvertUtils.cs"];
m0_428 [label="IList<JToken> t = a.SelectTokens(''[ ?( @ > 1 ) ]'').ToList()", span="844-844", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NoPathQuery()", file="ConvertUtils.cs"];
m0_430 [label="Assert.AreEqual(2, t.Count)", span="846-846", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NoPathQuery()", file="ConvertUtils.cs"];
m0_431 [label="Assert.AreEqual(2, (int)t[0])", span="847-847", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NoPathQuery()", file="ConvertUtils.cs"];
m0_432 [label="Assert.AreEqual(3, (int)t[1])", span="848-848", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NoPathQuery()", file="ConvertUtils.cs"];
m0_429 [label="Assert.IsNotNull(t)", span="845-845", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NoPathQuery()", file="ConvertUtils.cs"];
m0_427 [label="JArray a = new JArray(1, 2, 3)", span="842-842", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NoPathQuery()", file="ConvertUtils.cs"];
m0_433 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NoPathQuery()", span="840-840", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NoPathQuery()", file="ConvertUtils.cs"];
m0_130 [label="Entry Newtonsoft.Json.Linq.JObject.JObject(params object[])", span="104-104", cluster="Newtonsoft.Json.Linq.JObject.JObject(params object[])", file="ConvertUtils.cs"];
m0_545 [label="Entry System.TimeSpan.FromHours(double)", span="0-0", cluster="System.TimeSpan.FromHours(double)", file="ConvertUtils.cs"];
m0_171 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyOnArray()", span="504-504", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyOnArray()", file="ConvertUtils.cs"];
m0_172 [label="JArray a = new JArray(1, 2, 3, 4, 5)", span="506-506", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyOnArray()", file="ConvertUtils.cs"];
m0_173 [label="JToken t = a.SelectToken(''BlahBlah'')", span="508-508", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyOnArray()", file="ConvertUtils.cs"];
m0_174 [label="Assert.IsNull(t)", span="509-509", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyOnArray()", file="ConvertUtils.cs"];
m0_175 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyOnArray()", span="504-504", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyOnArray()", file="ConvertUtils.cs"];
m0_78 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyPropertyIndexer()", span="356-356", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyPropertyIndexer()", file="ConvertUtils.cs"];
m0_81 [label="Assert.AreEqual(1, (int)t)", span="362-362", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyPropertyIndexer()", file="ConvertUtils.cs"];
m0_80 [label="JToken t = o.SelectToken(''['']'')", span="361-361", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyPropertyIndexer()", file="ConvertUtils.cs"];
m0_79 [label="JObject o = new JObject(\r\n                new JProperty('''', 1))", span="358-359", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyPropertyIndexer()", file="ConvertUtils.cs"];
m0_82 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyPropertyIndexer()", span="356-356", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyPropertyIndexer()", file="ConvertUtils.cs"];
m0_28 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanFilterTrue()", span="170-170", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanFilterTrue()", file="ConvertUtils.cs"];
m0_31 [label="var results = models.SelectTokens(''$.elements..[?(true)]'').ToList()", span="202-202", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanFilterTrue()", file="ConvertUtils.cs"];
m0_32 [label="Assert.AreEqual(25, results.Count)", span="204-204", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanFilterTrue()", file="ConvertUtils.cs"];
m0_30 [label="JObject models = JObject.Parse(json)", span="200-200", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanFilterTrue()", file="ConvertUtils.cs"];
m0_29 [label="string json = @''{\r\n  ''''elements'''': [\r\n    {\r\n      ''''id'''': ''''A'''',\r\n      ''''children'''': [\r\n        {\r\n          ''''id'''': ''''AA'''',\r\n          ''''children'''': [\r\n            {\r\n              ''''id'''': ''''AAA''''\r\n            },\r\n            {\r\n              ''''id'''': ''''AAB''''\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          ''''id'''': ''''AB''''\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      ''''id'''': ''''B'''',\r\n      ''''children'''': []\r\n    }\r\n  ]\r\n}''", span="172-198", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanFilterTrue()", file="ConvertUtils.cs"];
m0_33 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanFilterTrue()", span="170-170", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanFilterTrue()", file="ConvertUtils.cs"];
m0_153 [label="Entry Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", span="367-367", cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", file="ConvertUtils.cs"];
m0_373 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", span="756-756", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="ConvertUtils.cs"];
m0_374 [label="JObject o1 = new JObject { { ''Name'', 1 } }", span="758-758", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", color=green, community=0, file="ConvertUtils.cs"];
m0_375 [label="JObject o2 = new JObject { { ''Name'', 2 } }", span="759-759", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", color=green, community=0, file="ConvertUtils.cs"];
m0_377 [label="JArray a = new JArray(o1, o2, o3)", span="761-761", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", color=green, community=0, file="ConvertUtils.cs"];
m0_382 [label="Assert.IsTrue(JToken.DeepEquals(o1, t[1]))", span="768-768", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="ConvertUtils.cs"];
m0_376 [label="JObject o3 = new JObject { { ''Name'', new JObject { { ''Name'', new JArray(3) } } } }", span="760-760", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", color=green, community=0, file="ConvertUtils.cs"];
m0_384 [label="Assert.IsTrue(JToken.DeepEquals(o2, t[3]))", span="770-770", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="ConvertUtils.cs"];
m0_378 [label="IList<JToken> t = a.SelectTokens(''$..*'').ToList()", span="763-763", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="ConvertUtils.cs"];
m0_381 [label="Assert.IsTrue(JToken.DeepEquals(a, t[0]))", span="767-767", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="ConvertUtils.cs"];
m0_386 [label="Assert.IsTrue(JToken.DeepEquals(o3, t[5]))", span="772-772", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="ConvertUtils.cs"];
m0_380 [label="Assert.AreEqual(9, t.Count)", span="765-765", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="ConvertUtils.cs"];
m0_383 [label="Assert.AreEqual(1, (int)t[2])", span="769-769", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="ConvertUtils.cs"];
m0_385 [label="Assert.AreEqual(2, (int)t[4])", span="771-771", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="ConvertUtils.cs"];
m0_389 [label="Assert.AreEqual(3, (int)t[8])", span="775-775", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="ConvertUtils.cs"];
m0_379 [label="Assert.IsNotNull(t)", span="764-764", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="ConvertUtils.cs"];
m0_387 [label="Assert.IsTrue(JToken.DeepEquals(new JObject { { ''Name'', new JArray(3) } }, t[6]))", span="773-773", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="ConvertUtils.cs"];
m0_388 [label="Assert.IsTrue(JToken.DeepEquals(new JArray(3), t[7]))", span="774-774", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="ConvertUtils.cs"];
m0_390 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", span="756-756", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="ConvertUtils.cs"];
m0_343 [label="Entry Newtonsoft.Json.Linq.JObject.JObject()", span="87-87", cluster="Newtonsoft.Json.Linq.JObject.JObject()", file="ConvertUtils.cs"];
m0_253 [label="Entry lambda expression", span="601-601", cluster="lambda expression", file="ConvertUtils.cs"];
m0_181 [label="a.SelectToken(''[0, 1]'')", span="517-517", cluster="lambda expression", file="ConvertUtils.cs"];
m0_188 [label="a.SelectToken(''BlahBlah'', true)", span="525-525", cluster="lambda expression", file="ConvertUtils.cs"];
m0_195 [label="a.SelectToken(''[9,10]'', true)", span="533-533", cluster="lambda expression", file="ConvertUtils.cs"];
m0_233 [label="a.SelectToken(''['Missing','Missing2']'', true)", span="585-585", cluster="lambda expression", file="ConvertUtils.cs"];
m0_245 [label="a.SelectToken(''[99:]'', true)", span="593-593", cluster="lambda expression", file="ConvertUtils.cs"];
m0_248 [label="a.SelectToken(''[1:-19]'', true)", span="595-595", cluster="lambda expression", file="ConvertUtils.cs"];
m0_251 [label="a.SelectToken(''[:-19]'', true)", span="597-597", cluster="lambda expression", file="ConvertUtils.cs"];
m0_266 [label="a.SelectToken(''[1000].Ha'', true)", span="618-618", cluster="lambda expression", file="ConvertUtils.cs"];
m0_550 [label="Entry lambda expression", span="1125-1125", cluster="lambda expression", file="ConvertUtils.cs"];
m0_574 [label="Entry lambda expression", span="1198-1198", cluster="lambda expression", file="ConvertUtils.cs"];
m0_580 [label="Entry lambda expression", span="1206-1206", cluster="lambda expression", file="ConvertUtils.cs"];
m0_577 [label="Entry lambda expression", span="1202-1202", cluster="lambda expression", file="ConvertUtils.cs"];
m0_551 [label="new JObject(new JProperty(''childProp'', v))", span="1125-1125", cluster="lambda expression", file="ConvertUtils.cs"];
m0_180 [label="Entry lambda expression", span="517-517", cluster="lambda expression", file="ConvertUtils.cs"];
m0_182 [label="Exit lambda expression", span="517-517", cluster="lambda expression", file="ConvertUtils.cs"];
m0_187 [label="Entry lambda expression", span="525-525", cluster="lambda expression", file="ConvertUtils.cs"];
m0_189 [label="Exit lambda expression", span="525-525", cluster="lambda expression", file="ConvertUtils.cs"];
m0_194 [label="Entry lambda expression", span="533-533", cluster="lambda expression", file="ConvertUtils.cs"];
m0_196 [label="Exit lambda expression", span="533-533", cluster="lambda expression", file="ConvertUtils.cs"];
m0_232 [label="Entry lambda expression", span="585-585", cluster="lambda expression", file="ConvertUtils.cs"];
m0_234 [label="Exit lambda expression", span="585-585", cluster="lambda expression", file="ConvertUtils.cs"];
m0_244 [label="Entry lambda expression", span="593-593", cluster="lambda expression", file="ConvertUtils.cs"];
m0_246 [label="Exit lambda expression", span="593-593", cluster="lambda expression", file="ConvertUtils.cs"];
m0_247 [label="Entry lambda expression", span="595-595", cluster="lambda expression", file="ConvertUtils.cs"];
m0_249 [label="Exit lambda expression", span="595-595", cluster="lambda expression", file="ConvertUtils.cs"];
m0_250 [label="Entry lambda expression", span="597-597", cluster="lambda expression", file="ConvertUtils.cs"];
m0_252 [label="Exit lambda expression", span="597-597", cluster="lambda expression", file="ConvertUtils.cs"];
m0_265 [label="Entry lambda expression", span="618-618", cluster="lambda expression", file="ConvertUtils.cs"];
m0_267 [label="Exit lambda expression", span="618-618", cluster="lambda expression", file="ConvertUtils.cs"];
m0_552 [label="Exit lambda expression", span="1125-1125", cluster="lambda expression", file="ConvertUtils.cs"];
m0_155 [label="o.SelectToken(''[1]'', true)", span="482-482", cluster="lambda expression", file="ConvertUtils.cs"];
m0_162 [label="o.SelectToken(''[*]'', true)", span="491-491", cluster="lambda expression", file="ConvertUtils.cs"];
m0_169 [label="o.SelectToken(''[:]'', true)", span="500-500", cluster="lambda expression", file="ConvertUtils.cs"];
m0_203 [label="c.SelectToken(''[1]'', true)", span="541-541", cluster="lambda expression", file="ConvertUtils.cs"];
m0_214 [label="o.SelectToken(''Missing'', true)", span="558-558", cluster="lambda expression", file="ConvertUtils.cs"];
m0_226 [label="o.SelectToken(''['Missing','Missing2']'', true)", span="577-577", cluster="lambda expression", file="ConvertUtils.cs"];
m0_254 [label="a.SelectToken(''[:]'', true)", span="601-601", cluster="lambda expression", file="ConvertUtils.cs"];
m0_578 [label="(string)m.SelectToken(''Products[1].Name'')", span="1202-1202", cluster="lambda expression", file="ConvertUtils.cs"];
m0_581 [label="(decimal)m.SelectToken(''Products[0].Price'')", span="1206-1206", cluster="lambda expression", file="ConvertUtils.cs"];
m0_576 [label="Exit lambda expression", span="1198-1198", cluster="lambda expression", file="ConvertUtils.cs"];
m0_575 [label="(string)s", span="1198-1198", cluster="lambda expression", file="ConvertUtils.cs"];
m0_582 [label="Exit lambda expression", span="1206-1206", cluster="lambda expression", file="ConvertUtils.cs"];
m0_579 [label="Exit lambda expression", span="1202-1202", cluster="lambda expression", file="ConvertUtils.cs"];
m0_154 [label="Entry lambda expression", span="482-482", cluster="lambda expression", file="ConvertUtils.cs"];
m0_156 [label="Exit lambda expression", span="482-482", cluster="lambda expression", file="ConvertUtils.cs"];
m0_161 [label="Entry lambda expression", span="491-491", cluster="lambda expression", file="ConvertUtils.cs"];
m0_163 [label="Exit lambda expression", span="491-491", cluster="lambda expression", file="ConvertUtils.cs"];
m0_168 [label="Entry lambda expression", span="500-500", cluster="lambda expression", file="ConvertUtils.cs"];
m0_170 [label="Exit lambda expression", span="500-500", cluster="lambda expression", file="ConvertUtils.cs"];
m0_202 [label="Entry lambda expression", span="541-541", cluster="lambda expression", file="ConvertUtils.cs"];
m0_204 [label="Exit lambda expression", span="541-541", cluster="lambda expression", file="ConvertUtils.cs"];
m0_213 [label="Entry lambda expression", span="558-558", cluster="lambda expression", file="ConvertUtils.cs"];
m0_215 [label="Exit lambda expression", span="558-558", cluster="lambda expression", file="ConvertUtils.cs"];
m0_225 [label="Entry lambda expression", span="577-577", cluster="lambda expression", file="ConvertUtils.cs"];
m0_227 [label="Exit lambda expression", span="577-577", cluster="lambda expression", file="ConvertUtils.cs"];
m0_255 [label="Exit lambda expression", span="601-601", cluster="lambda expression", file="ConvertUtils.cs"];
m0_391 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSinglePropertyReturningArray()", span="779-779", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSinglePropertyReturningArray()", file="ConvertUtils.cs"];
m0_395 [label="Assert.AreEqual(JTokenType.Array, t.Type)", span="786-786", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSinglePropertyReturningArray()", file="ConvertUtils.cs"];
m0_397 [label="Assert.AreEqual(JTokenType.Integer, t.Type)", span="789-789", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSinglePropertyReturningArray()", file="ConvertUtils.cs"];
m0_398 [label="Assert.AreEqual(3, (int)t)", span="790-790", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSinglePropertyReturningArray()", file="ConvertUtils.cs"];
m0_394 [label="Assert.IsNotNull(t)", span="785-785", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSinglePropertyReturningArray()", file="ConvertUtils.cs"];
m0_393 [label="JToken t = o.SelectToken(''Blah'')", span="784-784", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSinglePropertyReturningArray()", file="ConvertUtils.cs"];
m0_396 [label="t = o.SelectToken(''Blah[2]'')", span="788-788", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSinglePropertyReturningArray()", file="ConvertUtils.cs"];
m0_392 [label="JObject o = new JObject(\r\n                new JProperty(''Blah'', new[] { 1, 2, 3 }))", span="781-782", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSinglePropertyReturningArray()", file="ConvertUtils.cs"];
m0_399 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSinglePropertyReturningArray()", span="779-779", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSinglePropertyReturningArray()", file="ConvertUtils.cs"];
m0_484 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.PathWithConstructor()", span="955-955", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.PathWithConstructor()", file="ConvertUtils.cs"];
m0_487 [label="Assert.AreEqual(1L, v.Value)", span="979-979", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.PathWithConstructor()", file="ConvertUtils.cs"];
m0_486 [label="JValue v = (JValue)a.SelectToken(''[1].Property2[1][0]'')", span="978-978", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.PathWithConstructor()", file="ConvertUtils.cs"];
m0_485 [label="JArray a = JArray.Parse(@''[\r\n  {\r\n    ''''Property1'''': [\r\n      1,\r\n      [\r\n        [\r\n          []\r\n        ]\r\n      ]\r\n    ]\r\n  },\r\n  {\r\n    ''''Property2'''': new Constructor1(\r\n      null,\r\n      [\r\n        1\r\n      ]\r\n    )\r\n  }\r\n]'')", span="957-976", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.PathWithConstructor()", file="ConvertUtils.cs"];
m0_488 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.PathWithConstructor()", span="955-955", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.PathWithConstructor()", file="ConvertUtils.cs"];
m0_197 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateConstructorOutOfBoundsIndxerWithError()", span="537-537", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateConstructorOutOfBoundsIndxerWithError()", file="ConvertUtils.cs"];
m0_199 [label="ExceptionAssert.Throws<JsonException>(() => { c.SelectToken(''[1]'', true); }, @''Index 1 outside the bounds of JConstructor.'')", span="541-541", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateConstructorOutOfBoundsIndxerWithError()", file="ConvertUtils.cs"];
m0_198 [label="JConstructor c = new JConstructor(''Blah'')", span="539-539", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateConstructorOutOfBoundsIndxerWithError()", file="ConvertUtils.cs"];
m0_200 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateConstructorOutOfBoundsIndxerWithError()", span="537-537", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateConstructorOutOfBoundsIndxerWithError()", file="ConvertUtils.cs"];
m0_216 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyWithoutError()", span="562-562", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyWithoutError()", file="ConvertUtils.cs"];
m0_219 [label="Assert.AreEqual(1, v.Value)", span="568-568", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyWithoutError()", file="ConvertUtils.cs"];
m0_218 [label="JValue v = (JValue)o.SelectToken(''Blah'', true)", span="567-567", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyWithoutError()", file="ConvertUtils.cs"];
m0_217 [label="JObject o = new JObject(\r\n                new JProperty(''Blah'', 1))", span="564-565", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyWithoutError()", file="ConvertUtils.cs"];
m0_220 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyWithoutError()", span="562-562", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyWithoutError()", file="ConvertUtils.cs"];
m0_103 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateDollarString()", span="399-399", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateDollarString()", file="ConvertUtils.cs"];
m0_106 [label="Assert.AreEqual(o, t)", span="405-405", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateDollarString()", file="ConvertUtils.cs"];
m0_104 [label="JObject o = new JObject(\r\n                new JProperty(''Blah'', 1))", span="401-402", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateDollarString()", file="ConvertUtils.cs"];
m0_105 [label="JToken t = o.SelectToken(''$'')", span="404-404", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateDollarString()", file="ConvertUtils.cs"];
m0_107 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateDollarString()", span="399-399", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateDollarString()", file="ConvertUtils.cs"];
m0_553 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", span="1152-1152", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="ConvertUtils.cs"];
m0_558 [label="Assert.AreEqual(''Acme Co'', name)", span="1194-1194", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="ConvertUtils.cs"];
m0_559 [label="Assert.AreEqual(50m, productPrice)", span="1195-1195", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="ConvertUtils.cs"];
m0_560 [label="Assert.AreEqual(''Elbow Grease'', productName)", span="1196-1196", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="ConvertUtils.cs"];
m0_564 [label="Assert.AreEqual(2, storeNames.Count)", span="1209-1209", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="ConvertUtils.cs"];
m0_565 [label="Assert.AreEqual(''Lambton Quay'', storeNames[0])", span="1210-1210", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="ConvertUtils.cs"];
m0_566 [label="Assert.AreEqual(''Willis Street'', storeNames[1])", span="1211-1211", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="ConvertUtils.cs"];
m0_567 [label="Assert.AreEqual(2, firstProductNames.Count)", span="1212-1212", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="ConvertUtils.cs"];
m0_568 [label="Assert.AreEqual(null, firstProductNames[0])", span="1213-1213", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="ConvertUtils.cs"];
m0_569 [label="Assert.AreEqual(''Headlight Fluid'', firstProductNames[1])", span="1214-1214", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="ConvertUtils.cs"];
m0_570 [label="Assert.AreEqual(149.95m, totalPrice)", span="1215-1215", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="ConvertUtils.cs"];
m0_555 [label="string name = (string)o.SelectToken(''Manufacturers[0].Name'')", span="1185-1185", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="ConvertUtils.cs"];
m0_557 [label="string productName = (string)o.SelectToken(''Manufacturers[1].Products[0].Name'')", span="1191-1191", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="ConvertUtils.cs"];
m0_556 [label="decimal productPrice = (decimal)o.SelectToken(''Manufacturers[0].Products[0].Price'')", span="1188-1188", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="ConvertUtils.cs"];
m0_561 [label="IList<string> storeNames = o.SelectToken(''Stores'').Select(s => (string)s).ToList()", span="1198-1198", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="ConvertUtils.cs"];
m0_563 [label="decimal totalPrice = o[''Manufacturers''].Sum(m => (decimal)m.SelectToken(''Products[0].Price''))", span="1206-1206", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="ConvertUtils.cs"];
m0_562 [label="IList<string> firstProductNames = o[''Manufacturers''].Select(m => (string)m.SelectToken(''Products[1].Name'')).ToList()", span="1202-1202", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="ConvertUtils.cs"];
m0_554 [label="JObject o = JObject.Parse(@''{\r\n        ''''Stores'''': [\r\n          ''''Lambton Quay'''',\r\n          ''''Willis Street''''\r\n        ],\r\n        ''''Manufacturers'''': [\r\n          {\r\n            ''''Name'''': ''''Acme Co'''',\r\n            ''''Products'''': [\r\n              {\r\n                ''''Name'''': ''''Anvil'''',\r\n                ''''Price'''': 50\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            ''''Name'''': ''''Contoso'''',\r\n            ''''Products'''': [\r\n              {\r\n                ''''Name'''': ''''Elbow Grease'''',\r\n                ''''Price'''': 99.95\r\n              },\r\n              {\r\n                ''''Name'''': ''''Headlight Fluid'''',\r\n                ''''Price'''': 4\r\n              }\r\n            ]\r\n          }\r\n        ]\r\n      }'')", span="1154-1183", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="ConvertUtils.cs"];
m0_571 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", span="1152-1152", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="ConvertUtils.cs"];
m0_323 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayMultipleIndexes()", span="695-695", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayMultipleIndexes()", file="ConvertUtils.cs"];
m0_325 [label="IEnumerable<JToken> t = a.SelectTokens(''[1,2,0]'')", span="699-699", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayMultipleIndexes()", file="ConvertUtils.cs"];
m0_327 [label="Assert.AreEqual(3, t.Count())", span="701-701", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayMultipleIndexes()", file="ConvertUtils.cs"];
m0_328 [label="Assert.AreEqual(2, (int)t.ElementAt(0))", span="702-702", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayMultipleIndexes()", file="ConvertUtils.cs"];
m0_329 [label="Assert.AreEqual(3, (int)t.ElementAt(1))", span="703-703", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayMultipleIndexes()", file="ConvertUtils.cs"];
m0_330 [label="Assert.AreEqual(1, (int)t.ElementAt(2))", span="704-704", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayMultipleIndexes()", file="ConvertUtils.cs"];
m0_326 [label="Assert.IsNotNull(t)", span="700-700", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayMultipleIndexes()", file="ConvertUtils.cs"];
m0_324 [label="JArray a = new JArray(1, 2, 3, 4)", span="697-697", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayMultipleIndexes()", file="ConvertUtils.cs"];
m0_331 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayMultipleIndexes()", span="695-695", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayMultipleIndexes()", file="ConvertUtils.cs"];
m0_542 [label="Entry System.Uri.Uri(string)", span="0-0", cluster="System.Uri.Uri(string)", file="ConvertUtils.cs"];
m0_0 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.RecursiveWildcard()", span="54-54", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.RecursiveWildcard()", file="ConvertUtils.cs"];
m0_3 [label="var results = models.SelectTokens(''$.b..*.id'').ToList()", span="82-82", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.RecursiveWildcard()", file="ConvertUtils.cs"];
m0_4 [label="Assert.AreEqual(3, results.Count)", span="84-84", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.RecursiveWildcard()", file="ConvertUtils.cs"];
m0_5 [label="Assert.AreEqual(2, (int)results[0])", span="85-85", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.RecursiveWildcard()", file="ConvertUtils.cs"];
m0_6 [label="Assert.AreEqual(3, (int)results[1])", span="86-86", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.RecursiveWildcard()", file="ConvertUtils.cs"];
m0_7 [label="Assert.AreEqual(4, (int)results[2])", span="87-87", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.RecursiveWildcard()", file="ConvertUtils.cs"];
m0_2 [label="JObject models = JObject.Parse(json)", span="80-80", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.RecursiveWildcard()", file="ConvertUtils.cs"];
m0_1 [label="string json = @''{\r\n    ''''a'''': [\r\n        {\r\n            ''''id'''': 1\r\n        }\r\n    ],\r\n    ''''b'''': [\r\n        {\r\n            ''''id'''': 2\r\n        },\r\n        {\r\n            ''''id'''': 3,\r\n            ''''c'''': {\r\n                ''''id'''': 4\r\n            }\r\n        }\r\n    ],\r\n    ''''d'''': [\r\n        {\r\n            ''''id'''': 5\r\n        }\r\n    ]\r\n}''", span="56-78", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.RecursiveWildcard()", file="ConvertUtils.cs"];
m0_8 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.RecursiveWildcard()", span="54-54", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.RecursiveWildcard()", file="ConvertUtils.cs"];
m0_358 [label="Entry Unk.IsTrue", span="", cluster="Unk.IsTrue", file="ConvertUtils.cs"];
m0_77 [label="Entry Newtonsoft.Json.Linq.JToken.SelectToken(string, bool)", span="2323-2323", cluster="Newtonsoft.Json.Linq.JToken.SelectToken(string, bool)", file="ConvertUtils.cs"];
m0_11 [label="Entry System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", file="ConvertUtils.cs"];
m0_359 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScanNestResults()", span="739-739", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScanNestResults()", file="ConvertUtils.cs"];
m0_365 [label="Assert.IsNotNull(t)", span="747-747", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScanNestResults()", color=green, community=0, file="ConvertUtils.cs"];
m0_364 [label="IList<JToken> t = a.SelectTokens(''$..Name'').ToList()", span="746-746", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScanNestResults()", file="ConvertUtils.cs"];
m0_366 [label="Assert.AreEqual(4, t.Count)", span="748-748", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScanNestResults()", color=green, community=0, file="ConvertUtils.cs"];
m0_367 [label="Assert.AreEqual(1, (int)t[0])", span="749-749", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScanNestResults()", color=green, community=0, file="ConvertUtils.cs"];
m0_368 [label="Assert.AreEqual(2, (int)t[1])", span="750-750", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScanNestResults()", color=green, community=0, file="ConvertUtils.cs"];
m0_369 [label="Assert.IsTrue(JToken.DeepEquals(new JObject { { ''Name'', new JArray(3) } }, t[2]))", span="751-751", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScanNestResults()", color=green, community=0, file="ConvertUtils.cs"];
m0_370 [label="Assert.IsTrue(JToken.DeepEquals(new JArray(3), t[3]))", span="752-752", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScanNestResults()", color=green, community=0, file="ConvertUtils.cs"];
m0_363 [label="JArray a = new JArray(o1, o2, o3)", span="744-744", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScanNestResults()", file="ConvertUtils.cs"];
m0_360 [label="JObject o1 = new JObject { { ''Name'', 1 } }", span="741-741", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScanNestResults()", file="ConvertUtils.cs"];
m0_361 [label="JObject o2 = new JObject { { ''Name'', 2 } }", span="742-742", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScanNestResults()", file="ConvertUtils.cs"];
m0_362 [label="JObject o3 = new JObject { { ''Name'', new JObject { { ''Name'', new JArray(3) } } } }", span="743-743", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScanNestResults()", file="ConvertUtils.cs"];
m0_371 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScanNestResults()", span="739-739", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScanNestResults()", file="ConvertUtils.cs"];
m0_546 [label="Entry System.Text.Encoding.GetBytes(string)", span="0-0", cluster="System.Text.Encoding.GetBytes(string)", file="ConvertUtils.cs"];
m0_209 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingPropertyWithError()", span="553-553", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingPropertyWithError()", file="ConvertUtils.cs"];
m0_210 [label="JObject o = new JObject(\r\n                new JProperty(''Blah'', 1))", span="555-556", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingPropertyWithError()", file="ConvertUtils.cs"];
m0_211 [label="ExceptionAssert.Throws<JsonException>(() => { o.SelectToken(''Missing'', true); }, ''Property 'Missing' does not exist on JObject.'')", span="558-558", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingPropertyWithError()", file="ConvertUtils.cs"];
m0_212 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingPropertyWithError()", span="553-553", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingPropertyWithError()", file="ConvertUtils.cs"];
m0_157 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardIndexOnObjectWithError()", span="486-486", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardIndexOnObjectWithError()", file="ConvertUtils.cs"];
m0_158 [label="JObject o = new JObject(\r\n                new JProperty(''Blah'', 1))", span="488-489", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardIndexOnObjectWithError()", file="ConvertUtils.cs"];
m0_159 [label="ExceptionAssert.Throws<JsonException>(() => { o.SelectToken(''[*]'', true); }, @''Index * not valid on JObject.'')", span="491-491", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardIndexOnObjectWithError()", file="ConvertUtils.cs"];
m0_160 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardIndexOnObjectWithError()", span="486-486", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardIndexOnObjectWithError()", file="ConvertUtils.cs"];
m0_548 [label="Entry JArray.cstr", span="", cluster="JArray.cstr", file="ConvertUtils.cs"];
m0_405 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ExistsQuery()", span="803-803", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ExistsQuery()", file="ConvertUtils.cs"];
m0_407 [label="IList<JToken> t = a.SelectTokens(''[ ?( @.hi ) ]'').ToList()", span="807-807", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ExistsQuery()", file="ConvertUtils.cs"];
m0_409 [label="Assert.AreEqual(1, t.Count)", span="809-809", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ExistsQuery()", file="ConvertUtils.cs"];
m0_408 [label="Assert.IsNotNull(t)", span="808-808", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ExistsQuery()", file="ConvertUtils.cs"];
m0_410 [label="Assert.IsTrue(JToken.DeepEquals(new JObject(new JProperty(''hi'', ''ho'')), t[0]))", span="810-810", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ExistsQuery()", file="ConvertUtils.cs"];
m0_406 [label="JArray a = new JArray(new JObject(new JProperty(''hi'', ''ho'')), new JObject(new JProperty(''hi2'', ''ha'')))", span="805-805", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ExistsQuery()", file="ConvertUtils.cs"];
m0_411 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ExistsQuery()", span="803-803", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ExistsQuery()", file="ConvertUtils.cs"];
m0_20 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.FilterTrue()", span="130-130", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.FilterTrue()", file="ConvertUtils.cs"];
m0_23 [label="var results = models.SelectTokens(''$.elements[?(true)]'').ToList()", span="162-162", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.FilterTrue()", file="ConvertUtils.cs"];
m0_25 [label="Assert.AreEqual(results[0], models[''elements''][0])", span="165-165", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.FilterTrue()", file="ConvertUtils.cs"];
m0_26 [label="Assert.AreEqual(results[1], models[''elements''][1])", span="166-166", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.FilterTrue()", file="ConvertUtils.cs"];
m0_24 [label="Assert.AreEqual(2, results.Count)", span="164-164", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.FilterTrue()", file="ConvertUtils.cs"];
m0_22 [label="JObject models = JObject.Parse(json)", span="160-160", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.FilterTrue()", file="ConvertUtils.cs"];
m0_21 [label="string json = @''{\r\n  ''''elements'''': [\r\n    {\r\n      ''''id'''': ''''A'''',\r\n      ''''children'''': [\r\n        {\r\n          ''''id'''': ''''AA'''',\r\n          ''''children'''': [\r\n            {\r\n              ''''id'''': ''''AAA''''\r\n            },\r\n            {\r\n              ''''id'''': ''''AAB''''\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          ''''id'''': ''''AB''''\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      ''''id'''': ''''B'''',\r\n      ''''children'''': []\r\n    }\r\n  ]\r\n}''", span="132-158", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.FilterTrue()", file="ConvertUtils.cs"];
m0_27 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.FilterTrue()", span="130-130", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.FilterTrue()", file="ConvertUtils.cs"];
m0_71 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyWithRequired()", span="345-345", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyWithRequired()", file="ConvertUtils.cs"];
m0_75 [label="Assert.AreEqual(''1000'', bookId)", span="352-352", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyWithRequired()", file="ConvertUtils.cs"];
m0_74 [label="string bookId = (string)o.SelectToken(''bookId'', true)", span="350-350", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyWithRequired()", file="ConvertUtils.cs"];
m0_73 [label="JObject o = JObject.Parse(json)", span="348-348", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyWithRequired()", file="ConvertUtils.cs"];
m0_72 [label="string json = ''{\''bookId\'':\''1000\''}''", span="347-347", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyWithRequired()", file="ConvertUtils.cs"];
m0_76 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyWithRequired()", span="345-345", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyWithRequired()", file="ConvertUtils.cs"];
m0_12 [label="Entry Unk.AreEqual", span="", cluster="Unk.AreEqual", file="ConvertUtils.cs"];
m0_176 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMultipleResultsError()", span="513-513", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMultipleResultsError()", file="ConvertUtils.cs"];
m0_177 [label="JArray a = new JArray(1, 2, 3, 4, 5)", span="515-515", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMultipleResultsError()", file="ConvertUtils.cs"];
m0_178 [label="ExceptionAssert.Throws<JsonException>(() => { a.SelectToken(''[0, 1]''); }, @''Path returned multiple tokens.'')", span="517-517", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMultipleResultsError()", file="ConvertUtils.cs"];
m0_179 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMultipleResultsError()", span="513-513", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMultipleResultsError()", file="ConvertUtils.cs"];
m0_465 [label="Entry BigInteger.cstr", span="", cluster="BigInteger.cstr", file="ConvertUtils.cs"];
m0_456 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQueryBigInteger()", span="896-896", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQueryBigInteger()", file="ConvertUtils.cs"];
m0_458 [label="IList<JToken> t = a.SelectTokens(''[ ?( @.hi > 1 ) ]'').ToList()", span="903-903", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQueryBigInteger()", file="ConvertUtils.cs"];
m0_460 [label="Assert.AreEqual(2, t.Count)", span="905-905", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQueryBigInteger()", file="ConvertUtils.cs"];
m0_459 [label="Assert.IsNotNull(t)", span="904-904", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQueryBigInteger()", file="ConvertUtils.cs"];
m0_461 [label="Assert.IsTrue(JToken.DeepEquals(new JObject(new JProperty(''hi'', 2)), t[0]))", span="906-906", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQueryBigInteger()", file="ConvertUtils.cs"];
m0_462 [label="Assert.IsTrue(JToken.DeepEquals(new JObject(new JProperty(''hi'', 3)), t[1]))", span="907-907", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQueryBigInteger()", file="ConvertUtils.cs"];
m0_457 [label="JArray a = new JArray(\r\n                new JObject(new JProperty(''hi'', new BigInteger(1))),\r\n                new JObject(new JProperty(''hi'', new BigInteger(2))),\r\n                new JObject(new JProperty(''hi'', new BigInteger(3))))", span="898-901", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQueryBigInteger()", file="ConvertUtils.cs"];
m0_463 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQueryBigInteger()", span="896-896", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQueryBigInteger()", file="ConvertUtils.cs"];
m0_540 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="ConvertUtils.cs"];
m0_93 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyStringWithMatchingEmptyProperty()", span="379-379", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyStringWithMatchingEmptyProperty()", file="ConvertUtils.cs"];
m0_96 [label="Assert.AreEqual(1, (int)t)", span="385-385", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyStringWithMatchingEmptyProperty()", file="ConvertUtils.cs"];
m0_95 [label="JToken t = o.SelectToken(''[' ']'')", span="384-384", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyStringWithMatchingEmptyProperty()", file="ConvertUtils.cs"];
m0_94 [label="JObject o = new JObject(\r\n                new JProperty('' '', 1))", span="381-382", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyStringWithMatchingEmptyProperty()", file="ConvertUtils.cs"];
m0_97 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyStringWithMatchingEmptyProperty()", span="379-379", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyStringWithMatchingEmptyProperty()", file="ConvertUtils.cs"];
m0_13 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanFilter()", span="91-91", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanFilter()", file="ConvertUtils.cs"];
m0_16 [label="var results = models.SelectTokens(''$.elements..[?(@.id=='AAA')]'').ToList()", span="123-123", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanFilter()", file="ConvertUtils.cs"];
m0_18 [label="Assert.AreEqual(models[''elements''][0][''children''][0][''children''][0], results[0])", span="126-126", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanFilter()", file="ConvertUtils.cs"];
m0_17 [label="Assert.AreEqual(1, results.Count)", span="125-125", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanFilter()", file="ConvertUtils.cs"];
m0_15 [label="JObject models = JObject.Parse(json)", span="121-121", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanFilter()", file="ConvertUtils.cs"];
m0_14 [label="string json = @''{\r\n  ''''elements'''': [\r\n    {\r\n      ''''id'''': ''''A'''',\r\n      ''''children'''': [\r\n        {\r\n          ''''id'''': ''''AA'''',\r\n          ''''children'''': [\r\n            {\r\n              ''''id'''': ''''AAA''''\r\n            },\r\n            {\r\n              ''''id'''': ''''AAB''''\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          ''''id'''': ''''AB''''\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      ''''id'''': ''''B'''',\r\n      ''''children'''': []\r\n    }\r\n  ]\r\n}''", span="93-119", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanFilter()", file="ConvertUtils.cs"];
m0_19 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanFilter()", span="91-91", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanFilter()", file="ConvertUtils.cs"];
m0_98 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWhitespaceString()", span="389-389", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWhitespaceString()", file="ConvertUtils.cs"];
m0_101 [label="Assert.AreEqual(o, t)", span="395-395", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWhitespaceString()", file="ConvertUtils.cs"];
m0_99 [label="JObject o = new JObject(\r\n                new JProperty(''Blah'', 1))", span="391-392", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWhitespaceString()", file="ConvertUtils.cs"];
m0_100 [label="JToken t = o.SelectToken('' '')", span="394-394", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWhitespaceString()", file="ConvertUtils.cs"];
m0_102 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWhitespaceString()", span="389-389", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWhitespaceString()", file="ConvertUtils.cs"];
m0_466 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterOrEqualQuery()", span="912-912", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterOrEqualQuery()", file="ConvertUtils.cs"];
m0_468 [label="IList<JToken> t = a.SelectTokens(''[ ?( @.hi >= 1 ) ]'').ToList()", span="920-920", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterOrEqualQuery()", file="ConvertUtils.cs"];
m0_470 [label="Assert.AreEqual(4, t.Count)", span="922-922", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterOrEqualQuery()", file="ConvertUtils.cs"];
m0_469 [label="Assert.IsNotNull(t)", span="921-921", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterOrEqualQuery()", file="ConvertUtils.cs"];
m0_471 [label="Assert.IsTrue(JToken.DeepEquals(new JObject(new JProperty(''hi'', 1)), t[0]))", span="923-923", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterOrEqualQuery()", file="ConvertUtils.cs"];
m0_472 [label="Assert.IsTrue(JToken.DeepEquals(new JObject(new JProperty(''hi'', 2)), t[1]))", span="924-924", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterOrEqualQuery()", file="ConvertUtils.cs"];
m0_473 [label="Assert.IsTrue(JToken.DeepEquals(new JObject(new JProperty(''hi'', 2.0)), t[2]))", span="925-925", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterOrEqualQuery()", file="ConvertUtils.cs"];
m0_474 [label="Assert.IsTrue(JToken.DeepEquals(new JObject(new JProperty(''hi'', 3)), t[3]))", span="926-926", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterOrEqualQuery()", file="ConvertUtils.cs"];
m0_467 [label="JArray a = new JArray(\r\n                new JObject(new JProperty(''hi'', 1)),\r\n                new JObject(new JProperty(''hi'', 2)),\r\n                new JObject(new JProperty(''hi'', 2.0)),\r\n                new JObject(new JProperty(''hi'', 3)))", span="914-918", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterOrEqualQuery()", file="ConvertUtils.cs"];
m0_475 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterOrEqualQuery()", span="912-912", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterOrEqualQuery()", file="ConvertUtils.cs"];
m0_573 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Sum<TSource>(System.Func<TSource, decimal>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Sum<TSource>(System.Func<TSource, decimal>)", file="ConvertUtils.cs"];
m0_10 [label="Entry Newtonsoft.Json.Linq.JToken.SelectTokens(string)", span="2348-2348", cluster="Newtonsoft.Json.Linq.JToken.SelectTokens(string)", file="ConvertUtils.cs"];
m0_344 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScan()", span="722-722", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScan()", file="ConvertUtils.cs"];
m0_348 [label="IList<JToken> t = a.SelectTokens(''$..*'').ToList()", span="728-728", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScan()", file="ConvertUtils.cs"];
m0_350 [label="Assert.AreEqual(5, t.Count)", span="730-730", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScan()", file="ConvertUtils.cs"];
m0_353 [label="Assert.AreEqual(1, (int)t[2])", span="733-733", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScan()", file="ConvertUtils.cs"];
m0_355 [label="Assert.AreEqual(2, (int)t[4])", span="735-735", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScan()", file="ConvertUtils.cs"];
m0_349 [label="Assert.IsNotNull(t)", span="729-729", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScan()", file="ConvertUtils.cs"];
m0_345 [label="JObject o1 = new JObject { { ''Name'', 1 } }", span="724-724", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScan()", file="ConvertUtils.cs"];
m0_346 [label="JObject o2 = new JObject { { ''Name'', 2 } }", span="725-725", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScan()", file="ConvertUtils.cs"];
m0_352 [label="Assert.IsTrue(JToken.DeepEquals(o1, t[1]))", span="732-732", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScan()", file="ConvertUtils.cs"];
m0_354 [label="Assert.IsTrue(JToken.DeepEquals(o2, t[3]))", span="734-734", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScan()", file="ConvertUtils.cs"];
m0_351 [label="Assert.IsTrue(JToken.DeepEquals(a, t[0]))", span="731-731", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScan()", file="ConvertUtils.cs"];
m0_347 [label="JArray a = new JArray(o1, o2)", span="726-726", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScan()", file="ConvertUtils.cs"];
m0_356 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScan()", span="722-722", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScan()", file="ConvertUtils.cs"];
m0_144 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateIndexerOnObject()", span="467-467", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateIndexerOnObject()", file="ConvertUtils.cs"];
m0_145 [label="JObject o = new JObject(\r\n                new JProperty(''Blah'', 1))", span="469-470", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateIndexerOnObject()", file="ConvertUtils.cs"];
m0_146 [label="JToken t = o.SelectToken(''[1]'')", span="472-472", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateIndexerOnObject()", file="ConvertUtils.cs"];
m0_147 [label="Assert.IsNull(t)", span="473-473", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateIndexerOnObject()", file="ConvertUtils.cs"];
m0_148 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateIndexerOnObject()", span="467-467", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateIndexerOnObject()", file="ConvertUtils.cs"];
m0_613 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.RootInFilterWithInitializers()", span="1370-1370", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.RootInFilterWithInitializers()", file="ConvertUtils.cs"];
m0_615 [label="List<JToken> result = rootObject.SelectTokens(''$.dateObjectsArray[?(@.date == $.referenceDate)]'').ToList()", span="1387-1387", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.RootInFilterWithInitializers()", file="ConvertUtils.cs"];
m0_616 [label="Assert.AreEqual(2, result.Count)", span="1388-1388", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.RootInFilterWithInitializers()", file="ConvertUtils.cs"];
m0_614 [label="JObject rootObject = new JObject\r\n            {\r\n                { ''referenceDate'', new JValue(DateTime.MinValue) },\r\n                {\r\n                    ''dateObjectsArray'',\r\n                    new JArray()\r\n                    {\r\n                        new JObject { { ''date'', new JValue(DateTime.MinValue) } },\r\n                        new JObject { { ''date'', new JValue(DateTime.MaxValue) } },\r\n                        new JObject { { ''date'', new JValue(DateTime.Now) } },\r\n                        new JObject { { ''date'', new JValue(DateTime.MinValue) } },\r\n                    }\r\n                }\r\n            }", span="1372-1385", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.RootInFilterWithInitializers()", file="ConvertUtils.cs"];
m0_617 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.RootInFilterWithInitializers()", span="1370-1370", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.RootInFilterWithInitializers()", file="ConvertUtils.cs"];
m0_190 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateNoResultsWithMultipleArrayIndexes()", span="529-529", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateNoResultsWithMultipleArrayIndexes()", file="ConvertUtils.cs"];
m0_191 [label="JArray a = new JArray(1, 2, 3, 4, 5)", span="531-531", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateNoResultsWithMultipleArrayIndexes()", file="ConvertUtils.cs"];
m0_192 [label="ExceptionAssert.Throws<JsonException>(() => { a.SelectToken(''[9,10]'', true); }, @''Index 9 outside the bounds of JArray.'')", span="533-533", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateNoResultsWithMultipleArrayIndexes()", file="ConvertUtils.cs"];
m0_193 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateNoResultsWithMultipleArrayIndexes()", span="529-529", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateNoResultsWithMultipleArrayIndexes()", file="ConvertUtils.cs"];
m0_122 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardProperty()", span="431-431", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardProperty()", file="ConvertUtils.cs"];
m0_124 [label="IList<JToken> t = o.SelectTokens(''$.*'').ToList()", span="437-437", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardProperty()", file="ConvertUtils.cs"];
m0_126 [label="Assert.AreEqual(2, t.Count)", span="439-439", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardProperty()", file="ConvertUtils.cs"];
m0_127 [label="Assert.AreEqual(1, (int)t[0])", span="440-440", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardProperty()", file="ConvertUtils.cs"];
m0_128 [label="Assert.AreEqual(2, (int)t[1])", span="441-441", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardProperty()", file="ConvertUtils.cs"];
m0_125 [label="Assert.IsNotNull(t)", span="438-438", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardProperty()", file="ConvertUtils.cs"];
m0_123 [label="JObject o = new JObject(\r\n                new JProperty(''Blah'', 1),\r\n                new JProperty(''Blah2'', 2))", span="433-435", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardProperty()", file="ConvertUtils.cs"];
m0_129 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardProperty()", span="431-431", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardProperty()", file="ConvertUtils.cs"];
m0_9 [label="Entry Newtonsoft.Json.Linq.JObject.Parse(string)", span="404-404", cluster="Newtonsoft.Json.Linq.JObject.Parse(string)", file="ConvertUtils.cs"];
m0_496 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Exists_True()", span="1006-1006", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Exists_True()", file="ConvertUtils.cs"];
m0_498 [label="var results = a.SelectTokens(''[?(true)]'').ToList()", span="1023-1023", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Exists_True()", file="ConvertUtils.cs"];
m0_500 [label="Assert.AreEqual(a[0], results[0])", span="1025-1025", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Exists_True()", file="ConvertUtils.cs"];
m0_501 [label="Assert.AreEqual(a[1], results[1])", span="1026-1026", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Exists_True()", file="ConvertUtils.cs"];
m0_502 [label="Assert.AreEqual(a[2], results[2])", span="1027-1027", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Exists_True()", file="ConvertUtils.cs"];
m0_499 [label="Assert.AreEqual(3, results.Count)", span="1024-1024", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Exists_True()", file="ConvertUtils.cs"];
m0_497 [label="JArray a = JArray.Parse(@''[\r\n  {\r\n    ''''price'''': 199,\r\n    ''''max_price'''': 200\r\n  },\r\n  {\r\n    ''''price'''': 200,\r\n    ''''max_price'''': 200\r\n  },\r\n  {\r\n    ''''price'''': 201,\r\n    ''''max_price'''': 200\r\n  }\r\n]'')", span="1008-1021", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Exists_True()", file="ConvertUtils.cs"];
m0_503 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Exists_True()", span="1006-1006", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Exists_True()", file="ConvertUtils.cs"];
m0_83 [label="Entry Newtonsoft.Json.Linq.JObject.JObject(object)", span="113-113", cluster="Newtonsoft.Json.Linq.JObject.JObject(object)", file="ConvertUtils.cs"];
m0_622 [label=a, span="", file="ConvertUtils.cs"];
m0_623 [label=a, span="", file="ConvertUtils.cs"];
m0_624 [label=a, span="", file="ConvertUtils.cs"];
m0_628 [label=a, span="", file="ConvertUtils.cs"];
m0_629 [label=a, span="", file="ConvertUtils.cs"];
m0_630 [label=a, span="", file="ConvertUtils.cs"];
m0_619 [label=o, span="", file="ConvertUtils.cs"];
m0_620 [label=o, span="", file="ConvertUtils.cs"];
m0_621 [label=o, span="", file="ConvertUtils.cs"];
m0_625 [label=c, span="", file="ConvertUtils.cs"];
m0_626 [label=o, span="", file="ConvertUtils.cs"];
m0_627 [label=o, span="", file="ConvertUtils.cs"];
m2_21 [label="JObject o2 = new JObject\r\n            {\r\n                { ''Title'', ''Title!'' },\r\n                { ''FirstName'', ''FirstName!'' }\r\n            }", span="144-148", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.OrExpressionTest()", file="DeserializeConstructorHandling.cs"];
m2_44 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.BooleanExpressionTest_GreaterThanOperator()", span="197-197", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.BooleanExpressionTest_GreaterThanOperator()", file="DeserializeConstructorHandling.cs"];
m2_45 [label="BooleanQueryExpression e1 = new BooleanQueryExpression\r\n            {\r\n                Operator = QueryOperator.GreaterThan,\r\n                Right = new JValue(3),\r\n                Left = new List<PathFilter>\r\n                {\r\n                    new ArrayIndexFilter()\r\n                }\r\n            }", span="199-207", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.BooleanExpressionTest_GreaterThanOperator()", file="DeserializeConstructorHandling.cs"];
m2_46 [label="Assert.IsTrue(e1.IsMatch(null, new JArray(''2'', ''26'')))", span="209-209", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.BooleanExpressionTest_GreaterThanOperator()", file="DeserializeConstructorHandling.cs"];
m2_47 [label="Assert.IsTrue(e1.IsMatch(null, new JArray(2, 26)))", span="210-210", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.BooleanExpressionTest_GreaterThanOperator()", file="DeserializeConstructorHandling.cs"];
m2_48 [label="Assert.IsFalse(e1.IsMatch(null, new JArray(2, 3)))", span="211-211", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.BooleanExpressionTest_GreaterThanOperator()", file="DeserializeConstructorHandling.cs"];
m2_49 [label="Assert.IsFalse(e1.IsMatch(null, new JArray(''2'', ''3'')))", span="212-212", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.BooleanExpressionTest_GreaterThanOperator()", file="DeserializeConstructorHandling.cs"];
m2_50 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.BooleanExpressionTest_GreaterThanOperator()", span="197-197", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.BooleanExpressionTest_GreaterThanOperator()", file="DeserializeConstructorHandling.cs"];
m2_0 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.AndExpressionTest()", span="45-45", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.AndExpressionTest()", file="DeserializeConstructorHandling.cs"];
m2_1 [label="CompositeExpression compositeExpression = new CompositeExpression\r\n            {\r\n                Operator = QueryOperator.And,\r\n                Expressions = new List<QueryExpression>\r\n                {\r\n                    new BooleanQueryExpression\r\n                    {\r\n                        Operator = QueryOperator.Exists,\r\n                        Left = new List<PathFilter>\r\n                        {\r\n                            new FieldFilter\r\n                            {\r\n                                Name = ''FirstName''\r\n                            }\r\n                        }\r\n                    },\r\n                    new BooleanQueryExpression\r\n                    {\r\n                        Operator = QueryOperator.Exists,\r\n                        Left = new List<PathFilter>\r\n                        {\r\n                            new FieldFilter\r\n                            {\r\n                                Name = ''LastName''\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }", span="47-75", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.AndExpressionTest()", file="DeserializeConstructorHandling.cs", color=green, community=0];
m2_41 [label="Entry Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter.ArrayIndexFilter()", span="6-6", cluster="Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter.ArrayIndexFilter()", file="DeserializeConstructorHandling.cs"];
m2_8 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.AndExpressionTest()", span="45-45", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.AndExpressionTest()", file="DeserializeConstructorHandling.cs"];
m2_9 [label="Entry Newtonsoft.Json.Linq.JsonPath.CompositeExpression.CompositeExpression()", span="38-38", cluster="Newtonsoft.Json.Linq.JsonPath.CompositeExpression.CompositeExpression()", file="DeserializeConstructorHandling.cs"];
m2_10 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="DeserializeConstructorHandling.cs"];
m2_13 [label="Entry Newtonsoft.Json.Linq.JObject.JObject()", span="87-87", cluster="Newtonsoft.Json.Linq.JObject.JObject()", file="DeserializeConstructorHandling.cs"];
m2_11 [label="Entry Newtonsoft.Json.Linq.JsonPath.BooleanQueryExpression.BooleanQueryExpression()", span="71-71", cluster="Newtonsoft.Json.Linq.JsonPath.BooleanQueryExpression.BooleanQueryExpression()", file="DeserializeConstructorHandling.cs"];
m2_12 [label="Entry Newtonsoft.Json.Linq.JsonPath.FieldFilter.FieldFilter()", span="6-6", cluster="Newtonsoft.Json.Linq.JsonPath.FieldFilter.FieldFilter()", color=red, community=0, file="DeserializeConstructorHandling.cs"];
m2_14 [label="Entry Newtonsoft.Json.Linq.JsonPath.CompositeExpression.IsMatch(Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken)", span="43-43", cluster="Newtonsoft.Json.Linq.JsonPath.CompositeExpression.IsMatch(Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken)", file="DeserializeConstructorHandling.cs"];
m2_15 [label="Entry Unk.IsTrue", span="", cluster="Unk.IsTrue", file="DeserializeConstructorHandling.cs"];
m2_16 [label="Entry Unk.IsFalse", span="", cluster="Unk.IsFalse", file="DeserializeConstructorHandling.cs"];
m2_2 [label="JObject o1 = new JObject\r\n            {\r\n                { ''Title'', ''Title!'' },\r\n                { ''FirstName'', ''FirstName!'' },\r\n                { ''LastName'', ''LastName!'' }\r\n            }", span="77-82", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.AndExpressionTest()", file="DeserializeConstructorHandling.cs"];
m2_3 [label="Assert.IsTrue(compositeExpression.IsMatch(o1, o1))", span="84-84", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.AndExpressionTest()", file="DeserializeConstructorHandling.cs"];
m2_5 [label="Assert.IsFalse(compositeExpression.IsMatch(o2, o2))", span="92-92", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.AndExpressionTest()", file="DeserializeConstructorHandling.cs"];
m2_4 [label="JObject o2 = new JObject\r\n            {\r\n                { ''Title'', ''Title!'' },\r\n                { ''FirstName'', ''FirstName!'' }\r\n            }", span="86-90", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.AndExpressionTest()", file="DeserializeConstructorHandling.cs"];
m2_6 [label="JObject o3 = new JObject\r\n            {\r\n                { ''Title'', ''Title!'' }\r\n            }", span="94-97", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.AndExpressionTest()", file="DeserializeConstructorHandling.cs"];
m2_42 [label="Entry Newtonsoft.Json.Linq.JArray.JArray(params object[])", span="82-82", cluster="Newtonsoft.Json.Linq.JArray.JArray(params object[])", file="DeserializeConstructorHandling.cs"];
m2_43 [label="Entry Newtonsoft.Json.Linq.JsonPath.BooleanQueryExpression.IsMatch(Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken)", span="93-93", cluster="Newtonsoft.Json.Linq.JsonPath.BooleanQueryExpression.IsMatch(Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken)", file="DeserializeConstructorHandling.cs"];
m2_7 [label="Assert.IsFalse(compositeExpression.IsMatch(o3, o3))", span="99-99", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.AndExpressionTest()", file="DeserializeConstructorHandling.cs"];
m2_17 [label="Entry Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string)", span="739-739", cluster="Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string)", file="DeserializeConstructorHandling.cs"];
m2_18 [label="Entry System.Console.WriteLine(object)", span="0-0", cluster="System.Console.WriteLine(object)", file="DeserializeConstructorHandling.cs"];
m2_19 [label="Entry Newtonsoft.Json.JsonSerializerSettings.JsonSerializerSettings()", span="382-382", cluster="Newtonsoft.Json.JsonSerializerSettings.JsonSerializerSettings()", file="DeserializeConstructorHandling.cs"];
m2_23 [label="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.DeserializeConstructorHandling.Website", span="", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.OrExpressionTest()", file="DeserializeConstructorHandling.cs"];
m2_20 [label="Entry Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string, Newtonsoft.Json.JsonSerializerSettings)", span="802-802", cluster="Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string, Newtonsoft.Json.JsonSerializerSettings)", file="DeserializeConstructorHandling.cs"];
m2_22 [label="Entry Unk.AreEqual", span="", cluster="Unk.AreEqual", file="DeserializeConstructorHandling.cs"];
m2_24 [label="Assert.IsFalse(compositeExpression.IsMatch(o3, o3))", span="157-157", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.OrExpressionTest()", file="DeserializeConstructorHandling.cs"];
m2_25 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.OrExpressionTest()", span="103-103", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.OrExpressionTest()", file="DeserializeConstructorHandling.cs"];
m2_40 [label="Entry Newtonsoft.Json.Linq.JValue.JValue(long)", span="70-70", cluster="Newtonsoft.Json.Linq.JValue.JValue(long)", file="DeserializeConstructorHandling.cs"];
m2_51 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.BooleanExpressionTest_GreaterThanOrEqualsOperator()", span="216-216", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.BooleanExpressionTest_GreaterThanOrEqualsOperator()", file="DeserializeConstructorHandling.cs"];
m2_52 [label="BooleanQueryExpression e1 = new BooleanQueryExpression\r\n            {\r\n                Operator = QueryOperator.GreaterThanOrEquals,\r\n                Right = new JValue(3),\r\n                Left = new List<PathFilter>\r\n                {\r\n                    new ArrayIndexFilter()\r\n                }\r\n            }", span="218-226", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.BooleanExpressionTest_GreaterThanOrEqualsOperator()", file="DeserializeConstructorHandling.cs"];
m2_53 [label="Assert.IsTrue(e1.IsMatch(null, new JArray(''2'', ''26'')))", span="228-228", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.BooleanExpressionTest_GreaterThanOrEqualsOperator()", file="DeserializeConstructorHandling.cs"];
m2_54 [label="Assert.IsTrue(e1.IsMatch(null, new JArray(2, 26)))", span="229-229", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.BooleanExpressionTest_GreaterThanOrEqualsOperator()", file="DeserializeConstructorHandling.cs"];
m2_55 [label="Assert.IsTrue(e1.IsMatch(null, new JArray(2, 3)))", span="230-230", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.BooleanExpressionTest_GreaterThanOrEqualsOperator()", file="DeserializeConstructorHandling.cs"];
m2_56 [label="Assert.IsTrue(e1.IsMatch(null, new JArray(''2'', ''3'')))", span="231-231", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.BooleanExpressionTest_GreaterThanOrEqualsOperator()", file="DeserializeConstructorHandling.cs"];
m2_57 [label="Assert.IsFalse(e1.IsMatch(null, new JArray(2, 1)))", span="232-232", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.BooleanExpressionTest_GreaterThanOrEqualsOperator()", file="DeserializeConstructorHandling.cs"];
m2_58 [label="Assert.IsFalse(e1.IsMatch(null, new JArray(''2'', ''1'')))", span="233-233", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.BooleanExpressionTest_GreaterThanOrEqualsOperator()", file="DeserializeConstructorHandling.cs"];
m2_59 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.BooleanExpressionTest_GreaterThanOrEqualsOperator()", span="216-216", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.BooleanExpressionTest_GreaterThanOrEqualsOperator()", file="DeserializeConstructorHandling.cs"];
m2_26 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.BooleanExpressionTest()", span="161-161", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.BooleanExpressionTest()", file="DeserializeConstructorHandling.cs"];
m2_27 [label="BooleanQueryExpression e1 = new BooleanQueryExpression\r\n            {\r\n                Operator = QueryOperator.LessThan,\r\n                Right = new JValue(3),\r\n                Left = new List<PathFilter>\r\n                {\r\n                    new ArrayIndexFilter()\r\n                }\r\n            }", span="163-171", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.BooleanExpressionTest()", file="DeserializeConstructorHandling.cs"];
m2_33 [label="BooleanQueryExpression e2 = new BooleanQueryExpression\r\n            {\r\n                Operator = QueryOperator.LessThanOrEquals,\r\n                Right = new JValue(3),\r\n                Left = new List<PathFilter>\r\n                {\r\n                    new ArrayIndexFilter()\r\n                }\r\n            }", span="179-187", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.BooleanExpressionTest()", file="DeserializeConstructorHandling.cs"];
m2_28 [label="Assert.IsTrue(e1.IsMatch(null, new JArray(1, 2, 3, 4, 5)))", span="173-173", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.BooleanExpressionTest()", file="DeserializeConstructorHandling.cs"];
m2_29 [label="Assert.IsTrue(e1.IsMatch(null, new JArray(2, 3, 4, 5)))", span="174-174", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.BooleanExpressionTest()", file="DeserializeConstructorHandling.cs"];
m2_30 [label="Assert.IsFalse(e1.IsMatch(null, new JArray(3, 4, 5)))", span="175-175", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.BooleanExpressionTest()", file="DeserializeConstructorHandling.cs"];
m2_31 [label="Assert.IsFalse(e1.IsMatch(null, new JArray(4, 5)))", span="176-176", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.BooleanExpressionTest()", file="DeserializeConstructorHandling.cs"];
m2_32 [label="Assert.IsFalse(e1.IsMatch(null, new JArray(''11'', 5)))", span="177-177", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.BooleanExpressionTest()", file="DeserializeConstructorHandling.cs"];
m2_38 [label="Assert.IsFalse(e1.IsMatch(null, new JArray(''11'', 5)))", span="193-193", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.BooleanExpressionTest()", file="DeserializeConstructorHandling.cs"];
m2_34 [label="Assert.IsTrue(e2.IsMatch(null, new JArray(1, 2, 3, 4, 5)))", span="189-189", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.BooleanExpressionTest()", file="DeserializeConstructorHandling.cs"];
m2_35 [label="Assert.IsTrue(e2.IsMatch(null, new JArray(2, 3, 4, 5)))", span="190-190", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.BooleanExpressionTest()", file="DeserializeConstructorHandling.cs"];
m2_36 [label="Assert.IsTrue(e2.IsMatch(null, new JArray(3, 4, 5)))", span="191-191", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.BooleanExpressionTest()", file="DeserializeConstructorHandling.cs"];
m2_37 [label="Assert.IsFalse(e2.IsMatch(null, new JArray(4, 5)))", span="192-192", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.BooleanExpressionTest()", file="DeserializeConstructorHandling.cs"];
m2_39 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.BooleanExpressionTest()", span="161-161", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.BooleanExpressionTest()", file="DeserializeConstructorHandling.cs"];
m4_223 [label="Entry System.IO.StringWriter.ToString()", span="0-0", cluster="System.IO.StringWriter.ToString()", file="JsonSerializerTest.cs"];
m4_943 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ParseObjectWithNoEnd()", span="1620-1620", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseObjectWithNoEnd()", file="JsonSerializerTest.cs"];
m4_946 [label="Assert.IsTrue(reader.Read())", span="1625-1625", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseObjectWithNoEnd()", file="JsonSerializerTest.cs"];
m4_947 [label="Assert.IsTrue(reader.Read())", span="1626-1626", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseObjectWithNoEnd()", file="JsonSerializerTest.cs"];
m4_948 [label="Assert.IsTrue(reader.Read())", span="1627-1627", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseObjectWithNoEnd()", file="JsonSerializerTest.cs"];
m4_945 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="1623-1623", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseObjectWithNoEnd()", file="JsonSerializerTest.cs"];
m4_949 [label="Assert.IsFalse(reader.Read())", span="1628-1628", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseObjectWithNoEnd()", file="JsonSerializerTest.cs"];
m4_944 [label="string json = ''{hi:1, ''", span="1622-1622", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseObjectWithNoEnd()", file="JsonSerializerTest.cs"];
m4_950 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ParseObjectWithNoEnd()", span="1620-1620", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseObjectWithNoEnd()", file="JsonSerializerTest.cs"];
m4_21 [label="jsonReader.Read()", span="83-83", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.YahooFinance()", file="JsonSerializerTest.cs"];
m4_55 [label="reader.Read()", span="145-145", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Text()", file="JsonSerializerTest.cs", color=green, community=0];
m4_57 [label="reader.Read()", span="148-148", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Text()", file="JsonSerializerTest.cs", color=green, community=0];
m4_60 [label="Assert.AreEqual(3, reader.LineNumber)", span="152-152", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Text()", file="JsonSerializerTest.cs", color=green, community=0];
m4_56 [label="Assert.AreEqual(1, reader.LineNumber)", span="146-146", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Text()", file="JsonSerializerTest.cs", color=green, community=0];
m4_58 [label="Assert.AreEqual(2, reader.LineNumber)", span="149-149", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Text()", file="JsonSerializerTest.cs", color=green, community=0];
m4_59 [label="reader.Read()", span="151-151", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Text()", file="JsonSerializerTest.cs", color=green, community=0];
m4_61 [label="reader.Read()", span="154-154", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Text()", file="JsonSerializerTest.cs", color=green, community=0];
m4_62 [label="Assert.AreEqual(4, reader.LineNumber)", span="155-155", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Text()", file="JsonSerializerTest.cs", color=green, community=0];
m4_117 [label="Assert.AreEqual(jsonReader.Value, ''500 gigabyte hard drive'')", span="250-250", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="JsonSerializerTest.cs"];
m4_118 [label="Assert.AreEqual(jsonReader.QuoteChar, '''')", span="251-251", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="JsonSerializerTest.cs"];
m4_119 [label="Assert.AreEqual(5, jsonReader.LineNumber)", span="252-252", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="JsonSerializerTest.cs"];
m4_120 [label="Assert.AreEqual(30, jsonReader.LinePosition)", span="253-253", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="JsonSerializerTest.cs"];
m4_121 [label="jsonReader.Read()", span="255-255", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="JsonSerializerTest.cs"];
m4_122 [label="Assert.AreEqual(jsonReader.TokenType, JsonToken.EndArray)", span="256-256", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="JsonSerializerTest.cs"];
m4_12 [label="return false;", span="78-78", cluster="Newtonsoft.Json.Linq.JTokenReader.Read()", file="JsonSerializerTest.cs"];
m4_767 [label="Entry System.TimeSpan.Add(System.TimeSpan)", span="0-0", cluster="System.TimeSpan.Add(System.TimeSpan)", file="JsonSerializerTest.cs"];
m4_599 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadSingleBytes()", span="1038-1038", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadSingleBytes()", file="JsonSerializerTest.cs"];
m4_605 [label="Assert.AreEqual(''Hello world.'', text)", span="1047-1047", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadSingleBytes()", file="JsonSerializerTest.cs"];
m4_601 [label="JsonTextReader reader = new JsonTextReader(s)", span="1041-1041", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadSingleBytes()", file="JsonSerializerTest.cs"];
m4_600 [label="StringReader s = new StringReader(@''''''SGVsbG8gd29ybGQu'''''')", span="1040-1040", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadSingleBytes()", file="JsonSerializerTest.cs"];
m4_604 [label="string text = Encoding.UTF8.GetString(data, 0, data.Length)", span="1046-1046", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadSingleBytes()", file="JsonSerializerTest.cs"];
m4_602 [label="byte[] data = reader.ReadAsBytes()", span="1043-1043", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadSingleBytes()", file="JsonSerializerTest.cs"];
m4_603 [label="Assert.IsNotNull(data)", span="1044-1044", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadSingleBytes()", file="JsonSerializerTest.cs"];
m4_606 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadSingleBytes()", span="1038-1038", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadSingleBytes()", file="JsonSerializerTest.cs"];
m4_78 [label="SetToken(JsonToken.StartConstructor, ((JConstructor)token).Name)", span="189-189", cluster="Newtonsoft.Json.Linq.JTokenReader.SetToken(Newtonsoft.Json.Linq.JToken)", file="JsonSerializerTest.cs"];
m4_79 [label="JTokenType.Property", span="191-191", cluster="Newtonsoft.Json.Linq.JTokenReader.SetToken(Newtonsoft.Json.Linq.JToken)", color=green, community=0, file="JsonSerializerTest.cs"];
m4_80 [label="SetToken(JsonToken.PropertyName, ((JProperty)token).Name)", span="192-192", cluster="Newtonsoft.Json.Linq.JTokenReader.SetToken(Newtonsoft.Json.Linq.JToken)", color=green, community=0, file="JsonSerializerTest.cs"];
m4_81 [label="JTokenType.Comment", span="194-194", cluster="Newtonsoft.Json.Linq.JTokenReader.SetToken(Newtonsoft.Json.Linq.JToken)", file="JsonSerializerTest.cs"];
m4_83 [label="JTokenType.Integer", span="197-197", cluster="Newtonsoft.Json.Linq.JTokenReader.SetToken(Newtonsoft.Json.Linq.JToken)", file="JsonSerializerTest.cs"];
m4_84 [label="SetToken(JsonToken.Integer, ((JValue)token).Value)", span="198-198", cluster="Newtonsoft.Json.Linq.JTokenReader.SetToken(Newtonsoft.Json.Linq.JToken)", file="JsonSerializerTest.cs"];
m4_85 [label="JTokenType.Float", span="200-200", cluster="Newtonsoft.Json.Linq.JTokenReader.SetToken(Newtonsoft.Json.Linq.JToken)", file="JsonSerializerTest.cs"];
m4_87 [label="JTokenType.String", span="203-203", cluster="Newtonsoft.Json.Linq.JTokenReader.SetToken(Newtonsoft.Json.Linq.JToken)", file="JsonSerializerTest.cs"];
m4_88 [label="SetToken(JsonToken.String, ((JValue)token).Value)", span="204-204", cluster="Newtonsoft.Json.Linq.JTokenReader.SetToken(Newtonsoft.Json.Linq.JToken)", file="JsonSerializerTest.cs"];
m4_89 [label="JTokenType.Boolean", span="206-206", cluster="Newtonsoft.Json.Linq.JTokenReader.SetToken(Newtonsoft.Json.Linq.JToken)", file="JsonSerializerTest.cs"];
m4_91 [label="JTokenType.Null", span="209-209", cluster="Newtonsoft.Json.Linq.JTokenReader.SetToken(Newtonsoft.Json.Linq.JToken)", file="JsonSerializerTest.cs"];
m4_92 [label="SetToken(JsonToken.Null, ((JValue)token).Value)", span="210-210", cluster="Newtonsoft.Json.Linq.JTokenReader.SetToken(Newtonsoft.Json.Linq.JToken)", file="JsonSerializerTest.cs"];
m4_93 [label="JTokenType.Undefined", span="212-212", cluster="Newtonsoft.Json.Linq.JTokenReader.SetToken(Newtonsoft.Json.Linq.JToken)", file="JsonSerializerTest.cs"];
m4_94 [label="SetToken(JsonToken.Undefined, ((JValue)token).Value)", span="213-213", cluster="Newtonsoft.Json.Linq.JTokenReader.SetToken(Newtonsoft.Json.Linq.JToken)", file="JsonSerializerTest.cs"];
m4_96 [label="SetToken(JsonToken.Date, ((JValue)token).Value)", span="216-216", cluster="Newtonsoft.Json.Linq.JTokenReader.SetToken(Newtonsoft.Json.Linq.JToken)", file="JsonSerializerTest.cs"];
m4_97 [label="JTokenType.Raw", span="218-218", cluster="Newtonsoft.Json.Linq.JTokenReader.SetToken(Newtonsoft.Json.Linq.JToken)", file="JsonSerializerTest.cs"];
m4_98 [label="SetToken(JsonToken.Raw, ((JValue)token).Value)", span="219-219", cluster="Newtonsoft.Json.Linq.JTokenReader.SetToken(Newtonsoft.Json.Linq.JToken)", file="JsonSerializerTest.cs"];
m4_99 [label="JTokenType.Bytes", span="221-221", cluster="Newtonsoft.Json.Linq.JTokenReader.SetToken(Newtonsoft.Json.Linq.JToken)", file="JsonSerializerTest.cs"];
m4_101 [label="JTokenType.Guid", span="224-224", cluster="Newtonsoft.Json.Linq.JTokenReader.SetToken(Newtonsoft.Json.Linq.JToken)", file="JsonSerializerTest.cs"];
m4_102 [label="SetToken(JsonToken.String, SafeToString(((JValue)token).Value))", span="225-225", cluster="Newtonsoft.Json.Linq.JTokenReader.SetToken(Newtonsoft.Json.Linq.JToken)", file="JsonSerializerTest.cs"];
m4_103 [label="JTokenType.Uri", span="227-227", cluster="Newtonsoft.Json.Linq.JTokenReader.SetToken(Newtonsoft.Json.Linq.JToken)", file="JsonSerializerTest.cs"];
m4_104 [label="object v = ((JValue)token).Value", span="228-228", cluster="Newtonsoft.Json.Linq.JTokenReader.SetToken(Newtonsoft.Json.Linq.JToken)", file="JsonSerializerTest.cs"];
m4_106 [label="SetToken(JsonToken.String, ((Uri)v).OriginalString)", span="231-231", cluster="Newtonsoft.Json.Linq.JTokenReader.SetToken(Newtonsoft.Json.Linq.JToken)", file="JsonSerializerTest.cs"];
m4_107 [label="SetToken(JsonToken.String, SafeToString(v))", span="235-235", cluster="Newtonsoft.Json.Linq.JTokenReader.SetToken(Newtonsoft.Json.Linq.JToken)", file="JsonSerializerTest.cs"];
m4_108 [label="JTokenType.TimeSpan", span="238-238", cluster="Newtonsoft.Json.Linq.JTokenReader.SetToken(Newtonsoft.Json.Linq.JToken)", file="JsonSerializerTest.cs"];
m4_110 [label="throw MiscellaneousUtils.CreateArgumentOutOfRangeException(''Type'', token.Type, ''Unexpected JTokenType.'');", span="242-242", cluster="Newtonsoft.Json.Linq.JTokenReader.SetToken(Newtonsoft.Json.Linq.JToken)", file="JsonSerializerTest.cs"];
m4_111 [label="Exit Newtonsoft.Json.Linq.JTokenReader.SetToken(Newtonsoft.Json.Linq.JToken)", span="178-178", cluster="Newtonsoft.Json.Linq.JTokenReader.SetToken(Newtonsoft.Json.Linq.JToken)", file="JsonSerializerTest.cs"];
m4_112 [label="Entry Newtonsoft.Json.JsonReader.SetToken(Newtonsoft.Json.JsonToken, object)", span="955-955", cluster="Newtonsoft.Json.JsonReader.SetToken(Newtonsoft.Json.JsonToken, object)", file="JsonSerializerTest.cs"];
m4_113 [label="Entry Newtonsoft.Json.Linq.JTokenReader.SafeToString(object)", span="246-246", cluster="Newtonsoft.Json.Linq.JTokenReader.SafeToString(object)", file="JsonSerializerTest.cs"];
m4_114 [label="return (value != null) ? value.ToString() : null;", span="248-248", cluster="Newtonsoft.Json.Linq.JTokenReader.SafeToString(object)", file="JsonSerializerTest.cs"];
m4_116 [label="Entry object.ToString()", span="0-0", cluster="object.ToString()", file="JsonSerializerTest.cs"];
m4_123 [label="Entry Newtonsoft.Json.IJsonLineInfo.HasLineInfo()", span="38-38", cluster="Newtonsoft.Json.IJsonLineInfo.HasLineInfo()", file="JsonSerializerTest.cs"];
m4_124 [label="Newtonsoft.Json.Linq.JTokenReader", span="", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="JsonSerializerTest.cs"];
m4_126 [label="Assert.AreEqual(jsonReader.TokenType, JsonToken.EndObject)", span="261-261", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="JsonSerializerTest.cs"];
m4_127 [label="Assert.AreEqual(7, jsonReader.LineNumber)", span="262-262", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="JsonSerializerTest.cs"];
m4_128 [label="Assert.AreEqual(2, jsonReader.LinePosition)", span="263-263", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="JsonSerializerTest.cs"];
m4_86 [label="SetToken(JsonToken.Float, ((JValue)token).Value)", span="201-201", cluster="Newtonsoft.Json.Linq.JTokenReader.SetToken(Newtonsoft.Json.Linq.JToken)", file="JsonSerializerTest.cs"];
m4_90 [label="SetToken(JsonToken.Boolean, ((JValue)token).Value)", span="207-207", cluster="Newtonsoft.Json.Linq.JTokenReader.SetToken(Newtonsoft.Json.Linq.JToken)", file="JsonSerializerTest.cs"];
m4_95 [label="JTokenType.Date", span="215-215", cluster="Newtonsoft.Json.Linq.JTokenReader.SetToken(Newtonsoft.Json.Linq.JToken)", file="JsonSerializerTest.cs"];
m4_100 [label="SetToken(JsonToken.Bytes, ((JValue)token).Value)", span="222-222", cluster="Newtonsoft.Json.Linq.JTokenReader.SetToken(Newtonsoft.Json.Linq.JToken)", file="JsonSerializerTest.cs"];
m4_105 [label="v is Uri", span="229-229", cluster="Newtonsoft.Json.Linq.JTokenReader.SetToken(Newtonsoft.Json.Linq.JToken)", file="JsonSerializerTest.cs"];
m4_109 [label="SetToken(JsonToken.String, SafeToString(((JValue)token).Value))", span="239-239", cluster="Newtonsoft.Json.Linq.JTokenReader.SetToken(Newtonsoft.Json.Linq.JToken)", file="JsonSerializerTest.cs"];
m4_115 [label="Exit Newtonsoft.Json.Linq.JTokenReader.SafeToString(object)", span="246-246", cluster="Newtonsoft.Json.Linq.JTokenReader.SafeToString(object)", file="JsonSerializerTest.cs"];
m4_125 [label="jsonReader.Read()", span="260-260", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="JsonSerializerTest.cs"];
m4_129 [label="Assert.IsFalse(jsonReader.Read())", span="265-265", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="JsonSerializerTest.cs"];
m4_82 [label="SetToken(JsonToken.Comment, ((JValue)token).Value)", span="195-195", cluster="Newtonsoft.Json.Linq.JTokenReader.SetToken(Newtonsoft.Json.Linq.JToken)", file="JsonSerializerTest.cs"];
m4_130 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", span="193-193", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="JsonSerializerTest.cs"];
m4_819 [label="Entry System.Globalization.CultureInfo.CultureInfo(string)", span="0-0", cluster="System.Globalization.CultureInfo.CultureInfo(string)", file="JsonSerializerTest.cs"];
m4_471 [label="Entry System.Text.StringBuilder.StringBuilder()", span="0-0", cluster="System.Text.StringBuilder.StringBuilder()", file="JsonSerializerTest.cs"];
m4_6 [label="ms = new MemoryStream()", span="49-49", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.CloseInput()", file="JsonSerializerTest.cs"];
m4_7 [label="reader = new JsonTextReader(new StreamReader(ms)) { CloseInput = false }", span="50-50", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.CloseInput()", file="JsonSerializerTest.cs"];
m4_8 [label="Assert.IsTrue(ms.CanRead)", span="52-52", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.CloseInput()", file="JsonSerializerTest.cs"];
m4_358 [label="Entry System.IO.StringReader.ReadLine()", span="0-0", cluster="System.IO.StringReader.ReadLine()", file="JsonSerializerTest.cs"];
m4_481 [label="Entry Newtonsoft.Json.JsonWriter.WriteNull()", span="640-640", cluster="Newtonsoft.Json.JsonWriter.WriteNull()", file="JsonSerializerTest.cs"];
m4_5 [label="Assert.IsFalse(ms.CanRead)", span="47-47", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.CloseInput()", file="JsonSerializerTest.cs"];
m4_670 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesIntegerArrayWithNoEnd()", span="1167-1167", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesIntegerArrayWithNoEnd()", file="JsonSerializerTest.cs"];
m4_671 [label="JsonTextReader reader = new JsonTextReader(new StringReader(@''[1''))", span="1169-1169", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesIntegerArrayWithNoEnd()", file="JsonSerializerTest.cs"];
m4_672 [label="reader.ReadAsBytes()", span="1171-1171", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesIntegerArrayWithNoEnd()", file="JsonSerializerTest.cs"];
m4_673 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesIntegerArrayWithNoEnd()", span="1167-1167", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesIntegerArrayWithNoEnd()", file="JsonSerializerTest.cs"];
m4_959 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyObject()", span="1645-1645", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyObject()", file="JsonSerializerTest.cs"];
m4_962 [label="Assert.IsTrue(reader.Read())", span="1650-1650", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyObject()", file="JsonSerializerTest.cs"];
m4_964 [label="Assert.IsTrue(reader.Read())", span="1653-1653", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyObject()", file="JsonSerializerTest.cs"];
m4_963 [label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="1651-1651", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyObject()", file="JsonSerializerTest.cs"];
m4_965 [label="Assert.AreEqual(JsonToken.EndObject, reader.TokenType)", span="1654-1654", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyObject()", file="JsonSerializerTest.cs"];
m4_961 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="1648-1648", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyObject()", file="JsonSerializerTest.cs"];
m4_960 [label="string json = ''{}''", span="1647-1647", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyObject()", file="JsonSerializerTest.cs"];
m4_966 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyObject()", span="1645-1645", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyObject()", file="JsonSerializerTest.cs"];
m4_14 [label="container != null && _parent != container", span="82-82", cluster="Newtonsoft.Json.Linq.JTokenReader.Read()", file="JsonSerializerTest.cs"];
m4_485 [label="Entry Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter, object)", span="440-440", cluster="Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter, object)", file="JsonSerializerTest.cs"];
m4_309 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndWhenParsingUnquotedProperty()", span="565-565", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndWhenParsingUnquotedProperty()", file="JsonSerializerTest.cs"];
m4_311 [label="Assert.IsTrue(reader.Read())", span="568-568", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndWhenParsingUnquotedProperty()", file="JsonSerializerTest.cs"];
m4_312 [label="reader.Read()", span="569-569", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndWhenParsingUnquotedProperty()", file="JsonSerializerTest.cs"];
m4_310 [label="JsonReader reader = new JsonTextReader(new StringReader(@''{aww''))", span="567-567", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndWhenParsingUnquotedProperty()", file="JsonSerializerTest.cs"];
m4_313 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndWhenParsingUnquotedProperty()", span="565-565", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndWhenParsingUnquotedProperty()", file="JsonSerializerTest.cs"];
m4_979 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ParseConstructorWithBadCharacter()", span="1681-1681", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseConstructorWithBadCharacter()", file="JsonSerializerTest.cs"];
m4_982 [label="Assert.IsTrue(reader.Read())", span="1686-1686", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseConstructorWithBadCharacter()", file="JsonSerializerTest.cs"];
m4_981 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="1684-1684", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseConstructorWithBadCharacter()", file="JsonSerializerTest.cs"];
m4_980 [label="string json = ''new Date,()''", span="1683-1683", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseConstructorWithBadCharacter()", file="JsonSerializerTest.cs"];
m4_983 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ParseConstructorWithBadCharacter()", span="1681-1681", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseConstructorWithBadCharacter()", file="JsonSerializerTest.cs"];
m4_707 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffset()", span="1231-1231", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffset()", file="JsonSerializerTest.cs"];
m4_710 [label="Assert.IsTrue(reader.Read())", span="1237-1237", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffset()", file="JsonSerializerTest.cs"];
m4_712 [label="Assert.IsTrue(reader.Read())", span="1240-1240", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffset()", file="JsonSerializerTest.cs"];
m4_718 [label="Assert.IsTrue(reader.Read())", span="1248-1248", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffset()", file="JsonSerializerTest.cs"];
m4_711 [label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="1238-1238", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffset()", file="JsonSerializerTest.cs"];
m4_713 [label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="1241-1241", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffset()", file="JsonSerializerTest.cs"];
m4_715 [label="Assert.AreEqual(JsonToken.Date, reader.TokenType)", span="1244-1244", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffset()", file="JsonSerializerTest.cs"];
m4_716 [label="Assert.AreEqual(typeof(DateTimeOffset), reader.ValueType)", span="1245-1245", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffset()", file="JsonSerializerTest.cs"];
m4_717 [label="Assert.AreEqual(new DateTimeOffset(new DateTime(2000, 1, 1), TimeSpan.FromHours(6)), reader.Value)", span="1246-1246", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffset()", file="JsonSerializerTest.cs"];
m4_719 [label="Assert.AreEqual(JsonToken.EndObject, reader.TokenType)", span="1249-1249", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffset()", file="JsonSerializerTest.cs"];
m4_709 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="1235-1235", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffset()", file="JsonSerializerTest.cs"];
m4_714 [label="reader.ReadAsDateTimeOffset()", span="1243-1243", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffset()", file="JsonSerializerTest.cs"];
m4_708 [label="string json = ''{\''Offset\'':\''\\/Date(946663200000+0600)\\/\''}''", span="1233-1233", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffset()", file="JsonSerializerTest.cs"];
m4_720 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffset()", span="1231-1231", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffset()", file="JsonSerializerTest.cs"];
m4_479 [label="Entry Newtonsoft.Json.JsonWriter.WriteValue(decimal)", span="797-797", cluster="Newtonsoft.Json.JsonWriter.WriteValue(decimal)", file="JsonSerializerTest.cs"];
m4_607 [label="Entry Newtonsoft.Json.JsonTextReader.ReadAsBytes()", span="384-384", cluster="Newtonsoft.Json.JsonTextReader.ReadAsBytes()", file="JsonSerializerTest.cs"];
m4_71 [label="reader.Read()", span="175-175", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Whitespace()", file="JsonSerializerTest.cs", color=green, community=0];
m4_41 [label="Assert.IsTrue(reader.Read())", span="112-112", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", file="JsonSerializerTest.cs", color=green, community=0];
m4_221 [label="Entry Newtonsoft.Json.JsonTextWriter.WriteValue(int)", span="292-292", cluster="Newtonsoft.Json.JsonTextWriter.WriteValue(int)", file="JsonSerializerTest.cs"];
m4_295 [label="Entry Newtonsoft.Json.JsonReader.ReadAsBytes()", span="228-228", cluster="Newtonsoft.Json.JsonReader.ReadAsBytes()", file="JsonSerializerTest.cs"];
m4_803 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetUnitedStatesDate()", span="1381-1381", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetUnitedStatesDate()", file="JsonSerializerTest.cs"];
m4_807 [label="Assert.IsTrue(reader.Read())", span="1388-1388", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetUnitedStatesDate()", file="JsonSerializerTest.cs"];
m4_809 [label="Assert.IsTrue(reader.Read())", span="1391-1391", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetUnitedStatesDate()", file="JsonSerializerTest.cs"];
m4_816 [label="Assert.IsTrue(reader.Read())", span="1401-1401", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetUnitedStatesDate()", file="JsonSerializerTest.cs"];
m4_808 [label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="1389-1389", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetUnitedStatesDate()", file="JsonSerializerTest.cs"];
m4_810 [label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="1392-1392", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetUnitedStatesDate()", file="JsonSerializerTest.cs"];
m4_812 [label="Assert.AreEqual(JsonToken.Date, reader.TokenType)", span="1395-1395", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetUnitedStatesDate()", file="JsonSerializerTest.cs"];
m4_813 [label="Assert.AreEqual(typeof(DateTimeOffset), reader.ValueType)", span="1396-1396", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetUnitedStatesDate()", file="JsonSerializerTest.cs"];
m4_817 [label="Assert.AreEqual(JsonToken.EndObject, reader.TokenType)", span="1402-1402", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetUnitedStatesDate()", file="JsonSerializerTest.cs"];
m4_815 [label="Assert.AreEqual(new DateTime(2011, 1, 30, 0, 0, 0, DateTimeKind.Unspecified), dt.DateTime)", span="1399-1399", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetUnitedStatesDate()", file="JsonSerializerTest.cs"];
m4_805 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="1385-1385", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetUnitedStatesDate()", file="JsonSerializerTest.cs"];
m4_806 [label="reader.Culture = new CultureInfo(''en-US'')", span="1386-1386", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetUnitedStatesDate()", file="JsonSerializerTest.cs"];
m4_811 [label="reader.ReadAsDateTimeOffset()", span="1394-1394", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetUnitedStatesDate()", file="JsonSerializerTest.cs"];
m4_814 [label="DateTimeOffset dt = (DateTimeOffset)reader.Value", span="1398-1398", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetUnitedStatesDate()", file="JsonSerializerTest.cs"];
m4_804 [label="string json = @''{''''Offset'''':''''1/30/2011''''}''", span="1383-1383", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetUnitedStatesDate()", file="JsonSerializerTest.cs"];
m4_818 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetUnitedStatesDate()", span="1381-1381", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetUnitedStatesDate()", file="JsonSerializerTest.cs"];
m4_638 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesNoContent()", span="1098-1098", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesNoContent()", file="JsonSerializerTest.cs"];
m4_639 [label="JsonTextReader reader = new JsonTextReader(new StringReader(@''''))", span="1100-1100", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesNoContent()", file="JsonSerializerTest.cs"];
m4_640 [label="reader.ReadAsBytes()", span="1102-1102", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesNoContent()", file="JsonSerializerTest.cs"];
m4_641 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesNoContent()", span="1098-1098", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesNoContent()", file="JsonSerializerTest.cs"];
m4_0 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.CloseInput()", span="40-40", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.CloseInput()", file="JsonSerializerTest.cs"];
m4_1 [label="MemoryStream ms = new MemoryStream()", span="42-42", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.CloseInput()", file="JsonSerializerTest.cs"];
m4_2 [label="JsonTextReader reader = new JsonTextReader(new StreamReader(ms))", span="43-43", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.CloseInput()", file="JsonSerializerTest.cs"];
m4_3 [label="Assert.IsTrue(ms.CanRead)", span="45-45", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.CloseInput()", file="JsonSerializerTest.cs"];
m4_738 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetHoursOnly()", span="1275-1275", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetHoursOnly()", file="JsonSerializerTest.cs"];
m4_741 [label="Assert.IsTrue(reader.Read())", span="1281-1281", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetHoursOnly()", file="JsonSerializerTest.cs"];
m4_743 [label="Assert.IsTrue(reader.Read())", span="1284-1284", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetHoursOnly()", file="JsonSerializerTest.cs"];
m4_749 [label="Assert.IsTrue(reader.Read())", span="1292-1292", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetHoursOnly()", file="JsonSerializerTest.cs"];
m4_742 [label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="1282-1282", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetHoursOnly()", file="JsonSerializerTest.cs"];
m4_744 [label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="1285-1285", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetHoursOnly()", file="JsonSerializerTest.cs"];
m4_746 [label="Assert.AreEqual(JsonToken.Date, reader.TokenType)", span="1288-1288", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetHoursOnly()", file="JsonSerializerTest.cs"];
m4_747 [label="Assert.AreEqual(typeof(DateTimeOffset), reader.ValueType)", span="1289-1289", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetHoursOnly()", file="JsonSerializerTest.cs"];
m4_748 [label="Assert.AreEqual(new DateTimeOffset(new DateTime(2000, 1, 1), TimeSpan.FromHours(6)), reader.Value)", span="1290-1290", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetHoursOnly()", file="JsonSerializerTest.cs"];
m4_750 [label="Assert.AreEqual(JsonToken.EndObject, reader.TokenType)", span="1293-1293", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetHoursOnly()", file="JsonSerializerTest.cs"];
m4_740 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="1279-1279", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetHoursOnly()", file="JsonSerializerTest.cs"];
m4_745 [label="reader.ReadAsDateTimeOffset()", span="1287-1287", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetHoursOnly()", file="JsonSerializerTest.cs"];
m4_739 [label="string json = ''{\''Offset\'':\''\\/Date(946663200000+06)\\/\''}''", span="1277-1277", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetHoursOnly()", file="JsonSerializerTest.cs"];
m4_751 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetHoursOnly()", span="1275-1275", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetHoursOnly()", file="JsonSerializerTest.cs"];
m4_519 [label="Entry object.ToString()", span="0-0", cluster="object.ToString()", file="JsonSerializerTest.cs"];
m4_304 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesNoStartWithUnexpectedEnd()", span="556-556", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesNoStartWithUnexpectedEnd()", file="JsonSerializerTest.cs"];
m4_306 [label="Assert.IsTrue(reader.Read())", span="559-559", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesNoStartWithUnexpectedEnd()", file="JsonSerializerTest.cs"];
m4_305 [label="JsonReader reader = new JsonTextReader(new StringReader(@''[  ''))", span="558-558", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesNoStartWithUnexpectedEnd()", file="JsonSerializerTest.cs"];
m4_307 [label="reader.ReadAsBytes()", span="560-560", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesNoStartWithUnexpectedEnd()", file="JsonSerializerTest.cs"];
m4_308 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesNoStartWithUnexpectedEnd()", span="556-556", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesNoStartWithUnexpectedEnd()", file="JsonSerializerTest.cs"];
m4_802 [label="Entry System.DateTime.DateTime(int, int, int, int, int, int, System.DateTimeKind)", span="0-0", cluster="System.DateTime.DateTime(int, int, int, int, int, int, System.DateTimeKind)", file="JsonSerializerTest.cs"];
m4_475 [label="Entry Newtonsoft.Json.JsonWriter.WriteStartObject()", span="239-239", cluster="Newtonsoft.Json.JsonWriter.WriteStartObject()", file="JsonSerializerTest.cs"];
m4_1053 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ParseHexNumber()", span="1803-1803", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseHexNumber()", file="JsonSerializerTest.cs"];
m4_1057 [label="Assert.AreEqual(JsonToken.Float, reader.TokenType)", span="1810-1810", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseHexNumber()", file="JsonSerializerTest.cs"];
m4_1058 [label="Assert.AreEqual(32m, reader.Value)", span="1811-1811", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseHexNumber()", file="JsonSerializerTest.cs"];
m4_1055 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="1807-1807", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseHexNumber()", file="JsonSerializerTest.cs"];
m4_1056 [label="reader.ReadAsDecimal()", span="1809-1809", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseHexNumber()", file="JsonSerializerTest.cs"];
m4_1054 [label="string json = @''0x20''", span="1805-1805", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseHexNumber()", file="JsonSerializerTest.cs"];
m4_1059 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ParseHexNumber()", span="1803-1803", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseHexNumber()", file="JsonSerializerTest.cs"];
m4_776 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.MatchWithNoTrailingSeperator()", span="1336-1336", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MatchWithNoTrailingSeperator()", file="JsonSerializerTest.cs"];
m4_777 [label="JsonTextReader reader = new JsonTextReader(new StringReader(@''nullz''))", span="1338-1338", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MatchWithNoTrailingSeperator()", file="JsonSerializerTest.cs"];
m4_778 [label="reader.Read()", span="1339-1339", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MatchWithNoTrailingSeperator()", file="JsonSerializerTest.cs"];
m4_779 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.MatchWithNoTrailingSeperator()", span="1336-1336", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MatchWithNoTrailingSeperator()", file="JsonSerializerTest.cs"];
m4_971 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyConstructor()", span="1667-1667", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyConstructor()", file="JsonSerializerTest.cs"];
m4_974 [label="Assert.IsTrue(reader.Read())", span="1672-1672", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyConstructor()", file="JsonSerializerTest.cs"];
m4_976 [label="Assert.IsTrue(reader.Read())", span="1675-1675", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyConstructor()", file="JsonSerializerTest.cs"];
m4_975 [label="Assert.AreEqual(JsonToken.StartConstructor, reader.TokenType)", span="1673-1673", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyConstructor()", file="JsonSerializerTest.cs"];
m4_977 [label="Assert.AreEqual(JsonToken.EndConstructor, reader.TokenType)", span="1676-1676", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyConstructor()", file="JsonSerializerTest.cs"];
m4_973 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="1670-1670", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyConstructor()", file="JsonSerializerTest.cs"];
m4_972 [label="string json = ''new Date()''", span="1669-1669", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyConstructor()", file="JsonSerializerTest.cs"];
m4_978 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyConstructor()", span="1667-1667", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyConstructor()", file="JsonSerializerTest.cs"];
m4_372 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInArray()", span="681-681", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInArray()", file="JsonSerializerTest.cs"];
m4_376 [label="Assert.IsTrue(reader.Read())", span="687-687", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInArray()", file="JsonSerializerTest.cs"];
m4_378 [label="Assert.IsTrue(reader.Read())", span="689-689", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInArray()", file="JsonSerializerTest.cs"];
m4_383 [label="Assert.IsTrue(reader.Read())", span="694-694", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInArray()", file="JsonSerializerTest.cs"];
m4_385 [label="Assert.IsFalse(reader.Read())", span="697-697", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInArray()", file="JsonSerializerTest.cs"];
m4_381 [label="Assert.AreEqual(helloWorldData, data)", span="692-692", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInArray()", file="JsonSerializerTest.cs"];
m4_377 [label="Assert.AreEqual(JsonToken.StartArray, reader.TokenType)", span="688-688", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInArray()", file="JsonSerializerTest.cs"];
m4_379 [label="Assert.AreEqual(JsonToken.Integer, reader.TokenType)", span="690-690", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInArray()", file="JsonSerializerTest.cs"];
m4_382 [label="Assert.AreEqual(JsonToken.Bytes, reader.TokenType)", span="693-693", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInArray()", file="JsonSerializerTest.cs"];
m4_384 [label="Assert.AreEqual(JsonToken.EndArray, reader.TokenType)", span="695-695", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInArray()", file="JsonSerializerTest.cs"];
m4_375 [label="JsonReader reader = new JsonTextReader(new StringReader(@''[1,''' + Convert.ToBase64String(helloWorldData) + @''']''))", span="686-686", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInArray()", file="JsonSerializerTest.cs"];
m4_374 [label="byte[] helloWorldData = Encoding.UTF8.GetBytes(helloWorld)", span="684-684", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInArray()", file="JsonSerializerTest.cs"];
m4_380 [label="byte[] data = reader.ReadAsBytes()", span="691-691", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInArray()", file="JsonSerializerTest.cs"];
m4_373 [label="string helloWorld = ''Hello world!''", span="683-683", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInArray()", file="JsonSerializerTest.cs"];
m4_386 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInArray()", span="681-681", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInArray()", file="JsonSerializerTest.cs"];
m4_642 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesNoContentWrappedObject()", span="1107-1107", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesNoContentWrappedObject()", file="JsonSerializerTest.cs"];
m4_643 [label="JsonTextReader reader = new JsonTextReader(new StringReader(@''{''))", span="1109-1109", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesNoContentWrappedObject()", file="JsonSerializerTest.cs"];
m4_644 [label="reader.ReadAsBytes()", span="1111-1111", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesNoContentWrappedObject()", file="JsonSerializerTest.cs"];
m4_645 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesNoContentWrappedObject()", span="1107-1107", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesNoContentWrappedObject()", file="JsonSerializerTest.cs"];
m4_23 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.YahooFinance()", span="58-58", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.YahooFinance()", file="JsonSerializerTest.cs"];
m4_72 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Whitespace()", span="164-164", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Whitespace()", file="JsonSerializerTest.cs"];
m4_73 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_WhitespaceThenText()", span="182-182", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_WhitespaceThenText()", file="JsonSerializerTest.cs"];
m4_75 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="186-186", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_WhitespaceThenText()", file="JsonSerializerTest.cs", color=green, community=0];
m4_77 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_WhitespaceThenText()", span="182-182", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_WhitespaceThenText()", file="JsonSerializerTest.cs"];
m4_74 [label="string json = @'''hi' a''", span="184-184", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_WhitespaceThenText()", file="JsonSerializerTest.cs", color=green, community=0];
m4_76 [label="reader.Read()", span="187-187", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_WhitespaceThenText()", file="JsonSerializerTest.cs", color=green, community=0];
m4_820 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", span="1406-1406", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", file="JsonSerializerTest.cs"];
m4_824 [label="Assert.IsTrue(reader.Read())", span="1413-1413", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", file="JsonSerializerTest.cs"];
m4_826 [label="Assert.IsTrue(reader.Read())", span="1416-1416", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", file="JsonSerializerTest.cs"];
m4_833 [label="Assert.IsTrue(reader.Read())", span="1426-1426", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", file="JsonSerializerTest.cs"];
m4_825 [label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="1414-1414", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", file="JsonSerializerTest.cs"];
m4_827 [label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="1417-1417", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", file="JsonSerializerTest.cs"];
m4_829 [label="Assert.AreEqual(JsonToken.Date, reader.TokenType)", span="1420-1420", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", file="JsonSerializerTest.cs"];
m4_830 [label="Assert.AreEqual(typeof(DateTimeOffset), reader.ValueType)", span="1421-1421", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", file="JsonSerializerTest.cs"];
m4_834 [label="Assert.AreEqual(JsonToken.EndObject, reader.TokenType)", span="1427-1427", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", file="JsonSerializerTest.cs"];
m4_832 [label="Assert.AreEqual(new DateTime(2011, 1, 30, 0, 0, 0, DateTimeKind.Unspecified), dt.DateTime)", span="1424-1424", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", file="JsonSerializerTest.cs"];
m4_822 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="1410-1410", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", file="JsonSerializerTest.cs"];
m4_823 [label="reader.Culture = new CultureInfo(''en-NZ'')", span="1411-1411", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", file="JsonSerializerTest.cs"];
m4_828 [label="reader.ReadAsDateTimeOffset()", span="1419-1419", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", file="JsonSerializerTest.cs"];
m4_831 [label="DateTimeOffset dt = (DateTimeOffset)reader.Value", span="1423-1423", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", file="JsonSerializerTest.cs"];
m4_821 [label="string json = @''{''''Offset'''':''''30/1/2011''''}''", span="1408-1408", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", file="JsonSerializerTest.cs"];
m4_835 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", span="1406-1406", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", file="JsonSerializerTest.cs"];
m4_16 [label="return ReadOver(_current);", span="88-88", cluster="Newtonsoft.Json.Linq.JTokenReader.Read()", file="JsonSerializerTest.cs"];
m4_36 [label="Assert.AreEqual(0, reader.Value)", span="104-104", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", file="JsonSerializerTest.cs", color=green, community=0];
m4_63 [label="reader.Read()", span="157-157", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Text()", file="JsonSerializerTest.cs", color=green, community=0];
m4_66 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Text()", span="134-134", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Text()", file="JsonSerializerTest.cs"];
m4_67 [label="Entry Newtonsoft.Json.JsonTextReader.SetCharBuffer(char[])", span="89-89", cluster="Newtonsoft.Json.JsonTextReader.SetCharBuffer(char[])", file="JsonSerializerTest.cs"];
m4_69 [label="string json = @''[\r\n''''Small'''',\r\n''''Medium'''',\r\n''''Large''''\r\n]   \r\n\r\n''", span="166-172", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Whitespace()", file="JsonSerializerTest.cs", color=green, community=0];
m4_64 [label="Assert.AreEqual(5, reader.LineNumber)", span="158-158", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Text()", file="JsonSerializerTest.cs", color=green, community=0];
m4_65 [label="reader.Read()", span="160-160", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Text()", file="JsonSerializerTest.cs", color=green, community=0];
m4_68 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Whitespace()", span="164-164", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Whitespace()", file="JsonSerializerTest.cs"];
m4_70 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="174-174", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Whitespace()", file="JsonSerializerTest.cs", color=green, community=0];
m4_650 [label="Entry Newtonsoft.Json.JsonTextReader.ReadAsDateTimeOffset()", span="475-475", cluster="Newtonsoft.Json.JsonTextReader.ReadAsDateTimeOffset()", file="JsonSerializerTest.cs"];
m4_25 [label="return ReadToEnd();", span="101-101", cluster="Newtonsoft.Json.Linq.JTokenReader.ReadOver(Newtonsoft.Json.Linq.JToken)", file="JsonSerializerTest.cs"];
m4_218 [label="Entry System.IO.StringWriter.StringWriter()", span="0-0", cluster="System.IO.StringWriter.StringWriter()", file="JsonSerializerTest.cs"];
m4_678 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadUnicode()", span="1184-1184", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadUnicode()", file="JsonSerializerTest.cs"];
m4_682 [label="Assert.IsTrue(reader.Read())", span="1191-1191", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadUnicode()", file="JsonSerializerTest.cs"];
m4_684 [label="Assert.IsTrue(reader.Read())", span="1194-1194", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadUnicode()", file="JsonSerializerTest.cs"];
m4_687 [label="Assert.IsTrue(reader.Read())", span="1198-1198", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadUnicode()", file="JsonSerializerTest.cs"];
m4_690 [label="Assert.IsTrue(reader.Read())", span="1202-1202", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadUnicode()", file="JsonSerializerTest.cs"];
m4_683 [label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="1192-1192", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadUnicode()", file="JsonSerializerTest.cs"];
m4_685 [label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="1195-1195", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadUnicode()", file="JsonSerializerTest.cs"];
m4_686 [label="Assert.AreEqual(''Message'', reader.Value)", span="1196-1196", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadUnicode()", file="JsonSerializerTest.cs"];
m4_688 [label="Assert.AreEqual(JsonToken.String, reader.TokenType)", span="1199-1199", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadUnicode()", file="JsonSerializerTest.cs"];
m4_689 [label="Assert.AreEqual(@''Hi,I'' + '\u0092' + ''ve send you smth'', reader.Value)", span="1200-1200", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadUnicode()", file="JsonSerializerTest.cs"];
m4_691 [label="Assert.AreEqual(JsonToken.EndObject, reader.TokenType)", span="1203-1203", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadUnicode()", file="JsonSerializerTest.cs"];
m4_680 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="1188-1188", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadUnicode()", file="JsonSerializerTest.cs"];
m4_692 [label="Assert.IsFalse(reader.Read())", span="1205-1205", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadUnicode()", file="JsonSerializerTest.cs"];
m4_681 [label="reader.SetCharBuffer(new char[5])", span="1189-1189", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadUnicode()", file="JsonSerializerTest.cs"];
m4_679 [label="string json = @''{''''Message'''':''''Hi,I\u0092ve send you smth''''}''", span="1186-1186", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadUnicode()", file="JsonSerializerTest.cs"];
m4_693 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadUnicode()", span="1184-1184", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadUnicode()", file="JsonSerializerTest.cs"];
m4_651 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalBadContent()", span="1127-1127", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalBadContent()", file="JsonSerializerTest.cs"];
m4_652 [label="JsonTextReader reader = new JsonTextReader(new StringReader(@''new Date()''))", span="1129-1129", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalBadContent()", file="JsonSerializerTest.cs"];
m4_653 [label="reader.ReadAsDecimal()", span="1131-1131", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalBadContent()", file="JsonSerializerTest.cs"];
m4_654 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalBadContent()", span="1127-1127", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalBadContent()", file="JsonSerializerTest.cs"];
m4_13 [label="JContainer container = _current as JContainer", span="81-81", cluster="Newtonsoft.Json.Linq.JTokenReader.Read()", file="JsonSerializerTest.cs"];
m4_608 [label="Entry Unk.IsNotNull", span="", cluster="Unk.IsNotNull", file="JsonSerializerTest.cs"];
m4_694 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadHexidecimalWithAllLetters()", span="1209-1209", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadHexidecimalWithAllLetters()", file="JsonSerializerTest.cs"];
m4_697 [label="Assert.IsTrue(reader.Read())", span="1215-1215", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadHexidecimalWithAllLetters()", file="JsonSerializerTest.cs"];
m4_699 [label="Assert.IsTrue(reader.Read())", span="1218-1218", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadHexidecimalWithAllLetters()", file="JsonSerializerTest.cs"];
m4_701 [label="Assert.IsTrue(reader.Read())", span="1221-1221", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadHexidecimalWithAllLetters()", file="JsonSerializerTest.cs"];
m4_704 [label="Assert.IsTrue(reader.Read())", span="1225-1225", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadHexidecimalWithAllLetters()", file="JsonSerializerTest.cs"];
m4_698 [label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="1216-1216", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadHexidecimalWithAllLetters()", file="JsonSerializerTest.cs"];
m4_700 [label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="1219-1219", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadHexidecimalWithAllLetters()", file="JsonSerializerTest.cs"];
m4_702 [label="Assert.AreEqual(JsonToken.Integer, reader.TokenType)", span="1222-1222", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadHexidecimalWithAllLetters()", file="JsonSerializerTest.cs"];
m4_703 [label="Assert.AreEqual(11806310474565, reader.Value)", span="1223-1223", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadHexidecimalWithAllLetters()", file="JsonSerializerTest.cs"];
m4_705 [label="Assert.AreEqual(JsonToken.EndObject, reader.TokenType)", span="1226-1226", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadHexidecimalWithAllLetters()", file="JsonSerializerTest.cs"];
m4_696 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="1213-1213", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadHexidecimalWithAllLetters()", file="JsonSerializerTest.cs"];
m4_695 [label="string json = @''{''''text'''':0xabcdef12345}''", span="1211-1211", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadHexidecimalWithAllLetters()", file="JsonSerializerTest.cs"];
m4_706 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadHexidecimalWithAllLetters()", span="1209-1209", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadHexidecimalWithAllLetters()", file="JsonSerializerTest.cs"];
m4_296 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesWithUnexpectedEnd()", span="545-545", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesWithUnexpectedEnd()", file="JsonSerializerTest.cs"];
m4_299 [label="JsonReader reader = new JsonTextReader(new StringReader(@''''' + Convert.ToBase64String(helloWorldData)))", span="550-550", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesWithUnexpectedEnd()", file="JsonSerializerTest.cs"];
m4_298 [label="byte[] helloWorldData = Encoding.UTF8.GetBytes(helloWorld)", span="548-548", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesWithUnexpectedEnd()", file="JsonSerializerTest.cs"];
m4_300 [label="reader.ReadAsBytes()", span="551-551", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesWithUnexpectedEnd()", file="JsonSerializerTest.cs"];
m4_297 [label="string helloWorld = ''Hello world!''", span="547-547", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesWithUnexpectedEnd()", file="JsonSerializerTest.cs"];
m4_301 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesWithUnexpectedEnd()", span="545-545", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesWithUnexpectedEnd()", file="JsonSerializerTest.cs"];
m4_908 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ParseArrayWithMissingValues()", span="1561-1561", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseArrayWithMissingValues()", file="JsonSerializerTest.cs"];
m4_911 [label="Assert.IsTrue(reader.Read())", span="1566-1566", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseArrayWithMissingValues()", file="JsonSerializerTest.cs"];
m4_913 [label="Assert.IsTrue(reader.Read())", span="1569-1569", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseArrayWithMissingValues()", file="JsonSerializerTest.cs"];
m4_915 [label="Assert.IsTrue(reader.Read())", span="1572-1572", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseArrayWithMissingValues()", file="JsonSerializerTest.cs"];
m4_917 [label="Assert.IsTrue(reader.Read())", span="1575-1575", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseArrayWithMissingValues()", file="JsonSerializerTest.cs"];
m4_919 [label="Assert.IsTrue(reader.Read())", span="1578-1578", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseArrayWithMissingValues()", file="JsonSerializerTest.cs"];
m4_921 [label="Assert.IsTrue(reader.Read())", span="1581-1581", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseArrayWithMissingValues()", file="JsonSerializerTest.cs"];
m4_923 [label="Assert.IsTrue(reader.Read())", span="1584-1584", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseArrayWithMissingValues()", file="JsonSerializerTest.cs"];
m4_912 [label="Assert.AreEqual(JsonToken.StartArray, reader.TokenType)", span="1567-1567", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseArrayWithMissingValues()", file="JsonSerializerTest.cs"];
m4_914 [label="Assert.AreEqual(JsonToken.Undefined, reader.TokenType)", span="1570-1570", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseArrayWithMissingValues()", file="JsonSerializerTest.cs"];
m4_916 [label="Assert.AreEqual(JsonToken.Undefined, reader.TokenType)", span="1573-1573", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseArrayWithMissingValues()", file="JsonSerializerTest.cs"];
m4_918 [label="Assert.AreEqual(JsonToken.Undefined, reader.TokenType)", span="1576-1576", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseArrayWithMissingValues()", file="JsonSerializerTest.cs"];
m4_920 [label="Assert.AreEqual(JsonToken.Undefined, reader.TokenType)", span="1579-1579", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseArrayWithMissingValues()", file="JsonSerializerTest.cs"];
m4_922 [label="Assert.AreEqual(JsonToken.Undefined, reader.TokenType)", span="1582-1582", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseArrayWithMissingValues()", file="JsonSerializerTest.cs"];
m4_924 [label="Assert.AreEqual(JsonToken.EndArray, reader.TokenType)", span="1585-1585", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseArrayWithMissingValues()", file="JsonSerializerTest.cs"];
m4_910 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="1564-1564", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseArrayWithMissingValues()", file="JsonSerializerTest.cs"];
m4_909 [label="string json = ''[,,, \n\r\n \0   \r  , ,    ]''", span="1563-1563", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseArrayWithMissingValues()", file="JsonSerializerTest.cs"];
m4_925 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ParseArrayWithMissingValues()", span="1561-1561", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseArrayWithMissingValues()", file="JsonSerializerTest.cs"];
m4_674 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesArrayWithBadContent()", span="1176-1176", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesArrayWithBadContent()", file="JsonSerializerTest.cs"];
m4_675 [label="JsonTextReader reader = new JsonTextReader(new StringReader(@''[1.0]''))", span="1178-1178", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesArrayWithBadContent()", file="JsonSerializerTest.cs"];
m4_676 [label="reader.ReadAsBytes()", span="1180-1180", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesArrayWithBadContent()", file="JsonSerializerTest.cs"];
m4_677 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesArrayWithBadContent()", span="1176-1176", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesArrayWithBadContent()", file="JsonSerializerTest.cs"];
m4_637 [label="Entry Newtonsoft.Json.JsonTextReader.ReadAsDecimal()", span="442-442", cluster="Newtonsoft.Json.JsonTextReader.ReadAsDecimal()", file="JsonSerializerTest.cs"];
m4_655 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesBadContent()", span="1136-1136", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesBadContent()", file="JsonSerializerTest.cs"];
m4_656 [label="JsonTextReader reader = new JsonTextReader(new StringReader(@''new Date()''))", span="1138-1138", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesBadContent()", file="JsonSerializerTest.cs"];
m4_657 [label="reader.ReadAsBytes()", span="1140-1140", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesBadContent()", file="JsonSerializerTest.cs"];
m4_658 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesBadContent()", span="1136-1136", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesBadContent()", file="JsonSerializerTest.cs"];
m4_984 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", span="1690-1690", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonSerializerTest.cs"];
m4_987 [label="Assert.IsTrue(reader.Read())", span="1695-1695", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonSerializerTest.cs"];
m4_989 [label="Assert.IsTrue(reader.Read())", span="1698-1698", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonSerializerTest.cs"];
m4_991 [label="Assert.IsTrue(reader.Read())", span="1701-1701", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonSerializerTest.cs"];
m4_993 [label="Assert.IsTrue(reader.Read())", span="1704-1704", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonSerializerTest.cs"];
m4_995 [label="Assert.IsTrue(reader.Read())", span="1707-1707", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonSerializerTest.cs"];
m4_997 [label="Assert.IsTrue(reader.Read())", span="1710-1710", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonSerializerTest.cs"];
m4_999 [label="Assert.IsTrue(reader.Read())", span="1713-1713", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonSerializerTest.cs"];
m4_1001 [label="Assert.IsTrue(reader.Read())", span="1716-1716", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonSerializerTest.cs"];
m4_1003 [label="Assert.IsTrue(reader.Read())", span="1719-1719", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonSerializerTest.cs"];
m4_988 [label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="1696-1696", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonSerializerTest.cs"];
m4_990 [label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="1699-1699", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonSerializerTest.cs"];
m4_992 [label="Assert.AreEqual(JsonToken.StartArray, reader.TokenType)", span="1702-1702", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonSerializerTest.cs"];
m4_994 [label="Assert.AreEqual(JsonToken.Boolean, reader.TokenType)", span="1705-1705", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonSerializerTest.cs"];
m4_996 [label="Assert.AreEqual(JsonToken.StartConstructor, reader.TokenType)", span="1708-1708", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonSerializerTest.cs"];
m4_998 [label="Assert.AreEqual(JsonToken.EndConstructor, reader.TokenType)", span="1711-1711", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonSerializerTest.cs"];
m4_1000 [label="Assert.AreEqual(JsonToken.EndArray, reader.TokenType)", span="1714-1714", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonSerializerTest.cs"];
m4_1002 [label="Assert.AreEqual(JsonToken.Comment, reader.TokenType)", span="1717-1717", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonSerializerTest.cs"];
m4_1004 [label="Assert.AreEqual(JsonToken.EndObject, reader.TokenType)", span="1720-1720", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonSerializerTest.cs"];
m4_986 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="1693-1693", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonSerializerTest.cs"];
m4_1005 [label="Assert.IsFalse(reader.Read())", span="1722-1722", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonSerializerTest.cs"];
m4_985 [label="string json = ''\x00a0{\x00a0'h\x00a0i\x00a0'\x00a0:\x00a0[\x00a0true\x00a0,\x00a0new\x00a0Date\x00a0(\x00a0)\x00a0]\x00a0/*\x00a0comment\x00a0*/\x00a0}\x00a0''", span="1692-1692", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonSerializerTest.cs"];
m4_1006 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", span="1690-1690", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonSerializerTest.cs"];
m4_889 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ParseNullStringConstructor()", span="1532-1532", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseNullStringConstructor()", file="JsonSerializerTest.cs"];
m4_893 [label="Assert.IsTrue(reader.Read())", span="1538-1538", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseNullStringConstructor()", file="JsonSerializerTest.cs"];
m4_896 [label="Assert.IsTrue(reader.Read())", span="1542-1542", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseNullStringConstructor()", file="JsonSerializerTest.cs"];
m4_894 [label="Assert.AreEqual(''Date'', reader.Value)", span="1539-1539", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseNullStringConstructor()", file="JsonSerializerTest.cs"];
m4_895 [label="Assert.AreEqual(JsonToken.StartConstructor, reader.TokenType)", span="1540-1540", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseNullStringConstructor()", file="JsonSerializerTest.cs"];
m4_897 [label="Assert.AreEqual(JsonToken.EndConstructor, reader.TokenType)", span="1543-1543", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseNullStringConstructor()", file="JsonSerializerTest.cs"];
m4_891 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="1535-1535", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseNullStringConstructor()", file="JsonSerializerTest.cs"];
m4_892 [label="reader.SetCharBuffer(new char[7])", span="1536-1536", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseNullStringConstructor()", file="JsonSerializerTest.cs"];
m4_890 [label="string json = ''new Date\0()''", span="1534-1534", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseNullStringConstructor()", file="JsonSerializerTest.cs"];
m4_898 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ParseNullStringConstructor()", span="1532-1532", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseNullStringConstructor()", file="JsonSerializerTest.cs"];
m4_197 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongJsonArray()", span="373-373", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongJsonArray()", file="JsonSerializerTest.cs"];
m4_209 [label="Assert.IsTrue(reader.Read())", span="388-388", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongJsonArray()", file="JsonSerializerTest.cs"];
m4_212 [label="Assert.IsTrue(reader.Read())", span="391-391", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongJsonArray()", file="JsonSerializerTest.cs"];
m4_215 [label="Assert.IsTrue(reader.Read())", span="394-394", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongJsonArray()", file="JsonSerializerTest.cs"];
m4_213 [label="Assert.AreEqual(i, reader.Value)", span="392-392", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongJsonArray()", file="JsonSerializerTest.cs"];
m4_208 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="387-387", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongJsonArray()", file="JsonSerializerTest.cs"];
m4_216 [label="Assert.IsFalse(reader.Read())", span="395-395", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongJsonArray()", file="JsonSerializerTest.cs"];
m4_210 [label="int i = 0", span="389-389", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongJsonArray()", file="JsonSerializerTest.cs"];
m4_211 [label="i < valueCount", span="389-389", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongJsonArray()", file="JsonSerializerTest.cs"];
m4_214 [label="i++", span="389-389", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongJsonArray()", file="JsonSerializerTest.cs"];
m4_207 [label="string json = sw.ToString()", span="385-385", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongJsonArray()", file="JsonSerializerTest.cs"];
m4_198 [label="int valueCount = 10000", span="375-375", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongJsonArray()", file="JsonSerializerTest.cs"];
m4_199 [label="StringWriter sw = new StringWriter()", span="376-376", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongJsonArray()", file="JsonSerializerTest.cs"];
m4_206 [label="writer.WriteEndArray()", span="383-383", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongJsonArray()", file="JsonSerializerTest.cs"];
m4_203 [label="i < valueCount", span="379-379", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongJsonArray()", file="JsonSerializerTest.cs"];
m4_200 [label="JsonTextWriter writer = new JsonTextWriter(sw)", span="377-377", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongJsonArray()", file="JsonSerializerTest.cs"];
m4_202 [label="int i = 0", span="379-379", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongJsonArray()", file="JsonSerializerTest.cs"];
m4_205 [label="i++", span="379-379", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongJsonArray()", file="JsonSerializerTest.cs"];
m4_204 [label="writer.WriteValue(i)", span="381-381", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongJsonArray()", file="JsonSerializerTest.cs"];
m4_201 [label="writer.WriteStartArray()", span="378-378", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongJsonArray()", file="JsonSerializerTest.cs"];
m4_217 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongJsonArray()", span="373-373", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongJsonArray()", file="JsonSerializerTest.cs"];
m4_533 [label="Entry System.Convert.ToChar(string)", span="0-0", cluster="System.Convert.ToChar(string)", file="JsonSerializerTest.cs"];
m4_26 [label="JToken next = t.Next", span="104-104", cluster="Newtonsoft.Json.Linq.JTokenReader.ReadOver(Newtonsoft.Json.Linq.JToken)", file="JsonSerializerTest.cs"];
m4_473 [label="Entry Newtonsoft.Json.JsonWriter.WriteStartArray()", span="256-256", cluster="Newtonsoft.Json.JsonWriter.WriteStartArray()", file="JsonSerializerTest.cs"];
m4_183 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.NullTextReader()", span="349-349", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullTextReader()", file="JsonSerializerTest.cs"];
m4_184 [label="new JsonTextReader(null)", span="351-351", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullTextReader()", file="JsonSerializerTest.cs"];
m4_185 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.NullTextReader()", span="349-349", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullTextReader()", file="JsonSerializerTest.cs"];
m4_54 [label="reader.SetCharBuffer(new char[2])", span="143-143", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Text()", file="JsonSerializerTest.cs", color=green, community=0];
m4_10 [label="CurrentState != State.Start", span="74-74", cluster="Newtonsoft.Json.Linq.JTokenReader.Read()", file="JsonSerializerTest.cs"];
m4_4 [label="Entry Unk.nameof", span="", cluster="Unk.nameof", file="JsonSerializerTest.cs"];
m4_9 [label="Entry Newtonsoft.Json.Linq.JTokenReader.Read()", span="72-72", cluster="Newtonsoft.Json.Linq.JTokenReader.Read()", file="JsonSerializerTest.cs"];
m4_11 [label="_current == null", span="76-76", cluster="Newtonsoft.Json.Linq.JTokenReader.Read()", file="JsonSerializerTest.cs"];
m4_255 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNull()", span="446-446", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNull()", file="JsonSerializerTest.cs"];
m4_264 [label="Assert.AreEqual(JsonToken.Null, reader.TokenType)", span="476-476", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNull()", file="JsonSerializerTest.cs"];
m4_257 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="467-467", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNull()", file="JsonSerializerTest.cs"];
m4_261 [label="reader.Read()", span="472-472", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNull()", file="JsonSerializerTest.cs"];
m4_263 [label="reader.Read()", span="475-475", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNull()", file="JsonSerializerTest.cs"];
m4_258 [label="reader.SetCharBuffer(new char[129])", span="468-468", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNull()", file="JsonSerializerTest.cs"];
m4_256 [label="string json = @''[\r\n  {\r\n    ''''$id'''': ''''1'''',\r\n    ''''Name'''': ''''e1'''',\r\n    ''''Manager'''': null\r\n  },\r\n  {\r\n    ''''$id'''': ''''2'''',\r\n    ''''Name'''': ''''e2'''',\r\n    ''''Manager'''': null\r\n  },\r\n  {\r\n    ''''$ref'''': ''''1''''\r\n  },\r\n  {\r\n    ''''$ref'''': ''''2''''\r\n  }\r\n]''", span="448-465", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNull()", file="JsonSerializerTest.cs"];
m4_260 [label="i < 15", span="470-470", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNull()", file="JsonSerializerTest.cs"];
m4_262 [label="i++", span="470-470", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNull()", file="JsonSerializerTest.cs"];
m4_259 [label="int i = 0", span="470-470", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNull()", file="JsonSerializerTest.cs"];
m4_265 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNull()", span="446-446", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNull()", file="JsonSerializerTest.cs"];
m4_788 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetIsoDate()", span="1359-1359", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetIsoDate()", file="JsonSerializerTest.cs"];
m4_791 [label="Assert.IsTrue(reader.Read())", span="1365-1365", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetIsoDate()", file="JsonSerializerTest.cs"];
m4_793 [label="Assert.IsTrue(reader.Read())", span="1368-1368", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetIsoDate()", file="JsonSerializerTest.cs"];
m4_799 [label="Assert.IsTrue(reader.Read())", span="1376-1376", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetIsoDate()", file="JsonSerializerTest.cs"];
m4_792 [label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="1366-1366", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetIsoDate()", file="JsonSerializerTest.cs"];
m4_794 [label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="1369-1369", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetIsoDate()", file="JsonSerializerTest.cs"];
m4_796 [label="Assert.AreEqual(JsonToken.Date, reader.TokenType)", span="1372-1372", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetIsoDate()", file="JsonSerializerTest.cs"];
m4_797 [label="Assert.AreEqual(typeof(DateTimeOffset), reader.ValueType)", span="1373-1373", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetIsoDate()", file="JsonSerializerTest.cs"];
m4_798 [label="Assert.AreEqual(new DateTimeOffset(new DateTime(2011, 8, 1, 21, 25, 0, DateTimeKind.Utc), TimeSpan.Zero), reader.Value)", span="1374-1374", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetIsoDate()", file="JsonSerializerTest.cs"];
m4_800 [label="Assert.AreEqual(JsonToken.EndObject, reader.TokenType)", span="1377-1377", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetIsoDate()", file="JsonSerializerTest.cs"];
m4_790 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="1363-1363", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetIsoDate()", file="JsonSerializerTest.cs"];
m4_795 [label="reader.ReadAsDateTimeOffset()", span="1371-1371", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetIsoDate()", file="JsonSerializerTest.cs"];
m4_789 [label="string json = @''{''''Offset'''':''''2011-08-01T21:25Z''''}''", span="1361-1361", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetIsoDate()", file="JsonSerializerTest.cs"];
m4_801 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetIsoDate()", span="1359-1359", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetIsoDate()", file="JsonSerializerTest.cs"];
m4_474 [label="Entry Newtonsoft.Json.JsonWriter.WriteValue(bool)", span="741-741", cluster="Newtonsoft.Json.JsonWriter.WriteValue(bool)", file="JsonSerializerTest.cs"];
m4_722 [label="Entry System.DateTime.DateTime(int, int, int)", span="0-0", cluster="System.DateTime.DateTime(int, int, int)", file="JsonSerializerTest.cs"];
m4_967 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIncompleteCommentSeperator()", span="1659-1659", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIncompleteCommentSeperator()", file="JsonSerializerTest.cs"];
m4_968 [label="JsonTextReader reader = new JsonTextReader(new StringReader(''true/''))", span="1661-1661", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIncompleteCommentSeperator()", file="JsonSerializerTest.cs"];
m4_969 [label="reader.Read()", span="1663-1663", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIncompleteCommentSeperator()", file="JsonSerializerTest.cs"];
m4_970 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIncompleteCommentSeperator()", span="1659-1659", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIncompleteCommentSeperator()", file="JsonSerializerTest.cs"];
m4_35 [label="Assert.IsTrue(reader.Read())", span="103-103", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", file="JsonSerializerTest.cs", color=green, community=0];
m4_37 [label="Assert.IsTrue(reader.Read())", span="106-106", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", file="JsonSerializerTest.cs", color=green, community=0];
m4_38 [label="Assert.AreEqual(''hi'', reader.Value)", span="107-107", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", file="JsonSerializerTest.cs", color=green, community=0];
m4_39 [label="Assert.IsTrue(reader.Read())", span="109-109", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", file="JsonSerializerTest.cs", color=green, community=0];
m4_40 [label="Assert.AreEqual(JsonToken.EndConstructor, reader.TokenType)", span="110-110", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", file="JsonSerializerTest.cs", color=green, community=0];
m4_780 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.UnclosedComment()", span="1344-1344", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnclosedComment()", file="JsonSerializerTest.cs"];
m4_781 [label="JsonTextReader reader = new JsonTextReader(new StringReader(@''/* sdf''))", span="1346-1346", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnclosedComment()", file="JsonSerializerTest.cs"];
m4_782 [label="reader.Read()", span="1347-1347", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnclosedComment()", file="JsonSerializerTest.cs"];
m4_783 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.UnclosedComment()", span="1344-1344", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnclosedComment()", file="JsonSerializerTest.cs"];
m4_772 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.MatchWithWrongCharacters()", span="1328-1328", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MatchWithWrongCharacters()", file="JsonSerializerTest.cs"];
m4_773 [label="JsonTextReader reader = new JsonTextReader(new StringReader(@''nulz''))", span="1330-1330", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MatchWithWrongCharacters()", file="JsonSerializerTest.cs"];
m4_774 [label="reader.Read()", span="1331-1331", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MatchWithWrongCharacters()", file="JsonSerializerTest.cs"];
m4_775 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.MatchWithWrongCharacters()", span="1328-1328", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MatchWithWrongCharacters()", file="JsonSerializerTest.cs"];
m4_784 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.BadCommentStart()", span="1352-1352", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.BadCommentStart()", file="JsonSerializerTest.cs"];
m4_785 [label="JsonTextReader reader = new JsonTextReader(new StringReader(@''/sdf''))", span="1354-1354", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.BadCommentStart()", file="JsonSerializerTest.cs"];
m4_786 [label="reader.Read()", span="1355-1355", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.BadCommentStart()", file="JsonSerializerTest.cs"];
m4_787 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.BadCommentStart()", span="1352-1352", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.BadCommentStart()", file="JsonSerializerTest.cs"];
m4_51 [label="return null;", span="140-140", cluster="Newtonsoft.Json.Linq.JTokenReader.GetEndToken(Newtonsoft.Json.Linq.JContainer)", file="JsonSerializerTest.cs"];
m4_52 [label="throw MiscellaneousUtils.CreateArgumentOutOfRangeException(''Type'', c.Type, ''Unexpected JContainer type.'');", span="142-142", cluster="Newtonsoft.Json.Linq.JTokenReader.GetEndToken(Newtonsoft.Json.Linq.JContainer)", color=green, community=0, file="JsonSerializerTest.cs"];
m4_53 [label="Exit Newtonsoft.Json.Linq.JTokenReader.GetEndToken(Newtonsoft.Json.Linq.JContainer)", span="129-129", cluster="Newtonsoft.Json.Linq.JTokenReader.GetEndToken(Newtonsoft.Json.Linq.JContainer)", color=green, community=0, file="JsonSerializerTest.cs"];
m4_723 [label="Entry System.TimeSpan.FromHours(double)", span="0-0", cluster="System.TimeSpan.FromHours(double)", file="JsonSerializerTest.cs"];
m4_938 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ParseConstructorWithUnexpectedCharacter()", span="1611-1611", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseConstructorWithUnexpectedCharacter()", file="JsonSerializerTest.cs"];
m4_940 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="1614-1614", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseConstructorWithUnexpectedCharacter()", file="JsonSerializerTest.cs"];
m4_941 [label="reader.Read()", span="1616-1616", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseConstructorWithUnexpectedCharacter()", file="JsonSerializerTest.cs"];
m4_939 [label="string json = ''new Date !''", span="1613-1613", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseConstructorWithUnexpectedCharacter()", file="JsonSerializerTest.cs"];
m4_942 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ParseConstructorWithUnexpectedCharacter()", span="1611-1611", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseConstructorWithUnexpectedCharacter()", file="JsonSerializerTest.cs"];
m4_303 [label="Entry System.Convert.ToBase64String(byte[])", span="0-0", cluster="System.Convert.ToBase64String(byte[])", file="JsonSerializerTest.cs"];
m4_266 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNewLine()", span="480-480", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNewLine()", file="JsonSerializerTest.cs"];
m4_272 [label="Assert.IsTrue(reader.Read())", span="502-502", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNewLine()", file="JsonSerializerTest.cs"];
m4_274 [label="Assert.IsTrue(reader.Read())", span="505-505", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNewLine()", file="JsonSerializerTest.cs"];
m4_275 [label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="506-506", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNewLine()", file="JsonSerializerTest.cs"];
m4_276 [label="Assert.AreEqual(''type'', reader.Value)", span="507-507", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNewLine()", file="JsonSerializerTest.cs"];
m4_268 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="497-497", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNewLine()", file="JsonSerializerTest.cs"];
m4_269 [label="reader.SetCharBuffer(new char[129])", span="498-498", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNewLine()", file="JsonSerializerTest.cs"];
m4_271 [label="i < 14", span="500-500", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNewLine()", file="JsonSerializerTest.cs"];
m4_273 [label="i++", span="500-500", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNewLine()", file="JsonSerializerTest.cs"];
m4_267 [label="string json = @''\r\n{\r\n  ''''description'''': ''''A person'''',\r\n  ''''type'''': ''''object'''',\r\n  ''''properties'''':\r\n  {\r\n    ''''name'''': {''''type'''':''''string''''},\r\n    ''''hobbies'''': {\r\n      ''''type'''': ''''array'''',\r\n      ''''items'''': {''''type'''':''''string''''}\r\n    }\r\n  }\r\n}\r\n''", span="482-495", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNewLine()", file="JsonSerializerTest.cs"];
m4_270 [label="int i = 0", span="500-500", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNewLine()", file="JsonSerializerTest.cs"];
m4_277 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNewLine()", span="480-480", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNewLine()", file="JsonSerializerTest.cs"];
m4_278 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNullTerminatorStrings()", span="511-511", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNullTerminatorStrings()", file="JsonSerializerTest.cs"];
m4_280 [label="Assert.IsTrue(reader.Read())", span="514-514", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNullTerminatorStrings()", file="JsonSerializerTest.cs"];
m4_281 [label="Assert.AreEqual(''h\0i'', reader.Value)", span="516-516", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNullTerminatorStrings()", file="JsonSerializerTest.cs"];
m4_279 [label="JsonReader reader = new JsonTextReader(new StringReader('''h\0i'''))", span="513-513", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNullTerminatorStrings()", file="JsonSerializerTest.cs"];
m4_282 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNullTerminatorStrings()", span="511-511", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNullTerminatorStrings()", file="JsonSerializerTest.cs"];
m4_476 [label="Entry Newtonsoft.Json.JsonWriter.WritePropertyName(string)", span="292-292", cluster="Newtonsoft.Json.JsonWriter.WritePropertyName(string)", file="JsonSerializerTest.cs"];
m4_768 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.MatchWithInsufficentCharacters()", span="1320-1320", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MatchWithInsufficentCharacters()", file="JsonSerializerTest.cs"];
m4_769 [label="JsonTextReader reader = new JsonTextReader(new StringReader(@''nul''))", span="1322-1322", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MatchWithInsufficentCharacters()", file="JsonSerializerTest.cs"];
m4_770 [label="reader.Read()", span="1323-1323", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MatchWithInsufficentCharacters()", file="JsonSerializerTest.cs"];
m4_771 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.MatchWithInsufficentCharacters()", span="1320-1320", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MatchWithInsufficentCharacters()", file="JsonSerializerTest.cs"];
m4_836 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimal()", span="1432-1432", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimal()", file="JsonSerializerTest.cs"];
m4_839 [label="Assert.IsTrue(reader.Read())", span="1438-1438", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimal()", file="JsonSerializerTest.cs"];
m4_841 [label="Assert.IsTrue(reader.Read())", span="1441-1441", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimal()", file="JsonSerializerTest.cs"];
m4_847 [label="Assert.IsTrue(reader.Read())", span="1449-1449", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimal()", file="JsonSerializerTest.cs"];
m4_840 [label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="1439-1439", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimal()", file="JsonSerializerTest.cs"];
m4_842 [label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="1442-1442", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimal()", file="JsonSerializerTest.cs"];
m4_844 [label="Assert.AreEqual(JsonToken.Float, reader.TokenType)", span="1445-1445", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimal()", file="JsonSerializerTest.cs"];
m4_845 [label="Assert.AreEqual(typeof(decimal), reader.ValueType)", span="1446-1446", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimal()", file="JsonSerializerTest.cs"];
m4_848 [label="Assert.AreEqual(JsonToken.EndObject, reader.TokenType)", span="1450-1450", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimal()", file="JsonSerializerTest.cs"];
m4_846 [label="Assert.AreEqual(-79228162514264300000000000000m, d)", span="1447-1447", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimal()", file="JsonSerializerTest.cs"];
m4_838 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="1436-1436", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimal()", file="JsonSerializerTest.cs"];
m4_843 [label="decimal? d = reader.ReadAsDecimal()", span="1444-1444", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimal()", file="JsonSerializerTest.cs"];
m4_837 [label="string json = @''{''''decimal'''':-7.92281625142643E+28}''", span="1434-1434", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimal()", file="JsonSerializerTest.cs"];
m4_849 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimal()", span="1432-1432", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimal()", file="JsonSerializerTest.cs"];
m4_17 [label="Entry Unk.IsFalse", span="", cluster="Unk.IsFalse", file="JsonSerializerTest.cs"];
m4_15 [label="Entry Unk.IsTrue", span="", cluster="Unk.IsTrue", file="JsonSerializerTest.cs"];
m4_18 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.YahooFinance()", span="58-58", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.YahooFinance()", file="JsonSerializerTest.cs"];
m4_19 [label="string input = @''{\r\n''''matches'''' : [\r\n{''''t'''':''''C'''', ''''n'''':''''Citigroup Inc.'''', ''''e'''':''''NYSE'''', ''''id'''':''''662713''''}\r\n,{''''t'''':''''CHL'''', ''''n'''':''''China Mobile Ltd. (ADR)'''', ''''e'''':''''NYSE'''', ''''id'''':''''660998''''}\r\n,{''''t'''':''''PTR'''', ''''n'''':''''PetroChina Company Limited (ADR)'''', ''''e'''':''''NYSE'''', ''''id'''':''''664536''''}\r\n,{''''t'''':''''RIO'''', ''''n'''':''''Companhia Vale do Rio Doce (ADR)'''', ''''e'''':''''NYSE'''', ''''id'''':''''671472''''}\r\n,{''''t'''':''''RIOPR'''', ''''n'''':''''Companhia Vale do Rio Doce (ADR)'''', ''''e'''':''''NYSE'''', ''''id'''':''''3512643''''}\r\n,{''''t'''':''''CSCO'''', ''''n'''':''''Cisco Systems, Inc.'''', ''''e'''':''''NASDAQ'''', ''''id'''':''''99624''''}\r\n,{''''t'''':''''CVX'''', ''''n'''':''''Chevron Corporation'''', ''''e'''':''''NYSE'''', ''''id'''':''''667226''''}\r\n,{''''t'''':''''TM'''', ''''n'''':''''Toyota Motor Corporation (ADR)'''', ''''e'''':''''NYSE'''', ''''id'''':''''655880''''}\r\n,{''''t'''':''''JPM'''', ''''n'''':''''JPMorgan Chase \\x26 Co.'''', ''''e'''':''''NYSE'''', ''''id'''':''''665639''''}\r\n,{''''t'''':''''COP'''', ''''n'''':''''ConocoPhillips'''', ''''e'''':''''NYSE'''', ''''id'''':''''1691168''''}\r\n,{''''t'''':''''LFC'''', ''''n'''':''''China Life Insurance Company Ltd. (ADR)'''', ''''e'''':''''NYSE'''', ''''id'''':''''688679''''}\r\n,{''''t'''':''''NOK'''', ''''n'''':''''Nokia Corporation (ADR)'''', ''''e'''':''''NYSE'''', ''''id'''':''''657729''''}\r\n,{''''t'''':''''KO'''', ''''n'''':''''The Coca-Cola Company'''', ''''e'''':''''NYSE'''', ''''id'''':''''6550''''}\r\n,{''''t'''':''''VZ'''', ''''n'''':''''Verizon Communications Inc.'''', ''''e'''':''''NYSE'''', ''''id'''':''''664887''''}\r\n,{''''t'''':''''AMX'''', ''''n'''':''''America Movil S.A.B de C.V. (ADR)'''', ''''e'''':''''NYSE'''', ''''id'''':''''665834''''}],\r\n''''all'''' : false\r\n}\r\n''", span="60-79", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.YahooFinance()", file="JsonSerializerTest.cs"];
m4_20 [label="JsonReader jsonReader = new JsonTextReader(new StringReader(input))", span="81-81", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.YahooFinance()", file="JsonSerializerTest.cs"];
m4_404 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingEscapedStrings()", span="723-723", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingEscapedStrings()", file="JsonSerializerTest.cs"];
m4_409 [label="jsonReader.Read()", span="733-733", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingEscapedStrings()", file="JsonSerializerTest.cs"];
m4_412 [label="jsonReader.Read()", span="737-737", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingEscapedStrings()", file="JsonSerializerTest.cs"];
m4_415 [label="jsonReader.Read()", span="741-741", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingEscapedStrings()", file="JsonSerializerTest.cs"];
m4_420 [label="jsonReader.Read()", span="747-747", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingEscapedStrings()", file="JsonSerializerTest.cs"];
m4_408 [label="Assert.AreEqual(0, jsonReader.Depth)", span="731-731", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingEscapedStrings()", file="JsonSerializerTest.cs"];
m4_410 [label="Assert.AreEqual(JsonToken.StartObject, jsonReader.TokenType)", span="734-734", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingEscapedStrings()", file="JsonSerializerTest.cs"];
m4_411 [label="Assert.AreEqual(0, jsonReader.Depth)", span="735-735", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingEscapedStrings()", file="JsonSerializerTest.cs"];
m4_413 [label="Assert.AreEqual(JsonToken.PropertyName, jsonReader.TokenType)", span="738-738", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingEscapedStrings()", file="JsonSerializerTest.cs"];
m4_414 [label="Assert.AreEqual(1, jsonReader.Depth)", span="739-739", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingEscapedStrings()", file="JsonSerializerTest.cs"];
m4_416 [label="Assert.AreEqual(jsonReader.TokenType, JsonToken.String)", span="742-742", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingEscapedStrings()", file="JsonSerializerTest.cs"];
m4_417 [label="Assert.AreEqual(''Purple\r \n monkey's:\tdishwasher'', jsonReader.Value)", span="743-743", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingEscapedStrings()", file="JsonSerializerTest.cs"];
m4_418 [label="Assert.AreEqual('\'', jsonReader.QuoteChar)", span="744-744", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingEscapedStrings()", file="JsonSerializerTest.cs"];
m4_419 [label="Assert.AreEqual(1, jsonReader.Depth)", span="745-745", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingEscapedStrings()", file="JsonSerializerTest.cs"];
m4_421 [label="Assert.AreEqual(JsonToken.EndObject, jsonReader.TokenType)", span="748-748", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingEscapedStrings()", file="JsonSerializerTest.cs"];
m4_422 [label="Assert.AreEqual(0, jsonReader.Depth)", span="749-749", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingEscapedStrings()", file="JsonSerializerTest.cs"];
m4_407 [label="JsonReader jsonReader = new JsonTextReader(sr)", span="729-729", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingEscapedStrings()", file="JsonSerializerTest.cs"];
m4_406 [label="StringReader sr = new StringReader(input)", span="727-727", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingEscapedStrings()", file="JsonSerializerTest.cs"];
m4_405 [label="string input = ''{value:'Purple\\r \\n monkey\\'s:\\tdishwasher'}''", span="725-725", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingEscapedStrings()", file="JsonSerializerTest.cs"];
m4_423 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingEscapedStrings()", span="723-723", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingEscapedStrings()", file="JsonSerializerTest.cs"];
m4_610 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumber()", span="1051-1051", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumber()", file="JsonSerializerTest.cs"];
m4_613 [label="Assert.IsTrue(jsonReader.Read())", span="1056-1056", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumber()", file="JsonSerializerTest.cs"];
m4_615 [label="Assert.IsTrue(jsonReader.Read())", span="1059-1059", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumber()", file="JsonSerializerTest.cs"];
m4_618 [label="Assert.IsTrue(jsonReader.Read())", span="1063-1063", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumber()", file="JsonSerializerTest.cs"];
m4_621 [label="Assert.IsTrue(jsonReader.Read())", span="1067-1067", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumber()", file="JsonSerializerTest.cs"];
m4_624 [label="Assert.IsTrue(jsonReader.Read())", span="1071-1071", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumber()", file="JsonSerializerTest.cs"];
m4_614 [label="Assert.AreEqual(JsonToken.StartArray, jsonReader.TokenType)", span="1057-1057", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumber()", file="JsonSerializerTest.cs"];
m4_616 [label="Assert.AreEqual(JsonToken.Integer, jsonReader.TokenType)", span="1060-1060", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumber()", file="JsonSerializerTest.cs"];
m4_617 [label="Assert.AreEqual(250, jsonReader.Value)", span="1061-1061", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumber()", file="JsonSerializerTest.cs"];
m4_619 [label="Assert.AreEqual(JsonToken.Integer, jsonReader.TokenType)", span="1064-1064", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumber()", file="JsonSerializerTest.cs"];
m4_620 [label="Assert.AreEqual(250, jsonReader.Value)", span="1065-1065", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumber()", file="JsonSerializerTest.cs"];
m4_622 [label="Assert.AreEqual(JsonToken.Integer, jsonReader.TokenType)", span="1068-1068", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumber()", file="JsonSerializerTest.cs"];
m4_623 [label="Assert.AreEqual(250, jsonReader.Value)", span="1069-1069", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumber()", file="JsonSerializerTest.cs"];
m4_625 [label="Assert.AreEqual(JsonToken.EndArray, jsonReader.TokenType)", span="1072-1072", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumber()", file="JsonSerializerTest.cs"];
m4_612 [label="JsonTextReader jsonReader = new JsonTextReader(s)", span="1054-1054", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumber()", file="JsonSerializerTest.cs"];
m4_611 [label="StringReader s = new StringReader(@''[0372, 0xFA, 0XFA]'')", span="1053-1053", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumber()", file="JsonSerializerTest.cs"];
m4_626 [label="Assert.IsFalse(jsonReader.Read())", span="1074-1074", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumber()", file="JsonSerializerTest.cs"];
m4_627 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumber()", span="1051-1051", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumber()", file="JsonSerializerTest.cs"];
m4_24 [label="t == _root", span="99-99", cluster="Newtonsoft.Json.Linq.JTokenReader.ReadOver(Newtonsoft.Json.Linq.JToken)", file="JsonSerializerTest.cs"];
m4_628 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBadCharInArray()", span="1079-1079", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBadCharInArray()", file="JsonSerializerTest.cs"];
m4_629 [label="JsonTextReader reader = new JsonTextReader(new StringReader(@''[}''))", span="1081-1081", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBadCharInArray()", file="JsonSerializerTest.cs"];
m4_630 [label="reader.Read()", span="1083-1083", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBadCharInArray()", file="JsonSerializerTest.cs"];
m4_631 [label="reader.Read()", span="1084-1084", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBadCharInArray()", file="JsonSerializerTest.cs"];
m4_632 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBadCharInArray()", span="1079-1079", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBadCharInArray()", file="JsonSerializerTest.cs"];
m4_534 [label="Entry System.Convert.ToInt32(char)", span="0-0", cluster="System.Convert.ToInt32(char)", file="JsonSerializerTest.cs"];
m4_535 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", span="940-940", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSerializerTest.cs"];
m4_538 [label="jsonReader.Read()", span="947-947", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSerializerTest.cs"];
m4_540 [label="jsonReader.Read()", span="950-950", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSerializerTest.cs"];
m4_543 [label="jsonReader.Read()", span="954-954", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSerializerTest.cs"];
m4_546 [label="jsonReader.Read()", span="958-958", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSerializerTest.cs"];
m4_549 [label="jsonReader.Read()", span="962-962", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSerializerTest.cs"];
m4_552 [label="jsonReader.Read()", span="966-966", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSerializerTest.cs"];
m4_555 [label="jsonReader.Read()", span="970-970", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSerializerTest.cs"];
m4_558 [label="jsonReader.Read()", span="974-974", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSerializerTest.cs"];
m4_561 [label="jsonReader.Read()", span="978-978", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSerializerTest.cs"];
m4_564 [label="jsonReader.Read()", span="982-982", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSerializerTest.cs"];
m4_567 [label="jsonReader.Read()", span="986-986", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSerializerTest.cs"];
m4_570 [label="jsonReader.Read()", span="990-990", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSerializerTest.cs"];
m4_573 [label="jsonReader.Read()", span="994-994", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSerializerTest.cs"];
m4_576 [label="jsonReader.Read()", span="998-998", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSerializerTest.cs"];
m4_579 [label="jsonReader.Read()", span="1002-1002", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSerializerTest.cs"];
m4_582 [label="jsonReader.Read()", span="1006-1006", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSerializerTest.cs"];
m4_585 [label="jsonReader.Read()", span="1010-1010", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSerializerTest.cs"];
m4_539 [label="Assert.AreEqual(JsonToken.StartArray, jsonReader.TokenType)", span="948-948", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSerializerTest.cs"];
m4_541 [label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="951-951", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSerializerTest.cs"];
m4_542 [label="Assert.AreEqual(0.0, jsonReader.Value)", span="952-952", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSerializerTest.cs"];
m4_544 [label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="955-955", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSerializerTest.cs"];
m4_545 [label="Assert.AreEqual(0.0, jsonReader.Value)", span="956-956", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSerializerTest.cs"];
m4_547 [label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="959-959", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSerializerTest.cs"];
m4_548 [label="Assert.AreEqual(0.1, jsonReader.Value)", span="960-960", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSerializerTest.cs"];
m4_550 [label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="963-963", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSerializerTest.cs"];
m4_551 [label="Assert.AreEqual(1.0, jsonReader.Value)", span="964-964", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSerializerTest.cs"];
m4_553 [label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="967-967", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSerializerTest.cs"];
m4_554 [label="Assert.AreEqual(1.000001, jsonReader.Value)", span="968-968", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSerializerTest.cs"];
m4_556 [label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="971-971", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSerializerTest.cs"];
m4_557 [label="Assert.AreEqual(1E-06, jsonReader.Value)", span="972-972", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSerializerTest.cs"];
m4_559 [label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="975-975", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSerializerTest.cs"];
m4_560 [label="Assert.AreEqual(4.94065645841247E-324, jsonReader.Value)", span="976-976", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSerializerTest.cs"];
m4_562 [label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="979-979", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSerializerTest.cs"];
m4_563 [label="Assert.AreEqual(double.PositiveInfinity, jsonReader.Value)", span="980-980", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSerializerTest.cs"];
m4_565 [label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="983-983", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSerializerTest.cs"];
m4_566 [label="Assert.AreEqual(double.NegativeInfinity, jsonReader.Value)", span="984-984", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSerializerTest.cs"];
m4_568 [label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="987-987", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSerializerTest.cs"];
m4_569 [label="Assert.AreEqual(double.NaN, jsonReader.Value)", span="988-988", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSerializerTest.cs"];
m4_571 [label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="991-991", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSerializerTest.cs"];
m4_572 [label="Assert.AreEqual(double.MaxValue, jsonReader.Value)", span="992-992", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSerializerTest.cs"];
m4_574 [label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="995-995", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSerializerTest.cs"];
m4_575 [label="Assert.AreEqual(double.MinValue, jsonReader.Value)", span="996-996", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSerializerTest.cs"];
m4_577 [label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="999-999", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSerializerTest.cs"];
m4_578 [label="Assert.AreEqual(double.PositiveInfinity, jsonReader.Value)", span="1000-1000", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSerializerTest.cs"];
m4_580 [label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="1003-1003", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSerializerTest.cs"];
m4_581 [label="Assert.AreEqual(double.NegativeInfinity, jsonReader.Value)", span="1004-1004", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSerializerTest.cs"];
m4_583 [label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="1007-1007", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSerializerTest.cs"];
m4_584 [label="Assert.AreEqual(double.NaN, jsonReader.Value)", span="1008-1008", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSerializerTest.cs"];
m4_586 [label="Assert.AreEqual(JsonToken.EndArray, jsonReader.TokenType)", span="1011-1011", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSerializerTest.cs"];
m4_537 [label="JsonReader jsonReader = new JsonTextReader(new StringReader(json))", span="945-945", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSerializerTest.cs"];
m4_536 [label="string json =\r\n        @''[0.0,0.0,0.1,1.0,1.000001,1E-06,4.94065645841247E-324,Infinity,-Infinity,NaN,1.7976931348623157E+308,-1.7976931348623157E+308,Infinity,-Infinity,NaN]''", span="942-943", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSerializerTest.cs"];
m4_587 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", span="940-940", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSerializerTest.cs"];
m4_224 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", span="399-399", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="JsonSerializerTest.cs"];
m4_227 [label="Assert.IsTrue(reader.Read())", span="404-404", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="JsonSerializerTest.cs"];
m4_229 [label="Assert.IsTrue(reader.Read())", span="407-407", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="JsonSerializerTest.cs"];
m4_231 [label="Assert.IsTrue(reader.Read())", span="410-410", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="JsonSerializerTest.cs"];
m4_233 [label="Assert.IsTrue(reader.Read())", span="413-413", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="JsonSerializerTest.cs"];
m4_235 [label="Assert.IsTrue(reader.Read())", span="416-416", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="JsonSerializerTest.cs"];
m4_237 [label="Assert.IsTrue(reader.Read())", span="419-419", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="JsonSerializerTest.cs"];
m4_239 [label="Assert.IsTrue(reader.Read())", span="422-422", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="JsonSerializerTest.cs"];
m4_241 [label="Assert.IsTrue(reader.Read())", span="425-425", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="JsonSerializerTest.cs"];
m4_243 [label="Assert.IsTrue(reader.Read())", span="428-428", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="JsonSerializerTest.cs"];
m4_245 [label="Assert.IsTrue(reader.Read())", span="431-431", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="JsonSerializerTest.cs"];
m4_247 [label="Assert.IsTrue(reader.Read())", span="434-434", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="JsonSerializerTest.cs"];
m4_250 [label="Assert.IsTrue(reader.Read())", span="438-438", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="JsonSerializerTest.cs"];
m4_228 [label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="405-405", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="JsonSerializerTest.cs"];
m4_230 [label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="408-408", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="JsonSerializerTest.cs"];
m4_232 [label="Assert.AreEqual(JsonToken.StartArray, reader.TokenType)", span="411-411", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="JsonSerializerTest.cs"];
m4_234 [label="Assert.AreEqual(JsonToken.Integer, reader.TokenType)", span="414-414", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="JsonSerializerTest.cs"];
m4_236 [label="Assert.AreEqual(JsonToken.String, reader.TokenType)", span="417-417", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="JsonSerializerTest.cs"];
m4_238 [label="Assert.AreEqual(JsonToken.Null, reader.TokenType)", span="420-420", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="JsonSerializerTest.cs"];
m4_240 [label="Assert.AreEqual(JsonToken.EndArray, reader.TokenType)", span="423-423", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="JsonSerializerTest.cs"];
m4_242 [label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="426-426", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="JsonSerializerTest.cs"];
m4_244 [label="Assert.AreEqual(JsonToken.Boolean, reader.TokenType)", span="429-429", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="JsonSerializerTest.cs"];
m4_246 [label="Assert.AreEqual(JsonToken.EndObject, reader.TokenType)", span="432-432", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="JsonSerializerTest.cs"];
m4_248 [label="Assert.AreEqual(JsonToken.Comment, reader.TokenType)", span="435-435", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="JsonSerializerTest.cs"];
m4_249 [label="Assert.AreEqual(''\0sd\0f\0'', reader.Value)", span="436-436", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="JsonSerializerTest.cs"];
m4_251 [label="Assert.AreEqual(JsonToken.Comment, reader.TokenType)", span="439-439", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="JsonSerializerTest.cs"];
m4_252 [label="Assert.AreEqual(''\0sd\0f\0'', reader.Value)", span="440-440", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="JsonSerializerTest.cs"];
m4_226 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="402-402", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="JsonSerializerTest.cs"];
m4_253 [label="Assert.IsFalse(reader.Read())", span="442-442", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="JsonSerializerTest.cs"];
m4_225 [label="string json = ''\0{\0'\0h\0i\0'\0:\0[\01\0,\0'\0'\0\0,\0null\0]\0,\0do\0:true\0}\0\0/*\0sd\0f\0*/\0/*\0sd\0f\0*/ \0''", span="401-401", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="JsonSerializerTest.cs"];
m4_254 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", span="399-399", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="JsonSerializerTest.cs"];
m4_220 [label="Entry Newtonsoft.Json.JsonTextWriter.WriteStartArray()", span="153-153", cluster="Newtonsoft.Json.JsonTextWriter.WriteStartArray()", file="JsonSerializerTest.cs"];
m4_283 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndOfHex()", span="521-521", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndOfHex()", file="JsonSerializerTest.cs"];
m4_285 [label="reader.Read()", span="524-524", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndOfHex()", file="JsonSerializerTest.cs"];
m4_284 [label="JsonReader reader = new JsonTextReader(new StringReader(@'''h\u123''))", span="523-523", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndOfHex()", file="JsonSerializerTest.cs"];
m4_286 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndOfHex()", span="521-521", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndOfHex()", file="JsonSerializerTest.cs"];
m4_429 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadRandomJson()", span="768-768", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadRandomJson()", file="JsonSerializerTest.cs"];
m4_431 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="792-792", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadRandomJson()", file="JsonSerializerTest.cs"];
m4_432 [label="reader.Read()", span="793-793", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadRandomJson()", file="JsonSerializerTest.cs"];
m4_430 [label="string json = @''[\r\n  true,\r\n  {\r\n    ''''integer'''': 99,\r\n    ''''string'''': ''''how now brown cow?'''',\r\n    ''''array'''': [\r\n      0,\r\n      1,\r\n      2,\r\n      3,\r\n      4,\r\n      {\r\n        ''''decimal'''': 990.00990099\r\n      },\r\n      5\r\n    ]\r\n  },\r\n  ''''This is a string.'''',\r\n  null,\r\n  null\r\n]''", span="770-790", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadRandomJson()", file="JsonSerializerTest.cs"];
m4_433 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadRandomJson()", span="768-768", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadRandomJson()", file="JsonSerializerTest.cs"];
m4_877 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBufferOnEndComment()", span="1504-1504", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBufferOnEndComment()", file="JsonSerializerTest.cs"];
m4_883 [label="Assert.IsTrue(reader.Read())", span="1522-1522", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBufferOnEndComment()", file="JsonSerializerTest.cs"];
m4_885 [label="Assert.IsTrue(reader.Read())", span="1525-1525", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBufferOnEndComment()", file="JsonSerializerTest.cs"];
m4_886 [label="Assert.AreEqual(JsonToken.Comment, reader.TokenType)", span="1526-1526", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBufferOnEndComment()", file="JsonSerializerTest.cs"];
m4_879 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="1517-1517", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBufferOnEndComment()", file="JsonSerializerTest.cs"];
m4_887 [label="Assert.IsFalse(reader.Read())", span="1528-1528", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBufferOnEndComment()", file="JsonSerializerTest.cs"];
m4_880 [label="reader.SetCharBuffer(new char[5])", span="1518-1518", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBufferOnEndComment()", file="JsonSerializerTest.cs"];
m4_882 [label="i < 26", span="1520-1520", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBufferOnEndComment()", file="JsonSerializerTest.cs"];
m4_884 [label="i++", span="1520-1520", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBufferOnEndComment()", file="JsonSerializerTest.cs"];
m4_878 [label="string json = @''/*comment*/ { /*comment*/\r\n        ''''Name'''': /*comment*/ ''''Apple'''' /*comment*/, /*comment*/\r\n        ''''ExpiryDate'''': ''''\/Date(1230422400000)\/'''',\r\n        ''''Price'''': 3.99,\r\n        ''''Sizes'''': /*comment*/ [ /*comment*/\r\n          ''''Small'''', /*comment*/\r\n          ''''Medium'''' /*comment*/,\r\n          /*comment*/ ''''Large''''\r\n        /*comment*/ ] /*comment*/\r\n      } /*comment*/''", span="1506-1515", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBufferOnEndComment()", file="JsonSerializerTest.cs"];
m4_881 [label="int i = 0", span="1520-1520", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBufferOnEndComment()", file="JsonSerializerTest.cs"];
m4_888 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBufferOnEndComment()", span="1504-1504", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBufferOnEndComment()", file="JsonSerializerTest.cs"];
m4_27 [label="(next == null || next == t) || t == t.Parent.Last", span="105-105", cluster="Newtonsoft.Json.Linq.JTokenReader.ReadOver(Newtonsoft.Json.Linq.JToken)", file="JsonSerializerTest.cs"];
m4_30 [label="return SetEnd(t.Parent);", span="112-112", cluster="Newtonsoft.Json.Linq.JTokenReader.ReadOver(Newtonsoft.Json.Linq.JToken)", color=green, community=0, file="JsonSerializerTest.cs"];
m4_29 [label="return ReadToEnd();", span="109-109", cluster="Newtonsoft.Json.Linq.JTokenReader.ReadOver(Newtonsoft.Json.Linq.JToken)", file="JsonSerializerTest.cs"];
m4_31 [label="_current = next", span="116-116", cluster="Newtonsoft.Json.Linq.JTokenReader.ReadOver(Newtonsoft.Json.Linq.JToken)", color=green, community=0, file="JsonSerializerTest.cs"];
m4_32 [label="SetToken(_current)", span="117-117", cluster="Newtonsoft.Json.Linq.JTokenReader.ReadOver(Newtonsoft.Json.Linq.JToken)", color=green, community=0, file="JsonSerializerTest.cs"];
m4_33 [label="return true;", span="118-118", cluster="Newtonsoft.Json.Linq.JTokenReader.ReadOver(Newtonsoft.Json.Linq.JToken)", color=green, community=0, file="JsonSerializerTest.cs"];
m4_34 [label="Exit Newtonsoft.Json.Linq.JTokenReader.ReadOver(Newtonsoft.Json.Linq.JToken)", span="97-97", cluster="Newtonsoft.Json.Linq.JTokenReader.ReadOver(Newtonsoft.Json.Linq.JToken)", color=green, community=0, file="JsonSerializerTest.cs"];
m4_42 [label="Entry Newtonsoft.Json.Linq.JTokenReader.GetEndToken(Newtonsoft.Json.Linq.JContainer)", span="129-129", cluster="Newtonsoft.Json.Linq.JTokenReader.GetEndToken(Newtonsoft.Json.Linq.JContainer)", color=green, community=0, file="JsonSerializerTest.cs"];
m4_28 [label="t.Parent == null", span="107-107", cluster="Newtonsoft.Json.Linq.JTokenReader.ReadOver(Newtonsoft.Json.Linq.JToken)", file="JsonSerializerTest.cs"];
m4_43 [label="c.Type", span="131-131", cluster="Newtonsoft.Json.Linq.JTokenReader.GetEndToken(Newtonsoft.Json.Linq.JContainer)", file="JsonSerializerTest.cs"];
m4_766 [label="Entry System.TimeSpan.FromMinutes(double)", span="0-0", cluster="System.TimeSpan.FromMinutes(double)", file="JsonSerializerTest.cs"];
m4_480 [label="Entry Newtonsoft.Json.JsonWriter.WriteEndObject()", span="248-248", cluster="Newtonsoft.Json.JsonWriter.WriteEndObject()", file="JsonSerializerTest.cs"];
m4_482 [label="Entry System.Text.StringBuilder.ToString()", span="0-0", cluster="System.Text.StringBuilder.ToString()", file="JsonSerializerTest.cs"];
m4_287 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndOfControlCharacter()", span="529-529", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndOfControlCharacter()", file="JsonSerializerTest.cs"];
m4_289 [label="reader.Read()", span="532-532", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndOfControlCharacter()", file="JsonSerializerTest.cs"];
m4_288 [label="JsonReader reader = new JsonTextReader(new StringReader(@'''h\''))", span="531-531", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndOfControlCharacter()", file="JsonSerializerTest.cs"];
m4_290 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndOfControlCharacter()", span="529-529", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndOfControlCharacter()", file="JsonSerializerTest.cs"];
m4_186 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndOfString()", span="356-356", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndOfString()", file="JsonSerializerTest.cs"];
m4_188 [label="reader.Read()", span="359-359", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndOfString()", file="JsonSerializerTest.cs"];
m4_187 [label="JsonReader reader = new JsonTextReader(new StringReader('''hi''))", span="358-358", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndOfString()", file="JsonSerializerTest.cs"];
m4_189 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndOfString()", span="356-356", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndOfString()", file="JsonSerializerTest.cs"];
m4_850 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalFrench()", span="1454-1454", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalFrench()", file="JsonSerializerTest.cs"];
m4_854 [label="Assert.IsTrue(reader.Read())", span="1461-1461", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalFrench()", file="JsonSerializerTest.cs"];
m4_856 [label="Assert.IsTrue(reader.Read())", span="1464-1464", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalFrench()", file="JsonSerializerTest.cs"];
m4_862 [label="Assert.IsTrue(reader.Read())", span="1472-1472", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalFrench()", file="JsonSerializerTest.cs"];
m4_855 [label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="1462-1462", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalFrench()", file="JsonSerializerTest.cs"];
m4_857 [label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="1465-1465", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalFrench()", file="JsonSerializerTest.cs"];
m4_859 [label="Assert.AreEqual(JsonToken.Float, reader.TokenType)", span="1468-1468", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalFrench()", file="JsonSerializerTest.cs"];
m4_860 [label="Assert.AreEqual(typeof(decimal), reader.ValueType)", span="1469-1469", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalFrench()", file="JsonSerializerTest.cs"];
m4_863 [label="Assert.AreEqual(JsonToken.EndObject, reader.TokenType)", span="1473-1473", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalFrench()", file="JsonSerializerTest.cs"];
m4_861 [label="Assert.AreEqual(9.99m, d)", span="1470-1470", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalFrench()", file="JsonSerializerTest.cs"];
m4_852 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="1458-1458", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalFrench()", file="JsonSerializerTest.cs"];
m4_853 [label="reader.Culture = new CultureInfo(''fr-FR'')", span="1459-1459", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalFrench()", file="JsonSerializerTest.cs"];
m4_858 [label="decimal? d = reader.ReadAsDecimal()", span="1467-1467", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalFrench()", file="JsonSerializerTest.cs"];
m4_851 [label="string json = @''{''''decimal'''':''''9,99''''}''", span="1456-1456", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalFrench()", file="JsonSerializerTest.cs"];
m4_864 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalFrench()", span="1454-1454", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalFrench()", file="JsonSerializerTest.cs"];
m4_302 [label="Entry System.Text.Encoding.GetBytes(string)", span="0-0", cluster="System.Text.Encoding.GetBytes(string)", file="JsonSerializerTest.cs"];
m4_899 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ParseLineFeedDelimitedConstructor()", span="1547-1547", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseLineFeedDelimitedConstructor()", file="JsonSerializerTest.cs"];
m4_902 [label="Assert.IsTrue(reader.Read())", span="1552-1552", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseLineFeedDelimitedConstructor()", file="JsonSerializerTest.cs"];
m4_905 [label="Assert.IsTrue(reader.Read())", span="1556-1556", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseLineFeedDelimitedConstructor()", file="JsonSerializerTest.cs"];
m4_903 [label="Assert.AreEqual(''Date'', reader.Value)", span="1553-1553", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseLineFeedDelimitedConstructor()", file="JsonSerializerTest.cs"];
m4_904 [label="Assert.AreEqual(JsonToken.StartConstructor, reader.TokenType)", span="1554-1554", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseLineFeedDelimitedConstructor()", file="JsonSerializerTest.cs"];
m4_906 [label="Assert.AreEqual(JsonToken.EndConstructor, reader.TokenType)", span="1557-1557", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseLineFeedDelimitedConstructor()", file="JsonSerializerTest.cs"];
m4_901 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="1550-1550", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseLineFeedDelimitedConstructor()", file="JsonSerializerTest.cs"];
m4_900 [label="string json = ''new Date\n()''", span="1549-1549", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseLineFeedDelimitedConstructor()", file="JsonSerializerTest.cs"];
m4_907 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ParseLineFeedDelimitedConstructor()", span="1547-1547", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseLineFeedDelimitedConstructor()", file="JsonSerializerTest.cs"];
m4_131 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", span="270-270", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSerializerTest.cs"];
m4_136 [label="jsonReader.Read()", span="284-284", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSerializerTest.cs"];
m4_139 [label="jsonReader.Read()", span="288-288", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSerializerTest.cs"];
m4_142 [label="jsonReader.Read()", span="292-292", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSerializerTest.cs"];
m4_147 [label="jsonReader.Read()", span="298-298", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSerializerTest.cs"];
m4_150 [label="jsonReader.Read()", span="302-302", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSerializerTest.cs"];
m4_153 [label="jsonReader.Read()", span="306-306", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSerializerTest.cs"];
m4_157 [label="jsonReader.Read()", span="311-311", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSerializerTest.cs"];
m4_161 [label="jsonReader.Read()", span="316-316", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSerializerTest.cs"];
m4_164 [label="jsonReader.Read()", span="320-320", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSerializerTest.cs"];
m4_167 [label="jsonReader.Read()", span="324-324", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSerializerTest.cs"];
m4_170 [label="jsonReader.Read()", span="328-328", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSerializerTest.cs"];
m4_173 [label="jsonReader.Read()", span="332-332", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSerializerTest.cs"];
m4_176 [label="jsonReader.Read()", span="336-336", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSerializerTest.cs"];
m4_179 [label="jsonReader.Read()", span="340-340", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSerializerTest.cs"];
m4_135 [label="Assert.AreEqual(0, jsonReader.Depth)", span="282-282", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSerializerTest.cs"];
m4_137 [label="Assert.AreEqual(jsonReader.TokenType, JsonToken.StartObject)", span="285-285", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSerializerTest.cs"];
m4_138 [label="Assert.AreEqual(0, jsonReader.Depth)", span="286-286", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSerializerTest.cs"];
m4_140 [label="Assert.AreEqual(jsonReader.TokenType, JsonToken.PropertyName)", span="289-289", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSerializerTest.cs"];
m4_141 [label="Assert.AreEqual(1, jsonReader.Depth)", span="290-290", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSerializerTest.cs"];
m4_143 [label="Assert.AreEqual(jsonReader.TokenType, JsonToken.String)", span="293-293", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSerializerTest.cs"];
m4_144 [label="Assert.AreEqual(jsonReader.Value, @''Purple'')", span="294-294", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSerializerTest.cs"];
m4_145 [label="Assert.AreEqual(jsonReader.QuoteChar, '\'')", span="295-295", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSerializerTest.cs"];
m4_146 [label="Assert.AreEqual(1, jsonReader.Depth)", span="296-296", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSerializerTest.cs"];
m4_148 [label="Assert.AreEqual(jsonReader.TokenType, JsonToken.PropertyName)", span="299-299", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSerializerTest.cs"];
m4_149 [label="Assert.AreEqual(1, jsonReader.Depth)", span="300-300", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSerializerTest.cs"];
m4_151 [label="Assert.AreEqual(jsonReader.TokenType, JsonToken.StartArray)", span="303-303", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSerializerTest.cs"];
m4_152 [label="Assert.AreEqual(1, jsonReader.Depth)", span="304-304", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSerializerTest.cs"];
m4_154 [label="Assert.AreEqual(jsonReader.TokenType, JsonToken.Integer)", span="307-307", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSerializerTest.cs"];
m4_155 [label="Assert.AreEqual(1, jsonReader.Value)", span="308-308", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSerializerTest.cs"];
m4_156 [label="Assert.AreEqual(2, jsonReader.Depth)", span="309-309", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSerializerTest.cs"];
m4_158 [label="Assert.AreEqual(jsonReader.TokenType, JsonToken.Integer)", span="312-312", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSerializerTest.cs"];
m4_159 [label="Assert.AreEqual(2, jsonReader.Value)", span="313-313", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSerializerTest.cs"];
m4_160 [label="Assert.AreEqual(2, jsonReader.Depth)", span="314-314", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSerializerTest.cs"];
m4_162 [label="Assert.AreEqual(jsonReader.TokenType, JsonToken.EndArray)", span="317-317", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSerializerTest.cs"];
m4_163 [label="Assert.AreEqual(1, jsonReader.Depth)", span="318-318", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSerializerTest.cs"];
m4_165 [label="Assert.AreEqual(jsonReader.TokenType, JsonToken.PropertyName)", span="321-321", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSerializerTest.cs"];
m4_166 [label="Assert.AreEqual(1, jsonReader.Depth)", span="322-322", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSerializerTest.cs"];
m4_168 [label="Assert.AreEqual(jsonReader.TokenType, JsonToken.StartObject)", span="325-325", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSerializerTest.cs"];
m4_169 [label="Assert.AreEqual(1, jsonReader.Depth)", span="326-326", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSerializerTest.cs"];
m4_171 [label="Assert.AreEqual(jsonReader.TokenType, JsonToken.PropertyName)", span="329-329", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSerializerTest.cs"];
m4_172 [label="Assert.AreEqual(2, jsonReader.Depth)", span="330-330", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSerializerTest.cs"];
m4_174 [label="Assert.AreEqual(jsonReader.TokenType, JsonToken.Integer)", span="333-333", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSerializerTest.cs"];
m4_175 [label="Assert.AreEqual(2, jsonReader.Depth)", span="334-334", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSerializerTest.cs"];
m4_177 [label="Assert.AreEqual(jsonReader.TokenType, JsonToken.EndObject)", span="337-337", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSerializerTest.cs"];
m4_178 [label="Assert.AreEqual(1, jsonReader.Depth)", span="338-338", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSerializerTest.cs"];
m4_180 [label="Assert.AreEqual(jsonReader.TokenType, JsonToken.EndObject)", span="341-341", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSerializerTest.cs"];
m4_181 [label="Assert.AreEqual(0, jsonReader.Depth)", span="342-342", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSerializerTest.cs"];
m4_134 [label="JsonReader jsonReader = new JsonTextReader(sr)", span="280-280", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSerializerTest.cs"];
m4_133 [label="StringReader sr = new StringReader(input)", span="278-278", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSerializerTest.cs"];
m4_132 [label="string input = @''{\r\n  value:'Purple',\r\n  array:[1,2],\r\n  subobject:{prop:1}\r\n}''", span="272-276", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSerializerTest.cs"];
m4_182 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", span="270-270", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSerializerTest.cs"];
m4_477 [label="Entry Newtonsoft.Json.JsonWriter.WriteValue(int)", span="685-685", cluster="Newtonsoft.Json.JsonWriter.WriteValue(int)", file="JsonSerializerTest.cs"];
m4_1046 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ParseOctalNumber()", span="1791-1791", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseOctalNumber()", file="JsonSerializerTest.cs"];
m4_1050 [label="Assert.AreEqual(JsonToken.Float, reader.TokenType)", span="1798-1798", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseOctalNumber()", file="JsonSerializerTest.cs"];
m4_1051 [label="Assert.AreEqual(8m, reader.Value)", span="1799-1799", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseOctalNumber()", file="JsonSerializerTest.cs"];
m4_1048 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="1795-1795", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseOctalNumber()", file="JsonSerializerTest.cs"];
m4_1049 [label="reader.ReadAsDecimal()", span="1797-1797", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseOctalNumber()", file="JsonSerializerTest.cs"];
m4_1047 [label="string json = @''010''", span="1793-1793", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseOctalNumber()", file="JsonSerializerTest.cs"];
m4_1052 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ParseOctalNumber()", span="1791-1791", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseOctalNumber()", file="JsonSerializerTest.cs"];
m4_291 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesWithBadCharacter()", span="537-537", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesWithBadCharacter()", file="JsonSerializerTest.cs"];
m4_292 [label="JsonReader reader = new JsonTextReader(new StringReader(@''true''))", span="539-539", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesWithBadCharacter()", file="JsonSerializerTest.cs"];
m4_293 [label="reader.ReadAsBytes()", span="540-540", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesWithBadCharacter()", file="JsonSerializerTest.cs"];
m4_294 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesWithBadCharacter()", span="537-537", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesWithBadCharacter()", file="JsonSerializerTest.cs"];
m4_50 [label="JTokenType.Property", span="139-139", cluster="Newtonsoft.Json.Linq.JTokenReader.GetEndToken(Newtonsoft.Json.Linq.JContainer)", file="JsonSerializerTest.cs"];
m4_359 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ParsingQuotedPropertyWithControlCharacters()", span="664-664", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParsingQuotedPropertyWithControlCharacters()", file="JsonSerializerTest.cs"];
m4_361 [label="Assert.IsTrue(reader.Read())", span="667-667", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParsingQuotedPropertyWithControlCharacters()", file="JsonSerializerTest.cs"];
m4_362 [label="Assert.IsTrue(reader.Read())", span="668-668", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParsingQuotedPropertyWithControlCharacters()", file="JsonSerializerTest.cs"];
m4_365 [label="Assert.IsTrue(reader.Read())", span="672-672", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParsingQuotedPropertyWithControlCharacters()", file="JsonSerializerTest.cs"];
m4_368 [label="Assert.IsTrue(reader.Read())", span="675-675", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParsingQuotedPropertyWithControlCharacters()", file="JsonSerializerTest.cs"];
m4_370 [label="Assert.IsFalse(reader.Read())", span="677-677", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParsingQuotedPropertyWithControlCharacters()", file="JsonSerializerTest.cs"];
m4_363 [label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="669-669", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParsingQuotedPropertyWithControlCharacters()", file="JsonSerializerTest.cs"];
m4_364 [label="Assert.AreEqual(@''hi\r\nbye'', reader.Value)", span="670-671", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParsingQuotedPropertyWithControlCharacters()", file="JsonSerializerTest.cs"];
m4_366 [label="Assert.AreEqual(JsonToken.Integer, reader.TokenType)", span="673-673", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParsingQuotedPropertyWithControlCharacters()", file="JsonSerializerTest.cs"];
m4_367 [label="Assert.AreEqual(1, reader.Value)", span="674-674", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParsingQuotedPropertyWithControlCharacters()", file="JsonSerializerTest.cs"];
m4_369 [label="Assert.AreEqual(JsonToken.EndObject, reader.TokenType)", span="676-676", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParsingQuotedPropertyWithControlCharacters()", file="JsonSerializerTest.cs"];
m4_360 [label="JsonReader reader = new JsonTextReader(new StringReader(@''{'hi\r\nbye':1}''))", span="666-666", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParsingQuotedPropertyWithControlCharacters()", file="JsonSerializerTest.cs"];
m4_371 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ParsingQuotedPropertyWithControlCharacters()", span="664-664", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParsingQuotedPropertyWithControlCharacters()", file="JsonSerializerTest.cs"];
m4_1007 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", span="1726-1726", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="JsonSerializerTest.cs"];
m4_1010 [label="Assert.IsTrue(reader.Read())", span="1739-1739", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="JsonSerializerTest.cs"];
m4_1012 [label="Assert.IsTrue(reader.Read())", span="1742-1742", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="JsonSerializerTest.cs"];
m4_1014 [label="Assert.IsTrue(reader.Read())", span="1745-1745", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="JsonSerializerTest.cs"];
m4_1016 [label="Assert.IsTrue(reader.Read())", span="1748-1748", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="JsonSerializerTest.cs"];
m4_1019 [label="Assert.IsTrue(reader.Read())", span="1752-1752", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="JsonSerializerTest.cs"];
m4_1021 [label="Assert.IsTrue(reader.Read())", span="1755-1755", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="JsonSerializerTest.cs"];
m4_1024 [label="Assert.IsTrue(reader.Read())", span="1759-1759", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="JsonSerializerTest.cs"];
m4_1026 [label="Assert.IsTrue(reader.Read())", span="1762-1762", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="JsonSerializerTest.cs"];
m4_1028 [label="Assert.IsTrue(reader.Read())", span="1765-1765", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="JsonSerializerTest.cs"];
m4_1031 [label="Assert.IsTrue(reader.Read())", span="1769-1769", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="JsonSerializerTest.cs"];
m4_1033 [label="Assert.IsTrue(reader.Read())", span="1772-1772", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="JsonSerializerTest.cs"];
m4_1037 [label="Assert.IsTrue(reader.Read())", span="1777-1777", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="JsonSerializerTest.cs"];
m4_1039 [label="Assert.IsTrue(reader.Read())", span="1780-1780", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="JsonSerializerTest.cs"];
m4_1041 [label="Assert.IsTrue(reader.Read())", span="1783-1783", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="JsonSerializerTest.cs"];
m4_1043 [label="Assert.IsTrue(reader.Read())", span="1786-1786", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="JsonSerializerTest.cs"];
m4_1011 [label="Assert.AreEqual(JsonToken.Comment, reader.TokenType)", span="1740-1740", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="JsonSerializerTest.cs"];
m4_1013 [label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="1743-1743", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="JsonSerializerTest.cs"];
m4_1015 [label="Assert.AreEqual(JsonToken.Comment, reader.TokenType)", span="1746-1746", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="JsonSerializerTest.cs"];
m4_1017 [label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="1749-1749", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="JsonSerializerTest.cs"];
m4_1018 [label="Assert.AreEqual(''Name'', reader.Value)", span="1750-1750", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="JsonSerializerTest.cs"];
m4_1020 [label="Assert.AreEqual(JsonToken.Comment, reader.TokenType)", span="1753-1753", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="JsonSerializerTest.cs"];
m4_1022 [label="Assert.AreEqual(JsonToken.Boolean, reader.TokenType)", span="1756-1756", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="JsonSerializerTest.cs"];
m4_1023 [label="Assert.AreEqual(true, reader.Value)", span="1757-1757", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="JsonSerializerTest.cs"];
m4_1025 [label="Assert.AreEqual(JsonToken.Comment, reader.TokenType)", span="1760-1760", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="JsonSerializerTest.cs"];
m4_1027 [label="Assert.AreEqual(JsonToken.Comment, reader.TokenType)", span="1763-1763", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="JsonSerializerTest.cs"];
m4_1029 [label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="1766-1766", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="JsonSerializerTest.cs"];
m4_1030 [label="Assert.AreEqual(''ExpiryDate'', reader.Value)", span="1767-1767", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="JsonSerializerTest.cs"];
m4_1032 [label="Assert.AreEqual(JsonToken.Comment, reader.TokenType)", span="1770-1770", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="JsonSerializerTest.cs"];
m4_1034 [label="Assert.AreEqual(JsonToken.StartConstructor, reader.TokenType)", span="1773-1773", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="JsonSerializerTest.cs"];
m4_1035 [label="Assert.AreEqual(5, reader.LineNumber)", span="1774-1774", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="JsonSerializerTest.cs"];
m4_1036 [label="Assert.AreEqual(''Date'', reader.Value)", span="1775-1775", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="JsonSerializerTest.cs"];
m4_1038 [label="Assert.AreEqual(JsonToken.Comment, reader.TokenType)", span="1778-1778", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="JsonSerializerTest.cs"];
m4_1040 [label="Assert.AreEqual(JsonToken.Null, reader.TokenType)", span="1781-1781", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="JsonSerializerTest.cs"];
m4_1042 [label="Assert.AreEqual(JsonToken.Comment, reader.TokenType)", span="1784-1784", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="JsonSerializerTest.cs"];
m4_1044 [label="Assert.AreEqual(JsonToken.EndConstructor, reader.TokenType)", span="1787-1787", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="JsonSerializerTest.cs"];
m4_1009 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="1737-1737", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="JsonSerializerTest.cs"];
m4_1008 [label="string json = @''/*comment*/{/*comment*/Name:/*comment*/true/*comment*/,/*comment*/\r\n        ''''ExpiryDate'''':/*comment*/new\r\n'' + StringUtils.LineFeed +\r\n@''Date\r\n(/*comment*/null/*comment*/),\r\n        ''''Price'''': 3.99,\r\n        ''''Sizes'''':/*comment*/[/*comment*/\r\n          ''''Small''''/*comment*/]/*comment*/}/*comment*/''", span="1728-1735", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="JsonSerializerTest.cs"];
m4_1045 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", span="1726-1726", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="JsonSerializerTest.cs"];
m4_484 [label="Entry Newtonsoft.Json.JsonSerializer.Deserialize(Newtonsoft.Json.JsonReader)", span="374-374", cluster="Newtonsoft.Json.JsonSerializer.Deserialize(Newtonsoft.Json.JsonReader)", file="JsonSerializerTest.cs"];
m4_44 [label="Entry Unk.AreEqual", span="", cluster="Unk.AreEqual", file="JsonSerializerTest.cs"];
m4_46 [label="string json = @''[\r\n''''Small'''',\r\n''''Medium'''',\r\n''''Large''''\r\n],''", span="120-124", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Comma()", file="JsonSerializerTest.cs", color=green, community=0];
m4_48 [label="reader.Read()", span="127-127", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Comma()", file="JsonSerializerTest.cs", color=green, community=0];
m4_45 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Comma()", span="118-118", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Comma()", file="JsonSerializerTest.cs"];
m4_47 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="126-126", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Comma()", file="JsonSerializerTest.cs", color=green, community=0];
m4_49 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Comma()", span="118-118", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Comma()", file="JsonSerializerTest.cs"];
m4_588 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.MissingColon()", span="1017-1017", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MissingColon()", file="JsonSerializerTest.cs"];
m4_592 [label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="1026-1026", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MissingColon()", file="JsonSerializerTest.cs"];
m4_594 [label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="1029-1029", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MissingColon()", file="JsonSerializerTest.cs"];
m4_596 [label="Assert.AreEqual(JsonToken.Boolean, reader.TokenType)", span="1032-1032", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MissingColon()", file="JsonSerializerTest.cs"];
m4_590 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="1023-1023", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MissingColon()", file="JsonSerializerTest.cs"];
m4_591 [label="reader.Read()", span="1025-1025", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MissingColon()", file="JsonSerializerTest.cs"];
m4_593 [label="reader.Read()", span="1028-1028", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MissingColon()", file="JsonSerializerTest.cs"];
m4_595 [label="reader.Read()", span="1031-1031", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MissingColon()", file="JsonSerializerTest.cs"];
m4_597 [label="reader.Read()", span="1034-1034", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MissingColon()", file="JsonSerializerTest.cs"];
m4_589 [label="string json = @''{\r\n    ''''A'''' : true,\r\n    ''''B'''' ''''''", span="1019-1021", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MissingColon()", file="JsonSerializerTest.cs"];
m4_598 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.MissingColon()", span="1017-1017", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MissingColon()", file="JsonSerializerTest.cs"];
m4_933 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ParseConstructorWithUnexpectedEnd()", span="1601-1601", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseConstructorWithUnexpectedEnd()", file="JsonSerializerTest.cs"];
m4_935 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="1604-1604", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseConstructorWithUnexpectedEnd()", file="JsonSerializerTest.cs"];
m4_936 [label="reader.Read()", span="1606-1606", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseConstructorWithUnexpectedEnd()", file="JsonSerializerTest.cs"];
m4_934 [label="string json = ''new Dat''", span="1603-1603", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseConstructorWithUnexpectedEnd()", file="JsonSerializerTest.cs"];
m4_937 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ParseConstructorWithUnexpectedEnd()", span="1601-1601", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseConstructorWithUnexpectedEnd()", file="JsonSerializerTest.cs"];
m4_472 [label="Entry System.IO.StringWriter.StringWriter(System.Text.StringBuilder)", span="0-0", cluster="System.IO.StringWriter.StringWriter(System.Text.StringBuilder)", file="JsonSerializerTest.cs"];
m4_609 [label="Entry System.Text.Encoding.GetString(byte[], int, int)", span="0-0", cluster="System.Text.Encoding.GetString(byte[], int, int)", file="JsonSerializerTest.cs"];
m4_504 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", span="896-896", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", file="JsonSerializerTest.cs"];
m4_509 [label="Assert.AreEqual(JsonToken.StartArray, reader.TokenType)", span="904-904", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", file="JsonSerializerTest.cs"];
m4_511 [label="Assert.AreEqual(JsonToken.String, reader.TokenType)", span="907-907", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", file="JsonSerializerTest.cs"];
m4_512 [label="Assert.AreEqual(typeof(string), reader.ValueType)", span="908-908", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", file="JsonSerializerTest.cs"];
m4_513 [label="Assert.AreEqual(20000, reader.Value.ToString().Length)", span="909-909", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", file="JsonSerializerTest.cs"];
m4_515 [label="Assert.AreEqual(JsonToken.EndArray, reader.TokenType)", span="912-912", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", file="JsonSerializerTest.cs"];
m4_517 [label="Assert.AreEqual(JsonToken.EndArray, reader.TokenType)", span="915-915", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", file="JsonSerializerTest.cs"];
m4_507 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="901-901", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", file="JsonSerializerTest.cs"];
m4_508 [label="reader.Read()", span="903-903", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", file="JsonSerializerTest.cs"];
m4_510 [label="reader.Read()", span="906-906", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", file="JsonSerializerTest.cs"];
m4_514 [label="reader.Read()", span="911-911", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", file="JsonSerializerTest.cs"];
m4_516 [label="reader.Read()", span="914-914", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", file="JsonSerializerTest.cs"];
m4_506 [label="string json = @''['''''' + new string(' ', length) + @'''''']''", span="899-899", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", file="JsonSerializerTest.cs"];
m4_505 [label="int length = 20000", span="898-898", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", file="JsonSerializerTest.cs"];
m4_518 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", span="896-896", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", file="JsonSerializerTest.cs"];
m4_22 [label="Entry Newtonsoft.Json.Linq.JTokenReader.ReadOver(Newtonsoft.Json.Linq.JToken)", span="97-97", cluster="Newtonsoft.Json.Linq.JTokenReader.ReadOver(Newtonsoft.Json.Linq.JToken)", file="JsonSerializerTest.cs"];
m4_190 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongString()", span="363-363", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongString()", file="JsonSerializerTest.cs"];
m4_193 [label="reader.Read()", span="367-367", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongString()", file="JsonSerializerTest.cs"];
m4_194 [label="Assert.AreEqual(s, reader.Value)", span="369-369", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongString()", file="JsonSerializerTest.cs"];
m4_192 [label="JsonReader reader = new JsonTextReader(new StringReader(''''' + s + '''''))", span="366-366", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongString()", file="JsonSerializerTest.cs"];
m4_191 [label="string s = new string('a', 10000)", span="365-365", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongString()", file="JsonSerializerTest.cs"];
m4_195 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongString()", span="363-363", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongString()", file="JsonSerializerTest.cs"];
m4_951 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyArray()", span="1632-1632", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyArray()", file="JsonSerializerTest.cs"];
m4_954 [label="Assert.IsTrue(reader.Read())", span="1637-1637", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyArray()", file="JsonSerializerTest.cs"];
m4_956 [label="Assert.IsTrue(reader.Read())", span="1640-1640", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyArray()", file="JsonSerializerTest.cs"];
m4_955 [label="Assert.AreEqual(JsonToken.StartArray, reader.TokenType)", span="1638-1638", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyArray()", file="JsonSerializerTest.cs"];
m4_957 [label="Assert.AreEqual(JsonToken.EndArray, reader.TokenType)", span="1641-1641", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyArray()", file="JsonSerializerTest.cs"];
m4_953 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="1635-1635", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyArray()", file="JsonSerializerTest.cs"];
m4_952 [label="string json = ''[]''", span="1634-1634", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyArray()", file="JsonSerializerTest.cs"];
m4_958 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyArray()", span="1632-1632", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyArray()", file="JsonSerializerTest.cs"];
m4_219 [label="Entry Newtonsoft.Json.JsonTextWriter.JsonTextWriter(System.IO.TextWriter)", span="109-109", cluster="Newtonsoft.Json.JsonTextWriter.JsonTextWriter(System.IO.TextWriter)", file="JsonSerializerTest.cs"];
m4_387 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInObject()", span="701-701", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInObject()", file="JsonSerializerTest.cs"];
m4_391 [label="Assert.IsTrue(reader.Read())", span="707-707", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInObject()", file="JsonSerializerTest.cs"];
m4_393 [label="Assert.IsTrue(reader.Read())", span="709-709", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInObject()", file="JsonSerializerTest.cs"];
m4_394 [label="Assert.IsTrue(reader.Read())", span="710-710", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInObject()", file="JsonSerializerTest.cs"];
m4_396 [label="Assert.IsTrue(reader.Read())", span="712-712", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInObject()", file="JsonSerializerTest.cs"];
m4_400 [label="Assert.IsTrue(reader.Read())", span="716-716", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInObject()", file="JsonSerializerTest.cs"];
m4_402 [label="Assert.IsFalse(reader.Read())", span="719-719", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInObject()", file="JsonSerializerTest.cs"];
m4_398 [label="Assert.AreEqual(helloWorldData, data)", span="714-714", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInObject()", file="JsonSerializerTest.cs"];
m4_392 [label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="708-708", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInObject()", file="JsonSerializerTest.cs"];
m4_395 [label="Assert.AreEqual(JsonToken.Integer, reader.TokenType)", span="711-711", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInObject()", file="JsonSerializerTest.cs"];
m4_399 [label="Assert.AreEqual(JsonToken.Bytes, reader.TokenType)", span="715-715", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInObject()", file="JsonSerializerTest.cs"];
m4_401 [label="Assert.AreEqual(JsonToken.EndObject, reader.TokenType)", span="717-717", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInObject()", file="JsonSerializerTest.cs"];
m4_390 [label="JsonReader reader = new JsonTextReader(new StringReader(@''{num:1,data:''' + Convert.ToBase64String(helloWorldData) + @'''}''))", span="706-706", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInObject()", file="JsonSerializerTest.cs"];
m4_397 [label="byte[] data = reader.ReadAsBytes()", span="713-713", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInObject()", file="JsonSerializerTest.cs"];
m4_389 [label="byte[] helloWorldData = Encoding.UTF8.GetBytes(helloWorld)", span="704-704", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInObject()", file="JsonSerializerTest.cs"];
m4_388 [label="string helloWorld = ''Hello world!''", span="703-703", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInObject()", file="JsonSerializerTest.cs"];
m4_403 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInObject()", span="701-701", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInObject()", file="JsonSerializerTest.cs"];
m4_434 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", span="800-800", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="JsonSerializerTest.cs"];
m4_469 [label="Assert.AreEqual(json, sb.ToString())", span="859-859", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="JsonSerializerTest.cs"];
m4_464 [label="object jsonObject = serializer.Deserialize(new JsonTextReader(new StringReader(json)))", span="846-846", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="JsonSerializerTest.cs"];
m4_462 [label="string json = sb.ToString()", span="842-842", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="JsonSerializerTest.cs"];
m4_468 [label="serializer.Serialize(jsonWriter, jsonObject)", span="856-856", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="JsonSerializerTest.cs"];
m4_465 [label="sb = new StringBuilder()", span="848-848", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="JsonSerializerTest.cs"];
m4_463 [label="JsonSerializer serializer = new JsonSerializer()", span="844-844", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="JsonSerializerTest.cs"];
m4_435 [label="StringBuilder sb = new StringBuilder()", span="802-802", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="JsonSerializerTest.cs"];
m4_461 [label="jsonWriter.WriteEndArray()", span="839-839", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="JsonSerializerTest.cs"];
m4_467 [label="JsonWriter jsonWriter = new JsonTextWriter(sw)\r\n        {\r\n          Formatting = Formatting.Indented\r\n        }", span="851-854", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="JsonSerializerTest.cs"];
m4_466 [label="sw = new StringWriter(sb)", span="849-849", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="JsonSerializerTest.cs"];
m4_436 [label="StringWriter sw = new StringWriter(sb)", span="803-803", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="JsonSerializerTest.cs"];
m4_437 [label="JsonWriter jsonWriter = new JsonTextWriter(sw)\r\n        {\r\n          Formatting = Formatting.Indented\r\n        }", span="805-808", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="JsonSerializerTest.cs"];
m4_460 [label="jsonWriter.WriteNull()", span="838-838", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="JsonSerializerTest.cs"];
m4_438 [label="jsonWriter.WriteStartArray()", span="810-810", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="JsonSerializerTest.cs"];
m4_439 [label="jsonWriter.WriteValue(true)", span="811-811", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="JsonSerializerTest.cs"];
m4_440 [label="jsonWriter.WriteStartObject()", span="813-813", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="JsonSerializerTest.cs"];
m4_441 [label="jsonWriter.WritePropertyName(''integer'')", span="814-814", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="JsonSerializerTest.cs"];
m4_442 [label="jsonWriter.WriteValue(99)", span="815-815", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="JsonSerializerTest.cs"];
m4_443 [label="jsonWriter.WritePropertyName(''string'')", span="816-816", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="JsonSerializerTest.cs"];
m4_444 [label="jsonWriter.WriteValue(''how now brown cow?'')", span="817-817", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="JsonSerializerTest.cs"];
m4_445 [label="jsonWriter.WritePropertyName(''array'')", span="818-818", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="JsonSerializerTest.cs"];
m4_446 [label="jsonWriter.WriteStartArray()", span="820-820", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="JsonSerializerTest.cs"];
m4_449 [label="jsonWriter.WriteValue(i)", span="823-823", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="JsonSerializerTest.cs"];
m4_451 [label="jsonWriter.WriteStartObject()", span="826-826", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="JsonSerializerTest.cs"];
m4_452 [label="jsonWriter.WritePropertyName(''decimal'')", span="827-827", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="JsonSerializerTest.cs"];
m4_453 [label="jsonWriter.WriteValue(990.00990099m)", span="828-828", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="JsonSerializerTest.cs"];
m4_454 [label="jsonWriter.WriteEndObject()", span="829-829", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="JsonSerializerTest.cs"];
m4_455 [label="jsonWriter.WriteValue(5)", span="831-831", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="JsonSerializerTest.cs"];
m4_456 [label="jsonWriter.WriteEndArray()", span="832-832", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="JsonSerializerTest.cs"];
m4_457 [label="jsonWriter.WriteEndObject()", span="834-834", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="JsonSerializerTest.cs"];
m4_458 [label="jsonWriter.WriteValue(''This is a string.'')", span="836-836", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="JsonSerializerTest.cs"];
m4_459 [label="jsonWriter.WriteNull()", span="837-837", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="JsonSerializerTest.cs"];
m4_447 [label="int i = 0", span="821-821", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="JsonSerializerTest.cs"];
m4_448 [label="i < 5", span="821-821", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="JsonSerializerTest.cs"];
m4_450 [label="i++", span="821-821", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="JsonSerializerTest.cs"];
m4_470 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", span="800-800", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="JsonSerializerTest.cs"];
m4_865 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBufferOnControlChar()", span="1477-1477", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBufferOnControlChar()", file="JsonSerializerTest.cs"];
m4_873 [label="Assert.IsTrue(reader.Read())", span="1499-1499", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBufferOnControlChar()", file="JsonSerializerTest.cs"];
m4_874 [label="Assert.AreEqual(new DateTime(631136448000000000), reader.Value)", span="1500-1500", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBufferOnControlChar()", file="JsonSerializerTest.cs"];
m4_867 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="1492-1492", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBufferOnControlChar()", file="JsonSerializerTest.cs"];
m4_871 [label="reader.Read()", span="1496-1496", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBufferOnControlChar()", file="JsonSerializerTest.cs"];
m4_868 [label="reader.SetCharBuffer(new char[5])", span="1493-1493", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBufferOnControlChar()", file="JsonSerializerTest.cs"];
m4_870 [label="i < 13", span="1494-1494", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBufferOnControlChar()", file="JsonSerializerTest.cs"];
m4_866 [label="string json = @''[\r\n  {\r\n    ''''Name'''': ''''Jim'''',\r\n    ''''BirthDate'''': ''''\/Date(978048000000)\/'''',\r\n    ''''LastModified'''': ''''\/Date(978048000000)\/''''\r\n  },\r\n  {\r\n    ''''Name'''': ''''Jim'''',\r\n    ''''BirthDate'''': ''''\/Date(978048000000)\/'''',\r\n    ''''LastModified'''': ''''\/Date(978048000000)\/''''\r\n  }\r\n]''", span="1479-1490", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBufferOnControlChar()", file="JsonSerializerTest.cs"];
m4_872 [label="i++", span="1494-1494", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBufferOnControlChar()", file="JsonSerializerTest.cs"];
m4_869 [label="int i = 0", span="1494-1494", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBufferOnControlChar()", file="JsonSerializerTest.cs"];
m4_875 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBufferOnControlChar()", span="1477-1477", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBufferOnControlChar()", file="JsonSerializerTest.cs"];
m4_876 [label="Entry System.DateTime.DateTime(long)", span="0-0", cluster="System.DateTime.DateTime(long)", file="JsonSerializerTest.cs"];
m4_222 [label="Entry Newtonsoft.Json.JsonWriter.WriteEndArray()", span="265-265", cluster="Newtonsoft.Json.JsonWriter.WriteEndArray()", file="JsonSerializerTest.cs"];
m4_633 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalNoContent()", span="1089-1089", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalNoContent()", file="JsonSerializerTest.cs"];
m4_634 [label="JsonTextReader reader = new JsonTextReader(new StringReader(@''''))", span="1091-1091", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalNoContent()", file="JsonSerializerTest.cs"];
m4_635 [label="reader.ReadAsDecimal()", span="1093-1093", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalNoContent()", file="JsonSerializerTest.cs"];
m4_636 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalNoContent()", span="1089-1089", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalNoContent()", file="JsonSerializerTest.cs"];
m4_520 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.EscapedUnicodeText()", span="919-919", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.EscapedUnicodeText()", file="JsonSerializerTest.cs"];
m4_525 [label="Assert.AreEqual(JsonToken.StartArray, reader.TokenType)", span="927-927", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.EscapedUnicodeText()", file="JsonSerializerTest.cs"];
m4_527 [label="Assert.AreEqual(''<'', reader.Value)", span="930-930", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.EscapedUnicodeText()", file="JsonSerializerTest.cs"];
m4_529 [label="Assert.AreEqual(24352, Convert.ToInt32(Convert.ToChar((string)reader.Value)))", span="933-933", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.EscapedUnicodeText()", file="JsonSerializerTest.cs"];
m4_531 [label="Assert.AreEqual(JsonToken.EndArray, reader.TokenType)", span="936-936", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.EscapedUnicodeText()", file="JsonSerializerTest.cs"];
m4_522 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="923-923", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.EscapedUnicodeText()", file="JsonSerializerTest.cs"];
m4_524 [label="reader.Read()", span="926-926", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.EscapedUnicodeText()", file="JsonSerializerTest.cs"];
m4_526 [label="reader.Read()", span="929-929", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.EscapedUnicodeText()", file="JsonSerializerTest.cs"];
m4_528 [label="reader.Read()", span="932-932", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.EscapedUnicodeText()", file="JsonSerializerTest.cs"];
m4_530 [label="reader.Read()", span="935-935", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.EscapedUnicodeText()", file="JsonSerializerTest.cs"];
m4_523 [label="reader.SetCharBuffer(new char[2])", span="924-924", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.EscapedUnicodeText()", file="JsonSerializerTest.cs"];
m4_521 [label="string json = @''[''''\u003c'''',''''\u5f20'''']''", span="921-921", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.EscapedUnicodeText()", file="JsonSerializerTest.cs"];
m4_532 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.EscapedUnicodeText()", span="919-919", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.EscapedUnicodeText()", file="JsonSerializerTest.cs"];
m4_721 [label="Entry System.DateTimeOffset.DateTimeOffset(System.DateTime, System.TimeSpan)", span="0-0", cluster="System.DateTimeOffset.DateTimeOffset(System.DateTime, System.TimeSpan)", file="JsonSerializerTest.cs"];
m4_663 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesIntegerArrayWithComments()", span="1155-1155", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesIntegerArrayWithComments()", file="JsonSerializerTest.cs"];
m4_666 [label="Assert.AreEqual(2, data.Length)", span="1160-1160", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesIntegerArrayWithComments()", file="JsonSerializerTest.cs"];
m4_667 [label="Assert.AreEqual(1, data[0])", span="1161-1161", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesIntegerArrayWithComments()", file="JsonSerializerTest.cs"];
m4_668 [label="Assert.AreEqual(2, data[1])", span="1162-1162", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesIntegerArrayWithComments()", file="JsonSerializerTest.cs"];
m4_664 [label="JsonTextReader reader = new JsonTextReader(new StringReader(@''[/*hi*/1/*hi*/,2/*hi*/]''))", span="1157-1157", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesIntegerArrayWithComments()", file="JsonSerializerTest.cs"];
m4_665 [label="byte[] data = reader.ReadAsBytes()", span="1159-1159", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesIntegerArrayWithComments()", file="JsonSerializerTest.cs"];
m4_669 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesIntegerArrayWithComments()", span="1155-1155", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesIntegerArrayWithComments()", file="JsonSerializerTest.cs"];
m4_659 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetBadContent()", span="1146-1146", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetBadContent()", file="JsonSerializerTest.cs"];
m4_660 [label="JsonTextReader reader = new JsonTextReader(new StringReader(@''new Date()''))", span="1148-1148", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetBadContent()", file="JsonSerializerTest.cs"];
m4_661 [label="reader.ReadAsDateTimeOffset()", span="1150-1150", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetBadContent()", file="JsonSerializerTest.cs"];
m4_662 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetBadContent()", span="1146-1146", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetBadContent()", file="JsonSerializerTest.cs"];
m4_486 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", span="863-863", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="JsonSerializerTest.cs"];
m4_490 [label="jsonReader.Read()", span="875-875", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="JsonSerializerTest.cs"];
m4_492 [label="jsonReader.Read()", span="878-878", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="JsonSerializerTest.cs"];
m4_495 [label="jsonReader.Read()", span="882-882", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="JsonSerializerTest.cs"];
m4_498 [label="jsonReader.Read()", span="886-886", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="JsonSerializerTest.cs"];
m4_501 [label="jsonReader.Read()", span="890-890", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="JsonSerializerTest.cs"];
m4_491 [label="Assert.AreEqual(jsonReader.TokenType, JsonToken.StartArray)", span="876-876", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="JsonSerializerTest.cs"];
m4_493 [label="Assert.AreEqual(jsonReader.TokenType, JsonToken.Float)", span="879-879", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="JsonSerializerTest.cs"];
m4_494 [label="Assert.AreEqual(jsonReader.Value, double.NaN)", span="880-880", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="JsonSerializerTest.cs"];
m4_496 [label="Assert.AreEqual(jsonReader.TokenType, JsonToken.Float)", span="883-883", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="JsonSerializerTest.cs"];
m4_497 [label="Assert.AreEqual(jsonReader.Value, double.PositiveInfinity)", span="884-884", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="JsonSerializerTest.cs"];
m4_499 [label="Assert.AreEqual(jsonReader.TokenType, JsonToken.Float)", span="887-887", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="JsonSerializerTest.cs"];
m4_500 [label="Assert.AreEqual(jsonReader.Value, double.NegativeInfinity)", span="888-888", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="JsonSerializerTest.cs"];
m4_502 [label="Assert.AreEqual(jsonReader.TokenType, JsonToken.EndArray)", span="891-891", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="JsonSerializerTest.cs"];
m4_489 [label="JsonReader jsonReader = new JsonTextReader(sr)", span="873-873", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="JsonSerializerTest.cs"];
m4_488 [label="StringReader sr = new StringReader(input)", span="871-871", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="JsonSerializerTest.cs"];
m4_487 [label="string input = @''[\r\n  NaN,\r\n  Infinity,\r\n  -Infinity\r\n]''", span="865-869", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="JsonSerializerTest.cs"];
m4_503 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", span="863-863", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="JsonSerializerTest.cs"];
m4_314 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", span="573-573", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSerializerTest.cs"];
m4_322 [label="Assert.IsTrue(reader.Read())", span="613-613", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSerializerTest.cs"];
m4_324 [label="Assert.IsTrue(reader.Read())", span="616-616", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSerializerTest.cs"];
m4_327 [label="Assert.IsTrue(reader.Read())", span="620-620", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSerializerTest.cs"];
m4_329 [label="Assert.IsTrue(reader.Read())", span="623-623", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSerializerTest.cs"];
m4_333 [label="Assert.IsTrue(reader.Read())", span="628-628", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSerializerTest.cs"];
m4_336 [label="Assert.IsTrue(reader.Read())", span="632-632", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSerializerTest.cs"];
m4_339 [label="Assert.IsTrue(reader.Read())", span="636-636", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSerializerTest.cs"];
m4_342 [label="Assert.IsTrue(reader.Read())", span="640-640", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSerializerTest.cs"];
m4_344 [label="Assert.IsTrue(reader.Read())", span="643-643", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSerializerTest.cs"];
m4_346 [label="Assert.IsTrue(reader.Read())", span="646-646", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSerializerTest.cs"];
m4_348 [label="Assert.IsTrue(reader.Read())", span="649-649", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSerializerTest.cs"];
m4_351 [label="Assert.IsTrue(reader.Read())", span="653-653", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSerializerTest.cs"];
m4_353 [label="Assert.IsTrue(reader.Read())", span="656-656", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSerializerTest.cs"];
m4_355 [label="Assert.IsTrue(reader.Read())", span="659-659", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSerializerTest.cs"];
m4_326 [label="Assert.AreEqual(newLinesText + ''name1'' + newLinesText, reader.Value)", span="618-618", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSerializerTest.cs"];
m4_341 [label="Assert.AreEqual(newLinesText + ''blah comment'' + newLinesText, reader.Value)", span="638-638", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSerializerTest.cs"];
m4_323 [label="Assert.AreEqual(7, reader.LineNumber)", span="614-614", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSerializerTest.cs"];
m4_325 [label="Assert.AreEqual(31, reader.LineNumber)", span="617-617", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSerializerTest.cs"];
m4_328 [label="Assert.AreEqual(37, reader.LineNumber)", span="621-621", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSerializerTest.cs"];
m4_330 [label="Assert.AreEqual(55, reader.LineNumber)", span="624-624", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSerializerTest.cs"];
m4_331 [label="Assert.AreEqual(JsonToken.StartConstructor, reader.TokenType)", span="625-625", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSerializerTest.cs"];
m4_332 [label="Assert.AreEqual(''Date'', reader.Value)", span="626-626", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSerializerTest.cs"];
m4_334 [label="Assert.AreEqual(61, reader.LineNumber)", span="629-629", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSerializerTest.cs"];
m4_335 [label="Assert.AreEqual(1, reader.Value)", span="630-630", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSerializerTest.cs"];
m4_337 [label="Assert.AreEqual(73, reader.LineNumber)", span="633-633", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSerializerTest.cs"];
m4_338 [label="Assert.AreEqual(null, reader.Value)", span="634-634", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSerializerTest.cs"];
m4_340 [label="Assert.AreEqual(91, reader.LineNumber)", span="637-637", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSerializerTest.cs"];
m4_343 [label="Assert.AreEqual(97, reader.LineNumber)", span="641-641", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSerializerTest.cs"];
m4_345 [label="Assert.AreEqual(109, reader.LineNumber)", span="644-644", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSerializerTest.cs"];
m4_347 [label="Assert.AreEqual(115, reader.LineNumber)", span="647-647", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSerializerTest.cs"];
m4_349 [label="Assert.AreEqual(133, reader.LineNumber)", span="650-650", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSerializerTest.cs"];
m4_350 [label="Assert.AreEqual(''name2'', reader.Value)", span="651-651", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSerializerTest.cs"];
m4_352 [label="Assert.AreEqual(139, reader.LineNumber)", span="654-654", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSerializerTest.cs"];
m4_354 [label="Assert.AreEqual(145, reader.LineNumber)", span="657-657", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSerializerTest.cs"];
m4_356 [label="Assert.AreEqual(151, reader.LineNumber)", span="660-660", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSerializerTest.cs"];
m4_321 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="612-612", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSerializerTest.cs"];
m4_318 [label="StringReader sr = new StringReader(newLinesText)", span="606-606", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSerializerTest.cs"];
m4_315 [label="string newLinesText = StringUtils.CarriageReturn + StringUtils.CarriageReturnLineFeed + StringUtils.LineFeed + StringUtils.CarriageReturnLineFeed + '' '' + StringUtils.CarriageReturn + StringUtils.CarriageReturnLineFeed", span="575-575", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSerializerTest.cs"];
m4_316 [label="string json =\r\n        newLinesText\r\n        + ''{'' + newLinesText\r\n        + ''''' + newLinesText\r\n        + ''name1'' + newLinesText\r\n        + ''''' + newLinesText\r\n        + '':'' + newLinesText\r\n        + ''['' + newLinesText\r\n        + ''new'' + newLinesText\r\n        + ''Date'' + newLinesText\r\n        + ''('' + newLinesText\r\n        + ''1'' + newLinesText\r\n        + '','' + newLinesText\r\n        + ''null'' + newLinesText\r\n        + ''/*'' + newLinesText\r\n        + ''blah comment'' + newLinesText\r\n        + ''*/'' + newLinesText\r\n        + '')'' + newLinesText\r\n        + '','' + newLinesText\r\n        + ''1.1111'' + newLinesText\r\n        + '']'' + newLinesText\r\n        + '','' + newLinesText\r\n        + ''name2'' + newLinesText\r\n        + '':'' + newLinesText\r\n        + ''{'' + newLinesText\r\n        + ''}'' + newLinesText\r\n        + ''}'' + newLinesText", span="577-603", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSerializerTest.cs"];
m4_319 [label="sr.ReadLine() != null", span="607-607", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSerializerTest.cs"];
m4_317 [label="int count = 0", span="605-605", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSerializerTest.cs"];
m4_320 [label="count++", span="609-609", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSerializerTest.cs"];
m4_357 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", span="573-573", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSerializerTest.cs"];
m4_752 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetWithMinutes()", span="1297-1297", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetWithMinutes()", file="JsonSerializerTest.cs"];
m4_755 [label="Assert.IsTrue(reader.Read())", span="1303-1303", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetWithMinutes()", file="JsonSerializerTest.cs"];
m4_757 [label="Assert.IsTrue(reader.Read())", span="1306-1306", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetWithMinutes()", file="JsonSerializerTest.cs"];
m4_763 [label="Assert.IsTrue(reader.Read())", span="1314-1314", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetWithMinutes()", file="JsonSerializerTest.cs"];
m4_756 [label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="1304-1304", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetWithMinutes()", file="JsonSerializerTest.cs"];
m4_758 [label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="1307-1307", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetWithMinutes()", file="JsonSerializerTest.cs"];
m4_760 [label="Assert.AreEqual(JsonToken.Date, reader.TokenType)", span="1310-1310", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetWithMinutes()", file="JsonSerializerTest.cs"];
m4_761 [label="Assert.AreEqual(typeof(DateTimeOffset), reader.ValueType)", span="1311-1311", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetWithMinutes()", file="JsonSerializerTest.cs"];
m4_762 [label="Assert.AreEqual(new DateTimeOffset(new DateTime(2000, 1, 1), TimeSpan.FromHours(-6).Add(TimeSpan.FromMinutes(-31))), reader.Value)", span="1312-1312", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetWithMinutes()", file="JsonSerializerTest.cs"];
m4_764 [label="Assert.AreEqual(JsonToken.EndObject, reader.TokenType)", span="1315-1315", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetWithMinutes()", file="JsonSerializerTest.cs"];
m4_754 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="1301-1301", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetWithMinutes()", file="JsonSerializerTest.cs"];
m4_759 [label="reader.ReadAsDateTimeOffset()", span="1309-1309", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetWithMinutes()", file="JsonSerializerTest.cs"];
m4_753 [label="string json = @''{''''Offset'''':''''\/Date(946708260000-0631)\/''''}''", span="1299-1299", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetWithMinutes()", file="JsonSerializerTest.cs"];
m4_765 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetWithMinutes()", span="1297-1297", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetWithMinutes()", file="JsonSerializerTest.cs"];
m4_478 [label="Entry Newtonsoft.Json.JsonWriter.WriteValue(string)", span="676-676", cluster="Newtonsoft.Json.JsonWriter.WriteValue(string)", file="JsonSerializerTest.cs"];
m4_646 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNoContent()", span="1117-1117", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNoContent()", file="JsonSerializerTest.cs"];
m4_647 [label="JsonTextReader reader = new JsonTextReader(new StringReader(@''''))", span="1119-1119", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNoContent()", file="JsonSerializerTest.cs"];
m4_648 [label="reader.ReadAsDateTimeOffset()", span="1121-1121", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNoContent()", file="JsonSerializerTest.cs"];
m4_649 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNoContent()", span="1117-1117", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNoContent()", file="JsonSerializerTest.cs"];
m4_926 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ParseBooleanWithNoExtraContent()", span="1589-1589", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseBooleanWithNoExtraContent()", file="JsonSerializerTest.cs"];
m4_929 [label="Assert.IsTrue(reader.Read())", span="1594-1594", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseBooleanWithNoExtraContent()", file="JsonSerializerTest.cs"];
m4_930 [label="Assert.IsTrue(reader.Read())", span="1595-1595", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseBooleanWithNoExtraContent()", file="JsonSerializerTest.cs"];
m4_928 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="1592-1592", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseBooleanWithNoExtraContent()", file="JsonSerializerTest.cs"];
m4_931 [label="Assert.IsFalse(reader.Read())", span="1596-1596", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseBooleanWithNoExtraContent()", file="JsonSerializerTest.cs"];
m4_927 [label="string json = ''[true ''", span="1591-1591", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseBooleanWithNoExtraContent()", file="JsonSerializerTest.cs"];
m4_932 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ParseBooleanWithNoExtraContent()", span="1589-1589", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseBooleanWithNoExtraContent()", file="JsonSerializerTest.cs"];
m4_724 [label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNegative()", span="1253-1253", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNegative()", file="JsonSerializerTest.cs"];
m4_727 [label="Assert.IsTrue(reader.Read())", span="1259-1259", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNegative()", file="JsonSerializerTest.cs"];
m4_729 [label="Assert.IsTrue(reader.Read())", span="1262-1262", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNegative()", file="JsonSerializerTest.cs"];
m4_735 [label="Assert.IsTrue(reader.Read())", span="1270-1270", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNegative()", file="JsonSerializerTest.cs"];
m4_728 [label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="1260-1260", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNegative()", file="JsonSerializerTest.cs"];
m4_730 [label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="1263-1263", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNegative()", file="JsonSerializerTest.cs"];
m4_732 [label="Assert.AreEqual(JsonToken.Date, reader.TokenType)", span="1266-1266", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNegative()", file="JsonSerializerTest.cs"];
m4_733 [label="Assert.AreEqual(typeof(DateTimeOffset), reader.ValueType)", span="1267-1267", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNegative()", file="JsonSerializerTest.cs"];
m4_734 [label="Assert.AreEqual(new DateTimeOffset(new DateTime(2000, 1, 1), TimeSpan.FromHours(-6)), reader.Value)", span="1268-1268", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNegative()", file="JsonSerializerTest.cs"];
m4_736 [label="Assert.AreEqual(JsonToken.EndObject, reader.TokenType)", span="1271-1271", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNegative()", file="JsonSerializerTest.cs"];
m4_726 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="1257-1257", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNegative()", file="JsonSerializerTest.cs"];
m4_731 [label="reader.ReadAsDateTimeOffset()", span="1265-1265", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNegative()", file="JsonSerializerTest.cs"];
m4_725 [label="string json = @''{''''Offset'''':''''\/Date(946706400000-0600)\/''''}''", span="1255-1255", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNegative()", file="JsonSerializerTest.cs"];
m4_737 [label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNegative()", span="1253-1253", cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNegative()", file="JsonSerializerTest.cs"];
m4_483 [label="Entry Newtonsoft.Json.JsonSerializer.JsonSerializer()", span="286-286", cluster="Newtonsoft.Json.JsonSerializer.JsonSerializer()", file="JsonSerializerTest.cs"];
m4_196 [label="Entry string.String(char, int)", span="0-0", cluster="string.String(char, int)", file="JsonSerializerTest.cs"];
m5_9 [label="Entry Newtonsoft.Json.Tests.Documentation.Samples.Serializer.SerializeWithJsonSerializerToFile.File.WriteAllText(string, string)", span="79-79", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.SerializeWithJsonSerializerToFile.File.WriteAllText(string, string)", file="SerializeWithJsonSerializerToFile.cs"];
m5_10 [label="Entry Newtonsoft.Json.Tests.Documentation.Samples.Serializer.SerializeWithJsonSerializerToFile.File.CreateText(string)", span="74-74", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.SerializeWithJsonSerializerToFile.File.CreateText(string)", file="SerializeWithJsonSerializerToFile.cs"];
m5_11 [label="Entry Newtonsoft.Json.JsonSerializer.JsonSerializer()", span="445-445", cluster="Newtonsoft.Json.JsonSerializer.JsonSerializer()", file="SerializeWithJsonSerializerToFile.cs"];
m5_8 [label="Exit Newtonsoft.Json.Linq.JPropertyDescriptor.CastInstance(object)", span="53-53", cluster="Newtonsoft.Json.Linq.JPropertyDescriptor.CastInstance(object)", file="SerializeWithJsonSerializerToFile.cs"];
m5_6 [label="Exit Newtonsoft.Json.Tests.Documentation.Samples.Serializer.SerializeWithJsonSerializerToFile.Example()", span="51-51", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.SerializeWithJsonSerializerToFile.Example()", file="SerializeWithJsonSerializerToFile.cs"];
m5_7 [label="Entry Newtonsoft.Json.Tests.Documentation.Samples.Serializer.SerializeWithJsonSerializerToFile.Movie.Movie()", span="43-43", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.SerializeWithJsonSerializerToFile.Movie.Movie()", file="SerializeWithJsonSerializerToFile.cs"];
m5_12 [label="Entry Newtonsoft.Json.JsonSerializer.Serialize(System.IO.TextWriter, object)", span="831-831", cluster="Newtonsoft.Json.JsonSerializer.Serialize(System.IO.TextWriter, object)", file="SerializeWithJsonSerializerToFile.cs"];
m5_13 [label="return new StreamWriter(new MemoryStream());", span="76-76", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.SerializeWithJsonSerializerToFile.File.CreateText(string)", file="SerializeWithJsonSerializerToFile.cs", color=green, community=0];
m5_14 [label="Exit Newtonsoft.Json.Tests.Documentation.Samples.Serializer.SerializeWithJsonSerializerToFile.File.CreateText(string)", span="74-74", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.SerializeWithJsonSerializerToFile.File.CreateText(string)", file="SerializeWithJsonSerializerToFile.cs"];
m5_15 [label="Entry System.IO.StreamWriter.StreamWriter(System.IO.Stream)", span="0-0", cluster="System.IO.StreamWriter.StreamWriter(System.IO.Stream)", file="SerializeWithJsonSerializerToFile.cs"];
m5_0 [label="Entry Newtonsoft.Json.Tests.Documentation.Samples.Serializer.SerializeWithJsonSerializerToFile.Example()", span="51-51", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.SerializeWithJsonSerializerToFile.Example()", file="SerializeWithJsonSerializerToFile.cs"];
m5_1 [label="Movie movie = new Movie\r\n            {\r\n                Name = ''Bad Boys'',\r\n                Year = 1995\r\n            }", span="54-58", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.SerializeWithJsonSerializerToFile.Example()", file="SerializeWithJsonSerializerToFile.cs"];
m5_2 [label="File.WriteAllText(@''c:\movie.json'', JsonConvert.SerializeObject(movie))", span="61-61", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.SerializeWithJsonSerializerToFile.Example()", file="SerializeWithJsonSerializerToFile.cs"];
m5_3 [label="StreamWriter file = File.CreateText(@''c:\movie.json'')", span="64-64", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.SerializeWithJsonSerializerToFile.Example()", file="SerializeWithJsonSerializerToFile.cs"];
m5_4 [label="JsonSerializer serializer = new JsonSerializer()", span="66-66", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.SerializeWithJsonSerializerToFile.Example()", file="SerializeWithJsonSerializerToFile.cs"];
m5_5 [label="serializer.Serialize(file, movie)", span="67-67", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.SerializeWithJsonSerializerToFile.Example()", file="SerializeWithJsonSerializerToFile.cs"];
m5_18 [label="Entry Newtonsoft.Json.Linq.JPropertyDescriptor.SetValue(object, object)", span="101-101", cluster="Newtonsoft.Json.Linq.JPropertyDescriptor.SetValue(object, object)", file="SerializeWithJsonSerializerToFile.cs"];
m5_19 [label="JToken token = (value is JToken) ? (JToken) value : new JValue(value)", span="103-103", cluster="Newtonsoft.Json.Linq.JPropertyDescriptor.SetValue(object, object)", file="SerializeWithJsonSerializerToFile.cs"];
m5_20 [label="CastInstance(component)[Name] = token", span="105-105", cluster="Newtonsoft.Json.Linq.JPropertyDescriptor.SetValue(object, object)", file="SerializeWithJsonSerializerToFile.cs"];
m5_21 [label="Exit Newtonsoft.Json.Linq.JPropertyDescriptor.SetValue(object, object)", span="101-101", cluster="Newtonsoft.Json.Linq.JPropertyDescriptor.SetValue(object, object)", file="SerializeWithJsonSerializerToFile.cs"];
m5_16 [label="Entry Newtonsoft.Json.Linq.JPropertyDescriptor.ResetValue(object)", span="91-91", cluster="Newtonsoft.Json.Linq.JPropertyDescriptor.ResetValue(object)", file="SerializeWithJsonSerializerToFile.cs"];
m5_17 [label="Exit Newtonsoft.Json.Linq.JPropertyDescriptor.ResetValue(object)", span="91-91", cluster="Newtonsoft.Json.Linq.JPropertyDescriptor.ResetValue(object)", file="SerializeWithJsonSerializerToFile.cs"];
m5_22 [label="Entry Newtonsoft.Json.Linq.JValue.JValue(object)", span="148-148", cluster="Newtonsoft.Json.Linq.JValue.JValue(object)", file="SerializeWithJsonSerializerToFile.cs"];
m5_23 [label="Entry Newtonsoft.Json.Linq.JPropertyDescriptor.ShouldSerializeValue(object)", span="116-116", cluster="Newtonsoft.Json.Linq.JPropertyDescriptor.ShouldSerializeValue(object)", file="SerializeWithJsonSerializerToFile.cs"];
m5_24 [label="return false;", span="118-118", cluster="Newtonsoft.Json.Linq.JPropertyDescriptor.ShouldSerializeValue(object)", file="SerializeWithJsonSerializerToFile.cs"];
m5_25 [label="Exit Newtonsoft.Json.Linq.JPropertyDescriptor.ShouldSerializeValue(object)", span="116-116", cluster="Newtonsoft.Json.Linq.JPropertyDescriptor.ShouldSerializeValue(object)", file="SerializeWithJsonSerializerToFile.cs"];
m5_26 [label="Newtonsoft.Json.Linq.JPropertyDescriptor", span="", file="SerializeWithJsonSerializerToFile.cs"];
m6_382 [label="Entry System.Collections.IEnumerable.Cast<TResult>()", span="0-0", cluster="System.Collections.IEnumerable.Cast<TResult>()", file="TypeExtensions.cs"];
m6_594 [label="Entry string.GetHashCode()", span="0-0", cluster="string.GetHashCode()", file="TypeExtensions.cs"];
m6_461 [label="Entry System.Type.GetProperty(string, System.Reflection.BindingFlags, System.Reflection.Binder, System.Type, System.Type[], System.Reflection.ParameterModifier[])", span="0-0", cluster="System.Type.GetProperty(string, System.Reflection.BindingFlags, System.Reflection.Binder, System.Type, System.Type[], System.Reflection.ParameterModifier[])", file="TypeExtensions.cs"];
m6_505 [label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.RemoveFlag(System.Reflection.BindingFlags, System.Reflection.BindingFlags)", span="993-993", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.RemoveFlag(System.Reflection.BindingFlags, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_506 [label="return ((bindingAttr & flag) == flag)\r\n                ? bindingAttr ^ flag\r\n                : bindingAttr;", span="995-997", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.RemoveFlag(System.Reflection.BindingFlags, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_507 [label="Exit Newtonsoft.Json.Utilities.ReflectionUtils.RemoveFlag(System.Reflection.BindingFlags, System.Reflection.BindingFlags)", span="993-993", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.RemoveFlag(System.Reflection.BindingFlags, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_199 [label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.GetDictionaryKeyValueTypes(System.Type, out System.Type, out System.Type)", span="412-412", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetDictionaryKeyValueTypes(System.Type, out System.Type, out System.Type)", file="TypeExtensions.cs"];
m6_200 [label="ValidationUtils.ArgumentNotNull(dictionaryType, nameof(dictionaryType))", span="414-414", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetDictionaryKeyValueTypes(System.Type, out System.Type, out System.Type)", file="TypeExtensions.cs"];
m6_202 [label="ImplementsGenericDefinition(dictionaryType, typeof(IDictionary<,>), out genericDictionaryType)", span="417-417", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetDictionaryKeyValueTypes(System.Type, out System.Type, out System.Type)", file="TypeExtensions.cs"];
m6_204 [label="throw new Exception(''Type {0} is not a dictionary.''.FormatWith(CultureInfo.InvariantCulture, dictionaryType));", span="421-421", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetDictionaryKeyValueTypes(System.Type, out System.Type, out System.Type)", file="TypeExtensions.cs"];
m6_209 [label="typeof(IDictionary).IsAssignableFrom(dictionaryType)", span="430-430", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetDictionaryKeyValueTypes(System.Type, out System.Type, out System.Type)", file="TypeExtensions.cs"];
m6_213 [label="throw new Exception(''Type {0} is not a dictionary.''.FormatWith(CultureInfo.InvariantCulture, dictionaryType));", span="437-437", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetDictionaryKeyValueTypes(System.Type, out System.Type, out System.Type)", file="TypeExtensions.cs"];
m6_201 [label="Type genericDictionaryType", span="416-416", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetDictionaryKeyValueTypes(System.Type, out System.Type, out System.Type)", file="TypeExtensions.cs"];
m6_203 [label="genericDictionaryType.IsGenericTypeDefinition()", span="419-419", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetDictionaryKeyValueTypes(System.Type, out System.Type, out System.Type)", file="TypeExtensions.cs"];
m6_205 [label="Type[] dictionaryGenericArguments = genericDictionaryType.GetGenericArguments()", span="424-424", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetDictionaryKeyValueTypes(System.Type, out System.Type, out System.Type)", file="TypeExtensions.cs"];
m6_206 [label="keyType = dictionaryGenericArguments[0]", span="426-426", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetDictionaryKeyValueTypes(System.Type, out System.Type, out System.Type)", file="TypeExtensions.cs"];
m6_207 [label="valueType = dictionaryGenericArguments[1]", span="427-427", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetDictionaryKeyValueTypes(System.Type, out System.Type, out System.Type)", file="TypeExtensions.cs"];
m6_208 [label="return;", span="428-428", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetDictionaryKeyValueTypes(System.Type, out System.Type, out System.Type)", file="TypeExtensions.cs"];
m6_210 [label="keyType = null", span="432-432", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetDictionaryKeyValueTypes(System.Type, out System.Type, out System.Type)", file="TypeExtensions.cs"];
m6_211 [label="valueType = null", span="433-433", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetDictionaryKeyValueTypes(System.Type, out System.Type, out System.Type)", file="TypeExtensions.cs"];
m6_212 [label="return;", span="434-434", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetDictionaryKeyValueTypes(System.Type, out System.Type, out System.Type)", file="TypeExtensions.cs"];
m6_214 [label="Exit Newtonsoft.Json.Utilities.ReflectionUtils.GetDictionaryKeyValueTypes(System.Type, out System.Type, out System.Type)", span="412-412", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetDictionaryKeyValueTypes(System.Type, out System.Type, out System.Type)", file="TypeExtensions.cs"];
m6_537 [label="Entry System.Reflection.PropertyInfo.GetBaseDefinition()", span="115-115", cluster="System.Reflection.PropertyInfo.GetBaseDefinition()", file="TypeExtensions.cs"];
m6_153 [label="Entry System.Type.IsInterface()", span="144-144", cluster="System.Type.IsInterface()", file="TypeExtensions.cs"];
m6_81 [label="Entry System.Text.StringBuilder.StringBuilder()", span="0-0", cluster="System.Text.StringBuilder.StringBuilder()", file="TypeExtensions.cs"];
m6_229 [label="Entry System.ArgumentException.ArgumentException(string, string)", span="0-0", cluster="System.ArgumentException.ArgumentException(string, string)", file="TypeExtensions.cs"];
m6_14 [label="Entry Newtonsoft.Json.Utilities.ValidationUtils.ArgumentNotNull(object, string)", span="31-31", cluster="Newtonsoft.Json.Utilities.ValidationUtils.ArgumentNotNull(object, string)", file="TypeExtensions.cs"];
m6_416 [label="Entry System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, bool)", span="0-0", cluster="System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, bool)", file="TypeExtensions.cs"];
m6_182 [label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.GetCollectionItemType(System.Type)", span="386-386", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetCollectionItemType(System.Type)", file="TypeExtensions.cs"];
m6_183 [label="ValidationUtils.ArgumentNotNull(type, nameof(type))", span="388-388", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetCollectionItemType(System.Type)", file="TypeExtensions.cs"];
m6_185 [label="type.IsArray", span="391-391", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetCollectionItemType(System.Type)", file="TypeExtensions.cs"];
m6_186 [label="return type.GetElementType();", span="393-393", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetCollectionItemType(System.Type)", file="TypeExtensions.cs"];
m6_187 [label="ImplementsGenericDefinition(type, typeof(IEnumerable<>), out genericListType)", span="395-395", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetCollectionItemType(System.Type)", file="TypeExtensions.cs"];
m6_189 [label="throw new Exception(''Type {0} is not a collection.''.FormatWith(CultureInfo.InvariantCulture, type));", span="399-399", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetCollectionItemType(System.Type)", file="TypeExtensions.cs"];
m6_191 [label="typeof(IEnumerable).IsAssignableFrom(type)", span="404-404", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetCollectionItemType(System.Type)", file="TypeExtensions.cs"];
m6_193 [label="throw new Exception(''Type {0} is not a collection.''.FormatWith(CultureInfo.InvariantCulture, type));", span="409-409", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetCollectionItemType(System.Type)", file="TypeExtensions.cs"];
m6_184 [label="Type genericListType", span="389-389", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetCollectionItemType(System.Type)", file="TypeExtensions.cs"];
m6_188 [label="genericListType.IsGenericTypeDefinition()", span="397-397", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetCollectionItemType(System.Type)", file="TypeExtensions.cs"];
m6_190 [label="return genericListType.GetGenericArguments()[0];", span="402-402", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetCollectionItemType(System.Type)", file="TypeExtensions.cs"];
m6_192 [label="return null;", span="406-406", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetCollectionItemType(System.Type)", file="TypeExtensions.cs"];
m6_194 [label="Exit Newtonsoft.Json.Utilities.ReflectionUtils.GetCollectionItemType(System.Type)", span="386-386", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetCollectionItemType(System.Type)", file="TypeExtensions.cs"];
m6_383 [label="Entry System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.ToArray<TSource>()", file="TypeExtensions.cs"];
m6_595 [label="Entry Newtonsoft.Json.Utilities.TypeNameKey.Equals(object)", span="1145-1145", cluster="Newtonsoft.Json.Utilities.TypeNameKey.Equals(object)", file="TypeExtensions.cs"];
m6_596 [label="!(obj is TypeNameKey)", span="1147-1147", cluster="Newtonsoft.Json.Utilities.TypeNameKey.Equals(object)", file="TypeExtensions.cs"];
m6_598 [label="return Equals((TypeNameKey)obj);", span="1152-1152", cluster="Newtonsoft.Json.Utilities.TypeNameKey.Equals(object)", file="TypeExtensions.cs"];
m6_597 [label="return false;", span="1149-1149", cluster="Newtonsoft.Json.Utilities.TypeNameKey.Equals(object)", file="TypeExtensions.cs"];
m6_599 [label="Exit Newtonsoft.Json.Utilities.TypeNameKey.Equals(object)", span="1145-1145", cluster="Newtonsoft.Json.Utilities.TypeNameKey.Equals(object)", file="TypeExtensions.cs"];
m6_242 [label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberValue(System.Reflection.MemberInfo, object)", span="507-507", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberValue(System.Reflection.MemberInfo, object)", file="TypeExtensions.cs"];
m6_243 [label="ValidationUtils.ArgumentNotNull(member, nameof(member))", span="509-509", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberValue(System.Reflection.MemberInfo, object)", file="TypeExtensions.cs"];
m6_244 [label="ValidationUtils.ArgumentNotNull(target, nameof(target))", span="510-510", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberValue(System.Reflection.MemberInfo, object)", file="TypeExtensions.cs"];
m6_245 [label="member.MemberType()", span="512-512", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberValue(System.Reflection.MemberInfo, object)", file="TypeExtensions.cs"];
m6_247 [label="return ((FieldInfo)member).GetValue(target);", span="515-515", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberValue(System.Reflection.MemberInfo, object)", file="TypeExtensions.cs"];
m6_249 [label="return ((PropertyInfo)member).GetValue(target, null);", span="519-519", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberValue(System.Reflection.MemberInfo, object)", file="TypeExtensions.cs"];
m6_251 [label="throw new ArgumentException(''MemberInfo '{0}' has index parameters''.FormatWith(CultureInfo.InvariantCulture, member.Name), e);", span="523-523", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberValue(System.Reflection.MemberInfo, object)", file="TypeExtensions.cs"];
m6_252 [label="throw new ArgumentException(''MemberInfo '{0}' is not of type FieldInfo or PropertyInfo''.FormatWith(CultureInfo.InvariantCulture, CultureInfo.InvariantCulture, member.Name), nameof(member));", span="526-526", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberValue(System.Reflection.MemberInfo, object)", file="TypeExtensions.cs"];
m6_246 [label="MemberTypes.Field", span="514-514", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberValue(System.Reflection.MemberInfo, object)", file="TypeExtensions.cs"];
m6_248 [label="MemberTypes.Property", span="516-516", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberValue(System.Reflection.MemberInfo, object)", file="TypeExtensions.cs"];
m6_250 [label=TargetParameterCountException, span="521-521", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberValue(System.Reflection.MemberInfo, object)", file="TypeExtensions.cs"];
m6_253 [label="Exit Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberValue(System.Reflection.MemberInfo, object)", span="507-507", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberValue(System.Reflection.MemberInfo, object)", file="TypeExtensions.cs"];
m6_583 [label="Entry System.DateTime.DateTime()", span="0-0", cluster="System.DateTime.DateTime()", file="TypeExtensions.cs"];
m6_3 [label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.IsVirtual(System.Reflection.PropertyInfo)", span="96-96", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.IsVirtual(System.Reflection.PropertyInfo)", file="TypeExtensions.cs"];
m6_4 [label="ValidationUtils.ArgumentNotNull(propertyInfo, nameof(propertyInfo))", span="98-98", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.IsVirtual(System.Reflection.PropertyInfo)", file="TypeExtensions.cs"];
m6_5 [label="MethodInfo m = propertyInfo.GetGetMethod()", span="100-100", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.IsVirtual(System.Reflection.PropertyInfo)", file="TypeExtensions.cs"];
m6_8 [label="m = propertyInfo.GetSetMethod()", span="106-106", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.IsVirtual(System.Reflection.PropertyInfo)", file="TypeExtensions.cs"];
m6_6 [label="m != null && m.IsVirtual", span="101-101", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.IsVirtual(System.Reflection.PropertyInfo)", file="TypeExtensions.cs"];
m6_7 [label="return true;", span="103-103", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.IsVirtual(System.Reflection.PropertyInfo)", file="TypeExtensions.cs"];
m6_9 [label="m != null && m.IsVirtual", span="107-107", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.IsVirtual(System.Reflection.PropertyInfo)", file="TypeExtensions.cs"];
m6_10 [label="return true;", span="109-109", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.IsVirtual(System.Reflection.PropertyInfo)", file="TypeExtensions.cs"];
m6_11 [label="return false;", span="112-112", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.IsVirtual(System.Reflection.PropertyInfo)", file="TypeExtensions.cs"];
m6_12 [label="Exit Newtonsoft.Json.Utilities.ReflectionUtils.IsVirtual(System.Reflection.PropertyInfo)", span="96-96", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.IsVirtual(System.Reflection.PropertyInfo)", file="TypeExtensions.cs"];
m6_53 [label="Entry System.Runtime.Serialization.SerializationBinder.BindToName(System.Type, out string, out string)", span="0-0", cluster="System.Runtime.Serialization.SerializationBinder.BindToName(System.Type, out string, out string)", file="TypeExtensions.cs"];
m6_82 [label="Entry System.Text.StringBuilder.Append(char)", span="0-0", cluster="System.Text.StringBuilder.Append(char)", file="TypeExtensions.cs"];
m6_16 [label="Entry System.Reflection.PropertyInfo.GetSetMethod()", span="0-0", cluster="System.Reflection.PropertyInfo.GetSetMethod()", file="TypeExtensions.cs"];
m6_332 [label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.GetFields(System.Type, System.Reflection.BindingFlags)", span="926-926", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetFields(System.Type, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_467 [label="ValidationUtils.ArgumentNotNull(targetType, nameof(targetType))", span="928-928", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetFields(System.Type, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_468 [label="List<MemberInfo> fieldInfos = new List<MemberInfo>(targetType.GetFields(bindingAttr))", span="930-930", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetFields(System.Type, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_469 [label="GetChildPrivateFields(fieldInfos, targetType, bindingAttr)", span="934-934", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetFields(System.Type, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_470 [label="return fieldInfos.Cast<FieldInfo>();", span="937-937", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetFields(System.Type, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_471 [label="Exit Newtonsoft.Json.Utilities.ReflectionUtils.GetFields(System.Type, System.Reflection.BindingFlags)", span="926-926", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetFields(System.Type, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_117 [label="Entry System.Type.IsGenericType()", span="153-153", cluster="System.Type.IsGenericType()", file="TypeExtensions.cs"];
m6_374 [label="Entry System.Collections.Generic.IEnumerable<TSource>.FirstOrDefault<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.FirstOrDefault<TSource>()", file="TypeExtensions.cs"];
m6_340 [label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.List<T>.Add(T)", file="TypeExtensions.cs"];
m6_288 [label="Entry System.Reflection.PropertyInfo.GetGetMethod(bool)", span="0-0", cluster="System.Reflection.PropertyInfo.GetGetMethod(bool)", file="TypeExtensions.cs"];
m6_414 [label="Entry System.Attribute.GetCustomAttributes(System.Reflection.Module, bool)", span="0-0", cluster="System.Attribute.GetCustomAttributes(System.Reflection.Module, bool)", file="TypeExtensions.cs"];
m6_258 [label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.SetMemberValue(System.Reflection.MemberInfo, object, object)", span="536-536", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.SetMemberValue(System.Reflection.MemberInfo, object, object)", file="TypeExtensions.cs"];
m6_259 [label="ValidationUtils.ArgumentNotNull(member, nameof(member))", span="538-538", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.SetMemberValue(System.Reflection.MemberInfo, object, object)", file="TypeExtensions.cs"];
m6_260 [label="ValidationUtils.ArgumentNotNull(target, nameof(target))", span="539-539", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.SetMemberValue(System.Reflection.MemberInfo, object, object)", file="TypeExtensions.cs"];
m6_261 [label="member.MemberType()", span="541-541", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.SetMemberValue(System.Reflection.MemberInfo, object, object)", file="TypeExtensions.cs"];
m6_263 [label="((FieldInfo)member).SetValue(target, value)", span="544-544", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.SetMemberValue(System.Reflection.MemberInfo, object, object)", file="TypeExtensions.cs"];
m6_265 [label="((PropertyInfo)member).SetValue(target, value, null)", span="547-547", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.SetMemberValue(System.Reflection.MemberInfo, object, object)", file="TypeExtensions.cs"];
m6_266 [label="throw new ArgumentException(''MemberInfo '{0}' must be of type FieldInfo or PropertyInfo''.FormatWith(CultureInfo.InvariantCulture, member.Name), nameof(member));", span="550-550", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.SetMemberValue(System.Reflection.MemberInfo, object, object)", file="TypeExtensions.cs"];
m6_262 [label="MemberTypes.Field", span="543-543", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.SetMemberValue(System.Reflection.MemberInfo, object, object)", file="TypeExtensions.cs"];
m6_264 [label="MemberTypes.Property", span="546-546", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.SetMemberValue(System.Reflection.MemberInfo, object, object)", file="TypeExtensions.cs"];
m6_267 [label="Exit Newtonsoft.Json.Utilities.ReflectionUtils.SetMemberValue(System.Reflection.MemberInfo, object, object)", span="536-536", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.SetMemberValue(System.Reflection.MemberInfo, object, object)", file="TypeExtensions.cs"];
m6_418 [label="Entry System.Reflection.ICustomAttributeProvider.GetCustomAttributes(bool)", span="0-0", cluster="System.Reflection.ICustomAttributeProvider.GetCustomAttributes(bool)", file="TypeExtensions.cs"];
m6_431 [label="Entry System.Nullable<T>.GetValueOrDefault()", span="0-0", cluster="System.Nullable<T>.GetValueOrDefault()", file="TypeExtensions.cs"];
m6_538 [label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.IsMethodOverridden(System.Type, System.Type, string)", span="1064-1064", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.IsMethodOverridden(System.Type, System.Type, string)", file="TypeExtensions.cs"];
m6_539 [label="bool isMethodOverriden = currentType.GetMethods(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance)\r\n                .Any(info =>\r\n                    info.Name == method &&\r\n                    // check that the method overrides the original on DynamicObjectProxy\r\n                    info.DeclaringType != methodDeclaringType\r\n                    && info.GetBaseDefinition().DeclaringType == methodDeclaringType\r\n                )", span="1066-1072", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.IsMethodOverridden(System.Type, System.Type, string)", file="TypeExtensions.cs"];
m6_540 [label="return isMethodOverriden;", span="1074-1074", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.IsMethodOverridden(System.Type, System.Type, string)", file="TypeExtensions.cs"];
m6_541 [label="Exit Newtonsoft.Json.Utilities.ReflectionUtils.IsMethodOverridden(System.Type, System.Type, string)", span="1064-1064", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.IsMethodOverridden(System.Type, System.Type, string)", file="TypeExtensions.cs"];
m6_289 [label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.CanSetMemberValue(System.Reflection.MemberInfo, bool, bool)", span="604-604", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.CanSetMemberValue(System.Reflection.MemberInfo, bool, bool)", file="TypeExtensions.cs"];
m6_290 [label="member.MemberType()", span="606-606", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.CanSetMemberValue(System.Reflection.MemberInfo, bool, bool)", file="TypeExtensions.cs"];
m6_292 [label="FieldInfo fieldInfo = (FieldInfo)member", span="609-609", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.CanSetMemberValue(System.Reflection.MemberInfo, bool, bool)", file="TypeExtensions.cs"];
m6_295 [label="fieldInfo.IsInitOnly && !canSetReadOnly", span="615-615", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.CanSetMemberValue(System.Reflection.MemberInfo, bool, bool)", file="TypeExtensions.cs"];
m6_297 [label=nonPublic, span="619-619", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.CanSetMemberValue(System.Reflection.MemberInfo, bool, bool)", file="TypeExtensions.cs"];
m6_303 [label="PropertyInfo propertyInfo = (PropertyInfo)member", span="629-629", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.CanSetMemberValue(System.Reflection.MemberInfo, bool, bool)", file="TypeExtensions.cs"];
m6_306 [label=nonPublic, span="635-635", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.CanSetMemberValue(System.Reflection.MemberInfo, bool, bool)", file="TypeExtensions.cs"];
m6_308 [label="return (propertyInfo.GetSetMethod(nonPublic) != null);", span="639-639", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.CanSetMemberValue(System.Reflection.MemberInfo, bool, bool)", file="TypeExtensions.cs"];
m6_291 [label="MemberTypes.Field", span="608-608", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.CanSetMemberValue(System.Reflection.MemberInfo, bool, bool)", file="TypeExtensions.cs"];
m6_302 [label="MemberTypes.Property", span="628-628", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.CanSetMemberValue(System.Reflection.MemberInfo, bool, bool)", file="TypeExtensions.cs"];
m6_309 [label="return false;", span="641-641", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.CanSetMemberValue(System.Reflection.MemberInfo, bool, bool)", file="TypeExtensions.cs"];
m6_293 [label="fieldInfo.IsLiteral", span="611-611", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.CanSetMemberValue(System.Reflection.MemberInfo, bool, bool)", file="TypeExtensions.cs"];
m6_299 [label="fieldInfo.IsPublic", span="623-623", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.CanSetMemberValue(System.Reflection.MemberInfo, bool, bool)", file="TypeExtensions.cs"];
m6_294 [label="return false;", span="613-613", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.CanSetMemberValue(System.Reflection.MemberInfo, bool, bool)", file="TypeExtensions.cs"];
m6_296 [label="return false;", span="617-617", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.CanSetMemberValue(System.Reflection.MemberInfo, bool, bool)", file="TypeExtensions.cs"];
m6_298 [label="return true;", span="621-621", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.CanSetMemberValue(System.Reflection.MemberInfo, bool, bool)", file="TypeExtensions.cs"];
m6_300 [label="return true;", span="625-625", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.CanSetMemberValue(System.Reflection.MemberInfo, bool, bool)", file="TypeExtensions.cs"];
m6_301 [label="return false;", span="627-627", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.CanSetMemberValue(System.Reflection.MemberInfo, bool, bool)", file="TypeExtensions.cs"];
m6_304 [label="!propertyInfo.CanWrite", span="631-631", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.CanSetMemberValue(System.Reflection.MemberInfo, bool, bool)", file="TypeExtensions.cs"];
m6_305 [label="return false;", span="633-633", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.CanSetMemberValue(System.Reflection.MemberInfo, bool, bool)", file="TypeExtensions.cs"];
m6_307 [label="return true;", span="637-637", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.CanSetMemberValue(System.Reflection.MemberInfo, bool, bool)", file="TypeExtensions.cs"];
m6_310 [label="Exit Newtonsoft.Json.Utilities.ReflectionUtils.CanSetMemberValue(System.Reflection.MemberInfo, bool, bool)", span="604-604", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.CanSetMemberValue(System.Reflection.MemberInfo, bool, bool)", file="TypeExtensions.cs"];
m6_123 [label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.IsGenericDefinition(System.Type, System.Type)", span="281-281", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.IsGenericDefinition(System.Type, System.Type)", file="TypeExtensions.cs"];
m6_124 [label="!type.IsGenericType()", span="283-283", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.IsGenericDefinition(System.Type, System.Type)", file="TypeExtensions.cs"];
m6_126 [label="Type t = type.GetGenericTypeDefinition()", span="288-288", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.IsGenericDefinition(System.Type, System.Type)", file="TypeExtensions.cs"];
m6_127 [label="return (t == genericInterfaceDefinition);", span="289-289", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.IsGenericDefinition(System.Type, System.Type)", file="TypeExtensions.cs"];
m6_125 [label="return false;", span="285-285", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.IsGenericDefinition(System.Type, System.Type)", file="TypeExtensions.cs"];
m6_128 [label="Exit Newtonsoft.Json.Utilities.ReflectionUtils.IsGenericDefinition(System.Type, System.Type)", span="281-281", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.IsGenericDefinition(System.Type, System.Type)", file="TypeExtensions.cs"];
m6_100 [label="Entry System.Type.GetConstructors(System.Reflection.BindingFlags)", span="0-0", cluster="System.Type.GetConstructors(System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_337 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", file="TypeExtensions.cs"];
m6_412 [label="Entry System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, bool)", span="0-0", cluster="System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, bool)", file="TypeExtensions.cs"];
m6_463 [label="Entry System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.SingleOrDefault<TSource>()", file="TypeExtensions.cs"];
m6_473 [label="Entry System.Type.GetFields(System.Reflection.BindingFlags)", span="0-0", cluster="System.Type.GetFields(System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_270 [label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.CanReadMemberValue(System.Reflection.MemberInfo, bool)", span="562-562", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.CanReadMemberValue(System.Reflection.MemberInfo, bool)", file="TypeExtensions.cs"];
m6_271 [label="member.MemberType()", span="564-564", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.CanReadMemberValue(System.Reflection.MemberInfo, bool)", file="TypeExtensions.cs", color=green, community=0];
m6_273 [label="FieldInfo fieldInfo = (FieldInfo)member", span="567-567", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.CanReadMemberValue(System.Reflection.MemberInfo, bool)", file="TypeExtensions.cs", color=green, community=0];
m6_274 [label=nonPublic, span="569-569", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.CanReadMemberValue(System.Reflection.MemberInfo, bool)", file="TypeExtensions.cs"];
m6_280 [label="PropertyInfo propertyInfo = (PropertyInfo)member", span="579-579", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.CanReadMemberValue(System.Reflection.MemberInfo, bool)", file="TypeExtensions.cs"];
m6_283 [label=nonPublic, span="585-585", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.CanReadMemberValue(System.Reflection.MemberInfo, bool)", file="TypeExtensions.cs"];
m6_285 [label="return (propertyInfo.GetGetMethod(nonPublic) != null);", span="589-589", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.CanReadMemberValue(System.Reflection.MemberInfo, bool)", file="TypeExtensions.cs"];
m6_272 [label="MemberTypes.Field", span="566-566", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.CanReadMemberValue(System.Reflection.MemberInfo, bool)", file="TypeExtensions.cs", color=green, community=0];
m6_279 [label="MemberTypes.Property", span="578-578", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.CanReadMemberValue(System.Reflection.MemberInfo, bool)", file="TypeExtensions.cs"];
m6_286 [label="return false;", span="591-591", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.CanReadMemberValue(System.Reflection.MemberInfo, bool)", file="TypeExtensions.cs"];
m6_276 [label="fieldInfo.IsPublic", span="573-573", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.CanReadMemberValue(System.Reflection.MemberInfo, bool)", file="TypeExtensions.cs"];
m6_275 [label="return true;", span="571-571", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.CanReadMemberValue(System.Reflection.MemberInfo, bool)", file="TypeExtensions.cs"];
m6_277 [label="return true;", span="575-575", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.CanReadMemberValue(System.Reflection.MemberInfo, bool)", file="TypeExtensions.cs"];
m6_278 [label="return false;", span="577-577", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.CanReadMemberValue(System.Reflection.MemberInfo, bool)", file="TypeExtensions.cs"];
m6_281 [label="!propertyInfo.CanRead", span="581-581", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.CanReadMemberValue(System.Reflection.MemberInfo, bool)", file="TypeExtensions.cs"];
m6_282 [label="return false;", span="583-583", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.CanReadMemberValue(System.Reflection.MemberInfo, bool)", file="TypeExtensions.cs"];
m6_284 [label="return true;", span="587-587", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.CanReadMemberValue(System.Reflection.MemberInfo, bool)", file="TypeExtensions.cs"];
m6_287 [label="Exit Newtonsoft.Json.Utilities.ReflectionUtils.CanReadMemberValue(System.Reflection.MemberInfo, bool)", span="562-562", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.CanReadMemberValue(System.Reflection.MemberInfo, bool)", file="TypeExtensions.cs"];
m6_311 [label="Entry System.Reflection.PropertyInfo.GetSetMethod(bool)", span="0-0", cluster="System.Reflection.PropertyInfo.GetSetMethod(bool)", file="TypeExtensions.cs"];
m6_504 [label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.GetChildPrivateProperties(System.Collections.Generic.IList<System.Reflection.PropertyInfo>, System.Type, System.Reflection.BindingFlags)", span="1000-1000", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetChildPrivateProperties(System.Collections.Generic.IList<System.Reflection.PropertyInfo>, System.Type, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_508 [label="(targetType = targetType.BaseType()) != null", span="1007-1007", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetChildPrivateProperties(System.Collections.Generic.IList<System.Reflection.PropertyInfo>, System.Type, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_509 [label="targetType.GetProperties(bindingAttr)", span="1009-1009", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetChildPrivateProperties(System.Collections.Generic.IList<System.Reflection.PropertyInfo>, System.Type, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_512 [label="int index = initialProperties.IndexOf(p => p.Name == subTypeProperty.Name)", span="1017-1017", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetChildPrivateProperties(System.Collections.Generic.IList<System.Reflection.PropertyInfo>, System.Type, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_514 [label="initialProperties.Add(subTypeProperty)", span="1020-1020", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetChildPrivateProperties(System.Collections.Generic.IList<System.Reflection.PropertyInfo>, System.Type, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_515 [label="PropertyInfo childProperty = initialProperties[index]", span="1024-1024", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetChildPrivateProperties(System.Collections.Generic.IList<System.Reflection.PropertyInfo>, System.Type, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_517 [label="initialProperties[index] = subTypeProperty", span="1031-1031", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetChildPrivateProperties(System.Collections.Generic.IList<System.Reflection.PropertyInfo>, System.Type, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_519 [label="int index = initialProperties.IndexOf(p => p.Name == subTypeProperty.Name\r\n                                                                       && p.DeclaringType == subTypeProperty.DeclaringType)", span="1039-1040", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetChildPrivateProperties(System.Collections.Generic.IList<System.Reflection.PropertyInfo>, System.Type, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_521 [label="initialProperties.Add(subTypeProperty)", span="1044-1044", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetChildPrivateProperties(System.Collections.Generic.IList<System.Reflection.PropertyInfo>, System.Type, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_522 [label="int index = initialProperties.IndexOf(p => p.Name == subTypeProperty.Name\r\n                                                                       && p.IsVirtual()\r\n                                                                       && p.GetBaseDefinition() != null\r\n                                                                       && p.GetBaseDefinition().DeclaringType.IsAssignableFrom(subTypeProperty.GetBaseDefinition().DeclaringType))", span="1049-1052", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetChildPrivateProperties(System.Collections.Generic.IList<System.Reflection.PropertyInfo>, System.Type, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_524 [label="initialProperties.Add(subTypeProperty)", span="1056-1056", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetChildPrivateProperties(System.Collections.Generic.IList<System.Reflection.PropertyInfo>, System.Type, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_510 [label="PropertyInfo subTypeProperty = propertyInfo", span="1011-1011", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetChildPrivateProperties(System.Collections.Generic.IList<System.Reflection.PropertyInfo>, System.Type, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_511 [label="!IsPublic(subTypeProperty)", span="1013-1013", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetChildPrivateProperties(System.Collections.Generic.IList<System.Reflection.PropertyInfo>, System.Type, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_518 [label="!subTypeProperty.IsVirtual()", span="1037-1037", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetChildPrivateProperties(System.Collections.Generic.IList<System.Reflection.PropertyInfo>, System.Type, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_513 [label="index == -1", span="1018-1018", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetChildPrivateProperties(System.Collections.Generic.IList<System.Reflection.PropertyInfo>, System.Type, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_516 [label="!IsPublic(childProperty)", span="1026-1026", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetChildPrivateProperties(System.Collections.Generic.IList<System.Reflection.PropertyInfo>, System.Type, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_520 [label="index == -1", span="1042-1042", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetChildPrivateProperties(System.Collections.Generic.IList<System.Reflection.PropertyInfo>, System.Type, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_523 [label="index == -1", span="1054-1054", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetChildPrivateProperties(System.Collections.Generic.IList<System.Reflection.PropertyInfo>, System.Type, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_525 [label="Exit Newtonsoft.Json.Utilities.ReflectionUtils.GetChildPrivateProperties(System.Collections.Generic.IList<System.Reflection.PropertyInfo>, System.Type, System.Reflection.BindingFlags)", span="1000-1000", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetChildPrivateProperties(System.Collections.Generic.IList<System.Reflection.PropertyInfo>, System.Type, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_181 [label="Entry System.Type.BaseType()", span="171-171", cluster="System.Type.BaseType()", file="TypeExtensions.cs"];
m6_450 [label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberInfoFromType(System.Type, System.Reflection.MemberInfo)", span="909-909", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberInfoFromType(System.Type, System.Reflection.MemberInfo)", file="TypeExtensions.cs"];
m6_451 [label="BindingFlags bindingAttr = BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic", span="911-911", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberInfoFromType(System.Type, System.Reflection.MemberInfo)", file="TypeExtensions.cs"];
m6_452 [label="memberInfo.MemberType()", span="913-913", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberInfoFromType(System.Type, System.Reflection.MemberInfo)", file="TypeExtensions.cs"];
m6_454 [label="PropertyInfo propertyInfo = (PropertyInfo)memberInfo", span="916-916", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberInfoFromType(System.Type, System.Reflection.MemberInfo)", file="TypeExtensions.cs"];
m6_456 [label="return targetType.GetProperty(propertyInfo.Name, bindingAttr, null, propertyInfo.PropertyType, types, null);", span="920-920", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberInfoFromType(System.Type, System.Reflection.MemberInfo)", file="TypeExtensions.cs"];
m6_457 [label="return targetType.GetMember(memberInfo.Name, memberInfo.MemberType(), bindingAttr).SingleOrDefault();", span="922-922", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberInfoFromType(System.Type, System.Reflection.MemberInfo)", file="TypeExtensions.cs"];
m6_453 [label="MemberTypes.Property", span="915-915", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberInfoFromType(System.Type, System.Reflection.MemberInfo)", file="TypeExtensions.cs"];
m6_455 [label="Type[] types = propertyInfo.GetIndexParameters().Select(p => p.ParameterType).ToArray()", span="918-918", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberInfoFromType(System.Type, System.Reflection.MemberInfo)", file="TypeExtensions.cs"];
m6_458 [label="Exit Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberInfoFromType(System.Type, System.Reflection.MemberInfo)", span="909-909", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberInfoFromType(System.Type, System.Reflection.MemberInfo)", file="TypeExtensions.cs"];
m6_472 [label="Entry System.Collections.Generic.List<T>.List(System.Collections.Generic.IEnumerable<T>)", span="0-0", cluster="System.Collections.Generic.List<T>.List(System.Collections.Generic.IEnumerable<T>)", file="TypeExtensions.cs"];
m6_195 [label="Entry System.Type.GetElementType()", span="0-0", cluster="System.Type.GetElementType()", file="TypeExtensions.cs"];
m6_156 [label="Entry string.FormatWith(System.IFormatProvider, object)", span="47-47", cluster="string.FormatWith(System.IFormatProvider, object)", file="TypeExtensions.cs"];
m6_84 [label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.HasDefaultConstructor(System.Type, bool)", span="227-227", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.HasDefaultConstructor(System.Type, bool)", file="TypeExtensions.cs"];
m6_85 [label="ValidationUtils.ArgumentNotNull(t, nameof(t))", span="229-229", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.HasDefaultConstructor(System.Type, bool)", file="TypeExtensions.cs"];
m6_86 [label="t.IsValueType()", span="231-231", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.HasDefaultConstructor(System.Type, bool)", file="TypeExtensions.cs"];
m6_88 [label="return (GetDefaultConstructor(t, nonPublic) != null);", span="236-236", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.HasDefaultConstructor(System.Type, bool)", file="TypeExtensions.cs"];
m6_87 [label="return true;", span="233-233", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.HasDefaultConstructor(System.Type, bool)", file="TypeExtensions.cs"];
m6_89 [label="Exit Newtonsoft.Json.Utilities.ReflectionUtils.HasDefaultConstructor(System.Type, bool)", span="227-227", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.HasDefaultConstructor(System.Type, bool)", file="TypeExtensions.cs"];
m6_341 [label="Entry System.Collections.Generic.ICollection<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.ICollection<T>.Add(T)", file="TypeExtensions.cs"];
m6_434 [label="Entry Newtonsoft.Json.Utilities.TypeNameKey.TypeNameKey(string, string)", span="1134-1134", cluster="Newtonsoft.Json.Utilities.TypeNameKey.TypeNameKey(string, string)", file="TypeExtensions.cs"];
m6_588 [label="AssemblyName = assemblyName", span="1136-1136", cluster="Newtonsoft.Json.Utilities.TypeNameKey.TypeNameKey(string, string)", file="TypeExtensions.cs"];
m6_589 [label="TypeName = typeName", span="1137-1137", cluster="Newtonsoft.Json.Utilities.TypeNameKey.TypeNameKey(string, string)", file="TypeExtensions.cs"];
m6_590 [label="Exit Newtonsoft.Json.Utilities.TypeNameKey.TypeNameKey(string, string)", span="1134-1134", cluster="Newtonsoft.Json.Utilities.TypeNameKey.TypeNameKey(string, string)", file="TypeExtensions.cs"];
m6_241 [label="Entry System.Reflection.PropertyInfo.GetIndexParameters()", span="0-0", cluster="System.Reflection.PropertyInfo.GetIndexParameters()", file="TypeExtensions.cs"];
m6_113 [label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.IsNullableType(System.Type)", span="267-267", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.IsNullableType(System.Type)", file="TypeExtensions.cs"];
m6_114 [label="ValidationUtils.ArgumentNotNull(t, nameof(t))", span="269-269", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.IsNullableType(System.Type)", file="TypeExtensions.cs"];
m6_115 [label="return (t.IsGenericType() && t.GetGenericTypeDefinition() == typeof(Nullable<>));", span="271-271", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.IsNullableType(System.Type)", file="TypeExtensions.cs"];
m6_116 [label="Exit Newtonsoft.Json.Utilities.ReflectionUtils.IsNullableType(System.Type)", span="267-267", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.IsNullableType(System.Type)", file="TypeExtensions.cs"];
m6_162 [label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.InheritsGenericDefinition(System.Type, System.Type, out System.Type)", span="346-346", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.InheritsGenericDefinition(System.Type, System.Type, out System.Type)", file="TypeExtensions.cs"];
m6_163 [label="ValidationUtils.ArgumentNotNull(type, nameof(type))", span="348-348", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.InheritsGenericDefinition(System.Type, System.Type, out System.Type)", file="TypeExtensions.cs"];
m6_164 [label="ValidationUtils.ArgumentNotNull(genericClassDefinition, nameof(genericClassDefinition))", span="349-349", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.InheritsGenericDefinition(System.Type, System.Type, out System.Type)", file="TypeExtensions.cs"];
m6_165 [label="!genericClassDefinition.IsClass() || !genericClassDefinition.IsGenericTypeDefinition()", span="351-351", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.InheritsGenericDefinition(System.Type, System.Type, out System.Type)", file="TypeExtensions.cs"];
m6_166 [label="throw new ArgumentNullException('''{0}' is not a generic class definition.''.FormatWith(CultureInfo.InvariantCulture, genericClassDefinition));", span="353-353", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.InheritsGenericDefinition(System.Type, System.Type, out System.Type)", file="TypeExtensions.cs"];
m6_167 [label="return InheritsGenericDefinitionInternal(type, genericClassDefinition, out implementingType);", span="356-356", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.InheritsGenericDefinition(System.Type, System.Type, out System.Type)", file="TypeExtensions.cs"];
m6_168 [label="Exit Newtonsoft.Json.Utilities.ReflectionUtils.InheritsGenericDefinition(System.Type, System.Type, out System.Type)", span="346-346", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.InheritsGenericDefinition(System.Type, System.Type, out System.Type)", file="TypeExtensions.cs"];
m6_410 [label="Entry System.Attribute.GetCustomAttributes(System.Reflection.Assembly)", span="0-0", cluster="System.Attribute.GetCustomAttributes(System.Reflection.Assembly)", file="TypeExtensions.cs"];
m6_481 [label="Entry System.Reflection.BindingFlags.RemoveFlag(System.Reflection.BindingFlags)", span="993-993", cluster="System.Reflection.BindingFlags.RemoveFlag(System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_413 [label="Entry System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, bool)", span="0-0", cluster="System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, bool)", file="TypeExtensions.cs"];
m6_28 [label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.IsPublic(System.Reflection.PropertyInfo)", span="134-134", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.IsPublic(System.Reflection.PropertyInfo)", file="TypeExtensions.cs"];
m6_29 [label="property.GetGetMethod() != null && property.GetGetMethod().IsPublic", span="136-136", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.IsPublic(System.Reflection.PropertyInfo)", file="TypeExtensions.cs"];
m6_31 [label="property.GetSetMethod() != null && property.GetSetMethod().IsPublic", span="140-140", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.IsPublic(System.Reflection.PropertyInfo)", file="TypeExtensions.cs"];
m6_30 [label="return true;", span="138-138", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.IsPublic(System.Reflection.PropertyInfo)", file="TypeExtensions.cs"];
m6_32 [label="return true;", span="142-142", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.IsPublic(System.Reflection.PropertyInfo)", file="TypeExtensions.cs"];
m6_33 [label="return false;", span="145-145", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.IsPublic(System.Reflection.PropertyInfo)", file="TypeExtensions.cs"];
m6_34 [label="Exit Newtonsoft.Json.Utilities.ReflectionUtils.IsPublic(System.Reflection.PropertyInfo)", span="134-134", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.IsPublic(System.Reflection.PropertyInfo)", file="TypeExtensions.cs"];
m6_228 [label="Entry System.Reflection.MemberInfo.MemberType()", span="107-107", cluster="System.Reflection.MemberInfo.MemberType()", file="TypeExtensions.cs"];
m6_333 [label="Entry System.Collections.Generic.List<T>.AddRange(System.Collections.Generic.IEnumerable<T>)", span="0-0", cluster="System.Collections.Generic.List<T>.AddRange(System.Collections.Generic.IEnumerable<T>)", file="TypeExtensions.cs"];
m6_381 [label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.GetAttributes(object, System.Type, bool)", span="755-755", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetAttributes(object, System.Type, bool)", file="TypeExtensions.cs"];
m6_384 [label="ValidationUtils.ArgumentNotNull(attributeProvider, nameof(attributeProvider))", span="757-757", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetAttributes(object, System.Type, bool)", file="TypeExtensions.cs"];
m6_385 [label="object provider = attributeProvider", span="759-759", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetAttributes(object, System.Type, bool)", file="TypeExtensions.cs"];
m6_388 [label="object[] a = (attributeType != null) ? t.GetCustomAttributes(attributeType, inherit) : t.GetCustomAttributes(inherit)", span="767-767", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetAttributes(object, System.Type, bool)", file="TypeExtensions.cs"];
m6_393 [label="return (attributeType != null) ? Attribute.GetCustomAttributes(a, attributeType) : Attribute.GetCustomAttributes(a);", span="784-784", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetAttributes(object, System.Type, bool)", file="TypeExtensions.cs"];
m6_396 [label="return (attributeType != null) ? Attribute.GetCustomAttributes(m, attributeType, inherit) : Attribute.GetCustomAttributes(m, inherit);", span="790-790", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetAttributes(object, System.Type, bool)", file="TypeExtensions.cs"];
m6_399 [label="return (attributeType != null) ? Attribute.GetCustomAttributes(m, attributeType, inherit) : Attribute.GetCustomAttributes(m, inherit);", span="797-797", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetAttributes(object, System.Type, bool)", file="TypeExtensions.cs"];
m6_402 [label="return (attributeType != null) ? Attribute.GetCustomAttributes(p, attributeType, inherit) : Attribute.GetCustomAttributes(p, inherit);", span="804-804", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetAttributes(object, System.Type, bool)", file="TypeExtensions.cs"];
m6_403 [label="ICustomAttributeProvider customAttributeProvider = (ICustomAttributeProvider)attributeProvider", span="808-808", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetAttributes(object, System.Type, bool)", file="TypeExtensions.cs"];
m6_404 [label="object[] result = (attributeType != null) ? customAttributeProvider.GetCustomAttributes(attributeType, inherit) : customAttributeProvider.GetCustomAttributes(inherit)", span="809-809", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetAttributes(object, System.Type, bool)", file="TypeExtensions.cs"];
m6_386 [label="provider is Type", span="764-764", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetAttributes(object, System.Type, bool)", file="TypeExtensions.cs"];
m6_387 [label="Type t = (Type)provider", span="766-766", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetAttributes(object, System.Type, bool)", file="TypeExtensions.cs"];
m6_391 [label="provider is Assembly", span="781-781", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetAttributes(object, System.Type, bool)", file="TypeExtensions.cs"];
m6_392 [label="Assembly a = (Assembly)provider", span="783-783", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetAttributes(object, System.Type, bool)", file="TypeExtensions.cs"];
m6_394 [label="provider is MemberInfo", span="787-787", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetAttributes(object, System.Type, bool)", file="TypeExtensions.cs"];
m6_395 [label="MemberInfo m = (MemberInfo)provider", span="789-789", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetAttributes(object, System.Type, bool)", file="TypeExtensions.cs"];
m6_397 [label="provider is Module", span="794-794", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetAttributes(object, System.Type, bool)", file="TypeExtensions.cs"];
m6_398 [label="Module m = (Module)provider", span="796-796", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetAttributes(object, System.Type, bool)", file="TypeExtensions.cs"];
m6_400 [label="provider is ParameterInfo", span="801-801", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetAttributes(object, System.Type, bool)", file="TypeExtensions.cs"];
m6_401 [label="ParameterInfo p = (ParameterInfo)provider", span="803-803", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetAttributes(object, System.Type, bool)", file="TypeExtensions.cs"];
m6_389 [label="Attribute[] attributes = a.Cast<Attribute>().ToArray()", span="768-768", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetAttributes(object, System.Type, bool)", file="TypeExtensions.cs"];
m6_390 [label="return attributes;", span="778-778", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetAttributes(object, System.Type, bool)", file="TypeExtensions.cs"];
m6_405 [label="return (Attribute[])result;", span="811-811", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetAttributes(object, System.Type, bool)", file="TypeExtensions.cs"];
m6_406 [label="Exit Newtonsoft.Json.Utilities.ReflectionUtils.GetAttributes(object, System.Type, bool)", span="755-755", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetAttributes(object, System.Type, bool)", file="TypeExtensions.cs"];
m6_257 [label="Entry string.FormatWith(System.IFormatProvider, object, object)", span="52-52", cluster="string.FormatWith(System.IFormatProvider, object, object)", file="TypeExtensions.cs"];
m6_133 [label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.ImplementsGenericDefinition(System.Type, System.Type, out System.Type)", span="298-298", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.ImplementsGenericDefinition(System.Type, System.Type, out System.Type)", file="TypeExtensions.cs"];
m6_134 [label="ValidationUtils.ArgumentNotNull(type, nameof(type))", span="300-300", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.ImplementsGenericDefinition(System.Type, System.Type, out System.Type)", file="TypeExtensions.cs"];
m6_135 [label="ValidationUtils.ArgumentNotNull(genericInterfaceDefinition, nameof(genericInterfaceDefinition))", span="301-301", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.ImplementsGenericDefinition(System.Type, System.Type, out System.Type)", file="TypeExtensions.cs"];
m6_136 [label="!genericInterfaceDefinition.IsInterface() || !genericInterfaceDefinition.IsGenericTypeDefinition()", span="303-303", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.ImplementsGenericDefinition(System.Type, System.Type, out System.Type)", file="TypeExtensions.cs"];
m6_137 [label="throw new ArgumentNullException('''{0}' is not a generic interface definition.''.FormatWith(CultureInfo.InvariantCulture, genericInterfaceDefinition));", span="305-305", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.ImplementsGenericDefinition(System.Type, System.Type, out System.Type)", file="TypeExtensions.cs"];
m6_138 [label="type.IsInterface()", span="308-308", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.ImplementsGenericDefinition(System.Type, System.Type, out System.Type)", file="TypeExtensions.cs"];
m6_139 [label="type.IsGenericType()", span="310-310", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.ImplementsGenericDefinition(System.Type, System.Type, out System.Type)", file="TypeExtensions.cs"];
m6_140 [label="Type interfaceDefinition = type.GetGenericTypeDefinition()", span="312-312", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.ImplementsGenericDefinition(System.Type, System.Type, out System.Type)", file="TypeExtensions.cs"];
m6_141 [label="genericInterfaceDefinition == interfaceDefinition", span="314-314", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.ImplementsGenericDefinition(System.Type, System.Type, out System.Type)", file="TypeExtensions.cs"];
m6_142 [label="implementingType = type", span="316-316", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.ImplementsGenericDefinition(System.Type, System.Type, out System.Type)", file="TypeExtensions.cs"];
m6_144 [label="type.GetInterfaces()", span="322-322", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.ImplementsGenericDefinition(System.Type, System.Type, out System.Type)", file="TypeExtensions.cs"];
m6_147 [label="genericInterfaceDefinition == interfaceDefinition", span="328-328", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.ImplementsGenericDefinition(System.Type, System.Type, out System.Type)", file="TypeExtensions.cs"];
m6_143 [label="return true;", span="317-317", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.ImplementsGenericDefinition(System.Type, System.Type, out System.Type)", file="TypeExtensions.cs"];
m6_145 [label="i.IsGenericType()", span="324-324", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.ImplementsGenericDefinition(System.Type, System.Type, out System.Type)", file="TypeExtensions.cs"];
m6_150 [label="implementingType = null", span="336-336", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.ImplementsGenericDefinition(System.Type, System.Type, out System.Type)", file="TypeExtensions.cs"];
m6_146 [label="Type interfaceDefinition = i.GetGenericTypeDefinition()", span="326-326", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.ImplementsGenericDefinition(System.Type, System.Type, out System.Type)", file="TypeExtensions.cs"];
m6_148 [label="implementingType = i", span="330-330", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.ImplementsGenericDefinition(System.Type, System.Type, out System.Type)", file="TypeExtensions.cs"];
m6_149 [label="return true;", span="331-331", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.ImplementsGenericDefinition(System.Type, System.Type, out System.Type)", file="TypeExtensions.cs"];
m6_151 [label="return false;", span="337-337", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.ImplementsGenericDefinition(System.Type, System.Type, out System.Type)", file="TypeExtensions.cs"];
m6_152 [label="Exit Newtonsoft.Json.Utilities.ReflectionUtils.ImplementsGenericDefinition(System.Type, System.Type, out System.Type)", span="298-298", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.ImplementsGenericDefinition(System.Type, System.Type, out System.Type)", file="TypeExtensions.cs"];
m6_254 [label="Entry System.Reflection.FieldInfo.GetValue(object)", span="0-0", cluster="System.Reflection.FieldInfo.GetValue(object)", file="TypeExtensions.cs"];
m6_129 [label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.ImplementsGenericDefinition(System.Type, System.Type)", span="292-292", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.ImplementsGenericDefinition(System.Type, System.Type)", file="TypeExtensions.cs"];
m6_130 [label="Type implementingType", span="294-294", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.ImplementsGenericDefinition(System.Type, System.Type)", file="TypeExtensions.cs"];
m6_131 [label="return ImplementsGenericDefinition(type, genericInterfaceDefinition, out implementingType);", span="295-295", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.ImplementsGenericDefinition(System.Type, System.Type)", file="TypeExtensions.cs"];
m6_132 [label="Exit Newtonsoft.Json.Utilities.ReflectionUtils.ImplementsGenericDefinition(System.Type, System.Type)", span="292-292", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.ImplementsGenericDefinition(System.Type, System.Type)", file="TypeExtensions.cs"];
m6_373 [label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.GetAttributes<T>(object, bool)", span="742-742", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetAttributes<T>(object, bool)", file="TypeExtensions.cs"];
m6_375 [label="Attribute[] a = GetAttributes(attributeProvider, typeof(T), inherit)", span="744-744", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetAttributes<T>(object, bool)", file="TypeExtensions.cs"];
m6_376 [label="T[] attributes = a as T[]", span="746-746", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetAttributes<T>(object, bool)", file="TypeExtensions.cs"];
m6_379 [label="return a.Cast<T>().ToArray();", span="752-752", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetAttributes<T>(object, bool)", file="TypeExtensions.cs"];
m6_377 [label="attributes != null", span="747-747", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetAttributes<T>(object, bool)", file="TypeExtensions.cs"];
m6_378 [label="return attributes;", span="749-749", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetAttributes<T>(object, bool)", file="TypeExtensions.cs"];
m6_380 [label="Exit Newtonsoft.Json.Utilities.ReflectionUtils.GetAttributes<T>(object, bool)", span="742-742", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetAttributes<T>(object, bool)", file="TypeExtensions.cs"];
m6_459 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="TypeExtensions.cs"];
m6_482 [label="Entry Unk.Where", span="", cluster="Unk.Where", file="TypeExtensions.cs"];
m6_198 [label="Entry System.Type.IsAssignableFrom(System.Type)", span="0-0", cluster="System.Type.IsAssignableFrom(System.Type)", file="TypeExtensions.cs"];
m6_526 [label="Entry System.Collections.Generic.IEnumerable<T>.IndexOf<T>(System.Func<T, bool>)", span="209-209", cluster="System.Collections.Generic.IEnumerable<T>.IndexOf<T>(System.Func<T, bool>)", file="TypeExtensions.cs"];
m6_269 [label="Entry System.Reflection.PropertyInfo.SetValue(object, object, object[])", span="0-0", cluster="System.Reflection.PropertyInfo.SetValue(object, object, object[])", file="TypeExtensions.cs"];
m6_197 [label="Entry System.Type.GetGenericArguments()", span="0-0", cluster="System.Type.GetGenericArguments()", file="TypeExtensions.cs"];
m6_369 [label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.GetAttribute<T>(object, bool)", span="734-734", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetAttribute<T>(object, bool)", file="TypeExtensions.cs"];
m6_370 [label="T[] attributes = GetAttributes<T>(attributeProvider, inherit)", span="736-736", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetAttribute<T>(object, bool)", file="TypeExtensions.cs"];
m6_371 [label="return (attributes != null) ? attributes.FirstOrDefault() : null;", span="738-738", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetAttribute<T>(object, bool)", file="TypeExtensions.cs"];
m6_372 [label="Exit Newtonsoft.Json.Utilities.ReflectionUtils.GetAttribute<T>(object, bool)", span="734-734", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetAttribute<T>(object, bool)", file="TypeExtensions.cs"];
m6_215 [label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberUnderlyingType(System.Reflection.MemberInfo)", span="445-445", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberUnderlyingType(System.Reflection.MemberInfo)", file="TypeExtensions.cs"];
m6_216 [label="ValidationUtils.ArgumentNotNull(member, nameof(member))", span="447-447", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberUnderlyingType(System.Reflection.MemberInfo)", file="TypeExtensions.cs"];
m6_217 [label="member.MemberType()", span="449-449", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberUnderlyingType(System.Reflection.MemberInfo)", file="TypeExtensions.cs"];
m6_219 [label="return ((FieldInfo)member).FieldType;", span="452-452", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberUnderlyingType(System.Reflection.MemberInfo)", file="TypeExtensions.cs"];
m6_221 [label="return ((PropertyInfo)member).PropertyType;", span="454-454", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberUnderlyingType(System.Reflection.MemberInfo)", file="TypeExtensions.cs"];
m6_223 [label="return ((EventInfo)member).EventHandlerType;", span="456-456", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberUnderlyingType(System.Reflection.MemberInfo)", file="TypeExtensions.cs"];
m6_225 [label="return ((MethodInfo)member).ReturnType;", span="458-458", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberUnderlyingType(System.Reflection.MemberInfo)", file="TypeExtensions.cs"];
m6_226 [label="throw new ArgumentException(''MemberInfo must be of type FieldInfo, PropertyInfo, EventInfo or MethodInfo'', nameof(member));", span="460-460", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberUnderlyingType(System.Reflection.MemberInfo)", file="TypeExtensions.cs"];
m6_218 [label="MemberTypes.Field", span="451-451", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberUnderlyingType(System.Reflection.MemberInfo)", file="TypeExtensions.cs"];
m6_220 [label="MemberTypes.Property", span="453-453", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberUnderlyingType(System.Reflection.MemberInfo)", file="TypeExtensions.cs"];
m6_222 [label="MemberTypes.Event", span="455-455", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberUnderlyingType(System.Reflection.MemberInfo)", file="TypeExtensions.cs"];
m6_224 [label="MemberTypes.Method", span="457-457", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberUnderlyingType(System.Reflection.MemberInfo)", file="TypeExtensions.cs"];
m6_227 [label="Exit Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberUnderlyingType(System.Reflection.MemberInfo)", span="445-445", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberUnderlyingType(System.Reflection.MemberInfo)", file="TypeExtensions.cs"];
m6_460 [label="Entry Unk.ToArray", span="", cluster="Unk.ToArray", file="TypeExtensions.cs"];
m6_542 [label="Entry System.Type.GetMethods(System.Reflection.BindingFlags)", span="0-0", cluster="System.Type.GetMethods(System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_91 [label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.GetDefaultConstructor(System.Type, bool)", span="244-244", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetDefaultConstructor(System.Type, bool)", file="TypeExtensions.cs"];
m6_95 [label="BindingFlags bindingFlags = BindingFlags.Instance | BindingFlags.Public", span="246-246", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetDefaultConstructor(System.Type, bool)", file="TypeExtensions.cs"];
m6_96 [label=nonPublic, span="247-247", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetDefaultConstructor(System.Type, bool)", file="TypeExtensions.cs"];
m6_98 [label="return t.GetConstructors(bindingFlags).SingleOrDefault(c => !c.GetParameters().Any());", span="252-252", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetDefaultConstructor(System.Type, bool)", file="TypeExtensions.cs"];
m6_97 [label="bindingFlags = bindingFlags | BindingFlags.NonPublic", span="249-249", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetDefaultConstructor(System.Type, bool)", file="TypeExtensions.cs"];
m6_99 [label="Exit Newtonsoft.Json.Utilities.ReflectionUtils.GetDefaultConstructor(System.Type, bool)", span="244-244", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetDefaultConstructor(System.Type, bool)", file="TypeExtensions.cs"];
m6_365 [label="Entry System.Type.GetMember(string, System.Reflection.BindingFlags)", span="0-0", cluster="System.Type.GetMember(string, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_170 [label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.InheritsGenericDefinitionInternal(System.Type, System.Type, out System.Type)", span="359-359", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.InheritsGenericDefinitionInternal(System.Type, System.Type, out System.Type)", file="TypeExtensions.cs"];
m6_171 [label="currentType.IsGenericType()", span="361-361", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.InheritsGenericDefinitionInternal(System.Type, System.Type, out System.Type)", file="TypeExtensions.cs"];
m6_172 [label="Type currentGenericClassDefinition = currentType.GetGenericTypeDefinition()", span="363-363", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.InheritsGenericDefinitionInternal(System.Type, System.Type, out System.Type)", file="TypeExtensions.cs"];
m6_173 [label="genericClassDefinition == currentGenericClassDefinition", span="365-365", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.InheritsGenericDefinitionInternal(System.Type, System.Type, out System.Type)", file="TypeExtensions.cs"];
m6_174 [label="implementingType = currentType", span="367-367", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.InheritsGenericDefinitionInternal(System.Type, System.Type, out System.Type)", file="TypeExtensions.cs"];
m6_176 [label="currentType.BaseType() == null", span="372-372", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.InheritsGenericDefinitionInternal(System.Type, System.Type, out System.Type)", file="TypeExtensions.cs"];
m6_179 [label="return InheritsGenericDefinitionInternal(currentType.BaseType(), genericClassDefinition, out implementingType);", span="378-378", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.InheritsGenericDefinitionInternal(System.Type, System.Type, out System.Type)", file="TypeExtensions.cs"];
m6_175 [label="return true;", span="368-368", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.InheritsGenericDefinitionInternal(System.Type, System.Type, out System.Type)", file="TypeExtensions.cs"];
m6_177 [label="implementingType = null", span="374-374", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.InheritsGenericDefinitionInternal(System.Type, System.Type, out System.Type)", file="TypeExtensions.cs"];
m6_178 [label="return false;", span="375-375", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.InheritsGenericDefinitionInternal(System.Type, System.Type, out System.Type)", file="TypeExtensions.cs"];
m6_180 [label="Exit Newtonsoft.Json.Utilities.ReflectionUtils.InheritsGenericDefinitionInternal(System.Type, System.Type, out System.Type)", span="359-359", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.InheritsGenericDefinitionInternal(System.Type, System.Type, out System.Type)", file="TypeExtensions.cs"];
m6_169 [label="Entry System.Type.IsClass()", span="198-198", cluster="System.Type.IsClass()", file="TypeExtensions.cs"];
m6_585 [label="Entry System.Guid.Guid()", span="0-0", cluster="System.Guid.Guid()", file="TypeExtensions.cs"];
m6_417 [label="Entry System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type, bool)", span="0-0", cluster="System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type, bool)", file="TypeExtensions.cs"];
m6_92 [label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.GetDefaultConstructor(System.Type)", span="239-239", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetDefaultConstructor(System.Type)", file="TypeExtensions.cs"];
m6_93 [label="return GetDefaultConstructor(t, false);", span="241-241", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetDefaultConstructor(System.Type)", file="TypeExtensions.cs"];
m6_94 [label="Exit Newtonsoft.Json.Utilities.ReflectionUtils.GetDefaultConstructor(System.Type)", span="239-239", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetDefaultConstructor(System.Type)", file="TypeExtensions.cs"];
m6_408 [label="Entry System.Reflection.MemberInfo.GetCustomAttributes(bool)", span="0-0", cluster="System.Reflection.MemberInfo.GetCustomAttributes(bool)", file="TypeExtensions.cs"];
m6_312 [label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.GetFieldsAndProperties(System.Type, System.Reflection.BindingFlags)", span="645-645", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetFieldsAndProperties(System.Type, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_313 [label="List<MemberInfo> targetMembers = new List<MemberInfo>()", span="647-647", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetFieldsAndProperties(System.Type, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_314 [label="targetMembers.AddRange(GetFields(type, bindingAttr))", span="649-649", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetFieldsAndProperties(System.Type, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_315 [label="targetMembers.AddRange(GetProperties(type, bindingAttr))", span="650-650", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetFieldsAndProperties(System.Type, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_326 [label="!IsOverridenGenericMember(memberInfo, bindingAttr) || memberInfo.Name == ''Item''", span="679-679", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetFieldsAndProperties(System.Type, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_316 [label="List<MemberInfo> distinctMembers = new List<MemberInfo>(targetMembers.Count)", span="656-656", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetFieldsAndProperties(System.Type, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_317 [label="targetMembers.GroupBy(m => m.Name)", span="658-658", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetFieldsAndProperties(System.Type, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_321 [label="distinctMembers.Add(members.First())", span="665-665", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetFieldsAndProperties(System.Type, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_328 [label="distinctMembers.AddRange(resolvedMembers)", span="685-685", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetFieldsAndProperties(System.Type, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_329 [label="return distinctMembers;", span="689-689", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetFieldsAndProperties(System.Type, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_318 [label="int count = groupedMember.Count()", span="660-660", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetFieldsAndProperties(System.Type, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_319 [label="IList<MemberInfo> members = groupedMember.ToList()", span="661-661", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetFieldsAndProperties(System.Type, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_320 [label="count == 1", span="663-663", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetFieldsAndProperties(System.Type, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_323 [label=members, span="670-670", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetFieldsAndProperties(System.Type, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_322 [label="IList<MemberInfo> resolvedMembers = new List<MemberInfo>()", span="669-669", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetFieldsAndProperties(System.Type, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_324 [label="resolvedMembers.Count == 0", span="675-675", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetFieldsAndProperties(System.Type, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_325 [label="resolvedMembers.Add(memberInfo)", span="677-677", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetFieldsAndProperties(System.Type, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_327 [label="resolvedMembers.Add(memberInfo)", span="681-681", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetFieldsAndProperties(System.Type, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_330 [label="Exit Newtonsoft.Json.Utilities.ReflectionUtils.GetFieldsAndProperties(System.Type, System.Reflection.BindingFlags)", span="645-645", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetFieldsAndProperties(System.Type, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_582 [label="Entry Newtonsoft.Json.Utilities.ConvertUtils.GetTypeCode(System.Type)", span="185-185", cluster="Newtonsoft.Json.Utilities.ConvertUtils.GetTypeCode(System.Type)", file="TypeExtensions.cs"];
m6_55 [label="Entry System.ArgumentOutOfRangeException.ArgumentOutOfRangeException()", span="0-0", cluster="System.ArgumentOutOfRangeException.ArgumentOutOfRangeException()", file="TypeExtensions.cs"];
m6_122 [label="Entry System.Nullable.GetUnderlyingType(System.Type)", span="0-0", cluster="System.Nullable.GetUnderlyingType(System.Type)", file="TypeExtensions.cs"];
m6_411 [label="Entry System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, bool)", span="0-0", cluster="System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, bool)", file="TypeExtensions.cs"];
m6_155 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)", file="TypeExtensions.cs"];
m6_237 [label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.IsIndexedProperty(System.Reflection.PropertyInfo)", span="494-494", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.IsIndexedProperty(System.Reflection.PropertyInfo)", file="TypeExtensions.cs"];
m6_238 [label="ValidationUtils.ArgumentNotNull(property, nameof(property))", span="496-496", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.IsIndexedProperty(System.Reflection.PropertyInfo)", file="TypeExtensions.cs"];
m6_239 [label="return (property.GetIndexParameters().Length > 0);", span="498-498", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.IsIndexedProperty(System.Reflection.PropertyInfo)", file="TypeExtensions.cs"];
m6_240 [label="Exit Newtonsoft.Json.Utilities.ReflectionUtils.IsIndexedProperty(System.Reflection.PropertyInfo)", span="494-494", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.IsIndexedProperty(System.Reflection.PropertyInfo)", file="TypeExtensions.cs"];
m6_230 [label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.IsIndexedProperty(System.Reflection.MemberInfo)", span="471-471", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.IsIndexedProperty(System.Reflection.MemberInfo)", file="TypeExtensions.cs"];
m6_231 [label="ValidationUtils.ArgumentNotNull(member, nameof(member))", span="473-473", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.IsIndexedProperty(System.Reflection.MemberInfo)", file="TypeExtensions.cs"];
m6_232 [label="PropertyInfo propertyInfo = member as PropertyInfo", span="475-475", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.IsIndexedProperty(System.Reflection.MemberInfo)", file="TypeExtensions.cs"];
m6_233 [label="propertyInfo != null", span="477-477", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.IsIndexedProperty(System.Reflection.MemberInfo)", file="TypeExtensions.cs"];
m6_234 [label="return IsIndexedProperty(propertyInfo);", span="479-479", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.IsIndexedProperty(System.Reflection.MemberInfo)", file="TypeExtensions.cs"];
m6_235 [label="return false;", span="483-483", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.IsIndexedProperty(System.Reflection.MemberInfo)", file="TypeExtensions.cs"];
m6_236 [label="Exit Newtonsoft.Json.Utilities.ReflectionUtils.IsIndexedProperty(System.Reflection.MemberInfo)", span="471-471", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.IsIndexedProperty(System.Reflection.MemberInfo)", file="TypeExtensions.cs"];
m6_600 [label="Entry Newtonsoft.Json.Utilities.TypeNameKey.Equals(Newtonsoft.Json.Utilities.TypeNameKey)", span="1155-1155", cluster="Newtonsoft.Json.Utilities.TypeNameKey.Equals(Newtonsoft.Json.Utilities.TypeNameKey)", file="TypeExtensions.cs"];
m6_601 [label="return (AssemblyName == other.AssemblyName && TypeName == other.TypeName);", span="1157-1157", cluster="Newtonsoft.Json.Utilities.TypeNameKey.Equals(Newtonsoft.Json.Utilities.TypeNameKey)", file="TypeExtensions.cs"];
m6_602 [label="Exit Newtonsoft.Json.Utilities.TypeNameKey.Equals(Newtonsoft.Json.Utilities.TypeNameKey)", span="1155-1155", cluster="Newtonsoft.Json.Utilities.TypeNameKey.Equals(Newtonsoft.Json.Utilities.TypeNameKey)", file="TypeExtensions.cs"];
m6_335 [label="Entry System.Collections.Generic.List<T>.List(int)", span="0-0", cluster="System.Collections.Generic.List<T>.List(int)", file="TypeExtensions.cs"];
m6_105 [label="Entry System.Reflection.MethodBase.GetParameters()", span="0-0", cluster="System.Reflection.MethodBase.GetParameters()", file="TypeExtensions.cs"];
m6_334 [label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.GetProperties(System.Type, System.Reflection.BindingFlags)", span="962-962", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetProperties(System.Type, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_488 [label="ValidationUtils.ArgumentNotNull(targetType, nameof(targetType))", span="964-964", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetProperties(System.Type, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_489 [label="List<PropertyInfo> propertyInfos = new List<PropertyInfo>(targetType.GetProperties(bindingAttr))", span="966-966", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetProperties(System.Type, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_490 [label="targetType.IsInterface()", span="969-969", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetProperties(System.Type, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_491 [label="targetType.GetInterfaces()", span="971-971", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetProperties(System.Type, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_492 [label="propertyInfos.AddRange(i.GetProperties(bindingAttr))", span="973-973", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetProperties(System.Type, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_493 [label="GetChildPrivateProperties(propertyInfos, targetType, bindingAttr)", span="977-977", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetProperties(System.Type, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_497 [label="member.DeclaringType != targetType", span="983-983", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetProperties(System.Type, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_495 [label="i < propertyInfos.Count", span="980-980", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetProperties(System.Type, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_496 [label="PropertyInfo member = propertyInfos[i]", span="982-982", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetProperties(System.Type, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_499 [label="propertyInfos[i] = declaredMember", span="986-986", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetProperties(System.Type, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_501 [label="return propertyInfos;", span="990-990", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetProperties(System.Type, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_494 [label="int i = 0", span="980-980", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetProperties(System.Type, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_500 [label="i++", span="980-980", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetProperties(System.Type, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_498 [label="PropertyInfo declaredMember = (PropertyInfo)GetMemberInfoFromType(member.DeclaringType, member)", span="985-985", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetProperties(System.Type, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_502 [label="Exit Newtonsoft.Json.Utilities.ReflectionUtils.GetProperties(System.Type, System.Reflection.BindingFlags)", span="962-962", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetProperties(System.Type, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_157 [label="Entry System.Type.GetInterfaces()", span="0-0", cluster="System.Type.GetInterfaces()", file="TypeExtensions.cs"];
m6_544 [label="Entry lambda expression", span="1067-1071", cluster="lambda expression", file="TypeExtensions.cs"];
m6_102 [label="Entry lambda expression", span="252-252", cluster="lambda expression", file="TypeExtensions.cs"];
m6_103 [label="!c.GetParameters().Any()", span="252-252", cluster="lambda expression", file="TypeExtensions.cs"];
m6_104 [label="Exit lambda expression", span="252-252", cluster="lambda expression", file="TypeExtensions.cs"];
m6_343 [label="Entry lambda expression", span="658-658", cluster="lambda expression", file="TypeExtensions.cs"];
m6_344 [label="m.Name", span="658-658", cluster="lambda expression", file="TypeExtensions.cs"];
m6_345 [label="Exit lambda expression", span="658-658", cluster="lambda expression", file="TypeExtensions.cs"];
m6_464 [label="Entry lambda expression", span="918-918", cluster="lambda expression", file="TypeExtensions.cs"];
m6_465 [label="p.ParameterType", span="918-918", cluster="lambda expression", file="TypeExtensions.cs"];
m6_466 [label="Exit lambda expression", span="918-918", cluster="lambda expression", file="TypeExtensions.cs"];
m6_485 [label="Entry lambda expression", span="954-954", cluster="lambda expression", file="TypeExtensions.cs"];
m6_486 [label="f.IsPrivate", span="954-954", cluster="lambda expression", file="TypeExtensions.cs"];
m6_487 [label="Exit lambda expression", span="954-954", cluster="lambda expression", file="TypeExtensions.cs"];
m6_529 [label="p.Name == subTypeProperty.Name", span="1017-1017", cluster="lambda expression", file="TypeExtensions.cs"];
m6_532 [label="p.Name == subTypeProperty.Name\r\n                                                                       && p.DeclaringType == subTypeProperty.DeclaringType", span="1039-1040", cluster="lambda expression", file="TypeExtensions.cs"];
m6_535 [label="p.Name == subTypeProperty.Name\r\n                                                                       && p.IsVirtual()\r\n                                                                       && p.GetBaseDefinition() != null\r\n                                                                       && p.GetBaseDefinition().DeclaringType.IsAssignableFrom(subTypeProperty.GetBaseDefinition().DeclaringType)", span="1049-1052", cluster="lambda expression", file="TypeExtensions.cs"];
m6_528 [label="Entry lambda expression", span="1017-1017", cluster="lambda expression", file="TypeExtensions.cs"];
m6_531 [label="Entry lambda expression", span="1039-1040", cluster="lambda expression", file="TypeExtensions.cs"];
m6_534 [label="Entry lambda expression", span="1049-1052", cluster="lambda expression", file="TypeExtensions.cs"];
m6_530 [label="Exit lambda expression", span="1017-1017", cluster="lambda expression", file="TypeExtensions.cs"];
m6_533 [label="Exit lambda expression", span="1039-1040", cluster="lambda expression", file="TypeExtensions.cs"];
m6_536 [label="Exit lambda expression", span="1049-1052", cluster="lambda expression", file="TypeExtensions.cs"];
m6_545 [label="info.Name == method &&\r\n                    // check that the method overrides the original on DynamicObjectProxy\r\n                    info.DeclaringType != methodDeclaringType\r\n                    && info.GetBaseDefinition().DeclaringType == methodDeclaringType", span="1068-1071", cluster="lambda expression", file="TypeExtensions.cs"];
m6_546 [label="Exit lambda expression", span="1067-1071", cluster="lambda expression", file="TypeExtensions.cs"];
m6_366 [label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.GetAttribute<T>(object)", span="729-729", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetAttribute<T>(object)", file="TypeExtensions.cs"];
m6_367 [label="return GetAttribute<T>(attributeProvider, true);", span="731-731", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetAttribute<T>(object)", file="TypeExtensions.cs"];
m6_368 [label="Exit Newtonsoft.Json.Utilities.ReflectionUtils.GetAttribute<T>(object)", span="729-729", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetAttribute<T>(object)", file="TypeExtensions.cs"];
m6_432 [label="Entry string.Substring(int, int)", span="0-0", cluster="string.Substring(int, int)", file="TypeExtensions.cs"];
m6_15 [label="Entry System.Reflection.PropertyInfo.GetGetMethod()", span="0-0", cluster="System.Reflection.PropertyInfo.GetGetMethod()", file="TypeExtensions.cs"];
m6_339 [label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", file="TypeExtensions.cs"];
m6_407 [label="Entry System.Reflection.MemberInfo.GetCustomAttributes(System.Type, bool)", span="0-0", cluster="System.Reflection.MemberInfo.GetCustomAttributes(System.Type, bool)", file="TypeExtensions.cs"];
m6_433 [label="Entry string.Trim()", span="0-0", cluster="string.Trim()", file="TypeExtensions.cs"];
m6_27 [label="Entry System.Reflection.MethodInfo.GetBaseDefinition()", span="0-0", cluster="System.Reflection.MethodInfo.GetBaseDefinition()", file="TypeExtensions.cs"];
m6_543 [label="Entry Unk.Any", span="", cluster="Unk.Any", file="TypeExtensions.cs"];
m6_54 [label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.RemoveAssemblyDetails(string)", span="182-182", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.RemoveAssemblyDetails(string)", file="TypeExtensions.cs"];
m6_56 [label="StringBuilder builder = new StringBuilder()", span="184-184", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.RemoveAssemblyDetails(string)", file="TypeExtensions.cs"];
m6_60 [label="i < fullyQualifiedTypeName.Length", span="189-189", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.RemoveAssemblyDetails(string)", file="TypeExtensions.cs"];
m6_61 [label="char current = fullyQualifiedTypeName[i]", span="191-191", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.RemoveAssemblyDetails(string)", file="TypeExtensions.cs"];
m6_57 [label="bool writingAssemblyName = false", span="187-187", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.RemoveAssemblyDetails(string)", file="TypeExtensions.cs"];
m6_66 [label="builder.Append(current)", span="197-197", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.RemoveAssemblyDetails(string)", file="TypeExtensions.cs"];
m6_70 [label="builder.Append(current)", span="202-202", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.RemoveAssemblyDetails(string)", file="TypeExtensions.cs"];
m6_74 [label="builder.Append(current)", span="208-208", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.RemoveAssemblyDetails(string)", file="TypeExtensions.cs"];
m6_77 [label="builder.Append(current)", span="218-218", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.RemoveAssemblyDetails(string)", file="TypeExtensions.cs"];
m6_79 [label="return builder.ToString();", span="224-224", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.RemoveAssemblyDetails(string)", file="TypeExtensions.cs"];
m6_58 [label="bool skippingAssemblyDetails = false", span="188-188", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.RemoveAssemblyDetails(string)", file="TypeExtensions.cs"];
m6_59 [label="int i = 0", span="189-189", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.RemoveAssemblyDetails(string)", file="TypeExtensions.cs"];
m6_78 [label="i++", span="189-189", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.RemoveAssemblyDetails(string)", file="TypeExtensions.cs"];
m6_62 [label=current, span="192-192", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.RemoveAssemblyDetails(string)", file="TypeExtensions.cs"];
m6_63 [label="'['", span="194-194", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.RemoveAssemblyDetails(string)", file="TypeExtensions.cs"];
m6_67 [label="']'", span="199-199", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.RemoveAssemblyDetails(string)", file="TypeExtensions.cs"];
m6_71 [label="','", span="204-204", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.RemoveAssemblyDetails(string)", file="TypeExtensions.cs"];
m6_76 [label="!skippingAssemblyDetails", span="216-216", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.RemoveAssemblyDetails(string)", file="TypeExtensions.cs"];
m6_64 [label="writingAssemblyName = false", span="195-195", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.RemoveAssemblyDetails(string)", file="TypeExtensions.cs"];
m6_65 [label="skippingAssemblyDetails = false", span="196-196", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.RemoveAssemblyDetails(string)", file="TypeExtensions.cs"];
m6_68 [label="writingAssemblyName = false", span="200-200", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.RemoveAssemblyDetails(string)", file="TypeExtensions.cs"];
m6_69 [label="skippingAssemblyDetails = false", span="201-201", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.RemoveAssemblyDetails(string)", file="TypeExtensions.cs"];
m6_72 [label="!writingAssemblyName", span="205-205", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.RemoveAssemblyDetails(string)", file="TypeExtensions.cs"];
m6_73 [label="writingAssemblyName = true", span="207-207", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.RemoveAssemblyDetails(string)", file="TypeExtensions.cs"];
m6_75 [label="skippingAssemblyDetails = true", span="212-212", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.RemoveAssemblyDetails(string)", file="TypeExtensions.cs"];
m6_80 [label="Exit Newtonsoft.Json.Utilities.ReflectionUtils.RemoveAssemblyDetails(string)", span="182-182", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.RemoveAssemblyDetails(string)", file="TypeExtensions.cs"];
m6_342 [label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.IsOverridenGenericMember(System.Reflection.MemberInfo, System.Reflection.BindingFlags)", span="692-692", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.IsOverridenGenericMember(System.Reflection.MemberInfo, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_346 [label="memberInfo.MemberType() != MemberTypes.Property", span="694-694", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.IsOverridenGenericMember(System.Reflection.MemberInfo, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_348 [label="PropertyInfo propertyInfo = (PropertyInfo)memberInfo", span="699-699", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.IsOverridenGenericMember(System.Reflection.MemberInfo, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_357 [label="MemberInfo[] members = genericTypeDefinition.GetMember(propertyInfo.Name, bindingAttr)", span="715-715", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.IsOverridenGenericMember(System.Reflection.MemberInfo, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_347 [label="return false;", span="696-696", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.IsOverridenGenericMember(System.Reflection.MemberInfo, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_349 [label="!IsVirtual(propertyInfo)", span="700-700", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.IsOverridenGenericMember(System.Reflection.MemberInfo, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_351 [label="Type declaringType = propertyInfo.DeclaringType", span="705-705", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.IsOverridenGenericMember(System.Reflection.MemberInfo, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_350 [label="return false;", span="702-702", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.IsOverridenGenericMember(System.Reflection.MemberInfo, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_352 [label="!declaringType.IsGenericType()", span="706-706", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.IsOverridenGenericMember(System.Reflection.MemberInfo, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_354 [label="Type genericTypeDefinition = declaringType.GetGenericTypeDefinition()", span="710-710", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.IsOverridenGenericMember(System.Reflection.MemberInfo, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_353 [label="return false;", span="708-708", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.IsOverridenGenericMember(System.Reflection.MemberInfo, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_355 [label="genericTypeDefinition == null", span="711-711", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.IsOverridenGenericMember(System.Reflection.MemberInfo, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_356 [label="return false;", span="713-713", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.IsOverridenGenericMember(System.Reflection.MemberInfo, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_358 [label="members.Length == 0", span="716-716", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.IsOverridenGenericMember(System.Reflection.MemberInfo, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_360 [label="Type memberUnderlyingType = GetMemberUnderlyingType(members[0])", span="720-720", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.IsOverridenGenericMember(System.Reflection.MemberInfo, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_359 [label="return false;", span="718-718", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.IsOverridenGenericMember(System.Reflection.MemberInfo, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_361 [label="!memberUnderlyingType.IsGenericParameter", span="721-721", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.IsOverridenGenericMember(System.Reflection.MemberInfo, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_362 [label="return false;", span="723-723", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.IsOverridenGenericMember(System.Reflection.MemberInfo, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_363 [label="return true;", span="726-726", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.IsOverridenGenericMember(System.Reflection.MemberInfo, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_364 [label="Exit Newtonsoft.Json.Utilities.ReflectionUtils.IsOverridenGenericMember(System.Reflection.MemberInfo, System.Reflection.BindingFlags)", span="692-692", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.IsOverridenGenericMember(System.Reflection.MemberInfo, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_419 [label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.SplitFullyQualifiedTypeName(string)", span="860-860", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.SplitFullyQualifiedTypeName(string)", file="TypeExtensions.cs"];
m6_420 [label="int? assemblyDelimiterIndex = GetAssemblyDelimiterIndex(fullyQualifiedTypeName)", span="862-862", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.SplitFullyQualifiedTypeName(string)", file="TypeExtensions.cs"];
m6_424 [label="typeName = fullyQualifiedTypeName.Substring(0, assemblyDelimiterIndex.GetValueOrDefault()).Trim()", span="869-869", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.SplitFullyQualifiedTypeName(string)", file="TypeExtensions.cs"];
m6_425 [label="assemblyName = fullyQualifiedTypeName.Substring(assemblyDelimiterIndex.GetValueOrDefault() + 1, fullyQualifiedTypeName.Length - assemblyDelimiterIndex.GetValueOrDefault() - 1).Trim()", span="870-870", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.SplitFullyQualifiedTypeName(string)", file="TypeExtensions.cs"];
m6_426 [label="typeName = fullyQualifiedTypeName", span="874-874", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.SplitFullyQualifiedTypeName(string)", file="TypeExtensions.cs"];
m6_421 [label="string typeName", span="864-864", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.SplitFullyQualifiedTypeName(string)", file="TypeExtensions.cs"];
m6_423 [label="assemblyDelimiterIndex != null", span="867-867", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.SplitFullyQualifiedTypeName(string)", file="TypeExtensions.cs"];
m6_422 [label="string assemblyName", span="865-865", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.SplitFullyQualifiedTypeName(string)", file="TypeExtensions.cs"];
m6_428 [label="return new TypeNameKey(assemblyName, typeName);", span="878-878", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.SplitFullyQualifiedTypeName(string)", file="TypeExtensions.cs"];
m6_427 [label="assemblyName = null", span="875-875", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.SplitFullyQualifiedTypeName(string)", file="TypeExtensions.cs"];
m6_429 [label="Exit Newtonsoft.Json.Utilities.ReflectionUtils.SplitFullyQualifiedTypeName(string)", span="860-860", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.SplitFullyQualifiedTypeName(string)", file="TypeExtensions.cs"];
m6_587 [label="Entry System.Activator.CreateInstance(System.Type)", span="0-0", cluster="System.Activator.CreateInstance(System.Type)", file="TypeExtensions.cs"];
m6_17 [label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.GetBaseDefinition(System.Reflection.PropertyInfo)", span="115-115", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetBaseDefinition(System.Reflection.PropertyInfo)", file="TypeExtensions.cs"];
m6_18 [label="ValidationUtils.ArgumentNotNull(propertyInfo, nameof(propertyInfo))", span="117-117", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetBaseDefinition(System.Reflection.PropertyInfo)", file="TypeExtensions.cs"];
m6_19 [label="MethodInfo m = propertyInfo.GetGetMethod()", span="119-119", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetBaseDefinition(System.Reflection.PropertyInfo)", file="TypeExtensions.cs"];
m6_22 [label="m = propertyInfo.GetSetMethod()", span="125-125", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetBaseDefinition(System.Reflection.PropertyInfo)", file="TypeExtensions.cs"];
m6_20 [label="m != null", span="120-120", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetBaseDefinition(System.Reflection.PropertyInfo)", file="TypeExtensions.cs"];
m6_21 [label="return m.GetBaseDefinition();", span="122-122", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetBaseDefinition(System.Reflection.PropertyInfo)", file="TypeExtensions.cs"];
m6_23 [label="m != null", span="126-126", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetBaseDefinition(System.Reflection.PropertyInfo)", file="TypeExtensions.cs"];
m6_24 [label="return m.GetBaseDefinition();", span="128-128", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetBaseDefinition(System.Reflection.PropertyInfo)", file="TypeExtensions.cs"];
m6_25 [label="return null;", span="131-131", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetBaseDefinition(System.Reflection.PropertyInfo)", file="TypeExtensions.cs"];
m6_26 [label="Exit Newtonsoft.Json.Utilities.ReflectionUtils.GetBaseDefinition(System.Reflection.PropertyInfo)", span="115-115", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetBaseDefinition(System.Reflection.PropertyInfo)", file="TypeExtensions.cs"];
m6_483 [label="Entry Unk.>", span="", cluster="Unk.>", file="TypeExtensions.cs"];
m6_83 [label="Entry System.Text.StringBuilder.ToString()", span="0-0", cluster="System.Text.StringBuilder.ToString()", file="TypeExtensions.cs"];
m6_338 [label="Entry System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", file="TypeExtensions.cs"];
m6_90 [label="Entry System.Type.IsValueType()", span="567-567", cluster="System.Type.IsValueType()", file="TypeExtensions.cs"];
m6_409 [label="Entry System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type)", span="0-0", cluster="System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type)", file="TypeExtensions.cs"];
m6_256 [label="Entry System.ArgumentException.ArgumentException(string, System.Exception)", span="0-0", cluster="System.ArgumentException.ArgumentException(string, System.Exception)", file="TypeExtensions.cs"];
m6_255 [label="Entry System.Reflection.PropertyInfo.GetValue(object, object[])", span="0-0", cluster="System.Reflection.PropertyInfo.GetValue(object, object[])", file="TypeExtensions.cs"];
m6_119 [label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.EnsureNotNullableType(System.Type)", span="274-274", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.EnsureNotNullableType(System.Type)", file="TypeExtensions.cs"];
m6_120 [label="return (IsNullableType(t))\r\n                ? Nullable.GetUnderlyingType(t)\r\n                : t;", span="276-278", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.EnsureNotNullableType(System.Type)", file="TypeExtensions.cs"];
m6_121 [label="Exit Newtonsoft.Json.Utilities.ReflectionUtils.EnsureNotNullableType(System.Type)", span="274-274", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.EnsureNotNullableType(System.Type)", file="TypeExtensions.cs"];
m6_38 [label="Entry object.GetType()", span="0-0", cluster="object.GetType()", file="TypeExtensions.cs"];
m6_547 [label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.GetDefaultValue(System.Type)", span="1077-1077", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetDefaultValue(System.Type)", file="TypeExtensions.cs"];
m6_548 [label="!type.IsValueType()", span="1079-1079", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetDefaultValue(System.Type)", file="TypeExtensions.cs"];
m6_550 [label="ConvertUtils.GetTypeCode(type)", span="1084-1084", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetDefaultValue(System.Type)", file="TypeExtensions.cs"];
m6_578 [label="IsNullable(type)", span="1119-1119", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetDefaultValue(System.Type)", file="TypeExtensions.cs"];
m6_580 [label="return Activator.CreateInstance(type);", span="1125-1125", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetDefaultValue(System.Type)", file="TypeExtensions.cs"];
m6_549 [label="return null;", span="1081-1081", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetDefaultValue(System.Type)", file="TypeExtensions.cs"];
m6_551 [label="PrimitiveTypeCode.Boolean", span="1086-1086", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetDefaultValue(System.Type)", file="TypeExtensions.cs"];
m6_553 [label="PrimitiveTypeCode.Char", span="1088-1088", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetDefaultValue(System.Type)", file="TypeExtensions.cs"];
m6_561 [label="PrimitiveTypeCode.Int64", span="1096-1096", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetDefaultValue(System.Type)", file="TypeExtensions.cs"];
m6_564 [label="PrimitiveTypeCode.Single", span="1099-1099", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetDefaultValue(System.Type)", file="TypeExtensions.cs"];
m6_566 [label="PrimitiveTypeCode.Double", span="1101-1101", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetDefaultValue(System.Type)", file="TypeExtensions.cs"];
m6_568 [label="PrimitiveTypeCode.Decimal", span="1103-1103", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetDefaultValue(System.Type)", file="TypeExtensions.cs"];
m6_570 [label="PrimitiveTypeCode.DateTime", span="1105-1105", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetDefaultValue(System.Type)", file="TypeExtensions.cs"];
m6_572 [label="PrimitiveTypeCode.BigInteger", span="1108-1108", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetDefaultValue(System.Type)", file="TypeExtensions.cs"];
m6_574 [label="PrimitiveTypeCode.Guid", span="1111-1111", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetDefaultValue(System.Type)", file="TypeExtensions.cs"];
m6_576 [label="PrimitiveTypeCode.DateTimeOffset", span="1114-1114", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetDefaultValue(System.Type)", file="TypeExtensions.cs"];
m6_552 [label="return false;", span="1087-1087", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetDefaultValue(System.Type)", file="TypeExtensions.cs"];
m6_554 [label="PrimitiveTypeCode.SByte", span="1089-1089", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetDefaultValue(System.Type)", file="TypeExtensions.cs"];
m6_555 [label="PrimitiveTypeCode.Byte", span="1090-1090", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetDefaultValue(System.Type)", file="TypeExtensions.cs"];
m6_556 [label="PrimitiveTypeCode.Int16", span="1091-1091", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetDefaultValue(System.Type)", file="TypeExtensions.cs"];
m6_557 [label="PrimitiveTypeCode.UInt16", span="1092-1092", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetDefaultValue(System.Type)", file="TypeExtensions.cs"];
m6_558 [label="PrimitiveTypeCode.Int32", span="1093-1093", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetDefaultValue(System.Type)", file="TypeExtensions.cs"];
m6_559 [label="PrimitiveTypeCode.UInt32", span="1094-1094", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetDefaultValue(System.Type)", file="TypeExtensions.cs"];
m6_560 [label="return 0;", span="1095-1095", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetDefaultValue(System.Type)", file="TypeExtensions.cs"];
m6_562 [label="PrimitiveTypeCode.UInt64", span="1097-1097", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetDefaultValue(System.Type)", file="TypeExtensions.cs"];
m6_563 [label="return 0L;", span="1098-1098", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetDefaultValue(System.Type)", file="TypeExtensions.cs"];
m6_565 [label="return 0f;", span="1100-1100", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetDefaultValue(System.Type)", file="TypeExtensions.cs"];
m6_567 [label="return 0.0;", span="1102-1102", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetDefaultValue(System.Type)", file="TypeExtensions.cs"];
m6_569 [label="return 0m;", span="1104-1104", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetDefaultValue(System.Type)", file="TypeExtensions.cs"];
m6_571 [label="return new DateTime();", span="1106-1106", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetDefaultValue(System.Type)", file="TypeExtensions.cs"];
m6_573 [label="return new BigInteger();", span="1109-1109", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetDefaultValue(System.Type)", file="TypeExtensions.cs"];
m6_575 [label="return new Guid();", span="1112-1112", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetDefaultValue(System.Type)", file="TypeExtensions.cs"];
m6_577 [label="return new DateTimeOffset();", span="1115-1115", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetDefaultValue(System.Type)", file="TypeExtensions.cs"];
m6_579 [label="return null;", span="1121-1121", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetDefaultValue(System.Type)", file="TypeExtensions.cs"];
m6_581 [label="Exit Newtonsoft.Json.Utilities.ReflectionUtils.GetDefaultValue(System.Type)", span="1077-1077", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetDefaultValue(System.Type)", file="TypeExtensions.cs"];
m6_430 [label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.GetAssemblyDelimiterIndex(string)", span="881-881", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetAssemblyDelimiterIndex(string)", file="TypeExtensions.cs"];
m6_435 [label="int scope = 0", span="885-885", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetAssemblyDelimiterIndex(string)", file="TypeExtensions.cs"];
m6_437 [label="i < fullyQualifiedTypeName.Length", span="886-886", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetAssemblyDelimiterIndex(string)", file="TypeExtensions.cs"];
m6_438 [label="char current = fullyQualifiedTypeName[i]", span="888-888", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetAssemblyDelimiterIndex(string)", file="TypeExtensions.cs"];
m6_436 [label="int i = 0", span="886-886", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetAssemblyDelimiterIndex(string)", file="TypeExtensions.cs"];
m6_441 [label="scope++", span="892-892", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetAssemblyDelimiterIndex(string)", file="TypeExtensions.cs"];
m6_446 [label="return i;", span="900-900", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetAssemblyDelimiterIndex(string)", file="TypeExtensions.cs"];
m6_447 [label="i++", span="886-886", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetAssemblyDelimiterIndex(string)", file="TypeExtensions.cs"];
m6_448 [label="return null;", span="906-906", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetAssemblyDelimiterIndex(string)", file="TypeExtensions.cs"];
m6_439 [label=current, span="889-889", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetAssemblyDelimiterIndex(string)", file="TypeExtensions.cs"];
m6_440 [label="'['", span="891-891", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetAssemblyDelimiterIndex(string)", file="TypeExtensions.cs"];
m6_442 [label="']'", span="894-894", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetAssemblyDelimiterIndex(string)", file="TypeExtensions.cs"];
m6_444 [label="','", span="897-897", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetAssemblyDelimiterIndex(string)", file="TypeExtensions.cs"];
m6_443 [label="scope--", span="895-895", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetAssemblyDelimiterIndex(string)", file="TypeExtensions.cs"];
m6_445 [label="scope == 0", span="898-898", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetAssemblyDelimiterIndex(string)", file="TypeExtensions.cs"];
m6_449 [label="Exit Newtonsoft.Json.Utilities.ReflectionUtils.GetAssemblyDelimiterIndex(string)", span="881-881", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetAssemblyDelimiterIndex(string)", file="TypeExtensions.cs"];
m6_586 [label="Entry System.DateTimeOffset.DateTimeOffset()", span="0-0", cluster="System.DateTimeOffset.DateTimeOffset()", file="TypeExtensions.cs"];
m6_331 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="TypeExtensions.cs"];
m6_584 [label="Entry BigInteger.cstr", span="", cluster="BigInteger.cstr", file="TypeExtensions.cs"];
m6_268 [label="Entry System.Reflection.FieldInfo.SetValue(object, object)", span="0-0", cluster="System.Reflection.FieldInfo.SetValue(object, object)", file="TypeExtensions.cs"];
m6_107 [label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.IsNullable(System.Type)", span="255-255", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.IsNullable(System.Type)", file="TypeExtensions.cs"];
m6_108 [label="ValidationUtils.ArgumentNotNull(t, nameof(t))", span="257-257", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.IsNullable(System.Type)", file="TypeExtensions.cs"];
m6_109 [label="t.IsValueType()", span="259-259", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.IsNullable(System.Type)", file="TypeExtensions.cs"];
m6_110 [label="return IsNullableType(t);", span="261-261", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.IsNullable(System.Type)", file="TypeExtensions.cs"];
m6_111 [label="return true;", span="264-264", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.IsNullable(System.Type)", file="TypeExtensions.cs"];
m6_112 [label="Exit Newtonsoft.Json.Utilities.ReflectionUtils.IsNullable(System.Type)", span="255-255", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.IsNullable(System.Type)", file="TypeExtensions.cs"];
m6_484 [label="Entry System.Collections.Generic.IList<T>.AddRange<T>(System.Collections.Generic.IEnumerable<T>)", span="64-64", cluster="System.Collections.Generic.IList<T>.AddRange<T>(System.Collections.Generic.IEnumerable<T>)", file="TypeExtensions.cs"];
m6_154 [label="Entry System.Type.IsGenericTypeDefinition()", span="162-162", cluster="System.Type.IsGenericTypeDefinition()", file="TypeExtensions.cs"];
m6_158 [label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.InheritsGenericDefinition(System.Type, System.Type)", span="340-340", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.InheritsGenericDefinition(System.Type, System.Type)", file="TypeExtensions.cs"];
m6_159 [label="Type implementingType", span="342-342", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.InheritsGenericDefinition(System.Type, System.Type)", file="TypeExtensions.cs"];
m6_160 [label="return InheritsGenericDefinition(type, genericClassDefinition, out implementingType);", span="343-343", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.InheritsGenericDefinition(System.Type, System.Type)", file="TypeExtensions.cs"];
m6_161 [label="Exit Newtonsoft.Json.Utilities.ReflectionUtils.InheritsGenericDefinition(System.Type, System.Type)", span="340-340", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.InheritsGenericDefinition(System.Type, System.Type)", file="TypeExtensions.cs"];
m6_106 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="TypeExtensions.cs"];
m6_474 [label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.GetChildPrivateFields(System.Collections.Generic.IList<System.Reflection.MemberInfo>, System.Type, System.Reflection.BindingFlags)", span="941-941", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetChildPrivateFields(System.Collections.Generic.IList<System.Reflection.MemberInfo>, System.Type, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_475 [label="(bindingAttr & BindingFlags.NonPublic) != 0", span="945-945", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetChildPrivateFields(System.Collections.Generic.IList<System.Reflection.MemberInfo>, System.Type, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_476 [label="BindingFlags nonPublicBindingAttr = bindingAttr.RemoveFlag(BindingFlags.Public)", span="948-948", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetChildPrivateFields(System.Collections.Generic.IList<System.Reflection.MemberInfo>, System.Type, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_477 [label="(targetType = targetType.BaseType()) != null", span="950-950", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetChildPrivateFields(System.Collections.Generic.IList<System.Reflection.MemberInfo>, System.Type, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_479 [label="initialFields.AddRange(childPrivateFields)", span="956-956", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetChildPrivateFields(System.Collections.Generic.IList<System.Reflection.MemberInfo>, System.Type, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_478 [label="IEnumerable<MemberInfo> childPrivateFields =\r\n                        targetType.GetFields(nonPublicBindingAttr).Where(f => f.IsPrivate).Cast<MemberInfo>()", span="953-954", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetChildPrivateFields(System.Collections.Generic.IList<System.Reflection.MemberInfo>, System.Type, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_480 [label="Exit Newtonsoft.Json.Utilities.ReflectionUtils.GetChildPrivateFields(System.Collections.Generic.IList<System.Reflection.MemberInfo>, System.Type, System.Reflection.BindingFlags)", span="941-941", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetChildPrivateFields(System.Collections.Generic.IList<System.Reflection.MemberInfo>, System.Type, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_118 [label="Entry System.Type.GetGenericTypeDefinition()", span="0-0", cluster="System.Type.GetGenericTypeDefinition()", file="TypeExtensions.cs"];
m6_503 [label="Entry System.Type.GetProperties(System.Reflection.BindingFlags)", span="0-0", cluster="System.Type.GetProperties(System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_0 [label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.ReflectionUtils()", span="87-87", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.ReflectionUtils()", file="TypeExtensions.cs"];
m6_1 [label="EmptyTypes = Type.EmptyTypes", span="90-90", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.ReflectionUtils()", file="TypeExtensions.cs"];
m6_2 [label="Exit Newtonsoft.Json.Utilities.ReflectionUtils.ReflectionUtils()", span="87-87", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.ReflectionUtils()", file="TypeExtensions.cs"];
m6_13 [label="Entry Unk.nameof", span="", cluster="Unk.nameof", file="TypeExtensions.cs"];
m6_39 [label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.GetTypeName(System.Type, System.Runtime.Serialization.Formatters.FormatterAssemblyStyle, System.Runtime.Serialization.SerializationBinder)", span="153-153", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetTypeName(System.Type, System.Runtime.Serialization.Formatters.FormatterAssemblyStyle, System.Runtime.Serialization.SerializationBinder)", file="TypeExtensions.cs"];
m6_40 [label="string fullyQualifiedTypeName", span="155-155", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetTypeName(System.Type, System.Runtime.Serialization.Formatters.FormatterAssemblyStyle, System.Runtime.Serialization.SerializationBinder)", file="TypeExtensions.cs"];
m6_41 [label="binder != null", span="157-157", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetTypeName(System.Type, System.Runtime.Serialization.Formatters.FormatterAssemblyStyle, System.Runtime.Serialization.SerializationBinder)", file="TypeExtensions.cs"];
m6_43 [label="binder.BindToName(t, out assemblyName, out typeName)", span="160-160", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetTypeName(System.Type, System.Runtime.Serialization.Formatters.FormatterAssemblyStyle, System.Runtime.Serialization.SerializationBinder)", file="TypeExtensions.cs"];
m6_45 [label="fullyQualifiedTypeName = t.AssemblyQualifiedName", span="165-165", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetTypeName(System.Type, System.Runtime.Serialization.Formatters.FormatterAssemblyStyle, System.Runtime.Serialization.SerializationBinder)", file="TypeExtensions.cs"];
m6_46 [label=assemblyFormat, span="171-171", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetTypeName(System.Type, System.Runtime.Serialization.Formatters.FormatterAssemblyStyle, System.Runtime.Serialization.SerializationBinder)", file="TypeExtensions.cs"];
m6_42 [label="string assemblyName, typeName", span="159-159", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetTypeName(System.Type, System.Runtime.Serialization.Formatters.FormatterAssemblyStyle, System.Runtime.Serialization.SerializationBinder)", file="TypeExtensions.cs"];
m6_44 [label="fullyQualifiedTypeName = typeName + (assemblyName == null ? '''' : '', '' + assemblyName)", span="161-161", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetTypeName(System.Type, System.Runtime.Serialization.Formatters.FormatterAssemblyStyle, System.Runtime.Serialization.SerializationBinder)", file="TypeExtensions.cs"];
m6_48 [label="return RemoveAssemblyDetails(fullyQualifiedTypeName);", span="174-174", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetTypeName(System.Type, System.Runtime.Serialization.Formatters.FormatterAssemblyStyle, System.Runtime.Serialization.SerializationBinder)", file="TypeExtensions.cs"];
m6_50 [label="return fullyQualifiedTypeName;", span="176-176", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetTypeName(System.Type, System.Runtime.Serialization.Formatters.FormatterAssemblyStyle, System.Runtime.Serialization.SerializationBinder)", file="TypeExtensions.cs"];
m6_47 [label="FormatterAssemblyStyle.Simple", span="173-173", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetTypeName(System.Type, System.Runtime.Serialization.Formatters.FormatterAssemblyStyle, System.Runtime.Serialization.SerializationBinder)", file="TypeExtensions.cs"];
m6_49 [label="FormatterAssemblyStyle.Full", span="175-175", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetTypeName(System.Type, System.Runtime.Serialization.Formatters.FormatterAssemblyStyle, System.Runtime.Serialization.SerializationBinder)", file="TypeExtensions.cs"];
m6_51 [label="throw new ArgumentOutOfRangeException();", span="178-178", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetTypeName(System.Type, System.Runtime.Serialization.Formatters.FormatterAssemblyStyle, System.Runtime.Serialization.SerializationBinder)", file="TypeExtensions.cs"];
m6_52 [label="Exit Newtonsoft.Json.Utilities.ReflectionUtils.GetTypeName(System.Type, System.Runtime.Serialization.Formatters.FormatterAssemblyStyle, System.Runtime.Serialization.SerializationBinder)", span="153-153", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetTypeName(System.Type, System.Runtime.Serialization.Formatters.FormatterAssemblyStyle, System.Runtime.Serialization.SerializationBinder)", file="TypeExtensions.cs"];
m6_527 [label="Entry System.Reflection.PropertyInfo.IsVirtual()", span="96-96", cluster="System.Reflection.PropertyInfo.IsVirtual()", file="TypeExtensions.cs"];
m6_196 [label="Entry System.Exception.Exception(string)", span="0-0", cluster="System.Exception.Exception(string)", file="TypeExtensions.cs"];
m6_101 [label="Entry Unk.SingleOrDefault", span="", cluster="Unk.SingleOrDefault", file="TypeExtensions.cs"];
m6_415 [label="Entry System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, bool)", span="0-0", cluster="System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, bool)", file="TypeExtensions.cs"];
m6_35 [label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.GetObjectType(object)", span="148-148", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetObjectType(object)", file="TypeExtensions.cs"];
m6_36 [label="return (v != null) ? v.GetType() : null;", span="150-150", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetObjectType(object)", file="TypeExtensions.cs"];
m6_37 [label="Exit Newtonsoft.Json.Utilities.ReflectionUtils.GetObjectType(object)", span="148-148", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetObjectType(object)", file="TypeExtensions.cs"];
m6_336 [label="Entry System.Collections.Generic.IEnumerable<TSource>.GroupBy<TSource, TKey>(System.Func<TSource, TKey>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.GroupBy<TSource, TKey>(System.Func<TSource, TKey>)", file="TypeExtensions.cs"];
m6_591 [label="Entry Newtonsoft.Json.Utilities.TypeNameKey.GetHashCode()", span="1140-1140", cluster="Newtonsoft.Json.Utilities.TypeNameKey.GetHashCode()", file="TypeExtensions.cs"];
m6_592 [label="return (AssemblyName?.GetHashCode() ?? 0) ^ (TypeName?.GetHashCode() ?? 0);", span="1142-1142", cluster="Newtonsoft.Json.Utilities.TypeNameKey.GetHashCode()", file="TypeExtensions.cs"];
m6_593 [label="Exit Newtonsoft.Json.Utilities.TypeNameKey.GetHashCode()", span="1140-1140", cluster="Newtonsoft.Json.Utilities.TypeNameKey.GetHashCode()", file="TypeExtensions.cs"];
m6_462 [label="Entry System.Type.GetMember(string, System.Reflection.MemberTypes, System.Reflection.BindingFlags)", span="0-0", cluster="System.Type.GetMember(string, System.Reflection.MemberTypes, System.Reflection.BindingFlags)", file="TypeExtensions.cs"];
m6_603 [label=subTypeProperty, span="", file="TypeExtensions.cs"];
m6_604 [label="System.Type", span="", file="TypeExtensions.cs"];
m6_605 [label=string, span="", file="TypeExtensions.cs"];
m6_606 [label="out Newtonsoft.Json.Utilities.TypeNameKey", span="", file="TypeExtensions.cs"];
m6_607 [label="Newtonsoft.Json.Utilities.TypeNameKey", span="", file="TypeExtensions.cs"];
m6_608 [label="ref Newtonsoft.Json.Utilities.TypeNameKey", span="", file="TypeExtensions.cs"];
m7_0 [label="Entry Newtonsoft.Json.Tests.Documentation.Samples.Linq.WriteToJsonFile.Example()", span="44-44", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Linq.WriteToJsonFile.Example()", file="WriteToJsonFile.cs"];
m7_3 [label="StreamWriter file = File.CreateText(@''c:\videogames.json'')", span="55-55", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Linq.WriteToJsonFile.Example()", file="WriteToJsonFile.cs"];
m7_2 [label="File.WriteAllText(@''c:\videogames.json'', videogameRatings.ToString())", span="52-52", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Linq.WriteToJsonFile.Example()", file="WriteToJsonFile.cs"];
m7_4 [label="JsonTextWriter writer = new JsonTextWriter(file)", span="56-56", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Linq.WriteToJsonFile.Example()", file="WriteToJsonFile.cs"];
m7_1 [label="JObject videogameRatings = new JObject(\r\n                new JProperty(''Halo'', 9),\r\n                new JProperty(''Starcraft'', 9),\r\n                new JProperty(''Call of Duty'', 7.5))", span="47-50", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Linq.WriteToJsonFile.Example()", file="WriteToJsonFile.cs"];
m7_5 [label="videogameRatings.WriteTo(writer)", span="58-58", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Linq.WriteToJsonFile.Example()", file="WriteToJsonFile.cs"];
m7_6 [label="Exit Newtonsoft.Json.Tests.Documentation.Samples.Linq.WriteToJsonFile.Example()", span="44-44", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Linq.WriteToJsonFile.Example()", file="WriteToJsonFile.cs"];
m7_8 [label="Entry Newtonsoft.Json.Linq.JProperty.JProperty(string, object)", span="293-293", cluster="Newtonsoft.Json.Linq.JProperty.JProperty(string, object)", file="WriteToJsonFile.cs"];
m7_10 [label="Entry Newtonsoft.Json.Tests.Documentation.Samples.Linq.WriteToJsonFile.File.WriteAllText(string, string)", span="70-70", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Linq.WriteToJsonFile.File.WriteAllText(string, string)", file="WriteToJsonFile.cs"];
m7_18 [label="Exit Newtonsoft.Json.Tests.Documentation.Samples.Linq.WriteToJsonFile.File.WriteAllText(string, string)", span="70-70", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Linq.WriteToJsonFile.File.WriteAllText(string, string)", file="WriteToJsonFile.cs"];
m7_17 [label="Entry System.IO.MemoryStream.MemoryStream()", span="0-0", cluster="System.IO.MemoryStream.MemoryStream()", file="WriteToJsonFile.cs"];
m7_13 [label="Entry Newtonsoft.Json.Linq.JObject.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])", span="403-403", cluster="Newtonsoft.Json.Linq.JObject.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])", file="WriteToJsonFile.cs"];
m7_16 [label="Entry System.IO.StreamWriter.StreamWriter(System.IO.Stream)", span="0-0", cluster="System.IO.StreamWriter.StreamWriter(System.IO.Stream)", file="WriteToJsonFile.cs"];
m7_9 [label="Entry Newtonsoft.Json.Linq.JToken.ToString()", span="410-410", cluster="Newtonsoft.Json.Linq.JToken.ToString()", file="WriteToJsonFile.cs"];
m7_12 [label="Entry Newtonsoft.Json.JsonTextWriter.JsonTextWriter(System.IO.TextWriter)", span="124-124", cluster="Newtonsoft.Json.JsonTextWriter.JsonTextWriter(System.IO.TextWriter)", file="WriteToJsonFile.cs"];
m7_7 [label="Entry Newtonsoft.Json.Linq.JObject.JObject(params object[])", span="104-104", cluster="Newtonsoft.Json.Linq.JObject.JObject(params object[])", file="WriteToJsonFile.cs"];
m7_11 [label="Entry Newtonsoft.Json.Tests.Documentation.Samples.Linq.WriteToJsonFile.File.CreateText(string)", span="65-65", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Linq.WriteToJsonFile.File.CreateText(string)", file="WriteToJsonFile.cs"];
m7_14 [label="return new StreamWriter(new MemoryStream());", span="67-67", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Linq.WriteToJsonFile.File.CreateText(string)", color=green, community=0, file="WriteToJsonFile.cs"];
m7_15 [label="Exit Newtonsoft.Json.Tests.Documentation.Samples.Linq.WriteToJsonFile.File.CreateText(string)", span="65-65", cluster="Newtonsoft.Json.Tests.Documentation.Samples.Linq.WriteToJsonFile.File.CreateText(string)", file="WriteToJsonFile.cs"];
n0 -> n1  [key=0, style=solid];
n1 -> n0  [key=0, style=bold, color=blue];
n2 -> n3  [key=0, style=solid];
n3 -> n4  [key=0, style=solid];
n3 -> n5  [key=2, style=dotted];
n4 -> n2  [key=0, style=bold, color=blue];
m0_419 -> m0_420  [key=0, style=solid];
m0_421 -> m0_10  [key=2, style=dotted];
m0_421 -> m0_11  [key=2, style=dotted];
m0_421 -> m0_422  [key=0, style=solid];
m0_421 -> m0_423  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_421 -> m0_424  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_423 -> m0_12  [key=2, style=dotted];
m0_423 -> m0_424  [key=0, style=solid];
m0_422 -> m0_121  [key=2, style=dotted];
m0_422 -> m0_423  [key=0, style=solid];
m0_420 -> m0_372  [key=2, style=dotted];
m0_420 -> m0_113  [key=2, style=dotted];
m0_420 -> m0_421  [key=0, style=solid];
m0_420 -> m0_83  [key=2, style=dotted];
m0_420 -> m0_84  [key=2, style=dotted];
m0_424 -> m0_372  [key=2, style=dotted];
m0_424 -> m0_357  [key=2, style=dotted];
m0_424 -> m0_358  [key=2, style=dotted];
m0_424 -> m0_425  [key=0, style=solid];
m0_424 -> m0_83  [key=2, style=dotted];
m0_424 -> m0_84  [key=2, style=dotted];
m0_425 -> m0_419  [key=0, style=bold, color=blue];
m0_490 -> m0_491  [key=0, style=solid];
m0_492 -> m0_10  [key=2, style=dotted];
m0_492 -> m0_11  [key=2, style=dotted];
m0_492 -> m0_493  [key=0, style=solid];
m0_492 -> m0_494  [key=1, style=dashed, color=darkseagreen4, label=results];
m0_494 -> m0_12  [key=2, style=dotted];
m0_494 -> m0_495  [key=0, style=solid];
m0_493 -> m0_12  [key=2, style=dotted];
m0_493 -> m0_494  [key=0, style=solid];
m0_491 -> m0_492  [key=0, style=solid];
m0_491 -> m0_494  [key=1, style=dashed, color=darkseagreen4, label=a];
m0_491 -> m0_489  [key=2, style=dotted];
m0_495 -> m0_490  [key=0, style=bold, color=blue];
m0_114 -> m0_115  [key=0, style=solid];
m0_118 -> m0_12  [key=2, style=dotted];
m0_118 -> m0_119  [key=0, style=solid];
m0_119 -> m0_12  [key=2, style=dotted];
m0_119 -> m0_120  [key=0, style=solid];
m0_117 -> m0_121  [key=2, style=dotted];
m0_117 -> m0_118  [key=0, style=solid];
m0_116 -> m0_118  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_116 -> m0_119  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_116 -> m0_117  [key=0, style=solid];
m0_116 -> m0_85  [key=2, style=dotted];
m0_115 -> m0_116  [key=0, style=solid];
m0_115 -> m0_83  [key=2, style=dotted];
m0_115 -> m0_84  [key=2, style=dotted];
m0_120 -> m0_114  [key=0, style=bold, color=blue];
m0_440 -> m0_441  [key=0, style=solid];
m0_442 -> m0_10  [key=2, style=dotted];
m0_442 -> m0_11  [key=2, style=dotted];
m0_442 -> m0_443  [key=0, style=solid];
m0_442 -> m0_444  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_442 -> m0_445  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_442 -> m0_446  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_444 -> m0_12  [key=2, style=dotted];
m0_444 -> m0_445  [key=0, style=solid];
m0_443 -> m0_121  [key=2, style=dotted];
m0_443 -> m0_444  [key=0, style=solid];
m0_445 -> m0_357  [key=2, style=dotted];
m0_445 -> m0_358  [key=2, style=dotted];
m0_445 -> m0_446  [key=0, style=solid];
m0_445 -> m0_83  [key=2, style=dotted];
m0_445 -> m0_84  [key=2, style=dotted];
m0_446 -> m0_357  [key=2, style=dotted];
m0_446 -> m0_358  [key=2, style=dotted];
m0_446 -> m0_447  [key=0, style=solid];
m0_446 -> m0_83  [key=2, style=dotted];
m0_446 -> m0_84  [key=2, style=dotted];
m0_441 -> m0_113  [key=2, style=dotted];
m0_441 -> m0_442  [key=0, style=solid];
m0_441 -> m0_83  [key=2, style=dotted];
m0_441 -> m0_84  [key=2, style=dotted];
m0_447 -> m0_440  [key=0, style=bold, color=blue];
m0_400 -> m0_401  [key=0, style=solid];
m0_403 -> m0_12  [key=2, style=dotted];
m0_403 -> m0_404  [key=0, style=solid];
m0_402 -> m0_403  [key=0, style=solid];
m0_402 -> m0_85  [key=2, style=dotted];
m0_401 -> m0_402  [key=0, style=solid];
m0_401 -> m0_9  [key=2, style=dotted];
m0_404 -> m0_400  [key=0, style=bold, color=blue];
m0_313 -> m0_314  [key=0, style=solid];
m0_315 -> m0_10  [key=2, style=dotted];
m0_315 -> m0_11  [key=2, style=dotted];
m0_315 -> m0_316  [key=0, style=solid];
m0_315 -> m0_317  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_315 -> m0_318  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_315 -> m0_319  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_315 -> m0_320  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_315 -> m0_321  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_317 -> m0_12  [key=2, style=dotted];
m0_317 -> m0_318  [key=0, style=solid];
m0_318 -> m0_12  [key=2, style=dotted];
m0_318 -> m0_319  [key=0, style=solid];
m0_319 -> m0_12  [key=2, style=dotted];
m0_319 -> m0_320  [key=0, style=solid];
m0_320 -> m0_12  [key=2, style=dotted];
m0_320 -> m0_321  [key=0, style=solid];
m0_321 -> m0_12  [key=2, style=dotted];
m0_321 -> m0_322  [key=0, style=solid];
m0_316 -> m0_121  [key=2, style=dotted];
m0_316 -> m0_317  [key=0, style=solid];
m0_314 -> m0_113  [key=2, style=dotted];
m0_314 -> m0_315  [key=0, style=solid];
m0_322 -> m0_313  [key=0, style=bold, color=blue];
m0_131 -> m0_132  [key=0, style=solid];
m0_135 -> m0_12  [key=2, style=dotted];
m0_135 -> m0_136  [key=0, style=solid];
m0_136 -> m0_12  [key=2, style=dotted];
m0_136 -> m0_137  [key=0, style=solid];
m0_134 -> m0_121  [key=2, style=dotted];
m0_134 -> m0_135  [key=0, style=solid];
m0_133 -> m0_135  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_133 -> m0_136  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_133 -> m0_134  [key=0, style=solid];
m0_133 -> m0_85  [key=2, style=dotted];
m0_132 -> m0_133  [key=0, style=solid];
m0_132 -> m0_83  [key=2, style=dotted];
m0_132 -> m0_84  [key=2, style=dotted];
m0_137 -> m0_131  [key=0, style=bold, color=blue];
m0_504 -> m0_505  [key=0, style=solid];
m0_506 -> m0_10  [key=2, style=dotted];
m0_506 -> m0_11  [key=2, style=dotted];
m0_506 -> m0_507  [key=0, style=solid];
m0_506 -> m0_508  [key=1, style=dashed, color=darkseagreen4, label=results];
m0_506 -> m0_509  [key=1, style=dashed, color=darkseagreen4, label=results];
m0_506 -> m0_510  [key=1, style=dashed, color=darkseagreen4, label=results];
m0_508 -> m0_12  [key=2, style=dotted];
m0_508 -> m0_509  [key=0, style=solid];
m0_509 -> m0_12  [key=2, style=dotted];
m0_509 -> m0_510  [key=0, style=solid];
m0_510 -> m0_12  [key=2, style=dotted];
m0_510 -> m0_511  [key=0, style=solid];
m0_507 -> m0_12  [key=2, style=dotted];
m0_507 -> m0_508  [key=0, style=solid];
m0_505 -> m0_506  [key=0, style=solid];
m0_505 -> m0_508  [key=1, style=dashed, color=darkseagreen4, label=a];
m0_505 -> m0_509  [key=1, style=dashed, color=darkseagreen4, label=a];
m0_505 -> m0_510  [key=1, style=dashed, color=darkseagreen4, label=a];
m0_505 -> m0_489  [key=2, style=dotted];
m0_511 -> m0_504  [key=0, style=bold, color=blue];
m0_524 -> m0_525  [key=0, style=solid];
m0_527 -> m0_10  [key=2, style=dotted];
m0_527 -> m0_11  [key=2, style=dotted];
m0_527 -> m0_528  [key=0, style=solid];
m0_529 -> m0_10  [key=2, style=dotted];
m0_529 -> m0_11  [key=2, style=dotted];
m0_529 -> m0_530  [key=0, style=solid];
m0_531 -> m0_10  [key=2, style=dotted];
m0_531 -> m0_11  [key=2, style=dotted];
m0_531 -> m0_532  [key=0, style=solid];
m0_533 -> m0_10  [key=2, style=dotted];
m0_533 -> m0_11  [key=2, style=dotted];
m0_533 -> m0_534  [key=0, style=solid];
m0_535 -> m0_10  [key=2, style=dotted];
m0_535 -> m0_11  [key=2, style=dotted];
m0_535 -> m0_536  [key=0, style=solid];
m0_537 -> m0_10  [key=2, style=dotted];
m0_537 -> m0_11  [key=2, style=dotted];
m0_537 -> m0_538  [key=0, style=solid];
m0_528 -> m0_12  [key=2, style=dotted];
m0_528 -> m0_529  [key=0, style=solid];
m0_530 -> m0_12  [key=2, style=dotted];
m0_530 -> m0_531  [key=0, style=solid];
m0_532 -> m0_12  [key=2, style=dotted];
m0_532 -> m0_533  [key=0, style=solid];
m0_534 -> m0_12  [key=2, style=dotted];
m0_534 -> m0_535  [key=0, style=solid];
m0_536 -> m0_12  [key=2, style=dotted];
m0_536 -> m0_537  [key=0, style=solid];
m0_538 -> m0_12  [key=2, style=dotted];
m0_538 -> m0_539  [key=0, style=solid];
m0_526 -> m0_527  [key=0, style=solid];
m0_526 -> m0_529  [key=1, style=dashed, color=darkseagreen4, label=o];
m0_526 -> m0_531  [key=1, style=dashed, color=darkseagreen4, label=o];
m0_526 -> m0_533  [key=1, style=dashed, color=darkseagreen4, label=o];
m0_526 -> m0_535  [key=1, style=dashed, color=darkseagreen4, label=o];
m0_526 -> m0_537  [key=1, style=dashed, color=darkseagreen4, label=o];
m0_526 -> m0_83  [key=2, style=dotted];
m0_526 -> m0_84  [key=2, style=dotted];
m0_526 -> m0_548  [key=2, style=dotted];
m0_526 -> m0_549  [key=2, style=dotted];
m0_526 -> m0_550  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_525 -> m0_526  [key=0, style=solid];
m0_525 -> m0_540  [key=2, style=dotted];
m0_525 -> m0_541  [key=2, style=dotted];
m0_525 -> m0_542  [key=2, style=dotted];
m0_525 -> m0_543  [key=2, style=dotted];
m0_525 -> m0_544  [key=2, style=dotted];
m0_525 -> m0_545  [key=2, style=dotted];
m0_525 -> m0_546  [key=2, style=dotted];
m0_525 -> m0_547  [key=2, style=dotted];
m0_539 -> m0_524  [key=0, style=bold, color=blue];
m0_228 -> m0_229  [key=0, style=solid];
m0_229 -> m0_113  [key=2, style=dotted];
m0_229 -> m0_230  [key=0, style=solid];
m0_229 -> m0_233  [key=1, style=dashed, color=darkseagreen4, label=a];
m0_230 -> m0_231  [key=0, style=solid];
m0_230 -> m0_153  [key=2, style=dotted];
m0_230 -> m0_232  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_231 -> m0_228  [key=0, style=bold, color=blue];
m0_605 -> m0_606  [key=0, style=solid];
m0_608 -> m0_10  [key=2, style=dotted];
m0_608 -> m0_11  [key=2, style=dotted];
m0_608 -> m0_609  [key=0, style=solid];
m0_610 -> m0_10  [key=2, style=dotted];
m0_610 -> m0_11  [key=2, style=dotted];
m0_610 -> m0_611  [key=0, style=solid];
m0_609 -> m0_12  [key=2, style=dotted];
m0_609 -> m0_610  [key=0, style=solid];
m0_611 -> m0_12  [key=2, style=dotted];
m0_611 -> m0_612  [key=0, style=solid];
m0_607 -> m0_608  [key=0, style=solid];
m0_607 -> m0_610  [key=1, style=dashed, color=darkseagreen4, label=a];
m0_607 -> m0_9  [key=2, style=dotted];
m0_606 -> m0_607  [key=0, style=solid];
m0_612 -> m0_605  [key=0, style=bold, color=blue];
m0_164 -> m0_165  [key=0, style=solid];
m0_165 -> m0_83  [key=2, style=dotted];
m0_165 -> m0_84  [key=2, style=dotted];
m0_165 -> m0_166  [key=0, style=solid];
m0_165 -> m0_169  [key=1, style=dashed, color=darkseagreen4, label=o];
m0_166 -> m0_153  [key=2, style=dotted];
m0_166 -> m0_167  [key=0, style=solid];
m0_166 -> m0_168  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_167 -> m0_164  [key=0, style=bold, color=blue];
m0_448 -> m0_449  [key=0, style=solid];
m0_450 -> m0_10  [key=2, style=dotted];
m0_450 -> m0_11  [key=2, style=dotted];
m0_450 -> m0_451  [key=0, style=solid];
m0_450 -> m0_452  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_450 -> m0_453  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_450 -> m0_454  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_452 -> m0_12  [key=2, style=dotted];
m0_452 -> m0_453  [key=0, style=solid];
m0_451 -> m0_121  [key=2, style=dotted];
m0_451 -> m0_452  [key=0, style=solid];
m0_453 -> m0_357  [key=2, style=dotted];
m0_453 -> m0_358  [key=2, style=dotted];
m0_453 -> m0_454  [key=0, style=solid];
m0_453 -> m0_83  [key=2, style=dotted];
m0_453 -> m0_84  [key=2, style=dotted];
m0_454 -> m0_357  [key=2, style=dotted];
m0_454 -> m0_358  [key=2, style=dotted];
m0_454 -> m0_455  [key=0, style=solid];
m0_454 -> m0_83  [key=2, style=dotted];
m0_454 -> m0_84  [key=2, style=dotted];
m0_449 -> m0_113  [key=2, style=dotted];
m0_449 -> m0_450  [key=0, style=solid];
m0_449 -> m0_83  [key=2, style=dotted];
m0_449 -> m0_84  [key=2, style=dotted];
m0_455 -> m0_448  [key=0, style=bold, color=blue];
m0_86 -> m0_87  [key=0, style=solid];
m0_89 -> m0_12  [key=2, style=dotted];
m0_89 -> m0_90  [key=0, style=solid];
m0_91 -> m0_12  [key=2, style=dotted];
m0_91 -> m0_92  [key=0, style=solid];
m0_87 -> m0_89  [key=1, style=dashed, color=darkseagreen4, label=o];
m0_87 -> m0_88  [key=0, style=solid];
m0_87 -> m0_83  [key=2, style=dotted];
m0_87 -> m0_84  [key=2, style=dotted];
m0_87 -> m0_90  [key=1, style=dashed, color=darkseagreen4, label=o];
m0_88 -> m0_89  [key=0, style=solid];
m0_88 -> m0_85  [key=2, style=dotted];
m0_90 -> m0_91  [key=0, style=solid];
m0_90 -> m0_85  [key=2, style=dotted];
m0_92 -> m0_86  [key=0, style=bold, color=blue];
m0_221 -> m0_222  [key=0, style=solid];
m0_222 -> m0_83  [key=2, style=dotted];
m0_222 -> m0_84  [key=2, style=dotted];
m0_222 -> m0_223  [key=0, style=solid];
m0_222 -> m0_226  [key=1, style=dashed, color=darkseagreen4, label=o];
m0_223 -> m0_153  [key=2, style=dotted];
m0_223 -> m0_224  [key=0, style=solid];
m0_223 -> m0_225  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_224 -> m0_221  [key=0, style=bold, color=blue];
m0_138 -> m0_139  [key=0, style=solid];
m0_139 -> m0_83  [key=2, style=dotted];
m0_139 -> m0_84  [key=2, style=dotted];
m0_139 -> m0_140  [key=0, style=solid];
m0_140 -> m0_85  [key=2, style=dotted];
m0_140 -> m0_141  [key=0, style=solid];
m0_141 -> m0_143  [key=2, style=dotted];
m0_141 -> m0_142  [key=0, style=solid];
m0_142 -> m0_138  [key=0, style=bold, color=blue];
m0_64 -> m0_65  [key=0, style=solid];
m0_67 -> m0_10  [key=2, style=dotted];
m0_67 -> m0_11  [key=2, style=dotted];
m0_67 -> m0_68  [key=0, style=solid];
m0_67 -> m0_69  [key=1, style=dashed, color=darkseagreen4, label=results];
m0_68 -> m0_12  [key=2, style=dotted];
m0_68 -> m0_69  [key=0, style=solid];
m0_69 -> m0_12  [key=2, style=dotted];
m0_69 -> m0_70  [key=0, style=solid];
m0_66 -> m0_67  [key=0, style=solid];
m0_66 -> m0_9  [key=2, style=dotted];
m0_65 -> m0_66  [key=0, style=solid];
m0_70 -> m0_64  [key=0, style=bold, color=blue];
m0_43 -> m0_44  [key=0, style=solid];
m0_46 -> m0_10  [key=2, style=dotted];
m0_46 -> m0_11  [key=2, style=dotted];
m0_46 -> m0_47  [key=0, style=solid];
m0_46 -> m0_48  [key=1, style=dashed, color=darkseagreen4, label=results];
m0_46 -> m0_49  [key=1, style=dashed, color=darkseagreen4, label=results];
m0_46 -> m0_50  [key=1, style=dashed, color=darkseagreen4, label=results];
m0_46 -> m0_51  [key=1, style=dashed, color=darkseagreen4, label=results];
m0_46 -> m0_52  [key=1, style=dashed, color=darkseagreen4, label=results];
m0_46 -> m0_53  [key=1, style=dashed, color=darkseagreen4, label=results];
m0_47 -> m0_12  [key=2, style=dotted];
m0_47 -> m0_48  [key=0, style=solid];
m0_48 -> m0_12  [key=2, style=dotted];
m0_48 -> m0_49  [key=0, style=solid];
m0_49 -> m0_12  [key=2, style=dotted];
m0_49 -> m0_50  [key=0, style=solid];
m0_50 -> m0_12  [key=2, style=dotted];
m0_50 -> m0_51  [key=0, style=solid];
m0_51 -> m0_12  [key=2, style=dotted];
m0_51 -> m0_52  [key=0, style=solid];
m0_52 -> m0_12  [key=2, style=dotted];
m0_52 -> m0_53  [key=0, style=solid];
m0_53 -> m0_12  [key=2, style=dotted];
m0_53 -> m0_54  [key=0, style=solid];
m0_45 -> m0_46  [key=0, style=solid];
m0_45 -> m0_9  [key=2, style=dotted];
m0_44 -> m0_45  [key=0, style=solid];
m0_54 -> m0_43  [key=0, style=bold, color=blue];
m0_275 -> m0_276  [key=0, style=solid];
m0_305 -> m0_306  [key=0, style=solid, color=green];
m0_305 -> m0_10  [key=2, style=dotted, color=green];
m0_305 -> m0_11  [key=2, style=dotted, color=green];
m0_305 -> m0_307  [key=1, style=dashed, color=green, label=t];
m0_305 -> m0_308  [key=1, style=dashed, color=green, label=t];
m0_305 -> m0_309  [key=1, style=dashed, color=green, label=t];
m0_305 -> m0_310  [key=1, style=dashed, color=green, label=t];
m0_305 -> m0_311  [key=1, style=dashed, color=green, label=t];
m0_276 -> m0_305  [key=1, style=dashed, color=green, label=a];
m0_276 -> m0_277  [key=0, style=solid];
m0_276 -> m0_113  [key=2, style=dotted];
m0_276 -> m0_278  [key=1, style=dashed, color=darkseagreen4, label=a];
m0_276 -> m0_283  [key=1, style=dashed, color=darkseagreen4, label=a];
m0_276 -> m0_286  [key=1, style=dashed, color=darkseagreen4, label=a];
m0_276 -> m0_289  [key=1, style=dashed, color=darkseagreen4, label=a];
m0_276 -> m0_291  [key=1, style=dashed, color=darkseagreen4, label=a];
m0_276 -> m0_294  [key=1, style=dashed, color=darkseagreen4, label=a];
m0_304 -> m0_305  [key=0, style=solid, color=green];
m0_304 -> m0_12  [key=2, style=dotted, color=green];
m0_306 -> m0_307  [key=0, style=solid, color=green];
m0_306 -> m0_12  [key=2, style=dotted, color=green];
m0_307 -> m0_308  [key=0, style=solid, color=green];
m0_307 -> m0_12  [key=2, style=dotted, color=green];
m0_308 -> m0_309  [key=0, style=solid, color=green];
m0_308 -> m0_12  [key=2, style=dotted, color=green];
m0_309 -> m0_310  [key=0, style=solid, color=green];
m0_309 -> m0_12  [key=2, style=dotted, color=green];
m0_310 -> m0_311  [key=0, style=solid, color=green];
m0_310 -> m0_12  [key=2, style=dotted, color=green];
m0_311 -> m0_312  [key=0, style=solid, color=green];
m0_311 -> m0_12  [key=2, style=dotted, color=green];
m0_302 -> m0_303  [key=0, style=solid, color=green];
m0_302 -> m0_12  [key=2, style=dotted, color=green];
m0_294 -> m0_302  [key=1, style=dashed, color=green, label=t];
m0_294 -> m0_303  [key=1, style=dashed, color=green, label=t];
m0_294 -> m0_304  [key=1, style=dashed, color=green, label=t];
m0_294 -> m0_10  [key=2, style=dotted];
m0_294 -> m0_11  [key=2, style=dotted];
m0_294 -> m0_295  [key=0, style=solid];
m0_294 -> m0_296  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_294 -> m0_297  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_294 -> m0_298  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_294 -> m0_299  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_294 -> m0_300  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_294 -> m0_301  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_301 -> m0_302  [key=0, style=solid, color=green];
m0_301 -> m0_12  [key=2, style=dotted];
m0_303 -> m0_304  [key=0, style=solid, color=green];
m0_303 -> m0_12  [key=2, style=dotted, color=green];
m0_277 -> m0_278  [key=0, style=solid];
m0_278 -> m0_10  [key=2, style=dotted];
m0_278 -> m0_11  [key=2, style=dotted];
m0_278 -> m0_279  [key=0, style=solid];
m0_278 -> m0_280  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_278 -> m0_281  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_278 -> m0_282  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_283 -> m0_10  [key=2, style=dotted];
m0_283 -> m0_11  [key=2, style=dotted];
m0_283 -> m0_284  [key=0, style=solid];
m0_283 -> m0_285  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_286 -> m0_10  [key=2, style=dotted];
m0_286 -> m0_11  [key=2, style=dotted];
m0_286 -> m0_287  [key=0, style=solid];
m0_286 -> m0_288  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_289 -> m0_10  [key=2, style=dotted];
m0_289 -> m0_11  [key=2, style=dotted];
m0_289 -> m0_290  [key=0, style=solid];
m0_291 -> m0_10  [key=2, style=dotted];
m0_291 -> m0_11  [key=2, style=dotted];
m0_291 -> m0_292  [key=0, style=solid];
m0_291 -> m0_293  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_293 -> m0_294  [key=0, style=solid];
m0_293 -> m0_12  [key=2, style=dotted];
m0_295 -> m0_12  [key=2, style=dotted];
m0_295 -> m0_296  [key=0, style=solid];
m0_296 -> m0_12  [key=2, style=dotted];
m0_296 -> m0_297  [key=0, style=solid];
m0_297 -> m0_12  [key=2, style=dotted];
m0_297 -> m0_298  [key=0, style=solid];
m0_298 -> m0_12  [key=2, style=dotted];
m0_298 -> m0_299  [key=0, style=solid];
m0_299 -> m0_12  [key=2, style=dotted];
m0_299 -> m0_300  [key=0, style=solid];
m0_300 -> m0_301  [key=0, style=solid];
m0_300 -> m0_12  [key=2, style=dotted];
m0_279 -> m0_12  [key=2, style=dotted];
m0_279 -> m0_280  [key=0, style=solid];
m0_280 -> m0_12  [key=2, style=dotted];
m0_280 -> m0_281  [key=0, style=solid];
m0_281 -> m0_12  [key=2, style=dotted];
m0_281 -> m0_282  [key=0, style=solid];
m0_282 -> m0_12  [key=2, style=dotted];
m0_282 -> m0_283  [key=0, style=solid];
m0_284 -> m0_12  [key=2, style=dotted];
m0_284 -> m0_285  [key=0, style=solid];
m0_285 -> m0_12  [key=2, style=dotted];
m0_285 -> m0_286  [key=0, style=solid];
m0_287 -> m0_12  [key=2, style=dotted];
m0_287 -> m0_288  [key=0, style=solid];
m0_288 -> m0_12  [key=2, style=dotted];
m0_288 -> m0_289  [key=0, style=solid];
m0_290 -> m0_12  [key=2, style=dotted];
m0_290 -> m0_291  [key=0, style=solid];
m0_292 -> m0_12  [key=2, style=dotted];
m0_292 -> m0_293  [key=0, style=solid];
m0_312 -> m0_275  [key=0, style=bold, color=blue];
m0_55 -> m0_56  [key=0, style=solid];
m0_58 -> m0_10  [key=2, style=dotted];
m0_58 -> m0_11  [key=2, style=dotted];
m0_58 -> m0_59  [key=0, style=solid];
m0_58 -> m0_60  [key=1, style=dashed, color=darkseagreen4, label=tokens];
m0_58 -> m0_61  [key=1, style=dashed, color=darkseagreen4, label=tokens];
m0_58 -> m0_62  [key=1, style=dashed, color=darkseagreen4, label=tokens];
m0_59 -> m0_12  [key=2, style=dotted];
m0_59 -> m0_60  [key=0, style=solid];
m0_60 -> m0_12  [key=2, style=dotted];
m0_60 -> m0_61  [key=0, style=solid];
m0_61 -> m0_12  [key=2, style=dotted];
m0_61 -> m0_62  [key=0, style=solid];
m0_62 -> m0_12  [key=2, style=dotted];
m0_62 -> m0_63  [key=0, style=solid];
m0_57 -> m0_58  [key=0, style=solid];
m0_57 -> m0_9  [key=2, style=dotted];
m0_56 -> m0_57  [key=0, style=solid];
m0_63 -> m0_55  [key=0, style=bold, color=blue];
m0_333 -> m0_334  [key=0, style=solid];
m0_337 -> m0_10  [key=2, style=dotted];
m0_337 -> m0_11  [key=2, style=dotted];
m0_337 -> m0_338  [key=0, style=solid];
m0_337 -> m0_339  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_337 -> m0_340  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_337 -> m0_341  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_339 -> m0_12  [key=2, style=dotted];
m0_339 -> m0_340  [key=0, style=solid];
m0_340 -> m0_12  [key=2, style=dotted];
m0_340 -> m0_341  [key=0, style=solid];
m0_341 -> m0_12  [key=2, style=dotted];
m0_341 -> m0_342  [key=0, style=solid];
m0_338 -> m0_121  [key=2, style=dotted];
m0_338 -> m0_339  [key=0, style=solid];
m0_334 -> m0_343  [key=2, style=dotted];
m0_334 -> m0_335  [key=0, style=solid];
m0_334 -> m0_336  [key=1, style=dashed, color=darkseagreen4, label=o1];
m0_335 -> m0_343  [key=2, style=dotted];
m0_335 -> m0_336  [key=0, style=solid];
m0_336 -> m0_113  [key=2, style=dotted];
m0_336 -> m0_337  [key=0, style=solid];
m0_342 -> m0_333  [key=0, style=bold, color=blue];
m0_183 -> m0_184  [key=0, style=solid];
m0_184 -> m0_113  [key=2, style=dotted];
m0_184 -> m0_185  [key=0, style=solid];
m0_184 -> m0_188  [key=1, style=dashed, color=darkseagreen4, label=a];
m0_185 -> m0_186  [key=0, style=solid];
m0_185 -> m0_153  [key=2, style=dotted];
m0_185 -> m0_187  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_186 -> m0_183  [key=0, style=bold, color=blue];
m0_583 -> m0_584  [key=0, style=solid];
m0_586 -> m0_10  [key=2, style=dotted];
m0_586 -> m0_11  [key=2, style=dotted];
m0_586 -> m0_587  [key=0, style=solid];
m0_588 -> m0_10  [key=2, style=dotted];
m0_588 -> m0_11  [key=2, style=dotted];
m0_588 -> m0_589  [key=0, style=solid];
m0_590 -> m0_10  [key=2, style=dotted];
m0_590 -> m0_11  [key=2, style=dotted];
m0_590 -> m0_591  [key=0, style=solid];
m0_592 -> m0_10  [key=2, style=dotted];
m0_592 -> m0_11  [key=2, style=dotted];
m0_592 -> m0_593  [key=0, style=solid];
m0_594 -> m0_10  [key=2, style=dotted];
m0_594 -> m0_11  [key=2, style=dotted];
m0_594 -> m0_595  [key=0, style=solid];
m0_587 -> m0_12  [key=2, style=dotted];
m0_587 -> m0_588  [key=0, style=solid];
m0_589 -> m0_12  [key=2, style=dotted];
m0_589 -> m0_590  [key=0, style=solid];
m0_591 -> m0_12  [key=2, style=dotted];
m0_591 -> m0_592  [key=0, style=solid];
m0_593 -> m0_12  [key=2, style=dotted];
m0_593 -> m0_594  [key=0, style=solid];
m0_595 -> m0_12  [key=2, style=dotted];
m0_595 -> m0_596  [key=0, style=solid];
m0_585 -> m0_586  [key=0, style=solid];
m0_585 -> m0_588  [key=1, style=dashed, color=darkseagreen4, label=a];
m0_585 -> m0_590  [key=1, style=dashed, color=darkseagreen4, label=a];
m0_585 -> m0_592  [key=1, style=dashed, color=darkseagreen4, label=a];
m0_585 -> m0_594  [key=1, style=dashed, color=darkseagreen4, label=a];
m0_585 -> m0_489  [key=2, style=dotted];
m0_584 -> m0_585  [key=0, style=solid];
m0_596 -> m0_583  [key=0, style=bold, color=blue];
m0_434 -> m0_435  [key=0, style=solid];
m0_436 -> m0_10  [key=2, style=dotted];
m0_436 -> m0_11  [key=2, style=dotted];
m0_436 -> m0_437  [key=0, style=solid];
m0_436 -> m0_438  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_438 -> m0_12  [key=2, style=dotted];
m0_438 -> m0_439  [key=0, style=solid];
m0_437 -> m0_121  [key=2, style=dotted];
m0_437 -> m0_438  [key=0, style=solid];
m0_435 -> m0_113  [key=2, style=dotted];
m0_435 -> m0_436  [key=0, style=solid];
m0_439 -> m0_434  [key=0, style=bold, color=blue];
m0_268 -> m0_269  [key=0, style=solid];
m0_272 -> m0_12  [key=2, style=dotted];
m0_272 -> m0_273  [key=0, style=solid];
m0_273 -> m0_12  [key=2, style=dotted];
m0_273 -> m0_274  [key=0, style=solid];
m0_271 -> m0_121  [key=2, style=dotted];
m0_271 -> m0_272  [key=0, style=solid];
m0_269 -> m0_113  [key=2, style=dotted];
m0_269 -> m0_270  [key=0, style=solid];
m0_270 -> m0_272  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_270 -> m0_273  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_270 -> m0_271  [key=0, style=solid];
m0_270 -> m0_85  [key=2, style=dotted];
m0_274 -> m0_268  [key=0, style=bold, color=blue];
m0_476 -> m0_477  [key=0, style=solid];
m0_478 -> m0_10  [key=2, style=dotted];
m0_478 -> m0_11  [key=2, style=dotted];
m0_478 -> m0_479  [key=0, style=solid];
m0_478 -> m0_480  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_478 -> m0_481  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_478 -> m0_482  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_480 -> m0_12  [key=2, style=dotted];
m0_480 -> m0_481  [key=0, style=solid];
m0_481 -> m0_12  [key=2, style=dotted];
m0_481 -> m0_482  [key=0, style=solid];
m0_482 -> m0_12  [key=2, style=dotted];
m0_482 -> m0_483  [key=0, style=solid];
m0_479 -> m0_121  [key=2, style=dotted];
m0_479 -> m0_480  [key=0, style=solid];
m0_477 -> m0_372  [key=2, style=dotted];
m0_477 -> m0_113  [key=2, style=dotted];
m0_477 -> m0_478  [key=0, style=solid];
m0_477 -> m0_130  [key=2, style=dotted];
m0_477 -> m0_84  [key=2, style=dotted];
m0_477 -> m0_83  [key=2, style=dotted];
m0_483 -> m0_476  [key=0, style=bold, color=blue];
m0_235 -> m0_236  [key=0, style=solid];
m0_236 -> m0_113  [key=2, style=dotted];
m0_236 -> m0_237  [key=0, style=solid];
m0_236 -> m0_245  [key=1, style=dashed, color=darkseagreen4, label=a];
m0_236 -> m0_238  [key=1, style=dashed, color=darkseagreen4, label=a];
m0_236 -> m0_248  [key=1, style=dashed, color=darkseagreen4, label=a];
m0_236 -> m0_239  [key=1, style=dashed, color=darkseagreen4, label=a];
m0_236 -> m0_251  [key=1, style=dashed, color=darkseagreen4, label=a];
m0_237 -> m0_238  [key=0, style=solid];
m0_237 -> m0_153  [key=2, style=dotted];
m0_237 -> m0_244  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_238 -> m0_239  [key=0, style=solid];
m0_238 -> m0_153  [key=2, style=dotted];
m0_238 -> m0_247  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_239 -> m0_240  [key=0, style=solid];
m0_239 -> m0_153  [key=2, style=dotted];
m0_239 -> m0_250  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_240 -> m0_243  [key=2, style=dotted];
m0_240 -> m0_241  [key=0, style=solid];
m0_240 -> m0_254  [key=1, style=dashed, color=darkseagreen4, label=a];
m0_241 -> m0_153  [key=2, style=dotted];
m0_241 -> m0_242  [key=0, style=solid];
m0_241 -> m0_253  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_242 -> m0_235  [key=0, style=bold, color=blue];
m0_108 -> m0_109  [key=0, style=solid];
m0_111 -> m0_12  [key=2, style=dotted];
m0_111 -> m0_112  [key=0, style=solid];
m0_109 -> m0_113  [key=2, style=dotted];
m0_109 -> m0_110  [key=0, style=solid];
m0_109 -> m0_83  [key=2, style=dotted];
m0_109 -> m0_84  [key=2, style=dotted];
m0_110 -> m0_111  [key=0, style=solid];
m0_110 -> m0_85  [key=2, style=dotted];
m0_112 -> m0_108  [key=0, style=bold, color=blue];
m0_34 -> m0_35  [key=0, style=solid];
m0_37 -> m0_10  [key=2, style=dotted];
m0_37 -> m0_38  [key=0, style=solid];
m0_37 -> m0_42  [key=2, style=dotted];
m0_39 -> m0_10  [key=2, style=dotted];
m0_39 -> m0_40  [key=0, style=solid];
m0_39 -> m0_42  [key=2, style=dotted];
m0_38 -> m0_12  [key=2, style=dotted];
m0_38 -> m0_39  [key=0, style=solid];
m0_40 -> m0_12  [key=2, style=dotted];
m0_40 -> m0_41  [key=0, style=solid];
m0_36 -> m0_37  [key=0, style=solid];
m0_36 -> m0_39  [key=1, style=dashed, color=darkseagreen4, label=models];
m0_36 -> m0_9  [key=2, style=dotted];
m0_35 -> m0_36  [key=0, style=solid];
m0_41 -> m0_34  [key=0, style=bold, color=blue];
m0_597 -> m0_598  [key=0, style=solid];
m0_600 -> m0_10  [key=2, style=dotted];
m0_600 -> m0_11  [key=2, style=dotted];
m0_600 -> m0_601  [key=0, style=solid];
m0_602 -> m0_10  [key=2, style=dotted];
m0_602 -> m0_11  [key=2, style=dotted];
m0_602 -> m0_603  [key=0, style=solid];
m0_601 -> m0_12  [key=2, style=dotted];
m0_601 -> m0_602  [key=0, style=solid];
m0_603 -> m0_12  [key=2, style=dotted];
m0_603 -> m0_604  [key=0, style=solid];
m0_599 -> m0_600  [key=0, style=solid];
m0_599 -> m0_602  [key=1, style=dashed, color=darkseagreen4, label=a];
m0_599 -> m0_489  [key=2, style=dotted];
m0_598 -> m0_599  [key=0, style=solid];
m0_604 -> m0_597  [key=0, style=bold, color=blue];
m0_149 -> m0_150  [key=0, style=solid];
m0_150 -> m0_83  [key=2, style=dotted];
m0_150 -> m0_84  [key=2, style=dotted];
m0_150 -> m0_151  [key=0, style=solid];
m0_150 -> m0_155  [key=1, style=dashed, color=darkseagreen4, label=o];
m0_151 -> m0_153  [key=2, style=dotted];
m0_151 -> m0_152  [key=0, style=solid];
m0_151 -> m0_154  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_152 -> m0_149  [key=0, style=bold, color=blue];
m0_205 -> m0_206  [key=0, style=solid];
m0_207 -> m0_85  [key=2, style=dotted];
m0_207 -> m0_208  [key=0, style=solid];
m0_207 -> m0_143  [key=2, style=dotted];
m0_206 -> m0_207  [key=0, style=solid];
m0_206 -> m0_201  [key=2, style=dotted];
m0_208 -> m0_205  [key=0, style=bold, color=blue];
m0_412 -> m0_413  [key=0, style=solid];
m0_414 -> m0_10  [key=2, style=dotted];
m0_414 -> m0_11  [key=2, style=dotted];
m0_414 -> m0_415  [key=0, style=solid];
m0_414 -> m0_416  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_414 -> m0_417  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_416 -> m0_12  [key=2, style=dotted];
m0_416 -> m0_417  [key=0, style=solid];
m0_415 -> m0_121  [key=2, style=dotted];
m0_415 -> m0_416  [key=0, style=solid];
m0_417 -> m0_357  [key=2, style=dotted];
m0_417 -> m0_358  [key=2, style=dotted];
m0_417 -> m0_418  [key=0, style=solid];
m0_417 -> m0_83  [key=2, style=dotted];
m0_417 -> m0_84  [key=2, style=dotted];
m0_413 -> m0_113  [key=2, style=dotted];
m0_413 -> m0_414  [key=0, style=solid];
m0_413 -> m0_83  [key=2, style=dotted];
m0_413 -> m0_84  [key=2, style=dotted];
m0_418 -> m0_412  [key=0, style=bold, color=blue];
m0_261 -> m0_262  [key=0, style=solid];
m0_262 -> m0_113  [key=2, style=dotted];
m0_262 -> m0_263  [key=0, style=solid];
m0_262 -> m0_266  [key=1, style=dashed, color=darkseagreen4, label=a];
m0_263 -> m0_264  [key=0, style=solid];
m0_263 -> m0_153  [key=2, style=dotted];
m0_263 -> m0_265  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_264 -> m0_261  [key=0, style=bold, color=blue];
m0_256 -> m0_257  [key=0, style=solid];
m0_257 -> m0_113  [key=2, style=dotted];
m0_257 -> m0_258  [key=0, style=solid];
m0_258 -> m0_259  [key=0, style=solid];
m0_258 -> m0_85  [key=2, style=dotted];
m0_259 -> m0_260  [key=0, style=solid];
m0_259 -> m0_143  [key=2, style=dotted];
m0_260 -> m0_256  [key=0, style=bold, color=blue];
m0_512 -> m0_513  [key=0, style=solid];
m0_514 -> m0_10  [key=2, style=dotted];
m0_514 -> m0_11  [key=2, style=dotted];
m0_514 -> m0_515  [key=0, style=solid];
m0_514 -> m0_516  [key=1, style=dashed, color=darkseagreen4, label=tokens];
m0_514 -> m0_517  [key=1, style=dashed, color=darkseagreen4, label=tokens];
m0_514 -> m0_518  [key=1, style=dashed, color=darkseagreen4, label=tokens];
m0_514 -> m0_519  [key=1, style=dashed, color=darkseagreen4, label=tokens];
m0_514 -> m0_520  [key=1, style=dashed, color=darkseagreen4, label=tokens];
m0_514 -> m0_521  [key=1, style=dashed, color=darkseagreen4, label=tokens];
m0_514 -> m0_522  [key=1, style=dashed, color=darkseagreen4, label=tokens];
m0_516 -> m0_12  [key=2, style=dotted];
m0_516 -> m0_516  [key=1, style=dashed, color=darkseagreen4, label=i];
m0_516 -> m0_517  [key=0, style=solid];
m0_517 -> m0_12  [key=2, style=dotted];
m0_517 -> m0_517  [key=1, style=dashed, color=darkseagreen4, label=i];
m0_517 -> m0_518  [key=0, style=solid];
m0_518 -> m0_12  [key=2, style=dotted];
m0_518 -> m0_518  [key=1, style=dashed, color=darkseagreen4, label=i];
m0_518 -> m0_519  [key=0, style=solid];
m0_519 -> m0_12  [key=2, style=dotted];
m0_519 -> m0_519  [key=1, style=dashed, color=darkseagreen4, label=i];
m0_519 -> m0_520  [key=0, style=solid];
m0_520 -> m0_12  [key=2, style=dotted];
m0_520 -> m0_520  [key=1, style=dashed, color=darkseagreen4, label=i];
m0_520 -> m0_521  [key=0, style=solid];
m0_521 -> m0_12  [key=2, style=dotted];
m0_521 -> m0_521  [key=1, style=dashed, color=darkseagreen4, label=i];
m0_521 -> m0_522  [key=0, style=solid];
m0_522 -> m0_12  [key=2, style=dotted];
m0_522 -> m0_523  [key=0, style=solid];
m0_513 -> m0_514  [key=0, style=solid];
m0_513 -> m0_9  [key=2, style=dotted];
m0_515 -> m0_516  [key=0, style=solid];
m0_523 -> m0_512  [key=0, style=bold, color=blue];
m0_426 -> m0_427  [key=0, style=solid];
m0_428 -> m0_10  [key=2, style=dotted];
m0_428 -> m0_11  [key=2, style=dotted];
m0_428 -> m0_429  [key=0, style=solid];
m0_428 -> m0_430  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_428 -> m0_431  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_428 -> m0_432  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_430 -> m0_12  [key=2, style=dotted];
m0_430 -> m0_431  [key=0, style=solid];
m0_431 -> m0_12  [key=2, style=dotted];
m0_431 -> m0_432  [key=0, style=solid];
m0_432 -> m0_12  [key=2, style=dotted];
m0_432 -> m0_433  [key=0, style=solid];
m0_429 -> m0_121  [key=2, style=dotted];
m0_429 -> m0_430  [key=0, style=solid];
m0_427 -> m0_113  [key=2, style=dotted];
m0_427 -> m0_428  [key=0, style=solid];
m0_433 -> m0_426  [key=0, style=bold, color=blue];
m0_171 -> m0_172  [key=0, style=solid];
m0_172 -> m0_113  [key=2, style=dotted];
m0_172 -> m0_173  [key=0, style=solid];
m0_173 -> m0_174  [key=0, style=solid];
m0_173 -> m0_85  [key=2, style=dotted];
m0_174 -> m0_175  [key=0, style=solid];
m0_174 -> m0_143  [key=2, style=dotted];
m0_175 -> m0_171  [key=0, style=bold, color=blue];
m0_78 -> m0_79  [key=0, style=solid];
m0_81 -> m0_12  [key=2, style=dotted];
m0_81 -> m0_82  [key=0, style=solid];
m0_80 -> m0_81  [key=0, style=solid];
m0_80 -> m0_85  [key=2, style=dotted];
m0_79 -> m0_80  [key=0, style=solid];
m0_79 -> m0_83  [key=2, style=dotted];
m0_79 -> m0_84  [key=2, style=dotted];
m0_82 -> m0_78  [key=0, style=bold, color=blue];
m0_28 -> m0_29  [key=0, style=solid];
m0_31 -> m0_10  [key=2, style=dotted];
m0_31 -> m0_11  [key=2, style=dotted];
m0_31 -> m0_32  [key=0, style=solid];
m0_32 -> m0_12  [key=2, style=dotted];
m0_32 -> m0_33  [key=0, style=solid];
m0_30 -> m0_31  [key=0, style=solid];
m0_30 -> m0_9  [key=2, style=dotted];
m0_29 -> m0_30  [key=0, style=solid];
m0_33 -> m0_28  [key=0, style=bold, color=blue];
m0_373 -> m0_374  [key=0, style=solid, color=green];
m0_374 -> m0_375  [key=0, style=solid, color=green];
m0_374 -> m0_343  [key=2, style=dotted, color=green];
m0_374 -> m0_377  [key=1, style=dashed, color=green, label=o1];
m0_374 -> m0_382  [key=1, style=dashed, color=green, label=o1];
m0_375 -> m0_376  [key=0, style=solid, color=green];
m0_375 -> m0_343  [key=2, style=dotted, color=green];
m0_375 -> m0_377  [key=1, style=dashed, color=green, label=o2];
m0_375 -> m0_384  [key=1, style=dashed, color=green, label=o2];
m0_377 -> m0_378  [key=0, style=solid, color=green];
m0_377 -> m0_113  [key=2, style=dotted, color=green];
m0_377 -> m0_381  [key=1, style=dashed, color=green, label=a];
m0_382 -> m0_357  [key=2, style=dotted];
m0_382 -> m0_358  [key=2, style=dotted];
m0_382 -> m0_383  [key=0, style=solid];
m0_376 -> m0_377  [key=0, style=solid, color=green];
m0_376 -> m0_343  [key=2, style=dotted, color=green];
m0_376 -> m0_372  [key=2, style=dotted, color=green];
m0_376 -> m0_386  [key=1, style=dashed, color=green, label=o3];
m0_384 -> m0_357  [key=2, style=dotted];
m0_384 -> m0_358  [key=2, style=dotted];
m0_384 -> m0_385  [key=0, style=solid];
m0_378 -> m0_10  [key=2, style=dotted];
m0_378 -> m0_11  [key=2, style=dotted];
m0_378 -> m0_382  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_378 -> m0_384  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_378 -> m0_379  [key=0, style=solid];
m0_378 -> m0_380  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_378 -> m0_381  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_378 -> m0_383  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_378 -> m0_385  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_378 -> m0_386  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_378 -> m0_387  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_378 -> m0_388  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_378 -> m0_389  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_381 -> m0_357  [key=2, style=dotted];
m0_381 -> m0_358  [key=2, style=dotted];
m0_381 -> m0_382  [key=0, style=solid];
m0_386 -> m0_357  [key=2, style=dotted];
m0_386 -> m0_358  [key=2, style=dotted];
m0_386 -> m0_387  [key=0, style=solid];
m0_380 -> m0_12  [key=2, style=dotted];
m0_380 -> m0_381  [key=0, style=solid];
m0_383 -> m0_12  [key=2, style=dotted];
m0_383 -> m0_384  [key=0, style=solid];
m0_385 -> m0_12  [key=2, style=dotted];
m0_385 -> m0_386  [key=0, style=solid];
m0_389 -> m0_12  [key=2, style=dotted];
m0_389 -> m0_390  [key=0, style=solid];
m0_379 -> m0_121  [key=2, style=dotted];
m0_379 -> m0_380  [key=0, style=solid];
m0_387 -> m0_343  [key=2, style=dotted];
m0_387 -> m0_372  [key=2, style=dotted];
m0_387 -> m0_357  [key=2, style=dotted];
m0_387 -> m0_358  [key=2, style=dotted];
m0_387 -> m0_388  [key=0, style=solid];
m0_388 -> m0_372  [key=2, style=dotted];
m0_388 -> m0_357  [key=2, style=dotted];
m0_388 -> m0_358  [key=2, style=dotted];
m0_388 -> m0_389  [key=0, style=solid];
m0_390 -> m0_373  [key=0, style=bold, color=blue];
m0_253 -> m0_254  [key=0, style=solid];
m0_181 -> m0_182  [key=0, style=solid];
m0_181 -> m0_85  [key=2, style=dotted];
m0_188 -> m0_189  [key=0, style=solid];
m0_188 -> m0_77  [key=2, style=dotted];
m0_195 -> m0_196  [key=0, style=solid];
m0_195 -> m0_77  [key=2, style=dotted];
m0_233 -> m0_234  [key=0, style=solid];
m0_233 -> m0_77  [key=2, style=dotted];
m0_245 -> m0_246  [key=0, style=solid];
m0_245 -> m0_77  [key=2, style=dotted];
m0_248 -> m0_249  [key=0, style=solid];
m0_248 -> m0_77  [key=2, style=dotted];
m0_251 -> m0_252  [key=0, style=solid];
m0_251 -> m0_77  [key=2, style=dotted];
m0_266 -> m0_267  [key=0, style=solid];
m0_266 -> m0_77  [key=2, style=dotted];
m0_550 -> m0_551  [key=0, style=solid];
m0_574 -> m0_575  [key=0, style=solid];
m0_580 -> m0_581  [key=0, style=solid];
m0_577 -> m0_578  [key=0, style=solid];
m0_551 -> m0_83  [key=2, style=dotted];
m0_551 -> m0_84  [key=2, style=dotted];
m0_551 -> m0_552  [key=0, style=solid];
m0_180 -> m0_181  [key=0, style=solid];
m0_182 -> m0_180  [key=0, style=bold, color=blue];
m0_187 -> m0_188  [key=0, style=solid];
m0_189 -> m0_187  [key=0, style=bold, color=blue];
m0_194 -> m0_195  [key=0, style=solid];
m0_196 -> m0_194  [key=0, style=bold, color=blue];
m0_232 -> m0_233  [key=0, style=solid];
m0_234 -> m0_232  [key=0, style=bold, color=blue];
m0_244 -> m0_245  [key=0, style=solid];
m0_246 -> m0_244  [key=0, style=bold, color=blue];
m0_247 -> m0_248  [key=0, style=solid];
m0_249 -> m0_247  [key=0, style=bold, color=blue];
m0_250 -> m0_251  [key=0, style=solid];
m0_252 -> m0_250  [key=0, style=bold, color=blue];
m0_265 -> m0_266  [key=0, style=solid];
m0_267 -> m0_265  [key=0, style=bold, color=blue];
m0_552 -> m0_550  [key=0, style=bold, color=blue];
m0_155 -> m0_77  [key=2, style=dotted];
m0_155 -> m0_156  [key=0, style=solid];
m0_162 -> m0_77  [key=2, style=dotted];
m0_162 -> m0_163  [key=0, style=solid];
m0_169 -> m0_77  [key=2, style=dotted];
m0_169 -> m0_170  [key=0, style=solid];
m0_203 -> m0_77  [key=2, style=dotted];
m0_203 -> m0_204  [key=0, style=solid];
m0_214 -> m0_77  [key=2, style=dotted];
m0_214 -> m0_215  [key=0, style=solid];
m0_226 -> m0_77  [key=2, style=dotted];
m0_226 -> m0_227  [key=0, style=solid];
m0_254 -> m0_77  [key=2, style=dotted];
m0_254 -> m0_255  [key=0, style=solid];
m0_578 -> m0_85  [key=2, style=dotted];
m0_578 -> m0_579  [key=0, style=solid];
m0_581 -> m0_85  [key=2, style=dotted];
m0_581 -> m0_582  [key=0, style=solid];
m0_576 -> m0_574  [key=0, style=bold, color=blue];
m0_575 -> m0_576  [key=0, style=solid];
m0_582 -> m0_580  [key=0, style=bold, color=blue];
m0_579 -> m0_577  [key=0, style=bold, color=blue];
m0_154 -> m0_155  [key=0, style=solid];
m0_156 -> m0_154  [key=0, style=bold, color=blue];
m0_161 -> m0_162  [key=0, style=solid];
m0_163 -> m0_161  [key=0, style=bold, color=blue];
m0_168 -> m0_169  [key=0, style=solid];
m0_170 -> m0_168  [key=0, style=bold, color=blue];
m0_202 -> m0_203  [key=0, style=solid];
m0_204 -> m0_202  [key=0, style=bold, color=blue];
m0_213 -> m0_214  [key=0, style=solid];
m0_215 -> m0_213  [key=0, style=bold, color=blue];
m0_225 -> m0_226  [key=0, style=solid];
m0_227 -> m0_225  [key=0, style=bold, color=blue];
m0_255 -> m0_253  [key=0, style=bold, color=blue];
m0_391 -> m0_392  [key=0, style=solid];
m0_395 -> m0_12  [key=2, style=dotted];
m0_395 -> m0_396  [key=0, style=solid];
m0_397 -> m0_12  [key=2, style=dotted];
m0_397 -> m0_398  [key=0, style=solid];
m0_398 -> m0_12  [key=2, style=dotted];
m0_398 -> m0_399  [key=0, style=solid];
m0_394 -> m0_121  [key=2, style=dotted];
m0_394 -> m0_395  [key=0, style=solid];
m0_393 -> m0_395  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_393 -> m0_394  [key=0, style=solid];
m0_393 -> m0_85  [key=2, style=dotted];
m0_396 -> m0_397  [key=0, style=solid];
m0_396 -> m0_398  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_396 -> m0_85  [key=2, style=dotted];
m0_392 -> m0_393  [key=0, style=solid];
m0_392 -> m0_396  [key=1, style=dashed, color=darkseagreen4, label=o];
m0_392 -> m0_83  [key=2, style=dotted];
m0_392 -> m0_84  [key=2, style=dotted];
m0_399 -> m0_391  [key=0, style=bold, color=blue];
m0_484 -> m0_485  [key=0, style=solid];
m0_487 -> m0_12  [key=2, style=dotted];
m0_487 -> m0_488  [key=0, style=solid];
m0_486 -> m0_487  [key=0, style=solid];
m0_486 -> m0_85  [key=2, style=dotted];
m0_485 -> m0_486  [key=0, style=solid];
m0_485 -> m0_489  [key=2, style=dotted];
m0_488 -> m0_484  [key=0, style=bold, color=blue];
m0_197 -> m0_198  [key=0, style=solid];
m0_199 -> m0_153  [key=2, style=dotted];
m0_199 -> m0_200  [key=0, style=solid];
m0_199 -> m0_202  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_198 -> m0_203  [key=1, style=dashed, color=darkseagreen4, label=c];
m0_198 -> m0_199  [key=0, style=solid];
m0_198 -> m0_201  [key=2, style=dotted];
m0_200 -> m0_197  [key=0, style=bold, color=blue];
m0_216 -> m0_217  [key=0, style=solid];
m0_219 -> m0_12  [key=2, style=dotted];
m0_219 -> m0_220  [key=0, style=solid];
m0_218 -> m0_219  [key=0, style=solid];
m0_218 -> m0_77  [key=2, style=dotted];
m0_217 -> m0_218  [key=0, style=solid];
m0_217 -> m0_83  [key=2, style=dotted];
m0_217 -> m0_84  [key=2, style=dotted];
m0_220 -> m0_216  [key=0, style=bold, color=blue];
m0_103 -> m0_104  [key=0, style=solid];
m0_106 -> m0_12  [key=2, style=dotted];
m0_106 -> m0_107  [key=0, style=solid];
m0_104 -> m0_106  [key=1, style=dashed, color=darkseagreen4, label=o];
m0_104 -> m0_105  [key=0, style=solid];
m0_104 -> m0_83  [key=2, style=dotted];
m0_104 -> m0_84  [key=2, style=dotted];
m0_105 -> m0_106  [key=0, style=solid];
m0_105 -> m0_85  [key=2, style=dotted];
m0_107 -> m0_103  [key=0, style=bold, color=blue];
m0_553 -> m0_554  [key=0, style=solid];
m0_558 -> m0_12  [key=2, style=dotted];
m0_558 -> m0_559  [key=0, style=solid];
m0_559 -> m0_12  [key=2, style=dotted];
m0_559 -> m0_560  [key=0, style=solid];
m0_560 -> m0_12  [key=2, style=dotted];
m0_560 -> m0_561  [key=0, style=solid];
m0_564 -> m0_12  [key=2, style=dotted];
m0_564 -> m0_565  [key=0, style=solid];
m0_565 -> m0_12  [key=2, style=dotted];
m0_565 -> m0_566  [key=0, style=solid];
m0_566 -> m0_12  [key=2, style=dotted];
m0_566 -> m0_567  [key=0, style=solid];
m0_567 -> m0_12  [key=2, style=dotted];
m0_567 -> m0_568  [key=0, style=solid];
m0_568 -> m0_12  [key=2, style=dotted];
m0_568 -> m0_569  [key=0, style=solid];
m0_569 -> m0_12  [key=2, style=dotted];
m0_569 -> m0_570  [key=0, style=solid];
m0_570 -> m0_12  [key=2, style=dotted];
m0_570 -> m0_571  [key=0, style=solid];
m0_555 -> m0_558  [key=1, style=dashed, color=darkseagreen4, label=name];
m0_555 -> m0_556  [key=0, style=solid];
m0_555 -> m0_85  [key=2, style=dotted];
m0_557 -> m0_558  [key=0, style=solid];
m0_557 -> m0_560  [key=1, style=dashed, color=darkseagreen4, label=productName];
m0_557 -> m0_85  [key=2, style=dotted];
m0_556 -> m0_559  [key=1, style=dashed, color=darkseagreen4, label=productPrice];
m0_556 -> m0_557  [key=0, style=solid];
m0_556 -> m0_85  [key=2, style=dotted];
m0_561 -> m0_564  [key=1, style=dashed, color=darkseagreen4, label=storeNames];
m0_561 -> m0_565  [key=1, style=dashed, color=darkseagreen4, label=storeNames];
m0_561 -> m0_566  [key=1, style=dashed, color=darkseagreen4, label=storeNames];
m0_561 -> m0_562  [key=0, style=solid];
m0_561 -> m0_85  [key=2, style=dotted];
m0_561 -> m0_549  [key=2, style=dotted];
m0_561 -> m0_572  [key=2, style=dotted];
m0_561 -> m0_574  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_563 -> m0_564  [key=0, style=solid];
m0_563 -> m0_570  [key=1, style=dashed, color=darkseagreen4, label=totalPrice];
m0_563 -> m0_573  [key=2, style=dotted];
m0_563 -> m0_580  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_562 -> m0_567  [key=1, style=dashed, color=darkseagreen4, label=firstProductNames];
m0_562 -> m0_568  [key=1, style=dashed, color=darkseagreen4, label=firstProductNames];
m0_562 -> m0_569  [key=1, style=dashed, color=darkseagreen4, label=firstProductNames];
m0_562 -> m0_563  [key=0, style=solid];
m0_562 -> m0_549  [key=2, style=dotted];
m0_562 -> m0_572  [key=2, style=dotted];
m0_562 -> m0_577  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_554 -> m0_555  [key=0, style=solid];
m0_554 -> m0_557  [key=1, style=dashed, color=darkseagreen4, label=o];
m0_554 -> m0_556  [key=1, style=dashed, color=darkseagreen4, label=o];
m0_554 -> m0_561  [key=1, style=dashed, color=darkseagreen4, label=o];
m0_554 -> m0_563  [key=1, style=dashed, color=darkseagreen4, label=o];
m0_554 -> m0_562  [key=1, style=dashed, color=darkseagreen4, label=o];
m0_554 -> m0_9  [key=2, style=dotted];
m0_571 -> m0_553  [key=0, style=bold, color=blue];
m0_323 -> m0_324  [key=0, style=solid];
m0_325 -> m0_10  [key=2, style=dotted];
m0_325 -> m0_326  [key=0, style=solid];
m0_325 -> m0_327  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_325 -> m0_328  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_325 -> m0_329  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_325 -> m0_330  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_327 -> m0_12  [key=2, style=dotted];
m0_327 -> m0_328  [key=0, style=solid];
m0_327 -> m0_42  [key=2, style=dotted];
m0_328 -> m0_12  [key=2, style=dotted];
m0_328 -> m0_329  [key=0, style=solid];
m0_328 -> m0_332  [key=2, style=dotted];
m0_329 -> m0_12  [key=2, style=dotted];
m0_329 -> m0_330  [key=0, style=solid];
m0_329 -> m0_332  [key=2, style=dotted];
m0_330 -> m0_12  [key=2, style=dotted];
m0_330 -> m0_331  [key=0, style=solid];
m0_330 -> m0_332  [key=2, style=dotted];
m0_326 -> m0_121  [key=2, style=dotted];
m0_326 -> m0_327  [key=0, style=solid];
m0_324 -> m0_113  [key=2, style=dotted];
m0_324 -> m0_325  [key=0, style=solid];
m0_331 -> m0_323  [key=0, style=bold, color=blue];
m0_0 -> m0_1  [key=0, style=solid];
m0_3 -> m0_10  [key=2, style=dotted];
m0_3 -> m0_11  [key=2, style=dotted];
m0_3 -> m0_4  [key=0, style=solid];
m0_3 -> m0_5  [key=1, style=dashed, color=darkseagreen4, label=results];
m0_3 -> m0_6  [key=1, style=dashed, color=darkseagreen4, label=results];
m0_3 -> m0_7  [key=1, style=dashed, color=darkseagreen4, label=results];
m0_4 -> m0_12  [key=2, style=dotted];
m0_4 -> m0_5  [key=0, style=solid];
m0_5 -> m0_12  [key=2, style=dotted];
m0_5 -> m0_6  [key=0, style=solid];
m0_6 -> m0_12  [key=2, style=dotted];
m0_6 -> m0_7  [key=0, style=solid];
m0_7 -> m0_12  [key=2, style=dotted];
m0_7 -> m0_8  [key=0, style=solid];
m0_2 -> m0_3  [key=0, style=solid];
m0_2 -> m0_9  [key=2, style=dotted];
m0_1 -> m0_2  [key=0, style=solid];
m0_8 -> m0_0  [key=0, style=bold, color=blue];
m0_359 -> m0_360  [key=0, style=solid];
m0_365 -> m0_366  [key=0, style=solid, color=green];
m0_365 -> m0_121  [key=2, style=dotted, color=green];
m0_364 -> m0_365  [key=0, style=solid, color=green];
m0_364 -> m0_366  [key=1, style=dashed, color=green, label=t];
m0_364 -> m0_367  [key=1, style=dashed, color=green, label=t];
m0_364 -> m0_368  [key=1, style=dashed, color=green, label=t];
m0_364 -> m0_369  [key=1, style=dashed, color=green, label=t];
m0_364 -> m0_370  [key=1, style=dashed, color=green, label=t];
m0_364 -> m0_10  [key=2, style=dotted];
m0_364 -> m0_11  [key=2, style=dotted];
m0_366 -> m0_367  [key=0, style=solid, color=green];
m0_366 -> m0_12  [key=2, style=dotted, color=green];
m0_367 -> m0_368  [key=0, style=solid, color=green];
m0_367 -> m0_12  [key=2, style=dotted, color=green];
m0_368 -> m0_369  [key=0, style=solid, color=green];
m0_368 -> m0_12  [key=2, style=dotted, color=green];
m0_369 -> m0_370  [key=0, style=solid, color=green];
m0_369 -> m0_343  [key=2, style=dotted, color=green];
m0_369 -> m0_372  [key=2, style=dotted, color=green];
m0_369 -> m0_357  [key=2, style=dotted, color=green];
m0_369 -> m0_358  [key=2, style=dotted, color=green];
m0_370 -> m0_371  [key=0, style=solid, color=green];
m0_370 -> m0_372  [key=2, style=dotted, color=green];
m0_370 -> m0_357  [key=2, style=dotted, color=green];
m0_370 -> m0_358  [key=2, style=dotted, color=green];
m0_363 -> m0_364  [key=0, style=solid];
m0_363 -> m0_113  [key=2, style=dotted];
m0_360 -> m0_343  [key=2, style=dotted];
m0_360 -> m0_363  [key=1, style=dashed, color=darkseagreen4, label=o1];
m0_360 -> m0_361  [key=0, style=solid];
m0_361 -> m0_343  [key=2, style=dotted];
m0_361 -> m0_363  [key=1, style=dashed, color=darkseagreen4, label=o2];
m0_361 -> m0_362  [key=0, style=solid];
m0_362 -> m0_343  [key=2, style=dotted];
m0_362 -> m0_372  [key=2, style=dotted];
m0_362 -> m0_363  [key=0, style=solid];
m0_371 -> m0_359  [key=0, style=bold, color=blue];
m0_209 -> m0_210  [key=0, style=solid];
m0_210 -> m0_83  [key=2, style=dotted];
m0_210 -> m0_84  [key=2, style=dotted];
m0_210 -> m0_211  [key=0, style=solid];
m0_210 -> m0_214  [key=1, style=dashed, color=darkseagreen4, label=o];
m0_211 -> m0_153  [key=2, style=dotted];
m0_211 -> m0_212  [key=0, style=solid];
m0_211 -> m0_213  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_212 -> m0_209  [key=0, style=bold, color=blue];
m0_157 -> m0_158  [key=0, style=solid];
m0_158 -> m0_83  [key=2, style=dotted];
m0_158 -> m0_84  [key=2, style=dotted];
m0_158 -> m0_159  [key=0, style=solid];
m0_158 -> m0_162  [key=1, style=dashed, color=darkseagreen4, label=o];
m0_159 -> m0_153  [key=2, style=dotted];
m0_159 -> m0_160  [key=0, style=solid];
m0_159 -> m0_161  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_160 -> m0_157  [key=0, style=bold, color=blue];
m0_405 -> m0_406  [key=0, style=solid];
m0_407 -> m0_10  [key=2, style=dotted];
m0_407 -> m0_11  [key=2, style=dotted];
m0_407 -> m0_408  [key=0, style=solid];
m0_407 -> m0_409  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_407 -> m0_410  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_409 -> m0_12  [key=2, style=dotted];
m0_409 -> m0_410  [key=0, style=solid];
m0_408 -> m0_121  [key=2, style=dotted];
m0_408 -> m0_409  [key=0, style=solid];
m0_410 -> m0_357  [key=2, style=dotted];
m0_410 -> m0_358  [key=2, style=dotted];
m0_410 -> m0_411  [key=0, style=solid];
m0_410 -> m0_83  [key=2, style=dotted];
m0_410 -> m0_84  [key=2, style=dotted];
m0_406 -> m0_113  [key=2, style=dotted];
m0_406 -> m0_407  [key=0, style=solid];
m0_406 -> m0_83  [key=2, style=dotted];
m0_406 -> m0_84  [key=2, style=dotted];
m0_411 -> m0_405  [key=0, style=bold, color=blue];
m0_20 -> m0_21  [key=0, style=solid];
m0_23 -> m0_10  [key=2, style=dotted];
m0_23 -> m0_11  [key=2, style=dotted];
m0_23 -> m0_24  [key=0, style=solid];
m0_23 -> m0_25  [key=1, style=dashed, color=darkseagreen4, label=results];
m0_23 -> m0_26  [key=1, style=dashed, color=darkseagreen4, label=results];
m0_25 -> m0_12  [key=2, style=dotted];
m0_25 -> m0_26  [key=0, style=solid];
m0_26 -> m0_12  [key=2, style=dotted];
m0_26 -> m0_27  [key=0, style=solid];
m0_24 -> m0_12  [key=2, style=dotted];
m0_24 -> m0_25  [key=0, style=solid];
m0_22 -> m0_23  [key=0, style=solid];
m0_22 -> m0_25  [key=1, style=dashed, color=darkseagreen4, label=models];
m0_22 -> m0_26  [key=1, style=dashed, color=darkseagreen4, label=models];
m0_22 -> m0_9  [key=2, style=dotted];
m0_21 -> m0_22  [key=0, style=solid];
m0_27 -> m0_20  [key=0, style=bold, color=blue];
m0_71 -> m0_72  [key=0, style=solid];
m0_75 -> m0_12  [key=2, style=dotted];
m0_75 -> m0_76  [key=0, style=solid];
m0_74 -> m0_75  [key=0, style=solid];
m0_74 -> m0_77  [key=2, style=dotted];
m0_73 -> m0_74  [key=0, style=solid];
m0_73 -> m0_9  [key=2, style=dotted];
m0_72 -> m0_73  [key=0, style=solid];
m0_76 -> m0_71  [key=0, style=bold, color=blue];
m0_176 -> m0_177  [key=0, style=solid];
m0_177 -> m0_113  [key=2, style=dotted];
m0_177 -> m0_178  [key=0, style=solid];
m0_177 -> m0_181  [key=1, style=dashed, color=darkseagreen4, label=a];
m0_178 -> m0_179  [key=0, style=solid];
m0_178 -> m0_153  [key=2, style=dotted];
m0_178 -> m0_180  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_179 -> m0_176  [key=0, style=bold, color=blue];
m0_456 -> m0_457  [key=0, style=solid];
m0_458 -> m0_10  [key=2, style=dotted];
m0_458 -> m0_11  [key=2, style=dotted];
m0_458 -> m0_459  [key=0, style=solid];
m0_458 -> m0_460  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_458 -> m0_461  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_458 -> m0_462  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_460 -> m0_12  [key=2, style=dotted];
m0_460 -> m0_461  [key=0, style=solid];
m0_459 -> m0_121  [key=2, style=dotted];
m0_459 -> m0_460  [key=0, style=solid];
m0_461 -> m0_357  [key=2, style=dotted];
m0_461 -> m0_358  [key=2, style=dotted];
m0_461 -> m0_462  [key=0, style=solid];
m0_461 -> m0_83  [key=2, style=dotted];
m0_461 -> m0_84  [key=2, style=dotted];
m0_462 -> m0_357  [key=2, style=dotted];
m0_462 -> m0_358  [key=2, style=dotted];
m0_462 -> m0_463  [key=0, style=solid];
m0_462 -> m0_83  [key=2, style=dotted];
m0_462 -> m0_84  [key=2, style=dotted];
m0_457 -> m0_113  [key=2, style=dotted];
m0_457 -> m0_458  [key=0, style=solid];
m0_457 -> m0_83  [key=2, style=dotted];
m0_457 -> m0_464  [key=2, style=dotted];
m0_457 -> m0_465  [key=2, style=dotted];
m0_463 -> m0_456  [key=0, style=bold, color=blue];
m0_93 -> m0_94  [key=0, style=solid];
m0_96 -> m0_12  [key=2, style=dotted];
m0_96 -> m0_97  [key=0, style=solid];
m0_95 -> m0_96  [key=0, style=solid];
m0_95 -> m0_85  [key=2, style=dotted];
m0_94 -> m0_95  [key=0, style=solid];
m0_94 -> m0_83  [key=2, style=dotted];
m0_94 -> m0_84  [key=2, style=dotted];
m0_97 -> m0_93  [key=0, style=bold, color=blue];
m0_13 -> m0_14  [key=0, style=solid];
m0_16 -> m0_10  [key=2, style=dotted];
m0_16 -> m0_11  [key=2, style=dotted];
m0_16 -> m0_17  [key=0, style=solid];
m0_16 -> m0_18  [key=1, style=dashed, color=darkseagreen4, label=results];
m0_18 -> m0_12  [key=2, style=dotted];
m0_18 -> m0_19  [key=0, style=solid];
m0_17 -> m0_12  [key=2, style=dotted];
m0_17 -> m0_18  [key=0, style=solid];
m0_15 -> m0_16  [key=0, style=solid];
m0_15 -> m0_18  [key=1, style=dashed, color=darkseagreen4, label=models];
m0_15 -> m0_9  [key=2, style=dotted];
m0_14 -> m0_15  [key=0, style=solid];
m0_19 -> m0_13  [key=0, style=bold, color=blue];
m0_98 -> m0_99  [key=0, style=solid];
m0_101 -> m0_12  [key=2, style=dotted];
m0_101 -> m0_102  [key=0, style=solid];
m0_99 -> m0_101  [key=1, style=dashed, color=darkseagreen4, label=o];
m0_99 -> m0_100  [key=0, style=solid];
m0_99 -> m0_83  [key=2, style=dotted];
m0_99 -> m0_84  [key=2, style=dotted];
m0_100 -> m0_101  [key=0, style=solid];
m0_100 -> m0_85  [key=2, style=dotted];
m0_102 -> m0_98  [key=0, style=bold, color=blue];
m0_466 -> m0_467  [key=0, style=solid];
m0_468 -> m0_10  [key=2, style=dotted];
m0_468 -> m0_11  [key=2, style=dotted];
m0_468 -> m0_469  [key=0, style=solid];
m0_468 -> m0_470  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_468 -> m0_471  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_468 -> m0_472  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_468 -> m0_473  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_468 -> m0_474  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_470 -> m0_12  [key=2, style=dotted];
m0_470 -> m0_471  [key=0, style=solid];
m0_469 -> m0_121  [key=2, style=dotted];
m0_469 -> m0_470  [key=0, style=solid];
m0_471 -> m0_357  [key=2, style=dotted];
m0_471 -> m0_358  [key=2, style=dotted];
m0_471 -> m0_472  [key=0, style=solid];
m0_471 -> m0_83  [key=2, style=dotted];
m0_471 -> m0_84  [key=2, style=dotted];
m0_472 -> m0_357  [key=2, style=dotted];
m0_472 -> m0_358  [key=2, style=dotted];
m0_472 -> m0_473  [key=0, style=solid];
m0_472 -> m0_83  [key=2, style=dotted];
m0_472 -> m0_84  [key=2, style=dotted];
m0_473 -> m0_357  [key=2, style=dotted];
m0_473 -> m0_358  [key=2, style=dotted];
m0_473 -> m0_474  [key=0, style=solid];
m0_473 -> m0_83  [key=2, style=dotted];
m0_473 -> m0_84  [key=2, style=dotted];
m0_474 -> m0_357  [key=2, style=dotted];
m0_474 -> m0_358  [key=2, style=dotted];
m0_474 -> m0_475  [key=0, style=solid];
m0_474 -> m0_83  [key=2, style=dotted];
m0_474 -> m0_84  [key=2, style=dotted];
m0_467 -> m0_113  [key=2, style=dotted];
m0_467 -> m0_468  [key=0, style=solid];
m0_467 -> m0_83  [key=2, style=dotted];
m0_467 -> m0_84  [key=2, style=dotted];
m0_475 -> m0_466  [key=0, style=bold, color=blue];
m0_344 -> m0_345  [key=0, style=solid];
m0_348 -> m0_10  [key=2, style=dotted];
m0_348 -> m0_11  [key=2, style=dotted];
m0_348 -> m0_349  [key=0, style=solid];
m0_348 -> m0_350  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_348 -> m0_351  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_348 -> m0_352  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_348 -> m0_353  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_348 -> m0_354  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_348 -> m0_355  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_350 -> m0_12  [key=2, style=dotted];
m0_350 -> m0_351  [key=0, style=solid];
m0_353 -> m0_12  [key=2, style=dotted];
m0_353 -> m0_354  [key=0, style=solid];
m0_355 -> m0_12  [key=2, style=dotted];
m0_355 -> m0_356  [key=0, style=solid];
m0_349 -> m0_121  [key=2, style=dotted];
m0_349 -> m0_350  [key=0, style=solid];
m0_345 -> m0_343  [key=2, style=dotted];
m0_345 -> m0_346  [key=0, style=solid];
m0_345 -> m0_347  [key=1, style=dashed, color=darkseagreen4, label=o1];
m0_345 -> m0_352  [key=1, style=dashed, color=darkseagreen4, label=o1];
m0_346 -> m0_343  [key=2, style=dotted];
m0_346 -> m0_347  [key=0, style=solid];
m0_346 -> m0_354  [key=1, style=dashed, color=darkseagreen4, label=o2];
m0_352 -> m0_357  [key=2, style=dotted];
m0_352 -> m0_358  [key=2, style=dotted];
m0_352 -> m0_353  [key=0, style=solid];
m0_354 -> m0_357  [key=2, style=dotted];
m0_354 -> m0_358  [key=2, style=dotted];
m0_354 -> m0_355  [key=0, style=solid];
m0_351 -> m0_357  [key=2, style=dotted];
m0_351 -> m0_358  [key=2, style=dotted];
m0_351 -> m0_352  [key=0, style=solid];
m0_347 -> m0_113  [key=2, style=dotted];
m0_347 -> m0_348  [key=0, style=solid];
m0_347 -> m0_351  [key=1, style=dashed, color=darkseagreen4, label=a];
m0_356 -> m0_344  [key=0, style=bold, color=blue];
m0_144 -> m0_145  [key=0, style=solid];
m0_145 -> m0_83  [key=2, style=dotted];
m0_145 -> m0_84  [key=2, style=dotted];
m0_145 -> m0_146  [key=0, style=solid];
m0_146 -> m0_85  [key=2, style=dotted];
m0_146 -> m0_147  [key=0, style=solid];
m0_147 -> m0_143  [key=2, style=dotted];
m0_147 -> m0_148  [key=0, style=solid];
m0_148 -> m0_144  [key=0, style=bold, color=blue];
m0_613 -> m0_614  [key=0, style=solid];
m0_615 -> m0_10  [key=2, style=dotted];
m0_615 -> m0_11  [key=2, style=dotted];
m0_615 -> m0_616  [key=0, style=solid];
m0_616 -> m0_12  [key=2, style=dotted];
m0_616 -> m0_617  [key=0, style=solid];
m0_614 -> m0_343  [key=2, style=dotted];
m0_614 -> m0_615  [key=0, style=solid];
m0_614 -> m0_618  [key=2, style=dotted];
m0_614 -> m0_243  [key=2, style=dotted];
m0_617 -> m0_613  [key=0, style=bold, color=blue];
m0_190 -> m0_191  [key=0, style=solid];
m0_191 -> m0_113  [key=2, style=dotted];
m0_191 -> m0_192  [key=0, style=solid];
m0_191 -> m0_195  [key=1, style=dashed, color=darkseagreen4, label=a];
m0_192 -> m0_193  [key=0, style=solid];
m0_192 -> m0_153  [key=2, style=dotted];
m0_192 -> m0_194  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_193 -> m0_190  [key=0, style=bold, color=blue];
m0_122 -> m0_123  [key=0, style=solid];
m0_124 -> m0_10  [key=2, style=dotted];
m0_124 -> m0_11  [key=2, style=dotted];
m0_124 -> m0_125  [key=0, style=solid];
m0_124 -> m0_126  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_124 -> m0_127  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_124 -> m0_128  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_126 -> m0_12  [key=2, style=dotted];
m0_126 -> m0_127  [key=0, style=solid];
m0_127 -> m0_12  [key=2, style=dotted];
m0_127 -> m0_128  [key=0, style=solid];
m0_128 -> m0_12  [key=2, style=dotted];
m0_128 -> m0_129  [key=0, style=solid];
m0_125 -> m0_121  [key=2, style=dotted];
m0_125 -> m0_126  [key=0, style=solid];
m0_123 -> m0_124  [key=0, style=solid];
m0_123 -> m0_130  [key=2, style=dotted];
m0_123 -> m0_84  [key=2, style=dotted];
m0_129 -> m0_122  [key=0, style=bold, color=blue];
m0_496 -> m0_497  [key=0, style=solid];
m0_498 -> m0_10  [key=2, style=dotted];
m0_498 -> m0_11  [key=2, style=dotted];
m0_498 -> m0_499  [key=0, style=solid];
m0_498 -> m0_500  [key=1, style=dashed, color=darkseagreen4, label=results];
m0_498 -> m0_501  [key=1, style=dashed, color=darkseagreen4, label=results];
m0_498 -> m0_502  [key=1, style=dashed, color=darkseagreen4, label=results];
m0_500 -> m0_12  [key=2, style=dotted];
m0_500 -> m0_501  [key=0, style=solid];
m0_501 -> m0_12  [key=2, style=dotted];
m0_501 -> m0_502  [key=0, style=solid];
m0_502 -> m0_12  [key=2, style=dotted];
m0_502 -> m0_503  [key=0, style=solid];
m0_499 -> m0_12  [key=2, style=dotted];
m0_499 -> m0_500  [key=0, style=solid];
m0_497 -> m0_498  [key=0, style=solid];
m0_497 -> m0_500  [key=1, style=dashed, color=darkseagreen4, label=a];
m0_497 -> m0_501  [key=1, style=dashed, color=darkseagreen4, label=a];
m0_497 -> m0_502  [key=1, style=dashed, color=darkseagreen4, label=a];
m0_497 -> m0_489  [key=2, style=dotted];
m0_503 -> m0_496  [key=0, style=bold, color=blue];
m0_622 -> m0_181  [key=1, style=dashed, color=darkseagreen4, label=a];
m0_623 -> m0_188  [key=1, style=dashed, color=darkseagreen4, label=a];
m0_624 -> m0_195  [key=1, style=dashed, color=darkseagreen4, label=a];
m0_628 -> m0_233  [key=1, style=dashed, color=darkseagreen4, label=a];
m0_629 -> m0_245  [key=1, style=dashed, color=darkseagreen4, label=a];
m0_629 -> m0_248  [key=1, style=dashed, color=darkseagreen4, label=a];
m0_629 -> m0_251  [key=1, style=dashed, color=darkseagreen4, label=a];
m0_629 -> m0_254  [key=1, style=dashed, color=darkseagreen4, label=a];
m0_630 -> m0_266  [key=1, style=dashed, color=darkseagreen4, label=a];
m0_619 -> m0_155  [key=1, style=dashed, color=darkseagreen4, label=o];
m0_620 -> m0_162  [key=1, style=dashed, color=darkseagreen4, label=o];
m0_621 -> m0_169  [key=1, style=dashed, color=darkseagreen4, label=o];
m0_625 -> m0_203  [key=1, style=dashed, color=darkseagreen4, label=c];
m0_626 -> m0_214  [key=1, style=dashed, color=darkseagreen4, label=o];
m0_627 -> m0_226  [key=1, style=dashed, color=darkseagreen4, label=o];
m2_21 -> m2_13  [key=2, style=dotted];
m2_21 -> m2_22  [key=0, style=solid];
m2_44 -> m2_45  [key=0, style=solid];
m2_45 -> m2_10  [key=2, style=dotted];
m2_45 -> m2_11  [key=2, style=dotted];
m2_45 -> m2_46  [key=0, style=solid];
m2_45 -> m2_40  [key=2, style=dotted];
m2_45 -> m2_41  [key=2, style=dotted];
m2_45 -> m2_47  [key=1, style=dashed, color=darkseagreen4, label=e1];
m2_45 -> m2_48  [key=1, style=dashed, color=darkseagreen4, label=e1];
m2_45 -> m2_49  [key=1, style=dashed, color=darkseagreen4, label=e1];
m2_46 -> m2_15  [key=2, style=dotted];
m2_46 -> m2_47  [key=0, style=solid];
m2_46 -> m2_42  [key=2, style=dotted];
m2_46 -> m2_43  [key=2, style=dotted];
m2_47 -> m2_15  [key=2, style=dotted];
m2_47 -> m2_48  [key=0, style=solid];
m2_47 -> m2_42  [key=2, style=dotted];
m2_47 -> m2_43  [key=2, style=dotted];
m2_48 -> m2_16  [key=2, style=dotted];
m2_48 -> m2_49  [key=0, style=solid];
m2_48 -> m2_42  [key=2, style=dotted];
m2_48 -> m2_43  [key=2, style=dotted];
m2_49 -> m2_16  [key=2, style=dotted];
m2_49 -> m2_50  [key=0, style=solid];
m2_49 -> m2_42  [key=2, style=dotted];
m2_49 -> m2_43  [key=2, style=dotted];
m2_50 -> m2_44  [key=0, style=bold, color=blue];
m2_0 -> m2_1  [key=0, style=solid, color=green];
m2_1 -> m2_0  [key=0, style=bold, color=blue];
m2_1 -> m2_2  [key=0, style=solid, color=green];
m2_1 -> m2_9  [key=2, style=dotted, color=green];
m2_1 -> m2_10  [key=2, style=dotted, color=green];
m2_1 -> m2_11  [key=2, style=dotted, color=green];
m2_1 -> m2_12  [key=2, style=dotted, color=green];
m2_1 -> m2_3  [key=1, style=dashed, color=green, label=compositeExpression];
m2_1 -> m2_5  [key=1, style=dashed, color=green, label=compositeExpression];
m2_1 -> m2_7  [key=1, style=dashed, color=green, label=compositeExpression];
m2_8 -> m2_9  [key=0, style=solid];
m2_8 -> m2_0  [key=0, style=bold, color=blue];
m2_9 -> m2_10  [key=0, style=solid];
m2_9 -> m2_13  [key=1, style=dashed, color=darkseagreen4, label=json];
m2_10 -> m2_11  [key=0, style=solid];
m2_10 -> m2_13  [key=0, style=solid];
m2_10 -> m2_17  [key=2, style=dotted];
m2_13 -> m2_14  [key=0, style=solid];
m2_13 -> m2_19  [key=2, style=dotted];
m2_13 -> m2_20  [key=2, style=dotted];
m2_13 -> m2_15  [key=1, style=dashed, color=darkseagreen4, label=website];
m2_11 -> m2_12  [key=0, style=solid, color=red];
m2_12 -> m2_13  [key=0, style=solid, color=red];
m2_12 -> m2_18  [key=2, style=dotted, color=red];
m2_14 -> m2_15  [key=0, style=solid];
m2_14 -> m2_21  [key=2, style=dotted];
m2_15 -> m2_16  [key=0, style=solid];
m2_15 -> m2_22  [key=2, style=dotted];
m2_16 -> m2_8  [key=0, style=bold, color=blue];
m2_2 -> m2_3  [key=0, style=solid];
m2_2 -> m2_5  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.DeserializeConstructorHandling.Website"];
m2_2 -> m2_13  [key=2, style=dotted];
m2_3 -> m2_4  [key=0, style=solid];
m2_3 -> m2_5  [key=0, style=solid];
m2_3 -> m2_14  [key=2, style=dotted];
m2_3 -> m2_15  [key=2, style=dotted];
m2_5 -> m2_6  [key=0, style=solid];
m2_5 -> m2_14  [key=2, style=dotted];
m2_5 -> m2_16  [key=2, style=dotted];
m2_4 -> m2_6  [key=0, style=solid];
m2_4 -> m2_7  [key=2, style=dotted];
m2_4 -> m2_5  [key=0, style=solid];
m2_4 -> m2_13  [key=2, style=dotted];
m2_6 -> m2_2  [key=0, style=bold, color=blue];
m2_6 -> m2_7  [key=0, style=solid];
m2_6 -> m2_13  [key=2, style=dotted];
m2_7 -> m2_8  [key=0, style=solid];
m2_7 -> m2_14  [key=2, style=dotted];
m2_7 -> m2_16  [key=2, style=dotted];
m2_17 -> m2_18  [key=0, style=solid];
m2_18 -> m2_9  [key=2, style=dotted];
m2_18 -> m2_10  [key=2, style=dotted];
m2_18 -> m2_11  [key=2, style=dotted];
m2_18 -> m2_12  [key=2, style=dotted];
m2_18 -> m2_19  [key=0, style=solid];
m2_18 -> m2_20  [key=1, style=dashed, color=darkseagreen4, label=compositeExpression];
m2_18 -> m2_22  [key=1, style=dashed, color=darkseagreen4, label=compositeExpression];
m2_18 -> m2_24  [key=1, style=dashed, color=darkseagreen4, label=compositeExpression];
m2_19 -> m2_13  [key=2, style=dotted];
m2_19 -> m2_20  [key=0, style=solid];
m2_23 -> m2_13  [key=2, style=dotted];
m2_23 -> m2_24  [key=0, style=solid];
m2_23 -> m2_5  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.DeserializeConstructorHandling.Website"];
m2_20 -> m2_14  [key=2, style=dotted];
m2_20 -> m2_15  [key=2, style=dotted];
m2_20 -> m2_21  [key=0, style=solid];
m2_22 -> m2_14  [key=2, style=dotted];
m2_22 -> m2_15  [key=2, style=dotted];
m2_22 -> m2_23  [key=0, style=solid];
m2_24 -> m2_14  [key=2, style=dotted];
m2_24 -> m2_16  [key=2, style=dotted];
m2_24 -> m2_25  [key=0, style=solid];
m2_25 -> m2_17  [key=0, style=bold, color=blue];
m2_51 -> m2_52  [key=0, style=solid];
m2_52 -> m2_10  [key=2, style=dotted];
m2_52 -> m2_11  [key=2, style=dotted];
m2_52 -> m2_53  [key=0, style=solid];
m2_52 -> m2_40  [key=2, style=dotted];
m2_52 -> m2_41  [key=2, style=dotted];
m2_52 -> m2_54  [key=1, style=dashed, color=darkseagreen4, label=e1];
m2_52 -> m2_55  [key=1, style=dashed, color=darkseagreen4, label=e1];
m2_52 -> m2_56  [key=1, style=dashed, color=darkseagreen4, label=e1];
m2_52 -> m2_57  [key=1, style=dashed, color=darkseagreen4, label=e1];
m2_52 -> m2_58  [key=1, style=dashed, color=darkseagreen4, label=e1];
m2_53 -> m2_15  [key=2, style=dotted];
m2_53 -> m2_54  [key=0, style=solid];
m2_53 -> m2_42  [key=2, style=dotted];
m2_53 -> m2_43  [key=2, style=dotted];
m2_54 -> m2_15  [key=2, style=dotted];
m2_54 -> m2_55  [key=0, style=solid];
m2_54 -> m2_42  [key=2, style=dotted];
m2_54 -> m2_43  [key=2, style=dotted];
m2_55 -> m2_15  [key=2, style=dotted];
m2_55 -> m2_56  [key=0, style=solid];
m2_55 -> m2_42  [key=2, style=dotted];
m2_55 -> m2_43  [key=2, style=dotted];
m2_56 -> m2_15  [key=2, style=dotted];
m2_56 -> m2_57  [key=0, style=solid];
m2_56 -> m2_42  [key=2, style=dotted];
m2_56 -> m2_43  [key=2, style=dotted];
m2_57 -> m2_16  [key=2, style=dotted];
m2_57 -> m2_58  [key=0, style=solid];
m2_57 -> m2_42  [key=2, style=dotted];
m2_57 -> m2_43  [key=2, style=dotted];
m2_58 -> m2_16  [key=2, style=dotted];
m2_58 -> m2_59  [key=0, style=solid];
m2_58 -> m2_42  [key=2, style=dotted];
m2_58 -> m2_43  [key=2, style=dotted];
m2_59 -> m2_51  [key=0, style=bold, color=blue];
m2_26 -> m2_27  [key=0, style=solid];
m2_27 -> m2_10  [key=2, style=dotted];
m2_27 -> m2_11  [key=2, style=dotted];
m2_27 -> m2_28  [key=0, style=solid];
m2_27 -> m2_40  [key=2, style=dotted];
m2_27 -> m2_41  [key=2, style=dotted];
m2_27 -> m2_29  [key=1, style=dashed, color=darkseagreen4, label=e1];
m2_27 -> m2_30  [key=1, style=dashed, color=darkseagreen4, label=e1];
m2_27 -> m2_31  [key=1, style=dashed, color=darkseagreen4, label=e1];
m2_27 -> m2_32  [key=1, style=dashed, color=darkseagreen4, label=e1];
m2_27 -> m2_38  [key=1, style=dashed, color=darkseagreen4, label=e1];
m2_33 -> m2_10  [key=2, style=dotted];
m2_33 -> m2_11  [key=2, style=dotted];
m2_33 -> m2_34  [key=0, style=solid];
m2_33 -> m2_40  [key=2, style=dotted];
m2_33 -> m2_41  [key=2, style=dotted];
m2_33 -> m2_35  [key=1, style=dashed, color=darkseagreen4, label=e2];
m2_33 -> m2_36  [key=1, style=dashed, color=darkseagreen4, label=e2];
m2_33 -> m2_37  [key=1, style=dashed, color=darkseagreen4, label=e2];
m2_28 -> m2_15  [key=2, style=dotted];
m2_28 -> m2_29  [key=0, style=solid];
m2_28 -> m2_42  [key=2, style=dotted];
m2_28 -> m2_43  [key=2, style=dotted];
m2_29 -> m2_15  [key=2, style=dotted];
m2_29 -> m2_30  [key=0, style=solid];
m2_29 -> m2_42  [key=2, style=dotted];
m2_29 -> m2_43  [key=2, style=dotted];
m2_30 -> m2_16  [key=2, style=dotted];
m2_30 -> m2_31  [key=0, style=solid];
m2_30 -> m2_42  [key=2, style=dotted];
m2_30 -> m2_43  [key=2, style=dotted];
m2_31 -> m2_16  [key=2, style=dotted];
m2_31 -> m2_32  [key=0, style=solid];
m2_31 -> m2_42  [key=2, style=dotted];
m2_31 -> m2_43  [key=2, style=dotted];
m2_32 -> m2_33  [key=0, style=solid];
m2_32 -> m2_16  [key=2, style=dotted];
m2_32 -> m2_42  [key=2, style=dotted];
m2_32 -> m2_43  [key=2, style=dotted];
m2_38 -> m2_16  [key=2, style=dotted];
m2_38 -> m2_39  [key=0, style=solid];
m2_38 -> m2_42  [key=2, style=dotted];
m2_38 -> m2_43  [key=2, style=dotted];
m2_34 -> m2_15  [key=2, style=dotted];
m2_34 -> m2_35  [key=0, style=solid];
m2_34 -> m2_42  [key=2, style=dotted];
m2_34 -> m2_43  [key=2, style=dotted];
m2_35 -> m2_15  [key=2, style=dotted];
m2_35 -> m2_36  [key=0, style=solid];
m2_35 -> m2_42  [key=2, style=dotted];
m2_35 -> m2_43  [key=2, style=dotted];
m2_36 -> m2_15  [key=2, style=dotted];
m2_36 -> m2_37  [key=0, style=solid];
m2_36 -> m2_42  [key=2, style=dotted];
m2_36 -> m2_43  [key=2, style=dotted];
m2_37 -> m2_16  [key=2, style=dotted];
m2_37 -> m2_38  [key=0, style=solid];
m2_37 -> m2_42  [key=2, style=dotted];
m2_37 -> m2_43  [key=2, style=dotted];
m2_39 -> m2_26  [key=0, style=bold, color=blue];
m4_943 -> m4_944  [key=0, style=solid];
m4_946 -> m4_15  [key=2, style=dotted];
m4_946 -> m4_50  [key=2, style=dotted];
m4_946 -> m4_947  [key=0, style=solid];
m4_947 -> m4_15  [key=2, style=dotted];
m4_947 -> m4_50  [key=2, style=dotted];
m4_947 -> m4_948  [key=0, style=solid];
m4_948 -> m4_15  [key=2, style=dotted];
m4_948 -> m4_50  [key=2, style=dotted];
m4_948 -> m4_949  [key=0, style=solid];
m4_945 -> m4_13  [key=2, style=dotted];
m4_945 -> m4_24  [key=2, style=dotted];
m4_945 -> m4_946  [key=0, style=solid];
m4_945 -> m4_947  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_945 -> m4_948  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_945 -> m4_949  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_949 -> m4_50  [key=2, style=dotted];
m4_949 -> m4_950  [key=0, style=solid];
m4_949 -> m4_17  [key=2, style=dotted];
m4_944 -> m4_945  [key=0, style=solid];
m4_950 -> m4_943  [key=0, style=bold, color=blue];
m4_21 -> m4_55  [key=0, style=solid];
m4_21 -> m4_57  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JContainer"];
m4_21 -> m4_60  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JContainer"];
m4_21 -> m4_25  [key=2, style=dotted];
m4_21 -> m4_22  [key=0, style=solid];
m4_21 -> m4_23  [key=0, style=solid];
m4_55 -> m4_56  [key=0, style=solid, color=green];
m4_55 -> m4_58  [key=1, style=dashed, color=darkseagreen4, label=firstChild];
m4_55 -> m4_59  [key=1, style=dashed, color=darkseagreen4, label=firstChild];
m4_55 -> m4_50  [key=2, style=dotted, color=green];
m4_57 -> m4_62  [key=0, style=solid];
m4_57 -> m4_36  [key=2, style=dotted];
m4_57 -> m4_58  [key=0, style=solid, color=green];
m4_57 -> m4_50  [key=2, style=dotted, color=green];
m4_60 -> m4_61  [key=0, style=solid, color=green];
m4_60 -> m4_44  [key=2, style=dotted, color=green];
m4_56 -> m4_57  [key=0, style=solid, color=green];
m4_56 -> m4_58  [key=0, style=solid];
m4_56 -> m4_44  [key=2, style=dotted, color=green];
m4_58 -> m4_59  [key=0, style=solid, color=green];
m4_58 -> m4_23  [key=2, style=dotted];
m4_58 -> m4_44  [key=2, style=dotted, color=green];
m4_59 -> m4_60  [key=0, style=solid, color=green];
m4_59 -> m4_50  [key=2, style=dotted, color=green];
m4_61 -> m4_62  [key=0, style=solid, color=green];
m4_61 -> m4_50  [key=2, style=dotted, color=green];
m4_62 -> m4_21  [key=0, style=bold, color=blue];
m4_62 -> m4_63  [key=0, style=solid, color=green];
m4_62 -> m4_44  [key=2, style=dotted, color=green];
m4_117 -> m4_118  [key=0, style=solid];
m4_117 -> m4_44  [key=2, style=dotted];
m4_118 -> m4_119  [key=0, style=solid];
m4_118 -> m4_120  [key=0, style=solid];
m4_118 -> m4_44  [key=2, style=dotted];
m4_119 -> m4_122  [key=0, style=solid];
m4_119 -> m4_44  [key=2, style=dotted];
m4_119 -> m4_120  [key=0, style=solid];
m4_120 -> m4_121  [key=0, style=solid];
m4_120 -> m4_44  [key=2, style=dotted];
m4_121 -> m4_122  [key=0, style=solid];
m4_121 -> m4_123  [key=2, style=dotted];
m4_121 -> m4_50  [key=2, style=dotted];
m4_122 -> m4_117  [key=0, style=bold, color=blue];
m4_122 -> m4_44  [key=2, style=dotted];
m4_122 -> m4_123  [key=0, style=solid];
m4_12 -> m4_20  [key=0, style=solid];
m4_599 -> m4_600  [key=0, style=solid];
m4_605 -> m4_44  [key=2, style=dotted];
m4_605 -> m4_606  [key=0, style=solid];
m4_601 -> m4_13  [key=2, style=dotted];
m4_601 -> m4_602  [key=0, style=solid];
m4_600 -> m4_24  [key=2, style=dotted];
m4_600 -> m4_601  [key=0, style=solid];
m4_604 -> m4_605  [key=0, style=solid];
m4_604 -> m4_609  [key=2, style=dotted];
m4_602 -> m4_604  [key=1, style=dashed, color=darkseagreen4, label=data];
m4_602 -> m4_603  [key=0, style=solid];
m4_602 -> m4_607  [key=2, style=dotted];
m4_603 -> m4_604  [key=0, style=solid];
m4_603 -> m4_608  [key=2, style=dotted];
m4_606 -> m4_599  [key=0, style=bold, color=blue];
m4_78 -> m4_79  [key=0, style=solid, color=green];
m4_78 -> m4_111  [key=0, style=solid];
m4_78 -> m4_112  [key=2, style=dotted];
m4_79 -> m4_80  [key=0, style=solid, color=green];
m4_80 -> m4_81  [key=0, style=solid, color=green];
m4_80 -> m4_24  [key=2, style=dotted, color=green];
m4_80 -> m4_111  [key=0, style=solid];
m4_80 -> m4_112  [key=2, style=dotted];
m4_81 -> m4_13  [key=2, style=dotted];
m4_81 -> m4_82  [key=0, style=solid];
m4_81 -> m4_83  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_81 -> m4_84  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_81 -> m4_85  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_81 -> m4_86  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_81 -> m4_87  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_81 -> m4_88  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_81 -> m4_89  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_81 -> m4_90  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_81 -> m4_91  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_81 -> m4_92  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_81 -> m4_93  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_81 -> m4_94  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_81 -> m4_95  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_81 -> m4_96  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_81 -> m4_97  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_81 -> m4_98  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_81 -> m4_99  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_81 -> m4_100  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_81 -> m4_101  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_81 -> m4_102  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_81 -> m4_103  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_81 -> m4_104  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_81 -> m4_105  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_81 -> m4_106  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_81 -> m4_107  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_81 -> m4_108  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_81 -> m4_109  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_81 -> m4_110  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_81 -> m4_111  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_81 -> m4_112  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_81 -> m4_113  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_81 -> m4_114  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_81 -> m4_115  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_81 -> m4_116  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_81 -> m4_117  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_81 -> m4_118  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_81 -> m4_119  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_81 -> m4_120  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_81 -> m4_121  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_81 -> m4_122  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_81 -> m4_123  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_81 -> m4_124  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_81 -> m4_125  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_81 -> m4_126  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_81 -> m4_127  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_81 -> m4_128  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_81 -> m4_129  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_83 -> m4_44  [key=2, style=dotted];
m4_83 -> m4_84  [key=0, style=solid];
m4_84 -> m4_44  [key=2, style=dotted];
m4_84 -> m4_85  [key=0, style=solid];
m4_84 -> m4_111  [key=0, style=solid];
m4_84 -> m4_112  [key=2, style=dotted];
m4_85 -> m4_44  [key=2, style=dotted];
m4_85 -> m4_86  [key=0, style=solid];
m4_87 -> m4_44  [key=2, style=dotted];
m4_87 -> m4_88  [key=0, style=solid];
m4_88 -> m4_44  [key=2, style=dotted];
m4_88 -> m4_89  [key=0, style=solid];
m4_88 -> m4_111  [key=0, style=solid];
m4_88 -> m4_112  [key=2, style=dotted];
m4_89 -> m4_44  [key=2, style=dotted];
m4_89 -> m4_90  [key=0, style=solid];
m4_91 -> m4_44  [key=2, style=dotted];
m4_91 -> m4_92  [key=0, style=solid];
m4_92 -> m4_44  [key=2, style=dotted];
m4_92 -> m4_93  [key=0, style=solid];
m4_92 -> m4_111  [key=0, style=solid];
m4_92 -> m4_112  [key=2, style=dotted];
m4_93 -> m4_44  [key=2, style=dotted];
m4_93 -> m4_94  [key=0, style=solid];
m4_94 -> m4_44  [key=2, style=dotted];
m4_94 -> m4_95  [key=0, style=solid];
m4_94 -> m4_111  [key=0, style=solid];
m4_94 -> m4_112  [key=2, style=dotted];
m4_96 -> m4_44  [key=2, style=dotted];
m4_96 -> m4_97  [key=0, style=solid];
m4_96 -> m4_111  [key=0, style=solid];
m4_96 -> m4_112  [key=2, style=dotted];
m4_97 -> m4_44  [key=2, style=dotted];
m4_97 -> m4_98  [key=0, style=solid];
m4_98 -> m4_44  [key=2, style=dotted];
m4_98 -> m4_99  [key=0, style=solid];
m4_98 -> m4_111  [key=0, style=solid];
m4_98 -> m4_112  [key=2, style=dotted];
m4_99 -> m4_44  [key=2, style=dotted];
m4_99 -> m4_100  [key=0, style=solid];
m4_101 -> m4_44  [key=2, style=dotted];
m4_101 -> m4_102  [key=0, style=solid];
m4_102 -> m4_44  [key=2, style=dotted];
m4_102 -> m4_103  [key=0, style=solid];
m4_102 -> m4_111  [key=0, style=solid];
m4_102 -> m4_113  [key=2, style=dotted];
m4_102 -> m4_112  [key=2, style=dotted];
m4_103 -> m4_44  [key=2, style=dotted];
m4_103 -> m4_104  [key=0, style=solid];
m4_104 -> m4_44  [key=2, style=dotted];
m4_104 -> m4_105  [key=0, style=solid];
m4_104 -> m4_106  [key=1, style=dashed, color=darkseagreen4, label=v];
m4_104 -> m4_107  [key=1, style=dashed, color=darkseagreen4, label=v];
m4_106 -> m4_44  [key=2, style=dotted];
m4_106 -> m4_107  [key=0, style=solid];
m4_106 -> m4_111  [key=0, style=solid];
m4_106 -> m4_112  [key=2, style=dotted];
m4_107 -> m4_44  [key=2, style=dotted];
m4_107 -> m4_108  [key=0, style=solid];
m4_107 -> m4_111  [key=0, style=solid];
m4_107 -> m4_113  [key=2, style=dotted];
m4_107 -> m4_112  [key=2, style=dotted];
m4_108 -> m4_44  [key=2, style=dotted];
m4_108 -> m4_109  [key=0, style=solid];
m4_110 -> m4_44  [key=2, style=dotted];
m4_110 -> m4_111  [key=0, style=solid];
m4_110 -> m4_54  [key=2, style=dotted];
m4_111 -> m4_44  [key=2, style=dotted];
m4_111 -> m4_112  [key=0, style=solid];
m4_111 -> m4_23  [key=0, style=bold, color=blue];
m4_112 -> m4_44  [key=2, style=dotted];
m4_112 -> m4_113  [key=0, style=solid];
m4_113 -> m4_44  [key=2, style=dotted];
m4_113 -> m4_114  [key=0, style=solid];
m4_114 -> m4_44  [key=2, style=dotted];
m4_114 -> m4_115  [key=0, style=solid];
m4_114 -> m4_116  [key=2, style=dotted];
m4_116 -> m4_44  [key=2, style=dotted];
m4_116 -> m4_117  [key=0, style=solid];
m4_123 -> m4_44  [key=2, style=dotted];
m4_123 -> m4_124  [key=0, style=solid];
m4_124 -> m4_44  [key=2, style=dotted];
m4_124 -> m4_125  [key=0, style=solid];
m4_124 -> m4_2  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JTokenReader"];
m4_124 -> m4_7  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JTokenReader"];
m4_124 -> m4_10  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JTokenReader"];
m4_124 -> m4_11  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JTokenReader"];
m4_124 -> m4_13  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JTokenReader"];
m4_124 -> m4_14  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JTokenReader"];
m4_124 -> m4_15  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JTokenReader"];
m4_124 -> m4_16  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JTokenReader"];
m4_124 -> m4_17  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JTokenReader"];
m4_124 -> m4_18  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JTokenReader"];
m4_124 -> m4_24  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JTokenReader"];
m4_124 -> m4_25  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JTokenReader"];
m4_124 -> m4_29  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JTokenReader"];
m4_124 -> m4_30  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JTokenReader"];
m4_124 -> m4_31  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JTokenReader"];
m4_124 -> m4_32  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JTokenReader"];
m4_124 -> m4_37  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JTokenReader"];
m4_124 -> m4_38  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JTokenReader"];
m4_124 -> m4_57  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JTokenReader"];
m4_124 -> m4_58  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JTokenReader"];
m4_124 -> m4_59  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JTokenReader"];
m4_124 -> m4_60  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JTokenReader"];
m4_124 -> m4_63  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JTokenReader"];
m4_124 -> m4_65  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JTokenReader"];
m4_124 -> m4_66  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JTokenReader"];
m4_124 -> m4_67  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JTokenReader"];
m4_124 -> m4_69  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JTokenReader"];
m4_124 -> m4_74  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JTokenReader"];
m4_124 -> m4_76  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JTokenReader"];
m4_124 -> m4_78  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JTokenReader"];
m4_124 -> m4_80  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JTokenReader"];
m4_124 -> m4_82  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JTokenReader"];
m4_124 -> m4_84  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JTokenReader"];
m4_124 -> m4_86  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JTokenReader"];
m4_124 -> m4_88  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JTokenReader"];
m4_124 -> m4_90  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JTokenReader"];
m4_124 -> m4_92  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JTokenReader"];
m4_124 -> m4_94  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JTokenReader"];
m4_124 -> m4_96  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JTokenReader"];
m4_124 -> m4_98  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JTokenReader"];
m4_124 -> m4_100  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JTokenReader"];
m4_124 -> m4_102  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JTokenReader"];
m4_124 -> m4_106  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JTokenReader"];
m4_124 -> m4_107  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JTokenReader"];
m4_124 -> m4_109  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JTokenReader"];
m4_124 -> m4_118  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JTokenReader"];
m4_124 -> m4_120  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JTokenReader"];
m4_126 -> m4_44  [key=2, style=dotted];
m4_126 -> m4_127  [key=0, style=solid];
m4_127 -> m4_44  [key=2, style=dotted];
m4_127 -> m4_128  [key=0, style=solid];
m4_128 -> m4_44  [key=2, style=dotted];
m4_128 -> m4_129  [key=0, style=solid];
m4_86 -> m4_50  [key=2, style=dotted];
m4_86 -> m4_87  [key=0, style=solid];
m4_86 -> m4_111  [key=0, style=solid];
m4_86 -> m4_112  [key=2, style=dotted];
m4_90 -> m4_50  [key=2, style=dotted];
m4_90 -> m4_91  [key=0, style=solid];
m4_90 -> m4_111  [key=0, style=solid];
m4_90 -> m4_112  [key=2, style=dotted];
m4_95 -> m4_50  [key=2, style=dotted];
m4_95 -> m4_96  [key=0, style=solid];
m4_100 -> m4_50  [key=2, style=dotted];
m4_100 -> m4_101  [key=0, style=solid];
m4_100 -> m4_111  [key=0, style=solid];
m4_100 -> m4_112  [key=2, style=dotted];
m4_105 -> m4_50  [key=2, style=dotted];
m4_105 -> m4_106  [key=0, style=solid];
m4_105 -> m4_107  [key=0, style=solid];
m4_109 -> m4_50  [key=2, style=dotted];
m4_109 -> m4_110  [key=0, style=solid];
m4_109 -> m4_111  [key=0, style=solid];
m4_109 -> m4_113  [key=2, style=dotted];
m4_109 -> m4_112  [key=2, style=dotted];
m4_115 -> m4_50  [key=2, style=dotted];
m4_115 -> m4_116  [key=0, style=solid];
m4_115 -> m4_113  [key=0, style=bold, color=blue];
m4_125 -> m4_50  [key=2, style=dotted];
m4_125 -> m4_126  [key=0, style=solid];
m4_129 -> m4_50  [key=2, style=dotted];
m4_129 -> m4_130  [key=0, style=solid];
m4_129 -> m4_17  [key=2, style=dotted];
m4_82 -> m4_67  [key=2, style=dotted];
m4_82 -> m4_83  [key=0, style=solid];
m4_82 -> m4_111  [key=0, style=solid];
m4_82 -> m4_112  [key=2, style=dotted];
m4_130 -> m4_78  [key=0, style=bold, color=blue];
m4_6 -> m4_7  [key=0, style=solid];
m4_6 -> m4_8  [key=1, style=dashed, color=darkseagreen4, label=ms];
m4_6 -> m4_10  [key=1, style=dashed, color=darkseagreen4, label=ms];
m4_6 -> m4_12  [key=2, style=dotted];
m4_7 -> m4_8  [key=0, style=solid];
m4_7 -> m4_13  [key=2, style=dotted];
m4_7 -> m4_14  [key=2, style=dotted];
m4_7 -> m4_9  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_8 -> m4_6  [key=0, style=bold, color=blue];
m4_8 -> m4_15  [key=2, style=dotted];
m4_8 -> m4_9  [key=0, style=solid];
m4_5 -> m4_17  [key=2, style=dotted];
m4_5 -> m4_6  [key=0, style=solid];
m4_670 -> m4_671  [key=0, style=solid];
m4_671 -> m4_13  [key=2, style=dotted];
m4_671 -> m4_24  [key=2, style=dotted];
m4_671 -> m4_672  [key=0, style=solid];
m4_672 -> m4_673  [key=0, style=solid];
m4_672 -> m4_607  [key=2, style=dotted];
m4_673 -> m4_670  [key=0, style=bold, color=blue];
m4_959 -> m4_960  [key=0, style=solid];
m4_962 -> m4_15  [key=2, style=dotted];
m4_962 -> m4_50  [key=2, style=dotted];
m4_962 -> m4_963  [key=0, style=solid];
m4_964 -> m4_15  [key=2, style=dotted];
m4_964 -> m4_50  [key=2, style=dotted];
m4_964 -> m4_965  [key=0, style=solid];
m4_963 -> m4_44  [key=2, style=dotted];
m4_963 -> m4_964  [key=0, style=solid];
m4_965 -> m4_44  [key=2, style=dotted];
m4_965 -> m4_966  [key=0, style=solid];
m4_961 -> m4_13  [key=2, style=dotted];
m4_961 -> m4_24  [key=2, style=dotted];
m4_961 -> m4_962  [key=0, style=solid];
m4_961 -> m4_964  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_961 -> m4_963  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_961 -> m4_965  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_960 -> m4_961  [key=0, style=solid];
m4_966 -> m4_959  [key=0, style=bold, color=blue];
m4_14 -> m4_15  [key=0, style=solid];
m4_14 -> m4_16  [key=0, style=solid];
m4_309 -> m4_310  [key=0, style=solid];
m4_311 -> m4_25  [key=2, style=dotted];
m4_311 -> m4_15  [key=2, style=dotted];
m4_311 -> m4_312  [key=0, style=solid];
m4_312 -> m4_25  [key=2, style=dotted];
m4_312 -> m4_313  [key=0, style=solid];
m4_310 -> m4_13  [key=2, style=dotted];
m4_310 -> m4_24  [key=2, style=dotted];
m4_310 -> m4_311  [key=0, style=solid];
m4_310 -> m4_312  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_313 -> m4_309  [key=0, style=bold, color=blue];
m4_979 -> m4_980  [key=0, style=solid];
m4_982 -> m4_15  [key=2, style=dotted];
m4_982 -> m4_50  [key=2, style=dotted];
m4_982 -> m4_983  [key=0, style=solid];
m4_981 -> m4_13  [key=2, style=dotted];
m4_981 -> m4_24  [key=2, style=dotted];
m4_981 -> m4_982  [key=0, style=solid];
m4_980 -> m4_981  [key=0, style=solid];
m4_983 -> m4_979  [key=0, style=bold, color=blue];
m4_707 -> m4_708  [key=0, style=solid];
m4_710 -> m4_15  [key=2, style=dotted];
m4_710 -> m4_50  [key=2, style=dotted];
m4_710 -> m4_711  [key=0, style=solid];
m4_712 -> m4_15  [key=2, style=dotted];
m4_712 -> m4_50  [key=2, style=dotted];
m4_712 -> m4_713  [key=0, style=solid];
m4_718 -> m4_15  [key=2, style=dotted];
m4_718 -> m4_50  [key=2, style=dotted];
m4_718 -> m4_719  [key=0, style=solid];
m4_711 -> m4_44  [key=2, style=dotted];
m4_711 -> m4_712  [key=0, style=solid];
m4_713 -> m4_44  [key=2, style=dotted];
m4_713 -> m4_714  [key=0, style=solid];
m4_715 -> m4_44  [key=2, style=dotted];
m4_715 -> m4_716  [key=0, style=solid];
m4_716 -> m4_44  [key=2, style=dotted];
m4_716 -> m4_717  [key=0, style=solid];
m4_717 -> m4_44  [key=2, style=dotted];
m4_717 -> m4_718  [key=0, style=solid];
m4_717 -> m4_721  [key=2, style=dotted];
m4_717 -> m4_722  [key=2, style=dotted];
m4_717 -> m4_723  [key=2, style=dotted];
m4_719 -> m4_44  [key=2, style=dotted];
m4_719 -> m4_720  [key=0, style=solid];
m4_709 -> m4_13  [key=2, style=dotted];
m4_709 -> m4_24  [key=2, style=dotted];
m4_709 -> m4_710  [key=0, style=solid];
m4_709 -> m4_712  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_709 -> m4_718  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_709 -> m4_711  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_709 -> m4_713  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_709 -> m4_715  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_709 -> m4_716  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_709 -> m4_717  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_709 -> m4_719  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_709 -> m4_714  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_714 -> m4_715  [key=0, style=solid];
m4_714 -> m4_650  [key=2, style=dotted];
m4_708 -> m4_709  [key=0, style=solid];
m4_720 -> m4_707  [key=0, style=bold, color=blue];
m4_71 -> m4_71  [key=0, style=solid, color=green];
m4_71 -> m4_72  [key=0, style=solid, color=green];
m4_71 -> m4_50  [key=2, style=dotted, color=green];
m4_41 -> m4_42  [key=0, style=solid, color=green];
m4_41 -> m4_25  [key=2, style=dotted, color=green];
m4_41 -> m4_15  [key=2, style=dotted, color=green];
m4_803 -> m4_804  [key=0, style=solid];
m4_807 -> m4_15  [key=2, style=dotted];
m4_807 -> m4_50  [key=2, style=dotted];
m4_807 -> m4_808  [key=0, style=solid];
m4_809 -> m4_15  [key=2, style=dotted];
m4_809 -> m4_50  [key=2, style=dotted];
m4_809 -> m4_810  [key=0, style=solid];
m4_816 -> m4_15  [key=2, style=dotted];
m4_816 -> m4_50  [key=2, style=dotted];
m4_816 -> m4_817  [key=0, style=solid];
m4_808 -> m4_44  [key=2, style=dotted];
m4_808 -> m4_809  [key=0, style=solid];
m4_810 -> m4_44  [key=2, style=dotted];
m4_810 -> m4_811  [key=0, style=solid];
m4_812 -> m4_44  [key=2, style=dotted];
m4_812 -> m4_813  [key=0, style=solid];
m4_813 -> m4_44  [key=2, style=dotted];
m4_813 -> m4_814  [key=0, style=solid];
m4_817 -> m4_44  [key=2, style=dotted];
m4_817 -> m4_818  [key=0, style=solid];
m4_815 -> m4_44  [key=2, style=dotted];
m4_815 -> m4_816  [key=0, style=solid];
m4_815 -> m4_815  [key=1, style=dashed, color=darkseagreen4, label=dt];
m4_815 -> m4_802  [key=2, style=dotted];
m4_805 -> m4_13  [key=2, style=dotted];
m4_805 -> m4_24  [key=2, style=dotted];
m4_805 -> m4_807  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_805 -> m4_809  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_805 -> m4_816  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_805 -> m4_808  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_805 -> m4_810  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_805 -> m4_812  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_805 -> m4_813  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_805 -> m4_817  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_805 -> m4_806  [key=0, style=solid];
m4_805 -> m4_811  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_805 -> m4_814  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_806 -> m4_807  [key=0, style=solid];
m4_806 -> m4_819  [key=2, style=dotted];
m4_811 -> m4_812  [key=0, style=solid];
m4_811 -> m4_650  [key=2, style=dotted];
m4_814 -> m4_815  [key=0, style=solid];
m4_804 -> m4_805  [key=0, style=solid];
m4_818 -> m4_803  [key=0, style=bold, color=blue];
m4_638 -> m4_639  [key=0, style=solid];
m4_639 -> m4_13  [key=2, style=dotted];
m4_639 -> m4_24  [key=2, style=dotted];
m4_639 -> m4_640  [key=0, style=solid];
m4_640 -> m4_641  [key=0, style=solid];
m4_640 -> m4_607  [key=2, style=dotted];
m4_641 -> m4_638  [key=0, style=bold, color=blue];
m4_0 -> m4_1  [key=0, style=solid];
m4_0 -> m4_2  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JToken"];
m4_1 -> m4_2  [key=0, style=solid];
m4_1 -> m4_4  [key=2, style=dotted];
m4_1 -> m4_5  [key=2, style=dotted];
m4_1 -> m4_3  [key=1, style=dashed, color=darkseagreen4, label=ms];
m4_1 -> m4_12  [key=2, style=dotted];
m4_2 -> m4_3  [key=0, style=solid];
m4_2 -> m4_13  [key=2, style=dotted];
m4_2 -> m4_14  [key=2, style=dotted];
m4_2 -> m4_4  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_3 -> m4_0  [key=0, style=bold, color=blue];
m4_3 -> m4_15  [key=2, style=dotted];
m4_3 -> m4_4  [key=0, style=solid];
m4_738 -> m4_739  [key=0, style=solid];
m4_741 -> m4_15  [key=2, style=dotted];
m4_741 -> m4_50  [key=2, style=dotted];
m4_741 -> m4_742  [key=0, style=solid];
m4_743 -> m4_15  [key=2, style=dotted];
m4_743 -> m4_50  [key=2, style=dotted];
m4_743 -> m4_744  [key=0, style=solid];
m4_749 -> m4_15  [key=2, style=dotted];
m4_749 -> m4_50  [key=2, style=dotted];
m4_749 -> m4_750  [key=0, style=solid];
m4_742 -> m4_44  [key=2, style=dotted];
m4_742 -> m4_743  [key=0, style=solid];
m4_744 -> m4_44  [key=2, style=dotted];
m4_744 -> m4_745  [key=0, style=solid];
m4_746 -> m4_44  [key=2, style=dotted];
m4_746 -> m4_747  [key=0, style=solid];
m4_747 -> m4_44  [key=2, style=dotted];
m4_747 -> m4_748  [key=0, style=solid];
m4_748 -> m4_44  [key=2, style=dotted];
m4_748 -> m4_749  [key=0, style=solid];
m4_748 -> m4_721  [key=2, style=dotted];
m4_748 -> m4_722  [key=2, style=dotted];
m4_748 -> m4_723  [key=2, style=dotted];
m4_750 -> m4_44  [key=2, style=dotted];
m4_750 -> m4_751  [key=0, style=solid];
m4_740 -> m4_13  [key=2, style=dotted];
m4_740 -> m4_24  [key=2, style=dotted];
m4_740 -> m4_741  [key=0, style=solid];
m4_740 -> m4_743  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_740 -> m4_749  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_740 -> m4_742  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_740 -> m4_744  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_740 -> m4_746  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_740 -> m4_747  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_740 -> m4_748  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_740 -> m4_750  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_740 -> m4_745  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_745 -> m4_746  [key=0, style=solid];
m4_745 -> m4_650  [key=2, style=dotted];
m4_739 -> m4_740  [key=0, style=solid];
m4_751 -> m4_738  [key=0, style=bold, color=blue];
m4_304 -> m4_305  [key=0, style=solid];
m4_306 -> m4_25  [key=2, style=dotted];
m4_306 -> m4_15  [key=2, style=dotted];
m4_306 -> m4_307  [key=0, style=solid];
m4_305 -> m4_13  [key=2, style=dotted];
m4_305 -> m4_24  [key=2, style=dotted];
m4_305 -> m4_306  [key=0, style=solid];
m4_305 -> m4_307  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_307 -> m4_308  [key=0, style=solid];
m4_307 -> m4_295  [key=2, style=dotted];
m4_308 -> m4_304  [key=0, style=bold, color=blue];
m4_1053 -> m4_1054  [key=0, style=solid];
m4_1057 -> m4_44  [key=2, style=dotted];
m4_1057 -> m4_1058  [key=0, style=solid];
m4_1058 -> m4_44  [key=2, style=dotted];
m4_1058 -> m4_1059  [key=0, style=solid];
m4_1055 -> m4_13  [key=2, style=dotted];
m4_1055 -> m4_24  [key=2, style=dotted];
m4_1055 -> m4_1057  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_1055 -> m4_1058  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_1055 -> m4_1056  [key=0, style=solid];
m4_1056 -> m4_1057  [key=0, style=solid];
m4_1056 -> m4_637  [key=2, style=dotted];
m4_1054 -> m4_1055  [key=0, style=solid];
m4_1059 -> m4_1053  [key=0, style=bold, color=blue];
m4_776 -> m4_777  [key=0, style=solid];
m4_777 -> m4_13  [key=2, style=dotted];
m4_777 -> m4_24  [key=2, style=dotted];
m4_777 -> m4_778  [key=0, style=solid];
m4_778 -> m4_50  [key=2, style=dotted];
m4_778 -> m4_779  [key=0, style=solid];
m4_779 -> m4_776  [key=0, style=bold, color=blue];
m4_971 -> m4_972  [key=0, style=solid];
m4_974 -> m4_15  [key=2, style=dotted];
m4_974 -> m4_50  [key=2, style=dotted];
m4_974 -> m4_975  [key=0, style=solid];
m4_976 -> m4_15  [key=2, style=dotted];
m4_976 -> m4_50  [key=2, style=dotted];
m4_976 -> m4_977  [key=0, style=solid];
m4_975 -> m4_44  [key=2, style=dotted];
m4_975 -> m4_976  [key=0, style=solid];
m4_977 -> m4_44  [key=2, style=dotted];
m4_977 -> m4_978  [key=0, style=solid];
m4_973 -> m4_13  [key=2, style=dotted];
m4_973 -> m4_24  [key=2, style=dotted];
m4_973 -> m4_974  [key=0, style=solid];
m4_973 -> m4_976  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_973 -> m4_975  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_973 -> m4_977  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_972 -> m4_973  [key=0, style=solid];
m4_978 -> m4_971  [key=0, style=bold, color=blue];
m4_372 -> m4_373  [key=0, style=solid];
m4_376 -> m4_25  [key=2, style=dotted];
m4_376 -> m4_15  [key=2, style=dotted];
m4_376 -> m4_377  [key=0, style=solid];
m4_378 -> m4_25  [key=2, style=dotted];
m4_378 -> m4_15  [key=2, style=dotted];
m4_378 -> m4_379  [key=0, style=solid];
m4_383 -> m4_25  [key=2, style=dotted];
m4_383 -> m4_15  [key=2, style=dotted];
m4_383 -> m4_384  [key=0, style=solid];
m4_385 -> m4_25  [key=2, style=dotted];
m4_385 -> m4_386  [key=0, style=solid];
m4_385 -> m4_17  [key=2, style=dotted];
m4_381 -> m4_44  [key=2, style=dotted];
m4_381 -> m4_382  [key=0, style=solid];
m4_377 -> m4_44  [key=2, style=dotted];
m4_377 -> m4_378  [key=0, style=solid];
m4_379 -> m4_44  [key=2, style=dotted];
m4_379 -> m4_380  [key=0, style=solid];
m4_382 -> m4_44  [key=2, style=dotted];
m4_382 -> m4_383  [key=0, style=solid];
m4_384 -> m4_44  [key=2, style=dotted];
m4_384 -> m4_385  [key=0, style=solid];
m4_375 -> m4_13  [key=2, style=dotted];
m4_375 -> m4_24  [key=2, style=dotted];
m4_375 -> m4_376  [key=0, style=solid];
m4_375 -> m4_378  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_375 -> m4_383  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_375 -> m4_385  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_375 -> m4_377  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_375 -> m4_379  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_375 -> m4_382  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_375 -> m4_384  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_375 -> m4_303  [key=2, style=dotted];
m4_375 -> m4_380  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_374 -> m4_381  [key=1, style=dashed, color=darkseagreen4, label=helloWorldData];
m4_374 -> m4_375  [key=0, style=solid];
m4_374 -> m4_302  [key=2, style=dotted];
m4_380 -> m4_381  [key=0, style=solid];
m4_380 -> m4_295  [key=2, style=dotted];
m4_373 -> m4_374  [key=0, style=solid];
m4_386 -> m4_372  [key=0, style=bold, color=blue];
m4_642 -> m4_643  [key=0, style=solid];
m4_643 -> m4_13  [key=2, style=dotted];
m4_643 -> m4_24  [key=2, style=dotted];
m4_643 -> m4_644  [key=0, style=solid];
m4_644 -> m4_645  [key=0, style=solid];
m4_644 -> m4_607  [key=2, style=dotted];
m4_645 -> m4_642  [key=0, style=bold, color=blue];
m4_23 -> m4_72  [key=0, style=solid];
m4_23 -> m4_78  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JToken"];
m4_23 -> m4_80  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JToken"];
m4_23 -> m4_82  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JToken"];
m4_23 -> m4_84  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JToken"];
m4_23 -> m4_86  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JToken"];
m4_23 -> m4_88  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JToken"];
m4_23 -> m4_90  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JToken"];
m4_23 -> m4_92  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JToken"];
m4_23 -> m4_94  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JToken"];
m4_23 -> m4_96  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JToken"];
m4_23 -> m4_98  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JToken"];
m4_23 -> m4_100  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JToken"];
m4_23 -> m4_102  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JToken"];
m4_23 -> m4_104  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JToken"];
m4_23 -> m4_109  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JToken"];
m4_23 -> m4_110  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JToken"];
m4_23 -> m4_18  [key=0, style=bold, color=blue];
m4_72 -> m4_73  [key=0, style=solid];
m4_72 -> m4_75  [key=0, style=solid];
m4_72 -> m4_77  [key=0, style=solid];
m4_72 -> m4_79  [key=0, style=solid];
m4_72 -> m4_81  [key=0, style=solid];
m4_72 -> m4_83  [key=0, style=solid];
m4_72 -> m4_85  [key=0, style=solid];
m4_72 -> m4_87  [key=0, style=solid];
m4_72 -> m4_89  [key=0, style=solid];
m4_72 -> m4_91  [key=0, style=solid];
m4_72 -> m4_93  [key=0, style=solid];
m4_72 -> m4_95  [key=0, style=solid];
m4_72 -> m4_97  [key=0, style=solid];
m4_72 -> m4_99  [key=0, style=solid];
m4_72 -> m4_101  [key=0, style=solid];
m4_72 -> m4_103  [key=0, style=solid];
m4_72 -> m4_108  [key=0, style=solid];
m4_72 -> m4_110  [key=0, style=solid];
m4_72 -> m4_68  [key=0, style=bold, color=blue];
m4_73 -> m4_74  [key=0, style=solid, color=green];
m4_75 -> m4_76  [key=0, style=solid, color=green];
m4_75 -> m4_13  [key=2, style=dotted, color=green];
m4_75 -> m4_24  [key=2, style=dotted, color=green];
m4_77 -> m4_78  [key=0, style=solid];
m4_77 -> m4_73  [key=0, style=bold, color=blue];
m4_74 -> m4_111  [key=0, style=solid];
m4_74 -> m4_41  [key=2, style=dotted];
m4_74 -> m4_75  [key=0, style=solid, color=green];
m4_76 -> m4_111  [key=0, style=solid];
m4_76 -> m4_41  [key=2, style=dotted];
m4_76 -> m4_76  [key=0, style=solid, color=green];
m4_76 -> m4_77  [key=0, style=solid, color=green];
m4_76 -> m4_50  [key=2, style=dotted, color=green];
m4_820 -> m4_821  [key=0, style=solid];
m4_824 -> m4_15  [key=2, style=dotted];
m4_824 -> m4_50  [key=2, style=dotted];
m4_824 -> m4_825  [key=0, style=solid];
m4_826 -> m4_15  [key=2, style=dotted];
m4_826 -> m4_50  [key=2, style=dotted];
m4_826 -> m4_827  [key=0, style=solid];
m4_833 -> m4_15  [key=2, style=dotted];
m4_833 -> m4_50  [key=2, style=dotted];
m4_833 -> m4_834  [key=0, style=solid];
m4_825 -> m4_44  [key=2, style=dotted];
m4_825 -> m4_826  [key=0, style=solid];
m4_827 -> m4_44  [key=2, style=dotted];
m4_827 -> m4_828  [key=0, style=solid];
m4_829 -> m4_44  [key=2, style=dotted];
m4_829 -> m4_830  [key=0, style=solid];
m4_830 -> m4_44  [key=2, style=dotted];
m4_830 -> m4_831  [key=0, style=solid];
m4_834 -> m4_44  [key=2, style=dotted];
m4_834 -> m4_835  [key=0, style=solid];
m4_832 -> m4_44  [key=2, style=dotted];
m4_832 -> m4_833  [key=0, style=solid];
m4_832 -> m4_832  [key=1, style=dashed, color=darkseagreen4, label=dt];
m4_832 -> m4_802  [key=2, style=dotted];
m4_822 -> m4_13  [key=2, style=dotted];
m4_822 -> m4_24  [key=2, style=dotted];
m4_822 -> m4_824  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_822 -> m4_826  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_822 -> m4_833  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_822 -> m4_825  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_822 -> m4_827  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_822 -> m4_829  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_822 -> m4_830  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_822 -> m4_834  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_822 -> m4_823  [key=0, style=solid];
m4_822 -> m4_828  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_822 -> m4_831  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_823 -> m4_824  [key=0, style=solid];
m4_823 -> m4_819  [key=2, style=dotted];
m4_828 -> m4_829  [key=0, style=solid];
m4_828 -> m4_650  [key=2, style=dotted];
m4_831 -> m4_832  [key=0, style=solid];
m4_821 -> m4_822  [key=0, style=solid];
m4_835 -> m4_820  [key=0, style=bold, color=blue];
m4_16 -> m4_20  [key=0, style=solid];
m4_16 -> m4_22  [key=2, style=dotted];
m4_36 -> m4_63  [key=0, style=solid];
m4_36 -> m4_66  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JContainer"];
m4_36 -> m4_67  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JContainer"];
m4_36 -> m4_69  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JContainer"];
m4_36 -> m4_37  [key=0, style=solid, color=green];
m4_36 -> m4_44  [key=2, style=dotted, color=green];
m4_63 -> m4_64  [key=0, style=solid, color=green];
m4_63 -> m4_42  [key=2, style=dotted];
m4_63 -> m4_65  [key=1, style=dashed, color=darkseagreen4, label=endToken];
m4_63 -> m4_50  [key=2, style=dotted, color=green];
m4_66 -> m4_67  [key=0, style=solid];
m4_66 -> m4_51  [key=0, style=bold, color=blue];
m4_67 -> m4_68  [key=0, style=solid];
m4_69 -> m4_70  [key=0, style=solid, color=green];
m4_69 -> m4_22  [key=2, style=dotted];
m4_64 -> m4_65  [key=0, style=solid, color=green];
m4_64 -> m4_69  [key=0, style=solid];
m4_64 -> m4_44  [key=2, style=dotted, color=green];
m4_65 -> m4_66  [key=0, style=solid, color=green];
m4_65 -> m4_71  [key=2, style=dotted];
m4_65 -> m4_41  [key=2, style=dotted];
m4_65 -> m4_50  [key=2, style=dotted, color=green];
m4_68 -> m4_70  [key=0, style=solid];
m4_68 -> m4_69  [key=0, style=solid, color=green];
m4_70 -> m4_36  [key=0, style=bold, color=blue];
m4_70 -> m4_71  [key=0, style=solid, color=green];
m4_70 -> m4_13  [key=2, style=dotted, color=green];
m4_70 -> m4_24  [key=2, style=dotted, color=green];
m4_25 -> m4_34  [key=0, style=solid];
m4_25 -> m4_35  [key=2, style=dotted];
m4_678 -> m4_679  [key=0, style=solid];
m4_682 -> m4_15  [key=2, style=dotted];
m4_682 -> m4_50  [key=2, style=dotted];
m4_682 -> m4_683  [key=0, style=solid];
m4_684 -> m4_15  [key=2, style=dotted];
m4_684 -> m4_50  [key=2, style=dotted];
m4_684 -> m4_685  [key=0, style=solid];
m4_687 -> m4_15  [key=2, style=dotted];
m4_687 -> m4_50  [key=2, style=dotted];
m4_687 -> m4_688  [key=0, style=solid];
m4_690 -> m4_15  [key=2, style=dotted];
m4_690 -> m4_50  [key=2, style=dotted];
m4_690 -> m4_691  [key=0, style=solid];
m4_683 -> m4_44  [key=2, style=dotted];
m4_683 -> m4_684  [key=0, style=solid];
m4_685 -> m4_44  [key=2, style=dotted];
m4_685 -> m4_686  [key=0, style=solid];
m4_686 -> m4_44  [key=2, style=dotted];
m4_686 -> m4_687  [key=0, style=solid];
m4_688 -> m4_44  [key=2, style=dotted];
m4_688 -> m4_689  [key=0, style=solid];
m4_689 -> m4_44  [key=2, style=dotted];
m4_689 -> m4_690  [key=0, style=solid];
m4_691 -> m4_44  [key=2, style=dotted];
m4_691 -> m4_692  [key=0, style=solid];
m4_680 -> m4_13  [key=2, style=dotted];
m4_680 -> m4_24  [key=2, style=dotted];
m4_680 -> m4_682  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_680 -> m4_684  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_680 -> m4_687  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_680 -> m4_690  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_680 -> m4_683  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_680 -> m4_685  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_680 -> m4_686  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_680 -> m4_688  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_680 -> m4_689  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_680 -> m4_691  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_680 -> m4_681  [key=0, style=solid];
m4_680 -> m4_692  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_692 -> m4_50  [key=2, style=dotted];
m4_692 -> m4_693  [key=0, style=solid];
m4_692 -> m4_17  [key=2, style=dotted];
m4_681 -> m4_67  [key=2, style=dotted];
m4_681 -> m4_682  [key=0, style=solid];
m4_679 -> m4_680  [key=0, style=solid];
m4_693 -> m4_678  [key=0, style=bold, color=blue];
m4_651 -> m4_652  [key=0, style=solid];
m4_652 -> m4_13  [key=2, style=dotted];
m4_652 -> m4_24  [key=2, style=dotted];
m4_652 -> m4_653  [key=0, style=solid];
m4_653 -> m4_654  [key=0, style=solid];
m4_653 -> m4_637  [key=2, style=dotted];
m4_654 -> m4_651  [key=0, style=bold, color=blue];
m4_13 -> m4_14  [key=0, style=solid];
m4_13 -> m4_15  [key=1, style=dashed, color=darkseagreen4, label=container];
m4_694 -> m4_695  [key=0, style=solid];
m4_697 -> m4_15  [key=2, style=dotted];
m4_697 -> m4_50  [key=2, style=dotted];
m4_697 -> m4_698  [key=0, style=solid];
m4_699 -> m4_15  [key=2, style=dotted];
m4_699 -> m4_50  [key=2, style=dotted];
m4_699 -> m4_700  [key=0, style=solid];
m4_701 -> m4_15  [key=2, style=dotted];
m4_701 -> m4_50  [key=2, style=dotted];
m4_701 -> m4_702  [key=0, style=solid];
m4_704 -> m4_15  [key=2, style=dotted];
m4_704 -> m4_50  [key=2, style=dotted];
m4_704 -> m4_705  [key=0, style=solid];
m4_698 -> m4_44  [key=2, style=dotted];
m4_698 -> m4_699  [key=0, style=solid];
m4_700 -> m4_44  [key=2, style=dotted];
m4_700 -> m4_701  [key=0, style=solid];
m4_702 -> m4_44  [key=2, style=dotted];
m4_702 -> m4_703  [key=0, style=solid];
m4_703 -> m4_44  [key=2, style=dotted];
m4_703 -> m4_704  [key=0, style=solid];
m4_705 -> m4_44  [key=2, style=dotted];
m4_705 -> m4_706  [key=0, style=solid];
m4_696 -> m4_13  [key=2, style=dotted];
m4_696 -> m4_24  [key=2, style=dotted];
m4_696 -> m4_697  [key=0, style=solid];
m4_696 -> m4_699  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_696 -> m4_701  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_696 -> m4_704  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_696 -> m4_698  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_696 -> m4_700  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_696 -> m4_702  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_696 -> m4_703  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_696 -> m4_705  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_695 -> m4_696  [key=0, style=solid];
m4_706 -> m4_694  [key=0, style=bold, color=blue];
m4_296 -> m4_297  [key=0, style=solid];
m4_299 -> m4_13  [key=2, style=dotted];
m4_299 -> m4_24  [key=2, style=dotted];
m4_299 -> m4_300  [key=0, style=solid];
m4_299 -> m4_303  [key=2, style=dotted];
m4_298 -> m4_299  [key=0, style=solid];
m4_298 -> m4_302  [key=2, style=dotted];
m4_300 -> m4_301  [key=0, style=solid];
m4_300 -> m4_295  [key=2, style=dotted];
m4_297 -> m4_298  [key=0, style=solid];
m4_301 -> m4_296  [key=0, style=bold, color=blue];
m4_908 -> m4_909  [key=0, style=solid];
m4_911 -> m4_15  [key=2, style=dotted];
m4_911 -> m4_50  [key=2, style=dotted];
m4_911 -> m4_912  [key=0, style=solid];
m4_913 -> m4_15  [key=2, style=dotted];
m4_913 -> m4_50  [key=2, style=dotted];
m4_913 -> m4_914  [key=0, style=solid];
m4_915 -> m4_15  [key=2, style=dotted];
m4_915 -> m4_50  [key=2, style=dotted];
m4_915 -> m4_916  [key=0, style=solid];
m4_917 -> m4_15  [key=2, style=dotted];
m4_917 -> m4_50  [key=2, style=dotted];
m4_917 -> m4_918  [key=0, style=solid];
m4_919 -> m4_15  [key=2, style=dotted];
m4_919 -> m4_50  [key=2, style=dotted];
m4_919 -> m4_920  [key=0, style=solid];
m4_921 -> m4_15  [key=2, style=dotted];
m4_921 -> m4_50  [key=2, style=dotted];
m4_921 -> m4_922  [key=0, style=solid];
m4_923 -> m4_15  [key=2, style=dotted];
m4_923 -> m4_50  [key=2, style=dotted];
m4_923 -> m4_924  [key=0, style=solid];
m4_912 -> m4_44  [key=2, style=dotted];
m4_912 -> m4_913  [key=0, style=solid];
m4_914 -> m4_44  [key=2, style=dotted];
m4_914 -> m4_915  [key=0, style=solid];
m4_916 -> m4_44  [key=2, style=dotted];
m4_916 -> m4_917  [key=0, style=solid];
m4_918 -> m4_44  [key=2, style=dotted];
m4_918 -> m4_919  [key=0, style=solid];
m4_920 -> m4_44  [key=2, style=dotted];
m4_920 -> m4_921  [key=0, style=solid];
m4_922 -> m4_44  [key=2, style=dotted];
m4_922 -> m4_923  [key=0, style=solid];
m4_924 -> m4_44  [key=2, style=dotted];
m4_924 -> m4_925  [key=0, style=solid];
m4_910 -> m4_13  [key=2, style=dotted];
m4_910 -> m4_24  [key=2, style=dotted];
m4_910 -> m4_911  [key=0, style=solid];
m4_910 -> m4_913  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_910 -> m4_915  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_910 -> m4_917  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_910 -> m4_919  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_910 -> m4_921  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_910 -> m4_923  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_910 -> m4_912  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_910 -> m4_914  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_910 -> m4_916  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_910 -> m4_918  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_910 -> m4_920  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_910 -> m4_922  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_910 -> m4_924  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_909 -> m4_910  [key=0, style=solid];
m4_925 -> m4_908  [key=0, style=bold, color=blue];
m4_674 -> m4_675  [key=0, style=solid];
m4_675 -> m4_13  [key=2, style=dotted];
m4_675 -> m4_24  [key=2, style=dotted];
m4_675 -> m4_676  [key=0, style=solid];
m4_676 -> m4_677  [key=0, style=solid];
m4_676 -> m4_607  [key=2, style=dotted];
m4_677 -> m4_674  [key=0, style=bold, color=blue];
m4_655 -> m4_656  [key=0, style=solid];
m4_656 -> m4_13  [key=2, style=dotted];
m4_656 -> m4_24  [key=2, style=dotted];
m4_656 -> m4_657  [key=0, style=solid];
m4_657 -> m4_658  [key=0, style=solid];
m4_657 -> m4_607  [key=2, style=dotted];
m4_658 -> m4_655  [key=0, style=bold, color=blue];
m4_984 -> m4_985  [key=0, style=solid];
m4_987 -> m4_15  [key=2, style=dotted];
m4_987 -> m4_50  [key=2, style=dotted];
m4_987 -> m4_988  [key=0, style=solid];
m4_989 -> m4_15  [key=2, style=dotted];
m4_989 -> m4_50  [key=2, style=dotted];
m4_989 -> m4_990  [key=0, style=solid];
m4_991 -> m4_15  [key=2, style=dotted];
m4_991 -> m4_50  [key=2, style=dotted];
m4_991 -> m4_992  [key=0, style=solid];
m4_993 -> m4_15  [key=2, style=dotted];
m4_993 -> m4_50  [key=2, style=dotted];
m4_993 -> m4_994  [key=0, style=solid];
m4_995 -> m4_15  [key=2, style=dotted];
m4_995 -> m4_50  [key=2, style=dotted];
m4_995 -> m4_996  [key=0, style=solid];
m4_997 -> m4_15  [key=2, style=dotted];
m4_997 -> m4_50  [key=2, style=dotted];
m4_997 -> m4_998  [key=0, style=solid];
m4_999 -> m4_15  [key=2, style=dotted];
m4_999 -> m4_50  [key=2, style=dotted];
m4_999 -> m4_1000  [key=0, style=solid];
m4_1001 -> m4_15  [key=2, style=dotted];
m4_1001 -> m4_50  [key=2, style=dotted];
m4_1001 -> m4_1002  [key=0, style=solid];
m4_1003 -> m4_15  [key=2, style=dotted];
m4_1003 -> m4_50  [key=2, style=dotted];
m4_1003 -> m4_1004  [key=0, style=solid];
m4_988 -> m4_44  [key=2, style=dotted];
m4_988 -> m4_989  [key=0, style=solid];
m4_990 -> m4_44  [key=2, style=dotted];
m4_990 -> m4_991  [key=0, style=solid];
m4_992 -> m4_44  [key=2, style=dotted];
m4_992 -> m4_993  [key=0, style=solid];
m4_994 -> m4_44  [key=2, style=dotted];
m4_994 -> m4_995  [key=0, style=solid];
m4_996 -> m4_44  [key=2, style=dotted];
m4_996 -> m4_997  [key=0, style=solid];
m4_998 -> m4_44  [key=2, style=dotted];
m4_998 -> m4_999  [key=0, style=solid];
m4_1000 -> m4_44  [key=2, style=dotted];
m4_1000 -> m4_1001  [key=0, style=solid];
m4_1002 -> m4_44  [key=2, style=dotted];
m4_1002 -> m4_1003  [key=0, style=solid];
m4_1004 -> m4_44  [key=2, style=dotted];
m4_1004 -> m4_1005  [key=0, style=solid];
m4_986 -> m4_13  [key=2, style=dotted];
m4_986 -> m4_24  [key=2, style=dotted];
m4_986 -> m4_987  [key=0, style=solid];
m4_986 -> m4_989  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_986 -> m4_991  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_986 -> m4_993  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_986 -> m4_995  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_986 -> m4_997  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_986 -> m4_999  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_986 -> m4_1001  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_986 -> m4_1003  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_986 -> m4_988  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_986 -> m4_990  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_986 -> m4_992  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_986 -> m4_994  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_986 -> m4_996  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_986 -> m4_998  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_986 -> m4_1000  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_986 -> m4_1002  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_986 -> m4_1004  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_986 -> m4_1005  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_1005 -> m4_50  [key=2, style=dotted];
m4_1005 -> m4_1006  [key=0, style=solid];
m4_1005 -> m4_17  [key=2, style=dotted];
m4_985 -> m4_986  [key=0, style=solid];
m4_1006 -> m4_984  [key=0, style=bold, color=blue];
m4_889 -> m4_890  [key=0, style=solid];
m4_893 -> m4_15  [key=2, style=dotted];
m4_893 -> m4_50  [key=2, style=dotted];
m4_893 -> m4_894  [key=0, style=solid];
m4_896 -> m4_15  [key=2, style=dotted];
m4_896 -> m4_50  [key=2, style=dotted];
m4_896 -> m4_897  [key=0, style=solid];
m4_894 -> m4_44  [key=2, style=dotted];
m4_894 -> m4_895  [key=0, style=solid];
m4_895 -> m4_44  [key=2, style=dotted];
m4_895 -> m4_896  [key=0, style=solid];
m4_897 -> m4_44  [key=2, style=dotted];
m4_897 -> m4_898  [key=0, style=solid];
m4_891 -> m4_13  [key=2, style=dotted];
m4_891 -> m4_24  [key=2, style=dotted];
m4_891 -> m4_893  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_891 -> m4_896  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_891 -> m4_894  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_891 -> m4_895  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_891 -> m4_897  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_891 -> m4_892  [key=0, style=solid];
m4_892 -> m4_67  [key=2, style=dotted];
m4_892 -> m4_893  [key=0, style=solid];
m4_890 -> m4_891  [key=0, style=solid];
m4_898 -> m4_889  [key=0, style=bold, color=blue];
m4_197 -> m4_198  [key=0, style=solid];
m4_209 -> m4_15  [key=2, style=dotted];
m4_209 -> m4_50  [key=2, style=dotted];
m4_209 -> m4_210  [key=0, style=solid];
m4_212 -> m4_15  [key=2, style=dotted];
m4_212 -> m4_50  [key=2, style=dotted];
m4_212 -> m4_213  [key=0, style=solid];
m4_215 -> m4_15  [key=2, style=dotted];
m4_215 -> m4_50  [key=2, style=dotted];
m4_215 -> m4_216  [key=0, style=solid];
m4_213 -> m4_44  [key=2, style=dotted];
m4_213 -> m4_214  [key=0, style=solid];
m4_208 -> m4_13  [key=2, style=dotted];
m4_208 -> m4_24  [key=2, style=dotted];
m4_208 -> m4_209  [key=0, style=solid];
m4_208 -> m4_212  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_208 -> m4_215  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_208 -> m4_213  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_208 -> m4_216  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_216 -> m4_50  [key=2, style=dotted];
m4_216 -> m4_217  [key=0, style=solid];
m4_216 -> m4_17  [key=2, style=dotted];
m4_210 -> m4_213  [key=1, style=dashed, color=darkseagreen4, label=i];
m4_210 -> m4_211  [key=0, style=solid];
m4_210 -> m4_214  [key=1, style=dashed, color=darkseagreen4, label=i];
m4_211 -> m4_212  [key=0, style=solid];
m4_211 -> m4_215  [key=0, style=solid];
m4_214 -> m4_211  [key=0, style=solid];
m4_214 -> m4_214  [key=1, style=dashed, color=darkseagreen4, label=i];
m4_207 -> m4_208  [key=0, style=solid];
m4_207 -> m4_223  [key=2, style=dotted];
m4_198 -> m4_211  [key=1, style=dashed, color=darkseagreen4, label=valueCount];
m4_198 -> m4_199  [key=0, style=solid];
m4_198 -> m4_203  [key=1, style=dashed, color=darkseagreen4, label=valueCount];
m4_199 -> m4_207  [key=1, style=dashed, color=darkseagreen4, label=sw];
m4_199 -> m4_200  [key=0, style=solid];
m4_199 -> m4_218  [key=2, style=dotted];
m4_206 -> m4_207  [key=0, style=solid];
m4_206 -> m4_222  [key=2, style=dotted];
m4_203 -> m4_206  [key=0, style=solid];
m4_203 -> m4_204  [key=0, style=solid];
m4_200 -> m4_206  [key=1, style=dashed, color=darkseagreen4, label=writer];
m4_200 -> m4_219  [key=2, style=dotted];
m4_200 -> m4_201  [key=0, style=solid];
m4_200 -> m4_204  [key=1, style=dashed, color=darkseagreen4, label=writer];
m4_202 -> m4_203  [key=0, style=solid];
m4_202 -> m4_204  [key=1, style=dashed, color=darkseagreen4, label=i];
m4_202 -> m4_205  [key=1, style=dashed, color=darkseagreen4, label=i];
m4_205 -> m4_203  [key=0, style=solid];
m4_205 -> m4_205  [key=1, style=dashed, color=darkseagreen4, label=i];
m4_204 -> m4_205  [key=0, style=solid];
m4_204 -> m4_221  [key=2, style=dotted];
m4_201 -> m4_202  [key=0, style=solid];
m4_201 -> m4_220  [key=2, style=dotted];
m4_217 -> m4_197  [key=0, style=bold, color=blue];
m4_26 -> m4_27  [key=0, style=solid];
m4_26 -> m4_31  [key=1, style=dashed, color=darkseagreen4, label=next];
m4_183 -> m4_184  [key=0, style=solid];
m4_184 -> m4_13  [key=2, style=dotted];
m4_184 -> m4_185  [key=0, style=solid];
m4_185 -> m4_183  [key=0, style=bold, color=blue];
m4_54 -> m4_55  [key=0, style=solid, color=green];
m4_54 -> m4_67  [key=2, style=dotted, color=green];
m4_10 -> m4_15  [key=2, style=dotted];
m4_10 -> m4_11  [key=0, style=solid];
m4_10 -> m4_17  [key=0, style=solid];
m4_4 -> m4_5  [key=0, style=solid];
m4_4 -> m4_16  [key=2, style=dotted];
m4_9 -> m4_10  [key=0, style=solid];
m4_9 -> m4_16  [key=2, style=dotted];
m4_11 -> m4_0  [key=0, style=bold, color=blue];
m4_11 -> m4_12  [key=0, style=solid];
m4_11 -> m4_13  [key=0, style=solid];
m4_255 -> m4_256  [key=0, style=solid];
m4_264 -> m4_44  [key=2, style=dotted];
m4_264 -> m4_265  [key=0, style=solid];
m4_257 -> m4_13  [key=2, style=dotted];
m4_257 -> m4_24  [key=2, style=dotted];
m4_257 -> m4_264  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_257 -> m4_258  [key=0, style=solid];
m4_257 -> m4_261  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_257 -> m4_263  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_261 -> m4_50  [key=2, style=dotted];
m4_261 -> m4_262  [key=0, style=solid];
m4_263 -> m4_50  [key=2, style=dotted];
m4_263 -> m4_264  [key=0, style=solid];
m4_258 -> m4_67  [key=2, style=dotted];
m4_258 -> m4_259  [key=0, style=solid];
m4_256 -> m4_257  [key=0, style=solid];
m4_260 -> m4_261  [key=0, style=solid];
m4_260 -> m4_263  [key=0, style=solid];
m4_262 -> m4_260  [key=0, style=solid];
m4_262 -> m4_262  [key=1, style=dashed, color=darkseagreen4, label=i];
m4_259 -> m4_260  [key=0, style=solid];
m4_259 -> m4_262  [key=1, style=dashed, color=darkseagreen4, label=i];
m4_265 -> m4_255  [key=0, style=bold, color=blue];
m4_788 -> m4_789  [key=0, style=solid];
m4_791 -> m4_15  [key=2, style=dotted];
m4_791 -> m4_50  [key=2, style=dotted];
m4_791 -> m4_792  [key=0, style=solid];
m4_793 -> m4_15  [key=2, style=dotted];
m4_793 -> m4_50  [key=2, style=dotted];
m4_793 -> m4_794  [key=0, style=solid];
m4_799 -> m4_15  [key=2, style=dotted];
m4_799 -> m4_50  [key=2, style=dotted];
m4_799 -> m4_800  [key=0, style=solid];
m4_792 -> m4_44  [key=2, style=dotted];
m4_792 -> m4_793  [key=0, style=solid];
m4_794 -> m4_44  [key=2, style=dotted];
m4_794 -> m4_795  [key=0, style=solid];
m4_796 -> m4_44  [key=2, style=dotted];
m4_796 -> m4_797  [key=0, style=solid];
m4_797 -> m4_44  [key=2, style=dotted];
m4_797 -> m4_798  [key=0, style=solid];
m4_798 -> m4_44  [key=2, style=dotted];
m4_798 -> m4_799  [key=0, style=solid];
m4_798 -> m4_721  [key=2, style=dotted];
m4_798 -> m4_802  [key=2, style=dotted];
m4_800 -> m4_44  [key=2, style=dotted];
m4_800 -> m4_801  [key=0, style=solid];
m4_790 -> m4_13  [key=2, style=dotted];
m4_790 -> m4_24  [key=2, style=dotted];
m4_790 -> m4_791  [key=0, style=solid];
m4_790 -> m4_793  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_790 -> m4_799  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_790 -> m4_792  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_790 -> m4_794  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_790 -> m4_796  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_790 -> m4_797  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_790 -> m4_798  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_790 -> m4_800  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_790 -> m4_795  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_795 -> m4_796  [key=0, style=solid];
m4_795 -> m4_650  [key=2, style=dotted];
m4_789 -> m4_790  [key=0, style=solid];
m4_801 -> m4_788  [key=0, style=bold, color=blue];
m4_967 -> m4_968  [key=0, style=solid];
m4_968 -> m4_13  [key=2, style=dotted];
m4_968 -> m4_24  [key=2, style=dotted];
m4_968 -> m4_969  [key=0, style=solid];
m4_969 -> m4_50  [key=2, style=dotted];
m4_969 -> m4_970  [key=0, style=solid];
m4_970 -> m4_967  [key=0, style=bold, color=blue];
m4_35 -> m4_37  [key=0, style=solid];
m4_35 -> m4_36  [key=0, style=solid, color=green];
m4_35 -> m4_25  [key=2, style=dotted, color=green];
m4_35 -> m4_15  [key=2, style=dotted, color=green];
m4_37 -> m4_38  [key=0, style=solid, color=green];
m4_37 -> m4_25  [key=2, style=dotted, color=green];
m4_37 -> m4_15  [key=2, style=dotted, color=green];
m4_38 -> m4_39  [key=0, style=solid, color=green];
m4_38 -> m4_41  [key=2, style=dotted];
m4_38 -> m4_44  [key=2, style=dotted, color=green];
m4_39 -> m4_40  [key=0, style=solid, color=green];
m4_39 -> m4_25  [key=2, style=dotted, color=green];
m4_39 -> m4_15  [key=2, style=dotted, color=green];
m4_40 -> m4_35  [key=0, style=bold, color=blue];
m4_40 -> m4_41  [key=0, style=solid, color=green];
m4_40 -> m4_44  [key=2, style=dotted, color=green];
m4_780 -> m4_781  [key=0, style=solid];
m4_781 -> m4_13  [key=2, style=dotted];
m4_781 -> m4_24  [key=2, style=dotted];
m4_781 -> m4_782  [key=0, style=solid];
m4_782 -> m4_50  [key=2, style=dotted];
m4_782 -> m4_783  [key=0, style=solid];
m4_783 -> m4_780  [key=0, style=bold, color=blue];
m4_772 -> m4_773  [key=0, style=solid];
m4_773 -> m4_13  [key=2, style=dotted];
m4_773 -> m4_24  [key=2, style=dotted];
m4_773 -> m4_774  [key=0, style=solid];
m4_774 -> m4_50  [key=2, style=dotted];
m4_774 -> m4_775  [key=0, style=solid];
m4_775 -> m4_772  [key=0, style=bold, color=blue];
m4_784 -> m4_785  [key=0, style=solid];
m4_785 -> m4_13  [key=2, style=dotted];
m4_785 -> m4_24  [key=2, style=dotted];
m4_785 -> m4_786  [key=0, style=solid];
m4_786 -> m4_50  [key=2, style=dotted];
m4_786 -> m4_787  [key=0, style=solid];
m4_787 -> m4_784  [key=0, style=bold, color=blue];
m4_51 -> m4_52  [key=0, style=solid, color=green];
m4_51 -> m4_53  [key=0, style=solid];
m4_52 -> m4_53  [key=0, style=solid, color=green];
m4_52 -> m4_54  [key=2, style=dotted];
m4_53 -> m4_54  [key=0, style=solid, color=green];
m4_53 -> m4_13  [key=2, style=dotted, color=green];
m4_53 -> m4_24  [key=2, style=dotted, color=green];
m4_53 -> m4_55  [key=1, style=dashed, color=green, label=reader];
m4_53 -> m4_56  [key=1, style=dashed, color=green, label=reader];
m4_53 -> m4_57  [key=1, style=dashed, color=green, label=reader];
m4_53 -> m4_58  [key=1, style=dashed, color=green, label=reader];
m4_53 -> m4_59  [key=1, style=dashed, color=green, label=reader];
m4_53 -> m4_60  [key=1, style=dashed, color=green, label=reader];
m4_53 -> m4_61  [key=1, style=dashed, color=green, label=reader];
m4_53 -> m4_62  [key=1, style=dashed, color=green, label=reader];
m4_53 -> m4_63  [key=1, style=dashed, color=green, label=reader];
m4_53 -> m4_64  [key=1, style=dashed, color=green, label=reader];
m4_53 -> m4_65  [key=1, style=dashed, color=green, label=reader];
m4_53 -> m4_42  [key=0, style=bold, color=blue];
m4_938 -> m4_939  [key=0, style=solid];
m4_940 -> m4_13  [key=2, style=dotted];
m4_940 -> m4_24  [key=2, style=dotted];
m4_940 -> m4_941  [key=0, style=solid];
m4_941 -> m4_50  [key=2, style=dotted];
m4_941 -> m4_942  [key=0, style=solid];
m4_939 -> m4_940  [key=0, style=solid];
m4_942 -> m4_938  [key=0, style=bold, color=blue];
m4_266 -> m4_267  [key=0, style=solid];
m4_272 -> m4_15  [key=2, style=dotted];
m4_272 -> m4_50  [key=2, style=dotted];
m4_272 -> m4_273  [key=0, style=solid];
m4_274 -> m4_15  [key=2, style=dotted];
m4_274 -> m4_50  [key=2, style=dotted];
m4_274 -> m4_275  [key=0, style=solid];
m4_275 -> m4_44  [key=2, style=dotted];
m4_275 -> m4_276  [key=0, style=solid];
m4_276 -> m4_44  [key=2, style=dotted];
m4_276 -> m4_277  [key=0, style=solid];
m4_268 -> m4_13  [key=2, style=dotted];
m4_268 -> m4_24  [key=2, style=dotted];
m4_268 -> m4_272  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_268 -> m4_274  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_268 -> m4_275  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_268 -> m4_276  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_268 -> m4_269  [key=0, style=solid];
m4_269 -> m4_67  [key=2, style=dotted];
m4_269 -> m4_270  [key=0, style=solid];
m4_271 -> m4_272  [key=0, style=solid];
m4_271 -> m4_274  [key=0, style=solid];
m4_273 -> m4_271  [key=0, style=solid];
m4_273 -> m4_273  [key=1, style=dashed, color=darkseagreen4, label=i];
m4_267 -> m4_268  [key=0, style=solid];
m4_270 -> m4_271  [key=0, style=solid];
m4_270 -> m4_273  [key=1, style=dashed, color=darkseagreen4, label=i];
m4_277 -> m4_266  [key=0, style=bold, color=blue];
m4_278 -> m4_279  [key=0, style=solid];
m4_280 -> m4_25  [key=2, style=dotted];
m4_280 -> m4_15  [key=2, style=dotted];
m4_280 -> m4_281  [key=0, style=solid];
m4_281 -> m4_44  [key=2, style=dotted];
m4_281 -> m4_282  [key=0, style=solid];
m4_279 -> m4_13  [key=2, style=dotted];
m4_279 -> m4_24  [key=2, style=dotted];
m4_279 -> m4_280  [key=0, style=solid];
m4_279 -> m4_281  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_282 -> m4_278  [key=0, style=bold, color=blue];
m4_768 -> m4_769  [key=0, style=solid];
m4_769 -> m4_13  [key=2, style=dotted];
m4_769 -> m4_24  [key=2, style=dotted];
m4_769 -> m4_770  [key=0, style=solid];
m4_770 -> m4_50  [key=2, style=dotted];
m4_770 -> m4_771  [key=0, style=solid];
m4_771 -> m4_768  [key=0, style=bold, color=blue];
m4_836 -> m4_837  [key=0, style=solid];
m4_839 -> m4_15  [key=2, style=dotted];
m4_839 -> m4_50  [key=2, style=dotted];
m4_839 -> m4_840  [key=0, style=solid];
m4_841 -> m4_15  [key=2, style=dotted];
m4_841 -> m4_50  [key=2, style=dotted];
m4_841 -> m4_842  [key=0, style=solid];
m4_847 -> m4_15  [key=2, style=dotted];
m4_847 -> m4_50  [key=2, style=dotted];
m4_847 -> m4_848  [key=0, style=solid];
m4_840 -> m4_44  [key=2, style=dotted];
m4_840 -> m4_841  [key=0, style=solid];
m4_842 -> m4_44  [key=2, style=dotted];
m4_842 -> m4_843  [key=0, style=solid];
m4_844 -> m4_44  [key=2, style=dotted];
m4_844 -> m4_845  [key=0, style=solid];
m4_845 -> m4_44  [key=2, style=dotted];
m4_845 -> m4_846  [key=0, style=solid];
m4_848 -> m4_44  [key=2, style=dotted];
m4_848 -> m4_849  [key=0, style=solid];
m4_846 -> m4_44  [key=2, style=dotted];
m4_846 -> m4_847  [key=0, style=solid];
m4_838 -> m4_13  [key=2, style=dotted];
m4_838 -> m4_24  [key=2, style=dotted];
m4_838 -> m4_839  [key=0, style=solid];
m4_838 -> m4_841  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_838 -> m4_847  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_838 -> m4_840  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_838 -> m4_842  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_838 -> m4_844  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_838 -> m4_845  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_838 -> m4_848  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_838 -> m4_843  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_843 -> m4_844  [key=0, style=solid];
m4_843 -> m4_846  [key=1, style=dashed, color=darkseagreen4, label=d];
m4_843 -> m4_637  [key=2, style=dotted];
m4_837 -> m4_838  [key=0, style=solid];
m4_849 -> m4_836  [key=0, style=bold, color=blue];
m4_17 -> m4_18  [key=0, style=solid];
m4_15 -> m4_20  [key=0, style=solid];
m4_15 -> m4_21  [key=2, style=dotted];
m4_18 -> m4_19  [key=0, style=solid];
m4_18 -> m4_23  [key=2, style=dotted];
m4_19 -> m4_20  [key=0, style=solid];
m4_20 -> m4_9  [key=0, style=bold, color=blue];
m4_20 -> m4_13  [key=2, style=dotted];
m4_20 -> m4_24  [key=2, style=dotted];
m4_20 -> m4_21  [key=0, style=solid];
m4_20 -> m4_22  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_404 -> m4_405  [key=0, style=solid];
m4_409 -> m4_25  [key=2, style=dotted];
m4_409 -> m4_410  [key=0, style=solid];
m4_412 -> m4_25  [key=2, style=dotted];
m4_412 -> m4_413  [key=0, style=solid];
m4_415 -> m4_25  [key=2, style=dotted];
m4_415 -> m4_416  [key=0, style=solid];
m4_420 -> m4_25  [key=2, style=dotted];
m4_420 -> m4_421  [key=0, style=solid];
m4_408 -> m4_44  [key=2, style=dotted];
m4_408 -> m4_409  [key=0, style=solid];
m4_410 -> m4_44  [key=2, style=dotted];
m4_410 -> m4_411  [key=0, style=solid];
m4_411 -> m4_44  [key=2, style=dotted];
m4_411 -> m4_412  [key=0, style=solid];
m4_413 -> m4_44  [key=2, style=dotted];
m4_413 -> m4_414  [key=0, style=solid];
m4_414 -> m4_44  [key=2, style=dotted];
m4_414 -> m4_415  [key=0, style=solid];
m4_416 -> m4_44  [key=2, style=dotted];
m4_416 -> m4_417  [key=0, style=solid];
m4_417 -> m4_44  [key=2, style=dotted];
m4_417 -> m4_418  [key=0, style=solid];
m4_418 -> m4_44  [key=2, style=dotted];
m4_418 -> m4_419  [key=0, style=solid];
m4_419 -> m4_44  [key=2, style=dotted];
m4_419 -> m4_420  [key=0, style=solid];
m4_421 -> m4_44  [key=2, style=dotted];
m4_421 -> m4_422  [key=0, style=solid];
m4_422 -> m4_44  [key=2, style=dotted];
m4_422 -> m4_423  [key=0, style=solid];
m4_407 -> m4_13  [key=2, style=dotted];
m4_407 -> m4_409  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_407 -> m4_412  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_407 -> m4_415  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_407 -> m4_420  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_407 -> m4_408  [key=0, style=solid];
m4_407 -> m4_410  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_407 -> m4_411  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_407 -> m4_413  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_407 -> m4_414  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_407 -> m4_416  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_407 -> m4_417  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_407 -> m4_418  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_407 -> m4_419  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_407 -> m4_421  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_407 -> m4_422  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_406 -> m4_24  [key=2, style=dotted];
m4_406 -> m4_407  [key=0, style=solid];
m4_405 -> m4_406  [key=0, style=solid];
m4_423 -> m4_404  [key=0, style=bold, color=blue];
m4_610 -> m4_611  [key=0, style=solid];
m4_613 -> m4_15  [key=2, style=dotted];
m4_613 -> m4_50  [key=2, style=dotted];
m4_613 -> m4_614  [key=0, style=solid];
m4_615 -> m4_15  [key=2, style=dotted];
m4_615 -> m4_50  [key=2, style=dotted];
m4_615 -> m4_616  [key=0, style=solid];
m4_618 -> m4_15  [key=2, style=dotted];
m4_618 -> m4_50  [key=2, style=dotted];
m4_618 -> m4_619  [key=0, style=solid];
m4_621 -> m4_15  [key=2, style=dotted];
m4_621 -> m4_50  [key=2, style=dotted];
m4_621 -> m4_622  [key=0, style=solid];
m4_624 -> m4_15  [key=2, style=dotted];
m4_624 -> m4_50  [key=2, style=dotted];
m4_624 -> m4_625  [key=0, style=solid];
m4_614 -> m4_44  [key=2, style=dotted];
m4_614 -> m4_615  [key=0, style=solid];
m4_616 -> m4_44  [key=2, style=dotted];
m4_616 -> m4_617  [key=0, style=solid];
m4_617 -> m4_44  [key=2, style=dotted];
m4_617 -> m4_618  [key=0, style=solid];
m4_619 -> m4_44  [key=2, style=dotted];
m4_619 -> m4_620  [key=0, style=solid];
m4_620 -> m4_44  [key=2, style=dotted];
m4_620 -> m4_621  [key=0, style=solid];
m4_622 -> m4_44  [key=2, style=dotted];
m4_622 -> m4_623  [key=0, style=solid];
m4_623 -> m4_44  [key=2, style=dotted];
m4_623 -> m4_624  [key=0, style=solid];
m4_625 -> m4_44  [key=2, style=dotted];
m4_625 -> m4_626  [key=0, style=solid];
m4_612 -> m4_13  [key=2, style=dotted];
m4_612 -> m4_613  [key=0, style=solid];
m4_612 -> m4_615  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_612 -> m4_618  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_612 -> m4_621  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_612 -> m4_624  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_612 -> m4_614  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_612 -> m4_616  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_612 -> m4_617  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_612 -> m4_619  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_612 -> m4_620  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_612 -> m4_622  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_612 -> m4_623  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_612 -> m4_625  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_612 -> m4_626  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_611 -> m4_24  [key=2, style=dotted];
m4_611 -> m4_612  [key=0, style=solid];
m4_626 -> m4_50  [key=2, style=dotted];
m4_626 -> m4_627  [key=0, style=solid];
m4_626 -> m4_17  [key=2, style=dotted];
m4_627 -> m4_610  [key=0, style=bold, color=blue];
m4_24 -> m4_25  [key=0, style=solid];
m4_24 -> m4_26  [key=0, style=solid];
m4_628 -> m4_629  [key=0, style=solid];
m4_629 -> m4_13  [key=2, style=dotted];
m4_629 -> m4_24  [key=2, style=dotted];
m4_629 -> m4_630  [key=0, style=solid];
m4_629 -> m4_631  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_630 -> m4_50  [key=2, style=dotted];
m4_630 -> m4_631  [key=0, style=solid];
m4_631 -> m4_50  [key=2, style=dotted];
m4_631 -> m4_632  [key=0, style=solid];
m4_632 -> m4_628  [key=0, style=bold, color=blue];
m4_535 -> m4_536  [key=0, style=solid];
m4_538 -> m4_25  [key=2, style=dotted];
m4_538 -> m4_539  [key=0, style=solid];
m4_540 -> m4_25  [key=2, style=dotted];
m4_540 -> m4_541  [key=0, style=solid];
m4_543 -> m4_25  [key=2, style=dotted];
m4_543 -> m4_544  [key=0, style=solid];
m4_546 -> m4_25  [key=2, style=dotted];
m4_546 -> m4_547  [key=0, style=solid];
m4_549 -> m4_25  [key=2, style=dotted];
m4_549 -> m4_550  [key=0, style=solid];
m4_552 -> m4_25  [key=2, style=dotted];
m4_552 -> m4_553  [key=0, style=solid];
m4_555 -> m4_25  [key=2, style=dotted];
m4_555 -> m4_556  [key=0, style=solid];
m4_558 -> m4_25  [key=2, style=dotted];
m4_558 -> m4_559  [key=0, style=solid];
m4_561 -> m4_25  [key=2, style=dotted];
m4_561 -> m4_562  [key=0, style=solid];
m4_564 -> m4_25  [key=2, style=dotted];
m4_564 -> m4_565  [key=0, style=solid];
m4_567 -> m4_25  [key=2, style=dotted];
m4_567 -> m4_568  [key=0, style=solid];
m4_570 -> m4_25  [key=2, style=dotted];
m4_570 -> m4_571  [key=0, style=solid];
m4_573 -> m4_25  [key=2, style=dotted];
m4_573 -> m4_574  [key=0, style=solid];
m4_576 -> m4_25  [key=2, style=dotted];
m4_576 -> m4_577  [key=0, style=solid];
m4_579 -> m4_25  [key=2, style=dotted];
m4_579 -> m4_580  [key=0, style=solid];
m4_582 -> m4_25  [key=2, style=dotted];
m4_582 -> m4_583  [key=0, style=solid];
m4_585 -> m4_25  [key=2, style=dotted];
m4_585 -> m4_586  [key=0, style=solid];
m4_539 -> m4_44  [key=2, style=dotted];
m4_539 -> m4_540  [key=0, style=solid];
m4_541 -> m4_44  [key=2, style=dotted];
m4_541 -> m4_542  [key=0, style=solid];
m4_542 -> m4_44  [key=2, style=dotted];
m4_542 -> m4_543  [key=0, style=solid];
m4_544 -> m4_44  [key=2, style=dotted];
m4_544 -> m4_545  [key=0, style=solid];
m4_545 -> m4_44  [key=2, style=dotted];
m4_545 -> m4_546  [key=0, style=solid];
m4_547 -> m4_44  [key=2, style=dotted];
m4_547 -> m4_548  [key=0, style=solid];
m4_548 -> m4_44  [key=2, style=dotted];
m4_548 -> m4_549  [key=0, style=solid];
m4_550 -> m4_44  [key=2, style=dotted];
m4_550 -> m4_551  [key=0, style=solid];
m4_551 -> m4_44  [key=2, style=dotted];
m4_551 -> m4_552  [key=0, style=solid];
m4_553 -> m4_44  [key=2, style=dotted];
m4_553 -> m4_554  [key=0, style=solid];
m4_554 -> m4_44  [key=2, style=dotted];
m4_554 -> m4_555  [key=0, style=solid];
m4_556 -> m4_44  [key=2, style=dotted];
m4_556 -> m4_557  [key=0, style=solid];
m4_557 -> m4_44  [key=2, style=dotted];
m4_557 -> m4_558  [key=0, style=solid];
m4_559 -> m4_44  [key=2, style=dotted];
m4_559 -> m4_560  [key=0, style=solid];
m4_560 -> m4_44  [key=2, style=dotted];
m4_560 -> m4_561  [key=0, style=solid];
m4_562 -> m4_44  [key=2, style=dotted];
m4_562 -> m4_563  [key=0, style=solid];
m4_563 -> m4_44  [key=2, style=dotted];
m4_563 -> m4_564  [key=0, style=solid];
m4_565 -> m4_44  [key=2, style=dotted];
m4_565 -> m4_566  [key=0, style=solid];
m4_566 -> m4_44  [key=2, style=dotted];
m4_566 -> m4_567  [key=0, style=solid];
m4_568 -> m4_44  [key=2, style=dotted];
m4_568 -> m4_569  [key=0, style=solid];
m4_569 -> m4_44  [key=2, style=dotted];
m4_569 -> m4_570  [key=0, style=solid];
m4_571 -> m4_44  [key=2, style=dotted];
m4_571 -> m4_572  [key=0, style=solid];
m4_572 -> m4_44  [key=2, style=dotted];
m4_572 -> m4_573  [key=0, style=solid];
m4_574 -> m4_44  [key=2, style=dotted];
m4_574 -> m4_575  [key=0, style=solid];
m4_575 -> m4_44  [key=2, style=dotted];
m4_575 -> m4_576  [key=0, style=solid];
m4_577 -> m4_44  [key=2, style=dotted];
m4_577 -> m4_578  [key=0, style=solid];
m4_578 -> m4_44  [key=2, style=dotted];
m4_578 -> m4_579  [key=0, style=solid];
m4_580 -> m4_44  [key=2, style=dotted];
m4_580 -> m4_581  [key=0, style=solid];
m4_581 -> m4_44  [key=2, style=dotted];
m4_581 -> m4_582  [key=0, style=solid];
m4_583 -> m4_44  [key=2, style=dotted];
m4_583 -> m4_584  [key=0, style=solid];
m4_584 -> m4_44  [key=2, style=dotted];
m4_584 -> m4_585  [key=0, style=solid];
m4_586 -> m4_44  [key=2, style=dotted];
m4_586 -> m4_587  [key=0, style=solid];
m4_537 -> m4_13  [key=2, style=dotted];
m4_537 -> m4_24  [key=2, style=dotted];
m4_537 -> m4_538  [key=0, style=solid];
m4_537 -> m4_540  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_537 -> m4_543  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_537 -> m4_546  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_537 -> m4_549  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_537 -> m4_552  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_537 -> m4_555  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_537 -> m4_558  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_537 -> m4_561  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_537 -> m4_564  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_537 -> m4_567  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_537 -> m4_570  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_537 -> m4_573  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_537 -> m4_576  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_537 -> m4_579  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_537 -> m4_582  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_537 -> m4_585  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_537 -> m4_539  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_537 -> m4_541  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_537 -> m4_542  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_537 -> m4_544  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_537 -> m4_545  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_537 -> m4_547  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_537 -> m4_548  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_537 -> m4_550  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_537 -> m4_551  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_537 -> m4_553  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_537 -> m4_554  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_537 -> m4_556  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_537 -> m4_557  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_537 -> m4_559  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_537 -> m4_560  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_537 -> m4_562  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_537 -> m4_563  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_537 -> m4_565  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_537 -> m4_566  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_537 -> m4_568  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_537 -> m4_569  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_537 -> m4_571  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_537 -> m4_572  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_537 -> m4_574  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_537 -> m4_575  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_537 -> m4_577  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_537 -> m4_578  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_537 -> m4_580  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_537 -> m4_581  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_537 -> m4_583  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_537 -> m4_584  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_537 -> m4_586  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_536 -> m4_537  [key=0, style=solid];
m4_587 -> m4_535  [key=0, style=bold, color=blue];
m4_224 -> m4_225  [key=0, style=solid];
m4_227 -> m4_15  [key=2, style=dotted];
m4_227 -> m4_50  [key=2, style=dotted];
m4_227 -> m4_228  [key=0, style=solid];
m4_229 -> m4_15  [key=2, style=dotted];
m4_229 -> m4_50  [key=2, style=dotted];
m4_229 -> m4_230  [key=0, style=solid];
m4_231 -> m4_15  [key=2, style=dotted];
m4_231 -> m4_50  [key=2, style=dotted];
m4_231 -> m4_232  [key=0, style=solid];
m4_233 -> m4_15  [key=2, style=dotted];
m4_233 -> m4_50  [key=2, style=dotted];
m4_233 -> m4_234  [key=0, style=solid];
m4_235 -> m4_15  [key=2, style=dotted];
m4_235 -> m4_50  [key=2, style=dotted];
m4_235 -> m4_236  [key=0, style=solid];
m4_237 -> m4_15  [key=2, style=dotted];
m4_237 -> m4_50  [key=2, style=dotted];
m4_237 -> m4_238  [key=0, style=solid];
m4_239 -> m4_15  [key=2, style=dotted];
m4_239 -> m4_50  [key=2, style=dotted];
m4_239 -> m4_240  [key=0, style=solid];
m4_241 -> m4_15  [key=2, style=dotted];
m4_241 -> m4_50  [key=2, style=dotted];
m4_241 -> m4_242  [key=0, style=solid];
m4_243 -> m4_15  [key=2, style=dotted];
m4_243 -> m4_50  [key=2, style=dotted];
m4_243 -> m4_244  [key=0, style=solid];
m4_245 -> m4_15  [key=2, style=dotted];
m4_245 -> m4_50  [key=2, style=dotted];
m4_245 -> m4_246  [key=0, style=solid];
m4_247 -> m4_15  [key=2, style=dotted];
m4_247 -> m4_50  [key=2, style=dotted];
m4_247 -> m4_248  [key=0, style=solid];
m4_250 -> m4_15  [key=2, style=dotted];
m4_250 -> m4_50  [key=2, style=dotted];
m4_250 -> m4_251  [key=0, style=solid];
m4_228 -> m4_44  [key=2, style=dotted];
m4_228 -> m4_229  [key=0, style=solid];
m4_230 -> m4_44  [key=2, style=dotted];
m4_230 -> m4_231  [key=0, style=solid];
m4_232 -> m4_44  [key=2, style=dotted];
m4_232 -> m4_233  [key=0, style=solid];
m4_234 -> m4_44  [key=2, style=dotted];
m4_234 -> m4_235  [key=0, style=solid];
m4_236 -> m4_44  [key=2, style=dotted];
m4_236 -> m4_237  [key=0, style=solid];
m4_238 -> m4_44  [key=2, style=dotted];
m4_238 -> m4_239  [key=0, style=solid];
m4_240 -> m4_44  [key=2, style=dotted];
m4_240 -> m4_241  [key=0, style=solid];
m4_242 -> m4_44  [key=2, style=dotted];
m4_242 -> m4_243  [key=0, style=solid];
m4_244 -> m4_44  [key=2, style=dotted];
m4_244 -> m4_245  [key=0, style=solid];
m4_246 -> m4_44  [key=2, style=dotted];
m4_246 -> m4_247  [key=0, style=solid];
m4_248 -> m4_44  [key=2, style=dotted];
m4_248 -> m4_249  [key=0, style=solid];
m4_249 -> m4_44  [key=2, style=dotted];
m4_249 -> m4_250  [key=0, style=solid];
m4_251 -> m4_44  [key=2, style=dotted];
m4_251 -> m4_252  [key=0, style=solid];
m4_252 -> m4_44  [key=2, style=dotted];
m4_252 -> m4_253  [key=0, style=solid];
m4_226 -> m4_13  [key=2, style=dotted];
m4_226 -> m4_24  [key=2, style=dotted];
m4_226 -> m4_227  [key=0, style=solid];
m4_226 -> m4_229  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_226 -> m4_231  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_226 -> m4_233  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_226 -> m4_235  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_226 -> m4_237  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_226 -> m4_239  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_226 -> m4_241  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_226 -> m4_243  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_226 -> m4_245  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_226 -> m4_247  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_226 -> m4_250  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_226 -> m4_228  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_226 -> m4_230  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_226 -> m4_232  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_226 -> m4_234  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_226 -> m4_236  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_226 -> m4_238  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_226 -> m4_240  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_226 -> m4_242  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_226 -> m4_244  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_226 -> m4_246  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_226 -> m4_248  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_226 -> m4_249  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_226 -> m4_251  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_226 -> m4_252  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_226 -> m4_253  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_253 -> m4_50  [key=2, style=dotted];
m4_253 -> m4_254  [key=0, style=solid];
m4_253 -> m4_17  [key=2, style=dotted];
m4_225 -> m4_226  [key=0, style=solid];
m4_254 -> m4_224  [key=0, style=bold, color=blue];
m4_283 -> m4_284  [key=0, style=solid];
m4_285 -> m4_25  [key=2, style=dotted];
m4_285 -> m4_286  [key=0, style=solid];
m4_284 -> m4_13  [key=2, style=dotted];
m4_284 -> m4_24  [key=2, style=dotted];
m4_284 -> m4_285  [key=0, style=solid];
m4_286 -> m4_283  [key=0, style=bold, color=blue];
m4_429 -> m4_430  [key=0, style=solid];
m4_431 -> m4_13  [key=2, style=dotted];
m4_431 -> m4_24  [key=2, style=dotted];
m4_431 -> m4_432  [key=0, style=solid];
m4_432 -> m4_50  [key=2, style=dotted];
m4_432 -> m4_432  [key=0, style=solid];
m4_432 -> m4_433  [key=0, style=solid];
m4_430 -> m4_431  [key=0, style=solid];
m4_433 -> m4_429  [key=0, style=bold, color=blue];
m4_877 -> m4_878  [key=0, style=solid];
m4_883 -> m4_15  [key=2, style=dotted];
m4_883 -> m4_50  [key=2, style=dotted];
m4_883 -> m4_884  [key=0, style=solid];
m4_885 -> m4_15  [key=2, style=dotted];
m4_885 -> m4_50  [key=2, style=dotted];
m4_885 -> m4_886  [key=0, style=solid];
m4_886 -> m4_44  [key=2, style=dotted];
m4_886 -> m4_887  [key=0, style=solid];
m4_879 -> m4_13  [key=2, style=dotted];
m4_879 -> m4_24  [key=2, style=dotted];
m4_879 -> m4_883  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_879 -> m4_885  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_879 -> m4_886  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_879 -> m4_880  [key=0, style=solid];
m4_879 -> m4_887  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_887 -> m4_50  [key=2, style=dotted];
m4_887 -> m4_888  [key=0, style=solid];
m4_887 -> m4_17  [key=2, style=dotted];
m4_880 -> m4_67  [key=2, style=dotted];
m4_880 -> m4_881  [key=0, style=solid];
m4_882 -> m4_883  [key=0, style=solid];
m4_882 -> m4_885  [key=0, style=solid];
m4_884 -> m4_882  [key=0, style=solid];
m4_884 -> m4_884  [key=1, style=dashed, color=darkseagreen4, label=i];
m4_878 -> m4_879  [key=0, style=solid];
m4_881 -> m4_882  [key=0, style=solid];
m4_881 -> m4_884  [key=1, style=dashed, color=darkseagreen4, label=i];
m4_888 -> m4_877  [key=0, style=bold, color=blue];
m4_27 -> m4_28  [key=0, style=solid];
m4_27 -> m4_31  [key=0, style=solid];
m4_30 -> m4_31  [key=0, style=solid, color=green];
m4_30 -> m4_25  [key=2, style=dotted, color=green];
m4_30 -> m4_15  [key=2, style=dotted, color=green];
m4_30 -> m4_34  [key=0, style=solid];
m4_30 -> m4_36  [key=2, style=dotted];
m4_29 -> m4_30  [key=0, style=solid, color=green];
m4_29 -> m4_31  [key=1, style=dashed, color=green, label=reader];
m4_29 -> m4_32  [key=1, style=dashed, color=green, label=reader];
m4_29 -> m4_33  [key=1, style=dashed, color=green, label=reader];
m4_29 -> m4_34  [key=1, style=dashed, color=green, label=reader];
m4_29 -> m4_35  [key=1, style=dashed, color=green, label=reader];
m4_29 -> m4_36  [key=1, style=dashed, color=green, label=reader];
m4_29 -> m4_37  [key=1, style=dashed, color=green, label=reader];
m4_29 -> m4_38  [key=1, style=dashed, color=green, label=reader];
m4_29 -> m4_39  [key=1, style=dashed, color=green, label=reader];
m4_29 -> m4_40  [key=1, style=dashed, color=green, label=reader];
m4_29 -> m4_41  [key=1, style=dashed, color=green, label=reader];
m4_29 -> m4_42  [key=1, style=dashed, color=green, label=reader];
m4_29 -> m4_13  [key=2, style=dotted];
m4_29 -> m4_24  [key=2, style=dotted];
m4_31 -> m4_32  [key=0, style=solid, color=green];
m4_31 -> m4_25  [key=2, style=dotted, color=green];
m4_31 -> m4_15  [key=2, style=dotted, color=green];
m4_32 -> m4_33  [key=0, style=solid, color=green];
m4_32 -> m4_25  [key=2, style=dotted, color=green];
m4_32 -> m4_15  [key=2, style=dotted, color=green];
m4_32 -> m4_23  [key=2, style=dotted];
m4_33 -> m4_34  [key=0, style=solid, color=green];
m4_33 -> m4_44  [key=2, style=dotted, color=green];
m4_34 -> m4_35  [key=0, style=solid, color=green];
m4_34 -> m4_44  [key=2, style=dotted, color=green];
m4_34 -> m4_22  [key=0, style=bold, color=blue];
m4_42 -> m4_43  [key=0, style=solid, color=green];
m4_42 -> m4_44  [key=2, style=dotted, color=green];
m4_42 -> m4_52  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JContainer"];
m4_28 -> m4_29  [key=0, style=solid];
m4_28 -> m4_30  [key=0, style=solid];
m4_43 -> m4_27  [key=0, style=bold, color=blue];
m4_43 -> m4_44  [key=0, style=solid];
m4_43 -> m4_46  [key=0, style=solid];
m4_43 -> m4_48  [key=0, style=solid];
m4_43 -> m4_50  [key=0, style=solid];
m4_43 -> m4_52  [key=0, style=solid];
m4_287 -> m4_288  [key=0, style=solid];
m4_289 -> m4_25  [key=2, style=dotted];
m4_289 -> m4_290  [key=0, style=solid];
m4_288 -> m4_13  [key=2, style=dotted];
m4_288 -> m4_24  [key=2, style=dotted];
m4_288 -> m4_289  [key=0, style=solid];
m4_290 -> m4_287  [key=0, style=bold, color=blue];
m4_186 -> m4_187  [key=0, style=solid];
m4_188 -> m4_25  [key=2, style=dotted];
m4_188 -> m4_189  [key=0, style=solid];
m4_187 -> m4_13  [key=2, style=dotted];
m4_187 -> m4_24  [key=2, style=dotted];
m4_187 -> m4_188  [key=0, style=solid];
m4_189 -> m4_186  [key=0, style=bold, color=blue];
m4_850 -> m4_851  [key=0, style=solid];
m4_854 -> m4_15  [key=2, style=dotted];
m4_854 -> m4_50  [key=2, style=dotted];
m4_854 -> m4_855  [key=0, style=solid];
m4_856 -> m4_15  [key=2, style=dotted];
m4_856 -> m4_50  [key=2, style=dotted];
m4_856 -> m4_857  [key=0, style=solid];
m4_862 -> m4_15  [key=2, style=dotted];
m4_862 -> m4_50  [key=2, style=dotted];
m4_862 -> m4_863  [key=0, style=solid];
m4_855 -> m4_44  [key=2, style=dotted];
m4_855 -> m4_856  [key=0, style=solid];
m4_857 -> m4_44  [key=2, style=dotted];
m4_857 -> m4_858  [key=0, style=solid];
m4_859 -> m4_44  [key=2, style=dotted];
m4_859 -> m4_860  [key=0, style=solid];
m4_860 -> m4_44  [key=2, style=dotted];
m4_860 -> m4_861  [key=0, style=solid];
m4_863 -> m4_44  [key=2, style=dotted];
m4_863 -> m4_864  [key=0, style=solid];
m4_861 -> m4_44  [key=2, style=dotted];
m4_861 -> m4_862  [key=0, style=solid];
m4_852 -> m4_13  [key=2, style=dotted];
m4_852 -> m4_24  [key=2, style=dotted];
m4_852 -> m4_854  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_852 -> m4_856  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_852 -> m4_862  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_852 -> m4_855  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_852 -> m4_857  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_852 -> m4_859  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_852 -> m4_860  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_852 -> m4_863  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_852 -> m4_853  [key=0, style=solid];
m4_852 -> m4_858  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_853 -> m4_854  [key=0, style=solid];
m4_853 -> m4_819  [key=2, style=dotted];
m4_858 -> m4_859  [key=0, style=solid];
m4_858 -> m4_861  [key=1, style=dashed, color=darkseagreen4, label=d];
m4_858 -> m4_637  [key=2, style=dotted];
m4_851 -> m4_852  [key=0, style=solid];
m4_864 -> m4_850  [key=0, style=bold, color=blue];
m4_899 -> m4_900  [key=0, style=solid];
m4_902 -> m4_15  [key=2, style=dotted];
m4_902 -> m4_50  [key=2, style=dotted];
m4_902 -> m4_903  [key=0, style=solid];
m4_905 -> m4_15  [key=2, style=dotted];
m4_905 -> m4_50  [key=2, style=dotted];
m4_905 -> m4_906  [key=0, style=solid];
m4_903 -> m4_44  [key=2, style=dotted];
m4_903 -> m4_904  [key=0, style=solid];
m4_904 -> m4_44  [key=2, style=dotted];
m4_904 -> m4_905  [key=0, style=solid];
m4_906 -> m4_44  [key=2, style=dotted];
m4_906 -> m4_907  [key=0, style=solid];
m4_901 -> m4_13  [key=2, style=dotted];
m4_901 -> m4_24  [key=2, style=dotted];
m4_901 -> m4_902  [key=0, style=solid];
m4_901 -> m4_905  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_901 -> m4_903  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_901 -> m4_904  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_901 -> m4_906  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_900 -> m4_901  [key=0, style=solid];
m4_907 -> m4_899  [key=0, style=bold, color=blue];
m4_131 -> m4_132  [key=0, style=solid];
m4_136 -> m4_25  [key=2, style=dotted];
m4_136 -> m4_137  [key=0, style=solid];
m4_139 -> m4_25  [key=2, style=dotted];
m4_139 -> m4_140  [key=0, style=solid];
m4_142 -> m4_25  [key=2, style=dotted];
m4_142 -> m4_143  [key=0, style=solid];
m4_147 -> m4_25  [key=2, style=dotted];
m4_147 -> m4_148  [key=0, style=solid];
m4_150 -> m4_25  [key=2, style=dotted];
m4_150 -> m4_151  [key=0, style=solid];
m4_153 -> m4_25  [key=2, style=dotted];
m4_153 -> m4_154  [key=0, style=solid];
m4_157 -> m4_25  [key=2, style=dotted];
m4_157 -> m4_158  [key=0, style=solid];
m4_161 -> m4_25  [key=2, style=dotted];
m4_161 -> m4_162  [key=0, style=solid];
m4_164 -> m4_25  [key=2, style=dotted];
m4_164 -> m4_165  [key=0, style=solid];
m4_167 -> m4_25  [key=2, style=dotted];
m4_167 -> m4_168  [key=0, style=solid];
m4_170 -> m4_25  [key=2, style=dotted];
m4_170 -> m4_171  [key=0, style=solid];
m4_173 -> m4_25  [key=2, style=dotted];
m4_173 -> m4_174  [key=0, style=solid];
m4_176 -> m4_25  [key=2, style=dotted];
m4_176 -> m4_177  [key=0, style=solid];
m4_179 -> m4_25  [key=2, style=dotted];
m4_179 -> m4_180  [key=0, style=solid];
m4_135 -> m4_44  [key=2, style=dotted];
m4_135 -> m4_136  [key=0, style=solid];
m4_137 -> m4_44  [key=2, style=dotted];
m4_137 -> m4_138  [key=0, style=solid];
m4_138 -> m4_44  [key=2, style=dotted];
m4_138 -> m4_139  [key=0, style=solid];
m4_140 -> m4_44  [key=2, style=dotted];
m4_140 -> m4_141  [key=0, style=solid];
m4_141 -> m4_44  [key=2, style=dotted];
m4_141 -> m4_142  [key=0, style=solid];
m4_143 -> m4_44  [key=2, style=dotted];
m4_143 -> m4_144  [key=0, style=solid];
m4_144 -> m4_44  [key=2, style=dotted];
m4_144 -> m4_145  [key=0, style=solid];
m4_145 -> m4_44  [key=2, style=dotted];
m4_145 -> m4_146  [key=0, style=solid];
m4_146 -> m4_44  [key=2, style=dotted];
m4_146 -> m4_147  [key=0, style=solid];
m4_148 -> m4_44  [key=2, style=dotted];
m4_148 -> m4_149  [key=0, style=solid];
m4_149 -> m4_44  [key=2, style=dotted];
m4_149 -> m4_150  [key=0, style=solid];
m4_151 -> m4_44  [key=2, style=dotted];
m4_151 -> m4_152  [key=0, style=solid];
m4_152 -> m4_44  [key=2, style=dotted];
m4_152 -> m4_153  [key=0, style=solid];
m4_154 -> m4_44  [key=2, style=dotted];
m4_154 -> m4_155  [key=0, style=solid];
m4_155 -> m4_44  [key=2, style=dotted];
m4_155 -> m4_156  [key=0, style=solid];
m4_156 -> m4_44  [key=2, style=dotted];
m4_156 -> m4_157  [key=0, style=solid];
m4_158 -> m4_44  [key=2, style=dotted];
m4_158 -> m4_159  [key=0, style=solid];
m4_159 -> m4_44  [key=2, style=dotted];
m4_159 -> m4_160  [key=0, style=solid];
m4_160 -> m4_44  [key=2, style=dotted];
m4_160 -> m4_161  [key=0, style=solid];
m4_162 -> m4_44  [key=2, style=dotted];
m4_162 -> m4_163  [key=0, style=solid];
m4_163 -> m4_44  [key=2, style=dotted];
m4_163 -> m4_164  [key=0, style=solid];
m4_165 -> m4_44  [key=2, style=dotted];
m4_165 -> m4_166  [key=0, style=solid];
m4_166 -> m4_44  [key=2, style=dotted];
m4_166 -> m4_167  [key=0, style=solid];
m4_168 -> m4_44  [key=2, style=dotted];
m4_168 -> m4_169  [key=0, style=solid];
m4_169 -> m4_44  [key=2, style=dotted];
m4_169 -> m4_170  [key=0, style=solid];
m4_171 -> m4_44  [key=2, style=dotted];
m4_171 -> m4_172  [key=0, style=solid];
m4_172 -> m4_44  [key=2, style=dotted];
m4_172 -> m4_173  [key=0, style=solid];
m4_174 -> m4_44  [key=2, style=dotted];
m4_174 -> m4_175  [key=0, style=solid];
m4_175 -> m4_44  [key=2, style=dotted];
m4_175 -> m4_176  [key=0, style=solid];
m4_177 -> m4_44  [key=2, style=dotted];
m4_177 -> m4_178  [key=0, style=solid];
m4_178 -> m4_44  [key=2, style=dotted];
m4_178 -> m4_179  [key=0, style=solid];
m4_180 -> m4_44  [key=2, style=dotted];
m4_180 -> m4_181  [key=0, style=solid];
m4_181 -> m4_44  [key=2, style=dotted];
m4_181 -> m4_182  [key=0, style=solid];
m4_134 -> m4_13  [key=2, style=dotted];
m4_134 -> m4_136  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_134 -> m4_139  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_134 -> m4_142  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_134 -> m4_147  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_134 -> m4_150  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_134 -> m4_153  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_134 -> m4_157  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_134 -> m4_161  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_134 -> m4_164  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_134 -> m4_167  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_134 -> m4_170  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_134 -> m4_173  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_134 -> m4_176  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_134 -> m4_179  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_134 -> m4_135  [key=0, style=solid];
m4_134 -> m4_137  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_134 -> m4_138  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_134 -> m4_140  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_134 -> m4_141  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_134 -> m4_143  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_134 -> m4_144  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_134 -> m4_145  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_134 -> m4_146  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_134 -> m4_148  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_134 -> m4_149  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_134 -> m4_151  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_134 -> m4_152  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_134 -> m4_154  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_134 -> m4_155  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_134 -> m4_156  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_134 -> m4_158  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_134 -> m4_159  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_134 -> m4_160  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_134 -> m4_162  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_134 -> m4_163  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_134 -> m4_165  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_134 -> m4_166  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_134 -> m4_168  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_134 -> m4_169  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_134 -> m4_171  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_134 -> m4_172  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_134 -> m4_174  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_134 -> m4_175  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_134 -> m4_177  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_134 -> m4_178  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_134 -> m4_180  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_134 -> m4_181  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_133 -> m4_24  [key=2, style=dotted];
m4_133 -> m4_134  [key=0, style=solid];
m4_132 -> m4_133  [key=0, style=solid];
m4_182 -> m4_131  [key=0, style=bold, color=blue];
m4_1046 -> m4_1047  [key=0, style=solid];
m4_1050 -> m4_44  [key=2, style=dotted];
m4_1050 -> m4_1051  [key=0, style=solid];
m4_1051 -> m4_44  [key=2, style=dotted];
m4_1051 -> m4_1052  [key=0, style=solid];
m4_1048 -> m4_13  [key=2, style=dotted];
m4_1048 -> m4_24  [key=2, style=dotted];
m4_1048 -> m4_1050  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_1048 -> m4_1051  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_1048 -> m4_1049  [key=0, style=solid];
m4_1049 -> m4_1050  [key=0, style=solid];
m4_1049 -> m4_637  [key=2, style=dotted];
m4_1047 -> m4_1048  [key=0, style=solid];
m4_1052 -> m4_1046  [key=0, style=bold, color=blue];
m4_291 -> m4_292  [key=0, style=solid];
m4_292 -> m4_13  [key=2, style=dotted];
m4_292 -> m4_24  [key=2, style=dotted];
m4_292 -> m4_293  [key=0, style=solid];
m4_293 -> m4_294  [key=0, style=solid];
m4_293 -> m4_295  [key=2, style=dotted];
m4_294 -> m4_291  [key=0, style=bold, color=blue];
m4_50 -> m4_51  [key=0, style=solid];
m4_359 -> m4_360  [key=0, style=solid];
m4_361 -> m4_25  [key=2, style=dotted];
m4_361 -> m4_15  [key=2, style=dotted];
m4_361 -> m4_362  [key=0, style=solid];
m4_362 -> m4_25  [key=2, style=dotted];
m4_362 -> m4_15  [key=2, style=dotted];
m4_362 -> m4_363  [key=0, style=solid];
m4_365 -> m4_25  [key=2, style=dotted];
m4_365 -> m4_15  [key=2, style=dotted];
m4_365 -> m4_366  [key=0, style=solid];
m4_368 -> m4_25  [key=2, style=dotted];
m4_368 -> m4_15  [key=2, style=dotted];
m4_368 -> m4_369  [key=0, style=solid];
m4_370 -> m4_25  [key=2, style=dotted];
m4_370 -> m4_371  [key=0, style=solid];
m4_370 -> m4_17  [key=2, style=dotted];
m4_363 -> m4_44  [key=2, style=dotted];
m4_363 -> m4_364  [key=0, style=solid];
m4_364 -> m4_44  [key=2, style=dotted];
m4_364 -> m4_365  [key=0, style=solid];
m4_366 -> m4_44  [key=2, style=dotted];
m4_366 -> m4_367  [key=0, style=solid];
m4_367 -> m4_44  [key=2, style=dotted];
m4_367 -> m4_368  [key=0, style=solid];
m4_369 -> m4_44  [key=2, style=dotted];
m4_369 -> m4_370  [key=0, style=solid];
m4_360 -> m4_13  [key=2, style=dotted];
m4_360 -> m4_24  [key=2, style=dotted];
m4_360 -> m4_361  [key=0, style=solid];
m4_360 -> m4_362  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_360 -> m4_365  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_360 -> m4_368  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_360 -> m4_370  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_360 -> m4_363  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_360 -> m4_364  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_360 -> m4_366  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_360 -> m4_367  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_360 -> m4_369  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_371 -> m4_359  [key=0, style=bold, color=blue];
m4_1007 -> m4_1008  [key=0, style=solid];
m4_1010 -> m4_15  [key=2, style=dotted];
m4_1010 -> m4_50  [key=2, style=dotted];
m4_1010 -> m4_1011  [key=0, style=solid];
m4_1012 -> m4_15  [key=2, style=dotted];
m4_1012 -> m4_50  [key=2, style=dotted];
m4_1012 -> m4_1013  [key=0, style=solid];
m4_1014 -> m4_15  [key=2, style=dotted];
m4_1014 -> m4_50  [key=2, style=dotted];
m4_1014 -> m4_1015  [key=0, style=solid];
m4_1016 -> m4_15  [key=2, style=dotted];
m4_1016 -> m4_50  [key=2, style=dotted];
m4_1016 -> m4_1017  [key=0, style=solid];
m4_1019 -> m4_15  [key=2, style=dotted];
m4_1019 -> m4_50  [key=2, style=dotted];
m4_1019 -> m4_1020  [key=0, style=solid];
m4_1021 -> m4_15  [key=2, style=dotted];
m4_1021 -> m4_50  [key=2, style=dotted];
m4_1021 -> m4_1022  [key=0, style=solid];
m4_1024 -> m4_15  [key=2, style=dotted];
m4_1024 -> m4_50  [key=2, style=dotted];
m4_1024 -> m4_1025  [key=0, style=solid];
m4_1026 -> m4_15  [key=2, style=dotted];
m4_1026 -> m4_50  [key=2, style=dotted];
m4_1026 -> m4_1027  [key=0, style=solid];
m4_1028 -> m4_15  [key=2, style=dotted];
m4_1028 -> m4_50  [key=2, style=dotted];
m4_1028 -> m4_1029  [key=0, style=solid];
m4_1031 -> m4_15  [key=2, style=dotted];
m4_1031 -> m4_50  [key=2, style=dotted];
m4_1031 -> m4_1032  [key=0, style=solid];
m4_1033 -> m4_15  [key=2, style=dotted];
m4_1033 -> m4_50  [key=2, style=dotted];
m4_1033 -> m4_1034  [key=0, style=solid];
m4_1037 -> m4_15  [key=2, style=dotted];
m4_1037 -> m4_50  [key=2, style=dotted];
m4_1037 -> m4_1038  [key=0, style=solid];
m4_1039 -> m4_15  [key=2, style=dotted];
m4_1039 -> m4_50  [key=2, style=dotted];
m4_1039 -> m4_1040  [key=0, style=solid];
m4_1041 -> m4_15  [key=2, style=dotted];
m4_1041 -> m4_50  [key=2, style=dotted];
m4_1041 -> m4_1042  [key=0, style=solid];
m4_1043 -> m4_15  [key=2, style=dotted];
m4_1043 -> m4_50  [key=2, style=dotted];
m4_1043 -> m4_1044  [key=0, style=solid];
m4_1011 -> m4_44  [key=2, style=dotted];
m4_1011 -> m4_1012  [key=0, style=solid];
m4_1013 -> m4_44  [key=2, style=dotted];
m4_1013 -> m4_1014  [key=0, style=solid];
m4_1015 -> m4_44  [key=2, style=dotted];
m4_1015 -> m4_1016  [key=0, style=solid];
m4_1017 -> m4_44  [key=2, style=dotted];
m4_1017 -> m4_1018  [key=0, style=solid];
m4_1018 -> m4_44  [key=2, style=dotted];
m4_1018 -> m4_1019  [key=0, style=solid];
m4_1020 -> m4_44  [key=2, style=dotted];
m4_1020 -> m4_1021  [key=0, style=solid];
m4_1022 -> m4_44  [key=2, style=dotted];
m4_1022 -> m4_1023  [key=0, style=solid];
m4_1023 -> m4_44  [key=2, style=dotted];
m4_1023 -> m4_1024  [key=0, style=solid];
m4_1025 -> m4_44  [key=2, style=dotted];
m4_1025 -> m4_1026  [key=0, style=solid];
m4_1027 -> m4_44  [key=2, style=dotted];
m4_1027 -> m4_1028  [key=0, style=solid];
m4_1029 -> m4_44  [key=2, style=dotted];
m4_1029 -> m4_1030  [key=0, style=solid];
m4_1030 -> m4_44  [key=2, style=dotted];
m4_1030 -> m4_1031  [key=0, style=solid];
m4_1032 -> m4_44  [key=2, style=dotted];
m4_1032 -> m4_1033  [key=0, style=solid];
m4_1034 -> m4_44  [key=2, style=dotted];
m4_1034 -> m4_1035  [key=0, style=solid];
m4_1035 -> m4_44  [key=2, style=dotted];
m4_1035 -> m4_1036  [key=0, style=solid];
m4_1036 -> m4_44  [key=2, style=dotted];
m4_1036 -> m4_1037  [key=0, style=solid];
m4_1038 -> m4_44  [key=2, style=dotted];
m4_1038 -> m4_1039  [key=0, style=solid];
m4_1040 -> m4_44  [key=2, style=dotted];
m4_1040 -> m4_1041  [key=0, style=solid];
m4_1042 -> m4_44  [key=2, style=dotted];
m4_1042 -> m4_1043  [key=0, style=solid];
m4_1044 -> m4_44  [key=2, style=dotted];
m4_1044 -> m4_1045  [key=0, style=solid];
m4_1009 -> m4_13  [key=2, style=dotted];
m4_1009 -> m4_24  [key=2, style=dotted];
m4_1009 -> m4_1010  [key=0, style=solid];
m4_1009 -> m4_1012  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_1009 -> m4_1014  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_1009 -> m4_1016  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_1009 -> m4_1019  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_1009 -> m4_1021  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_1009 -> m4_1024  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_1009 -> m4_1026  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_1009 -> m4_1028  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_1009 -> m4_1031  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_1009 -> m4_1033  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_1009 -> m4_1037  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_1009 -> m4_1039  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_1009 -> m4_1041  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_1009 -> m4_1043  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_1009 -> m4_1011  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_1009 -> m4_1013  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_1009 -> m4_1015  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_1009 -> m4_1017  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_1009 -> m4_1018  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_1009 -> m4_1020  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_1009 -> m4_1022  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_1009 -> m4_1023  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_1009 -> m4_1025  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_1009 -> m4_1027  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_1009 -> m4_1029  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_1009 -> m4_1030  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_1009 -> m4_1032  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_1009 -> m4_1034  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_1009 -> m4_1035  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_1009 -> m4_1036  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_1009 -> m4_1038  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_1009 -> m4_1040  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_1009 -> m4_1042  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_1009 -> m4_1044  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_1008 -> m4_1009  [key=0, style=solid];
m4_1045 -> m4_1007  [key=0, style=bold, color=blue];
m4_44 -> m4_45  [key=0, style=solid];
m4_46 -> m4_47  [key=0, style=solid, color=green];
m4_48 -> m4_49  [key=0, style=solid, color=green];
m4_48 -> m4_48  [key=0, style=solid, color=green];
m4_48 -> m4_50  [key=2, style=dotted, color=green];
m4_45 -> m4_53  [key=0, style=solid];
m4_45 -> m4_46  [key=0, style=solid, color=green];
m4_47 -> m4_53  [key=0, style=solid];
m4_47 -> m4_48  [key=0, style=solid, color=green];
m4_47 -> m4_13  [key=2, style=dotted, color=green];
m4_47 -> m4_24  [key=2, style=dotted, color=green];
m4_49 -> m4_53  [key=0, style=solid];
m4_49 -> m4_45  [key=0, style=bold, color=blue];
m4_588 -> m4_589  [key=0, style=solid];
m4_592 -> m4_44  [key=2, style=dotted];
m4_592 -> m4_593  [key=0, style=solid];
m4_594 -> m4_44  [key=2, style=dotted];
m4_594 -> m4_595  [key=0, style=solid];
m4_596 -> m4_44  [key=2, style=dotted];
m4_596 -> m4_597  [key=0, style=solid];
m4_590 -> m4_13  [key=2, style=dotted];
m4_590 -> m4_24  [key=2, style=dotted];
m4_590 -> m4_592  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_590 -> m4_594  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_590 -> m4_596  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_590 -> m4_591  [key=0, style=solid];
m4_590 -> m4_593  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_590 -> m4_595  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_590 -> m4_597  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_591 -> m4_50  [key=2, style=dotted];
m4_591 -> m4_592  [key=0, style=solid];
m4_593 -> m4_50  [key=2, style=dotted];
m4_593 -> m4_594  [key=0, style=solid];
m4_595 -> m4_50  [key=2, style=dotted];
m4_595 -> m4_596  [key=0, style=solid];
m4_597 -> m4_50  [key=2, style=dotted];
m4_597 -> m4_598  [key=0, style=solid];
m4_589 -> m4_590  [key=0, style=solid];
m4_598 -> m4_588  [key=0, style=bold, color=blue];
m4_933 -> m4_934  [key=0, style=solid];
m4_935 -> m4_13  [key=2, style=dotted];
m4_935 -> m4_24  [key=2, style=dotted];
m4_935 -> m4_936  [key=0, style=solid];
m4_936 -> m4_50  [key=2, style=dotted];
m4_936 -> m4_937  [key=0, style=solid];
m4_934 -> m4_935  [key=0, style=solid];
m4_937 -> m4_933  [key=0, style=bold, color=blue];
m4_504 -> m4_505  [key=0, style=solid];
m4_509 -> m4_44  [key=2, style=dotted];
m4_509 -> m4_510  [key=0, style=solid];
m4_511 -> m4_44  [key=2, style=dotted];
m4_511 -> m4_512  [key=0, style=solid];
m4_512 -> m4_44  [key=2, style=dotted];
m4_512 -> m4_513  [key=0, style=solid];
m4_513 -> m4_44  [key=2, style=dotted];
m4_513 -> m4_514  [key=0, style=solid];
m4_513 -> m4_519  [key=2, style=dotted];
m4_515 -> m4_44  [key=2, style=dotted];
m4_515 -> m4_516  [key=0, style=solid];
m4_517 -> m4_44  [key=2, style=dotted];
m4_517 -> m4_518  [key=0, style=solid];
m4_507 -> m4_13  [key=2, style=dotted];
m4_507 -> m4_24  [key=2, style=dotted];
m4_507 -> m4_509  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_507 -> m4_511  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_507 -> m4_512  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_507 -> m4_513  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_507 -> m4_515  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_507 -> m4_517  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_507 -> m4_508  [key=0, style=solid];
m4_507 -> m4_510  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_507 -> m4_514  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_507 -> m4_516  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_508 -> m4_50  [key=2, style=dotted];
m4_508 -> m4_509  [key=0, style=solid];
m4_510 -> m4_50  [key=2, style=dotted];
m4_510 -> m4_511  [key=0, style=solid];
m4_514 -> m4_50  [key=2, style=dotted];
m4_514 -> m4_515  [key=0, style=solid];
m4_516 -> m4_50  [key=2, style=dotted];
m4_516 -> m4_517  [key=0, style=solid];
m4_506 -> m4_507  [key=0, style=solid];
m4_506 -> m4_196  [key=2, style=dotted];
m4_505 -> m4_506  [key=0, style=solid];
m4_518 -> m4_504  [key=0, style=bold, color=blue];
m4_22 -> m4_21  [key=0, style=solid];
m4_22 -> m4_26  [key=2, style=dotted];
m4_22 -> m4_24  [key=0, style=solid];
m4_22 -> m4_27  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JToken"];
m4_22 -> m4_28  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JToken"];
m4_22 -> m4_30  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JToken"];
m4_190 -> m4_191  [key=0, style=solid];
m4_193 -> m4_25  [key=2, style=dotted];
m4_193 -> m4_194  [key=0, style=solid];
m4_194 -> m4_44  [key=2, style=dotted];
m4_194 -> m4_195  [key=0, style=solid];
m4_192 -> m4_13  [key=2, style=dotted];
m4_192 -> m4_24  [key=2, style=dotted];
m4_192 -> m4_193  [key=0, style=solid];
m4_192 -> m4_194  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_191 -> m4_194  [key=1, style=dashed, color=darkseagreen4, label=s];
m4_191 -> m4_192  [key=0, style=solid];
m4_191 -> m4_196  [key=2, style=dotted];
m4_195 -> m4_190  [key=0, style=bold, color=blue];
m4_951 -> m4_952  [key=0, style=solid];
m4_954 -> m4_15  [key=2, style=dotted];
m4_954 -> m4_50  [key=2, style=dotted];
m4_954 -> m4_955  [key=0, style=solid];
m4_956 -> m4_15  [key=2, style=dotted];
m4_956 -> m4_50  [key=2, style=dotted];
m4_956 -> m4_957  [key=0, style=solid];
m4_955 -> m4_44  [key=2, style=dotted];
m4_955 -> m4_956  [key=0, style=solid];
m4_957 -> m4_44  [key=2, style=dotted];
m4_957 -> m4_958  [key=0, style=solid];
m4_953 -> m4_13  [key=2, style=dotted];
m4_953 -> m4_24  [key=2, style=dotted];
m4_953 -> m4_954  [key=0, style=solid];
m4_953 -> m4_956  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_953 -> m4_955  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_953 -> m4_957  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_952 -> m4_953  [key=0, style=solid];
m4_958 -> m4_951  [key=0, style=bold, color=blue];
m4_387 -> m4_388  [key=0, style=solid];
m4_391 -> m4_25  [key=2, style=dotted];
m4_391 -> m4_15  [key=2, style=dotted];
m4_391 -> m4_392  [key=0, style=solid];
m4_393 -> m4_25  [key=2, style=dotted];
m4_393 -> m4_15  [key=2, style=dotted];
m4_393 -> m4_394  [key=0, style=solid];
m4_394 -> m4_25  [key=2, style=dotted];
m4_394 -> m4_15  [key=2, style=dotted];
m4_394 -> m4_395  [key=0, style=solid];
m4_396 -> m4_25  [key=2, style=dotted];
m4_396 -> m4_15  [key=2, style=dotted];
m4_396 -> m4_397  [key=0, style=solid];
m4_400 -> m4_25  [key=2, style=dotted];
m4_400 -> m4_15  [key=2, style=dotted];
m4_400 -> m4_401  [key=0, style=solid];
m4_402 -> m4_25  [key=2, style=dotted];
m4_402 -> m4_403  [key=0, style=solid];
m4_402 -> m4_17  [key=2, style=dotted];
m4_398 -> m4_44  [key=2, style=dotted];
m4_398 -> m4_399  [key=0, style=solid];
m4_392 -> m4_44  [key=2, style=dotted];
m4_392 -> m4_393  [key=0, style=solid];
m4_395 -> m4_44  [key=2, style=dotted];
m4_395 -> m4_396  [key=0, style=solid];
m4_399 -> m4_44  [key=2, style=dotted];
m4_399 -> m4_400  [key=0, style=solid];
m4_401 -> m4_44  [key=2, style=dotted];
m4_401 -> m4_402  [key=0, style=solid];
m4_390 -> m4_13  [key=2, style=dotted];
m4_390 -> m4_24  [key=2, style=dotted];
m4_390 -> m4_391  [key=0, style=solid];
m4_390 -> m4_393  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_390 -> m4_394  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_390 -> m4_396  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_390 -> m4_400  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_390 -> m4_402  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_390 -> m4_392  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_390 -> m4_395  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_390 -> m4_399  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_390 -> m4_401  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_390 -> m4_303  [key=2, style=dotted];
m4_390 -> m4_397  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_397 -> m4_398  [key=0, style=solid];
m4_397 -> m4_295  [key=2, style=dotted];
m4_389 -> m4_398  [key=1, style=dashed, color=darkseagreen4, label=helloWorldData];
m4_389 -> m4_390  [key=0, style=solid];
m4_389 -> m4_302  [key=2, style=dotted];
m4_388 -> m4_389  [key=0, style=solid];
m4_403 -> m4_387  [key=0, style=bold, color=blue];
m4_434 -> m4_435  [key=0, style=solid];
m4_469 -> m4_44  [key=2, style=dotted];
m4_469 -> m4_470  [key=0, style=solid];
m4_469 -> m4_482  [key=2, style=dotted];
m4_464 -> m4_13  [key=2, style=dotted];
m4_464 -> m4_24  [key=2, style=dotted];
m4_464 -> m4_465  [key=0, style=solid];
m4_464 -> m4_484  [key=2, style=dotted];
m4_464 -> m4_468  [key=1, style=dashed, color=darkseagreen4, label=jsonObject];
m4_462 -> m4_469  [key=1, style=dashed, color=darkseagreen4, label=json];
m4_462 -> m4_464  [key=1, style=dashed, color=darkseagreen4, label=json];
m4_462 -> m4_463  [key=0, style=solid];
m4_462 -> m4_482  [key=2, style=dotted];
m4_468 -> m4_469  [key=0, style=solid];
m4_468 -> m4_485  [key=2, style=dotted];
m4_465 -> m4_469  [key=1, style=dashed, color=darkseagreen4, label=sb];
m4_465 -> m4_466  [key=0, style=solid];
m4_465 -> m4_471  [key=2, style=dotted];
m4_463 -> m4_464  [key=0, style=solid];
m4_463 -> m4_468  [key=1, style=dashed, color=darkseagreen4, label=serializer];
m4_463 -> m4_483  [key=2, style=dotted];
m4_435 -> m4_462  [key=1, style=dashed, color=darkseagreen4, label=sb];
m4_435 -> m4_436  [key=0, style=solid];
m4_435 -> m4_471  [key=2, style=dotted];
m4_461 -> m4_462  [key=0, style=solid];
m4_461 -> m4_222  [key=2, style=dotted];
m4_467 -> m4_468  [key=0, style=solid];
m4_467 -> m4_219  [key=2, style=dotted];
m4_466 -> m4_467  [key=0, style=solid];
m4_466 -> m4_472  [key=2, style=dotted];
m4_436 -> m4_437  [key=0, style=solid];
m4_436 -> m4_472  [key=2, style=dotted];
m4_437 -> m4_461  [key=1, style=dashed, color=darkseagreen4, label=jsonWriter];
m4_437 -> m4_438  [key=0, style=solid];
m4_437 -> m4_219  [key=2, style=dotted];
m4_437 -> m4_439  [key=1, style=dashed, color=darkseagreen4, label=jsonWriter];
m4_437 -> m4_440  [key=1, style=dashed, color=darkseagreen4, label=jsonWriter];
m4_437 -> m4_441  [key=1, style=dashed, color=darkseagreen4, label=jsonWriter];
m4_437 -> m4_442  [key=1, style=dashed, color=darkseagreen4, label=jsonWriter];
m4_437 -> m4_443  [key=1, style=dashed, color=darkseagreen4, label=jsonWriter];
m4_437 -> m4_444  [key=1, style=dashed, color=darkseagreen4, label=jsonWriter];
m4_437 -> m4_445  [key=1, style=dashed, color=darkseagreen4, label=jsonWriter];
m4_437 -> m4_446  [key=1, style=dashed, color=darkseagreen4, label=jsonWriter];
m4_437 -> m4_449  [key=1, style=dashed, color=darkseagreen4, label=jsonWriter];
m4_437 -> m4_451  [key=1, style=dashed, color=darkseagreen4, label=jsonWriter];
m4_437 -> m4_452  [key=1, style=dashed, color=darkseagreen4, label=jsonWriter];
m4_437 -> m4_453  [key=1, style=dashed, color=darkseagreen4, label=jsonWriter];
m4_437 -> m4_454  [key=1, style=dashed, color=darkseagreen4, label=jsonWriter];
m4_437 -> m4_455  [key=1, style=dashed, color=darkseagreen4, label=jsonWriter];
m4_437 -> m4_456  [key=1, style=dashed, color=darkseagreen4, label=jsonWriter];
m4_437 -> m4_457  [key=1, style=dashed, color=darkseagreen4, label=jsonWriter];
m4_437 -> m4_458  [key=1, style=dashed, color=darkseagreen4, label=jsonWriter];
m4_437 -> m4_459  [key=1, style=dashed, color=darkseagreen4, label=jsonWriter];
m4_437 -> m4_460  [key=1, style=dashed, color=darkseagreen4, label=jsonWriter];
m4_460 -> m4_461  [key=0, style=solid];
m4_460 -> m4_481  [key=2, style=dotted];
m4_438 -> m4_439  [key=0, style=solid];
m4_438 -> m4_473  [key=2, style=dotted];
m4_439 -> m4_440  [key=0, style=solid];
m4_439 -> m4_474  [key=2, style=dotted];
m4_440 -> m4_441  [key=0, style=solid];
m4_440 -> m4_475  [key=2, style=dotted];
m4_441 -> m4_442  [key=0, style=solid];
m4_441 -> m4_476  [key=2, style=dotted];
m4_442 -> m4_443  [key=0, style=solid];
m4_442 -> m4_477  [key=2, style=dotted];
m4_443 -> m4_444  [key=0, style=solid];
m4_443 -> m4_476  [key=2, style=dotted];
m4_444 -> m4_445  [key=0, style=solid];
m4_444 -> m4_478  [key=2, style=dotted];
m4_445 -> m4_446  [key=0, style=solid];
m4_445 -> m4_476  [key=2, style=dotted];
m4_446 -> m4_447  [key=0, style=solid];
m4_446 -> m4_473  [key=2, style=dotted];
m4_449 -> m4_450  [key=0, style=solid];
m4_449 -> m4_477  [key=2, style=dotted];
m4_451 -> m4_452  [key=0, style=solid];
m4_451 -> m4_475  [key=2, style=dotted];
m4_452 -> m4_453  [key=0, style=solid];
m4_452 -> m4_476  [key=2, style=dotted];
m4_453 -> m4_454  [key=0, style=solid];
m4_453 -> m4_479  [key=2, style=dotted];
m4_454 -> m4_455  [key=0, style=solid];
m4_454 -> m4_480  [key=2, style=dotted];
m4_455 -> m4_456  [key=0, style=solid];
m4_455 -> m4_477  [key=2, style=dotted];
m4_456 -> m4_222  [key=2, style=dotted];
m4_456 -> m4_457  [key=0, style=solid];
m4_457 -> m4_458  [key=0, style=solid];
m4_457 -> m4_480  [key=2, style=dotted];
m4_458 -> m4_459  [key=0, style=solid];
m4_458 -> m4_478  [key=2, style=dotted];
m4_459 -> m4_460  [key=0, style=solid];
m4_459 -> m4_481  [key=2, style=dotted];
m4_447 -> m4_449  [key=1, style=dashed, color=darkseagreen4, label=i];
m4_447 -> m4_448  [key=0, style=solid];
m4_447 -> m4_450  [key=1, style=dashed, color=darkseagreen4, label=i];
m4_448 -> m4_449  [key=0, style=solid];
m4_448 -> m4_451  [key=0, style=solid];
m4_450 -> m4_448  [key=0, style=solid];
m4_450 -> m4_450  [key=1, style=dashed, color=darkseagreen4, label=i];
m4_470 -> m4_434  [key=0, style=bold, color=blue];
m4_865 -> m4_866  [key=0, style=solid];
m4_873 -> m4_15  [key=2, style=dotted];
m4_873 -> m4_50  [key=2, style=dotted];
m4_873 -> m4_874  [key=0, style=solid];
m4_874 -> m4_44  [key=2, style=dotted];
m4_874 -> m4_875  [key=0, style=solid];
m4_874 -> m4_876  [key=2, style=dotted];
m4_867 -> m4_13  [key=2, style=dotted];
m4_867 -> m4_24  [key=2, style=dotted];
m4_867 -> m4_873  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_867 -> m4_874  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_867 -> m4_868  [key=0, style=solid];
m4_867 -> m4_871  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_871 -> m4_50  [key=2, style=dotted];
m4_871 -> m4_872  [key=0, style=solid];
m4_868 -> m4_67  [key=2, style=dotted];
m4_868 -> m4_869  [key=0, style=solid];
m4_870 -> m4_873  [key=0, style=solid];
m4_870 -> m4_871  [key=0, style=solid];
m4_866 -> m4_867  [key=0, style=solid];
m4_872 -> m4_870  [key=0, style=solid];
m4_872 -> m4_872  [key=1, style=dashed, color=darkseagreen4, label=i];
m4_869 -> m4_870  [key=0, style=solid];
m4_869 -> m4_872  [key=1, style=dashed, color=darkseagreen4, label=i];
m4_875 -> m4_865  [key=0, style=bold, color=blue];
m4_633 -> m4_634  [key=0, style=solid];
m4_634 -> m4_13  [key=2, style=dotted];
m4_634 -> m4_24  [key=2, style=dotted];
m4_634 -> m4_635  [key=0, style=solid];
m4_635 -> m4_636  [key=0, style=solid];
m4_635 -> m4_637  [key=2, style=dotted];
m4_636 -> m4_633  [key=0, style=bold, color=blue];
m4_520 -> m4_521  [key=0, style=solid];
m4_525 -> m4_44  [key=2, style=dotted];
m4_525 -> m4_526  [key=0, style=solid];
m4_527 -> m4_44  [key=2, style=dotted];
m4_527 -> m4_528  [key=0, style=solid];
m4_529 -> m4_44  [key=2, style=dotted];
m4_529 -> m4_530  [key=0, style=solid];
m4_529 -> m4_533  [key=2, style=dotted];
m4_529 -> m4_534  [key=2, style=dotted];
m4_531 -> m4_44  [key=2, style=dotted];
m4_531 -> m4_532  [key=0, style=solid];
m4_522 -> m4_13  [key=2, style=dotted];
m4_522 -> m4_24  [key=2, style=dotted];
m4_522 -> m4_525  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_522 -> m4_527  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_522 -> m4_529  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_522 -> m4_531  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_522 -> m4_523  [key=0, style=solid];
m4_522 -> m4_524  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_522 -> m4_526  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_522 -> m4_528  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_522 -> m4_530  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_524 -> m4_50  [key=2, style=dotted];
m4_524 -> m4_525  [key=0, style=solid];
m4_526 -> m4_50  [key=2, style=dotted];
m4_526 -> m4_527  [key=0, style=solid];
m4_528 -> m4_50  [key=2, style=dotted];
m4_528 -> m4_529  [key=0, style=solid];
m4_530 -> m4_50  [key=2, style=dotted];
m4_530 -> m4_531  [key=0, style=solid];
m4_523 -> m4_67  [key=2, style=dotted];
m4_523 -> m4_524  [key=0, style=solid];
m4_521 -> m4_522  [key=0, style=solid];
m4_532 -> m4_520  [key=0, style=bold, color=blue];
m4_663 -> m4_664  [key=0, style=solid];
m4_666 -> m4_44  [key=2, style=dotted];
m4_666 -> m4_667  [key=0, style=solid];
m4_667 -> m4_44  [key=2, style=dotted];
m4_667 -> m4_668  [key=0, style=solid];
m4_668 -> m4_44  [key=2, style=dotted];
m4_668 -> m4_669  [key=0, style=solid];
m4_664 -> m4_13  [key=2, style=dotted];
m4_664 -> m4_24  [key=2, style=dotted];
m4_664 -> m4_665  [key=0, style=solid];
m4_665 -> m4_666  [key=0, style=solid];
m4_665 -> m4_667  [key=1, style=dashed, color=darkseagreen4, label=data];
m4_665 -> m4_668  [key=1, style=dashed, color=darkseagreen4, label=data];
m4_665 -> m4_607  [key=2, style=dotted];
m4_669 -> m4_663  [key=0, style=bold, color=blue];
m4_659 -> m4_660  [key=0, style=solid];
m4_660 -> m4_13  [key=2, style=dotted];
m4_660 -> m4_24  [key=2, style=dotted];
m4_660 -> m4_661  [key=0, style=solid];
m4_661 -> m4_662  [key=0, style=solid];
m4_661 -> m4_650  [key=2, style=dotted];
m4_662 -> m4_659  [key=0, style=bold, color=blue];
m4_486 -> m4_487  [key=0, style=solid];
m4_490 -> m4_25  [key=2, style=dotted];
m4_490 -> m4_491  [key=0, style=solid];
m4_492 -> m4_25  [key=2, style=dotted];
m4_492 -> m4_493  [key=0, style=solid];
m4_495 -> m4_25  [key=2, style=dotted];
m4_495 -> m4_496  [key=0, style=solid];
m4_498 -> m4_25  [key=2, style=dotted];
m4_498 -> m4_499  [key=0, style=solid];
m4_501 -> m4_25  [key=2, style=dotted];
m4_501 -> m4_502  [key=0, style=solid];
m4_491 -> m4_44  [key=2, style=dotted];
m4_491 -> m4_492  [key=0, style=solid];
m4_493 -> m4_44  [key=2, style=dotted];
m4_493 -> m4_494  [key=0, style=solid];
m4_494 -> m4_44  [key=2, style=dotted];
m4_494 -> m4_495  [key=0, style=solid];
m4_496 -> m4_44  [key=2, style=dotted];
m4_496 -> m4_497  [key=0, style=solid];
m4_497 -> m4_44  [key=2, style=dotted];
m4_497 -> m4_498  [key=0, style=solid];
m4_499 -> m4_44  [key=2, style=dotted];
m4_499 -> m4_500  [key=0, style=solid];
m4_500 -> m4_44  [key=2, style=dotted];
m4_500 -> m4_501  [key=0, style=solid];
m4_502 -> m4_44  [key=2, style=dotted];
m4_502 -> m4_503  [key=0, style=solid];
m4_489 -> m4_13  [key=2, style=dotted];
m4_489 -> m4_490  [key=0, style=solid];
m4_489 -> m4_492  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_489 -> m4_495  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_489 -> m4_498  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_489 -> m4_501  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_489 -> m4_491  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_489 -> m4_493  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_489 -> m4_494  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_489 -> m4_496  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_489 -> m4_497  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_489 -> m4_499  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_489 -> m4_500  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_489 -> m4_502  [key=1, style=dashed, color=darkseagreen4, label=jsonReader];
m4_488 -> m4_24  [key=2, style=dotted];
m4_488 -> m4_489  [key=0, style=solid];
m4_487 -> m4_488  [key=0, style=solid];
m4_503 -> m4_486  [key=0, style=bold, color=blue];
m4_314 -> m4_315  [key=0, style=solid];
m4_322 -> m4_15  [key=2, style=dotted];
m4_322 -> m4_50  [key=2, style=dotted];
m4_322 -> m4_323  [key=0, style=solid];
m4_324 -> m4_15  [key=2, style=dotted];
m4_324 -> m4_50  [key=2, style=dotted];
m4_324 -> m4_325  [key=0, style=solid];
m4_327 -> m4_15  [key=2, style=dotted];
m4_327 -> m4_50  [key=2, style=dotted];
m4_327 -> m4_328  [key=0, style=solid];
m4_329 -> m4_15  [key=2, style=dotted];
m4_329 -> m4_50  [key=2, style=dotted];
m4_329 -> m4_330  [key=0, style=solid];
m4_333 -> m4_15  [key=2, style=dotted];
m4_333 -> m4_50  [key=2, style=dotted];
m4_333 -> m4_334  [key=0, style=solid];
m4_336 -> m4_15  [key=2, style=dotted];
m4_336 -> m4_50  [key=2, style=dotted];
m4_336 -> m4_337  [key=0, style=solid];
m4_339 -> m4_15  [key=2, style=dotted];
m4_339 -> m4_50  [key=2, style=dotted];
m4_339 -> m4_340  [key=0, style=solid];
m4_342 -> m4_15  [key=2, style=dotted];
m4_342 -> m4_50  [key=2, style=dotted];
m4_342 -> m4_343  [key=0, style=solid];
m4_344 -> m4_15  [key=2, style=dotted];
m4_344 -> m4_50  [key=2, style=dotted];
m4_344 -> m4_345  [key=0, style=solid];
m4_346 -> m4_15  [key=2, style=dotted];
m4_346 -> m4_50  [key=2, style=dotted];
m4_346 -> m4_347  [key=0, style=solid];
m4_348 -> m4_15  [key=2, style=dotted];
m4_348 -> m4_50  [key=2, style=dotted];
m4_348 -> m4_349  [key=0, style=solid];
m4_351 -> m4_15  [key=2, style=dotted];
m4_351 -> m4_50  [key=2, style=dotted];
m4_351 -> m4_352  [key=0, style=solid];
m4_353 -> m4_15  [key=2, style=dotted];
m4_353 -> m4_50  [key=2, style=dotted];
m4_353 -> m4_354  [key=0, style=solid];
m4_355 -> m4_15  [key=2, style=dotted];
m4_355 -> m4_50  [key=2, style=dotted];
m4_355 -> m4_356  [key=0, style=solid];
m4_326 -> m4_44  [key=2, style=dotted];
m4_326 -> m4_327  [key=0, style=solid];
m4_341 -> m4_44  [key=2, style=dotted];
m4_341 -> m4_342  [key=0, style=solid];
m4_323 -> m4_44  [key=2, style=dotted];
m4_323 -> m4_324  [key=0, style=solid];
m4_325 -> m4_44  [key=2, style=dotted];
m4_325 -> m4_326  [key=0, style=solid];
m4_328 -> m4_44  [key=2, style=dotted];
m4_328 -> m4_329  [key=0, style=solid];
m4_330 -> m4_44  [key=2, style=dotted];
m4_330 -> m4_331  [key=0, style=solid];
m4_331 -> m4_44  [key=2, style=dotted];
m4_331 -> m4_332  [key=0, style=solid];
m4_332 -> m4_44  [key=2, style=dotted];
m4_332 -> m4_333  [key=0, style=solid];
m4_334 -> m4_44  [key=2, style=dotted];
m4_334 -> m4_335  [key=0, style=solid];
m4_335 -> m4_44  [key=2, style=dotted];
m4_335 -> m4_336  [key=0, style=solid];
m4_337 -> m4_44  [key=2, style=dotted];
m4_337 -> m4_338  [key=0, style=solid];
m4_338 -> m4_44  [key=2, style=dotted];
m4_338 -> m4_339  [key=0, style=solid];
m4_340 -> m4_44  [key=2, style=dotted];
m4_340 -> m4_341  [key=0, style=solid];
m4_343 -> m4_44  [key=2, style=dotted];
m4_343 -> m4_344  [key=0, style=solid];
m4_345 -> m4_44  [key=2, style=dotted];
m4_345 -> m4_346  [key=0, style=solid];
m4_347 -> m4_44  [key=2, style=dotted];
m4_347 -> m4_348  [key=0, style=solid];
m4_349 -> m4_44  [key=2, style=dotted];
m4_349 -> m4_350  [key=0, style=solid];
m4_350 -> m4_44  [key=2, style=dotted];
m4_350 -> m4_351  [key=0, style=solid];
m4_352 -> m4_44  [key=2, style=dotted];
m4_352 -> m4_353  [key=0, style=solid];
m4_354 -> m4_44  [key=2, style=dotted];
m4_354 -> m4_355  [key=0, style=solid];
m4_356 -> m4_44  [key=2, style=dotted];
m4_356 -> m4_357  [key=0, style=solid];
m4_321 -> m4_13  [key=2, style=dotted];
m4_321 -> m4_24  [key=2, style=dotted];
m4_321 -> m4_322  [key=0, style=solid];
m4_321 -> m4_324  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_321 -> m4_327  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_321 -> m4_329  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_321 -> m4_333  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_321 -> m4_336  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_321 -> m4_339  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_321 -> m4_342  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_321 -> m4_344  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_321 -> m4_346  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_321 -> m4_348  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_321 -> m4_351  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_321 -> m4_353  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_321 -> m4_355  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_321 -> m4_326  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_321 -> m4_341  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_321 -> m4_323  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_321 -> m4_325  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_321 -> m4_328  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_321 -> m4_330  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_321 -> m4_331  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_321 -> m4_332  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_321 -> m4_334  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_321 -> m4_335  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_321 -> m4_337  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_321 -> m4_338  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_321 -> m4_340  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_321 -> m4_343  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_321 -> m4_345  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_321 -> m4_347  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_321 -> m4_349  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_321 -> m4_350  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_321 -> m4_352  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_321 -> m4_354  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_321 -> m4_356  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_318 -> m4_24  [key=2, style=dotted];
m4_318 -> m4_319  [key=0, style=solid];
m4_315 -> m4_326  [key=1, style=dashed, color=darkseagreen4, label=newLinesText];
m4_315 -> m4_341  [key=1, style=dashed, color=darkseagreen4, label=newLinesText];
m4_315 -> m4_318  [key=1, style=dashed, color=darkseagreen4, label=newLinesText];
m4_315 -> m4_316  [key=0, style=solid];
m4_316 -> m4_321  [key=1, style=dashed, color=darkseagreen4, label=json];
m4_316 -> m4_317  [key=0, style=solid];
m4_319 -> m4_321  [key=0, style=solid];
m4_319 -> m4_320  [key=0, style=solid];
m4_319 -> m4_358  [key=2, style=dotted];
m4_317 -> m4_318  [key=0, style=solid];
m4_317 -> m4_320  [key=1, style=dashed, color=darkseagreen4, label=count];
m4_320 -> m4_319  [key=0, style=solid];
m4_320 -> m4_320  [key=1, style=dashed, color=darkseagreen4, label=count];
m4_357 -> m4_314  [key=0, style=bold, color=blue];
m4_752 -> m4_753  [key=0, style=solid];
m4_755 -> m4_15  [key=2, style=dotted];
m4_755 -> m4_50  [key=2, style=dotted];
m4_755 -> m4_756  [key=0, style=solid];
m4_757 -> m4_15  [key=2, style=dotted];
m4_757 -> m4_50  [key=2, style=dotted];
m4_757 -> m4_758  [key=0, style=solid];
m4_763 -> m4_15  [key=2, style=dotted];
m4_763 -> m4_50  [key=2, style=dotted];
m4_763 -> m4_764  [key=0, style=solid];
m4_756 -> m4_44  [key=2, style=dotted];
m4_756 -> m4_757  [key=0, style=solid];
m4_758 -> m4_44  [key=2, style=dotted];
m4_758 -> m4_759  [key=0, style=solid];
m4_760 -> m4_44  [key=2, style=dotted];
m4_760 -> m4_761  [key=0, style=solid];
m4_761 -> m4_44  [key=2, style=dotted];
m4_761 -> m4_762  [key=0, style=solid];
m4_762 -> m4_44  [key=2, style=dotted];
m4_762 -> m4_763  [key=0, style=solid];
m4_762 -> m4_721  [key=2, style=dotted];
m4_762 -> m4_722  [key=2, style=dotted];
m4_762 -> m4_723  [key=2, style=dotted];
m4_762 -> m4_766  [key=2, style=dotted];
m4_762 -> m4_767  [key=2, style=dotted];
m4_764 -> m4_44  [key=2, style=dotted];
m4_764 -> m4_765  [key=0, style=solid];
m4_754 -> m4_13  [key=2, style=dotted];
m4_754 -> m4_24  [key=2, style=dotted];
m4_754 -> m4_755  [key=0, style=solid];
m4_754 -> m4_757  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_754 -> m4_763  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_754 -> m4_756  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_754 -> m4_758  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_754 -> m4_760  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_754 -> m4_761  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_754 -> m4_762  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_754 -> m4_764  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_754 -> m4_759  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_759 -> m4_760  [key=0, style=solid];
m4_759 -> m4_650  [key=2, style=dotted];
m4_753 -> m4_754  [key=0, style=solid];
m4_765 -> m4_752  [key=0, style=bold, color=blue];
m4_646 -> m4_647  [key=0, style=solid];
m4_647 -> m4_13  [key=2, style=dotted];
m4_647 -> m4_24  [key=2, style=dotted];
m4_647 -> m4_648  [key=0, style=solid];
m4_648 -> m4_649  [key=0, style=solid];
m4_648 -> m4_650  [key=2, style=dotted];
m4_649 -> m4_646  [key=0, style=bold, color=blue];
m4_926 -> m4_927  [key=0, style=solid];
m4_929 -> m4_15  [key=2, style=dotted];
m4_929 -> m4_50  [key=2, style=dotted];
m4_929 -> m4_930  [key=0, style=solid];
m4_930 -> m4_15  [key=2, style=dotted];
m4_930 -> m4_50  [key=2, style=dotted];
m4_930 -> m4_931  [key=0, style=solid];
m4_928 -> m4_13  [key=2, style=dotted];
m4_928 -> m4_24  [key=2, style=dotted];
m4_928 -> m4_929  [key=0, style=solid];
m4_928 -> m4_930  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_928 -> m4_931  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_931 -> m4_50  [key=2, style=dotted];
m4_931 -> m4_932  [key=0, style=solid];
m4_931 -> m4_17  [key=2, style=dotted];
m4_927 -> m4_928  [key=0, style=solid];
m4_932 -> m4_926  [key=0, style=bold, color=blue];
m4_724 -> m4_725  [key=0, style=solid];
m4_727 -> m4_15  [key=2, style=dotted];
m4_727 -> m4_50  [key=2, style=dotted];
m4_727 -> m4_728  [key=0, style=solid];
m4_729 -> m4_15  [key=2, style=dotted];
m4_729 -> m4_50  [key=2, style=dotted];
m4_729 -> m4_730  [key=0, style=solid];
m4_735 -> m4_15  [key=2, style=dotted];
m4_735 -> m4_50  [key=2, style=dotted];
m4_735 -> m4_736  [key=0, style=solid];
m4_728 -> m4_44  [key=2, style=dotted];
m4_728 -> m4_729  [key=0, style=solid];
m4_730 -> m4_44  [key=2, style=dotted];
m4_730 -> m4_731  [key=0, style=solid];
m4_732 -> m4_44  [key=2, style=dotted];
m4_732 -> m4_733  [key=0, style=solid];
m4_733 -> m4_44  [key=2, style=dotted];
m4_733 -> m4_734  [key=0, style=solid];
m4_734 -> m4_44  [key=2, style=dotted];
m4_734 -> m4_735  [key=0, style=solid];
m4_734 -> m4_721  [key=2, style=dotted];
m4_734 -> m4_722  [key=2, style=dotted];
m4_734 -> m4_723  [key=2, style=dotted];
m4_736 -> m4_44  [key=2, style=dotted];
m4_736 -> m4_737  [key=0, style=solid];
m4_726 -> m4_13  [key=2, style=dotted];
m4_726 -> m4_24  [key=2, style=dotted];
m4_726 -> m4_727  [key=0, style=solid];
m4_726 -> m4_729  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_726 -> m4_735  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_726 -> m4_728  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_726 -> m4_730  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_726 -> m4_732  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_726 -> m4_733  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_726 -> m4_734  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_726 -> m4_736  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_726 -> m4_731  [key=1, style=dashed, color=darkseagreen4, label=reader];
m4_731 -> m4_732  [key=0, style=solid];
m4_731 -> m4_650  [key=2, style=dotted];
m4_725 -> m4_726  [key=0, style=solid];
m4_737 -> m4_724  [key=0, style=bold, color=blue];
m5_9 -> m5_10  [key=0, style=solid];
m5_9 -> m5_2  [key=3, color=darkorchid, style=bold, label="Parameter variable string s1"];
m5_9 -> m5_17  [key=0, style=solid];
m5_10 -> m5_11  [key=0, style=solid];
m5_10 -> m5_13  [key=0, style=solid, color=green];
m5_10 -> m5_2  [key=3, color=darkorchid, style=bold, label="Parameter variable string path"];
m5_11 -> m5_9  [key=0, style=bold, color=blue];
m5_8 -> m5_6  [key=0, style=bold, color=blue];
m5_6 -> m5_7  [key=0, style=solid];
m5_6 -> m5_0  [key=0, style=bold, color=blue];
m5_7 -> m5_8  [key=0, style=solid];
m5_12 -> m5_13  [key=0, style=solid];
m5_13 -> m5_14  [key=0, style=solid, color=green];
m5_13 -> m5_6  [key=2, style=dotted];
m5_13 -> m5_15  [key=2, style=dotted, color=green];
m5_13 -> m5_16  [key=2, style=dotted, color=green];
m5_14 -> m5_15  [key=0, style=solid];
m5_14 -> m5_10  [key=0, style=bold, color=blue];
m5_15 -> m5_12  [key=0, style=bold, color=blue];
m5_0 -> m5_1  [key=0, style=solid];
m5_0 -> m5_2  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m5_0 -> m5_3  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m5_1 -> m5_2  [key=0, style=solid];
m5_1 -> m5_5  [key=2, style=dotted];
m5_1 -> m5_7  [key=2, style=dotted];
m5_2 -> m5_3  [key=0, style=solid];
m5_2 -> m5_5  [key=2, style=dotted];
m5_2 -> m5_8  [key=2, style=dotted];
m5_2 -> m5_9  [key=2, style=dotted];
m5_3 -> m5_4  [key=0, style=solid];
m5_3 -> m5_10  [key=2, style=dotted];
m5_3 -> m5_5  [key=1, style=dashed, color=darkseagreen4, label=file];
m5_4 -> m5_0  [key=0, style=bold, color=blue];
m5_4 -> m5_5  [key=0, style=solid];
m5_4 -> m5_11  [key=2, style=dotted];
m5_5 -> m5_6  [key=0, style=solid];
m5_5 -> m5_12  [key=2, style=dotted];
m5_18 -> m5_19  [key=0, style=solid];
m5_18 -> m5_20  [key=1, style=dashed, color=darkseagreen4, label=object];
m5_19 -> m5_20  [key=0, style=solid];
m5_19 -> m5_22  [key=2, style=dotted];
m5_20 -> m5_21  [key=0, style=solid];
m5_20 -> m5_6  [key=2, style=dotted];
m5_21 -> m5_18  [key=0, style=bold, color=blue];
m5_16 -> m5_17  [key=0, style=solid];
m5_17 -> m5_9  [key=0, style=bold, color=blue];
m5_17 -> m5_16  [key=0, style=bold, color=blue];
m5_23 -> m5_24  [key=0, style=solid];
m5_24 -> m5_25  [key=0, style=solid];
m5_25 -> m5_23  [key=0, style=bold, color=blue];
m5_26 -> m5_3  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JPropertyDescriptor"];
m5_26 -> m5_13  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JPropertyDescriptor"];
m5_26 -> m5_20  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JPropertyDescriptor"];
m6_505 -> m6_506  [key=0, style=solid];
m6_506 -> m6_507  [key=0, style=solid];
m6_507 -> m6_505  [key=0, style=bold, color=blue];
m6_199 -> m6_200  [key=0, style=solid];
m6_199 -> m6_202  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m6_199 -> m6_204  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m6_199 -> m6_209  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m6_199 -> m6_213  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m6_200 -> m6_201  [key=0, style=solid];
m6_200 -> m6_13  [key=2, style=dotted];
m6_200 -> m6_14  [key=2, style=dotted];
m6_202 -> m6_203  [key=0, style=solid];
m6_202 -> m6_209  [key=0, style=solid];
m6_202 -> m6_133  [key=2, style=dotted];
m6_202 -> m6_205  [key=1, style=dashed, color=darkseagreen4, label=genericDictionaryType];
m6_204 -> m6_214  [key=0, style=solid];
m6_204 -> m6_196  [key=2, style=dotted];
m6_204 -> m6_156  [key=2, style=dotted];
m6_209 -> m6_210  [key=0, style=solid];
m6_209 -> m6_213  [key=0, style=solid];
m6_209 -> m6_198  [key=2, style=dotted];
m6_213 -> m6_214  [key=0, style=solid];
m6_213 -> m6_196  [key=2, style=dotted];
m6_213 -> m6_156  [key=2, style=dotted];
m6_201 -> m6_202  [key=0, style=solid];
m6_203 -> m6_204  [key=0, style=solid];
m6_203 -> m6_205  [key=0, style=solid];
m6_203 -> m6_154  [key=2, style=dotted];
m6_205 -> m6_206  [key=0, style=solid];
m6_205 -> m6_197  [key=2, style=dotted];
m6_205 -> m6_207  [key=1, style=dashed, color=darkseagreen4, label=dictionaryGenericArguments];
m6_206 -> m6_207  [key=0, style=solid];
m6_206 -> m6_214  [key=1, style=dashed, color=darkseagreen4, label="out System.Type"];
m6_207 -> m6_208  [key=0, style=solid];
m6_207 -> m6_214  [key=1, style=dashed, color=darkseagreen4, label="out System.Type"];
m6_208 -> m6_214  [key=0, style=solid];
m6_210 -> m6_211  [key=0, style=solid];
m6_210 -> m6_214  [key=1, style=dashed, color=darkseagreen4, label="out System.Type"];
m6_211 -> m6_212  [key=0, style=solid];
m6_211 -> m6_214  [key=1, style=dashed, color=darkseagreen4, label="out System.Type"];
m6_212 -> m6_214  [key=0, style=solid];
m6_214 -> m6_199  [key=0, style=bold, color=blue];
m6_182 -> m6_183  [key=0, style=solid];
m6_182 -> m6_185  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m6_182 -> m6_186  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m6_182 -> m6_187  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m6_182 -> m6_189  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m6_182 -> m6_191  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m6_182 -> m6_193  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m6_183 -> m6_184  [key=0, style=solid];
m6_183 -> m6_13  [key=2, style=dotted];
m6_183 -> m6_14  [key=2, style=dotted];
m6_185 -> m6_186  [key=0, style=solid];
m6_185 -> m6_187  [key=0, style=solid];
m6_186 -> m6_194  [key=0, style=solid];
m6_186 -> m6_195  [key=2, style=dotted];
m6_187 -> m6_188  [key=0, style=solid];
m6_187 -> m6_191  [key=0, style=solid];
m6_187 -> m6_133  [key=2, style=dotted];
m6_187 -> m6_190  [key=1, style=dashed, color=darkseagreen4, label=genericListType];
m6_189 -> m6_194  [key=0, style=solid];
m6_189 -> m6_196  [key=2, style=dotted];
m6_189 -> m6_156  [key=2, style=dotted];
m6_191 -> m6_192  [key=0, style=solid];
m6_191 -> m6_193  [key=0, style=solid];
m6_191 -> m6_198  [key=2, style=dotted];
m6_193 -> m6_194  [key=0, style=solid];
m6_193 -> m6_196  [key=2, style=dotted];
m6_193 -> m6_156  [key=2, style=dotted];
m6_184 -> m6_185  [key=0, style=solid];
m6_188 -> m6_189  [key=0, style=solid];
m6_188 -> m6_190  [key=0, style=solid];
m6_188 -> m6_154  [key=2, style=dotted];
m6_190 -> m6_194  [key=0, style=solid];
m6_190 -> m6_197  [key=2, style=dotted];
m6_192 -> m6_194  [key=0, style=solid];
m6_194 -> m6_182  [key=0, style=bold, color=blue];
m6_595 -> m6_596  [key=0, style=solid];
m6_595 -> m6_598  [key=1, style=dashed, color=darkseagreen4, label=object];
m6_596 -> m6_597  [key=0, style=solid];
m6_596 -> m6_598  [key=0, style=solid];
m6_598 -> m6_599  [key=0, style=solid];
m6_598 -> m6_600  [key=2, style=dotted];
m6_598 -> m6_608  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Utilities.TypeNameKey"];
m6_597 -> m6_599  [key=0, style=solid];
m6_599 -> m6_595  [key=0, style=bold, color=blue];
m6_242 -> m6_243  [key=0, style=solid];
m6_242 -> m6_244  [key=1, style=dashed, color=darkseagreen4, label=object];
m6_242 -> m6_245  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.MemberInfo"];
m6_242 -> m6_247  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.MemberInfo"];
m6_242 -> m6_249  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.MemberInfo"];
m6_242 -> m6_251  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.MemberInfo"];
m6_242 -> m6_252  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.MemberInfo"];
m6_243 -> m6_244  [key=0, style=solid];
m6_243 -> m6_13  [key=2, style=dotted];
m6_243 -> m6_14  [key=2, style=dotted];
m6_244 -> m6_245  [key=0, style=solid];
m6_244 -> m6_13  [key=2, style=dotted];
m6_244 -> m6_14  [key=2, style=dotted];
m6_245 -> m6_246  [key=0, style=solid];
m6_245 -> m6_248  [key=0, style=solid];
m6_245 -> m6_252  [key=0, style=solid];
m6_245 -> m6_228  [key=2, style=dotted];
m6_247 -> m6_253  [key=0, style=solid];
m6_247 -> m6_254  [key=2, style=dotted];
m6_249 -> m6_253  [key=0, style=solid];
m6_249 -> m6_255  [key=2, style=dotted];
m6_249 -> m6_250  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Type match"];
m6_249 -> m6_249  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Type match"];
m6_249 -> m6_263  [key=3, color=darkorchid, style=bold, label="method methodReturn bool AssignableToTypeName"];
m6_249 -> m6_265  [key=3, color=darkorchid, style=bold, label="Parameter variable string fullTypeName"];
m6_251 -> m6_253  [key=0, style=solid];
m6_251 -> m6_256  [key=2, style=dotted];
m6_251 -> m6_156  [key=2, style=dotted];
m6_252 -> m6_253  [key=0, style=solid];
m6_252 -> m6_229  [key=2, style=dotted];
m6_252 -> m6_257  [key=2, style=dotted];
m6_252 -> m6_13  [key=2, style=dotted];
m6_246 -> m6_247  [key=0, style=solid];
m6_248 -> m6_249  [key=0, style=solid];
m6_250 -> m6_251  [key=0, style=solid];
m6_250 -> m6_249  [key=3, color=darkorchid, style=bold, label="Local variable System.Type current"];
m6_250 -> m6_40  [key=3, color=darkorchid, style=bold, label="Local variable System.Type current"];
m6_253 -> m6_242  [key=0, style=bold, color=blue];
m6_3 -> m6_4  [key=0, style=solid];
m6_3 -> m6_5  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.PropertyInfo"];
m6_3 -> m6_8  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.PropertyInfo"];
m6_4 -> m6_5  [key=0, style=solid];
m6_4 -> m6_13  [key=2, style=dotted];
m6_4 -> m6_14  [key=2, style=dotted];
m6_5 -> m6_6  [key=0, style=solid];
m6_5 -> m6_15  [key=2, style=dotted];
m6_8 -> m6_9  [key=0, style=solid];
m6_8 -> m6_16  [key=2, style=dotted];
m6_6 -> m6_7  [key=0, style=solid];
m6_6 -> m6_8  [key=0, style=solid];
m6_7 -> m6_12  [key=0, style=solid];
m6_9 -> m6_10  [key=0, style=solid];
m6_9 -> m6_11  [key=0, style=solid];
m6_10 -> m6_12  [key=0, style=solid];
m6_11 -> m6_12  [key=0, style=solid];
m6_12 -> m6_3  [key=0, style=bold, color=blue];
m6_332 -> m6_467  [key=0, style=solid];
m6_332 -> m6_468  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m6_332 -> m6_469  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m6_467 -> m6_468  [key=0, style=solid];
m6_467 -> m6_13  [key=2, style=dotted];
m6_467 -> m6_14  [key=2, style=dotted];
m6_468 -> m6_469  [key=0, style=solid];
m6_468 -> m6_472  [key=2, style=dotted];
m6_468 -> m6_473  [key=2, style=dotted];
m6_468 -> m6_470  [key=1, style=dashed, color=darkseagreen4, label=fieldInfos];
m6_469 -> m6_470  [key=0, style=solid];
m6_469 -> m6_474  [key=2, style=dotted];
m6_470 -> m6_471  [key=0, style=solid];
m6_470 -> m6_382  [key=2, style=dotted];
m6_471 -> m6_332  [key=0, style=bold, color=blue];
m6_258 -> m6_259  [key=0, style=solid];
m6_258 -> m6_260  [key=1, style=dashed, color=darkseagreen4, label=object];
m6_258 -> m6_261  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.MemberInfo"];
m6_258 -> m6_263  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.MemberInfo"];
m6_258 -> m6_265  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.MemberInfo"];
m6_258 -> m6_266  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.MemberInfo"];
m6_259 -> m6_260  [key=0, style=solid];
m6_259 -> m6_13  [key=2, style=dotted];
m6_259 -> m6_14  [key=2, style=dotted];
m6_260 -> m6_261  [key=0, style=solid];
m6_260 -> m6_13  [key=2, style=dotted];
m6_260 -> m6_14  [key=2, style=dotted];
m6_261 -> m6_262  [key=0, style=solid];
m6_261 -> m6_264  [key=0, style=solid];
m6_261 -> m6_266  [key=0, style=solid];
m6_261 -> m6_228  [key=2, style=dotted];
m6_263 -> m6_267  [key=0, style=solid];
m6_263 -> m6_268  [key=2, style=dotted];
m6_265 -> m6_267  [key=0, style=solid];
m6_265 -> m6_269  [key=2, style=dotted];
m6_265 -> m6_249  [key=3, color=darkorchid, style=bold, label="method methodReturn bool AssignableToTypeName"];
m6_266 -> m6_267  [key=0, style=solid];
m6_266 -> m6_229  [key=2, style=dotted];
m6_266 -> m6_156  [key=2, style=dotted];
m6_266 -> m6_13  [key=2, style=dotted];
m6_262 -> m6_263  [key=0, style=solid];
m6_264 -> m6_265  [key=0, style=solid];
m6_267 -> m6_258  [key=0, style=bold, color=blue];
m6_538 -> m6_539  [key=0, style=solid];
m6_538 -> m6_545  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m6_539 -> m6_540  [key=0, style=solid];
m6_539 -> m6_542  [key=2, style=dotted];
m6_539 -> m6_543  [key=2, style=dotted];
m6_539 -> m6_544  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_540 -> m6_541  [key=0, style=solid];
m6_541 -> m6_538  [key=0, style=bold, color=blue];
m6_289 -> m6_290  [key=0, style=solid];
m6_289 -> m6_292  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.MemberInfo"];
m6_289 -> m6_295  [key=1, style=dashed, color=darkseagreen4, label=bool];
m6_289 -> m6_297  [key=1, style=dashed, color=darkseagreen4, label=bool];
m6_289 -> m6_303  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.MemberInfo"];
m6_289 -> m6_306  [key=1, style=dashed, color=darkseagreen4, label=bool];
m6_289 -> m6_308  [key=1, style=dashed, color=darkseagreen4, label=bool];
m6_290 -> m6_291  [key=0, style=solid];
m6_290 -> m6_302  [key=0, style=solid];
m6_290 -> m6_309  [key=0, style=solid];
m6_290 -> m6_228  [key=2, style=dotted];
m6_292 -> m6_293  [key=0, style=solid];
m6_292 -> m6_295  [key=1, style=dashed, color=darkseagreen4, label=fieldInfo];
m6_292 -> m6_299  [key=1, style=dashed, color=darkseagreen4, label=fieldInfo];
m6_295 -> m6_296  [key=0, style=solid];
m6_295 -> m6_297  [key=0, style=solid];
m6_297 -> m6_298  [key=0, style=solid];
m6_297 -> m6_299  [key=0, style=solid];
m6_303 -> m6_304  [key=0, style=solid];
m6_303 -> m6_308  [key=1, style=dashed, color=darkseagreen4, label=propertyInfo];
m6_306 -> m6_307  [key=0, style=solid];
m6_306 -> m6_308  [key=0, style=solid];
m6_308 -> m6_310  [key=0, style=solid];
m6_308 -> m6_311  [key=2, style=dotted];
m6_291 -> m6_292  [key=0, style=solid];
m6_302 -> m6_303  [key=0, style=solid];
m6_309 -> m6_310  [key=0, style=solid];
m6_293 -> m6_294  [key=0, style=solid];
m6_293 -> m6_295  [key=0, style=solid];
m6_299 -> m6_300  [key=0, style=solid];
m6_299 -> m6_301  [key=0, style=solid];
m6_294 -> m6_310  [key=0, style=solid];
m6_296 -> m6_310  [key=0, style=solid];
m6_298 -> m6_310  [key=0, style=solid];
m6_300 -> m6_310  [key=0, style=solid];
m6_301 -> m6_310  [key=0, style=solid];
m6_304 -> m6_305  [key=0, style=solid];
m6_304 -> m6_306  [key=0, style=solid];
m6_305 -> m6_310  [key=0, style=solid];
m6_307 -> m6_310  [key=0, style=solid];
m6_310 -> m6_289  [key=0, style=bold, color=blue];
m6_123 -> m6_124  [key=0, style=solid];
m6_123 -> m6_126  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m6_123 -> m6_127  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m6_124 -> m6_125  [key=0, style=solid];
m6_124 -> m6_126  [key=0, style=solid];
m6_124 -> m6_117  [key=2, style=dotted];
m6_126 -> m6_127  [key=0, style=solid];
m6_126 -> m6_118  [key=2, style=dotted];
m6_127 -> m6_128  [key=0, style=solid];
m6_125 -> m6_128  [key=0, style=solid];
m6_128 -> m6_123  [key=0, style=bold, color=blue];
m6_270 -> m6_271  [key=0, style=solid, color=green];
m6_270 -> m6_273  [key=1, style=dashed, color=green, label="System.Reflection.MemberInfo"];
m6_270 -> m6_274  [key=1, style=dashed, color=darkseagreen4, label=bool];
m6_270 -> m6_280  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.MemberInfo"];
m6_270 -> m6_283  [key=1, style=dashed, color=darkseagreen4, label=bool];
m6_270 -> m6_285  [key=1, style=dashed, color=darkseagreen4, label=bool];
m6_271 -> m6_272  [key=0, style=solid, color=green];
m6_271 -> m6_279  [key=0, style=solid, color=green];
m6_271 -> m6_286  [key=0, style=solid, color=green];
m6_271 -> m6_228  [key=2, style=dotted, color=green];
m6_273 -> m6_274  [key=0, style=solid, color=green];
m6_273 -> m6_276  [key=1, style=dashed, color=green, label=fieldInfo];
m6_274 -> m6_275  [key=0, style=solid];
m6_274 -> m6_276  [key=0, style=solid];
m6_280 -> m6_281  [key=0, style=solid];
m6_280 -> m6_285  [key=1, style=dashed, color=darkseagreen4, label=propertyInfo];
m6_283 -> m6_284  [key=0, style=solid];
m6_283 -> m6_285  [key=0, style=solid];
m6_285 -> m6_287  [key=0, style=solid];
m6_285 -> m6_288  [key=2, style=dotted];
m6_272 -> m6_273  [key=0, style=solid, color=green];
m6_279 -> m6_280  [key=0, style=solid];
m6_286 -> m6_287  [key=0, style=solid];
m6_276 -> m6_277  [key=0, style=solid];
m6_276 -> m6_278  [key=0, style=solid];
m6_275 -> m6_287  [key=0, style=solid];
m6_277 -> m6_287  [key=0, style=solid];
m6_278 -> m6_287  [key=0, style=solid];
m6_281 -> m6_282  [key=0, style=solid];
m6_281 -> m6_283  [key=0, style=solid];
m6_282 -> m6_287  [key=0, style=solid];
m6_284 -> m6_287  [key=0, style=solid];
m6_287 -> m6_270  [key=0, style=bold, color=blue];
m6_504 -> m6_508  [key=0, style=solid];
m6_504 -> m6_509  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.BindingFlags"];
m6_504 -> m6_512  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IList<System.Reflection.PropertyInfo>"];
m6_504 -> m6_514  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IList<System.Reflection.PropertyInfo>"];
m6_504 -> m6_515  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IList<System.Reflection.PropertyInfo>"];
m6_504 -> m6_517  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IList<System.Reflection.PropertyInfo>"];
m6_504 -> m6_519  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IList<System.Reflection.PropertyInfo>"];
m6_504 -> m6_521  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IList<System.Reflection.PropertyInfo>"];
m6_504 -> m6_522  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IList<System.Reflection.PropertyInfo>"];
m6_504 -> m6_524  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IList<System.Reflection.PropertyInfo>"];
m6_508 -> m6_509  [key=0, style=solid];
m6_508 -> m6_525  [key=0, style=solid];
m6_508 -> m6_181  [key=2, style=dotted];
m6_508 -> m6_508  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m6_509 -> m6_510  [key=0, style=solid];
m6_509 -> m6_508  [key=0, style=solid];
m6_509 -> m6_503  [key=2, style=dotted];
m6_512 -> m6_513  [key=0, style=solid];
m6_512 -> m6_526  [key=2, style=dotted];
m6_512 -> m6_528  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_512 -> m6_515  [key=1, style=dashed, color=darkseagreen4, label=index];
m6_512 -> m6_517  [key=1, style=dashed, color=darkseagreen4, label=index];
m6_514 -> m6_509  [key=0, style=solid];
m6_514 -> m6_341  [key=2, style=dotted];
m6_515 -> m6_516  [key=0, style=solid];
m6_517 -> m6_509  [key=0, style=solid];
m6_519 -> m6_520  [key=0, style=solid];
m6_519 -> m6_526  [key=2, style=dotted];
m6_519 -> m6_531  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_521 -> m6_509  [key=0, style=solid];
m6_521 -> m6_341  [key=2, style=dotted];
m6_522 -> m6_523  [key=0, style=solid];
m6_522 -> m6_526  [key=2, style=dotted];
m6_522 -> m6_534  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_524 -> m6_509  [key=0, style=solid];
m6_524 -> m6_341  [key=2, style=dotted];
m6_510 -> m6_511  [key=0, style=solid];
m6_510 -> m6_512  [key=1, style=dashed, color=darkseagreen4, label=subTypeProperty];
m6_510 -> m6_529  [key=1, style=dashed, color=darkseagreen4, label=subTypeProperty];
m6_510 -> m6_514  [key=1, style=dashed, color=darkseagreen4, label=subTypeProperty];
m6_510 -> m6_517  [key=1, style=dashed, color=darkseagreen4, label=subTypeProperty];
m6_510 -> m6_518  [key=1, style=dashed, color=darkseagreen4, label=subTypeProperty];
m6_510 -> m6_519  [key=1, style=dashed, color=darkseagreen4, label=subTypeProperty];
m6_510 -> m6_532  [key=1, style=dashed, color=darkseagreen4, label=subTypeProperty];
m6_510 -> m6_521  [key=1, style=dashed, color=darkseagreen4, label=subTypeProperty];
m6_510 -> m6_522  [key=1, style=dashed, color=darkseagreen4, label=subTypeProperty];
m6_510 -> m6_535  [key=1, style=dashed, color=darkseagreen4, label=subTypeProperty];
m6_510 -> m6_524  [key=1, style=dashed, color=darkseagreen4, label=subTypeProperty];
m6_511 -> m6_512  [key=0, style=solid];
m6_511 -> m6_518  [key=0, style=solid];
m6_511 -> m6_28  [key=2, style=dotted];
m6_518 -> m6_519  [key=0, style=solid];
m6_518 -> m6_522  [key=0, style=solid];
m6_518 -> m6_527  [key=2, style=dotted];
m6_513 -> m6_514  [key=0, style=solid];
m6_513 -> m6_515  [key=0, style=solid];
m6_516 -> m6_517  [key=0, style=solid];
m6_516 -> m6_509  [key=0, style=solid];
m6_516 -> m6_28  [key=2, style=dotted];
m6_520 -> m6_521  [key=0, style=solid];
m6_520 -> m6_509  [key=0, style=solid];
m6_523 -> m6_524  [key=0, style=solid];
m6_523 -> m6_509  [key=0, style=solid];
m6_525 -> m6_504  [key=0, style=bold, color=blue];
m6_450 -> m6_451  [key=0, style=solid];
m6_450 -> m6_452  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.MemberInfo"];
m6_450 -> m6_454  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.MemberInfo"];
m6_450 -> m6_456  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m6_450 -> m6_457  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m6_451 -> m6_452  [key=0, style=solid];
m6_451 -> m6_456  [key=1, style=dashed, color=darkseagreen4, label=bindingAttr];
m6_451 -> m6_457  [key=1, style=dashed, color=darkseagreen4, label=bindingAttr];
m6_452 -> m6_453  [key=0, style=solid];
m6_452 -> m6_457  [key=0, style=solid];
m6_452 -> m6_228  [key=2, style=dotted];
m6_454 -> m6_455  [key=0, style=solid];
m6_454 -> m6_456  [key=1, style=dashed, color=darkseagreen4, label=propertyInfo];
m6_456 -> m6_458  [key=0, style=solid];
m6_456 -> m6_461  [key=2, style=dotted];
m6_457 -> m6_458  [key=0, style=solid];
m6_457 -> m6_228  [key=2, style=dotted];
m6_457 -> m6_462  [key=2, style=dotted];
m6_457 -> m6_463  [key=2, style=dotted];
m6_453 -> m6_454  [key=0, style=solid];
m6_455 -> m6_456  [key=0, style=solid];
m6_455 -> m6_241  [key=2, style=dotted];
m6_455 -> m6_459  [key=2, style=dotted];
m6_455 -> m6_460  [key=2, style=dotted];
m6_455 -> m6_464  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_458 -> m6_450  [key=0, style=bold, color=blue];
m6_84 -> m6_85  [key=0, style=solid];
m6_84 -> m6_86  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m6_84 -> m6_88  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m6_85 -> m6_86  [key=0, style=solid];
m6_85 -> m6_13  [key=2, style=dotted];
m6_85 -> m6_14  [key=2, style=dotted];
m6_86 -> m6_87  [key=0, style=solid];
m6_86 -> m6_88  [key=0, style=solid];
m6_86 -> m6_90  [key=2, style=dotted];
m6_88 -> m6_89  [key=0, style=solid];
m6_88 -> m6_91  [key=2, style=dotted];
m6_87 -> m6_89  [key=0, style=solid];
m6_89 -> m6_84  [key=0, style=bold, color=blue];
m6_434 -> m6_588  [key=0, style=solid];
m6_434 -> m6_589  [key=1, style=dashed, color=darkseagreen4, label=string];
m6_588 -> m6_589  [key=0, style=solid];
m6_588 -> m6_606  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Utilities.TypeNameKey"];
m6_589 -> m6_590  [key=0, style=solid];
m6_589 -> m6_606  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Utilities.TypeNameKey"];
m6_590 -> m6_434  [key=0, style=bold, color=blue];
m6_113 -> m6_114  [key=0, style=solid];
m6_113 -> m6_115  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m6_114 -> m6_115  [key=0, style=solid];
m6_114 -> m6_13  [key=2, style=dotted];
m6_114 -> m6_14  [key=2, style=dotted];
m6_115 -> m6_116  [key=0, style=solid];
m6_115 -> m6_117  [key=2, style=dotted];
m6_115 -> m6_118  [key=2, style=dotted];
m6_116 -> m6_113  [key=0, style=bold, color=blue];
m6_162 -> m6_163  [key=0, style=solid];
m6_162 -> m6_164  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m6_162 -> m6_165  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m6_162 -> m6_166  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m6_162 -> m6_167  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m6_163 -> m6_164  [key=0, style=solid];
m6_163 -> m6_13  [key=2, style=dotted];
m6_163 -> m6_14  [key=2, style=dotted];
m6_164 -> m6_165  [key=0, style=solid];
m6_164 -> m6_13  [key=2, style=dotted];
m6_164 -> m6_14  [key=2, style=dotted];
m6_165 -> m6_166  [key=0, style=solid];
m6_165 -> m6_167  [key=0, style=solid];
m6_165 -> m6_169  [key=2, style=dotted];
m6_165 -> m6_154  [key=2, style=dotted];
m6_166 -> m6_168  [key=0, style=solid];
m6_166 -> m6_155  [key=2, style=dotted];
m6_166 -> m6_156  [key=2, style=dotted];
m6_167 -> m6_168  [key=0, style=solid];
m6_167 -> m6_170  [key=2, style=dotted];
m6_168 -> m6_162  [key=0, style=bold, color=blue];
m6_28 -> m6_29  [key=0, style=solid];
m6_28 -> m6_31  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.PropertyInfo"];
m6_29 -> m6_30  [key=0, style=solid];
m6_29 -> m6_31  [key=0, style=solid];
m6_29 -> m6_15  [key=2, style=dotted];
m6_31 -> m6_32  [key=0, style=solid];
m6_31 -> m6_33  [key=0, style=solid];
m6_31 -> m6_16  [key=2, style=dotted];
m6_30 -> m6_34  [key=0, style=solid];
m6_32 -> m6_34  [key=0, style=solid];
m6_33 -> m6_34  [key=0, style=solid];
m6_34 -> m6_28  [key=0, style=bold, color=blue];
m6_381 -> m6_384  [key=0, style=solid];
m6_381 -> m6_385  [key=1, style=dashed, color=darkseagreen4, label=object];
m6_381 -> m6_388  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m6_381 -> m6_393  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m6_381 -> m6_396  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m6_381 -> m6_399  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m6_381 -> m6_402  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m6_381 -> m6_403  [key=1, style=dashed, color=darkseagreen4, label=object];
m6_381 -> m6_404  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m6_384 -> m6_385  [key=0, style=solid];
m6_384 -> m6_13  [key=2, style=dotted];
m6_384 -> m6_14  [key=2, style=dotted];
m6_385 -> m6_386  [key=0, style=solid];
m6_385 -> m6_387  [key=1, style=dashed, color=darkseagreen4, label=provider];
m6_385 -> m6_391  [key=1, style=dashed, color=darkseagreen4, label=provider];
m6_385 -> m6_392  [key=1, style=dashed, color=darkseagreen4, label=provider];
m6_385 -> m6_394  [key=1, style=dashed, color=darkseagreen4, label=provider];
m6_385 -> m6_395  [key=1, style=dashed, color=darkseagreen4, label=provider];
m6_385 -> m6_397  [key=1, style=dashed, color=darkseagreen4, label=provider];
m6_385 -> m6_398  [key=1, style=dashed, color=darkseagreen4, label=provider];
m6_385 -> m6_400  [key=1, style=dashed, color=darkseagreen4, label=provider];
m6_385 -> m6_401  [key=1, style=dashed, color=darkseagreen4, label=provider];
m6_388 -> m6_389  [key=0, style=solid];
m6_388 -> m6_407  [key=2, style=dotted];
m6_388 -> m6_408  [key=2, style=dotted];
m6_393 -> m6_406  [key=0, style=solid];
m6_393 -> m6_409  [key=2, style=dotted];
m6_393 -> m6_410  [key=2, style=dotted];
m6_396 -> m6_406  [key=0, style=solid];
m6_396 -> m6_411  [key=2, style=dotted];
m6_396 -> m6_412  [key=2, style=dotted];
m6_399 -> m6_406  [key=0, style=solid];
m6_399 -> m6_413  [key=2, style=dotted];
m6_399 -> m6_414  [key=2, style=dotted];
m6_402 -> m6_406  [key=0, style=solid];
m6_402 -> m6_415  [key=2, style=dotted];
m6_402 -> m6_416  [key=2, style=dotted];
m6_403 -> m6_404  [key=0, style=solid];
m6_404 -> m6_405  [key=0, style=solid];
m6_404 -> m6_417  [key=2, style=dotted];
m6_404 -> m6_418  [key=2, style=dotted];
m6_386 -> m6_387  [key=0, style=solid];
m6_386 -> m6_391  [key=0, style=solid];
m6_387 -> m6_388  [key=0, style=solid];
m6_391 -> m6_392  [key=0, style=solid];
m6_391 -> m6_394  [key=0, style=solid];
m6_392 -> m6_393  [key=0, style=solid];
m6_394 -> m6_395  [key=0, style=solid];
m6_394 -> m6_397  [key=0, style=solid];
m6_395 -> m6_396  [key=0, style=solid];
m6_397 -> m6_398  [key=0, style=solid];
m6_397 -> m6_400  [key=0, style=solid];
m6_398 -> m6_399  [key=0, style=solid];
m6_400 -> m6_401  [key=0, style=solid];
m6_400 -> m6_403  [key=0, style=solid];
m6_401 -> m6_402  [key=0, style=solid];
m6_389 -> m6_390  [key=0, style=solid];
m6_389 -> m6_382  [key=2, style=dotted];
m6_389 -> m6_383  [key=2, style=dotted];
m6_390 -> m6_406  [key=0, style=solid];
m6_405 -> m6_406  [key=0, style=solid];
m6_406 -> m6_381  [key=0, style=bold, color=blue];
m6_133 -> m6_134  [key=0, style=solid];
m6_133 -> m6_135  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m6_133 -> m6_136  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m6_133 -> m6_137  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m6_133 -> m6_138  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m6_133 -> m6_139  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m6_133 -> m6_140  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m6_133 -> m6_141  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m6_133 -> m6_142  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m6_133 -> m6_144  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m6_133 -> m6_147  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m6_134 -> m6_135  [key=0, style=solid];
m6_134 -> m6_13  [key=2, style=dotted];
m6_134 -> m6_14  [key=2, style=dotted];
m6_135 -> m6_136  [key=0, style=solid];
m6_135 -> m6_13  [key=2, style=dotted];
m6_135 -> m6_14  [key=2, style=dotted];
m6_136 -> m6_137  [key=0, style=solid];
m6_136 -> m6_138  [key=0, style=solid];
m6_136 -> m6_153  [key=2, style=dotted];
m6_136 -> m6_154  [key=2, style=dotted];
m6_137 -> m6_152  [key=0, style=solid];
m6_137 -> m6_155  [key=2, style=dotted];
m6_137 -> m6_156  [key=2, style=dotted];
m6_138 -> m6_139  [key=0, style=solid];
m6_138 -> m6_144  [key=0, style=solid];
m6_138 -> m6_153  [key=2, style=dotted];
m6_139 -> m6_140  [key=0, style=solid];
m6_139 -> m6_144  [key=0, style=solid];
m6_139 -> m6_117  [key=2, style=dotted];
m6_140 -> m6_141  [key=0, style=solid];
m6_140 -> m6_118  [key=2, style=dotted];
m6_141 -> m6_142  [key=0, style=solid];
m6_141 -> m6_144  [key=0, style=solid];
m6_142 -> m6_143  [key=0, style=solid];
m6_144 -> m6_145  [key=0, style=solid];
m6_144 -> m6_150  [key=0, style=solid];
m6_144 -> m6_157  [key=2, style=dotted];
m6_144 -> m6_146  [key=1, style=dashed, color=darkseagreen4, label=i];
m6_144 -> m6_148  [key=1, style=dashed, color=darkseagreen4, label=i];
m6_147 -> m6_148  [key=0, style=solid];
m6_147 -> m6_144  [key=0, style=solid];
m6_143 -> m6_152  [key=0, style=solid];
m6_145 -> m6_146  [key=0, style=solid];
m6_145 -> m6_144  [key=0, style=solid];
m6_145 -> m6_117  [key=2, style=dotted];
m6_150 -> m6_151  [key=0, style=solid];
m6_150 -> m6_152  [key=1, style=dashed, color=darkseagreen4, label="out System.Type"];
m6_146 -> m6_147  [key=0, style=solid];
m6_146 -> m6_118  [key=2, style=dotted];
m6_148 -> m6_149  [key=0, style=solid];
m6_149 -> m6_152  [key=0, style=solid];
m6_151 -> m6_152  [key=0, style=solid];
m6_152 -> m6_133  [key=0, style=bold, color=blue];
m6_129 -> m6_130  [key=0, style=solid];
m6_129 -> m6_131  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m6_130 -> m6_131  [key=0, style=solid];
m6_131 -> m6_132  [key=0, style=solid];
m6_131 -> m6_133  [key=2, style=dotted];
m6_132 -> m6_129  [key=0, style=bold, color=blue];
m6_373 -> m6_375  [key=0, style=solid];
m6_375 -> m6_376  [key=0, style=solid];
m6_375 -> m6_381  [key=2, style=dotted];
m6_375 -> m6_379  [key=1, style=dashed, color=darkseagreen4, label=a];
m6_376 -> m6_377  [key=0, style=solid];
m6_376 -> m6_378  [key=1, style=dashed, color=darkseagreen4, label=attributes];
m6_379 -> m6_380  [key=0, style=solid];
m6_379 -> m6_382  [key=2, style=dotted];
m6_379 -> m6_383  [key=2, style=dotted];
m6_377 -> m6_378  [key=0, style=solid];
m6_377 -> m6_379  [key=0, style=solid];
m6_378 -> m6_380  [key=0, style=solid];
m6_380 -> m6_373  [key=0, style=bold, color=blue];
m6_369 -> m6_370  [key=0, style=solid];
m6_370 -> m6_371  [key=0, style=solid];
m6_370 -> m6_373  [key=2, style=dotted];
m6_371 -> m6_372  [key=0, style=solid];
m6_371 -> m6_374  [key=2, style=dotted];
m6_372 -> m6_369  [key=0, style=bold, color=blue];
m6_215 -> m6_216  [key=0, style=solid];
m6_215 -> m6_217  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.MemberInfo"];
m6_215 -> m6_219  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.MemberInfo"];
m6_215 -> m6_221  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.MemberInfo"];
m6_215 -> m6_223  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.MemberInfo"];
m6_215 -> m6_225  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.MemberInfo"];
m6_215 -> m6_226  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.MemberInfo"];
m6_216 -> m6_217  [key=0, style=solid];
m6_216 -> m6_13  [key=2, style=dotted];
m6_216 -> m6_14  [key=2, style=dotted];
m6_217 -> m6_218  [key=0, style=solid];
m6_217 -> m6_220  [key=0, style=solid];
m6_217 -> m6_222  [key=0, style=solid];
m6_217 -> m6_224  [key=0, style=solid];
m6_217 -> m6_226  [key=0, style=solid];
m6_217 -> m6_228  [key=2, style=dotted];
m6_219 -> m6_227  [key=0, style=solid];
m6_221 -> m6_227  [key=0, style=solid];
m6_223 -> m6_227  [key=0, style=solid];
m6_225 -> m6_227  [key=0, style=solid];
m6_226 -> m6_227  [key=0, style=solid];
m6_226 -> m6_229  [key=2, style=dotted];
m6_226 -> m6_13  [key=2, style=dotted];
m6_218 -> m6_219  [key=0, style=solid];
m6_220 -> m6_221  [key=0, style=solid];
m6_222 -> m6_223  [key=0, style=solid];
m6_224 -> m6_225  [key=0, style=solid];
m6_227 -> m6_215  [key=0, style=bold, color=blue];
m6_91 -> m6_95  [key=0, style=solid];
m6_91 -> m6_96  [key=1, style=dashed, color=darkseagreen4, label=bool];
m6_91 -> m6_98  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m6_95 -> m6_96  [key=0, style=solid];
m6_95 -> m6_97  [key=1, style=dashed, color=darkseagreen4, label=bindingFlags];
m6_95 -> m6_98  [key=1, style=dashed, color=darkseagreen4, label=bindingFlags];
m6_96 -> m6_97  [key=0, style=solid];
m6_96 -> m6_98  [key=0, style=solid];
m6_98 -> m6_99  [key=0, style=solid];
m6_98 -> m6_100  [key=2, style=dotted];
m6_98 -> m6_101  [key=2, style=dotted];
m6_98 -> m6_102  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_97 -> m6_98  [key=0, style=solid];
m6_97 -> m6_97  [key=1, style=dashed, color=darkseagreen4, label=bindingFlags];
m6_99 -> m6_91  [key=0, style=bold, color=blue];
m6_170 -> m6_171  [key=0, style=solid];
m6_170 -> m6_172  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m6_170 -> m6_173  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m6_170 -> m6_174  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m6_170 -> m6_176  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m6_170 -> m6_179  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m6_171 -> m6_172  [key=0, style=solid];
m6_171 -> m6_176  [key=0, style=solid];
m6_171 -> m6_117  [key=2, style=dotted];
m6_172 -> m6_173  [key=0, style=solid];
m6_172 -> m6_118  [key=2, style=dotted];
m6_173 -> m6_174  [key=0, style=solid];
m6_173 -> m6_176  [key=0, style=solid];
m6_174 -> m6_175  [key=0, style=solid];
m6_176 -> m6_177  [key=0, style=solid];
m6_176 -> m6_179  [key=0, style=solid];
m6_176 -> m6_181  [key=2, style=dotted];
m6_179 -> m6_180  [key=0, style=solid];
m6_179 -> m6_181  [key=2, style=dotted];
m6_179 -> m6_170  [key=2, style=dotted];
m6_175 -> m6_180  [key=0, style=solid];
m6_177 -> m6_178  [key=0, style=solid];
m6_178 -> m6_180  [key=0, style=solid];
m6_180 -> m6_170  [key=0, style=bold, color=blue];
m6_92 -> m6_93  [key=0, style=solid];
m6_93 -> m6_94  [key=0, style=solid];
m6_93 -> m6_91  [key=2, style=dotted];
m6_94 -> m6_92  [key=0, style=bold, color=blue];
m6_312 -> m6_313  [key=0, style=solid];
m6_312 -> m6_314  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m6_312 -> m6_315  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m6_312 -> m6_326  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.BindingFlags"];
m6_313 -> m6_314  [key=0, style=solid];
m6_313 -> m6_331  [key=2, style=dotted];
m6_313 -> m6_315  [key=1, style=dashed, color=darkseagreen4, label=targetMembers];
m6_313 -> m6_316  [key=1, style=dashed, color=darkseagreen4, label=targetMembers];
m6_313 -> m6_317  [key=1, style=dashed, color=darkseagreen4, label=targetMembers];
m6_314 -> m6_315  [key=0, style=solid];
m6_314 -> m6_332  [key=2, style=dotted];
m6_314 -> m6_333  [key=2, style=dotted];
m6_315 -> m6_316  [key=0, style=solid];
m6_315 -> m6_334  [key=2, style=dotted];
m6_315 -> m6_333  [key=2, style=dotted];
m6_326 -> m6_327  [key=0, style=solid];
m6_326 -> m6_323  [key=0, style=solid];
m6_326 -> m6_342  [key=2, style=dotted];
m6_316 -> m6_317  [key=0, style=solid];
m6_316 -> m6_335  [key=2, style=dotted];
m6_316 -> m6_321  [key=1, style=dashed, color=darkseagreen4, label=distinctMembers];
m6_316 -> m6_328  [key=1, style=dashed, color=darkseagreen4, label=distinctMembers];
m6_316 -> m6_329  [key=1, style=dashed, color=darkseagreen4, label=distinctMembers];
m6_317 -> m6_318  [key=0, style=solid];
m6_317 -> m6_329  [key=0, style=solid];
m6_317 -> m6_336  [key=2, style=dotted];
m6_317 -> m6_343  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_317 -> m6_319  [key=1, style=dashed, color=darkseagreen4, label=groupedMember];
m6_321 -> m6_317  [key=0, style=solid];
m6_321 -> m6_339  [key=2, style=dotted];
m6_321 -> m6_340  [key=2, style=dotted];
m6_328 -> m6_317  [key=0, style=solid];
m6_328 -> m6_333  [key=2, style=dotted];
m6_329 -> m6_330  [key=0, style=solid];
m6_318 -> m6_319  [key=0, style=solid];
m6_318 -> m6_337  [key=2, style=dotted];
m6_318 -> m6_320  [key=1, style=dashed, color=darkseagreen4, label=count];
m6_319 -> m6_320  [key=0, style=solid];
m6_319 -> m6_338  [key=2, style=dotted];
m6_319 -> m6_321  [key=1, style=dashed, color=darkseagreen4, label=members];
m6_319 -> m6_323  [key=1, style=dashed, color=darkseagreen4, label=members];
m6_320 -> m6_321  [key=0, style=solid];
m6_320 -> m6_322  [key=0, style=solid];
m6_323 -> m6_324  [key=0, style=solid];
m6_323 -> m6_328  [key=0, style=solid];
m6_323 -> m6_325  [key=1, style=dashed, color=darkseagreen4, label=memberInfo];
m6_323 -> m6_326  [key=1, style=dashed, color=darkseagreen4, label=memberInfo];
m6_323 -> m6_327  [key=1, style=dashed, color=darkseagreen4, label=memberInfo];
m6_322 -> m6_323  [key=0, style=solid];
m6_322 -> m6_331  [key=2, style=dotted];
m6_322 -> m6_324  [key=1, style=dashed, color=darkseagreen4, label=resolvedMembers];
m6_322 -> m6_325  [key=1, style=dashed, color=darkseagreen4, label=resolvedMembers];
m6_322 -> m6_327  [key=1, style=dashed, color=darkseagreen4, label=resolvedMembers];
m6_322 -> m6_328  [key=1, style=dashed, color=darkseagreen4, label=resolvedMembers];
m6_324 -> m6_325  [key=0, style=solid];
m6_324 -> m6_326  [key=0, style=solid];
m6_325 -> m6_323  [key=0, style=solid];
m6_325 -> m6_341  [key=2, style=dotted];
m6_327 -> m6_323  [key=0, style=solid];
m6_327 -> m6_341  [key=2, style=dotted];
m6_330 -> m6_312  [key=0, style=bold, color=blue];
m6_237 -> m6_238  [key=0, style=solid];
m6_237 -> m6_239  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.PropertyInfo"];
m6_238 -> m6_239  [key=0, style=solid];
m6_238 -> m6_13  [key=2, style=dotted];
m6_238 -> m6_14  [key=2, style=dotted];
m6_239 -> m6_240  [key=0, style=solid];
m6_239 -> m6_241  [key=2, style=dotted];
m6_240 -> m6_237  [key=0, style=bold, color=blue];
m6_230 -> m6_231  [key=0, style=solid];
m6_230 -> m6_232  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.MemberInfo"];
m6_231 -> m6_232  [key=0, style=solid];
m6_231 -> m6_13  [key=2, style=dotted];
m6_231 -> m6_14  [key=2, style=dotted];
m6_232 -> m6_233  [key=0, style=solid];
m6_232 -> m6_234  [key=1, style=dashed, color=darkseagreen4, label=propertyInfo];
m6_233 -> m6_234  [key=0, style=solid];
m6_233 -> m6_235  [key=0, style=solid];
m6_234 -> m6_236  [key=0, style=solid];
m6_234 -> m6_237  [key=2, style=dotted];
m6_235 -> m6_236  [key=0, style=solid];
m6_236 -> m6_230  [key=0, style=bold, color=blue];
m6_600 -> m6_601  [key=0, style=solid];
m6_601 -> m6_602  [key=0, style=solid];
m6_602 -> m6_600  [key=0, style=bold, color=blue];
m6_334 -> m6_488  [key=0, style=solid];
m6_334 -> m6_489  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m6_334 -> m6_490  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m6_334 -> m6_491  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m6_334 -> m6_492  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.BindingFlags"];
m6_334 -> m6_493  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m6_334 -> m6_497  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m6_488 -> m6_489  [key=0, style=solid];
m6_488 -> m6_13  [key=2, style=dotted];
m6_488 -> m6_14  [key=2, style=dotted];
m6_489 -> m6_490  [key=0, style=solid];
m6_489 -> m6_472  [key=2, style=dotted];
m6_489 -> m6_503  [key=2, style=dotted];
m6_489 -> m6_492  [key=1, style=dashed, color=darkseagreen4, label=propertyInfos];
m6_489 -> m6_493  [key=1, style=dashed, color=darkseagreen4, label=propertyInfos];
m6_489 -> m6_495  [key=1, style=dashed, color=darkseagreen4, label=propertyInfos];
m6_489 -> m6_496  [key=1, style=dashed, color=darkseagreen4, label=propertyInfos];
m6_489 -> m6_499  [key=1, style=dashed, color=darkseagreen4, label=propertyInfos];
m6_489 -> m6_501  [key=1, style=dashed, color=darkseagreen4, label=propertyInfos];
m6_490 -> m6_491  [key=0, style=solid];
m6_490 -> m6_493  [key=0, style=solid];
m6_490 -> m6_153  [key=2, style=dotted];
m6_491 -> m6_492  [key=0, style=solid];
m6_491 -> m6_493  [key=0, style=solid];
m6_491 -> m6_157  [key=2, style=dotted];
m6_492 -> m6_491  [key=0, style=solid];
m6_492 -> m6_503  [key=2, style=dotted];
m6_492 -> m6_333  [key=2, style=dotted];
m6_493 -> m6_494  [key=0, style=solid];
m6_493 -> m6_504  [key=2, style=dotted];
m6_497 -> m6_498  [key=0, style=solid];
m6_497 -> m6_500  [key=0, style=solid];
m6_495 -> m6_496  [key=0, style=solid];
m6_495 -> m6_501  [key=0, style=solid];
m6_496 -> m6_497  [key=0, style=solid];
m6_496 -> m6_498  [key=1, style=dashed, color=darkseagreen4, label=member];
m6_499 -> m6_500  [key=0, style=solid];
m6_501 -> m6_502  [key=0, style=solid];
m6_494 -> m6_495  [key=0, style=solid];
m6_494 -> m6_496  [key=1, style=dashed, color=darkseagreen4, label=i];
m6_494 -> m6_499  [key=1, style=dashed, color=darkseagreen4, label=i];
m6_494 -> m6_500  [key=1, style=dashed, color=darkseagreen4, label=i];
m6_500 -> m6_495  [key=0, style=solid];
m6_500 -> m6_500  [key=1, style=dashed, color=darkseagreen4, label=i];
m6_498 -> m6_499  [key=0, style=solid];
m6_498 -> m6_450  [key=2, style=dotted];
m6_502 -> m6_334  [key=0, style=bold, color=blue];
m6_544 -> m6_545  [key=0, style=solid];
m6_102 -> m6_103  [key=0, style=solid];
m6_103 -> m6_104  [key=0, style=solid];
m6_103 -> m6_105  [key=2, style=dotted];
m6_103 -> m6_106  [key=2, style=dotted];
m6_104 -> m6_102  [key=0, style=bold, color=blue];
m6_343 -> m6_344  [key=0, style=solid];
m6_344 -> m6_345  [key=0, style=solid];
m6_345 -> m6_343  [key=0, style=bold, color=blue];
m6_464 -> m6_465  [key=0, style=solid];
m6_465 -> m6_466  [key=0, style=solid];
m6_466 -> m6_464  [key=0, style=bold, color=blue];
m6_485 -> m6_486  [key=0, style=solid];
m6_486 -> m6_487  [key=0, style=solid];
m6_487 -> m6_485  [key=0, style=bold, color=blue];
m6_529 -> m6_530  [key=0, style=solid];
m6_532 -> m6_533  [key=0, style=solid];
m6_535 -> m6_536  [key=0, style=solid];
m6_535 -> m6_527  [key=2, style=dotted];
m6_535 -> m6_537  [key=2, style=dotted];
m6_535 -> m6_198  [key=2, style=dotted];
m6_528 -> m6_529  [key=0, style=solid];
m6_531 -> m6_532  [key=0, style=solid];
m6_534 -> m6_535  [key=0, style=solid];
m6_530 -> m6_528  [key=0, style=bold, color=blue];
m6_533 -> m6_531  [key=0, style=bold, color=blue];
m6_536 -> m6_534  [key=0, style=bold, color=blue];
m6_545 -> m6_546  [key=0, style=solid];
m6_545 -> m6_27  [key=2, style=dotted];
m6_546 -> m6_544  [key=0, style=bold, color=blue];
m6_366 -> m6_367  [key=0, style=solid];
m6_367 -> m6_368  [key=0, style=solid];
m6_367 -> m6_369  [key=2, style=dotted];
m6_368 -> m6_366  [key=0, style=bold, color=blue];
m6_54 -> m6_56  [key=0, style=solid];
m6_54 -> m6_60  [key=1, style=dashed, color=darkseagreen4, label=string];
m6_54 -> m6_61  [key=1, style=dashed, color=darkseagreen4, label=string];
m6_56 -> m6_57  [key=0, style=solid];
m6_56 -> m6_81  [key=2, style=dotted];
m6_56 -> m6_66  [key=1, style=dashed, color=darkseagreen4, label=builder];
m6_56 -> m6_70  [key=1, style=dashed, color=darkseagreen4, label=builder];
m6_56 -> m6_74  [key=1, style=dashed, color=darkseagreen4, label=builder];
m6_56 -> m6_77  [key=1, style=dashed, color=darkseagreen4, label=builder];
m6_56 -> m6_79  [key=1, style=dashed, color=darkseagreen4, label=builder];
m6_60 -> m6_61  [key=0, style=solid];
m6_60 -> m6_79  [key=0, style=solid];
m6_61 -> m6_62  [key=0, style=solid];
m6_61 -> m6_66  [key=1, style=dashed, color=darkseagreen4, label=current];
m6_61 -> m6_70  [key=1, style=dashed, color=darkseagreen4, label=current];
m6_61 -> m6_74  [key=1, style=dashed, color=darkseagreen4, label=current];
m6_61 -> m6_77  [key=1, style=dashed, color=darkseagreen4, label=current];
m6_57 -> m6_58  [key=0, style=solid];
m6_66 -> m6_78  [key=0, style=solid];
m6_66 -> m6_82  [key=2, style=dotted];
m6_70 -> m6_78  [key=0, style=solid];
m6_70 -> m6_82  [key=2, style=dotted];
m6_74 -> m6_78  [key=0, style=solid];
m6_74 -> m6_82  [key=2, style=dotted];
m6_77 -> m6_78  [key=0, style=solid];
m6_77 -> m6_82  [key=2, style=dotted];
m6_79 -> m6_80  [key=0, style=solid];
m6_79 -> m6_83  [key=2, style=dotted];
m6_58 -> m6_59  [key=0, style=solid];
m6_59 -> m6_60  [key=0, style=solid];
m6_59 -> m6_61  [key=1, style=dashed, color=darkseagreen4, label=i];
m6_59 -> m6_78  [key=1, style=dashed, color=darkseagreen4, label=i];
m6_78 -> m6_60  [key=0, style=solid];
m6_78 -> m6_78  [key=1, style=dashed, color=darkseagreen4, label=i];
m6_62 -> m6_63  [key=0, style=solid];
m6_62 -> m6_67  [key=0, style=solid];
m6_62 -> m6_71  [key=0, style=solid];
m6_62 -> m6_76  [key=0, style=solid];
m6_63 -> m6_64  [key=0, style=solid];
m6_67 -> m6_68  [key=0, style=solid];
m6_71 -> m6_72  [key=0, style=solid];
m6_76 -> m6_77  [key=0, style=solid];
m6_76 -> m6_78  [key=0, style=solid];
m6_64 -> m6_65  [key=0, style=solid];
m6_65 -> m6_66  [key=0, style=solid];
m6_68 -> m6_69  [key=0, style=solid];
m6_68 -> m6_72  [key=1, style=dashed, color=darkseagreen4, label=writingAssemblyName];
m6_69 -> m6_70  [key=0, style=solid];
m6_69 -> m6_76  [key=1, style=dashed, color=darkseagreen4, label=skippingAssemblyDetails];
m6_72 -> m6_73  [key=0, style=solid];
m6_72 -> m6_75  [key=0, style=solid];
m6_73 -> m6_74  [key=0, style=solid];
m6_75 -> m6_78  [key=0, style=solid];
m6_75 -> m6_76  [key=1, style=dashed, color=darkseagreen4, label=skippingAssemblyDetails];
m6_80 -> m6_54  [key=0, style=bold, color=blue];
m6_342 -> m6_346  [key=0, style=solid];
m6_342 -> m6_348  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.MemberInfo"];
m6_342 -> m6_357  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.BindingFlags"];
m6_346 -> m6_347  [key=0, style=solid];
m6_346 -> m6_348  [key=0, style=solid];
m6_346 -> m6_228  [key=2, style=dotted];
m6_348 -> m6_349  [key=0, style=solid];
m6_348 -> m6_351  [key=1, style=dashed, color=darkseagreen4, label=propertyInfo];
m6_348 -> m6_357  [key=1, style=dashed, color=darkseagreen4, label=propertyInfo];
m6_357 -> m6_358  [key=0, style=solid];
m6_357 -> m6_365  [key=2, style=dotted];
m6_357 -> m6_360  [key=1, style=dashed, color=darkseagreen4, label=members];
m6_347 -> m6_364  [key=0, style=solid];
m6_349 -> m6_350  [key=0, style=solid];
m6_349 -> m6_351  [key=0, style=solid];
m6_349 -> m6_3  [key=2, style=dotted];
m6_351 -> m6_352  [key=0, style=solid];
m6_351 -> m6_354  [key=1, style=dashed, color=darkseagreen4, label=declaringType];
m6_350 -> m6_364  [key=0, style=solid];
m6_352 -> m6_353  [key=0, style=solid];
m6_352 -> m6_354  [key=0, style=solid];
m6_352 -> m6_117  [key=2, style=dotted];
m6_354 -> m6_355  [key=0, style=solid];
m6_354 -> m6_118  [key=2, style=dotted];
m6_354 -> m6_357  [key=1, style=dashed, color=darkseagreen4, label=genericTypeDefinition];
m6_353 -> m6_364  [key=0, style=solid];
m6_355 -> m6_356  [key=0, style=solid];
m6_355 -> m6_357  [key=0, style=solid];
m6_356 -> m6_364  [key=0, style=solid];
m6_358 -> m6_359  [key=0, style=solid];
m6_358 -> m6_360  [key=0, style=solid];
m6_360 -> m6_361  [key=0, style=solid];
m6_360 -> m6_215  [key=2, style=dotted];
m6_359 -> m6_364  [key=0, style=solid];
m6_361 -> m6_362  [key=0, style=solid];
m6_361 -> m6_363  [key=0, style=solid];
m6_362 -> m6_364  [key=0, style=solid];
m6_363 -> m6_364  [key=0, style=solid];
m6_364 -> m6_342  [key=0, style=bold, color=blue];
m6_419 -> m6_420  [key=0, style=solid];
m6_419 -> m6_424  [key=1, style=dashed, color=darkseagreen4, label=string];
m6_419 -> m6_425  [key=1, style=dashed, color=darkseagreen4, label=string];
m6_419 -> m6_426  [key=1, style=dashed, color=darkseagreen4, label=string];
m6_420 -> m6_421  [key=0, style=solid];
m6_420 -> m6_430  [key=2, style=dotted];
m6_420 -> m6_423  [key=1, style=dashed, color=darkseagreen4, label=assemblyDelimiterIndex];
m6_420 -> m6_424  [key=1, style=dashed, color=darkseagreen4, label=assemblyDelimiterIndex];
m6_420 -> m6_425  [key=1, style=dashed, color=darkseagreen4, label=assemblyDelimiterIndex];
m6_424 -> m6_425  [key=0, style=solid];
m6_424 -> m6_431  [key=2, style=dotted];
m6_424 -> m6_432  [key=2, style=dotted];
m6_424 -> m6_433  [key=2, style=dotted];
m6_424 -> m6_428  [key=1, style=dashed, color=darkseagreen4, label=typeName];
m6_425 -> m6_428  [key=0, style=solid];
m6_425 -> m6_431  [key=2, style=dotted];
m6_425 -> m6_432  [key=2, style=dotted];
m6_425 -> m6_433  [key=2, style=dotted];
m6_426 -> m6_427  [key=0, style=solid];
m6_426 -> m6_428  [key=1, style=dashed, color=darkseagreen4, label=typeName];
m6_421 -> m6_422  [key=0, style=solid];
m6_423 -> m6_424  [key=0, style=solid];
m6_423 -> m6_426  [key=0, style=solid];
m6_422 -> m6_423  [key=0, style=solid];
m6_428 -> m6_429  [key=0, style=solid];
m6_428 -> m6_434  [key=2, style=dotted];
m6_427 -> m6_428  [key=0, style=solid];
m6_429 -> m6_419  [key=0, style=bold, color=blue];
m6_17 -> m6_18  [key=0, style=solid];
m6_17 -> m6_19  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.PropertyInfo"];
m6_17 -> m6_22  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.PropertyInfo"];
m6_18 -> m6_19  [key=0, style=solid];
m6_18 -> m6_13  [key=2, style=dotted];
m6_18 -> m6_14  [key=2, style=dotted];
m6_19 -> m6_20  [key=0, style=solid];
m6_19 -> m6_15  [key=2, style=dotted];
m6_19 -> m6_21  [key=1, style=dashed, color=darkseagreen4, label=m];
m6_22 -> m6_23  [key=0, style=solid];
m6_22 -> m6_16  [key=2, style=dotted];
m6_22 -> m6_24  [key=1, style=dashed, color=darkseagreen4, label=m];
m6_20 -> m6_21  [key=0, style=solid];
m6_20 -> m6_22  [key=0, style=solid];
m6_21 -> m6_26  [key=0, style=solid];
m6_21 -> m6_27  [key=2, style=dotted];
m6_23 -> m6_24  [key=0, style=solid];
m6_23 -> m6_25  [key=0, style=solid];
m6_24 -> m6_26  [key=0, style=solid];
m6_24 -> m6_27  [key=2, style=dotted];
m6_25 -> m6_26  [key=0, style=solid];
m6_26 -> m6_17  [key=0, style=bold, color=blue];
m6_119 -> m6_120  [key=0, style=solid];
m6_120 -> m6_121  [key=0, style=solid];
m6_120 -> m6_113  [key=2, style=dotted];
m6_120 -> m6_122  [key=2, style=dotted];
m6_121 -> m6_119  [key=0, style=bold, color=blue];
m6_547 -> m6_548  [key=0, style=solid];
m6_547 -> m6_550  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m6_547 -> m6_578  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m6_547 -> m6_580  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m6_548 -> m6_549  [key=0, style=solid];
m6_548 -> m6_550  [key=0, style=solid];
m6_548 -> m6_90  [key=2, style=dotted];
m6_550 -> m6_551  [key=0, style=solid];
m6_550 -> m6_553  [key=0, style=solid];
m6_550 -> m6_561  [key=0, style=solid];
m6_550 -> m6_564  [key=0, style=solid];
m6_550 -> m6_566  [key=0, style=solid];
m6_550 -> m6_568  [key=0, style=solid];
m6_550 -> m6_570  [key=0, style=solid];
m6_550 -> m6_572  [key=0, style=solid];
m6_550 -> m6_574  [key=0, style=solid];
m6_550 -> m6_576  [key=0, style=solid];
m6_550 -> m6_582  [key=2, style=dotted];
m6_578 -> m6_579  [key=0, style=solid];
m6_578 -> m6_580  [key=0, style=solid];
m6_578 -> m6_107  [key=2, style=dotted];
m6_580 -> m6_581  [key=0, style=solid];
m6_580 -> m6_587  [key=2, style=dotted];
m6_549 -> m6_581  [key=0, style=solid];
m6_551 -> m6_552  [key=0, style=solid];
m6_553 -> m6_554  [key=0, style=solid];
m6_561 -> m6_562  [key=0, style=solid];
m6_564 -> m6_565  [key=0, style=solid];
m6_566 -> m6_567  [key=0, style=solid];
m6_568 -> m6_569  [key=0, style=solid];
m6_570 -> m6_571  [key=0, style=solid];
m6_572 -> m6_573  [key=0, style=solid];
m6_574 -> m6_575  [key=0, style=solid];
m6_576 -> m6_577  [key=0, style=solid];
m6_552 -> m6_581  [key=0, style=solid];
m6_554 -> m6_555  [key=0, style=solid];
m6_555 -> m6_556  [key=0, style=solid];
m6_556 -> m6_557  [key=0, style=solid];
m6_557 -> m6_558  [key=0, style=solid];
m6_558 -> m6_559  [key=0, style=solid];
m6_559 -> m6_560  [key=0, style=solid];
m6_560 -> m6_581  [key=0, style=solid];
m6_562 -> m6_563  [key=0, style=solid];
m6_563 -> m6_581  [key=0, style=solid];
m6_565 -> m6_581  [key=0, style=solid];
m6_567 -> m6_581  [key=0, style=solid];
m6_569 -> m6_581  [key=0, style=solid];
m6_571 -> m6_581  [key=0, style=solid];
m6_571 -> m6_583  [key=2, style=dotted];
m6_573 -> m6_581  [key=0, style=solid];
m6_573 -> m6_584  [key=2, style=dotted];
m6_575 -> m6_581  [key=0, style=solid];
m6_575 -> m6_585  [key=2, style=dotted];
m6_577 -> m6_581  [key=0, style=solid];
m6_577 -> m6_586  [key=2, style=dotted];
m6_579 -> m6_581  [key=0, style=solid];
m6_581 -> m6_547  [key=0, style=bold, color=blue];
m6_430 -> m6_435  [key=0, style=solid];
m6_430 -> m6_437  [key=1, style=dashed, color=darkseagreen4, label=string];
m6_430 -> m6_438  [key=1, style=dashed, color=darkseagreen4, label=string];
m6_435 -> m6_436  [key=0, style=solid];
m6_435 -> m6_441  [key=1, style=dashed, color=darkseagreen4, label=scope];
m6_437 -> m6_438  [key=0, style=solid];
m6_437 -> m6_448  [key=0, style=solid];
m6_438 -> m6_439  [key=0, style=solid];
m6_436 -> m6_437  [key=0, style=solid];
m6_436 -> m6_438  [key=1, style=dashed, color=darkseagreen4, label=i];
m6_436 -> m6_446  [key=1, style=dashed, color=darkseagreen4, label=i];
m6_436 -> m6_447  [key=1, style=dashed, color=darkseagreen4, label=i];
m6_441 -> m6_447  [key=0, style=solid];
m6_441 -> m6_441  [key=1, style=dashed, color=darkseagreen4, label=scope];
m6_441 -> m6_443  [key=1, style=dashed, color=darkseagreen4, label=scope];
m6_446 -> m6_449  [key=0, style=solid];
m6_447 -> m6_437  [key=0, style=solid];
m6_447 -> m6_447  [key=1, style=dashed, color=darkseagreen4, label=i];
m6_448 -> m6_449  [key=0, style=solid];
m6_439 -> m6_440  [key=0, style=solid];
m6_439 -> m6_442  [key=0, style=solid];
m6_439 -> m6_444  [key=0, style=solid];
m6_440 -> m6_441  [key=0, style=solid];
m6_442 -> m6_443  [key=0, style=solid];
m6_444 -> m6_445  [key=0, style=solid];
m6_443 -> m6_447  [key=0, style=solid];
m6_443 -> m6_443  [key=1, style=dashed, color=darkseagreen4, label=scope];
m6_443 -> m6_445  [key=1, style=dashed, color=darkseagreen4, label=scope];
m6_445 -> m6_446  [key=0, style=solid];
m6_445 -> m6_447  [key=0, style=solid];
m6_449 -> m6_430  [key=0, style=bold, color=blue];
m6_107 -> m6_108  [key=0, style=solid];
m6_107 -> m6_109  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m6_107 -> m6_110  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m6_108 -> m6_109  [key=0, style=solid];
m6_108 -> m6_13  [key=2, style=dotted];
m6_108 -> m6_14  [key=2, style=dotted];
m6_109 -> m6_110  [key=0, style=solid];
m6_109 -> m6_111  [key=0, style=solid];
m6_109 -> m6_90  [key=2, style=dotted];
m6_110 -> m6_112  [key=0, style=solid];
m6_110 -> m6_113  [key=2, style=dotted];
m6_111 -> m6_112  [key=0, style=solid];
m6_112 -> m6_107  [key=0, style=bold, color=blue];
m6_158 -> m6_159  [key=0, style=solid];
m6_158 -> m6_160  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m6_159 -> m6_160  [key=0, style=solid];
m6_160 -> m6_161  [key=0, style=solid];
m6_160 -> m6_162  [key=2, style=dotted];
m6_161 -> m6_158  [key=0, style=bold, color=blue];
m6_474 -> m6_475  [key=0, style=solid];
m6_474 -> m6_476  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.BindingFlags"];
m6_474 -> m6_477  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m6_474 -> m6_479  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IList<System.Reflection.MemberInfo>"];
m6_475 -> m6_476  [key=0, style=solid];
m6_475 -> m6_480  [key=0, style=solid];
m6_476 -> m6_477  [key=0, style=solid];
m6_476 -> m6_481  [key=2, style=dotted];
m6_476 -> m6_478  [key=1, style=dashed, color=darkseagreen4, label=nonPublicBindingAttr];
m6_477 -> m6_478  [key=0, style=solid];
m6_477 -> m6_480  [key=0, style=solid];
m6_477 -> m6_181  [key=2, style=dotted];
m6_477 -> m6_477  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m6_479 -> m6_477  [key=0, style=solid];
m6_479 -> m6_484  [key=2, style=dotted];
m6_478 -> m6_479  [key=0, style=solid];
m6_478 -> m6_473  [key=2, style=dotted];
m6_478 -> m6_482  [key=2, style=dotted];
m6_478 -> m6_483  [key=2, style=dotted];
m6_478 -> m6_485  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_480 -> m6_474  [key=0, style=bold, color=blue];
m6_0 -> m6_1  [key=0, style=solid];
m6_1 -> m6_2  [key=0, style=solid];
m6_2 -> m6_0  [key=0, style=bold, color=blue];
m6_39 -> m6_40  [key=0, style=solid];
m6_39 -> m6_41  [key=1, style=dashed, color=darkseagreen4, label="System.Runtime.Serialization.SerializationBinder"];
m6_39 -> m6_43  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m6_39 -> m6_45  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m6_39 -> m6_46  [key=1, style=dashed, color=darkseagreen4, label="System.Runtime.Serialization.Formatters.FormatterAssemblyStyle"];
m6_40 -> m6_41  [key=0, style=solid];
m6_41 -> m6_42  [key=0, style=solid];
m6_41 -> m6_45  [key=0, style=solid];
m6_43 -> m6_44  [key=0, style=solid];
m6_43 -> m6_53  [key=2, style=dotted];
m6_45 -> m6_46  [key=0, style=solid];
m6_45 -> m6_48  [key=1, style=dashed, color=darkseagreen4, label=fullyQualifiedTypeName];
m6_45 -> m6_50  [key=1, style=dashed, color=darkseagreen4, label=fullyQualifiedTypeName];
m6_46 -> m6_47  [key=0, style=solid];
m6_46 -> m6_49  [key=0, style=solid];
m6_46 -> m6_51  [key=0, style=solid];
m6_42 -> m6_43  [key=0, style=solid];
m6_44 -> m6_46  [key=0, style=solid];
m6_44 -> m6_48  [key=1, style=dashed, color=darkseagreen4, label=fullyQualifiedTypeName];
m6_44 -> m6_50  [key=1, style=dashed, color=darkseagreen4, label=fullyQualifiedTypeName];
m6_48 -> m6_52  [key=0, style=solid];
m6_48 -> m6_54  [key=2, style=dotted];
m6_50 -> m6_52  [key=0, style=solid];
m6_47 -> m6_48  [key=0, style=solid];
m6_49 -> m6_50  [key=0, style=solid];
m6_51 -> m6_52  [key=0, style=solid];
m6_51 -> m6_55  [key=2, style=dotted];
m6_52 -> m6_39  [key=0, style=bold, color=blue];
m6_35 -> m6_36  [key=0, style=solid];
m6_36 -> m6_37  [key=0, style=solid];
m6_36 -> m6_38  [key=2, style=dotted];
m6_37 -> m6_35  [key=0, style=bold, color=blue];
m6_591 -> m6_592  [key=0, style=solid];
m6_592 -> m6_593  [key=0, style=solid];
m6_592 -> m6_594  [key=2, style=dotted];
m6_593 -> m6_591  [key=0, style=bold, color=blue];
m6_603 -> m6_529  [key=1, style=dashed, color=darkseagreen4, label=subTypeProperty];
m6_603 -> m6_532  [key=1, style=dashed, color=darkseagreen4, label=subTypeProperty];
m6_603 -> m6_535  [key=1, style=dashed, color=darkseagreen4, label=subTypeProperty];
m6_604 -> m6_545  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m6_605 -> m6_545  [key=1, style=dashed, color=darkseagreen4, label=string];
m6_607 -> m6_592  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Utilities.TypeNameKey"];
m6_607 -> m6_598  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Utilities.TypeNameKey"];
m6_607 -> m6_601  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Utilities.TypeNameKey"];
m6_608 -> m6_599  [key=1, style=dashed, color=darkseagreen4, label="ref Newtonsoft.Json.Utilities.TypeNameKey"];
m7_0 -> m7_1  [key=0, style=solid];
m7_3 -> m7_11  [key=2, style=dotted];
m7_3 -> m7_4  [key=0, style=solid];
m7_2 -> m7_3  [key=0, style=solid];
m7_2 -> m7_9  [key=2, style=dotted];
m7_2 -> m7_10  [key=2, style=dotted];
m7_4 -> m7_5  [key=0, style=solid];
m7_4 -> m7_12  [key=2, style=dotted];
m7_1 -> m7_2  [key=0, style=solid];
m7_1 -> m7_7  [key=2, style=dotted];
m7_1 -> m7_8  [key=2, style=dotted];
m7_1 -> m7_5  [key=1, style=dashed, color=darkseagreen4, label=videogameRatings];
m7_5 -> m7_6  [key=0, style=solid];
m7_5 -> m7_13  [key=2, style=dotted];
m7_6 -> m7_0  [key=0, style=bold, color=blue];
m7_10 -> m7_2  [key=3, color=darkorchid, style=bold, label="Parameter variable string s1"];
m7_10 -> m7_18  [key=0, style=solid];
m7_18 -> m7_10  [key=0, style=bold, color=blue];
m7_11 -> m7_14  [key=0, style=solid, color=green];
m7_11 -> m7_2  [key=3, color=darkorchid, style=bold, label="Parameter variable string path"];
m7_14 -> m7_15  [key=0, style=solid, color=green];
m7_14 -> m7_16  [key=2, style=dotted, color=green];
m7_14 -> m7_17  [key=2, style=dotted, color=green];
m7_15 -> m7_11  [key=0, style=bold, color=blue];
}
