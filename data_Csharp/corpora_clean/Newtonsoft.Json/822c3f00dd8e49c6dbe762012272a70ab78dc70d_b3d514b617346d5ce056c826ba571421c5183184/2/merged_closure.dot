digraph  {
n404 [label="Newtonsoft.Json.Linq.JsonPath.JPath", span=""];
n0 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.JPath(string)", label="Entry Newtonsoft.Json.Linq.JsonPath.JPath.JPath(string)", span="40-40"];
n1 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.JPath(string)", label="ValidationUtils.ArgumentNotNull(expression, nameof(expression))", span="42-42"];
n2 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.JPath(string)", label="_expression = expression", span="43-43"];
n6 [cluster="Unk.nameof", label="Entry Unk.nameof", span=""];
n7 [cluster="Newtonsoft.Json.Utilities.ValidationUtils.ArgumentNotNull(object, string)", label="Entry Newtonsoft.Json.Utilities.ValidationUtils.ArgumentNotNull(object, string)", span="31-31"];
n3 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.JPath(string)", label="Filters = new List<PathFilter>()", span="44-44"];
n4 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.JPath(string)", label="ParseMain()", span="46-46"];
n8 [cluster="System.Collections.Generic.List<T>.List()", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
n5 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.JPath(string)", label="Exit Newtonsoft.Json.Linq.JsonPath.JPath.JPath(string)", span="40-40"];
n9 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseMain()", label="Entry Newtonsoft.Json.Linq.JsonPath.JPath.ParseMain()", span="49-49"];
n10 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseMain()", label="int currentPartStartIndex = _currentIndex", span="51-51"];
n11 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseMain()", label="EatWhitespace()", span="53-53"];
n21 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseMain()", label="!ParsePath(Filters, currentPartStartIndex, false)", span="77-77"];
n12 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseMain()", label="_expression.Length == _currentIndex", span="55-55"];
n27 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.EatWhitespace()", label="Entry Newtonsoft.Json.Linq.JsonPath.JPath.EatWhitespace()", span="383-383"];
n13 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseMain()", label="return;", span="57-57"];
n14 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseMain()", label="_expression[_currentIndex] == '$'", span="60-60"];
n15 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseMain()", label="_expression.Length == 1", span="62-62"];
n16 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseMain()", label="return;", span="64-64"];
n17 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseMain()", label="char c = _expression[_currentIndex + 1]", span="69-69"];
n18 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseMain()", label="c == '.' || c == '['", span="70-70"];
n19 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseMain()", label="_currentIndex++", span="72-72"];
n20 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseMain()", label="currentPartStartIndex = _currentIndex", span="73-73"];
n22 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseMain()", label="int lastCharacterIndex = _currentIndex", span="79-79"];
n26 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseMain()", label="Exit Newtonsoft.Json.Linq.JsonPath.JPath.ParseMain()", span="49-49"];
n28 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", label="Entry Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", span="90-90"];
n23 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseMain()", label="EatWhitespace()", span="81-81"];
n25 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseMain()", label="throw new JsonException(''Unexpected character while parsing path: '' + _expression[lastCharacterIndex]);", span="85-85"];
n24 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseMain()", label="_currentIndex < _expression.Length", span="83-83"];
n29 [cluster="Newtonsoft.Json.JsonException.JsonException(string)", label="Entry Newtonsoft.Json.JsonException.JsonException(string)", span="54-54"];
n30 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", label="bool scan = false", span="92-92"];
n39 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", label="_currentIndex > currentPartStartIndex", span="105-105"];
n40 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", label="string member = _expression.Substring(currentPartStartIndex, _currentIndex - currentPartStartIndex)", span="107-107"];
n43 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", label="filters.Add(CreatePathFilter(member, scan))", span="113-113"];
n45 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", label="filters.Add(ParseIndexer(currentChar, scan))", span="117-117"];
n61 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", label="filters.Add(CreatePathFilter(member, scan))", span="142-142"];
n70 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", label="query && (currentChar == '=' || currentChar == '<' || currentChar == '!' || currentChar == '>' || currentChar == '|' || currentChar == '&')", span="156-156"];
n76 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", label="_currentIndex > currentPartStartIndex", span="175-175"];
n77 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", label="string member = _expression.Substring(currentPartStartIndex, _currentIndex - currentPartStartIndex).TrimEnd()", span="177-177"];
n80 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", label="filters.Add(CreatePathFilter(member, scan))", span="182-182"];
n81 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", label="followingDot && (atPathEnd || query)", span="187-187"];
n31 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", label="bool followingIndexer = false", span="93-93"];
n32 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", label="bool followingDot = false", span="94-94"];
n33 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", label="bool ended = false", span="96-96"];
n34 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", label="_currentIndex < _expression.Length && !ended", span="97-97"];
n35 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", label="char currentChar = _expression[_currentIndex]", span="99-99"];
n75 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", label="bool atPathEnd = (_currentIndex == _expression.Length)", span="173-173"];
n36 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", label=currentChar, span="101-101"];
n73 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", label="throw new JsonException(''Unexpected character following indexer: '' + currentChar);", span="164-164"];
n37 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", label="'['", span="103-103"];
n50 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", label="']'", span="123-123"];
n53 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", label="' '", span="127-127"];
n56 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", label="'.'", span="133-133"];
n38 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", label="'('", span="104-104"];
n41 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", label="member == ''*''", span="108-108"];
n85 [cluster="string.Substring(int, int)", label="Entry string.Substring(int, int)", span="0-0"];
n42 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", label="member = null", span="110-110"];
n44 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", label="scan = false", span="114-114"];
n86 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.CreatePathFilter(string, bool)", label="Entry Newtonsoft.Json.Linq.JsonPath.JPath.CreatePathFilter(string, bool)", span="196-196"];
n87 [cluster="System.Collections.Generic.List<T>.Add(T)", label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0"];
n46 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", label="_currentIndex++", span="118-118"];
n88 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseIndexer(char, bool)", label="Entry Newtonsoft.Json.Linq.JsonPath.JPath.ParseIndexer(char, bool)", span="202-202"];
n47 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", label="currentPartStartIndex = _currentIndex", span="119-119"];
n48 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", label="followingIndexer = true", span="120-120"];
n57 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", label="_currentIndex > currentPartStartIndex", span="134-134"];
n58 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", label="string member = _expression.Substring(currentPartStartIndex, _currentIndex - currentPartStartIndex)", span="136-136"];
n49 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", label="followingDot = false", span="121-121"];
n51 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", label="')'", span="124-124"];
n52 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", label="ended = true", span="125-125"];
n54 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", label="_currentIndex < _expression.Length", span="128-128"];
n55 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", label="ended = true", span="130-130"];
n63 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", label="_currentIndex + 1 < _expression.Length && _expression[_currentIndex + 1] == '.'", span="145-145"];
n59 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", label="member == ''*''", span="137-137"];
n60 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", label="member = null", span="139-139"];
n62 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", label="scan = false", span="143-143"];
n64 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", label="scan = true", span="147-147"];
n66 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", label="_currentIndex++", span="150-150"];
n65 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", label="_currentIndex++", span="148-148"];
n67 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", label="currentPartStartIndex = _currentIndex", span="151-151"];
n68 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", label="followingIndexer = false", span="152-152"];
n69 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", label="followingDot = true", span="153-153"];
n72 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", label=followingIndexer, span="162-162"];
n71 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", label="ended = true", span="158-158"];
n74 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", label="_currentIndex++", span="167-167"];
n83 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", label="return atPathEnd;", span="193-193"];
n78 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", label="member == ''*''", span="178-178"];
n89 [cluster="string.TrimEnd(params char[])", label="Entry string.TrimEnd(params char[])", span="0-0"];
n79 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", label="member = null", span="180-180"];
n82 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", label="throw new JsonException(''Unexpected end while parsing path.'');", span="189-189"];
n84 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", label="Exit Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", span="90-90"];
n90 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.CreatePathFilter(string, bool)", label="PathFilter filter = (scan) ? (PathFilter)new ScanFilter {Name = member} : new FieldFilter {Name = member}", span="198-198"];
n91 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.CreatePathFilter(string, bool)", label="return filter;", span="199-199"];
n93 [cluster="Newtonsoft.Json.Linq.JsonPath.ScanFilter.ScanFilter()", label="Entry Newtonsoft.Json.Linq.JsonPath.ScanFilter.ScanFilter()", span="4-4"];
n94 [cluster="Newtonsoft.Json.Linq.JsonPath.FieldFilter.FieldFilter()", label="Entry Newtonsoft.Json.Linq.JsonPath.FieldFilter.FieldFilter()", span="6-6"];
n92 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.CreatePathFilter(string, bool)", label="Exit Newtonsoft.Json.Linq.JsonPath.JPath.CreatePathFilter(string, bool)", span="196-196"];
n95 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseIndexer(char, bool)", label="_currentIndex++", span="204-204"];
n96 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseIndexer(char, bool)", label="char indexerCloseChar = (indexerOpenChar == '[') ? ']' : ')'", span="206-206"];
n100 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseIndexer(char, bool)", label="return ParseQuotedField(indexerCloseChar, scan);", span="214-214"];
n97 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseIndexer(char, bool)", label="EnsureLength(''Path ended with open indexer.'')", span="208-208"];
n103 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseIndexer(char, bool)", label="return ParseArrayIndexer(indexerCloseChar);", span="222-222"];
n98 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseIndexer(char, bool)", label="EatWhitespace()", span="210-210"];
n105 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.EnsureLength(string)", label="Entry Newtonsoft.Json.Linq.JsonPath.JPath.EnsureLength(string)", span="790-790"];
n99 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseIndexer(char, bool)", label="_expression[_currentIndex] == '\''", span="212-212"];
n101 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseIndexer(char, bool)", label="_expression[_currentIndex] == '?'", span="216-216"];
n104 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseIndexer(char, bool)", label="Exit Newtonsoft.Json.Linq.JsonPath.JPath.ParseIndexer(char, bool)", span="202-202"];
n108 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", label="Entry Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", span="226-226"];
n107 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuery(char)", label="Entry Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuery(char)", span="396-396"];
n106 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuotedField(char, bool)", label="Entry Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuotedField(char, bool)", span="744-744"];
n109 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", label="int start = _currentIndex", span="228-228"];
n121 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", label="currentCharacter == indexerCloseChar", span="247-247"];
n159 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", label="_expression[_currentIndex] != indexerCloseChar", span="326-326"];
n110 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", label="int? end = null", span="229-229"];
n122 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", label="int length = (end ?? _currentIndex) - start", span="249-249"];
n126 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", label="string indexer = _expression.Substring(start, length)", span="258-258"];
n132 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", label="string indexer = _expression.Substring(start, length)", span="268-268"];
n140 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", label="string indexer = _expression.Substring(start, length)", span="290-290"];
n144 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", label="int length = (end ?? _currentIndex) - start", span="298-298"];
n149 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", label="string indexer = _expression.Substring(start, length)", span="310-310"];
n163 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", label="int length = (end ?? _currentIndex) - start", span="335-335"];
n165 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", label="string indexer = _expression.Substring(start, length)", span="339-339"];
n111 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", label="List<int> indexes = null", span="230-230"];
n179 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", label="end != null", span="371-371"];
n112 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", label="int colonCount = 0", span="231-231"];
n123 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", label="indexes != null", span="251-251"];
n128 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", label="indexes.Add(index)", span="261-261"];
n129 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", label="return new ArrayMultipleIndexFilter { Indexes = indexes };", span="262-262"];
n147 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", label="indexes == null", span="305-305"];
n150 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", label="indexes.Add(Convert.ToInt32(indexer, CultureInfo.InvariantCulture))", span="311-311"];
n113 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", label="int? startIndex = null", span="232-232"];
n130 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", label="colonCount > 0", span="264-264"];
n134 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", label="colonCount == 1", span="271-271"];
n167 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", label="colonCount == 0", span="342-342"];
n169 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", label="colonCount == 1", span="346-346"];
n172 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", label="colonCount++", span="356-356"];
n114 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", label="int? endIndex = null", span="233-233"];
n137 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", label="return new ArraySliceFilter { Start = startIndex, End = endIndex, Step = step };", span="281-281"];
n115 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", label="int? step = null", span="234-234"];
n116 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", label="_currentIndex < _expression.Length", span="236-236"];
n117 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", label="char currentCharacter = _expression[_currentIndex]", span="238-238"];
n182 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", label="throw new JsonException(''Path ended with open indexer.'');", span="380-380"];
n118 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", label="currentCharacter == ' '", span="240-240"];
n143 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", label="currentCharacter == ','", span="296-296"];
n155 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", label="currentCharacter == '*'", span="320-320"];
n160 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", label="throw new JsonException(''Unexpected character while parsing path indexer: '' + currentCharacter);", span="328-328"];
n162 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", label="currentCharacter == ':'", span="333-333"];
n177 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", label="!char.IsDigit(currentCharacter) && currentCharacter != '-'", span="365-365"];
n178 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", label="throw new JsonException(''Unexpected character while parsing path indexer: '' + currentCharacter);", span="367-367"];
n180 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", label="throw new JsonException(''Unexpected character while parsing path indexer: '' + currentCharacter);", span="373-373"];
n119 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", label="end = _currentIndex", span="242-242"];
n120 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", label="EatWhitespace()", span="243-243"];
n124 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", label="length == 0", span="253-253"];
n131 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", label="length > 0", span="266-266"];
n138 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", label="length == 0", span="285-285"];
n125 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", label="throw new JsonException(''Array index expected.'');", span="255-255"];
n127 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", label="int index = Convert.ToInt32(indexer, CultureInfo.InvariantCulture)", span="259-259"];
n184 [cluster="System.Convert.ToInt32(string, System.IFormatProvider)", label="Entry System.Convert.ToInt32(string, System.IFormatProvider)", span="0-0"];
n133 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", label="int index = Convert.ToInt32(indexer, CultureInfo.InvariantCulture)", span="269-269"];
n135 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", label="endIndex = index", span="273-273"];
n136 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", label="step = index", span="277-277"];
n139 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", label="throw new JsonException(''Array index expected.'');", span="287-287"];
n141 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", label="int index = Convert.ToInt32(indexer, CultureInfo.InvariantCulture)", span="291-291"];
n142 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", label="return new ArrayIndexFilter { Index = index };", span="293-293"];
n145 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", label="length == 0", span="300-300"];
n146 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", label="throw new JsonException(''Array index expected.'');", span="302-302"];
n148 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", label="indexes = new List<int>()", span="307-307"];
n151 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", label="_currentIndex++", span="313-313"];
n152 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", label="EatWhitespace()", span="315-315"];
n153 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", label="start = _currentIndex", span="317-317"];
n154 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", label="end = null", span="318-318"];
n156 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", label="_currentIndex++", span="322-322"];
n157 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", label="EnsureLength(''Path ended with open indexer.'')", span="323-323"];
n158 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", label="EatWhitespace()", span="324-324"];
n161 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", label="return new ArrayIndexFilter();", span="331-331"];
n164 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", label="length > 0", span="337-337"];
n166 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", label="int index = Convert.ToInt32(indexer, CultureInfo.InvariantCulture)", span="340-340"];
n168 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", label="startIndex = index", span="344-344"];
n170 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", label="endIndex = index", span="348-348"];
n171 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", label="step = index", span="352-352"];
n173 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", label="_currentIndex++", span="358-358"];
n174 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", label="EatWhitespace()", span="360-360"];
n175 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", label="start = _currentIndex", span="362-362"];
n176 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", label="end = null", span="363-363"];
n188 [cluster="char.IsDigit(char)", label="Entry char.IsDigit(char)", span="0-0"];
n181 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", label="_currentIndex++", span="376-376"];
n183 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", label="Exit Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", span="226-226"];
n187 [cluster="Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter.ArrayIndexFilter()", label="Entry Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter.ArrayIndexFilter()", span="6-6"];
n185 [cluster="Newtonsoft.Json.Linq.JsonPath.ArrayMultipleIndexFilter.ArrayMultipleIndexFilter()", label="Entry Newtonsoft.Json.Linq.JsonPath.ArrayMultipleIndexFilter.ArrayMultipleIndexFilter()", span="4-4"];
n186 [cluster="Newtonsoft.Json.Linq.JsonPath.ArraySliceFilter.ArraySliceFilter()", label="Entry Newtonsoft.Json.Linq.JsonPath.ArraySliceFilter.ArraySliceFilter()", span="7-7"];
n189 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.EatWhitespace()", label="_currentIndex < _expression.Length", span="385-385"];
n190 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.EatWhitespace()", label="_expression[_currentIndex] != ' '", span="387-387"];
n192 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.EatWhitespace()", label="Exit Newtonsoft.Json.Linq.JsonPath.JPath.EatWhitespace()", span="383-383"];
n191 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.EatWhitespace()", label="_currentIndex++", span="392-392"];
n193 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuery(char)", label="_currentIndex++", span="398-398"];
n202 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuery(char)", label="_expression[_currentIndex] != indexerCloseChar", span="414-414"];
n194 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuery(char)", label="EnsureLength(''Path ended with open indexer.'')", span="399-399"];
n195 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuery(char)", label="_expression[_currentIndex] != '('", span="401-401"];
n196 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuery(char)", label="throw new JsonException(''Unexpected character while parsing path indexer: '' + _expression[_currentIndex]);", span="403-403"];
n197 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuery(char)", label="_currentIndex++", span="406-406"];
n199 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuery(char)", label="_currentIndex++", span="410-410"];
n206 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression()", label="Entry Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression()", span="482-482"];
n200 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuery(char)", label="EnsureLength(''Path ended with open indexer.'')", span="411-411"];
n201 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuery(char)", label="EatWhitespace()", span="412-412"];
n203 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuery(char)", label="throw new JsonException(''Unexpected character while parsing path indexer: '' + _expression[_currentIndex]);", span="416-416"];
n205 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuery(char)", label="Exit Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuery(char)", span="396-396"];
n207 [cluster="Newtonsoft.Json.Linq.JsonPath.QueryFilter.QueryFilter()", label="Entry Newtonsoft.Json.Linq.JsonPath.QueryFilter.QueryFilter()", span="5-5"];
n208 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseExpression(out System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>)", label="Entry Newtonsoft.Json.Linq.JsonPath.JPath.TryParseExpression(out System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>)", span="425-425"];
n209 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseExpression(out System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>)", label="_expression[_currentIndex] == '$'", span="427-427"];
n210 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseExpression(out System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>)", label="expressionPath = new List<PathFilter>()", span="429-429"];
n212 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseExpression(out System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>)", label="_expression[_currentIndex] == '@'", span="432-432"];
n211 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseExpression(out System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>)", label="expressionPath.Add(RootFilter.Instance)", span="430-430"];
n217 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseExpression(out System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>)", label="ParsePath(expressionPath, _currentIndex, true)", span="444-444"];
n220 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseExpression(out System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>)", label="Exit Newtonsoft.Json.Linq.JsonPath.JPath.TryParseExpression(out System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>)", span="425-425"];
n213 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseExpression(out System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>)", label="expressionPath = new List<PathFilter>()", span="434-434"];
n214 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseExpression(out System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>)", label="expressionPath = null", span="438-438"];
n215 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseExpression(out System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>)", label="return false;", span="439-439"];
n216 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseExpression(out System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>)", label="_currentIndex++", span="442-442"];
n218 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseExpression(out System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>)", label="throw new JsonException(''Path ended with open query.'');", span="446-446"];
n219 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseExpression(out System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>)", label="return true;", span="449-449"];
n221 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.CreateUnexpectedCharacterException()", label="Entry Newtonsoft.Json.Linq.JsonPath.JPath.CreateUnexpectedCharacterException()", span="452-452"];
n222 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.CreateUnexpectedCharacterException()", label="return new JsonException(''Unexpected character while parsing path query: '' + _expression[_currentIndex]);", span="454-454"];
n223 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.CreateUnexpectedCharacterException()", label="Exit Newtonsoft.Json.Linq.JsonPath.JPath.CreateUnexpectedCharacterException()", span="452-452"];
n224 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseSide()", label="Entry Newtonsoft.Json.Linq.JsonPath.JPath.ParseSide()", span="457-457"];
n225 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseSide()", label="EatWhitespace()", span="459-459"];
n226 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseSide()", label="List<PathFilter> expressionPath", span="461-461"];
n228 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseSide()", label="EatWhitespace()", span="464-464"];
n231 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseSide()", label="object value", span="470-470"];
n230 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseSide()", label="return expressionPath;", span="467-467"];
n229 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseSide()", label="EnsureLength(''Path ended with open query.'')", span="465-465"];
n232 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseSide()", label="TryParseValue(out value)", span="471-471"];
n233 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseSide()", label="EatWhitespace()", span="473-473"];
n236 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseSide()", label="throw CreateUnexpectedCharacterException();", span="479-479"];
n238 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseValue(out object)", label="Entry Newtonsoft.Json.Linq.JsonPath.JPath.TryParseValue(out object)", span="574-574"];
n235 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseSide()", label="return new JValue(value);", span="476-476"];
n234 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseSide()", label="EnsureLength(''Path ended with open query.'')", span="474-474"];
n237 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseSide()", label="Exit Newtonsoft.Json.Linq.JsonPath.JPath.ParseSide()", span="457-457"];
n239 [cluster="Newtonsoft.Json.Linq.JValue.JValue(object)", label="Entry Newtonsoft.Json.Linq.JValue.JValue(object)", span="190-190"];
n240 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression()", label="QueryExpression rootExpression = null", span="484-484"];
n241 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression()", label="CompositeExpression parentExpression = null", span="485-485"];
n254 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression()", label="return rootExpression;", span="518-518"];
n263 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression()", label="rootExpression == null", span="538-538"];
n273 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression()", label="rootExpression == null", span="561-561"];
n242 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression()", label="_currentIndex < _expression.Length", span="487-487"];
n252 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression()", label="parentExpression != null", span="515-515"];
n253 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression()", label="parentExpression.Expressions.Add(booleanExpression)", span="517-517"];
n259 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression()", label="parentExpression == null || parentExpression.Operator != QueryOperator.And", span="530-530"];
n261 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression()", label="parentExpression?.Expressions.Add(andExpression)", span="534-534"];
n265 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression()", label="parentExpression.Expressions.Add(booleanExpression)", span="544-544"];
n269 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression()", label="parentExpression == null || parentExpression.Operator != QueryOperator.Or", span="553-553"];
n271 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression()", label="parentExpression?.Expressions.Add(orExpression)", span="557-557"];
n275 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression()", label="parentExpression.Expressions.Add(booleanExpression)", span="567-567"];
n276 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression()", label="throw new JsonException(''Path ended with open query.'');", span="571-571"];
n244 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression()", label="object right = null", span="490-490"];
n250 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression()", label="BooleanQueryExpression booleanExpression = new BooleanQueryExpression\r\n                {\r\n                    Left = left,\r\n                    Operator = op,\r\n                    Right = right\r\n                }", span="506-511"];
n245 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression()", label="QueryOperator op", span="492-492"];
n246 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression()", label="_expression[_currentIndex] == ')'\r\n                    || _expression[_currentIndex] == '|'\r\n                    || _expression[_currentIndex] == '&'", span="493-495"];
n247 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression()", label="op = QueryOperator.Exists", span="497-497"];
n248 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression()", label="op = ParseOperator()", span="501-501"];
n278 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseOperator()", label="Entry Newtonsoft.Json.Linq.JsonPath.JPath.ParseOperator()", span="709-709"];
n251 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression()", label="_expression[_currentIndex] == ')'", span="513-513"];
n279 [cluster="Newtonsoft.Json.Linq.JsonPath.BooleanQueryExpression.BooleanQueryExpression()", label="Entry Newtonsoft.Json.Linq.JsonPath.BooleanQueryExpression.BooleanQueryExpression()", span="71-71"];
n255 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression()", label="return booleanExpression;", span="521-521"];
n256 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression()", label="_expression[_currentIndex] == '&'", span="523-523"];
n257 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression()", label="!Match(''&&'')", span="525-525"];
n266 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression()", label="_expression[_currentIndex] == '|'", span="546-546"];
n258 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression()", label="throw CreateUnexpectedCharacterException();", span="527-527"];
n280 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.Match(string)", label="Entry Newtonsoft.Json.Linq.JsonPath.JPath.Match(string)", span="690-690"];
n260 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression()", label="CompositeExpression andExpression = new CompositeExpression { Operator = QueryOperator.And }", span="532-532"];
n281 [cluster="Newtonsoft.Json.Linq.JsonPath.CompositeExpression.CompositeExpression()", label="Entry Newtonsoft.Json.Linq.JsonPath.CompositeExpression.CompositeExpression()", span="38-38"];
n262 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression()", label="parentExpression = andExpression", span="536-536"];
n264 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression()", label="rootExpression = parentExpression", span="540-540"];
n267 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression()", label="!Match(''||'')", span="548-548"];
n268 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression()", label="throw CreateUnexpectedCharacterException();", span="550-550"];
n270 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression()", label="CompositeExpression orExpression = new CompositeExpression { Operator = QueryOperator.Or }", span="555-555"];
n272 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression()", label="parentExpression = orExpression", span="559-559"];
n274 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression()", label="rootExpression = parentExpression", span="563-563"];
n277 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression()", label="Exit Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression()", span="482-482"];
n282 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseValue(out object)", label="char currentChar = _expression[_currentIndex]", span="576-576"];
n283 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseValue(out object)", label="currentChar == '\''", span="577-577"];
n286 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseValue(out object)", label="char.IsDigit(currentChar) || currentChar == '-'", span="582-582"];
n288 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseValue(out object)", label="sb.Append(currentChar)", span="585-585"];
n305 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseValue(out object)", label="currentChar == 't'", span="617-617"];
n309 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseValue(out object)", label="currentChar == 'f'", span="625-625"];
n313 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseValue(out object)", label="currentChar == 'n'", span="633-633"];
n284 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseValue(out object)", label="value = ReadQuotedString()", span="579-579"];
n285 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseValue(out object)", label="return true;", span="580-580"];
n320 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ReadQuotedString()", label="Entry Newtonsoft.Json.Linq.JsonPath.JPath.ReadQuotedString()", span="646-646"];
n287 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseValue(out object)", label="StringBuilder sb = new StringBuilder()", span="584-584"];
n321 [cluster="System.Text.StringBuilder.StringBuilder()", label="Entry System.Text.StringBuilder.StringBuilder()", span="0-0"];
n293 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseValue(out object)", label="string numberText = sb.ToString()", span="593-593"];
n303 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseValue(out object)", label="sb.Append(currentChar)", span="612-612"];
n289 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseValue(out object)", label="_currentIndex++", span="587-587"];
n322 [cluster="System.Text.StringBuilder.Append(char)", label="Entry System.Text.StringBuilder.Append(char)", span="0-0"];
n290 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseValue(out object)", label="_currentIndex < _expression.Length", span="588-588"];
n291 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseValue(out object)", label="currentChar = _expression[_currentIndex]", span="590-590"];
n317 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseValue(out object)", label="value = null", span="642-642"];
n292 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseValue(out object)", label="currentChar == ' ' || currentChar == ')'", span="591-591"];
n294 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseValue(out object)", label="numberText.IndexOfAny(new char[] { '.', 'E', 'e' }) != -1", span="595-595"];
n323 [cluster="System.Text.StringBuilder.ToString()", label="Entry System.Text.StringBuilder.ToString()", span="0-0"];
n296 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseValue(out object)", label="bool result = double.TryParse(numberText, NumberStyles.Float | NumberStyles.AllowThousands, CultureInfo.InvariantCulture, out d)", span="598-598"];
n300 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseValue(out object)", label="bool result = long.TryParse(numberText, NumberStyles.Integer, CultureInfo.InvariantCulture, out l)", span="605-605"];
n295 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseValue(out object)", label="double d", span="597-597"];
n299 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseValue(out object)", label="long l", span="604-604"];
n324 [cluster="string.IndexOfAny(char[])", label="Entry string.IndexOfAny(char[])", span="0-0"];
n297 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseValue(out object)", label="value = d", span="599-599"];
n325 [cluster="double.TryParse(string, System.Globalization.NumberStyles, System.IFormatProvider, out double)", label="Entry double.TryParse(string, System.Globalization.NumberStyles, System.IFormatProvider, out double)", span="0-0"];
n298 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseValue(out object)", label="return result;", span="600-600"];
n301 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseValue(out object)", label="value = l", span="606-606"];
n326 [cluster="long.TryParse(string, System.Globalization.NumberStyles, System.IFormatProvider, out long)", label="Entry long.TryParse(string, System.Globalization.NumberStyles, System.IFormatProvider, out long)", span="0-0"];
n302 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseValue(out object)", label="return result;", span="607-607"];
n304 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseValue(out object)", label="_currentIndex++", span="613-613"];
n306 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseValue(out object)", label="Match(''true'')", span="619-619"];
n307 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseValue(out object)", label="value = true", span="621-621"];
n308 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseValue(out object)", label="return true;", span="622-622"];
n310 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseValue(out object)", label="Match(''false'')", span="627-627"];
n311 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseValue(out object)", label="value = false", span="629-629"];
n312 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseValue(out object)", label="return true;", span="630-630"];
n314 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseValue(out object)", label="Match(''null'')", span="635-635"];
n315 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseValue(out object)", label="value = null", span="637-637"];
n316 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseValue(out object)", label="return true;", span="638-638"];
n318 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseValue(out object)", label="return false;", span="643-643"];
n319 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseValue(out object)", label="Exit Newtonsoft.Json.Linq.JsonPath.JPath.TryParseValue(out object)", span="574-574"];
n327 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ReadQuotedString()", label="StringBuilder sb = new StringBuilder()", span="648-648"];
n328 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ReadQuotedString()", label="_currentIndex++", span="650-650"];
n334 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ReadQuotedString()", label="sb.Append('\'')", span="660-660"];
n336 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ReadQuotedString()", label="sb.Append('\\')", span="664-664"];
n341 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ReadQuotedString()", label="return sb.ToString();", span="677-677"];
n343 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ReadQuotedString()", label="sb.Append(currentChar)", span="683-683"];
n329 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ReadQuotedString()", label="_currentIndex < _expression.Length", span="651-651"];
n330 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ReadQuotedString()", label="char currentChar = _expression[_currentIndex]", span="653-653"];
n344 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ReadQuotedString()", label="throw new JsonException(''Path ended with an open string.'');", span="687-687"];
n331 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ReadQuotedString()", label="currentChar == '\\' && _currentIndex + 1 < _expression.Length", span="654-654"];
n339 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ReadQuotedString()", label="currentChar == '\''", span="673-673"];
n332 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ReadQuotedString()", label="_currentIndex++", span="656-656"];
n333 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ReadQuotedString()", label="_expression[_currentIndex] == '\''", span="658-658"];
n335 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ReadQuotedString()", label="_expression[_currentIndex] == '\\'", span="662-662"];
n337 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ReadQuotedString()", label="throw new JsonException(@''Unknown escape character: \'' + _expression[_currentIndex]);", span="668-668"];
n338 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ReadQuotedString()", label="_currentIndex++", span="671-671"];
n340 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ReadQuotedString()", label="_currentIndex++", span="675-675"];
n342 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ReadQuotedString()", label="_currentIndex++", span="682-682"];
n345 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ReadQuotedString()", label="Exit Newtonsoft.Json.Linq.JsonPath.JPath.ReadQuotedString()", span="646-646"];
n346 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.Match(string)", label="int currentPosition = _currentIndex", span="692-692"];
n347 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.Match(string)", label=s, span="693-693"];
n348 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.Match(string)", label="currentPosition < _expression.Length && _expression[currentPosition] == c", span="695-695"];
n349 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.Match(string)", label="currentPosition++", span="697-697"];
n351 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.Match(string)", label="_currentIndex = currentPosition", span="705-705"];
n350 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.Match(string)", label="return false;", span="701-701"];
n352 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.Match(string)", label="return true;", span="706-706"];
n353 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.Match(string)", label="Exit Newtonsoft.Json.Linq.JsonPath.JPath.Match(string)", span="690-690"];
n354 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseOperator()", label="_currentIndex + 1 >= _expression.Length", span="711-711"];
n355 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseOperator()", label="throw new JsonException(''Path ended with open query.'');", span="713-713"];
n356 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseOperator()", label="Match(''=='')", span="716-716"];
n357 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseOperator()", label="return QueryOperator.Equals;", span="718-718"];
n358 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseOperator()", label="Match(''!='') || Match(''<>'')", span="720-720"];
n359 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseOperator()", label="return QueryOperator.NotEquals;", span="722-722"];
n360 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseOperator()", label="Match(''<='')", span="724-724"];
n361 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseOperator()", label="return QueryOperator.LessThanOrEquals;", span="726-726"];
n362 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseOperator()", label="Match(''<'')", span="728-728"];
n363 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseOperator()", label="return QueryOperator.LessThan;", span="730-730"];
n364 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseOperator()", label="Match(''>='')", span="732-732"];
n365 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseOperator()", label="return QueryOperator.GreaterThanOrEquals;", span="734-734"];
n366 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseOperator()", label="Match(''>'')", span="736-736"];
n367 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseOperator()", label="return QueryOperator.GreaterThan;", span="738-738"];
n368 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseOperator()", label="throw new JsonException(''Could not read query operator.'');", span="741-741"];
n369 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseOperator()", label="Exit Newtonsoft.Json.Linq.JsonPath.JPath.ParseOperator()", span="709-709"];
n370 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuotedField(char, bool)", label="List<string> fields = null", span="746-746"];
n375 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuotedField(char, bool)", label="_expression[_currentIndex] == indexerCloseChar", span="755-755"];
n378 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuotedField(char, bool)", label="return (scan)\r\n                            ? (PathFilter)new ScanMultipleFilter { Names = fields }\r\n                            : (PathFilter)new FieldMultipleFilter { Names = fields };", span="760-762"];
n379 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuotedField(char, bool)", label="return CreatePathFilter(field, scan);", span="766-766"];
n371 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuotedField(char, bool)", label="_currentIndex < _expression.Length", span="748-748"];
n376 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuotedField(char, bool)", label="fields != null", span="757-757"];
n377 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuotedField(char, bool)", label="fields.Add(field)", span="759-759"];
n383 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuotedField(char, bool)", label="fields == null", span="774-774"];
n385 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuotedField(char, bool)", label="fields.Add(field)", span="779-779"];
n372 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuotedField(char, bool)", label="string field = ReadQuotedString()", span="750-750"];
n387 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuotedField(char, bool)", label="throw new JsonException(''Path ended with open indexer.'');", span="787-787"];
n373 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuotedField(char, bool)", label="EatWhitespace()", span="752-752"];
n374 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuotedField(char, bool)", label="EnsureLength(''Path ended with open indexer.'')", span="753-753"];
n380 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuotedField(char, bool)", label="_expression[_currentIndex] == ','", span="769-769"];
n381 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuotedField(char, bool)", label="_currentIndex++", span="771-771"];
n386 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuotedField(char, bool)", label="throw new JsonException(''Unexpected character while parsing path indexer: '' + _expression[_currentIndex]);", span="783-783"];
n382 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuotedField(char, bool)", label="EatWhitespace()", span="772-772"];
n384 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuotedField(char, bool)", label="fields = new List<string>()", span="776-776"];
n388 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuotedField(char, bool)", label="Exit Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuotedField(char, bool)", span="744-744"];
n389 [cluster="Newtonsoft.Json.Linq.JsonPath.ScanMultipleFilter.ScanMultipleFilter()", label="Entry Newtonsoft.Json.Linq.JsonPath.ScanMultipleFilter.ScanMultipleFilter()", span="4-4"];
n390 [cluster="Newtonsoft.Json.Linq.JsonPath.FieldMultipleFilter.FieldMultipleFilter()", label="Entry Newtonsoft.Json.Linq.JsonPath.FieldMultipleFilter.FieldMultipleFilter()", span="11-11"];
n391 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.EnsureLength(string)", label="_currentIndex >= _expression.Length", span="792-792"];
n392 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.EnsureLength(string)", label="throw new JsonException(message);", span="794-794"];
n393 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.EnsureLength(string)", label="Exit Newtonsoft.Json.Linq.JsonPath.JPath.EnsureLength(string)", span="790-790"];
n394 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.Evaluate(Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken, bool)", label="Entry Newtonsoft.Json.Linq.JsonPath.JPath.Evaluate(Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken, bool)", span="798-798"];
n395 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.Evaluate(Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken, bool)", label="return Evaluate(Filters, root, t, errorWhenNoMatch);", span="800-800"];
n396 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.Evaluate(Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken, bool)", label="Exit Newtonsoft.Json.Linq.JsonPath.JPath.Evaluate(Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken, bool)", span="798-798"];
n397 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.Evaluate(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken, bool)", label="Entry Newtonsoft.Json.Linq.JsonPath.JPath.Evaluate(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken, bool)", span="803-803"];
n398 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.Evaluate(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken, bool)", label="IEnumerable<JToken> current = new[] { t }", span="805-805"];
n399 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.Evaluate(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken, bool)", label=filters, span="806-806"];
n400 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.Evaluate(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken, bool)", label="current = filter.ExecuteFilter(root, current, errorWhenNoMatch)", span="808-808"];
n401 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.Evaluate(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken, bool)", label="return current;", span="811-811"];
n403 [cluster="Newtonsoft.Json.Linq.JsonPath.PathFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", label="Entry Newtonsoft.Json.Linq.JsonPath.PathFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", span="8-8"];
n402 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.Evaluate(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken, bool)", label="Exit Newtonsoft.Json.Linq.JsonPath.JPath.Evaluate(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken, bool)", span="803-803"];
d102 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseIndexer(char, bool)", color=green, community=0, label="return ParseQuery(indexerCloseChar, scan);", prediction=0, span="218-218"];
d88 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseIndexer(char, bool)", label="Entry Newtonsoft.Json.Linq.JsonPath.JPath.ParseIndexer(char, bool)", span="202-202"];
d96 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseIndexer(char, bool)", label="char indexerCloseChar = (indexerOpenChar == '[') ? ']' : ')'", span="206-206"];
d107 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuery(char, bool)", label="Entry Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuery(char, bool)", span="396-396"];
d198 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuery(char, bool)", color=green, community=0, label="QueryExpression expression = ParseExpression(scan)", prediction=1, span="408-408"];
d197 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuery(char, bool)", label="_currentIndex++", span="406-406"];
d199 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuery(char, bool)", label="_currentIndex++", span="410-410"];
d208 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression(bool)", label="Entry Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression(bool)", span="492-492"];
d205 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuery(char, bool)", color=green, community=1, label="return new QueryFilter\r\n                {\r\n                    Expression = expression\r\n                };", prediction=2, span="421-424"];
d206 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuery(char, bool)", color=green, community=1, label="return new QueryScanFilter\r\n                {\r\n                    Expression = expression\r\n                };", prediction=3, span="428-431"];
d204 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuery(char, bool)", color=green, community=0, label="!scan", prediction=4, span="419-419"];
d202 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuery(char, bool)", label="_expression[_currentIndex] != indexerCloseChar", span="414-414"];
d207 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuery(char, bool)", label="Exit Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuery(char, bool)", span="396-396"];
d210 [cluster="Newtonsoft.Json.Linq.JsonPath.QueryScanFilter.QueryScanFilter()", label="Entry Newtonsoft.Json.Linq.JsonPath.QueryScanFilter.QueryScanFilter()", span="5-5"];
d230 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseSide(bool)", color=green, community=0, label="TryParseExpression(scan, out expressionPath)", prediction=0, span="472-472"];
d227 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseSide(bool)", label="Entry Newtonsoft.Json.Linq.JsonPath.JPath.ParseSide(bool)", span="467-467"];
d229 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseSide(bool)", label="List<PathFilter> expressionPath", span="471-471"];
d231 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseSide(bool)", label="EatWhitespace()", span="474-474"];
d234 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseSide(bool)", label="object value", span="480-480"];
d211 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseExpression(bool, out System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>)", label="Entry Newtonsoft.Json.Linq.JsonPath.JPath.TryParseExpression(bool, out System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>)", span="435-435"];
d233 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseSide(bool)", label="return expressionPath;", span="477-477"];
d246 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression(bool)", color=green, community=0, label="object left = ParseSide(scan)", prediction=6, span="499-499"];
d245 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression(bool)", label="_currentIndex < _expression.Length", span="497-497"];
d247 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression(bool)", label="object right = null", span="500-500"];
d253 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression(bool)", label="BooleanQueryExpression booleanExpression = new BooleanQueryExpression\r\n                {\r\n                    Left = left,\r\n                    Operator = op,\r\n                    Right = right\r\n                }", span="516-521"];
d252 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression(bool)", color=green, community=0, label="right = ParseSide(scan)", prediction=7, span="513-513"];
d251 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression(bool)", label="op = ParseOperator()", span="511-511"];
d193 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuery(char, bool)", label="_currentIndex++", span="398-398"];
d195 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuery(char, bool)", label="_expression[_currentIndex] != '('", span="401-401"];
d200 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuery(char, bool)", label="EnsureLength(''Path ended with open indexer.'')", span="411-411"];
d280 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression(bool)", label="Exit Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression(bool)", span="492-492"];
d243 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression(bool)", label="QueryExpression rootExpression = null", span="494-494"];
d201 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuery(char, bool)", label="EatWhitespace()", span="412-412"];
d203 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuery(char, bool)", label="throw new JsonException(''Unexpected character while parsing path indexer: '' + _expression[_currentIndex]);", span="416-416"];
d196 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuery(char, bool)", label="throw new JsonException(''Unexpected character while parsing path indexer: '' + _expression[_currentIndex]);", span="403-403"];
d240 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseSide(bool)", label="Exit Newtonsoft.Json.Linq.JsonPath.JPath.ParseSide(bool)", span="467-467"];
d228 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseSide(bool)", label="EatWhitespace()", span="469-469"];
d232 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseSide(bool)", label="EnsureLength(''Path ended with open query.'')", span="475-475"];
d235 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseSide(bool)", label="TryParseValue(out value)", span="481-481"];
d28 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", label="Entry Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", span="90-90"];
d223 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseExpression(bool, out System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>)", label="Exit Newtonsoft.Json.Linq.JsonPath.JPath.TryParseExpression(bool, out System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>)", span="435-435"];
d212 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseExpression(bool, out System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>)", label="_expression[_currentIndex] == '$'", span="437-437"];
d21 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseMain()", label="!ParsePath(Filters, currentPartStartIndex, false)", span="77-77"];
d220 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseExpression(bool, out System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>)", label="ParsePath(expressionPath, _currentIndex, true)", span="454-454"];
d244 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression(bool)", label="CompositeExpression parentExpression = null", span="495-495"];
d278 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression(bool)", label="parentExpression.Expressions.Add(booleanExpression)", span="577-577"];
d269 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression(bool)", label="_expression[_currentIndex] == '|'", span="556-556"];
d279 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression(bool)", label="throw new JsonException(''Path ended with open query.'');", span="581-581"];
d248 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression(bool)", label="QueryOperator op", span="502-502"];
d250 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression(bool)", label="op = QueryOperator.Exists", span="507-507"];
d254 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression(bool)", label="_expression[_currentIndex] == ')'", span="523-523"];
d256 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression(bool)", label="parentExpression.Expressions.Add(booleanExpression)", span="527-527"];
d258 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression(bool)", label="return booleanExpression;", span="531-531"];
d268 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression(bool)", label="parentExpression.Expressions.Add(booleanExpression)", span="554-554"];
d249 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression(bool)", label="_expression[_currentIndex] == ')'\r\n                    || _expression[_currentIndex] == '|'\r\n                    || _expression[_currentIndex] == '&'", span="503-505"];
d194 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuery(char, bool)", label="EnsureLength(''Path ended with open indexer.'')", span="399-399"];
d257 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression(bool)", label="return rootExpression;", span="528-528"];
d261 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression(bool)", label="throw CreateUnexpectedCharacterException();", span="537-537"];
d271 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression(bool)", label="throw CreateUnexpectedCharacterException();", span="560-560"];
d266 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression(bool)", label="rootExpression == null", span="548-548"];
d276 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression(bool)", label="rootExpression == null", span="571-571"];
d239 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseSide(bool)", label="throw CreateUnexpectedCharacterException();", span="489-489"];
d238 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseSide(bool)", label="return new JValue(value);", span="486-486"];
d236 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseSide(bool)", label="EatWhitespace()", span="483-483"];
d213 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseExpression(bool, out System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>)", label="expressionPath = new List<PathFilter>()", span="439-439"];
d216 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseExpression(bool, out System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>)", label="expressionPath = new List<PathFilter>()", span="444-444"];
d217 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseExpression(bool, out System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>)", label="expressionPath = null", span="448-448"];
d218 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseExpression(bool, out System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>)", label="return false;", span="449-449"];
d221 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseExpression(bool, out System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>)", label="throw new JsonException(''Path ended with open query.'');", span="456-456"];
d222 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseExpression(bool, out System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>)", label="return true;", span="459-459"];
d215 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseExpression(bool, out System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>)", label="_expression[_currentIndex] == '@'", span="442-442"];
d219 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseExpression(bool, out System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>)", label="_currentIndex++", span="452-452"];
d255 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression(bool)", label="parentExpression != null", span="525-525"];
d262 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression(bool)", label="parentExpression == null || parentExpression.Operator != QueryOperator.And", span="540-540"];
d264 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression(bool)", label="parentExpression?.Expressions.Add(andExpression)", span="544-544"];
d272 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression(bool)", label="parentExpression == null || parentExpression.Operator != QueryOperator.Or", span="563-563"];
d274 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression(bool)", label="parentExpression?.Expressions.Add(orExpression)", span="567-567"];
d263 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression(bool)", label="CompositeExpression andExpression = new CompositeExpression { Operator = QueryOperator.And }", span="542-542"];
d273 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression(bool)", label="CompositeExpression orExpression = new CompositeExpression { Operator = QueryOperator.Or }", span="565-565"];
d265 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression(bool)", label="parentExpression = andExpression", span="546-546"];
d275 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression(bool)", label="parentExpression = orExpression", span="569-569"];
d277 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression(bool)", label="rootExpression = parentExpression", span="573-573"];
d259 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression(bool)", label="_expression[_currentIndex] == '&'", span="533-533"];
d270 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression(bool)", label="!Match(''||'')", span="558-558"];
d267 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression(bool)", label="rootExpression = parentExpression", span="550-550"];
d260 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression(bool)", label="!Match(''&&'')", span="535-535"];
d237 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseSide(bool)", label="EnsureLength(''Path ended with open query.'')", span="484-484"];
d214 [cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseExpression(bool, out System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>)", label="expressionPath.Add(RootFilter.Instance)", span="440-440"];
m0_511 [cluster="System.Guid.Guid(string)", file="JPathExecuteTests.cs", label="Entry System.Guid.Guid(string)", span="0-0"];
m0_179 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingPropertyWithError()", file="JPathExecuteTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingPropertyWithError()", span="399-399"];
m0_180 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingPropertyWithError()", file="JPathExecuteTests.cs", label="JObject o = new JObject(\r\n                new JProperty(''Blah'', 1))", span="401-402"];
m0_181 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingPropertyWithError()", file="JPathExecuteTests.cs", label="ExceptionAssert.Throws<JsonException>(() => { o.SelectToken(''Missing'', true); }, ''Property 'Missing' does not exist on JObject.'')", span="404-404"];
m0_182 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingPropertyWithError()", file="JPathExecuteTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingPropertyWithError()", span="399-399"];
m0_446 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NestedQuery()", file="JPathExecuteTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NestedQuery()", span="776-776"];
m0_447 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NestedQuery()", file="JPathExecuteTests.cs", label="JArray a = new JArray(\r\n                new JObject(\r\n                    new JProperty(''name'', ''Bad Boys''),\r\n                    new JProperty(''cast'', new JArray(\r\n                        new JObject(new JProperty(''name'', ''Will Smith''))))),\r\n                new JObject(\r\n                    new JProperty(''name'', ''Independence Day''),\r\n                    new JProperty(''cast'', new JArray(\r\n                        new JObject(new JProperty(''name'', ''Will Smith''))))),\r\n                new JObject(\r\n                    new JProperty(''name'', ''The Rock''),\r\n                    new JProperty(''cast'', new JArray(\r\n                        new JObject(new JProperty(''name'', ''Nick Cage'')))))\r\n                )", span="778-791"];
m0_448 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NestedQuery()", file="JPathExecuteTests.cs", label="IList<JToken> t = a.SelectTokens(''[?(@.cast[?(@.name=='Will Smith')])].name'').ToList()", span="793-793"];
m0_449 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NestedQuery()", file="JPathExecuteTests.cs", label="Assert.IsNotNull(t)", span="794-794"];
m0_450 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NestedQuery()", file="JPathExecuteTests.cs", label="Assert.AreEqual(2, t.Count)", span="795-795"];
m0_451 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NestedQuery()", file="JPathExecuteTests.cs", label="Assert.AreEqual(''Bad Boys'', (string)t[0])", span="796-796"];
m0_452 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NestedQuery()", file="JPathExecuteTests.cs", label="Assert.AreEqual(''Independence Day'', (string)t[1])", span="797-797"];
m0_453 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NestedQuery()", file="JPathExecuteTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NestedQuery()", span="776-776"];
m0_238 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArray()", file="JPathExecuteTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArray()", span="468-468"];
m0_239 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArray()", file="JPathExecuteTests.cs", label="JArray a = new JArray(1, 2, 3, 4)", span="470-470"];
m0_240 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArray()", file="JPathExecuteTests.cs", label="JToken t = a.SelectToken(''[1]'')", span="472-472"];
m0_241 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArray()", file="JPathExecuteTests.cs", label="Assert.IsNotNull(t)", span="473-473"];
m0_242 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArray()", file="JPathExecuteTests.cs", label="Assert.AreEqual(JTokenType.Integer, t.Type)", span="474-474"];
m0_243 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArray()", file="JPathExecuteTests.cs", label="Assert.AreEqual(2, (int)t)", span="475-475"];
m0_244 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArray()", file="JPathExecuteTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArray()", span="468-468"];
m0_83 [cluster="Newtonsoft.Json.Linq.JArray.JArray(params object[])", file="JPathExecuteTests.cs", label="Entry Newtonsoft.Json.Linq.JArray.JArray(params object[])", span="82-82"];
m0_553 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsAndNonPrimativeValues()", file="JPathExecuteTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsAndNonPrimativeValues()", span="1065-1065"];
m0_554 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsAndNonPrimativeValues()", file="JPathExecuteTests.cs", label="string json = @''[\r\n  {\r\n    ''''name'''': ''''string'''',\r\n    ''''value'''': ''''aString''''\r\n  },\r\n  {\r\n    ''''name'''': ''''number'''',\r\n    ''''value'''': 123\r\n  },\r\n  {\r\n    ''''name'''': ''''array'''',\r\n    ''''value'''': [\r\n      1,\r\n      2,\r\n      3,\r\n      4\r\n    ]\r\n  },\r\n  {\r\n    ''''name'''': ''''object'''',\r\n    ''''value'''': {\r\n      ''''1'''': 1\r\n    }\r\n  }\r\n]''", span="1067-1091"];
m0_555 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsAndNonPrimativeValues()", file="JPathExecuteTests.cs", label="JArray a = JArray.Parse(json)", span="1093-1093"];
m0_556 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsAndNonPrimativeValues()", file="JPathExecuteTests.cs", label="List<JToken> result = a.SelectTokens(''$.[?(@.value!=1)]'').ToList()", span="1095-1095"];
m0_558 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsAndNonPrimativeValues()", file="JPathExecuteTests.cs", label="result = a.SelectTokens(''$.[?(@.value!='2000-12-05T05:07:59-10:00')]'').ToList()", span="1098-1098"];
m0_560 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsAndNonPrimativeValues()", file="JPathExecuteTests.cs", label="result = a.SelectTokens(''$.[?(@.value!=null)]'').ToList()", span="1101-1101"];
m0_562 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsAndNonPrimativeValues()", file="JPathExecuteTests.cs", label="result = a.SelectTokens(''$.[?(@.value!=123)]'').ToList()", span="1104-1104"];
m0_564 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsAndNonPrimativeValues()", file="JPathExecuteTests.cs", label="result = a.SelectTokens(''$.[?(@.value)]'').ToList()", span="1107-1107"];
m0_557 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsAndNonPrimativeValues()", file="JPathExecuteTests.cs", label="Assert.AreEqual(4, result.Count)", span="1096-1096"];
m0_559 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsAndNonPrimativeValues()", file="JPathExecuteTests.cs", label="Assert.AreEqual(4, result.Count)", span="1099-1099"];
m0_561 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsAndNonPrimativeValues()", file="JPathExecuteTests.cs", label="Assert.AreEqual(4, result.Count)", span="1102-1102"];
m0_563 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsAndNonPrimativeValues()", file="JPathExecuteTests.cs", label="Assert.AreEqual(3, result.Count)", span="1105-1105"];
m0_565 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsAndNonPrimativeValues()", file="JPathExecuteTests.cs", label="Assert.AreEqual(4, result.Count)", span="1108-1108"];
m0_566 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsAndNonPrimativeValues()", file="JPathExecuteTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsAndNonPrimativeValues()", span="1065-1065"];
m0_175 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateConstructorOutOfBoundsIndxer()", file="JPathExecuteTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateConstructorOutOfBoundsIndxer()", span="391-391"];
m0_176 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateConstructorOutOfBoundsIndxer()", file="JPathExecuteTests.cs", label="JConstructor c = new JConstructor(''Blah'')", span="393-393"];
m0_177 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateConstructorOutOfBoundsIndxer()", file="JPathExecuteTests.cs", label="Assert.IsNull(c.SelectToken(''[1]''))", span="395-395"];
m0_178 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateConstructorOutOfBoundsIndxer()", file="JPathExecuteTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateConstructorOutOfBoundsIndxer()", span="391-391"];
m0_113 [cluster="Unk.IsNull", file="JPathExecuteTests.cs", label="Entry Unk.IsNull", span=""];
m0_404 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.MultipleQueries()", file="JPathExecuteTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.MultipleQueries()", span="698-698"];
m0_405 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.MultipleQueries()", file="JPathExecuteTests.cs", label="JArray a = new JArray(1, 2, 3, 4, 5, 6, 7, 8, 9)", span="700-700"];
m0_406 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.MultipleQueries()", file="JPathExecuteTests.cs", label="IList<JToken> t = a.SelectTokens(''[?(@ <> 1)][?(@ <> 4)][?(@ < 7)]'').ToList()", span="705-705"];
m0_407 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.MultipleQueries()", file="JPathExecuteTests.cs", label="Assert.IsNotNull(t)", span="706-706"];
m0_408 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.MultipleQueries()", file="JPathExecuteTests.cs", label="Assert.AreEqual(0, t.Count)", span="707-707"];
m0_409 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.MultipleQueries()", file="JPathExecuteTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.MultipleQueries()", span="698-698"];
m0_542 [cluster="Unk.ToList", file="JPathExecuteTests.cs", label="Entry Unk.ToList", span=""];
m0_328 [cluster="Unk.IsTrue", file="JPathExecuteTests.cs", label="Entry Unk.IsTrue", span=""];
m0_9 [cluster="Newtonsoft.Json.Linq.JToken.SelectTokens(string)", file="JPathExecuteTests.cs", label="Entry Newtonsoft.Json.Linq.JToken.SelectTokens(string)", span="2339-2339"];
m0_8 [cluster="Newtonsoft.Json.Linq.JObject.Parse(string)", file="JPathExecuteTests.cs", label="Entry Newtonsoft.Json.Linq.JObject.Parse(string)", span="404-404"];
m0_119 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateIndexerOnObjectWithError()", file="JPathExecuteTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateIndexerOnObjectWithError()", span="323-323"];
m0_120 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateIndexerOnObjectWithError()", file="JPathExecuteTests.cs", label="JObject o = new JObject(\r\n                new JProperty(''Blah'', 1))", span="325-326"];
m0_121 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateIndexerOnObjectWithError()", file="JPathExecuteTests.cs", label="ExceptionAssert.Throws<JsonException>(() => { o.SelectToken(''[1]'', true); }, @''Index 1 not valid on JObject.'')", span="328-328"];
m0_122 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateIndexerOnObjectWithError()", file="JPathExecuteTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateIndexerOnObjectWithError()", span="323-323"];
m0_454 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.PathWithConstructor()", file="JPathExecuteTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.PathWithConstructor()", span="801-801"];
m0_455 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.PathWithConstructor()", file="JPathExecuteTests.cs", label="JArray a = JArray.Parse(@''[\r\n  {\r\n    ''''Property1'''': [\r\n      1,\r\n      [\r\n        [\r\n          []\r\n        ]\r\n      ]\r\n    ]\r\n  },\r\n  {\r\n    ''''Property2'''': new Constructor1(\r\n      null,\r\n      [\r\n        1\r\n      ]\r\n    )\r\n  }\r\n]'')", span="803-822"];
m0_456 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.PathWithConstructor()", file="JPathExecuteTests.cs", label="JValue v = (JValue)a.SelectToken(''[1].Property2[1][0]'')", span="824-824"];
m0_457 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.PathWithConstructor()", file="JPathExecuteTests.cs", label="Assert.AreEqual(1L, v.Value)", span="825-825"];
m0_458 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.PathWithConstructor()", file="JPathExecuteTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.PathWithConstructor()", span="801-801"];
m0_343 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="JPathExecuteTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", span="602-602"];
m0_344 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="JPathExecuteTests.cs", label="JObject o1 = new JObject { { ''Name'', 1 } }", span="604-604"];
m0_345 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="JPathExecuteTests.cs", label="JObject o2 = new JObject { { ''Name'', 2 } }", span="605-605"];
m0_347 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="JPathExecuteTests.cs", label="JArray a = new JArray(o1, o2, o3)", span="607-607"];
m0_352 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="JPathExecuteTests.cs", label="Assert.IsTrue(JToken.DeepEquals(o1, t[1]))", span="614-614"];
m0_346 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="JPathExecuteTests.cs", label="JObject o3 = new JObject { { ''Name'', new JObject { { ''Name'', new JArray(3) } } } }", span="606-606"];
m0_354 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="JPathExecuteTests.cs", label="Assert.IsTrue(JToken.DeepEquals(o2, t[3]))", span="616-616"];
m0_356 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="JPathExecuteTests.cs", label="Assert.IsTrue(JToken.DeepEquals(o3, t[5]))", span="618-618"];
m0_348 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="JPathExecuteTests.cs", label="IList<JToken> t = a.SelectTokens(''$..*'').ToList()", span="609-609"];
m0_351 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="JPathExecuteTests.cs", label="Assert.IsTrue(JToken.DeepEquals(a, t[0]))", span="613-613"];
m0_349 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="JPathExecuteTests.cs", label="Assert.IsNotNull(t)", span="610-610"];
m0_350 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="JPathExecuteTests.cs", label="Assert.AreEqual(9, t.Count)", span="611-611"];
m0_353 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="JPathExecuteTests.cs", label="Assert.AreEqual(1, (int)t[2])", span="615-615"];
m0_355 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="JPathExecuteTests.cs", label="Assert.AreEqual(2, (int)t[4])", span="617-617"];
m0_357 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="JPathExecuteTests.cs", label="Assert.IsTrue(JToken.DeepEquals(new JObject { { ''Name'', new JArray(3) } }, t[6]))", span="619-619"];
m0_358 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="JPathExecuteTests.cs", label="Assert.IsTrue(JToken.DeepEquals(new JArray(3), t[7]))", span="620-620"];
m0_359 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="JPathExecuteTests.cs", label="Assert.AreEqual(3, (int)t[8])", span="621-621"];
m0_360 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="JPathExecuteTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", span="602-602"];
m0_389 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsQuery()", file="JPathExecuteTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsQuery()", span="673-673"];
m0_390 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsQuery()", file="JPathExecuteTests.cs", label="JArray a = new JArray(\r\n                new JArray(new JObject(new JProperty(''hi'', ''ho''))),\r\n                new JArray(new JObject(new JProperty(''hi'', ''ha''))))", span="675-677"];
m0_391 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsQuery()", file="JPathExecuteTests.cs", label="IList<JToken> t = a.SelectTokens(''[ ?( @..hi <> 'ha' ) ]'').ToList()", span="679-679"];
m0_392 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsQuery()", file="JPathExecuteTests.cs", label="Assert.IsNotNull(t)", span="680-680"];
m0_393 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsQuery()", file="JPathExecuteTests.cs", label="Assert.AreEqual(1, t.Count)", span="681-681"];
m0_394 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsQuery()", file="JPathExecuteTests.cs", label="Assert.IsTrue(JToken.DeepEquals(new JArray(new JObject(new JProperty(''hi'', ''ho''))), t[0]))", span="682-682"];
m0_395 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsQuery()", file="JPathExecuteTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsQuery()", span="673-673"];
m0_543 [cluster="System.Collections.Generic.IEnumerable<TSource>.Sum<TSource>(System.Func<TSource, decimal>)", file="JPathExecuteTests.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Sum<TSource>(System.Func<TSource, decimal>)", span="0-0"];
m0_370 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateLastSingleCharacterProperty()", file="JPathExecuteTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateLastSingleCharacterProperty()", span="640-640"];
m0_371 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateLastSingleCharacterProperty()", file="JPathExecuteTests.cs", label="JObject o2 = JObject.Parse(''{'People':[{'N':'Jeff'}]}'')", span="642-642"];
m0_372 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateLastSingleCharacterProperty()", file="JPathExecuteTests.cs", label="string a2 = (string)o2.SelectToken(''People[0].N'')", span="643-643"];
m0_373 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateLastSingleCharacterProperty()", file="JPathExecuteTests.cs", label="Assert.AreEqual(''Jeff'', a2)", span="645-645"];
m0_374 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateLastSingleCharacterProperty()", file="JPathExecuteTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateLastSingleCharacterProperty()", span="640-640"];
m0_205 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySliceWithError()", file="JPathExecuteTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySliceWithError()", span="435-435"];
m0_206 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySliceWithError()", file="JPathExecuteTests.cs", label="JArray a = new JArray(1, 2, 3, 4, 5)", span="437-437"];
m0_207 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySliceWithError()", file="JPathExecuteTests.cs", label="ExceptionAssert.Throws<JsonException>(() => { a.SelectToken(''[99:]'', true); }, ''Array slice of 99 to * returned no results.'')", span="439-439"];
m0_208 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySliceWithError()", file="JPathExecuteTests.cs", label="ExceptionAssert.Throws<JsonException>(() => { a.SelectToken(''[1:-19]'', true); }, ''Array slice of 1 to -19 returned no results.'')", span="441-441"];
m0_209 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySliceWithError()", file="JPathExecuteTests.cs", label="ExceptionAssert.Throws<JsonException>(() => { a.SelectToken(''[:-19]'', true); }, ''Array slice of * to -19 returned no results.'')", span="443-443"];
m0_210 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySliceWithError()", file="JPathExecuteTests.cs", label="a = new JArray()", span="445-445"];
m0_211 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySliceWithError()", file="JPathExecuteTests.cs", label="ExceptionAssert.Throws<JsonException>(() => { a.SelectToken(''[:]'', true); }, ''Array slice of * to * returned no results.'')", span="447-447"];
m0_212 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySliceWithError()", file="JPathExecuteTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySliceWithError()", span="435-435"];
m0_494 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QueryAgainstNonStringValues()", file="JPathExecuteTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QueryAgainstNonStringValues()", span="948-948"];
m0_495 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QueryAgainstNonStringValues()", file="JPathExecuteTests.cs", label="IList<object> values = new List<object>\r\n            {\r\n                ''ff2dc672-6e15-4aa2-afb0-18f4f69596ad'',\r\n                new Guid(''ff2dc672-6e15-4aa2-afb0-18f4f69596ad''),\r\n                ''http://localhost'',\r\n                new Uri(''http://localhost''),\r\n                ''2000-12-05T05:07:59Z'',\r\n                new DateTime(2000, 12, 5, 5, 7, 59, DateTimeKind.Utc),\r\n#if !NET20\r\n                ''2000-12-05T05:07:59-10:00'',\r\n                new DateTimeOffset(2000, 12, 5, 5, 7, 59, -TimeSpan.FromHours(10)),\r\n#endif\r\n                ''SGVsbG8gd29ybGQ='',\r\n                Encoding.UTF8.GetBytes(''Hello world''),\r\n                ''365.23:59:59'',\r\n                new TimeSpan(365, 23, 59, 59)\r\n            }", span="950-966"];
m0_496 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QueryAgainstNonStringValues()", file="JPathExecuteTests.cs", label="JObject o = new JObject(\r\n                new JProperty(''prop'',\r\n                    new JArray(\r\n                        values.Select(v => new JObject(new JProperty(''childProp'', v)))\r\n                        )\r\n                    )\r\n                )", span="968-974"];
m0_497 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QueryAgainstNonStringValues()", file="JPathExecuteTests.cs", label="IList<JToken> t = o.SelectTokens(''$.prop[?(@.childProp =='ff2dc672-6e15-4aa2-afb0-18f4f69596ad')]'').ToList()", span="976-976"];
m0_499 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QueryAgainstNonStringValues()", file="JPathExecuteTests.cs", label="t = o.SelectTokens(''$.prop[?(@.childProp =='http://localhost')]'').ToList()", span="979-979"];
m0_501 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QueryAgainstNonStringValues()", file="JPathExecuteTests.cs", label="t = o.SelectTokens(''$.prop[?(@.childProp =='2000-12-05T05:07:59Z')]'').ToList()", span="982-982"];
m0_503 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QueryAgainstNonStringValues()", file="JPathExecuteTests.cs", label="t = o.SelectTokens(''$.prop[?(@.childProp =='2000-12-05T05:07:59-10:00')]'').ToList()", span="986-986"];
m0_505 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QueryAgainstNonStringValues()", file="JPathExecuteTests.cs", label="t = o.SelectTokens(''$.prop[?(@.childProp =='SGVsbG8gd29ybGQ=')]'').ToList()", span="990-990"];
m0_507 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QueryAgainstNonStringValues()", file="JPathExecuteTests.cs", label="t = o.SelectTokens(''$.prop[?(@.childProp =='365.23:59:59')]'').ToList()", span="993-993"];
m0_498 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QueryAgainstNonStringValues()", file="JPathExecuteTests.cs", label="Assert.AreEqual(2, t.Count)", span="977-977"];
m0_500 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QueryAgainstNonStringValues()", file="JPathExecuteTests.cs", label="Assert.AreEqual(2, t.Count)", span="980-980"];
m0_502 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QueryAgainstNonStringValues()", file="JPathExecuteTests.cs", label="Assert.AreEqual(2, t.Count)", span="983-983"];
m0_504 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QueryAgainstNonStringValues()", file="JPathExecuteTests.cs", label="Assert.AreEqual(2, t.Count)", span="987-987"];
m0_506 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QueryAgainstNonStringValues()", file="JPathExecuteTests.cs", label="Assert.AreEqual(2, t.Count)", span="991-991"];
m0_508 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QueryAgainstNonStringValues()", file="JPathExecuteTests.cs", label="Assert.AreEqual(2, t.Count)", span="994-994"];
m0_509 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QueryAgainstNonStringValues()", file="JPathExecuteTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QueryAgainstNonStringValues()", span="948-948"];
m0_146 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMultipleResultsError()", file="JPathExecuteTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMultipleResultsError()", span="359-359"];
m0_147 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMultipleResultsError()", file="JPathExecuteTests.cs", label="JArray a = new JArray(1, 2, 3, 4, 5)", span="361-361"];
m0_148 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMultipleResultsError()", file="JPathExecuteTests.cs", label="ExceptionAssert.Throws<JsonException>(() => { a.SelectToken(''[0, 1]''); }, @''Path returned multiple tokens.'')", span="363-363"];
m0_149 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMultipleResultsError()", file="JPathExecuteTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMultipleResultsError()", span="359-359"];
m0_459 [cluster="Newtonsoft.Json.Linq.JArray.Parse(string)", file="JPathExecuteTests.cs", label="Entry Newtonsoft.Json.Linq.JArray.Parse(string)", span="157-157"];
m0_100 [cluster="Newtonsoft.Json.Linq.JObject.JObject(params object[])", file="JPathExecuteTests.cs", label="Entry Newtonsoft.Json.Linq.JObject.JObject(params object[])", span="104-104"];
m0_375 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ExistsQuery()", file="JPathExecuteTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ExistsQuery()", span="649-649"];
m0_376 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ExistsQuery()", file="JPathExecuteTests.cs", label="JArray a = new JArray(new JObject(new JProperty(''hi'', ''ho'')), new JObject(new JProperty(''hi2'', ''ha'')))", span="651-651"];
m0_377 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ExistsQuery()", file="JPathExecuteTests.cs", label="IList<JToken> t = a.SelectTokens(''[ ?( @.hi ) ]'').ToList()", span="653-653"];
m0_378 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ExistsQuery()", file="JPathExecuteTests.cs", label="Assert.IsNotNull(t)", span="654-654"];
m0_379 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ExistsQuery()", file="JPathExecuteTests.cs", label="Assert.AreEqual(1, t.Count)", span="655-655"];
m0_380 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ExistsQuery()", file="JPathExecuteTests.cs", label="Assert.IsTrue(JToken.DeepEquals(new JObject(new JProperty(''hi'', ''ho'')), t[0]))", span="656-656"];
m0_381 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ExistsQuery()", file="JPathExecuteTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ExistsQuery()", span="649-649"];
m0_68 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWhitespaceString()", file="JPathExecuteTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWhitespaceString()", span="235-235"];
m0_69 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWhitespaceString()", file="JPathExecuteTests.cs", label="JObject o = new JObject(\r\n                new JProperty(''Blah'', 1))", span="237-238"];
m0_70 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWhitespaceString()", file="JPathExecuteTests.cs", label="JToken t = o.SelectToken('' '')", span="240-240"];
m0_71 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWhitespaceString()", file="JPathExecuteTests.cs", label="Assert.AreEqual(o, t)", span="241-241"];
m0_72 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWhitespaceString()", file="JPathExecuteTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWhitespaceString()", span="235-235"];
m0_523 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="JPathExecuteTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", span="998-998"];
m0_524 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="JPathExecuteTests.cs", label="JObject o = JObject.Parse(@''{\r\n        ''''Stores'''': [\r\n          ''''Lambton Quay'''',\r\n          ''''Willis Street''''\r\n        ],\r\n        ''''Manufacturers'''': [\r\n          {\r\n            ''''Name'''': ''''Acme Co'''',\r\n            ''''Products'''': [\r\n              {\r\n                ''''Name'''': ''''Anvil'''',\r\n                ''''Price'''': 50\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            ''''Name'''': ''''Contoso'''',\r\n            ''''Products'''': [\r\n              {\r\n                ''''Name'''': ''''Elbow Grease'''',\r\n                ''''Price'''': 99.95\r\n              },\r\n              {\r\n                ''''Name'''': ''''Headlight Fluid'''',\r\n                ''''Price'''': 4\r\n              }\r\n            ]\r\n          }\r\n        ]\r\n      }'')", span="1000-1029"];
m0_525 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="JPathExecuteTests.cs", label="string name = (string)o.SelectToken(''Manufacturers[0].Name'')", span="1031-1031"];
m0_526 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="JPathExecuteTests.cs", label="decimal productPrice = (decimal)o.SelectToken(''Manufacturers[0].Products[0].Price'')", span="1034-1034"];
m0_527 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="JPathExecuteTests.cs", label="string productName = (string)o.SelectToken(''Manufacturers[1].Products[0].Name'')", span="1037-1037"];
m0_531 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="JPathExecuteTests.cs", label="IList<string> storeNames = o.SelectToken(''Stores'').Select(s => (string)s).ToList()", span="1044-1044"];
m0_532 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="JPathExecuteTests.cs", label="IList<string> firstProductNames = o[''Manufacturers''].Select(m => (string)m.SelectToken(''Products[1].Name'')).ToList()", span="1048-1048"];
m0_533 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="JPathExecuteTests.cs", label="decimal totalPrice = o[''Manufacturers''].Sum(m => (decimal)m.SelectToken(''Products[0].Price''))", span="1052-1052"];
m0_528 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="JPathExecuteTests.cs", label="Assert.AreEqual(''Acme Co'', name)", span="1040-1040"];
m0_529 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="JPathExecuteTests.cs", label="Assert.AreEqual(50m, productPrice)", span="1041-1041"];
m0_530 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="JPathExecuteTests.cs", label="Assert.AreEqual(''Elbow Grease'', productName)", span="1042-1042"];
m0_534 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="JPathExecuteTests.cs", label="Assert.AreEqual(2, storeNames.Count)", span="1055-1055"];
m0_535 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="JPathExecuteTests.cs", label="Assert.AreEqual(''Lambton Quay'', storeNames[0])", span="1056-1056"];
m0_536 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="JPathExecuteTests.cs", label="Assert.AreEqual(''Willis Street'', storeNames[1])", span="1057-1057"];
m0_537 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="JPathExecuteTests.cs", label="Assert.AreEqual(2, firstProductNames.Count)", span="1058-1058"];
m0_538 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="JPathExecuteTests.cs", label="Assert.AreEqual(null, firstProductNames[0])", span="1059-1059"];
m0_539 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="JPathExecuteTests.cs", label="Assert.AreEqual(''Headlight Fluid'', firstProductNames[1])", span="1060-1060"];
m0_540 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="JPathExecuteTests.cs", label="Assert.AreEqual(149.95m, totalPrice)", span="1061-1061"];
m0_541 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="JPathExecuteTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", span="998-998"];
m0_114 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateIndexerOnObject()", file="JPathExecuteTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateIndexerOnObject()", span="313-313"];
m0_115 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateIndexerOnObject()", file="JPathExecuteTests.cs", label="JObject o = new JObject(\r\n                new JProperty(''Blah'', 1))", span="315-316"];
m0_116 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateIndexerOnObject()", file="JPathExecuteTests.cs", label="JToken t = o.SelectToken(''[1]'')", span="318-318"];
m0_117 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateIndexerOnObject()", file="JPathExecuteTests.cs", label="Assert.IsNull(t)", span="319-319"];
m0_118 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateIndexerOnObject()", file="JPathExecuteTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateIndexerOnObject()", span="313-313"];
m0_53 [cluster="Newtonsoft.Json.Linq.JObject.JObject(object)", file="JPathExecuteTests.cs", label="Entry Newtonsoft.Json.Linq.JObject.JObject(object)", span="113-113"];
m0_303 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScan()", file="JPathExecuteTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScan()", span="554-554"];
m0_304 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScan()", file="JPathExecuteTests.cs", label="JObject o1 = new JObject { { ''Name'', 1 } }", span="556-556"];
m0_305 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScan()", file="JPathExecuteTests.cs", label="JObject o2 = new JObject { { ''Name'', 2 } }", span="557-557"];
m0_306 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScan()", file="JPathExecuteTests.cs", label="JArray a = new JArray(o1, o2)", span="558-558"];
m0_307 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScan()", file="JPathExecuteTests.cs", label="IList<JToken> t = a.SelectTokens(''$..Name'').ToList()", span="560-560"];
m0_308 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScan()", file="JPathExecuteTests.cs", label="Assert.IsNotNull(t)", span="561-561"];
m0_309 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScan()", file="JPathExecuteTests.cs", label="Assert.AreEqual(2, t.Count)", span="562-562"];
m0_310 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScan()", file="JPathExecuteTests.cs", label="Assert.AreEqual(1, (int)t[0])", span="563-563"];
m0_311 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScan()", file="JPathExecuteTests.cs", label="Assert.AreEqual(2, (int)t[1])", span="564-564"];
m0_312 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScan()", file="JPathExecuteTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScan()", span="554-554"];
m0_245 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", span="479-479"];
m0_246 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs", label="JArray a = new JArray(1, 2, 3, 4, 5, 6, 7, 8, 9)", span="481-481"];
m0_247 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs", label="IList<JToken> t = null", span="482-482"];
m0_248 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs", label="t = a.SelectTokens(''[-3:]'').ToList()", span="484-484"];
m0_253 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs", label="t = a.SelectTokens(''[-1:-2:-1]'').ToList()", span="490-490"];
m0_256 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs", label="t = a.SelectTokens(''[-2:-1]'').ToList()", span="494-494"];
m0_259 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs", label="t = a.SelectTokens(''[1:1]'').ToList()", span="498-498"];
m0_261 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs", label="t = a.SelectTokens(''[1:2]'').ToList()", span="501-501"];
m0_264 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs", label="t = a.SelectTokens(''[::-1]'').ToList()", span="505-505"];
m0_275 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs", label="t = a.SelectTokens(''[::-2]'').ToList()", span="517-517"];
m0_249 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs", label="Assert.AreEqual(3, t.Count)", span="485-485"];
m0_250 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs", label="Assert.AreEqual(7, (int)t[0])", span="486-486"];
m0_251 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs", label="Assert.AreEqual(8, (int)t[1])", span="487-487"];
m0_252 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs", label="Assert.AreEqual(9, (int)t[2])", span="488-488"];
m0_254 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs", label="Assert.AreEqual(1, t.Count)", span="491-491"];
m0_255 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs", label="Assert.AreEqual(9, (int)t[0])", span="492-492"];
m0_257 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs", label="Assert.AreEqual(1, t.Count)", span="495-495"];
m0_258 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs", label="Assert.AreEqual(8, (int)t[0])", span="496-496"];
m0_260 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs", label="Assert.AreEqual(0, t.Count)", span="499-499"];
m0_262 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs", label="Assert.AreEqual(1, t.Count)", span="502-502"];
m0_263 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs", label="Assert.AreEqual(2, (int)t[0])", span="503-503"];
m0_265 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs", label="Assert.AreEqual(9, t.Count)", span="506-506"];
m0_266 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs", label="Assert.AreEqual(9, (int)t[0])", span="507-507"];
m0_267 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs", label="Assert.AreEqual(8, (int)t[1])", span="508-508"];
m0_268 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs", label="Assert.AreEqual(7, (int)t[2])", span="509-509"];
m0_269 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs", label="Assert.AreEqual(6, (int)t[3])", span="510-510"];
m0_270 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs", label="Assert.AreEqual(5, (int)t[4])", span="511-511"];
m0_271 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs", label="Assert.AreEqual(4, (int)t[5])", span="512-512"];
m0_272 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs", label="Assert.AreEqual(3, (int)t[6])", span="513-513"];
m0_273 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs", label="Assert.AreEqual(2, (int)t[7])", span="514-514"];
m0_274 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs", label="Assert.AreEqual(1, (int)t[8])", span="515-515"];
m0_276 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs", label="Assert.AreEqual(5, t.Count)", span="518-518"];
m0_277 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs", label="Assert.AreEqual(9, (int)t[0])", span="519-519"];
m0_278 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs", label="Assert.AreEqual(7, (int)t[1])", span="520-520"];
m0_279 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs", label="Assert.AreEqual(5, (int)t[2])", span="521-521"];
m0_280 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs", label="Assert.AreEqual(3, (int)t[3])", span="522-522"];
m0_281 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs", label="Assert.AreEqual(1, (int)t[4])", span="523-523"];
m0_282 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", span="479-479"];
m0_512 [cluster="System.Uri.Uri(string)", file="JPathExecuteTests.cs", label="Entry System.Uri.Uri(string)", span="0-0"];
m0_92 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardProperty()", file="JPathExecuteTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardProperty()", span="277-277"];
m0_93 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardProperty()", file="JPathExecuteTests.cs", label="JObject o = new JObject(\r\n                new JProperty(''Blah'', 1),\r\n                new JProperty(''Blah2'', 2))", span="279-281"];
m0_94 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardProperty()", file="JPathExecuteTests.cs", label="IList<JToken> t = o.SelectTokens(''$.*'').ToList()", span="283-283"];
m0_95 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardProperty()", file="JPathExecuteTests.cs", label="Assert.IsNotNull(t)", span="284-284"];
m0_96 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardProperty()", file="JPathExecuteTests.cs", label="Assert.AreEqual(2, t.Count)", span="285-285"];
m0_97 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardProperty()", file="JPathExecuteTests.cs", label="Assert.AreEqual(1, (int)t[0])", span="286-286"];
m0_98 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardProperty()", file="JPathExecuteTests.cs", label="Assert.AreEqual(2, (int)t[1])", span="287-287"];
m0_99 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardProperty()", file="JPathExecuteTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardProperty()", span="277-277"];
m0_329 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScanNestResults()", file="JPathExecuteTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScanNestResults()", span="585-585"];
m0_330 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScanNestResults()", file="JPathExecuteTests.cs", label="JObject o1 = new JObject { { ''Name'', 1 } }", span="587-587"];
m0_331 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScanNestResults()", file="JPathExecuteTests.cs", label="JObject o2 = new JObject { { ''Name'', 2 } }", span="588-588"];
m0_333 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScanNestResults()", file="JPathExecuteTests.cs", label="JArray a = new JArray(o1, o2, o3)", span="590-590"];
m0_332 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScanNestResults()", file="JPathExecuteTests.cs", label="JObject o3 = new JObject { { ''Name'', new JObject { { ''Name'', new JArray(3) } } } }", span="589-589"];
m0_334 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScanNestResults()", file="JPathExecuteTests.cs", label="IList<JToken> t = a.SelectTokens(''$..Name'').ToList()", span="592-592"];
m0_335 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScanNestResults()", file="JPathExecuteTests.cs", label="Assert.IsNotNull(t)", span="593-593"];
m0_336 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScanNestResults()", file="JPathExecuteTests.cs", label="Assert.AreEqual(4, t.Count)", span="594-594"];
m0_337 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScanNestResults()", file="JPathExecuteTests.cs", label="Assert.AreEqual(1, (int)t[0])", span="595-595"];
m0_338 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScanNestResults()", file="JPathExecuteTests.cs", label="Assert.AreEqual(2, (int)t[1])", span="596-596"];
m0_339 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScanNestResults()", file="JPathExecuteTests.cs", label="Assert.IsTrue(JToken.DeepEquals(new JObject { { ''Name'', new JArray(3) } }, t[2]))", span="597-597"];
m0_340 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScanNestResults()", file="JPathExecuteTests.cs", label="Assert.IsTrue(JToken.DeepEquals(new JArray(3), t[3]))", span="598-598"];
m0_341 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScanNestResults()", file="JPathExecuteTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScanNestResults()", span="585-585"];
m0_25 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ParseWithEmptyArrayContent()", file="JPathExecuteTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ParseWithEmptyArrayContent()", span="129-129"];
m0_26 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ParseWithEmptyArrayContent()", file="JPathExecuteTests.cs", label="var json = @''{\r\n    'controls': [\r\n        {\r\n            'messages': {\r\n                'addSuggestion': {\r\n                    'en-US': 'Add'\r\n                }\r\n            }\r\n        },\r\n        {\r\n            'header': {\r\n                'controls': []\r\n            },\r\n            'controls': [\r\n                {\r\n                    'controls': [\r\n                        {\r\n                            'defaultCaption': {\r\n                                'en-US': 'Sort by'\r\n                            },\r\n                            'sortOptions': [\r\n                                {\r\n                                    'label': {\r\n                                        'en-US': 'Name'\r\n                                    }\r\n                                }\r\n                            ]\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}''", span="131-164"];
m0_27 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ParseWithEmptyArrayContent()", file="JPathExecuteTests.cs", label="JObject jToken = JObject.Parse(json)", span="165-165"];
m0_28 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ParseWithEmptyArrayContent()", file="JPathExecuteTests.cs", label="IList<JToken> tokens = jToken.SelectTokens(''$..en-US'').ToList()", span="166-166"];
m0_29 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ParseWithEmptyArrayContent()", file="JPathExecuteTests.cs", label="Assert.AreEqual(3, tokens.Count)", span="168-168"];
m0_30 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ParseWithEmptyArrayContent()", file="JPathExecuteTests.cs", label="Assert.AreEqual(''Add'', (string)tokens[0])", span="169-169"];
m0_31 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ParseWithEmptyArrayContent()", file="JPathExecuteTests.cs", label="Assert.AreEqual(''Sort by'', (string)tokens[1])", span="170-170"];
m0_32 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ParseWithEmptyArrayContent()", file="JPathExecuteTests.cs", label="Assert.AreEqual(''Name'', (string)tokens[2])", span="171-171"];
m0_33 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ParseWithEmptyArrayContent()", file="JPathExecuteTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ParseWithEmptyArrayContent()", span="129-129"];
m0_11 [cluster="Unk.AreEqual", file="JPathExecuteTests.cs", label="Entry Unk.AreEqual", span=""];
m0_12 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanMultipleQuoted()", color=green, community=1, file="JPathExecuteTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanMultipleQuoted()", prediction=8, span="90-90"];
m0_13 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanMultipleQuoted()", color=green, community=0, file="JPathExecuteTests.cs", label="string json = @''{\r\n    ''''Node1'''': {\r\n        ''''Child1'''': {\r\n            ''''Name'''': ''''IsMe'''',\r\n            ''''TargetNode'''': {\r\n                ''''Prop1'''': ''''Val1'''',\r\n                ''''Prop2'''': ''''Val2''''\r\n            }\r\n        },\r\n        ''''My.Child.Node'''': {\r\n            ''''TargetNode'''': {\r\n                ''''Prop1'''': ''''Val3'''',\r\n                ''''Prop2'''': ''''Val4''''\r\n            }\r\n        }\r\n    },\r\n    ''''Node2'''': {\r\n        ''''TargetNode'''': {\r\n            ''''Prop1'''': ''''Val5'''',\r\n            ''''Prop2'''': ''''Val6''''\r\n        }\r\n    }\r\n}''", prediction=9, span="92-114"];
m0_14 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanMultipleQuoted()", color=green, community=0, file="JPathExecuteTests.cs", label="JObject models = JObject.Parse(json)", prediction=9, span="116-116"];
m0_16 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanMultipleQuoted()", color=green, community=0, file="JPathExecuteTests.cs", label="Assert.AreEqual(''Val1'', (string)results[0])", prediction=9, span="119-119"];
m0_17 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanMultipleQuoted()", color=green, community=0, file="JPathExecuteTests.cs", label="Assert.AreEqual(''Val2'', (string)results[1])", prediction=9, span="120-120"];
m0_15 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanMultipleQuoted()", color=green, community=0, file="JPathExecuteTests.cs", label="var results = models.SelectTokens(''$..['My.Child.Node','Prop1','Prop2']'').ToList()", prediction=9, span="118-118"];
m0_18 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanMultipleQuoted()", file="JPathExecuteTests.cs", label="Assert.AreEqual(JTokenType.Object, results[2].Type)", span="121-121"];
m0_313 [cluster="Newtonsoft.Json.Linq.JObject.JObject()", file="JPathExecuteTests.cs", label="Entry Newtonsoft.Json.Linq.JObject.JObject()", span="87-87"];
m0_19 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanMultipleQuoted()", file="JPathExecuteTests.cs", label="Assert.AreEqual(''Val3'', (string)results[3])", span="122-122"];
m0_20 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanMultipleQuoted()", color=green, community=1, file="JPathExecuteTests.cs", label="Assert.AreEqual(''Val4'', (string)results[4])", prediction=9, span="123-123"];
m0_21 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanMultipleQuoted()", color=green, community=0, file="JPathExecuteTests.cs", label="Assert.AreEqual(''Val5'', (string)results[5])", prediction=9, span="124-124"];
m0_22 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanMultipleQuoted()", color=green, community=0, file="JPathExecuteTests.cs", label="Assert.AreEqual(''Val6'', (string)results[6])", prediction=9, span="125-125"];
m0_23 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanMultipleQuoted()", color=green, community=0, file="JPathExecuteTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanMultipleQuoted()", prediction=17, span="90-90"];
m0_24 [cluster="System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", file="JPathExecuteTests.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", span="0-0"];
m0_10 [cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", file="JPathExecuteTests.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0"];
m0_41 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyWithRequired()", file="JPathExecuteTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyWithRequired()", span="191-191"];
m0_42 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyWithRequired()", file="JPathExecuteTests.cs", label="string json = ''{\''bookId\'':\''1000\''}''", span="193-193"];
m0_43 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyWithRequired()", file="JPathExecuteTests.cs", label="JObject o = JObject.Parse(json)", span="194-194"];
m0_44 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyWithRequired()", file="JPathExecuteTests.cs", label="string bookId = (string)o.SelectToken(''bookId'', true)", span="196-196"];
m0_45 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyWithRequired()", file="JPathExecuteTests.cs", label="Assert.AreEqual(''1000'', bookId)", span="198-198"];
m0_46 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyWithRequired()", file="JPathExecuteTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyWithRequired()", span="191-191"];
m0_231 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayOutOfBoundsIndxerWithError()", file="JPathExecuteTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayOutOfBoundsIndxerWithError()", span="460-460"];
m0_232 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayOutOfBoundsIndxerWithError()", file="JPathExecuteTests.cs", label="JArray a = new JArray(1, 2, 3, 4, 5)", span="462-462"];
m0_233 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayOutOfBoundsIndxerWithError()", file="JPathExecuteTests.cs", label="ExceptionAssert.Throws<JsonException>(() => { a.SelectToken(''[1000].Ha'', true); }, ''Index 1000 outside the bounds of JArray.'')", span="464-464"];
m0_234 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayOutOfBoundsIndxerWithError()", file="JPathExecuteTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayOutOfBoundsIndxerWithError()", span="460-460"];
m0_226 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateOutOfBoundsIndxer()", file="JPathExecuteTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateOutOfBoundsIndxer()", span="451-451"];
m0_227 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateOutOfBoundsIndxer()", file="JPathExecuteTests.cs", label="JArray a = new JArray(1, 2, 3, 4, 5)", span="453-453"];
m0_228 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateOutOfBoundsIndxer()", file="JPathExecuteTests.cs", label="JToken t = a.SelectToken(''[1000].Ha'')", span="455-455"];
m0_229 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateOutOfBoundsIndxer()", file="JPathExecuteTests.cs", label="Assert.IsNull(t)", span="456-456"];
m0_230 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateOutOfBoundsIndxer()", file="JPathExecuteTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateOutOfBoundsIndxer()", span="451-451"];
m0_518 [cluster="JArray.cstr", file="JPathExecuteTests.cs", label="Entry JArray.cstr", span=""];
m0_101 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QuoteName()", file="JPathExecuteTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QuoteName()", span="291-291"];
m0_102 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QuoteName()", file="JPathExecuteTests.cs", label="JObject o = new JObject(\r\n                new JProperty(''Blah'', 1))", span="293-294"];
m0_103 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QuoteName()", file="JPathExecuteTests.cs", label="JToken t = o.SelectToken(''['Blah']'')", span="296-296"];
m0_104 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QuoteName()", file="JPathExecuteTests.cs", label="Assert.IsNotNull(t)", span="297-297"];
m0_105 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QuoteName()", file="JPathExecuteTests.cs", label="Assert.AreEqual(JTokenType.Integer, t.Type)", span="298-298"];
m0_106 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QuoteName()", file="JPathExecuteTests.cs", label="Assert.AreEqual(1, (int)t)", span="299-299"];
m0_107 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QuoteName()", file="JPathExecuteTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QuoteName()", span="291-291"];
m0_482 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.WildcardWithProperty()", file="JPathExecuteTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.WildcardWithProperty()", span="902-902"];
m0_483 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.WildcardWithProperty()", file="JPathExecuteTests.cs", label="JObject o = JObject.Parse(@''{\r\n    ''''station'''': 92000041000001, \r\n    ''''containers'''': [\r\n        {\r\n            ''''id'''': 1,\r\n            ''''text'''': ''''Sort system'''',\r\n            ''''containers'''': [\r\n                {\r\n                    ''''id'''': ''''2'''',\r\n                    ''''text'''': ''''Yard 11''''\r\n                },\r\n                {\r\n                    ''''id'''': ''''92000020100006'''',\r\n                    ''''text'''': ''''Sort yard 12''''\r\n                },\r\n                {\r\n                    ''''id'''': ''''92000020100005'''',\r\n                    ''''text'''': ''''Yard 13''''\r\n                } \r\n            ]\r\n        }, \r\n        {\r\n            ''''id'''': ''''92000020100011'''',\r\n            ''''text'''': ''''TSP-1''''\r\n        }, \r\n        {\r\n            ''''id'''':''''92000020100007'''',\r\n            ''''text'''': ''''Passenger 15''''\r\n        }\r\n    ]\r\n}'')", span="904-934"];
m0_484 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.WildcardWithProperty()", file="JPathExecuteTests.cs", label="IList<JToken> tokens = o.SelectTokens(''$..*[?(@.text)]'').ToList()", span="936-936"];
m0_485 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.WildcardWithProperty()", file="JPathExecuteTests.cs", label="int i = 0", span="937-937"];
m0_486 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.WildcardWithProperty()", file="JPathExecuteTests.cs", label="Assert.AreEqual(''Sort system'', (string)tokens[i++][''text''])", span="938-938"];
m0_487 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.WildcardWithProperty()", file="JPathExecuteTests.cs", label="Assert.AreEqual(''TSP-1'', (string)tokens[i++][''text''])", span="939-939"];
m0_488 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.WildcardWithProperty()", file="JPathExecuteTests.cs", label="Assert.AreEqual(''Passenger 15'', (string)tokens[i++][''text''])", span="940-940"];
m0_489 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.WildcardWithProperty()", file="JPathExecuteTests.cs", label="Assert.AreEqual(''Yard 11'', (string)tokens[i++][''text''])", span="941-941"];
m0_490 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.WildcardWithProperty()", file="JPathExecuteTests.cs", label="Assert.AreEqual(''Sort yard 12'', (string)tokens[i++][''text''])", span="942-942"];
m0_491 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.WildcardWithProperty()", file="JPathExecuteTests.cs", label="Assert.AreEqual(''Yard 13'', (string)tokens[i++][''text''])", span="943-943"];
m0_492 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.WildcardWithProperty()", file="JPathExecuteTests.cs", label="Assert.AreEqual(6, tokens.Count)", span="944-944"];
m0_493 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.WildcardWithProperty()", file="JPathExecuteTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.WildcardWithProperty()", span="902-902"];
m0_54 [cluster="Newtonsoft.Json.Linq.JProperty.JProperty(string, object)", file="JPathExecuteTests.cs", label="Entry Newtonsoft.Json.Linq.JProperty.JProperty(string, object)", span="316-316"];
m0_191 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingPropertyIndexWithError()", file="JPathExecuteTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingPropertyIndexWithError()", span="418-418"];
m0_192 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingPropertyIndexWithError()", file="JPathExecuteTests.cs", label="JObject o = new JObject(\r\n                new JProperty(''Blah'', 1))", span="420-421"];
m0_193 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingPropertyIndexWithError()", file="JPathExecuteTests.cs", label="ExceptionAssert.Throws<JsonException>(() => { o.SelectToken(''['Missing','Missing2']'', true); }, ''Property 'Missing' does not exist on JObject.'')", span="423-423"];
m0_194 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingPropertyIndexWithError()", file="JPathExecuteTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingPropertyIndexWithError()", span="418-418"];
m0_474 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Exists_Null()", file="JPathExecuteTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Exists_Null()", span="877-877"];
m0_475 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Exists_Null()", file="JPathExecuteTests.cs", label="JArray a = JArray.Parse(@''[\r\n  {\r\n    ''''price'''': 199,\r\n    ''''max_price'''': 200\r\n  },\r\n  {\r\n    ''''price'''': 200,\r\n    ''''max_price'''': 200\r\n  },\r\n  {\r\n    ''''price'''': 201,\r\n    ''''max_price'''': 200\r\n  }\r\n]'')", span="879-892"];
m0_476 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Exists_Null()", file="JPathExecuteTests.cs", label="var results = a.SelectTokens(''[?(true)]'').ToList()", span="894-894"];
m0_478 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Exists_Null()", file="JPathExecuteTests.cs", label="Assert.AreEqual(a[0], results[0])", span="896-896"];
m0_479 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Exists_Null()", file="JPathExecuteTests.cs", label="Assert.AreEqual(a[1], results[1])", span="897-897"];
m0_480 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Exists_Null()", file="JPathExecuteTests.cs", label="Assert.AreEqual(a[2], results[2])", span="898-898"];
m0_477 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Exists_Null()", file="JPathExecuteTests.cs", label="Assert.AreEqual(3, results.Count)", span="895-895"];
m0_481 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Exists_Null()", file="JPathExecuteTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Exists_Null()", span="877-877"];
m0_63 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyStringWithMatchingEmptyProperty()", file="JPathExecuteTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyStringWithMatchingEmptyProperty()", span="225-225"];
m0_64 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyStringWithMatchingEmptyProperty()", file="JPathExecuteTests.cs", label="JObject o = new JObject(\r\n                new JProperty('' '', 1))", span="227-228"];
m0_65 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyStringWithMatchingEmptyProperty()", file="JPathExecuteTests.cs", label="JToken t = o.SelectToken(''[' ']'')", span="230-230"];
m0_66 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyStringWithMatchingEmptyProperty()", file="JPathExecuteTests.cs", label="Assert.AreEqual(1, (int)t)", span="231-231"];
m0_67 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyStringWithMatchingEmptyProperty()", file="JPathExecuteTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyStringWithMatchingEmptyProperty()", span="225-225"];
m0_0 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanQuoted()", file="JPathExecuteTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanQuoted()", span="54-54"];
m0_1 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanQuoted()", color=green, community=1, file="JPathExecuteTests.cs", label="string json = @''{\r\n    ''''Node1'''': {\r\n        ''''Child1'''': {\r\n            ''''Name'''': ''''IsMe'''',\r\n            ''''TargetNode'''': {\r\n                ''''Prop1'''': ''''Val1'''',\r\n                ''''Prop2'''': ''''Val2''''\r\n            }\r\n        },\r\n        ''''My.Child.Node'''': {\r\n            ''''TargetNode'''': {\r\n                ''''Prop1'''': ''''Val1'''',\r\n                ''''Prop2'''': ''''Val2''''\r\n            }\r\n        }\r\n    },\r\n    ''''Node2'''': {\r\n        ''''TargetNode'''': {\r\n            ''''Prop1'''': ''''Val1'''',\r\n            ''''Prop2'''': ''''Val2''''\r\n        }\r\n    }\r\n}''", prediction=18, span="56-78"];
m0_2 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanQuoted()", color=green, community=0, file="JPathExecuteTests.cs", label="JObject models = JObject.Parse(json)", prediction=19, span="80-80"];
m0_3 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanQuoted()", color=green, community=0, file="JPathExecuteTests.cs", label="int result = models.SelectTokens(''$..['My.Child.Node']'').Count()", prediction=20, span="82-82"];
m0_5 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanQuoted()", color=green, community=0, file="JPathExecuteTests.cs", label="result = models.SelectTokens(''..['My.Child.Node']'').Count()", prediction=21, span="85-85"];
m0_4 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanQuoted()", color=green, community=0, file="JPathExecuteTests.cs", label="Assert.AreEqual(1, result)", prediction=22, span="83-83"];
m0_6 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanQuoted()", file="JPathExecuteTests.cs", label="Assert.AreEqual(1, result)", span="86-86"];
m0_302 [cluster="System.Collections.Generic.IEnumerable<TSource>.ElementAt<TSource>(int)", file="JPathExecuteTests.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.ElementAt<TSource>(int)", span="0-0"];
m0_382 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EqualsQuery()", file="JPathExecuteTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EqualsQuery()", span="660-660"];
m0_383 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EqualsQuery()", file="JPathExecuteTests.cs", label="JArray a = new JArray(\r\n                new JObject(new JProperty(''hi'', ''ho'')),\r\n                new JObject(new JProperty(''hi'', ''ha'')))", span="662-664"];
m0_384 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EqualsQuery()", file="JPathExecuteTests.cs", label="IList<JToken> t = a.SelectTokens(''[ ?( @.['hi'] == 'ha' ) ]'').ToList()", span="666-666"];
m0_385 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EqualsQuery()", file="JPathExecuteTests.cs", label="Assert.IsNotNull(t)", span="667-667"];
m0_386 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EqualsQuery()", file="JPathExecuteTests.cs", label="Assert.AreEqual(1, t.Count)", span="668-668"];
m0_387 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EqualsQuery()", file="JPathExecuteTests.cs", label="Assert.IsTrue(JToken.DeepEquals(new JObject(new JProperty(''hi'', ''ha'')), t[0]))", span="669-669"];
m0_388 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EqualsQuery()", file="JPathExecuteTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EqualsQuery()", span="660-660"];
m0_84 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSingleProperty()", file="JPathExecuteTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSingleProperty()", span="265-265"];
m0_85 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSingleProperty()", file="JPathExecuteTests.cs", label="JObject o = new JObject(\r\n                new JProperty(''Blah'', 1))", span="267-268"];
m0_86 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSingleProperty()", file="JPathExecuteTests.cs", label="JToken t = o.SelectToken(''Blah'')", span="270-270"];
m0_87 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSingleProperty()", file="JPathExecuteTests.cs", label="Assert.IsNotNull(t)", span="271-271"];
m0_88 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSingleProperty()", file="JPathExecuteTests.cs", label="Assert.AreEqual(JTokenType.Integer, t.Type)", span="272-272"];
m0_89 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSingleProperty()", file="JPathExecuteTests.cs", label="Assert.AreEqual(1, (int)t)", span="273-273"];
m0_90 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSingleProperty()", file="JPathExecuteTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSingleProperty()", span="265-265"];
m0_314 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScan()", file="JPathExecuteTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScan()", span="568-568"];
m0_315 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScan()", file="JPathExecuteTests.cs", label="JObject o1 = new JObject { { ''Name'', 1 } }", span="570-570"];
m0_316 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScan()", file="JPathExecuteTests.cs", label="JObject o2 = new JObject { { ''Name'', 2 } }", span="571-571"];
m0_317 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScan()", file="JPathExecuteTests.cs", label="JArray a = new JArray(o1, o2)", span="572-572"];
m0_322 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScan()", file="JPathExecuteTests.cs", label="Assert.IsTrue(JToken.DeepEquals(o1, t[1]))", span="578-578"];
m0_324 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScan()", file="JPathExecuteTests.cs", label="Assert.IsTrue(JToken.DeepEquals(o2, t[3]))", span="580-580"];
m0_318 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScan()", file="JPathExecuteTests.cs", label="IList<JToken> t = a.SelectTokens(''$..*'').ToList()", span="574-574"];
m0_321 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScan()", file="JPathExecuteTests.cs", label="Assert.IsTrue(JToken.DeepEquals(a, t[0]))", span="577-577"];
m0_319 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScan()", file="JPathExecuteTests.cs", label="Assert.IsNotNull(t)", span="575-575"];
m0_320 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScan()", file="JPathExecuteTests.cs", label="Assert.AreEqual(5, t.Count)", span="576-576"];
m0_323 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScan()", file="JPathExecuteTests.cs", label="Assert.AreEqual(1, (int)t[2])", span="579-579"];
m0_325 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScan()", file="JPathExecuteTests.cs", label="Assert.AreEqual(2, (int)t[4])", span="581-581"];
m0_326 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScan()", file="JPathExecuteTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScan()", span="568-568"];
m0_426 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQueryBigInteger()", file="JPathExecuteTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQueryBigInteger()", span="742-742"];
m0_427 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQueryBigInteger()", file="JPathExecuteTests.cs", label="JArray a = new JArray(\r\n                new JObject(new JProperty(''hi'', new BigInteger(1))),\r\n                new JObject(new JProperty(''hi'', new BigInteger(2))),\r\n                new JObject(new JProperty(''hi'', new BigInteger(3))))", span="744-747"];
m0_428 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQueryBigInteger()", file="JPathExecuteTests.cs", label="IList<JToken> t = a.SelectTokens(''[ ?( @.hi > 1 ) ]'').ToList()", span="749-749"];
m0_429 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQueryBigInteger()", file="JPathExecuteTests.cs", label="Assert.IsNotNull(t)", span="750-750"];
m0_430 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQueryBigInteger()", file="JPathExecuteTests.cs", label="Assert.AreEqual(2, t.Count)", span="751-751"];
m0_431 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQueryBigInteger()", file="JPathExecuteTests.cs", label="Assert.IsTrue(JToken.DeepEquals(new JObject(new JProperty(''hi'', 2)), t[0]))", span="752-752"];
m0_432 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQueryBigInteger()", file="JPathExecuteTests.cs", label="Assert.IsTrue(JToken.DeepEquals(new JObject(new JProperty(''hi'', 3)), t[1]))", span="753-753"];
m0_433 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQueryBigInteger()", file="JPathExecuteTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQueryBigInteger()", span="742-742"];
m0_342 [cluster="Newtonsoft.Json.Linq.JArray.JArray(object)", file="JPathExecuteTests.cs", label="Entry Newtonsoft.Json.Linq.JArray.JArray(object)", span="91-91"];
m0_78 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateDollarTypeString()", file="JPathExecuteTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateDollarTypeString()", span="255-255"];
m0_79 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateDollarTypeString()", file="JPathExecuteTests.cs", label="JObject o = new JObject(\r\n                new JProperty(''$values'', new JArray(1, 2, 3)))", span="257-258"];
m0_80 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateDollarTypeString()", file="JPathExecuteTests.cs", label="JToken t = o.SelectToken(''$values[1]'')", span="260-260"];
m0_81 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateDollarTypeString()", file="JPathExecuteTests.cs", label="Assert.AreEqual(2, (int)t)", span="261-261"];
m0_82 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateDollarTypeString()", file="JPathExecuteTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateDollarTypeString()", span="255-255"];
m0_283 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardArray()", file="JPathExecuteTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardArray()", span="527-527"];
m0_284 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardArray()", file="JPathExecuteTests.cs", label="JArray a = new JArray(1, 2, 3, 4)", span="529-529"];
m0_285 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardArray()", file="JPathExecuteTests.cs", label="List<JToken> t = a.SelectTokens(''[*]'').ToList()", span="531-531"];
m0_286 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardArray()", file="JPathExecuteTests.cs", label="Assert.IsNotNull(t)", span="532-532"];
m0_287 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardArray()", file="JPathExecuteTests.cs", label="Assert.AreEqual(4, t.Count)", span="533-533"];
m0_288 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardArray()", file="JPathExecuteTests.cs", label="Assert.AreEqual(1, (int)t[0])", span="534-534"];
m0_289 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardArray()", file="JPathExecuteTests.cs", label="Assert.AreEqual(2, (int)t[1])", span="535-535"];
m0_290 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardArray()", file="JPathExecuteTests.cs", label="Assert.AreEqual(3, (int)t[2])", span="536-536"];
m0_291 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardArray()", file="JPathExecuteTests.cs", label="Assert.AreEqual(4, (int)t[3])", span="537-537"];
m0_292 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardArray()", file="JPathExecuteTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardArray()", span="527-527"];
m0_186 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyWithoutError()", file="JPathExecuteTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyWithoutError()", span="408-408"];
m0_187 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyWithoutError()", file="JPathExecuteTests.cs", label="JObject o = new JObject(\r\n                new JProperty(''Blah'', 1))", span="410-411"];
m0_188 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyWithoutError()", file="JPathExecuteTests.cs", label="JValue v = (JValue)o.SelectToken(''Blah'', true)", span="413-413"];
m0_189 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyWithoutError()", file="JPathExecuteTests.cs", label="Assert.AreEqual(1, v.Value)", span="414-414"];
m0_190 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyWithoutError()", file="JPathExecuteTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyWithoutError()", span="408-408"];
m0_167 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateConstructorOutOfBoundsIndxerWithError()", file="JPathExecuteTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateConstructorOutOfBoundsIndxerWithError()", span="383-383"];
m0_168 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateConstructorOutOfBoundsIndxerWithError()", file="JPathExecuteTests.cs", label="JConstructor c = new JConstructor(''Blah'')", span="385-385"];
m0_169 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateConstructorOutOfBoundsIndxerWithError()", file="JPathExecuteTests.cs", label="ExceptionAssert.Throws<JsonException>(() => { c.SelectToken(''[1]'', true); }, @''Index 1 outside the bounds of JConstructor.'')", span="387-387"];
m0_170 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateConstructorOutOfBoundsIndxerWithError()", file="JPathExecuteTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateConstructorOutOfBoundsIndxerWithError()", span="383-383"];
m0_361 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSinglePropertyReturningArray()", file="JPathExecuteTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSinglePropertyReturningArray()", span="625-625"];
m0_362 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSinglePropertyReturningArray()", file="JPathExecuteTests.cs", label="JObject o = new JObject(\r\n                new JProperty(''Blah'', new[] { 1, 2, 3 }))", span="627-628"];
m0_363 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSinglePropertyReturningArray()", file="JPathExecuteTests.cs", label="JToken t = o.SelectToken(''Blah'')", span="630-630"];
m0_366 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSinglePropertyReturningArray()", file="JPathExecuteTests.cs", label="t = o.SelectToken(''Blah[2]'')", span="634-634"];
m0_364 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSinglePropertyReturningArray()", file="JPathExecuteTests.cs", label="Assert.IsNotNull(t)", span="631-631"];
m0_365 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSinglePropertyReturningArray()", file="JPathExecuteTests.cs", label="Assert.AreEqual(JTokenType.Array, t.Type)", span="632-632"];
m0_367 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSinglePropertyReturningArray()", file="JPathExecuteTests.cs", label="Assert.AreEqual(JTokenType.Integer, t.Type)", span="635-635"];
m0_368 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSinglePropertyReturningArray()", file="JPathExecuteTests.cs", label="Assert.AreEqual(3, (int)t)", span="636-636"];
m0_369 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSinglePropertyReturningArray()", file="JPathExecuteTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSinglePropertyReturningArray()", span="625-625"];
m0_410 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQuery()", file="JPathExecuteTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQuery()", span="711-711"];
m0_411 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQuery()", file="JPathExecuteTests.cs", label="JArray a = new JArray(\r\n                new JObject(new JProperty(''hi'', 1)),\r\n                new JObject(new JProperty(''hi'', 2)),\r\n                new JObject(new JProperty(''hi'', 3)))", span="713-716"];
m0_412 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQuery()", file="JPathExecuteTests.cs", label="IList<JToken> t = a.SelectTokens(''[ ?( @.hi > 1 ) ]'').ToList()", span="718-718"];
m0_413 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQuery()", file="JPathExecuteTests.cs", label="Assert.IsNotNull(t)", span="719-719"];
m0_414 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQuery()", file="JPathExecuteTests.cs", label="Assert.AreEqual(2, t.Count)", span="720-720"];
m0_415 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQuery()", file="JPathExecuteTests.cs", label="Assert.IsTrue(JToken.DeepEquals(new JObject(new JProperty(''hi'', 2)), t[0]))", span="721-721"];
m0_416 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQuery()", file="JPathExecuteTests.cs", label="Assert.IsTrue(JToken.DeepEquals(new JObject(new JProperty(''hi'', 3)), t[1]))", span="722-722"];
m0_417 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQuery()", file="JPathExecuteTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQuery()", span="711-711"];
m0_171 [cluster="Newtonsoft.Json.Linq.JConstructor.JConstructor(string)", file="JPathExecuteTests.cs", label="Entry Newtonsoft.Json.Linq.JConstructor.JConstructor(string)", span="131-131"];
m0_519 [cluster="Unk.Select", file="JPathExecuteTests.cs", label="Entry Unk.Select", span=""];
m0_34 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.SelectTokenAfterEmptyContainer()", file="JPathExecuteTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.SelectTokenAfterEmptyContainer()", span="175-175"];
m0_35 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.SelectTokenAfterEmptyContainer()", file="JPathExecuteTests.cs", label="string json = @''{\r\n    'cont': [],\r\n    'test': 'no one will find me'\r\n}''", span="177-180"];
m0_36 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.SelectTokenAfterEmptyContainer()", file="JPathExecuteTests.cs", label="JObject o = JObject.Parse(json)", span="182-182"];
m0_37 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.SelectTokenAfterEmptyContainer()", file="JPathExecuteTests.cs", label="IList<JToken> results = o.SelectTokens(''$..test'').ToList()", span="184-184"];
m0_38 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.SelectTokenAfterEmptyContainer()", file="JPathExecuteTests.cs", label="Assert.AreEqual(1, results.Count)", span="186-186"];
m0_39 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.SelectTokenAfterEmptyContainer()", file="JPathExecuteTests.cs", label="Assert.AreEqual(''no one will find me'', (string)results[0])", span="187-187"];
m0_40 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.SelectTokenAfterEmptyContainer()", file="JPathExecuteTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.SelectTokenAfterEmptyContainer()", span="175-175"];
m0_73 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateDollarString()", file="JPathExecuteTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateDollarString()", span="245-245"];
m0_74 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateDollarString()", file="JPathExecuteTests.cs", label="JObject o = new JObject(\r\n                new JProperty(''Blah'', 1))", span="247-248"];
m0_75 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateDollarString()", file="JPathExecuteTests.cs", label="JToken t = o.SelectToken(''$'')", span="250-250"];
m0_76 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateDollarString()", file="JPathExecuteTests.cs", label="Assert.AreEqual(o, t)", span="251-251"];
m0_77 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateDollarString()", file="JPathExecuteTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateDollarString()", span="245-245"];
m0_108 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingProperty()", file="JPathExecuteTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingProperty()", span="303-303"];
m0_109 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingProperty()", file="JPathExecuteTests.cs", label="JObject o = new JObject(\r\n                new JProperty(''Blah'', 1))", span="305-306"];
m0_110 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingProperty()", file="JPathExecuteTests.cs", label="JToken t = o.SelectToken(''Missing[1]'')", span="308-308"];
m0_111 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingProperty()", file="JPathExecuteTests.cs", label="Assert.IsNull(t)", span="309-309"];
m0_112 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingProperty()", file="JPathExecuteTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingProperty()", span="303-303"];
m0_55 [cluster="Newtonsoft.Json.Linq.JToken.SelectToken(string)", file="JPathExecuteTests.cs", label="Entry Newtonsoft.Json.Linq.JToken.SelectToken(string)", span="2301-2301"];
m0_160 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateNoResultsWithMultipleArrayIndexes()", file="JPathExecuteTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateNoResultsWithMultipleArrayIndexes()", span="375-375"];
m0_161 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateNoResultsWithMultipleArrayIndexes()", file="JPathExecuteTests.cs", label="JArray a = new JArray(1, 2, 3, 4, 5)", span="377-377"];
m0_162 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateNoResultsWithMultipleArrayIndexes()", file="JPathExecuteTests.cs", label="ExceptionAssert.Throws<JsonException>(() => { a.SelectToken(''[9,10]'', true); }, @''Index 9 outside the bounds of JArray.'')", span="379-379"];
m0_163 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateNoResultsWithMultipleArrayIndexes()", file="JPathExecuteTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateNoResultsWithMultipleArrayIndexes()", span="375-375"];
m0_466 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Exists_True()", file="JPathExecuteTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Exists_True()", span="852-852"];
m0_467 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Exists_True()", file="JPathExecuteTests.cs", label="JArray a = JArray.Parse(@''[\r\n  {\r\n    ''''price'''': 199,\r\n    ''''max_price'''': 200\r\n  },\r\n  {\r\n    ''''price'''': 200,\r\n    ''''max_price'''': 200\r\n  },\r\n  {\r\n    ''''price'''': 201,\r\n    ''''max_price'''': 200\r\n  }\r\n]'')", span="854-867"];
m0_468 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Exists_True()", file="JPathExecuteTests.cs", label="var results = a.SelectTokens(''[?(true)]'').ToList()", span="869-869"];
m0_470 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Exists_True()", file="JPathExecuteTests.cs", label="Assert.AreEqual(a[0], results[0])", span="871-871"];
m0_471 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Exists_True()", file="JPathExecuteTests.cs", label="Assert.AreEqual(a[1], results[1])", span="872-872"];
m0_472 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Exists_True()", file="JPathExecuteTests.cs", label="Assert.AreEqual(a[2], results[2])", span="873-873"];
m0_469 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Exists_True()", file="JPathExecuteTests.cs", label="Assert.AreEqual(3, results.Count)", span="870-870"];
m0_473 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Exists_True()", file="JPathExecuteTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Exists_True()", span="852-852"];
m0_436 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterOrEqualQuery()", file="JPathExecuteTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterOrEqualQuery()", span="758-758"];
m0_437 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterOrEqualQuery()", file="JPathExecuteTests.cs", label="JArray a = new JArray(\r\n                new JObject(new JProperty(''hi'', 1)),\r\n                new JObject(new JProperty(''hi'', 2)),\r\n                new JObject(new JProperty(''hi'', 2.0)),\r\n                new JObject(new JProperty(''hi'', 3)))", span="760-764"];
m0_438 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterOrEqualQuery()", file="JPathExecuteTests.cs", label="IList<JToken> t = a.SelectTokens(''[ ?( @.hi >= 1 ) ]'').ToList()", span="766-766"];
m0_439 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterOrEqualQuery()", file="JPathExecuteTests.cs", label="Assert.IsNotNull(t)", span="767-767"];
m0_440 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterOrEqualQuery()", file="JPathExecuteTests.cs", label="Assert.AreEqual(4, t.Count)", span="768-768"];
m0_441 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterOrEqualQuery()", file="JPathExecuteTests.cs", label="Assert.IsTrue(JToken.DeepEquals(new JObject(new JProperty(''hi'', 1)), t[0]))", span="769-769"];
m0_442 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterOrEqualQuery()", file="JPathExecuteTests.cs", label="Assert.IsTrue(JToken.DeepEquals(new JObject(new JProperty(''hi'', 2)), t[1]))", span="770-770"];
m0_443 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterOrEqualQuery()", file="JPathExecuteTests.cs", label="Assert.IsTrue(JToken.DeepEquals(new JObject(new JProperty(''hi'', 2.0)), t[2]))", span="771-771"];
m0_444 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterOrEqualQuery()", file="JPathExecuteTests.cs", label="Assert.IsTrue(JToken.DeepEquals(new JObject(new JProperty(''hi'', 3)), t[3]))", span="772-772"];
m0_445 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterOrEqualQuery()", file="JPathExecuteTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterOrEqualQuery()", span="758-758"];
m0_48 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyPropertyIndexer()", file="JPathExecuteTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyPropertyIndexer()", span="202-202"];
m0_49 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyPropertyIndexer()", file="JPathExecuteTests.cs", label="JObject o = new JObject(\r\n                new JProperty('''', 1))", span="204-205"];
m0_50 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyPropertyIndexer()", file="JPathExecuteTests.cs", label="JToken t = o.SelectToken(''['']'')", span="207-207"];
m0_51 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyPropertyIndexer()", file="JPathExecuteTests.cs", label="Assert.AreEqual(1, (int)t)", span="208-208"];
m0_52 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyPropertyIndexer()", file="JPathExecuteTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyPropertyIndexer()", span="202-202"];
m0_91 [cluster="Unk.IsNotNull", file="JPathExecuteTests.cs", label="Entry Unk.IsNotNull", span=""];
m0_418 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.LesserQuery_ValueFirst()", file="JPathExecuteTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.LesserQuery_ValueFirst()", span="726-726"];
m0_419 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.LesserQuery_ValueFirst()", file="JPathExecuteTests.cs", label="JArray a = new JArray(\r\n                new JObject(new JProperty(''hi'', 1)),\r\n                new JObject(new JProperty(''hi'', 2)),\r\n                new JObject(new JProperty(''hi'', 3)))", span="728-731"];
m0_420 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.LesserQuery_ValueFirst()", file="JPathExecuteTests.cs", label="IList<JToken> t = a.SelectTokens(''[ ?( 1 < @.hi ) ]'').ToList()", span="733-733"];
m0_421 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.LesserQuery_ValueFirst()", file="JPathExecuteTests.cs", label="Assert.IsNotNull(t)", span="734-734"];
m0_422 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.LesserQuery_ValueFirst()", file="JPathExecuteTests.cs", label="Assert.AreEqual(2, t.Count)", span="735-735"];
m0_423 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.LesserQuery_ValueFirst()", file="JPathExecuteTests.cs", label="Assert.IsTrue(JToken.DeepEquals(new JObject(new JProperty(''hi'', 2)), t[0]))", span="736-736"];
m0_424 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.LesserQuery_ValueFirst()", file="JPathExecuteTests.cs", label="Assert.IsTrue(JToken.DeepEquals(new JObject(new JProperty(''hi'', 3)), t[1]))", span="737-737"];
m0_425 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.LesserQuery_ValueFirst()", file="JPathExecuteTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.LesserQuery_ValueFirst()", span="726-726"];
m0_7 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanQuoted()", file="JPathExecuteTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanQuoted()", span="54-54"];
m0_514 [cluster="System.DateTimeOffset.DateTimeOffset(int, int, int, int, int, int, System.TimeSpan)", file="JPathExecuteTests.cs", label="Entry System.DateTimeOffset.DateTimeOffset(int, int, int, int, int, int, System.TimeSpan)", span="0-0"];
m0_396 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NoPathQuery()", file="JPathExecuteTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NoPathQuery()", span="686-686"];
m0_397 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NoPathQuery()", file="JPathExecuteTests.cs", label="JArray a = new JArray(1, 2, 3)", span="688-688"];
m0_398 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NoPathQuery()", file="JPathExecuteTests.cs", label="IList<JToken> t = a.SelectTokens(''[ ?( @ > 1 ) ]'').ToList()", span="690-690"];
m0_399 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NoPathQuery()", file="JPathExecuteTests.cs", label="Assert.IsNotNull(t)", span="691-691"];
m0_400 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NoPathQuery()", file="JPathExecuteTests.cs", label="Assert.AreEqual(2, t.Count)", span="692-692"];
m0_401 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NoPathQuery()", file="JPathExecuteTests.cs", label="Assert.AreEqual(2, (int)t[0])", span="693-693"];
m0_402 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NoPathQuery()", file="JPathExecuteTests.cs", label="Assert.AreEqual(3, (int)t[1])", span="694-694"];
m0_403 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NoPathQuery()", file="JPathExecuteTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NoPathQuery()", span="686-686"];
m0_550 [cluster="lambda expression", file="JPathExecuteTests.cs", label="Entry lambda expression", span="1052-1052"];
m0_125 [cluster="lambda expression", file="JPathExecuteTests.cs", label="o.SelectToken(''[1]'', true)", span="328-328"];
m0_124 [cluster="lambda expression", file="JPathExecuteTests.cs", label="Entry lambda expression", span="328-328"];
m0_126 [cluster="lambda expression", file="JPathExecuteTests.cs", label="Exit lambda expression", span="328-328"];
m0_132 [cluster="lambda expression", file="JPathExecuteTests.cs", label="o.SelectToken(''[*]'', true)", span="337-337"];
m0_131 [cluster="lambda expression", file="JPathExecuteTests.cs", label="Entry lambda expression", span="337-337"];
m0_133 [cluster="lambda expression", file="JPathExecuteTests.cs", label="Exit lambda expression", span="337-337"];
m0_139 [cluster="lambda expression", file="JPathExecuteTests.cs", label="o.SelectToken(''[:]'', true)", span="346-346"];
m0_138 [cluster="lambda expression", file="JPathExecuteTests.cs", label="Entry lambda expression", span="346-346"];
m0_140 [cluster="lambda expression", file="JPathExecuteTests.cs", label="Exit lambda expression", span="346-346"];
m0_151 [cluster="lambda expression", file="JPathExecuteTests.cs", label="a.SelectToken(''[0, 1]'')", span="363-363"];
m0_150 [cluster="lambda expression", file="JPathExecuteTests.cs", label="Entry lambda expression", span="363-363"];
m0_152 [cluster="lambda expression", file="JPathExecuteTests.cs", label="Exit lambda expression", span="363-363"];
m0_158 [cluster="lambda expression", file="JPathExecuteTests.cs", label="a.SelectToken(''BlahBlah'', true)", span="371-371"];
m0_157 [cluster="lambda expression", file="JPathExecuteTests.cs", label="Entry lambda expression", span="371-371"];
m0_159 [cluster="lambda expression", file="JPathExecuteTests.cs", label="Exit lambda expression", span="371-371"];
m0_165 [cluster="lambda expression", file="JPathExecuteTests.cs", label="a.SelectToken(''[9,10]'', true)", span="379-379"];
m0_164 [cluster="lambda expression", file="JPathExecuteTests.cs", label="Entry lambda expression", span="379-379"];
m0_166 [cluster="lambda expression", file="JPathExecuteTests.cs", label="Exit lambda expression", span="379-379"];
m0_173 [cluster="lambda expression", file="JPathExecuteTests.cs", label="c.SelectToken(''[1]'', true)", span="387-387"];
m0_172 [cluster="lambda expression", file="JPathExecuteTests.cs", label="Entry lambda expression", span="387-387"];
m0_174 [cluster="lambda expression", file="JPathExecuteTests.cs", label="Exit lambda expression", span="387-387"];
m0_184 [cluster="lambda expression", file="JPathExecuteTests.cs", label="o.SelectToken(''Missing'', true)", span="404-404"];
m0_183 [cluster="lambda expression", file="JPathExecuteTests.cs", label="Entry lambda expression", span="404-404"];
m0_185 [cluster="lambda expression", file="JPathExecuteTests.cs", label="Exit lambda expression", span="404-404"];
m0_196 [cluster="lambda expression", file="JPathExecuteTests.cs", label="o.SelectToken(''['Missing','Missing2']'', true)", span="423-423"];
m0_195 [cluster="lambda expression", file="JPathExecuteTests.cs", label="Entry lambda expression", span="423-423"];
m0_197 [cluster="lambda expression", file="JPathExecuteTests.cs", label="Exit lambda expression", span="423-423"];
m0_203 [cluster="lambda expression", file="JPathExecuteTests.cs", label="a.SelectToken(''['Missing','Missing2']'', true)", span="431-431"];
m0_202 [cluster="lambda expression", file="JPathExecuteTests.cs", label="Entry lambda expression", span="431-431"];
m0_204 [cluster="lambda expression", file="JPathExecuteTests.cs", label="Exit lambda expression", span="431-431"];
m0_215 [cluster="lambda expression", file="JPathExecuteTests.cs", label="a.SelectToken(''[99:]'', true)", span="439-439"];
m0_218 [cluster="lambda expression", file="JPathExecuteTests.cs", label="a.SelectToken(''[1:-19]'', true)", span="441-441"];
m0_221 [cluster="lambda expression", file="JPathExecuteTests.cs", label="a.SelectToken(''[:-19]'', true)", span="443-443"];
m0_214 [cluster="lambda expression", file="JPathExecuteTests.cs", label="Entry lambda expression", span="439-439"];
m0_217 [cluster="lambda expression", file="JPathExecuteTests.cs", label="Entry lambda expression", span="441-441"];
m0_220 [cluster="lambda expression", file="JPathExecuteTests.cs", label="Entry lambda expression", span="443-443"];
m0_224 [cluster="lambda expression", file="JPathExecuteTests.cs", label="a.SelectToken(''[:]'', true)", span="447-447"];
m0_223 [cluster="lambda expression", file="JPathExecuteTests.cs", label="Entry lambda expression", span="447-447"];
m0_216 [cluster="lambda expression", file="JPathExecuteTests.cs", label="Exit lambda expression", span="439-439"];
m0_219 [cluster="lambda expression", file="JPathExecuteTests.cs", label="Exit lambda expression", span="441-441"];
m0_222 [cluster="lambda expression", file="JPathExecuteTests.cs", label="Exit lambda expression", span="443-443"];
m0_225 [cluster="lambda expression", file="JPathExecuteTests.cs", label="Exit lambda expression", span="447-447"];
m0_236 [cluster="lambda expression", file="JPathExecuteTests.cs", label="a.SelectToken(''[1000].Ha'', true)", span="464-464"];
m0_235 [cluster="lambda expression", file="JPathExecuteTests.cs", label="Entry lambda expression", span="464-464"];
m0_237 [cluster="lambda expression", file="JPathExecuteTests.cs", label="Exit lambda expression", span="464-464"];
m0_520 [cluster="lambda expression", file="JPathExecuteTests.cs", label="Entry lambda expression", span="971-971"];
m0_521 [cluster="lambda expression", file="JPathExecuteTests.cs", label="new JObject(new JProperty(''childProp'', v))", span="971-971"];
m0_522 [cluster="lambda expression", file="JPathExecuteTests.cs", label="Exit lambda expression", span="971-971"];
m0_544 [cluster="lambda expression", file="JPathExecuteTests.cs", label="Entry lambda expression", span="1044-1044"];
m0_547 [cluster="lambda expression", file="JPathExecuteTests.cs", label="Entry lambda expression", span="1048-1048"];
m0_545 [cluster="lambda expression", file="JPathExecuteTests.cs", label="(string)s", span="1044-1044"];
m0_546 [cluster="lambda expression", file="JPathExecuteTests.cs", label="Exit lambda expression", span="1044-1044"];
m0_548 [cluster="lambda expression", file="JPathExecuteTests.cs", label="(string)m.SelectToken(''Products[1].Name'')", span="1048-1048"];
m0_549 [cluster="lambda expression", file="JPathExecuteTests.cs", label="Exit lambda expression", span="1048-1048"];
m0_551 [cluster="lambda expression", file="JPathExecuteTests.cs", label="(decimal)m.SelectToken(''Products[0].Price'')", span="1052-1052"];
m0_552 [cluster="lambda expression", file="JPathExecuteTests.cs", label="Exit lambda expression", span="1052-1052"];
m0_293 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayMultipleIndexes()", file="JPathExecuteTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayMultipleIndexes()", span="541-541"];
m0_294 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayMultipleIndexes()", file="JPathExecuteTests.cs", label="JArray a = new JArray(1, 2, 3, 4)", span="543-543"];
m0_295 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayMultipleIndexes()", file="JPathExecuteTests.cs", label="IEnumerable<JToken> t = a.SelectTokens(''[1,2,0]'')", span="545-545"];
m0_296 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayMultipleIndexes()", file="JPathExecuteTests.cs", label="Assert.IsNotNull(t)", span="546-546"];
m0_297 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayMultipleIndexes()", file="JPathExecuteTests.cs", label="Assert.AreEqual(3, t.Count())", span="547-547"];
m0_298 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayMultipleIndexes()", file="JPathExecuteTests.cs", label="Assert.AreEqual(2, (int)t.ElementAt(0))", span="548-548"];
m0_299 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayMultipleIndexes()", file="JPathExecuteTests.cs", label="Assert.AreEqual(3, (int)t.ElementAt(1))", span="549-549"];
m0_300 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayMultipleIndexes()", file="JPathExecuteTests.cs", label="Assert.AreEqual(1, (int)t.ElementAt(2))", span="550-550"];
m0_301 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayMultipleIndexes()", file="JPathExecuteTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayMultipleIndexes()", span="541-541"];
m0_213 [cluster="Newtonsoft.Json.Linq.JArray.JArray()", file="JPathExecuteTests.cs", label="Entry Newtonsoft.Json.Linq.JArray.JArray()", span="65-65"];
m0_517 [cluster="System.TimeSpan.TimeSpan(int, int, int, int)", file="JPathExecuteTests.cs", label="Entry System.TimeSpan.TimeSpan(int, int, int, int)", span="0-0"];
m0_434 [cluster="JProperty.cstr", file="JPathExecuteTests.cs", label="Entry JProperty.cstr", span=""];
m0_153 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyOnArrayWithError()", file="JPathExecuteTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyOnArrayWithError()", span="367-367"];
m0_154 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyOnArrayWithError()", file="JPathExecuteTests.cs", label="JArray a = new JArray(1, 2, 3, 4, 5)", span="369-369"];
m0_155 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyOnArrayWithError()", file="JPathExecuteTests.cs", label="ExceptionAssert.Throws<JsonException>(() => { a.SelectToken(''BlahBlah'', true); }, @''Property 'BlahBlah' not valid on JArray.'')", span="371-371"];
m0_156 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyOnArrayWithError()", file="JPathExecuteTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyOnArrayWithError()", span="367-367"];
m0_515 [cluster="System.TimeSpan.FromHours(double)", file="JPathExecuteTests.cs", label="Entry System.TimeSpan.FromHours(double)", span="0-0"];
m0_435 [cluster="BigInteger.cstr", file="JPathExecuteTests.cs", label="Entry BigInteger.cstr", span=""];
m0_134 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSliceOnObjectWithError()", file="JPathExecuteTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSliceOnObjectWithError()", span="341-341"];
m0_135 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSliceOnObjectWithError()", file="JPathExecuteTests.cs", label="JObject o = new JObject(\r\n                new JProperty(''Blah'', 1))", span="343-344"];
m0_136 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSliceOnObjectWithError()", file="JPathExecuteTests.cs", label="ExceptionAssert.Throws<JsonException>(() => { o.SelectToken(''[:]'', true); }, @''Array slice is not valid on JObject.'')", span="346-346"];
m0_137 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSliceOnObjectWithError()", file="JPathExecuteTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSliceOnObjectWithError()", span="341-341"];
m0_198 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMultiPropertyIndexOnArrayWithError()", file="JPathExecuteTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMultiPropertyIndexOnArrayWithError()", span="427-427"];
m0_199 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMultiPropertyIndexOnArrayWithError()", file="JPathExecuteTests.cs", label="JArray a = new JArray(1, 2, 3, 4, 5)", span="429-429"];
m0_200 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMultiPropertyIndexOnArrayWithError()", file="JPathExecuteTests.cs", label="ExceptionAssert.Throws<JsonException>(() => { a.SelectToken(''['Missing','Missing2']'', true); }, ''Properties 'Missing', 'Missing2' not valid on JArray.'')", span="431-431"];
m0_201 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMultiPropertyIndexOnArrayWithError()", file="JPathExecuteTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMultiPropertyIndexOnArrayWithError()", span="427-427"];
m0_327 [cluster="Newtonsoft.Json.Linq.JToken.DeepEquals(Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken)", file="JPathExecuteTests.cs", label="Entry Newtonsoft.Json.Linq.JToken.DeepEquals(Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken)", span="155-155"];
m0_127 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardIndexOnObjectWithError()", file="JPathExecuteTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardIndexOnObjectWithError()", span="332-332"];
m0_128 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardIndexOnObjectWithError()", file="JPathExecuteTests.cs", label="JObject o = new JObject(\r\n                new JProperty(''Blah'', 1))", span="334-335"];
m0_129 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardIndexOnObjectWithError()", file="JPathExecuteTests.cs", label="ExceptionAssert.Throws<JsonException>(() => { o.SelectToken(''[*]'', true); }, @''Index * not valid on JObject.'')", span="337-337"];
m0_130 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardIndexOnObjectWithError()", file="JPathExecuteTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardIndexOnObjectWithError()", span="332-332"];
m0_513 [cluster="System.DateTime.DateTime(int, int, int, int, int, int, System.DateTimeKind)", file="JPathExecuteTests.cs", label="Entry System.DateTime.DateTime(int, int, int, int, int, int, System.DateTimeKind)", span="0-0"];
m0_567 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.RootInFilter()", file="JPathExecuteTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.RootInFilter()", span="1112-1112"];
m0_568 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.RootInFilter()", file="JPathExecuteTests.cs", label="string json = @''[\r\n   {\r\n      ''''store'''' : {\r\n         ''''book'''' : [\r\n            {\r\n               ''''category'''' : ''''reference'''',\r\n               ''''author'''' : ''''Nigel Rees'''',\r\n               ''''title'''' : ''''Sayings of the Century'''',\r\n               ''''price'''' : 8.95\r\n            },\r\n            {\r\n               ''''category'''' : ''''fiction'''',\r\n               ''''author'''' : ''''Evelyn Waugh'''',\r\n               ''''title'''' : ''''Sword of Honour'''',\r\n               ''''price'''' : 12.99\r\n            },\r\n            {\r\n               ''''category'''' : ''''fiction'''',\r\n               ''''author'''' : ''''Herman Melville'''',\r\n               ''''title'''' : ''''Moby Dick'''',\r\n               ''''isbn'''' : ''''0-553-21311-3'''',\r\n               ''''price'''' : 8.99\r\n            },\r\n            {\r\n               ''''category'''' : ''''fiction'''',\r\n               ''''author'''' : ''''J. R. R. Tolkien'''',\r\n               ''''title'''' : ''''The Lord of the Rings'''',\r\n               ''''isbn'''' : ''''0-395-19395-8'''',\r\n               ''''price'''' : 22.99\r\n            }\r\n         ],\r\n         ''''bicycle'''' : {\r\n            ''''color'''' : ''''red'''',\r\n            ''''price'''' : 19.95\r\n         }\r\n      },\r\n      ''''expensive'''' : 10\r\n   }\r\n]''", span="1114-1152"];
m0_569 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.RootInFilter()", file="JPathExecuteTests.cs", label="JArray a = JArray.Parse(json)", span="1154-1154"];
m0_570 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.RootInFilter()", file="JPathExecuteTests.cs", label="List<JToken> result = a.SelectTokens(''$.[?($.store.bicycle.price < 20)]'').ToList()", span="1156-1156"];
m0_572 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.RootInFilter()", file="JPathExecuteTests.cs", label="result = a.SelectTokens(''$.[?($.store.bicycle.price < 10)]'').ToList()", span="1159-1159"];
m0_571 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.RootInFilter()", file="JPathExecuteTests.cs", label="Assert.AreEqual(1, result.Count)", span="1157-1157"];
m0_573 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.RootInFilter()", file="JPathExecuteTests.cs", label="Assert.AreEqual(0, result.Count)", span="1160-1160"];
m0_574 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.RootInFilter()", file="JPathExecuteTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.RootInFilter()", span="1112-1112"];
m0_47 [cluster="Newtonsoft.Json.Linq.JToken.SelectToken(string, bool)", file="JPathExecuteTests.cs", label="Entry Newtonsoft.Json.Linq.JToken.SelectToken(string, bool)", span="2314-2314"];
m0_516 [cluster="System.Text.Encoding.GetBytes(string)", file="JPathExecuteTests.cs", label="Entry System.Text.Encoding.GetBytes(string)", span="0-0"];
m0_123 [cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", file="JPathExecuteTests.cs", label="Entry Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", span="367-367"];
m0_460 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.MultiplePaths()", file="JPathExecuteTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.MultiplePaths()", span="829-829"];
m0_461 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.MultiplePaths()", file="JPathExecuteTests.cs", label="JArray a = JArray.Parse(@''[\r\n  {\r\n    ''''price'''': 199,\r\n    ''''max_price'''': 200\r\n  },\r\n  {\r\n    ''''price'''': 200,\r\n    ''''max_price'''': 200\r\n  },\r\n  {\r\n    ''''price'''': 201,\r\n    ''''max_price'''': 200\r\n  }\r\n]'')", span="831-844"];
m0_462 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.MultiplePaths()", file="JPathExecuteTests.cs", label="var results = a.SelectTokens(''[?(@.price > @.max_price)]'').ToList()", span="846-846"];
m0_464 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.MultiplePaths()", file="JPathExecuteTests.cs", label="Assert.AreEqual(a[2], results[0])", span="848-848"];
m0_463 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.MultiplePaths()", file="JPathExecuteTests.cs", label="Assert.AreEqual(1, results.Count)", span="847-847"];
m0_465 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.MultiplePaths()", file="JPathExecuteTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.MultiplePaths()", span="829-829"];
m0_141 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyOnArray()", file="JPathExecuteTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyOnArray()", span="350-350"];
m0_142 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyOnArray()", file="JPathExecuteTests.cs", label="JArray a = new JArray(1, 2, 3, 4, 5)", span="352-352"];
m0_143 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyOnArray()", file="JPathExecuteTests.cs", label="JToken t = a.SelectToken(''BlahBlah'')", span="354-354"];
m0_144 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyOnArray()", file="JPathExecuteTests.cs", label="Assert.IsNull(t)", span="355-355"];
m0_145 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyOnArray()", file="JPathExecuteTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyOnArray()", span="350-350"];
m0_56 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyString()", file="JPathExecuteTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyString()", span="212-212"];
m0_57 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyString()", file="JPathExecuteTests.cs", label="JObject o = new JObject(\r\n                new JProperty(''Blah'', 1))", span="214-215"];
m0_58 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyString()", file="JPathExecuteTests.cs", label="JToken t = o.SelectToken('''')", span="217-217"];
m0_59 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyString()", file="JPathExecuteTests.cs", label="Assert.AreEqual(o, t)", span="218-218"];
m0_60 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyString()", file="JPathExecuteTests.cs", label="t = o.SelectToken(''['']'')", span="220-220"];
m0_61 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyString()", file="JPathExecuteTests.cs", label="Assert.AreEqual(null, t)", span="221-221"];
m0_62 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyString()", file="JPathExecuteTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyString()", span="212-212"];
m0_575 [file="JPathExecuteTests.cs", label=o, span=""];
m0_576 [file="JPathExecuteTests.cs", label=o, span=""];
m0_577 [file="JPathExecuteTests.cs", label=o, span=""];
m0_578 [file="JPathExecuteTests.cs", label=a, span=""];
m0_579 [file="JPathExecuteTests.cs", label=a, span=""];
m0_580 [file="JPathExecuteTests.cs", label=a, span=""];
m0_581 [file="JPathExecuteTests.cs", label=c, span=""];
m0_582 [file="JPathExecuteTests.cs", label=o, span=""];
m0_583 [file="JPathExecuteTests.cs", label=o, span=""];
m0_584 [file="JPathExecuteTests.cs", label=a, span=""];
m0_585 [file="JPathExecuteTests.cs", label=a, span=""];
m0_586 [file="JPathExecuteTests.cs", label=a, span=""];
m1_295 [cluster="Unk.IsInstanceOf", file="JPathParseTests.cs", label="Entry Unk.IsInstanceOf", span=""];
m1_94 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.WildcardArrayWithProperty()", file="JPathParseTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.WildcardArrayWithProperty()", span="180-180"];
m1_95 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.WildcardArrayWithProperty()", file="JPathParseTests.cs", label="JPath path = new JPath(''[ * ].derp'')", span="182-182"];
m1_96 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.WildcardArrayWithProperty()", file="JPathParseTests.cs", label="Assert.AreEqual(2, path.Filters.Count)", span="183-183"];
m1_97 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.WildcardArrayWithProperty()", file="JPathParseTests.cs", label="Assert.AreEqual(null, ((ArrayIndexFilter)path.Filters[0]).Index)", span="184-184"];
m1_98 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.WildcardArrayWithProperty()", file="JPathParseTests.cs", label="Assert.AreEqual(''derp'', ((FieldFilter)path.Filters[1]).Name)", span="185-185"];
m1_99 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.WildcardArrayWithProperty()", file="JPathParseTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.WildcardArrayWithProperty()", span="180-180"];
m1_308 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BaddOr3()", file="JPathParseTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BaddOr3()", span="483-483"];
m1_309 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BaddOr3()", file="JPathParseTests.cs", label="ExceptionAssert.Throws<JsonException>(() => new JPath(''[?(@.name|''), ''Unexpected character while parsing path query: |'')", span="485-485"];
m1_310 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BaddOr3()", file="JPathParseTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BaddOr3()", span="483-483"];
m1_228 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithGreaterThan()", file="JPathParseTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithGreaterThan()", span="374-374"];
m1_229 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithGreaterThan()", file="JPathParseTests.cs", label="JPath path = new JPath(''[?(@.name>null)]'')", span="376-376"];
m1_230 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithGreaterThan()", file="JPathParseTests.cs", label="BooleanQueryExpression expressions = (BooleanQueryExpression)((QueryFilter)path.Filters[0]).Expression", span="377-377"];
m1_231 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithGreaterThan()", file="JPathParseTests.cs", label="Assert.AreEqual(QueryOperator.GreaterThan, expressions.Operator)", span="378-378"];
m1_232 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithGreaterThan()", file="JPathParseTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithGreaterThan()", span="374-374"];
m1_381 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultipleIndexes()", file="JPathParseTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultipleIndexes()", span="568-568"];
m1_382 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultipleIndexes()", file="JPathParseTests.cs", label="JPath path = new JPath(''[111119990,3]'')", span="570-570"];
m1_383 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultipleIndexes()", file="JPathParseTests.cs", label="Assert.AreEqual(1, path.Filters.Count)", span="571-571"];
m1_384 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultipleIndexes()", file="JPathParseTests.cs", label="Assert.AreEqual(2, ((ArrayMultipleIndexFilter)path.Filters[0]).Indexes.Count)", span="572-572"];
m1_385 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultipleIndexes()", file="JPathParseTests.cs", label="Assert.AreEqual(111119990, ((ArrayMultipleIndexFilter)path.Filters[0]).Indexes[0])", span="573-573"];
m1_386 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultipleIndexes()", file="JPathParseTests.cs", label="Assert.AreEqual(3, ((ArrayMultipleIndexFilter)path.Filters[0]).Indexes[1])", span="574-574"];
m1_387 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultipleIndexes()", file="JPathParseTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultipleIndexes()", span="568-568"];
m1_218 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithLessThan()", file="JPathParseTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithLessThan()", span="358-358"];
m1_219 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithLessThan()", file="JPathParseTests.cs", label="JPath path = new JPath(''[?(@.name<null)]'')", span="360-360"];
m1_220 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithLessThan()", file="JPathParseTests.cs", label="BooleanQueryExpression expressions = (BooleanQueryExpression)((QueryFilter)path.Filters[0]).Expression", span="361-361"];
m1_221 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithLessThan()", file="JPathParseTests.cs", label="Assert.AreEqual(QueryOperator.LessThan, expressions.Operator)", span="362-362"];
m1_222 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithLessThan()", file="JPathParseTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithLessThan()", span="358-358"];
m1_132 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndIndexer()", file="JPathParseTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndIndexer()", span="239-239"];
m1_133 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndIndexer()", file="JPathParseTests.cs", label="JPath path = new JPath(''Blah[0]'')", span="241-241"];
m1_134 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndIndexer()", file="JPathParseTests.cs", label="Assert.AreEqual(2, path.Filters.Count)", span="242-242"];
m1_135 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndIndexer()", file="JPathParseTests.cs", label="Assert.AreEqual(''Blah'', ((FieldFilter)path.Filters[0]).Name)", span="243-243"];
m1_136 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndIndexer()", file="JPathParseTests.cs", label="Assert.AreEqual(0, ((ArrayIndexFilter)path.Filters[1]).Index)", span="244-244"];
m1_137 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndIndexer()", file="JPathParseTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndIndexer()", span="239-239"];
m1_74 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.WildcardPropertyWithRoot()", file="JPathParseTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.WildcardPropertyWithRoot()", span="148-148"];
m1_75 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.WildcardPropertyWithRoot()", file="JPathParseTests.cs", label="JPath path = new JPath(''$.*'')", span="150-150"];
m1_76 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.WildcardPropertyWithRoot()", file="JPathParseTests.cs", label="Assert.AreEqual(1, path.Filters.Count)", span="151-151"];
m1_77 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.WildcardPropertyWithRoot()", file="JPathParseTests.cs", label="Assert.AreEqual(null, ((FieldFilter)path.Filters[0]).Name)", span="152-152"];
m1_78 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.WildcardPropertyWithRoot()", file="JPathParseTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.WildcardPropertyWithRoot()", span="148-148"];
m1_0 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BooleanQuery_TwoValues()", file="JPathParseTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BooleanQuery_TwoValues()", span="49-49"];
m1_1 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BooleanQuery_TwoValues()", file="JPathParseTests.cs", label="JPath path = new JPath(''[?(1 > 2)]'')", span="51-51"];
m1_2 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BooleanQuery_TwoValues()", file="JPathParseTests.cs", label="Assert.AreEqual(1, path.Filters.Count)", span="52-52"];
m1_3 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BooleanQuery_TwoValues()", file="JPathParseTests.cs", label="BooleanQueryExpression booleanExpression = (BooleanQueryExpression)((QueryFilter)path.Filters[0]).Expression", span="53-53"];
m1_4 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BooleanQuery_TwoValues()", file="JPathParseTests.cs", label="Assert.AreEqual(1, (int)(JValue)booleanExpression.Left)", span="54-54"];
m1_5 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BooleanQuery_TwoValues()", file="JPathParseTests.cs", label="Assert.AreEqual(2, (int)(JValue)booleanExpression.Right)", span="55-55"];
m1_6 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BooleanQuery_TwoValues()", file="JPathParseTests.cs", label="Assert.AreEqual(QueryOperator.GreaterThan, booleanExpression.Operator)", span="56-56"];
m1_7 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BooleanQuery_TwoValues()", file="JPathParseTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BooleanQuery_TwoValues()", span="49-49"];
m1_126 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.OnePropertyOneScan()", file="JPathParseTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.OnePropertyOneScan()", span="230-230"];
m1_127 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.OnePropertyOneScan()", file="JPathParseTests.cs", label="JPath path = new JPath(''Blah..Two'')", span="232-232"];
m1_128 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.OnePropertyOneScan()", file="JPathParseTests.cs", label="Assert.AreEqual(2, path.Filters.Count)", span="233-233"];
m1_129 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.OnePropertyOneScan()", file="JPathParseTests.cs", label="Assert.AreEqual(''Blah'', ((FieldFilter)path.Filters[0]).Name)", span="234-234"];
m1_130 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.OnePropertyOneScan()", file="JPathParseTests.cs", label="Assert.AreEqual(''Two'', ((ScanFilter)path.Filters[1]).Name)", span="235-235"];
m1_131 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.OnePropertyOneScan()", file="JPathParseTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.OnePropertyOneScan()", span="230-230"];
m1_444 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexWhitespace()", file="JPathParseTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexWhitespace()", span="658-658"];
m1_445 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexWhitespace()", file="JPathParseTests.cs", label="JPath path = new JPath(''[  -111119990  :  -3  :  -2  ]'')", span="660-660"];
m1_446 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexWhitespace()", file="JPathParseTests.cs", label="Assert.AreEqual(1, path.Filters.Count)", span="661-661"];
m1_447 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexWhitespace()", file="JPathParseTests.cs", label="Assert.AreEqual(-111119990, ((ArraySliceFilter)path.Filters[0]).Start)", span="662-662"];
m1_448 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexWhitespace()", file="JPathParseTests.cs", label="Assert.AreEqual(-3, ((ArraySliceFilter)path.Filters[0]).End)", span="663-663"];
m1_449 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexWhitespace()", file="JPathParseTests.cs", label="Assert.AreEqual(-2, ((ArraySliceFilter)path.Filters[0]).Step)", span="664-664"];
m1_450 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexWhitespace()", file="JPathParseTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexWhitespace()", span="658-658"];
m1_457 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.IndexerCloseInProperty()", file="JPathParseTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.IndexerCloseInProperty()", span="674-674"];
m1_458 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.IndexerCloseInProperty()", file="JPathParseTests.cs", label="ExceptionAssert.Throws<JsonException>(() => { new JPath('']''); }, ''Unexpected character while parsing path: ]'')", span="676-676"];
m1_459 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.IndexerCloseInProperty()", file="JPathParseTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.IndexerCloseInProperty()", span="674-674"];
m1_302 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BaddOr2()", file="JPathParseTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BaddOr2()", span="477-477"];
m1_303 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BaddOr2()", file="JPathParseTests.cs", label="ExceptionAssert.Throws<JsonException>(() => new JPath(''[?(@.name|)]''), ''Unexpected character while parsing path query: |'')", span="479-479"];
m1_304 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BaddOr2()", file="JPathParseTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BaddOr2()", span="477-477"];
m1_105 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleScanWithRoot()", file="JPathParseTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleScanWithRoot()", span="197-197"];
m1_106 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleScanWithRoot()", file="JPathParseTests.cs", label="JPath path = new JPath(''$..Blah'')", span="199-199"];
m1_107 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleScanWithRoot()", file="JPathParseTests.cs", label="Assert.AreEqual(1, path.Filters.Count)", span="200-200"];
m1_108 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleScanWithRoot()", file="JPathParseTests.cs", label="Assert.AreEqual(''Blah'', ((ScanFilter)path.Filters[0]).Name)", span="201-201"];
m1_109 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleScanWithRoot()", file="JPathParseTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleScanWithRoot()", span="197-197"];
m1_320 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.NoAtAfterOr()", file="JPathParseTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.NoAtAfterOr()", span="495-495"];
m1_321 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.NoAtAfterOr()", file="JPathParseTests.cs", label="ExceptionAssert.Throws<JsonException>(() => new JPath(''[?(@.name||s''), ''Unexpected character while parsing path query: s'')", span="497-497"];
m1_322 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.NoAtAfterOr()", file="JPathParseTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.NoAtAfterOr()", span="495-495"];
m1_338 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.NoPathAfterDot2()", file="JPathParseTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.NoPathAfterDot2()", span="513-513"];
m1_339 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.NoPathAfterDot2()", file="JPathParseTests.cs", label="ExceptionAssert.Throws<JsonException>(() => new JPath(''[?(@.name||@.)]''), @''Unexpected end while parsing path.'')", span="515-515"];
m1_340 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.NoPathAfterDot2()", file="JPathParseTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.NoPathAfterDot2()", span="513-513"];
m1_156 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithEscapeQuote()", file="JPathParseTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithEscapeQuote()", span="272-272"];
m1_157 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithEscapeQuote()", file="JPathParseTests.cs", label="JPath path = new JPath(@''Blah[ ?( @.name=='h\'i' ) ]'')", span="274-274"];
m1_158 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithEscapeQuote()", file="JPathParseTests.cs", label="Assert.AreEqual(2, path.Filters.Count)", span="275-275"];
m1_159 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithEscapeQuote()", file="JPathParseTests.cs", label="Assert.AreEqual(''Blah'', ((FieldFilter)path.Filters[0]).Name)", span="276-276"];
m1_160 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithEscapeQuote()", file="JPathParseTests.cs", label="BooleanQueryExpression expressions = (BooleanQueryExpression)((QueryFilter)path.Filters[1]).Expression", span="277-277"];
m1_161 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithEscapeQuote()", file="JPathParseTests.cs", label="Assert.AreEqual(QueryOperator.Equals, expressions.Operator)", span="278-278"];
m1_162 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithEscapeQuote()", file="JPathParseTests.cs", label="Assert.AreEqual(''h'i'', (string)(JToken)expressions.Right)", span="279-279"];
m1_163 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithEscapeQuote()", file="JPathParseTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithEscapeQuote()", span="272-272"];
m1_110 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.QueryTrue()", file="JPathParseTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.QueryTrue()", span="205-205"];
m1_111 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.QueryTrue()", color=green, community=0, file="JPathParseTests.cs", label="JPath path = new JPath(''$.elements[?(true)]'')", prediction=23, span="207-207"];
m1_112 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.QueryTrue()", color=green, community=0, file="JPathParseTests.cs", label="Assert.AreEqual(2, path.Filters.Count)", prediction=24, span="208-208"];
m1_113 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.QueryTrue()", color=green, community=0, file="JPathParseTests.cs", label="Assert.AreEqual(''elements'', ((FieldFilter)path.Filters[0]).Name)", prediction=23, span="209-209"];
m1_114 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.QueryTrue()", color=green, community=0, file="JPathParseTests.cs", label="Assert.AreEqual(QueryOperator.Exists, ((QueryFilter)path.Filters[1]).Expression.Operator)", prediction=23, span="210-210"];
m1_253 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterExistWithAnd()", file="JPathParseTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterExistWithAnd()", span="414-414"];
m1_254 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterExistWithAnd()", file="JPathParseTests.cs", label="JPath path = new JPath(''[?(@.name&&@.title)]'')", span="416-416"];
m1_255 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterExistWithAnd()", file="JPathParseTests.cs", label="CompositeExpression expressions = (CompositeExpression)((QueryFilter)path.Filters[0]).Expression", span="417-417"];
m1_256 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterExistWithAnd()", file="JPathParseTests.cs", label="Assert.AreEqual(QueryOperator.And, expressions.Operator)", span="418-418"];
m1_257 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterExistWithAnd()", file="JPathParseTests.cs", label="Assert.AreEqual(2, expressions.Expressions.Count)", span="419-419"];
m1_258 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterExistWithAnd()", file="JPathParseTests.cs", label="var first = (BooleanQueryExpression)expressions.Expressions[0]", span="421-421"];
m1_262 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterExistWithAnd()", file="JPathParseTests.cs", label="var second = (BooleanQueryExpression)expressions.Expressions[1]", span="426-426"];
m1_259 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterExistWithAnd()", file="JPathParseTests.cs", label="var firstPaths = (List<PathFilter>)first.Left", span="422-422"];
m1_261 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterExistWithAnd()", file="JPathParseTests.cs", label="Assert.AreEqual(QueryOperator.Exists, first.Operator)", span="424-424"];
m1_260 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterExistWithAnd()", file="JPathParseTests.cs", label="Assert.AreEqual(''name'', ((FieldFilter)firstPaths[0]).Name)", span="423-423"];
m1_263 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterExistWithAnd()", file="JPathParseTests.cs", label="var secondPaths = (List<PathFilter>)second.Left", span="427-427"];
m1_265 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterExistWithAnd()", file="JPathParseTests.cs", label="Assert.AreEqual(QueryOperator.Exists, second.Operator)", span="429-429"];
m1_264 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterExistWithAnd()", file="JPathParseTests.cs", label="Assert.AreEqual(''title'', ((FieldFilter)secondPaths[0]).Name)", span="428-428"];
m1_266 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterExistWithAnd()", file="JPathParseTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterExistWithAnd()", span="414-414"];
m1_10 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BooleanQuery_TwoPaths()", file="JPathParseTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BooleanQuery_TwoPaths()", span="60-60"];
m1_11 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BooleanQuery_TwoPaths()", file="JPathParseTests.cs", label="JPath path = new JPath(''[?(@.price > @.max_price)]'')", span="62-62"];
m1_12 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BooleanQuery_TwoPaths()", file="JPathParseTests.cs", label="Assert.AreEqual(1, path.Filters.Count)", span="63-63"];
m1_13 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BooleanQuery_TwoPaths()", file="JPathParseTests.cs", label="BooleanQueryExpression booleanExpression = (BooleanQueryExpression)((QueryFilter)path.Filters[0]).Expression", span="64-64"];
m1_14 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BooleanQuery_TwoPaths()", file="JPathParseTests.cs", label="List<PathFilter> leftPaths = (List<PathFilter>)booleanExpression.Left", span="65-65"];
m1_15 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BooleanQuery_TwoPaths()", file="JPathParseTests.cs", label="List<PathFilter> rightPaths = (List<PathFilter>)booleanExpression.Right", span="66-66"];
m1_18 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BooleanQuery_TwoPaths()", file="JPathParseTests.cs", label="Assert.AreEqual(QueryOperator.GreaterThan, booleanExpression.Operator)", span="70-70"];
m1_16 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BooleanQuery_TwoPaths()", file="JPathParseTests.cs", label="Assert.AreEqual(''price'', ((FieldFilter)leftPaths[0]).Name)", span="68-68"];
m1_17 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BooleanQuery_TwoPaths()", file="JPathParseTests.cs", label="Assert.AreEqual(''max_price'', ((FieldFilter)rightPaths[0]).Name)", span="69-69"];
m1_19 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BooleanQuery_TwoPaths()", file="JPathParseTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BooleanQuery_TwoPaths()", span="60-60"];
m1_326 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.NoPathAfterAt()", file="JPathParseTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.NoPathAfterAt()", span="501-501"];
m1_327 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.NoPathAfterAt()", file="JPathParseTests.cs", label="ExceptionAssert.Throws<JsonException>(() => new JPath(''[?(@.name||@''), @''Path ended with open query.'')", span="503-503"];
m1_328 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.NoPathAfterAt()", file="JPathParseTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.NoPathAfterAt()", span="501-501"];
m1_68 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.RootWithBadWhitespace2()", file="JPathParseTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.RootWithBadWhitespace2()", span="142-142"];
m1_69 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.RootWithBadWhitespace2()", file="JPathParseTests.cs", label="ExceptionAssert.Throws<JsonException>(() => { new JPath(''$. Blah''); }, @''Unexpected character while parsing path:  '')", span="144-144"];
m1_70 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.RootWithBadWhitespace2()", file="JPathParseTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.RootWithBadWhitespace2()", span="142-142"];
m1_45 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyWithRoot()", file="JPathParseTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyWithRoot()", span="114-114"];
m1_46 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyWithRoot()", file="JPathParseTests.cs", label="JPath path = new JPath(''$.Blah'')", span="116-116"];
m1_47 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyWithRoot()", file="JPathParseTests.cs", label="Assert.AreEqual(1, path.Filters.Count)", span="117-117"];
m1_48 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyWithRoot()", file="JPathParseTests.cs", label="Assert.AreEqual(''Blah'', ((FieldFilter)path.Filters[0]).Name)", span="118-118"];
m1_49 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyWithRoot()", file="JPathParseTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyWithRoot()", span="114-114"];
m1_248 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithFloat()", file="JPathParseTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithFloat()", span="406-406"];
m1_249 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithFloat()", file="JPathParseTests.cs", label="JPath path = new JPath(''[?(@.name>=12.1)]'')", span="408-408"];
m1_250 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithFloat()", file="JPathParseTests.cs", label="BooleanQueryExpression expressions = (BooleanQueryExpression)((QueryFilter)path.Filters[0]).Expression", span="409-409"];
m1_251 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithFloat()", file="JPathParseTests.cs", label="Assert.AreEqual(12.1d, (double)(JToken)expressions.Right)", span="410-410"];
m1_252 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithFloat()", file="JPathParseTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithFloat()", span="406-406"];
m1_62 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.NoFieldNameAfterDot()", file="JPathParseTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.NoFieldNameAfterDot()", span="136-136"];
m1_63 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.NoFieldNameAfterDot()", file="JPathParseTests.cs", label="ExceptionAssert.Throws<JsonException>(() => { new JPath(''$.Blah.''); }, @''Unexpected end while parsing path.'')", span="138-138"];
m1_64 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.NoFieldNameAfterDot()", file="JPathParseTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.NoFieldNameAfterDot()", span="136-136"];
m1_213 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithNotEquals2()", file="JPathParseTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithNotEquals2()", span="350-350"];
m1_214 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithNotEquals2()", file="JPathParseTests.cs", label="JPath path = new JPath(''[?(@.name!=null)]'')", span="352-352"];
m1_215 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithNotEquals2()", file="JPathParseTests.cs", label="BooleanQueryExpression expressions = (BooleanQueryExpression)((QueryFilter)path.Filters[0]).Expression", span="353-353"];
m1_216 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithNotEquals2()", file="JPathParseTests.cs", label="Assert.AreEqual(QueryOperator.NotEquals, expressions.Operator)", span="354-354"];
m1_217 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithNotEquals2()", file="JPathParseTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithNotEquals2()", span="350-350"];
m1_55 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.RootWithBadWhitespace()", file="JPathParseTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.RootWithBadWhitespace()", span="130-130"];
m1_56 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.RootWithBadWhitespace()", file="JPathParseTests.cs", label="ExceptionAssert.Throws<JsonException>(() => { new JPath(''$ .Blah''); }, @''Unexpected character while parsing path:  '')", span="132-132"];
m1_57 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.RootWithBadWhitespace()", file="JPathParseTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.RootWithBadWhitespace()", span="130-130"];
m1_84 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.RootArrayNoDot()", file="JPathParseTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.RootArrayNoDot()", span="164-164"];
m1_85 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.RootArrayNoDot()", file="JPathParseTests.cs", label="JPath path = new JPath(''$[1]'')", span="166-166"];
m1_86 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.RootArrayNoDot()", file="JPathParseTests.cs", label="Assert.AreEqual(1, path.Filters.Count)", span="167-167"];
m1_87 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.RootArrayNoDot()", file="JPathParseTests.cs", label="Assert.AreEqual(1, ((ArrayIndexFilter)path.Filters[0]).Index)", span="168-168"];
m1_88 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.RootArrayNoDot()", file="JPathParseTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.RootArrayNoDot()", span="164-164"];
m1_267 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterExistWithAndOr()", file="JPathParseTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterExistWithAndOr()", span="433-433"];
m1_268 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterExistWithAndOr()", file="JPathParseTests.cs", label="JPath path = new JPath(''[?(@.name&&@.title||@.pie)]'')", span="435-435"];
m1_269 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterExistWithAndOr()", file="JPathParseTests.cs", label="CompositeExpression andExpression = (CompositeExpression)((QueryFilter)path.Filters[0]).Expression", span="436-436"];
m1_270 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterExistWithAndOr()", file="JPathParseTests.cs", label="Assert.AreEqual(QueryOperator.And, andExpression.Operator)", span="437-437"];
m1_271 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterExistWithAndOr()", file="JPathParseTests.cs", label="Assert.AreEqual(2, andExpression.Expressions.Count)", span="438-438"];
m1_272 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterExistWithAndOr()", file="JPathParseTests.cs", label="var first = (BooleanQueryExpression)andExpression.Expressions[0]", span="440-440"];
m1_276 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterExistWithAndOr()", file="JPathParseTests.cs", label="CompositeExpression orExpression = (CompositeExpression)andExpression.Expressions[1]", span="445-445"];
m1_273 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterExistWithAndOr()", file="JPathParseTests.cs", label="var firstPaths = (List<PathFilter>)first.Left", span="441-441"];
m1_275 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterExistWithAndOr()", file="JPathParseTests.cs", label="Assert.AreEqual(QueryOperator.Exists, first.Operator)", span="443-443"];
m1_274 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterExistWithAndOr()", file="JPathParseTests.cs", label="Assert.AreEqual(''name'', ((FieldFilter)firstPaths[0]).Name)", span="442-442"];
m1_277 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterExistWithAndOr()", file="JPathParseTests.cs", label="Assert.AreEqual(2, orExpression.Expressions.Count)", span="446-446"];
m1_278 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterExistWithAndOr()", file="JPathParseTests.cs", label="var orFirst = (BooleanQueryExpression)orExpression.Expressions[0]", span="448-448"];
m1_282 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterExistWithAndOr()", file="JPathParseTests.cs", label="var orSecond = (BooleanQueryExpression)orExpression.Expressions[1]", span="453-453"];
m1_279 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterExistWithAndOr()", file="JPathParseTests.cs", label="var orFirstPaths = (List<PathFilter>)orFirst.Left", span="449-449"];
m1_281 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterExistWithAndOr()", file="JPathParseTests.cs", label="Assert.AreEqual(QueryOperator.Exists, orFirst.Operator)", span="451-451"];
m1_280 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterExistWithAndOr()", file="JPathParseTests.cs", label="Assert.AreEqual(''title'', ((FieldFilter)orFirstPaths[0]).Name)", span="450-450"];
m1_283 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterExistWithAndOr()", file="JPathParseTests.cs", label="var orSecondPaths = (List<PathFilter>)orSecond.Left", span="454-454"];
m1_285 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterExistWithAndOr()", file="JPathParseTests.cs", label="Assert.AreEqual(QueryOperator.Exists, orSecond.Operator)", span="456-456"];
m1_284 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterExistWithAndOr()", file="JPathParseTests.cs", label="Assert.AreEqual(''pie'', ((FieldFilter)orSecondPaths[0]).Name)", span="455-455"];
m1_286 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterExistWithAndOr()", file="JPathParseTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterExistWithAndOr()", span="433-433"];
m1_138 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndExistsQuery()", file="JPathParseTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndExistsQuery()", span="248-248"];
m1_139 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndExistsQuery()", file="JPathParseTests.cs", label="JPath path = new JPath(''Blah[ ?( @..name ) ]'')", span="250-250"];
m1_140 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndExistsQuery()", file="JPathParseTests.cs", label="Assert.AreEqual(2, path.Filters.Count)", span="251-251"];
m1_141 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndExistsQuery()", file="JPathParseTests.cs", label="Assert.AreEqual(''Blah'', ((FieldFilter)path.Filters[0]).Name)", span="252-252"];
m1_142 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndExistsQuery()", file="JPathParseTests.cs", label="BooleanQueryExpression expressions = (BooleanQueryExpression)((QueryFilter)path.Filters[1]).Expression", span="253-253"];
m1_143 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndExistsQuery()", file="JPathParseTests.cs", label="Assert.AreEqual(QueryOperator.Exists, expressions.Operator)", span="254-254"];
m1_144 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndExistsQuery()", file="JPathParseTests.cs", label="List<PathFilter> paths = (List<PathFilter>)expressions.Left", span="255-255"];
m1_145 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndExistsQuery()", file="JPathParseTests.cs", label="Assert.AreEqual(1, paths.Count)", span="256-256"];
m1_146 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndExistsQuery()", file="JPathParseTests.cs", label="Assert.AreEqual(''name'', ((ScanFilter)paths[0]).Name)", span="257-257"];
m1_147 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndExistsQuery()", file="JPathParseTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndExistsQuery()", span="248-248"];
m1_223 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithLessThanOrEquals()", file="JPathParseTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithLessThanOrEquals()", span="366-366"];
m1_224 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithLessThanOrEquals()", file="JPathParseTests.cs", label="JPath path = new JPath(''[?(@.name<=null)]'')", span="368-368"];
m1_225 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithLessThanOrEquals()", file="JPathParseTests.cs", label="BooleanQueryExpression expressions = (BooleanQueryExpression)((QueryFilter)path.Filters[0]).Expression", span="369-369"];
m1_226 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithLessThanOrEquals()", file="JPathParseTests.cs", label="Assert.AreEqual(QueryOperator.LessThanOrEquals, expressions.Operator)", span="370-370"];
m1_227 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithLessThanOrEquals()", file="JPathParseTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithLessThanOrEquals()", span="366-366"];
m1_172 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithUnknownEscape()", file="JPathParseTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithUnknownEscape()", span="294-294"];
m1_173 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithUnknownEscape()", file="JPathParseTests.cs", label="ExceptionAssert.Throws<JsonException>(() => { new JPath(@''Blah[ ?( @.name=='h\i' ) ]''); }, @''Unknown escape character: \i'')", span="296-296"];
m1_174 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithUnknownEscape()", file="JPathParseTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithUnknownEscape()", span="294-294"];
m1_332 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.NoPathAfterDot()", file="JPathParseTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.NoPathAfterDot()", span="507-507"];
m1_333 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.NoPathAfterDot()", file="JPathParseTests.cs", label="ExceptionAssert.Throws<JsonException>(() => new JPath(''[?(@.name||@.''), @''Unexpected end while parsing path.'')", span="509-509"];
m1_334 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.NoPathAfterDot()", file="JPathParseTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.NoPathAfterDot()", span="507-507"];
m1_371 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.IndexerOnly()", file="JPathParseTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.IndexerOnly()", span="552-552"];
m1_372 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.IndexerOnly()", file="JPathParseTests.cs", label="JPath path = new JPath(''[111119990]'')", span="554-554"];
m1_373 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.IndexerOnly()", file="JPathParseTests.cs", label="Assert.AreEqual(1, path.Filters.Count)", span="555-555"];
m1_374 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.IndexerOnly()", file="JPathParseTests.cs", label="Assert.AreEqual(111119990, ((ArrayIndexFilter)path.Filters[0]).Index)", span="556-556"];
m1_375 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.IndexerOnly()", file="JPathParseTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.IndexerOnly()", span="552-552"];
m1_416 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndex()", file="JPathParseTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndex()", span="618-618"];
m1_417 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndex()", file="JPathParseTests.cs", label="JPath path = new JPath(''[111119990:3]'')", span="620-620"];
m1_418 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndex()", file="JPathParseTests.cs", label="Assert.AreEqual(1, path.Filters.Count)", span="621-621"];
m1_419 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndex()", file="JPathParseTests.cs", label="Assert.AreEqual(111119990, ((ArraySliceFilter)path.Filters[0]).Start)", span="622-622"];
m1_420 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndex()", file="JPathParseTests.cs", label="Assert.AreEqual(3, ((ArraySliceFilter)path.Filters[0]).End)", span="623-623"];
m1_421 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndex()", file="JPathParseTests.cs", label="Assert.AreEqual(null, ((ArraySliceFilter)path.Filters[0]).Step)", span="624-624"];
m1_422 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndex()", file="JPathParseTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndex()", span="618-618"];
m1_451 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.EmptyIndexer()", file="JPathParseTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.EmptyIndexer()", span="668-668"];
m1_452 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.EmptyIndexer()", file="JPathParseTests.cs", label="ExceptionAssert.Throws<JsonException>(() => { new JPath(''[]''); }, ''Array index expected.'')", span="670-670"];
m1_453 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.EmptyIndexer()", file="JPathParseTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.EmptyIndexer()", span="668-668"];
m1_115 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.QueryTrue()", file="JPathParseTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.QueryTrue()", span="205-205"];
m1_116 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.ScanQuery()", file="JPathParseTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.ScanQuery()", span="214-214"];
m1_117 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.ScanQuery()", color=green, community=0, file="JPathParseTests.cs", label="JPath path = new JPath(''$.elements..[?(@.id=='AAA')]'')", prediction=27, span="216-216"];
m1_118 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.ScanQuery()", color=green, community=0, file="JPathParseTests.cs", label="Assert.AreEqual(2, path.Filters.Count)", prediction=28, span="217-217"];
m1_119 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.ScanQuery()", color=green, community=0, file="JPathParseTests.cs", label="Assert.AreEqual(''elements'', ((FieldFilter)path.Filters[0]).Name)", prediction=27, span="218-218"];
m1_120 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.TwoProperties()", color=green, community=0, file="JPathParseTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.TwoProperties()", prediction=27, span="221-221"];
m1_121 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.TwoProperties()", color=green, community=0, file="JPathParseTests.cs", label="JPath path = new JPath(''Blah.Two'')", prediction=31, span="223-223"];
m1_122 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.TwoProperties()", color=green, community=0, file="JPathParseTests.cs", label="Assert.AreEqual(2, path.Filters.Count)", prediction=32, span="224-224"];
m1_123 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.TwoProperties()", file="JPathParseTests.cs", label="Assert.AreEqual(''Blah'', ((FieldFilter)path.Filters[0]).Name)", span="225-225"];
m1_79 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.WildcardArrayWithRoot()", file="JPathParseTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.WildcardArrayWithRoot()", span="156-156"];
m1_80 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.WildcardArrayWithRoot()", file="JPathParseTests.cs", label="JPath path = new JPath(''$.[*]'')", span="158-158"];
m1_81 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.WildcardArrayWithRoot()", file="JPathParseTests.cs", label="Assert.AreEqual(1, path.Filters.Count)", span="159-159"];
m1_82 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.WildcardArrayWithRoot()", file="JPathParseTests.cs", label="Assert.AreEqual(null, ((ArrayIndexFilter)path.Filters[0]).Index)", span="160-160"];
m1_83 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.WildcardArrayWithRoot()", file="JPathParseTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.WildcardArrayWithRoot()", span="156-156"];
m1_9 [cluster="Unk.AreEqual", file="JPathParseTests.cs", label="Entry Unk.AreEqual", span=""];
m1_409 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexAll()", file="JPathParseTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexAll()", span="608-608"];
m1_410 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexAll()", file="JPathParseTests.cs", label="JPath path = new JPath(''[111119990:3:2]'')", span="610-610"];
m1_411 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexAll()", file="JPathParseTests.cs", label="Assert.AreEqual(1, path.Filters.Count)", span="611-611"];
m1_412 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexAll()", file="JPathParseTests.cs", label="Assert.AreEqual(111119990, ((ArraySliceFilter)path.Filters[0]).Start)", span="612-612"];
m1_413 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexAll()", file="JPathParseTests.cs", label="Assert.AreEqual(3, ((ArraySliceFilter)path.Filters[0]).End)", span="613-613"];
m1_414 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexAll()", file="JPathParseTests.cs", label="Assert.AreEqual(2, ((ArraySliceFilter)path.Filters[0]).Step)", span="614-614"];
m1_415 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexAll()", file="JPathParseTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexAll()", span="608-608"];
m1_208 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithNotEquals()", file="JPathParseTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithNotEquals()", span="342-342"];
m1_209 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithNotEquals()", file="JPathParseTests.cs", label="JPath path = new JPath(''[?(@.name<>null)]'')", span="344-344"];
m1_210 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithNotEquals()", file="JPathParseTests.cs", label="BooleanQueryExpression expressions = (BooleanQueryExpression)((QueryFilter)path.Filters[0]).Expression", span="345-345"];
m1_211 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithNotEquals()", file="JPathParseTests.cs", label="Assert.AreEqual(QueryOperator.NotEquals, expressions.Operator)", span="346-346"];
m1_212 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithNotEquals()", file="JPathParseTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithNotEquals()", span="342-342"];
m1_194 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithNull()", file="JPathParseTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithNull()", span="322-322"];
m1_195 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithNull()", file="JPathParseTests.cs", label="JPath path = new JPath(''Blah[ ?( @.name==null ) ]'')", span="324-324"];
m1_196 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithNull()", file="JPathParseTests.cs", label="Assert.AreEqual(2, path.Filters.Count)", span="325-325"];
m1_197 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithNull()", file="JPathParseTests.cs", label="Assert.AreEqual(''Blah'', ((FieldFilter)path.Filters[0]).Name)", span="326-326"];
m1_198 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithNull()", file="JPathParseTests.cs", label="BooleanQueryExpression expressions = (BooleanQueryExpression)((QueryFilter)path.Filters[1]).Expression", span="327-327"];
m1_199 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithNull()", file="JPathParseTests.cs", label="Assert.AreEqual(QueryOperator.Equals, expressions.Operator)", span="328-328"];
m1_200 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithNull()", file="JPathParseTests.cs", label="Assert.AreEqual(null, ((JValue)expressions.Right).Value)", span="329-329"];
m1_201 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithNull()", file="JPathParseTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithNull()", span="322-322"];
m1_365 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.UnclosedIndexer()", file="JPathParseTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.UnclosedIndexer()", span="546-546"];
m1_366 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.UnclosedIndexer()", file="JPathParseTests.cs", label="ExceptionAssert.Throws<JsonException>(() => { new JPath(''Blah[0''); }, @''Path ended with open indexer.'')", span="548-548"];
m1_367 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.UnclosedIndexer()", file="JPathParseTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.UnclosedIndexer()", span="546-546"];
m1_359 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BadCharactersInIndexer()", file="JPathParseTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BadCharactersInIndexer()", span="540-540"];
m1_360 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BadCharactersInIndexer()", file="JPathParseTests.cs", label="ExceptionAssert.Throws<JsonException>(() => { new JPath(''Blah[[0]].Two.Three[1].Four''); }, @''Unexpected character while parsing path indexer: ['')", span="542-542"];
m1_361 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BadCharactersInIndexer()", file="JPathParseTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BadCharactersInIndexer()", span="540-540"];
m1_477 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.PropertyFollowingEscapedPropertyName()", file="JPathParseTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.PropertyFollowingEscapedPropertyName()", span="697-697"];
m1_478 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.PropertyFollowingEscapedPropertyName()", file="JPathParseTests.cs", label="JPath path = new JPath(''frameworks.dnxcore50.dependencies.['System.Xml.ReaderWriter'].source'')", span="699-699"];
m1_479 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.PropertyFollowingEscapedPropertyName()", file="JPathParseTests.cs", label="Assert.AreEqual(5, path.Filters.Count)", span="700-700"];
m1_480 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.PropertyFollowingEscapedPropertyName()", file="JPathParseTests.cs", label="Assert.AreEqual(''frameworks'', ((FieldFilter)path.Filters[0]).Name)", span="702-702"];
m1_481 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.PropertyFollowingEscapedPropertyName()", file="JPathParseTests.cs", label="Assert.AreEqual(''dnxcore50'', ((FieldFilter)path.Filters[1]).Name)", span="703-703"];
m1_482 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.PropertyFollowingEscapedPropertyName()", file="JPathParseTests.cs", label="Assert.AreEqual(''dependencies'', ((FieldFilter)path.Filters[2]).Name)", span="704-704"];
m1_483 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.PropertyFollowingEscapedPropertyName()", file="JPathParseTests.cs", label="Assert.AreEqual(''System.Xml.ReaderWriter'', ((FieldFilter)path.Filters[3]).Name)", span="705-705"];
m1_484 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.PropertyFollowingEscapedPropertyName()", file="JPathParseTests.cs", label="Assert.AreEqual(''source'', ((FieldFilter)path.Filters[4]).Name)", span="706-706"];
m1_485 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.PropertyFollowingEscapedPropertyName()", file="JPathParseTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.PropertyFollowingEscapedPropertyName()", span="697-697"];
m1_148 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithWhitespace()", file="JPathParseTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithWhitespace()", span="261-261"];
m1_149 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithWhitespace()", file="JPathParseTests.cs", label="JPath path = new JPath(''Blah[ ?( @.name=='hi' ) ]'')", span="263-263"];
m1_150 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithWhitespace()", file="JPathParseTests.cs", label="Assert.AreEqual(2, path.Filters.Count)", span="264-264"];
m1_151 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithWhitespace()", file="JPathParseTests.cs", label="Assert.AreEqual(''Blah'', ((FieldFilter)path.Filters[0]).Name)", span="265-265"];
m1_152 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithWhitespace()", file="JPathParseTests.cs", label="BooleanQueryExpression expressions = (BooleanQueryExpression)((QueryFilter)path.Filters[1]).Expression", span="266-266"];
m1_153 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithWhitespace()", file="JPathParseTests.cs", label="Assert.AreEqual(QueryOperator.Equals, expressions.Operator)", span="267-267"];
m1_154 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithWhitespace()", file="JPathParseTests.cs", label="Assert.AreEqual(''hi'', (string)(JToken)expressions.Right)", span="268-268"];
m1_155 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithWhitespace()", file="JPathParseTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithWhitespace()", span="261-261"];
m1_423 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexNegative()", file="JPathParseTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexNegative()", span="628-628"];
m1_424 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexNegative()", file="JPathParseTests.cs", label="JPath path = new JPath(''[-111119990:-3:-2]'')", span="630-630"];
m1_425 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexNegative()", file="JPathParseTests.cs", label="Assert.AreEqual(1, path.Filters.Count)", span="631-631"];
m1_426 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexNegative()", file="JPathParseTests.cs", label="Assert.AreEqual(-111119990, ((ArraySliceFilter)path.Filters[0]).Start)", span="632-632"];
m1_427 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexNegative()", file="JPathParseTests.cs", label="Assert.AreEqual(-3, ((ArraySliceFilter)path.Filters[0]).End)", span="633-633"];
m1_428 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexNegative()", file="JPathParseTests.cs", label="Assert.AreEqual(-2, ((ArraySliceFilter)path.Filters[0]).Step)", span="634-634"];
m1_429 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexNegative()", file="JPathParseTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexNegative()", span="628-628"];
m1_376 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.IndexerOnlyWithWhitespace()", file="JPathParseTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.IndexerOnlyWithWhitespace()", span="560-560"];
m1_377 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.IndexerOnlyWithWhitespace()", file="JPathParseTests.cs", label="JPath path = new JPath(''[  10  ]'')", span="562-562"];
m1_378 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.IndexerOnlyWithWhitespace()", file="JPathParseTests.cs", label="Assert.AreEqual(1, path.Filters.Count)", span="563-563"];
m1_379 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.IndexerOnlyWithWhitespace()", file="JPathParseTests.cs", label="Assert.AreEqual(10, ((ArrayIndexFilter)path.Filters[0]).Index)", span="564-564"];
m1_380 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.IndexerOnlyWithWhitespace()", file="JPathParseTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.IndexerOnlyWithWhitespace()", span="560-560"];
m1_402 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultipleQuotedIndexesWithWhitespace()", file="JPathParseTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultipleQuotedIndexesWithWhitespace()", span="598-598"];
m1_403 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultipleQuotedIndexesWithWhitespace()", file="JPathParseTests.cs", label="JPath path = new JPath(''[ '111119990' , '3' ]'')", span="600-600"];
m1_404 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultipleQuotedIndexesWithWhitespace()", file="JPathParseTests.cs", label="Assert.AreEqual(1, path.Filters.Count)", span="601-601"];
m1_405 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultipleQuotedIndexesWithWhitespace()", file="JPathParseTests.cs", label="Assert.AreEqual(2, ((FieldMultipleFilter)path.Filters[0]).Names.Count)", span="602-602"];
m1_406 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultipleQuotedIndexesWithWhitespace()", file="JPathParseTests.cs", label="Assert.AreEqual(''111119990'', ((FieldMultipleFilter)path.Filters[0]).Names[0])", span="603-603"];
m1_407 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultipleQuotedIndexesWithWhitespace()", file="JPathParseTests.cs", label="Assert.AreEqual(''3'', ((FieldMultipleFilter)path.Filters[0]).Names[1])", span="604-604"];
m1_408 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultipleQuotedIndexesWithWhitespace()", file="JPathParseTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultipleQuotedIndexesWithWhitespace()", span="598-598"];
m1_35 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleQuotedPropertyWithDots()", file="JPathParseTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleQuotedPropertyWithDots()", span="98-98"];
m1_36 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleQuotedPropertyWithDots()", file="JPathParseTests.cs", label="JPath path = new JPath(''['Blah.Ha']'')", span="100-100"];
m1_37 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleQuotedPropertyWithDots()", file="JPathParseTests.cs", label="Assert.AreEqual(1, path.Filters.Count)", span="101-101"];
m1_38 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleQuotedPropertyWithDots()", file="JPathParseTests.cs", label="Assert.AreEqual(''Blah.Ha'', ((FieldFilter)path.Filters[0]).Name)", span="102-102"];
m1_39 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleQuotedPropertyWithDots()", file="JPathParseTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleQuotedPropertyWithDots()", span="98-98"];
m1_388 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultipleIndexesWithWhitespace()", file="JPathParseTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultipleIndexesWithWhitespace()", span="578-578"];
m1_389 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultipleIndexesWithWhitespace()", file="JPathParseTests.cs", label="JPath path = new JPath(''[   111119990  ,   3   ]'')", span="580-580"];
m1_390 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultipleIndexesWithWhitespace()", file="JPathParseTests.cs", label="Assert.AreEqual(1, path.Filters.Count)", span="581-581"];
m1_391 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultipleIndexesWithWhitespace()", file="JPathParseTests.cs", label="Assert.AreEqual(2, ((ArrayMultipleIndexFilter)path.Filters[0]).Indexes.Count)", span="582-582"];
m1_392 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultipleIndexesWithWhitespace()", file="JPathParseTests.cs", label="Assert.AreEqual(111119990, ((ArrayMultipleIndexFilter)path.Filters[0]).Indexes[0])", span="583-583"];
m1_393 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultipleIndexesWithWhitespace()", file="JPathParseTests.cs", label="Assert.AreEqual(3, ((ArrayMultipleIndexFilter)path.Filters[0]).Indexes[1])", span="584-584"];
m1_394 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultipleIndexesWithWhitespace()", file="JPathParseTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultipleIndexesWithWhitespace()", span="578-578"];
m1_296 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BadOr1()", file="JPathParseTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BadOr1()", span="471-471"];
m1_297 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BadOr1()", file="JPathParseTests.cs", label="ExceptionAssert.Throws<JsonException>(() => new JPath(''[?(@.name||)]''), ''Unexpected character while parsing path query: )'')", span="473-473"];
m1_298 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BadOr1()", file="JPathParseTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BadOr1()", span="471-471"];
m1_471 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MissingDotAfterIndexer()", file="JPathParseTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MissingDotAfterIndexer()", span="691-691"];
m1_472 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MissingDotAfterIndexer()", file="JPathParseTests.cs", label="ExceptionAssert.Throws<JsonException>(() => { new JPath(''[1]Blah''); }, ''Unexpected character following indexer: B'')", span="693-693"];
m1_473 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MissingDotAfterIndexer()", file="JPathParseTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MissingDotAfterIndexer()", span="691-691"];
m1_178 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithFalse()", file="JPathParseTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithFalse()", span="300-300"];
m1_179 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithFalse()", file="JPathParseTests.cs", label="JPath path = new JPath(''Blah[ ?( @.name==false ) ]'')", span="302-302"];
m1_180 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithFalse()", file="JPathParseTests.cs", label="Assert.AreEqual(2, path.Filters.Count)", span="303-303"];
m1_181 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithFalse()", file="JPathParseTests.cs", label="Assert.AreEqual(''Blah'', ((FieldFilter)path.Filters[0]).Name)", span="304-304"];
m1_182 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithFalse()", file="JPathParseTests.cs", label="BooleanQueryExpression expressions = (BooleanQueryExpression)((QueryFilter)path.Filters[1]).Expression", span="305-305"];
m1_183 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithFalse()", file="JPathParseTests.cs", label="Assert.AreEqual(QueryOperator.Equals, expressions.Operator)", span="306-306"];
m1_184 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithFalse()", file="JPathParseTests.cs", label="Assert.AreEqual(false, (bool)(JToken)expressions.Right)", span="307-307"];
m1_185 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithFalse()", file="JPathParseTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithFalse()", span="300-300"];
m1_89 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.WildcardArray()", file="JPathParseTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.WildcardArray()", span="172-172"];
m1_90 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.WildcardArray()", file="JPathParseTests.cs", label="JPath path = new JPath(''[*]'')", span="174-174"];
m1_91 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.WildcardArray()", file="JPathParseTests.cs", label="Assert.AreEqual(1, path.Filters.Count)", span="175-175"];
m1_92 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.WildcardArray()", file="JPathParseTests.cs", label="Assert.AreEqual(null, ((ArrayIndexFilter)path.Filters[0]).Index)", span="176-176"];
m1_93 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.WildcardArray()", file="JPathParseTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.WildcardArray()", span="172-172"];
m1_50 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyWithRootWithStartAndEndWhitespace()", file="JPathParseTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyWithRootWithStartAndEndWhitespace()", span="122-122"];
m1_51 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyWithRootWithStartAndEndWhitespace()", file="JPathParseTests.cs", label="JPath path = new JPath('' $.Blah '')", span="124-124"];
m1_52 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyWithRootWithStartAndEndWhitespace()", file="JPathParseTests.cs", label="Assert.AreEqual(1, path.Filters.Count)", span="125-125"];
m1_53 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyWithRootWithStartAndEndWhitespace()", file="JPathParseTests.cs", label="Assert.AreEqual(''Blah'', ((FieldFilter)path.Filters[0]).Name)", span="126-126"];
m1_54 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyWithRootWithStartAndEndWhitespace()", file="JPathParseTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyWithRootWithStartAndEndWhitespace()", span="122-122"];
m1_30 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleQuotedPropertyWithWhitespace()", file="JPathParseTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleQuotedPropertyWithWhitespace()", span="90-90"];
m1_31 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleQuotedPropertyWithWhitespace()", file="JPathParseTests.cs", label="JPath path = new JPath(''[  'Blah'  ]'')", span="92-92"];
m1_32 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleQuotedPropertyWithWhitespace()", file="JPathParseTests.cs", label="Assert.AreEqual(1, path.Filters.Count)", span="93-93"];
m1_33 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleQuotedPropertyWithWhitespace()", file="JPathParseTests.cs", label="Assert.AreEqual(''Blah'', ((FieldFilter)path.Filters[0]).Name)", span="94-94"];
m1_34 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleQuotedPropertyWithWhitespace()", file="JPathParseTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleQuotedPropertyWithWhitespace()", span="90-90"];
m1_202 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithScan()", file="JPathParseTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithScan()", span="333-333"];
m1_203 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithScan()", file="JPathParseTests.cs", label="JPath path = new JPath(''[?(@..name<>null)]'')", span="335-335"];
m1_204 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithScan()", file="JPathParseTests.cs", label="BooleanQueryExpression expressions = (BooleanQueryExpression)((QueryFilter)path.Filters[0]).Expression", span="336-336"];
m1_205 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithScan()", file="JPathParseTests.cs", label="List<PathFilter> paths = (List<PathFilter>)expressions.Left", span="337-337"];
m1_206 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithScan()", file="JPathParseTests.cs", label="Assert.AreEqual(''name'', ((ScanFilter)paths[0]).Name)", span="338-338"];
m1_207 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithScan()", file="JPathParseTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithScan()", span="333-333"];
m1_238 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithInteger()", file="JPathParseTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithInteger()", span="390-390"];
m1_239 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithInteger()", file="JPathParseTests.cs", label="JPath path = new JPath(''[?(@.name>=12)]'')", span="392-392"];
m1_240 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithInteger()", file="JPathParseTests.cs", label="BooleanQueryExpression expressions = (BooleanQueryExpression)((QueryFilter)path.Filters[0]).Expression", span="393-393"];
m1_241 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithInteger()", file="JPathParseTests.cs", label="Assert.AreEqual(12, (int)(JToken)expressions.Right)", span="394-394"];
m1_242 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithInteger()", file="JPathParseTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithInteger()", span="390-390"];
m1_233 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithGreaterThanOrEquals()", file="JPathParseTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithGreaterThanOrEquals()", span="382-382"];
m1_234 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithGreaterThanOrEquals()", file="JPathParseTests.cs", label="JPath path = new JPath(''[?(@.name>=null)]'')", span="384-384"];
m1_235 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithGreaterThanOrEquals()", file="JPathParseTests.cs", label="BooleanQueryExpression expressions = (BooleanQueryExpression)((QueryFilter)path.Filters[0]).Expression", span="385-385"];
m1_236 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithGreaterThanOrEquals()", file="JPathParseTests.cs", label="Assert.AreEqual(QueryOperator.GreaterThanOrEquals, expressions.Operator)", span="386-386"];
m1_237 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithGreaterThanOrEquals()", file="JPathParseTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithGreaterThanOrEquals()", span="382-382"];
m1_25 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleQuotedProperty()", file="JPathParseTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleQuotedProperty()", span="82-82"];
m1_26 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleQuotedProperty()", file="JPathParseTests.cs", label="JPath path = new JPath(''['Blah']'')", span="84-84"];
m1_27 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleQuotedProperty()", file="JPathParseTests.cs", label="Assert.AreEqual(1, path.Filters.Count)", span="85-85"];
m1_28 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleQuotedProperty()", file="JPathParseTests.cs", label="Assert.AreEqual(''Blah'', ((FieldFilter)path.Filters[0]).Name)", span="86-86"];
m1_29 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleQuotedProperty()", file="JPathParseTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleQuotedProperty()", span="82-82"];
m1_20 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleProperty()", file="JPathParseTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleProperty()", span="74-74"];
m1_21 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleProperty()", file="JPathParseTests.cs", label="JPath path = new JPath(''Blah'')", span="76-76"];
m1_22 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleProperty()", file="JPathParseTests.cs", label="Assert.AreEqual(1, path.Filters.Count)", span="77-77"];
m1_23 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleProperty()", file="JPathParseTests.cs", label="Assert.AreEqual(''Blah'', ((FieldFilter)path.Filters[0]).Name)", span="78-78"];
m1_24 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleProperty()", file="JPathParseTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleProperty()", span="74-74"];
m1_463 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.AdjacentIndexers()", file="JPathParseTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.AdjacentIndexers()", span="680-680"];
m1_464 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.AdjacentIndexers()", file="JPathParseTests.cs", label="JPath path = new JPath(''[1][0][0]['' + int.MaxValue + '']'')", span="682-682"];
m1_465 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.AdjacentIndexers()", file="JPathParseTests.cs", label="Assert.AreEqual(4, path.Filters.Count)", span="683-683"];
m1_466 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.AdjacentIndexers()", file="JPathParseTests.cs", label="Assert.AreEqual(1, ((ArrayIndexFilter)path.Filters[0]).Index)", span="684-684"];
m1_467 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.AdjacentIndexers()", file="JPathParseTests.cs", label="Assert.AreEqual(0, ((ArrayIndexFilter)path.Filters[1]).Index)", span="685-685"];
m1_468 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.AdjacentIndexers()", file="JPathParseTests.cs", label="Assert.AreEqual(0, ((ArrayIndexFilter)path.Filters[2]).Index)", span="686-686"];
m1_469 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.AdjacentIndexers()", file="JPathParseTests.cs", label="Assert.AreEqual(int.MaxValue, ((ArrayIndexFilter)path.Filters[3]).Index)", span="687-687"];
m1_470 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.AdjacentIndexers()", file="JPathParseTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.AdjacentIndexers()", span="680-680"];
m1_40 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleQuotedPropertyWithBrackets()", file="JPathParseTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleQuotedPropertyWithBrackets()", span="106-106"];
m1_41 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleQuotedPropertyWithBrackets()", file="JPathParseTests.cs", label="JPath path = new JPath(''['[*]']'')", span="108-108"];
m1_42 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleQuotedPropertyWithBrackets()", file="JPathParseTests.cs", label="Assert.AreEqual(1, path.Filters.Count)", span="109-109"];
m1_43 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleQuotedPropertyWithBrackets()", file="JPathParseTests.cs", label="Assert.AreEqual(''[*]'', ((FieldFilter)path.Filters[0]).Name)", span="110-110"];
m1_44 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleQuotedPropertyWithBrackets()", file="JPathParseTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleQuotedPropertyWithBrackets()", span="106-106"];
m1_124 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.TwoProperties()", file="JPathParseTests.cs", label="Assert.AreEqual(''Two'', ((FieldFilter)path.Filters[1]).Name)", span="226-226"];
m1_125 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.TwoProperties()", file="JPathParseTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.TwoProperties()", span="221-221"];
m1_344 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithFloatExp()", file="JPathParseTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithFloatExp()", span="519-519"];
m1_345 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithFloatExp()", file="JPathParseTests.cs", label="JPath path = new JPath(''[?(@.name>=5.56789e+0)]'')", span="521-521"];
m1_346 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithFloatExp()", file="JPathParseTests.cs", label="BooleanQueryExpression expressions = (BooleanQueryExpression)((QueryFilter)path.Filters[0]).Expression", span="522-522"];
m1_347 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithFloatExp()", file="JPathParseTests.cs", label="Assert.AreEqual(5.56789e+0, (double)(JToken)expressions.Right)", span="523-523"];
m1_348 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithFloatExp()", file="JPathParseTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithFloatExp()", span="519-519"];
m1_474 [cluster="lambda expression", file="JPathParseTests.cs", label="Entry lambda expression", span="693-693"];
m1_59 [cluster="lambda expression", file="JPathParseTests.cs", label="Entry lambda expression", span="132-132"];
m1_60 [cluster="lambda expression", file="JPathParseTests.cs", label="new JPath(''$ .Blah'')", span="132-132"];
m1_61 [cluster="lambda expression", file="JPathParseTests.cs", label="Exit lambda expression", span="132-132"];
m1_65 [cluster="lambda expression", file="JPathParseTests.cs", label="Entry lambda expression", span="138-138"];
m1_66 [cluster="lambda expression", file="JPathParseTests.cs", label="new JPath(''$.Blah.'')", span="138-138"];
m1_67 [cluster="lambda expression", file="JPathParseTests.cs", label="Exit lambda expression", span="138-138"];
m1_71 [cluster="lambda expression", file="JPathParseTests.cs", label="Entry lambda expression", span="144-144"];
m1_72 [cluster="lambda expression", file="JPathParseTests.cs", label="new JPath(''$. Blah'')", span="144-144"];
m1_73 [cluster="lambda expression", file="JPathParseTests.cs", label="Exit lambda expression", span="144-144"];
m1_175 [cluster="lambda expression", file="JPathParseTests.cs", label="Entry lambda expression", span="296-296"];
m1_176 [cluster="lambda expression", file="JPathParseTests.cs", label="new JPath(@''Blah[ ?( @.name=='h\i' ) ]'')", span="296-296"];
m1_177 [cluster="lambda expression", file="JPathParseTests.cs", label="Exit lambda expression", span="296-296"];
m1_299 [cluster="lambda expression", file="JPathParseTests.cs", label="Entry lambda expression", span="473-473"];
m1_300 [cluster="lambda expression", file="JPathParseTests.cs", label="new JPath(''[?(@.name||)]'')", span="473-473"];
m1_301 [cluster="lambda expression", file="JPathParseTests.cs", label="Exit lambda expression", span="473-473"];
m1_305 [cluster="lambda expression", file="JPathParseTests.cs", label="Entry lambda expression", span="479-479"];
m1_306 [cluster="lambda expression", file="JPathParseTests.cs", label="new JPath(''[?(@.name|)]'')", span="479-479"];
m1_307 [cluster="lambda expression", file="JPathParseTests.cs", label="Exit lambda expression", span="479-479"];
m1_311 [cluster="lambda expression", file="JPathParseTests.cs", label="Entry lambda expression", span="485-485"];
m1_312 [cluster="lambda expression", file="JPathParseTests.cs", label="new JPath(''[?(@.name|'')", span="485-485"];
m1_313 [cluster="lambda expression", file="JPathParseTests.cs", label="Exit lambda expression", span="485-485"];
m1_317 [cluster="lambda expression", file="JPathParseTests.cs", label="Entry lambda expression", span="491-491"];
m1_318 [cluster="lambda expression", file="JPathParseTests.cs", label="new JPath(''[?(@.name||'')", span="491-491"];
m1_319 [cluster="lambda expression", file="JPathParseTests.cs", label="Exit lambda expression", span="491-491"];
m1_323 [cluster="lambda expression", file="JPathParseTests.cs", label="Entry lambda expression", span="497-497"];
m1_324 [cluster="lambda expression", file="JPathParseTests.cs", label="new JPath(''[?(@.name||s'')", span="497-497"];
m1_325 [cluster="lambda expression", file="JPathParseTests.cs", label="Exit lambda expression", span="497-497"];
m1_329 [cluster="lambda expression", file="JPathParseTests.cs", label="Entry lambda expression", span="503-503"];
m1_330 [cluster="lambda expression", file="JPathParseTests.cs", label="new JPath(''[?(@.name||@'')", span="503-503"];
m1_331 [cluster="lambda expression", file="JPathParseTests.cs", label="Exit lambda expression", span="503-503"];
m1_335 [cluster="lambda expression", file="JPathParseTests.cs", label="Entry lambda expression", span="509-509"];
m1_336 [cluster="lambda expression", file="JPathParseTests.cs", label="new JPath(''[?(@.name||@.'')", span="509-509"];
m1_337 [cluster="lambda expression", file="JPathParseTests.cs", label="Exit lambda expression", span="509-509"];
m1_341 [cluster="lambda expression", file="JPathParseTests.cs", label="Entry lambda expression", span="515-515"];
m1_342 [cluster="lambda expression", file="JPathParseTests.cs", label="new JPath(''[?(@.name||@.)]'')", span="515-515"];
m1_343 [cluster="lambda expression", file="JPathParseTests.cs", label="Exit lambda expression", span="515-515"];
m1_362 [cluster="lambda expression", file="JPathParseTests.cs", label="Entry lambda expression", span="542-542"];
m1_363 [cluster="lambda expression", file="JPathParseTests.cs", label="new JPath(''Blah[[0]].Two.Three[1].Four'')", span="542-542"];
m1_364 [cluster="lambda expression", file="JPathParseTests.cs", label="Exit lambda expression", span="542-542"];
m1_368 [cluster="lambda expression", file="JPathParseTests.cs", label="Entry lambda expression", span="548-548"];
m1_369 [cluster="lambda expression", file="JPathParseTests.cs", label="new JPath(''Blah[0'')", span="548-548"];
m1_370 [cluster="lambda expression", file="JPathParseTests.cs", label="Exit lambda expression", span="548-548"];
m1_454 [cluster="lambda expression", file="JPathParseTests.cs", label="Entry lambda expression", span="670-670"];
m1_455 [cluster="lambda expression", file="JPathParseTests.cs", label="new JPath(''[]'')", span="670-670"];
m1_456 [cluster="lambda expression", file="JPathParseTests.cs", label="Exit lambda expression", span="670-670"];
m1_460 [cluster="lambda expression", file="JPathParseTests.cs", label="Entry lambda expression", span="676-676"];
m1_461 [cluster="lambda expression", file="JPathParseTests.cs", label="new JPath('']'')", span="676-676"];
m1_462 [cluster="lambda expression", file="JPathParseTests.cs", label="Exit lambda expression", span="676-676"];
m1_475 [cluster="lambda expression", file="JPathParseTests.cs", label="new JPath(''[1]Blah'')", span="693-693"];
m1_476 [cluster="lambda expression", file="JPathParseTests.cs", label="Exit lambda expression", span="693-693"];
m1_287 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithRoot()", file="JPathParseTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithRoot()", span="460-460"];
m1_288 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithRoot()", file="JPathParseTests.cs", label="JPath path = new JPath(''[?($.name>=12.1)]'')", span="462-462"];
m1_289 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithRoot()", file="JPathParseTests.cs", label="BooleanQueryExpression expressions = (BooleanQueryExpression)((QueryFilter)path.Filters[0]).Expression", span="463-463"];
m1_290 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithRoot()", file="JPathParseTests.cs", label="List<PathFilter> paths = (List<PathFilter>)expressions.Left", span="464-464"];
m1_291 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithRoot()", file="JPathParseTests.cs", label="Assert.AreEqual(2, paths.Count)", span="465-465"];
m1_292 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithRoot()", file="JPathParseTests.cs", label="Assert.IsInstanceOf(typeof(RootFilter), paths[0])", span="466-466"];
m1_293 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithRoot()", file="JPathParseTests.cs", label="Assert.IsInstanceOf(typeof(FieldFilter), paths[1])", span="467-467"];
m1_294 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithRoot()", file="JPathParseTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithRoot()", span="460-460"];
m1_314 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BaddOr4()", file="JPathParseTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BaddOr4()", span="489-489"];
m1_315 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BaddOr4()", file="JPathParseTests.cs", label="ExceptionAssert.Throws<JsonException>(() => new JPath(''[?(@.name||''), ''Path ended with open query.'')", span="491-491"];
m1_316 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BaddOr4()", file="JPathParseTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BaddOr4()", span="489-489"];
m1_395 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultipleQuotedIndexes()", file="JPathParseTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultipleQuotedIndexes()", span="588-588"];
m1_396 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultipleQuotedIndexes()", file="JPathParseTests.cs", label="JPath path = new JPath(''['111119990','3']'')", span="590-590"];
m1_397 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultipleQuotedIndexes()", file="JPathParseTests.cs", label="Assert.AreEqual(1, path.Filters.Count)", span="591-591"];
m1_398 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultipleQuotedIndexes()", file="JPathParseTests.cs", label="Assert.AreEqual(2, ((FieldMultipleFilter)path.Filters[0]).Names.Count)", span="592-592"];
m1_399 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultipleQuotedIndexes()", file="JPathParseTests.cs", label="Assert.AreEqual(''111119990'', ((FieldMultipleFilter)path.Filters[0]).Names[0])", span="593-593"];
m1_400 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultipleQuotedIndexes()", file="JPathParseTests.cs", label="Assert.AreEqual(''3'', ((FieldMultipleFilter)path.Filters[0]).Names[1])", span="594-594"];
m1_401 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultipleQuotedIndexes()", file="JPathParseTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultipleQuotedIndexes()", span="588-588"];
m1_164 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithDoubleEscape()", file="JPathParseTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithDoubleEscape()", span="283-283"];
m1_165 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithDoubleEscape()", file="JPathParseTests.cs", label="JPath path = new JPath(@''Blah[ ?( @.name=='h\\i' ) ]'')", span="285-285"];
m1_166 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithDoubleEscape()", file="JPathParseTests.cs", label="Assert.AreEqual(2, path.Filters.Count)", span="286-286"];
m1_167 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithDoubleEscape()", file="JPathParseTests.cs", label="Assert.AreEqual(''Blah'', ((FieldFilter)path.Filters[0]).Name)", span="287-287"];
m1_168 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithDoubleEscape()", file="JPathParseTests.cs", label="BooleanQueryExpression expressions = (BooleanQueryExpression)((QueryFilter)path.Filters[1]).Expression", span="288-288"];
m1_169 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithDoubleEscape()", file="JPathParseTests.cs", label="Assert.AreEqual(QueryOperator.Equals, expressions.Operator)", span="289-289"];
m1_170 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithDoubleEscape()", file="JPathParseTests.cs", label="Assert.AreEqual(''h\\i'', (string)(JToken)expressions.Right)", span="290-290"];
m1_171 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithDoubleEscape()", file="JPathParseTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithDoubleEscape()", span="283-283"];
m1_430 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexEmptyStop()", file="JPathParseTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexEmptyStop()", span="638-638"];
m1_431 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexEmptyStop()", file="JPathParseTests.cs", label="JPath path = new JPath(''[  -3  :  ]'')", span="640-640"];
m1_432 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexEmptyStop()", file="JPathParseTests.cs", label="Assert.AreEqual(1, path.Filters.Count)", span="641-641"];
m1_433 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexEmptyStop()", file="JPathParseTests.cs", label="Assert.AreEqual(-3, ((ArraySliceFilter)path.Filters[0]).Start)", span="642-642"];
m1_434 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexEmptyStop()", file="JPathParseTests.cs", label="Assert.AreEqual(null, ((ArraySliceFilter)path.Filters[0]).End)", span="643-643"];
m1_435 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexEmptyStop()", file="JPathParseTests.cs", label="Assert.AreEqual(null, ((ArraySliceFilter)path.Filters[0]).Step)", span="644-644"];
m1_436 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexEmptyStop()", file="JPathParseTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexEmptyStop()", span="638-638"];
m1_437 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexEmptyStart()", file="JPathParseTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexEmptyStart()", span="648-648"];
m1_438 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexEmptyStart()", file="JPathParseTests.cs", label="JPath path = new JPath(''[ : 1 : ]'')", span="650-650"];
m1_439 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexEmptyStart()", file="JPathParseTests.cs", label="Assert.AreEqual(1, path.Filters.Count)", span="651-651"];
m1_440 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexEmptyStart()", file="JPathParseTests.cs", label="Assert.AreEqual(null, ((ArraySliceFilter)path.Filters[0]).Start)", span="652-652"];
m1_441 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexEmptyStart()", file="JPathParseTests.cs", label="Assert.AreEqual(1, ((ArraySliceFilter)path.Filters[0]).End)", span="653-653"];
m1_442 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexEmptyStart()", file="JPathParseTests.cs", label="Assert.AreEqual(null, ((ArraySliceFilter)path.Filters[0]).Step)", span="654-654"];
m1_443 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexEmptyStart()", file="JPathParseTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexEmptyStart()", span="648-648"];
m1_349 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultiplePropertiesAndIndexers()", file="JPathParseTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultiplePropertiesAndIndexers()", span="527-527"];
m1_350 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultiplePropertiesAndIndexers()", file="JPathParseTests.cs", label="JPath path = new JPath(''Blah[0]..Two.Three[1].Four'')", span="529-529"];
m1_351 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultiplePropertiesAndIndexers()", file="JPathParseTests.cs", label="Assert.AreEqual(6, path.Filters.Count)", span="530-530"];
m1_352 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultiplePropertiesAndIndexers()", file="JPathParseTests.cs", label="Assert.AreEqual(''Blah'', ((FieldFilter)path.Filters[0]).Name)", span="531-531"];
m1_353 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultiplePropertiesAndIndexers()", file="JPathParseTests.cs", label="Assert.AreEqual(0, ((ArrayIndexFilter)path.Filters[1]).Index)", span="532-532"];
m1_354 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultiplePropertiesAndIndexers()", file="JPathParseTests.cs", label="Assert.AreEqual(''Two'', ((ScanFilter)path.Filters[2]).Name)", span="533-533"];
m1_355 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultiplePropertiesAndIndexers()", file="JPathParseTests.cs", label="Assert.AreEqual(''Three'', ((FieldFilter)path.Filters[3]).Name)", span="534-534"];
m1_356 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultiplePropertiesAndIndexers()", file="JPathParseTests.cs", label="Assert.AreEqual(1, ((ArrayIndexFilter)path.Filters[4]).Index)", span="535-535"];
m1_357 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultiplePropertiesAndIndexers()", file="JPathParseTests.cs", label="Assert.AreEqual(''Four'', ((FieldFilter)path.Filters[5]).Name)", span="536-536"];
m1_358 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultiplePropertiesAndIndexers()", file="JPathParseTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultiplePropertiesAndIndexers()", span="527-527"];
m1_58 [cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", file="JPathParseTests.cs", label="Entry Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", span="367-367"];
m1_243 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithNegativeInteger()", file="JPathParseTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithNegativeInteger()", span="398-398"];
m1_244 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithNegativeInteger()", file="JPathParseTests.cs", label="JPath path = new JPath(''[?(@.name>=-12)]'')", span="400-400"];
m1_245 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithNegativeInteger()", file="JPathParseTests.cs", label="BooleanQueryExpression expressions = (BooleanQueryExpression)((QueryFilter)path.Filters[0]).Expression", span="401-401"];
m1_246 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithNegativeInteger()", file="JPathParseTests.cs", label="Assert.AreEqual(-12, (int)(JToken)expressions.Right)", span="402-402"];
m1_247 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithNegativeInteger()", file="JPathParseTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithNegativeInteger()", span="398-398"];
m1_100 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.QuotedWildcardPropertyWithRoot()", file="JPathParseTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.QuotedWildcardPropertyWithRoot()", span="189-189"];
m1_101 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.QuotedWildcardPropertyWithRoot()", file="JPathParseTests.cs", label="JPath path = new JPath(''$.['*']'')", span="191-191"];
m1_102 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.QuotedWildcardPropertyWithRoot()", file="JPathParseTests.cs", label="Assert.AreEqual(1, path.Filters.Count)", span="192-192"];
m1_103 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.QuotedWildcardPropertyWithRoot()", file="JPathParseTests.cs", label="Assert.AreEqual(''*'', ((FieldFilter)path.Filters[0]).Name)", span="193-193"];
m1_104 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.QuotedWildcardPropertyWithRoot()", file="JPathParseTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.QuotedWildcardPropertyWithRoot()", span="189-189"];
m1_186 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithTrue()", file="JPathParseTests.cs", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithTrue()", span="311-311"];
m1_187 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithTrue()", file="JPathParseTests.cs", label="JPath path = new JPath(''Blah[ ?( @.name==true ) ]'')", span="313-313"];
m1_188 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithTrue()", file="JPathParseTests.cs", label="Assert.AreEqual(2, path.Filters.Count)", span="314-314"];
m1_189 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithTrue()", file="JPathParseTests.cs", label="Assert.AreEqual(''Blah'', ((FieldFilter)path.Filters[0]).Name)", span="315-315"];
m1_190 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithTrue()", file="JPathParseTests.cs", label="BooleanQueryExpression expressions = (BooleanQueryExpression)((QueryFilter)path.Filters[1]).Expression", span="316-316"];
m1_191 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithTrue()", file="JPathParseTests.cs", label="Assert.AreEqual(QueryOperator.Equals, expressions.Operator)", span="317-317"];
m1_192 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithTrue()", file="JPathParseTests.cs", label="Assert.AreEqual(true, (bool)(JToken)expressions.Right)", span="318-318"];
m1_193 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithTrue()", file="JPathParseTests.cs", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithTrue()", span="311-311"];
m2_201 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaWithNegativeEnum()", file="JsonSchemaGeneratorTests.cs", label="Entry Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaWithNegativeEnum()", span="598-598"];
m2_202 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaWithNegativeEnum()", file="JsonSchemaGeneratorTests.cs", label="JsonSchemaGenerator jsonSchemaGenerator = new JsonSchemaGenerator()", span="600-600"];
m2_203 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaWithNegativeEnum()", file="JsonSchemaGeneratorTests.cs", label="JsonSchema schema = jsonSchemaGenerator.Generate(typeof(X))", span="601-601"];
m2_204 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaWithNegativeEnum()", file="JsonSchemaGeneratorTests.cs", label="string json = schema.ToString()", span="603-603"];
m2_205 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaWithNegativeEnum()", file="JsonSchemaGeneratorTests.cs", label="StringAssert.AreEqual(@''{\r\n  ''''type'''': ''''object'''',\r\n  ''''properties'''': {\r\n    ''''x'''': {\r\n      ''''required'''': true,\r\n      ''''type'''': ''''integer'''',\r\n      ''''enum'''': [\r\n        0,\r\n        1,\r\n        -1\r\n      ]\r\n    }\r\n  }\r\n}'', json)", span="605-618"];
m2_206 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaWithNegativeEnum()", file="JsonSchemaGeneratorTests.cs", label="Exit Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaWithNegativeEnum()", span="598-598"];
m2_124 [cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateContract(System.Type)", file="JsonSchemaGeneratorTests.cs", label="Entry Newtonsoft.Json.Serialization.DefaultContractResolver.CreateContract(System.Type)", span="1121-1121"];
m2_47 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_Store()", file="JsonSchemaGeneratorTests.cs", label="Entry Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_Store()", span="231-231"];
m2_48 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_Store()", file="JsonSchemaGeneratorTests.cs", label="JsonSchemaGenerator generator = new JsonSchemaGenerator()", span="233-233"];
m2_49 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_Store()", file="JsonSchemaGeneratorTests.cs", label="JsonSchema schema = generator.Generate(typeof(Store))", span="234-234"];
m2_50 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_Store()", file="JsonSchemaGeneratorTests.cs", label="Assert.AreEqual(11, schema.Properties.Count)", span="236-236"];
m2_51 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_Store()", file="JsonSchemaGeneratorTests.cs", label="JsonSchema productArraySchema = schema.Properties[''product'']", span="238-238"];
m2_52 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_Store()", file="JsonSchemaGeneratorTests.cs", label="JsonSchema productSchema = productArraySchema.Items[0]", span="239-239"];
m2_53 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_Store()", file="JsonSchemaGeneratorTests.cs", label="Assert.AreEqual(4, productSchema.Properties.Count)", span="241-241"];
m2_54 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_Store()", file="JsonSchemaGeneratorTests.cs", label="Exit Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_Store()", span="231-231"];
m2_158 [cluster="Newtonsoft.Json.Converters.IsoDateTimeConverter.IsoDateTimeConverter()", file="JsonSchemaGeneratorTests.cs", label="Entry Newtonsoft.Json.Converters.IsoDateTimeConverter.IsoDateTimeConverter()", span="34-34"];
m2_125 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CustomDirectoryInfoMapper.CreateProperties(System.Type, Newtonsoft.Json.MemberSerialization)", file="JsonSchemaGeneratorTests.cs", label="Entry Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CustomDirectoryInfoMapper.CreateProperties(System.Type, Newtonsoft.Json.MemberSerialization)", span="359-359"];
m2_126 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CustomDirectoryInfoMapper.CreateProperties(System.Type, Newtonsoft.Json.MemberSerialization)", file="JsonSchemaGeneratorTests.cs", label="IList<JsonProperty> properties = base.CreateProperties(type, memberSerialization)", span="361-361"];
m2_127 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CustomDirectoryInfoMapper.CreateProperties(System.Type, Newtonsoft.Json.MemberSerialization)", file="JsonSchemaGeneratorTests.cs", label="JsonPropertyCollection c = new JsonPropertyCollection(type)", span="363-363"];
m2_128 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CustomDirectoryInfoMapper.CreateProperties(System.Type, Newtonsoft.Json.MemberSerialization)", file="JsonSchemaGeneratorTests.cs", label="c.AddRange(properties.Where(m => m.PropertyName != ''Root''))", span="364-364"];
m2_129 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CustomDirectoryInfoMapper.CreateProperties(System.Type, Newtonsoft.Json.MemberSerialization)", file="JsonSchemaGeneratorTests.cs", label="return c;", span="366-366"];
m2_130 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CustomDirectoryInfoMapper.CreateProperties(System.Type, Newtonsoft.Json.MemberSerialization)", file="JsonSchemaGeneratorTests.cs", label="Exit Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CustomDirectoryInfoMapper.CreateProperties(System.Type, Newtonsoft.Json.MemberSerialization)", span="359-359"];
m2_74 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularReferenceWithTypeNameId()", file="JsonSchemaGeneratorTests.cs", label="Entry Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularReferenceWithTypeNameId()", span="272-272"];
m2_75 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularReferenceWithTypeNameId()", file="JsonSchemaGeneratorTests.cs", label="JsonSchemaGenerator generator = new JsonSchemaGenerator()", span="274-274"];
m2_76 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularReferenceWithTypeNameId()", file="JsonSchemaGeneratorTests.cs", label="generator.UndefinedSchemaIdHandling = UndefinedSchemaIdHandling.UseTypeName", span="275-275"];
m2_77 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularReferenceWithTypeNameId()", file="JsonSchemaGeneratorTests.cs", label="JsonSchema schema = generator.Generate(typeof(CircularReferenceClass), true)", span="277-277"];
m2_78 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularReferenceWithTypeNameId()", file="JsonSchemaGeneratorTests.cs", label="Assert.AreEqual(JsonSchemaType.String, schema.Properties[''Name''].Type)", span="279-279"];
m2_79 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularReferenceWithTypeNameId()", file="JsonSchemaGeneratorTests.cs", label="Assert.AreEqual(typeof(CircularReferenceClass).FullName, schema.Id)", span="280-280"];
m2_80 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularReferenceWithTypeNameId()", file="JsonSchemaGeneratorTests.cs", label="Assert.AreEqual(JsonSchemaType.Object | JsonSchemaType.Null, schema.Properties[''Child''].Type)", span="281-281"];
m2_81 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularReferenceWithTypeNameId()", file="JsonSchemaGeneratorTests.cs", label="Assert.AreEqual(schema, schema.Properties[''Child''])", span="282-282"];
m2_82 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularReferenceWithTypeNameId()", file="JsonSchemaGeneratorTests.cs", label="Exit Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularReferenceWithTypeNameId()", span="272-272"];
m2_12 [cluster="Newtonsoft.Json.Schema.JsonSchema.ToString()", file="JsonSchemaGeneratorTests.cs", label="Entry Newtonsoft.Json.Schema.JsonSchema.ToString()", span="344-344"];
m2_110 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForDBNull()", file="JsonSchemaGeneratorTests.cs", label="Entry Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForDBNull()", span="331-331"];
m2_111 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForDBNull()", file="JsonSchemaGeneratorTests.cs", label="JsonSchemaGenerator generator = new JsonSchemaGenerator()", span="333-333"];
m2_112 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForDBNull()", file="JsonSchemaGeneratorTests.cs", label="generator.UndefinedSchemaIdHandling = UndefinedSchemaIdHandling.UseTypeName", span="334-334"];
m2_113 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForDBNull()", file="JsonSchemaGeneratorTests.cs", label="JsonSchema schema = generator.Generate(typeof(DBNull))", span="336-336"];
m2_114 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForDBNull()", file="JsonSchemaGeneratorTests.cs", label="Assert.AreEqual(JsonSchemaType.Null, schema.Type)", span="338-338"];
m2_115 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForDBNull()", file="JsonSchemaGeneratorTests.cs", label="Exit Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForDBNull()", span="331-331"];
m2_196 [cluster="Newtonsoft.Json.Linq.JToken.ToString()", file="JsonSchemaGeneratorTests.cs", label="Entry Newtonsoft.Json.Linq.JToken.ToString()", span="422-422"];
m2_134 [cluster="Unk.AddRange", file="JsonSchemaGeneratorTests.cs", label="Entry Unk.AddRange", span=""];
m2_83 [cluster="Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type, bool)", file="JsonSchemaGeneratorTests.cs", label="Entry Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type, bool)", span="152-152"];
m2_20 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_DefaultValueAttributeTestClass()", file="JsonSchemaGeneratorTests.cs", label="Entry Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_DefaultValueAttributeTestClass()", span="97-97"];
m2_21 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_DefaultValueAttributeTestClass()", file="JsonSchemaGeneratorTests.cs", label="JsonSchemaGenerator generator = new JsonSchemaGenerator()", span="99-99"];
m2_22 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_DefaultValueAttributeTestClass()", file="JsonSchemaGeneratorTests.cs", label="JsonSchema schema = generator.Generate(typeof(DefaultValueAttributeTestClass))", span="100-100"];
m2_23 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_DefaultValueAttributeTestClass()", file="JsonSchemaGeneratorTests.cs", label="string json = schema.ToString()", span="102-102"];
m2_24 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_DefaultValueAttributeTestClass()", file="JsonSchemaGeneratorTests.cs", label="StringAssert.AreEqual(@''{\r\n  ''''description'''': ''''DefaultValueAttributeTestClass description!'''',\r\n  ''''type'''': ''''object'''',\r\n  ''''additionalProperties'''': false,\r\n  ''''properties'''': {\r\n    ''''TestField1'''': {\r\n      ''''required'''': true,\r\n      ''''type'''': ''''integer'''',\r\n      ''''default'''': 21\r\n    },\r\n    ''''TestProperty1'''': {\r\n      ''''required'''': true,\r\n      ''''type'''': [\r\n        ''''string'''',\r\n        ''''null''''\r\n      ],\r\n      ''''default'''': ''''TestProperty1Value''''\r\n    }\r\n  }\r\n}'', json)", span="104-123"];
m2_25 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_DefaultValueAttributeTestClass()", file="JsonSchemaGeneratorTests.cs", label="Exit Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_DefaultValueAttributeTestClass()", span="97-97"];
m2_222 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.JsonPropertyWithHandlingValues()", file="JsonSchemaGeneratorTests.cs", label="Entry Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.JsonPropertyWithHandlingValues()", span="662-662"];
m2_223 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.JsonPropertyWithHandlingValues()", file="JsonSchemaGeneratorTests.cs", label="JsonSchemaGenerator jsonSchemaGenerator = new JsonSchemaGenerator()", span="664-664"];
m2_224 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.JsonPropertyWithHandlingValues()", file="JsonSchemaGeneratorTests.cs", label="jsonSchemaGenerator.UndefinedSchemaIdHandling = UndefinedSchemaIdHandling.UseTypeName", span="666-666"];
m2_225 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.JsonPropertyWithHandlingValues()", file="JsonSchemaGeneratorTests.cs", label="JsonSchema jsonSchema = jsonSchemaGenerator.Generate(typeof(JsonPropertyWithHandlingValues))", span="667-667"];
m2_226 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.JsonPropertyWithHandlingValues()", file="JsonSchemaGeneratorTests.cs", label="string json = jsonSchema.ToString()", span="668-668"];
m2_227 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.JsonPropertyWithHandlingValues()", file="JsonSchemaGeneratorTests.cs", label="StringAssert.AreEqual(@''{\r\n  ''''id'''': ''''Newtonsoft.Json.Tests.TestObjects.JsonPropertyWithHandlingValues'''',\r\n  ''''required'''': true,\r\n  ''''type'''': [\r\n    ''''object'''',\r\n    ''''null''''\r\n  ],\r\n  ''''properties'''': {\r\n    ''''DefaultValueHandlingIgnoreProperty'''': {\r\n      ''''type'''': [\r\n        ''''string'''',\r\n        ''''null''''\r\n      ],\r\n      ''''default'''': ''''Default!''''\r\n    },\r\n    ''''DefaultValueHandlingIncludeProperty'''': {\r\n      ''''required'''': true,\r\n      ''''type'''': [\r\n        ''''string'''',\r\n        ''''null''''\r\n      ],\r\n      ''''default'''': ''''Default!''''\r\n    },\r\n    ''''DefaultValueHandlingPopulateProperty'''': {\r\n      ''''required'''': true,\r\n      ''''type'''': [\r\n        ''''string'''',\r\n        ''''null''''\r\n      ],\r\n      ''''default'''': ''''Default!''''\r\n    },\r\n    ''''DefaultValueHandlingIgnoreAndPopulateProperty'''': {\r\n      ''''type'''': [\r\n        ''''string'''',\r\n        ''''null''''\r\n      ],\r\n      ''''default'''': ''''Default!''''\r\n    },\r\n    ''''NullValueHandlingIgnoreProperty'''': {\r\n      ''''type'''': [\r\n        ''''string'''',\r\n        ''''null''''\r\n      ]\r\n    },\r\n    ''''NullValueHandlingIncludeProperty'''': {\r\n      ''''required'''': true,\r\n      ''''type'''': [\r\n        ''''string'''',\r\n        ''''null''''\r\n      ]\r\n    },\r\n    ''''ReferenceLoopHandlingErrorProperty'''': {\r\n      ''''$ref'''': ''''Newtonsoft.Json.Tests.TestObjects.JsonPropertyWithHandlingValues''''\r\n    },\r\n    ''''ReferenceLoopHandlingIgnoreProperty'''': {\r\n      ''''$ref'''': ''''Newtonsoft.Json.Tests.TestObjects.JsonPropertyWithHandlingValues''''\r\n    },\r\n    ''''ReferenceLoopHandlingSerializeProperty'''': {\r\n      ''''$ref'''': ''''Newtonsoft.Json.Tests.TestObjects.JsonPropertyWithHandlingValues''''\r\n    }\r\n  }\r\n}'', json)", span="670-731"];
m2_228 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.JsonPropertyWithHandlingValues()", file="JsonSchemaGeneratorTests.cs", label="Exit Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.JsonPropertyWithHandlingValues()", span="662-662"];
m2_160 [cluster="Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter, object)", file="JsonSchemaGeneratorTests.cs", label="Entry Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter, object)", span="1042-1042"];
m2_166 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaCamelCase()", file="JsonSchemaGeneratorTests.cs", label="Entry Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaCamelCase()", span="475-475"];
m2_167 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaCamelCase()", file="JsonSchemaGeneratorTests.cs", label="JsonSchemaGenerator generator = new JsonSchemaGenerator()", span="477-477"];
m2_168 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaCamelCase()", file="JsonSchemaGeneratorTests.cs", label="generator.UndefinedSchemaIdHandling = UndefinedSchemaIdHandling.UseTypeName", span="478-478"];
m2_169 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaCamelCase()", file="JsonSchemaGeneratorTests.cs", label="generator.ContractResolver = new CamelCasePropertyNamesContractResolver()\r\n            {\r\n#if !(PORTABLE || DNXCORE50 || PORTABLE40) || NETSTANDARD1_3\r\n                IgnoreSerializableAttribute = true\r\n#endif\r\n            }", span="479-484"];
m2_170 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaCamelCase()", file="JsonSchemaGeneratorTests.cs", label="JsonSchema schema = generator.Generate(typeof(Version), true)", span="486-486"];
m2_171 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaCamelCase()", file="JsonSchemaGeneratorTests.cs", label="string json = schema.ToString()", span="488-488"];
m2_172 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaCamelCase()", file="JsonSchemaGeneratorTests.cs", label="StringAssert.AreEqual(@''{\r\n  ''''id'''': ''''System.Version'''',\r\n  ''''type'''': [\r\n    ''''object'''',\r\n    ''''null''''\r\n  ],\r\n  ''''additionalProperties'''': false,\r\n  ''''properties'''': {\r\n    ''''major'''': {\r\n      ''''required'''': true,\r\n      ''''type'''': ''''integer''''\r\n    },\r\n    ''''minor'''': {\r\n      ''''required'''': true,\r\n      ''''type'''': ''''integer''''\r\n    },\r\n    ''''build'''': {\r\n      ''''required'''': true,\r\n      ''''type'''': ''''integer''''\r\n    },\r\n    ''''revision'''': {\r\n      ''''required'''': true,\r\n      ''''type'''': ''''integer''''\r\n    },\r\n    ''''majorRevision'''': {\r\n      ''''required'''': true,\r\n      ''''type'''': ''''integer''''\r\n    },\r\n    ''''minorRevision'''': {\r\n      ''''required'''': true,\r\n      ''''type'''': ''''integer''''\r\n    }\r\n  }\r\n}'', json)", span="490-523"];
m2_173 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaCamelCase()", file="JsonSchemaGeneratorTests.cs", label="Exit Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaCamelCase()", span="475-475"];
m2_19 [cluster="Unk.IsTrue", file="JsonSchemaGeneratorTests.cs", label="Entry Unk.IsTrue", span=""];
m2_197 [cluster="Newtonsoft.Json.Linq.JToken.ToObject<T>(Newtonsoft.Json.JsonSerializer)", file="JsonSchemaGeneratorTests.cs", label="Entry Newtonsoft.Json.Linq.JToken.ToObject<T>(Newtonsoft.Json.JsonSerializer)", span="2066-2066"];
m2_157 [cluster="Newtonsoft.Json.JsonSerializer.JsonSerializer()", file="JsonSchemaGeneratorTests.cs", label="Entry Newtonsoft.Json.JsonSerializer.JsonSerializer()", span="530-530"];
m2_17 [cluster="Newtonsoft.Json.Linq.JObject.Parse(string)", file="JsonSchemaGeneratorTests.cs", label="Entry Newtonsoft.Json.Linq.JObject.Parse(string)", span="404-404"];
m2_175 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaSerializable()", file="JsonSchemaGeneratorTests.cs", label="Entry Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaSerializable()", span="528-528"];
m2_176 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaSerializable()", file="JsonSchemaGeneratorTests.cs", label="JsonSchemaGenerator generator = new JsonSchemaGenerator()", span="530-530"];
m2_177 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaSerializable()", file="JsonSchemaGeneratorTests.cs", label="DefaultContractResolver contractResolver = new DefaultContractResolver\r\n            {\r\n                IgnoreSerializableAttribute = false\r\n            }", span="532-535"];
m2_178 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaSerializable()", file="JsonSchemaGeneratorTests.cs", label="generator.ContractResolver = contractResolver", span="537-537"];
m2_179 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaSerializable()", file="JsonSchemaGeneratorTests.cs", label="generator.UndefinedSchemaIdHandling = UndefinedSchemaIdHandling.UseTypeName", span="538-538"];
m2_180 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaSerializable()", file="JsonSchemaGeneratorTests.cs", label="JsonSchema schema = generator.Generate(typeof(SerializableTestObject), true)", span="540-540"];
m2_185 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaSerializable()", file="JsonSchemaGeneratorTests.cs", label="serializer.ContractResolver = contractResolver", span="564-564"];
m2_181 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaSerializable()", file="JsonSchemaGeneratorTests.cs", label="string json = schema.ToString()", span="542-542"];
m2_188 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaSerializable()", file="JsonSchemaGeneratorTests.cs", label="jsonWriter.Token.Validate(schema, (sender, args) => errors.Add(args.Message))", span="572-572"];
m2_182 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaSerializable()", file="JsonSchemaGeneratorTests.cs", label="StringAssert.AreEqual(@''{\r\n  ''''id'''': ''''Newtonsoft.Json.Tests.Schema.SerializableTestObject'''',\r\n  ''''type'''': [\r\n    ''''object'''',\r\n    ''''null''''\r\n  ],\r\n  ''''additionalProperties'''': false,\r\n  ''''properties'''': {\r\n    ''''_name'''': {\r\n      ''''required'''': true,\r\n      ''''type'''': [\r\n        ''''string'''',\r\n        ''''null''''\r\n      ]\r\n    }\r\n  }\r\n}'', json)", span="544-560"];
m2_183 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaSerializable()", file="JsonSchemaGeneratorTests.cs", label="JTokenWriter jsonWriter = new JTokenWriter()", span="562-562"];
m2_184 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaSerializable()", file="JsonSchemaGeneratorTests.cs", label="JsonSerializer serializer = new JsonSerializer()", span="563-563"];
m2_186 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaSerializable()", file="JsonSchemaGeneratorTests.cs", label="serializer.Serialize(jsonWriter, new SerializableTestObject\r\n            {\r\n                Name = ''Name!''\r\n            })", span="565-568"];
m2_190 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaSerializable()", file="JsonSchemaGeneratorTests.cs", label="StringAssert.AreEqual(@''{\r\n  ''''_name'''': ''''Name!''''\r\n}'', jsonWriter.Token.ToString())", span="576-578"];
m2_191 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaSerializable()", file="JsonSchemaGeneratorTests.cs", label="SerializableTestObject c = jsonWriter.Token.ToObject<SerializableTestObject>(serializer)", span="580-580"];
m2_187 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaSerializable()", file="JsonSchemaGeneratorTests.cs", label="List<string> errors = new List<string>()", span="571-571"];
m2_189 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaSerializable()", file="JsonSchemaGeneratorTests.cs", label="Assert.AreEqual(0, errors.Count)", span="574-574"];
m2_192 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaSerializable()", file="JsonSchemaGeneratorTests.cs", label="Assert.AreEqual(''Name!'', c.Name)", span="581-581"];
m2_193 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaSerializable()", file="JsonSchemaGeneratorTests.cs", label="Exit Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaSerializable()", span="528-528"];
m2_101 [cluster="Newtonsoft.Json.Linq.JValue.JValue(string)", file="JsonSchemaGeneratorTests.cs", label="Entry Newtonsoft.Json.Linq.JValue.JValue(string)", span="154-154"];
m2_26 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_Person()", file="JsonSchemaGeneratorTests.cs", label="Entry Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_Person()", span="128-128"];
m2_27 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_Person()", file="JsonSchemaGeneratorTests.cs", label="JsonSchemaGenerator generator = new JsonSchemaGenerator()", span="130-130"];
m2_28 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_Person()", file="JsonSchemaGeneratorTests.cs", label="JsonSchema schema = generator.Generate(typeof(Person))", span="131-131"];
m2_29 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_Person()", file="JsonSchemaGeneratorTests.cs", label="string json = schema.ToString()", span="133-133"];
m2_30 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_Person()", file="JsonSchemaGeneratorTests.cs", label="StringAssert.AreEqual(@''{\r\n  ''''id'''': ''''Person'''',\r\n  ''''title'''': ''''Title!'''',\r\n  ''''description'''': ''''JsonObjectAttribute description!'''',\r\n  ''''type'''': ''''object'''',\r\n  ''''properties'''': {\r\n    ''''Name'''': {\r\n      ''''required'''': true,\r\n      ''''type'''': [\r\n        ''''string'''',\r\n        ''''null''''\r\n      ]\r\n    },\r\n    ''''BirthDate'''': {\r\n      ''''required'''': true,\r\n      ''''type'''': ''''string''''\r\n    },\r\n    ''''LastModified'''': {\r\n      ''''required'''': true,\r\n      ''''type'''': ''''string''''\r\n    }\r\n  }\r\n}'', json)", span="135-157"];
m2_31 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_Person()", file="JsonSchemaGeneratorTests.cs", label="Exit Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_Person()", span="128-128"];
m2_116 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CustomDirectoryInfoMapper.CustomDirectoryInfoMapper()", file="JsonSchemaGeneratorTests.cs", label="Entry Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CustomDirectoryInfoMapper.CustomDirectoryInfoMapper()", span="345-345"];
m2_117 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CustomDirectoryInfoMapper.CustomDirectoryInfoMapper()", file="JsonSchemaGeneratorTests.cs", label="Exit Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CustomDirectoryInfoMapper.CustomDirectoryInfoMapper()", span="345-345"];
m2_174 [cluster="Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver.CamelCasePropertyNamesContractResolver()", file="JsonSchemaGeneratorTests.cs", label="Entry Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver.CamelCasePropertyNamesContractResolver()", span="76-76"];
m2_229 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateForNullableInt32()", file="JsonSchemaGeneratorTests.cs", label="Entry Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateForNullableInt32()", span="735-735"];
m2_230 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateForNullableInt32()", file="JsonSchemaGeneratorTests.cs", label="JsonSchemaGenerator jsonSchemaGenerator = new JsonSchemaGenerator()", span="737-737"];
m2_231 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateForNullableInt32()", file="JsonSchemaGeneratorTests.cs", label="JsonSchema jsonSchema = jsonSchemaGenerator.Generate(typeof(NullableInt32TestClass))", span="739-739"];
m2_232 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateForNullableInt32()", file="JsonSchemaGeneratorTests.cs", label="string json = jsonSchema.ToString()", span="740-740"];
m2_233 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateForNullableInt32()", file="JsonSchemaGeneratorTests.cs", label="StringAssert.AreEqual(@''{\r\n  ''''type'''': ''''object'''',\r\n  ''''properties'''': {\r\n    ''''Value'''': {\r\n      ''''required'''': true,\r\n      ''''type'''': [\r\n        ''''integer'''',\r\n        ''''null''''\r\n      ]\r\n    }\r\n  }\r\n}'', json)", span="742-753"];
m2_234 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateForNullableInt32()", file="JsonSchemaGeneratorTests.cs", label="Exit Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateForNullableInt32()", span="735-735"];
m2_159 [cluster="System.Collections.ObjectModel.Collection<T>.Add(T)", file="JsonSchemaGeneratorTests.cs", label="Entry System.Collections.ObjectModel.Collection<T>.Add(T)", span="0-0"];
m2_165 [cluster="System.Collections.Generic.List<T>.Add(T)", file="JsonSchemaGeneratorTests.cs", label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0"];
m2_161 [cluster="Newtonsoft.Json.Linq.JToken.Validate(Newtonsoft.Json.Schema.JsonSchema, Newtonsoft.Json.Schema.ValidationEventHandler)", file="JsonSchemaGeneratorTests.cs", label="Entry Newtonsoft.Json.Linq.JToken.Validate(Newtonsoft.Json.Schema.JsonSchema, Newtonsoft.Json.Schema.ValidationEventHandler)", span="117-117"];
m2_14 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="JsonSchemaGeneratorTests.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m2_46 [cluster="Unk.AreEqual", file="JsonSchemaGeneratorTests.cs", label="Entry Unk.AreEqual", span=""];
m2_18 [cluster="Newtonsoft.Json.Linq.JToken.IsValid(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaGeneratorTests.cs", label="Entry Newtonsoft.Json.Linq.JToken.IsValid(Newtonsoft.Json.Schema.JsonSchema)", span="57-57"];
m2_194 [cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.DefaultContractResolver()", file="JsonSchemaGeneratorTests.cs", label="Entry Newtonsoft.Json.Serialization.DefaultContractResolver.DefaultContractResolver()", span="157-157"];
m2_16 [cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting)", file="JsonSchemaGeneratorTests.cs", label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting)", span="537-537"];
m2_195 [cluster="Newtonsoft.Json.Tests.Schema.SerializableTestObject.SerializableTestObject()", file="JsonSchemaGeneratorTests.cs", label="Entry Newtonsoft.Json.Tests.Schema.SerializableTestObject.SerializableTestObject()", span="841-841"];
m2_102 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForISerializable()", file="JsonSchemaGeneratorTests.cs", label="Entry Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForISerializable()", span="316-316"];
m2_103 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForISerializable()", file="JsonSchemaGeneratorTests.cs", label="JsonSchemaGenerator generator = new JsonSchemaGenerator()", span="318-318"];
m2_104 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForISerializable()", file="JsonSchemaGeneratorTests.cs", label="generator.UndefinedSchemaIdHandling = UndefinedSchemaIdHandling.UseTypeName", span="319-319"];
m2_105 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForISerializable()", file="JsonSchemaGeneratorTests.cs", label="JsonSchema schema = generator.Generate(typeof(ISerializableTestObject))", span="321-321"];
m2_106 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForISerializable()", file="JsonSchemaGeneratorTests.cs", label="Assert.AreEqual(JsonSchemaType.Object, schema.Type)", span="323-323"];
m2_107 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForISerializable()", file="JsonSchemaGeneratorTests.cs", label="Assert.AreEqual(true, schema.AllowAdditionalProperties)", span="324-324"];
m2_108 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForISerializable()", file="JsonSchemaGeneratorTests.cs", label="Assert.AreEqual(null, schema.Properties)", span="325-325"];
m2_109 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForISerializable()", file="JsonSchemaGeneratorTests.cs", label="Exit Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForISerializable()", span="316-316"];
m2_207 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularCollectionReferences()", file="JsonSchemaGeneratorTests.cs", label="Entry Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularCollectionReferences()", span="622-622"];
m2_208 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularCollectionReferences()", file="JsonSchemaGeneratorTests.cs", label="Type type = typeof(Workspace)", span="624-624"];
m2_209 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularCollectionReferences()", file="JsonSchemaGeneratorTests.cs", label="JsonSchemaGenerator jsonSchemaGenerator = new JsonSchemaGenerator()", span="625-625"];
m2_211 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularCollectionReferences()", file="JsonSchemaGeneratorTests.cs", label="JsonSchema jsonSchema = jsonSchemaGenerator.Generate(type)", span="628-628"];
m2_210 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularCollectionReferences()", file="JsonSchemaGeneratorTests.cs", label="jsonSchemaGenerator.UndefinedSchemaIdHandling = UndefinedSchemaIdHandling.UseTypeName", span="627-627"];
m2_212 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularCollectionReferences()", file="JsonSchemaGeneratorTests.cs", label="Assert.IsNotNull(jsonSchema)", span="631-631"];
m2_213 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularCollectionReferences()", file="JsonSchemaGeneratorTests.cs", label="Exit Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularCollectionReferences()", span="622-622"];
m2_214 [cluster="Unk.IsNotNull", file="JsonSchemaGeneratorTests.cs", label="Entry Unk.IsNotNull", span=""];
m2_10 [cluster="Newtonsoft.Json.Schema.JsonSchemaGenerator.JsonSchemaGenerator()", file="JsonSchemaGeneratorTests.cs", label="Entry Newtonsoft.Json.Schema.JsonSchemaGenerator.JsonSchemaGenerator()", span="50-50"];
m2_132 [cluster="Newtonsoft.Json.Serialization.JsonPropertyCollection.JsonPropertyCollection(System.Type)", file="JsonSchemaGeneratorTests.cs", label="Entry Newtonsoft.Json.Serialization.JsonPropertyCollection.JsonPropertyCollection(System.Type)", span="46-46"];
m2_11 [cluster="Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type)", file="JsonSchemaGeneratorTests.cs", label="Entry Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type)", span="130-130"];
m2_55 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.MissingSchemaIdHandlingTest()", file="JsonSchemaGeneratorTests.cs", label="Entry Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.MissingSchemaIdHandlingTest()", span="245-245"];
m2_56 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.MissingSchemaIdHandlingTest()", file="JsonSchemaGeneratorTests.cs", label="JsonSchemaGenerator generator = new JsonSchemaGenerator()", span="247-247"];
m2_57 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.MissingSchemaIdHandlingTest()", file="JsonSchemaGeneratorTests.cs", label="JsonSchema schema = generator.Generate(typeof(Store))", span="249-249"];
m2_59 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.MissingSchemaIdHandlingTest()", file="JsonSchemaGeneratorTests.cs", label="generator.UndefinedSchemaIdHandling = UndefinedSchemaIdHandling.UseTypeName", span="252-252"];
m2_60 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.MissingSchemaIdHandlingTest()", file="JsonSchemaGeneratorTests.cs", label="schema = generator.Generate(typeof(Store))", span="253-253"];
m2_62 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.MissingSchemaIdHandlingTest()", file="JsonSchemaGeneratorTests.cs", label="generator.UndefinedSchemaIdHandling = UndefinedSchemaIdHandling.UseAssemblyQualifiedName", span="256-256"];
m2_63 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.MissingSchemaIdHandlingTest()", file="JsonSchemaGeneratorTests.cs", label="schema = generator.Generate(typeof(Store))", span="257-257"];
m2_58 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.MissingSchemaIdHandlingTest()", file="JsonSchemaGeneratorTests.cs", label="Assert.AreEqual(null, schema.Id)", span="250-250"];
m2_61 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.MissingSchemaIdHandlingTest()", file="JsonSchemaGeneratorTests.cs", label="Assert.AreEqual(typeof(Store).FullName, schema.Id)", span="254-254"];
m2_64 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.MissingSchemaIdHandlingTest()", file="JsonSchemaGeneratorTests.cs", label="Assert.AreEqual(typeof(Store).AssemblyQualifiedName, schema.Id)", span="258-258"];
m2_65 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.MissingSchemaIdHandlingTest()", file="JsonSchemaGeneratorTests.cs", label="Exit Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.MissingSchemaIdHandlingTest()", span="245-245"];
m2_156 [cluster="Newtonsoft.Json.Linq.JTokenWriter.JTokenWriter()", file="JsonSchemaGeneratorTests.cs", label="Entry Newtonsoft.Json.Linq.JTokenWriter.JTokenWriter()", span="85-85"];
m2_32 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_UserNullable()", file="JsonSchemaGeneratorTests.cs", label="Entry Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_UserNullable()", span="161-161"];
m2_33 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_UserNullable()", file="JsonSchemaGeneratorTests.cs", label="JsonSchemaGenerator generator = new JsonSchemaGenerator()", span="163-163"];
m2_34 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_UserNullable()", file="JsonSchemaGeneratorTests.cs", label="JsonSchema schema = generator.Generate(typeof(UserNullable))", span="164-164"];
m2_35 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_UserNullable()", file="JsonSchemaGeneratorTests.cs", label="string json = schema.ToString()", span="166-166"];
m2_36 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_UserNullable()", file="JsonSchemaGeneratorTests.cs", label="StringAssert.AreEqual(@''{\r\n  ''''type'''': ''''object'''',\r\n  ''''properties'''': {\r\n    ''''Id'''': {\r\n      ''''required'''': true,\r\n      ''''type'''': ''''string''''\r\n    },\r\n    ''''FName'''': {\r\n      ''''required'''': true,\r\n      ''''type'''': [\r\n        ''''string'''',\r\n        ''''null''''\r\n      ]\r\n    },\r\n    ''''LName'''': {\r\n      ''''required'''': true,\r\n      ''''type'''': [\r\n        ''''string'''',\r\n        ''''null''''\r\n      ]\r\n    },\r\n    ''''RoleId'''': {\r\n      ''''required'''': true,\r\n      ''''type'''': ''''integer''''\r\n    },\r\n    ''''NullableRoleId'''': {\r\n      ''''required'''': true,\r\n      ''''type'''': [\r\n        ''''integer'''',\r\n        ''''null''''\r\n      ]\r\n    },\r\n    ''''NullRoleId'''': {\r\n      ''''required'''': true,\r\n      ''''type'''': [\r\n        ''''integer'''',\r\n        ''''null''''\r\n      ]\r\n    },\r\n    ''''Active'''': {\r\n      ''''required'''': true,\r\n      ''''type'''': [\r\n        ''''boolean'''',\r\n        ''''null''''\r\n      ]\r\n    }\r\n  }\r\n}'', json)", span="168-215"];
m2_37 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_UserNullable()", file="JsonSchemaGeneratorTests.cs", label="Exit Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_UserNullable()", span="161-161"];
m2_155 [cluster="System.IO.DirectoryInfo.DirectoryInfo(string)", file="JsonSchemaGeneratorTests.cs", label="Entry System.IO.DirectoryInfo.DirectoryInfo(string)", span="0-0"];
m2_13 [cluster="Newtonsoft.Json.Tests.StringAssert.AreEqual(string, string)", file="JsonSchemaGeneratorTests.cs", label="Entry Newtonsoft.Json.Tests.StringAssert.AreEqual(string, string)", span="338-338"];
m2_198 [cluster="lambda expression", file="JsonSchemaGeneratorTests.cs", label="Entry lambda expression", span="572-572"];
m2_70 [cluster="lambda expression", file="JsonSchemaGeneratorTests.cs", label="Entry lambda expression", span="264-268"];
m2_71 [cluster="lambda expression", file="JsonSchemaGeneratorTests.cs", label="JsonSchemaGenerator generator = new JsonSchemaGenerator()", span="266-266"];
m2_72 [cluster="lambda expression", file="JsonSchemaGeneratorTests.cs", label="generator.Generate(typeof(CircularReferenceClass))", span="267-267"];
m2_73 [cluster="lambda expression", file="JsonSchemaGeneratorTests.cs", label="Exit lambda expression", span="264-268"];
m2_135 [cluster="lambda expression", file="JsonSchemaGeneratorTests.cs", label="Entry lambda expression", span="364-364"];
m2_136 [cluster="lambda expression", file="JsonSchemaGeneratorTests.cs", label="m.PropertyName != ''Root''", span="364-364"];
m2_137 [cluster="lambda expression", file="JsonSchemaGeneratorTests.cs", label="Exit lambda expression", span="364-364"];
m2_162 [cluster="lambda expression", file="JsonSchemaGeneratorTests.cs", label="Entry lambda expression", span="468-468"];
m2_164 [cluster="lambda expression", file="JsonSchemaGeneratorTests.cs", label="Exit lambda expression", span="468-468"];
m2_199 [cluster="lambda expression", file="JsonSchemaGeneratorTests.cs", label="errors.Add(args.Message)", span="572-572"];
m2_200 [cluster="lambda expression", file="JsonSchemaGeneratorTests.cs", label="Exit lambda expression", span="572-572"];
m2_92 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForType()", file="JsonSchemaGeneratorTests.cs", label="Entry Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForType()", span="299-299"];
m2_93 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForType()", file="JsonSchemaGeneratorTests.cs", label="JsonSchemaGenerator generator = new JsonSchemaGenerator()", span="301-301"];
m2_94 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForType()", file="JsonSchemaGeneratorTests.cs", label="generator.UndefinedSchemaIdHandling = UndefinedSchemaIdHandling.UseTypeName", span="302-302"];
m2_95 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForType()", file="JsonSchemaGeneratorTests.cs", label="JsonSchema schema = generator.Generate(typeof(Type))", span="304-304"];
m2_96 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForType()", file="JsonSchemaGeneratorTests.cs", label="Assert.AreEqual(JsonSchemaType.String, schema.Type)", span="306-306"];
m2_99 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForType()", file="JsonSchemaGeneratorTests.cs", label="Assert.IsTrue(v.IsValid(schema))", span="311-311"];
m2_97 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForType()", file="JsonSchemaGeneratorTests.cs", label="string json = JsonConvert.SerializeObject(typeof(Version), Formatting.Indented)", span="308-308"];
m2_98 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForType()", file="JsonSchemaGeneratorTests.cs", label="JValue v = new JValue(json)", span="310-310"];
m2_100 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForType()", file="JsonSchemaGeneratorTests.cs", label="Exit Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForType()", span="299-299"];
m2_0 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_GenericDictionary()", file="JsonSchemaGeneratorTests.cs", label="Entry Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_GenericDictionary()", span="60-60"];
m2_1 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_GenericDictionary()", file="JsonSchemaGeneratorTests.cs", label="JsonSchemaGenerator generator = new JsonSchemaGenerator()", span="62-62"];
m2_2 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_GenericDictionary()", file="JsonSchemaGeneratorTests.cs", label="JsonSchema schema = generator.Generate(typeof(Dictionary<string, List<string>>))", span="63-63"];
m2_3 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_GenericDictionary()", file="JsonSchemaGeneratorTests.cs", label="string json = schema.ToString()", span="65-65"];
m2_8 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_GenericDictionary()", file="JsonSchemaGeneratorTests.cs", label="Assert.IsTrue(o.IsValid(schema))", span="92-92"];
m2_4 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_GenericDictionary()", file="JsonSchemaGeneratorTests.cs", label="StringAssert.AreEqual(@''{\r\n  ''''type'''': ''''object'''',\r\n  ''''additionalProperties'''': {\r\n    ''''type'''': [\r\n      ''''array'''',\r\n      ''''null''''\r\n    ],\r\n    ''''items'''': {\r\n      ''''type'''': [\r\n        ''''string'''',\r\n        ''''null''''\r\n      ]\r\n    }\r\n  }\r\n}'', json)", span="67-81"];
m2_5 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_GenericDictionary()", file="JsonSchemaGeneratorTests.cs", label="Dictionary<string, List<string>> value = new Dictionary<string, List<string>>\r\n            {\r\n                { ''HasValue'', new List<string>() { ''first'', ''second'', null } },\r\n                { ''NoValue'', null }\r\n            }", span="83-87"];
m2_6 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_GenericDictionary()", file="JsonSchemaGeneratorTests.cs", label="string valueJson = JsonConvert.SerializeObject(value, Formatting.Indented)", span="89-89"];
m2_7 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_GenericDictionary()", file="JsonSchemaGeneratorTests.cs", label="JObject o = JObject.Parse(valueJson)", span="90-90"];
m2_9 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_GenericDictionary()", file="JsonSchemaGeneratorTests.cs", label="Exit Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_GenericDictionary()", span="60-60"];
m2_133 [cluster="Unk.Where", file="JsonSchemaGeneratorTests.cs", label="Entry Unk.Where", span=""];
m2_138 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForDirectoryInfo()", file="JsonSchemaGeneratorTests.cs", label="Entry Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForDirectoryInfo()", span="371-371"];
m2_154 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForDirectoryInfo()", file="JsonSchemaGeneratorTests.cs", label="Exit Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForDirectoryInfo()", span="371-371"];
m2_118 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CustomDirectoryInfoMapper.CreateContract(System.Type)", file="JsonSchemaGeneratorTests.cs", label="Entry Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CustomDirectoryInfoMapper.CreateContract(System.Type)", span="349-349"];
m2_119 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CustomDirectoryInfoMapper.CreateContract(System.Type)", file="JsonSchemaGeneratorTests.cs", label="objectType == typeof(DirectoryInfo)", span="351-351"];
m2_120 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CustomDirectoryInfoMapper.CreateContract(System.Type)", file="JsonSchemaGeneratorTests.cs", label="return base.CreateObjectContract(objectType);", span="353-353"];
m2_121 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CustomDirectoryInfoMapper.CreateContract(System.Type)", file="JsonSchemaGeneratorTests.cs", label="return base.CreateContract(objectType);", span="356-356"];
m2_122 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CustomDirectoryInfoMapper.CreateContract(System.Type)", file="JsonSchemaGeneratorTests.cs", label="Exit Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CustomDirectoryInfoMapper.CreateContract(System.Type)", span="349-349"];
m2_38 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_RequiredMembersClass()", file="JsonSchemaGeneratorTests.cs", label="Entry Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_RequiredMembersClass()", span="219-219"];
m2_39 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_RequiredMembersClass()", file="JsonSchemaGeneratorTests.cs", label="JsonSchemaGenerator generator = new JsonSchemaGenerator()", span="221-221"];
m2_40 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_RequiredMembersClass()", file="JsonSchemaGeneratorTests.cs", label="JsonSchema schema = generator.Generate(typeof(RequiredMembersClass))", span="222-222"];
m2_41 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_RequiredMembersClass()", file="JsonSchemaGeneratorTests.cs", label="Assert.AreEqual(JsonSchemaType.String, schema.Properties[''FirstName''].Type)", span="224-224"];
m2_42 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_RequiredMembersClass()", file="JsonSchemaGeneratorTests.cs", label="Assert.AreEqual(JsonSchemaType.String | JsonSchemaType.Null, schema.Properties[''MiddleName''].Type)", span="225-225"];
m2_43 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_RequiredMembersClass()", file="JsonSchemaGeneratorTests.cs", label="Assert.AreEqual(JsonSchemaType.String | JsonSchemaType.Null, schema.Properties[''LastName''].Type)", span="226-226"];
m2_44 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_RequiredMembersClass()", file="JsonSchemaGeneratorTests.cs", label="Assert.AreEqual(JsonSchemaType.String, schema.Properties[''BirthDate''].Type)", span="227-227"];
m2_45 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_RequiredMembersClass()", file="JsonSchemaGeneratorTests.cs", label="Exit Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_RequiredMembersClass()", span="219-219"];
m2_131 [cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperties(System.Type, Newtonsoft.Json.MemberSerialization)", file="JsonSchemaGeneratorTests.cs", label="Entry Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperties(System.Type, Newtonsoft.Json.MemberSerialization)", span="1292-1292"];
m2_69 [cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", file="JsonSchemaGeneratorTests.cs", label="Entry Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", span="367-367"];
m2_66 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularReferenceError()", file="JsonSchemaGeneratorTests.cs", label="Entry Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularReferenceError()", span="262-262"];
m2_67 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularReferenceError()", file="JsonSchemaGeneratorTests.cs", label="ExceptionAssert.Throws<Exception>(() =>\r\n            {\r\n                JsonSchemaGenerator generator = new JsonSchemaGenerator();\r\n                generator.Generate(typeof(CircularReferenceClass));\r\n            }, @''Unresolved circular reference for type 'Newtonsoft.Json.Tests.TestObjects.CircularReferenceClass'. Explicitly define an Id for the type using a JsonObject/JsonArray attribute or automatically generate a type Id using the UndefinedSchemaIdHandling property.'')", span="264-268"];
m2_68 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularReferenceError()", file="JsonSchemaGeneratorTests.cs", label="Exit Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularReferenceError()", span="262-262"];
m2_215 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularReferenceWithMixedRequires()", file="JsonSchemaGeneratorTests.cs", label="Entry Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularReferenceWithMixedRequires()", span="635-635"];
m2_216 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularReferenceWithMixedRequires()", file="JsonSchemaGeneratorTests.cs", label="JsonSchemaGenerator jsonSchemaGenerator = new JsonSchemaGenerator()", span="637-637"];
m2_217 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularReferenceWithMixedRequires()", file="JsonSchemaGeneratorTests.cs", label="jsonSchemaGenerator.UndefinedSchemaIdHandling = UndefinedSchemaIdHandling.UseTypeName", span="639-639"];
m2_218 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularReferenceWithMixedRequires()", file="JsonSchemaGeneratorTests.cs", label="JsonSchema jsonSchema = jsonSchemaGenerator.Generate(typeof(CircularReferenceClass))", span="640-640"];
m2_219 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularReferenceWithMixedRequires()", file="JsonSchemaGeneratorTests.cs", label="string json = jsonSchema.ToString()", span="641-641"];
m2_220 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularReferenceWithMixedRequires()", file="JsonSchemaGeneratorTests.cs", label="StringAssert.AreEqual(@''{\r\n  ''''id'''': ''''Newtonsoft.Json.Tests.TestObjects.CircularReferenceClass'''',\r\n  ''''type'''': [\r\n    ''''object'''',\r\n    ''''null''''\r\n  ],\r\n  ''''properties'''': {\r\n    ''''Name'''': {\r\n      ''''required'''': true,\r\n      ''''type'''': ''''string''''\r\n    },\r\n    ''''Child'''': {\r\n      ''''$ref'''': ''''Newtonsoft.Json.Tests.TestObjects.CircularReferenceClass''''\r\n    }\r\n  }\r\n}'', json)", span="643-658"];
m2_221 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularReferenceWithMixedRequires()", file="JsonSchemaGeneratorTests.cs", label="Exit Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularReferenceWithMixedRequires()", span="635-635"];
m2_84 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularReferenceWithExplicitId()", file="JsonSchemaGeneratorTests.cs", label="Entry Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularReferenceWithExplicitId()", span="286-286"];
m2_85 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularReferenceWithExplicitId()", file="JsonSchemaGeneratorTests.cs", label="JsonSchemaGenerator generator = new JsonSchemaGenerator()", span="288-288"];
m2_86 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularReferenceWithExplicitId()", file="JsonSchemaGeneratorTests.cs", label="JsonSchema schema = generator.Generate(typeof(CircularReferenceWithIdClass))", span="290-290"];
m2_87 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularReferenceWithExplicitId()", file="JsonSchemaGeneratorTests.cs", label="Assert.AreEqual(JsonSchemaType.String | JsonSchemaType.Null, schema.Properties[''Name''].Type)", span="292-292"];
m2_88 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularReferenceWithExplicitId()", file="JsonSchemaGeneratorTests.cs", label="Assert.AreEqual(''MyExplicitId'', schema.Id)", span="293-293"];
m2_89 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularReferenceWithExplicitId()", file="JsonSchemaGeneratorTests.cs", label="Assert.AreEqual(JsonSchemaType.Object | JsonSchemaType.Null, schema.Properties[''Child''].Type)", span="294-294"];
m2_90 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularReferenceWithExplicitId()", file="JsonSchemaGeneratorTests.cs", label="Assert.AreEqual(schema, schema.Properties[''Child''])", span="295-295"];
m2_91 [cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularReferenceWithExplicitId()", file="JsonSchemaGeneratorTests.cs", label="Exit Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularReferenceWithExplicitId()", span="286-286"];
m2_123 [cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateObjectContract(System.Type)", file="JsonSchemaGeneratorTests.cs", label="Entry Newtonsoft.Json.Serialization.DefaultContractResolver.CreateObjectContract(System.Type)", span="316-316"];
m2_235 [file="JsonSchemaGeneratorTests.cs", label="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CustomDirectoryInfoMapper", span=""];
m2_236 [file="JsonSchemaGeneratorTests.cs", label=errors, span=""];
m2_237 [file="JsonSchemaGeneratorTests.cs", label=errors, span=""];
m3_1 [cluster="Newtonsoft.Json.Linq.JsonPath.PathFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="PathFilter.cs", label="Exit Newtonsoft.Json.Linq.JsonPath.PathFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", span="8-8"];
m3_25 [cluster="Newtonsoft.Json.Linq.JsonPath.PathFilter.GetNextScanValue(Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken)", file="PathFilter.cs", label="Entry Newtonsoft.Json.Linq.JsonPath.PathFilter.GetNextScanValue(Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken)", span="54-54"];
m3_26 [cluster="Newtonsoft.Json.Linq.JsonPath.PathFilter.GetNextScanValue(Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken)", color=green, community=0, file="PathFilter.cs", label="container != null && container.HasValues", prediction=33, span="57-57"];
m3_27 [cluster="Newtonsoft.Json.Linq.JsonPath.PathFilter.GetNextScanValue(Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken)", color=green, community=0, file="PathFilter.cs", label="value = container.First", prediction=34, span="59-59"];
m3_28 [cluster="Newtonsoft.Json.Linq.JsonPath.PathFilter.GetNextScanValue(Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken)", color=green, community=0, file="PathFilter.cs", label="value != null && value != originalParent && value == value.Parent.Last", prediction=35, span="64-64"];
m3_29 [cluster="Newtonsoft.Json.Linq.JsonPath.PathFilter.GetNextScanValue(Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken)", color=green, community=0, file="PathFilter.cs", label="value = value.Parent", prediction=35, span="66-66"];
m3_33 [cluster="Newtonsoft.Json.Linq.JsonPath.PathFilter.GetNextScanValue(Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken)", color=green, community=0, file="PathFilter.cs", label="return value;", prediction=37, span="79-79"];
m3_30 [cluster="Newtonsoft.Json.Linq.JsonPath.PathFilter.GetNextScanValue(Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken)", color=green, community=0, file="PathFilter.cs", label="value == null || value == originalParent", prediction=35, span="70-70"];
m3_32 [cluster="Newtonsoft.Json.Linq.JsonPath.PathFilter.GetNextScanValue(Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken)", color=green, community=0, file="PathFilter.cs", label="value = value.Next", prediction=39, span="76-76"];
m3_31 [cluster="Newtonsoft.Json.Linq.JsonPath.PathFilter.GetNextScanValue(Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken)", color=green, community=0, file="PathFilter.cs", label="return null;", prediction=40, span="72-72"];
m3_34 [cluster="Newtonsoft.Json.Linq.JsonPath.PathFilter.GetNextScanValue(Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken)", file="PathFilter.cs", label="Exit Newtonsoft.Json.Linq.JsonPath.PathFilter.GetNextScanValue(Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken)", span="54-54"];
m3_2 [cluster="Newtonsoft.Json.Linq.JsonPath.PathFilter.GetTokenIndex(Newtonsoft.Json.Linq.JToken, bool, int)", file="PathFilter.cs", label="Entry Newtonsoft.Json.Linq.JsonPath.PathFilter.GetTokenIndex(Newtonsoft.Json.Linq.JToken, bool, int)", span="10-10"];
m3_3 [cluster="Newtonsoft.Json.Linq.JsonPath.PathFilter.GetTokenIndex(Newtonsoft.Json.Linq.JToken, bool, int)", file="PathFilter.cs", label="JArray a = t as JArray", span="12-12"];
m3_4 [cluster="Newtonsoft.Json.Linq.JsonPath.PathFilter.GetTokenIndex(Newtonsoft.Json.Linq.JToken, bool, int)", file="PathFilter.cs", label="JConstructor c = t as JConstructor", span="13-13"];
m3_6 [cluster="Newtonsoft.Json.Linq.JsonPath.PathFilter.GetTokenIndex(Newtonsoft.Json.Linq.JToken, bool, int)", file="PathFilter.cs", label="a.Count <= index", span="17-17"];
m3_7 [cluster="Newtonsoft.Json.Linq.JsonPath.PathFilter.GetTokenIndex(Newtonsoft.Json.Linq.JToken, bool, int)", file="PathFilter.cs", label=errorWhenNoMatch, span="19-19"];
m3_8 [cluster="Newtonsoft.Json.Linq.JsonPath.PathFilter.GetTokenIndex(Newtonsoft.Json.Linq.JToken, bool, int)", file="PathFilter.cs", label="throw new JsonException(''Index {0} outside the bounds of JArray.''.FormatWith(CultureInfo.InvariantCulture, index));", span="21-21"];
m3_10 [cluster="Newtonsoft.Json.Linq.JsonPath.PathFilter.GetTokenIndex(Newtonsoft.Json.Linq.JToken, bool, int)", file="PathFilter.cs", label="return a[index];", span="27-27"];
m3_12 [cluster="Newtonsoft.Json.Linq.JsonPath.PathFilter.GetTokenIndex(Newtonsoft.Json.Linq.JToken, bool, int)", file="PathFilter.cs", label="c.Count <= index", span="31-31"];
m3_13 [cluster="Newtonsoft.Json.Linq.JsonPath.PathFilter.GetTokenIndex(Newtonsoft.Json.Linq.JToken, bool, int)", file="PathFilter.cs", label=errorWhenNoMatch, span="33-33"];
m3_14 [cluster="Newtonsoft.Json.Linq.JsonPath.PathFilter.GetTokenIndex(Newtonsoft.Json.Linq.JToken, bool, int)", file="PathFilter.cs", label="throw new JsonException(''Index {0} outside the bounds of JConstructor.''.FormatWith(CultureInfo.InvariantCulture, index));", span="35-35"];
m3_16 [cluster="Newtonsoft.Json.Linq.JsonPath.PathFilter.GetTokenIndex(Newtonsoft.Json.Linq.JToken, bool, int)", file="PathFilter.cs", label="return c[index];", span="41-41"];
m3_17 [cluster="Newtonsoft.Json.Linq.JsonPath.PathFilter.GetTokenIndex(Newtonsoft.Json.Linq.JToken, bool, int)", file="PathFilter.cs", label=errorWhenNoMatch, span="45-45"];
m3_18 [cluster="Newtonsoft.Json.Linq.JsonPath.PathFilter.GetTokenIndex(Newtonsoft.Json.Linq.JToken, bool, int)", file="PathFilter.cs", label="throw new JsonException(''Index {0} not valid on {1}.''.FormatWith(CultureInfo.InvariantCulture, index, t.GetType().Name));", span="47-47"];
m3_5 [cluster="Newtonsoft.Json.Linq.JsonPath.PathFilter.GetTokenIndex(Newtonsoft.Json.Linq.JToken, bool, int)", file="PathFilter.cs", label="a != null", span="15-15"];
m3_11 [cluster="Newtonsoft.Json.Linq.JsonPath.PathFilter.GetTokenIndex(Newtonsoft.Json.Linq.JToken, bool, int)", file="PathFilter.cs", label="c != null", span="29-29"];
m3_9 [cluster="Newtonsoft.Json.Linq.JsonPath.PathFilter.GetTokenIndex(Newtonsoft.Json.Linq.JToken, bool, int)", file="PathFilter.cs", label="return null;", span="24-24"];
m3_15 [cluster="Newtonsoft.Json.Linq.JsonPath.PathFilter.GetTokenIndex(Newtonsoft.Json.Linq.JToken, bool, int)", file="PathFilter.cs", label="return null;", span="38-38"];
m3_19 [cluster="Newtonsoft.Json.Linq.JsonPath.PathFilter.GetTokenIndex(Newtonsoft.Json.Linq.JToken, bool, int)", file="PathFilter.cs", label="return null;", span="50-50"];
m3_20 [cluster="Newtonsoft.Json.Linq.JsonPath.PathFilter.GetTokenIndex(Newtonsoft.Json.Linq.JToken, bool, int)", file="PathFilter.cs", label="Exit Newtonsoft.Json.Linq.JsonPath.PathFilter.GetTokenIndex(Newtonsoft.Json.Linq.JToken, bool, int)", span="10-10"];
m3_23 [cluster="object.GetType()", file="PathFilter.cs", label="Entry object.GetType()", span="0-0"];
m3_24 [cluster="string.FormatWith(System.IFormatProvider, object, object)", file="PathFilter.cs", label="Entry string.FormatWith(System.IFormatProvider, object, object)", span="52-52"];
m3_21 [cluster="Newtonsoft.Json.JsonException.JsonException(string)", file="PathFilter.cs", label="Entry Newtonsoft.Json.JsonException.JsonException(string)", span="54-54"];
m3_22 [cluster="string.FormatWith(System.IFormatProvider, object)", file="PathFilter.cs", label="Entry string.FormatWith(System.IFormatProvider, object)", span="47-47"];
m4_11 [cluster="Newtonsoft.Json.Linq.JsonPath.QueryExpression.IsMatch(Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken)", file="QueryScanFilter.cs", label="Entry Newtonsoft.Json.Linq.JsonPath.QueryExpression.IsMatch(Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken)", span="31-31"];
m4_0 [cluster="Newtonsoft.Json.Linq.JsonPath.QueryScanFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="QueryScanFilter.cs", label="Entry Newtonsoft.Json.Linq.JsonPath.QueryScanFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", span="9-9"];
m4_1 [cluster="Newtonsoft.Json.Linq.JsonPath.QueryScanFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", color=green, community=0, file="QueryScanFilter.cs", label=current, prediction=41, span="11-11"];
m4_8 [cluster="Newtonsoft.Json.Linq.JsonPath.QueryScanFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", color=green, community=0, file="QueryScanFilter.cs", label="yield return t;", prediction=41, span="27-27"];
m4_7 [cluster="Newtonsoft.Json.Linq.JsonPath.QueryScanFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", color=green, community=0, file="QueryScanFilter.cs", label="Expression.IsMatch(root, t)", prediction=41, span="25-25"];
m4_2 [cluster="Newtonsoft.Json.Linq.JsonPath.QueryScanFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", color=green, community=0, file="QueryScanFilter.cs", label="t is JContainer", prediction=44, span="13-13"];
m4_6 [cluster="Newtonsoft.Json.Linq.JsonPath.QueryScanFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", color=green, community=0, file="QueryScanFilter.cs", label="yield return d;", prediction=45, span="19-19"];
m4_5 [cluster="Newtonsoft.Json.Linq.JsonPath.QueryScanFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", color=green, community=0, file="QueryScanFilter.cs", label="Expression.IsMatch(root, d)", prediction=41, span="17-17"];
m4_4 [cluster="Newtonsoft.Json.Linq.JsonPath.QueryScanFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", color=green, community=0, file="QueryScanFilter.cs", label="c.DescendantsAndSelf()", prediction=45, span="15-15"];
m4_3 [cluster="Newtonsoft.Json.Linq.JsonPath.QueryScanFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", color=green, community=0, file="QueryScanFilter.cs", label=c, prediction=48, span="13-13"];
m4_9 [cluster="Newtonsoft.Json.Linq.JsonPath.QueryScanFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="QueryScanFilter.cs", label="Exit Newtonsoft.Json.Linq.JsonPath.QueryScanFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", span="9-9"];
m4_10 [cluster="Unk.DescendantsAndSelf", file="QueryScanFilter.cs", label="Entry Unk.DescendantsAndSelf", span=""];
m4_12 [file="QueryScanFilter.cs", label="Newtonsoft.Json.Linq.JsonPath.QueryScanFilter", span=""];
m5_17 [cluster="Newtonsoft.Json.Linq.JsonPath.ScanFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="ScanFilter.cs", label="Name == null", span="51-51"];
m5_0 [cluster="Newtonsoft.Json.Linq.JsonPath.ScanFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="ScanFilter.cs", label="Entry Newtonsoft.Json.Linq.JsonPath.ScanFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", span="8-8"];
m5_1 [cluster="Newtonsoft.Json.Linq.JsonPath.ScanFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="ScanFilter.cs", label=current, span="10-10"];
m5_3 [cluster="Newtonsoft.Json.Linq.JsonPath.ScanFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="ScanFilter.cs", label="yield return c;", span="14-14"];
m5_16 [cluster="Newtonsoft.Json.Linq.JsonPath.ScanFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="ScanFilter.cs", label="yield return e.Value;", span="46-46"];
m5_18 [cluster="Newtonsoft.Json.Linq.JsonPath.ScanFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="ScanFilter.cs", label="yield return value;", span="53-53"];
m5_2 [cluster="Newtonsoft.Json.Linq.JsonPath.ScanFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="ScanFilter.cs", label="Name == null", span="12-12"];
m5_4 [cluster="Newtonsoft.Json.Linq.JsonPath.ScanFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="ScanFilter.cs", label="JToken value = c", span="17-17"];
m5_5 [cluster="Newtonsoft.Json.Linq.JsonPath.ScanFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", color=green, community=0, file="ScanFilter.cs", label="JContainer container = c as JContainer", prediction=49, span="18-18"];
m5_6 [cluster="Newtonsoft.Json.Linq.JsonPath.ScanFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="ScanFilter.cs", label=true, span="20-20"];
m5_7 [cluster="Newtonsoft.Json.Linq.JsonPath.ScanFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", color=green, community=0, file="ScanFilter.cs", label="value = GetNextScanValue(c, container, value)", prediction=50, span="22-22"];
m5_8 [cluster="Newtonsoft.Json.Linq.JsonPath.ScanFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", color=green, community=0, file="ScanFilter.cs", label="value == null", prediction=51, span="23-23"];
m5_13 [cluster="Newtonsoft.Json.Linq.JsonPath.ScanFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="ScanFilter.cs", label="JProperty e = value as JProperty", span="41-41"];
m5_19 [cluster="Newtonsoft.Json.Linq.JsonPath.ScanFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="ScanFilter.cs", label="container = value as JContainer", span="57-57"];
m5_14 [cluster="Newtonsoft.Json.Linq.JsonPath.ScanFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="ScanFilter.cs", label="e != null", span="42-42"];
m5_15 [cluster="Newtonsoft.Json.Linq.JsonPath.ScanFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="ScanFilter.cs", label="e.Name == Name", span="44-44"];
m5_20 [cluster="Newtonsoft.Json.Linq.JsonPath.ScanFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="ScanFilter.cs", label="Exit Newtonsoft.Json.Linq.JsonPath.ScanFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", span="8-8"];
m5_21 [file="ScanFilter.cs", label="Newtonsoft.Json.Linq.JsonPath.ScanFilter", span=""];
m6_14 [cluster="Newtonsoft.Json.Linq.JsonPath.ScanMultipleFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="ScanMultipleFilter.cs", label="e.Name == name", span="41-41"];
m6_0 [cluster="Newtonsoft.Json.Linq.JsonPath.ScanMultipleFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="ScanMultipleFilter.cs", label="Entry Newtonsoft.Json.Linq.JsonPath.ScanMultipleFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", span="8-8"];
m6_1 [cluster="Newtonsoft.Json.Linq.JsonPath.ScanMultipleFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="ScanMultipleFilter.cs", label=current, span="10-10"];
m6_15 [cluster="Newtonsoft.Json.Linq.JsonPath.ScanMultipleFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="ScanMultipleFilter.cs", label="yield return e.Value;", span="43-43"];
m6_2 [cluster="Newtonsoft.Json.Linq.JsonPath.ScanMultipleFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="ScanMultipleFilter.cs", label="JToken value = c", span="12-12"];
m6_3 [cluster="Newtonsoft.Json.Linq.JsonPath.ScanMultipleFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", color=green, community=0, file="ScanMultipleFilter.cs", label="JContainer container = c as JContainer", prediction=52, span="13-13"];
m6_4 [cluster="Newtonsoft.Json.Linq.JsonPath.ScanMultipleFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="ScanMultipleFilter.cs", label=true, span="15-15"];
m6_5 [cluster="Newtonsoft.Json.Linq.JsonPath.ScanMultipleFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", color=green, community=0, file="ScanMultipleFilter.cs", label="value = GetNextScanValue(c, container, value)", prediction=53, span="17-17"];
m6_6 [cluster="Newtonsoft.Json.Linq.JsonPath.ScanMultipleFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", color=green, community=0, file="ScanMultipleFilter.cs", label="value == null", prediction=54, span="18-18"];
m6_11 [cluster="Newtonsoft.Json.Linq.JsonPath.ScanMultipleFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="ScanMultipleFilter.cs", label="JProperty e = value as JProperty", span="36-36"];
m6_16 [cluster="Newtonsoft.Json.Linq.JsonPath.ScanMultipleFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="ScanMultipleFilter.cs", label="container = value as JContainer", span="48-48"];
m6_12 [cluster="Newtonsoft.Json.Linq.JsonPath.ScanMultipleFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="ScanMultipleFilter.cs", label="e != null", span="37-37"];
m6_13 [cluster="Newtonsoft.Json.Linq.JsonPath.ScanMultipleFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="ScanMultipleFilter.cs", label=Names, span="39-39"];
m6_17 [cluster="Newtonsoft.Json.Linq.JsonPath.ScanMultipleFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="ScanMultipleFilter.cs", label="Exit Newtonsoft.Json.Linq.JsonPath.ScanMultipleFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", span="8-8"];
m6_18 [file="ScanMultipleFilter.cs", label="Newtonsoft.Json.Linq.JsonPath.ScanMultipleFilter", span=""];
m8_132 [cluster="XmlDocument.cstr", file="XmlNodeConverterTest.cs", label="Entry XmlDocument.cstr", span=""];
m8_445 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NestedArrays()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NestedArrays()", span="1242-1242"];
m8_446 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NestedArrays()", file="XmlNodeConverterTest.cs", label="string json = @''{\r\n  ''''available_sizes'''': [\r\n    [\r\n      ''''assets/images/resized/0001/1070/11070v1-max-150x150.jpg'''',\r\n      ''''assets/images/resized/0001/1070/11070v1-max-150x150.jpg''''\r\n    ],\r\n    [\r\n      ''''assets/images/resized/0001/1070/11070v1-max-250x250.jpg'''',\r\n      ''''assets/images/resized/0001/1070/11070v1-max-250x250.jpg''''\r\n    ],\r\n    [\r\n      ''''assets/images/resized/0001/1070/11070v1-max-250x250.jpg''''\r\n    ]\r\n  ]\r\n}''", span="1244-1258"];
m8_447 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NestedArrays()", file="XmlNodeConverterTest.cs", label="XmlDocument newDoc = JsonConvert.DeserializeXmlNode(json, ''myRoot'')", span="1261-1261"];
m8_450 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NestedArrays()", file="XmlNodeConverterTest.cs", label="XDocument newXDoc = JsonConvert.DeserializeXNode(json, ''myRoot'')", span="1281-1281"];
m8_448 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NestedArrays()", file="XmlNodeConverterTest.cs", label="string xml = IndentXml(newDoc.InnerXml)", span="1263-1263"];
m8_449 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NestedArrays()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(@''<myRoot>\r\n  <available_sizes>\r\n    <available_sizes>assets/images/resized/0001/1070/11070v1-max-150x150.jpg</available_sizes>\r\n    <available_sizes>assets/images/resized/0001/1070/11070v1-max-150x150.jpg</available_sizes>\r\n  </available_sizes>\r\n  <available_sizes>\r\n    <available_sizes>assets/images/resized/0001/1070/11070v1-max-250x250.jpg</available_sizes>\r\n    <available_sizes>assets/images/resized/0001/1070/11070v1-max-250x250.jpg</available_sizes>\r\n  </available_sizes>\r\n  <available_sizes>\r\n    <available_sizes>assets/images/resized/0001/1070/11070v1-max-250x250.jpg</available_sizes>\r\n  </available_sizes>\r\n</myRoot>'', IndentXml(newDoc.InnerXml))", span="1265-1277"];
m8_452 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NestedArrays()", file="XmlNodeConverterTest.cs", label="string newJson = JsonConvert.SerializeXmlNode(newDoc, Formatting.Indented)", span="1299-1299"];
m8_451 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NestedArrays()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(@''<myRoot>\r\n  <available_sizes>\r\n    <available_sizes>assets/images/resized/0001/1070/11070v1-max-150x150.jpg</available_sizes>\r\n    <available_sizes>assets/images/resized/0001/1070/11070v1-max-150x150.jpg</available_sizes>\r\n  </available_sizes>\r\n  <available_sizes>\r\n    <available_sizes>assets/images/resized/0001/1070/11070v1-max-250x250.jpg</available_sizes>\r\n    <available_sizes>assets/images/resized/0001/1070/11070v1-max-250x250.jpg</available_sizes>\r\n  </available_sizes>\r\n  <available_sizes>\r\n    <available_sizes>assets/images/resized/0001/1070/11070v1-max-250x250.jpg</available_sizes>\r\n  </available_sizes>\r\n</myRoot>'', IndentXml(newXDoc.ToString(SaveOptions.DisableFormatting)))", span="1283-1295"];
m8_453 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NestedArrays()", file="XmlNodeConverterTest.cs", label="Console.WriteLine(newJson)", span="1300-1300"];
m8_454 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NestedArrays()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NestedArrays()", span="1242-1242"];
m8_821 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Utc_Precision()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Utc_Precision()", span="2866-2866"];
m8_822 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Utc_Precision()", file="XmlNodeConverterTest.cs", label="string json = @''{''''CreatedDate'''': ''''2014-01-23T00:00:00.1234567Z''''}''", span="2868-2868"];
m8_823 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Utc_Precision()", file="XmlNodeConverterTest.cs", label="var dxml = JsonConvert.DeserializeXNode(json, ''root'')", span="2869-2869"];
m8_824 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Utc_Precision()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(''2014-01-23T00:00:00.1234567Z'', dxml.Root.Element(''CreatedDate'').Value)", span="2870-2870"];
m8_825 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Utc_Precision()", file="XmlNodeConverterTest.cs", label="Console.WriteLine(''DateTimeToXml_Utc: '' + dxml.Root.Element(''CreatedDate'').Value)", span="2872-2872"];
m8_826 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Utc_Precision()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Utc_Precision()", span="2866-2866"];
m8_748 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlIncompatibleCharsInPropertyName()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlIncompatibleCharsInPropertyName()", span="2725-2725"];
m8_749 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlIncompatibleCharsInPropertyName()", file="XmlNodeConverterTest.cs", label="var json = ''{\''%name\'':\''value\''}''", span="2727-2727"];
m8_750 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlIncompatibleCharsInPropertyName()", file="XmlNodeConverterTest.cs", label="XmlDocument node = JsonConvert.DeserializeXmlNode(json)", span="2729-2729"];
m8_753 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlIncompatibleCharsInPropertyName()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(json, json2)", span="2735-2735"];
m8_751 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlIncompatibleCharsInPropertyName()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(''<_x0025_name>value</_x0025_name>'', node.OuterXml)", span="2731-2731"];
m8_752 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlIncompatibleCharsInPropertyName()", file="XmlNodeConverterTest.cs", label="string json2 = JsonConvert.SerializeXmlNode(node)", span="2733-2733"];
m8_754 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlIncompatibleCharsInPropertyName()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlIncompatibleCharsInPropertyName()", span="2725-2725"];
m8_659 [cluster="System.IO.MemoryStream.ToArray()", file="XmlNodeConverterTest.cs", label="Entry System.IO.MemoryStream.ToArray()", span="0-0"];
m8_344 [cluster="Unk.GetIndentedInnerXml", file="XmlNodeConverterTest.cs", label="Entry Unk.GetIndentedInnerXml", span=""];
m8_658 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JsonBodyToSoapXml(System.IO.Stream, System.IO.Stream)", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JsonBodyToSoapXml(System.IO.Stream, System.IO.Stream)", span="2102-2102"];
m8_661 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JsonBodyToSoapXml(System.IO.Stream, System.IO.Stream)", file="XmlNodeConverterTest.cs", label="Newtonsoft.Json.JsonSerializerSettings settings = new Newtonsoft.Json.JsonSerializerSettings()", span="2104-2104"];
m8_664 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JsonBodyToSoapXml(System.IO.Stream, System.IO.Stream)", file="XmlNodeConverterTest.cs", label="Newtonsoft.Json.JsonTextReader reader = new Newtonsoft.Json.JsonTextReader(new System.IO.StreamReader(json))", span="2107-2107"];
m8_668 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JsonBodyToSoapXml(System.IO.Stream, System.IO.Stream)", file="XmlNodeConverterTest.cs", label="XmlWriter writer = XmlWriter.Create(xml)", span="2114-2114"];
m8_662 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JsonBodyToSoapXml(System.IO.Stream, System.IO.Stream)", file="XmlNodeConverterTest.cs", label="settings.Converters.Add(new Newtonsoft.Json.Converters.XmlNodeConverter())", span="2105-2105"];
m8_663 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JsonBodyToSoapXml(System.IO.Stream, System.IO.Stream)", file="XmlNodeConverterTest.cs", label="Newtonsoft.Json.JsonSerializer serializer = Newtonsoft.Json.JsonSerializer.Create(settings)", span="2106-2106"];
m8_665 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JsonBodyToSoapXml(System.IO.Stream, System.IO.Stream)", file="XmlNodeConverterTest.cs", label="XmlDocument doc = (XmlDocument)serializer.Deserialize(reader, typeof(XmlDocument))", span="2109-2109"];
m8_666 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JsonBodyToSoapXml(System.IO.Stream, System.IO.Stream)", file="XmlNodeConverterTest.cs", label="reader.Read() && reader.TokenType != JsonToken.Comment", span="2110-2110"];
m8_669 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JsonBodyToSoapXml(System.IO.Stream, System.IO.Stream)", file="XmlNodeConverterTest.cs", label="doc.Save(writer)", span="2116-2116"];
m8_667 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JsonBodyToSoapXml(System.IO.Stream, System.IO.Stream)", file="XmlNodeConverterTest.cs", label="throw new JsonSerializationException(''Additional text found in JSON string after finishing deserializing object.'');", span="2112-2112"];
m8_670 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JsonBodyToSoapXml(System.IO.Stream, System.IO.Stream)", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JsonBodyToSoapXml(System.IO.Stream, System.IO.Stream)", span="2102-2102"];
m8_814 [cluster="System.DateTime.ToString(string, System.IFormatProvider)", file="XmlNodeConverterTest.cs", label="Entry System.DateTime.ToString(string, System.IFormatProvider)", span="0-0"];
m8_68 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDollarProperty()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDollarProperty()", span="155-155"];
m8_69 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDollarProperty()", file="XmlNodeConverterTest.cs", label="string json1 = @''{''''$'''':''''test''''}''", span="157-157"];
m8_70 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDollarProperty()", file="XmlNodeConverterTest.cs", label="var doc = JsonConvert.DeserializeXNode(json1)", span="159-159"];
m8_73 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDollarProperty()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(json1, json2)", span="165-165"];
m8_71 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDollarProperty()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(@''<_x0024_>test</_x0024_>'', doc.ToString())", span="161-161"];
m8_72 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDollarProperty()", file="XmlNodeConverterTest.cs", label="var json2 = JsonConvert.SerializeXNode(doc)", span="163-163"];
m8_74 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDollarProperty()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDollarProperty()", span="155-155"];
m8_85 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ConvertNullString()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ConvertNullString()", span="190-190"];
m8_86 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ConvertNullString()", file="XmlNodeConverterTest.cs", label="JObject json = new JObject()", span="192-192"];
m8_87 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ConvertNullString()", file="XmlNodeConverterTest.cs", label="json[''Prop1''] = (string)null", span="193-193"];
m8_88 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ConvertNullString()", file="XmlNodeConverterTest.cs", label="json[''Prop2''] = new MyModel().MyProperty", span="194-194"];
m8_92 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ConvertNullString()", file="XmlNodeConverterTest.cs", label="XDocument d = json.ToObject<XDocument>(jsonSerializer)", span="199-199"];
m8_89 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ConvertNullString()", file="XmlNodeConverterTest.cs", label="var xmlNodeConverter = new XmlNodeConverter { DeserializeRootElementName = ''object'' }", span="196-196"];
m8_90 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ConvertNullString()", file="XmlNodeConverterTest.cs", label="var jsonSerializerSettings = new JsonSerializerSettings { Converters = new JsonConverter[] { xmlNodeConverter } }", span="197-197"];
m8_91 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ConvertNullString()", file="XmlNodeConverterTest.cs", label="var jsonSerializer = JsonSerializer.CreateDefault(jsonSerializerSettings)", span="198-198"];
m8_93 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ConvertNullString()", file="XmlNodeConverterTest.cs", label="StringAssert.Equals(@''<object>\r\n  <Prop1 />\r\n  <Prop2 />\r\n</object>'', d.ToString())", span="201-204"];
m8_94 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ConvertNullString()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ConvertNullString()", span="190-190"];
m8_47 [cluster="Newtonsoft.Json.JsonTextReader.Read()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.JsonTextReader.Read()", span="387-387"];
m8_179 [cluster="System.TimeSpan.FromMinutes(double)", file="XmlNodeConverterTest.cs", label="Entry System.TimeSpan.FromMinutes(double)", span="0-0"];
m8_111 [cluster="Unk.IsNull", file="XmlNodeConverterTest.cs", label="Entry Unk.IsNull", span=""];
m8_221 [cluster="Unk.DeserializeXmlNode", file="XmlNodeConverterTest.cs", label="Entry Unk.DeserializeXmlNode", span=""];
m8_600 [cluster="Newtonsoft.Json.Converters.IsoDateTimeConverter.IsoDateTimeConverter()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Converters.IsoDateTimeConverter.IsoDateTimeConverter()", span="34-34"];
m8_134 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlElement()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlElement()", span="282-282"];
m8_135 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlElement()", file="XmlNodeConverterTest.cs", label="string xml = @''<payload>\r\n    <Country>6</Country>\r\n    <FinancialTransactionApprovalRequestUID>79</FinancialTransactionApprovalRequestUID>\r\n    <TransactionStatus>Approved</TransactionStatus>\r\n    <StatusChangeComment></StatusChangeComment>\r\n    <RequestedBy>Someone</RequestedBy>\r\n</payload>''", span="284-290"];
m8_136 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlElement()", file="XmlNodeConverterTest.cs", label="var xmlDocument = new XmlDocument()", span="292-292"];
m8_137 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlElement()", file="XmlNodeConverterTest.cs", label="xmlDocument.LoadXml(xml)", span="294-294"];
m8_138 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlElement()", file="XmlNodeConverterTest.cs", label="var result = xmlDocument.FirstChild.ChildNodes.Cast<XmlNode>().ToArray()", span="296-296"];
m8_139 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlElement()", file="XmlNodeConverterTest.cs", label="var json = JsonConvert.SerializeObject(result, Formatting.Indented)", span="298-298"];
m8_140 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlElement()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(@''[\r\n  {\r\n    ''''Country'''': ''''6''''\r\n  },\r\n  {\r\n    ''''FinancialTransactionApprovalRequestUID'''': ''''79''''\r\n  },\r\n  {\r\n    ''''TransactionStatus'''': ''''Approved''''\r\n  },\r\n  {\r\n    ''''StatusChangeComment'''': ''''''''\r\n  },\r\n  {\r\n    ''''RequestedBy'''': ''''Someone''''\r\n  }\r\n]'', json)", span="300-316"];
m8_141 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlElement()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlElement()", span="282-282"];
m8_602 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ComplexSingleItemArrayPropertySerialization()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ComplexSingleItemArrayPropertySerialization()", span="1930-1930"];
m8_603 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ComplexSingleItemArrayPropertySerialization()", file="XmlNodeConverterTest.cs", label="TestComplexArrayClass o = new TestComplexArrayClass\r\n            {\r\n                Name = ''Hi'',\r\n                Products = new List<Product>\r\n                {\r\n                    new Product { Name = ''First'' }\r\n                }\r\n            }", span="1932-1939"];
m8_604 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ComplexSingleItemArrayPropertySerialization()", file="XmlNodeConverterTest.cs", label="string output = JsonConvert.SerializeObject(o, new IsoDateTimeConverter())", span="1941-1941"];
m8_605 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ComplexSingleItemArrayPropertySerialization()", file="XmlNodeConverterTest.cs", label="XmlDocument xmlProduct = JsonConvert.DeserializeXmlNode(output, ''test'', true)", span="1943-1943"];
m8_606 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ComplexSingleItemArrayPropertySerialization()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(@''<test>\r\n  <Name>Hi</Name>\r\n  <Products json:Array=''''true'''' xmlns:json=''''http://james.newtonking.com/projects/json''''>\r\n    <Name>First</Name>\r\n    <ExpiryDate>2000-01-01T00:00:00Z</ExpiryDate>\r\n    <Price>0</Price>\r\n    <Sizes />\r\n  </Products>\r\n</test>'', IndentXml(xmlProduct.InnerXml))", span="1945-1953"];
m8_607 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ComplexSingleItemArrayPropertySerialization()", file="XmlNodeConverterTest.cs", label="string output2 = JsonConvert.SerializeXmlNode(xmlProduct.DocumentElement, Formatting.Indented, true)", span="1955-1955"];
m8_608 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ComplexSingleItemArrayPropertySerialization()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(@''{\r\n  ''''Name'''': ''''Hi'''',\r\n  ''''Products'''': [\r\n    {\r\n      ''''Name'''': ''''First'''',\r\n      ''''ExpiryDate'''': ''''2000-01-01T00:00:00Z'''',\r\n      ''''Price'''': ''''0'''',\r\n      ''''Sizes'''': null\r\n    }\r\n  ]\r\n}'', output2)", span="1957-1967"];
m8_609 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ComplexSingleItemArrayPropertySerialization()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ComplexSingleItemArrayPropertySerialization()", span="1930-1930"];
m8_610 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.TestComplexArrayClass.TestComplexArrayClass()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.TestComplexArrayClass.TestComplexArrayClass()", span="1923-1923"];
m8_538 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNoId()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNoId()", span="1677-1677"];
m8_539 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNoId()", file="XmlNodeConverterTest.cs", label="string json = @''{\r\n  ''''$values'''': [\r\n    ''''1'''',\r\n    ''''2'''',\r\n    ''''3'''',\r\n    ''''4'''',\r\n    ''''5''''\r\n  ]\r\n}''", span="1679-1687"];
m8_540 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNoId()", file="XmlNodeConverterTest.cs", label="XmlNode node = JsonConvert.DeserializeXmlNode(json, ''root'')", span="1689-1689"];
m8_545 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNoId()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(json, newJson)", span="1705-1705"];
m8_541 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNoId()", file="XmlNodeConverterTest.cs", label="string xml = GetIndentedInnerXml(node)", span="1690-1690"];
m8_543 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNoId()", file="XmlNodeConverterTest.cs", label="string newJson = JsonConvert.SerializeXmlNode(node, Formatting.Indented, true)", span="1701-1701"];
m8_542 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNoId()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(@''<?xml version=''''1.0'''' encoding=''''utf-16''''?>\r\n<root xmlns:json=''''http://james.newtonking.com/projects/json''''>\r\n  <values xmlns=''''http://james.newtonking.com/projects/json''''>1</values>\r\n  <values xmlns=''''http://james.newtonking.com/projects/json''''>2</values>\r\n  <values xmlns=''''http://james.newtonking.com/projects/json''''>3</values>\r\n  <values xmlns=''''http://james.newtonking.com/projects/json''''>4</values>\r\n  <values xmlns=''''http://james.newtonking.com/projects/json''''>5</values>\r\n</root>'', xml)", span="1692-1699"];
m8_544 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNoId()", file="XmlNodeConverterTest.cs", label="Console.WriteLine(newJson)", span="1703-1703"];
m8_546 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNoId()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNoId()", span="1677-1677"];
m8_133 [cluster="Unk.LoadXml", file="XmlNodeConverterTest.cs", label="Entry Unk.LoadXml", span=""];
m8_645 [cluster="Newtonsoft.Json.JsonSerializer.Create(Newtonsoft.Json.JsonSerializerSettings)", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.JsonSerializer.Create(Newtonsoft.Json.JsonSerializerSettings)", span="574-574"];
m8_180 [cluster="System.TimeSpan.Add(System.TimeSpan)", file="XmlNodeConverterTest.cs", label="Entry System.TimeSpan.Add(System.TimeSpan)", span="0-0"];
m8_99 [cluster="Newtonsoft.Json.Linq.JToken.ToObject<T>(Newtonsoft.Json.JsonSerializer)", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Linq.JToken.ToObject<T>(Newtonsoft.Json.JsonSerializer)", span="2066-2066"];
m8_121 [cluster="Unk.SerializeObject", file="XmlNodeConverterTest.cs", label="Entry Unk.SerializeObject", span=""];
m8_214 [cluster="Unk.IsTrue", file="XmlNodeConverterTest.cs", label="Entry Unk.IsTrue", span=""];
m8_660 [cluster="System.Text.Encoding.GetString(byte[])", file="XmlNodeConverterTest.cs", label="Entry System.Text.Encoding.GetString(byte[])", span="0-0"];
m8_499 [cluster="Newtonsoft.Json.Linq.JObject.Parse(string)", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Linq.JObject.Parse(string)", span="404-404"];
m8_229 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentSerializeIndented()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentSerializeIndented()", span="517-517"];
m8_230 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentSerializeIndented()", file="XmlNodeConverterTest.cs", label="string xml = @''<?xml version=''''1.0'''' standalone=''''no''''?>\r\n<?xml-stylesheet href=''''classic.xsl'''' type=''''text/xml''''?>\r\n<span class=''''vevent''''>\r\n  <a class=''''url'''' href=''''http://www.web2con.com/''''>\r\n    <span class=''''summary''''>Web 2.0 Conference<![CDATA[my escaped text]]></span>\r\n    <abbr class=''''dtstart'''' title=''''2005-10-05''''>October 5</abbr>\r\n    <abbr class=''''dtend'''' title=''''2005-10-08''''>7</abbr>\r\n    <span class=''''location''''>Argent Hotel, San Francisco, CA</span>\r\n  </a>\r\n</span>''", span="519-528"];
m8_231 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentSerializeIndented()", file="XmlNodeConverterTest.cs", label="XmlDocument doc = new XmlDocument()", span="529-529"];
m8_232 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentSerializeIndented()", file="XmlNodeConverterTest.cs", label="doc.LoadXml(xml)", span="530-530"];
m8_233 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentSerializeIndented()", file="XmlNodeConverterTest.cs", label="string jsonText = SerializeXmlNode(doc)", span="532-532"];
m8_234 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentSerializeIndented()", file="XmlNodeConverterTest.cs", label="string expected = @''{\r\n  ''''?xml'''': {\r\n    ''''@version'''': ''''1.0'''',\r\n    ''''@standalone'''': ''''no''''\r\n  },\r\n  ''''?xml-stylesheet'''': ''''href=\''''classic.xsl\'''' type=\''''text/xml\'''''''',\r\n  ''''span'''': {\r\n    ''''@class'''': ''''vevent'''',\r\n    ''''a'''': {\r\n      ''''@class'''': ''''url'''',\r\n      ''''@href'''': ''''http://www.web2con.com/'''',\r\n      ''''span'''': [\r\n        {\r\n          ''''@class'''': ''''summary'''',\r\n          ''''#text'''': ''''Web 2.0 Conference'''',\r\n          ''''#cdata-section'''': ''''my escaped text''''\r\n        },\r\n        {\r\n          ''''@class'''': ''''location'''',\r\n          ''''#text'''': ''''Argent Hotel, San Francisco, CA''''\r\n        }\r\n      ],\r\n      ''''abbr'''': [\r\n        {\r\n          ''''@class'''': ''''dtstart'''',\r\n          ''''@title'''': ''''2005-10-05'''',\r\n          ''''#text'''': ''''October 5''''\r\n        },\r\n        {\r\n          ''''@class'''': ''''dtend'''',\r\n          ''''@title'''': ''''2005-10-08'''',\r\n          ''''#text'''': ''''7''''\r\n        }\r\n      ]\r\n    }\r\n  }\r\n}''", span="533-569"];
m8_235 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentSerializeIndented()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(expected, jsonText)", span="571-571"];
m8_236 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentSerializeIndented()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentSerializeIndented()", span="517-517"];
m8_598 [cluster="Newtonsoft.Json.Tests.TestObjects.Product.Product()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.TestObjects.Product.Product()", span="29-29"];
m8_675 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXNodeDefaultNamespace()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXNodeDefaultNamespace()", span="2124-2124"];
m8_676 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXNodeDefaultNamespace()", file="XmlNodeConverterTest.cs", label="string xaml = @''<Grid xmlns=''''http://schemas.microsoft.com/winfx/2006/xaml/presentation'''' xmlns:x=''''http://schemas.microsoft.com/winfx/2006/xaml'''' xmlns:toolkit=''''clr-namespace:Microsoft.Phone.Controls;assembly=Microsoft.Phone.Controls.Toolkit'''' Style=''''{StaticResource trimFormGrid}'''' x:Name=''''TrimObjectForm''''>\r\n  <Grid.ColumnDefinitions>\r\n    <ColumnDefinition Width=''''63*'''' />\r\n    <ColumnDefinition Width=''''320*'''' />\r\n  </Grid.ColumnDefinitions>\r\n  <Grid.RowDefinitions xmlns=''''''''>\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n  </Grid.RowDefinitions>\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding TypedTitle, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordTypedTitle'''' Grid.Column=''''1'''' Grid.Row=''''0'''' xmlns='''''''' />\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding ExternalReference, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordExternalReference'''' Grid.Column=''''1'''' Grid.Row=''''1'''' xmlns='''''''' />\r\n  <toolkit:DatePicker Style=''''{StaticResource trimFormGrid_DP}'''' Value=''''{Binding DateCreated, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordDateCreated'''' Grid.Column=''''1'''' Grid.Row=''''2'''' />\r\n  <toolkit:DatePicker Style=''''{StaticResource trimFormGrid_DP}'''' Value=''''{Binding DateDue, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordDateDue'''' Grid.Column=''''1'''' Grid.Row=''''3'''' />\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding Author, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordAuthor'''' Grid.Column=''''1'''' Grid.Row=''''4'''' xmlns='''''''' />\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding Container, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordContainer'''' Grid.Column=''''1'''' Grid.Row=''''5'''' xmlns='''''''' />\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding IsEnclosed, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordIsEnclosed'''' Grid.Column=''''1'''' Grid.Row=''''6'''' xmlns='''''''' />\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding Assignee, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordAssignee'''' Grid.Column=''''1'''' Grid.Row=''''7'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Title (Free Text Part)'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''0'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''External ID'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''1'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Date Created'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''2'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Date Due'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''3'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Author'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''4'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Container'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''5'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Enclosed?'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''6'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Assignee'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''7'''' xmlns='''''''' />\r\n</Grid>''", span="2126-2157"];
m8_677 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXNodeDefaultNamespace()", file="XmlNodeConverterTest.cs", label="string json = JsonConvert.SerializeXNode(XDocument.Parse(xaml), Formatting.Indented)", span="2159-2159"];
m8_678 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXNodeDefaultNamespace()", file="XmlNodeConverterTest.cs", label="string expectedJson = @''{\r\n  ''''Grid'''': {\r\n    ''''@xmlns'''': ''''http://schemas.microsoft.com/winfx/2006/xaml/presentation'''',\r\n    ''''@xmlns:x'''': ''''http://schemas.microsoft.com/winfx/2006/xaml'''',\r\n    ''''@xmlns:toolkit'''': ''''clr-namespace:Microsoft.Phone.Controls;assembly=Microsoft.Phone.Controls.Toolkit'''',\r\n    ''''@Style'''': ''''{StaticResource trimFormGrid}'''',\r\n    ''''@x:Name'''': ''''TrimObjectForm'''',\r\n    ''''Grid.ColumnDefinitions'''': {\r\n      ''''ColumnDefinition'''': [\r\n        {\r\n          ''''@Width'''': ''''63*''''\r\n        },\r\n        {\r\n          ''''@Width'''': ''''320*''''\r\n        }\r\n      ]\r\n    },\r\n    ''''Grid.RowDefinitions'''': {\r\n      ''''@xmlns'''': '''''''',\r\n      ''''RowDefinition'''': [\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null\r\n      ]\r\n    },\r\n    ''''TextBox'''': [\r\n      {\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_TB}'''',\r\n        ''''@Text'''': ''''{Binding TypedTitle, Converter={StaticResource trimPropertyConverter}}'''',\r\n        ''''@Name'''': ''''RecordTypedTitle'''',\r\n        ''''@Grid.Column'''': ''''1'''',\r\n        ''''@Grid.Row'''': ''''0'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_TB}'''',\r\n        ''''@Text'''': ''''{Binding ExternalReference, Converter={StaticResource trimPropertyConverter}}'''',\r\n        ''''@Name'''': ''''RecordExternalReference'''',\r\n        ''''@Grid.Column'''': ''''1'''',\r\n        ''''@Grid.Row'''': ''''1'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_TB}'''',\r\n        ''''@Text'''': ''''{Binding Author, Converter={StaticResource trimPropertyConverter}}'''',\r\n        ''''@Name'''': ''''RecordAuthor'''',\r\n        ''''@Grid.Column'''': ''''1'''',\r\n        ''''@Grid.Row'''': ''''4'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_TB}'''',\r\n        ''''@Text'''': ''''{Binding Container, Converter={StaticResource trimPropertyConverter}}'''',\r\n        ''''@Name'''': ''''RecordContainer'''',\r\n        ''''@Grid.Column'''': ''''1'''',\r\n        ''''@Grid.Row'''': ''''5'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_TB}'''',\r\n        ''''@Text'''': ''''{Binding IsEnclosed, Converter={StaticResource trimPropertyConverter}}'''',\r\n        ''''@Name'''': ''''RecordIsEnclosed'''',\r\n        ''''@Grid.Column'''': ''''1'''',\r\n        ''''@Grid.Row'''': ''''6'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_TB}'''',\r\n        ''''@Text'''': ''''{Binding Assignee, Converter={StaticResource trimPropertyConverter}}'''',\r\n        ''''@Name'''': ''''RecordAssignee'''',\r\n        ''''@Grid.Column'''': ''''1'''',\r\n        ''''@Grid.Row'''': ''''7'''',\r\n        ''''@xmlns'''': ''''''''\r\n      }\r\n    ],\r\n    ''''toolkit:DatePicker'''': [\r\n      {\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_DP}'''',\r\n        ''''@Value'''': ''''{Binding DateCreated, Converter={StaticResource trimPropertyConverter}}'''',\r\n        ''''@Name'''': ''''RecordDateCreated'''',\r\n        ''''@Grid.Column'''': ''''1'''',\r\n        ''''@Grid.Row'''': ''''2''''\r\n      },\r\n      {\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_DP}'''',\r\n        ''''@Value'''': ''''{Binding DateDue, Converter={StaticResource trimPropertyConverter}}'''',\r\n        ''''@Name'''': ''''RecordDateDue'''',\r\n        ''''@Grid.Column'''': ''''1'''',\r\n        ''''@Grid.Row'''': ''''3''''\r\n      }\r\n    ],\r\n    ''''TextBlock'''': [\r\n      {\r\n        ''''@Grid.Column'''': ''''0'''',\r\n        ''''@Text'''': ''''Title (Free Text Part)'''',\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_LBL}'''',\r\n        ''''@Grid.Row'''': ''''0'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Grid.Column'''': ''''0'''',\r\n        ''''@Text'''': ''''External ID'''',\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_LBL}'''',\r\n        ''''@Grid.Row'''': ''''1'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Grid.Column'''': ''''0'''',\r\n        ''''@Text'''': ''''Date Created'''',\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_LBL}'''',\r\n        ''''@Grid.Row'''': ''''2'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Grid.Column'''': ''''0'''',\r\n        ''''@Text'''': ''''Date Due'''',\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_LBL}'''',\r\n        ''''@Grid.Row'''': ''''3'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Grid.Column'''': ''''0'''',\r\n        ''''@Text'''': ''''Author'''',\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_LBL}'''',\r\n        ''''@Grid.Row'''': ''''4'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Grid.Column'''': ''''0'''',\r\n        ''''@Text'''': ''''Container'''',\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_LBL}'''',\r\n        ''''@Grid.Row'''': ''''5'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Grid.Column'''': ''''0'''',\r\n        ''''@Text'''': ''''Enclosed?'''',\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_LBL}'''',\r\n        ''''@Grid.Row'''': ''''6'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Grid.Column'''': ''''0'''',\r\n        ''''@Text'''': ''''Assignee'''',\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_LBL}'''',\r\n        ''''@Grid.Row'''': ''''7'''',\r\n        ''''@xmlns'''': ''''''''\r\n      }\r\n    ]\r\n  }\r\n}''", span="2161-2316"];
m8_679 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXNodeDefaultNamespace()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(expectedJson, json)", span="2318-2318"];
m8_680 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXNodeDefaultNamespace()", file="XmlNodeConverterTest.cs", label="XNode node = JsonConvert.DeserializeXNode(json)", span="2320-2320"];
m8_681 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXNodeDefaultNamespace()", file="XmlNodeConverterTest.cs", label="string xaml2 = node.ToString()", span="2322-2322"];
m8_682 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXNodeDefaultNamespace()", file="XmlNodeConverterTest.cs", label="string expectedXaml = @''<Grid xmlns=''''http://schemas.microsoft.com/winfx/2006/xaml/presentation'''' xmlns:x=''''http://schemas.microsoft.com/winfx/2006/xaml'''' xmlns:toolkit=''''clr-namespace:Microsoft.Phone.Controls;assembly=Microsoft.Phone.Controls.Toolkit'''' Style=''''{StaticResource trimFormGrid}'''' x:Name=''''TrimObjectForm''''>\r\n  <Grid.ColumnDefinitions>\r\n    <ColumnDefinition Width=''''63*'''' />\r\n    <ColumnDefinition Width=''''320*'''' />\r\n  </Grid.ColumnDefinitions>\r\n  <Grid.RowDefinitions xmlns=''''''''>\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n  </Grid.RowDefinitions>\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding TypedTitle, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordTypedTitle'''' Grid.Column=''''1'''' Grid.Row=''''0'''' xmlns='''''''' />\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding ExternalReference, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordExternalReference'''' Grid.Column=''''1'''' Grid.Row=''''1'''' xmlns='''''''' />\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding Author, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordAuthor'''' Grid.Column=''''1'''' Grid.Row=''''4'''' xmlns='''''''' />\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding Container, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordContainer'''' Grid.Column=''''1'''' Grid.Row=''''5'''' xmlns='''''''' />\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding IsEnclosed, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordIsEnclosed'''' Grid.Column=''''1'''' Grid.Row=''''6'''' xmlns='''''''' />\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding Assignee, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordAssignee'''' Grid.Column=''''1'''' Grid.Row=''''7'''' xmlns='''''''' />\r\n  <toolkit:DatePicker Style=''''{StaticResource trimFormGrid_DP}'''' Value=''''{Binding DateCreated, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordDateCreated'''' Grid.Column=''''1'''' Grid.Row=''''2'''' />\r\n  <toolkit:DatePicker Style=''''{StaticResource trimFormGrid_DP}'''' Value=''''{Binding DateDue, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordDateDue'''' Grid.Column=''''1'''' Grid.Row=''''3'''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Title (Free Text Part)'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''0'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''External ID'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''1'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Date Created'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''2'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Date Due'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''3'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Author'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''4'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Container'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''5'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Enclosed?'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''6'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Assignee'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''7'''' xmlns='''''''' />\r\n</Grid>''", span="2324-2355"];
m8_683 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXNodeDefaultNamespace()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(expectedXaml, xaml2)", span="2357-2357"];
m8_684 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXNodeDefaultNamespace()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXNodeDefaultNamespace()", span="2124-2124"];
m8_648 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializingBooleanValues()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializingBooleanValues()", span="2090-2090"];
m8_649 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializingBooleanValues()", file="XmlNodeConverterTest.cs", label="MemoryStream ms = new MemoryStream(System.Text.Encoding.UTF8.GetBytes(@''{root:{''''@booleanType'''':true}}''))", span="2092-2092"];
m8_650 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializingBooleanValues()", file="XmlNodeConverterTest.cs", label="MemoryStream xml = new MemoryStream()", span="2093-2093"];
m8_651 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializingBooleanValues()", file="XmlNodeConverterTest.cs", label="JsonBodyToSoapXml(ms, xml)", span="2095-2095"];
m8_652 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializingBooleanValues()", file="XmlNodeConverterTest.cs", label="string xmlString = System.Text.Encoding.UTF8.GetString(xml.ToArray())", span="2097-2097"];
m8_653 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializingBooleanValues()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(@''﻿<?xml version=''''1.0'''' encoding=''''utf-8''''?><root booleanType=''''true'''' />'', xmlString)", span="2099-2099"];
m8_654 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializingBooleanValues()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializingBooleanValues()", span="2090-2090"];
m8_873 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeDateInElementText()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeDateInElementText()", span="2957-2957"];
m8_874 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeDateInElementText()", file="XmlNodeConverterTest.cs", label="Model model = new Model()", span="2959-2959"];
m8_875 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeDateInElementText()", file="XmlNodeConverterTest.cs", label="model.Document = new XElement(''Value'', new XAttribute(''foo'', ''bar''))\r\n            {\r\n                Value = ''2001-01-01T11:11:11''\r\n            }", span="2960-2963"];
m8_881 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeDateInElementText()", file="XmlNodeConverterTest.cs", label="serializer.Serialize(jsonWriter, model)", span="2976-2976"];
m8_876 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeDateInElementText()", file="XmlNodeConverterTest.cs", label="var serializer = JsonSerializer.Create(new JsonSerializerSettings\r\n            {\r\n                Converters = new List<JsonConverter>(new[] { new XmlNodeConverter() })\r\n            })", span="2965-2968"];
m8_877 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeDateInElementText()", file="XmlNodeConverterTest.cs", label="var json = new StringBuilder(1024)", span="2970-2970"];
m8_885 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeDateInElementText()", file="XmlNodeConverterTest.cs", label="var document = (XDocument)serializer.Deserialize(jsonReader, typeof(XDocument))", span="2984-2984"];
m8_878 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeDateInElementText()", file="XmlNodeConverterTest.cs", label="var stringWriter = new StringWriter(json, CultureInfo.InvariantCulture)", span="2972-2972"];
m8_882 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeDateInElementText()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(@''{''''Document'''':{''''Value'''':{''''@foo'''':''''bar'''',''''#text'''':''''2001-01-01T11:11:11''''}}}'', json.ToString())", span="2978-2978"];
m8_883 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeDateInElementText()", file="XmlNodeConverterTest.cs", label="var stringReader = new StringReader(json.ToString())", span="2981-2981"];
m8_879 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeDateInElementText()", file="XmlNodeConverterTest.cs", label="var jsonWriter = new JsonTextWriter(stringWriter)", span="2973-2973"];
m8_880 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeDateInElementText()", file="XmlNodeConverterTest.cs", label="jsonWriter.Formatting = Formatting.None", span="2975-2975"];
m8_884 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeDateInElementText()", file="XmlNodeConverterTest.cs", label="var jsonReader = new JsonTextReader(stringReader)", span="2982-2982"];
m8_886 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeDateInElementText()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(@''<Document>\r\n  <Value foo=''''bar''''>2001-01-01T11:11:11</Value>\r\n</Document>'', document.ToString())", span="2986-2988"];
m8_887 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeDateInElementText()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeDateInElementText()", span="2957-2957"];
m8_205 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXmlWithNamespaceInChildrenAndNoValueInChildren()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXmlWithNamespaceInChildrenAndNoValueInChildren()", span="460-460"];
m8_206 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXmlWithNamespaceInChildrenAndNoValueInChildren()", file="XmlNodeConverterTest.cs", label="var xmlString = @''<root>\r\n                              <b xmlns='http://www.example.com/ns'/>\r\n                              <c>AAA</c>\r\n                              <test>adad</test>\r\n                              </root>''", span="462-466"];
m8_207 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXmlWithNamespaceInChildrenAndNoValueInChildren()", file="XmlNodeConverterTest.cs", label="var xml = XElement.Parse(xmlString)", span="468-468"];
m8_208 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXmlWithNamespaceInChildrenAndNoValueInChildren()", file="XmlNodeConverterTest.cs", label="var json1 = JsonConvert.SerializeXNode(xml)", span="470-470"];
m8_210 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXmlWithNamespaceInChildrenAndNoValueInChildren()", file="XmlNodeConverterTest.cs", label="var equals = XElement.DeepEquals(xmlBack, xml)", span="473-473"];
m8_209 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXmlWithNamespaceInChildrenAndNoValueInChildren()", file="XmlNodeConverterTest.cs", label="var xmlBack = JsonConvert.DeserializeObject<XElement>(json1)", span="471-471"];
m8_211 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXmlWithNamespaceInChildrenAndNoValueInChildren()", file="XmlNodeConverterTest.cs", label="Assert.IsTrue(equals)", span="474-474"];
m8_212 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXmlWithNamespaceInChildrenAndNoValueInChildren()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXmlWithNamespaceInChildrenAndNoValueInChildren()", span="460-460"];
m8_725 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXElementWithNamespaceInChildrenRootDontHaveNameSpace()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXElementWithNamespaceInChildrenRootDontHaveNameSpace()", span="2671-2671"];
m8_726 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXElementWithNamespaceInChildrenRootDontHaveNameSpace()", file="XmlNodeConverterTest.cs", label="var xmlString = @''<root>\r\n                              <b xmlns='http://www.example.com/ns'>Asd</b>\r\n                              <c>AAA</c>\r\n                              <test>adad</test>\r\n                              </root>''", span="2673-2677"];
m8_727 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXElementWithNamespaceInChildrenRootDontHaveNameSpace()", file="XmlNodeConverterTest.cs", label="var xml = XElement.Parse(xmlString)", span="2679-2679"];
m8_728 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXElementWithNamespaceInChildrenRootDontHaveNameSpace()", file="XmlNodeConverterTest.cs", label="var json1 = JsonConvert.SerializeXNode(xml)", span="2681-2681"];
m8_730 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXElementWithNamespaceInChildrenRootDontHaveNameSpace()", file="XmlNodeConverterTest.cs", label="var equals = XElement.DeepEquals(xmlBack, xml)", span="2684-2684"];
m8_729 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXElementWithNamespaceInChildrenRootDontHaveNameSpace()", file="XmlNodeConverterTest.cs", label="var xmlBack = JsonConvert.DeserializeObject<XElement>(json1)", span="2682-2682"];
m8_731 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXElementWithNamespaceInChildrenRootDontHaveNameSpace()", file="XmlNodeConverterTest.cs", label="Assert.IsTrue(equals)", span="2685-2685"];
m8_732 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXElementWithNamespaceInChildrenRootDontHaveNameSpace()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXElementWithNamespaceInChildrenRootDontHaveNameSpace()", span="2671-2671"];
m8_276 [cluster="Unk.CreateAttribute", file="XmlNodeConverterTest.cs", label="Entry Unk.CreateAttribute", span=""];
m8_120 [cluster="Unk.Parse", file="XmlNodeConverterTest.cs", label="Entry Unk.Parse", span=""];
m8_123 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXmlDocument()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXmlDocument()", span="254-254"];
m8_124 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXmlDocument()", file="XmlNodeConverterTest.cs", label="string xml = @''<result xp_0:end=''''2014-08-15 13:12:11.9184'''' xp_0:start=''''2014-08-15 13:11:49.3140'''' xp_0:time_diff=''''22604.3836'''' xmlns:xp_0=''''Test1'''' p2:end=''''2014-08-15 13:13:49.5522'''' p2:start=''''2014-08-15 13:13:49.0268'''' p2:time_diff=''''525.4646'''' xmlns:p2=''''Test2'''' />''", span="256-256"];
m8_125 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXmlDocument()", file="XmlNodeConverterTest.cs", label="XmlDocument d = new XmlDocument()", span="258-258"];
m8_126 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXmlDocument()", file="XmlNodeConverterTest.cs", label="d.LoadXml(xml)", span="259-259"];
m8_130 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXmlDocument()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(xml, doc.OuterXml)", span="278-278"];
m8_127 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXmlDocument()", file="XmlNodeConverterTest.cs", label="string json = JsonConvert.SerializeObject(d, Formatting.Indented)", span="261-261"];
m8_128 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXmlDocument()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(@''{\r\n  ''''result'''': {\r\n    ''''@xp_0:end'''': ''''2014-08-15 13:12:11.9184'''',\r\n    ''''@xp_0:start'''': ''''2014-08-15 13:11:49.3140'''',\r\n    ''''@xp_0:time_diff'''': ''''22604.3836'''',\r\n    ''''@xmlns:xp_0'''': ''''Test1'''',\r\n    ''''@p2:end'''': ''''2014-08-15 13:13:49.5522'''',\r\n    ''''@p2:start'''': ''''2014-08-15 13:13:49.0268'''',\r\n    ''''@p2:time_diff'''': ''''525.4646'''',\r\n    ''''@xmlns:p2'''': ''''Test2''''\r\n  }\r\n}'', json)", span="263-274"];
m8_129 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXmlDocument()", file="XmlNodeConverterTest.cs", label="XmlDocument doc = JsonConvert.DeserializeObject<XmlDocument>(json)", span="276-276"];
m8_131 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXmlDocument()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXmlDocument()", span="254-254"];
m8_806 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Local()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Local()", span="2844-2844"];
m8_807 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Local()", file="XmlNodeConverterTest.cs", label="DateTime dt = DateTime.Parse(''2014-01-23T00:00:00+01:00'')", span="2846-2846"];
m8_808 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Local()", file="XmlNodeConverterTest.cs", label="string json = @''{''''CreatedDate'''': ''''2014-01-23T00:00:00+01:00''''}''", span="2848-2848"];
m8_810 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Local()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(dt.ToString(''yyyy-MM-ddTHH:mm:sszzzzzzz'', CultureInfo.InvariantCulture), dxml.Root.Element(''CreatedDate'').Value)", span="2850-2850"];
m8_809 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Local()", file="XmlNodeConverterTest.cs", label="var dxml = JsonConvert.DeserializeXNode(json, ''root'')", span="2849-2849"];
m8_811 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Local()", file="XmlNodeConverterTest.cs", label="Console.WriteLine(''DateTimeToXml_Local: '' + dxml.Root.Element(''CreatedDate'').Value)", span="2852-2852"];
m8_812 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Local()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Local()", span="2844-2844"];
m8_479 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeComment()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeComment()", span="1415-1415"];
m8_480 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeComment()", file="XmlNodeConverterTest.cs", label="string xml = @''<span class=''''vevent''''>\r\n  <a class=''''url'''' href=''''http://www.web2con.com/''''><!-- Hi --><span>Text</span></a><!-- Hi! -->\r\n</span>''", span="1417-1419"];
m8_481 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeComment()", file="XmlNodeConverterTest.cs", label="XmlDocument doc = new XmlDocument()", span="1420-1420"];
m8_482 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeComment()", file="XmlNodeConverterTest.cs", label="doc.LoadXml(xml)", span="1421-1421"];
m8_483 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeComment()", file="XmlNodeConverterTest.cs", label="string jsonText = SerializeXmlNode(doc)", span="1423-1423"];
m8_484 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeComment()", file="XmlNodeConverterTest.cs", label="string expected = @''{\r\n  ''''span'''': {\r\n    ''''@class'''': ''''vevent'''',\r\n    ''''a'''': {\r\n      ''''@class'''': ''''url'''',\r\n      ''''@href'''': ''''http://www.web2con.com/''''/* Hi */,\r\n      ''''span'''': ''''Text''''\r\n    }/* Hi! */\r\n  }\r\n}''", span="1425-1434"];
m8_485 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeComment()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(expected, jsonText)", span="1436-1436"];
m8_486 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeComment()", file="XmlNodeConverterTest.cs", label="XmlDocument newDoc = (XmlDocument)DeserializeXmlNode(jsonText)", span="1438-1438"];
m8_487 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeComment()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(@''<span class=''''vevent''''><a class=''''url'''' href=''''http://www.web2con.com/''''><!-- Hi --><span>Text</span></a><!-- Hi! --></span>'', newDoc.InnerXml)", span="1439-1439"];
m8_488 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeComment()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeComment()", span="1415-1415"];
m8_769 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Serialize_XDocument_NoRoot()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Serialize_XDocument_NoRoot()", span="2783-2783"];
m8_770 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Serialize_XDocument_NoRoot()", file="XmlNodeConverterTest.cs", label="XDocument d = new XDocument()", span="2785-2785"];
m8_771 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Serialize_XDocument_NoRoot()", file="XmlNodeConverterTest.cs", label="string json = JsonConvert.SerializeXNode(d)", span="2787-2787"];
m8_772 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Serialize_XDocument_NoRoot()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(@''{}'', json)", span="2789-2789"];
m8_773 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Serialize_XDocument_NoRoot()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Serialize_XDocument_NoRoot()", span="2783-2783"];
m8_67 [cluster="System.IO.StringWriter.ToString()", file="XmlNodeConverterTest.cs", label="Entry System.IO.StringWriter.ToString()", span="0-0"];
m8_320 [cluster="Unk.Save", file="XmlNodeConverterTest.cs", label="Entry Unk.Save", span=""];
m8_48 [cluster="XmlNodeConverter.cstr", file="XmlNodeConverterTest.cs", label="Entry XmlNodeConverter.cstr", span=""];
m8_353 [cluster="Unk.WriteTo", file="XmlNodeConverterTest.cs", label="Entry Unk.WriteTo", span=""];
m8_277 [cluster="Unk.SetAttributeNode", file="XmlNodeConverterTest.cs", label="Entry Unk.SetAttributeNode", span=""];
m8_619 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmtpyElementWithArrayAttributeShouldWriteAttributes()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmtpyElementWithArrayAttributeShouldWriteAttributes()", span="2006-2006"];
m8_620 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmtpyElementWithArrayAttributeShouldWriteAttributes()", file="XmlNodeConverterTest.cs", label="string xml = @''<?xml version=''''1.0'''' encoding=''''utf-8'''' ?>\r\n<root xmlns:json=''''http://james.newtonking.com/projects/json''''>\r\n<A>\r\n<B name=''''sample'''' json:Array=''''true''''/>\r\n<C></C>\r\n<C></C>\r\n</A>\r\n</root>''", span="2008-2015"];
m8_621 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmtpyElementWithArrayAttributeShouldWriteAttributes()", file="XmlNodeConverterTest.cs", label="XmlDocument d = new XmlDocument()", span="2017-2017"];
m8_622 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmtpyElementWithArrayAttributeShouldWriteAttributes()", file="XmlNodeConverterTest.cs", label="d.LoadXml(xml)", span="2018-2018"];
m8_623 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmtpyElementWithArrayAttributeShouldWriteAttributes()", file="XmlNodeConverterTest.cs", label="string json = JsonConvert.SerializeXmlNode(d, Formatting.Indented)", span="2020-2020"];
m8_624 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmtpyElementWithArrayAttributeShouldWriteAttributes()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(@''{\r\n  ''''?xml'''': {\r\n    ''''@version'''': ''''1.0'''',\r\n    ''''@encoding'''': ''''utf-8''''\r\n  },\r\n  ''''root'''': {\r\n    ''''A'''': {\r\n      ''''B'''': [\r\n        {\r\n          ''''@name'''': ''''sample''''\r\n        }\r\n      ],\r\n      ''''C'''': [\r\n        '''''''',\r\n        ''''''''\r\n      ]\r\n    }\r\n  }\r\n}'', json)", span="2022-2040"];
m8_625 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmtpyElementWithArrayAttributeShouldWriteAttributes()", file="XmlNodeConverterTest.cs", label="XmlDocument d2 = JsonConvert.DeserializeXmlNode(json)", span="2042-2042"];
m8_626 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmtpyElementWithArrayAttributeShouldWriteAttributes()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(@''<?xml version=''''1.0'''' encoding=''''utf-8''''?>\r\n<root>\r\n  <A>\r\n    <B name=''''sample'''' />\r\n    <C></C>\r\n    <C></C>\r\n  </A>\r\n</root>'', ToStringWithDeclaration(d2, true))", span="2044-2051"];
m8_627 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmtpyElementWithArrayAttributeShouldWriteAttributes()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmtpyElementWithArrayAttributeShouldWriteAttributes()", span="2006-2006"];
m8_647 [cluster="Newtonsoft.Json.JsonSerializer.Deserialize(Newtonsoft.Json.JsonReader, System.Type)", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.JsonSerializer.Deserialize(Newtonsoft.Json.JsonReader, System.Type)", span="850-850"];
m8_672 [cluster="Unk.Add", file="XmlNodeConverterTest.cs", label="Entry Unk.Add", span=""];
m8_840 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeElementExplicitAttributeNamespace()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeElementExplicitAttributeNamespace()", span="2900-2900"];
m8_841 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeElementExplicitAttributeNamespace()", file="XmlNodeConverterTest.cs", label="var original = XElement.Parse(''<MyElement xmlns=\''http://example.com\'' />'')", span="2902-2902"];
m8_842 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeElementExplicitAttributeNamespace()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(@''<MyElement xmlns=''''http://example.com'''' />'', original.ToString())", span="2903-2903"];
m8_843 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeElementExplicitAttributeNamespace()", file="XmlNodeConverterTest.cs", label="var json = JsonConvert.SerializeObject(original)", span="2905-2905"];
m8_844 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeElementExplicitAttributeNamespace()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(@''{''''MyElement'''':{''''@xmlns'''':''''http://example.com''''}}'', json)", span="2906-2906"];
m8_845 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeElementExplicitAttributeNamespace()", file="XmlNodeConverterTest.cs", label="var deserialized = JsonConvert.DeserializeObject<XElement>(json)", span="2908-2908"];
m8_846 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeElementExplicitAttributeNamespace()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(@''<MyElement xmlns=''''http://example.com'''' />'', deserialized.ToString())", span="2909-2909"];
m8_847 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeElementExplicitAttributeNamespace()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeElementExplicitAttributeNamespace()", span="2900-2900"];
m8_98 [cluster="Newtonsoft.Json.JsonSerializer.CreateDefault(Newtonsoft.Json.JsonSerializerSettings)", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.JsonSerializer.CreateDefault(Newtonsoft.Json.JsonSerializerSettings)", span="615-615"];
m8_213 [cluster="Unk.DeepEquals", file="XmlNodeConverterTest.cs", label="Entry Unk.DeepEquals", span=""];
m8_279 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes_Encoding()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes_Encoding()", span="654-654"];
m8_280 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes_Encoding()", file="XmlNodeConverterTest.cs", label="XmlNode node = DeserializeXmlNode(@''{\r\n  ''''xs!:Choice!'''': {\r\n    ''''@msdata:IsDataSet!'''': '''''''',\r\n    ''''@xmlns:xs!'''': ''''http://www.w3.org/2001/XMLSchema'''',\r\n    ''''@xmlns:msdata'''': ''''urn:schemas-microsoft-com:xml-msdata'''',\r\n    ''''?xml-stylesheet'''': ''''href=\''''classic.xsl\'''' type=\''''text/xml\'''''''',\r\n    ''''#cdata-section'''': ''''<Kiwi>true</Kiwi>''''\r\n  }\r\n}'')", span="656-664"];
m8_281 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes_Encoding()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(@''<xs_x0021_:Choice_x0021_ msdata:IsDataSet_x0021_='''''''' xmlns:xs_x0021_=''''http://www.w3.org/2001/XMLSchema'''' xmlns:msdata=''''urn:schemas-microsoft-com:xml-msdata''''><?xml-stylesheet href=''''classic.xsl'''' type=''''text/xml''''?><![CDATA[<Kiwi>true</Kiwi>]]></xs_x0021_:Choice_x0021_>'', node.InnerXml)", span="666-666"];
m8_282 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes_Encoding()", file="XmlNodeConverterTest.cs", label="string json = SerializeXmlNode(node)", span="668-668"];
m8_283 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes_Encoding()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(@''{\r\n  ''''xs!:Choice!'''': {\r\n    ''''@msdata:IsDataSet!'''': '''''''',\r\n    ''''@xmlns:xs!'''': ''''http://www.w3.org/2001/XMLSchema'''',\r\n    ''''@xmlns:msdata'''': ''''urn:schemas-microsoft-com:xml-msdata'''',\r\n    ''''?xml-stylesheet'''': ''''href=\''''classic.xsl\'''' type=\''''text/xml\'''''''',\r\n    ''''#cdata-section'''': ''''<Kiwi>true</Kiwi>''''\r\n  }\r\n}'', json)", span="670-678"];
m8_284 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes_Encoding()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes_Encoding()", span="654-654"];
m8_97 [cluster="Newtonsoft.Json.JsonSerializerSettings.JsonSerializerSettings()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.JsonSerializerSettings.JsonSerializerSettings()", span="428-428"];
m8_95 [cluster="Newtonsoft.Json.Linq.JObject.JObject()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Linq.JObject.JObject()", span="87-87"];
m8_570 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNull()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNull()", span="1781-1781"];
m8_571 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNull()", file="XmlNodeConverterTest.cs", label="string json = @''{\r\n  ''''$id'''': ''''1'''',\r\n  ''''$values'''': null\r\n}''", span="1783-1786"];
m8_572 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNull()", file="XmlNodeConverterTest.cs", label="XmlNode node = JsonConvert.DeserializeXmlNode(json, ''root'')", span="1788-1788"];
m8_576 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNull()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(json, newJson)", span="1798-1798"];
m8_573 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNull()", file="XmlNodeConverterTest.cs", label="string xml = GetIndentedInnerXml(node)", span="1789-1789"];
m8_575 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNull()", file="XmlNodeConverterTest.cs", label="string newJson = JsonConvert.SerializeXmlNode(node, Formatting.Indented, true)", span="1796-1796"];
m8_574 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNull()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(@''<?xml version=''''1.0'''' encoding=''''utf-16''''?>\r\n<root xmlns:json=''''http://james.newtonking.com/projects/json'''' json:id=''''1''''>\r\n  <values xmlns=''''http://james.newtonking.com/projects/json'''' />\r\n</root>'', xml)", span="1791-1794"];
m8_577 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNull()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNull()", span="1781-1781"];
m8_15 [cluster="Unk.SerializeXmlNode", file="XmlNodeConverterTest.cs", label="Entry Unk.SerializeXmlNode", span=""];
m8_383 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RootObjectMultipleProperties()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RootObjectMultipleProperties()", span="1059-1059"];
m8_384 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RootObjectMultipleProperties()", file="XmlNodeConverterTest.cs", label="ExceptionAssert.Throws<JsonSerializationException>(\r\n                () => { XmlDocument newDoc = (XmlDocument)JsonConvert.DeserializeXmlNode(@''{Prop1:1,Prop2:2}''); },\r\n                ''JSON root object has multiple properties. The root object must have a single property in order to create a valid XML document. Consider specifying a DeserializeRootElementName. Path 'Prop2', line 1, position 15.'')", span="1061-1063"];
m8_385 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RootObjectMultipleProperties()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RootObjectMultipleProperties()", span="1059-1059"];
m8_271 [cluster="Unk.Element", file="XmlNodeConverterTest.cs", label="Entry Unk.Element", span=""];
m8_64 [cluster="Unk.Read", file="XmlNodeConverterTest.cs", label="Entry Unk.Read", span=""];
m8_362 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmptyNode()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmptyNode()", span="995-995"];
m8_363 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmptyNode()", file="XmlNodeConverterTest.cs", label="string xml = @''<?xml version=''''1.0'''' standalone=''''no''''?>\r\n			<root>\r\n			  <person id=''''1''''>\r\n				<name>Alan</name>\r\n				<url />\r\n			  </person>\r\n			  <person id=''''2''''>\r\n				<name>Louis</name>\r\n				<url>http://www.yahoo.com</url>\r\n			  </person>\r\n			</root>''", span="997-1007"];
m8_364 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmptyNode()", file="XmlNodeConverterTest.cs", label="XmlDocument doc = new XmlDocument()", span="1009-1009"];
m8_365 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmptyNode()", file="XmlNodeConverterTest.cs", label="doc.LoadXml(xml)", span="1010-1010"];
m8_366 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmptyNode()", file="XmlNodeConverterTest.cs", label="string jsonText = SerializeXmlNode(doc)", span="1012-1012"];
m8_369 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmptyNode()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(doc.InnerXml, newDoc.InnerXml)", span="1037-1037"];
m8_367 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmptyNode()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(@''{\r\n  ''''?xml'''': {\r\n    ''''@version'''': ''''1.0'''',\r\n    ''''@standalone'''': ''''no''''\r\n  },\r\n  ''''root'''': {\r\n    ''''person'''': [\r\n      {\r\n        ''''@id'''': ''''1'''',\r\n        ''''name'''': ''''Alan'''',\r\n        ''''url'''': null\r\n      },\r\n      {\r\n        ''''@id'''': ''''2'''',\r\n        ''''name'''': ''''Louis'''',\r\n        ''''url'''': ''''http://www.yahoo.com''''\r\n      }\r\n    ]\r\n  }\r\n}'', jsonText)", span="1014-1033"];
m8_368 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmptyNode()", file="XmlNodeConverterTest.cs", label="XmlDocument newDoc = (XmlDocument)DeserializeXmlNode(jsonText)", span="1035-1035"];
m8_370 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmptyNode()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmptyNode()", span="995-995"];
m8_312 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Utf8StringWriter.Utf8StringWriter(System.Text.StringBuilder)", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Utf8StringWriter.Utf8StringWriter(System.Text.StringBuilder)", span="807-807"];
m8_313 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Utf8StringWriter.Utf8StringWriter(System.Text.StringBuilder)", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Utf8StringWriter.Utf8StringWriter(System.Text.StringBuilder)", span="807-807"];
m8_163 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DecimalContainer.DecimalContainer()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DecimalContainer.DecimalContainer()", span="357-357"];
m8_143 [cluster="Unk.ToArray", file="XmlNodeConverterTest.cs", label="Entry Unk.ToArray", span=""];
m8_528 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", file="XmlNodeConverterTest.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0"];
m8_24 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string)", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string)", span="97-97"];
m8_25 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string)", file="XmlNodeConverterTest.cs", label="return DeserializeXmlNode(json, null);", span="99-99"];
m8_26 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string)", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string)", span="97-97"];
m8_337 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentDeserialize()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentDeserialize()", span="919-919"];
m8_338 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentDeserialize()", color=green, community=0, file="XmlNodeConverterTest.cs", label="string jsonText = @''{\r\n  ''''?xml'''': {\r\n    ''''@version'''': ''''1.0'''',\r\n    ''''@standalone'''': ''''no''''\r\n  },\r\n  ''''span'''': {\r\n    ''''@class'''': ''''vevent'''',\r\n    ''''a'''': {\r\n      ''''@class'''': ''''url'''',\r\n      ''''span'''': {\r\n        ''''@class'''': ''''summary'''',\r\n        ''''#text'''': ''''Web 2.0 Conference'''',\r\n        ''''#cdata-section'''': ''''my escaped text''''\r\n      },\r\n      ''''@href'''': ''''http://www.web2con.com/''''\r\n    }\r\n  }\r\n}''", prediction=55, span="921-938"];
m8_339 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentDeserialize()", color=green, community=0, file="XmlNodeConverterTest.cs", label="XmlDocument doc = (XmlDocument)DeserializeXmlNode(jsonText)", prediction=56, span="940-940"];
m8_340 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentDeserialize()", file="XmlNodeConverterTest.cs", label="string expected = @''<?xml version=''''1.0'''' standalone=''''no''''?>\r\n<span class=''''vevent''''>\r\n  <a class=''''url'''' href=''''http://www.web2con.com/''''>\r\n    <span class=''''summary''''>Web 2.0 Conference<![CDATA[my escaped text]]></span>\r\n  </a>\r\n</span>''", span="942-947"];
m8_50 [cluster="Unk.ReadJson", file="XmlNodeConverterTest.cs", label="Entry Unk.ReadJson", span=""];
m8_294 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.XmlDocumentTypeSerialize()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.XmlDocumentTypeSerialize()", span="699-699"];
m8_295 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.XmlDocumentTypeSerialize()", file="XmlNodeConverterTest.cs", label="string xml = @''<?xml version=''''1.0'''' encoding=''''utf-8''''?><!DOCTYPE STOCKQUOTE PUBLIC ''''-//W3C//DTD StockQuote 1.5//EN'''' ''''http://www.idontexistnopenopewhatnope123.org/dtd/stockquote_1.5.dtd''''><STOCKQUOTE ROWCOUNT=''''2''''><RESULT><ROW><ASK>0</ASK><BID>0</BID><CHANGE>-16.310</CHANGE><COMPANYNAME>Dow Jones</COMPANYNAME><DATETIME>2014-04-17 15:50:37</DATETIME><DIVIDEND>0</DIVIDEND><EPS>0</EPS><EXCHANGE></EXCHANGE><HIGH>16460.490</HIGH><LASTDATETIME>2014-04-17 15:50:37</LASTDATETIME><LASTPRICE>16408.540</LASTPRICE><LOW>16368.140</LOW><OPEN>16424.140</OPEN><PCHANGE>-0.099</PCHANGE><PE>0</PE><PREVIOUSCLOSE>16424.850</PREVIOUSCLOSE><SHARES>0</SHARES><TICKER>DJII</TICKER><TRADES>0</TRADES><VOLUME>136188700</VOLUME><YEARHIGH>11309.000</YEARHIGH><YEARLOW>9302.280</YEARLOW><YIELD>0</YIELD></ROW><ROW><ASK>0</ASK><BID>0</BID><CHANGE>9.290</CHANGE><COMPANYNAME>NASDAQ</COMPANYNAME><DATETIME>2014-04-17 15:40:01</DATETIME><DIVIDEND>0</DIVIDEND><EPS>0</EPS><EXCHANGE></EXCHANGE><HIGH>4110.460</HIGH><LASTDATETIME>2014-04-17 15:40:01</LASTDATETIME><LASTPRICE>4095.520</LASTPRICE><LOW>4064.700</LOW><OPEN>4080.300</OPEN><PCHANGE>0.227</PCHANGE><PE>0</PE><PREVIOUSCLOSE>4086.230</PREVIOUSCLOSE><SHARES>0</SHARES><TICKER>COMP</TICKER><TRADES>0</TRADES><VOLUME>1784210100</VOLUME><YEARHIGH>4371.710</YEARHIGH><YEARLOW>3154.960</YEARLOW><YIELD>0</YIELD></ROW></RESULT><STATUS>Couldn't find ticker: SPIC?</STATUS><STATUSCODE>2</STATUSCODE></STOCKQUOTE>''", span="701-701"];
m8_296 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.XmlDocumentTypeSerialize()", file="XmlNodeConverterTest.cs", label="string expected = @''{\r\n  ''''?xml'''': {\r\n    ''''@version'''': ''''1.0'''',\r\n    ''''@encoding'''': ''''utf-8''''\r\n  },\r\n  ''''!DOCTYPE'''': {\r\n    ''''@name'''': ''''STOCKQUOTE'''',\r\n    ''''@public'''': ''''-//W3C//DTD StockQuote 1.5//EN'''',\r\n    ''''@system'''': ''''http://www.idontexistnopenopewhatnope123.org/dtd/stockquote_1.5.dtd''''\r\n  },\r\n  ''''STOCKQUOTE'''': {\r\n    ''''@ROWCOUNT'''': ''''2'''',\r\n    ''''RESULT'''': {\r\n      ''''ROW'''': [\r\n        {\r\n          ''''ASK'''': ''''0'''',\r\n          ''''BID'''': ''''0'''',\r\n          ''''CHANGE'''': ''''-16.310'''',\r\n          ''''COMPANYNAME'''': ''''Dow Jones'''',\r\n          ''''DATETIME'''': ''''2014-04-17 15:50:37'''',\r\n          ''''DIVIDEND'''': ''''0'''',\r\n          ''''EPS'''': ''''0'''',\r\n          ''''EXCHANGE'''': '''''''',\r\n          ''''HIGH'''': ''''16460.490'''',\r\n          ''''LASTDATETIME'''': ''''2014-04-17 15:50:37'''',\r\n          ''''LASTPRICE'''': ''''16408.540'''',\r\n          ''''LOW'''': ''''16368.140'''',\r\n          ''''OPEN'''': ''''16424.140'''',\r\n          ''''PCHANGE'''': ''''-0.099'''',\r\n          ''''PE'''': ''''0'''',\r\n          ''''PREVIOUSCLOSE'''': ''''16424.850'''',\r\n          ''''SHARES'''': ''''0'''',\r\n          ''''TICKER'''': ''''DJII'''',\r\n          ''''TRADES'''': ''''0'''',\r\n          ''''VOLUME'''': ''''136188700'''',\r\n          ''''YEARHIGH'''': ''''11309.000'''',\r\n          ''''YEARLOW'''': ''''9302.280'''',\r\n          ''''YIELD'''': ''''0''''\r\n        },\r\n        {\r\n          ''''ASK'''': ''''0'''',\r\n          ''''BID'''': ''''0'''',\r\n          ''''CHANGE'''': ''''9.290'''',\r\n          ''''COMPANYNAME'''': ''''NASDAQ'''',\r\n          ''''DATETIME'''': ''''2014-04-17 15:40:01'''',\r\n          ''''DIVIDEND'''': ''''0'''',\r\n          ''''EPS'''': ''''0'''',\r\n          ''''EXCHANGE'''': '''''''',\r\n          ''''HIGH'''': ''''4110.460'''',\r\n          ''''LASTDATETIME'''': ''''2014-04-17 15:40:01'''',\r\n          ''''LASTPRICE'''': ''''4095.520'''',\r\n          ''''LOW'''': ''''4064.700'''',\r\n          ''''OPEN'''': ''''4080.300'''',\r\n          ''''PCHANGE'''': ''''0.227'''',\r\n          ''''PE'''': ''''0'''',\r\n          ''''PREVIOUSCLOSE'''': ''''4086.230'''',\r\n          ''''SHARES'''': ''''0'''',\r\n          ''''TICKER'''': ''''COMP'''',\r\n          ''''TRADES'''': ''''0'''',\r\n          ''''VOLUME'''': ''''1784210100'''',\r\n          ''''YEARHIGH'''': ''''4371.710'''',\r\n          ''''YEARLOW'''': ''''3154.960'''',\r\n          ''''YIELD'''': ''''0''''\r\n        }\r\n      ]\r\n    },\r\n    ''''STATUS'''': ''''Couldn't find ticker: SPIC?'''',\r\n    ''''STATUSCODE'''': ''''2''''\r\n  }\r\n}''", span="703-772"];
m8_299 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.XmlDocumentTypeSerialize()", file="XmlNodeConverterTest.cs", label="doc1.LoadXml(xml)", span="776-776"];
m8_303 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.XmlDocumentTypeSerialize()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(xml, ToStringWithDeclaration(doc11))", span="784-784"];
m8_304 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.XmlDocumentTypeSerialize()", file="XmlNodeConverterTest.cs", label="XDocument doc2 = XDocument.Parse(xml)", span="787-787"];
m8_308 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.XmlDocumentTypeSerialize()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(xml, ToStringWithDeclaration(doc22))", span="795-795"];
m8_297 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.XmlDocumentTypeSerialize()", file="XmlNodeConverterTest.cs", label="XmlDocument doc1 = new XmlDocument()", span="774-774"];
m8_301 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.XmlDocumentTypeSerialize()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(expected, json1)", span="780-780"];
m8_306 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.XmlDocumentTypeSerialize()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(expected, json2)", span="791-791"];
m8_298 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.XmlDocumentTypeSerialize()", file="XmlNodeConverterTest.cs", label="doc1.XmlResolver = null", span="775-775"];
m8_300 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.XmlDocumentTypeSerialize()", file="XmlNodeConverterTest.cs", label="string json1 = JsonConvert.SerializeXmlNode(doc1, Formatting.Indented)", span="778-778"];
m8_302 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.XmlDocumentTypeSerialize()", file="XmlNodeConverterTest.cs", label="XmlDocument doc11 = JsonConvert.DeserializeXmlNode(json1)", span="782-782"];
m8_305 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.XmlDocumentTypeSerialize()", file="XmlNodeConverterTest.cs", label="string json2 = JsonConvert.SerializeXNode(doc2, Formatting.Indented)", span="789-789"];
m8_307 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.XmlDocumentTypeSerialize()", file="XmlNodeConverterTest.cs", label="XDocument doc22 = JsonConvert.DeserializeXNode(json2)", span="793-793"];
m8_309 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.XmlDocumentTypeSerialize()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.XmlDocumentTypeSerialize()", span="699-699"];
m8_75 [cluster="Unk.DeserializeXNode", file="XmlNodeConverterTest.cs", label="Entry Unk.DeserializeXNode", span=""];
m8_787 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Deserialize_XDocument_NoRootWithDeclaration()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Deserialize_XDocument_NoRootWithDeclaration()", span="2813-2813"];
m8_788 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Deserialize_XDocument_NoRootWithDeclaration()", file="XmlNodeConverterTest.cs", label="XDocument d = JsonConvert.DeserializeXNode(@''{''''?xml'''':{''''@version'''':''''Version!'''',''''@encoding'''':''''Encoding!'''',''''@standalone'''':''''Standalone!''''}}'')", span="2815-2815"];
m8_789 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Deserialize_XDocument_NoRootWithDeclaration()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(null, d.Root)", span="2817-2817"];
m8_790 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Deserialize_XDocument_NoRootWithDeclaration()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(''Version!'', d.Declaration.Version)", span="2818-2818"];
m8_791 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Deserialize_XDocument_NoRootWithDeclaration()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(''Encoding!'', d.Declaration.Encoding)", span="2819-2819"];
m8_792 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Deserialize_XDocument_NoRootWithDeclaration()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(''Standalone!'', d.Declaration.Standalone)", span="2820-2820"];
m8_793 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Deserialize_XDocument_NoRootWithDeclaration()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Deserialize_XDocument_NoRootWithDeclaration()", span="2813-2813"];
m8_345 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.GetIndentedInnerXml(XmlNode)", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.GetIndentedInnerXml(XmlNode)", span="954-954"];
m8_346 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.GetIndentedInnerXml(XmlNode)", file="XmlNodeConverterTest.cs", label="XmlWriterSettings settings = new XmlWriterSettings()", span="956-956"];
m8_350 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.GetIndentedInnerXml(XmlNode)", file="XmlNodeConverterTest.cs", label="node.WriteTo(writer)", span="963-963"];
m8_347 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.GetIndentedInnerXml(XmlNode)", file="XmlNodeConverterTest.cs", label="settings.Indent = true", span="957-957"];
m8_348 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.GetIndentedInnerXml(XmlNode)", file="XmlNodeConverterTest.cs", label="StringWriter sw = new StringWriter()", span="959-959"];
m8_349 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.GetIndentedInnerXml(XmlNode)", file="XmlNodeConverterTest.cs", label="XmlWriter writer = XmlWriter.Create(sw, settings)", span="961-961"];
m8_351 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.GetIndentedInnerXml(XmlNode)", file="XmlNodeConverterTest.cs", label="return sw.ToString();", span="966-966"];
m8_352 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.GetIndentedInnerXml(XmlNode)", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.GetIndentedInnerXml(XmlNode)", span="954-954"];
m8_16 [cluster="XmlNodeReader.cstr", file="XmlNodeConverterTest.cs", label="Entry XmlNodeReader.cstr", span=""];
m8_674 [cluster="Newtonsoft.Json.JsonSerializationException.JsonSerializationException(string)", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.JsonSerializationException.JsonSerializationException(string)", span="52-52"];
m8_562 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataWithNullValue()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataWithNullValue()", span="1761-1761"];
m8_563 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataWithNullValue()", file="XmlNodeConverterTest.cs", label="string json = @''{\r\n  ''''$id'''': null\r\n}''", span="1763-1765"];
m8_564 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataWithNullValue()", file="XmlNodeConverterTest.cs", label="XmlNode node = JsonConvert.DeserializeXmlNode(json, ''root'')", span="1767-1767"];
m8_565 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataWithNullValue()", file="XmlNodeConverterTest.cs", label="string xml = GetIndentedInnerXml(node)", span="1768-1768"];
m8_567 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataWithNullValue()", file="XmlNodeConverterTest.cs", label="string newJson = JsonConvert.SerializeXmlNode(node, Formatting.Indented, true)", span="1773-1773"];
m8_566 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataWithNullValue()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(@''<?xml version=''''1.0'''' encoding=''''utf-16''''?>\r\n<root xmlns:json=''''http://james.newtonking.com/projects/json'''' json:id='''''''' />'', xml)", span="1770-1771"];
m8_568 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataWithNullValue()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(@''{\r\n  ''''$id'''': ''''''''\r\n}'', newJson)", span="1775-1777"];
m8_569 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataWithNullValue()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataWithNullValue()", span="1761-1761"];
m8_310 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ToStringWithDeclaration(XmlDocument, bool)", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ToStringWithDeclaration(XmlDocument, bool)", span="824-824"];
m8_322 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ToStringWithDeclaration(XmlDocument, bool)", file="XmlNodeConverterTest.cs", label="StringBuilder builder = new StringBuilder()", span="826-826"];
m8_323 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ToStringWithDeclaration(XmlDocument, bool)", file="XmlNodeConverterTest.cs", label="var writer = XmlWriter.Create(new Utf8StringWriter(builder), new XmlWriterSettings { Indent = indent })", span="827-827"];
m8_324 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ToStringWithDeclaration(XmlDocument, bool)", file="XmlNodeConverterTest.cs", label="doc.Save(writer)", span="829-829"];
m8_325 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ToStringWithDeclaration(XmlDocument, bool)", file="XmlNodeConverterTest.cs", label="return builder.ToString();", span="831-831"];
m8_326 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ToStringWithDeclaration(XmlDocument, bool)", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ToStringWithDeclaration(XmlDocument, bool)", span="824-824"];
m8_473 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Encoding()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Encoding()", span="1400-1400"];
m8_474 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Encoding()", file="XmlNodeConverterTest.cs", label="XmlDocument doc = new XmlDocument()", span="1402-1402"];
m8_475 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Encoding()", file="XmlNodeConverterTest.cs", label="doc.LoadXml(@''<name>O''''Connor</name>'')", span="1404-1404"];
m8_476 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Encoding()", file="XmlNodeConverterTest.cs", label="string json = SerializeXmlNode(doc)", span="1406-1406"];
m8_477 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Encoding()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(@''{\r\n  ''''name'''': ''''O\''''Connor''''\r\n}'', json)", span="1407-1409"];
m8_478 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Encoding()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Encoding()", span="1400-1400"];
m8_657 [cluster="System.IO.MemoryStream.MemoryStream()", file="XmlNodeConverterTest.cs", label="Entry System.IO.MemoryStream.MemoryStream()", span="0-0"];
m8_586 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleItemArrayPropertySerialization()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleItemArrayPropertySerialization()", span="1889-1889"];
m8_587 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleItemArrayPropertySerialization()", file="XmlNodeConverterTest.cs", label="Product product = new Product()", span="1891-1891"];
m8_588 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleItemArrayPropertySerialization()", file="XmlNodeConverterTest.cs", label="product.Name = ''Apple''", span="1893-1893"];
m8_589 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleItemArrayPropertySerialization()", file="XmlNodeConverterTest.cs", label="product.ExpiryDate = new DateTime(2008, 12, 28, 0, 0, 0, DateTimeKind.Utc)", span="1894-1894"];
m8_590 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleItemArrayPropertySerialization()", file="XmlNodeConverterTest.cs", label="product.Price = 3.99M", span="1895-1895"];
m8_591 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleItemArrayPropertySerialization()", file="XmlNodeConverterTest.cs", label="product.Sizes = new string[] { ''Small'' }", span="1896-1896"];
m8_592 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleItemArrayPropertySerialization()", file="XmlNodeConverterTest.cs", label="string output = JsonConvert.SerializeObject(product, new IsoDateTimeConverter())", span="1898-1898"];
m8_593 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleItemArrayPropertySerialization()", file="XmlNodeConverterTest.cs", label="XmlDocument xmlProduct = JsonConvert.DeserializeXmlNode(output, ''product'', true)", span="1900-1900"];
m8_594 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleItemArrayPropertySerialization()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(@''<product>\r\n  <Name>Apple</Name>\r\n  <ExpiryDate>2008-12-28T00:00:00Z</ExpiryDate>\r\n  <Price>3.99</Price>\r\n  <Sizes json:Array=''''true'''' xmlns:json=''''http://james.newtonking.com/projects/json''''>Small</Sizes>\r\n</product>'', IndentXml(xmlProduct.InnerXml))", span="1902-1907"];
m8_595 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleItemArrayPropertySerialization()", file="XmlNodeConverterTest.cs", label="string output2 = JsonConvert.SerializeXmlNode(xmlProduct.DocumentElement, Formatting.Indented)", span="1909-1909"];
m8_596 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleItemArrayPropertySerialization()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(@''{\r\n  ''''product'''': {\r\n    ''''Name'''': ''''Apple'''',\r\n    ''''ExpiryDate'''': ''''2008-12-28T00:00:00Z'''',\r\n    ''''Price'''': ''''3.99'''',\r\n    ''''Sizes'''': [\r\n      ''''Small''''\r\n    ]\r\n  }\r\n}'', output2)", span="1911-1920"];
m8_597 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleItemArrayPropertySerialization()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleItemArrayPropertySerialization()", span="1889-1889"];
m8_834 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyNodeAndOmitRoot_XElement()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyNodeAndOmitRoot_XElement()", span="2888-2888"];
m8_835 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyNodeAndOmitRoot_XElement()", file="XmlNodeConverterTest.cs", label="string xmlString = @''<myemptynode />''", span="2890-2890"];
m8_836 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyNodeAndOmitRoot_XElement()", file="XmlNodeConverterTest.cs", label="var xml = XElement.Parse(xmlString)", span="2892-2892"];
m8_837 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyNodeAndOmitRoot_XElement()", file="XmlNodeConverterTest.cs", label="string json = JsonConvert.SerializeXNode(xml, Formatting.Indented, true)", span="2894-2894"];
m8_838 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyNodeAndOmitRoot_XElement()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(''null'', json)", span="2896-2896"];
m8_839 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyNodeAndOmitRoot_XElement()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyNodeAndOmitRoot_XElement()", span="2888-2888"];
m8_278 [cluster="Unk.AppendChild", file="XmlNodeConverterTest.cs", label="Entry Unk.AppendChild", span=""];
m8_20 [cluster="Unk.MoveToContent", file="XmlNodeConverterTest.cs", label="Entry Unk.MoveToContent", span=""];
m8_354 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleTextNode()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleTextNode()", span="970-970"];
m8_355 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleTextNode()", file="XmlNodeConverterTest.cs", label="string xml = @''<?xml version=''''1.0'''' standalone=''''no''''?>\r\n			<root>\r\n			  <person id=''''1''''>\r\n	  			<name>Alan</name>\r\n		  		<url>http://www.google.com</url>\r\n			  </person>\r\n			  <person id=''''2''''>\r\n			  	<name>Louis</name>\r\n				  <url>http://www.yahoo.com</url>\r\n			  </person>\r\n			</root>''", span="972-982"];
m8_356 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleTextNode()", file="XmlNodeConverterTest.cs", label="XmlDocument doc = new XmlDocument()", span="984-984"];
m8_357 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleTextNode()", file="XmlNodeConverterTest.cs", label="doc.LoadXml(xml)", span="985-985"];
m8_358 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleTextNode()", file="XmlNodeConverterTest.cs", label="string jsonText = SerializeXmlNode(doc)", span="987-987"];
m8_360 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleTextNode()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(doc.InnerXml, newDoc.InnerXml)", span="991-991"];
m8_359 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleTextNode()", file="XmlNodeConverterTest.cs", label="XmlDocument newDoc = (XmlDocument)DeserializeXmlNode(jsonText)", span="989-989"];
m8_361 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleTextNode()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleTextNode()", span="970-970"];
m8_398 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", span="1093-1093"];
m8_399 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs", label="string arrayXml = @''<root xmlns:json=''''http://james.newtonking.com/projects/json''''>\r\n			  <person id=''''1''''>\r\n				  <name>Alan</name>\r\n				  <url>http://www.google.com</url>\r\n				  <role json:Array=''''true''''>Admin</role>\r\n			  </person>\r\n			</root>''", span="1095-1101"];
m8_400 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs", label="XmlDocument arrayDoc = new XmlDocument()", span="1103-1103"];
m8_401 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs", label="arrayDoc.LoadXml(arrayXml)", span="1104-1104"];
m8_402 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs", label="string arrayJsonText = SerializeXmlNode(arrayDoc)", span="1106-1106"];
m8_403 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs", label="string expected = @''{\r\n  ''''root'''': {\r\n    ''''person'''': {\r\n      ''''@id'''': ''''1'''',\r\n      ''''name'''': ''''Alan'''',\r\n      ''''url'''': ''''http://www.google.com'''',\r\n      ''''role'''': [\r\n        ''''Admin''''\r\n      ]\r\n    }\r\n  }\r\n}''", span="1107-1118"];
m8_404 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(expected, arrayJsonText)", span="1119-1119"];
m8_405 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs", label="arrayXml = @''<root xmlns:json=''''http://james.newtonking.com/projects/json''''>\r\n			  <person id=''''1''''>\r\n				  <name>Alan</name>\r\n				  <url>http://www.google.com</url>\r\n				  <role json:Array=''''true''''>Admin1</role>\r\n				  <role json:Array=''''true''''>Admin2</role>\r\n			  </person>\r\n			</root>''", span="1121-1128"];
m8_406 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs", label="arrayDoc = new XmlDocument()", span="1130-1130"];
m8_407 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs", label="arrayDoc.LoadXml(arrayXml)", span="1131-1131"];
m8_408 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs", label="arrayJsonText = SerializeXmlNode(arrayDoc)", span="1133-1133"];
m8_409 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs", label="expected = @''{\r\n  ''''root'''': {\r\n    ''''person'''': {\r\n      ''''@id'''': ''''1'''',\r\n      ''''name'''': ''''Alan'''',\r\n      ''''url'''': ''''http://www.google.com'''',\r\n      ''''role'''': [\r\n        ''''Admin1'''',\r\n        ''''Admin2''''\r\n      ]\r\n    }\r\n  }\r\n}''", span="1134-1146"];
m8_410 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(expected, arrayJsonText)", span="1147-1147"];
m8_411 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs", label="arrayXml = @''<root xmlns:json=''''http://james.newtonking.com/projects/json''''>\r\n			  <person id=''''1''''>\r\n				  <name>Alan</name>\r\n				  <url>http://www.google.com</url>\r\n				  <role json:Array=''''false''''>Admin1</role>\r\n			  </person>\r\n			</root>''", span="1149-1155"];
m8_412 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs", label="arrayDoc = new XmlDocument()", span="1157-1157"];
m8_413 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs", label="arrayDoc.LoadXml(arrayXml)", span="1158-1158"];
m8_414 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs", label="arrayJsonText = SerializeXmlNode(arrayDoc)", span="1160-1160"];
m8_415 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs", label="expected = @''{\r\n  ''''root'''': {\r\n    ''''person'''': {\r\n      ''''@id'''': ''''1'''',\r\n      ''''name'''': ''''Alan'''',\r\n      ''''url'''': ''''http://www.google.com'''',\r\n      ''''role'''': ''''Admin1''''\r\n    }\r\n  }\r\n}''", span="1161-1170"];
m8_416 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(expected, arrayJsonText)", span="1171-1171"];
m8_417 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs", label="arrayXml = @''<root>\r\n			  <person id=''''1''''>\r\n				  <name>Alan</name>\r\n				  <url>http://www.google.com</url>\r\n				  <role json:Array=''''true'''' xmlns:json=''''http://james.newtonking.com/projects/json''''>Admin</role>\r\n			  </person>\r\n			</root>''", span="1173-1179"];
m8_418 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs", label="arrayDoc = new XmlDocument()", span="1181-1181"];
m8_419 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs", label="arrayDoc.LoadXml(arrayXml)", span="1182-1182"];
m8_420 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs", label="arrayJsonText = SerializeXmlNode(arrayDoc)", span="1184-1184"];
m8_421 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs", label="expected = @''{\r\n  ''''root'''': {\r\n    ''''person'''': {\r\n      ''''@id'''': ''''1'''',\r\n      ''''name'''': ''''Alan'''',\r\n      ''''url'''': ''''http://www.google.com'''',\r\n      ''''role'''': [\r\n        ''''Admin''''\r\n      ]\r\n    }\r\n  }\r\n}''", span="1185-1196"];
m8_422 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(expected, arrayJsonText)", span="1197-1197"];
m8_423 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", span="1093-1093"];
m8_45 [cluster="Newtonsoft.Json.JsonTextReader.JsonTextReader(System.IO.TextReader)", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.JsonTextReader.JsonTextReader(System.IO.TextReader)", span="75-75"];
m8_457 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RoundTripNestedArrays()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RoundTripNestedArrays()", span="1305-1305"];
m8_458 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RoundTripNestedArrays()", file="XmlNodeConverterTest.cs", label="string json = @''{\r\n  ''''available_sizes'''': [\r\n    [\r\n      ''''assets/images/resized/0001/1070/11070v1-max-150x150.jpg'''',\r\n      ''''assets/images/resized/0001/1070/11070v1-max-150x150.jpg''''\r\n    ],\r\n    [\r\n      ''''assets/images/resized/0001/1070/11070v1-max-250x250.jpg'''',\r\n      ''''assets/images/resized/0001/1070/11070v1-max-250x250.jpg''''\r\n    ],\r\n    [\r\n      ''''assets/images/resized/0001/1070/11070v1-max-250x250.jpg''''\r\n    ]\r\n  ]\r\n}''", span="1307-1321"];
m8_459 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RoundTripNestedArrays()", file="XmlNodeConverterTest.cs", label="XmlDocument newDoc = JsonConvert.DeserializeXmlNode(json, ''myRoot'', true)", span="1324-1324"];
m8_461 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RoundTripNestedArrays()", file="XmlNodeConverterTest.cs", label="XDocument newXDoc = JsonConvert.DeserializeXNode(json, ''myRoot'', true)", span="1342-1342"];
m8_464 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RoundTripNestedArrays()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(json, newJson)", span="1361-1361"];
m8_460 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RoundTripNestedArrays()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(@''<myRoot>\r\n  <available_sizes json:Array=''''true'''' xmlns:json=''''http://james.newtonking.com/projects/json''''>\r\n    <available_sizes>assets/images/resized/0001/1070/11070v1-max-150x150.jpg</available_sizes>\r\n    <available_sizes>assets/images/resized/0001/1070/11070v1-max-150x150.jpg</available_sizes>\r\n  </available_sizes>\r\n  <available_sizes json:Array=''''true'''' xmlns:json=''''http://james.newtonking.com/projects/json''''>\r\n    <available_sizes>assets/images/resized/0001/1070/11070v1-max-250x250.jpg</available_sizes>\r\n    <available_sizes>assets/images/resized/0001/1070/11070v1-max-250x250.jpg</available_sizes>\r\n  </available_sizes>\r\n  <available_sizes json:Array=''''true'''' xmlns:json=''''http://james.newtonking.com/projects/json''''>\r\n    <available_sizes json:Array=''''true''''>assets/images/resized/0001/1070/11070v1-max-250x250.jpg</available_sizes>\r\n  </available_sizes>\r\n</myRoot>'', IndentXml(newDoc.InnerXml))", span="1326-1338"];
m8_463 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RoundTripNestedArrays()", file="XmlNodeConverterTest.cs", label="string newJson = JsonConvert.SerializeXmlNode(newDoc, Formatting.Indented, true)", span="1360-1360"];
m8_462 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RoundTripNestedArrays()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(@''<myRoot>\r\n  <available_sizes json:Array=''''true'''' xmlns:json=''''http://james.newtonking.com/projects/json''''>\r\n    <available_sizes>assets/images/resized/0001/1070/11070v1-max-150x150.jpg</available_sizes>\r\n    <available_sizes>assets/images/resized/0001/1070/11070v1-max-150x150.jpg</available_sizes>\r\n  </available_sizes>\r\n  <available_sizes json:Array=''''true'''' xmlns:json=''''http://james.newtonking.com/projects/json''''>\r\n    <available_sizes>assets/images/resized/0001/1070/11070v1-max-250x250.jpg</available_sizes>\r\n    <available_sizes>assets/images/resized/0001/1070/11070v1-max-250x250.jpg</available_sizes>\r\n  </available_sizes>\r\n  <available_sizes json:Array=''''true'''' xmlns:json=''''http://james.newtonking.com/projects/json''''>\r\n    <available_sizes json:Array=''''true''''>assets/images/resized/0001/1070/11070v1-max-250x250.jpg</available_sizes>\r\n  </available_sizes>\r\n</myRoot>'', IndentXml(newXDoc.ToString(SaveOptions.DisableFormatting)))", span="1344-1356"];
m8_465 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RoundTripNestedArrays()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RoundTripNestedArrays()", span="1305-1305"];
m8_165 [cluster="Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string, Newtonsoft.Json.JsonSerializerSettings)", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string, Newtonsoft.Json.JsonSerializerSettings)", span="766-766"];
m8_578 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmptyPropertyName()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmptyPropertyName()", span="1802-1802"];
m8_579 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmptyPropertyName()", file="XmlNodeConverterTest.cs", label="string json = @''{\r\n  ''''8452309520V2'''': {\r\n    '''''''': {\r\n      ''''CLIENT'''': {\r\n        ''''ID_EXPIRATION_1'''': {\r\n          ''''VALUE'''': ''''12/12/2000'''',\r\n          ''''DATATYPE'''': ''''D'''',\r\n          ''''MSG'''': ''''Missing Identification Exp. Date 1''''\r\n        },\r\n        ''''ID_ISSUEDATE_1'''': {\r\n          ''''VALUE'''': '''''''',\r\n          ''''DATATYPE'''': ''''D'''',\r\n          ''''MSG'''': ''''Missing Identification Issue Date 1''''\r\n        }\r\n      }\r\n    },\r\n    ''''457463534534'''': {\r\n      ''''ACCOUNT'''': {\r\n        ''''FUNDING_SOURCE'''': {\r\n          ''''VALUE'''': ''''FS0'''',\r\n          ''''DATATYPE'''': ''''L'''',\r\n          ''''MSG'''': ''''Missing Source of Funds''''\r\n        }\r\n      }\r\n    }\r\n  }\r\n}{\r\n  ''''34534634535345'''': {\r\n    '''''''': {\r\n      ''''CLIENT'''': {\r\n        ''''ID_NUMBER_1'''': {\r\n          ''''VALUE'''': '''''''',\r\n          ''''DATATYPE'''': ''''S'''',\r\n          ''''MSG'''': ''''Missing Picture ID''''\r\n        },\r\n        ''''ID_EXPIRATION_1'''': {\r\n          ''''VALUE'''': ''''12/12/2000'''',\r\n          ''''DATATYPE'''': ''''D'''',\r\n          ''''MSG'''': ''''Missing Picture ID''''\r\n        },\r\n        ''''WALK_IN'''': {\r\n          ''''VALUE'''': '''''''',\r\n          ''''DATATYPE'''': ''''L'''',\r\n          ''''MSG'''': ''''Missing Walk in''''\r\n        },\r\n        ''''PERSONAL_MEETING'''': {\r\n          ''''VALUE'''': ''''PM1'''',\r\n          ''''DATATYPE'''': ''''L'''',\r\n          ''''MSG'''': ''''Missing Met Client in Person''''\r\n        },\r\n        ''''ID_ISSUEDATE_1'''': {\r\n          ''''VALUE'''': '''''''',\r\n          ''''DATATYPE'''': ''''D'''',\r\n          ''''MSG'''': ''''Missing Picture ID''''\r\n        },\r\n        ''''PHOTO_ID'''': {\r\n          ''''VALUE'''': '''''''',\r\n          ''''DATATYPE'''': ''''L'''',\r\n          ''''MSG'''': ''''Missing Picture ID''''\r\n        },\r\n        ''''ID_TYPE_1'''': {\r\n          ''''VALUE'''': '''''''',\r\n          ''''DATATYPE'''': ''''L'''',\r\n          ''''MSG'''': ''''Missing Picture ID''''\r\n        }\r\n      }\r\n    },\r\n    ''''45635624523'''': {\r\n      ''''ACCOUNT'''': {\r\n        ''''FUNDING_SOURCE'''': {\r\n          ''''VALUE'''': ''''FS1'''',\r\n          ''''DATATYPE'''': ''''L'''',\r\n          ''''MSG'''': ''''Missing Source of Funds''''\r\n        }\r\n      }\r\n    }\r\n  }\r\n}''", span="1804-1881"];
m8_580 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmptyPropertyName()", file="XmlNodeConverterTest.cs", label="ExceptionAssert.Throws<JsonSerializationException>(\r\n                () => { DeserializeXmlNode(json); },\r\n                ''XmlNodeConverter cannot convert JSON with an empty property name to XML. Path '8452309520V2.', line 3, position 9.'')", span="1883-1885"];
m8_581 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmptyPropertyName()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmptyPropertyName()", span="1802-1802"];
m8_489 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeExample()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeExample()", span="1443-1443"];
m8_490 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeExample()", file="XmlNodeConverterTest.cs", label="string xml = @''<?xml version=''''1.0'''' standalone=''''no''''?>\r\n			<root>\r\n			  <person id=''''1''''>\r\n				<name>Alan</name>\r\n				<url>http://www.google.com</url>\r\n			  </person>\r\n			  <person id=''''2''''>\r\n				<name>Louis</name>\r\n				<url>http://www.yahoo.com</url>\r\n			  </person>\r\n			</root>''", span="1445-1455"];
m8_491 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeExample()", file="XmlNodeConverterTest.cs", label="XmlDocument doc = new XmlDocument()", span="1457-1457"];
m8_492 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeExample()", file="XmlNodeConverterTest.cs", label="doc.LoadXml(xml)", span="1458-1458"];
m8_493 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeExample()", file="XmlNodeConverterTest.cs", label="string jsonText = SerializeXmlNode(doc)", span="1460-1460"];
m8_497 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeExample()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(doc.InnerXml, newDoc.InnerXml)", span="1508-1508"];
m8_494 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeExample()", file="XmlNodeConverterTest.cs", label="jsonText = JObject.Parse(jsonText).ToString()", span="1483-1483"];
m8_495 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeExample()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(@''{\r\n  ''''?xml'''': {\r\n    ''''@version'''': ''''1.0'''',\r\n    ''''@standalone'''': ''''no''''\r\n  },\r\n  ''''root'''': {\r\n    ''''person'''': [\r\n      {\r\n        ''''@id'''': ''''1'''',\r\n        ''''name'''': ''''Alan'''',\r\n        ''''url'''': ''''http://www.google.com''''\r\n      },\r\n      {\r\n        ''''@id'''': ''''2'''',\r\n        ''''name'''': ''''Louis'''',\r\n        ''''url'''': ''''http://www.yahoo.com''''\r\n      }\r\n    ]\r\n  }\r\n}'', jsonText)", span="1485-1504"];
m8_496 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeExample()", file="XmlNodeConverterTest.cs", label="XmlDocument newDoc = (XmlDocument)DeserializeXmlNode(jsonText)", span="1506-1506"];
m8_498 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeExample()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeExample()", span="1443-1443"];
m8_685 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNodeDefaultNamespace()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNodeDefaultNamespace()", span="2363-2363"];
m8_686 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNodeDefaultNamespace()", file="XmlNodeConverterTest.cs", label="string xaml = @''<Grid xmlns=''''http://schemas.microsoft.com/winfx/2006/xaml/presentation'''' xmlns:x=''''http://schemas.microsoft.com/winfx/2006/xaml'''' xmlns:toolkit=''''clr-namespace:Microsoft.Phone.Controls;assembly=Microsoft.Phone.Controls.Toolkit'''' Style=''''{StaticResource trimFormGrid}'''' x:Name=''''TrimObjectForm''''>\r\n  <Grid.ColumnDefinitions>\r\n    <ColumnDefinition Width=''''63*'''' />\r\n    <ColumnDefinition Width=''''320*'''' />\r\n  </Grid.ColumnDefinitions>\r\n  <Grid.RowDefinitions xmlns=''''''''>\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n  </Grid.RowDefinitions>\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding TypedTitle, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordTypedTitle'''' Grid.Column=''''1'''' Grid.Row=''''0'''' xmlns='''''''' />\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding ExternalReference, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordExternalReference'''' Grid.Column=''''1'''' Grid.Row=''''1'''' xmlns='''''''' />\r\n  <toolkit:DatePicker Style=''''{StaticResource trimFormGrid_DP}'''' Value=''''{Binding DateCreated, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordDateCreated'''' Grid.Column=''''1'''' Grid.Row=''''2'''' />\r\n  <toolkit:DatePicker Style=''''{StaticResource trimFormGrid_DP}'''' Value=''''{Binding DateDue, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordDateDue'''' Grid.Column=''''1'''' Grid.Row=''''3'''' />\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding Author, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordAuthor'''' Grid.Column=''''1'''' Grid.Row=''''4'''' xmlns='''''''' />\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding Container, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordContainer'''' Grid.Column=''''1'''' Grid.Row=''''5'''' xmlns='''''''' />\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding IsEnclosed, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordIsEnclosed'''' Grid.Column=''''1'''' Grid.Row=''''6'''' xmlns='''''''' />\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding Assignee, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordAssignee'''' Grid.Column=''''1'''' Grid.Row=''''7'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Title (Free Text Part)'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''0'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''External ID'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''1'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Date Created'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''2'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Date Due'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''3'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Author'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''4'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Container'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''5'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Enclosed?'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''6'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Assignee'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''7'''' xmlns='''''''' />\r\n</Grid>''", span="2365-2396"];
m8_687 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNodeDefaultNamespace()", file="XmlNodeConverterTest.cs", label="XmlDocument document = new XmlDocument()", span="2398-2398"];
m8_688 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNodeDefaultNamespace()", file="XmlNodeConverterTest.cs", label="document.LoadXml(xaml)", span="2399-2399"];
m8_689 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNodeDefaultNamespace()", file="XmlNodeConverterTest.cs", label="string json = JsonConvert.SerializeXmlNode(document, Formatting.Indented)", span="2401-2401"];
m8_690 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNodeDefaultNamespace()", file="XmlNodeConverterTest.cs", label="string expectedJson = @''{\r\n  ''''Grid'''': {\r\n    ''''@xmlns'''': ''''http://schemas.microsoft.com/winfx/2006/xaml/presentation'''',\r\n    ''''@xmlns:x'''': ''''http://schemas.microsoft.com/winfx/2006/xaml'''',\r\n    ''''@xmlns:toolkit'''': ''''clr-namespace:Microsoft.Phone.Controls;assembly=Microsoft.Phone.Controls.Toolkit'''',\r\n    ''''@Style'''': ''''{StaticResource trimFormGrid}'''',\r\n    ''''@x:Name'''': ''''TrimObjectForm'''',\r\n    ''''Grid.ColumnDefinitions'''': {\r\n      ''''ColumnDefinition'''': [\r\n        {\r\n          ''''@Width'''': ''''63*''''\r\n        },\r\n        {\r\n          ''''@Width'''': ''''320*''''\r\n        }\r\n      ]\r\n    },\r\n    ''''Grid.RowDefinitions'''': {\r\n      ''''@xmlns'''': '''''''',\r\n      ''''RowDefinition'''': [\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null\r\n      ]\r\n    },\r\n    ''''TextBox'''': [\r\n      {\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_TB}'''',\r\n        ''''@Text'''': ''''{Binding TypedTitle, Converter={StaticResource trimPropertyConverter}}'''',\r\n        ''''@Name'''': ''''RecordTypedTitle'''',\r\n        ''''@Grid.Column'''': ''''1'''',\r\n        ''''@Grid.Row'''': ''''0'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_TB}'''',\r\n        ''''@Text'''': ''''{Binding ExternalReference, Converter={StaticResource trimPropertyConverter}}'''',\r\n        ''''@Name'''': ''''RecordExternalReference'''',\r\n        ''''@Grid.Column'''': ''''1'''',\r\n        ''''@Grid.Row'''': ''''1'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_TB}'''',\r\n        ''''@Text'''': ''''{Binding Author, Converter={StaticResource trimPropertyConverter}}'''',\r\n        ''''@Name'''': ''''RecordAuthor'''',\r\n        ''''@Grid.Column'''': ''''1'''',\r\n        ''''@Grid.Row'''': ''''4'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_TB}'''',\r\n        ''''@Text'''': ''''{Binding Container, Converter={StaticResource trimPropertyConverter}}'''',\r\n        ''''@Name'''': ''''RecordContainer'''',\r\n        ''''@Grid.Column'''': ''''1'''',\r\n        ''''@Grid.Row'''': ''''5'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_TB}'''',\r\n        ''''@Text'''': ''''{Binding IsEnclosed, Converter={StaticResource trimPropertyConverter}}'''',\r\n        ''''@Name'''': ''''RecordIsEnclosed'''',\r\n        ''''@Grid.Column'''': ''''1'''',\r\n        ''''@Grid.Row'''': ''''6'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_TB}'''',\r\n        ''''@Text'''': ''''{Binding Assignee, Converter={StaticResource trimPropertyConverter}}'''',\r\n        ''''@Name'''': ''''RecordAssignee'''',\r\n        ''''@Grid.Column'''': ''''1'''',\r\n        ''''@Grid.Row'''': ''''7'''',\r\n        ''''@xmlns'''': ''''''''\r\n      }\r\n    ],\r\n    ''''toolkit:DatePicker'''': [\r\n      {\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_DP}'''',\r\n        ''''@Value'''': ''''{Binding DateCreated, Converter={StaticResource trimPropertyConverter}}'''',\r\n        ''''@Name'''': ''''RecordDateCreated'''',\r\n        ''''@Grid.Column'''': ''''1'''',\r\n        ''''@Grid.Row'''': ''''2''''\r\n      },\r\n      {\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_DP}'''',\r\n        ''''@Value'''': ''''{Binding DateDue, Converter={StaticResource trimPropertyConverter}}'''',\r\n        ''''@Name'''': ''''RecordDateDue'''',\r\n        ''''@Grid.Column'''': ''''1'''',\r\n        ''''@Grid.Row'''': ''''3''''\r\n      }\r\n    ],\r\n    ''''TextBlock'''': [\r\n      {\r\n        ''''@Grid.Column'''': ''''0'''',\r\n        ''''@Text'''': ''''Title (Free Text Part)'''',\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_LBL}'''',\r\n        ''''@Grid.Row'''': ''''0'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Grid.Column'''': ''''0'''',\r\n        ''''@Text'''': ''''External ID'''',\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_LBL}'''',\r\n        ''''@Grid.Row'''': ''''1'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Grid.Column'''': ''''0'''',\r\n        ''''@Text'''': ''''Date Created'''',\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_LBL}'''',\r\n        ''''@Grid.Row'''': ''''2'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Grid.Column'''': ''''0'''',\r\n        ''''@Text'''': ''''Date Due'''',\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_LBL}'''',\r\n        ''''@Grid.Row'''': ''''3'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Grid.Column'''': ''''0'''',\r\n        ''''@Text'''': ''''Author'''',\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_LBL}'''',\r\n        ''''@Grid.Row'''': ''''4'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Grid.Column'''': ''''0'''',\r\n        ''''@Text'''': ''''Container'''',\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_LBL}'''',\r\n        ''''@Grid.Row'''': ''''5'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Grid.Column'''': ''''0'''',\r\n        ''''@Text'''': ''''Enclosed?'''',\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_LBL}'''',\r\n        ''''@Grid.Row'''': ''''6'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Grid.Column'''': ''''0'''',\r\n        ''''@Text'''': ''''Assignee'''',\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_LBL}'''',\r\n        ''''@Grid.Row'''': ''''7'''',\r\n        ''''@xmlns'''': ''''''''\r\n      }\r\n    ]\r\n  }\r\n}''", span="2403-2558"];
m8_691 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNodeDefaultNamespace()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(expectedJson, json)", span="2560-2560"];
m8_692 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNodeDefaultNamespace()", file="XmlNodeConverterTest.cs", label="XmlNode node = JsonConvert.DeserializeXmlNode(json)", span="2562-2562"];
m8_693 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNodeDefaultNamespace()", file="XmlNodeConverterTest.cs", label="StringWriter sw = new StringWriter()", span="2564-2564"];
m8_695 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNodeDefaultNamespace()", file="XmlNodeConverterTest.cs", label="node.WriteTo(writer)", span="2570-2570"];
m8_694 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNodeDefaultNamespace()", file="XmlNodeConverterTest.cs", label="XmlWriter writer = XmlWriter.Create(sw, new XmlWriterSettings\r\n            {\r\n                Indent = true,\r\n                OmitXmlDeclaration = true\r\n            })", span="2565-2569"];
m8_697 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNodeDefaultNamespace()", file="XmlNodeConverterTest.cs", label="string xaml2 = sw.ToString()", span="2573-2573"];
m8_696 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNodeDefaultNamespace()", file="XmlNodeConverterTest.cs", label="writer.Flush()", span="2571-2571"];
m8_698 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNodeDefaultNamespace()", file="XmlNodeConverterTest.cs", label="string expectedXaml = @''<Grid xmlns=''''http://schemas.microsoft.com/winfx/2006/xaml/presentation'''' xmlns:x=''''http://schemas.microsoft.com/winfx/2006/xaml'''' xmlns:toolkit=''''clr-namespace:Microsoft.Phone.Controls;assembly=Microsoft.Phone.Controls.Toolkit'''' Style=''''{StaticResource trimFormGrid}'''' x:Name=''''TrimObjectForm''''>\r\n  <Grid.ColumnDefinitions>\r\n    <ColumnDefinition Width=''''63*'''' />\r\n    <ColumnDefinition Width=''''320*'''' />\r\n  </Grid.ColumnDefinitions>\r\n  <Grid.RowDefinitions xmlns=''''''''>\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n  </Grid.RowDefinitions>\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding TypedTitle, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordTypedTitle'''' Grid.Column=''''1'''' Grid.Row=''''0'''' xmlns='''''''' />\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding ExternalReference, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordExternalReference'''' Grid.Column=''''1'''' Grid.Row=''''1'''' xmlns='''''''' />\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding Author, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordAuthor'''' Grid.Column=''''1'''' Grid.Row=''''4'''' xmlns='''''''' />\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding Container, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordContainer'''' Grid.Column=''''1'''' Grid.Row=''''5'''' xmlns='''''''' />\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding IsEnclosed, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordIsEnclosed'''' Grid.Column=''''1'''' Grid.Row=''''6'''' xmlns='''''''' />\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding Assignee, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordAssignee'''' Grid.Column=''''1'''' Grid.Row=''''7'''' xmlns='''''''' />\r\n  <toolkit:DatePicker Style=''''{StaticResource trimFormGrid_DP}'''' Value=''''{Binding DateCreated, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordDateCreated'''' Grid.Column=''''1'''' Grid.Row=''''2'''' />\r\n  <toolkit:DatePicker Style=''''{StaticResource trimFormGrid_DP}'''' Value=''''{Binding DateDue, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordDateDue'''' Grid.Column=''''1'''' Grid.Row=''''3'''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Title (Free Text Part)'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''0'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''External ID'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''1'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Date Created'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''2'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Date Due'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''3'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Author'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''4'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Container'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''5'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Enclosed?'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''6'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Assignee'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''7'''' xmlns='''''''' />\r\n</Grid>''", span="2575-2606"];
m8_699 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNodeDefaultNamespace()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(expectedXaml, xaml2)", span="2608-2608"];
m8_700 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNodeDefaultNamespace()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNodeDefaultNamespace()", span="2363-2363"];
m8_889 [cluster="List<JsonConverter>.cstr", file="XmlNodeConverterTest.cs", label="Entry List<JsonConverter>.cstr", span=""];
m8_501 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeExample()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeExample()", span="1512-1512"];
m8_502 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeExample()", file="XmlNodeConverterTest.cs", label="string json = @''{\r\n        ''''?xml'''': {\r\n          ''''@version'''': ''''1.0'''',\r\n          ''''@standalone'''': ''''no''''\r\n        },\r\n        ''''root'''': {\r\n          ''''person'''': [\r\n            {\r\n              ''''@id'''': ''''1'''',\r\n              ''''name'''': ''''Alan'''',\r\n              ''''url'''': ''''http://www.google.com''''\r\n            },\r\n            {\r\n              ''''@id'''': ''''2'''',\r\n              ''''name'''': ''''Louis'''',\r\n              ''''url'''': ''''http://www.yahoo.com''''\r\n            }\r\n          ]\r\n        }\r\n      }''", span="1514-1533"];
m8_503 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeExample()", file="XmlNodeConverterTest.cs", label="XmlDocument doc = (XmlDocument)DeserializeXmlNode(json)", span="1535-1535"];
m8_504 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeExample()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(@''<?xml version=''''1.0'''' standalone=''''no''''?><root><person id=''''1''''><name>Alan</name><url>http://www.google.com</url></person><person id=''''2''''><name>Louis</name><url>http://www.yahoo.com</url></person></root>'', doc.InnerXml)", span="1548-1548"];
m8_505 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeExample()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeExample()", span="1512-1512"];
m8_724 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NullableXml.NullableXml()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NullableXml.NullableXml()", span="2649-2649"];
m8_100 [cluster="Unk.Equals", file="XmlNodeConverterTest.cs", label="Entry Unk.Equals", span=""];
m8_112 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXDocument()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXDocument()", span="225-225"];
m8_113 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXDocument()", file="XmlNodeConverterTest.cs", label="string xml = @''<result xp_0:end=''''2014-08-15 13:12:11.9184'''' xp_0:start=''''2014-08-15 13:11:49.3140'''' xp_0:time_diff=''''22604.3836'''' xmlns:xp_0=''''Test1'''' p2:end=''''2014-08-15 13:13:49.5522'''' p2:start=''''2014-08-15 13:13:49.0268'''' p2:time_diff=''''525.4646'''' xmlns:p2=''''Test2'''' />''", span="227-227"];
m8_114 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXDocument()", file="XmlNodeConverterTest.cs", label="XDocument d = XDocument.Parse(xml)", span="229-229"];
m8_118 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXDocument()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(xml, doc.ToString())", span="248-248"];
m8_115 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXDocument()", file="XmlNodeConverterTest.cs", label="string json = JsonConvert.SerializeObject(d, Formatting.Indented)", span="231-231"];
m8_116 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXDocument()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(@''{\r\n  ''''result'''': {\r\n    ''''@xp_0:end'''': ''''2014-08-15 13:12:11.9184'''',\r\n    ''''@xp_0:start'''': ''''2014-08-15 13:11:49.3140'''',\r\n    ''''@xp_0:time_diff'''': ''''22604.3836'''',\r\n    ''''@xmlns:xp_0'''': ''''Test1'''',\r\n    ''''@p2:end'''': ''''2014-08-15 13:13:49.5522'''',\r\n    ''''@p2:start'''': ''''2014-08-15 13:13:49.0268'''',\r\n    ''''@p2:time_diff'''': ''''525.4646'''',\r\n    ''''@xmlns:p2'''': ''''Test2''''\r\n  }\r\n}'', json)", span="233-244"];
m8_117 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXDocument()", file="XmlNodeConverterTest.cs", label="XDocument doc = JsonConvert.DeserializeObject<XDocument>(json)", span="246-246"];
m8_119 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXDocument()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXDocument()", span="225-225"];
m8_888 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Model.Model()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Model.Model()", span="2951-2951"];
m8_166 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeParseHandlingOffset()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeParseHandlingOffset()", span="392-392"];
m8_167 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeParseHandlingOffset()", file="XmlNodeConverterTest.cs", label="DateTimeOffset d = new DateTimeOffset(2012, 12, 12, 12, 44, 1, TimeSpan.FromHours(12).Add(TimeSpan.FromMinutes(34)))", span="394-394"];
m8_168 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeParseHandlingOffset()", file="XmlNodeConverterTest.cs", label="var x = new DateTimeOffsetContainer { Date = d }", span="395-395"];
m8_169 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeParseHandlingOffset()", file="XmlNodeConverterTest.cs", label="var json = JsonConvert.SerializeObject(x, Formatting.Indented)", span="397-397"];
m8_175 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeParseHandlingOffset()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(x.Date, x2.Date)", span="412-412"];
m8_170 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeParseHandlingOffset()", file="XmlNodeConverterTest.cs", label="XDocument doc1 = JsonConvert.DeserializeObject<XDocument>(json, new JsonSerializerSettings\r\n            {\r\n                Converters = { new XmlNodeConverter() },\r\n                DateParseHandling = DateParseHandling.DateTimeOffset\r\n            })", span="399-403"];
m8_171 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeParseHandlingOffset()", file="XmlNodeConverterTest.cs", label="var xml = doc1.ToString()", span="405-405"];
m8_173 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeParseHandlingOffset()", file="XmlNodeConverterTest.cs", label="string json2 = JsonConvert.SerializeObject(doc1, Formatting.Indented)", span="408-408"];
m8_172 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeParseHandlingOffset()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(''<Date>2012-12-12T12:44:01+12:34</Date>'', xml)", span="406-406"];
m8_174 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeParseHandlingOffset()", file="XmlNodeConverterTest.cs", label="DateTimeOffsetContainer x2 = JsonConvert.DeserializeObject<DateTimeOffsetContainer>(json2)", span="410-410"];
m8_176 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeParseHandlingOffset()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeParseHandlingOffset()", span="392-392"];
m8_237 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", span="575-575"];
m8_238 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs", label="XmlDocument doc = new XmlDocument()", span="577-577"];
m8_239 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs", label="string jsonText", span="578-578"];
m8_251 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs", label="XmlProcessingInstruction instruction = doc.CreateProcessingInstruction(''xml-stylesheet'', @''href=''''classic.xsl'''' type=''''text/xml'''''')", span="610-610"];
m8_254 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs", label="XmlCDataSection cDataSection = doc.CreateCDataSection(''<Kiwi>true</Kiwi>'')", span="617-617"];
m8_257 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs", label="XmlElement element = doc.CreateElement(''xs'', ''Choice'', ''http://www.w3.org/2001/XMLSchema'')", span="624-624"];
m8_258 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs", label="element.SetAttributeNode(doc.CreateAttribute(''msdata'', ''IsDataSet'', ''urn:schemas-microsoft-com:xml-msdata''))", span="625-625"];
m8_259 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs", label="XmlAttribute aa = doc.CreateAttribute(@''xmlns'', ''xs'', ''http://www.w3.org/2000/xmlns/'')", span="627-627"];
m8_262 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs", label="aa = doc.CreateAttribute(@''xmlns'', ''msdata'', ''http://www.w3.org/2000/xmlns/'')", span="631-631"];
m8_267 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs", label="doc.AppendChild(element)", span="638-638"];
m8_240 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs", label="string xml = @''<?xml version=''''1.0'''' encoding=''''utf-8'''' ?>\r\n<xs:schema xs:id=''''SomeID'''' \r\n	xmlns='''''''' \r\n	xmlns:xs=''''http://www.w3.org/2001/XMLSchema'''' \r\n	xmlns:msdata=''''urn:schemas-microsoft-com:xml-msdata''''>\r\n	<xs:element name=''''MyDataSet'''' msdata:IsDataSet=''''true''''>\r\n	</xs:element>\r\n</xs:schema>''", span="580-587"];
m8_241 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs", label="XmlDocument document = new XmlDocument()", span="589-589"];
m8_242 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs", label="document.LoadXml(xml)", span="590-590"];
m8_247 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs", label="XDocument d = XDocument.Parse(xml)", span="601-601"];
m8_243 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs", label="XmlAttribute attribute = document.DocumentElement.ChildNodes[0].Attributes[''IsDataSet'', ''urn:schemas-microsoft-com:xml-msdata'']", span="593-593"];
m8_244 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs", label="attribute.Value = ''true''", span="594-594"];
m8_245 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs", label="jsonText = JsonConvert.SerializeXmlNode(attribute)", span="596-596"];
m8_246 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(@''{''''@msdata:IsDataSet'''':''''true''''}'', jsonText)", span="598-598"];
m8_248 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs", label="XAttribute a = d.Root.Element(''{http://www.w3.org/2001/XMLSchema}element'').Attribute(''{urn:schemas-microsoft-com:xml-msdata}IsDataSet'')", span="602-602"];
m8_249 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs", label="jsonText = JsonConvert.SerializeXNode(a)", span="604-604"];
m8_250 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(@''{''''@msdata:IsDataSet'''':''''true''''}'', jsonText)", span="606-606"];
m8_252 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs", label="jsonText = JsonConvert.SerializeXmlNode(instruction)", span="612-612"];
m8_265 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs", label="element.AppendChild(instruction)", span="635-635"];
m8_253 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(@''{''''?xml-stylesheet'''':''''href=\''''classic.xsl\'''' type=\''''text/xml\''''''''}'', jsonText)", span="614-614"];
m8_255 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs", label="jsonText = JsonConvert.SerializeXmlNode(cDataSection)", span="619-619"];
m8_266 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs", label="element.AppendChild(cDataSection)", span="636-636"];
m8_256 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(@''{''''#cdata-section'''':''''<Kiwi>true</Kiwi>''''}'', jsonText)", span="621-621"];
m8_261 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs", label="element.SetAttributeNode(aa)", span="629-629"];
m8_264 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs", label="element.SetAttributeNode(aa)", span="633-633"];
m8_268 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs", label="jsonText = JsonConvert.SerializeXmlNode(element, Formatting.Indented)", span="640-640"];
m8_260 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs", label="aa.Value = ''http://www.w3.org/2001/XMLSchema''", span="628-628"];
m8_263 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs", label="aa.Value = ''urn:schemas-microsoft-com:xml-msdata''", span="632-632"];
m8_269 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(@''{\r\n  ''''xs:Choice'''': {\r\n    ''''@msdata:IsDataSet'''': '''''''',\r\n    ''''@xmlns:xs'''': ''''http://www.w3.org/2001/XMLSchema'''',\r\n    ''''@xmlns:msdata'''': ''''urn:schemas-microsoft-com:xml-msdata'''',\r\n    ''''?xml-stylesheet'''': ''''href=\''''classic.xsl\'''' type=\''''text/xml\'''''''',\r\n    ''''#cdata-section'''': ''''<Kiwi>true</Kiwi>''''\r\n  }\r\n}'', jsonText)", span="642-650"];
m8_270 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", span="575-575"];
m8_21 [cluster="Unk.ReadFrom", file="XmlNodeConverterTest.cs", label="Entry Unk.ReadFrom", span=""];
m8_142 [cluster="Unk.>", file="XmlNodeConverterTest.cs", label="Entry Unk.>", span=""];
m8_371 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.OtherElementDataTypes()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.OtherElementDataTypes()", span="1041-1041"];
m8_372 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.OtherElementDataTypes()", file="XmlNodeConverterTest.cs", label="string jsonText = @''{''''?xml'''':{''''@version'''':''''1.0'''',''''@standalone'''':''''no''''},''''root'''':{''''person'''':[{''''@id'''':''''1'''',''''Float'''':2.5,''''Integer'''':99},{''''Boolean'''':true,''''@id'''':''''2'''',''''date'''':''''\/Date(954374400000)\/''''}]}}''", span="1043-1043"];
m8_373 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.OtherElementDataTypes()", file="XmlNodeConverterTest.cs", label="XmlDocument newDoc = (XmlDocument)DeserializeXmlNode(jsonText)", span="1045-1045"];
m8_374 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.OtherElementDataTypes()", file="XmlNodeConverterTest.cs", label="string expected = @''<?xml version=''''1.0'''' standalone=''''no''''?><root><person id=''''1''''><Float>2.5</Float><Integer>99</Integer></person><person id=''''2''''><Boolean>true</Boolean><date>2000-03-30T00:00:00Z</date></person></root>''", span="1047-1047"];
m8_375 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.OtherElementDataTypes()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(expected, newDoc.InnerXml)", span="1049-1049"];
m8_376 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.OtherElementDataTypes()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.OtherElementDataTypes()", span="1041-1041"];
m8_775 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Deserialize_XDocument_NoRoot()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Deserialize_XDocument_NoRoot()", span="2793-2793"];
m8_776 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Deserialize_XDocument_NoRoot()", file="XmlNodeConverterTest.cs", label="XDocument d = JsonConvert.DeserializeXNode(@''{}'')", span="2795-2795"];
m8_777 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Deserialize_XDocument_NoRoot()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(null, d.Root)", span="2797-2797"];
m8_778 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Deserialize_XDocument_NoRoot()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(null, d.Declaration)", span="2798-2798"];
m8_779 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Deserialize_XDocument_NoRoot()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Deserialize_XDocument_NoRoot()", span="2793-2793"];
m8_431 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesXDocument()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesXDocument()", span="1213-1213"];
m8_432 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesXDocument()", file="XmlNodeConverterTest.cs", label="string json = @''{''''count'''': 773840,''''photos'''': null}''", span="1215-1215"];
m8_433 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesXDocument()", file="XmlNodeConverterTest.cs", label="ExceptionAssert.Throws<JsonSerializationException>(\r\n                () => { JsonConvert.DeserializeXNode(json); },\r\n                ''JSON root object has multiple properties. The root object must have a single property in order to create a valid XML document. Consider specifying a DeserializeRootElementName. Path 'photos', line 1, position 26.'')", span="1217-1219"];
m8_434 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesXDocument()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesXDocument()", span="1213-1213"];
m8_529 [cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting, Newtonsoft.Json.JsonSerializerSettings)", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting, Newtonsoft.Json.JsonSerializerSettings)", span="618-618"];
m8_377 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NoRootObject()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NoRootObject()", span="1053-1053"];
m8_378 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NoRootObject()", file="XmlNodeConverterTest.cs", label="ExceptionAssert.Throws<JsonSerializationException>(() => { XmlDocument newDoc = (XmlDocument)JsonConvert.DeserializeXmlNode(@''[1]''); }, ''XmlNodeConverter can only convert JSON that begins with an object. Path '', line 1, position 1.'')", span="1055-1055"];
m8_379 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NoRootObject()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NoRootObject()", span="1053-1053"];
m8_706 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializingXmlNamespaceScope()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializingXmlNamespaceScope()", span="2623-2623"];
m8_707 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializingXmlNamespaceScope()", file="XmlNodeConverterTest.cs", label="var xmlString = @''<root xmlns=''''http://www.example.com/ns''''>\r\n  <a/>\r\n  <bns:b xmlns:bns=''''http://www.example.com/ns''''/>\r\n  <c/>\r\n</root>''", span="2625-2629"];
m8_708 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializingXmlNamespaceScope()", file="XmlNodeConverterTest.cs", label="var xml = XElement.Parse(xmlString)", span="2632-2632"];
m8_712 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializingXmlNamespaceScope()", file="XmlNodeConverterTest.cs", label="xml1.LoadXml(xmlString)", span="2640-2640"];
m8_709 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializingXmlNamespaceScope()", file="XmlNodeConverterTest.cs", label="var json1 = JsonConvert.SerializeObject(xml)", span="2634-2634"];
m8_710 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializingXmlNamespaceScope()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(@''{''''root'''':{''''@xmlns'''':''''http://www.example.com/ns'''',''''a'''':null,''''bns:b'''':{''''@xmlns:bns'''':''''http://www.example.com/ns''''},''''c'''':null}}'', json1)", span="2636-2636"];
m8_711 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializingXmlNamespaceScope()", file="XmlNodeConverterTest.cs", label="var xml1 = new XmlDocument()", span="2639-2639"];
m8_713 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializingXmlNamespaceScope()", file="XmlNodeConverterTest.cs", label="var json2 = JsonConvert.SerializeObject(xml1)", span="2642-2642"];
m8_714 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializingXmlNamespaceScope()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(@''{''''root'''':{''''@xmlns'''':''''http://www.example.com/ns'''',''''a'''':null,''''bns:b'''':{''''@xmlns:bns'''':''''http://www.example.com/ns''''},''''c'''':null}}'', json2)", span="2644-2644"];
m8_715 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializingXmlNamespaceScope()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializingXmlNamespaceScope()", span="2623-2623"];
m8_800 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Utc()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Utc()", span="2834-2834"];
m8_801 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Utc()", file="XmlNodeConverterTest.cs", label="string json = @''{''''CreatedDate'''': ''''2014-01-23T00:00:00Z''''}''", span="2836-2836"];
m8_802 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Utc()", file="XmlNodeConverterTest.cs", label="var dxml = JsonConvert.DeserializeXNode(json, ''root'')", span="2837-2837"];
m8_803 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Utc()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(''2014-01-23T00:00:00Z'', dxml.Root.Element(''CreatedDate'').Value)", span="2838-2838"];
m8_804 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Utc()", file="XmlNodeConverterTest.cs", label="Console.WriteLine(''DateTimeToXml_Utc: '' + dxml.Root.Element(''CreatedDate'').Value)", span="2840-2840"];
m8_805 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Utc()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Utc()", span="2834-2834"];
m8_17 [cluster="Unk.Load", file="XmlNodeConverterTest.cs", label="Entry Unk.Load", span=""];
m8_500 [cluster="Newtonsoft.Json.Linq.JToken.ToString()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Linq.JToken.ToString()", span="422-422"];
m8_893 [cluster="Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter, object)", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter, object)", span="1042-1042"];
m8_49 [cluster="Newtonsoft.Json.JsonSerializer.JsonSerializer()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.JsonSerializer.JsonSerializer()", span="530-530"];
m8_646 [cluster="Newtonsoft.Json.Linq.JToken.CreateReader()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Linq.JToken.CreateReader()", span="1886-1886"];
m8_644 [cluster="Newtonsoft.Json.Linq.JObject.FromObject(object)", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Linq.JObject.FromObject(object)", span="442-442"];
m8_108 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Foo.Foo()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Foo.Foo()", span="207-207"];
m8_438 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesAddRootElement()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesAddRootElement()", span="1224-1224"];
m8_439 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesAddRootElement()", file="XmlNodeConverterTest.cs", label="string json = @''{''''count'''': 773840,''''photos'''': 773840}''", span="1226-1226"];
m8_440 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesAddRootElement()", file="XmlNodeConverterTest.cs", label="XmlDocument newDoc = JsonConvert.DeserializeXmlNode(json, ''myRoot'')", span="1229-1229"];
m8_442 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesAddRootElement()", file="XmlNodeConverterTest.cs", label="XDocument newXDoc = JsonConvert.DeserializeXNode(json, ''myRoot'')", span="1235-1235"];
m8_441 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesAddRootElement()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(@''<myRoot><count>773840</count><photos>773840</photos></myRoot>'', newDoc.InnerXml)", span="1231-1231"];
m8_443 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesAddRootElement()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(@''<myRoot><count>773840</count><photos>773840</photos></myRoot>'', newXDoc.ToString(SaveOptions.DisableFormatting))", span="1237-1237"];
m8_444 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesAddRootElement()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesAddRootElement()", span="1224-1224"];
m8_76 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNonKnownDollarProperty()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNonKnownDollarProperty()", span="169-169"];
m8_77 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNonKnownDollarProperty()", file="XmlNodeConverterTest.cs", label="string json1 = @''{''''$JELLY'''':''''test''''}''", span="171-171"];
m8_78 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNonKnownDollarProperty()", file="XmlNodeConverterTest.cs", label="var doc = JsonConvert.DeserializeXNode(json1)", span="173-173"];
m8_82 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNonKnownDollarProperty()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(json1, json2)", span="181-181"];
m8_79 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNonKnownDollarProperty()", file="XmlNodeConverterTest.cs", label="Console.WriteLine(doc.ToString())", span="175-175"];
m8_80 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNonKnownDollarProperty()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(@''<_x0024_JELLY>test</_x0024_JELLY>'', doc.ToString())", span="177-177"];
m8_81 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNonKnownDollarProperty()", file="XmlNodeConverterTest.cs", label="var json2 = JsonConvert.SerializeXNode(doc)", span="179-179"];
m8_83 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNonKnownDollarProperty()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNonKnownDollarProperty()", span="169-169"];
m8_815 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Unspecified_Precision()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Unspecified_Precision()", span="2856-2856"];
m8_816 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Unspecified_Precision()", file="XmlNodeConverterTest.cs", label="string json = @''{''''CreatedDate'''': ''''2014-01-23T00:00:00.1234567''''}''", span="2858-2858"];
m8_817 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Unspecified_Precision()", file="XmlNodeConverterTest.cs", label="var dxml = JsonConvert.DeserializeXNode(json, ''root'')", span="2859-2859"];
m8_818 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Unspecified_Precision()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(''2014-01-23T00:00:00.1234567'', dxml.Root.Element(''CreatedDate'').Value)", span="2860-2860"];
m8_819 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Unspecified_Precision()", file="XmlNodeConverterTest.cs", label="Console.WriteLine(''DateTimeToXml_Unspecified: '' + dxml.Root.Element(''CreatedDate'').Value)", span="2862-2862"];
m8_820 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Unspecified_Precision()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Unspecified_Precision()", span="2856-2856"];
m8_151 [cluster="Unk.Nodes", file="XmlNodeConverterTest.cs", label="Entry Unk.Nodes", span=""];
m8_456 [cluster="System.Console.WriteLine(string)", file="XmlNodeConverterTest.cs", label="Entry System.Console.WriteLine(string)", span="0-0"];
m8_63 [cluster="XmlWriterSettings.cstr", file="XmlNodeConverterTest.cs", label="Entry XmlWriterSettings.cstr", span=""];
m8_144 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXElement()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXElement()", span="322-322"];
m8_145 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXElement()", file="XmlNodeConverterTest.cs", label="string xml = @''<payload>\r\n    <Country>6</Country>\r\n    <FinancialTransactionApprovalRequestUID>79</FinancialTransactionApprovalRequestUID>\r\n    <TransactionStatus>Approved</TransactionStatus>\r\n    <StatusChangeComment></StatusChangeComment>\r\n    <RequestedBy>Someone</RequestedBy>\r\n</payload>''", span="324-330"];
m8_146 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXElement()", file="XmlNodeConverterTest.cs", label="var xmlDocument = XDocument.Parse(xml)", span="332-332"];
m8_147 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXElement()", file="XmlNodeConverterTest.cs", label="var result = xmlDocument.Root.Nodes().ToArray()", span="334-334"];
m8_148 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXElement()", file="XmlNodeConverterTest.cs", label="var json = JsonConvert.SerializeObject(result, Formatting.Indented)", span="336-336"];
m8_149 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXElement()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(@''[\r\n  {\r\n    ''''Country'''': ''''6''''\r\n  },\r\n  {\r\n    ''''FinancialTransactionApprovalRequestUID'''': ''''79''''\r\n  },\r\n  {\r\n    ''''TransactionStatus'''': ''''Approved''''\r\n  },\r\n  {\r\n    ''''StatusChangeComment'''': ''''''''\r\n  },\r\n  {\r\n    ''''RequestedBy'''': ''''Someone''''\r\n  }\r\n]'', json)", span="338-354"];
m8_150 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXElement()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXElement()", span="322-322"];
m8_643 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="XmlNodeConverterTest.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m8_23 [cluster="Unk.AreEqual", file="XmlNodeConverterTest.cs", label="Entry Unk.AreEqual", span=""];
m8_189 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyDocument()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyDocument()", span="433-433"];
m8_190 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyDocument()", file="XmlNodeConverterTest.cs", label="XmlDocument doc = new XmlDocument()", span="435-435"];
m8_191 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyDocument()", file="XmlNodeConverterTest.cs", label="doc.LoadXml(''<root />'')", span="436-436"];
m8_192 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyDocument()", file="XmlNodeConverterTest.cs", label="string json = JsonConvert.SerializeXmlNode(doc, Formatting.Indented, true)", span="438-438"];
m8_193 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyDocument()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(''null'', json)", span="439-439"];
m8_194 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyDocument()", file="XmlNodeConverterTest.cs", label="doc = new XmlDocument()", span="441-441"];
m8_195 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyDocument()", file="XmlNodeConverterTest.cs", label="doc.LoadXml(''<root></root>'')", span="442-442"];
m8_196 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyDocument()", file="XmlNodeConverterTest.cs", label="json = JsonConvert.SerializeXmlNode(doc, Formatting.Indented, true)", span="444-444"];
m8_197 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyDocument()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(@'''''''''''', json)", span="445-445"];
m8_198 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyDocument()", file="XmlNodeConverterTest.cs", label="XDocument doc1 = XDocument.Parse(''<root />'')", span="447-447"];
m8_199 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyDocument()", file="XmlNodeConverterTest.cs", label="json = JsonConvert.SerializeXNode(doc1, Formatting.Indented, true)", span="449-449"];
m8_200 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyDocument()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(''null'', json)", span="450-450"];
m8_201 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyDocument()", file="XmlNodeConverterTest.cs", label="doc1 = XDocument.Parse(''<root></root>'')", span="452-452"];
m8_202 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyDocument()", file="XmlNodeConverterTest.cs", label="json = JsonConvert.SerializeXNode(doc1, Formatting.Indented, true)", span="454-454"];
m8_203 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyDocument()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(@'''''''''''', json)", span="455-455"];
m8_204 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyDocument()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyDocument()", span="433-433"];
m8_101 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXElement()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXElement()", span="213-213"];
m8_102 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXElement()", file="XmlNodeConverterTest.cs", label="Foo foo = new Foo { Bar = null }", span="215-215"];
m8_103 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXElement()", file="XmlNodeConverterTest.cs", label="string json = JsonConvert.SerializeObject(foo)", span="216-216"];
m8_104 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXElement()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(@''{''''Bar'''':null}'', json)", span="218-218"];
m8_105 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXElement()", file="XmlNodeConverterTest.cs", label="Foo foo2 = JsonConvert.DeserializeObject<Foo>(json)", span="219-219"];
m8_106 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXElement()", file="XmlNodeConverterTest.cs", label="Assert.IsNull(foo2.Bar)", span="221-221"];
m8_107 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXElement()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXElement()", span="213-213"];
m8_813 [cluster="System.DateTime.Parse(string)", file="XmlNodeConverterTest.cs", label="Entry System.DateTime.Parse(string)", span="0-0"];
m8_51 [cluster="Unk.ToString", file="XmlNodeConverterTest.cs", label="Entry Unk.ToString", span=""];
m8_18 [cluster="XAttribute.cstr", file="XmlNodeConverterTest.cs", label="Entry XAttribute.cstr", span=""];
m8_716 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeNullableXml()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeNullableXml()", span="2657-2657"];
m8_717 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeNullableXml()", file="XmlNodeConverterTest.cs", label="var xml = new NullableXml { Name = ''test'', notNull = XElement.Parse(''<root>test</root>'') }", span="2659-2659"];
m8_718 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeNullableXml()", file="XmlNodeConverterTest.cs", label="var json = JsonConvert.SerializeObject(xml)", span="2660-2660"];
m8_720 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeNullableXml()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(xml.Name, w2.Name)", span="2663-2663"];
m8_721 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeNullableXml()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(xml.isNull, w2.isNull)", span="2664-2664"];
m8_722 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeNullableXml()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(xml.notNull.ToString(), w2.notNull.ToString())", span="2665-2665"];
m8_719 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeNullableXml()", file="XmlNodeConverterTest.cs", label="var w2 = JsonConvert.DeserializeObject<NullableXml>(json)", span="2662-2662"];
m8_723 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeNullableXml()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeNullableXml()", span="2657-2657"];
m8_84 [cluster="Unk.WriteLine", file="XmlNodeConverterTest.cs", label="Entry Unk.WriteLine", span=""];
m8_61 [cluster="Unk.Create", file="XmlNodeConverterTest.cs", label="Entry Unk.Create", span=""];
m8_0 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlNode(XmlNode)", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlNode(XmlNode)", span="61-61"];
m8_1 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlNode(XmlNode)", file="XmlNodeConverterTest.cs", label="string json = JsonConvert.SerializeXmlNode(node, Formatting.Indented)", span="63-63"];
m8_2 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlNode(XmlNode)", file="XmlNodeConverterTest.cs", label="XmlReader reader = new XmlNodeReader(node)", span="67-67"];
m8_4 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlNode(XmlNode)", file="XmlNodeConverterTest.cs", label="node is XmlDocument", span="74-74"];
m8_6 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlNode(XmlNode)", file="XmlNodeConverterTest.cs", label="node is XmlAttribute", span="78-78"];
m8_7 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlNode(XmlNode)", file="XmlNodeConverterTest.cs", label="XmlAttribute attribute = (XmlAttribute)node", span="80-80"];
m8_12 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlNode(XmlNode)", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(json, linqJson)", span="91-91"];
m8_13 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlNode(XmlNode)", file="XmlNodeConverterTest.cs", label="return json;", span="94-94"];
m8_3 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlNode(XmlNode)", file="XmlNodeConverterTest.cs", label="XObject xNode", span="73-73"];
m8_5 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlNode(XmlNode)", file="XmlNodeConverterTest.cs", label="xNode = XDocument.Load(reader)", span="76-76"];
m8_9 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlNode(XmlNode)", file="XmlNodeConverterTest.cs", label="reader.MoveToContent()", span="85-85"];
m8_10 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlNode(XmlNode)", file="XmlNodeConverterTest.cs", label="xNode = XNode.ReadFrom(reader)", span="86-86"];
m8_8 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlNode(XmlNode)", file="XmlNodeConverterTest.cs", label="xNode = new XAttribute(XName.Get(attribute.LocalName, attribute.NamespaceURI), attribute.Value)", span="81-81"];
m8_11 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlNode(XmlNode)", file="XmlNodeConverterTest.cs", label="string linqJson = JsonConvert.SerializeXNode(xNode, Formatting.Indented)", span="89-89"];
m8_14 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlNode(XmlNode)", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlNode(XmlNode)", span="61-61"];
m8_455 [cluster="Unk.IndentXml", file="XmlNodeConverterTest.cs", label="Entry Unk.IndentXml", span=""];
m8_848 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeElementImplicitAttributeNamespace()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeElementImplicitAttributeNamespace()", span="2913-2913"];
m8_849 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeElementImplicitAttributeNamespace()", file="XmlNodeConverterTest.cs", label="var original = new XElement(''{http://example.com}MyElement'')", span="2915-2915"];
m8_850 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeElementImplicitAttributeNamespace()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(@''<MyElement xmlns=''''http://example.com'''' />'', original.ToString())", span="2916-2916"];
m8_851 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeElementImplicitAttributeNamespace()", file="XmlNodeConverterTest.cs", label="var json = JsonConvert.SerializeObject(original)", span="2918-2918"];
m8_852 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeElementImplicitAttributeNamespace()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(@''{''''MyElement'''':{''''@xmlns'''':''''http://example.com''''}}'', json)", span="2919-2919"];
m8_853 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeElementImplicitAttributeNamespace()", file="XmlNodeConverterTest.cs", label="var deserialized = JsonConvert.DeserializeObject<XElement>(json)", span="2921-2921"];
m8_854 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeElementImplicitAttributeNamespace()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(@''<MyElement xmlns=''''http://example.com'''' />'', deserialized.ToString())", span="2922-2922"];
m8_855 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeElementImplicitAttributeNamespace()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeElementImplicitAttributeNamespace()", span="2913-2913"];
m8_177 [cluster="System.DateTimeOffset.DateTimeOffset(int, int, int, int, int, int, System.TimeSpan)", file="XmlNodeConverterTest.cs", label="Entry System.DateTimeOffset.DateTimeOffset(int, int, int, int, int, int, System.TimeSpan)", span="0-0"];
m8_892 [cluster="Newtonsoft.Json.JsonTextWriter.JsonTextWriter(System.IO.TextWriter)", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.JsonTextWriter.JsonTextWriter(System.IO.TextWriter)", span="149-149"];
m8_122 [cluster="Newtonsoft.Json.Tests.StringAssert.AreEqual(string, string)", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.StringAssert.AreEqual(string, string)", span="338-338"];
m8_341 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentDeserialize()", file="XmlNodeConverterTest.cs", label="string formattedXml = GetIndentedInnerXml(doc)", span="949-949"];
m8_227 [cluster="lambda expression", file="XmlNodeConverterTest.cs", label="JsonConvert.DeserializeXmlNode(json)", span="512-512"];
m8_226 [cluster="lambda expression", file="XmlNodeConverterTest.cs", label="Entry lambda expression", span="512-512"];
m8_228 [cluster="lambda expression", file="XmlNodeConverterTest.cs", label="Exit lambda expression", span="512-512"];
m8_380 [cluster="lambda expression", file="XmlNodeConverterTest.cs", label="Entry lambda expression", span="1055-1055"];
m8_381 [cluster="lambda expression", file="XmlNodeConverterTest.cs", label="XmlDocument newDoc = (XmlDocument)JsonConvert.DeserializeXmlNode(@''[1]'')", span="1055-1055"];
m8_382 [cluster="lambda expression", file="XmlNodeConverterTest.cs", label="Exit lambda expression", span="1055-1055"];
m8_386 [cluster="lambda expression", file="XmlNodeConverterTest.cs", label="Entry lambda expression", span="1062-1062"];
m8_387 [cluster="lambda expression", file="XmlNodeConverterTest.cs", label="XmlDocument newDoc = (XmlDocument)JsonConvert.DeserializeXmlNode(@''{Prop1:1,Prop2:2}'')", span="1062-1062"];
m8_388 [cluster="lambda expression", file="XmlNodeConverterTest.cs", label="Exit lambda expression", span="1062-1062"];
m8_429 [cluster="lambda expression", file="XmlNodeConverterTest.cs", label="JsonConvert.DeserializeXmlNode(json)", span="1206-1206"];
m8_428 [cluster="lambda expression", file="XmlNodeConverterTest.cs", label="Entry lambda expression", span="1206-1206"];
m8_430 [cluster="lambda expression", file="XmlNodeConverterTest.cs", label="Exit lambda expression", span="1206-1206"];
m8_436 [cluster="lambda expression", file="XmlNodeConverterTest.cs", label="JsonConvert.DeserializeXNode(json)", span="1218-1218"];
m8_435 [cluster="lambda expression", file="XmlNodeConverterTest.cs", label="Entry lambda expression", span="1218-1218"];
m8_437 [cluster="lambda expression", file="XmlNodeConverterTest.cs", label="Exit lambda expression", span="1218-1218"];
m8_560 [cluster="lambda expression", file="XmlNodeConverterTest.cs", label="JsonConvert.DeserializeXmlNode(json, ''root'')", span="1756-1756"];
m8_559 [cluster="lambda expression", file="XmlNodeConverterTest.cs", label="Entry lambda expression", span="1756-1756"];
m8_561 [cluster="lambda expression", file="XmlNodeConverterTest.cs", label="Exit lambda expression", span="1756-1756"];
m8_584 [cluster="lambda expression", file="XmlNodeConverterTest.cs", label="DeserializeXmlNode(json)", span="1884-1884"];
m8_583 [cluster="lambda expression", file="XmlNodeConverterTest.cs", label="Entry lambda expression", span="1884-1884"];
m8_585 [cluster="lambda expression", file="XmlNodeConverterTest.cs", label="Exit lambda expression", span="1884-1884"];
m8_760 [cluster="lambda expression", file="XmlNodeConverterTest.cs", label="JsonConvert.DeserializeXmlNode(json)", span="2763-2763"];
m8_759 [cluster="lambda expression", file="XmlNodeConverterTest.cs", label="Entry lambda expression", span="2763-2763"];
m8_761 [cluster="lambda expression", file="XmlNodeConverterTest.cs", label="Exit lambda expression", span="2763-2763"];
m8_342 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentDeserialize()", color=green, community=0, file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(expected, formattedXml)", prediction=55, span="951-951"];
m8_343 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentDeserialize()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentDeserialize()", span="919-919"];
m8_635 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeNonInt64IntegerValues()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeNonInt64IntegerValues()", span="2076-2076"];
m8_636 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeNonInt64IntegerValues()", file="XmlNodeConverterTest.cs", label="var dict = new Dictionary<string, object> { { ''Int16'', (short)1 }, { ''Float'', 2f }, { ''Int32'', 3 } }", span="2078-2078"];
m8_637 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeNonInt64IntegerValues()", file="XmlNodeConverterTest.cs", label="var obj = JObject.FromObject(dict)", span="2079-2079"];
m8_638 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeNonInt64IntegerValues()", file="XmlNodeConverterTest.cs", label="var serializer = JsonSerializer.Create(new JsonSerializerSettings { Converters = { new XmlNodeConverter() { DeserializeRootElementName = ''root'' } } })", span="2080-2080"];
m8_639 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeNonInt64IntegerValues()", file="XmlNodeConverterTest.cs", label="var reader = obj.CreateReader()", span="2081-2081"];
m8_640 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeNonInt64IntegerValues()", file="XmlNodeConverterTest.cs", label="var value = (XmlDocument)serializer.Deserialize(reader, typeof(XmlDocument))", span="2083-2083"];
m8_641 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeNonInt64IntegerValues()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(@''<root><Int16>1</Int16><Float>2</Float><Int32>3</Int32></root>'', value.InnerXml)", span="2085-2085"];
m8_642 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeNonInt64IntegerValues()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeNonInt64IntegerValues()", span="2076-2076"];
m8_701 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeAttributePropertyNotAtStart()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeAttributePropertyNotAtStart()", span="2612-2612"];
m8_702 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeAttributePropertyNotAtStart()", file="XmlNodeConverterTest.cs", label="string json = @''{''''item'''': {''''@action'''': ''''update'''', ''''@itemid'''': ''''1'''', ''''elements'''': [{''''@action'''': ''''none'''', ''''@id'''': ''''2''''},{''''@action'''': ''''none'''', ''''@id'''': ''''3''''}],''''@description'''': ''''temp''''}}''", span="2614-2614"];
m8_703 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeAttributePropertyNotAtStart()", file="XmlNodeConverterTest.cs", label="XmlDocument xmldoc = JsonConvert.DeserializeXmlNode(json)", span="2616-2616"];
m8_704 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeAttributePropertyNotAtStart()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(@''<item action=''''update'''' itemid=''''1'''' description=''''temp''''><elements action=''''none'''' id=''''2'''' /><elements action=''''none'''' id=''''3'''' /></item>'', xmldoc.InnerXml)", span="2618-2618"];
m8_705 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeAttributePropertyNotAtStart()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeAttributePropertyNotAtStart()", span="2612-2612"];
m8_774 [cluster="XDocument.cstr", file="XmlNodeConverterTest.cs", label="Entry XDocument.cstr", span=""];
m8_671 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.cstr", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Converters.XmlNodeConverter.cstr", span=""];
m8_513 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataProperties()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataProperties()", span="1596-1596"];
m8_514 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataProperties()", file="XmlNodeConverterTest.cs", label="PreserveReferencesHandlingTests.CircularDictionary circularDictionary = new PreserveReferencesHandlingTests.CircularDictionary()", span="1598-1598"];
m8_515 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataProperties()", file="XmlNodeConverterTest.cs", label="circularDictionary.Add(''other'', new PreserveReferencesHandlingTests.CircularDictionary { { ''blah'', null } })", span="1599-1599"];
m8_516 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataProperties()", file="XmlNodeConverterTest.cs", label="circularDictionary.Add(''self'', circularDictionary)", span="1600-1600"];
m8_517 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataProperties()", file="XmlNodeConverterTest.cs", label="string json = JsonConvert.SerializeObject(circularDictionary, Formatting.Indented,\r\n                new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.All })", span="1602-1603"];
m8_518 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataProperties()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(@''{\r\n  ''''$id'''': ''''1'''',\r\n  ''''other'''': {\r\n    ''''$id'''': ''''2'''',\r\n    ''''blah'''': null\r\n  },\r\n  ''''self'''': {\r\n    ''''$ref'''': ''''1''''\r\n  }\r\n}'', json)", span="1605-1614"];
m8_519 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataProperties()", file="XmlNodeConverterTest.cs", label="XmlNode node = DeserializeXmlNode(json, ''root'')", span="1616-1616"];
m8_520 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataProperties()", file="XmlNodeConverterTest.cs", label="string xml = GetIndentedInnerXml(node)", span="1617-1617"];
m8_523 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataProperties()", file="XmlNodeConverterTest.cs", label="string xmlJson = SerializeXmlNode(node)", span="1628-1628"];
m8_521 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataProperties()", file="XmlNodeConverterTest.cs", label="string expected = @''<?xml version=''''1.0'''' encoding=''''utf-16''''?>\r\n<root xmlns:json=''''http://james.newtonking.com/projects/json'''' json:id=''''1''''>\r\n  <other json:id=''''2''''>\r\n    <blah />\r\n  </other>\r\n  <self json:ref=''''1'''' />\r\n</root>''", span="1618-1624"];
m8_522 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataProperties()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(expected, xml)", span="1626-1626"];
m8_524 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataProperties()", file="XmlNodeConverterTest.cs", label="string expectedXmlJson = @''{\r\n  ''''root'''': {\r\n    ''''$id'''': ''''1'''',\r\n    ''''other'''': {\r\n      ''''$id'''': ''''2'''',\r\n      ''''blah'''': null\r\n    },\r\n    ''''self'''': {\r\n      ''''$ref'''': ''''1''''\r\n    }\r\n  }\r\n}''", span="1629-1640"];
m8_525 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataProperties()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(expectedXmlJson, xmlJson)", span="1642-1642"];
m8_526 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataProperties()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataProperties()", span="1596-1596"];
m8_827 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Local_Precision()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Local_Precision()", span="2876-2876"];
m8_828 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Local_Precision()", file="XmlNodeConverterTest.cs", label="DateTime dt = DateTime.Parse(''2014-01-23T00:00:00.1234567+01:00'')", span="2878-2878"];
m8_829 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Local_Precision()", file="XmlNodeConverterTest.cs", label="string json = @''{''''CreatedDate'''': ''''2014-01-23T00:00:00.1234567+01:00''''}''", span="2880-2880"];
m8_831 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Local_Precision()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(dt.ToString(''yyyy-MM-ddTHH:mm:ss.FFFFFFFK'', CultureInfo.InvariantCulture), dxml.Root.Element(''CreatedDate'').Value)", span="2882-2882"];
m8_830 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Local_Precision()", file="XmlNodeConverterTest.cs", label="var dxml = JsonConvert.DeserializeXNode(json, ''root'')", span="2881-2881"];
m8_832 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Local_Precision()", file="XmlNodeConverterTest.cs", label="Console.WriteLine(''DateTimeToXml_Local: '' + dxml.Root.Element(''CreatedDate'').Value)", span="2884-2884"];
m8_833 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Local_Precision()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Local_Precision()", span="2876-2876"];
m8_27 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string, string)", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string, string)", span="102-102"];
m8_28 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string, string)", file="XmlNodeConverterTest.cs", label="JsonTextReader reader", span="104-104"];
m8_29 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string, string)", file="XmlNodeConverterTest.cs", label="reader = new JsonTextReader(new StringReader(json))", span="106-106"];
m8_32 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string, string)", file="XmlNodeConverterTest.cs", label="deserializeRootElementName != null", span="109-109"];
m8_33 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string, string)", file="XmlNodeConverterTest.cs", label="converter.DeserializeRootElementName = deserializeRootElementName", span="111-111"];
m8_36 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string, string)", file="XmlNodeConverterTest.cs", label="reader = new JsonTextReader(new StringReader(json))", span="119-119"];
m8_30 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string, string)", file="XmlNodeConverterTest.cs", label="reader.Read()", span="107-107"];
m8_34 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string, string)", file="XmlNodeConverterTest.cs", label="XmlNode node = (XmlNode)converter.ReadJson(reader, typeof(XmlDocument), null, new JsonSerializer())", span="114-114"];
m8_31 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string, string)", file="XmlNodeConverterTest.cs", label="XmlNodeConverter converter = new XmlNodeConverter()", span="108-108"];
m8_38 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string, string)", file="XmlNodeConverterTest.cs", label="XDocument d = (XDocument)converter.ReadJson(reader, typeof(XDocument), null, new JsonSerializer())", span="121-121"];
m8_35 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string, string)", file="XmlNodeConverterTest.cs", label="string xmlText = node.OuterXml", span="117-117"];
m8_43 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string, string)", file="XmlNodeConverterTest.cs", label="return node;", span="132-132"];
m8_42 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string, string)", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(xmlText, linqXmlText)", span="129-129"];
m8_37 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string, string)", file="XmlNodeConverterTest.cs", label="reader.Read()", span="120-120"];
m8_39 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string, string)", file="XmlNodeConverterTest.cs", label="string linqXmlText = d.ToString(SaveOptions.DisableFormatting)", span="123-123"];
m8_40 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string, string)", file="XmlNodeConverterTest.cs", label="d.Declaration != null", span="124-124"];
m8_41 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string, string)", file="XmlNodeConverterTest.cs", label="linqXmlText = d.Declaration + linqXmlText", span="126-126"];
m8_44 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string, string)", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string, string)", span="102-102"];
m8_275 [cluster="Unk.CreateElement", file="XmlNodeConverterTest.cs", label="Entry Unk.CreateElement", span=""];
m8_65 [cluster="Unk.WriteNode", file="XmlNodeConverterTest.cs", label="Entry Unk.WriteNode", span=""];
m8_527 [cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.CircularDictionary.CircularDictionary()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.CircularDictionary.CircularDictionary()", span="433-433"];
m8_755 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RootPropertyError()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RootPropertyError()", span="2739-2739"];
m8_756 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RootPropertyError()", file="XmlNodeConverterTest.cs", label="string json = @''{\r\n  ''''$id'''': ''''1'''',\r\n  ''''AOSLocaleName'''': ''''en-US'''',\r\n  ''''AXLanguage'''': ''''EN-AU'''',\r\n  ''''Company'''': ''''AURE'''',\r\n  ''''CompanyTimeZone'''': 8,\r\n  ''''CurrencyInfo'''': {\r\n    ''''$id'''': ''''2'''',\r\n    ''''CurrencyCode'''': ''''AUD'''',\r\n    ''''Description'''': ''''Australian Dollar'''',\r\n    ''''ExchangeRate'''': 100.0,\r\n    ''''ISOCurrencyCode'''': ''''AUD'''',\r\n    ''''Prefix'''': '''''''',\r\n    ''''Suffix'''': ''''''''\r\n  },\r\n  ''''IsSysAdmin'''': true,\r\n  ''''UserId'''': ''''lamar.miller'''',\r\n  ''''UserPreferredCalendar'''': 0,\r\n  ''''UserPreferredTimeZone'''': 8\r\n}''", span="2741-2760"];
m8_757 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RootPropertyError()", file="XmlNodeConverterTest.cs", label="ExceptionAssert.Throws<JsonSerializationException>(\r\n                () => JsonConvert.DeserializeXmlNode(json),\r\n                ''JSON root object has property '$id' that will be converted to an attribute. A root object cannot have any attribute properties. Consider specifying a DeserializeRootElementName. Path '$id', line 2, position 12.'')", span="2762-2764"];
m8_758 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RootPropertyError()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RootPropertyError()", span="2739-2739"];
m8_46 [cluster="System.IO.StringReader.StringReader(string)", file="XmlNodeConverterTest.cs", label="Entry System.IO.StringReader.StringReader(string)", span="0-0"];
m8_466 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNestedArraysToXml()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNestedArraysToXml()", span="1366-1366"];
m8_467 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNestedArraysToXml()", file="XmlNodeConverterTest.cs", label="string json = @''{\r\n  ''''available_sizes'''': [\r\n    [\r\n      [113, 150],\r\n      ''''assets/images/resized/0001/1070/11070v1-max-150x150.jpg''''\r\n    ],\r\n    [\r\n      [189, 250],\r\n      ''''assets/images/resized/0001/1070/11070v1-max-250x250.jpg''''\r\n    ],\r\n    [\r\n      [341, 450],\r\n      ''''assets/images/resized/0001/1070/11070v1-max-450x450.jpg''''\r\n    ]\r\n  ]\r\n}''", span="1368-1383"];
m8_468 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNestedArraysToXml()", file="XmlNodeConverterTest.cs", label="XmlDocument newDoc = JsonConvert.DeserializeXmlNode(json, ''myRoot'')", span="1386-1386"];
m8_470 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNestedArraysToXml()", file="XmlNodeConverterTest.cs", label="XDocument newXDoc = JsonConvert.DeserializeXNode(json, ''myRoot'')", span="1392-1392"];
m8_469 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNestedArraysToXml()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(@''<myRoot><available_sizes><available_sizes><available_sizes>113</available_sizes><available_sizes>150</available_sizes></available_sizes><available_sizes>assets/images/resized/0001/1070/11070v1-max-150x150.jpg</available_sizes></available_sizes><available_sizes><available_sizes><available_sizes>189</available_sizes><available_sizes>250</available_sizes></available_sizes><available_sizes>assets/images/resized/0001/1070/11070v1-max-250x250.jpg</available_sizes></available_sizes><available_sizes><available_sizes><available_sizes>341</available_sizes><available_sizes>450</available_sizes></available_sizes><available_sizes>assets/images/resized/0001/1070/11070v1-max-450x450.jpg</available_sizes></available_sizes></myRoot>'', newDoc.InnerXml)", span="1388-1388"];
m8_471 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNestedArraysToXml()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(@''<myRoot><available_sizes><available_sizes><available_sizes>113</available_sizes><available_sizes>150</available_sizes></available_sizes><available_sizes>assets/images/resized/0001/1070/11070v1-max-150x150.jpg</available_sizes></available_sizes><available_sizes><available_sizes><available_sizes>189</available_sizes><available_sizes>250</available_sizes></available_sizes><available_sizes>assets/images/resized/0001/1070/11070v1-max-250x250.jpg</available_sizes></available_sizes><available_sizes><available_sizes><available_sizes>341</available_sizes><available_sizes>450</available_sizes></available_sizes><available_sizes>assets/images/resized/0001/1070/11070v1-max-450x450.jpg</available_sizes></available_sizes></myRoot>'', newXDoc.ToString(SaveOptions.DisableFormatting))", span="1394-1394"];
m8_472 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNestedArraysToXml()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNestedArraysToXml()", span="1366-1366"];
m8_794 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Unspecified()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Unspecified()", span="2824-2824"];
m8_795 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Unspecified()", file="XmlNodeConverterTest.cs", label="string json = @''{''''CreatedDate'''': ''''2014-01-23T00:00:00''''}''", span="2826-2826"];
m8_796 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Unspecified()", file="XmlNodeConverterTest.cs", label="var dxml = JsonConvert.DeserializeXNode(json, ''root'')", span="2827-2827"];
m8_797 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Unspecified()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(''2014-01-23T00:00:00'', dxml.Root.Element(''CreatedDate'').Value)", span="2828-2828"];
m8_798 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Unspecified()", file="XmlNodeConverterTest.cs", label="Console.WriteLine(''DateTimeToXml_Unspecified: '' + dxml.Root.Element(''CreatedDate'').Value)", span="2830-2830"];
m8_799 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Unspecified()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Unspecified()", span="2824-2824"];
m8_389 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JavaScriptConstructor()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JavaScriptConstructor()", span="1067-1067"];
m8_390 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JavaScriptConstructor()", file="XmlNodeConverterTest.cs", label="string jsonText = @''{root:{r:new Date(34343, 55)}}''", span="1069-1069"];
m8_391 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JavaScriptConstructor()", file="XmlNodeConverterTest.cs", label="XmlDocument newDoc = (XmlDocument)DeserializeXmlNode(jsonText)", span="1071-1071"];
m8_392 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JavaScriptConstructor()", file="XmlNodeConverterTest.cs", label="string expected = @''<root><r><Date>34343</Date><Date>55</Date></r></root>''", span="1073-1073"];
m8_393 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JavaScriptConstructor()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(expected, newDoc.InnerXml)", span="1075-1075"];
m8_394 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JavaScriptConstructor()", file="XmlNodeConverterTest.cs", label="string json = SerializeXmlNode(newDoc)", span="1077-1077"];
m8_395 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JavaScriptConstructor()", file="XmlNodeConverterTest.cs", label="expected = @''{\r\n  ''''root'''': {\r\n    ''''r'''': {\r\n      ''''Date'''': [\r\n        ''''34343'''',\r\n        ''''55''''\r\n      ]\r\n    }\r\n  }\r\n}''", span="1078-1087"];
m8_396 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JavaScriptConstructor()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(expected, json)", span="1089-1089"];
m8_397 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JavaScriptConstructor()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JavaScriptConstructor()", span="1067-1067"];
m8_66 [cluster="Unk.Flush", file="XmlNodeConverterTest.cs", label="Entry Unk.Flush", span=""];
m8_741 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeBigInteger()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeBigInteger()", span="2710-2710"];
m8_742 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeBigInteger()", file="XmlNodeConverterTest.cs", label="var json = ''{\''DocumentId\'':13779965364495889899 }''", span="2712-2712"];
m8_743 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeBigInteger()", file="XmlNodeConverterTest.cs", label="XmlDocument node = JsonConvert.DeserializeXmlNode(json)", span="2714-2714"];
m8_744 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeBigInteger()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(''<DocumentId>13779965364495889899</DocumentId>'', node.OuterXml)", span="2716-2716"];
m8_745 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeBigInteger()", file="XmlNodeConverterTest.cs", label="string json2 = JsonConvert.SerializeXmlNode(node)", span="2718-2718"];
m8_746 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeBigInteger()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(@''{''''DocumentId'''':''''13779965364495889899''''}'', json2)", span="2720-2720"];
m8_747 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeBigInteger()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeBigInteger()", span="2710-2710"];
m8_178 [cluster="System.TimeSpan.FromHours(double)", file="XmlNodeConverterTest.cs", label="Entry System.TimeSpan.FromHours(double)", span="0-0"];
m8_611 [cluster="System.Collections.Generic.List<T>.List()", file="XmlNodeConverterTest.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m8_311 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ToStringWithDeclaration(XDocument, bool)", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ToStringWithDeclaration(XDocument, bool)", span="813-813"];
m8_314 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ToStringWithDeclaration(XDocument, bool)", file="XmlNodeConverterTest.cs", label="StringBuilder builder = new StringBuilder()", span="815-815"];
m8_315 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ToStringWithDeclaration(XDocument, bool)", file="XmlNodeConverterTest.cs", label="var writer = XmlWriter.Create(new Utf8StringWriter(builder), new XmlWriterSettings { Indent = indent })", span="816-816"];
m8_316 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ToStringWithDeclaration(XDocument, bool)", file="XmlNodeConverterTest.cs", label="doc.Save(writer)", span="818-818"];
m8_317 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ToStringWithDeclaration(XDocument, bool)", file="XmlNodeConverterTest.cs", label="return builder.ToString();", span="820-820"];
m8_318 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ToStringWithDeclaration(XDocument, bool)", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ToStringWithDeclaration(XDocument, bool)", span="813-813"];
m8_181 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeOffsetContainer.DateTimeOffsetContainer()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeOffsetContainer.DateTimeOffsetContainer()", span="386-386"];
m8_733 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXmlElementWithNamespaceInChildrenRootDontHaveNameSpace()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXmlElementWithNamespaceInChildrenRootDontHaveNameSpace()", span="2691-2691"];
m8_734 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXmlElementWithNamespaceInChildrenRootDontHaveNameSpace()", file="XmlNodeConverterTest.cs", label="var xmlString = @''<root>\r\n                              <b xmlns='http://www.example.com/ns'>Asd</b>\r\n                              <c>AAA</c>\r\n                              <test>adad</test>\r\n                              </root>''", span="2693-2697"];
m8_735 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXmlElementWithNamespaceInChildrenRootDontHaveNameSpace()", file="XmlNodeConverterTest.cs", label="XmlDocument xml = new XmlDocument()", span="2699-2699"];
m8_736 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXmlElementWithNamespaceInChildrenRootDontHaveNameSpace()", file="XmlNodeConverterTest.cs", label="xml.LoadXml(xmlString)", span="2700-2700"];
m8_737 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXmlElementWithNamespaceInChildrenRootDontHaveNameSpace()", file="XmlNodeConverterTest.cs", label="var json1 = JsonConvert.SerializeXmlNode(xml)", span="2702-2702"];
m8_738 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXmlElementWithNamespaceInChildrenRootDontHaveNameSpace()", file="XmlNodeConverterTest.cs", label="var xmlBack = JsonConvert.DeserializeObject<XmlDocument>(json1)", span="2703-2703"];
m8_739 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXmlElementWithNamespaceInChildrenRootDontHaveNameSpace()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(@''<root><b xmlns=''''http://www.example.com/ns''''>Asd</b><c>AAA</c><test>adad</test></root>'', xmlBack.OuterXml)", span="2705-2705"];
m8_740 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXmlElementWithNamespaceInChildrenRootDontHaveNameSpace()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXmlElementWithNamespaceInChildrenRootDontHaveNameSpace()", span="2691-2691"];
m8_780 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Serialize_XDocument_NoRootWithDeclaration()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Serialize_XDocument_NoRootWithDeclaration()", span="2802-2802"];
m8_781 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Serialize_XDocument_NoRootWithDeclaration()", file="XmlNodeConverterTest.cs", label="XDocument d = new XDocument()", span="2804-2804"];
m8_782 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Serialize_XDocument_NoRootWithDeclaration()", file="XmlNodeConverterTest.cs", label="d.Declaration = new XDeclaration(''Version!'', ''Encoding!'', ''Standalone!'')", span="2805-2805"];
m8_783 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Serialize_XDocument_NoRootWithDeclaration()", file="XmlNodeConverterTest.cs", label="string json = JsonConvert.SerializeXNode(d)", span="2807-2807"];
m8_784 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Serialize_XDocument_NoRootWithDeclaration()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(@''{''''?xml'''':{''''@version'''':''''Version!'''',''''@encoding'''':''''Encoding!'''',''''@standalone'''':''''Standalone!''''}}'', json)", span="2809-2809"];
m8_785 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Serialize_XDocument_NoRootWithDeclaration()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Serialize_XDocument_NoRootWithDeclaration()", span="2802-2802"];
m8_673 [cluster="System.IO.StreamReader.StreamReader(System.IO.Stream)", file="XmlNodeConverterTest.cs", label="Entry System.IO.StreamReader.StreamReader(System.IO.Stream)", span="0-0"];
m8_786 [cluster="XDeclaration.cstr", file="XmlNodeConverterTest.cs", label="Entry XDeclaration.cstr", span=""];
m8_891 [cluster="System.IO.StringWriter.StringWriter(System.Text.StringBuilder, System.IFormatProvider)", file="XmlNodeConverterTest.cs", label="Entry System.IO.StringWriter.StringWriter(System.Text.StringBuilder, System.IFormatProvider)", span="0-0"];
m8_62 [cluster="System.IO.StringWriter.StringWriter()", file="XmlNodeConverterTest.cs", label="Entry System.IO.StringWriter.StringWriter()", span="0-0"];
m8_856 [cluster="XElement.cstr", file="XmlNodeConverterTest.cs", label="Entry XElement.cstr", span=""];
m8_274 [cluster="Unk.CreateCDataSection", file="XmlNodeConverterTest.cs", label="Entry Unk.CreateCDataSection", span=""];
m8_272 [cluster="Unk.Attribute", file="XmlNodeConverterTest.cs", label="Entry Unk.Attribute", span=""];
m8_506 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EscapingNames()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EscapingNames()", span="1552-1552"];
m8_507 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EscapingNames()", file="XmlNodeConverterTest.cs", label="string json = @''{\r\n              ''''root!'''': {\r\n                ''''person!'''': [\r\n                  {\r\n                    ''''@id!'''': ''''1'''',\r\n                    ''''name!'''': ''''Alan'''',\r\n                    ''''url!'''': ''''http://www.google.com''''\r\n                  },\r\n                  {\r\n                    ''''@id!'''': ''''2'''',\r\n                    ''''name!'''': ''''Louis'''',\r\n                    ''''url!'''': ''''http://www.yahoo.com''''\r\n                  }\r\n                ]\r\n              }\r\n            }''", span="1554-1569"];
m8_508 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EscapingNames()", file="XmlNodeConverterTest.cs", label="XmlDocument doc = (XmlDocument)DeserializeXmlNode(json)", span="1571-1571"];
m8_509 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EscapingNames()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(@''<root_x0021_><person_x0021_ id_x0021_=''''1''''><name_x0021_>Alan</name_x0021_><url_x0021_>http://www.google.com</url_x0021_></person_x0021_><person_x0021_ id_x0021_=''''2''''><name_x0021_>Louis</name_x0021_><url_x0021_>http://www.yahoo.com</url_x0021_></person_x0021_></root_x0021_>'', doc.InnerXml)", span="1573-1573"];
m8_510 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EscapingNames()", file="XmlNodeConverterTest.cs", label="string json2 = SerializeXmlNode(doc)", span="1575-1575"];
m8_511 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EscapingNames()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(@''{\r\n  ''''root!'''': {\r\n    ''''person!'''': [\r\n      {\r\n        ''''@id!'''': ''''1'''',\r\n        ''''name!'''': ''''Alan'''',\r\n        ''''url!'''': ''''http://www.google.com''''\r\n      },\r\n      {\r\n        ''''@id!'''': ''''2'''',\r\n        ''''name!'''': ''''Louis'''',\r\n        ''''url!'''': ''''http://www.yahoo.com''''\r\n      }\r\n    ]\r\n  }\r\n}'', json2)", span="1577-1592"];
m8_512 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EscapingNames()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EscapingNames()", span="1552-1552"];
m8_857 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDocumentExplicitAttributeNamespace()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDocumentExplicitAttributeNamespace()", span="2926-2926"];
m8_858 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDocumentExplicitAttributeNamespace()", file="XmlNodeConverterTest.cs", label="var original = XDocument.Parse(''<MyElement xmlns=\''http://example.com\'' />'')", span="2928-2928"];
m8_859 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDocumentExplicitAttributeNamespace()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(@''<MyElement xmlns=''''http://example.com'''' />'', original.ToString())", span="2929-2929"];
m8_860 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDocumentExplicitAttributeNamespace()", file="XmlNodeConverterTest.cs", label="var json = JsonConvert.SerializeObject(original)", span="2931-2931"];
m8_861 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDocumentExplicitAttributeNamespace()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(@''{''''MyElement'''':{''''@xmlns'''':''''http://example.com''''}}'', json)", span="2932-2932"];
m8_862 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDocumentExplicitAttributeNamespace()", file="XmlNodeConverterTest.cs", label="var deserialized = JsonConvert.DeserializeObject<XDocument>(json)", span="2934-2934"];
m8_863 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDocumentExplicitAttributeNamespace()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(@''<MyElement xmlns=''''http://example.com'''' />'', deserialized.ToString())", span="2935-2935"];
m8_864 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDocumentExplicitAttributeNamespace()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDocumentExplicitAttributeNamespace()", span="2926-2926"];
m8_285 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentFragmentSerialize()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentFragmentSerialize()", span="682-682"];
m8_286 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentFragmentSerialize()", file="XmlNodeConverterTest.cs", label="XmlDocument doc = new XmlDocument()", span="684-684"];
m8_287 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentFragmentSerialize()", file="XmlNodeConverterTest.cs", label="XmlDocumentFragment fragement = doc.CreateDocumentFragment()", span="686-686"];
m8_288 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentFragmentSerialize()", file="XmlNodeConverterTest.cs", label="fragement.InnerXml = ''<Item>widget</Item><Item>widget</Item>''", span="688-688"];
m8_289 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentFragmentSerialize()", file="XmlNodeConverterTest.cs", label="string jsonText = JsonConvert.SerializeXmlNode(fragement)", span="690-690"];
m8_290 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentFragmentSerialize()", file="XmlNodeConverterTest.cs", label="string expected = @''{''''Item'''':[''''widget'''',''''widget'''']}''", span="692-692"];
m8_291 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentFragmentSerialize()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(expected, jsonText)", span="694-694"];
m8_292 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentFragmentSerialize()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentFragmentSerialize()", span="682-682"];
m8_22 [cluster="Unk.SerializeXNode", file="XmlNodeConverterTest.cs", label="Entry Unk.SerializeXNode", span=""];
m8_273 [cluster="Unk.CreateProcessingInstruction", file="XmlNodeConverterTest.cs", label="Entry Unk.CreateProcessingInstruction", span=""];
m8_555 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeMetadataPropertyWithBadValue()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeMetadataPropertyWithBadValue()", span="1749-1749"];
m8_556 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeMetadataPropertyWithBadValue()", file="XmlNodeConverterTest.cs", label="string json = @''{\r\n  ''''$id'''': []\r\n}''", span="1751-1753"];
m8_557 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeMetadataPropertyWithBadValue()", file="XmlNodeConverterTest.cs", label="ExceptionAssert.Throws<JsonSerializationException>(\r\n                () => { JsonConvert.DeserializeXmlNode(json, ''root''); },\r\n                ''Unexpected JsonToken: StartArray. Path '$id', line 2, position 10.'')", span="1755-1757"];
m8_558 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeMetadataPropertyWithBadValue()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeMetadataPropertyWithBadValue()", span="1749-1749"];
m8_52 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.IndentXml(string)", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.IndentXml(string)", span="136-136"];
m8_53 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.IndentXml(string)", file="XmlNodeConverterTest.cs", label="XmlReader reader = XmlReader.Create(new StringReader(xml))", span="138-138"];
m8_54 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.IndentXml(string)", file="XmlNodeConverterTest.cs", label="StringWriter sw = new StringWriter()", span="140-140"];
m8_56 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.IndentXml(string)", file="XmlNodeConverterTest.cs", label="reader.Read()", span="143-143"];
m8_57 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.IndentXml(string)", file="XmlNodeConverterTest.cs", label="writer.WriteNode(reader, false)", span="145-145"];
m8_55 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.IndentXml(string)", file="XmlNodeConverterTest.cs", label="XmlWriter writer = XmlWriter.Create(sw, new XmlWriterSettings { Indent = true, OmitXmlDeclaration = true })", span="141-141"];
m8_59 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.IndentXml(string)", file="XmlNodeConverterTest.cs", label="return sw.ToString();", span="150-150"];
m8_58 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.IndentXml(string)", file="XmlNodeConverterTest.cs", label="writer.Flush()", span="148-148"];
m8_60 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.IndentXml(string)", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.IndentXml(string)", span="136-136"];
m8_19 [cluster="Unk.Get", file="XmlNodeConverterTest.cs", label="Entry Unk.Get", span=""];
m8_152 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.FloatParseHandlingDecimal()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.FloatParseHandlingDecimal()", span="363-363"];
m8_153 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.FloatParseHandlingDecimal()", file="XmlNodeConverterTest.cs", label="decimal d = (decimal)Math.PI + 1000000000m", span="365-365"];
m8_154 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.FloatParseHandlingDecimal()", file="XmlNodeConverterTest.cs", label="var x = new DecimalContainer { Number = d }", span="366-366"];
m8_155 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.FloatParseHandlingDecimal()", file="XmlNodeConverterTest.cs", label="var json = JsonConvert.SerializeObject(x, Formatting.Indented)", span="368-368"];
m8_161 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.FloatParseHandlingDecimal()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(x.Number, x2.Number)", span="383-383"];
m8_156 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.FloatParseHandlingDecimal()", file="XmlNodeConverterTest.cs", label="XDocument doc1 = JsonConvert.DeserializeObject<XDocument>(json, new JsonSerializerSettings\r\n            {\r\n                Converters = { new XmlNodeConverter() },\r\n                FloatParseHandling = FloatParseHandling.Decimal\r\n            })", span="370-374"];
m8_157 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.FloatParseHandlingDecimal()", file="XmlNodeConverterTest.cs", label="var xml = doc1.ToString()", span="376-376"];
m8_159 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.FloatParseHandlingDecimal()", file="XmlNodeConverterTest.cs", label="string json2 = JsonConvert.SerializeObject(doc1, Formatting.Indented)", span="379-379"];
m8_158 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.FloatParseHandlingDecimal()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(''<Number>1000000003.14159265358979</Number>'', xml)", span="377-377"];
m8_160 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.FloatParseHandlingDecimal()", file="XmlNodeConverterTest.cs", label="DecimalContainer x2 = JsonConvert.DeserializeObject<DecimalContainer>(json2)", span="381-381"];
m8_162 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.FloatParseHandlingDecimal()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.FloatParseHandlingDecimal()", span="363-363"];
m8_164 [cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting)", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting)", span="537-537"];
m8_182 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.GroupElementsOfTheSameName()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.GroupElementsOfTheSameName()", span="416-416"];
m8_183 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.GroupElementsOfTheSameName()", file="XmlNodeConverterTest.cs", label="string xml = ''<root><p>Text1<span>Span1</span> <span>Span2</span> Text2</p></root>''", span="418-418"];
m8_184 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.GroupElementsOfTheSameName()", file="XmlNodeConverterTest.cs", label="string json = JsonConvert.SerializeXNode(XElement.Parse(xml))", span="420-420"];
m8_185 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.GroupElementsOfTheSameName()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(@''{''''root'''':{''''p'''':{''''#text'''':[''''Text1'''','''' Text2''''],''''span'''':[''''Span1'''',''''Span2'''']}}}'', json)", span="422-422"];
m8_186 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.GroupElementsOfTheSameName()", file="XmlNodeConverterTest.cs", label="XDocument doc = JsonConvert.DeserializeXNode(json)", span="424-424"];
m8_187 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.GroupElementsOfTheSameName()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(@''<root>\r\n  <p>Text1 Text2<span>Span1</span><span>Span2</span></p>\r\n</root>'', doc.ToString())", span="426-428"];
m8_188 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.GroupElementsOfTheSameName()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.GroupElementsOfTheSameName()", span="416-416"];
m8_628 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmtpyElementWithArrayAttributeShouldWriteElement()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmtpyElementWithArrayAttributeShouldWriteElement()", span="2055-2055"];
m8_629 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmtpyElementWithArrayAttributeShouldWriteElement()", file="XmlNodeConverterTest.cs", label="string xml = @''<root>\r\n<Reports d1p1:Array=''''true'''' xmlns:d1p1=''''http://james.newtonking.com/projects/json'''' />\r\n</root>''", span="2057-2059"];
m8_630 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmtpyElementWithArrayAttributeShouldWriteElement()", file="XmlNodeConverterTest.cs", label="XmlDocument d = new XmlDocument()", span="2061-2061"];
m8_631 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmtpyElementWithArrayAttributeShouldWriteElement()", file="XmlNodeConverterTest.cs", label="d.LoadXml(xml)", span="2062-2062"];
m8_632 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmtpyElementWithArrayAttributeShouldWriteElement()", file="XmlNodeConverterTest.cs", label="string json = JsonConvert.SerializeXmlNode(d, Formatting.Indented)", span="2064-2064"];
m8_633 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmtpyElementWithArrayAttributeShouldWriteElement()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(@''{\r\n  ''''root'''': {\r\n    ''''Reports'''': [\r\n      {}\r\n    ]\r\n  }\r\n}'', json)", span="2066-2072"];
m8_634 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmtpyElementWithArrayAttributeShouldWriteElement()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmtpyElementWithArrayAttributeShouldWriteElement()", span="2055-2055"];
m8_109 [cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object)", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object)", span="524-524"];
m8_96 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MyModel.MyModel()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MyModel.MyModel()", span="184-184"];
m8_293 [cluster="Unk.CreateDocumentFragment", file="XmlNodeConverterTest.cs", label="Entry Unk.CreateDocumentFragment", span=""];
m8_110 [cluster="Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string)", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string)", span="703-703"];
m8_601 [cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, params Newtonsoft.Json.JsonConverter[])", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object, params Newtonsoft.Json.JsonConverter[])", span="548-548"];
m8_599 [cluster="System.DateTime.DateTime(int, int, int, int, int, int, System.DateTimeKind)", file="XmlNodeConverterTest.cs", label="Entry System.DateTime.DateTime(int, int, int, int, int, int, System.DateTimeKind)", span="0-0"];
m8_762 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyNodeAndOmitRoot()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyNodeAndOmitRoot()", span="2768-2768"];
m8_763 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyNodeAndOmitRoot()", file="XmlNodeConverterTest.cs", label="string xmlString = @''<myemptynode />''", span="2770-2770"];
m8_764 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyNodeAndOmitRoot()", file="XmlNodeConverterTest.cs", label="XmlDocument xml = new XmlDocument()", span="2772-2772"];
m8_765 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyNodeAndOmitRoot()", file="XmlNodeConverterTest.cs", label="xml.LoadXml(xmlString)", span="2773-2773"];
m8_766 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyNodeAndOmitRoot()", file="XmlNodeConverterTest.cs", label="string json = JsonConvert.SerializeXmlNode(xml, Formatting.Indented, true)", span="2775-2775"];
m8_767 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyNodeAndOmitRoot()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(''null'', json)", span="2777-2777"];
m8_768 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyNodeAndOmitRoot()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyNodeAndOmitRoot()", span="2768-2768"];
m8_890 [cluster="System.Text.StringBuilder.StringBuilder(int)", file="XmlNodeConverterTest.cs", label="Entry System.Text.StringBuilder.StringBuilder(int)", span="0-0"];
m8_215 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeUndeclaredNamespacePrefix()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeUndeclaredNamespacePrefix()", span="479-479"];
m8_216 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeUndeclaredNamespacePrefix()", file="XmlNodeConverterTest.cs", label="XmlDocument doc = JsonConvert.DeserializeXmlNode(''{ A: { '@xsi:nil': true } }'')", span="481-481"];
m8_217 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeUndeclaredNamespacePrefix()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(@''<A nil=''''true'''' />'', doc.OuterXml)", span="483-483"];
m8_219 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeUndeclaredNamespacePrefix()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(doc.OuterXml, xdoc.ToString())", span="487-487"];
m8_218 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeUndeclaredNamespacePrefix()", file="XmlNodeConverterTest.cs", label="XDocument xdoc = JsonConvert.DeserializeXNode(''{ A: { '@xsi:nil': true } }'')", span="485-485"];
m8_220 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeUndeclaredNamespacePrefix()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeUndeclaredNamespacePrefix()", span="479-479"];
m8_321 [cluster="System.Text.StringBuilder.ToString()", file="XmlNodeConverterTest.cs", label="Entry System.Text.StringBuilder.ToString()", span="0-0"];
m8_612 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.OmitRootObject()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.OmitRootObject()", span="1971-1971"];
m8_613 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.OmitRootObject()", file="XmlNodeConverterTest.cs", label="string xml = @''<test>\r\n  <Name>Hi</Name>\r\n  <Name>Hi</Name>\r\n  <Products json:Array=''''true'''' xmlns:json=''''http://james.newtonking.com/projects/json''''>\r\n    <Name>First</Name>\r\n    <ExpiryDate>2000-01-01T00:00:00Z</ExpiryDate>\r\n    <Price>0</Price>\r\n    <Sizes />\r\n  </Products>\r\n</test>''", span="1973-1982"];
m8_614 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.OmitRootObject()", file="XmlNodeConverterTest.cs", label="XmlDocument d = new XmlDocument()", span="1984-1984"];
m8_615 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.OmitRootObject()", file="XmlNodeConverterTest.cs", label="d.LoadXml(xml)", span="1985-1985"];
m8_616 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.OmitRootObject()", file="XmlNodeConverterTest.cs", label="string output = JsonConvert.SerializeXmlNode(d, Formatting.Indented, true)", span="1987-1987"];
m8_617 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.OmitRootObject()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(@''{\r\n  ''''Name'''': [\r\n    ''''Hi'''',\r\n    ''''Hi''''\r\n  ],\r\n  ''''Products'''': [\r\n    {\r\n      ''''Name'''': ''''First'''',\r\n      ''''ExpiryDate'''': ''''2000-01-01T00:00:00Z'''',\r\n      ''''Price'''': ''''0'''',\r\n      ''''Sizes'''': null\r\n    }\r\n  ]\r\n}'', output)", span="1989-2002"];
m8_618 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.OmitRootObject()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.OmitRootObject()", span="1971-1971"];
m8_327 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NamespaceSerializeDeserialize()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NamespaceSerializeDeserialize()", span="835-835"];
m8_328 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NamespaceSerializeDeserialize()", file="XmlNodeConverterTest.cs", label="string xml = @''<?xml version=''''1.0'''' encoding=''''utf-8'''' ?>\r\n<xs:schema xs:id=''''SomeID'''' \r\n	xmlns='''''''' \r\n	xmlns:xs=''''http://www.w3.org/2001/XMLSchema'''' \r\n	xmlns:msdata=''''urn:schemas-microsoft-com:xml-msdata''''>\r\n	<xs:element name=''''MyDataSet'''' msdata:IsDataSet=''''true''''>\r\n		<xs:complexType>\r\n			<xs:choice maxOccurs=''''unbounded''''>\r\n				<xs:element name=''''customers'''' >\r\n					<xs:complexType >\r\n						<xs:sequence>\r\n							<xs:element name=''''CustomerID'''' type=''''xs:integer'''' \r\n										 minOccurs=''''0'''' />\r\n							<xs:element name=''''CompanyName'''' type=''''xs:string'''' \r\n										 minOccurs=''''0'''' />\r\n							<xs:element name=''''Phone'''' type=''''xs:string'''' />\r\n						</xs:sequence>\r\n					</xs:complexType>\r\n				</xs:element>\r\n			</xs:choice>\r\n		</xs:complexType>\r\n	</xs:element>\r\n</xs:schema>''", span="837-859"];
m8_329 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NamespaceSerializeDeserialize()", file="XmlNodeConverterTest.cs", label="XmlDocument doc = new XmlDocument()", span="861-861"];
m8_330 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NamespaceSerializeDeserialize()", file="XmlNodeConverterTest.cs", label="doc.LoadXml(xml)", span="862-862"];
m8_331 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NamespaceSerializeDeserialize()", file="XmlNodeConverterTest.cs", label="string jsonText = SerializeXmlNode(doc)", span="864-864"];
m8_335 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NamespaceSerializeDeserialize()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(doc.InnerXml, deserializedDoc.InnerXml)", span="915-915"];
m8_332 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NamespaceSerializeDeserialize()", file="XmlNodeConverterTest.cs", label="string expected = @''{\r\n  ''''?xml'''': {\r\n    ''''@version'''': ''''1.0'''',\r\n    ''''@encoding'''': ''''utf-8''''\r\n  },\r\n  ''''xs:schema'''': {\r\n    ''''@xs:id'''': ''''SomeID'''',\r\n    ''''@xmlns'''': '''''''',\r\n    ''''@xmlns:xs'''': ''''http://www.w3.org/2001/XMLSchema'''',\r\n    ''''@xmlns:msdata'''': ''''urn:schemas-microsoft-com:xml-msdata'''',\r\n    ''''xs:element'''': {\r\n      ''''@name'''': ''''MyDataSet'''',\r\n      ''''@msdata:IsDataSet'''': ''''true'''',\r\n      ''''xs:complexType'''': {\r\n        ''''xs:choice'''': {\r\n          ''''@maxOccurs'''': ''''unbounded'''',\r\n          ''''xs:element'''': {\r\n            ''''@name'''': ''''customers'''',\r\n            ''''xs:complexType'''': {\r\n              ''''xs:sequence'''': {\r\n                ''''xs:element'''': [\r\n                  {\r\n                    ''''@name'''': ''''CustomerID'''',\r\n                    ''''@type'''': ''''xs:integer'''',\r\n                    ''''@minOccurs'''': ''''0''''\r\n                  },\r\n                  {\r\n                    ''''@name'''': ''''CompanyName'''',\r\n                    ''''@type'''': ''''xs:string'''',\r\n                    ''''@minOccurs'''': ''''0''''\r\n                  },\r\n                  {\r\n                    ''''@name'''': ''''Phone'''',\r\n                    ''''@type'''': ''''xs:string''''\r\n                  }\r\n                ]\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}''", span="866-909"];
m8_333 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NamespaceSerializeDeserialize()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(expected, jsonText)", span="911-911"];
m8_334 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NamespaceSerializeDeserialize()", file="XmlNodeConverterTest.cs", label="XmlDocument deserializedDoc = (XmlDocument)DeserializeXmlNode(jsonText)", span="913-913"];
m8_336 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NamespaceSerializeDeserialize()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NamespaceSerializeDeserialize()", span="835-835"];
m8_530 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArray()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArray()", span="1646-1646"];
m8_531 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArray()", file="XmlNodeConverterTest.cs", label="string json = @''{\r\n  ''''$id'''': ''''1'''',\r\n  ''''$values'''': [\r\n    ''''1'''',\r\n    ''''2'''',\r\n    ''''3'''',\r\n    ''''4'''',\r\n    ''''5''''\r\n  ]\r\n}''", span="1648-1657"];
m8_532 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArray()", file="XmlNodeConverterTest.cs", label="XmlNode node = JsonConvert.DeserializeXmlNode(json, ''root'')", span="1659-1659"];
m8_536 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArray()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(json, newJson)", span="1673-1673"];
m8_533 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArray()", file="XmlNodeConverterTest.cs", label="string xml = GetIndentedInnerXml(node)", span="1660-1660"];
m8_535 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArray()", file="XmlNodeConverterTest.cs", label="string newJson = JsonConvert.SerializeXmlNode(node, Formatting.Indented, true)", span="1671-1671"];
m8_534 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArray()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(@''<?xml version=''''1.0'''' encoding=''''utf-16''''?>\r\n<root xmlns:json=''''http://james.newtonking.com/projects/json'''' json:id=''''1''''>\r\n  <values xmlns=''''http://james.newtonking.com/projects/json''''>1</values>\r\n  <values xmlns=''''http://james.newtonking.com/projects/json''''>2</values>\r\n  <values xmlns=''''http://james.newtonking.com/projects/json''''>3</values>\r\n  <values xmlns=''''http://james.newtonking.com/projects/json''''>4</values>\r\n  <values xmlns=''''http://james.newtonking.com/projects/json''''>5</values>\r\n</root>'', xml)", span="1662-1669"];
m8_537 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArray()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArray()", span="1646-1646"];
m8_424 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesXmlDocument()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesXmlDocument()", span="1201-1201"];
m8_425 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesXmlDocument()", file="XmlNodeConverterTest.cs", label="string json = @''{''''count'''': 773840,''''photos'''': null}''", span="1203-1203"];
m8_426 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesXmlDocument()", file="XmlNodeConverterTest.cs", label="ExceptionAssert.Throws<JsonSerializationException>(\r\n                () => { JsonConvert.DeserializeXmlNode(json); },\r\n                ''JSON root object has multiple properties. The root object must have a single property in order to create a valid XML document. Consider specifying a DeserializeRootElementName. Path 'photos', line 1, position 26.'')", span="1205-1207"];
m8_427 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesXmlDocument()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesXmlDocument()", span="1201-1201"];
m8_222 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeMultipleRootElements()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeMultipleRootElements()", span="494-494"];
m8_223 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeMultipleRootElements()", file="XmlNodeConverterTest.cs", label="string json = @''{\r\n    ''''Id'''': 1,\r\n     ''''Email'''': ''''james@example.com'''',\r\n     ''''Active'''': true,\r\n     ''''CreatedDate'''': ''''2013-01-20T00:00:00Z'''',\r\n     ''''Roles'''': [\r\n       ''''User'''',\r\n       ''''Admin''''\r\n     ],\r\n    ''''Team'''': {\r\n        ''''Id'''': 2,\r\n        ''''Name'''': ''''Software Developers'''',\r\n        ''''Description'''': ''''Creators of fine software products and services.''''\r\n    }\r\n}''", span="496-510"];
m8_224 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeMultipleRootElements()", file="XmlNodeConverterTest.cs", label="ExceptionAssert.Throws<JsonSerializationException>(\r\n                () => { JsonConvert.DeserializeXmlNode(json); },\r\n                ''JSON root object has multiple properties. The root object must have a single property in order to create a valid XML document. Consider specifying a DeserializeRootElementName. Path 'Email', line 3, position 13.'')", span="511-513"];
m8_225 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeMultipleRootElements()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeMultipleRootElements()", span="494-494"];
m8_547 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayWithIdLast()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayWithIdLast()", span="1709-1709"];
m8_548 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayWithIdLast()", file="XmlNodeConverterTest.cs", label="string json = @''{\r\n  ''''$values'''': [\r\n    ''''1'''',\r\n    ''''2'''',\r\n    ''''3'''',\r\n    ''''4'''',\r\n    ''''5''''\r\n  ],\r\n  ''''$id'''': ''''1''''\r\n}''", span="1711-1720"];
m8_549 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayWithIdLast()", file="XmlNodeConverterTest.cs", label="XmlNode node = JsonConvert.DeserializeXmlNode(json, ''root'')", span="1722-1722"];
m8_550 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayWithIdLast()", file="XmlNodeConverterTest.cs", label="string xml = GetIndentedInnerXml(node)", span="1723-1723"];
m8_552 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayWithIdLast()", file="XmlNodeConverterTest.cs", label="string newJson = JsonConvert.SerializeXmlNode(node, Formatting.Indented, true)", span="1734-1734"];
m8_551 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayWithIdLast()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(@''<?xml version=''''1.0'''' encoding=''''utf-16''''?>\r\n<root xmlns:json=''''http://james.newtonking.com/projects/json'''' json:id=''''1''''>\r\n  <values xmlns=''''http://james.newtonking.com/projects/json''''>1</values>\r\n  <values xmlns=''''http://james.newtonking.com/projects/json''''>2</values>\r\n  <values xmlns=''''http://james.newtonking.com/projects/json''''>3</values>\r\n  <values xmlns=''''http://james.newtonking.com/projects/json''''>4</values>\r\n  <values xmlns=''''http://james.newtonking.com/projects/json''''>5</values>\r\n</root>'', xml)", span="1725-1732"];
m8_553 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayWithIdLast()", file="XmlNodeConverterTest.cs", label="StringAssert.AreEqual(@''{\r\n  ''''$id'''': ''''1'''',\r\n  ''''$values'''': [\r\n    ''''1'''',\r\n    ''''2'''',\r\n    ''''3'''',\r\n    ''''4'''',\r\n    ''''5''''\r\n  ]\r\n}'', newJson)", span="1736-1745"];
m8_554 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayWithIdLast()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayWithIdLast()", span="1709-1709"];
m8_655 [cluster="System.IO.MemoryStream.MemoryStream(byte[])", file="XmlNodeConverterTest.cs", label="Entry System.IO.MemoryStream.MemoryStream(byte[])", span="0-0"];
m8_865 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDocumentImplicitAttributeNamespace()", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDocumentImplicitAttributeNamespace()", span="2939-2939"];
m8_866 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDocumentImplicitAttributeNamespace()", file="XmlNodeConverterTest.cs", label="var original = new XDocument(new XElement(''{http://example.com}MyElement''))", span="2941-2941"];
m8_867 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDocumentImplicitAttributeNamespace()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(@''<MyElement xmlns=''''http://example.com'''' />'', original.ToString())", span="2942-2942"];
m8_868 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDocumentImplicitAttributeNamespace()", file="XmlNodeConverterTest.cs", label="var json = JsonConvert.SerializeObject(original)", span="2944-2944"];
m8_869 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDocumentImplicitAttributeNamespace()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(@''{''''MyElement'''':{''''@xmlns'''':''''http://example.com''''}}'', json)", span="2945-2945"];
m8_870 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDocumentImplicitAttributeNamespace()", file="XmlNodeConverterTest.cs", label="var deserialized = JsonConvert.DeserializeObject<XDocument>(json)", span="2947-2947"];
m8_871 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDocumentImplicitAttributeNamespace()", file="XmlNodeConverterTest.cs", label="Assert.AreEqual(@''<MyElement xmlns=''''http://example.com'''' />'', deserialized.ToString())", span="2948-2948"];
m8_872 [cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDocumentImplicitAttributeNamespace()", file="XmlNodeConverterTest.cs", label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDocumentImplicitAttributeNamespace()", span="2939-2939"];
m8_656 [cluster="System.Text.Encoding.GetBytes(string)", file="XmlNodeConverterTest.cs", label="Entry System.Text.Encoding.GetBytes(string)", span="0-0"];
m8_582 [cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", file="XmlNodeConverterTest.cs", label="Entry Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", span="367-367"];
m8_894 [file="XmlNodeConverterTest.cs", label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest", span=""];
m8_895 [file="XmlNodeConverterTest.cs", label=json, span=""];
m8_896 [file="XmlNodeConverterTest.cs", label=json, span=""];
m8_897 [file="XmlNodeConverterTest.cs", label=json, span=""];
m8_898 [file="XmlNodeConverterTest.cs", label=json, span=""];
m8_899 [file="XmlNodeConverterTest.cs", label=json, span=""];
m8_900 [file="XmlNodeConverterTest.cs", label=json, span=""];
n404 -> n4  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n11  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n12  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n14  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n15  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n19  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n21  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n23  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n24  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n25  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n34  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n39  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n45  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n46  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n54  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n57  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n63  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n65  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n66  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n74  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n76  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n95  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n97  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n98  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n99  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n100  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n101  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n103  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n116  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n120  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n151  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n152  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n156  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n157  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n158  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n159  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n173  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n174  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n181  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n189  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n190  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n191  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n193  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n194  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n195  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n196  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n197  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n199  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n200  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n201  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n202  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n203  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n209  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n212  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n216  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n217  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n222  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n225  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n228  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n229  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n232  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n233  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n234  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n236  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n242  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n246  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n251  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n256  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n257  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n258  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n266  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n267  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n268  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n289  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n290  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n304  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n306  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n310  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n314  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n328  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n329  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n331  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n332  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n333  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n335  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n337  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n338  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n340  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n342  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n348  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n354  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n356  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n358  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n360  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n362  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n364  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n366  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n371  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n373  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n374  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n375  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n380  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n381  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n382  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n386  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n391  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> n395  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> d102  [color=green, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> d230  [color=green, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> d197  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> d199  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> d202  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> d231  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> d245  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> d193  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> d195  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> d200  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> d201  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> d203  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> d196  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> d228  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> d232  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> d235  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> d212  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> d21  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> d220  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> d269  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> d254  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> d249  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> d194  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> d261  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> d271  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> d239  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> d236  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> d215  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> d219  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> d259  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> d270  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> d260  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n404 -> d237  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.JPath", style=dashed];
n10 -> n21  [color=darkseagreen4, key=1, label=currentPartStartIndex, style=dashed];
n10 -> d21  [color=darkseagreen4, key=1, label=currentPartStartIndex, style=dashed];
n22 -> n25  [color=darkseagreen4, key=1, label=lastCharacterIndex, style=dashed];
n28 -> n39  [color=darkseagreen4, key=1, label=int, style=dashed];
n28 -> n43  [color=darkseagreen4, key=1, label="System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>", style=dashed];
n28 -> n45  [color=darkseagreen4, key=1, label="System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>", style=dashed];
n28 -> n61  [color=darkseagreen4, key=1, label="System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>", style=dashed];
n28 -> n70  [color=darkseagreen4, key=1, label=bool, style=dashed];
n28 -> n76  [color=darkseagreen4, key=1, label=int, style=dashed];
n28 -> n80  [color=darkseagreen4, key=1, label="System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>", style=dashed];
n28 -> n81  [color=darkseagreen4, key=1, label=bool, style=dashed];
n30 -> n43  [color=darkseagreen4, key=1, label=scan, style=dashed];
n30 -> n45  [color=darkseagreen4, key=1, label=scan, style=dashed];
n30 -> n61  [color=darkseagreen4, key=1, label=scan, style=dashed];
n30 -> n80  [color=darkseagreen4, key=1, label=scan, style=dashed];
n40 -> n43  [color=darkseagreen4, key=1, label=member, style=dashed];
n77 -> n80  [color=darkseagreen4, key=1, label=member, style=dashed];
n32 -> n81  [color=darkseagreen4, key=1, label=followingDot, style=dashed];
n35 -> n45  [color=darkseagreen4, key=1, label=currentChar, style=dashed];
n35 -> n70  [color=darkseagreen4, key=1, label=currentChar, style=dashed];
n35 -> n73  [color=darkseagreen4, key=1, label=currentChar, style=dashed];
n75 -> n81  [color=darkseagreen4, key=1, label=atPathEnd, style=dashed];
n75 -> n83  [color=darkseagreen4, key=1, label=atPathEnd, style=dashed];
n44 -> n61  [color=darkseagreen4, key=1, label=scan, style=dashed];
n44 -> n80  [color=darkseagreen4, key=1, label=scan, style=dashed];
n88 -> n100  [color=darkseagreen4, key=1, label=bool, style=dashed];
n47 -> n57  [color=darkseagreen4, key=1, label=int, style=dashed];
n58 -> n61  [color=darkseagreen4, key=1, label=member, style=dashed];
n62 -> n80  [color=darkseagreen4, key=1, label=scan, style=dashed];
n64 -> n80  [color=darkseagreen4, key=1, label=scan, style=dashed];
n67 -> n76  [color=darkseagreen4, key=1, label=int, style=dashed];
n68 -> n72  [color=darkseagreen4, key=1, label=followingIndexer, style=dashed];
n69 -> n81  [color=darkseagreen4, key=1, label=followingDot, style=dashed];
n96 -> n100  [color=darkseagreen4, key=1, label=indexerCloseChar, style=dashed];
n96 -> n103  [color=darkseagreen4, key=1, label=indexerCloseChar, style=dashed];
n105 -> n392  [color=darkseagreen4, key=1, label=string, style=dashed];
n108 -> n121  [color=darkseagreen4, key=1, label=char, style=dashed];
n108 -> n159  [color=darkseagreen4, key=1, label=char, style=dashed];
n107 -> n202  [color=darkseagreen4, key=1, label=char, style=dashed];
n106 -> n375  [color=darkseagreen4, key=1, label=char, style=dashed];
n106 -> n379  [color=darkseagreen4, key=1, label=bool, style=dashed];
n110 -> n179  [color=darkseagreen4, key=1, label=end, style=dashed];
n122 -> n124  [color=darkseagreen4, key=1, label=length, style=dashed];
n122 -> n131  [color=darkseagreen4, key=1, label=length, style=dashed];
n122 -> n138  [color=darkseagreen4, key=1, label=length, style=dashed];
n111 -> n123  [color=darkseagreen4, key=1, label=indexes, style=dashed];
n111 -> n128  [color=darkseagreen4, key=1, label=indexes, style=dashed];
n111 -> n147  [color=darkseagreen4, key=1, label=indexes, style=dashed];
n111 -> n150  [color=darkseagreen4, key=1, label=indexes, style=dashed];
n112 -> n130  [color=darkseagreen4, key=1, label=colonCount, style=dashed];
n112 -> n134  [color=darkseagreen4, key=1, label=colonCount, style=dashed];
n112 -> n167  [color=darkseagreen4, key=1, label=colonCount, style=dashed];
n112 -> n169  [color=darkseagreen4, key=1, label=colonCount, style=dashed];
n112 -> n172  [color=darkseagreen4, key=1, label=colonCount, style=dashed];
n172 -> n172  [color=darkseagreen4, key=1, label=colonCount, style=dashed];
n117 -> n121  [color=darkseagreen4, key=1, label=currentCharacter, style=dashed];
n117 -> n143  [color=darkseagreen4, key=1, label=currentCharacter, style=dashed];
n117 -> n155  [color=darkseagreen4, key=1, label=currentCharacter, style=dashed];
n117 -> n160  [color=darkseagreen4, key=1, label=currentCharacter, style=dashed];
n117 -> n162  [color=darkseagreen4, key=1, label=currentCharacter, style=dashed];
n117 -> n177  [color=darkseagreen4, key=1, label=currentCharacter, style=dashed];
n117 -> n178  [color=darkseagreen4, key=1, label=currentCharacter, style=dashed];
n117 -> n180  [color=darkseagreen4, key=1, label=currentCharacter, style=dashed];
n119 -> n179  [color=darkseagreen4, key=1, label=end, style=dashed];
n148 -> n150  [color=darkseagreen4, key=1, label=indexes, style=dashed];
n210 -> n217  [color=darkseagreen4, key=1, label="out System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>", style=dashed];
n210 -> n220  [color=darkseagreen4, key=1, label="out System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>", style=dashed];
n213 -> n217  [color=darkseagreen4, key=1, label="out System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>", style=dashed];
n213 -> n220  [color=darkseagreen4, key=1, label="out System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>", style=dashed];
n214 -> n217  [color=darkseagreen4, key=1, label="out System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>", style=dashed];
n214 -> n220  [color=darkseagreen4, key=1, label="out System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>", style=dashed];
n232 -> n235  [color=darkseagreen4, key=1, label=value, style=dashed];
n240 -> n254  [color=darkseagreen4, key=1, label=rootExpression, style=dashed];
n240 -> n263  [color=darkseagreen4, key=1, label=rootExpression, style=dashed];
n240 -> n273  [color=darkseagreen4, key=1, label=rootExpression, style=dashed];
n241 -> n252  [color=darkseagreen4, key=1, label=parentExpression, style=dashed];
n241 -> n253  [color=darkseagreen4, key=1, label=parentExpression, style=dashed];
n241 -> n259  [color=darkseagreen4, key=1, label=parentExpression, style=dashed];
n241 -> n261  [color=darkseagreen4, key=1, label=parentExpression, style=dashed];
n241 -> n265  [color=darkseagreen4, key=1, label=parentExpression, style=dashed];
n241 -> n269  [color=darkseagreen4, key=1, label=parentExpression, style=dashed];
n241 -> n271  [color=darkseagreen4, key=1, label=parentExpression, style=dashed];
n241 -> n275  [color=darkseagreen4, key=1, label=parentExpression, style=dashed];
n250 -> n253  [color=darkseagreen4, key=1, label=booleanExpression, style=dashed];
n250 -> n255  [color=darkseagreen4, key=1, label=booleanExpression, style=dashed];
n250 -> n265  [color=darkseagreen4, key=1, label=booleanExpression, style=dashed];
n250 -> n275  [color=darkseagreen4, key=1, label=booleanExpression, style=dashed];
n280 -> n347  [color=darkseagreen4, key=1, label=string, style=dashed];
n262 -> n265  [color=darkseagreen4, key=1, label=parentExpression, style=dashed];
n262 -> n269  [color=darkseagreen4, key=1, label=parentExpression, style=dashed];
n262 -> n271  [color=darkseagreen4, key=1, label=parentExpression, style=dashed];
n262 -> n275  [color=darkseagreen4, key=1, label=parentExpression, style=dashed];
n264 -> n273  [color=darkseagreen4, key=1, label=rootExpression, style=dashed];
n272 -> n275  [color=darkseagreen4, key=1, label=parentExpression, style=dashed];
n282 -> n286  [color=darkseagreen4, key=1, label=currentChar, style=dashed];
n282 -> n288  [color=darkseagreen4, key=1, label=currentChar, style=dashed];
n282 -> n305  [color=darkseagreen4, key=1, label=currentChar, style=dashed];
n282 -> n309  [color=darkseagreen4, key=1, label=currentChar, style=dashed];
n282 -> n313  [color=darkseagreen4, key=1, label=currentChar, style=dashed];
n287 -> n303  [color=darkseagreen4, key=1, label=sb, style=dashed];
n291 -> n303  [color=darkseagreen4, key=1, label=currentChar, style=dashed];
n317 -> n319  [color=darkseagreen4, key=1, label="out object", style=dashed];
n296 -> n298  [color=darkseagreen4, key=1, label=result, style=dashed];
n300 -> n302  [color=darkseagreen4, key=1, label=result, style=dashed];
n327 -> n334  [color=darkseagreen4, key=1, label=sb, style=dashed];
n327 -> n336  [color=darkseagreen4, key=1, label=sb, style=dashed];
n327 -> n341  [color=darkseagreen4, key=1, label=sb, style=dashed];
n327 -> n343  [color=darkseagreen4, key=1, label=sb, style=dashed];
n330 -> n339  [color=darkseagreen4, key=1, label=currentChar, style=dashed];
n330 -> n343  [color=darkseagreen4, key=1, label=currentChar, style=dashed];
n346 -> n348  [color=darkseagreen4, key=1, label=currentPosition, style=dashed];
n346 -> n349  [color=darkseagreen4, key=1, label=currentPosition, style=dashed];
n349 -> n349  [color=darkseagreen4, key=1, label=currentPosition, style=dashed];
n370 -> n376  [color=darkseagreen4, key=1, label=fields, style=dashed];
n370 -> n377  [color=darkseagreen4, key=1, label=fields, style=dashed];
n370 -> n383  [color=darkseagreen4, key=1, label=fields, style=dashed];
n370 -> n385  [color=darkseagreen4, key=1, label=fields, style=dashed];
n372 -> n377  [color=darkseagreen4, key=1, label=field, style=dashed];
n372 -> n379  [color=darkseagreen4, key=1, label=field, style=dashed];
n372 -> n385  [color=darkseagreen4, key=1, label=field, style=dashed];
n397 -> n399  [color=darkseagreen4, key=1, label="System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>", style=dashed];
n398 -> n401  [color=darkseagreen4, key=1, label=current, style=dashed];
n400 -> n401  [color=darkseagreen4, key=1, label=current, style=dashed];
d88 -> d102  [color=green, key=1, label=bool, style=dashed];
d88 -> n100  [color=darkseagreen4, key=1, label=bool, style=dashed];
d96 -> d102  [color=green, key=1, label=indexerCloseChar, style=dashed];
d96 -> n100  [color=darkseagreen4, key=1, label=indexerCloseChar, style=dashed];
d96 -> n103  [color=darkseagreen4, key=1, label=indexerCloseChar, style=dashed];
d107 -> d204  [color=green, key=1, label=bool, style=dashed];
d107 -> d202  [color=darkseagreen4, key=1, label=char, style=dashed];
d230 -> d233  [color=green, key=1, label=expressionPath, style=dashed];
d227 -> d230  [color=green, key=1, label=bool, style=dashed];
d253 -> d256  [color=darkseagreen4, key=1, label=booleanExpression, style=dashed];
d253 -> d258  [color=darkseagreen4, key=1, label=booleanExpression, style=dashed];
d253 -> d268  [color=darkseagreen4, key=1, label=booleanExpression, style=dashed];
d253 -> d278  [color=darkseagreen4, key=1, label=booleanExpression, style=dashed];
d243 -> d257  [color=darkseagreen4, key=1, label=rootExpression, style=dashed];
d243 -> d266  [color=darkseagreen4, key=1, label=rootExpression, style=dashed];
d243 -> d276  [color=darkseagreen4, key=1, label=rootExpression, style=dashed];
d235 -> d238  [color=darkseagreen4, key=1, label=value, style=dashed];
d28 -> n39  [color=darkseagreen4, key=1, label=int, style=dashed];
d28 -> n43  [color=darkseagreen4, key=1, label="System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>", style=dashed];
d28 -> n45  [color=darkseagreen4, key=1, label="System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>", style=dashed];
d28 -> n61  [color=darkseagreen4, key=1, label="System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>", style=dashed];
d28 -> n70  [color=darkseagreen4, key=1, label=bool, style=dashed];
d28 -> n76  [color=darkseagreen4, key=1, label=int, style=dashed];
d28 -> n80  [color=darkseagreen4, key=1, label="System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>", style=dashed];
d28 -> n81  [color=darkseagreen4, key=1, label=bool, style=dashed];
d244 -> d255  [color=darkseagreen4, key=1, label=parentExpression, style=dashed];
d244 -> d256  [color=darkseagreen4, key=1, label=parentExpression, style=dashed];
d244 -> d262  [color=darkseagreen4, key=1, label=parentExpression, style=dashed];
d244 -> d264  [color=darkseagreen4, key=1, label=parentExpression, style=dashed];
d244 -> d268  [color=darkseagreen4, key=1, label=parentExpression, style=dashed];
d244 -> d272  [color=darkseagreen4, key=1, label=parentExpression, style=dashed];
d244 -> d274  [color=darkseagreen4, key=1, label=parentExpression, style=dashed];
d244 -> d278  [color=darkseagreen4, key=1, label=parentExpression, style=dashed];
d213 -> d223  [color=darkseagreen4, key=1, label="out System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>", style=dashed];
d213 -> d220  [color=darkseagreen4, key=1, label="out System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>", style=dashed];
d216 -> d223  [color=darkseagreen4, key=1, label="out System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>", style=dashed];
d216 -> d220  [color=darkseagreen4, key=1, label="out System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>", style=dashed];
d217 -> d223  [color=darkseagreen4, key=1, label="out System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>", style=dashed];
d217 -> d220  [color=darkseagreen4, key=1, label="out System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>", style=dashed];
d265 -> d278  [color=darkseagreen4, key=1, label=parentExpression, style=dashed];
d265 -> d268  [color=darkseagreen4, key=1, label=parentExpression, style=dashed];
d265 -> d272  [color=darkseagreen4, key=1, label=parentExpression, style=dashed];
d265 -> d274  [color=darkseagreen4, key=1, label=parentExpression, style=dashed];
d275 -> d278  [color=darkseagreen4, key=1, label=parentExpression, style=dashed];
d267 -> d276  [color=darkseagreen4, key=1, label=rootExpression, style=dashed];
m0_180 -> m0_184  [color=darkseagreen4, key=1, label=o, style=dashed];
m0_181 -> m0_183  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_448 -> m0_450  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_448 -> m0_451  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_448 -> m0_452  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_240 -> m0_242  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_240 -> m0_243  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_406 -> m0_408  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_120 -> m0_125  [color=darkseagreen4, key=1, label=o, style=dashed];
m0_121 -> m0_124  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_344 -> m0_352  [color=darkseagreen4, key=1, label=o1, style=dashed];
m0_345 -> m0_354  [color=darkseagreen4, key=1, label=o2, style=dashed];
m0_347 -> m0_351  [color=darkseagreen4, key=1, label=a, style=dashed];
m0_346 -> m0_356  [color=darkseagreen4, key=1, label=o3, style=dashed];
m0_348 -> m0_350  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_348 -> m0_351  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_348 -> m0_352  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_348 -> m0_353  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_348 -> m0_354  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_348 -> m0_355  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_348 -> m0_356  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_348 -> m0_357  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_348 -> m0_358  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_348 -> m0_359  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_391 -> m0_393  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_391 -> m0_394  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_206 -> m0_215  [color=darkseagreen4, key=1, label=a, style=dashed];
m0_206 -> m0_208  [color=darkseagreen4, key=1, label=a, style=dashed];
m0_206 -> m0_218  [color=darkseagreen4, key=1, label=a, style=dashed];
m0_206 -> m0_209  [color=darkseagreen4, key=1, label=a, style=dashed];
m0_206 -> m0_221  [color=darkseagreen4, key=1, label=a, style=dashed];
m0_207 -> m0_214  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_208 -> m0_217  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_209 -> m0_220  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_210 -> m0_224  [color=darkseagreen4, key=1, label=a, style=dashed];
m0_211 -> m0_223  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_496 -> m0_520  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_147 -> m0_151  [color=darkseagreen4, key=1, label=a, style=dashed];
m0_148 -> m0_150  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_377 -> m0_379  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_377 -> m0_380  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_69 -> m0_71  [color=darkseagreen4, key=1, label=o, style=dashed];
m0_525 -> m0_528  [color=darkseagreen4, key=1, label=name, style=dashed];
m0_526 -> m0_529  [color=darkseagreen4, key=1, label=productPrice, style=dashed];
m0_527 -> m0_530  [color=darkseagreen4, key=1, label=productName, style=dashed];
m0_531 -> m0_544  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_531 -> m0_534  [color=darkseagreen4, key=1, label=storeNames, style=dashed];
m0_531 -> m0_535  [color=darkseagreen4, key=1, label=storeNames, style=dashed];
m0_531 -> m0_536  [color=darkseagreen4, key=1, label=storeNames, style=dashed];
m0_532 -> m0_547  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_532 -> m0_537  [color=darkseagreen4, key=1, label=firstProductNames, style=dashed];
m0_532 -> m0_538  [color=darkseagreen4, key=1, label=firstProductNames, style=dashed];
m0_532 -> m0_539  [color=darkseagreen4, key=1, label=firstProductNames, style=dashed];
m0_533 -> m0_550  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_533 -> m0_540  [color=darkseagreen4, key=1, label=totalPrice, style=dashed];
m0_307 -> m0_309  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_307 -> m0_310  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_307 -> m0_311  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_248 -> m0_250  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_248 -> m0_251  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_248 -> m0_252  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_253 -> m0_255  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_256 -> m0_258  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_261 -> m0_263  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_264 -> m0_266  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_264 -> m0_267  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_264 -> m0_268  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_264 -> m0_269  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_264 -> m0_270  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_264 -> m0_271  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_264 -> m0_272  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_264 -> m0_273  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_264 -> m0_274  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_275 -> m0_277  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_275 -> m0_278  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_275 -> m0_279  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_275 -> m0_280  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_275 -> m0_281  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_94 -> m0_96  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_94 -> m0_97  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_94 -> m0_98  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_334 -> m0_336  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_334 -> m0_337  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_334 -> m0_338  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_334 -> m0_339  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_334 -> m0_340  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_28 -> m0_30  [color=darkseagreen4, key=1, label=tokens, style=dashed];
m0_28 -> m0_31  [color=darkseagreen4, key=1, label=tokens, style=dashed];
m0_28 -> m0_32  [color=darkseagreen4, key=1, label=tokens, style=dashed];
m0_13 -> m0_16  [color=green, key=1, label=models, style=dashed];
m0_13 -> m0_17  [color=green, key=1, label=models, style=dashed];
m0_14 -> m0_16  [color=green, key=1, label=results, style=dashed];
m0_14 -> m0_17  [color=green, key=1, label=results, style=dashed];
m0_15 -> m0_17  [color=darkseagreen4, key=1, label=results, style=dashed];
m0_15 -> m0_18  [color=darkseagreen4, key=1, label=results, style=dashed];
m0_15 -> m0_19  [color=darkseagreen4, key=1, label=results, style=dashed];
m0_15 -> m0_20  [color=darkseagreen4, key=1, label=results, style=dashed];
m0_15 -> m0_21  [color=darkseagreen4, key=1, label=results, style=dashed];
m0_15 -> m0_22  [color=darkseagreen4, key=1, label=results, style=dashed];
m0_232 -> m0_236  [color=darkseagreen4, key=1, label=a, style=dashed];
m0_233 -> m0_235  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_103 -> m0_105  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_103 -> m0_106  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_484 -> m0_486  [color=darkseagreen4, key=1, label=tokens, style=dashed];
m0_484 -> m0_487  [color=darkseagreen4, key=1, label=tokens, style=dashed];
m0_484 -> m0_488  [color=darkseagreen4, key=1, label=tokens, style=dashed];
m0_484 -> m0_489  [color=darkseagreen4, key=1, label=tokens, style=dashed];
m0_484 -> m0_490  [color=darkseagreen4, key=1, label=tokens, style=dashed];
m0_484 -> m0_491  [color=darkseagreen4, key=1, label=tokens, style=dashed];
m0_484 -> m0_492  [color=darkseagreen4, key=1, label=tokens, style=dashed];
m0_486 -> m0_486  [color=darkseagreen4, key=1, label=i, style=dashed];
m0_487 -> m0_487  [color=darkseagreen4, key=1, label=i, style=dashed];
m0_488 -> m0_488  [color=darkseagreen4, key=1, label=i, style=dashed];
m0_489 -> m0_489  [color=darkseagreen4, key=1, label=i, style=dashed];
m0_490 -> m0_490  [color=darkseagreen4, key=1, label=i, style=dashed];
m0_491 -> m0_491  [color=darkseagreen4, key=1, label=i, style=dashed];
m0_192 -> m0_196  [color=darkseagreen4, key=1, label=o, style=dashed];
m0_193 -> m0_195  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_475 -> m0_478  [color=darkseagreen4, key=1, label=a, style=dashed];
m0_475 -> m0_479  [color=darkseagreen4, key=1, label=a, style=dashed];
m0_475 -> m0_480  [color=darkseagreen4, key=1, label=a, style=dashed];
m0_476 -> m0_478  [color=darkseagreen4, key=1, label=results, style=dashed];
m0_476 -> m0_479  [color=darkseagreen4, key=1, label=results, style=dashed];
m0_476 -> m0_480  [color=darkseagreen4, key=1, label=results, style=dashed];
m0_384 -> m0_386  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_384 -> m0_387  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_86 -> m0_88  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_86 -> m0_89  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_315 -> m0_322  [color=darkseagreen4, key=1, label=o1, style=dashed];
m0_316 -> m0_324  [color=darkseagreen4, key=1, label=o2, style=dashed];
m0_317 -> m0_321  [color=darkseagreen4, key=1, label=a, style=dashed];
m0_318 -> m0_320  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_318 -> m0_321  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_318 -> m0_322  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_318 -> m0_323  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_318 -> m0_324  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_318 -> m0_325  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_428 -> m0_430  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_428 -> m0_431  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_428 -> m0_432  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_285 -> m0_287  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_285 -> m0_288  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_285 -> m0_289  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_285 -> m0_290  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_285 -> m0_291  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_168 -> m0_173  [color=darkseagreen4, key=1, label=c, style=dashed];
m0_169 -> m0_172  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_363 -> m0_365  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_366 -> m0_368  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_412 -> m0_414  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_412 -> m0_415  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_412 -> m0_416  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_37 -> m0_39  [color=darkseagreen4, key=1, label=results, style=dashed];
m0_74 -> m0_76  [color=darkseagreen4, key=1, label=o, style=dashed];
m0_161 -> m0_165  [color=darkseagreen4, key=1, label=a, style=dashed];
m0_162 -> m0_164  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_467 -> m0_470  [color=darkseagreen4, key=1, label=a, style=dashed];
m0_467 -> m0_471  [color=darkseagreen4, key=1, label=a, style=dashed];
m0_467 -> m0_472  [color=darkseagreen4, key=1, label=a, style=dashed];
m0_468 -> m0_470  [color=darkseagreen4, key=1, label=results, style=dashed];
m0_468 -> m0_471  [color=darkseagreen4, key=1, label=results, style=dashed];
m0_468 -> m0_472  [color=darkseagreen4, key=1, label=results, style=dashed];
m0_438 -> m0_440  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_438 -> m0_441  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_438 -> m0_442  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_438 -> m0_443  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_438 -> m0_444  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_420 -> m0_422  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_420 -> m0_423  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_420 -> m0_424  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_398 -> m0_400  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_398 -> m0_401  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_398 -> m0_402  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_295 -> m0_297  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_295 -> m0_298  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_295 -> m0_299  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_295 -> m0_300  [color=darkseagreen4, key=1, label=t, style=dashed];
m0_154 -> m0_158  [color=darkseagreen4, key=1, label=a, style=dashed];
m0_155 -> m0_157  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_135 -> m0_139  [color=darkseagreen4, key=1, label=o, style=dashed];
m0_136 -> m0_138  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_199 -> m0_203  [color=darkseagreen4, key=1, label=a, style=dashed];
m0_200 -> m0_202  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_128 -> m0_132  [color=darkseagreen4, key=1, label=o, style=dashed];
m0_129 -> m0_131  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m0_461 -> m0_464  [color=darkseagreen4, key=1, label=a, style=dashed];
m0_462 -> m0_464  [color=darkseagreen4, key=1, label=results, style=dashed];
m0_57 -> m0_59  [color=darkseagreen4, key=1, label=o, style=dashed];
m0_575 -> m0_125  [color=darkseagreen4, key=1, label=o, style=dashed];
m0_576 -> m0_132  [color=darkseagreen4, key=1, label=o, style=dashed];
m0_577 -> m0_139  [color=darkseagreen4, key=1, label=o, style=dashed];
m0_578 -> m0_151  [color=darkseagreen4, key=1, label=a, style=dashed];
m0_579 -> m0_158  [color=darkseagreen4, key=1, label=a, style=dashed];
m0_580 -> m0_165  [color=darkseagreen4, key=1, label=a, style=dashed];
m0_581 -> m0_173  [color=darkseagreen4, key=1, label=c, style=dashed];
m0_582 -> m0_184  [color=darkseagreen4, key=1, label=o, style=dashed];
m0_583 -> m0_196  [color=darkseagreen4, key=1, label=o, style=dashed];
m0_584 -> m0_203  [color=darkseagreen4, key=1, label=a, style=dashed];
m0_585 -> m0_215  [color=darkseagreen4, key=1, label=a, style=dashed];
m0_585 -> m0_218  [color=darkseagreen4, key=1, label=a, style=dashed];
m0_585 -> m0_221  [color=darkseagreen4, key=1, label=a, style=dashed];
m0_585 -> m0_224  [color=darkseagreen4, key=1, label=a, style=dashed];
m0_586 -> m0_236  [color=darkseagreen4, key=1, label=a, style=dashed];
m1_95 -> m1_97  [color=darkseagreen4, key=1, label=path, style=dashed];
m1_95 -> m1_98  [color=darkseagreen4, key=1, label=path, style=dashed];
m1_309 -> m1_311  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_382 -> m1_384  [color=darkseagreen4, key=1, label=path, style=dashed];
m1_382 -> m1_385  [color=darkseagreen4, key=1, label=path, style=dashed];
m1_382 -> m1_386  [color=darkseagreen4, key=1, label=path, style=dashed];
m1_133 -> m1_135  [color=darkseagreen4, key=1, label=path, style=dashed];
m1_133 -> m1_136  [color=darkseagreen4, key=1, label=path, style=dashed];
m1_75 -> m1_77  [color=darkseagreen4, key=1, label=path, style=dashed];
m1_3 -> m1_5  [color=darkseagreen4, key=1, label=booleanExpression, style=dashed];
m1_3 -> m1_6  [color=darkseagreen4, key=1, label=booleanExpression, style=dashed];
m1_127 -> m1_129  [color=darkseagreen4, key=1, label=path, style=dashed];
m1_127 -> m1_130  [color=darkseagreen4, key=1, label=path, style=dashed];
m1_445 -> m1_447  [color=darkseagreen4, key=1, label=path, style=dashed];
m1_445 -> m1_448  [color=darkseagreen4, key=1, label=path, style=dashed];
m1_445 -> m1_449  [color=darkseagreen4, key=1, label=path, style=dashed];
m1_458 -> m1_460  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_303 -> m1_305  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_106 -> m1_108  [color=darkseagreen4, key=1, label=path, style=dashed];
m1_321 -> m1_323  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_339 -> m1_341  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_157 -> m1_159  [color=darkseagreen4, key=1, label=path, style=dashed];
m1_160 -> m1_162  [color=darkseagreen4, key=1, label=expressions, style=dashed];
m1_111 -> m1_113  [color=green, key=1, label=path, style=dashed];
m1_111 -> m1_114  [color=green, key=1, label=path, style=dashed];
m1_255 -> m1_257  [color=darkseagreen4, key=1, label=expressions, style=dashed];
m1_258 -> m1_261  [color=darkseagreen4, key=1, label=first, style=dashed];
m1_262 -> m1_265  [color=darkseagreen4, key=1, label=second, style=dashed];
m1_13 -> m1_18  [color=darkseagreen4, key=1, label=booleanExpression, style=dashed];
m1_14 -> m1_16  [color=darkseagreen4, key=1, label=leftPaths, style=dashed];
m1_15 -> m1_17  [color=darkseagreen4, key=1, label=rightPaths, style=dashed];
m1_327 -> m1_329  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_69 -> m1_71  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_46 -> m1_48  [color=darkseagreen4, key=1, label=path, style=dashed];
m1_63 -> m1_65  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_56 -> m1_59  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_85 -> m1_87  [color=darkseagreen4, key=1, label=path, style=dashed];
m1_269 -> m1_271  [color=darkseagreen4, key=1, label=andExpression, style=dashed];
m1_272 -> m1_275  [color=darkseagreen4, key=1, label=first, style=dashed];
m1_278 -> m1_281  [color=darkseagreen4, key=1, label=orFirst, style=dashed];
m1_282 -> m1_285  [color=darkseagreen4, key=1, label=orSecond, style=dashed];
m1_139 -> m1_141  [color=darkseagreen4, key=1, label=path, style=dashed];
m1_144 -> m1_146  [color=darkseagreen4, key=1, label=paths, style=dashed];
m1_173 -> m1_175  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_333 -> m1_335  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_372 -> m1_374  [color=darkseagreen4, key=1, label=path, style=dashed];
m1_417 -> m1_419  [color=darkseagreen4, key=1, label=path, style=dashed];
m1_417 -> m1_420  [color=darkseagreen4, key=1, label=path, style=dashed];
m1_417 -> m1_421  [color=darkseagreen4, key=1, label=path, style=dashed];
m1_452 -> m1_454  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_116 -> m1_118  [color=darkseagreen4, key=1, label=path, style=dashed];
m1_117 -> m1_119  [color=green, key=1, label=path, style=dashed];
m1_117 -> m1_120  [color=green, key=1, label=path, style=dashed];
m1_121 -> m1_123  [color=darkseagreen4, key=1, label=path, style=dashed];
m1_121 -> m1_124  [color=darkseagreen4, key=1, label=path, style=dashed];
m1_80 -> m1_82  [color=darkseagreen4, key=1, label=path, style=dashed];
m1_410 -> m1_412  [color=darkseagreen4, key=1, label=path, style=dashed];
m1_410 -> m1_413  [color=darkseagreen4, key=1, label=path, style=dashed];
m1_410 -> m1_414  [color=darkseagreen4, key=1, label=path, style=dashed];
m1_195 -> m1_197  [color=darkseagreen4, key=1, label=path, style=dashed];
m1_198 -> m1_200  [color=darkseagreen4, key=1, label=expressions, style=dashed];
m1_366 -> m1_368  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_360 -> m1_362  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_478 -> m1_480  [color=darkseagreen4, key=1, label=path, style=dashed];
m1_478 -> m1_481  [color=darkseagreen4, key=1, label=path, style=dashed];
m1_478 -> m1_482  [color=darkseagreen4, key=1, label=path, style=dashed];
m1_478 -> m1_483  [color=darkseagreen4, key=1, label=path, style=dashed];
m1_478 -> m1_484  [color=darkseagreen4, key=1, label=path, style=dashed];
m1_149 -> m1_151  [color=darkseagreen4, key=1, label=path, style=dashed];
m1_152 -> m1_154  [color=darkseagreen4, key=1, label=expressions, style=dashed];
m1_424 -> m1_426  [color=darkseagreen4, key=1, label=path, style=dashed];
m1_424 -> m1_427  [color=darkseagreen4, key=1, label=path, style=dashed];
m1_424 -> m1_428  [color=darkseagreen4, key=1, label=path, style=dashed];
m1_377 -> m1_379  [color=darkseagreen4, key=1, label=path, style=dashed];
m1_403 -> m1_405  [color=darkseagreen4, key=1, label=path, style=dashed];
m1_403 -> m1_406  [color=darkseagreen4, key=1, label=path, style=dashed];
m1_403 -> m1_407  [color=darkseagreen4, key=1, label=path, style=dashed];
m1_36 -> m1_38  [color=darkseagreen4, key=1, label=path, style=dashed];
m1_389 -> m1_391  [color=darkseagreen4, key=1, label=path, style=dashed];
m1_389 -> m1_392  [color=darkseagreen4, key=1, label=path, style=dashed];
m1_389 -> m1_393  [color=darkseagreen4, key=1, label=path, style=dashed];
m1_297 -> m1_299  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_472 -> m1_474  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_179 -> m1_181  [color=darkseagreen4, key=1, label=path, style=dashed];
m1_182 -> m1_184  [color=darkseagreen4, key=1, label=expressions, style=dashed];
m1_90 -> m1_92  [color=darkseagreen4, key=1, label=path, style=dashed];
m1_51 -> m1_53  [color=darkseagreen4, key=1, label=path, style=dashed];
m1_31 -> m1_33  [color=darkseagreen4, key=1, label=path, style=dashed];
m1_26 -> m1_28  [color=darkseagreen4, key=1, label=path, style=dashed];
m1_21 -> m1_23  [color=darkseagreen4, key=1, label=path, style=dashed];
m1_464 -> m1_466  [color=darkseagreen4, key=1, label=path, style=dashed];
m1_464 -> m1_467  [color=darkseagreen4, key=1, label=path, style=dashed];
m1_464 -> m1_468  [color=darkseagreen4, key=1, label=path, style=dashed];
m1_464 -> m1_469  [color=darkseagreen4, key=1, label=path, style=dashed];
m1_41 -> m1_43  [color=darkseagreen4, key=1, label=path, style=dashed];
m1_290 -> m1_292  [color=darkseagreen4, key=1, label=paths, style=dashed];
m1_290 -> m1_293  [color=darkseagreen4, key=1, label=paths, style=dashed];
m1_315 -> m1_317  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m1_396 -> m1_398  [color=darkseagreen4, key=1, label=path, style=dashed];
m1_396 -> m1_399  [color=darkseagreen4, key=1, label=path, style=dashed];
m1_396 -> m1_400  [color=darkseagreen4, key=1, label=path, style=dashed];
m1_165 -> m1_167  [color=darkseagreen4, key=1, label=path, style=dashed];
m1_168 -> m1_170  [color=darkseagreen4, key=1, label=expressions, style=dashed];
m1_431 -> m1_433  [color=darkseagreen4, key=1, label=path, style=dashed];
m1_431 -> m1_434  [color=darkseagreen4, key=1, label=path, style=dashed];
m1_431 -> m1_435  [color=darkseagreen4, key=1, label=path, style=dashed];
m1_438 -> m1_440  [color=darkseagreen4, key=1, label=path, style=dashed];
m1_438 -> m1_441  [color=darkseagreen4, key=1, label=path, style=dashed];
m1_438 -> m1_442  [color=darkseagreen4, key=1, label=path, style=dashed];
m1_350 -> m1_352  [color=darkseagreen4, key=1, label=path, style=dashed];
m1_350 -> m1_353  [color=darkseagreen4, key=1, label=path, style=dashed];
m1_350 -> m1_354  [color=darkseagreen4, key=1, label=path, style=dashed];
m1_350 -> m1_355  [color=darkseagreen4, key=1, label=path, style=dashed];
m1_350 -> m1_356  [color=darkseagreen4, key=1, label=path, style=dashed];
m1_350 -> m1_357  [color=darkseagreen4, key=1, label=path, style=dashed];
m1_101 -> m1_103  [color=darkseagreen4, key=1, label=path, style=dashed];
m1_187 -> m1_189  [color=darkseagreen4, key=1, label=path, style=dashed];
m1_190 -> m1_192  [color=darkseagreen4, key=1, label=expressions, style=dashed];
m2_126 -> m2_128  [color=darkseagreen4, key=1, label=properties, style=dashed];
m2_127 -> m2_129  [color=darkseagreen4, key=1, label=c, style=dashed];
m2_128 -> m2_135  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_77 -> m2_79  [color=darkseagreen4, key=1, label=schema, style=dashed];
m2_77 -> m2_80  [color=darkseagreen4, key=1, label=schema, style=dashed];
m2_77 -> m2_81  [color=darkseagreen4, key=1, label=schema, style=dashed];
m2_180 -> m2_188  [color=darkseagreen4, key=1, label=schema, style=dashed];
m2_188 -> m2_198  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_188 -> m2_162  [color=green, key=1, label="lambda expression", style=dashed];
m2_183 -> m2_188  [color=darkseagreen4, key=1, label=jsonWriter, style=dashed];
m2_183 -> m2_190  [color=darkseagreen4, key=1, label=jsonWriter, style=dashed];
m2_187 -> m2_199  [color=darkseagreen4, key=1, label=errors, style=dashed];
m2_187 -> m2_189  [color=darkseagreen4, key=1, label=errors, style=dashed];
m2_105 -> m2_107  [color=darkseagreen4, key=1, label=schema, style=dashed];
m2_105 -> m2_108  [color=darkseagreen4, key=1, label=schema, style=dashed];
m2_95 -> m2_99  [color=darkseagreen4, key=1, label=schema, style=dashed];
m2_2 -> m2_8  [color=darkseagreen4, key=1, label=schema, style=dashed];
m2_118 -> m2_120  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m2_118 -> m2_121  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m2_40 -> m2_42  [color=darkseagreen4, key=1, label=schema, style=dashed];
m2_40 -> m2_43  [color=darkseagreen4, key=1, label=schema, style=dashed];
m2_40 -> m2_44  [color=darkseagreen4, key=1, label=schema, style=dashed];
m2_67 -> m2_70  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_86 -> m2_88  [color=darkseagreen4, key=1, label=schema, style=dashed];
m2_86 -> m2_89  [color=darkseagreen4, key=1, label=schema, style=dashed];
m2_86 -> m2_90  [color=darkseagreen4, key=1, label=schema, style=dashed];
m2_235 -> m2_120  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CustomDirectoryInfoMapper", style=dashed];
m2_235 -> m2_121  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CustomDirectoryInfoMapper", style=dashed];
m2_236 -> m2_199  [color=green, key=1, label=errors, style=dashed];
m2_237 -> m2_199  [color=darkseagreen4, key=1, label=errors, style=dashed];
m3_25 -> m3_28  [color=green, key=1, label="Newtonsoft.Json.Linq.JToken", style=dashed];
m3_25 -> m3_30  [color=green, key=1, label="Newtonsoft.Json.Linq.JToken", style=dashed];
m3_29 -> m3_30  [color=green, key=1, label="Newtonsoft.Json.Linq.JToken", style=dashed];
m3_2 -> m3_6  [color=darkseagreen4, key=1, label=int, style=dashed];
m3_2 -> m3_7  [color=darkseagreen4, key=1, label=bool, style=dashed];
m3_2 -> m3_8  [color=darkseagreen4, key=1, label=int, style=dashed];
m3_2 -> m3_10  [color=darkseagreen4, key=1, label=int, style=dashed];
m3_2 -> m3_12  [color=darkseagreen4, key=1, label=int, style=dashed];
m3_2 -> m3_13  [color=darkseagreen4, key=1, label=bool, style=dashed];
m3_2 -> m3_14  [color=darkseagreen4, key=1, label=int, style=dashed];
m3_2 -> m3_16  [color=darkseagreen4, key=1, label=int, style=dashed];
m3_2 -> m3_17  [color=darkseagreen4, key=1, label=bool, style=dashed];
m3_2 -> m3_18  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JToken", style=dashed];
m3_3 -> m3_5  [color=darkseagreen4, key=1, label=a, style=dashed];
m3_3 -> m3_6  [color=darkseagreen4, key=1, label=a, style=dashed];
m3_3 -> m3_10  [color=darkseagreen4, key=1, label=a, style=dashed];
m3_4 -> m3_11  [color=darkseagreen4, key=1, label=c, style=dashed];
m3_4 -> m3_12  [color=darkseagreen4, key=1, label=c, style=dashed];
m3_4 -> m3_16  [color=darkseagreen4, key=1, label=c, style=dashed];
m4_0 -> m4_5  [color=green, key=1, label="Newtonsoft.Json.Linq.JToken", style=dashed];
m4_0 -> m4_7  [color=green, key=1, label="Newtonsoft.Json.Linq.JToken", style=dashed];
m4_1 -> m4_7  [color=green, key=1, label=t, style=dashed];
m4_1 -> m4_8  [color=green, key=1, label=t, style=dashed];
m4_4 -> m4_6  [color=green, key=1, label=d, style=dashed];
m4_12 -> m4_5  [color=green, key=1, label="Newtonsoft.Json.Linq.JsonPath.QueryScanFilter", style=dashed];
m4_12 -> m4_7  [color=green, key=1, label="Newtonsoft.Json.Linq.JsonPath.QueryScanFilter", style=dashed];
m5_1 -> m5_3  [color=darkseagreen4, key=1, label=c, style=dashed];
m5_7 -> m5_18  [color=green, key=1, label=value, style=dashed];
m5_13 -> m5_15  [color=darkseagreen4, key=1, label=e, style=dashed];
m5_13 -> m5_16  [color=darkseagreen4, key=1, label=e, style=dashed];
m5_21 -> m5_2  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.ScanFilter", style=dashed];
m5_21 -> m5_15  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.ScanFilter", style=dashed];
m5_21 -> m5_17  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.ScanFilter", style=dashed];
m6_11 -> m6_14  [color=darkseagreen4, key=1, label=e, style=dashed];
m6_11 -> m6_15  [color=darkseagreen4, key=1, label=e, style=dashed];
m6_18 -> m6_13  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.ScanMultipleFilter", style=dashed];
m8_447 -> m8_449  [color=darkseagreen4, key=1, label=newDoc, style=dashed];
m8_823 -> m8_825  [color=darkseagreen4, key=1, label=dxml, style=dashed];
m8_749 -> m8_753  [color=darkseagreen4, key=1, label=json, style=dashed];
m8_664 -> m8_666  [color=darkseagreen4, key=1, label=reader, style=dashed];
m8_665 -> m8_669  [color=darkseagreen4, key=1, label=doc, style=dashed];
m8_69 -> m8_73  [color=darkseagreen4, key=1, label=json1, style=dashed];
m8_135 -> m8_137  [color=darkseagreen4, key=1, label=xml, style=dashed];
m8_539 -> m8_545  [color=darkseagreen4, key=1, label=json, style=dashed];
m8_543 -> m8_545  [color=darkseagreen4, key=1, label=newJson, style=dashed];
m8_230 -> m8_232  [color=darkseagreen4, key=1, label=xml, style=dashed];
m8_233 -> m8_235  [color=darkseagreen4, key=1, label=jsonText, style=dashed];
m8_677 -> m8_679  [color=darkseagreen4, key=1, label=json, style=dashed];
m8_681 -> m8_683  [color=darkseagreen4, key=1, label=xaml2, style=dashed];
m8_649 -> m8_651  [color=darkseagreen4, key=1, label=ms, style=dashed];
m8_874 -> m8_881  [color=darkseagreen4, key=1, label=model, style=dashed];
m8_876 -> m8_881  [color=darkseagreen4, key=1, label=serializer, style=dashed];
m8_877 -> m8_882  [color=darkseagreen4, key=1, label=json, style=dashed];
m8_879 -> m8_881  [color=darkseagreen4, key=1, label=jsonWriter, style=dashed];
m8_124 -> m8_126  [color=darkseagreen4, key=1, label=xml, style=dashed];
m8_124 -> m8_130  [color=darkseagreen4, key=1, label=xml, style=dashed];
m8_807 -> m8_810  [color=darkseagreen4, key=1, label=dt, style=dashed];
m8_809 -> m8_811  [color=darkseagreen4, key=1, label=dxml, style=dashed];
m8_480 -> m8_482  [color=darkseagreen4, key=1, label=xml, style=dashed];
m8_483 -> m8_485  [color=darkseagreen4, key=1, label=jsonText, style=dashed];
m8_620 -> m8_622  [color=darkseagreen4, key=1, label=xml, style=dashed];
m8_571 -> m8_576  [color=darkseagreen4, key=1, label=json, style=dashed];
m8_384 -> m8_386  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_363 -> m8_365  [color=darkseagreen4, key=1, label=xml, style=dashed];
m8_364 -> m8_369  [color=darkseagreen4, key=1, label=doc, style=dashed];
m8_338 -> m8_342  [color=green, key=1, label=json, style=dashed];
m8_340 -> m8_342  [color=darkseagreen4, key=1, label=expected, style=dashed];
m8_295 -> m8_299  [color=darkseagreen4, key=1, label=xml, style=dashed];
m8_295 -> m8_303  [color=darkseagreen4, key=1, label=xml, style=dashed];
m8_295 -> m8_308  [color=darkseagreen4, key=1, label=xml, style=dashed];
m8_296 -> m8_301  [color=darkseagreen4, key=1, label=expected, style=dashed];
m8_296 -> m8_306  [color=darkseagreen4, key=1, label=expected, style=dashed];
m8_788 -> m8_790  [color=darkseagreen4, key=1, label=d, style=dashed];
m8_788 -> m8_791  [color=darkseagreen4, key=1, label=d, style=dashed];
m8_788 -> m8_792  [color=darkseagreen4, key=1, label=d, style=dashed];
m8_345 -> m8_350  [color=darkseagreen4, key=1, label=XmlNode, style=dashed];
m8_348 -> m8_351  [color=darkseagreen4, key=1, label=sw, style=dashed];
m8_310 -> m8_324  [color=darkseagreen4, key=1, label=XmlDocument, style=dashed];
m8_322 -> m8_325  [color=darkseagreen4, key=1, label=builder, style=dashed];
m8_355 -> m8_357  [color=darkseagreen4, key=1, label=xml, style=dashed];
m8_356 -> m8_360  [color=darkseagreen4, key=1, label=doc, style=dashed];
m8_399 -> m8_401  [color=darkseagreen4, key=1, label=arrayXml, style=dashed];
m8_402 -> m8_404  [color=darkseagreen4, key=1, label=arrayJsonText, style=dashed];
m8_405 -> m8_407  [color=darkseagreen4, key=1, label=arrayXml, style=dashed];
m8_408 -> m8_410  [color=darkseagreen4, key=1, label=arrayJsonText, style=dashed];
m8_411 -> m8_413  [color=darkseagreen4, key=1, label=arrayXml, style=dashed];
m8_414 -> m8_416  [color=darkseagreen4, key=1, label=arrayJsonText, style=dashed];
m8_417 -> m8_419  [color=darkseagreen4, key=1, label=arrayXml, style=dashed];
m8_420 -> m8_422  [color=darkseagreen4, key=1, label=arrayJsonText, style=dashed];
m8_458 -> m8_464  [color=darkseagreen4, key=1, label=json, style=dashed];
m8_579 -> m8_584  [color=darkseagreen4, key=1, label=json, style=dashed];
m8_580 -> m8_583  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_490 -> m8_492  [color=darkseagreen4, key=1, label=xml, style=dashed];
m8_491 -> m8_497  [color=darkseagreen4, key=1, label=doc, style=dashed];
m8_686 -> m8_688  [color=darkseagreen4, key=1, label=xaml, style=dashed];
m8_689 -> m8_691  [color=darkseagreen4, key=1, label=json, style=dashed];
m8_692 -> m8_695  [color=darkseagreen4, key=1, label=node, style=dashed];
m8_694 -> m8_696  [color=darkseagreen4, key=1, label=writer, style=dashed];
m8_697 -> m8_699  [color=darkseagreen4, key=1, label=xaml2, style=dashed];
m8_113 -> m8_118  [color=darkseagreen4, key=1, label=xml, style=dashed];
m8_168 -> m8_175  [color=darkseagreen4, key=1, label=x, style=dashed];
m8_238 -> m8_258  [color=darkseagreen4, key=1, label=doc, style=dashed];
m8_238 -> m8_267  [color=darkseagreen4, key=1, label=doc, style=dashed];
m8_251 -> m8_265  [color=darkseagreen4, key=1, label=instruction, style=dashed];
m8_254 -> m8_266  [color=darkseagreen4, key=1, label=cDataSection, style=dashed];
m8_257 -> m8_261  [color=darkseagreen4, key=1, label=element, style=dashed];
m8_257 -> m8_264  [color=darkseagreen4, key=1, label=element, style=dashed];
m8_257 -> m8_265  [color=darkseagreen4, key=1, label=element, style=dashed];
m8_257 -> m8_266  [color=darkseagreen4, key=1, label=element, style=dashed];
m8_257 -> m8_267  [color=darkseagreen4, key=1, label=element, style=dashed];
m8_259 -> m8_261  [color=darkseagreen4, key=1, label=aa, style=dashed];
m8_262 -> m8_264  [color=darkseagreen4, key=1, label=aa, style=dashed];
m8_240 -> m8_242  [color=darkseagreen4, key=1, label=xml, style=dashed];
m8_373 -> m8_375  [color=darkseagreen4, key=1, label=newDoc, style=dashed];
m8_776 -> m8_778  [color=darkseagreen4, key=1, label=d, style=dashed];
m8_432 -> m8_436  [color=darkseagreen4, key=1, label=json, style=dashed];
m8_433 -> m8_435  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_378 -> m8_380  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_707 -> m8_712  [color=darkseagreen4, key=1, label=xmlString, style=dashed];
m8_802 -> m8_804  [color=darkseagreen4, key=1, label=dxml, style=dashed];
m8_77 -> m8_82  [color=darkseagreen4, key=1, label=json1, style=dashed];
m8_78 -> m8_80  [color=darkseagreen4, key=1, label=doc, style=dashed];
m8_817 -> m8_819  [color=darkseagreen4, key=1, label=dxml, style=dashed];
m8_717 -> m8_720  [color=darkseagreen4, key=1, label=xml, style=dashed];
m8_717 -> m8_721  [color=darkseagreen4, key=1, label=xml, style=dashed];
m8_717 -> m8_722  [color=darkseagreen4, key=1, label=xml, style=dashed];
m8_719 -> m8_721  [color=darkseagreen4, key=1, label=w2, style=dashed];
m8_719 -> m8_722  [color=darkseagreen4, key=1, label=w2, style=dashed];
m8_0 -> m8_4  [color=darkseagreen4, key=1, label=XmlNode, style=dashed];
m8_0 -> m8_6  [color=darkseagreen4, key=1, label=XmlNode, style=dashed];
m8_1 -> m8_12  [color=darkseagreen4, key=1, label=json, style=dashed];
m8_1 -> m8_13  [color=darkseagreen4, key=1, label=json, style=dashed];
m8_2 -> m8_9  [color=darkseagreen4, key=1, label=reader, style=dashed];
m8_514 -> m8_516  [color=darkseagreen4, key=1, label=circularDictionary, style=dashed];
m8_520 -> m8_522  [color=darkseagreen4, key=1, label=xml, style=dashed];
m8_523 -> m8_525  [color=darkseagreen4, key=1, label=xmlJson, style=dashed];
m8_828 -> m8_831  [color=darkseagreen4, key=1, label=dt, style=dashed];
m8_830 -> m8_832  [color=darkseagreen4, key=1, label=dxml, style=dashed];
m8_27 -> m8_32  [color=darkseagreen4, key=1, label=string, style=dashed];
m8_34 -> m8_43  [color=darkseagreen4, key=1, label=node, style=dashed];
m8_38 -> m8_40  [color=darkseagreen4, key=1, label=d, style=dashed];
m8_35 -> m8_42  [color=darkseagreen4, key=1, label=xmlText, style=dashed];
m8_39 -> m8_42  [color=darkseagreen4, key=1, label=linqXmlText, style=dashed];
m8_756 -> m8_760  [color=darkseagreen4, key=1, label=json, style=dashed];
m8_757 -> m8_759  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_796 -> m8_798  [color=darkseagreen4, key=1, label=dxml, style=dashed];
m8_391 -> m8_393  [color=darkseagreen4, key=1, label=newDoc, style=dashed];
m8_394 -> m8_396  [color=darkseagreen4, key=1, label=json, style=dashed];
m8_311 -> m8_316  [color=darkseagreen4, key=1, label=XDocument, style=dashed];
m8_314 -> m8_317  [color=darkseagreen4, key=1, label=builder, style=dashed];
m8_734 -> m8_736  [color=darkseagreen4, key=1, label=xmlString, style=dashed];
m8_289 -> m8_291  [color=darkseagreen4, key=1, label=jsonText, style=dashed];
m8_556 -> m8_560  [color=darkseagreen4, key=1, label=json, style=dashed];
m8_557 -> m8_559  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_53 -> m8_56  [color=darkseagreen4, key=1, label=reader, style=dashed];
m8_53 -> m8_57  [color=darkseagreen4, key=1, label=reader, style=dashed];
m8_54 -> m8_59  [color=darkseagreen4, key=1, label=sw, style=dashed];
m8_55 -> m8_57  [color=darkseagreen4, key=1, label=writer, style=dashed];
m8_55 -> m8_58  [color=darkseagreen4, key=1, label=writer, style=dashed];
m8_154 -> m8_161  [color=darkseagreen4, key=1, label=x, style=dashed];
m8_629 -> m8_631  [color=darkseagreen4, key=1, label=xml, style=dashed];
m8_763 -> m8_765  [color=darkseagreen4, key=1, label=xmlString, style=dashed];
m8_216 -> m8_219  [color=darkseagreen4, key=1, label=doc, style=dashed];
m8_613 -> m8_615  [color=darkseagreen4, key=1, label=xml, style=dashed];
m8_328 -> m8_330  [color=darkseagreen4, key=1, label=xml, style=dashed];
m8_329 -> m8_335  [color=darkseagreen4, key=1, label=doc, style=dashed];
m8_331 -> m8_333  [color=darkseagreen4, key=1, label=jsonText, style=dashed];
m8_531 -> m8_536  [color=darkseagreen4, key=1, label=json, style=dashed];
m8_425 -> m8_429  [color=darkseagreen4, key=1, label=json, style=dashed];
m8_426 -> m8_428  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_223 -> m8_227  [color=darkseagreen4, key=1, label=json, style=dashed];
m8_224 -> m8_226  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m8_894 -> m8_25  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest", style=dashed];
m8_894 -> m8_449  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest", style=dashed];
m8_894 -> m8_451  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest", style=dashed];
m8_894 -> m8_460  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest", style=dashed];
m8_894 -> m8_462  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest", style=dashed];
m8_894 -> m8_580  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest", style=dashed];
m8_894 -> m8_584  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest", style=dashed];
m8_894 -> m8_594  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest", style=dashed];
m8_894 -> m8_606  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest", style=dashed];
m8_895 -> m8_227  [color=darkseagreen4, key=1, label=json, style=dashed];
m8_896 -> m8_429  [color=darkseagreen4, key=1, label=json, style=dashed];
m8_896 -> m8_342  [color=green, key=1, label=json, style=dashed];
m8_897 -> m8_436  [color=darkseagreen4, key=1, label=json, style=dashed];
m8_898 -> m8_560  [color=darkseagreen4, key=1, label=json, style=dashed];
m8_899 -> m8_584  [color=darkseagreen4, key=1, label=json, style=dashed];
m8_900 -> m8_760  [color=darkseagreen4, key=1, label=json, style=dashed];
m8_900 -> m8_429  [color=green, key=1, label=json, style=dashed];
}
