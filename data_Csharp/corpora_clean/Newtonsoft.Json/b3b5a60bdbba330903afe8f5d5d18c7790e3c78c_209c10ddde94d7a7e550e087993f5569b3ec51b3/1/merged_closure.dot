digraph  {
n38 [label=string, span=""];
n39 [label="Newtonsoft.Json.Tests.Schema.PerformanceTester", span=""];
n0 [cluster="Newtonsoft.Json.Tests.Schema.PerformanceTests.ReaderPerformance()", label="Entry Newtonsoft.Json.Tests.Schema.PerformanceTests.ReaderPerformance()", span="50-50"];
n1 [cluster="Newtonsoft.Json.Tests.Schema.PerformanceTests.ReaderPerformance()", label="string json = @''[\r\n    {\r\n        ''''id'''': 2,\r\n        ''''name'''': ''''An ice sculpture'''',\r\n        ''''price'''': 12.50,\r\n        ''''tags'''': [''''cold'''', ''''ice''''],\r\n        ''''dimensions'''': {\r\n            ''''length'''': 7.0,\r\n            ''''width'''': 12.0,\r\n            ''''height'''': 9.5\r\n        },\r\n        ''''warehouseLocation'''': {\r\n            ''''latitude'''': -78.75,\r\n            ''''longitude'''': 20.4\r\n        }\r\n    },\r\n    {\r\n        ''''id'''': 3,\r\n        ''''name'''': ''''A blue mouse'''',\r\n        ''''price'''': 25.50,\r\n        ''''dimensions'''': {\r\n            ''''length'''': 3.1,\r\n            ''''width'''': 1.0,\r\n            ''''height'''': 1.0\r\n        },\r\n        ''''warehouseLocation'''': {\r\n            ''''latitude'''': 54.4,\r\n            ''''longitude'''': -32.7\r\n        }\r\n    }\r\n]''", span="52-82"];
n2 [cluster="Newtonsoft.Json.Tests.Schema.PerformanceTests.ReaderPerformance()", label="JsonSchema schema = JsonSchema.Parse(@''{\r\n    ''''$schema'''': ''''http://json-schema.org/draft-04/schema#'''',\r\n    ''''title'''': ''''Product set'''',\r\n    ''''type'''': ''''array'''',\r\n    ''''items'''': {\r\n        ''''title'''': ''''Product'''',\r\n        ''''type'''': ''''object'''',\r\n        ''''properties'''': {\r\n            ''''id'''': {\r\n                ''''description'''': ''''The unique identifier for a product'''',\r\n                ''''type'''': ''''number'''',\r\n                ''''required'''': true\r\n            },\r\n            ''''name'''': {\r\n                ''''type'''': ''''string'''',\r\n                ''''required'''': true\r\n            },\r\n            ''''price'''': {\r\n                ''''type'''': ''''number'''',\r\n                ''''minimum'''': 0,\r\n                ''''exclusiveMinimum'''': true,\r\n                ''''required'''': true\r\n            },\r\n            ''''tags'''': {\r\n                ''''type'''': ''''array'''',\r\n                ''''items'''': {\r\n                    ''''type'''': ''''string''''\r\n                },\r\n                ''''minItems'''': 1,\r\n                ''''uniqueItems'''': true\r\n            },\r\n            ''''dimensions'''': {\r\n                ''''type'''': ''''object'''',\r\n                ''''properties'''': {\r\n                    ''''length'''': {''''type'''': ''''number'''',''''required'''': true},\r\n                    ''''width'''': {''''type'''': ''''number'''',''''required'''': true},\r\n                    ''''height'''': {''''type'''': ''''number'''',''''required'''': true}\r\n                }\r\n            },\r\n            ''''warehouseLocation'''': {\r\n                ''''description'''': ''''A geographical coordinate'''',\r\n                ''''type'''': ''''object'''',\r\n                ''''properties'''': {\r\n                    ''''latitude'''': { ''''type'''': ''''number'''' },\r\n                    ''''longitude'''': { ''''type'''': ''''number'''' }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}'')", span="84-133"];
n6 [cluster="Newtonsoft.Json.Tests.Schema.PerformanceTests.ReaderPerformance()", label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="139-139"];
n3 [cluster="Newtonsoft.Json.Tests.Schema.PerformanceTests.ReaderPerformance()", label="var tester = new PerformanceTester(''Reader'')", span="135-135"];
n12 [cluster="Newtonsoft.Json.Schema.JsonSchema.Parse(string)", label="Entry Newtonsoft.Json.Schema.JsonSchema.Parse(string)", span="294-294"];
n8 [cluster="Newtonsoft.Json.Tests.Schema.PerformanceTests.ReaderPerformance()", label="validatingReader.Schema = schema", span="141-141"];
n4 [cluster="Newtonsoft.Json.Tests.Schema.PerformanceTests.ReaderPerformance()", label="int i = 0", span="137-137"];
n13 [cluster="Newtonsoft.Json.Tests.Schema.PerformanceTester.PerformanceTester(string)", label="Entry Newtonsoft.Json.Tests.Schema.PerformanceTester.PerformanceTester(string)", span="156-156"];
n5 [cluster="Newtonsoft.Json.Tests.Schema.PerformanceTests.ReaderPerformance()", label="i < 5000", span="137-137"];
n10 [cluster="Newtonsoft.Json.Tests.Schema.PerformanceTests.ReaderPerformance()", label="i++", span="137-137"];
n11 [cluster="Newtonsoft.Json.Tests.Schema.PerformanceTests.ReaderPerformance()", label="Exit Newtonsoft.Json.Tests.Schema.PerformanceTests.ReaderPerformance()", span="50-50"];
n7 [cluster="Newtonsoft.Json.Tests.Schema.PerformanceTests.ReaderPerformance()", label="JsonValidatingReader validatingReader = new JsonValidatingReader(reader)", span="140-140"];
n14 [cluster="Newtonsoft.Json.JsonTextReader.JsonTextReader(System.IO.TextReader)", label="Entry Newtonsoft.Json.JsonTextReader.JsonTextReader(System.IO.TextReader)", span="72-72"];
n15 [cluster="System.IO.StringReader.StringReader(string)", label="Entry System.IO.StringReader.StringReader(string)", span="0-0"];
n16 [cluster="Newtonsoft.Json.JsonValidatingReader.JsonValidatingReader(Newtonsoft.Json.JsonReader)", label="Entry Newtonsoft.Json.JsonValidatingReader.JsonValidatingReader(Newtonsoft.Json.JsonReader)", span="297-297"];
n9 [cluster="Newtonsoft.Json.Tests.Schema.PerformanceTests.ReaderPerformance()", label="validatingReader.Read()", span="143-143"];
n17 [cluster="Newtonsoft.Json.JsonValidatingReader.Read()", label="Entry Newtonsoft.Json.JsonValidatingReader.Read()", span="448-448"];
n18 [cluster="Newtonsoft.Json.Tests.Schema.PerformanceTester.PerformanceTester(string)", label="Exit Newtonsoft.Json.Tests.Schema.PerformanceTester.PerformanceTester(string)", span="156-156"];
n19 [cluster="lambda expression", label="Entry lambda expression", span="157-157"];
n20 [cluster="lambda expression", label="Console.WriteLine(description + '': '' + ts.TotalSeconds)", span="157-157"];
n21 [cluster="lambda expression", label="Exit lambda expression", span="157-157"];
n22 [cluster="System.Console.WriteLine(string)", label="Entry System.Console.WriteLine(string)", span="0-0"];
n23 [cluster="Newtonsoft.Json.Tests.Schema.PerformanceTester.PerformanceTester(System.Action<System.TimeSpan>)", label="Entry Newtonsoft.Json.Tests.Schema.PerformanceTester.PerformanceTester(System.Action<System.TimeSpan>)", span="161-161"];
n24 [cluster="Newtonsoft.Json.Tests.Schema.PerformanceTester.PerformanceTester(System.Action<System.TimeSpan>)", label="_callback = callback", span="163-163"];
n25 [cluster="Newtonsoft.Json.Tests.Schema.PerformanceTester.PerformanceTester(System.Action<System.TimeSpan>)", label="_stopwatch.Start()", span="164-164"];
n26 [cluster="Newtonsoft.Json.Tests.Schema.PerformanceTester.PerformanceTester(System.Action<System.TimeSpan>)", label="Exit Newtonsoft.Json.Tests.Schema.PerformanceTester.PerformanceTester(System.Action<System.TimeSpan>)", span="161-161"];
n27 [cluster="System.Diagnostics.Stopwatch.Start()", label="Entry System.Diagnostics.Stopwatch.Start()", span="0-0"];
n28 [cluster="Newtonsoft.Json.Tests.Schema.PerformanceTester.Start(System.Action<System.TimeSpan>)", label="Entry Newtonsoft.Json.Tests.Schema.PerformanceTester.Start(System.Action<System.TimeSpan>)", span="167-167"];
n29 [cluster="Newtonsoft.Json.Tests.Schema.PerformanceTester.Start(System.Action<System.TimeSpan>)", label="return new PerformanceTester(callback);", span="169-169"];
n30 [cluster="Newtonsoft.Json.Tests.Schema.PerformanceTester.Start(System.Action<System.TimeSpan>)", label="Exit Newtonsoft.Json.Tests.Schema.PerformanceTester.Start(System.Action<System.TimeSpan>)", span="167-167"];
n31 [cluster="Newtonsoft.Json.Tests.Schema.PerformanceTester.Dispose()", label="Entry Newtonsoft.Json.Tests.Schema.PerformanceTester.Dispose()", span="172-172"];
n32 [cluster="Newtonsoft.Json.Tests.Schema.PerformanceTester.Dispose()", label="_stopwatch.Stop()", span="174-174"];
n33 [cluster="Newtonsoft.Json.Tests.Schema.PerformanceTester.Dispose()", label="_callback != null", span="175-175"];
n36 [cluster="System.Diagnostics.Stopwatch.Stop()", label="Entry System.Diagnostics.Stopwatch.Stop()", span="0-0"];
n34 [cluster="Newtonsoft.Json.Tests.Schema.PerformanceTester.Dispose()", label="_callback(Result)", span="176-176"];
n35 [cluster="Newtonsoft.Json.Tests.Schema.PerformanceTester.Dispose()", label="Exit Newtonsoft.Json.Tests.Schema.PerformanceTester.Dispose()", span="172-172"];
n37 [cluster="System.Action<T>.Invoke(T)", label="Entry System.Action<T>.Invoke(T)", span="0-0"];
m1_633 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.NoAdditionalProperties()", file="TestFixtureBase.cs", label="Entry Newtonsoft.Json.Tests.JsonValidatingReaderTests.NoAdditionalProperties()", span="1014-1014"];
m1_634 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.NoAdditionalProperties()", file="TestFixtureBase.cs", label="string schemaJson = @''{\r\n  ''''type'''':''''array'''',\r\n  ''''items'''': [{''''type'''':''''string''''},{''''type'''':''''integer''''}],\r\n  ''''additionalProperties'''': false\r\n}''", span="1016-1020"];
m1_635 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.NoAdditionalProperties()", file="TestFixtureBase.cs", label="string json = @''[1, 'a', null]''", span="1022-1022"];
m1_639 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.NoAdditionalProperties()", file="TestFixtureBase.cs", label="reader.Schema = JsonSchema.Parse(schemaJson)", span="1028-1028"];
m1_636 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.NoAdditionalProperties()", file="TestFixtureBase.cs", label="Json.Schema.ValidationEventArgs validationEventArgs = null", span="1024-1024"];
m1_637 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.NoAdditionalProperties()", file="TestFixtureBase.cs", label="JsonValidatingReader reader = new JsonValidatingReader(new JsonTextReader(new StringReader(json)))", span="1026-1026"];
m1_638 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.NoAdditionalProperties()", file="TestFixtureBase.cs", label="reader.ValidationEventHandler += (sender, args) => { validationEventArgs = args; }", span="1027-1027"];
m1_640 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.NoAdditionalProperties()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="1030-1030"];
m1_641 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.NoAdditionalProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.StartArray, reader.TokenType)", span="1031-1031"];
m1_642 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.NoAdditionalProperties()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="1033-1033"];
m1_643 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.NoAdditionalProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.Integer, reader.TokenType)", span="1034-1034"];
m1_645 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.NoAdditionalProperties()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="1037-1037"];
m1_646 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.NoAdditionalProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.String, reader.TokenType)", span="1038-1038"];
m1_648 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.NoAdditionalProperties()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="1041-1041"];
m1_649 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.NoAdditionalProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.Null, reader.TokenType)", span="1042-1042"];
m1_651 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.NoAdditionalProperties()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="1045-1045"];
m1_652 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.NoAdditionalProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.EndArray, reader.TokenType)", span="1046-1046"];
m1_653 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.NoAdditionalProperties()", file="TestFixtureBase.cs", label="Assert.IsFalse(reader.Read())", span="1048-1048"];
m1_644 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.NoAdditionalProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(''Invalid type. Expected String but got Integer. Line 1, position 2.'', validationEventArgs.Message)", span="1035-1035"];
m1_647 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.NoAdditionalProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(''Invalid type. Expected Integer but got String. Line 1, position 7.'', validationEventArgs.Message)", span="1039-1039"];
m1_650 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.NoAdditionalProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(''Index 3 has not been defined and the schema does not allow additional items. Line 1, position 13.'', validationEventArgs.Message)", span="1043-1043"];
m1_654 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.NoAdditionalProperties()", file="TestFixtureBase.cs", label="Exit Newtonsoft.Json.Tests.JsonValidatingReaderTests.NoAdditionalProperties()", span="1014-1014"];
m1_695 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendedComplex()", file="TestFixtureBase.cs", label="Entry Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendedComplex()", span="1115-1115"];
m1_696 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendedComplex()", file="TestFixtureBase.cs", label="string first = @''{\r\n  ''''id'''':''''first'''',\r\n  ''''type'''':''''object'''',\r\n  ''''properties'''':\r\n  {\r\n    ''''firstproperty'''':{''''type'''':''''string''''},\r\n    ''''secondproperty'''':{''''type'''':''''string'''',''''maxLength'''':10},\r\n    ''''thirdproperty'''':{\r\n      ''''type'''':''''object'''',\r\n      ''''properties'''':\r\n      {\r\n        ''''thirdproperty_firstproperty'''':{''''type'''':''''string'''',''''maxLength'''':10,''''minLength'''':7}\r\n      }\r\n    }\r\n  },\r\n  ''''additionalProperties'''':{}\r\n}''", span="1117-1133"];
m1_697 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendedComplex()", file="TestFixtureBase.cs", label="string second = @''{\r\n  ''''id'''':''''second'''',\r\n  ''''type'''':''''object'''',\r\n  ''''extends'''':{''''$ref'''':''''first''''},\r\n  ''''properties'''':\r\n  {\r\n    ''''secondproperty'''':{''''type'''':''''any''''},\r\n    ''''thirdproperty'''':{\r\n      ''''extends'''':{\r\n        ''''properties'''':\r\n        {\r\n          ''''thirdproperty_firstproperty'''':{''''maxLength'''':9,''''minLength'''':6,''''pattern'''':''''hi2u''''}\r\n        },\r\n        ''''additionalProperties'''':{''''maxLength'''':9,''''minLength'''':6,''''enum'''':[''''one'''',''''two'''']}\r\n      },\r\n      ''''type'''':''''object'''',\r\n      ''''properties'''':\r\n      {\r\n        ''''thirdproperty_firstproperty'''':{''''pattern'''':''''hi''''}\r\n      },\r\n      ''''additionalProperties'''':{''''type'''':''''string'''',''''enum'''':[''''two'''',''''three'''']}\r\n    },\r\n    ''''fourthproperty'''':{''''type'''':''''string''''}\r\n  },\r\n  ''''additionalProperties'''':false\r\n}''", span="1135-1160"];
m1_699 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendedComplex()", file="TestFixtureBase.cs", label="JsonSchema firstSchema = JsonSchema.Parse(first, resolver)", span="1163-1163"];
m1_698 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendedComplex()", file="TestFixtureBase.cs", label="JsonSchemaResolver resolver = new JsonSchemaResolver()", span="1162-1162"];
m1_700 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendedComplex()", file="TestFixtureBase.cs", label="JsonSchema secondSchema = JsonSchema.Parse(second, resolver)", span="1164-1164"];
m1_701 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendedComplex()", file="TestFixtureBase.cs", label="JsonSchemaModelBuilder modelBuilder = new JsonSchemaModelBuilder()", span="1166-1166"];
m1_707 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendedComplex()", file="TestFixtureBase.cs", label="reader.Schema = secondSchema", span="1186-1186"];
m1_702 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendedComplex()", file="TestFixtureBase.cs", label="string json = @''{\r\n  'firstproperty':'blahblahblahblahblahblah',\r\n  'secondproperty':'secasecasecasecaseca',\r\n  'thirdproperty':{\r\n    'thirdproperty_firstproperty':'aaa',\r\n    'additional':'three'\r\n  }\r\n}''", span="1168-1175"];
m1_703 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendedComplex()", file="TestFixtureBase.cs", label="Json.Schema.ValidationEventArgs validationEventArgs = null", span="1177-1177"];
m1_705 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendedComplex()", file="TestFixtureBase.cs", label="JsonValidatingReader reader = new JsonValidatingReader(new JsonTextReader(new StringReader(json)))", span="1180-1180"];
m1_704 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendedComplex()", file="TestFixtureBase.cs", label="List<string> errors = new List<string>()", span="1178-1178"];
m1_706 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendedComplex()", file="TestFixtureBase.cs", label="reader.ValidationEventHandler += (sender, args) =>\r\n        {\r\n          validationEventArgs = args;\r\n          errors.Add(validationEventArgs.Message);\r\n        }", span="1181-1185"];
m1_723 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendedComplex()", file="TestFixtureBase.cs", label="Assert.AreEqual(1, errors.Count)", span="1207-1207"];
m1_724 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendedComplex()", file="TestFixtureBase.cs", label="Assert.AreEqual(''String 'secasecasecasecaseca' exceeds maximum length of 10. Line 3, position 42.'', errors[0])", span="1208-1208"];
m1_728 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendedComplex()", file="TestFixtureBase.cs", label="Assert.AreEqual(1, errors.Count)", span="1213-1213"];
m1_731 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendedComplex()", file="TestFixtureBase.cs", label="Assert.AreEqual(1, errors.Count)", span="1217-1217"];
m1_735 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendedComplex()", file="TestFixtureBase.cs", label="Assert.AreEqual(1, errors.Count)", span="1222-1222"];
m1_739 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendedComplex()", file="TestFixtureBase.cs", label="Assert.AreEqual(4, errors.Count)", span="1227-1227"];
m1_740 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendedComplex()", file="TestFixtureBase.cs", label="Assert.AreEqual(''String 'aaa' is less than minimum length of 7. Line 5, position 40.'', errors[1])", span="1228-1228"];
m1_741 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendedComplex()", file="TestFixtureBase.cs", label="Assert.AreEqual(''String 'aaa' does not match regex pattern 'hi'. Line 5, position 40.'', errors[2])", span="1229-1229"];
m1_742 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendedComplex()", file="TestFixtureBase.cs", label="Assert.AreEqual(''String 'aaa' does not match regex pattern 'hi2u'. Line 5, position 40.'', errors[3])", span="1230-1230"];
m1_746 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendedComplex()", file="TestFixtureBase.cs", label="Assert.AreEqual(4, errors.Count)", span="1235-1235"];
m1_750 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendedComplex()", file="TestFixtureBase.cs", label="Assert.AreEqual(5, errors.Count)", span="1240-1240"];
m1_751 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendedComplex()", file="TestFixtureBase.cs", label="Assert.AreEqual(''String 'three' is less than minimum length of 6. Line 6, position 25.'', errors[4])", span="1241-1241"];
m1_708 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendedComplex()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="1188-1188"];
m1_709 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendedComplex()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="1189-1189"];
m1_710 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendedComplex()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="1191-1191"];
m1_711 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendedComplex()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="1192-1192"];
m1_712 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendedComplex()", file="TestFixtureBase.cs", label="Assert.AreEqual(''firstproperty'', reader.Value.ToString())", span="1193-1193"];
m1_714 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendedComplex()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="1196-1196"];
m1_715 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendedComplex()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.String, reader.TokenType)", span="1197-1197"];
m1_716 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendedComplex()", file="TestFixtureBase.cs", label="Assert.AreEqual(''blahblahblahblahblahblah'', reader.Value.ToString())", span="1198-1198"];
m1_717 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendedComplex()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="1200-1200"];
m1_718 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendedComplex()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="1201-1201"];
m1_719 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendedComplex()", file="TestFixtureBase.cs", label="Assert.AreEqual(''secondproperty'', reader.Value.ToString())", span="1202-1202"];
m1_720 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendedComplex()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="1204-1204"];
m1_721 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendedComplex()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.String, reader.TokenType)", span="1205-1205"];
m1_722 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendedComplex()", file="TestFixtureBase.cs", label="Assert.AreEqual(''secasecasecasecaseca'', reader.Value.ToString())", span="1206-1206"];
m1_725 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendedComplex()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="1210-1210"];
m1_726 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendedComplex()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="1211-1211"];
m1_727 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendedComplex()", file="TestFixtureBase.cs", label="Assert.AreEqual(''thirdproperty'', reader.Value.ToString())", span="1212-1212"];
m1_729 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendedComplex()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="1215-1215"];
m1_730 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendedComplex()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="1216-1216"];
m1_732 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendedComplex()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="1219-1219"];
m1_733 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendedComplex()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="1220-1220"];
m1_734 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendedComplex()", file="TestFixtureBase.cs", label="Assert.AreEqual(''thirdproperty_firstproperty'', reader.Value.ToString())", span="1221-1221"];
m1_736 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendedComplex()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="1224-1224"];
m1_737 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendedComplex()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.String, reader.TokenType)", span="1225-1225"];
m1_738 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendedComplex()", file="TestFixtureBase.cs", label="Assert.AreEqual(''aaa'', reader.Value.ToString())", span="1226-1226"];
m1_743 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendedComplex()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="1232-1232"];
m1_744 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendedComplex()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="1233-1233"];
m1_745 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendedComplex()", file="TestFixtureBase.cs", label="Assert.AreEqual(''additional'', reader.Value.ToString())", span="1234-1234"];
m1_747 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendedComplex()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="1237-1237"];
m1_748 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendedComplex()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.String, reader.TokenType)", span="1238-1238"];
m1_749 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendedComplex()", file="TestFixtureBase.cs", label="Assert.AreEqual(''three'', reader.Value.ToString())", span="1239-1239"];
m1_752 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendedComplex()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="1243-1243"];
m1_753 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendedComplex()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.EndObject, reader.TokenType)", span="1244-1244"];
m1_754 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendedComplex()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="1246-1246"];
m1_755 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendedComplex()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.EndObject, reader.TokenType)", span="1247-1247"];
m1_756 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendedComplex()", file="TestFixtureBase.cs", label="Assert.IsFalse(reader.Read())", span="1249-1249"];
m1_713 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendedComplex()", file="TestFixtureBase.cs", label="Assert.AreEqual(null, validationEventArgs)", span="1194-1194"];
m1_757 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendedComplex()", file="TestFixtureBase.cs", label="Exit Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendedComplex()", span="1115-1115"];
m1_435 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.StringDisallowed()", file="TestFixtureBase.cs", label="Entry Newtonsoft.Json.Tests.JsonValidatingReaderTests.StringDisallowed()", span="698-698"];
m1_436 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.StringDisallowed()", file="TestFixtureBase.cs", label="string schemaJson = @''{\r\n  ''''type'''':''''array'''',\r\n  ''''items'''':{\r\n    ''''disallow'''':[''''number'''']\r\n  },\r\n  ''''maxItems'''':3\r\n}''", span="700-706"];
m1_437 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.StringDisallowed()", file="TestFixtureBase.cs", label="string json = ''['pie',1.1]''", span="708-708"];
m1_441 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.StringDisallowed()", file="TestFixtureBase.cs", label="reader.Schema = JsonSchema.Parse(schemaJson)", span="714-714"];
m1_438 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.StringDisallowed()", file="TestFixtureBase.cs", label="Json.Schema.ValidationEventArgs validationEventArgs = null", span="710-710"];
m1_439 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.StringDisallowed()", file="TestFixtureBase.cs", label="JsonValidatingReader reader = new JsonValidatingReader(new JsonTextReader(new StringReader(json)))", span="712-712"];
m1_440 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.StringDisallowed()", file="TestFixtureBase.cs", label="reader.ValidationEventHandler += (sender, args) => { validationEventArgs = args; }", span="713-713"];
m1_442 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.StringDisallowed()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="716-716"];
m1_443 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.StringDisallowed()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.StartArray, reader.TokenType)", span="717-717"];
m1_444 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.StringDisallowed()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="719-719"];
m1_445 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.StringDisallowed()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.String, reader.TokenType)", span="720-720"];
m1_447 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.StringDisallowed()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="723-723"];
m1_448 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.StringDisallowed()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.Float, reader.TokenType)", span="724-724"];
m1_450 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.StringDisallowed()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="727-727"];
m1_451 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.StringDisallowed()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.EndArray, reader.TokenType)", span="728-728"];
m1_446 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.StringDisallowed()", file="TestFixtureBase.cs", label="Assert.AreEqual(null, validationEventArgs)", span="721-721"];
m1_449 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.StringDisallowed()", file="TestFixtureBase.cs", label="Assert.AreEqual(@''Type Float is disallowed. Line 1, position 10.'', validationEventArgs.Message)", span="725-725"];
m1_452 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.StringDisallowed()", file="TestFixtureBase.cs", label="Assert.IsNotNull(validationEventArgs)", span="730-730"];
m1_453 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.StringDisallowed()", file="TestFixtureBase.cs", label="Exit Newtonsoft.Json.Tests.JsonValidatingReaderTests.StringDisallowed()", span="698-698"];
m1_54 [cluster="Unk.IsNull", file="TestFixtureBase.cs", label="Entry Unk.IsNull", span=""];
m1_80 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateUnrestrictedArray()", file="TestFixtureBase.cs", label="Assert.AreEqual(''nested2'', reader.Value.ToString())", span="131-131"];
m1_81 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateUnrestrictedArray()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="133-133"];
m1_82 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateUnrestrictedArray()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.EndArray, reader.TokenType)", span="134-134"];
m1_795 [cluster="Newtonsoft.Json.JsonReader.ReadAsInt32()", file="TestFixtureBase.cs", label="Entry Newtonsoft.Json.JsonReader.ReadAsInt32()", span="329-329"];
m1_119 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.StringLessThanMinimumLength()", file="TestFixtureBase.cs", label="Assert.IsNotNull(validationEventArgs)", span="190-190"];
m1_561 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.GetExtendedSchema()", file="TestFixtureBase.cs", label="Entry Newtonsoft.Json.Tests.JsonValidatingReaderTests.GetExtendedSchema()", span="904-904"];
m1_562 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.GetExtendedSchema()", file="TestFixtureBase.cs", label="string first = @''{\r\n  ''''id'''':''''first'''',\r\n  ''''type'''':''''object'''',\r\n  ''''properties'''':\r\n  {\r\n    ''''firstproperty'''':{''''type'''':''''string'''',''''required'''':true}\r\n  },\r\n  ''''additionalProperties'''':{}\r\n}''", span="906-914"];
m1_563 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.GetExtendedSchema()", file="TestFixtureBase.cs", label="string second = @''{\r\n  ''''id'''':''''second'''',\r\n  ''''type'''':''''object'''',\r\n  ''''extends'''':{''''$ref'''':''''first''''},\r\n  ''''properties'''':\r\n  {\r\n    ''''secondproperty'''':{''''type'''':''''string'''',''''required'''':true}\r\n  },\r\n  ''''additionalProperties'''':false\r\n}''", span="916-925"];
m1_565 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.GetExtendedSchema()", file="TestFixtureBase.cs", label="JsonSchema firstSchema = JsonSchema.Parse(first, resolver)", span="928-928"];
m1_564 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.GetExtendedSchema()", file="TestFixtureBase.cs", label="JsonSchemaResolver resolver = new JsonSchemaResolver()", span="927-927"];
m1_566 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.GetExtendedSchema()", file="TestFixtureBase.cs", label="JsonSchema secondSchema = JsonSchema.Parse(second, resolver)", span="929-929"];
m1_567 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.GetExtendedSchema()", file="TestFixtureBase.cs", label="return secondSchema;", span="931-931"];
m1_568 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.GetExtendedSchema()", file="TestFixtureBase.cs", label="Exit Newtonsoft.Json.Tests.JsonValidatingReaderTests.GetExtendedSchema()", span="904-904"];
m1_269 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.FloatIsNotInEnum()", file="TestFixtureBase.cs", label="Entry Newtonsoft.Json.Tests.JsonValidatingReaderTests.FloatIsNotInEnum()", span="428-428"];
m1_270 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.FloatIsNotInEnum()", file="TestFixtureBase.cs", label="string schemaJson = @''{\r\n  ''''type'''':''''array'''',\r\n  ''''items'''':{\r\n    ''''type'''':''''number'''',\r\n    ''''enum'''':[1.1,2.2]\r\n  },\r\n  ''''maxItems'''':3\r\n}''", span="430-437"];
m1_271 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.FloatIsNotInEnum()", file="TestFixtureBase.cs", label="string json = ''[1.1,2.2,3.0]''", span="439-439"];
m1_275 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.FloatIsNotInEnum()", file="TestFixtureBase.cs", label="reader.Schema = JsonSchema.Parse(schemaJson)", span="445-445"];
m1_272 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.FloatIsNotInEnum()", file="TestFixtureBase.cs", label="Json.Schema.ValidationEventArgs validationEventArgs = null", span="441-441"];
m1_273 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.FloatIsNotInEnum()", file="TestFixtureBase.cs", label="JsonValidatingReader reader = new JsonValidatingReader(new JsonTextReader(new StringReader(json)))", span="443-443"];
m1_274 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.FloatIsNotInEnum()", file="TestFixtureBase.cs", label="reader.ValidationEventHandler += (sender, args) => { validationEventArgs = args; }", span="444-444"];
m1_276 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.FloatIsNotInEnum()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="447-447"];
m1_277 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.FloatIsNotInEnum()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.StartArray, reader.TokenType)", span="448-448"];
m1_278 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.FloatIsNotInEnum()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="450-450"];
m1_279 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.FloatIsNotInEnum()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.Float, reader.TokenType)", span="451-451"];
m1_280 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.FloatIsNotInEnum()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="453-453"];
m1_281 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.FloatIsNotInEnum()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.Float, reader.TokenType)", span="454-454"];
m1_283 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.FloatIsNotInEnum()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="457-457"];
m1_284 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.FloatIsNotInEnum()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.Float, reader.TokenType)", span="458-458"];
m1_286 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.FloatIsNotInEnum()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="461-461"];
m1_287 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.FloatIsNotInEnum()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.EndArray, reader.TokenType)", span="462-462"];
m1_282 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.FloatIsNotInEnum()", file="TestFixtureBase.cs", label="Assert.AreEqual(null, validationEventArgs)", span="455-455"];
m1_285 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.FloatIsNotInEnum()", file="TestFixtureBase.cs", label="Assert.AreEqual(@''Value 3.0 is not defined in enum. Line 1, position 12.'', validationEventArgs.Message)", span="459-459"];
m1_288 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.FloatIsNotInEnum()", file="TestFixtureBase.cs", label="Assert.IsNotNull(validationEventArgs)", span="464-464"];
m1_289 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.FloatIsNotInEnum()", file="TestFixtureBase.cs", label="Exit Newtonsoft.Json.Tests.JsonValidatingReaderTests.FloatIsNotInEnum()", span="428-428"];
m1_777 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsBytes()", file="TestFixtureBase.cs", label="Entry Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsBytes()", span="1372-1372"];
m1_778 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsBytes()", file="TestFixtureBase.cs", label="JsonSchema s = new JsonSchemaGenerator().Generate(typeof (byte[]))", span="1374-1374"];
m1_779 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsBytes()", file="TestFixtureBase.cs", label="byte[] data = Encoding.UTF8.GetBytes(''Hello world'')", span="1376-1376"];
m1_780 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsBytes()", file="TestFixtureBase.cs", label="JsonReader reader = new JsonValidatingReader(new JsonTextReader(new StringReader(@'''''''' + Convert.ToBase64String(data) + @'''''''')))\r\n        {\r\n          Schema = s\r\n        }", span="1378-1381"];
m1_782 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsBytes()", file="TestFixtureBase.cs", label="Assert.AreEqual(data, bytes)", span="1384-1384"];
m1_781 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsBytes()", file="TestFixtureBase.cs", label="byte[] bytes = reader.ReadAsBytes()", span="1382-1382"];
m1_783 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsBytes()", file="TestFixtureBase.cs", label="Exit Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsBytes()", span="1372-1372"];
m1_200 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.IntegerLessThanMinimumValue()", file="TestFixtureBase.cs", label="Entry Newtonsoft.Json.Tests.JsonValidatingReaderTests.IntegerLessThanMinimumValue()", span="319-319"];
m1_201 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.IntegerLessThanMinimumValue()", file="TestFixtureBase.cs", label="string schemaJson = @''{\r\n  ''''type'''':''''integer'''',\r\n  ''''minimum'''':5\r\n}''", span="321-324"];
m1_202 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.IntegerLessThanMinimumValue()", file="TestFixtureBase.cs", label="string json = ''1''", span="326-326"];
m1_206 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.IntegerLessThanMinimumValue()", file="TestFixtureBase.cs", label="reader.Schema = JsonSchema.Parse(schemaJson)", span="332-332"];
m1_203 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.IntegerLessThanMinimumValue()", file="TestFixtureBase.cs", label="Json.Schema.ValidationEventArgs validationEventArgs = null", span="328-328"];
m1_204 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.IntegerLessThanMinimumValue()", file="TestFixtureBase.cs", label="JsonValidatingReader reader = new JsonValidatingReader(new JsonTextReader(new StringReader(json)))", span="330-330"];
m1_205 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.IntegerLessThanMinimumValue()", file="TestFixtureBase.cs", label="reader.ValidationEventHandler += (sender, args) => { validationEventArgs = args; }", span="331-331"];
m1_207 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.IntegerLessThanMinimumValue()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="334-334"];
m1_208 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.IntegerLessThanMinimumValue()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.Integer, reader.TokenType)", span="335-335"];
m1_209 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.IntegerLessThanMinimumValue()", file="TestFixtureBase.cs", label="Assert.AreEqual(''Integer 1 is less than minimum value of 5. Line 1, position 1.'', validationEventArgs.Message)", span="336-336"];
m1_210 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.IntegerLessThanMinimumValue()", file="TestFixtureBase.cs", label="Assert.IsNotNull(validationEventArgs)", span="338-338"];
m1_211 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.IntegerLessThanMinimumValue()", file="TestFixtureBase.cs", label="Exit Newtonsoft.Json.Tests.JsonValidatingReaderTests.IntegerLessThanMinimumValue()", span="319-319"];
m1_104 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateUnrestrictedArray()", file="TestFixtureBase.cs", label="Assert.IsNull(validationEventArgs)", span="166-166"];
m1_560 [cluster="System.Collections.Generic.List<T>.Add(T)", file="TestFixtureBase.cs", label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0"];
m1_796 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsInt32Failure()", file="TestFixtureBase.cs", label="Entry Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsInt32Failure()", span="1403-1403"];
m1_797 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsInt32Failure()", file="TestFixtureBase.cs", label="JsonSchema s = new JsonSchemaGenerator().Generate(typeof (int))", span="1405-1405"];
m1_798 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsInt32Failure()", file="TestFixtureBase.cs", label="s.Maximum = 2", span="1406-1406"];
m1_799 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsInt32Failure()", file="TestFixtureBase.cs", label="JsonReader reader = new JsonValidatingReader(new JsonTextReader(new StringReader(@''5'')))\r\n        {\r\n          Schema = s\r\n        }", span="1408-1411"];
m1_800 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsInt32Failure()", file="TestFixtureBase.cs", label="reader.ReadAsInt32()", span="1412-1412"];
m1_801 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsInt32Failure()", file="TestFixtureBase.cs", label="Exit Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsInt32Failure()", span="1403-1403"];
m1_788 [cluster="Newtonsoft.Json.JsonReader.ReadAsBytes()", file="TestFixtureBase.cs", label="Entry Newtonsoft.Json.JsonReader.ReadAsBytes()", span="335-335"];
m1_99 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateUnrestrictedArray()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.EndArray, reader.TokenType)", span="158-158"];
m1_784 [cluster="Newtonsoft.Json.Schema.JsonSchemaGenerator.JsonSchemaGenerator()", file="TestFixtureBase.cs", label="Entry Newtonsoft.Json.Schema.JsonSchemaGenerator.JsonSchemaGenerator()", span="39-39"];
m1_53 [cluster="object.ToString()", file="TestFixtureBase.cs", label="Entry object.ToString()", span="0-0"];
m1_215 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.IntegerIsNotInEnum()", file="TestFixtureBase.cs", label="Entry Newtonsoft.Json.Tests.JsonValidatingReaderTests.IntegerIsNotInEnum()", span="342-342"];
m1_216 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.IntegerIsNotInEnum()", file="TestFixtureBase.cs", label="string schemaJson = @''{\r\n  ''''type'''':''''array'''',\r\n  ''''items'''':{\r\n    ''''type'''':''''integer'''',\r\n    ''''enum'''':[1,2]\r\n  },\r\n  ''''maxItems'''':3\r\n}''", span="344-351"];
m1_217 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.IntegerIsNotInEnum()", file="TestFixtureBase.cs", label="string json = ''[1,2,3]''", span="353-353"];
m1_221 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.IntegerIsNotInEnum()", file="TestFixtureBase.cs", label="reader.Schema = JsonSchema.Parse(schemaJson)", span="359-359"];
m1_218 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.IntegerIsNotInEnum()", file="TestFixtureBase.cs", label="Json.Schema.ValidationEventArgs validationEventArgs = null", span="355-355"];
m1_219 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.IntegerIsNotInEnum()", file="TestFixtureBase.cs", label="JsonValidatingReader reader = new JsonValidatingReader(new JsonTextReader(new StringReader(json)))", span="357-357"];
m1_220 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.IntegerIsNotInEnum()", file="TestFixtureBase.cs", label="reader.ValidationEventHandler += (sender, args) => { validationEventArgs = args; }", span="358-358"];
m1_222 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.IntegerIsNotInEnum()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="361-361"];
m1_223 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.IntegerIsNotInEnum()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.StartArray, reader.TokenType)", span="362-362"];
m1_224 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.IntegerIsNotInEnum()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="364-364"];
m1_225 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.IntegerIsNotInEnum()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.Integer, reader.TokenType)", span="365-365"];
m1_226 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.IntegerIsNotInEnum()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="367-367"];
m1_227 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.IntegerIsNotInEnum()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.Integer, reader.TokenType)", span="368-368"];
m1_229 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.IntegerIsNotInEnum()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="371-371"];
m1_230 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.IntegerIsNotInEnum()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.Integer, reader.TokenType)", span="372-372"];
m1_232 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.IntegerIsNotInEnum()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="375-375"];
m1_233 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.IntegerIsNotInEnum()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.EndArray, reader.TokenType)", span="376-376"];
m1_231 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.IntegerIsNotInEnum()", file="TestFixtureBase.cs", label="Assert.AreEqual(@''Value 3 is not defined in enum. Line 1, position 6.'', validationEventArgs.Message)", span="373-373"];
m1_234 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.IntegerIsNotInEnum()", file="TestFixtureBase.cs", label="Assert.IsNotNull(validationEventArgs)", span="378-378"];
m1_235 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.IntegerIsNotInEnum()", file="TestFixtureBase.cs", label="Exit Newtonsoft.Json.Tests.JsonValidatingReaderTests.IntegerIsNotInEnum()", span="342-342"];
m1_317 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.IntValidForNumber()", file="TestFixtureBase.cs", label="Entry Newtonsoft.Json.Tests.JsonValidatingReaderTests.IntValidForNumber()", span="507-507"];
m1_318 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.IntValidForNumber()", file="TestFixtureBase.cs", label="string schemaJson = @''{\r\n  ''''type'''':''''array'''',\r\n  ''''items'''':{\r\n    ''''type'''':''''number''''\r\n  }\r\n}''", span="509-514"];
m1_319 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.IntValidForNumber()", file="TestFixtureBase.cs", label="string json = ''[1]''", span="516-516"];
m1_323 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.IntValidForNumber()", file="TestFixtureBase.cs", label="reader.Schema = JsonSchema.Parse(schemaJson)", span="522-522"];
m1_320 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.IntValidForNumber()", file="TestFixtureBase.cs", label="Json.Schema.ValidationEventArgs validationEventArgs = null", span="518-518"];
m1_321 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.IntValidForNumber()", file="TestFixtureBase.cs", label="JsonValidatingReader reader = new JsonValidatingReader(new JsonTextReader(new StringReader(json)))", span="520-520"];
m1_322 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.IntValidForNumber()", file="TestFixtureBase.cs", label="reader.ValidationEventHandler += (sender, args) => { validationEventArgs = args; }", span="521-521"];
m1_324 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.IntValidForNumber()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="524-524"];
m1_325 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.IntValidForNumber()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.StartArray, reader.TokenType)", span="525-525"];
m1_326 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.IntValidForNumber()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="527-527"];
m1_327 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.IntValidForNumber()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.Integer, reader.TokenType)", span="528-528"];
m1_328 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.IntValidForNumber()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="530-530"];
m1_329 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.IntValidForNumber()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.EndArray, reader.TokenType)", span="531-531"];
m1_330 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.IntValidForNumber()", file="TestFixtureBase.cs", label="Assert.IsNull(validationEventArgs)", span="533-533"];
m1_331 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.IntValidForNumber()", file="TestFixtureBase.cs", label="Exit Newtonsoft.Json.Tests.JsonValidatingReaderTests.IntValidForNumber()", span="507-507"];
m1_541 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendsStringGreaterThanMaximumLength()", file="TestFixtureBase.cs", label="Entry Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendsStringGreaterThanMaximumLength()", span="872-872"];
m1_542 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendsStringGreaterThanMaximumLength()", file="TestFixtureBase.cs", label="string schemaJson = @''{\r\n  ''''extends'''':{\r\n    ''''type'''':''''string'''',\r\n    ''''minLength'''':5,\r\n    ''''maxLength'''':10\r\n  },\r\n  ''''maxLength'''':9\r\n}''", span="874-881"];
m1_543 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendsStringGreaterThanMaximumLength()", file="TestFixtureBase.cs", label="List<string> errors = new List<string>()", span="883-883"];
m1_548 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendsStringGreaterThanMaximumLength()", file="TestFixtureBase.cs", label="reader.Schema = JsonSchema.Parse(schemaJson)", span="894-894"];
m1_544 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendsStringGreaterThanMaximumLength()", file="TestFixtureBase.cs", label="string json = '''The quick brown fox jumps over the lazy dog.'''", span="884-884"];
m1_547 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendsStringGreaterThanMaximumLength()", file="TestFixtureBase.cs", label="reader.ValidationEventHandler += (sender, args) =>\r\n        {\r\n          validationEventArgs = args;\r\n          errors.Add(validationEventArgs.Message);\r\n        }", span="889-893"];
m1_551 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendsStringGreaterThanMaximumLength()", file="TestFixtureBase.cs", label="Assert.AreEqual(1, errors.Count)", span="898-898"];
m1_552 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendsStringGreaterThanMaximumLength()", file="TestFixtureBase.cs", label="Assert.AreEqual(''String 'The quick brown fox jumps over the lazy dog.' exceeds maximum length of 9. Line 1, position 46.'', errors[0])", span="899-899"];
m1_545 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendsStringGreaterThanMaximumLength()", file="TestFixtureBase.cs", label="Json.Schema.ValidationEventArgs validationEventArgs = null", span="886-886"];
m1_546 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendsStringGreaterThanMaximumLength()", file="TestFixtureBase.cs", label="JsonValidatingReader reader = new JsonValidatingReader(new JsonTextReader(new StringReader(json)))", span="888-888"];
m1_549 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendsStringGreaterThanMaximumLength()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="896-896"];
m1_550 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendsStringGreaterThanMaximumLength()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.String, reader.TokenType)", span="897-897"];
m1_553 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendsStringGreaterThanMaximumLength()", file="TestFixtureBase.cs", label="Assert.IsNotNull(validationEventArgs)", span="901-901"];
m1_554 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendsStringGreaterThanMaximumLength()", file="TestFixtureBase.cs", label="Exit Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendsStringGreaterThanMaximumLength()", span="872-872"];
m1_122 [cluster="lambda expression", file="TestFixtureBase.cs", label="Entry lambda expression", span="183-183"];
m1_94 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateUnrestrictedArray()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="151-151"];
m1_95 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateUnrestrictedArray()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.StartArray, reader.TokenType)", span="152-152"];
m1_96 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateUnrestrictedArray()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="154-154"];
m1_97 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateUnrestrictedArray()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.Null, reader.TokenType)", span="155-155"];
m1_98 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateUnrestrictedArray()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="157-157"];
m1_420 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.InvalidDataType()", file="TestFixtureBase.cs", label="Entry Newtonsoft.Json.Tests.JsonValidatingReaderTests.InvalidDataType()", span="673-673"];
m1_421 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.InvalidDataType()", file="TestFixtureBase.cs", label="string schemaJson = @''{\r\n  ''''type'''':''''string'''',\r\n  ''''minItems'''':2,\r\n  ''''maxItems'''':3,\r\n  ''''items'''':{}\r\n}''", span="675-680"];
m1_422 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.InvalidDataType()", file="TestFixtureBase.cs", label="string json = ''[null,null,null,null]''", span="682-682"];
m1_426 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.InvalidDataType()", file="TestFixtureBase.cs", label="reader.Schema = JsonSchema.Parse(schemaJson)", span="688-688"];
m1_423 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.InvalidDataType()", file="TestFixtureBase.cs", label="Json.Schema.ValidationEventArgs validationEventArgs = null", span="684-684"];
m1_424 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.InvalidDataType()", file="TestFixtureBase.cs", label="JsonValidatingReader reader = new JsonValidatingReader(new JsonTextReader(new StringReader(json)))", span="686-686"];
m1_425 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.InvalidDataType()", file="TestFixtureBase.cs", label="reader.ValidationEventHandler += (sender, args) => { validationEventArgs = args; }", span="687-687"];
m1_427 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.InvalidDataType()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="690-690"];
m1_428 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.InvalidDataType()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.StartArray, reader.TokenType)", span="691-691"];
m1_429 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.InvalidDataType()", file="TestFixtureBase.cs", label="Assert.AreEqual(@''Invalid type. Expected String but got Array. Line 1, position 1.'', validationEventArgs.Message)", span="692-692"];
m1_430 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.InvalidDataType()", file="TestFixtureBase.cs", label="Assert.IsNotNull(validationEventArgs)", span="694-694"];
m1_431 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.InvalidDataType()", file="TestFixtureBase.cs", label="Exit Newtonsoft.Json.Tests.JsonValidatingReaderTests.InvalidDataType()", span="673-673"];
m1_164 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.StringDoesNotMatchPattern()", file="TestFixtureBase.cs", label="Entry Newtonsoft.Json.Tests.JsonValidatingReaderTests.StringDoesNotMatchPattern()", span="258-258"];
m1_165 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.StringDoesNotMatchPattern()", file="TestFixtureBase.cs", label="string schemaJson = @''{\r\n  ''''type'''':''''string'''',\r\n  ''''pattern'''':''''foo''''\r\n}''", span="260-263"];
m1_166 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.StringDoesNotMatchPattern()", file="TestFixtureBase.cs", label="string json = '''The quick brown fox jumps over the lazy dog.'''", span="265-265"];
m1_170 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.StringDoesNotMatchPattern()", file="TestFixtureBase.cs", label="reader.Schema = JsonSchema.Parse(schemaJson)", span="271-271"];
m1_167 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.StringDoesNotMatchPattern()", file="TestFixtureBase.cs", label="Json.Schema.ValidationEventArgs validationEventArgs = null", span="267-267"];
m1_168 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.StringDoesNotMatchPattern()", file="TestFixtureBase.cs", label="JsonValidatingReader reader = new JsonValidatingReader(new JsonTextReader(new StringReader(json)))", span="269-269"];
m1_169 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.StringDoesNotMatchPattern()", file="TestFixtureBase.cs", label="reader.ValidationEventHandler += (sender, args) => { validationEventArgs = args; }", span="270-270"];
m1_171 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.StringDoesNotMatchPattern()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="273-273"];
m1_172 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.StringDoesNotMatchPattern()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.String, reader.TokenType)", span="274-274"];
m1_173 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.StringDoesNotMatchPattern()", file="TestFixtureBase.cs", label="Assert.AreEqual(''String 'The quick brown fox jumps over the lazy dog.' does not match regex pattern 'foo'. Line 1, position 46.'', validationEventArgs.Message)", span="275-275"];
m1_174 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.StringDoesNotMatchPattern()", file="TestFixtureBase.cs", label="Assert.IsNotNull(validationEventArgs)", span="277-277"];
m1_175 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.StringDoesNotMatchPattern()", file="TestFixtureBase.cs", label="Exit Newtonsoft.Json.Tests.JsonValidatingReaderTests.StringDoesNotMatchPattern()", span="258-258"];
m1_354 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.BooleanNotInEnum()", file="TestFixtureBase.cs", label="Entry Newtonsoft.Json.Tests.JsonValidatingReaderTests.BooleanNotInEnum()", span="570-570"];
m1_355 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.BooleanNotInEnum()", file="TestFixtureBase.cs", label="string schemaJson = @''{\r\n  ''''type'''':''''array'''',\r\n  ''''items'''':{\r\n    ''''type'''':''''boolean'''',\r\n    ''''enum'''':[true]\r\n  },\r\n  ''''maxItems'''':3\r\n}''", span="572-579"];
m1_356 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.BooleanNotInEnum()", file="TestFixtureBase.cs", label="string json = ''[true,false]''", span="581-581"];
m1_360 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.BooleanNotInEnum()", file="TestFixtureBase.cs", label="reader.Schema = JsonSchema.Parse(schemaJson)", span="587-587"];
m1_357 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.BooleanNotInEnum()", file="TestFixtureBase.cs", label="Json.Schema.ValidationEventArgs validationEventArgs = null", span="583-583"];
m1_358 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.BooleanNotInEnum()", file="TestFixtureBase.cs", label="JsonValidatingReader reader = new JsonValidatingReader(new JsonTextReader(new StringReader(json)))", span="585-585"];
m1_359 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.BooleanNotInEnum()", file="TestFixtureBase.cs", label="reader.ValidationEventHandler += (sender, args) => { validationEventArgs = args; }", span="586-586"];
m1_361 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.BooleanNotInEnum()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="589-589"];
m1_362 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.BooleanNotInEnum()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.StartArray, reader.TokenType)", span="590-590"];
m1_363 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.BooleanNotInEnum()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="592-592"];
m1_364 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.BooleanNotInEnum()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.Boolean, reader.TokenType)", span="593-593"];
m1_366 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.BooleanNotInEnum()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="596-596"];
m1_367 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.BooleanNotInEnum()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.Boolean, reader.TokenType)", span="597-597"];
m1_369 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.BooleanNotInEnum()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="600-600"];
m1_370 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.BooleanNotInEnum()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.EndArray, reader.TokenType)", span="601-601"];
m1_365 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.BooleanNotInEnum()", file="TestFixtureBase.cs", label="Assert.AreEqual(null, validationEventArgs)", span="594-594"];
m1_368 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.BooleanNotInEnum()", file="TestFixtureBase.cs", label="Assert.AreEqual(@''Value false is not defined in enum. Line 1, position 11.'', validationEventArgs.Message)", span="598-598"];
m1_371 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.BooleanNotInEnum()", file="TestFixtureBase.cs", label="Assert.IsNotNull(validationEventArgs)", span="603-603"];
m1_372 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.BooleanNotInEnum()", file="TestFixtureBase.cs", label="Exit Newtonsoft.Json.Tests.JsonValidatingReaderTests.BooleanNotInEnum()", span="570-570"];
m1_123 [cluster="lambda expression", file="TestFixtureBase.cs", label="validationEventArgs = args", span="183-183"];
m1_570 [cluster="Newtonsoft.Json.Schema.JsonSchema.Parse(string, Newtonsoft.Json.Schema.JsonSchemaResolver)", file="TestFixtureBase.cs", label="Entry Newtonsoft.Json.Schema.JsonSchema.Parse(string, Newtonsoft.Json.Schema.JsonSchemaResolver)", span="249-249"];
m1_785 [cluster="Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type)", file="TestFixtureBase.cs", label="Entry Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type)", span="116-116"];
m1_815 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsInt32FromSerializer()", file="TestFixtureBase.cs", label="Entry Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsInt32FromSerializer()", span="1444-1444"];
m1_816 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsInt32FromSerializer()", file="TestFixtureBase.cs", label="JsonValidatingReader reader = new JsonValidatingReader(new JsonTextReader(new StringReader(''[1,2,3]'')))", span="1446-1446"];
m1_817 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsInt32FromSerializer()", file="TestFixtureBase.cs", label="reader.Schema = new JsonSchemaGenerator().Generate(typeof(int[]))", span="1447-1447"];
m1_818 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsInt32FromSerializer()", file="TestFixtureBase.cs", label="int[] values = new JsonSerializer().Deserialize<int[]>(reader)", span="1448-1448"];
m1_819 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsInt32FromSerializer()", file="TestFixtureBase.cs", label="Assert.AreEqual(3, values.Length)", span="1450-1450"];
m1_820 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsInt32FromSerializer()", file="TestFixtureBase.cs", label="Assert.AreEqual(1, values[0])", span="1451-1451"];
m1_821 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsInt32FromSerializer()", file="TestFixtureBase.cs", label="Assert.AreEqual(2, values[1])", span="1452-1452"];
m1_822 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsInt32FromSerializer()", file="TestFixtureBase.cs", label="Assert.AreEqual(3, values[2])", span="1453-1453"];
m1_823 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsInt32FromSerializer()", file="TestFixtureBase.cs", label="Exit Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsInt32FromSerializer()", span="1444-1444"];
m1_254 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.FloatLessThanMinimumValue()", file="TestFixtureBase.cs", label="Entry Newtonsoft.Json.Tests.JsonValidatingReaderTests.FloatLessThanMinimumValue()", span="405-405"];
m1_255 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.FloatLessThanMinimumValue()", file="TestFixtureBase.cs", label="string schemaJson = @''{\r\n  ''''type'''':''''number'''',\r\n  ''''minimum'''':5\r\n}''", span="407-410"];
m1_256 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.FloatLessThanMinimumValue()", file="TestFixtureBase.cs", label="string json = ''1.1''", span="412-412"];
m1_260 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.FloatLessThanMinimumValue()", file="TestFixtureBase.cs", label="reader.Schema = JsonSchema.Parse(schemaJson)", span="418-418"];
m1_257 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.FloatLessThanMinimumValue()", file="TestFixtureBase.cs", label="Json.Schema.ValidationEventArgs validationEventArgs = null", span="414-414"];
m1_258 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.FloatLessThanMinimumValue()", file="TestFixtureBase.cs", label="JsonValidatingReader reader = new JsonValidatingReader(new JsonTextReader(new StringReader(json)))", span="416-416"];
m1_259 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.FloatLessThanMinimumValue()", file="TestFixtureBase.cs", label="reader.ValidationEventHandler += (sender, args) => { validationEventArgs = args; }", span="417-417"];
m1_261 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.FloatLessThanMinimumValue()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="420-420"];
m1_262 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.FloatLessThanMinimumValue()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.Float, reader.TokenType)", span="421-421"];
m1_263 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.FloatLessThanMinimumValue()", file="TestFixtureBase.cs", label="Assert.AreEqual(''Float 1.1 is less than minimum value of 5. Line 1, position 3.'', validationEventArgs.Message)", span="422-422"];
m1_264 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.FloatLessThanMinimumValue()", file="TestFixtureBase.cs", label="Assert.IsNotNull(validationEventArgs)", span="424-424"];
m1_265 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.FloatLessThanMinimumValue()", file="TestFixtureBase.cs", label="Exit Newtonsoft.Json.Tests.JsonValidatingReaderTests.FloatLessThanMinimumValue()", span="405-405"];
m1_0 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.CheckInnerReader()", file="TestFixtureBase.cs", label="Entry Newtonsoft.Json.Tests.JsonValidatingReaderTests.CheckInnerReader()", span="17-17"];
m1_1 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.CheckInnerReader()", file="TestFixtureBase.cs", label="string json = ''{'name':'James','hobbies':['pie','cake']}''", span="19-19"];
m1_2 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.CheckInnerReader()", file="TestFixtureBase.cs", label="JsonReader reader = new JsonTextReader(new StringReader(json))", span="20-20"];
m1_3 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.CheckInnerReader()", file="TestFixtureBase.cs", label="JsonValidatingReader validatingReader = new JsonValidatingReader(reader)", span="22-22"];
m1_4 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.CheckInnerReader()", file="TestFixtureBase.cs", label="Assert.AreEqual(reader, validatingReader.Reader)", span="23-23"];
m1_5 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.CheckInnerReader()", file="TestFixtureBase.cs", label="Exit Newtonsoft.Json.Tests.JsonValidatingReaderTests.CheckInnerReader()", span="17-17"];
m1_6 [cluster="Newtonsoft.Json.JsonTextReader.JsonTextReader(System.IO.TextReader)", file="TestFixtureBase.cs", label="Entry Newtonsoft.Json.JsonTextReader.JsonTextReader(System.IO.TextReader)", span="69-69"];
m1_121 [cluster="System.Exception.Exception(string)", file="TestFixtureBase.cs", label="Entry System.Exception.Exception(string)", span="0-0"];
m1_617 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendsMissingRequiredProperties()", file="TestFixtureBase.cs", label="Entry Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendsMissingRequiredProperties()", span="993-993"];
m1_618 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendsMissingRequiredProperties()", file="TestFixtureBase.cs", label="string json = ''{}''", span="995-995"];
m1_619 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendsMissingRequiredProperties()", file="TestFixtureBase.cs", label="List<string> errors = new List<string>()", span="997-997"];
m1_620 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendsMissingRequiredProperties()", file="TestFixtureBase.cs", label="JsonValidatingReader reader = new JsonValidatingReader(new JsonTextReader(new StringReader(json)))", span="999-999"];
m1_621 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendsMissingRequiredProperties()", file="TestFixtureBase.cs", label="reader.ValidationEventHandler += (sender, args) => { errors.Add(args.Message); }", span="1000-1000"];
m1_627 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendsMissingRequiredProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(1, errors.Count)", span="1009-1009"];
m1_628 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendsMissingRequiredProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(''Required properties are missing from object: secondproperty, firstproperty. Line 1, position 2.'', errors[0])", span="1010-1010"];
m1_622 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendsMissingRequiredProperties()", file="TestFixtureBase.cs", label="reader.Schema = GetExtendedSchema()", span="1001-1001"];
m1_623 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendsMissingRequiredProperties()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="1003-1003"];
m1_624 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendsMissingRequiredProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="1004-1004"];
m1_625 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendsMissingRequiredProperties()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="1006-1006"];
m1_626 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendsMissingRequiredProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.EndObject, reader.TokenType)", span="1007-1007"];
m1_629 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendsMissingRequiredProperties()", file="TestFixtureBase.cs", label="Exit Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendsMissingRequiredProperties()", span="993-993"];
m1_293 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.FloatExceedsMaxDecimalPlaces()", file="TestFixtureBase.cs", label="Entry Newtonsoft.Json.Tests.JsonValidatingReaderTests.FloatExceedsMaxDecimalPlaces()", span="468-468"];
m1_294 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.FloatExceedsMaxDecimalPlaces()", file="TestFixtureBase.cs", label="string schemaJson = @''{\r\n  ''''type'''':''''array'''',\r\n  ''''items'''':{\r\n    ''''type'''':''''number'''',\r\n    ''''divisibleBy'''':0.1\r\n  }\r\n}''", span="470-476"];
m1_295 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.FloatExceedsMaxDecimalPlaces()", file="TestFixtureBase.cs", label="string json = ''[1.1,2.2,4.001]''", span="478-478"];
m1_299 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.FloatExceedsMaxDecimalPlaces()", file="TestFixtureBase.cs", label="reader.Schema = JsonSchema.Parse(schemaJson)", span="484-484"];
m1_296 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.FloatExceedsMaxDecimalPlaces()", file="TestFixtureBase.cs", label="Json.Schema.ValidationEventArgs validationEventArgs = null", span="480-480"];
m1_297 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.FloatExceedsMaxDecimalPlaces()", file="TestFixtureBase.cs", label="JsonValidatingReader reader = new JsonValidatingReader(new JsonTextReader(new StringReader(json)))", span="482-482"];
m1_298 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.FloatExceedsMaxDecimalPlaces()", file="TestFixtureBase.cs", label="reader.ValidationEventHandler += (sender, args) => { validationEventArgs = args; }", span="483-483"];
m1_300 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.FloatExceedsMaxDecimalPlaces()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="486-486"];
m1_301 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.FloatExceedsMaxDecimalPlaces()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.StartArray, reader.TokenType)", span="487-487"];
m1_302 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.FloatExceedsMaxDecimalPlaces()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="489-489"];
m1_303 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.FloatExceedsMaxDecimalPlaces()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.Float, reader.TokenType)", span="490-490"];
m1_304 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.FloatExceedsMaxDecimalPlaces()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="492-492"];
m1_305 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.FloatExceedsMaxDecimalPlaces()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.Float, reader.TokenType)", span="493-493"];
m1_307 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.FloatExceedsMaxDecimalPlaces()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="496-496"];
m1_308 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.FloatExceedsMaxDecimalPlaces()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.Float, reader.TokenType)", span="497-497"];
m1_310 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.FloatExceedsMaxDecimalPlaces()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="500-500"];
m1_311 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.FloatExceedsMaxDecimalPlaces()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.EndArray, reader.TokenType)", span="501-501"];
m1_306 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.FloatExceedsMaxDecimalPlaces()", file="TestFixtureBase.cs", label="Assert.AreEqual(null, validationEventArgs)", span="494-494"];
m1_309 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.FloatExceedsMaxDecimalPlaces()", file="TestFixtureBase.cs", label="Assert.AreEqual(@''Float 4.001 is not evenly divisible by 0.1. Line 1, position 14.'', validationEventArgs.Message)", span="498-498"];
m1_312 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.FloatExceedsMaxDecimalPlaces()", file="TestFixtureBase.cs", label="Assert.IsNotNull(validationEventArgs)", span="503-503"];
m1_313 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.FloatExceedsMaxDecimalPlaces()", file="TestFixtureBase.cs", label="Exit Newtonsoft.Json.Tests.JsonValidatingReaderTests.FloatExceedsMaxDecimalPlaces()", span="468-468"];
m1_776 [cluster="System.Collections.Generic.ICollection<T>.Add(T)", file="TestFixtureBase.cs", label="Entry System.Collections.Generic.ICollection<T>.Add(T)", span="0-0"];
m1_802 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsDecimal()", file="TestFixtureBase.cs", label="Entry Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsDecimal()", span="1416-1416"];
m1_803 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsDecimal()", file="TestFixtureBase.cs", label="JsonSchema s = new JsonSchemaGenerator().Generate(typeof (decimal))", span="1418-1418"];
m1_804 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsDecimal()", file="TestFixtureBase.cs", label="JsonReader reader = new JsonValidatingReader(new JsonTextReader(new StringReader(@''1.5'')))\r\n        {\r\n          Schema = s\r\n        }", span="1420-1423"];
m1_805 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsDecimal()", file="TestFixtureBase.cs", label="decimal? d = reader.ReadAsDecimal()", span="1424-1424"];
m1_806 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsDecimal()", file="TestFixtureBase.cs", label="Assert.AreEqual(1.5, d)", span="1426-1426"];
m1_807 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsDecimal()", file="TestFixtureBase.cs", label="Exit Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsDecimal()", span="1416-1416"];
m1_481 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.MissingNonRequiredProperties()", file="TestFixtureBase.cs", label="Entry Newtonsoft.Json.Tests.JsonValidatingReaderTests.MissingNonRequiredProperties()", span="775-775"];
m1_482 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.MissingNonRequiredProperties()", file="TestFixtureBase.cs", label="string schemaJson = @''{\r\n  ''''description'''':''''A person'''',\r\n  ''''type'''':''''object'''',\r\n  ''''properties'''':\r\n  {\r\n    ''''name'''':{''''type'''':''''string'''',''''required'''':true},\r\n    ''''hobbies'''':{''''type'''':''''string'''',''''required'''':false},\r\n    ''''age'''':{''''type'''':''''integer''''}\r\n  }\r\n}''", span="777-786"];
m1_483 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.MissingNonRequiredProperties()", file="TestFixtureBase.cs", label="string json = ''{'name':'James'}''", span="788-788"];
m1_487 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.MissingNonRequiredProperties()", file="TestFixtureBase.cs", label="reader.Schema = JsonSchema.Parse(schemaJson)", span="794-794"];
m1_484 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.MissingNonRequiredProperties()", file="TestFixtureBase.cs", label="Json.Schema.ValidationEventArgs validationEventArgs = null", span="790-790"];
m1_485 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.MissingNonRequiredProperties()", file="TestFixtureBase.cs", label="JsonValidatingReader reader = new JsonValidatingReader(new JsonTextReader(new StringReader(json)))", span="792-792"];
m1_486 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.MissingNonRequiredProperties()", file="TestFixtureBase.cs", label="reader.ValidationEventHandler += (sender, args) => { validationEventArgs = args; }", span="793-793"];
m1_488 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.MissingNonRequiredProperties()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="796-796"];
m1_489 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.MissingNonRequiredProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="797-797"];
m1_490 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.MissingNonRequiredProperties()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="799-799"];
m1_491 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.MissingNonRequiredProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="800-800"];
m1_492 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.MissingNonRequiredProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(''name'', reader.Value.ToString())", span="801-801"];
m1_493 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.MissingNonRequiredProperties()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="803-803"];
m1_494 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.MissingNonRequiredProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.String, reader.TokenType)", span="804-804"];
m1_495 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.MissingNonRequiredProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(''James'', reader.Value.ToString())", span="805-805"];
m1_497 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.MissingNonRequiredProperties()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="808-808"];
m1_498 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.MissingNonRequiredProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.EndObject, reader.TokenType)", span="809-809"];
m1_496 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.MissingNonRequiredProperties()", file="TestFixtureBase.cs", label="Assert.IsNull(validationEventArgs)", span="806-806"];
m1_499 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.MissingNonRequiredProperties()", file="TestFixtureBase.cs", label="Assert.IsNull(validationEventArgs)", span="811-811"];
m1_500 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.MissingNonRequiredProperties()", file="TestFixtureBase.cs", label="Exit Newtonsoft.Json.Tests.JsonValidatingReaderTests.MissingNonRequiredProperties()", span="775-775"];
m1_239 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.FloatGreaterThanMaximumValue()", file="TestFixtureBase.cs", label="Entry Newtonsoft.Json.Tests.JsonValidatingReaderTests.FloatGreaterThanMaximumValue()", span="382-382"];
m1_245 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.FloatGreaterThanMaximumValue()", file="TestFixtureBase.cs", label="reader.Schema = JsonSchema.Parse(schemaJson)", span="395-395"];
m1_243 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.FloatGreaterThanMaximumValue()", file="TestFixtureBase.cs", label="JsonValidatingReader reader = new JsonValidatingReader(new JsonTextReader(new StringReader(json)))", span="393-393"];
m1_246 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.FloatGreaterThanMaximumValue()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="397-397"];
m1_247 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.FloatGreaterThanMaximumValue()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.Float, reader.TokenType)", span="398-398"];
m1_248 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.FloatGreaterThanMaximumValue()", file="TestFixtureBase.cs", label="Assert.AreEqual(''Float 10.0 exceeds maximum value of 5. Line 1, position 4.'', validationEventArgs.Message)", span="399-399"];
m1_249 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.FloatGreaterThanMaximumValue()", file="TestFixtureBase.cs", label="Assert.IsNotNull(validationEventArgs)", span="401-401"];
m1_250 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.FloatGreaterThanMaximumValue()", file="TestFixtureBase.cs", label="Exit Newtonsoft.Json.Tests.JsonValidatingReaderTests.FloatGreaterThanMaximumValue()", span="382-382"];
m1_809 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsDecimalFailure()", file="TestFixtureBase.cs", label="Entry Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsDecimalFailure()", span="1431-1431"];
m1_810 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsDecimalFailure()", file="TestFixtureBase.cs", label="JsonSchema s = new JsonSchemaGenerator().Generate(typeof (decimal))", span="1433-1433"];
m1_811 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsDecimalFailure()", file="TestFixtureBase.cs", label="s.DivisibleBy = 1", span="1434-1434"];
m1_812 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsDecimalFailure()", file="TestFixtureBase.cs", label="JsonReader reader = new JsonValidatingReader(new JsonTextReader(new StringReader(@''5.5'')))\r\n        {\r\n          Schema = s\r\n        }", span="1436-1439"];
m1_813 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsDecimalFailure()", file="TestFixtureBase.cs", label="reader.ReadAsDecimal()", span="1440-1440"];
m1_814 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsDecimalFailure()", file="TestFixtureBase.cs", label="Exit Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsDecimalFailure()", span="1431-1431"];
m1_120 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.StringLessThanMinimumLength()", file="TestFixtureBase.cs", label="Exit Newtonsoft.Json.Tests.JsonValidatingReaderTests.StringLessThanMinimumLength()", span="170-170"];
m1_125 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.StringGreaterThanMaximumLength()", file="TestFixtureBase.cs", label="Entry Newtonsoft.Json.Tests.JsonValidatingReaderTests.StringGreaterThanMaximumLength()", span="194-194"];
m1_140 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.StringIsNotInEnum()", file="TestFixtureBase.cs", label="Entry Newtonsoft.Json.Tests.JsonValidatingReaderTests.StringIsNotInEnum()", span="218-218"];
m1_141 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.StringIsNotInEnum()", file="TestFixtureBase.cs", label="string schemaJson = @''{\r\n  ''''type'''':''''array'''',\r\n  ''''items'''':{\r\n    ''''type'''':''''string'''',\r\n    ''''enum'''':[''''one'''',''''two'''']\r\n  },\r\n  ''''maxItems'''':3\r\n}''", span="220-227"];
m1_142 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.StringIsNotInEnum()", file="TestFixtureBase.cs", label="string json = ''['one','two','THREE']''", span="229-229"];
m1_146 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.StringIsNotInEnum()", file="TestFixtureBase.cs", label="reader.Schema = JsonSchema.Parse(schemaJson)", span="235-235"];
m1_143 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.StringIsNotInEnum()", file="TestFixtureBase.cs", label="Json.Schema.ValidationEventArgs validationEventArgs = null", span="231-231"];
m1_144 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.StringIsNotInEnum()", file="TestFixtureBase.cs", label="JsonValidatingReader reader = new JsonValidatingReader(new JsonTextReader(new StringReader(json)))", span="233-233"];
m1_145 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.StringIsNotInEnum()", file="TestFixtureBase.cs", label="reader.ValidationEventHandler += (sender, args) => { validationEventArgs = args; }", span="234-234"];
m1_147 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.StringIsNotInEnum()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="237-237"];
m1_148 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.StringIsNotInEnum()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.StartArray, reader.TokenType)", span="238-238"];
m1_149 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.StringIsNotInEnum()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="240-240"];
m1_150 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.StringIsNotInEnum()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.String, reader.TokenType)", span="241-241"];
m1_151 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.StringIsNotInEnum()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="243-243"];
m1_152 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.StringIsNotInEnum()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.String, reader.TokenType)", span="244-244"];
m1_154 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.StringIsNotInEnum()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="247-247"];
m1_155 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.StringIsNotInEnum()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.String, reader.TokenType)", span="248-248"];
m1_157 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.StringIsNotInEnum()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="251-251"];
m1_158 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.StringIsNotInEnum()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.EndArray, reader.TokenType)", span="252-252"];
m1_153 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.StringIsNotInEnum()", file="TestFixtureBase.cs", label="Assert.AreEqual(null, validationEventArgs)", span="245-245"];
m1_156 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.StringIsNotInEnum()", file="TestFixtureBase.cs", label="Assert.AreEqual(@''Value ''''THREE'''' is not defined in enum. Line 1, position 20.'', validationEventArgs.Message)", span="249-249"];
m1_159 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.StringIsNotInEnum()", file="TestFixtureBase.cs", label="Assert.IsNotNull(validationEventArgs)", span="254-254"];
m1_160 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.StringIsNotInEnum()", file="TestFixtureBase.cs", label="Exit Newtonsoft.Json.Tests.JsonValidatingReaderTests.StringIsNotInEnum()", span="218-218"];
m1_124 [cluster="lambda expression", file="TestFixtureBase.cs", label="Exit lambda expression", span="183-183"];
m1_50 [cluster="Newtonsoft.Json.Schema.JsonSchema.Parse(string)", file="TestFixtureBase.cs", label="Entry Newtonsoft.Json.Schema.JsonSchema.Parse(string)", span="238-238"];
m1_401 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ArrayCountLessThanMinimumItems()", file="TestFixtureBase.cs", label="Entry Newtonsoft.Json.Tests.JsonValidatingReaderTests.ArrayCountLessThanMinimumItems()", span="643-643"];
m1_402 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ArrayCountLessThanMinimumItems()", file="TestFixtureBase.cs", label="string schemaJson = @''{\r\n  ''''type'''':''''array'''',\r\n  ''''minItems'''':2,\r\n  ''''maxItems'''':3\r\n}''", span="645-649"];
m1_403 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ArrayCountLessThanMinimumItems()", file="TestFixtureBase.cs", label="string json = ''[null]''", span="651-651"];
m1_407 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ArrayCountLessThanMinimumItems()", file="TestFixtureBase.cs", label="reader.Schema = JsonSchema.Parse(schemaJson)", span="657-657"];
m1_404 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ArrayCountLessThanMinimumItems()", file="TestFixtureBase.cs", label="Json.Schema.ValidationEventArgs validationEventArgs = null", span="653-653"];
m1_405 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ArrayCountLessThanMinimumItems()", file="TestFixtureBase.cs", label="JsonValidatingReader reader = new JsonValidatingReader(new JsonTextReader(new StringReader(json)))", span="655-655"];
m1_406 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ArrayCountLessThanMinimumItems()", file="TestFixtureBase.cs", label="reader.ValidationEventHandler += (sender, args) => { validationEventArgs = args; }", span="656-656"];
m1_408 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ArrayCountLessThanMinimumItems()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="659-659"];
m1_409 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ArrayCountLessThanMinimumItems()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.StartArray, reader.TokenType)", span="660-660"];
m1_410 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ArrayCountLessThanMinimumItems()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="662-662"];
m1_411 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ArrayCountLessThanMinimumItems()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.Null, reader.TokenType)", span="663-663"];
m1_412 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ArrayCountLessThanMinimumItems()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="665-665"];
m1_413 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ArrayCountLessThanMinimumItems()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.EndArray, reader.TokenType)", span="666-666"];
m1_414 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ArrayCountLessThanMinimumItems()", file="TestFixtureBase.cs", label="Assert.AreEqual(''Array item count 1 is less than minimum count of 2. Line 1, position 6.'', validationEventArgs.Message)", span="667-667"];
m1_415 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ArrayCountLessThanMinimumItems()", file="TestFixtureBase.cs", label="Assert.IsNotNull(validationEventArgs)", span="669-669"];
m1_416 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ArrayCountLessThanMinimumItems()", file="TestFixtureBase.cs", label="Exit Newtonsoft.Json.Tests.JsonValidatingReaderTests.ArrayCountLessThanMinimumItems()", span="643-643"];
m1_758 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.JsonSchemaModelBuilder()", file="TestFixtureBase.cs", label="Entry Newtonsoft.Json.Schema.JsonSchemaModelBuilder.JsonSchemaModelBuilder()", span="32-32"];
m1_194 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ThrowExceptionWhenNoValidationEventHandler()", file="TestFixtureBase.cs", label="Entry Newtonsoft.Json.Tests.JsonValidatingReaderTests.ThrowExceptionWhenNoValidationEventHandler()", span="305-305"];
m1_195 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ThrowExceptionWhenNoValidationEventHandler()", file="TestFixtureBase.cs", label="string schemaJson = @''{\r\n  ''''type'''':''''integer'''',\r\n  ''''maximum'''':5\r\n}''", span="307-310"];
m1_196 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ThrowExceptionWhenNoValidationEventHandler()", file="TestFixtureBase.cs", label="JsonValidatingReader reader = new JsonValidatingReader(new JsonTextReader(new StringReader(''10'')))", span="312-312"];
m1_197 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ThrowExceptionWhenNoValidationEventHandler()", file="TestFixtureBase.cs", label="reader.Schema = JsonSchema.Parse(schemaJson)", span="313-313"];
m1_198 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ThrowExceptionWhenNoValidationEventHandler()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="315-315"];
m1_199 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ThrowExceptionWhenNoValidationEventHandler()", file="TestFixtureBase.cs", label="Exit Newtonsoft.Json.Tests.JsonValidatingReaderTests.ThrowExceptionWhenNoValidationEventHandler()", span="305-305"];
m1_86 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateUnrestrictedArray()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="140-140"];
m1_126 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.StringGreaterThanMaximumLength()", file="TestFixtureBase.cs", label="string schemaJson = @''{\r\n  ''''type'''':''''string'''',\r\n  ''''minLength'''':5,\r\n  ''''maxLength'''':10\r\n}''", span="196-200"];
m1_127 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.StringGreaterThanMaximumLength()", file="TestFixtureBase.cs", label="string json = '''The quick brown fox jumps over the lazy dog.'''", span="202-202"];
m1_131 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.StringGreaterThanMaximumLength()", file="TestFixtureBase.cs", label="reader.Schema = JsonSchema.Parse(schemaJson)", span="208-208"];
m1_128 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.StringGreaterThanMaximumLength()", file="TestFixtureBase.cs", label="Json.Schema.ValidationEventArgs validationEventArgs = null", span="204-204"];
m1_129 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.StringGreaterThanMaximumLength()", file="TestFixtureBase.cs", label="JsonValidatingReader reader = new JsonValidatingReader(new JsonTextReader(new StringReader(json)))", span="206-206"];
m1_130 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.StringGreaterThanMaximumLength()", file="TestFixtureBase.cs", label="reader.ValidationEventHandler += (sender, args) => { validationEventArgs = args; }", span="207-207"];
m1_132 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.StringGreaterThanMaximumLength()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="210-210"];
m1_133 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.StringGreaterThanMaximumLength()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.String, reader.TokenType)", span="211-211"];
m1_134 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.StringGreaterThanMaximumLength()", file="TestFixtureBase.cs", label="Assert.AreEqual(''String 'The quick brown fox jumps over the lazy dog.' exceeds maximum length of 10. Line 1, position 46.'', validationEventArgs.Message)", span="212-212"];
m1_135 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.StringGreaterThanMaximumLength()", file="TestFixtureBase.cs", label="Assert.IsNotNull(validationEventArgs)", span="214-214"];
m1_136 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.StringGreaterThanMaximumLength()", file="TestFixtureBase.cs", label="Exit Newtonsoft.Json.Tests.JsonValidatingReaderTests.StringGreaterThanMaximumLength()", span="194-194"];
m1_787 [cluster="System.Convert.ToBase64String(byte[])", file="TestFixtureBase.cs", label="Entry System.Convert.ToBase64String(byte[])", span="0-0"];
m1_83 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateUnrestrictedArray()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="136-136"];
m1_84 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateUnrestrictedArray()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="137-137"];
m1_85 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateUnrestrictedArray()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="139-139"];
m1_109 [cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", file="TestFixtureBase.cs", label=TException, span="379-379"];
m1_110 [cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", color=green, community=0, file="TestFixtureBase.cs", label="possibleMessages == null || possibleMessages.Length == 0", prediction=0, span="381-381"];
m1_111 [cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", color=green, community=0, file="TestFixtureBase.cs", label="return ex;", prediction=0, span="383-383"];
m1_115 [cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", color=green, community=0, file="TestFixtureBase.cs", label="throw new Exception(''Unexpected exception message.'' + Environment.NewLine + ''Expected one of: '' + string.Join(Environment.NewLine, possibleMessages) + Environment.NewLine + ''Got: '' + ex.Message + Environment.NewLine + Environment.NewLine + ex);", prediction=0, span="393-393"];
m1_112 [cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", color=green, community=0, file="TestFixtureBase.cs", label=possibleMessages, prediction=0, span="385-385"];
m1_113 [cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", color=green, community=0, file="TestFixtureBase.cs", label="StringAssert.Equals(possibleMessage, ex.Message)", prediction=0, span="387-387"];
m1_114 [cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", color=green, community=0, file="TestFixtureBase.cs", label="return ex;", prediction=5, span="389-389"];
m1_116 [cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", file="TestFixtureBase.cs", label=Exception, span="395-395"];
m1_117 [cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", file="TestFixtureBase.cs", label="throw new Exception(string.Format(''Exception of type {0} expected; got exception of type {1}.'', typeof(TException).Name, ex.GetType().Name), ex);", span="397-397"];
m1_118 [cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", file="TestFixtureBase.cs", label="Exit Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", span="369-369"];
m1_105 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateUnrestrictedArray()", file="TestFixtureBase.cs", label="Exit Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateUnrestrictedArray()", span="97-97"];
m1_108 [cluster="lambda expression", color=green, community=0, file="TestFixtureBase.cs", label="Exit lambda expression", prediction=6, span="108-108"];
m1_107 [cluster="lambda expression", file="TestFixtureBase.cs", label="validationEventArgs = args", span="108-108"];
m1_106 [cluster="lambda expression", file="TestFixtureBase.cs", label="Entry lambda expression", span="108-108"];
m1_7 [cluster="System.IO.StringReader.StringReader(string)", file="TestFixtureBase.cs", label="Entry System.IO.StringReader.StringReader(string)", span="0-0"];
m1_868 [cluster="lambda expression", file="TestFixtureBase.cs", label="Entry lambda expression", span="1507-1507"];
m1_56 [cluster="lambda expression", file="TestFixtureBase.cs", label="validationEventArgs = args", span="48-48"];
m1_55 [cluster="lambda expression", file="TestFixtureBase.cs", label="Entry lambda expression", span="48-48"];
m1_57 [cluster="lambda expression", file="TestFixtureBase.cs", label="Exit lambda expression", span="48-48"];
m1_138 [cluster="lambda expression", file="TestFixtureBase.cs", label="validationEventArgs = args", span="207-207"];
m1_137 [cluster="lambda expression", file="TestFixtureBase.cs", label="Entry lambda expression", span="207-207"];
m1_139 [cluster="lambda expression", file="TestFixtureBase.cs", label="Exit lambda expression", span="207-207"];
m1_162 [cluster="lambda expression", file="TestFixtureBase.cs", label="validationEventArgs = args", span="234-234"];
m1_161 [cluster="lambda expression", file="TestFixtureBase.cs", label="Entry lambda expression", span="234-234"];
m1_163 [cluster="lambda expression", file="TestFixtureBase.cs", label="Exit lambda expression", span="234-234"];
m1_177 [cluster="lambda expression", file="TestFixtureBase.cs", label="validationEventArgs = args", span="270-270"];
m1_176 [cluster="lambda expression", file="TestFixtureBase.cs", label="Entry lambda expression", span="270-270"];
m1_178 [cluster="lambda expression", file="TestFixtureBase.cs", label="Exit lambda expression", span="270-270"];
m1_192 [cluster="lambda expression", file="TestFixtureBase.cs", label="validationEventArgs = args", span="293-293"];
m1_191 [cluster="lambda expression", file="TestFixtureBase.cs", label="Entry lambda expression", span="293-293"];
m1_193 [cluster="lambda expression", file="TestFixtureBase.cs", label="Exit lambda expression", span="293-293"];
m1_213 [cluster="lambda expression", file="TestFixtureBase.cs", label="validationEventArgs = args", span="331-331"];
m1_212 [cluster="lambda expression", file="TestFixtureBase.cs", label="Entry lambda expression", span="331-331"];
m1_214 [cluster="lambda expression", file="TestFixtureBase.cs", label="Exit lambda expression", span="331-331"];
m1_237 [cluster="lambda expression", file="TestFixtureBase.cs", label="validationEventArgs = args", span="358-358"];
m1_236 [cluster="lambda expression", file="TestFixtureBase.cs", label="Entry lambda expression", span="358-358"];
m1_238 [cluster="lambda expression", file="TestFixtureBase.cs", label="Exit lambda expression", span="358-358"];
m1_251 [cluster="lambda expression", file="TestFixtureBase.cs", label="Entry lambda expression", span="394-394"];
m1_253 [cluster="lambda expression", file="TestFixtureBase.cs", label="Exit lambda expression", span="394-394"];
m1_267 [cluster="lambda expression", file="TestFixtureBase.cs", label="validationEventArgs = args", span="417-417"];
m1_266 [cluster="lambda expression", file="TestFixtureBase.cs", label="Entry lambda expression", span="417-417"];
m1_268 [cluster="lambda expression", file="TestFixtureBase.cs", label="Exit lambda expression", span="417-417"];
m1_291 [cluster="lambda expression", file="TestFixtureBase.cs", label="validationEventArgs = args", span="444-444"];
m1_290 [cluster="lambda expression", file="TestFixtureBase.cs", label="Entry lambda expression", span="444-444"];
m1_292 [cluster="lambda expression", file="TestFixtureBase.cs", label="Exit lambda expression", span="444-444"];
m1_315 [cluster="lambda expression", file="TestFixtureBase.cs", label="validationEventArgs = args", span="483-483"];
m1_314 [cluster="lambda expression", file="TestFixtureBase.cs", label="Entry lambda expression", span="483-483"];
m1_316 [cluster="lambda expression", file="TestFixtureBase.cs", label="Exit lambda expression", span="483-483"];
m1_333 [cluster="lambda expression", file="TestFixtureBase.cs", label="validationEventArgs = args", span="521-521"];
m1_332 [cluster="lambda expression", file="TestFixtureBase.cs", label="Entry lambda expression", span="521-521"];
m1_334 [cluster="lambda expression", file="TestFixtureBase.cs", label="Exit lambda expression", span="521-521"];
m1_352 [cluster="lambda expression", file="TestFixtureBase.cs", label="validationEventArgs = args", span="553-553"];
m1_351 [cluster="lambda expression", file="TestFixtureBase.cs", label="Entry lambda expression", span="553-553"];
m1_353 [cluster="lambda expression", file="TestFixtureBase.cs", label="Exit lambda expression", span="553-553"];
m1_374 [cluster="lambda expression", file="TestFixtureBase.cs", label="validationEventArgs = args", span="586-586"];
m1_373 [cluster="lambda expression", file="TestFixtureBase.cs", label="Entry lambda expression", span="586-586"];
m1_375 [cluster="lambda expression", file="TestFixtureBase.cs", label="Exit lambda expression", span="586-586"];
m1_399 [cluster="lambda expression", file="TestFixtureBase.cs", label="validationEventArgs = args", span="620-620"];
m1_398 [cluster="lambda expression", file="TestFixtureBase.cs", label="Entry lambda expression", span="620-620"];
m1_400 [cluster="lambda expression", file="TestFixtureBase.cs", label="Exit lambda expression", span="620-620"];
m1_418 [cluster="lambda expression", file="TestFixtureBase.cs", label="validationEventArgs = args", span="656-656"];
m1_417 [cluster="lambda expression", file="TestFixtureBase.cs", label="Entry lambda expression", span="656-656"];
m1_419 [cluster="lambda expression", file="TestFixtureBase.cs", label="Exit lambda expression", span="656-656"];
m1_433 [cluster="lambda expression", file="TestFixtureBase.cs", label="validationEventArgs = args", span="687-687"];
m1_432 [cluster="lambda expression", file="TestFixtureBase.cs", label="Entry lambda expression", span="687-687"];
m1_434 [cluster="lambda expression", file="TestFixtureBase.cs", label="Exit lambda expression", span="687-687"];
m1_455 [cluster="lambda expression", file="TestFixtureBase.cs", label="validationEventArgs = args", span="713-713"];
m1_454 [cluster="lambda expression", file="TestFixtureBase.cs", label="Entry lambda expression", span="713-713"];
m1_456 [cluster="lambda expression", file="TestFixtureBase.cs", label="Exit lambda expression", span="713-713"];
m1_479 [cluster="lambda expression", file="TestFixtureBase.cs", label="validationEventArgs = args", span="752-752"];
m1_478 [cluster="lambda expression", file="TestFixtureBase.cs", label="Entry lambda expression", span="752-752"];
m1_480 [cluster="lambda expression", file="TestFixtureBase.cs", label="Exit lambda expression", span="752-752"];
m1_502 [cluster="lambda expression", file="TestFixtureBase.cs", label="validationEventArgs = args", span="793-793"];
m1_501 [cluster="lambda expression", file="TestFixtureBase.cs", label="Entry lambda expression", span="793-793"];
m1_503 [cluster="lambda expression", file="TestFixtureBase.cs", label="Exit lambda expression", span="793-793"];
m1_539 [cluster="lambda expression", file="TestFixtureBase.cs", label="validationEventArgs = args", span="832-832"];
m1_538 [cluster="lambda expression", file="TestFixtureBase.cs", label="Entry lambda expression", span="832-832"];
m1_540 [cluster="lambda expression", file="TestFixtureBase.cs", label="Exit lambda expression", span="832-832"];
m1_558 [cluster="lambda expression", file="TestFixtureBase.cs", label="errors.Add(validationEventArgs.Message)", span="892-892"];
m1_557 [cluster="lambda expression", file="TestFixtureBase.cs", label="validationEventArgs = args", span="891-891"];
m1_556 [cluster="lambda expression", file="TestFixtureBase.cs", label="Entry lambda expression", span="889-893"];
m1_559 [cluster="lambda expression", file="TestFixtureBase.cs", label="Exit lambda expression", span="889-893"];
m1_615 [cluster="lambda expression", file="TestFixtureBase.cs", label="validationEventArgs = args", span="942-942"];
m1_614 [cluster="lambda expression", file="TestFixtureBase.cs", label="Entry lambda expression", span="942-942"];
m1_616 [cluster="lambda expression", file="TestFixtureBase.cs", label="Exit lambda expression", span="942-942"];
m1_631 [cluster="lambda expression", file="TestFixtureBase.cs", label="errors.Add(args.Message)", span="1000-1000"];
m1_630 [cluster="lambda expression", file="TestFixtureBase.cs", label="Entry lambda expression", span="1000-1000"];
m1_632 [cluster="lambda expression", file="TestFixtureBase.cs", label="Exit lambda expression", span="1000-1000"];
m1_656 [cluster="lambda expression", file="TestFixtureBase.cs", label="validationEventArgs = args", span="1027-1027"];
m1_655 [cluster="lambda expression", file="TestFixtureBase.cs", label="Entry lambda expression", span="1027-1027"];
m1_657 [cluster="lambda expression", file="TestFixtureBase.cs", label="Exit lambda expression", span="1027-1027"];
m1_693 [cluster="lambda expression", file="TestFixtureBase.cs", label="validationEventArgs = args", span="1073-1073"];
m1_692 [cluster="lambda expression", file="TestFixtureBase.cs", label="Entry lambda expression", span="1073-1073"];
m1_694 [cluster="lambda expression", file="TestFixtureBase.cs", label="Exit lambda expression", span="1073-1073"];
m1_761 [cluster="lambda expression", file="TestFixtureBase.cs", label="errors.Add(validationEventArgs.Message)", span="1184-1184"];
m1_760 [cluster="lambda expression", file="TestFixtureBase.cs", label="validationEventArgs = args", span="1183-1183"];
m1_759 [cluster="lambda expression", file="TestFixtureBase.cs", label="Entry lambda expression", span="1181-1185"];
m1_762 [cluster="lambda expression", file="TestFixtureBase.cs", label="Exit lambda expression", span="1181-1185"];
m1_774 [cluster="lambda expression", file="TestFixtureBase.cs", label="validationEventArgs.Add(args)", span="1360-1360"];
m1_773 [cluster="lambda expression", file="TestFixtureBase.cs", label="Entry lambda expression", span="1358-1361"];
m1_775 [cluster="lambda expression", file="TestFixtureBase.cs", label="Exit lambda expression", span="1358-1361"];
m1_847 [cluster="lambda expression", file="TestFixtureBase.cs", label="validationEventArgs = args", span="1472-1472"];
m1_846 [cluster="lambda expression", file="TestFixtureBase.cs", label="Entry lambda expression", span="1472-1472"];
m1_848 [cluster="lambda expression", file="TestFixtureBase.cs", label="Exit lambda expression", span="1472-1472"];
m1_869 [cluster="lambda expression", file="TestFixtureBase.cs", label="validationEventArgs = args", span="1507-1507"];
m1_870 [cluster="lambda expression", file="TestFixtureBase.cs", label="Exit lambda expression", span="1507-1507"];
m1_808 [cluster="Newtonsoft.Json.JsonReader.ReadAsDecimal()", file="TestFixtureBase.cs", label="Entry Newtonsoft.Json.JsonReader.ReadAsDecimal()", span="341-341"];
m1_457 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.MissingRequiredProperties()", file="TestFixtureBase.cs", label="Entry Newtonsoft.Json.Tests.JsonValidatingReaderTests.MissingRequiredProperties()", span="734-734"];
m1_458 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.MissingRequiredProperties()", file="TestFixtureBase.cs", label="string schemaJson = @''{\r\n  ''''description'''':''''A person'''',\r\n  ''''type'''':''''object'''',\r\n  ''''properties'''':\r\n  {\r\n    ''''name'''':{''''type'''':''''string''''},\r\n    ''''hobbies'''':{''''type'''':''''string'''',''''required'''':true},\r\n    ''''age'''':{''''type'''':''''integer'''',''''required'''':true}\r\n  }\r\n}''", span="736-745"];
m1_459 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.MissingRequiredProperties()", file="TestFixtureBase.cs", label="string json = ''{'name':'James'}''", span="747-747"];
m1_463 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.MissingRequiredProperties()", file="TestFixtureBase.cs", label="reader.Schema = JsonSchema.Parse(schemaJson)", span="753-753"];
m1_460 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.MissingRequiredProperties()", file="TestFixtureBase.cs", label="Json.Schema.ValidationEventArgs validationEventArgs = null", span="749-749"];
m1_461 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.MissingRequiredProperties()", file="TestFixtureBase.cs", label="JsonValidatingReader reader = new JsonValidatingReader(new JsonTextReader(new StringReader(json)))", span="751-751"];
m1_462 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.MissingRequiredProperties()", file="TestFixtureBase.cs", label="reader.ValidationEventHandler += (sender, args) => { validationEventArgs = args; }", span="752-752"];
m1_464 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.MissingRequiredProperties()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="755-755"];
m1_465 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.MissingRequiredProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="756-756"];
m1_466 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.MissingRequiredProperties()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="758-758"];
m1_467 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.MissingRequiredProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="759-759"];
m1_468 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.MissingRequiredProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(''name'', reader.Value.ToString())", span="760-760"];
m1_469 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.MissingRequiredProperties()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="762-762"];
m1_470 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.MissingRequiredProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.String, reader.TokenType)", span="763-763"];
m1_471 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.MissingRequiredProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(''James'', reader.Value.ToString())", span="764-764"];
m1_473 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.MissingRequiredProperties()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="767-767"];
m1_474 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.MissingRequiredProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.EndObject, reader.TokenType)", span="768-768"];
m1_472 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.MissingRequiredProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(null, validationEventArgs)", span="765-765"];
m1_475 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.MissingRequiredProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(''Required properties are missing from object: hobbies, age. Line 1, position 16.'', validationEventArgs.Message)", span="769-769"];
m1_476 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.MissingRequiredProperties()", file="TestFixtureBase.cs", label="Assert.IsNotNull(validationEventArgs)", span="771-771"];
m1_477 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.MissingRequiredProperties()", file="TestFixtureBase.cs", label="Exit Newtonsoft.Json.Tests.JsonValidatingReaderTests.MissingRequiredProperties()", span="734-734"];
m1_613 [cluster="Unk.IsFalse", file="TestFixtureBase.cs", label="Entry Unk.IsFalse", span=""];
m1_92 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateUnrestrictedArray()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="148-148"];
m1_100 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateUnrestrictedArray()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="160-160"];
m1_101 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateUnrestrictedArray()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.EndObject, reader.TokenType)", span="161-161"];
m1_102 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateUnrestrictedArray()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="163-163"];
m1_103 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateUnrestrictedArray()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.EndArray, reader.TokenType)", span="164-164"];
m1_789 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsInt32()", file="TestFixtureBase.cs", label="Entry Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsInt32()", span="1388-1388"];
m1_790 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsInt32()", file="TestFixtureBase.cs", label="JsonSchema s = new JsonSchemaGenerator().Generate(typeof (int))", span="1390-1390"];
m1_791 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsInt32()", file="TestFixtureBase.cs", label="JsonReader reader = new JsonValidatingReader(new JsonTextReader(new StringReader(@''1'')))\r\n        {\r\n          Schema = s\r\n        }", span="1392-1395"];
m1_792 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsInt32()", file="TestFixtureBase.cs", label="int? i = reader.ReadAsInt32()", span="1396-1396"];
m1_793 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsInt32()", file="TestFixtureBase.cs", label="Assert.AreEqual(1, i)", span="1398-1398"];
m1_794 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsInt32()", file="TestFixtureBase.cs", label="Exit Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsInt32()", span="1388-1388"];
m1_825 [cluster="Newtonsoft.Json.JsonSerializer.Deserialize<T>(Newtonsoft.Json.JsonReader)", file="TestFixtureBase.cs", label="Entry Newtonsoft.Json.JsonSerializer.Deserialize<T>(Newtonsoft.Json.JsonReader)", span="398-398"];
m1_826 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsInt32InArray()", file="TestFixtureBase.cs", label="Entry Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsInt32InArray()", span="1457-1457"];
m1_827 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsInt32InArray()", file="TestFixtureBase.cs", label="string schemaJson = @''{\r\n  ''''type'''':''''array'''',\r\n  ''''items'''':{\r\n    ''''type'''':''''integer''''\r\n  },\r\n  ''''maxItems'''':1\r\n}''", span="1459-1465"];
m1_828 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsInt32InArray()", file="TestFixtureBase.cs", label="string json = ''[1,2]''", span="1467-1467"];
m1_832 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsInt32InArray()", file="TestFixtureBase.cs", label="reader.Schema = JsonSchema.Parse(schemaJson)", span="1473-1473"];
m1_829 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsInt32InArray()", file="TestFixtureBase.cs", label="Json.Schema.ValidationEventArgs validationEventArgs = null", span="1469-1469"];
m1_830 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsInt32InArray()", file="TestFixtureBase.cs", label="JsonValidatingReader reader = new JsonValidatingReader(new JsonTextReader(new StringReader(json)))", span="1471-1471"];
m1_831 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsInt32InArray()", file="TestFixtureBase.cs", label="reader.ValidationEventHandler += (sender, args) => { validationEventArgs = args; }", span="1472-1472"];
m1_833 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsInt32InArray()", file="TestFixtureBase.cs", label="reader.Read()", span="1475-1475"];
m1_834 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsInt32InArray()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.StartArray, reader.TokenType)", span="1476-1476"];
m1_835 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsInt32InArray()", file="TestFixtureBase.cs", label="reader.ReadAsInt32()", span="1478-1478"];
m1_836 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsInt32InArray()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.Integer, reader.TokenType)", span="1479-1479"];
m1_838 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsInt32InArray()", file="TestFixtureBase.cs", label="reader.ReadAsInt32()", span="1482-1482"];
m1_839 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsInt32InArray()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.Integer, reader.TokenType)", span="1483-1483"];
m1_841 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsInt32InArray()", file="TestFixtureBase.cs", label="reader.ReadAsInt32()", span="1486-1486"];
m1_842 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsInt32InArray()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.EndArray, reader.TokenType)", span="1487-1487"];
m1_837 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsInt32InArray()", file="TestFixtureBase.cs", label="Assert.AreEqual(null, validationEventArgs)", span="1480-1480"];
m1_840 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsInt32InArray()", file="TestFixtureBase.cs", label="Assert.AreEqual(null, validationEventArgs)", span="1484-1484"];
m1_843 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsInt32InArray()", file="TestFixtureBase.cs", label="Assert.AreEqual(''Array item count 2 exceeds maximum count of 1. Line 1, position 5.'', validationEventArgs.Message)", span="1488-1488"];
m1_844 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsInt32InArray()", file="TestFixtureBase.cs", label="Exit Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsInt32InArray()", span="1457-1457"];
m1_52 [cluster="Unk.IsTrue", file="TestFixtureBase.cs", label="Entry Unk.IsTrue", span=""];
m1_179 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.IntegerGreaterThanMaximumValue()", file="TestFixtureBase.cs", label="Entry Newtonsoft.Json.Tests.JsonValidatingReaderTests.IntegerGreaterThanMaximumValue()", span="281-281"];
m1_180 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.IntegerGreaterThanMaximumValue()", file="TestFixtureBase.cs", label="string schemaJson = @''{\r\n  ''''type'''':''''integer'''',\r\n  ''''maximum'''':5\r\n}''", span="283-286"];
m1_181 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.IntegerGreaterThanMaximumValue()", file="TestFixtureBase.cs", label="string json = ''10''", span="288-288"];
m1_185 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.IntegerGreaterThanMaximumValue()", file="TestFixtureBase.cs", label="reader.Schema = JsonSchema.Parse(schemaJson)", span="294-294"];
m1_182 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.IntegerGreaterThanMaximumValue()", file="TestFixtureBase.cs", label="Json.Schema.ValidationEventArgs validationEventArgs = null", span="290-290"];
m1_183 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.IntegerGreaterThanMaximumValue()", file="TestFixtureBase.cs", label="JsonValidatingReader reader = new JsonValidatingReader(new JsonTextReader(new StringReader(json)))", span="292-292"];
m1_184 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.IntegerGreaterThanMaximumValue()", file="TestFixtureBase.cs", label="reader.ValidationEventHandler += (sender, args) => { validationEventArgs = args; }", span="293-293"];
m1_186 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.IntegerGreaterThanMaximumValue()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="296-296"];
m1_187 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.IntegerGreaterThanMaximumValue()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.Integer, reader.TokenType)", span="297-297"];
m1_188 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.IntegerGreaterThanMaximumValue()", file="TestFixtureBase.cs", label="Assert.AreEqual(''Integer 10 exceeds maximum value of 5. Line 1, position 2.'', validationEventArgs.Message)", span="298-298"];
m1_189 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.IntegerGreaterThanMaximumValue()", file="TestFixtureBase.cs", label="Assert.IsNotNull(validationEventArgs)", span="300-300"];
m1_190 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.IntegerGreaterThanMaximumValue()", file="TestFixtureBase.cs", label="Exit Newtonsoft.Json.Tests.JsonValidatingReaderTests.IntegerGreaterThanMaximumValue()", span="281-281"];
m1_786 [cluster="System.Text.Encoding.GetBytes(string)", file="TestFixtureBase.cs", label="Entry System.Text.Encoding.GetBytes(string)", span="0-0"];
m1_571 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendsDisallowAdditionProperties()", file="TestFixtureBase.cs", label="Entry Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendsDisallowAdditionProperties()", span="935-935"];
m1_572 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendsDisallowAdditionProperties()", file="TestFixtureBase.cs", label="string json = ''{'firstproperty':'blah','secondproperty':'blah2','additional':'blah3','additional2':'blah4'}''", span="937-937"];
m1_573 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendsDisallowAdditionProperties()", file="TestFixtureBase.cs", label="Json.Schema.ValidationEventArgs validationEventArgs = null", span="939-939"];
m1_574 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendsDisallowAdditionProperties()", file="TestFixtureBase.cs", label="JsonValidatingReader reader = new JsonValidatingReader(new JsonTextReader(new StringReader(json)))", span="941-941"];
m1_575 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendsDisallowAdditionProperties()", file="TestFixtureBase.cs", label="reader.ValidationEventHandler += (sender, args) => { validationEventArgs = args; }", span="942-942"];
m1_576 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendsDisallowAdditionProperties()", file="TestFixtureBase.cs", label="reader.Schema = GetExtendedSchema()", span="943-943"];
m1_577 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendsDisallowAdditionProperties()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="945-945"];
m1_578 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendsDisallowAdditionProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="946-946"];
m1_579 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendsDisallowAdditionProperties()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="948-948"];
m1_580 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendsDisallowAdditionProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="949-949"];
m1_581 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendsDisallowAdditionProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(''firstproperty'', reader.Value.ToString())", span="950-950"];
m1_583 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendsDisallowAdditionProperties()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="953-953"];
m1_584 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendsDisallowAdditionProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.String, reader.TokenType)", span="954-954"];
m1_585 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendsDisallowAdditionProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(''blah'', reader.Value.ToString())", span="955-955"];
m1_587 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendsDisallowAdditionProperties()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="958-958"];
m1_588 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendsDisallowAdditionProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="959-959"];
m1_589 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendsDisallowAdditionProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(''secondproperty'', reader.Value.ToString())", span="960-960"];
m1_591 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendsDisallowAdditionProperties()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="963-963"];
m1_592 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendsDisallowAdditionProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.String, reader.TokenType)", span="964-964"];
m1_593 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendsDisallowAdditionProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(''blah2'', reader.Value.ToString())", span="965-965"];
m1_595 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendsDisallowAdditionProperties()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="968-968"];
m1_596 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendsDisallowAdditionProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="969-969"];
m1_597 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendsDisallowAdditionProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(''additional'', reader.Value.ToString())", span="970-970"];
m1_599 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendsDisallowAdditionProperties()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="973-973"];
m1_600 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendsDisallowAdditionProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.String, reader.TokenType)", span="974-974"];
m1_601 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendsDisallowAdditionProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(''blah3'', reader.Value.ToString())", span="975-975"];
m1_602 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendsDisallowAdditionProperties()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="977-977"];
m1_603 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendsDisallowAdditionProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="978-978"];
m1_604 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendsDisallowAdditionProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(''additional2'', reader.Value.ToString())", span="979-979"];
m1_606 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendsDisallowAdditionProperties()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="982-982"];
m1_607 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendsDisallowAdditionProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.String, reader.TokenType)", span="983-983"];
m1_608 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendsDisallowAdditionProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(''blah4'', reader.Value.ToString())", span="984-984"];
m1_609 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendsDisallowAdditionProperties()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="986-986"];
m1_610 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendsDisallowAdditionProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.EndObject, reader.TokenType)", span="987-987"];
m1_611 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendsDisallowAdditionProperties()", file="TestFixtureBase.cs", label="Assert.IsFalse(reader.Read())", span="989-989"];
m1_582 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendsDisallowAdditionProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(null, validationEventArgs)", span="951-951"];
m1_586 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendsDisallowAdditionProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(null, validationEventArgs)", span="956-956"];
m1_590 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendsDisallowAdditionProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(null, validationEventArgs)", span="961-961"];
m1_594 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendsDisallowAdditionProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(null, validationEventArgs)", span="966-966"];
m1_598 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendsDisallowAdditionProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(''Property 'additional' has not been defined and the schema does not allow additional properties. Line 1, position 62.'', validationEventArgs.Message)", span="971-971"];
m1_605 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendsDisallowAdditionProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(''Property 'additional2' has not been defined and the schema does not allow additional properties. Line 1, position 84.'', validationEventArgs.Message)", span="980-980"];
m1_612 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendsDisallowAdditionProperties()", file="TestFixtureBase.cs", label="Exit Newtonsoft.Json.Tests.JsonValidatingReaderTests.ExtendsDisallowAdditionProperties()", span="935-935"];
m1_504 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.DisableAdditionalProperties()", file="TestFixtureBase.cs", label="Entry Newtonsoft.Json.Tests.JsonValidatingReaderTests.DisableAdditionalProperties()", span="815-815"];
m1_505 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.DisableAdditionalProperties()", file="TestFixtureBase.cs", label="string schemaJson = @''{\r\n  ''''description'''':''''A person'''',\r\n  ''''type'''':''''object'''',\r\n  ''''properties'''':\r\n  {\r\n    ''''name'''':{''''type'''':''''string''''}\r\n  },\r\n  ''''additionalProperties'''':false\r\n}''", span="817-825"];
m1_506 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.DisableAdditionalProperties()", file="TestFixtureBase.cs", label="string json = ''{'name':'James','additionalProperty1':null,'additionalProperty2':null}''", span="827-827"];
m1_510 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.DisableAdditionalProperties()", file="TestFixtureBase.cs", label="reader.Schema = JsonSchema.Parse(schemaJson)", span="833-833"];
m1_507 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.DisableAdditionalProperties()", file="TestFixtureBase.cs", label="Json.Schema.ValidationEventArgs validationEventArgs = null", span="829-829"];
m1_508 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.DisableAdditionalProperties()", file="TestFixtureBase.cs", label="JsonValidatingReader reader = new JsonValidatingReader(new JsonTextReader(new StringReader(json)))", span="831-831"];
m1_509 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.DisableAdditionalProperties()", file="TestFixtureBase.cs", label="reader.ValidationEventHandler += (sender, args) => { validationEventArgs = args; }", span="832-832"];
m1_511 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.DisableAdditionalProperties()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="835-835"];
m1_512 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.DisableAdditionalProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="836-836"];
m1_513 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.DisableAdditionalProperties()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="838-838"];
m1_514 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.DisableAdditionalProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="839-839"];
m1_515 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.DisableAdditionalProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(''name'', reader.Value.ToString())", span="840-840"];
m1_516 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.DisableAdditionalProperties()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="842-842"];
m1_517 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.DisableAdditionalProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.String, reader.TokenType)", span="843-843"];
m1_518 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.DisableAdditionalProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(''James'', reader.Value.ToString())", span="844-844"];
m1_520 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.DisableAdditionalProperties()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="847-847"];
m1_521 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.DisableAdditionalProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="848-848"];
m1_522 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.DisableAdditionalProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(''additionalProperty1'', reader.Value.ToString())", span="849-849"];
m1_523 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.DisableAdditionalProperties()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="851-851"];
m1_524 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.DisableAdditionalProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.Null, reader.TokenType)", span="852-852"];
m1_525 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.DisableAdditionalProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(null, reader.Value)", span="853-853"];
m1_527 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.DisableAdditionalProperties()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="856-856"];
m1_528 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.DisableAdditionalProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="857-857"];
m1_529 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.DisableAdditionalProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(''additionalProperty2'', reader.Value.ToString())", span="858-858"];
m1_530 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.DisableAdditionalProperties()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="860-860"];
m1_531 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.DisableAdditionalProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.Null, reader.TokenType)", span="861-861"];
m1_532 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.DisableAdditionalProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(null, reader.Value)", span="862-862"];
m1_534 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.DisableAdditionalProperties()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="865-865"];
m1_535 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.DisableAdditionalProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.EndObject, reader.TokenType)", span="866-866"];
m1_519 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.DisableAdditionalProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(null, validationEventArgs)", span="845-845"];
m1_526 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.DisableAdditionalProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(''Property 'additionalProperty1' has not been defined and the schema does not allow additional properties. Line 1, position 38.'', validationEventArgs.Message)", span="854-854"];
m1_533 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.DisableAdditionalProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(''Property 'additionalProperty2' has not been defined and the schema does not allow additional properties. Line 1, position 65.'', validationEventArgs.Message)", span="863-863"];
m1_536 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.DisableAdditionalProperties()", file="TestFixtureBase.cs", label="Assert.IsNotNull(validationEventArgs)", span="868-868"];
m1_537 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.DisableAdditionalProperties()", file="TestFixtureBase.cs", label="Exit Newtonsoft.Json.Tests.JsonValidatingReaderTests.DisableAdditionalProperties()", span="815-815"];
m1_87 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateUnrestrictedArray()", file="TestFixtureBase.cs", label="Assert.AreEqual(''nestedproperty1'', reader.Value.ToString())", span="141-141"];
m1_88 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateUnrestrictedArray()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="143-143"];
m1_89 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateUnrestrictedArray()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.Float, reader.TokenType)", span="144-144"];
m1_90 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateUnrestrictedArray()", file="TestFixtureBase.cs", label="Assert.AreEqual(1.1, reader.Value)", span="145-145"];
m1_91 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateUnrestrictedArray()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="147-147"];
m1_93 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateUnrestrictedArray()", file="TestFixtureBase.cs", label="Assert.AreEqual(''nestedproperty2'', reader.Value.ToString())", span="149-149"];
m1_9 [cluster="Unk.AreEqual", file="TestFixtureBase.cs", label="Entry Unk.AreEqual", span=""];
m1_555 [cluster="System.Collections.Generic.List<T>.List()", file="TestFixtureBase.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m1_58 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateUnrestrictedArray()", file="TestFixtureBase.cs", label="Entry Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateUnrestrictedArray()", span="97-97"];
m1_59 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateUnrestrictedArray()", file="TestFixtureBase.cs", label="string schemaJson = @''{\r\n  ''''type'''':''''array''''\r\n}''", span="99-101"];
m1_60 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateUnrestrictedArray()", file="TestFixtureBase.cs", label="string json = ''['pie','cake',['nested1','nested2'],{'nestedproperty1':1.1,'nestedproperty2':[null]}]''", span="103-103"];
m1_64 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateUnrestrictedArray()", file="TestFixtureBase.cs", label="reader.Schema = JsonSchema.Parse(schemaJson)", span="109-109"];
m1_61 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateUnrestrictedArray()", file="TestFixtureBase.cs", label="Json.Schema.ValidationEventArgs validationEventArgs = null", span="105-105"];
m1_62 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateUnrestrictedArray()", file="TestFixtureBase.cs", label="JsonValidatingReader reader = new JsonValidatingReader(new JsonTextReader(new StringReader(json)))", span="107-107"];
m1_63 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateUnrestrictedArray()", file="TestFixtureBase.cs", label="reader.ValidationEventHandler += (sender, args) => { validationEventArgs = args; }", span="108-108"];
m1_65 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateUnrestrictedArray()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="111-111"];
m1_66 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateUnrestrictedArray()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.StartArray, reader.TokenType)", span="112-112"];
m1_67 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateUnrestrictedArray()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="114-114"];
m1_68 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateUnrestrictedArray()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.String, reader.TokenType)", span="115-115"];
m1_69 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateUnrestrictedArray()", file="TestFixtureBase.cs", label="Assert.AreEqual(''pie'', reader.Value.ToString())", span="116-116"];
m1_70 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateUnrestrictedArray()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="118-118"];
m1_71 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateUnrestrictedArray()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.String, reader.TokenType)", span="119-119"];
m1_72 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateUnrestrictedArray()", file="TestFixtureBase.cs", label="Assert.AreEqual(''cake'', reader.Value.ToString())", span="120-120"];
m1_73 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateUnrestrictedArray()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="122-122"];
m1_74 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateUnrestrictedArray()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.StartArray, reader.TokenType)", span="123-123"];
m1_75 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateUnrestrictedArray()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="125-125"];
m1_76 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateUnrestrictedArray()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.String, reader.TokenType)", span="126-126"];
m1_77 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateUnrestrictedArray()", file="TestFixtureBase.cs", label="Assert.AreEqual(''nested1'', reader.Value.ToString())", span="127-127"];
m1_78 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateUnrestrictedArray()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="129-129"];
m1_79 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateUnrestrictedArray()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.String, reader.TokenType)", span="130-130"];
m1_849 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsInt32InArrayIncomplete()", file="TestFixtureBase.cs", label="Entry Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsInt32InArrayIncomplete()", span="1492-1492"];
m1_850 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsInt32InArrayIncomplete()", file="TestFixtureBase.cs", label="string schemaJson = @''{\r\n  ''''type'''':''''array'''',\r\n  ''''items'''':{\r\n    ''''type'''':''''integer''''\r\n  },\r\n  ''''maxItems'''':1\r\n}''", span="1494-1500"];
m1_851 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsInt32InArrayIncomplete()", file="TestFixtureBase.cs", label="string json = ''[1,2''", span="1502-1502"];
m1_855 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsInt32InArrayIncomplete()", file="TestFixtureBase.cs", label="reader.Schema = JsonSchema.Parse(schemaJson)", span="1508-1508"];
m1_852 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsInt32InArrayIncomplete()", file="TestFixtureBase.cs", label="Json.Schema.ValidationEventArgs validationEventArgs = null", span="1504-1504"];
m1_853 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsInt32InArrayIncomplete()", file="TestFixtureBase.cs", label="JsonValidatingReader reader = new JsonValidatingReader(new JsonTextReader(new StringReader(json)))", span="1506-1506"];
m1_854 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsInt32InArrayIncomplete()", file="TestFixtureBase.cs", label="reader.ValidationEventHandler += (sender, args) => { validationEventArgs = args; }", span="1507-1507"];
m1_856 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsInt32InArrayIncomplete()", file="TestFixtureBase.cs", label="reader.Read()", span="1510-1510"];
m1_857 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsInt32InArrayIncomplete()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.StartArray, reader.TokenType)", span="1511-1511"];
m1_858 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsInt32InArrayIncomplete()", file="TestFixtureBase.cs", label="reader.ReadAsInt32()", span="1513-1513"];
m1_859 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsInt32InArrayIncomplete()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.Integer, reader.TokenType)", span="1514-1514"];
m1_861 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsInt32InArrayIncomplete()", file="TestFixtureBase.cs", label="reader.ReadAsInt32()", span="1517-1517"];
m1_862 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsInt32InArrayIncomplete()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.Integer, reader.TokenType)", span="1518-1518"];
m1_864 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsInt32InArrayIncomplete()", file="TestFixtureBase.cs", label="reader.ReadAsInt32()", span="1521-1521"];
m1_865 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsInt32InArrayIncomplete()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.None, reader.TokenType)", span="1522-1522"];
m1_860 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsInt32InArrayIncomplete()", file="TestFixtureBase.cs", label="Assert.AreEqual(null, validationEventArgs)", span="1515-1515"];
m1_863 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsInt32InArrayIncomplete()", file="TestFixtureBase.cs", label="Assert.AreEqual(null, validationEventArgs)", span="1519-1519"];
m1_866 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsInt32InArrayIncomplete()", file="TestFixtureBase.cs", label="Assert.AreEqual(null, validationEventArgs)", span="1523-1523"];
m1_867 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsInt32InArrayIncomplete()", file="TestFixtureBase.cs", label="Exit Newtonsoft.Json.Tests.JsonValidatingReaderTests.ReadAsInt32InArrayIncomplete()", span="1492-1492"];
m1_658 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.PatternPropertiesNoAdditionalProperties()", file="TestFixtureBase.cs", label="Entry Newtonsoft.Json.Tests.JsonValidatingReaderTests.PatternPropertiesNoAdditionalProperties()", span="1052-1052"];
m1_659 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.PatternPropertiesNoAdditionalProperties()", file="TestFixtureBase.cs", label="string schemaJson = @''{\r\n  ''''type'''':''''object'''',\r\n  ''''patternProperties'''': {\r\n     ''''hi'''': {''''type'''':''''string''''},\r\n     ''''ho'''': {''''type'''':''''string''''}\r\n  },\r\n  ''''additionalProperties'''': false\r\n}''", span="1054-1061"];
m1_660 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.PatternPropertiesNoAdditionalProperties()", file="TestFixtureBase.cs", label="string json = @''{\r\n  ''''hi'''': ''''A string!'''',\r\n  ''''hide'''': ''''A string!'''',\r\n  ''''ho'''': 1,\r\n  ''''hey'''': ''''A string!''''\r\n}''", span="1063-1068"];
m1_664 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.PatternPropertiesNoAdditionalProperties()", file="TestFixtureBase.cs", label="reader.Schema = JsonSchema.Parse(schemaJson)", span="1074-1074"];
m1_661 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.PatternPropertiesNoAdditionalProperties()", file="TestFixtureBase.cs", label="Json.Schema.ValidationEventArgs validationEventArgs = null", span="1070-1070"];
m1_662 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.PatternPropertiesNoAdditionalProperties()", file="TestFixtureBase.cs", label="JsonValidatingReader reader = new JsonValidatingReader(new JsonTextReader(new StringReader(json)))", span="1072-1072"];
m1_663 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.PatternPropertiesNoAdditionalProperties()", file="TestFixtureBase.cs", label="reader.ValidationEventHandler += (sender, args) => { validationEventArgs = args; }", span="1073-1073"];
m1_665 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.PatternPropertiesNoAdditionalProperties()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="1076-1076"];
m1_666 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.PatternPropertiesNoAdditionalProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="1077-1077"];
m1_667 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.PatternPropertiesNoAdditionalProperties()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="1079-1079"];
m1_668 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.PatternPropertiesNoAdditionalProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="1080-1080"];
m1_670 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.PatternPropertiesNoAdditionalProperties()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="1083-1083"];
m1_671 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.PatternPropertiesNoAdditionalProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.String, reader.TokenType)", span="1084-1084"];
m1_672 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.PatternPropertiesNoAdditionalProperties()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="1086-1086"];
m1_673 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.PatternPropertiesNoAdditionalProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="1087-1087"];
m1_675 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.PatternPropertiesNoAdditionalProperties()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="1090-1090"];
m1_676 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.PatternPropertiesNoAdditionalProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.String, reader.TokenType)", span="1091-1091"];
m1_677 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.PatternPropertiesNoAdditionalProperties()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="1093-1093"];
m1_678 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.PatternPropertiesNoAdditionalProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="1094-1094"];
m1_680 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.PatternPropertiesNoAdditionalProperties()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="1097-1097"];
m1_681 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.PatternPropertiesNoAdditionalProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.Integer, reader.TokenType)", span="1098-1098"];
m1_683 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.PatternPropertiesNoAdditionalProperties()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="1101-1101"];
m1_684 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.PatternPropertiesNoAdditionalProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="1102-1102"];
m1_686 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.PatternPropertiesNoAdditionalProperties()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="1105-1105"];
m1_687 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.PatternPropertiesNoAdditionalProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.String, reader.TokenType)", span="1106-1106"];
m1_688 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.PatternPropertiesNoAdditionalProperties()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="1108-1108"];
m1_689 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.PatternPropertiesNoAdditionalProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.EndObject, reader.TokenType)", span="1109-1109"];
m1_690 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.PatternPropertiesNoAdditionalProperties()", file="TestFixtureBase.cs", label="Assert.IsFalse(reader.Read())", span="1111-1111"];
m1_669 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.PatternPropertiesNoAdditionalProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(null, validationEventArgs)", span="1081-1081"];
m1_674 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.PatternPropertiesNoAdditionalProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(null, validationEventArgs)", span="1088-1088"];
m1_679 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.PatternPropertiesNoAdditionalProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(null, validationEventArgs)", span="1095-1095"];
m1_682 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.PatternPropertiesNoAdditionalProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(''Invalid type. Expected String but got Integer. Line 4, position 10.'', validationEventArgs.Message)", span="1099-1099"];
m1_685 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.PatternPropertiesNoAdditionalProperties()", file="TestFixtureBase.cs", label="Assert.AreEqual(''Property 'hey' has not been defined and the schema does not allow additional properties. Line 5, position 9.'', validationEventArgs.Message)", span="1103-1103"];
m1_691 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.PatternPropertiesNoAdditionalProperties()", file="TestFixtureBase.cs", label="Exit Newtonsoft.Json.Tests.JsonValidatingReaderTests.PatternPropertiesNoAdditionalProperties()", span="1052-1052"];
m1_335 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.NullNotInEnum()", file="TestFixtureBase.cs", label="Entry Newtonsoft.Json.Tests.JsonValidatingReaderTests.NullNotInEnum()", span="537-537"];
m1_336 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.NullNotInEnum()", file="TestFixtureBase.cs", label="string schemaJson = @''{\r\n  ''''type'''':''''array'''',\r\n  ''''items'''':{\r\n    ''''type'''':''''null'''',\r\n    ''''enum'''':[]\r\n  },\r\n  ''''maxItems'''':3\r\n}''", span="539-546"];
m1_337 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.NullNotInEnum()", file="TestFixtureBase.cs", label="string json = ''[null]''", span="548-548"];
m1_341 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.NullNotInEnum()", file="TestFixtureBase.cs", label="reader.Schema = JsonSchema.Parse(schemaJson)", span="554-554"];
m1_338 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.NullNotInEnum()", file="TestFixtureBase.cs", label="Json.Schema.ValidationEventArgs validationEventArgs = null", span="550-550"];
m1_339 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.NullNotInEnum()", file="TestFixtureBase.cs", label="JsonValidatingReader reader = new JsonValidatingReader(new JsonTextReader(new StringReader(json)))", span="552-552"];
m1_340 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.NullNotInEnum()", file="TestFixtureBase.cs", label="reader.ValidationEventHandler += (sender, args) => { validationEventArgs = args; }", span="553-553"];
m1_342 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.NullNotInEnum()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="556-556"];
m1_343 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.NullNotInEnum()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.StartArray, reader.TokenType)", span="557-557"];
m1_344 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.NullNotInEnum()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="559-559"];
m1_345 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.NullNotInEnum()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.Null, reader.TokenType)", span="560-560"];
m1_347 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.NullNotInEnum()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="563-563"];
m1_348 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.NullNotInEnum()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.EndArray, reader.TokenType)", span="564-564"];
m1_346 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.NullNotInEnum()", file="TestFixtureBase.cs", label="Assert.AreEqual(@''Value null is not defined in enum. Line 1, position 5.'', validationEventArgs.Message)", span="561-561"];
m1_349 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.NullNotInEnum()", file="TestFixtureBase.cs", label="Assert.IsNotNull(validationEventArgs)", span="566-566"];
m1_350 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.NullNotInEnum()", file="TestFixtureBase.cs", label="Exit Newtonsoft.Json.Tests.JsonValidatingReaderTests.NullNotInEnum()", span="537-537"];
m1_569 [cluster="Newtonsoft.Json.Schema.JsonSchemaResolver.JsonSchemaResolver()", file="TestFixtureBase.cs", label="Entry Newtonsoft.Json.Schema.JsonSchemaResolver.JsonSchemaResolver()", span="49-49"];
m1_763 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.DuplicateErrorsTest()", file="TestFixtureBase.cs", label="Entry Newtonsoft.Json.Tests.JsonValidatingReaderTests.DuplicateErrorsTest()", span="1253-1253"];
m1_764 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.DuplicateErrorsTest()", file="TestFixtureBase.cs", label="string schema = @''{\r\n  ''''id'''':''''ErrorDemo.Database'''',\r\n  ''''properties'''':{\r\n    ''''ErrorDemoDatabase'''':{\r\n      ''''type'''':''''object'''',\r\n      ''''required'''':true,\r\n      ''''properties'''':{\r\n        ''''URL'''':{\r\n          ''''type'''':''''string'''',\r\n          ''''required'''':true\r\n        },\r\n        ''''Version'''':{\r\n          ''''type'''':''''string'''',\r\n          ''''required'''':true\r\n        },\r\n        ''''Date'''':{\r\n          ''''type'''':''''string'''',\r\n          ''''format'''':''''date-time'''',\r\n          ''''required'''':true\r\n        },\r\n        ''''MACLevels'''':{\r\n          ''''type'''':''''object'''',\r\n          ''''required'''':true,\r\n          ''''properties'''':{\r\n            ''''MACLevel'''':{\r\n              ''''type'''':''''array'''',\r\n              ''''required'''':true,\r\n              ''''items'''':[\r\n                {\r\n                  ''''required'''':true,\r\n                  ''''properties'''':{\r\n                    ''''IDName'''':{\r\n                      ''''type'''':''''string'''',\r\n                      ''''required'''':true\r\n                    },\r\n                    ''''Order'''':{\r\n                      ''''type'''':''''string'''',\r\n                      ''''required'''':true\r\n                    },\r\n                    ''''IDDesc'''':{\r\n                      ''''type'''':''''string'''',\r\n                      ''''required'''':true\r\n                    },\r\n                    ''''IsActive'''':{\r\n                      ''''type'''':''''string'''',\r\n                      ''''required'''':true\r\n                    }\r\n                  }\r\n                }\r\n              ]\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}''", span="1255-1311"];
m1_765 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.DuplicateErrorsTest()", file="TestFixtureBase.cs", label="string json = @''{\r\n  ''''ErrorDemoDatabase'''':{\r\n    ''''URL'''':''''localhost:3164'''',\r\n    ''''Version'''':''''1.0'''',\r\n    ''''Date'''':''''6.23.2010, 9:35:18.121'''',\r\n    ''''MACLevels'''':{\r\n      ''''MACLevel'''':[\r\n        {\r\n          ''''@IDName'''':''''Developer'''',\r\n          ''''Order'''':''''0'''',\r\n          ''''IDDesc'''':''''DeveloperDesc'''',\r\n          ''''IsActive'''':''''True''''\r\n        },\r\n        {\r\n          ''''IDName'''':''''Technician'''',\r\n          ''''Order'''':''''1'''',\r\n          ''''IDDesc'''':''''TechnicianDesc'''',\r\n          ''''IsActive'''':''''True''''\r\n        },\r\n        {\r\n          ''''IDName'''':''''Administrator'''',\r\n          ''''Order'''':''''2'''',\r\n          ''''IDDesc'''':''''AdministratorDesc'''',\r\n          ''''IsActive'''':''''True''''\r\n        },\r\n        {\r\n          ''''IDName'''':''''PowerUser'''',\r\n          ''''Order'''':''''3'''',\r\n          ''''IDDesc'''':''''PowerUserDesc'''',\r\n          ''''IsActive'''':''''True''''\r\n        },\r\n        {\r\n          ''''IDName'''':''''Operator'''',\r\n          ''''Order'''':''''4'''',\r\n          ''''IDDesc'''':''''OperatorDesc'''',\r\n          ''''IsActive'''':''''True''''\r\n        }\r\n      ]\r\n    }\r\n  }\r\n}''", span="1313-1353"];
m1_769 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.DuplicateErrorsTest()", file="TestFixtureBase.cs", label="reader.Schema = JsonSchema.Parse(schema)", span="1362-1362"];
m1_766 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.DuplicateErrorsTest()", file="TestFixtureBase.cs", label="IList<ValidationEventArgs> validationEventArgs = new List<ValidationEventArgs>()", span="1355-1355"];
m1_767 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.DuplicateErrorsTest()", file="TestFixtureBase.cs", label="JsonValidatingReader reader = new JsonValidatingReader(new JsonTextReader(new StringReader(json)))", span="1357-1357"];
m1_768 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.DuplicateErrorsTest()", file="TestFixtureBase.cs", label="reader.ValidationEventHandler += (sender, args) =>\r\n        {\r\n          validationEventArgs.Add(args);\r\n        }", span="1358-1361"];
m1_771 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.DuplicateErrorsTest()", file="TestFixtureBase.cs", label="Assert.AreEqual(1, validationEventArgs.Count)", span="1368-1368"];
m1_770 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.DuplicateErrorsTest()", file="TestFixtureBase.cs", label="reader.Read()", span="1364-1364"];
m1_772 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.DuplicateErrorsTest()", file="TestFixtureBase.cs", label="Exit Newtonsoft.Json.Tests.JsonValidatingReaderTests.DuplicateErrorsTest()", span="1253-1253"];
m1_845 [cluster="Newtonsoft.Json.JsonValidatingReader.ReadAsInt32()", file="TestFixtureBase.cs", label="Entry Newtonsoft.Json.JsonValidatingReader.ReadAsInt32()", span="350-350"];
m1_8 [cluster="Newtonsoft.Json.JsonValidatingReader.JsonValidatingReader(Newtonsoft.Json.JsonReader)", file="TestFixtureBase.cs", label="Entry Newtonsoft.Json.JsonValidatingReader.JsonValidatingReader(Newtonsoft.Json.JsonReader)", span="265-265"];
m1_10 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateTypes()", file="TestFixtureBase.cs", label="Entry Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateTypes()", span="27-27"];
m1_11 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateTypes()", file="TestFixtureBase.cs", label="string schemaJson = @''{\r\n  ''''description'''':''''A person'''',\r\n  ''''type'''':''''object'''',\r\n  ''''properties'''':\r\n  {\r\n    ''''name'''':{''''type'''':''''string''''},\r\n    ''''hobbies'''':\r\n    {\r\n      ''''type'''':''''array'''',\r\n      ''''items'''': {''''type'''':''''string''''}\r\n    }\r\n  }\r\n}''", span="29-41"];
m1_12 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateTypes()", file="TestFixtureBase.cs", label="string json = @''{'name':''''James'''','hobbies':[''''pie'''','cake']}''", span="43-43"];
m1_16 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateTypes()", file="TestFixtureBase.cs", label="JsonSchema schema = JsonSchema.Parse(schemaJson)", span="49-49"];
m1_13 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateTypes()", file="TestFixtureBase.cs", label="Json.Schema.ValidationEventArgs validationEventArgs = null", span="45-45"];
m1_14 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateTypes()", file="TestFixtureBase.cs", label="JsonValidatingReader reader = new JsonValidatingReader(new JsonTextReader(new StringReader(json)))", span="47-47"];
m1_15 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateTypes()", file="TestFixtureBase.cs", label="reader.ValidationEventHandler += (sender, args) => { validationEventArgs = args; }", span="48-48"];
m1_17 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateTypes()", file="TestFixtureBase.cs", label="reader.Schema = schema", span="50-50"];
m1_18 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateTypes()", file="TestFixtureBase.cs", label="Assert.AreEqual(schema, reader.Schema)", span="51-51"];
m1_19 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateTypes()", file="TestFixtureBase.cs", label="Assert.AreEqual(0, reader.Depth)", span="53-53"];
m1_20 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateTypes()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="55-55"];
m1_21 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateTypes()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="56-56"];
m1_22 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateTypes()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="58-58"];
m1_23 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateTypes()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="59-59"];
m1_24 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateTypes()", file="TestFixtureBase.cs", label="Assert.AreEqual(''name'', reader.Value.ToString())", span="60-60"];
m1_25 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateTypes()", file="TestFixtureBase.cs", label="Assert.AreEqual(1, reader.Depth)", span="62-62"];
m1_26 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateTypes()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="64-64"];
m1_27 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateTypes()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.String, reader.TokenType)", span="65-65"];
m1_28 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateTypes()", file="TestFixtureBase.cs", label="Assert.AreEqual(''James'', reader.Value.ToString())", span="66-66"];
m1_29 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateTypes()", file="TestFixtureBase.cs", label="Assert.AreEqual(typeof (string), reader.ValueType)", span="67-67"];
m1_30 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateTypes()", file="TestFixtureBase.cs", label="Assert.AreEqual('''', reader.QuoteChar)", span="68-68"];
m1_31 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateTypes()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="70-70"];
m1_32 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateTypes()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="71-71"];
m1_33 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateTypes()", file="TestFixtureBase.cs", label="Assert.AreEqual(''hobbies'', reader.Value.ToString())", span="72-72"];
m1_34 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateTypes()", file="TestFixtureBase.cs", label="Assert.AreEqual('\'', reader.QuoteChar)", span="73-73"];
m1_35 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateTypes()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="75-75"];
m1_36 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateTypes()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.StartArray, reader.TokenType)", span="76-76"];
m1_37 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateTypes()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="78-78"];
m1_38 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateTypes()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.String, reader.TokenType)", span="79-79"];
m1_39 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateTypes()", file="TestFixtureBase.cs", label="Assert.AreEqual(''pie'', reader.Value.ToString())", span="80-80"];
m1_40 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateTypes()", file="TestFixtureBase.cs", label="Assert.AreEqual('''', reader.QuoteChar)", span="81-81"];
m1_41 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateTypes()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="83-83"];
m1_42 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateTypes()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.String, reader.TokenType)", span="84-84"];
m1_43 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateTypes()", file="TestFixtureBase.cs", label="Assert.AreEqual(''cake'', reader.Value.ToString())", span="85-85"];
m1_44 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateTypes()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="87-87"];
m1_45 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateTypes()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.EndArray, reader.TokenType)", span="88-88"];
m1_46 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateTypes()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="90-90"];
m1_47 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateTypes()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.EndObject, reader.TokenType)", span="91-91"];
m1_48 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateTypes()", file="TestFixtureBase.cs", label="Assert.IsNull(validationEventArgs)", span="93-93"];
m1_49 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateTypes()", file="TestFixtureBase.cs", label="Exit Newtonsoft.Json.Tests.JsonValidatingReaderTests.ValidateTypes()", span="27-27"];
m1_824 [cluster="Newtonsoft.Json.JsonSerializer.JsonSerializer()", file="TestFixtureBase.cs", label="Entry Newtonsoft.Json.JsonSerializer.JsonSerializer()", span="286-286"];
m1_376 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ArrayCountGreaterThanMaximumItems()", file="TestFixtureBase.cs", label="Entry Newtonsoft.Json.Tests.JsonValidatingReaderTests.ArrayCountGreaterThanMaximumItems()", span="607-607"];
m1_377 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ArrayCountGreaterThanMaximumItems()", file="TestFixtureBase.cs", label="string schemaJson = @''{\r\n  ''''type'''':''''array'''',\r\n  ''''minItems'''':2,\r\n  ''''maxItems'''':3\r\n}''", span="609-613"];
m1_378 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ArrayCountGreaterThanMaximumItems()", file="TestFixtureBase.cs", label="string json = ''[null,null,null,null]''", span="615-615"];
m1_382 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ArrayCountGreaterThanMaximumItems()", file="TestFixtureBase.cs", label="reader.Schema = JsonSchema.Parse(schemaJson)", span="621-621"];
m1_379 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ArrayCountGreaterThanMaximumItems()", file="TestFixtureBase.cs", label="Json.Schema.ValidationEventArgs validationEventArgs = null", span="617-617"];
m1_380 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ArrayCountGreaterThanMaximumItems()", file="TestFixtureBase.cs", label="JsonValidatingReader reader = new JsonValidatingReader(new JsonTextReader(new StringReader(json)))", span="619-619"];
m1_381 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ArrayCountGreaterThanMaximumItems()", file="TestFixtureBase.cs", label="reader.ValidationEventHandler += (sender, args) => { validationEventArgs = args; }", span="620-620"];
m1_383 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ArrayCountGreaterThanMaximumItems()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="623-623"];
m1_384 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ArrayCountGreaterThanMaximumItems()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.StartArray, reader.TokenType)", span="624-624"];
m1_385 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ArrayCountGreaterThanMaximumItems()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="626-626"];
m1_386 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ArrayCountGreaterThanMaximumItems()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.Null, reader.TokenType)", span="627-627"];
m1_387 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ArrayCountGreaterThanMaximumItems()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="628-628"];
m1_388 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ArrayCountGreaterThanMaximumItems()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.Null, reader.TokenType)", span="629-629"];
m1_389 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ArrayCountGreaterThanMaximumItems()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="630-630"];
m1_390 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ArrayCountGreaterThanMaximumItems()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.Null, reader.TokenType)", span="631-631"];
m1_391 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ArrayCountGreaterThanMaximumItems()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="632-632"];
m1_392 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ArrayCountGreaterThanMaximumItems()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.Null, reader.TokenType)", span="633-633"];
m1_393 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ArrayCountGreaterThanMaximumItems()", file="TestFixtureBase.cs", label="Assert.IsTrue(reader.Read())", span="635-635"];
m1_394 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ArrayCountGreaterThanMaximumItems()", file="TestFixtureBase.cs", label="Assert.AreEqual(JsonToken.EndArray, reader.TokenType)", span="636-636"];
m1_395 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ArrayCountGreaterThanMaximumItems()", file="TestFixtureBase.cs", label="Assert.AreEqual(''Array item count 4 exceeds maximum count of 3. Line 1, position 21.'', validationEventArgs.Message)", span="637-637"];
m1_396 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ArrayCountGreaterThanMaximumItems()", file="TestFixtureBase.cs", label="Assert.IsNotNull(validationEventArgs)", span="639-639"];
m1_397 [cluster="Newtonsoft.Json.Tests.JsonValidatingReaderTests.ArrayCountGreaterThanMaximumItems()", file="TestFixtureBase.cs", label="Exit Newtonsoft.Json.Tests.JsonValidatingReaderTests.ArrayCountGreaterThanMaximumItems()", span="607-607"];
m1_871 [file="TestFixtureBase.cs", label=errors, span=""];
m1_872 [file="TestFixtureBase.cs", label="Newtonsoft.Json.Tests.JsonValidatingReaderTests", span=""];
m1_873 [file="TestFixtureBase.cs", label=errors, span=""];
m1_874 [file="TestFixtureBase.cs", label=errors, span=""];
m1_875 [file="TestFixtureBase.cs", label=validationEventArgs, span=""];
n38 -> n20  [color=darkseagreen4, key=1, label=string, style=dashed];
n39 -> n25  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Tests.Schema.PerformanceTester", style=dashed];
n39 -> n32  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Tests.Schema.PerformanceTester", style=dashed];
n39 -> n33  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Tests.Schema.PerformanceTester", style=dashed];
n39 -> n34  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Tests.Schema.PerformanceTester", style=dashed];
n4 -> n10  [color=darkseagreen4, key=1, label=i, style=dashed];
n10 -> n10  [color=darkseagreen4, key=1, label=i, style=dashed];
n7 -> n9  [color=darkseagreen4, key=1, label=validatingReader, style=dashed];
n20 -> n20  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m1_637 -> m1_640  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_637 -> m1_641  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_637 -> m1_642  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_637 -> m1_643  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_637 -> m1_645  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_637 -> m1_646  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_637 -> m1_648  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_637 -> m1_649  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_637 -> m1_651  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_637 -> m1_652  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_637 -> m1_653  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_705 -> m1_708  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_705 -> m1_709  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_705 -> m1_710  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_705 -> m1_711  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_705 -> m1_712  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_705 -> m1_714  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_705 -> m1_715  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_705 -> m1_716  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_705 -> m1_717  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_705 -> m1_718  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_705 -> m1_719  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_705 -> m1_720  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_705 -> m1_721  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_705 -> m1_722  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_705 -> m1_725  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_705 -> m1_726  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_705 -> m1_727  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_705 -> m1_729  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_705 -> m1_730  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_705 -> m1_732  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_705 -> m1_733  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_705 -> m1_734  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_705 -> m1_736  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_705 -> m1_737  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_705 -> m1_738  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_705 -> m1_743  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_705 -> m1_744  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_705 -> m1_745  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_705 -> m1_747  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_705 -> m1_748  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_705 -> m1_749  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_705 -> m1_752  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_705 -> m1_753  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_705 -> m1_754  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_705 -> m1_755  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_705 -> m1_756  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_704 -> m1_761  [color=darkseagreen4, key=1, label=errors, style=dashed];
m1_704 -> m1_723  [color=darkseagreen4, key=1, label=errors, style=dashed];
m1_704 -> m1_724  [color=darkseagreen4, key=1, label=errors, style=dashed];
m1_704 -> m1_728  [color=darkseagreen4, key=1, label=errors, style=dashed];
m1_704 -> m1_731  [color=darkseagreen4, key=1, label=errors, style=dashed];
m1_704 -> m1_735  [color=darkseagreen4, key=1, label=errors, style=dashed];
m1_704 -> m1_739  [color=darkseagreen4, key=1, label=errors, style=dashed];
m1_704 -> m1_740  [color=darkseagreen4, key=1, label=errors, style=dashed];
m1_704 -> m1_741  [color=darkseagreen4, key=1, label=errors, style=dashed];
m1_704 -> m1_742  [color=darkseagreen4, key=1, label=errors, style=dashed];
m1_704 -> m1_746  [color=darkseagreen4, key=1, label=errors, style=dashed];
m1_704 -> m1_750  [color=darkseagreen4, key=1, label=errors, style=dashed];
m1_704 -> m1_751  [color=darkseagreen4, key=1, label=errors, style=dashed];
m1_439 -> m1_442  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_439 -> m1_443  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_439 -> m1_444  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_439 -> m1_445  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_439 -> m1_447  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_439 -> m1_448  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_439 -> m1_450  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_439 -> m1_451  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_273 -> m1_276  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_273 -> m1_277  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_273 -> m1_278  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_273 -> m1_279  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_273 -> m1_280  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_273 -> m1_281  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_273 -> m1_283  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_273 -> m1_284  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_273 -> m1_286  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_273 -> m1_287  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_779 -> m1_782  [color=darkseagreen4, key=1, label=data, style=dashed];
m1_204 -> m1_207  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_204 -> m1_208  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_219 -> m1_222  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_219 -> m1_223  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_219 -> m1_224  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_219 -> m1_225  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_219 -> m1_226  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_219 -> m1_227  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_219 -> m1_229  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_219 -> m1_230  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_219 -> m1_232  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_219 -> m1_233  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_321 -> m1_324  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_321 -> m1_325  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_321 -> m1_326  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_321 -> m1_327  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_321 -> m1_328  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_321 -> m1_329  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_543 -> m1_558  [color=darkseagreen4, key=1, label=errors, style=dashed];
m1_543 -> m1_551  [color=darkseagreen4, key=1, label=errors, style=dashed];
m1_543 -> m1_552  [color=darkseagreen4, key=1, label=errors, style=dashed];
m1_546 -> m1_549  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_546 -> m1_550  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_94 -> m1_96  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_95 -> m1_95  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_95 -> m1_97  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_96 -> m1_96  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_424 -> m1_427  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_424 -> m1_428  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_168 -> m1_171  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_168 -> m1_172  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_358 -> m1_361  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_358 -> m1_362  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_358 -> m1_363  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_358 -> m1_364  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_358 -> m1_366  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_358 -> m1_367  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_358 -> m1_369  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_358 -> m1_370  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_123 -> m1_118  [color=darkseagreen4, key=1, label=validationEventArgs, style=dashed];
m1_123 -> m1_119  [color=darkseagreen4, key=1, label=validationEventArgs, style=dashed];
m1_818 -> m1_820  [color=darkseagreen4, key=1, label=values, style=dashed];
m1_818 -> m1_821  [color=darkseagreen4, key=1, label=values, style=dashed];
m1_818 -> m1_822  [color=darkseagreen4, key=1, label=values, style=dashed];
m1_258 -> m1_261  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_258 -> m1_262  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_2 -> m1_4  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_619 -> m1_631  [color=darkseagreen4, key=1, label=errors, style=dashed];
m1_619 -> m1_627  [color=darkseagreen4, key=1, label=errors, style=dashed];
m1_619 -> m1_628  [color=darkseagreen4, key=1, label=errors, style=dashed];
m1_620 -> m1_623  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_620 -> m1_624  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_620 -> m1_625  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_620 -> m1_626  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_621 -> m1_631  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Schema.ValidationEventArgs", style=dashed];
m1_297 -> m1_300  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_297 -> m1_301  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_297 -> m1_302  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_297 -> m1_303  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_297 -> m1_304  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_297 -> m1_305  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_297 -> m1_307  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_297 -> m1_308  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_297 -> m1_310  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_297 -> m1_311  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_485 -> m1_488  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_485 -> m1_489  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_485 -> m1_490  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_485 -> m1_491  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_485 -> m1_492  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_485 -> m1_493  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_485 -> m1_494  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_485 -> m1_495  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_485 -> m1_497  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_485 -> m1_498  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_243 -> m1_246  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_243 -> m1_247  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_144 -> m1_147  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_144 -> m1_148  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_144 -> m1_149  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_144 -> m1_150  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_144 -> m1_151  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_144 -> m1_152  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_144 -> m1_154  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_144 -> m1_155  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_144 -> m1_157  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_144 -> m1_158  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_405 -> m1_408  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_405 -> m1_409  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_405 -> m1_410  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_405 -> m1_411  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_405 -> m1_412  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_405 -> m1_413  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_196 -> m1_198  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_129 -> m1_132  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_129 -> m1_133  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_110 -> m1_115  [color=darkseagreen4, key=1, label=schemaJson, style=dashed];
m1_111 -> m1_113  [color=darkseagreen4, key=1, label=json, style=dashed];
m1_113 -> m1_115  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_113 -> m1_116  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_113 -> m1_117  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_105 -> m1_110  [color=green, key=1, label="params string[]", style=dashed];
m1_105 -> m1_112  [color=green, key=1, label="params string[]", style=dashed];
m1_105 -> m1_115  [color=green, key=1, label="params string[]", style=dashed];
m1_107 -> m1_104  [color=darkseagreen4, key=1, label=validationEventArgs, style=dashed];
m1_56 -> m1_48  [color=darkseagreen4, key=1, label=validationEventArgs, style=dashed];
m1_138 -> m1_134  [color=darkseagreen4, key=1, label=validationEventArgs, style=dashed];
m1_138 -> m1_135  [color=darkseagreen4, key=1, label=validationEventArgs, style=dashed];
m1_162 -> m1_153  [color=darkseagreen4, key=1, label=validationEventArgs, style=dashed];
m1_162 -> m1_156  [color=darkseagreen4, key=1, label=validationEventArgs, style=dashed];
m1_162 -> m1_159  [color=darkseagreen4, key=1, label=validationEventArgs, style=dashed];
m1_177 -> m1_173  [color=darkseagreen4, key=1, label=validationEventArgs, style=dashed];
m1_177 -> m1_174  [color=darkseagreen4, key=1, label=validationEventArgs, style=dashed];
m1_192 -> m1_188  [color=darkseagreen4, key=1, label=validationEventArgs, style=dashed];
m1_192 -> m1_189  [color=darkseagreen4, key=1, label=validationEventArgs, style=dashed];
m1_213 -> m1_209  [color=darkseagreen4, key=1, label=validationEventArgs, style=dashed];
m1_213 -> m1_210  [color=darkseagreen4, key=1, label=validationEventArgs, style=dashed];
m1_237 -> m1_231  [color=darkseagreen4, key=1, label=validationEventArgs, style=dashed];
m1_237 -> m1_234  [color=darkseagreen4, key=1, label=validationEventArgs, style=dashed];
m1_267 -> m1_263  [color=darkseagreen4, key=1, label=validationEventArgs, style=dashed];
m1_267 -> m1_264  [color=darkseagreen4, key=1, label=validationEventArgs, style=dashed];
m1_291 -> m1_282  [color=darkseagreen4, key=1, label=validationEventArgs, style=dashed];
m1_291 -> m1_285  [color=darkseagreen4, key=1, label=validationEventArgs, style=dashed];
m1_291 -> m1_288  [color=darkseagreen4, key=1, label=validationEventArgs, style=dashed];
m1_315 -> m1_306  [color=darkseagreen4, key=1, label=validationEventArgs, style=dashed];
m1_315 -> m1_309  [color=darkseagreen4, key=1, label=validationEventArgs, style=dashed];
m1_315 -> m1_312  [color=darkseagreen4, key=1, label=validationEventArgs, style=dashed];
m1_333 -> m1_330  [color=darkseagreen4, key=1, label=validationEventArgs, style=dashed];
m1_352 -> m1_346  [color=darkseagreen4, key=1, label=validationEventArgs, style=dashed];
m1_352 -> m1_349  [color=darkseagreen4, key=1, label=validationEventArgs, style=dashed];
m1_374 -> m1_365  [color=darkseagreen4, key=1, label=validationEventArgs, style=dashed];
m1_374 -> m1_368  [color=darkseagreen4, key=1, label=validationEventArgs, style=dashed];
m1_374 -> m1_371  [color=darkseagreen4, key=1, label=validationEventArgs, style=dashed];
m1_399 -> m1_395  [color=darkseagreen4, key=1, label=validationEventArgs, style=dashed];
m1_399 -> m1_396  [color=darkseagreen4, key=1, label=validationEventArgs, style=dashed];
m1_418 -> m1_414  [color=darkseagreen4, key=1, label=validationEventArgs, style=dashed];
m1_418 -> m1_415  [color=darkseagreen4, key=1, label=validationEventArgs, style=dashed];
m1_433 -> m1_429  [color=darkseagreen4, key=1, label=validationEventArgs, style=dashed];
m1_433 -> m1_430  [color=darkseagreen4, key=1, label=validationEventArgs, style=dashed];
m1_455 -> m1_446  [color=darkseagreen4, key=1, label=validationEventArgs, style=dashed];
m1_455 -> m1_449  [color=darkseagreen4, key=1, label=validationEventArgs, style=dashed];
m1_455 -> m1_452  [color=darkseagreen4, key=1, label=validationEventArgs, style=dashed];
m1_479 -> m1_472  [color=darkseagreen4, key=1, label=validationEventArgs, style=dashed];
m1_479 -> m1_475  [color=darkseagreen4, key=1, label=validationEventArgs, style=dashed];
m1_479 -> m1_476  [color=darkseagreen4, key=1, label=validationEventArgs, style=dashed];
m1_502 -> m1_496  [color=darkseagreen4, key=1, label=validationEventArgs, style=dashed];
m1_502 -> m1_499  [color=darkseagreen4, key=1, label=validationEventArgs, style=dashed];
m1_539 -> m1_519  [color=darkseagreen4, key=1, label=validationEventArgs, style=dashed];
m1_539 -> m1_526  [color=darkseagreen4, key=1, label=validationEventArgs, style=dashed];
m1_539 -> m1_533  [color=darkseagreen4, key=1, label=validationEventArgs, style=dashed];
m1_539 -> m1_536  [color=darkseagreen4, key=1, label=validationEventArgs, style=dashed];
m1_557 -> m1_553  [color=darkseagreen4, key=1, label=validationEventArgs, style=dashed];
m1_557 -> m1_559  [color=darkseagreen4, key=1, label=validationEventArgs, style=dashed];
m1_615 -> m1_582  [color=darkseagreen4, key=1, label=validationEventArgs, style=dashed];
m1_615 -> m1_586  [color=darkseagreen4, key=1, label=validationEventArgs, style=dashed];
m1_615 -> m1_590  [color=darkseagreen4, key=1, label=validationEventArgs, style=dashed];
m1_615 -> m1_594  [color=darkseagreen4, key=1, label=validationEventArgs, style=dashed];
m1_615 -> m1_598  [color=darkseagreen4, key=1, label=validationEventArgs, style=dashed];
m1_615 -> m1_605  [color=darkseagreen4, key=1, label=validationEventArgs, style=dashed];
m1_656 -> m1_644  [color=darkseagreen4, key=1, label=validationEventArgs, style=dashed];
m1_656 -> m1_647  [color=darkseagreen4, key=1, label=validationEventArgs, style=dashed];
m1_656 -> m1_650  [color=darkseagreen4, key=1, label=validationEventArgs, style=dashed];
m1_693 -> m1_669  [color=darkseagreen4, key=1, label=validationEventArgs, style=dashed];
m1_693 -> m1_674  [color=darkseagreen4, key=1, label=validationEventArgs, style=dashed];
m1_693 -> m1_679  [color=darkseagreen4, key=1, label=validationEventArgs, style=dashed];
m1_693 -> m1_682  [color=darkseagreen4, key=1, label=validationEventArgs, style=dashed];
m1_693 -> m1_685  [color=darkseagreen4, key=1, label=validationEventArgs, style=dashed];
m1_760 -> m1_713  [color=darkseagreen4, key=1, label=validationEventArgs, style=dashed];
m1_760 -> m1_762  [color=darkseagreen4, key=1, label=validationEventArgs, style=dashed];
m1_847 -> m1_837  [color=darkseagreen4, key=1, label=validationEventArgs, style=dashed];
m1_847 -> m1_840  [color=darkseagreen4, key=1, label=validationEventArgs, style=dashed];
m1_847 -> m1_843  [color=darkseagreen4, key=1, label=validationEventArgs, style=dashed];
m1_869 -> m1_860  [color=darkseagreen4, key=1, label=validationEventArgs, style=dashed];
m1_869 -> m1_863  [color=darkseagreen4, key=1, label=validationEventArgs, style=dashed];
m1_869 -> m1_866  [color=darkseagreen4, key=1, label=validationEventArgs, style=dashed];
m1_461 -> m1_464  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_461 -> m1_465  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_461 -> m1_466  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_461 -> m1_467  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_461 -> m1_468  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_461 -> m1_469  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_461 -> m1_470  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_461 -> m1_471  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_461 -> m1_473  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_461 -> m1_474  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_92 -> m1_101  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_92 -> m1_102  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_101 -> m1_101  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_830 -> m1_833  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_830 -> m1_834  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_830 -> m1_835  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_830 -> m1_836  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_830 -> m1_838  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_830 -> m1_839  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_830 -> m1_841  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_830 -> m1_842  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_183 -> m1_186  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_183 -> m1_187  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_574 -> m1_577  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_574 -> m1_578  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_574 -> m1_579  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_574 -> m1_580  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_574 -> m1_581  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_574 -> m1_583  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_574 -> m1_584  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_574 -> m1_585  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_574 -> m1_587  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_574 -> m1_588  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_574 -> m1_589  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_574 -> m1_591  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_574 -> m1_592  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_574 -> m1_593  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_574 -> m1_595  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_574 -> m1_596  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_574 -> m1_597  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_574 -> m1_599  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_574 -> m1_600  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_574 -> m1_601  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_574 -> m1_602  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_574 -> m1_603  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_574 -> m1_604  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_574 -> m1_606  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_574 -> m1_607  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_574 -> m1_608  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_574 -> m1_609  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_574 -> m1_610  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_574 -> m1_611  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_508 -> m1_511  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_508 -> m1_512  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_508 -> m1_513  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_508 -> m1_514  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_508 -> m1_515  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_508 -> m1_516  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_508 -> m1_517  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_508 -> m1_518  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_508 -> m1_520  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_508 -> m1_521  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_508 -> m1_522  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_508 -> m1_523  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_508 -> m1_524  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_508 -> m1_525  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_508 -> m1_527  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_508 -> m1_528  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_508 -> m1_529  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_508 -> m1_530  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_508 -> m1_531  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_508 -> m1_532  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_508 -> m1_534  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_508 -> m1_535  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_87 -> m1_89  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_88 -> m1_88  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_88 -> m1_90  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_89 -> m1_89  [color=darkseagreen4, key=1, label=string, style=dashed];
m1_62 -> m1_65  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_62 -> m1_66  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_62 -> m1_67  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_62 -> m1_68  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_62 -> m1_69  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_62 -> m1_70  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_62 -> m1_71  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_62 -> m1_72  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_62 -> m1_73  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_62 -> m1_74  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_62 -> m1_75  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_62 -> m1_76  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_62 -> m1_77  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_62 -> m1_78  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_62 -> m1_79  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_62 -> m1_80  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_62 -> m1_81  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_62 -> m1_82  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_62 -> m1_83  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_62 -> m1_84  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_62 -> m1_85  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_62 -> m1_86  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_62 -> m1_87  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_62 -> m1_88  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_62 -> m1_89  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_62 -> m1_90  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_62 -> m1_91  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_62 -> m1_92  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_62 -> m1_93  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_62 -> m1_94  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_62 -> m1_95  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_62 -> m1_96  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_62 -> m1_97  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_62 -> m1_98  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_62 -> m1_99  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_62 -> m1_100  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_62 -> m1_101  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_62 -> m1_102  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_62 -> m1_103  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_853 -> m1_856  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_853 -> m1_857  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_853 -> m1_858  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_853 -> m1_859  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_853 -> m1_861  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_853 -> m1_862  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_853 -> m1_864  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_853 -> m1_865  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_662 -> m1_665  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_662 -> m1_666  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_662 -> m1_667  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_662 -> m1_668  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_662 -> m1_670  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_662 -> m1_671  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_662 -> m1_672  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_662 -> m1_673  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_662 -> m1_675  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_662 -> m1_676  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_662 -> m1_677  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_662 -> m1_678  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_662 -> m1_680  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_662 -> m1_681  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_662 -> m1_683  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_662 -> m1_684  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_662 -> m1_686  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_662 -> m1_687  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_662 -> m1_688  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_662 -> m1_689  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_662 -> m1_690  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_339 -> m1_342  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_339 -> m1_343  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_339 -> m1_344  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_339 -> m1_345  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_339 -> m1_347  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_339 -> m1_348  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_766 -> m1_774  [color=darkseagreen4, key=1, label=validationEventArgs, style=dashed];
m1_766 -> m1_771  [color=darkseagreen4, key=1, label=validationEventArgs, style=dashed];
m1_767 -> m1_770  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_768 -> m1_774  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Schema.ValidationEventArgs", style=dashed];
m1_16 -> m1_18  [color=darkseagreen4, key=1, label=schema, style=dashed];
m1_14 -> m1_18  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_14 -> m1_19  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_14 -> m1_20  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_14 -> m1_21  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_14 -> m1_22  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_14 -> m1_23  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_14 -> m1_24  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_14 -> m1_25  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_14 -> m1_26  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_14 -> m1_27  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_14 -> m1_28  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_14 -> m1_29  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_14 -> m1_30  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_14 -> m1_31  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_14 -> m1_32  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_14 -> m1_33  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_14 -> m1_34  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_14 -> m1_35  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_14 -> m1_36  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_14 -> m1_37  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_14 -> m1_38  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_14 -> m1_39  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_14 -> m1_40  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_14 -> m1_41  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_14 -> m1_42  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_14 -> m1_43  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_14 -> m1_44  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_14 -> m1_45  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_14 -> m1_46  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_14 -> m1_47  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_380 -> m1_383  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_380 -> m1_384  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_380 -> m1_385  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_380 -> m1_386  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_380 -> m1_387  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_380 -> m1_388  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_380 -> m1_389  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_380 -> m1_390  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_380 -> m1_391  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_380 -> m1_392  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_380 -> m1_393  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_380 -> m1_394  [color=darkseagreen4, key=1, label=reader, style=dashed];
m1_871 -> m1_558  [color=darkseagreen4, key=1, label=errors, style=dashed];
m1_873 -> m1_631  [color=darkseagreen4, key=1, label=errors, style=dashed];
m1_874 -> m1_761  [color=darkseagreen4, key=1, label=errors, style=dashed];
m1_875 -> m1_774  [color=darkseagreen4, key=1, label=validationEventArgs, style=dashed];
}
