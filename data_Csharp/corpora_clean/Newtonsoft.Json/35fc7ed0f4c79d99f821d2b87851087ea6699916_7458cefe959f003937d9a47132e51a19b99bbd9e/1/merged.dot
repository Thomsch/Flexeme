digraph  {
n16 [label="Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter", span=""];
n0 [label="Entry Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", span="10-10", cluster="Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)"];
n1 [label=current, span="12-12", cluster="Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)"];
n5 [label="yield return v;", span="20-20", cluster="Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)"];
n8 [label="yield return v;", span="29-29", cluster="Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)"];
n3 [label="JToken v = GetTokenIndex(t, errorWhenNoMatch, Index.Value)", span="16-16", cluster="Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", color=red, community=0];
n9 [label=errorWhenNoMatch, span="34-34", cluster="Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)"];
n2 [label="Index != null", span="14-14", cluster="Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)"];
n11 [label="Exit Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", span="10-10", cluster="Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)"];
n6 [label="t is JArray || t is JConstructor", span="25-25", cluster="Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)"];
n7 [label=t, span="27-27", cluster="Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)"];
n10 [label="throw new JsonException(''Index * not valid on {0}.''.FormatWith(CultureInfo.InvariantCulture, t.GetType().Name));", span="36-36", cluster="Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)"];
n4 [label="v != null", span="18-18", cluster="Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)"];
n12 [label="Entry Newtonsoft.Json.Linq.JsonPath.PathFilter.GetTokenIndex(Newtonsoft.Json.Linq.JToken, bool, int)", span="10-10", cluster="Newtonsoft.Json.Linq.JsonPath.PathFilter.GetTokenIndex(Newtonsoft.Json.Linq.JToken, bool, int)"];
n13 [label="Entry Newtonsoft.Json.JsonException.JsonException(string)", span="54-54", cluster="Newtonsoft.Json.JsonException.JsonException(string)"];
n14 [label="Entry object.GetType()", span="0-0", cluster="object.GetType()"];
n15 [label="Entry string.FormatWith(System.IFormatProvider, object)", span="47-47", cluster="string.FormatWith(System.IFormatProvider, object)"];
d3 [label="JToken v = GetTokenIndex(t, errorWhenNoMatch, Index.Value)", span="16-16", cluster="Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", color=green, community=0];
m0_65 [label="Entry Newtonsoft.Json.Serialization.IAttributeProvider.GetAttributes(bool)", span="40-40", cluster="Newtonsoft.Json.Serialization.IAttributeProvider.GetAttributes(bool)", file="ArraySliceFilter.cs"];
m0_126 [label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CustomList<T>.CustomList()", span="222-222", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CustomList<T>.CustomList()", file="ArraySliceFilter.cs"];
m0_9 [label="Start < 0", span="31-31", cluster="Newtonsoft.Json.Linq.JsonPath.ArraySliceFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="ArraySliceFilter.cs"];
m0_58 [label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.PropertyAttributeProvider()", span="160-160", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.PropertyAttributeProvider()", file="ArraySliceFilter.cs"];
m0_59 [label="var resolver = new DefaultContractResolver()", span="162-162", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.PropertyAttributeProvider()", file="ArraySliceFilter.cs"];
m0_60 [label="var contract = (JsonObjectContract)resolver.ResolveContract(typeof(Invoice))", span="163-163", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.PropertyAttributeProvider()", file="ArraySliceFilter.cs"];
m0_61 [label="JsonProperty property = contract.Properties[''FollowUpDays'']", span="165-165", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.PropertyAttributeProvider()", file="ArraySliceFilter.cs"];
m0_62 [label="Assert.AreEqual(1, property.AttributeProvider.GetAttributes(false).Count)", span="166-166", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.PropertyAttributeProvider()", file="ArraySliceFilter.cs"];
m0_63 [label="Assert.AreEqual(typeof(DefaultValueAttribute), property.AttributeProvider.GetAttributes(false)[0].GetType())", span="167-167", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.PropertyAttributeProvider()", file="ArraySliceFilter.cs"];
m0_64 [label="Exit Newtonsoft.Json.Tests.Serialization.ContractResolverTests.PropertyAttributeProvider()", span="160-160", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.PropertyAttributeProvider()", file="ArraySliceFilter.cs"];
m0_78 [label="Entry Unk.IsFalse", span="", cluster="Unk.IsFalse", file="ArraySliceFilter.cs"];
m0_90 [label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractListTestClass()", span="196-196", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractListTestClass()", file="ArraySliceFilter.cs"];
m0_91 [label="var resolver = new DefaultContractResolver()", span="198-198", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractListTestClass()", file="ArraySliceFilter.cs"];
m0_92 [label="var contract = (JsonArrayContract)resolver.ResolveContract(typeof(AbstractListTestClass<int>))", span="199-199", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractListTestClass()", file="ArraySliceFilter.cs"];
m0_96 [label="ExceptionAssert.Throws<JsonSerializationException>(() => JsonConvert.DeserializeObject<AbstractListTestClass<int>>(@''[1,2]'', new JsonSerializerSettings\r\n            {\r\n                ContractResolver = resolver\r\n            }), ''Could not create an instance of type Newtonsoft.Json.Tests.Serialization.AbstractListTestClass`1[System.Int32]. Type is an interface or abstract class and cannot be instantiated. Path '', line 1, position 1.'')", span="205-208", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractListTestClass()", file="ArraySliceFilter.cs"];
m0_98 [label="var l = JsonConvert.DeserializeObject<AbstractListTestClass<int>>(@''[1,2]'', new JsonSerializerSettings\r\n            {\r\n                ContractResolver = resolver\r\n            })", span="212-215", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractListTestClass()", file="ArraySliceFilter.cs"];
m0_93 [label="Assert.IsFalse(contract.IsInstantiable)", span="201-201", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractListTestClass()", file="ArraySliceFilter.cs"];
m0_94 [label="Assert.IsNull(contract.DefaultCreator)", span="202-202", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractListTestClass()", file="ArraySliceFilter.cs"];
m0_95 [label="Assert.IsFalse(contract.HasParameterizedCreatorInternal)", span="203-203", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractListTestClass()", file="ArraySliceFilter.cs"];
m0_97 [label="contract.DefaultCreator = () => new AbstractImplementationListTestClass<int>()", span="210-210", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractListTestClass()", file="ArraySliceFilter.cs"];
m0_99 [label="Assert.AreEqual(2, l.Count)", span="217-217", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractListTestClass()", file="ArraySliceFilter.cs"];
m0_100 [label="Assert.AreEqual(1, l[0])", span="218-218", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractListTestClass()", file="ArraySliceFilter.cs"];
m0_101 [label="Assert.AreEqual(2, l[1])", span="219-219", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractListTestClass()", file="ArraySliceFilter.cs"];
m0_102 [label="Exit Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractListTestClass()", span="196-196", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractListTestClass()", file="ArraySliceFilter.cs"];
m0_163 [label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeWithEscapedPropertyName()", span="303-303", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeWithEscapedPropertyName()", file="ArraySliceFilter.cs"];
m0_164 [label="string json = JsonConvert.SerializeObject(\r\n                new AddressWithDataMember\r\n                {\r\n                    AddressLine1 = ''value!''\r\n                },\r\n                new JsonSerializerSettings\r\n                {\r\n                    ContractResolver = new EscapedPropertiesContractResolver\r\n                    {\r\n                        PropertySuffix = @''-'-''''-''\r\n                    }\r\n                })", span="305-316", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeWithEscapedPropertyName()", file="ArraySliceFilter.cs"];
m0_165 [label="Assert.AreEqual(@''{''''AddressLine1-'-\''''-'''':''''value!''''}'', json)", span="318-318", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeWithEscapedPropertyName()", file="ArraySliceFilter.cs"];
m0_166 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="320-320", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeWithEscapedPropertyName()", file="ArraySliceFilter.cs"];
m0_167 [label="reader.Read()", span="321-321", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeWithEscapedPropertyName()", file="ArraySliceFilter.cs"];
m0_168 [label="reader.Read()", span="322-322", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeWithEscapedPropertyName()", file="ArraySliceFilter.cs"];
m0_169 [label="Assert.AreEqual(@''AddressLine1-'-''''-'', reader.Value)", span="324-324", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeWithEscapedPropertyName()", file="ArraySliceFilter.cs"];
m0_170 [label="Exit Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeWithEscapedPropertyName()", span="303-303", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeWithEscapedPropertyName()", file="ArraySliceFilter.cs"];
m0_175 [label="Entry System.IO.StringReader.StringReader(string)", span="0-0", cluster="System.IO.StringReader.StringReader(string)", file="ArraySliceFilter.cs"];
m0_324 [label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ClassWithExtensionData.ClassWithExtensionData()", span="613-613", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ClassWithExtensionData.ClassWithExtensionData()", file="ArraySliceFilter.cs"];
m0_310 [label="Entry Newtonsoft.Json.Linq.JObject.Parse(string)", span="409-409", cluster="Newtonsoft.Json.Linq.JObject.Parse(string)", file="ArraySliceFilter.cs"];
m0_286 [label="Entry Newtonsoft.Json.Tests.Serialization.IPersonContractResolver.IPersonContractResolver()", span="95-95", cluster="Newtonsoft.Json.Tests.Serialization.IPersonContractResolver.IPersonContractResolver()", file="ArraySliceFilter.cs"];
m0_143 [label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractDictionaryTestClass()", span="276-276", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractDictionaryTestClass()", file="ArraySliceFilter.cs"];
m0_144 [label="var resolver = new DefaultContractResolver()", span="278-278", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractDictionaryTestClass()", file="ArraySliceFilter.cs"];
m0_145 [label="var contract = (JsonDictionaryContract)resolver.ResolveContract(typeof(AbstractDictionaryTestClass<string, int>))", span="279-279", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractDictionaryTestClass()", file="ArraySliceFilter.cs"];
m0_149 [label="ExceptionAssert.Throws<JsonSerializationException>(() => JsonConvert.DeserializeObject<AbstractDictionaryTestClass<string, int>>(@''{key1:1,key2:2}'', new JsonSerializerSettings\r\n            {\r\n                ContractResolver = resolver\r\n            }), ''Could not create an instance of type Newtonsoft.Json.Tests.Serialization.AbstractDictionaryTestClass`2[System.String,System.Int32]. Type is an interface or abstract class and cannot be instantiated. Path 'key1', line 1, position 6.'')", span="285-288", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractDictionaryTestClass()", file="ArraySliceFilter.cs"];
m0_151 [label="var d = JsonConvert.DeserializeObject<AbstractDictionaryTestClass<string, int>>(@''{key1:1,key2:2}'', new JsonSerializerSettings\r\n            {\r\n                ContractResolver = resolver\r\n            })", span="292-295", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractDictionaryTestClass()", file="ArraySliceFilter.cs"];
m0_146 [label="Assert.IsFalse(contract.IsInstantiable)", span="281-281", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractDictionaryTestClass()", file="ArraySliceFilter.cs"];
m0_147 [label="Assert.IsNull(contract.DefaultCreator)", span="282-282", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractDictionaryTestClass()", file="ArraySliceFilter.cs"];
m0_148 [label="Assert.IsFalse(contract.HasParameterizedCreatorInternal)", span="283-283", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractDictionaryTestClass()", file="ArraySliceFilter.cs"];
m0_150 [label="contract.DefaultCreator = () => new AbstractImplementationDictionaryTestClass<string, int>()", span="290-290", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractDictionaryTestClass()", file="ArraySliceFilter.cs"];
m0_152 [label="Assert.AreEqual(2, d.Count)", span="297-297", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractDictionaryTestClass()", file="ArraySliceFilter.cs"];
m0_153 [label="Assert.AreEqual(1, d[''key1''])", span="298-298", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractDictionaryTestClass()", file="ArraySliceFilter.cs"];
m0_154 [label="Assert.AreEqual(2, d[''key2''])", span="299-299", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractDictionaryTestClass()", file="ArraySliceFilter.cs"];
m0_155 [label="Exit Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractDictionaryTestClass()", span="276-276", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractDictionaryTestClass()", file="ArraySliceFilter.cs"];
m0_15 [label="stopIndex = Math.Max(stopIndex, -1)", span="45-45", cluster="Newtonsoft.Json.Linq.JsonPath.ArraySliceFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="ArraySliceFilter.cs"];
m0_225 [label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DeserializeDataMemberClassWithNoDataContract()", span="417-417", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DeserializeDataMemberClassWithNoDataContract()", file="ArraySliceFilter.cs"];
m0_226 [label="var resolver = new DefaultContractResolver()", span="419-419", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DeserializeDataMemberClassWithNoDataContract()", file="ArraySliceFilter.cs"];
m0_227 [label="var contract = (JsonObjectContract)resolver.ResolveContract(typeof(AddressWithDataMember))", span="420-420", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DeserializeDataMemberClassWithNoDataContract()", file="ArraySliceFilter.cs"];
m0_228 [label="Assert.AreEqual(''AddressLine1'', contract.Properties[0].PropertyName)", span="422-422", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DeserializeDataMemberClassWithNoDataContract()", file="ArraySliceFilter.cs"];
m0_229 [label="Exit Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DeserializeDataMemberClassWithNoDataContract()", span="417-417", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DeserializeDataMemberClassWithNoDataContract()", file="ArraySliceFilter.cs"];
m0_14 [label="startIndex = Math.Min(startIndex, (stepCount > 0) ? a.Count : a.Count - 1)", span="44-44", cluster="Newtonsoft.Json.Linq.JsonPath.ArraySliceFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="ArraySliceFilter.cs"];
m0_171 [label="Entry Newtonsoft.Json.Tests.Serialization.AddressWithDataMember.AddressWithDataMember()", span="108-108", cluster="Newtonsoft.Json.Tests.Serialization.AddressWithDataMember.AddressWithDataMember()", file="ArraySliceFilter.cs"];
m0_251 [label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.OverrideCreator()", span="456-456", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.OverrideCreator()", file="ArraySliceFilter.cs"];
m0_252 [label="var resolver = new DefaultContractResolver()", span="458-458", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.OverrideCreator()", file="ArraySliceFilter.cs"];
m0_253 [label="var contract = (JsonObjectContract)resolver.ResolveContract(typeof(MultipleParametrizedConstructorsJsonConstructor))", span="459-459", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.OverrideCreator()", file="ArraySliceFilter.cs"];
m0_254 [label="Assert.IsNull(contract.DefaultCreator)", span="461-461", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.OverrideCreator()", file="ArraySliceFilter.cs"];
m0_255 [label="Assert.IsNotNull(contract.OverrideCreator)", span="462-462", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.OverrideCreator()", file="ArraySliceFilter.cs"];
m0_256 [label="Assert.AreEqual(contract.OverrideConstructor, typeof(MultipleParametrizedConstructorsJsonConstructor).GetConstructor(new[] { typeof(string), typeof(int) }))", span="464-464", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.OverrideCreator()", file="ArraySliceFilter.cs"];
m0_257 [label="Assert.AreEqual(2, contract.CreatorParameters.Count)", span="466-466", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.OverrideCreator()", file="ArraySliceFilter.cs"];
m0_258 [label="Assert.AreEqual(''Value'', contract.CreatorParameters[0].PropertyName)", span="467-467", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.OverrideCreator()", file="ArraySliceFilter.cs"];
m0_259 [label="Assert.AreEqual(''Age'', contract.CreatorParameters[1].PropertyName)", span="468-468", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.OverrideCreator()", file="ArraySliceFilter.cs"];
m0_260 [label="contract.OverrideConstructor = null", span="471-471", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.OverrideCreator()", file="ArraySliceFilter.cs"];
m0_261 [label="Assert.IsNull(contract.OverrideCreator)", span="473-473", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.OverrideCreator()", file="ArraySliceFilter.cs"];
m0_262 [label="Exit Newtonsoft.Json.Tests.Serialization.ContractResolverTests.OverrideCreator()", span="456-456", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.OverrideCreator()", file="ArraySliceFilter.cs"];
m0_279 [label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeInterface()", span="504-504", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeInterface()", file="ArraySliceFilter.cs"];
m0_280 [label="Employee employee = new Employee\r\n            {\r\n                BirthDate = new DateTime(1977, 12, 30, 1, 1, 1, DateTimeKind.Utc),\r\n                FirstName = ''Maurice'',\r\n                LastName = ''Moss'',\r\n                Department = ''IT'',\r\n                JobTitle = ''Support''\r\n            }", span="506-513", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeInterface()", file="ArraySliceFilter.cs"];
m0_281 [label="string iPersonJson = JsonConvert.SerializeObject(employee, Formatting.Indented,\r\n                new JsonSerializerSettings { ContractResolver = new IPersonContractResolver() })", span="515-516", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeInterface()", file="ArraySliceFilter.cs"];
m0_282 [label="StringAssert.AreEqual(@''{\r\n  ''''FirstName'''': ''''Maurice'''',\r\n  ''''LastName'''': ''''Moss'''',\r\n  ''''BirthDate'''': ''''1977-12-30T01:01:01Z''''\r\n}'', iPersonJson)", span="518-522", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeInterface()", file="ArraySliceFilter.cs"];
m0_283 [label="Exit Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeInterface()", span="504-504", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeInterface()", file="ArraySliceFilter.cs"];
m0_0 [label="Entry Newtonsoft.Json.Tests.Serialization.DynamicContractResolver.DynamicContractResolver(char)", span="55-55", cluster="Newtonsoft.Json.Tests.Serialization.DynamicContractResolver.DynamicContractResolver(char)", file="ArraySliceFilter.cs"];
m0_24 [label="Exit Newtonsoft.Json.Tests.Serialization.IPersonContractResolver.CreateContract(System.Type)", span="97-97", cluster="Newtonsoft.Json.Tests.Serialization.IPersonContractResolver.CreateContract(System.Type)", color=green, community=0, file="ArraySliceFilter.cs"];
m0_23 [label="return base.CreateContract(objectType);", span="104-104", cluster="Newtonsoft.Json.Tests.Serialization.IPersonContractResolver.CreateContract(System.Type)", file="ArraySliceFilter.cs"];
m0_1 [label="_startingWithChar = startingWithChar", span="60-60", cluster="Newtonsoft.Json.Tests.Serialization.DynamicContractResolver.DynamicContractResolver(char)", file="ArraySliceFilter.cs"];
m0_6 [label="return properties;", span="71-71", cluster="Newtonsoft.Json.Tests.Serialization.DynamicContractResolver.CreateProperties(System.Type, Newtonsoft.Json.MemberSerialization)", file="ArraySliceFilter.cs"];
m0_7 [label="Exit Newtonsoft.Json.Tests.Serialization.DynamicContractResolver.CreateProperties(System.Type, Newtonsoft.Json.MemberSerialization)", span="63-63", cluster="Newtonsoft.Json.Tests.Serialization.DynamicContractResolver.CreateProperties(System.Type, Newtonsoft.Json.MemberSerialization)", file="ArraySliceFilter.cs"];
m0_8 [label="Entry Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperties(System.Type, Newtonsoft.Json.MemberSerialization)", span="1297-1297", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperties(System.Type, Newtonsoft.Json.MemberSerialization)", file="ArraySliceFilter.cs"];
m0_11 [label="Entry lambda expression", span="69-69", cluster="lambda expression", file="ArraySliceFilter.cs"];
m0_18 [label="Exit Newtonsoft.Json.Tests.Serialization.EscapedPropertiesContractResolver.ResolvePropertyName(string)", span="80-80", cluster="Newtonsoft.Json.Tests.Serialization.EscapedPropertiesContractResolver.ResolvePropertyName(string)", file="ArraySliceFilter.cs"];
m0_20 [label="Entry Newtonsoft.Json.Tests.Serialization.IPersonContractResolver.CreateContract(System.Type)", span="97-97", cluster="Newtonsoft.Json.Tests.Serialization.IPersonContractResolver.CreateContract(System.Type)", file="ArraySliceFilter.cs"];
m0_3 [label="Entry Newtonsoft.Json.Tests.Serialization.DynamicContractResolver.CreateProperties(System.Type, Newtonsoft.Json.MemberSerialization)", span="63-63", cluster="Newtonsoft.Json.Tests.Serialization.DynamicContractResolver.CreateProperties(System.Type, Newtonsoft.Json.MemberSerialization)", file="ArraySliceFilter.cs"];
m0_2 [label="Exit Newtonsoft.Json.Tests.Serialization.DynamicContractResolver.DynamicContractResolver(char)", span="55-55", cluster="Newtonsoft.Json.Tests.Serialization.DynamicContractResolver.DynamicContractResolver(char)", file="ArraySliceFilter.cs"];
m0_26 [label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.JsonPropertyDefaultValue()", span="120-120", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.JsonPropertyDefaultValue()", file="ArraySliceFilter.cs"];
m0_5 [label="properties =\r\n                properties.Where(p => p.PropertyName.StartsWith(_startingWithChar.ToString())).ToList()", span="68-69", cluster="Newtonsoft.Json.Tests.Serialization.DynamicContractResolver.CreateProperties(System.Type, Newtonsoft.Json.MemberSerialization)", file="ArraySliceFilter.cs"];
m0_22 [label="objectType = typeof(IPerson)", span="101-101", cluster="Newtonsoft.Json.Tests.Serialization.IPersonContractResolver.CreateContract(System.Type)", file="ArraySliceFilter.cs"];
m0_13 [label="Exit lambda expression", span="69-69", cluster="lambda expression", file="ArraySliceFilter.cs"];
m0_17 [label="return base.ResolvePropertyName(PropertyPrefix + propertyName + PropertySuffix);", span="82-82", cluster="Newtonsoft.Json.Tests.Serialization.EscapedPropertiesContractResolver.ResolvePropertyName(string)", file="ArraySliceFilter.cs"];
m0_4 [label="IList<JsonProperty> properties = base.CreateProperties(type, memberSerialization)", span="65-65", cluster="Newtonsoft.Json.Tests.Serialization.DynamicContractResolver.CreateProperties(System.Type, Newtonsoft.Json.MemberSerialization)", file="ArraySliceFilter.cs"];
m0_10 [label="Entry Unk.ToList", span="", cluster="Unk.ToList", file="ArraySliceFilter.cs"];
m0_12 [label="p.PropertyName.StartsWith(_startingWithChar.ToString())", span="69-69", cluster="lambda expression", file="ArraySliceFilter.cs"];
m0_16 [label="Entry Newtonsoft.Json.Tests.Serialization.EscapedPropertiesContractResolver.ResolvePropertyName(string)", span="80-80", cluster="Newtonsoft.Json.Tests.Serialization.EscapedPropertiesContractResolver.ResolvePropertyName(string)", file="ArraySliceFilter.cs"];
m0_19 [label="Entry Newtonsoft.Json.Serialization.DefaultContractResolver.ResolvePropertyName(string)", span="1596-1596", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.ResolvePropertyName(string)", file="ArraySliceFilter.cs"];
m0_21 [label="objectType == typeof(Employee)", span="99-99", cluster="Newtonsoft.Json.Tests.Serialization.IPersonContractResolver.CreateContract(System.Type)", file="ArraySliceFilter.cs"];
m0_25 [label="Entry Newtonsoft.Json.Serialization.DefaultContractResolver.CreateContract(System.Type)", span="1118-1118", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateContract(System.Type)", file="ArraySliceFilter.cs"];
m0_27 [label="JsonProperty p = new JsonProperty()", span="122-122", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.JsonPropertyDefaultValue()", file="ArraySliceFilter.cs"];
m0_311 [label="Entry System.Console.WriteLine(string)", span="0-0", cluster="System.Console.WriteLine(string)", file="ArraySliceFilter.cs"];
m0_30 [label="p.PropertyType = typeof(int)", span="127-127", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.JsonPropertyDefaultValue()", file="ArraySliceFilter.cs"];
m0_79 [label="Entry Unk.IsNull", span="", cluster="Unk.IsNull", file="ArraySliceFilter.cs"];
m0_287 [label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting, Newtonsoft.Json.JsonSerializerSettings)", span="621-621", cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting, Newtonsoft.Json.JsonSerializerSettings)", file="ArraySliceFilter.cs"];
m0_47 [label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterface()", span="149-149", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterface()", file="ArraySliceFilter.cs"];
m0_48 [label="var resolver = new DefaultContractResolver()", span="151-151", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterface()", file="ArraySliceFilter.cs"];
m0_49 [label="var contract = (JsonArrayContract)resolver.ResolveContract(typeof(IList<int>))", span="152-152", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterface()", file="ArraySliceFilter.cs"];
m0_50 [label="Assert.IsTrue(contract.IsInstantiable)", span="154-154", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterface()", file="ArraySliceFilter.cs"];
m0_51 [label="Assert.AreEqual(typeof(List<int>), contract.CreatedType)", span="155-155", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterface()", file="ArraySliceFilter.cs"];
m0_52 [label="Assert.IsNotNull(contract.DefaultCreator)", span="156-156", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterface()", file="ArraySliceFilter.cs"];
m0_53 [label="Exit Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterface()", span="149-149", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterface()", file="ArraySliceFilter.cs"];
m0_235 [label="Entry Unk.Any", span="", cluster="Unk.Any", file="ArraySliceFilter.cs"];
m0_56 [label="Entry Unk.IsTrue", span="", cluster="Unk.IsTrue", file="ArraySliceFilter.cs"];
m0_43 [label="Entry Newtonsoft.Json.Serialization.JsonProperty.JsonProperty()", span="38-38", cluster="Newtonsoft.Json.Serialization.JsonProperty.JsonProperty()", file="ArraySliceFilter.cs"];
m0_82 [label="Entry Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string, Newtonsoft.Json.JsonSerializerSettings)", span="817-817", cluster="Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string, Newtonsoft.Json.JsonSerializerSettings)", file="ArraySliceFilter.cs"];
m0_177 [label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeWithHtmlEscapedPropertyName()", span="328-328", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeWithHtmlEscapedPropertyName()", file="ArraySliceFilter.cs"];
m0_178 [label="string json = JsonConvert.SerializeObject(\r\n                new AddressWithDataMember\r\n                {\r\n                    AddressLine1 = ''value!''\r\n                },\r\n                new JsonSerializerSettings\r\n                {\r\n                    ContractResolver = new EscapedPropertiesContractResolver\r\n                    {\r\n                        PropertyPrefix = ''<b>'',\r\n                        PropertySuffix = ''</b>''\r\n                    },\r\n                    StringEscapeHandling = StringEscapeHandling.EscapeHtml\r\n                })", span="330-343", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeWithHtmlEscapedPropertyName()", file="ArraySliceFilter.cs"];
m0_179 [label="Assert.AreEqual(@''{''''\u003cb\u003eAddressLine1\u003c/b\u003e'''':''''value!''''}'', json)", span="345-345", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeWithHtmlEscapedPropertyName()", file="ArraySliceFilter.cs"];
m0_180 [label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="347-347", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeWithHtmlEscapedPropertyName()", file="ArraySliceFilter.cs"];
m0_181 [label="reader.Read()", span="348-348", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeWithHtmlEscapedPropertyName()", file="ArraySliceFilter.cs"];
m0_182 [label="reader.Read()", span="349-349", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeWithHtmlEscapedPropertyName()", file="ArraySliceFilter.cs"];
m0_183 [label="Assert.AreEqual(@''<b>AddressLine1</b>'', reader.Value)", span="351-351", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeWithHtmlEscapedPropertyName()", file="ArraySliceFilter.cs"];
m0_184 [label="Exit Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeWithHtmlEscapedPropertyName()", span="328-328", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeWithHtmlEscapedPropertyName()", file="ArraySliceFilter.cs"];
m0_31 [label="Assert.AreEqual(0, p.GetResolvedDefaultValue())", span="129-129", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.JsonPropertyDefaultValue()", file="ArraySliceFilter.cs"];
m0_36 [label="p.PropertyType = null", span="137-137", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.JsonPropertyDefaultValue()", file="ArraySliceFilter.cs"];
m0_37 [label="Assert.AreEqual(null, p.GetResolvedDefaultValue())", span="139-139", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.JsonPropertyDefaultValue()", file="ArraySliceFilter.cs"];
m0_38 [label="Assert.AreEqual(null, p.DefaultValue)", span="140-140", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.JsonPropertyDefaultValue()", file="ArraySliceFilter.cs"];
m0_39 [label="p.PropertyType = typeof(CompareOptions)", span="142-142", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.JsonPropertyDefaultValue()", file="ArraySliceFilter.cs"];
m0_44 [label="Entry Newtonsoft.Json.Serialization.JsonProperty.GetResolvedDefaultValue()", span="172-172", cluster="Newtonsoft.Json.Serialization.JsonProperty.GetResolvedDefaultValue()", file="ArraySliceFilter.cs"];
m0_28 [label="Assert.AreEqual(null, p.GetResolvedDefaultValue())", span="124-124", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.JsonPropertyDefaultValue()", file="ArraySliceFilter.cs"];
m0_29 [label="Entry System.Math.Max(int, int)", span="0-0", cluster="System.Math.Max(int, int)", file="ArraySliceFilter.cs"];
m0_32 [label="Entry int.ToString(System.IFormatProvider)", span="0-0", cluster="int.ToString(System.IFormatProvider)", file="ArraySliceFilter.cs"];
m0_33 [label="Entry string.FormatWith(System.IFormatProvider, object, object)", span="52-52", cluster="string.FormatWith(System.IFormatProvider, object, object)", file="ArraySliceFilter.cs"];
m0_34 [label="Entry object.GetType()", span="0-0", cluster="object.GetType()", file="ArraySliceFilter.cs"];
m0_35 [label="Entry string.FormatWith(System.IFormatProvider, object)", span="47-47", cluster="string.FormatWith(System.IFormatProvider, object)", file="ArraySliceFilter.cs"];
m0_40 [label="Newtonsoft.Json.Linq.JsonPath.ArraySliceFilter", span="", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.JsonPropertyDefaultValue()", file="ArraySliceFilter.cs"];
m0_41 [label="Assert.AreEqual(null, p.DefaultValue)", span="145-145", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.JsonPropertyDefaultValue()", file="ArraySliceFilter.cs"];
m0_42 [label="Exit Newtonsoft.Json.Tests.Serialization.ContractResolverTests.JsonPropertyDefaultValue()", span="120-120", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.JsonPropertyDefaultValue()", file="ArraySliceFilter.cs"];
m0_45 [label="Entry Unk.AreEqual", span="", cluster="Unk.AreEqual", file="ArraySliceFilter.cs"];
m0_328 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="ArraySliceFilter.cs"];
m0_46 [label="Entry System.DateTime.DateTime()", span="0-0", cluster="System.DateTime.DateTime()", file="ArraySliceFilter.cs"];
m0_230 [label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ResolveProperties_IgnoreStatic()", span="427-427", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ResolveProperties_IgnoreStatic()", file="ArraySliceFilter.cs"];
m0_231 [label="var resolver = new DefaultContractResolver()", span="429-429", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ResolveProperties_IgnoreStatic()", file="ArraySliceFilter.cs"];
m0_232 [label="var contract = (JsonObjectContract)resolver.ResolveContract(typeof(NumberFormatInfo))", span="430-430", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ResolveProperties_IgnoreStatic()", file="ArraySliceFilter.cs"];
m0_233 [label="Assert.IsFalse(contract.Properties.Any(c => c.PropertyName == ''InvariantInfo''))", span="432-432", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ResolveProperties_IgnoreStatic()", file="ArraySliceFilter.cs"];
m0_234 [label="Exit Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ResolveProperties_IgnoreStatic()", span="427-427", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ResolveProperties_IgnoreStatic()", file="ArraySliceFilter.cs"];
m0_142 [label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CustomDictionary<TKey, TValue>.CustomDictionary()", span="249-249", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CustomDictionary<TKey, TValue>.CustomDictionary()", file="ArraySliceFilter.cs"];
m0_127 [label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DictionaryInterfaceDefaultCreator()", span="254-254", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DictionaryInterfaceDefaultCreator()", file="ArraySliceFilter.cs"];
m0_128 [label="var resolver = new DefaultContractResolver()", span="256-256", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DictionaryInterfaceDefaultCreator()", file="ArraySliceFilter.cs"];
m0_129 [label="var contract = (JsonDictionaryContract)resolver.ResolveContract(typeof(IDictionary<string, int>))", span="257-257", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DictionaryInterfaceDefaultCreator()", file="ArraySliceFilter.cs"];
m0_133 [label="var d = JsonConvert.DeserializeObject<IDictionary<string, int>>(@''{key1:1,key2:2}'', new JsonSerializerSettings\r\n            {\r\n                ContractResolver = resolver\r\n            })", span="264-267", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DictionaryInterfaceDefaultCreator()", file="ArraySliceFilter.cs"];
m0_130 [label="Assert.IsTrue(contract.IsInstantiable)", span="259-259", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DictionaryInterfaceDefaultCreator()", file="ArraySliceFilter.cs"];
m0_131 [label="Assert.IsNotNull(contract.DefaultCreator)", span="260-260", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DictionaryInterfaceDefaultCreator()", file="ArraySliceFilter.cs"];
m0_132 [label="contract.DefaultCreator = () => new CustomDictionary<string, int>()", span="262-262", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DictionaryInterfaceDefaultCreator()", file="ArraySliceFilter.cs"];
m0_134 [label="Assert.AreEqual(typeof(CustomDictionary<string, int>), d.GetType())", span="269-269", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DictionaryInterfaceDefaultCreator()", file="ArraySliceFilter.cs"];
m0_135 [label="Assert.AreEqual(2, d.Count)", span="270-270", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DictionaryInterfaceDefaultCreator()", file="ArraySliceFilter.cs"];
m0_136 [label="Assert.AreEqual(1, d[''key1''])", span="271-271", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DictionaryInterfaceDefaultCreator()", file="ArraySliceFilter.cs"];
m0_137 [label="Assert.AreEqual(2, d[''key2''])", span="272-272", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DictionaryInterfaceDefaultCreator()", file="ArraySliceFilter.cs"];
m0_138 [label="Exit Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DictionaryInterfaceDefaultCreator()", span="254-254", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DictionaryInterfaceDefaultCreator()", file="ArraySliceFilter.cs"];
m0_174 [label="Entry Newtonsoft.Json.JsonTextReader.JsonTextReader(System.IO.TextReader)", span="78-78", cluster="Newtonsoft.Json.JsonTextReader.JsonTextReader(System.IO.TextReader)", file="ArraySliceFilter.cs"];
m0_326 [label="Entry Newtonsoft.Json.Serialization.ExtensionDataGetter.Invoke(object)", span="75-75", cluster="Newtonsoft.Json.Serialization.ExtensionDataGetter.Invoke(object)", file="ArraySliceFilter.cs"];
m0_185 [label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", span="355-355", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs"];
m0_186 [label="JsonProperty p = new JsonProperty { PropertyName = ''abc'' }", span="357-357", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs"];
m0_187 [label="Assert.IsTrue(p._skipPropertyNameEscape)", span="358-358", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs"];
m0_188 [label="p = new JsonProperty { PropertyName = ''123'' }", span="360-360", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs"];
m0_189 [label="Assert.IsTrue(p._skipPropertyNameEscape)", span="361-361", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs"];
m0_190 [label="p = new JsonProperty { PropertyName = ''._-'' }", span="363-363", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs"];
m0_191 [label="Assert.IsTrue(p._skipPropertyNameEscape)", span="364-364", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs"];
m0_192 [label="p = new JsonProperty { PropertyName = ''!@#'' }", span="366-366", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs"];
m0_193 [label="Assert.IsTrue(p._skipPropertyNameEscape)", span="367-367", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs"];
m0_194 [label="p = new JsonProperty { PropertyName = ''$%^'' }", span="369-369", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs"];
m0_195 [label="Assert.IsTrue(p._skipPropertyNameEscape)", span="370-370", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs"];
m0_196 [label="p = new JsonProperty { PropertyName = ''?*('' }", span="372-372", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs"];
m0_197 [label="Assert.IsTrue(p._skipPropertyNameEscape)", span="373-373", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs"];
m0_198 [label="p = new JsonProperty { PropertyName = '')_+'' }", span="375-375", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs"];
m0_199 [label="Assert.IsTrue(p._skipPropertyNameEscape)", span="376-376", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs"];
m0_200 [label="p = new JsonProperty { PropertyName = ''=:,'' }", span="378-378", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs"];
m0_201 [label="Assert.IsTrue(p._skipPropertyNameEscape)", span="379-379", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs"];
m0_202 [label="p = new JsonProperty { PropertyName = null }", span="381-381", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs"];
m0_203 [label="Assert.IsTrue(p._skipPropertyNameEscape)", span="382-382", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs"];
m0_204 [label="p = new JsonProperty { PropertyName = ''&'' }", span="384-384", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs"];
m0_205 [label="Assert.IsFalse(p._skipPropertyNameEscape)", span="385-385", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs"];
m0_206 [label="p = new JsonProperty { PropertyName = ''<'' }", span="387-387", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs"];
m0_207 [label="Assert.IsFalse(p._skipPropertyNameEscape)", span="388-388", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs"];
m0_208 [label="p = new JsonProperty { PropertyName = ''>'' }", span="390-390", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs"];
m0_209 [label="Assert.IsFalse(p._skipPropertyNameEscape)", span="391-391", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs"];
m0_210 [label="p = new JsonProperty { PropertyName = ''''' }", span="393-393", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs"];
m0_211 [label="Assert.IsFalse(p._skipPropertyNameEscape)", span="394-394", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs"];
m0_212 [label="p = new JsonProperty { PropertyName = @'''''''' }", span="396-396", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs"];
m0_213 [label="Assert.IsFalse(p._skipPropertyNameEscape)", span="397-397", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs"];
m0_214 [label="p = new JsonProperty { PropertyName = Environment.NewLine }", span="399-399", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs"];
m0_215 [label="Assert.IsFalse(p._skipPropertyNameEscape)", span="400-400", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs"];
m0_216 [label="p = new JsonProperty { PropertyName = ''\0'' }", span="402-402", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs"];
m0_217 [label="Assert.IsFalse(p._skipPropertyNameEscape)", span="403-403", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs"];
m0_218 [label="p = new JsonProperty { PropertyName = ''\n'' }", span="405-405", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs"];
m0_219 [label="Assert.IsFalse(p._skipPropertyNameEscape)", span="406-406", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs"];
m0_220 [label="p = new JsonProperty { PropertyName = ''\v'' }", span="408-408", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs"];
m0_221 [label="Assert.IsFalse(p._skipPropertyNameEscape)", span="409-409", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs"];
m0_222 [label="p = new JsonProperty { PropertyName = ''\u00B9'' }", span="411-411", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs"];
m0_223 [label="Assert.IsFalse(p._skipPropertyNameEscape)", span="412-412", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs"];
m0_224 [label="Exit Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", span="355-355", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs"];
m0_332 [label="Entry lambda expression", span="635-635", cluster="lambda expression", file="ArraySliceFilter.cs"];
m0_84 [label="JsonConvert.DeserializeObject<AbstractTestClass>(@''{Value:'Value!'}'', new JsonSerializerSettings\r\n            {\r\n                ContractResolver = resolver\r\n            })", span="180-183", cluster="lambda expression", file="ArraySliceFilter.cs"];
m0_83 [label="Entry lambda expression", span="180-183", cluster="lambda expression", file="ArraySliceFilter.cs"];
m0_85 [label="Exit lambda expression", span="180-183", cluster="lambda expression", file="ArraySliceFilter.cs"];
m0_86 [label="Entry lambda expression", span="185-185", cluster="lambda expression", file="ArraySliceFilter.cs"];
m0_87 [label="new AbstractImplementationTestClass()", span="185-185", cluster="lambda expression", file="ArraySliceFilter.cs"];
m0_88 [label="Exit lambda expression", span="185-185", cluster="lambda expression", file="ArraySliceFilter.cs"];
m0_104 [label="JsonConvert.DeserializeObject<AbstractListTestClass<int>>(@''[1,2]'', new JsonSerializerSettings\r\n            {\r\n                ContractResolver = resolver\r\n            })", span="205-208", cluster="lambda expression", file="ArraySliceFilter.cs"];
m0_103 [label="Entry lambda expression", span="205-208", cluster="lambda expression", file="ArraySliceFilter.cs"];
m0_105 [label="Exit lambda expression", span="205-208", cluster="lambda expression", file="ArraySliceFilter.cs"];
m0_106 [label="Entry lambda expression", span="210-210", cluster="lambda expression", file="ArraySliceFilter.cs"];
m0_107 [label="new AbstractImplementationListTestClass<int>()", span="210-210", cluster="lambda expression", file="ArraySliceFilter.cs"];
m0_108 [label="Exit lambda expression", span="210-210", cluster="lambda expression", file="ArraySliceFilter.cs"];
m0_123 [label="Entry lambda expression", span="235-235", cluster="lambda expression", file="ArraySliceFilter.cs"];
m0_124 [label="new CustomList<int>()", span="235-235", cluster="lambda expression", file="ArraySliceFilter.cs"];
m0_125 [label="Exit lambda expression", span="235-235", cluster="lambda expression", file="ArraySliceFilter.cs"];
m0_139 [label="Entry lambda expression", span="262-262", cluster="lambda expression", file="ArraySliceFilter.cs"];
m0_140 [label="new CustomDictionary<string, int>()", span="262-262", cluster="lambda expression", file="ArraySliceFilter.cs"];
m0_141 [label="Exit lambda expression", span="262-262", cluster="lambda expression", file="ArraySliceFilter.cs"];
m0_157 [label="JsonConvert.DeserializeObject<AbstractDictionaryTestClass<string, int>>(@''{key1:1,key2:2}'', new JsonSerializerSettings\r\n            {\r\n                ContractResolver = resolver\r\n            })", span="285-288", cluster="lambda expression", file="ArraySliceFilter.cs"];
m0_156 [label="Entry lambda expression", span="285-288", cluster="lambda expression", file="ArraySliceFilter.cs"];
m0_158 [label="Exit lambda expression", span="285-288", cluster="lambda expression", file="ArraySliceFilter.cs"];
m0_159 [label="Entry lambda expression", span="290-290", cluster="lambda expression", file="ArraySliceFilter.cs"];
m0_160 [label="new AbstractImplementationDictionaryTestClass<string, int>()", span="290-290", cluster="lambda expression", file="ArraySliceFilter.cs"];
m0_161 [label="Exit lambda expression", span="290-290", cluster="lambda expression", file="ArraySliceFilter.cs"];
m0_236 [label="Entry lambda expression", span="432-432", cluster="lambda expression", file="ArraySliceFilter.cs"];
m0_237 [label="c.PropertyName == ''InvariantInfo''", span="432-432", cluster="lambda expression", file="ArraySliceFilter.cs"];
m0_238 [label="Exit lambda expression", span="432-432", cluster="lambda expression", file="ArraySliceFilter.cs"];
m0_276 [label="return new MultipleParametrizedConstructorsJsonConstructor((string)args[0], (int)args[1]);", span="487-487", cluster="lambda expression", file="ArraySliceFilter.cs"];
m0_274 [label="Entry lambda expression", span="484-488", cluster="lambda expression", file="ArraySliceFilter.cs"];
m0_275 [label="ensureCustomCreatorCalled = true", span="486-486", cluster="lambda expression", file="ArraySliceFilter.cs"];
m0_277 [label="Exit lambda expression", span="484-488", cluster="lambda expression", file="ArraySliceFilter.cs"];
m0_329 [label="Entry lambda expression", span="635-635", cluster="lambda expression", file="ArraySliceFilter.cs"];
m0_330 [label="kv.Key", span="635-635", cluster="lambda expression", file="ArraySliceFilter.cs"];
m0_331 [label="Exit lambda expression", span="635-635", cluster="lambda expression", file="ArraySliceFilter.cs"];
m0_333 [label="kv.Value", span="635-635", cluster="lambda expression", file="ArraySliceFilter.cs"];
m0_334 [label="Exit lambda expression", span="635-635", cluster="lambda expression", file="ArraySliceFilter.cs"];
m0_110 [label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterfaceDefaultCreator()", span="227-227", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterfaceDefaultCreator()", file="ArraySliceFilter.cs"];
m0_111 [label="var resolver = new DefaultContractResolver()", span="229-229", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterfaceDefaultCreator()", file="ArraySliceFilter.cs"];
m0_112 [label="var contract = (JsonArrayContract)resolver.ResolveContract(typeof(IList<int>))", span="230-230", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterfaceDefaultCreator()", file="ArraySliceFilter.cs"];
m0_116 [label="var l = JsonConvert.DeserializeObject<IList<int>>(@''[1,2,3]'', new JsonSerializerSettings\r\n            {\r\n                ContractResolver = resolver\r\n            })", span="237-240", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterfaceDefaultCreator()", file="ArraySliceFilter.cs"];
m0_113 [label="Assert.IsTrue(contract.IsInstantiable)", span="232-232", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterfaceDefaultCreator()", file="ArraySliceFilter.cs"];
m0_114 [label="Assert.IsNotNull(contract.DefaultCreator)", span="233-233", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterfaceDefaultCreator()", file="ArraySliceFilter.cs"];
m0_115 [label="contract.DefaultCreator = () => new CustomList<int>()", span="235-235", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterfaceDefaultCreator()", file="ArraySliceFilter.cs"];
m0_117 [label="Assert.AreEqual(typeof(CustomList<int>), l.GetType())", span="242-242", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterfaceDefaultCreator()", file="ArraySliceFilter.cs"];
m0_118 [label="Assert.AreEqual(3, l.Count)", span="243-243", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterfaceDefaultCreator()", file="ArraySliceFilter.cs"];
m0_119 [label="Assert.AreEqual(1, l[0])", span="244-244", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterfaceDefaultCreator()", file="ArraySliceFilter.cs"];
m0_120 [label="Assert.AreEqual(2, l[1])", span="245-245", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterfaceDefaultCreator()", file="ArraySliceFilter.cs"];
m0_121 [label="Assert.AreEqual(3, l[2])", span="246-246", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterfaceDefaultCreator()", file="ArraySliceFilter.cs"];
m0_122 [label="Exit Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterfaceDefaultCreator()", span="227-227", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterfaceDefaultCreator()", file="ArraySliceFilter.cs"];
m0_67 [label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractTestClass()", span="171-171", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractTestClass()", file="ArraySliceFilter.cs"];
m0_68 [label="var resolver = new DefaultContractResolver()", span="173-173", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractTestClass()", file="ArraySliceFilter.cs"];
m0_69 [label="var contract = (JsonObjectContract)resolver.ResolveContract(typeof(AbstractTestClass))", span="174-174", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractTestClass()", file="ArraySliceFilter.cs"];
m0_73 [label="ExceptionAssert.Throws<JsonSerializationException>(() => JsonConvert.DeserializeObject<AbstractTestClass>(@''{Value:'Value!'}'', new JsonSerializerSettings\r\n            {\r\n                ContractResolver = resolver\r\n            }), ''Could not create an instance of type Newtonsoft.Json.Tests.Serialization.AbstractTestClass. Type is an interface or abstract class and cannot be instantiated. Path 'Value', line 1, position 7.'')", span="180-183", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractTestClass()", file="ArraySliceFilter.cs"];
m0_75 [label="var o = JsonConvert.DeserializeObject<AbstractTestClass>(@''{Value:'Value!'}'', new JsonSerializerSettings\r\n            {\r\n                ContractResolver = resolver\r\n            })", span="187-190", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractTestClass()", file="ArraySliceFilter.cs"];
m0_70 [label="Assert.IsFalse(contract.IsInstantiable)", span="176-176", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractTestClass()", file="ArraySliceFilter.cs"];
m0_71 [label="Assert.IsNull(contract.DefaultCreator)", span="177-177", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractTestClass()", file="ArraySliceFilter.cs"];
m0_72 [label="Assert.IsNull(contract.OverrideCreator)", span="178-178", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractTestClass()", file="ArraySliceFilter.cs"];
m0_74 [label="contract.DefaultCreator = () => new AbstractImplementationTestClass()", span="185-185", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractTestClass()", file="ArraySliceFilter.cs"];
m0_76 [label="Assert.AreEqual(''Value!'', o.Value)", span="192-192", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractTestClass()", file="ArraySliceFilter.cs"];
m0_77 [label="Exit Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractTestClass()", span="171-171", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractTestClass()", file="ArraySliceFilter.cs"];
m0_176 [label="Entry Newtonsoft.Json.JsonTextReader.Read()", span="366-366", cluster="Newtonsoft.Json.JsonTextReader.Read()", file="ArraySliceFilter.cs"];
m0_250 [label="Entry System.Type.GetConstructor(System.Type[])", span="0-0", cluster="System.Type.GetConstructor(System.Type[])", file="ArraySliceFilter.cs"];
m0_325 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="ArraySliceFilter.cs"];
m0_54 [label="Entry Newtonsoft.Json.Serialization.DefaultContractResolver.DefaultContractResolver()", span="195-195", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.DefaultContractResolver()", file="ArraySliceFilter.cs"];
m0_80 [label="Entry Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", span="350-350", cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", file="ArraySliceFilter.cs"];
m0_289 [label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SingleTypeWithMultipleContractResolvers()", span="526-526", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SingleTypeWithMultipleContractResolvers()", file="ArraySliceFilter.cs"];
m0_290 [label="Book book = new Book\r\n            {\r\n                BookName = ''The Gathering Storm'',\r\n                BookPrice = 16.19m,\r\n                AuthorName = ''Brandon Sanderson'',\r\n                AuthorAge = 34,\r\n                AuthorCountry = ''United States of America''\r\n            }", span="528-535", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SingleTypeWithMultipleContractResolvers()", file="ArraySliceFilter.cs"];
m0_291 [label="string startingWithA = JsonConvert.SerializeObject(book, Formatting.Indented,\r\n                new JsonSerializerSettings { ContractResolver = new DynamicContractResolver('A') })", span="537-538", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SingleTypeWithMultipleContractResolvers()", file="ArraySliceFilter.cs"];
m0_292 [label="string startingWithB = JsonConvert.SerializeObject(book, Formatting.Indented,\r\n                new JsonSerializerSettings { ContractResolver = new DynamicContractResolver('B') })", span="546-547", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SingleTypeWithMultipleContractResolvers()", file="ArraySliceFilter.cs"];
m0_293 [label="StringAssert.AreEqual(@''{\r\n  ''''AuthorName'''': ''''Brandon Sanderson'''',\r\n  ''''AuthorAge'''': 34,\r\n  ''''AuthorCountry'''': ''''United States of America''''\r\n}'', startingWithA)", span="554-558", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SingleTypeWithMultipleContractResolvers()", file="ArraySliceFilter.cs"];
m0_294 [label="StringAssert.AreEqual(@''{\r\n  ''''BookName'''': ''''The Gathering Storm'''',\r\n  ''''BookPrice'''': 16.19\r\n}'', startingWithB)", span="560-563", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SingleTypeWithMultipleContractResolvers()", file="ArraySliceFilter.cs"];
m0_295 [label="Exit Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SingleTypeWithMultipleContractResolvers()", span="526-526", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SingleTypeWithMultipleContractResolvers()", file="ArraySliceFilter.cs"];
m0_172 [label="Entry Newtonsoft.Json.Tests.Serialization.EscapedPropertiesContractResolver.EscapedPropertiesContractResolver()", span="75-75", cluster="Newtonsoft.Json.Tests.Serialization.EscapedPropertiesContractResolver.EscapedPropertiesContractResolver()", file="ArraySliceFilter.cs"];
m0_173 [label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.JsonSerializerSettings)", span="585-585", cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.JsonSerializerSettings)", file="ArraySliceFilter.cs"];
m0_309 [label="Entry Newtonsoft.Json.Tests.TestObjects.StructTest.StructTest()", span="27-27", cluster="Newtonsoft.Json.Tests.TestObjects.StructTest.StructTest()", file="ArraySliceFilter.cs"];
m0_162 [label="Entry Newtonsoft.Json.Tests.Serialization.AbstractImplementationDictionaryTestClass<TKey, TValue>.AbstractImplementationDictionaryTestClass()", span="9826-9826", cluster="Newtonsoft.Json.Tests.Serialization.AbstractImplementationDictionaryTestClass<TKey, TValue>.AbstractImplementationDictionaryTestClass()", file="ArraySliceFilter.cs"];
m0_278 [label="Entry Newtonsoft.Json.Tests.Serialization.MultipleParametrizedConstructorsJsonConstructor.MultipleParametrizedConstructorsJsonConstructor(string, int)", span="9861-9861", cluster="Newtonsoft.Json.Tests.Serialization.MultipleParametrizedConstructorsJsonConstructor.MultipleParametrizedConstructorsJsonConstructor(string, int)", file="ArraySliceFilter.cs"];
m0_66 [label="Entry object.GetType()", span="0-0", cluster="object.GetType()", file="ArraySliceFilter.cs"];
m0_297 [label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeCompilerGeneratedMembers()", span="569-569", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeCompilerGeneratedMembers()", file="ArraySliceFilter.cs"];
m0_298 [label="StructTest structTest = new StructTest\r\n            {\r\n                IntField = 1,\r\n                IntProperty = 2,\r\n                StringField = ''Field'',\r\n                StringProperty = ''Property''\r\n            }", span="571-577", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeCompilerGeneratedMembers()", file="ArraySliceFilter.cs"];
m0_299 [label="DefaultContractResolver skipCompilerGeneratedResolver = new DefaultContractResolver\r\n            {\r\n                DefaultMembersSearchFlags = BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public\r\n            }", span="579-582", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeCompilerGeneratedMembers()", file="ArraySliceFilter.cs"];
m0_300 [label="string skipCompilerGeneratedJson = JsonConvert.SerializeObject(structTest, Formatting.Indented,\r\n                new JsonSerializerSettings { ContractResolver = skipCompilerGeneratedResolver })", span="584-585", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeCompilerGeneratedMembers()", file="ArraySliceFilter.cs"];
m0_303 [label="string includeCompilerGeneratedJson = JsonConvert.SerializeObject(structTest, Formatting.Indented,\r\n                new JsonSerializerSettings { ContractResolver = includeCompilerGeneratedResolver })", span="600-601", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeCompilerGeneratedMembers()", file="ArraySliceFilter.cs"];
m0_301 [label="StringAssert.AreEqual(@''{\r\n  ''''StringField'''': ''''Field'''',\r\n  ''''IntField'''': 1,\r\n  ''''StringProperty'''': ''''Property'''',\r\n  ''''IntProperty'''': 2\r\n}'', skipCompilerGeneratedJson)", span="587-592", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeCompilerGeneratedMembers()", file="ArraySliceFilter.cs"];
m0_302 [label="DefaultContractResolver includeCompilerGeneratedResolver = new DefaultContractResolver\r\n            {\r\n                DefaultMembersSearchFlags = BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public,\r\n                SerializeCompilerGeneratedMembers = true\r\n            }", span="594-598", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeCompilerGeneratedMembers()", file="ArraySliceFilter.cs"];
m0_304 [label="JObject o = JObject.Parse(includeCompilerGeneratedJson)", span="603-603", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeCompilerGeneratedMembers()", file="ArraySliceFilter.cs"];
m0_305 [label="Console.WriteLine(includeCompilerGeneratedJson)", span="605-605", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeCompilerGeneratedMembers()", file="ArraySliceFilter.cs"];
m0_306 [label="Assert.AreEqual(''Property'', (string)o[''<StringProperty>k__BackingField''])", span="607-607", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeCompilerGeneratedMembers()", file="ArraySliceFilter.cs"];
m0_307 [label="Assert.AreEqual(2, (int)o[''<IntProperty>k__BackingField''])", span="608-608", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeCompilerGeneratedMembers()", file="ArraySliceFilter.cs"];
m0_308 [label="Exit Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeCompilerGeneratedMembers()", span="569-569", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeCompilerGeneratedMembers()", file="ArraySliceFilter.cs"];
m0_89 [label="Entry Newtonsoft.Json.Tests.Serialization.AbstractImplementationTestClass.AbstractImplementationTestClass()", span="9810-9810", cluster="Newtonsoft.Json.Tests.Serialization.AbstractImplementationTestClass.AbstractImplementationTestClass()", file="ArraySliceFilter.cs"];
m0_285 [label="Entry System.DateTime.DateTime(int, int, int, int, int, int, System.DateTimeKind)", span="0-0", cluster="System.DateTime.DateTime(int, int, int, int, int, int, System.DateTimeKind)", file="ArraySliceFilter.cs"];
m0_239 [label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ParameterizedCreator()", span="436-436", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ParameterizedCreator()", file="ArraySliceFilter.cs"];
m0_240 [label="var resolver = new DefaultContractResolver()", span="438-438", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ParameterizedCreator()", file="ArraySliceFilter.cs"];
m0_241 [label="var contract = (JsonObjectContract)resolver.ResolveContract(typeof(PublicParameterizedConstructorWithPropertyNameConflictWithAttribute))", span="439-439", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ParameterizedCreator()", file="ArraySliceFilter.cs"];
m0_242 [label="Assert.IsNull(contract.DefaultCreator)", span="441-441", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ParameterizedCreator()", file="ArraySliceFilter.cs"];
m0_243 [label="Assert.IsNotNull(contract.ParameterizedCreator)", span="442-442", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ParameterizedCreator()", file="ArraySliceFilter.cs"];
m0_244 [label="Assert.AreEqual(contract.ParametrizedConstructor, typeof(PublicParameterizedConstructorWithPropertyNameConflictWithAttribute).GetConstructor(new[] { typeof(string) }))", span="444-444", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ParameterizedCreator()", file="ArraySliceFilter.cs"];
m0_245 [label="Assert.AreEqual(1, contract.CreatorParameters.Count)", span="446-446", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ParameterizedCreator()", file="ArraySliceFilter.cs"];
m0_246 [label="Assert.AreEqual(''name'', contract.CreatorParameters[0].PropertyName)", span="447-447", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ParameterizedCreator()", file="ArraySliceFilter.cs"];
m0_247 [label="contract.ParametrizedConstructor = null", span="450-450", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ParameterizedCreator()", file="ArraySliceFilter.cs"];
m0_248 [label="Assert.IsNull(contract.ParameterizedCreator)", span="452-452", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ParameterizedCreator()", file="ArraySliceFilter.cs"];
m0_249 [label="Exit Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ParameterizedCreator()", span="436-436", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ParameterizedCreator()", file="ArraySliceFilter.cs"];
m0_55 [label="Entry Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContract(System.Type)", span="239-239", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContract(System.Type)", file="ArraySliceFilter.cs"];
m0_284 [label="Entry Newtonsoft.Json.Tests.TestObjects.Employee.Employee()", span="63-63", cluster="Newtonsoft.Json.Tests.TestObjects.Employee.Employee()", file="ArraySliceFilter.cs"];
m0_263 [label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CustomOverrideCreator()", span="477-477", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CustomOverrideCreator()", file="ArraySliceFilter.cs"];
m0_264 [label="var resolver = new DefaultContractResolver()", span="479-479", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CustomOverrideCreator()", file="ArraySliceFilter.cs"];
m0_265 [label="var contract = (JsonObjectContract)resolver.ResolveContract(typeof(MultipleParametrizedConstructorsJsonConstructor))", span="480-480", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CustomOverrideCreator()", file="ArraySliceFilter.cs"];
m0_269 [label="var o = JsonConvert.DeserializeObject<MultipleParametrizedConstructorsJsonConstructor>(''{Value:'value!', Age:1}'', new JsonSerializerSettings\r\n            {\r\n                ContractResolver = resolver\r\n            })", span="493-496", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CustomOverrideCreator()", file="ArraySliceFilter.cs"];
m0_266 [label="bool ensureCustomCreatorCalled = false", span="482-482", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CustomOverrideCreator()", file="ArraySliceFilter.cs"];
m0_267 [label="contract.OverrideCreator = args =>\r\n            {\r\n                ensureCustomCreatorCalled = true;\r\n                return new MultipleParametrizedConstructorsJsonConstructor((string)args[0], (int)args[1]);\r\n            }", span="484-488", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CustomOverrideCreator()", file="ArraySliceFilter.cs"];
m0_268 [label="Assert.IsNull(contract.OverrideConstructor)", span="490-490", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CustomOverrideCreator()", file="ArraySliceFilter.cs"];
m0_270 [label="Assert.AreEqual(''value!'', o.Value)", span="498-498", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CustomOverrideCreator()", file="ArraySliceFilter.cs"];
m0_271 [label="Assert.AreEqual(1, o.Age)", span="499-499", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CustomOverrideCreator()", file="ArraySliceFilter.cs"];
m0_272 [label="Assert.IsTrue(ensureCustomCreatorCalled)", span="500-500", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CustomOverrideCreator()", file="ArraySliceFilter.cs"];
m0_273 [label="Exit Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CustomOverrideCreator()", span="477-477", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CustomOverrideCreator()", file="ArraySliceFilter.cs"];
m0_288 [label="Entry Newtonsoft.Json.Tests.StringAssert.AreEqual(string, string)", span="321-321", cluster="Newtonsoft.Json.Tests.StringAssert.AreEqual(string, string)", file="ArraySliceFilter.cs"];
m0_109 [label="Entry Newtonsoft.Json.Tests.Serialization.AbstractImplementationListTestClass<T>.AbstractImplementationListTestClass()", span="9818-9818", cluster="Newtonsoft.Json.Tests.Serialization.AbstractImplementationListTestClass<T>.AbstractImplementationListTestClass()", file="ArraySliceFilter.cs"];
m0_312 [label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ExtensionDataGetterCanBeIteratedMultipleTimes()", span="620-620", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ExtensionDataGetterCanBeIteratedMultipleTimes()", file="ArraySliceFilter.cs"];
m0_313 [label="DefaultContractResolver resolver = new DefaultContractResolver()", span="622-622", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ExtensionDataGetterCanBeIteratedMultipleTimes()", file="ArraySliceFilter.cs"];
m0_314 [label="JsonObjectContract contract = (JsonObjectContract)resolver.ResolveContract(typeof(ClassWithExtensionData))", span="623-623", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ExtensionDataGetterCanBeIteratedMultipleTimes()", file="ArraySliceFilter.cs"];
m0_315 [label="ClassWithExtensionData myClass = new ClassWithExtensionData\r\n            {\r\n                Data = new Dictionary<string, object>\r\n                {\r\n                    { ''SomeField'', ''Field'' },\r\n                }\r\n            }", span="625-631", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ExtensionDataGetterCanBeIteratedMultipleTimes()", file="ArraySliceFilter.cs"];
m0_316 [label="ExtensionDataGetter getter = contract.ExtensionDataGetter", span="633-633", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ExtensionDataGetterCanBeIteratedMultipleTimes()", file="ArraySliceFilter.cs"];
m0_317 [label="IEnumerable<KeyValuePair<object, object>> dictionaryData = getter(myClass).ToDictionary(kv => kv.Key, kv => kv.Value)", span="635-635", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ExtensionDataGetterCanBeIteratedMultipleTimes()", file="ArraySliceFilter.cs"];
m0_320 [label="IEnumerable<KeyValuePair<object, object>> extensionData = getter(myClass)", span="639-639", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ExtensionDataGetterCanBeIteratedMultipleTimes()", file="ArraySliceFilter.cs"];
m0_318 [label="Assert.IsTrue(dictionaryData.Any())", span="636-636", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ExtensionDataGetterCanBeIteratedMultipleTimes()", file="ArraySliceFilter.cs"];
m0_319 [label="Assert.IsTrue(dictionaryData.Any())", span="637-637", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ExtensionDataGetterCanBeIteratedMultipleTimes()", file="ArraySliceFilter.cs"];
m0_321 [label="Assert.IsTrue(extensionData.Any())", span="640-640", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ExtensionDataGetterCanBeIteratedMultipleTimes()", file="ArraySliceFilter.cs"];
m0_322 [label="Assert.IsTrue(extensionData.Any())", span="641-641", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ExtensionDataGetterCanBeIteratedMultipleTimes()", file="ArraySliceFilter.cs"];
m0_323 [label="Exit Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ExtensionDataGetterCanBeIteratedMultipleTimes()", span="620-620", cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ExtensionDataGetterCanBeIteratedMultipleTimes()", file="ArraySliceFilter.cs"];
m0_327 [label="Entry Unk.ToDictionary", span="", cluster="Unk.ToDictionary", file="ArraySliceFilter.cs"];
m0_296 [label="Entry Newtonsoft.Json.Tests.Serialization.Book.Book()", span="86-86", cluster="Newtonsoft.Json.Tests.Serialization.Book.Book()", file="ArraySliceFilter.cs"];
m0_57 [label="Entry Unk.IsNotNull", span="", cluster="Unk.IsNotNull", file="ArraySliceFilter.cs"];
m0_81 [label="Entry Newtonsoft.Json.JsonSerializerSettings.JsonSerializerSettings()", span="433-433", cluster="Newtonsoft.Json.JsonSerializerSettings.JsonSerializerSettings()", file="ArraySliceFilter.cs"];
m0_335 [label="Newtonsoft.Json.Tests.Serialization.DynamicContractResolver", span="", file="ArraySliceFilter.cs"];
m0_336 [label="Newtonsoft.Json.Tests.Serialization.EscapedPropertiesContractResolver", span="", file="ArraySliceFilter.cs"];
m0_337 [label="Newtonsoft.Json.Tests.Serialization.IPersonContractResolver", span="", file="ArraySliceFilter.cs"];
m0_338 [label=resolver, span="", file="ArraySliceFilter.cs"];
m0_339 [label=resolver, span="", file="ArraySliceFilter.cs"];
m0_340 [label=resolver, span="", file="ArraySliceFilter.cs"];
m1_273 [label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.AddArrayToSelf()", span="450-450", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddArrayToSelf()", file="BinaryConverter.cs"];
m1_274 [label="JArray a = new JArray(1, 2)", span="452-452", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddArrayToSelf()", file="BinaryConverter.cs"];
m1_275 [label="a.Add(a)", span="453-453", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddArrayToSelf()", file="BinaryConverter.cs"];
m1_276 [label="Assert.AreEqual(3, a.Count)", span="455-455", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddArrayToSelf()", file="BinaryConverter.cs"];
m1_277 [label="Assert.AreEqual(1, (int)a[0])", span="456-456", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddArrayToSelf()", file="BinaryConverter.cs"];
m1_278 [label="Assert.AreEqual(2, (int)a[1])", span="457-457", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddArrayToSelf()", file="BinaryConverter.cs"];
m1_279 [label="Assert.AreNotSame(a, a[2])", span="458-458", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddArrayToSelf()", file="BinaryConverter.cs"];
m1_280 [label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.AddArrayToSelf()", span="450-450", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddArrayToSelf()", file="BinaryConverter.cs"];
m1_207 [label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.InsertOutOfRangeIndexShouldThrow()", span="327-327", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertOutOfRangeIndexShouldThrow()", file="BinaryConverter.cs"];
m1_208 [label="JArray j = new JArray()", span="329-329", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertOutOfRangeIndexShouldThrow()", file="BinaryConverter.cs"];
m1_209 [label="ExceptionAssert.Throws<ArgumentOutOfRangeException>(() => { j.Insert(2, new JValue(1)); }, @''Index must be within the bounds of the List.\r\nParameter name: index'')", span="331-332", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertOutOfRangeIndexShouldThrow()", file="BinaryConverter.cs"];
m1_210 [label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.InsertOutOfRangeIndexShouldThrow()", span="327-327", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertOutOfRangeIndexShouldThrow()", file="BinaryConverter.cs"];
m1_357 [label="Entry Newtonsoft.Json.IJsonLineInfo.HasLineInfo()", span="38-38", cluster="Newtonsoft.Json.IJsonLineInfo.HasLineInfo()", file="BinaryConverter.cs"];
m1_16 [label="Exit Newtonsoft.Json.Converters.BinaryConverter.GetByteArray(object)", span="64-64", cluster="Newtonsoft.Json.Converters.BinaryConverter.GetByteArray(object)", file="BinaryConverter.cs"];
m1_17 [label="JArray a = new JArray { 1 }", span="71-71", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Clear()", file="BinaryConverter.cs"];
m1_18 [label="Entry System.Type.AssignableToTypeName(string)", span="548-548", cluster="System.Type.AssignableToTypeName(string)", file="BinaryConverter.cs"];
m1_19 [label="Entry Newtonsoft.Json.Converters.BinaryConverter.EnsureReflectionObject(System.Type)", span="82-82", cluster="Newtonsoft.Json.Converters.BinaryConverter.EnsureReflectionObject(System.Type)", file="BinaryConverter.cs"];
m1_20 [label="Entry Newtonsoft.Json.Utilities.ReflectionObject.GetValue(object, string)", span="57-57", cluster="Newtonsoft.Json.Utilities.ReflectionObject.GetValue(object, string)", file="BinaryConverter.cs"];
m1_21 [label="Entry Newtonsoft.Json.JsonSerializationException.JsonSerializationException(string)", span="52-52", cluster="Newtonsoft.Json.JsonSerializationException.JsonSerializationException(string)", file="BinaryConverter.cs"];
m1_167 [label="Entry Newtonsoft.Json.Linq.JArray.Insert(int, Newtonsoft.Json.Linq.JToken)", span="311-311", cluster="Newtonsoft.Json.Linq.JArray.Insert(int, Newtonsoft.Json.Linq.JToken)", file="BinaryConverter.cs"];
m1_51 [label="Assert.AreEqual(1, (int)a[1])", span="115-115", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.GenericCollectionCopyTo()", file="BinaryConverter.cs"];
m1_195 [label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.InsertNull()", span="309-309", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertNull()", file="BinaryConverter.cs"];
m1_196 [label="JArray j = new JArray()", span="311-311", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertNull()", file="BinaryConverter.cs"];
m1_197 [label="j.Insert(0, null)", span="312-312", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertNull()", file="BinaryConverter.cs"];
m1_198 [label="Assert.AreEqual(null, ((JValue)j[0]).Value)", span="314-314", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertNull()", file="BinaryConverter.cs"];
m1_199 [label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.InsertNull()", span="309-309", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertNull()", file="BinaryConverter.cs"];
m1_246 [label="Entry Newtonsoft.Json.Linq.JObject.JObject(object)", span="114-114", cluster="Newtonsoft.Json.Linq.JObject.JObject(object)", file="BinaryConverter.cs"];
m1_71 [label="Exit lambda expression", span="138-138", cluster="lambda expression", file="BinaryConverter.cs"];
m1_70 [label="((ICollection<JToken>)j).CopyTo(new JToken[1], -1)", span="138-138", cluster="lambda expression", file="BinaryConverter.cs"];
m1_65 [label="throw JsonSerializationException.Create(reader, ''Unexpected token when reading bytes: {0}''.FormatWith(CultureInfo.InvariantCulture, reader.TokenType));", span="167-167", cluster="Newtonsoft.Json.Converters.BinaryConverter.ReadByteArray(Newtonsoft.Json.JsonReader)", file="BinaryConverter.cs"];
m1_66 [label="throw JsonSerializationException.Create(reader, ''Unexpected end when reading bytes.'');", span="171-171", cluster="Newtonsoft.Json.Converters.BinaryConverter.ReadByteArray(Newtonsoft.Json.JsonReader)", file="BinaryConverter.cs"];
m1_67 [label="Exit Newtonsoft.Json.Converters.BinaryConverter.ReadByteArray(Newtonsoft.Json.JsonReader)", span="150-150", cluster="Newtonsoft.Json.Converters.BinaryConverter.ReadByteArray(Newtonsoft.Json.JsonReader)", file="BinaryConverter.cs"];
m1_68 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="BinaryConverter.cs"];
m1_22 [label="Entry string.FormatWith(System.IFormatProvider, object)", span="47-47", cluster="string.FormatWith(System.IFormatProvider, object)", file="BinaryConverter.cs"];
m1_54 [label="Assert.AreEqual(null, a[4])", span="121-121", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.GenericCollectionCopyTo()", file="BinaryConverter.cs"];
m1_138 [label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAtOutOfRangeIndexShouldError()", span="230-230", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAtOutOfRangeIndexShouldError()", file="BinaryConverter.cs"];
m1_139 [label="JArray j = new JArray()", span="232-232", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAtOutOfRangeIndexShouldError()", file="BinaryConverter.cs"];
m1_140 [label="ExceptionAssert.Throws<ArgumentOutOfRangeException>(() => { j.RemoveAt(0); }, @''Index is equal to or greater than Count.\r\nParameter name: index'')", span="234-235", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAtOutOfRangeIndexShouldError()", file="BinaryConverter.cs"];
m1_141 [label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAtOutOfRangeIndexShouldError()", span="230-230", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAtOutOfRangeIndexShouldError()", file="BinaryConverter.cs"];
m1_29 [label="Type t = (ReflectionUtils.IsNullableType(objectType))\r\n                ? Nullable.GetUnderlyingType(objectType)\r\n                : objectType", span="101-103", cluster="Newtonsoft.Json.Converters.BinaryConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="BinaryConverter.cs"];
m1_9 [label="Entry Newtonsoft.Json.JsonWriter.WriteValue(byte[])", span="1363-1363", cluster="Newtonsoft.Json.JsonWriter.WriteValue(byte[])", file="BinaryConverter.cs"];
m1_8 [label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveSpecificAndRemoveSelf()", span="49-49", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveSpecificAndRemoveSelf()", file="BinaryConverter.cs"];
m1_15 [label="Entry Unk.AreEqual", span="", cluster="Unk.AreEqual", file="BinaryConverter.cs"];
m1_13 [label="Entry Unk.IsTrue", span="", cluster="Unk.IsTrue", file="BinaryConverter.cs"];
m1_11 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Last<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Last<TSource>()", file="BinaryConverter.cs"];
m1_12 [label="Entry Newtonsoft.Json.Linq.JArray.Remove(Newtonsoft.Json.Linq.JToken)", span="399-399", cluster="Newtonsoft.Json.Linq.JArray.Remove(Newtonsoft.Json.Linq.JToken)", file="BinaryConverter.cs"];
m1_10 [label="Entry Newtonsoft.Json.Linq.JArray.JArray(params object[])", span="82-82", cluster="Newtonsoft.Json.Linq.JArray.JArray(params object[])", file="BinaryConverter.cs"];
m1_14 [label="Entry Newtonsoft.Json.Linq.JToken.Remove()", span="385-385", cluster="Newtonsoft.Json.Linq.JToken.Remove()", file="BinaryConverter.cs"];
m1_270 [label="Entry Newtonsoft.Json.Linq.JArray.JArray(object)", span="91-91", cluster="Newtonsoft.Json.Linq.JArray.JArray(object)", file="BinaryConverter.cs"];
m1_79 [label="Exit Newtonsoft.Json.Converters.BinaryConverter.CanConvert(System.Type)", span="181-181", cluster="Newtonsoft.Json.Converters.BinaryConverter.CanConvert(System.Type)", file="BinaryConverter.cs"];
m1_80 [label="Newtonsoft.Json.Converters.BinaryConverter", span="", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.GenericCollectionCopyToInsufficientArrayCapacity()", file="BinaryConverter.cs"];
m1_81 [label="j.Add(new JValue(1))", span="154-154", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.GenericCollectionCopyToInsufficientArrayCapacity()", file="BinaryConverter.cs"];
m1_82 [label="j.Add(new JValue(2))", span="155-155", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.GenericCollectionCopyToInsufficientArrayCapacity()", file="BinaryConverter.cs"];
m1_83 [label="j.Add(new JValue(3))", span="156-156", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.GenericCollectionCopyToInsufficientArrayCapacity()", file="BinaryConverter.cs"];
m1_84 [label="ExceptionAssert.Throws<ArgumentException>(() => { ((ICollection<JToken>)j).CopyTo(new JToken[3], 1); }, @''The number of elements in the source JObject is greater than the available space from arrayIndex to the end of the destination array.'')", span="158-158", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.GenericCollectionCopyToInsufficientArrayCapacity()", file="BinaryConverter.cs"];
m1_85 [label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.GenericCollectionCopyToInsufficientArrayCapacity()", span="151-151", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.GenericCollectionCopyToInsufficientArrayCapacity()", file="BinaryConverter.cs"];
m1_324 [label="Entry lambda expression", span="523-523", cluster="lambda expression", file="BinaryConverter.cs"];
m1_63 [label="return byteList.ToArray();", span="162-162", cluster="Newtonsoft.Json.Converters.BinaryConverter.ReadByteArray(Newtonsoft.Json.JsonReader)", file="BinaryConverter.cs"];
m1_62 [label="JsonToken.EndArray", span="161-161", cluster="Newtonsoft.Json.Converters.BinaryConverter.ReadByteArray(Newtonsoft.Json.JsonReader)", file="BinaryConverter.cs"];
m1_64 [label="JsonToken.Comment", span="163-163", cluster="Newtonsoft.Json.Converters.BinaryConverter.ReadByteArray(Newtonsoft.Json.JsonReader)", file="BinaryConverter.cs"];
m1_69 [label="Entry Newtonsoft.Json.JsonReader.Read()", span="409-409", cluster="Newtonsoft.Json.JsonReader.Read()", file="BinaryConverter.cs"];
m1_77 [label="return true;", span="192-192", cluster="Newtonsoft.Json.Converters.BinaryConverter.CanConvert(System.Type)", file="BinaryConverter.cs"];
m1_76 [label="objectType == typeof(SqlBinary) || objectType == typeof(SqlBinary?)", span="190-190", cluster="Newtonsoft.Json.Converters.BinaryConverter.CanConvert(System.Type)", file="BinaryConverter.cs"];
m1_78 [label="return false;", span="195-195", cluster="Newtonsoft.Json.Converters.BinaryConverter.CanConvert(System.Type)", file="BinaryConverter.cs"];
m1_87 [label="((ICollection<JToken>)j).CopyTo(new JToken[3], 1)", span="158-158", cluster="lambda expression", file="BinaryConverter.cs"];
m1_86 [label="Entry lambda expression", span="158-158", cluster="lambda expression", file="BinaryConverter.cs"];
m1_88 [label="Exit lambda expression", span="158-158", cluster="lambda expression", file="BinaryConverter.cs"];
m1_143 [label="j.RemoveAt(0)", span="234-234", cluster="lambda expression", file="BinaryConverter.cs"];
m1_142 [label="Entry lambda expression", span="234-234", cluster="lambda expression", file="BinaryConverter.cs"];
m1_144 [label="Exit lambda expression", span="234-234", cluster="lambda expression", file="BinaryConverter.cs"];
m1_150 [label="j.RemoveAt(-1)", span="243-243", cluster="lambda expression", file="BinaryConverter.cs"];
m1_149 [label="Entry lambda expression", span="243-243", cluster="lambda expression", file="BinaryConverter.cs"];
m1_151 [label="Exit lambda expression", span="243-243", cluster="lambda expression", file="BinaryConverter.cs"];
m1_205 [label="j.Insert(-1, new JValue(1))", span="322-322", cluster="lambda expression", file="BinaryConverter.cs"];
m1_204 [label="Entry lambda expression", span="322-322", cluster="lambda expression", file="BinaryConverter.cs"];
m1_206 [label="Exit lambda expression", span="322-322", cluster="lambda expression", file="BinaryConverter.cs"];
m1_212 [label="j.Insert(2, new JValue(1))", span="331-331", cluster="lambda expression", file="BinaryConverter.cs"];
m1_211 [label="Entry lambda expression", span="331-331", cluster="lambda expression", file="BinaryConverter.cs"];
m1_213 [label="Exit lambda expression", span="331-331", cluster="lambda expression", file="BinaryConverter.cs"];
m1_234 [label="JArray.Parse(json)", span="362-362", cluster="lambda expression", file="BinaryConverter.cs"];
m1_233 [label="Entry lambda expression", span="362-362", cluster="lambda expression", file="BinaryConverter.cs"];
m1_235 [label="Exit lambda expression", span="362-362", cluster="lambda expression", file="BinaryConverter.cs"];
m1_285 [label="Entry lambda expression", span="464-468", cluster="lambda expression", file="BinaryConverter.cs"];
m1_286 [label="JArray a = new JArray()", span="466-466", cluster="lambda expression", file="BinaryConverter.cs"];
m1_287 [label="a[''badvalue''] = new JValue(3)", span="467-467", cluster="lambda expression", file="BinaryConverter.cs"];
m1_288 [label="Exit lambda expression", span="464-468", cluster="lambda expression", file="BinaryConverter.cs"];
m1_309 [label="Entry lambda expression", span="499-499", cluster="lambda expression", file="BinaryConverter.cs"];
m1_310 [label="JArray.Parse(''[1'')", span="499-499", cluster="lambda expression", file="BinaryConverter.cs"];
m1_311 [label="Exit lambda expression", span="499-499", cluster="lambda expression", file="BinaryConverter.cs"];
m1_325 [label="JArray.Parse(json)", span="523-523", cluster="lambda expression", file="BinaryConverter.cs"];
m1_326 [label="Exit lambda expression", span="523-523", cluster="lambda expression", file="BinaryConverter.cs"];
m1_89 [label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.Remove()", span="162-162", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Remove()", file="BinaryConverter.cs"];
m1_90 [label="JValue v = new JValue(1)", span="164-164", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Remove()", file="BinaryConverter.cs"];
m1_91 [label="JArray j = new JArray()", span="165-165", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Remove()", file="BinaryConverter.cs"];
m1_92 [label="j.Add(v)", span="166-166", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Remove()", file="BinaryConverter.cs"];
m1_96 [label="Assert.AreEqual(true, j.Remove(v))", span="172-172", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Remove()", file="BinaryConverter.cs"];
m1_97 [label="Assert.AreEqual(false, j.Remove(v))", span="173-173", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Remove()", file="BinaryConverter.cs"];
m1_93 [label="Assert.AreEqual(1, j.Count)", span="168-168", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Remove()", file="BinaryConverter.cs"];
m1_94 [label="Assert.AreEqual(false, j.Remove(new JValue(1)))", span="170-170", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Remove()", file="BinaryConverter.cs"];
m1_95 [label="Assert.AreEqual(false, j.Remove(null))", span="171-171", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Remove()", file="BinaryConverter.cs"];
m1_98 [label="Assert.AreEqual(0, j.Count)", span="175-175", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Remove()", file="BinaryConverter.cs"];
m1_99 [label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.Remove()", span="162-162", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Remove()", file="BinaryConverter.cs"];
m1_50 [label="Assert.AreEqual(null, a[0])", span="113-113", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.GenericCollectionCopyTo()", file="BinaryConverter.cs"];
m1_272 [label="Entry Unk.IsNotNull", span="", cluster="Unk.IsNotNull", file="BinaryConverter.cs"];
m1_271 [label="Entry System.ComponentModel.ITypedList.GetItemProperties(System.ComponentModel.PropertyDescriptor[])", span="0-0", cluster="System.ComponentModel.ITypedList.GetItemProperties(System.ComponentModel.PropertyDescriptor[])", file="BinaryConverter.cs"];
m1_27 [label="Assert.IsFalse(ReferenceEquals(a[0], a))", span="84-84", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddToSelf()", file="BinaryConverter.cs"];
m1_349 [label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_LineInfo()", span="559-559", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_LineInfo()", file="BinaryConverter.cs"];
m1_350 [label="string json = ''[1,2,3]''", span="561-561", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_LineInfo()", file="BinaryConverter.cs"];
m1_351 [label="JArray a = JArray.Parse(json, new JsonLoadSettings\r\n            {\r\n                LineInfoHandling = LineInfoHandling.Load\r\n            })", span="563-566", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_LineInfo()", file="BinaryConverter.cs"];
m1_352 [label="Assert.AreEqual(false, ((IJsonLineInfo)a).HasLineInfo())", span="568-568", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_LineInfo()", file="BinaryConverter.cs"];
m1_353 [label="Assert.AreEqual(false, ((IJsonLineInfo)a[0]).HasLineInfo())", span="569-569", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_LineInfo()", file="BinaryConverter.cs"];
m1_354 [label="Assert.AreEqual(false, ((IJsonLineInfo)a[1]).HasLineInfo())", span="570-570", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_LineInfo()", file="BinaryConverter.cs"];
m1_355 [label="Assert.AreEqual(false, ((IJsonLineInfo)a[2]).HasLineInfo())", span="571-571", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_LineInfo()", file="BinaryConverter.cs"];
m1_356 [label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_LineInfo()", span="559-559", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_LineInfo()", file="BinaryConverter.cs"];
m1_214 [label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.Item()", span="336-336", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Item()", file="BinaryConverter.cs"];
m1_215 [label="JValue v1 = new JValue(1)", span="338-338", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Item()", file="BinaryConverter.cs"];
m1_216 [label="JValue v2 = new JValue(2)", span="339-339", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Item()", file="BinaryConverter.cs"];
m1_220 [label="j.Add(v1)", span="345-345", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Item()", file="BinaryConverter.cs"];
m1_217 [label="JValue v3 = new JValue(3)", span="340-340", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Item()", file="BinaryConverter.cs"];
m1_221 [label="j.Add(v2)", span="346-346", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Item()", file="BinaryConverter.cs"];
m1_224 [label="Assert.AreEqual(null, v2.Parent)", span="351-351", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Item()", file="BinaryConverter.cs"];
m1_225 [label="Assert.AreEqual(-1, j.IndexOf(v2))", span="352-352", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Item()", file="BinaryConverter.cs"];
m1_218 [label="JValue v4 = new JValue(4)", span="341-341", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Item()", file="BinaryConverter.cs"];
m1_222 [label="j.Add(v3)", span="347-347", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Item()", file="BinaryConverter.cs"];
m1_219 [label="JArray j = new JArray()", span="343-343", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Item()", file="BinaryConverter.cs"];
m1_223 [label="j[1] = v4", span="349-349", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Item()", file="BinaryConverter.cs"];
m1_226 [label="Assert.AreEqual(j, v4.Parent)", span="353-353", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Item()", file="BinaryConverter.cs"];
m1_227 [label="Assert.AreEqual(1, j.IndexOf(v4))", span="354-354", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Item()", file="BinaryConverter.cs"];
m1_228 [label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.Item()", span="336-336", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Item()", file="BinaryConverter.cs"];
m1_23 [label="_reflectionObject == null", span="84-84", cluster="Newtonsoft.Json.Converters.BinaryConverter.EnsureReflectionObject(System.Type)", file="BinaryConverter.cs"];
m1_31 [label="!ReflectionUtils.IsNullable(objectType)", span="107-107", cluster="Newtonsoft.Json.Converters.BinaryConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="BinaryConverter.cs"];
m1_185 [label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.InsertShouldInsertAtZeroIndex()", span="293-293", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertShouldInsertAtZeroIndex()", file="BinaryConverter.cs"];
m1_186 [label="JValue v1 = new JValue(1)", span="295-295", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertShouldInsertAtZeroIndex()", file="BinaryConverter.cs"];
m1_187 [label="JValue v2 = new JValue(2)", span="296-296", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertShouldInsertAtZeroIndex()", file="BinaryConverter.cs"];
m1_189 [label="j.Insert(0, v1)", span="300-300", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertShouldInsertAtZeroIndex()", file="BinaryConverter.cs"];
m1_190 [label="Assert.AreEqual(0, j.IndexOf(v1))", span="301-301", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertShouldInsertAtZeroIndex()", file="BinaryConverter.cs"];
m1_192 [label="Assert.AreEqual(1, j.IndexOf(v1))", span="304-304", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertShouldInsertAtZeroIndex()", file="BinaryConverter.cs"];
m1_188 [label="JArray j = new JArray()", span="298-298", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertShouldInsertAtZeroIndex()", file="BinaryConverter.cs"];
m1_191 [label="j.Insert(0, v2)", span="303-303", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertShouldInsertAtZeroIndex()", file="BinaryConverter.cs"];
m1_193 [label="Assert.AreEqual(0, j.IndexOf(v2))", span="305-305", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertShouldInsertAtZeroIndex()", file="BinaryConverter.cs"];
m1_194 [label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.InsertShouldInsertAtZeroIndex()", span="293-293", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertShouldInsertAtZeroIndex()", file="BinaryConverter.cs"];
m1_337 [label="Entry Newtonsoft.Json.Linq.JObject.Parse(string)", span="409-409", cluster="Newtonsoft.Json.Linq.JObject.Parse(string)", file="BinaryConverter.cs"];
m1_56 [label="Entry SqlBinary.cstr", span="", cluster="SqlBinary.cstr", file="BinaryConverter.cs"];
m1_248 [label="Entry JArray.cstr", span="", cluster="JArray.cstr", file="BinaryConverter.cs"];
m1_55 [label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.GenericCollectionCopyTo()", span="101-101", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.GenericCollectionCopyTo()", file="BinaryConverter.cs"];
m1_119 [label="Entry Newtonsoft.Json.Linq.JArray.IndexOf(Newtonsoft.Json.Linq.JToken)", span="298-298", cluster="Newtonsoft.Json.Linq.JArray.IndexOf(Newtonsoft.Json.Linq.JToken)", file="BinaryConverter.cs"];
m1_24 [label="_reflectionObject = ReflectionObject.Create(t, t.GetConstructor(new[] { typeof(byte[]) }), BinaryToArrayName)", span="86-86", cluster="Newtonsoft.Json.Converters.BinaryConverter.EnsureReflectionObject(System.Type)", file="BinaryConverter.cs"];
m1_25 [label="Exit Newtonsoft.Json.Converters.BinaryConverter.EnsureReflectionObject(System.Type)", span="82-82", cluster="Newtonsoft.Json.Converters.BinaryConverter.EnsureReflectionObject(System.Type)", file="BinaryConverter.cs"];
m1_26 [label="Entry System.Type.GetConstructor(System.Type[])", span="0-0", cluster="System.Type.GetConstructor(System.Type[])", file="BinaryConverter.cs"];
m1_28 [label="Entry Newtonsoft.Json.Converters.BinaryConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", span="99-99", cluster="Newtonsoft.Json.Converters.BinaryConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="BinaryConverter.cs"];
m1_327 [label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.ToListOnEmptyArray()", span="527-527", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ToListOnEmptyArray()", file="BinaryConverter.cs"];
m1_328 [label="string json = @''{''''decks'''':[]}''", span="529-529", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ToListOnEmptyArray()", file="BinaryConverter.cs"];
m1_329 [label="JArray decks = (JArray)JObject.Parse(json)[''decks'']", span="531-531", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ToListOnEmptyArray()", file="BinaryConverter.cs"];
m1_330 [label="IList<JToken> l = decks.ToList()", span="532-532", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ToListOnEmptyArray()", file="BinaryConverter.cs"];
m1_331 [label="Assert.AreEqual(0, l.Count)", span="533-533", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ToListOnEmptyArray()", file="BinaryConverter.cs"];
m1_332 [label="json = @''{''''decks'''':[1]}''", span="535-535", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ToListOnEmptyArray()", file="BinaryConverter.cs"];
m1_333 [label="decks = (JArray)JObject.Parse(json)[''decks'']", span="537-537", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ToListOnEmptyArray()", file="BinaryConverter.cs"];
m1_334 [label="l = decks.ToList()", span="538-538", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ToListOnEmptyArray()", file="BinaryConverter.cs"];
m1_335 [label="Assert.AreEqual(1, l.Count)", span="539-539", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ToListOnEmptyArray()", file="BinaryConverter.cs"];
m1_336 [label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.ToListOnEmptyArray()", span="527-527", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ToListOnEmptyArray()", file="BinaryConverter.cs"];
m1_48 [label="JToken[] a = new JToken[5]", span="109-109", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.GenericCollectionCopyTo()", file="BinaryConverter.cs"];
m1_338 [label="Entry System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", file="BinaryConverter.cs"];
m1_348 [label="Entry Newtonsoft.Json.Linq.JArray.Parse(string, Newtonsoft.Json.Linq.JsonLoadSettings)", span="172-172", cluster="Newtonsoft.Json.Linq.JArray.Parse(string, Newtonsoft.Json.Linq.JsonLoadSettings)", file="BinaryConverter.cs"];
m1_347 [label="Entry Newtonsoft.Json.Linq.JsonLoadSettings.JsonLoadSettings()", span="7-7", cluster="Newtonsoft.Json.Linq.JsonLoadSettings.JsonLoadSettings()", file="BinaryConverter.cs"];
m1_137 [label="Entry Newtonsoft.Json.Linq.JArray.RemoveAt(int)", span="323-323", cluster="Newtonsoft.Json.Linq.JArray.RemoveAt(int)", file="BinaryConverter.cs"];
m1_229 [label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_ShouldThrowOnUnexpectedToken()", span="358-358", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_ShouldThrowOnUnexpectedToken()", file="BinaryConverter.cs"];
m1_230 [label="string json = @''{''''prop'''':''''value''''}''", span="360-360", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_ShouldThrowOnUnexpectedToken()", file="BinaryConverter.cs"];
m1_231 [label="ExceptionAssert.Throws<JsonReaderException>(() => { JArray.Parse(json); }, ''Error reading JArray from JsonReader. Current JsonReader item is not an array: StartObject. Path '', line 1, position 1.'')", span="362-362", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_ShouldThrowOnUnexpectedToken()", file="BinaryConverter.cs"];
m1_232 [label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_ShouldThrowOnUnexpectedToken()", span="358-358", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_ShouldThrowOnUnexpectedToken()", file="BinaryConverter.cs"];
m1_237 [label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.ArrayOrder()", span="372-372", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ArrayOrder()", file="BinaryConverter.cs"];
m1_238 [label="string itemZeroText = ''Zero text''", span="374-374", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ArrayOrder()", file="BinaryConverter.cs"];
m1_239 [label="IEnumerable<ListItemFields> t = new List<ListItemFields>\r\n            {\r\n                new ListItemFields { ListItemText = ''First'', ListItemValue = 1 },\r\n                new ListItemFields { ListItemText = ''Second'', ListItemValue = 2 },\r\n                new ListItemFields { ListItemText = ''Third'', ListItemValue = 3 }\r\n            }", span="376-381", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ArrayOrder()", file="BinaryConverter.cs"];
m1_240 [label="JObject optionValues =\r\n                new JObject(\r\n                    new JProperty(''options'',\r\n                        new JArray(\r\n                            new JObject(\r\n                                new JProperty(''text'', itemZeroText),\r\n                                new JProperty(''value'', ''0'')),\r\n                            from r in t\r\n                            orderby r.ListItemValue\r\n                            select new JObject(\r\n                                new JProperty(''text'', r.ListItemText),\r\n                                new JProperty(''value'', r.ListItemValue.ToString())))))", span="383-394", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ArrayOrder()", file="BinaryConverter.cs"];
m1_241 [label="string result = ''myOptions = '' + optionValues.ToString()", span="396-396", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ArrayOrder()", file="BinaryConverter.cs"];
m1_242 [label="StringAssert.AreEqual(@''myOptions = {\r\n  ''''options'''': [\r\n    {\r\n      ''''text'''': ''''Zero text'''',\r\n      ''''value'''': ''''0''''\r\n    },\r\n    {\r\n      ''''text'''': ''''First'''',\r\n      ''''value'''': ''''1''''\r\n    },\r\n    {\r\n      ''''text'''': ''''Second'''',\r\n      ''''value'''': ''''2''''\r\n    },\r\n    {\r\n      ''''text'''': ''''Third'''',\r\n      ''''value'''': ''''3''''\r\n    }\r\n  ]\r\n}'', result)", span="398-417", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ArrayOrder()", file="BinaryConverter.cs"];
m1_243 [label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.ArrayOrder()", span="372-372", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ArrayOrder()", file="BinaryConverter.cs"];
m1_100 [label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", span="179-179", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", file="BinaryConverter.cs"];
m1_101 [label="JValue v1 = new JValue(1)", span="181-181", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", file="BinaryConverter.cs"];
m1_102 [label="JValue v2 = new JValue(1)", span="182-182", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", file="BinaryConverter.cs"];
m1_105 [label="j.Add(v1)", span="187-187", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", file="BinaryConverter.cs"];
m1_106 [label="Assert.AreEqual(0, j.IndexOf(v1))", span="188-188", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", file="BinaryConverter.cs"];
m1_108 [label="Assert.AreEqual(0, j.IndexOf(v1))", span="191-191", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", file="BinaryConverter.cs"];
m1_111 [label="Assert.AreEqual(1, j.IndexOf(v1))", span="195-195", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", file="BinaryConverter.cs"];
m1_115 [label="Assert.AreEqual(0, j.IndexOf(v1))", span="200-200", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", file="BinaryConverter.cs"];
m1_103 [label="JValue v3 = new JValue(1)", span="183-183", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", file="BinaryConverter.cs"];
m1_107 [label="j.Add(v2)", span="190-190", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", file="BinaryConverter.cs"];
m1_109 [label="Assert.AreEqual(1, j.IndexOf(v2))", span="192-192", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", file="BinaryConverter.cs"];
m1_112 [label="Assert.AreEqual(2, j.IndexOf(v2))", span="196-196", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", file="BinaryConverter.cs"];
m1_116 [label="Assert.AreEqual(1, j.IndexOf(v2))", span="201-201", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", file="BinaryConverter.cs"];
m1_104 [label="JArray j = new JArray()", span="185-185", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", file="BinaryConverter.cs"];
m1_110 [label="j.AddFirst(v3)", span="194-194", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", file="BinaryConverter.cs"];
m1_113 [label="Assert.AreEqual(0, j.IndexOf(v3))", span="197-197", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", file="BinaryConverter.cs"];
m1_114 [label="v3.Remove()", span="199-199", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", file="BinaryConverter.cs"];
m1_117 [label="Assert.AreEqual(-1, j.IndexOf(v3))", span="202-202", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", file="BinaryConverter.cs"];
m1_118 [label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", span="179-179", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", file="BinaryConverter.cs"];
m1_121 [label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAt()", span="206-206", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAt()", file="BinaryConverter.cs"];
m1_122 [label="JValue v1 = new JValue(1)", span="208-208", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAt()", file="BinaryConverter.cs"];
m1_123 [label="JValue v2 = new JValue(1)", span="209-209", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAt()", file="BinaryConverter.cs"];
m1_126 [label="j.Add(v1)", span="214-214", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAt()", file="BinaryConverter.cs"];
m1_129 [label="Assert.AreEqual(true, j.Contains(v1))", span="218-218", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAt()", file="BinaryConverter.cs"];
m1_131 [label="Assert.AreEqual(false, j.Contains(v1))", span="220-220", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAt()", file="BinaryConverter.cs"];
m1_124 [label="JValue v3 = new JValue(1)", span="210-210", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAt()", file="BinaryConverter.cs"];
m1_127 [label="j.Add(v2)", span="215-215", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAt()", file="BinaryConverter.cs"];
m1_125 [label="JArray j = new JArray()", span="212-212", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAt()", file="BinaryConverter.cs"];
m1_128 [label="j.Add(v3)", span="216-216", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAt()", file="BinaryConverter.cs"];
m1_132 [label="Assert.AreEqual(true, j.Contains(v3))", span="222-222", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAt()", file="BinaryConverter.cs"];
m1_134 [label="Assert.AreEqual(false, j.Contains(v3))", span="224-224", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAt()", file="BinaryConverter.cs"];
m1_130 [label="j.RemoveAt(0)", span="219-219", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAt()", file="BinaryConverter.cs"];
m1_133 [label="j.RemoveAt(1)", span="223-223", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAt()", file="BinaryConverter.cs"];
m1_135 [label="Assert.AreEqual(1, j.Count)", span="226-226", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAt()", file="BinaryConverter.cs"];
m1_136 [label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAt()", span="206-206", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAt()", file="BinaryConverter.cs"];
m1_145 [label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAtNegativeIndexShouldError()", span="239-239", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAtNegativeIndexShouldError()", file="BinaryConverter.cs"];
m1_146 [label="JArray j = new JArray()", span="241-241", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAtNegativeIndexShouldError()", file="BinaryConverter.cs"];
m1_147 [label="ExceptionAssert.Throws<ArgumentOutOfRangeException>(() => { j.RemoveAt(-1); }, @''Index is less than 0.\r\nParameter name: index'')", span="243-244", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAtNegativeIndexShouldError()", file="BinaryConverter.cs"];
m1_148 [label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAtNegativeIndexShouldError()", span="239-239", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAtNegativeIndexShouldError()", file="BinaryConverter.cs"];
m1_251 [label="Entry Newtonsoft.Json.Linq.JToken.ToString()", span="422-422", cluster="Newtonsoft.Json.Linq.JToken.ToString()", file="BinaryConverter.cs"];
m1_339 [label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_NoComments()", span="543-543", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_NoComments()", file="BinaryConverter.cs"];
m1_340 [label="string json = ''[1,2/*comment*/,3]''", span="545-545", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_NoComments()", file="BinaryConverter.cs"];
m1_341 [label="JArray a = JArray.Parse(json, new JsonLoadSettings\r\n            {\r\n                CommentHandling = CommentHandling.Ignore\r\n            })", span="547-550", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_NoComments()", file="BinaryConverter.cs"];
m1_342 [label="Assert.AreEqual(3, a.Count)", span="552-552", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_NoComments()", file="BinaryConverter.cs"];
m1_343 [label="Assert.AreEqual(1, (int)a[0])", span="553-553", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_NoComments()", file="BinaryConverter.cs"];
m1_344 [label="Assert.AreEqual(2, (int)a[1])", span="554-554", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_NoComments()", file="BinaryConverter.cs"];
m1_345 [label="Assert.AreEqual(3, (int)a[2])", span="555-555", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_NoComments()", file="BinaryConverter.cs"];
m1_346 [label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_NoComments()", span="543-543", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_NoComments()", file="BinaryConverter.cs"];
m1_281 [label="Entry Unk.AreNotSame", span="", cluster="Unk.AreNotSame", file="BinaryConverter.cs"];
m1_200 [label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.InsertNegativeIndexShouldThrow()", span="318-318", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertNegativeIndexShouldThrow()", file="BinaryConverter.cs"];
m1_201 [label="JArray j = new JArray()", span="320-320", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertNegativeIndexShouldThrow()", file="BinaryConverter.cs"];
m1_202 [label="ExceptionAssert.Throws<ArgumentOutOfRangeException>(() => { j.Insert(-1, new JValue(1)); }, @''Index was out of range. Must be non-negative and less than the size of the collection.\r\nParameter name: index'')", span="322-323", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertNegativeIndexShouldThrow()", file="BinaryConverter.cs"];
m1_203 [label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.InsertNegativeIndexShouldThrow()", span="318-318", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertNegativeIndexShouldThrow()", file="BinaryConverter.cs"];
m1_236 [label="Entry Newtonsoft.Json.Linq.JArray.Parse(string)", span="157-157", cluster="Newtonsoft.Json.Linq.JArray.Parse(string)", file="BinaryConverter.cs"];
m1_247 [label="Entry Newtonsoft.Json.Linq.JProperty.JProperty(string, object)", span="326-326", cluster="Newtonsoft.Json.Linq.JProperty.JProperty(string, object)", file="BinaryConverter.cs"];
m1_42 [label="EnsureReflectionObject(t)", span="136-136", cluster="Newtonsoft.Json.Converters.BinaryConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="BinaryConverter.cs"];
m1_43 [label="return _reflectionObject.Creator(data);", span="138-138", cluster="Newtonsoft.Json.Converters.BinaryConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", color=red, community=0, file="BinaryConverter.cs"];
m1_44 [label="t == typeof(SqlBinary)", span="142-142", cluster="Newtonsoft.Json.Converters.BinaryConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", color=red, community=0, file="BinaryConverter.cs"];
m1_45 [label="return new SqlBinary(data);", span="144-144", cluster="Newtonsoft.Json.Converters.BinaryConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="BinaryConverter.cs"];
m1_46 [label="throw JsonSerializationException.Create(reader, ''Unexpected object type when writing binary: {0}''.FormatWith(CultureInfo.InvariantCulture, objectType));", span="147-147", cluster="Newtonsoft.Json.Converters.BinaryConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="BinaryConverter.cs"];
m1_47 [label="Exit Newtonsoft.Json.Converters.BinaryConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", span="99-99", cluster="Newtonsoft.Json.Converters.BinaryConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="BinaryConverter.cs"];
m1_49 [label="Entry System.Nullable.GetUnderlyingType(System.Type)", span="0-0", cluster="System.Nullable.GetUnderlyingType(System.Type)", file="BinaryConverter.cs"];
m1_52 [label="Entry Newtonsoft.Json.Converters.BinaryConverter.ReadByteArray(Newtonsoft.Json.JsonReader)", span="150-150", cluster="Newtonsoft.Json.Converters.BinaryConverter.ReadByteArray(Newtonsoft.Json.JsonReader)", file="BinaryConverter.cs"];
m1_53 [label="Entry object.ToString()", span="0-0", cluster="object.ToString()", file="BinaryConverter.cs"];
m1_40 [label="throw JsonSerializationException.Create(reader, ''Unexpected token parsing binary. Expected String or StartArray, got {0}.''.FormatWith(CultureInfo.InvariantCulture, reader.TokenType));", span="130-130", cluster="Newtonsoft.Json.Converters.BinaryConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="BinaryConverter.cs", color=green, community=0];
m1_253 [label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.Iterate()", span="421-421", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Iterate()", file="BinaryConverter.cs"];
m1_254 [label="JArray a = new JArray(1, 2, 3, 4, 5)", span="423-423", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Iterate()", file="BinaryConverter.cs"];
m1_255 [label="int i = 1", span="425-425", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Iterate()", file="BinaryConverter.cs"];
m1_256 [label=a, span="426-426", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Iterate()", file="BinaryConverter.cs"];
m1_257 [label="Assert.AreEqual(i, (int)token)", span="428-428", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Iterate()", file="BinaryConverter.cs"];
m1_258 [label="i++", span="429-429", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Iterate()", file="BinaryConverter.cs"];
m1_259 [label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.Iterate()", span="421-421", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Iterate()", file="BinaryConverter.cs"];
m1_72 [label="Entry System.Collections.Generic.List<T>.ToArray()", span="0-0", cluster="System.Collections.Generic.List<T>.ToArray()", file="BinaryConverter.cs"];
m1_73 [label="Entry Newtonsoft.Json.Converters.BinaryConverter.CanConvert(System.Type)", span="181-181", cluster="Newtonsoft.Json.Converters.BinaryConverter.CanConvert(System.Type)", file="BinaryConverter.cs"];
m1_74 [label="objectType.AssignableToTypeName(BinaryTypeName)", span="184-184", cluster="Newtonsoft.Json.Converters.BinaryConverter.CanConvert(System.Type)", file="BinaryConverter.cs"];
m1_75 [label="return true;", span="186-186", cluster="Newtonsoft.Json.Converters.BinaryConverter.CanConvert(System.Type)", file="BinaryConverter.cs"];
m1_312 [label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.InsertAddEnd()", span="503-503", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertAddEnd()", file="BinaryConverter.cs"];
m1_313 [label="JArray array = new JArray()", span="505-505", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertAddEnd()", file="BinaryConverter.cs"];
m1_314 [label="array.Insert(0, 123)", span="506-506", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertAddEnd()", file="BinaryConverter.cs"];
m1_315 [label="array.Insert(1, 456)", span="507-507", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertAddEnd()", file="BinaryConverter.cs"];
m1_316 [label="Assert.AreEqual(2, array.Count)", span="509-509", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertAddEnd()", file="BinaryConverter.cs"];
m1_317 [label="Assert.AreEqual(123, (int)array[0])", span="510-510", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertAddEnd()", file="BinaryConverter.cs"];
m1_318 [label="Assert.AreEqual(456, (int)array[1])", span="511-511", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertAddEnd()", file="BinaryConverter.cs"];
m1_319 [label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.InsertAddEnd()", span="503-503", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertAddEnd()", file="BinaryConverter.cs"];
m1_244 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="BinaryConverter.cs"];
m1_57 [label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.GenericCollectionCopyToNullArrayShouldThrow()", span="125-125", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.GenericCollectionCopyToNullArrayShouldThrow()", file="BinaryConverter.cs"];
m1_58 [label="JArray j = new JArray()", span="127-127", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.GenericCollectionCopyToNullArrayShouldThrow()", file="BinaryConverter.cs"];
m1_59 [label="ExceptionAssert.Throws<ArgumentNullException>(() => { ((ICollection<JToken>)j).CopyTo(null, 0); }, @''Value cannot be null.\r\nParameter name: array'')", span="129-130", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.GenericCollectionCopyToNullArrayShouldThrow()", file="BinaryConverter.cs"];
m1_61 [label="Entry Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", span="350-350", cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", file="BinaryConverter.cs"];
m1_60 [label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.GenericCollectionCopyToNullArrayShouldThrow()", span="125-125", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.GenericCollectionCopyToNullArrayShouldThrow()", file="BinaryConverter.cs"];
m1_7 [label="Assert.AreEqual(2, a.Count)", span="65-65", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveSpecificAndRemoveSelf()", file="BinaryConverter.cs"];
m1_30 [label="reader.TokenType == JsonToken.Null", span="105-105", cluster="Newtonsoft.Json.Converters.BinaryConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="BinaryConverter.cs"];
m1_0 [label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveSpecificAndRemoveSelf()", span="49-49", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveSpecificAndRemoveSelf()", file="BinaryConverter.cs"];
m1_4 [label="Assert.IsTrue(a.Remove(last))", span="60-60", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveSpecificAndRemoveSelf()", file="BinaryConverter.cs"];
m1_1 [label="JObject o = new JObject\r\n            {\r\n                { ''results'', new JArray(1, 2, 3, 4) }\r\n            }", span="51-54", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveSpecificAndRemoveSelf()", file="BinaryConverter.cs"];
m1_5 [label="last = a.Last()", span="62-62", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveSpecificAndRemoveSelf()", file="BinaryConverter.cs"];
m1_2 [label="JArray a = (JArray)o[''results'']", span="56-56", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveSpecificAndRemoveSelf()", file="BinaryConverter.cs"];
m1_3 [label="var last = a.Last()", span="58-58", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveSpecificAndRemoveSelf()", file="BinaryConverter.cs"];
m1_6 [label="last.Remove()", span="63-63", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveSpecificAndRemoveSelf()", file="BinaryConverter.cs"];
m1_249 [label="Entry Newtonsoft.Json.Linq.JObject.JObject(params object[])", span="105-105", cluster="Newtonsoft.Json.Linq.JObject.JObject(params object[])", file="BinaryConverter.cs"];
m1_320 [label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.ParseAdditionalContent()", span="515-515", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ParseAdditionalContent()", file="BinaryConverter.cs"];
m1_321 [label="string json = @''[\r\n''''Small'''',\r\n''''Medium'''',\r\n''''Large''''\r\n], 987987''", span="517-521", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ParseAdditionalContent()", file="BinaryConverter.cs"];
m1_322 [label="ExceptionAssert.Throws<JsonReaderException>(() => { JArray.Parse(json); }, ''Additional text encountered after finished reading JSON content: ,. Path '', line 5, position 1.'')", span="523-523", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ParseAdditionalContent()", file="BinaryConverter.cs"];
m1_323 [label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.ParseAdditionalContent()", span="515-515", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ParseAdditionalContent()", file="BinaryConverter.cs"];
m1_295 [label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.ReplaceAll()", span="483-483", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ReplaceAll()", file="BinaryConverter.cs"];
m1_296 [label="JArray a = new JArray(new[] { 1, 2, 3 })", span="485-485", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ReplaceAll()", file="BinaryConverter.cs"];
m1_297 [label="Assert.AreEqual(3, a.Count)", span="486-486", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ReplaceAll()", file="BinaryConverter.cs"];
m1_298 [label="Assert.AreEqual(1, (int)a[0])", span="487-487", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ReplaceAll()", file="BinaryConverter.cs"];
m1_299 [label="Assert.AreEqual(2, (int)a[1])", span="488-488", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ReplaceAll()", file="BinaryConverter.cs"];
m1_300 [label="Assert.AreEqual(3, (int)a[2])", span="489-489", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ReplaceAll()", file="BinaryConverter.cs"];
m1_301 [label="a.ReplaceAll(1)", span="491-491", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ReplaceAll()", file="BinaryConverter.cs"];
m1_302 [label="Assert.AreEqual(1, a.Count)", span="492-492", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ReplaceAll()", file="BinaryConverter.cs"];
m1_303 [label="Assert.AreEqual(1, (int)a[0])", span="493-493", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ReplaceAll()", file="BinaryConverter.cs"];
m1_304 [label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.ReplaceAll()", span="483-483", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ReplaceAll()", file="BinaryConverter.cs"];
m1_120 [label="Entry Newtonsoft.Json.Linq.JContainer.AddFirst(object)", span="649-649", cluster="Newtonsoft.Json.Linq.JContainer.AddFirst(object)", file="BinaryConverter.cs"];
m1_252 [label="Entry Newtonsoft.Json.Tests.StringAssert.AreEqual(string, string)", span="321-321", cluster="Newtonsoft.Json.Tests.StringAssert.AreEqual(string, string)", file="BinaryConverter.cs"];
m1_305 [label="Entry Newtonsoft.Json.Linq.JContainer.ReplaceAll(object)", span="699-699", cluster="Newtonsoft.Json.Linq.JContainer.ReplaceAll(object)", file="BinaryConverter.cs"];
m1_260 [label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.ITypedListGetItemProperties()", span="435-435", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ITypedListGetItemProperties()", file="BinaryConverter.cs"];
m1_261 [label="JProperty p1 = new JProperty(''Test1'', 1)", span="437-437", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ITypedListGetItemProperties()", file="BinaryConverter.cs"];
m1_262 [label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="438-438", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ITypedListGetItemProperties()", file="BinaryConverter.cs"];
m1_263 [label="ITypedList a = new JArray(new JObject(p1, p2))", span="439-439", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ITypedListGetItemProperties()", file="BinaryConverter.cs"];
m1_264 [label="PropertyDescriptorCollection propertyDescriptors = a.GetItemProperties(null)", span="441-441", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ITypedListGetItemProperties()", file="BinaryConverter.cs"];
m1_265 [label="Assert.IsNotNull(propertyDescriptors)", span="442-442", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ITypedListGetItemProperties()", file="BinaryConverter.cs"];
m1_266 [label="Assert.AreEqual(2, propertyDescriptors.Count)", span="443-443", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ITypedListGetItemProperties()", file="BinaryConverter.cs"];
m1_267 [label="Assert.AreEqual(''Test1'', propertyDescriptors[0].Name)", span="444-444", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ITypedListGetItemProperties()", file="BinaryConverter.cs"];
m1_268 [label="Assert.AreEqual(''Test2'', propertyDescriptors[1].Name)", span="445-445", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ITypedListGetItemProperties()", file="BinaryConverter.cs"];
m1_269 [label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.ITypedListGetItemProperties()", span="435-435", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ITypedListGetItemProperties()", file="BinaryConverter.cs"];
m1_37 [label="Assert.AreEqual(false, a.Contains(null))", span="96-96", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Contains()", file="BinaryConverter.cs"];
m1_32 [label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.Contains()", span="88-88", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Contains()", file="BinaryConverter.cs"];
m1_35 [label="Assert.AreEqual(false, a.Contains(new JValue(2)))", span="94-94", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Contains()", file="BinaryConverter.cs"];
m1_36 [label="Assert.AreEqual(false, a.Contains(new JValue(1)))", span="95-95", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Contains()", file="BinaryConverter.cs"];
m1_38 [label="Assert.AreEqual(true, a.Contains(v))", span="97-97", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Contains()", file="BinaryConverter.cs"];
m1_33 [label="JValue v = new JValue(1)", span="90-90", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Contains()", file="BinaryConverter.cs"];
m1_34 [label="JArray a = new JArray { v }", span="92-92", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Contains()", file="BinaryConverter.cs"];
m1_41 [label="Entry Newtonsoft.Json.Linq.JArray.Contains(Newtonsoft.Json.Linq.JToken)", span="367-367", cluster="Newtonsoft.Json.Linq.JArray.Contains(Newtonsoft.Json.Linq.JToken)", file="BinaryConverter.cs"];
m1_39 [label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.Contains()", span="88-88", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Contains()", file="BinaryConverter.cs"];
m1_250 [label="Entry object.ToString()", span="0-0", cluster="object.ToString()", file="BinaryConverter.cs"];
m1_168 [label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.AddFirstAddedTokenShouldBeFirst()", span="269-269", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddFirstAddedTokenShouldBeFirst()", file="BinaryConverter.cs"];
m1_169 [label="JValue v1 = new JValue(1)", span="271-271", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddFirstAddedTokenShouldBeFirst()", file="BinaryConverter.cs"];
m1_170 [label="JValue v2 = new JValue(2)", span="272-272", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddFirstAddedTokenShouldBeFirst()", file="BinaryConverter.cs"];
m1_175 [label="j.AddFirst(v1)", span="279-279", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddFirstAddedTokenShouldBeFirst()", file="BinaryConverter.cs"];
m1_176 [label="Assert.AreEqual(v1, j.First)", span="280-280", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddFirstAddedTokenShouldBeFirst()", file="BinaryConverter.cs"];
m1_177 [label="Assert.AreEqual(v1, j.Last)", span="281-281", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddFirstAddedTokenShouldBeFirst()", file="BinaryConverter.cs"];
m1_180 [label="Assert.AreEqual(v1, j.Last)", span="285-285", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddFirstAddedTokenShouldBeFirst()", file="BinaryConverter.cs"];
m1_183 [label="Assert.AreEqual(v1, j.Last)", span="289-289", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddFirstAddedTokenShouldBeFirst()", file="BinaryConverter.cs"];
m1_171 [label="JValue v3 = new JValue(3)", span="273-273", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddFirstAddedTokenShouldBeFirst()", file="BinaryConverter.cs"];
m1_178 [label="j.AddFirst(v2)", span="283-283", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddFirstAddedTokenShouldBeFirst()", file="BinaryConverter.cs"];
m1_179 [label="Assert.AreEqual(v2, j.First)", span="284-284", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddFirstAddedTokenShouldBeFirst()", file="BinaryConverter.cs"];
m1_172 [label="JArray j = new JArray()", span="275-275", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddFirstAddedTokenShouldBeFirst()", file="BinaryConverter.cs"];
m1_181 [label="j.AddFirst(v3)", span="287-287", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddFirstAddedTokenShouldBeFirst()", file="BinaryConverter.cs"];
m1_182 [label="Assert.AreEqual(v3, j.First)", span="288-288", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddFirstAddedTokenShouldBeFirst()", file="BinaryConverter.cs"];
m1_173 [label="Assert.AreEqual(null, j.First)", span="276-276", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddFirstAddedTokenShouldBeFirst()", file="BinaryConverter.cs"];
m1_174 [label="Assert.AreEqual(null, j.Last)", span="277-277", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddFirstAddedTokenShouldBeFirst()", file="BinaryConverter.cs"];
m1_184 [label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.AddFirstAddedTokenShouldBeFirst()", span="269-269", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddFirstAddedTokenShouldBeFirst()", file="BinaryConverter.cs"];
m1_152 [label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.Insert()", span="248-248", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Insert()", file="BinaryConverter.cs"];
m1_153 [label="JValue v1 = new JValue(1)", span="250-250", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Insert()", file="BinaryConverter.cs"];
m1_154 [label="JValue v2 = new JValue(2)", span="251-251", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Insert()", file="BinaryConverter.cs"];
m1_158 [label="j.Add(v1)", span="257-257", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Insert()", file="BinaryConverter.cs"];
m1_162 [label="Assert.AreEqual(0, j.IndexOf(v1))", span="262-262", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Insert()", file="BinaryConverter.cs"];
m1_155 [label="JValue v3 = new JValue(3)", span="252-252", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Insert()", file="BinaryConverter.cs"];
m1_159 [label="j.Add(v2)", span="258-258", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Insert()", file="BinaryConverter.cs"];
m1_164 [label="Assert.AreEqual(2, j.IndexOf(v2))", span="264-264", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Insert()", file="BinaryConverter.cs"];
m1_156 [label="JValue v4 = new JValue(4)", span="253-253", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Insert()", file="BinaryConverter.cs"];
m1_160 [label="j.Add(v3)", span="259-259", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Insert()", file="BinaryConverter.cs"];
m1_165 [label="Assert.AreEqual(3, j.IndexOf(v3))", span="265-265", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Insert()", file="BinaryConverter.cs"];
m1_157 [label="JArray j = new JArray()", span="255-255", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Insert()", file="BinaryConverter.cs"];
m1_161 [label="j.Insert(1, v4)", span="260-260", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Insert()", file="BinaryConverter.cs"];
m1_163 [label="Assert.AreEqual(1, j.IndexOf(v4))", span="263-263", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Insert()", file="BinaryConverter.cs"];
m1_166 [label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.Insert()", span="248-248", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Insert()", file="BinaryConverter.cs"];
m1_306 [label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.ParseIncomplete()", span="497-497", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ParseIncomplete()", file="BinaryConverter.cs"];
m1_307 [label="ExceptionAssert.Throws<JsonReaderException>(() => { JArray.Parse(''[1''); }, ''Unexpected end of content while loading JArray. Path '[0]', line 1, position 2.'')", span="499-499", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ParseIncomplete()", file="BinaryConverter.cs"];
m1_308 [label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.ParseIncomplete()", span="497-497", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ParseIncomplete()", file="BinaryConverter.cs"];
m1_282 [label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.SetValueWithInvalidIndex()", span="462-462", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.SetValueWithInvalidIndex()", file="BinaryConverter.cs"];
m1_283 [label="ExceptionAssert.Throws<ArgumentException>(() =>\r\n            {\r\n                JArray a = new JArray();\r\n                a[''badvalue''] = new JValue(3);\r\n            }, @''Set JArray values with invalid key value: ''''badvalue''''. Int32 array index expected.'')", span="464-468", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.SetValueWithInvalidIndex()", file="BinaryConverter.cs"];
m1_284 [label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.SetValueWithInvalidIndex()", span="462-462", cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.SetValueWithInvalidIndex()", file="BinaryConverter.cs"];
}
