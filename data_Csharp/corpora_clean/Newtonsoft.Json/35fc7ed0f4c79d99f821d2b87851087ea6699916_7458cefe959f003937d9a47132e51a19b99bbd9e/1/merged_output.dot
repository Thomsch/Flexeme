digraph  {
n16 [label="Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter", span=""];
n0 [cluster="Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", label="Entry Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", span="10-10"];
n1 [cluster="Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", label=current, span="12-12"];
n5 [cluster="Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", label="yield return v;", span="20-20"];
n8 [cluster="Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", label="yield return v;", span="29-29"];
n3 [cluster="Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", color=red, community=0, label="-1: JToken v = GetTokenIndex(t, errorWhenNoMatch, Index.Value)", span="16-16"];
n9 [cluster="Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", label=errorWhenNoMatch, span="34-34"];
n2 [cluster="Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", label="Index != null", span="14-14"];
n11 [cluster="Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", label="Exit Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", span="10-10"];
n6 [cluster="Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", label="t is JArray || t is JConstructor", span="25-25"];
n7 [cluster="Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", label=t, span="27-27"];
n10 [cluster="Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", label="throw new JsonException(''Index * not valid on {0}.''.FormatWith(CultureInfo.InvariantCulture, t.GetType().Name));", span="36-36"];
n4 [cluster="Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", label="v != null", span="18-18"];
n12 [cluster="Newtonsoft.Json.Linq.JsonPath.PathFilter.GetTokenIndex(Newtonsoft.Json.Linq.JToken, bool, int)", label="Entry Newtonsoft.Json.Linq.JsonPath.PathFilter.GetTokenIndex(Newtonsoft.Json.Linq.JToken, bool, int)", span="10-10"];
n13 [cluster="Newtonsoft.Json.JsonException.JsonException(string)", label="Entry Newtonsoft.Json.JsonException.JsonException(string)", span="54-54"];
n14 [cluster="object.GetType()", label="Entry object.GetType()", span="0-0"];
n15 [cluster="string.FormatWith(System.IFormatProvider, object)", label="Entry string.FormatWith(System.IFormatProvider, object)", span="47-47"];
d3 [cluster="Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", color=green, community=0, label="-1: JToken v = GetTokenIndex(t, errorWhenNoMatch, Index.Value)", span="16-16"];
m0_65 [cluster="Newtonsoft.Json.Serialization.IAttributeProvider.GetAttributes(bool)", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Serialization.IAttributeProvider.GetAttributes(bool)", span="40-40"];
m0_126 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CustomList<T>.CustomList()", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CustomList<T>.CustomList()", span="222-222"];
m0_9 [cluster="Newtonsoft.Json.Linq.JsonPath.ArraySliceFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="ArraySliceFilter.cs", label="Start < 0", span="31-31"];
m0_58 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.PropertyAttributeProvider()", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.PropertyAttributeProvider()", span="160-160"];
m0_59 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.PropertyAttributeProvider()", file="ArraySliceFilter.cs", label="var resolver = new DefaultContractResolver()", span="162-162"];
m0_60 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.PropertyAttributeProvider()", file="ArraySliceFilter.cs", label="var contract = (JsonObjectContract)resolver.ResolveContract(typeof(Invoice))", span="163-163"];
m0_61 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.PropertyAttributeProvider()", file="ArraySliceFilter.cs", label="JsonProperty property = contract.Properties[''FollowUpDays'']", span="165-165"];
m0_62 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.PropertyAttributeProvider()", file="ArraySliceFilter.cs", label="Assert.AreEqual(1, property.AttributeProvider.GetAttributes(false).Count)", span="166-166"];
m0_63 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.PropertyAttributeProvider()", file="ArraySliceFilter.cs", label="Assert.AreEqual(typeof(DefaultValueAttribute), property.AttributeProvider.GetAttributes(false)[0].GetType())", span="167-167"];
m0_64 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.PropertyAttributeProvider()", file="ArraySliceFilter.cs", label="Exit Newtonsoft.Json.Tests.Serialization.ContractResolverTests.PropertyAttributeProvider()", span="160-160"];
m0_78 [cluster="Unk.IsFalse", file="ArraySliceFilter.cs", label="Entry Unk.IsFalse", span=""];
m0_90 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractListTestClass()", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractListTestClass()", span="196-196"];
m0_91 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractListTestClass()", file="ArraySliceFilter.cs", label="var resolver = new DefaultContractResolver()", span="198-198"];
m0_92 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractListTestClass()", file="ArraySliceFilter.cs", label="var contract = (JsonArrayContract)resolver.ResolveContract(typeof(AbstractListTestClass<int>))", span="199-199"];
m0_96 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractListTestClass()", file="ArraySliceFilter.cs", label="ExceptionAssert.Throws<JsonSerializationException>(() => JsonConvert.DeserializeObject<AbstractListTestClass<int>>(@''[1,2]'', new JsonSerializerSettings\r\n            {\r\n                ContractResolver = resolver\r\n            }), ''Could not create an instance of type Newtonsoft.Json.Tests.Serialization.AbstractListTestClass`1[System.Int32]. Type is an interface or abstract class and cannot be instantiated. Path '', line 1, position 1.'')", span="205-208"];
m0_98 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractListTestClass()", file="ArraySliceFilter.cs", label="var l = JsonConvert.DeserializeObject<AbstractListTestClass<int>>(@''[1,2]'', new JsonSerializerSettings\r\n            {\r\n                ContractResolver = resolver\r\n            })", span="212-215"];
m0_93 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractListTestClass()", file="ArraySliceFilter.cs", label="Assert.IsFalse(contract.IsInstantiable)", span="201-201"];
m0_94 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractListTestClass()", file="ArraySliceFilter.cs", label="Assert.IsNull(contract.DefaultCreator)", span="202-202"];
m0_95 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractListTestClass()", file="ArraySliceFilter.cs", label="Assert.IsFalse(contract.HasParameterizedCreatorInternal)", span="203-203"];
m0_97 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractListTestClass()", file="ArraySliceFilter.cs", label="contract.DefaultCreator = () => new AbstractImplementationListTestClass<int>()", span="210-210"];
m0_99 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractListTestClass()", file="ArraySliceFilter.cs", label="Assert.AreEqual(2, l.Count)", span="217-217"];
m0_100 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractListTestClass()", file="ArraySliceFilter.cs", label="Assert.AreEqual(1, l[0])", span="218-218"];
m0_101 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractListTestClass()", file="ArraySliceFilter.cs", label="Assert.AreEqual(2, l[1])", span="219-219"];
m0_102 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractListTestClass()", file="ArraySliceFilter.cs", label="Exit Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractListTestClass()", span="196-196"];
m0_163 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeWithEscapedPropertyName()", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeWithEscapedPropertyName()", span="303-303"];
m0_164 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeWithEscapedPropertyName()", file="ArraySliceFilter.cs", label="string json = JsonConvert.SerializeObject(\r\n                new AddressWithDataMember\r\n                {\r\n                    AddressLine1 = ''value!''\r\n                },\r\n                new JsonSerializerSettings\r\n                {\r\n                    ContractResolver = new EscapedPropertiesContractResolver\r\n                    {\r\n                        PropertySuffix = @''-'-''''-''\r\n                    }\r\n                })", span="305-316"];
m0_165 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeWithEscapedPropertyName()", file="ArraySliceFilter.cs", label="Assert.AreEqual(@''{''''AddressLine1-'-\''''-'''':''''value!''''}'', json)", span="318-318"];
m0_166 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeWithEscapedPropertyName()", file="ArraySliceFilter.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="320-320"];
m0_167 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeWithEscapedPropertyName()", file="ArraySliceFilter.cs", label="reader.Read()", span="321-321"];
m0_168 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeWithEscapedPropertyName()", file="ArraySliceFilter.cs", label="reader.Read()", span="322-322"];
m0_169 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeWithEscapedPropertyName()", file="ArraySliceFilter.cs", label="Assert.AreEqual(@''AddressLine1-'-''''-'', reader.Value)", span="324-324"];
m0_170 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeWithEscapedPropertyName()", file="ArraySliceFilter.cs", label="Exit Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeWithEscapedPropertyName()", span="303-303"];
m0_175 [cluster="System.IO.StringReader.StringReader(string)", file="ArraySliceFilter.cs", label="Entry System.IO.StringReader.StringReader(string)", span="0-0"];
m0_324 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ClassWithExtensionData.ClassWithExtensionData()", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ClassWithExtensionData.ClassWithExtensionData()", span="613-613"];
m0_310 [cluster="Newtonsoft.Json.Linq.JObject.Parse(string)", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Linq.JObject.Parse(string)", span="409-409"];
m0_286 [cluster="Newtonsoft.Json.Tests.Serialization.IPersonContractResolver.IPersonContractResolver()", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Tests.Serialization.IPersonContractResolver.IPersonContractResolver()", span="95-95"];
m0_143 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractDictionaryTestClass()", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractDictionaryTestClass()", span="276-276"];
m0_144 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractDictionaryTestClass()", file="ArraySliceFilter.cs", label="var resolver = new DefaultContractResolver()", span="278-278"];
m0_145 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractDictionaryTestClass()", file="ArraySliceFilter.cs", label="var contract = (JsonDictionaryContract)resolver.ResolveContract(typeof(AbstractDictionaryTestClass<string, int>))", span="279-279"];
m0_149 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractDictionaryTestClass()", file="ArraySliceFilter.cs", label="ExceptionAssert.Throws<JsonSerializationException>(() => JsonConvert.DeserializeObject<AbstractDictionaryTestClass<string, int>>(@''{key1:1,key2:2}'', new JsonSerializerSettings\r\n            {\r\n                ContractResolver = resolver\r\n            }), ''Could not create an instance of type Newtonsoft.Json.Tests.Serialization.AbstractDictionaryTestClass`2[System.String,System.Int32]. Type is an interface or abstract class and cannot be instantiated. Path 'key1', line 1, position 6.'')", span="285-288"];
m0_151 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractDictionaryTestClass()", file="ArraySliceFilter.cs", label="var d = JsonConvert.DeserializeObject<AbstractDictionaryTestClass<string, int>>(@''{key1:1,key2:2}'', new JsonSerializerSettings\r\n            {\r\n                ContractResolver = resolver\r\n            })", span="292-295"];
m0_146 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractDictionaryTestClass()", file="ArraySliceFilter.cs", label="Assert.IsFalse(contract.IsInstantiable)", span="281-281"];
m0_147 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractDictionaryTestClass()", file="ArraySliceFilter.cs", label="Assert.IsNull(contract.DefaultCreator)", span="282-282"];
m0_148 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractDictionaryTestClass()", file="ArraySliceFilter.cs", label="Assert.IsFalse(contract.HasParameterizedCreatorInternal)", span="283-283"];
m0_150 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractDictionaryTestClass()", file="ArraySliceFilter.cs", label="contract.DefaultCreator = () => new AbstractImplementationDictionaryTestClass<string, int>()", span="290-290"];
m0_152 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractDictionaryTestClass()", file="ArraySliceFilter.cs", label="Assert.AreEqual(2, d.Count)", span="297-297"];
m0_153 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractDictionaryTestClass()", file="ArraySliceFilter.cs", label="Assert.AreEqual(1, d[''key1''])", span="298-298"];
m0_154 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractDictionaryTestClass()", file="ArraySliceFilter.cs", label="Assert.AreEqual(2, d[''key2''])", span="299-299"];
m0_155 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractDictionaryTestClass()", file="ArraySliceFilter.cs", label="Exit Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractDictionaryTestClass()", span="276-276"];
m0_15 [cluster="Newtonsoft.Json.Linq.JsonPath.ArraySliceFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="ArraySliceFilter.cs", label="stopIndex = Math.Max(stopIndex, -1)", span="45-45"];
m0_225 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DeserializeDataMemberClassWithNoDataContract()", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DeserializeDataMemberClassWithNoDataContract()", span="417-417"];
m0_226 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DeserializeDataMemberClassWithNoDataContract()", file="ArraySliceFilter.cs", label="var resolver = new DefaultContractResolver()", span="419-419"];
m0_227 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DeserializeDataMemberClassWithNoDataContract()", file="ArraySliceFilter.cs", label="var contract = (JsonObjectContract)resolver.ResolveContract(typeof(AddressWithDataMember))", span="420-420"];
m0_228 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DeserializeDataMemberClassWithNoDataContract()", file="ArraySliceFilter.cs", label="Assert.AreEqual(''AddressLine1'', contract.Properties[0].PropertyName)", span="422-422"];
m0_229 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DeserializeDataMemberClassWithNoDataContract()", file="ArraySliceFilter.cs", label="Exit Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DeserializeDataMemberClassWithNoDataContract()", span="417-417"];
m0_14 [cluster="Newtonsoft.Json.Linq.JsonPath.ArraySliceFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="ArraySliceFilter.cs", label="startIndex = Math.Min(startIndex, (stepCount > 0) ? a.Count : a.Count - 1)", span="44-44"];
m0_171 [cluster="Newtonsoft.Json.Tests.Serialization.AddressWithDataMember.AddressWithDataMember()", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Tests.Serialization.AddressWithDataMember.AddressWithDataMember()", span="108-108"];
m0_251 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.OverrideCreator()", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.OverrideCreator()", span="456-456"];
m0_252 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.OverrideCreator()", file="ArraySliceFilter.cs", label="var resolver = new DefaultContractResolver()", span="458-458"];
m0_253 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.OverrideCreator()", file="ArraySliceFilter.cs", label="var contract = (JsonObjectContract)resolver.ResolveContract(typeof(MultipleParametrizedConstructorsJsonConstructor))", span="459-459"];
m0_254 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.OverrideCreator()", file="ArraySliceFilter.cs", label="Assert.IsNull(contract.DefaultCreator)", span="461-461"];
m0_255 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.OverrideCreator()", file="ArraySliceFilter.cs", label="Assert.IsNotNull(contract.OverrideCreator)", span="462-462"];
m0_256 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.OverrideCreator()", file="ArraySliceFilter.cs", label="Assert.AreEqual(contract.OverrideConstructor, typeof(MultipleParametrizedConstructorsJsonConstructor).GetConstructor(new[] { typeof(string), typeof(int) }))", span="464-464"];
m0_257 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.OverrideCreator()", file="ArraySliceFilter.cs", label="Assert.AreEqual(2, contract.CreatorParameters.Count)", span="466-466"];
m0_258 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.OverrideCreator()", file="ArraySliceFilter.cs", label="Assert.AreEqual(''Value'', contract.CreatorParameters[0].PropertyName)", span="467-467"];
m0_259 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.OverrideCreator()", file="ArraySliceFilter.cs", label="Assert.AreEqual(''Age'', contract.CreatorParameters[1].PropertyName)", span="468-468"];
m0_260 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.OverrideCreator()", file="ArraySliceFilter.cs", label="contract.OverrideConstructor = null", span="471-471"];
m0_261 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.OverrideCreator()", file="ArraySliceFilter.cs", label="Assert.IsNull(contract.OverrideCreator)", span="473-473"];
m0_262 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.OverrideCreator()", file="ArraySliceFilter.cs", label="Exit Newtonsoft.Json.Tests.Serialization.ContractResolverTests.OverrideCreator()", span="456-456"];
m0_279 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeInterface()", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeInterface()", span="504-504"];
m0_280 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeInterface()", file="ArraySliceFilter.cs", label="Employee employee = new Employee\r\n            {\r\n                BirthDate = new DateTime(1977, 12, 30, 1, 1, 1, DateTimeKind.Utc),\r\n                FirstName = ''Maurice'',\r\n                LastName = ''Moss'',\r\n                Department = ''IT'',\r\n                JobTitle = ''Support''\r\n            }", span="506-513"];
m0_281 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeInterface()", file="ArraySliceFilter.cs", label="string iPersonJson = JsonConvert.SerializeObject(employee, Formatting.Indented,\r\n                new JsonSerializerSettings { ContractResolver = new IPersonContractResolver() })", span="515-516"];
m0_282 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeInterface()", file="ArraySliceFilter.cs", label="StringAssert.AreEqual(@''{\r\n  ''''FirstName'''': ''''Maurice'''',\r\n  ''''LastName'''': ''''Moss'''',\r\n  ''''BirthDate'''': ''''1977-12-30T01:01:01Z''''\r\n}'', iPersonJson)", span="518-522"];
m0_283 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeInterface()", file="ArraySliceFilter.cs", label="Exit Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeInterface()", span="504-504"];
m0_0 [cluster="Newtonsoft.Json.Tests.Serialization.DynamicContractResolver.DynamicContractResolver(char)", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Tests.Serialization.DynamicContractResolver.DynamicContractResolver(char)", span="55-55"];
m0_24 [cluster="Newtonsoft.Json.Tests.Serialization.IPersonContractResolver.CreateContract(System.Type)", color=green, community=0, file="ArraySliceFilter.cs", label="-1: Exit Newtonsoft.Json.Tests.Serialization.IPersonContractResolver.CreateContract(System.Type)", span="97-97"];
m0_23 [cluster="Newtonsoft.Json.Tests.Serialization.IPersonContractResolver.CreateContract(System.Type)", file="ArraySliceFilter.cs", label="return base.CreateContract(objectType);", span="104-104"];
m0_1 [cluster="Newtonsoft.Json.Tests.Serialization.DynamicContractResolver.DynamicContractResolver(char)", file="ArraySliceFilter.cs", label="_startingWithChar = startingWithChar", span="60-60"];
m0_6 [cluster="Newtonsoft.Json.Tests.Serialization.DynamicContractResolver.CreateProperties(System.Type, Newtonsoft.Json.MemberSerialization)", file="ArraySliceFilter.cs", label="return properties;", span="71-71"];
m0_7 [cluster="Newtonsoft.Json.Tests.Serialization.DynamicContractResolver.CreateProperties(System.Type, Newtonsoft.Json.MemberSerialization)", file="ArraySliceFilter.cs", label="Exit Newtonsoft.Json.Tests.Serialization.DynamicContractResolver.CreateProperties(System.Type, Newtonsoft.Json.MemberSerialization)", span="63-63"];
m0_8 [cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperties(System.Type, Newtonsoft.Json.MemberSerialization)", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperties(System.Type, Newtonsoft.Json.MemberSerialization)", span="1297-1297"];
m0_11 [cluster="lambda expression", file="ArraySliceFilter.cs", label="Entry lambda expression", span="69-69"];
m0_18 [cluster="Newtonsoft.Json.Tests.Serialization.EscapedPropertiesContractResolver.ResolvePropertyName(string)", file="ArraySliceFilter.cs", label="Exit Newtonsoft.Json.Tests.Serialization.EscapedPropertiesContractResolver.ResolvePropertyName(string)", span="80-80"];
m0_20 [cluster="Newtonsoft.Json.Tests.Serialization.IPersonContractResolver.CreateContract(System.Type)", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Tests.Serialization.IPersonContractResolver.CreateContract(System.Type)", span="97-97"];
m0_3 [cluster="Newtonsoft.Json.Tests.Serialization.DynamicContractResolver.CreateProperties(System.Type, Newtonsoft.Json.MemberSerialization)", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Tests.Serialization.DynamicContractResolver.CreateProperties(System.Type, Newtonsoft.Json.MemberSerialization)", span="63-63"];
m0_2 [cluster="Newtonsoft.Json.Tests.Serialization.DynamicContractResolver.DynamicContractResolver(char)", file="ArraySliceFilter.cs", label="Exit Newtonsoft.Json.Tests.Serialization.DynamicContractResolver.DynamicContractResolver(char)", span="55-55"];
m0_26 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.JsonPropertyDefaultValue()", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.JsonPropertyDefaultValue()", span="120-120"];
m0_5 [cluster="Newtonsoft.Json.Tests.Serialization.DynamicContractResolver.CreateProperties(System.Type, Newtonsoft.Json.MemberSerialization)", file="ArraySliceFilter.cs", label="properties =\r\n                properties.Where(p => p.PropertyName.StartsWith(_startingWithChar.ToString())).ToList()", span="68-69"];
m0_22 [cluster="Newtonsoft.Json.Tests.Serialization.IPersonContractResolver.CreateContract(System.Type)", file="ArraySliceFilter.cs", label="objectType = typeof(IPerson)", span="101-101"];
m0_13 [cluster="lambda expression", file="ArraySliceFilter.cs", label="Exit lambda expression", span="69-69"];
m0_17 [cluster="Newtonsoft.Json.Tests.Serialization.EscapedPropertiesContractResolver.ResolvePropertyName(string)", file="ArraySliceFilter.cs", label="return base.ResolvePropertyName(PropertyPrefix + propertyName + PropertySuffix);", span="82-82"];
m0_4 [cluster="Newtonsoft.Json.Tests.Serialization.DynamicContractResolver.CreateProperties(System.Type, Newtonsoft.Json.MemberSerialization)", file="ArraySliceFilter.cs", label="IList<JsonProperty> properties = base.CreateProperties(type, memberSerialization)", span="65-65"];
m0_10 [cluster="Unk.ToList", file="ArraySliceFilter.cs", label="Entry Unk.ToList", span=""];
m0_12 [cluster="lambda expression", file="ArraySliceFilter.cs", label="p.PropertyName.StartsWith(_startingWithChar.ToString())", span="69-69"];
m0_16 [cluster="Newtonsoft.Json.Tests.Serialization.EscapedPropertiesContractResolver.ResolvePropertyName(string)", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Tests.Serialization.EscapedPropertiesContractResolver.ResolvePropertyName(string)", span="80-80"];
m0_19 [cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.ResolvePropertyName(string)", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Serialization.DefaultContractResolver.ResolvePropertyName(string)", span="1596-1596"];
m0_21 [cluster="Newtonsoft.Json.Tests.Serialization.IPersonContractResolver.CreateContract(System.Type)", file="ArraySliceFilter.cs", label="objectType == typeof(Employee)", span="99-99"];
m0_25 [cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateContract(System.Type)", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Serialization.DefaultContractResolver.CreateContract(System.Type)", span="1118-1118"];
m0_27 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.JsonPropertyDefaultValue()", file="ArraySliceFilter.cs", label="JsonProperty p = new JsonProperty()", span="122-122"];
m0_311 [cluster="System.Console.WriteLine(string)", file="ArraySliceFilter.cs", label="Entry System.Console.WriteLine(string)", span="0-0"];
m0_30 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.JsonPropertyDefaultValue()", file="ArraySliceFilter.cs", label="p.PropertyType = typeof(int)", span="127-127"];
m0_79 [cluster="Unk.IsNull", file="ArraySliceFilter.cs", label="Entry Unk.IsNull", span=""];
m0_287 [cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting, Newtonsoft.Json.JsonSerializerSettings)", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting, Newtonsoft.Json.JsonSerializerSettings)", span="621-621"];
m0_47 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterface()", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterface()", span="149-149"];
m0_48 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterface()", file="ArraySliceFilter.cs", label="var resolver = new DefaultContractResolver()", span="151-151"];
m0_49 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterface()", file="ArraySliceFilter.cs", label="var contract = (JsonArrayContract)resolver.ResolveContract(typeof(IList<int>))", span="152-152"];
m0_50 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterface()", file="ArraySliceFilter.cs", label="Assert.IsTrue(contract.IsInstantiable)", span="154-154"];
m0_51 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterface()", file="ArraySliceFilter.cs", label="Assert.AreEqual(typeof(List<int>), contract.CreatedType)", span="155-155"];
m0_52 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterface()", file="ArraySliceFilter.cs", label="Assert.IsNotNull(contract.DefaultCreator)", span="156-156"];
m0_53 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterface()", file="ArraySliceFilter.cs", label="Exit Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterface()", span="149-149"];
m0_235 [cluster="Unk.Any", file="ArraySliceFilter.cs", label="Entry Unk.Any", span=""];
m0_56 [cluster="Unk.IsTrue", file="ArraySliceFilter.cs", label="Entry Unk.IsTrue", span=""];
m0_43 [cluster="Newtonsoft.Json.Serialization.JsonProperty.JsonProperty()", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Serialization.JsonProperty.JsonProperty()", span="38-38"];
m0_82 [cluster="Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string, Newtonsoft.Json.JsonSerializerSettings)", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string, Newtonsoft.Json.JsonSerializerSettings)", span="817-817"];
m0_177 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeWithHtmlEscapedPropertyName()", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeWithHtmlEscapedPropertyName()", span="328-328"];
m0_178 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeWithHtmlEscapedPropertyName()", file="ArraySliceFilter.cs", label="string json = JsonConvert.SerializeObject(\r\n                new AddressWithDataMember\r\n                {\r\n                    AddressLine1 = ''value!''\r\n                },\r\n                new JsonSerializerSettings\r\n                {\r\n                    ContractResolver = new EscapedPropertiesContractResolver\r\n                    {\r\n                        PropertyPrefix = ''<b>'',\r\n                        PropertySuffix = ''</b>''\r\n                    },\r\n                    StringEscapeHandling = StringEscapeHandling.EscapeHtml\r\n                })", span="330-343"];
m0_179 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeWithHtmlEscapedPropertyName()", file="ArraySliceFilter.cs", label="Assert.AreEqual(@''{''''\u003cb\u003eAddressLine1\u003c/b\u003e'''':''''value!''''}'', json)", span="345-345"];
m0_180 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeWithHtmlEscapedPropertyName()", file="ArraySliceFilter.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="347-347"];
m0_181 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeWithHtmlEscapedPropertyName()", file="ArraySliceFilter.cs", label="reader.Read()", span="348-348"];
m0_182 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeWithHtmlEscapedPropertyName()", file="ArraySliceFilter.cs", label="reader.Read()", span="349-349"];
m0_183 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeWithHtmlEscapedPropertyName()", file="ArraySliceFilter.cs", label="Assert.AreEqual(@''<b>AddressLine1</b>'', reader.Value)", span="351-351"];
m0_184 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeWithHtmlEscapedPropertyName()", file="ArraySliceFilter.cs", label="Exit Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeWithHtmlEscapedPropertyName()", span="328-328"];
m0_31 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.JsonPropertyDefaultValue()", file="ArraySliceFilter.cs", label="Assert.AreEqual(0, p.GetResolvedDefaultValue())", span="129-129"];
m0_36 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.JsonPropertyDefaultValue()", file="ArraySliceFilter.cs", label="p.PropertyType = null", span="137-137"];
m0_37 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.JsonPropertyDefaultValue()", file="ArraySliceFilter.cs", label="Assert.AreEqual(null, p.GetResolvedDefaultValue())", span="139-139"];
m0_38 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.JsonPropertyDefaultValue()", file="ArraySliceFilter.cs", label="Assert.AreEqual(null, p.DefaultValue)", span="140-140"];
m0_39 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.JsonPropertyDefaultValue()", file="ArraySliceFilter.cs", label="p.PropertyType = typeof(CompareOptions)", span="142-142"];
m0_44 [cluster="Newtonsoft.Json.Serialization.JsonProperty.GetResolvedDefaultValue()", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Serialization.JsonProperty.GetResolvedDefaultValue()", span="172-172"];
m0_28 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.JsonPropertyDefaultValue()", file="ArraySliceFilter.cs", label="Assert.AreEqual(null, p.GetResolvedDefaultValue())", span="124-124"];
m0_29 [cluster="System.Math.Max(int, int)", file="ArraySliceFilter.cs", label="Entry System.Math.Max(int, int)", span="0-0"];
m0_32 [cluster="int.ToString(System.IFormatProvider)", file="ArraySliceFilter.cs", label="Entry int.ToString(System.IFormatProvider)", span="0-0"];
m0_33 [cluster="string.FormatWith(System.IFormatProvider, object, object)", file="ArraySliceFilter.cs", label="Entry string.FormatWith(System.IFormatProvider, object, object)", span="52-52"];
m0_34 [cluster="object.GetType()", file="ArraySliceFilter.cs", label="Entry object.GetType()", span="0-0"];
m0_35 [cluster="string.FormatWith(System.IFormatProvider, object)", file="ArraySliceFilter.cs", label="Entry string.FormatWith(System.IFormatProvider, object)", span="47-47"];
m0_40 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.JsonPropertyDefaultValue()", file="ArraySliceFilter.cs", label="Newtonsoft.Json.Linq.JsonPath.ArraySliceFilter", span=""];
m0_41 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.JsonPropertyDefaultValue()", file="ArraySliceFilter.cs", label="Assert.AreEqual(null, p.DefaultValue)", span="145-145"];
m0_42 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.JsonPropertyDefaultValue()", file="ArraySliceFilter.cs", label="Exit Newtonsoft.Json.Tests.Serialization.ContractResolverTests.JsonPropertyDefaultValue()", span="120-120"];
m0_45 [cluster="Unk.AreEqual", file="ArraySliceFilter.cs", label="Entry Unk.AreEqual", span=""];
m0_328 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="ArraySliceFilter.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
m0_46 [cluster="System.DateTime.DateTime()", file="ArraySliceFilter.cs", label="Entry System.DateTime.DateTime()", span="0-0"];
m0_230 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ResolveProperties_IgnoreStatic()", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ResolveProperties_IgnoreStatic()", span="427-427"];
m0_231 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ResolveProperties_IgnoreStatic()", file="ArraySliceFilter.cs", label="var resolver = new DefaultContractResolver()", span="429-429"];
m0_232 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ResolveProperties_IgnoreStatic()", file="ArraySliceFilter.cs", label="var contract = (JsonObjectContract)resolver.ResolveContract(typeof(NumberFormatInfo))", span="430-430"];
m0_233 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ResolveProperties_IgnoreStatic()", file="ArraySliceFilter.cs", label="Assert.IsFalse(contract.Properties.Any(c => c.PropertyName == ''InvariantInfo''))", span="432-432"];
m0_234 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ResolveProperties_IgnoreStatic()", file="ArraySliceFilter.cs", label="Exit Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ResolveProperties_IgnoreStatic()", span="427-427"];
m0_142 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CustomDictionary<TKey, TValue>.CustomDictionary()", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CustomDictionary<TKey, TValue>.CustomDictionary()", span="249-249"];
m0_127 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DictionaryInterfaceDefaultCreator()", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DictionaryInterfaceDefaultCreator()", span="254-254"];
m0_128 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DictionaryInterfaceDefaultCreator()", file="ArraySliceFilter.cs", label="var resolver = new DefaultContractResolver()", span="256-256"];
m0_129 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DictionaryInterfaceDefaultCreator()", file="ArraySliceFilter.cs", label="var contract = (JsonDictionaryContract)resolver.ResolveContract(typeof(IDictionary<string, int>))", span="257-257"];
m0_133 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DictionaryInterfaceDefaultCreator()", file="ArraySliceFilter.cs", label="var d = JsonConvert.DeserializeObject<IDictionary<string, int>>(@''{key1:1,key2:2}'', new JsonSerializerSettings\r\n            {\r\n                ContractResolver = resolver\r\n            })", span="264-267"];
m0_130 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DictionaryInterfaceDefaultCreator()", file="ArraySliceFilter.cs", label="Assert.IsTrue(contract.IsInstantiable)", span="259-259"];
m0_131 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DictionaryInterfaceDefaultCreator()", file="ArraySliceFilter.cs", label="Assert.IsNotNull(contract.DefaultCreator)", span="260-260"];
m0_132 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DictionaryInterfaceDefaultCreator()", file="ArraySliceFilter.cs", label="contract.DefaultCreator = () => new CustomDictionary<string, int>()", span="262-262"];
m0_134 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DictionaryInterfaceDefaultCreator()", file="ArraySliceFilter.cs", label="Assert.AreEqual(typeof(CustomDictionary<string, int>), d.GetType())", span="269-269"];
m0_135 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DictionaryInterfaceDefaultCreator()", file="ArraySliceFilter.cs", label="Assert.AreEqual(2, d.Count)", span="270-270"];
m0_136 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DictionaryInterfaceDefaultCreator()", file="ArraySliceFilter.cs", label="Assert.AreEqual(1, d[''key1''])", span="271-271"];
m0_137 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DictionaryInterfaceDefaultCreator()", file="ArraySliceFilter.cs", label="Assert.AreEqual(2, d[''key2''])", span="272-272"];
m0_138 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DictionaryInterfaceDefaultCreator()", file="ArraySliceFilter.cs", label="Exit Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DictionaryInterfaceDefaultCreator()", span="254-254"];
m0_174 [cluster="Newtonsoft.Json.JsonTextReader.JsonTextReader(System.IO.TextReader)", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.JsonTextReader.JsonTextReader(System.IO.TextReader)", span="78-78"];
m0_326 [cluster="Newtonsoft.Json.Serialization.ExtensionDataGetter.Invoke(object)", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Serialization.ExtensionDataGetter.Invoke(object)", span="75-75"];
m0_185 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", span="355-355"];
m0_186 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs", label="JsonProperty p = new JsonProperty { PropertyName = ''abc'' }", span="357-357"];
m0_187 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs", label="Assert.IsTrue(p._skipPropertyNameEscape)", span="358-358"];
m0_188 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs", label="p = new JsonProperty { PropertyName = ''123'' }", span="360-360"];
m0_189 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs", label="Assert.IsTrue(p._skipPropertyNameEscape)", span="361-361"];
m0_190 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs", label="p = new JsonProperty { PropertyName = ''._-'' }", span="363-363"];
m0_191 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs", label="Assert.IsTrue(p._skipPropertyNameEscape)", span="364-364"];
m0_192 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs", label="p = new JsonProperty { PropertyName = ''!@#'' }", span="366-366"];
m0_193 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs", label="Assert.IsTrue(p._skipPropertyNameEscape)", span="367-367"];
m0_194 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs", label="p = new JsonProperty { PropertyName = ''$%^'' }", span="369-369"];
m0_195 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs", label="Assert.IsTrue(p._skipPropertyNameEscape)", span="370-370"];
m0_196 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs", label="p = new JsonProperty { PropertyName = ''?*('' }", span="372-372"];
m0_197 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs", label="Assert.IsTrue(p._skipPropertyNameEscape)", span="373-373"];
m0_198 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs", label="p = new JsonProperty { PropertyName = '')_+'' }", span="375-375"];
m0_199 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs", label="Assert.IsTrue(p._skipPropertyNameEscape)", span="376-376"];
m0_200 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs", label="p = new JsonProperty { PropertyName = ''=:,'' }", span="378-378"];
m0_201 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs", label="Assert.IsTrue(p._skipPropertyNameEscape)", span="379-379"];
m0_202 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs", label="p = new JsonProperty { PropertyName = null }", span="381-381"];
m0_203 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs", label="Assert.IsTrue(p._skipPropertyNameEscape)", span="382-382"];
m0_204 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs", label="p = new JsonProperty { PropertyName = ''&'' }", span="384-384"];
m0_205 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs", label="Assert.IsFalse(p._skipPropertyNameEscape)", span="385-385"];
m0_206 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs", label="p = new JsonProperty { PropertyName = ''<'' }", span="387-387"];
m0_207 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs", label="Assert.IsFalse(p._skipPropertyNameEscape)", span="388-388"];
m0_208 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs", label="p = new JsonProperty { PropertyName = ''>'' }", span="390-390"];
m0_209 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs", label="Assert.IsFalse(p._skipPropertyNameEscape)", span="391-391"];
m0_210 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs", label="p = new JsonProperty { PropertyName = ''''' }", span="393-393"];
m0_211 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs", label="Assert.IsFalse(p._skipPropertyNameEscape)", span="394-394"];
m0_212 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs", label="p = new JsonProperty { PropertyName = @'''''''' }", span="396-396"];
m0_213 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs", label="Assert.IsFalse(p._skipPropertyNameEscape)", span="397-397"];
m0_214 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs", label="p = new JsonProperty { PropertyName = Environment.NewLine }", span="399-399"];
m0_215 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs", label="Assert.IsFalse(p._skipPropertyNameEscape)", span="400-400"];
m0_216 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs", label="p = new JsonProperty { PropertyName = ''\0'' }", span="402-402"];
m0_217 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs", label="Assert.IsFalse(p._skipPropertyNameEscape)", span="403-403"];
m0_218 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs", label="p = new JsonProperty { PropertyName = ''\n'' }", span="405-405"];
m0_219 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs", label="Assert.IsFalse(p._skipPropertyNameEscape)", span="406-406"];
m0_220 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs", label="p = new JsonProperty { PropertyName = ''\v'' }", span="408-408"];
m0_221 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs", label="Assert.IsFalse(p._skipPropertyNameEscape)", span="409-409"];
m0_222 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs", label="p = new JsonProperty { PropertyName = ''\u00B9'' }", span="411-411"];
m0_223 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs", label="Assert.IsFalse(p._skipPropertyNameEscape)", span="412-412"];
m0_224 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs", label="Exit Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", span="355-355"];
m0_332 [cluster="lambda expression", file="ArraySliceFilter.cs", label="Entry lambda expression", span="635-635"];
m0_84 [cluster="lambda expression", file="ArraySliceFilter.cs", label="JsonConvert.DeserializeObject<AbstractTestClass>(@''{Value:'Value!'}'', new JsonSerializerSettings\r\n            {\r\n                ContractResolver = resolver\r\n            })", span="180-183"];
m0_83 [cluster="lambda expression", file="ArraySliceFilter.cs", label="Entry lambda expression", span="180-183"];
m0_85 [cluster="lambda expression", file="ArraySliceFilter.cs", label="Exit lambda expression", span="180-183"];
m0_86 [cluster="lambda expression", file="ArraySliceFilter.cs", label="Entry lambda expression", span="185-185"];
m0_87 [cluster="lambda expression", file="ArraySliceFilter.cs", label="new AbstractImplementationTestClass()", span="185-185"];
m0_88 [cluster="lambda expression", file="ArraySliceFilter.cs", label="Exit lambda expression", span="185-185"];
m0_104 [cluster="lambda expression", file="ArraySliceFilter.cs", label="JsonConvert.DeserializeObject<AbstractListTestClass<int>>(@''[1,2]'', new JsonSerializerSettings\r\n            {\r\n                ContractResolver = resolver\r\n            })", span="205-208"];
m0_103 [cluster="lambda expression", file="ArraySliceFilter.cs", label="Entry lambda expression", span="205-208"];
m0_105 [cluster="lambda expression", file="ArraySliceFilter.cs", label="Exit lambda expression", span="205-208"];
m0_106 [cluster="lambda expression", file="ArraySliceFilter.cs", label="Entry lambda expression", span="210-210"];
m0_107 [cluster="lambda expression", file="ArraySliceFilter.cs", label="new AbstractImplementationListTestClass<int>()", span="210-210"];
m0_108 [cluster="lambda expression", file="ArraySliceFilter.cs", label="Exit lambda expression", span="210-210"];
m0_123 [cluster="lambda expression", file="ArraySliceFilter.cs", label="Entry lambda expression", span="235-235"];
m0_124 [cluster="lambda expression", file="ArraySliceFilter.cs", label="new CustomList<int>()", span="235-235"];
m0_125 [cluster="lambda expression", file="ArraySliceFilter.cs", label="Exit lambda expression", span="235-235"];
m0_139 [cluster="lambda expression", file="ArraySliceFilter.cs", label="Entry lambda expression", span="262-262"];
m0_140 [cluster="lambda expression", file="ArraySliceFilter.cs", label="new CustomDictionary<string, int>()", span="262-262"];
m0_141 [cluster="lambda expression", file="ArraySliceFilter.cs", label="Exit lambda expression", span="262-262"];
m0_157 [cluster="lambda expression", file="ArraySliceFilter.cs", label="JsonConvert.DeserializeObject<AbstractDictionaryTestClass<string, int>>(@''{key1:1,key2:2}'', new JsonSerializerSettings\r\n            {\r\n                ContractResolver = resolver\r\n            })", span="285-288"];
m0_156 [cluster="lambda expression", file="ArraySliceFilter.cs", label="Entry lambda expression", span="285-288"];
m0_158 [cluster="lambda expression", file="ArraySliceFilter.cs", label="Exit lambda expression", span="285-288"];
m0_159 [cluster="lambda expression", file="ArraySliceFilter.cs", label="Entry lambda expression", span="290-290"];
m0_160 [cluster="lambda expression", file="ArraySliceFilter.cs", label="new AbstractImplementationDictionaryTestClass<string, int>()", span="290-290"];
m0_161 [cluster="lambda expression", file="ArraySliceFilter.cs", label="Exit lambda expression", span="290-290"];
m0_236 [cluster="lambda expression", file="ArraySliceFilter.cs", label="Entry lambda expression", span="432-432"];
m0_237 [cluster="lambda expression", file="ArraySliceFilter.cs", label="c.PropertyName == ''InvariantInfo''", span="432-432"];
m0_238 [cluster="lambda expression", file="ArraySliceFilter.cs", label="Exit lambda expression", span="432-432"];
m0_276 [cluster="lambda expression", file="ArraySliceFilter.cs", label="return new MultipleParametrizedConstructorsJsonConstructor((string)args[0], (int)args[1]);", span="487-487"];
m0_274 [cluster="lambda expression", file="ArraySliceFilter.cs", label="Entry lambda expression", span="484-488"];
m0_275 [cluster="lambda expression", file="ArraySliceFilter.cs", label="ensureCustomCreatorCalled = true", span="486-486"];
m0_277 [cluster="lambda expression", file="ArraySliceFilter.cs", label="Exit lambda expression", span="484-488"];
m0_329 [cluster="lambda expression", file="ArraySliceFilter.cs", label="Entry lambda expression", span="635-635"];
m0_330 [cluster="lambda expression", file="ArraySliceFilter.cs", label="kv.Key", span="635-635"];
m0_331 [cluster="lambda expression", file="ArraySliceFilter.cs", label="Exit lambda expression", span="635-635"];
m0_333 [cluster="lambda expression", file="ArraySliceFilter.cs", label="kv.Value", span="635-635"];
m0_334 [cluster="lambda expression", file="ArraySliceFilter.cs", label="Exit lambda expression", span="635-635"];
m0_110 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterfaceDefaultCreator()", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterfaceDefaultCreator()", span="227-227"];
m0_111 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterfaceDefaultCreator()", file="ArraySliceFilter.cs", label="var resolver = new DefaultContractResolver()", span="229-229"];
m0_112 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterfaceDefaultCreator()", file="ArraySliceFilter.cs", label="var contract = (JsonArrayContract)resolver.ResolveContract(typeof(IList<int>))", span="230-230"];
m0_116 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterfaceDefaultCreator()", file="ArraySliceFilter.cs", label="var l = JsonConvert.DeserializeObject<IList<int>>(@''[1,2,3]'', new JsonSerializerSettings\r\n            {\r\n                ContractResolver = resolver\r\n            })", span="237-240"];
m0_113 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterfaceDefaultCreator()", file="ArraySliceFilter.cs", label="Assert.IsTrue(contract.IsInstantiable)", span="232-232"];
m0_114 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterfaceDefaultCreator()", file="ArraySliceFilter.cs", label="Assert.IsNotNull(contract.DefaultCreator)", span="233-233"];
m0_115 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterfaceDefaultCreator()", file="ArraySliceFilter.cs", label="contract.DefaultCreator = () => new CustomList<int>()", span="235-235"];
m0_117 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterfaceDefaultCreator()", file="ArraySliceFilter.cs", label="Assert.AreEqual(typeof(CustomList<int>), l.GetType())", span="242-242"];
m0_118 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterfaceDefaultCreator()", file="ArraySliceFilter.cs", label="Assert.AreEqual(3, l.Count)", span="243-243"];
m0_119 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterfaceDefaultCreator()", file="ArraySliceFilter.cs", label="Assert.AreEqual(1, l[0])", span="244-244"];
m0_120 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterfaceDefaultCreator()", file="ArraySliceFilter.cs", label="Assert.AreEqual(2, l[1])", span="245-245"];
m0_121 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterfaceDefaultCreator()", file="ArraySliceFilter.cs", label="Assert.AreEqual(3, l[2])", span="246-246"];
m0_122 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterfaceDefaultCreator()", file="ArraySliceFilter.cs", label="Exit Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterfaceDefaultCreator()", span="227-227"];
m0_67 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractTestClass()", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractTestClass()", span="171-171"];
m0_68 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractTestClass()", file="ArraySliceFilter.cs", label="var resolver = new DefaultContractResolver()", span="173-173"];
m0_69 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractTestClass()", file="ArraySliceFilter.cs", label="var contract = (JsonObjectContract)resolver.ResolveContract(typeof(AbstractTestClass))", span="174-174"];
m0_73 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractTestClass()", file="ArraySliceFilter.cs", label="ExceptionAssert.Throws<JsonSerializationException>(() => JsonConvert.DeserializeObject<AbstractTestClass>(@''{Value:'Value!'}'', new JsonSerializerSettings\r\n            {\r\n                ContractResolver = resolver\r\n            }), ''Could not create an instance of type Newtonsoft.Json.Tests.Serialization.AbstractTestClass. Type is an interface or abstract class and cannot be instantiated. Path 'Value', line 1, position 7.'')", span="180-183"];
m0_75 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractTestClass()", file="ArraySliceFilter.cs", label="var o = JsonConvert.DeserializeObject<AbstractTestClass>(@''{Value:'Value!'}'', new JsonSerializerSettings\r\n            {\r\n                ContractResolver = resolver\r\n            })", span="187-190"];
m0_70 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractTestClass()", file="ArraySliceFilter.cs", label="Assert.IsFalse(contract.IsInstantiable)", span="176-176"];
m0_71 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractTestClass()", file="ArraySliceFilter.cs", label="Assert.IsNull(contract.DefaultCreator)", span="177-177"];
m0_72 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractTestClass()", file="ArraySliceFilter.cs", label="Assert.IsNull(contract.OverrideCreator)", span="178-178"];
m0_74 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractTestClass()", file="ArraySliceFilter.cs", label="contract.DefaultCreator = () => new AbstractImplementationTestClass()", span="185-185"];
m0_76 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractTestClass()", file="ArraySliceFilter.cs", label="Assert.AreEqual(''Value!'', o.Value)", span="192-192"];
m0_77 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractTestClass()", file="ArraySliceFilter.cs", label="Exit Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractTestClass()", span="171-171"];
m0_176 [cluster="Newtonsoft.Json.JsonTextReader.Read()", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.JsonTextReader.Read()", span="366-366"];
m0_250 [cluster="System.Type.GetConstructor(System.Type[])", file="ArraySliceFilter.cs", label="Entry System.Type.GetConstructor(System.Type[])", span="0-0"];
m0_325 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="ArraySliceFilter.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m0_54 [cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.DefaultContractResolver()", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Serialization.DefaultContractResolver.DefaultContractResolver()", span="195-195"];
m0_80 [cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", span="350-350"];
m0_289 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SingleTypeWithMultipleContractResolvers()", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SingleTypeWithMultipleContractResolvers()", span="526-526"];
m0_290 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SingleTypeWithMultipleContractResolvers()", file="ArraySliceFilter.cs", label="Book book = new Book\r\n            {\r\n                BookName = ''The Gathering Storm'',\r\n                BookPrice = 16.19m,\r\n                AuthorName = ''Brandon Sanderson'',\r\n                AuthorAge = 34,\r\n                AuthorCountry = ''United States of America''\r\n            }", span="528-535"];
m0_291 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SingleTypeWithMultipleContractResolvers()", file="ArraySliceFilter.cs", label="string startingWithA = JsonConvert.SerializeObject(book, Formatting.Indented,\r\n                new JsonSerializerSettings { ContractResolver = new DynamicContractResolver('A') })", span="537-538"];
m0_292 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SingleTypeWithMultipleContractResolvers()", file="ArraySliceFilter.cs", label="string startingWithB = JsonConvert.SerializeObject(book, Formatting.Indented,\r\n                new JsonSerializerSettings { ContractResolver = new DynamicContractResolver('B') })", span="546-547"];
m0_293 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SingleTypeWithMultipleContractResolvers()", file="ArraySliceFilter.cs", label="StringAssert.AreEqual(@''{\r\n  ''''AuthorName'''': ''''Brandon Sanderson'''',\r\n  ''''AuthorAge'''': 34,\r\n  ''''AuthorCountry'''': ''''United States of America''''\r\n}'', startingWithA)", span="554-558"];
m0_294 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SingleTypeWithMultipleContractResolvers()", file="ArraySliceFilter.cs", label="StringAssert.AreEqual(@''{\r\n  ''''BookName'''': ''''The Gathering Storm'''',\r\n  ''''BookPrice'''': 16.19\r\n}'', startingWithB)", span="560-563"];
m0_295 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SingleTypeWithMultipleContractResolvers()", file="ArraySliceFilter.cs", label="Exit Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SingleTypeWithMultipleContractResolvers()", span="526-526"];
m0_172 [cluster="Newtonsoft.Json.Tests.Serialization.EscapedPropertiesContractResolver.EscapedPropertiesContractResolver()", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Tests.Serialization.EscapedPropertiesContractResolver.EscapedPropertiesContractResolver()", span="75-75"];
m0_173 [cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.JsonSerializerSettings)", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.JsonSerializerSettings)", span="585-585"];
m0_309 [cluster="Newtonsoft.Json.Tests.TestObjects.StructTest.StructTest()", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Tests.TestObjects.StructTest.StructTest()", span="27-27"];
m0_162 [cluster="Newtonsoft.Json.Tests.Serialization.AbstractImplementationDictionaryTestClass<TKey, TValue>.AbstractImplementationDictionaryTestClass()", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Tests.Serialization.AbstractImplementationDictionaryTestClass<TKey, TValue>.AbstractImplementationDictionaryTestClass()", span="9826-9826"];
m0_278 [cluster="Newtonsoft.Json.Tests.Serialization.MultipleParametrizedConstructorsJsonConstructor.MultipleParametrizedConstructorsJsonConstructor(string, int)", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Tests.Serialization.MultipleParametrizedConstructorsJsonConstructor.MultipleParametrizedConstructorsJsonConstructor(string, int)", span="9861-9861"];
m0_66 [cluster="object.GetType()", file="ArraySliceFilter.cs", label="Entry object.GetType()", span="0-0"];
m0_297 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeCompilerGeneratedMembers()", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeCompilerGeneratedMembers()", span="569-569"];
m0_298 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeCompilerGeneratedMembers()", file="ArraySliceFilter.cs", label="StructTest structTest = new StructTest\r\n            {\r\n                IntField = 1,\r\n                IntProperty = 2,\r\n                StringField = ''Field'',\r\n                StringProperty = ''Property''\r\n            }", span="571-577"];
m0_299 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeCompilerGeneratedMembers()", file="ArraySliceFilter.cs", label="DefaultContractResolver skipCompilerGeneratedResolver = new DefaultContractResolver\r\n            {\r\n                DefaultMembersSearchFlags = BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public\r\n            }", span="579-582"];
m0_300 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeCompilerGeneratedMembers()", file="ArraySliceFilter.cs", label="string skipCompilerGeneratedJson = JsonConvert.SerializeObject(structTest, Formatting.Indented,\r\n                new JsonSerializerSettings { ContractResolver = skipCompilerGeneratedResolver })", span="584-585"];
m0_303 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeCompilerGeneratedMembers()", file="ArraySliceFilter.cs", label="string includeCompilerGeneratedJson = JsonConvert.SerializeObject(structTest, Formatting.Indented,\r\n                new JsonSerializerSettings { ContractResolver = includeCompilerGeneratedResolver })", span="600-601"];
m0_301 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeCompilerGeneratedMembers()", file="ArraySliceFilter.cs", label="StringAssert.AreEqual(@''{\r\n  ''''StringField'''': ''''Field'''',\r\n  ''''IntField'''': 1,\r\n  ''''StringProperty'''': ''''Property'''',\r\n  ''''IntProperty'''': 2\r\n}'', skipCompilerGeneratedJson)", span="587-592"];
m0_302 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeCompilerGeneratedMembers()", file="ArraySliceFilter.cs", label="DefaultContractResolver includeCompilerGeneratedResolver = new DefaultContractResolver\r\n            {\r\n                DefaultMembersSearchFlags = BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public,\r\n                SerializeCompilerGeneratedMembers = true\r\n            }", span="594-598"];
m0_304 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeCompilerGeneratedMembers()", file="ArraySliceFilter.cs", label="JObject o = JObject.Parse(includeCompilerGeneratedJson)", span="603-603"];
m0_305 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeCompilerGeneratedMembers()", file="ArraySliceFilter.cs", label="Console.WriteLine(includeCompilerGeneratedJson)", span="605-605"];
m0_306 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeCompilerGeneratedMembers()", file="ArraySliceFilter.cs", label="Assert.AreEqual(''Property'', (string)o[''<StringProperty>k__BackingField''])", span="607-607"];
m0_307 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeCompilerGeneratedMembers()", file="ArraySliceFilter.cs", label="Assert.AreEqual(2, (int)o[''<IntProperty>k__BackingField''])", span="608-608"];
m0_308 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeCompilerGeneratedMembers()", file="ArraySliceFilter.cs", label="Exit Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeCompilerGeneratedMembers()", span="569-569"];
m0_89 [cluster="Newtonsoft.Json.Tests.Serialization.AbstractImplementationTestClass.AbstractImplementationTestClass()", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Tests.Serialization.AbstractImplementationTestClass.AbstractImplementationTestClass()", span="9810-9810"];
m0_285 [cluster="System.DateTime.DateTime(int, int, int, int, int, int, System.DateTimeKind)", file="ArraySliceFilter.cs", label="Entry System.DateTime.DateTime(int, int, int, int, int, int, System.DateTimeKind)", span="0-0"];
m0_239 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ParameterizedCreator()", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ParameterizedCreator()", span="436-436"];
m0_240 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ParameterizedCreator()", file="ArraySliceFilter.cs", label="var resolver = new DefaultContractResolver()", span="438-438"];
m0_241 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ParameterizedCreator()", file="ArraySliceFilter.cs", label="var contract = (JsonObjectContract)resolver.ResolveContract(typeof(PublicParameterizedConstructorWithPropertyNameConflictWithAttribute))", span="439-439"];
m0_242 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ParameterizedCreator()", file="ArraySliceFilter.cs", label="Assert.IsNull(contract.DefaultCreator)", span="441-441"];
m0_243 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ParameterizedCreator()", file="ArraySliceFilter.cs", label="Assert.IsNotNull(contract.ParameterizedCreator)", span="442-442"];
m0_244 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ParameterizedCreator()", file="ArraySliceFilter.cs", label="Assert.AreEqual(contract.ParametrizedConstructor, typeof(PublicParameterizedConstructorWithPropertyNameConflictWithAttribute).GetConstructor(new[] { typeof(string) }))", span="444-444"];
m0_245 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ParameterizedCreator()", file="ArraySliceFilter.cs", label="Assert.AreEqual(1, contract.CreatorParameters.Count)", span="446-446"];
m0_246 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ParameterizedCreator()", file="ArraySliceFilter.cs", label="Assert.AreEqual(''name'', contract.CreatorParameters[0].PropertyName)", span="447-447"];
m0_247 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ParameterizedCreator()", file="ArraySliceFilter.cs", label="contract.ParametrizedConstructor = null", span="450-450"];
m0_248 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ParameterizedCreator()", file="ArraySliceFilter.cs", label="Assert.IsNull(contract.ParameterizedCreator)", span="452-452"];
m0_249 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ParameterizedCreator()", file="ArraySliceFilter.cs", label="Exit Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ParameterizedCreator()", span="436-436"];
m0_55 [cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContract(System.Type)", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContract(System.Type)", span="239-239"];
m0_284 [cluster="Newtonsoft.Json.Tests.TestObjects.Employee.Employee()", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Tests.TestObjects.Employee.Employee()", span="63-63"];
m0_263 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CustomOverrideCreator()", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CustomOverrideCreator()", span="477-477"];
m0_264 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CustomOverrideCreator()", file="ArraySliceFilter.cs", label="var resolver = new DefaultContractResolver()", span="479-479"];
m0_265 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CustomOverrideCreator()", file="ArraySliceFilter.cs", label="var contract = (JsonObjectContract)resolver.ResolveContract(typeof(MultipleParametrizedConstructorsJsonConstructor))", span="480-480"];
m0_269 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CustomOverrideCreator()", file="ArraySliceFilter.cs", label="var o = JsonConvert.DeserializeObject<MultipleParametrizedConstructorsJsonConstructor>(''{Value:'value!', Age:1}'', new JsonSerializerSettings\r\n            {\r\n                ContractResolver = resolver\r\n            })", span="493-496"];
m0_266 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CustomOverrideCreator()", file="ArraySliceFilter.cs", label="bool ensureCustomCreatorCalled = false", span="482-482"];
m0_267 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CustomOverrideCreator()", file="ArraySliceFilter.cs", label="contract.OverrideCreator = args =>\r\n            {\r\n                ensureCustomCreatorCalled = true;\r\n                return new MultipleParametrizedConstructorsJsonConstructor((string)args[0], (int)args[1]);\r\n            }", span="484-488"];
m0_268 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CustomOverrideCreator()", file="ArraySliceFilter.cs", label="Assert.IsNull(contract.OverrideConstructor)", span="490-490"];
m0_270 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CustomOverrideCreator()", file="ArraySliceFilter.cs", label="Assert.AreEqual(''value!'', o.Value)", span="498-498"];
m0_271 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CustomOverrideCreator()", file="ArraySliceFilter.cs", label="Assert.AreEqual(1, o.Age)", span="499-499"];
m0_272 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CustomOverrideCreator()", file="ArraySliceFilter.cs", label="Assert.IsTrue(ensureCustomCreatorCalled)", span="500-500"];
m0_273 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CustomOverrideCreator()", file="ArraySliceFilter.cs", label="Exit Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CustomOverrideCreator()", span="477-477"];
m0_288 [cluster="Newtonsoft.Json.Tests.StringAssert.AreEqual(string, string)", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Tests.StringAssert.AreEqual(string, string)", span="321-321"];
m0_109 [cluster="Newtonsoft.Json.Tests.Serialization.AbstractImplementationListTestClass<T>.AbstractImplementationListTestClass()", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Tests.Serialization.AbstractImplementationListTestClass<T>.AbstractImplementationListTestClass()", span="9818-9818"];
m0_312 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ExtensionDataGetterCanBeIteratedMultipleTimes()", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ExtensionDataGetterCanBeIteratedMultipleTimes()", span="620-620"];
m0_313 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ExtensionDataGetterCanBeIteratedMultipleTimes()", file="ArraySliceFilter.cs", label="DefaultContractResolver resolver = new DefaultContractResolver()", span="622-622"];
m0_314 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ExtensionDataGetterCanBeIteratedMultipleTimes()", file="ArraySliceFilter.cs", label="JsonObjectContract contract = (JsonObjectContract)resolver.ResolveContract(typeof(ClassWithExtensionData))", span="623-623"];
m0_315 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ExtensionDataGetterCanBeIteratedMultipleTimes()", file="ArraySliceFilter.cs", label="ClassWithExtensionData myClass = new ClassWithExtensionData\r\n            {\r\n                Data = new Dictionary<string, object>\r\n                {\r\n                    { ''SomeField'', ''Field'' },\r\n                }\r\n            }", span="625-631"];
m0_316 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ExtensionDataGetterCanBeIteratedMultipleTimes()", file="ArraySliceFilter.cs", label="ExtensionDataGetter getter = contract.ExtensionDataGetter", span="633-633"];
m0_317 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ExtensionDataGetterCanBeIteratedMultipleTimes()", file="ArraySliceFilter.cs", label="IEnumerable<KeyValuePair<object, object>> dictionaryData = getter(myClass).ToDictionary(kv => kv.Key, kv => kv.Value)", span="635-635"];
m0_320 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ExtensionDataGetterCanBeIteratedMultipleTimes()", file="ArraySliceFilter.cs", label="IEnumerable<KeyValuePair<object, object>> extensionData = getter(myClass)", span="639-639"];
m0_318 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ExtensionDataGetterCanBeIteratedMultipleTimes()", file="ArraySliceFilter.cs", label="Assert.IsTrue(dictionaryData.Any())", span="636-636"];
m0_319 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ExtensionDataGetterCanBeIteratedMultipleTimes()", file="ArraySliceFilter.cs", label="Assert.IsTrue(dictionaryData.Any())", span="637-637"];
m0_321 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ExtensionDataGetterCanBeIteratedMultipleTimes()", file="ArraySliceFilter.cs", label="Assert.IsTrue(extensionData.Any())", span="640-640"];
m0_322 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ExtensionDataGetterCanBeIteratedMultipleTimes()", file="ArraySliceFilter.cs", label="Assert.IsTrue(extensionData.Any())", span="641-641"];
m0_323 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ExtensionDataGetterCanBeIteratedMultipleTimes()", file="ArraySliceFilter.cs", label="Exit Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ExtensionDataGetterCanBeIteratedMultipleTimes()", span="620-620"];
m0_327 [cluster="Unk.ToDictionary", file="ArraySliceFilter.cs", label="Entry Unk.ToDictionary", span=""];
m0_296 [cluster="Newtonsoft.Json.Tests.Serialization.Book.Book()", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Tests.Serialization.Book.Book()", span="86-86"];
m0_57 [cluster="Unk.IsNotNull", file="ArraySliceFilter.cs", label="Entry Unk.IsNotNull", span=""];
m0_81 [cluster="Newtonsoft.Json.JsonSerializerSettings.JsonSerializerSettings()", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.JsonSerializerSettings.JsonSerializerSettings()", span="433-433"];
m0_335 [file="ArraySliceFilter.cs", label="Newtonsoft.Json.Tests.Serialization.DynamicContractResolver", span=""];
m0_336 [file="ArraySliceFilter.cs", label="Newtonsoft.Json.Tests.Serialization.EscapedPropertiesContractResolver", span=""];
m0_337 [file="ArraySliceFilter.cs", label="Newtonsoft.Json.Tests.Serialization.IPersonContractResolver", span=""];
m0_338 [file="ArraySliceFilter.cs", label=resolver, span=""];
m0_339 [file="ArraySliceFilter.cs", label=resolver, span=""];
m0_340 [file="ArraySliceFilter.cs", label=resolver, span=""];
m1_273 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddArrayToSelf()", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.AddArrayToSelf()", span="450-450"];
m1_274 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddArrayToSelf()", file="BinaryConverter.cs", label="JArray a = new JArray(1, 2)", span="452-452"];
m1_275 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddArrayToSelf()", file="BinaryConverter.cs", label="a.Add(a)", span="453-453"];
m1_276 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddArrayToSelf()", file="BinaryConverter.cs", label="Assert.AreEqual(3, a.Count)", span="455-455"];
m1_277 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddArrayToSelf()", file="BinaryConverter.cs", label="Assert.AreEqual(1, (int)a[0])", span="456-456"];
m1_278 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddArrayToSelf()", file="BinaryConverter.cs", label="Assert.AreEqual(2, (int)a[1])", span="457-457"];
m1_279 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddArrayToSelf()", file="BinaryConverter.cs", label="Assert.AreNotSame(a, a[2])", span="458-458"];
m1_280 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddArrayToSelf()", file="BinaryConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.AddArrayToSelf()", span="450-450"];
m1_207 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertOutOfRangeIndexShouldThrow()", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.InsertOutOfRangeIndexShouldThrow()", span="327-327"];
m1_208 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertOutOfRangeIndexShouldThrow()", file="BinaryConverter.cs", label="JArray j = new JArray()", span="329-329"];
m1_209 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertOutOfRangeIndexShouldThrow()", file="BinaryConverter.cs", label="ExceptionAssert.Throws<ArgumentOutOfRangeException>(() => { j.Insert(2, new JValue(1)); }, @''Index must be within the bounds of the List.\r\nParameter name: index'')", span="331-332"];
m1_210 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertOutOfRangeIndexShouldThrow()", file="BinaryConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.InsertOutOfRangeIndexShouldThrow()", span="327-327"];
m1_357 [cluster="Newtonsoft.Json.IJsonLineInfo.HasLineInfo()", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.IJsonLineInfo.HasLineInfo()", span="38-38"];
m1_16 [cluster="Newtonsoft.Json.Converters.BinaryConverter.GetByteArray(object)", file="BinaryConverter.cs", label="Exit Newtonsoft.Json.Converters.BinaryConverter.GetByteArray(object)", span="64-64"];
m1_17 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Clear()", file="BinaryConverter.cs", label="JArray a = new JArray { 1 }", span="71-71"];
m1_18 [cluster="System.Type.AssignableToTypeName(string)", file="BinaryConverter.cs", label="Entry System.Type.AssignableToTypeName(string)", span="548-548"];
m1_19 [cluster="Newtonsoft.Json.Converters.BinaryConverter.EnsureReflectionObject(System.Type)", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Converters.BinaryConverter.EnsureReflectionObject(System.Type)", span="82-82"];
m1_20 [cluster="Newtonsoft.Json.Utilities.ReflectionObject.GetValue(object, string)", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Utilities.ReflectionObject.GetValue(object, string)", span="57-57"];
m1_21 [cluster="Newtonsoft.Json.JsonSerializationException.JsonSerializationException(string)", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.JsonSerializationException.JsonSerializationException(string)", span="52-52"];
m1_167 [cluster="Newtonsoft.Json.Linq.JArray.Insert(int, Newtonsoft.Json.Linq.JToken)", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Linq.JArray.Insert(int, Newtonsoft.Json.Linq.JToken)", span="311-311"];
m1_51 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.GenericCollectionCopyTo()", file="BinaryConverter.cs", label="Assert.AreEqual(1, (int)a[1])", span="115-115"];
m1_195 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertNull()", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.InsertNull()", span="309-309"];
m1_196 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertNull()", file="BinaryConverter.cs", label="JArray j = new JArray()", span="311-311"];
m1_197 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertNull()", file="BinaryConverter.cs", label="j.Insert(0, null)", span="312-312"];
m1_198 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertNull()", file="BinaryConverter.cs", label="Assert.AreEqual(null, ((JValue)j[0]).Value)", span="314-314"];
m1_199 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertNull()", file="BinaryConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.InsertNull()", span="309-309"];
m1_246 [cluster="Newtonsoft.Json.Linq.JObject.JObject(object)", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Linq.JObject.JObject(object)", span="114-114"];
m1_71 [cluster="lambda expression", file="BinaryConverter.cs", label="Exit lambda expression", span="138-138"];
m1_70 [cluster="lambda expression", file="BinaryConverter.cs", label="((ICollection<JToken>)j).CopyTo(new JToken[1], -1)", span="138-138"];
m1_65 [cluster="Newtonsoft.Json.Converters.BinaryConverter.ReadByteArray(Newtonsoft.Json.JsonReader)", file="BinaryConverter.cs", label="throw JsonSerializationException.Create(reader, ''Unexpected token when reading bytes: {0}''.FormatWith(CultureInfo.InvariantCulture, reader.TokenType));", span="167-167"];
m1_66 [cluster="Newtonsoft.Json.Converters.BinaryConverter.ReadByteArray(Newtonsoft.Json.JsonReader)", file="BinaryConverter.cs", label="throw JsonSerializationException.Create(reader, ''Unexpected end when reading bytes.'');", span="171-171"];
m1_67 [cluster="Newtonsoft.Json.Converters.BinaryConverter.ReadByteArray(Newtonsoft.Json.JsonReader)", file="BinaryConverter.cs", label="Exit Newtonsoft.Json.Converters.BinaryConverter.ReadByteArray(Newtonsoft.Json.JsonReader)", span="150-150"];
m1_68 [cluster="System.Collections.Generic.List<T>.List()", file="BinaryConverter.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m1_22 [cluster="string.FormatWith(System.IFormatProvider, object)", file="BinaryConverter.cs", label="Entry string.FormatWith(System.IFormatProvider, object)", span="47-47"];
m1_54 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.GenericCollectionCopyTo()", file="BinaryConverter.cs", label="Assert.AreEqual(null, a[4])", span="121-121"];
m1_138 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAtOutOfRangeIndexShouldError()", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAtOutOfRangeIndexShouldError()", span="230-230"];
m1_139 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAtOutOfRangeIndexShouldError()", file="BinaryConverter.cs", label="JArray j = new JArray()", span="232-232"];
m1_140 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAtOutOfRangeIndexShouldError()", file="BinaryConverter.cs", label="ExceptionAssert.Throws<ArgumentOutOfRangeException>(() => { j.RemoveAt(0); }, @''Index is equal to or greater than Count.\r\nParameter name: index'')", span="234-235"];
m1_141 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAtOutOfRangeIndexShouldError()", file="BinaryConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAtOutOfRangeIndexShouldError()", span="230-230"];
m1_29 [cluster="Newtonsoft.Json.Converters.BinaryConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="BinaryConverter.cs", label="Type t = (ReflectionUtils.IsNullableType(objectType))\r\n                ? Nullable.GetUnderlyingType(objectType)\r\n                : objectType", span="101-103"];
m1_9 [cluster="Newtonsoft.Json.JsonWriter.WriteValue(byte[])", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.JsonWriter.WriteValue(byte[])", span="1363-1363"];
m1_8 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveSpecificAndRemoveSelf()", file="BinaryConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveSpecificAndRemoveSelf()", span="49-49"];
m1_15 [cluster="Unk.AreEqual", file="BinaryConverter.cs", label="Entry Unk.AreEqual", span=""];
m1_13 [cluster="Unk.IsTrue", file="BinaryConverter.cs", label="Entry Unk.IsTrue", span=""];
m1_11 [cluster="System.Collections.Generic.IEnumerable<TSource>.Last<TSource>()", file="BinaryConverter.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Last<TSource>()", span="0-0"];
m1_12 [cluster="Newtonsoft.Json.Linq.JArray.Remove(Newtonsoft.Json.Linq.JToken)", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Linq.JArray.Remove(Newtonsoft.Json.Linq.JToken)", span="399-399"];
m1_10 [cluster="Newtonsoft.Json.Linq.JArray.JArray(params object[])", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Linq.JArray.JArray(params object[])", span="82-82"];
m1_14 [cluster="Newtonsoft.Json.Linq.JToken.Remove()", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Linq.JToken.Remove()", span="385-385"];
m1_270 [cluster="Newtonsoft.Json.Linq.JArray.JArray(object)", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Linq.JArray.JArray(object)", span="91-91"];
m1_79 [cluster="Newtonsoft.Json.Converters.BinaryConverter.CanConvert(System.Type)", file="BinaryConverter.cs", label="Exit Newtonsoft.Json.Converters.BinaryConverter.CanConvert(System.Type)", span="181-181"];
m1_80 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.GenericCollectionCopyToInsufficientArrayCapacity()", file="BinaryConverter.cs", label="Newtonsoft.Json.Converters.BinaryConverter", span=""];
m1_81 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.GenericCollectionCopyToInsufficientArrayCapacity()", file="BinaryConverter.cs", label="j.Add(new JValue(1))", span="154-154"];
m1_82 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.GenericCollectionCopyToInsufficientArrayCapacity()", file="BinaryConverter.cs", label="j.Add(new JValue(2))", span="155-155"];
m1_83 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.GenericCollectionCopyToInsufficientArrayCapacity()", file="BinaryConverter.cs", label="j.Add(new JValue(3))", span="156-156"];
m1_84 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.GenericCollectionCopyToInsufficientArrayCapacity()", file="BinaryConverter.cs", label="ExceptionAssert.Throws<ArgumentException>(() => { ((ICollection<JToken>)j).CopyTo(new JToken[3], 1); }, @''The number of elements in the source JObject is greater than the available space from arrayIndex to the end of the destination array.'')", span="158-158"];
m1_85 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.GenericCollectionCopyToInsufficientArrayCapacity()", file="BinaryConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.GenericCollectionCopyToInsufficientArrayCapacity()", span="151-151"];
m1_324 [cluster="lambda expression", file="BinaryConverter.cs", label="Entry lambda expression", span="523-523"];
m1_63 [cluster="Newtonsoft.Json.Converters.BinaryConverter.ReadByteArray(Newtonsoft.Json.JsonReader)", file="BinaryConverter.cs", label="return byteList.ToArray();", span="162-162"];
m1_62 [cluster="Newtonsoft.Json.Converters.BinaryConverter.ReadByteArray(Newtonsoft.Json.JsonReader)", file="BinaryConverter.cs", label="JsonToken.EndArray", span="161-161"];
m1_64 [cluster="Newtonsoft.Json.Converters.BinaryConverter.ReadByteArray(Newtonsoft.Json.JsonReader)", file="BinaryConverter.cs", label="JsonToken.Comment", span="163-163"];
m1_69 [cluster="Newtonsoft.Json.JsonReader.Read()", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.JsonReader.Read()", span="409-409"];
m1_77 [cluster="Newtonsoft.Json.Converters.BinaryConverter.CanConvert(System.Type)", file="BinaryConverter.cs", label="return true;", span="192-192"];
m1_76 [cluster="Newtonsoft.Json.Converters.BinaryConverter.CanConvert(System.Type)", file="BinaryConverter.cs", label="objectType == typeof(SqlBinary) || objectType == typeof(SqlBinary?)", span="190-190"];
m1_78 [cluster="Newtonsoft.Json.Converters.BinaryConverter.CanConvert(System.Type)", file="BinaryConverter.cs", label="return false;", span="195-195"];
m1_87 [cluster="lambda expression", file="BinaryConverter.cs", label="((ICollection<JToken>)j).CopyTo(new JToken[3], 1)", span="158-158"];
m1_86 [cluster="lambda expression", file="BinaryConverter.cs", label="Entry lambda expression", span="158-158"];
m1_88 [cluster="lambda expression", file="BinaryConverter.cs", label="Exit lambda expression", span="158-158"];
m1_143 [cluster="lambda expression", file="BinaryConverter.cs", label="j.RemoveAt(0)", span="234-234"];
m1_142 [cluster="lambda expression", file="BinaryConverter.cs", label="Entry lambda expression", span="234-234"];
m1_144 [cluster="lambda expression", file="BinaryConverter.cs", label="Exit lambda expression", span="234-234"];
m1_150 [cluster="lambda expression", file="BinaryConverter.cs", label="j.RemoveAt(-1)", span="243-243"];
m1_149 [cluster="lambda expression", file="BinaryConverter.cs", label="Entry lambda expression", span="243-243"];
m1_151 [cluster="lambda expression", file="BinaryConverter.cs", label="Exit lambda expression", span="243-243"];
m1_205 [cluster="lambda expression", file="BinaryConverter.cs", label="j.Insert(-1, new JValue(1))", span="322-322"];
m1_204 [cluster="lambda expression", file="BinaryConverter.cs", label="Entry lambda expression", span="322-322"];
m1_206 [cluster="lambda expression", file="BinaryConverter.cs", label="Exit lambda expression", span="322-322"];
m1_212 [cluster="lambda expression", file="BinaryConverter.cs", label="j.Insert(2, new JValue(1))", span="331-331"];
m1_211 [cluster="lambda expression", file="BinaryConverter.cs", label="Entry lambda expression", span="331-331"];
m1_213 [cluster="lambda expression", file="BinaryConverter.cs", label="Exit lambda expression", span="331-331"];
m1_234 [cluster="lambda expression", file="BinaryConverter.cs", label="JArray.Parse(json)", span="362-362"];
m1_233 [cluster="lambda expression", file="BinaryConverter.cs", label="Entry lambda expression", span="362-362"];
m1_235 [cluster="lambda expression", file="BinaryConverter.cs", label="Exit lambda expression", span="362-362"];
m1_285 [cluster="lambda expression", file="BinaryConverter.cs", label="Entry lambda expression", span="464-468"];
m1_286 [cluster="lambda expression", file="BinaryConverter.cs", label="JArray a = new JArray()", span="466-466"];
m1_287 [cluster="lambda expression", file="BinaryConverter.cs", label="a[''badvalue''] = new JValue(3)", span="467-467"];
m1_288 [cluster="lambda expression", file="BinaryConverter.cs", label="Exit lambda expression", span="464-468"];
m1_309 [cluster="lambda expression", file="BinaryConverter.cs", label="Entry lambda expression", span="499-499"];
m1_310 [cluster="lambda expression", file="BinaryConverter.cs", label="JArray.Parse(''[1'')", span="499-499"];
m1_311 [cluster="lambda expression", file="BinaryConverter.cs", label="Exit lambda expression", span="499-499"];
m1_325 [cluster="lambda expression", file="BinaryConverter.cs", label="JArray.Parse(json)", span="523-523"];
m1_326 [cluster="lambda expression", file="BinaryConverter.cs", label="Exit lambda expression", span="523-523"];
m1_89 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Remove()", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.Remove()", span="162-162"];
m1_90 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Remove()", file="BinaryConverter.cs", label="JValue v = new JValue(1)", span="164-164"];
m1_91 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Remove()", file="BinaryConverter.cs", label="JArray j = new JArray()", span="165-165"];
m1_92 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Remove()", file="BinaryConverter.cs", label="j.Add(v)", span="166-166"];
m1_96 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Remove()", file="BinaryConverter.cs", label="Assert.AreEqual(true, j.Remove(v))", span="172-172"];
m1_97 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Remove()", file="BinaryConverter.cs", label="Assert.AreEqual(false, j.Remove(v))", span="173-173"];
m1_93 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Remove()", file="BinaryConverter.cs", label="Assert.AreEqual(1, j.Count)", span="168-168"];
m1_94 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Remove()", file="BinaryConverter.cs", label="Assert.AreEqual(false, j.Remove(new JValue(1)))", span="170-170"];
m1_95 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Remove()", file="BinaryConverter.cs", label="Assert.AreEqual(false, j.Remove(null))", span="171-171"];
m1_98 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Remove()", file="BinaryConverter.cs", label="Assert.AreEqual(0, j.Count)", span="175-175"];
m1_99 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Remove()", file="BinaryConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.Remove()", span="162-162"];
m1_50 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.GenericCollectionCopyTo()", file="BinaryConverter.cs", label="Assert.AreEqual(null, a[0])", span="113-113"];
m1_272 [cluster="Unk.IsNotNull", file="BinaryConverter.cs", label="Entry Unk.IsNotNull", span=""];
m1_271 [cluster="System.ComponentModel.ITypedList.GetItemProperties(System.ComponentModel.PropertyDescriptor[])", file="BinaryConverter.cs", label="Entry System.ComponentModel.ITypedList.GetItemProperties(System.ComponentModel.PropertyDescriptor[])", span="0-0"];
m1_27 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddToSelf()", file="BinaryConverter.cs", label="Assert.IsFalse(ReferenceEquals(a[0], a))", span="84-84"];
m1_349 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_LineInfo()", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_LineInfo()", span="559-559"];
m1_350 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_LineInfo()", file="BinaryConverter.cs", label="string json = ''[1,2,3]''", span="561-561"];
m1_351 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_LineInfo()", file="BinaryConverter.cs", label="JArray a = JArray.Parse(json, new JsonLoadSettings\r\n            {\r\n                LineInfoHandling = LineInfoHandling.Load\r\n            })", span="563-566"];
m1_352 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_LineInfo()", file="BinaryConverter.cs", label="Assert.AreEqual(false, ((IJsonLineInfo)a).HasLineInfo())", span="568-568"];
m1_353 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_LineInfo()", file="BinaryConverter.cs", label="Assert.AreEqual(false, ((IJsonLineInfo)a[0]).HasLineInfo())", span="569-569"];
m1_354 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_LineInfo()", file="BinaryConverter.cs", label="Assert.AreEqual(false, ((IJsonLineInfo)a[1]).HasLineInfo())", span="570-570"];
m1_355 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_LineInfo()", file="BinaryConverter.cs", label="Assert.AreEqual(false, ((IJsonLineInfo)a[2]).HasLineInfo())", span="571-571"];
m1_356 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_LineInfo()", file="BinaryConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_LineInfo()", span="559-559"];
m1_214 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Item()", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.Item()", span="336-336"];
m1_215 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Item()", file="BinaryConverter.cs", label="JValue v1 = new JValue(1)", span="338-338"];
m1_216 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Item()", file="BinaryConverter.cs", label="JValue v2 = new JValue(2)", span="339-339"];
m1_220 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Item()", file="BinaryConverter.cs", label="j.Add(v1)", span="345-345"];
m1_217 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Item()", file="BinaryConverter.cs", label="JValue v3 = new JValue(3)", span="340-340"];
m1_221 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Item()", file="BinaryConverter.cs", label="j.Add(v2)", span="346-346"];
m1_224 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Item()", file="BinaryConverter.cs", label="Assert.AreEqual(null, v2.Parent)", span="351-351"];
m1_225 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Item()", file="BinaryConverter.cs", label="Assert.AreEqual(-1, j.IndexOf(v2))", span="352-352"];
m1_218 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Item()", file="BinaryConverter.cs", label="JValue v4 = new JValue(4)", span="341-341"];
m1_222 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Item()", file="BinaryConverter.cs", label="j.Add(v3)", span="347-347"];
m1_219 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Item()", file="BinaryConverter.cs", label="JArray j = new JArray()", span="343-343"];
m1_223 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Item()", file="BinaryConverter.cs", label="j[1] = v4", span="349-349"];
m1_226 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Item()", file="BinaryConverter.cs", label="Assert.AreEqual(j, v4.Parent)", span="353-353"];
m1_227 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Item()", file="BinaryConverter.cs", label="Assert.AreEqual(1, j.IndexOf(v4))", span="354-354"];
m1_228 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Item()", file="BinaryConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.Item()", span="336-336"];
m1_23 [cluster="Newtonsoft.Json.Converters.BinaryConverter.EnsureReflectionObject(System.Type)", file="BinaryConverter.cs", label="_reflectionObject == null", span="84-84"];
m1_31 [cluster="Newtonsoft.Json.Converters.BinaryConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="BinaryConverter.cs", label="!ReflectionUtils.IsNullable(objectType)", span="107-107"];
m1_185 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertShouldInsertAtZeroIndex()", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.InsertShouldInsertAtZeroIndex()", span="293-293"];
m1_186 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertShouldInsertAtZeroIndex()", file="BinaryConverter.cs", label="JValue v1 = new JValue(1)", span="295-295"];
m1_187 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertShouldInsertAtZeroIndex()", file="BinaryConverter.cs", label="JValue v2 = new JValue(2)", span="296-296"];
m1_189 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertShouldInsertAtZeroIndex()", file="BinaryConverter.cs", label="j.Insert(0, v1)", span="300-300"];
m1_190 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertShouldInsertAtZeroIndex()", file="BinaryConverter.cs", label="Assert.AreEqual(0, j.IndexOf(v1))", span="301-301"];
m1_192 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertShouldInsertAtZeroIndex()", file="BinaryConverter.cs", label="Assert.AreEqual(1, j.IndexOf(v1))", span="304-304"];
m1_188 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertShouldInsertAtZeroIndex()", file="BinaryConverter.cs", label="JArray j = new JArray()", span="298-298"];
m1_191 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertShouldInsertAtZeroIndex()", file="BinaryConverter.cs", label="j.Insert(0, v2)", span="303-303"];
m1_193 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertShouldInsertAtZeroIndex()", file="BinaryConverter.cs", label="Assert.AreEqual(0, j.IndexOf(v2))", span="305-305"];
m1_194 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertShouldInsertAtZeroIndex()", file="BinaryConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.InsertShouldInsertAtZeroIndex()", span="293-293"];
m1_337 [cluster="Newtonsoft.Json.Linq.JObject.Parse(string)", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Linq.JObject.Parse(string)", span="409-409"];
m1_56 [cluster="SqlBinary.cstr", file="BinaryConverter.cs", label="Entry SqlBinary.cstr", span=""];
m1_248 [cluster="JArray.cstr", file="BinaryConverter.cs", label="Entry JArray.cstr", span=""];
m1_55 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.GenericCollectionCopyTo()", file="BinaryConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.GenericCollectionCopyTo()", span="101-101"];
m1_119 [cluster="Newtonsoft.Json.Linq.JArray.IndexOf(Newtonsoft.Json.Linq.JToken)", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Linq.JArray.IndexOf(Newtonsoft.Json.Linq.JToken)", span="298-298"];
m1_24 [cluster="Newtonsoft.Json.Converters.BinaryConverter.EnsureReflectionObject(System.Type)", file="BinaryConverter.cs", label="_reflectionObject = ReflectionObject.Create(t, t.GetConstructor(new[] { typeof(byte[]) }), BinaryToArrayName)", span="86-86"];
m1_25 [cluster="Newtonsoft.Json.Converters.BinaryConverter.EnsureReflectionObject(System.Type)", file="BinaryConverter.cs", label="Exit Newtonsoft.Json.Converters.BinaryConverter.EnsureReflectionObject(System.Type)", span="82-82"];
m1_26 [cluster="System.Type.GetConstructor(System.Type[])", file="BinaryConverter.cs", label="Entry System.Type.GetConstructor(System.Type[])", span="0-0"];
m1_28 [cluster="Newtonsoft.Json.Converters.BinaryConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Converters.BinaryConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", span="99-99"];
m1_327 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ToListOnEmptyArray()", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.ToListOnEmptyArray()", span="527-527"];
m1_328 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ToListOnEmptyArray()", file="BinaryConverter.cs", label="string json = @''{''''decks'''':[]}''", span="529-529"];
m1_329 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ToListOnEmptyArray()", file="BinaryConverter.cs", label="JArray decks = (JArray)JObject.Parse(json)[''decks'']", span="531-531"];
m1_330 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ToListOnEmptyArray()", file="BinaryConverter.cs", label="IList<JToken> l = decks.ToList()", span="532-532"];
m1_331 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ToListOnEmptyArray()", file="BinaryConverter.cs", label="Assert.AreEqual(0, l.Count)", span="533-533"];
m1_332 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ToListOnEmptyArray()", file="BinaryConverter.cs", label="json = @''{''''decks'''':[1]}''", span="535-535"];
m1_333 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ToListOnEmptyArray()", file="BinaryConverter.cs", label="decks = (JArray)JObject.Parse(json)[''decks'']", span="537-537"];
m1_334 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ToListOnEmptyArray()", file="BinaryConverter.cs", label="l = decks.ToList()", span="538-538"];
m1_335 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ToListOnEmptyArray()", file="BinaryConverter.cs", label="Assert.AreEqual(1, l.Count)", span="539-539"];
m1_336 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ToListOnEmptyArray()", file="BinaryConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.ToListOnEmptyArray()", span="527-527"];
m1_48 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.GenericCollectionCopyTo()", file="BinaryConverter.cs", label="JToken[] a = new JToken[5]", span="109-109"];
m1_338 [cluster="System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", file="BinaryConverter.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", span="0-0"];
m1_348 [cluster="Newtonsoft.Json.Linq.JArray.Parse(string, Newtonsoft.Json.Linq.JsonLoadSettings)", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Linq.JArray.Parse(string, Newtonsoft.Json.Linq.JsonLoadSettings)", span="172-172"];
m1_347 [cluster="Newtonsoft.Json.Linq.JsonLoadSettings.JsonLoadSettings()", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Linq.JsonLoadSettings.JsonLoadSettings()", span="7-7"];
m1_137 [cluster="Newtonsoft.Json.Linq.JArray.RemoveAt(int)", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Linq.JArray.RemoveAt(int)", span="323-323"];
m1_229 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_ShouldThrowOnUnexpectedToken()", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_ShouldThrowOnUnexpectedToken()", span="358-358"];
m1_230 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_ShouldThrowOnUnexpectedToken()", file="BinaryConverter.cs", label="string json = @''{''''prop'''':''''value''''}''", span="360-360"];
m1_231 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_ShouldThrowOnUnexpectedToken()", file="BinaryConverter.cs", label="ExceptionAssert.Throws<JsonReaderException>(() => { JArray.Parse(json); }, ''Error reading JArray from JsonReader. Current JsonReader item is not an array: StartObject. Path '', line 1, position 1.'')", span="362-362"];
m1_232 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_ShouldThrowOnUnexpectedToken()", file="BinaryConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_ShouldThrowOnUnexpectedToken()", span="358-358"];
m1_237 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ArrayOrder()", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.ArrayOrder()", span="372-372"];
m1_238 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ArrayOrder()", file="BinaryConverter.cs", label="string itemZeroText = ''Zero text''", span="374-374"];
m1_239 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ArrayOrder()", file="BinaryConverter.cs", label="IEnumerable<ListItemFields> t = new List<ListItemFields>\r\n            {\r\n                new ListItemFields { ListItemText = ''First'', ListItemValue = 1 },\r\n                new ListItemFields { ListItemText = ''Second'', ListItemValue = 2 },\r\n                new ListItemFields { ListItemText = ''Third'', ListItemValue = 3 }\r\n            }", span="376-381"];
m1_240 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ArrayOrder()", file="BinaryConverter.cs", label="JObject optionValues =\r\n                new JObject(\r\n                    new JProperty(''options'',\r\n                        new JArray(\r\n                            new JObject(\r\n                                new JProperty(''text'', itemZeroText),\r\n                                new JProperty(''value'', ''0'')),\r\n                            from r in t\r\n                            orderby r.ListItemValue\r\n                            select new JObject(\r\n                                new JProperty(''text'', r.ListItemText),\r\n                                new JProperty(''value'', r.ListItemValue.ToString())))))", span="383-394"];
m1_241 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ArrayOrder()", file="BinaryConverter.cs", label="string result = ''myOptions = '' + optionValues.ToString()", span="396-396"];
m1_242 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ArrayOrder()", file="BinaryConverter.cs", label="StringAssert.AreEqual(@''myOptions = {\r\n  ''''options'''': [\r\n    {\r\n      ''''text'''': ''''Zero text'''',\r\n      ''''value'''': ''''0''''\r\n    },\r\n    {\r\n      ''''text'''': ''''First'''',\r\n      ''''value'''': ''''1''''\r\n    },\r\n    {\r\n      ''''text'''': ''''Second'''',\r\n      ''''value'''': ''''2''''\r\n    },\r\n    {\r\n      ''''text'''': ''''Third'''',\r\n      ''''value'''': ''''3''''\r\n    }\r\n  ]\r\n}'', result)", span="398-417"];
m1_243 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ArrayOrder()", file="BinaryConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.ArrayOrder()", span="372-372"];
m1_100 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", span="179-179"];
m1_101 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", file="BinaryConverter.cs", label="JValue v1 = new JValue(1)", span="181-181"];
m1_102 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", file="BinaryConverter.cs", label="JValue v2 = new JValue(1)", span="182-182"];
m1_105 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", file="BinaryConverter.cs", label="j.Add(v1)", span="187-187"];
m1_106 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", file="BinaryConverter.cs", label="Assert.AreEqual(0, j.IndexOf(v1))", span="188-188"];
m1_108 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", file="BinaryConverter.cs", label="Assert.AreEqual(0, j.IndexOf(v1))", span="191-191"];
m1_111 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", file="BinaryConverter.cs", label="Assert.AreEqual(1, j.IndexOf(v1))", span="195-195"];
m1_115 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", file="BinaryConverter.cs", label="Assert.AreEqual(0, j.IndexOf(v1))", span="200-200"];
m1_103 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", file="BinaryConverter.cs", label="JValue v3 = new JValue(1)", span="183-183"];
m1_107 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", file="BinaryConverter.cs", label="j.Add(v2)", span="190-190"];
m1_109 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", file="BinaryConverter.cs", label="Assert.AreEqual(1, j.IndexOf(v2))", span="192-192"];
m1_112 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", file="BinaryConverter.cs", label="Assert.AreEqual(2, j.IndexOf(v2))", span="196-196"];
m1_116 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", file="BinaryConverter.cs", label="Assert.AreEqual(1, j.IndexOf(v2))", span="201-201"];
m1_104 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", file="BinaryConverter.cs", label="JArray j = new JArray()", span="185-185"];
m1_110 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", file="BinaryConverter.cs", label="j.AddFirst(v3)", span="194-194"];
m1_113 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", file="BinaryConverter.cs", label="Assert.AreEqual(0, j.IndexOf(v3))", span="197-197"];
m1_114 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", file="BinaryConverter.cs", label="v3.Remove()", span="199-199"];
m1_117 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", file="BinaryConverter.cs", label="Assert.AreEqual(-1, j.IndexOf(v3))", span="202-202"];
m1_118 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", file="BinaryConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", span="179-179"];
m1_121 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAt()", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAt()", span="206-206"];
m1_122 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAt()", file="BinaryConverter.cs", label="JValue v1 = new JValue(1)", span="208-208"];
m1_123 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAt()", file="BinaryConverter.cs", label="JValue v2 = new JValue(1)", span="209-209"];
m1_126 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAt()", file="BinaryConverter.cs", label="j.Add(v1)", span="214-214"];
m1_129 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAt()", file="BinaryConverter.cs", label="Assert.AreEqual(true, j.Contains(v1))", span="218-218"];
m1_131 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAt()", file="BinaryConverter.cs", label="Assert.AreEqual(false, j.Contains(v1))", span="220-220"];
m1_124 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAt()", file="BinaryConverter.cs", label="JValue v3 = new JValue(1)", span="210-210"];
m1_127 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAt()", file="BinaryConverter.cs", label="j.Add(v2)", span="215-215"];
m1_125 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAt()", file="BinaryConverter.cs", label="JArray j = new JArray()", span="212-212"];
m1_128 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAt()", file="BinaryConverter.cs", label="j.Add(v3)", span="216-216"];
m1_132 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAt()", file="BinaryConverter.cs", label="Assert.AreEqual(true, j.Contains(v3))", span="222-222"];
m1_134 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAt()", file="BinaryConverter.cs", label="Assert.AreEqual(false, j.Contains(v3))", span="224-224"];
m1_130 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAt()", file="BinaryConverter.cs", label="j.RemoveAt(0)", span="219-219"];
m1_133 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAt()", file="BinaryConverter.cs", label="j.RemoveAt(1)", span="223-223"];
m1_135 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAt()", file="BinaryConverter.cs", label="Assert.AreEqual(1, j.Count)", span="226-226"];
m1_136 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAt()", file="BinaryConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAt()", span="206-206"];
m1_145 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAtNegativeIndexShouldError()", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAtNegativeIndexShouldError()", span="239-239"];
m1_146 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAtNegativeIndexShouldError()", file="BinaryConverter.cs", label="JArray j = new JArray()", span="241-241"];
m1_147 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAtNegativeIndexShouldError()", file="BinaryConverter.cs", label="ExceptionAssert.Throws<ArgumentOutOfRangeException>(() => { j.RemoveAt(-1); }, @''Index is less than 0.\r\nParameter name: index'')", span="243-244"];
m1_148 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAtNegativeIndexShouldError()", file="BinaryConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAtNegativeIndexShouldError()", span="239-239"];
m1_251 [cluster="Newtonsoft.Json.Linq.JToken.ToString()", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Linq.JToken.ToString()", span="422-422"];
m1_339 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_NoComments()", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_NoComments()", span="543-543"];
m1_340 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_NoComments()", file="BinaryConverter.cs", label="string json = ''[1,2/*comment*/,3]''", span="545-545"];
m1_341 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_NoComments()", file="BinaryConverter.cs", label="JArray a = JArray.Parse(json, new JsonLoadSettings\r\n            {\r\n                CommentHandling = CommentHandling.Ignore\r\n            })", span="547-550"];
m1_342 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_NoComments()", file="BinaryConverter.cs", label="Assert.AreEqual(3, a.Count)", span="552-552"];
m1_343 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_NoComments()", file="BinaryConverter.cs", label="Assert.AreEqual(1, (int)a[0])", span="553-553"];
m1_344 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_NoComments()", file="BinaryConverter.cs", label="Assert.AreEqual(2, (int)a[1])", span="554-554"];
m1_345 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_NoComments()", file="BinaryConverter.cs", label="Assert.AreEqual(3, (int)a[2])", span="555-555"];
m1_346 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_NoComments()", file="BinaryConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_NoComments()", span="543-543"];
m1_281 [cluster="Unk.AreNotSame", file="BinaryConverter.cs", label="Entry Unk.AreNotSame", span=""];
m1_200 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertNegativeIndexShouldThrow()", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.InsertNegativeIndexShouldThrow()", span="318-318"];
m1_201 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertNegativeIndexShouldThrow()", file="BinaryConverter.cs", label="JArray j = new JArray()", span="320-320"];
m1_202 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertNegativeIndexShouldThrow()", file="BinaryConverter.cs", label="ExceptionAssert.Throws<ArgumentOutOfRangeException>(() => { j.Insert(-1, new JValue(1)); }, @''Index was out of range. Must be non-negative and less than the size of the collection.\r\nParameter name: index'')", span="322-323"];
m1_203 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertNegativeIndexShouldThrow()", file="BinaryConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.InsertNegativeIndexShouldThrow()", span="318-318"];
m1_236 [cluster="Newtonsoft.Json.Linq.JArray.Parse(string)", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Linq.JArray.Parse(string)", span="157-157"];
m1_247 [cluster="Newtonsoft.Json.Linq.JProperty.JProperty(string, object)", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Linq.JProperty.JProperty(string, object)", span="326-326"];
m1_42 [cluster="Newtonsoft.Json.Converters.BinaryConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="BinaryConverter.cs", label="EnsureReflectionObject(t)", span="136-136"];
m1_43 [cluster="Newtonsoft.Json.Converters.BinaryConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", color=red, community=0, file="BinaryConverter.cs", label="-1: return _reflectionObject.Creator(data);", span="138-138"];
m1_44 [cluster="Newtonsoft.Json.Converters.BinaryConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", color=red, community=0, file="BinaryConverter.cs", label="-1: t == typeof(SqlBinary)", span="142-142"];
m1_45 [cluster="Newtonsoft.Json.Converters.BinaryConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="BinaryConverter.cs", label="return new SqlBinary(data);", span="144-144"];
m1_46 [cluster="Newtonsoft.Json.Converters.BinaryConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="BinaryConverter.cs", label="throw JsonSerializationException.Create(reader, ''Unexpected object type when writing binary: {0}''.FormatWith(CultureInfo.InvariantCulture, objectType));", span="147-147"];
m1_47 [cluster="Newtonsoft.Json.Converters.BinaryConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="BinaryConverter.cs", label="Exit Newtonsoft.Json.Converters.BinaryConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", span="99-99"];
m1_49 [cluster="System.Nullable.GetUnderlyingType(System.Type)", file="BinaryConverter.cs", label="Entry System.Nullable.GetUnderlyingType(System.Type)", span="0-0"];
m1_52 [cluster="Newtonsoft.Json.Converters.BinaryConverter.ReadByteArray(Newtonsoft.Json.JsonReader)", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Converters.BinaryConverter.ReadByteArray(Newtonsoft.Json.JsonReader)", span="150-150"];
m1_53 [cluster="object.ToString()", file="BinaryConverter.cs", label="Entry object.ToString()", span="0-0"];
m1_40 [cluster="Newtonsoft.Json.Converters.BinaryConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", color=green, community=0, file="BinaryConverter.cs", label="-1: throw JsonSerializationException.Create(reader, ''Unexpected token parsing binary. Expected String or StartArray, got {0}.''.FormatWith(CultureInfo.InvariantCulture, reader.TokenType));", span="130-130"];
m1_253 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Iterate()", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.Iterate()", span="421-421"];
m1_254 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Iterate()", file="BinaryConverter.cs", label="JArray a = new JArray(1, 2, 3, 4, 5)", span="423-423"];
m1_255 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Iterate()", file="BinaryConverter.cs", label="int i = 1", span="425-425"];
m1_256 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Iterate()", file="BinaryConverter.cs", label=a, span="426-426"];
m1_257 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Iterate()", file="BinaryConverter.cs", label="Assert.AreEqual(i, (int)token)", span="428-428"];
m1_258 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Iterate()", file="BinaryConverter.cs", label="i++", span="429-429"];
m1_259 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Iterate()", file="BinaryConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.Iterate()", span="421-421"];
m1_72 [cluster="System.Collections.Generic.List<T>.ToArray()", file="BinaryConverter.cs", label="Entry System.Collections.Generic.List<T>.ToArray()", span="0-0"];
m1_73 [cluster="Newtonsoft.Json.Converters.BinaryConverter.CanConvert(System.Type)", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Converters.BinaryConverter.CanConvert(System.Type)", span="181-181"];
m1_74 [cluster="Newtonsoft.Json.Converters.BinaryConverter.CanConvert(System.Type)", file="BinaryConverter.cs", label="objectType.AssignableToTypeName(BinaryTypeName)", span="184-184"];
m1_75 [cluster="Newtonsoft.Json.Converters.BinaryConverter.CanConvert(System.Type)", file="BinaryConverter.cs", label="return true;", span="186-186"];
m1_312 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertAddEnd()", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.InsertAddEnd()", span="503-503"];
m1_313 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertAddEnd()", file="BinaryConverter.cs", label="JArray array = new JArray()", span="505-505"];
m1_314 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertAddEnd()", file="BinaryConverter.cs", label="array.Insert(0, 123)", span="506-506"];
m1_315 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertAddEnd()", file="BinaryConverter.cs", label="array.Insert(1, 456)", span="507-507"];
m1_316 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertAddEnd()", file="BinaryConverter.cs", label="Assert.AreEqual(2, array.Count)", span="509-509"];
m1_317 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertAddEnd()", file="BinaryConverter.cs", label="Assert.AreEqual(123, (int)array[0])", span="510-510"];
m1_318 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertAddEnd()", file="BinaryConverter.cs", label="Assert.AreEqual(456, (int)array[1])", span="511-511"];
m1_319 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertAddEnd()", file="BinaryConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.InsertAddEnd()", span="503-503"];
m1_244 [cluster="System.Collections.Generic.List<T>.List()", file="BinaryConverter.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m1_57 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.GenericCollectionCopyToNullArrayShouldThrow()", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.GenericCollectionCopyToNullArrayShouldThrow()", span="125-125"];
m1_58 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.GenericCollectionCopyToNullArrayShouldThrow()", file="BinaryConverter.cs", label="JArray j = new JArray()", span="127-127"];
m1_59 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.GenericCollectionCopyToNullArrayShouldThrow()", file="BinaryConverter.cs", label="ExceptionAssert.Throws<ArgumentNullException>(() => { ((ICollection<JToken>)j).CopyTo(null, 0); }, @''Value cannot be null.\r\nParameter name: array'')", span="129-130"];
m1_61 [cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", span="350-350"];
m1_60 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.GenericCollectionCopyToNullArrayShouldThrow()", file="BinaryConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.GenericCollectionCopyToNullArrayShouldThrow()", span="125-125"];
m1_7 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveSpecificAndRemoveSelf()", file="BinaryConverter.cs", label="Assert.AreEqual(2, a.Count)", span="65-65"];
m1_30 [cluster="Newtonsoft.Json.Converters.BinaryConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="BinaryConverter.cs", label="reader.TokenType == JsonToken.Null", span="105-105"];
m1_0 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveSpecificAndRemoveSelf()", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveSpecificAndRemoveSelf()", span="49-49"];
m1_4 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveSpecificAndRemoveSelf()", file="BinaryConverter.cs", label="Assert.IsTrue(a.Remove(last))", span="60-60"];
m1_1 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveSpecificAndRemoveSelf()", file="BinaryConverter.cs", label="JObject o = new JObject\r\n            {\r\n                { ''results'', new JArray(1, 2, 3, 4) }\r\n            }", span="51-54"];
m1_5 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveSpecificAndRemoveSelf()", file="BinaryConverter.cs", label="last = a.Last()", span="62-62"];
m1_2 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveSpecificAndRemoveSelf()", file="BinaryConverter.cs", label="JArray a = (JArray)o[''results'']", span="56-56"];
m1_3 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveSpecificAndRemoveSelf()", file="BinaryConverter.cs", label="var last = a.Last()", span="58-58"];
m1_6 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveSpecificAndRemoveSelf()", file="BinaryConverter.cs", label="last.Remove()", span="63-63"];
m1_249 [cluster="Newtonsoft.Json.Linq.JObject.JObject(params object[])", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Linq.JObject.JObject(params object[])", span="105-105"];
m1_320 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ParseAdditionalContent()", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.ParseAdditionalContent()", span="515-515"];
m1_321 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ParseAdditionalContent()", file="BinaryConverter.cs", label="string json = @''[\r\n''''Small'''',\r\n''''Medium'''',\r\n''''Large''''\r\n], 987987''", span="517-521"];
m1_322 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ParseAdditionalContent()", file="BinaryConverter.cs", label="ExceptionAssert.Throws<JsonReaderException>(() => { JArray.Parse(json); }, ''Additional text encountered after finished reading JSON content: ,. Path '', line 5, position 1.'')", span="523-523"];
m1_323 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ParseAdditionalContent()", file="BinaryConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.ParseAdditionalContent()", span="515-515"];
m1_295 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ReplaceAll()", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.ReplaceAll()", span="483-483"];
m1_296 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ReplaceAll()", file="BinaryConverter.cs", label="JArray a = new JArray(new[] { 1, 2, 3 })", span="485-485"];
m1_297 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ReplaceAll()", file="BinaryConverter.cs", label="Assert.AreEqual(3, a.Count)", span="486-486"];
m1_298 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ReplaceAll()", file="BinaryConverter.cs", label="Assert.AreEqual(1, (int)a[0])", span="487-487"];
m1_299 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ReplaceAll()", file="BinaryConverter.cs", label="Assert.AreEqual(2, (int)a[1])", span="488-488"];
m1_300 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ReplaceAll()", file="BinaryConverter.cs", label="Assert.AreEqual(3, (int)a[2])", span="489-489"];
m1_301 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ReplaceAll()", file="BinaryConverter.cs", label="a.ReplaceAll(1)", span="491-491"];
m1_302 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ReplaceAll()", file="BinaryConverter.cs", label="Assert.AreEqual(1, a.Count)", span="492-492"];
m1_303 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ReplaceAll()", file="BinaryConverter.cs", label="Assert.AreEqual(1, (int)a[0])", span="493-493"];
m1_304 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ReplaceAll()", file="BinaryConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.ReplaceAll()", span="483-483"];
m1_120 [cluster="Newtonsoft.Json.Linq.JContainer.AddFirst(object)", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Linq.JContainer.AddFirst(object)", span="649-649"];
m1_252 [cluster="Newtonsoft.Json.Tests.StringAssert.AreEqual(string, string)", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Tests.StringAssert.AreEqual(string, string)", span="321-321"];
m1_305 [cluster="Newtonsoft.Json.Linq.JContainer.ReplaceAll(object)", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Linq.JContainer.ReplaceAll(object)", span="699-699"];
m1_260 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ITypedListGetItemProperties()", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.ITypedListGetItemProperties()", span="435-435"];
m1_261 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ITypedListGetItemProperties()", file="BinaryConverter.cs", label="JProperty p1 = new JProperty(''Test1'', 1)", span="437-437"];
m1_262 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ITypedListGetItemProperties()", file="BinaryConverter.cs", label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="438-438"];
m1_263 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ITypedListGetItemProperties()", file="BinaryConverter.cs", label="ITypedList a = new JArray(new JObject(p1, p2))", span="439-439"];
m1_264 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ITypedListGetItemProperties()", file="BinaryConverter.cs", label="PropertyDescriptorCollection propertyDescriptors = a.GetItemProperties(null)", span="441-441"];
m1_265 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ITypedListGetItemProperties()", file="BinaryConverter.cs", label="Assert.IsNotNull(propertyDescriptors)", span="442-442"];
m1_266 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ITypedListGetItemProperties()", file="BinaryConverter.cs", label="Assert.AreEqual(2, propertyDescriptors.Count)", span="443-443"];
m1_267 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ITypedListGetItemProperties()", file="BinaryConverter.cs", label="Assert.AreEqual(''Test1'', propertyDescriptors[0].Name)", span="444-444"];
m1_268 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ITypedListGetItemProperties()", file="BinaryConverter.cs", label="Assert.AreEqual(''Test2'', propertyDescriptors[1].Name)", span="445-445"];
m1_269 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ITypedListGetItemProperties()", file="BinaryConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.ITypedListGetItemProperties()", span="435-435"];
m1_37 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Contains()", file="BinaryConverter.cs", label="Assert.AreEqual(false, a.Contains(null))", span="96-96"];
m1_32 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Contains()", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.Contains()", span="88-88"];
m1_35 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Contains()", file="BinaryConverter.cs", label="Assert.AreEqual(false, a.Contains(new JValue(2)))", span="94-94"];
m1_36 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Contains()", file="BinaryConverter.cs", label="Assert.AreEqual(false, a.Contains(new JValue(1)))", span="95-95"];
m1_38 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Contains()", file="BinaryConverter.cs", label="Assert.AreEqual(true, a.Contains(v))", span="97-97"];
m1_33 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Contains()", file="BinaryConverter.cs", label="JValue v = new JValue(1)", span="90-90"];
m1_34 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Contains()", file="BinaryConverter.cs", label="JArray a = new JArray { v }", span="92-92"];
m1_41 [cluster="Newtonsoft.Json.Linq.JArray.Contains(Newtonsoft.Json.Linq.JToken)", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Linq.JArray.Contains(Newtonsoft.Json.Linq.JToken)", span="367-367"];
m1_39 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Contains()", file="BinaryConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.Contains()", span="88-88"];
m1_250 [cluster="object.ToString()", file="BinaryConverter.cs", label="Entry object.ToString()", span="0-0"];
m1_168 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddFirstAddedTokenShouldBeFirst()", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.AddFirstAddedTokenShouldBeFirst()", span="269-269"];
m1_169 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddFirstAddedTokenShouldBeFirst()", file="BinaryConverter.cs", label="JValue v1 = new JValue(1)", span="271-271"];
m1_170 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddFirstAddedTokenShouldBeFirst()", file="BinaryConverter.cs", label="JValue v2 = new JValue(2)", span="272-272"];
m1_175 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddFirstAddedTokenShouldBeFirst()", file="BinaryConverter.cs", label="j.AddFirst(v1)", span="279-279"];
m1_176 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddFirstAddedTokenShouldBeFirst()", file="BinaryConverter.cs", label="Assert.AreEqual(v1, j.First)", span="280-280"];
m1_177 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddFirstAddedTokenShouldBeFirst()", file="BinaryConverter.cs", label="Assert.AreEqual(v1, j.Last)", span="281-281"];
m1_180 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddFirstAddedTokenShouldBeFirst()", file="BinaryConverter.cs", label="Assert.AreEqual(v1, j.Last)", span="285-285"];
m1_183 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddFirstAddedTokenShouldBeFirst()", file="BinaryConverter.cs", label="Assert.AreEqual(v1, j.Last)", span="289-289"];
m1_171 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddFirstAddedTokenShouldBeFirst()", file="BinaryConverter.cs", label="JValue v3 = new JValue(3)", span="273-273"];
m1_178 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddFirstAddedTokenShouldBeFirst()", file="BinaryConverter.cs", label="j.AddFirst(v2)", span="283-283"];
m1_179 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddFirstAddedTokenShouldBeFirst()", file="BinaryConverter.cs", label="Assert.AreEqual(v2, j.First)", span="284-284"];
m1_172 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddFirstAddedTokenShouldBeFirst()", file="BinaryConverter.cs", label="JArray j = new JArray()", span="275-275"];
m1_181 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddFirstAddedTokenShouldBeFirst()", file="BinaryConverter.cs", label="j.AddFirst(v3)", span="287-287"];
m1_182 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddFirstAddedTokenShouldBeFirst()", file="BinaryConverter.cs", label="Assert.AreEqual(v3, j.First)", span="288-288"];
m1_173 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddFirstAddedTokenShouldBeFirst()", file="BinaryConverter.cs", label="Assert.AreEqual(null, j.First)", span="276-276"];
m1_174 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddFirstAddedTokenShouldBeFirst()", file="BinaryConverter.cs", label="Assert.AreEqual(null, j.Last)", span="277-277"];
m1_184 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddFirstAddedTokenShouldBeFirst()", file="BinaryConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.AddFirstAddedTokenShouldBeFirst()", span="269-269"];
m1_152 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Insert()", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.Insert()", span="248-248"];
m1_153 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Insert()", file="BinaryConverter.cs", label="JValue v1 = new JValue(1)", span="250-250"];
m1_154 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Insert()", file="BinaryConverter.cs", label="JValue v2 = new JValue(2)", span="251-251"];
m1_158 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Insert()", file="BinaryConverter.cs", label="j.Add(v1)", span="257-257"];
m1_162 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Insert()", file="BinaryConverter.cs", label="Assert.AreEqual(0, j.IndexOf(v1))", span="262-262"];
m1_155 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Insert()", file="BinaryConverter.cs", label="JValue v3 = new JValue(3)", span="252-252"];
m1_159 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Insert()", file="BinaryConverter.cs", label="j.Add(v2)", span="258-258"];
m1_164 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Insert()", file="BinaryConverter.cs", label="Assert.AreEqual(2, j.IndexOf(v2))", span="264-264"];
m1_156 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Insert()", file="BinaryConverter.cs", label="JValue v4 = new JValue(4)", span="253-253"];
m1_160 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Insert()", file="BinaryConverter.cs", label="j.Add(v3)", span="259-259"];
m1_165 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Insert()", file="BinaryConverter.cs", label="Assert.AreEqual(3, j.IndexOf(v3))", span="265-265"];
m1_157 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Insert()", file="BinaryConverter.cs", label="JArray j = new JArray()", span="255-255"];
m1_161 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Insert()", file="BinaryConverter.cs", label="j.Insert(1, v4)", span="260-260"];
m1_163 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Insert()", file="BinaryConverter.cs", label="Assert.AreEqual(1, j.IndexOf(v4))", span="263-263"];
m1_166 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Insert()", file="BinaryConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.Insert()", span="248-248"];
m1_306 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ParseIncomplete()", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.ParseIncomplete()", span="497-497"];
m1_307 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ParseIncomplete()", file="BinaryConverter.cs", label="ExceptionAssert.Throws<JsonReaderException>(() => { JArray.Parse(''[1''); }, ''Unexpected end of content while loading JArray. Path '[0]', line 1, position 2.'')", span="499-499"];
m1_308 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ParseIncomplete()", file="BinaryConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.ParseIncomplete()", span="497-497"];
m1_282 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.SetValueWithInvalidIndex()", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.SetValueWithInvalidIndex()", span="462-462"];
m1_283 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.SetValueWithInvalidIndex()", file="BinaryConverter.cs", label="ExceptionAssert.Throws<ArgumentException>(() =>\r\n            {\r\n                JArray a = new JArray();\r\n                a[''badvalue''] = new JValue(3);\r\n            }, @''Set JArray values with invalid key value: ''''badvalue''''. Int32 array index expected.'')", span="464-468"];
m1_284 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.SetValueWithInvalidIndex()", file="BinaryConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.SetValueWithInvalidIndex()", span="462-462"];
}
