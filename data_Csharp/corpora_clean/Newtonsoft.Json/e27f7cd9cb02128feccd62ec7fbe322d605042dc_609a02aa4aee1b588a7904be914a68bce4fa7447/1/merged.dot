digraph  {
n162 [label=json, span=""];
n0 [label="Entry Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.NamedEnumDuplicateTest()", span="104-104", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.NamedEnumDuplicateTest()"];
n1 [label="ExceptionAssert.Throws<Exception>(''Enum name 'Third' already exists on enum 'NamedEnumDuplicate'.'',\r\n                () =>\r\n                {\r\n                    EnumContainer<NamedEnumDuplicate> c = new EnumContainer<NamedEnumDuplicate>\r\n                    {\r\n                        Enum = NamedEnumDuplicate.First\r\n                    };\r\n\r\n                    JsonConvert.SerializeObject(c, Formatting.Indented, new StringEnumConverter());\r\n                })", span="106-115", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.NamedEnumDuplicateTest()"];
n2 [label="Exit Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.NamedEnumDuplicateTest()", span="104-104", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.NamedEnumDuplicateTest()"];
n3 [label="Entry Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(string, System.Action)", span="175-175", cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(string, System.Action)"];
n4 [label="Entry lambda expression", span="107-115", cluster="lambda expression"];
n5 [label="EnumContainer<NamedEnumDuplicate> c = new EnumContainer<NamedEnumDuplicate>\r\n                    {\r\n                        Enum = NamedEnumDuplicate.First\r\n                    }", span="109-112", cluster="lambda expression"];
n6 [label="JsonConvert.SerializeObject(c, Formatting.Indented, new StringEnumConverter())", span="114-114", cluster="lambda expression"];
n8 [label="Entry Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.EnumContainer<T>.EnumContainer()", span="54-54", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.EnumContainer<T>.EnumContainer()"];
n7 [label="Exit lambda expression", span="107-115", cluster="lambda expression"];
n9 [label="Entry Newtonsoft.Json.Converters.StringEnumConverter.StringEnumConverter()", span="62-62", cluster="Newtonsoft.Json.Converters.StringEnumConverter.StringEnumConverter()"];
n10 [label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting, params Newtonsoft.Json.JsonConverter[])", span="539-539", cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting, params Newtonsoft.Json.JsonConverter[])"];
n11 [label="Entry Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeNameEnumTest()", span="119-119", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeNameEnumTest()"];
n12 [label="EnumContainer<NamedEnum> c = new EnumContainer<NamedEnum>\r\n            {\r\n                Enum = NamedEnum.First\r\n            }", span="121-124", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeNameEnumTest()"];
n13 [label="string json = JsonConvert.SerializeObject(c, Formatting.Indented, new StringEnumConverter())", span="126-126", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeNameEnumTest()"];
n14 [label="Assert.AreEqual(@''{\r\n  ''''Enum'''': ''''@first''''\r\n}'', json)", span="127-129", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeNameEnumTest()"];
n15 [label="c = new EnumContainer<NamedEnum>\r\n            {\r\n                Enum = NamedEnum.Third\r\n            }", span="131-134", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeNameEnumTest()"];
n19 [label="Entry Unk.AreEqual", span="", cluster="Unk.AreEqual"];
n16 [label="json = JsonConvert.SerializeObject(c, Formatting.Indented, new StringEnumConverter())", span="136-136", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeNameEnumTest()"];
n17 [label="Assert.AreEqual(@''{\r\n  ''''Enum'''': ''''Third''''\r\n}'', json)", span="137-139", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeNameEnumTest()"];
n18 [label="Exit Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeNameEnumTest()", span="119-119", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeNameEnumTest()"];
n20 [label="Entry Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeNameEnumTest()", span="143-143", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeNameEnumTest()"];
n21 [label="string json = @''{\r\n  ''''Enum'''': ''''@first''''\r\n}''", span="145-147", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeNameEnumTest()"];
n22 [label="EnumContainer<NamedEnum> c = JsonConvert.DeserializeObject<EnumContainer<NamedEnum>>(json, new StringEnumConverter())", span="149-149", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeNameEnumTest()"];
n23 [label="Assert.AreEqual(NamedEnum.First, c.Enum)", span="150-150", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeNameEnumTest()"];
n28 [label="Entry Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string, params Newtonsoft.Json.JsonConverter[])", span="771-771", cluster="Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string, params Newtonsoft.Json.JsonConverter[])"];
n24 [label="json = @''{\r\n  ''''Enum'''': ''''Third''''\r\n}''", span="152-154", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeNameEnumTest()"];
n25 [label="c = JsonConvert.DeserializeObject<EnumContainer<NamedEnum>>(json, new StringEnumConverter())", span="156-156", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeNameEnumTest()"];
n26 [label="Assert.AreEqual(NamedEnum.Third, c.Enum)", span="157-157", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeNameEnumTest()"];
n27 [label="Exit Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeNameEnumTest()", span="143-143", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeNameEnumTest()"];
n29 [label="Entry Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeEnumClass()", span="162-162", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeEnumClass()"];
n30 [label="EnumClass enumClass = new EnumClass()", span="164-164", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeEnumClass()"];
n31 [label="enumClass.StoreColor = StoreColor.Red", span="165-165", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeEnumClass()"];
n37 [label="Entry Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.EnumClass.EnumClass()", span="47-47", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.EnumClass.EnumClass()"];
n32 [label="enumClass.NullableStoreColor1 = StoreColor.White", span="166-166", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeEnumClass()"];
n33 [label="enumClass.NullableStoreColor2 = null", span="167-167", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeEnumClass()"];
n34 [label="string json = JsonConvert.SerializeObject(enumClass, Formatting.Indented, new StringEnumConverter())", span="169-169", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeEnumClass()"];
n35 [label="Assert.AreEqual(@''{\r\n  ''''StoreColor'''': ''''Red'''',\r\n  ''''NullableStoreColor1'''': ''''White'''',\r\n  ''''NullableStoreColor2'''': null\r\n}'', json)", span="171-175", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeEnumClass()"];
n36 [label="Exit Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeEnumClass()", span="162-162", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeEnumClass()"];
n38 [label="Entry Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeEnumClassWithCamelCase()", span="179-179", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeEnumClassWithCamelCase()"];
n39 [label="EnumClass enumClass = new EnumClass()", span="181-181", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeEnumClassWithCamelCase()", color=red, community=0];
n40 [label="enumClass.StoreColor = StoreColor.Red", span="182-182", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeEnumClassWithCamelCase()", color=red, community=0];
n41 [label="enumClass.NullableStoreColor1 = StoreColor.DarkGoldenrod", span="183-183", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeEnumClassWithCamelCase()", color=red, community=0];
n42 [label="enumClass.NullableStoreColor2 = null", span="184-184", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeEnumClassWithCamelCase()", color=red, community=0];
n43 [label="string json = JsonConvert.SerializeObject(enumClass, Formatting.Indented, new StringEnumConverter { CamelCaseText = true })", span="186-186", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeEnumClassWithCamelCase()", color=red, community=0];
n44 [label="Assert.AreEqual(@''{\r\n  ''''StoreColor'''': ''''red'''',\r\n  ''''NullableStoreColor1'''': ''''darkGoldenrod'''',\r\n  ''''NullableStoreColor2'''': null\r\n}'', json)", span="188-192", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeEnumClassWithCamelCase()", color=red, community=0];
n45 [label="Exit Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeEnumClassWithCamelCase()", span="179-179", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeEnumClassWithCamelCase()"];
n46 [label="Entry Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeEnumClassUndefined()", span="196-196", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeEnumClassUndefined()"];
n47 [label="EnumClass enumClass = new EnumClass()", span="198-198", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeEnumClassUndefined()"];
n48 [label="enumClass.StoreColor = (StoreColor)1000", span="199-199", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeEnumClassUndefined()"];
n49 [label="enumClass.NullableStoreColor1 = (StoreColor)1000", span="200-200", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeEnumClassUndefined()"];
n50 [label="enumClass.NullableStoreColor2 = null", span="201-201", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeEnumClassUndefined()"];
n51 [label="string json = JsonConvert.SerializeObject(enumClass, Formatting.Indented, new StringEnumConverter())", span="203-203", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeEnumClassUndefined()"];
n52 [label="Assert.AreEqual(@''{\r\n  ''''StoreColor'''': 1000,\r\n  ''''NullableStoreColor1'''': 1000,\r\n  ''''NullableStoreColor2'''': null\r\n}'', json)", span="205-209", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeEnumClassUndefined()"];
n53 [label="Exit Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeEnumClassUndefined()", span="196-196", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeEnumClassUndefined()"];
n54 [label="Entry Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeFlagEnum()", span="213-213", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeFlagEnum()"];
n55 [label="EnumClass enumClass = new EnumClass()", span="215-215", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeFlagEnum()"];
n56 [label="enumClass.StoreColor = StoreColor.Red | StoreColor.White", span="216-216", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeFlagEnum()"];
n57 [label="enumClass.NullableStoreColor1 = StoreColor.White & StoreColor.Yellow", span="217-217", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeFlagEnum()"];
n58 [label="enumClass.NullableStoreColor2 = StoreColor.Red | StoreColor.White | StoreColor.Black", span="218-218", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeFlagEnum()"];
n59 [label="string json = JsonConvert.SerializeObject(enumClass, Formatting.Indented, new StringEnumConverter())", span="220-220", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeFlagEnum()"];
n60 [label="Assert.AreEqual(@''{\r\n  ''''StoreColor'''': ''''Red, White'''',\r\n  ''''NullableStoreColor1'''': 0,\r\n  ''''NullableStoreColor2'''': ''''Black, Red, White''''\r\n}'', json)", span="222-226", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeFlagEnum()"];
n61 [label="Exit Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeFlagEnum()", span="213-213", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeFlagEnum()"];
n62 [label="Entry Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeNegativeEnum()", span="230-230", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeNegativeEnum()"];
n63 [label="NegativeEnumClass negativeEnumClass = new NegativeEnumClass()", span="232-232", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeNegativeEnum()"];
n64 [label="negativeEnumClass.Value1 = NegativeEnum.Negative", span="233-233", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeNegativeEnum()"];
n69 [label="Entry Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.NegativeEnumClass.NegativeEnumClass()", span="96-96", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.NegativeEnumClass.NegativeEnumClass()"];
n65 [label="negativeEnumClass.Value2 = (NegativeEnum)int.MinValue", span="234-234", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeNegativeEnum()"];
n66 [label="string json = JsonConvert.SerializeObject(negativeEnumClass, Formatting.Indented, new StringEnumConverter())", span="236-236", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeNegativeEnum()"];
n67 [label="Assert.AreEqual(@''{\r\n  ''''Value1'''': ''''Negative'''',\r\n  ''''Value2'''': -2147483648\r\n}'', json)", span="238-241", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeNegativeEnum()"];
n68 [label="Exit Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeNegativeEnum()", span="230-230", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeNegativeEnum()"];
n70 [label="Entry Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeNegativeEnum()", span="245-245", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeNegativeEnum()"];
n71 [label="string json = @''{\r\n  ''''Value1'''': ''''Negative'''',\r\n  ''''Value2'''': -2147483648\r\n}''", span="247-250", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeNegativeEnum()"];
n72 [label="NegativeEnumClass negativeEnumClass = JsonConvert.DeserializeObject<NegativeEnumClass>(json, new StringEnumConverter())", span="252-252", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeNegativeEnum()"];
n73 [label="Assert.AreEqual(NegativeEnum.Negative, negativeEnumClass.Value1)", span="254-254", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeNegativeEnum()"];
n74 [label="Assert.AreEqual((NegativeEnum)int.MinValue, negativeEnumClass.Value2)", span="255-255", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeNegativeEnum()"];
n75 [label="Exit Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeNegativeEnum()", span="245-245", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeNegativeEnum()"];
n76 [label="Entry Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeFlagEnum()", span="259-259", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeFlagEnum()"];
n77 [label="string json = @''{\r\n  ''''StoreColor'''': ''''Red, White'''',\r\n  ''''NullableStoreColor1'''': 0,\r\n  ''''NullableStoreColor2'''': ''''black, Red, White''''\r\n}''", span="261-265", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeFlagEnum()"];
n78 [label="EnumClass enumClass = JsonConvert.DeserializeObject<EnumClass>(json, new StringEnumConverter())", span="267-267", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeFlagEnum()"];
n79 [label="Assert.AreEqual(StoreColor.Red | StoreColor.White, enumClass.StoreColor)", span="269-269", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeFlagEnum()"];
n80 [label="Assert.AreEqual((StoreColor)0, enumClass.NullableStoreColor1)", span="270-270", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeFlagEnum()"];
n81 [label="Assert.AreEqual(StoreColor.Red | StoreColor.White | StoreColor.Black, enumClass.NullableStoreColor2)", span="271-271", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeFlagEnum()"];
n82 [label="Exit Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeFlagEnum()", span="259-259", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeFlagEnum()"];
n83 [label="Entry Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeEnumClass()", span="275-275", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeEnumClass()"];
n84 [label="string json = @''{\r\n  ''''StoreColor'''': ''''Red'''',\r\n  ''''NullableStoreColor1'''': ''''White'''',\r\n  ''''NullableStoreColor2'''': null\r\n}''", span="277-281", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeEnumClass()"];
n85 [label="EnumClass enumClass = JsonConvert.DeserializeObject<EnumClass>(json, new StringEnumConverter())", span="283-283", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeEnumClass()"];
n86 [label="Assert.AreEqual(StoreColor.Red, enumClass.StoreColor)", span="285-285", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeEnumClass()"];
n87 [label="Assert.AreEqual(StoreColor.White, enumClass.NullableStoreColor1)", span="286-286", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeEnumClass()"];
n88 [label="Assert.AreEqual(null, enumClass.NullableStoreColor2)", span="287-287", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeEnumClass()"];
n89 [label="Exit Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeEnumClass()", span="275-275", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeEnumClass()"];
n90 [label="Entry Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeEnumClassUndefined()", span="291-291", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeEnumClassUndefined()"];
n91 [label="string json = @''{\r\n  ''''StoreColor'''': 1000,\r\n  ''''NullableStoreColor1'''': 1000,\r\n  ''''NullableStoreColor2'''': null\r\n}''", span="293-297", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeEnumClassUndefined()"];
n92 [label="EnumClass enumClass = JsonConvert.DeserializeObject<EnumClass>(json, new StringEnumConverter())", span="299-299", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeEnumClassUndefined()"];
n93 [label="Assert.AreEqual((StoreColor)1000, enumClass.StoreColor)", span="301-301", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeEnumClassUndefined()"];
n94 [label="Assert.AreEqual((StoreColor)1000, enumClass.NullableStoreColor1)", span="302-302", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeEnumClassUndefined()"];
n95 [label="Assert.AreEqual(null, enumClass.NullableStoreColor2)", span="303-303", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeEnumClassUndefined()"];
n96 [label="Exit Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeEnumClassUndefined()", span="291-291", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeEnumClassUndefined()"];
n97 [label="Entry Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.CamelCaseTextFlagEnumSerialization()", span="307-307", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.CamelCaseTextFlagEnumSerialization()"];
n98 [label="EnumContainer<FlagsTestEnum> c = new EnumContainer<FlagsTestEnum>\r\n            {\r\n                Enum = FlagsTestEnum.First | FlagsTestEnum.Second\r\n            }", span="309-312", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.CamelCaseTextFlagEnumSerialization()"];
n99 [label="string json = JsonConvert.SerializeObject(c, Formatting.Indented, new StringEnumConverter { CamelCaseText = true })", span="314-314", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.CamelCaseTextFlagEnumSerialization()"];
n100 [label="Assert.AreEqual(@''{\r\n  ''''Enum'''': ''''first, second''''\r\n}'', json)", span="315-317", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.CamelCaseTextFlagEnumSerialization()"];
n101 [label="Exit Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.CamelCaseTextFlagEnumSerialization()", span="307-307", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.CamelCaseTextFlagEnumSerialization()"];
n102 [label="Entry Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.CamelCaseTextFlagEnumDeserialization()", span="321-321", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.CamelCaseTextFlagEnumDeserialization()"];
n103 [label="string json = @''{\r\n  ''''Enum'''': ''''first, second''''\r\n}''", span="323-325", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.CamelCaseTextFlagEnumDeserialization()"];
n104 [label="EnumContainer<FlagsTestEnum> c = JsonConvert.DeserializeObject<EnumContainer<FlagsTestEnum>>(json, new StringEnumConverter { CamelCaseText = true })", span="327-327", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.CamelCaseTextFlagEnumDeserialization()"];
n105 [label="Assert.AreEqual(FlagsTestEnum.First | FlagsTestEnum.Second, c.Enum)", span="328-328", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.CamelCaseTextFlagEnumDeserialization()"];
n106 [label="Exit Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.CamelCaseTextFlagEnumDeserialization()", span="321-321", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.CamelCaseTextFlagEnumDeserialization()"];
n107 [label="Entry Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeEmptyStringIntoNullable()", span="332-332", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeEmptyStringIntoNullable()"];
n108 [label="string json = @''{\r\n  ''''StoreColor'''': ''''Red'''',\r\n  ''''NullableStoreColor1'''': ''''White'''',\r\n  ''''NullableStoreColor2'''': ''''''''\r\n}''", span="334-338", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeEmptyStringIntoNullable()"];
n109 [label="EnumClass c = JsonConvert.DeserializeObject<EnumClass>(json, new StringEnumConverter())", span="340-340", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeEmptyStringIntoNullable()"];
n110 [label="Assert.IsNull(c.NullableStoreColor2)", span="341-341", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeEmptyStringIntoNullable()"];
n111 [label="Exit Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeEmptyStringIntoNullable()", span="332-332", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeEmptyStringIntoNullable()"];
n112 [label="Entry Unk.IsNull", span="", cluster="Unk.IsNull"];
n113 [label="Entry Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeInvalidString()", span="345-345", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeInvalidString()"];
n114 [label="string json = ''{ \''Value\'' : \''Three\'' }''", span="347-347", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeInvalidString()"];
n115 [label="ExceptionAssert.Throws<JsonSerializationException>(\r\n                @''Error converting value ''''Three'''' to type 'Newtonsoft.Json.Tests.Converters.StringEnumConverterTests+MyEnum'. Path 'Value', line 1, position 19.'',\r\n                () =>\r\n                {\r\n                    var serializer = new JsonSerializer();\r\n                    serializer.Converters.Add(new StringEnumConverter());\r\n                    serializer.Deserialize<Bucket>(new JsonTextReader(new StringReader(json)));\r\n                })", span="349-356", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeInvalidString()"];
n120 [label="serializer.Deserialize<Bucket>(new JsonTextReader(new StringReader(json)))", span="355-355", cluster="lambda expression"];
n116 [label="Exit Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeInvalidString()", span="345-345", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeInvalidString()"];
n117 [label="Entry lambda expression", span="351-356", cluster="lambda expression"];
n118 [label="var serializer = new JsonSerializer()", span="353-353", cluster="lambda expression"];
n119 [label="serializer.Converters.Add(new StringEnumConverter())", span="354-354", cluster="lambda expression"];
n122 [label="Entry Newtonsoft.Json.JsonSerializer.JsonSerializer()", span="418-418", cluster="Newtonsoft.Json.JsonSerializer.JsonSerializer()"];
n123 [label="Entry System.Collections.ObjectModel.Collection<T>.Add(T)", span="0-0", cluster="System.Collections.ObjectModel.Collection<T>.Add(T)"];
n121 [label="Exit lambda expression", span="351-356", cluster="lambda expression"];
n124 [label="Entry Newtonsoft.Json.JsonTextReader.JsonTextReader(System.IO.TextReader)", span="73-73", cluster="Newtonsoft.Json.JsonTextReader.JsonTextReader(System.IO.TextReader)"];
n125 [label="Entry System.IO.StringReader.StringReader(string)", span="0-0", cluster="System.IO.StringReader.StringReader(string)"];
n126 [label="Entry Newtonsoft.Json.JsonSerializer.Deserialize<T>(Newtonsoft.Json.JsonReader)", span="638-638", cluster="Newtonsoft.Json.JsonSerializer.Deserialize<T>(Newtonsoft.Json.JsonReader)"];
n127 [label="Entry Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeIntegerButNotAllowed()", span="371-371", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeIntegerButNotAllowed()"];
n128 [label="string json = ''{ \''Value\'' : 123 }''", span="373-373", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeIntegerButNotAllowed()"];
n129 [label="var serializer = new JsonSerializer()", span="377-377", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeIntegerButNotAllowed()"];
n131 [label="serializer.Deserialize<Bucket>(new JsonTextReader(new StringReader(json)))", span="379-379", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeIntegerButNotAllowed()"];
n130 [label="serializer.Converters.Add(new StringEnumConverter { AllowIntegerValues = false })", span="378-378", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeIntegerButNotAllowed()"];
n132 [label=JsonSerializationException, span="381-381", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeIntegerButNotAllowed()"];
n136 [label="Assert.Fail()", span="389-389", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeIntegerButNotAllowed()"];
n133 [label="Assert.AreEqual(''Error converting value 123 to type 'Newtonsoft.Json.Tests.Converters.StringEnumConverterTests+MyEnum'. Path 'Value', line 1, position 15.'', ex.Message)", span="383-383", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeIntegerButNotAllowed()"];
n134 [label="Assert.AreEqual(@''Integer value 123 is not allowed. Path 'Value', line 1, position 15.'', ex.InnerException.Message)", span="384-384", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeIntegerButNotAllowed()"];
n135 [label="return;", span="386-386", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeIntegerButNotAllowed()"];
n137 [label="Exit Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeIntegerButNotAllowed()", span="371-371", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeIntegerButNotAllowed()"];
n138 [label="Entry Unk.Fail", span="", cluster="Unk.Fail"];
n139 [label="Entry Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.EnumMemberPlusFlags()", span="394-394", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.EnumMemberPlusFlags()"];
n140 [label="List<Foo> lfoo =\r\n                new List<Foo>\r\n                {\r\n                    Foo.Bat | Foo.SerializeAsBaz,\r\n                    Foo.FooBar,\r\n                    Foo.Bat,\r\n                    Foo.SerializeAsBaz,\r\n                    Foo.FooBar | Foo.SerializeAsBaz,\r\n                    (Foo)int.MaxValue\r\n                }", span="396-405", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.EnumMemberPlusFlags()"];
n141 [label="string json1 = JsonConvert.SerializeObject(lfoo, Formatting.Indented, new StringEnumConverter { CamelCaseText = true })", span="407-407", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.EnumMemberPlusFlags()"];
n160 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()"];
n142 [label="Assert.AreEqual(@''[\r\n  ''''Bat, baz'''',\r\n  ''''foo_bar'''',\r\n  ''''Bat'''',\r\n  ''''baz'''',\r\n  ''''foo_bar, baz'''',\r\n  2147483647\r\n]'', json1)", span="409-416", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.EnumMemberPlusFlags()"];
n143 [label="IList<Foo> foos = JsonConvert.DeserializeObject<List<Foo>>(json1)", span="418-418", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.EnumMemberPlusFlags()"];
n144 [label="Assert.AreEqual(6, foos.Count)", span="420-420", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.EnumMemberPlusFlags()"];
n161 [label="Entry Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string)", span="723-723", cluster="Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string)"];
n145 [label="Assert.AreEqual(Foo.Bat | Foo.SerializeAsBaz, foos[0])", span="421-421", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.EnumMemberPlusFlags()"];
n146 [label="Assert.AreEqual(Foo.FooBar, foos[1])", span="422-422", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.EnumMemberPlusFlags()"];
n147 [label="Assert.AreEqual(Foo.Bat, foos[2])", span="423-423", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.EnumMemberPlusFlags()"];
n148 [label="Assert.AreEqual(Foo.SerializeAsBaz, foos[3])", span="424-424", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.EnumMemberPlusFlags()"];
n149 [label="Assert.AreEqual(Foo.FooBar | Foo.SerializeAsBaz, foos[4])", span="425-425", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.EnumMemberPlusFlags()"];
n150 [label="Assert.AreEqual((Foo)int.MaxValue, foos[5])", span="426-426", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.EnumMemberPlusFlags()"];
n151 [label="List<Bar> lbar = new List<Bar>() { Bar.FooBar, Bar.Bat, Bar.SerializeAsBaz }", span="428-428", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.EnumMemberPlusFlags()"];
n152 [label="string json2 = JsonConvert.SerializeObject(lbar, Formatting.Indented, new StringEnumConverter { CamelCaseText = true })", span="430-430", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.EnumMemberPlusFlags()"];
n153 [label="Assert.AreEqual(@''[\r\n  ''''foo_bar'''',\r\n  ''''Bat'''',\r\n  ''''baz''''\r\n]'', json2)", span="432-436", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.EnumMemberPlusFlags()"];
n154 [label="IList<Bar> bars = JsonConvert.DeserializeObject<List<Bar>>(json2)", span="438-438", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.EnumMemberPlusFlags()"];
n155 [label="Assert.AreEqual(3, bars.Count)", span="440-440", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.EnumMemberPlusFlags()"];
n156 [label="Assert.AreEqual(Bar.FooBar, bars[0])", span="441-441", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.EnumMemberPlusFlags()"];
n157 [label="Assert.AreEqual(Bar.Bat, bars[1])", span="442-442", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.EnumMemberPlusFlags()"];
n158 [label="Assert.AreEqual(Bar.SerializeAsBaz, bars[2])", span="443-443", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.EnumMemberPlusFlags()"];
n159 [label="Exit Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.EnumMemberPlusFlags()", span="394-394", cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.EnumMemberPlusFlags()"];
d1 [label="CompositeExpression compositeExpression = new CompositeExpression\r\n            {\r\n                Operator = QueryOperator.And,\r\n                Expressions = new List<QueryExpression>\r\n                {\r\n                    new BooleanQueryExpression\r\n                    {\r\n                        Operator = QueryOperator.Exists,\r\n                        Path = new List<PathFilter>\r\n                        {\r\n                            new FieldFilter\r\n                            {\r\n                                Name = ''FirstName''\r\n                            }\r\n                        }\r\n                    },\r\n                    new BooleanQueryExpression\r\n                    {\r\n                        Operator = QueryOperator.Exists,\r\n                        Path = new List<PathFilter>\r\n                        {\r\n                            new FieldFilter\r\n                            {\r\n                                Name = ''LastName''\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }", span="51-79", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.AndExpressionTest()", color=green, community=0];
d0 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.AndExpressionTest()", span="49-49", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.AndExpressionTest()"];
d2 [label="JObject o1 = new JObject\r\n            {\r\n                { ''Title'', ''Title!'' },\r\n                { ''FirstName'', ''FirstName!'' },\r\n                { ''LastName'', ''LastName!'' }\r\n            }", span="81-86", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.AndExpressionTest()"];
d9 [label="Entry Newtonsoft.Json.Linq.JsonPath.CompositeExpression.CompositeExpression()", span="33-33", cluster="Newtonsoft.Json.Linq.JsonPath.CompositeExpression.CompositeExpression()"];
d10 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()"];
d11 [label="Entry Newtonsoft.Json.Linq.JsonPath.BooleanQueryExpression.BooleanQueryExpression()", span="66-66", cluster="Newtonsoft.Json.Linq.JsonPath.BooleanQueryExpression.BooleanQueryExpression()"];
d12 [label="Entry Newtonsoft.Json.Linq.JsonPath.FieldFilter.FieldFilter()", span="6-6", cluster="Newtonsoft.Json.Linq.JsonPath.FieldFilter.FieldFilter()"];
d3 [label="Assert.IsTrue(compositeExpression.IsMatch(o1))", span="88-88", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.AndExpressionTest()"];
d5 [label="Assert.IsFalse(compositeExpression.IsMatch(o2))", span="96-96", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.AndExpressionTest()"];
d7 [label="Assert.IsFalse(compositeExpression.IsMatch(o3))", span="103-103", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.AndExpressionTest()"];
d6 [label="JObject o3 = new JObject\r\n            {\r\n                { ''Title'', ''Title!'' }\r\n            }", span="98-101", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.AndExpressionTest()", color=green, community=0];
d13 [label="Entry Newtonsoft.Json.Linq.JObject.JObject()", span="88-88", cluster="Newtonsoft.Json.Linq.JObject.JObject()"];
d27 [label="BooleanQueryExpression e1 = new BooleanQueryExpression\r\n            {\r\n                Operator = QueryOperator.LessThan,\r\n                Value = new JValue(3),\r\n                Path = new List<PathFilter>\r\n                {\r\n                    new ArrayIndexFilter()\r\n                }\r\n            }", span="167-175", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.BooleanExpressionTest()", color=green, community=0];
d26 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.BooleanExpressionTest()", span="165-165", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.BooleanExpressionTest()"];
d28 [label="Assert.IsTrue(e1.IsMatch(new JArray(1, 2, 3, 4, 5)))", span="177-177", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.BooleanExpressionTest()"];
d38 [label="Entry Newtonsoft.Json.Linq.JValue.JValue(long)", span="70-70", cluster="Newtonsoft.Json.Linq.JValue.JValue(long)"];
d39 [label="Entry Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter.ArrayIndexFilter()", span="6-6", cluster="Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter.ArrayIndexFilter()"];
d29 [label="Assert.IsTrue(e1.IsMatch(new JArray(2, 3, 4, 5)))", span="178-178", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.BooleanExpressionTest()"];
d30 [label="Assert.IsFalse(e1.IsMatch(new JArray(3, 4, 5)))", span="179-179", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.BooleanExpressionTest()"];
d31 [label="Assert.IsFalse(e1.IsMatch(new JArray(4, 5)))", span="180-180", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.BooleanExpressionTest()"];
d32 [label="BooleanQueryExpression e2 = new BooleanQueryExpression\r\n            {\r\n                Operator = QueryOperator.LessThanOrEquals,\r\n                Value = new JValue(3),\r\n                Path = new List<PathFilter>\r\n                {\r\n                    new ArrayIndexFilter()\r\n                }\r\n            }", span="182-190", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.BooleanExpressionTest()", color=green, community=0];
d33 [label="Assert.IsTrue(e2.IsMatch(new JArray(1, 2, 3, 4, 5)))", span="192-192", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.BooleanExpressionTest()"];
d34 [label="Assert.IsTrue(e2.IsMatch(new JArray(2, 3, 4, 5)))", span="193-193", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.BooleanExpressionTest()"];
d35 [label="Assert.IsTrue(e2.IsMatch(new JArray(3, 4, 5)))", span="194-194", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.BooleanExpressionTest()"];
d36 [label="Assert.IsFalse(e2.IsMatch(new JArray(4, 5)))", span="195-195", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.BooleanExpressionTest()"];
d8 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.AndExpressionTest()", span="49-49", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.AndExpressionTest()"];
d18 [label="CompositeExpression compositeExpression = new CompositeExpression\r\n            {\r\n                Operator = QueryOperator.Or,\r\n                Expressions = new List<QueryExpression>\r\n                {\r\n                    new BooleanQueryExpression\r\n                    {\r\n                        Operator = QueryOperator.Exists,\r\n                        Path = new List<PathFilter>\r\n                        {\r\n                            new FieldFilter\r\n                            {\r\n                                Name = ''FirstName''\r\n                            }\r\n                        }\r\n                    },\r\n                    new BooleanQueryExpression\r\n                    {\r\n                        Operator = QueryOperator.Exists,\r\n                        Path = new List<PathFilter>\r\n                        {\r\n                            new FieldFilter\r\n                            {\r\n                                Name = ''LastName''\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }", span="109-137", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.OrExpressionTest()"];
d4 [label="JObject o2 = new JObject\r\n            {\r\n                { ''Title'', ''Title!'' },\r\n                { ''FirstName'', ''FirstName!'' }\r\n            }", span="90-94", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.AndExpressionTest()"];
d14 [label="Entry Newtonsoft.Json.Linq.JsonPath.CompositeExpression.IsMatch(Newtonsoft.Json.Linq.JToken)", span="38-38", cluster="Newtonsoft.Json.Linq.JsonPath.CompositeExpression.IsMatch(Newtonsoft.Json.Linq.JToken)"];
d15 [label="Entry Unk.IsTrue", span="", cluster="Unk.IsTrue"];
d16 [label="Entry Unk.IsFalse", span="", cluster="Unk.IsFalse"];
d19 [label="JObject o1 = new JObject\r\n            {\r\n                { ''Title'', ''Title!'' },\r\n                { ''FirstName'', ''FirstName!'' },\r\n                { ''LastName'', ''LastName!'' }\r\n            }", span="139-144", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.OrExpressionTest()"];
d21 [label="JObject o2 = new JObject\r\n            {\r\n                { ''Title'', ''Title!'' },\r\n                { ''FirstName'', ''FirstName!'' }\r\n            }", span="148-152", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.OrExpressionTest()"];
d23 [label="JObject o3 = new JObject\r\n            {\r\n                { ''Title'', ''Title!'' }\r\n            }", span="156-159", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.OrExpressionTest()"];
d37 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.BooleanExpressionTest()", span="165-165", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.BooleanExpressionTest()"];
d40 [label="Entry Newtonsoft.Json.Linq.JArray.JArray(params object[])", span="82-82", cluster="Newtonsoft.Json.Linq.JArray.JArray(params object[])"];
d41 [label="Entry Newtonsoft.Json.Linq.JsonPath.BooleanQueryExpression.IsMatch(Newtonsoft.Json.Linq.JToken)", span="71-71", cluster="Newtonsoft.Json.Linq.JsonPath.BooleanQueryExpression.IsMatch(Newtonsoft.Json.Linq.JToken)"];
d17 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.OrExpressionTest()", span="107-107", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.OrExpressionTest()"];
d20 [label="Assert.IsTrue(compositeExpression.IsMatch(o1))", span="146-146", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.OrExpressionTest()"];
d22 [label="Assert.IsTrue(compositeExpression.IsMatch(o2))", span="154-154", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.OrExpressionTest()"];
d24 [label="Assert.IsFalse(compositeExpression.IsMatch(o3))", span="161-161", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.OrExpressionTest()"];
d25 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.OrExpressionTest()", span="107-107", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.OrExpressionTest()"];
m1_0 [label="Entry Newtonsoft.Json.TestConsole.Program.Main(string[])", span="34-34", cluster="Newtonsoft.Json.TestConsole.Program.Main(string[])", file="Program.cs"];
m1_1 [label="var attribute = (AssemblyFileVersionAttribute)typeof(JsonConvert).GetTypeInfo().Assembly.GetCustomAttribute(typeof(AssemblyFileVersionAttribute))", span="38-38", cluster="Newtonsoft.Json.TestConsole.Program.Main(string[])", color=green, community=0, file="Program.cs"];
m1_2 [label="Console.WriteLine(''Json.NET Version: '' + attribute.Version)", span="39-39", cluster="Newtonsoft.Json.TestConsole.Program.Main(string[])", color=green, community=0, file="Program.cs"];
m1_3 [label="new BenchmarkSwitcher(new [] { typeof(LowLevelBenchmarks) }).Run(new[] { ''*'' })", span="39-39", cluster="Newtonsoft.Json.TestConsole.Program.Main(string[])", file="Program.cs"];
m1_4 [label="Exit Newtonsoft.Json.TestConsole.Program.Main(string[])", span="34-34", cluster="Newtonsoft.Json.TestConsole.Program.Main(string[])", file="Program.cs"];
m1_6 [label="Entry System.Console.WriteLine(string)", span="0-0", cluster="System.Console.WriteLine(string)", file="Program.cs"];
m1_5 [label="Entry System.Diagnostics.FileVersionInfo.GetVersionInfo(string)", span="0-0", cluster="System.Diagnostics.FileVersionInfo.GetVersionInfo(string)", file="Program.cs"];
m1_8 [label="Entry Unk.Run", span="", cluster="Unk.Run", file="Program.cs"];
m1_7 [label="Entry BenchmarkSwitcher.cstr", span="", cluster="BenchmarkSwitcher.cstr", file="Program.cs"];
m2_7 [label="Entry Newtonsoft.Json.Linq.JsonPath.PathFilter.GetTokenIndex(Newtonsoft.Json.Linq.JToken, bool, int)", span="10-10", cluster="Newtonsoft.Json.Linq.JsonPath.PathFilter.GetTokenIndex(Newtonsoft.Json.Linq.JToken, bool, int)", file="ThreadSafeStore.cs"];
m2_0 [label="Entry Newtonsoft.Json.Linq.JsonPath.ArrayMultipleIndexFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", span="8-8", cluster="Newtonsoft.Json.Linq.JsonPath.ArrayMultipleIndexFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="ThreadSafeStore.cs"];
m2_1 [label=current, span="10-10", cluster="Newtonsoft.Json.Linq.JsonPath.ArrayMultipleIndexFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="ThreadSafeStore.cs"];
m2_5 [label="yield return v;", span="18-18", cluster="Newtonsoft.Json.Linq.JsonPath.ArrayMultipleIndexFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="ThreadSafeStore.cs"];
m2_3 [label="JToken v = GetTokenIndex(t, errorWhenNoMatch, i)", span="14-14", cluster="Newtonsoft.Json.Linq.JsonPath.ArrayMultipleIndexFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="ThreadSafeStore.cs"];
m2_2 [label=Indexes, span="12-12", cluster="Newtonsoft.Json.Linq.JsonPath.ArrayMultipleIndexFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="ThreadSafeStore.cs"];
m2_4 [label="v != null", span="16-16", cluster="Newtonsoft.Json.Linq.JsonPath.ArrayMultipleIndexFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="ThreadSafeStore.cs"];
m2_6 [label="Exit Newtonsoft.Json.Linq.JsonPath.ArrayMultipleIndexFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", span="8-8", cluster="Newtonsoft.Json.Linq.JsonPath.ArrayMultipleIndexFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="ThreadSafeStore.cs"];
m2_8 [label="Newtonsoft.Json.Linq.JsonPath.ArrayMultipleIndexFilter", span="", file="ThreadSafeStore.cs"];
n162 -> n120  [key=1, style=dashed, color=darkseagreen4, label=json];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n1 -> n3  [key=2, style=dotted];
n1 -> n4  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n2 -> n0  [key=0, style=bold, color=blue];
n4 -> n5  [key=0, style=solid];
n5 -> n6  [key=0, style=solid];
n5 -> n8  [key=2, style=dotted];
n6 -> n7  [key=0, style=solid];
n6 -> n9  [key=2, style=dotted];
n6 -> n10  [key=2, style=dotted];
n7 -> n4  [key=0, style=bold, color=blue];
n11 -> n12  [key=0, style=solid];
n12 -> n13  [key=0, style=solid];
n12 -> n8  [key=2, style=dotted];
n13 -> n14  [key=0, style=solid];
n13 -> n9  [key=2, style=dotted];
n13 -> n10  [key=2, style=dotted];
n14 -> n15  [key=0, style=solid];
n14 -> n19  [key=2, style=dotted];
n15 -> n16  [key=0, style=solid];
n15 -> n8  [key=2, style=dotted];
n16 -> n17  [key=0, style=solid];
n16 -> n9  [key=2, style=dotted];
n16 -> n10  [key=2, style=dotted];
n17 -> n18  [key=0, style=solid];
n17 -> n19  [key=2, style=dotted];
n18 -> n11  [key=0, style=bold, color=blue];
n20 -> n21  [key=0, style=solid];
n21 -> n22  [key=0, style=solid];
n22 -> n23  [key=0, style=solid];
n22 -> n9  [key=2, style=dotted];
n22 -> n28  [key=2, style=dotted];
n23 -> n24  [key=0, style=solid];
n23 -> n19  [key=2, style=dotted];
n24 -> n25  [key=0, style=solid];
n25 -> n26  [key=0, style=solid];
n25 -> n9  [key=2, style=dotted];
n25 -> n28  [key=2, style=dotted];
n26 -> n27  [key=0, style=solid];
n26 -> n19  [key=2, style=dotted];
n27 -> n20  [key=0, style=bold, color=blue];
n29 -> n30  [key=0, style=solid];
n30 -> n31  [key=0, style=solid];
n30 -> n37  [key=2, style=dotted];
n30 -> n32  [key=1, style=dashed, color=darkseagreen4, label=enumClass];
n30 -> n33  [key=1, style=dashed, color=darkseagreen4, label=enumClass];
n30 -> n34  [key=1, style=dashed, color=darkseagreen4, label=enumClass];
n31 -> n32  [key=0, style=solid];
n32 -> n33  [key=0, style=solid];
n33 -> n34  [key=0, style=solid];
n34 -> n35  [key=0, style=solid];
n34 -> n9  [key=2, style=dotted];
n34 -> n10  [key=2, style=dotted];
n35 -> n36  [key=0, style=solid];
n35 -> n19  [key=2, style=dotted];
n36 -> n29  [key=0, style=bold, color=blue];
n38 -> n39  [key=0, style=solid, color=red];
n39 -> n40  [key=0, style=solid, color=red];
n39 -> n37  [key=2, style=dotted, color=red];
n39 -> n41  [key=1, style=dashed, color=red, label=enumClass];
n39 -> n42  [key=1, style=dashed, color=red, label=enumClass];
n39 -> n43  [key=1, style=dashed, color=red, label=enumClass];
n40 -> n41  [key=0, style=solid, color=red];
n41 -> n42  [key=0, style=solid, color=red];
n42 -> n43  [key=0, style=solid, color=red];
n43 -> n44  [key=0, style=solid, color=red];
n43 -> n9  [key=2, style=dotted, color=red];
n43 -> n10  [key=2, style=dotted, color=red];
n44 -> n45  [key=0, style=solid, color=red];
n44 -> n19  [key=2, style=dotted, color=red];
n45 -> n38  [key=0, style=bold, color=blue];
n46 -> n47  [key=0, style=solid];
n47 -> n48  [key=0, style=solid];
n47 -> n37  [key=2, style=dotted];
n47 -> n49  [key=1, style=dashed, color=darkseagreen4, label=enumClass];
n47 -> n50  [key=1, style=dashed, color=darkseagreen4, label=enumClass];
n47 -> n51  [key=1, style=dashed, color=darkseagreen4, label=enumClass];
n48 -> n49  [key=0, style=solid];
n49 -> n50  [key=0, style=solid];
n50 -> n51  [key=0, style=solid];
n51 -> n52  [key=0, style=solid];
n51 -> n9  [key=2, style=dotted];
n51 -> n10  [key=2, style=dotted];
n52 -> n53  [key=0, style=solid];
n52 -> n19  [key=2, style=dotted];
n53 -> n46  [key=0, style=bold, color=blue];
n54 -> n55  [key=0, style=solid];
n55 -> n56  [key=0, style=solid];
n55 -> n37  [key=2, style=dotted];
n55 -> n57  [key=1, style=dashed, color=darkseagreen4, label=enumClass];
n55 -> n58  [key=1, style=dashed, color=darkseagreen4, label=enumClass];
n55 -> n59  [key=1, style=dashed, color=darkseagreen4, label=enumClass];
n56 -> n57  [key=0, style=solid];
n57 -> n58  [key=0, style=solid];
n58 -> n59  [key=0, style=solid];
n59 -> n60  [key=0, style=solid];
n59 -> n9  [key=2, style=dotted];
n59 -> n10  [key=2, style=dotted];
n60 -> n61  [key=0, style=solid];
n60 -> n19  [key=2, style=dotted];
n61 -> n54  [key=0, style=bold, color=blue];
n62 -> n63  [key=0, style=solid];
n63 -> n64  [key=0, style=solid];
n63 -> n69  [key=2, style=dotted];
n63 -> n65  [key=1, style=dashed, color=darkseagreen4, label=negativeEnumClass];
n63 -> n66  [key=1, style=dashed, color=darkseagreen4, label=negativeEnumClass];
n64 -> n65  [key=0, style=solid];
n65 -> n66  [key=0, style=solid];
n66 -> n67  [key=0, style=solid];
n66 -> n9  [key=2, style=dotted];
n66 -> n10  [key=2, style=dotted];
n67 -> n68  [key=0, style=solid];
n67 -> n19  [key=2, style=dotted];
n68 -> n62  [key=0, style=bold, color=blue];
n70 -> n71  [key=0, style=solid];
n71 -> n72  [key=0, style=solid];
n72 -> n73  [key=0, style=solid];
n72 -> n9  [key=2, style=dotted];
n72 -> n28  [key=2, style=dotted];
n72 -> n74  [key=1, style=dashed, color=darkseagreen4, label=negativeEnumClass];
n73 -> n74  [key=0, style=solid];
n73 -> n19  [key=2, style=dotted];
n74 -> n75  [key=0, style=solid];
n74 -> n19  [key=2, style=dotted];
n75 -> n70  [key=0, style=bold, color=blue];
n76 -> n77  [key=0, style=solid];
n77 -> n78  [key=0, style=solid];
n78 -> n79  [key=0, style=solid];
n78 -> n9  [key=2, style=dotted];
n78 -> n28  [key=2, style=dotted];
n78 -> n80  [key=1, style=dashed, color=darkseagreen4, label=enumClass];
n78 -> n81  [key=1, style=dashed, color=darkseagreen4, label=enumClass];
n79 -> n80  [key=0, style=solid];
n79 -> n19  [key=2, style=dotted];
n80 -> n81  [key=0, style=solid];
n80 -> n19  [key=2, style=dotted];
n81 -> n82  [key=0, style=solid];
n81 -> n19  [key=2, style=dotted];
n82 -> n76  [key=0, style=bold, color=blue];
n83 -> n84  [key=0, style=solid];
n84 -> n85  [key=0, style=solid];
n85 -> n86  [key=0, style=solid];
n85 -> n9  [key=2, style=dotted];
n85 -> n28  [key=2, style=dotted];
n85 -> n87  [key=1, style=dashed, color=darkseagreen4, label=enumClass];
n85 -> n88  [key=1, style=dashed, color=darkseagreen4, label=enumClass];
n86 -> n87  [key=0, style=solid];
n86 -> n19  [key=2, style=dotted];
n87 -> n88  [key=0, style=solid];
n87 -> n19  [key=2, style=dotted];
n88 -> n89  [key=0, style=solid];
n88 -> n19  [key=2, style=dotted];
n89 -> n83  [key=0, style=bold, color=blue];
n90 -> n91  [key=0, style=solid];
n91 -> n92  [key=0, style=solid];
n92 -> n93  [key=0, style=solid];
n92 -> n9  [key=2, style=dotted];
n92 -> n28  [key=2, style=dotted];
n92 -> n94  [key=1, style=dashed, color=darkseagreen4, label=enumClass];
n92 -> n95  [key=1, style=dashed, color=darkseagreen4, label=enumClass];
n93 -> n94  [key=0, style=solid];
n93 -> n19  [key=2, style=dotted];
n94 -> n95  [key=0, style=solid];
n94 -> n19  [key=2, style=dotted];
n95 -> n96  [key=0, style=solid];
n95 -> n19  [key=2, style=dotted];
n96 -> n90  [key=0, style=bold, color=blue];
n97 -> n98  [key=0, style=solid];
n98 -> n99  [key=0, style=solid];
n98 -> n8  [key=2, style=dotted];
n99 -> n100  [key=0, style=solid];
n99 -> n9  [key=2, style=dotted];
n99 -> n10  [key=2, style=dotted];
n100 -> n101  [key=0, style=solid];
n100 -> n19  [key=2, style=dotted];
n101 -> n97  [key=0, style=bold, color=blue];
n102 -> n103  [key=0, style=solid];
n103 -> n104  [key=0, style=solid];
n104 -> n105  [key=0, style=solid];
n104 -> n9  [key=2, style=dotted];
n104 -> n28  [key=2, style=dotted];
n105 -> n106  [key=0, style=solid];
n105 -> n19  [key=2, style=dotted];
n106 -> n102  [key=0, style=bold, color=blue];
n107 -> n108  [key=0, style=solid];
n108 -> n109  [key=0, style=solid];
n109 -> n110  [key=0, style=solid];
n109 -> n9  [key=2, style=dotted];
n109 -> n28  [key=2, style=dotted];
n110 -> n111  [key=0, style=solid];
n110 -> n112  [key=2, style=dotted];
n111 -> n107  [key=0, style=bold, color=blue];
n113 -> n114  [key=0, style=solid];
n114 -> n115  [key=0, style=solid];
n114 -> n120  [key=1, style=dashed, color=darkseagreen4, label=json];
n115 -> n116  [key=0, style=solid];
n115 -> n3  [key=2, style=dotted];
n115 -> n117  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
n120 -> n121  [key=0, style=solid];
n120 -> n124  [key=2, style=dotted];
n120 -> n125  [key=2, style=dotted];
n120 -> n126  [key=2, style=dotted];
n116 -> n113  [key=0, style=bold, color=blue];
n117 -> n118  [key=0, style=solid];
n118 -> n119  [key=0, style=solid];
n118 -> n122  [key=2, style=dotted];
n118 -> n120  [key=1, style=dashed, color=darkseagreen4, label=serializer];
n119 -> n120  [key=0, style=solid];
n119 -> n9  [key=2, style=dotted];
n119 -> n123  [key=2, style=dotted];
n121 -> n117  [key=0, style=bold, color=blue];
n127 -> n128  [key=0, style=solid];
n128 -> n129  [key=0, style=solid];
n128 -> n131  [key=1, style=dashed, color=darkseagreen4, label=json];
n129 -> n130  [key=0, style=solid];
n129 -> n122  [key=2, style=dotted];
n129 -> n131  [key=1, style=dashed, color=darkseagreen4, label=serializer];
n131 -> n132  [key=0, style=solid];
n131 -> n136  [key=0, style=solid];
n131 -> n124  [key=2, style=dotted];
n131 -> n125  [key=2, style=dotted];
n131 -> n126  [key=2, style=dotted];
n130 -> n131  [key=0, style=solid];
n130 -> n9  [key=2, style=dotted];
n130 -> n123  [key=2, style=dotted];
n132 -> n133  [key=0, style=solid];
n136 -> n137  [key=0, style=solid];
n136 -> n138  [key=2, style=dotted];
n133 -> n134  [key=0, style=solid];
n133 -> n19  [key=2, style=dotted];
n134 -> n135  [key=0, style=solid];
n134 -> n19  [key=2, style=dotted];
n135 -> n137  [key=0, style=solid];
n137 -> n127  [key=0, style=bold, color=blue];
n139 -> n140  [key=0, style=solid];
n140 -> n141  [key=0, style=solid];
n140 -> n160  [key=2, style=dotted];
n141 -> n142  [key=0, style=solid];
n141 -> n9  [key=2, style=dotted];
n141 -> n10  [key=2, style=dotted];
n141 -> n143  [key=1, style=dashed, color=darkseagreen4, label=json1];
n142 -> n143  [key=0, style=solid];
n142 -> n19  [key=2, style=dotted];
n143 -> n144  [key=0, style=solid];
n143 -> n161  [key=2, style=dotted];
n143 -> n145  [key=1, style=dashed, color=darkseagreen4, label=foos];
n143 -> n146  [key=1, style=dashed, color=darkseagreen4, label=foos];
n143 -> n147  [key=1, style=dashed, color=darkseagreen4, label=foos];
n143 -> n148  [key=1, style=dashed, color=darkseagreen4, label=foos];
n143 -> n149  [key=1, style=dashed, color=darkseagreen4, label=foos];
n143 -> n150  [key=1, style=dashed, color=darkseagreen4, label=foos];
n144 -> n145  [key=0, style=solid];
n144 -> n19  [key=2, style=dotted];
n145 -> n146  [key=0, style=solid];
n145 -> n19  [key=2, style=dotted];
n146 -> n147  [key=0, style=solid];
n146 -> n19  [key=2, style=dotted];
n147 -> n148  [key=0, style=solid];
n147 -> n19  [key=2, style=dotted];
n148 -> n149  [key=0, style=solid];
n148 -> n19  [key=2, style=dotted];
n149 -> n150  [key=0, style=solid];
n149 -> n19  [key=2, style=dotted];
n150 -> n151  [key=0, style=solid];
n150 -> n19  [key=2, style=dotted];
n151 -> n152  [key=0, style=solid];
n151 -> n160  [key=2, style=dotted];
n152 -> n153  [key=0, style=solid];
n152 -> n9  [key=2, style=dotted];
n152 -> n10  [key=2, style=dotted];
n152 -> n154  [key=1, style=dashed, color=darkseagreen4, label=json2];
n153 -> n154  [key=0, style=solid];
n153 -> n19  [key=2, style=dotted];
n154 -> n155  [key=0, style=solid];
n154 -> n161  [key=2, style=dotted];
n154 -> n156  [key=1, style=dashed, color=darkseagreen4, label=bars];
n154 -> n157  [key=1, style=dashed, color=darkseagreen4, label=bars];
n154 -> n158  [key=1, style=dashed, color=darkseagreen4, label=bars];
n155 -> n156  [key=0, style=solid];
n155 -> n19  [key=2, style=dotted];
n156 -> n157  [key=0, style=solid];
n156 -> n19  [key=2, style=dotted];
n157 -> n158  [key=0, style=solid];
n157 -> n19  [key=2, style=dotted];
n158 -> n159  [key=0, style=solid];
n158 -> n19  [key=2, style=dotted];
n159 -> n139  [key=0, style=bold, color=blue];
d1 -> d1  [key=3, color=green, style=bold, label="Property variable Newtonsoft.Json.Serialization.IContractResolver Instance"];
d1 -> d2  [key=0, style=solid, color=green];
d1 -> d9  [key=2, style=dotted, color=green];
d1 -> d10  [key=2, style=dotted, color=green];
d1 -> d11  [key=2, style=dotted, color=green];
d1 -> d12  [key=2, style=dotted, color=green];
d1 -> d3  [key=1, style=dashed, color=green, label=compositeExpression];
d1 -> d5  [key=1, style=dashed, color=green, label=compositeExpression];
d1 -> d7  [key=1, style=dashed, color=green, label=compositeExpression];
d0 -> d1  [key=0, style=solid, color=green];
d2 -> d3  [key=0, style=solid];
d2 -> d13  [key=2, style=dotted];
d3 -> d4  [key=0, style=solid];
d3 -> d14  [key=2, style=dotted];
d3 -> d15  [key=2, style=dotted];
d5 -> d6  [key=0, style=solid, color=green];
d5 -> d14  [key=2, style=dotted];
d5 -> d16  [key=2, style=dotted];
d7 -> d8  [key=0, style=solid];
d7 -> d14  [key=2, style=dotted];
d7 -> d16  [key=2, style=dotted];
d6 -> d7  [key=0, style=solid, color=green];
d6 -> d13  [key=2, style=dotted, color=green];
d27 -> d28  [key=0, style=solid, color=green];
d27 -> d11  [key=2, style=dotted, color=green];
d27 -> d38  [key=2, style=dotted, color=green];
d27 -> d10  [key=2, style=dotted, color=green];
d27 -> d39  [key=2, style=dotted, color=green];
d27 -> d29  [key=1, style=dashed, color=green, label=e1];
d27 -> d30  [key=1, style=dashed, color=green, label=e1];
d27 -> d31  [key=1, style=dashed, color=green, label=e1];
d26 -> d27  [key=0, style=solid, color=green];
d28 -> d29  [key=0, style=solid];
d28 -> d40  [key=2, style=dotted];
d28 -> d41  [key=2, style=dotted];
d28 -> d15  [key=2, style=dotted];
d29 -> d30  [key=0, style=solid];
d29 -> d40  [key=2, style=dotted];
d29 -> d41  [key=2, style=dotted];
d29 -> d15  [key=2, style=dotted];
d30 -> d31  [key=0, style=solid];
d30 -> d40  [key=2, style=dotted];
d30 -> d41  [key=2, style=dotted];
d30 -> d16  [key=2, style=dotted];
d31 -> d32  [key=0, style=solid, color=green];
d31 -> d40  [key=2, style=dotted];
d31 -> d41  [key=2, style=dotted];
d31 -> d16  [key=2, style=dotted];
d32 -> d33  [key=0, style=solid, color=green];
d32 -> d11  [key=2, style=dotted, color=green];
d32 -> d38  [key=2, style=dotted, color=green];
d32 -> d10  [key=2, style=dotted, color=green];
d32 -> d39  [key=2, style=dotted, color=green];
d32 -> d34  [key=1, style=dashed, color=green, label=e2];
d32 -> d35  [key=1, style=dashed, color=green, label=e2];
d32 -> d36  [key=1, style=dashed, color=green, label=e2];
d33 -> d34  [key=0, style=solid];
d33 -> d40  [key=2, style=dotted];
d33 -> d41  [key=2, style=dotted];
d33 -> d15  [key=2, style=dotted];
d34 -> d35  [key=0, style=solid];
d34 -> d40  [key=2, style=dotted];
d34 -> d41  [key=2, style=dotted];
d34 -> d15  [key=2, style=dotted];
d35 -> d36  [key=0, style=solid];
d35 -> d40  [key=2, style=dotted];
d35 -> d41  [key=2, style=dotted];
d35 -> d15  [key=2, style=dotted];
d36 -> d37  [key=0, style=solid];
d36 -> d40  [key=2, style=dotted];
d36 -> d41  [key=2, style=dotted];
d36 -> d16  [key=2, style=dotted];
d8 -> d0  [key=0, style=bold, color=blue];
d18 -> d9  [key=2, style=dotted];
d18 -> d10  [key=2, style=dotted];
d18 -> d11  [key=2, style=dotted];
d18 -> d12  [key=2, style=dotted];
d18 -> d19  [key=0, style=solid];
d18 -> d20  [key=1, style=dashed, color=darkseagreen4, label=compositeExpression];
d18 -> d22  [key=1, style=dashed, color=darkseagreen4, label=compositeExpression];
d18 -> d24  [key=1, style=dashed, color=darkseagreen4, label=compositeExpression];
d4 -> d5  [key=0, style=solid];
d4 -> d13  [key=2, style=dotted];
d19 -> d13  [key=2, style=dotted];
d19 -> d20  [key=0, style=solid];
d21 -> d13  [key=2, style=dotted];
d21 -> d22  [key=0, style=solid];
d23 -> d13  [key=2, style=dotted];
d23 -> d24  [key=0, style=solid];
d37 -> d26  [key=0, style=bold, color=blue];
d17 -> d18  [key=0, style=solid];
d20 -> d14  [key=2, style=dotted];
d20 -> d15  [key=2, style=dotted];
d20 -> d21  [key=0, style=solid];
d22 -> d14  [key=2, style=dotted];
d22 -> d15  [key=2, style=dotted];
d22 -> d23  [key=0, style=solid];
d24 -> d14  [key=2, style=dotted];
d24 -> d16  [key=2, style=dotted];
d24 -> d25  [key=0, style=solid];
d25 -> d17  [key=0, style=bold, color=blue];
m1_0 -> m1_1  [key=0, style=solid, color=green];
m1_1 -> m1_2  [key=0, style=solid, color=green];
m1_1 -> m1_5  [key=2, style=dotted, color=green];
m1_1 -> m1_6  [key=2, style=dotted, color=green];
m1_2 -> m1_3  [key=0, style=solid, color=green];
m1_2 -> m1_6  [key=2, style=dotted, color=green];
m1_3 -> m1_4  [key=0, style=solid];
m1_3 -> m1_7  [key=2, style=dotted];
m1_3 -> m1_8  [key=2, style=dotted];
m1_4 -> m1_0  [key=0, style=bold, color=blue];
m2_0 -> m2_1  [key=0, style=solid];
m2_0 -> m2_5  [key=0, style=bold, color=crimson];
m2_0 -> m2_3  [key=1, style=dashed, color=darkseagreen4, label=bool];
m2_1 -> m2_2  [key=0, style=solid];
m2_1 -> m2_6  [key=0, style=solid];
m2_1 -> m2_3  [key=1, style=dashed, color=darkseagreen4, label=t];
m2_5 -> m2_2  [key=0, style=solid];
m2_3 -> m2_4  [key=0, style=solid];
m2_3 -> m2_7  [key=2, style=dotted];
m2_3 -> m2_5  [key=1, style=dashed, color=darkseagreen4, label=v];
m2_2 -> m2_3  [key=0, style=solid];
m2_2 -> m2_1  [key=0, style=solid];
m2_4 -> m2_5  [key=0, style=solid];
m2_4 -> m2_2  [key=0, style=solid];
m2_6 -> m2_0  [key=0, style=bold, color=blue];
m2_8 -> m2_2  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.ArrayMultipleIndexFilter"];
}
