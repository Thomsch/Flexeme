digraph  {
n162 [label=json, span=""];
n0 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.NamedEnumDuplicateTest()", label="Entry Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.NamedEnumDuplicateTest()", span="104-104"];
n1 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.NamedEnumDuplicateTest()", label="ExceptionAssert.Throws<Exception>(''Enum name 'Third' already exists on enum 'NamedEnumDuplicate'.'',\r\n                () =>\r\n                {\r\n                    EnumContainer<NamedEnumDuplicate> c = new EnumContainer<NamedEnumDuplicate>\r\n                    {\r\n                        Enum = NamedEnumDuplicate.First\r\n                    };\r\n\r\n                    JsonConvert.SerializeObject(c, Formatting.Indented, new StringEnumConverter());\r\n                })", span="106-115"];
n2 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.NamedEnumDuplicateTest()", label="Exit Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.NamedEnumDuplicateTest()", span="104-104"];
n3 [cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(string, System.Action)", label="Entry Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(string, System.Action)", span="175-175"];
n4 [cluster="lambda expression", label="Entry lambda expression", span="107-115"];
n5 [cluster="lambda expression", label="EnumContainer<NamedEnumDuplicate> c = new EnumContainer<NamedEnumDuplicate>\r\n                    {\r\n                        Enum = NamedEnumDuplicate.First\r\n                    }", span="109-112"];
n6 [cluster="lambda expression", label="JsonConvert.SerializeObject(c, Formatting.Indented, new StringEnumConverter())", span="114-114"];
n8 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.EnumContainer<T>.EnumContainer()", label="Entry Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.EnumContainer<T>.EnumContainer()", span="54-54"];
n7 [cluster="lambda expression", label="Exit lambda expression", span="107-115"];
n9 [cluster="Newtonsoft.Json.Converters.StringEnumConverter.StringEnumConverter()", label="Entry Newtonsoft.Json.Converters.StringEnumConverter.StringEnumConverter()", span="62-62"];
n10 [cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting, params Newtonsoft.Json.JsonConverter[])", label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting, params Newtonsoft.Json.JsonConverter[])", span="539-539"];
n11 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeNameEnumTest()", label="Entry Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeNameEnumTest()", span="119-119"];
n12 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeNameEnumTest()", label="EnumContainer<NamedEnum> c = new EnumContainer<NamedEnum>\r\n            {\r\n                Enum = NamedEnum.First\r\n            }", span="121-124"];
n13 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeNameEnumTest()", label="string json = JsonConvert.SerializeObject(c, Formatting.Indented, new StringEnumConverter())", span="126-126"];
n14 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeNameEnumTest()", label="Assert.AreEqual(@''{\r\n  ''''Enum'''': ''''@first''''\r\n}'', json)", span="127-129"];
n15 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeNameEnumTest()", label="c = new EnumContainer<NamedEnum>\r\n            {\r\n                Enum = NamedEnum.Third\r\n            }", span="131-134"];
n19 [cluster="Unk.AreEqual", label="Entry Unk.AreEqual", span=""];
n16 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeNameEnumTest()", label="json = JsonConvert.SerializeObject(c, Formatting.Indented, new StringEnumConverter())", span="136-136"];
n17 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeNameEnumTest()", label="Assert.AreEqual(@''{\r\n  ''''Enum'''': ''''Third''''\r\n}'', json)", span="137-139"];
n18 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeNameEnumTest()", label="Exit Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeNameEnumTest()", span="119-119"];
n20 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeNameEnumTest()", label="Entry Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeNameEnumTest()", span="143-143"];
n21 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeNameEnumTest()", label="string json = @''{\r\n  ''''Enum'''': ''''@first''''\r\n}''", span="145-147"];
n22 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeNameEnumTest()", label="EnumContainer<NamedEnum> c = JsonConvert.DeserializeObject<EnumContainer<NamedEnum>>(json, new StringEnumConverter())", span="149-149"];
n23 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeNameEnumTest()", label="Assert.AreEqual(NamedEnum.First, c.Enum)", span="150-150"];
n28 [cluster="Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string, params Newtonsoft.Json.JsonConverter[])", label="Entry Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string, params Newtonsoft.Json.JsonConverter[])", span="771-771"];
n24 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeNameEnumTest()", label="json = @''{\r\n  ''''Enum'''': ''''Third''''\r\n}''", span="152-154"];
n25 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeNameEnumTest()", label="c = JsonConvert.DeserializeObject<EnumContainer<NamedEnum>>(json, new StringEnumConverter())", span="156-156"];
n26 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeNameEnumTest()", label="Assert.AreEqual(NamedEnum.Third, c.Enum)", span="157-157"];
n27 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeNameEnumTest()", label="Exit Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeNameEnumTest()", span="143-143"];
n29 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeEnumClass()", label="Entry Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeEnumClass()", span="162-162"];
n30 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeEnumClass()", label="EnumClass enumClass = new EnumClass()", span="164-164"];
n31 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeEnumClass()", label="enumClass.StoreColor = StoreColor.Red", span="165-165"];
n37 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.EnumClass.EnumClass()", label="Entry Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.EnumClass.EnumClass()", span="47-47"];
n32 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeEnumClass()", label="enumClass.NullableStoreColor1 = StoreColor.White", span="166-166"];
n33 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeEnumClass()", label="enumClass.NullableStoreColor2 = null", span="167-167"];
n34 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeEnumClass()", label="string json = JsonConvert.SerializeObject(enumClass, Formatting.Indented, new StringEnumConverter())", span="169-169"];
n35 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeEnumClass()", label="Assert.AreEqual(@''{\r\n  ''''StoreColor'''': ''''Red'''',\r\n  ''''NullableStoreColor1'''': ''''White'''',\r\n  ''''NullableStoreColor2'''': null\r\n}'', json)", span="171-175"];
n36 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeEnumClass()", label="Exit Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeEnumClass()", span="162-162"];
n38 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeEnumClassWithCamelCase()", label="Entry Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeEnumClassWithCamelCase()", span="179-179"];
n39 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeEnumClassWithCamelCase()", color=red, community=0, label="-1: EnumClass enumClass = new EnumClass()", span="181-181"];
n40 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeEnumClassWithCamelCase()", color=red, community=0, label="-1: enumClass.StoreColor = StoreColor.Red", span="182-182"];
n41 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeEnumClassWithCamelCase()", color=red, community=0, label="-1: enumClass.NullableStoreColor1 = StoreColor.DarkGoldenrod", span="183-183"];
n42 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeEnumClassWithCamelCase()", color=red, community=0, label="-1: enumClass.NullableStoreColor2 = null", span="184-184"];
n43 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeEnumClassWithCamelCase()", color=red, community=0, label="-1: string json = JsonConvert.SerializeObject(enumClass, Formatting.Indented, new StringEnumConverter { CamelCaseText = true })", span="186-186"];
n44 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeEnumClassWithCamelCase()", color=red, community=0, label="-1: Assert.AreEqual(@''{\r\n  ''''StoreColor'''': ''''red'''',\r\n  ''''NullableStoreColor1'''': ''''darkGoldenrod'''',\r\n  ''''NullableStoreColor2'''': null\r\n}'', json)", span="188-192"];
n45 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeEnumClassWithCamelCase()", label="Exit Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeEnumClassWithCamelCase()", span="179-179"];
n46 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeEnumClassUndefined()", label="Entry Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeEnumClassUndefined()", span="196-196"];
n47 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeEnumClassUndefined()", label="EnumClass enumClass = new EnumClass()", span="198-198"];
n48 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeEnumClassUndefined()", label="enumClass.StoreColor = (StoreColor)1000", span="199-199"];
n49 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeEnumClassUndefined()", label="enumClass.NullableStoreColor1 = (StoreColor)1000", span="200-200"];
n50 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeEnumClassUndefined()", label="enumClass.NullableStoreColor2 = null", span="201-201"];
n51 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeEnumClassUndefined()", label="string json = JsonConvert.SerializeObject(enumClass, Formatting.Indented, new StringEnumConverter())", span="203-203"];
n52 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeEnumClassUndefined()", label="Assert.AreEqual(@''{\r\n  ''''StoreColor'''': 1000,\r\n  ''''NullableStoreColor1'''': 1000,\r\n  ''''NullableStoreColor2'''': null\r\n}'', json)", span="205-209"];
n53 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeEnumClassUndefined()", label="Exit Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeEnumClassUndefined()", span="196-196"];
n54 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeFlagEnum()", label="Entry Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeFlagEnum()", span="213-213"];
n55 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeFlagEnum()", label="EnumClass enumClass = new EnumClass()", span="215-215"];
n56 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeFlagEnum()", label="enumClass.StoreColor = StoreColor.Red | StoreColor.White", span="216-216"];
n57 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeFlagEnum()", label="enumClass.NullableStoreColor1 = StoreColor.White & StoreColor.Yellow", span="217-217"];
n58 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeFlagEnum()", label="enumClass.NullableStoreColor2 = StoreColor.Red | StoreColor.White | StoreColor.Black", span="218-218"];
n59 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeFlagEnum()", label="string json = JsonConvert.SerializeObject(enumClass, Formatting.Indented, new StringEnumConverter())", span="220-220"];
n60 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeFlagEnum()", label="Assert.AreEqual(@''{\r\n  ''''StoreColor'''': ''''Red, White'''',\r\n  ''''NullableStoreColor1'''': 0,\r\n  ''''NullableStoreColor2'''': ''''Black, Red, White''''\r\n}'', json)", span="222-226"];
n61 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeFlagEnum()", label="Exit Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeFlagEnum()", span="213-213"];
n62 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeNegativeEnum()", label="Entry Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeNegativeEnum()", span="230-230"];
n63 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeNegativeEnum()", label="NegativeEnumClass negativeEnumClass = new NegativeEnumClass()", span="232-232"];
n64 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeNegativeEnum()", label="negativeEnumClass.Value1 = NegativeEnum.Negative", span="233-233"];
n69 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.NegativeEnumClass.NegativeEnumClass()", label="Entry Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.NegativeEnumClass.NegativeEnumClass()", span="96-96"];
n65 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeNegativeEnum()", label="negativeEnumClass.Value2 = (NegativeEnum)int.MinValue", span="234-234"];
n66 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeNegativeEnum()", label="string json = JsonConvert.SerializeObject(negativeEnumClass, Formatting.Indented, new StringEnumConverter())", span="236-236"];
n67 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeNegativeEnum()", label="Assert.AreEqual(@''{\r\n  ''''Value1'''': ''''Negative'''',\r\n  ''''Value2'''': -2147483648\r\n}'', json)", span="238-241"];
n68 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeNegativeEnum()", label="Exit Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.SerializeNegativeEnum()", span="230-230"];
n70 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeNegativeEnum()", label="Entry Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeNegativeEnum()", span="245-245"];
n71 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeNegativeEnum()", label="string json = @''{\r\n  ''''Value1'''': ''''Negative'''',\r\n  ''''Value2'''': -2147483648\r\n}''", span="247-250"];
n72 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeNegativeEnum()", label="NegativeEnumClass negativeEnumClass = JsonConvert.DeserializeObject<NegativeEnumClass>(json, new StringEnumConverter())", span="252-252"];
n73 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeNegativeEnum()", label="Assert.AreEqual(NegativeEnum.Negative, negativeEnumClass.Value1)", span="254-254"];
n74 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeNegativeEnum()", label="Assert.AreEqual((NegativeEnum)int.MinValue, negativeEnumClass.Value2)", span="255-255"];
n75 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeNegativeEnum()", label="Exit Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeNegativeEnum()", span="245-245"];
n76 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeFlagEnum()", label="Entry Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeFlagEnum()", span="259-259"];
n77 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeFlagEnum()", label="string json = @''{\r\n  ''''StoreColor'''': ''''Red, White'''',\r\n  ''''NullableStoreColor1'''': 0,\r\n  ''''NullableStoreColor2'''': ''''black, Red, White''''\r\n}''", span="261-265"];
n78 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeFlagEnum()", label="EnumClass enumClass = JsonConvert.DeserializeObject<EnumClass>(json, new StringEnumConverter())", span="267-267"];
n79 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeFlagEnum()", label="Assert.AreEqual(StoreColor.Red | StoreColor.White, enumClass.StoreColor)", span="269-269"];
n80 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeFlagEnum()", label="Assert.AreEqual((StoreColor)0, enumClass.NullableStoreColor1)", span="270-270"];
n81 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeFlagEnum()", label="Assert.AreEqual(StoreColor.Red | StoreColor.White | StoreColor.Black, enumClass.NullableStoreColor2)", span="271-271"];
n82 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeFlagEnum()", label="Exit Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeFlagEnum()", span="259-259"];
n83 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeEnumClass()", label="Entry Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeEnumClass()", span="275-275"];
n84 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeEnumClass()", label="string json = @''{\r\n  ''''StoreColor'''': ''''Red'''',\r\n  ''''NullableStoreColor1'''': ''''White'''',\r\n  ''''NullableStoreColor2'''': null\r\n}''", span="277-281"];
n85 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeEnumClass()", label="EnumClass enumClass = JsonConvert.DeserializeObject<EnumClass>(json, new StringEnumConverter())", span="283-283"];
n86 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeEnumClass()", label="Assert.AreEqual(StoreColor.Red, enumClass.StoreColor)", span="285-285"];
n87 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeEnumClass()", label="Assert.AreEqual(StoreColor.White, enumClass.NullableStoreColor1)", span="286-286"];
n88 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeEnumClass()", label="Assert.AreEqual(null, enumClass.NullableStoreColor2)", span="287-287"];
n89 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeEnumClass()", label="Exit Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeEnumClass()", span="275-275"];
n90 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeEnumClassUndefined()", label="Entry Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeEnumClassUndefined()", span="291-291"];
n91 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeEnumClassUndefined()", label="string json = @''{\r\n  ''''StoreColor'''': 1000,\r\n  ''''NullableStoreColor1'''': 1000,\r\n  ''''NullableStoreColor2'''': null\r\n}''", span="293-297"];
n92 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeEnumClassUndefined()", label="EnumClass enumClass = JsonConvert.DeserializeObject<EnumClass>(json, new StringEnumConverter())", span="299-299"];
n93 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeEnumClassUndefined()", label="Assert.AreEqual((StoreColor)1000, enumClass.StoreColor)", span="301-301"];
n94 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeEnumClassUndefined()", label="Assert.AreEqual((StoreColor)1000, enumClass.NullableStoreColor1)", span="302-302"];
n95 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeEnumClassUndefined()", label="Assert.AreEqual(null, enumClass.NullableStoreColor2)", span="303-303"];
n96 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeEnumClassUndefined()", label="Exit Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeEnumClassUndefined()", span="291-291"];
n97 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.CamelCaseTextFlagEnumSerialization()", label="Entry Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.CamelCaseTextFlagEnumSerialization()", span="307-307"];
n98 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.CamelCaseTextFlagEnumSerialization()", label="EnumContainer<FlagsTestEnum> c = new EnumContainer<FlagsTestEnum>\r\n            {\r\n                Enum = FlagsTestEnum.First | FlagsTestEnum.Second\r\n            }", span="309-312"];
n99 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.CamelCaseTextFlagEnumSerialization()", label="string json = JsonConvert.SerializeObject(c, Formatting.Indented, new StringEnumConverter { CamelCaseText = true })", span="314-314"];
n100 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.CamelCaseTextFlagEnumSerialization()", label="Assert.AreEqual(@''{\r\n  ''''Enum'''': ''''first, second''''\r\n}'', json)", span="315-317"];
n101 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.CamelCaseTextFlagEnumSerialization()", label="Exit Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.CamelCaseTextFlagEnumSerialization()", span="307-307"];
n102 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.CamelCaseTextFlagEnumDeserialization()", label="Entry Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.CamelCaseTextFlagEnumDeserialization()", span="321-321"];
n103 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.CamelCaseTextFlagEnumDeserialization()", label="string json = @''{\r\n  ''''Enum'''': ''''first, second''''\r\n}''", span="323-325"];
n104 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.CamelCaseTextFlagEnumDeserialization()", label="EnumContainer<FlagsTestEnum> c = JsonConvert.DeserializeObject<EnumContainer<FlagsTestEnum>>(json, new StringEnumConverter { CamelCaseText = true })", span="327-327"];
n105 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.CamelCaseTextFlagEnumDeserialization()", label="Assert.AreEqual(FlagsTestEnum.First | FlagsTestEnum.Second, c.Enum)", span="328-328"];
n106 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.CamelCaseTextFlagEnumDeserialization()", label="Exit Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.CamelCaseTextFlagEnumDeserialization()", span="321-321"];
n107 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeEmptyStringIntoNullable()", label="Entry Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeEmptyStringIntoNullable()", span="332-332"];
n108 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeEmptyStringIntoNullable()", label="string json = @''{\r\n  ''''StoreColor'''': ''''Red'''',\r\n  ''''NullableStoreColor1'''': ''''White'''',\r\n  ''''NullableStoreColor2'''': ''''''''\r\n}''", span="334-338"];
n109 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeEmptyStringIntoNullable()", label="EnumClass c = JsonConvert.DeserializeObject<EnumClass>(json, new StringEnumConverter())", span="340-340"];
n110 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeEmptyStringIntoNullable()", label="Assert.IsNull(c.NullableStoreColor2)", span="341-341"];
n111 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeEmptyStringIntoNullable()", label="Exit Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeEmptyStringIntoNullable()", span="332-332"];
n112 [cluster="Unk.IsNull", label="Entry Unk.IsNull", span=""];
n113 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeInvalidString()", label="Entry Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeInvalidString()", span="345-345"];
n114 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeInvalidString()", label="string json = ''{ \''Value\'' : \''Three\'' }''", span="347-347"];
n115 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeInvalidString()", label="ExceptionAssert.Throws<JsonSerializationException>(\r\n                @''Error converting value ''''Three'''' to type 'Newtonsoft.Json.Tests.Converters.StringEnumConverterTests+MyEnum'. Path 'Value', line 1, position 19.'',\r\n                () =>\r\n                {\r\n                    var serializer = new JsonSerializer();\r\n                    serializer.Converters.Add(new StringEnumConverter());\r\n                    serializer.Deserialize<Bucket>(new JsonTextReader(new StringReader(json)));\r\n                })", span="349-356"];
n120 [cluster="lambda expression", label="serializer.Deserialize<Bucket>(new JsonTextReader(new StringReader(json)))", span="355-355"];
n116 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeInvalidString()", label="Exit Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeInvalidString()", span="345-345"];
n117 [cluster="lambda expression", label="Entry lambda expression", span="351-356"];
n118 [cluster="lambda expression", label="var serializer = new JsonSerializer()", span="353-353"];
n119 [cluster="lambda expression", label="serializer.Converters.Add(new StringEnumConverter())", span="354-354"];
n122 [cluster="Newtonsoft.Json.JsonSerializer.JsonSerializer()", label="Entry Newtonsoft.Json.JsonSerializer.JsonSerializer()", span="418-418"];
n123 [cluster="System.Collections.ObjectModel.Collection<T>.Add(T)", label="Entry System.Collections.ObjectModel.Collection<T>.Add(T)", span="0-0"];
n121 [cluster="lambda expression", label="Exit lambda expression", span="351-356"];
n124 [cluster="Newtonsoft.Json.JsonTextReader.JsonTextReader(System.IO.TextReader)", label="Entry Newtonsoft.Json.JsonTextReader.JsonTextReader(System.IO.TextReader)", span="73-73"];
n125 [cluster="System.IO.StringReader.StringReader(string)", label="Entry System.IO.StringReader.StringReader(string)", span="0-0"];
n126 [cluster="Newtonsoft.Json.JsonSerializer.Deserialize<T>(Newtonsoft.Json.JsonReader)", label="Entry Newtonsoft.Json.JsonSerializer.Deserialize<T>(Newtonsoft.Json.JsonReader)", span="638-638"];
n127 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeIntegerButNotAllowed()", label="Entry Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeIntegerButNotAllowed()", span="371-371"];
n128 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeIntegerButNotAllowed()", label="string json = ''{ \''Value\'' : 123 }''", span="373-373"];
n129 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeIntegerButNotAllowed()", label="var serializer = new JsonSerializer()", span="377-377"];
n131 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeIntegerButNotAllowed()", label="serializer.Deserialize<Bucket>(new JsonTextReader(new StringReader(json)))", span="379-379"];
n130 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeIntegerButNotAllowed()", label="serializer.Converters.Add(new StringEnumConverter { AllowIntegerValues = false })", span="378-378"];
n132 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeIntegerButNotAllowed()", label=JsonSerializationException, span="381-381"];
n136 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeIntegerButNotAllowed()", label="Assert.Fail()", span="389-389"];
n133 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeIntegerButNotAllowed()", label="Assert.AreEqual(''Error converting value 123 to type 'Newtonsoft.Json.Tests.Converters.StringEnumConverterTests+MyEnum'. Path 'Value', line 1, position 15.'', ex.Message)", span="383-383"];
n134 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeIntegerButNotAllowed()", label="Assert.AreEqual(@''Integer value 123 is not allowed. Path 'Value', line 1, position 15.'', ex.InnerException.Message)", span="384-384"];
n135 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeIntegerButNotAllowed()", label="return;", span="386-386"];
n137 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeIntegerButNotAllowed()", label="Exit Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.DeserializeIntegerButNotAllowed()", span="371-371"];
n138 [cluster="Unk.Fail", label="Entry Unk.Fail", span=""];
n139 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.EnumMemberPlusFlags()", label="Entry Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.EnumMemberPlusFlags()", span="394-394"];
n140 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.EnumMemberPlusFlags()", label="List<Foo> lfoo =\r\n                new List<Foo>\r\n                {\r\n                    Foo.Bat | Foo.SerializeAsBaz,\r\n                    Foo.FooBar,\r\n                    Foo.Bat,\r\n                    Foo.SerializeAsBaz,\r\n                    Foo.FooBar | Foo.SerializeAsBaz,\r\n                    (Foo)int.MaxValue\r\n                }", span="396-405"];
n141 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.EnumMemberPlusFlags()", label="string json1 = JsonConvert.SerializeObject(lfoo, Formatting.Indented, new StringEnumConverter { CamelCaseText = true })", span="407-407"];
n160 [cluster="System.Collections.Generic.List<T>.List()", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
n142 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.EnumMemberPlusFlags()", label="Assert.AreEqual(@''[\r\n  ''''Bat, baz'''',\r\n  ''''foo_bar'''',\r\n  ''''Bat'''',\r\n  ''''baz'''',\r\n  ''''foo_bar, baz'''',\r\n  2147483647\r\n]'', json1)", span="409-416"];
n143 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.EnumMemberPlusFlags()", label="IList<Foo> foos = JsonConvert.DeserializeObject<List<Foo>>(json1)", span="418-418"];
n144 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.EnumMemberPlusFlags()", label="Assert.AreEqual(6, foos.Count)", span="420-420"];
n161 [cluster="Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string)", label="Entry Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string)", span="723-723"];
n145 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.EnumMemberPlusFlags()", label="Assert.AreEqual(Foo.Bat | Foo.SerializeAsBaz, foos[0])", span="421-421"];
n146 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.EnumMemberPlusFlags()", label="Assert.AreEqual(Foo.FooBar, foos[1])", span="422-422"];
n147 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.EnumMemberPlusFlags()", label="Assert.AreEqual(Foo.Bat, foos[2])", span="423-423"];
n148 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.EnumMemberPlusFlags()", label="Assert.AreEqual(Foo.SerializeAsBaz, foos[3])", span="424-424"];
n149 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.EnumMemberPlusFlags()", label="Assert.AreEqual(Foo.FooBar | Foo.SerializeAsBaz, foos[4])", span="425-425"];
n150 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.EnumMemberPlusFlags()", label="Assert.AreEqual((Foo)int.MaxValue, foos[5])", span="426-426"];
n151 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.EnumMemberPlusFlags()", label="List<Bar> lbar = new List<Bar>() { Bar.FooBar, Bar.Bat, Bar.SerializeAsBaz }", span="428-428"];
n152 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.EnumMemberPlusFlags()", label="string json2 = JsonConvert.SerializeObject(lbar, Formatting.Indented, new StringEnumConverter { CamelCaseText = true })", span="430-430"];
n153 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.EnumMemberPlusFlags()", label="Assert.AreEqual(@''[\r\n  ''''foo_bar'''',\r\n  ''''Bat'''',\r\n  ''''baz''''\r\n]'', json2)", span="432-436"];
n154 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.EnumMemberPlusFlags()", label="IList<Bar> bars = JsonConvert.DeserializeObject<List<Bar>>(json2)", span="438-438"];
n155 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.EnumMemberPlusFlags()", label="Assert.AreEqual(3, bars.Count)", span="440-440"];
n156 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.EnumMemberPlusFlags()", label="Assert.AreEqual(Bar.FooBar, bars[0])", span="441-441"];
n157 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.EnumMemberPlusFlags()", label="Assert.AreEqual(Bar.Bat, bars[1])", span="442-442"];
n158 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.EnumMemberPlusFlags()", label="Assert.AreEqual(Bar.SerializeAsBaz, bars[2])", span="443-443"];
n159 [cluster="Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.EnumMemberPlusFlags()", label="Exit Newtonsoft.Json.Tests.Converters.StringEnumConverterTests.EnumMemberPlusFlags()", span="394-394"];
d1 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.AndExpressionTest()", color=green, community=0, label="-1: CompositeExpression compositeExpression = new CompositeExpression\r\n            {\r\n                Operator = QueryOperator.And,\r\n                Expressions = new List<QueryExpression>\r\n                {\r\n                    new BooleanQueryExpression\r\n                    {\r\n                        Operator = QueryOperator.Exists,\r\n                        Path = new List<PathFilter>\r\n                        {\r\n                            new FieldFilter\r\n                            {\r\n                                Name = ''FirstName''\r\n                            }\r\n                        }\r\n                    },\r\n                    new BooleanQueryExpression\r\n                    {\r\n                        Operator = QueryOperator.Exists,\r\n                        Path = new List<PathFilter>\r\n                        {\r\n                            new FieldFilter\r\n                            {\r\n                                Name = ''LastName''\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }", span="51-79"];
d0 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.AndExpressionTest()", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.AndExpressionTest()", span="49-49"];
d2 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.AndExpressionTest()", label="JObject o1 = new JObject\r\n            {\r\n                { ''Title'', ''Title!'' },\r\n                { ''FirstName'', ''FirstName!'' },\r\n                { ''LastName'', ''LastName!'' }\r\n            }", span="81-86"];
d9 [cluster="Newtonsoft.Json.Linq.JsonPath.CompositeExpression.CompositeExpression()", label="Entry Newtonsoft.Json.Linq.JsonPath.CompositeExpression.CompositeExpression()", span="33-33"];
d10 [cluster="System.Collections.Generic.List<T>.List()", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
d11 [cluster="Newtonsoft.Json.Linq.JsonPath.BooleanQueryExpression.BooleanQueryExpression()", label="Entry Newtonsoft.Json.Linq.JsonPath.BooleanQueryExpression.BooleanQueryExpression()", span="66-66"];
d12 [cluster="Newtonsoft.Json.Linq.JsonPath.FieldFilter.FieldFilter()", label="Entry Newtonsoft.Json.Linq.JsonPath.FieldFilter.FieldFilter()", span="6-6"];
d3 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.AndExpressionTest()", label="Assert.IsTrue(compositeExpression.IsMatch(o1))", span="88-88"];
d5 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.AndExpressionTest()", label="Assert.IsFalse(compositeExpression.IsMatch(o2))", span="96-96"];
d7 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.AndExpressionTest()", label="Assert.IsFalse(compositeExpression.IsMatch(o3))", span="103-103"];
d6 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.AndExpressionTest()", color=green, community=0, label="-1: JObject o3 = new JObject\r\n            {\r\n                { ''Title'', ''Title!'' }\r\n            }", span="98-101"];
d13 [cluster="Newtonsoft.Json.Linq.JObject.JObject()", label="Entry Newtonsoft.Json.Linq.JObject.JObject()", span="88-88"];
d27 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.BooleanExpressionTest()", color=green, community=0, label="-1: BooleanQueryExpression e1 = new BooleanQueryExpression\r\n            {\r\n                Operator = QueryOperator.LessThan,\r\n                Value = new JValue(3),\r\n                Path = new List<PathFilter>\r\n                {\r\n                    new ArrayIndexFilter()\r\n                }\r\n            }", span="167-175"];
d26 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.BooleanExpressionTest()", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.BooleanExpressionTest()", span="165-165"];
d28 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.BooleanExpressionTest()", label="Assert.IsTrue(e1.IsMatch(new JArray(1, 2, 3, 4, 5)))", span="177-177"];
d38 [cluster="Newtonsoft.Json.Linq.JValue.JValue(long)", label="Entry Newtonsoft.Json.Linq.JValue.JValue(long)", span="70-70"];
d39 [cluster="Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter.ArrayIndexFilter()", label="Entry Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter.ArrayIndexFilter()", span="6-6"];
d29 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.BooleanExpressionTest()", label="Assert.IsTrue(e1.IsMatch(new JArray(2, 3, 4, 5)))", span="178-178"];
d30 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.BooleanExpressionTest()", label="Assert.IsFalse(e1.IsMatch(new JArray(3, 4, 5)))", span="179-179"];
d31 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.BooleanExpressionTest()", label="Assert.IsFalse(e1.IsMatch(new JArray(4, 5)))", span="180-180"];
d32 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.BooleanExpressionTest()", color=green, community=0, label="-1: BooleanQueryExpression e2 = new BooleanQueryExpression\r\n            {\r\n                Operator = QueryOperator.LessThanOrEquals,\r\n                Value = new JValue(3),\r\n                Path = new List<PathFilter>\r\n                {\r\n                    new ArrayIndexFilter()\r\n                }\r\n            }", span="182-190"];
d33 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.BooleanExpressionTest()", label="Assert.IsTrue(e2.IsMatch(new JArray(1, 2, 3, 4, 5)))", span="192-192"];
d34 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.BooleanExpressionTest()", label="Assert.IsTrue(e2.IsMatch(new JArray(2, 3, 4, 5)))", span="193-193"];
d35 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.BooleanExpressionTest()", label="Assert.IsTrue(e2.IsMatch(new JArray(3, 4, 5)))", span="194-194"];
d36 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.BooleanExpressionTest()", label="Assert.IsFalse(e2.IsMatch(new JArray(4, 5)))", span="195-195"];
d8 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.AndExpressionTest()", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.AndExpressionTest()", span="49-49"];
d18 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.OrExpressionTest()", label="CompositeExpression compositeExpression = new CompositeExpression\r\n            {\r\n                Operator = QueryOperator.Or,\r\n                Expressions = new List<QueryExpression>\r\n                {\r\n                    new BooleanQueryExpression\r\n                    {\r\n                        Operator = QueryOperator.Exists,\r\n                        Path = new List<PathFilter>\r\n                        {\r\n                            new FieldFilter\r\n                            {\r\n                                Name = ''FirstName''\r\n                            }\r\n                        }\r\n                    },\r\n                    new BooleanQueryExpression\r\n                    {\r\n                        Operator = QueryOperator.Exists,\r\n                        Path = new List<PathFilter>\r\n                        {\r\n                            new FieldFilter\r\n                            {\r\n                                Name = ''LastName''\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }", span="109-137"];
d4 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.AndExpressionTest()", label="JObject o2 = new JObject\r\n            {\r\n                { ''Title'', ''Title!'' },\r\n                { ''FirstName'', ''FirstName!'' }\r\n            }", span="90-94"];
d14 [cluster="Newtonsoft.Json.Linq.JsonPath.CompositeExpression.IsMatch(Newtonsoft.Json.Linq.JToken)", label="Entry Newtonsoft.Json.Linq.JsonPath.CompositeExpression.IsMatch(Newtonsoft.Json.Linq.JToken)", span="38-38"];
d15 [cluster="Unk.IsTrue", label="Entry Unk.IsTrue", span=""];
d16 [cluster="Unk.IsFalse", label="Entry Unk.IsFalse", span=""];
d19 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.OrExpressionTest()", label="JObject o1 = new JObject\r\n            {\r\n                { ''Title'', ''Title!'' },\r\n                { ''FirstName'', ''FirstName!'' },\r\n                { ''LastName'', ''LastName!'' }\r\n            }", span="139-144"];
d21 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.OrExpressionTest()", label="JObject o2 = new JObject\r\n            {\r\n                { ''Title'', ''Title!'' },\r\n                { ''FirstName'', ''FirstName!'' }\r\n            }", span="148-152"];
d23 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.OrExpressionTest()", label="JObject o3 = new JObject\r\n            {\r\n                { ''Title'', ''Title!'' }\r\n            }", span="156-159"];
d37 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.BooleanExpressionTest()", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.BooleanExpressionTest()", span="165-165"];
d40 [cluster="Newtonsoft.Json.Linq.JArray.JArray(params object[])", label="Entry Newtonsoft.Json.Linq.JArray.JArray(params object[])", span="82-82"];
d41 [cluster="Newtonsoft.Json.Linq.JsonPath.BooleanQueryExpression.IsMatch(Newtonsoft.Json.Linq.JToken)", label="Entry Newtonsoft.Json.Linq.JsonPath.BooleanQueryExpression.IsMatch(Newtonsoft.Json.Linq.JToken)", span="71-71"];
d17 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.OrExpressionTest()", label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.OrExpressionTest()", span="107-107"];
d20 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.OrExpressionTest()", label="Assert.IsTrue(compositeExpression.IsMatch(o1))", span="146-146"];
d22 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.OrExpressionTest()", label="Assert.IsTrue(compositeExpression.IsMatch(o2))", span="154-154"];
d24 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.OrExpressionTest()", label="Assert.IsFalse(compositeExpression.IsMatch(o3))", span="161-161"];
d25 [cluster="Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.OrExpressionTest()", label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.QueryExpressionTests.OrExpressionTest()", span="107-107"];
m1_0 [cluster="Newtonsoft.Json.TestConsole.Program.Main(string[])", file="Program.cs", label="Entry Newtonsoft.Json.TestConsole.Program.Main(string[])", span="34-34"];
m1_1 [cluster="Newtonsoft.Json.TestConsole.Program.Main(string[])", color=green, community=0, file="Program.cs", label="-1: var attribute = (AssemblyFileVersionAttribute)typeof(JsonConvert).GetTypeInfo().Assembly.GetCustomAttribute(typeof(AssemblyFileVersionAttribute))", span="38-38"];
m1_2 [cluster="Newtonsoft.Json.TestConsole.Program.Main(string[])", color=green, community=0, file="Program.cs", label="-1: Console.WriteLine(''Json.NET Version: '' + attribute.Version)", span="39-39"];
m1_3 [cluster="Newtonsoft.Json.TestConsole.Program.Main(string[])", file="Program.cs", label="new BenchmarkSwitcher(new [] { typeof(LowLevelBenchmarks) }).Run(new[] { ''*'' })", span="39-39"];
m1_4 [cluster="Newtonsoft.Json.TestConsole.Program.Main(string[])", file="Program.cs", label="Exit Newtonsoft.Json.TestConsole.Program.Main(string[])", span="34-34"];
m1_6 [cluster="System.Console.WriteLine(string)", file="Program.cs", label="Entry System.Console.WriteLine(string)", span="0-0"];
m1_5 [cluster="System.Diagnostics.FileVersionInfo.GetVersionInfo(string)", file="Program.cs", label="Entry System.Diagnostics.FileVersionInfo.GetVersionInfo(string)", span="0-0"];
m1_8 [cluster="Unk.Run", file="Program.cs", label="Entry Unk.Run", span=""];
m1_7 [cluster="BenchmarkSwitcher.cstr", file="Program.cs", label="Entry BenchmarkSwitcher.cstr", span=""];
m2_7 [cluster="Newtonsoft.Json.Linq.JsonPath.PathFilter.GetTokenIndex(Newtonsoft.Json.Linq.JToken, bool, int)", file="ThreadSafeStore.cs", label="Entry Newtonsoft.Json.Linq.JsonPath.PathFilter.GetTokenIndex(Newtonsoft.Json.Linq.JToken, bool, int)", span="10-10"];
m2_0 [cluster="Newtonsoft.Json.Linq.JsonPath.ArrayMultipleIndexFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="ThreadSafeStore.cs", label="Entry Newtonsoft.Json.Linq.JsonPath.ArrayMultipleIndexFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", span="8-8"];
m2_1 [cluster="Newtonsoft.Json.Linq.JsonPath.ArrayMultipleIndexFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="ThreadSafeStore.cs", label=current, span="10-10"];
m2_5 [cluster="Newtonsoft.Json.Linq.JsonPath.ArrayMultipleIndexFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="ThreadSafeStore.cs", label="yield return v;", span="18-18"];
m2_3 [cluster="Newtonsoft.Json.Linq.JsonPath.ArrayMultipleIndexFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="ThreadSafeStore.cs", label="JToken v = GetTokenIndex(t, errorWhenNoMatch, i)", span="14-14"];
m2_2 [cluster="Newtonsoft.Json.Linq.JsonPath.ArrayMultipleIndexFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="ThreadSafeStore.cs", label=Indexes, span="12-12"];
m2_4 [cluster="Newtonsoft.Json.Linq.JsonPath.ArrayMultipleIndexFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="ThreadSafeStore.cs", label="v != null", span="16-16"];
m2_6 [cluster="Newtonsoft.Json.Linq.JsonPath.ArrayMultipleIndexFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="ThreadSafeStore.cs", label="Exit Newtonsoft.Json.Linq.JsonPath.ArrayMultipleIndexFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", span="8-8"];
m2_8 [file="ThreadSafeStore.cs", label="Newtonsoft.Json.Linq.JsonPath.ArrayMultipleIndexFilter", span=""];
n162 -> n120  [color=darkseagreen4, key=1, label=json, style=dashed];
n0 -> n1  [key=0, style=solid];
n1 -> n2  [key=0, style=solid];
n1 -> n3  [key=2, style=dotted];
n1 -> n4  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n2 -> n0  [color=blue, key=0, style=bold];
n4 -> n5  [key=0, style=solid];
n5 -> n6  [key=0, style=solid];
n5 -> n8  [key=2, style=dotted];
n6 -> n7  [key=0, style=solid];
n6 -> n9  [key=2, style=dotted];
n6 -> n10  [key=2, style=dotted];
n7 -> n4  [color=blue, key=0, style=bold];
n11 -> n12  [key=0, style=solid];
n12 -> n13  [key=0, style=solid];
n12 -> n8  [key=2, style=dotted];
n13 -> n14  [key=0, style=solid];
n13 -> n9  [key=2, style=dotted];
n13 -> n10  [key=2, style=dotted];
n14 -> n15  [key=0, style=solid];
n14 -> n19  [key=2, style=dotted];
n15 -> n16  [key=0, style=solid];
n15 -> n8  [key=2, style=dotted];
n16 -> n17  [key=0, style=solid];
n16 -> n9  [key=2, style=dotted];
n16 -> n10  [key=2, style=dotted];
n17 -> n18  [key=0, style=solid];
n17 -> n19  [key=2, style=dotted];
n18 -> n11  [color=blue, key=0, style=bold];
n20 -> n21  [key=0, style=solid];
n21 -> n22  [key=0, style=solid];
n22 -> n23  [key=0, style=solid];
n22 -> n9  [key=2, style=dotted];
n22 -> n28  [key=2, style=dotted];
n23 -> n24  [key=0, style=solid];
n23 -> n19  [key=2, style=dotted];
n24 -> n25  [key=0, style=solid];
n25 -> n26  [key=0, style=solid];
n25 -> n9  [key=2, style=dotted];
n25 -> n28  [key=2, style=dotted];
n26 -> n27  [key=0, style=solid];
n26 -> n19  [key=2, style=dotted];
n27 -> n20  [color=blue, key=0, style=bold];
n29 -> n30  [key=0, style=solid];
n30 -> n31  [key=0, style=solid];
n30 -> n37  [key=2, style=dotted];
n30 -> n32  [color=darkseagreen4, key=1, label=enumClass, style=dashed];
n30 -> n33  [color=darkseagreen4, key=1, label=enumClass, style=dashed];
n30 -> n34  [color=darkseagreen4, key=1, label=enumClass, style=dashed];
n31 -> n32  [key=0, style=solid];
n32 -> n33  [key=0, style=solid];
n33 -> n34  [key=0, style=solid];
n34 -> n35  [key=0, style=solid];
n34 -> n9  [key=2, style=dotted];
n34 -> n10  [key=2, style=dotted];
n35 -> n36  [key=0, style=solid];
n35 -> n19  [key=2, style=dotted];
n36 -> n29  [color=blue, key=0, style=bold];
n38 -> n39  [color=red, key=0, style=solid];
n39 -> n40  [color=red, key=0, style=solid];
n39 -> n37  [color=red, key=2, style=dotted];
n39 -> n41  [color=red, key=1, label=enumClass, style=dashed];
n39 -> n42  [color=red, key=1, label=enumClass, style=dashed];
n39 -> n43  [color=red, key=1, label=enumClass, style=dashed];
n40 -> n41  [color=red, key=0, style=solid];
n41 -> n42  [color=red, key=0, style=solid];
n42 -> n43  [color=red, key=0, style=solid];
n43 -> n44  [color=red, key=0, style=solid];
n43 -> n9  [color=red, key=2, style=dotted];
n43 -> n10  [color=red, key=2, style=dotted];
n44 -> n45  [color=red, key=0, style=solid];
n44 -> n19  [color=red, key=2, style=dotted];
n45 -> n38  [color=blue, key=0, style=bold];
n46 -> n47  [key=0, style=solid];
n47 -> n48  [key=0, style=solid];
n47 -> n37  [key=2, style=dotted];
n47 -> n49  [color=darkseagreen4, key=1, label=enumClass, style=dashed];
n47 -> n50  [color=darkseagreen4, key=1, label=enumClass, style=dashed];
n47 -> n51  [color=darkseagreen4, key=1, label=enumClass, style=dashed];
n48 -> n49  [key=0, style=solid];
n49 -> n50  [key=0, style=solid];
n50 -> n51  [key=0, style=solid];
n51 -> n52  [key=0, style=solid];
n51 -> n9  [key=2, style=dotted];
n51 -> n10  [key=2, style=dotted];
n52 -> n53  [key=0, style=solid];
n52 -> n19  [key=2, style=dotted];
n53 -> n46  [color=blue, key=0, style=bold];
n54 -> n55  [key=0, style=solid];
n55 -> n56  [key=0, style=solid];
n55 -> n37  [key=2, style=dotted];
n55 -> n57  [color=darkseagreen4, key=1, label=enumClass, style=dashed];
n55 -> n58  [color=darkseagreen4, key=1, label=enumClass, style=dashed];
n55 -> n59  [color=darkseagreen4, key=1, label=enumClass, style=dashed];
n56 -> n57  [key=0, style=solid];
n57 -> n58  [key=0, style=solid];
n58 -> n59  [key=0, style=solid];
n59 -> n60  [key=0, style=solid];
n59 -> n9  [key=2, style=dotted];
n59 -> n10  [key=2, style=dotted];
n60 -> n61  [key=0, style=solid];
n60 -> n19  [key=2, style=dotted];
n61 -> n54  [color=blue, key=0, style=bold];
n62 -> n63  [key=0, style=solid];
n63 -> n64  [key=0, style=solid];
n63 -> n69  [key=2, style=dotted];
n63 -> n65  [color=darkseagreen4, key=1, label=negativeEnumClass, style=dashed];
n63 -> n66  [color=darkseagreen4, key=1, label=negativeEnumClass, style=dashed];
n64 -> n65  [key=0, style=solid];
n65 -> n66  [key=0, style=solid];
n66 -> n67  [key=0, style=solid];
n66 -> n9  [key=2, style=dotted];
n66 -> n10  [key=2, style=dotted];
n67 -> n68  [key=0, style=solid];
n67 -> n19  [key=2, style=dotted];
n68 -> n62  [color=blue, key=0, style=bold];
n70 -> n71  [key=0, style=solid];
n71 -> n72  [key=0, style=solid];
n72 -> n73  [key=0, style=solid];
n72 -> n9  [key=2, style=dotted];
n72 -> n28  [key=2, style=dotted];
n72 -> n74  [color=darkseagreen4, key=1, label=negativeEnumClass, style=dashed];
n73 -> n74  [key=0, style=solid];
n73 -> n19  [key=2, style=dotted];
n74 -> n75  [key=0, style=solid];
n74 -> n19  [key=2, style=dotted];
n75 -> n70  [color=blue, key=0, style=bold];
n76 -> n77  [key=0, style=solid];
n77 -> n78  [key=0, style=solid];
n78 -> n79  [key=0, style=solid];
n78 -> n9  [key=2, style=dotted];
n78 -> n28  [key=2, style=dotted];
n78 -> n80  [color=darkseagreen4, key=1, label=enumClass, style=dashed];
n78 -> n81  [color=darkseagreen4, key=1, label=enumClass, style=dashed];
n79 -> n80  [key=0, style=solid];
n79 -> n19  [key=2, style=dotted];
n80 -> n81  [key=0, style=solid];
n80 -> n19  [key=2, style=dotted];
n81 -> n82  [key=0, style=solid];
n81 -> n19  [key=2, style=dotted];
n82 -> n76  [color=blue, key=0, style=bold];
n83 -> n84  [key=0, style=solid];
n84 -> n85  [key=0, style=solid];
n85 -> n86  [key=0, style=solid];
n85 -> n9  [key=2, style=dotted];
n85 -> n28  [key=2, style=dotted];
n85 -> n87  [color=darkseagreen4, key=1, label=enumClass, style=dashed];
n85 -> n88  [color=darkseagreen4, key=1, label=enumClass, style=dashed];
n86 -> n87  [key=0, style=solid];
n86 -> n19  [key=2, style=dotted];
n87 -> n88  [key=0, style=solid];
n87 -> n19  [key=2, style=dotted];
n88 -> n89  [key=0, style=solid];
n88 -> n19  [key=2, style=dotted];
n89 -> n83  [color=blue, key=0, style=bold];
n90 -> n91  [key=0, style=solid];
n91 -> n92  [key=0, style=solid];
n92 -> n93  [key=0, style=solid];
n92 -> n9  [key=2, style=dotted];
n92 -> n28  [key=2, style=dotted];
n92 -> n94  [color=darkseagreen4, key=1, label=enumClass, style=dashed];
n92 -> n95  [color=darkseagreen4, key=1, label=enumClass, style=dashed];
n93 -> n94  [key=0, style=solid];
n93 -> n19  [key=2, style=dotted];
n94 -> n95  [key=0, style=solid];
n94 -> n19  [key=2, style=dotted];
n95 -> n96  [key=0, style=solid];
n95 -> n19  [key=2, style=dotted];
n96 -> n90  [color=blue, key=0, style=bold];
n97 -> n98  [key=0, style=solid];
n98 -> n99  [key=0, style=solid];
n98 -> n8  [key=2, style=dotted];
n99 -> n100  [key=0, style=solid];
n99 -> n9  [key=2, style=dotted];
n99 -> n10  [key=2, style=dotted];
n100 -> n101  [key=0, style=solid];
n100 -> n19  [key=2, style=dotted];
n101 -> n97  [color=blue, key=0, style=bold];
n102 -> n103  [key=0, style=solid];
n103 -> n104  [key=0, style=solid];
n104 -> n105  [key=0, style=solid];
n104 -> n9  [key=2, style=dotted];
n104 -> n28  [key=2, style=dotted];
n105 -> n106  [key=0, style=solid];
n105 -> n19  [key=2, style=dotted];
n106 -> n102  [color=blue, key=0, style=bold];
n107 -> n108  [key=0, style=solid];
n108 -> n109  [key=0, style=solid];
n109 -> n110  [key=0, style=solid];
n109 -> n9  [key=2, style=dotted];
n109 -> n28  [key=2, style=dotted];
n110 -> n111  [key=0, style=solid];
n110 -> n112  [key=2, style=dotted];
n111 -> n107  [color=blue, key=0, style=bold];
n113 -> n114  [key=0, style=solid];
n114 -> n115  [key=0, style=solid];
n114 -> n120  [color=darkseagreen4, key=1, label=json, style=dashed];
n115 -> n116  [key=0, style=solid];
n115 -> n3  [key=2, style=dotted];
n115 -> n117  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
n120 -> n121  [key=0, style=solid];
n120 -> n124  [key=2, style=dotted];
n120 -> n125  [key=2, style=dotted];
n120 -> n126  [key=2, style=dotted];
n116 -> n113  [color=blue, key=0, style=bold];
n117 -> n118  [key=0, style=solid];
n118 -> n119  [key=0, style=solid];
n118 -> n122  [key=2, style=dotted];
n118 -> n120  [color=darkseagreen4, key=1, label=serializer, style=dashed];
n119 -> n120  [key=0, style=solid];
n119 -> n9  [key=2, style=dotted];
n119 -> n123  [key=2, style=dotted];
n121 -> n117  [color=blue, key=0, style=bold];
n127 -> n128  [key=0, style=solid];
n128 -> n129  [key=0, style=solid];
n128 -> n131  [color=darkseagreen4, key=1, label=json, style=dashed];
n129 -> n130  [key=0, style=solid];
n129 -> n122  [key=2, style=dotted];
n129 -> n131  [color=darkseagreen4, key=1, label=serializer, style=dashed];
n131 -> n132  [key=0, style=solid];
n131 -> n136  [key=0, style=solid];
n131 -> n124  [key=2, style=dotted];
n131 -> n125  [key=2, style=dotted];
n131 -> n126  [key=2, style=dotted];
n130 -> n131  [key=0, style=solid];
n130 -> n9  [key=2, style=dotted];
n130 -> n123  [key=2, style=dotted];
n132 -> n133  [key=0, style=solid];
n136 -> n137  [key=0, style=solid];
n136 -> n138  [key=2, style=dotted];
n133 -> n134  [key=0, style=solid];
n133 -> n19  [key=2, style=dotted];
n134 -> n135  [key=0, style=solid];
n134 -> n19  [key=2, style=dotted];
n135 -> n137  [key=0, style=solid];
n137 -> n127  [color=blue, key=0, style=bold];
n139 -> n140  [key=0, style=solid];
n140 -> n141  [key=0, style=solid];
n140 -> n160  [key=2, style=dotted];
n141 -> n142  [key=0, style=solid];
n141 -> n9  [key=2, style=dotted];
n141 -> n10  [key=2, style=dotted];
n141 -> n143  [color=darkseagreen4, key=1, label=json1, style=dashed];
n142 -> n143  [key=0, style=solid];
n142 -> n19  [key=2, style=dotted];
n143 -> n144  [key=0, style=solid];
n143 -> n161  [key=2, style=dotted];
n143 -> n145  [color=darkseagreen4, key=1, label=foos, style=dashed];
n143 -> n146  [color=darkseagreen4, key=1, label=foos, style=dashed];
n143 -> n147  [color=darkseagreen4, key=1, label=foos, style=dashed];
n143 -> n148  [color=darkseagreen4, key=1, label=foos, style=dashed];
n143 -> n149  [color=darkseagreen4, key=1, label=foos, style=dashed];
n143 -> n150  [color=darkseagreen4, key=1, label=foos, style=dashed];
n144 -> n145  [key=0, style=solid];
n144 -> n19  [key=2, style=dotted];
n145 -> n146  [key=0, style=solid];
n145 -> n19  [key=2, style=dotted];
n146 -> n147  [key=0, style=solid];
n146 -> n19  [key=2, style=dotted];
n147 -> n148  [key=0, style=solid];
n147 -> n19  [key=2, style=dotted];
n148 -> n149  [key=0, style=solid];
n148 -> n19  [key=2, style=dotted];
n149 -> n150  [key=0, style=solid];
n149 -> n19  [key=2, style=dotted];
n150 -> n151  [key=0, style=solid];
n150 -> n19  [key=2, style=dotted];
n151 -> n152  [key=0, style=solid];
n151 -> n160  [key=2, style=dotted];
n152 -> n153  [key=0, style=solid];
n152 -> n9  [key=2, style=dotted];
n152 -> n10  [key=2, style=dotted];
n152 -> n154  [color=darkseagreen4, key=1, label=json2, style=dashed];
n153 -> n154  [key=0, style=solid];
n153 -> n19  [key=2, style=dotted];
n154 -> n155  [key=0, style=solid];
n154 -> n161  [key=2, style=dotted];
n154 -> n156  [color=darkseagreen4, key=1, label=bars, style=dashed];
n154 -> n157  [color=darkseagreen4, key=1, label=bars, style=dashed];
n154 -> n158  [color=darkseagreen4, key=1, label=bars, style=dashed];
n155 -> n156  [key=0, style=solid];
n155 -> n19  [key=2, style=dotted];
n156 -> n157  [key=0, style=solid];
n156 -> n19  [key=2, style=dotted];
n157 -> n158  [key=0, style=solid];
n157 -> n19  [key=2, style=dotted];
n158 -> n159  [key=0, style=solid];
n158 -> n19  [key=2, style=dotted];
n159 -> n139  [color=blue, key=0, style=bold];
d1 -> d1  [color=green, key=3, label="Property variable Newtonsoft.Json.Serialization.IContractResolver Instance", style=bold];
d1 -> d2  [color=green, key=0, style=solid];
d1 -> d9  [color=green, key=2, style=dotted];
d1 -> d10  [color=green, key=2, style=dotted];
d1 -> d11  [color=green, key=2, style=dotted];
d1 -> d12  [color=green, key=2, style=dotted];
d1 -> d3  [color=green, key=1, label=compositeExpression, style=dashed];
d1 -> d5  [color=green, key=1, label=compositeExpression, style=dashed];
d1 -> d7  [color=green, key=1, label=compositeExpression, style=dashed];
d0 -> d1  [color=green, key=0, style=solid];
d2 -> d3  [key=0, style=solid];
d2 -> d13  [key=2, style=dotted];
d3 -> d4  [key=0, style=solid];
d3 -> d14  [key=2, style=dotted];
d3 -> d15  [key=2, style=dotted];
d5 -> d6  [color=green, key=0, style=solid];
d5 -> d14  [key=2, style=dotted];
d5 -> d16  [key=2, style=dotted];
d7 -> d8  [key=0, style=solid];
d7 -> d14  [key=2, style=dotted];
d7 -> d16  [key=2, style=dotted];
d6 -> d7  [color=green, key=0, style=solid];
d6 -> d13  [color=green, key=2, style=dotted];
d27 -> d28  [color=green, key=0, style=solid];
d27 -> d11  [color=green, key=2, style=dotted];
d27 -> d38  [color=green, key=2, style=dotted];
d27 -> d10  [color=green, key=2, style=dotted];
d27 -> d39  [color=green, key=2, style=dotted];
d27 -> d29  [color=green, key=1, label=e1, style=dashed];
d27 -> d30  [color=green, key=1, label=e1, style=dashed];
d27 -> d31  [color=green, key=1, label=e1, style=dashed];
d26 -> d27  [color=green, key=0, style=solid];
d28 -> d29  [key=0, style=solid];
d28 -> d40  [key=2, style=dotted];
d28 -> d41  [key=2, style=dotted];
d28 -> d15  [key=2, style=dotted];
d29 -> d30  [key=0, style=solid];
d29 -> d40  [key=2, style=dotted];
d29 -> d41  [key=2, style=dotted];
d29 -> d15  [key=2, style=dotted];
d30 -> d31  [key=0, style=solid];
d30 -> d40  [key=2, style=dotted];
d30 -> d41  [key=2, style=dotted];
d30 -> d16  [key=2, style=dotted];
d31 -> d32  [color=green, key=0, style=solid];
d31 -> d40  [key=2, style=dotted];
d31 -> d41  [key=2, style=dotted];
d31 -> d16  [key=2, style=dotted];
d32 -> d33  [color=green, key=0, style=solid];
d32 -> d11  [color=green, key=2, style=dotted];
d32 -> d38  [color=green, key=2, style=dotted];
d32 -> d10  [color=green, key=2, style=dotted];
d32 -> d39  [color=green, key=2, style=dotted];
d32 -> d34  [color=green, key=1, label=e2, style=dashed];
d32 -> d35  [color=green, key=1, label=e2, style=dashed];
d32 -> d36  [color=green, key=1, label=e2, style=dashed];
d33 -> d34  [key=0, style=solid];
d33 -> d40  [key=2, style=dotted];
d33 -> d41  [key=2, style=dotted];
d33 -> d15  [key=2, style=dotted];
d34 -> d35  [key=0, style=solid];
d34 -> d40  [key=2, style=dotted];
d34 -> d41  [key=2, style=dotted];
d34 -> d15  [key=2, style=dotted];
d35 -> d36  [key=0, style=solid];
d35 -> d40  [key=2, style=dotted];
d35 -> d41  [key=2, style=dotted];
d35 -> d15  [key=2, style=dotted];
d36 -> d37  [key=0, style=solid];
d36 -> d40  [key=2, style=dotted];
d36 -> d41  [key=2, style=dotted];
d36 -> d16  [key=2, style=dotted];
d8 -> d0  [color=blue, key=0, style=bold];
d18 -> d9  [key=2, style=dotted];
d18 -> d10  [key=2, style=dotted];
d18 -> d11  [key=2, style=dotted];
d18 -> d12  [key=2, style=dotted];
d18 -> d19  [key=0, style=solid];
d18 -> d20  [color=darkseagreen4, key=1, label=compositeExpression, style=dashed];
d18 -> d22  [color=darkseagreen4, key=1, label=compositeExpression, style=dashed];
d18 -> d24  [color=darkseagreen4, key=1, label=compositeExpression, style=dashed];
d4 -> d5  [key=0, style=solid];
d4 -> d13  [key=2, style=dotted];
d19 -> d13  [key=2, style=dotted];
d19 -> d20  [key=0, style=solid];
d21 -> d13  [key=2, style=dotted];
d21 -> d22  [key=0, style=solid];
d23 -> d13  [key=2, style=dotted];
d23 -> d24  [key=0, style=solid];
d37 -> d26  [color=blue, key=0, style=bold];
d17 -> d18  [key=0, style=solid];
d20 -> d14  [key=2, style=dotted];
d20 -> d15  [key=2, style=dotted];
d20 -> d21  [key=0, style=solid];
d22 -> d14  [key=2, style=dotted];
d22 -> d15  [key=2, style=dotted];
d22 -> d23  [key=0, style=solid];
d24 -> d14  [key=2, style=dotted];
d24 -> d16  [key=2, style=dotted];
d24 -> d25  [key=0, style=solid];
d25 -> d17  [color=blue, key=0, style=bold];
m1_0 -> m1_1  [color=green, key=0, style=solid];
m1_1 -> m1_2  [color=green, key=0, style=solid];
m1_1 -> m1_5  [color=green, key=2, style=dotted];
m1_1 -> m1_6  [color=green, key=2, style=dotted];
m1_2 -> m1_3  [color=green, key=0, style=solid];
m1_2 -> m1_6  [color=green, key=2, style=dotted];
m1_3 -> m1_4  [key=0, style=solid];
m1_3 -> m1_7  [key=2, style=dotted];
m1_3 -> m1_8  [key=2, style=dotted];
m1_4 -> m1_0  [color=blue, key=0, style=bold];
m2_0 -> m2_1  [key=0, style=solid];
m2_0 -> m2_5  [color=crimson, key=0, style=bold];
m2_0 -> m2_3  [color=darkseagreen4, key=1, label=bool, style=dashed];
m2_1 -> m2_2  [key=0, style=solid];
m2_1 -> m2_6  [key=0, style=solid];
m2_1 -> m2_3  [color=darkseagreen4, key=1, label=t, style=dashed];
m2_5 -> m2_2  [key=0, style=solid];
m2_3 -> m2_4  [key=0, style=solid];
m2_3 -> m2_7  [key=2, style=dotted];
m2_3 -> m2_5  [color=darkseagreen4, key=1, label=v, style=dashed];
m2_2 -> m2_3  [key=0, style=solid];
m2_2 -> m2_1  [key=0, style=solid];
m2_4 -> m2_5  [key=0, style=solid];
m2_4 -> m2_2  [key=0, style=solid];
m2_6 -> m2_0  [color=blue, key=0, style=bold];
m2_8 -> m2_2  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JsonPath.ArrayMultipleIndexFilter", style=dashed];
}
