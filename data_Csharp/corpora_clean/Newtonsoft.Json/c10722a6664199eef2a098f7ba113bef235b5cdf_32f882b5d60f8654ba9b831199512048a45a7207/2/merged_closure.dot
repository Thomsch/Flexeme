digraph  {
n14 [label="Newtonsoft.Json.JsonConverter", span=""];
n0 [cluster="Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, object)", label="Entry Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, object)", span="33-33"];
n1 [cluster="Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, object)", label="JsonSerializer serializer = new JsonSerializer()", span="35-35"];
n2 [cluster="Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, object)", label="serializer.Serialize(writer, value)", span="37-37"];
n4 [cluster="Newtonsoft.Json.JsonSerializer.JsonSerializer()", label="Entry Newtonsoft.Json.JsonSerializer.JsonSerializer()", span="109-109"];
n3 [cluster="Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, object)", label="Exit Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, object)", span="33-33"];
n5 [cluster="Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter, object)", label="Entry Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter, object)", span="476-476"];
n6 [cluster="Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type)", label="Entry Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type)", span="40-40"];
n7 [cluster="Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type)", label="throw new NotImplementedException(string.Format(''{0} has not overriden FromJson method.'', GetType().Name));", span="42-42"];
n8 [cluster="Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type)", label="Exit Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type)", span="40-40"];
n9 [cluster="System.NotImplementedException.NotImplementedException(string)", label="Entry System.NotImplementedException.NotImplementedException(string)", span="0-0"];
n10 [cluster="object.GetType()", label="Entry object.GetType()", span="0-0"];
n11 [cluster="string.Format(string, object)", label="Entry string.Format(string, object)", span="0-0"];
n12 [cluster="Newtonsoft.Json.JsonConverter.CanConvert(System.Type)", label="Entry Newtonsoft.Json.JsonConverter.CanConvert(System.Type)", span="45-45"];
n13 [cluster="Newtonsoft.Json.JsonConverter.CanConvert(System.Type)", label="Exit Newtonsoft.Json.JsonConverter.CanConvert(System.Type)", span="45-45"];
m1_8 [cluster="Unk.AreEqual", file="Issue1682.cs", label="Entry Unk.AreEqual", span=""];
m1_7 [cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object)", file="Issue1682.cs", label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object)", span="524-524"];
m1_10 [cluster="Newtonsoft.Json.Tests.Issues.Issue1682.Test_Deserialize()", file="Issue1682.cs", label="Entry Newtonsoft.Json.Tests.Issues.Issue1682.Test_Deserialize()", span="59-59"];
m1_11 [cluster="Newtonsoft.Json.Tests.Issues.Issue1682.Test_Deserialize()", color=green, community=1, file="Issue1682.cs", label="ExceptionAssert.Throws<JsonSerializationException>(\r\n                () => { JsonConvert.DeserializeObject<BaseSerializable>(''{}''); },\r\n                ''Could not create an instance of type Newtonsoft.Json.Tests.Issues.Issue1682+BaseSerializable. Type is an interface or abstract class and cannot be instantiated. Path '', line 1, position 2.'')", prediction=0, span="61-63"];
m1_12 [cluster="Newtonsoft.Json.Tests.Issues.Issue1682.Test_Deserialize()", file="Issue1682.cs", label="Exit Newtonsoft.Json.Tests.Issues.Issue1682.Test_Deserialize()", span="59-59"];
m1_14 [cluster="lambda expression", file="Issue1682.cs", label="Entry lambda expression", span="62-62"];
m1_15 [cluster="lambda expression", color=green, community=0, file="Issue1682.cs", label="JsonConvert.DeserializeObject<BaseSerializable>(''{}'')", prediction=1, span="62-62"];
m1_16 [cluster="lambda expression", file="Issue1682.cs", label="Exit lambda expression", span="62-62"];
m1_17 [cluster="Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string)", file="Issue1682.cs", label="Entry Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string)", span="703-703"];
m1_13 [cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", file="Issue1682.cs", label="Entry Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", span="370-370"];
m1_9 [cluster="Newtonsoft.Json.Tests.Issues.Issue1682.ClassWithSerializableProperty.ClassWithSerializableProperty()", file="Issue1682.cs", label="Entry Newtonsoft.Json.Tests.Issues.Issue1682.ClassWithSerializableProperty.ClassWithSerializableProperty()", span="66-66"];
m1_0 [cluster="Newtonsoft.Json.Tests.Issues.Issue1682.Test_Serialize()", file="Issue1682.cs", label="Entry Newtonsoft.Json.Tests.Issues.Issue1682.Test_Serialize()", span="49-49"];
m1_1 [cluster="Newtonsoft.Json.Tests.Issues.Issue1682.Test_Serialize()", color=green, community=0, file="Issue1682.cs", label="string s1 = JsonConvert.SerializeObject(new ConcreteSerializable())", prediction=2, span="51-51"];
m1_2 [cluster="Newtonsoft.Json.Tests.Issues.Issue1682.Test_Serialize()", color=green, community=0, file="Issue1682.cs", label="Assert.AreEqual(''{}'', s1)", prediction=3, span="52-52"];
m1_3 [cluster="Newtonsoft.Json.Tests.Issues.Issue1682.Test_Serialize()", color=green, community=0, file="Issue1682.cs", label="string s2 = JsonConvert.SerializeObject(new ClassWithSerializableProperty())", prediction=4, span="54-54"];
m1_4 [cluster="Newtonsoft.Json.Tests.Issues.Issue1682.Test_Serialize()", color=green, community=0, file="Issue1682.cs", label="Assert.AreEqual(@''{''''Serializable'''':null}'', s2)", prediction=5, span="55-55"];
m1_5 [cluster="Newtonsoft.Json.Tests.Issues.Issue1682.Test_Serialize()", file="Issue1682.cs", label="Exit Newtonsoft.Json.Tests.Issues.Issue1682.Test_Serialize()", span="49-49"];
m1_6 [cluster="Newtonsoft.Json.Tests.Issues.Issue1682.ConcreteSerializable.ConcreteSerializable()", file="Issue1682.cs", label="Entry Newtonsoft.Json.Tests.Issues.Issue1682.ConcreteSerializable.ConcreteSerializable()", span="74-74"];
m1_18 [cluster="Newtonsoft.Json.Tests.Issues.Issue1682.ConcreteSerializable.ConcreteSerializable()", file="Issue1682.cs", label="Exit Newtonsoft.Json.Tests.Issues.Issue1682.ConcreteSerializable.ConcreteSerializable()", span="74-74"];
m2_527 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesWithBadCharacter()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesWithBadCharacter()", span="939-939"];
m2_528 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesWithBadCharacter()", file="JsonSchema.cs", label="JsonReader reader = new JsonTextReader(new StringReader(@''true''))", span="941-941"];
m2_529 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesWithBadCharacter()", file="JsonSchema.cs", label="ExceptionAssert.Throws<JsonReaderException>(\r\n                ''Error reading bytes. Unexpected token: Boolean. Path '', line 1, position 4.'',\r\n                () => { reader.ReadAsBytes(); })", span="943-945"];
m2_530 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesWithBadCharacter()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesWithBadCharacter()", span="939-939"];
m2_762 [cluster="System.Text.StringBuilder.StringBuilder()", file="JsonSchema.cs", label="Entry System.Text.StringBuilder.StringBuilder()", span="0-0"];
m2_777 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", span="1314-1314"];
m2_778 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="JsonSchema.cs", label="string input = @''[\r\n  NaN,\r\n  Infinity,\r\n  -Infinity\r\n]''", span="1316-1320"];
m2_779 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="JsonSchema.cs", label="StringReader sr = new StringReader(input)", span="1322-1322"];
m2_780 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="JsonSchema.cs", label="JsonReader jsonReader = new JsonTextReader(sr)", span="1324-1324"];
m2_781 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="JsonSchema.cs", label="jsonReader.Read()", span="1326-1326"];
m2_782 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="JsonSchema.cs", label="Assert.AreEqual(jsonReader.TokenType, JsonToken.StartArray)", span="1327-1327"];
m2_783 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="JsonSchema.cs", label="jsonReader.Read()", span="1329-1329"];
m2_784 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="JsonSchema.cs", label="Assert.AreEqual(jsonReader.TokenType, JsonToken.Float)", span="1330-1330"];
m2_785 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="JsonSchema.cs", label="Assert.AreEqual(jsonReader.Value, double.NaN)", span="1331-1331"];
m2_786 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="JsonSchema.cs", label="jsonReader.Read()", span="1333-1333"];
m2_787 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="JsonSchema.cs", label="Assert.AreEqual(jsonReader.TokenType, JsonToken.Float)", span="1334-1334"];
m2_788 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="JsonSchema.cs", label="Assert.AreEqual(jsonReader.Value, double.PositiveInfinity)", span="1335-1335"];
m2_789 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="JsonSchema.cs", label="jsonReader.Read()", span="1337-1337"];
m2_790 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="JsonSchema.cs", label="Assert.AreEqual(jsonReader.TokenType, JsonToken.Float)", span="1338-1338"];
m2_791 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="JsonSchema.cs", label="Assert.AreEqual(jsonReader.Value, double.NegativeInfinity)", span="1339-1339"];
m2_792 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="JsonSchema.cs", label="jsonReader.Read()", span="1341-1341"];
m2_793 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="JsonSchema.cs", label="Assert.AreEqual(jsonReader.TokenType, JsonToken.EndArray)", span="1342-1342"];
m2_794 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.FloatingPointNonFiniteNumbers()", span="1314-1314"];
m2_1146 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetIsoDate()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetIsoDate()", span="1873-1873"];
m2_1147 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetIsoDate()", file="JsonSchema.cs", label="string json = @''{''''Offset'''':''''2011-08-01T21:25Z''''}''", span="1875-1875"];
m2_1148 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetIsoDate()", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="1877-1877"];
m2_1149 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetIsoDate()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="1879-1879"];
m2_1150 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetIsoDate()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="1880-1880"];
m2_1151 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetIsoDate()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="1882-1882"];
m2_1152 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetIsoDate()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="1883-1883"];
m2_1153 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetIsoDate()", file="JsonSchema.cs", label="reader.ReadAsDateTimeOffset()", span="1885-1885"];
m2_1154 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetIsoDate()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Date, reader.TokenType)", span="1886-1886"];
m2_1155 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetIsoDate()", file="JsonSchema.cs", label="Assert.AreEqual(typeof(DateTimeOffset), reader.ValueType)", span="1887-1887"];
m2_1156 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetIsoDate()", file="JsonSchema.cs", label="Assert.AreEqual(new DateTimeOffset(new DateTime(2011, 8, 1, 21, 25, 0, DateTimeKind.Utc), TimeSpan.Zero), reader.Value)", span="1888-1888"];
m2_1157 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetIsoDate()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="1890-1890"];
m2_1158 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetIsoDate()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.EndObject, reader.TokenType)", span="1891-1891"];
m2_1159 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetIsoDate()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetIsoDate()", span="1873-1873"];
m2_15 [cluster="Newtonsoft.Json.JsonTextReader.Read()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.JsonTextReader.Read()", span="299-299"];
m2_1144 [cluster="System.TimeSpan.FromMinutes(double)", file="JsonSchema.cs", label="Entry System.TimeSpan.FromMinutes(double)", span="0-0"];
m2_551 [cluster="Unk.IsNull", file="JsonSchema.cs", label="Entry Unk.IsNull", span=""];
m2_560 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", span="983-983"];
m2_561 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSchema.cs", label="string newLinesText = StringUtils.CarriageReturn + StringUtils.CarriageReturnLineFeed + StringUtils.LineFeed + StringUtils.CarriageReturnLineFeed + '' '' + StringUtils.CarriageReturn + StringUtils.CarriageReturnLineFeed", span="985-985"];
m2_562 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSchema.cs", label="string json =\r\n                newLinesText\r\n                + ''{'' + newLinesText\r\n                + ''''' + newLinesText\r\n                + ''name1'' + newLinesText\r\n                + ''''' + newLinesText\r\n                + '':'' + newLinesText\r\n                + ''['' + newLinesText\r\n                + ''new'' + newLinesText\r\n                + ''Date'' + newLinesText\r\n                + ''('' + newLinesText\r\n                + ''1'' + newLinesText\r\n                + '','' + newLinesText\r\n                + ''null'' + newLinesText\r\n                + ''/*'' + newLinesText\r\n                + ''blah comment'' + newLinesText\r\n                + ''*/'' + newLinesText\r\n                + '')'' + newLinesText\r\n                + '','' + newLinesText\r\n                + ''1.1111'' + newLinesText\r\n                + '']'' + newLinesText\r\n                + '','' + newLinesText\r\n                + ''name2'' + newLinesText\r\n                + '':'' + newLinesText\r\n                + ''{'' + newLinesText\r\n                + ''}'' + newLinesText\r\n                + ''}'' + newLinesText", span="987-1013"];
m2_564 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSchema.cs", label="StringReader sr = new StringReader(newLinesText)", span="1016-1016"];
m2_572 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSchema.cs", label="Assert.AreEqual(newLinesText + ''name1'' + newLinesText, reader.Value)", span="1028-1028"];
m2_587 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSchema.cs", label="Assert.AreEqual(newLinesText + ''blah comment'' + newLinesText, reader.Value)", span="1048-1048"];
m2_563 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSchema.cs", label="int count = 0", span="1015-1015"];
m2_567 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(new StreamReader(new SlowStream(json, new UTF8Encoding(false), 1)))", span="1022-1022"];
m2_566 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSchema.cs", label="count++", span="1019-1019"];
m2_565 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSchema.cs", label="sr.ReadLine() != null", span="1017-1017"];
m2_568 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="1023-1023"];
m2_569 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSchema.cs", label="Assert.AreEqual(7, reader.LineNumber)", span="1024-1024"];
m2_570 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="1026-1026"];
m2_571 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSchema.cs", label="Assert.AreEqual(31, reader.LineNumber)", span="1027-1027"];
m2_573 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="1030-1030"];
m2_574 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSchema.cs", label="Assert.AreEqual(37, reader.LineNumber)", span="1031-1031"];
m2_575 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="1033-1033"];
m2_576 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSchema.cs", label="Assert.AreEqual(55, reader.LineNumber)", span="1034-1034"];
m2_577 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.StartConstructor, reader.TokenType)", span="1035-1035"];
m2_578 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSchema.cs", label="Assert.AreEqual(''Date'', reader.Value)", span="1036-1036"];
m2_579 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="1038-1038"];
m2_580 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSchema.cs", label="Assert.AreEqual(61, reader.LineNumber)", span="1039-1039"];
m2_581 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSchema.cs", label="Assert.AreEqual(1L, reader.Value)", span="1040-1040"];
m2_582 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="1042-1042"];
m2_583 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSchema.cs", label="Assert.AreEqual(73, reader.LineNumber)", span="1043-1043"];
m2_584 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSchema.cs", label="Assert.AreEqual(null, reader.Value)", span="1044-1044"];
m2_585 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="1046-1046"];
m2_586 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSchema.cs", label="Assert.AreEqual(91, reader.LineNumber)", span="1047-1047"];
m2_588 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="1050-1050"];
m2_589 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSchema.cs", label="Assert.AreEqual(97, reader.LineNumber)", span="1051-1051"];
m2_590 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="1053-1053"];
m2_591 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSchema.cs", label="Assert.AreEqual(109, reader.LineNumber)", span="1054-1054"];
m2_592 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="1056-1056"];
m2_593 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSchema.cs", label="Assert.AreEqual(115, reader.LineNumber)", span="1057-1057"];
m2_594 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="1059-1059"];
m2_595 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSchema.cs", label="Assert.AreEqual(133, reader.LineNumber)", span="1060-1060"];
m2_596 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSchema.cs", label="Assert.AreEqual(''name2'', reader.Value)", span="1061-1061"];
m2_597 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="1063-1063"];
m2_598 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSchema.cs", label="Assert.AreEqual(139, reader.LineNumber)", span="1064-1064"];
m2_599 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="1066-1066"];
m2_600 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSchema.cs", label="Assert.AreEqual(145, reader.LineNumber)", span="1067-1067"];
m2_601 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="1069-1069"];
m2_602 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSchema.cs", label="Assert.AreEqual(151, reader.LineNumber)", span="1070-1070"];
m2_603 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewLines()", span="983-983"];
m2_541 [cluster="System.Convert.ToBase64String(byte[])", file="JsonSchema.cs", label="Entry System.Convert.ToBase64String(byte[])", span="0-0"];
m2_1433 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseConstructorWithBadCharacter()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ParseConstructorWithBadCharacter()", span="2339-2339"];
m2_1434 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseConstructorWithBadCharacter()", file="JsonSchema.cs", label="string json = ''new Date,()''", span="2341-2341"];
m2_1435 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseConstructorWithBadCharacter()", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="2342-2342"];
m2_1436 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseConstructorWithBadCharacter()", file="JsonSchema.cs", label="ExceptionAssert.Throws<JsonReaderException>(\r\n                ''Unexpected character while parsing constructor: ,. Path '', line 1, position 8.'',\r\n                () => { Assert.IsTrue(reader.Read()); })", span="2344-2346"];
m2_1437 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseConstructorWithBadCharacter()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ParseConstructorWithBadCharacter()", span="2339-2339"];
m2_1194 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalInt()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalInt()", span="1946-1946"];
m2_1195 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalInt()", file="JsonSchema.cs", label="string json = @''{''''Name'''':1}''", span="1948-1948"];
m2_1196 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalInt()", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="1950-1950"];
m2_1197 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalInt()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="1952-1952"];
m2_1198 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalInt()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="1953-1953"];
m2_1199 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalInt()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="1955-1955"];
m2_1200 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalInt()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="1956-1956"];
m2_1201 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalInt()", file="JsonSchema.cs", label="reader.ReadAsDecimal()", span="1958-1958"];
m2_1202 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalInt()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Float, reader.TokenType)", span="1959-1959"];
m2_1203 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalInt()", file="JsonSchema.cs", label="Assert.AreEqual(typeof(decimal), reader.ValueType)", span="1960-1960"];
m2_1204 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalInt()", file="JsonSchema.cs", label="Assert.AreEqual(1m, reader.Value)", span="1961-1961"];
m2_1205 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalInt()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalInt()", span="1946-1946"];
m2_132 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.YahooFinance()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.YahooFinance()", span="296-296"];
m2_133 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.YahooFinance()", file="JsonSchema.cs", label="string input = @''{\r\n''''matches'''' : [\r\n{''''t'''':''''C'''', ''''n'''':''''Citigroup Inc.'''', ''''e'''':''''NYSE'''', ''''id'''':''''662713''''}\r\n,{''''t'''':''''CHL'''', ''''n'''':''''China Mobile Ltd. (ADR)'''', ''''e'''':''''NYSE'''', ''''id'''':''''660998''''}\r\n,{''''t'''':''''PTR'''', ''''n'''':''''PetroChina Company Limited (ADR)'''', ''''e'''':''''NYSE'''', ''''id'''':''''664536''''}\r\n,{''''t'''':''''RIO'''', ''''n'''':''''Companhia Vale do Rio Doce (ADR)'''', ''''e'''':''''NYSE'''', ''''id'''':''''671472''''}\r\n,{''''t'''':''''RIOPR'''', ''''n'''':''''Companhia Vale do Rio Doce (ADR)'''', ''''e'''':''''NYSE'''', ''''id'''':''''3512643''''}\r\n,{''''t'''':''''CSCO'''', ''''n'''':''''Cisco Systems, Inc.'''', ''''e'''':''''NASDAQ'''', ''''id'''':''''99624''''}\r\n,{''''t'''':''''CVX'''', ''''n'''':''''Chevron Corporation'''', ''''e'''':''''NYSE'''', ''''id'''':''''667226''''}\r\n,{''''t'''':''''TM'''', ''''n'''':''''Toyota Motor Corporation (ADR)'''', ''''e'''':''''NYSE'''', ''''id'''':''''655880''''}\r\n,{''''t'''':''''JPM'''', ''''n'''':''''JPMorgan Chase \\x26 Co.'''', ''''e'''':''''NYSE'''', ''''id'''':''''665639''''}\r\n,{''''t'''':''''COP'''', ''''n'''':''''ConocoPhillips'''', ''''e'''':''''NYSE'''', ''''id'''':''''1691168''''}\r\n,{''''t'''':''''LFC'''', ''''n'''':''''China Life Insurance Company Ltd. (ADR)'''', ''''e'''':''''NYSE'''', ''''id'''':''''688679''''}\r\n,{''''t'''':''''NOK'''', ''''n'''':''''Nokia Corporation (ADR)'''', ''''e'''':''''NYSE'''', ''''id'''':''''657729''''}\r\n,{''''t'''':''''KO'''', ''''n'''':''''The Coca-Cola Company'''', ''''e'''':''''NYSE'''', ''''id'''':''''6550''''}\r\n,{''''t'''':''''VZ'''', ''''n'''':''''Verizon Communications Inc.'''', ''''e'''':''''NYSE'''', ''''id'''':''''664887''''}\r\n,{''''t'''':''''AMX'''', ''''n'''':''''America Movil S.A.B de C.V. (ADR)'''', ''''e'''':''''NYSE'''', ''''id'''':''''665834''''}],\r\n''''all'''' : false\r\n}\r\n''", span="298-317"];
m2_134 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.YahooFinance()", file="JsonSchema.cs", label="JsonReader jsonReader = new JsonTextReader(new StringReader(input))", span="319-319"];
m2_135 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.YahooFinance()", file="JsonSchema.cs", label="jsonReader.Read()", span="321-321"];
m2_136 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.YahooFinance()", file="JsonSchema.cs", label="Console.WriteLine(jsonReader.Value)", span="323-323"];
m2_137 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.YahooFinance()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.YahooFinance()", span="296-296"];
m2_158 [cluster="System.Text.UTF8Encoding.UTF8Encoding(bool)", file="JsonSchema.cs", label="Entry System.Text.UTF8Encoding.UTF8Encoding(bool)", span="0-0"];
m2_1177 [cluster="System.Globalization.CultureInfo.CultureInfo(string)", file="JsonSchema.cs", label="Entry System.Globalization.CultureInfo.CultureInfo(string)", span="0-0"];
m2_1145 [cluster="System.TimeSpan.Add(System.TimeSpan)", file="JsonSchema.cs", label="Entry System.TimeSpan.Add(System.TimeSpan)", span="0-0"];
m2_16 [cluster="Unk.IsTrue", file="JsonSchema.cs", label="Entry Unk.IsTrue", span=""];
m2_1590 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepth()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepth()", span="2581-2581"];
m2_1591 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepth()", file="JsonSchema.cs", label="string json = ''[[]]''", span="2583-2583"];
m2_1592 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepth()", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(json))\r\n            {\r\n                MaxDepth = 1\r\n            }", span="2585-2588"];
m2_1593 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepth()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2590-2590"];
m2_1594 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepth()", file="JsonSchema.cs", label="ExceptionAssert.Throws<JsonReaderException>(\r\n                ''The reader's MaxDepth of 1 has been exceeded. Path '[0]', line 1, position 2.'',\r\n                () => { Assert.IsTrue(reader.Read()); })", span="2592-2594"];
m2_1595 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepth()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepth()", span="2581-2581"];
m2_770 [cluster="Newtonsoft.Json.JsonWriter.WriteValue(decimal)", file="JsonSchema.cs", label="Entry Newtonsoft.Json.JsonWriter.WriteValue(decimal)", span="931-931"];
m2_823 [cluster="System.Convert.ToInt32(char)", file="JsonSchema.cs", label="Entry System.Convert.ToInt32(char)", span="0-0"];
m2_1038 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesArrayWithBadContent()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesArrayWithBadContent()", span="1708-1708"];
m2_1039 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesArrayWithBadContent()", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(@''[1.0]''))", span="1710-1710"];
m2_1040 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesArrayWithBadContent()", file="JsonSchema.cs", label="ExceptionAssert.Throws<JsonReaderException>(\r\n                ''Unexpected token when reading bytes: Float. Path '[0]', line 1, position 4.'',\r\n                () => { reader.ReadAsBytes(); })", span="1712-1714"];
m2_1041 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesArrayWithBadContent()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesArrayWithBadContent()", span="1708-1708"];
m2_910 [cluster="System.Text.Encoding.GetString(byte[], int, int)", file="JsonSchema.cs", label="Entry System.Text.Encoding.GetString(byte[], int, int)", span="0-0"];
m2_1731 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", span="2781-2781"];
m2_1732 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="JsonSchema.cs", label="ToggleReaderError toggleReaderError = new ToggleReaderError(new StringReader(''{'first':1,'second':2,'third':3}''))", span="2783-2783"];
m2_1733 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="JsonSchema.cs", label="JsonTextReader jsonTextReader = new JsonTextReader(toggleReaderError)", span="2784-2784"];
m2_1735 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="JsonSchema.cs", label="toggleReaderError.Error = true", span="2788-2788"];
m2_1738 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="JsonSchema.cs", label="toggleReaderError.Error = false", span="2797-2797"];
m2_1741 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="JsonSchema.cs", label="toggleReaderError.Error = true", span="2802-2802"];
m2_1743 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="JsonSchema.cs", label="toggleReaderError.Error = false", span="2808-2808"];
m2_1746 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="JsonSchema.cs", label="toggleReaderError.Error = true", span="2813-2813"];
m2_1750 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="JsonSchema.cs", label="toggleReaderError.Error = false", span="2825-2825"];
m2_1734 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="JsonSchema.cs", label="Assert.IsTrue(jsonTextReader.Read())", span="2786-2786"];
m2_1736 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="JsonSchema.cs", label="ExceptionAssert.Throws<Exception>(\r\n                ''Read error'',\r\n                () => jsonTextReader.Read())", span="2790-2792"];
m2_1737 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="JsonSchema.cs", label="ExceptionAssert.Throws<Exception>(\r\n                ''Read error'',\r\n                () => jsonTextReader.Read())", span="2793-2795"];
m2_1739 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="JsonSchema.cs", label="Assert.IsTrue(jsonTextReader.Read())", span="2799-2799"];
m2_1740 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="JsonSchema.cs", label="Assert.AreEqual(''first'', jsonTextReader.Value)", span="2800-2800"];
m2_1742 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="JsonSchema.cs", label="ExceptionAssert.Throws<Exception>(\r\n                ''Read error'',\r\n                () => jsonTextReader.Read())", span="2804-2806"];
m2_1744 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="JsonSchema.cs", label="Assert.IsTrue(jsonTextReader.Read())", span="2810-2810"];
m2_1745 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="JsonSchema.cs", label="Assert.AreEqual(1L, jsonTextReader.Value)", span="2811-2811"];
m2_1747 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="JsonSchema.cs", label="ExceptionAssert.Throws<Exception>(\r\n                ''Read error'',\r\n                () => jsonTextReader.Read())", span="2815-2817"];
m2_1748 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="JsonSchema.cs", label="ExceptionAssert.Throws<Exception>(\r\n                ''Read error'',\r\n                () => jsonTextReader.Read())", span="2818-2820"];
m2_1749 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="JsonSchema.cs", label="ExceptionAssert.Throws<Exception>(\r\n                ''Read error'',\r\n                () => jsonTextReader.Read())", span="2821-2823"];
m2_1751 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ResetJsonTextReaderErrorCount()", span="2781-2781"];
m2_91 [cluster="object.ToString()", file="JsonSchema.cs", label="Entry object.ToString()", span="0-0"];
m2_708 [cluster="int.ToString()", file="JsonSchema.cs", label="Entry int.ToString()", span="0-0"];
m2_1587 [cluster="double.ToString(System.IFormatProvider)", file="JsonSchema.cs", label="Entry double.ToString(System.IFormatProvider)", span="0-0"];
m2_520 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndOfControlCharacter()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndOfControlCharacter()", span="929-929"];
m2_521 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndOfControlCharacter()", file="JsonSchema.cs", label="JsonReader reader = new JsonTextReader(new StringReader(@'''h\''))", span="931-931"];
m2_522 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndOfControlCharacter()", file="JsonSchema.cs", label="ExceptionAssert.Throws<JsonReaderException>(\r\n                ''Unterminated string. Expected delimiter: '. Path '', line 1, position 3.'',\r\n                () => { reader.Read(); })", span="933-935"];
m2_523 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndOfControlCharacter()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndOfControlCharacter()", span="929-929"];
m2_950 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", span="1574-1574"];
m2_951 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="JsonSchema.cs", label="StringReader s = new StringReader(@''[0372, 0xFA, 0XFA]'')", span="1576-1576"];
m2_952 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="JsonSchema.cs", label="JsonTextReader jsonReader = new JsonTextReader(s)", span="1577-1577"];
m2_953 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="JsonSchema.cs", label="Assert.IsTrue(jsonReader.Read())", span="1579-1579"];
m2_954 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.StartArray, jsonReader.TokenType)", span="1580-1580"];
m2_955 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="JsonSchema.cs", label="jsonReader.ReadAsInt32()", span="1582-1582"];
m2_956 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Integer, jsonReader.TokenType)", span="1583-1583"];
m2_957 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="JsonSchema.cs", label="Assert.AreEqual(typeof(int), jsonReader.ValueType)", span="1584-1584"];
m2_958 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="JsonSchema.cs", label="Assert.AreEqual(250, jsonReader.Value)", span="1585-1585"];
m2_959 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="JsonSchema.cs", label="jsonReader.ReadAsInt32()", span="1587-1587"];
m2_960 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Integer, jsonReader.TokenType)", span="1588-1588"];
m2_961 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="JsonSchema.cs", label="Assert.AreEqual(typeof(int), jsonReader.ValueType)", span="1589-1589"];
m2_962 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="JsonSchema.cs", label="Assert.AreEqual(250, jsonReader.Value)", span="1590-1590"];
m2_963 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="JsonSchema.cs", label="jsonReader.ReadAsInt32()", span="1592-1592"];
m2_964 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Integer, jsonReader.TokenType)", span="1593-1593"];
m2_965 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="JsonSchema.cs", label="Assert.AreEqual(typeof(int), jsonReader.ValueType)", span="1594-1594"];
m2_966 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="JsonSchema.cs", label="Assert.AreEqual(250, jsonReader.Value)", span="1595-1595"];
m2_967 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="JsonSchema.cs", label="Assert.IsTrue(jsonReader.Read())", span="1597-1597"];
m2_968 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.EndArray, jsonReader.TokenType)", span="1598-1598"];
m2_969 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="JsonSchema.cs", label="Assert.IsFalse(jsonReader.Read())", span="1600-1600"];
m2_970 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt32()", span="1574-1574"];
m2_1442 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", span="2350-2350"];
m2_1443 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonSchema.cs", label="string json = ''\x00a0{\x00a0'h\x00a0i\x00a0'\x00a0:\x00a0[\x00a0true\x00a0,\x00a0new\x00a0Date\x00a0(\x00a0)\x00a0]\x00a0/*\x00a0comment\x00a0*/\x00a0}\x00a0''", span="2352-2352"];
m2_1444 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(new StreamReader(new SlowStream(json, new UTF8Encoding(false), 1)))", span="2353-2353"];
m2_1445 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2355-2355"];
m2_1446 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="2356-2356"];
m2_1447 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2358-2358"];
m2_1448 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="2359-2359"];
m2_1449 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2361-2361"];
m2_1450 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.StartArray, reader.TokenType)", span="2362-2362"];
m2_1451 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2364-2364"];
m2_1452 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Boolean, reader.TokenType)", span="2365-2365"];
m2_1453 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2367-2367"];
m2_1454 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.StartConstructor, reader.TokenType)", span="2368-2368"];
m2_1455 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2370-2370"];
m2_1456 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.EndConstructor, reader.TokenType)", span="2371-2371"];
m2_1457 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2373-2373"];
m2_1458 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.EndArray, reader.TokenType)", span="2374-2374"];
m2_1459 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2376-2376"];
m2_1460 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Comment, reader.TokenType)", span="2377-2377"];
m2_1461 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2379-2379"];
m2_1462 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.EndObject, reader.TokenType)", span="2380-2380"];
m2_1463 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonSchema.cs", label="Assert.IsFalse(reader.Read())", span="2382-2382"];
m2_1464 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ParseContentDelimitedByNonStandardWhitespace()", span="2350-2350"];
m2_1752 [cluster="Newtonsoft.Json.Tests.ToggleReaderError.ToggleReaderError(System.IO.TextReader)", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.ToggleReaderError.ToggleReaderError(System.IO.TextReader)", span="2865-2865"];
m2_1789 [cluster="Newtonsoft.Json.Tests.ToggleReaderError.ToggleReaderError(System.IO.TextReader)", file="JsonSchema.cs", label="_inner = inner", span="2867-2867"];
m2_1790 [cluster="Newtonsoft.Json.Tests.ToggleReaderError.ToggleReaderError(System.IO.TextReader)", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.ToggleReaderError.ToggleReaderError(System.IO.TextReader)", span="2865-2865"];
m2_1292 [cluster="System.DateTime.DateTime(long)", file="JsonSchema.cs", label="Entry System.DateTime.DateTime(long)", span="0-0"];
m2_435 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt32Overflow()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt32Overflow()", span="790-790"];
m2_436 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt32Overflow()", file="JsonSchema.cs", label="long i = int.MaxValue", span="792-792"];
m2_437 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt32Overflow()", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(i.ToString(CultureInfo.InvariantCulture)))", span="794-794"];
m2_442 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt32Overflow()", file="JsonSchema.cs", label="long total = j + i", span="800-800"];
m2_438 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt32Overflow()", file="JsonSchema.cs", label="reader.Read()", span="795-795"];
m2_439 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt32Overflow()", file="JsonSchema.cs", label="Assert.AreEqual(typeof(long), reader.ValueType)", span="796-796"];
m2_443 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt32Overflow()", file="JsonSchema.cs", label="ExceptionAssert.Throws<OverflowException>(\r\n                    ''Arithmetic operation resulted in an overflow.'',\r\n                    () =>\r\n                    {\r\n                        reader = new JsonTextReader(new StringReader(total.ToString(CultureInfo.InvariantCulture)));\r\n                        reader.ReadAsInt32();\r\n                    })", span="801-807"];
m2_440 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt32Overflow()", file="JsonSchema.cs", label="int j = 1", span="798-798"];
m2_441 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt32Overflow()", file="JsonSchema.cs", label="j < 1000", span="798-798"];
m2_444 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt32Overflow()", file="JsonSchema.cs", label="j++", span="798-798"];
m2_445 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt32Overflow()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt32Overflow()", span="790-790"];
m2_1728 [cluster="System.DateTime.DateTime(long, System.DateTimeKind)", file="JsonSchema.cs", label="Entry System.DateTime.DateTime(long, System.DateTimeKind)", span="0-0"];
m2_140 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", span="329-329"];
m2_141 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", file="JsonSchema.cs", label="string json = @''{''''DefaultConverter'''':new Date(0, ''''hi''''),''''MemberConverter'''':''''1970-01-01T00:00:00Z''''}''", span="331-331"];
m2_142 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", file="JsonSchema.cs", label="JsonReader reader = new JsonTextReader(new StreamReader(new SlowStream(json, new UTF8Encoding(false), 1)))", span="333-333"];
m2_143 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="335-335"];
m2_144 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="336-336"];
m2_145 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="337-337"];
m2_146 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.StartConstructor, reader.TokenType)", span="338-338"];
m2_147 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", file="JsonSchema.cs", label="Assert.AreEqual(''Date'', reader.Value)", span="339-339"];
m2_148 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="341-341"];
m2_149 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", file="JsonSchema.cs", label="Assert.AreEqual(0L, reader.Value)", span="342-342"];
m2_150 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="344-344"];
m2_151 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", file="JsonSchema.cs", label="Assert.AreEqual(''hi'', reader.Value)", span="345-345"];
m2_152 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="347-347"];
m2_153 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.EndConstructor, reader.TokenType)", span="348-348"];
m2_154 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="350-350"];
m2_155 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", file="JsonSchema.cs", label="Assert.AreEqual(''MemberConverter'', reader.Value)", span="351-351"];
m2_156 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadConstructor()", span="329-329"];
m2_552 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndWhenParsingUnquotedProperty()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndWhenParsingUnquotedProperty()", span="972-972"];
m2_553 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndWhenParsingUnquotedProperty()", file="JsonSchema.cs", label="JsonReader reader = new JsonTextReader(new StringReader(@''{aww''))", span="974-974"];
m2_554 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndWhenParsingUnquotedProperty()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="975-975"];
m2_555 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndWhenParsingUnquotedProperty()", file="JsonSchema.cs", label="ExceptionAssert.Throws<JsonReaderException>(\r\n                ''Unexpected end while parsing unquoted property name. Path '', line 1, position 4.'',\r\n                () => { reader.Read(); })", span="977-979"];
m2_556 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndWhenParsingUnquotedProperty()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndWhenParsingUnquotedProperty()", span="972-972"];
m2_795 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", span="1347-1347"];
m2_796 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", file="JsonSchema.cs", label="int length = 20000", span="1349-1349"];
m2_797 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", file="JsonSchema.cs", label="string json = @''['''''' + new string(' ', length) + @'''''']''", span="1350-1350"];
m2_798 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="1352-1352"];
m2_799 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", file="JsonSchema.cs", label="reader.Read()", span="1354-1354"];
m2_800 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.StartArray, reader.TokenType)", span="1355-1355"];
m2_801 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", file="JsonSchema.cs", label="reader.Read()", span="1357-1357"];
m2_802 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.String, reader.TokenType)", span="1358-1358"];
m2_803 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", file="JsonSchema.cs", label="Assert.AreEqual(typeof(string), reader.ValueType)", span="1359-1359"];
m2_804 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", file="JsonSchema.cs", label="Assert.AreEqual(20000, reader.Value.ToString().Length)", span="1360-1360"];
m2_805 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="1362-1362"];
m2_806 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.EndArray, reader.TokenType)", span="1363-1363"];
m2_807 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", file="JsonSchema.cs", label="Assert.IsFalse(reader.Read())", span="1365-1365"];
m2_808 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.None, reader.TokenType)", span="1366-1366"];
m2_809 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.LongStringTest()", span="1347-1347"];
m2_393 [cluster="System.IO.StringWriter.ToString()", file="JsonSchema.cs", label="Entry System.IO.StringWriter.ToString()", span="0-0"];
m2_130 [cluster="Newtonsoft.Json.JsonTextReader.Close()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.JsonTextReader.Close()", span="1512-1512"];
m2_1815 [cluster="System.Array.Copy(System.Array, int, System.Array, int, int)", file="JsonSchema.cs", label="Entry System.Array.Copy(System.Array, int, System.Array, int, int)", span="0-0"];
m2_1814 [cluster="System.Math.Min(int, int)", file="JsonSchema.cs", label="Entry System.Math.Min(int, int)", span="0-0"];
m2_681 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", span="1209-1209"];
m2_682 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonSchema.cs", label="JsonTextReader reader = null", span="1211-1211"];
m2_683 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonSchema.cs", label="reader = new JsonTextReader(new StringReader(''1''))", span="1213-1213"];
m2_684 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonSchema.cs", label="Assert.AreEqual(1, reader.ReadAsInt32())", span="1214-1214"];
m2_685 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonSchema.cs", label="reader = new JsonTextReader(new StringReader(''-1''))", span="1216-1216"];
m2_686 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonSchema.cs", label="Assert.AreEqual(-1, reader.ReadAsInt32())", span="1217-1217"];
m2_687 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonSchema.cs", label="reader = new JsonTextReader(new StringReader(''0''))", span="1219-1219"];
m2_688 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonSchema.cs", label="Assert.AreEqual(0, reader.ReadAsInt32())", span="1220-1220"];
m2_689 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonSchema.cs", label="reader = new JsonTextReader(new StringReader(''-0''))", span="1222-1222"];
m2_690 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonSchema.cs", label="Assert.AreEqual(0, reader.ReadAsInt32())", span="1223-1223"];
m2_691 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonSchema.cs", label="reader = new JsonTextReader(new StringReader(int.MaxValue.ToString()))", span="1225-1225"];
m2_692 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonSchema.cs", label="Assert.AreEqual(int.MaxValue, reader.ReadAsInt32())", span="1226-1226"];
m2_693 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonSchema.cs", label="reader = new JsonTextReader(new StringReader(int.MinValue.ToString()))", span="1228-1228"];
m2_694 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonSchema.cs", label="Assert.AreEqual(int.MinValue, reader.ReadAsInt32())", span="1229-1229"];
m2_695 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonSchema.cs", label="reader = new JsonTextReader(new StringReader(long.MaxValue.ToString()))", span="1231-1231"];
m2_696 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonSchema.cs", label="ExceptionAssert.Throws<OverflowException>(''Arithmetic operation resulted in an overflow.'', () => reader.ReadAsInt32())", span="1232-1232"];
m2_697 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonSchema.cs", label="reader = new JsonTextReader(new StringReader(''9999999999999999999999999999999999999999999999999999999999999999999999999999asdasdasd''))", span="1234-1234"];
m2_698 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonSchema.cs", label="ExceptionAssert.Throws<FormatException>(''Input string was not in a correct format.'', () => reader.ReadAsInt32())", span="1235-1235"];
m2_699 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonSchema.cs", label="reader = new JsonTextReader(new StringReader(''1E-06''))", span="1237-1237"];
m2_700 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonSchema.cs", label="ExceptionAssert.Throws<FormatException>(''Input string was not in a correct format.'', () => reader.ReadAsInt32())", span="1238-1238"];
m2_701 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonSchema.cs", label="reader = new JsonTextReader(new StringReader(''1.1''))", span="1240-1240"];
m2_702 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonSchema.cs", label="ExceptionAssert.Throws<FormatException>(''Input string was not in a correct format.'', () => reader.ReadAsInt32())", span="1241-1241"];
m2_703 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonSchema.cs", label="reader = new JsonTextReader(new StringReader(''''))", span="1243-1243"];
m2_704 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonSchema.cs", label="Assert.AreEqual(null, reader.ReadAsInt32())", span="1244-1244"];
m2_705 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonSchema.cs", label="reader = new JsonTextReader(new StringReader(''-''))", span="1246-1246"];
m2_706 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonSchema.cs", label="ExceptionAssert.Throws<FormatException>(''Input string was not in a correct format.'', () => reader.ReadAsInt32())", span="1247-1247"];
m2_707 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIntegers()", span="1209-1209"];
m2_1534 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndTokenWhenParsingOddEndToken()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndTokenWhenParsingOddEndToken()", span="2501-2501"];
m2_1535 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndTokenWhenParsingOddEndToken()", file="JsonSchema.cs", label="JsonReader reader = new JsonTextReader(new StringReader(@''{}}''))", span="2503-2503"];
m2_1536 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndTokenWhenParsingOddEndToken()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2504-2504"];
m2_1537 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndTokenWhenParsingOddEndToken()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2505-2505"];
m2_1538 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndTokenWhenParsingOddEndToken()", file="JsonSchema.cs", label="ExceptionAssert.Throws<JsonReaderException>(\r\n                ''Additional text encountered after finished reading JSON content: }. Path '', line 1, position 2.'',\r\n                () => { reader.Read(); })", span="2507-2509"];
m2_1539 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndTokenWhenParsingOddEndToken()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndTokenWhenParsingOddEndToken()", span="2501-2501"];
m2_79 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairValid()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairValid()", span="211-211"];
m2_80 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairValid()", file="JsonSchema.cs", label="string json = @''{ ''''MATHEMATICAL ITALIC CAPITAL ALPHA'''': ''''\uD835\uDEE2'''' }''", span="213-213"];
m2_81 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairValid()", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="215-215"];
m2_82 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairValid()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="217-217"];
m2_83 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairValid()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="218-218"];
m2_84 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairValid()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="220-220"];
m2_85 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairValid()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.String, reader.TokenType)", span="221-221"];
m2_86 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairValid()", file="JsonSchema.cs", label="string s = reader.Value.ToString()", span="223-223"];
m2_87 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairValid()", file="JsonSchema.cs", label="Assert.AreEqual(2, s.Length)", span="224-224"];
m2_88 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairValid()", file="JsonSchema.cs", label="StringInfo stringInfo = new StringInfo(s)", span="226-226"];
m2_89 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairValid()", file="JsonSchema.cs", label="Assert.AreEqual(1, stringInfo.LengthInTextElements)", span="227-227"];
m2_90 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairValid()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairValid()", span="211-211"];
m2_929 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", span="1544-1544"];
m2_930 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="JsonSchema.cs", label="StringReader s = new StringReader(@''[0372, 0xFA, 0XFA]'')", span="1546-1546"];
m2_931 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="JsonSchema.cs", label="JsonTextReader jsonReader = new JsonTextReader(s)", span="1547-1547"];
m2_932 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="JsonSchema.cs", label="Assert.IsTrue(jsonReader.Read())", span="1549-1549"];
m2_933 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.StartArray, jsonReader.TokenType)", span="1550-1550"];
m2_934 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="JsonSchema.cs", label="jsonReader.Read()", span="1552-1552"];
m2_935 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Integer, jsonReader.TokenType)", span="1553-1553"];
m2_936 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="JsonSchema.cs", label="Assert.AreEqual(typeof(long), jsonReader.ValueType)", span="1554-1554"];
m2_937 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="JsonSchema.cs", label="Assert.AreEqual((long)250, (long)jsonReader.Value)", span="1555-1555"];
m2_938 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="JsonSchema.cs", label="jsonReader.Read()", span="1557-1557"];
m2_939 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Integer, jsonReader.TokenType)", span="1558-1558"];
m2_940 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="JsonSchema.cs", label="Assert.AreEqual(typeof(long), jsonReader.ValueType)", span="1559-1559"];
m2_941 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="JsonSchema.cs", label="Assert.AreEqual((long)250, (long)jsonReader.Value)", span="1560-1560"];
m2_942 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="JsonSchema.cs", label="jsonReader.Read()", span="1562-1562"];
m2_943 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Integer, jsonReader.TokenType)", span="1563-1563"];
m2_944 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="JsonSchema.cs", label="Assert.AreEqual(typeof(long), jsonReader.ValueType)", span="1564-1564"];
m2_945 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="JsonSchema.cs", label="Assert.AreEqual((long)250, (long)jsonReader.Value)", span="1565-1565"];
m2_946 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="JsonSchema.cs", label="Assert.IsTrue(jsonReader.Read())", span="1567-1567"];
m2_947 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.EndArray, jsonReader.TokenType)", span="1568-1568"];
m2_948 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="JsonSchema.cs", label="Assert.IsFalse(jsonReader.Read())", span="1570-1570"];
m2_949 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumberAsInt64()", span="1544-1544"];
m2_908 [cluster="Newtonsoft.Json.JsonTextReader.ReadAsBytes()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.JsonTextReader.ReadAsBytes()", span="317-317"];
m2_979 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalNoContent()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalNoContent()", span="1616-1616"];
m2_980 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalNoContent()", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(@''''))", span="1618-1618"];
m2_981 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalNoContent()", file="JsonSchema.cs", label="Assert.IsNull(reader.ReadAsDecimal())", span="1620-1620"];
m2_982 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalNoContent()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.None, reader.TokenType)", span="1621-1621"];
m2_983 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalNoContent()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalNoContent()", span="1616-1616"];
m2_497 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNewLine()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNewLine()", span="877-877"];
m2_498 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNewLine()", file="JsonSchema.cs", label="string json = @''\r\n{\r\n  ''''description'''': ''''A person'''',\r\n  ''''type'''': ''''object'''',\r\n  ''''properties'''':\r\n  {\r\n    ''''name'''': {''''type'''':''''string''''},\r\n    ''''hobbies'''': {\r\n      ''''type'''': ''''array'''',\r\n      ''''items'''': {''''type'''':''''string''''}\r\n    }\r\n  }\r\n}\r\n''", span="879-892"];
m2_499 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNewLine()", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="894-894"];
m2_500 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNewLine()", file="JsonSchema.cs", label="int i = 0", span="899-899"];
m2_502 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNewLine()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="901-901"];
m2_504 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNewLine()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="904-904"];
m2_505 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNewLine()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="905-905"];
m2_506 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNewLine()", file="JsonSchema.cs", label="Assert.AreEqual(''type'', reader.Value)", span="906-906"];
m2_501 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNewLine()", file="JsonSchema.cs", label="i < 14", span="899-899"];
m2_503 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNewLine()", file="JsonSchema.cs", label="i++", span="899-899"];
m2_507 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNewLine()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNewLine()", span="877-877"];
m2_824 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", span="1393-1393"];
m2_825 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSchema.cs", label="string json =\r\n                @''[0.0,0.0,0.1,1.0,1.000001,1E-06,4.94065645841247E-324,Infinity,-Infinity,NaN,1.7976931348623157E+308,-1.7976931348623157E+308,Infinity,-Infinity,NaN,0e-10,0.25e-5,0.3e10]''", span="1395-1396"];
m2_826 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSchema.cs", label="JsonReader jsonReader = new JsonTextReader(new StringReader(json))", span="1398-1398"];
m2_827 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSchema.cs", label="jsonReader.Read()", span="1400-1400"];
m2_828 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.StartArray, jsonReader.TokenType)", span="1401-1401"];
m2_829 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSchema.cs", label="jsonReader.Read()", span="1403-1403"];
m2_830 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="1404-1404"];
m2_831 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSchema.cs", label="Assert.AreEqual(0.0, jsonReader.Value)", span="1405-1405"];
m2_832 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSchema.cs", label="jsonReader.Read()", span="1407-1407"];
m2_833 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="1408-1408"];
m2_834 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSchema.cs", label="Assert.AreEqual(0.0, jsonReader.Value)", span="1409-1409"];
m2_835 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSchema.cs", label="jsonReader.Read()", span="1411-1411"];
m2_836 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="1412-1412"];
m2_837 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSchema.cs", label="Assert.AreEqual(0.1, jsonReader.Value)", span="1413-1413"];
m2_838 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSchema.cs", label="jsonReader.Read()", span="1415-1415"];
m2_839 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="1416-1416"];
m2_840 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSchema.cs", label="Assert.AreEqual(1.0, jsonReader.Value)", span="1417-1417"];
m2_841 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSchema.cs", label="jsonReader.Read()", span="1419-1419"];
m2_842 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="1420-1420"];
m2_843 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSchema.cs", label="Assert.AreEqual(1.000001, jsonReader.Value)", span="1421-1421"];
m2_844 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSchema.cs", label="jsonReader.Read()", span="1423-1423"];
m2_845 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="1424-1424"];
m2_846 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSchema.cs", label="Assert.AreEqual(1E-06, jsonReader.Value)", span="1425-1425"];
m2_847 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSchema.cs", label="jsonReader.Read()", span="1427-1427"];
m2_848 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="1428-1428"];
m2_849 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSchema.cs", label="Assert.AreEqual(4.94065645841247E-324, jsonReader.Value)", span="1429-1429"];
m2_850 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSchema.cs", label="jsonReader.Read()", span="1431-1431"];
m2_851 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="1432-1432"];
m2_852 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSchema.cs", label="Assert.AreEqual(double.PositiveInfinity, jsonReader.Value)", span="1433-1433"];
m2_853 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSchema.cs", label="jsonReader.Read()", span="1435-1435"];
m2_854 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="1436-1436"];
m2_855 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSchema.cs", label="Assert.AreEqual(double.NegativeInfinity, jsonReader.Value)", span="1437-1437"];
m2_856 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSchema.cs", label="jsonReader.Read()", span="1439-1439"];
m2_857 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="1440-1440"];
m2_858 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSchema.cs", label="Assert.AreEqual(double.NaN, jsonReader.Value)", span="1441-1441"];
m2_859 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSchema.cs", label="jsonReader.Read()", span="1443-1443"];
m2_860 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="1444-1444"];
m2_861 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSchema.cs", label="Assert.AreEqual(double.MaxValue, jsonReader.Value)", span="1445-1445"];
m2_862 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSchema.cs", label="jsonReader.Read()", span="1447-1447"];
m2_863 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="1448-1448"];
m2_864 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSchema.cs", label="Assert.AreEqual(double.MinValue, jsonReader.Value)", span="1449-1449"];
m2_865 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSchema.cs", label="jsonReader.Read()", span="1451-1451"];
m2_866 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="1452-1452"];
m2_867 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSchema.cs", label="Assert.AreEqual(double.PositiveInfinity, jsonReader.Value)", span="1453-1453"];
m2_868 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSchema.cs", label="jsonReader.Read()", span="1455-1455"];
m2_869 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="1456-1456"];
m2_870 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSchema.cs", label="Assert.AreEqual(double.NegativeInfinity, jsonReader.Value)", span="1457-1457"];
m2_871 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSchema.cs", label="jsonReader.Read()", span="1459-1459"];
m2_872 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="1460-1460"];
m2_873 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSchema.cs", label="Assert.AreEqual(double.NaN, jsonReader.Value)", span="1461-1461"];
m2_874 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSchema.cs", label="jsonReader.Read()", span="1463-1463"];
m2_875 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="1464-1464"];
m2_876 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSchema.cs", label="Assert.AreEqual(0d, jsonReader.Value)", span="1465-1465"];
m2_877 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSchema.cs", label="jsonReader.Read()", span="1467-1467"];
m2_878 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="1468-1468"];
m2_879 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSchema.cs", label="Assert.AreEqual(0.0000025d, jsonReader.Value)", span="1469-1469"];
m2_880 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSchema.cs", label="jsonReader.Read()", span="1471-1471"];
m2_881 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Float, jsonReader.TokenType)", span="1472-1472"];
m2_882 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSchema.cs", label="Assert.AreEqual(3000000000d, jsonReader.Value)", span="1473-1473"];
m2_883 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSchema.cs", label="jsonReader.Read()", span="1475-1475"];
m2_884 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.EndArray, jsonReader.TokenType)", span="1476-1476"];
m2_885 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadFloatingPointNumber()", span="1393-1393"];
m2_1178 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", span="1920-1920"];
m2_1179 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", file="JsonSchema.cs", label="string json = @''{''''Offset'''':''''30/1/2011''''}''", span="1922-1922"];
m2_1180 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="1924-1924"];
m2_1181 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", file="JsonSchema.cs", label="reader.Culture = new CultureInfo(''en-NZ'')", span="1925-1925"];
m2_1182 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="1927-1927"];
m2_1183 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="1928-1928"];
m2_1184 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="1930-1930"];
m2_1185 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="1931-1931"];
m2_1186 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", file="JsonSchema.cs", label="reader.ReadAsDateTimeOffset()", span="1933-1933"];
m2_1187 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Date, reader.TokenType)", span="1934-1934"];
m2_1188 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", file="JsonSchema.cs", label="Assert.AreEqual(typeof(DateTimeOffset), reader.ValueType)", span="1935-1935"];
m2_1189 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", file="JsonSchema.cs", label="DateTimeOffset dt = (DateTimeOffset)reader.Value", span="1937-1937"];
m2_1191 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="1940-1940"];
m2_1192 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.EndObject, reader.TokenType)", span="1941-1941"];
m2_1190 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", file="JsonSchema.cs", label="Assert.AreEqual(new DateTime(2011, 1, 30, 0, 0, 0, DateTimeKind.Unspecified), dt.DateTime)", span="1938-1938"];
m2_1193 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNewZealandDate()", span="1920-1920"];
m2_1796 [cluster="System.Exception.Exception(string)", file="JsonSchema.cs", label="Entry System.Exception.Exception(string)", span="0-0"];
m2_1371 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseBooleanWithNoExtraContent()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ParseBooleanWithNoExtraContent()", span="2245-2245"];
m2_1372 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseBooleanWithNoExtraContent()", file="JsonSchema.cs", label="string json = ''[true ''", span="2247-2247"];
m2_1373 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseBooleanWithNoExtraContent()", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="2248-2248"];
m2_1374 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseBooleanWithNoExtraContent()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2250-2250"];
m2_1375 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseBooleanWithNoExtraContent()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2251-2251"];
m2_1376 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseBooleanWithNoExtraContent()", file="JsonSchema.cs", label="Assert.IsFalse(reader.Read())", span="2252-2252"];
m2_1377 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseBooleanWithNoExtraContent()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ParseBooleanWithNoExtraContent()", span="2245-2245"];
m2_675 [cluster="Newtonsoft.Json.JsonConvert.DeserializeObject(string)", file="JsonSchema.cs", label="Entry Newtonsoft.Json.JsonConvert.DeserializeObject(string)", span="656-656"];
m2_513 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndOfHex()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndOfHex()", span="919-919"];
m2_514 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndOfHex()", file="JsonSchema.cs", label="JsonReader reader = new JsonTextReader(new StringReader(@'''h\u123''))", span="921-921"];
m2_515 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndOfHex()", file="JsonSchema.cs", label="ExceptionAssert.Throws<JsonReaderException>(\r\n                ''Unexpected end while parsing unicode character. Path '', line 1, position 4.'',\r\n                () => { reader.Read(); })", span="923-925"];
m2_516 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndOfHex()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndOfHex()", span="919-919"];
m2_48 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatParseHandling_NaN()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.FloatParseHandling_NaN()", span="108-108"];
m2_49 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatParseHandling_NaN()", file="JsonSchema.cs", label="string json = ''[NaN]''", span="110-110"];
m2_50 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatParseHandling_NaN()", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="112-112"];
m2_51 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatParseHandling_NaN()", file="JsonSchema.cs", label="reader.FloatParseHandling = Json.FloatParseHandling.Decimal", span="113-113"];
m2_52 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatParseHandling_NaN()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="115-115"];
m2_53 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatParseHandling_NaN()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.StartArray, reader.TokenType)", span="116-116"];
m2_54 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatParseHandling_NaN()", file="JsonSchema.cs", label="ExceptionAssert.Throws<JsonReaderException>(\r\n                ''Cannot read NaN as a decimal.'',\r\n                () => reader.Read())", span="118-120"];
m2_55 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatParseHandling_NaN()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.FloatParseHandling_NaN()", span="108-108"];
m2_1798 [cluster="Newtonsoft.Json.Tests.SlowStream.SlowStream(byte[], int)", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.SlowStream.SlowStream(byte[], int)", span="2885-2885"];
m2_1799 [cluster="Newtonsoft.Json.Tests.SlowStream.SlowStream(byte[], int)", file="JsonSchema.cs", label="bytes = content", span="2887-2887"];
m2_1801 [cluster="Newtonsoft.Json.Tests.SlowStream.SlowStream(byte[], int)", file="JsonSchema.cs", label="this.bytesPerRead = bytesPerRead", span="2889-2889"];
m2_1800 [cluster="Newtonsoft.Json.Tests.SlowStream.SlowStream(byte[], int)", file="JsonSchema.cs", label="totalBytesRead = 0", span="2888-2888"];
m2_1802 [cluster="Newtonsoft.Json.Tests.SlowStream.SlowStream(byte[], int)", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.SlowStream.SlowStream(byte[], int)", span="2885-2885"];
m2_394 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", span="707-707"];
m2_395 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="JsonSchema.cs", label="string json = ''\0{\0'\0h\0i\0'\0:\0[\01\0,\0'\0'\0\0,\0null\0]\0,\0do\0:true\0}\0\0/*\0sd\0f\0*/\0/*\0sd\0f\0*/ \0''", span="709-709"];
m2_396 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(new StreamReader(new SlowStream(json, new UTF8Encoding(false), 1)))", span="710-710"];
m2_397 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="712-712"];
m2_398 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="713-713"];
m2_399 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="715-715"];
m2_400 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="716-716"];
m2_401 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="718-718"];
m2_402 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.StartArray, reader.TokenType)", span="719-719"];
m2_403 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="721-721"];
m2_404 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Integer, reader.TokenType)", span="722-722"];
m2_405 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="724-724"];
m2_406 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.String, reader.TokenType)", span="725-725"];
m2_407 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="727-727"];
m2_408 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Null, reader.TokenType)", span="728-728"];
m2_409 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="730-730"];
m2_410 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.EndArray, reader.TokenType)", span="731-731"];
m2_411 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="733-733"];
m2_412 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="734-734"];
m2_413 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="736-736"];
m2_414 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Boolean, reader.TokenType)", span="737-737"];
m2_415 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="739-739"];
m2_416 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.EndObject, reader.TokenType)", span="740-740"];
m2_417 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="742-742"];
m2_418 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Comment, reader.TokenType)", span="743-743"];
m2_419 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="JsonSchema.cs", label="Assert.AreEqual(''\0sd\0f\0'', reader.Value)", span="744-744"];
m2_420 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="746-746"];
m2_421 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Comment, reader.TokenType)", span="747-747"];
m2_422 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="JsonSchema.cs", label="Assert.AreEqual(''\0sd\0f\0'', reader.Value)", span="748-748"];
m2_423 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="JsonSchema.cs", label="Assert.IsFalse(reader.Read())", span="750-750"];
m2_424 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.NullCharReading()", span="707-707"];
m2_0 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ThrowErrorWhenParsingUnquoteStringThatStartsWithNE()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ThrowErrorWhenParsingUnquoteStringThatStartsWithNE()", span="50-50"];
m2_1 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ThrowErrorWhenParsingUnquoteStringThatStartsWithNE()", file="JsonSchema.cs", label="string json = @''{ ''''ItemName'''': ''''value'''', ''''u'''':netanelsalinger,''''r'''':9 }''", span="52-52"];
m2_2 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ThrowErrorWhenParsingUnquoteStringThatStartsWithNE()", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="54-54"];
m2_3 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ThrowErrorWhenParsingUnquoteStringThatStartsWithNE()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="56-56"];
m2_4 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ThrowErrorWhenParsingUnquoteStringThatStartsWithNE()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="57-57"];
m2_5 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ThrowErrorWhenParsingUnquoteStringThatStartsWithNE()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="59-59"];
m2_6 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ThrowErrorWhenParsingUnquoteStringThatStartsWithNE()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="60-60"];
m2_7 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ThrowErrorWhenParsingUnquoteStringThatStartsWithNE()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="62-62"];
m2_8 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ThrowErrorWhenParsingUnquoteStringThatStartsWithNE()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.String, reader.TokenType)", span="63-63"];
m2_9 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ThrowErrorWhenParsingUnquoteStringThatStartsWithNE()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="65-65"];
m2_10 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ThrowErrorWhenParsingUnquoteStringThatStartsWithNE()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="66-66"];
m2_11 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ThrowErrorWhenParsingUnquoteStringThatStartsWithNE()", file="JsonSchema.cs", label="ExceptionAssert.Throws<JsonReaderException>(''Unexpected content while parsing JSON. Path 'u', line 1, position 27.'',\r\n                () => { reader.Read(); })", span="68-69"];
m2_12 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ThrowErrorWhenParsingUnquoteStringThatStartsWithNE()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ThrowErrorWhenParsingUnquoteStringThatStartsWithNE()", span="50-50"];
m2_676 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadRandomJson()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadRandomJson()", span="1178-1178"];
m2_677 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadRandomJson()", file="JsonSchema.cs", label="string json = @''[\r\n  true,\r\n  {\r\n    ''''integer'''': 99,\r\n    ''''string'''': ''''how now brown cow?'''',\r\n    ''''array'''': [\r\n      0,\r\n      1,\r\n      2,\r\n      3,\r\n      4,\r\n      {\r\n        ''''decimal'''': 990.00990099\r\n      },\r\n      5\r\n    ]\r\n  },\r\n  ''''This is a string.'''',\r\n  null,\r\n  null\r\n]''", span="1180-1200"];
m2_678 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadRandomJson()", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="1202-1202"];
m2_679 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadRandomJson()", file="JsonSchema.cs", label="reader.Read()", span="1203-1203"];
m2_680 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadRandomJson()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadRandomJson()", span="1178-1178"];
m2_763 [cluster="System.IO.StringWriter.StringWriter(System.Text.StringBuilder)", file="JsonSchema.cs", label="Entry System.IO.StringWriter.StringWriter(System.Text.StringBuilder)", span="0-0"];
m2_1394 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseObjectWithNoEnd()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ParseObjectWithNoEnd()", span="2278-2278"];
m2_1395 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseObjectWithNoEnd()", file="JsonSchema.cs", label="string json = ''{hi:1, ''", span="2280-2280"];
m2_1396 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseObjectWithNoEnd()", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="2281-2281"];
m2_1397 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseObjectWithNoEnd()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2283-2283"];
m2_1398 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseObjectWithNoEnd()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2284-2284"];
m2_1399 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseObjectWithNoEnd()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2285-2285"];
m2_1400 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseObjectWithNoEnd()", file="JsonSchema.cs", label="Assert.IsFalse(reader.Read())", span="2286-2286"];
m2_1401 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseObjectWithNoEnd()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ParseObjectWithNoEnd()", span="2278-2278"];
m2_347 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullTextReader()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.NullTextReader()", span="652-652"];
m2_348 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullTextReader()", file="JsonSchema.cs", label="ExceptionAssert.Throws<ArgumentNullException>(\r\n                @''Value cannot be null.\r\nParameter name: reader'',\r\n                () => { new JsonTextReader(null); })", span="654-657"];
m2_349 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.NullTextReader()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.NullTextReader()", span="652-652"];
m2_545 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesNoStartWithUnexpectedEnd()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesNoStartWithUnexpectedEnd()", span="962-962"];
m2_546 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesNoStartWithUnexpectedEnd()", file="JsonSchema.cs", label="JsonReader reader = new JsonTextReader(new StringReader(@''[  ''))", span="964-964"];
m2_547 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesNoStartWithUnexpectedEnd()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="965-965"];
m2_548 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesNoStartWithUnexpectedEnd()", file="JsonSchema.cs", label="Assert.IsNull(reader.ReadAsBytes())", span="967-967"];
m2_549 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesNoStartWithUnexpectedEnd()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.None, reader.TokenType)", span="968-968"];
m2_550 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesNoStartWithUnexpectedEnd()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesNoStartWithUnexpectedEnd()", span="962-962"];
m2_185 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Whitespace()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Whitespace()", span="410-410"];
m2_186 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Whitespace()", file="JsonSchema.cs", label="string json = @''[\r\n''''Small'''',\r\n''''Medium'''',\r\n''''Large''''\r\n]   \r\n\r\n''", span="412-418"];
m2_187 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Whitespace()", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="420-420"];
m2_188 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Whitespace()", file="JsonSchema.cs", label="reader.Read()", span="421-421"];
m2_189 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Whitespace()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Whitespace()", span="410-410"];
m2_604 [cluster="System.IO.StringReader.ReadLine()", file="JsonSchema.cs", label="Entry System.IO.StringReader.ReadLine()", span="0-0"];
m2_1246 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.BadCommentStart()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.BadCommentStart()", span="2023-2023"];
m2_1247 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.BadCommentStart()", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(@''/sdf''))", span="2025-2025"];
m2_1248 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.BadCommentStart()", file="JsonSchema.cs", label="ExceptionAssert.Throws<JsonReaderException>(\r\n                ''Error parsing comment. Expected: *, got s. Path '', line 1, position 1.'',\r\n                () => { reader.Read(); })", span="2027-2029"];
m2_1249 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.BadCommentStart()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.BadCommentStart()", span="2023-2023"];
m2_198 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", span="444-444"];
m2_199 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="JsonSchema.cs", label="string input = @''{\r\n  CPU: 'Intel',\r\n  Drives: [\r\n    'DVD read/writer',\r\n    ''''500 gigabyte hard drive''''\r\n  ]\r\n}''", span="446-452"];
m2_200 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="JsonSchema.cs", label="StringReader sr = new StringReader(input)", span="454-454"];
m2_201 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="JsonSchema.cs", label="JsonTextReader jsonReader = new JsonTextReader(sr)", span="456-456"];
m2_202 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="JsonSchema.cs", label="Assert.AreEqual(jsonReader.TokenType, JsonToken.None)", span="462-462"];
m2_203 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="JsonSchema.cs", label="Assert.AreEqual(0, jsonReader.LineNumber)", span="463-463"];
m2_204 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="JsonSchema.cs", label="Assert.AreEqual(0, jsonReader.LinePosition)", span="464-464"];
m2_205 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="JsonSchema.cs", label="jsonReader.Read()", span="466-466"];
m2_206 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="JsonSchema.cs", label="Assert.AreEqual(jsonReader.TokenType, JsonToken.StartObject)", span="467-467"];
m2_207 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="JsonSchema.cs", label="Assert.AreEqual(1, jsonReader.LineNumber)", span="468-468"];
m2_208 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="JsonSchema.cs", label="Assert.AreEqual(1, jsonReader.LinePosition)", span="469-469"];
m2_209 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="JsonSchema.cs", label="jsonReader.Read()", span="471-471"];
m2_210 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="JsonSchema.cs", label="Assert.AreEqual(jsonReader.TokenType, JsonToken.PropertyName)", span="472-472"];
m2_211 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="JsonSchema.cs", label="Assert.AreEqual(jsonReader.Value, ''CPU'')", span="473-473"];
m2_212 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="JsonSchema.cs", label="Assert.AreEqual(2, jsonReader.LineNumber)", span="474-474"];
m2_213 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="JsonSchema.cs", label="Assert.AreEqual(7, jsonReader.LinePosition)", span="475-475"];
m2_214 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="JsonSchema.cs", label="jsonReader.Read()", span="477-477"];
m2_215 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.String, jsonReader.TokenType)", span="478-478"];
m2_216 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="JsonSchema.cs", label="Assert.AreEqual(''Intel'', jsonReader.Value)", span="479-479"];
m2_217 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="JsonSchema.cs", label="Assert.AreEqual(2, jsonReader.LineNumber)", span="480-480"];
m2_218 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="JsonSchema.cs", label="Assert.AreEqual(15, jsonReader.LinePosition)", span="481-481"];
m2_219 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="JsonSchema.cs", label="jsonReader.Read()", span="483-483"];
m2_220 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="JsonSchema.cs", label="Assert.AreEqual(jsonReader.TokenType, JsonToken.PropertyName)", span="484-484"];
m2_221 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="JsonSchema.cs", label="Assert.AreEqual(jsonReader.Value, ''Drives'')", span="485-485"];
m2_222 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="JsonSchema.cs", label="Assert.AreEqual(3, jsonReader.LineNumber)", span="486-486"];
m2_223 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="JsonSchema.cs", label="Assert.AreEqual(10, jsonReader.LinePosition)", span="487-487"];
m2_224 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="JsonSchema.cs", label="jsonReader.Read()", span="489-489"];
m2_225 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="JsonSchema.cs", label="Assert.AreEqual(jsonReader.TokenType, JsonToken.StartArray)", span="490-490"];
m2_226 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="JsonSchema.cs", label="Assert.AreEqual(3, jsonReader.LineNumber)", span="491-491"];
m2_227 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="JsonSchema.cs", label="Assert.AreEqual(12, jsonReader.LinePosition)", span="492-492"];
m2_228 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="JsonSchema.cs", label="jsonReader.Read()", span="494-494"];
m2_229 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="JsonSchema.cs", label="Assert.AreEqual(jsonReader.TokenType, JsonToken.String)", span="495-495"];
m2_230 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="JsonSchema.cs", label="Assert.AreEqual(jsonReader.Value, ''DVD read/writer'')", span="496-496"];
m2_231 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="JsonSchema.cs", label="Assert.AreEqual(jsonReader.QuoteChar, '\'')", span="497-497"];
m2_232 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="JsonSchema.cs", label="Assert.AreEqual(4, jsonReader.LineNumber)", span="498-498"];
m2_233 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="JsonSchema.cs", label="Assert.AreEqual(22, jsonReader.LinePosition)", span="499-499"];
m2_234 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="JsonSchema.cs", label="jsonReader.Read()", span="501-501"];
m2_235 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="JsonSchema.cs", label="Assert.AreEqual(jsonReader.TokenType, JsonToken.String)", span="502-502"];
m2_236 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="JsonSchema.cs", label="Assert.AreEqual(jsonReader.Value, ''500 gigabyte hard drive'')", span="503-503"];
m2_237 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="JsonSchema.cs", label="Assert.AreEqual(jsonReader.QuoteChar, '''')", span="504-504"];
m2_238 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="JsonSchema.cs", label="Assert.AreEqual(5, jsonReader.LineNumber)", span="505-505"];
m2_239 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="JsonSchema.cs", label="Assert.AreEqual(30, jsonReader.LinePosition)", span="506-506"];
m2_240 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="JsonSchema.cs", label="jsonReader.Read()", span="508-508"];
m2_241 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="JsonSchema.cs", label="Assert.AreEqual(jsonReader.TokenType, JsonToken.EndArray)", span="509-509"];
m2_242 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="JsonSchema.cs", label="Assert.AreEqual(6, jsonReader.LineNumber)", span="510-510"];
m2_243 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="JsonSchema.cs", label="Assert.AreEqual(4, jsonReader.LinePosition)", span="511-511"];
m2_244 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="JsonSchema.cs", label="jsonReader.Read()", span="513-513"];
m2_245 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="JsonSchema.cs", label="Assert.AreEqual(jsonReader.TokenType, JsonToken.EndObject)", span="514-514"];
m2_246 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="JsonSchema.cs", label="Assert.AreEqual(7, jsonReader.LineNumber)", span="515-515"];
m2_247 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="JsonSchema.cs", label="Assert.AreEqual(2, jsonReader.LinePosition)", span="516-516"];
m2_248 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="JsonSchema.cs", label="Assert.IsFalse(jsonReader.Read())", span="518-518"];
m2_249 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingIndented()", span="444-444"];
m2_159 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Comma()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Comma()", span="355-355"];
m2_160 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Comma()", file="JsonSchema.cs", label="string json = @''[\r\n''''Small'''',\r\n''''Medium'''',\r\n''''Large''''\r\n],''", span="357-361"];
m2_161 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Comma()", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="363-363"];
m2_162 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Comma()", file="JsonSchema.cs", label="ExceptionAssert.Throws<JsonReaderException>(\r\n                ''Additional text encountered after finished reading JSON content: ,. Path '', line 5, position 2.'',\r\n                () =>\r\n                {\r\n                    while (reader.Read())\r\n                    {\r\n                    }\r\n                })", span="365-372"];
m2_163 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Comma()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Comma()", span="355-355"];
m2_1002 [cluster="Newtonsoft.Json.JsonTextReader.ReadAsDateTimeOffset()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.JsonTextReader.ReadAsDateTimeOffset()", span="363-363"];
m2_1239 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnclosedComment()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.UnclosedComment()", span="2013-2013"];
m2_1240 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnclosedComment()", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(@''/* sdf''))", span="2015-2015"];
m2_1241 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnclosedComment()", file="JsonSchema.cs", label="ExceptionAssert.Throws<JsonReaderException>(\r\n                ''Unexpected end while parsing comment. Path '', line 1, position 6.'',\r\n                () => { reader.Read(); })", span="2017-2019"];
m2_1242 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnclosedComment()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.UnclosedComment()", span="2013-2013"];
m2_1267 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalFrench()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalFrench()", span="2055-2055"];
m2_1268 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalFrench()", file="JsonSchema.cs", label="string json = @''{''''decimal'''':''''9,99''''}''", span="2057-2057"];
m2_1269 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalFrench()", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="2059-2059"];
m2_1270 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalFrench()", file="JsonSchema.cs", label="reader.Culture = new CultureInfo(''fr-FR'')", span="2060-2060"];
m2_1271 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalFrench()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2062-2062"];
m2_1272 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalFrench()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="2063-2063"];
m2_1273 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalFrench()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2065-2065"];
m2_1274 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalFrench()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="2066-2066"];
m2_1275 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalFrench()", file="JsonSchema.cs", label="decimal? d = reader.ReadAsDecimal()", span="2068-2068"];
m2_1276 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalFrench()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Float, reader.TokenType)", span="2069-2069"];
m2_1277 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalFrench()", file="JsonSchema.cs", label="Assert.AreEqual(typeof(decimal), reader.ValueType)", span="2070-2070"];
m2_1279 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalFrench()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2073-2073"];
m2_1280 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalFrench()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.EndObject, reader.TokenType)", span="2074-2074"];
m2_1278 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalFrench()", file="JsonSchema.cs", label="Assert.AreEqual(9.99m, d)", span="2071-2071"];
m2_1281 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalFrench()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalFrench()", span="2055-2055"];
m2_131 [cluster="Unk.IsFalse", file="JsonSchema.cs", label="Entry Unk.IsFalse", span=""];
m2_984 [cluster="Newtonsoft.Json.JsonTextReader.ReadAsDecimal()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.JsonTextReader.ReadAsDecimal()", span="326-326"];
m2_1282 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBufferOnControlChar()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBufferOnControlChar()", span="2078-2078"];
m2_1283 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBufferOnControlChar()", file="JsonSchema.cs", label="string json = @''[\r\n  {\r\n    ''''Name'''': ''''Jim'''',\r\n    ''''BirthDate'''': ''''\/Date(978048000000)\/'''',\r\n    ''''LastModified'''': ''''\/Date(978048000000)\/''''\r\n  },\r\n  {\r\n    ''''Name'''': ''''Jim'''',\r\n    ''''BirthDate'''': ''''\/Date(978048000000)\/'''',\r\n    ''''LastModified'''': ''''\/Date(978048000000)\/''''\r\n  }\r\n]''", span="2080-2091"];
m2_1284 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBufferOnControlChar()", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="2093-2093"];
m2_1285 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBufferOnControlChar()", file="JsonSchema.cs", label="int i = 0", span="2098-2098"];
m2_1287 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBufferOnControlChar()", file="JsonSchema.cs", label="reader.Read()", span="2100-2100"];
m2_1289 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBufferOnControlChar()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2103-2103"];
m2_1290 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBufferOnControlChar()", file="JsonSchema.cs", label="Assert.AreEqual(new DateTime(631136448000000000), reader.Value)", span="2104-2104"];
m2_1286 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBufferOnControlChar()", file="JsonSchema.cs", label="i < 13", span="2098-2098"];
m2_1288 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBufferOnControlChar()", file="JsonSchema.cs", label="i++", span="2098-2098"];
m2_1291 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBufferOnControlChar()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBufferOnControlChar()", span="2078-2078"];
m2_1599 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepthDoesNotRecursivelyError()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepthDoesNotRecursivelyError()", span="2598-2598"];
m2_1600 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepthDoesNotRecursivelyError()", file="JsonSchema.cs", label="string json = ''[[[[]]],[[]]]''", span="2600-2600"];
m2_1601 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepthDoesNotRecursivelyError()", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(json))\r\n            {\r\n                MaxDepth = 1\r\n            }", span="2602-2605"];
m2_1602 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepthDoesNotRecursivelyError()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2607-2607"];
m2_1603 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepthDoesNotRecursivelyError()", file="JsonSchema.cs", label="Assert.AreEqual(0, reader.Depth)", span="2608-2608"];
m2_1604 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepthDoesNotRecursivelyError()", file="JsonSchema.cs", label="ExceptionAssert.Throws<JsonReaderException>(\r\n                ''The reader's MaxDepth of 1 has been exceeded. Path '[0]', line 1, position 2.'',\r\n                () => { Assert.IsTrue(reader.Read()); })", span="2610-2612"];
m2_1605 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepthDoesNotRecursivelyError()", file="JsonSchema.cs", label="Assert.AreEqual(1, reader.Depth)", span="2613-2613"];
m2_1606 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepthDoesNotRecursivelyError()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2615-2615"];
m2_1607 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepthDoesNotRecursivelyError()", file="JsonSchema.cs", label="Assert.AreEqual(2, reader.Depth)", span="2616-2616"];
m2_1608 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepthDoesNotRecursivelyError()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2618-2618"];
m2_1609 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepthDoesNotRecursivelyError()", file="JsonSchema.cs", label="Assert.AreEqual(3, reader.Depth)", span="2619-2619"];
m2_1610 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepthDoesNotRecursivelyError()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2621-2621"];
m2_1611 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepthDoesNotRecursivelyError()", file="JsonSchema.cs", label="Assert.AreEqual(3, reader.Depth)", span="2622-2622"];
m2_1612 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepthDoesNotRecursivelyError()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2624-2624"];
m2_1613 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepthDoesNotRecursivelyError()", file="JsonSchema.cs", label="Assert.AreEqual(2, reader.Depth)", span="2625-2625"];
m2_1614 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepthDoesNotRecursivelyError()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2627-2627"];
m2_1615 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepthDoesNotRecursivelyError()", file="JsonSchema.cs", label="Assert.AreEqual(1, reader.Depth)", span="2628-2628"];
m2_1616 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepthDoesNotRecursivelyError()", file="JsonSchema.cs", label="ExceptionAssert.Throws<JsonReaderException>(\r\n                ''The reader's MaxDepth of 1 has been exceeded. Path '[1]', line 1, position 9.'',\r\n                () => { Assert.IsTrue(reader.Read()); })", span="2630-2632"];
m2_1617 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepthDoesNotRecursivelyError()", file="JsonSchema.cs", label="Assert.AreEqual(1, reader.Depth)", span="2633-2633"];
m2_1618 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepthDoesNotRecursivelyError()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2635-2635"];
m2_1619 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepthDoesNotRecursivelyError()", file="JsonSchema.cs", label="Assert.AreEqual(2, reader.Depth)", span="2636-2636"];
m2_1620 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepthDoesNotRecursivelyError()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2638-2638"];
m2_1621 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepthDoesNotRecursivelyError()", file="JsonSchema.cs", label="Assert.AreEqual(2, reader.Depth)", span="2639-2639"];
m2_1622 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepthDoesNotRecursivelyError()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2641-2641"];
m2_1623 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepthDoesNotRecursivelyError()", file="JsonSchema.cs", label="Assert.AreEqual(1, reader.Depth)", span="2642-2642"];
m2_1624 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepthDoesNotRecursivelyError()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2644-2644"];
m2_1625 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepthDoesNotRecursivelyError()", file="JsonSchema.cs", label="Assert.AreEqual(0, reader.Depth)", span="2645-2645"];
m2_1626 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepthDoesNotRecursivelyError()", file="JsonSchema.cs", label="Assert.IsFalse(reader.Read())", span="2647-2647"];
m2_1627 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepthDoesNotRecursivelyError()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.MaxDepthDoesNotRecursivelyError()", span="2598-2598"];
m2_1017 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetBadContent()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetBadContent()", span="1676-1676"];
m2_1018 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetBadContent()", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(@''new Date()''))", span="1678-1678"];
m2_1019 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetBadContent()", file="JsonSchema.cs", label="ExceptionAssert.Throws<JsonReaderException>(\r\n                ''Error reading date. Unexpected token: StartConstructor. Path '', line 1, position 9.'',\r\n                () => { reader.ReadAsDateTimeOffset(); })", span="1680-1682"];
m2_1020 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetBadContent()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetBadContent()", span="1676-1676"];
m2_107 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadString(string)", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadString(string)", span="265-265"];
m2_108 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadString(string)", file="JsonSchema.cs", label="MemoryStream ms = new MemoryStream(Encoding.UTF8.GetBytes(@'''''''' + input + @''''''''))", span="267-267"];
m2_109 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadString(string)", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(new StreamReader(ms))", span="269-269"];
m2_110 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadString(string)", file="JsonSchema.cs", label="reader.Read()", span="270-270"];
m2_111 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadString(string)", file="JsonSchema.cs", label="string s = (string)reader.Value", span="272-272"];
m2_112 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadString(string)", file="JsonSchema.cs", label="return s;", span="274-274"];
m2_113 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadString(string)", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadString(string)", span="265-265"];
m2_1253 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimal()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimal()", span="2033-2033"];
m2_1254 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimal()", file="JsonSchema.cs", label="string json = @''{''''decimal'''':-7.92281625142643E+28}''", span="2035-2035"];
m2_1255 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimal()", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="2037-2037"];
m2_1256 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimal()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2039-2039"];
m2_1257 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimal()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="2040-2040"];
m2_1258 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimal()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2042-2042"];
m2_1259 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimal()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="2043-2043"];
m2_1260 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimal()", file="JsonSchema.cs", label="decimal? d = reader.ReadAsDecimal()", span="2045-2045"];
m2_1261 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimal()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Float, reader.TokenType)", span="2046-2046"];
m2_1262 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimal()", file="JsonSchema.cs", label="Assert.AreEqual(typeof(decimal), reader.ValueType)", span="2047-2047"];
m2_1264 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimal()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2050-2050"];
m2_1265 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimal()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.EndObject, reader.TokenType)", span="2051-2051"];
m2_1263 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimal()", file="JsonSchema.cs", label="Assert.AreEqual(-79228162514264300000000000000m, d)", span="2048-2048"];
m2_1266 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimal()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimal()", span="2033-2033"];
m2_725 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", span="1251-1251"];
m2_726 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="JsonSchema.cs", label="StringBuilder sb = new StringBuilder()", span="1253-1253"];
m2_727 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="JsonSchema.cs", label="StringWriter sw = new StringWriter(sb)", span="1254-1254"];
m2_753 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="JsonSchema.cs", label="string json = sb.ToString()", span="1293-1293"];
m2_728 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="JsonSchema.cs", label="JsonWriter jsonWriter = new JsonTextWriter(sw)\r\n            {\r\n                Formatting = Formatting.Indented\r\n            }", span="1256-1259"];
m2_729 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="JsonSchema.cs", label="jsonWriter.WriteStartArray()", span="1261-1261"];
m2_730 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="JsonSchema.cs", label="jsonWriter.WriteValue(true)", span="1262-1262"];
m2_731 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="JsonSchema.cs", label="jsonWriter.WriteStartObject()", span="1264-1264"];
m2_732 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="JsonSchema.cs", label="jsonWriter.WritePropertyName(''integer'')", span="1265-1265"];
m2_733 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="JsonSchema.cs", label="jsonWriter.WriteValue(99)", span="1266-1266"];
m2_734 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="JsonSchema.cs", label="jsonWriter.WritePropertyName(''string'')", span="1267-1267"];
m2_735 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="JsonSchema.cs", label="jsonWriter.WriteValue(''how now brown cow?'')", span="1268-1268"];
m2_736 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="JsonSchema.cs", label="jsonWriter.WritePropertyName(''array'')", span="1269-1269"];
m2_737 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="JsonSchema.cs", label="jsonWriter.WriteStartArray()", span="1271-1271"];
m2_740 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="JsonSchema.cs", label="jsonWriter.WriteValue(i)", span="1274-1274"];
m2_742 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="JsonSchema.cs", label="jsonWriter.WriteStartObject()", span="1277-1277"];
m2_743 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="JsonSchema.cs", label="jsonWriter.WritePropertyName(''decimal'')", span="1278-1278"];
m2_744 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="JsonSchema.cs", label="jsonWriter.WriteValue(990.00990099m)", span="1279-1279"];
m2_745 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="JsonSchema.cs", label="jsonWriter.WriteEndObject()", span="1280-1280"];
m2_746 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="JsonSchema.cs", label="jsonWriter.WriteValue(5)", span="1282-1282"];
m2_747 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="JsonSchema.cs", label="jsonWriter.WriteEndArray()", span="1283-1283"];
m2_748 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="JsonSchema.cs", label="jsonWriter.WriteEndObject()", span="1285-1285"];
m2_749 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="JsonSchema.cs", label="jsonWriter.WriteValue(''This is a string.'')", span="1287-1287"];
m2_750 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="JsonSchema.cs", label="jsonWriter.WriteNull()", span="1288-1288"];
m2_751 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="JsonSchema.cs", label="jsonWriter.WriteNull()", span="1289-1289"];
m2_752 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="JsonSchema.cs", label="jsonWriter.WriteEndArray()", span="1290-1290"];
m2_738 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="JsonSchema.cs", label="int i = 0", span="1272-1272"];
m2_739 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="JsonSchema.cs", label="i < 5", span="1272-1272"];
m2_741 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="JsonSchema.cs", label="i++", span="1272-1272"];
m2_754 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="JsonSchema.cs", label="JsonSerializer serializer = new JsonSerializer()", span="1295-1295"];
m2_755 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="JsonSchema.cs", label="object jsonObject = serializer.Deserialize(new JsonTextReader(new StringReader(json)))", span="1297-1297"];
m2_760 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="JsonSchema.cs", label="Assert.AreEqual(json, sb.ToString())", span="1310-1310"];
m2_759 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="JsonSchema.cs", label="serializer.Serialize(jsonWriter, jsonObject)", span="1307-1307"];
m2_756 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="JsonSchema.cs", label="sb = new StringBuilder()", span="1299-1299"];
m2_757 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="JsonSchema.cs", label="sw = new StringWriter(sb)", span="1300-1300"];
m2_758 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="JsonSchema.cs", label="JsonWriter jsonWriter = new JsonTextWriter(sw)\r\n            {\r\n                Formatting = Formatting.Indented\r\n            }", span="1302-1305"];
m2_761 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadWrite()", span="1251-1251"];
m2_1418 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIncompleteCommentSeperator()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIncompleteCommentSeperator()", span="2316-2316"];
m2_1419 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIncompleteCommentSeperator()", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(''true/''))", span="2318-2318"];
m2_1420 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIncompleteCommentSeperator()", file="JsonSchema.cs", label="ExceptionAssert.Throws<JsonReaderException>(\r\n                ''Error parsing boolean value. Path '', line 1, position 4.'',\r\n                () => { reader.Read(); })", span="2320-2322"];
m2_1421 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIncompleteCommentSeperator()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ParseIncompleteCommentSeperator()", span="2316-2316"];
m2_129 [cluster="System.IO.MemoryStream.MemoryStream()", file="JsonSchema.cs", label="Entry System.IO.MemoryStream.MemoryStream()", span="0-0"];
m2_1797 [cluster="System.IO.TextReader.Read(char[], int, int)", file="JsonSchema.cs", label="Entry System.IO.TextReader.Read(char[], int, int)", span="0-0"];
m2_1634 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", span="2651-2651"];
m2_1635 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="JsonSchema.cs", label="string json = ''[false, true, true, false, 'test!', 1.11, 0e-10, 0E-10, 0.25e-5, 0.3e10, 6.0221418e23, 'Purple\\r \\n monkey\\'s:\\tdishwasher']''", span="2653-2653"];
m2_1636 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(new StreamReader(new SlowStream(json, new UTF8Encoding(false), 1)))", span="2655-2655"];
m2_1637 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2657-2657"];
m2_1638 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2659-2659"];
m2_1639 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="JsonSchema.cs", label="Assert.AreEqual(false, reader.Value)", span="2660-2660"];
m2_1640 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2662-2662"];
m2_1641 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Boolean, reader.TokenType)", span="2663-2663"];
m2_1642 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="JsonSchema.cs", label="Assert.AreEqual(true, reader.Value)", span="2664-2664"];
m2_1643 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2666-2666"];
m2_1644 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Boolean, reader.TokenType)", span="2667-2667"];
m2_1645 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="JsonSchema.cs", label="Assert.AreEqual(true, reader.Value)", span="2668-2668"];
m2_1646 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2670-2670"];
m2_1647 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Boolean, reader.TokenType)", span="2671-2671"];
m2_1648 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="JsonSchema.cs", label="Assert.AreEqual(false, reader.Value)", span="2672-2672"];
m2_1649 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2674-2674"];
m2_1650 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.String, reader.TokenType)", span="2675-2675"];
m2_1651 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="JsonSchema.cs", label="Assert.AreEqual(''test!'', reader.Value)", span="2676-2676"];
m2_1652 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2678-2678"];
m2_1653 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Float, reader.TokenType)", span="2679-2679"];
m2_1654 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="JsonSchema.cs", label="Assert.AreEqual(1.11d, reader.Value)", span="2680-2680"];
m2_1655 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2682-2682"];
m2_1656 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Float, reader.TokenType)", span="2683-2683"];
m2_1657 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="JsonSchema.cs", label="Assert.AreEqual(0d, reader.Value)", span="2684-2684"];
m2_1658 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2686-2686"];
m2_1659 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Float, reader.TokenType)", span="2687-2687"];
m2_1660 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="JsonSchema.cs", label="Assert.AreEqual(0d, reader.Value)", span="2688-2688"];
m2_1661 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2690-2690"];
m2_1662 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Float, reader.TokenType)", span="2691-2691"];
m2_1663 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="JsonSchema.cs", label="Assert.AreEqual(0.0000025d, reader.Value)", span="2692-2692"];
m2_1664 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2694-2694"];
m2_1665 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Float, reader.TokenType)", span="2695-2695"];
m2_1666 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="JsonSchema.cs", label="Assert.AreEqual(3000000000d, reader.Value)", span="2696-2696"];
m2_1667 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2698-2698"];
m2_1668 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Float, reader.TokenType)", span="2699-2699"];
m2_1669 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="JsonSchema.cs", label="Assert.AreEqual(602214180000000000000000d, reader.Value)", span="2700-2700"];
m2_1670 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2702-2702"];
m2_1671 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.String, reader.TokenType)", span="2703-2703"];
m2_1672 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="JsonSchema.cs", label="Assert.AreEqual(reader.Value, ''Purple\r \n monkey's:\tdishwasher'')", span="2704-2704"];
m2_1673 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2706-2706"];
m2_1674 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingFromSlowStream()", span="2651-2651"];
m2_47 [cluster="System.Convert.ToDecimal(double)", file="JsonSchema.cs", label="Entry System.Convert.ToDecimal(double)", span="0-0"];
m2_1304 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseNullStringConstructor()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ParseNullStringConstructor()", span="2138-2138"];
m2_1305 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseNullStringConstructor()", file="JsonSchema.cs", label="string json = ''new Date\0()''", span="2140-2140"];
m2_1306 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseNullStringConstructor()", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="2141-2141"];
m2_1307 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseNullStringConstructor()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2146-2146"];
m2_1308 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseNullStringConstructor()", file="JsonSchema.cs", label="Assert.AreEqual(''Date'', reader.Value)", span="2147-2147"];
m2_1309 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseNullStringConstructor()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.StartConstructor, reader.TokenType)", span="2148-2148"];
m2_1310 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseNullStringConstructor()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2150-2150"];
m2_1311 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseNullStringConstructor()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.EndConstructor, reader.TokenType)", span="2151-2151"];
m2_1312 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseNullStringConstructor()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ParseNullStringConstructor()", span="2138-2138"];
m2_1225 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MatchWithWrongCharacters()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.MatchWithWrongCharacters()", span="1993-1993"];
m2_1226 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MatchWithWrongCharacters()", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(@''nulz''))", span="1995-1995"];
m2_1227 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MatchWithWrongCharacters()", file="JsonSchema.cs", label="ExceptionAssert.Throws<JsonReaderException>(\r\n                ''Error parsing null value. Path '', line 0, position 0.'',\r\n                () => { reader.Read(); })", span="1997-1999"];
m2_1228 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MatchWithWrongCharacters()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.MatchWithWrongCharacters()", span="1993-1993"];
m2_508 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNullTerminatorStrings()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNullTerminatorStrings()", span="910-910"];
m2_509 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNullTerminatorStrings()", file="JsonSchema.cs", label="JsonReader reader = new JsonTextReader(new StringReader('''h\0i'''))", span="912-912"];
m2_510 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNullTerminatorStrings()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="913-913"];
m2_511 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNullTerminatorStrings()", file="JsonSchema.cs", label="Assert.AreEqual(''h\0i'', reader.Value)", span="915-915"];
m2_512 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNullTerminatorStrings()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNullTerminatorStrings()", span="910-910"];
m2_167 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Text()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Text()", span="376-376"];
m2_168 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Text()", file="JsonSchema.cs", label="string json = @''[\r\n''''Small'''',\r\n''''Medium'''',\r\n''''Large''''\r\n]content''", span="378-382"];
m2_169 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Text()", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="384-384"];
m2_170 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Text()", file="JsonSchema.cs", label="reader.Read()", span="389-389"];
m2_171 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Text()", file="JsonSchema.cs", label="Assert.AreEqual(1, reader.LineNumber)", span="390-390"];
m2_172 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Text()", file="JsonSchema.cs", label="reader.Read()", span="392-392"];
m2_173 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Text()", file="JsonSchema.cs", label="Assert.AreEqual(2, reader.LineNumber)", span="393-393"];
m2_174 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Text()", file="JsonSchema.cs", label="reader.Read()", span="395-395"];
m2_175 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Text()", file="JsonSchema.cs", label="Assert.AreEqual(3, reader.LineNumber)", span="396-396"];
m2_176 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Text()", file="JsonSchema.cs", label="reader.Read()", span="398-398"];
m2_177 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Text()", file="JsonSchema.cs", label="Assert.AreEqual(4, reader.LineNumber)", span="399-399"];
m2_178 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Text()", file="JsonSchema.cs", label="reader.Read()", span="401-401"];
m2_179 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Text()", file="JsonSchema.cs", label="Assert.AreEqual(5, reader.LineNumber)", span="402-402"];
m2_180 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Text()", file="JsonSchema.cs", label="ExceptionAssert.Throws<JsonReaderException>(\r\n                ''Additional text encountered after finished reading JSON content: c. Path '', line 5, position 2.'',\r\n                () => { reader.Read(); })", span="404-406"];
m2_181 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Text()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_Text()", span="376-376"];
m2_772 [cluster="Newtonsoft.Json.JsonWriter.WriteNull()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.JsonWriter.WriteNull()", span="772-772"];
m2_810 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.EscapedUnicodeText()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.EscapedUnicodeText()", span="1370-1370"];
m2_811 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.EscapedUnicodeText()", file="JsonSchema.cs", label="string json = @''[''''\u003c'''',''''\u5f20'''']''", span="1372-1372"];
m2_812 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.EscapedUnicodeText()", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="1374-1374"];
m2_813 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.EscapedUnicodeText()", file="JsonSchema.cs", label="reader.Read()", span="1379-1379"];
m2_814 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.EscapedUnicodeText()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.StartArray, reader.TokenType)", span="1380-1380"];
m2_815 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.EscapedUnicodeText()", file="JsonSchema.cs", label="reader.Read()", span="1382-1382"];
m2_816 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.EscapedUnicodeText()", file="JsonSchema.cs", label="Assert.AreEqual(''<'', reader.Value)", span="1383-1383"];
m2_817 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.EscapedUnicodeText()", file="JsonSchema.cs", label="reader.Read()", span="1385-1385"];
m2_818 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.EscapedUnicodeText()", file="JsonSchema.cs", label="Assert.AreEqual(24352, Convert.ToInt32(Convert.ToChar((string)reader.Value)))", span="1386-1386"];
m2_819 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.EscapedUnicodeText()", file="JsonSchema.cs", label="reader.Read()", span="1388-1388"];
m2_820 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.EscapedUnicodeText()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.EndArray, reader.TokenType)", span="1389-1389"];
m2_821 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.EscapedUnicodeText()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.EscapedUnicodeText()", span="1370-1370"];
m2_250 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", span="523-523"];
m2_251 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="string input = @''{\r\n  value:'Purple',\r\n  array:[1,2,new Date(1)],\r\n  subobject:{prop:1,proparray:[1]}\r\n}''", span="525-529"];
m2_252 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="StringReader sr = new StringReader(input)", span="531-531"];
m2_253 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="JsonReader reader = new JsonTextReader(sr)", span="533-533"];
m2_254 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="Assert.AreEqual(0, reader.Depth)", span="535-535"];
m2_255 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="reader.Read()", span="537-537"];
m2_256 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="Assert.AreEqual(reader.TokenType, JsonToken.StartObject)", span="538-538"];
m2_257 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="Assert.AreEqual(0, reader.Depth)", span="539-539"];
m2_258 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="Assert.AreEqual('''', reader.Path)", span="540-540"];
m2_259 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="reader.Read()", span="542-542"];
m2_260 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="Assert.AreEqual(reader.TokenType, JsonToken.PropertyName)", span="543-543"];
m2_261 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="Assert.AreEqual(1, reader.Depth)", span="544-544"];
m2_262 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="Assert.AreEqual(''value'', reader.Path)", span="545-545"];
m2_263 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="reader.Read()", span="547-547"];
m2_264 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="Assert.AreEqual(reader.TokenType, JsonToken.String)", span="548-548"];
m2_265 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="Assert.AreEqual(reader.Value, @''Purple'')", span="549-549"];
m2_266 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="Assert.AreEqual(reader.QuoteChar, '\'')", span="550-550"];
m2_267 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="Assert.AreEqual(1, reader.Depth)", span="551-551"];
m2_268 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="Assert.AreEqual(''value'', reader.Path)", span="552-552"];
m2_269 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="reader.Read()", span="554-554"];
m2_270 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="Assert.AreEqual(reader.TokenType, JsonToken.PropertyName)", span="555-555"];
m2_271 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="Assert.AreEqual(1, reader.Depth)", span="556-556"];
m2_272 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="Assert.AreEqual(''array'', reader.Path)", span="557-557"];
m2_273 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="reader.Read()", span="559-559"];
m2_274 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="Assert.AreEqual(reader.TokenType, JsonToken.StartArray)", span="560-560"];
m2_275 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="Assert.AreEqual(1, reader.Depth)", span="561-561"];
m2_276 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="Assert.AreEqual(''array'', reader.Path)", span="562-562"];
m2_277 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="reader.Read()", span="564-564"];
m2_278 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="Assert.AreEqual(reader.TokenType, JsonToken.Integer)", span="565-565"];
m2_279 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="Assert.AreEqual(1L, reader.Value)", span="566-566"];
m2_280 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="Assert.AreEqual(2, reader.Depth)", span="567-567"];
m2_281 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="Assert.AreEqual(''array[0]'', reader.Path)", span="568-568"];
m2_282 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="reader.Read()", span="570-570"];
m2_283 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="Assert.AreEqual(reader.TokenType, JsonToken.Integer)", span="571-571"];
m2_284 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="Assert.AreEqual(2L, reader.Value)", span="572-572"];
m2_285 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="Assert.AreEqual(2, reader.Depth)", span="573-573"];
m2_286 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="Assert.AreEqual(''array[1]'', reader.Path)", span="574-574"];
m2_287 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="reader.Read()", span="576-576"];
m2_288 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="Assert.AreEqual(reader.TokenType, JsonToken.StartConstructor)", span="577-577"];
m2_289 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="Assert.AreEqual(''Date'', reader.Value)", span="578-578"];
m2_290 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="Assert.AreEqual(2, reader.Depth)", span="579-579"];
m2_291 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="Assert.AreEqual(''array[2]'', reader.Path)", span="580-580"];
m2_292 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="reader.Read()", span="582-582"];
m2_293 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="Assert.AreEqual(reader.TokenType, JsonToken.Integer)", span="583-583"];
m2_294 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="Assert.AreEqual(1L, reader.Value)", span="584-584"];
m2_295 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="Assert.AreEqual(3, reader.Depth)", span="585-585"];
m2_296 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="Assert.AreEqual(''array[2][0]'', reader.Path)", span="586-586"];
m2_297 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="reader.Read()", span="588-588"];
m2_298 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="Assert.AreEqual(reader.TokenType, JsonToken.EndConstructor)", span="589-589"];
m2_299 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="Assert.AreEqual(null, reader.Value)", span="590-590"];
m2_300 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="Assert.AreEqual(2, reader.Depth)", span="591-591"];
m2_301 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="Assert.AreEqual(''array[2]'', reader.Path)", span="592-592"];
m2_302 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="reader.Read()", span="594-594"];
m2_303 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="Assert.AreEqual(reader.TokenType, JsonToken.EndArray)", span="595-595"];
m2_304 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="Assert.AreEqual(1, reader.Depth)", span="596-596"];
m2_305 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="Assert.AreEqual(''array'', reader.Path)", span="597-597"];
m2_306 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="reader.Read()", span="599-599"];
m2_307 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="Assert.AreEqual(reader.TokenType, JsonToken.PropertyName)", span="600-600"];
m2_308 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="Assert.AreEqual(1, reader.Depth)", span="601-601"];
m2_309 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="Assert.AreEqual(''subobject'', reader.Path)", span="602-602"];
m2_310 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="reader.Read()", span="604-604"];
m2_311 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="Assert.AreEqual(reader.TokenType, JsonToken.StartObject)", span="605-605"];
m2_312 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="Assert.AreEqual(1, reader.Depth)", span="606-606"];
m2_313 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="Assert.AreEqual(''subobject'', reader.Path)", span="607-607"];
m2_314 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="reader.Read()", span="609-609"];
m2_315 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="Assert.AreEqual(reader.TokenType, JsonToken.PropertyName)", span="610-610"];
m2_316 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="Assert.AreEqual(2, reader.Depth)", span="611-611"];
m2_317 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="Assert.AreEqual(''subobject.prop'', reader.Path)", span="612-612"];
m2_318 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="reader.Read()", span="614-614"];
m2_319 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="Assert.AreEqual(reader.TokenType, JsonToken.Integer)", span="615-615"];
m2_320 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="Assert.AreEqual(2, reader.Depth)", span="616-616"];
m2_321 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="Assert.AreEqual(''subobject.prop'', reader.Path)", span="617-617"];
m2_322 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="reader.Read()", span="619-619"];
m2_323 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="Assert.AreEqual(reader.TokenType, JsonToken.PropertyName)", span="620-620"];
m2_324 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="Assert.AreEqual(2, reader.Depth)", span="621-621"];
m2_325 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="Assert.AreEqual(''subobject.proparray'', reader.Path)", span="622-622"];
m2_326 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="reader.Read()", span="624-624"];
m2_327 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="Assert.AreEqual(reader.TokenType, JsonToken.StartArray)", span="625-625"];
m2_328 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="Assert.AreEqual(2, reader.Depth)", span="626-626"];
m2_329 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="Assert.AreEqual(''subobject.proparray'', reader.Path)", span="627-627"];
m2_330 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="reader.Read()", span="629-629"];
m2_331 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="Assert.AreEqual(reader.TokenType, JsonToken.Integer)", span="630-630"];
m2_332 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="Assert.AreEqual(3, reader.Depth)", span="631-631"];
m2_333 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="Assert.AreEqual(''subobject.proparray[0]'', reader.Path)", span="632-632"];
m2_334 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="reader.Read()", span="634-634"];
m2_335 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="Assert.AreEqual(reader.TokenType, JsonToken.EndArray)", span="635-635"];
m2_336 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="Assert.AreEqual(2, reader.Depth)", span="636-636"];
m2_337 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="Assert.AreEqual(''subobject.proparray'', reader.Path)", span="637-637"];
m2_338 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="reader.Read()", span="639-639"];
m2_339 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="Assert.AreEqual(reader.TokenType, JsonToken.EndObject)", span="640-640"];
m2_340 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="Assert.AreEqual(1, reader.Depth)", span="641-641"];
m2_341 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="Assert.AreEqual(''subobject'', reader.Path)", span="642-642"];
m2_342 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="reader.Read()", span="644-644"];
m2_343 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="Assert.AreEqual(reader.TokenType, JsonToken.EndObject)", span="645-645"];
m2_344 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="Assert.AreEqual(0, reader.Depth)", span="646-646"];
m2_345 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="Assert.AreEqual('''', reader.Path)", span="647-647"];
m2_346 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.Depth()", span="523-523"];
m2_13 [cluster="Newtonsoft.Json.JsonTextReader.JsonTextReader(System.IO.TextReader)", file="JsonSchema.cs", label="Entry Newtonsoft.Json.JsonTextReader.JsonTextReader(System.IO.TextReader)", span="73-73"];
m2_535 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesWithUnexpectedEnd()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesWithUnexpectedEnd()", span="949-949"];
m2_536 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesWithUnexpectedEnd()", file="JsonSchema.cs", label="string helloWorld = ''Hello world!''", span="951-951"];
m2_537 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesWithUnexpectedEnd()", file="JsonSchema.cs", label="byte[] helloWorldData = Encoding.UTF8.GetBytes(helloWorld)", span="952-952"];
m2_538 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesWithUnexpectedEnd()", file="JsonSchema.cs", label="JsonReader reader = new JsonTextReader(new StringReader(@''''' + Convert.ToBase64String(helloWorldData)))", span="954-954"];
m2_539 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesWithUnexpectedEnd()", file="JsonSchema.cs", label="ExceptionAssert.Throws<JsonReaderException>(\r\n                ''Unterminated string. Expected delimiter: '. Path '', line 1, position 17.'',\r\n                () => { reader.ReadAsBytes(); })", span="956-958"];
m2_540 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesWithUnexpectedEnd()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesWithUnexpectedEnd()", span="949-949"];
m2_1425 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyConstructor()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyConstructor()", span="2326-2326"];
m2_1426 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyConstructor()", file="JsonSchema.cs", label="string json = ''new Date()''", span="2328-2328"];
m2_1427 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyConstructor()", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="2329-2329"];
m2_1428 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyConstructor()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2331-2331"];
m2_1429 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyConstructor()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.StartConstructor, reader.TokenType)", span="2332-2332"];
m2_1430 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyConstructor()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2334-2334"];
m2_1431 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyConstructor()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.EndConstructor, reader.TokenType)", span="2335-2335"];
m2_1432 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyConstructor()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyConstructor()", span="2326-2326"];
m2_468 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt64Overflow()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt64Overflow()", span="836-836"];
m2_469 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt64Overflow()", file="JsonSchema.cs", label="BigInteger i = new BigInteger(long.MaxValue)", span="838-838"];
m2_470 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt64Overflow()", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(i.ToString(CultureInfo.InvariantCulture)))", span="840-840"];
m2_475 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt64Overflow()", file="JsonSchema.cs", label="BigInteger total = i + j", span="846-846"];
m2_471 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt64Overflow()", file="JsonSchema.cs", label="reader.Read()", span="841-841"];
m2_472 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt64Overflow()", file="JsonSchema.cs", label="Assert.AreEqual(typeof(long), reader.ValueType)", span="842-842"];
m2_473 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt64Overflow()", file="JsonSchema.cs", label="int j = 1", span="844-844"];
m2_474 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt64Overflow()", file="JsonSchema.cs", label="j < 1000", span="844-844"];
m2_479 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt64Overflow()", file="JsonSchema.cs", label="j++", span="844-844"];
m2_476 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt64Overflow()", file="JsonSchema.cs", label="reader = new JsonTextReader(new StringReader(total.ToString(CultureInfo.InvariantCulture)))", span="848-848"];
m2_477 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt64Overflow()", file="JsonSchema.cs", label="reader.Read()", span="849-849"];
m2_478 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt64Overflow()", file="JsonSchema.cs", label="Assert.AreEqual(typeof(BigInteger), reader.ValueType)", span="851-851"];
m2_480 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt64Overflow()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt64Overflow()", span="836-836"];
m2_1073 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffset()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffset()", span="1767-1767"];
m2_1074 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffset()", file="JsonSchema.cs", label="string json = ''{\''Offset\'':\''\\/Date(946663200000+0600)\\/\''}''", span="1769-1769"];
m2_1075 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffset()", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="1771-1771"];
m2_1076 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffset()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="1773-1773"];
m2_1077 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffset()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="1774-1774"];
m2_1078 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffset()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="1776-1776"];
m2_1079 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffset()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="1777-1777"];
m2_1080 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffset()", file="JsonSchema.cs", label="reader.ReadAsDateTimeOffset()", span="1779-1779"];
m2_1081 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffset()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Date, reader.TokenType)", span="1780-1780"];
m2_1082 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffset()", file="JsonSchema.cs", label="Assert.AreEqual(typeof(DateTimeOffset), reader.ValueType)", span="1781-1781"];
m2_1083 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffset()", file="JsonSchema.cs", label="Assert.AreEqual(new DateTimeOffset(new DateTime(2000, 1, 1), TimeSpan.FromHours(6)), reader.Value)", span="1782-1782"];
m2_1084 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffset()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="1784-1784"];
m2_1085 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffset()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.EndObject, reader.TokenType)", span="1785-1785"];
m2_1086 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffset()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffset()", span="1767-1767"];
m2_651 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingEscapedStrings()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingEscapedStrings()", span="1133-1133"];
m2_652 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingEscapedStrings()", file="JsonSchema.cs", label="string input = ''{value:'Purple\\r \\n monkey\\'s:\\tdishwasher'}''", span="1135-1135"];
m2_653 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingEscapedStrings()", file="JsonSchema.cs", label="StringReader sr = new StringReader(input)", span="1137-1137"];
m2_654 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingEscapedStrings()", file="JsonSchema.cs", label="JsonReader jsonReader = new JsonTextReader(sr)", span="1139-1139"];
m2_655 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingEscapedStrings()", file="JsonSchema.cs", label="Assert.AreEqual(0, jsonReader.Depth)", span="1141-1141"];
m2_656 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingEscapedStrings()", file="JsonSchema.cs", label="jsonReader.Read()", span="1143-1143"];
m2_657 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingEscapedStrings()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.StartObject, jsonReader.TokenType)", span="1144-1144"];
m2_658 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingEscapedStrings()", file="JsonSchema.cs", label="Assert.AreEqual(0, jsonReader.Depth)", span="1145-1145"];
m2_659 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingEscapedStrings()", file="JsonSchema.cs", label="jsonReader.Read()", span="1147-1147"];
m2_660 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingEscapedStrings()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.PropertyName, jsonReader.TokenType)", span="1148-1148"];
m2_661 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingEscapedStrings()", file="JsonSchema.cs", label="Assert.AreEqual(1, jsonReader.Depth)", span="1149-1149"];
m2_662 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingEscapedStrings()", file="JsonSchema.cs", label="jsonReader.Read()", span="1151-1151"];
m2_663 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingEscapedStrings()", file="JsonSchema.cs", label="Assert.AreEqual(jsonReader.TokenType, JsonToken.String)", span="1152-1152"];
m2_664 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingEscapedStrings()", file="JsonSchema.cs", label="Assert.AreEqual(''Purple\r \n monkey's:\tdishwasher'', jsonReader.Value)", span="1153-1153"];
m2_665 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingEscapedStrings()", file="JsonSchema.cs", label="Assert.AreEqual('\'', jsonReader.QuoteChar)", span="1154-1154"];
m2_666 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingEscapedStrings()", file="JsonSchema.cs", label="Assert.AreEqual(1, jsonReader.Depth)", span="1155-1155"];
m2_667 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingEscapedStrings()", file="JsonSchema.cs", label="jsonReader.Read()", span="1157-1157"];
m2_668 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingEscapedStrings()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.EndObject, jsonReader.TokenType)", span="1158-1158"];
m2_669 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingEscapedStrings()", file="JsonSchema.cs", label="Assert.AreEqual(0, jsonReader.Depth)", span="1159-1159"];
m2_670 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingEscapedStrings()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadingEscapedStrings()", span="1133-1133"];
m2_1511 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseHexNumber()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ParseHexNumber()", span="2463-2463"];
m2_1512 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseHexNumber()", file="JsonSchema.cs", label="string json = @''0x20''", span="2465-2465"];
m2_1513 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseHexNumber()", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="2467-2467"];
m2_1514 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseHexNumber()", file="JsonSchema.cs", label="reader.ReadAsDecimal()", span="2469-2469"];
m2_1515 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseHexNumber()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Float, reader.TokenType)", span="2470-2470"];
m2_1516 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseHexNumber()", file="JsonSchema.cs", label="Assert.AreEqual(32m, reader.Value)", span="2471-2471"];
m2_1517 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseHexNumber()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ParseHexNumber()", span="2463-2463"];
m2_452 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt32Overflow_Negative()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt32Overflow_Negative()", span="812-812"];
m2_453 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt32Overflow_Negative()", file="JsonSchema.cs", label="long i = int.MinValue", span="814-814"];
m2_454 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt32Overflow_Negative()", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(i.ToString(CultureInfo.InvariantCulture)))", span="816-816"];
m2_457 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt32Overflow_Negative()", file="JsonSchema.cs", label="Assert.AreEqual(i, reader.Value)", span="819-819"];
m2_460 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt32Overflow_Negative()", file="JsonSchema.cs", label="long total = -j + i", span="823-823"];
m2_455 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt32Overflow_Negative()", file="JsonSchema.cs", label="reader.Read()", span="817-817"];
m2_456 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt32Overflow_Negative()", file="JsonSchema.cs", label="Assert.AreEqual(typeof(long), reader.ValueType)", span="818-818"];
m2_461 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt32Overflow_Negative()", file="JsonSchema.cs", label="ExceptionAssert.Throws<OverflowException>(\r\n                    ''Arithmetic operation resulted in an overflow.'',\r\n                    () =>\r\n                    {\r\n                        reader = new JsonTextReader(new StringReader(total.ToString(CultureInfo.InvariantCulture)));\r\n                        reader.ReadAsInt32();\r\n                    })", span="824-830"];
m2_458 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt32Overflow_Negative()", file="JsonSchema.cs", label="int j = 1", span="821-821"];
m2_459 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt32Overflow_Negative()", file="JsonSchema.cs", label="j < 1000", span="821-821"];
m2_462 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt32Overflow_Negative()", file="JsonSchema.cs", label="j++", span="821-821"];
m2_463 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt32Overflow_Negative()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt32Overflow_Negative()", span="812-812"];
m2_1791 [cluster="Newtonsoft.Json.Tests.ToggleReaderError.Read(char[], int, int)", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.ToggleReaderError.Read(char[], int, int)", span="2870-2870"];
m2_1792 [cluster="Newtonsoft.Json.Tests.ToggleReaderError.Read(char[], int, int)", file="JsonSchema.cs", label=Error, span="2872-2872"];
m2_1794 [cluster="Newtonsoft.Json.Tests.ToggleReaderError.Read(char[], int, int)", file="JsonSchema.cs", label="return _inner.Read(buffer, index, 1);", span="2875-2875"];
m2_1793 [cluster="Newtonsoft.Json.Tests.ToggleReaderError.Read(char[], int, int)", file="JsonSchema.cs", label="throw new Exception(''Read error'');", span="2873-2873"];
m2_1795 [cluster="Newtonsoft.Json.Tests.ToggleReaderError.Read(char[], int, int)", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.ToggleReaderError.Read(char[], int, int)", span="2870-2870"];
m2_765 [cluster="Newtonsoft.Json.JsonWriter.WriteValue(bool)", file="JsonSchema.cs", label="Entry Newtonsoft.Json.JsonWriter.WriteValue(bool)", span="875-875"];
m2_1438 [cluster="Unk.>", file="JsonSchema.cs", label="Entry Unk.>", span=""];
m2_605 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParsingQuotedPropertyWithControlCharacters()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ParsingQuotedPropertyWithControlCharacters()", span="1074-1074"];
m2_606 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParsingQuotedPropertyWithControlCharacters()", file="JsonSchema.cs", label="JsonReader reader = new JsonTextReader(new StringReader(@''{'hi\r\nbye':1}''))", span="1076-1076"];
m2_607 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParsingQuotedPropertyWithControlCharacters()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="1077-1077"];
m2_608 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParsingQuotedPropertyWithControlCharacters()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="1078-1078"];
m2_609 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParsingQuotedPropertyWithControlCharacters()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="1079-1079"];
m2_610 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParsingQuotedPropertyWithControlCharacters()", file="JsonSchema.cs", label="Assert.AreEqual(@''hi\r\nbye'', reader.Value)", span="1080-1081"];
m2_611 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParsingQuotedPropertyWithControlCharacters()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="1082-1082"];
m2_612 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParsingQuotedPropertyWithControlCharacters()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Integer, reader.TokenType)", span="1083-1083"];
m2_613 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParsingQuotedPropertyWithControlCharacters()", file="JsonSchema.cs", label="Assert.AreEqual(1L, reader.Value)", span="1084-1084"];
m2_614 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParsingQuotedPropertyWithControlCharacters()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="1085-1085"];
m2_615 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParsingQuotedPropertyWithControlCharacters()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.EndObject, reader.TokenType)", span="1086-1086"];
m2_616 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParsingQuotedPropertyWithControlCharacters()", file="JsonSchema.cs", label="Assert.IsFalse(reader.Read())", span="1087-1087"];
m2_617 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParsingQuotedPropertyWithControlCharacters()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ParsingQuotedPropertyWithControlCharacters()", span="1074-1074"];
m2_1232 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MatchWithNoTrailingSeperator()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.MatchWithNoTrailingSeperator()", span="2003-2003"];
m2_1233 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MatchWithNoTrailingSeperator()", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(@''nullz''))", span="2005-2005"];
m2_1234 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MatchWithNoTrailingSeperator()", file="JsonSchema.cs", label="ExceptionAssert.Throws<JsonReaderException>(\r\n                ''Error parsing null value. Path '', line 1, position 4.'',\r\n                () => { reader.Read(); })", span="2007-2009"];
m2_1235 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MatchWithNoTrailingSeperator()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.MatchWithNoTrailingSeperator()", span="2003-2003"];
m2_1402 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyArray()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyArray()", span="2290-2290"];
m2_1403 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyArray()", file="JsonSchema.cs", label="string json = ''[]''", span="2292-2292"];
m2_1404 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyArray()", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="2293-2293"];
m2_1405 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyArray()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2295-2295"];
m2_1406 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyArray()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.StartArray, reader.TokenType)", span="2296-2296"];
m2_1407 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyArray()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2298-2298"];
m2_1408 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyArray()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.EndArray, reader.TokenType)", span="2299-2299"];
m2_1409 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyArray()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyArray()", span="2290-2290"];
m2_1386 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseConstructorWithUnexpectedCharacter()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ParseConstructorWithUnexpectedCharacter()", span="2267-2267"];
m2_1387 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseConstructorWithUnexpectedCharacter()", file="JsonSchema.cs", label="string json = ''new Date !''", span="2269-2269"];
m2_1388 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseConstructorWithUnexpectedCharacter()", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="2270-2270"];
m2_1389 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseConstructorWithUnexpectedCharacter()", file="JsonSchema.cs", label="ExceptionAssert.Throws<JsonReaderException>(\r\n                ''Unexpected character while parsing constructor: !. Path '', line 1, position 9.'',\r\n                () => { reader.Read(); })", span="2272-2274"];
m2_1390 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseConstructorWithUnexpectedCharacter()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ParseConstructorWithUnexpectedCharacter()", span="2267-2267"];
m2_157 [cluster="Newtonsoft.Json.Tests.SlowStream.SlowStream(string, System.Text.Encoding, int)", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.SlowStream.SlowStream(string, System.Text.Encoding, int)", span="2892-2892"];
m2_1803 [cluster="Newtonsoft.Json.Tests.SlowStream.SlowStream(string, System.Text.Encoding, int)", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.SlowStream.SlowStream(string, System.Text.Encoding, int)", span="2892-2892"];
m2_425 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNull()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNull()", span="754-754"];
m2_426 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNull()", file="JsonSchema.cs", label="string json = @''[\r\n  {\r\n    ''''$id'''': ''''1'''',\r\n    ''''Name'''': ''''e1'''',\r\n    ''''Manager'''': null\r\n  },\r\n  {\r\n    ''''$id'''': ''''2'''',\r\n    ''''Name'''': ''''e2'''',\r\n    ''''Manager'''': null\r\n  },\r\n  {\r\n    ''''$ref'''': ''''1''''\r\n  },\r\n  {\r\n    ''''$ref'''': ''''2''''\r\n  }\r\n]''", span="756-773"];
m2_427 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNull()", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="775-775"];
m2_428 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNull()", file="JsonSchema.cs", label="int i = 0", span="780-780"];
m2_430 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNull()", file="JsonSchema.cs", label="reader.Read()", span="782-782"];
m2_432 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNull()", file="JsonSchema.cs", label="reader.Read()", span="785-785"];
m2_433 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNull()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Null, reader.TokenType)", span="786-786"];
m2_429 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNull()", file="JsonSchema.cs", label="i < 15", span="780-780"];
m2_431 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNull()", file="JsonSchema.cs", label="i++", span="780-780"];
m2_434 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNull()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.AppendCharsWhileReadingNull()", span="754-754"];
m2_138 [cluster="Newtonsoft.Json.JsonReader.Read()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.JsonReader.Read()", span="354-354"];
m2_671 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewlineLastCharacter()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewlineLastCharacter()", span="1164-1164"];
m2_672 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewlineLastCharacter()", file="JsonSchema.cs", label="string input = @''{\r\n  CPU: 'Intel',\r\n  Drives: [ /* Com*ment */\r\n    'DVD read/writer',\r\n    ''''500 gigabyte hard drive''''\r\n  ]\r\n}'' + '\n'", span="1166-1172"];
m2_673 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewlineLastCharacter()", file="JsonSchema.cs", label="object o = JsonConvert.DeserializeObject(input)", span="1174-1174"];
m2_674 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewlineLastCharacter()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadNewlineLastCharacter()", span="1164-1164"];
m2_391 [cluster="Newtonsoft.Json.JsonTextWriter.WriteValue(int)", file="JsonSchema.cs", label="Entry Newtonsoft.Json.JsonTextWriter.WriteValue(int)", span="379-379"];
m2_709 [cluster="long.ToString()", file="JsonSchema.cs", label="Entry long.ToString()", span="0-0"];
m2_1206 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsIntDecimal()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsIntDecimal()", span="1965-1965"];
m2_1207 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsIntDecimal()", file="JsonSchema.cs", label="string json = @''{''''Name'''': 1.1}''", span="1967-1967"];
m2_1208 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsIntDecimal()", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="1969-1969"];
m2_1209 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsIntDecimal()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="1971-1971"];
m2_1210 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsIntDecimal()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="1972-1972"];
m2_1211 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsIntDecimal()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="1974-1974"];
m2_1212 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsIntDecimal()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="1975-1975"];
m2_1213 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsIntDecimal()", file="JsonSchema.cs", label="ExceptionAssert.Throws<FormatException>(\r\n                ''Input string was not in a correct format.'',\r\n                () => { reader.ReadAsInt32(); })", span="1977-1979"];
m2_1214 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsIntDecimal()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsIntDecimal()", span="1965-1965"];
m2_1340 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SupportMultipleContent()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.SupportMultipleContent()", span="2197-2197"];
m2_1341 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SupportMultipleContent()", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(@''1 2 ''''name'''' [][]null {}{} 1.1''))", span="2199-2199"];
m2_1342 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SupportMultipleContent()", file="JsonSchema.cs", label="reader.SupportMultipleContent = true", span="2200-2200"];
m2_1343 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SupportMultipleContent()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2202-2202"];
m2_1344 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SupportMultipleContent()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Integer, reader.TokenType)", span="2203-2203"];
m2_1345 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SupportMultipleContent()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2205-2205"];
m2_1346 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SupportMultipleContent()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Integer, reader.TokenType)", span="2206-2206"];
m2_1347 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SupportMultipleContent()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2208-2208"];
m2_1348 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SupportMultipleContent()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.String, reader.TokenType)", span="2209-2209"];
m2_1349 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SupportMultipleContent()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2211-2211"];
m2_1350 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SupportMultipleContent()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.StartArray, reader.TokenType)", span="2212-2212"];
m2_1351 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SupportMultipleContent()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2214-2214"];
m2_1352 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SupportMultipleContent()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.EndArray, reader.TokenType)", span="2215-2215"];
m2_1353 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SupportMultipleContent()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2217-2217"];
m2_1354 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SupportMultipleContent()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.StartArray, reader.TokenType)", span="2218-2218"];
m2_1355 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SupportMultipleContent()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2220-2220"];
m2_1356 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SupportMultipleContent()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.EndArray, reader.TokenType)", span="2221-2221"];
m2_1357 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SupportMultipleContent()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2223-2223"];
m2_1358 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SupportMultipleContent()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Null, reader.TokenType)", span="2224-2224"];
m2_1359 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SupportMultipleContent()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2226-2226"];
m2_1360 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SupportMultipleContent()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="2227-2227"];
m2_1361 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SupportMultipleContent()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2229-2229"];
m2_1362 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SupportMultipleContent()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.EndObject, reader.TokenType)", span="2230-2230"];
m2_1363 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SupportMultipleContent()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2232-2232"];
m2_1364 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SupportMultipleContent()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="2233-2233"];
m2_1365 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SupportMultipleContent()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2235-2235"];
m2_1366 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SupportMultipleContent()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.EndObject, reader.TokenType)", span="2236-2236"];
m2_1367 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SupportMultipleContent()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2238-2238"];
m2_1368 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SupportMultipleContent()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Float, reader.TokenType)", span="2239-2239"];
m2_1369 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SupportMultipleContent()", file="JsonSchema.cs", label="Assert.IsFalse(reader.Read())", span="2241-2241"];
m2_1370 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SupportMultipleContent()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.SupportMultipleContent()", span="2197-2197"];
m2_482 [cluster="StringReader.cstr", file="JsonSchema.cs", label="Entry StringReader.cstr", span=""];
m2_446 [cluster="long.ToString(System.IFormatProvider)", file="JsonSchema.cs", label="Entry long.ToString(System.IFormatProvider)", span="0-0"];
m2_774 [cluster="Newtonsoft.Json.JsonSerializer.JsonSerializer()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.JsonSerializer.JsonSerializer()", span="418-418"];
m2_1816 [cluster="Newtonsoft.Json.Tests.SlowStream.Seek(long, System.IO.SeekOrigin)", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.SlowStream.Seek(long, System.IO.SeekOrigin)", span="2940-2940"];
m2_1817 [cluster="Newtonsoft.Json.Tests.SlowStream.Seek(long, System.IO.SeekOrigin)", file="JsonSchema.cs", label="throw new NotSupportedException();", span="2942-2942"];
m2_1818 [cluster="Newtonsoft.Json.Tests.SlowStream.Seek(long, System.IO.SeekOrigin)", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.SlowStream.Seek(long, System.IO.SeekOrigin)", span="2940-2940"];
m2_1504 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseOctalNumber()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ParseOctalNumber()", span="2451-2451"];
m2_1505 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseOctalNumber()", file="JsonSchema.cs", label="string json = @''010''", span="2453-2453"];
m2_1506 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseOctalNumber()", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="2455-2455"];
m2_1507 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseOctalNumber()", file="JsonSchema.cs", label="reader.ReadAsDecimal()", span="2457-2457"];
m2_1508 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseOctalNumber()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Float, reader.TokenType)", span="2458-2458"];
m2_1509 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseOctalNumber()", file="JsonSchema.cs", label="Assert.AreEqual(8m, reader.Value)", span="2459-2459"];
m2_1510 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseOctalNumber()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ParseOctalNumber()", span="2451-2451"];
m2_1819 [cluster="System.NotSupportedException.NotSupportedException()", file="JsonSchema.cs", label="Entry System.NotSupportedException.NotSupportedException()", span="0-0"];
m2_1586 [cluster="System.Convert.ToDouble(string, System.IFormatProvider)", file="JsonSchema.cs", label="Entry System.Convert.ToDouble(string, System.IFormatProvider)", span="0-0"];
m2_1588 [cluster="System.Console.WriteLine(string)", file="JsonSchema.cs", label="Entry System.Console.WriteLine(string)", span="0-0"];
m2_769 [cluster="Newtonsoft.Json.JsonWriter.WriteValue(string)", file="JsonSchema.cs", label="Entry Newtonsoft.Json.JsonWriter.WriteValue(string)", span="810-810"];
m2_886 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MissingColon()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.MissingColon()", span="1481-1481"];
m2_887 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MissingColon()", file="JsonSchema.cs", label="string json = @''{\r\n    ''''A'''' : true,\r\n    ''''B'''' ''''''", span="1483-1485"];
m2_888 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MissingColon()", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="1487-1487"];
m2_889 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MissingColon()", file="JsonSchema.cs", label="reader.Read()", span="1489-1489"];
m2_890 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MissingColon()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="1490-1490"];
m2_891 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MissingColon()", file="JsonSchema.cs", label="reader.Read()", span="1492-1492"];
m2_892 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MissingColon()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="1493-1493"];
m2_893 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MissingColon()", file="JsonSchema.cs", label="reader.Read()", span="1495-1495"];
m2_894 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MissingColon()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Boolean, reader.TokenType)", span="1496-1496"];
m2_895 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MissingColon()", file="JsonSchema.cs", label="ExceptionAssert.Throws<JsonReaderException>(\r\n                @''Invalid character after parsing property name. Expected ':' but got: ''''. Path 'A', line 3, position 9.'',\r\n                () => { reader.Read(); })", span="1498-1500"];
m2_896 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MissingColon()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.MissingColon()", span="1481-1481"];
m2_1410 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyObject()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyObject()", span="2303-2303"];
m2_1411 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyObject()", file="JsonSchema.cs", label="string json = ''{}''", span="2305-2305"];
m2_1412 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyObject()", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="2306-2306"];
m2_1413 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyObject()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2308-2308"];
m2_1414 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyObject()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="2309-2309"];
m2_1415 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyObject()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2311-2311"];
m2_1416 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyObject()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.EndObject, reader.TokenType)", span="2312-2312"];
m2_1417 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyObject()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ParseEmptyObject()", span="2303-2303"];
m2_17 [cluster="Unk.AreEqual", file="JsonSchema.cs", label="Entry Unk.AreEqual", span=""];
m2_900 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadSingleBytes()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadSingleBytes()", span="1504-1504"];
m2_901 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadSingleBytes()", file="JsonSchema.cs", label="StringReader s = new StringReader(@''''''SGVsbG8gd29ybGQu'''''')", span="1506-1506"];
m2_902 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadSingleBytes()", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(s)", span="1507-1507"];
m2_903 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadSingleBytes()", file="JsonSchema.cs", label="byte[] data = reader.ReadAsBytes()", span="1509-1509"];
m2_904 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadSingleBytes()", file="JsonSchema.cs", label="Assert.IsNotNull(data)", span="1510-1510"];
m2_905 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadSingleBytes()", file="JsonSchema.cs", label="string text = Encoding.UTF8.GetString(data, 0, data.Length)", span="1512-1512"];
m2_906 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadSingleBytes()", file="JsonSchema.cs", label="Assert.AreEqual(''Hello world.'', text)", span="1513-1513"];
m2_907 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadSingleBytes()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadSingleBytes()", span="1504-1504"];
m2_1788 [cluster="Newtonsoft.Json.JsonTextWriter.WriteValue(decimal)", file="JsonSchema.cs", label="Entry Newtonsoft.Json.JsonTextWriter.WriteValue(decimal)", span="537-537"];
m2_767 [cluster="Newtonsoft.Json.JsonWriter.WritePropertyName(string)", file="JsonSchema.cs", label="Entry Newtonsoft.Json.JsonWriter.WritePropertyName(string)", span="407-407"];
m2_633 [cluster="Unk.AreEquivalent", file="JsonSchema.cs", label="Entry Unk.AreEquivalent", span=""];
m2_483 [cluster="Unk.ToString", file="JsonSchema.cs", label="Entry Unk.ToString", span=""];
m2_360 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongString()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongString()", span="671-671"];
m2_361 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongString()", file="JsonSchema.cs", label="string s = new string('a', 10000)", span="673-673"];
m2_362 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongString()", file="JsonSchema.cs", label="JsonReader reader = new JsonTextReader(new StringReader(''''' + s + '''''))", span="674-674"];
m2_364 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongString()", file="JsonSchema.cs", label="Assert.AreEqual(s, reader.Value)", span="677-677"];
m2_363 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongString()", file="JsonSchema.cs", label="reader.Read()", span="675-675"];
m2_365 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongString()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongString()", span="671-671"];
m2_1088 [cluster="System.DateTime.DateTime(int, int, int)", file="JsonSchema.cs", label="Entry System.DateTime.DateTime(int, int, int)", span="0-0"];
m2_1820 [cluster="Newtonsoft.Json.Tests.SlowStream.SetLength(long)", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.SlowStream.SetLength(long)", span="2945-2945"];
m2_1821 [cluster="Newtonsoft.Json.Tests.SlowStream.SetLength(long)", file="JsonSchema.cs", label="throw new NotSupportedException();", span="2947-2947"];
m2_1822 [cluster="Newtonsoft.Json.Tests.SlowStream.SetLength(long)", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.SlowStream.SetLength(long)", span="2945-2945"];
m2_909 [cluster="Unk.IsNotNull", file="JsonSchema.cs", label="Entry Unk.IsNotNull", span=""];
m2_990 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesNoContentWrappedObject()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesNoContentWrappedObject()", span="1634-1634"];
m2_991 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesNoContentWrappedObject()", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(@''{''))", span="1636-1636"];
m2_992 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesNoContentWrappedObject()", file="JsonSchema.cs", label="ExceptionAssert.Throws<JsonReaderException>(\r\n                ''Unexpected end when reading bytes. Path '', line 1, position 1.'',\r\n                () => { reader.ReadAsBytes(); })", span="1638-1640"];
m2_993 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesNoContentWrappedObject()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesNoContentWrappedObject()", span="1634-1634"];
m2_392 [cluster="Newtonsoft.Json.JsonWriter.WriteEndArray()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.JsonWriter.WriteEndArray()", span="381-381"];
m2_618 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInArray()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInArray()", span="1091-1091"];
m2_619 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInArray()", file="JsonSchema.cs", label="string helloWorld = ''Hello world!''", span="1093-1093"];
m2_620 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInArray()", file="JsonSchema.cs", label="byte[] helloWorldData = Encoding.UTF8.GetBytes(helloWorld)", span="1094-1094"];
m2_621 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInArray()", file="JsonSchema.cs", label="JsonReader reader = new JsonTextReader(new StringReader(@''[1,''' + Convert.ToBase64String(helloWorldData) + @''']''))", span="1096-1096"];
m2_627 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInArray()", file="JsonSchema.cs", label="CollectionAssert.AreEquivalent(helloWorldData, data)", span="1102-1102"];
m2_622 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInArray()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="1097-1097"];
m2_623 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInArray()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.StartArray, reader.TokenType)", span="1098-1098"];
m2_624 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInArray()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="1099-1099"];
m2_625 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInArray()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Integer, reader.TokenType)", span="1100-1100"];
m2_626 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInArray()", file="JsonSchema.cs", label="byte[] data = reader.ReadAsBytes()", span="1101-1101"];
m2_628 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInArray()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Bytes, reader.TokenType)", span="1103-1103"];
m2_629 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInArray()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="1104-1104"];
m2_630 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInArray()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.EndArray, reader.TokenType)", span="1105-1105"];
m2_631 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInArray()", file="JsonSchema.cs", label="Assert.IsFalse(reader.Read())", span="1107-1107"];
m2_632 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInArray()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInArray()", span="1091-1091"];
m2_59 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnescapeDoubleQuotes()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.UnescapeDoubleQuotes()", span="124-124"];
m2_60 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnescapeDoubleQuotes()", file="JsonSchema.cs", label="string json = @''{''''recipe_id'''':''''12'''',''''recipe_name'''':''''Apocalypse Leather Armors'''',''''recipe_text'''':''''#C16------------------------------\r\n#C12Ingredients #C20\r\n#C16------------------------------\r\n\r\na piece of Leather Armor\r\n( ie #L \''''Enhanced Leather Armor Boots\'''' \''''85644\'''' )\r\n<img src=rdb:\/\/13264>\r\n\r\n#L \''''Hacker Tool\'''' \''''87814\''''\r\n<img src=rdb:\/\/99282>\r\n\r\n#L \''''Clanalizer\'''' \''''208313\''''\r\n<img src=rdb:\/\/156479>\r\n\r\n#C16------------------------------\r\n#C12Recipe #C16\r\n#C16------------------------------#C20\r\n\r\nHacker Tool\r\n#C15+#C20\r\na piece of Leather Armor\r\n#C15=#C20\r\n<img src=rdb:\/\/13264>\r\na piece of Hacked Leather Armor\r\n( ie : #L \''''Hacked Leather Armor Boots\'''' \''''245979\'''' )\r\n#C16Skills: |  BE  |#C20\r\n\r\n#C14------------------------------#C20\r\n\r\nClanalizer\r\n#C15+#C20\r\na piece of Hacked Leather Armor\r\n#C15=#C20\r\n<img src=rdb:\/\/13264>\r\na piece of Apocalypse Leather Armor\r\n( ie : #L \''''Apocalypse Leather Armor Boots\'''' \''''245966\'''' )\r\n#C16Skills: |  ??  |#C20\r\n\r\n#C16------------------------------\r\n#C12Details#C16\r\n#C16------------------------------#C20\r\n\r\n#L \''''Apocalypse Leather Armor Boots\'''' \''''245967\''''\r\n#L \''''Apocalypse Leather Armor Gloves\'''' \''''245969\''''\r\n#L \''''Apocalypse Leather Armor Helmet\'''' \''''245975\''''\r\n#L \''''Apocalypse Leather Armor Pants\'''' \''''245971\''''\r\n#L \''''Apocalypse Leather Armor Sleeves\'''' \''''245973\''''\r\n#L \''''Apocalypse Leather Body Armor\'''' \''''245965\''''\r\n\r\n#C16------------------------------\r\n#C12Comments#C16\r\n#C16------------------------------#C20\r\n\r\nNice froob armor.. but ugleh!\r\n\r\n'''',''''recipe_author'''':null}''", span="126-126"];
m2_61 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnescapeDoubleQuotes()", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="128-128"];
m2_62 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnescapeDoubleQuotes()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="130-130"];
m2_63 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnescapeDoubleQuotes()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="131-131"];
m2_64 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnescapeDoubleQuotes()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="133-133"];
m2_65 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnescapeDoubleQuotes()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="134-134"];
m2_66 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnescapeDoubleQuotes()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="136-136"];
m2_67 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnescapeDoubleQuotes()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.String, reader.TokenType)", span="137-137"];
m2_68 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnescapeDoubleQuotes()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="139-139"];
m2_69 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnescapeDoubleQuotes()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="140-140"];
m2_70 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnescapeDoubleQuotes()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="142-142"];
m2_71 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnescapeDoubleQuotes()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.String, reader.TokenType)", span="143-143"];
m2_72 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnescapeDoubleQuotes()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="145-145"];
m2_73 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnescapeDoubleQuotes()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="146-146"];
m2_74 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnescapeDoubleQuotes()", file="JsonSchema.cs", label="Assert.AreEqual(''recipe_text'', reader.Value)", span="147-147"];
m2_75 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnescapeDoubleQuotes()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="149-149"];
m2_76 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnescapeDoubleQuotes()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.String, reader.TokenType)", span="150-150"];
m2_77 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnescapeDoubleQuotes()", file="JsonSchema.cs", label="Assert.AreEqual(@''#C16------------------------------\r\n#C12Ingredients #C20\r\n#C16------------------------------\r\n\r\na piece of Leather Armor\r\n( ie #L ''''Enhanced Leather Armor Boots'''' ''''85644'''' )\r\n<img src=rdb://13264>\r\n\r\n#L ''''Hacker Tool'''' ''''87814''''\r\n<img src=rdb://99282>\r\n\r\n#L ''''Clanalizer'''' ''''208313''''\r\n<img src=rdb://156479>\r\n\r\n#C16------------------------------\r\n#C12Recipe #C16\r\n#C16------------------------------#C20\r\n\r\nHacker Tool\r\n#C15+#C20\r\na piece of Leather Armor\r\n#C15=#C20\r\n<img src=rdb://13264>\r\na piece of Hacked Leather Armor\r\n( ie : #L ''''Hacked Leather Armor Boots'''' ''''245979'''' )\r\n#C16Skills: |  BE  |#C20\r\n\r\n#C14------------------------------#C20\r\n\r\nClanalizer\r\n#C15+#C20\r\na piece of Hacked Leather Armor\r\n#C15=#C20\r\n<img src=rdb://13264>\r\na piece of Apocalypse Leather Armor\r\n( ie : #L ''''Apocalypse Leather Armor Boots'''' ''''245966'''' )\r\n#C16Skills: |  ??  |#C20\r\n\r\n#C16------------------------------\r\n#C12Details#C16\r\n#C16------------------------------#C20\r\n\r\n#L ''''Apocalypse Leather Armor Boots'''' ''''245967''''\r\n#L ''''Apocalypse Leather Armor Gloves'''' ''''245969''''\r\n#L ''''Apocalypse Leather Armor Helmet'''' ''''245975''''\r\n#L ''''Apocalypse Leather Armor Pants'''' ''''245971''''\r\n#L ''''Apocalypse Leather Armor Sleeves'''' ''''245973''''\r\n#L ''''Apocalypse Leather Body Armor'''' ''''245965''''\r\n\r\n#C16------------------------------\r\n#C12Comments#C16\r\n#C16------------------------------#C20\r\n\r\nNice froob armor.. but ugleh!\r\n\r\n'', reader.Value)", span="152-207"];
m2_78 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnescapeDoubleQuotes()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.UnescapeDoubleQuotes()", span="124-124"];
m2_1771 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadBoundaryDecimals()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadBoundaryDecimals()", span="2832-2832"];
m2_1772 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadBoundaryDecimals()", file="JsonSchema.cs", label="StringWriter sw = new StringWriter()", span="2834-2834"];
m2_1773 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadBoundaryDecimals()", file="JsonSchema.cs", label="JsonTextWriter writer = new JsonTextWriter(sw)", span="2835-2835"];
m2_1778 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadBoundaryDecimals()", file="JsonSchema.cs", label="string json = sw.ToString()", span="2842-2842"];
m2_1774 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadBoundaryDecimals()", file="JsonSchema.cs", label="writer.WriteStartArray()", span="2837-2837"];
m2_1775 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadBoundaryDecimals()", file="JsonSchema.cs", label="writer.WriteValue(decimal.MaxValue)", span="2838-2838"];
m2_1776 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadBoundaryDecimals()", file="JsonSchema.cs", label="writer.WriteValue(decimal.MinValue)", span="2839-2839"];
m2_1777 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadBoundaryDecimals()", file="JsonSchema.cs", label="writer.WriteEndArray()", span="2840-2840"];
m2_1779 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadBoundaryDecimals()", file="JsonSchema.cs", label="StringReader sr = new StringReader(json)", span="2844-2844"];
m2_1780 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadBoundaryDecimals()", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(sr)", span="2845-2845"];
m2_1781 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadBoundaryDecimals()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2847-2847"];
m2_1782 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadBoundaryDecimals()", file="JsonSchema.cs", label="decimal? max = reader.ReadAsDecimal()", span="2849-2849"];
m2_1784 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadBoundaryDecimals()", file="JsonSchema.cs", label="decimal? min = reader.ReadAsDecimal()", span="2852-2852"];
m2_1786 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadBoundaryDecimals()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2855-2855"];
m2_1783 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadBoundaryDecimals()", file="JsonSchema.cs", label="Assert.AreEqual(decimal.MaxValue, max)", span="2850-2850"];
m2_1785 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadBoundaryDecimals()", file="JsonSchema.cs", label="Assert.AreEqual(decimal.MinValue, min)", span="2853-2853"];
m2_1787 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadBoundaryDecimals()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.WriteReadBoundaryDecimals()", span="2832-2832"];
m2_389 [cluster="Newtonsoft.Json.JsonTextWriter.JsonTextWriter(System.IO.TextWriter)", file="JsonSchema.cs", label="Entry Newtonsoft.Json.JsonTextWriter.JsonTextWriter(System.IO.TextWriter)", span="116-116"];
m2_822 [cluster="System.Convert.ToChar(string)", file="JsonSchema.cs", label="Entry System.Convert.ToChar(string)", span="0-0"];
m2_1768 [cluster="lambda expression", file="JsonSchema.cs", label="Entry lambda expression", span="2823-2823"];
m2_20 [cluster="lambda expression", file="JsonSchema.cs", label="reader.Read()", span="69-69"];
m2_19 [cluster="lambda expression", file="JsonSchema.cs", label="Entry lambda expression", span="69-69"];
m2_21 [cluster="lambda expression", file="JsonSchema.cs", label="Exit lambda expression", span="69-69"];
m2_57 [cluster="lambda expression", file="JsonSchema.cs", label="reader.Read()", span="120-120"];
m2_56 [cluster="lambda expression", file="JsonSchema.cs", label="Entry lambda expression", span="120-120"];
m2_58 [cluster="lambda expression", file="JsonSchema.cs", label="Exit lambda expression", span="120-120"];
m2_165 [cluster="lambda expression", file="JsonSchema.cs", label="reader.Read()", span="369-369"];
m2_164 [cluster="lambda expression", file="JsonSchema.cs", label="Entry lambda expression", span="367-372"];
m2_166 [cluster="lambda expression", file="JsonSchema.cs", label="Exit lambda expression", span="367-372"];
m2_183 [cluster="lambda expression", file="JsonSchema.cs", label="reader.Read()", span="406-406"];
m2_182 [cluster="lambda expression", file="JsonSchema.cs", label="Entry lambda expression", span="406-406"];
m2_184 [cluster="lambda expression", file="JsonSchema.cs", label="Exit lambda expression", span="406-406"];
m2_196 [cluster="lambda expression", file="JsonSchema.cs", label="reader.Read()", span="437-437"];
m2_195 [cluster="lambda expression", file="JsonSchema.cs", label="Entry lambda expression", span="435-440"];
m2_197 [cluster="lambda expression", file="JsonSchema.cs", label="Exit lambda expression", span="435-440"];
m2_350 [cluster="lambda expression", file="JsonSchema.cs", label="Entry lambda expression", span="657-657"];
m2_351 [cluster="lambda expression", file="JsonSchema.cs", label="new JsonTextReader(null)", span="657-657"];
m2_352 [cluster="lambda expression", file="JsonSchema.cs", label="Exit lambda expression", span="657-657"];
m2_358 [cluster="lambda expression", file="JsonSchema.cs", label="reader.Read()", span="667-667"];
m2_357 [cluster="lambda expression", file="JsonSchema.cs", label="Entry lambda expression", span="667-667"];
m2_359 [cluster="lambda expression", file="JsonSchema.cs", label="Exit lambda expression", span="667-667"];
m2_448 [cluster="lambda expression", file="JsonSchema.cs", label="reader = new JsonTextReader(new StringReader(total.ToString(CultureInfo.InvariantCulture)))", span="805-805"];
m2_447 [cluster="lambda expression", file="JsonSchema.cs", label="Entry lambda expression", span="803-807"];
m2_449 [cluster="lambda expression", file="JsonSchema.cs", label="reader.ReadAsInt32()", span="806-806"];
m2_450 [cluster="lambda expression", file="JsonSchema.cs", label="Exit lambda expression", span="803-807"];
m2_465 [cluster="lambda expression", file="JsonSchema.cs", label="reader = new JsonTextReader(new StringReader(total.ToString(CultureInfo.InvariantCulture)))", span="828-828"];
m2_464 [cluster="lambda expression", file="JsonSchema.cs", label="Entry lambda expression", span="826-830"];
m2_466 [cluster="lambda expression", file="JsonSchema.cs", label="reader.ReadAsInt32()", span="829-829"];
m2_467 [cluster="lambda expression", file="JsonSchema.cs", label="Exit lambda expression", span="826-830"];
m2_518 [cluster="lambda expression", file="JsonSchema.cs", label="reader.Read()", span="925-925"];
m2_517 [cluster="lambda expression", file="JsonSchema.cs", label="Entry lambda expression", span="925-925"];
m2_519 [cluster="lambda expression", file="JsonSchema.cs", label="Exit lambda expression", span="925-925"];
m2_525 [cluster="lambda expression", file="JsonSchema.cs", label="reader.Read()", span="935-935"];
m2_524 [cluster="lambda expression", file="JsonSchema.cs", label="Entry lambda expression", span="935-935"];
m2_526 [cluster="lambda expression", file="JsonSchema.cs", label="Exit lambda expression", span="935-935"];
m2_532 [cluster="lambda expression", file="JsonSchema.cs", label="reader.ReadAsBytes()", span="945-945"];
m2_531 [cluster="lambda expression", file="JsonSchema.cs", label="Entry lambda expression", span="945-945"];
m2_533 [cluster="lambda expression", file="JsonSchema.cs", label="Exit lambda expression", span="945-945"];
m2_543 [cluster="lambda expression", file="JsonSchema.cs", label="reader.ReadAsBytes()", span="958-958"];
m2_542 [cluster="lambda expression", file="JsonSchema.cs", label="Entry lambda expression", span="958-958"];
m2_544 [cluster="lambda expression", file="JsonSchema.cs", label="Exit lambda expression", span="958-958"];
m2_558 [cluster="lambda expression", file="JsonSchema.cs", label="reader.Read()", span="979-979"];
m2_557 [cluster="lambda expression", file="JsonSchema.cs", label="Entry lambda expression", span="979-979"];
m2_559 [cluster="lambda expression", file="JsonSchema.cs", label="Exit lambda expression", span="979-979"];
m2_711 [cluster="lambda expression", file="JsonSchema.cs", label="reader.ReadAsInt32()", span="1232-1232"];
m2_710 [cluster="lambda expression", file="JsonSchema.cs", label="Entry lambda expression", span="1232-1232"];
m2_714 [cluster="lambda expression", file="JsonSchema.cs", label="reader.ReadAsInt32()", span="1235-1235"];
m2_713 [cluster="lambda expression", file="JsonSchema.cs", label="Entry lambda expression", span="1235-1235"];
m2_717 [cluster="lambda expression", file="JsonSchema.cs", label="reader.ReadAsInt32()", span="1238-1238"];
m2_716 [cluster="lambda expression", file="JsonSchema.cs", label="Entry lambda expression", span="1238-1238"];
m2_720 [cluster="lambda expression", file="JsonSchema.cs", label="reader.ReadAsInt32()", span="1241-1241"];
m2_719 [cluster="lambda expression", file="JsonSchema.cs", label="Entry lambda expression", span="1241-1241"];
m2_723 [cluster="lambda expression", file="JsonSchema.cs", label="reader.ReadAsInt32()", span="1247-1247"];
m2_722 [cluster="lambda expression", file="JsonSchema.cs", label="Entry lambda expression", span="1247-1247"];
m2_712 [cluster="lambda expression", file="JsonSchema.cs", label="Exit lambda expression", span="1232-1232"];
m2_715 [cluster="lambda expression", file="JsonSchema.cs", label="Exit lambda expression", span="1235-1235"];
m2_718 [cluster="lambda expression", file="JsonSchema.cs", label="Exit lambda expression", span="1238-1238"];
m2_721 [cluster="lambda expression", file="JsonSchema.cs", label="Exit lambda expression", span="1241-1241"];
m2_724 [cluster="lambda expression", file="JsonSchema.cs", label="Exit lambda expression", span="1247-1247"];
m2_898 [cluster="lambda expression", file="JsonSchema.cs", label="reader.Read()", span="1500-1500"];
m2_897 [cluster="lambda expression", file="JsonSchema.cs", label="Entry lambda expression", span="1500-1500"];
m2_899 [cluster="lambda expression", file="JsonSchema.cs", label="Exit lambda expression", span="1500-1500"];
m2_977 [cluster="lambda expression", file="JsonSchema.cs", label="reader.Read()", span="1612-1612"];
m2_976 [cluster="lambda expression", file="JsonSchema.cs", label="Entry lambda expression", span="1612-1612"];
m2_978 [cluster="lambda expression", file="JsonSchema.cs", label="Exit lambda expression", span="1612-1612"];
m2_995 [cluster="lambda expression", file="JsonSchema.cs", label="reader.ReadAsBytes()", span="1640-1640"];
m2_994 [cluster="lambda expression", file="JsonSchema.cs", label="Entry lambda expression", span="1640-1640"];
m2_996 [cluster="lambda expression", file="JsonSchema.cs", label="Exit lambda expression", span="1640-1640"];
m2_1008 [cluster="lambda expression", file="JsonSchema.cs", label="reader.ReadAsDecimal()", span="1661-1661"];
m2_1007 [cluster="lambda expression", file="JsonSchema.cs", label="Entry lambda expression", span="1661-1661"];
m2_1009 [cluster="lambda expression", file="JsonSchema.cs", label="Exit lambda expression", span="1661-1661"];
m2_1015 [cluster="lambda expression", file="JsonSchema.cs", label="reader.ReadAsBytes()", span="1671-1671"];
m2_1014 [cluster="lambda expression", file="JsonSchema.cs", label="Entry lambda expression", span="1671-1671"];
m2_1016 [cluster="lambda expression", file="JsonSchema.cs", label="Exit lambda expression", span="1671-1671"];
m2_1022 [cluster="lambda expression", file="JsonSchema.cs", label="reader.ReadAsDateTimeOffset()", span="1682-1682"];
m2_1021 [cluster="lambda expression", file="JsonSchema.cs", label="Entry lambda expression", span="1682-1682"];
m2_1023 [cluster="lambda expression", file="JsonSchema.cs", label="Exit lambda expression", span="1682-1682"];
m2_1036 [cluster="lambda expression", file="JsonSchema.cs", label="reader.ReadAsBytes()", span="1704-1704"];
m2_1035 [cluster="lambda expression", file="JsonSchema.cs", label="Entry lambda expression", span="1704-1704"];
m2_1037 [cluster="lambda expression", file="JsonSchema.cs", label="Exit lambda expression", span="1704-1704"];
m2_1043 [cluster="lambda expression", file="JsonSchema.cs", label="reader.ReadAsBytes()", span="1714-1714"];
m2_1042 [cluster="lambda expression", file="JsonSchema.cs", label="Entry lambda expression", span="1714-1714"];
m2_1044 [cluster="lambda expression", file="JsonSchema.cs", label="Exit lambda expression", span="1714-1714"];
m2_1114 [cluster="lambda expression", file="JsonSchema.cs", label="reader.ReadAsDateTimeOffset()", span="1825-1825"];
m2_1113 [cluster="lambda expression", file="JsonSchema.cs", label="Entry lambda expression", span="1825-1825"];
m2_1115 [cluster="lambda expression", file="JsonSchema.cs", label="Exit lambda expression", span="1825-1825"];
m2_1216 [cluster="lambda expression", file="JsonSchema.cs", label="reader.ReadAsInt32()", span="1979-1979"];
m2_1215 [cluster="lambda expression", file="JsonSchema.cs", label="Entry lambda expression", span="1979-1979"];
m2_1217 [cluster="lambda expression", file="JsonSchema.cs", label="Exit lambda expression", span="1979-1979"];
m2_1223 [cluster="lambda expression", file="JsonSchema.cs", label="reader.Read()", span="1989-1989"];
m2_1222 [cluster="lambda expression", file="JsonSchema.cs", label="Entry lambda expression", span="1989-1989"];
m2_1224 [cluster="lambda expression", file="JsonSchema.cs", label="Exit lambda expression", span="1989-1989"];
m2_1230 [cluster="lambda expression", file="JsonSchema.cs", label="reader.Read()", span="1999-1999"];
m2_1229 [cluster="lambda expression", file="JsonSchema.cs", label="Entry lambda expression", span="1999-1999"];
m2_1231 [cluster="lambda expression", file="JsonSchema.cs", label="Exit lambda expression", span="1999-1999"];
m2_1237 [cluster="lambda expression", file="JsonSchema.cs", label="reader.Read()", span="2009-2009"];
m2_1236 [cluster="lambda expression", file="JsonSchema.cs", label="Entry lambda expression", span="2009-2009"];
m2_1238 [cluster="lambda expression", file="JsonSchema.cs", label="Exit lambda expression", span="2009-2009"];
m2_1244 [cluster="lambda expression", file="JsonSchema.cs", label="reader.Read()", span="2019-2019"];
m2_1243 [cluster="lambda expression", file="JsonSchema.cs", label="Entry lambda expression", span="2019-2019"];
m2_1245 [cluster="lambda expression", file="JsonSchema.cs", label="Exit lambda expression", span="2019-2019"];
m2_1251 [cluster="lambda expression", file="JsonSchema.cs", label="reader.Read()", span="2029-2029"];
m2_1250 [cluster="lambda expression", file="JsonSchema.cs", label="Entry lambda expression", span="2029-2029"];
m2_1252 [cluster="lambda expression", file="JsonSchema.cs", label="Exit lambda expression", span="2029-2029"];
m2_1384 [cluster="lambda expression", file="JsonSchema.cs", label="reader.Read()", span="2263-2263"];
m2_1383 [cluster="lambda expression", file="JsonSchema.cs", label="Entry lambda expression", span="2263-2263"];
m2_1385 [cluster="lambda expression", file="JsonSchema.cs", label="Exit lambda expression", span="2263-2263"];
m2_1392 [cluster="lambda expression", file="JsonSchema.cs", label="reader.Read()", span="2274-2274"];
m2_1391 [cluster="lambda expression", file="JsonSchema.cs", label="Entry lambda expression", span="2274-2274"];
m2_1393 [cluster="lambda expression", file="JsonSchema.cs", label="Exit lambda expression", span="2274-2274"];
m2_1423 [cluster="lambda expression", file="JsonSchema.cs", label="reader.Read()", span="2322-2322"];
m2_1422 [cluster="lambda expression", file="JsonSchema.cs", label="Entry lambda expression", span="2322-2322"];
m2_1424 [cluster="lambda expression", file="JsonSchema.cs", label="Exit lambda expression", span="2322-2322"];
m2_1440 [cluster="lambda expression", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2346-2346"];
m2_1439 [cluster="lambda expression", file="JsonSchema.cs", label="Entry lambda expression", span="2346-2346"];
m2_1441 [cluster="lambda expression", file="JsonSchema.cs", label="Exit lambda expression", span="2346-2346"];
m2_1541 [cluster="lambda expression", file="JsonSchema.cs", label="reader.Read()", span="2509-2509"];
m2_1540 [cluster="lambda expression", file="JsonSchema.cs", label="Entry lambda expression", span="2509-2509"];
m2_1542 [cluster="lambda expression", file="JsonSchema.cs", label="Exit lambda expression", span="2509-2509"];
m2_1597 [cluster="lambda expression", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2594-2594"];
m2_1596 [cluster="lambda expression", file="JsonSchema.cs", label="Entry lambda expression", span="2594-2594"];
m2_1598 [cluster="lambda expression", file="JsonSchema.cs", label="Exit lambda expression", span="2594-2594"];
m2_1629 [cluster="lambda expression", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2612-2612"];
m2_1632 [cluster="lambda expression", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2632-2632"];
m2_1628 [cluster="lambda expression", file="JsonSchema.cs", label="Entry lambda expression", span="2612-2612"];
m2_1631 [cluster="lambda expression", file="JsonSchema.cs", label="Entry lambda expression", span="2632-2632"];
m2_1630 [cluster="lambda expression", file="JsonSchema.cs", label="Exit lambda expression", span="2612-2612"];
m2_1633 [cluster="lambda expression", file="JsonSchema.cs", label="Exit lambda expression", span="2632-2632"];
m2_1754 [cluster="lambda expression", file="JsonSchema.cs", label="jsonTextReader.Read()", span="2792-2792"];
m2_1757 [cluster="lambda expression", file="JsonSchema.cs", label="jsonTextReader.Read()", span="2795-2795"];
m2_1760 [cluster="lambda expression", file="JsonSchema.cs", label="jsonTextReader.Read()", span="2806-2806"];
m2_1763 [cluster="lambda expression", file="JsonSchema.cs", label="jsonTextReader.Read()", span="2817-2817"];
m2_1766 [cluster="lambda expression", file="JsonSchema.cs", label="jsonTextReader.Read()", span="2820-2820"];
m2_1769 [cluster="lambda expression", file="JsonSchema.cs", label="jsonTextReader.Read()", span="2823-2823"];
m2_1753 [cluster="lambda expression", file="JsonSchema.cs", label="Entry lambda expression", span="2792-2792"];
m2_1756 [cluster="lambda expression", file="JsonSchema.cs", label="Entry lambda expression", span="2795-2795"];
m2_1759 [cluster="lambda expression", file="JsonSchema.cs", label="Entry lambda expression", span="2806-2806"];
m2_1762 [cluster="lambda expression", file="JsonSchema.cs", label="Entry lambda expression", span="2817-2817"];
m2_1765 [cluster="lambda expression", file="JsonSchema.cs", label="Entry lambda expression", span="2820-2820"];
m2_1755 [cluster="lambda expression", file="JsonSchema.cs", label="Exit lambda expression", span="2792-2792"];
m2_1758 [cluster="lambda expression", file="JsonSchema.cs", label="Exit lambda expression", span="2795-2795"];
m2_1761 [cluster="lambda expression", file="JsonSchema.cs", label="Exit lambda expression", span="2806-2806"];
m2_1764 [cluster="lambda expression", file="JsonSchema.cs", label="Exit lambda expression", span="2817-2817"];
m2_1767 [cluster="lambda expression", file="JsonSchema.cs", label="Exit lambda expression", span="2820-2820"];
m2_1770 [cluster="lambda expression", file="JsonSchema.cs", label="Exit lambda expression", span="2823-2823"];
m2_1729 [cluster="System.DateTimeOffset.DateTimeOffset(long, System.TimeSpan)", file="JsonSchema.cs", label="Entry System.DateTimeOffset.DateTimeOffset(long, System.TimeSpan)", span="0-0"];
m2_1293 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBufferOnEndComment()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBufferOnEndComment()", span="2108-2108"];
m2_1294 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBufferOnEndComment()", file="JsonSchema.cs", label="string json = @''/*comment*/ { /*comment*/\r\n        ''''Name'''': /*comment*/ ''''Apple'''' /*comment*/, /*comment*/\r\n        ''''ExpiryDate'''': ''''\/Date(1230422400000)\/'''',\r\n        ''''Price'''': 3.99,\r\n        ''''Sizes'''': /*comment*/ [ /*comment*/\r\n          ''''Small'''', /*comment*/\r\n          ''''Medium'''' /*comment*/,\r\n          /*comment*/ ''''Large''''\r\n        /*comment*/ ] /*comment*/\r\n      } /*comment*/''", span="2110-2119"];
m2_1295 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBufferOnEndComment()", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="2121-2121"];
m2_1296 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBufferOnEndComment()", file="JsonSchema.cs", label="int i = 0", span="2126-2126"];
m2_1298 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBufferOnEndComment()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2128-2128"];
m2_1300 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBufferOnEndComment()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2131-2131"];
m2_1301 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBufferOnEndComment()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Comment, reader.TokenType)", span="2132-2132"];
m2_1302 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBufferOnEndComment()", file="JsonSchema.cs", label="Assert.IsFalse(reader.Read())", span="2134-2134"];
m2_1297 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBufferOnEndComment()", file="JsonSchema.cs", label="i < 26", span="2126-2126"];
m2_1299 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBufferOnEndComment()", file="JsonSchema.cs", label="i++", span="2126-2126"];
m2_1303 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBufferOnEndComment()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBufferOnEndComment()", span="2108-2108"];
m2_1465 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", span="2386-2386"];
m2_1466 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="JsonSchema.cs", label="string json = @''/*comment*/{/*comment*/Name:/*comment*/true/*comment*/,/*comment*/\r\n        ''''ExpiryDate'''':/*comment*/new\r\n'' + StringUtils.LineFeed +\r\n                          @''Date\r\n(/*comment*/null/*comment*/),\r\n        ''''Price'''': 3.99,\r\n        ''''Sizes'''':/*comment*/[/*comment*/\r\n          ''''Small''''/*comment*/]/*comment*/}/*comment*/''", span="2388-2395"];
m2_1467 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(new StreamReader(new SlowStream(json, new UTF8Encoding(false), 1)))", span="2397-2397"];
m2_1468 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2399-2399"];
m2_1469 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Comment, reader.TokenType)", span="2400-2400"];
m2_1470 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2402-2402"];
m2_1471 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="2403-2403"];
m2_1472 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2405-2405"];
m2_1473 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Comment, reader.TokenType)", span="2406-2406"];
m2_1474 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2408-2408"];
m2_1475 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="2409-2409"];
m2_1476 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="JsonSchema.cs", label="Assert.AreEqual(''Name'', reader.Value)", span="2410-2410"];
m2_1477 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2412-2412"];
m2_1478 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Comment, reader.TokenType)", span="2413-2413"];
m2_1479 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2415-2415"];
m2_1480 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Boolean, reader.TokenType)", span="2416-2416"];
m2_1481 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="JsonSchema.cs", label="Assert.AreEqual(true, reader.Value)", span="2417-2417"];
m2_1482 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2419-2419"];
m2_1483 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Comment, reader.TokenType)", span="2420-2420"];
m2_1484 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2422-2422"];
m2_1485 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Comment, reader.TokenType)", span="2423-2423"];
m2_1486 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2425-2425"];
m2_1487 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="2426-2426"];
m2_1488 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="JsonSchema.cs", label="Assert.AreEqual(''ExpiryDate'', reader.Value)", span="2427-2427"];
m2_1489 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2429-2429"];
m2_1490 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Comment, reader.TokenType)", span="2430-2430"];
m2_1491 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2432-2432"];
m2_1492 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.StartConstructor, reader.TokenType)", span="2433-2433"];
m2_1493 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="JsonSchema.cs", label="Assert.AreEqual(5, reader.LineNumber)", span="2434-2434"];
m2_1494 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="JsonSchema.cs", label="Assert.AreEqual(''Date'', reader.Value)", span="2435-2435"];
m2_1495 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2437-2437"];
m2_1496 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Comment, reader.TokenType)", span="2438-2438"];
m2_1497 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2440-2440"];
m2_1498 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Null, reader.TokenType)", span="2441-2441"];
m2_1499 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2443-2443"];
m2_1500 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Comment, reader.TokenType)", span="2444-2444"];
m2_1501 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2446-2446"];
m2_1502 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.EndConstructor, reader.TokenType)", span="2447-2447"];
m2_1503 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadContentDelimitedByComments()", span="2386-2386"];
m2_1031 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesIntegerArrayWithNoEnd()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesIntegerArrayWithNoEnd()", span="1698-1698"];
m2_1032 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesIntegerArrayWithNoEnd()", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(@''[1''))", span="1700-1700"];
m2_1033 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesIntegerArrayWithNoEnd()", file="JsonSchema.cs", label="ExceptionAssert.Throws<JsonReaderException>(\r\n                ''Unexpected end when reading bytes. Path '[0]', line 1, position 2.'',\r\n                () => { reader.ReadAsBytes(); })", span="1702-1704"];
m2_1034 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesIntegerArrayWithNoEnd()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesIntegerArrayWithNoEnd()", span="1698-1698"];
m2_1543 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", span="2513-2513"];
m2_1544 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="JsonSchema.cs", label="double d", span="2515-2515"];
m2_1545 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="JsonSchema.cs", label="d = Convert.ToDouble(''6.0221418e23'', CultureInfo.InvariantCulture)", span="2517-2517"];
m2_1546 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="JsonSchema.cs", label="Console.WriteLine(d.ToString(new CultureInfo(''fr-FR'')))", span="2518-2518"];
m2_1547 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="JsonSchema.cs", label="Console.WriteLine(d.ToString(''0.#############################################################################''))", span="2519-2519"];
m2_1548 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="JsonSchema.cs", label="string json = @''[0e-10,0E-10,0.25e-5,0.3e10,6.0221418e23]''", span="2524-2524"];
m2_1549 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="2526-2526"];
m2_1567 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="JsonSchema.cs", label="reader = new JsonTextReader(new StringReader(json))", span="2553-2553"];
m2_1550 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="JsonSchema.cs", label="reader.Read()", span="2528-2528"];
m2_1551 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="JsonSchema.cs", label="reader.Read()", span="2530-2530"];
m2_1552 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Float, reader.TokenType)", span="2531-2531"];
m2_1553 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="JsonSchema.cs", label="Assert.AreEqual(0d, reader.Value)", span="2532-2532"];
m2_1554 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="JsonSchema.cs", label="reader.Read()", span="2534-2534"];
m2_1555 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Float, reader.TokenType)", span="2535-2535"];
m2_1556 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="JsonSchema.cs", label="Assert.AreEqual(0d, reader.Value)", span="2536-2536"];
m2_1557 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="JsonSchema.cs", label="reader.Read()", span="2538-2538"];
m2_1558 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Float, reader.TokenType)", span="2539-2539"];
m2_1559 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="JsonSchema.cs", label="Assert.AreEqual(0.0000025d, reader.Value)", span="2540-2540"];
m2_1560 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="JsonSchema.cs", label="reader.Read()", span="2542-2542"];
m2_1561 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Float, reader.TokenType)", span="2543-2543"];
m2_1562 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="JsonSchema.cs", label="Assert.AreEqual(3000000000d, reader.Value)", span="2544-2544"];
m2_1563 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="JsonSchema.cs", label="reader.Read()", span="2546-2546"];
m2_1564 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Float, reader.TokenType)", span="2547-2547"];
m2_1565 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="JsonSchema.cs", label="Assert.AreEqual(602214180000000000000000d, reader.Value)", span="2548-2548"];
m2_1566 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="JsonSchema.cs", label="reader.Read()", span="2550-2550"];
m2_1568 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="JsonSchema.cs", label="reader.Read()", span="2555-2555"];
m2_1569 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="JsonSchema.cs", label="reader.ReadAsDecimal()", span="2557-2557"];
m2_1570 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Float, reader.TokenType)", span="2558-2558"];
m2_1571 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="JsonSchema.cs", label="Assert.AreEqual(0m, reader.Value)", span="2559-2559"];
m2_1572 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="JsonSchema.cs", label="reader.ReadAsDecimal()", span="2561-2561"];
m2_1573 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Float, reader.TokenType)", span="2562-2562"];
m2_1574 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="JsonSchema.cs", label="Assert.AreEqual(0m, reader.Value)", span="2563-2563"];
m2_1575 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="JsonSchema.cs", label="reader.ReadAsDecimal()", span="2565-2565"];
m2_1576 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Float, reader.TokenType)", span="2566-2566"];
m2_1577 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="JsonSchema.cs", label="Assert.AreEqual(0.0000025m, reader.Value)", span="2567-2567"];
m2_1578 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="JsonSchema.cs", label="reader.ReadAsDecimal()", span="2569-2569"];
m2_1579 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Float, reader.TokenType)", span="2570-2570"];
m2_1580 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="JsonSchema.cs", label="Assert.AreEqual(3000000000m, reader.Value)", span="2571-2571"];
m2_1581 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="JsonSchema.cs", label="reader.ReadAsDecimal()", span="2573-2573"];
m2_1582 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Float, reader.TokenType)", span="2574-2574"];
m2_1583 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="JsonSchema.cs", label="Assert.AreEqual(602214180000000000000000m, reader.Value)", span="2575-2575"];
m2_1584 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="JsonSchema.cs", label="reader.Read()", span="2577-2577"];
m2_1585 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ScientificNotation()", span="2513-2513"];
m2_1823 [cluster="Newtonsoft.Json.Tests.SlowStream.Write(byte[], int, int)", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.SlowStream.Write(byte[], int, int)", span="2950-2950"];
m2_1824 [cluster="Newtonsoft.Json.Tests.SlowStream.Write(byte[], int, int)", file="JsonSchema.cs", label="throw new NotSupportedException();", span="2952-2952"];
m2_1825 [cluster="Newtonsoft.Json.Tests.SlowStream.Write(byte[], int, int)", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.SlowStream.Write(byte[], int, int)", span="2950-2950"];
m2_766 [cluster="Newtonsoft.Json.JsonWriter.WriteStartObject()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.JsonWriter.WriteStartObject()", span="357-357"];
m2_971 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBadCharInArray()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBadCharInArray()", span="1604-1604"];
m2_972 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBadCharInArray()", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(@''[}''))", span="1606-1606"];
m2_973 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBadCharInArray()", file="JsonSchema.cs", label="reader.Read()", span="1608-1608"];
m2_974 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBadCharInArray()", file="JsonSchema.cs", label="ExceptionAssert.Throws<JsonReaderException>(\r\n                ''Unexpected character encountered while parsing value: }. Path '', line 1, position 1.'',\r\n                () => { reader.Read(); })", span="1610-1612"];
m2_975 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBadCharInArray()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBadCharInArray()", span="1604-1604"];
m2_92 [cluster="System.Globalization.StringInfo.StringInfo(string)", file="JsonSchema.cs", label="Entry System.Globalization.StringInfo.StringInfo(string)", span="0-0"];
m2_14 [cluster="System.IO.StringReader.StringReader(string)", file="JsonSchema.cs", label="Entry System.IO.StringReader.StringReader(string)", span="0-0"];
m2_139 [cluster="System.Console.WriteLine(object)", file="JsonSchema.cs", label="Entry System.Console.WriteLine(object)", span="0-0"];
m2_1130 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetWithMinutes()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetWithMinutes()", span="1851-1851"];
m2_1131 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetWithMinutes()", file="JsonSchema.cs", label="string json = @''{''''Offset'''':''''\/Date(946708260000-0631)\/''''}''", span="1853-1853"];
m2_1132 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetWithMinutes()", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="1855-1855"];
m2_1133 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetWithMinutes()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="1857-1857"];
m2_1134 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetWithMinutes()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="1858-1858"];
m2_1135 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetWithMinutes()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="1860-1860"];
m2_1136 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetWithMinutes()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="1861-1861"];
m2_1137 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetWithMinutes()", file="JsonSchema.cs", label="reader.ReadAsDateTimeOffset()", span="1863-1863"];
m2_1138 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetWithMinutes()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Date, reader.TokenType)", span="1864-1864"];
m2_1139 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetWithMinutes()", file="JsonSchema.cs", label="Assert.AreEqual(typeof(DateTimeOffset), reader.ValueType)", span="1865-1865"];
m2_1140 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetWithMinutes()", file="JsonSchema.cs", label="Assert.AreEqual(new DateTimeOffset(new DateTime(2000, 1, 1), TimeSpan.FromHours(-6).Add(TimeSpan.FromMinutes(-31))), reader.Value)", span="1866-1866"];
m2_1141 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetWithMinutes()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="1868-1868"];
m2_1142 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetWithMinutes()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.EndObject, reader.TokenType)", span="1869-1869"];
m2_1143 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetWithMinutes()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetWithMinutes()", span="1851-1851"];
m2_190 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_WhitespaceThenText()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_WhitespaceThenText()", span="427-427"];
m2_191 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_WhitespaceThenText()", file="JsonSchema.cs", label="string json = @'''hi' a''", span="429-429"];
m2_192 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_WhitespaceThenText()", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="431-431"];
m2_193 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_WhitespaceThenText()", file="JsonSchema.cs", label="ExceptionAssert.Throws<JsonReaderException>(\r\n                ''Additional text encountered after finished reading JSON content: a. Path '', line 1, position 5.'',\r\n                () =>\r\n                {\r\n                    while (reader.Read())\r\n                    {\r\n                    }\r\n                })", span="433-440"];
m2_194 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_WhitespaceThenText()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ParseAdditionalContent_WhitespaceThenText()", span="427-427"];
m2_367 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongJsonArray()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongJsonArray()", span="681-681"];
m2_368 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongJsonArray()", file="JsonSchema.cs", label="int valueCount = 10000", span="683-683"];
m2_369 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongJsonArray()", file="JsonSchema.cs", label="StringWriter sw = new StringWriter()", span="684-684"];
m2_373 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongJsonArray()", file="JsonSchema.cs", label="i < valueCount", span="687-687"];
m2_381 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongJsonArray()", file="JsonSchema.cs", label="i < valueCount", span="697-697"];
m2_370 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongJsonArray()", file="JsonSchema.cs", label="JsonTextWriter writer = new JsonTextWriter(sw)", span="685-685"];
m2_377 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongJsonArray()", file="JsonSchema.cs", label="string json = sw.ToString()", span="693-693"];
m2_371 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongJsonArray()", file="JsonSchema.cs", label="writer.WriteStartArray()", span="686-686"];
m2_374 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongJsonArray()", file="JsonSchema.cs", label="writer.WriteValue(i)", span="689-689"];
m2_376 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongJsonArray()", file="JsonSchema.cs", label="writer.WriteEndArray()", span="691-691"];
m2_372 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongJsonArray()", file="JsonSchema.cs", label="int i = 0", span="687-687"];
m2_375 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongJsonArray()", file="JsonSchema.cs", label="i++", span="687-687"];
m2_378 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongJsonArray()", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="695-695"];
m2_379 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongJsonArray()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="696-696"];
m2_382 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongJsonArray()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="699-699"];
m2_383 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongJsonArray()", file="JsonSchema.cs", label="Assert.AreEqual((long)i, reader.Value)", span="700-700"];
m2_385 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongJsonArray()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="702-702"];
m2_386 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongJsonArray()", file="JsonSchema.cs", label="Assert.IsFalse(reader.Read())", span="703-703"];
m2_380 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongJsonArray()", file="JsonSchema.cs", label="int i = 0", span="697-697"];
m2_384 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongJsonArray()", file="JsonSchema.cs", label="i++", span="697-697"];
m2_387 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongJsonArray()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadLongJsonArray()", span="681-681"];
m2_1087 [cluster="System.DateTimeOffset.DateTimeOffset(System.DateTime, System.TimeSpan)", file="JsonSchema.cs", label="Entry System.DateTimeOffset.DateTimeOffset(System.DateTime, System.TimeSpan)", span="0-0"];
m2_18 [cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(string, System.Action)", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(string, System.Action)", span="175-175"];
m2_1104 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetBadString()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetBadString()", span="1811-1811"];
m2_1105 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetBadString()", file="JsonSchema.cs", label="string json = @''{''''Offset'''':''''blablahbla''''}''", span="1813-1813"];
m2_1106 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetBadString()", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="1815-1815"];
m2_1107 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetBadString()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="1817-1817"];
m2_1108 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetBadString()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="1818-1818"];
m2_1109 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetBadString()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="1820-1820"];
m2_1110 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetBadString()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="1821-1821"];
m2_1111 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetBadString()", file="JsonSchema.cs", label="ExceptionAssert.Throws<JsonReaderException>(\r\n                ''Could not convert string to DateTimeOffset: blablahbla. Path 'Offset', line 1, position 22.'',\r\n                () => { reader.ReadAsDateTimeOffset(); })", span="1823-1825"];
m2_1112 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetBadString()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetBadString()", span="1811-1811"];
m2_1003 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalBadContent()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalBadContent()", span="1655-1655"];
m2_1004 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalBadContent()", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(@''new Date()''))", span="1657-1657"];
m2_1005 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalBadContent()", file="JsonSchema.cs", label="ExceptionAssert.Throws<JsonReaderException>(\r\n                ''Error reading decimal. Unexpected token: StartConstructor. Path '', line 1, position 9.'',\r\n                () => { reader.ReadAsDecimal(); })", span="1659-1661"];
m2_1006 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalBadContent()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDecimalBadContent()", span="1655-1655"];
m2_117 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.CloseInput()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.CloseInput()", span="278-278"];
m2_118 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.CloseInput()", file="JsonSchema.cs", label="MemoryStream ms = new MemoryStream()", span="280-280"];
m2_119 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.CloseInput()", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(new StreamReader(ms))", span="281-281"];
m2_120 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.CloseInput()", file="JsonSchema.cs", label="Assert.IsTrue(ms.CanRead)", span="283-283"];
m2_122 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.CloseInput()", file="JsonSchema.cs", label="Assert.IsFalse(ms.CanRead)", span="285-285"];
m2_121 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.CloseInput()", file="JsonSchema.cs", label="reader.Close()", span="284-284"];
m2_123 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.CloseInput()", file="JsonSchema.cs", label="ms = new MemoryStream()", span="287-287"];
m2_124 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.CloseInput()", file="JsonSchema.cs", label="reader = new JsonTextReader(new StreamReader(ms)) { CloseInput = false }", span="288-288"];
m2_125 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.CloseInput()", file="JsonSchema.cs", label="Assert.IsTrue(ms.CanRead)", span="290-290"];
m2_127 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.CloseInput()", file="JsonSchema.cs", label="Assert.IsTrue(ms.CanRead)", span="292-292"];
m2_126 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.CloseInput()", file="JsonSchema.cs", label="reader.Close()", span="291-291"];
m2_128 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.CloseInput()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.CloseInput()", span="278-278"];
m2_1060 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadHexidecimalWithAllLetters()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadHexidecimalWithAllLetters()", span="1745-1745"];
m2_1061 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadHexidecimalWithAllLetters()", file="JsonSchema.cs", label="string json = @''{''''text'''':0xabcdef12345}''", span="1747-1747"];
m2_1062 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadHexidecimalWithAllLetters()", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="1749-1749"];
m2_1063 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadHexidecimalWithAllLetters()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="1751-1751"];
m2_1064 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadHexidecimalWithAllLetters()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="1752-1752"];
m2_1065 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadHexidecimalWithAllLetters()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="1754-1754"];
m2_1066 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadHexidecimalWithAllLetters()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="1755-1755"];
m2_1067 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadHexidecimalWithAllLetters()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="1757-1757"];
m2_1068 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadHexidecimalWithAllLetters()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Integer, reader.TokenType)", span="1758-1758"];
m2_1069 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadHexidecimalWithAllLetters()", file="JsonSchema.cs", label="Assert.AreEqual(11806310474565, reader.Value)", span="1759-1759"];
m2_1070 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadHexidecimalWithAllLetters()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="1761-1761"];
m2_1071 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadHexidecimalWithAllLetters()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.EndObject, reader.TokenType)", span="1762-1762"];
m2_1072 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadHexidecimalWithAllLetters()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadHexidecimalWithAllLetters()", span="1745-1745"];
m2_1089 [cluster="System.TimeSpan.FromHours(double)", file="JsonSchema.cs", label="Entry System.TimeSpan.FromHours(double)", span="0-0"];
m2_1116 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetHoursOnly()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetHoursOnly()", span="1829-1829"];
m2_1117 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetHoursOnly()", file="JsonSchema.cs", label="string json = ''{\''Offset\'':\''\\/Date(946663200000+06)\\/\''}''", span="1831-1831"];
m2_1118 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetHoursOnly()", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="1833-1833"];
m2_1119 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetHoursOnly()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="1835-1835"];
m2_1120 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetHoursOnly()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="1836-1836"];
m2_1121 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetHoursOnly()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="1838-1838"];
m2_1122 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetHoursOnly()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="1839-1839"];
m2_1123 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetHoursOnly()", file="JsonSchema.cs", label="reader.ReadAsDateTimeOffset()", span="1841-1841"];
m2_1124 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetHoursOnly()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Date, reader.TokenType)", span="1842-1842"];
m2_1125 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetHoursOnly()", file="JsonSchema.cs", label="Assert.AreEqual(typeof(DateTimeOffset), reader.ValueType)", span="1843-1843"];
m2_1126 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetHoursOnly()", file="JsonSchema.cs", label="Assert.AreEqual(new DateTimeOffset(new DateTime(2000, 1, 1), TimeSpan.FromHours(6)), reader.Value)", span="1844-1844"];
m2_1127 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetHoursOnly()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="1846-1846"];
m2_1128 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetHoursOnly()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.EndObject, reader.TokenType)", span="1847-1847"];
m2_1129 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetHoursOnly()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetHoursOnly()", span="1829-1829"];
m2_353 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndOfString()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndOfString()", span="661-661"];
m2_354 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndOfString()", file="JsonSchema.cs", label="JsonReader reader = new JsonTextReader(new StringReader('''hi''))", span="663-663"];
m2_355 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndOfString()", file="JsonSchema.cs", label="ExceptionAssert.Throws<JsonReaderException>(\r\n                ''Unterminated string. Expected delimiter: '. Path '', line 1, position 3.'',\r\n                () => { reader.Read(); })", span="665-667"];
m2_356 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndOfString()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.UnexpectedEndOfString()", span="661-661"];
m2_1378 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseConstructorWithUnexpectedEnd()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ParseConstructorWithUnexpectedEnd()", span="2256-2256"];
m2_1379 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseConstructorWithUnexpectedEnd()", file="JsonSchema.cs", label="string json = ''new Dat''", span="2258-2258"];
m2_1380 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseConstructorWithUnexpectedEnd()", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="2259-2259"];
m2_1381 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseConstructorWithUnexpectedEnd()", file="JsonSchema.cs", label="ExceptionAssert.Throws<JsonReaderException>(\r\n                ''Unexpected end while parsing constructor. Path '', line 1, position 7.'',\r\n                () => { reader.Read(); })", span="2261-2263"];
m2_1382 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseConstructorWithUnexpectedEnd()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ParseConstructorWithUnexpectedEnd()", span="2256-2256"];
m2_764 [cluster="Newtonsoft.Json.JsonWriter.WriteStartArray()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.JsonWriter.WriteStartArray()", span="373-373"];
m2_1675 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", span="2710-2710"];
m2_1676 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="JsonSchema.cs", label="string json = @''[''''1970-01-01T00:00:00Z'''',''''\/Date(0)\/'''']''", span="2712-2712"];
m2_1677 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="2714-2714"];
m2_1687 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="JsonSchema.cs", label="reader = new JsonTextReader(new StringReader(json))", span="2727-2727"];
m2_1697 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="JsonSchema.cs", label="reader = new JsonTextReader(new StringReader(json))", span="2740-2740"];
m2_1707 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="JsonSchema.cs", label="reader = new JsonTextReader(new StringReader(json))", span="2753-2753"];
m2_1717 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="JsonSchema.cs", label="reader = new JsonTextReader(new StringReader(json))", span="2766-2766"];
m2_1678 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="JsonSchema.cs", label="reader.DateParseHandling = Json.DateParseHandling.DateTime", span="2715-2715"];
m2_1679 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2717-2717"];
m2_1680 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2718-2718"];
m2_1681 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="JsonSchema.cs", label="Assert.AreEqual(new DateTime(DateTimeUtils.InitialJavaScriptDateTicks, DateTimeKind.Utc), reader.Value)", span="2719-2719"];
m2_1682 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="JsonSchema.cs", label="Assert.AreEqual(typeof(DateTime), reader.ValueType)", span="2720-2720"];
m2_1683 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2721-2721"];
m2_1684 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="JsonSchema.cs", label="Assert.AreEqual(new DateTime(DateTimeUtils.InitialJavaScriptDateTicks, DateTimeKind.Utc), reader.Value)", span="2722-2722"];
m2_1685 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="JsonSchema.cs", label="Assert.AreEqual(typeof(DateTime), reader.ValueType)", span="2723-2723"];
m2_1686 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2724-2724"];
m2_1688 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="JsonSchema.cs", label="reader.DateParseHandling = Json.DateParseHandling.DateTimeOffset", span="2728-2728"];
m2_1689 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2730-2730"];
m2_1690 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2731-2731"];
m2_1691 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="JsonSchema.cs", label="Assert.AreEqual(new DateTimeOffset(DateTimeUtils.InitialJavaScriptDateTicks, TimeSpan.Zero), reader.Value)", span="2732-2732"];
m2_1692 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="JsonSchema.cs", label="Assert.AreEqual(typeof(DateTimeOffset), reader.ValueType)", span="2733-2733"];
m2_1693 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2734-2734"];
m2_1694 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="JsonSchema.cs", label="Assert.AreEqual(new DateTimeOffset(DateTimeUtils.InitialJavaScriptDateTicks, TimeSpan.Zero), reader.Value)", span="2735-2735"];
m2_1695 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="JsonSchema.cs", label="Assert.AreEqual(typeof(DateTimeOffset), reader.ValueType)", span="2736-2736"];
m2_1696 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2737-2737"];
m2_1698 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="JsonSchema.cs", label="reader.DateParseHandling = Json.DateParseHandling.None", span="2741-2741"];
m2_1699 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2743-2743"];
m2_1700 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2744-2744"];
m2_1701 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="JsonSchema.cs", label="Assert.AreEqual(@''1970-01-01T00:00:00Z'', reader.Value)", span="2745-2745"];
m2_1702 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="JsonSchema.cs", label="Assert.AreEqual(typeof(string), reader.ValueType)", span="2746-2746"];
m2_1703 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2747-2747"];
m2_1704 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="JsonSchema.cs", label="Assert.AreEqual(@''/Date(0)/'', reader.Value)", span="2748-2748"];
m2_1705 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="JsonSchema.cs", label="Assert.AreEqual(typeof(string), reader.ValueType)", span="2749-2749"];
m2_1706 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2750-2750"];
m2_1708 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="JsonSchema.cs", label="reader.DateParseHandling = Json.DateParseHandling.DateTime", span="2754-2754"];
m2_1709 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2756-2756"];
m2_1710 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="JsonSchema.cs", label="reader.ReadAsDateTimeOffset()", span="2757-2757"];
m2_1711 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="JsonSchema.cs", label="Assert.AreEqual(new DateTimeOffset(DateTimeUtils.InitialJavaScriptDateTicks, TimeSpan.Zero), reader.Value)", span="2758-2758"];
m2_1712 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="JsonSchema.cs", label="Assert.AreEqual(typeof(DateTimeOffset), reader.ValueType)", span="2759-2759"];
m2_1713 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="JsonSchema.cs", label="reader.ReadAsDateTimeOffset()", span="2760-2760"];
m2_1714 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="JsonSchema.cs", label="Assert.AreEqual(new DateTimeOffset(DateTimeUtils.InitialJavaScriptDateTicks, TimeSpan.Zero), reader.Value)", span="2761-2761"];
m2_1715 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="JsonSchema.cs", label="Assert.AreEqual(typeof(DateTimeOffset), reader.ValueType)", span="2762-2762"];
m2_1716 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2763-2763"];
m2_1718 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="JsonSchema.cs", label="reader.DateParseHandling = Json.DateParseHandling.DateTimeOffset", span="2767-2767"];
m2_1719 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2769-2769"];
m2_1720 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="JsonSchema.cs", label="reader.ReadAsDateTime()", span="2770-2770"];
m2_1721 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="JsonSchema.cs", label="Assert.AreEqual(new DateTime(DateTimeUtils.InitialJavaScriptDateTicks, DateTimeKind.Utc), reader.Value)", span="2771-2771"];
m2_1722 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="JsonSchema.cs", label="Assert.AreEqual(typeof(DateTime), reader.ValueType)", span="2772-2772"];
m2_1723 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="JsonSchema.cs", label="reader.ReadAsDateTime()", span="2773-2773"];
m2_1724 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="JsonSchema.cs", label="Assert.AreEqual(new DateTime(DateTimeUtils.InitialJavaScriptDateTicks, DateTimeKind.Utc), reader.Value)", span="2774-2774"];
m2_1725 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="JsonSchema.cs", label="Assert.AreEqual(typeof(DateTime), reader.ValueType)", span="2775-2775"];
m2_1726 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2776-2776"];
m2_1727 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.DateParseHandling()", span="2710-2710"];
m2_93 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairReplacement()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairReplacement()", span="231-231"];
m2_94 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairReplacement()", file="JsonSchema.cs", label="Assert.AreEqual(''ABC \ud800\udc00 DEF'', ReadString(''ABC \\ud800\\udc00 DEF''))", span="234-234"];
m2_95 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairReplacement()", file="JsonSchema.cs", label="Assert.AreEqual(''ABC \ufffd\ufffd DEF'', ReadString(''ABC \\ud800\\ud800 DEF''))", span="237-237"];
m2_96 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairReplacement()", file="JsonSchema.cs", label="Assert.AreEqual(''ABC \ufffd\ufffd\u1234 DEF'', ReadString(''ABC \\ud800\\ud800\\u1234 DEF''))", span="240-240"];
m2_97 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairReplacement()", file="JsonSchema.cs", label="Assert.AreEqual(''ABC \ufffd\ufffd\ufffd DEF'', ReadString(''ABC \\ud800\\ud800\\ud800 DEF''))", span="243-243"];
m2_98 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairReplacement()", file="JsonSchema.cs", label="Assert.AreEqual(''ABC \ufffd\ud800\udc00 DEF'', ReadString(''ABC \\ud800\\ud800\\udc00 DEF''))", span="246-246"];
m2_99 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairReplacement()", file="JsonSchema.cs", label="Assert.AreEqual(''ABC \ufffd'', ReadString(''ABC \\ud800''))", span="249-249"];
m2_100 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairReplacement()", file="JsonSchema.cs", label="Assert.AreEqual(''ABC \ufffd DEF'', ReadString(''ABC \\ud800 DEF''))", span="252-252"];
m2_101 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairReplacement()", file="JsonSchema.cs", label="Assert.AreEqual(''ABC \ufffd\ufffd DEF'', ReadString(''ABC \\udc00\\ud800 DEF''))", span="255-255"];
m2_102 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairReplacement()", file="JsonSchema.cs", label="Assert.AreEqual(''\ufffd\ufffd\ufffd'', ReadString(''\udc00\ud800\ud800''))", span="258-258"];
m2_103 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairReplacement()", file="JsonSchema.cs", label="Assert.AreEqual(''ABC \ufffd\b'', ReadString(''ABC \\ud800\\b''))", span="260-260"];
m2_104 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairReplacement()", file="JsonSchema.cs", label="Assert.AreEqual(''ABC \ufffd '', ReadString(''ABC \\ud800 ''))", span="261-261"];
m2_105 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairReplacement()", file="JsonSchema.cs", label="Assert.AreEqual(''ABC \b\ufffd'', ReadString(''ABC \\b\\ud800''))", span="262-262"];
m2_106 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairReplacement()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.SurrogatePairReplacement()", span="231-231"];
m2_997 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNoContent()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNoContent()", span="1645-1645"];
m2_998 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNoContent()", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(@''''))", span="1647-1647"];
m2_999 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNoContent()", file="JsonSchema.cs", label="Assert.IsNull(reader.ReadAsDateTimeOffset())", span="1649-1649"];
m2_1000 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNoContent()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.None, reader.TokenType)", span="1650-1650"];
m2_1001 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNoContent()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNoContent()", span="1645-1645"];
m2_1806 [cluster="Newtonsoft.Json.Tests.SlowStream.Read(byte[], int, int)", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.SlowStream.Read(byte[], int, int)", span="2927-2927"];
m2_1807 [cluster="Newtonsoft.Json.Tests.SlowStream.Read(byte[], int, int)", file="JsonSchema.cs", label="int toReturn = Math.Min(count, bytesPerRead)", span="2929-2929"];
m2_1810 [cluster="Newtonsoft.Json.Tests.SlowStream.Read(byte[], int, int)", file="JsonSchema.cs", label="Array.Copy(bytes, totalBytesRead, buffer, offset, toReturn)", span="2933-2933"];
m2_1808 [cluster="Newtonsoft.Json.Tests.SlowStream.Read(byte[], int, int)", file="JsonSchema.cs", label="toReturn = Math.Min(toReturn, bytes.Length - totalBytesRead)", span="2930-2930"];
m2_1809 [cluster="Newtonsoft.Json.Tests.SlowStream.Read(byte[], int, int)", file="JsonSchema.cs", label="toReturn > 0", span="2931-2931"];
m2_1811 [cluster="Newtonsoft.Json.Tests.SlowStream.Read(byte[], int, int)", file="JsonSchema.cs", label="totalBytesRead += toReturn", span="2936-2936"];
m2_1812 [cluster="Newtonsoft.Json.Tests.SlowStream.Read(byte[], int, int)", file="JsonSchema.cs", label="return toReturn;", span="2937-2937"];
m2_1813 [cluster="Newtonsoft.Json.Tests.SlowStream.Read(byte[], int, int)", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.SlowStream.Read(byte[], int, int)", span="2927-2927"];
m2_1518 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseNumbers()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ParseNumbers()", span="2475-2475"];
m2_1519 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseNumbers()", file="JsonSchema.cs", label="string json = @''[0,1,2 , 3]''", span="2477-2477"];
m2_1520 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseNumbers()", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="2479-2479"];
m2_1521 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseNumbers()", file="JsonSchema.cs", label="reader.Read()", span="2481-2481"];
m2_1522 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseNumbers()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.StartArray, reader.TokenType)", span="2482-2482"];
m2_1523 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseNumbers()", file="JsonSchema.cs", label="reader.Read()", span="2484-2484"];
m2_1524 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseNumbers()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Integer, reader.TokenType)", span="2485-2485"];
m2_1525 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseNumbers()", file="JsonSchema.cs", label="reader.Read()", span="2487-2487"];
m2_1526 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseNumbers()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Integer, reader.TokenType)", span="2488-2488"];
m2_1527 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseNumbers()", file="JsonSchema.cs", label="reader.Read()", span="2490-2490"];
m2_1528 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseNumbers()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Integer, reader.TokenType)", span="2491-2491"];
m2_1529 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseNumbers()", file="JsonSchema.cs", label="reader.Read()", span="2493-2493"];
m2_1530 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseNumbers()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Integer, reader.TokenType)", span="2494-2494"];
m2_1531 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseNumbers()", file="JsonSchema.cs", label="reader.Read()", span="2496-2496"];
m2_1532 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseNumbers()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.EndArray, reader.TokenType)", span="2497-2497"];
m2_1533 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseNumbers()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ParseNumbers()", span="2475-2475"];
m2_22 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatParseHandling()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.FloatParseHandling()", span="73-73"];
m2_23 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatParseHandling()", file="JsonSchema.cs", label="string json = ''[1.0,1,9.9,1E-06]''", span="75-75"];
m2_24 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatParseHandling()", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="77-77"];
m2_25 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatParseHandling()", file="JsonSchema.cs", label="reader.FloatParseHandling = Json.FloatParseHandling.Decimal", span="78-78"];
m2_26 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatParseHandling()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="80-80"];
m2_27 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatParseHandling()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.StartArray, reader.TokenType)", span="81-81"];
m2_28 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatParseHandling()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="83-83"];
m2_29 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatParseHandling()", file="JsonSchema.cs", label="Assert.AreEqual(1.0m, reader.Value)", span="84-84"];
m2_30 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatParseHandling()", file="JsonSchema.cs", label="Assert.AreEqual(typeof(decimal), reader.ValueType)", span="85-85"];
m2_31 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatParseHandling()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Float, reader.TokenType)", span="86-86"];
m2_32 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatParseHandling()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="88-88"];
m2_33 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatParseHandling()", file="JsonSchema.cs", label="Assert.AreEqual(1L, reader.Value)", span="89-89"];
m2_34 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatParseHandling()", file="JsonSchema.cs", label="Assert.AreEqual(typeof(long), reader.ValueType)", span="90-90"];
m2_35 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatParseHandling()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Integer, reader.TokenType)", span="91-91"];
m2_36 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatParseHandling()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="93-93"];
m2_37 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatParseHandling()", file="JsonSchema.cs", label="Assert.AreEqual(9.9m, reader.Value)", span="94-94"];
m2_38 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatParseHandling()", file="JsonSchema.cs", label="Assert.AreEqual(typeof(decimal), reader.ValueType)", span="95-95"];
m2_39 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatParseHandling()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Float, reader.TokenType)", span="96-96"];
m2_40 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatParseHandling()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="98-98"];
m2_41 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatParseHandling()", file="JsonSchema.cs", label="Assert.AreEqual(Convert.ToDecimal(1E-06), reader.Value)", span="99-99"];
m2_42 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatParseHandling()", file="JsonSchema.cs", label="Assert.AreEqual(typeof(decimal), reader.ValueType)", span="100-100"];
m2_43 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatParseHandling()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Float, reader.TokenType)", span="101-101"];
m2_44 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatParseHandling()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="103-103"];
m2_45 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatParseHandling()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.EndArray, reader.TokenType)", span="104-104"];
m2_46 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.FloatParseHandling()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.FloatParseHandling()", span="73-73"];
m2_1024 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesIntegerArrayWithComments()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesIntegerArrayWithComments()", span="1687-1687"];
m2_1025 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesIntegerArrayWithComments()", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(@''[/*hi*/1/*hi*/,2/*hi*/]''))", span="1689-1689"];
m2_1026 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesIntegerArrayWithComments()", file="JsonSchema.cs", label="byte[] data = reader.ReadAsBytes()", span="1691-1691"];
m2_1027 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesIntegerArrayWithComments()", file="JsonSchema.cs", label="Assert.AreEqual(2, data.Length)", span="1692-1692"];
m2_1028 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesIntegerArrayWithComments()", file="JsonSchema.cs", label="Assert.AreEqual(1, data[0])", span="1693-1693"];
m2_1029 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesIntegerArrayWithComments()", file="JsonSchema.cs", label="Assert.AreEqual(2, data[1])", span="1694-1694"];
m2_1030 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesIntegerArrayWithComments()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesIntegerArrayWithComments()", span="1687-1687"];
m2_116 [cluster="System.IO.StreamReader.StreamReader(System.IO.Stream)", file="JsonSchema.cs", label="Entry System.IO.StreamReader.StreamReader(System.IO.Stream)", span="0-0"];
m2_911 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumber()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumber()", span="1517-1517"];
m2_912 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumber()", file="JsonSchema.cs", label="StringReader s = new StringReader(@''[0372, 0xFA, 0XFA]'')", span="1519-1519"];
m2_913 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumber()", file="JsonSchema.cs", label="JsonTextReader jsonReader = new JsonTextReader(s)", span="1520-1520"];
m2_914 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumber()", file="JsonSchema.cs", label="Assert.IsTrue(jsonReader.Read())", span="1522-1522"];
m2_915 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumber()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.StartArray, jsonReader.TokenType)", span="1523-1523"];
m2_916 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumber()", file="JsonSchema.cs", label="Assert.IsTrue(jsonReader.Read())", span="1525-1525"];
m2_917 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumber()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Integer, jsonReader.TokenType)", span="1526-1526"];
m2_918 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumber()", file="JsonSchema.cs", label="Assert.AreEqual(250L, jsonReader.Value)", span="1527-1527"];
m2_919 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumber()", file="JsonSchema.cs", label="Assert.IsTrue(jsonReader.Read())", span="1529-1529"];
m2_920 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumber()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Integer, jsonReader.TokenType)", span="1530-1530"];
m2_921 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumber()", file="JsonSchema.cs", label="Assert.AreEqual(250L, jsonReader.Value)", span="1531-1531"];
m2_922 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumber()", file="JsonSchema.cs", label="Assert.IsTrue(jsonReader.Read())", span="1533-1533"];
m2_923 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumber()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Integer, jsonReader.TokenType)", span="1534-1534"];
m2_924 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumber()", file="JsonSchema.cs", label="Assert.AreEqual(250L, jsonReader.Value)", span="1535-1535"];
m2_925 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumber()", file="JsonSchema.cs", label="Assert.IsTrue(jsonReader.Read())", span="1537-1537"];
m2_926 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumber()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.EndArray, jsonReader.TokenType)", span="1538-1538"];
m2_927 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumber()", file="JsonSchema.cs", label="Assert.IsFalse(jsonReader.Read())", span="1540-1540"];
m2_928 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumber()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadOctalNumber()", span="1517-1517"];
m2_1313 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseLineFeedDelimitedConstructor()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ParseLineFeedDelimitedConstructor()", span="2155-2155"];
m2_1314 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseLineFeedDelimitedConstructor()", file="JsonSchema.cs", label="string json = ''new Date\n()''", span="2157-2157"];
m2_1315 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseLineFeedDelimitedConstructor()", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="2158-2158"];
m2_1316 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseLineFeedDelimitedConstructor()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2160-2160"];
m2_1317 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseLineFeedDelimitedConstructor()", file="JsonSchema.cs", label="Assert.AreEqual(''Date'', reader.Value)", span="2161-2161"];
m2_1318 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseLineFeedDelimitedConstructor()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.StartConstructor, reader.TokenType)", span="2162-2162"];
m2_1319 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseLineFeedDelimitedConstructor()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2164-2164"];
m2_1320 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseLineFeedDelimitedConstructor()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.EndConstructor, reader.TokenType)", span="2165-2165"];
m2_1321 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseLineFeedDelimitedConstructor()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ParseLineFeedDelimitedConstructor()", span="2155-2155"];
m2_634 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInObject()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInObject()", span="1111-1111"];
m2_635 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInObject()", file="JsonSchema.cs", label="string helloWorld = ''Hello world!''", span="1113-1113"];
m2_636 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInObject()", file="JsonSchema.cs", label="byte[] helloWorldData = Encoding.UTF8.GetBytes(helloWorld)", span="1114-1114"];
m2_637 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInObject()", file="JsonSchema.cs", label="JsonReader reader = new JsonTextReader(new StringReader(@''{num:1,data:''' + Convert.ToBase64String(helloWorldData) + @'''}''))", span="1116-1116"];
m2_645 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInObject()", file="JsonSchema.cs", label="CollectionAssert.AreEquivalent(helloWorldData, data)", span="1124-1124"];
m2_638 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInObject()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="1117-1117"];
m2_639 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInObject()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="1118-1118"];
m2_640 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInObject()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="1119-1119"];
m2_641 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInObject()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="1120-1120"];
m2_642 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInObject()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Integer, reader.TokenType)", span="1121-1121"];
m2_643 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInObject()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="1122-1122"];
m2_644 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInObject()", file="JsonSchema.cs", label="byte[] data = reader.ReadAsBytes()", span="1123-1123"];
m2_646 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInObject()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Bytes, reader.TokenType)", span="1125-1125"];
m2_647 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInObject()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="1126-1126"];
m2_648 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInObject()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.EndObject, reader.TokenType)", span="1127-1127"];
m2_649 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInObject()", file="JsonSchema.cs", label="Assert.IsFalse(reader.Read())", span="1129-1129"];
m2_650 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInObject()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadBytesFollowingNumberInObject()", span="1111-1111"];
m2_484 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt64Overflow_Negative()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt64Overflow_Negative()", span="856-856"];
m2_485 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt64Overflow_Negative()", file="JsonSchema.cs", label="BigInteger i = new BigInteger(long.MinValue)", span="858-858"];
m2_486 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt64Overflow_Negative()", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(i.ToString(CultureInfo.InvariantCulture)))", span="860-860"];
m2_491 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt64Overflow_Negative()", file="JsonSchema.cs", label="BigInteger total = i + -j", span="866-866"];
m2_487 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt64Overflow_Negative()", file="JsonSchema.cs", label="reader.Read()", span="861-861"];
m2_488 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt64Overflow_Negative()", file="JsonSchema.cs", label="Assert.AreEqual(typeof(long), reader.ValueType)", span="862-862"];
m2_489 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt64Overflow_Negative()", file="JsonSchema.cs", label="int j = 1", span="864-864"];
m2_490 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt64Overflow_Negative()", file="JsonSchema.cs", label="j < 1000", span="864-864"];
m2_495 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt64Overflow_Negative()", file="JsonSchema.cs", label="j++", span="864-864"];
m2_492 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt64Overflow_Negative()", file="JsonSchema.cs", label="reader = new JsonTextReader(new StringReader(total.ToString(CultureInfo.InvariantCulture)))", span="868-868"];
m2_493 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt64Overflow_Negative()", file="JsonSchema.cs", label="reader.Read()", span="869-869"];
m2_494 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt64Overflow_Negative()", file="JsonSchema.cs", label="Assert.AreEqual(typeof(BigInteger), reader.ValueType)", span="871-871"];
m2_496 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt64Overflow_Negative()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadInt64Overflow_Negative()", span="856-856"];
m2_388 [cluster="System.IO.StringWriter.StringWriter()", file="JsonSchema.cs", label="Entry System.IO.StringWriter.StringWriter()", span="0-0"];
m2_481 [cluster="BigInteger.cstr", file="JsonSchema.cs", label="Entry BigInteger.cstr", span=""];
m2_775 [cluster="Newtonsoft.Json.JsonSerializer.Deserialize(Newtonsoft.Json.JsonReader)", file="JsonSchema.cs", label="Entry Newtonsoft.Json.JsonSerializer.Deserialize(Newtonsoft.Json.JsonReader)", span="614-614"];
m2_985 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesNoContent()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesNoContent()", span="1625-1625"];
m2_986 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesNoContent()", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(@''''))", span="1627-1627"];
m2_987 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesNoContent()", file="JsonSchema.cs", label="Assert.IsNull(reader.ReadAsBytes())", span="1629-1629"];
m2_988 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesNoContent()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.None, reader.TokenType)", span="1630-1630"];
m2_989 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesNoContent()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesNoContent()", span="1625-1625"];
m2_771 [cluster="Newtonsoft.Json.JsonWriter.WriteEndObject()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.JsonWriter.WriteEndObject()", span="365-365"];
m2_534 [cluster="Newtonsoft.Json.JsonReader.ReadAsBytes()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.JsonReader.ReadAsBytes()", span="372-372"];
m2_1730 [cluster="Newtonsoft.Json.JsonTextReader.ReadAsDateTime()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.JsonTextReader.ReadAsDateTime()", span="353-353"];
m2_366 [cluster="string.String(char, int)", file="JsonSchema.cs", label="Entry string.String(char, int)", span="0-0"];
m2_1322 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseArrayWithMissingValues()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ParseArrayWithMissingValues()", span="2169-2169"];
m2_1323 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseArrayWithMissingValues()", file="JsonSchema.cs", label="string json = ''[,,, \n\r\n \0   \r  , ,    ]''", span="2171-2171"];
m2_1324 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseArrayWithMissingValues()", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="2172-2172"];
m2_1325 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseArrayWithMissingValues()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2174-2174"];
m2_1326 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseArrayWithMissingValues()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.StartArray, reader.TokenType)", span="2175-2175"];
m2_1327 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseArrayWithMissingValues()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2177-2177"];
m2_1328 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseArrayWithMissingValues()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Undefined, reader.TokenType)", span="2178-2178"];
m2_1329 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseArrayWithMissingValues()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2180-2180"];
m2_1330 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseArrayWithMissingValues()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Undefined, reader.TokenType)", span="2181-2181"];
m2_1331 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseArrayWithMissingValues()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2183-2183"];
m2_1332 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseArrayWithMissingValues()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Undefined, reader.TokenType)", span="2184-2184"];
m2_1333 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseArrayWithMissingValues()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2186-2186"];
m2_1334 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseArrayWithMissingValues()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Undefined, reader.TokenType)", span="2187-2187"];
m2_1335 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseArrayWithMissingValues()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2189-2189"];
m2_1336 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseArrayWithMissingValues()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Undefined, reader.TokenType)", span="2190-2190"];
m2_1337 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseArrayWithMissingValues()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="2192-2192"];
m2_1338 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseArrayWithMissingValues()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.EndArray, reader.TokenType)", span="2193-2193"];
m2_1339 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ParseArrayWithMissingValues()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ParseArrayWithMissingValues()", span="2169-2169"];
m2_1161 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetUnitedStatesDate()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetUnitedStatesDate()", span="1895-1895"];
m2_1162 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetUnitedStatesDate()", file="JsonSchema.cs", label="string json = @''{''''Offset'''':''''1/30/2011''''}''", span="1897-1897"];
m2_1163 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetUnitedStatesDate()", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="1899-1899"];
m2_1164 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetUnitedStatesDate()", file="JsonSchema.cs", label="reader.Culture = new CultureInfo(''en-US'')", span="1900-1900"];
m2_1165 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetUnitedStatesDate()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="1902-1902"];
m2_1166 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetUnitedStatesDate()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="1903-1903"];
m2_1167 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetUnitedStatesDate()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="1905-1905"];
m2_1168 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetUnitedStatesDate()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="1906-1906"];
m2_1169 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetUnitedStatesDate()", file="JsonSchema.cs", label="reader.ReadAsDateTimeOffset()", span="1908-1908"];
m2_1170 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetUnitedStatesDate()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Date, reader.TokenType)", span="1909-1909"];
m2_1171 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetUnitedStatesDate()", file="JsonSchema.cs", label="Assert.AreEqual(typeof(DateTimeOffset), reader.ValueType)", span="1910-1910"];
m2_1172 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetUnitedStatesDate()", file="JsonSchema.cs", label="DateTimeOffset dt = (DateTimeOffset)reader.Value", span="1912-1912"];
m2_1174 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetUnitedStatesDate()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="1915-1915"];
m2_1175 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetUnitedStatesDate()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.EndObject, reader.TokenType)", span="1916-1916"];
m2_1173 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetUnitedStatesDate()", file="JsonSchema.cs", label="Assert.AreEqual(new DateTime(2011, 1, 30, 0, 0, 0, DateTimeKind.Unspecified), dt.DateTime)", span="1913-1913"];
m2_1176 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetUnitedStatesDate()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetUnitedStatesDate()", span="1895-1895"];
m2_390 [cluster="Newtonsoft.Json.JsonTextWriter.WriteStartArray()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.JsonTextWriter.WriteStartArray()", span="166-166"];
m2_1160 [cluster="System.DateTime.DateTime(int, int, int, int, int, int, System.DateTimeKind)", file="JsonSchema.cs", label="Entry System.DateTime.DateTime(int, int, int, int, int, int, System.DateTimeKind)", span="0-0"];
m2_1804 [cluster="Newtonsoft.Json.Tests.SlowStream.Flush()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.SlowStream.Flush()", span="2912-2912"];
m2_1805 [cluster="Newtonsoft.Json.Tests.SlowStream.Flush()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.SlowStream.Flush()", span="2912-2912"];
m2_773 [cluster="System.Text.StringBuilder.ToString()", file="JsonSchema.cs", label="Entry System.Text.StringBuilder.ToString()", span="0-0"];
m2_451 [cluster="Newtonsoft.Json.JsonTextReader.ReadAsInt32()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.JsonTextReader.ReadAsInt32()", span="335-335"];
m2_114 [cluster="System.IO.MemoryStream.MemoryStream(byte[])", file="JsonSchema.cs", label="Entry System.IO.MemoryStream.MemoryStream(byte[])", span="0-0"];
m2_1010 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesBadContent()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesBadContent()", span="1665-1665"];
m2_1011 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesBadContent()", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(@''new Date()''))", span="1667-1667"];
m2_1012 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesBadContent()", file="JsonSchema.cs", label="ExceptionAssert.Throws<JsonReaderException>(\r\n                ''Error reading bytes. Unexpected token: StartConstructor. Path '', line 1, position 9.'',\r\n                () => { reader.ReadAsBytes(); })", span="1669-1671"];
m2_1013 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesBadContent()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsBytesBadContent()", span="1665-1665"];
m2_115 [cluster="System.Text.Encoding.GetBytes(string)", file="JsonSchema.cs", label="Entry System.Text.Encoding.GetBytes(string)", span="0-0"];
m2_768 [cluster="Newtonsoft.Json.JsonWriter.WriteValue(int)", file="JsonSchema.cs", label="Entry Newtonsoft.Json.JsonWriter.WriteValue(int)", span="819-819"];
m2_1090 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNegative()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNegative()", span="1789-1789"];
m2_1091 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNegative()", file="JsonSchema.cs", label="string json = @''{''''Offset'''':''''\/Date(946706400000-0600)\/''''}''", span="1791-1791"];
m2_1092 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNegative()", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="1793-1793"];
m2_1093 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNegative()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="1795-1795"];
m2_1094 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNegative()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="1796-1796"];
m2_1095 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNegative()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="1798-1798"];
m2_1096 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNegative()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="1799-1799"];
m2_1097 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNegative()", file="JsonSchema.cs", label="reader.ReadAsDateTimeOffset()", span="1801-1801"];
m2_1098 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNegative()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.Date, reader.TokenType)", span="1802-1802"];
m2_1099 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNegative()", file="JsonSchema.cs", label="Assert.AreEqual(typeof(DateTimeOffset), reader.ValueType)", span="1803-1803"];
m2_1100 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNegative()", file="JsonSchema.cs", label="Assert.AreEqual(new DateTimeOffset(new DateTime(2000, 1, 1), TimeSpan.FromHours(-6)), reader.Value)", span="1804-1804"];
m2_1101 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNegative()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="1806-1806"];
m2_1102 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNegative()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.EndObject, reader.TokenType)", span="1807-1807"];
m2_1103 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNegative()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadAsDateTimeOffsetNegative()", span="1789-1789"];
m2_1218 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MatchWithInsufficentCharacters()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.MatchWithInsufficentCharacters()", span="1983-1983"];
m2_1219 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MatchWithInsufficentCharacters()", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(@''nul''))", span="1985-1985"];
m2_1220 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MatchWithInsufficentCharacters()", file="JsonSchema.cs", label="ExceptionAssert.Throws<JsonReaderException>(\r\n                ''Error parsing null value. Path '', line 0, position 0.'',\r\n                () => { reader.Read(); })", span="1987-1989"];
m2_1221 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.MatchWithInsufficentCharacters()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.MatchWithInsufficentCharacters()", span="1983-1983"];
m2_1589 [cluster="double.ToString(string)", file="JsonSchema.cs", label="Entry double.ToString(string)", span="0-0"];
m2_1045 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadUnicode()", file="JsonSchema.cs", label="Entry Newtonsoft.Json.Tests.JsonTextReaderTest.ReadUnicode()", span="1718-1718"];
m2_1046 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadUnicode()", file="JsonSchema.cs", label="string json = @''{''''Message'''':''''Hi,I\u0092ve send you smth''''}''", span="1720-1720"];
m2_1047 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadUnicode()", file="JsonSchema.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="1722-1722"];
m2_1048 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadUnicode()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="1727-1727"];
m2_1049 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadUnicode()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.StartObject, reader.TokenType)", span="1728-1728"];
m2_1050 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadUnicode()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="1730-1730"];
m2_1051 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadUnicode()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.PropertyName, reader.TokenType)", span="1731-1731"];
m2_1052 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadUnicode()", file="JsonSchema.cs", label="Assert.AreEqual(''Message'', reader.Value)", span="1732-1732"];
m2_1053 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadUnicode()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="1734-1734"];
m2_1054 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadUnicode()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.String, reader.TokenType)", span="1735-1735"];
m2_1055 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadUnicode()", file="JsonSchema.cs", label="Assert.AreEqual(@''Hi,I'' + '\u0092' + ''ve send you smth'', reader.Value)", span="1736-1736"];
m2_1056 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadUnicode()", file="JsonSchema.cs", label="Assert.IsTrue(reader.Read())", span="1738-1738"];
m2_1057 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadUnicode()", file="JsonSchema.cs", label="Assert.AreEqual(JsonToken.EndObject, reader.TokenType)", span="1739-1739"];
m2_1058 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadUnicode()", file="JsonSchema.cs", label="Assert.IsFalse(reader.Read())", span="1741-1741"];
m2_1059 [cluster="Newtonsoft.Json.Tests.JsonTextReaderTest.ReadUnicode()", file="JsonSchema.cs", label="Exit Newtonsoft.Json.Tests.JsonTextReaderTest.ReadUnicode()", span="1718-1718"];
m2_1826 [file="JsonSchema.cs", label=reader, span=""];
m2_1827 [file="JsonSchema.cs", label=reader, span=""];
m2_1828 [file="JsonSchema.cs", label="Newtonsoft.Json.Tests.JsonTextReaderTest", span=""];
m2_1829 [file="JsonSchema.cs", label=reader, span=""];
m2_1830 [file="JsonSchema.cs", label=reader, span=""];
m2_1831 [file="JsonSchema.cs", label=reader, span=""];
m2_1832 [file="JsonSchema.cs", label=reader, span=""];
m2_1833 [file="JsonSchema.cs", label=total, span=""];
m2_1834 [file="JsonSchema.cs", label=total, span=""];
m2_1835 [file="JsonSchema.cs", label=reader, span=""];
m2_1836 [file="JsonSchema.cs", label=reader, span=""];
m2_1837 [file="JsonSchema.cs", label=reader, span=""];
m2_1838 [file="JsonSchema.cs", label=reader, span=""];
m2_1839 [file="JsonSchema.cs", label=reader, span=""];
m2_1840 [file="JsonSchema.cs", label=reader, span=""];
m2_1841 [file="JsonSchema.cs", label=reader, span=""];
m2_1842 [file="JsonSchema.cs", label=reader, span=""];
m2_1843 [file="JsonSchema.cs", label=reader, span=""];
m2_1844 [file="JsonSchema.cs", label=reader, span=""];
m2_1845 [file="JsonSchema.cs", label=reader, span=""];
m2_1846 [file="JsonSchema.cs", label=reader, span=""];
m2_1847 [file="JsonSchema.cs", label=reader, span=""];
m2_1848 [file="JsonSchema.cs", label=reader, span=""];
m2_1849 [file="JsonSchema.cs", label=reader, span=""];
m2_1850 [file="JsonSchema.cs", label=reader, span=""];
m2_1851 [file="JsonSchema.cs", label=reader, span=""];
m2_1852 [file="JsonSchema.cs", label=reader, span=""];
m2_1853 [file="JsonSchema.cs", label=reader, span=""];
m2_1854 [file="JsonSchema.cs", label=reader, span=""];
m2_1855 [file="JsonSchema.cs", label=reader, span=""];
m2_1856 [file="JsonSchema.cs", label=reader, span=""];
m2_1857 [file="JsonSchema.cs", label=reader, span=""];
m2_1858 [file="JsonSchema.cs", label=reader, span=""];
m2_1859 [file="JsonSchema.cs", label=reader, span=""];
m2_1860 [file="JsonSchema.cs", label=reader, span=""];
m2_1861 [file="JsonSchema.cs", label=reader, span=""];
m2_1862 [file="JsonSchema.cs", label=reader, span=""];
m2_1863 [file="JsonSchema.cs", label=jsonTextReader, span=""];
m2_1864 [file="JsonSchema.cs", label="Newtonsoft.Json.Tests.ToggleReaderError", span=""];
m2_1865 [file="JsonSchema.cs", label="Newtonsoft.Json.Tests.SlowStream", span=""];
m3_104 [cluster="byte.ToString(string, System.IFormatProvider)", file="JsonSchemaBuilder.cs", label="Entry byte.ToString(string, System.IFormatProvider)", span="0-0"];
m3_125 [cluster="Newtonsoft.Json.JsonConvert.ToString(System.TimeSpan, char)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonConvert.ToString(System.TimeSpan, char)", span="379-379"];
m3_126 [cluster="Newtonsoft.Json.JsonConvert.ToString(System.TimeSpan, char)", file="JsonSchemaBuilder.cs", label="return ToString(value.ToString(), quoteChar);", span="381-381"];
m3_127 [cluster="Newtonsoft.Json.JsonConvert.ToString(System.TimeSpan, char)", file="JsonSchemaBuilder.cs", label="Exit Newtonsoft.Json.JsonConvert.ToString(System.TimeSpan, char)", span="379-379"];
m3_358 [cluster="Newtonsoft.Json.JsonConvert.SerializeXNode(XObject, Newtonsoft.Json.Formatting, bool)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonConvert.SerializeXNode(XObject, Newtonsoft.Json.Formatting, bool)", span="1027-1027"];
m3_359 [cluster="Newtonsoft.Json.JsonConvert.SerializeXNode(XObject, Newtonsoft.Json.Formatting, bool)", file="JsonSchemaBuilder.cs", label="XmlNodeConverter converter = new XmlNodeConverter { OmitRootObject = omitRootObject }", span="1029-1029"];
m3_360 [cluster="Newtonsoft.Json.JsonConvert.SerializeXNode(XObject, Newtonsoft.Json.Formatting, bool)", file="JsonSchemaBuilder.cs", label="return SerializeObject(node, formatting, converter);", span="1031-1031"];
m3_361 [cluster="Newtonsoft.Json.JsonConvert.SerializeXNode(XObject, Newtonsoft.Json.Formatting, bool)", file="JsonSchemaBuilder.cs", label="Exit Newtonsoft.Json.JsonConvert.SerializeXNode(XObject, Newtonsoft.Json.Formatting, bool)", span="1027-1027"];
m3_254 [cluster="Newtonsoft.Json.JsonConvert.DeserializeObject(string, System.Type)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonConvert.DeserializeObject(string, System.Type)", span="681-681"];
m3_255 [cluster="Newtonsoft.Json.JsonConvert.DeserializeObject(string, System.Type)", file="JsonSchemaBuilder.cs", label="return DeserializeObject(value, type, (JsonSerializerSettings)null);", span="683-683"];
m3_256 [cluster="Newtonsoft.Json.JsonConvert.DeserializeObject(string, System.Type)", file="JsonSchemaBuilder.cs", label="Exit Newtonsoft.Json.JsonConvert.DeserializeObject(string, System.Type)", span="681-681"];
m3_30 [cluster="Newtonsoft.Json.JsonConvert.ToString(char)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonConvert.ToString(char)", span="173-173"];
m3_31 [cluster="Newtonsoft.Json.JsonConvert.ToString(char)", file="JsonSchemaBuilder.cs", label="return ToString(char.ToString(value));", span="175-175"];
m3_32 [cluster="Newtonsoft.Json.JsonConvert.ToString(char)", file="JsonSchemaBuilder.cs", label="Exit Newtonsoft.Json.JsonConvert.ToString(char)", span="173-173"];
m3_352 [cluster="Newtonsoft.Json.JsonConvert.SerializeXNode(XObject)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonConvert.SerializeXNode(XObject)", span="1004-1004"];
m3_353 [cluster="Newtonsoft.Json.JsonConvert.SerializeXNode(XObject)", file="JsonSchemaBuilder.cs", label="return SerializeXNode(node, Formatting.None);", span="1006-1006"];
m3_354 [cluster="Newtonsoft.Json.JsonConvert.SerializeXNode(XObject)", file="JsonSchemaBuilder.cs", label="Exit Newtonsoft.Json.JsonConvert.SerializeXNode(XObject)", span="1004-1004"];
m3_365 [cluster="Newtonsoft.Json.JsonConvert.DeserializeXNode(string, string)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonConvert.DeserializeXNode(string, string)", span="1050-1050"];
m3_366 [cluster="Newtonsoft.Json.JsonConvert.DeserializeXNode(string, string)", file="JsonSchemaBuilder.cs", label="return DeserializeXNode(value, deserializeRootElementName, false);", span="1052-1052"];
m3_367 [cluster="Newtonsoft.Json.JsonConvert.DeserializeXNode(string, string)", file="JsonSchemaBuilder.cs", label="Exit Newtonsoft.Json.JsonConvert.DeserializeXNode(string, string)", span="1050-1050"];
m3_108 [cluster="sbyte.ToString(string, System.IFormatProvider)", file="JsonSchemaBuilder.cs", label="Entry sbyte.ToString(string, System.IFormatProvider)", span="0-0"];
m3_72 [cluster="Newtonsoft.Json.JsonConvert.ToString(float, Newtonsoft.Json.FloatFormatHandling, char, bool)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonConvert.ToString(float, Newtonsoft.Json.FloatFormatHandling, char, bool)", span="268-268"];
m3_73 [cluster="Newtonsoft.Json.JsonConvert.ToString(float, Newtonsoft.Json.FloatFormatHandling, char, bool)", file="JsonSchemaBuilder.cs", label="return EnsureFloatFormat(value, EnsureDecimalPlace(value, value.ToString(''R'', CultureInfo.InvariantCulture)), floatFormatHandling, quoteChar, nullable);", span="270-270"];
m3_74 [cluster="Newtonsoft.Json.JsonConvert.ToString(float, Newtonsoft.Json.FloatFormatHandling, char, bool)", file="JsonSchemaBuilder.cs", label="Exit Newtonsoft.Json.JsonConvert.ToString(float, Newtonsoft.Json.FloatFormatHandling, char, bool)", span="268-268"];
m3_51 [cluster="Newtonsoft.Json.JsonConvert.ToString(uint)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonConvert.ToString(uint)", span="225-225"];
m3_52 [cluster="Newtonsoft.Json.JsonConvert.ToString(uint)", file="JsonSchemaBuilder.cs", label="return value.ToString(null, CultureInfo.InvariantCulture);", span="227-227"];
m3_53 [cluster="Newtonsoft.Json.JsonConvert.ToString(uint)", file="JsonSchemaBuilder.cs", label="Exit Newtonsoft.Json.JsonConvert.ToString(uint)", span="225-225"];
m3_88 [cluster="Newtonsoft.Json.JsonConvert.ToString(double, Newtonsoft.Json.FloatFormatHandling, char, bool)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonConvert.ToString(double, Newtonsoft.Json.FloatFormatHandling, char, bool)", span="294-294"];
m3_89 [cluster="Newtonsoft.Json.JsonConvert.ToString(double, Newtonsoft.Json.FloatFormatHandling, char, bool)", file="JsonSchemaBuilder.cs", label="return EnsureFloatFormat(value, EnsureDecimalPlace(value, value.ToString(''R'', CultureInfo.InvariantCulture)), floatFormatHandling, quoteChar, nullable);", span="296-296"];
m3_90 [cluster="Newtonsoft.Json.JsonConvert.ToString(double, Newtonsoft.Json.FloatFormatHandling, char, bool)", file="JsonSchemaBuilder.cs", label="Exit Newtonsoft.Json.JsonConvert.ToString(double, Newtonsoft.Json.FloatFormatHandling, char, bool)", span="294-294"];
m3_335 [cluster="Unk.SerializeObject", file="JsonSchemaBuilder.cs", label="Entry Unk.SerializeObject", span=""];
m3_13 [cluster="System.IO.StringWriter.Write(char)", file="JsonSchemaBuilder.cs", label="Entry System.IO.StringWriter.Write(char)", span="0-0"];
m3_95 [cluster="string.IndexOf(char)", file="JsonSchemaBuilder.cs", label="Entry string.IndexOf(char)", span="0-0"];
m3_210 [cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting, params Newtonsoft.Json.JsonConverter[])", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting, params Newtonsoft.Json.JsonConverter[])", span="535-535"];
m3_211 [cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting, params Newtonsoft.Json.JsonConverter[])", file="JsonSchemaBuilder.cs", label="JsonSerializerSettings settings = (converters != null && converters.Length > 0)\r\n                ? new JsonSerializerSettings { Converters = converters }\r\n                : null", span="537-539"];
m3_212 [cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting, params Newtonsoft.Json.JsonConverter[])", file="JsonSchemaBuilder.cs", label="return SerializeObject(value, formatting, settings);", span="541-541"];
m3_213 [cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting, params Newtonsoft.Json.JsonConverter[])", file="JsonSchemaBuilder.cs", label="Exit Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting, params Newtonsoft.Json.JsonConverter[])", span="535-535"];
m3_34 [cluster="Newtonsoft.Json.JsonConvert.ToString(string)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonConvert.ToString(string)", span="407-407"];
m3_139 [cluster="Newtonsoft.Json.JsonConvert.ToString(string)", file="JsonSchemaBuilder.cs", label="return ToString(value, '''');", span="409-409"];
m3_140 [cluster="Newtonsoft.Json.JsonConvert.ToString(string)", file="JsonSchemaBuilder.cs", label="Exit Newtonsoft.Json.JsonConvert.ToString(string)", span="407-407"];
m3_101 [cluster="Newtonsoft.Json.JsonConvert.ToString(byte)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonConvert.ToString(byte)", span="320-320"];
m3_102 [cluster="Newtonsoft.Json.JsonConvert.ToString(byte)", file="JsonSchemaBuilder.cs", label="return value.ToString(null, CultureInfo.InvariantCulture);", span="322-322"];
m3_103 [cluster="Newtonsoft.Json.JsonConvert.ToString(byte)", file="JsonSchemaBuilder.cs", label="Exit Newtonsoft.Json.JsonConvert.ToString(byte)", span="320-320"];
m3_87 [cluster="double.ToString(string, System.IFormatProvider)", file="JsonSchemaBuilder.cs", label="Entry double.ToString(string, System.IFormatProvider)", span="0-0"];
m3_129 [cluster="Newtonsoft.Json.JsonConvert.ToString(string, char)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonConvert.ToString(string, char)", span="418-418"];
m3_141 [cluster="Newtonsoft.Json.JsonConvert.ToString(string, char)", file="JsonSchemaBuilder.cs", label="delimiter != '''' && delimiter != '\''", span="420-420"];
m3_143 [cluster="Newtonsoft.Json.JsonConvert.ToString(string, char)", file="JsonSchemaBuilder.cs", label="return JavaScriptUtils.ToEscapedJavaScriptString(value, delimiter, true);", span="423-423"];
m3_142 [cluster="Newtonsoft.Json.JsonConvert.ToString(string, char)", file="JsonSchemaBuilder.cs", label="throw new ArgumentException(''Delimiter must be a single or double quote.'', ''delimiter'');", span="421-421"];
m3_144 [cluster="Newtonsoft.Json.JsonConvert.ToString(string, char)", file="JsonSchemaBuilder.cs", label="Exit Newtonsoft.Json.JsonConvert.ToString(string, char)", span="418-418"];
m3_340 [cluster="Newtonsoft.Json.JsonConvert.DeserializeXmlNode(string)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonConvert.DeserializeXmlNode(string)", span="961-961"];
m3_341 [cluster="Newtonsoft.Json.JsonConvert.DeserializeXmlNode(string)", file="JsonSchemaBuilder.cs", label="return DeserializeXmlNode(value, null);", span="963-963"];
m3_342 [cluster="Newtonsoft.Json.JsonConvert.DeserializeXmlNode(string)", file="JsonSchemaBuilder.cs", label="Exit Newtonsoft.Json.JsonConvert.DeserializeXmlNode(string)", span="961-961"];
m3_16 [cluster="Newtonsoft.Json.JsonConvert.ToString(System.DateTimeOffset)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonConvert.ToString(System.DateTimeOffset)", span="135-135"];
m3_17 [cluster="Newtonsoft.Json.JsonConvert.ToString(System.DateTimeOffset)", file="JsonSchemaBuilder.cs", label="return ToString(value, DateFormatHandling.IsoDateFormat);", span="137-137"];
m3_18 [cluster="Newtonsoft.Json.JsonConvert.ToString(System.DateTimeOffset)", file="JsonSchemaBuilder.cs", label="Exit Newtonsoft.Json.JsonConvert.ToString(System.DateTimeOffset)", span="135-135"];
m3_75 [cluster="Newtonsoft.Json.JsonConvert.EnsureFloatFormat(double, string, Newtonsoft.Json.FloatFormatHandling, char, bool)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonConvert.EnsureFloatFormat(double, string, Newtonsoft.Json.FloatFormatHandling, char, bool)", span="273-273"];
m3_76 [cluster="Newtonsoft.Json.JsonConvert.EnsureFloatFormat(double, string, Newtonsoft.Json.FloatFormatHandling, char, bool)", file="JsonSchemaBuilder.cs", label="floatFormatHandling == FloatFormatHandling.Symbol || !(double.IsInfinity(value) || double.IsNaN(value))", span="275-275"];
m3_77 [cluster="Newtonsoft.Json.JsonConvert.EnsureFloatFormat(double, string, Newtonsoft.Json.FloatFormatHandling, char, bool)", file="JsonSchemaBuilder.cs", label="return text;", span="276-276"];
m3_78 [cluster="Newtonsoft.Json.JsonConvert.EnsureFloatFormat(double, string, Newtonsoft.Json.FloatFormatHandling, char, bool)", file="JsonSchemaBuilder.cs", label="floatFormatHandling == FloatFormatHandling.DefaultValue", span="278-278"];
m3_79 [cluster="Newtonsoft.Json.JsonConvert.EnsureFloatFormat(double, string, Newtonsoft.Json.FloatFormatHandling, char, bool)", file="JsonSchemaBuilder.cs", label="return (!nullable) ? ''0.0'' : Null;", span="279-279"];
m3_80 [cluster="Newtonsoft.Json.JsonConvert.EnsureFloatFormat(double, string, Newtonsoft.Json.FloatFormatHandling, char, bool)", file="JsonSchemaBuilder.cs", label="return quoteChar + text + quoteChar;", span="281-281"];
m3_81 [cluster="Newtonsoft.Json.JsonConvert.EnsureFloatFormat(double, string, Newtonsoft.Json.FloatFormatHandling, char, bool)", file="JsonSchemaBuilder.cs", label="Exit Newtonsoft.Json.JsonConvert.EnsureFloatFormat(double, string, Newtonsoft.Json.FloatFormatHandling, char, bool)", span="273-273"];
m3_238 [cluster="Newtonsoft.Json.JsonConvert.SerializeObjectAsync(object, Newtonsoft.Json.Formatting)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonConvert.SerializeObjectAsync(object, Newtonsoft.Json.Formatting)", span="627-627"];
m3_239 [cluster="Newtonsoft.Json.JsonConvert.SerializeObjectAsync(object, Newtonsoft.Json.Formatting)", file="JsonSchemaBuilder.cs", label="return SerializeObjectAsync(value, formatting, null);", span="629-629"];
m3_240 [cluster="Newtonsoft.Json.JsonConvert.SerializeObjectAsync(object, Newtonsoft.Json.Formatting)", file="JsonSchemaBuilder.cs", label="Exit Newtonsoft.Json.JsonConvert.SerializeObjectAsync(object, Newtonsoft.Json.Formatting)", span="627-627"];
m3_261 [cluster="Newtonsoft.Json.JsonConvert.DeserializeAnonymousType<T>(string, T)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonConvert.DeserializeAnonymousType<T>(string, T)", span="708-708"];
m3_262 [cluster="Newtonsoft.Json.JsonConvert.DeserializeAnonymousType<T>(string, T)", file="JsonSchemaBuilder.cs", label="return DeserializeObject<T>(value);", span="710-710"];
m3_263 [cluster="Newtonsoft.Json.JsonConvert.DeserializeAnonymousType<T>(string, T)", file="JsonSchemaBuilder.cs", label="Exit Newtonsoft.Json.JsonConvert.DeserializeAnonymousType<T>(string, T)", span="708-708"];
m3_42 [cluster="int.ToString(string, System.IFormatProvider)", file="JsonSchemaBuilder.cs", label="Entry int.ToString(string, System.IFormatProvider)", span="0-0"];
m3_15 [cluster="System.IO.StringWriter.ToString()", file="JsonSchemaBuilder.cs", label="Entry System.IO.StringWriter.ToString()", span="0-0"];
m3_283 [cluster="Newtonsoft.Json.Utilities.ValidationUtils.ArgumentNotNull(object, string)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.Utilities.ValidationUtils.ArgumentNotNull(object, string)", span="52-52"];
m3_270 [cluster="Newtonsoft.Json.JsonConvert.DeserializeObject(string, System.Type, params Newtonsoft.Json.JsonConverter[])", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonConvert.DeserializeObject(string, System.Type, params Newtonsoft.Json.JsonConverter[])", span="767-767"];
m3_273 [cluster="Newtonsoft.Json.JsonConvert.DeserializeObject(string, System.Type, params Newtonsoft.Json.JsonConverter[])", file="JsonSchemaBuilder.cs", label="JsonSerializerSettings settings = (converters != null && converters.Length > 0)\r\n                ? new JsonSerializerSettings { Converters = converters }\r\n                : null", span="769-771"];
m3_274 [cluster="Newtonsoft.Json.JsonConvert.DeserializeObject(string, System.Type, params Newtonsoft.Json.JsonConverter[])", file="JsonSchemaBuilder.cs", label="return DeserializeObject(value, type, settings);", span="773-773"];
m3_275 [cluster="Newtonsoft.Json.JsonConvert.DeserializeObject(string, System.Type, params Newtonsoft.Json.JsonConverter[])", file="JsonSchemaBuilder.cs", label="Exit Newtonsoft.Json.JsonConvert.DeserializeObject(string, System.Type, params Newtonsoft.Json.JsonConverter[])", span="767-767"];
m3_237 [cluster="Newtonsoft.Json.JsonConvert.SerializeObjectAsync(object, Newtonsoft.Json.Formatting, Newtonsoft.Json.JsonSerializerSettings)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonConvert.SerializeObjectAsync(object, Newtonsoft.Json.Formatting, Newtonsoft.Json.JsonSerializerSettings)", span="643-643"];
m3_241 [cluster="Newtonsoft.Json.JsonConvert.SerializeObjectAsync(object, Newtonsoft.Json.Formatting, Newtonsoft.Json.JsonSerializerSettings)", file="JsonSchemaBuilder.cs", label="return Task.Factory.StartNew(() => SerializeObject(value, formatting, settings));", span="645-645"];
m3_242 [cluster="Newtonsoft.Json.JsonConvert.SerializeObjectAsync(object, Newtonsoft.Json.Formatting, Newtonsoft.Json.JsonSerializerSettings)", file="JsonSchemaBuilder.cs", label="Exit Newtonsoft.Json.JsonConvert.SerializeObjectAsync(object, Newtonsoft.Json.Formatting, Newtonsoft.Json.JsonSerializerSettings)", span="643-643"];
m3_287 [cluster="Newtonsoft.Json.JsonSerializer.Deserialize(Newtonsoft.Json.JsonReader, System.Type)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonSerializer.Deserialize(Newtonsoft.Json.JsonReader, System.Type)", span="650-650"];
m3_109 [cluster="Newtonsoft.Json.JsonConvert.ToString(decimal)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonConvert.ToString(decimal)", span="341-341"];
m3_110 [cluster="Newtonsoft.Json.JsonConvert.ToString(decimal)", file="JsonSchemaBuilder.cs", label="return EnsureDecimalPlace(value.ToString(null, CultureInfo.InvariantCulture));", span="343-343"];
m3_111 [cluster="Newtonsoft.Json.JsonConvert.ToString(decimal)", file="JsonSchemaBuilder.cs", label="Exit Newtonsoft.Json.JsonConvert.ToString(decimal)", span="341-341"];
m3_35 [cluster="Newtonsoft.Json.JsonConvert.ToString(System.Enum)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonConvert.ToString(System.Enum)", span="183-183"];
m3_36 [cluster="Newtonsoft.Json.JsonConvert.ToString(System.Enum)", file="JsonSchemaBuilder.cs", label="return value.ToString(''D'');", span="185-185"];
m3_37 [cluster="Newtonsoft.Json.JsonConvert.ToString(System.Enum)", file="JsonSchemaBuilder.cs", label="Exit Newtonsoft.Json.JsonConvert.ToString(System.Enum)", span="183-183"];
m3_233 [cluster="Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter, object, System.Type)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter, object, System.Type)", span="742-742"];
m3_229 [cluster="Newtonsoft.Json.JsonSerializer.CreateDefault(Newtonsoft.Json.JsonSerializerSettings)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonSerializer.CreateDefault(Newtonsoft.Json.JsonSerializerSettings)", span="493-493"];
m3_3 [cluster="Newtonsoft.Json.JsonConvert.ToString(System.DateTime, Newtonsoft.Json.DateFormatHandling, Newtonsoft.Json.DateTimeZoneHandling)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonConvert.ToString(System.DateTime, Newtonsoft.Json.DateFormatHandling, Newtonsoft.Json.DateTimeZoneHandling)", span="116-116"];
m3_4 [cluster="Newtonsoft.Json.JsonConvert.ToString(System.DateTime, Newtonsoft.Json.DateFormatHandling, Newtonsoft.Json.DateTimeZoneHandling)", file="JsonSchemaBuilder.cs", label="DateTime updatedDateTime = DateTimeUtils.EnsureDateTime(value, timeZoneHandling)", span="118-118"];
m3_7 [cluster="Newtonsoft.Json.JsonConvert.ToString(System.DateTime, Newtonsoft.Json.DateFormatHandling, Newtonsoft.Json.DateTimeZoneHandling)", file="JsonSchemaBuilder.cs", label="DateTimeUtils.WriteDateTimeString(writer, updatedDateTime, format, null, CultureInfo.InvariantCulture)", span="123-123"];
m3_5 [cluster="Newtonsoft.Json.JsonConvert.ToString(System.DateTime, Newtonsoft.Json.DateFormatHandling, Newtonsoft.Json.DateTimeZoneHandling)", file="JsonSchemaBuilder.cs", label="StringWriter writer = StringUtils.CreateStringWriter(64)", span="120-120"];
m3_6 [cluster="Newtonsoft.Json.JsonConvert.ToString(System.DateTime, Newtonsoft.Json.DateFormatHandling, Newtonsoft.Json.DateTimeZoneHandling)", file="JsonSchemaBuilder.cs", label="writer.Write('''')", span="122-122"];
m3_8 [cluster="Newtonsoft.Json.JsonConvert.ToString(System.DateTime, Newtonsoft.Json.DateFormatHandling, Newtonsoft.Json.DateTimeZoneHandling)", file="JsonSchemaBuilder.cs", label="writer.Write('''')", span="124-124"];
m3_9 [cluster="Newtonsoft.Json.JsonConvert.ToString(System.DateTime, Newtonsoft.Json.DateFormatHandling, Newtonsoft.Json.DateTimeZoneHandling)", file="JsonSchemaBuilder.cs", label="return writer.ToString();", span="125-125"];
m3_10 [cluster="Newtonsoft.Json.JsonConvert.ToString(System.DateTime, Newtonsoft.Json.DateFormatHandling, Newtonsoft.Json.DateTimeZoneHandling)", file="JsonSchemaBuilder.cs", label="Exit Newtonsoft.Json.JsonConvert.ToString(System.DateTime, Newtonsoft.Json.DateFormatHandling, Newtonsoft.Json.DateTimeZoneHandling)", span="116-116"];
m3_214 [cluster="Newtonsoft.Json.JsonSerializerSettings.JsonSerializerSettings()", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonSerializerSettings.JsonSerializerSettings()", span="347-347"];
m3_247 [cluster="Newtonsoft.Json.JsonConvert.DeserializeObject(string)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonConvert.DeserializeObject(string)", span="656-656"];
m3_248 [cluster="Newtonsoft.Json.JsonConvert.DeserializeObject(string)", file="JsonSchemaBuilder.cs", label="return DeserializeObject(value, null, (JsonSerializerSettings)null);", span="658-658"];
m3_249 [cluster="Newtonsoft.Json.JsonConvert.DeserializeObject(string)", file="JsonSchemaBuilder.cs", label="Exit Newtonsoft.Json.JsonConvert.DeserializeObject(string)", span="656-656"];
m3_46 [cluster="short.ToString(string, System.IFormatProvider)", file="JsonSchemaBuilder.cs", label="Entry short.ToString(string, System.IFormatProvider)", span="0-0"];
m3_267 [cluster="Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string, params Newtonsoft.Json.JsonConverter[])", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string, params Newtonsoft.Json.JsonConverter[])", span="740-740"];
m3_268 [cluster="Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string, params Newtonsoft.Json.JsonConverter[])", file="JsonSchemaBuilder.cs", label="return (T)DeserializeObject(value, typeof(T), converters);", span="742-742"];
m3_269 [cluster="Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string, params Newtonsoft.Json.JsonConverter[])", file="JsonSchemaBuilder.cs", label="Exit Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string, params Newtonsoft.Json.JsonConverter[])", span="740-740"];
m3_320 [cluster="Newtonsoft.Json.JsonConvert.PopulateObjectAsync(string, object, Newtonsoft.Json.JsonSerializerSettings)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonConvert.PopulateObjectAsync(string, object, Newtonsoft.Json.JsonSerializerSettings)", span="912-912"];
m3_321 [cluster="Newtonsoft.Json.JsonConvert.PopulateObjectAsync(string, object, Newtonsoft.Json.JsonSerializerSettings)", file="JsonSchemaBuilder.cs", label="return Task.Factory.StartNew(() => PopulateObject(value, target, settings));", span="914-914"];
m3_322 [cluster="Newtonsoft.Json.JsonConvert.PopulateObjectAsync(string, object, Newtonsoft.Json.JsonSerializerSettings)", file="JsonSchemaBuilder.cs", label="Exit Newtonsoft.Json.JsonConvert.PopulateObjectAsync(string, object, Newtonsoft.Json.JsonSerializerSettings)", span="912-912"];
m3_317 [cluster="Newtonsoft.Json.JsonSerializer.Populate(Newtonsoft.Json.JsonReader, object)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonSerializer.Populate(Newtonsoft.Json.JsonReader, object)", span="595-595"];
m3_112 [cluster="decimal.ToString(string, System.IFormatProvider)", file="JsonSchemaBuilder.cs", label="Entry decimal.ToString(string, System.IFormatProvider)", span="0-0"];
m3_55 [cluster="Newtonsoft.Json.JsonConvert.ToString(long)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonConvert.ToString(long)", span="235-235"];
m3_56 [cluster="Newtonsoft.Json.JsonConvert.ToString(long)", file="JsonSchemaBuilder.cs", label="return value.ToString(null, CultureInfo.InvariantCulture);", span="237-237"];
m3_57 [cluster="Newtonsoft.Json.JsonConvert.ToString(long)", file="JsonSchemaBuilder.cs", label="Exit Newtonsoft.Json.JsonConvert.ToString(long)", span="235-235"];
m3_113 [cluster="Newtonsoft.Json.JsonConvert.ToString(System.Guid)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonConvert.ToString(System.Guid)", span="351-351"];
m3_114 [cluster="Newtonsoft.Json.JsonConvert.ToString(System.Guid)", file="JsonSchemaBuilder.cs", label="return ToString(value, '''');", span="353-353"];
m3_115 [cluster="Newtonsoft.Json.JsonConvert.ToString(System.Guid)", file="JsonSchemaBuilder.cs", label="Exit Newtonsoft.Json.JsonConvert.ToString(System.Guid)", span="351-351"];
m3_309 [cluster="Newtonsoft.Json.JsonConvert.PopulateObject(string, object, Newtonsoft.Json.JsonSerializerSettings)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonConvert.PopulateObject(string, object, Newtonsoft.Json.JsonSerializerSettings)", span="885-885"];
m3_310 [cluster="Newtonsoft.Json.JsonConvert.PopulateObject(string, object, Newtonsoft.Json.JsonSerializerSettings)", file="JsonSchemaBuilder.cs", label="StringReader sr = new StringReader(value)", span="887-887"];
m3_311 [cluster="Newtonsoft.Json.JsonConvert.PopulateObject(string, object, Newtonsoft.Json.JsonSerializerSettings)", file="JsonSchemaBuilder.cs", label="JsonSerializer jsonSerializer = JsonSerializer.CreateDefault(settings)", span="888-888"];
m3_313 [cluster="Newtonsoft.Json.JsonConvert.PopulateObject(string, object, Newtonsoft.Json.JsonSerializerSettings)", file="JsonSchemaBuilder.cs", label="jsonSerializer.Populate(jsonReader, target)", span="892-892"];
m3_312 [cluster="Newtonsoft.Json.JsonConvert.PopulateObject(string, object, Newtonsoft.Json.JsonSerializerSettings)", file="JsonSchemaBuilder.cs", label="JsonReader jsonReader = new JsonTextReader(sr)", span="890-890"];
m3_314 [cluster="Newtonsoft.Json.JsonConvert.PopulateObject(string, object, Newtonsoft.Json.JsonSerializerSettings)", file="JsonSchemaBuilder.cs", label="jsonReader.Read() && jsonReader.TokenType != JsonToken.Comment", span="894-894"];
m3_315 [cluster="Newtonsoft.Json.JsonConvert.PopulateObject(string, object, Newtonsoft.Json.JsonSerializerSettings)", file="JsonSchemaBuilder.cs", label="throw new JsonSerializationException(''Additional text found in JSON string after finishing deserializing object.'');", span="895-895"];
m3_316 [cluster="Newtonsoft.Json.JsonConvert.PopulateObject(string, object, Newtonsoft.Json.JsonSerializerSettings)", file="JsonSchemaBuilder.cs", label="Exit Newtonsoft.Json.JsonConvert.PopulateObject(string, object, Newtonsoft.Json.JsonSerializerSettings)", span="885-885"];
m3_362 [cluster="Newtonsoft.Json.JsonConvert.DeserializeXNode(string)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonConvert.DeserializeXNode(string)", span="1039-1039"];
m3_363 [cluster="Newtonsoft.Json.JsonConvert.DeserializeXNode(string)", file="JsonSchemaBuilder.cs", label="return DeserializeXNode(value, null);", span="1041-1041"];
m3_364 [cluster="Newtonsoft.Json.JsonConvert.DeserializeXNode(string)", file="JsonSchemaBuilder.cs", label="Exit Newtonsoft.Json.JsonConvert.DeserializeXNode(string)", span="1039-1039"];
m3_251 [cluster="Newtonsoft.Json.JsonConvert.DeserializeObject(string, Newtonsoft.Json.JsonSerializerSettings)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonConvert.DeserializeObject(string, Newtonsoft.Json.JsonSerializerSettings)", span="670-670"];
m3_252 [cluster="Newtonsoft.Json.JsonConvert.DeserializeObject(string, Newtonsoft.Json.JsonSerializerSettings)", file="JsonSchemaBuilder.cs", label="return DeserializeObject(value, null, settings);", span="672-672"];
m3_253 [cluster="Newtonsoft.Json.JsonConvert.DeserializeObject(string, Newtonsoft.Json.JsonSerializerSettings)", file="JsonSchemaBuilder.cs", label="Exit Newtonsoft.Json.JsonConvert.DeserializeObject(string, Newtonsoft.Json.JsonSerializerSettings)", span="670-670"];
m3_355 [cluster="Newtonsoft.Json.JsonConvert.SerializeXNode(XObject, Newtonsoft.Json.Formatting)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonConvert.SerializeXNode(XObject, Newtonsoft.Json.Formatting)", span="1015-1015"];
m3_356 [cluster="Newtonsoft.Json.JsonConvert.SerializeXNode(XObject, Newtonsoft.Json.Formatting)", file="JsonSchemaBuilder.cs", label="return SerializeXNode(node, formatting, false);", span="1017-1017"];
m3_357 [cluster="Newtonsoft.Json.JsonConvert.SerializeXNode(XObject, Newtonsoft.Json.Formatting)", file="JsonSchemaBuilder.cs", label="Exit Newtonsoft.Json.JsonConvert.SerializeXNode(XObject, Newtonsoft.Json.Formatting)", span="1015-1015"];
m3_250 [cluster="Newtonsoft.Json.JsonConvert.DeserializeObject(string, System.Type, Newtonsoft.Json.JsonSerializerSettings)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonConvert.DeserializeObject(string, System.Type, Newtonsoft.Json.JsonSerializerSettings)", span="786-786"];
m3_276 [cluster="Newtonsoft.Json.JsonConvert.DeserializeObject(string, System.Type, Newtonsoft.Json.JsonSerializerSettings)", file="JsonSchemaBuilder.cs", label="ValidationUtils.ArgumentNotNull(value, ''value'')", span="788-788"];
m3_277 [cluster="Newtonsoft.Json.JsonConvert.DeserializeObject(string, System.Type, Newtonsoft.Json.JsonSerializerSettings)", file="JsonSchemaBuilder.cs", label="StringReader sr = new StringReader(value)", span="790-790"];
m3_278 [cluster="Newtonsoft.Json.JsonConvert.DeserializeObject(string, System.Type, Newtonsoft.Json.JsonSerializerSettings)", file="JsonSchemaBuilder.cs", label="JsonSerializer jsonSerializer = JsonSerializer.CreateDefault(settings)", span="791-791"];
m3_281 [cluster="Newtonsoft.Json.JsonConvert.DeserializeObject(string, System.Type, Newtonsoft.Json.JsonSerializerSettings)", file="JsonSchemaBuilder.cs", label="return jsonSerializer.Deserialize(new JsonTextReader(sr), type);", span="797-797"];
m3_279 [cluster="Newtonsoft.Json.JsonConvert.DeserializeObject(string, System.Type, Newtonsoft.Json.JsonSerializerSettings)", file="JsonSchemaBuilder.cs", label="!jsonSerializer.IsCheckAdditionalContentSet()", span="794-794"];
m3_280 [cluster="Newtonsoft.Json.JsonConvert.DeserializeObject(string, System.Type, Newtonsoft.Json.JsonSerializerSettings)", file="JsonSchemaBuilder.cs", label="jsonSerializer.CheckAdditionalContent = true", span="795-795"];
m3_282 [cluster="Newtonsoft.Json.JsonConvert.DeserializeObject(string, System.Type, Newtonsoft.Json.JsonSerializerSettings)", file="JsonSchemaBuilder.cs", label="Exit Newtonsoft.Json.JsonConvert.DeserializeObject(string, System.Type, Newtonsoft.Json.JsonSerializerSettings)", span="786-786"];
m3_196 [cluster="Newtonsoft.Json.Utilities.ConvertUtils.GetTypeCode(object)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.Utilities.ConvertUtils.GetTypeCode(object)", span="207-207"];
m3_147 [cluster="Newtonsoft.Json.JsonConvert.ToString(object)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonConvert.ToString(object)", span="431-431"];
m3_148 [cluster="Newtonsoft.Json.JsonConvert.ToString(object)", file="JsonSchemaBuilder.cs", label="value == null", span="433-433"];
m3_150 [cluster="Newtonsoft.Json.JsonConvert.ToString(object)", file="JsonSchemaBuilder.cs", label="PrimitiveTypeCode typeCode = ConvertUtils.GetTypeCode(value)", span="436-436"];
m3_153 [cluster="Newtonsoft.Json.JsonConvert.ToString(object)", file="JsonSchemaBuilder.cs", label="return ToString((string)value);", span="441-441"];
m3_155 [cluster="Newtonsoft.Json.JsonConvert.ToString(object)", file="JsonSchemaBuilder.cs", label="return ToString((char)value);", span="443-443"];
m3_157 [cluster="Newtonsoft.Json.JsonConvert.ToString(object)", file="JsonSchemaBuilder.cs", label="return ToString((bool)value);", span="445-445"];
m3_159 [cluster="Newtonsoft.Json.JsonConvert.ToString(object)", file="JsonSchemaBuilder.cs", label="return ToString((sbyte)value);", span="447-447"];
m3_161 [cluster="Newtonsoft.Json.JsonConvert.ToString(object)", file="JsonSchemaBuilder.cs", label="return ToString((short)value);", span="449-449"];
m3_163 [cluster="Newtonsoft.Json.JsonConvert.ToString(object)", file="JsonSchemaBuilder.cs", label="return ToString((ushort)value);", span="451-451"];
m3_165 [cluster="Newtonsoft.Json.JsonConvert.ToString(object)", file="JsonSchemaBuilder.cs", label="return ToString((int)value);", span="453-453"];
m3_167 [cluster="Newtonsoft.Json.JsonConvert.ToString(object)", file="JsonSchemaBuilder.cs", label="return ToString((byte)value);", span="455-455"];
m3_169 [cluster="Newtonsoft.Json.JsonConvert.ToString(object)", file="JsonSchemaBuilder.cs", label="return ToString((uint)value);", span="457-457"];
m3_171 [cluster="Newtonsoft.Json.JsonConvert.ToString(object)", file="JsonSchemaBuilder.cs", label="return ToString((long)value);", span="459-459"];
m3_173 [cluster="Newtonsoft.Json.JsonConvert.ToString(object)", file="JsonSchemaBuilder.cs", label="return ToString((ulong)value);", span="461-461"];
m3_175 [cluster="Newtonsoft.Json.JsonConvert.ToString(object)", file="JsonSchemaBuilder.cs", label="return ToString((float)value);", span="463-463"];
m3_177 [cluster="Newtonsoft.Json.JsonConvert.ToString(object)", file="JsonSchemaBuilder.cs", label="return ToString((double)value);", span="465-465"];
m3_179 [cluster="Newtonsoft.Json.JsonConvert.ToString(object)", file="JsonSchemaBuilder.cs", label="return ToString((DateTime)value);", span="467-467"];
m3_181 [cluster="Newtonsoft.Json.JsonConvert.ToString(object)", file="JsonSchemaBuilder.cs", label="return ToString((decimal)value);", span="469-469"];
m3_185 [cluster="Newtonsoft.Json.JsonConvert.ToString(object)", file="JsonSchemaBuilder.cs", label="return ToString((DateTimeOffset)value);", span="476-476"];
m3_187 [cluster="Newtonsoft.Json.JsonConvert.ToString(object)", file="JsonSchemaBuilder.cs", label="return ToString((Guid)value);", span="479-479"];
m3_189 [cluster="Newtonsoft.Json.JsonConvert.ToString(object)", file="JsonSchemaBuilder.cs", label="return ToString((Uri)value);", span="481-481"];
m3_191 [cluster="Newtonsoft.Json.JsonConvert.ToString(object)", file="JsonSchemaBuilder.cs", label="return ToString((TimeSpan)value);", span="483-483"];
m3_193 [cluster="Newtonsoft.Json.JsonConvert.ToString(object)", file="JsonSchemaBuilder.cs", label="return ToStringInternal((BigInteger)value);", span="486-486"];
m3_195 [cluster="Newtonsoft.Json.JsonConvert.ToString(object)", file="JsonSchemaBuilder.cs", label="throw new ArgumentException(''Unsupported type: {0}. Use the JsonSerializer class to get the object's JSON representation.''.FormatWith(CultureInfo.InvariantCulture, value.GetType()));", span="490-490"];
m3_149 [cluster="Newtonsoft.Json.JsonConvert.ToString(object)", file="JsonSchemaBuilder.cs", label="return Null;", span="434-434"];
m3_151 [cluster="Newtonsoft.Json.JsonConvert.ToString(object)", file="JsonSchemaBuilder.cs", label=typeCode, span="438-438"];
m3_152 [cluster="Newtonsoft.Json.JsonConvert.ToString(object)", file="JsonSchemaBuilder.cs", label="PrimitiveTypeCode.String", span="440-440"];
m3_154 [cluster="Newtonsoft.Json.JsonConvert.ToString(object)", file="JsonSchemaBuilder.cs", label="PrimitiveTypeCode.Char", span="442-442"];
m3_156 [cluster="Newtonsoft.Json.JsonConvert.ToString(object)", file="JsonSchemaBuilder.cs", label="PrimitiveTypeCode.Boolean", span="444-444"];
m3_158 [cluster="Newtonsoft.Json.JsonConvert.ToString(object)", file="JsonSchemaBuilder.cs", label="PrimitiveTypeCode.SByte", span="446-446"];
m3_160 [cluster="Newtonsoft.Json.JsonConvert.ToString(object)", file="JsonSchemaBuilder.cs", label="PrimitiveTypeCode.Int16", span="448-448"];
m3_162 [cluster="Newtonsoft.Json.JsonConvert.ToString(object)", file="JsonSchemaBuilder.cs", label="PrimitiveTypeCode.UInt16", span="450-450"];
m3_164 [cluster="Newtonsoft.Json.JsonConvert.ToString(object)", file="JsonSchemaBuilder.cs", label="PrimitiveTypeCode.Int32", span="452-452"];
m3_166 [cluster="Newtonsoft.Json.JsonConvert.ToString(object)", file="JsonSchemaBuilder.cs", label="PrimitiveTypeCode.Byte", span="454-454"];
m3_168 [cluster="Newtonsoft.Json.JsonConvert.ToString(object)", file="JsonSchemaBuilder.cs", label="PrimitiveTypeCode.UInt32", span="456-456"];
m3_170 [cluster="Newtonsoft.Json.JsonConvert.ToString(object)", file="JsonSchemaBuilder.cs", label="PrimitiveTypeCode.Int64", span="458-458"];
m3_172 [cluster="Newtonsoft.Json.JsonConvert.ToString(object)", file="JsonSchemaBuilder.cs", label="PrimitiveTypeCode.UInt64", span="460-460"];
m3_174 [cluster="Newtonsoft.Json.JsonConvert.ToString(object)", file="JsonSchemaBuilder.cs", label="PrimitiveTypeCode.Single", span="462-462"];
m3_176 [cluster="Newtonsoft.Json.JsonConvert.ToString(object)", file="JsonSchemaBuilder.cs", label="PrimitiveTypeCode.Double", span="464-464"];
m3_178 [cluster="Newtonsoft.Json.JsonConvert.ToString(object)", file="JsonSchemaBuilder.cs", label="PrimitiveTypeCode.DateTime", span="466-466"];
m3_180 [cluster="Newtonsoft.Json.JsonConvert.ToString(object)", file="JsonSchemaBuilder.cs", label="PrimitiveTypeCode.Decimal", span="468-468"];
m3_182 [cluster="Newtonsoft.Json.JsonConvert.ToString(object)", file="JsonSchemaBuilder.cs", label="PrimitiveTypeCode.DBNull", span="471-471"];
m3_184 [cluster="Newtonsoft.Json.JsonConvert.ToString(object)", file="JsonSchemaBuilder.cs", label="PrimitiveTypeCode.DateTimeOffset", span="475-475"];
m3_186 [cluster="Newtonsoft.Json.JsonConvert.ToString(object)", file="JsonSchemaBuilder.cs", label="PrimitiveTypeCode.Guid", span="478-478"];
m3_188 [cluster="Newtonsoft.Json.JsonConvert.ToString(object)", file="JsonSchemaBuilder.cs", label="PrimitiveTypeCode.Uri", span="480-480"];
m3_190 [cluster="Newtonsoft.Json.JsonConvert.ToString(object)", file="JsonSchemaBuilder.cs", label="PrimitiveTypeCode.TimeSpan", span="482-482"];
m3_192 [cluster="Newtonsoft.Json.JsonConvert.ToString(object)", file="JsonSchemaBuilder.cs", label="PrimitiveTypeCode.BigInteger", span="485-485"];
m3_183 [cluster="Newtonsoft.Json.JsonConvert.ToString(object)", file="JsonSchemaBuilder.cs", label="return Null;", span="472-472"];
m3_194 [cluster="Newtonsoft.Json.JsonConvert.ToString(object)", file="JsonSchemaBuilder.cs", label="Exit Newtonsoft.Json.JsonConvert.ToString(object)", span="431-431"];
m3_306 [cluster="Newtonsoft.Json.JsonConvert.PopulateObject(string, object)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonConvert.PopulateObject(string, object)", span="871-871"];
m3_307 [cluster="Newtonsoft.Json.JsonConvert.PopulateObject(string, object)", file="JsonSchemaBuilder.cs", label="PopulateObject(value, target, null)", span="873-873"];
m3_308 [cluster="Newtonsoft.Json.JsonConvert.PopulateObject(string, object)", file="JsonSchemaBuilder.cs", label="Exit Newtonsoft.Json.JsonConvert.PopulateObject(string, object)", span="871-871"];
m3_336 [cluster="Newtonsoft.Json.JsonConvert.SerializeXmlNode(XmlNode, Newtonsoft.Json.Formatting, bool)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonConvert.SerializeXmlNode(XmlNode, Newtonsoft.Json.Formatting, bool)", span="949-949"];
m3_337 [cluster="Newtonsoft.Json.JsonConvert.SerializeXmlNode(XmlNode, Newtonsoft.Json.Formatting, bool)", file="JsonSchemaBuilder.cs", label="XmlNodeConverter converter = new XmlNodeConverter { OmitRootObject = omitRootObject }", span="951-951"];
m3_338 [cluster="Newtonsoft.Json.JsonConvert.SerializeXmlNode(XmlNode, Newtonsoft.Json.Formatting, bool)", file="JsonSchemaBuilder.cs", label="return SerializeObject(node, formatting, converter);", span="953-953"];
m3_339 [cluster="Newtonsoft.Json.JsonConvert.SerializeXmlNode(XmlNode, Newtonsoft.Json.Formatting, bool)", file="JsonSchemaBuilder.cs", label="Exit Newtonsoft.Json.JsonConvert.SerializeXmlNode(XmlNode, Newtonsoft.Json.Formatting, bool)", span="949-949"];
m3_63 [cluster="Newtonsoft.Json.JsonConvert.ToString(ulong)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonConvert.ToString(ulong)", span="253-253"];
m3_64 [cluster="Newtonsoft.Json.JsonConvert.ToString(ulong)", file="JsonSchemaBuilder.cs", label="return value.ToString(null, CultureInfo.InvariantCulture);", span="255-255"];
m3_65 [cluster="Newtonsoft.Json.JsonConvert.ToString(ulong)", file="JsonSchemaBuilder.cs", label="Exit Newtonsoft.Json.JsonConvert.ToString(ulong)", span="253-253"];
m3_319 [cluster="Newtonsoft.Json.JsonSerializationException.JsonSerializationException(string)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonSerializationException.JsonSerializationException(string)", span="52-52"];
m3_54 [cluster="uint.ToString(string, System.IFormatProvider)", file="JsonSchemaBuilder.cs", label="Entry uint.ToString(string, System.IFormatProvider)", span="0-0"];
m3_285 [cluster="Newtonsoft.Json.JsonSerializer.IsCheckAdditionalContentSet()", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonSerializer.IsCheckAdditionalContentSet()", span="409-409"];
m3_138 [cluster="System.Uri.ToString()", file="JsonSchemaBuilder.cs", label="Entry System.Uri.ToString()", span="0-0"];
m3_334 [cluster="Newtonsoft.Json.Converters.XmlNodeConverter.XmlNodeConverter()", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.Converters.XmlNodeConverter.XmlNodeConverter()", span="743-743"];
m3_116 [cluster="Newtonsoft.Json.JsonConvert.ToString(System.Guid, char)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonConvert.ToString(System.Guid, char)", span="356-356"];
m3_117 [cluster="Newtonsoft.Json.JsonConvert.ToString(System.Guid, char)", file="JsonSchemaBuilder.cs", label="string text = null", span="358-358"];
m3_118 [cluster="Newtonsoft.Json.JsonConvert.ToString(System.Guid, char)", file="JsonSchemaBuilder.cs", label="text = value.ToString(''D'', CultureInfo.InvariantCulture)", span="361-361"];
m3_119 [cluster="Newtonsoft.Json.JsonConvert.ToString(System.Guid, char)", file="JsonSchemaBuilder.cs", label="return quoteChar + text + quoteChar;", span="366-366"];
m3_120 [cluster="Newtonsoft.Json.JsonConvert.ToString(System.Guid, char)", file="JsonSchemaBuilder.cs", label="Exit Newtonsoft.Json.JsonConvert.ToString(System.Guid, char)", span="356-356"];
m3_145 [cluster="System.ArgumentException.ArgumentException(string, string)", file="JsonSchemaBuilder.cs", label="Entry System.ArgumentException.ArgumentException(string, string)", span="0-0"];
m3_300 [cluster="Newtonsoft.Json.JsonConvert.DeserializeObjectAsync(string, System.Type, Newtonsoft.Json.JsonSerializerSettings)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonConvert.DeserializeObjectAsync(string, System.Type, Newtonsoft.Json.JsonSerializerSettings)", span="859-859"];
m3_301 [cluster="Newtonsoft.Json.JsonConvert.DeserializeObjectAsync(string, System.Type, Newtonsoft.Json.JsonSerializerSettings)", file="JsonSchemaBuilder.cs", label="return Task.Factory.StartNew(() => DeserializeObject(value, type, settings));", span="861-861"];
m3_302 [cluster="Newtonsoft.Json.JsonConvert.DeserializeObjectAsync(string, System.Type, Newtonsoft.Json.JsonSerializerSettings)", file="JsonSchemaBuilder.cs", label="Exit Newtonsoft.Json.JsonConvert.DeserializeObjectAsync(string, System.Type, Newtonsoft.Json.JsonSerializerSettings)", span="859-859"];
m3_58 [cluster="long.ToString(string, System.IFormatProvider)", file="JsonSchemaBuilder.cs", label="Entry long.ToString(string, System.IFormatProvider)", span="0-0"];
m3_286 [cluster="Newtonsoft.Json.JsonTextReader.JsonTextReader(System.IO.TextReader)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonTextReader.JsonTextReader(System.IO.TextReader)", span="73-73"];
m3_260 [cluster="Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string, Newtonsoft.Json.JsonSerializerSettings)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string, Newtonsoft.Json.JsonSerializerSettings)", span="755-755"];
m3_271 [cluster="Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string, Newtonsoft.Json.JsonSerializerSettings)", file="JsonSchemaBuilder.cs", label="return (T)DeserializeObject(value, typeof(T), settings);", span="757-757"];
m3_272 [cluster="Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string, Newtonsoft.Json.JsonSerializerSettings)", file="JsonSchemaBuilder.cs", label="Exit Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string, Newtonsoft.Json.JsonSerializerSettings)", span="755-755"];
m3_368 [cluster="Newtonsoft.Json.JsonConvert.DeserializeXNode(string, string, bool)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonConvert.DeserializeXNode(string, string, bool)", span="1066-1066"];
m3_369 [cluster="Newtonsoft.Json.JsonConvert.DeserializeXNode(string, string, bool)", file="JsonSchemaBuilder.cs", label="XmlNodeConverter converter = new XmlNodeConverter()", span="1068-1068"];
m3_370 [cluster="Newtonsoft.Json.JsonConvert.DeserializeXNode(string, string, bool)", file="JsonSchemaBuilder.cs", label="converter.DeserializeRootElementName = deserializeRootElementName", span="1069-1069"];
m3_371 [cluster="Newtonsoft.Json.JsonConvert.DeserializeXNode(string, string, bool)", file="JsonSchemaBuilder.cs", label="converter.WriteArrayAttribute = writeArrayAttribute", span="1070-1070"];
m3_372 [cluster="Newtonsoft.Json.JsonConvert.DeserializeXNode(string, string, bool)", file="JsonSchemaBuilder.cs", label="return (XDocument)DeserializeObject(value, typeof(XDocument), converter);", span="1072-1072"];
m3_373 [cluster="Newtonsoft.Json.JsonConvert.DeserializeXNode(string, string, bool)", file="JsonSchemaBuilder.cs", label="Exit Newtonsoft.Json.JsonConvert.DeserializeXNode(string, string, bool)", span="1066-1066"];
m3_121 [cluster="System.Guid.ToString(string, System.IFormatProvider)", file="JsonSchemaBuilder.cs", label="Entry System.Guid.ToString(string, System.IFormatProvider)", span="0-0"];
m3_243 [cluster="System.Threading.Tasks.TaskFactory.StartNew<TResult>(System.Func<TResult>)", file="JsonSchemaBuilder.cs", label="Entry System.Threading.Tasks.TaskFactory.StartNew<TResult>(System.Func<TResult>)", span="0-0"];
m3_215 [cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.JsonSerializerSettings)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.JsonSerializerSettings)", span="553-553"];
m3_216 [cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.JsonSerializerSettings)", file="JsonSchemaBuilder.cs", label="return SerializeObject(value, Formatting.None, settings);", span="555-555"];
m3_217 [cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.JsonSerializerSettings)", file="JsonSchemaBuilder.cs", label="Exit Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.JsonSerializerSettings)", span="553-553"];
m3_43 [cluster="Newtonsoft.Json.JsonConvert.ToString(short)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonConvert.ToString(short)", span="203-203"];
m3_44 [cluster="Newtonsoft.Json.JsonConvert.ToString(short)", file="JsonSchemaBuilder.cs", label="return value.ToString(null, CultureInfo.InvariantCulture);", span="205-205"];
m3_45 [cluster="Newtonsoft.Json.JsonConvert.ToString(short)", file="JsonSchemaBuilder.cs", label="Exit Newtonsoft.Json.JsonConvert.ToString(short)", span="203-203"];
m3_199 [cluster="string.FormatWith(System.IFormatProvider, object)", file="JsonSchemaBuilder.cs", label="Entry string.FormatWith(System.IFormatProvider, object)", span="47-47"];
m3_330 [cluster="Newtonsoft.Json.JsonConvert.SerializeXmlNode(XmlNode, Newtonsoft.Json.Formatting)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonConvert.SerializeXmlNode(XmlNode, Newtonsoft.Json.Formatting)", span="935-935"];
m3_331 [cluster="Newtonsoft.Json.JsonConvert.SerializeXmlNode(XmlNode, Newtonsoft.Json.Formatting)", file="JsonSchemaBuilder.cs", label="XmlNodeConverter converter = new XmlNodeConverter()", span="937-937"];
m3_332 [cluster="Newtonsoft.Json.JsonConvert.SerializeXmlNode(XmlNode, Newtonsoft.Json.Formatting)", file="JsonSchemaBuilder.cs", label="return SerializeObject(node, formatting, converter);", span="939-939"];
m3_333 [cluster="Newtonsoft.Json.JsonConvert.SerializeXmlNode(XmlNode, Newtonsoft.Json.Formatting)", file="JsonSchemaBuilder.cs", label="Exit Newtonsoft.Json.JsonConvert.SerializeXmlNode(XmlNode, Newtonsoft.Json.Formatting)", span="935-935"];
m3_203 [cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting, Newtonsoft.Json.JsonSerializerSettings)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting, Newtonsoft.Json.JsonSerializerSettings)", span="568-568"];
m3_218 [cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting, Newtonsoft.Json.JsonSerializerSettings)", file="JsonSchemaBuilder.cs", label="return SerializeObject(value, null, formatting, settings);", span="570-570"];
m3_219 [cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting, Newtonsoft.Json.JsonSerializerSettings)", file="JsonSchemaBuilder.cs", label="Exit Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting, Newtonsoft.Json.JsonSerializerSettings)", span="568-568"];
m3_318 [cluster="Newtonsoft.Json.JsonReader.Read()", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonReader.Read()", span="354-354"];
m3_82 [cluster="double.IsInfinity(double)", file="JsonSchemaBuilder.cs", label="Entry double.IsInfinity(double)", span="0-0"];
m3_66 [cluster="ulong.ToString(string, System.IFormatProvider)", file="JsonSchemaBuilder.cs", label="Entry ulong.ToString(string, System.IFormatProvider)", span="0-0"];
m3_234 [cluster="Newtonsoft.Json.JsonConvert.SerializeObjectAsync(object)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonConvert.SerializeObjectAsync(object)", span="613-613"];
m3_235 [cluster="Newtonsoft.Json.JsonConvert.SerializeObjectAsync(object)", file="JsonSchemaBuilder.cs", label="return SerializeObjectAsync(value, Formatting.None, null);", span="615-615"];
m3_236 [cluster="Newtonsoft.Json.JsonConvert.SerializeObjectAsync(object)", file="JsonSchemaBuilder.cs", label="Exit Newtonsoft.Json.JsonConvert.SerializeObjectAsync(object)", span="613-613"];
m3_197 [cluster="System.ArgumentException.ArgumentException(string)", file="JsonSchemaBuilder.cs", label="Entry System.ArgumentException.ArgumentException(string)", span="0-0"];
m3_71 [cluster="Newtonsoft.Json.JsonConvert.EnsureDecimalPlace(double, string)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonConvert.EnsureDecimalPlace(double, string)", span="299-299"];
m3_91 [cluster="Newtonsoft.Json.JsonConvert.EnsureDecimalPlace(double, string)", file="JsonSchemaBuilder.cs", label="double.IsNaN(value) || double.IsInfinity(value) || text.IndexOf('.') != -1 || text.IndexOf('E') != -1 || text.IndexOf('e') != -1", span="301-301"];
m3_92 [cluster="Newtonsoft.Json.JsonConvert.EnsureDecimalPlace(double, string)", file="JsonSchemaBuilder.cs", label="return text;", span="302-302"];
m3_93 [cluster="Newtonsoft.Json.JsonConvert.EnsureDecimalPlace(double, string)", file="JsonSchemaBuilder.cs", label="return text + ''.0'';", span="304-304"];
m3_94 [cluster="Newtonsoft.Json.JsonConvert.EnsureDecimalPlace(double, string)", file="JsonSchemaBuilder.cs", label="Exit Newtonsoft.Json.JsonConvert.EnsureDecimalPlace(double, string)", span="299-299"];
m3_288 [cluster="Newtonsoft.Json.JsonConvert.DeserializeObjectAsync<T>(string)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonConvert.DeserializeObjectAsync<T>(string)", span="810-810"];
m3_289 [cluster="Newtonsoft.Json.JsonConvert.DeserializeObjectAsync<T>(string)", file="JsonSchemaBuilder.cs", label="return DeserializeObjectAsync<T>(value, null);", span="812-812"];
m3_290 [cluster="Newtonsoft.Json.JsonConvert.DeserializeObjectAsync<T>(string)", file="JsonSchemaBuilder.cs", label="Exit Newtonsoft.Json.JsonConvert.DeserializeObjectAsync<T>(string)", span="810-810"];
m3_33 [cluster="char.ToString(char)", file="JsonSchemaBuilder.cs", label="Entry char.ToString(char)", span="0-0"];
m3_50 [cluster="ushort.ToString(string, System.IFormatProvider)", file="JsonSchemaBuilder.cs", label="Entry ushort.ToString(string, System.IFormatProvider)", span="0-0"];
m3_135 [cluster="Newtonsoft.Json.JsonConvert.ToString(System.Uri, char)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonConvert.ToString(System.Uri, char)", span="397-397"];
m3_136 [cluster="Newtonsoft.Json.JsonConvert.ToString(System.Uri, char)", file="JsonSchemaBuilder.cs", label="return ToString(value.ToString(), quoteChar);", span="399-399"];
m3_137 [cluster="Newtonsoft.Json.JsonConvert.ToString(System.Uri, char)", file="JsonSchemaBuilder.cs", label="Exit Newtonsoft.Json.JsonConvert.ToString(System.Uri, char)", span="397-397"];
m3_62 [cluster="Unk.ToString", file="JsonSchemaBuilder.cs", label="Entry Unk.ToString", span=""];
m3_346 [cluster="Newtonsoft.Json.JsonConvert.DeserializeXmlNode(string, string, bool)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonConvert.DeserializeXmlNode(string, string, bool)", span="988-988"];
m3_347 [cluster="Newtonsoft.Json.JsonConvert.DeserializeXmlNode(string, string, bool)", file="JsonSchemaBuilder.cs", label="XmlNodeConverter converter = new XmlNodeConverter()", span="990-990"];
m3_348 [cluster="Newtonsoft.Json.JsonConvert.DeserializeXmlNode(string, string, bool)", file="JsonSchemaBuilder.cs", label="converter.DeserializeRootElementName = deserializeRootElementName", span="991-991"];
m3_349 [cluster="Newtonsoft.Json.JsonConvert.DeserializeXmlNode(string, string, bool)", file="JsonSchemaBuilder.cs", label="converter.WriteArrayAttribute = writeArrayAttribute", span="992-992"];
m3_350 [cluster="Newtonsoft.Json.JsonConvert.DeserializeXmlNode(string, string, bool)", file="JsonSchemaBuilder.cs", label="return (XmlDocument)DeserializeObject(value, typeof(XmlDocument), converter);", span="994-994"];
m3_351 [cluster="Newtonsoft.Json.JsonConvert.DeserializeXmlNode(string, string, bool)", file="JsonSchemaBuilder.cs", label="Exit Newtonsoft.Json.JsonConvert.DeserializeXmlNode(string, string, bool)", span="988-988"];
m3_19 [cluster="Newtonsoft.Json.JsonConvert.ToString(System.DateTimeOffset, Newtonsoft.Json.DateFormatHandling)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonConvert.ToString(System.DateTimeOffset, Newtonsoft.Json.DateFormatHandling)", span="146-146"];
m3_20 [cluster="Newtonsoft.Json.JsonConvert.ToString(System.DateTimeOffset, Newtonsoft.Json.DateFormatHandling)", file="JsonSchemaBuilder.cs", label="StringWriter writer = StringUtils.CreateStringWriter(64)", span="148-148"];
m3_22 [cluster="Newtonsoft.Json.JsonConvert.ToString(System.DateTimeOffset, Newtonsoft.Json.DateFormatHandling)", file="JsonSchemaBuilder.cs", label="DateTimeUtils.WriteDateTimeOffsetString(writer, value, format, null, CultureInfo.InvariantCulture)", span="151-151"];
m3_21 [cluster="Newtonsoft.Json.JsonConvert.ToString(System.DateTimeOffset, Newtonsoft.Json.DateFormatHandling)", file="JsonSchemaBuilder.cs", label="writer.Write('''')", span="150-150"];
m3_23 [cluster="Newtonsoft.Json.JsonConvert.ToString(System.DateTimeOffset, Newtonsoft.Json.DateFormatHandling)", file="JsonSchemaBuilder.cs", label="writer.Write('''')", span="152-152"];
m3_24 [cluster="Newtonsoft.Json.JsonConvert.ToString(System.DateTimeOffset, Newtonsoft.Json.DateFormatHandling)", file="JsonSchemaBuilder.cs", label="return writer.ToString();", span="153-153"];
m3_25 [cluster="Newtonsoft.Json.JsonConvert.ToString(System.DateTimeOffset, Newtonsoft.Json.DateFormatHandling)", file="JsonSchemaBuilder.cs", label="Exit Newtonsoft.Json.JsonConvert.ToString(System.DateTimeOffset, Newtonsoft.Json.DateFormatHandling)", span="146-146"];
m3_220 [cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, System.Type, Newtonsoft.Json.Formatting, Newtonsoft.Json.JsonSerializerSettings)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object, System.Type, Newtonsoft.Json.Formatting, Newtonsoft.Json.JsonSerializerSettings)", span="588-588"];
m3_221 [cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, System.Type, Newtonsoft.Json.Formatting, Newtonsoft.Json.JsonSerializerSettings)", file="JsonSchemaBuilder.cs", label="JsonSerializer jsonSerializer = JsonSerializer.CreateDefault(settings)", span="590-590"];
m3_225 [cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, System.Type, Newtonsoft.Json.Formatting, Newtonsoft.Json.JsonSerializerSettings)", file="JsonSchemaBuilder.cs", label="jsonWriter.Formatting = formatting", span="596-596"];
m3_226 [cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, System.Type, Newtonsoft.Json.Formatting, Newtonsoft.Json.JsonSerializerSettings)", file="JsonSchemaBuilder.cs", label="jsonSerializer.Serialize(jsonWriter, value, type)", span="598-598"];
m3_222 [cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, System.Type, Newtonsoft.Json.Formatting, Newtonsoft.Json.JsonSerializerSettings)", file="JsonSchemaBuilder.cs", label="StringBuilder sb = new StringBuilder(256)", span="592-592"];
m3_223 [cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, System.Type, Newtonsoft.Json.Formatting, Newtonsoft.Json.JsonSerializerSettings)", file="JsonSchemaBuilder.cs", label="StringWriter sw = new StringWriter(sb, CultureInfo.InvariantCulture)", span="593-593"];
m3_224 [cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, System.Type, Newtonsoft.Json.Formatting, Newtonsoft.Json.JsonSerializerSettings)", file="JsonSchemaBuilder.cs", label="JsonTextWriter jsonWriter = new JsonTextWriter(sw)", span="594-594"];
m3_227 [cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, System.Type, Newtonsoft.Json.Formatting, Newtonsoft.Json.JsonSerializerSettings)", file="JsonSchemaBuilder.cs", label="return sw.ToString();", span="601-601"];
m3_228 [cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, System.Type, Newtonsoft.Json.Formatting, Newtonsoft.Json.JsonSerializerSettings)", file="JsonSchemaBuilder.cs", label="Exit Newtonsoft.Json.JsonConvert.SerializeObject(object, System.Type, Newtonsoft.Json.Formatting, Newtonsoft.Json.JsonSerializerSettings)", span="588-588"];
m3_39 [cluster="Newtonsoft.Json.JsonConvert.ToString(int)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonConvert.ToString(int)", span="193-193"];
m3_40 [cluster="Newtonsoft.Json.JsonConvert.ToString(int)", file="JsonSchemaBuilder.cs", label="return value.ToString(null, CultureInfo.InvariantCulture);", span="195-195"];
m3_41 [cluster="Newtonsoft.Json.JsonConvert.ToString(int)", file="JsonSchemaBuilder.cs", label="Exit Newtonsoft.Json.JsonConvert.ToString(int)", span="193-193"];
m3_130 [cluster="Newtonsoft.Json.JsonConvert.ToString(System.Uri)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonConvert.ToString(System.Uri)", span="389-389"];
m3_131 [cluster="Newtonsoft.Json.JsonConvert.ToString(System.Uri)", file="JsonSchemaBuilder.cs", label="value == null", span="391-391"];
m3_133 [cluster="Newtonsoft.Json.JsonConvert.ToString(System.Uri)", file="JsonSchemaBuilder.cs", label="return ToString(value, '''');", span="394-394"];
m3_132 [cluster="Newtonsoft.Json.JsonConvert.ToString(System.Uri)", file="JsonSchemaBuilder.cs", label="return Null;", span="392-392"];
m3_134 [cluster="Newtonsoft.Json.JsonConvert.ToString(System.Uri)", file="JsonSchemaBuilder.cs", label="Exit Newtonsoft.Json.JsonConvert.ToString(System.Uri)", span="389-389"];
m3_84 [cluster="Newtonsoft.Json.JsonConvert.ToString(double)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonConvert.ToString(double)", span="289-289"];
m3_85 [cluster="Newtonsoft.Json.JsonConvert.ToString(double)", file="JsonSchemaBuilder.cs", label="return EnsureDecimalPlace(value, value.ToString(''R'', CultureInfo.InvariantCulture));", span="291-291"];
m3_86 [cluster="Newtonsoft.Json.JsonConvert.ToString(double)", file="JsonSchemaBuilder.cs", label="Exit Newtonsoft.Json.JsonConvert.ToString(double)", span="289-289"];
m3_232 [cluster="Newtonsoft.Json.JsonTextWriter.JsonTextWriter(System.IO.TextWriter)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonTextWriter.JsonTextWriter(System.IO.TextWriter)", span="116-116"];
m3_264 [cluster="Newtonsoft.Json.JsonConvert.DeserializeAnonymousType<T>(string, T, Newtonsoft.Json.JsonSerializerSettings)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonConvert.DeserializeAnonymousType<T>(string, T, Newtonsoft.Json.JsonSerializerSettings)", span="728-728"];
m3_265 [cluster="Newtonsoft.Json.JsonConvert.DeserializeAnonymousType<T>(string, T, Newtonsoft.Json.JsonSerializerSettings)", file="JsonSchemaBuilder.cs", label="return DeserializeObject<T>(value, settings);", span="730-730"];
m3_266 [cluster="Newtonsoft.Json.JsonConvert.DeserializeAnonymousType<T>(string, T, Newtonsoft.Json.JsonSerializerSettings)", file="JsonSchemaBuilder.cs", label="Exit Newtonsoft.Json.JsonConvert.DeserializeAnonymousType<T>(string, T, Newtonsoft.Json.JsonSerializerSettings)", span="728-728"];
m3_343 [cluster="Newtonsoft.Json.JsonConvert.DeserializeXmlNode(string, string)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonConvert.DeserializeXmlNode(string, string)", span="972-972"];
m3_344 [cluster="Newtonsoft.Json.JsonConvert.DeserializeXmlNode(string, string)", file="JsonSchemaBuilder.cs", label="return DeserializeXmlNode(value, deserializeRootElementName, false);", span="974-974"];
m3_345 [cluster="Newtonsoft.Json.JsonConvert.DeserializeXmlNode(string, string)", file="JsonSchemaBuilder.cs", label="Exit Newtonsoft.Json.JsonConvert.DeserializeXmlNode(string, string)", span="972-972"];
m3_128 [cluster="System.TimeSpan.ToString()", file="JsonSchemaBuilder.cs", label="Entry System.TimeSpan.ToString()", span="0-0"];
m3_324 [cluster="lambda expression", file="JsonSchemaBuilder.cs", label="Entry lambda expression", span="914-914"];
m3_245 [cluster="lambda expression", file="JsonSchemaBuilder.cs", label="SerializeObject(value, formatting, settings)", span="645-645"];
m3_244 [cluster="lambda expression", file="JsonSchemaBuilder.cs", label="Entry lambda expression", span="645-645"];
m3_246 [cluster="lambda expression", file="JsonSchemaBuilder.cs", label="Exit lambda expression", span="645-645"];
m3_295 [cluster="lambda expression", file="JsonSchemaBuilder.cs", label="DeserializeObject<T>(value, settings)", span="830-830"];
m3_294 [cluster="lambda expression", file="JsonSchemaBuilder.cs", label="Entry lambda expression", span="830-830"];
m3_296 [cluster="lambda expression", file="JsonSchemaBuilder.cs", label="Exit lambda expression", span="830-830"];
m3_304 [cluster="lambda expression", file="JsonSchemaBuilder.cs", label="DeserializeObject(value, type, settings)", span="861-861"];
m3_303 [cluster="lambda expression", file="JsonSchemaBuilder.cs", label="Entry lambda expression", span="861-861"];
m3_305 [cluster="lambda expression", file="JsonSchemaBuilder.cs", label="Exit lambda expression", span="861-861"];
m3_325 [cluster="lambda expression", file="JsonSchemaBuilder.cs", label="PopulateObject(value, target, settings)", span="914-914"];
m3_326 [cluster="lambda expression", file="JsonSchemaBuilder.cs", label="Exit lambda expression", span="914-914"];
m3_105 [cluster="Newtonsoft.Json.JsonConvert.ToString(sbyte)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonConvert.ToString(sbyte)", span="331-331"];
m3_106 [cluster="Newtonsoft.Json.JsonConvert.ToString(sbyte)", file="JsonSchemaBuilder.cs", label="return value.ToString(null, CultureInfo.InvariantCulture);", span="333-333"];
m3_107 [cluster="Newtonsoft.Json.JsonConvert.ToString(sbyte)", file="JsonSchemaBuilder.cs", label="Exit Newtonsoft.Json.JsonConvert.ToString(sbyte)", span="331-331"];
m3_297 [cluster="Newtonsoft.Json.JsonConvert.DeserializeObjectAsync(string)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonConvert.DeserializeObjectAsync(string)", span="841-841"];
m3_298 [cluster="Newtonsoft.Json.JsonConvert.DeserializeObjectAsync(string)", file="JsonSchemaBuilder.cs", label="return DeserializeObjectAsync(value, null, null);", span="843-843"];
m3_299 [cluster="Newtonsoft.Json.JsonConvert.DeserializeObjectAsync(string)", file="JsonSchemaBuilder.cs", label="Exit Newtonsoft.Json.JsonConvert.DeserializeObjectAsync(string)", span="841-841"];
m3_96 [cluster="Newtonsoft.Json.JsonConvert.EnsureDecimalPlace(string)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonConvert.EnsureDecimalPlace(string)", span="307-307"];
m3_97 [cluster="Newtonsoft.Json.JsonConvert.EnsureDecimalPlace(string)", file="JsonSchemaBuilder.cs", label="text.IndexOf('.') != -1", span="309-309"];
m3_98 [cluster="Newtonsoft.Json.JsonConvert.EnsureDecimalPlace(string)", file="JsonSchemaBuilder.cs", label="return text;", span="310-310"];
m3_99 [cluster="Newtonsoft.Json.JsonConvert.EnsureDecimalPlace(string)", file="JsonSchemaBuilder.cs", label="return text + ''.0'';", span="312-312"];
m3_100 [cluster="Newtonsoft.Json.JsonConvert.EnsureDecimalPlace(string)", file="JsonSchemaBuilder.cs", label="Exit Newtonsoft.Json.JsonConvert.EnsureDecimalPlace(string)", span="307-307"];
m3_11 [cluster="Newtonsoft.Json.Utilities.DateTimeUtils.EnsureDateTime(System.DateTime, Newtonsoft.Json.DateTimeZoneHandling)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.Utilities.DateTimeUtils.EnsureDateTime(System.DateTime, Newtonsoft.Json.DateTimeZoneHandling)", span="76-76"];
m3_67 [cluster="Newtonsoft.Json.JsonConvert.ToString(float)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonConvert.ToString(float)", span="263-263"];
m3_68 [cluster="Newtonsoft.Json.JsonConvert.ToString(float)", file="JsonSchemaBuilder.cs", label="return EnsureDecimalPlace(value, value.ToString(''R'', CultureInfo.InvariantCulture));", span="265-265"];
m3_69 [cluster="Newtonsoft.Json.JsonConvert.ToString(float)", file="JsonSchemaBuilder.cs", label="Exit Newtonsoft.Json.JsonConvert.ToString(float)", span="263-263"];
m3_47 [cluster="Newtonsoft.Json.JsonConvert.ToString(ushort)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonConvert.ToString(ushort)", span="214-214"];
m3_48 [cluster="Newtonsoft.Json.JsonConvert.ToString(ushort)", file="JsonSchemaBuilder.cs", label="return value.ToString(null, CultureInfo.InvariantCulture);", span="216-216"];
m3_49 [cluster="Newtonsoft.Json.JsonConvert.ToString(ushort)", file="JsonSchemaBuilder.cs", label="Exit Newtonsoft.Json.JsonConvert.ToString(ushort)", span="214-214"];
m3_284 [cluster="System.IO.StringReader.StringReader(string)", file="JsonSchemaBuilder.cs", label="Entry System.IO.StringReader.StringReader(string)", span="0-0"];
m3_323 [cluster="System.Threading.Tasks.TaskFactory.StartNew(System.Action)", file="JsonSchemaBuilder.cs", label="Entry System.Threading.Tasks.TaskFactory.StartNew(System.Action)", span="0-0"];
m3_70 [cluster="float.ToString(string, System.IFormatProvider)", file="JsonSchemaBuilder.cs", label="Entry float.ToString(string, System.IFormatProvider)", span="0-0"];
m3_27 [cluster="Newtonsoft.Json.JsonConvert.ToString(bool)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonConvert.ToString(bool)", span="163-163"];
m3_28 [cluster="Newtonsoft.Json.JsonConvert.ToString(bool)", file="JsonSchemaBuilder.cs", label="return (value) ? True : False;", span="165-165"];
m3_29 [cluster="Newtonsoft.Json.JsonConvert.ToString(bool)", file="JsonSchemaBuilder.cs", label="Exit Newtonsoft.Json.JsonConvert.ToString(bool)", span="163-163"];
m3_59 [cluster="Newtonsoft.Json.JsonConvert.ToStringInternal(BigInteger)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonConvert.ToStringInternal(BigInteger)", span="241-241"];
m3_60 [cluster="Newtonsoft.Json.JsonConvert.ToStringInternal(BigInteger)", file="JsonSchemaBuilder.cs", label="return value.ToString(null, CultureInfo.InvariantCulture);", span="243-243"];
m3_61 [cluster="Newtonsoft.Json.JsonConvert.ToStringInternal(BigInteger)", file="JsonSchemaBuilder.cs", label="Exit Newtonsoft.Json.JsonConvert.ToStringInternal(BigInteger)", span="241-241"];
m3_0 [cluster="Newtonsoft.Json.JsonConvert.ToString(System.DateTime)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonConvert.ToString(System.DateTime)", span="104-104"];
m3_1 [cluster="Newtonsoft.Json.JsonConvert.ToString(System.DateTime)", file="JsonSchemaBuilder.cs", label="return ToString(value, DateFormatHandling.IsoDateFormat, DateTimeZoneHandling.RoundtripKind);", span="106-106"];
m3_2 [cluster="Newtonsoft.Json.JsonConvert.ToString(System.DateTime)", file="JsonSchemaBuilder.cs", label="Exit Newtonsoft.Json.JsonConvert.ToString(System.DateTime)", span="104-104"];
m3_231 [cluster="System.IO.StringWriter.StringWriter(System.Text.StringBuilder, System.IFormatProvider)", file="JsonSchemaBuilder.cs", label="Entry System.IO.StringWriter.StringWriter(System.Text.StringBuilder, System.IFormatProvider)", span="0-0"];
m3_12 [cluster="Newtonsoft.Json.Utilities.StringUtils.CreateStringWriter(int)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.Utilities.StringUtils.CreateStringWriter(int)", span="103-103"];
m3_122 [cluster="Newtonsoft.Json.JsonConvert.ToString(System.TimeSpan)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonConvert.ToString(System.TimeSpan)", span="374-374"];
m3_123 [cluster="Newtonsoft.Json.JsonConvert.ToString(System.TimeSpan)", file="JsonSchemaBuilder.cs", label="return ToString(value, '''');", span="376-376"];
m3_124 [cluster="Newtonsoft.Json.JsonConvert.ToString(System.TimeSpan)", file="JsonSchemaBuilder.cs", label="Exit Newtonsoft.Json.JsonConvert.ToString(System.TimeSpan)", span="374-374"];
m3_83 [cluster="double.IsNaN(double)", file="JsonSchemaBuilder.cs", label="Entry double.IsNaN(double)", span="0-0"];
m3_146 [cluster="Newtonsoft.Json.Utilities.JavaScriptUtils.ToEscapedJavaScriptString(string, char, bool)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.Utilities.JavaScriptUtils.ToEscapedJavaScriptString(string, char, bool)", span="211-211"];
m3_14 [cluster="Newtonsoft.Json.Utilities.DateTimeUtils.WriteDateTimeString(System.IO.TextWriter, System.DateTime, Newtonsoft.Json.DateFormatHandling, string, System.Globalization.CultureInfo)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.Utilities.DateTimeUtils.WriteDateTimeString(System.IO.TextWriter, System.DateTime, Newtonsoft.Json.DateFormatHandling, string, System.Globalization.CultureInfo)", span="377-377"];
m3_291 [cluster="Newtonsoft.Json.JsonConvert.DeserializeObjectAsync<T>(string, Newtonsoft.Json.JsonSerializerSettings)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonConvert.DeserializeObjectAsync<T>(string, Newtonsoft.Json.JsonSerializerSettings)", span="828-828"];
m3_292 [cluster="Newtonsoft.Json.JsonConvert.DeserializeObjectAsync<T>(string, Newtonsoft.Json.JsonSerializerSettings)", file="JsonSchemaBuilder.cs", label="return Task.Factory.StartNew(() => DeserializeObject<T>(value, settings));", span="830-830"];
m3_293 [cluster="Newtonsoft.Json.JsonConvert.DeserializeObjectAsync<T>(string, Newtonsoft.Json.JsonSerializerSettings)", file="JsonSchemaBuilder.cs", label="Exit Newtonsoft.Json.JsonConvert.DeserializeObjectAsync<T>(string, Newtonsoft.Json.JsonSerializerSettings)", span="828-828"];
m3_204 [cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting)", span="512-512"];
m3_205 [cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting)", file="JsonSchemaBuilder.cs", label="return SerializeObject(value, formatting, (JsonSerializerSettings)null);", span="514-514"];
m3_206 [cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting)", file="JsonSchemaBuilder.cs", label="Exit Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting)", span="512-512"];
m3_200 [cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object)", span="499-499"];
m3_201 [cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object)", file="JsonSchemaBuilder.cs", label="return SerializeObject(value, Formatting.None, (JsonSerializerSettings)null);", span="501-501"];
m3_202 [cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object)", file="JsonSchemaBuilder.cs", label="Exit Newtonsoft.Json.JsonConvert.SerializeObject(object)", span="499-499"];
m3_257 [cluster="Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string)", span="692-692"];
m3_258 [cluster="Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string)", file="JsonSchemaBuilder.cs", label="return DeserializeObject<T>(value, (JsonSerializerSettings)null);", span="694-694"];
m3_259 [cluster="Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string)", file="JsonSchemaBuilder.cs", label="Exit Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string)", span="692-692"];
m3_207 [cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, params Newtonsoft.Json.JsonConverter[])", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object, params Newtonsoft.Json.JsonConverter[])", span="523-523"];
m3_208 [cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, params Newtonsoft.Json.JsonConverter[])", file="JsonSchemaBuilder.cs", label="return SerializeObject(value, Formatting.None, converters);", span="525-525"];
m3_209 [cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, params Newtonsoft.Json.JsonConverter[])", file="JsonSchemaBuilder.cs", label="Exit Newtonsoft.Json.JsonConvert.SerializeObject(object, params Newtonsoft.Json.JsonConverter[])", span="523-523"];
m3_26 [cluster="Newtonsoft.Json.Utilities.DateTimeUtils.WriteDateTimeOffsetString(System.IO.TextWriter, System.DateTimeOffset, Newtonsoft.Json.DateFormatHandling, string, System.Globalization.CultureInfo)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.Utilities.DateTimeUtils.WriteDateTimeOffsetString(System.IO.TextWriter, System.DateTimeOffset, Newtonsoft.Json.DateFormatHandling, string, System.Globalization.CultureInfo)", span="509-509"];
m3_230 [cluster="System.Text.StringBuilder.StringBuilder(int)", file="JsonSchemaBuilder.cs", label="Entry System.Text.StringBuilder.StringBuilder(int)", span="0-0"];
m3_327 [cluster="Newtonsoft.Json.JsonConvert.SerializeXmlNode(XmlNode)", file="JsonSchemaBuilder.cs", label="Entry Newtonsoft.Json.JsonConvert.SerializeXmlNode(XmlNode)", span="924-924"];
m3_328 [cluster="Newtonsoft.Json.JsonConvert.SerializeXmlNode(XmlNode)", file="JsonSchemaBuilder.cs", label="return SerializeXmlNode(node, Formatting.None);", span="926-926"];
m3_329 [cluster="Newtonsoft.Json.JsonConvert.SerializeXmlNode(XmlNode)", file="JsonSchemaBuilder.cs", label="Exit Newtonsoft.Json.JsonConvert.SerializeXmlNode(XmlNode)", span="924-924"];
m3_38 [cluster="System.Enum.ToString(string)", file="JsonSchemaBuilder.cs", label="Entry System.Enum.ToString(string)", span="0-0"];
m3_374 [file="JsonSchemaBuilder.cs", label=object, span=""];
m3_375 [file="JsonSchemaBuilder.cs", label="Newtonsoft.Json.Formatting", span=""];
m3_376 [file="JsonSchemaBuilder.cs", label="Newtonsoft.Json.JsonSerializerSettings", span=""];
m3_377 [file="JsonSchemaBuilder.cs", label=string, span=""];
m3_378 [file="JsonSchemaBuilder.cs", label="Newtonsoft.Json.JsonSerializerSettings", span=""];
m3_379 [file="JsonSchemaBuilder.cs", label=string, span=""];
m3_380 [file="JsonSchemaBuilder.cs", label="System.Type", span=""];
m3_381 [file="JsonSchemaBuilder.cs", label="Newtonsoft.Json.JsonSerializerSettings", span=""];
m3_382 [file="JsonSchemaBuilder.cs", label=string, span=""];
m3_383 [file="JsonSchemaBuilder.cs", label=object, span=""];
m3_384 [file="JsonSchemaBuilder.cs", label="Newtonsoft.Json.JsonSerializerSettings", span=""];
m6_0 [cluster="Newtonsoft.Json.Tests.Documentation.Samples.Schema.JsonValidatingReaderAndSerializer.Example()", file="JsonSchemaGenerator.cs", label="Entry Newtonsoft.Json.Tests.Documentation.Samples.Schema.JsonValidatingReaderAndSerializer.Example()", span="44-44"];
m6_1 [cluster="Newtonsoft.Json.Tests.Documentation.Samples.Schema.JsonValidatingReaderAndSerializer.Example()", color=green, community=0, file="JsonSchemaGenerator.cs", label="string schemaJson = @''{\r\n              'description': 'A person',\r\n              'type': 'object',\r\n              'properties': {\r\n                'name': {'type':'string'},\r\n                'hobbies': {\r\n                  'type': 'array',\r\n                  'items': {'type':'string'}\r\n                }\r\n              }\r\n            }''", prediction=6, span="47-57"];
m6_3 [cluster="Newtonsoft.Json.Tests.Documentation.Samples.Schema.JsonValidatingReaderAndSerializer.Example()", file="JsonSchemaGenerator.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="64-64"];
m6_4 [cluster="Newtonsoft.Json.Tests.Documentation.Samples.Schema.JsonValidatingReaderAndSerializer.Example()", file="JsonSchemaGenerator.cs", label="JsonValidatingReader validatingReader = new JsonValidatingReader(reader)", span="66-66"];
m6_5 [cluster="Newtonsoft.Json.Tests.Documentation.Samples.Schema.JsonValidatingReaderAndSerializer.Example()", file="JsonSchemaGenerator.cs", label="validatingReader.Schema = JsonSchema.Parse(schemaJson)", span="67-67"];
m6_6 [cluster="Newtonsoft.Json.Tests.Documentation.Samples.Schema.JsonValidatingReaderAndSerializer.Example()", file="JsonSchemaGenerator.cs", label="IList<string> messages = new List<string>()", span="69-69"];
m6_10 [cluster="Newtonsoft.Json.Tests.Documentation.Samples.Schema.JsonValidatingReaderAndSerializer.Example()", file="JsonSchemaGenerator.cs", label="Console.WriteLine(p.Name)", span="75-75"];
m6_14 [cluster="Newtonsoft.Json.JsonTextReader.JsonTextReader(System.IO.TextReader)", file="JsonSchemaGenerator.cs", label="Entry Newtonsoft.Json.JsonTextReader.JsonTextReader(System.IO.TextReader)", span="72-72"];
m6_15 [cluster="System.IO.StringReader.StringReader(string)", file="JsonSchemaGenerator.cs", label="Entry System.IO.StringReader.StringReader(string)", span="0-0"];
m6_12 [cluster="Unk.IsNotNull", file="JsonSchemaGenerator.cs", label="Entry Unk.IsNotNull", span=""];
m6_7 [cluster="Newtonsoft.Json.Linq.JObject.Parse(string)", file="JsonSchemaGenerator.cs", label="Entry Newtonsoft.Json.Linq.JObject.Parse(string)", span="359-359"];
m6_9 [cluster="System.Console.WriteLine(string)", file="JsonSchemaGenerator.cs", label="Entry System.Console.WriteLine(string)", span="0-0"];
m6_11 [cluster="Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.JavaScriptDateTimeConverter()", file="JsonSchemaGenerator.cs", label="Entry Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.JavaScriptDateTimeConverter()", span="34-34"];
m6_8 [cluster="Newtonsoft.Json.Linq.JToken.ToString()", file="JsonSchemaGenerator.cs", label="Entry Newtonsoft.Json.Linq.JToken.ToString()", span="410-410"];
m6_13 [cluster="Newtonsoft.Json.Tests.Documentation.Samples.Schema.JsonValidatingReaderAndSerializer.Example()", file="JsonSchemaGenerator.cs", label="Exit Newtonsoft.Json.Tests.Documentation.Samples.Schema.JsonValidatingReaderAndSerializer.Example()", span="44-44"];
m6_17 [cluster="Newtonsoft.Json.Schema.JsonSchema.Parse(string)", file="JsonSchemaGenerator.cs", label="Entry Newtonsoft.Json.Schema.JsonSchema.Parse(string)", span="294-294"];
m6_23 [cluster="lambda expression", file="JsonSchemaGenerator.cs", label="Entry lambda expression", span="70-70"];
m6_24 [cluster="lambda expression", file="JsonSchemaGenerator.cs", label="messages.Add(a.Message)", span="70-70"];
m6_25 [cluster="lambda expression", file="JsonSchemaGenerator.cs", label="Exit lambda expression", span="70-70"];
m6_16 [cluster="Newtonsoft.Json.JsonValidatingReader.JsonValidatingReader(Newtonsoft.Json.JsonReader)", file="JsonSchemaGenerator.cs", label="Entry Newtonsoft.Json.JsonValidatingReader.JsonValidatingReader(Newtonsoft.Json.JsonReader)", span="297-297"];
m6_22 [cluster="System.Console.WriteLine(bool)", file="JsonSchemaGenerator.cs", label="Entry System.Console.WriteLine(bool)", span="0-0"];
m6_20 [cluster="Newtonsoft.Json.JsonSerializer.Deserialize<T>(Newtonsoft.Json.JsonReader)", file="JsonSchemaGenerator.cs", label="Entry Newtonsoft.Json.JsonSerializer.Deserialize<T>(Newtonsoft.Json.JsonReader)", span="688-688"];
m6_26 [cluster="System.Collections.Generic.ICollection<T>.Add(T)", file="JsonSchemaGenerator.cs", label="Entry System.Collections.Generic.ICollection<T>.Add(T)", span="0-0"];
m6_18 [cluster="System.Collections.Generic.List<T>.List()", file="JsonSchemaGenerator.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m6_21 [cluster="System.Console.WriteLine(string)", file="JsonSchemaGenerator.cs", label="Entry System.Console.WriteLine(string)", span="0-0"];
m6_27 [file="JsonSchemaGenerator.cs", label=messages, span=""];
m7_16 [cluster="Newtonsoft.Json.JsonSerializerSettings.JsonSerializerSettings()", file="JsonSchemaModel.cs", label="Entry Newtonsoft.Json.JsonSerializerSettings.JsonSerializerSettings()", span="359-359"];
m7_23 [cluster="Newtonsoft.Json.Tests.Serialization.CamelCasePropertyNamesContractResolverTests.JTokenWriter()", file="JsonSchemaModel.cs", label="Entry Newtonsoft.Json.Tests.Serialization.CamelCasePropertyNamesContractResolverTests.JTokenWriter()", span="82-82"];
m7_24 [cluster="Newtonsoft.Json.Tests.Serialization.CamelCasePropertyNamesContractResolverTests.JTokenWriter()", file="JsonSchemaModel.cs", label="JsonIgnoreAttributeOnClassTestClass ignoreAttributeOnClassTestClass = new JsonIgnoreAttributeOnClassTestClass()", span="84-84"];
m7_25 [cluster="Newtonsoft.Json.Tests.Serialization.CamelCasePropertyNamesContractResolverTests.JTokenWriter()", file="JsonSchemaModel.cs", label="ignoreAttributeOnClassTestClass.Field = int.MinValue", span="85-85"];
m7_29 [cluster="Newtonsoft.Json.Tests.Serialization.CamelCasePropertyNamesContractResolverTests.JTokenWriter()", file="JsonSchemaModel.cs", label="serializer.Serialize(writer, ignoreAttributeOnClassTestClass)", span="92-92"];
m7_26 [cluster="Newtonsoft.Json.Tests.Serialization.CamelCasePropertyNamesContractResolverTests.JTokenWriter()", file="JsonSchemaModel.cs", label="JsonSerializer serializer = new JsonSerializer()", span="87-87"];
m7_27 [cluster="Newtonsoft.Json.Tests.Serialization.CamelCasePropertyNamesContractResolverTests.JTokenWriter()", file="JsonSchemaModel.cs", label="serializer.ContractResolver = new CamelCasePropertyNamesContractResolver()", span="88-88"];
m7_28 [cluster="Newtonsoft.Json.Tests.Serialization.CamelCasePropertyNamesContractResolverTests.JTokenWriter()", file="JsonSchemaModel.cs", label="JTokenWriter writer = new JTokenWriter()", span="90-90"];
m7_30 [cluster="Newtonsoft.Json.Tests.Serialization.CamelCasePropertyNamesContractResolverTests.JTokenWriter()", file="JsonSchemaModel.cs", label="JObject o = (JObject)writer.Token", span="94-94"];
m7_31 [cluster="Newtonsoft.Json.Tests.Serialization.CamelCasePropertyNamesContractResolverTests.JTokenWriter()", file="JsonSchemaModel.cs", label="JProperty p = o.Property(''theField'')", span="95-95"];
m7_34 [cluster="Newtonsoft.Json.Tests.Serialization.CamelCasePropertyNamesContractResolverTests.JTokenWriter()", file="JsonSchemaModel.cs", label="string json = o.ToString()", span="100-100"];
m7_32 [cluster="Newtonsoft.Json.Tests.Serialization.CamelCasePropertyNamesContractResolverTests.JTokenWriter()", file="JsonSchemaModel.cs", label="Assert.IsNotNull(p)", span="97-97"];
m7_33 [cluster="Newtonsoft.Json.Tests.Serialization.CamelCasePropertyNamesContractResolverTests.JTokenWriter()", file="JsonSchemaModel.cs", label="Assert.AreEqual(int.MinValue, (int)p.Value)", span="98-98"];
m7_35 [cluster="Newtonsoft.Json.Tests.Serialization.CamelCasePropertyNamesContractResolverTests.JTokenWriter()", file="JsonSchemaModel.cs", label="Exit Newtonsoft.Json.Tests.Serialization.CamelCasePropertyNamesContractResolverTests.JTokenWriter()", span="82-82"];
m7_14 [cluster="Newtonsoft.Json.Tests.TestObjects.Person.Person()", file="JsonSchemaModel.cs", label="Entry Newtonsoft.Json.Tests.TestObjects.Person.Person()", span="36-36"];
m7_18 [cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting, Newtonsoft.Json.JsonSerializerSettings)", file="JsonSchemaModel.cs", label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting, Newtonsoft.Json.JsonSerializerSettings)", span="606-606"];
m7_40 [cluster="Newtonsoft.Json.Linq.JObject.Property(string)", file="JsonSchemaModel.cs", label="Entry Newtonsoft.Json.Linq.JObject.Property(string)", span="239-239"];
m7_42 [cluster="Newtonsoft.Json.Linq.JToken.ToString()", file="JsonSchemaModel.cs", label="Entry Newtonsoft.Json.Linq.JToken.ToString()", span="404-404"];
m7_55 [cluster="Newtonsoft.Json.Tests.Serialization.CamelCasePropertyNamesContractResolverTests.BlogPostExample()", file="JsonSchemaModel.cs", label="Entry Newtonsoft.Json.Tests.Serialization.CamelCasePropertyNamesContractResolverTests.BlogPostExample()", span="140-140"];
m7_56 [cluster="Newtonsoft.Json.Tests.Serialization.CamelCasePropertyNamesContractResolverTests.BlogPostExample()", file="JsonSchemaModel.cs", label="Product product = new Product\r\n            {\r\n                ExpiryDate = new DateTime(2010, 12, 20, 18, 1, 0, DateTimeKind.Utc),\r\n                Name = ''Widget'',\r\n                Price = 9.99m,\r\n                Sizes = new[] { ''Small'', ''Medium'', ''Large'' }\r\n            }", span="142-148"];
m7_57 [cluster="Newtonsoft.Json.Tests.Serialization.CamelCasePropertyNamesContractResolverTests.BlogPostExample()", file="JsonSchemaModel.cs", label="string json =\r\n                JsonConvert.SerializeObject(\r\n                    product,\r\n                    Formatting.Indented,\r\n                    new JsonSerializerSettings { ContractResolver = new CamelCasePropertyNamesContractResolver() }\r\n                    )", span="150-155"];
m7_58 [cluster="Newtonsoft.Json.Tests.Serialization.CamelCasePropertyNamesContractResolverTests.BlogPostExample()", file="JsonSchemaModel.cs", label="StringAssert.AreEqual(@''{\r\n  ''''name'''': ''''Widget'''',\r\n  ''''expiryDate'''': ''''2010-12-20T18:01:00Z'''',\r\n  ''''price'''': 9.99,\r\n  ''''sizes'''': [\r\n    ''''Small'''',\r\n    ''''Medium'''',\r\n    ''''Large''''\r\n  ]\r\n}'', json)", span="168-177"];
m7_59 [cluster="Newtonsoft.Json.Tests.Serialization.CamelCasePropertyNamesContractResolverTests.BlogPostExample()", file="JsonSchemaModel.cs", label="Exit Newtonsoft.Json.Tests.Serialization.CamelCasePropertyNamesContractResolverTests.BlogPostExample()", span="140-140"];
m7_68 [cluster="Newtonsoft.Json.Tests.Serialization.TestDynamicObject.TestDynamicObject()", file="JsonSchemaModel.cs", label="Entry Newtonsoft.Json.Tests.Serialization.TestDynamicObject.TestDynamicObject()", span="348-348"];
m7_37 [cluster="Newtonsoft.Json.JsonSerializer.JsonSerializer()", file="JsonSchemaModel.cs", label="Entry Newtonsoft.Json.JsonSerializer.JsonSerializer()", span="433-433"];
m7_17 [cluster="Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver.CamelCasePropertyNamesContractResolver()", file="JsonSchemaModel.cs", label="Entry Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver.CamelCasePropertyNamesContractResolver()", span="38-38"];
m7_69 [cluster="Newtonsoft.Json.Tests.Serialization.CamelCasePropertyNamesContractResolverTests.DictionaryCamelCasePropertyNames()", file="JsonSchemaModel.cs", label="Entry Newtonsoft.Json.Tests.Serialization.CamelCasePropertyNamesContractResolverTests.DictionaryCamelCasePropertyNames()", span="205-205"];
m7_70 [cluster="Newtonsoft.Json.Tests.Serialization.CamelCasePropertyNamesContractResolverTests.DictionaryCamelCasePropertyNames()", file="JsonSchemaModel.cs", label="Dictionary<string, string> values = new Dictionary<string, string>\r\n            {\r\n                { ''First'', ''Value1!'' },\r\n                { ''Second'', ''Value2!'' }\r\n            }", span="207-211"];
m7_71 [cluster="Newtonsoft.Json.Tests.Serialization.CamelCasePropertyNamesContractResolverTests.DictionaryCamelCasePropertyNames()", file="JsonSchemaModel.cs", label="string json = JsonConvert.SerializeObject(values, Formatting.Indented,\r\n                new JsonSerializerSettings\r\n                {\r\n                    ContractResolver = new CamelCasePropertyNamesContractResolver()\r\n                })", span="213-217"];
m7_72 [cluster="Newtonsoft.Json.Tests.Serialization.CamelCasePropertyNamesContractResolverTests.DictionaryCamelCasePropertyNames()", file="JsonSchemaModel.cs", label="StringAssert.AreEqual(@''{\r\n  ''''first'''': ''''Value1!'''',\r\n  ''''second'''': ''''Value2!''''\r\n}'', json)", span="219-222"];
m7_73 [cluster="Newtonsoft.Json.Tests.Serialization.CamelCasePropertyNamesContractResolverTests.DictionaryCamelCasePropertyNames()", file="JsonSchemaModel.cs", label="Exit Newtonsoft.Json.Tests.Serialization.CamelCasePropertyNamesContractResolverTests.DictionaryCamelCasePropertyNames()", span="205-205"];
m7_60 [cluster="Newtonsoft.Json.Tests.TestObjects.Product.Product()", file="JsonSchemaModel.cs", label="Entry Newtonsoft.Json.Tests.TestObjects.Product.Product()", span="29-29"];
m7_74 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="JsonSchemaModel.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m7_21 [cluster="Unk.AreEqual", file="JsonSchemaModel.cs", label="Entry Unk.AreEqual", span=""];
m7_52 [cluster="Newtonsoft.Json.Tests.TestObjects.PrivateMembersClass.PrivateMembersClass(string, string)", file="JsonSchemaModel.cs", label="Entry Newtonsoft.Json.Tests.TestObjects.PrivateMembersClass.PrivateMembersClass(string, string)", span="29-29"];
m7_22 [cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting)", file="JsonSchemaModel.cs", label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting)", span="525-525"];
m7_41 [cluster="Unk.IsNotNull", file="JsonSchemaModel.cs", label="Entry Unk.IsNotNull", span=""];
m7_36 [cluster="Newtonsoft.Json.Tests.TestObjects.JsonIgnoreAttributeOnClassTestClass.JsonIgnoreAttributeOnClassTestClass()", file="JsonSchemaModel.cs", label="Entry Newtonsoft.Json.Tests.TestObjects.JsonIgnoreAttributeOnClassTestClass.JsonIgnoreAttributeOnClassTestClass()", span="28-28"];
m7_0 [cluster="Newtonsoft.Json.Tests.Serialization.CamelCasePropertyNamesContractResolverTests.JsonConvertSerializerSettings()", file="JsonSchemaModel.cs", label="Entry Newtonsoft.Json.Tests.Serialization.CamelCasePropertyNamesContractResolverTests.JsonConvertSerializerSettings()", span="46-46"];
m7_1 [cluster="Newtonsoft.Json.Tests.Serialization.CamelCasePropertyNamesContractResolverTests.JsonConvertSerializerSettings()", file="JsonSchemaModel.cs", label="Person person = new Person()", span="48-48"];
m7_2 [cluster="Newtonsoft.Json.Tests.Serialization.CamelCasePropertyNamesContractResolverTests.JsonConvertSerializerSettings()", file="JsonSchemaModel.cs", label="person.BirthDate = new DateTime(2000, 11, 20, 23, 55, 44, DateTimeKind.Utc)", span="49-49"];
m7_3 [cluster="Newtonsoft.Json.Tests.Serialization.CamelCasePropertyNamesContractResolverTests.JsonConvertSerializerSettings()", file="JsonSchemaModel.cs", label="person.LastModified = new DateTime(2000, 11, 20, 23, 55, 44, DateTimeKind.Utc)", span="50-50"];
m7_4 [cluster="Newtonsoft.Json.Tests.Serialization.CamelCasePropertyNamesContractResolverTests.JsonConvertSerializerSettings()", file="JsonSchemaModel.cs", label="person.Name = ''Name!''", span="51-51"];
m7_5 [cluster="Newtonsoft.Json.Tests.Serialization.CamelCasePropertyNamesContractResolverTests.JsonConvertSerializerSettings()", file="JsonSchemaModel.cs", label="string json = JsonConvert.SerializeObject(person, Formatting.Indented, new JsonSerializerSettings\r\n            {\r\n                ContractResolver = new CamelCasePropertyNamesContractResolver()\r\n            })", span="53-56"];
m7_8 [cluster="Newtonsoft.Json.Tests.Serialization.CamelCasePropertyNamesContractResolverTests.JsonConvertSerializerSettings()", file="JsonSchemaModel.cs", label="Assert.AreEqual(person.BirthDate, deserializedPerson.BirthDate)", span="69-69"];
m7_9 [cluster="Newtonsoft.Json.Tests.Serialization.CamelCasePropertyNamesContractResolverTests.JsonConvertSerializerSettings()", file="JsonSchemaModel.cs", label="Assert.AreEqual(person.LastModified, deserializedPerson.LastModified)", span="70-70"];
m7_10 [cluster="Newtonsoft.Json.Tests.Serialization.CamelCasePropertyNamesContractResolverTests.JsonConvertSerializerSettings()", file="JsonSchemaModel.cs", label="Assert.AreEqual(person.Name, deserializedPerson.Name)", span="71-71"];
m7_11 [cluster="Newtonsoft.Json.Tests.Serialization.CamelCasePropertyNamesContractResolverTests.JsonConvertSerializerSettings()", file="JsonSchemaModel.cs", label="json = JsonConvert.SerializeObject(person, Formatting.Indented)", span="73-73"];
m7_6 [cluster="Newtonsoft.Json.Tests.Serialization.CamelCasePropertyNamesContractResolverTests.JsonConvertSerializerSettings()", file="JsonSchemaModel.cs", label="StringAssert.AreEqual(@''{\r\n  ''''name'''': ''''Name!'''',\r\n  ''''birthDate'''': ''''2000-11-20T23:55:44Z'''',\r\n  ''''lastModified'''': ''''2000-11-20T23:55:44Z''''\r\n}'', json)", span="58-62"];
m7_7 [cluster="Newtonsoft.Json.Tests.Serialization.CamelCasePropertyNamesContractResolverTests.JsonConvertSerializerSettings()", file="JsonSchemaModel.cs", label="Person deserializedPerson = JsonConvert.DeserializeObject<Person>(json, new JsonSerializerSettings\r\n            {\r\n                ContractResolver = new CamelCasePropertyNamesContractResolver()\r\n            })", span="64-67"];
m7_12 [cluster="Newtonsoft.Json.Tests.Serialization.CamelCasePropertyNamesContractResolverTests.JsonConvertSerializerSettings()", file="JsonSchemaModel.cs", label="StringAssert.AreEqual(@''{\r\n  ''''Name'''': ''''Name!'''',\r\n  ''''BirthDate'''': ''''2000-11-20T23:55:44Z'''',\r\n  ''''LastModified'''': ''''2000-11-20T23:55:44Z''''\r\n}'', json)", span="74-78"];
m7_13 [cluster="Newtonsoft.Json.Tests.Serialization.CamelCasePropertyNamesContractResolverTests.JsonConvertSerializerSettings()", file="JsonSchemaModel.cs", label="Exit Newtonsoft.Json.Tests.Serialization.CamelCasePropertyNamesContractResolverTests.JsonConvertSerializerSettings()", span="46-46"];
m7_15 [cluster="System.DateTime.DateTime(int, int, int, int, int, int, System.DateTimeKind)", file="JsonSchemaModel.cs", label="Entry System.DateTime.DateTime(int, int, int, int, int, int, System.DateTimeKind)", span="0-0"];
m7_38 [cluster="Newtonsoft.Json.Linq.JTokenWriter.JTokenWriter()", file="JsonSchemaModel.cs", label="Entry Newtonsoft.Json.Linq.JTokenWriter.JTokenWriter()", span="74-74"];
m7_53 [cluster="System.Type.GetField(string, System.Reflection.BindingFlags)", file="JsonSchemaModel.cs", label="Entry System.Type.GetField(string, System.Reflection.BindingFlags)", span="0-0"];
m7_20 [cluster="Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string, Newtonsoft.Json.JsonSerializerSettings)", file="JsonSchemaModel.cs", label="Entry Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string, Newtonsoft.Json.JsonSerializerSettings)", span="802-802"];
m7_19 [cluster="Newtonsoft.Json.Tests.StringAssert.AreEqual(string, string)", file="JsonSchemaModel.cs", label="Entry Newtonsoft.Json.Tests.StringAssert.AreEqual(string, string)", span="184-184"];
m7_54 [cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberValue(System.Reflection.MemberInfo, object)", file="JsonSchemaModel.cs", label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberValue(System.Reflection.MemberInfo, object)", span="473-473"];
m7_61 [cluster="Newtonsoft.Json.Tests.Serialization.CamelCasePropertyNamesContractResolverTests.DynamicCamelCasePropertyNames()", file="JsonSchemaModel.cs", label="Entry Newtonsoft.Json.Tests.Serialization.CamelCasePropertyNamesContractResolverTests.DynamicCamelCasePropertyNames()", span="182-182"];
m7_62 [cluster="Newtonsoft.Json.Tests.Serialization.CamelCasePropertyNamesContractResolverTests.DynamicCamelCasePropertyNames()", file="JsonSchemaModel.cs", label="dynamic o = new TestDynamicObject()", span="184-184"];
m7_63 [cluster="Newtonsoft.Json.Tests.Serialization.CamelCasePropertyNamesContractResolverTests.DynamicCamelCasePropertyNames()", file="JsonSchemaModel.cs", label="o.Text = ''Text!''", span="185-185"];
m7_64 [cluster="Newtonsoft.Json.Tests.Serialization.CamelCasePropertyNamesContractResolverTests.DynamicCamelCasePropertyNames()", file="JsonSchemaModel.cs", label="o.Integer = int.MaxValue", span="186-186"];
m7_65 [cluster="Newtonsoft.Json.Tests.Serialization.CamelCasePropertyNamesContractResolverTests.DynamicCamelCasePropertyNames()", file="JsonSchemaModel.cs", label="string json = JsonConvert.SerializeObject(o, Formatting.Indented,\r\n                new JsonSerializerSettings\r\n                {\r\n                    ContractResolver = new CamelCasePropertyNamesContractResolver()\r\n                })", span="188-192"];
m7_66 [cluster="Newtonsoft.Json.Tests.Serialization.CamelCasePropertyNamesContractResolverTests.DynamicCamelCasePropertyNames()", file="JsonSchemaModel.cs", label="StringAssert.AreEqual(@''{\r\n  ''''explicit'''': false,\r\n  ''''text'''': ''''Text!'''',\r\n  ''''integer'''': 2147483647,\r\n  ''''int'''': 0,\r\n  ''''childObject'''': null\r\n}'', json)", span="194-200"];
m7_67 [cluster="Newtonsoft.Json.Tests.Serialization.CamelCasePropertyNamesContractResolverTests.DynamicCamelCasePropertyNames()", file="JsonSchemaModel.cs", label="Exit Newtonsoft.Json.Tests.Serialization.CamelCasePropertyNamesContractResolverTests.DynamicCamelCasePropertyNames()", span="182-182"];
m7_43 [cluster="Newtonsoft.Json.Tests.Serialization.CamelCasePropertyNamesContractResolverTests.MemberSearchFlags()", file="JsonSchemaModel.cs", label="Entry Newtonsoft.Json.Tests.Serialization.CamelCasePropertyNamesContractResolverTests.MemberSearchFlags()", span="106-106"];
m7_44 [cluster="Newtonsoft.Json.Tests.Serialization.CamelCasePropertyNamesContractResolverTests.MemberSearchFlags()", file="JsonSchemaModel.cs", label="PrivateMembersClass privateMembersClass = new PrivateMembersClass(''PrivateString!'', ''InternalString!'')", span="108-108"];
m7_45 [cluster="Newtonsoft.Json.Tests.Serialization.CamelCasePropertyNamesContractResolverTests.MemberSearchFlags()", file="JsonSchemaModel.cs", label="string json = JsonConvert.SerializeObject(privateMembersClass, Formatting.Indented, new JsonSerializerSettings\r\n            {\r\n                ContractResolver = new CamelCasePropertyNamesContractResolver { DefaultMembersSearchFlags = BindingFlags.NonPublic | BindingFlags.Instance }\r\n            })", span="110-113"];
m7_46 [cluster="Newtonsoft.Json.Tests.Serialization.CamelCasePropertyNamesContractResolverTests.MemberSearchFlags()", file="JsonSchemaModel.cs", label="StringAssert.AreEqual(@''{\r\n  ''''_privateString'''': ''''PrivateString!'''',\r\n  ''''i'''': 0,\r\n  ''''_internalString'''': ''''InternalString!''''\r\n}'', json)", span="115-119"];
m7_47 [cluster="Newtonsoft.Json.Tests.Serialization.CamelCasePropertyNamesContractResolverTests.MemberSearchFlags()", file="JsonSchemaModel.cs", label="PrivateMembersClass deserializedPrivateMembersClass = JsonConvert.DeserializeObject<PrivateMembersClass>(@''{\r\n  ''''_privateString'''': ''''Private!'''',\r\n  ''''i'''': -2,\r\n  ''''_internalString'''': ''''Internal!''''\r\n}'', new JsonSerializerSettings\r\n            {\r\n                ContractResolver = new CamelCasePropertyNamesContractResolver { DefaultMembersSearchFlags = BindingFlags.NonPublic | BindingFlags.Instance }\r\n            })", span="121-128"];
m7_48 [cluster="Newtonsoft.Json.Tests.Serialization.CamelCasePropertyNamesContractResolverTests.MemberSearchFlags()", file="JsonSchemaModel.cs", label="Assert.AreEqual(''Private!'', ReflectionUtils.GetMemberValue(typeof(PrivateMembersClass).GetField(''_privateString'', BindingFlags.Instance | BindingFlags.NonPublic), deserializedPrivateMembersClass))", span="130-130"];
m7_49 [cluster="Newtonsoft.Json.Tests.Serialization.CamelCasePropertyNamesContractResolverTests.MemberSearchFlags()", file="JsonSchemaModel.cs", label="Assert.AreEqual(''Internal!'', ReflectionUtils.GetMemberValue(typeof(PrivateMembersClass).GetField(''_internalString'', BindingFlags.Instance | BindingFlags.NonPublic), deserializedPrivateMembersClass))", span="131-131"];
m7_50 [cluster="Newtonsoft.Json.Tests.Serialization.CamelCasePropertyNamesContractResolverTests.MemberSearchFlags()", file="JsonSchemaModel.cs", label="Assert.AreEqual(0, ReflectionUtils.GetMemberValue(typeof(PrivateMembersClass).GetField(''i'', BindingFlags.Instance | BindingFlags.NonPublic), deserializedPrivateMembersClass))", span="134-134"];
m7_51 [cluster="Newtonsoft.Json.Tests.Serialization.CamelCasePropertyNamesContractResolverTests.MemberSearchFlags()", file="JsonSchemaModel.cs", label="Exit Newtonsoft.Json.Tests.Serialization.CamelCasePropertyNamesContractResolverTests.MemberSearchFlags()", span="106-106"];
m8_92 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.TryGetValue(TKey, out TValue)", file="JsonSchemaModelBuilder.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.TryGetValue(TKey, out TValue)", span="0-0"];
m8_10 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.BuildNodeModel(Newtonsoft.Json.Schema.JsonSchemaNode)", file="JsonSchemaModelBuilder.cs", label="Entry Newtonsoft.Json.Schema.JsonSchemaModelBuilder.BuildNodeModel(Newtonsoft.Json.Schema.JsonSchemaNode)", span="162-162"];
m8_69 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.BuildNodeModel(Newtonsoft.Json.Schema.JsonSchemaNode)", file="JsonSchemaModelBuilder.cs", label="JsonSchemaModel model", span="164-164"];
m8_70 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.BuildNodeModel(Newtonsoft.Json.Schema.JsonSchemaNode)", file="JsonSchemaModelBuilder.cs", label="_nodeModels.TryGetValue(node, out model)", span="165-165"];
m8_72 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.BuildNodeModel(Newtonsoft.Json.Schema.JsonSchemaNode)", file="JsonSchemaModelBuilder.cs", label="model = JsonSchemaModel.Create(node.Schemas)", span="170-170"];
m8_73 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.BuildNodeModel(Newtonsoft.Json.Schema.JsonSchemaNode)", file="JsonSchemaModelBuilder.cs", label="_nodeModels[node] = model", span="171-171"];
m8_74 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.BuildNodeModel(Newtonsoft.Json.Schema.JsonSchemaNode)", file="JsonSchemaModelBuilder.cs", label="node.Properties", span="173-173"];
m8_78 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.BuildNodeModel(Newtonsoft.Json.Schema.JsonSchemaNode)", file="JsonSchemaModelBuilder.cs", label="node.PatternProperties", span="182-182"];
m8_82 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.BuildNodeModel(Newtonsoft.Json.Schema.JsonSchemaNode)", file="JsonSchemaModelBuilder.cs", label="node.Items", span="191-191"];
m8_86 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.BuildNodeModel(Newtonsoft.Json.Schema.JsonSchemaNode)", file="JsonSchemaModelBuilder.cs", label="node.AdditionalProperties != null", span="200-200"];
m8_87 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.BuildNodeModel(Newtonsoft.Json.Schema.JsonSchemaNode)", file="JsonSchemaModelBuilder.cs", label="model.AdditionalProperties = BuildNodeModel(node.AdditionalProperties)", span="202-202"];
m8_88 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.BuildNodeModel(Newtonsoft.Json.Schema.JsonSchemaNode)", file="JsonSchemaModelBuilder.cs", label="node.AdditionalItems != null", span="204-204"];
m8_89 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.BuildNodeModel(Newtonsoft.Json.Schema.JsonSchemaNode)", file="JsonSchemaModelBuilder.cs", label="model.AdditionalItems = BuildNodeModel(node.AdditionalItems)", span="206-206"];
m8_71 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.BuildNodeModel(Newtonsoft.Json.Schema.JsonSchemaNode)", file="JsonSchemaModelBuilder.cs", label="return model;", span="167-167"];
m8_75 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.BuildNodeModel(Newtonsoft.Json.Schema.JsonSchemaNode)", file="JsonSchemaModelBuilder.cs", label="model.Properties == null", span="175-175"];
m8_76 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.BuildNodeModel(Newtonsoft.Json.Schema.JsonSchemaNode)", file="JsonSchemaModelBuilder.cs", label="model.Properties = new Dictionary<string, JsonSchemaModel>()", span="177-177"];
m8_77 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.BuildNodeModel(Newtonsoft.Json.Schema.JsonSchemaNode)", file="JsonSchemaModelBuilder.cs", label="model.Properties[property.Key] = BuildNodeModel(property.Value)", span="180-180"];
m8_79 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.BuildNodeModel(Newtonsoft.Json.Schema.JsonSchemaNode)", file="JsonSchemaModelBuilder.cs", label="model.PatternProperties == null", span="184-184"];
m8_80 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.BuildNodeModel(Newtonsoft.Json.Schema.JsonSchemaNode)", file="JsonSchemaModelBuilder.cs", label="model.PatternProperties = new Dictionary<string, JsonSchemaModel>()", span="186-186"];
m8_81 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.BuildNodeModel(Newtonsoft.Json.Schema.JsonSchemaNode)", file="JsonSchemaModelBuilder.cs", label="model.PatternProperties[property.Key] = BuildNodeModel(property.Value)", span="189-189"];
m8_83 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.BuildNodeModel(Newtonsoft.Json.Schema.JsonSchemaNode)", file="JsonSchemaModelBuilder.cs", label="model.Items == null", span="193-193"];
m8_84 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.BuildNodeModel(Newtonsoft.Json.Schema.JsonSchemaNode)", file="JsonSchemaModelBuilder.cs", label="model.Items = new List<JsonSchemaModel>()", span="195-195"];
m8_85 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.BuildNodeModel(Newtonsoft.Json.Schema.JsonSchemaNode)", file="JsonSchemaModelBuilder.cs", label="model.Items.Add(BuildNodeModel(t))", span="198-198"];
m8_90 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.BuildNodeModel(Newtonsoft.Json.Schema.JsonSchemaNode)", file="JsonSchemaModelBuilder.cs", label="return model;", span="209-209"];
m8_91 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.BuildNodeModel(Newtonsoft.Json.Schema.JsonSchemaNode)", file="JsonSchemaModelBuilder.cs", label="Exit Newtonsoft.Json.Schema.JsonSchemaModelBuilder.BuildNodeModel(Newtonsoft.Json.Schema.JsonSchemaNode)", span="162-162"];
m8_8 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.AddSchema(Newtonsoft.Json.Schema.JsonSchemaNode, Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaModelBuilder.cs", label="Entry Newtonsoft.Json.Schema.JsonSchemaModelBuilder.AddSchema(Newtonsoft.Json.Schema.JsonSchemaNode, Newtonsoft.Json.Schema.JsonSchema)", span="54-54"];
m8_11 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.AddSchema(Newtonsoft.Json.Schema.JsonSchemaNode, Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaModelBuilder.cs", label="string newId", span="56-56"];
m8_12 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.AddSchema(Newtonsoft.Json.Schema.JsonSchemaNode, Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaModelBuilder.cs", label="existingNode != null", span="57-57"];
m8_13 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.AddSchema(Newtonsoft.Json.Schema.JsonSchemaNode, Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaModelBuilder.cs", label="existingNode.Schemas.Contains(schema)", span="59-59"];
m8_14 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.AddSchema(Newtonsoft.Json.Schema.JsonSchemaNode, Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaModelBuilder.cs", label="return existingNode;", span="61-61"];
m8_15 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.AddSchema(Newtonsoft.Json.Schema.JsonSchemaNode, Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaModelBuilder.cs", label="newId = JsonSchemaNode.GetId(existingNode.Schemas.Union(new[] { schema }))", span="64-64"];
m8_16 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.AddSchema(Newtonsoft.Json.Schema.JsonSchemaNode, Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaModelBuilder.cs", label="newId = JsonSchemaNode.GetId(new[] { schema })", span="68-68"];
m8_19 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.AddSchema(Newtonsoft.Json.Schema.JsonSchemaNode, Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaModelBuilder.cs", label="JsonSchemaNode currentNode = (existingNode != null)\r\n                ? existingNode.Combine(schema)\r\n                : new JsonSchemaNode(schema)", span="76-78"];
m8_21 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.AddSchema(Newtonsoft.Json.Schema.JsonSchemaNode, Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaModelBuilder.cs", label="AddProperties(schema.Properties, currentNode.Properties)", span="82-82"];
m8_22 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.AddSchema(Newtonsoft.Json.Schema.JsonSchemaNode, Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaModelBuilder.cs", label="AddProperties(schema.PatternProperties, currentNode.PatternProperties)", span="84-84"];
m8_23 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.AddSchema(Newtonsoft.Json.Schema.JsonSchemaNode, Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaModelBuilder.cs", label="schema.Items != null", span="86-86"];
m8_25 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.AddSchema(Newtonsoft.Json.Schema.JsonSchemaNode, Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaModelBuilder.cs", label="i < schema.Items.Count", span="88-88"];
m8_26 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.AddSchema(Newtonsoft.Json.Schema.JsonSchemaNode, Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaModelBuilder.cs", label="AddItem(currentNode, i, schema.Items[i])", span="90-90"];
m8_28 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.AddSchema(Newtonsoft.Json.Schema.JsonSchemaNode, Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaModelBuilder.cs", label="schema.AdditionalItems != null", span="94-94"];
m8_29 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.AddSchema(Newtonsoft.Json.Schema.JsonSchemaNode, Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaModelBuilder.cs", label="AddAdditionalItems(currentNode, schema.AdditionalItems)", span="96-96"];
m8_30 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.AddSchema(Newtonsoft.Json.Schema.JsonSchemaNode, Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaModelBuilder.cs", label="schema.AdditionalProperties != null", span="99-99"];
m8_31 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.AddSchema(Newtonsoft.Json.Schema.JsonSchemaNode, Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaModelBuilder.cs", label="AddAdditionalProperties(currentNode, schema.AdditionalProperties)", span="101-101"];
m8_32 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.AddSchema(Newtonsoft.Json.Schema.JsonSchemaNode, Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaModelBuilder.cs", label="schema.Extends != null", span="104-104"];
m8_33 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.AddSchema(Newtonsoft.Json.Schema.JsonSchemaNode, Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaModelBuilder.cs", label="schema.Extends", span="106-106"];
m8_17 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.AddSchema(Newtonsoft.Json.Schema.JsonSchemaNode, Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaModelBuilder.cs", label="_nodes.Contains(newId)", span="71-71"];
m8_18 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.AddSchema(Newtonsoft.Json.Schema.JsonSchemaNode, Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaModelBuilder.cs", label="return _nodes[newId];", span="73-73"];
m8_20 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.AddSchema(Newtonsoft.Json.Schema.JsonSchemaNode, Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaModelBuilder.cs", label="_nodes.Add(currentNode)", span="80-80"];
m8_34 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.AddSchema(Newtonsoft.Json.Schema.JsonSchemaNode, Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaModelBuilder.cs", label="currentNode = AddSchema(currentNode, jsonSchema)", span="108-108"];
m8_35 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.AddSchema(Newtonsoft.Json.Schema.JsonSchemaNode, Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaModelBuilder.cs", label="return currentNode;", span="112-112"];
m8_24 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.AddSchema(Newtonsoft.Json.Schema.JsonSchemaNode, Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaModelBuilder.cs", label="int i = 0", span="88-88"];
m8_27 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.AddSchema(Newtonsoft.Json.Schema.JsonSchemaNode, Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaModelBuilder.cs", label="i++", span="88-88"];
m8_36 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.AddSchema(Newtonsoft.Json.Schema.JsonSchemaNode, Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaModelBuilder.cs", label="Exit Newtonsoft.Json.Schema.JsonSchemaModelBuilder.AddSchema(Newtonsoft.Json.Schema.JsonSchemaNode, Newtonsoft.Json.Schema.JsonSchema)", span="54-54"];
m8_42 [cluster="Newtonsoft.Json.Schema.JsonSchemaNode.JsonSchemaNode(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaModelBuilder.cs", label="Entry Newtonsoft.Json.Schema.JsonSchemaNode.JsonSchemaNode(Newtonsoft.Json.Schema.JsonSchema)", span="48-48"];
m8_94 [cluster="System.Collections.Generic.List<T>.List()", file="JsonSchemaModelBuilder.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m8_47 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.AddAdditionalProperties(Newtonsoft.Json.Schema.JsonSchemaNode, Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaModelBuilder.cs", label="Entry Newtonsoft.Json.Schema.JsonSchemaModelBuilder.AddAdditionalProperties(Newtonsoft.Json.Schema.JsonSchemaNode, Newtonsoft.Json.Schema.JsonSchema)", span="152-152"];
m8_65 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.AddAdditionalProperties(Newtonsoft.Json.Schema.JsonSchemaNode, Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaModelBuilder.cs", label="parentNode.AdditionalProperties = AddSchema(parentNode.AdditionalProperties, schema)", span="154-154"];
m8_66 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.AddAdditionalProperties(Newtonsoft.Json.Schema.JsonSchemaNode, Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaModelBuilder.cs", label="Exit Newtonsoft.Json.Schema.JsonSchemaModelBuilder.AddAdditionalProperties(Newtonsoft.Json.Schema.JsonSchemaNode, Newtonsoft.Json.Schema.JsonSchema)", span="152-152"];
m8_45 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.AddItem(Newtonsoft.Json.Schema.JsonSchemaNode, int, Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaModelBuilder.cs", label="Entry Newtonsoft.Json.Schema.JsonSchemaModelBuilder.AddItem(Newtonsoft.Json.Schema.JsonSchemaNode, int, Newtonsoft.Json.Schema.JsonSchema)", span="134-134"];
m8_58 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.AddItem(Newtonsoft.Json.Schema.JsonSchemaNode, int, Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaModelBuilder.cs", label="JsonSchemaNode existingItemNode = (parentNode.Items.Count > index)\r\n                ? parentNode.Items[index]\r\n                : null", span="136-138"];
m8_59 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.AddItem(Newtonsoft.Json.Schema.JsonSchemaNode, int, Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaModelBuilder.cs", label="JsonSchemaNode newItemNode = AddSchema(existingItemNode, schema)", span="140-140"];
m8_60 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.AddItem(Newtonsoft.Json.Schema.JsonSchemaNode, int, Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaModelBuilder.cs", label="!(parentNode.Items.Count > index)", span="142-142"];
m8_61 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.AddItem(Newtonsoft.Json.Schema.JsonSchemaNode, int, Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaModelBuilder.cs", label="parentNode.Items.Add(newItemNode)", span="144-144"];
m8_62 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.AddItem(Newtonsoft.Json.Schema.JsonSchemaNode, int, Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaModelBuilder.cs", label="parentNode.Items[index] = newItemNode", span="148-148"];
m8_63 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.AddItem(Newtonsoft.Json.Schema.JsonSchemaNode, int, Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaModelBuilder.cs", label="Exit Newtonsoft.Json.Schema.JsonSchemaModelBuilder.AddItem(Newtonsoft.Json.Schema.JsonSchemaNode, int, Newtonsoft.Json.Schema.JsonSchema)", span="134-134"];
m8_43 [cluster="System.Collections.ObjectModel.Collection<T>.Add(T)", file="JsonSchemaModelBuilder.cs", label="Entry System.Collections.ObjectModel.Collection<T>.Add(T)", span="0-0"];
m8_41 [cluster="Newtonsoft.Json.Schema.JsonSchemaNode.Combine(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaModelBuilder.cs", label="Entry Newtonsoft.Json.Schema.JsonSchemaNode.Combine(Newtonsoft.Json.Schema.JsonSchema)", span="70-70"];
m8_64 [cluster="System.Collections.Generic.List<T>.Add(T)", file="JsonSchemaModelBuilder.cs", label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0"];
m8_9 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="JsonSchemaModelBuilder.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m8_38 [cluster="System.Collections.Generic.IEnumerable<TSource>.Union<TSource>(System.Collections.Generic.IEnumerable<TSource>)", file="JsonSchemaModelBuilder.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Union<TSource>(System.Collections.Generic.IEnumerable<TSource>)", span="1164-1164"];
m8_46 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.AddAdditionalItems(Newtonsoft.Json.Schema.JsonSchemaNode, Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaModelBuilder.cs", label="Entry Newtonsoft.Json.Schema.JsonSchemaModelBuilder.AddAdditionalItems(Newtonsoft.Json.Schema.JsonSchemaNode, Newtonsoft.Json.Schema.JsonSchema)", span="157-157"];
m8_67 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.AddAdditionalItems(Newtonsoft.Json.Schema.JsonSchemaNode, Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaModelBuilder.cs", label="parentNode.AdditionalItems = AddSchema(parentNode.AdditionalItems, schema)", span="159-159"];
m8_68 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.AddAdditionalItems(Newtonsoft.Json.Schema.JsonSchemaNode, Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaModelBuilder.cs", label="Exit Newtonsoft.Json.Schema.JsonSchemaModelBuilder.AddAdditionalItems(Newtonsoft.Json.Schema.JsonSchemaNode, Newtonsoft.Json.Schema.JsonSchema)", span="157-157"];
m8_40 [cluster="System.Collections.ObjectModel.KeyedCollection<TKey, TItem>.Contains(TKey)", file="JsonSchemaModelBuilder.cs", label="Entry System.Collections.ObjectModel.KeyedCollection<TKey, TItem>.Contains(TKey)", span="0-0"];
m8_95 [cluster="System.Collections.Generic.ICollection<T>.Add(T)", file="JsonSchemaModelBuilder.cs", label="Entry System.Collections.Generic.ICollection<T>.Add(T)", span="0-0"];
m8_44 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.AddProperties(System.Collections.Generic.IDictionary<string, Newtonsoft.Json.Schema.JsonSchema>, System.Collections.Generic.IDictionary<string, Newtonsoft.Json.Schema.JsonSchemaNode>)", file="JsonSchemaModelBuilder.cs", label="Entry Newtonsoft.Json.Schema.JsonSchemaModelBuilder.AddProperties(System.Collections.Generic.IDictionary<string, Newtonsoft.Json.Schema.JsonSchema>, System.Collections.Generic.IDictionary<string, Newtonsoft.Json.Schema.JsonSchemaNode>)", span="115-115"];
m8_48 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.AddProperties(System.Collections.Generic.IDictionary<string, Newtonsoft.Json.Schema.JsonSchema>, System.Collections.Generic.IDictionary<string, Newtonsoft.Json.Schema.JsonSchemaNode>)", file="JsonSchemaModelBuilder.cs", label="source != null", span="117-117"];
m8_49 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.AddProperties(System.Collections.Generic.IDictionary<string, Newtonsoft.Json.Schema.JsonSchema>, System.Collections.Generic.IDictionary<string, Newtonsoft.Json.Schema.JsonSchemaNode>)", file="JsonSchemaModelBuilder.cs", label=source, span="119-119"];
m8_50 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.AddProperties(System.Collections.Generic.IDictionary<string, Newtonsoft.Json.Schema.JsonSchema>, System.Collections.Generic.IDictionary<string, Newtonsoft.Json.Schema.JsonSchemaNode>)", file="JsonSchemaModelBuilder.cs", label="AddProperty(target, property.Key, property.Value)", span="121-121"];
m8_51 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.AddProperties(System.Collections.Generic.IDictionary<string, Newtonsoft.Json.Schema.JsonSchema>, System.Collections.Generic.IDictionary<string, Newtonsoft.Json.Schema.JsonSchemaNode>)", file="JsonSchemaModelBuilder.cs", label="Exit Newtonsoft.Json.Schema.JsonSchemaModelBuilder.AddProperties(System.Collections.Generic.IDictionary<string, Newtonsoft.Json.Schema.JsonSchema>, System.Collections.Generic.IDictionary<string, Newtonsoft.Json.Schema.JsonSchemaNode>)", span="115-115"];
m8_57 [cluster="System.Collections.Generic.IDictionary<TKey, TValue>.TryGetValue(TKey, out TValue)", file="JsonSchemaModelBuilder.cs", label="Entry System.Collections.Generic.IDictionary<TKey, TValue>.TryGetValue(TKey, out TValue)", span="0-0"];
m8_7 [cluster="Newtonsoft.Json.Schema.JsonSchemaNodeCollection.JsonSchemaNodeCollection()", file="JsonSchemaModelBuilder.cs", label="Entry Newtonsoft.Json.Schema.JsonSchemaNodeCollection.JsonSchemaNodeCollection()", span="31-31"];
m8_39 [cluster="Newtonsoft.Json.Schema.JsonSchemaNode.GetId(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Schema.JsonSchema>)", file="JsonSchemaModelBuilder.cs", label="Entry Newtonsoft.Json.Schema.JsonSchemaNode.GetId(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Schema.JsonSchema>)", span="75-75"];
m8_52 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.AddProperty(System.Collections.Generic.IDictionary<string, Newtonsoft.Json.Schema.JsonSchemaNode>, string, Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaModelBuilder.cs", label="Entry Newtonsoft.Json.Schema.JsonSchemaModelBuilder.AddProperty(System.Collections.Generic.IDictionary<string, Newtonsoft.Json.Schema.JsonSchemaNode>, string, Newtonsoft.Json.Schema.JsonSchema)", span="126-126"];
m8_53 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.AddProperty(System.Collections.Generic.IDictionary<string, Newtonsoft.Json.Schema.JsonSchemaNode>, string, Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaModelBuilder.cs", label="JsonSchemaNode propertyNode", span="128-128"];
m8_54 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.AddProperty(System.Collections.Generic.IDictionary<string, Newtonsoft.Json.Schema.JsonSchemaNode>, string, Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaModelBuilder.cs", label="target.TryGetValue(propertyName, out propertyNode)", span="129-129"];
m8_55 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.AddProperty(System.Collections.Generic.IDictionary<string, Newtonsoft.Json.Schema.JsonSchemaNode>, string, Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaModelBuilder.cs", label="target[propertyName] = AddSchema(propertyNode, schema)", span="131-131"];
m8_56 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.AddProperty(System.Collections.Generic.IDictionary<string, Newtonsoft.Json.Schema.JsonSchemaNode>, string, Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaModelBuilder.cs", label="Exit Newtonsoft.Json.Schema.JsonSchemaModelBuilder.AddProperty(System.Collections.Generic.IDictionary<string, Newtonsoft.Json.Schema.JsonSchemaNode>, string, Newtonsoft.Json.Schema.JsonSchema)", span="126-126"];
m8_37 [cluster="System.Collections.ObjectModel.ReadOnlyCollection<T>.Contains(T)", file="JsonSchemaModelBuilder.cs", label="Entry System.Collections.ObjectModel.ReadOnlyCollection<T>.Contains(T)", span="0-0"];
m8_0 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.Build(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaModelBuilder.cs", label="Entry Newtonsoft.Json.Schema.JsonSchemaModelBuilder.Build(Newtonsoft.Json.Schema.JsonSchema)", span="43-43"];
m8_1 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.Build(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaModelBuilder.cs", label="_nodes = new JsonSchemaNodeCollection()", span="45-45"];
m8_2 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.Build(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaModelBuilder.cs", label="_node = AddSchema(null, schema)", span="46-46"];
m8_3 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.Build(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaModelBuilder.cs", label="_nodeModels = new Dictionary<JsonSchemaNode, JsonSchemaModel>()", span="48-48"];
m8_4 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.Build(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaModelBuilder.cs", label="JsonSchemaModel model = BuildNodeModel(_node)", span="49-49"];
m8_5 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.Build(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaModelBuilder.cs", label="return model;", span="51-51"];
m8_6 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.Build(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaModelBuilder.cs", label="Exit Newtonsoft.Json.Schema.JsonSchemaModelBuilder.Build(Newtonsoft.Json.Schema.JsonSchema)", span="43-43"];
m8_93 [cluster="Newtonsoft.Json.Schema.JsonSchemaModel.Create(System.Collections.Generic.IList<Newtonsoft.Json.Schema.JsonSchema>)", file="JsonSchemaModelBuilder.cs", label="Entry Newtonsoft.Json.Schema.JsonSchemaModel.Create(System.Collections.Generic.IList<Newtonsoft.Json.Schema.JsonSchema>)", span="67-67"];
m8_96 [file="JsonSchemaModelBuilder.cs", label="Newtonsoft.Json.Schema.JsonSchemaModelBuilder", span=""];
m10_0 [cluster="Newtonsoft.Json.Schema.JsonSchemaNodeCollection.GetKeyForItem(Newtonsoft.Json.Schema.JsonSchemaNode)", file="JsonSchemaNodeCollection.cs", label="Entry Newtonsoft.Json.Schema.JsonSchemaNodeCollection.GetKeyForItem(Newtonsoft.Json.Schema.JsonSchemaNode)", span="33-33"];
m10_1 [cluster="Newtonsoft.Json.Schema.JsonSchemaNodeCollection.GetKeyForItem(Newtonsoft.Json.Schema.JsonSchemaNode)", file="JsonSchemaNodeCollection.cs", label="return item.Id;", span="35-35"];
m10_2 [cluster="Newtonsoft.Json.Schema.JsonSchemaNodeCollection.GetKeyForItem(Newtonsoft.Json.Schema.JsonSchemaNode)", file="JsonSchemaNodeCollection.cs", label="Exit Newtonsoft.Json.Schema.JsonSchemaNodeCollection.GetKeyForItem(Newtonsoft.Json.Schema.JsonSchemaNode)", span="33-33"];
m11_0 [cluster="Newtonsoft.Json.Schema.JsonSchemaResolver.JsonSchemaResolver()", file="JsonSchemaResolver.cs", label="Entry Newtonsoft.Json.Schema.JsonSchemaResolver.JsonSchemaResolver()", span="56-56"];
m11_1 [cluster="Newtonsoft.Json.Schema.JsonSchemaResolver.JsonSchemaResolver()", file="JsonSchemaResolver.cs", label="LoadedSchemas = new List<JsonSchema>()", span="58-58"];
m11_2 [cluster="Newtonsoft.Json.Schema.JsonSchemaResolver.JsonSchemaResolver()", file="JsonSchemaResolver.cs", label="Exit Newtonsoft.Json.Schema.JsonSchemaResolver.JsonSchemaResolver()", span="56-56"];
m11_10 [cluster="Unk.SingleOrDefault", file="JsonSchemaResolver.cs", label="Entry Unk.SingleOrDefault", span=""];
m11_15 [cluster="lambda expression", file="JsonSchemaResolver.cs", label="Entry lambda expression", span="72-72"];
m11_12 [cluster="lambda expression", file="JsonSchemaResolver.cs", label="string.Equals(s.Id, reference, StringComparison.Ordinal)", span="68-68"];
m11_16 [cluster="lambda expression", file="JsonSchemaResolver.cs", label="string.Equals(s.Location, reference, StringComparison.Ordinal)", span="72-72"];
m11_11 [cluster="lambda expression", file="JsonSchemaResolver.cs", label="Entry lambda expression", span="68-68"];
m11_13 [cluster="lambda expression", file="JsonSchemaResolver.cs", label="Exit lambda expression", span="68-68"];
m11_17 [cluster="lambda expression", file="JsonSchemaResolver.cs", label="Exit lambda expression", span="72-72"];
m11_14 [cluster="Unk.Equals", file="JsonSchemaResolver.cs", label="Entry Unk.Equals", span=""];
m11_4 [cluster="Newtonsoft.Json.Schema.JsonSchemaResolver.GetSchema(string)", file="JsonSchemaResolver.cs", label="Entry Newtonsoft.Json.Schema.JsonSchemaResolver.GetSchema(string)", span="66-66"];
m11_5 [cluster="Newtonsoft.Json.Schema.JsonSchemaResolver.GetSchema(string)", file="JsonSchemaResolver.cs", label="JsonSchema schema = LoadedSchemas.SingleOrDefault(s => string.Equals(s.Id, reference, StringComparison.Ordinal))", span="68-68"];
m11_7 [cluster="Newtonsoft.Json.Schema.JsonSchemaResolver.GetSchema(string)", file="JsonSchemaResolver.cs", label="schema = LoadedSchemas.SingleOrDefault(s => string.Equals(s.Location, reference, StringComparison.Ordinal))", span="72-72"];
m11_6 [cluster="Newtonsoft.Json.Schema.JsonSchemaResolver.GetSchema(string)", file="JsonSchemaResolver.cs", label="schema == null", span="70-70"];
m11_8 [cluster="Newtonsoft.Json.Schema.JsonSchemaResolver.GetSchema(string)", file="JsonSchemaResolver.cs", label="return schema;", span="75-75"];
m11_9 [cluster="Newtonsoft.Json.Schema.JsonSchemaResolver.GetSchema(string)", file="JsonSchemaResolver.cs", label="Exit Newtonsoft.Json.Schema.JsonSchemaResolver.GetSchema(string)", span="66-66"];
m11_3 [cluster="System.Collections.Generic.List<T>.List()", file="JsonSchemaResolver.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m11_18 [file="JsonSchemaResolver.cs", label="Newtonsoft.Json.Schema.JsonSchemaResolver", span=""];
m11_19 [file="JsonSchemaResolver.cs", label=string, span=""];
m13_17 [cluster="Newtonsoft.Json.JsonSerializerSettings.JsonSerializerSettings()", file="JsonSchemaWriter.cs", label="Entry Newtonsoft.Json.JsonSerializerSettings.JsonSerializerSettings()", span="382-382"];
m13_20 [cluster="Unk.AreEqual", file="JsonSchemaWriter.cs", label="Entry Unk.AreEqual", span=""];
m13_16 [cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting)", file="JsonSchemaWriter.cs", label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting)", span="525-525"];
m13_14 [cluster="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.PreserveReferencesHandlingObject.File.File()", file="JsonSchemaWriter.cs", label="Entry Newtonsoft.Json.Tests.Documentation.Samples.Serializer.PreserveReferencesHandlingObject.File.File()", span="49-49"];
m13_0 [cluster="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.PreserveReferencesHandlingObject.Example()", file="JsonSchemaWriter.cs", label="Entry Newtonsoft.Json.Tests.Documentation.Samples.Serializer.PreserveReferencesHandlingObject.Example()", span="57-57"];
m13_1 [cluster="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.PreserveReferencesHandlingObject.Example()", file="JsonSchemaWriter.cs", label="Directory root = new Directory { Name = ''Root'' }", span="60-60"];
m13_2 [cluster="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.PreserveReferencesHandlingObject.Example()", file="JsonSchemaWriter.cs", label="Directory documents = new Directory { Name = ''My Documents'', Parent = root }", span="61-61"];
m13_3 [cluster="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.PreserveReferencesHandlingObject.Example()", file="JsonSchemaWriter.cs", label="File file = new File { Name = ''ImportantLegalDocument.docx'', Parent = documents }", span="63-63"];
m13_4 [cluster="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.PreserveReferencesHandlingObject.Example()", file="JsonSchemaWriter.cs", label="documents.Files = new List<File> { file }", span="65-65"];
m13_5 [cluster="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.PreserveReferencesHandlingObject.Example()", file="JsonSchemaWriter.cs", label="JsonConvert.SerializeObject(documents, Formatting.Indented)", span="69-69"];
m13_7 [cluster="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.PreserveReferencesHandlingObject.Example()", file="JsonSchemaWriter.cs", label="string preserveReferenacesAll = JsonConvert.SerializeObject(documents, Formatting.Indented, new JsonSerializerSettings\r\n            {\r\n                PreserveReferencesHandling = PreserveReferencesHandling.All\r\n            })", span="77-80"];
m13_9 [cluster="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.PreserveReferencesHandlingObject.Example()", file="JsonSchemaWriter.cs", label="string preserveReferenacesObjects = JsonConvert.SerializeObject(documents, Formatting.Indented, new JsonSerializerSettings\r\n            {\r\n                PreserveReferencesHandling = PreserveReferencesHandling.Objects\r\n            })", span="106-109"];
m13_6 [cluster="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.PreserveReferencesHandlingObject.Example()", file="JsonSchemaWriter.cs", label=JsonSerializationException, span="71-71"];
m13_8 [cluster="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.PreserveReferencesHandlingObject.Example()", file="JsonSchemaWriter.cs", label="Console.WriteLine(preserveReferenacesAll)", span="82-82"];
m13_10 [cluster="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.PreserveReferencesHandlingObject.Example()", file="JsonSchemaWriter.cs", label="Console.WriteLine(preserveReferenacesObjects)", span="111-111"];
m13_11 [cluster="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.PreserveReferencesHandlingObject.Example()", file="JsonSchemaWriter.cs", label="Assert.AreEqual(@''{\r\n  ''''$id'''': ''''1'''',\r\n  ''''Name'''': ''''My Documents'''',\r\n  ''''Parent'''': {\r\n    ''''$id'''': ''''2'''',\r\n    ''''Name'''': ''''Root'''',\r\n    ''''Parent'''': null,\r\n    ''''Files'''': null\r\n  },\r\n  ''''Files'''': [\r\n    {\r\n      ''''$id'''': ''''3'''',\r\n      ''''Name'''': ''''ImportantLegalDocument.docx'''',\r\n      ''''Parent'''': {\r\n        ''''$ref'''': ''''1''''\r\n      }\r\n    }\r\n  ]\r\n}'', preserveReferenacesObjects)", span="133-151"];
m13_12 [cluster="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.PreserveReferencesHandlingObject.Example()", file="JsonSchemaWriter.cs", label="Exit Newtonsoft.Json.Tests.Documentation.Samples.Serializer.PreserveReferencesHandlingObject.Example()", span="57-57"];
m13_18 [cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting, Newtonsoft.Json.JsonSerializerSettings)", file="JsonSchemaWriter.cs", label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting, Newtonsoft.Json.JsonSerializerSettings)", span="606-606"];
m13_13 [cluster="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.PreserveReferencesHandlingObject.Directory.Directory()", file="JsonSchemaWriter.cs", label="Entry Newtonsoft.Json.Tests.Documentation.Samples.Serializer.PreserveReferencesHandlingObject.Directory.Directory()", span="42-42"];
m13_15 [cluster="System.Collections.Generic.List<T>.List()", file="JsonSchemaWriter.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m13_19 [cluster="System.Console.WriteLine(string)", file="JsonSchemaWriter.cs", label="Entry System.Console.WriteLine(string)", span="0-0"];
m14_47 [cluster="Newtonsoft.Json.Serialization.ITraceWriter.Trace(System.Diagnostics.TraceLevel, string, System.Exception)", file="JsonSerializerInternalReader.cs", label="Entry Newtonsoft.Json.Serialization.ITraceWriter.Trace(System.Diagnostics.TraceLevel, string, System.Exception)", span="25-25"];
m14_3 [cluster="object.ReferenceEquals(object, object)", file="JsonSerializerInternalReader.cs", label="Entry object.ReferenceEquals(object, object)", span="0-0"];
m14_13 [cluster="Newtonsoft.Json.Utilities.ValidationUtils.ArgumentNotNull(object, string)", file="JsonSerializerInternalReader.cs", label="Entry Newtonsoft.Json.Utilities.ValidationUtils.ArgumentNotNull(object, string)", span="52-52"];
m14_50 [cluster="Newtonsoft.Json.JsonSerializer.OnError(Newtonsoft.Json.Serialization.ErrorEventArgs)", file="JsonSerializerInternalReader.cs", label="Entry Newtonsoft.Json.JsonSerializer.OnError(Newtonsoft.Json.Serialization.ErrorEventArgs)", span="993-993"];
m14_23 [cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalBase.ClearErrorContext()", file="JsonSerializerInternalReader.cs", label="Entry Newtonsoft.Json.Serialization.JsonSerializerInternalBase.ClearErrorContext()", span="93-93"];
m14_24 [cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalBase.ClearErrorContext()", file="JsonSerializerInternalReader.cs", label="_currentErrorContext == null", span="95-95"];
m14_25 [cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalBase.ClearErrorContext()", file="JsonSerializerInternalReader.cs", label="throw new InvalidOperationException(''Could not clear error context. Error context is already null.'');", span="96-96"];
m14_26 [cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalBase.ClearErrorContext()", file="JsonSerializerInternalReader.cs", label="_currentErrorContext = null", span="98-98"];
m14_27 [cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalBase.ClearErrorContext()", file="JsonSerializerInternalReader.cs", label="Exit Newtonsoft.Json.Serialization.JsonSerializerInternalBase.ClearErrorContext()", span="93-93"];
m14_0 [cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalBase.ReferenceEqualsEqualityComparer.System.Collections.Generic.IEqualityComparer<object>.Equals(object, object)", file="JsonSerializerInternalReader.cs", label="Entry Newtonsoft.Json.Serialization.JsonSerializerInternalBase.ReferenceEqualsEqualityComparer.System.Collections.Generic.IEqualityComparer<object>.Equals(object, object)", span="38-38"];
m14_1 [cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalBase.ReferenceEqualsEqualityComparer.System.Collections.Generic.IEqualityComparer<object>.Equals(object, object)", file="JsonSerializerInternalReader.cs", label="return ReferenceEquals(x, y);", span="40-40"];
m14_2 [cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalBase.ReferenceEqualsEqualityComparer.System.Collections.Generic.IEqualityComparer<object>.Equals(object, object)", file="JsonSerializerInternalReader.cs", label="Exit Newtonsoft.Json.Serialization.JsonSerializerInternalBase.ReferenceEqualsEqualityComparer.System.Collections.Generic.IEqualityComparer<object>.Equals(object, object)", span="38-38"];
m14_4 [cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalBase.ReferenceEqualsEqualityComparer.System.Collections.Generic.IEqualityComparer<object>.GetHashCode(object)", file="JsonSerializerInternalReader.cs", label="Entry Newtonsoft.Json.Serialization.JsonSerializerInternalBase.ReferenceEqualsEqualityComparer.System.Collections.Generic.IEqualityComparer<object>.GetHashCode(object)", span="43-43"];
m14_5 [cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalBase.ReferenceEqualsEqualityComparer.System.Collections.Generic.IEqualityComparer<object>.GetHashCode(object)", file="JsonSerializerInternalReader.cs", label="return RuntimeHelpers.GetHashCode(obj);", span="46-46"];
m14_6 [cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalBase.ReferenceEqualsEqualityComparer.System.Collections.Generic.IEqualityComparer<object>.GetHashCode(object)", file="JsonSerializerInternalReader.cs", label="Exit Newtonsoft.Json.Serialization.JsonSerializerInternalBase.ReferenceEqualsEqualityComparer.System.Collections.Generic.IEqualityComparer<object>.GetHashCode(object)", span="43-43"];
m14_7 [cluster="System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode(object)", file="JsonSerializerInternalReader.cs", label="Entry System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode(object)", span="0-0"];
m14_14 [cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalBase.GetErrorContext(object, object, string, System.Exception)", file="JsonSerializerInternalReader.cs", label="Entry Newtonsoft.Json.Serialization.JsonSerializerInternalBase.GetErrorContext(object, object, string, System.Exception)", span="82-82"];
m14_15 [cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalBase.GetErrorContext(object, object, string, System.Exception)", file="JsonSerializerInternalReader.cs", label="_currentErrorContext == null", span="84-84"];
m14_16 [cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalBase.GetErrorContext(object, object, string, System.Exception)", file="JsonSerializerInternalReader.cs", label="_currentErrorContext = new ErrorContext(currentObject, member, path, error)", span="85-85"];
m14_17 [cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalBase.GetErrorContext(object, object, string, System.Exception)", file="JsonSerializerInternalReader.cs", label="_currentErrorContext.Error != error", span="87-87"];
m14_18 [cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalBase.GetErrorContext(object, object, string, System.Exception)", file="JsonSerializerInternalReader.cs", label="throw new InvalidOperationException(''Current error context error is different to requested error.'');", span="88-88"];
m14_19 [cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalBase.GetErrorContext(object, object, string, System.Exception)", file="JsonSerializerInternalReader.cs", label="return _currentErrorContext;", span="90-90"];
m14_20 [cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalBase.GetErrorContext(object, object, string, System.Exception)", file="JsonSerializerInternalReader.cs", label="Exit Newtonsoft.Json.Serialization.JsonSerializerInternalBase.GetErrorContext(object, object, string, System.Exception)", span="82-82"];
m14_46 [cluster="Newtonsoft.Json.JsonPosition.FormatMessage(Newtonsoft.Json.IJsonLineInfo, string, string)", file="JsonSerializerInternalReader.cs", label="Entry Newtonsoft.Json.JsonPosition.FormatMessage(Newtonsoft.Json.IJsonLineInfo, string, string)", span="104-104"];
m14_48 [cluster="Newtonsoft.Json.Serialization.JsonContract.InvokeOnError(object, System.Runtime.Serialization.StreamingContext, Newtonsoft.Json.Serialization.ErrorContext)", file="JsonSerializerInternalReader.cs", label="Entry Newtonsoft.Json.Serialization.JsonContract.InvokeOnError(object, System.Runtime.Serialization.StreamingContext, Newtonsoft.Json.Serialization.ErrorContext)", span="389-389"];
m14_49 [cluster="Newtonsoft.Json.Serialization.ErrorEventArgs.ErrorEventArgs(object, Newtonsoft.Json.Serialization.ErrorContext)", file="JsonSerializerInternalReader.cs", label="Entry Newtonsoft.Json.Serialization.ErrorEventArgs.ErrorEventArgs(object, Newtonsoft.Json.Serialization.ErrorContext)", span="51-51"];
m14_28 [cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalBase.IsErrorHandled(object, Newtonsoft.Json.Serialization.JsonContract, object, Newtonsoft.Json.IJsonLineInfo, string, System.Exception)", file="JsonSerializerInternalReader.cs", label="Entry Newtonsoft.Json.Serialization.JsonSerializerInternalBase.IsErrorHandled(object, Newtonsoft.Json.Serialization.JsonContract, object, Newtonsoft.Json.IJsonLineInfo, string, System.Exception)", span="101-101"];
m14_29 [cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalBase.IsErrorHandled(object, Newtonsoft.Json.Serialization.JsonContract, object, Newtonsoft.Json.IJsonLineInfo, string, System.Exception)", file="JsonSerializerInternalReader.cs", label="ErrorContext errorContext = GetErrorContext(currentObject, keyValue, path, ex)", span="103-103"];
m14_33 [cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalBase.IsErrorHandled(object, Newtonsoft.Json.Serialization.JsonContract, object, Newtonsoft.Json.IJsonLineInfo, string, System.Exception)", file="JsonSerializerInternalReader.cs", label="contract != null", span="112-112"];
m14_34 [cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalBase.IsErrorHandled(object, Newtonsoft.Json.Serialization.JsonContract, object, Newtonsoft.Json.IJsonLineInfo, string, System.Exception)", file="JsonSerializerInternalReader.cs", label="message += '' '' + contract.UnderlyingType", span="113-113"];
m14_35 [cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalBase.IsErrorHandled(object, Newtonsoft.Json.Serialization.JsonContract, object, Newtonsoft.Json.IJsonLineInfo, string, System.Exception)", file="JsonSerializerInternalReader.cs", label="message += ''. '' + ex.Message", span="114-114"];
m14_36 [cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalBase.IsErrorHandled(object, Newtonsoft.Json.Serialization.JsonContract, object, Newtonsoft.Json.IJsonLineInfo, string, System.Exception)", file="JsonSerializerInternalReader.cs", label="!(ex is JsonException)", span="117-117"];
m14_37 [cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalBase.IsErrorHandled(object, Newtonsoft.Json.Serialization.JsonContract, object, Newtonsoft.Json.IJsonLineInfo, string, System.Exception)", file="JsonSerializerInternalReader.cs", label="message = JsonPosition.FormatMessage(lineInfo, path, message)", span="118-118"];
m14_38 [cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalBase.IsErrorHandled(object, Newtonsoft.Json.Serialization.JsonContract, object, Newtonsoft.Json.IJsonLineInfo, string, System.Exception)", file="JsonSerializerInternalReader.cs", label="TraceWriter.Trace(TraceLevel.Error, message, ex)", span="120-120"];
m14_39 [cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalBase.IsErrorHandled(object, Newtonsoft.Json.Serialization.JsonContract, object, Newtonsoft.Json.IJsonLineInfo, string, System.Exception)", file="JsonSerializerInternalReader.cs", label="contract != null && currentObject != null", span="124-124"];
m14_40 [cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalBase.IsErrorHandled(object, Newtonsoft.Json.Serialization.JsonContract, object, Newtonsoft.Json.IJsonLineInfo, string, System.Exception)", file="JsonSerializerInternalReader.cs", label="contract.InvokeOnError(currentObject, Serializer.Context, errorContext)", span="125-125"];
m14_42 [cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalBase.IsErrorHandled(object, Newtonsoft.Json.Serialization.JsonContract, object, Newtonsoft.Json.IJsonLineInfo, string, System.Exception)", file="JsonSerializerInternalReader.cs", label="Serializer.OnError(new ErrorEventArgs(currentObject, errorContext))", span="128-128"];
m14_30 [cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalBase.IsErrorHandled(object, Newtonsoft.Json.Serialization.JsonContract, object, Newtonsoft.Json.IJsonLineInfo, string, System.Exception)", file="JsonSerializerInternalReader.cs", label="TraceWriter != null && TraceWriter.LevelFilter >= TraceLevel.Error && !errorContext.Traced", span="105-105"];
m14_31 [cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalBase.IsErrorHandled(object, Newtonsoft.Json.Serialization.JsonContract, object, Newtonsoft.Json.IJsonLineInfo, string, System.Exception)", file="JsonSerializerInternalReader.cs", label="errorContext.Traced = true", span="108-108"];
m14_41 [cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalBase.IsErrorHandled(object, Newtonsoft.Json.Serialization.JsonContract, object, Newtonsoft.Json.IJsonLineInfo, string, System.Exception)", file="JsonSerializerInternalReader.cs", label="!errorContext.Handled", span="127-127"];
m14_43 [cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalBase.IsErrorHandled(object, Newtonsoft.Json.Serialization.JsonContract, object, Newtonsoft.Json.IJsonLineInfo, string, System.Exception)", file="JsonSerializerInternalReader.cs", label="return errorContext.Handled;", span="130-130"];
m14_32 [cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalBase.IsErrorHandled(object, Newtonsoft.Json.Serialization.JsonContract, object, Newtonsoft.Json.IJsonLineInfo, string, System.Exception)", file="JsonSerializerInternalReader.cs", label="string message = (GetType() == typeof(JsonSerializerInternalWriter)) ? ''Error serializing'' : ''Error deserializing''", span="111-111"];
m14_44 [cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalBase.IsErrorHandled(object, Newtonsoft.Json.Serialization.JsonContract, object, Newtonsoft.Json.IJsonLineInfo, string, System.Exception)", file="JsonSerializerInternalReader.cs", label="Exit Newtonsoft.Json.Serialization.JsonSerializerInternalBase.IsErrorHandled(object, Newtonsoft.Json.Serialization.JsonContract, object, Newtonsoft.Json.IJsonLineInfo, string, System.Exception)", span="101-101"];
m14_22 [cluster="System.InvalidOperationException.InvalidOperationException(string)", file="JsonSerializerInternalReader.cs", label="Entry System.InvalidOperationException.InvalidOperationException(string)", span="0-0"];
m14_21 [cluster="Newtonsoft.Json.Serialization.ErrorContext.ErrorContext(object, object, string, System.Exception)", file="JsonSerializerInternalReader.cs", label="Entry Newtonsoft.Json.Serialization.ErrorContext.ErrorContext(object, object, string, System.Exception)", span="34-34"];
m14_8 [cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalBase.JsonSerializerInternalBase(Newtonsoft.Json.JsonSerializer)", file="JsonSerializerInternalReader.cs", label="Entry Newtonsoft.Json.Serialization.JsonSerializerInternalBase.JsonSerializerInternalBase(Newtonsoft.Json.JsonSerializer)", span="57-57"];
m14_9 [cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalBase.JsonSerializerInternalBase(Newtonsoft.Json.JsonSerializer)", file="JsonSerializerInternalReader.cs", label="ValidationUtils.ArgumentNotNull(serializer, ''serializer'')", span="59-59"];
m14_10 [cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalBase.JsonSerializerInternalBase(Newtonsoft.Json.JsonSerializer)", file="JsonSerializerInternalReader.cs", label="Serializer = serializer", span="61-61"];
m14_11 [cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalBase.JsonSerializerInternalBase(Newtonsoft.Json.JsonSerializer)", file="JsonSerializerInternalReader.cs", label="TraceWriter = serializer.TraceWriter", span="62-62"];
m14_12 [cluster="Newtonsoft.Json.Serialization.JsonSerializerInternalBase.JsonSerializerInternalBase(Newtonsoft.Json.JsonSerializer)", file="JsonSerializerInternalReader.cs", label="Exit Newtonsoft.Json.Serialization.JsonSerializerInternalBase.JsonSerializerInternalBase(Newtonsoft.Json.JsonSerializer)", span="57-57"];
m14_51 [file="JsonSerializerInternalReader.cs", label="Newtonsoft.Json.Serialization.JsonSerializerInternalBase", span=""];
m17_55 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.JavaScriptConvertSerializer()", file="UnixDateTimeConverter.cs", label="Product p = JavaScriptConvert.DeserializeObject(value, typeof(Product)) as Product", span="169-169"];
m17_91 [cluster="Newtonsoft.Json.Linq.JValue.Compare(Newtonsoft.Json.Linq.JTokenType, object, object)", file="UnixDateTimeConverter.cs", label="bool b1 = Convert.ToBoolean(objA, CultureInfo.InvariantCulture)", span="262-262"];
m17_138 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.TorrentDeserializeTest()", file="UnixDateTimeConverter.cs", label="Assert.AreEqual(nestedTorrentsArray.Count, 19)", span="428-428"];
m17_453 [cluster="Newtonsoft.Json.Linq.JValue.JValueDynamicProxy.TryBinaryOperation(Newtonsoft.Json.Linq.JValue, System.Dynamic.BinaryOperationBinder, object, out object)", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.Linq.JValue.JValueDynamicProxy.TryBinaryOperation(Newtonsoft.Json.Linq.JValue, System.Dynamic.BinaryOperationBinder, object, out object)", span="840-840"];
m17_454 [cluster="Newtonsoft.Json.Linq.JValue.JValueDynamicProxy.TryBinaryOperation(Newtonsoft.Json.Linq.JValue, System.Dynamic.BinaryOperationBinder, object, out object)", file="UnixDateTimeConverter.cs", label="object compareValue = (arg is JValue) ? ((JValue)arg).Value : arg", span="842-842"];
m17_455 [cluster="Newtonsoft.Json.Linq.JValue.JValueDynamicProxy.TryBinaryOperation(Newtonsoft.Json.Linq.JValue, System.Dynamic.BinaryOperationBinder, object, out object)", file="UnixDateTimeConverter.cs", label="binder.Operation", span="844-844"];
m17_457 [cluster="Newtonsoft.Json.Linq.JValue.JValueDynamicProxy.TryBinaryOperation(Newtonsoft.Json.Linq.JValue, System.Dynamic.BinaryOperationBinder, object, out object)", file="UnixDateTimeConverter.cs", label="result = (Compare(instance.Type, instance.Value, compareValue) == 0)", span="847-847"];
m17_460 [cluster="Newtonsoft.Json.Linq.JValue.JValueDynamicProxy.TryBinaryOperation(Newtonsoft.Json.Linq.JValue, System.Dynamic.BinaryOperationBinder, object, out object)", file="UnixDateTimeConverter.cs", label="result = (Compare(instance.Type, instance.Value, compareValue) != 0)", span="850-850"];
m17_463 [cluster="Newtonsoft.Json.Linq.JValue.JValueDynamicProxy.TryBinaryOperation(Newtonsoft.Json.Linq.JValue, System.Dynamic.BinaryOperationBinder, object, out object)", file="UnixDateTimeConverter.cs", label="result = (Compare(instance.Type, instance.Value, compareValue) > 0)", span="853-853"];
m17_466 [cluster="Newtonsoft.Json.Linq.JValue.JValueDynamicProxy.TryBinaryOperation(Newtonsoft.Json.Linq.JValue, System.Dynamic.BinaryOperationBinder, object, out object)", file="UnixDateTimeConverter.cs", label="result = (Compare(instance.Type, instance.Value, compareValue) >= 0)", span="856-856"];
m17_469 [cluster="Newtonsoft.Json.Linq.JValue.JValueDynamicProxy.TryBinaryOperation(Newtonsoft.Json.Linq.JValue, System.Dynamic.BinaryOperationBinder, object, out object)", file="UnixDateTimeConverter.cs", label="result = (Compare(instance.Type, instance.Value, compareValue) < 0)", span="859-859"];
m17_472 [cluster="Newtonsoft.Json.Linq.JValue.JValueDynamicProxy.TryBinaryOperation(Newtonsoft.Json.Linq.JValue, System.Dynamic.BinaryOperationBinder, object, out object)", file="UnixDateTimeConverter.cs", label="result = (Compare(instance.Type, instance.Value, compareValue) <= 0)", span="862-862"];
m17_482 [cluster="Newtonsoft.Json.Linq.JValue.JValueDynamicProxy.TryBinaryOperation(Newtonsoft.Json.Linq.JValue, System.Dynamic.BinaryOperationBinder, object, out object)", file="UnixDateTimeConverter.cs", label="Operation(binder.Operation, instance.Value, compareValue, out result)", span="872-872"];
m17_456 [cluster="Newtonsoft.Json.Linq.JValue.JValueDynamicProxy.TryBinaryOperation(Newtonsoft.Json.Linq.JValue, System.Dynamic.BinaryOperationBinder, object, out object)", file="UnixDateTimeConverter.cs", label="ExpressionType.Equal", span="846-846"];
m17_459 [cluster="Newtonsoft.Json.Linq.JValue.JValueDynamicProxy.TryBinaryOperation(Newtonsoft.Json.Linq.JValue, System.Dynamic.BinaryOperationBinder, object, out object)", file="UnixDateTimeConverter.cs", label="ExpressionType.NotEqual", span="849-849"];
m17_462 [cluster="Newtonsoft.Json.Linq.JValue.JValueDynamicProxy.TryBinaryOperation(Newtonsoft.Json.Linq.JValue, System.Dynamic.BinaryOperationBinder, object, out object)", file="UnixDateTimeConverter.cs", label="ExpressionType.GreaterThan", span="852-852"];
m17_465 [cluster="Newtonsoft.Json.Linq.JValue.JValueDynamicProxy.TryBinaryOperation(Newtonsoft.Json.Linq.JValue, System.Dynamic.BinaryOperationBinder, object, out object)", file="UnixDateTimeConverter.cs", label="ExpressionType.GreaterThanOrEqual", span="855-855"];
m17_468 [cluster="Newtonsoft.Json.Linq.JValue.JValueDynamicProxy.TryBinaryOperation(Newtonsoft.Json.Linq.JValue, System.Dynamic.BinaryOperationBinder, object, out object)", file="UnixDateTimeConverter.cs", label="ExpressionType.LessThan", span="858-858"];
m17_471 [cluster="Newtonsoft.Json.Linq.JValue.JValueDynamicProxy.TryBinaryOperation(Newtonsoft.Json.Linq.JValue, System.Dynamic.BinaryOperationBinder, object, out object)", file="UnixDateTimeConverter.cs", label="ExpressionType.LessThanOrEqual", span="861-861"];
m17_474 [cluster="Newtonsoft.Json.Linq.JValue.JValueDynamicProxy.TryBinaryOperation(Newtonsoft.Json.Linq.JValue, System.Dynamic.BinaryOperationBinder, object, out object)", file="UnixDateTimeConverter.cs", label="ExpressionType.Add", span="864-864"];
m17_458 [cluster="Newtonsoft.Json.Linq.JValue.JValueDynamicProxy.TryBinaryOperation(Newtonsoft.Json.Linq.JValue, System.Dynamic.BinaryOperationBinder, object, out object)", file="UnixDateTimeConverter.cs", label="return true;", span="848-848"];
m17_461 [cluster="Newtonsoft.Json.Linq.JValue.JValueDynamicProxy.TryBinaryOperation(Newtonsoft.Json.Linq.JValue, System.Dynamic.BinaryOperationBinder, object, out object)", file="UnixDateTimeConverter.cs", label="return true;", span="851-851"];
m17_464 [cluster="Newtonsoft.Json.Linq.JValue.JValueDynamicProxy.TryBinaryOperation(Newtonsoft.Json.Linq.JValue, System.Dynamic.BinaryOperationBinder, object, out object)", file="UnixDateTimeConverter.cs", label="return true;", span="854-854"];
m17_467 [cluster="Newtonsoft.Json.Linq.JValue.JValueDynamicProxy.TryBinaryOperation(Newtonsoft.Json.Linq.JValue, System.Dynamic.BinaryOperationBinder, object, out object)", file="UnixDateTimeConverter.cs", label="return true;", span="857-857"];
m17_470 [cluster="Newtonsoft.Json.Linq.JValue.JValueDynamicProxy.TryBinaryOperation(Newtonsoft.Json.Linq.JValue, System.Dynamic.BinaryOperationBinder, object, out object)", file="UnixDateTimeConverter.cs", label="return true;", span="860-860"];
m17_473 [cluster="Newtonsoft.Json.Linq.JValue.JValueDynamicProxy.TryBinaryOperation(Newtonsoft.Json.Linq.JValue, System.Dynamic.BinaryOperationBinder, object, out object)", file="UnixDateTimeConverter.cs", label="return true;", span="863-863"];
m17_475 [cluster="Newtonsoft.Json.Linq.JValue.JValueDynamicProxy.TryBinaryOperation(Newtonsoft.Json.Linq.JValue, System.Dynamic.BinaryOperationBinder, object, out object)", file="UnixDateTimeConverter.cs", label="ExpressionType.AddAssign", span="865-865"];
m17_476 [cluster="Newtonsoft.Json.Linq.JValue.JValueDynamicProxy.TryBinaryOperation(Newtonsoft.Json.Linq.JValue, System.Dynamic.BinaryOperationBinder, object, out object)", file="UnixDateTimeConverter.cs", label="ExpressionType.Subtract", span="866-866"];
m17_477 [cluster="Newtonsoft.Json.Linq.JValue.JValueDynamicProxy.TryBinaryOperation(Newtonsoft.Json.Linq.JValue, System.Dynamic.BinaryOperationBinder, object, out object)", file="UnixDateTimeConverter.cs", label="ExpressionType.SubtractAssign", span="867-867"];
m17_478 [cluster="Newtonsoft.Json.Linq.JValue.JValueDynamicProxy.TryBinaryOperation(Newtonsoft.Json.Linq.JValue, System.Dynamic.BinaryOperationBinder, object, out object)", file="UnixDateTimeConverter.cs", label="ExpressionType.Multiply", span="868-868"];
m17_479 [cluster="Newtonsoft.Json.Linq.JValue.JValueDynamicProxy.TryBinaryOperation(Newtonsoft.Json.Linq.JValue, System.Dynamic.BinaryOperationBinder, object, out object)", file="UnixDateTimeConverter.cs", label="ExpressionType.MultiplyAssign", span="869-869"];
m17_480 [cluster="Newtonsoft.Json.Linq.JValue.JValueDynamicProxy.TryBinaryOperation(Newtonsoft.Json.Linq.JValue, System.Dynamic.BinaryOperationBinder, object, out object)", file="UnixDateTimeConverter.cs", label="ExpressionType.Divide", span="870-870"];
m17_481 [cluster="Newtonsoft.Json.Linq.JValue.JValueDynamicProxy.TryBinaryOperation(Newtonsoft.Json.Linq.JValue, System.Dynamic.BinaryOperationBinder, object, out object)", file="UnixDateTimeConverter.cs", label="ExpressionType.DivideAssign", span="871-871"];
m17_483 [cluster="Newtonsoft.Json.Linq.JValue.JValueDynamicProxy.TryBinaryOperation(Newtonsoft.Json.Linq.JValue, System.Dynamic.BinaryOperationBinder, object, out object)", file="UnixDateTimeConverter.cs", label="result = new JValue(result)", span="874-874"];
m17_485 [cluster="Newtonsoft.Json.Linq.JValue.JValueDynamicProxy.TryBinaryOperation(Newtonsoft.Json.Linq.JValue, System.Dynamic.BinaryOperationBinder, object, out object)", file="UnixDateTimeConverter.cs", label="result = null", span="880-880"];
m17_484 [cluster="Newtonsoft.Json.Linq.JValue.JValueDynamicProxy.TryBinaryOperation(Newtonsoft.Json.Linq.JValue, System.Dynamic.BinaryOperationBinder, object, out object)", file="UnixDateTimeConverter.cs", label="return true;", span="875-875"];
m17_486 [cluster="Newtonsoft.Json.Linq.JValue.JValueDynamicProxy.TryBinaryOperation(Newtonsoft.Json.Linq.JValue, System.Dynamic.BinaryOperationBinder, object, out object)", file="UnixDateTimeConverter.cs", label="return false;", span="881-881"];
m17_487 [cluster="Newtonsoft.Json.Linq.JValue.JValueDynamicProxy.TryBinaryOperation(Newtonsoft.Json.Linq.JValue, System.Dynamic.BinaryOperationBinder, object, out object)", file="UnixDateTimeConverter.cs", label="Exit Newtonsoft.Json.Linq.JValue.JValueDynamicProxy.TryBinaryOperation(Newtonsoft.Json.Linq.JValue, System.Dynamic.BinaryOperationBinder, object, out object)", span="840-840"];
m17_530 [cluster="Newtonsoft.Json.Linq.JValue.System.IConvertible.ToUInt32(System.IFormatProvider)", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.Linq.JValue.System.IConvertible.ToUInt32(System.IFormatProvider)", span="975-975"];
m17_531 [cluster="Newtonsoft.Json.Linq.JValue.System.IConvertible.ToUInt32(System.IFormatProvider)", file="UnixDateTimeConverter.cs", label="return (uint)this;", span="977-977"];
m17_532 [cluster="Newtonsoft.Json.Linq.JValue.System.IConvertible.ToUInt32(System.IFormatProvider)", file="UnixDateTimeConverter.cs", label="Exit Newtonsoft.Json.Linq.JValue.System.IConvertible.ToUInt32(System.IFormatProvider)", span="975-975"];
m17_512 [cluster="Newtonsoft.Json.Linq.JValue.System.IConvertible.ToChar(System.IFormatProvider)", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.Linq.JValue.System.IConvertible.ToChar(System.IFormatProvider)", span="945-945"];
m17_513 [cluster="Newtonsoft.Json.Linq.JValue.System.IConvertible.ToChar(System.IFormatProvider)", file="UnixDateTimeConverter.cs", label="return (char)this;", span="947-947"];
m17_514 [cluster="Newtonsoft.Json.Linq.JValue.System.IConvertible.ToChar(System.IFormatProvider)", file="UnixDateTimeConverter.cs", label="Exit Newtonsoft.Json.Linq.JValue.System.IConvertible.ToChar(System.IFormatProvider)", span="945-945"];
m17_125 [cluster="Newtonsoft.Json.Linq.JValue.Compare(Newtonsoft.Json.Linq.JTokenType, object, object)", file="UnixDateTimeConverter.cs", label="!(objB is Uri)", span="318-318"];
m17_127 [cluster="Newtonsoft.Json.Linq.JValue.Compare(Newtonsoft.Json.Linq.JTokenType, object, object)", file="UnixDateTimeConverter.cs", label="Uri uri1 = (Uri)objA", span="321-321"];
m17_126 [cluster="Newtonsoft.Json.Linq.JValue.Compare(Newtonsoft.Json.Linq.JTokenType, object, object)", file="UnixDateTimeConverter.cs", label="throw new ArgumentException(''Object must be of type Uri.'');", span="319-319"];
m17_128 [cluster="Newtonsoft.Json.Linq.JValue.Compare(Newtonsoft.Json.Linq.JTokenType, object, object)", file="UnixDateTimeConverter.cs", label="Uri uri2 = (Uri)objB", span="322-322"];
m17_129 [cluster="Newtonsoft.Json.Linq.JValue.Compare(Newtonsoft.Json.Linq.JTokenType, object, object)", file="UnixDateTimeConverter.cs", label="return Comparer<string>.Default.Compare(uri1.ToString(), uri2.ToString());", span="324-324"];
m17_130 [cluster="Newtonsoft.Json.Linq.JValue.Compare(Newtonsoft.Json.Linq.JTokenType, object, object)", file="UnixDateTimeConverter.cs", label="JTokenType.TimeSpan", span="325-325"];
m17_272 [cluster="Newtonsoft.Json.JavaScriptConvert.DeserializeAnonymousType<T>(string, T)", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.JavaScriptConvert.DeserializeAnonymousType<T>(string, T)", span="442-442"];
m17_273 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.CustomCollectionSerialization()", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.Tests.JsonSerializerTest.CustomCollectionSerialization()", span="715-715"];
m17_274 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.CustomCollectionSerialization()", file="UnixDateTimeConverter.cs", label="ProductCollection collection = new ProductCollection()\r\n      {\r\n        new Product() { Name = ''Test1'' },\r\n        new Product() { Name = ''Test2'' },\r\n        new Product() { Name = ''Test3'' }\r\n      }", span="717-722"];
m17_110 [cluster="Newtonsoft.Json.Linq.JValue.Compare(Newtonsoft.Json.Linq.JTokenType, object, object)", file="UnixDateTimeConverter.cs", label="throw new ArgumentException(''Object must be of type byte[].'');", span="299-299"];
m17_152 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.BadJsonPropertyClassSerialize()", file="UnixDateTimeConverter.cs", label="JavaScriptConvert.SerializeObject(new BadJsonPropertyClass())", span="480-480"];
m17_375 [cluster="Newtonsoft.Json.JsonWriter.WriteRawValue(string)", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.JsonWriter.WriteRawValue(string)", span="798-798"];
m17_157 [cluster="Newtonsoft.Json.Utilities.MiscellaneousUtils.CreateArgumentOutOfRangeException(string, object, string)", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.Utilities.MiscellaneousUtils.CreateArgumentOutOfRangeException(string, object, string)", span="63-63"];
m17_158 [cluster="Newtonsoft.Json.Linq.JValue.CompareFloat(object, object)", file="UnixDateTimeConverter.cs", label="double d1 = Convert.ToDouble(objA, CultureInfo.InvariantCulture)", span="340-340"];
m17_159 [cluster="Newtonsoft.Json.Linq.JValue.CompareFloat(object, object)", file="UnixDateTimeConverter.cs", label="double d2 = Convert.ToDouble(objB, CultureInfo.InvariantCulture)", span="341-341"];
m17_380 [cluster="Newtonsoft.Json.JsonWriter.WriteValue(decimal)", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.JsonWriter.WriteValue(decimal)", span="931-931"];
m17_371 [cluster="Newtonsoft.Json.JsonSerializer.GetMatchingConverter(System.Collections.Generic.IList<Newtonsoft.Json.JsonConverter>, System.Type)", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.JsonSerializer.GetMatchingConverter(System.Collections.Generic.IList<Newtonsoft.Json.JsonConverter>, System.Type)", span="868-868"];
m17_536 [cluster="Newtonsoft.Json.Linq.JValue.System.IConvertible.ToUInt64(System.IFormatProvider)", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.Linq.JValue.System.IConvertible.ToUInt64(System.IFormatProvider)", span="985-985"];
m17_537 [cluster="Newtonsoft.Json.Linq.JValue.System.IConvertible.ToUInt64(System.IFormatProvider)", file="UnixDateTimeConverter.cs", label="return (ulong)this;", span="987-987"];
m17_538 [cluster="Newtonsoft.Json.Linq.JValue.System.IConvertible.ToUInt64(System.IFormatProvider)", file="UnixDateTimeConverter.cs", label="Exit Newtonsoft.Json.Linq.JValue.System.IConvertible.ToUInt64(System.IFormatProvider)", span="985-985"];
m17_275 [cluster="Newtonsoft.Json.Linq.JValue.GetValueType(Newtonsoft.Json.Linq.JTokenType?, object)", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.Linq.JValue.GetValueType(Newtonsoft.Json.Linq.JTokenType?, object)", span="523-523"];
m17_278 [cluster="Newtonsoft.Json.Linq.JValue.GetValueType(Newtonsoft.Json.Linq.JTokenType?, object)", file="UnixDateTimeConverter.cs", label="value == DBNull.Value", span="528-528"];
m17_281 [cluster="Newtonsoft.Json.Linq.JValue.GetValueType(Newtonsoft.Json.Linq.JTokenType?, object)", file="UnixDateTimeConverter.cs", label="return GetStringValueType(current);", span="532-532"];
m17_276 [cluster="Newtonsoft.Json.Linq.JValue.GetValueType(Newtonsoft.Json.Linq.JTokenType?, object)", file="UnixDateTimeConverter.cs", label="value == null", span="525-525"];
m17_280 [cluster="Newtonsoft.Json.Linq.JValue.GetValueType(Newtonsoft.Json.Linq.JTokenType?, object)", file="UnixDateTimeConverter.cs", label="value is string", span="531-531"];
m17_277 [cluster="Newtonsoft.Json.Linq.JValue.GetValueType(Newtonsoft.Json.Linq.JTokenType?, object)", file="UnixDateTimeConverter.cs", label="return JTokenType.Null;", span="526-526"];
m17_279 [cluster="Newtonsoft.Json.Linq.JValue.GetValueType(Newtonsoft.Json.Linq.JTokenType?, object)", file="UnixDateTimeConverter.cs", label="return JTokenType.Null;", span="529-529"];
m17_282 [cluster="Newtonsoft.Json.Linq.JValue.GetValueType(Newtonsoft.Json.Linq.JTokenType?, object)", file="UnixDateTimeConverter.cs", label="value is long || value is int || value is short || value is sbyte\r\n                     || value is ulong || value is uint || value is ushort || value is byte", span="533-534"];
m17_27 [cluster="Newtonsoft.Json.Linq.JValue.JValue(System.TimeSpan)", file="UnixDateTimeConverter.cs", label="Exit Newtonsoft.Json.Linq.JValue.JValue(System.TimeSpan)", span="161-161"];
m17_28 [cluster="Newtonsoft.Json.Linq.JValue.JValue(object)", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.Linq.JValue.JValue(object)", span="170-170"];
m17_29 [cluster="Newtonsoft.Json.Linq.JValue.JValue(object)", file="UnixDateTimeConverter.cs", label="Exit Newtonsoft.Json.Linq.JValue.JValue(object)", span="170-170"];
m17_30 [cluster="Newtonsoft.Json.Linq.JValue.DeepEquals(Newtonsoft.Json.Linq.JToken)", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.Linq.JValue.DeepEquals(Newtonsoft.Json.Linq.JToken)", span="175-175"];
m17_31 [cluster="Newtonsoft.Json.Linq.JValue.DeepEquals(Newtonsoft.Json.Linq.JToken)", file="UnixDateTimeConverter.cs", label="JValue other = node as JValue", span="177-177"];
m17_32 [cluster="Newtonsoft.Json.Linq.JValue.DeepEquals(Newtonsoft.Json.Linq.JToken)", file="UnixDateTimeConverter.cs", label="other == null", span="178-178"];
m17_382 [cluster="Newtonsoft.Json.JsonWriter.WriteValue(float)", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.JsonWriter.WriteValue(float)", span="857-857"];
m17_499 [cluster="Newtonsoft.Json.Linq.JValue.System.IConvertible.GetTypeCode()", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.Linq.JValue.System.IConvertible.GetTypeCode()", span="923-923"];
m17_500 [cluster="Newtonsoft.Json.Linq.JValue.System.IConvertible.GetTypeCode()", file="UnixDateTimeConverter.cs", label="_value == null", span="925-925"];
m17_501 [cluster="Newtonsoft.Json.Linq.JValue.System.IConvertible.GetTypeCode()", file="UnixDateTimeConverter.cs", label="return TypeCode.Empty;", span="926-926"];
m17_502 [cluster="Newtonsoft.Json.Linq.JValue.System.IConvertible.GetTypeCode()", file="UnixDateTimeConverter.cs", label="_value is DateTimeOffset", span="929-929"];
m17_503 [cluster="Newtonsoft.Json.Linq.JValue.System.IConvertible.GetTypeCode()", file="UnixDateTimeConverter.cs", label="return TypeCode.DateTime;", span="930-930"];
m17_504 [cluster="Newtonsoft.Json.Linq.JValue.System.IConvertible.GetTypeCode()", file="UnixDateTimeConverter.cs", label="_value is BigInteger", span="933-933"];
m17_505 [cluster="Newtonsoft.Json.Linq.JValue.System.IConvertible.GetTypeCode()", file="UnixDateTimeConverter.cs", label="return TypeCode.Object;", span="934-934"];
m17_506 [cluster="Newtonsoft.Json.Linq.JValue.System.IConvertible.GetTypeCode()", file="UnixDateTimeConverter.cs", label="return System.Type.GetTypeCode(_value.GetType());", span="937-937"];
m17_507 [cluster="Newtonsoft.Json.Linq.JValue.System.IConvertible.GetTypeCode()", file="UnixDateTimeConverter.cs", label="Exit Newtonsoft.Json.Linq.JValue.System.IConvertible.GetTypeCode()", span="923-923"];
m17_4 [cluster="Newtonsoft.Json.Tests.Product.Equals(object)", file="UnixDateTimeConverter.cs", label="return base.Equals(obj);", span="57-57"];
m17_5 [cluster="Newtonsoft.Json.Tests.Product.Equals(object)", file="UnixDateTimeConverter.cs", label="Exit Newtonsoft.Json.Tests.Product.Equals(object)", span="48-48"];
m17_97 [cluster="Newtonsoft.Json.Linq.JValue.Compare(Newtonsoft.Json.Linq.JTokenType, object, object)", file="UnixDateTimeConverter.cs", label="DateTime date2", span="272-272"];
m17_265 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.AnonymousObjectSerialization()", file="UnixDateTimeConverter.cs", label="Assert.AreEqual(int.MaxValue, anonymous.IntValue)", span="706-706"];
m17_240 [cluster="Newtonsoft.Json.Linq.JValue.Operation(System.Linq.Expressions.ExpressionType, object, object, out object)", file="UnixDateTimeConverter.cs", label="objA == null || objB == null", span="463-463"];
m17_139 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.TorrentDeserializeTest()", file="UnixDateTimeConverter.cs", label="Exit Newtonsoft.Json.Tests.JsonSerializerTest.TorrentDeserializeTest()", span="410-410"];
m17_160 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.InheritedListSerialize()", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.Tests.JsonSerializerTest.InheritedListSerialize()", span="502-502"];
m17_162 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.InheritedListSerialize()", file="UnixDateTimeConverter.cs", label="Article a2 = new Article(''a2'')", span="505-505"];
m17_161 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.InheritedListSerialize()", file="UnixDateTimeConverter.cs", label="Article a1 = new Article(''a1'')", span="504-504"];
m17_163 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.InheritedListSerialize()", file="UnixDateTimeConverter.cs", label="ArticleCollection articles1 = new ArticleCollection()", span="507-507"];
m17_61 [cluster="Newtonsoft.Json.Linq.JValue.Compare(Newtonsoft.Json.Linq.JTokenType, object, object)", file="UnixDateTimeConverter.cs", label="objA == null && objB == null", span="224-224"];
m17_65 [cluster="Newtonsoft.Json.Linq.JValue.Compare(Newtonsoft.Json.Linq.JTokenType, object, object)", file="UnixDateTimeConverter.cs", label="objA == null && objB != null", span="228-228"];
m17_68 [cluster="Newtonsoft.Json.Linq.JValue.Compare(Newtonsoft.Json.Linq.JTokenType, object, object)", file="UnixDateTimeConverter.cs", label="JTokenType.Integer", span="233-233"];
m17_63 [cluster="Newtonsoft.Json.Linq.JValue.Compare(Newtonsoft.Json.Linq.JTokenType, object, object)", file="UnixDateTimeConverter.cs", label="objA != null && objB == null", span="226-226"];
m17_64 [cluster="Newtonsoft.Json.Linq.JValue.Compare(Newtonsoft.Json.Linq.JTokenType, object, object)", file="UnixDateTimeConverter.cs", label="return 1;", span="227-227"];
m17_66 [cluster="Newtonsoft.Json.Linq.JValue.Compare(Newtonsoft.Json.Linq.JTokenType, object, object)", file="UnixDateTimeConverter.cs", label="return -1;", span="229-229"];
m17_70 [cluster="Newtonsoft.Json.Linq.JValue.Compare(Newtonsoft.Json.Linq.JTokenType, object, object)", file="UnixDateTimeConverter.cs", label="return CompareBigInteger((BigInteger)objA, objB);", span="236-236"];
m17_72 [cluster="Newtonsoft.Json.Linq.JValue.Compare(Newtonsoft.Json.Linq.JTokenType, object, object)", file="UnixDateTimeConverter.cs", label="return -CompareBigInteger((BigInteger)objB, objA);", span="238-238"];
m17_62 [cluster="Newtonsoft.Json.Linq.JValue.Compare(Newtonsoft.Json.Linq.JTokenType, object, object)", file="UnixDateTimeConverter.cs", label="return 0;", span="225-225"];
m17_67 [cluster="Newtonsoft.Json.Linq.JValue.Compare(Newtonsoft.Json.Linq.JTokenType, object, object)", file="UnixDateTimeConverter.cs", label=valueType, span="231-231"];
m17_69 [cluster="Newtonsoft.Json.Linq.JValue.Compare(Newtonsoft.Json.Linq.JTokenType, object, object)", file="UnixDateTimeConverter.cs", label="objA is BigInteger", span="235-235"];
m17_71 [cluster="Newtonsoft.Json.Linq.JValue.Compare(Newtonsoft.Json.Linq.JTokenType, object, object)", file="UnixDateTimeConverter.cs", label="objB is BigInteger", span="237-237"];
m17_73 [cluster="Newtonsoft.Json.Linq.JValue.Compare(Newtonsoft.Json.Linq.JTokenType, object, object)", file="UnixDateTimeConverter.cs", label="objA is ulong || objB is ulong || objA is decimal || objB is decimal", span="240-240"];
m17_92 [cluster="Newtonsoft.Json.Linq.JValue.Compare(Newtonsoft.Json.Linq.JTokenType, object, object)", file="UnixDateTimeConverter.cs", label="bool b2 = Convert.ToBoolean(objB, CultureInfo.InvariantCulture)", span="263-263"];
m17_95 [cluster="Newtonsoft.Json.Linq.JValue.Compare(Newtonsoft.Json.Linq.JTokenType, object, object)", file="UnixDateTimeConverter.cs", label="objA is DateTime", span="268-268"];
m17_94 [cluster="Newtonsoft.Json.Linq.JValue.Compare(Newtonsoft.Json.Linq.JTokenType, object, object)", file="UnixDateTimeConverter.cs", label="JTokenType.Date", span="266-266"];
m17_93 [cluster="Newtonsoft.Json.Linq.JValue.Compare(Newtonsoft.Json.Linq.JTokenType, object, object)", file="UnixDateTimeConverter.cs", label="return b1.CompareTo(b2);", span="265-265"];
m17_96 [cluster="Newtonsoft.Json.Linq.JValue.Compare(Newtonsoft.Json.Linq.JTokenType, object, object)", file="UnixDateTimeConverter.cs", label="DateTime date1 = (DateTime)objA", span="271-271"];
m17_16 [cluster="Newtonsoft.Json.Tests.Store.Store()", file="UnixDateTimeConverter.cs", label="Product rocket = new Product()", span="99-99"];
m17_17 [cluster="Newtonsoft.Json.Tests.Store.Store()", color=green, community=0, file="UnixDateTimeConverter.cs", label="rocket.Name = ''Rocket''", prediction=7, span="100-100"];
m17_60 [cluster="Newtonsoft.Json.Linq.JValue.Compare(Newtonsoft.Json.Linq.JTokenType, object, object)", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.Linq.JValue.Compare(Newtonsoft.Json.Linq.JTokenType, object, object)", span="222-222"];
m17_22 [cluster="Newtonsoft.Json.Tests.Store.Store()", file="UnixDateTimeConverter.cs", label="product.Add(alien)", span="106-106"];
m17_23 [cluster="Newtonsoft.Json.Tests.Store.Store()", file="UnixDateTimeConverter.cs", label="Exit Newtonsoft.Json.Tests.Store.Store()", span="92-92"];
m17_26 [cluster="System.DateTime.DateTime(int, int, int, int, int, int, System.DateTimeKind)", file="UnixDateTimeConverter.cs", label="Entry System.DateTime.DateTime(int, int, int, int, int, int, System.DateTimeKind)", span="0-0"];
m17_141 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.JsonPropertyClassSerialize()", file="UnixDateTimeConverter.cs", label="JsonPropertyClass test = new JsonPropertyClass()", span="454-454"];
m17_542 [cluster="Newtonsoft.Json.Linq.JValue.System.IConvertible.ToDouble(System.IFormatProvider)", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.Linq.JValue.System.IConvertible.ToDouble(System.IFormatProvider)", span="995-995"];
m17_543 [cluster="Newtonsoft.Json.Linq.JValue.System.IConvertible.ToDouble(System.IFormatProvider)", file="UnixDateTimeConverter.cs", label="return (double)this;", span="997-997"];
m17_544 [cluster="Newtonsoft.Json.Linq.JValue.System.IConvertible.ToDouble(System.IFormatProvider)", file="UnixDateTimeConverter.cs", label="Exit Newtonsoft.Json.Linq.JValue.System.IConvertible.ToDouble(System.IFormatProvider)", span="995-995"];
m17_396 [cluster="Newtonsoft.Json.Linq.JValue.Equals(Newtonsoft.Json.Linq.JValue)", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.Linq.JValue.Equals(Newtonsoft.Json.Linq.JValue)", span="703-703"];
m17_397 [cluster="Newtonsoft.Json.Linq.JValue.Equals(Newtonsoft.Json.Linq.JValue)", file="UnixDateTimeConverter.cs", label="other == null", span="705-705"];
m17_399 [cluster="Newtonsoft.Json.Linq.JValue.Equals(Newtonsoft.Json.Linq.JValue)", file="UnixDateTimeConverter.cs", label="return ValuesEquals(this, other);", span="708-708"];
m17_398 [cluster="Newtonsoft.Json.Linq.JValue.Equals(Newtonsoft.Json.Linq.JValue)", file="UnixDateTimeConverter.cs", label="return false;", span="706-706"];
m17_400 [cluster="Newtonsoft.Json.Linq.JValue.Equals(Newtonsoft.Json.Linq.JValue)", file="UnixDateTimeConverter.cs", label="Exit Newtonsoft.Json.Linq.JValue.Equals(Newtonsoft.Json.Linq.JValue)", span="703-703"];
m17_146 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.JsonPropertyClassSerialize()", file="UnixDateTimeConverter.cs", label="JsonPropertyClass test2 = JavaScriptConvert.DeserializeObject<JsonPropertyClass>(jsonText)", span="462-462"];
m17_10 [cluster="Newtonsoft.Json.Linq.JValue.JValue(ulong)", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.Linq.JValue.JValue(ulong)", span="89-89"];
m17_539 [cluster="Newtonsoft.Json.Linq.JValue.System.IConvertible.ToSingle(System.IFormatProvider)", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.Linq.JValue.System.IConvertible.ToSingle(System.IFormatProvider)", span="990-990"];
m17_540 [cluster="Newtonsoft.Json.Linq.JValue.System.IConvertible.ToSingle(System.IFormatProvider)", file="UnixDateTimeConverter.cs", label="return (float)this;", span="992-992"];
m17_541 [cluster="Newtonsoft.Json.Linq.JValue.System.IConvertible.ToSingle(System.IFormatProvider)", file="UnixDateTimeConverter.cs", label="Exit Newtonsoft.Json.Linq.JValue.System.IConvertible.ToSingle(System.IFormatProvider)", span="990-990"];
m17_210 [cluster="Newtonsoft.Json.Linq.JValue.Operation(System.Linq.Expressions.ExpressionType, object, object, out object)", file="UnixDateTimeConverter.cs", label="result = d1 * d2", span="421-421"];
m17_57 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.JavaScriptConvertSerializer()", file="UnixDateTimeConverter.cs", label="Assert.AreEqual(new DateTime(2010, 1, 24, 12, 0, 0), p.Expiry)", span="172-172"];
m17_379 [cluster="Newtonsoft.Json.JsonWriter.WriteValue(long)", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.JsonWriter.WriteValue(long)", span="838-838"];
m17_98 [cluster="Newtonsoft.Json.Linq.JValue.Compare(Newtonsoft.Json.Linq.JTokenType, object, object)", file="UnixDateTimeConverter.cs", label="objB is DateTimeOffset", span="275-275"];
m17_101 [cluster="Newtonsoft.Json.Linq.JValue.Compare(Newtonsoft.Json.Linq.JTokenType, object, object)", file="UnixDateTimeConverter.cs", label="return date1.CompareTo(date2);", span="281-281"];
m17_100 [cluster="Newtonsoft.Json.Linq.JValue.Compare(Newtonsoft.Json.Linq.JTokenType, object, object)", file="UnixDateTimeConverter.cs", label="date2 = Convert.ToDateTime(objB, CultureInfo.InvariantCulture)", span="279-279"];
m17_99 [cluster="Newtonsoft.Json.Linq.JValue.Compare(Newtonsoft.Json.Linq.JTokenType, object, object)", file="UnixDateTimeConverter.cs", label="date2 = ((DateTimeOffset)objB).DateTime", span="276-276"];
m17_102 [cluster="Newtonsoft.Json.Linq.JValue.Compare(Newtonsoft.Json.Linq.JTokenType, object, object)", file="UnixDateTimeConverter.cs", label="DateTimeOffset date1 = (DateTimeOffset)objA", span="286-286"];
m17_527 [cluster="Newtonsoft.Json.Linq.JValue.System.IConvertible.ToInt32(System.IFormatProvider)", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.Linq.JValue.System.IConvertible.ToInt32(System.IFormatProvider)", span="970-970"];
m17_528 [cluster="Newtonsoft.Json.Linq.JValue.System.IConvertible.ToInt32(System.IFormatProvider)", file="UnixDateTimeConverter.cs", label="return (int)this;", span="972-972"];
m17_529 [cluster="Newtonsoft.Json.Linq.JValue.System.IConvertible.ToInt32(System.IFormatProvider)", file="UnixDateTimeConverter.cs", label="Exit Newtonsoft.Json.Linq.JValue.System.IConvertible.ToInt32(System.IFormatProvider)", span="970-970"];
m17_284 [cluster="System.IO.StringWriter.StringWriter()", file="UnixDateTimeConverter.cs", label="Entry System.IO.StringWriter.StringWriter()", span="0-0"];
m17_286 [cluster="System.IO.StringWriter.GetStringBuilder()", file="UnixDateTimeConverter.cs", label="Entry System.IO.StringWriter.GetStringBuilder()", span="0-0"];
m17_288 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.NullValueHandlingSerialization()", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.Tests.JsonSerializerTest.NullValueHandlingSerialization()", span="740-740"];
m17_290 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.NullValueHandlingSerialization()", file="UnixDateTimeConverter.cs", label="JsonSerializer jsonSerializer = new JsonSerializer()", span="744-744"];
m17_292 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.NullValueHandlingSerialization()", file="UnixDateTimeConverter.cs", label="StringWriter sw = new StringWriter()", span="747-747"];
m17_294 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.NullValueHandlingSerialization()", file="UnixDateTimeConverter.cs", label="Assert.AreEqual(@''{''''Color'''':2,''''Establised'''':''''\/Date(1264122061000+0000)\/'''',''''Width'''':1.1,''''Employees'''':999,''''RoomsPerFloor'''':[1,2,3,4,5,6,7,8,9],''''Open'''':false,''''Symbol'''':''''@'''',''''Mottos'''':[''''Hello World'''',''''������\\'{new Date(12345);}[222]_�@��~'''',null,'''' ''''],''''Cost'''':100980.1,''''Escape'''':''''\r\n\t\f\b?{\\r\\n\''''''''',''''product'''':[{''''Name'''':''''Rocket'''',''''Expiry'''':''''\/Date(949532490000)\/'''',''''Price'''':0},{''''Name'''':''''Alien'''',''''Expiry'''':''''\/Date(946684800000)\/'''',''''Price'''':0}]}'', sw.GetStringBuilder().ToString())", span="752-752"];
m17_296 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.NullValueHandlingSerialization()", file="UnixDateTimeConverter.cs", label="Assert.AreEqual(''\r\n\t\f\b?{\\r\\n\''\''', s2.Escape)", span="755-755"];
m17_298 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.NullValueHandlingSerialization()", file="UnixDateTimeConverter.cs", label="Assert.AreEqual(''\r\n\t\f\b?{\\r\\n\''\''', s3.Escape)", span="758-758"];
m17_300 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.NullValueHandlingSerialization()", file="UnixDateTimeConverter.cs", label="Assert.AreEqual(s1.Establised, s3.Establised)", span="761-761"];
m17_302 [cluster="Newtonsoft.Json.Linq.JValue.GetValueType(Newtonsoft.Json.Linq.JTokenType?, object)", file="UnixDateTimeConverter.cs", label="Newtonsoft.Json.Tests.Product", span=""];
m17_304 [cluster="Newtonsoft.Json.Linq.JValue.GetValueType(Newtonsoft.Json.Linq.JTokenType?, object)", file="UnixDateTimeConverter.cs", label="Newtonsoft.Json.Tests.JsonSerializerTest.Article", span=""];
m17_283 [cluster="Newtonsoft.Json.Tests.ProductCollection.ProductCollection()", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.Tests.ProductCollection.ProductCollection()", span="66-66"];
m17_285 [cluster="Newtonsoft.Json.JsonSerializer.Serialize(System.IO.TextWriter, object)", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.JsonSerializer.Serialize(System.IO.TextWriter, object)", span="517-517"];
m17_287 [cluster="System.Text.StringBuilder.ToString()", file="UnixDateTimeConverter.cs", label="Entry System.Text.StringBuilder.ToString()", span="0-0"];
m17_289 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.NullValueHandlingSerialization()", file="UnixDateTimeConverter.cs", label="Store s1 = new Store()", span="742-742"];
m17_291 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.NullValueHandlingSerialization()", file="UnixDateTimeConverter.cs", label="jsonSerializer.NullValueHandling = NullValueHandling.Ignore", span="745-745"];
m17_293 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.NullValueHandlingSerialization()", file="UnixDateTimeConverter.cs", label="jsonSerializer.Serialize(sw, s1)", span="748-748"];
m17_295 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.NullValueHandlingSerialization()", file="UnixDateTimeConverter.cs", label="Store s2 = (Store)jsonSerializer.Deserialize(new JsonReader(new StringReader(''{}'')), typeof(Store))", span="754-754"];
m17_297 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.NullValueHandlingSerialization()", file="UnixDateTimeConverter.cs", label="Store s3 = (Store)jsonSerializer.Deserialize(new JsonReader(new StringReader(@''{''''Escape'''':null}'')), typeof(Store))", span="757-757"];
m17_299 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.NullValueHandlingSerialization()", file="UnixDateTimeConverter.cs", label="Store s4 = (Store)jsonSerializer.Deserialize(new JsonReader(new StringReader(@''{''''Color'''':2,''''Establised'''':''''\/Date(1264071600000+1300)\/'''',''''Width'''':1.1,''''Employees'''':999,''''RoomsPerFloor'''':[1,2,3,4,5,6,7,8,9],''''Open'''':false,''''Symbol'''':''''@'''',''''Mottos'''':[''''Hello World'''',''''������\\'{new Date(12345);}[222]_�@��~'''',null,'''' ''''],''''Cost'''':100980.1,''''Escape'''':''''\r\n\t\f\b?{\\r\\n\''''''''',''''product'''':[{''''Name'''':''''Rocket'''',''''Expiry'''':''''\/Date(949485690000+1300)\/'''',''''Price'''':0},{''''Name'''':''''Alien'''',''''Expiry'''':''''\/Date(946638000000)\/'''',''''Price'''':0}]}'')), typeof(Store))", span="760-760"];
m17_301 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.NullValueHandlingSerialization()", file="UnixDateTimeConverter.cs", label="Exit Newtonsoft.Json.Tests.JsonSerializerTest.NullValueHandlingSerialization()", span="740-740"];
m17_303 [cluster="Newtonsoft.Json.Linq.JValue.GetValueType(Newtonsoft.Json.Linq.JTokenType?, object)", file="UnixDateTimeConverter.cs", label="Newtonsoft.Json.Tests.Store", span=""];
m17_305 [cluster="Newtonsoft.Json.Linq.JValue.GetValueType(Newtonsoft.Json.Linq.JTokenType?, object)", file="UnixDateTimeConverter.cs", label="Exit Newtonsoft.Json.Linq.JValue.GetValueType(Newtonsoft.Json.Linq.JTokenType?, object)", span="523-523"];
m17_0 [cluster="Newtonsoft.Json.Linq.JValue.JValue(object, Newtonsoft.Json.Linq.JTokenType)", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.Linq.JValue.JValue(object, Newtonsoft.Json.Linq.JTokenType)", span="51-51"];
m17_1 [cluster="Newtonsoft.Json.Linq.JValue.JValue(object, Newtonsoft.Json.Linq.JTokenType)", color=green, community=0, file="UnixDateTimeConverter.cs", label="_value = value", prediction=8, span="53-53"];
m17_2 [cluster="Newtonsoft.Json.Linq.JValue.JValue(object, Newtonsoft.Json.Linq.JTokenType)", file="UnixDateTimeConverter.cs", label="_valueType = type", span="54-54"];
m17_3 [cluster="Newtonsoft.Json.Linq.JValue.JValue(object, Newtonsoft.Json.Linq.JTokenType)", file="UnixDateTimeConverter.cs", label="Exit Newtonsoft.Json.Linq.JValue.JValue(object, Newtonsoft.Json.Linq.JTokenType)", span="51-51"];
m17_74 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="UnixDateTimeConverter.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m17_75 [cluster="System.Console.WriteLine()", file="UnixDateTimeConverter.cs", label="Entry System.Console.WriteLine()", span="0-0"];
m17_76 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.TestMethodExecutorObject()", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.Tests.JsonSerializerTest.TestMethodExecutorObject()", span="204-204"];
m17_77 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.TestMethodExecutorObject()", file="UnixDateTimeConverter.cs", label="MethodExecutorObject executorObject = new MethodExecutorObject()", span="206-206"];
m17_79 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.TestMethodExecutorObject()", file="UnixDateTimeConverter.cs", label="executorObject.serverMethodParams = new object[] { ''21321546'', ''101'', ''1236'', ''D:\\1.txt'' }", span="208-208"];
m17_80 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.TestMethodExecutorObject()", file="UnixDateTimeConverter.cs", label="executorObject.clientGetResultFunction = ''ClientBanSubsCB''", span="209-209"];
m17_81 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.TestMethodExecutorObject()", file="UnixDateTimeConverter.cs", label="string output = JavaScriptConvert.SerializeObject(executorObject)", span="211-211"];
m17_82 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.TestMethodExecutorObject()", file="UnixDateTimeConverter.cs", label="MethodExecutorObject executorObject2 = JavaScriptConvert.DeserializeObject(output, typeof(MethodExecutorObject)) as MethodExecutorObject", span="213-213"];
m17_83 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.TestMethodExecutorObject()", file="UnixDateTimeConverter.cs", label="Assert.AreNotSame(executorObject, executorObject2)", span="215-215"];
m17_87 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.TestMethodExecutorObject()", file="UnixDateTimeConverter.cs", label="Assert.AreEqual(executorObject2.clientGetResultFunction, ''ClientBanSubsCB'')", span="219-219"];
m17_88 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.TestMethodExecutorObject()", file="UnixDateTimeConverter.cs", label="Exit Newtonsoft.Json.Tests.JsonSerializerTest.TestMethodExecutorObject()", span="204-204"];
m17_104 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.SerializeDeserializeGetOnlyProperty()", file="UnixDateTimeConverter.cs", label="string value = JavaScriptConvert.SerializeObject(new GetOnlyPropertyClass())", span="261-261"];
m17_105 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.SerializeDeserializeGetOnlyProperty()", file="UnixDateTimeConverter.cs", label="GetOnlyPropertyClass c = JavaScriptConvert.DeserializeObject<GetOnlyPropertyClass>(value)", span="263-263"];
m17_106 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.SerializeDeserializeGetOnlyProperty()", file="UnixDateTimeConverter.cs", label="Assert.AreEqual(c.Field, ''Field'')", span="265-265"];
m17_109 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.GetOnlyPropertyClass.GetOnlyPropertyClass()", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.Tests.JsonSerializerTest.GetOnlyPropertyClass.GetOnlyPropertyClass()", span="248-248"];
m17_111 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.SerializeDeserializeSetOnlyProperty()", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.Tests.JsonSerializerTest.SerializeDeserializeSetOnlyProperty()", span="280-280"];
m17_112 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.SerializeDeserializeSetOnlyProperty()", file="UnixDateTimeConverter.cs", label="string value = JavaScriptConvert.SerializeObject(new SetOnlyPropertyClass())", span="282-282"];
m17_119 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.JsonIgnoreAttributeTest()", file="UnixDateTimeConverter.cs", label="Assert.AreEqual(@''{''''Field'''':0,''''Property'''':21}'', json)", span="315-315"];
m17_121 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.JsonIgnoreAttributeTest()", file="UnixDateTimeConverter.cs", label="Assert.AreEqual(0, c.IgnoredField)", span="319-319"];
m17_122 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.JsonIgnoreAttributeTest()", file="UnixDateTimeConverter.cs", label="Assert.AreEqual(99, c.Field)", span="320-320"];
m17_131 [cluster="Newtonsoft.Json.JavaScriptConvert.DeserializeObject(string)", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.JavaScriptConvert.DeserializeObject(string)", span="404-404"];
m17_133 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.TorrentDeserializeTest()", file="UnixDateTimeConverter.cs", label="string jsonText = @''{\r\n'''''''':'''''''',\r\n''''label'''': [\r\n       [''''SomeName'''',6]\r\n],\r\n''''torrents'''': [\r\n       [''''192D99A5C943555CB7F00A852821CF6D6DB3008A'''',201,''''filename.avi'''',178311826,1000,178311826,72815250,408,1603,7,121430,''''NameOfLabelPrevioslyDefined'''',3,6,0,8,128954,-1,0],\r\n],\r\n''''torrentc'''': ''''1816000723''''\r\n}''", span="412-421"];
m17_134 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.TorrentDeserializeTest()", file="UnixDateTimeConverter.cs", label="JavaScriptObject o = (JavaScriptObject)JavaScriptConvert.DeserializeObject(jsonText)", span="423-423"];
m17_136 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.TorrentDeserializeTest()", file="UnixDateTimeConverter.cs", label="JavaScriptArray torrentsArray = (JavaScriptArray)o[''torrents'']", span="426-426"];
m17_78 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.TestMethodExecutorObject()", file="UnixDateTimeConverter.cs", label="executorObject.serverClassName = ''BanSubs''", span="207-207"];
m17_84 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.TestMethodExecutorObject()", file="UnixDateTimeConverter.cs", label="Assert.AreEqual(executorObject2.serverClassName, ''BanSubs'')", span="216-216"];
m17_90 [cluster="Unk.AreNotSame", file="UnixDateTimeConverter.cs", label="Entry Unk.AreNotSame", span=""];
m17_108 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.SerializeDeserializeGetOnlyProperty()", file="UnixDateTimeConverter.cs", label="Exit Newtonsoft.Json.Tests.JsonSerializerTest.SerializeDeserializeGetOnlyProperty()", span="259-259"];
m17_118 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.JsonIgnoreAttributeTest()", file="UnixDateTimeConverter.cs", label="string json = JavaScriptConvert.SerializeObject(new JsonIgnoreAttributeTestClass())", span="313-313"];
m17_124 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.JsonIgnoreAttributeTestClass.JsonIgnoreAttributeTestClass()", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.Tests.JsonSerializerTest.JsonIgnoreAttributeTestClass.JsonIgnoreAttributeTestClass()", span="289-289"];
m17_85 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.TestMethodExecutorObject()", file="UnixDateTimeConverter.cs", label="Assert.AreEqual(executorObject2.serverMethodParams.Length, 4)", span="217-217"];
m17_86 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.TestMethodExecutorObject()", file="UnixDateTimeConverter.cs", label="Assert.Contains(''101'', executorObject2.serverMethodParams)", span="218-218"];
m17_89 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.MethodExecutorObject.MethodExecutorObject()", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.Tests.JsonSerializerTest.MethodExecutorObject.MethodExecutorObject()", span="196-196"];
m17_103 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.SerializeDeserializeGetOnlyProperty()", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.Tests.JsonSerializerTest.SerializeDeserializeGetOnlyProperty()", span="259-259"];
m17_107 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.SerializeDeserializeGetOnlyProperty()", file="UnixDateTimeConverter.cs", label="Assert.AreEqual(c.GetOnlyProperty, ''GetOnlyProperty'')", span="266-266"];
m17_113 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.SerializeDeserializeSetOnlyProperty()", file="UnixDateTimeConverter.cs", label="SetOnlyPropertyClass c = JavaScriptConvert.DeserializeObject<SetOnlyPropertyClass>(value)", span="284-284"];
m17_117 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.JsonIgnoreAttributeTest()", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.Tests.JsonSerializerTest.JsonIgnoreAttributeTest()", span="311-311"];
m17_115 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.SerializeDeserializeSetOnlyProperty()", file="UnixDateTimeConverter.cs", label="Exit Newtonsoft.Json.Tests.JsonSerializerTest.SerializeDeserializeSetOnlyProperty()", span="280-280"];
m17_114 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.SerializeDeserializeSetOnlyProperty()", file="UnixDateTimeConverter.cs", label="Assert.AreEqual(c.Field, ''Field'')", span="286-286"];
m17_116 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.SetOnlyPropertyClass.SetOnlyPropertyClass()", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.Tests.JsonSerializerTest.SetOnlyPropertyClass.SetOnlyPropertyClass()", span="269-269"];
m17_120 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.JsonIgnoreAttributeTest()", file="UnixDateTimeConverter.cs", label="JsonIgnoreAttributeTestClass c = JavaScriptConvert.DeserializeObject<JsonIgnoreAttributeTestClass>(@''{''''Field'''':99,''''Property'''':-1,''''IgnoredField'''':-1}'')", span="317-317"];
m17_123 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.JsonIgnoreAttributeTest()", file="UnixDateTimeConverter.cs", label="Exit Newtonsoft.Json.Tests.JsonSerializerTest.JsonIgnoreAttributeTest()", span="311-311"];
m17_132 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.TorrentDeserializeTest()", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.Tests.JsonSerializerTest.TorrentDeserializeTest()", span="410-410"];
m17_135 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.TorrentDeserializeTest()", file="UnixDateTimeConverter.cs", label="Assert.AreEqual(4, o.Count)", span="424-424"];
m17_137 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.TorrentDeserializeTest()", file="UnixDateTimeConverter.cs", label="JavaScriptArray nestedTorrentsArray = (JavaScriptArray)torrentsArray[0]", span="427-427"];
m17_434 [cluster="System.IFormattable.ToString(string, System.IFormatProvider)", file="UnixDateTimeConverter.cs", label="Entry System.IFormattable.ToString(string, System.IFormatProvider)", span="0-0"];
m17_140 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.JsonPropertyClassSerialize()", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.Tests.JsonSerializerTest.JsonPropertyClassSerialize()", span="452-452"];
m17_151 [cluster="Newtonsoft.Json.Utilities.MiscellaneousUtils.ByteArrayCompare(byte[], byte[])", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.Utilities.MiscellaneousUtils.ByteArrayCompare(byte[], byte[])", span="78-78"];
m17_153 [cluster="System.Uri.ToString()", file="UnixDateTimeConverter.cs", label="Entry System.Uri.ToString()", span="0-0"];
m17_423 [cluster="Newtonsoft.Json.Linq.JValue.ToString(string, System.IFormatProvider)", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.Linq.JValue.ToString(string, System.IFormatProvider)", span="793-793"];
m17_427 [cluster="Newtonsoft.Json.Linq.JValue.ToString(string, System.IFormatProvider)", file="UnixDateTimeConverter.cs", label="_value == null", span="795-795"];
m17_431 [cluster="Newtonsoft.Json.Linq.JValue.ToString(string, System.IFormatProvider)", file="UnixDateTimeConverter.cs", label="return formattable.ToString(format, formatProvider);", span="800-800"];
m17_428 [cluster="Newtonsoft.Json.Linq.JValue.ToString(string, System.IFormatProvider)", file="UnixDateTimeConverter.cs", label="return string.Empty;", span="796-796"];
m17_429 [cluster="Newtonsoft.Json.Linq.JValue.ToString(string, System.IFormatProvider)", file="UnixDateTimeConverter.cs", label="IFormattable formattable = _value as IFormattable", span="798-798"];
m17_430 [cluster="Newtonsoft.Json.Linq.JValue.ToString(string, System.IFormatProvider)", file="UnixDateTimeConverter.cs", label="formattable != null", span="799-799"];
m17_432 [cluster="Newtonsoft.Json.Linq.JValue.ToString(string, System.IFormatProvider)", file="UnixDateTimeConverter.cs", label="return _value.ToString();", span="802-802"];
m17_433 [cluster="Newtonsoft.Json.Linq.JValue.ToString(string, System.IFormatProvider)", file="UnixDateTimeConverter.cs", label="Exit Newtonsoft.Json.Linq.JValue.ToString(string, System.IFormatProvider)", span="793-793"];
m17_545 [cluster="Newtonsoft.Json.Linq.JValue.System.IConvertible.ToDecimal(System.IFormatProvider)", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.Linq.JValue.System.IConvertible.ToDecimal(System.IFormatProvider)", span="1000-1000"];
m17_546 [cluster="Newtonsoft.Json.Linq.JValue.System.IConvertible.ToDecimal(System.IFormatProvider)", file="UnixDateTimeConverter.cs", label="return (decimal)this;", span="1002-1002"];
m17_547 [cluster="Newtonsoft.Json.Linq.JValue.System.IConvertible.ToDecimal(System.IFormatProvider)", file="UnixDateTimeConverter.cs", label="Exit Newtonsoft.Json.Linq.JValue.System.IConvertible.ToDecimal(System.IFormatProvider)", span="1000-1000"];
m17_11 [cluster="Newtonsoft.Json.Tests.Store.Store()", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.Tests.Store.Store()", span="92-92"];
m17_306 [cluster="Newtonsoft.Json.Linq.JValue.GetStringValueType(Newtonsoft.Json.Linq.JTokenType?)", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.Linq.JValue.GetStringValueType(Newtonsoft.Json.Linq.JTokenType?)", span="564-564"];
m17_308 [cluster="Newtonsoft.Json.Linq.JValue.GetStringValueType(Newtonsoft.Json.Linq.JTokenType?)", file="UnixDateTimeConverter.cs", label="current == null", span="566-566"];
m17_310 [cluster="Newtonsoft.Json.Linq.JValue.GetStringValueType(Newtonsoft.Json.Linq.JTokenType?)", file="UnixDateTimeConverter.cs", label="current.Value", span="569-569"];
m17_314 [cluster="Newtonsoft.Json.Linq.JValue.GetStringValueType(Newtonsoft.Json.Linq.JTokenType?)", file="UnixDateTimeConverter.cs", label="return current.Value;", span="574-574"];
m17_309 [cluster="Newtonsoft.Json.Linq.JValue.GetStringValueType(Newtonsoft.Json.Linq.JTokenType?)", file="UnixDateTimeConverter.cs", label="return JTokenType.String;", span="567-567"];
m17_311 [cluster="Newtonsoft.Json.Linq.JValue.GetStringValueType(Newtonsoft.Json.Linq.JTokenType?)", file="UnixDateTimeConverter.cs", label="JTokenType.Comment", span="571-571"];
m17_315 [cluster="Newtonsoft.Json.Linq.JValue.GetStringValueType(Newtonsoft.Json.Linq.JTokenType?)", file="UnixDateTimeConverter.cs", label="return JTokenType.String;", span="576-576"];
m17_312 [cluster="Newtonsoft.Json.Linq.JValue.GetStringValueType(Newtonsoft.Json.Linq.JTokenType?)", file="UnixDateTimeConverter.cs", label="JTokenType.String", span="572-572"];
m17_313 [cluster="Newtonsoft.Json.Linq.JValue.GetStringValueType(Newtonsoft.Json.Linq.JTokenType?)", file="UnixDateTimeConverter.cs", label="JTokenType.Raw", span="573-573"];
m17_316 [cluster="Newtonsoft.Json.Linq.JValue.GetStringValueType(Newtonsoft.Json.Linq.JTokenType?)", file="UnixDateTimeConverter.cs", label="Exit Newtonsoft.Json.Linq.JValue.GetStringValueType(Newtonsoft.Json.Linq.JTokenType?)", span="564-564"];
m17_508 [cluster="System.Type.GetTypeCode(System.Type)", file="UnixDateTimeConverter.cs", label="Entry System.Type.GetTypeCode(System.Type)", span="0-0"];
m17_385 [cluster="Newtonsoft.Json.JsonWriter.WriteValue(System.DateTimeOffset)", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.JsonWriter.WriteValue(System.DateTimeOffset)", span="950-950"];
m17_155 [cluster="System.TimeSpan.CompareTo(System.TimeSpan)", file="UnixDateTimeConverter.cs", label="Entry System.TimeSpan.CompareTo(System.TimeSpan)", span="0-0"];
m17_246 [cluster="Newtonsoft.Json.Linq.JValue.Operation(System.Linq.Expressions.ExpressionType, object, object, out object)", file="UnixDateTimeConverter.cs", label="ExpressionType.Add", span="474-474"];
m17_148 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.JsonPropertyClassSerialize()", file="UnixDateTimeConverter.cs", label="Assert.AreEqual(test.SweetCakesCount, test2.SweetCakesCount)", span="465-465"];
m17_56 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.JavaScriptConvertSerializer()", file="UnixDateTimeConverter.cs", label="Assert.AreEqual(''Orange'', p.Name)", span="171-171"];
m17_410 [cluster="Newtonsoft.Json.Linq.JValue.GetHashCode()", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.Linq.JValue.GetHashCode()", span="739-739"];
m17_411 [cluster="Newtonsoft.Json.Linq.JValue.GetHashCode()", file="UnixDateTimeConverter.cs", label="_value == null", span="741-741"];
m17_412 [cluster="Newtonsoft.Json.Linq.JValue.GetHashCode()", file="UnixDateTimeConverter.cs", label="return 0;", span="742-742"];
m17_413 [cluster="Newtonsoft.Json.Linq.JValue.GetHashCode()", file="UnixDateTimeConverter.cs", label="return _value.GetHashCode();", span="744-744"];
m17_414 [cluster="Newtonsoft.Json.Linq.JValue.GetHashCode()", file="UnixDateTimeConverter.cs", label="Exit Newtonsoft.Json.Linq.JValue.GetHashCode()", span="739-739"];
m17_34 [cluster="Newtonsoft.Json.Linq.JValue.DeepEquals(Newtonsoft.Json.Linq.JToken)", file="UnixDateTimeConverter.cs", label="other == this", span="180-180"];
m17_208 [cluster="Newtonsoft.Json.Linq.JValue.Operation(System.Linq.Expressions.ExpressionType, object, object, out object)", file="UnixDateTimeConverter.cs", label="ExpressionType.Multiply", span="419-419"];
m17_171 [cluster="Newtonsoft.Json.Linq.JValue.Operation(System.Linq.Expressions.ExpressionType, object, object, out object)", file="UnixDateTimeConverter.cs", label="objA == null || objB == null", span="365-365"];
m17_258 [cluster="Newtonsoft.Json.Linq.JValue.Operation(System.Linq.Expressions.ExpressionType, object, object, out object)", file="UnixDateTimeConverter.cs", label="ExpressionType.Divide", span="486-486"];
m17_25 [cluster="Newtonsoft.Json.Linq.JValue.JValue(System.Uri)", file="UnixDateTimeConverter.cs", label="Exit Newtonsoft.Json.Linq.JValue.JValue(System.Uri)", span="152-152"];
m17_147 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.JsonPropertyClassSerialize()", file="UnixDateTimeConverter.cs", label="Assert.AreEqual(test.Pie, test2.Pie)", span="464-464"];
m17_38 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.TypedObjectDeserialization()", file="UnixDateTimeConverter.cs", label="product.Name = ''Apple''", span="137-137"];
m17_394 [cluster="Newtonsoft.Json.Linq.JValue.ValuesEquals(Newtonsoft.Json.Linq.JValue, Newtonsoft.Json.Linq.JValue)", file="UnixDateTimeConverter.cs", label="return (v1 == v2 || (v1._valueType == v2._valueType && Compare(v1._valueType, v1._value, v2._value) == 0));", span="693-693"];
m17_395 [cluster="Newtonsoft.Json.Linq.JValue.ValuesEquals(Newtonsoft.Json.Linq.JValue, Newtonsoft.Json.Linq.JValue)", file="UnixDateTimeConverter.cs", label="Exit Newtonsoft.Json.Linq.JValue.ValuesEquals(Newtonsoft.Json.Linq.JValue, Newtonsoft.Json.Linq.JValue)", span="691-691"];
m17_435 [cluster="Newtonsoft.Json.Linq.JValue.GetMetaObject(System.Linq.Expressions.Expression)", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.Linq.JValue.GetMetaObject(System.Linq.Expressions.Expression)", span="813-813"];
m17_436 [cluster="Newtonsoft.Json.Linq.JValue.GetMetaObject(System.Linq.Expressions.Expression)", file="UnixDateTimeConverter.cs", label="return new DynamicProxyMetaObject<JValue>(parameter, this, new JValueDynamicProxy(), true);", span="815-815"];
m17_437 [cluster="Newtonsoft.Json.Linq.JValue.GetMetaObject(System.Linq.Expressions.Expression)", file="UnixDateTimeConverter.cs", label="Exit Newtonsoft.Json.Linq.JValue.GetMetaObject(System.Linq.Expressions.Expression)", span="813-813"];
m17_438 [cluster="Newtonsoft.Json.Utilities.DynamicProxyMetaObject<T>.DynamicProxyMetaObject(System.Linq.Expressions.Expression, T, Newtonsoft.Json.Utilities.DynamicProxy<T>, bool)", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.Utilities.DynamicProxyMetaObject<T>.DynamicProxyMetaObject(System.Linq.Expressions.Expression, T, Newtonsoft.Json.Utilities.DynamicProxy<T>, bool)", span="40-40"];
m17_14 [cluster="Newtonsoft.Json.Tests.Store.Store()", color=green, community=0, file="UnixDateTimeConverter.cs", label="Mottos.Add(null)", prediction=9, span="96-96"];
m17_15 [cluster="Newtonsoft.Json.Tests.Store.Store()", file="UnixDateTimeConverter.cs", label="Mottos.Add('' '')", span="97-97"];
m17_144 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.JsonPropertyClassSerialize()", file="UnixDateTimeConverter.cs", label="string jsonText = JavaScriptConvert.SerializeObject(test)", span="458-458"];
m17_236 [cluster="Newtonsoft.Json.Linq.JValue.Operation(System.Linq.Expressions.ExpressionType, object, object, out object)", file="UnixDateTimeConverter.cs", label="ExpressionType.DivideAssign", span="455-455"];
m17_548 [cluster="Newtonsoft.Json.Linq.JValue.System.IConvertible.ToDateTime(System.IFormatProvider)", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.Linq.JValue.System.IConvertible.ToDateTime(System.IFormatProvider)", span="1005-1005"];
m17_549 [cluster="Newtonsoft.Json.Linq.JValue.System.IConvertible.ToDateTime(System.IFormatProvider)", file="UnixDateTimeConverter.cs", label="return (DateTime)this;", span="1007-1007"];
m17_550 [cluster="Newtonsoft.Json.Linq.JValue.System.IConvertible.ToDateTime(System.IFormatProvider)", file="UnixDateTimeConverter.cs", label="Exit Newtonsoft.Json.Linq.JValue.System.IConvertible.ToDateTime(System.IFormatProvider)", span="1005-1005"];
m17_164 [cluster="Newtonsoft.Json.Utilities.MathUtils.ApproxEquals(double, double)", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.Utilities.MathUtils.ApproxEquals(double, double)", span="103-103"];
m17_165 [cluster="Newtonsoft.Json.Linq.JValue.Operation(System.Linq.Expressions.ExpressionType, object, object, out object)", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.Linq.JValue.Operation(System.Linq.Expressions.ExpressionType, object, object, out object)", span="351-351"];
m17_166 [cluster="Newtonsoft.Json.Linq.JValue.Operation(System.Linq.Expressions.ExpressionType, object, object, out object)", file="UnixDateTimeConverter.cs", label="objA is string || objB is string", span="353-353"];
m17_168 [cluster="Newtonsoft.Json.Linq.JValue.Operation(System.Linq.Expressions.ExpressionType, object, object, out object)", file="UnixDateTimeConverter.cs", label="result = ((objA != null) ? objA.ToString() : null) + ((objB != null) ? objB.ToString() : null)", span="357-357"];
m17_169 [cluster="Newtonsoft.Json.Linq.JValue.Operation(System.Linq.Expressions.ExpressionType, object, object, out object)", file="UnixDateTimeConverter.cs", label="return true;", span="358-358"];
m17_167 [cluster="Newtonsoft.Json.Linq.JValue.Operation(System.Linq.Expressions.ExpressionType, object, object, out object)", file="UnixDateTimeConverter.cs", label="operation == ExpressionType.Add || operation == ExpressionType.AddAssign", span="355-355"];
m17_170 [cluster="Newtonsoft.Json.Linq.JValue.Operation(System.Linq.Expressions.ExpressionType, object, object, out object)", file="UnixDateTimeConverter.cs", label="objA is BigInteger || objB is BigInteger", span="363-363"];
m17_145 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.JsonPropertyClassSerialize()", file="UnixDateTimeConverter.cs", label="Assert.AreEqual(@''{''''pie'''':''''Delicious'''',''''pie1'''':''''PieChart!'''',''''sweet_cakes_count'''':2147483647}'', jsonText)", span="460-460"];
m17_53 [cluster="System.Math.Truncate(decimal)", file="UnixDateTimeConverter.cs", label="Entry System.Math.Truncate(decimal)", span="0-0"];
m17_58 [cluster="System.Math.Abs(double)", file="UnixDateTimeConverter.cs", label="Entry System.Math.Abs(double)", span="0-0"];
m17_54 [cluster="System.Math.Abs(decimal)", file="UnixDateTimeConverter.cs", label="Entry System.Math.Abs(decimal)", span="0-0"];
m17_59 [cluster="double.CompareTo(double)", file="UnixDateTimeConverter.cs", label="Entry double.CompareTo(double)", span="0-0"];
m17_238 [cluster="Newtonsoft.Json.Linq.JValue.Operation(System.Linq.Expressions.ExpressionType, object, object, out object)", file="UnixDateTimeConverter.cs", label="return true;", span="457-457"];
m17_376 [cluster="Newtonsoft.Json.JsonWriter.WriteNull()", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.JsonWriter.WriteNull()", span="772-772"];
m17_378 [cluster="Unk.WriteValue", file="UnixDateTimeConverter.cs", label="Entry Unk.WriteValue", span=""];
m17_52 [cluster="Unk.AreEqual", file="UnixDateTimeConverter.cs", label="Entry Unk.AreEqual", span=""];
m17_188 [cluster="Newtonsoft.Json.Linq.JValue.Operation(System.Linq.Expressions.ExpressionType, object, object, out object)", file="UnixDateTimeConverter.cs", label="return true;", span="389-389"];
m17_189 [cluster="Newtonsoft.Json.Linq.JValue.Operation(System.Linq.Expressions.ExpressionType, object, object, out object)", file="UnixDateTimeConverter.cs", label="ExpressionType.Divide", span="390-390"];
m17_190 [cluster="Newtonsoft.Json.Linq.JValue.Operation(System.Linq.Expressions.ExpressionType, object, object, out object)", file="UnixDateTimeConverter.cs", label="ExpressionType.DivideAssign", span="391-391"];
m17_191 [cluster="Newtonsoft.Json.Linq.JValue.Operation(System.Linq.Expressions.ExpressionType, object, object, out object)", file="UnixDateTimeConverter.cs", label="result = i1 / i2", span="392-392"];
m17_192 [cluster="Newtonsoft.Json.Linq.JValue.Operation(System.Linq.Expressions.ExpressionType, object, object, out object)", file="UnixDateTimeConverter.cs", label="return true;", span="393-393"];
m17_193 [cluster="Newtonsoft.Json.Linq.JValue.Operation(System.Linq.Expressions.ExpressionType, object, object, out object)", file="UnixDateTimeConverter.cs", label="objA is ulong || objB is ulong || objA is decimal || objB is decimal", span="398-398"];
m17_194 [cluster="Newtonsoft.Json.Linq.JValue.Operation(System.Linq.Expressions.ExpressionType, object, object, out object)", file="UnixDateTimeConverter.cs", label="objA == null || objB == null", span="400-400"];
m17_195 [cluster="Newtonsoft.Json.Linq.JValue.Operation(System.Linq.Expressions.ExpressionType, object, object, out object)", file="UnixDateTimeConverter.cs", label="result = null", span="402-402"];
m17_198 [cluster="Newtonsoft.Json.Linq.JValue.Operation(System.Linq.Expressions.ExpressionType, object, object, out object)", file="UnixDateTimeConverter.cs", label="decimal d2 = Convert.ToDecimal(objB, CultureInfo.InvariantCulture)", span="407-407"];
m17_201 [cluster="Newtonsoft.Json.Linq.JValue.Operation(System.Linq.Expressions.ExpressionType, object, object, out object)", file="UnixDateTimeConverter.cs", label="ExpressionType.AddAssign", span="412-412"];
m17_202 [cluster="Newtonsoft.Json.Linq.JValue.Operation(System.Linq.Expressions.ExpressionType, object, object, out object)", file="UnixDateTimeConverter.cs", label="result = d1 + d2", span="413-413"];
m17_203 [cluster="Newtonsoft.Json.Linq.JValue.Operation(System.Linq.Expressions.ExpressionType, object, object, out object)", file="UnixDateTimeConverter.cs", label="return true;", span="414-414"];
m17_204 [cluster="Newtonsoft.Json.Linq.JValue.Operation(System.Linq.Expressions.ExpressionType, object, object, out object)", file="UnixDateTimeConverter.cs", label="ExpressionType.Subtract", span="415-415"];
m17_205 [cluster="Newtonsoft.Json.Linq.JValue.Operation(System.Linq.Expressions.ExpressionType, object, object, out object)", file="UnixDateTimeConverter.cs", label="ExpressionType.SubtractAssign", span="416-416"];
m17_196 [cluster="Newtonsoft.Json.Linq.JValue.Operation(System.Linq.Expressions.ExpressionType, object, object, out object)", file="UnixDateTimeConverter.cs", label="return true;", span="403-403"];
m17_199 [cluster="Newtonsoft.Json.Linq.JValue.Operation(System.Linq.Expressions.ExpressionType, object, object, out object)", file="UnixDateTimeConverter.cs", label=operation, span="409-409"];
m17_197 [cluster="Newtonsoft.Json.Linq.JValue.Operation(System.Linq.Expressions.ExpressionType, object, object, out object)", file="UnixDateTimeConverter.cs", label="decimal d1 = Convert.ToDecimal(objA, CultureInfo.InvariantCulture)", span="406-406"];
m17_200 [cluster="Newtonsoft.Json.Linq.JValue.Operation(System.Linq.Expressions.ExpressionType, object, object, out object)", file="UnixDateTimeConverter.cs", label="ExpressionType.Add", span="411-411"];
m17_206 [cluster="Newtonsoft.Json.Linq.JValue.Operation(System.Linq.Expressions.ExpressionType, object, object, out object)", file="UnixDateTimeConverter.cs", label="result = d1 - d2", span="417-417"];
m17_384 [cluster="Newtonsoft.Json.JsonWriter.WriteValue(bool)", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.JsonWriter.WriteValue(bool)", span="875-875"];
m17_6 [cluster="Newtonsoft.Json.Linq.JValue.JValue(long)", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.Linq.JValue.JValue(long)", span="70-70"];
m17_7 [cluster="Newtonsoft.Json.Tests.Product.GetHashCode()", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.Tests.Product.GetHashCode()", span="60-60"];
m17_156 [cluster="string.FormatWith(System.IFormatProvider, object)", file="UnixDateTimeConverter.cs", label="Entry string.FormatWith(System.IFormatProvider, object)", span="47-47"];
m17_524 [cluster="Newtonsoft.Json.Linq.JValue.System.IConvertible.ToUInt16(System.IFormatProvider)", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.Linq.JValue.System.IConvertible.ToUInt16(System.IFormatProvider)", span="965-965"];
m17_525 [cluster="Newtonsoft.Json.Linq.JValue.System.IConvertible.ToUInt16(System.IFormatProvider)", file="UnixDateTimeConverter.cs", label="return (ushort)this;", span="967-967"];
m17_526 [cluster="Newtonsoft.Json.Linq.JValue.System.IConvertible.ToUInt16(System.IFormatProvider)", file="UnixDateTimeConverter.cs", label="Exit Newtonsoft.Json.Linq.JValue.System.IConvertible.ToUInt16(System.IFormatProvider)", span="965-965"];
m17_509 [cluster="Newtonsoft.Json.Linq.JValue.System.IConvertible.ToBoolean(System.IFormatProvider)", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.Linq.JValue.System.IConvertible.ToBoolean(System.IFormatProvider)", span="940-940"];
m17_510 [cluster="Newtonsoft.Json.Linq.JValue.System.IConvertible.ToBoolean(System.IFormatProvider)", file="UnixDateTimeConverter.cs", label="return (bool)this;", span="942-942"];
m17_511 [cluster="Newtonsoft.Json.Linq.JValue.System.IConvertible.ToBoolean(System.IFormatProvider)", file="UnixDateTimeConverter.cs", label="Exit Newtonsoft.Json.Linq.JValue.System.IConvertible.ToBoolean(System.IFormatProvider)", span="940-940"];
m17_439 [cluster="Newtonsoft.Json.Linq.JValue.JValueDynamicProxy.JValueDynamicProxy()", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.Linq.JValue.JValueDynamicProxy.JValueDynamicProxy()", span="818-818"];
m17_174 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.ReadOnlyCollectionSerialize()", file="UnixDateTimeConverter.cs", label="string jsonText = JavaScriptConvert.SerializeObject(r1)", span="524-524"];
m17_175 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.ReadOnlyCollectionSerialize()", file="UnixDateTimeConverter.cs", label="ReadOnlyCollection<int> r2 = JavaScriptConvert.DeserializeObject<ReadOnlyCollection<int>>(jsonText)", span="526-526"];
m17_176 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.ReadOnlyCollectionSerialize()", file="UnixDateTimeConverter.cs", label="CollectionAssert.AreEqual(r1, r2)", span="528-528"];
m17_216 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.Unicode()", file="UnixDateTimeConverter.cs", label="Assert.AreEqual(1, jsonNetResult.Count)", span="628-628"];
m17_217 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.Unicode()", file="UnixDateTimeConverter.cs", label="Assert.AreEqual(dataContractResult[0], jsonNetResult[0])", span="629-629"];
m17_220 [cluster="System.IO.MemoryStream.MemoryStream(byte[])", file="UnixDateTimeConverter.cs", label="Entry System.IO.MemoryStream.MemoryStream(byte[])", span="0-0"];
m17_221 [cluster="System.Text.Encoding.GetBytes(string)", file="UnixDateTimeConverter.cs", label="Entry System.Text.Encoding.GetBytes(string)", span="0-0"];
m17_222 [cluster="Unk.ReadObject", file="UnixDateTimeConverter.cs", label="Entry Unk.ReadObject", span=""];
m17_239 [cluster="System.IO.StreamReader.StreamReader(System.IO.Stream)", file="UnixDateTimeConverter.cs", label="Entry System.IO.StreamReader.StreamReader(System.IO.Stream)", span="0-0"];
m17_243 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.DateTimeOffset()", file="UnixDateTimeConverter.cs", label="string result = JavaScriptConvert.SerializeObject(testDates)", span="668-668"];
m17_244 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.DateTimeOffset()", file="UnixDateTimeConverter.cs", label="Assert.AreEqual(@''[''''\/Date(-59011455539000+0000)\/'''',''''\/Date(946688461000+0000)\/'''',''''\/Date(946641661000+1300)\/'''',''''\/Date(946701061000-0330)\/'''']'', result)", span="669-669"];
m17_245 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.DateTimeOffset()", file="UnixDateTimeConverter.cs", label="Exit Newtonsoft.Json.Tests.JsonSerializerTest.DateTimeOffset()", span="659-659"];
m17_172 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.ReadOnlyCollectionSerialize()", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.Tests.JsonSerializerTest.ReadOnlyCollectionSerialize()", span="520-520"];
m17_173 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.ReadOnlyCollectionSerialize()", file="UnixDateTimeConverter.cs", label="ReadOnlyCollection<int> r1 = new ReadOnlyCollection<int>(new int[] { 0, 1, 2, 3, 4 })", span="522-522"];
m17_179 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.MissingMemberDeserialize()", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.Tests.JsonSerializerTest.MissingMemberDeserialize()", span="553-553"];
m17_183 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.MissingMemberDeserialize()", file="UnixDateTimeConverter.cs", label="product.Price = 3.99M", span="559-559"];
m17_187 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.MissingMemberDeserialize()", file="UnixDateTimeConverter.cs", label="Exit Newtonsoft.Json.Tests.JsonSerializerTest.MissingMemberDeserialize()", span="553-553"];
m17_177 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.ReadOnlyCollectionSerialize()", file="UnixDateTimeConverter.cs", label="Exit Newtonsoft.Json.Tests.JsonSerializerTest.ReadOnlyCollectionSerialize()", span="520-520"];
m17_181 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.MissingMemberDeserialize()", file="UnixDateTimeConverter.cs", label="product.Name = ''Apple''", span="557-557"];
m17_185 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.MissingMemberDeserialize()", file="UnixDateTimeConverter.cs", label="string output = JavaScriptConvert.SerializeObject(product)", span="562-562"];
m17_178 [cluster="System.Collections.ObjectModel.ReadOnlyCollection<T>.ReadOnlyCollection(System.Collections.Generic.IList<T>)", file="UnixDateTimeConverter.cs", label="Entry System.Collections.ObjectModel.ReadOnlyCollection<T>.ReadOnlyCollection(System.Collections.Generic.IList<T>)", span="0-0"];
m17_180 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.MissingMemberDeserialize()", file="UnixDateTimeConverter.cs", label="Product product = new Product()", span="555-555"];
m17_182 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.MissingMemberDeserialize()", file="UnixDateTimeConverter.cs", label="product.Expiry = new DateTime(2008, 12, 28)", span="558-558"];
m17_184 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.MissingMemberDeserialize()", file="UnixDateTimeConverter.cs", label="product.Sizes = new string[] { ''Small'', ''Medium'', ''Large'' }", span="560-560"];
m17_186 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.MissingMemberDeserialize()", file="UnixDateTimeConverter.cs", label="ProductShort deserializedProductShort = (ProductShort)JavaScriptConvert.DeserializeObject(output, typeof(ProductShort))", span="574-574"];
m17_214 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.Unicode()", file="UnixDateTimeConverter.cs", label="List<string> dataContractResult = (List<string>)s.ReadObject(new MemoryStream(Encoding.UTF8.GetBytes(json)))", span="624-624"];
m17_212 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.Unicode()", file="UnixDateTimeConverter.cs", label="string json = @''[''''PRE\u003cPOST'''']''", span="621-621"];
m17_207 [cluster="Newtonsoft.Json.Linq.JValue.Operation(System.Linq.Expressions.ExpressionType, object, object, out object)", file="UnixDateTimeConverter.cs", label="return true;", span="418-418"];
m17_209 [cluster="System.IO.StringReader.StringReader(string)", file="UnixDateTimeConverter.cs", label="Entry System.IO.StringReader.StringReader(string)", span="0-0"];
m17_211 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.Unicode()", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.Tests.JsonSerializerTest.Unicode()", span="619-619"];
m17_213 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.Unicode()", file="UnixDateTimeConverter.cs", label="DataContractJsonSerializer s = new DataContractJsonSerializer(typeof(List<string>))", span="623-623"];
m17_215 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.Unicode()", file="UnixDateTimeConverter.cs", label="List<string> jsonNetResult = JavaScriptConvert.DeserializeObject<List<string>>(json)", span="626-626"];
m17_218 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.Unicode()", file="UnixDateTimeConverter.cs", label="Exit Newtonsoft.Json.Tests.JsonSerializerTest.Unicode()", span="619-619"];
m17_219 [cluster="DataContractJsonSerializer.cstr", file="UnixDateTimeConverter.cs", label="Entry DataContractJsonSerializer.cstr", span=""];
m17_225 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.DateTime()", file="UnixDateTimeConverter.cs", label="string result", span="643-643"];
m17_229 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.DateTime()", file="UnixDateTimeConverter.cs", label="ms.Seek(0, SeekOrigin.Begin)", span="649-649"];
m17_233 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.DateTime()", file="UnixDateTimeConverter.cs", label="Assert.AreEqual(expected, result)", span="655-655"];
m17_237 [cluster="Unk.WriteObject", file="UnixDateTimeConverter.cs", label="Entry Unk.WriteObject", span=""];
m17_223 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.DateTime()", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.Tests.JsonSerializerTest.DateTime()", span="633-633"];
m17_227 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.DateTime()", file="UnixDateTimeConverter.cs", label="DataContractJsonSerializer s = new DataContractJsonSerializer(typeof(List<DateTime>))", span="647-647"];
m17_231 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.DateTime()", file="UnixDateTimeConverter.cs", label="string expected = sr.ReadToEnd()", span="652-652"];
m17_235 [cluster="System.Collections.Generic.List<T>.List()", file="UnixDateTimeConverter.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m17_224 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.DateTime()", file="UnixDateTimeConverter.cs", label="List<DateTime> testDates = new List<DateTime> {\r\n        new DateTime(100, 1, 1, 1, 1, 1, DateTimeKind.Local),\r\n        new DateTime(100, 1, 1, 1, 1, 1, DateTimeKind.Unspecified),\r\n        new DateTime(100, 1, 1, 1, 1, 1, DateTimeKind.Utc),\r\n        new DateTime(2000, 1, 1, 1, 1, 1, DateTimeKind.Local),\r\n        new DateTime(2000, 1, 1, 1, 1, 1, DateTimeKind.Unspecified),\r\n        new DateTime(2000, 1, 1, 1, 1, 1, DateTimeKind.Utc),\r\n      }", span="635-642"];
m17_226 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.DateTime()", file="UnixDateTimeConverter.cs", label="MemoryStream ms = new MemoryStream()", span="646-646"];
m17_228 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.DateTime()", file="UnixDateTimeConverter.cs", label="s.WriteObject(ms, testDates)", span="648-648"];
m17_230 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.DateTime()", file="UnixDateTimeConverter.cs", label="StreamReader sr = new StreamReader(ms)", span="650-650"];
m17_232 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.DateTime()", file="UnixDateTimeConverter.cs", label="result = JavaScriptConvert.SerializeObject(testDates)", span="654-654"];
m17_234 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.DateTime()", file="UnixDateTimeConverter.cs", label="Exit Newtonsoft.Json.Tests.JsonSerializerTest.DateTime()", span="633-633"];
m17_262 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.AnonymousObjectSerialization()", file="UnixDateTimeConverter.cs", label="Assert.AreEqual(@''{''''StringValue'''':''''I am a string'''',''''IntValue'''':2147483647,''''NestedAnonymous'''':{''''NestedValue'''':255},''''NestedArray'''':[1,2],''''Product'''':{''''Name'''':''''TestProduct'''',''''Expiry'''':''''\/Date(946684800000)\/'''',''''Price'''':0,''''Sizes'''':null}}'', json)", span="702-702"];
m17_241 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.DateTimeOffset()", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.Tests.JsonSerializerTest.DateTimeOffset()", span="659-659"];
m17_242 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.DateTimeOffset()", file="UnixDateTimeConverter.cs", label="List<DateTimeOffset> testDates = new List<DateTimeOffset> {\r\n        new DateTimeOffset(new DateTime(100, 1, 1, 1, 1, 1, DateTimeKind.Utc)),\r\n        new DateTimeOffset(2000, 1, 1, 1, 1, 1, TimeSpan.Zero),\r\n        new DateTimeOffset(2000, 1, 1, 1, 1, 1, TimeSpan.FromHours(13)),\r\n        new DateTimeOffset(2000, 1, 1, 1, 1, 1, TimeSpan.FromHours(-3.5)),\r\n      }", span="661-666"];
m17_248 [cluster="System.TimeSpan.FromHours(double)", file="UnixDateTimeConverter.cs", label="Entry System.TimeSpan.FromHours(double)", span="0-0"];
m17_252 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.NonStringKeyDictionary()", file="UnixDateTimeConverter.cs", label="values.Add(int.MinValue, int.MaxValue)", span="677-677"];
m17_256 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.NonStringKeyDictionary()", file="UnixDateTimeConverter.cs", label="CollectionAssert.AreEqual(values, newValues)", span="685-685"];
m17_260 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.AnonymousObjectSerialization()", file="UnixDateTimeConverter.cs", label="var anonymous =\r\n        new\r\n        {\r\n          StringValue = ''I am a string'',\r\n          IntValue = int.MaxValue,\r\n          NestedAnonymous = new { NestedValue = byte.MaxValue },\r\n          NestedArray = new[] { 1, 2 },\r\n          Product = new Product() { Name = ''TestProduct'' }\r\n        }", span="691-699"];
m17_250 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.NonStringKeyDictionary()", file="UnixDateTimeConverter.cs", label="Dictionary<int, int> values = new Dictionary<int, int>()", span="675-675"];
m17_254 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.NonStringKeyDictionary()", file="UnixDateTimeConverter.cs", label="Assert.AreEqual(@''{''''-5'''':6,''''-2147483648'''':2147483647}'', json)", span="681-681"];
m17_247 [cluster="System.DateTimeOffset.DateTimeOffset(int, int, int, int, int, int, System.TimeSpan)", file="UnixDateTimeConverter.cs", label="Entry System.DateTimeOffset.DateTimeOffset(int, int, int, int, int, int, System.TimeSpan)", span="0-0"];
m17_249 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.NonStringKeyDictionary()", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.Tests.JsonSerializerTest.NonStringKeyDictionary()", span="673-673"];
m17_251 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.NonStringKeyDictionary()", file="UnixDateTimeConverter.cs", label="values.Add(-5, 6)", span="676-676"];
m17_253 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.NonStringKeyDictionary()", file="UnixDateTimeConverter.cs", label="string json = JavaScriptConvert.SerializeObject(values)", span="679-679"];
m17_255 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.NonStringKeyDictionary()", file="UnixDateTimeConverter.cs", label="Dictionary<int, int> newValues = JavaScriptConvert.DeserializeObject<Dictionary<int, int>>(json)", span="683-683"];
m17_257 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.NonStringKeyDictionary()", file="UnixDateTimeConverter.cs", label="Exit Newtonsoft.Json.Tests.JsonSerializerTest.NonStringKeyDictionary()", span="673-673"];
m17_259 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.AnonymousObjectSerialization()", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.Tests.JsonSerializerTest.AnonymousObjectSerialization()", span="689-689"];
m17_261 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.AnonymousObjectSerialization()", file="UnixDateTimeConverter.cs", label="string json = JavaScriptConvert.SerializeObject(anonymous)", span="701-701"];
m17_263 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.AnonymousObjectSerialization()", file="UnixDateTimeConverter.cs", label="anonymous = JavaScriptConvert.DeserializeAnonymousType(json, anonymous)", span="704-704"];
m17_264 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.AnonymousObjectSerialization()", file="UnixDateTimeConverter.cs", label="Assert.AreEqual(''I am a string'', anonymous.StringValue)", span="705-705"];
m17_51 [cluster="System.DateTime.DateTime(int, int, int)", file="UnixDateTimeConverter.cs", label="Entry System.DateTime.DateTime(int, int, int)", span="0-0"];
m17_409 [cluster="object.Equals(object)", file="UnixDateTimeConverter.cs", label="Entry object.Equals(object)", span="0-0"];
m17_373 [cluster="Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", span="44-44"];
m17_554 [cluster="Newtonsoft.Json.Linq.JToken.ToObject(System.Type)", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.Linq.JToken.ToObject(System.Type)", span="1690-1690"];
m17_150 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.JsonPropertyClass.JsonPropertyClass()", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.Tests.JsonSerializerTest.JsonPropertyClass.JsonPropertyClass()", span="431-431"];
m17_266 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.AnonymousObjectSerialization()", file="UnixDateTimeConverter.cs", label="Assert.AreEqual(255, anonymous.NestedAnonymous.NestedValue)", span="707-707"];
m17_267 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.AnonymousObjectSerialization()", file="UnixDateTimeConverter.cs", label="Assert.AreEqual(2, anonymous.NestedArray.Length)", span="708-708"];
m17_268 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.AnonymousObjectSerialization()", file="UnixDateTimeConverter.cs", label="Assert.AreEqual(1, anonymous.NestedArray[0])", span="709-709"];
m17_372 [cluster="Newtonsoft.Json.JsonSerializer.CreateDefault()", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.JsonSerializer.CreateDefault()", span="475-475"];
m17_440 [cluster="Newtonsoft.Json.Linq.JValue.JValueDynamicProxy.TryConvert(Newtonsoft.Json.Linq.JValue, System.Dynamic.ConvertBinder, out object)", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.Linq.JValue.JValueDynamicProxy.TryConvert(Newtonsoft.Json.Linq.JValue, System.Dynamic.ConvertBinder, out object)", span="820-820"];
m17_441 [cluster="Newtonsoft.Json.Linq.JValue.JValueDynamicProxy.TryConvert(Newtonsoft.Json.Linq.JValue, System.Dynamic.ConvertBinder, out object)", file="UnixDateTimeConverter.cs", label="binder.Type == typeof(JValue)", span="822-822"];
m17_442 [cluster="Newtonsoft.Json.Linq.JValue.JValueDynamicProxy.TryConvert(Newtonsoft.Json.Linq.JValue, System.Dynamic.ConvertBinder, out object)", file="UnixDateTimeConverter.cs", label="result = instance", span="824-824"];
m17_444 [cluster="Newtonsoft.Json.Linq.JValue.JValueDynamicProxy.TryConvert(Newtonsoft.Json.Linq.JValue, System.Dynamic.ConvertBinder, out object)", file="UnixDateTimeConverter.cs", label="object value = instance.Value", span="828-828"];
m17_447 [cluster="Newtonsoft.Json.Linq.JValue.JValueDynamicProxy.TryConvert(Newtonsoft.Json.Linq.JValue, System.Dynamic.ConvertBinder, out object)", file="UnixDateTimeConverter.cs", label="return ReflectionUtils.IsNullable(binder.Type);", span="833-833"];
m17_448 [cluster="Newtonsoft.Json.Linq.JValue.JValueDynamicProxy.TryConvert(Newtonsoft.Json.Linq.JValue, System.Dynamic.ConvertBinder, out object)", file="UnixDateTimeConverter.cs", label="result = ConvertUtils.Convert(instance.Value, CultureInfo.InvariantCulture, binder.Type)", span="836-836"];
m17_443 [cluster="Newtonsoft.Json.Linq.JValue.JValueDynamicProxy.TryConvert(Newtonsoft.Json.Linq.JValue, System.Dynamic.ConvertBinder, out object)", file="UnixDateTimeConverter.cs", label="return true;", span="825-825"];
m17_445 [cluster="Newtonsoft.Json.Linq.JValue.JValueDynamicProxy.TryConvert(Newtonsoft.Json.Linq.JValue, System.Dynamic.ConvertBinder, out object)", file="UnixDateTimeConverter.cs", label="value == null", span="830-830"];
m17_446 [cluster="Newtonsoft.Json.Linq.JValue.JValueDynamicProxy.TryConvert(Newtonsoft.Json.Linq.JValue, System.Dynamic.ConvertBinder, out object)", file="UnixDateTimeConverter.cs", label="result = null", span="832-832"];
m17_449 [cluster="Newtonsoft.Json.Linq.JValue.JValueDynamicProxy.TryConvert(Newtonsoft.Json.Linq.JValue, System.Dynamic.ConvertBinder, out object)", file="UnixDateTimeConverter.cs", label="return true;", span="837-837"];
m17_450 [cluster="Newtonsoft.Json.Linq.JValue.JValueDynamicProxy.TryConvert(Newtonsoft.Json.Linq.JValue, System.Dynamic.ConvertBinder, out object)", file="UnixDateTimeConverter.cs", label="Exit Newtonsoft.Json.Linq.JValue.JValueDynamicProxy.TryConvert(Newtonsoft.Json.Linq.JValue, System.Dynamic.ConvertBinder, out object)", span="820-820"];
m17_20 [cluster="Newtonsoft.Json.Tests.Store.Store()", file="UnixDateTimeConverter.cs", label="alien.Name = ''Alien''", span="103-103"];
m17_21 [cluster="Newtonsoft.Json.Tests.Store.Store()", file="UnixDateTimeConverter.cs", label="product.Add(rocket)", span="105-105"];
m17_24 [cluster="Newtonsoft.Json.Linq.JValue.JValue(System.Uri)", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.Linq.JValue.JValue(System.Uri)", span="152-152"];
m17_515 [cluster="Newtonsoft.Json.Linq.JValue.System.IConvertible.ToSByte(System.IFormatProvider)", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.Linq.JValue.System.IConvertible.ToSByte(System.IFormatProvider)", span="950-950"];
m17_516 [cluster="Newtonsoft.Json.Linq.JValue.System.IConvertible.ToSByte(System.IFormatProvider)", file="UnixDateTimeConverter.cs", label="return (sbyte)this;", span="952-952"];
m17_517 [cluster="Newtonsoft.Json.Linq.JValue.System.IConvertible.ToSByte(System.IFormatProvider)", file="UnixDateTimeConverter.cs", label="Exit Newtonsoft.Json.Linq.JValue.System.IConvertible.ToSByte(System.IFormatProvider)", span="950-950"];
m17_374 [cluster="Newtonsoft.Json.JsonWriter.WriteComment(string)", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.JsonWriter.WriteComment(string)", span="1237-1237"];
m17_377 [cluster="Newtonsoft.Json.JsonWriter.WriteUndefined()", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.JsonWriter.WriteUndefined()", span="780-780"];
m17_35 [cluster="Newtonsoft.Json.Linq.JValue.DeepEquals(Newtonsoft.Json.Linq.JToken)", file="UnixDateTimeConverter.cs", label="return true;", span="181-181"];
m17_383 [cluster="Newtonsoft.Json.JsonWriter.WriteValue(string)", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.JsonWriter.WriteValue(string)", span="810-810"];
m17_387 [cluster="Newtonsoft.Json.JsonWriter.WriteValue(byte[])", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.JsonWriter.WriteValue(byte[])", span="1188-1188"];
m17_386 [cluster="Newtonsoft.Json.JsonWriter.WriteValue(System.DateTime)", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.JsonWriter.WriteValue(System.DateTime)", span="940-940"];
m17_420 [cluster="Newtonsoft.Json.Linq.JValue.ToString(string)", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.Linq.JValue.ToString(string)", span="768-768"];
m17_421 [cluster="Newtonsoft.Json.Linq.JValue.ToString(string)", file="UnixDateTimeConverter.cs", label="return ToString(format, CultureInfo.CurrentCulture);", span="770-770"];
m17_422 [cluster="Newtonsoft.Json.Linq.JValue.ToString(string)", file="UnixDateTimeConverter.cs", label="Exit Newtonsoft.Json.Linq.JValue.ToString(string)", span="768-768"];
m17_533 [cluster="Newtonsoft.Json.Linq.JValue.System.IConvertible.ToInt64(System.IFormatProvider)", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.Linq.JValue.System.IConvertible.ToInt64(System.IFormatProvider)", span="980-980"];
m17_534 [cluster="Newtonsoft.Json.Linq.JValue.System.IConvertible.ToInt64(System.IFormatProvider)", file="UnixDateTimeConverter.cs", label="return (long)this;", span="982-982"];
m17_535 [cluster="Newtonsoft.Json.Linq.JValue.System.IConvertible.ToInt64(System.IFormatProvider)", file="UnixDateTimeConverter.cs", label="Exit Newtonsoft.Json.Linq.JValue.System.IConvertible.ToInt64(System.IFormatProvider)", span="980-980"];
m17_13 [cluster="Newtonsoft.Json.Linq.JValue.JValue(double)", file="UnixDateTimeConverter.cs", label="Exit Newtonsoft.Json.Linq.JValue.JValue(double)", span="98-98"];
m17_18 [cluster="Newtonsoft.Json.Linq.JValue.JValue(bool)", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.Linq.JValue.JValue(bool)", span="125-125"];
m17_12 [cluster="Newtonsoft.Json.Linq.JValue.JValue(double)", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.Linq.JValue.JValue(double)", span="98-98"];
m17_19 [cluster="Newtonsoft.Json.Linq.JValue.JValue(bool)", file="UnixDateTimeConverter.cs", label="Exit Newtonsoft.Json.Linq.JValue.JValue(bool)", span="125-125"];
m17_143 [cluster="string.CompareOrdinal(string, string)", file="UnixDateTimeConverter.cs", label="Entry string.CompareOrdinal(string, string)", span="0-0"];
m17_142 [cluster="System.Convert.ToString(object, System.IFormatProvider)", file="UnixDateTimeConverter.cs", label="Entry System.Convert.ToString(object, System.IFormatProvider)", span="0-0"];
m17_149 [cluster="System.DateTimeOffset.CompareTo(System.DateTimeOffset)", file="UnixDateTimeConverter.cs", label="Entry System.DateTimeOffset.CompareTo(System.DateTimeOffset)", span="0-0"];
m17_317 [cluster="Newtonsoft.Json.Linq.JValue.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.Linq.JValue.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])", span="613-613"];
m17_318 [cluster="Newtonsoft.Json.Linq.JValue.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])", file="UnixDateTimeConverter.cs", label="converters != null && converters.Length > 0 && _value != null", span="615-615"];
m17_319 [cluster="Newtonsoft.Json.Linq.JValue.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])", file="UnixDateTimeConverter.cs", label="JsonConverter matchingConverter = JsonSerializer.GetMatchingConverter(converters, _value.GetType())", span="617-617"];
m17_321 [cluster="Newtonsoft.Json.Linq.JValue.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])", file="UnixDateTimeConverter.cs", label="matchingConverter.WriteJson(writer, _value, JsonSerializer.CreateDefault())", span="620-620"];
m17_325 [cluster="Newtonsoft.Json.Linq.JValue.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])", file="UnixDateTimeConverter.cs", label="writer.WriteComment((_value != null) ? _value.ToString() : null)", span="628-628"];
m17_328 [cluster="Newtonsoft.Json.Linq.JValue.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])", file="UnixDateTimeConverter.cs", label="writer.WriteRawValue((_value != null) ? _value.ToString() : null)", span="631-631"];
m17_331 [cluster="Newtonsoft.Json.Linq.JValue.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])", file="UnixDateTimeConverter.cs", label="writer.WriteNull()", span="634-634"];
m17_334 [cluster="Newtonsoft.Json.Linq.JValue.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])", file="UnixDateTimeConverter.cs", label="writer.WriteUndefined()", span="637-637"];
m17_338 [cluster="Newtonsoft.Json.Linq.JValue.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])", file="UnixDateTimeConverter.cs", label="writer.WriteValue((BigInteger)_value)", span="642-642"];
m17_339 [cluster="Newtonsoft.Json.Linq.JValue.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])", file="UnixDateTimeConverter.cs", label="writer.WriteValue(Convert.ToInt64(_value, CultureInfo.InvariantCulture))", span="645-645"];
m17_343 [cluster="Newtonsoft.Json.Linq.JValue.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])", file="UnixDateTimeConverter.cs", label="writer.WriteValue((decimal)_value)", span="649-649"];
m17_345 [cluster="Newtonsoft.Json.Linq.JValue.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])", file="UnixDateTimeConverter.cs", label="writer.WriteValue((double)_value)", span="651-651"];
m17_347 [cluster="Newtonsoft.Json.Linq.JValue.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])", file="UnixDateTimeConverter.cs", label="writer.WriteValue((float)_value)", span="653-653"];
m17_348 [cluster="Newtonsoft.Json.Linq.JValue.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])", file="UnixDateTimeConverter.cs", label="writer.WriteValue(Convert.ToDouble(_value, CultureInfo.InvariantCulture))", span="655-655"];
m17_351 [cluster="Newtonsoft.Json.Linq.JValue.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])", file="UnixDateTimeConverter.cs", label="writer.WriteValue((_value != null) ? _value.ToString() : null)", span="658-658"];
m17_354 [cluster="Newtonsoft.Json.Linq.JValue.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])", file="UnixDateTimeConverter.cs", label="writer.WriteValue(Convert.ToBoolean(_value, CultureInfo.InvariantCulture))", span="661-661"];
m17_358 [cluster="Newtonsoft.Json.Linq.JValue.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])", file="UnixDateTimeConverter.cs", label="writer.WriteValue((DateTimeOffset)_value)", span="666-666"];
m17_359 [cluster="Newtonsoft.Json.Linq.JValue.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])", file="UnixDateTimeConverter.cs", label="writer.WriteValue(Convert.ToDateTime(_value, CultureInfo.InvariantCulture))", span="669-669"];
m17_362 [cluster="Newtonsoft.Json.Linq.JValue.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])", file="UnixDateTimeConverter.cs", label="writer.WriteValue((byte[])_value)", span="672-672"];
m17_367 [cluster="Newtonsoft.Json.Linq.JValue.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])", file="UnixDateTimeConverter.cs", label="writer.WriteValue((_value != null) ? _value.ToString() : null)", span="677-677"];
m17_323 [cluster="Newtonsoft.Json.Linq.JValue.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])", file="UnixDateTimeConverter.cs", label=_valueType, span="625-625"];
m17_320 [cluster="Newtonsoft.Json.Linq.JValue.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])", file="UnixDateTimeConverter.cs", label="matchingConverter != null", span="618-618"];
m17_322 [cluster="Newtonsoft.Json.Linq.JValue.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])", file="UnixDateTimeConverter.cs", label="return;", span="621-621"];
m17_324 [cluster="Newtonsoft.Json.Linq.JValue.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])", file="UnixDateTimeConverter.cs", label="JTokenType.Comment", span="627-627"];
m17_327 [cluster="Newtonsoft.Json.Linq.JValue.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])", file="UnixDateTimeConverter.cs", label="JTokenType.Raw", span="630-630"];
m17_330 [cluster="Newtonsoft.Json.Linq.JValue.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])", file="UnixDateTimeConverter.cs", label="JTokenType.Null", span="633-633"];
m17_333 [cluster="Newtonsoft.Json.Linq.JValue.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])", file="UnixDateTimeConverter.cs", label="JTokenType.Undefined", span="636-636"];
m17_336 [cluster="Newtonsoft.Json.Linq.JValue.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])", file="UnixDateTimeConverter.cs", label="JTokenType.Integer", span="639-639"];
m17_341 [cluster="Newtonsoft.Json.Linq.JValue.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])", file="UnixDateTimeConverter.cs", label="JTokenType.Float", span="647-647"];
m17_350 [cluster="Newtonsoft.Json.Linq.JValue.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])", file="UnixDateTimeConverter.cs", label="JTokenType.String", span="657-657"];
m17_353 [cluster="Newtonsoft.Json.Linq.JValue.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])", file="UnixDateTimeConverter.cs", label="JTokenType.Boolean", span="660-660"];
m17_356 [cluster="Newtonsoft.Json.Linq.JValue.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])", file="UnixDateTimeConverter.cs", label="JTokenType.Date", span="663-663"];
m17_361 [cluster="Newtonsoft.Json.Linq.JValue.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])", file="UnixDateTimeConverter.cs", label="JTokenType.Bytes", span="671-671"];
m17_364 [cluster="Newtonsoft.Json.Linq.JValue.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])", file="UnixDateTimeConverter.cs", label="JTokenType.Guid", span="674-674"];
m17_326 [cluster="Newtonsoft.Json.Linq.JValue.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])", file="UnixDateTimeConverter.cs", label="return;", span="629-629"];
m17_329 [cluster="Newtonsoft.Json.Linq.JValue.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])", file="UnixDateTimeConverter.cs", label="return;", span="632-632"];
m17_332 [cluster="Newtonsoft.Json.Linq.JValue.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])", file="UnixDateTimeConverter.cs", label="return;", span="635-635"];
m17_335 [cluster="Newtonsoft.Json.Linq.JValue.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])", file="UnixDateTimeConverter.cs", label="return;", span="638-638"];
m17_337 [cluster="Newtonsoft.Json.Linq.JValue.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])", file="UnixDateTimeConverter.cs", label="_value is BigInteger", span="641-641"];
m17_340 [cluster="Newtonsoft.Json.Linq.JValue.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])", file="UnixDateTimeConverter.cs", label="return;", span="646-646"];
m17_342 [cluster="Newtonsoft.Json.Linq.JValue.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])", file="UnixDateTimeConverter.cs", label="_value is decimal", span="648-648"];
m17_344 [cluster="Newtonsoft.Json.Linq.JValue.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])", file="UnixDateTimeConverter.cs", label="_value is double", span="650-650"];
m17_346 [cluster="Newtonsoft.Json.Linq.JValue.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])", file="UnixDateTimeConverter.cs", label="_value is float", span="652-652"];
m17_349 [cluster="Newtonsoft.Json.Linq.JValue.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])", file="UnixDateTimeConverter.cs", label="return;", span="656-656"];
m17_352 [cluster="Newtonsoft.Json.Linq.JValue.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])", file="UnixDateTimeConverter.cs", label="return;", span="659-659"];
m17_355 [cluster="Newtonsoft.Json.Linq.JValue.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])", file="UnixDateTimeConverter.cs", label="return;", span="662-662"];
m17_357 [cluster="Newtonsoft.Json.Linq.JValue.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])", file="UnixDateTimeConverter.cs", label="_value is DateTimeOffset", span="665-665"];
m17_360 [cluster="Newtonsoft.Json.Linq.JValue.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])", file="UnixDateTimeConverter.cs", label="return;", span="670-670"];
m17_363 [cluster="Newtonsoft.Json.Linq.JValue.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])", file="UnixDateTimeConverter.cs", label="return;", span="673-673"];
m17_365 [cluster="Newtonsoft.Json.Linq.JValue.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])", file="UnixDateTimeConverter.cs", label="JTokenType.Uri", span="675-675"];
m17_366 [cluster="Newtonsoft.Json.Linq.JValue.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])", file="UnixDateTimeConverter.cs", label="JTokenType.TimeSpan", span="676-676"];
m17_368 [cluster="Newtonsoft.Json.Linq.JValue.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])", file="UnixDateTimeConverter.cs", label="return;", span="678-678"];
m17_370 [cluster="Newtonsoft.Json.Linq.JValue.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])", file="UnixDateTimeConverter.cs", label="throw MiscellaneousUtils.CreateArgumentOutOfRangeException(''TokenType'', _valueType, ''Unexpected token type.'');", span="681-681"];
m17_369 [cluster="Newtonsoft.Json.Linq.JValue.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])", file="UnixDateTimeConverter.cs", label="Exit Newtonsoft.Json.Linq.JValue.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])", span="613-613"];
m17_451 [cluster="Newtonsoft.Json.Utilities.ReflectionUtils.IsNullable(System.Type)", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.IsNullable(System.Type)", span="237-237"];
m17_307 [cluster="object.GetType()", file="UnixDateTimeConverter.cs", label="Entry object.GetType()", span="0-0"];
m17_39 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.TypedObjectDeserialization()", file="UnixDateTimeConverter.cs", label="product.Expiry = new DateTime(2008, 12, 28)", span="138-138"];
m17_40 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.TypedObjectDeserialization()", file="UnixDateTimeConverter.cs", label="product.Price = 3.99M", span="139-139"];
m17_43 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.TypedObjectDeserialization()", file="UnixDateTimeConverter.cs", label="Product deserializedProduct = (Product)JavaScriptConvert.DeserializeObject(output, typeof(Product))", span="154-154"];
m17_44 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.TypedObjectDeserialization()", file="UnixDateTimeConverter.cs", label="Assert.AreEqual(''Apple'', deserializedProduct.Name)", span="156-156"];
m17_46 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.TypedObjectDeserialization()", file="UnixDateTimeConverter.cs", label="Assert.AreEqual(3.99, deserializedProduct.Price)", span="158-158"];
m17_47 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.TypedObjectDeserialization()", file="UnixDateTimeConverter.cs", label="Assert.AreEqual(''Small'', deserializedProduct.Sizes[0])", span="159-159"];
m17_41 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.TypedObjectDeserialization()", file="UnixDateTimeConverter.cs", label="product.Sizes = new string[] { ''Small'', ''Medium'', ''Large'' }", span="140-140"];
m17_42 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.TypedObjectDeserialization()", file="UnixDateTimeConverter.cs", label="string output = JavaScriptConvert.SerializeObject(product)", span="142-142"];
m17_49 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.TypedObjectDeserialization()", file="UnixDateTimeConverter.cs", label="Assert.AreEqual(''Large'', deserializedProduct.Sizes[2])", span="161-161"];
m17_45 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.TypedObjectDeserialization()", file="UnixDateTimeConverter.cs", label="Assert.AreEqual(new DateTime(2008, 12, 28), deserializedProduct.Expiry)", span="157-157"];
m17_48 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.TypedObjectDeserialization()", file="UnixDateTimeConverter.cs", label="Assert.AreEqual(''Medium'', deserializedProduct.Sizes[1])", span="160-160"];
m17_50 [cluster="Newtonsoft.Json.Tests.JsonSerializerTest.TypedObjectDeserialization()", file="UnixDateTimeConverter.cs", label="Exit Newtonsoft.Json.Tests.JsonSerializerTest.TypedObjectDeserialization()", span="133-133"];
m17_393 [cluster="System.Enum.GetHashCode()", file="UnixDateTimeConverter.cs", label="Entry System.Enum.GetHashCode()", span="0-0"];
m17_8 [cluster="Newtonsoft.Json.Tests.Product.GetHashCode()", file="UnixDateTimeConverter.cs", label="return (Name ?? string.Empty).GetHashCode();", span="62-62"];
m17_9 [cluster="Newtonsoft.Json.Tests.Product.GetHashCode()", file="UnixDateTimeConverter.cs", label="Exit Newtonsoft.Json.Tests.Product.GetHashCode()", span="60-60"];
m17_269 [cluster="Newtonsoft.Json.Linq.JValue.CreateComment(string)", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.Linq.JValue.CreateComment(string)", span="508-508"];
m17_270 [cluster="Newtonsoft.Json.Linq.JValue.CreateComment(string)", file="UnixDateTimeConverter.cs", label="return new JValue(value, JTokenType.Comment);", span="510-510"];
m17_271 [cluster="Newtonsoft.Json.Linq.JValue.CreateComment(string)", file="UnixDateTimeConverter.cs", label="Exit Newtonsoft.Json.Linq.JValue.CreateComment(string)", span="508-508"];
m17_154 [cluster="System.Collections.Generic.Comparer<T>.Compare(T, T)", file="UnixDateTimeConverter.cs", label="Entry System.Collections.Generic.Comparer<T>.Compare(T, T)", span="0-0"];
m17_392 [cluster="object.GetHashCode()", file="UnixDateTimeConverter.cs", label="Entry object.GetHashCode()", span="0-0"];
m17_521 [cluster="Newtonsoft.Json.Linq.JValue.System.IConvertible.ToInt16(System.IFormatProvider)", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.Linq.JValue.System.IConvertible.ToInt16(System.IFormatProvider)", span="960-960"];
m17_522 [cluster="Newtonsoft.Json.Linq.JValue.System.IConvertible.ToInt16(System.IFormatProvider)", file="UnixDateTimeConverter.cs", label="return (short)this;", span="962-962"];
m17_523 [cluster="Newtonsoft.Json.Linq.JValue.System.IConvertible.ToInt16(System.IFormatProvider)", file="UnixDateTimeConverter.cs", label="Exit Newtonsoft.Json.Linq.JValue.System.IConvertible.ToInt16(System.IFormatProvider)", span="960-960"];
m17_424 [cluster="Newtonsoft.Json.Linq.JValue.ToString(System.IFormatProvider)", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.Linq.JValue.ToString(System.IFormatProvider)", span="780-780"];
m17_425 [cluster="Newtonsoft.Json.Linq.JValue.ToString(System.IFormatProvider)", file="UnixDateTimeConverter.cs", label="return ToString(null, formatProvider);", span="782-782"];
m17_426 [cluster="Newtonsoft.Json.Linq.JValue.ToString(System.IFormatProvider)", file="UnixDateTimeConverter.cs", label="Exit Newtonsoft.Json.Linq.JValue.ToString(System.IFormatProvider)", span="780-780"];
m17_388 [cluster="Newtonsoft.Json.Linq.JValue.GetDeepHashCode()", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.Linq.JValue.GetDeepHashCode()", span="684-684"];
m17_389 [cluster="Newtonsoft.Json.Linq.JValue.GetDeepHashCode()", file="UnixDateTimeConverter.cs", label="int valueHashCode = (_value != null) ? _value.GetHashCode() : 0", span="686-686"];
m17_390 [cluster="Newtonsoft.Json.Linq.JValue.GetDeepHashCode()", file="UnixDateTimeConverter.cs", label="return _valueType.GetHashCode() ^ valueHashCode;", span="688-688"];
m17_391 [cluster="Newtonsoft.Json.Linq.JValue.GetDeepHashCode()", file="UnixDateTimeConverter.cs", label="Exit Newtonsoft.Json.Linq.JValue.GetDeepHashCode()", span="684-684"];
m17_551 [cluster="Newtonsoft.Json.Linq.JValue.System.IConvertible.ToType(System.Type, System.IFormatProvider)", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.Linq.JValue.System.IConvertible.ToType(System.Type, System.IFormatProvider)", span="1010-1010"];
m17_552 [cluster="Newtonsoft.Json.Linq.JValue.System.IConvertible.ToType(System.Type, System.IFormatProvider)", file="UnixDateTimeConverter.cs", label="return ToObject(conversionType);", span="1012-1012"];
m17_553 [cluster="Newtonsoft.Json.Linq.JValue.System.IConvertible.ToType(System.Type, System.IFormatProvider)", file="UnixDateTimeConverter.cs", label="Exit Newtonsoft.Json.Linq.JValue.System.IConvertible.ToType(System.Type, System.IFormatProvider)", span="1010-1010"];
m17_518 [cluster="Newtonsoft.Json.Linq.JValue.System.IConvertible.ToByte(System.IFormatProvider)", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.Linq.JValue.System.IConvertible.ToByte(System.IFormatProvider)", span="955-955"];
m17_519 [cluster="Newtonsoft.Json.Linq.JValue.System.IConvertible.ToByte(System.IFormatProvider)", file="UnixDateTimeConverter.cs", label="return (byte)this;", span="957-957"];
m17_520 [cluster="Newtonsoft.Json.Linq.JValue.System.IConvertible.ToByte(System.IFormatProvider)", file="UnixDateTimeConverter.cs", label="Exit Newtonsoft.Json.Linq.JValue.System.IConvertible.ToByte(System.IFormatProvider)", span="955-955"];
m17_494 [cluster="Newtonsoft.Json.Linq.JValue.CompareTo(Newtonsoft.Json.Linq.JValue)", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.Linq.JValue.CompareTo(Newtonsoft.Json.Linq.JValue)", span="914-914"];
m17_495 [cluster="Newtonsoft.Json.Linq.JValue.CompareTo(Newtonsoft.Json.Linq.JValue)", file="UnixDateTimeConverter.cs", label="obj == null", span="916-916"];
m17_497 [cluster="Newtonsoft.Json.Linq.JValue.CompareTo(Newtonsoft.Json.Linq.JValue)", file="UnixDateTimeConverter.cs", label="return Compare(_valueType, _value, obj._value);", span="919-919"];
m17_496 [cluster="Newtonsoft.Json.Linq.JValue.CompareTo(Newtonsoft.Json.Linq.JValue)", file="UnixDateTimeConverter.cs", label="return 1;", span="917-917"];
m17_498 [cluster="Newtonsoft.Json.Linq.JValue.CompareTo(Newtonsoft.Json.Linq.JValue)", file="UnixDateTimeConverter.cs", label="Exit Newtonsoft.Json.Linq.JValue.CompareTo(Newtonsoft.Json.Linq.JValue)", span="914-914"];
m17_36 [cluster="Newtonsoft.Json.Linq.JValue.DeepEquals(Newtonsoft.Json.Linq.JToken)", file="UnixDateTimeConverter.cs", label="return ValuesEquals(this, other);", span="183-183"];
m17_37 [cluster="Newtonsoft.Json.Linq.JValue.DeepEquals(Newtonsoft.Json.Linq.JToken)", file="UnixDateTimeConverter.cs", label="Exit Newtonsoft.Json.Linq.JValue.DeepEquals(Newtonsoft.Json.Linq.JToken)", span="175-175"];
m17_381 [cluster="Newtonsoft.Json.JsonWriter.WriteValue(double)", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.JsonWriter.WriteValue(double)", span="866-866"];
m17_33 [cluster="Newtonsoft.Json.JavaScriptConvert.SerializeObject(object)", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.JavaScriptConvert.SerializeObject(object)", span="372-372"];
m17_401 [cluster="Newtonsoft.Json.Linq.JValue.Equals(object)", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.Linq.JValue.Equals(object)", span="721-721"];
m17_402 [cluster="Newtonsoft.Json.Linq.JValue.Equals(object)", file="UnixDateTimeConverter.cs", label="obj == null", span="723-723"];
m17_404 [cluster="Newtonsoft.Json.Linq.JValue.Equals(object)", file="UnixDateTimeConverter.cs", label="JValue otherValue = obj as JValue", span="726-726"];
m17_407 [cluster="Newtonsoft.Json.Linq.JValue.Equals(object)", file="UnixDateTimeConverter.cs", label="return base.Equals(obj);", span="730-730"];
m17_403 [cluster="Newtonsoft.Json.Linq.JValue.Equals(object)", file="UnixDateTimeConverter.cs", label="return false;", span="724-724"];
m17_405 [cluster="Newtonsoft.Json.Linq.JValue.Equals(object)", file="UnixDateTimeConverter.cs", label="otherValue != null", span="727-727"];
m17_406 [cluster="Newtonsoft.Json.Linq.JValue.Equals(object)", file="UnixDateTimeConverter.cs", label="return Equals(otherValue);", span="728-728"];
m17_408 [cluster="Newtonsoft.Json.Linq.JValue.Equals(object)", file="UnixDateTimeConverter.cs", label="Exit Newtonsoft.Json.Linq.JValue.Equals(object)", span="721-721"];
m17_415 [cluster="Newtonsoft.Json.Linq.JValue.ToString()", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.Linq.JValue.ToString()", span="753-753"];
m17_416 [cluster="Newtonsoft.Json.Linq.JValue.ToString()", file="UnixDateTimeConverter.cs", label="_value == null", span="755-755"];
m17_417 [cluster="Newtonsoft.Json.Linq.JValue.ToString()", file="UnixDateTimeConverter.cs", label="return string.Empty;", span="756-756"];
m17_418 [cluster="Newtonsoft.Json.Linq.JValue.ToString()", file="UnixDateTimeConverter.cs", label="return _value.ToString();", span="758-758"];
m17_419 [cluster="Newtonsoft.Json.Linq.JValue.ToString()", file="UnixDateTimeConverter.cs", label="Exit Newtonsoft.Json.Linq.JValue.ToString()", span="753-753"];
m17_452 [cluster="Newtonsoft.Json.Utilities.ConvertUtils.Convert(object, System.Globalization.CultureInfo, System.Type)", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.Utilities.ConvertUtils.Convert(object, System.Globalization.CultureInfo, System.Type)", span="354-354"];
m17_488 [cluster="Newtonsoft.Json.Linq.JValue.System.IComparable.CompareTo(object)", file="UnixDateTimeConverter.cs", label="Entry Newtonsoft.Json.Linq.JValue.System.IComparable.CompareTo(object)", span="886-886"];
m17_489 [cluster="Newtonsoft.Json.Linq.JValue.System.IComparable.CompareTo(object)", file="UnixDateTimeConverter.cs", label="obj == null", span="888-888"];
m17_491 [cluster="Newtonsoft.Json.Linq.JValue.System.IComparable.CompareTo(object)", file="UnixDateTimeConverter.cs", label="object otherValue = (obj is JValue) ? ((JValue)obj).Value : obj", span="891-891"];
m17_490 [cluster="Newtonsoft.Json.Linq.JValue.System.IComparable.CompareTo(object)", file="UnixDateTimeConverter.cs", label="return 1;", span="889-889"];
m17_492 [cluster="Newtonsoft.Json.Linq.JValue.System.IComparable.CompareTo(object)", file="UnixDateTimeConverter.cs", label="return Compare(_valueType, _value, otherValue);", span="893-893"];
m17_493 [cluster="Newtonsoft.Json.Linq.JValue.System.IComparable.CompareTo(object)", file="UnixDateTimeConverter.cs", label="Exit Newtonsoft.Json.Linq.JValue.System.IComparable.CompareTo(object)", span="886-886"];
m17_555 [file="UnixDateTimeConverter.cs", label="Newtonsoft.Json.Linq.JValue", span=""];
m18_80 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.DeserializeNullToNullable()", file="UnixDateTimeConverterTests.cs", label="Entry Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.DeserializeNullToNullable()", span="172-172"];
m18_81 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.DeserializeNullToNullable()", file="UnixDateTimeConverterTests.cs", label="DateTime? result = JsonConvert.DeserializeObject<DateTime?>(''null'', new UnixDateTimeConverter())", span="174-174"];
m18_82 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.DeserializeNullToNullable()", file="UnixDateTimeConverterTests.cs", label="Assert.IsNull(result)", span="176-176"];
m18_83 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.DeserializeNullToNullable()", file="UnixDateTimeConverterTests.cs", label="Exit Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.DeserializeNullToNullable()", span="172-172"];
m18_85 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.DeserializeInvalidValue()", file="UnixDateTimeConverterTests.cs", label="Entry Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.DeserializeInvalidValue()", span="180-180"];
m18_86 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.DeserializeInvalidValue()", file="UnixDateTimeConverterTests.cs", label="ExceptionAssert.Throws<JsonSerializationException>(\r\n                () => JsonConvert.DeserializeObject<DateTime>(''-1'', new UnixDateTimeConverter()),\r\n                ''Cannot convert value that is before Unix epoch of 00:00:00 UTC on 1 January 1970 to System.DateTime. Path '', line 1, position 2.''\r\n            )", span="182-185"];
m18_87 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.DeserializeInvalidValue()", file="UnixDateTimeConverterTests.cs", label="Exit Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.DeserializeInvalidValue()", span="180-180"];
m18_6 [cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, params Newtonsoft.Json.JsonConverter[])", file="UnixDateTimeConverterTests.cs", label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object, params Newtonsoft.Json.JsonConverter[])", span="548-548"];
m18_14 [cluster="System.DateTime.ToUniversalTime()", file="UnixDateTimeConverterTests.cs", label="Entry System.DateTime.ToUniversalTime()", span="0-0"];
m18_58 [cluster="Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string, params Newtonsoft.Json.JsonConverter[])", file="UnixDateTimeConverterTests.cs", label="Entry Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string, params Newtonsoft.Json.JsonConverter[])", span="751-751"];
m18_7 [cluster="Unk.AreEqual", file="UnixDateTimeConverterTests.cs", label="Entry Unk.AreEqual", span=""];
m18_66 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.DeserializeStringToDateTimeOffset()", file="UnixDateTimeConverterTests.cs", label="Entry Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.DeserializeStringToDateTimeOffset()", span="146-146"];
m18_68 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.DeserializeStringToDateTimeOffset()", file="UnixDateTimeConverterTests.cs", label="Assert.AreEqual(new DateTimeOffset(2018, 1, 1, 21, 1, 16, TimeSpan.Zero), result)", span="150-150"];
m18_67 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.DeserializeStringToDateTimeOffset()", file="UnixDateTimeConverterTests.cs", label="DateTimeOffset result = JsonConvert.DeserializeObject<DateTimeOffset>(@''''''1514840476'''''', new UnixDateTimeConverter())", span="148-148"];
m18_69 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.DeserializeStringToDateTimeOffset()", file="UnixDateTimeConverterTests.cs", label="Exit Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.DeserializeStringToDateTimeOffset()", span="146-146"];
m18_41 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.SerializeNullableDateTimeClass()", file="UnixDateTimeConverterTests.cs", label="Entry Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.SerializeNullableDateTimeClass()", span="96-96"];
m18_45 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.SerializeNullableDateTimeClass()", file="UnixDateTimeConverterTests.cs", label="Assert.AreEqual(@''{''''PreField'''':null,''''DateTimeField'''':null,''''DateTimeOffsetField'''':null,''''PostField'''':null}'', result)", span="108-108"];
m18_48 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.SerializeNullableDateTimeClass()", file="UnixDateTimeConverterTests.cs", label="Assert.AreEqual(@''{''''PreField'''':null,''''DateTimeField'''':1514840476,''''DateTimeOffsetField'''':2750778,''''PostField'''':null}'', result)", span="117-117"];
m18_43 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.SerializeNullableDateTimeClass()", file="UnixDateTimeConverterTests.cs", label="UnixDateTimeConverter converter = new UnixDateTimeConverter()", span="104-104"];
m18_44 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.SerializeNullableDateTimeClass()", file="UnixDateTimeConverterTests.cs", label="string result = JsonConvert.SerializeObject(t, converter)", span="106-106"];
m18_47 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.SerializeNullableDateTimeClass()", file="UnixDateTimeConverterTests.cs", label="result = JsonConvert.SerializeObject(t, converter)", span="116-116"];
m18_46 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.SerializeNullableDateTimeClass()", file="UnixDateTimeConverterTests.cs", label="t = new NullableDateTimeTestClass\r\n            {\r\n                DateTimeField = new DateTime(2018, 1, 1, 21, 1, 16, DateTimeKind.Utc),\r\n                DateTimeOffsetField = new DateTimeOffset(1970, 2, 1, 20, 6, 18, TimeSpan.Zero)\r\n            }", span="110-114"];
m18_42 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.SerializeNullableDateTimeClass()", file="UnixDateTimeConverterTests.cs", label="NullableDateTimeTestClass t = new NullableDateTimeTestClass\r\n            {\r\n                DateTimeField = null,\r\n                DateTimeOffsetField = null\r\n            }", span="98-102"];
m18_49 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.SerializeNullableDateTimeClass()", file="UnixDateTimeConverterTests.cs", label="Exit Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.SerializeNullableDateTimeClass()", span="96-96"];
m18_8 [cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting)", file="UnixDateTimeConverterTests.cs", label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting)", span="525-525"];
m18_10 [cluster="Unk.AreEqual", color=green, community=0, file="UnixDateTimeConverterTests.cs", label="Entry Unk.AreEqual", prediction=10, span=""];
m18_9 [cluster="System.Console.WriteLine(string)", file="UnixDateTimeConverterTests.cs", label="Entry System.Console.WriteLine(string)", span="0-0"];
m18_11 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.SerializeDateTimeNow()", file="UnixDateTimeConverterTests.cs", label="string result = JsonConvert.SerializeObject(now, new UnixDateTimeConverter())", span="59-59"];
m18_12 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.SerializeDateTimeNow()", color=green, community=0, file="UnixDateTimeConverterTests.cs", label="Assert.AreEqual(nowTicks + '''', result)", prediction=10, span="61-61"];
m18_13 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.SerializeDateTimeNow()", file="UnixDateTimeConverterTests.cs", label="Exit Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.SerializeDateTimeNow()", span="54-54"];
m18_84 [cluster="Unk.IsNull", file="UnixDateTimeConverterTests.cs", label="Entry Unk.IsNull", span=""];
m18_40 [cluster="System.TimeSpan.FromHours(double)", file="UnixDateTimeConverterTests.cs", label="Entry System.TimeSpan.FromHours(double)", span="0-0"];
m18_5 [cluster="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.JsonObjectAttributeOptIn.Example()", file="UnixDateTimeConverterTests.cs", label="Exit Newtonsoft.Json.Tests.Documentation.Samples.Serializer.JsonObjectAttributeOptIn.Example()", span="53-53"];
m18_59 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.DeserializeDateTimeOffset()", file="UnixDateTimeConverterTests.cs", label="Entry Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.DeserializeDateTimeOffset()", span="133-133"];
m18_64 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.DeserializeDateTimeOffset()", file="UnixDateTimeConverterTests.cs", label="Assert.AreEqual(new DateTimeOffset(1970, 2, 1, 20, 6, 18, TimeSpan.Zero), result)", span="142-142"];
m18_60 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.DeserializeDateTimeOffset()", file="UnixDateTimeConverterTests.cs", label="UnixDateTimeConverter converter = new UnixDateTimeConverter()", span="135-135"];
m18_62 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.DeserializeDateTimeOffset()", file="UnixDateTimeConverterTests.cs", label="string json = JsonConvert.SerializeObject(d, converter)", span="138-138"];
m18_63 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.DeserializeDateTimeOffset()", file="UnixDateTimeConverterTests.cs", label="DateTimeOffset result = JsonConvert.DeserializeObject<DateTimeOffset>(json, converter)", span="140-140"];
m18_61 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.DeserializeDateTimeOffset()", file="UnixDateTimeConverterTests.cs", label="DateTimeOffset d = new DateTimeOffset(1970, 2, 1, 20, 6, 18, TimeSpan.Zero)", span="136-136"];
m18_65 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.DeserializeDateTimeOffset()", file="UnixDateTimeConverterTests.cs", label="Exit Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.DeserializeDateTimeOffset()", span="133-133"];
m18_120 [cluster="Newtonsoft.Json.Tests.Converters.UnixConverterDictionary<T>.UnixConverterDictionary()", file="UnixDateTimeConverterTests.cs", label="Entry Newtonsoft.Json.Tests.Converters.UnixConverterDictionary<T>.UnixConverterDictionary()", span="271-271"];
m18_0 [cluster="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.JsonObjectAttributeOptIn.Example()", file="UnixDateTimeConverterTests.cs", label="Entry Newtonsoft.Json.Tests.Documentation.Samples.Serializer.JsonObjectAttributeOptIn.Example()", span="53-53"];
m18_3 [cluster="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.JsonObjectAttributeOptIn.Example()", file="UnixDateTimeConverterTests.cs", label="Console.WriteLine(json)", span="65-65"];
m18_2 [cluster="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.JsonObjectAttributeOptIn.Example()", file="UnixDateTimeConverterTests.cs", label="string json = JsonConvert.SerializeObject(file, Formatting.Indented)", span="63-63"];
m18_4 [cluster="Newtonsoft.Json.Tests.Documentation.Samples.Serializer.JsonObjectAttributeOptIn.Example()", file="UnixDateTimeConverterTests.cs", label="Assert.AreEqual(@''{\r\n  ''''Name'''': ''''ImportantLegalDocuments.docx'''',\r\n  ''''Size'''': 51200\r\n}'', json)", span="72-75"];
m18_23 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.WriteJsonInvalidType()", file="UnixDateTimeConverterTests.cs", label="Entry Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.WriteJsonInvalidType()", span="74-74"];
m18_24 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.WriteJsonInvalidType()", file="UnixDateTimeConverterTests.cs", label="UnixDateTimeConverter converter = new UnixDateTimeConverter()", span="76-76"];
m18_25 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.WriteJsonInvalidType()", file="UnixDateTimeConverterTests.cs", label="ExceptionAssert.Throws<JsonSerializationException>(\r\n                () => converter.WriteJson(new JTokenWriter(), new object(), new JsonSerializer()),\r\n                ''Expected date object value.''\r\n            )", span="78-81"];
m18_26 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.WriteJsonInvalidType()", file="UnixDateTimeConverterTests.cs", label="Exit Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.WriteJsonInvalidType()", span="74-74"];
m18_16 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.SerializeInvalidDate()", file="UnixDateTimeConverterTests.cs", label="Entry Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.SerializeInvalidDate()", span="65-65"];
m18_17 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.SerializeInvalidDate()", file="UnixDateTimeConverterTests.cs", label="ExceptionAssert.Throws<JsonSerializationException>(\r\n                () => JsonConvert.SerializeObject(new DateTime(1964, 2, 7), new UnixDateTimeConverter()),\r\n                ''Cannot convert date value that is before Unix epoch of 00:00:00 UTC on 1 January 1970.''\r\n            )", span="67-70"];
m18_18 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.SerializeInvalidDate()", file="UnixDateTimeConverterTests.cs", label="Exit Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.SerializeInvalidDate()", span="65-65"];
m18_50 [cluster="Newtonsoft.Json.Tests.TestObjects.NullableDateTimeTestClass.NullableDateTimeTestClass()", file="UnixDateTimeConverterTests.cs", label="Entry Newtonsoft.Json.Tests.TestObjects.NullableDateTimeTestClass.NullableDateTimeTestClass()", span="33-33"];
m18_76 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.DeserializeIntegerToDateTime()", file="UnixDateTimeConverterTests.cs", label="Entry Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.DeserializeIntegerToDateTime()", span="164-164"];
m18_78 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.DeserializeIntegerToDateTime()", file="UnixDateTimeConverterTests.cs", label="Assert.AreEqual(new DateTime(2018, 1, 1, 21, 1, 16, DateTimeKind.Utc), result)", span="168-168"];
m18_77 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.DeserializeIntegerToDateTime()", file="UnixDateTimeConverterTests.cs", label="DateTime result = JsonConvert.DeserializeObject<DateTime>(''1514840476'', new UnixDateTimeConverter())", span="166-166"];
m18_79 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.DeserializeIntegerToDateTime()", file="UnixDateTimeConverterTests.cs", label="Exit Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.DeserializeIntegerToDateTime()", span="164-164"];
m18_106 [cluster="Newtonsoft.Json.Tests.Converters.UnixConverterList<T>.UnixConverterList()", file="UnixDateTimeConverterTests.cs", label="Entry Newtonsoft.Json.Tests.Converters.UnixConverterList<T>.UnixConverterList()", span="268-268"];
m18_111 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.ConverterDictionary()", file="UnixDateTimeConverterTests.cs", label="Entry Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.ConverterDictionary()", span="220-220"];
m18_117 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.ConverterDictionary()", file="UnixDateTimeConverterTests.cs", label="Assert.AreEqual(new DateTime(1970, 1, 1, 0, 0, 3, DateTimeKind.Utc), l2[''First''])", span="237-237"];
m18_118 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.ConverterDictionary()", file="UnixDateTimeConverterTests.cs", label="Assert.AreEqual(new DateTime(2018, 1, 1, 21, 1, 16, DateTimeKind.Utc), l2[''Second''])", span="238-238"];
m18_115 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.ConverterDictionary()", file="UnixDateTimeConverterTests.cs", label="UnixConverterDictionary<object> l2 = JsonConvert.DeserializeObject<UnixConverterDictionary<object>>(json)", span="234-234"];
m18_116 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.ConverterDictionary()", file="UnixDateTimeConverterTests.cs", label="Assert.IsNotNull(l2)", span="235-235"];
m18_112 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.ConverterDictionary()", file="UnixDateTimeConverterTests.cs", label="UnixConverterDictionary<object> l1 = new UnixConverterDictionary<object>\r\n            {\r\n                {''First'', new DateTime(1970, 1, 1, 0, 0, 3, DateTimeKind.Utc)},\r\n                {''Second'', new DateTime(2018, 1, 1, 21, 1, 16, DateTimeKind.Utc)},\r\n            }", span="222-226"];
m18_113 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.ConverterDictionary()", file="UnixDateTimeConverterTests.cs", label="string json = JsonConvert.SerializeObject(l1, Formatting.Indented)", span="228-228"];
m18_114 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.ConverterDictionary()", file="UnixDateTimeConverterTests.cs", label="StringAssert.AreEqual(@''{\r\n  ''''First'''': 3,\r\n  ''''Second'''': 1514840476\r\n}'', json)", span="229-232"];
m18_119 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.ConverterDictionary()", file="UnixDateTimeConverterTests.cs", label="Exit Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.ConverterDictionary()", span="220-220"];
m18_34 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.SerializeDateTimeOffset()", file="UnixDateTimeConverterTests.cs", label="Entry Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.SerializeDateTimeOffset()", span="86-86"];
m18_37 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.SerializeDateTimeOffset()", file="UnixDateTimeConverterTests.cs", label="Assert.AreEqual(''1514840476'', result)", span="92-92"];
m18_36 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.SerializeDateTimeOffset()", file="UnixDateTimeConverterTests.cs", label="string result = JsonConvert.SerializeObject(now, new UnixDateTimeConverter())", span="90-90"];
m18_35 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.SerializeDateTimeOffset()", file="UnixDateTimeConverterTests.cs", label="DateTimeOffset now = new DateTimeOffset(2018, 1, 1, 16, 1, 16, TimeSpan.FromHours(-5))", span="88-88"];
m18_38 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.SerializeDateTimeOffset()", file="UnixDateTimeConverterTests.cs", label="Exit Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.SerializeDateTimeOffset()", span="86-86"];
m18_107 [cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting)", file="UnixDateTimeConverterTests.cs", label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting)", span="537-537"];
m18_33 [cluster="Newtonsoft.Json.Converters.UnixDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", file="UnixDateTimeConverterTests.cs", label="Entry Newtonsoft.Json.Converters.UnixDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", span="44-44"];
m18_15 [cluster="System.DateTime.DateTime(int, int, int)", file="UnixDateTimeConverterTests.cs", label="Entry System.DateTime.DateTime(int, int, int)", span="0-0"];
m18_109 [cluster="Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string)", file="UnixDateTimeConverterTests.cs", label="Entry Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string)", span="703-703"];
m18_110 [cluster="Unk.IsNotNull", file="UnixDateTimeConverterTests.cs", label="Entry Unk.IsNotNull", span=""];
m18_121 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.ConverterObject()", file="UnixDateTimeConverterTests.cs", label="Entry Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.ConverterObject()", span="242-242"];
m18_127 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.ConverterObject()", file="UnixDateTimeConverterTests.cs", label="Assert.AreEqual(new DateTime(1970, 1, 1, 0, 0, 3, DateTimeKind.Utc), obj2.Object1)", span="261-261"];
m18_129 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.ConverterObject()", file="UnixDateTimeConverterTests.cs", label="Assert.AreEqual(new DateTime(2018, 1, 1, 21, 1, 16, DateTimeKind.Utc), obj2.ObjectNotHandled)", span="263-263"];
m18_125 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.ConverterObject()", file="UnixDateTimeConverterTests.cs", label="UnixConverterObject obj2 = JsonConvert.DeserializeObject<UnixConverterObject>(json)", span="258-258"];
m18_126 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.ConverterObject()", file="UnixDateTimeConverterTests.cs", label="Assert.IsNotNull(obj2)", span="259-259"];
m18_128 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.ConverterObject()", file="UnixDateTimeConverterTests.cs", label="Assert.IsNull(obj2.Object2)", span="262-262"];
m18_122 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.ConverterObject()", file="UnixDateTimeConverterTests.cs", label="UnixConverterObject obj1 = new UnixConverterObject\r\n            {\r\n                Object1 = new DateTime(1970, 1, 1, 0, 0, 3, DateTimeKind.Utc),\r\n                Object2 = null,\r\n                ObjectNotHandled = new DateTime(2018, 1, 1, 21, 1, 16, DateTimeKind.Utc)\r\n            }", span="244-249"];
m18_123 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.ConverterObject()", file="UnixDateTimeConverterTests.cs", label="string json = JsonConvert.SerializeObject(obj1, Formatting.Indented)", span="251-251"];
m18_124 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.ConverterObject()", file="UnixDateTimeConverterTests.cs", label="StringAssert.AreEqual(@''{\r\n  ''''Object1'''': 3,\r\n  ''''Object2'''': null,\r\n  ''''ObjectNotHandled'''': 1514840476\r\n}'', json)", span="252-256"];
m18_130 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.ConverterObject()", file="UnixDateTimeConverterTests.cs", label="Exit Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.ConverterObject()", span="242-242"];
m18_52 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.DeserializeNullToNonNullable()", file="UnixDateTimeConverterTests.cs", label="Entry Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.DeserializeNullToNonNullable()", span="121-121"];
m18_53 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.DeserializeNullToNonNullable()", file="UnixDateTimeConverterTests.cs", label="ExceptionAssert.Throws<Exception>(\r\n                () => JsonConvert.DeserializeObject<DateTimeTestClass>(\r\n                    @''{''''PreField'''':''''Pre'''',''''DateTimeField'''':null,''''DateTimeOffsetField'''':null,''''PostField'''':''''Post''''}'',\r\n                    new UnixDateTimeConverter()\r\n                ),\r\n                ''Cannot convert null value to System.DateTime. Path 'DateTimeField', line 1, position 38.''\r\n            )", span="123-129"];
m18_54 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.DeserializeNullToNonNullable()", file="UnixDateTimeConverterTests.cs", label="Exit Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.DeserializeNullToNonNullable()", span="121-121"];
m18_131 [cluster="Newtonsoft.Json.Tests.Converters.UnixConverterObject.UnixConverterObject()", file="UnixDateTimeConverterTests.cs", label="Entry Newtonsoft.Json.Tests.Converters.UnixConverterObject.UnixConverterObject()", span="274-274"];
m18_31 [cluster="object.Object()", file="UnixDateTimeConverterTests.cs", label="Entry object.Object()", span="0-0"];
m18_91 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.DeserializeInvalidValueType()", file="UnixDateTimeConverterTests.cs", label="Entry Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.DeserializeInvalidValueType()", span="189-189"];
m18_92 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.DeserializeInvalidValueType()", file="UnixDateTimeConverterTests.cs", label="ExceptionAssert.Throws<JsonSerializationException>(\r\n                () => JsonConvert.DeserializeObject<DateTime>(''false'', new UnixDateTimeConverter()),\r\n                ''Unexpected token parsing date. Expected Integer or String, got Boolean. Path '', line 1, position 5.''\r\n            )", span="191-194"];
m18_93 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.DeserializeInvalidValueType()", file="UnixDateTimeConverterTests.cs", label="Exit Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.DeserializeInvalidValueType()", span="189-189"];
m18_51 [cluster="System.DateTime.DateTime(int, int, int, int, int, int, System.DateTimeKind)", file="UnixDateTimeConverterTests.cs", label="Entry System.DateTime.DateTime(int, int, int, int, int, int, System.DateTimeKind)", span="0-0"];
m18_30 [cluster="Newtonsoft.Json.Linq.JTokenWriter.JTokenWriter()", file="UnixDateTimeConverterTests.cs", label="Entry Newtonsoft.Json.Linq.JTokenWriter.JTokenWriter()", span="82-82"];
m18_39 [cluster="System.DateTimeOffset.DateTimeOffset(int, int, int, int, int, int, System.TimeSpan)", file="UnixDateTimeConverterTests.cs", label="Entry System.DateTimeOffset.DateTimeOffset(int, int, int, int, int, int, System.TimeSpan)", span="0-0"];
m18_108 [cluster="Newtonsoft.Json.Tests.StringAssert.AreEqual(string, string)", file="UnixDateTimeConverterTests.cs", label="Entry Newtonsoft.Json.Tests.StringAssert.AreEqual(string, string)", span="341-341"];
m18_27 [cluster="lambda expression", file="UnixDateTimeConverterTests.cs", label="Entry lambda expression", span="79-79"];
m18_21 [cluster="lambda expression", file="UnixDateTimeConverterTests.cs", label="JsonConvert.SerializeObject(new DateTime(1964, 2, 7), new UnixDateTimeConverter())", span="68-68"];
m18_56 [cluster="lambda expression", file="UnixDateTimeConverterTests.cs", label="JsonConvert.DeserializeObject<DateTimeTestClass>(\r\n                    @''{''''PreField'''':''''Pre'''',''''DateTimeField'''':null,''''DateTimeOffsetField'''':null,''''PostField'''':''''Post''''}'',\r\n                    new UnixDateTimeConverter()\r\n                )", span="124-127"];
m18_74 [cluster="lambda expression", file="UnixDateTimeConverterTests.cs", label="JsonConvert.DeserializeObject<DateTimeOffset>(@''''''PIE'''''', new UnixDateTimeConverter())", span="157-157"];
m18_89 [cluster="lambda expression", file="UnixDateTimeConverterTests.cs", label="JsonConvert.DeserializeObject<DateTime>(''-1'', new UnixDateTimeConverter())", span="183-183"];
m18_95 [cluster="lambda expression", file="UnixDateTimeConverterTests.cs", label="JsonConvert.DeserializeObject<DateTime>(''false'', new UnixDateTimeConverter())", span="192-192"];
m18_20 [cluster="lambda expression", file="UnixDateTimeConverterTests.cs", label="Entry lambda expression", span="68-68"];
m18_22 [cluster="lambda expression", file="UnixDateTimeConverterTests.cs", label="Exit lambda expression", span="68-68"];
m18_28 [cluster="lambda expression", file="UnixDateTimeConverterTests.cs", label="converter.WriteJson(new JTokenWriter(), new object(), new JsonSerializer())", span="79-79"];
m18_55 [cluster="lambda expression", file="UnixDateTimeConverterTests.cs", label="Entry lambda expression", span="124-127"];
m18_57 [cluster="lambda expression", file="UnixDateTimeConverterTests.cs", label="Exit lambda expression", span="124-127"];
m18_73 [cluster="lambda expression", file="UnixDateTimeConverterTests.cs", label="Entry lambda expression", span="157-157"];
m18_75 [cluster="lambda expression", file="UnixDateTimeConverterTests.cs", label="Exit lambda expression", span="157-157"];
m18_88 [cluster="lambda expression", file="UnixDateTimeConverterTests.cs", label="Entry lambda expression", span="183-183"];
m18_90 [cluster="lambda expression", file="UnixDateTimeConverterTests.cs", label="Exit lambda expression", span="183-183"];
m18_94 [cluster="lambda expression", file="UnixDateTimeConverterTests.cs", label="Entry lambda expression", span="192-192"];
m18_96 [cluster="lambda expression", file="UnixDateTimeConverterTests.cs", label="Exit lambda expression", span="192-192"];
m18_29 [cluster="lambda expression", file="UnixDateTimeConverterTests.cs", label="Exit lambda expression", span="79-79"];
m18_70 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.DeserializeInvalidStringToDateTimeOffset()", file="UnixDateTimeConverterTests.cs", label="Entry Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.DeserializeInvalidStringToDateTimeOffset()", span="154-154"];
m18_71 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.DeserializeInvalidStringToDateTimeOffset()", file="UnixDateTimeConverterTests.cs", label="ExceptionAssert.Throws<JsonSerializationException>(\r\n                () => JsonConvert.DeserializeObject<DateTimeOffset>(@''''''PIE'''''', new UnixDateTimeConverter()),\r\n                ''Cannot convert invalid value to System.DateTimeOffset. Path '', line 1, position 5.''\r\n            )", span="156-159"];
m18_72 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.DeserializeInvalidStringToDateTimeOffset()", file="UnixDateTimeConverterTests.cs", label="Exit Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.DeserializeInvalidStringToDateTimeOffset()", span="154-154"];
m18_19 [cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", file="UnixDateTimeConverterTests.cs", label="Entry Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", span="370-370"];
m18_97 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.ConverterList()", file="UnixDateTimeConverterTests.cs", label="Entry Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.ConverterList()", span="198-198"];
m18_103 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.ConverterList()", file="UnixDateTimeConverterTests.cs", label="Assert.AreEqual(new DateTime(2018, 1, 1, 21, 1, 16, DateTimeKind.Utc), l2[0])", span="215-215"];
m18_104 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.ConverterList()", file="UnixDateTimeConverterTests.cs", label="Assert.AreEqual(new DateTime(1970, 1, 1, 0, 0, 3, DateTimeKind.Utc), l2[1])", span="216-216"];
m18_101 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.ConverterList()", file="UnixDateTimeConverterTests.cs", label="UnixConverterList<object> l2 = JsonConvert.DeserializeObject<UnixConverterList<object>>(json)", span="212-212"];
m18_102 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.ConverterList()", file="UnixDateTimeConverterTests.cs", label="Assert.IsNotNull(l2)", span="213-213"];
m18_98 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.ConverterList()", file="UnixDateTimeConverterTests.cs", label="UnixConverterList<object> l1 = new UnixConverterList<object>\r\n            {\r\n                new DateTime(2018, 1, 1, 21, 1, 16, DateTimeKind.Utc),\r\n                new DateTime(1970, 1, 1, 0, 0, 3, DateTimeKind.Utc),\r\n            }", span="200-204"];
m18_99 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.ConverterList()", file="UnixDateTimeConverterTests.cs", label="string json = JsonConvert.SerializeObject(l1, Formatting.Indented)", span="206-206"];
m18_100 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.ConverterList()", file="UnixDateTimeConverterTests.cs", label="StringAssert.AreEqual(@''[\r\n  1514840476,\r\n  3\r\n]'', json)", span="207-210"];
m18_105 [cluster="Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.ConverterList()", file="UnixDateTimeConverterTests.cs", label="Exit Newtonsoft.Json.Tests.Converters.UnixDateTimeConverterTests.ConverterList()", span="198-198"];
m18_132 [file="UnixDateTimeConverterTests.cs", label=converter, span=""];
m19_5 [cluster="Newtonsoft.Json.Utilities.ValidationUtils.ArgumentNotNull(object, string)", file="ValidationEventArgs.cs", label="Entry Newtonsoft.Json.Utilities.ValidationUtils.ArgumentNotNull(object, string)", span="31-31"];
m19_0 [cluster="Newtonsoft.Json.Schema.ValidationEventArgs.ValidationEventArgs(Newtonsoft.Json.Schema.JsonSchemaException)", file="ValidationEventArgs.cs", label="Entry Newtonsoft.Json.Schema.ValidationEventArgs.ValidationEventArgs(Newtonsoft.Json.Schema.JsonSchemaException)", span="43-43"];
m19_1 [cluster="Newtonsoft.Json.Schema.ValidationEventArgs.ValidationEventArgs(Newtonsoft.Json.Schema.JsonSchemaException)", file="ValidationEventArgs.cs", label="ValidationUtils.ArgumentNotNull(ex, nameof(ex))", span="45-45"];
m19_2 [cluster="Newtonsoft.Json.Schema.ValidationEventArgs.ValidationEventArgs(Newtonsoft.Json.Schema.JsonSchemaException)", file="ValidationEventArgs.cs", label="_ex = ex", span="46-46"];
m19_3 [cluster="Newtonsoft.Json.Schema.ValidationEventArgs.ValidationEventArgs(Newtonsoft.Json.Schema.JsonSchemaException)", file="ValidationEventArgs.cs", label="Exit Newtonsoft.Json.Schema.ValidationEventArgs.ValidationEventArgs(Newtonsoft.Json.Schema.JsonSchemaException)", span="43-43"];
m19_4 [cluster="Unk.nameof", file="ValidationEventArgs.cs", label="Entry Unk.nameof", span=""];
m19_6 [file="ValidationEventArgs.cs", label="Newtonsoft.Json.Schema.ValidationEventArgs", span=""];
n14 -> n7  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonConverter", style=dashed];
n0 -> n2  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonWriter", style=dashed];
m1_11 -> m1_14  [color=green, key=1, label="lambda expression", style=dashed];
m2_528 -> m2_532  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_529 -> m2_531  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_780 -> m2_782  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_780 -> m2_783  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_780 -> m2_784  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_780 -> m2_785  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_780 -> m2_786  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_780 -> m2_787  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_780 -> m2_788  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_780 -> m2_789  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_780 -> m2_790  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_780 -> m2_791  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_780 -> m2_792  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_780 -> m2_793  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_1148 -> m2_1150  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1148 -> m2_1151  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1148 -> m2_1152  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1148 -> m2_1153  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1148 -> m2_1154  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1148 -> m2_1155  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1148 -> m2_1156  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1148 -> m2_1157  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1148 -> m2_1158  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_561 -> m2_572  [color=darkseagreen4, key=1, label=newLinesText, style=dashed];
m2_561 -> m2_587  [color=darkseagreen4, key=1, label=newLinesText, style=dashed];
m2_563 -> m2_566  [color=darkseagreen4, key=1, label=count, style=dashed];
m2_567 -> m2_569  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_567 -> m2_570  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_567 -> m2_571  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_567 -> m2_572  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_567 -> m2_573  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_567 -> m2_574  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_567 -> m2_575  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_567 -> m2_576  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_567 -> m2_577  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_567 -> m2_578  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_567 -> m2_579  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_567 -> m2_580  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_567 -> m2_581  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_567 -> m2_582  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_567 -> m2_583  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_567 -> m2_584  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_567 -> m2_585  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_567 -> m2_586  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_567 -> m2_587  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_567 -> m2_588  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_567 -> m2_589  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_567 -> m2_590  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_567 -> m2_591  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_567 -> m2_592  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_567 -> m2_593  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_567 -> m2_594  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_567 -> m2_595  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_567 -> m2_596  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_567 -> m2_597  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_567 -> m2_598  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_567 -> m2_599  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_567 -> m2_600  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_567 -> m2_601  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_567 -> m2_602  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_566 -> m2_566  [color=darkseagreen4, key=1, label=count, style=dashed];
m2_1435 -> m2_1440  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1436 -> m2_1439  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_1196 -> m2_1198  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1196 -> m2_1199  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1196 -> m2_1200  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1196 -> m2_1201  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1196 -> m2_1202  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1196 -> m2_1203  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1196 -> m2_1204  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_134 -> m2_136  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_1592 -> m2_1594  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1592 -> m2_1597  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1594 -> m2_1596  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_1039 -> m2_1043  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1040 -> m2_1042  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_1733 -> m2_1736  [color=darkseagreen4, key=1, label=jsonTextReader, style=dashed];
m2_1733 -> m2_1754  [color=darkseagreen4, key=1, label=jsonTextReader, style=dashed];
m2_1733 -> m2_1737  [color=darkseagreen4, key=1, label=jsonTextReader, style=dashed];
m2_1733 -> m2_1757  [color=darkseagreen4, key=1, label=jsonTextReader, style=dashed];
m2_1733 -> m2_1739  [color=darkseagreen4, key=1, label=jsonTextReader, style=dashed];
m2_1733 -> m2_1740  [color=darkseagreen4, key=1, label=jsonTextReader, style=dashed];
m2_1733 -> m2_1742  [color=darkseagreen4, key=1, label=jsonTextReader, style=dashed];
m2_1733 -> m2_1760  [color=darkseagreen4, key=1, label=jsonTextReader, style=dashed];
m2_1733 -> m2_1744  [color=darkseagreen4, key=1, label=jsonTextReader, style=dashed];
m2_1733 -> m2_1745  [color=darkseagreen4, key=1, label=jsonTextReader, style=dashed];
m2_1733 -> m2_1747  [color=darkseagreen4, key=1, label=jsonTextReader, style=dashed];
m2_1733 -> m2_1763  [color=darkseagreen4, key=1, label=jsonTextReader, style=dashed];
m2_1733 -> m2_1748  [color=darkseagreen4, key=1, label=jsonTextReader, style=dashed];
m2_1733 -> m2_1766  [color=darkseagreen4, key=1, label=jsonTextReader, style=dashed];
m2_1733 -> m2_1749  [color=darkseagreen4, key=1, label=jsonTextReader, style=dashed];
m2_1733 -> m2_1769  [color=darkseagreen4, key=1, label=jsonTextReader, style=dashed];
m2_1736 -> m2_1753  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_1737 -> m2_1756  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_1742 -> m2_1759  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_1747 -> m2_1762  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_1748 -> m2_1765  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_1749 -> m2_1768  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_521 -> m2_525  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_522 -> m2_524  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_952 -> m2_954  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_952 -> m2_955  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_952 -> m2_956  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_952 -> m2_957  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_952 -> m2_958  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_952 -> m2_959  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_952 -> m2_960  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_952 -> m2_961  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_952 -> m2_962  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_952 -> m2_963  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_952 -> m2_964  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_952 -> m2_965  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_952 -> m2_966  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_952 -> m2_967  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_952 -> m2_968  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_952 -> m2_969  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_1444 -> m2_1446  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1444 -> m2_1447  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1444 -> m2_1448  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1444 -> m2_1449  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1444 -> m2_1450  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1444 -> m2_1451  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1444 -> m2_1452  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1444 -> m2_1453  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1444 -> m2_1454  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1444 -> m2_1455  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1444 -> m2_1456  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1444 -> m2_1457  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1444 -> m2_1458  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1444 -> m2_1459  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1444 -> m2_1460  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1444 -> m2_1461  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1444 -> m2_1462  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1444 -> m2_1463  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_437 -> m2_439  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_443 -> m2_447  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_440 -> m2_444  [color=darkseagreen4, key=1, label=j, style=dashed];
m2_444 -> m2_444  [color=darkseagreen4, key=1, label=j, style=dashed];
m2_142 -> m2_144  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_142 -> m2_145  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_142 -> m2_146  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_142 -> m2_147  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_142 -> m2_148  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_142 -> m2_149  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_142 -> m2_150  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_142 -> m2_151  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_142 -> m2_152  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_142 -> m2_153  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_142 -> m2_154  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_142 -> m2_155  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_553 -> m2_555  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_553 -> m2_558  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_555 -> m2_557  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_798 -> m2_800  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_798 -> m2_801  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_798 -> m2_802  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_798 -> m2_803  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_798 -> m2_804  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_798 -> m2_805  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_798 -> m2_806  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_798 -> m2_807  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_798 -> m2_808  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_695 -> m2_711  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_696 -> m2_710  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_697 -> m2_714  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_698 -> m2_713  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_699 -> m2_717  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_700 -> m2_716  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_701 -> m2_720  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_702 -> m2_719  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_705 -> m2_723  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_706 -> m2_722  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_1535 -> m2_1537  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1535 -> m2_1538  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1535 -> m2_1541  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1538 -> m2_1540  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_81 -> m2_83  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_81 -> m2_84  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_81 -> m2_85  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_931 -> m2_933  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_931 -> m2_934  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_931 -> m2_935  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_931 -> m2_936  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_931 -> m2_937  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_931 -> m2_938  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_931 -> m2_939  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_931 -> m2_940  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_931 -> m2_941  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_931 -> m2_942  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_931 -> m2_943  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_931 -> m2_944  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_931 -> m2_945  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_931 -> m2_946  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_931 -> m2_947  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_931 -> m2_948  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_980 -> m2_982  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_499 -> m2_502  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_499 -> m2_504  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_499 -> m2_505  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_499 -> m2_506  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_500 -> m2_503  [color=darkseagreen4, key=1, label=i, style=dashed];
m2_503 -> m2_503  [color=darkseagreen4, key=1, label=i, style=dashed];
m2_826 -> m2_828  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_826 -> m2_829  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_826 -> m2_830  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_826 -> m2_831  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_826 -> m2_832  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_826 -> m2_833  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_826 -> m2_834  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_826 -> m2_835  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_826 -> m2_836  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_826 -> m2_837  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_826 -> m2_838  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_826 -> m2_839  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_826 -> m2_840  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_826 -> m2_841  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_826 -> m2_842  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_826 -> m2_843  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_826 -> m2_844  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_826 -> m2_845  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_826 -> m2_846  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_826 -> m2_847  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_826 -> m2_848  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_826 -> m2_849  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_826 -> m2_850  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_826 -> m2_851  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_826 -> m2_852  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_826 -> m2_853  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_826 -> m2_854  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_826 -> m2_855  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_826 -> m2_856  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_826 -> m2_857  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_826 -> m2_858  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_826 -> m2_859  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_826 -> m2_860  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_826 -> m2_861  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_826 -> m2_862  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_826 -> m2_863  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_826 -> m2_864  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_826 -> m2_865  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_826 -> m2_866  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_826 -> m2_867  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_826 -> m2_868  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_826 -> m2_869  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_826 -> m2_870  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_826 -> m2_871  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_826 -> m2_872  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_826 -> m2_873  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_826 -> m2_874  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_826 -> m2_875  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_826 -> m2_876  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_826 -> m2_877  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_826 -> m2_878  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_826 -> m2_879  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_826 -> m2_880  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_826 -> m2_881  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_826 -> m2_882  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_826 -> m2_883  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_826 -> m2_884  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_1180 -> m2_1182  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1180 -> m2_1183  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1180 -> m2_1184  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1180 -> m2_1185  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1180 -> m2_1186  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1180 -> m2_1187  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1180 -> m2_1188  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1180 -> m2_1191  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1180 -> m2_1192  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1190 -> m2_1190  [color=darkseagreen4, key=1, label=dt, style=dashed];
m2_1373 -> m2_1375  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1373 -> m2_1376  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_514 -> m2_518  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_515 -> m2_517  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_50 -> m2_52  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_50 -> m2_53  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_50 -> m2_54  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_50 -> m2_57  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_54 -> m2_56  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_396 -> m2_398  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_396 -> m2_399  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_396 -> m2_400  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_396 -> m2_401  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_396 -> m2_402  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_396 -> m2_403  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_396 -> m2_404  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_396 -> m2_405  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_396 -> m2_406  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_396 -> m2_407  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_396 -> m2_408  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_396 -> m2_409  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_396 -> m2_410  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_396 -> m2_411  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_396 -> m2_412  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_396 -> m2_413  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_396 -> m2_414  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_396 -> m2_415  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_396 -> m2_416  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_396 -> m2_417  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_396 -> m2_418  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_396 -> m2_419  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_396 -> m2_420  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_396 -> m2_421  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_396 -> m2_422  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_396 -> m2_423  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_2 -> m2_4  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_2 -> m2_5  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_2 -> m2_6  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_2 -> m2_7  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_2 -> m2_8  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_2 -> m2_9  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_2 -> m2_10  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_2 -> m2_11  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_2 -> m2_20  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_11 -> m2_19  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_1396 -> m2_1398  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1396 -> m2_1399  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1396 -> m2_1400  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_348 -> m2_350  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_546 -> m2_548  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_546 -> m2_549  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1247 -> m2_1251  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1248 -> m2_1250  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_201 -> m2_203  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_201 -> m2_204  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_201 -> m2_205  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_201 -> m2_206  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_201 -> m2_207  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_201 -> m2_208  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_201 -> m2_209  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_201 -> m2_210  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_201 -> m2_211  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_201 -> m2_212  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_201 -> m2_213  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_201 -> m2_214  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_201 -> m2_215  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_201 -> m2_216  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_201 -> m2_217  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_201 -> m2_218  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_201 -> m2_219  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_201 -> m2_220  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_201 -> m2_221  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_201 -> m2_222  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_201 -> m2_223  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_201 -> m2_224  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_201 -> m2_225  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_201 -> m2_226  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_201 -> m2_227  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_201 -> m2_228  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_201 -> m2_229  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_201 -> m2_230  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_201 -> m2_231  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_201 -> m2_232  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_201 -> m2_233  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_201 -> m2_234  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_201 -> m2_235  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_201 -> m2_236  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_201 -> m2_237  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_201 -> m2_238  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_201 -> m2_239  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_201 -> m2_240  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_201 -> m2_241  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_201 -> m2_242  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_201 -> m2_243  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_201 -> m2_244  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_201 -> m2_245  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_201 -> m2_246  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_201 -> m2_247  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_201 -> m2_248  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_161 -> m2_165  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_162 -> m2_164  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_1240 -> m2_1244  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1241 -> m2_1243  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_1269 -> m2_1271  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1269 -> m2_1272  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1269 -> m2_1273  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1269 -> m2_1274  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1269 -> m2_1276  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1269 -> m2_1277  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1269 -> m2_1279  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1269 -> m2_1280  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1275 -> m2_1278  [color=darkseagreen4, key=1, label=d, style=dashed];
m2_1284 -> m2_1287  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1284 -> m2_1289  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1284 -> m2_1290  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1285 -> m2_1288  [color=darkseagreen4, key=1, label=i, style=dashed];
m2_1288 -> m2_1288  [color=darkseagreen4, key=1, label=i, style=dashed];
m2_1601 -> m2_1603  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1601 -> m2_1604  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1601 -> m2_1629  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1601 -> m2_1605  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1601 -> m2_1606  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1601 -> m2_1607  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1601 -> m2_1608  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1601 -> m2_1609  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1601 -> m2_1610  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1601 -> m2_1611  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1601 -> m2_1612  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1601 -> m2_1613  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1601 -> m2_1614  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1601 -> m2_1615  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1601 -> m2_1616  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1601 -> m2_1632  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1601 -> m2_1617  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1601 -> m2_1618  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1601 -> m2_1619  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1601 -> m2_1620  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1601 -> m2_1621  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1601 -> m2_1622  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1601 -> m2_1623  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1601 -> m2_1624  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1601 -> m2_1625  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1601 -> m2_1626  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1604 -> m2_1628  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_1616 -> m2_1631  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_1018 -> m2_1022  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1019 -> m2_1021  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_1255 -> m2_1257  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1255 -> m2_1258  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1255 -> m2_1259  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1255 -> m2_1261  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1255 -> m2_1262  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1255 -> m2_1264  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1255 -> m2_1265  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1260 -> m2_1263  [color=darkseagreen4, key=1, label=d, style=dashed];
m2_753 -> m2_760  [color=darkseagreen4, key=1, label=json, style=dashed];
m2_728 -> m2_730  [color=darkseagreen4, key=1, label=jsonWriter, style=dashed];
m2_728 -> m2_731  [color=darkseagreen4, key=1, label=jsonWriter, style=dashed];
m2_728 -> m2_732  [color=darkseagreen4, key=1, label=jsonWriter, style=dashed];
m2_728 -> m2_733  [color=darkseagreen4, key=1, label=jsonWriter, style=dashed];
m2_728 -> m2_734  [color=darkseagreen4, key=1, label=jsonWriter, style=dashed];
m2_728 -> m2_735  [color=darkseagreen4, key=1, label=jsonWriter, style=dashed];
m2_728 -> m2_736  [color=darkseagreen4, key=1, label=jsonWriter, style=dashed];
m2_728 -> m2_737  [color=darkseagreen4, key=1, label=jsonWriter, style=dashed];
m2_728 -> m2_740  [color=darkseagreen4, key=1, label=jsonWriter, style=dashed];
m2_728 -> m2_742  [color=darkseagreen4, key=1, label=jsonWriter, style=dashed];
m2_728 -> m2_743  [color=darkseagreen4, key=1, label=jsonWriter, style=dashed];
m2_728 -> m2_744  [color=darkseagreen4, key=1, label=jsonWriter, style=dashed];
m2_728 -> m2_745  [color=darkseagreen4, key=1, label=jsonWriter, style=dashed];
m2_728 -> m2_746  [color=darkseagreen4, key=1, label=jsonWriter, style=dashed];
m2_728 -> m2_747  [color=darkseagreen4, key=1, label=jsonWriter, style=dashed];
m2_728 -> m2_748  [color=darkseagreen4, key=1, label=jsonWriter, style=dashed];
m2_728 -> m2_749  [color=darkseagreen4, key=1, label=jsonWriter, style=dashed];
m2_728 -> m2_750  [color=darkseagreen4, key=1, label=jsonWriter, style=dashed];
m2_728 -> m2_751  [color=darkseagreen4, key=1, label=jsonWriter, style=dashed];
m2_728 -> m2_752  [color=darkseagreen4, key=1, label=jsonWriter, style=dashed];
m2_738 -> m2_740  [color=darkseagreen4, key=1, label=i, style=dashed];
m2_738 -> m2_741  [color=darkseagreen4, key=1, label=i, style=dashed];
m2_741 -> m2_741  [color=darkseagreen4, key=1, label=i, style=dashed];
m2_754 -> m2_759  [color=darkseagreen4, key=1, label=serializer, style=dashed];
m2_755 -> m2_759  [color=darkseagreen4, key=1, label=jsonObject, style=dashed];
m2_756 -> m2_760  [color=darkseagreen4, key=1, label=sb, style=dashed];
m2_1419 -> m2_1423  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1420 -> m2_1422  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_1636 -> m2_1638  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1636 -> m2_1639  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1636 -> m2_1640  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1636 -> m2_1641  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1636 -> m2_1642  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1636 -> m2_1643  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1636 -> m2_1644  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1636 -> m2_1645  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1636 -> m2_1646  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1636 -> m2_1647  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1636 -> m2_1648  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1636 -> m2_1649  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1636 -> m2_1650  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1636 -> m2_1651  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1636 -> m2_1652  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1636 -> m2_1653  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1636 -> m2_1654  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1636 -> m2_1655  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1636 -> m2_1656  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1636 -> m2_1657  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1636 -> m2_1658  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1636 -> m2_1659  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1636 -> m2_1660  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1636 -> m2_1661  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1636 -> m2_1662  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1636 -> m2_1663  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1636 -> m2_1664  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1636 -> m2_1665  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1636 -> m2_1666  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1636 -> m2_1667  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1636 -> m2_1668  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1636 -> m2_1669  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1636 -> m2_1670  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1636 -> m2_1671  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1636 -> m2_1672  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1636 -> m2_1673  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1306 -> m2_1308  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1306 -> m2_1309  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1306 -> m2_1310  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1306 -> m2_1311  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1226 -> m2_1230  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1227 -> m2_1229  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_509 -> m2_511  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_169 -> m2_171  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_169 -> m2_172  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_169 -> m2_173  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_169 -> m2_174  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_169 -> m2_175  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_169 -> m2_176  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_169 -> m2_177  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_169 -> m2_178  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_169 -> m2_179  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_169 -> m2_180  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_169 -> m2_183  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_180 -> m2_182  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_812 -> m2_814  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_812 -> m2_815  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_812 -> m2_816  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_812 -> m2_817  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_812 -> m2_818  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_812 -> m2_819  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_812 -> m2_820  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_255  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_256  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_257  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_258  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_259  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_260  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_261  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_262  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_263  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_264  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_265  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_266  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_267  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_268  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_269  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_270  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_271  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_272  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_273  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_274  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_275  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_276  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_277  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_278  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_279  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_280  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_281  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_282  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_283  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_284  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_285  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_286  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_287  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_288  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_289  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_290  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_291  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_292  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_293  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_294  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_295  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_296  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_297  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_298  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_299  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_300  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_301  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_302  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_303  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_304  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_305  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_306  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_307  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_308  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_309  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_310  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_311  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_312  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_313  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_314  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_315  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_316  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_317  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_318  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_319  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_320  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_321  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_322  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_323  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_324  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_325  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_326  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_327  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_328  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_329  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_330  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_331  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_332  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_333  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_334  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_335  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_336  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_337  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_338  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_339  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_340  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_341  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_342  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_343  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_344  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_253 -> m2_345  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_538 -> m2_543  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_539 -> m2_542  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_1427 -> m2_1429  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1427 -> m2_1430  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1427 -> m2_1431  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_470 -> m2_472  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_473 -> m2_479  [color=darkseagreen4, key=1, label=j, style=dashed];
m2_479 -> m2_479  [color=darkseagreen4, key=1, label=j, style=dashed];
m2_476 -> m2_478  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1075 -> m2_1077  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1075 -> m2_1078  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1075 -> m2_1079  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1075 -> m2_1080  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1075 -> m2_1081  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1075 -> m2_1082  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1075 -> m2_1083  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1075 -> m2_1084  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1075 -> m2_1085  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_654 -> m2_656  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_654 -> m2_657  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_654 -> m2_658  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_654 -> m2_659  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_654 -> m2_660  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_654 -> m2_661  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_654 -> m2_662  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_654 -> m2_663  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_654 -> m2_664  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_654 -> m2_665  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_654 -> m2_666  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_654 -> m2_667  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_654 -> m2_668  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_654 -> m2_669  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_1513 -> m2_1515  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1513 -> m2_1516  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_453 -> m2_457  [color=darkseagreen4, key=1, label=i, style=dashed];
m2_454 -> m2_456  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_454 -> m2_457  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_461 -> m2_464  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_458 -> m2_462  [color=darkseagreen4, key=1, label=j, style=dashed];
m2_462 -> m2_462  [color=darkseagreen4, key=1, label=j, style=dashed];
m2_1791 -> m2_1794  [color=darkseagreen4, key=1, label="char[]", style=dashed];
m2_606 -> m2_608  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_606 -> m2_609  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_606 -> m2_610  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_606 -> m2_611  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_606 -> m2_612  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_606 -> m2_613  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_606 -> m2_614  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_606 -> m2_615  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_606 -> m2_616  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1233 -> m2_1237  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1234 -> m2_1236  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_1404 -> m2_1406  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1404 -> m2_1407  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1404 -> m2_1408  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1388 -> m2_1392  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1389 -> m2_1391  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_427 -> m2_430  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_427 -> m2_432  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_427 -> m2_433  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_428 -> m2_431  [color=darkseagreen4, key=1, label=i, style=dashed];
m2_431 -> m2_431  [color=darkseagreen4, key=1, label=i, style=dashed];
m2_1208 -> m2_1210  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1208 -> m2_1211  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1208 -> m2_1212  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1208 -> m2_1213  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1208 -> m2_1216  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1213 -> m2_1215  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_1341 -> m2_1343  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1341 -> m2_1344  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1341 -> m2_1345  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1341 -> m2_1346  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1341 -> m2_1347  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1341 -> m2_1348  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1341 -> m2_1349  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1341 -> m2_1350  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1341 -> m2_1351  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1341 -> m2_1352  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1341 -> m2_1353  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1341 -> m2_1354  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1341 -> m2_1355  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1341 -> m2_1356  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1341 -> m2_1357  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1341 -> m2_1358  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1341 -> m2_1359  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1341 -> m2_1360  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1341 -> m2_1361  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1341 -> m2_1362  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1341 -> m2_1363  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1341 -> m2_1364  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1341 -> m2_1365  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1341 -> m2_1366  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1341 -> m2_1367  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1341 -> m2_1368  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1341 -> m2_1369  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1506 -> m2_1508  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1506 -> m2_1509  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_888 -> m2_890  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_888 -> m2_891  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_888 -> m2_892  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_888 -> m2_893  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_888 -> m2_894  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_888 -> m2_895  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_888 -> m2_898  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_895 -> m2_897  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_1412 -> m2_1414  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1412 -> m2_1415  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1412 -> m2_1416  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_361 -> m2_364  [color=darkseagreen4, key=1, label=s, style=dashed];
m2_362 -> m2_364  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_991 -> m2_995  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_992 -> m2_994  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_620 -> m2_627  [color=darkseagreen4, key=1, label=helloWorldData, style=dashed];
m2_621 -> m2_623  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_621 -> m2_624  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_621 -> m2_625  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_621 -> m2_628  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_621 -> m2_629  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_621 -> m2_630  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_621 -> m2_631  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_61 -> m2_63  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_61 -> m2_64  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_61 -> m2_65  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_61 -> m2_66  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_61 -> m2_67  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_61 -> m2_68  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_61 -> m2_69  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_61 -> m2_70  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_61 -> m2_71  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_61 -> m2_72  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_61 -> m2_73  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_61 -> m2_74  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_61 -> m2_75  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_61 -> m2_76  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_61 -> m2_77  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1773 -> m2_1775  [color=darkseagreen4, key=1, label=writer, style=dashed];
m2_1773 -> m2_1776  [color=darkseagreen4, key=1, label=writer, style=dashed];
m2_1773 -> m2_1777  [color=darkseagreen4, key=1, label=writer, style=dashed];
m2_1780 -> m2_1786  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1295 -> m2_1298  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1295 -> m2_1300  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1295 -> m2_1301  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1295 -> m2_1302  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1296 -> m2_1299  [color=darkseagreen4, key=1, label=i, style=dashed];
m2_1299 -> m2_1299  [color=darkseagreen4, key=1, label=i, style=dashed];
m2_1467 -> m2_1469  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1467 -> m2_1470  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1467 -> m2_1471  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1467 -> m2_1472  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1467 -> m2_1473  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1467 -> m2_1474  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1467 -> m2_1475  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1467 -> m2_1476  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1467 -> m2_1477  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1467 -> m2_1478  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1467 -> m2_1479  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1467 -> m2_1480  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1467 -> m2_1481  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1467 -> m2_1482  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1467 -> m2_1483  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1467 -> m2_1484  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1467 -> m2_1485  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1467 -> m2_1486  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1467 -> m2_1487  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1467 -> m2_1488  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1467 -> m2_1489  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1467 -> m2_1490  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1467 -> m2_1491  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1467 -> m2_1492  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1467 -> m2_1493  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1467 -> m2_1494  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1467 -> m2_1495  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1467 -> m2_1496  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1467 -> m2_1497  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1467 -> m2_1498  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1467 -> m2_1499  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1467 -> m2_1500  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1467 -> m2_1501  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1467 -> m2_1502  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1032 -> m2_1036  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1033 -> m2_1035  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_1545 -> m2_1547  [color=darkseagreen4, key=1, label=d, style=dashed];
m2_1549 -> m2_1551  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1549 -> m2_1552  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1549 -> m2_1553  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1549 -> m2_1554  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1549 -> m2_1555  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1549 -> m2_1556  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1549 -> m2_1557  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1549 -> m2_1558  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1549 -> m2_1559  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1549 -> m2_1560  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1549 -> m2_1561  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1549 -> m2_1562  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1549 -> m2_1563  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1549 -> m2_1564  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1549 -> m2_1565  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1549 -> m2_1566  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1567 -> m2_1569  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1567 -> m2_1570  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1567 -> m2_1571  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1567 -> m2_1572  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1567 -> m2_1573  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1567 -> m2_1574  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1567 -> m2_1575  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1567 -> m2_1576  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1567 -> m2_1577  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1567 -> m2_1578  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1567 -> m2_1579  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1567 -> m2_1580  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1567 -> m2_1581  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1567 -> m2_1582  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1567 -> m2_1583  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1567 -> m2_1584  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_972 -> m2_974  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_972 -> m2_977  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_974 -> m2_976  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_1132 -> m2_1134  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1132 -> m2_1135  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1132 -> m2_1136  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1132 -> m2_1137  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1132 -> m2_1138  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1132 -> m2_1139  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1132 -> m2_1140  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1132 -> m2_1141  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1132 -> m2_1142  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_192 -> m2_196  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_193 -> m2_195  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_368 -> m2_373  [color=darkseagreen4, key=1, label=valueCount, style=dashed];
m2_368 -> m2_381  [color=darkseagreen4, key=1, label=valueCount, style=dashed];
m2_370 -> m2_374  [color=darkseagreen4, key=1, label=writer, style=dashed];
m2_370 -> m2_376  [color=darkseagreen4, key=1, label=writer, style=dashed];
m2_372 -> m2_374  [color=darkseagreen4, key=1, label=i, style=dashed];
m2_372 -> m2_375  [color=darkseagreen4, key=1, label=i, style=dashed];
m2_375 -> m2_375  [color=darkseagreen4, key=1, label=i, style=dashed];
m2_378 -> m2_382  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_378 -> m2_383  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_378 -> m2_385  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_378 -> m2_386  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_380 -> m2_383  [color=darkseagreen4, key=1, label=i, style=dashed];
m2_380 -> m2_384  [color=darkseagreen4, key=1, label=i, style=dashed];
m2_384 -> m2_384  [color=darkseagreen4, key=1, label=i, style=dashed];
m2_1106 -> m2_1108  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1106 -> m2_1109  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1106 -> m2_1110  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1106 -> m2_1111  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1106 -> m2_1114  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1111 -> m2_1113  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_1004 -> m2_1008  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1005 -> m2_1007  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_118 -> m2_120  [color=darkseagreen4, key=1, label=ms, style=dashed];
m2_118 -> m2_122  [color=darkseagreen4, key=1, label=ms, style=dashed];
m2_119 -> m2_121  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_123 -> m2_125  [color=darkseagreen4, key=1, label=ms, style=dashed];
m2_123 -> m2_127  [color=darkseagreen4, key=1, label=ms, style=dashed];
m2_124 -> m2_126  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1062 -> m2_1064  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1062 -> m2_1065  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1062 -> m2_1066  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1062 -> m2_1067  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1062 -> m2_1068  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1062 -> m2_1069  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1062 -> m2_1070  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1062 -> m2_1071  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1118 -> m2_1120  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1118 -> m2_1121  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1118 -> m2_1122  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1118 -> m2_1123  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1118 -> m2_1124  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1118 -> m2_1125  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1118 -> m2_1126  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1118 -> m2_1127  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1118 -> m2_1128  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_354 -> m2_358  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_355 -> m2_357  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_1380 -> m2_1384  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1381 -> m2_1383  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_1677 -> m2_1679  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1677 -> m2_1680  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1677 -> m2_1681  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1677 -> m2_1682  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1677 -> m2_1683  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1677 -> m2_1684  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1677 -> m2_1685  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1677 -> m2_1686  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1687 -> m2_1689  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1687 -> m2_1690  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1687 -> m2_1691  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1687 -> m2_1692  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1687 -> m2_1693  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1687 -> m2_1694  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1687 -> m2_1695  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1687 -> m2_1696  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1697 -> m2_1699  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1697 -> m2_1700  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1697 -> m2_1701  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1697 -> m2_1702  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1697 -> m2_1703  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1697 -> m2_1704  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1697 -> m2_1705  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1697 -> m2_1706  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1707 -> m2_1709  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1707 -> m2_1710  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1707 -> m2_1711  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1707 -> m2_1712  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1707 -> m2_1713  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1707 -> m2_1714  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1707 -> m2_1715  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1707 -> m2_1716  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1717 -> m2_1719  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1717 -> m2_1720  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1717 -> m2_1721  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1717 -> m2_1722  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1717 -> m2_1723  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1717 -> m2_1724  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1717 -> m2_1725  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1717 -> m2_1726  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_998 -> m2_1000  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1806 -> m2_1810  [color=darkseagreen4, key=1, label="byte[]", style=dashed];
m2_1808 -> m2_1810  [color=darkseagreen4, key=1, label=toReturn, style=dashed];
m2_1808 -> m2_1812  [color=darkseagreen4, key=1, label=toReturn, style=dashed];
m2_1520 -> m2_1522  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1520 -> m2_1523  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1520 -> m2_1524  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1520 -> m2_1525  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1520 -> m2_1526  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1520 -> m2_1527  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1520 -> m2_1528  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1520 -> m2_1529  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1520 -> m2_1530  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1520 -> m2_1531  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1520 -> m2_1532  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_24 -> m2_26  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_24 -> m2_27  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_24 -> m2_28  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_24 -> m2_29  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_24 -> m2_30  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_24 -> m2_31  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_24 -> m2_32  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_24 -> m2_33  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_24 -> m2_34  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_24 -> m2_35  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_24 -> m2_36  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_24 -> m2_37  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_24 -> m2_38  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_24 -> m2_39  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_24 -> m2_40  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_24 -> m2_41  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_24 -> m2_42  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_24 -> m2_43  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_24 -> m2_44  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_24 -> m2_45  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1026 -> m2_1028  [color=darkseagreen4, key=1, label=data, style=dashed];
m2_1026 -> m2_1029  [color=darkseagreen4, key=1, label=data, style=dashed];
m2_913 -> m2_915  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_913 -> m2_916  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_913 -> m2_917  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_913 -> m2_918  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_913 -> m2_919  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_913 -> m2_920  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_913 -> m2_921  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_913 -> m2_922  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_913 -> m2_923  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_913 -> m2_924  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_913 -> m2_925  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_913 -> m2_926  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_913 -> m2_927  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m2_1315 -> m2_1317  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1315 -> m2_1318  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1315 -> m2_1319  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1315 -> m2_1320  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_636 -> m2_645  [color=darkseagreen4, key=1, label=helloWorldData, style=dashed];
m2_637 -> m2_639  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_637 -> m2_640  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_637 -> m2_641  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_637 -> m2_642  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_637 -> m2_643  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_637 -> m2_646  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_637 -> m2_647  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_637 -> m2_648  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_637 -> m2_649  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_486 -> m2_488  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_489 -> m2_495  [color=darkseagreen4, key=1, label=j, style=dashed];
m2_495 -> m2_495  [color=darkseagreen4, key=1, label=j, style=dashed];
m2_492 -> m2_494  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_986 -> m2_988  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1324 -> m2_1326  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1324 -> m2_1327  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1324 -> m2_1328  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1324 -> m2_1329  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1324 -> m2_1330  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1324 -> m2_1331  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1324 -> m2_1332  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1324 -> m2_1333  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1324 -> m2_1334  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1324 -> m2_1335  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1324 -> m2_1336  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1324 -> m2_1337  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1324 -> m2_1338  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1163 -> m2_1165  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1163 -> m2_1166  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1163 -> m2_1167  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1163 -> m2_1168  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1163 -> m2_1169  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1163 -> m2_1170  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1163 -> m2_1171  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1163 -> m2_1174  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1163 -> m2_1175  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1173 -> m2_1173  [color=darkseagreen4, key=1, label=dt, style=dashed];
m2_1011 -> m2_1015  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1012 -> m2_1014  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_1092 -> m2_1094  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1092 -> m2_1095  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1092 -> m2_1096  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1092 -> m2_1097  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1092 -> m2_1098  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1092 -> m2_1099  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1092 -> m2_1100  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1092 -> m2_1101  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1092 -> m2_1102  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1219 -> m2_1223  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1220 -> m2_1222  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m2_1047 -> m2_1049  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1047 -> m2_1050  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1047 -> m2_1051  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1047 -> m2_1052  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1047 -> m2_1053  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1047 -> m2_1054  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1047 -> m2_1055  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1047 -> m2_1056  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1047 -> m2_1057  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1047 -> m2_1058  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1826 -> m2_20  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1827 -> m2_57  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1828 -> m2_94  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Tests.JsonTextReaderTest", style=dashed];
m2_1828 -> m2_95  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Tests.JsonTextReaderTest", style=dashed];
m2_1828 -> m2_96  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Tests.JsonTextReaderTest", style=dashed];
m2_1828 -> m2_97  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Tests.JsonTextReaderTest", style=dashed];
m2_1828 -> m2_98  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Tests.JsonTextReaderTest", style=dashed];
m2_1828 -> m2_99  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Tests.JsonTextReaderTest", style=dashed];
m2_1828 -> m2_100  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Tests.JsonTextReaderTest", style=dashed];
m2_1828 -> m2_101  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Tests.JsonTextReaderTest", style=dashed];
m2_1828 -> m2_102  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Tests.JsonTextReaderTest", style=dashed];
m2_1828 -> m2_103  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Tests.JsonTextReaderTest", style=dashed];
m2_1828 -> m2_104  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Tests.JsonTextReaderTest", style=dashed];
m2_1828 -> m2_105  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Tests.JsonTextReaderTest", style=dashed];
m2_1829 -> m2_165  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1830 -> m2_183  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1831 -> m2_196  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1832 -> m2_358  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1835 -> m2_518  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1836 -> m2_525  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1837 -> m2_532  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1838 -> m2_543  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1839 -> m2_558  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1840 -> m2_711  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1840 -> m2_714  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1840 -> m2_717  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1840 -> m2_720  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1840 -> m2_723  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1841 -> m2_898  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1842 -> m2_977  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1843 -> m2_995  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1844 -> m2_1008  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1845 -> m2_1015  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1846 -> m2_1022  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1847 -> m2_1036  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1848 -> m2_1043  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1849 -> m2_1114  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1850 -> m2_1216  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1851 -> m2_1223  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1852 -> m2_1230  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1853 -> m2_1237  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1854 -> m2_1244  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1855 -> m2_1251  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1856 -> m2_1384  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1857 -> m2_1392  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1858 -> m2_1423  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1859 -> m2_1440  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1860 -> m2_1541  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1861 -> m2_1597  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1862 -> m2_1629  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1862 -> m2_1632  [color=darkseagreen4, key=1, label=reader, style=dashed];
m2_1863 -> m2_1754  [color=darkseagreen4, key=1, label=jsonTextReader, style=dashed];
m2_1863 -> m2_1757  [color=darkseagreen4, key=1, label=jsonTextReader, style=dashed];
m2_1863 -> m2_1760  [color=darkseagreen4, key=1, label=jsonTextReader, style=dashed];
m2_1863 -> m2_1763  [color=darkseagreen4, key=1, label=jsonTextReader, style=dashed];
m2_1863 -> m2_1766  [color=darkseagreen4, key=1, label=jsonTextReader, style=dashed];
m2_1863 -> m2_1769  [color=darkseagreen4, key=1, label=jsonTextReader, style=dashed];
m2_1864 -> m2_1792  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Tests.ToggleReaderError", style=dashed];
m2_1864 -> m2_1794  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Tests.ToggleReaderError", style=dashed];
m2_1865 -> m2_1810  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Tests.SlowStream", style=dashed];
m3_126 -> m3_126  [color=darkseagreen4, key=1, label="System.TimeSpan", style=dashed];
m3_358 -> m3_360  [color=darkseagreen4, key=1, label=XObject, style=dashed];
m3_210 -> m3_212  [color=darkseagreen4, key=1, label=object, style=dashed];
m3_129 -> m3_143  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_75 -> m3_77  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_75 -> m3_78  [color=darkseagreen4, key=1, label="Newtonsoft.Json.FloatFormatHandling", style=dashed];
m3_75 -> m3_79  [color=darkseagreen4, key=1, label=bool, style=dashed];
m3_75 -> m3_80  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_270 -> m3_274  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_237 -> m3_245  [color=darkseagreen4, key=1, label=object, style=dashed];
m3_241 -> m3_244  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_3 -> m3_7  [color=darkseagreen4, key=1, label="Newtonsoft.Json.DateFormatHandling", style=dashed];
m3_4 -> m3_7  [color=darkseagreen4, key=1, label=updatedDateTime, style=dashed];
m3_5 -> m3_7  [color=darkseagreen4, key=1, label=writer, style=dashed];
m3_5 -> m3_8  [color=darkseagreen4, key=1, label=writer, style=dashed];
m3_5 -> m3_9  [color=darkseagreen4, key=1, label=writer, style=dashed];
m3_320 -> m3_325  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_321 -> m3_324  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_309 -> m3_313  [color=darkseagreen4, key=1, label=object, style=dashed];
m3_311 -> m3_313  [color=darkseagreen4, key=1, label=jsonSerializer, style=dashed];
m3_312 -> m3_314  [color=darkseagreen4, key=1, label=jsonReader, style=dashed];
m3_250 -> m3_281  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m3_277 -> m3_281  [color=darkseagreen4, key=1, label=sr, style=dashed];
m3_278 -> m3_281  [color=darkseagreen4, key=1, label=jsonSerializer, style=dashed];
m3_147 -> m3_153  [color=darkseagreen4, key=1, label=object, style=dashed];
m3_147 -> m3_155  [color=darkseagreen4, key=1, label=object, style=dashed];
m3_147 -> m3_157  [color=darkseagreen4, key=1, label=object, style=dashed];
m3_147 -> m3_159  [color=darkseagreen4, key=1, label=object, style=dashed];
m3_147 -> m3_161  [color=darkseagreen4, key=1, label=object, style=dashed];
m3_147 -> m3_163  [color=darkseagreen4, key=1, label=object, style=dashed];
m3_147 -> m3_165  [color=darkseagreen4, key=1, label=object, style=dashed];
m3_147 -> m3_167  [color=darkseagreen4, key=1, label=object, style=dashed];
m3_147 -> m3_169  [color=darkseagreen4, key=1, label=object, style=dashed];
m3_147 -> m3_171  [color=darkseagreen4, key=1, label=object, style=dashed];
m3_147 -> m3_173  [color=darkseagreen4, key=1, label=object, style=dashed];
m3_147 -> m3_175  [color=darkseagreen4, key=1, label=object, style=dashed];
m3_147 -> m3_177  [color=darkseagreen4, key=1, label=object, style=dashed];
m3_147 -> m3_179  [color=darkseagreen4, key=1, label=object, style=dashed];
m3_147 -> m3_181  [color=darkseagreen4, key=1, label=object, style=dashed];
m3_147 -> m3_185  [color=darkseagreen4, key=1, label=object, style=dashed];
m3_147 -> m3_187  [color=darkseagreen4, key=1, label=object, style=dashed];
m3_147 -> m3_189  [color=darkseagreen4, key=1, label=object, style=dashed];
m3_147 -> m3_191  [color=darkseagreen4, key=1, label=object, style=dashed];
m3_147 -> m3_193  [color=darkseagreen4, key=1, label=object, style=dashed];
m3_147 -> m3_195  [color=darkseagreen4, key=1, label=object, style=dashed];
m3_336 -> m3_338  [color=darkseagreen4, key=1, label=XmlNode, style=dashed];
m3_116 -> m3_119  [color=darkseagreen4, key=1, label=char, style=dashed];
m3_300 -> m3_304  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_301 -> m3_303  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_368 -> m3_372  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_369 -> m3_372  [color=darkseagreen4, key=1, label=converter, style=dashed];
m3_330 -> m3_332  [color=darkseagreen4, key=1, label=XmlNode, style=dashed];
m3_71 -> m3_92  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_71 -> m3_93  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_346 -> m3_350  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_347 -> m3_350  [color=darkseagreen4, key=1, label=converter, style=dashed];
m3_19 -> m3_22  [color=darkseagreen4, key=1, label="System.DateTimeOffset", style=dashed];
m3_20 -> m3_22  [color=darkseagreen4, key=1, label=writer, style=dashed];
m3_20 -> m3_23  [color=darkseagreen4, key=1, label=writer, style=dashed];
m3_20 -> m3_24  [color=darkseagreen4, key=1, label=writer, style=dashed];
m3_220 -> m3_226  [color=darkseagreen4, key=1, label=object, style=dashed];
m3_221 -> m3_226  [color=darkseagreen4, key=1, label=jsonSerializer, style=dashed];
m3_223 -> m3_227  [color=darkseagreen4, key=1, label=sw, style=dashed];
m3_224 -> m3_226  [color=darkseagreen4, key=1, label=jsonWriter, style=dashed];
m3_130 -> m3_133  [color=darkseagreen4, key=1, label="System.Uri", style=dashed];
m3_96 -> m3_98  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_96 -> m3_99  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_291 -> m3_295  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_292 -> m3_294  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m3_374 -> m3_245  [color=darkseagreen4, key=1, label=object, style=dashed];
m3_375 -> m3_245  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Formatting", style=dashed];
m3_376 -> m3_245  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonSerializerSettings", style=dashed];
m3_377 -> m3_295  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_378 -> m3_295  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonSerializerSettings", style=dashed];
m3_379 -> m3_304  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_380 -> m3_304  [color=darkseagreen4, key=1, label="System.Type", style=dashed];
m3_381 -> m3_304  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonSerializerSettings", style=dashed];
m3_382 -> m3_325  [color=darkseagreen4, key=1, label=string, style=dashed];
m3_383 -> m3_325  [color=darkseagreen4, key=1, label=object, style=dashed];
m3_384 -> m3_325  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonSerializerSettings", style=dashed];
m6_4 -> m6_7  [color=darkseagreen4, key=1, label=validatingReader, style=dashed];
m6_6 -> m6_24  [color=darkseagreen4, key=1, label=messages, style=dashed];
m6_6 -> m6_11  [color=darkseagreen4, key=1, label=messages, style=dashed];
m6_7 -> m6_24  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Schema.ValidationEventArgs", style=dashed];
m6_27 -> m6_24  [color=darkseagreen4, key=1, label=messages, style=dashed];
m7_24 -> m7_29  [color=darkseagreen4, key=1, label=ignoreAttributeOnClassTestClass, style=dashed];
m7_26 -> m7_29  [color=darkseagreen4, key=1, label=serializer, style=dashed];
m7_31 -> m7_33  [color=darkseagreen4, key=1, label=p, style=dashed];
m7_1 -> m7_8  [color=darkseagreen4, key=1, label=person, style=dashed];
m7_1 -> m7_9  [color=darkseagreen4, key=1, label=person, style=dashed];
m7_1 -> m7_10  [color=darkseagreen4, key=1, label=person, style=dashed];
m7_7 -> m7_9  [color=darkseagreen4, key=1, label=deserializedPerson, style=dashed];
m7_7 -> m7_10  [color=darkseagreen4, key=1, label=deserializedPerson, style=dashed];
m7_47 -> m7_49  [color=darkseagreen4, key=1, label=deserializedPrivateMembersClass, style=dashed];
m7_47 -> m7_50  [color=darkseagreen4, key=1, label=deserializedPrivateMembersClass, style=dashed];
m8_10 -> m8_70  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Schema.JsonSchemaNode", style=dashed];
m8_10 -> m8_74  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Schema.JsonSchemaNode", style=dashed];
m8_10 -> m8_78  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Schema.JsonSchemaNode", style=dashed];
m8_10 -> m8_82  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Schema.JsonSchemaNode", style=dashed];
m8_10 -> m8_86  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Schema.JsonSchemaNode", style=dashed];
m8_10 -> m8_88  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Schema.JsonSchemaNode", style=dashed];
m8_72 -> m8_75  [color=darkseagreen4, key=1, label=model, style=dashed];
m8_72 -> m8_79  [color=darkseagreen4, key=1, label=model, style=dashed];
m8_72 -> m8_83  [color=darkseagreen4, key=1, label=model, style=dashed];
m8_72 -> m8_85  [color=darkseagreen4, key=1, label=model, style=dashed];
m8_72 -> m8_90  [color=darkseagreen4, key=1, label=model, style=dashed];
m8_82 -> m8_85  [color=darkseagreen4, key=1, label=t, style=dashed];
m8_8 -> m8_12  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Schema.JsonSchemaNode", style=dashed];
m8_8 -> m8_13  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Schema.JsonSchemaNode", style=dashed];
m8_8 -> m8_14  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Schema.JsonSchemaNode", style=dashed];
m8_8 -> m8_21  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Schema.JsonSchema", style=dashed];
m8_8 -> m8_22  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Schema.JsonSchema", style=dashed];
m8_8 -> m8_23  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Schema.JsonSchema", style=dashed];
m8_8 -> m8_25  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Schema.JsonSchema", style=dashed];
m8_8 -> m8_26  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Schema.JsonSchema", style=dashed];
m8_8 -> m8_28  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Schema.JsonSchema", style=dashed];
m8_8 -> m8_29  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Schema.JsonSchema", style=dashed];
m8_8 -> m8_30  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Schema.JsonSchema", style=dashed];
m8_8 -> m8_31  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Schema.JsonSchema", style=dashed];
m8_8 -> m8_32  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Schema.JsonSchema", style=dashed];
m8_8 -> m8_33  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Schema.JsonSchema", style=dashed];
m8_15 -> m8_18  [color=darkseagreen4, key=1, label=newId, style=dashed];
m8_16 -> m8_18  [color=darkseagreen4, key=1, label=newId, style=dashed];
m8_19 -> m8_21  [color=darkseagreen4, key=1, label=currentNode, style=dashed];
m8_19 -> m8_22  [color=darkseagreen4, key=1, label=currentNode, style=dashed];
m8_19 -> m8_26  [color=darkseagreen4, key=1, label=currentNode, style=dashed];
m8_19 -> m8_29  [color=darkseagreen4, key=1, label=currentNode, style=dashed];
m8_19 -> m8_31  [color=darkseagreen4, key=1, label=currentNode, style=dashed];
m8_19 -> m8_35  [color=darkseagreen4, key=1, label=currentNode, style=dashed];
m8_34 -> m8_35  [color=darkseagreen4, key=1, label=currentNode, style=dashed];
m8_24 -> m8_26  [color=darkseagreen4, key=1, label=i, style=dashed];
m8_24 -> m8_27  [color=darkseagreen4, key=1, label=i, style=dashed];
m8_27 -> m8_27  [color=darkseagreen4, key=1, label=i, style=dashed];
m8_45 -> m8_60  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Schema.JsonSchemaNode", style=dashed];
m8_45 -> m8_61  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Schema.JsonSchemaNode", style=dashed];
m8_59 -> m8_61  [color=darkseagreen4, key=1, label=newItemNode, style=dashed];
m8_44 -> m8_49  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, Newtonsoft.Json.Schema.JsonSchema>", style=dashed];
m8_44 -> m8_50  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, Newtonsoft.Json.Schema.JsonSchemaNode>", style=dashed];
m8_50 -> m8_50  [color=darkseagreen4, key=1, label=property, style=dashed];
m8_52 -> m8_54  [color=darkseagreen4, key=1, label="System.Collections.Generic.IDictionary<string, Newtonsoft.Json.Schema.JsonSchemaNode>", style=dashed];
m8_96 -> m8_17  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Schema.JsonSchemaModelBuilder", style=dashed];
m8_96 -> m8_18  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Schema.JsonSchemaModelBuilder", style=dashed];
m8_96 -> m8_20  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Schema.JsonSchemaModelBuilder", style=dashed];
m8_96 -> m8_21  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Schema.JsonSchemaModelBuilder", style=dashed];
m8_96 -> m8_22  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Schema.JsonSchemaModelBuilder", style=dashed];
m8_96 -> m8_26  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Schema.JsonSchemaModelBuilder", style=dashed];
m8_96 -> m8_29  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Schema.JsonSchemaModelBuilder", style=dashed];
m8_96 -> m8_31  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Schema.JsonSchemaModelBuilder", style=dashed];
m8_96 -> m8_50  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Schema.JsonSchemaModelBuilder", style=dashed];
m8_96 -> m8_70  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Schema.JsonSchemaModelBuilder", style=dashed];
m8_96 -> m8_85  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Schema.JsonSchemaModelBuilder", style=dashed];
m11_4 -> m11_12  [color=darkseagreen4, key=1, label=string, style=dashed];
m11_4 -> m11_16  [color=darkseagreen4, key=1, label=string, style=dashed];
m11_5 -> m11_11  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_5 -> m11_8  [color=darkseagreen4, key=1, label=schema, style=dashed];
m11_7 -> m11_15  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m11_19 -> m11_12  [color=darkseagreen4, key=1, label=string, style=dashed];
m11_19 -> m11_16  [color=darkseagreen4, key=1, label=string, style=dashed];
m13_2 -> m13_5  [color=darkseagreen4, key=1, label=documents, style=dashed];
m13_9 -> m13_11  [color=darkseagreen4, key=1, label=preserveReferenacesObjects, style=dashed];
m14_14 -> m14_17  [color=darkseagreen4, key=1, label="System.Exception", style=dashed];
m14_28 -> m14_33  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Serialization.JsonContract", style=dashed];
m14_28 -> m14_36  [color=darkseagreen4, key=1, label="System.Exception", style=dashed];
m14_28 -> m14_38  [color=darkseagreen4, key=1, label="System.Exception", style=dashed];
m14_28 -> m14_39  [color=darkseagreen4, key=1, label=object, style=dashed];
m14_28 -> m14_40  [color=darkseagreen4, key=1, label=object, style=dashed];
m14_28 -> m14_42  [color=darkseagreen4, key=1, label=object, style=dashed];
m14_29 -> m14_40  [color=darkseagreen4, key=1, label=errorContext, style=dashed];
m14_29 -> m14_41  [color=darkseagreen4, key=1, label=errorContext, style=dashed];
m14_29 -> m14_42  [color=darkseagreen4, key=1, label=errorContext, style=dashed];
m14_29 -> m14_43  [color=darkseagreen4, key=1, label=errorContext, style=dashed];
m14_35 -> m14_38  [color=darkseagreen4, key=1, label=message, style=dashed];
m14_51 -> m14_15  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Serialization.JsonSerializerInternalBase", style=dashed];
m14_51 -> m14_17  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Serialization.JsonSerializerInternalBase", style=dashed];
m14_51 -> m14_19  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Serialization.JsonSerializerInternalBase", style=dashed];
m14_51 -> m14_24  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Serialization.JsonSerializerInternalBase", style=dashed];
m14_51 -> m14_30  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Serialization.JsonSerializerInternalBase", style=dashed];
m14_51 -> m14_38  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Serialization.JsonSerializerInternalBase", style=dashed];
m14_51 -> m14_40  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Serialization.JsonSerializerInternalBase", style=dashed];
m14_51 -> m14_42  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Serialization.JsonSerializerInternalBase", style=dashed];
m17_55 -> m17_57  [color=darkseagreen4, key=1, label=p, style=dashed];
m17_55 -> m17_58  [color=darkseagreen4, key=1, label=p, style=dashed];
m17_91 -> m17_93  [color=darkseagreen4, key=1, label=b1, style=dashed];
m17_453 -> m17_455  [color=darkseagreen4, key=1, label="System.Dynamic.BinaryOperationBinder", style=dashed];
m17_453 -> m17_482  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JValue", style=dashed];
m17_454 -> m17_482  [color=darkseagreen4, key=1, label=compareValue, style=dashed];
m17_485 -> m17_487  [color=darkseagreen4, key=1, label="out object", style=dashed];
m17_127 -> m17_129  [color=darkseagreen4, key=1, label=uri1, style=dashed];
m17_129 -> m17_129  [color=darkseagreen4, key=1, label=s, style=dashed];
m17_274 -> m17_278  [color=darkseagreen4, key=1, label=collection, style=dashed];
m17_274 -> m17_281  [color=darkseagreen4, key=1, label=collection, style=dashed];
m17_158 -> m17_160  [color=darkseagreen4, key=1, label=d1, style=dashed];
m17_275 -> m17_278  [color=darkseagreen4, key=1, label=object, style=dashed];
m17_275 -> m17_280  [color=darkseagreen4, key=1, label=object, style=dashed];
m17_275 -> m17_281  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JTokenType?", style=dashed];
m17_275 -> m17_282  [color=darkseagreen4, key=1, label=object, style=dashed];
m17_275 -> m17_284  [color=darkseagreen4, key=1, label=object, style=dashed];
m17_275 -> m17_286  [color=darkseagreen4, key=1, label=object, style=dashed];
m17_275 -> m17_288  [color=darkseagreen4, key=1, label=object, style=dashed];
m17_275 -> m17_294  [color=darkseagreen4, key=1, label=object, style=dashed];
m17_275 -> m17_296  [color=darkseagreen4, key=1, label=object, style=dashed];
m17_275 -> m17_298  [color=darkseagreen4, key=1, label=object, style=dashed];
m17_275 -> m17_300  [color=darkseagreen4, key=1, label=object, style=dashed];
m17_275 -> m17_302  [color=darkseagreen4, key=1, label=object, style=dashed];
m17_275 -> m17_304  [color=darkseagreen4, key=1, label=object, style=dashed];
m17_277 -> m17_280  [color=darkseagreen4, key=1, label=sw, style=dashed];
m17_277 -> m17_279  [color=darkseagreen4, key=1, label=sw, style=dashed];
m17_31 -> m17_34  [color=darkseagreen4, key=1, label=other, style=dashed];
m17_31 -> m17_36  [color=darkseagreen4, key=1, label=other, style=dashed];
m17_162 -> m17_165  [color=darkseagreen4, key=1, label=a2, style=dashed];
m17_161 -> m17_164  [color=darkseagreen4, key=1, label=a1, style=dashed];
m17_163 -> m17_165  [color=darkseagreen4, key=1, label=articles1, style=dashed];
m17_163 -> m17_166  [color=darkseagreen4, key=1, label=articles1, style=dashed];
m17_163 -> m17_169  [color=darkseagreen4, key=1, label=articles1, style=dashed];
m17_65 -> m17_70  [color=darkseagreen4, key=1, label=jsonText, style=dashed];
m17_65 -> m17_72  [color=darkseagreen4, key=1, label=jsonText, style=dashed];
m17_63 -> m17_65  [color=darkseagreen4, key=1, label=testDictionary, style=dashed];
m17_62 -> m17_68  [color=darkseagreen4, key=1, label=dateValue, style=dashed];
m17_62 -> m17_64  [color=darkseagreen4, key=1, label=dateValue, style=dashed];
m17_96 -> m17_101  [color=darkseagreen4, key=1, label=date1, style=dashed];
m17_16 -> m17_18  [color=darkseagreen4, key=1, label=rocket, style=dashed];
m17_16 -> m17_21  [color=darkseagreen4, key=1, label=rocket, style=dashed];
m17_60 -> m17_63  [color=darkseagreen4, key=1, label=object, style=dashed];
m17_60 -> m17_65  [color=darkseagreen4, key=1, label=object, style=dashed];
m17_60 -> m17_67  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JTokenType", style=dashed];
m17_60 -> m17_69  [color=darkseagreen4, key=1, label=object, style=dashed];
m17_60 -> m17_70  [color=darkseagreen4, key=1, label=object, style=dashed];
m17_60 -> m17_71  [color=darkseagreen4, key=1, label=object, style=dashed];
m17_60 -> m17_72  [color=darkseagreen4, key=1, label=object, style=dashed];
m17_60 -> m17_73  [color=darkseagreen4, key=1, label=object, style=dashed];
m17_60 -> m17_74  [color=darkseagreen4, key=1, label=object, style=dashed];
m17_60 -> m17_75  [color=darkseagreen4, key=1, label=object, style=dashed];
m17_60 -> m17_76  [color=darkseagreen4, key=1, label=object, style=dashed];
m17_60 -> m17_83  [color=darkseagreen4, key=1, label=object, style=dashed];
m17_60 -> m17_87  [color=darkseagreen4, key=1, label=object, style=dashed];
m17_60 -> m17_88  [color=darkseagreen4, key=1, label=object, style=dashed];
m17_60 -> m17_95  [color=darkseagreen4, key=1, label=object, style=dashed];
m17_60 -> m17_98  [color=darkseagreen4, key=1, label=object, style=dashed];
m17_60 -> m17_106  [color=darkseagreen4, key=1, label=object, style=dashed];
m17_60 -> m17_109  [color=darkseagreen4, key=1, label=object, style=dashed];
m17_60 -> m17_111  [color=darkseagreen4, key=1, label=object, style=dashed];
m17_60 -> m17_119  [color=darkseagreen4, key=1, label=object, style=dashed];
m17_60 -> m17_121  [color=darkseagreen4, key=1, label=object, style=dashed];
m17_60 -> m17_122  [color=darkseagreen4, key=1, label=object, style=dashed];
m17_60 -> m17_125  [color=darkseagreen4, key=1, label=object, style=dashed];
m17_60 -> m17_131  [color=darkseagreen4, key=1, label=object, style=dashed];
m17_141 -> m17_147  [color=darkseagreen4, key=1, label=test, style=dashed];
m17_141 -> m17_148  [color=darkseagreen4, key=1, label=test, style=dashed];
m17_141 -> m17_143  [color=darkseagreen4, key=1, label=test, style=dashed];
m17_396 -> m17_399  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JValue", style=dashed];
m17_146 -> m17_148  [color=darkseagreen4, key=1, label=test2, style=dashed];
m17_102 -> m17_107  [color=darkseagreen4, key=1, label=date1, style=dashed];
m17_290 -> m17_293  [color=darkseagreen4, key=1, label=jsonSerializer, style=dashed];
m17_302 -> m17_4  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Tests.Product", style=dashed];
m17_302 -> m17_3  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Tests.Product", style=dashed];
m17_302 -> m17_8  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Tests.Product", style=dashed];
m17_289 -> m17_293  [color=darkseagreen4, key=1, label=s1, style=dashed];
m17_289 -> m17_300  [color=darkseagreen4, key=1, label=s1, style=dashed];
m17_297 -> m17_300  [color=darkseagreen4, key=1, label=s3, style=dashed];
m17_303 -> m17_14  [color=green, key=1, label="Newtonsoft.Json.Tests.Store", style=dashed];
m17_303 -> m17_12  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Tests.Store", style=dashed];
m17_303 -> m17_13  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Tests.Store", style=dashed];
m17_303 -> m17_15  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Tests.Store", style=dashed];
m17_303 -> m17_21  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Tests.Store", style=dashed];
m17_303 -> m17_22  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Tests.Store", style=dashed];
m17_0 -> m17_4  [color=darkseagreen4, key=1, label=object, style=dashed];
m17_77 -> m17_83  [color=darkseagreen4, key=1, label=executorObject, style=dashed];
m17_82 -> m17_84  [color=darkseagreen4, key=1, label=executorObject2, style=dashed];
m17_82 -> m17_85  [color=darkseagreen4, key=1, label=executorObject2, style=dashed];
m17_82 -> m17_87  [color=darkseagreen4, key=1, label=executorObject2, style=dashed];
m17_82 -> m17_86  [color=darkseagreen4, key=1, label=executorObject2, style=dashed];
m17_87 -> m17_89  [color=darkseagreen4, key=1, label=s1, style=dashed];
m17_111 -> m17_117  [color=darkseagreen4, key=1, label=bytes1, style=dashed];
m17_112 -> m17_115  [color=darkseagreen4, key=1, label=bytes2, style=dashed];
m17_112 -> m17_117  [color=darkseagreen4, key=1, label=bytes2, style=dashed];
m17_121 -> m17_123  [color=darkseagreen4, key=1, label=guid1, style=dashed];
m17_133 -> m17_135  [color=darkseagreen4, key=1, label=ts1, style=dashed];
m17_107 -> m17_107  [color=darkseagreen4, key=1, label=date1, style=dashed];
m17_120 -> m17_122  [color=darkseagreen4, key=1, label=c, style=dashed];
m17_123 -> m17_123  [color=darkseagreen4, key=1, label=guid1, style=dashed];
m17_135 -> m17_135  [color=darkseagreen4, key=1, label=ts1, style=dashed];
m17_423 -> m17_431  [color=darkseagreen4, key=1, label=string, style=dashed];
m17_429 -> m17_431  [color=darkseagreen4, key=1, label=formattable, style=dashed];
m17_306 -> m17_310  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JTokenType?", style=dashed];
m17_306 -> m17_314  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JTokenType?", style=dashed];
m17_165 -> m17_167  [color=darkseagreen4, key=1, label="System.Linq.Expressions.ExpressionType", style=dashed];
m17_165 -> m17_170  [color=darkseagreen4, key=1, label=object, style=dashed];
m17_165 -> m17_171  [color=darkseagreen4, key=1, label=object, style=dashed];
m17_165 -> m17_176  [color=darkseagreen4, key=1, label="System.Linq.Expressions.ExpressionType", style=dashed];
m17_165 -> m17_193  [color=darkseagreen4, key=1, label=object, style=dashed];
m17_165 -> m17_194  [color=darkseagreen4, key=1, label=object, style=dashed];
m17_165 -> m17_199  [color=darkseagreen4, key=1, label="System.Linq.Expressions.ExpressionType", style=dashed];
m17_165 -> m17_216  [color=darkseagreen4, key=1, label=object, style=dashed];
m17_165 -> m17_217  [color=darkseagreen4, key=1, label=object, style=dashed];
m17_165 -> m17_220  [color=darkseagreen4, key=1, label=object, style=dashed];
m17_165 -> m17_221  [color=darkseagreen4, key=1, label=object, style=dashed];
m17_165 -> m17_222  [color=darkseagreen4, key=1, label="System.Linq.Expressions.ExpressionType", style=dashed];
m17_165 -> m17_239  [color=darkseagreen4, key=1, label=object, style=dashed];
m17_165 -> m17_240  [color=darkseagreen4, key=1, label=object, style=dashed];
m17_165 -> m17_244  [color=darkseagreen4, key=1, label=object, style=dashed];
m17_165 -> m17_245  [color=darkseagreen4, key=1, label="System.Linq.Expressions.ExpressionType", style=dashed];
m17_167 -> m17_169  [color=darkseagreen4, key=1, label=articles2, style=dashed];
m17_189 -> m17_192  [color=darkseagreen4, key=1, label=product, style=dashed];
m17_189 -> m17_193  [color=darkseagreen4, key=1, label=product, style=dashed];
m17_189 -> m17_194  [color=darkseagreen4, key=1, label=product, style=dashed];
m17_195 -> m17_199  [color=darkseagreen4, key=1, label=jsonSerializer, style=dashed];
m17_200 -> m17_203  [color=darkseagreen4, key=1, label=deserializedProductShort, style=dashed];
m17_200 -> m17_204  [color=darkseagreen4, key=1, label=deserializedProductShort, style=dashed];
m17_200 -> m17_205  [color=darkseagreen4, key=1, label=deserializedProductShort, style=dashed];
m17_174 -> m17_179  [color=darkseagreen4, key=1, label=i1, style=dashed];
m17_174 -> m17_187  [color=darkseagreen4, key=1, label=i1, style=dashed];
m17_175 -> m17_179  [color=darkseagreen4, key=1, label=i2, style=dashed];
m17_175 -> m17_187  [color=darkseagreen4, key=1, label=i2, style=dashed];
m17_220 -> m17_225  [color=darkseagreen4, key=1, label=d1, style=dashed];
m17_220 -> m17_229  [color=darkseagreen4, key=1, label=d1, style=dashed];
m17_220 -> m17_233  [color=darkseagreen4, key=1, label=d1, style=dashed];
m17_220 -> m17_237  [color=darkseagreen4, key=1, label=d1, style=dashed];
m17_221 -> m17_225  [color=darkseagreen4, key=1, label=d2, style=dashed];
m17_221 -> m17_229  [color=darkseagreen4, key=1, label=d2, style=dashed];
m17_221 -> m17_233  [color=darkseagreen4, key=1, label=d2, style=dashed];
m17_221 -> m17_237  [color=darkseagreen4, key=1, label=d2, style=dashed];
m17_243 -> m17_248  [color=darkseagreen4, key=1, label=l1, style=dashed];
m17_243 -> m17_252  [color=darkseagreen4, key=1, label=l1, style=dashed];
m17_243 -> m17_256  [color=darkseagreen4, key=1, label=l1, style=dashed];
m17_244 -> m17_248  [color=darkseagreen4, key=1, label=l2, style=dashed];
m17_244 -> m17_252  [color=darkseagreen4, key=1, label=l2, style=dashed];
m17_244 -> m17_256  [color=darkseagreen4, key=1, label=l2, style=dashed];
m17_173 -> m17_176  [color=darkseagreen4, key=1, label=r1, style=dashed];
m17_214 -> m17_217  [color=darkseagreen4, key=1, label=dataContractResult, style=dashed];
m17_215 -> m17_217  [color=darkseagreen4, key=1, label=jsonNetResult, style=dashed];
m17_231 -> m17_233  [color=darkseagreen4, key=1, label=expected, style=dashed];
m17_224 -> m17_228  [color=darkseagreen4, key=1, label=testDates, style=dashed];
m17_226 -> m17_228  [color=darkseagreen4, key=1, label=ms, style=dashed];
m17_226 -> m17_229  [color=darkseagreen4, key=1, label=ms, style=dashed];
m17_262 -> m17_264  [color=darkseagreen4, key=1, label="out object", style=dashed];
m17_250 -> m17_256  [color=darkseagreen4, key=1, label=values, style=dashed];
m17_250 -> m17_252  [color=darkseagreen4, key=1, label=values, style=dashed];
m17_263 -> m17_265  [color=darkseagreen4, key=1, label=anonymous, style=dashed];
m17_263 -> m17_266  [color=darkseagreen4, key=1, label=anonymous, style=dashed];
m17_263 -> m17_267  [color=darkseagreen4, key=1, label=anonymous, style=dashed];
m17_263 -> m17_268  [color=darkseagreen4, key=1, label=anonymous, style=dashed];
m17_263 -> m17_269  [color=darkseagreen4, key=1, label=anonymous, style=dashed];
m17_263 -> m17_270  [color=darkseagreen4, key=1, label=anonymous, style=dashed];
m17_440 -> m17_447  [color=darkseagreen4, key=1, label="System.Dynamic.ConvertBinder", style=dashed];
m17_448 -> m17_450  [color=darkseagreen4, key=1, label="out object", style=dashed];
m17_19 -> m17_22  [color=darkseagreen4, key=1, label=alien, style=dashed];
m17_317 -> m17_321  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonWriter", style=dashed];
m17_317 -> m17_325  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonWriter", style=dashed];
m17_317 -> m17_328  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonWriter", style=dashed];
m17_317 -> m17_331  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonWriter", style=dashed];
m17_317 -> m17_334  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonWriter", style=dashed];
m17_317 -> m17_338  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonWriter", style=dashed];
m17_317 -> m17_339  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonWriter", style=dashed];
m17_317 -> m17_343  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonWriter", style=dashed];
m17_317 -> m17_345  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonWriter", style=dashed];
m17_317 -> m17_347  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonWriter", style=dashed];
m17_317 -> m17_348  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonWriter", style=dashed];
m17_317 -> m17_351  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonWriter", style=dashed];
m17_317 -> m17_354  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonWriter", style=dashed];
m17_317 -> m17_358  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonWriter", style=dashed];
m17_317 -> m17_359  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonWriter", style=dashed];
m17_317 -> m17_362  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonWriter", style=dashed];
m17_317 -> m17_367  [color=darkseagreen4, key=1, label="Newtonsoft.Json.JsonWriter", style=dashed];
m17_319 -> m17_321  [color=darkseagreen4, key=1, label=matchingConverter, style=dashed];
m17_39 -> m17_44  [color=darkseagreen4, key=1, label=object, style=dashed];
m17_39 -> m17_46  [color=darkseagreen4, key=1, label=object, style=dashed];
m17_39 -> m17_47  [color=darkseagreen4, key=1, label=object, style=dashed];
m17_40 -> m17_49  [color=darkseagreen4, key=1, label=result, style=dashed];
m17_43 -> m17_45  [color=darkseagreen4, key=1, label=deserializedProduct, style=dashed];
m17_43 -> m17_47  [color=darkseagreen4, key=1, label=deserializedProduct, style=dashed];
m17_43 -> m17_48  [color=darkseagreen4, key=1, label=deserializedProduct, style=dashed];
m17_43 -> m17_49  [color=darkseagreen4, key=1, label=deserializedProduct, style=dashed];
m17_494 -> m17_497  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JValue", style=dashed];
m17_401 -> m17_407  [color=darkseagreen4, key=1, label=object, style=dashed];
m17_404 -> m17_406  [color=darkseagreen4, key=1, label=otherValue, style=dashed];
m17_555 -> m17_34  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JValue", style=dashed];
m17_555 -> m17_36  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JValue", style=dashed];
m17_555 -> m17_267  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JValue", style=dashed];
m17_555 -> m17_318  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JValue", style=dashed];
m17_555 -> m17_321  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JValue", style=dashed];
m17_555 -> m17_323  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JValue", style=dashed];
m17_555 -> m17_325  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JValue", style=dashed];
m17_555 -> m17_328  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JValue", style=dashed];
m17_555 -> m17_337  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JValue", style=dashed];
m17_555 -> m17_338  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JValue", style=dashed];
m17_555 -> m17_339  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JValue", style=dashed];
m17_555 -> m17_342  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JValue", style=dashed];
m17_555 -> m17_343  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JValue", style=dashed];
m17_555 -> m17_344  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JValue", style=dashed];
m17_555 -> m17_345  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JValue", style=dashed];
m17_555 -> m17_346  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JValue", style=dashed];
m17_555 -> m17_347  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JValue", style=dashed];
m17_555 -> m17_348  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JValue", style=dashed];
m17_555 -> m17_351  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JValue", style=dashed];
m17_555 -> m17_354  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JValue", style=dashed];
m17_555 -> m17_357  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JValue", style=dashed];
m17_555 -> m17_358  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JValue", style=dashed];
m17_555 -> m17_359  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JValue", style=dashed];
m17_555 -> m17_362  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JValue", style=dashed];
m17_555 -> m17_367  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JValue", style=dashed];
m17_555 -> m17_370  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JValue", style=dashed];
m17_555 -> m17_390  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JValue", style=dashed];
m17_555 -> m17_399  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JValue", style=dashed];
m17_555 -> m17_406  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JValue", style=dashed];
m17_555 -> m17_407  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JValue", style=dashed];
m17_555 -> m17_411  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JValue", style=dashed];
m17_555 -> m17_413  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JValue", style=dashed];
m17_555 -> m17_416  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JValue", style=dashed];
m17_555 -> m17_418  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JValue", style=dashed];
m17_555 -> m17_421  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JValue", style=dashed];
m17_555 -> m17_425  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JValue", style=dashed];
m17_555 -> m17_427  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JValue", style=dashed];
m17_555 -> m17_432  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JValue", style=dashed];
m17_555 -> m17_436  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JValue", style=dashed];
m17_555 -> m17_492  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JValue", style=dashed];
m17_555 -> m17_497  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JValue", style=dashed];
m17_555 -> m17_500  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JValue", style=dashed];
m17_555 -> m17_502  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JValue", style=dashed];
m17_555 -> m17_504  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JValue", style=dashed];
m17_555 -> m17_506  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JValue", style=dashed];
m17_555 -> m17_510  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JValue", style=dashed];
m17_555 -> m17_513  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JValue", style=dashed];
m17_555 -> m17_516  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JValue", style=dashed];
m17_555 -> m17_519  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JValue", style=dashed];
m17_555 -> m17_522  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JValue", style=dashed];
m17_555 -> m17_525  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JValue", style=dashed];
m17_555 -> m17_528  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JValue", style=dashed];
m17_555 -> m17_531  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JValue", style=dashed];
m17_555 -> m17_534  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JValue", style=dashed];
m17_555 -> m17_537  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JValue", style=dashed];
m17_555 -> m17_540  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JValue", style=dashed];
m17_555 -> m17_543  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JValue", style=dashed];
m17_555 -> m17_546  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JValue", style=dashed];
m17_555 -> m17_549  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JValue", style=dashed];
m17_555 -> m17_552  [color=darkseagreen4, key=1, label="Newtonsoft.Json.Linq.JValue", style=dashed];
m18_86 -> m18_88  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_10 -> m18_12  [color=green, key=1, label=nowTicks, style=dashed];
m18_2 -> m18_4  [color=darkseagreen4, key=1, label=json, style=dashed];
m18_24 -> m18_28  [color=darkseagreen4, key=1, label=converter, style=dashed];
m18_25 -> m18_27  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_17 -> m18_20  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_115 -> m18_117  [color=darkseagreen4, key=1, label=l2, style=dashed];
m18_115 -> m18_118  [color=darkseagreen4, key=1, label=l2, style=dashed];
m18_125 -> m18_127  [color=darkseagreen4, key=1, label=obj2, style=dashed];
m18_125 -> m18_129  [color=darkseagreen4, key=1, label=obj2, style=dashed];
m18_125 -> m18_128  [color=darkseagreen4, key=1, label=obj2, style=dashed];
m18_53 -> m18_55  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_92 -> m18_94  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_71 -> m18_73  [color=darkseagreen4, key=1, label="lambda expression", style=dashed];
m18_101 -> m18_103  [color=darkseagreen4, key=1, label=l2, style=dashed];
m18_101 -> m18_104  [color=darkseagreen4, key=1, label=l2, style=dashed];
m18_132 -> m18_28  [color=darkseagreen4, key=1, label=converter, style=dashed];
}
