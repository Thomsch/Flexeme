digraph  {
m0_157 [label="Entry Unk.GetClrTypeFullName", span="", cluster="Unk.GetClrTypeFullName", file="DefaultContractResolver.cs"];
m0_153 [label="Entry Unk.MemberType", span="", cluster="Unk.MemberType", file="DefaultContractResolver.cs"];
m0_439 [label="Entry Newtonsoft.Json.Serialization.JsonDictionaryContract.JsonDictionaryContract(System.Type)", span="115-115", cluster="Newtonsoft.Json.Serialization.JsonDictionaryContract.JsonDictionaryContract(System.Type)", file="DefaultContractResolver.cs"];
m0_20 [label="Entry Newtonsoft.Json.Serialization.DefaultContractResolver.CreateContract(System.Type)", span="1121-1121", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateContract(System.Type)", file="DefaultContractResolver.cs"];
m0_478 [label="IsJsonPrimitiveType(objectType)", span="1123-1123", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateContract(System.Type)", file="DefaultContractResolver.cs"];
m0_479 [label="return CreatePrimitiveContract(objectType);", span="1125-1125", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateContract(System.Type)", file="DefaultContractResolver.cs"];
m0_480 [label="Type t = ReflectionUtils.EnsureNotNullableType(objectType)", span="1128-1128", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateContract(System.Type)", file="DefaultContractResolver.cs"];
m0_483 [label="return CreateObjectContract(objectType);", span="1133-1133", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateContract(System.Type)", file="DefaultContractResolver.cs"];
m0_485 [label="return CreateArrayContract(objectType);", span="1138-1138", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateContract(System.Type)", file="DefaultContractResolver.cs"];
m0_487 [label="return CreateDictionaryContract(objectType);", span="1143-1143", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateContract(System.Type)", file="DefaultContractResolver.cs"];
m0_489 [label="return CreateLinqContract(objectType);", span="1148-1148", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateContract(System.Type)", file="DefaultContractResolver.cs"];
m0_491 [label="return CreateDictionaryContract(objectType);", span="1153-1153", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateContract(System.Type)", file="DefaultContractResolver.cs"];
m0_493 [label="return CreateArrayContract(objectType);", span="1158-1158", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateContract(System.Type)", file="DefaultContractResolver.cs"];
m0_495 [label="return CreateStringContract(objectType);", span="1163-1163", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateContract(System.Type)", file="DefaultContractResolver.cs"];
m0_496 [label="return CreateObjectContract(objectType);", span="1188-1188", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateContract(System.Type)", file="DefaultContractResolver.cs"];
m0_481 [label="JsonContainerAttribute containerAttribute = JsonTypeReflector.GetCachedAttribute<JsonContainerAttribute>(t)", span="1129-1129", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateContract(System.Type)", file="DefaultContractResolver.cs"];
m0_488 [label="t == typeof(JToken) || t.IsSubclassOf(typeof(JToken))", span="1146-1146", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateContract(System.Type)", file="DefaultContractResolver.cs"];
m0_490 [label="CollectionUtils.IsDictionaryType(t)", span="1151-1151", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateContract(System.Type)", file="DefaultContractResolver.cs"];
m0_492 [label="typeof(IEnumerable).IsAssignableFrom(t)", span="1156-1156", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateContract(System.Type)", file="DefaultContractResolver.cs"];
m0_494 [label="CanConvertToString(t)", span="1161-1161", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateContract(System.Type)", file="DefaultContractResolver.cs"];
m0_482 [label="containerAttribute is JsonObjectAttribute", span="1131-1131", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateContract(System.Type)", file="DefaultContractResolver.cs"];
m0_484 [label="containerAttribute is JsonArrayAttribute", span="1136-1136", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateContract(System.Type)", file="DefaultContractResolver.cs"];
m0_486 [label="containerAttribute is JsonDictionaryAttribute", span="1141-1141", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateContract(System.Type)", file="DefaultContractResolver.cs"];
m0_497 [label="Exit Newtonsoft.Json.Serialization.DefaultContractResolver.CreateContract(System.Type)", span="1121-1121", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateContract(System.Type)", file="DefaultContractResolver.cs"];
m0_202 [label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="391-391", cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", file="DefaultContractResolver.cs"];
m0_161 [label="Entry System.Type.GetGenericArguments()", span="0-0", cluster="System.Type.GetGenericArguments()", file="DefaultContractResolver.cs"];
m0_587 [label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.CanReadMemberValue(System.Reflection.MemberInfo, bool)", span="562-562", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.CanReadMemberValue(System.Reflection.MemberInfo, bool)", file="DefaultContractResolver.cs"];
m0_215 [label="Entry Newtonsoft.Json.Serialization.Func<TResult>.Invoke()", span="3038-3038", cluster="Newtonsoft.Json.Serialization.Func<TResult>.Invoke()", file="DefaultContractResolver.cs"];
m0_537 [label="Entry System.Type.ContainsGenericParameters()", span="135-135", cluster="System.Type.ContainsGenericParameters()", file="DefaultContractResolver.cs"];
m0_199 [label="Entry System.Type.GetMethod(string, System.Type[])", span="0-0", cluster="System.Type.GetMethod(string, System.Type[])", file="DefaultContractResolver.cs"];
m0_556 [label="Entry Unk.ToList", span="", cluster="Unk.ToList", file="DefaultContractResolver.cs"];
m0_339 [label="Entry Newtonsoft.Json.JsonSerializer.GetMatchingConverter(System.Collections.Generic.IList<Newtonsoft.Json.JsonConverter>, System.Type)", span="1159-1159", cluster="Newtonsoft.Json.JsonSerializer.GetMatchingConverter(System.Collections.Generic.IList<Newtonsoft.Json.JsonConverter>, System.Type)", file="DefaultContractResolver.cs"];
m0_52 [label="Entry System.Reflection.MemberInfo.IsDefined(System.Type, bool)", span="0-0", cluster="System.Reflection.MemberInfo.IsDefined(System.Type, bool)", file="DefaultContractResolver.cs"];
m0_105 [label="Entry System.Collections.Generic.IList<T>.AddRange<T>(System.Collections.Generic.IEnumerable<T>)", span="68-68", cluster="System.Collections.Generic.IList<T>.AddRange<T>(System.Collections.Generic.IEnumerable<T>)", file="DefaultContractResolver.cs"];
m0_248 [label="Entry System.Type.GetConstructors(System.Reflection.BindingFlags)", span="0-0", cluster="System.Type.GetConstructors(System.Reflection.BindingFlags)", file="DefaultContractResolver.cs"];
m0_112 [label="Entry System.Type.IsValueType()", span="535-535", cluster="System.Type.IsValueType()", file="DefaultContractResolver.cs"];
m0_250 [label="Entry System.Collections.IEnumerator.MoveNext()", span="0-0", cluster="System.Collections.IEnumerator.MoveNext()", file="DefaultContractResolver.cs"];
m0_55 [label="Entry Newtonsoft.Json.Serialization.JsonTypeReflector.GetAttribute<T>(object)", span="415-415", cluster="Newtonsoft.Json.Serialization.JsonTypeReflector.GetAttribute<T>(object)", file="DefaultContractResolver.cs"];
m0_110 [label="Entry Newtonsoft.Json.Serialization.DefaultContractResolver.CreateConstructorParameters(System.Reflection.ConstructorInfo, Newtonsoft.Json.Serialization.JsonPropertyCollection)", span="643-643", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateConstructorParameters(System.Reflection.ConstructorInfo, Newtonsoft.Json.Serialization.JsonPropertyCollection)", file="DefaultContractResolver.cs"];
m0_276 [label="ParameterInfo[] constructorParameters = constructor.GetParameters()", span="645-645", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateConstructorParameters(System.Reflection.ConstructorInfo, Newtonsoft.Json.Serialization.JsonPropertyCollection)", file="DefaultContractResolver.cs"];
m0_277 [label="JsonPropertyCollection parameterCollection = new JsonPropertyCollection(constructor.DeclaringType)", span="647-647", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateConstructorParameters(System.Reflection.ConstructorInfo, Newtonsoft.Json.Serialization.JsonPropertyCollection)", file="DefaultContractResolver.cs"];
m0_279 [label="JsonProperty matchingMemberProperty = MatchProperty(memberProperties, parameterInfo.Name, parameterInfo.ParameterType)", span="651-651", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateConstructorParameters(System.Reflection.ConstructorInfo, Newtonsoft.Json.Serialization.JsonPropertyCollection)", file="DefaultContractResolver.cs"];
m0_278 [label=constructorParameters, span="649-649", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateConstructorParameters(System.Reflection.ConstructorInfo, Newtonsoft.Json.Serialization.JsonPropertyCollection)", file="DefaultContractResolver.cs"];
m0_283 [label="parameterCollection.AddProperty(property)", span="661-661", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateConstructorParameters(System.Reflection.ConstructorInfo, Newtonsoft.Json.Serialization.JsonPropertyCollection)", file="DefaultContractResolver.cs"];
m0_284 [label="return parameterCollection;", span="666-666", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateConstructorParameters(System.Reflection.ConstructorInfo, Newtonsoft.Json.Serialization.JsonPropertyCollection)", file="DefaultContractResolver.cs"];
m0_280 [label="matchingMemberProperty != null || parameterInfo.Name != null", span="655-655", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateConstructorParameters(System.Reflection.ConstructorInfo, Newtonsoft.Json.Serialization.JsonPropertyCollection)", file="DefaultContractResolver.cs"];
m0_281 [label="JsonProperty property = CreatePropertyFromConstructorParameter(matchingMemberProperty, parameterInfo)", span="657-657", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateConstructorParameters(System.Reflection.ConstructorInfo, Newtonsoft.Json.Serialization.JsonPropertyCollection)", file="DefaultContractResolver.cs"];
m0_282 [label="property != null", span="659-659", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateConstructorParameters(System.Reflection.ConstructorInfo, Newtonsoft.Json.Serialization.JsonPropertyCollection)", file="DefaultContractResolver.cs"];
m0_285 [label="Exit Newtonsoft.Json.Serialization.DefaultContractResolver.CreateConstructorParameters(System.Reflection.ConstructorInfo, Newtonsoft.Json.Serialization.JsonPropertyCollection)", span="643-643", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateConstructorParameters(System.Reflection.ConstructorInfo, Newtonsoft.Json.Serialization.JsonPropertyCollection)", file="DefaultContractResolver.cs"];
m0_0 [label="Entry Newtonsoft.Json.Serialization.DefaultContractResolver.DefaultContractResolver()", span="157-157", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.DefaultContractResolver()", file="DefaultContractResolver.cs"];
m0_1 [label="DefaultMembersSearchFlags = BindingFlags.Instance | BindingFlags.Public", span="164-164", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.DefaultContractResolver()", file="DefaultContractResolver.cs"];
m0_2 [label="Exit Newtonsoft.Json.Serialization.DefaultContractResolver.DefaultContractResolver()", span="157-157", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.DefaultContractResolver()", file="DefaultContractResolver.cs"];
m0_342 [label="Entry Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveCallbackMethods(Newtonsoft.Json.Serialization.JsonContract, System.Type)", span="784-784", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveCallbackMethods(Newtonsoft.Json.Serialization.JsonContract, System.Type)", file="DefaultContractResolver.cs"];
m0_343 [label="List<SerializationCallback> onSerializing", span="786-786", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveCallbackMethods(Newtonsoft.Json.Serialization.JsonContract, System.Type)", file="DefaultContractResolver.cs"];
m0_348 [label="GetCallbackMethodsForType(t, out onSerializing, out onSerialized, out onDeserializing, out onDeserialized, out onError)", span="792-792", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveCallbackMethods(Newtonsoft.Json.Serialization.JsonContract, System.Type)", file="DefaultContractResolver.cs"];
m0_350 [label="contract.OnSerializingCallbacks.AddRange(onSerializing)", span="796-796", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveCallbackMethods(Newtonsoft.Json.Serialization.JsonContract, System.Type)", file="DefaultContractResolver.cs"];
m0_352 [label="contract.OnSerializedCallbacks.AddRange(onSerialized)", span="801-801", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveCallbackMethods(Newtonsoft.Json.Serialization.JsonContract, System.Type)", file="DefaultContractResolver.cs"];
m0_354 [label="contract.OnDeserializingCallbacks.AddRange(onDeserializing)", span="806-806", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveCallbackMethods(Newtonsoft.Json.Serialization.JsonContract, System.Type)", file="DefaultContractResolver.cs"];
m0_356 [label="contract.OnDeserializedCallbacks.AddRange(onDeserialized)", span="811-811", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveCallbackMethods(Newtonsoft.Json.Serialization.JsonContract, System.Type)", file="DefaultContractResolver.cs"];
m0_358 [label="contract.OnErrorCallbacks.AddRange(onError)", span="816-816", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveCallbackMethods(Newtonsoft.Json.Serialization.JsonContract, System.Type)", file="DefaultContractResolver.cs"];
m0_344 [label="List<SerializationCallback> onSerialized", span="787-787", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveCallbackMethods(Newtonsoft.Json.Serialization.JsonContract, System.Type)", file="DefaultContractResolver.cs"];
m0_345 [label="List<SerializationCallback> onDeserializing", span="788-788", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveCallbackMethods(Newtonsoft.Json.Serialization.JsonContract, System.Type)", file="DefaultContractResolver.cs"];
m0_346 [label="List<SerializationCallback> onDeserialized", span="789-789", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveCallbackMethods(Newtonsoft.Json.Serialization.JsonContract, System.Type)", file="DefaultContractResolver.cs"];
m0_347 [label="List<SerializationErrorCallback> onError", span="790-790", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveCallbackMethods(Newtonsoft.Json.Serialization.JsonContract, System.Type)", file="DefaultContractResolver.cs"];
m0_349 [label="onSerializing != null", span="794-794", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveCallbackMethods(Newtonsoft.Json.Serialization.JsonContract, System.Type)", file="DefaultContractResolver.cs"];
m0_351 [label="onSerialized != null", span="799-799", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveCallbackMethods(Newtonsoft.Json.Serialization.JsonContract, System.Type)", file="DefaultContractResolver.cs"];
m0_353 [label="onDeserializing != null", span="804-804", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveCallbackMethods(Newtonsoft.Json.Serialization.JsonContract, System.Type)", file="DefaultContractResolver.cs"];
m0_355 [label="onDeserialized != null", span="809-809", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveCallbackMethods(Newtonsoft.Json.Serialization.JsonContract, System.Type)", file="DefaultContractResolver.cs"];
m0_357 [label="onError != null", span="814-814", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveCallbackMethods(Newtonsoft.Json.Serialization.JsonContract, System.Type)", file="DefaultContractResolver.cs"];
m0_359 [label="Exit Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveCallbackMethods(Newtonsoft.Json.Serialization.JsonContract, System.Type)", span="784-784", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveCallbackMethods(Newtonsoft.Json.Serialization.JsonContract, System.Type)", file="DefaultContractResolver.cs"];
m0_106 [label="Entry Newtonsoft.Json.Serialization.JsonTypeReflector.GetCachedAttribute<T>(object)", span="66-66", cluster="Newtonsoft.Json.Serialization.JsonTypeReflector.GetCachedAttribute<T>(object)", file="DefaultContractResolver.cs"];
m0_109 [label="Entry Newtonsoft.Json.Utilities.ReflectionDelegateFactory.CreateParameterizedConstructor(System.Reflection.MethodBase)", span="73-73", cluster="Newtonsoft.Json.Utilities.ReflectionDelegateFactory.CreateParameterizedConstructor(System.Reflection.MethodBase)", file="DefaultContractResolver.cs"];
m0_224 [label="Entry Newtonsoft.Json.Serialization.ObjectConstructor<T>.Invoke(params object[])", span="31-31", cluster="Newtonsoft.Json.Serialization.ObjectConstructor<T>.Invoke(params object[])", file="DefaultContractResolver.cs"];
m0_506 [label="Entry Newtonsoft.Json.Utilities.ConvertUtils.GetTypeCode(System.Type)", span="185-185", cluster="Newtonsoft.Json.Utilities.ConvertUtils.GetTypeCode(System.Type)", file="DefaultContractResolver.cs"];
m0_589 [label="Entry Newtonsoft.Json.Serialization.DefaultContractResolver.SetIsSpecifiedActions(Newtonsoft.Json.Serialization.JsonProperty, System.Reflection.MemberInfo, bool)", span="1577-1577", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetIsSpecifiedActions(Newtonsoft.Json.Serialization.JsonProperty, System.Reflection.MemberInfo, bool)", file="DefaultContractResolver.cs"];
m0_669 [label="MemberInfo specifiedMember = member.DeclaringType.GetProperty(member.Name + JsonTypeReflector.SpecifiedPostfix)", span="1579-1579", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetIsSpecifiedActions(Newtonsoft.Json.Serialization.JsonProperty, System.Reflection.MemberInfo, bool)", file="DefaultContractResolver.cs"];
m0_671 [label="specifiedMember = member.DeclaringType.GetField(member.Name + JsonTypeReflector.SpecifiedPostfix)", span="1582-1582", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetIsSpecifiedActions(Newtonsoft.Json.Serialization.JsonProperty, System.Reflection.MemberInfo, bool)", file="DefaultContractResolver.cs"];
m0_675 [label="property.GetIsSpecified = o => (bool)specifiedPropertyGet(o)", span="1592-1592", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetIsSpecifiedActions(Newtonsoft.Json.Serialization.JsonProperty, System.Reflection.MemberInfo, bool)", file="DefaultContractResolver.cs"];
m0_676 [label="ReflectionUtils.CanSetMemberValue(specifiedMember, allowNonPublicAccess, false)", span="1594-1594", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetIsSpecifiedActions(Newtonsoft.Json.Serialization.JsonProperty, System.Reflection.MemberInfo, bool)", file="DefaultContractResolver.cs"];
m0_677 [label="property.SetIsSpecified = JsonTypeReflector.ReflectionDelegateFactory.CreateSet<object>(specifiedMember)", span="1596-1596", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetIsSpecifiedActions(Newtonsoft.Json.Serialization.JsonProperty, System.Reflection.MemberInfo, bool)", file="DefaultContractResolver.cs"];
m0_670 [label="specifiedMember == null", span="1580-1580", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetIsSpecifiedActions(Newtonsoft.Json.Serialization.JsonProperty, System.Reflection.MemberInfo, bool)", file="DefaultContractResolver.cs"];
m0_672 [label="specifiedMember == null || ReflectionUtils.GetMemberUnderlyingType(specifiedMember) != typeof(bool)", span="1585-1585", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetIsSpecifiedActions(Newtonsoft.Json.Serialization.JsonProperty, System.Reflection.MemberInfo, bool)", file="DefaultContractResolver.cs"];
m0_674 [label="Func<object, object> specifiedPropertyGet = JsonTypeReflector.ReflectionDelegateFactory.CreateGet<object>(specifiedMember)", span="1590-1590", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetIsSpecifiedActions(Newtonsoft.Json.Serialization.JsonProperty, System.Reflection.MemberInfo, bool)", file="DefaultContractResolver.cs"];
m0_673 [label="return;", span="1587-1587", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetIsSpecifiedActions(Newtonsoft.Json.Serialization.JsonProperty, System.Reflection.MemberInfo, bool)", file="DefaultContractResolver.cs"];
m0_678 [label="Exit Newtonsoft.Json.Serialization.DefaultContractResolver.SetIsSpecifiedActions(Newtonsoft.Json.Serialization.JsonProperty, System.Reflection.MemberInfo, bool)", span="1577-1577", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetIsSpecifiedActions(Newtonsoft.Json.Serialization.JsonProperty, System.Reflection.MemberInfo, bool)", file="DefaultContractResolver.cs"];
m0_158 [label="Entry Unk.FormatWith", span="", cluster="Unk.FormatWith", file="DefaultContractResolver.cs"];
m0_155 [label="Entry Unk.CanReadMemberValue", span="", cluster="Unk.CanReadMemberValue", file="DefaultContractResolver.cs"];
m0_287 [label="Entry Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePropertyFromConstructorParameter(Newtonsoft.Json.Serialization.JsonProperty, System.Reflection.ParameterInfo)", span="694-694", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePropertyFromConstructorParameter(Newtonsoft.Json.Serialization.JsonProperty, System.Reflection.ParameterInfo)", file="DefaultContractResolver.cs"];
m0_297 [label="JsonProperty property = new JsonProperty()", span="696-696", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePropertyFromConstructorParameter(Newtonsoft.Json.Serialization.JsonProperty, System.Reflection.ParameterInfo)", file="DefaultContractResolver.cs"];
m0_298 [label="property.PropertyType = parameterInfo.ParameterType", span="697-697", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePropertyFromConstructorParameter(Newtonsoft.Json.Serialization.JsonProperty, System.Reflection.ParameterInfo)", file="DefaultContractResolver.cs"];
m0_299 [label="property.AttributeProvider = new ReflectionAttributeProvider(parameterInfo)", span="698-698", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePropertyFromConstructorParameter(Newtonsoft.Json.Serialization.JsonProperty, System.Reflection.ParameterInfo)", file="DefaultContractResolver.cs"];
m0_301 [label="SetPropertySettingsFromAttributes(property, parameterInfo, parameterInfo.Name, parameterInfo.Member.DeclaringType, MemberSerialization.OptOut, out allowNonPublicAccess)", span="701-701", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePropertyFromConstructorParameter(Newtonsoft.Json.Serialization.JsonProperty, System.Reflection.ParameterInfo)", file="DefaultContractResolver.cs"];
m0_304 [label="matchingMemberProperty != null", span="707-707", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePropertyFromConstructorParameter(Newtonsoft.Json.Serialization.JsonProperty, System.Reflection.ParameterInfo)", file="DefaultContractResolver.cs"];
m0_305 [label="property.PropertyName = (property.PropertyName != parameterInfo.Name) ? property.PropertyName : matchingMemberProperty.PropertyName", span="709-709", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePropertyFromConstructorParameter(Newtonsoft.Json.Serialization.JsonProperty, System.Reflection.ParameterInfo)", file="DefaultContractResolver.cs"];
m0_306 [label="property.Converter = property.Converter ?? matchingMemberProperty.Converter", span="710-710", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePropertyFromConstructorParameter(Newtonsoft.Json.Serialization.JsonProperty, System.Reflection.ParameterInfo)", file="DefaultContractResolver.cs"];
m0_307 [label="property.MemberConverter = property.MemberConverter ?? matchingMemberProperty.MemberConverter", span="711-711", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePropertyFromConstructorParameter(Newtonsoft.Json.Serialization.JsonProperty, System.Reflection.ParameterInfo)", file="DefaultContractResolver.cs"];
m0_308 [label="!property._hasExplicitDefaultValue && matchingMemberProperty._hasExplicitDefaultValue", span="713-713", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePropertyFromConstructorParameter(Newtonsoft.Json.Serialization.JsonProperty, System.Reflection.ParameterInfo)", file="DefaultContractResolver.cs"];
m0_309 [label="property.DefaultValue = matchingMemberProperty.DefaultValue", span="715-715", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePropertyFromConstructorParameter(Newtonsoft.Json.Serialization.JsonProperty, System.Reflection.ParameterInfo)", file="DefaultContractResolver.cs"];
m0_310 [label="property._required = property._required ?? matchingMemberProperty._required", span="718-718", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePropertyFromConstructorParameter(Newtonsoft.Json.Serialization.JsonProperty, System.Reflection.ParameterInfo)", file="DefaultContractResolver.cs"];
m0_311 [label="property.IsReference = property.IsReference ?? matchingMemberProperty.IsReference", span="719-719", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePropertyFromConstructorParameter(Newtonsoft.Json.Serialization.JsonProperty, System.Reflection.ParameterInfo)", file="DefaultContractResolver.cs"];
m0_312 [label="property.NullValueHandling = property.NullValueHandling ?? matchingMemberProperty.NullValueHandling", span="720-720", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePropertyFromConstructorParameter(Newtonsoft.Json.Serialization.JsonProperty, System.Reflection.ParameterInfo)", file="DefaultContractResolver.cs"];
m0_313 [label="property.DefaultValueHandling = property.DefaultValueHandling ?? matchingMemberProperty.DefaultValueHandling", span="721-721", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePropertyFromConstructorParameter(Newtonsoft.Json.Serialization.JsonProperty, System.Reflection.ParameterInfo)", file="DefaultContractResolver.cs"];
m0_314 [label="property.ReferenceLoopHandling = property.ReferenceLoopHandling ?? matchingMemberProperty.ReferenceLoopHandling", span="722-722", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePropertyFromConstructorParameter(Newtonsoft.Json.Serialization.JsonProperty, System.Reflection.ParameterInfo)", file="DefaultContractResolver.cs"];
m0_315 [label="property.ObjectCreationHandling = property.ObjectCreationHandling ?? matchingMemberProperty.ObjectCreationHandling", span="723-723", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePropertyFromConstructorParameter(Newtonsoft.Json.Serialization.JsonProperty, System.Reflection.ParameterInfo)", file="DefaultContractResolver.cs"];
m0_316 [label="property.TypeNameHandling = property.TypeNameHandling ?? matchingMemberProperty.TypeNameHandling", span="724-724", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePropertyFromConstructorParameter(Newtonsoft.Json.Serialization.JsonProperty, System.Reflection.ParameterInfo)", file="DefaultContractResolver.cs"];
m0_302 [label="property.Readable = false", span="703-703", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePropertyFromConstructorParameter(Newtonsoft.Json.Serialization.JsonProperty, System.Reflection.ParameterInfo)", file="DefaultContractResolver.cs"];
m0_303 [label="property.Writable = true", span="704-704", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePropertyFromConstructorParameter(Newtonsoft.Json.Serialization.JsonProperty, System.Reflection.ParameterInfo)", file="DefaultContractResolver.cs"];
m0_317 [label="return property;", span="727-727", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePropertyFromConstructorParameter(Newtonsoft.Json.Serialization.JsonProperty, System.Reflection.ParameterInfo)", file="DefaultContractResolver.cs"];
m0_300 [label="bool allowNonPublicAccess", span="700-700", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePropertyFromConstructorParameter(Newtonsoft.Json.Serialization.JsonProperty, System.Reflection.ParameterInfo)", file="DefaultContractResolver.cs"];
m0_318 [label="Exit Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePropertyFromConstructorParameter(Newtonsoft.Json.Serialization.JsonProperty, System.Reflection.ParameterInfo)", span="694-694", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePropertyFromConstructorParameter(Newtonsoft.Json.Serialization.JsonProperty, System.Reflection.ParameterInfo)", file="DefaultContractResolver.cs"];
m0_404 [label="Entry Newtonsoft.Json.Serialization.JsonContract.CreateSerializationErrorCallback(System.Reflection.MethodInfo)", span="311-311", cluster="Newtonsoft.Json.Serialization.JsonContract.CreateSerializationErrorCallback(System.Reflection.MethodInfo)", file="DefaultContractResolver.cs"];
m0_103 [label="Entry Newtonsoft.Json.Serialization.DefaultContractResolver.InitializeContract(Newtonsoft.Json.Serialization.JsonContract)", span="748-748", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.InitializeContract(Newtonsoft.Json.Serialization.JsonContract)", file="DefaultContractResolver.cs"];
m0_329 [label="JsonContainerAttribute containerAttribute = JsonTypeReflector.GetCachedAttribute<JsonContainerAttribute>(contract.NonNullableUnderlyingType)", span="750-750", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.InitializeContract(Newtonsoft.Json.Serialization.JsonContract)", file="DefaultContractResolver.cs"];
m0_331 [label="contract.IsReference = containerAttribute._isReference", span="753-753", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.InitializeContract(Newtonsoft.Json.Serialization.JsonContract)", file="DefaultContractResolver.cs"];
m0_332 [label="contract.Converter = ResolveContractConverter(contract.NonNullableUnderlyingType)", span="767-767", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.InitializeContract(Newtonsoft.Json.Serialization.JsonContract)", file="DefaultContractResolver.cs"];
m0_333 [label="contract.InternalConverter = JsonSerializer.GetMatchingConverter(BuiltInConverters, contract.NonNullableUnderlyingType)", span="770-770", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.InitializeContract(Newtonsoft.Json.Serialization.JsonContract)", file="DefaultContractResolver.cs"];
m0_334 [label="contract.IsInstantiable\r\n                && (ReflectionUtils.HasDefaultConstructor(contract.CreatedType, true) || contract.CreatedType.IsValueType())", span="772-773", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.InitializeContract(Newtonsoft.Json.Serialization.JsonContract)", file="DefaultContractResolver.cs"];
m0_335 [label="contract.DefaultCreator = GetDefaultCreator(contract.CreatedType)", span="775-775", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.InitializeContract(Newtonsoft.Json.Serialization.JsonContract)", file="DefaultContractResolver.cs"];
m0_336 [label="contract.DefaultCreatorNonPublic = (!contract.CreatedType.IsValueType() &&\r\n                                                    ReflectionUtils.GetDefaultConstructor(contract.CreatedType) == null)", span="777-778", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.InitializeContract(Newtonsoft.Json.Serialization.JsonContract)", file="DefaultContractResolver.cs"];
m0_337 [label="ResolveCallbackMethods(contract, contract.NonNullableUnderlyingType)", span="781-781", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.InitializeContract(Newtonsoft.Json.Serialization.JsonContract)", file="DefaultContractResolver.cs"];
m0_330 [label="containerAttribute != null", span="751-751", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.InitializeContract(Newtonsoft.Json.Serialization.JsonContract)", file="DefaultContractResolver.cs"];
m0_338 [label="Exit Newtonsoft.Json.Serialization.DefaultContractResolver.InitializeContract(Newtonsoft.Json.Serialization.JsonContract)", span="748-748", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.InitializeContract(Newtonsoft.Json.Serialization.JsonContract)", file="DefaultContractResolver.cs"];
m0_154 [label="Entry Unk.IsDefined", span="", cluster="Unk.IsDefined", file="DefaultContractResolver.cs"];
m0_229 [label="Entry Newtonsoft.Json.Utilities.ValidationUtils.ArgumentNotNull(object, string)", span="31-31", cluster="Newtonsoft.Json.Utilities.ValidationUtils.ArgumentNotNull(object, string)", file="DefaultContractResolver.cs"];
m0_126 [label="Entry Unk.LastOrDefault", span="", cluster="Unk.LastOrDefault", file="DefaultContractResolver.cs"];
m0_570 [label="Entry Newtonsoft.Json.Serialization.ReflectionValueProvider.ReflectionValueProvider(System.Reflection.MemberInfo)", span="43-43", cluster="Newtonsoft.Json.Serialization.ReflectionValueProvider.ReflectionValueProvider(System.Reflection.MemberInfo)", file="DefaultContractResolver.cs"];
m0_49 [label="Entry Unk.Where", span="", cluster="Unk.Where", file="DefaultContractResolver.cs"];
m0_440 [label="Entry string.FormatWith(System.IFormatProvider, object, object)", span="52-52", cluster="string.FormatWith(System.IFormatProvider, object, object)", file="DefaultContractResolver.cs"];
m0_113 [label="Entry Newtonsoft.Json.Serialization.DefaultContractResolver.GetImmutableConstructor(System.Type, Newtonsoft.Json.Serialization.JsonPropertyCollection)", span="585-585", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetImmutableConstructor(System.Type, Newtonsoft.Json.Serialization.JsonPropertyCollection)", file="DefaultContractResolver.cs"];
m0_255 [label="IEnumerable<ConstructorInfo> constructors = objectType.GetConstructors()", span="587-587", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetImmutableConstructor(System.Type, Newtonsoft.Json.Serialization.JsonPropertyCollection)", file="DefaultContractResolver.cs"];
m0_263 [label="var memberProperty = MatchProperty(memberProperties, parameterInfo.Name, parameterInfo.ParameterType)", span="599-599", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetImmutableConstructor(System.Type, Newtonsoft.Json.Serialization.JsonPropertyCollection)", file="DefaultContractResolver.cs"];
m0_256 [label="IEnumerator<ConstructorInfo> en = constructors.GetEnumerator()", span="588-588", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetImmutableConstructor(System.Type, Newtonsoft.Json.Serialization.JsonPropertyCollection)", file="DefaultContractResolver.cs"];
m0_257 [label="en.MoveNext()", span="589-589", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetImmutableConstructor(System.Type, Newtonsoft.Json.Serialization.JsonPropertyCollection)", file="DefaultContractResolver.cs"];
m0_258 [label="ConstructorInfo constructor = en.Current", span="591-591", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetImmutableConstructor(System.Type, Newtonsoft.Json.Serialization.JsonPropertyCollection)", file="DefaultContractResolver.cs"];
m0_259 [label="!en.MoveNext()", span="592-592", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetImmutableConstructor(System.Type, Newtonsoft.Json.Serialization.JsonPropertyCollection)", file="DefaultContractResolver.cs"];
m0_267 [label="return null;", span="611-611", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetImmutableConstructor(System.Type, Newtonsoft.Json.Serialization.JsonPropertyCollection)", file="DefaultContractResolver.cs"];
m0_260 [label="ParameterInfo[] parameters = constructor.GetParameters()", span="594-594", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetImmutableConstructor(System.Type, Newtonsoft.Json.Serialization.JsonPropertyCollection)", file="DefaultContractResolver.cs"];
m0_266 [label="return constructor;", span="606-606", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetImmutableConstructor(System.Type, Newtonsoft.Json.Serialization.JsonPropertyCollection)", file="DefaultContractResolver.cs"];
m0_261 [label="parameters.Length > 0", span="595-595", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetImmutableConstructor(System.Type, Newtonsoft.Json.Serialization.JsonPropertyCollection)", file="DefaultContractResolver.cs"];
m0_262 [label=parameters, span="597-597", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetImmutableConstructor(System.Type, Newtonsoft.Json.Serialization.JsonPropertyCollection)", file="DefaultContractResolver.cs"];
m0_264 [label="memberProperty == null || memberProperty.Writable", span="600-600", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetImmutableConstructor(System.Type, Newtonsoft.Json.Serialization.JsonPropertyCollection)", file="DefaultContractResolver.cs"];
m0_265 [label="return null;", span="602-602", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetImmutableConstructor(System.Type, Newtonsoft.Json.Serialization.JsonPropertyCollection)", file="DefaultContractResolver.cs"];
m0_268 [label="Exit Newtonsoft.Json.Serialization.DefaultContractResolver.GetImmutableConstructor(System.Type, Newtonsoft.Json.Serialization.JsonPropertyCollection)", span="585-585", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetImmutableConstructor(System.Type, Newtonsoft.Json.Serialization.JsonPropertyCollection)", file="DefaultContractResolver.cs"];
m0_340 [label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.HasDefaultConstructor(System.Type, bool)", span="227-227", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.HasDefaultConstructor(System.Type, bool)", file="DefaultContractResolver.cs"];
m0_48 [label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.GetFieldsAndProperties(System.Type, System.Reflection.BindingFlags)", span="645-645", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetFieldsAndProperties(System.Type, System.Reflection.BindingFlags)", file="DefaultContractResolver.cs"];
m0_319 [label="Entry Newtonsoft.Json.Serialization.JsonProperty.JsonProperty()", span="38-38", cluster="Newtonsoft.Json.Serialization.JsonProperty.JsonProperty()", file="DefaultContractResolver.cs"];
m0_64 [label="Entry Newtonsoft.Json.Serialization.DefaultContractResolver.CreateObjectContract(System.Type)", span="316-316", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateObjectContract(System.Type)", file="DefaultContractResolver.cs"];
m0_65 [label="JsonObjectContract contract = new JsonObjectContract(objectType)", span="318-318", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateObjectContract(System.Type)", file="DefaultContractResolver.cs"];
m0_66 [label="InitializeContract(contract)", span="319-319", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateObjectContract(System.Type)", file="DefaultContractResolver.cs"];
m0_69 [label="contract.MemberSerialization = JsonTypeReflector.GetObjectMemberSerialization(contract.NonNullableUnderlyingType, ignoreSerializableAttribute)", span="328-328", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateObjectContract(System.Type)", file="DefaultContractResolver.cs"];
m0_70 [label="contract.Properties.AddRange(CreateProperties(contract.NonNullableUnderlyingType, contract.MemberSerialization))", span="329-329", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateObjectContract(System.Type)", file="DefaultContractResolver.cs"];
m0_72 [label="JsonObjectAttribute attribute = JsonTypeReflector.GetCachedAttribute<JsonObjectAttribute>(contract.NonNullableUnderlyingType)", span="333-333", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateObjectContract(System.Type)", file="DefaultContractResolver.cs"];
m0_74 [label="contract.ItemRequired = attribute._itemRequired", span="336-336", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateObjectContract(System.Type)", file="DefaultContractResolver.cs"];
m0_80 [label="contract.ExtensionDataNameResolver = extensionDataNameResolver", span="349-349", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateObjectContract(System.Type)", file="DefaultContractResolver.cs"];
m0_81 [label="contract.IsInstantiable", span="351-351", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateObjectContract(System.Type)", file="DefaultContractResolver.cs"];
m0_82 [label="ConstructorInfo overrideConstructor = GetAttributeConstructor(contract.NonNullableUnderlyingType)", span="353-353", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateObjectContract(System.Type)", file="DefaultContractResolver.cs"];
m0_84 [label="contract.OverrideCreator = JsonTypeReflector.ReflectionDelegateFactory.CreateParameterizedConstructor(overrideConstructor)", span="358-358", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateObjectContract(System.Type)", file="DefaultContractResolver.cs"];
m0_85 [label="contract.CreatorParameters.AddRange(CreateConstructorParameters(overrideConstructor, contract.Properties))", span="359-359", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateObjectContract(System.Type)", file="DefaultContractResolver.cs"];
m0_86 [label="contract.MemberSerialization == MemberSerialization.Fields", span="361-361", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateObjectContract(System.Type)", file="DefaultContractResolver.cs"];
m0_87 [label="contract.DefaultCreator == null || contract.DefaultCreatorNonPublic", span="372-372", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateObjectContract(System.Type)", file="DefaultContractResolver.cs"];
m0_88 [label="ConstructorInfo constructor = GetParameterizedConstructor(contract.NonNullableUnderlyingType)", span="374-374", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateObjectContract(System.Type)", file="DefaultContractResolver.cs"];
m0_90 [label="contract.ParameterizedCreator = JsonTypeReflector.ReflectionDelegateFactory.CreateParameterizedConstructor(constructor)", span="377-377", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateObjectContract(System.Type)", file="DefaultContractResolver.cs"];
m0_91 [label="contract.CreatorParameters.AddRange(CreateConstructorParameters(constructor, contract.Properties))", span="378-378", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateObjectContract(System.Type)", file="DefaultContractResolver.cs"];
m0_92 [label="contract.NonNullableUnderlyingType.IsValueType()", span="381-381", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateObjectContract(System.Type)", file="DefaultContractResolver.cs"];
m0_93 [label="ConstructorInfo constructor = GetImmutableConstructor(contract.NonNullableUnderlyingType, contract.Properties)", span="385-385", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateObjectContract(System.Type)", file="DefaultContractResolver.cs"];
m0_95 [label="contract.OverrideCreator = JsonTypeReflector.ReflectionDelegateFactory.CreateParameterizedConstructor(constructor)", span="388-388", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateObjectContract(System.Type)", file="DefaultContractResolver.cs"];
m0_96 [label="contract.CreatorParameters.AddRange(CreateConstructorParameters(constructor, contract.Properties))", span="389-389", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateObjectContract(System.Type)", file="DefaultContractResolver.cs"];
m0_97 [label="MemberInfo extensionDataMember = GetExtensionDataMemberForType(contract.NonNullableUnderlyingType)", span="394-394", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateObjectContract(System.Type)", file="DefaultContractResolver.cs"];
m0_99 [label="SetExtensionDataDelegates(contract, extensionDataMember)", span="397-397", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateObjectContract(System.Type)", file="DefaultContractResolver.cs"];
m0_100 [label="return contract;", span="400-400", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateObjectContract(System.Type)", file="DefaultContractResolver.cs"];
m0_67 [label="bool ignoreSerializableAttribute", span="321-321", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateObjectContract(System.Type)", file="DefaultContractResolver.cs"];
m0_68 [label="ignoreSerializableAttribute = true", span="325-325", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateObjectContract(System.Type)", file="DefaultContractResolver.cs"];
m0_71 [label="Func<string, string> extensionDataNameResolver = null", span="331-331", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateObjectContract(System.Type)", file="DefaultContractResolver.cs"];
m0_78 [label="extensionDataNameResolver == null", span="344-344", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateObjectContract(System.Type)", file="DefaultContractResolver.cs"];
m0_73 [label="attribute != null", span="334-334", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateObjectContract(System.Type)", file="DefaultContractResolver.cs"];
m0_75 [label="attribute.NamingStrategyType != null", span="337-337", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateObjectContract(System.Type)", file="DefaultContractResolver.cs"];
m0_76 [label="NamingStrategy namingStrategy = JsonTypeReflector.GetContainerNamingStrategy(attribute)", span="339-339", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateObjectContract(System.Type)", file="DefaultContractResolver.cs"];
m0_77 [label="extensionDataNameResolver = s => namingStrategy.GetDictionaryKey(s)", span="340-340", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateObjectContract(System.Type)", file="DefaultContractResolver.cs"];
m0_79 [label="extensionDataNameResolver = ResolveExtensionDataName", span="346-346", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateObjectContract(System.Type)", file="DefaultContractResolver.cs"];
m0_83 [label="overrideConstructor != null", span="356-356", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateObjectContract(System.Type)", file="DefaultContractResolver.cs"];
m0_89 [label="constructor != null", span="375-375", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateObjectContract(System.Type)", file="DefaultContractResolver.cs"];
m0_94 [label="constructor != null", span="386-386", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateObjectContract(System.Type)", file="DefaultContractResolver.cs"];
m0_98 [label="extensionDataMember != null", span="395-395", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateObjectContract(System.Type)", file="DefaultContractResolver.cs"];
m0_101 [label="Exit Newtonsoft.Json.Serialization.DefaultContractResolver.CreateObjectContract(System.Type)", span="316-316", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateObjectContract(System.Type)", file="DefaultContractResolver.cs"];
m0_47 [label="Entry Newtonsoft.Json.Serialization.JsonTypeReflector.GetObjectMemberSerialization(System.Type, bool)", span="151-151", cluster="Newtonsoft.Json.Serialization.JsonTypeReflector.GetObjectMemberSerialization(System.Type, bool)", file="DefaultContractResolver.cs"];
m0_217 [label="Entry Newtonsoft.Json.Utilities.MethodCall<T, TResult>.Invoke(T, params object[])", span="27-27", cluster="Newtonsoft.Json.Utilities.MethodCall<T, TResult>.Invoke(T, params object[])", file="DefaultContractResolver.cs"];
m0_288 [label="Entry Newtonsoft.Json.Serialization.JsonPropertyCollection.AddProperty(Newtonsoft.Json.Serialization.JsonProperty)", span="70-70", cluster="Newtonsoft.Json.Serialization.JsonPropertyCollection.AddProperty(Newtonsoft.Json.Serialization.JsonProperty)", file="DefaultContractResolver.cs"];
m0_471 [label="Entry Newtonsoft.Json.Serialization.JsonLinqContract.JsonLinqContract(System.Type)", span="38-38", cluster="Newtonsoft.Json.Serialization.JsonLinqContract.JsonLinqContract(System.Type)", file="DefaultContractResolver.cs"];
m0_194 [label="Entry System.Type.MakeGenericType(params System.Type[])", span="0-0", cluster="System.Type.MakeGenericType(params System.Type[])", file="DefaultContractResolver.cs"];
m0_693 [label="Entry Newtonsoft.Json.Serialization.NamingStrategy.GetExtensionDataName(string)", span="47-47", cluster="Newtonsoft.Json.Serialization.NamingStrategy.GetExtensionDataName(string)", file="DefaultContractResolver.cs"];
m0_466 [label="Entry Newtonsoft.Json.Serialization.DefaultContractResolver.CreateLinqContract(System.Type)", span="1044-1044", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateLinqContract(System.Type)", file="DefaultContractResolver.cs"];
m0_467 [label="JsonLinqContract contract = new JsonLinqContract(objectType)", span="1046-1046", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateLinqContract(System.Type)", file="DefaultContractResolver.cs"];
m0_468 [label="InitializeContract(contract)", span="1047-1047", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateLinqContract(System.Type)", file="DefaultContractResolver.cs"];
m0_469 [label="return contract;", span="1049-1049", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateLinqContract(System.Type)", file="DefaultContractResolver.cs"];
m0_470 [label="Exit Newtonsoft.Json.Serialization.DefaultContractResolver.CreateLinqContract(System.Type)", span="1044-1044", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateLinqContract(System.Type)", file="DefaultContractResolver.cs"];
m0_17 [label="Entry System.ArgumentNullException.ArgumentNullException(string)", span="0-0", cluster="System.ArgumentNullException.ArgumentNullException(string)", file="DefaultContractResolver.cs"];
m0_23 [label="Entry Newtonsoft.Json.Serialization.DefaultContractResolver.GetSerializableMembers(System.Type)", span="207-207", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetSerializableMembers(System.Type)", file="DefaultContractResolver.cs"];
m0_24 [label="bool ignoreSerializableAttribute", span="209-209", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetSerializableMembers(System.Type)", file="DefaultContractResolver.cs"];
m0_26 [label="MemberSerialization memberSerialization = JsonTypeReflector.GetObjectMemberSerialization(objectType, ignoreSerializableAttribute)", span="216-216", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetSerializableMembers(System.Type)", file="DefaultContractResolver.cs"];
m0_27 [label="IEnumerable<MemberInfo> allMembers = ReflectionUtils.GetFieldsAndProperties(objectType, BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Static)\r\n                .Where(m => !ReflectionUtils.IsIndexedProperty(m))", span="218-219", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetSerializableMembers(System.Type)", file="DefaultContractResolver.cs"];
m0_30 [label="List<MemberInfo> defaultMembers = ReflectionUtils.GetFieldsAndProperties(objectType, DefaultMembersSearchFlags)\r\n                    .Where(m => !ReflectionUtils.IsIndexedProperty(m)).ToList()", span="230-231", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetSerializableMembers(System.Type)", file="DefaultContractResolver.cs"];
m0_25 [label="ignoreSerializableAttribute = true", span="213-213", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetSerializableMembers(System.Type)", file="DefaultContractResolver.cs"];
m0_29 [label="memberSerialization != MemberSerialization.Fields", span="223-223", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetSerializableMembers(System.Type)", file="DefaultContractResolver.cs"];
m0_39 [label="memberSerialization == MemberSerialization.Fields && member.MemberType() == MemberTypes.Field", span="262-262", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetSerializableMembers(System.Type)", file="DefaultContractResolver.cs"];
m0_28 [label="List<MemberInfo> serializableMembers = new List<MemberInfo>()", span="221-221", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetSerializableMembers(System.Type)", file="DefaultContractResolver.cs"];
m0_31 [label=allMembers, span="234-234", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetSerializableMembers(System.Type)", file="DefaultContractResolver.cs"];
m0_41 [label=allMembers, span="282-282", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetSerializableMembers(System.Type)", file="DefaultContractResolver.cs"];
m0_34 [label="serializableMembers.Add(member)", span="242-242", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetSerializableMembers(System.Type)", file="DefaultContractResolver.cs"];
m0_36 [label="serializableMembers.Add(member)", span="250-250", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetSerializableMembers(System.Type)", file="DefaultContractResolver.cs"];
m0_38 [label="serializableMembers.Add(member)", span="254-254", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetSerializableMembers(System.Type)", file="DefaultContractResolver.cs"];
m0_40 [label="serializableMembers.Add(member)", span="264-264", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetSerializableMembers(System.Type)", file="DefaultContractResolver.cs"];
m0_44 [label="serializableMembers.Add(member)", span="287-287", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetSerializableMembers(System.Type)", file="DefaultContractResolver.cs"];
m0_45 [label="return serializableMembers;", span="292-292", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetSerializableMembers(System.Type)", file="DefaultContractResolver.cs"];
m0_33 [label="defaultMembers.Contains(member)", span="239-239", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetSerializableMembers(System.Type)", file="DefaultContractResolver.cs"];
m0_32 [label="SerializeCompilerGeneratedMembers || !member.IsDefined(typeof(CompilerGeneratedAttribute), true)", span="237-237", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetSerializableMembers(System.Type)", file="DefaultContractResolver.cs"];
m0_35 [label="JsonTypeReflector.GetAttribute<JsonPropertyAttribute>(member) != null", span="248-248", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetSerializableMembers(System.Type)", file="DefaultContractResolver.cs"];
m0_37 [label="JsonTypeReflector.GetAttribute<JsonRequiredAttribute>(member) != null", span="252-252", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetSerializableMembers(System.Type)", file="DefaultContractResolver.cs"];
m0_42 [label="FieldInfo field = member as FieldInfo", span="284-284", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetSerializableMembers(System.Type)", file="DefaultContractResolver.cs"];
m0_43 [label="field != null && !field.IsStatic", span="285-285", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetSerializableMembers(System.Type)", file="DefaultContractResolver.cs"];
m0_46 [label="Exit Newtonsoft.Json.Serialization.DefaultContractResolver.GetSerializableMembers(System.Type)", span="207-207", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetSerializableMembers(System.Type)", file="DefaultContractResolver.cs"];
m0_477 [label="Entry Newtonsoft.Json.Serialization.JsonStringContract.JsonStringContract(System.Type)", span="38-38", cluster="Newtonsoft.Json.Serialization.JsonStringContract.JsonStringContract(System.Type)", file="DefaultContractResolver.cs"];
m0_114 [label="Entry Newtonsoft.Json.Serialization.DefaultContractResolver.GetExtensionDataMemberForType(System.Type)", span="403-403", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetExtensionDataMemberForType(System.Type)", file="DefaultContractResolver.cs"];
m0_120 [label="IEnumerable<MemberInfo> members = GetClassHierarchyForType(type).SelectMany(baseType =>\r\n            {\r\n                IList<MemberInfo> m = new List<MemberInfo>();\r\n                m.AddRange(baseType.GetProperties(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));\r\n                m.AddRange(baseType.GetFields(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));\r\n\r\n                return m;\r\n            })", span="405-412", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetExtensionDataMemberForType(System.Type)", file="DefaultContractResolver.cs"];
m0_121 [label="MemberInfo extensionDataMember = members.LastOrDefault(m =>\r\n            {\r\n                MemberTypes memberType = m.MemberType();\r\n                if (memberType != MemberTypes.Property && memberType != MemberTypes.Field)\r\n                {\r\n                    return false;\r\n                }\r\n\r\n                // last instance of attribute wins on type if there are multiple\r\n                if (!m.IsDefined(typeof(JsonExtensionDataAttribute), false))\r\n                {\r\n                    return false;\r\n                }\r\n\r\n                if (!ReflectionUtils.CanReadMemberValue(m, true))\r\n                {\r\n                    throw new JsonException(''Invalid extension data attribute on '{0}'. Member '{1}' must have a getter.''.FormatWith(CultureInfo.InvariantCulture, GetClrTypeFullName(m.DeclaringType), m.Name));\r\n                }\r\n\r\n                Type t = ReflectionUtils.GetMemberUnderlyingType(m);\r\n\r\n                Type dictionaryType;\r\n                if (ReflectionUtils.ImplementsGenericDefinition(t, typeof(IDictionary<,>), out dictionaryType))\r\n                {\r\n                    Type keyType = dictionaryType.GetGenericArguments()[0];\r\n                    Type valueType = dictionaryType.GetGenericArguments()[1];\r\n\r\n                    if (keyType.IsAssignableFrom(typeof(string)) && valueType.IsAssignableFrom(typeof(JToken)))\r\n                    {\r\n                        return true;\r\n                    }\r\n                }\r\n\r\n                throw new JsonException(''Invalid extension data attribute on '{0}'. Member '{1}' type must implement IDictionary<string, JToken>.''.FormatWith(CultureInfo.InvariantCulture, GetClrTypeFullName(m.DeclaringType), m.Name));\r\n            })", span="414-448", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetExtensionDataMemberForType(System.Type)", file="DefaultContractResolver.cs"];
m0_122 [label="return extensionDataMember;", span="450-450", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetExtensionDataMemberForType(System.Type)", file="DefaultContractResolver.cs"];
m0_123 [label="Exit Newtonsoft.Json.Serialization.DefaultContractResolver.GetExtensionDataMemberForType(System.Type)", span="403-403", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetExtensionDataMemberForType(System.Type)", file="DefaultContractResolver.cs"];
m0_111 [label="Entry Newtonsoft.Json.Serialization.DefaultContractResolver.GetParameterizedConstructor(System.Type)", span="614-614", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetParameterizedConstructor(System.Type)", file="DefaultContractResolver.cs"];
m0_271 [label="ConstructorInfo[] constructors = objectType.GetConstructors(BindingFlags.Public | BindingFlags.Instance)", span="628-628", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetParameterizedConstructor(System.Type)", file="DefaultContractResolver.cs"];
m0_272 [label="constructors.Length == 1", span="629-629", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetParameterizedConstructor(System.Type)", file="DefaultContractResolver.cs"];
m0_273 [label="return constructors[0];", span="631-631", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetParameterizedConstructor(System.Type)", file="DefaultContractResolver.cs"];
m0_274 [label="return null;", span="634-634", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetParameterizedConstructor(System.Type)", file="DefaultContractResolver.cs"];
m0_275 [label="Exit Newtonsoft.Json.Serialization.DefaultContractResolver.GetParameterizedConstructor(System.Type)", span="614-614", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetParameterizedConstructor(System.Type)", file="DefaultContractResolver.cs"];
m0_659 [label="Entry Newtonsoft.Json.Serialization.JsonTypeReflector.CreateJsonConverterInstance(System.Type, object[])", span="200-200", cluster="Newtonsoft.Json.Serialization.JsonTypeReflector.CreateJsonConverterInstance(System.Type, object[])", file="DefaultContractResolver.cs"];
m0_499 [label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.EnsureNotNullableType(System.Type)", span="274-274", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.EnsureNotNullableType(System.Type)", file="DefaultContractResolver.cs"];
m0_3 [label="Entry Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContract(System.Type)", span="173-173", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContract(System.Type)", file="DefaultContractResolver.cs"];
m0_4 [label="type == null", span="175-175", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContract(System.Type)", file="DefaultContractResolver.cs"];
m0_5 [label="throw new ArgumentNullException(nameof(type));", span="177-177", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContract(System.Type)", file="DefaultContractResolver.cs"];
m0_8 [label="cache == null || !cache.TryGetValue(type, out contract)", span="182-182", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContract(System.Type)", file="DefaultContractResolver.cs"];
m0_9 [label="contract = CreateContract(type)", span="184-184", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContract(System.Type)", file="DefaultContractResolver.cs"];
m0_13 [label="updatedCache[type] = contract", span="193-193", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContract(System.Type)", file="DefaultContractResolver.cs"];
m0_6 [label="JsonContract contract", span="180-180", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContract(System.Type)", file="DefaultContractResolver.cs"];
m0_7 [label="Dictionary<Type, JsonContract> cache = _contractCache", span="181-181", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContract(System.Type)", file="DefaultContractResolver.cs"];
m0_15 [label="return contract;", span="199-199", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContract(System.Type)", file="DefaultContractResolver.cs"];
m0_10 [label=_typeContractCacheLock, span="187-187", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContract(System.Type)", file="DefaultContractResolver.cs"];
m0_11 [label="cache = _contractCache", span="189-189", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContract(System.Type)", file="DefaultContractResolver.cs"];
m0_12 [label="Dictionary<Type, JsonContract> updatedCache = (cache != null)\r\n                        ? new Dictionary<Type, JsonContract>(cache)\r\n                        : new Dictionary<Type, JsonContract>()", span="190-192", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContract(System.Type)", file="DefaultContractResolver.cs"];
m0_14 [label="_contractCache = updatedCache", span="195-195", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContract(System.Type)", file="DefaultContractResolver.cs"];
m0_16 [label="Exit Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContract(System.Type)", span="173-173", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContract(System.Type)", file="DefaultContractResolver.cs"];
m0_18 [label="Entry Unk.nameof", span="", cluster="Unk.nameof", file="DefaultContractResolver.cs"];
m0_133 [label="Entry Unk.GetProperties", span="", cluster="Unk.GetProperties", file="DefaultContractResolver.cs"];
m0_201 [label="Entry System.Type.GetConstructors()", span="0-0", cluster="System.Type.GetConstructors()", file="DefaultContractResolver.cs"];
m0_419 [label="Entry Newtonsoft.Json.Serialization.DefaultContractResolver.CreateDictionaryContract(System.Type)", span="944-944", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateDictionaryContract(System.Type)", file="DefaultContractResolver.cs"];
m0_420 [label="JsonDictionaryContract contract = new JsonDictionaryContract(objectType)", span="946-946", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateDictionaryContract(System.Type)", file="DefaultContractResolver.cs"];
m0_422 [label="JsonContainerAttribute containerAttribute = JsonTypeReflector.GetAttribute<JsonContainerAttribute>(objectType)", span="949-949", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateDictionaryContract(System.Type)", file="DefaultContractResolver.cs"];
m0_421 [label="InitializeContract(contract)", span="947-947", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateDictionaryContract(System.Type)", file="DefaultContractResolver.cs"];
m0_425 [label="contract.DictionaryKeyResolver = s => namingStrategy.GetDictionaryKey(s)", span="953-953", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateDictionaryContract(System.Type)", file="DefaultContractResolver.cs"];
m0_426 [label="contract.DictionaryKeyResolver = ResolveDictionaryKey", span="957-957", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateDictionaryContract(System.Type)", file="DefaultContractResolver.cs"];
m0_427 [label="ConstructorInfo overrideConstructor = GetAttributeConstructor(contract.NonNullableUnderlyingType)", span="960-960", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateDictionaryContract(System.Type)", file="DefaultContractResolver.cs"];
m0_430 [label="Type expectedParameterType = (contract.DictionaryKeyType != null && contract.DictionaryValueType != null)\r\n                    ? typeof(IEnumerable<>).MakeGenericType(typeof(KeyValuePair<,>).MakeGenericType(contract.DictionaryKeyType, contract.DictionaryValueType))\r\n                    : typeof(IDictionary)", span="965-967", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateDictionaryContract(System.Type)", file="DefaultContractResolver.cs"];
m0_432 [label="contract.HasParameterizedCreator = false", span="971-971", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateDictionaryContract(System.Type)", file="DefaultContractResolver.cs"];
m0_434 [label="contract.HasParameterizedCreator = true", span="975-975", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateDictionaryContract(System.Type)", file="DefaultContractResolver.cs"];
m0_435 [label="throw new JsonException(''Constructor for '{0}' must have no parameters or a single parameter that implements '{1}'.''.FormatWith(CultureInfo.InvariantCulture, contract.UnderlyingType, expectedParameterType));", span="979-979", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateDictionaryContract(System.Type)", file="DefaultContractResolver.cs"];
m0_436 [label="contract.OverrideCreator = JsonTypeReflector.ReflectionDelegateFactory.CreateParameterizedConstructor(overrideConstructor)", span="982-982", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateDictionaryContract(System.Type)", file="DefaultContractResolver.cs"];
m0_437 [label="return contract;", span="985-985", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateDictionaryContract(System.Type)", file="DefaultContractResolver.cs"];
m0_423 [label="containerAttribute?.NamingStrategyType != null", span="950-950", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateDictionaryContract(System.Type)", file="DefaultContractResolver.cs"];
m0_424 [label="NamingStrategy namingStrategy = JsonTypeReflector.GetContainerNamingStrategy(containerAttribute)", span="952-952", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateDictionaryContract(System.Type)", file="DefaultContractResolver.cs"];
m0_428 [label="overrideConstructor != null", span="962-962", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateDictionaryContract(System.Type)", file="DefaultContractResolver.cs"];
m0_429 [label="ParameterInfo[] parameters = overrideConstructor.GetParameters()", span="964-964", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateDictionaryContract(System.Type)", file="DefaultContractResolver.cs"];
m0_431 [label="parameters.Length == 0", span="969-969", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateDictionaryContract(System.Type)", file="DefaultContractResolver.cs"];
m0_433 [label="parameters.Length == 1 && expectedParameterType.IsAssignableFrom(parameters[0].ParameterType)", span="973-973", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateDictionaryContract(System.Type)", file="DefaultContractResolver.cs"];
m0_438 [label="Exit Newtonsoft.Json.Serialization.DefaultContractResolver.CreateDictionaryContract(System.Type)", span="944-944", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateDictionaryContract(System.Type)", file="DefaultContractResolver.cs"];
m0_569 [label="Entry DynamicValueProvider.cstr", span="", cluster="DynamicValueProvider.cstr", file="DefaultContractResolver.cs"];
m0_213 [label="Entry Newtonsoft.Json.JsonSerializationException.JsonSerializationException(string)", span="52-52", cluster="Newtonsoft.Json.JsonSerializationException.JsonSerializationException(string)", file="DefaultContractResolver.cs"];
m0_399 [label="Entry Newtonsoft.Json.Serialization.DefaultContractResolver.ShouldSkipSerializing(System.Type)", span="905-905", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.ShouldSkipSerializing(System.Type)", file="DefaultContractResolver.cs"];
m0_407 [label="return false;", span="920-920", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.ShouldSkipSerializing(System.Type)", file="DefaultContractResolver.cs"];
m0_408 [label="Exit Newtonsoft.Json.Serialization.DefaultContractResolver.ShouldSkipSerializing(System.Type)", span="905-905", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.ShouldSkipSerializing(System.Type)", file="DefaultContractResolver.cs"];
m0_107 [label="Entry Newtonsoft.Json.Serialization.JsonTypeReflector.GetContainerNamingStrategy(Newtonsoft.Json.JsonContainerAttribute)", span="212-212", cluster="Newtonsoft.Json.Serialization.JsonTypeReflector.GetContainerNamingStrategy(Newtonsoft.Json.JsonContainerAttribute)", file="DefaultContractResolver.cs"];
m0_472 [label="Entry Newtonsoft.Json.Serialization.DefaultContractResolver.CreateStringContract(System.Type)", span="1108-1108", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateStringContract(System.Type)", file="DefaultContractResolver.cs"];
m0_473 [label="JsonStringContract contract = new JsonStringContract(objectType)", span="1110-1110", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateStringContract(System.Type)", file="DefaultContractResolver.cs"];
m0_474 [label="InitializeContract(contract)", span="1111-1111", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateStringContract(System.Type)", file="DefaultContractResolver.cs"];
m0_475 [label="return contract;", span="1113-1113", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateStringContract(System.Type)", file="DefaultContractResolver.cs"];
m0_476 [label="Exit Newtonsoft.Json.Serialization.DefaultContractResolver.CreateStringContract(System.Type)", span="1108-1108", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateStringContract(System.Type)", file="DefaultContractResolver.cs"];
m0_553 [label="Entry Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperty(System.Reflection.MemberInfo, Newtonsoft.Json.MemberSerialization)", span="1363-1363", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperty(System.Reflection.MemberInfo, Newtonsoft.Json.MemberSerialization)", file="DefaultContractResolver.cs"];
m0_571 [label="JsonProperty property = new JsonProperty()", span="1365-1365", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperty(System.Reflection.MemberInfo, Newtonsoft.Json.MemberSerialization)", file="DefaultContractResolver.cs"];
m0_572 [label="property.PropertyType = ReflectionUtils.GetMemberUnderlyingType(member)", span="1366-1366", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperty(System.Reflection.MemberInfo, Newtonsoft.Json.MemberSerialization)", file="DefaultContractResolver.cs"];
m0_573 [label="property.DeclaringType = member.DeclaringType", span="1367-1367", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperty(System.Reflection.MemberInfo, Newtonsoft.Json.MemberSerialization)", file="DefaultContractResolver.cs"];
m0_574 [label="property.ValueProvider = CreateMemberValueProvider(member)", span="1368-1368", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperty(System.Reflection.MemberInfo, Newtonsoft.Json.MemberSerialization)", file="DefaultContractResolver.cs"];
m0_575 [label="property.AttributeProvider = new ReflectionAttributeProvider(member)", span="1369-1369", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperty(System.Reflection.MemberInfo, Newtonsoft.Json.MemberSerialization)", file="DefaultContractResolver.cs"];
m0_577 [label="SetPropertySettingsFromAttributes(property, member, member.Name, member.DeclaringType, memberSerialization, out allowNonPublicAccess)", span="1372-1372", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperty(System.Reflection.MemberInfo, Newtonsoft.Json.MemberSerialization)", file="DefaultContractResolver.cs"];
m0_578 [label="memberSerialization != MemberSerialization.Fields", span="1374-1374", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperty(System.Reflection.MemberInfo, Newtonsoft.Json.MemberSerialization)", file="DefaultContractResolver.cs"];
m0_579 [label="property.Readable = ReflectionUtils.CanReadMemberValue(member, allowNonPublicAccess)", span="1376-1376", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperty(System.Reflection.MemberInfo, Newtonsoft.Json.MemberSerialization)", file="DefaultContractResolver.cs"];
m0_580 [label="property.Writable = ReflectionUtils.CanSetMemberValue(member, allowNonPublicAccess, property.HasMemberAttribute)", span="1377-1377", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperty(System.Reflection.MemberInfo, Newtonsoft.Json.MemberSerialization)", file="DefaultContractResolver.cs"];
m0_583 [label="property.ShouldSerialize = CreateShouldSerializeTest(member)", span="1385-1385", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperty(System.Reflection.MemberInfo, Newtonsoft.Json.MemberSerialization)", file="DefaultContractResolver.cs"];
m0_584 [label="SetIsSpecifiedActions(property, member, allowNonPublicAccess)", span="1387-1387", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperty(System.Reflection.MemberInfo, Newtonsoft.Json.MemberSerialization)", file="DefaultContractResolver.cs"];
m0_581 [label="property.Readable = true", span="1382-1382", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperty(System.Reflection.MemberInfo, Newtonsoft.Json.MemberSerialization)", file="DefaultContractResolver.cs"];
m0_582 [label="property.Writable = true", span="1383-1383", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperty(System.Reflection.MemberInfo, Newtonsoft.Json.MemberSerialization)", file="DefaultContractResolver.cs"];
m0_585 [label="return property;", span="1389-1389", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperty(System.Reflection.MemberInfo, Newtonsoft.Json.MemberSerialization)", file="DefaultContractResolver.cs"];
m0_576 [label="bool allowNonPublicAccess", span="1371-1371", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperty(System.Reflection.MemberInfo, Newtonsoft.Json.MemberSerialization)", file="DefaultContractResolver.cs"];
m0_586 [label="Exit Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperty(System.Reflection.MemberInfo, Newtonsoft.Json.MemberSerialization)", span="1363-1363", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperty(System.Reflection.MemberInfo, Newtonsoft.Json.MemberSerialization)", file="DefaultContractResolver.cs"];
m0_286 [label="Entry Newtonsoft.Json.Serialization.JsonPropertyCollection.JsonPropertyCollection(System.Type)", span="46-46", cluster="Newtonsoft.Json.Serialization.JsonPropertyCollection.JsonPropertyCollection(System.Type)", file="DefaultContractResolver.cs"];
m0_191 [label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.GetAttribute<T>(object)", span="728-728", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetAttribute<T>(object)", file="DefaultContractResolver.cs"];
m0_197 [label="Entry Newtonsoft.Json.Utilities.ReflectionDelegateFactory.CreateSet<T>(System.Reflection.MemberInfo)", span="55-55", cluster="Newtonsoft.Json.Utilities.ReflectionDelegateFactory.CreateSet<T>(System.Reflection.MemberInfo)", file="DefaultContractResolver.cs"];
m0_135 [label="Entry Unk.GetFields", span="", cluster="Unk.GetFields", file="DefaultContractResolver.cs"];
m0_195 [label="Entry Newtonsoft.Json.Utilities.ReflectionDelegateFactory.CreateGet<T>(System.Reflection.MemberInfo)", span="38-38", cluster="Newtonsoft.Json.Utilities.ReflectionDelegateFactory.CreateGet<T>(System.Reflection.MemberInfo)", file="DefaultContractResolver.cs"];
m0_230 [label="Entry Newtonsoft.Json.Serialization.DefaultContractResolver.EnumerableDictionaryWrapper<TEnumeratorKey, TEnumeratorValue>.GetEnumerator()", span="547-547", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.EnumerableDictionaryWrapper<TEnumeratorKey, TEnumeratorValue>.GetEnumerator()", file="DefaultContractResolver.cs"];
m0_231 [label=_e, span="549-549", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.EnumerableDictionaryWrapper<TEnumeratorKey, TEnumeratorValue>.GetEnumerator()", file="DefaultContractResolver.cs"];
m0_232 [label="yield return new KeyValuePair<object, object>(item.Key, item.Value);", span="551-551", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.EnumerableDictionaryWrapper<TEnumeratorKey, TEnumeratorValue>.GetEnumerator()", file="DefaultContractResolver.cs"];
m0_233 [label="Exit Newtonsoft.Json.Serialization.DefaultContractResolver.EnumerableDictionaryWrapper<TEnumeratorKey, TEnumeratorValue>.GetEnumerator()", span="547-547", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.EnumerableDictionaryWrapper<TEnumeratorKey, TEnumeratorValue>.GetEnumerator()", file="DefaultContractResolver.cs"];
m0_326 [label="Entry Newtonsoft.Json.Serialization.DefaultContractResolver.GetDefaultCreator(System.Type)", span="740-740", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetDefaultCreator(System.Type)", file="DefaultContractResolver.cs"];
m0_327 [label="return JsonTypeReflector.ReflectionDelegateFactory.CreateDefaultConstructor<object>(createdType);", span="742-742", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetDefaultCreator(System.Type)", file="DefaultContractResolver.cs"];
m0_328 [label="Exit Newtonsoft.Json.Serialization.DefaultContractResolver.GetDefaultCreator(System.Type)", span="740-740", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetDefaultCreator(System.Type)", file="DefaultContractResolver.cs"];
m0_418 [label="Entry System.Collections.Generic.List<T>.Reverse()", span="0-0", cluster="System.Collections.Generic.List<T>.Reverse()", file="DefaultContractResolver.cs"];
m0_657 [label="Entry Newtonsoft.Json.Serialization.NamingStrategy.GetPropertyName(string, bool)", span="32-32", cluster="Newtonsoft.Json.Serialization.NamingStrategy.GetPropertyName(string, bool)", file="DefaultContractResolver.cs"];
m0_214 [label="Entry string.FormatWith(System.IFormatProvider, object)", span="47-47", cluster="string.FormatWith(System.IFormatProvider, object)", file="DefaultContractResolver.cs"];
m0_125 [label="Entry Unk.SelectMany", span="", cluster="Unk.SelectMany", file="DefaultContractResolver.cs"];
m0_529 [label="Entry Newtonsoft.Json.Serialization.DefaultContractResolver.GetClrTypeFullName(System.Type)", span="1276-1276", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetClrTypeFullName(System.Type)", file="DefaultContractResolver.cs"];
m0_532 [label="type.IsGenericTypeDefinition() || !type.ContainsGenericParameters()", span="1278-1278", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetClrTypeFullName(System.Type)", file="DefaultContractResolver.cs"];
m0_533 [label="return type.FullName;", span="1280-1280", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetClrTypeFullName(System.Type)", file="DefaultContractResolver.cs"];
m0_534 [label="return ''{0}.{1}''.FormatWith(CultureInfo.InvariantCulture, type.Namespace, type.Name);", span="1283-1283", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetClrTypeFullName(System.Type)", file="DefaultContractResolver.cs"];
m0_535 [label="Exit Newtonsoft.Json.Serialization.DefaultContractResolver.GetClrTypeFullName(System.Type)", span="1276-1276", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetClrTypeFullName(System.Type)", file="DefaultContractResolver.cs"];
m0_341 [label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.GetDefaultConstructor(System.Type)", span="239-239", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetDefaultConstructor(System.Type)", file="DefaultContractResolver.cs"];
m0_115 [label="Entry Newtonsoft.Json.Serialization.DefaultContractResolver.SetExtensionDataDelegates(Newtonsoft.Json.Serialization.JsonObjectContract, System.Reflection.MemberInfo)", span="453-453", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetExtensionDataDelegates(Newtonsoft.Json.Serialization.JsonObjectContract, System.Reflection.MemberInfo)", file="DefaultContractResolver.cs"];
m0_163 [label="JsonExtensionDataAttribute extensionDataAttribute = ReflectionUtils.GetAttribute<JsonExtensionDataAttribute>(member)", span="455-455", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetExtensionDataDelegates(Newtonsoft.Json.Serialization.JsonObjectContract, System.Reflection.MemberInfo)", file="DefaultContractResolver.cs"];
m0_166 [label="Type t = ReflectionUtils.GetMemberUnderlyingType(member)", span="461-461", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetExtensionDataDelegates(Newtonsoft.Json.Serialization.JsonObjectContract, System.Reflection.MemberInfo)", file="DefaultContractResolver.cs"];
m0_175 [label="Func<object, object> getExtensionDataDictionary = JsonTypeReflector.ReflectionDelegateFactory.CreateGet<object>(member)", span="481-481", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetExtensionDataDelegates(Newtonsoft.Json.Serialization.JsonObjectContract, System.Reflection.MemberInfo)", file="DefaultContractResolver.cs"];
m0_177 [label="Action<object, object> setExtensionDataDictionary = (ReflectionUtils.CanSetMemberValue(member, true, false))\r\n                 ? JsonTypeReflector.ReflectionDelegateFactory.CreateSet<object>(member)\r\n                 : null", span="485-487", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetExtensionDataDelegates(Newtonsoft.Json.Serialization.JsonObjectContract, System.Reflection.MemberInfo)", file="DefaultContractResolver.cs"];
m0_181 [label="ExtensionDataSetter extensionDataSetter = (o, key, value) =>\r\n                {\r\n                    object dictionary = getExtensionDataDictionary(o);\r\n                    if (dictionary == null)\r\n                    {\r\n                        if (setExtensionDataDictionary == null)\r\n                        {\r\n                            throw new JsonSerializationException(''Cannot set value onto extension data member '{0}'. The extension data collection is null and it cannot be set.''.FormatWith(CultureInfo.InvariantCulture, member.Name));\r\n                        }\r\n\r\n                        dictionary = createExtensionDataDictionary();\r\n                        setExtensionDataDictionary(o, dictionary);\r\n                    }\r\n\r\n                    setExtensionDataDictionaryValue(dictionary, key, value);\r\n                }", span="492-507", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetExtensionDataDelegates(Newtonsoft.Json.Serialization.JsonObjectContract, System.Reflection.MemberInfo)", file="DefaultContractResolver.cs"];
m0_182 [label="contract.ExtensionDataSetter = extensionDataSetter", span="509-509", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetExtensionDataDelegates(Newtonsoft.Json.Serialization.JsonObjectContract, System.Reflection.MemberInfo)", file="DefaultContractResolver.cs"];
m0_188 [label="contract.ExtensionDataGetter = extensionDataGetter", span="529-529", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetExtensionDataDelegates(Newtonsoft.Json.Serialization.JsonObjectContract, System.Reflection.MemberInfo)", file="DefaultContractResolver.cs"];
m0_189 [label="contract.ExtensionDataValueType = valueType", span="532-532", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetExtensionDataDelegates(Newtonsoft.Json.Serialization.JsonObjectContract, System.Reflection.MemberInfo)", file="DefaultContractResolver.cs"];
m0_164 [label="extensionDataAttribute == null", span="456-456", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetExtensionDataDelegates(Newtonsoft.Json.Serialization.JsonObjectContract, System.Reflection.MemberInfo)", file="DefaultContractResolver.cs"];
m0_176 [label="extensionDataAttribute.ReadData", span="483-483", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetExtensionDataDelegates(Newtonsoft.Json.Serialization.JsonObjectContract, System.Reflection.MemberInfo)", file="DefaultContractResolver.cs"];
m0_183 [label="extensionDataAttribute.WriteData", span="512-512", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetExtensionDataDelegates(Newtonsoft.Json.Serialization.JsonObjectContract, System.Reflection.MemberInfo)", file="DefaultContractResolver.cs"];
m0_165 [label="return;", span="458-458", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetExtensionDataDelegates(Newtonsoft.Json.Serialization.JsonObjectContract, System.Reflection.MemberInfo)", file="DefaultContractResolver.cs"];
m0_167 [label="Type dictionaryType", span="463-463", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetExtensionDataDelegates(Newtonsoft.Json.Serialization.JsonObjectContract, System.Reflection.MemberInfo)", file="DefaultContractResolver.cs"];
m0_168 [label="ReflectionUtils.ImplementsGenericDefinition(t, typeof(IDictionary<,>), out dictionaryType)", span="464-464", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetExtensionDataDelegates(Newtonsoft.Json.Serialization.JsonObjectContract, System.Reflection.MemberInfo)", file="DefaultContractResolver.cs"];
m0_172 [label="ReflectionUtils.IsGenericDefinition(t, typeof(IDictionary<,>))", span="472-472", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetExtensionDataDelegates(Newtonsoft.Json.Serialization.JsonObjectContract, System.Reflection.MemberInfo)", file="DefaultContractResolver.cs"];
m0_174 [label="createdType = t", span="478-478", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetExtensionDataDelegates(Newtonsoft.Json.Serialization.JsonObjectContract, System.Reflection.MemberInfo)", file="DefaultContractResolver.cs"];
m0_179 [label="MethodInfo addMethod = t.GetMethod(''Add'', new[] { keyType, valueType })", span="489-489", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetExtensionDataDelegates(Newtonsoft.Json.Serialization.JsonObjectContract, System.Reflection.MemberInfo)", file="DefaultContractResolver.cs"];
m0_169 [label="Type keyType = dictionaryType.GetGenericArguments()[0]", span="466-466", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetExtensionDataDelegates(Newtonsoft.Json.Serialization.JsonObjectContract, System.Reflection.MemberInfo)", file="DefaultContractResolver.cs"];
m0_170 [label="Type valueType = dictionaryType.GetGenericArguments()[1]", span="467-467", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetExtensionDataDelegates(Newtonsoft.Json.Serialization.JsonObjectContract, System.Reflection.MemberInfo)", file="DefaultContractResolver.cs"];
m0_173 [label="createdType = typeof(Dictionary<,>).MakeGenericType(keyType, valueType)", span="474-474", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetExtensionDataDelegates(Newtonsoft.Json.Serialization.JsonObjectContract, System.Reflection.MemberInfo)", file="DefaultContractResolver.cs"];
m0_184 [label="Type enumerableWrapper = typeof(EnumerableDictionaryWrapper<,>).MakeGenericType(keyType, valueType)", span="514-514", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetExtensionDataDelegates(Newtonsoft.Json.Serialization.JsonObjectContract, System.Reflection.MemberInfo)", file="DefaultContractResolver.cs"];
m0_171 [label="Type createdType", span="469-469", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetExtensionDataDelegates(Newtonsoft.Json.Serialization.JsonObjectContract, System.Reflection.MemberInfo)", file="DefaultContractResolver.cs"];
m0_178 [label="Func<object> createExtensionDataDictionary = JsonTypeReflector.ReflectionDelegateFactory.CreateDefaultConstructor<object>(createdType)", span="488-488", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetExtensionDataDelegates(Newtonsoft.Json.Serialization.JsonObjectContract, System.Reflection.MemberInfo)", file="DefaultContractResolver.cs"];
m0_187 [label="ExtensionDataGetter extensionDataGetter = o =>\r\n                {\r\n                    object dictionary = getExtensionDataDictionary(o);\r\n                    if (dictionary == null)\r\n                    {\r\n                        return null;\r\n                    }\r\n\r\n                    return (IEnumerable<KeyValuePair<object, object>>)createEnumerableWrapper(dictionary);\r\n                }", span="518-527", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetExtensionDataDelegates(Newtonsoft.Json.Serialization.JsonObjectContract, System.Reflection.MemberInfo)", file="DefaultContractResolver.cs"];
m0_180 [label="MethodCall<object, object> setExtensionDataDictionaryValue = JsonTypeReflector.ReflectionDelegateFactory.CreateMethodCall<object>(addMethod)", span="490-490", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetExtensionDataDelegates(Newtonsoft.Json.Serialization.JsonObjectContract, System.Reflection.MemberInfo)", file="DefaultContractResolver.cs"];
m0_185 [label="ConstructorInfo constructors = enumerableWrapper.GetConstructors().First()", span="515-515", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetExtensionDataDelegates(Newtonsoft.Json.Serialization.JsonObjectContract, System.Reflection.MemberInfo)", file="DefaultContractResolver.cs"];
m0_186 [label="ObjectConstructor<object> createEnumerableWrapper = JsonTypeReflector.ReflectionDelegateFactory.CreateParameterizedConstructor(constructors)", span="516-516", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetExtensionDataDelegates(Newtonsoft.Json.Serialization.JsonObjectContract, System.Reflection.MemberInfo)", file="DefaultContractResolver.cs"];
m0_190 [label="Exit Newtonsoft.Json.Serialization.DefaultContractResolver.SetExtensionDataDelegates(Newtonsoft.Json.Serialization.JsonObjectContract, System.Reflection.MemberInfo)", span="453-453", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetExtensionDataDelegates(Newtonsoft.Json.Serialization.JsonObjectContract, System.Reflection.MemberInfo)", file="DefaultContractResolver.cs"];
m0_588 [label="Entry Newtonsoft.Json.Serialization.DefaultContractResolver.CreateShouldSerializeTest(System.Reflection.MemberInfo)", span="1562-1562", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateShouldSerializeTest(System.Reflection.MemberInfo)", file="DefaultContractResolver.cs"];
m0_660 [label="MethodInfo shouldSerializeMethod = member.DeclaringType.GetMethod(JsonTypeReflector.ShouldSerializePrefix + member.Name, ReflectionUtils.EmptyTypes)", span="1564-1564", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateShouldSerializeTest(System.Reflection.MemberInfo)", file="DefaultContractResolver.cs"];
m0_661 [label="shouldSerializeMethod == null || shouldSerializeMethod.ReturnType != typeof(bool)", span="1566-1566", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateShouldSerializeTest(System.Reflection.MemberInfo)", file="DefaultContractResolver.cs"];
m0_663 [label="MethodCall<object, object> shouldSerializeCall =\r\n                JsonTypeReflector.ReflectionDelegateFactory.CreateMethodCall<object>(shouldSerializeMethod)", span="1571-1572", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateShouldSerializeTest(System.Reflection.MemberInfo)", file="DefaultContractResolver.cs"];
m0_662 [label="return null;", span="1568-1568", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateShouldSerializeTest(System.Reflection.MemberInfo)", file="DefaultContractResolver.cs"];
m0_664 [label="return o => (bool)shouldSerializeCall(o);", span="1574-1574", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateShouldSerializeTest(System.Reflection.MemberInfo)", file="DefaultContractResolver.cs"];
m0_665 [label="Exit Newtonsoft.Json.Serialization.DefaultContractResolver.CreateShouldSerializeTest(System.Reflection.MemberInfo)", span="1562-1562", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateShouldSerializeTest(System.Reflection.MemberInfo)", file="DefaultContractResolver.cs"];
m0_360 [label="Entry Newtonsoft.Json.Serialization.DefaultContractResolver.GetCallbackMethodsForType(System.Type, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationErrorCallback>)", span="820-820", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetCallbackMethodsForType(System.Type, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationErrorCallback>)", file="DefaultContractResolver.cs"];
m0_361 [label="onSerializing = null", span="822-822", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetCallbackMethodsForType(System.Type, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationErrorCallback>)", file="DefaultContractResolver.cs"];
m0_366 [label="GetClassHierarchyForType(type)", span="828-828", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetCallbackMethodsForType(System.Type, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationErrorCallback>)", file="DefaultContractResolver.cs"];
m0_362 [label="onSerialized = null", span="823-823", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetCallbackMethodsForType(System.Type, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationErrorCallback>)", file="DefaultContractResolver.cs"];
m0_379 [label="onSerializing = onSerializing ?? new List<SerializationCallback>()", span="854-854", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetCallbackMethodsForType(System.Type, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationErrorCallback>)", file="DefaultContractResolver.cs"];
m0_363 [label="onDeserializing = null", span="824-824", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetCallbackMethodsForType(System.Type, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationErrorCallback>)", file="DefaultContractResolver.cs"];
m0_383 [label="onSerialized = onSerialized ?? new List<SerializationCallback>()", span="860-860", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetCallbackMethodsForType(System.Type, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationErrorCallback>)", file="DefaultContractResolver.cs"];
m0_364 [label="onDeserialized = null", span="825-825", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetCallbackMethodsForType(System.Type, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationErrorCallback>)", file="DefaultContractResolver.cs"];
m0_387 [label="onDeserializing = onDeserializing ?? new List<SerializationCallback>()", span="866-866", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetCallbackMethodsForType(System.Type, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationErrorCallback>)", file="DefaultContractResolver.cs"];
m0_365 [label="onError = null", span="826-826", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetCallbackMethodsForType(System.Type, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationErrorCallback>)", file="DefaultContractResolver.cs"];
m0_391 [label="onDeserialized = onDeserialized ?? new List<SerializationCallback>()", span="872-872", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetCallbackMethodsForType(System.Type, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationErrorCallback>)", file="DefaultContractResolver.cs"];
m0_395 [label="onError = onError ?? new List<SerializationErrorCallback>()", span="878-878", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetCallbackMethodsForType(System.Type, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationErrorCallback>)", file="DefaultContractResolver.cs"];
m0_367 [label="MethodInfo currentOnSerializing = null", span="831-831", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetCallbackMethodsForType(System.Type, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationErrorCallback>)", file="DefaultContractResolver.cs"];
m0_372 [label="bool skipSerializing = ShouldSkipSerializing(baseType)", span="837-837", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetCallbackMethodsForType(System.Type, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationErrorCallback>)", file="DefaultContractResolver.cs"];
m0_373 [label="bool skipDeserialized = ShouldSkipDeserialized(baseType)", span="838-838", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetCallbackMethodsForType(System.Type, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationErrorCallback>)", file="DefaultContractResolver.cs"];
m0_374 [label="baseType.GetMethods(BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly)", span="840-840", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetCallbackMethodsForType(System.Type, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationErrorCallback>)", file="DefaultContractResolver.cs"];
m0_368 [label="MethodInfo currentOnSerialized = null", span="832-832", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetCallbackMethodsForType(System.Type, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationErrorCallback>)", file="DefaultContractResolver.cs"];
m0_378 [label="!skipSerializing && IsValidCallback(method, parameters, typeof(OnSerializingAttribute), currentOnSerializing, ref prevAttributeType)", span="852-852", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetCallbackMethodsForType(System.Type, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationErrorCallback>)", file="DefaultContractResolver.cs"];
m0_369 [label="MethodInfo currentOnDeserializing = null", span="833-833", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetCallbackMethodsForType(System.Type, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationErrorCallback>)", file="DefaultContractResolver.cs"];
m0_382 [label="IsValidCallback(method, parameters, typeof(OnSerializedAttribute), currentOnSerialized, ref prevAttributeType)", span="858-858", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetCallbackMethodsForType(System.Type, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationErrorCallback>)", file="DefaultContractResolver.cs"];
m0_370 [label="MethodInfo currentOnDeserialized = null", span="834-834", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetCallbackMethodsForType(System.Type, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationErrorCallback>)", file="DefaultContractResolver.cs"];
m0_386 [label="IsValidCallback(method, parameters, typeof(OnDeserializingAttribute), currentOnDeserializing, ref prevAttributeType)", span="864-864", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetCallbackMethodsForType(System.Type, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationErrorCallback>)", file="DefaultContractResolver.cs"];
m0_371 [label="MethodInfo currentOnError = null", span="835-835", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetCallbackMethodsForType(System.Type, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationErrorCallback>)", file="DefaultContractResolver.cs"];
m0_390 [label="!skipDeserialized && IsValidCallback(method, parameters, typeof(OnDeserializedAttribute), currentOnDeserialized, ref prevAttributeType)", span="870-870", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetCallbackMethodsForType(System.Type, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationErrorCallback>)", file="DefaultContractResolver.cs"];
m0_394 [label="IsValidCallback(method, parameters, typeof(OnErrorAttribute), currentOnError, ref prevAttributeType)", span="876-876", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetCallbackMethodsForType(System.Type, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationErrorCallback>)", file="DefaultContractResolver.cs"];
m0_375 [label="method.ContainsGenericParameters", span="844-844", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetCallbackMethodsForType(System.Type, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationErrorCallback>)", file="DefaultContractResolver.cs"];
m0_377 [label="ParameterInfo[] parameters = method.GetParameters()", span="850-850", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetCallbackMethodsForType(System.Type, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationErrorCallback>)", file="DefaultContractResolver.cs"];
m0_380 [label="onSerializing.Add(JsonContract.CreateSerializationCallback(method))", span="855-855", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetCallbackMethodsForType(System.Type, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationErrorCallback>)", file="DefaultContractResolver.cs"];
m0_381 [label="currentOnSerializing = method", span="856-856", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetCallbackMethodsForType(System.Type, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationErrorCallback>)", file="DefaultContractResolver.cs"];
m0_384 [label="onSerialized.Add(JsonContract.CreateSerializationCallback(method))", span="861-861", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetCallbackMethodsForType(System.Type, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationErrorCallback>)", file="DefaultContractResolver.cs"];
m0_385 [label="currentOnSerialized = method", span="862-862", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetCallbackMethodsForType(System.Type, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationErrorCallback>)", file="DefaultContractResolver.cs"];
m0_388 [label="onDeserializing.Add(JsonContract.CreateSerializationCallback(method))", span="867-867", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetCallbackMethodsForType(System.Type, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationErrorCallback>)", file="DefaultContractResolver.cs"];
m0_389 [label="currentOnDeserializing = method", span="868-868", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetCallbackMethodsForType(System.Type, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationErrorCallback>)", file="DefaultContractResolver.cs"];
m0_392 [label="onDeserialized.Add(JsonContract.CreateSerializationCallback(method))", span="873-873", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetCallbackMethodsForType(System.Type, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationErrorCallback>)", file="DefaultContractResolver.cs"];
m0_393 [label="currentOnDeserialized = method", span="874-874", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetCallbackMethodsForType(System.Type, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationErrorCallback>)", file="DefaultContractResolver.cs"];
m0_396 [label="onError.Add(JsonContract.CreateSerializationErrorCallback(method))", span="879-879", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetCallbackMethodsForType(System.Type, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationErrorCallback>)", file="DefaultContractResolver.cs"];
m0_397 [label="currentOnError = method", span="880-880", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetCallbackMethodsForType(System.Type, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationErrorCallback>)", file="DefaultContractResolver.cs"];
m0_376 [label="Type prevAttributeType = null", span="849-849", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetCallbackMethodsForType(System.Type, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationErrorCallback>)", file="DefaultContractResolver.cs"];
m0_398 [label="Exit Newtonsoft.Json.Serialization.DefaultContractResolver.GetCallbackMethodsForType(System.Type, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationErrorCallback>)", span="820-820", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetCallbackMethodsForType(System.Type, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>, out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationErrorCallback>)", file="DefaultContractResolver.cs"];
m0_102 [label="Entry Newtonsoft.Json.Serialization.JsonObjectContract.JsonObjectContract(System.Type)", span="162-162", cluster="Newtonsoft.Json.Serialization.JsonObjectContract.JsonObjectContract(System.Type)", file="DefaultContractResolver.cs"];
m0_196 [label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.CanSetMemberValue(System.Reflection.MemberInfo, bool, bool)", span="604-604", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.CanSetMemberValue(System.Reflection.MemberInfo, bool, bool)", file="DefaultContractResolver.cs"];
m0_699 [label="Entry Newtonsoft.Json.Serialization.DefaultContractResolver.GetResolvedPropertyName(string)", span="1650-1650", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetResolvedPropertyName(string)", file="DefaultContractResolver.cs"];
m0_700 [label="return ResolvePropertyName(propertyName);", span="1654-1654", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetResolvedPropertyName(string)", file="DefaultContractResolver.cs"];
m0_701 [label="Exit Newtonsoft.Json.Serialization.DefaultContractResolver.GetResolvedPropertyName(string)", span="1650-1650", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetResolvedPropertyName(string)", file="DefaultContractResolver.cs"];
m0_269 [label="Entry System.Reflection.MethodBase.GetParameters()", span="0-0", cluster="System.Reflection.MethodBase.GetParameters()", file="DefaultContractResolver.cs"];
m0_54 [label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.List<T>.Add(T)", file="DefaultContractResolver.cs"];
m0_536 [label="Entry System.Type.IsGenericTypeDefinition()", span="162-162", cluster="System.Type.IsGenericTypeDefinition()", file="DefaultContractResolver.cs"];
m0_108 [label="Entry Newtonsoft.Json.Serialization.DefaultContractResolver.GetAttributeConstructor(System.Type)", span="561-561", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetAttributeConstructor(System.Type)", file="DefaultContractResolver.cs"];
m0_238 [label="IEnumerator<ConstructorInfo> en = objectType.GetConstructors(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic).Where(c => c.IsDefined(typeof(JsonConstructorAttribute), true)).GetEnumerator()", span="563-563", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetAttributeConstructor(System.Type)", file="DefaultContractResolver.cs"];
m0_244 [label="objectType == typeof(Version)", span="577-577", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetAttributeConstructor(System.Type)", file="DefaultContractResolver.cs"];
m0_245 [label="return objectType.GetConstructor(new[] { typeof(int), typeof(int), typeof(int), typeof(int) });", span="579-579", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetAttributeConstructor(System.Type)", file="DefaultContractResolver.cs"];
m0_239 [label="en.MoveNext()", span="565-565", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetAttributeConstructor(System.Type)", file="DefaultContractResolver.cs"];
m0_240 [label="ConstructorInfo conInfo = en.Current", span="567-567", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetAttributeConstructor(System.Type)", file="DefaultContractResolver.cs"];
m0_241 [label="en.MoveNext()", span="568-568", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetAttributeConstructor(System.Type)", file="DefaultContractResolver.cs"];
m0_243 [label="return conInfo;", span="573-573", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetAttributeConstructor(System.Type)", file="DefaultContractResolver.cs"];
m0_242 [label="throw new JsonException(''Multiple constructors with the JsonConstructorAttribute.'');", span="570-570", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetAttributeConstructor(System.Type)", file="DefaultContractResolver.cs"];
m0_246 [label="return null;", span="582-582", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetAttributeConstructor(System.Type)", file="DefaultContractResolver.cs"];
m0_247 [label="Exit Newtonsoft.Json.Serialization.DefaultContractResolver.GetAttributeConstructor(System.Type)", span="561-561", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetAttributeConstructor(System.Type)", file="DefaultContractResolver.cs"];
m0_22 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="DefaultContractResolver.cs"];
m0_216 [label="Entry Newtonsoft.Json.Serialization.Action<T1, T2>.Invoke(T1, T2)", span="3050-3050", cluster="Newtonsoft.Json.Serialization.Action<T1, T2>.Invoke(T1, T2)", file="DefaultContractResolver.cs"];
m0_444 [label="Entry Newtonsoft.Json.Serialization.DefaultContractResolver.CreateArrayContract(System.Type)", span="993-993", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateArrayContract(System.Type)", file="DefaultContractResolver.cs"];
m0_445 [label="JsonArrayContract contract = new JsonArrayContract(objectType)", span="995-995", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateArrayContract(System.Type)", file="DefaultContractResolver.cs"];
m0_446 [label="InitializeContract(contract)", span="996-996", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateArrayContract(System.Type)", file="DefaultContractResolver.cs"];
m0_447 [label="ConstructorInfo overrideConstructor = GetAttributeConstructor(contract.NonNullableUnderlyingType)", span="998-998", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateArrayContract(System.Type)", file="DefaultContractResolver.cs"];
m0_450 [label="Type expectedParameterType = (contract.CollectionItemType != null)\r\n                    ? typeof(IEnumerable<>).MakeGenericType(contract.CollectionItemType)\r\n                    : typeof(IEnumerable)", span="1003-1005", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateArrayContract(System.Type)", file="DefaultContractResolver.cs"];
m0_452 [label="contract.HasParameterizedCreator = false", span="1009-1009", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateArrayContract(System.Type)", file="DefaultContractResolver.cs"];
m0_454 [label="contract.HasParameterizedCreator = true", span="1013-1013", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateArrayContract(System.Type)", file="DefaultContractResolver.cs"];
m0_455 [label="throw new JsonException(''Constructor for '{0}' must have no parameters or a single parameter that implements '{1}'.''.FormatWith(CultureInfo.InvariantCulture, contract.UnderlyingType, expectedParameterType));", span="1017-1017", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateArrayContract(System.Type)", file="DefaultContractResolver.cs"];
m0_456 [label="contract.OverrideCreator = JsonTypeReflector.ReflectionDelegateFactory.CreateParameterizedConstructor(overrideConstructor)", span="1020-1020", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateArrayContract(System.Type)", file="DefaultContractResolver.cs"];
m0_457 [label="return contract;", span="1023-1023", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateArrayContract(System.Type)", file="DefaultContractResolver.cs"];
m0_448 [label="overrideConstructor != null", span="1000-1000", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateArrayContract(System.Type)", file="DefaultContractResolver.cs"];
m0_449 [label="ParameterInfo[] parameters = overrideConstructor.GetParameters()", span="1002-1002", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateArrayContract(System.Type)", file="DefaultContractResolver.cs"];
m0_451 [label="parameters.Length == 0", span="1007-1007", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateArrayContract(System.Type)", file="DefaultContractResolver.cs"];
m0_453 [label="parameters.Length == 1 && expectedParameterType.IsAssignableFrom(parameters[0].ParameterType)", span="1011-1011", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateArrayContract(System.Type)", file="DefaultContractResolver.cs"];
m0_458 [label="Exit Newtonsoft.Json.Serialization.DefaultContractResolver.CreateArrayContract(System.Type)", span="993-993", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateArrayContract(System.Type)", file="DefaultContractResolver.cs"];
m0_320 [label="Entry Newtonsoft.Json.Serialization.ReflectionAttributeProvider.ReflectionAttributeProvider(object)", span="43-43", cluster="Newtonsoft.Json.Serialization.ReflectionAttributeProvider.ReflectionAttributeProvider(object)", file="DefaultContractResolver.cs"];
m0_200 [label="Entry Newtonsoft.Json.Utilities.ReflectionDelegateFactory.CreateMethodCall<T>(System.Reflection.MethodBase)", span="72-72", cluster="Newtonsoft.Json.Utilities.ReflectionDelegateFactory.CreateMethodCall<T>(System.Reflection.MethodBase)", file="DefaultContractResolver.cs"];
m0_251 [label="Entry System.Type.GetConstructor(System.Type[])", span="0-0", cluster="System.Type.GetConstructor(System.Type[])", file="DefaultContractResolver.cs"];
m0_658 [label="Entry Newtonsoft.Json.Serialization.DefaultContractResolver.ResolvePropertyName(string)", span="1605-1605", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.ResolvePropertyName(string)", file="DefaultContractResolver.cs"];
m0_684 [label="NamingStrategy != null", span="1607-1607", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.ResolvePropertyName(string)", file="DefaultContractResolver.cs"];
m0_685 [label="return NamingStrategy.GetPropertyName(propertyName, false);", span="1609-1609", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.ResolvePropertyName(string)", file="DefaultContractResolver.cs"];
m0_686 [label="return propertyName;", span="1612-1612", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.ResolvePropertyName(string)", file="DefaultContractResolver.cs"];
m0_687 [label="Exit Newtonsoft.Json.Serialization.DefaultContractResolver.ResolvePropertyName(string)", span="1605-1605", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.ResolvePropertyName(string)", file="DefaultContractResolver.cs"];
m0_60 [label="Entry Unk.IsIndexedProperty", span="", cluster="Unk.IsIndexedProperty", file="DefaultContractResolver.cs"];
m0_162 [label="Entry System.Type.IsAssignableFrom(System.Type)", span="0-0", cluster="System.Type.IsAssignableFrom(System.Type)", file="DefaultContractResolver.cs"];
m0_694 [label="Entry Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveDictionaryKey(string)", span="1635-1635", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveDictionaryKey(string)", file="DefaultContractResolver.cs"];
m0_695 [label="NamingStrategy != null", span="1637-1637", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveDictionaryKey(string)", file="DefaultContractResolver.cs"];
m0_696 [label="return NamingStrategy.GetDictionaryKey(dictionaryKey);", span="1639-1639", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveDictionaryKey(string)", file="DefaultContractResolver.cs"];
m0_697 [label="return ResolvePropertyName(dictionaryKey);", span="1642-1642", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveDictionaryKey(string)", file="DefaultContractResolver.cs"];
m0_698 [label="Exit Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveDictionaryKey(string)", span="1635-1635", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveDictionaryKey(string)", file="DefaultContractResolver.cs"];
m0_160 [label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.ImplementsGenericDefinition(System.Type, System.Type, out System.Type)", span="298-298", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.ImplementsGenericDefinition(System.Type, System.Type, out System.Type)", file="DefaultContractResolver.cs"];
m0_417 [label="Entry System.Type.BaseType()", span="171-171", cluster="System.Type.BaseType()", file="DefaultContractResolver.cs"];
m0_681 [label="Entry lambda expression", span="1592-1592", cluster="lambda expression", file="DefaultContractResolver.cs"];
m0_57 [label="Entry lambda expression", span="219-219", cluster="lambda expression", file="DefaultContractResolver.cs"];
m0_61 [label="Entry lambda expression", span="231-231", cluster="lambda expression", file="DefaultContractResolver.cs"];
m0_58 [label="!ReflectionUtils.IsIndexedProperty(m)", span="219-219", cluster="lambda expression", file="DefaultContractResolver.cs"];
m0_59 [label="Exit lambda expression", span="219-219", cluster="lambda expression", file="DefaultContractResolver.cs"];
m0_62 [label="!ReflectionUtils.IsIndexedProperty(m)", span="231-231", cluster="lambda expression", file="DefaultContractResolver.cs"];
m0_63 [label="Exit lambda expression", span="231-231", cluster="lambda expression", file="DefaultContractResolver.cs"];
m0_117 [label="namingStrategy.GetDictionaryKey(s)", span="340-340", cluster="lambda expression", file="DefaultContractResolver.cs"];
m0_116 [label="Entry lambda expression", span="340-340", cluster="lambda expression", file="DefaultContractResolver.cs"];
m0_118 [label="Exit lambda expression", span="340-340", cluster="lambda expression", file="DefaultContractResolver.cs"];
m0_127 [label="Entry lambda expression", span="405-412", cluster="lambda expression", file="DefaultContractResolver.cs"];
m0_136 [label="Entry lambda expression", span="414-448", cluster="lambda expression", file="DefaultContractResolver.cs"];
m0_128 [label="IList<MemberInfo> m = new List<MemberInfo>()", span="407-407", cluster="lambda expression", file="DefaultContractResolver.cs"];
m0_129 [label="m.AddRange(baseType.GetProperties(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly))", span="408-408", cluster="lambda expression", file="DefaultContractResolver.cs"];
m0_130 [label="m.AddRange(baseType.GetFields(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly))", span="409-409", cluster="lambda expression", file="DefaultContractResolver.cs"];
m0_131 [label="return m;", span="411-411", cluster="lambda expression", file="DefaultContractResolver.cs"];
m0_132 [label="Exit lambda expression", span="405-412", cluster="lambda expression", file="DefaultContractResolver.cs"];
m0_137 [label="MemberTypes memberType = m.MemberType()", span="416-416", cluster="lambda expression", file="DefaultContractResolver.cs"];
m0_140 [label="!m.IsDefined(typeof(JsonExtensionDataAttribute), false)", span="423-423", cluster="lambda expression", file="DefaultContractResolver.cs"];
m0_142 [label="!ReflectionUtils.CanReadMemberValue(m, true)", span="428-428", cluster="lambda expression", file="DefaultContractResolver.cs"];
m0_143 [label="throw new JsonException(''Invalid extension data attribute on '{0}'. Member '{1}' must have a getter.''.FormatWith(CultureInfo.InvariantCulture, GetClrTypeFullName(m.DeclaringType), m.Name));", span="430-430", cluster="lambda expression", file="DefaultContractResolver.cs"];
m0_144 [label="Type t = ReflectionUtils.GetMemberUnderlyingType(m)", span="433-433", cluster="lambda expression", file="DefaultContractResolver.cs"];
m0_151 [label="throw new JsonException(''Invalid extension data attribute on '{0}'. Member '{1}' type must implement IDictionary<string, JToken>.''.FormatWith(CultureInfo.InvariantCulture, GetClrTypeFullName(m.DeclaringType), m.Name));", span="447-447", cluster="lambda expression", file="DefaultContractResolver.cs"];
m0_138 [label="memberType != MemberTypes.Property && memberType != MemberTypes.Field", span="417-417", cluster="lambda expression", file="DefaultContractResolver.cs"];
m0_139 [label="return false;", span="419-419", cluster="lambda expression", file="DefaultContractResolver.cs"];
m0_141 [label="return false;", span="425-425", cluster="lambda expression", file="DefaultContractResolver.cs"];
m0_145 [label="Type dictionaryType", span="435-435", cluster="lambda expression", file="DefaultContractResolver.cs"];
m0_146 [label="ReflectionUtils.ImplementsGenericDefinition(t, typeof(IDictionary<,>), out dictionaryType)", span="436-436", cluster="lambda expression", file="DefaultContractResolver.cs"];
m0_147 [label="Type keyType = dictionaryType.GetGenericArguments()[0]", span="438-438", cluster="lambda expression", file="DefaultContractResolver.cs"];
m0_148 [label="Type valueType = dictionaryType.GetGenericArguments()[1]", span="439-439", cluster="lambda expression", file="DefaultContractResolver.cs"];
m0_149 [label="keyType.IsAssignableFrom(typeof(string)) && valueType.IsAssignableFrom(typeof(JToken))", span="441-441", cluster="lambda expression", file="DefaultContractResolver.cs"];
m0_150 [label="return true;", span="443-443", cluster="lambda expression", file="DefaultContractResolver.cs"];
m0_152 [label="Exit lambda expression", span="414-448", cluster="lambda expression", file="DefaultContractResolver.cs"];
m0_207 [label="throw new JsonSerializationException(''Cannot set value onto extension data member '{0}'. The extension data collection is null and it cannot be set.''.FormatWith(CultureInfo.InvariantCulture, member.Name));", span="499-499", cluster="lambda expression", file="DefaultContractResolver.cs"];
m0_204 [label="object dictionary = getExtensionDataDictionary(o)", span="494-494", cluster="lambda expression", file="DefaultContractResolver.cs"];
m0_219 [label="object dictionary = getExtensionDataDictionary(o)", span="520-520", cluster="lambda expression", file="DefaultContractResolver.cs"];
m0_206 [label="setExtensionDataDictionary == null", span="497-497", cluster="lambda expression", file="DefaultContractResolver.cs"];
m0_209 [label="setExtensionDataDictionary(o, dictionary)", span="503-503", cluster="lambda expression", file="DefaultContractResolver.cs"];
m0_208 [label="dictionary = createExtensionDataDictionary()", span="502-502", cluster="lambda expression", file="DefaultContractResolver.cs"];
m0_210 [label="setExtensionDataDictionaryValue(dictionary, key, value)", span="506-506", cluster="lambda expression", file="DefaultContractResolver.cs"];
m0_222 [label="return (IEnumerable<KeyValuePair<object, object>>)createEnumerableWrapper(dictionary);", span="526-526", cluster="lambda expression", file="DefaultContractResolver.cs"];
m0_203 [label="Entry lambda expression", span="492-507", cluster="lambda expression", file="DefaultContractResolver.cs"];
m0_205 [label="dictionary == null", span="495-495", cluster="lambda expression", file="DefaultContractResolver.cs"];
m0_211 [label="Exit lambda expression", span="492-507", cluster="lambda expression", file="DefaultContractResolver.cs"];
m0_218 [label="Entry lambda expression", span="518-527", cluster="lambda expression", file="DefaultContractResolver.cs"];
m0_220 [label="dictionary == null", span="521-521", cluster="lambda expression", file="DefaultContractResolver.cs"];
m0_221 [label="return null;", span="523-523", cluster="lambda expression", file="DefaultContractResolver.cs"];
m0_223 [label="Exit lambda expression", span="518-527", cluster="lambda expression", file="DefaultContractResolver.cs"];
m0_252 [label="Entry lambda expression", span="563-563", cluster="lambda expression", file="DefaultContractResolver.cs"];
m0_253 [label="c.IsDefined(typeof(JsonConstructorAttribute), true)", span="563-563", cluster="lambda expression", file="DefaultContractResolver.cs"];
m0_254 [label="Exit lambda expression", span="563-563", cluster="lambda expression", file="DefaultContractResolver.cs"];
m0_442 [label="namingStrategy.GetDictionaryKey(s)", span="953-953", cluster="lambda expression", file="DefaultContractResolver.cs"];
m0_441 [label="Entry lambda expression", span="953-953", cluster="lambda expression", file="DefaultContractResolver.cs"];
m0_443 [label="Exit lambda expression", span="953-953", cluster="lambda expression", file="DefaultContractResolver.cs"];
m0_557 [label="Entry lambda expression", span="1320-1320", cluster="lambda expression", file="DefaultContractResolver.cs"];
m0_558 [label="p.Order ?? -1", span="1320-1320", cluster="lambda expression", file="DefaultContractResolver.cs"];
m0_559 [label="Exit lambda expression", span="1320-1320", cluster="lambda expression", file="DefaultContractResolver.cs"];
m0_667 [label="(bool)shouldSerializeCall(o)", span="1574-1574", cluster="lambda expression", file="DefaultContractResolver.cs"];
m0_666 [label="Entry lambda expression", span="1574-1574", cluster="lambda expression", file="DefaultContractResolver.cs"];
m0_668 [label="Exit lambda expression", span="1574-1574", cluster="lambda expression", file="DefaultContractResolver.cs"];
m0_682 [label="(bool)specifiedPropertyGet(o)", span="1592-1592", cluster="lambda expression", file="DefaultContractResolver.cs"];
m0_683 [label="Exit lambda expression", span="1592-1592", cluster="lambda expression", file="DefaultContractResolver.cs"];
m0_321 [label="Entry Newtonsoft.Json.Serialization.DefaultContractResolver.SetPropertySettingsFromAttributes(Newtonsoft.Json.Serialization.JsonProperty, object, string, System.Type, Newtonsoft.Json.MemberSerialization, out bool)", span="1392-1392", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetPropertySettingsFromAttributes(Newtonsoft.Json.Serialization.JsonProperty, object, string, System.Type, Newtonsoft.Json.MemberSerialization, out bool)", file="DefaultContractResolver.cs"];
m0_590 [label="JsonPropertyAttribute propertyAttribute = JsonTypeReflector.GetAttribute<JsonPropertyAttribute>(attributeProvider)", span="1410-1410", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetPropertySettingsFromAttributes(Newtonsoft.Json.Serialization.JsonProperty, object, string, System.Type, Newtonsoft.Json.MemberSerialization, out bool)", file="DefaultContractResolver.cs"];
m0_591 [label="JsonRequiredAttribute requiredAttribute = JsonTypeReflector.GetAttribute<JsonRequiredAttribute>(attributeProvider)", span="1411-1411", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetPropertySettingsFromAttributes(Newtonsoft.Json.Serialization.JsonProperty, object, string, System.Type, Newtonsoft.Json.MemberSerialization, out bool)", file="DefaultContractResolver.cs"];
m0_597 [label="mappedName = name", span="1429-1429", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetPropertySettingsFromAttributes(Newtonsoft.Json.Serialization.JsonProperty, object, string, System.Type, Newtonsoft.Json.MemberSerialization, out bool)", file="DefaultContractResolver.cs"];
m0_599 [label="JsonContainerAttribute containerAttribute = JsonTypeReflector.GetAttribute<JsonContainerAttribute>(declaringType)", span="1433-1433", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetPropertySettingsFromAttributes(Newtonsoft.Json.Serialization.JsonProperty, object, string, System.Type, Newtonsoft.Json.MemberSerialization, out bool)", file="DefaultContractResolver.cs"];
m0_607 [label="property.PropertyName = namingStrategy.GetPropertyName(mappedName, hasSpecifiedName)", span="1451-1451", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetPropertySettingsFromAttributes(Newtonsoft.Json.Serialization.JsonProperty, object, string, System.Type, Newtonsoft.Json.MemberSerialization, out bool)", file="DefaultContractResolver.cs"];
m0_608 [label="property.PropertyName = ResolvePropertyName(mappedName)", span="1455-1455", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetPropertySettingsFromAttributes(Newtonsoft.Json.Serialization.JsonProperty, object, string, System.Type, Newtonsoft.Json.MemberSerialization, out bool)", file="DefaultContractResolver.cs"];
m0_609 [label="property.UnderlyingName = name", span="1458-1458", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetPropertySettingsFromAttributes(Newtonsoft.Json.Serialization.JsonProperty, object, string, System.Type, Newtonsoft.Json.MemberSerialization, out bool)", file="DefaultContractResolver.cs"];
m0_612 [label="property._required = propertyAttribute._required", span="1463-1463", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetPropertySettingsFromAttributes(Newtonsoft.Json.Serialization.JsonProperty, object, string, System.Type, Newtonsoft.Json.MemberSerialization, out bool)", file="DefaultContractResolver.cs"];
m0_613 [label="property.Order = propertyAttribute._order", span="1464-1464", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetPropertySettingsFromAttributes(Newtonsoft.Json.Serialization.JsonProperty, object, string, System.Type, Newtonsoft.Json.MemberSerialization, out bool)", file="DefaultContractResolver.cs"];
m0_614 [label="property.DefaultValueHandling = propertyAttribute._defaultValueHandling", span="1465-1465", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetPropertySettingsFromAttributes(Newtonsoft.Json.Serialization.JsonProperty, object, string, System.Type, Newtonsoft.Json.MemberSerialization, out bool)", file="DefaultContractResolver.cs"];
m0_616 [label="property.NullValueHandling = propertyAttribute._nullValueHandling", span="1467-1467", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetPropertySettingsFromAttributes(Newtonsoft.Json.Serialization.JsonProperty, object, string, System.Type, Newtonsoft.Json.MemberSerialization, out bool)", file="DefaultContractResolver.cs"];
m0_617 [label="property.ReferenceLoopHandling = propertyAttribute._referenceLoopHandling", span="1468-1468", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetPropertySettingsFromAttributes(Newtonsoft.Json.Serialization.JsonProperty, object, string, System.Type, Newtonsoft.Json.MemberSerialization, out bool)", file="DefaultContractResolver.cs"];
m0_618 [label="property.ObjectCreationHandling = propertyAttribute._objectCreationHandling", span="1469-1469", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetPropertySettingsFromAttributes(Newtonsoft.Json.Serialization.JsonProperty, object, string, System.Type, Newtonsoft.Json.MemberSerialization, out bool)", file="DefaultContractResolver.cs"];
m0_619 [label="property.TypeNameHandling = propertyAttribute._typeNameHandling", span="1470-1470", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetPropertySettingsFromAttributes(Newtonsoft.Json.Serialization.JsonProperty, object, string, System.Type, Newtonsoft.Json.MemberSerialization, out bool)", file="DefaultContractResolver.cs"];
m0_620 [label="property.IsReference = propertyAttribute._isReference", span="1471-1471", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetPropertySettingsFromAttributes(Newtonsoft.Json.Serialization.JsonProperty, object, string, System.Type, Newtonsoft.Json.MemberSerialization, out bool)", file="DefaultContractResolver.cs"];
m0_621 [label="property.ItemIsReference = propertyAttribute._itemIsReference", span="1473-1473", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetPropertySettingsFromAttributes(Newtonsoft.Json.Serialization.JsonProperty, object, string, System.Type, Newtonsoft.Json.MemberSerialization, out bool)", file="DefaultContractResolver.cs"];
m0_622 [label="property.ItemConverter = propertyAttribute.ItemConverterType != null ? JsonTypeReflector.CreateJsonConverterInstance(propertyAttribute.ItemConverterType, propertyAttribute.ItemConverterParameters) : null", span="1474-1474", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetPropertySettingsFromAttributes(Newtonsoft.Json.Serialization.JsonProperty, object, string, System.Type, Newtonsoft.Json.MemberSerialization, out bool)", file="DefaultContractResolver.cs"];
m0_623 [label="property.ItemReferenceLoopHandling = propertyAttribute._itemReferenceLoopHandling", span="1475-1475", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetPropertySettingsFromAttributes(Newtonsoft.Json.Serialization.JsonProperty, object, string, System.Type, Newtonsoft.Json.MemberSerialization, out bool)", file="DefaultContractResolver.cs"];
m0_624 [label="property.ItemTypeNameHandling = propertyAttribute._itemTypeNameHandling", span="1476-1476", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetPropertySettingsFromAttributes(Newtonsoft.Json.Serialization.JsonProperty, object, string, System.Type, Newtonsoft.Json.MemberSerialization, out bool)", file="DefaultContractResolver.cs"];
m0_625 [label="property.NullValueHandling = null", span="1480-1480", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetPropertySettingsFromAttributes(Newtonsoft.Json.Serialization.JsonProperty, object, string, System.Type, Newtonsoft.Json.MemberSerialization, out bool)", file="DefaultContractResolver.cs"];
m0_626 [label="property.ReferenceLoopHandling = null", span="1481-1481", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetPropertySettingsFromAttributes(Newtonsoft.Json.Serialization.JsonProperty, object, string, System.Type, Newtonsoft.Json.MemberSerialization, out bool)", file="DefaultContractResolver.cs"];
m0_627 [label="property.ObjectCreationHandling = null", span="1482-1482", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetPropertySettingsFromAttributes(Newtonsoft.Json.Serialization.JsonProperty, object, string, System.Type, Newtonsoft.Json.MemberSerialization, out bool)", file="DefaultContractResolver.cs"];
m0_628 [label="property.TypeNameHandling = null", span="1483-1483", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetPropertySettingsFromAttributes(Newtonsoft.Json.Serialization.JsonProperty, object, string, System.Type, Newtonsoft.Json.MemberSerialization, out bool)", file="DefaultContractResolver.cs"];
m0_629 [label="property.IsReference = null", span="1484-1484", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetPropertySettingsFromAttributes(Newtonsoft.Json.Serialization.JsonProperty, object, string, System.Type, Newtonsoft.Json.MemberSerialization, out bool)", file="DefaultContractResolver.cs"];
m0_630 [label="property.ItemIsReference = null", span="1485-1485", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetPropertySettingsFromAttributes(Newtonsoft.Json.Serialization.JsonProperty, object, string, System.Type, Newtonsoft.Json.MemberSerialization, out bool)", file="DefaultContractResolver.cs"];
m0_631 [label="property.ItemConverter = null", span="1486-1486", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetPropertySettingsFromAttributes(Newtonsoft.Json.Serialization.JsonProperty, object, string, System.Type, Newtonsoft.Json.MemberSerialization, out bool)", file="DefaultContractResolver.cs"];
m0_632 [label="property.ItemReferenceLoopHandling = null", span="1487-1487", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetPropertySettingsFromAttributes(Newtonsoft.Json.Serialization.JsonProperty, object, string, System.Type, Newtonsoft.Json.MemberSerialization, out bool)", file="DefaultContractResolver.cs"];
m0_633 [label="property.ItemTypeNameHandling = null", span="1488-1488", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetPropertySettingsFromAttributes(Newtonsoft.Json.Serialization.JsonProperty, object, string, System.Type, Newtonsoft.Json.MemberSerialization, out bool)", file="DefaultContractResolver.cs"];
m0_635 [label="property._required = Required.Always", span="1502-1502", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetPropertySettingsFromAttributes(Newtonsoft.Json.Serialization.JsonProperty, object, string, System.Type, Newtonsoft.Json.MemberSerialization, out bool)", file="DefaultContractResolver.cs"];
m0_637 [label="property.HasMemberAttribute = hasMemberAttribute", span="1506-1506", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetPropertySettingsFromAttributes(Newtonsoft.Json.Serialization.JsonProperty, object, string, System.Type, Newtonsoft.Json.MemberSerialization, out bool)", file="DefaultContractResolver.cs"];
m0_638 [label="bool hasJsonIgnoreAttribute =\r\n                JsonTypeReflector.GetAttribute<JsonIgnoreAttribute>(attributeProvider) != null\r\n                    // automatically ignore extension data dictionary property if it is public\r\n                || JsonTypeReflector.GetAttribute<JsonExtensionDataAttribute>(attributeProvider) != null", span="1508-1511", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetPropertySettingsFromAttributes(Newtonsoft.Json.Serialization.JsonProperty, object, string, System.Type, Newtonsoft.Json.MemberSerialization, out bool)", file="DefaultContractResolver.cs"];
m0_639 [label="memberSerialization != MemberSerialization.OptIn", span="1517-1517", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetPropertySettingsFromAttributes(Newtonsoft.Json.Serialization.JsonProperty, object, string, System.Type, Newtonsoft.Json.MemberSerialization, out bool)", file="DefaultContractResolver.cs"];
m0_641 [label="property.Ignored = (hasJsonIgnoreAttribute || hasIgnoreDataMemberAttribute)", span="1526-1526", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetPropertySettingsFromAttributes(Newtonsoft.Json.Serialization.JsonProperty, object, string, System.Type, Newtonsoft.Json.MemberSerialization, out bool)", file="DefaultContractResolver.cs"];
m0_642 [label="property.Ignored = (hasJsonIgnoreAttribute || !hasMemberAttribute)", span="1531-1531", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetPropertySettingsFromAttributes(Newtonsoft.Json.Serialization.JsonProperty, object, string, System.Type, Newtonsoft.Json.MemberSerialization, out bool)", file="DefaultContractResolver.cs"];
m0_643 [label="property.Converter = JsonTypeReflector.GetJsonConverter(attributeProvider)", span="1536-1536", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetPropertySettingsFromAttributes(Newtonsoft.Json.Serialization.JsonProperty, object, string, System.Type, Newtonsoft.Json.MemberSerialization, out bool)", file="DefaultContractResolver.cs"];
m0_644 [label="property.MemberConverter = JsonTypeReflector.GetJsonConverter(attributeProvider)", span="1537-1537", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetPropertySettingsFromAttributes(Newtonsoft.Json.Serialization.JsonProperty, object, string, System.Type, Newtonsoft.Json.MemberSerialization, out bool)", file="DefaultContractResolver.cs"];
m0_645 [label="DefaultValueAttribute defaultValueAttribute = JsonTypeReflector.GetAttribute<DefaultValueAttribute>(attributeProvider)", span="1539-1539", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetPropertySettingsFromAttributes(Newtonsoft.Json.Serialization.JsonProperty, object, string, System.Type, Newtonsoft.Json.MemberSerialization, out bool)", file="DefaultContractResolver.cs"];
m0_647 [label="property.DefaultValue = defaultValueAttribute.Value", span="1542-1542", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetPropertySettingsFromAttributes(Newtonsoft.Json.Serialization.JsonProperty, object, string, System.Type, Newtonsoft.Json.MemberSerialization, out bool)", file="DefaultContractResolver.cs"];
m0_653 [label="memberSerialization == MemberSerialization.Fields", span="1556-1556", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetPropertySettingsFromAttributes(Newtonsoft.Json.Serialization.JsonProperty, object, string, System.Type, Newtonsoft.Json.MemberSerialization, out bool)", file="DefaultContractResolver.cs"];
m0_594 [label="propertyAttribute?.PropertyName != null", span="1415-1415", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetPropertySettingsFromAttributes(Newtonsoft.Json.Serialization.JsonProperty, object, string, System.Type, Newtonsoft.Json.MemberSerialization, out bool)", file="DefaultContractResolver.cs"];
m0_595 [label="mappedName = propertyAttribute.PropertyName", span="1417-1417", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetPropertySettingsFromAttributes(Newtonsoft.Json.Serialization.JsonProperty, object, string, System.Type, Newtonsoft.Json.MemberSerialization, out bool)", file="DefaultContractResolver.cs"];
m0_601 [label="propertyAttribute?.NamingStrategyType != null", span="1436-1436", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetPropertySettingsFromAttributes(Newtonsoft.Json.Serialization.JsonProperty, object, string, System.Type, Newtonsoft.Json.MemberSerialization, out bool)", file="DefaultContractResolver.cs"];
m0_602 [label="namingStrategy = JsonTypeReflector.CreateNamingStrategyInstance(propertyAttribute.NamingStrategyType, propertyAttribute.NamingStrategyParameters)", span="1438-1438", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetPropertySettingsFromAttributes(Newtonsoft.Json.Serialization.JsonProperty, object, string, System.Type, Newtonsoft.Json.MemberSerialization, out bool)", file="DefaultContractResolver.cs"];
m0_611 [label="propertyAttribute != null", span="1461-1461", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetPropertySettingsFromAttributes(Newtonsoft.Json.Serialization.JsonProperty, object, string, System.Type, Newtonsoft.Json.MemberSerialization, out bool)", file="DefaultContractResolver.cs"];
m0_592 [label="string mappedName", span="1413-1413", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetPropertySettingsFromAttributes(Newtonsoft.Json.Serialization.JsonProperty, object, string, System.Type, Newtonsoft.Json.MemberSerialization, out bool)", file="DefaultContractResolver.cs"];
m0_634 [label="requiredAttribute != null", span="1500-1500", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetPropertySettingsFromAttributes(Newtonsoft.Json.Serialization.JsonProperty, object, string, System.Type, Newtonsoft.Json.MemberSerialization, out bool)", file="DefaultContractResolver.cs"];
m0_593 [label="bool hasSpecifiedName", span="1414-1414", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetPropertySettingsFromAttributes(Newtonsoft.Json.Serialization.JsonProperty, object, string, System.Type, Newtonsoft.Json.MemberSerialization, out bool)", file="DefaultContractResolver.cs"];
m0_596 [label="hasSpecifiedName = true", span="1418-1418", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetPropertySettingsFromAttributes(Newtonsoft.Json.Serialization.JsonProperty, object, string, System.Type, Newtonsoft.Json.MemberSerialization, out bool)", file="DefaultContractResolver.cs"];
m0_598 [label="hasSpecifiedName = false", span="1430-1430", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetPropertySettingsFromAttributes(Newtonsoft.Json.Serialization.JsonProperty, object, string, System.Type, Newtonsoft.Json.MemberSerialization, out bool)", file="DefaultContractResolver.cs"];
m0_600 [label="NamingStrategy namingStrategy", span="1435-1435", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetPropertySettingsFromAttributes(Newtonsoft.Json.Serialization.JsonProperty, object, string, System.Type, Newtonsoft.Json.MemberSerialization, out bool)", file="DefaultContractResolver.cs"];
m0_603 [label="containerAttribute?.NamingStrategyType != null", span="1440-1440", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetPropertySettingsFromAttributes(Newtonsoft.Json.Serialization.JsonProperty, object, string, System.Type, Newtonsoft.Json.MemberSerialization, out bool)", file="DefaultContractResolver.cs"];
m0_604 [label="namingStrategy = JsonTypeReflector.GetContainerNamingStrategy(containerAttribute)", span="1442-1442", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetPropertySettingsFromAttributes(Newtonsoft.Json.Serialization.JsonProperty, object, string, System.Type, Newtonsoft.Json.MemberSerialization, out bool)", file="DefaultContractResolver.cs"];
m0_605 [label="namingStrategy = NamingStrategy", span="1446-1446", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetPropertySettingsFromAttributes(Newtonsoft.Json.Serialization.JsonProperty, object, string, System.Type, Newtonsoft.Json.MemberSerialization, out bool)", file="DefaultContractResolver.cs"];
m0_606 [label="namingStrategy != null", span="1449-1449", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetPropertySettingsFromAttributes(Newtonsoft.Json.Serialization.JsonProperty, object, string, System.Type, Newtonsoft.Json.MemberSerialization, out bool)", file="DefaultContractResolver.cs"];
m0_610 [label="bool hasMemberAttribute = false", span="1460-1460", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetPropertySettingsFromAttributes(Newtonsoft.Json.Serialization.JsonProperty, object, string, System.Type, Newtonsoft.Json.MemberSerialization, out bool)", file="DefaultContractResolver.cs"];
m0_651 [label=hasMemberAttribute, span="1552-1552", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetPropertySettingsFromAttributes(Newtonsoft.Json.Serialization.JsonProperty, object, string, System.Type, Newtonsoft.Json.MemberSerialization, out bool)", file="DefaultContractResolver.cs"];
m0_615 [label="hasMemberAttribute = true", span="1466-1466", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetPropertySettingsFromAttributes(Newtonsoft.Json.Serialization.JsonProperty, object, string, System.Type, Newtonsoft.Json.MemberSerialization, out bool)", file="DefaultContractResolver.cs"];
m0_636 [label="hasMemberAttribute = true", span="1503-1503", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetPropertySettingsFromAttributes(Newtonsoft.Json.Serialization.JsonProperty, object, string, System.Type, Newtonsoft.Json.MemberSerialization, out bool)", file="DefaultContractResolver.cs"];
m0_640 [label="bool hasIgnoreDataMemberAttribute = false", span="1519-1519", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetPropertySettingsFromAttributes(Newtonsoft.Json.Serialization.JsonProperty, object, string, System.Type, Newtonsoft.Json.MemberSerialization, out bool)", file="DefaultContractResolver.cs"];
m0_646 [label="defaultValueAttribute != null", span="1540-1540", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetPropertySettingsFromAttributes(Newtonsoft.Json.Serialization.JsonProperty, object, string, System.Type, Newtonsoft.Json.MemberSerialization, out bool)", file="DefaultContractResolver.cs"];
m0_648 [label="allowNonPublicAccess = false", span="1545-1545", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetPropertySettingsFromAttributes(Newtonsoft.Json.Serialization.JsonProperty, object, string, System.Type, Newtonsoft.Json.MemberSerialization, out bool)", file="DefaultContractResolver.cs"];
m0_649 [label="(DefaultMembersSearchFlags & BindingFlags.NonPublic) == BindingFlags.NonPublic", span="1547-1547", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetPropertySettingsFromAttributes(Newtonsoft.Json.Serialization.JsonProperty, object, string, System.Type, Newtonsoft.Json.MemberSerialization, out bool)", file="DefaultContractResolver.cs"];
m0_650 [label="allowNonPublicAccess = true", span="1549-1549", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetPropertySettingsFromAttributes(Newtonsoft.Json.Serialization.JsonProperty, object, string, System.Type, Newtonsoft.Json.MemberSerialization, out bool)", file="DefaultContractResolver.cs"];
m0_652 [label="allowNonPublicAccess = true", span="1554-1554", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetPropertySettingsFromAttributes(Newtonsoft.Json.Serialization.JsonProperty, object, string, System.Type, Newtonsoft.Json.MemberSerialization, out bool)", file="DefaultContractResolver.cs"];
m0_654 [label="allowNonPublicAccess = true", span="1558-1558", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetPropertySettingsFromAttributes(Newtonsoft.Json.Serialization.JsonProperty, object, string, System.Type, Newtonsoft.Json.MemberSerialization, out bool)", file="DefaultContractResolver.cs"];
m0_655 [label="Exit Newtonsoft.Json.Serialization.DefaultContractResolver.SetPropertySettingsFromAttributes(Newtonsoft.Json.Serialization.JsonProperty, object, string, System.Type, Newtonsoft.Json.MemberSerialization, out bool)", span="1392-1392", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.SetPropertySettingsFromAttributes(Newtonsoft.Json.Serialization.JsonProperty, object, string, System.Type, Newtonsoft.Json.MemberSerialization, out bool)", file="DefaultContractResolver.cs"];
m0_51 [label="Entry System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", span="817-817", cluster="System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", file="DefaultContractResolver.cs"];
m0_249 [label="Entry System.Collections.Generic.IEnumerable<T>.GetEnumerator()", span="0-0", cluster="System.Collections.Generic.IEnumerable<T>.GetEnumerator()", file="DefaultContractResolver.cs"];
m0_459 [label="Entry Newtonsoft.Json.Serialization.JsonArrayContract.JsonArrayContract(System.Type)", span="117-117", cluster="Newtonsoft.Json.Serialization.JsonArrayContract.JsonArrayContract(System.Type)", file="DefaultContractResolver.cs"];
m0_403 [label="Entry Newtonsoft.Json.Serialization.JsonContract.CreateSerializationCallback(System.Reflection.MethodInfo)", span="306-306", cluster="Newtonsoft.Json.Serialization.JsonContract.CreateSerializationCallback(System.Reflection.MethodInfo)", file="DefaultContractResolver.cs"];
m0_19 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.TryGetValue(TKey, out TValue)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.TryGetValue(TKey, out TValue)", file="DefaultContractResolver.cs"];
m0_56 [label="Entry System.Reflection.MemberInfo.MemberType()", span="107-107", cluster="System.Reflection.MemberInfo.MemberType()", file="DefaultContractResolver.cs"];
m0_680 [label="Entry System.Type.GetField(string)", span="0-0", cluster="System.Type.GetField(string)", file="DefaultContractResolver.cs"];
m0_156 [label="Entry Newtonsoft.Json.JsonException.JsonException(string)", span="54-54", cluster="Newtonsoft.Json.JsonException.JsonException(string)", file="DefaultContractResolver.cs"];
m0_50 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="DefaultContractResolver.cs"];
m0_460 [label="Entry Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePrimitiveContract(System.Type)", span="1031-1031", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePrimitiveContract(System.Type)", file="DefaultContractResolver.cs"];
m0_461 [label="JsonPrimitiveContract contract = new JsonPrimitiveContract(objectType)", span="1033-1033", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePrimitiveContract(System.Type)", file="DefaultContractResolver.cs"];
m0_462 [label="InitializeContract(contract)", span="1034-1034", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePrimitiveContract(System.Type)", file="DefaultContractResolver.cs"];
m0_463 [label="return contract;", span="1036-1036", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePrimitiveContract(System.Type)", file="DefaultContractResolver.cs"];
m0_464 [label="Exit Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePrimitiveContract(System.Type)", span="1031-1031", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePrimitiveContract(System.Type)", file="DefaultContractResolver.cs"];
m0_198 [label="Entry Newtonsoft.Json.Utilities.ReflectionDelegateFactory.CreateDefaultConstructor<T>(System.Type)", span="74-74", cluster="Newtonsoft.Json.Utilities.ReflectionDelegateFactory.CreateDefaultConstructor<T>(System.Type)", file="DefaultContractResolver.cs"];
m0_134 [label="Entry Unk.AddRange", span="", cluster="Unk.AddRange", file="DefaultContractResolver.cs"];
m0_501 [label="Entry Newtonsoft.Json.Utilities.CollectionUtils.IsDictionaryType(System.Type)", span="96-96", cluster="Newtonsoft.Json.Utilities.CollectionUtils.IsDictionaryType(System.Type)", file="DefaultContractResolver.cs"];
m0_502 [label="Entry Newtonsoft.Json.Serialization.DefaultContractResolver.CanConvertToString(System.Type)", span="1211-1211", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CanConvertToString(System.Type)", file="DefaultContractResolver.cs"];
m0_507 [label="type == typeof(Type) || type.IsSubclassOf(typeof(Type))", span="1221-1221", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CanConvertToString(System.Type)", file="DefaultContractResolver.cs"];
m0_508 [label="return true;", span="1223-1223", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CanConvertToString(System.Type)", file="DefaultContractResolver.cs"];
m0_509 [label="return false;", span="1226-1226", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CanConvertToString(System.Type)", file="DefaultContractResolver.cs"];
m0_510 [label="Exit Newtonsoft.Json.Serialization.DefaultContractResolver.CanConvertToString(System.Type)", span="1211-1211", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CanConvertToString(System.Type)", file="DefaultContractResolver.cs"];
m0_296 [label="Entry Newtonsoft.Json.Serialization.JsonPropertyCollection.GetClosestMatchProperty(string)", span="125-125", cluster="Newtonsoft.Json.Serialization.JsonPropertyCollection.GetClosestMatchProperty(string)", file="DefaultContractResolver.cs"];
m0_500 [label="Entry System.Type.IsSubclassOf(System.Type)", span="0-0", cluster="System.Type.IsSubclassOf(System.Type)", file="DefaultContractResolver.cs"];
m0_402 [label="Entry Newtonsoft.Json.Serialization.DefaultContractResolver.IsValidCallback(System.Reflection.MethodInfo, System.Reflection.ParameterInfo[], System.Type, System.Reflection.MethodInfo, ref System.Type)", span="1229-1229", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.IsValidCallback(System.Reflection.MethodInfo, System.Reflection.ParameterInfo[], System.Type, System.Reflection.MethodInfo, ref System.Type)", file="DefaultContractResolver.cs"];
m0_511 [label="!method.IsDefined(attributeType, false)", span="1231-1231", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.IsValidCallback(System.Reflection.MethodInfo, System.Reflection.ParameterInfo[], System.Type, System.Reflection.MethodInfo, ref System.Type)", file="DefaultContractResolver.cs"];
m0_513 [label="currentCallback != null", span="1236-1236", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.IsValidCallback(System.Reflection.MethodInfo, System.Reflection.ParameterInfo[], System.Type, System.Reflection.MethodInfo, ref System.Type)", file="DefaultContractResolver.cs"];
m0_514 [label="throw new JsonException(''Invalid attribute. Both '{0}' and '{1}' in type '{2}' have '{3}'.''.FormatWith(CultureInfo.InvariantCulture, method, currentCallback, GetClrTypeFullName(method.DeclaringType), attributeType));", span="1238-1238", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.IsValidCallback(System.Reflection.MethodInfo, System.Reflection.ParameterInfo[], System.Type, System.Reflection.MethodInfo, ref System.Type)", file="DefaultContractResolver.cs"];
m0_515 [label="prevAttributeType != null", span="1241-1241", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.IsValidCallback(System.Reflection.MethodInfo, System.Reflection.ParameterInfo[], System.Type, System.Reflection.MethodInfo, ref System.Type)", file="DefaultContractResolver.cs"];
m0_516 [label="throw new JsonException(''Invalid Callback. Method '{3}' in type '{2}' has both '{0}' and '{1}'.''.FormatWith(CultureInfo.InvariantCulture, prevAttributeType, attributeType, GetClrTypeFullName(method.DeclaringType), method));", span="1243-1243", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.IsValidCallback(System.Reflection.MethodInfo, System.Reflection.ParameterInfo[], System.Type, System.Reflection.MethodInfo, ref System.Type)", file="DefaultContractResolver.cs"];
m0_517 [label="method.IsVirtual", span="1246-1246", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.IsValidCallback(System.Reflection.MethodInfo, System.Reflection.ParameterInfo[], System.Type, System.Reflection.MethodInfo, ref System.Type)", file="DefaultContractResolver.cs"];
m0_518 [label="throw new JsonException(''Virtual Method '{0}' of type '{1}' cannot be marked with '{2}' attribute.''.FormatWith(CultureInfo.InvariantCulture, method, GetClrTypeFullName(method.DeclaringType), attributeType));", span="1248-1248", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.IsValidCallback(System.Reflection.MethodInfo, System.Reflection.ParameterInfo[], System.Type, System.Reflection.MethodInfo, ref System.Type)", file="DefaultContractResolver.cs"];
m0_519 [label="method.ReturnType != typeof(void)", span="1251-1251", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.IsValidCallback(System.Reflection.MethodInfo, System.Reflection.ParameterInfo[], System.Type, System.Reflection.MethodInfo, ref System.Type)", file="DefaultContractResolver.cs"];
m0_520 [label="throw new JsonException(''Serialization Callback '{1}' in type '{0}' must return void.''.FormatWith(CultureInfo.InvariantCulture, GetClrTypeFullName(method.DeclaringType), method));", span="1253-1253", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.IsValidCallback(System.Reflection.MethodInfo, System.Reflection.ParameterInfo[], System.Type, System.Reflection.MethodInfo, ref System.Type)", file="DefaultContractResolver.cs"];
m0_521 [label="attributeType == typeof(OnErrorAttribute)", span="1256-1256", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.IsValidCallback(System.Reflection.MethodInfo, System.Reflection.ParameterInfo[], System.Type, System.Reflection.MethodInfo, ref System.Type)", file="DefaultContractResolver.cs"];
m0_522 [label="parameters == null || parameters.Length != 2 || parameters[0].ParameterType != typeof(StreamingContext) || parameters[1].ParameterType != typeof(ErrorContext)", span="1258-1258", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.IsValidCallback(System.Reflection.MethodInfo, System.Reflection.ParameterInfo[], System.Type, System.Reflection.MethodInfo, ref System.Type)", file="DefaultContractResolver.cs"];
m0_523 [label="throw new JsonException(''Serialization Error Callback '{1}' in type '{0}' must have two parameters of type '{2}' and '{3}'.''.FormatWith(CultureInfo.InvariantCulture, GetClrTypeFullName(method.DeclaringType), method, typeof(StreamingContext), typeof(ErrorContext)));", span="1260-1260", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.IsValidCallback(System.Reflection.MethodInfo, System.Reflection.ParameterInfo[], System.Type, System.Reflection.MethodInfo, ref System.Type)", file="DefaultContractResolver.cs"];
m0_524 [label="parameters == null || parameters.Length != 1 || parameters[0].ParameterType != typeof(StreamingContext)", span="1265-1265", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.IsValidCallback(System.Reflection.MethodInfo, System.Reflection.ParameterInfo[], System.Type, System.Reflection.MethodInfo, ref System.Type)", file="DefaultContractResolver.cs"];
m0_525 [label="throw new JsonException(''Serialization Callback '{1}' in type '{0}' must have a single parameter of type '{2}'.''.FormatWith(CultureInfo.InvariantCulture, GetClrTypeFullName(method.DeclaringType), method, typeof(StreamingContext)));", span="1267-1267", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.IsValidCallback(System.Reflection.MethodInfo, System.Reflection.ParameterInfo[], System.Type, System.Reflection.MethodInfo, ref System.Type)", file="DefaultContractResolver.cs"];
m0_526 [label="prevAttributeType = attributeType", span="1271-1271", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.IsValidCallback(System.Reflection.MethodInfo, System.Reflection.ParameterInfo[], System.Type, System.Reflection.MethodInfo, ref System.Type)", file="DefaultContractResolver.cs"];
m0_512 [label="return false;", span="1233-1233", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.IsValidCallback(System.Reflection.MethodInfo, System.Reflection.ParameterInfo[], System.Type, System.Reflection.MethodInfo, ref System.Type)", file="DefaultContractResolver.cs"];
m0_527 [label="return true;", span="1273-1273", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.IsValidCallback(System.Reflection.MethodInfo, System.Reflection.ParameterInfo[], System.Type, System.Reflection.MethodInfo, ref System.Type)", file="DefaultContractResolver.cs"];
m0_528 [label="Exit Newtonsoft.Json.Serialization.DefaultContractResolver.IsValidCallback(System.Reflection.MethodInfo, System.Reflection.ParameterInfo[], System.Type, System.Reflection.MethodInfo, ref System.Type)", span="1229-1229", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.IsValidCallback(System.Reflection.MethodInfo, System.Reflection.ParameterInfo[], System.Type, System.Reflection.MethodInfo, ref System.Type)", file="DefaultContractResolver.cs"];
m0_498 [label="Entry Newtonsoft.Json.Serialization.DefaultContractResolver.IsJsonPrimitiveType(System.Type)", span="1191-1191", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.IsJsonPrimitiveType(System.Type)", file="DefaultContractResolver.cs"];
m0_503 [label="PrimitiveTypeCode typeCode = ConvertUtils.GetTypeCode(t)", span="1193-1193", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.IsJsonPrimitiveType(System.Type)", file="DefaultContractResolver.cs"];
m0_504 [label="return (typeCode != PrimitiveTypeCode.Empty && typeCode != PrimitiveTypeCode.Object);", span="1195-1195", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.IsJsonPrimitiveType(System.Type)", file="DefaultContractResolver.cs"];
m0_505 [label="Exit Newtonsoft.Json.Serialization.DefaultContractResolver.IsJsonPrimitiveType(System.Type)", span="1191-1191", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.IsJsonPrimitiveType(System.Type)", file="DefaultContractResolver.cs"];
m0_530 [label="Entry string.FormatWith(System.IFormatProvider, object, object, object, object)", span="62-62", cluster="string.FormatWith(System.IFormatProvider, object, object, object, object)", file="DefaultContractResolver.cs"];
m0_322 [label="Entry Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContractConverter(System.Type)", span="735-735", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContractConverter(System.Type)", file="DefaultContractResolver.cs"];
m0_323 [label="return JsonTypeReflector.GetJsonConverter(objectType);", span="737-737", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContractConverter(System.Type)", file="DefaultContractResolver.cs"];
m0_324 [label="Exit Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContractConverter(System.Type)", span="735-735", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContractConverter(System.Type)", file="DefaultContractResolver.cs"];
m0_119 [label="Entry Newtonsoft.Json.Serialization.NamingStrategy.GetDictionaryKey(string)", span="62-62", cluster="Newtonsoft.Json.Serialization.NamingStrategy.GetDictionaryKey(string)", file="DefaultContractResolver.cs"];
m0_401 [label="Entry System.Type.GetMethods(System.Reflection.BindingFlags)", span="0-0", cluster="System.Type.GetMethods(System.Reflection.BindingFlags)", file="DefaultContractResolver.cs"];
m0_325 [label="Entry Newtonsoft.Json.Serialization.JsonTypeReflector.GetJsonConverter(object)", span="178-178", cluster="Newtonsoft.Json.Serialization.JsonTypeReflector.GetJsonConverter(object)", file="DefaultContractResolver.cs"];
m0_562 [label="Entry Newtonsoft.Json.Serialization.DefaultContractResolver.CreateMemberValueProvider(System.Reflection.MemberInfo)", span="1334-1334", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateMemberValueProvider(System.Reflection.MemberInfo)", file="DefaultContractResolver.cs"];
m0_563 [label="IValueProvider valueProvider", span="1337-1337", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateMemberValueProvider(System.Reflection.MemberInfo)", file="DefaultContractResolver.cs"];
m0_565 [label="valueProvider = new DynamicValueProvider(member)", span="1342-1342", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateMemberValueProvider(System.Reflection.MemberInfo)", file="DefaultContractResolver.cs"];
m0_566 [label="valueProvider = new ReflectionValueProvider(member)", span="1346-1346", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateMemberValueProvider(System.Reflection.MemberInfo)", file="DefaultContractResolver.cs"];
m0_564 [label=DynamicCodeGeneration, span="1340-1340", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateMemberValueProvider(System.Reflection.MemberInfo)", file="DefaultContractResolver.cs"];
m0_567 [label="return valueProvider;", span="1354-1354", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateMemberValueProvider(System.Reflection.MemberInfo)", file="DefaultContractResolver.cs"];
m0_568 [label="Exit Newtonsoft.Json.Serialization.DefaultContractResolver.CreateMemberValueProvider(System.Reflection.MemberInfo)", span="1334-1334", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateMemberValueProvider(System.Reflection.MemberInfo)", file="DefaultContractResolver.cs"];
m0_465 [label="Entry Newtonsoft.Json.Serialization.JsonPrimitiveContract.JsonPrimitiveContract(System.Type)", span="42-42", cluster="Newtonsoft.Json.Serialization.JsonPrimitiveContract.JsonPrimitiveContract(System.Type)", file="DefaultContractResolver.cs"];
m0_159 [label="Entry Unk.GetMemberUnderlyingType", span="", cluster="Unk.GetMemberUnderlyingType", file="DefaultContractResolver.cs"];
m0_212 [label="Entry Newtonsoft.Json.Serialization.Func<T, TResult>.Invoke(T)", span="3040-3040", cluster="Newtonsoft.Json.Serialization.Func<T, TResult>.Invoke(T)", file="DefaultContractResolver.cs"];
m0_234 [label="Entry System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", span="0-0", cluster="System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", file="DefaultContractResolver.cs"];
m0_552 [label="Entry Newtonsoft.Json.Serialization.DefaultContractResolver.GetNameTable()", span="1324-1324", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetNameTable()", file="DefaultContractResolver.cs"];
m0_560 [label="return _nameTable;", span="1326-1326", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetNameTable()", file="DefaultContractResolver.cs"];
m0_561 [label="Exit Newtonsoft.Json.Serialization.DefaultContractResolver.GetNameTable()", span="1324-1324", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetNameTable()", file="DefaultContractResolver.cs"];
m0_555 [label="Entry Unk.OrderBy", span="", cluster="Unk.OrderBy", file="DefaultContractResolver.cs"];
m0_656 [label="Entry Newtonsoft.Json.Serialization.JsonTypeReflector.CreateNamingStrategyInstance(System.Type, object[])", span="206-206", cluster="Newtonsoft.Json.Serialization.JsonTypeReflector.CreateNamingStrategyInstance(System.Type, object[])", file="DefaultContractResolver.cs"];
m0_270 [label="Entry Newtonsoft.Json.Serialization.DefaultContractResolver.MatchProperty(Newtonsoft.Json.Serialization.JsonPropertyCollection, string, System.Type)", span="669-669", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.MatchProperty(Newtonsoft.Json.Serialization.JsonPropertyCollection, string, System.Type)", file="DefaultContractResolver.cs"];
m0_289 [label="name == null", span="673-673", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.MatchProperty(Newtonsoft.Json.Serialization.JsonPropertyCollection, string, System.Type)", file="DefaultContractResolver.cs"];
m0_291 [label="JsonProperty property = properties.GetClosestMatchProperty(name)", span="678-678", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.MatchProperty(Newtonsoft.Json.Serialization.JsonPropertyCollection, string, System.Type)", file="DefaultContractResolver.cs"];
m0_292 [label="property == null || property.PropertyType != type", span="680-680", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.MatchProperty(Newtonsoft.Json.Serialization.JsonPropertyCollection, string, System.Type)", file="DefaultContractResolver.cs"];
m0_290 [label="return null;", span="675-675", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.MatchProperty(Newtonsoft.Json.Serialization.JsonPropertyCollection, string, System.Type)", file="DefaultContractResolver.cs"];
m0_294 [label="return property;", span="685-685", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.MatchProperty(Newtonsoft.Json.Serialization.JsonPropertyCollection, string, System.Type)", file="DefaultContractResolver.cs"];
m0_293 [label="return null;", span="682-682", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.MatchProperty(Newtonsoft.Json.Serialization.JsonPropertyCollection, string, System.Type)", file="DefaultContractResolver.cs"];
m0_295 [label="Exit Newtonsoft.Json.Serialization.DefaultContractResolver.MatchProperty(Newtonsoft.Json.Serialization.JsonPropertyCollection, string, System.Type)", span="669-669", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.MatchProperty(Newtonsoft.Json.Serialization.JsonPropertyCollection, string, System.Type)", file="DefaultContractResolver.cs"];
m0_688 [label="Entry Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveExtensionDataName(string)", span="1620-1620", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveExtensionDataName(string)", file="DefaultContractResolver.cs"];
m0_689 [label="NamingStrategy != null", span="1622-1622", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveExtensionDataName(string)", file="DefaultContractResolver.cs"];
m0_690 [label="return NamingStrategy.GetExtensionDataName(extensionDataName);", span="1624-1624", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveExtensionDataName(string)", file="DefaultContractResolver.cs"];
m0_691 [label="return extensionDataName;", span="1627-1627", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveExtensionDataName(string)", file="DefaultContractResolver.cs"];
m0_692 [label="Exit Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveExtensionDataName(string)", span="1620-1620", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveExtensionDataName(string)", file="DefaultContractResolver.cs"];
m0_192 [label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberUnderlyingType(System.Reflection.MemberInfo)", span="445-445", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberUnderlyingType(System.Reflection.MemberInfo)", file="DefaultContractResolver.cs"];
m0_124 [label="Entry Newtonsoft.Json.Serialization.DefaultContractResolver.GetClassHierarchyForType(System.Type)", span="923-923", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetClassHierarchyForType(System.Type)", file="DefaultContractResolver.cs"];
m0_409 [label="List<Type> ret = new List<Type>()", span="925-925", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetClassHierarchyForType(System.Type)", file="DefaultContractResolver.cs"];
m0_410 [label="Type current = type", span="927-927", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetClassHierarchyForType(System.Type)", file="DefaultContractResolver.cs", color=green, community=0];
m0_412 [label="ret.Add(current)", span="930-930", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetClassHierarchyForType(System.Type)", file="DefaultContractResolver.cs"];
m0_414 [label="ret.Reverse()", span="935-935", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetClassHierarchyForType(System.Type)", file="DefaultContractResolver.cs"];
m0_415 [label="return ret;", span="936-936", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetClassHierarchyForType(System.Type)", file="DefaultContractResolver.cs"];
m0_411 [label="current != null && current != typeof(object)", span="928-928", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetClassHierarchyForType(System.Type)", file="DefaultContractResolver.cs", color=green, community=0];
m0_413 [label="current = current.BaseType()", span="931-931", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetClassHierarchyForType(System.Type)", file="DefaultContractResolver.cs"];
m0_416 [label="Exit Newtonsoft.Json.Serialization.DefaultContractResolver.GetClassHierarchyForType(System.Type)", span="923-923", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.GetClassHierarchyForType(System.Type)", file="DefaultContractResolver.cs"];
m0_554 [label="Entry Newtonsoft.Json.Utilities.PropertyNameTable.Add(string)", span="76-76", cluster="Newtonsoft.Json.Utilities.PropertyNameTable.Add(string)", file="DefaultContractResolver.cs"];
m0_53 [label="Entry System.Collections.Generic.List<T>.Contains(T)", span="0-0", cluster="System.Collections.Generic.List<T>.Contains(T)", file="DefaultContractResolver.cs"];
m0_235 [label="Entry Newtonsoft.Json.Serialization.DefaultContractResolver.EnumerableDictionaryWrapper<TEnumeratorKey, TEnumeratorValue>.System.Collections.IEnumerable.GetEnumerator()", span="555-555", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.EnumerableDictionaryWrapper<TEnumeratorKey, TEnumeratorValue>.System.Collections.IEnumerable.GetEnumerator()", file="DefaultContractResolver.cs"];
m0_236 [label="return GetEnumerator();", span="557-557", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.EnumerableDictionaryWrapper<TEnumeratorKey, TEnumeratorValue>.System.Collections.IEnumerable.GetEnumerator()", file="DefaultContractResolver.cs"];
m0_237 [label="Exit Newtonsoft.Json.Serialization.DefaultContractResolver.EnumerableDictionaryWrapper<TEnumeratorKey, TEnumeratorValue>.System.Collections.IEnumerable.GetEnumerator()", span="555-555", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.EnumerableDictionaryWrapper<TEnumeratorKey, TEnumeratorValue>.System.Collections.IEnumerable.GetEnumerator()", file="DefaultContractResolver.cs"];
m0_400 [label="Entry Newtonsoft.Json.Serialization.DefaultContractResolver.ShouldSkipDeserialized(System.Type)", span="886-886", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.ShouldSkipDeserialized(System.Type)", file="DefaultContractResolver.cs"];
m0_405 [label="return false;", span="902-902", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.ShouldSkipDeserialized(System.Type)", file="DefaultContractResolver.cs"];
m0_406 [label="Exit Newtonsoft.Json.Serialization.DefaultContractResolver.ShouldSkipDeserialized(System.Type)", span="886-886", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.ShouldSkipDeserialized(System.Type)", file="DefaultContractResolver.cs"];
m0_679 [label="Entry System.Type.GetProperty(string)", span="0-0", cluster="System.Type.GetProperty(string)", file="DefaultContractResolver.cs"];
m0_531 [label="Entry string.FormatWith(System.IFormatProvider, object, object, object)", span="57-57", cluster="string.FormatWith(System.IFormatProvider, object, object, object)", file="DefaultContractResolver.cs"];
m0_104 [label="Entry Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperties(System.Type, Newtonsoft.Json.MemberSerialization)", span="1292-1292", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperties(System.Type, Newtonsoft.Json.MemberSerialization)", file="DefaultContractResolver.cs"];
m0_538 [label="List<MemberInfo> members = GetSerializableMembers(type)", span="1294-1294", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperties(System.Type, Newtonsoft.Json.MemberSerialization)", file="DefaultContractResolver.cs"];
m0_542 [label="JsonPropertyCollection properties = new JsonPropertyCollection(type)", span="1302-1302", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperties(System.Type, Newtonsoft.Json.MemberSerialization)", file="DefaultContractResolver.cs"];
m0_544 [label="JsonProperty property = CreateProperty(member, memberSerialization)", span="1306-1306", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperties(System.Type, Newtonsoft.Json.MemberSerialization)", file="DefaultContractResolver.cs"];
m0_539 [label="members == null", span="1295-1295", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperties(System.Type, Newtonsoft.Json.MemberSerialization)", file="DefaultContractResolver.cs"];
m0_543 [label=members, span="1304-1304", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperties(System.Type, Newtonsoft.Json.MemberSerialization)", file="DefaultContractResolver.cs"];
m0_540 [label="throw new JsonSerializationException(''Null collection of serializable members returned.'');", span="1297-1297", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperties(System.Type, Newtonsoft.Json.MemberSerialization)", file="DefaultContractResolver.cs"];
m0_541 [label="PropertyNameTable nameTable = GetNameTable()", span="1300-1300", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperties(System.Type, Newtonsoft.Json.MemberSerialization)", file="DefaultContractResolver.cs"];
m0_546 [label=nameTable, span="1311-1311", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperties(System.Type, Newtonsoft.Json.MemberSerialization)", file="DefaultContractResolver.cs"];
m0_547 [label="property.PropertyName = nameTable.Add(property.PropertyName)", span="1313-1313", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperties(System.Type, Newtonsoft.Json.MemberSerialization)", file="DefaultContractResolver.cs"];
m0_548 [label="properties.AddProperty(property)", span="1316-1316", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperties(System.Type, Newtonsoft.Json.MemberSerialization)", file="DefaultContractResolver.cs"];
m0_549 [label="IList<JsonProperty> orderedProperties = properties.OrderBy(p => p.Order ?? -1).ToList()", span="1320-1320", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperties(System.Type, Newtonsoft.Json.MemberSerialization)", file="DefaultContractResolver.cs"];
m0_545 [label="property != null", span="1308-1308", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperties(System.Type, Newtonsoft.Json.MemberSerialization)", file="DefaultContractResolver.cs"];
m0_550 [label="return orderedProperties;", span="1321-1321", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperties(System.Type, Newtonsoft.Json.MemberSerialization)", file="DefaultContractResolver.cs"];
m0_551 [label="Exit Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperties(System.Type, Newtonsoft.Json.MemberSerialization)", span="1292-1292", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperties(System.Type, Newtonsoft.Json.MemberSerialization)", file="DefaultContractResolver.cs"];
m0_21 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(System.Collections.Generic.IDictionary<TKey, TValue>)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(System.Collections.Generic.IDictionary<TKey, TValue>)", file="DefaultContractResolver.cs"];
m0_193 [label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.IsGenericDefinition(System.Type, System.Type)", span="281-281", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.IsGenericDefinition(System.Type, System.Type)", file="DefaultContractResolver.cs"];
m0_225 [label="Entry Newtonsoft.Json.Serialization.DefaultContractResolver.EnumerableDictionaryWrapper<TEnumeratorKey, TEnumeratorValue>.EnumerableDictionaryWrapper(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TEnumeratorKey, TEnumeratorValue>>)", span="541-541", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.EnumerableDictionaryWrapper<TEnumeratorKey, TEnumeratorValue>.EnumerableDictionaryWrapper(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TEnumeratorKey, TEnumeratorValue>>)", file="DefaultContractResolver.cs"];
m0_226 [label="ValidationUtils.ArgumentNotNull(e, nameof(e))", span="543-543", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.EnumerableDictionaryWrapper<TEnumeratorKey, TEnumeratorValue>.EnumerableDictionaryWrapper(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TEnumeratorKey, TEnumeratorValue>>)", file="DefaultContractResolver.cs"];
m0_227 [label="_e = e", span="544-544", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.EnumerableDictionaryWrapper<TEnumeratorKey, TEnumeratorValue>.EnumerableDictionaryWrapper(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TEnumeratorKey, TEnumeratorValue>>)", file="DefaultContractResolver.cs"];
m0_228 [label="Exit Newtonsoft.Json.Serialization.DefaultContractResolver.EnumerableDictionaryWrapper<TEnumeratorKey, TEnumeratorValue>.EnumerableDictionaryWrapper(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TEnumeratorKey, TEnumeratorValue>>)", span="541-541", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.EnumerableDictionaryWrapper<TEnumeratorKey, TEnumeratorValue>.EnumerableDictionaryWrapper(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TEnumeratorKey, TEnumeratorValue>>)", file="DefaultContractResolver.cs"];
m0_702 [label="Newtonsoft.Json.Serialization.DefaultContractResolver", span="", file="DefaultContractResolver.cs"];
m0_703 [label=namingStrategy, span="", file="DefaultContractResolver.cs"];
m0_704 [label=getExtensionDataDictionary, span="", file="DefaultContractResolver.cs"];
m0_705 [label=setExtensionDataDictionary, span="", file="DefaultContractResolver.cs"];
m0_706 [label="System.Reflection.MemberInfo", span="", file="DefaultContractResolver.cs"];
m0_707 [label=createExtensionDataDictionary, span="", file="DefaultContractResolver.cs"];
m0_708 [label=setExtensionDataDictionaryValue, span="", file="DefaultContractResolver.cs"];
m0_709 [label=createEnumerableWrapper, span="", file="DefaultContractResolver.cs"];
m0_710 [label="Newtonsoft.Json.Serialization.DefaultContractResolver.EnumerableDictionaryWrapper<TEnumeratorKey, TEnumeratorValue>", span="", file="DefaultContractResolver.cs"];
m0_711 [label=namingStrategy, span="", file="DefaultContractResolver.cs"];
m0_712 [label=shouldSerializeCall, span="", file="DefaultContractResolver.cs"];
m0_713 [label=specifiedPropertyGet, span="", file="DefaultContractResolver.cs"];
m2_325 [label="Entry double.TryParse(string, System.Globalization.NumberStyles, System.IFormatProvider, out double)", span="0-0", cluster="double.TryParse(string, System.Globalization.NumberStyles, System.IFormatProvider, out double)", file="JPath.cs"];
m2_324 [label="Entry string.IndexOfAny(char[])", span="0-0", cluster="string.IndexOfAny(char[])", file="JPath.cs"];
m2_221 [label="throw new JsonException(''Path ended with open query.'');", span="456-456", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseExpression(bool, out System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>)", file="JPath.cs"];
m2_222 [label="return true;", span="459-459", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseExpression(bool, out System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>)", file="JPath.cs"];
m2_223 [label="Exit Newtonsoft.Json.Linq.JsonPath.JPath.TryParseExpression(bool, out System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>)", span="435-435", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseExpression(bool, out System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>)", file="JPath.cs"];
m2_185 [label="Entry Newtonsoft.Json.Linq.JsonPath.ArrayMultipleIndexFilter.ArrayMultipleIndexFilter()", span="4-4", cluster="Newtonsoft.Json.Linq.JsonPath.ArrayMultipleIndexFilter.ArrayMultipleIndexFilter()", file="JPath.cs"];
m2_184 [label="Entry System.Convert.ToInt32(string, System.IFormatProvider)", span="0-0", cluster="System.Convert.ToInt32(string, System.IFormatProvider)", file="JPath.cs"];
m2_321 [label="Entry System.Text.StringBuilder.StringBuilder()", span="0-0", cluster="System.Text.StringBuilder.StringBuilder()", file="JPath.cs"];
m2_9 [label="Entry Newtonsoft.Json.Linq.JsonPath.JPath.ParseMain()", span="49-49", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseMain()", file="JPath.cs"];
m2_10 [label="int currentPartStartIndex = _currentIndex", span="51-51", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseMain()", file="JPath.cs"];
m2_11 [label="EatWhitespace()", span="53-53", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseMain()", file="JPath.cs"];
m2_21 [label="!ParsePath(Filters, currentPartStartIndex, false)", span="77-77", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseMain()", file="JPath.cs"];
m2_12 [label="_expression.Length == _currentIndex", span="55-55", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseMain()", file="JPath.cs"];
m2_13 [label="return;", span="57-57", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseMain()", file="JPath.cs"];
m2_14 [label="_expression[_currentIndex] == '$'", span="60-60", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseMain()", file="JPath.cs"];
m2_15 [label="_expression.Length == 1", span="62-62", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseMain()", file="JPath.cs"];
m2_16 [label="return;", span="64-64", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseMain()", file="JPath.cs"];
m2_17 [label="char c = _expression[_currentIndex + 1]", span="69-69", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseMain()", file="JPath.cs"];
m2_18 [label="c == '.' || c == '['", span="70-70", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseMain()", file="JPath.cs"];
m2_19 [label="_currentIndex++", span="72-72", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseMain()", file="JPath.cs"];
m2_20 [label="currentPartStartIndex = _currentIndex", span="73-73", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseMain()", file="JPath.cs"];
m2_22 [label="int lastCharacterIndex = _currentIndex", span="79-79", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseMain()", file="JPath.cs"];
m2_23 [label="EatWhitespace()", span="81-81", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseMain()", file="JPath.cs"];
m2_25 [label="throw new JsonException(''Unexpected character while parsing path: '' + _expression[lastCharacterIndex]);", span="85-85", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseMain()", file="JPath.cs"];
m2_24 [label="_currentIndex < _expression.Length", span="83-83", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseMain()", file="JPath.cs"];
m2_26 [label="Exit Newtonsoft.Json.Linq.JsonPath.JPath.ParseMain()", span="49-49", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseMain()", file="JPath.cs"];
m2_239 [label="throw CreateUnexpectedCharacterException();", span="489-489", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseSide(bool)", file="JPath.cs"];
m2_107 [label="Entry Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuery(char, bool)", span="396-396", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuery(char, bool)", file="JPath.cs"];
m2_193 [label="_currentIndex++", span="398-398", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuery(char, bool)", file="JPath.cs"];
m2_202 [label="_expression[_currentIndex] != indexerCloseChar", span="414-414", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuery(char, bool)", file="JPath.cs"];
m2_194 [label="EnsureLength(''Path ended with open indexer.'')", span="399-399", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuery(char, bool)", file="JPath.cs"];
m2_195 [label="_expression[_currentIndex] != '('", span="401-401", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuery(char, bool)", file="JPath.cs"];
m2_196 [label="throw new JsonException(''Unexpected character while parsing path indexer: '' + _expression[_currentIndex]);", span="403-403", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuery(char, bool)", file="JPath.cs"];
m2_197 [label="_currentIndex++", span="406-406", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuery(char, bool)", file="JPath.cs"];
m2_198 [label="QueryExpression expression = ParseExpression(scan)", span="408-408", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuery(char, bool)", color=green, community=0, file="JPath.cs"];
m2_199 [label="_currentIndex++", span="410-410", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuery(char, bool)", file="JPath.cs"];
m2_204 [label="!scan", span="419-419", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuery(char, bool)", color=green, community=0, file="JPath.cs"];
m2_200 [label="EnsureLength(''Path ended with open indexer.'')", span="411-411", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuery(char, bool)", file="JPath.cs"];
m2_201 [label="EatWhitespace()", span="412-412", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuery(char, bool)", file="JPath.cs"];
m2_203 [label="throw new JsonException(''Unexpected character while parsing path indexer: '' + _expression[_currentIndex]);", span="416-416", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuery(char, bool)", file="JPath.cs"];
m2_205 [label="return new QueryFilter\r\n                {\r\n                    Expression = expression\r\n                };", span="421-424", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuery(char, bool)", file="JPath.cs", color=green, community=1];
m2_206 [label="return new QueryScanFilter\r\n                {\r\n                    Expression = expression\r\n                };", span="428-431", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuery(char, bool)", file="JPath.cs", color=green, community=1];
m2_240 [label="Exit Newtonsoft.Json.Linq.JsonPath.JPath.ParseSide(bool)", span="467-467", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseSide(bool)", file="JPath.cs"];
m2_241 [label="CompositeExpression parentExpression = null", span="485-485", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression()", file="JPath.cs"];
m2_254 [label="_expression[_currentIndex] == ')'", span="523-523", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression(bool)", file="JPath.cs"];
m2_263 [label="CompositeExpression andExpression = new CompositeExpression { Operator = QueryOperator.And }", span="542-542", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression(bool)", file="JPath.cs"];
m2_273 [label="CompositeExpression orExpression = new CompositeExpression { Operator = QueryOperator.Or }", span="565-565", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression(bool)", file="JPath.cs"];
m2_242 [label="_currentIndex < _expression.Length", span="487-487", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression()", file="JPath.cs"];
m2_252 [label="right = ParseSide(scan)", span="513-513", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression(bool)", file="JPath.cs", color=green, community=0];
m2_253 [label="BooleanQueryExpression booleanExpression = new BooleanQueryExpression\r\n                {\r\n                    Left = left,\r\n                    Operator = op,\r\n                    Right = right\r\n                }", span="516-521", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression(bool)", file="JPath.cs"];
m2_259 [label="_expression[_currentIndex] == '&'", span="533-533", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression(bool)", file="JPath.cs"];
m2_261 [label="throw CreateUnexpectedCharacterException();", span="537-537", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression(bool)", file="JPath.cs"];
m2_265 [label="parentExpression = andExpression", span="546-546", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression(bool)", file="JPath.cs"];
m2_269 [label="_expression[_currentIndex] == '|'", span="556-556", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression(bool)", file="JPath.cs"];
m2_271 [label="throw CreateUnexpectedCharacterException();", span="560-560", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression(bool)", file="JPath.cs"];
m2_275 [label="parentExpression = orExpression", span="569-569", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression(bool)", file="JPath.cs"];
m2_243 [label="QueryExpression rootExpression = null", span="494-494", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression(bool)", color=red, community=0, file="JPath.cs"];
m2_276 [label="rootExpression == null", span="571-571", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression(bool)", file="JPath.cs"];
m2_244 [label="CompositeExpression parentExpression = null", span="495-495", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression(bool)", file="JPath.cs"];
m2_250 [label="op = QueryOperator.Exists", span="507-507", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression(bool)", file="JPath.cs"];
m2_245 [label="_currentIndex < _expression.Length", span="497-497", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression(bool)", file="JPath.cs"];
m2_246 [label="object left = ParseSide(scan)", span="499-499", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression(bool)", file="JPath.cs", color=green, community=0];
m2_247 [label="object right = null", span="500-500", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression(bool)", file="JPath.cs"];
m2_248 [label="QueryOperator op", span="502-502", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression(bool)", file="JPath.cs"];
m2_249 [label="_expression[_currentIndex] == ')'\r\n                    || _expression[_currentIndex] == '|'\r\n                    || _expression[_currentIndex] == '&'", span="503-505", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression(bool)", color=red, community=0, file="JPath.cs"];
m2_251 [label="op = ParseOperator()", span="511-511", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression(bool)", file="JPath.cs"];
m2_255 [label="parentExpression != null", span="525-525", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression(bool)", file="JPath.cs"];
m2_256 [label="parentExpression.Expressions.Add(booleanExpression)", span="527-527", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression(bool)", file="JPath.cs"];
m2_257 [label="return rootExpression;", span="528-528", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression(bool)", file="JPath.cs"];
m2_266 [label="rootExpression == null", span="548-548", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression(bool)", file="JPath.cs"];
m2_258 [label="return booleanExpression;", span="531-531", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression(bool)", file="JPath.cs"];
m2_260 [label="!Match(''&&'')", span="535-535", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression(bool)", file="JPath.cs"];
m2_262 [label="parentExpression == null || parentExpression.Operator != QueryOperator.And", span="540-540", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression(bool)", file="JPath.cs"];
m2_264 [label="parentExpression?.Expressions.Add(andExpression)", span="544-544", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression(bool)", file="JPath.cs"];
m2_267 [label="rootExpression = parentExpression", span="550-550", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression(bool)", file="JPath.cs"];
m2_268 [label="parentExpression.Expressions.Add(booleanExpression)", span="554-554", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression(bool)", file="JPath.cs"];
m2_270 [label="!Match(''||'')", span="558-558", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression(bool)", file="JPath.cs"];
m2_272 [label="parentExpression == null || parentExpression.Operator != QueryOperator.Or", span="563-563", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression(bool)", file="JPath.cs"];
m2_274 [label="parentExpression?.Expressions.Add(orExpression)", span="567-567", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression(bool)", file="JPath.cs"];
m2_277 [label="rootExpression = parentExpression", span="573-573", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseExpression(bool)", file="JPath.cs"];
m2_394 [label="Entry Newtonsoft.Json.Linq.JsonPath.JPath.Evaluate(Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken, bool)", span="798-798", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.Evaluate(Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken, bool)", file="JPath.cs"];
m2_395 [label="return Evaluate(Filters, root, t, errorWhenNoMatch);", span="800-800", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.Evaluate(Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken, bool)", file="JPath.cs"];
m2_396 [label="Exit Newtonsoft.Json.Linq.JsonPath.JPath.Evaluate(Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken, bool)", span="798-798", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.Evaluate(Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken, bool)", file="JPath.cs"];
m2_29 [label="Entry Newtonsoft.Json.JsonException.JsonException(string)", span="54-54", cluster="Newtonsoft.Json.JsonException.JsonException(string)", file="JPath.cs"];
m2_8 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="JPath.cs"];
m2_397 [label="Entry Newtonsoft.Json.Linq.JsonPath.JPath.Evaluate(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken, bool)", span="803-803", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.Evaluate(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken, bool)", file="JPath.cs"];
m2_398 [label="IEnumerable<JToken> current = new[] { t }", span="805-805", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.Evaluate(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken, bool)", file="JPath.cs"];
m2_399 [label=filters, span="806-806", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.Evaluate(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken, bool)", file="JPath.cs"];
m2_400 [label="current = filter.ExecuteFilter(root, current, errorWhenNoMatch)", span="808-808", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.Evaluate(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken, bool)", file="JPath.cs"];
m2_401 [label="return current;", span="811-811", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.Evaluate(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken, bool)", file="JPath.cs"];
m2_402 [label="Exit Newtonsoft.Json.Linq.JsonPath.JPath.Evaluate(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken, bool)", span="803-803", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.Evaluate(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken, bool)", file="JPath.cs"];
m2_86 [label="Entry Newtonsoft.Json.Linq.JsonPath.JPath.CreatePathFilter(string, bool)", span="196-196", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.CreatePathFilter(string, bool)", file="JPath.cs"];
m2_90 [label="PathFilter filter = (scan) ? (PathFilter)new ScanFilter {Name = member} : new FieldFilter {Name = member}", span="198-198", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.CreatePathFilter(string, bool)", file="JPath.cs"];
m2_91 [label="return filter;", span="199-199", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.CreatePathFilter(string, bool)", file="JPath.cs"];
m2_92 [label="Exit Newtonsoft.Json.Linq.JsonPath.JPath.CreatePathFilter(string, bool)", span="196-196", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.CreatePathFilter(string, bool)", file="JPath.cs"];
m2_208 [label="Entry Newtonsoft.Json.Linq.JsonPath.JPath.TryParseExpression(out System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>)", span="425-425", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseExpression(out System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>)", file="JPath.cs"];
m2_278 [label="Entry Newtonsoft.Json.Linq.JsonPath.JPath.ParseOperator()", span="709-709", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseOperator()", file="JPath.cs"];
m2_279 [label="Entry Newtonsoft.Json.Linq.JsonPath.BooleanQueryExpression.BooleanQueryExpression()", span="71-71", cluster="Newtonsoft.Json.Linq.JsonPath.BooleanQueryExpression.BooleanQueryExpression()", file="JPath.cs"];
m2_280 [label="Entry Newtonsoft.Json.Linq.JsonPath.JPath.Match(string)", span="690-690", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.Match(string)", file="JPath.cs"];
m2_211 [label="expressionPath.Add(RootFilter.Instance)", span="430-430", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseExpression(out System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>)", file="JPath.cs"];
m2_212 [label="_expression[_currentIndex] == '@'", span="432-432", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseExpression(out System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>)", file="JPath.cs"];
m2_220 [label="Exit Newtonsoft.Json.Linq.JsonPath.JPath.TryParseExpression(out System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>)", span="425-425", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseExpression(out System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>)", file="JPath.cs"];
m2_213 [label="expressionPath = new List<PathFilter>()", span="434-434", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseExpression(out System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>)", file="JPath.cs"];
m2_216 [label="_currentIndex++", span="442-442", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseExpression(out System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>)", file="JPath.cs"];
m2_217 [label="ParsePath(expressionPath, _currentIndex, true)", span="444-444", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseExpression(out System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>)", file="JPath.cs"];
m2_218 [label="throw new JsonException(''Path ended with open query.'');", span="446-446", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseExpression(out System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>)", file="JPath.cs"];
m2_215 [label="return false;", span="439-439", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseExpression(out System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>)", file="JPath.cs"];
m2_219 [label="return true;", span="449-449", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseExpression(out System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>)", file="JPath.cs"];
m2_214 [label="expressionPath = null", span="438-438", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseExpression(out System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>)", file="JPath.cs"];
m2_188 [label="Entry char.IsDigit(char)", span="0-0", cluster="char.IsDigit(char)", file="JPath.cs"];
m2_346 [label="int currentPosition = _currentIndex", span="692-692", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.Match(string)", file="JPath.cs"];
m2_347 [label=s, span="693-693", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.Match(string)", file="JPath.cs"];
m2_348 [label="currentPosition < _expression.Length && _expression[currentPosition] == c", span="695-695", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.Match(string)", file="JPath.cs"];
m2_349 [label="currentPosition++", span="697-697", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.Match(string)", file="JPath.cs"];
m2_351 [label="_currentIndex = currentPosition", span="705-705", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.Match(string)", file="JPath.cs"];
m2_350 [label="return false;", span="701-701", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.Match(string)", file="JPath.cs"];
m2_352 [label="return true;", span="706-706", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.Match(string)", file="JPath.cs"];
m2_353 [label="Exit Newtonsoft.Json.Linq.JsonPath.JPath.Match(string)", span="690-690", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.Match(string)", file="JPath.cs"];
m2_89 [label="Entry string.TrimEnd(params char[])", span="0-0", cluster="string.TrimEnd(params char[])", file="JPath.cs"];
m2_322 [label="Entry System.Text.StringBuilder.Append(char)", span="0-0", cluster="System.Text.StringBuilder.Append(char)", file="JPath.cs"];
m2_93 [label="Entry Newtonsoft.Json.Linq.JsonPath.ScanFilter.ScanFilter()", span="4-4", cluster="Newtonsoft.Json.Linq.JsonPath.ScanFilter.ScanFilter()", file="JPath.cs"];
m2_87 [label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.List<T>.Add(T)", file="JPath.cs"];
m2_326 [label="Entry long.TryParse(string, System.Globalization.NumberStyles, System.IFormatProvider, out long)", span="0-0", cluster="long.TryParse(string, System.Globalization.NumberStyles, System.IFormatProvider, out long)", file="JPath.cs"];
m2_281 [label="Entry Newtonsoft.Json.Linq.JsonPath.CompositeExpression.CompositeExpression()", span="38-38", cluster="Newtonsoft.Json.Linq.JsonPath.CompositeExpression.CompositeExpression()", file="JPath.cs"];
m2_6 [label="Entry Unk.nameof", span="", cluster="Unk.nameof", file="JPath.cs"];
m2_85 [label="Entry string.Substring(int, int)", span="0-0", cluster="string.Substring(int, int)", file="JPath.cs"];
m2_207 [label="Entry Newtonsoft.Json.Linq.JsonPath.QueryFilter.QueryFilter()", span="5-5", cluster="Newtonsoft.Json.Linq.JsonPath.QueryFilter.QueryFilter()", file="JPath.cs"];
m2_88 [label="Entry Newtonsoft.Json.Linq.JsonPath.JPath.ParseIndexer(char, bool)", span="202-202", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseIndexer(char, bool)", file="JPath.cs"];
m2_95 [label="_currentIndex++", span="204-204", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseIndexer(char, bool)", file="JPath.cs"];
m2_96 [label="char indexerCloseChar = (indexerOpenChar == '[') ? ']' : ')'", span="206-206", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseIndexer(char, bool)", file="JPath.cs"];
m2_100 [label="return ParseQuotedField(indexerCloseChar, scan);", span="214-214", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseIndexer(char, bool)", file="JPath.cs"];
m2_97 [label="EnsureLength(''Path ended with open indexer.'')", span="208-208", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseIndexer(char, bool)", file="JPath.cs"];
m2_102 [label="return ParseQuery(indexerCloseChar, scan);", span="218-218", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseIndexer(char, bool)", color=green, community=0, file="JPath.cs"];
m2_103 [label="return ParseArrayIndexer(indexerCloseChar);", span="222-222", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseIndexer(char, bool)", file="JPath.cs"];
m2_98 [label="EatWhitespace()", span="210-210", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseIndexer(char, bool)", file="JPath.cs"];
m2_99 [label="_expression[_currentIndex] == '\''", span="212-212", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseIndexer(char, bool)", file="JPath.cs"];
m2_101 [label="_expression[_currentIndex] == '?'", span="216-216", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseIndexer(char, bool)", file="JPath.cs"];
m2_104 [label="Exit Newtonsoft.Json.Linq.JsonPath.JPath.ParseIndexer(char, bool)", span="202-202", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseIndexer(char, bool)", file="JPath.cs"];
m2_210 [label="expressionPath = new List<PathFilter>()", span="429-429", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseExpression(out System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>)", file="JPath.cs"];
m2_94 [label="Entry Newtonsoft.Json.Linq.JsonPath.FieldFilter.FieldFilter()", span="6-6", cluster="Newtonsoft.Json.Linq.JsonPath.FieldFilter.FieldFilter()", file="JPath.cs"];
m2_186 [label="Entry Newtonsoft.Json.Linq.JsonPath.ArraySliceFilter.ArraySliceFilter()", span="7-7", cluster="Newtonsoft.Json.Linq.JsonPath.ArraySliceFilter.ArraySliceFilter()", file="JPath.cs"];
m2_403 [label="Entry Newtonsoft.Json.Linq.JsonPath.PathFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", span="8-8", cluster="Newtonsoft.Json.Linq.JsonPath.PathFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="JPath.cs"];
m2_390 [label="Entry Newtonsoft.Json.Linq.JsonPath.FieldMultipleFilter.FieldMultipleFilter()", span="11-11", cluster="Newtonsoft.Json.Linq.JsonPath.FieldMultipleFilter.FieldMultipleFilter()", file="JPath.cs"];
m2_238 [label="return new JValue(value);", span="486-486", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseSide(bool)", file="JPath.cs"];
m2_282 [label="char currentChar = _expression[_currentIndex]", span="576-576", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseValue(out object)", file="JPath.cs"];
m2_283 [label="currentChar == '\''", span="577-577", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseValue(out object)", file="JPath.cs"];
m2_286 [label="char.IsDigit(currentChar) || currentChar == '-'", span="582-582", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseValue(out object)", file="JPath.cs"];
m2_288 [label="sb.Append(currentChar)", span="585-585", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseValue(out object)", file="JPath.cs"];
m2_305 [label="currentChar == 't'", span="617-617", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseValue(out object)", file="JPath.cs"];
m2_309 [label="currentChar == 'f'", span="625-625", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseValue(out object)", file="JPath.cs"];
m2_313 [label="currentChar == 'n'", span="633-633", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseValue(out object)", file="JPath.cs"];
m2_284 [label="value = ReadQuotedString()", span="579-579", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseValue(out object)", file="JPath.cs"];
m2_285 [label="return true;", span="580-580", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseValue(out object)", file="JPath.cs"];
m2_287 [label="StringBuilder sb = new StringBuilder()", span="584-584", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseValue(out object)", file="JPath.cs"];
m2_293 [label="string numberText = sb.ToString()", span="593-593", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseValue(out object)", file="JPath.cs"];
m2_303 [label="sb.Append(currentChar)", span="612-612", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseValue(out object)", file="JPath.cs"];
m2_289 [label="_currentIndex++", span="587-587", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseValue(out object)", file="JPath.cs"];
m2_290 [label="_currentIndex < _expression.Length", span="588-588", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseValue(out object)", file="JPath.cs"];
m2_291 [label="currentChar = _expression[_currentIndex]", span="590-590", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseValue(out object)", file="JPath.cs"];
m2_317 [label="value = null", span="642-642", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseValue(out object)", file="JPath.cs"];
m2_292 [label="currentChar == ' ' || currentChar == ')'", span="591-591", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseValue(out object)", file="JPath.cs"];
m2_294 [label="numberText.IndexOfAny(new char[] { '.', 'E', 'e' }) != -1", span="595-595", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseValue(out object)", file="JPath.cs"];
m2_296 [label="bool result = double.TryParse(numberText, NumberStyles.Float | NumberStyles.AllowThousands, CultureInfo.InvariantCulture, out d)", span="598-598", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseValue(out object)", file="JPath.cs"];
m2_300 [label="bool result = long.TryParse(numberText, NumberStyles.Integer, CultureInfo.InvariantCulture, out l)", span="605-605", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseValue(out object)", file="JPath.cs"];
m2_295 [label="double d", span="597-597", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseValue(out object)", file="JPath.cs"];
m2_299 [label="long l", span="604-604", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseValue(out object)", file="JPath.cs"];
m2_297 [label="value = d", span="599-599", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseValue(out object)", file="JPath.cs"];
m2_298 [label="return result;", span="600-600", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseValue(out object)", file="JPath.cs"];
m2_301 [label="value = l", span="606-606", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseValue(out object)", file="JPath.cs"];
m2_302 [label="return result;", span="607-607", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseValue(out object)", file="JPath.cs"];
m2_304 [label="_currentIndex++", span="613-613", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseValue(out object)", file="JPath.cs"];
m2_306 [label="Match(''true'')", span="619-619", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseValue(out object)", file="JPath.cs"];
m2_307 [label="value = true", span="621-621", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseValue(out object)", file="JPath.cs"];
m2_308 [label="return true;", span="622-622", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseValue(out object)", file="JPath.cs"];
m2_310 [label="Match(''false'')", span="627-627", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseValue(out object)", file="JPath.cs"];
m2_311 [label="value = false", span="629-629", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseValue(out object)", file="JPath.cs"];
m2_312 [label="return true;", span="630-630", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseValue(out object)", file="JPath.cs"];
m2_314 [label="Match(''null'')", span="635-635", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseValue(out object)", file="JPath.cs"];
m2_315 [label="value = null", span="637-637", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseValue(out object)", file="JPath.cs"];
m2_316 [label="return true;", span="638-638", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseValue(out object)", file="JPath.cs"];
m2_318 [label="return false;", span="643-643", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseValue(out object)", file="JPath.cs"];
m2_319 [label="Exit Newtonsoft.Json.Linq.JsonPath.JPath.TryParseValue(out object)", span="574-574", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseValue(out object)", file="JPath.cs"];
m2_187 [label="Entry Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter.ArrayIndexFilter()", span="6-6", cluster="Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter.ArrayIndexFilter()", file="JPath.cs"];
m2_227 [label="TryParseExpression(out expressionPath)", span="462-462", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseSide()", file="JPath.cs", color=red, community=0];
m2_230 [label="return expressionPath;", span="467-467", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseSide()", color=green, community=0, file="JPath.cs"];
m2_229 [label="EnsureLength(''Path ended with open query.'')", span="465-465", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseSide()", file="JPath.cs"];
m2_231 [label="object value", span="470-470", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseSide()", file="JPath.cs"];
m2_234 [label="EnsureLength(''Path ended with open query.'')", span="474-474", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseSide()", file="JPath.cs"];
m2_233 [label="EatWhitespace()", span="473-473", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseSide()", file="JPath.cs"];
m2_228 [label="EatWhitespace()", span="464-464", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseSide()", file="JPath.cs"];
m2_232 [label="TryParseValue(out value)", span="471-471", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseSide()", file="JPath.cs"];
m2_235 [label="return new JValue(value);", span="476-476", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseSide()", file="JPath.cs"];
m2_236 [label="throw CreateUnexpectedCharacterException();", span="479-479", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseSide()", file="JPath.cs"];
m2_237 [label="Exit Newtonsoft.Json.Linq.JsonPath.JPath.ParseSide()", span="457-457", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseSide()", file="JPath.cs"];
m2_105 [label="Entry Newtonsoft.Json.Linq.JsonPath.JPath.EnsureLength(string)", span="790-790", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.EnsureLength(string)", file="JPath.cs"];
m2_391 [label="_currentIndex >= _expression.Length", span="792-792", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.EnsureLength(string)", file="JPath.cs"];
m2_392 [label="throw new JsonException(message);", span="794-794", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.EnsureLength(string)", file="JPath.cs"];
m2_393 [label="Exit Newtonsoft.Json.Linq.JsonPath.JPath.EnsureLength(string)", span="790-790", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.EnsureLength(string)", file="JPath.cs"];
m2_28 [label="Entry Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", span="90-90", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", file="JPath.cs"];
m2_30 [label="bool scan = false", span="92-92", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", file="JPath.cs"];
m2_39 [label="_currentIndex > currentPartStartIndex", span="105-105", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", file="JPath.cs"];
m2_40 [label="string member = _expression.Substring(currentPartStartIndex, _currentIndex - currentPartStartIndex)", span="107-107", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", file="JPath.cs"];
m2_43 [label="filters.Add(CreatePathFilter(member, scan))", span="113-113", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", file="JPath.cs"];
m2_45 [label="filters.Add(ParseIndexer(currentChar, scan))", span="117-117", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", file="JPath.cs"];
m2_61 [label="filters.Add(CreatePathFilter(member, scan))", span="142-142", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", file="JPath.cs"];
m2_70 [label="query && (currentChar == '=' || currentChar == '<' || currentChar == '!' || currentChar == '>' || currentChar == '|' || currentChar == '&')", span="156-156", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", file="JPath.cs"];
m2_76 [label="_currentIndex > currentPartStartIndex", span="175-175", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", file="JPath.cs"];
m2_77 [label="string member = _expression.Substring(currentPartStartIndex, _currentIndex - currentPartStartIndex).TrimEnd()", span="177-177", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", file="JPath.cs"];
m2_80 [label="filters.Add(CreatePathFilter(member, scan))", span="182-182", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", file="JPath.cs"];
m2_81 [label="followingDot && (atPathEnd || query)", span="187-187", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", file="JPath.cs"];
m2_31 [label="bool followingIndexer = false", span="93-93", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", file="JPath.cs"];
m2_32 [label="bool followingDot = false", span="94-94", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", file="JPath.cs"];
m2_33 [label="bool ended = false", span="96-96", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", file="JPath.cs"];
m2_34 [label="_currentIndex < _expression.Length && !ended", span="97-97", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", file="JPath.cs"];
m2_35 [label="char currentChar = _expression[_currentIndex]", span="99-99", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", file="JPath.cs"];
m2_75 [label="bool atPathEnd = (_currentIndex == _expression.Length)", span="173-173", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", file="JPath.cs"];
m2_36 [label=currentChar, span="101-101", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", file="JPath.cs"];
m2_73 [label="throw new JsonException(''Unexpected character following indexer: '' + currentChar);", span="164-164", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", file="JPath.cs"];
m2_37 [label="'['", span="103-103", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", file="JPath.cs"];
m2_50 [label="']'", span="123-123", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", file="JPath.cs"];
m2_53 [label="' '", span="127-127", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", file="JPath.cs"];
m2_56 [label="'.'", span="133-133", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", file="JPath.cs"];
m2_38 [label="'('", span="104-104", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", file="JPath.cs"];
m2_41 [label="member == ''*''", span="108-108", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", file="JPath.cs"];
m2_42 [label="member = null", span="110-110", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", file="JPath.cs"];
m2_44 [label="scan = false", span="114-114", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", file="JPath.cs"];
m2_46 [label="_currentIndex++", span="118-118", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", file="JPath.cs"];
m2_47 [label="currentPartStartIndex = _currentIndex", span="119-119", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", file="JPath.cs"];
m2_48 [label="followingIndexer = true", span="120-120", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", file="JPath.cs"];
m2_57 [label="_currentIndex > currentPartStartIndex", span="134-134", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", file="JPath.cs"];
m2_58 [label="string member = _expression.Substring(currentPartStartIndex, _currentIndex - currentPartStartIndex)", span="136-136", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", file="JPath.cs"];
m2_49 [label="followingDot = false", span="121-121", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", file="JPath.cs"];
m2_51 [label="')'", span="124-124", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", file="JPath.cs"];
m2_52 [label="ended = true", span="125-125", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", file="JPath.cs"];
m2_54 [label="_currentIndex < _expression.Length", span="128-128", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", file="JPath.cs"];
m2_55 [label="ended = true", span="130-130", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", file="JPath.cs"];
m2_63 [label="_currentIndex + 1 < _expression.Length && _expression[_currentIndex + 1] == '.'", span="145-145", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", file="JPath.cs"];
m2_59 [label="member == ''*''", span="137-137", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", file="JPath.cs"];
m2_60 [label="member = null", span="139-139", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", file="JPath.cs"];
m2_62 [label="scan = false", span="143-143", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", file="JPath.cs"];
m2_64 [label="scan = true", span="147-147", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", file="JPath.cs"];
m2_66 [label="_currentIndex++", span="150-150", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", file="JPath.cs"];
m2_65 [label="_currentIndex++", span="148-148", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", file="JPath.cs"];
m2_67 [label="currentPartStartIndex = _currentIndex", span="151-151", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", file="JPath.cs"];
m2_68 [label="followingIndexer = false", span="152-152", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", file="JPath.cs"];
m2_69 [label="followingDot = true", span="153-153", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", file="JPath.cs"];
m2_72 [label=followingIndexer, span="162-162", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", file="JPath.cs"];
m2_71 [label="ended = true", span="158-158", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", file="JPath.cs"];
m2_74 [label="_currentIndex++", span="167-167", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", file="JPath.cs"];
m2_83 [label="return atPathEnd;", span="193-193", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", file="JPath.cs"];
m2_78 [label="member == ''*''", span="178-178", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", file="JPath.cs"];
m2_79 [label="member = null", span="180-180", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", file="JPath.cs"];
m2_82 [label="throw new JsonException(''Unexpected end while parsing path.'');", span="189-189", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", file="JPath.cs"];
m2_84 [label="Exit Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", span="90-90", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParsePath(System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>, int, bool)", file="JPath.cs"];
m2_7 [label="Entry Newtonsoft.Json.Utilities.ValidationUtils.ArgumentNotNull(object, string)", span="31-31", cluster="Newtonsoft.Json.Utilities.ValidationUtils.ArgumentNotNull(object, string)", file="JPath.cs"];
m2_224 [label="Entry Newtonsoft.Json.Linq.JsonPath.JPath.ParseSide()", span="457-457", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseSide()", file="JPath.cs"];
m2_225 [label="EatWhitespace()", span="459-459", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseSide()", file="JPath.cs"];
m2_226 [label="List<PathFilter> expressionPath", span="461-461", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseSide()", file="JPath.cs"];
m2_354 [label="_currentIndex + 1 >= _expression.Length", span="711-711", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseOperator()", file="JPath.cs"];
m2_355 [label="throw new JsonException(''Path ended with open query.'');", span="713-713", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseOperator()", file="JPath.cs"];
m2_356 [label="Match(''=='')", span="716-716", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseOperator()", file="JPath.cs"];
m2_357 [label="return QueryOperator.Equals;", span="718-718", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseOperator()", file="JPath.cs"];
m2_358 [label="Match(''!='') || Match(''<>'')", span="720-720", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseOperator()", file="JPath.cs"];
m2_359 [label="return QueryOperator.NotEquals;", span="722-722", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseOperator()", file="JPath.cs"];
m2_360 [label="Match(''<='')", span="724-724", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseOperator()", file="JPath.cs"];
m2_361 [label="return QueryOperator.LessThanOrEquals;", span="726-726", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseOperator()", file="JPath.cs"];
m2_362 [label="Match(''<'')", span="728-728", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseOperator()", file="JPath.cs"];
m2_363 [label="return QueryOperator.LessThan;", span="730-730", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseOperator()", file="JPath.cs"];
m2_364 [label="Match(''>='')", span="732-732", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseOperator()", file="JPath.cs"];
m2_365 [label="return QueryOperator.GreaterThanOrEquals;", span="734-734", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseOperator()", file="JPath.cs"];
m2_366 [label="Match(''>'')", span="736-736", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseOperator()", file="JPath.cs"];
m2_367 [label="return QueryOperator.GreaterThan;", span="738-738", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseOperator()", file="JPath.cs"];
m2_368 [label="throw new JsonException(''Could not read query operator.'');", span="741-741", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseOperator()", file="JPath.cs"];
m2_369 [label="Exit Newtonsoft.Json.Linq.JsonPath.JPath.ParseOperator()", span="709-709", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseOperator()", file="JPath.cs"];
m2_0 [label="Entry Newtonsoft.Json.Linq.JsonPath.JPath.JPath(string)", span="40-40", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.JPath(string)", file="JPath.cs"];
m2_1 [label="ValidationUtils.ArgumentNotNull(expression, nameof(expression))", span="42-42", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.JPath(string)", file="JPath.cs"];
m2_2 [label="_expression = expression", span="43-43", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.JPath(string)", file="JPath.cs"];
m2_3 [label="Filters = new List<PathFilter>()", span="44-44", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.JPath(string)", file="JPath.cs"];
m2_4 [label="ParseMain()", span="46-46", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.JPath(string)", file="JPath.cs"];
m2_5 [label="Exit Newtonsoft.Json.Linq.JsonPath.JPath.JPath(string)", span="40-40", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.JPath(string)", file="JPath.cs"];
m2_323 [label="Entry System.Text.StringBuilder.ToString()", span="0-0", cluster="System.Text.StringBuilder.ToString()", file="JPath.cs"];
m2_389 [label="Entry Newtonsoft.Json.Linq.JsonPath.ScanMultipleFilter.ScanMultipleFilter()", span="4-4", cluster="Newtonsoft.Json.Linq.JsonPath.ScanMultipleFilter.ScanMultipleFilter()", file="JPath.cs"];
m2_320 [label="Entry Newtonsoft.Json.Linq.JsonPath.JPath.ReadQuotedString()", span="646-646", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ReadQuotedString()", file="JPath.cs"];
m2_327 [label="StringBuilder sb = new StringBuilder()", span="648-648", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ReadQuotedString()", file="JPath.cs"];
m2_328 [label="_currentIndex++", span="650-650", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ReadQuotedString()", file="JPath.cs"];
m2_334 [label="sb.Append('\'')", span="660-660", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ReadQuotedString()", file="JPath.cs"];
m2_336 [label="sb.Append('\\')", span="664-664", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ReadQuotedString()", file="JPath.cs"];
m2_341 [label="return sb.ToString();", span="677-677", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ReadQuotedString()", file="JPath.cs"];
m2_343 [label="sb.Append(currentChar)", span="683-683", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ReadQuotedString()", file="JPath.cs"];
m2_329 [label="_currentIndex < _expression.Length", span="651-651", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ReadQuotedString()", file="JPath.cs"];
m2_330 [label="char currentChar = _expression[_currentIndex]", span="653-653", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ReadQuotedString()", file="JPath.cs"];
m2_344 [label="throw new JsonException(''Path ended with an open string.'');", span="687-687", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ReadQuotedString()", file="JPath.cs"];
m2_331 [label="currentChar == '\\' && _currentIndex + 1 < _expression.Length", span="654-654", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ReadQuotedString()", file="JPath.cs"];
m2_339 [label="currentChar == '\''", span="673-673", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ReadQuotedString()", file="JPath.cs"];
m2_332 [label="_currentIndex++", span="656-656", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ReadQuotedString()", file="JPath.cs"];
m2_333 [label="_expression[_currentIndex] == '\''", span="658-658", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ReadQuotedString()", file="JPath.cs"];
m2_335 [label="_expression[_currentIndex] == '\\'", span="662-662", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ReadQuotedString()", file="JPath.cs"];
m2_337 [label="throw new JsonException(@''Unknown escape character: \'' + _expression[_currentIndex]);", span="668-668", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ReadQuotedString()", file="JPath.cs"];
m2_338 [label="_currentIndex++", span="671-671", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ReadQuotedString()", file="JPath.cs"];
m2_340 [label="_currentIndex++", span="675-675", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ReadQuotedString()", file="JPath.cs"];
m2_342 [label="_currentIndex++", span="682-682", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ReadQuotedString()", file="JPath.cs"];
m2_345 [label="Exit Newtonsoft.Json.Linq.JsonPath.JPath.ReadQuotedString()", span="646-646", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ReadQuotedString()", file="JPath.cs"];
m2_106 [label="Entry Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuotedField(char, bool)", span="744-744", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuotedField(char, bool)", file="JPath.cs"];
m2_370 [label="List<string> fields = null", span="746-746", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuotedField(char, bool)", file="JPath.cs"];
m2_375 [label="_expression[_currentIndex] == indexerCloseChar", span="755-755", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuotedField(char, bool)", file="JPath.cs"];
m2_378 [label="return (scan)\r\n                            ? (PathFilter)new ScanMultipleFilter { Names = fields }\r\n                            : (PathFilter)new FieldMultipleFilter { Names = fields };", span="760-762", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuotedField(char, bool)", file="JPath.cs"];
m2_379 [label="return CreatePathFilter(field, scan);", span="766-766", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuotedField(char, bool)", file="JPath.cs"];
m2_371 [label="_currentIndex < _expression.Length", span="748-748", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuotedField(char, bool)", file="JPath.cs"];
m2_376 [label="fields != null", span="757-757", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuotedField(char, bool)", file="JPath.cs"];
m2_377 [label="fields.Add(field)", span="759-759", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuotedField(char, bool)", file="JPath.cs"];
m2_383 [label="fields == null", span="774-774", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuotedField(char, bool)", file="JPath.cs"];
m2_385 [label="fields.Add(field)", span="779-779", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuotedField(char, bool)", file="JPath.cs"];
m2_372 [label="string field = ReadQuotedString()", span="750-750", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuotedField(char, bool)", file="JPath.cs"];
m2_387 [label="throw new JsonException(''Path ended with open indexer.'');", span="787-787", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuotedField(char, bool)", file="JPath.cs"];
m2_373 [label="EatWhitespace()", span="752-752", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuotedField(char, bool)", file="JPath.cs"];
m2_374 [label="EnsureLength(''Path ended with open indexer.'')", span="753-753", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuotedField(char, bool)", file="JPath.cs"];
m2_380 [label="_expression[_currentIndex] == ','", span="769-769", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuotedField(char, bool)", file="JPath.cs"];
m2_381 [label="_currentIndex++", span="771-771", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuotedField(char, bool)", file="JPath.cs"];
m2_386 [label="throw new JsonException(''Unexpected character while parsing path indexer: '' + _expression[_currentIndex]);", span="783-783", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuotedField(char, bool)", file="JPath.cs"];
m2_382 [label="EatWhitespace()", span="772-772", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuotedField(char, bool)", file="JPath.cs"];
m2_384 [label="fields = new List<string>()", span="776-776", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuotedField(char, bool)", file="JPath.cs"];
m2_388 [label="Exit Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuotedField(char, bool)", span="744-744", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseQuotedField(char, bool)", file="JPath.cs"];
m2_209 [label="_expression[_currentIndex] == '$'", span="427-427", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.TryParseExpression(out System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>)", file="JPath.cs"];
m2_27 [label="Entry Newtonsoft.Json.Linq.JsonPath.JPath.EatWhitespace()", span="383-383", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.EatWhitespace()", file="JPath.cs"];
m2_189 [label="_currentIndex < _expression.Length", span="385-385", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.EatWhitespace()", file="JPath.cs"];
m2_190 [label="_expression[_currentIndex] != ' '", span="387-387", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.EatWhitespace()", file="JPath.cs"];
m2_191 [label="_currentIndex++", span="392-392", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.EatWhitespace()", file="JPath.cs"];
m2_192 [label="Exit Newtonsoft.Json.Linq.JsonPath.JPath.EatWhitespace()", span="383-383", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.EatWhitespace()", file="JPath.cs"];
m2_108 [label="Entry Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", span="226-226", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", file="JPath.cs"];
m2_109 [label="int start = _currentIndex", span="228-228", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", file="JPath.cs"];
m2_121 [label="currentCharacter == indexerCloseChar", span="247-247", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", file="JPath.cs"];
m2_159 [label="_expression[_currentIndex] != indexerCloseChar", span="326-326", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", file="JPath.cs"];
m2_110 [label="int? end = null", span="229-229", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", file="JPath.cs"];
m2_122 [label="int length = (end ?? _currentIndex) - start", span="249-249", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", file="JPath.cs"];
m2_126 [label="string indexer = _expression.Substring(start, length)", span="258-258", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", file="JPath.cs"];
m2_132 [label="string indexer = _expression.Substring(start, length)", span="268-268", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", file="JPath.cs"];
m2_140 [label="string indexer = _expression.Substring(start, length)", span="290-290", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", file="JPath.cs"];
m2_144 [label="int length = (end ?? _currentIndex) - start", span="298-298", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", file="JPath.cs"];
m2_149 [label="string indexer = _expression.Substring(start, length)", span="310-310", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", file="JPath.cs"];
m2_163 [label="int length = (end ?? _currentIndex) - start", span="335-335", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", file="JPath.cs"];
m2_165 [label="string indexer = _expression.Substring(start, length)", span="339-339", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", file="JPath.cs"];
m2_111 [label="List<int> indexes = null", span="230-230", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", file="JPath.cs"];
m2_179 [label="end != null", span="371-371", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", file="JPath.cs"];
m2_112 [label="int colonCount = 0", span="231-231", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", file="JPath.cs"];
m2_123 [label="indexes != null", span="251-251", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", file="JPath.cs"];
m2_128 [label="indexes.Add(index)", span="261-261", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", file="JPath.cs"];
m2_129 [label="return new ArrayMultipleIndexFilter { Indexes = indexes };", span="262-262", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", file="JPath.cs"];
m2_147 [label="indexes == null", span="305-305", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", file="JPath.cs"];
m2_150 [label="indexes.Add(Convert.ToInt32(indexer, CultureInfo.InvariantCulture))", span="311-311", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", file="JPath.cs"];
m2_113 [label="int? startIndex = null", span="232-232", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", file="JPath.cs"];
m2_130 [label="colonCount > 0", span="264-264", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", file="JPath.cs"];
m2_134 [label="colonCount == 1", span="271-271", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", file="JPath.cs"];
m2_167 [label="colonCount == 0", span="342-342", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", file="JPath.cs"];
m2_169 [label="colonCount == 1", span="346-346", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", file="JPath.cs"];
m2_172 [label="colonCount++", span="356-356", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", file="JPath.cs"];
m2_114 [label="int? endIndex = null", span="233-233", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", file="JPath.cs"];
m2_137 [label="return new ArraySliceFilter { Start = startIndex, End = endIndex, Step = step };", span="281-281", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", file="JPath.cs"];
m2_115 [label="int? step = null", span="234-234", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", file="JPath.cs"];
m2_116 [label="_currentIndex < _expression.Length", span="236-236", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", file="JPath.cs"];
m2_117 [label="char currentCharacter = _expression[_currentIndex]", span="238-238", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", file="JPath.cs"];
m2_182 [label="throw new JsonException(''Path ended with open indexer.'');", span="380-380", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", file="JPath.cs"];
m2_118 [label="currentCharacter == ' '", span="240-240", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", file="JPath.cs"];
m2_143 [label="currentCharacter == ','", span="296-296", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", file="JPath.cs"];
m2_155 [label="currentCharacter == '*'", span="320-320", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", file="JPath.cs"];
m2_160 [label="throw new JsonException(''Unexpected character while parsing path indexer: '' + currentCharacter);", span="328-328", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", file="JPath.cs"];
m2_162 [label="currentCharacter == ':'", span="333-333", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", file="JPath.cs"];
m2_177 [label="!char.IsDigit(currentCharacter) && currentCharacter != '-'", span="365-365", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", file="JPath.cs"];
m2_178 [label="throw new JsonException(''Unexpected character while parsing path indexer: '' + currentCharacter);", span="367-367", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", file="JPath.cs"];
m2_180 [label="throw new JsonException(''Unexpected character while parsing path indexer: '' + currentCharacter);", span="373-373", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", file="JPath.cs"];
m2_119 [label="end = _currentIndex", span="242-242", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", file="JPath.cs"];
m2_120 [label="EatWhitespace()", span="243-243", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", file="JPath.cs"];
m2_124 [label="length == 0", span="253-253", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", file="JPath.cs"];
m2_131 [label="length > 0", span="266-266", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", file="JPath.cs"];
m2_138 [label="length == 0", span="285-285", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", file="JPath.cs"];
m2_125 [label="throw new JsonException(''Array index expected.'');", span="255-255", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", file="JPath.cs"];
m2_127 [label="int index = Convert.ToInt32(indexer, CultureInfo.InvariantCulture)", span="259-259", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", file="JPath.cs"];
m2_133 [label="int index = Convert.ToInt32(indexer, CultureInfo.InvariantCulture)", span="269-269", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", file="JPath.cs"];
m2_135 [label="endIndex = index", span="273-273", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", file="JPath.cs"];
m2_136 [label="step = index", span="277-277", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", file="JPath.cs"];
m2_139 [label="throw new JsonException(''Array index expected.'');", span="287-287", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", file="JPath.cs"];
m2_141 [label="int index = Convert.ToInt32(indexer, CultureInfo.InvariantCulture)", span="291-291", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", file="JPath.cs"];
m2_142 [label="return new ArrayIndexFilter { Index = index };", span="293-293", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", file="JPath.cs"];
m2_145 [label="length == 0", span="300-300", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", file="JPath.cs"];
m2_146 [label="throw new JsonException(''Array index expected.'');", span="302-302", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", file="JPath.cs"];
m2_148 [label="indexes = new List<int>()", span="307-307", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", file="JPath.cs"];
m2_151 [label="_currentIndex++", span="313-313", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", file="JPath.cs"];
m2_152 [label="EatWhitespace()", span="315-315", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", file="JPath.cs"];
m2_153 [label="start = _currentIndex", span="317-317", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", file="JPath.cs"];
m2_154 [label="end = null", span="318-318", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", file="JPath.cs"];
m2_156 [label="_currentIndex++", span="322-322", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", file="JPath.cs"];
m2_157 [label="EnsureLength(''Path ended with open indexer.'')", span="323-323", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", file="JPath.cs"];
m2_158 [label="EatWhitespace()", span="324-324", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", file="JPath.cs"];
m2_161 [label="return new ArrayIndexFilter();", span="331-331", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", file="JPath.cs"];
m2_164 [label="length > 0", span="337-337", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", file="JPath.cs"];
m2_166 [label="int index = Convert.ToInt32(indexer, CultureInfo.InvariantCulture)", span="340-340", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", file="JPath.cs"];
m2_168 [label="startIndex = index", span="344-344", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", file="JPath.cs"];
m2_170 [label="endIndex = index", span="348-348", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", file="JPath.cs"];
m2_171 [label="step = index", span="352-352", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", file="JPath.cs"];
m2_173 [label="_currentIndex++", span="358-358", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", file="JPath.cs"];
m2_174 [label="EatWhitespace()", span="360-360", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", file="JPath.cs"];
m2_175 [label="start = _currentIndex", span="362-362", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", file="JPath.cs"];
m2_176 [label="end = null", span="363-363", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", file="JPath.cs"];
m2_181 [label="_currentIndex++", span="376-376", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", file="JPath.cs"];
m2_183 [label="Exit Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", span="226-226", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.ParseArrayIndexer(char)", file="JPath.cs"];
m2_404 [label="Newtonsoft.Json.Linq.JsonPath.JPath", span="", file="JPath.cs"];
m3_511 [label="Entry System.Guid.Guid(string)", span="0-0", cluster="System.Guid.Guid(string)", file="JPathExecuteTests.cs"];
m3_179 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingPropertyWithError()", span="399-399", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingPropertyWithError()", file="JPathExecuteTests.cs"];
m3_180 [label="JObject o = new JObject(\r\n                new JProperty(''Blah'', 1))", span="401-402", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingPropertyWithError()", file="JPathExecuteTests.cs"];
m3_181 [label="ExceptionAssert.Throws<JsonException>(() => { o.SelectToken(''Missing'', true); }, ''Property 'Missing' does not exist on JObject.'')", span="404-404", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingPropertyWithError()", file="JPathExecuteTests.cs"];
m3_182 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingPropertyWithError()", span="399-399", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingPropertyWithError()", file="JPathExecuteTests.cs"];
m3_446 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NestedQuery()", span="776-776", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NestedQuery()", file="JPathExecuteTests.cs"];
m3_447 [label="JArray a = new JArray(\r\n                new JObject(\r\n                    new JProperty(''name'', ''Bad Boys''),\r\n                    new JProperty(''cast'', new JArray(\r\n                        new JObject(new JProperty(''name'', ''Will Smith''))))),\r\n                new JObject(\r\n                    new JProperty(''name'', ''Independence Day''),\r\n                    new JProperty(''cast'', new JArray(\r\n                        new JObject(new JProperty(''name'', ''Will Smith''))))),\r\n                new JObject(\r\n                    new JProperty(''name'', ''The Rock''),\r\n                    new JProperty(''cast'', new JArray(\r\n                        new JObject(new JProperty(''name'', ''Nick Cage'')))))\r\n                )", span="778-791", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NestedQuery()", file="JPathExecuteTests.cs"];
m3_448 [label="IList<JToken> t = a.SelectTokens(''[?(@.cast[?(@.name=='Will Smith')])].name'').ToList()", span="793-793", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NestedQuery()", file="JPathExecuteTests.cs"];
m3_449 [label="Assert.IsNotNull(t)", span="794-794", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NestedQuery()", file="JPathExecuteTests.cs"];
m3_450 [label="Assert.AreEqual(2, t.Count)", span="795-795", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NestedQuery()", file="JPathExecuteTests.cs"];
m3_451 [label="Assert.AreEqual(''Bad Boys'', (string)t[0])", span="796-796", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NestedQuery()", file="JPathExecuteTests.cs"];
m3_452 [label="Assert.AreEqual(''Independence Day'', (string)t[1])", span="797-797", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NestedQuery()", file="JPathExecuteTests.cs"];
m3_453 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NestedQuery()", span="776-776", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NestedQuery()", file="JPathExecuteTests.cs"];
m3_238 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArray()", span="468-468", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArray()", file="JPathExecuteTests.cs"];
m3_239 [label="JArray a = new JArray(1, 2, 3, 4)", span="470-470", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArray()", file="JPathExecuteTests.cs"];
m3_240 [label="JToken t = a.SelectToken(''[1]'')", span="472-472", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArray()", file="JPathExecuteTests.cs"];
m3_241 [label="Assert.IsNotNull(t)", span="473-473", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArray()", file="JPathExecuteTests.cs"];
m3_242 [label="Assert.AreEqual(JTokenType.Integer, t.Type)", span="474-474", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArray()", file="JPathExecuteTests.cs"];
m3_243 [label="Assert.AreEqual(2, (int)t)", span="475-475", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArray()", file="JPathExecuteTests.cs"];
m3_244 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArray()", span="468-468", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArray()", file="JPathExecuteTests.cs"];
m3_83 [label="Entry Newtonsoft.Json.Linq.JArray.JArray(params object[])", span="82-82", cluster="Newtonsoft.Json.Linq.JArray.JArray(params object[])", file="JPathExecuteTests.cs"];
m3_553 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsAndNonPrimativeValues()", span="1065-1065", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsAndNonPrimativeValues()", file="JPathExecuteTests.cs"];
m3_554 [label="string json = @''[\r\n  {\r\n    ''''name'''': ''''string'''',\r\n    ''''value'''': ''''aString''''\r\n  },\r\n  {\r\n    ''''name'''': ''''number'''',\r\n    ''''value'''': 123\r\n  },\r\n  {\r\n    ''''name'''': ''''array'''',\r\n    ''''value'''': [\r\n      1,\r\n      2,\r\n      3,\r\n      4\r\n    ]\r\n  },\r\n  {\r\n    ''''name'''': ''''object'''',\r\n    ''''value'''': {\r\n      ''''1'''': 1\r\n    }\r\n  }\r\n]''", span="1067-1091", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsAndNonPrimativeValues()", file="JPathExecuteTests.cs"];
m3_555 [label="JArray a = JArray.Parse(json)", span="1093-1093", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsAndNonPrimativeValues()", file="JPathExecuteTests.cs"];
m3_556 [label="List<JToken> result = a.SelectTokens(''$.[?(@.value!=1)]'').ToList()", span="1095-1095", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsAndNonPrimativeValues()", file="JPathExecuteTests.cs"];
m3_558 [label="result = a.SelectTokens(''$.[?(@.value!='2000-12-05T05:07:59-10:00')]'').ToList()", span="1098-1098", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsAndNonPrimativeValues()", file="JPathExecuteTests.cs"];
m3_560 [label="result = a.SelectTokens(''$.[?(@.value!=null)]'').ToList()", span="1101-1101", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsAndNonPrimativeValues()", file="JPathExecuteTests.cs"];
m3_562 [label="result = a.SelectTokens(''$.[?(@.value!=123)]'').ToList()", span="1104-1104", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsAndNonPrimativeValues()", file="JPathExecuteTests.cs"];
m3_564 [label="result = a.SelectTokens(''$.[?(@.value)]'').ToList()", span="1107-1107", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsAndNonPrimativeValues()", file="JPathExecuteTests.cs"];
m3_557 [label="Assert.AreEqual(4, result.Count)", span="1096-1096", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsAndNonPrimativeValues()", file="JPathExecuteTests.cs"];
m3_559 [label="Assert.AreEqual(4, result.Count)", span="1099-1099", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsAndNonPrimativeValues()", file="JPathExecuteTests.cs"];
m3_561 [label="Assert.AreEqual(4, result.Count)", span="1102-1102", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsAndNonPrimativeValues()", file="JPathExecuteTests.cs"];
m3_563 [label="Assert.AreEqual(3, result.Count)", span="1105-1105", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsAndNonPrimativeValues()", file="JPathExecuteTests.cs"];
m3_565 [label="Assert.AreEqual(4, result.Count)", span="1108-1108", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsAndNonPrimativeValues()", file="JPathExecuteTests.cs"];
m3_566 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsAndNonPrimativeValues()", span="1065-1065", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsAndNonPrimativeValues()", file="JPathExecuteTests.cs"];
m3_175 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateConstructorOutOfBoundsIndxer()", span="391-391", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateConstructorOutOfBoundsIndxer()", file="JPathExecuteTests.cs"];
m3_176 [label="JConstructor c = new JConstructor(''Blah'')", span="393-393", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateConstructorOutOfBoundsIndxer()", file="JPathExecuteTests.cs"];
m3_177 [label="Assert.IsNull(c.SelectToken(''[1]''))", span="395-395", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateConstructorOutOfBoundsIndxer()", file="JPathExecuteTests.cs"];
m3_178 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateConstructorOutOfBoundsIndxer()", span="391-391", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateConstructorOutOfBoundsIndxer()", file="JPathExecuteTests.cs"];
m3_113 [label="Entry Unk.IsNull", span="", cluster="Unk.IsNull", file="JPathExecuteTests.cs"];
m3_404 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.MultipleQueries()", span="698-698", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.MultipleQueries()", file="JPathExecuteTests.cs"];
m3_405 [label="JArray a = new JArray(1, 2, 3, 4, 5, 6, 7, 8, 9)", span="700-700", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.MultipleQueries()", file="JPathExecuteTests.cs"];
m3_406 [label="IList<JToken> t = a.SelectTokens(''[?(@ <> 1)][?(@ <> 4)][?(@ < 7)]'').ToList()", span="705-705", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.MultipleQueries()", file="JPathExecuteTests.cs"];
m3_407 [label="Assert.IsNotNull(t)", span="706-706", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.MultipleQueries()", file="JPathExecuteTests.cs"];
m3_408 [label="Assert.AreEqual(0, t.Count)", span="707-707", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.MultipleQueries()", file="JPathExecuteTests.cs"];
m3_409 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.MultipleQueries()", span="698-698", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.MultipleQueries()", file="JPathExecuteTests.cs"];
m3_542 [label="Entry Unk.ToList", span="", cluster="Unk.ToList", file="JPathExecuteTests.cs"];
m3_328 [label="Entry Unk.IsTrue", span="", cluster="Unk.IsTrue", file="JPathExecuteTests.cs"];
m3_9 [label="Entry Newtonsoft.Json.Linq.JToken.SelectTokens(string)", span="2339-2339", cluster="Newtonsoft.Json.Linq.JToken.SelectTokens(string)", file="JPathExecuteTests.cs"];
m3_8 [label="Entry Newtonsoft.Json.Linq.JObject.Parse(string)", span="404-404", cluster="Newtonsoft.Json.Linq.JObject.Parse(string)", file="JPathExecuteTests.cs"];
m3_119 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateIndexerOnObjectWithError()", span="323-323", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateIndexerOnObjectWithError()", file="JPathExecuteTests.cs"];
m3_120 [label="JObject o = new JObject(\r\n                new JProperty(''Blah'', 1))", span="325-326", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateIndexerOnObjectWithError()", file="JPathExecuteTests.cs"];
m3_121 [label="ExceptionAssert.Throws<JsonException>(() => { o.SelectToken(''[1]'', true); }, @''Index 1 not valid on JObject.'')", span="328-328", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateIndexerOnObjectWithError()", file="JPathExecuteTests.cs"];
m3_122 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateIndexerOnObjectWithError()", span="323-323", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateIndexerOnObjectWithError()", file="JPathExecuteTests.cs"];
m3_454 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.PathWithConstructor()", span="801-801", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.PathWithConstructor()", file="JPathExecuteTests.cs"];
m3_455 [label="JArray a = JArray.Parse(@''[\r\n  {\r\n    ''''Property1'''': [\r\n      1,\r\n      [\r\n        [\r\n          []\r\n        ]\r\n      ]\r\n    ]\r\n  },\r\n  {\r\n    ''''Property2'''': new Constructor1(\r\n      null,\r\n      [\r\n        1\r\n      ]\r\n    )\r\n  }\r\n]'')", span="803-822", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.PathWithConstructor()", file="JPathExecuteTests.cs"];
m3_456 [label="JValue v = (JValue)a.SelectToken(''[1].Property2[1][0]'')", span="824-824", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.PathWithConstructor()", file="JPathExecuteTests.cs"];
m3_457 [label="Assert.AreEqual(1L, v.Value)", span="825-825", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.PathWithConstructor()", file="JPathExecuteTests.cs"];
m3_458 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.PathWithConstructor()", span="801-801", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.PathWithConstructor()", file="JPathExecuteTests.cs"];
m3_343 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", span="602-602", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="JPathExecuteTests.cs"];
m3_344 [label="JObject o1 = new JObject { { ''Name'', 1 } }", span="604-604", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="JPathExecuteTests.cs"];
m3_345 [label="JObject o2 = new JObject { { ''Name'', 2 } }", span="605-605", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="JPathExecuteTests.cs"];
m3_347 [label="JArray a = new JArray(o1, o2, o3)", span="607-607", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="JPathExecuteTests.cs"];
m3_352 [label="Assert.IsTrue(JToken.DeepEquals(o1, t[1]))", span="614-614", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="JPathExecuteTests.cs"];
m3_346 [label="JObject o3 = new JObject { { ''Name'', new JObject { { ''Name'', new JArray(3) } } } }", span="606-606", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="JPathExecuteTests.cs"];
m3_354 [label="Assert.IsTrue(JToken.DeepEquals(o2, t[3]))", span="616-616", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="JPathExecuteTests.cs"];
m3_356 [label="Assert.IsTrue(JToken.DeepEquals(o3, t[5]))", span="618-618", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="JPathExecuteTests.cs"];
m3_348 [label="IList<JToken> t = a.SelectTokens(''$..*'').ToList()", span="609-609", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="JPathExecuteTests.cs"];
m3_351 [label="Assert.IsTrue(JToken.DeepEquals(a, t[0]))", span="613-613", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="JPathExecuteTests.cs"];
m3_349 [label="Assert.IsNotNull(t)", span="610-610", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="JPathExecuteTests.cs"];
m3_350 [label="Assert.AreEqual(9, t.Count)", span="611-611", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="JPathExecuteTests.cs"];
m3_353 [label="Assert.AreEqual(1, (int)t[2])", span="615-615", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="JPathExecuteTests.cs"];
m3_355 [label="Assert.AreEqual(2, (int)t[4])", span="617-617", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="JPathExecuteTests.cs"];
m3_357 [label="Assert.IsTrue(JToken.DeepEquals(new JObject { { ''Name'', new JArray(3) } }, t[6]))", span="619-619", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="JPathExecuteTests.cs"];
m3_358 [label="Assert.IsTrue(JToken.DeepEquals(new JArray(3), t[7]))", span="620-620", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="JPathExecuteTests.cs"];
m3_359 [label="Assert.AreEqual(3, (int)t[8])", span="621-621", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="JPathExecuteTests.cs"];
m3_360 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", span="602-602", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScanNestResults()", file="JPathExecuteTests.cs"];
m3_389 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsQuery()", span="673-673", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsQuery()", file="JPathExecuteTests.cs"];
m3_390 [label="JArray a = new JArray(\r\n                new JArray(new JObject(new JProperty(''hi'', ''ho''))),\r\n                new JArray(new JObject(new JProperty(''hi'', ''ha''))))", span="675-677", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsQuery()", file="JPathExecuteTests.cs"];
m3_391 [label="IList<JToken> t = a.SelectTokens(''[ ?( @..hi <> 'ha' ) ]'').ToList()", span="679-679", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsQuery()", file="JPathExecuteTests.cs"];
m3_392 [label="Assert.IsNotNull(t)", span="680-680", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsQuery()", file="JPathExecuteTests.cs"];
m3_393 [label="Assert.AreEqual(1, t.Count)", span="681-681", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsQuery()", file="JPathExecuteTests.cs"];
m3_394 [label="Assert.IsTrue(JToken.DeepEquals(new JArray(new JObject(new JProperty(''hi'', ''ho''))), t[0]))", span="682-682", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsQuery()", file="JPathExecuteTests.cs"];
m3_395 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsQuery()", span="673-673", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NotEqualsQuery()", file="JPathExecuteTests.cs"];
m3_543 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Sum<TSource>(System.Func<TSource, decimal>)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Sum<TSource>(System.Func<TSource, decimal>)", file="JPathExecuteTests.cs"];
m3_370 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateLastSingleCharacterProperty()", span="640-640", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateLastSingleCharacterProperty()", file="JPathExecuteTests.cs"];
m3_371 [label="JObject o2 = JObject.Parse(''{'People':[{'N':'Jeff'}]}'')", span="642-642", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateLastSingleCharacterProperty()", file="JPathExecuteTests.cs"];
m3_372 [label="string a2 = (string)o2.SelectToken(''People[0].N'')", span="643-643", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateLastSingleCharacterProperty()", file="JPathExecuteTests.cs"];
m3_373 [label="Assert.AreEqual(''Jeff'', a2)", span="645-645", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateLastSingleCharacterProperty()", file="JPathExecuteTests.cs"];
m3_374 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateLastSingleCharacterProperty()", span="640-640", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateLastSingleCharacterProperty()", file="JPathExecuteTests.cs"];
m3_205 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySliceWithError()", span="435-435", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySliceWithError()", file="JPathExecuteTests.cs"];
m3_206 [label="JArray a = new JArray(1, 2, 3, 4, 5)", span="437-437", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySliceWithError()", file="JPathExecuteTests.cs"];
m3_207 [label="ExceptionAssert.Throws<JsonException>(() => { a.SelectToken(''[99:]'', true); }, ''Array slice of 99 to * returned no results.'')", span="439-439", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySliceWithError()", file="JPathExecuteTests.cs"];
m3_208 [label="ExceptionAssert.Throws<JsonException>(() => { a.SelectToken(''[1:-19]'', true); }, ''Array slice of 1 to -19 returned no results.'')", span="441-441", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySliceWithError()", file="JPathExecuteTests.cs"];
m3_209 [label="ExceptionAssert.Throws<JsonException>(() => { a.SelectToken(''[:-19]'', true); }, ''Array slice of * to -19 returned no results.'')", span="443-443", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySliceWithError()", file="JPathExecuteTests.cs"];
m3_210 [label="a = new JArray()", span="445-445", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySliceWithError()", file="JPathExecuteTests.cs"];
m3_211 [label="ExceptionAssert.Throws<JsonException>(() => { a.SelectToken(''[:]'', true); }, ''Array slice of * to * returned no results.'')", span="447-447", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySliceWithError()", file="JPathExecuteTests.cs"];
m3_212 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySliceWithError()", span="435-435", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySliceWithError()", file="JPathExecuteTests.cs"];
m3_494 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QueryAgainstNonStringValues()", span="948-948", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QueryAgainstNonStringValues()", file="JPathExecuteTests.cs"];
m3_495 [label="IList<object> values = new List<object>\r\n            {\r\n                ''ff2dc672-6e15-4aa2-afb0-18f4f69596ad'',\r\n                new Guid(''ff2dc672-6e15-4aa2-afb0-18f4f69596ad''),\r\n                ''http://localhost'',\r\n                new Uri(''http://localhost''),\r\n                ''2000-12-05T05:07:59Z'',\r\n                new DateTime(2000, 12, 5, 5, 7, 59, DateTimeKind.Utc),\r\n#if !NET20\r\n                ''2000-12-05T05:07:59-10:00'',\r\n                new DateTimeOffset(2000, 12, 5, 5, 7, 59, -TimeSpan.FromHours(10)),\r\n#endif\r\n                ''SGVsbG8gd29ybGQ='',\r\n                Encoding.UTF8.GetBytes(''Hello world''),\r\n                ''365.23:59:59'',\r\n                new TimeSpan(365, 23, 59, 59)\r\n            }", span="950-966", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QueryAgainstNonStringValues()", file="JPathExecuteTests.cs"];
m3_496 [label="JObject o = new JObject(\r\n                new JProperty(''prop'',\r\n                    new JArray(\r\n                        values.Select(v => new JObject(new JProperty(''childProp'', v)))\r\n                        )\r\n                    )\r\n                )", span="968-974", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QueryAgainstNonStringValues()", file="JPathExecuteTests.cs"];
m3_497 [label="IList<JToken> t = o.SelectTokens(''$.prop[?(@.childProp =='ff2dc672-6e15-4aa2-afb0-18f4f69596ad')]'').ToList()", span="976-976", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QueryAgainstNonStringValues()", file="JPathExecuteTests.cs"];
m3_499 [label="t = o.SelectTokens(''$.prop[?(@.childProp =='http://localhost')]'').ToList()", span="979-979", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QueryAgainstNonStringValues()", file="JPathExecuteTests.cs"];
m3_501 [label="t = o.SelectTokens(''$.prop[?(@.childProp =='2000-12-05T05:07:59Z')]'').ToList()", span="982-982", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QueryAgainstNonStringValues()", file="JPathExecuteTests.cs"];
m3_503 [label="t = o.SelectTokens(''$.prop[?(@.childProp =='2000-12-05T05:07:59-10:00')]'').ToList()", span="986-986", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QueryAgainstNonStringValues()", file="JPathExecuteTests.cs"];
m3_505 [label="t = o.SelectTokens(''$.prop[?(@.childProp =='SGVsbG8gd29ybGQ=')]'').ToList()", span="990-990", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QueryAgainstNonStringValues()", file="JPathExecuteTests.cs"];
m3_507 [label="t = o.SelectTokens(''$.prop[?(@.childProp =='365.23:59:59')]'').ToList()", span="993-993", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QueryAgainstNonStringValues()", file="JPathExecuteTests.cs"];
m3_498 [label="Assert.AreEqual(2, t.Count)", span="977-977", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QueryAgainstNonStringValues()", file="JPathExecuteTests.cs"];
m3_500 [label="Assert.AreEqual(2, t.Count)", span="980-980", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QueryAgainstNonStringValues()", file="JPathExecuteTests.cs"];
m3_502 [label="Assert.AreEqual(2, t.Count)", span="983-983", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QueryAgainstNonStringValues()", file="JPathExecuteTests.cs"];
m3_504 [label="Assert.AreEqual(2, t.Count)", span="987-987", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QueryAgainstNonStringValues()", file="JPathExecuteTests.cs"];
m3_506 [label="Assert.AreEqual(2, t.Count)", span="991-991", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QueryAgainstNonStringValues()", file="JPathExecuteTests.cs"];
m3_508 [label="Assert.AreEqual(2, t.Count)", span="994-994", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QueryAgainstNonStringValues()", file="JPathExecuteTests.cs"];
m3_509 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QueryAgainstNonStringValues()", span="948-948", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QueryAgainstNonStringValues()", file="JPathExecuteTests.cs"];
m3_146 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMultipleResultsError()", span="359-359", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMultipleResultsError()", file="JPathExecuteTests.cs"];
m3_147 [label="JArray a = new JArray(1, 2, 3, 4, 5)", span="361-361", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMultipleResultsError()", file="JPathExecuteTests.cs"];
m3_148 [label="ExceptionAssert.Throws<JsonException>(() => { a.SelectToken(''[0, 1]''); }, @''Path returned multiple tokens.'')", span="363-363", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMultipleResultsError()", file="JPathExecuteTests.cs"];
m3_149 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMultipleResultsError()", span="359-359", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMultipleResultsError()", file="JPathExecuteTests.cs"];
m3_459 [label="Entry Newtonsoft.Json.Linq.JArray.Parse(string)", span="157-157", cluster="Newtonsoft.Json.Linq.JArray.Parse(string)", file="JPathExecuteTests.cs"];
m3_100 [label="Entry Newtonsoft.Json.Linq.JObject.JObject(params object[])", span="104-104", cluster="Newtonsoft.Json.Linq.JObject.JObject(params object[])", file="JPathExecuteTests.cs"];
m3_375 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ExistsQuery()", span="649-649", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ExistsQuery()", file="JPathExecuteTests.cs"];
m3_376 [label="JArray a = new JArray(new JObject(new JProperty(''hi'', ''ho'')), new JObject(new JProperty(''hi2'', ''ha'')))", span="651-651", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ExistsQuery()", file="JPathExecuteTests.cs"];
m3_377 [label="IList<JToken> t = a.SelectTokens(''[ ?( @.hi ) ]'').ToList()", span="653-653", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ExistsQuery()", file="JPathExecuteTests.cs"];
m3_378 [label="Assert.IsNotNull(t)", span="654-654", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ExistsQuery()", file="JPathExecuteTests.cs"];
m3_379 [label="Assert.AreEqual(1, t.Count)", span="655-655", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ExistsQuery()", file="JPathExecuteTests.cs"];
m3_380 [label="Assert.IsTrue(JToken.DeepEquals(new JObject(new JProperty(''hi'', ''ho'')), t[0]))", span="656-656", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ExistsQuery()", file="JPathExecuteTests.cs"];
m3_381 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ExistsQuery()", span="649-649", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ExistsQuery()", file="JPathExecuteTests.cs"];
m3_68 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWhitespaceString()", span="235-235", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWhitespaceString()", file="JPathExecuteTests.cs"];
m3_69 [label="JObject o = new JObject(\r\n                new JProperty(''Blah'', 1))", span="237-238", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWhitespaceString()", file="JPathExecuteTests.cs"];
m3_70 [label="JToken t = o.SelectToken('' '')", span="240-240", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWhitespaceString()", file="JPathExecuteTests.cs"];
m3_71 [label="Assert.AreEqual(o, t)", span="241-241", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWhitespaceString()", file="JPathExecuteTests.cs"];
m3_72 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWhitespaceString()", span="235-235", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWhitespaceString()", file="JPathExecuteTests.cs"];
m3_523 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", span="998-998", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="JPathExecuteTests.cs"];
m3_524 [label="JObject o = JObject.Parse(@''{\r\n        ''''Stores'''': [\r\n          ''''Lambton Quay'''',\r\n          ''''Willis Street''''\r\n        ],\r\n        ''''Manufacturers'''': [\r\n          {\r\n            ''''Name'''': ''''Acme Co'''',\r\n            ''''Products'''': [\r\n              {\r\n                ''''Name'''': ''''Anvil'''',\r\n                ''''Price'''': 50\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            ''''Name'''': ''''Contoso'''',\r\n            ''''Products'''': [\r\n              {\r\n                ''''Name'''': ''''Elbow Grease'''',\r\n                ''''Price'''': 99.95\r\n              },\r\n              {\r\n                ''''Name'''': ''''Headlight Fluid'''',\r\n                ''''Price'''': 4\r\n              }\r\n            ]\r\n          }\r\n        ]\r\n      }'')", span="1000-1029", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="JPathExecuteTests.cs"];
m3_525 [label="string name = (string)o.SelectToken(''Manufacturers[0].Name'')", span="1031-1031", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="JPathExecuteTests.cs"];
m3_526 [label="decimal productPrice = (decimal)o.SelectToken(''Manufacturers[0].Products[0].Price'')", span="1034-1034", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="JPathExecuteTests.cs"];
m3_527 [label="string productName = (string)o.SelectToken(''Manufacturers[1].Products[0].Name'')", span="1037-1037", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="JPathExecuteTests.cs"];
m3_531 [label="IList<string> storeNames = o.SelectToken(''Stores'').Select(s => (string)s).ToList()", span="1044-1044", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="JPathExecuteTests.cs"];
m3_532 [label="IList<string> firstProductNames = o[''Manufacturers''].Select(m => (string)m.SelectToken(''Products[1].Name'')).ToList()", span="1048-1048", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="JPathExecuteTests.cs"];
m3_533 [label="decimal totalPrice = o[''Manufacturers''].Sum(m => (decimal)m.SelectToken(''Products[0].Price''))", span="1052-1052", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="JPathExecuteTests.cs"];
m3_528 [label="Assert.AreEqual(''Acme Co'', name)", span="1040-1040", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="JPathExecuteTests.cs"];
m3_529 [label="Assert.AreEqual(50m, productPrice)", span="1041-1041", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="JPathExecuteTests.cs"];
m3_530 [label="Assert.AreEqual(''Elbow Grease'', productName)", span="1042-1042", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="JPathExecuteTests.cs"];
m3_534 [label="Assert.AreEqual(2, storeNames.Count)", span="1055-1055", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="JPathExecuteTests.cs"];
m3_535 [label="Assert.AreEqual(''Lambton Quay'', storeNames[0])", span="1056-1056", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="JPathExecuteTests.cs"];
m3_536 [label="Assert.AreEqual(''Willis Street'', storeNames[1])", span="1057-1057", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="JPathExecuteTests.cs"];
m3_537 [label="Assert.AreEqual(2, firstProductNames.Count)", span="1058-1058", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="JPathExecuteTests.cs"];
m3_538 [label="Assert.AreEqual(null, firstProductNames[0])", span="1059-1059", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="JPathExecuteTests.cs"];
m3_539 [label="Assert.AreEqual(''Headlight Fluid'', firstProductNames[1])", span="1060-1060", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="JPathExecuteTests.cs"];
m3_540 [label="Assert.AreEqual(149.95m, totalPrice)", span="1061-1061", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="JPathExecuteTests.cs"];
m3_541 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", span="998-998", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Example()", file="JPathExecuteTests.cs"];
m3_114 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateIndexerOnObject()", span="313-313", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateIndexerOnObject()", file="JPathExecuteTests.cs"];
m3_115 [label="JObject o = new JObject(\r\n                new JProperty(''Blah'', 1))", span="315-316", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateIndexerOnObject()", file="JPathExecuteTests.cs"];
m3_116 [label="JToken t = o.SelectToken(''[1]'')", span="318-318", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateIndexerOnObject()", file="JPathExecuteTests.cs"];
m3_117 [label="Assert.IsNull(t)", span="319-319", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateIndexerOnObject()", file="JPathExecuteTests.cs"];
m3_118 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateIndexerOnObject()", span="313-313", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateIndexerOnObject()", file="JPathExecuteTests.cs"];
m3_53 [label="Entry Newtonsoft.Json.Linq.JObject.JObject(object)", span="113-113", cluster="Newtonsoft.Json.Linq.JObject.JObject(object)", file="JPathExecuteTests.cs"];
m3_303 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScan()", span="554-554", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScan()", file="JPathExecuteTests.cs"];
m3_304 [label="JObject o1 = new JObject { { ''Name'', 1 } }", span="556-556", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScan()", file="JPathExecuteTests.cs"];
m3_305 [label="JObject o2 = new JObject { { ''Name'', 2 } }", span="557-557", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScan()", file="JPathExecuteTests.cs"];
m3_306 [label="JArray a = new JArray(o1, o2)", span="558-558", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScan()", file="JPathExecuteTests.cs"];
m3_307 [label="IList<JToken> t = a.SelectTokens(''$..Name'').ToList()", span="560-560", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScan()", file="JPathExecuteTests.cs"];
m3_308 [label="Assert.IsNotNull(t)", span="561-561", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScan()", file="JPathExecuteTests.cs"];
m3_309 [label="Assert.AreEqual(2, t.Count)", span="562-562", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScan()", file="JPathExecuteTests.cs"];
m3_310 [label="Assert.AreEqual(1, (int)t[0])", span="563-563", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScan()", file="JPathExecuteTests.cs"];
m3_311 [label="Assert.AreEqual(2, (int)t[1])", span="564-564", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScan()", file="JPathExecuteTests.cs"];
m3_312 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScan()", span="554-554", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScan()", file="JPathExecuteTests.cs"];
m3_245 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", span="479-479", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m3_246 [label="JArray a = new JArray(1, 2, 3, 4, 5, 6, 7, 8, 9)", span="481-481", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m3_247 [label="IList<JToken> t = null", span="482-482", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m3_248 [label="t = a.SelectTokens(''[-3:]'').ToList()", span="484-484", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m3_253 [label="t = a.SelectTokens(''[-1:-2:-1]'').ToList()", span="490-490", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m3_256 [label="t = a.SelectTokens(''[-2:-1]'').ToList()", span="494-494", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m3_259 [label="t = a.SelectTokens(''[1:1]'').ToList()", span="498-498", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m3_261 [label="t = a.SelectTokens(''[1:2]'').ToList()", span="501-501", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m3_264 [label="t = a.SelectTokens(''[::-1]'').ToList()", span="505-505", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m3_275 [label="t = a.SelectTokens(''[::-2]'').ToList()", span="517-517", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m3_249 [label="Assert.AreEqual(3, t.Count)", span="485-485", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m3_250 [label="Assert.AreEqual(7, (int)t[0])", span="486-486", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m3_251 [label="Assert.AreEqual(8, (int)t[1])", span="487-487", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m3_252 [label="Assert.AreEqual(9, (int)t[2])", span="488-488", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m3_254 [label="Assert.AreEqual(1, t.Count)", span="491-491", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m3_255 [label="Assert.AreEqual(9, (int)t[0])", span="492-492", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m3_257 [label="Assert.AreEqual(1, t.Count)", span="495-495", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m3_258 [label="Assert.AreEqual(8, (int)t[0])", span="496-496", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m3_260 [label="Assert.AreEqual(0, t.Count)", span="499-499", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m3_262 [label="Assert.AreEqual(1, t.Count)", span="502-502", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m3_263 [label="Assert.AreEqual(2, (int)t[0])", span="503-503", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m3_265 [label="Assert.AreEqual(9, t.Count)", span="506-506", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m3_266 [label="Assert.AreEqual(9, (int)t[0])", span="507-507", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m3_267 [label="Assert.AreEqual(8, (int)t[1])", span="508-508", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m3_268 [label="Assert.AreEqual(7, (int)t[2])", span="509-509", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m3_269 [label="Assert.AreEqual(6, (int)t[3])", span="510-510", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m3_270 [label="Assert.AreEqual(5, (int)t[4])", span="511-511", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m3_271 [label="Assert.AreEqual(4, (int)t[5])", span="512-512", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m3_272 [label="Assert.AreEqual(3, (int)t[6])", span="513-513", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m3_273 [label="Assert.AreEqual(2, (int)t[7])", span="514-514", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m3_274 [label="Assert.AreEqual(1, (int)t[8])", span="515-515", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m3_276 [label="Assert.AreEqual(5, t.Count)", span="518-518", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m3_277 [label="Assert.AreEqual(9, (int)t[0])", span="519-519", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m3_278 [label="Assert.AreEqual(7, (int)t[1])", span="520-520", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m3_279 [label="Assert.AreEqual(5, (int)t[2])", span="521-521", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m3_280 [label="Assert.AreEqual(3, (int)t[3])", span="522-522", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m3_281 [label="Assert.AreEqual(1, (int)t[4])", span="523-523", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m3_282 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", span="479-479", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArraySlice()", file="JPathExecuteTests.cs"];
m3_512 [label="Entry System.Uri.Uri(string)", span="0-0", cluster="System.Uri.Uri(string)", file="JPathExecuteTests.cs"];
m3_92 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardProperty()", span="277-277", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardProperty()", file="JPathExecuteTests.cs"];
m3_93 [label="JObject o = new JObject(\r\n                new JProperty(''Blah'', 1),\r\n                new JProperty(''Blah2'', 2))", span="279-281", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardProperty()", file="JPathExecuteTests.cs"];
m3_94 [label="IList<JToken> t = o.SelectTokens(''$.*'').ToList()", span="283-283", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardProperty()", file="JPathExecuteTests.cs"];
m3_95 [label="Assert.IsNotNull(t)", span="284-284", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardProperty()", file="JPathExecuteTests.cs"];
m3_96 [label="Assert.AreEqual(2, t.Count)", span="285-285", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardProperty()", file="JPathExecuteTests.cs"];
m3_97 [label="Assert.AreEqual(1, (int)t[0])", span="286-286", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardProperty()", file="JPathExecuteTests.cs"];
m3_98 [label="Assert.AreEqual(2, (int)t[1])", span="287-287", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardProperty()", file="JPathExecuteTests.cs"];
m3_99 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardProperty()", span="277-277", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardProperty()", file="JPathExecuteTests.cs"];
m3_329 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScanNestResults()", span="585-585", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScanNestResults()", file="JPathExecuteTests.cs"];
m3_330 [label="JObject o1 = new JObject { { ''Name'', 1 } }", span="587-587", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScanNestResults()", file="JPathExecuteTests.cs"];
m3_331 [label="JObject o2 = new JObject { { ''Name'', 2 } }", span="588-588", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScanNestResults()", file="JPathExecuteTests.cs"];
m3_333 [label="JArray a = new JArray(o1, o2, o3)", span="590-590", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScanNestResults()", file="JPathExecuteTests.cs"];
m3_332 [label="JObject o3 = new JObject { { ''Name'', new JObject { { ''Name'', new JArray(3) } } } }", span="589-589", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScanNestResults()", file="JPathExecuteTests.cs"];
m3_334 [label="IList<JToken> t = a.SelectTokens(''$..Name'').ToList()", span="592-592", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScanNestResults()", file="JPathExecuteTests.cs"];
m3_335 [label="Assert.IsNotNull(t)", span="593-593", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScanNestResults()", file="JPathExecuteTests.cs"];
m3_336 [label="Assert.AreEqual(4, t.Count)", span="594-594", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScanNestResults()", file="JPathExecuteTests.cs"];
m3_337 [label="Assert.AreEqual(1, (int)t[0])", span="595-595", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScanNestResults()", file="JPathExecuteTests.cs"];
m3_338 [label="Assert.AreEqual(2, (int)t[1])", span="596-596", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScanNestResults()", file="JPathExecuteTests.cs"];
m3_339 [label="Assert.IsTrue(JToken.DeepEquals(new JObject { { ''Name'', new JArray(3) } }, t[2]))", span="597-597", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScanNestResults()", file="JPathExecuteTests.cs"];
m3_340 [label="Assert.IsTrue(JToken.DeepEquals(new JArray(3), t[3]))", span="598-598", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScanNestResults()", file="JPathExecuteTests.cs"];
m3_341 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScanNestResults()", span="585-585", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateScanNestResults()", file="JPathExecuteTests.cs"];
m3_25 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ParseWithEmptyArrayContent()", span="129-129", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ParseWithEmptyArrayContent()", file="JPathExecuteTests.cs"];
m3_26 [label="var json = @''{\r\n    'controls': [\r\n        {\r\n            'messages': {\r\n                'addSuggestion': {\r\n                    'en-US': 'Add'\r\n                }\r\n            }\r\n        },\r\n        {\r\n            'header': {\r\n                'controls': []\r\n            },\r\n            'controls': [\r\n                {\r\n                    'controls': [\r\n                        {\r\n                            'defaultCaption': {\r\n                                'en-US': 'Sort by'\r\n                            },\r\n                            'sortOptions': [\r\n                                {\r\n                                    'label': {\r\n                                        'en-US': 'Name'\r\n                                    }\r\n                                }\r\n                            ]\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}''", span="131-164", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ParseWithEmptyArrayContent()", file="JPathExecuteTests.cs"];
m3_27 [label="JObject jToken = JObject.Parse(json)", span="165-165", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ParseWithEmptyArrayContent()", file="JPathExecuteTests.cs"];
m3_28 [label="IList<JToken> tokens = jToken.SelectTokens(''$..en-US'').ToList()", span="166-166", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ParseWithEmptyArrayContent()", file="JPathExecuteTests.cs"];
m3_29 [label="Assert.AreEqual(3, tokens.Count)", span="168-168", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ParseWithEmptyArrayContent()", file="JPathExecuteTests.cs"];
m3_30 [label="Assert.AreEqual(''Add'', (string)tokens[0])", span="169-169", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ParseWithEmptyArrayContent()", file="JPathExecuteTests.cs"];
m3_31 [label="Assert.AreEqual(''Sort by'', (string)tokens[1])", span="170-170", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ParseWithEmptyArrayContent()", file="JPathExecuteTests.cs"];
m3_32 [label="Assert.AreEqual(''Name'', (string)tokens[2])", span="171-171", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ParseWithEmptyArrayContent()", file="JPathExecuteTests.cs"];
m3_33 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ParseWithEmptyArrayContent()", span="129-129", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ParseWithEmptyArrayContent()", file="JPathExecuteTests.cs"];
m3_11 [label="Entry Unk.AreEqual", span="", cluster="Unk.AreEqual", file="JPathExecuteTests.cs"];
m3_12 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanMultipleQuoted()", span="90-90", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanMultipleQuoted()", color=green, community=1, file="JPathExecuteTests.cs"];
m3_13 [label="string json = @''{\r\n    ''''Node1'''': {\r\n        ''''Child1'''': {\r\n            ''''Name'''': ''''IsMe'''',\r\n            ''''TargetNode'''': {\r\n                ''''Prop1'''': ''''Val1'''',\r\n                ''''Prop2'''': ''''Val2''''\r\n            }\r\n        },\r\n        ''''My.Child.Node'''': {\r\n            ''''TargetNode'''': {\r\n                ''''Prop1'''': ''''Val3'''',\r\n                ''''Prop2'''': ''''Val4''''\r\n            }\r\n        }\r\n    },\r\n    ''''Node2'''': {\r\n        ''''TargetNode'''': {\r\n            ''''Prop1'''': ''''Val5'''',\r\n            ''''Prop2'''': ''''Val6''''\r\n        }\r\n    }\r\n}''", span="92-114", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanMultipleQuoted()", color=green, community=0, file="JPathExecuteTests.cs"];
m3_14 [label="JObject models = JObject.Parse(json)", span="116-116", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanMultipleQuoted()", color=green, community=0, file="JPathExecuteTests.cs"];
m3_16 [label="Assert.AreEqual(''Val1'', (string)results[0])", span="119-119", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanMultipleQuoted()", color=green, community=0, file="JPathExecuteTests.cs"];
m3_17 [label="Assert.AreEqual(''Val2'', (string)results[1])", span="120-120", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanMultipleQuoted()", color=green, community=0, file="JPathExecuteTests.cs"];
m3_15 [label="var results = models.SelectTokens(''$..['My.Child.Node','Prop1','Prop2']'').ToList()", span="118-118", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanMultipleQuoted()", color=green, community=0, file="JPathExecuteTests.cs"];
m3_18 [label="Assert.AreEqual(JTokenType.Object, results[2].Type)", span="121-121", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanMultipleQuoted()", file="JPathExecuteTests.cs"];
m3_313 [label="Entry Newtonsoft.Json.Linq.JObject.JObject()", span="87-87", cluster="Newtonsoft.Json.Linq.JObject.JObject()", file="JPathExecuteTests.cs"];
m3_19 [label="Assert.AreEqual(''Val3'', (string)results[3])", span="122-122", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanMultipleQuoted()", file="JPathExecuteTests.cs"];
m3_20 [label="Assert.AreEqual(''Val4'', (string)results[4])", span="123-123", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanMultipleQuoted()", color=green, community=1, file="JPathExecuteTests.cs"];
m3_21 [label="Assert.AreEqual(''Val5'', (string)results[5])", span="124-124", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanMultipleQuoted()", color=green, community=0, file="JPathExecuteTests.cs"];
m3_22 [label="Assert.AreEqual(''Val6'', (string)results[6])", span="125-125", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanMultipleQuoted()", color=green, community=0, file="JPathExecuteTests.cs"];
m3_23 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanMultipleQuoted()", span="90-90", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanMultipleQuoted()", color=green, community=0, file="JPathExecuteTests.cs"];
m3_24 [label="Entry System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", file="JPathExecuteTests.cs"];
m3_10 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", file="JPathExecuteTests.cs"];
m3_41 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyWithRequired()", span="191-191", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyWithRequired()", file="JPathExecuteTests.cs"];
m3_42 [label="string json = ''{\''bookId\'':\''1000\''}''", span="193-193", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyWithRequired()", file="JPathExecuteTests.cs"];
m3_43 [label="JObject o = JObject.Parse(json)", span="194-194", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyWithRequired()", file="JPathExecuteTests.cs"];
m3_44 [label="string bookId = (string)o.SelectToken(''bookId'', true)", span="196-196", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyWithRequired()", file="JPathExecuteTests.cs"];
m3_45 [label="Assert.AreEqual(''1000'', bookId)", span="198-198", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyWithRequired()", file="JPathExecuteTests.cs"];
m3_46 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyWithRequired()", span="191-191", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyWithRequired()", file="JPathExecuteTests.cs"];
m3_231 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayOutOfBoundsIndxerWithError()", span="460-460", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayOutOfBoundsIndxerWithError()", file="JPathExecuteTests.cs"];
m3_232 [label="JArray a = new JArray(1, 2, 3, 4, 5)", span="462-462", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayOutOfBoundsIndxerWithError()", file="JPathExecuteTests.cs"];
m3_233 [label="ExceptionAssert.Throws<JsonException>(() => { a.SelectToken(''[1000].Ha'', true); }, ''Index 1000 outside the bounds of JArray.'')", span="464-464", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayOutOfBoundsIndxerWithError()", file="JPathExecuteTests.cs"];
m3_234 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayOutOfBoundsIndxerWithError()", span="460-460", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayOutOfBoundsIndxerWithError()", file="JPathExecuteTests.cs"];
m3_226 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateOutOfBoundsIndxer()", span="451-451", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateOutOfBoundsIndxer()", file="JPathExecuteTests.cs"];
m3_227 [label="JArray a = new JArray(1, 2, 3, 4, 5)", span="453-453", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateOutOfBoundsIndxer()", file="JPathExecuteTests.cs"];
m3_228 [label="JToken t = a.SelectToken(''[1000].Ha'')", span="455-455", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateOutOfBoundsIndxer()", file="JPathExecuteTests.cs"];
m3_229 [label="Assert.IsNull(t)", span="456-456", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateOutOfBoundsIndxer()", file="JPathExecuteTests.cs"];
m3_230 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateOutOfBoundsIndxer()", span="451-451", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateOutOfBoundsIndxer()", file="JPathExecuteTests.cs"];
m3_518 [label="Entry JArray.cstr", span="", cluster="JArray.cstr", file="JPathExecuteTests.cs"];
m3_101 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QuoteName()", span="291-291", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QuoteName()", file="JPathExecuteTests.cs"];
m3_102 [label="JObject o = new JObject(\r\n                new JProperty(''Blah'', 1))", span="293-294", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QuoteName()", file="JPathExecuteTests.cs"];
m3_103 [label="JToken t = o.SelectToken(''['Blah']'')", span="296-296", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QuoteName()", file="JPathExecuteTests.cs"];
m3_104 [label="Assert.IsNotNull(t)", span="297-297", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QuoteName()", file="JPathExecuteTests.cs"];
m3_105 [label="Assert.AreEqual(JTokenType.Integer, t.Type)", span="298-298", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QuoteName()", file="JPathExecuteTests.cs"];
m3_106 [label="Assert.AreEqual(1, (int)t)", span="299-299", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QuoteName()", file="JPathExecuteTests.cs"];
m3_107 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QuoteName()", span="291-291", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.QuoteName()", file="JPathExecuteTests.cs"];
m3_482 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.WildcardWithProperty()", span="902-902", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.WildcardWithProperty()", file="JPathExecuteTests.cs"];
m3_483 [label="JObject o = JObject.Parse(@''{\r\n    ''''station'''': 92000041000001, \r\n    ''''containers'''': [\r\n        {\r\n            ''''id'''': 1,\r\n            ''''text'''': ''''Sort system'''',\r\n            ''''containers'''': [\r\n                {\r\n                    ''''id'''': ''''2'''',\r\n                    ''''text'''': ''''Yard 11''''\r\n                },\r\n                {\r\n                    ''''id'''': ''''92000020100006'''',\r\n                    ''''text'''': ''''Sort yard 12''''\r\n                },\r\n                {\r\n                    ''''id'''': ''''92000020100005'''',\r\n                    ''''text'''': ''''Yard 13''''\r\n                } \r\n            ]\r\n        }, \r\n        {\r\n            ''''id'''': ''''92000020100011'''',\r\n            ''''text'''': ''''TSP-1''''\r\n        }, \r\n        {\r\n            ''''id'''':''''92000020100007'''',\r\n            ''''text'''': ''''Passenger 15''''\r\n        }\r\n    ]\r\n}'')", span="904-934", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.WildcardWithProperty()", file="JPathExecuteTests.cs"];
m3_484 [label="IList<JToken> tokens = o.SelectTokens(''$..*[?(@.text)]'').ToList()", span="936-936", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.WildcardWithProperty()", file="JPathExecuteTests.cs"];
m3_485 [label="int i = 0", span="937-937", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.WildcardWithProperty()", file="JPathExecuteTests.cs"];
m3_486 [label="Assert.AreEqual(''Sort system'', (string)tokens[i++][''text''])", span="938-938", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.WildcardWithProperty()", file="JPathExecuteTests.cs"];
m3_487 [label="Assert.AreEqual(''TSP-1'', (string)tokens[i++][''text''])", span="939-939", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.WildcardWithProperty()", file="JPathExecuteTests.cs"];
m3_488 [label="Assert.AreEqual(''Passenger 15'', (string)tokens[i++][''text''])", span="940-940", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.WildcardWithProperty()", file="JPathExecuteTests.cs"];
m3_489 [label="Assert.AreEqual(''Yard 11'', (string)tokens[i++][''text''])", span="941-941", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.WildcardWithProperty()", file="JPathExecuteTests.cs"];
m3_490 [label="Assert.AreEqual(''Sort yard 12'', (string)tokens[i++][''text''])", span="942-942", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.WildcardWithProperty()", file="JPathExecuteTests.cs"];
m3_491 [label="Assert.AreEqual(''Yard 13'', (string)tokens[i++][''text''])", span="943-943", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.WildcardWithProperty()", file="JPathExecuteTests.cs"];
m3_492 [label="Assert.AreEqual(6, tokens.Count)", span="944-944", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.WildcardWithProperty()", file="JPathExecuteTests.cs"];
m3_493 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.WildcardWithProperty()", span="902-902", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.WildcardWithProperty()", file="JPathExecuteTests.cs"];
m3_54 [label="Entry Newtonsoft.Json.Linq.JProperty.JProperty(string, object)", span="316-316", cluster="Newtonsoft.Json.Linq.JProperty.JProperty(string, object)", file="JPathExecuteTests.cs"];
m3_191 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingPropertyIndexWithError()", span="418-418", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingPropertyIndexWithError()", file="JPathExecuteTests.cs"];
m3_192 [label="JObject o = new JObject(\r\n                new JProperty(''Blah'', 1))", span="420-421", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingPropertyIndexWithError()", file="JPathExecuteTests.cs"];
m3_193 [label="ExceptionAssert.Throws<JsonException>(() => { o.SelectToken(''['Missing','Missing2']'', true); }, ''Property 'Missing' does not exist on JObject.'')", span="423-423", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingPropertyIndexWithError()", file="JPathExecuteTests.cs"];
m3_194 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingPropertyIndexWithError()", span="418-418", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingPropertyIndexWithError()", file="JPathExecuteTests.cs"];
m3_474 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Exists_Null()", span="877-877", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Exists_Null()", file="JPathExecuteTests.cs"];
m3_475 [label="JArray a = JArray.Parse(@''[\r\n  {\r\n    ''''price'''': 199,\r\n    ''''max_price'''': 200\r\n  },\r\n  {\r\n    ''''price'''': 200,\r\n    ''''max_price'''': 200\r\n  },\r\n  {\r\n    ''''price'''': 201,\r\n    ''''max_price'''': 200\r\n  }\r\n]'')", span="879-892", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Exists_Null()", file="JPathExecuteTests.cs"];
m3_476 [label="var results = a.SelectTokens(''[?(true)]'').ToList()", span="894-894", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Exists_Null()", file="JPathExecuteTests.cs"];
m3_478 [label="Assert.AreEqual(a[0], results[0])", span="896-896", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Exists_Null()", file="JPathExecuteTests.cs"];
m3_479 [label="Assert.AreEqual(a[1], results[1])", span="897-897", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Exists_Null()", file="JPathExecuteTests.cs"];
m3_480 [label="Assert.AreEqual(a[2], results[2])", span="898-898", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Exists_Null()", file="JPathExecuteTests.cs"];
m3_477 [label="Assert.AreEqual(3, results.Count)", span="895-895", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Exists_Null()", file="JPathExecuteTests.cs"];
m3_481 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Exists_Null()", span="877-877", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Exists_Null()", file="JPathExecuteTests.cs"];
m3_63 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyStringWithMatchingEmptyProperty()", span="225-225", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyStringWithMatchingEmptyProperty()", file="JPathExecuteTests.cs"];
m3_64 [label="JObject o = new JObject(\r\n                new JProperty('' '', 1))", span="227-228", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyStringWithMatchingEmptyProperty()", file="JPathExecuteTests.cs"];
m3_65 [label="JToken t = o.SelectToken(''[' ']'')", span="230-230", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyStringWithMatchingEmptyProperty()", file="JPathExecuteTests.cs"];
m3_66 [label="Assert.AreEqual(1, (int)t)", span="231-231", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyStringWithMatchingEmptyProperty()", file="JPathExecuteTests.cs"];
m3_67 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyStringWithMatchingEmptyProperty()", span="225-225", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyStringWithMatchingEmptyProperty()", file="JPathExecuteTests.cs"];
m3_0 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanQuoted()", span="54-54", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanQuoted()", file="JPathExecuteTests.cs"];
m3_1 [label="string json = @''{\r\n    ''''Node1'''': {\r\n        ''''Child1'''': {\r\n            ''''Name'''': ''''IsMe'''',\r\n            ''''TargetNode'''': {\r\n                ''''Prop1'''': ''''Val1'''',\r\n                ''''Prop2'''': ''''Val2''''\r\n            }\r\n        },\r\n        ''''My.Child.Node'''': {\r\n            ''''TargetNode'''': {\r\n                ''''Prop1'''': ''''Val1'''',\r\n                ''''Prop2'''': ''''Val2''''\r\n            }\r\n        }\r\n    },\r\n    ''''Node2'''': {\r\n        ''''TargetNode'''': {\r\n            ''''Prop1'''': ''''Val1'''',\r\n            ''''Prop2'''': ''''Val2''''\r\n        }\r\n    }\r\n}''", span="56-78", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanQuoted()", color=green, community=1, file="JPathExecuteTests.cs"];
m3_2 [label="JObject models = JObject.Parse(json)", span="80-80", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanQuoted()", color=green, community=0, file="JPathExecuteTests.cs"];
m3_3 [label="int result = models.SelectTokens(''$..['My.Child.Node']'').Count()", span="82-82", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanQuoted()", color=green, community=0, file="JPathExecuteTests.cs"];
m3_5 [label="result = models.SelectTokens(''..['My.Child.Node']'').Count()", span="85-85", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanQuoted()", color=green, community=0, file="JPathExecuteTests.cs"];
m3_4 [label="Assert.AreEqual(1, result)", span="83-83", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanQuoted()", color=green, community=0, file="JPathExecuteTests.cs"];
m3_6 [label="Assert.AreEqual(1, result)", span="86-86", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanQuoted()", file="JPathExecuteTests.cs"];
m3_302 [label="Entry System.Collections.Generic.IEnumerable<TSource>.ElementAt<TSource>(int)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.ElementAt<TSource>(int)", file="JPathExecuteTests.cs"];
m3_382 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EqualsQuery()", span="660-660", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EqualsQuery()", file="JPathExecuteTests.cs"];
m3_383 [label="JArray a = new JArray(\r\n                new JObject(new JProperty(''hi'', ''ho'')),\r\n                new JObject(new JProperty(''hi'', ''ha'')))", span="662-664", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EqualsQuery()", file="JPathExecuteTests.cs"];
m3_384 [label="IList<JToken> t = a.SelectTokens(''[ ?( @.['hi'] == 'ha' ) ]'').ToList()", span="666-666", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EqualsQuery()", file="JPathExecuteTests.cs"];
m3_385 [label="Assert.IsNotNull(t)", span="667-667", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EqualsQuery()", file="JPathExecuteTests.cs"];
m3_386 [label="Assert.AreEqual(1, t.Count)", span="668-668", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EqualsQuery()", file="JPathExecuteTests.cs"];
m3_387 [label="Assert.IsTrue(JToken.DeepEquals(new JObject(new JProperty(''hi'', ''ha'')), t[0]))", span="669-669", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EqualsQuery()", file="JPathExecuteTests.cs"];
m3_388 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EqualsQuery()", span="660-660", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EqualsQuery()", file="JPathExecuteTests.cs"];
m3_84 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSingleProperty()", span="265-265", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSingleProperty()", file="JPathExecuteTests.cs"];
m3_85 [label="JObject o = new JObject(\r\n                new JProperty(''Blah'', 1))", span="267-268", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSingleProperty()", file="JPathExecuteTests.cs"];
m3_86 [label="JToken t = o.SelectToken(''Blah'')", span="270-270", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSingleProperty()", file="JPathExecuteTests.cs"];
m3_87 [label="Assert.IsNotNull(t)", span="271-271", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSingleProperty()", file="JPathExecuteTests.cs"];
m3_88 [label="Assert.AreEqual(JTokenType.Integer, t.Type)", span="272-272", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSingleProperty()", file="JPathExecuteTests.cs"];
m3_89 [label="Assert.AreEqual(1, (int)t)", span="273-273", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSingleProperty()", file="JPathExecuteTests.cs"];
m3_90 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSingleProperty()", span="265-265", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSingleProperty()", file="JPathExecuteTests.cs"];
m3_314 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScan()", span="568-568", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScan()", file="JPathExecuteTests.cs"];
m3_315 [label="JObject o1 = new JObject { { ''Name'', 1 } }", span="570-570", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScan()", file="JPathExecuteTests.cs"];
m3_316 [label="JObject o2 = new JObject { { ''Name'', 2 } }", span="571-571", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScan()", file="JPathExecuteTests.cs"];
m3_317 [label="JArray a = new JArray(o1, o2)", span="572-572", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScan()", file="JPathExecuteTests.cs"];
m3_322 [label="Assert.IsTrue(JToken.DeepEquals(o1, t[1]))", span="578-578", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScan()", file="JPathExecuteTests.cs"];
m3_324 [label="Assert.IsTrue(JToken.DeepEquals(o2, t[3]))", span="580-580", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScan()", file="JPathExecuteTests.cs"];
m3_318 [label="IList<JToken> t = a.SelectTokens(''$..*'').ToList()", span="574-574", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScan()", file="JPathExecuteTests.cs"];
m3_321 [label="Assert.IsTrue(JToken.DeepEquals(a, t[0]))", span="577-577", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScan()", file="JPathExecuteTests.cs"];
m3_319 [label="Assert.IsNotNull(t)", span="575-575", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScan()", file="JPathExecuteTests.cs"];
m3_320 [label="Assert.AreEqual(5, t.Count)", span="576-576", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScan()", file="JPathExecuteTests.cs"];
m3_323 [label="Assert.AreEqual(1, (int)t[2])", span="579-579", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScan()", file="JPathExecuteTests.cs"];
m3_325 [label="Assert.AreEqual(2, (int)t[4])", span="581-581", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScan()", file="JPathExecuteTests.cs"];
m3_326 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScan()", span="568-568", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardScan()", file="JPathExecuteTests.cs"];
m3_426 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQueryBigInteger()", span="742-742", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQueryBigInteger()", file="JPathExecuteTests.cs"];
m3_427 [label="JArray a = new JArray(\r\n                new JObject(new JProperty(''hi'', new BigInteger(1))),\r\n                new JObject(new JProperty(''hi'', new BigInteger(2))),\r\n                new JObject(new JProperty(''hi'', new BigInteger(3))))", span="744-747", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQueryBigInteger()", file="JPathExecuteTests.cs"];
m3_428 [label="IList<JToken> t = a.SelectTokens(''[ ?( @.hi > 1 ) ]'').ToList()", span="749-749", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQueryBigInteger()", file="JPathExecuteTests.cs"];
m3_429 [label="Assert.IsNotNull(t)", span="750-750", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQueryBigInteger()", file="JPathExecuteTests.cs"];
m3_430 [label="Assert.AreEqual(2, t.Count)", span="751-751", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQueryBigInteger()", file="JPathExecuteTests.cs"];
m3_431 [label="Assert.IsTrue(JToken.DeepEquals(new JObject(new JProperty(''hi'', 2)), t[0]))", span="752-752", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQueryBigInteger()", file="JPathExecuteTests.cs"];
m3_432 [label="Assert.IsTrue(JToken.DeepEquals(new JObject(new JProperty(''hi'', 3)), t[1]))", span="753-753", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQueryBigInteger()", file="JPathExecuteTests.cs"];
m3_433 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQueryBigInteger()", span="742-742", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQueryBigInteger()", file="JPathExecuteTests.cs"];
m3_342 [label="Entry Newtonsoft.Json.Linq.JArray.JArray(object)", span="91-91", cluster="Newtonsoft.Json.Linq.JArray.JArray(object)", file="JPathExecuteTests.cs"];
m3_78 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateDollarTypeString()", span="255-255", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateDollarTypeString()", file="JPathExecuteTests.cs"];
m3_79 [label="JObject o = new JObject(\r\n                new JProperty(''$values'', new JArray(1, 2, 3)))", span="257-258", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateDollarTypeString()", file="JPathExecuteTests.cs"];
m3_80 [label="JToken t = o.SelectToken(''$values[1]'')", span="260-260", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateDollarTypeString()", file="JPathExecuteTests.cs"];
m3_81 [label="Assert.AreEqual(2, (int)t)", span="261-261", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateDollarTypeString()", file="JPathExecuteTests.cs"];
m3_82 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateDollarTypeString()", span="255-255", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateDollarTypeString()", file="JPathExecuteTests.cs"];
m3_283 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardArray()", span="527-527", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardArray()", file="JPathExecuteTests.cs"];
m3_284 [label="JArray a = new JArray(1, 2, 3, 4)", span="529-529", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardArray()", file="JPathExecuteTests.cs"];
m3_285 [label="List<JToken> t = a.SelectTokens(''[*]'').ToList()", span="531-531", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardArray()", file="JPathExecuteTests.cs"];
m3_286 [label="Assert.IsNotNull(t)", span="532-532", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardArray()", file="JPathExecuteTests.cs"];
m3_287 [label="Assert.AreEqual(4, t.Count)", span="533-533", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardArray()", file="JPathExecuteTests.cs"];
m3_288 [label="Assert.AreEqual(1, (int)t[0])", span="534-534", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardArray()", file="JPathExecuteTests.cs"];
m3_289 [label="Assert.AreEqual(2, (int)t[1])", span="535-535", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardArray()", file="JPathExecuteTests.cs"];
m3_290 [label="Assert.AreEqual(3, (int)t[2])", span="536-536", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardArray()", file="JPathExecuteTests.cs"];
m3_291 [label="Assert.AreEqual(4, (int)t[3])", span="537-537", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardArray()", file="JPathExecuteTests.cs"];
m3_292 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardArray()", span="527-527", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardArray()", file="JPathExecuteTests.cs"];
m3_186 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyWithoutError()", span="408-408", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyWithoutError()", file="JPathExecuteTests.cs"];
m3_187 [label="JObject o = new JObject(\r\n                new JProperty(''Blah'', 1))", span="410-411", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyWithoutError()", file="JPathExecuteTests.cs"];
m3_188 [label="JValue v = (JValue)o.SelectToken(''Blah'', true)", span="413-413", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyWithoutError()", file="JPathExecuteTests.cs"];
m3_189 [label="Assert.AreEqual(1, v.Value)", span="414-414", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyWithoutError()", file="JPathExecuteTests.cs"];
m3_190 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyWithoutError()", span="408-408", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyWithoutError()", file="JPathExecuteTests.cs"];
m3_167 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateConstructorOutOfBoundsIndxerWithError()", span="383-383", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateConstructorOutOfBoundsIndxerWithError()", file="JPathExecuteTests.cs"];
m3_168 [label="JConstructor c = new JConstructor(''Blah'')", span="385-385", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateConstructorOutOfBoundsIndxerWithError()", file="JPathExecuteTests.cs"];
m3_169 [label="ExceptionAssert.Throws<JsonException>(() => { c.SelectToken(''[1]'', true); }, @''Index 1 outside the bounds of JConstructor.'')", span="387-387", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateConstructorOutOfBoundsIndxerWithError()", file="JPathExecuteTests.cs"];
m3_170 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateConstructorOutOfBoundsIndxerWithError()", span="383-383", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateConstructorOutOfBoundsIndxerWithError()", file="JPathExecuteTests.cs"];
m3_361 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSinglePropertyReturningArray()", span="625-625", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSinglePropertyReturningArray()", file="JPathExecuteTests.cs"];
m3_362 [label="JObject o = new JObject(\r\n                new JProperty(''Blah'', new[] { 1, 2, 3 }))", span="627-628", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSinglePropertyReturningArray()", file="JPathExecuteTests.cs"];
m3_363 [label="JToken t = o.SelectToken(''Blah'')", span="630-630", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSinglePropertyReturningArray()", file="JPathExecuteTests.cs"];
m3_366 [label="t = o.SelectToken(''Blah[2]'')", span="634-634", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSinglePropertyReturningArray()", file="JPathExecuteTests.cs"];
m3_364 [label="Assert.IsNotNull(t)", span="631-631", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSinglePropertyReturningArray()", file="JPathExecuteTests.cs"];
m3_365 [label="Assert.AreEqual(JTokenType.Array, t.Type)", span="632-632", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSinglePropertyReturningArray()", file="JPathExecuteTests.cs"];
m3_367 [label="Assert.AreEqual(JTokenType.Integer, t.Type)", span="635-635", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSinglePropertyReturningArray()", file="JPathExecuteTests.cs"];
m3_368 [label="Assert.AreEqual(3, (int)t)", span="636-636", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSinglePropertyReturningArray()", file="JPathExecuteTests.cs"];
m3_369 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSinglePropertyReturningArray()", span="625-625", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSinglePropertyReturningArray()", file="JPathExecuteTests.cs"];
m3_410 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQuery()", span="711-711", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQuery()", file="JPathExecuteTests.cs"];
m3_411 [label="JArray a = new JArray(\r\n                new JObject(new JProperty(''hi'', 1)),\r\n                new JObject(new JProperty(''hi'', 2)),\r\n                new JObject(new JProperty(''hi'', 3)))", span="713-716", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQuery()", file="JPathExecuteTests.cs"];
m3_412 [label="IList<JToken> t = a.SelectTokens(''[ ?( @.hi > 1 ) ]'').ToList()", span="718-718", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQuery()", file="JPathExecuteTests.cs"];
m3_413 [label="Assert.IsNotNull(t)", span="719-719", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQuery()", file="JPathExecuteTests.cs"];
m3_414 [label="Assert.AreEqual(2, t.Count)", span="720-720", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQuery()", file="JPathExecuteTests.cs"];
m3_415 [label="Assert.IsTrue(JToken.DeepEquals(new JObject(new JProperty(''hi'', 2)), t[0]))", span="721-721", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQuery()", file="JPathExecuteTests.cs"];
m3_416 [label="Assert.IsTrue(JToken.DeepEquals(new JObject(new JProperty(''hi'', 3)), t[1]))", span="722-722", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQuery()", file="JPathExecuteTests.cs"];
m3_417 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQuery()", span="711-711", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterQuery()", file="JPathExecuteTests.cs"];
m3_171 [label="Entry Newtonsoft.Json.Linq.JConstructor.JConstructor(string)", span="131-131", cluster="Newtonsoft.Json.Linq.JConstructor.JConstructor(string)", file="JPathExecuteTests.cs"];
m3_519 [label="Entry Unk.Select", span="", cluster="Unk.Select", file="JPathExecuteTests.cs"];
m3_34 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.SelectTokenAfterEmptyContainer()", span="175-175", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.SelectTokenAfterEmptyContainer()", file="JPathExecuteTests.cs"];
m3_35 [label="string json = @''{\r\n    'cont': [],\r\n    'test': 'no one will find me'\r\n}''", span="177-180", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.SelectTokenAfterEmptyContainer()", file="JPathExecuteTests.cs"];
m3_36 [label="JObject o = JObject.Parse(json)", span="182-182", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.SelectTokenAfterEmptyContainer()", file="JPathExecuteTests.cs"];
m3_37 [label="IList<JToken> results = o.SelectTokens(''$..test'').ToList()", span="184-184", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.SelectTokenAfterEmptyContainer()", file="JPathExecuteTests.cs"];
m3_38 [label="Assert.AreEqual(1, results.Count)", span="186-186", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.SelectTokenAfterEmptyContainer()", file="JPathExecuteTests.cs"];
m3_39 [label="Assert.AreEqual(''no one will find me'', (string)results[0])", span="187-187", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.SelectTokenAfterEmptyContainer()", file="JPathExecuteTests.cs"];
m3_40 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.SelectTokenAfterEmptyContainer()", span="175-175", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.SelectTokenAfterEmptyContainer()", file="JPathExecuteTests.cs"];
m3_73 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateDollarString()", span="245-245", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateDollarString()", file="JPathExecuteTests.cs"];
m3_74 [label="JObject o = new JObject(\r\n                new JProperty(''Blah'', 1))", span="247-248", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateDollarString()", file="JPathExecuteTests.cs"];
m3_75 [label="JToken t = o.SelectToken(''$'')", span="250-250", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateDollarString()", file="JPathExecuteTests.cs"];
m3_76 [label="Assert.AreEqual(o, t)", span="251-251", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateDollarString()", file="JPathExecuteTests.cs"];
m3_77 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateDollarString()", span="245-245", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateDollarString()", file="JPathExecuteTests.cs"];
m3_108 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingProperty()", span="303-303", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingProperty()", file="JPathExecuteTests.cs"];
m3_109 [label="JObject o = new JObject(\r\n                new JProperty(''Blah'', 1))", span="305-306", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingProperty()", file="JPathExecuteTests.cs"];
m3_110 [label="JToken t = o.SelectToken(''Missing[1]'')", span="308-308", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingProperty()", file="JPathExecuteTests.cs"];
m3_111 [label="Assert.IsNull(t)", span="309-309", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingProperty()", file="JPathExecuteTests.cs"];
m3_112 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingProperty()", span="303-303", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMissingProperty()", file="JPathExecuteTests.cs"];
m3_55 [label="Entry Newtonsoft.Json.Linq.JToken.SelectToken(string)", span="2301-2301", cluster="Newtonsoft.Json.Linq.JToken.SelectToken(string)", file="JPathExecuteTests.cs"];
m3_160 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateNoResultsWithMultipleArrayIndexes()", span="375-375", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateNoResultsWithMultipleArrayIndexes()", file="JPathExecuteTests.cs"];
m3_161 [label="JArray a = new JArray(1, 2, 3, 4, 5)", span="377-377", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateNoResultsWithMultipleArrayIndexes()", file="JPathExecuteTests.cs"];
m3_162 [label="ExceptionAssert.Throws<JsonException>(() => { a.SelectToken(''[9,10]'', true); }, @''Index 9 outside the bounds of JArray.'')", span="379-379", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateNoResultsWithMultipleArrayIndexes()", file="JPathExecuteTests.cs"];
m3_163 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateNoResultsWithMultipleArrayIndexes()", span="375-375", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateNoResultsWithMultipleArrayIndexes()", file="JPathExecuteTests.cs"];
m3_466 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Exists_True()", span="852-852", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Exists_True()", file="JPathExecuteTests.cs"];
m3_467 [label="JArray a = JArray.Parse(@''[\r\n  {\r\n    ''''price'''': 199,\r\n    ''''max_price'''': 200\r\n  },\r\n  {\r\n    ''''price'''': 200,\r\n    ''''max_price'''': 200\r\n  },\r\n  {\r\n    ''''price'''': 201,\r\n    ''''max_price'''': 200\r\n  }\r\n]'')", span="854-867", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Exists_True()", file="JPathExecuteTests.cs"];
m3_468 [label="var results = a.SelectTokens(''[?(true)]'').ToList()", span="869-869", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Exists_True()", file="JPathExecuteTests.cs"];
m3_470 [label="Assert.AreEqual(a[0], results[0])", span="871-871", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Exists_True()", file="JPathExecuteTests.cs"];
m3_471 [label="Assert.AreEqual(a[1], results[1])", span="872-872", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Exists_True()", file="JPathExecuteTests.cs"];
m3_472 [label="Assert.AreEqual(a[2], results[2])", span="873-873", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Exists_True()", file="JPathExecuteTests.cs"];
m3_469 [label="Assert.AreEqual(3, results.Count)", span="870-870", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Exists_True()", file="JPathExecuteTests.cs"];
m3_473 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Exists_True()", span="852-852", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.Exists_True()", file="JPathExecuteTests.cs"];
m3_436 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterOrEqualQuery()", span="758-758", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterOrEqualQuery()", file="JPathExecuteTests.cs"];
m3_437 [label="JArray a = new JArray(\r\n                new JObject(new JProperty(''hi'', 1)),\r\n                new JObject(new JProperty(''hi'', 2)),\r\n                new JObject(new JProperty(''hi'', 2.0)),\r\n                new JObject(new JProperty(''hi'', 3)))", span="760-764", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterOrEqualQuery()", file="JPathExecuteTests.cs"];
m3_438 [label="IList<JToken> t = a.SelectTokens(''[ ?( @.hi >= 1 ) ]'').ToList()", span="766-766", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterOrEqualQuery()", file="JPathExecuteTests.cs"];
m3_439 [label="Assert.IsNotNull(t)", span="767-767", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterOrEqualQuery()", file="JPathExecuteTests.cs"];
m3_440 [label="Assert.AreEqual(4, t.Count)", span="768-768", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterOrEqualQuery()", file="JPathExecuteTests.cs"];
m3_441 [label="Assert.IsTrue(JToken.DeepEquals(new JObject(new JProperty(''hi'', 1)), t[0]))", span="769-769", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterOrEqualQuery()", file="JPathExecuteTests.cs"];
m3_442 [label="Assert.IsTrue(JToken.DeepEquals(new JObject(new JProperty(''hi'', 2)), t[1]))", span="770-770", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterOrEqualQuery()", file="JPathExecuteTests.cs"];
m3_443 [label="Assert.IsTrue(JToken.DeepEquals(new JObject(new JProperty(''hi'', 2.0)), t[2]))", span="771-771", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterOrEqualQuery()", file="JPathExecuteTests.cs"];
m3_444 [label="Assert.IsTrue(JToken.DeepEquals(new JObject(new JProperty(''hi'', 3)), t[3]))", span="772-772", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterOrEqualQuery()", file="JPathExecuteTests.cs"];
m3_445 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterOrEqualQuery()", span="758-758", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.GreaterOrEqualQuery()", file="JPathExecuteTests.cs"];
m3_48 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyPropertyIndexer()", span="202-202", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyPropertyIndexer()", file="JPathExecuteTests.cs"];
m3_49 [label="JObject o = new JObject(\r\n                new JProperty('''', 1))", span="204-205", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyPropertyIndexer()", file="JPathExecuteTests.cs"];
m3_50 [label="JToken t = o.SelectToken(''['']'')", span="207-207", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyPropertyIndexer()", file="JPathExecuteTests.cs"];
m3_51 [label="Assert.AreEqual(1, (int)t)", span="208-208", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyPropertyIndexer()", file="JPathExecuteTests.cs"];
m3_52 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyPropertyIndexer()", span="202-202", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyPropertyIndexer()", file="JPathExecuteTests.cs"];
m3_91 [label="Entry Unk.IsNotNull", span="", cluster="Unk.IsNotNull", file="JPathExecuteTests.cs"];
m3_418 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.LesserQuery_ValueFirst()", span="726-726", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.LesserQuery_ValueFirst()", file="JPathExecuteTests.cs"];
m3_419 [label="JArray a = new JArray(\r\n                new JObject(new JProperty(''hi'', 1)),\r\n                new JObject(new JProperty(''hi'', 2)),\r\n                new JObject(new JProperty(''hi'', 3)))", span="728-731", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.LesserQuery_ValueFirst()", file="JPathExecuteTests.cs"];
m3_420 [label="IList<JToken> t = a.SelectTokens(''[ ?( 1 < @.hi ) ]'').ToList()", span="733-733", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.LesserQuery_ValueFirst()", file="JPathExecuteTests.cs"];
m3_421 [label="Assert.IsNotNull(t)", span="734-734", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.LesserQuery_ValueFirst()", file="JPathExecuteTests.cs"];
m3_422 [label="Assert.AreEqual(2, t.Count)", span="735-735", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.LesserQuery_ValueFirst()", file="JPathExecuteTests.cs"];
m3_423 [label="Assert.IsTrue(JToken.DeepEquals(new JObject(new JProperty(''hi'', 2)), t[0]))", span="736-736", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.LesserQuery_ValueFirst()", file="JPathExecuteTests.cs"];
m3_424 [label="Assert.IsTrue(JToken.DeepEquals(new JObject(new JProperty(''hi'', 3)), t[1]))", span="737-737", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.LesserQuery_ValueFirst()", file="JPathExecuteTests.cs"];
m3_425 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.LesserQuery_ValueFirst()", span="726-726", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.LesserQuery_ValueFirst()", file="JPathExecuteTests.cs"];
m3_7 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanQuoted()", span="54-54", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.ScanQuoted()", file="JPathExecuteTests.cs"];
m3_514 [label="Entry System.DateTimeOffset.DateTimeOffset(int, int, int, int, int, int, System.TimeSpan)", span="0-0", cluster="System.DateTimeOffset.DateTimeOffset(int, int, int, int, int, int, System.TimeSpan)", file="JPathExecuteTests.cs"];
m3_396 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NoPathQuery()", span="686-686", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NoPathQuery()", file="JPathExecuteTests.cs"];
m3_397 [label="JArray a = new JArray(1, 2, 3)", span="688-688", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NoPathQuery()", file="JPathExecuteTests.cs"];
m3_398 [label="IList<JToken> t = a.SelectTokens(''[ ?( @ > 1 ) ]'').ToList()", span="690-690", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NoPathQuery()", file="JPathExecuteTests.cs"];
m3_399 [label="Assert.IsNotNull(t)", span="691-691", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NoPathQuery()", file="JPathExecuteTests.cs"];
m3_400 [label="Assert.AreEqual(2, t.Count)", span="692-692", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NoPathQuery()", file="JPathExecuteTests.cs"];
m3_401 [label="Assert.AreEqual(2, (int)t[0])", span="693-693", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NoPathQuery()", file="JPathExecuteTests.cs"];
m3_402 [label="Assert.AreEqual(3, (int)t[1])", span="694-694", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NoPathQuery()", file="JPathExecuteTests.cs"];
m3_403 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NoPathQuery()", span="686-686", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.NoPathQuery()", file="JPathExecuteTests.cs"];
m3_550 [label="Entry lambda expression", span="1052-1052", cluster="lambda expression", file="JPathExecuteTests.cs"];
m3_125 [label="o.SelectToken(''[1]'', true)", span="328-328", cluster="lambda expression", file="JPathExecuteTests.cs"];
m3_124 [label="Entry lambda expression", span="328-328", cluster="lambda expression", file="JPathExecuteTests.cs"];
m3_126 [label="Exit lambda expression", span="328-328", cluster="lambda expression", file="JPathExecuteTests.cs"];
m3_132 [label="o.SelectToken(''[*]'', true)", span="337-337", cluster="lambda expression", file="JPathExecuteTests.cs"];
m3_131 [label="Entry lambda expression", span="337-337", cluster="lambda expression", file="JPathExecuteTests.cs"];
m3_133 [label="Exit lambda expression", span="337-337", cluster="lambda expression", file="JPathExecuteTests.cs"];
m3_139 [label="o.SelectToken(''[:]'', true)", span="346-346", cluster="lambda expression", file="JPathExecuteTests.cs"];
m3_138 [label="Entry lambda expression", span="346-346", cluster="lambda expression", file="JPathExecuteTests.cs"];
m3_140 [label="Exit lambda expression", span="346-346", cluster="lambda expression", file="JPathExecuteTests.cs"];
m3_151 [label="a.SelectToken(''[0, 1]'')", span="363-363", cluster="lambda expression", file="JPathExecuteTests.cs"];
m3_150 [label="Entry lambda expression", span="363-363", cluster="lambda expression", file="JPathExecuteTests.cs"];
m3_152 [label="Exit lambda expression", span="363-363", cluster="lambda expression", file="JPathExecuteTests.cs"];
m3_158 [label="a.SelectToken(''BlahBlah'', true)", span="371-371", cluster="lambda expression", file="JPathExecuteTests.cs"];
m3_157 [label="Entry lambda expression", span="371-371", cluster="lambda expression", file="JPathExecuteTests.cs"];
m3_159 [label="Exit lambda expression", span="371-371", cluster="lambda expression", file="JPathExecuteTests.cs"];
m3_165 [label="a.SelectToken(''[9,10]'', true)", span="379-379", cluster="lambda expression", file="JPathExecuteTests.cs"];
m3_164 [label="Entry lambda expression", span="379-379", cluster="lambda expression", file="JPathExecuteTests.cs"];
m3_166 [label="Exit lambda expression", span="379-379", cluster="lambda expression", file="JPathExecuteTests.cs"];
m3_173 [label="c.SelectToken(''[1]'', true)", span="387-387", cluster="lambda expression", file="JPathExecuteTests.cs"];
m3_172 [label="Entry lambda expression", span="387-387", cluster="lambda expression", file="JPathExecuteTests.cs"];
m3_174 [label="Exit lambda expression", span="387-387", cluster="lambda expression", file="JPathExecuteTests.cs"];
m3_184 [label="o.SelectToken(''Missing'', true)", span="404-404", cluster="lambda expression", file="JPathExecuteTests.cs"];
m3_183 [label="Entry lambda expression", span="404-404", cluster="lambda expression", file="JPathExecuteTests.cs"];
m3_185 [label="Exit lambda expression", span="404-404", cluster="lambda expression", file="JPathExecuteTests.cs"];
m3_196 [label="o.SelectToken(''['Missing','Missing2']'', true)", span="423-423", cluster="lambda expression", file="JPathExecuteTests.cs"];
m3_195 [label="Entry lambda expression", span="423-423", cluster="lambda expression", file="JPathExecuteTests.cs"];
m3_197 [label="Exit lambda expression", span="423-423", cluster="lambda expression", file="JPathExecuteTests.cs"];
m3_203 [label="a.SelectToken(''['Missing','Missing2']'', true)", span="431-431", cluster="lambda expression", file="JPathExecuteTests.cs"];
m3_202 [label="Entry lambda expression", span="431-431", cluster="lambda expression", file="JPathExecuteTests.cs"];
m3_204 [label="Exit lambda expression", span="431-431", cluster="lambda expression", file="JPathExecuteTests.cs"];
m3_215 [label="a.SelectToken(''[99:]'', true)", span="439-439", cluster="lambda expression", file="JPathExecuteTests.cs"];
m3_218 [label="a.SelectToken(''[1:-19]'', true)", span="441-441", cluster="lambda expression", file="JPathExecuteTests.cs"];
m3_221 [label="a.SelectToken(''[:-19]'', true)", span="443-443", cluster="lambda expression", file="JPathExecuteTests.cs"];
m3_214 [label="Entry lambda expression", span="439-439", cluster="lambda expression", file="JPathExecuteTests.cs"];
m3_217 [label="Entry lambda expression", span="441-441", cluster="lambda expression", file="JPathExecuteTests.cs"];
m3_220 [label="Entry lambda expression", span="443-443", cluster="lambda expression", file="JPathExecuteTests.cs"];
m3_224 [label="a.SelectToken(''[:]'', true)", span="447-447", cluster="lambda expression", file="JPathExecuteTests.cs"];
m3_223 [label="Entry lambda expression", span="447-447", cluster="lambda expression", file="JPathExecuteTests.cs"];
m3_216 [label="Exit lambda expression", span="439-439", cluster="lambda expression", file="JPathExecuteTests.cs"];
m3_219 [label="Exit lambda expression", span="441-441", cluster="lambda expression", file="JPathExecuteTests.cs"];
m3_222 [label="Exit lambda expression", span="443-443", cluster="lambda expression", file="JPathExecuteTests.cs"];
m3_225 [label="Exit lambda expression", span="447-447", cluster="lambda expression", file="JPathExecuteTests.cs"];
m3_236 [label="a.SelectToken(''[1000].Ha'', true)", span="464-464", cluster="lambda expression", file="JPathExecuteTests.cs"];
m3_235 [label="Entry lambda expression", span="464-464", cluster="lambda expression", file="JPathExecuteTests.cs"];
m3_237 [label="Exit lambda expression", span="464-464", cluster="lambda expression", file="JPathExecuteTests.cs"];
m3_520 [label="Entry lambda expression", span="971-971", cluster="lambda expression", file="JPathExecuteTests.cs"];
m3_521 [label="new JObject(new JProperty(''childProp'', v))", span="971-971", cluster="lambda expression", file="JPathExecuteTests.cs"];
m3_522 [label="Exit lambda expression", span="971-971", cluster="lambda expression", file="JPathExecuteTests.cs"];
m3_544 [label="Entry lambda expression", span="1044-1044", cluster="lambda expression", file="JPathExecuteTests.cs"];
m3_547 [label="Entry lambda expression", span="1048-1048", cluster="lambda expression", file="JPathExecuteTests.cs"];
m3_545 [label="(string)s", span="1044-1044", cluster="lambda expression", file="JPathExecuteTests.cs"];
m3_546 [label="Exit lambda expression", span="1044-1044", cluster="lambda expression", file="JPathExecuteTests.cs"];
m3_548 [label="(string)m.SelectToken(''Products[1].Name'')", span="1048-1048", cluster="lambda expression", file="JPathExecuteTests.cs"];
m3_549 [label="Exit lambda expression", span="1048-1048", cluster="lambda expression", file="JPathExecuteTests.cs"];
m3_551 [label="(decimal)m.SelectToken(''Products[0].Price'')", span="1052-1052", cluster="lambda expression", file="JPathExecuteTests.cs"];
m3_552 [label="Exit lambda expression", span="1052-1052", cluster="lambda expression", file="JPathExecuteTests.cs"];
m3_293 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayMultipleIndexes()", span="541-541", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayMultipleIndexes()", file="JPathExecuteTests.cs"];
m3_294 [label="JArray a = new JArray(1, 2, 3, 4)", span="543-543", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayMultipleIndexes()", file="JPathExecuteTests.cs"];
m3_295 [label="IEnumerable<JToken> t = a.SelectTokens(''[1,2,0]'')", span="545-545", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayMultipleIndexes()", file="JPathExecuteTests.cs"];
m3_296 [label="Assert.IsNotNull(t)", span="546-546", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayMultipleIndexes()", file="JPathExecuteTests.cs"];
m3_297 [label="Assert.AreEqual(3, t.Count())", span="547-547", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayMultipleIndexes()", file="JPathExecuteTests.cs"];
m3_298 [label="Assert.AreEqual(2, (int)t.ElementAt(0))", span="548-548", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayMultipleIndexes()", file="JPathExecuteTests.cs"];
m3_299 [label="Assert.AreEqual(3, (int)t.ElementAt(1))", span="549-549", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayMultipleIndexes()", file="JPathExecuteTests.cs"];
m3_300 [label="Assert.AreEqual(1, (int)t.ElementAt(2))", span="550-550", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayMultipleIndexes()", file="JPathExecuteTests.cs"];
m3_301 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayMultipleIndexes()", span="541-541", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateArrayMultipleIndexes()", file="JPathExecuteTests.cs"];
m3_213 [label="Entry Newtonsoft.Json.Linq.JArray.JArray()", span="65-65", cluster="Newtonsoft.Json.Linq.JArray.JArray()", file="JPathExecuteTests.cs"];
m3_517 [label="Entry System.TimeSpan.TimeSpan(int, int, int, int)", span="0-0", cluster="System.TimeSpan.TimeSpan(int, int, int, int)", file="JPathExecuteTests.cs"];
m3_434 [label="Entry JProperty.cstr", span="", cluster="JProperty.cstr", file="JPathExecuteTests.cs"];
m3_153 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyOnArrayWithError()", span="367-367", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyOnArrayWithError()", file="JPathExecuteTests.cs"];
m3_154 [label="JArray a = new JArray(1, 2, 3, 4, 5)", span="369-369", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyOnArrayWithError()", file="JPathExecuteTests.cs"];
m3_155 [label="ExceptionAssert.Throws<JsonException>(() => { a.SelectToken(''BlahBlah'', true); }, @''Property 'BlahBlah' not valid on JArray.'')", span="371-371", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyOnArrayWithError()", file="JPathExecuteTests.cs"];
m3_156 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyOnArrayWithError()", span="367-367", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyOnArrayWithError()", file="JPathExecuteTests.cs"];
m3_510 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="JPathExecuteTests.cs"];
m3_515 [label="Entry System.TimeSpan.FromHours(double)", span="0-0", cluster="System.TimeSpan.FromHours(double)", file="JPathExecuteTests.cs"];
m3_435 [label="Entry BigInteger.cstr", span="", cluster="BigInteger.cstr", file="JPathExecuteTests.cs"];
m3_134 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSliceOnObjectWithError()", span="341-341", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSliceOnObjectWithError()", file="JPathExecuteTests.cs"];
m3_135 [label="JObject o = new JObject(\r\n                new JProperty(''Blah'', 1))", span="343-344", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSliceOnObjectWithError()", file="JPathExecuteTests.cs"];
m3_136 [label="ExceptionAssert.Throws<JsonException>(() => { o.SelectToken(''[:]'', true); }, @''Array slice is not valid on JObject.'')", span="346-346", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSliceOnObjectWithError()", file="JPathExecuteTests.cs"];
m3_137 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSliceOnObjectWithError()", span="341-341", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateSliceOnObjectWithError()", file="JPathExecuteTests.cs"];
m3_198 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMultiPropertyIndexOnArrayWithError()", span="427-427", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMultiPropertyIndexOnArrayWithError()", file="JPathExecuteTests.cs"];
m3_199 [label="JArray a = new JArray(1, 2, 3, 4, 5)", span="429-429", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMultiPropertyIndexOnArrayWithError()", file="JPathExecuteTests.cs"];
m3_200 [label="ExceptionAssert.Throws<JsonException>(() => { a.SelectToken(''['Missing','Missing2']'', true); }, ''Properties 'Missing', 'Missing2' not valid on JArray.'')", span="431-431", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMultiPropertyIndexOnArrayWithError()", file="JPathExecuteTests.cs"];
m3_201 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMultiPropertyIndexOnArrayWithError()", span="427-427", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateMultiPropertyIndexOnArrayWithError()", file="JPathExecuteTests.cs"];
m3_327 [label="Entry Newtonsoft.Json.Linq.JToken.DeepEquals(Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken)", span="155-155", cluster="Newtonsoft.Json.Linq.JToken.DeepEquals(Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken)", file="JPathExecuteTests.cs"];
m3_127 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardIndexOnObjectWithError()", span="332-332", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardIndexOnObjectWithError()", file="JPathExecuteTests.cs"];
m3_128 [label="JObject o = new JObject(\r\n                new JProperty(''Blah'', 1))", span="334-335", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardIndexOnObjectWithError()", file="JPathExecuteTests.cs"];
m3_129 [label="ExceptionAssert.Throws<JsonException>(() => { o.SelectToken(''[*]'', true); }, @''Index * not valid on JObject.'')", span="337-337", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardIndexOnObjectWithError()", file="JPathExecuteTests.cs"];
m3_130 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardIndexOnObjectWithError()", span="332-332", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateWildcardIndexOnObjectWithError()", file="JPathExecuteTests.cs"];
m3_513 [label="Entry System.DateTime.DateTime(int, int, int, int, int, int, System.DateTimeKind)", span="0-0", cluster="System.DateTime.DateTime(int, int, int, int, int, int, System.DateTimeKind)", file="JPathExecuteTests.cs"];
m3_567 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.RootInFilter()", span="1112-1112", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.RootInFilter()", file="JPathExecuteTests.cs"];
m3_568 [label="string json = @''[\r\n   {\r\n      ''''store'''' : {\r\n         ''''book'''' : [\r\n            {\r\n               ''''category'''' : ''''reference'''',\r\n               ''''author'''' : ''''Nigel Rees'''',\r\n               ''''title'''' : ''''Sayings of the Century'''',\r\n               ''''price'''' : 8.95\r\n            },\r\n            {\r\n               ''''category'''' : ''''fiction'''',\r\n               ''''author'''' : ''''Evelyn Waugh'''',\r\n               ''''title'''' : ''''Sword of Honour'''',\r\n               ''''price'''' : 12.99\r\n            },\r\n            {\r\n               ''''category'''' : ''''fiction'''',\r\n               ''''author'''' : ''''Herman Melville'''',\r\n               ''''title'''' : ''''Moby Dick'''',\r\n               ''''isbn'''' : ''''0-553-21311-3'''',\r\n               ''''price'''' : 8.99\r\n            },\r\n            {\r\n               ''''category'''' : ''''fiction'''',\r\n               ''''author'''' : ''''J. R. R. Tolkien'''',\r\n               ''''title'''' : ''''The Lord of the Rings'''',\r\n               ''''isbn'''' : ''''0-395-19395-8'''',\r\n               ''''price'''' : 22.99\r\n            }\r\n         ],\r\n         ''''bicycle'''' : {\r\n            ''''color'''' : ''''red'''',\r\n            ''''price'''' : 19.95\r\n         }\r\n      },\r\n      ''''expensive'''' : 10\r\n   }\r\n]''", span="1114-1152", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.RootInFilter()", file="JPathExecuteTests.cs"];
m3_569 [label="JArray a = JArray.Parse(json)", span="1154-1154", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.RootInFilter()", file="JPathExecuteTests.cs"];
m3_570 [label="List<JToken> result = a.SelectTokens(''$.[?($.store.bicycle.price < 20)]'').ToList()", span="1156-1156", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.RootInFilter()", file="JPathExecuteTests.cs"];
m3_572 [label="result = a.SelectTokens(''$.[?($.store.bicycle.price < 10)]'').ToList()", span="1159-1159", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.RootInFilter()", file="JPathExecuteTests.cs"];
m3_571 [label="Assert.AreEqual(1, result.Count)", span="1157-1157", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.RootInFilter()", file="JPathExecuteTests.cs"];
m3_573 [label="Assert.AreEqual(0, result.Count)", span="1160-1160", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.RootInFilter()", file="JPathExecuteTests.cs"];
m3_574 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.RootInFilter()", span="1112-1112", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.RootInFilter()", file="JPathExecuteTests.cs"];
m3_47 [label="Entry Newtonsoft.Json.Linq.JToken.SelectToken(string, bool)", span="2314-2314", cluster="Newtonsoft.Json.Linq.JToken.SelectToken(string, bool)", file="JPathExecuteTests.cs"];
m3_516 [label="Entry System.Text.Encoding.GetBytes(string)", span="0-0", cluster="System.Text.Encoding.GetBytes(string)", file="JPathExecuteTests.cs"];
m3_123 [label="Entry Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", span="367-367", cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", file="JPathExecuteTests.cs"];
m3_460 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.MultiplePaths()", span="829-829", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.MultiplePaths()", file="JPathExecuteTests.cs"];
m3_461 [label="JArray a = JArray.Parse(@''[\r\n  {\r\n    ''''price'''': 199,\r\n    ''''max_price'''': 200\r\n  },\r\n  {\r\n    ''''price'''': 200,\r\n    ''''max_price'''': 200\r\n  },\r\n  {\r\n    ''''price'''': 201,\r\n    ''''max_price'''': 200\r\n  }\r\n]'')", span="831-844", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.MultiplePaths()", file="JPathExecuteTests.cs"];
m3_462 [label="var results = a.SelectTokens(''[?(@.price > @.max_price)]'').ToList()", span="846-846", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.MultiplePaths()", file="JPathExecuteTests.cs"];
m3_464 [label="Assert.AreEqual(a[2], results[0])", span="848-848", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.MultiplePaths()", file="JPathExecuteTests.cs"];
m3_463 [label="Assert.AreEqual(1, results.Count)", span="847-847", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.MultiplePaths()", file="JPathExecuteTests.cs"];
m3_465 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.MultiplePaths()", span="829-829", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.MultiplePaths()", file="JPathExecuteTests.cs"];
m3_141 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyOnArray()", span="350-350", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyOnArray()", file="JPathExecuteTests.cs"];
m3_142 [label="JArray a = new JArray(1, 2, 3, 4, 5)", span="352-352", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyOnArray()", file="JPathExecuteTests.cs"];
m3_143 [label="JToken t = a.SelectToken(''BlahBlah'')", span="354-354", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyOnArray()", file="JPathExecuteTests.cs"];
m3_144 [label="Assert.IsNull(t)", span="355-355", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyOnArray()", file="JPathExecuteTests.cs"];
m3_145 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyOnArray()", span="350-350", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluatePropertyOnArray()", file="JPathExecuteTests.cs"];
m3_56 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyString()", span="212-212", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyString()", file="JPathExecuteTests.cs"];
m3_57 [label="JObject o = new JObject(\r\n                new JProperty(''Blah'', 1))", span="214-215", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyString()", file="JPathExecuteTests.cs"];
m3_58 [label="JToken t = o.SelectToken('''')", span="217-217", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyString()", file="JPathExecuteTests.cs"];
m3_59 [label="Assert.AreEqual(o, t)", span="218-218", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyString()", file="JPathExecuteTests.cs"];
m3_60 [label="t = o.SelectToken(''['']'')", span="220-220", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyString()", file="JPathExecuteTests.cs"];
m3_61 [label="Assert.AreEqual(null, t)", span="221-221", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyString()", file="JPathExecuteTests.cs"];
m3_62 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyString()", span="212-212", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathExecuteTests.EvaluateEmptyString()", file="JPathExecuteTests.cs"];
m3_575 [label=o, span="", file="JPathExecuteTests.cs"];
m3_576 [label=o, span="", file="JPathExecuteTests.cs"];
m3_577 [label=o, span="", file="JPathExecuteTests.cs"];
m3_578 [label=a, span="", file="JPathExecuteTests.cs"];
m3_579 [label=a, span="", file="JPathExecuteTests.cs"];
m3_580 [label=a, span="", file="JPathExecuteTests.cs"];
m3_581 [label=c, span="", file="JPathExecuteTests.cs"];
m3_582 [label=o, span="", file="JPathExecuteTests.cs"];
m3_583 [label=o, span="", file="JPathExecuteTests.cs"];
m3_584 [label=a, span="", file="JPathExecuteTests.cs"];
m3_585 [label=a, span="", file="JPathExecuteTests.cs"];
m3_586 [label=a, span="", file="JPathExecuteTests.cs"];
m4_295 [label="Entry Unk.IsInstanceOf", span="", cluster="Unk.IsInstanceOf", file="JPathParseTests.cs"];
m4_94 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.WildcardArrayWithProperty()", span="180-180", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.WildcardArrayWithProperty()", file="JPathParseTests.cs"];
m4_95 [label="JPath path = new JPath(''[ * ].derp'')", span="182-182", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.WildcardArrayWithProperty()", file="JPathParseTests.cs"];
m4_96 [label="Assert.AreEqual(2, path.Filters.Count)", span="183-183", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.WildcardArrayWithProperty()", file="JPathParseTests.cs"];
m4_97 [label="Assert.AreEqual(null, ((ArrayIndexFilter)path.Filters[0]).Index)", span="184-184", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.WildcardArrayWithProperty()", file="JPathParseTests.cs"];
m4_98 [label="Assert.AreEqual(''derp'', ((FieldFilter)path.Filters[1]).Name)", span="185-185", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.WildcardArrayWithProperty()", file="JPathParseTests.cs"];
m4_99 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.WildcardArrayWithProperty()", span="180-180", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.WildcardArrayWithProperty()", file="JPathParseTests.cs"];
m4_308 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BaddOr3()", span="483-483", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BaddOr3()", file="JPathParseTests.cs"];
m4_309 [label="ExceptionAssert.Throws<JsonException>(() => new JPath(''[?(@.name|''), ''Unexpected character while parsing path query: |'')", span="485-485", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BaddOr3()", file="JPathParseTests.cs"];
m4_310 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BaddOr3()", span="483-483", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BaddOr3()", file="JPathParseTests.cs"];
m4_228 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithGreaterThan()", span="374-374", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithGreaterThan()", file="JPathParseTests.cs"];
m4_229 [label="JPath path = new JPath(''[?(@.name>null)]'')", span="376-376", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithGreaterThan()", file="JPathParseTests.cs"];
m4_230 [label="BooleanQueryExpression expressions = (BooleanQueryExpression)((QueryFilter)path.Filters[0]).Expression", span="377-377", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithGreaterThan()", file="JPathParseTests.cs"];
m4_231 [label="Assert.AreEqual(QueryOperator.GreaterThan, expressions.Operator)", span="378-378", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithGreaterThan()", file="JPathParseTests.cs"];
m4_232 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithGreaterThan()", span="374-374", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithGreaterThan()", file="JPathParseTests.cs"];
m4_381 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultipleIndexes()", span="568-568", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultipleIndexes()", file="JPathParseTests.cs"];
m4_382 [label="JPath path = new JPath(''[111119990,3]'')", span="570-570", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultipleIndexes()", file="JPathParseTests.cs"];
m4_383 [label="Assert.AreEqual(1, path.Filters.Count)", span="571-571", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultipleIndexes()", file="JPathParseTests.cs"];
m4_384 [label="Assert.AreEqual(2, ((ArrayMultipleIndexFilter)path.Filters[0]).Indexes.Count)", span="572-572", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultipleIndexes()", file="JPathParseTests.cs"];
m4_385 [label="Assert.AreEqual(111119990, ((ArrayMultipleIndexFilter)path.Filters[0]).Indexes[0])", span="573-573", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultipleIndexes()", file="JPathParseTests.cs"];
m4_386 [label="Assert.AreEqual(3, ((ArrayMultipleIndexFilter)path.Filters[0]).Indexes[1])", span="574-574", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultipleIndexes()", file="JPathParseTests.cs"];
m4_387 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultipleIndexes()", span="568-568", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultipleIndexes()", file="JPathParseTests.cs"];
m4_218 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithLessThan()", span="358-358", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithLessThan()", file="JPathParseTests.cs"];
m4_219 [label="JPath path = new JPath(''[?(@.name<null)]'')", span="360-360", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithLessThan()", file="JPathParseTests.cs"];
m4_220 [label="BooleanQueryExpression expressions = (BooleanQueryExpression)((QueryFilter)path.Filters[0]).Expression", span="361-361", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithLessThan()", file="JPathParseTests.cs"];
m4_221 [label="Assert.AreEqual(QueryOperator.LessThan, expressions.Operator)", span="362-362", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithLessThan()", file="JPathParseTests.cs"];
m4_222 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithLessThan()", span="358-358", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithLessThan()", file="JPathParseTests.cs"];
m4_132 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndIndexer()", span="239-239", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndIndexer()", file="JPathParseTests.cs"];
m4_133 [label="JPath path = new JPath(''Blah[0]'')", span="241-241", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndIndexer()", file="JPathParseTests.cs"];
m4_134 [label="Assert.AreEqual(2, path.Filters.Count)", span="242-242", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndIndexer()", file="JPathParseTests.cs"];
m4_135 [label="Assert.AreEqual(''Blah'', ((FieldFilter)path.Filters[0]).Name)", span="243-243", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndIndexer()", file="JPathParseTests.cs"];
m4_136 [label="Assert.AreEqual(0, ((ArrayIndexFilter)path.Filters[1]).Index)", span="244-244", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndIndexer()", file="JPathParseTests.cs"];
m4_137 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndIndexer()", span="239-239", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndIndexer()", file="JPathParseTests.cs"];
m4_74 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.WildcardPropertyWithRoot()", span="148-148", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.WildcardPropertyWithRoot()", file="JPathParseTests.cs"];
m4_75 [label="JPath path = new JPath(''$.*'')", span="150-150", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.WildcardPropertyWithRoot()", file="JPathParseTests.cs"];
m4_76 [label="Assert.AreEqual(1, path.Filters.Count)", span="151-151", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.WildcardPropertyWithRoot()", file="JPathParseTests.cs"];
m4_77 [label="Assert.AreEqual(null, ((FieldFilter)path.Filters[0]).Name)", span="152-152", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.WildcardPropertyWithRoot()", file="JPathParseTests.cs"];
m4_78 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.WildcardPropertyWithRoot()", span="148-148", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.WildcardPropertyWithRoot()", file="JPathParseTests.cs"];
m4_0 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BooleanQuery_TwoValues()", span="49-49", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BooleanQuery_TwoValues()", file="JPathParseTests.cs"];
m4_1 [label="JPath path = new JPath(''[?(1 > 2)]'')", span="51-51", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BooleanQuery_TwoValues()", file="JPathParseTests.cs"];
m4_2 [label="Assert.AreEqual(1, path.Filters.Count)", span="52-52", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BooleanQuery_TwoValues()", file="JPathParseTests.cs"];
m4_3 [label="BooleanQueryExpression booleanExpression = (BooleanQueryExpression)((QueryFilter)path.Filters[0]).Expression", span="53-53", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BooleanQuery_TwoValues()", file="JPathParseTests.cs"];
m4_4 [label="Assert.AreEqual(1, (int)(JValue)booleanExpression.Left)", span="54-54", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BooleanQuery_TwoValues()", file="JPathParseTests.cs"];
m4_5 [label="Assert.AreEqual(2, (int)(JValue)booleanExpression.Right)", span="55-55", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BooleanQuery_TwoValues()", file="JPathParseTests.cs"];
m4_6 [label="Assert.AreEqual(QueryOperator.GreaterThan, booleanExpression.Operator)", span="56-56", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BooleanQuery_TwoValues()", file="JPathParseTests.cs"];
m4_7 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BooleanQuery_TwoValues()", span="49-49", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BooleanQuery_TwoValues()", file="JPathParseTests.cs"];
m4_126 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.OnePropertyOneScan()", span="230-230", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.OnePropertyOneScan()", file="JPathParseTests.cs"];
m4_127 [label="JPath path = new JPath(''Blah..Two'')", span="232-232", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.OnePropertyOneScan()", file="JPathParseTests.cs"];
m4_128 [label="Assert.AreEqual(2, path.Filters.Count)", span="233-233", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.OnePropertyOneScan()", file="JPathParseTests.cs"];
m4_129 [label="Assert.AreEqual(''Blah'', ((FieldFilter)path.Filters[0]).Name)", span="234-234", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.OnePropertyOneScan()", file="JPathParseTests.cs"];
m4_130 [label="Assert.AreEqual(''Two'', ((ScanFilter)path.Filters[1]).Name)", span="235-235", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.OnePropertyOneScan()", file="JPathParseTests.cs"];
m4_131 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.OnePropertyOneScan()", span="230-230", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.OnePropertyOneScan()", file="JPathParseTests.cs"];
m4_444 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexWhitespace()", span="658-658", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexWhitespace()", file="JPathParseTests.cs"];
m4_445 [label="JPath path = new JPath(''[  -111119990  :  -3  :  -2  ]'')", span="660-660", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexWhitespace()", file="JPathParseTests.cs"];
m4_446 [label="Assert.AreEqual(1, path.Filters.Count)", span="661-661", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexWhitespace()", file="JPathParseTests.cs"];
m4_447 [label="Assert.AreEqual(-111119990, ((ArraySliceFilter)path.Filters[0]).Start)", span="662-662", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexWhitespace()", file="JPathParseTests.cs"];
m4_448 [label="Assert.AreEqual(-3, ((ArraySliceFilter)path.Filters[0]).End)", span="663-663", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexWhitespace()", file="JPathParseTests.cs"];
m4_449 [label="Assert.AreEqual(-2, ((ArraySliceFilter)path.Filters[0]).Step)", span="664-664", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexWhitespace()", file="JPathParseTests.cs"];
m4_450 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexWhitespace()", span="658-658", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexWhitespace()", file="JPathParseTests.cs"];
m4_457 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.IndexerCloseInProperty()", span="674-674", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.IndexerCloseInProperty()", file="JPathParseTests.cs"];
m4_458 [label="ExceptionAssert.Throws<JsonException>(() => { new JPath('']''); }, ''Unexpected character while parsing path: ]'')", span="676-676", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.IndexerCloseInProperty()", file="JPathParseTests.cs"];
m4_459 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.IndexerCloseInProperty()", span="674-674", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.IndexerCloseInProperty()", file="JPathParseTests.cs"];
m4_302 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BaddOr2()", span="477-477", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BaddOr2()", file="JPathParseTests.cs"];
m4_303 [label="ExceptionAssert.Throws<JsonException>(() => new JPath(''[?(@.name|)]''), ''Unexpected character while parsing path query: |'')", span="479-479", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BaddOr2()", file="JPathParseTests.cs"];
m4_304 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BaddOr2()", span="477-477", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BaddOr2()", file="JPathParseTests.cs"];
m4_105 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleScanWithRoot()", span="197-197", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleScanWithRoot()", file="JPathParseTests.cs"];
m4_106 [label="JPath path = new JPath(''$..Blah'')", span="199-199", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleScanWithRoot()", file="JPathParseTests.cs"];
m4_107 [label="Assert.AreEqual(1, path.Filters.Count)", span="200-200", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleScanWithRoot()", file="JPathParseTests.cs"];
m4_108 [label="Assert.AreEqual(''Blah'', ((ScanFilter)path.Filters[0]).Name)", span="201-201", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleScanWithRoot()", file="JPathParseTests.cs"];
m4_109 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleScanWithRoot()", span="197-197", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleScanWithRoot()", file="JPathParseTests.cs"];
m4_320 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.NoAtAfterOr()", span="495-495", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.NoAtAfterOr()", file="JPathParseTests.cs"];
m4_321 [label="ExceptionAssert.Throws<JsonException>(() => new JPath(''[?(@.name||s''), ''Unexpected character while parsing path query: s'')", span="497-497", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.NoAtAfterOr()", file="JPathParseTests.cs"];
m4_322 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.NoAtAfterOr()", span="495-495", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.NoAtAfterOr()", file="JPathParseTests.cs"];
m4_338 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.NoPathAfterDot2()", span="513-513", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.NoPathAfterDot2()", file="JPathParseTests.cs"];
m4_339 [label="ExceptionAssert.Throws<JsonException>(() => new JPath(''[?(@.name||@.)]''), @''Unexpected end while parsing path.'')", span="515-515", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.NoPathAfterDot2()", file="JPathParseTests.cs"];
m4_340 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.NoPathAfterDot2()", span="513-513", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.NoPathAfterDot2()", file="JPathParseTests.cs"];
m4_156 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithEscapeQuote()", span="272-272", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithEscapeQuote()", file="JPathParseTests.cs"];
m4_157 [label="JPath path = new JPath(@''Blah[ ?( @.name=='h\'i' ) ]'')", span="274-274", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithEscapeQuote()", file="JPathParseTests.cs"];
m4_158 [label="Assert.AreEqual(2, path.Filters.Count)", span="275-275", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithEscapeQuote()", file="JPathParseTests.cs"];
m4_159 [label="Assert.AreEqual(''Blah'', ((FieldFilter)path.Filters[0]).Name)", span="276-276", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithEscapeQuote()", file="JPathParseTests.cs"];
m4_160 [label="BooleanQueryExpression expressions = (BooleanQueryExpression)((QueryFilter)path.Filters[1]).Expression", span="277-277", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithEscapeQuote()", file="JPathParseTests.cs"];
m4_161 [label="Assert.AreEqual(QueryOperator.Equals, expressions.Operator)", span="278-278", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithEscapeQuote()", file="JPathParseTests.cs"];
m4_162 [label="Assert.AreEqual(''h'i'', (string)(JToken)expressions.Right)", span="279-279", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithEscapeQuote()", file="JPathParseTests.cs"];
m4_163 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithEscapeQuote()", span="272-272", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithEscapeQuote()", file="JPathParseTests.cs"];
m4_110 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.QueryTrue()", span="205-205", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.QueryTrue()", file="JPathParseTests.cs"];
m4_111 [label="JPath path = new JPath(''$.elements[?(true)]'')", span="207-207", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.QueryTrue()", file="JPathParseTests.cs", color=green, community=0];
m4_112 [label="Assert.AreEqual(2, path.Filters.Count)", span="208-208", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.QueryTrue()", file="JPathParseTests.cs", color=green, community=0];
m4_113 [label="Assert.AreEqual(''elements'', ((FieldFilter)path.Filters[0]).Name)", span="209-209", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.QueryTrue()", file="JPathParseTests.cs", color=green, community=0];
m4_114 [label="Assert.AreEqual(QueryOperator.Exists, ((QueryFilter)path.Filters[1]).Expression.Operator)", span="210-210", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.QueryTrue()", file="JPathParseTests.cs", color=green, community=0];
m4_253 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterExistWithAnd()", span="414-414", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterExistWithAnd()", file="JPathParseTests.cs"];
m4_254 [label="JPath path = new JPath(''[?(@.name&&@.title)]'')", span="416-416", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterExistWithAnd()", file="JPathParseTests.cs"];
m4_255 [label="CompositeExpression expressions = (CompositeExpression)((QueryFilter)path.Filters[0]).Expression", span="417-417", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterExistWithAnd()", file="JPathParseTests.cs"];
m4_256 [label="Assert.AreEqual(QueryOperator.And, expressions.Operator)", span="418-418", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterExistWithAnd()", file="JPathParseTests.cs"];
m4_257 [label="Assert.AreEqual(2, expressions.Expressions.Count)", span="419-419", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterExistWithAnd()", file="JPathParseTests.cs"];
m4_258 [label="var first = (BooleanQueryExpression)expressions.Expressions[0]", span="421-421", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterExistWithAnd()", file="JPathParseTests.cs"];
m4_262 [label="var second = (BooleanQueryExpression)expressions.Expressions[1]", span="426-426", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterExistWithAnd()", file="JPathParseTests.cs"];
m4_259 [label="var firstPaths = (List<PathFilter>)first.Left", span="422-422", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterExistWithAnd()", file="JPathParseTests.cs"];
m4_261 [label="Assert.AreEqual(QueryOperator.Exists, first.Operator)", span="424-424", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterExistWithAnd()", file="JPathParseTests.cs"];
m4_260 [label="Assert.AreEqual(''name'', ((FieldFilter)firstPaths[0]).Name)", span="423-423", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterExistWithAnd()", file="JPathParseTests.cs"];
m4_263 [label="var secondPaths = (List<PathFilter>)second.Left", span="427-427", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterExistWithAnd()", file="JPathParseTests.cs"];
m4_265 [label="Assert.AreEqual(QueryOperator.Exists, second.Operator)", span="429-429", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterExistWithAnd()", file="JPathParseTests.cs"];
m4_264 [label="Assert.AreEqual(''title'', ((FieldFilter)secondPaths[0]).Name)", span="428-428", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterExistWithAnd()", file="JPathParseTests.cs"];
m4_266 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterExistWithAnd()", span="414-414", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterExistWithAnd()", file="JPathParseTests.cs"];
m4_10 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BooleanQuery_TwoPaths()", span="60-60", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BooleanQuery_TwoPaths()", file="JPathParseTests.cs"];
m4_11 [label="JPath path = new JPath(''[?(@.price > @.max_price)]'')", span="62-62", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BooleanQuery_TwoPaths()", file="JPathParseTests.cs"];
m4_12 [label="Assert.AreEqual(1, path.Filters.Count)", span="63-63", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BooleanQuery_TwoPaths()", file="JPathParseTests.cs"];
m4_13 [label="BooleanQueryExpression booleanExpression = (BooleanQueryExpression)((QueryFilter)path.Filters[0]).Expression", span="64-64", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BooleanQuery_TwoPaths()", file="JPathParseTests.cs"];
m4_14 [label="List<PathFilter> leftPaths = (List<PathFilter>)booleanExpression.Left", span="65-65", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BooleanQuery_TwoPaths()", file="JPathParseTests.cs"];
m4_15 [label="List<PathFilter> rightPaths = (List<PathFilter>)booleanExpression.Right", span="66-66", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BooleanQuery_TwoPaths()", file="JPathParseTests.cs"];
m4_18 [label="Assert.AreEqual(QueryOperator.GreaterThan, booleanExpression.Operator)", span="70-70", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BooleanQuery_TwoPaths()", file="JPathParseTests.cs"];
m4_16 [label="Assert.AreEqual(''price'', ((FieldFilter)leftPaths[0]).Name)", span="68-68", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BooleanQuery_TwoPaths()", file="JPathParseTests.cs"];
m4_17 [label="Assert.AreEqual(''max_price'', ((FieldFilter)rightPaths[0]).Name)", span="69-69", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BooleanQuery_TwoPaths()", file="JPathParseTests.cs"];
m4_19 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BooleanQuery_TwoPaths()", span="60-60", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BooleanQuery_TwoPaths()", file="JPathParseTests.cs"];
m4_326 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.NoPathAfterAt()", span="501-501", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.NoPathAfterAt()", file="JPathParseTests.cs"];
m4_327 [label="ExceptionAssert.Throws<JsonException>(() => new JPath(''[?(@.name||@''), @''Path ended with open query.'')", span="503-503", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.NoPathAfterAt()", file="JPathParseTests.cs"];
m4_328 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.NoPathAfterAt()", span="501-501", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.NoPathAfterAt()", file="JPathParseTests.cs"];
m4_68 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.RootWithBadWhitespace2()", span="142-142", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.RootWithBadWhitespace2()", file="JPathParseTests.cs"];
m4_69 [label="ExceptionAssert.Throws<JsonException>(() => { new JPath(''$. Blah''); }, @''Unexpected character while parsing path:  '')", span="144-144", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.RootWithBadWhitespace2()", file="JPathParseTests.cs"];
m4_70 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.RootWithBadWhitespace2()", span="142-142", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.RootWithBadWhitespace2()", file="JPathParseTests.cs"];
m4_45 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyWithRoot()", span="114-114", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyWithRoot()", file="JPathParseTests.cs"];
m4_46 [label="JPath path = new JPath(''$.Blah'')", span="116-116", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyWithRoot()", file="JPathParseTests.cs"];
m4_47 [label="Assert.AreEqual(1, path.Filters.Count)", span="117-117", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyWithRoot()", file="JPathParseTests.cs"];
m4_48 [label="Assert.AreEqual(''Blah'', ((FieldFilter)path.Filters[0]).Name)", span="118-118", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyWithRoot()", file="JPathParseTests.cs"];
m4_49 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyWithRoot()", span="114-114", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyWithRoot()", file="JPathParseTests.cs"];
m4_248 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithFloat()", span="406-406", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithFloat()", file="JPathParseTests.cs"];
m4_249 [label="JPath path = new JPath(''[?(@.name>=12.1)]'')", span="408-408", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithFloat()", file="JPathParseTests.cs"];
m4_250 [label="BooleanQueryExpression expressions = (BooleanQueryExpression)((QueryFilter)path.Filters[0]).Expression", span="409-409", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithFloat()", file="JPathParseTests.cs"];
m4_251 [label="Assert.AreEqual(12.1d, (double)(JToken)expressions.Right)", span="410-410", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithFloat()", file="JPathParseTests.cs"];
m4_252 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithFloat()", span="406-406", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithFloat()", file="JPathParseTests.cs"];
m4_62 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.NoFieldNameAfterDot()", span="136-136", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.NoFieldNameAfterDot()", file="JPathParseTests.cs"];
m4_63 [label="ExceptionAssert.Throws<JsonException>(() => { new JPath(''$.Blah.''); }, @''Unexpected end while parsing path.'')", span="138-138", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.NoFieldNameAfterDot()", file="JPathParseTests.cs"];
m4_64 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.NoFieldNameAfterDot()", span="136-136", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.NoFieldNameAfterDot()", file="JPathParseTests.cs"];
m4_213 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithNotEquals2()", span="350-350", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithNotEquals2()", file="JPathParseTests.cs"];
m4_214 [label="JPath path = new JPath(''[?(@.name!=null)]'')", span="352-352", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithNotEquals2()", file="JPathParseTests.cs"];
m4_215 [label="BooleanQueryExpression expressions = (BooleanQueryExpression)((QueryFilter)path.Filters[0]).Expression", span="353-353", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithNotEquals2()", file="JPathParseTests.cs"];
m4_216 [label="Assert.AreEqual(QueryOperator.NotEquals, expressions.Operator)", span="354-354", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithNotEquals2()", file="JPathParseTests.cs"];
m4_217 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithNotEquals2()", span="350-350", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithNotEquals2()", file="JPathParseTests.cs"];
m4_55 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.RootWithBadWhitespace()", span="130-130", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.RootWithBadWhitespace()", file="JPathParseTests.cs"];
m4_56 [label="ExceptionAssert.Throws<JsonException>(() => { new JPath(''$ .Blah''); }, @''Unexpected character while parsing path:  '')", span="132-132", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.RootWithBadWhitespace()", file="JPathParseTests.cs"];
m4_57 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.RootWithBadWhitespace()", span="130-130", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.RootWithBadWhitespace()", file="JPathParseTests.cs"];
m4_84 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.RootArrayNoDot()", span="164-164", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.RootArrayNoDot()", file="JPathParseTests.cs"];
m4_85 [label="JPath path = new JPath(''$[1]'')", span="166-166", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.RootArrayNoDot()", file="JPathParseTests.cs"];
m4_86 [label="Assert.AreEqual(1, path.Filters.Count)", span="167-167", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.RootArrayNoDot()", file="JPathParseTests.cs"];
m4_87 [label="Assert.AreEqual(1, ((ArrayIndexFilter)path.Filters[0]).Index)", span="168-168", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.RootArrayNoDot()", file="JPathParseTests.cs"];
m4_88 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.RootArrayNoDot()", span="164-164", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.RootArrayNoDot()", file="JPathParseTests.cs"];
m4_267 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterExistWithAndOr()", span="433-433", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterExistWithAndOr()", file="JPathParseTests.cs"];
m4_268 [label="JPath path = new JPath(''[?(@.name&&@.title||@.pie)]'')", span="435-435", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterExistWithAndOr()", file="JPathParseTests.cs"];
m4_269 [label="CompositeExpression andExpression = (CompositeExpression)((QueryFilter)path.Filters[0]).Expression", span="436-436", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterExistWithAndOr()", file="JPathParseTests.cs"];
m4_270 [label="Assert.AreEqual(QueryOperator.And, andExpression.Operator)", span="437-437", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterExistWithAndOr()", file="JPathParseTests.cs"];
m4_271 [label="Assert.AreEqual(2, andExpression.Expressions.Count)", span="438-438", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterExistWithAndOr()", file="JPathParseTests.cs"];
m4_272 [label="var first = (BooleanQueryExpression)andExpression.Expressions[0]", span="440-440", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterExistWithAndOr()", file="JPathParseTests.cs"];
m4_276 [label="CompositeExpression orExpression = (CompositeExpression)andExpression.Expressions[1]", span="445-445", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterExistWithAndOr()", file="JPathParseTests.cs"];
m4_273 [label="var firstPaths = (List<PathFilter>)first.Left", span="441-441", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterExistWithAndOr()", file="JPathParseTests.cs"];
m4_275 [label="Assert.AreEqual(QueryOperator.Exists, first.Operator)", span="443-443", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterExistWithAndOr()", file="JPathParseTests.cs"];
m4_274 [label="Assert.AreEqual(''name'', ((FieldFilter)firstPaths[0]).Name)", span="442-442", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterExistWithAndOr()", file="JPathParseTests.cs"];
m4_277 [label="Assert.AreEqual(2, orExpression.Expressions.Count)", span="446-446", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterExistWithAndOr()", file="JPathParseTests.cs"];
m4_278 [label="var orFirst = (BooleanQueryExpression)orExpression.Expressions[0]", span="448-448", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterExistWithAndOr()", file="JPathParseTests.cs"];
m4_282 [label="var orSecond = (BooleanQueryExpression)orExpression.Expressions[1]", span="453-453", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterExistWithAndOr()", file="JPathParseTests.cs"];
m4_279 [label="var orFirstPaths = (List<PathFilter>)orFirst.Left", span="449-449", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterExistWithAndOr()", file="JPathParseTests.cs"];
m4_281 [label="Assert.AreEqual(QueryOperator.Exists, orFirst.Operator)", span="451-451", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterExistWithAndOr()", file="JPathParseTests.cs"];
m4_280 [label="Assert.AreEqual(''title'', ((FieldFilter)orFirstPaths[0]).Name)", span="450-450", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterExistWithAndOr()", file="JPathParseTests.cs"];
m4_283 [label="var orSecondPaths = (List<PathFilter>)orSecond.Left", span="454-454", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterExistWithAndOr()", file="JPathParseTests.cs"];
m4_285 [label="Assert.AreEqual(QueryOperator.Exists, orSecond.Operator)", span="456-456", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterExistWithAndOr()", file="JPathParseTests.cs"];
m4_284 [label="Assert.AreEqual(''pie'', ((FieldFilter)orSecondPaths[0]).Name)", span="455-455", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterExistWithAndOr()", file="JPathParseTests.cs"];
m4_286 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterExistWithAndOr()", span="433-433", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterExistWithAndOr()", file="JPathParseTests.cs"];
m4_138 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndExistsQuery()", span="248-248", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndExistsQuery()", file="JPathParseTests.cs"];
m4_139 [label="JPath path = new JPath(''Blah[ ?( @..name ) ]'')", span="250-250", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndExistsQuery()", file="JPathParseTests.cs"];
m4_140 [label="Assert.AreEqual(2, path.Filters.Count)", span="251-251", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndExistsQuery()", file="JPathParseTests.cs"];
m4_141 [label="Assert.AreEqual(''Blah'', ((FieldFilter)path.Filters[0]).Name)", span="252-252", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndExistsQuery()", file="JPathParseTests.cs"];
m4_142 [label="BooleanQueryExpression expressions = (BooleanQueryExpression)((QueryFilter)path.Filters[1]).Expression", span="253-253", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndExistsQuery()", file="JPathParseTests.cs"];
m4_143 [label="Assert.AreEqual(QueryOperator.Exists, expressions.Operator)", span="254-254", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndExistsQuery()", file="JPathParseTests.cs"];
m4_144 [label="List<PathFilter> paths = (List<PathFilter>)expressions.Left", span="255-255", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndExistsQuery()", file="JPathParseTests.cs"];
m4_145 [label="Assert.AreEqual(1, paths.Count)", span="256-256", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndExistsQuery()", file="JPathParseTests.cs"];
m4_146 [label="Assert.AreEqual(''name'', ((ScanFilter)paths[0]).Name)", span="257-257", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndExistsQuery()", file="JPathParseTests.cs"];
m4_147 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndExistsQuery()", span="248-248", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndExistsQuery()", file="JPathParseTests.cs"];
m4_223 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithLessThanOrEquals()", span="366-366", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithLessThanOrEquals()", file="JPathParseTests.cs"];
m4_224 [label="JPath path = new JPath(''[?(@.name<=null)]'')", span="368-368", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithLessThanOrEquals()", file="JPathParseTests.cs"];
m4_225 [label="BooleanQueryExpression expressions = (BooleanQueryExpression)((QueryFilter)path.Filters[0]).Expression", span="369-369", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithLessThanOrEquals()", file="JPathParseTests.cs"];
m4_226 [label="Assert.AreEqual(QueryOperator.LessThanOrEquals, expressions.Operator)", span="370-370", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithLessThanOrEquals()", file="JPathParseTests.cs"];
m4_227 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithLessThanOrEquals()", span="366-366", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithLessThanOrEquals()", file="JPathParseTests.cs"];
m4_172 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithUnknownEscape()", span="294-294", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithUnknownEscape()", file="JPathParseTests.cs"];
m4_173 [label="ExceptionAssert.Throws<JsonException>(() => { new JPath(@''Blah[ ?( @.name=='h\i' ) ]''); }, @''Unknown escape character: \i'')", span="296-296", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithUnknownEscape()", file="JPathParseTests.cs"];
m4_174 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithUnknownEscape()", span="294-294", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithUnknownEscape()", file="JPathParseTests.cs"];
m4_332 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.NoPathAfterDot()", span="507-507", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.NoPathAfterDot()", file="JPathParseTests.cs"];
m4_333 [label="ExceptionAssert.Throws<JsonException>(() => new JPath(''[?(@.name||@.''), @''Unexpected end while parsing path.'')", span="509-509", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.NoPathAfterDot()", file="JPathParseTests.cs"];
m4_334 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.NoPathAfterDot()", span="507-507", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.NoPathAfterDot()", file="JPathParseTests.cs"];
m4_371 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.IndexerOnly()", span="552-552", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.IndexerOnly()", file="JPathParseTests.cs"];
m4_372 [label="JPath path = new JPath(''[111119990]'')", span="554-554", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.IndexerOnly()", file="JPathParseTests.cs"];
m4_373 [label="Assert.AreEqual(1, path.Filters.Count)", span="555-555", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.IndexerOnly()", file="JPathParseTests.cs"];
m4_374 [label="Assert.AreEqual(111119990, ((ArrayIndexFilter)path.Filters[0]).Index)", span="556-556", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.IndexerOnly()", file="JPathParseTests.cs"];
m4_375 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.IndexerOnly()", span="552-552", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.IndexerOnly()", file="JPathParseTests.cs"];
m4_416 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndex()", span="618-618", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndex()", file="JPathParseTests.cs"];
m4_417 [label="JPath path = new JPath(''[111119990:3]'')", span="620-620", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndex()", file="JPathParseTests.cs"];
m4_418 [label="Assert.AreEqual(1, path.Filters.Count)", span="621-621", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndex()", file="JPathParseTests.cs"];
m4_419 [label="Assert.AreEqual(111119990, ((ArraySliceFilter)path.Filters[0]).Start)", span="622-622", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndex()", file="JPathParseTests.cs"];
m4_420 [label="Assert.AreEqual(3, ((ArraySliceFilter)path.Filters[0]).End)", span="623-623", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndex()", file="JPathParseTests.cs"];
m4_421 [label="Assert.AreEqual(null, ((ArraySliceFilter)path.Filters[0]).Step)", span="624-624", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndex()", file="JPathParseTests.cs"];
m4_422 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndex()", span="618-618", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndex()", file="JPathParseTests.cs"];
m4_451 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.EmptyIndexer()", span="668-668", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.EmptyIndexer()", file="JPathParseTests.cs"];
m4_452 [label="ExceptionAssert.Throws<JsonException>(() => { new JPath(''[]''); }, ''Array index expected.'')", span="670-670", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.EmptyIndexer()", file="JPathParseTests.cs"];
m4_453 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.EmptyIndexer()", span="668-668", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.EmptyIndexer()", file="JPathParseTests.cs"];
m4_115 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.QueryTrue()", span="205-205", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.QueryTrue()", file="JPathParseTests.cs"];
m4_116 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.ScanQuery()", span="214-214", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.ScanQuery()", file="JPathParseTests.cs"];
m4_117 [label="JPath path = new JPath(''$.elements..[?(@.id=='AAA')]'')", span="216-216", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.ScanQuery()", file="JPathParseTests.cs", color=green, community=0];
m4_118 [label="Assert.AreEqual(2, path.Filters.Count)", span="217-217", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.ScanQuery()", file="JPathParseTests.cs", color=green, community=0];
m4_119 [label="Assert.AreEqual(''elements'', ((FieldFilter)path.Filters[0]).Name)", span="218-218", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.ScanQuery()", file="JPathParseTests.cs", color=green, community=0];
m4_120 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.TwoProperties()", span="221-221", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.TwoProperties()", color=green, community=0, file="JPathParseTests.cs"];
m4_121 [label="JPath path = new JPath(''Blah.Two'')", span="223-223", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.TwoProperties()", color=green, community=0, file="JPathParseTests.cs"];
m4_122 [label="Assert.AreEqual(2, path.Filters.Count)", span="224-224", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.TwoProperties()", color=green, community=0, file="JPathParseTests.cs"];
m4_123 [label="Assert.AreEqual(''Blah'', ((FieldFilter)path.Filters[0]).Name)", span="225-225", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.TwoProperties()", file="JPathParseTests.cs"];
m4_79 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.WildcardArrayWithRoot()", span="156-156", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.WildcardArrayWithRoot()", file="JPathParseTests.cs"];
m4_80 [label="JPath path = new JPath(''$.[*]'')", span="158-158", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.WildcardArrayWithRoot()", file="JPathParseTests.cs"];
m4_81 [label="Assert.AreEqual(1, path.Filters.Count)", span="159-159", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.WildcardArrayWithRoot()", file="JPathParseTests.cs"];
m4_82 [label="Assert.AreEqual(null, ((ArrayIndexFilter)path.Filters[0]).Index)", span="160-160", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.WildcardArrayWithRoot()", file="JPathParseTests.cs"];
m4_83 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.WildcardArrayWithRoot()", span="156-156", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.WildcardArrayWithRoot()", file="JPathParseTests.cs"];
m4_9 [label="Entry Unk.AreEqual", span="", cluster="Unk.AreEqual", file="JPathParseTests.cs"];
m4_409 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexAll()", span="608-608", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexAll()", file="JPathParseTests.cs"];
m4_410 [label="JPath path = new JPath(''[111119990:3:2]'')", span="610-610", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexAll()", file="JPathParseTests.cs"];
m4_411 [label="Assert.AreEqual(1, path.Filters.Count)", span="611-611", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexAll()", file="JPathParseTests.cs"];
m4_412 [label="Assert.AreEqual(111119990, ((ArraySliceFilter)path.Filters[0]).Start)", span="612-612", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexAll()", file="JPathParseTests.cs"];
m4_413 [label="Assert.AreEqual(3, ((ArraySliceFilter)path.Filters[0]).End)", span="613-613", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexAll()", file="JPathParseTests.cs"];
m4_414 [label="Assert.AreEqual(2, ((ArraySliceFilter)path.Filters[0]).Step)", span="614-614", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexAll()", file="JPathParseTests.cs"];
m4_415 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexAll()", span="608-608", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexAll()", file="JPathParseTests.cs"];
m4_208 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithNotEquals()", span="342-342", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithNotEquals()", file="JPathParseTests.cs"];
m4_209 [label="JPath path = new JPath(''[?(@.name<>null)]'')", span="344-344", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithNotEquals()", file="JPathParseTests.cs"];
m4_210 [label="BooleanQueryExpression expressions = (BooleanQueryExpression)((QueryFilter)path.Filters[0]).Expression", span="345-345", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithNotEquals()", file="JPathParseTests.cs"];
m4_211 [label="Assert.AreEqual(QueryOperator.NotEquals, expressions.Operator)", span="346-346", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithNotEquals()", file="JPathParseTests.cs"];
m4_212 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithNotEquals()", span="342-342", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithNotEquals()", file="JPathParseTests.cs"];
m4_194 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithNull()", span="322-322", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithNull()", file="JPathParseTests.cs"];
m4_195 [label="JPath path = new JPath(''Blah[ ?( @.name==null ) ]'')", span="324-324", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithNull()", file="JPathParseTests.cs"];
m4_196 [label="Assert.AreEqual(2, path.Filters.Count)", span="325-325", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithNull()", file="JPathParseTests.cs"];
m4_197 [label="Assert.AreEqual(''Blah'', ((FieldFilter)path.Filters[0]).Name)", span="326-326", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithNull()", file="JPathParseTests.cs"];
m4_198 [label="BooleanQueryExpression expressions = (BooleanQueryExpression)((QueryFilter)path.Filters[1]).Expression", span="327-327", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithNull()", file="JPathParseTests.cs"];
m4_199 [label="Assert.AreEqual(QueryOperator.Equals, expressions.Operator)", span="328-328", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithNull()", file="JPathParseTests.cs"];
m4_200 [label="Assert.AreEqual(null, ((JValue)expressions.Right).Value)", span="329-329", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithNull()", file="JPathParseTests.cs"];
m4_201 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithNull()", span="322-322", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithNull()", file="JPathParseTests.cs"];
m4_365 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.UnclosedIndexer()", span="546-546", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.UnclosedIndexer()", file="JPathParseTests.cs"];
m4_366 [label="ExceptionAssert.Throws<JsonException>(() => { new JPath(''Blah[0''); }, @''Path ended with open indexer.'')", span="548-548", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.UnclosedIndexer()", file="JPathParseTests.cs"];
m4_367 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.UnclosedIndexer()", span="546-546", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.UnclosedIndexer()", file="JPathParseTests.cs"];
m4_359 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BadCharactersInIndexer()", span="540-540", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BadCharactersInIndexer()", file="JPathParseTests.cs"];
m4_360 [label="ExceptionAssert.Throws<JsonException>(() => { new JPath(''Blah[[0]].Two.Three[1].Four''); }, @''Unexpected character while parsing path indexer: ['')", span="542-542", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BadCharactersInIndexer()", file="JPathParseTests.cs"];
m4_361 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BadCharactersInIndexer()", span="540-540", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BadCharactersInIndexer()", file="JPathParseTests.cs"];
m4_477 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.PropertyFollowingEscapedPropertyName()", span="697-697", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.PropertyFollowingEscapedPropertyName()", file="JPathParseTests.cs"];
m4_478 [label="JPath path = new JPath(''frameworks.dnxcore50.dependencies.['System.Xml.ReaderWriter'].source'')", span="699-699", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.PropertyFollowingEscapedPropertyName()", file="JPathParseTests.cs"];
m4_479 [label="Assert.AreEqual(5, path.Filters.Count)", span="700-700", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.PropertyFollowingEscapedPropertyName()", file="JPathParseTests.cs"];
m4_480 [label="Assert.AreEqual(''frameworks'', ((FieldFilter)path.Filters[0]).Name)", span="702-702", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.PropertyFollowingEscapedPropertyName()", file="JPathParseTests.cs"];
m4_481 [label="Assert.AreEqual(''dnxcore50'', ((FieldFilter)path.Filters[1]).Name)", span="703-703", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.PropertyFollowingEscapedPropertyName()", file="JPathParseTests.cs"];
m4_482 [label="Assert.AreEqual(''dependencies'', ((FieldFilter)path.Filters[2]).Name)", span="704-704", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.PropertyFollowingEscapedPropertyName()", file="JPathParseTests.cs"];
m4_483 [label="Assert.AreEqual(''System.Xml.ReaderWriter'', ((FieldFilter)path.Filters[3]).Name)", span="705-705", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.PropertyFollowingEscapedPropertyName()", file="JPathParseTests.cs"];
m4_484 [label="Assert.AreEqual(''source'', ((FieldFilter)path.Filters[4]).Name)", span="706-706", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.PropertyFollowingEscapedPropertyName()", file="JPathParseTests.cs"];
m4_485 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.PropertyFollowingEscapedPropertyName()", span="697-697", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.PropertyFollowingEscapedPropertyName()", file="JPathParseTests.cs"];
m4_148 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithWhitespace()", span="261-261", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithWhitespace()", file="JPathParseTests.cs"];
m4_149 [label="JPath path = new JPath(''Blah[ ?( @.name=='hi' ) ]'')", span="263-263", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithWhitespace()", file="JPathParseTests.cs"];
m4_150 [label="Assert.AreEqual(2, path.Filters.Count)", span="264-264", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithWhitespace()", file="JPathParseTests.cs"];
m4_151 [label="Assert.AreEqual(''Blah'', ((FieldFilter)path.Filters[0]).Name)", span="265-265", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithWhitespace()", file="JPathParseTests.cs"];
m4_152 [label="BooleanQueryExpression expressions = (BooleanQueryExpression)((QueryFilter)path.Filters[1]).Expression", span="266-266", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithWhitespace()", file="JPathParseTests.cs"];
m4_153 [label="Assert.AreEqual(QueryOperator.Equals, expressions.Operator)", span="267-267", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithWhitespace()", file="JPathParseTests.cs"];
m4_154 [label="Assert.AreEqual(''hi'', (string)(JToken)expressions.Right)", span="268-268", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithWhitespace()", file="JPathParseTests.cs"];
m4_155 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithWhitespace()", span="261-261", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithWhitespace()", file="JPathParseTests.cs"];
m4_423 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexNegative()", span="628-628", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexNegative()", file="JPathParseTests.cs"];
m4_424 [label="JPath path = new JPath(''[-111119990:-3:-2]'')", span="630-630", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexNegative()", file="JPathParseTests.cs"];
m4_425 [label="Assert.AreEqual(1, path.Filters.Count)", span="631-631", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexNegative()", file="JPathParseTests.cs"];
m4_426 [label="Assert.AreEqual(-111119990, ((ArraySliceFilter)path.Filters[0]).Start)", span="632-632", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexNegative()", file="JPathParseTests.cs"];
m4_427 [label="Assert.AreEqual(-3, ((ArraySliceFilter)path.Filters[0]).End)", span="633-633", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexNegative()", file="JPathParseTests.cs"];
m4_428 [label="Assert.AreEqual(-2, ((ArraySliceFilter)path.Filters[0]).Step)", span="634-634", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexNegative()", file="JPathParseTests.cs"];
m4_429 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexNegative()", span="628-628", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexNegative()", file="JPathParseTests.cs"];
m4_376 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.IndexerOnlyWithWhitespace()", span="560-560", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.IndexerOnlyWithWhitespace()", file="JPathParseTests.cs"];
m4_377 [label="JPath path = new JPath(''[  10  ]'')", span="562-562", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.IndexerOnlyWithWhitespace()", file="JPathParseTests.cs"];
m4_378 [label="Assert.AreEqual(1, path.Filters.Count)", span="563-563", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.IndexerOnlyWithWhitespace()", file="JPathParseTests.cs"];
m4_379 [label="Assert.AreEqual(10, ((ArrayIndexFilter)path.Filters[0]).Index)", span="564-564", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.IndexerOnlyWithWhitespace()", file="JPathParseTests.cs"];
m4_380 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.IndexerOnlyWithWhitespace()", span="560-560", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.IndexerOnlyWithWhitespace()", file="JPathParseTests.cs"];
m4_402 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultipleQuotedIndexesWithWhitespace()", span="598-598", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultipleQuotedIndexesWithWhitespace()", file="JPathParseTests.cs"];
m4_403 [label="JPath path = new JPath(''[ '111119990' , '3' ]'')", span="600-600", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultipleQuotedIndexesWithWhitespace()", file="JPathParseTests.cs"];
m4_404 [label="Assert.AreEqual(1, path.Filters.Count)", span="601-601", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultipleQuotedIndexesWithWhitespace()", file="JPathParseTests.cs"];
m4_405 [label="Assert.AreEqual(2, ((FieldMultipleFilter)path.Filters[0]).Names.Count)", span="602-602", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultipleQuotedIndexesWithWhitespace()", file="JPathParseTests.cs"];
m4_406 [label="Assert.AreEqual(''111119990'', ((FieldMultipleFilter)path.Filters[0]).Names[0])", span="603-603", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultipleQuotedIndexesWithWhitespace()", file="JPathParseTests.cs"];
m4_407 [label="Assert.AreEqual(''3'', ((FieldMultipleFilter)path.Filters[0]).Names[1])", span="604-604", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultipleQuotedIndexesWithWhitespace()", file="JPathParseTests.cs"];
m4_408 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultipleQuotedIndexesWithWhitespace()", span="598-598", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultipleQuotedIndexesWithWhitespace()", file="JPathParseTests.cs"];
m4_35 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleQuotedPropertyWithDots()", span="98-98", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleQuotedPropertyWithDots()", file="JPathParseTests.cs"];
m4_36 [label="JPath path = new JPath(''['Blah.Ha']'')", span="100-100", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleQuotedPropertyWithDots()", file="JPathParseTests.cs"];
m4_37 [label="Assert.AreEqual(1, path.Filters.Count)", span="101-101", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleQuotedPropertyWithDots()", file="JPathParseTests.cs"];
m4_38 [label="Assert.AreEqual(''Blah.Ha'', ((FieldFilter)path.Filters[0]).Name)", span="102-102", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleQuotedPropertyWithDots()", file="JPathParseTests.cs"];
m4_39 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleQuotedPropertyWithDots()", span="98-98", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleQuotedPropertyWithDots()", file="JPathParseTests.cs"];
m4_388 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultipleIndexesWithWhitespace()", span="578-578", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultipleIndexesWithWhitespace()", file="JPathParseTests.cs"];
m4_389 [label="JPath path = new JPath(''[   111119990  ,   3   ]'')", span="580-580", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultipleIndexesWithWhitespace()", file="JPathParseTests.cs"];
m4_390 [label="Assert.AreEqual(1, path.Filters.Count)", span="581-581", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultipleIndexesWithWhitespace()", file="JPathParseTests.cs"];
m4_391 [label="Assert.AreEqual(2, ((ArrayMultipleIndexFilter)path.Filters[0]).Indexes.Count)", span="582-582", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultipleIndexesWithWhitespace()", file="JPathParseTests.cs"];
m4_392 [label="Assert.AreEqual(111119990, ((ArrayMultipleIndexFilter)path.Filters[0]).Indexes[0])", span="583-583", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultipleIndexesWithWhitespace()", file="JPathParseTests.cs"];
m4_393 [label="Assert.AreEqual(3, ((ArrayMultipleIndexFilter)path.Filters[0]).Indexes[1])", span="584-584", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultipleIndexesWithWhitespace()", file="JPathParseTests.cs"];
m4_394 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultipleIndexesWithWhitespace()", span="578-578", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultipleIndexesWithWhitespace()", file="JPathParseTests.cs"];
m4_296 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BadOr1()", span="471-471", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BadOr1()", file="JPathParseTests.cs"];
m4_297 [label="ExceptionAssert.Throws<JsonException>(() => new JPath(''[?(@.name||)]''), ''Unexpected character while parsing path query: )'')", span="473-473", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BadOr1()", file="JPathParseTests.cs"];
m4_298 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BadOr1()", span="471-471", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BadOr1()", file="JPathParseTests.cs"];
m4_471 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MissingDotAfterIndexer()", span="691-691", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MissingDotAfterIndexer()", file="JPathParseTests.cs"];
m4_472 [label="ExceptionAssert.Throws<JsonException>(() => { new JPath(''[1]Blah''); }, ''Unexpected character following indexer: B'')", span="693-693", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MissingDotAfterIndexer()", file="JPathParseTests.cs"];
m4_473 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MissingDotAfterIndexer()", span="691-691", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MissingDotAfterIndexer()", file="JPathParseTests.cs"];
m4_178 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithFalse()", span="300-300", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithFalse()", file="JPathParseTests.cs"];
m4_179 [label="JPath path = new JPath(''Blah[ ?( @.name==false ) ]'')", span="302-302", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithFalse()", file="JPathParseTests.cs"];
m4_180 [label="Assert.AreEqual(2, path.Filters.Count)", span="303-303", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithFalse()", file="JPathParseTests.cs"];
m4_181 [label="Assert.AreEqual(''Blah'', ((FieldFilter)path.Filters[0]).Name)", span="304-304", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithFalse()", file="JPathParseTests.cs"];
m4_182 [label="BooleanQueryExpression expressions = (BooleanQueryExpression)((QueryFilter)path.Filters[1]).Expression", span="305-305", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithFalse()", file="JPathParseTests.cs"];
m4_183 [label="Assert.AreEqual(QueryOperator.Equals, expressions.Operator)", span="306-306", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithFalse()", file="JPathParseTests.cs"];
m4_184 [label="Assert.AreEqual(false, (bool)(JToken)expressions.Right)", span="307-307", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithFalse()", file="JPathParseTests.cs"];
m4_185 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithFalse()", span="300-300", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithFalse()", file="JPathParseTests.cs"];
m4_89 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.WildcardArray()", span="172-172", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.WildcardArray()", file="JPathParseTests.cs"];
m4_90 [label="JPath path = new JPath(''[*]'')", span="174-174", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.WildcardArray()", file="JPathParseTests.cs"];
m4_91 [label="Assert.AreEqual(1, path.Filters.Count)", span="175-175", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.WildcardArray()", file="JPathParseTests.cs"];
m4_92 [label="Assert.AreEqual(null, ((ArrayIndexFilter)path.Filters[0]).Index)", span="176-176", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.WildcardArray()", file="JPathParseTests.cs"];
m4_93 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.WildcardArray()", span="172-172", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.WildcardArray()", file="JPathParseTests.cs"];
m4_50 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyWithRootWithStartAndEndWhitespace()", span="122-122", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyWithRootWithStartAndEndWhitespace()", file="JPathParseTests.cs"];
m4_51 [label="JPath path = new JPath('' $.Blah '')", span="124-124", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyWithRootWithStartAndEndWhitespace()", file="JPathParseTests.cs"];
m4_52 [label="Assert.AreEqual(1, path.Filters.Count)", span="125-125", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyWithRootWithStartAndEndWhitespace()", file="JPathParseTests.cs"];
m4_53 [label="Assert.AreEqual(''Blah'', ((FieldFilter)path.Filters[0]).Name)", span="126-126", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyWithRootWithStartAndEndWhitespace()", file="JPathParseTests.cs"];
m4_54 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyWithRootWithStartAndEndWhitespace()", span="122-122", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyWithRootWithStartAndEndWhitespace()", file="JPathParseTests.cs"];
m4_30 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleQuotedPropertyWithWhitespace()", span="90-90", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleQuotedPropertyWithWhitespace()", file="JPathParseTests.cs"];
m4_31 [label="JPath path = new JPath(''[  'Blah'  ]'')", span="92-92", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleQuotedPropertyWithWhitespace()", file="JPathParseTests.cs"];
m4_32 [label="Assert.AreEqual(1, path.Filters.Count)", span="93-93", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleQuotedPropertyWithWhitespace()", file="JPathParseTests.cs"];
m4_33 [label="Assert.AreEqual(''Blah'', ((FieldFilter)path.Filters[0]).Name)", span="94-94", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleQuotedPropertyWithWhitespace()", file="JPathParseTests.cs"];
m4_34 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleQuotedPropertyWithWhitespace()", span="90-90", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleQuotedPropertyWithWhitespace()", file="JPathParseTests.cs"];
m4_202 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithScan()", span="333-333", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithScan()", file="JPathParseTests.cs"];
m4_203 [label="JPath path = new JPath(''[?(@..name<>null)]'')", span="335-335", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithScan()", file="JPathParseTests.cs"];
m4_204 [label="BooleanQueryExpression expressions = (BooleanQueryExpression)((QueryFilter)path.Filters[0]).Expression", span="336-336", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithScan()", file="JPathParseTests.cs"];
m4_205 [label="List<PathFilter> paths = (List<PathFilter>)expressions.Left", span="337-337", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithScan()", file="JPathParseTests.cs"];
m4_206 [label="Assert.AreEqual(''name'', ((ScanFilter)paths[0]).Name)", span="338-338", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithScan()", file="JPathParseTests.cs"];
m4_207 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithScan()", span="333-333", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithScan()", file="JPathParseTests.cs"];
m4_238 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithInteger()", span="390-390", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithInteger()", file="JPathParseTests.cs"];
m4_239 [label="JPath path = new JPath(''[?(@.name>=12)]'')", span="392-392", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithInteger()", file="JPathParseTests.cs"];
m4_240 [label="BooleanQueryExpression expressions = (BooleanQueryExpression)((QueryFilter)path.Filters[0]).Expression", span="393-393", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithInteger()", file="JPathParseTests.cs"];
m4_241 [label="Assert.AreEqual(12, (int)(JToken)expressions.Right)", span="394-394", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithInteger()", file="JPathParseTests.cs"];
m4_242 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithInteger()", span="390-390", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithInteger()", file="JPathParseTests.cs"];
m4_233 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithGreaterThanOrEquals()", span="382-382", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithGreaterThanOrEquals()", file="JPathParseTests.cs"];
m4_234 [label="JPath path = new JPath(''[?(@.name>=null)]'')", span="384-384", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithGreaterThanOrEquals()", file="JPathParseTests.cs"];
m4_235 [label="BooleanQueryExpression expressions = (BooleanQueryExpression)((QueryFilter)path.Filters[0]).Expression", span="385-385", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithGreaterThanOrEquals()", file="JPathParseTests.cs"];
m4_236 [label="Assert.AreEqual(QueryOperator.GreaterThanOrEquals, expressions.Operator)", span="386-386", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithGreaterThanOrEquals()", file="JPathParseTests.cs"];
m4_237 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithGreaterThanOrEquals()", span="382-382", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithGreaterThanOrEquals()", file="JPathParseTests.cs"];
m4_25 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleQuotedProperty()", span="82-82", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleQuotedProperty()", file="JPathParseTests.cs"];
m4_26 [label="JPath path = new JPath(''['Blah']'')", span="84-84", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleQuotedProperty()", file="JPathParseTests.cs"];
m4_27 [label="Assert.AreEqual(1, path.Filters.Count)", span="85-85", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleQuotedProperty()", file="JPathParseTests.cs"];
m4_28 [label="Assert.AreEqual(''Blah'', ((FieldFilter)path.Filters[0]).Name)", span="86-86", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleQuotedProperty()", file="JPathParseTests.cs"];
m4_29 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleQuotedProperty()", span="82-82", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleQuotedProperty()", file="JPathParseTests.cs"];
m4_20 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleProperty()", span="74-74", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleProperty()", file="JPathParseTests.cs"];
m4_21 [label="JPath path = new JPath(''Blah'')", span="76-76", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleProperty()", file="JPathParseTests.cs"];
m4_22 [label="Assert.AreEqual(1, path.Filters.Count)", span="77-77", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleProperty()", file="JPathParseTests.cs"];
m4_23 [label="Assert.AreEqual(''Blah'', ((FieldFilter)path.Filters[0]).Name)", span="78-78", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleProperty()", file="JPathParseTests.cs"];
m4_24 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleProperty()", span="74-74", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleProperty()", file="JPathParseTests.cs"];
m4_463 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.AdjacentIndexers()", span="680-680", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.AdjacentIndexers()", file="JPathParseTests.cs"];
m4_464 [label="JPath path = new JPath(''[1][0][0]['' + int.MaxValue + '']'')", span="682-682", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.AdjacentIndexers()", file="JPathParseTests.cs"];
m4_465 [label="Assert.AreEqual(4, path.Filters.Count)", span="683-683", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.AdjacentIndexers()", file="JPathParseTests.cs"];
m4_466 [label="Assert.AreEqual(1, ((ArrayIndexFilter)path.Filters[0]).Index)", span="684-684", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.AdjacentIndexers()", file="JPathParseTests.cs"];
m4_467 [label="Assert.AreEqual(0, ((ArrayIndexFilter)path.Filters[1]).Index)", span="685-685", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.AdjacentIndexers()", file="JPathParseTests.cs"];
m4_468 [label="Assert.AreEqual(0, ((ArrayIndexFilter)path.Filters[2]).Index)", span="686-686", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.AdjacentIndexers()", file="JPathParseTests.cs"];
m4_469 [label="Assert.AreEqual(int.MaxValue, ((ArrayIndexFilter)path.Filters[3]).Index)", span="687-687", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.AdjacentIndexers()", file="JPathParseTests.cs"];
m4_470 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.AdjacentIndexers()", span="680-680", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.AdjacentIndexers()", file="JPathParseTests.cs"];
m4_40 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleQuotedPropertyWithBrackets()", span="106-106", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleQuotedPropertyWithBrackets()", file="JPathParseTests.cs"];
m4_41 [label="JPath path = new JPath(''['[*]']'')", span="108-108", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleQuotedPropertyWithBrackets()", file="JPathParseTests.cs"];
m4_42 [label="Assert.AreEqual(1, path.Filters.Count)", span="109-109", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleQuotedPropertyWithBrackets()", file="JPathParseTests.cs"];
m4_43 [label="Assert.AreEqual(''[*]'', ((FieldFilter)path.Filters[0]).Name)", span="110-110", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleQuotedPropertyWithBrackets()", file="JPathParseTests.cs"];
m4_44 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleQuotedPropertyWithBrackets()", span="106-106", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SingleQuotedPropertyWithBrackets()", file="JPathParseTests.cs"];
m4_8 [label="Entry Newtonsoft.Json.Linq.JsonPath.JPath.JPath(string)", span="40-40", cluster="Newtonsoft.Json.Linq.JsonPath.JPath.JPath(string)", file="JPathParseTests.cs"];
m4_124 [label="Assert.AreEqual(''Two'', ((FieldFilter)path.Filters[1]).Name)", span="226-226", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.TwoProperties()", file="JPathParseTests.cs"];
m4_125 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.TwoProperties()", span="221-221", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.TwoProperties()", file="JPathParseTests.cs"];
m4_344 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithFloatExp()", span="519-519", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithFloatExp()", file="JPathParseTests.cs"];
m4_345 [label="JPath path = new JPath(''[?(@.name>=5.56789e+0)]'')", span="521-521", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithFloatExp()", file="JPathParseTests.cs"];
m4_346 [label="BooleanQueryExpression expressions = (BooleanQueryExpression)((QueryFilter)path.Filters[0]).Expression", span="522-522", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithFloatExp()", file="JPathParseTests.cs"];
m4_347 [label="Assert.AreEqual(5.56789e+0, (double)(JToken)expressions.Right)", span="523-523", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithFloatExp()", file="JPathParseTests.cs"];
m4_348 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithFloatExp()", span="519-519", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithFloatExp()", file="JPathParseTests.cs"];
m4_474 [label="Entry lambda expression", span="693-693", cluster="lambda expression", file="JPathParseTests.cs"];
m4_59 [label="Entry lambda expression", span="132-132", cluster="lambda expression", file="JPathParseTests.cs"];
m4_60 [label="new JPath(''$ .Blah'')", span="132-132", cluster="lambda expression", file="JPathParseTests.cs"];
m4_61 [label="Exit lambda expression", span="132-132", cluster="lambda expression", file="JPathParseTests.cs"];
m4_65 [label="Entry lambda expression", span="138-138", cluster="lambda expression", file="JPathParseTests.cs"];
m4_66 [label="new JPath(''$.Blah.'')", span="138-138", cluster="lambda expression", file="JPathParseTests.cs"];
m4_67 [label="Exit lambda expression", span="138-138", cluster="lambda expression", file="JPathParseTests.cs"];
m4_71 [label="Entry lambda expression", span="144-144", cluster="lambda expression", file="JPathParseTests.cs"];
m4_72 [label="new JPath(''$. Blah'')", span="144-144", cluster="lambda expression", file="JPathParseTests.cs"];
m4_73 [label="Exit lambda expression", span="144-144", cluster="lambda expression", file="JPathParseTests.cs"];
m4_175 [label="Entry lambda expression", span="296-296", cluster="lambda expression", file="JPathParseTests.cs"];
m4_176 [label="new JPath(@''Blah[ ?( @.name=='h\i' ) ]'')", span="296-296", cluster="lambda expression", file="JPathParseTests.cs"];
m4_177 [label="Exit lambda expression", span="296-296", cluster="lambda expression", file="JPathParseTests.cs"];
m4_299 [label="Entry lambda expression", span="473-473", cluster="lambda expression", file="JPathParseTests.cs"];
m4_300 [label="new JPath(''[?(@.name||)]'')", span="473-473", cluster="lambda expression", file="JPathParseTests.cs"];
m4_301 [label="Exit lambda expression", span="473-473", cluster="lambda expression", file="JPathParseTests.cs"];
m4_305 [label="Entry lambda expression", span="479-479", cluster="lambda expression", file="JPathParseTests.cs"];
m4_306 [label="new JPath(''[?(@.name|)]'')", span="479-479", cluster="lambda expression", file="JPathParseTests.cs"];
m4_307 [label="Exit lambda expression", span="479-479", cluster="lambda expression", file="JPathParseTests.cs"];
m4_311 [label="Entry lambda expression", span="485-485", cluster="lambda expression", file="JPathParseTests.cs"];
m4_312 [label="new JPath(''[?(@.name|'')", span="485-485", cluster="lambda expression", file="JPathParseTests.cs"];
m4_313 [label="Exit lambda expression", span="485-485", cluster="lambda expression", file="JPathParseTests.cs"];
m4_317 [label="Entry lambda expression", span="491-491", cluster="lambda expression", file="JPathParseTests.cs"];
m4_318 [label="new JPath(''[?(@.name||'')", span="491-491", cluster="lambda expression", file="JPathParseTests.cs"];
m4_319 [label="Exit lambda expression", span="491-491", cluster="lambda expression", file="JPathParseTests.cs"];
m4_323 [label="Entry lambda expression", span="497-497", cluster="lambda expression", file="JPathParseTests.cs"];
m4_324 [label="new JPath(''[?(@.name||s'')", span="497-497", cluster="lambda expression", file="JPathParseTests.cs"];
m4_325 [label="Exit lambda expression", span="497-497", cluster="lambda expression", file="JPathParseTests.cs"];
m4_329 [label="Entry lambda expression", span="503-503", cluster="lambda expression", file="JPathParseTests.cs"];
m4_330 [label="new JPath(''[?(@.name||@'')", span="503-503", cluster="lambda expression", file="JPathParseTests.cs"];
m4_331 [label="Exit lambda expression", span="503-503", cluster="lambda expression", file="JPathParseTests.cs"];
m4_335 [label="Entry lambda expression", span="509-509", cluster="lambda expression", file="JPathParseTests.cs"];
m4_336 [label="new JPath(''[?(@.name||@.'')", span="509-509", cluster="lambda expression", file="JPathParseTests.cs"];
m4_337 [label="Exit lambda expression", span="509-509", cluster="lambda expression", file="JPathParseTests.cs"];
m4_341 [label="Entry lambda expression", span="515-515", cluster="lambda expression", file="JPathParseTests.cs"];
m4_342 [label="new JPath(''[?(@.name||@.)]'')", span="515-515", cluster="lambda expression", file="JPathParseTests.cs"];
m4_343 [label="Exit lambda expression", span="515-515", cluster="lambda expression", file="JPathParseTests.cs"];
m4_362 [label="Entry lambda expression", span="542-542", cluster="lambda expression", file="JPathParseTests.cs"];
m4_363 [label="new JPath(''Blah[[0]].Two.Three[1].Four'')", span="542-542", cluster="lambda expression", file="JPathParseTests.cs"];
m4_364 [label="Exit lambda expression", span="542-542", cluster="lambda expression", file="JPathParseTests.cs"];
m4_368 [label="Entry lambda expression", span="548-548", cluster="lambda expression", file="JPathParseTests.cs"];
m4_369 [label="new JPath(''Blah[0'')", span="548-548", cluster="lambda expression", file="JPathParseTests.cs"];
m4_370 [label="Exit lambda expression", span="548-548", cluster="lambda expression", file="JPathParseTests.cs"];
m4_454 [label="Entry lambda expression", span="670-670", cluster="lambda expression", file="JPathParseTests.cs"];
m4_455 [label="new JPath(''[]'')", span="670-670", cluster="lambda expression", file="JPathParseTests.cs"];
m4_456 [label="Exit lambda expression", span="670-670", cluster="lambda expression", file="JPathParseTests.cs"];
m4_460 [label="Entry lambda expression", span="676-676", cluster="lambda expression", file="JPathParseTests.cs"];
m4_461 [label="new JPath('']'')", span="676-676", cluster="lambda expression", file="JPathParseTests.cs"];
m4_462 [label="Exit lambda expression", span="676-676", cluster="lambda expression", file="JPathParseTests.cs"];
m4_475 [label="new JPath(''[1]Blah'')", span="693-693", cluster="lambda expression", file="JPathParseTests.cs"];
m4_476 [label="Exit lambda expression", span="693-693", cluster="lambda expression", file="JPathParseTests.cs"];
m4_287 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithRoot()", span="460-460", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithRoot()", file="JPathParseTests.cs"];
m4_288 [label="JPath path = new JPath(''[?($.name>=12.1)]'')", span="462-462", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithRoot()", file="JPathParseTests.cs"];
m4_289 [label="BooleanQueryExpression expressions = (BooleanQueryExpression)((QueryFilter)path.Filters[0]).Expression", span="463-463", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithRoot()", file="JPathParseTests.cs"];
m4_290 [label="List<PathFilter> paths = (List<PathFilter>)expressions.Left", span="464-464", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithRoot()", file="JPathParseTests.cs"];
m4_291 [label="Assert.AreEqual(2, paths.Count)", span="465-465", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithRoot()", file="JPathParseTests.cs"];
m4_292 [label="Assert.IsInstanceOf(typeof(RootFilter), paths[0])", span="466-466", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithRoot()", file="JPathParseTests.cs"];
m4_293 [label="Assert.IsInstanceOf(typeof(FieldFilter), paths[1])", span="467-467", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithRoot()", file="JPathParseTests.cs"];
m4_294 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithRoot()", span="460-460", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithRoot()", file="JPathParseTests.cs"];
m4_314 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BaddOr4()", span="489-489", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BaddOr4()", file="JPathParseTests.cs"];
m4_315 [label="ExceptionAssert.Throws<JsonException>(() => new JPath(''[?(@.name||''), ''Path ended with open query.'')", span="491-491", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BaddOr4()", file="JPathParseTests.cs"];
m4_316 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BaddOr4()", span="489-489", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.BaddOr4()", file="JPathParseTests.cs"];
m4_395 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultipleQuotedIndexes()", span="588-588", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultipleQuotedIndexes()", file="JPathParseTests.cs"];
m4_396 [label="JPath path = new JPath(''['111119990','3']'')", span="590-590", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultipleQuotedIndexes()", file="JPathParseTests.cs"];
m4_397 [label="Assert.AreEqual(1, path.Filters.Count)", span="591-591", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultipleQuotedIndexes()", file="JPathParseTests.cs"];
m4_398 [label="Assert.AreEqual(2, ((FieldMultipleFilter)path.Filters[0]).Names.Count)", span="592-592", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultipleQuotedIndexes()", file="JPathParseTests.cs"];
m4_399 [label="Assert.AreEqual(''111119990'', ((FieldMultipleFilter)path.Filters[0]).Names[0])", span="593-593", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultipleQuotedIndexes()", file="JPathParseTests.cs"];
m4_400 [label="Assert.AreEqual(''3'', ((FieldMultipleFilter)path.Filters[0]).Names[1])", span="594-594", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultipleQuotedIndexes()", file="JPathParseTests.cs"];
m4_401 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultipleQuotedIndexes()", span="588-588", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultipleQuotedIndexes()", file="JPathParseTests.cs"];
m4_164 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithDoubleEscape()", span="283-283", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithDoubleEscape()", file="JPathParseTests.cs"];
m4_165 [label="JPath path = new JPath(@''Blah[ ?( @.name=='h\\i' ) ]'')", span="285-285", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithDoubleEscape()", file="JPathParseTests.cs"];
m4_166 [label="Assert.AreEqual(2, path.Filters.Count)", span="286-286", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithDoubleEscape()", file="JPathParseTests.cs"];
m4_167 [label="Assert.AreEqual(''Blah'', ((FieldFilter)path.Filters[0]).Name)", span="287-287", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithDoubleEscape()", file="JPathParseTests.cs"];
m4_168 [label="BooleanQueryExpression expressions = (BooleanQueryExpression)((QueryFilter)path.Filters[1]).Expression", span="288-288", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithDoubleEscape()", file="JPathParseTests.cs"];
m4_169 [label="Assert.AreEqual(QueryOperator.Equals, expressions.Operator)", span="289-289", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithDoubleEscape()", file="JPathParseTests.cs"];
m4_170 [label="Assert.AreEqual(''h\\i'', (string)(JToken)expressions.Right)", span="290-290", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithDoubleEscape()", file="JPathParseTests.cs"];
m4_171 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithDoubleEscape()", span="283-283", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithDoubleEscape()", file="JPathParseTests.cs"];
m4_430 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexEmptyStop()", span="638-638", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexEmptyStop()", file="JPathParseTests.cs"];
m4_431 [label="JPath path = new JPath(''[  -3  :  ]'')", span="640-640", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexEmptyStop()", file="JPathParseTests.cs"];
m4_432 [label="Assert.AreEqual(1, path.Filters.Count)", span="641-641", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexEmptyStop()", file="JPathParseTests.cs"];
m4_433 [label="Assert.AreEqual(-3, ((ArraySliceFilter)path.Filters[0]).Start)", span="642-642", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexEmptyStop()", file="JPathParseTests.cs"];
m4_434 [label="Assert.AreEqual(null, ((ArraySliceFilter)path.Filters[0]).End)", span="643-643", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexEmptyStop()", file="JPathParseTests.cs"];
m4_435 [label="Assert.AreEqual(null, ((ArraySliceFilter)path.Filters[0]).Step)", span="644-644", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexEmptyStop()", file="JPathParseTests.cs"];
m4_436 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexEmptyStop()", span="638-638", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexEmptyStop()", file="JPathParseTests.cs"];
m4_437 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexEmptyStart()", span="648-648", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexEmptyStart()", file="JPathParseTests.cs"];
m4_438 [label="JPath path = new JPath(''[ : 1 : ]'')", span="650-650", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexEmptyStart()", file="JPathParseTests.cs"];
m4_439 [label="Assert.AreEqual(1, path.Filters.Count)", span="651-651", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexEmptyStart()", file="JPathParseTests.cs"];
m4_440 [label="Assert.AreEqual(null, ((ArraySliceFilter)path.Filters[0]).Start)", span="652-652", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexEmptyStart()", file="JPathParseTests.cs"];
m4_441 [label="Assert.AreEqual(1, ((ArraySliceFilter)path.Filters[0]).End)", span="653-653", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexEmptyStart()", file="JPathParseTests.cs"];
m4_442 [label="Assert.AreEqual(null, ((ArraySliceFilter)path.Filters[0]).Step)", span="654-654", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexEmptyStart()", file="JPathParseTests.cs"];
m4_443 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexEmptyStart()", span="648-648", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SlicingIndexEmptyStart()", file="JPathParseTests.cs"];
m4_349 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultiplePropertiesAndIndexers()", span="527-527", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultiplePropertiesAndIndexers()", file="JPathParseTests.cs"];
m4_350 [label="JPath path = new JPath(''Blah[0]..Two.Three[1].Four'')", span="529-529", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultiplePropertiesAndIndexers()", file="JPathParseTests.cs"];
m4_351 [label="Assert.AreEqual(6, path.Filters.Count)", span="530-530", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultiplePropertiesAndIndexers()", file="JPathParseTests.cs"];
m4_352 [label="Assert.AreEqual(''Blah'', ((FieldFilter)path.Filters[0]).Name)", span="531-531", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultiplePropertiesAndIndexers()", file="JPathParseTests.cs"];
m4_353 [label="Assert.AreEqual(0, ((ArrayIndexFilter)path.Filters[1]).Index)", span="532-532", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultiplePropertiesAndIndexers()", file="JPathParseTests.cs"];
m4_354 [label="Assert.AreEqual(''Two'', ((ScanFilter)path.Filters[2]).Name)", span="533-533", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultiplePropertiesAndIndexers()", file="JPathParseTests.cs"];
m4_355 [label="Assert.AreEqual(''Three'', ((FieldFilter)path.Filters[3]).Name)", span="534-534", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultiplePropertiesAndIndexers()", file="JPathParseTests.cs"];
m4_356 [label="Assert.AreEqual(1, ((ArrayIndexFilter)path.Filters[4]).Index)", span="535-535", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultiplePropertiesAndIndexers()", file="JPathParseTests.cs"];
m4_357 [label="Assert.AreEqual(''Four'', ((FieldFilter)path.Filters[5]).Name)", span="536-536", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultiplePropertiesAndIndexers()", file="JPathParseTests.cs"];
m4_358 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultiplePropertiesAndIndexers()", span="527-527", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.MultiplePropertiesAndIndexers()", file="JPathParseTests.cs"];
m4_58 [label="Entry Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", span="367-367", cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", file="JPathParseTests.cs"];
m4_243 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithNegativeInteger()", span="398-398", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithNegativeInteger()", file="JPathParseTests.cs"];
m4_244 [label="JPath path = new JPath(''[?(@.name>=-12)]'')", span="400-400", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithNegativeInteger()", file="JPathParseTests.cs"];
m4_245 [label="BooleanQueryExpression expressions = (BooleanQueryExpression)((QueryFilter)path.Filters[0]).Expression", span="401-401", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithNegativeInteger()", file="JPathParseTests.cs"];
m4_246 [label="Assert.AreEqual(-12, (int)(JToken)expressions.Right)", span="402-402", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithNegativeInteger()", file="JPathParseTests.cs"];
m4_247 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithNegativeInteger()", span="398-398", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.FilterWithNegativeInteger()", file="JPathParseTests.cs"];
m4_100 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.QuotedWildcardPropertyWithRoot()", span="189-189", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.QuotedWildcardPropertyWithRoot()", file="JPathParseTests.cs"];
m4_101 [label="JPath path = new JPath(''$.['*']'')", span="191-191", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.QuotedWildcardPropertyWithRoot()", file="JPathParseTests.cs"];
m4_102 [label="Assert.AreEqual(1, path.Filters.Count)", span="192-192", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.QuotedWildcardPropertyWithRoot()", file="JPathParseTests.cs"];
m4_103 [label="Assert.AreEqual(''*'', ((FieldFilter)path.Filters[0]).Name)", span="193-193", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.QuotedWildcardPropertyWithRoot()", file="JPathParseTests.cs"];
m4_104 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.QuotedWildcardPropertyWithRoot()", span="189-189", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.QuotedWildcardPropertyWithRoot()", file="JPathParseTests.cs"];
m4_186 [label="Entry Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithTrue()", span="311-311", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithTrue()", file="JPathParseTests.cs"];
m4_187 [label="JPath path = new JPath(''Blah[ ?( @.name==true ) ]'')", span="313-313", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithTrue()", file="JPathParseTests.cs"];
m4_188 [label="Assert.AreEqual(2, path.Filters.Count)", span="314-314", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithTrue()", file="JPathParseTests.cs"];
m4_189 [label="Assert.AreEqual(''Blah'', ((FieldFilter)path.Filters[0]).Name)", span="315-315", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithTrue()", file="JPathParseTests.cs"];
m4_190 [label="BooleanQueryExpression expressions = (BooleanQueryExpression)((QueryFilter)path.Filters[1]).Expression", span="316-316", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithTrue()", file="JPathParseTests.cs"];
m4_191 [label="Assert.AreEqual(QueryOperator.Equals, expressions.Operator)", span="317-317", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithTrue()", file="JPathParseTests.cs"];
m4_192 [label="Assert.AreEqual(true, (bool)(JToken)expressions.Right)", span="318-318", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithTrue()", file="JPathParseTests.cs"];
m4_193 [label="Exit Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithTrue()", span="311-311", cluster="Newtonsoft.Json.Tests.Linq.JsonPath.JPathParseTests.SinglePropertyAndFilterWithTrue()", file="JPathParseTests.cs"];
m5_201 [label="Entry Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaWithNegativeEnum()", span="598-598", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaWithNegativeEnum()", file="JsonSchemaGeneratorTests.cs"];
m5_202 [label="JsonSchemaGenerator jsonSchemaGenerator = new JsonSchemaGenerator()", span="600-600", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaWithNegativeEnum()", file="JsonSchemaGeneratorTests.cs"];
m5_203 [label="JsonSchema schema = jsonSchemaGenerator.Generate(typeof(X))", span="601-601", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaWithNegativeEnum()", file="JsonSchemaGeneratorTests.cs"];
m5_204 [label="string json = schema.ToString()", span="603-603", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaWithNegativeEnum()", file="JsonSchemaGeneratorTests.cs"];
m5_205 [label="StringAssert.AreEqual(@''{\r\n  ''''type'''': ''''object'''',\r\n  ''''properties'''': {\r\n    ''''x'''': {\r\n      ''''required'''': true,\r\n      ''''type'''': ''''integer'''',\r\n      ''''enum'''': [\r\n        0,\r\n        1,\r\n        -1\r\n      ]\r\n    }\r\n  }\r\n}'', json)", span="605-618", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaWithNegativeEnum()", file="JsonSchemaGeneratorTests.cs"];
m5_206 [label="Exit Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaWithNegativeEnum()", span="598-598", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaWithNegativeEnum()", file="JsonSchemaGeneratorTests.cs"];
m5_124 [label="Entry Newtonsoft.Json.Serialization.DefaultContractResolver.CreateContract(System.Type)", span="1121-1121", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateContract(System.Type)", file="JsonSchemaGeneratorTests.cs"];
m5_47 [label="Entry Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_Store()", span="231-231", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_Store()", file="JsonSchemaGeneratorTests.cs"];
m5_48 [label="JsonSchemaGenerator generator = new JsonSchemaGenerator()", span="233-233", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_Store()", file="JsonSchemaGeneratorTests.cs"];
m5_49 [label="JsonSchema schema = generator.Generate(typeof(Store))", span="234-234", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_Store()", file="JsonSchemaGeneratorTests.cs"];
m5_50 [label="Assert.AreEqual(11, schema.Properties.Count)", span="236-236", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_Store()", file="JsonSchemaGeneratorTests.cs"];
m5_51 [label="JsonSchema productArraySchema = schema.Properties[''product'']", span="238-238", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_Store()", file="JsonSchemaGeneratorTests.cs"];
m5_52 [label="JsonSchema productSchema = productArraySchema.Items[0]", span="239-239", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_Store()", file="JsonSchemaGeneratorTests.cs"];
m5_53 [label="Assert.AreEqual(4, productSchema.Properties.Count)", span="241-241", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_Store()", file="JsonSchemaGeneratorTests.cs"];
m5_54 [label="Exit Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_Store()", span="231-231", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_Store()", file="JsonSchemaGeneratorTests.cs"];
m5_158 [label="Entry Newtonsoft.Json.Converters.IsoDateTimeConverter.IsoDateTimeConverter()", span="34-34", cluster="Newtonsoft.Json.Converters.IsoDateTimeConverter.IsoDateTimeConverter()", file="JsonSchemaGeneratorTests.cs"];
m5_125 [label="Entry Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CustomDirectoryInfoMapper.CreateProperties(System.Type, Newtonsoft.Json.MemberSerialization)", span="359-359", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CustomDirectoryInfoMapper.CreateProperties(System.Type, Newtonsoft.Json.MemberSerialization)", file="JsonSchemaGeneratorTests.cs"];
m5_126 [label="IList<JsonProperty> properties = base.CreateProperties(type, memberSerialization)", span="361-361", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CustomDirectoryInfoMapper.CreateProperties(System.Type, Newtonsoft.Json.MemberSerialization)", file="JsonSchemaGeneratorTests.cs"];
m5_127 [label="JsonPropertyCollection c = new JsonPropertyCollection(type)", span="363-363", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CustomDirectoryInfoMapper.CreateProperties(System.Type, Newtonsoft.Json.MemberSerialization)", file="JsonSchemaGeneratorTests.cs"];
m5_128 [label="c.AddRange(properties.Where(m => m.PropertyName != ''Root''))", span="364-364", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CustomDirectoryInfoMapper.CreateProperties(System.Type, Newtonsoft.Json.MemberSerialization)", file="JsonSchemaGeneratorTests.cs"];
m5_129 [label="return c;", span="366-366", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CustomDirectoryInfoMapper.CreateProperties(System.Type, Newtonsoft.Json.MemberSerialization)", file="JsonSchemaGeneratorTests.cs"];
m5_130 [label="Exit Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CustomDirectoryInfoMapper.CreateProperties(System.Type, Newtonsoft.Json.MemberSerialization)", span="359-359", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CustomDirectoryInfoMapper.CreateProperties(System.Type, Newtonsoft.Json.MemberSerialization)", file="JsonSchemaGeneratorTests.cs"];
m5_74 [label="Entry Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularReferenceWithTypeNameId()", span="272-272", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularReferenceWithTypeNameId()", file="JsonSchemaGeneratorTests.cs"];
m5_75 [label="JsonSchemaGenerator generator = new JsonSchemaGenerator()", span="274-274", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularReferenceWithTypeNameId()", file="JsonSchemaGeneratorTests.cs"];
m5_76 [label="generator.UndefinedSchemaIdHandling = UndefinedSchemaIdHandling.UseTypeName", span="275-275", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularReferenceWithTypeNameId()", file="JsonSchemaGeneratorTests.cs"];
m5_77 [label="JsonSchema schema = generator.Generate(typeof(CircularReferenceClass), true)", span="277-277", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularReferenceWithTypeNameId()", file="JsonSchemaGeneratorTests.cs"];
m5_78 [label="Assert.AreEqual(JsonSchemaType.String, schema.Properties[''Name''].Type)", span="279-279", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularReferenceWithTypeNameId()", file="JsonSchemaGeneratorTests.cs"];
m5_79 [label="Assert.AreEqual(typeof(CircularReferenceClass).FullName, schema.Id)", span="280-280", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularReferenceWithTypeNameId()", file="JsonSchemaGeneratorTests.cs"];
m5_80 [label="Assert.AreEqual(JsonSchemaType.Object | JsonSchemaType.Null, schema.Properties[''Child''].Type)", span="281-281", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularReferenceWithTypeNameId()", file="JsonSchemaGeneratorTests.cs"];
m5_81 [label="Assert.AreEqual(schema, schema.Properties[''Child''])", span="282-282", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularReferenceWithTypeNameId()", file="JsonSchemaGeneratorTests.cs"];
m5_82 [label="Exit Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularReferenceWithTypeNameId()", span="272-272", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularReferenceWithTypeNameId()", file="JsonSchemaGeneratorTests.cs"];
m5_15 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="JsonSchemaGeneratorTests.cs"];
m5_12 [label="Entry Newtonsoft.Json.Schema.JsonSchema.ToString()", span="344-344", cluster="Newtonsoft.Json.Schema.JsonSchema.ToString()", file="JsonSchemaGeneratorTests.cs"];
m5_110 [label="Entry Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForDBNull()", span="331-331", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForDBNull()", file="JsonSchemaGeneratorTests.cs"];
m5_111 [label="JsonSchemaGenerator generator = new JsonSchemaGenerator()", span="333-333", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForDBNull()", file="JsonSchemaGeneratorTests.cs"];
m5_112 [label="generator.UndefinedSchemaIdHandling = UndefinedSchemaIdHandling.UseTypeName", span="334-334", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForDBNull()", file="JsonSchemaGeneratorTests.cs"];
m5_113 [label="JsonSchema schema = generator.Generate(typeof(DBNull))", span="336-336", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForDBNull()", file="JsonSchemaGeneratorTests.cs"];
m5_114 [label="Assert.AreEqual(JsonSchemaType.Null, schema.Type)", span="338-338", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForDBNull()", file="JsonSchemaGeneratorTests.cs"];
m5_115 [label="Exit Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForDBNull()", span="331-331", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForDBNull()", file="JsonSchemaGeneratorTests.cs"];
m5_196 [label="Entry Newtonsoft.Json.Linq.JToken.ToString()", span="422-422", cluster="Newtonsoft.Json.Linq.JToken.ToString()", file="JsonSchemaGeneratorTests.cs"];
m5_134 [label="Entry Unk.AddRange", span="", cluster="Unk.AddRange", file="JsonSchemaGeneratorTests.cs"];
m5_83 [label="Entry Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type, bool)", span="152-152", cluster="Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type, bool)", file="JsonSchemaGeneratorTests.cs"];
m5_20 [label="Entry Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_DefaultValueAttributeTestClass()", span="97-97", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_DefaultValueAttributeTestClass()", file="JsonSchemaGeneratorTests.cs"];
m5_21 [label="JsonSchemaGenerator generator = new JsonSchemaGenerator()", span="99-99", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_DefaultValueAttributeTestClass()", file="JsonSchemaGeneratorTests.cs"];
m5_22 [label="JsonSchema schema = generator.Generate(typeof(DefaultValueAttributeTestClass))", span="100-100", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_DefaultValueAttributeTestClass()", file="JsonSchemaGeneratorTests.cs"];
m5_23 [label="string json = schema.ToString()", span="102-102", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_DefaultValueAttributeTestClass()", file="JsonSchemaGeneratorTests.cs"];
m5_24 [label="StringAssert.AreEqual(@''{\r\n  ''''description'''': ''''DefaultValueAttributeTestClass description!'''',\r\n  ''''type'''': ''''object'''',\r\n  ''''additionalProperties'''': false,\r\n  ''''properties'''': {\r\n    ''''TestField1'''': {\r\n      ''''required'''': true,\r\n      ''''type'''': ''''integer'''',\r\n      ''''default'''': 21\r\n    },\r\n    ''''TestProperty1'''': {\r\n      ''''required'''': true,\r\n      ''''type'''': [\r\n        ''''string'''',\r\n        ''''null''''\r\n      ],\r\n      ''''default'''': ''''TestProperty1Value''''\r\n    }\r\n  }\r\n}'', json)", span="104-123", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_DefaultValueAttributeTestClass()", file="JsonSchemaGeneratorTests.cs"];
m5_25 [label="Exit Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_DefaultValueAttributeTestClass()", span="97-97", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_DefaultValueAttributeTestClass()", file="JsonSchemaGeneratorTests.cs"];
m5_222 [label="Entry Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.JsonPropertyWithHandlingValues()", span="662-662", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.JsonPropertyWithHandlingValues()", file="JsonSchemaGeneratorTests.cs"];
m5_223 [label="JsonSchemaGenerator jsonSchemaGenerator = new JsonSchemaGenerator()", span="664-664", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.JsonPropertyWithHandlingValues()", file="JsonSchemaGeneratorTests.cs"];
m5_224 [label="jsonSchemaGenerator.UndefinedSchemaIdHandling = UndefinedSchemaIdHandling.UseTypeName", span="666-666", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.JsonPropertyWithHandlingValues()", file="JsonSchemaGeneratorTests.cs"];
m5_225 [label="JsonSchema jsonSchema = jsonSchemaGenerator.Generate(typeof(JsonPropertyWithHandlingValues))", span="667-667", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.JsonPropertyWithHandlingValues()", file="JsonSchemaGeneratorTests.cs"];
m5_226 [label="string json = jsonSchema.ToString()", span="668-668", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.JsonPropertyWithHandlingValues()", file="JsonSchemaGeneratorTests.cs"];
m5_227 [label="StringAssert.AreEqual(@''{\r\n  ''''id'''': ''''Newtonsoft.Json.Tests.TestObjects.JsonPropertyWithHandlingValues'''',\r\n  ''''required'''': true,\r\n  ''''type'''': [\r\n    ''''object'''',\r\n    ''''null''''\r\n  ],\r\n  ''''properties'''': {\r\n    ''''DefaultValueHandlingIgnoreProperty'''': {\r\n      ''''type'''': [\r\n        ''''string'''',\r\n        ''''null''''\r\n      ],\r\n      ''''default'''': ''''Default!''''\r\n    },\r\n    ''''DefaultValueHandlingIncludeProperty'''': {\r\n      ''''required'''': true,\r\n      ''''type'''': [\r\n        ''''string'''',\r\n        ''''null''''\r\n      ],\r\n      ''''default'''': ''''Default!''''\r\n    },\r\n    ''''DefaultValueHandlingPopulateProperty'''': {\r\n      ''''required'''': true,\r\n      ''''type'''': [\r\n        ''''string'''',\r\n        ''''null''''\r\n      ],\r\n      ''''default'''': ''''Default!''''\r\n    },\r\n    ''''DefaultValueHandlingIgnoreAndPopulateProperty'''': {\r\n      ''''type'''': [\r\n        ''''string'''',\r\n        ''''null''''\r\n      ],\r\n      ''''default'''': ''''Default!''''\r\n    },\r\n    ''''NullValueHandlingIgnoreProperty'''': {\r\n      ''''type'''': [\r\n        ''''string'''',\r\n        ''''null''''\r\n      ]\r\n    },\r\n    ''''NullValueHandlingIncludeProperty'''': {\r\n      ''''required'''': true,\r\n      ''''type'''': [\r\n        ''''string'''',\r\n        ''''null''''\r\n      ]\r\n    },\r\n    ''''ReferenceLoopHandlingErrorProperty'''': {\r\n      ''''$ref'''': ''''Newtonsoft.Json.Tests.TestObjects.JsonPropertyWithHandlingValues''''\r\n    },\r\n    ''''ReferenceLoopHandlingIgnoreProperty'''': {\r\n      ''''$ref'''': ''''Newtonsoft.Json.Tests.TestObjects.JsonPropertyWithHandlingValues''''\r\n    },\r\n    ''''ReferenceLoopHandlingSerializeProperty'''': {\r\n      ''''$ref'''': ''''Newtonsoft.Json.Tests.TestObjects.JsonPropertyWithHandlingValues''''\r\n    }\r\n  }\r\n}'', json)", span="670-731", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.JsonPropertyWithHandlingValues()", file="JsonSchemaGeneratorTests.cs"];
m5_228 [label="Exit Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.JsonPropertyWithHandlingValues()", span="662-662", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.JsonPropertyWithHandlingValues()", file="JsonSchemaGeneratorTests.cs"];
m5_160 [label="Entry Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter, object)", span="1042-1042", cluster="Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter, object)", file="JsonSchemaGeneratorTests.cs"];
m5_166 [label="Entry Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaCamelCase()", span="475-475", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaCamelCase()", file="JsonSchemaGeneratorTests.cs"];
m5_167 [label="JsonSchemaGenerator generator = new JsonSchemaGenerator()", span="477-477", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaCamelCase()", file="JsonSchemaGeneratorTests.cs"];
m5_168 [label="generator.UndefinedSchemaIdHandling = UndefinedSchemaIdHandling.UseTypeName", span="478-478", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaCamelCase()", file="JsonSchemaGeneratorTests.cs"];
m5_169 [label="generator.ContractResolver = new CamelCasePropertyNamesContractResolver()\r\n            {\r\n#if !(PORTABLE || DNXCORE50 || PORTABLE40) || NETSTANDARD1_3\r\n                IgnoreSerializableAttribute = true\r\n#endif\r\n            }", span="479-484", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaCamelCase()", file="JsonSchemaGeneratorTests.cs"];
m5_170 [label="JsonSchema schema = generator.Generate(typeof(Version), true)", span="486-486", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaCamelCase()", file="JsonSchemaGeneratorTests.cs"];
m5_171 [label="string json = schema.ToString()", span="488-488", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaCamelCase()", file="JsonSchemaGeneratorTests.cs"];
m5_172 [label="StringAssert.AreEqual(@''{\r\n  ''''id'''': ''''System.Version'''',\r\n  ''''type'''': [\r\n    ''''object'''',\r\n    ''''null''''\r\n  ],\r\n  ''''additionalProperties'''': false,\r\n  ''''properties'''': {\r\n    ''''major'''': {\r\n      ''''required'''': true,\r\n      ''''type'''': ''''integer''''\r\n    },\r\n    ''''minor'''': {\r\n      ''''required'''': true,\r\n      ''''type'''': ''''integer''''\r\n    },\r\n    ''''build'''': {\r\n      ''''required'''': true,\r\n      ''''type'''': ''''integer''''\r\n    },\r\n    ''''revision'''': {\r\n      ''''required'''': true,\r\n      ''''type'''': ''''integer''''\r\n    },\r\n    ''''majorRevision'''': {\r\n      ''''required'''': true,\r\n      ''''type'''': ''''integer''''\r\n    },\r\n    ''''minorRevision'''': {\r\n      ''''required'''': true,\r\n      ''''type'''': ''''integer''''\r\n    }\r\n  }\r\n}'', json)", span="490-523", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaCamelCase()", file="JsonSchemaGeneratorTests.cs"];
m5_173 [label="Exit Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaCamelCase()", span="475-475", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaCamelCase()", file="JsonSchemaGeneratorTests.cs"];
m5_19 [label="Entry Unk.IsTrue", span="", cluster="Unk.IsTrue", file="JsonSchemaGeneratorTests.cs"];
m5_197 [label="Entry Newtonsoft.Json.Linq.JToken.ToObject<T>(Newtonsoft.Json.JsonSerializer)", span="2066-2066", cluster="Newtonsoft.Json.Linq.JToken.ToObject<T>(Newtonsoft.Json.JsonSerializer)", file="JsonSchemaGeneratorTests.cs"];
m5_157 [label="Entry Newtonsoft.Json.JsonSerializer.JsonSerializer()", span="530-530", cluster="Newtonsoft.Json.JsonSerializer.JsonSerializer()", file="JsonSchemaGeneratorTests.cs"];
m5_17 [label="Entry Newtonsoft.Json.Linq.JObject.Parse(string)", span="404-404", cluster="Newtonsoft.Json.Linq.JObject.Parse(string)", file="JsonSchemaGeneratorTests.cs"];
m5_175 [label="Entry Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaSerializable()", span="528-528", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaSerializable()", file="JsonSchemaGeneratorTests.cs"];
m5_176 [label="JsonSchemaGenerator generator = new JsonSchemaGenerator()", span="530-530", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaSerializable()", file="JsonSchemaGeneratorTests.cs"];
m5_177 [label="DefaultContractResolver contractResolver = new DefaultContractResolver\r\n            {\r\n                IgnoreSerializableAttribute = false\r\n            }", span="532-535", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaSerializable()", file="JsonSchemaGeneratorTests.cs"];
m5_178 [label="generator.ContractResolver = contractResolver", span="537-537", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaSerializable()", file="JsonSchemaGeneratorTests.cs"];
m5_179 [label="generator.UndefinedSchemaIdHandling = UndefinedSchemaIdHandling.UseTypeName", span="538-538", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaSerializable()", file="JsonSchemaGeneratorTests.cs"];
m5_180 [label="JsonSchema schema = generator.Generate(typeof(SerializableTestObject), true)", span="540-540", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaSerializable()", file="JsonSchemaGeneratorTests.cs"];
m5_185 [label="serializer.ContractResolver = contractResolver", span="564-564", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaSerializable()", file="JsonSchemaGeneratorTests.cs"];
m5_181 [label="string json = schema.ToString()", span="542-542", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaSerializable()", file="JsonSchemaGeneratorTests.cs"];
m5_188 [label="jsonWriter.Token.Validate(schema, (sender, args) => errors.Add(args.Message))", span="572-572", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaSerializable()", file="JsonSchemaGeneratorTests.cs"];
m5_182 [label="StringAssert.AreEqual(@''{\r\n  ''''id'''': ''''Newtonsoft.Json.Tests.Schema.SerializableTestObject'''',\r\n  ''''type'''': [\r\n    ''''object'''',\r\n    ''''null''''\r\n  ],\r\n  ''''additionalProperties'''': false,\r\n  ''''properties'''': {\r\n    ''''_name'''': {\r\n      ''''required'''': true,\r\n      ''''type'''': [\r\n        ''''string'''',\r\n        ''''null''''\r\n      ]\r\n    }\r\n  }\r\n}'', json)", span="544-560", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaSerializable()", file="JsonSchemaGeneratorTests.cs"];
m5_183 [label="JTokenWriter jsonWriter = new JTokenWriter()", span="562-562", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaSerializable()", file="JsonSchemaGeneratorTests.cs"];
m5_184 [label="JsonSerializer serializer = new JsonSerializer()", span="563-563", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaSerializable()", file="JsonSchemaGeneratorTests.cs"];
m5_186 [label="serializer.Serialize(jsonWriter, new SerializableTestObject\r\n            {\r\n                Name = ''Name!''\r\n            })", span="565-568", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaSerializable()", file="JsonSchemaGeneratorTests.cs"];
m5_190 [label="StringAssert.AreEqual(@''{\r\n  ''''_name'''': ''''Name!''''\r\n}'', jsonWriter.Token.ToString())", span="576-578", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaSerializable()", file="JsonSchemaGeneratorTests.cs"];
m5_191 [label="SerializableTestObject c = jsonWriter.Token.ToObject<SerializableTestObject>(serializer)", span="580-580", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaSerializable()", file="JsonSchemaGeneratorTests.cs"];
m5_187 [label="List<string> errors = new List<string>()", span="571-571", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaSerializable()", file="JsonSchemaGeneratorTests.cs"];
m5_189 [label="Assert.AreEqual(0, errors.Count)", span="574-574", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaSerializable()", file="JsonSchemaGeneratorTests.cs"];
m5_192 [label="Assert.AreEqual(''Name!'', c.Name)", span="581-581", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaSerializable()", file="JsonSchemaGeneratorTests.cs"];
m5_193 [label="Exit Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaSerializable()", span="528-528", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaSerializable()", file="JsonSchemaGeneratorTests.cs"];
m5_101 [label="Entry Newtonsoft.Json.Linq.JValue.JValue(string)", span="154-154", cluster="Newtonsoft.Json.Linq.JValue.JValue(string)", file="JsonSchemaGeneratorTests.cs"];
m5_26 [label="Entry Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_Person()", span="128-128", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_Person()", file="JsonSchemaGeneratorTests.cs"];
m5_27 [label="JsonSchemaGenerator generator = new JsonSchemaGenerator()", span="130-130", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_Person()", file="JsonSchemaGeneratorTests.cs"];
m5_28 [label="JsonSchema schema = generator.Generate(typeof(Person))", span="131-131", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_Person()", file="JsonSchemaGeneratorTests.cs"];
m5_29 [label="string json = schema.ToString()", span="133-133", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_Person()", file="JsonSchemaGeneratorTests.cs"];
m5_30 [label="StringAssert.AreEqual(@''{\r\n  ''''id'''': ''''Person'''',\r\n  ''''title'''': ''''Title!'''',\r\n  ''''description'''': ''''JsonObjectAttribute description!'''',\r\n  ''''type'''': ''''object'''',\r\n  ''''properties'''': {\r\n    ''''Name'''': {\r\n      ''''required'''': true,\r\n      ''''type'''': [\r\n        ''''string'''',\r\n        ''''null''''\r\n      ]\r\n    },\r\n    ''''BirthDate'''': {\r\n      ''''required'''': true,\r\n      ''''type'''': ''''string''''\r\n    },\r\n    ''''LastModified'''': {\r\n      ''''required'''': true,\r\n      ''''type'''': ''''string''''\r\n    }\r\n  }\r\n}'', json)", span="135-157", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_Person()", file="JsonSchemaGeneratorTests.cs"];
m5_31 [label="Exit Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_Person()", span="128-128", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_Person()", file="JsonSchemaGeneratorTests.cs"];
m5_116 [label="Entry Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CustomDirectoryInfoMapper.CustomDirectoryInfoMapper()", span="345-345", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CustomDirectoryInfoMapper.CustomDirectoryInfoMapper()", file="JsonSchemaGeneratorTests.cs"];
m5_117 [label="Exit Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CustomDirectoryInfoMapper.CustomDirectoryInfoMapper()", span="345-345", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CustomDirectoryInfoMapper.CustomDirectoryInfoMapper()", file="JsonSchemaGeneratorTests.cs"];
m5_174 [label="Entry Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver.CamelCasePropertyNamesContractResolver()", span="76-76", cluster="Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver.CamelCasePropertyNamesContractResolver()", file="JsonSchemaGeneratorTests.cs"];
m5_229 [label="Entry Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateForNullableInt32()", span="735-735", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateForNullableInt32()", file="JsonSchemaGeneratorTests.cs"];
m5_230 [label="JsonSchemaGenerator jsonSchemaGenerator = new JsonSchemaGenerator()", span="737-737", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateForNullableInt32()", file="JsonSchemaGeneratorTests.cs"];
m5_231 [label="JsonSchema jsonSchema = jsonSchemaGenerator.Generate(typeof(NullableInt32TestClass))", span="739-739", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateForNullableInt32()", file="JsonSchemaGeneratorTests.cs"];
m5_232 [label="string json = jsonSchema.ToString()", span="740-740", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateForNullableInt32()", file="JsonSchemaGeneratorTests.cs"];
m5_233 [label="StringAssert.AreEqual(@''{\r\n  ''''type'''': ''''object'''',\r\n  ''''properties'''': {\r\n    ''''Value'''': {\r\n      ''''required'''': true,\r\n      ''''type'''': [\r\n        ''''integer'''',\r\n        ''''null''''\r\n      ]\r\n    }\r\n  }\r\n}'', json)", span="742-753", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateForNullableInt32()", file="JsonSchemaGeneratorTests.cs"];
m5_234 [label="Exit Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateForNullableInt32()", span="735-735", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateForNullableInt32()", file="JsonSchemaGeneratorTests.cs"];
m5_159 [label="Entry System.Collections.ObjectModel.Collection<T>.Add(T)", span="0-0", cluster="System.Collections.ObjectModel.Collection<T>.Add(T)", file="JsonSchemaGeneratorTests.cs"];
m5_165 [label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.List<T>.Add(T)", file="JsonSchemaGeneratorTests.cs"];
m5_161 [label="Entry Newtonsoft.Json.Linq.JToken.Validate(Newtonsoft.Json.Schema.JsonSchema, Newtonsoft.Json.Schema.ValidationEventHandler)", span="117-117", cluster="Newtonsoft.Json.Linq.JToken.Validate(Newtonsoft.Json.Schema.JsonSchema, Newtonsoft.Json.Schema.ValidationEventHandler)", file="JsonSchemaGeneratorTests.cs"];
m5_14 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="JsonSchemaGeneratorTests.cs"];
m5_46 [label="Entry Unk.AreEqual", span="", cluster="Unk.AreEqual", file="JsonSchemaGeneratorTests.cs"];
m5_18 [label="Entry Newtonsoft.Json.Linq.JToken.IsValid(Newtonsoft.Json.Schema.JsonSchema)", span="57-57", cluster="Newtonsoft.Json.Linq.JToken.IsValid(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaGeneratorTests.cs"];
m5_194 [label="Entry Newtonsoft.Json.Serialization.DefaultContractResolver.DefaultContractResolver()", span="157-157", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.DefaultContractResolver()", file="JsonSchemaGeneratorTests.cs"];
m5_16 [label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting)", span="537-537", cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting)", file="JsonSchemaGeneratorTests.cs"];
m5_195 [label="Entry Newtonsoft.Json.Tests.Schema.SerializableTestObject.SerializableTestObject()", span="841-841", cluster="Newtonsoft.Json.Tests.Schema.SerializableTestObject.SerializableTestObject()", file="JsonSchemaGeneratorTests.cs"];
m5_102 [label="Entry Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForISerializable()", span="316-316", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForISerializable()", file="JsonSchemaGeneratorTests.cs"];
m5_103 [label="JsonSchemaGenerator generator = new JsonSchemaGenerator()", span="318-318", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForISerializable()", file="JsonSchemaGeneratorTests.cs"];
m5_104 [label="generator.UndefinedSchemaIdHandling = UndefinedSchemaIdHandling.UseTypeName", span="319-319", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForISerializable()", file="JsonSchemaGeneratorTests.cs"];
m5_105 [label="JsonSchema schema = generator.Generate(typeof(ISerializableTestObject))", span="321-321", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForISerializable()", file="JsonSchemaGeneratorTests.cs"];
m5_106 [label="Assert.AreEqual(JsonSchemaType.Object, schema.Type)", span="323-323", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForISerializable()", file="JsonSchemaGeneratorTests.cs"];
m5_107 [label="Assert.AreEqual(true, schema.AllowAdditionalProperties)", span="324-324", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForISerializable()", file="JsonSchemaGeneratorTests.cs"];
m5_108 [label="Assert.AreEqual(null, schema.Properties)", span="325-325", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForISerializable()", file="JsonSchemaGeneratorTests.cs"];
m5_109 [label="Exit Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForISerializable()", span="316-316", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForISerializable()", file="JsonSchemaGeneratorTests.cs"];
m5_207 [label="Entry Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularCollectionReferences()", span="622-622", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularCollectionReferences()", file="JsonSchemaGeneratorTests.cs"];
m5_208 [label="Type type = typeof(Workspace)", span="624-624", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularCollectionReferences()", file="JsonSchemaGeneratorTests.cs"];
m5_209 [label="JsonSchemaGenerator jsonSchemaGenerator = new JsonSchemaGenerator()", span="625-625", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularCollectionReferences()", file="JsonSchemaGeneratorTests.cs"];
m5_211 [label="JsonSchema jsonSchema = jsonSchemaGenerator.Generate(type)", span="628-628", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularCollectionReferences()", file="JsonSchemaGeneratorTests.cs"];
m5_210 [label="jsonSchemaGenerator.UndefinedSchemaIdHandling = UndefinedSchemaIdHandling.UseTypeName", span="627-627", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularCollectionReferences()", file="JsonSchemaGeneratorTests.cs"];
m5_212 [label="Assert.IsNotNull(jsonSchema)", span="631-631", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularCollectionReferences()", file="JsonSchemaGeneratorTests.cs"];
m5_213 [label="Exit Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularCollectionReferences()", span="622-622", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularCollectionReferences()", file="JsonSchemaGeneratorTests.cs"];
m5_214 [label="Entry Unk.IsNotNull", span="", cluster="Unk.IsNotNull", file="JsonSchemaGeneratorTests.cs"];
m5_10 [label="Entry Newtonsoft.Json.Schema.JsonSchemaGenerator.JsonSchemaGenerator()", span="50-50", cluster="Newtonsoft.Json.Schema.JsonSchemaGenerator.JsonSchemaGenerator()", file="JsonSchemaGeneratorTests.cs"];
m5_132 [label="Entry Newtonsoft.Json.Serialization.JsonPropertyCollection.JsonPropertyCollection(System.Type)", span="46-46", cluster="Newtonsoft.Json.Serialization.JsonPropertyCollection.JsonPropertyCollection(System.Type)", file="JsonSchemaGeneratorTests.cs"];
m5_11 [label="Entry Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type)", span="130-130", cluster="Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type)", file="JsonSchemaGeneratorTests.cs"];
m5_55 [label="Entry Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.MissingSchemaIdHandlingTest()", span="245-245", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.MissingSchemaIdHandlingTest()", file="JsonSchemaGeneratorTests.cs"];
m5_56 [label="JsonSchemaGenerator generator = new JsonSchemaGenerator()", span="247-247", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.MissingSchemaIdHandlingTest()", file="JsonSchemaGeneratorTests.cs"];
m5_57 [label="JsonSchema schema = generator.Generate(typeof(Store))", span="249-249", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.MissingSchemaIdHandlingTest()", file="JsonSchemaGeneratorTests.cs"];
m5_59 [label="generator.UndefinedSchemaIdHandling = UndefinedSchemaIdHandling.UseTypeName", span="252-252", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.MissingSchemaIdHandlingTest()", file="JsonSchemaGeneratorTests.cs"];
m5_60 [label="schema = generator.Generate(typeof(Store))", span="253-253", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.MissingSchemaIdHandlingTest()", file="JsonSchemaGeneratorTests.cs"];
m5_62 [label="generator.UndefinedSchemaIdHandling = UndefinedSchemaIdHandling.UseAssemblyQualifiedName", span="256-256", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.MissingSchemaIdHandlingTest()", file="JsonSchemaGeneratorTests.cs"];
m5_63 [label="schema = generator.Generate(typeof(Store))", span="257-257", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.MissingSchemaIdHandlingTest()", file="JsonSchemaGeneratorTests.cs"];
m5_58 [label="Assert.AreEqual(null, schema.Id)", span="250-250", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.MissingSchemaIdHandlingTest()", file="JsonSchemaGeneratorTests.cs"];
m5_61 [label="Assert.AreEqual(typeof(Store).FullName, schema.Id)", span="254-254", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.MissingSchemaIdHandlingTest()", file="JsonSchemaGeneratorTests.cs"];
m5_64 [label="Assert.AreEqual(typeof(Store).AssemblyQualifiedName, schema.Id)", span="258-258", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.MissingSchemaIdHandlingTest()", file="JsonSchemaGeneratorTests.cs"];
m5_65 [label="Exit Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.MissingSchemaIdHandlingTest()", span="245-245", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.MissingSchemaIdHandlingTest()", file="JsonSchemaGeneratorTests.cs"];
m5_156 [label="Entry Newtonsoft.Json.Linq.JTokenWriter.JTokenWriter()", span="85-85", cluster="Newtonsoft.Json.Linq.JTokenWriter.JTokenWriter()", file="JsonSchemaGeneratorTests.cs"];
m5_32 [label="Entry Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_UserNullable()", span="161-161", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_UserNullable()", file="JsonSchemaGeneratorTests.cs"];
m5_33 [label="JsonSchemaGenerator generator = new JsonSchemaGenerator()", span="163-163", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_UserNullable()", file="JsonSchemaGeneratorTests.cs"];
m5_34 [label="JsonSchema schema = generator.Generate(typeof(UserNullable))", span="164-164", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_UserNullable()", file="JsonSchemaGeneratorTests.cs"];
m5_35 [label="string json = schema.ToString()", span="166-166", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_UserNullable()", file="JsonSchemaGeneratorTests.cs"];
m5_36 [label="StringAssert.AreEqual(@''{\r\n  ''''type'''': ''''object'''',\r\n  ''''properties'''': {\r\n    ''''Id'''': {\r\n      ''''required'''': true,\r\n      ''''type'''': ''''string''''\r\n    },\r\n    ''''FName'''': {\r\n      ''''required'''': true,\r\n      ''''type'''': [\r\n        ''''string'''',\r\n        ''''null''''\r\n      ]\r\n    },\r\n    ''''LName'''': {\r\n      ''''required'''': true,\r\n      ''''type'''': [\r\n        ''''string'''',\r\n        ''''null''''\r\n      ]\r\n    },\r\n    ''''RoleId'''': {\r\n      ''''required'''': true,\r\n      ''''type'''': ''''integer''''\r\n    },\r\n    ''''NullableRoleId'''': {\r\n      ''''required'''': true,\r\n      ''''type'''': [\r\n        ''''integer'''',\r\n        ''''null''''\r\n      ]\r\n    },\r\n    ''''NullRoleId'''': {\r\n      ''''required'''': true,\r\n      ''''type'''': [\r\n        ''''integer'''',\r\n        ''''null''''\r\n      ]\r\n    },\r\n    ''''Active'''': {\r\n      ''''required'''': true,\r\n      ''''type'''': [\r\n        ''''boolean'''',\r\n        ''''null''''\r\n      ]\r\n    }\r\n  }\r\n}'', json)", span="168-215", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_UserNullable()", file="JsonSchemaGeneratorTests.cs"];
m5_37 [label="Exit Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_UserNullable()", span="161-161", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_UserNullable()", file="JsonSchemaGeneratorTests.cs"];
m5_155 [label="Entry System.IO.DirectoryInfo.DirectoryInfo(string)", span="0-0", cluster="System.IO.DirectoryInfo.DirectoryInfo(string)", file="JsonSchemaGeneratorTests.cs"];
m5_13 [label="Entry Newtonsoft.Json.Tests.StringAssert.AreEqual(string, string)", span="338-338", cluster="Newtonsoft.Json.Tests.StringAssert.AreEqual(string, string)", file="JsonSchemaGeneratorTests.cs"];
m5_198 [label="Entry lambda expression", span="572-572", cluster="lambda expression", file="JsonSchemaGeneratorTests.cs"];
m5_70 [label="Entry lambda expression", span="264-268", cluster="lambda expression", file="JsonSchemaGeneratorTests.cs"];
m5_71 [label="JsonSchemaGenerator generator = new JsonSchemaGenerator()", span="266-266", cluster="lambda expression", file="JsonSchemaGeneratorTests.cs"];
m5_72 [label="generator.Generate(typeof(CircularReferenceClass))", span="267-267", cluster="lambda expression", file="JsonSchemaGeneratorTests.cs"];
m5_73 [label="Exit lambda expression", span="264-268", cluster="lambda expression", file="JsonSchemaGeneratorTests.cs"];
m5_135 [label="Entry lambda expression", span="364-364", cluster="lambda expression", file="JsonSchemaGeneratorTests.cs"];
m5_136 [label="m.PropertyName != ''Root''", span="364-364", cluster="lambda expression", file="JsonSchemaGeneratorTests.cs"];
m5_137 [label="Exit lambda expression", span="364-364", cluster="lambda expression", file="JsonSchemaGeneratorTests.cs"];
m5_163 [label="errors.Add(args.Message)", span="468-468", cluster="lambda expression", color=red, community=0, file="JsonSchemaGeneratorTests.cs"];
m5_162 [label="Entry lambda expression", span="468-468", cluster="lambda expression", file="JsonSchemaGeneratorTests.cs"];
m5_164 [label="Exit lambda expression", span="468-468", cluster="lambda expression", file="JsonSchemaGeneratorTests.cs"];
m5_199 [label="errors.Add(args.Message)", span="572-572", cluster="lambda expression", file="JsonSchemaGeneratorTests.cs"];
m5_200 [label="Exit lambda expression", span="572-572", cluster="lambda expression", file="JsonSchemaGeneratorTests.cs"];
m5_92 [label="Entry Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForType()", span="299-299", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForType()", file="JsonSchemaGeneratorTests.cs"];
m5_93 [label="JsonSchemaGenerator generator = new JsonSchemaGenerator()", span="301-301", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForType()", file="JsonSchemaGeneratorTests.cs"];
m5_94 [label="generator.UndefinedSchemaIdHandling = UndefinedSchemaIdHandling.UseTypeName", span="302-302", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForType()", file="JsonSchemaGeneratorTests.cs"];
m5_95 [label="JsonSchema schema = generator.Generate(typeof(Type))", span="304-304", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForType()", file="JsonSchemaGeneratorTests.cs"];
m5_96 [label="Assert.AreEqual(JsonSchemaType.String, schema.Type)", span="306-306", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForType()", file="JsonSchemaGeneratorTests.cs"];
m5_99 [label="Assert.IsTrue(v.IsValid(schema))", span="311-311", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForType()", file="JsonSchemaGeneratorTests.cs"];
m5_97 [label="string json = JsonConvert.SerializeObject(typeof(Version), Formatting.Indented)", span="308-308", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForType()", file="JsonSchemaGeneratorTests.cs"];
m5_98 [label="JValue v = new JValue(json)", span="310-310", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForType()", file="JsonSchemaGeneratorTests.cs"];
m5_100 [label="Exit Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForType()", span="299-299", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForType()", file="JsonSchemaGeneratorTests.cs"];
m5_0 [label="Entry Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_GenericDictionary()", span="60-60", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_GenericDictionary()", file="JsonSchemaGeneratorTests.cs"];
m5_1 [label="JsonSchemaGenerator generator = new JsonSchemaGenerator()", span="62-62", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_GenericDictionary()", file="JsonSchemaGeneratorTests.cs"];
m5_2 [label="JsonSchema schema = generator.Generate(typeof(Dictionary<string, List<string>>))", span="63-63", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_GenericDictionary()", file="JsonSchemaGeneratorTests.cs"];
m5_3 [label="string json = schema.ToString()", span="65-65", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_GenericDictionary()", file="JsonSchemaGeneratorTests.cs"];
m5_8 [label="Assert.IsTrue(o.IsValid(schema))", span="92-92", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_GenericDictionary()", file="JsonSchemaGeneratorTests.cs"];
m5_4 [label="StringAssert.AreEqual(@''{\r\n  ''''type'''': ''''object'''',\r\n  ''''additionalProperties'''': {\r\n    ''''type'''': [\r\n      ''''array'''',\r\n      ''''null''''\r\n    ],\r\n    ''''items'''': {\r\n      ''''type'''': [\r\n        ''''string'''',\r\n        ''''null''''\r\n      ]\r\n    }\r\n  }\r\n}'', json)", span="67-81", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_GenericDictionary()", file="JsonSchemaGeneratorTests.cs"];
m5_5 [label="Dictionary<string, List<string>> value = new Dictionary<string, List<string>>\r\n            {\r\n                { ''HasValue'', new List<string>() { ''first'', ''second'', null } },\r\n                { ''NoValue'', null }\r\n            }", span="83-87", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_GenericDictionary()", file="JsonSchemaGeneratorTests.cs"];
m5_6 [label="string valueJson = JsonConvert.SerializeObject(value, Formatting.Indented)", span="89-89", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_GenericDictionary()", file="JsonSchemaGeneratorTests.cs"];
m5_7 [label="JObject o = JObject.Parse(valueJson)", span="90-90", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_GenericDictionary()", file="JsonSchemaGeneratorTests.cs"];
m5_9 [label="Exit Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_GenericDictionary()", span="60-60", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_GenericDictionary()", file="JsonSchemaGeneratorTests.cs"];
m5_133 [label="Entry Unk.Where", span="", cluster="Unk.Where", file="JsonSchemaGeneratorTests.cs"];
m5_138 [label="Entry Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForDirectoryInfo()", span="371-371", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForDirectoryInfo()", file="JsonSchemaGeneratorTests.cs"];
m5_139 [label="JsonSchemaGenerator generator = new JsonSchemaGenerator()", span="373-373", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForDirectoryInfo()", color=red, community=0, file="JsonSchemaGeneratorTests.cs"];
m5_140 [label="generator.UndefinedSchemaIdHandling = UndefinedSchemaIdHandling.UseTypeName", span="374-374", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForDirectoryInfo()", color=red, community=0, file="JsonSchemaGeneratorTests.cs"];
m5_141 [label="generator.ContractResolver = new CustomDirectoryInfoMapper\r\n            {\r\n#if !(PORTABLE || DNXCORE50)\r\n                IgnoreSerializableAttribute = true\r\n#endif\r\n            }", span="375-380", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForDirectoryInfo()", color=red, community=0, file="JsonSchemaGeneratorTests.cs"];
m5_142 [label="JsonSchema schema = generator.Generate(typeof(DirectoryInfo), true)", span="382-382", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForDirectoryInfo()", color=red, community=0, file="JsonSchemaGeneratorTests.cs"];
m5_143 [label="string json = schema.ToString()", span="384-384", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForDirectoryInfo()", color=red, community=0, file="JsonSchemaGeneratorTests.cs"];
m5_152 [label="jsonWriter.Token.Validate(schema, (sender, args) => errors.Add(args.Message))", span="468-468", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForDirectoryInfo()", color=red, community=0, file="JsonSchemaGeneratorTests.cs"];
m5_144 [label="StringAssert.AreEqual(@''{\r\n  ''''id'''': ''''System.IO.DirectoryInfo'''',\r\n  ''''required'''': true,\r\n  ''''type'''': [\r\n    ''''object'''',\r\n    ''''null''''\r\n  ],\r\n  ''''additionalProperties'''': false,\r\n  ''''properties'''': {\r\n    ''''Name'''': {\r\n      ''''required'''': true,\r\n      ''''type'''': [\r\n        ''''string'''',\r\n        ''''null''''\r\n      ]\r\n    },\r\n    ''''Parent'''': {\r\n      ''''$ref'''': ''''System.IO.DirectoryInfo''''\r\n    },\r\n    ''''Exists'''': {\r\n      ''''required'''': true,\r\n      ''''type'''': ''''boolean''''\r\n    },\r\n    ''''FullName'''': {\r\n      ''''required'''': true,\r\n      ''''type'''': [\r\n        ''''string'''',\r\n        ''''null''''\r\n      ]\r\n    },\r\n    ''''Extension'''': {\r\n      ''''required'''': true,\r\n      ''''type'''': [\r\n        ''''string'''',\r\n        ''''null''''\r\n      ]\r\n    },\r\n    ''''CreationTime'''': {\r\n      ''''required'''': true,\r\n      ''''type'''': ''''string''''\r\n    },\r\n    ''''CreationTimeUtc'''': {\r\n      ''''required'''': true,\r\n      ''''type'''': ''''string''''\r\n    },\r\n    ''''LastAccessTime'''': {\r\n      ''''required'''': true,\r\n      ''''type'''': ''''string''''\r\n    },\r\n    ''''LastAccessTimeUtc'''': {\r\n      ''''required'''': true,\r\n      ''''type'''': ''''string''''\r\n    },\r\n    ''''LastWriteTime'''': {\r\n      ''''required'''': true,\r\n      ''''type'''': ''''string''''\r\n    },\r\n    ''''LastWriteTimeUtc'''': {\r\n      ''''required'''': true,\r\n      ''''type'''': ''''string''''\r\n    },\r\n    ''''Attributes'''': {\r\n      ''''required'''': true,\r\n      ''''type'''': ''''integer''''\r\n    }\r\n  }\r\n}'', json)", span="386-452", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForDirectoryInfo()", color=red, community=0, file="JsonSchemaGeneratorTests.cs"];
m5_145 [label="DirectoryInfo temp = new DirectoryInfo(@''c:\temp'')", span="454-454", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForDirectoryInfo()", color=red, community=0, file="JsonSchemaGeneratorTests.cs"];
m5_146 [label="JTokenWriter jsonWriter = new JTokenWriter()", span="456-456", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForDirectoryInfo()", color=red, community=0, file="JsonSchemaGeneratorTests.cs"];
m5_150 [label="serializer.Serialize(jsonWriter, temp)", span="465-465", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForDirectoryInfo()", color=red, community=0, file="JsonSchemaGeneratorTests.cs"];
m5_147 [label="JsonSerializer serializer = new JsonSerializer()", span="457-457", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForDirectoryInfo()", color=red, community=0, file="JsonSchemaGeneratorTests.cs"];
m5_148 [label="serializer.Converters.Add(new IsoDateTimeConverter())", span="458-458", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForDirectoryInfo()", color=red, community=0, file="JsonSchemaGeneratorTests.cs"];
m5_149 [label="serializer.ContractResolver = new CustomDirectoryInfoMapper\r\n            {\r\n#if !(PORTABLE || DNXCORE50)\r\n                IgnoreSerializableInterface = true\r\n#endif\r\n            }", span="459-464", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForDirectoryInfo()", color=red, community=0, file="JsonSchemaGeneratorTests.cs"];
m5_151 [label="List<string> errors = new List<string>()", span="467-467", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForDirectoryInfo()", color=red, community=0, file="JsonSchemaGeneratorTests.cs"];
m5_153 [label="Assert.AreEqual(0, errors.Count)", span="470-470", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForDirectoryInfo()", color=red, community=0, file="JsonSchemaGeneratorTests.cs"];
m5_154 [label="Exit Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForDirectoryInfo()", span="371-371", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.GenerateSchemaForDirectoryInfo()", file="JsonSchemaGeneratorTests.cs"];
m5_118 [label="Entry Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CustomDirectoryInfoMapper.CreateContract(System.Type)", span="349-349", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CustomDirectoryInfoMapper.CreateContract(System.Type)", file="JsonSchemaGeneratorTests.cs"];
m5_119 [label="objectType == typeof(DirectoryInfo)", span="351-351", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CustomDirectoryInfoMapper.CreateContract(System.Type)", file="JsonSchemaGeneratorTests.cs"];
m5_120 [label="return base.CreateObjectContract(objectType);", span="353-353", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CustomDirectoryInfoMapper.CreateContract(System.Type)", file="JsonSchemaGeneratorTests.cs"];
m5_121 [label="return base.CreateContract(objectType);", span="356-356", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CustomDirectoryInfoMapper.CreateContract(System.Type)", file="JsonSchemaGeneratorTests.cs"];
m5_122 [label="Exit Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CustomDirectoryInfoMapper.CreateContract(System.Type)", span="349-349", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CustomDirectoryInfoMapper.CreateContract(System.Type)", file="JsonSchemaGeneratorTests.cs"];
m5_38 [label="Entry Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_RequiredMembersClass()", span="219-219", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_RequiredMembersClass()", file="JsonSchemaGeneratorTests.cs"];
m5_39 [label="JsonSchemaGenerator generator = new JsonSchemaGenerator()", span="221-221", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_RequiredMembersClass()", file="JsonSchemaGeneratorTests.cs"];
m5_40 [label="JsonSchema schema = generator.Generate(typeof(RequiredMembersClass))", span="222-222", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_RequiredMembersClass()", file="JsonSchemaGeneratorTests.cs"];
m5_41 [label="Assert.AreEqual(JsonSchemaType.String, schema.Properties[''FirstName''].Type)", span="224-224", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_RequiredMembersClass()", file="JsonSchemaGeneratorTests.cs"];
m5_42 [label="Assert.AreEqual(JsonSchemaType.String | JsonSchemaType.Null, schema.Properties[''MiddleName''].Type)", span="225-225", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_RequiredMembersClass()", file="JsonSchemaGeneratorTests.cs"];
m5_43 [label="Assert.AreEqual(JsonSchemaType.String | JsonSchemaType.Null, schema.Properties[''LastName''].Type)", span="226-226", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_RequiredMembersClass()", file="JsonSchemaGeneratorTests.cs"];
m5_44 [label="Assert.AreEqual(JsonSchemaType.String, schema.Properties[''BirthDate''].Type)", span="227-227", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_RequiredMembersClass()", file="JsonSchemaGeneratorTests.cs"];
m5_45 [label="Exit Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_RequiredMembersClass()", span="219-219", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.Generate_RequiredMembersClass()", file="JsonSchemaGeneratorTests.cs"];
m5_131 [label="Entry Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperties(System.Type, Newtonsoft.Json.MemberSerialization)", span="1292-1292", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperties(System.Type, Newtonsoft.Json.MemberSerialization)", file="JsonSchemaGeneratorTests.cs"];
m5_69 [label="Entry Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", span="367-367", cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", file="JsonSchemaGeneratorTests.cs"];
m5_66 [label="Entry Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularReferenceError()", span="262-262", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularReferenceError()", file="JsonSchemaGeneratorTests.cs"];
m5_67 [label="ExceptionAssert.Throws<Exception>(() =>\r\n            {\r\n                JsonSchemaGenerator generator = new JsonSchemaGenerator();\r\n                generator.Generate(typeof(CircularReferenceClass));\r\n            }, @''Unresolved circular reference for type 'Newtonsoft.Json.Tests.TestObjects.CircularReferenceClass'. Explicitly define an Id for the type using a JsonObject/JsonArray attribute or automatically generate a type Id using the UndefinedSchemaIdHandling property.'')", span="264-268", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularReferenceError()", file="JsonSchemaGeneratorTests.cs"];
m5_68 [label="Exit Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularReferenceError()", span="262-262", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularReferenceError()", file="JsonSchemaGeneratorTests.cs"];
m5_215 [label="Entry Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularReferenceWithMixedRequires()", span="635-635", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularReferenceWithMixedRequires()", file="JsonSchemaGeneratorTests.cs"];
m5_216 [label="JsonSchemaGenerator jsonSchemaGenerator = new JsonSchemaGenerator()", span="637-637", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularReferenceWithMixedRequires()", file="JsonSchemaGeneratorTests.cs"];
m5_217 [label="jsonSchemaGenerator.UndefinedSchemaIdHandling = UndefinedSchemaIdHandling.UseTypeName", span="639-639", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularReferenceWithMixedRequires()", file="JsonSchemaGeneratorTests.cs"];
m5_218 [label="JsonSchema jsonSchema = jsonSchemaGenerator.Generate(typeof(CircularReferenceClass))", span="640-640", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularReferenceWithMixedRequires()", file="JsonSchemaGeneratorTests.cs"];
m5_219 [label="string json = jsonSchema.ToString()", span="641-641", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularReferenceWithMixedRequires()", file="JsonSchemaGeneratorTests.cs"];
m5_220 [label="StringAssert.AreEqual(@''{\r\n  ''''id'''': ''''Newtonsoft.Json.Tests.TestObjects.CircularReferenceClass'''',\r\n  ''''type'''': [\r\n    ''''object'''',\r\n    ''''null''''\r\n  ],\r\n  ''''properties'''': {\r\n    ''''Name'''': {\r\n      ''''required'''': true,\r\n      ''''type'''': ''''string''''\r\n    },\r\n    ''''Child'''': {\r\n      ''''$ref'''': ''''Newtonsoft.Json.Tests.TestObjects.CircularReferenceClass''''\r\n    }\r\n  }\r\n}'', json)", span="643-658", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularReferenceWithMixedRequires()", file="JsonSchemaGeneratorTests.cs"];
m5_221 [label="Exit Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularReferenceWithMixedRequires()", span="635-635", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularReferenceWithMixedRequires()", file="JsonSchemaGeneratorTests.cs"];
m5_84 [label="Entry Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularReferenceWithExplicitId()", span="286-286", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularReferenceWithExplicitId()", file="JsonSchemaGeneratorTests.cs"];
m5_85 [label="JsonSchemaGenerator generator = new JsonSchemaGenerator()", span="288-288", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularReferenceWithExplicitId()", file="JsonSchemaGeneratorTests.cs"];
m5_86 [label="JsonSchema schema = generator.Generate(typeof(CircularReferenceWithIdClass))", span="290-290", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularReferenceWithExplicitId()", file="JsonSchemaGeneratorTests.cs"];
m5_87 [label="Assert.AreEqual(JsonSchemaType.String | JsonSchemaType.Null, schema.Properties[''Name''].Type)", span="292-292", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularReferenceWithExplicitId()", file="JsonSchemaGeneratorTests.cs"];
m5_88 [label="Assert.AreEqual(''MyExplicitId'', schema.Id)", span="293-293", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularReferenceWithExplicitId()", file="JsonSchemaGeneratorTests.cs"];
m5_89 [label="Assert.AreEqual(JsonSchemaType.Object | JsonSchemaType.Null, schema.Properties[''Child''].Type)", span="294-294", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularReferenceWithExplicitId()", file="JsonSchemaGeneratorTests.cs"];
m5_90 [label="Assert.AreEqual(schema, schema.Properties[''Child''])", span="295-295", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularReferenceWithExplicitId()", file="JsonSchemaGeneratorTests.cs"];
m5_91 [label="Exit Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularReferenceWithExplicitId()", span="286-286", cluster="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CircularReferenceWithExplicitId()", file="JsonSchemaGeneratorTests.cs"];
m5_123 [label="Entry Newtonsoft.Json.Serialization.DefaultContractResolver.CreateObjectContract(System.Type)", span="316-316", cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateObjectContract(System.Type)", file="JsonSchemaGeneratorTests.cs"];
m5_235 [label="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CustomDirectoryInfoMapper", span="", file="JsonSchemaGeneratorTests.cs"];
m5_236 [label=errors, span="", file="JsonSchemaGeneratorTests.cs"];
m5_237 [label=errors, span="", file="JsonSchemaGeneratorTests.cs"];
m6_442 [label="Entry Newtonsoft.Json.Tests.Serialization.StringListAppenderConverter.StringListAppenderConverter()", span="2486-2486", cluster="Newtonsoft.Json.Tests.Serialization.StringListAppenderConverter.StringListAppenderConverter()", file="JsonSerializerCollectionsTests.cs"];
m6_1070 [label="Entry Newtonsoft.Json.Tests.Serialization.StringAppenderConverter.CanConvert(System.Type)", span="2532-2532", cluster="Newtonsoft.Json.Tests.Serialization.StringAppenderConverter.CanConvert(System.Type)", file="JsonSerializerCollectionsTests.cs"];
m6_1071 [label="return (objectType == typeof(string));", span="2534-2534", cluster="Newtonsoft.Json.Tests.Serialization.StringAppenderConverter.CanConvert(System.Type)", file="JsonSerializerCollectionsTests.cs"];
m6_1072 [label="Exit Newtonsoft.Json.Tests.Serialization.StringAppenderConverter.CanConvert(System.Type)", span="2532-2532", cluster="Newtonsoft.Json.Tests.Serialization.StringAppenderConverter.CanConvert(System.Type)", file="JsonSerializerCollectionsTests.cs"];
m6_354 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CustomReadOnlyDictionary<TKey, TValue>.GetEnumerator()", span="741-741", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CustomReadOnlyDictionary<TKey, TValue>.GetEnumerator()", file="JsonSerializerCollectionsTests.cs"];
m6_355 [label="return _dictionary.GetEnumerator();", span="743-743", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CustomReadOnlyDictionary<TKey, TValue>.GetEnumerator()", file="JsonSerializerCollectionsTests.cs"];
m6_356 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CustomReadOnlyDictionary<TKey, TValue>.GetEnumerator()", span="741-741", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CustomReadOnlyDictionary<TKey, TValue>.GetEnumerator()", file="JsonSerializerCollectionsTests.cs"];
m6_801 [label="Entry Newtonsoft.Json.Tests.Serialization.GenericItem<T>.GenericItem()", span="2442-2442", cluster="Newtonsoft.Json.Tests.Serialization.GenericItem<T>.GenericItem()", file="JsonSerializerCollectionsTests.cs"];
m6_999 [label="Entry Newtonsoft.Json.Tests.Serialization.ReadOnlyCollectionWithArrayArgument<T>.Add(T)", span="2342-2342", cluster="Newtonsoft.Json.Tests.Serialization.ReadOnlyCollectionWithArrayArgument<T>.Add(T)", file="JsonSerializerCollectionsTests.cs"];
m6_1000 [label="throw new NotImplementedException();", span="2344-2344", cluster="Newtonsoft.Json.Tests.Serialization.ReadOnlyCollectionWithArrayArgument<T>.Add(T)", file="JsonSerializerCollectionsTests.cs"];
m6_1001 [label="Exit Newtonsoft.Json.Tests.Serialization.ReadOnlyCollectionWithArrayArgument<T>.Add(T)", span="2342-2342", cluster="Newtonsoft.Json.Tests.Serialization.ReadOnlyCollectionWithArrayArgument<T>.Add(T)", file="JsonSerializerCollectionsTests.cs"];
m6_11 [label="Entry System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.First<TSource>()", file="JsonSerializerCollectionsTests.cs"];
m6_1041 [label="Entry Newtonsoft.Json.Tests.Serialization.GenericClass<T, TValue>.System.Collections.IEnumerable.GetEnumerator()", span="2476-2476", cluster="Newtonsoft.Json.Tests.Serialization.GenericClass<T, TValue>.System.Collections.IEnumerable.GetEnumerator()", file="JsonSerializerCollectionsTests.cs"];
m6_1042 [label="return GetEnumerator();", span="2478-2478", cluster="Newtonsoft.Json.Tests.Serialization.GenericClass<T, TValue>.System.Collections.IEnumerable.GetEnumerator()", file="JsonSerializerCollectionsTests.cs"];
m6_1043 [label="Exit Newtonsoft.Json.Tests.Serialization.GenericClass<T, TValue>.System.Collections.IEnumerable.GetEnumerator()", span="2476-2476", cluster="Newtonsoft.Json.Tests.Serialization.GenericClass<T, TValue>.System.Collections.IEnumerable.GetEnumerator()", file="JsonSerializerCollectionsTests.cs"];
m6_481 [label="Entry Newtonsoft.Json.Tests.TestObjects.GameObject.GameObject()", span="42-42", cluster="Newtonsoft.Json.Tests.TestObjects.GameObject.GameObject()", file="JsonSerializerCollectionsTests.cs"];
m6_74 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestCollectionMultipleParameters.TestCollectionMultipleParameters(string, string)", span="175-175", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestCollectionMultipleParameters.TestCollectionMultipleParameters(string, string)", file="JsonSerializerCollectionsTests.cs"];
m6_75 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestCollectionMultipleParameters.TestCollectionMultipleParameters(string, string)", span="175-175", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestCollectionMultipleParameters.TestCollectionMultipleParameters(string, string)", file="JsonSerializerCollectionsTests.cs"];
m6_294 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeNonIsoDateDictionaryKey()", span="622-622", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeNonIsoDateDictionaryKey()", file="JsonSerializerCollectionsTests.cs"];
m6_295 [label="Dictionary<DateTime, string> d = JsonConvert.DeserializeObject<Dictionary<DateTime, string>>(@''{''''04/28/2013 00:00:00'''':''''test''''}'')", span="624-624", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeNonIsoDateDictionaryKey()", file="JsonSerializerCollectionsTests.cs"];
m6_296 [label="Assert.AreEqual(1, d.Count)", span="626-626", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeNonIsoDateDictionaryKey()", file="JsonSerializerCollectionsTests.cs"];
m6_298 [label="Assert.AreEqual(''test'', d[key])", span="629-629", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeNonIsoDateDictionaryKey()", file="JsonSerializerCollectionsTests.cs"];
m6_297 [label="DateTime key = DateTime.Parse(''04/28/2013 00:00:00'', CultureInfo.InvariantCulture)", span="628-628", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeNonIsoDateDictionaryKey()", file="JsonSerializerCollectionsTests.cs"];
m6_299 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeNonIsoDateDictionaryKey()", span="622-622", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeNonIsoDateDictionaryKey()", file="JsonSerializerCollectionsTests.cs"];
m6_233 [label="Entry Unk.IsTrue", span="", cluster="Unk.IsTrue", file="JsonSerializerCollectionsTests.cs"];
m6_329 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeReadOnlyDictionaryInterface()", span="679-679", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeReadOnlyDictionaryInterface()", file="JsonSerializerCollectionsTests.cs"];
m6_330 [label="IReadOnlyDictionary<string, int> dic = JsonConvert.DeserializeObject<IReadOnlyDictionary<string, int>>(''{'one':1,'two':2}'')", span="681-681", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeReadOnlyDictionaryInterface()", file="JsonSerializerCollectionsTests.cs"];
m6_331 [label="Assert.AreEqual(2, dic.Count)", span="683-683", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeReadOnlyDictionaryInterface()", file="JsonSerializerCollectionsTests.cs"];
m6_332 [label="Assert.AreEqual(1, dic[''one''])", span="685-685", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeReadOnlyDictionaryInterface()", file="JsonSerializerCollectionsTests.cs"];
m6_333 [label="Assert.AreEqual(2, dic[''two''])", span="686-686", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeReadOnlyDictionaryInterface()", file="JsonSerializerCollectionsTests.cs"];
m6_334 [label="CustomAssert.IsInstanceOfType(typeof(ReadOnlyDictionary<string, int>), dic)", span="688-688", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeReadOnlyDictionaryInterface()", file="JsonSerializerCollectionsTests.cs"];
m6_335 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeReadOnlyDictionaryInterface()", span="679-679", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeReadOnlyDictionaryInterface()", file="JsonSerializerCollectionsTests.cs"];
m6_938 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", file="JsonSerializerCollectionsTests.cs"];
m6_231 [label="Entry Newtonsoft.Json.Linq.JObject.Parse(string)", span="404-404", cluster="Newtonsoft.Json.Linq.JObject.Parse(string)", file="JsonSerializerCollectionsTests.cs"];
m6_270 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.PrivateDefaultCtorList<T>.PrivateDefaultCtorList()", span="579-579", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.PrivateDefaultCtorList<T>.PrivateDefaultCtorList()", file="JsonSerializerCollectionsTests.cs"];
m6_271 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.PrivateDefaultCtorList<T>.PrivateDefaultCtorList()", span="579-579", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.PrivateDefaultCtorList<T>.PrivateDefaultCtorList()", file="JsonSerializerCollectionsTests.cs"];
m6_257 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.EnumerableClassFailure<T>.GetEnumerator()", span="554-554", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.EnumerableClassFailure<T>.GetEnumerator()", file="JsonSerializerCollectionsTests.cs"];
m6_258 [label="return _values.GetEnumerator();", span="556-556", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.EnumerableClassFailure<T>.GetEnumerator()", file="JsonSerializerCollectionsTests.cs"];
m6_259 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.EnumerableClassFailure<T>.GetEnumerator()", span="554-554", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.EnumerableClassFailure<T>.GetEnumerator()", file="JsonSerializerCollectionsTests.cs"];
m6_284 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.PrivateDefaultCtorWithIEnumerableCtorList<T>.PrivateDefaultCtorWithIEnumerableCtorList(System.Collections.Generic.IEnumerable<T>)", span="603-603", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.PrivateDefaultCtorWithIEnumerableCtorList<T>.PrivateDefaultCtorWithIEnumerableCtorList(System.Collections.Generic.IEnumerable<T>)", file="JsonSerializerCollectionsTests.cs"];
m6_285 [label="Add(default(T))", span="606-606", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.PrivateDefaultCtorWithIEnumerableCtorList<T>.PrivateDefaultCtorWithIEnumerableCtorList(System.Collections.Generic.IEnumerable<T>)", file="JsonSerializerCollectionsTests.cs"];
m6_286 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.PrivateDefaultCtorWithIEnumerableCtorList<T>.PrivateDefaultCtorWithIEnumerableCtorList(System.Collections.Generic.IEnumerable<T>)", span="603-603", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.PrivateDefaultCtorWithIEnumerableCtorList<T>.PrivateDefaultCtorWithIEnumerableCtorList(System.Collections.Generic.IEnumerable<T>)", file="JsonSerializerCollectionsTests.cs"];
m6_237 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.EnumerableClass<T>.GetEnumerator()", span="517-517", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.EnumerableClass<T>.GetEnumerator()", file="JsonSerializerCollectionsTests.cs"];
m6_238 [label="return _values.GetEnumerator();", span="519-519", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.EnumerableClass<T>.GetEnumerator()", file="JsonSerializerCollectionsTests.cs"];
m6_239 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.EnumerableClass<T>.GetEnumerator()", span="517-517", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.EnumerableClass<T>.GetEnumerator()", file="JsonSerializerCollectionsTests.cs"];
m6_260 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.EnumerableClassFailure<T>.System.Collections.IEnumerable.GetEnumerator()", span="559-559", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.EnumerableClassFailure<T>.System.Collections.IEnumerable.GetEnumerator()", file="JsonSerializerCollectionsTests.cs"];
m6_261 [label="return GetEnumerator();", span="561-561", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.EnumerableClassFailure<T>.System.Collections.IEnumerable.GetEnumerator()", file="JsonSerializerCollectionsTests.cs"];
m6_262 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.EnumerableClassFailure<T>.System.Collections.IEnumerable.GetEnumerator()", span="559-559", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.EnumerableClassFailure<T>.System.Collections.IEnumerable.GetEnumerator()", file="JsonSerializerCollectionsTests.cs"];
m6_395 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeExistingGenericList()", span="843-843", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeExistingGenericList()", file="JsonSerializerCollectionsTests.cs"];
m6_396 [label="GenericListTestClass c = new GenericListTestClass()", span="845-845", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeExistingGenericList()", file="JsonSerializerCollectionsTests.cs"];
m6_397 [label="c.GenericList.Add(''1'')", span="846-846", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeExistingGenericList()", file="JsonSerializerCollectionsTests.cs"];
m6_398 [label="c.GenericList.Add(''2'')", span="847-847", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeExistingGenericList()", file="JsonSerializerCollectionsTests.cs"];
m6_399 [label="string json = JsonConvert.SerializeObject(c, Formatting.Indented)", span="849-849", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeExistingGenericList()", file="JsonSerializerCollectionsTests.cs"];
m6_400 [label="GenericListTestClass newValue = JsonConvert.DeserializeObject<GenericListTestClass>(json)", span="851-851", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeExistingGenericList()", file="JsonSerializerCollectionsTests.cs"];
m6_401 [label="Assert.AreEqual(2, newValue.GenericList.Count)", span="852-852", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeExistingGenericList()", file="JsonSerializerCollectionsTests.cs"];
m6_402 [label="Assert.AreEqual(typeof(List<string>), newValue.GenericList.GetType())", span="853-853", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeExistingGenericList()", file="JsonSerializerCollectionsTests.cs"];
m6_403 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeExistingGenericList()", span="843-843", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeExistingGenericList()", file="JsonSerializerCollectionsTests.cs"];
m6_776 [label="Entry Newtonsoft.Json.Tests.TestObjects.Product.Product()", span="29-29", cluster="Newtonsoft.Json.Tests.TestObjects.Product.Product()", file="JsonSerializerCollectionsTests.cs"];
m6_178 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeCustomConcurrentDictionary()", span="377-377", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeCustomConcurrentDictionary()", file="JsonSerializerCollectionsTests.cs"];
m6_179 [label="IDictionary d = new CustomConcurrentDictionary()", span="379-379", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeCustomConcurrentDictionary()", file="JsonSerializerCollectionsTests.cs"];
m6_180 [label="d.Add(''key'', new List<SomeObject>\r\n            {\r\n                new SomeObject\r\n                {\r\n                    Text1 = ''value1''\r\n                }\r\n            })", span="380-386", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeCustomConcurrentDictionary()", file="JsonSerializerCollectionsTests.cs"];
m6_181 [label="string json = JsonConvert.SerializeObject(d, Formatting.Indented)", span="388-388", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeCustomConcurrentDictionary()", file="JsonSerializerCollectionsTests.cs"];
m6_182 [label="Assert.AreEqual(@''{\r\n  ''''key'''': [\r\n    {\r\n      ''''Text1'''': ''''value1''''\r\n    }\r\n  ]\r\n}'', json)", span="390-396", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeCustomConcurrentDictionary()", file="JsonSerializerCollectionsTests.cs"];
m6_183 [label="CustomConcurrentDictionary d2 = JsonConvert.DeserializeObject<CustomConcurrentDictionary>(json)", span="398-398", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeCustomConcurrentDictionary()", file="JsonSerializerCollectionsTests.cs"];
m6_184 [label="Assert.AreEqual(2, d2.Count)", span="400-400", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeCustomConcurrentDictionary()", file="JsonSerializerCollectionsTests.cs"];
m6_185 [label="Assert.AreEqual(''value1'', d2[''key''][0].Text1)", span="401-401", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeCustomConcurrentDictionary()", file="JsonSerializerCollectionsTests.cs"];
m6_186 [label="Assert.AreEqual(''value2'', d2[''key2''][0].Text1)", span="402-402", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeCustomConcurrentDictionary()", file="JsonSerializerCollectionsTests.cs"];
m6_187 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeCustomConcurrentDictionary()", span="377-377", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeCustomConcurrentDictionary()", file="JsonSerializerCollectionsTests.cs"];
m6_366 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CustomReadOnlyCollection<T>.CustomReadOnlyCollection(System.Collections.Generic.IList<T>)", span="774-774", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CustomReadOnlyCollection<T>.CustomReadOnlyCollection(System.Collections.Generic.IList<T>)", file="JsonSerializerCollectionsTests.cs"];
m6_367 [label="_values = values", span="776-776", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CustomReadOnlyCollection<T>.CustomReadOnlyCollection(System.Collections.Generic.IList<T>)", file="JsonSerializerCollectionsTests.cs"];
m6_368 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CustomReadOnlyCollection<T>.CustomReadOnlyCollection(System.Collections.Generic.IList<T>)", span="774-774", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CustomReadOnlyCollection<T>.CustomReadOnlyCollection(System.Collections.Generic.IList<T>)", file="JsonSerializerCollectionsTests.cs"];
m6_911 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MyClass.RemoveAt(int)", span="2075-2075", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MyClass.RemoveAt(int)", file="JsonSerializerCollectionsTests.cs"];
m6_912 [label="((IList<string>)_storage).RemoveAt(index)", span="2077-2077", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MyClass.RemoveAt(int)", file="JsonSerializerCollectionsTests.cs"];
m6_913 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MyClass.RemoveAt(int)", span="2075-2075", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MyClass.RemoveAt(int)", file="JsonSerializerCollectionsTests.cs"];
m6_665 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeIncomplete3DArray()", span="1475-1475", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeIncomplete3DArray()", file="JsonSerializerCollectionsTests.cs"];
m6_666 [label="string json = @''{''''Before'''':''''Before!'''',''''Coordinates'''':[/*hi*/[/*hi*/[1/*hi*/,/*hi*/1/*hi*/,1]/*hi*/,/*hi*/[1,1''", span="1477-1477", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeIncomplete3DArray()", file="JsonSerializerCollectionsTests.cs"];
m6_667 [label="ExceptionAssert.Throws<JsonException>(() => JsonConvert.DeserializeObject<Array3D>(json))", span="1479-1479", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeIncomplete3DArray()", file="JsonSerializerCollectionsTests.cs"];
m6_668 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeIncomplete3DArray()", span="1475-1475", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeIncomplete3DArray()", file="JsonSerializerCollectionsTests.cs"];
m6_881 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MyClass.Add(string)", span="2035-2035", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MyClass.Add(string)", file="JsonSerializerCollectionsTests.cs"];
m6_882 [label="((IList<string>)_storage).Add(item)", span="2037-2037", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MyClass.Add(string)", file="JsonSerializerCollectionsTests.cs"];
m6_883 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MyClass.Add(string)", span="2035-2035", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MyClass.Add(string)", file="JsonSerializerCollectionsTests.cs"];
m6_888 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MyClass.Contains(string)", span="2045-2045", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MyClass.Contains(string)", file="JsonSerializerCollectionsTests.cs"];
m6_889 [label="return ((IList<string>)_storage).Contains(item);", span="2047-2047", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MyClass.Contains(string)", file="JsonSerializerCollectionsTests.cs"];
m6_890 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MyClass.Contains(string)", span="2045-2045", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MyClass.Contains(string)", file="JsonSerializerCollectionsTests.cs"];
m6_1009 [label="Entry Newtonsoft.Json.Tests.Serialization.ReadOnlyCollectionWithArrayArgument<T>.CopyTo(T[], int)", span="2357-2357", cluster="Newtonsoft.Json.Tests.Serialization.ReadOnlyCollectionWithArrayArgument<T>.CopyTo(T[], int)", file="JsonSerializerCollectionsTests.cs"];
m6_1010 [label="throw new NotImplementedException();", span="2359-2359", cluster="Newtonsoft.Json.Tests.Serialization.ReadOnlyCollectionWithArrayArgument<T>.CopyTo(T[], int)", file="JsonSerializerCollectionsTests.cs"];
m6_1011 [label="Exit Newtonsoft.Json.Tests.Serialization.ReadOnlyCollectionWithArrayArgument<T>.CopyTo(T[], int)", span="2357-2357", cluster="Newtonsoft.Json.Tests.Serialization.ReadOnlyCollectionWithArrayArgument<T>.CopyTo(T[], int)", file="JsonSerializerCollectionsTests.cs"];
m6_1059 [label="Entry Newtonsoft.Json.Tests.Serialization.StringListAppenderConverter.CanConvert(System.Type)", span="2511-2511", cluster="Newtonsoft.Json.Tests.Serialization.StringListAppenderConverter.CanConvert(System.Type)", file="JsonSerializerCollectionsTests.cs"];
m6_1060 [label="return (objectType == typeof(List<string>));", span="2513-2513", cluster="Newtonsoft.Json.Tests.Serialization.StringListAppenderConverter.CanConvert(System.Type)", file="JsonSerializerCollectionsTests.cs"];
m6_1061 [label="Exit Newtonsoft.Json.Tests.Serialization.StringListAppenderConverter.CanConvert(System.Type)", span="2511-2511", cluster="Newtonsoft.Json.Tests.Serialization.StringListAppenderConverter.CanConvert(System.Type)", file="JsonSerializerCollectionsTests.cs"];
m6_496 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeNullableKeyValuePairArray()", span="1049-1049", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeNullableKeyValuePairArray()", file="JsonSerializerCollectionsTests.cs"];
m6_497 [label="string json = @''[ { ''''Value'''': [ ''''1'''', ''''2'''' ], ''''Key'''': ''''aaa'''', ''''BadContent'''': [ 0 ] }, null, { ''''Value'''': [ ''''3'''', ''''4'''' ], ''''Key'''': ''''bbb'''' } ]''", span="1051-1051", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeNullableKeyValuePairArray()", file="JsonSerializerCollectionsTests.cs"];
m6_498 [label="IList<KeyValuePair<string, IList<string>>?> values = JsonConvert.DeserializeObject<IList<KeyValuePair<string, IList<string>>?>>(json)", span="1053-1053", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeNullableKeyValuePairArray()", file="JsonSerializerCollectionsTests.cs"];
m6_499 [label="Assert.AreEqual(3, values.Count)", span="1055-1055", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeNullableKeyValuePairArray()", file="JsonSerializerCollectionsTests.cs"];
m6_500 [label="Assert.AreEqual(''aaa'', values[0].Value.Key)", span="1056-1056", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeNullableKeyValuePairArray()", file="JsonSerializerCollectionsTests.cs"];
m6_501 [label="Assert.AreEqual(2, values[0].Value.Value.Count)", span="1057-1057", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeNullableKeyValuePairArray()", file="JsonSerializerCollectionsTests.cs"];
m6_502 [label="Assert.AreEqual(''1'', values[0].Value.Value[0])", span="1058-1058", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeNullableKeyValuePairArray()", file="JsonSerializerCollectionsTests.cs"];
m6_503 [label="Assert.AreEqual(''2'', values[0].Value.Value[1])", span="1059-1059", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeNullableKeyValuePairArray()", file="JsonSerializerCollectionsTests.cs"];
m6_504 [label="Assert.AreEqual(null, values[1])", span="1060-1060", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeNullableKeyValuePairArray()", file="JsonSerializerCollectionsTests.cs"];
m6_505 [label="Assert.AreEqual(''bbb'', values[2].Value.Key)", span="1061-1061", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeNullableKeyValuePairArray()", file="JsonSerializerCollectionsTests.cs"];
m6_506 [label="Assert.AreEqual(2, values[2].Value.Value.Count)", span="1062-1062", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeNullableKeyValuePairArray()", file="JsonSerializerCollectionsTests.cs"];
m6_507 [label="Assert.AreEqual(''3'', values[2].Value.Value[0])", span="1063-1063", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeNullableKeyValuePairArray()", file="JsonSerializerCollectionsTests.cs"];
m6_508 [label="Assert.AreEqual(''4'', values[2].Value.Value[1])", span="1064-1064", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeNullableKeyValuePairArray()", file="JsonSerializerCollectionsTests.cs"];
m6_509 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeNullableKeyValuePairArray()", span="1049-1049", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeNullableKeyValuePairArray()", file="JsonSerializerCollectionsTests.cs"];
m6_907 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MyClass.Remove(string)", span="2070-2070", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MyClass.Remove(string)", file="JsonSerializerCollectionsTests.cs"];
m6_908 [label="return ((IList<string>)_storage).Remove(item);", span="2072-2072", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MyClass.Remove(string)", file="JsonSerializerCollectionsTests.cs"];
m6_909 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MyClass.Remove(string)", span="2070-2070", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MyClass.Remove(string)", file="JsonSerializerCollectionsTests.cs"];
m6_301 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeNonGenericList()", span="633-633", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeNonGenericList()", file="JsonSerializerCollectionsTests.cs"];
m6_302 [label="IList l = JsonConvert.DeserializeObject<IList>(''['string!']'')", span="635-635", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeNonGenericList()", file="JsonSerializerCollectionsTests.cs"];
m6_303 [label="Assert.AreEqual(typeof(List<object>), l.GetType())", span="637-637", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeNonGenericList()", file="JsonSerializerCollectionsTests.cs"];
m6_304 [label="Assert.AreEqual(1, l.Count)", span="638-638", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeNonGenericList()", file="JsonSerializerCollectionsTests.cs"];
m6_305 [label="Assert.AreEqual(''string!'', l[0])", span="639-639", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeNonGenericList()", file="JsonSerializerCollectionsTests.cs"];
m6_306 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeNonGenericList()", span="633-633", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeNonGenericList()", file="JsonSerializerCollectionsTests.cs"];
m6_188 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CustomConcurrentDictionary.CustomConcurrentDictionary()", span="361-361", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CustomConcurrentDictionary.CustomConcurrentDictionary()", file="JsonSerializerCollectionsTests.cs"];
m6_875 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MyClass.MyClass()", span="1995-1995", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MyClass.MyClass()", file="JsonSerializerCollectionsTests.cs"];
m6_876 [label="_storage = new List<string>()", span="1997-1997", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MyClass.MyClass()", file="JsonSerializerCollectionsTests.cs"];
m6_877 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MyClass.MyClass()", span="1995-1995", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MyClass.MyClass()", file="JsonSerializerCollectionsTests.cs"];
m6_555 [label="Entry Newtonsoft.Json.Tests.Serialization.Array2D.Array2D()", span="2418-2418", cluster="Newtonsoft.Json.Tests.Serialization.Array2D.Array2D()", file="JsonSerializerCollectionsTests.cs"];
m6_531 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeReadOnlyCollections()", span="1113-1113", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeReadOnlyCollections()", file="JsonSerializerCollectionsTests.cs"];
m6_532 [label="PopulateReadOnlyTestClass c1 = new PopulateReadOnlyTestClass()", span="1115-1115", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeReadOnlyCollections()", file="JsonSerializerCollectionsTests.cs"];
m6_533 [label="string json = JsonConvert.SerializeObject(c1, Formatting.Indented)", span="1117-1117", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeReadOnlyCollections()", file="JsonSerializerCollectionsTests.cs"];
m6_534 [label="StringAssert.AreEqual(@''{\r\n  ''''NonReadOnlyList'''': [\r\n    1\r\n  ],\r\n  ''''NonReadOnlyDictionary'''': {\r\n    ''''first'''': 2\r\n  },\r\n  ''''Array'''': [\r\n    3\r\n  ],\r\n  ''''List'''': [\r\n    4\r\n  ],\r\n  ''''Dictionary'''': {\r\n    ''''first'''': 5\r\n  },\r\n  ''''IReadOnlyCollection'''': [\r\n    6\r\n  ],\r\n  ''''ReadOnlyCollection'''': [\r\n    7\r\n  ],\r\n  ''''IReadOnlyList'''': [\r\n    8\r\n  ],\r\n  ''''IReadOnlyDictionary'''': {\r\n    ''''first'''': 9\r\n  },\r\n  ''''ReadOnlyDictionary'''': {\r\n    ''''first'''': 10\r\n  }\r\n}'', json)", span="1119-1150", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeReadOnlyCollections()", file="JsonSerializerCollectionsTests.cs"];
m6_535 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeReadOnlyCollections()", span="1113-1113", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeReadOnlyCollections()", file="JsonSerializerCollectionsTests.cs"];
m6_565 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeArray3DWithConverter()", span="1230-1230", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeArray3DWithConverter()", file="JsonSerializerCollectionsTests.cs"];
m6_566 [label="Array3DWithConverter aa = new Array3DWithConverter()", span="1232-1232", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeArray3DWithConverter()", file="JsonSerializerCollectionsTests.cs"];
m6_567 [label="aa.Before = ''Before!''", span="1233-1233", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeArray3DWithConverter()", file="JsonSerializerCollectionsTests.cs"];
m6_568 [label="aa.After = ''After!''", span="1234-1234", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeArray3DWithConverter()", file="JsonSerializerCollectionsTests.cs"];
m6_569 [label="aa.Coordinates = new[,,] { { { 1, 1, 1 }, { 1, 1, 2 } }, { { 1, 2, 1 }, { 1, 2, 2 } }, { { 2, 1, 1 }, { 2, 1, 2 } }, { { 2, 2, 1 }, { 2, 2, 2 } } }", span="1235-1235", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeArray3DWithConverter()", file="JsonSerializerCollectionsTests.cs"];
m6_570 [label="string json = JsonConvert.SerializeObject(aa, Formatting.Indented)", span="1237-1237", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeArray3DWithConverter()", file="JsonSerializerCollectionsTests.cs"];
m6_571 [label="StringAssert.AreEqual(@''{\r\n  ''''Before'''': ''''Before!'''',\r\n  ''''Coordinates'''': [\r\n    [\r\n      [\r\n        1.0,\r\n        1.0,\r\n        1.0\r\n      ],\r\n      [\r\n        1.0,\r\n        1.0,\r\n        2.0\r\n      ]\r\n    ],\r\n    [\r\n      [\r\n        1.0,\r\n        2.0,\r\n        1.0\r\n      ],\r\n      [\r\n        1.0,\r\n        2.0,\r\n        2.0\r\n      ]\r\n    ],\r\n    [\r\n      [\r\n        2.0,\r\n        1.0,\r\n        1.0\r\n      ],\r\n      [\r\n        2.0,\r\n        1.0,\r\n        2.0\r\n      ]\r\n    ],\r\n    [\r\n      [\r\n        2.0,\r\n        2.0,\r\n        1.0\r\n      ],\r\n      [\r\n        2.0,\r\n        2.0,\r\n        2.0\r\n      ]\r\n    ]\r\n  ],\r\n  ''''After'''': ''''After!''''\r\n}'', json)", span="1239-1292", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeArray3DWithConverter()", file="JsonSerializerCollectionsTests.cs"];
m6_572 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeArray3DWithConverter()", span="1230-1230", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeArray3DWithConverter()", file="JsonSerializerCollectionsTests.cs"];
m6_76 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CollectionJsonConstructorMultipleParameters()", span="181-181", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CollectionJsonConstructorMultipleParameters()", file="JsonSerializerCollectionsTests.cs"];
m6_77 [label="ExceptionAssert.Throws<JsonException>(\r\n                () => JsonConvert.SerializeObject(new TestCollectionMultipleParameters(null, null)),\r\n                ''Constructor for 'Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests+TestCollectionMultipleParameters' must have no parameters or a single parameter that implements 'System.Collections.Generic.IEnumerable`1[System.Int32]'.'')", span="183-185", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CollectionJsonConstructorMultipleParameters()", file="JsonSerializerCollectionsTests.cs"];
m6_78 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CollectionJsonConstructorMultipleParameters()", span="181-181", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CollectionJsonConstructorMultipleParameters()", file="JsonSerializerCollectionsTests.cs"];
m6_699 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeReferenceTracked3DArray()", span="1525-1525", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeReferenceTracked3DArray()", file="JsonSerializerCollectionsTests.cs"];
m6_700 [label="Event1 e1 = new Event1\r\n            {\r\n                EventName = ''EventName!''\r\n            }", span="1527-1530", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeReferenceTracked3DArray()", file="JsonSerializerCollectionsTests.cs"];
m6_701 [label="Event1[,] array1 = new[,] { { e1, e1 }, { e1, e1 } }", span="1531-1531", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeReferenceTracked3DArray()", file="JsonSerializerCollectionsTests.cs"];
m6_702 [label="IList<Event1[,]> values1 = new List<Event1[,]>\r\n            {\r\n                array1,\r\n                array1\r\n            }", span="1532-1536", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeReferenceTracked3DArray()", file="JsonSerializerCollectionsTests.cs"];
m6_703 [label="string json = JsonConvert.SerializeObject(values1, new JsonSerializerSettings\r\n            {\r\n                PreserveReferencesHandling = PreserveReferencesHandling.All,\r\n                Formatting = Formatting.Indented\r\n            })", span="1538-1542", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeReferenceTracked3DArray()", file="JsonSerializerCollectionsTests.cs"];
m6_704 [label="StringAssert.AreEqual(@''{\r\n  ''''$id'''': ''''1'''',\r\n  ''''$values'''': [\r\n    {\r\n      ''''$id'''': ''''2'''',\r\n      ''''$values'''': [\r\n        [\r\n          {\r\n            ''''$id'''': ''''3'''',\r\n            ''''EventName'''': ''''EventName!'''',\r\n            ''''Venue'''': null,\r\n            ''''Performances'''': null\r\n          },\r\n          {\r\n            ''''$ref'''': ''''3''''\r\n          }\r\n        ],\r\n        [\r\n          {\r\n            ''''$ref'''': ''''3''''\r\n          },\r\n          {\r\n            ''''$ref'''': ''''3''''\r\n          }\r\n        ]\r\n      ]\r\n    },\r\n    {\r\n      ''''$ref'''': ''''2''''\r\n    }\r\n  ]\r\n}'', json)", span="1544-1575", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeReferenceTracked3DArray()", file="JsonSerializerCollectionsTests.cs"];
m6_705 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeReferenceTracked3DArray()", span="1525-1525", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeReferenceTracked3DArray()", file="JsonSerializerCollectionsTests.cs"];
m6_985 [label="Entry Unk.Parse", span="", cluster="Unk.Parse", file="JsonSerializerCollectionsTests.cs"];
m6_282 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.PrivateDefaultCtorWithIEnumerableCtorList<T>.PrivateDefaultCtorWithIEnumerableCtorList()", span="599-599", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.PrivateDefaultCtorWithIEnumerableCtorList<T>.PrivateDefaultCtorWithIEnumerableCtorList()", file="JsonSerializerCollectionsTests.cs"];
m6_283 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.PrivateDefaultCtorWithIEnumerableCtorList<T>.PrivateDefaultCtorWithIEnumerableCtorList()", span="599-599", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.PrivateDefaultCtorWithIEnumerableCtorList<T>.PrivateDefaultCtorWithIEnumerableCtorList()", file="JsonSerializerCollectionsTests.cs"];
m6_353 [label="Entry System.Collections.Generic.IDictionary<TKey, TValue>.TryGetValue(TKey, out TValue)", span="0-0", cluster="System.Collections.Generic.IDictionary<TKey, TValue>.TryGetValue(TKey, out TValue)", file="JsonSerializerCollectionsTests.cs"];
m6_33 [label="Entry System.Collections.Generic.List<T>.List(System.Collections.Generic.IEnumerable<T>)", span="0-0", cluster="System.Collections.Generic.List<T>.List(System.Collections.Generic.IEnumerable<T>)", file="JsonSerializerCollectionsTests.cs"];
m6_887 [label="Entry System.Collections.Generic.ICollection<T>.Clear()", span="0-0", cluster="System.Collections.Generic.ICollection<T>.Clear()", file="JsonSerializerCollectionsTests.cs"];
m6_930 [label="Entry Newtonsoft.Json.Tests.Serialization.CASResponce.ExtractLanguage()", span="2187-2187", cluster="Newtonsoft.Json.Tests.Serialization.CASResponce.ExtractLanguage()", file="JsonSerializerCollectionsTests.cs"];
m6_940 [label="Person.ContainsKey(''language'')", span="2189-2189", cluster="Newtonsoft.Json.Tests.Serialization.CASResponce.ExtractLanguage()", file="JsonSerializerCollectionsTests.cs"];
m6_941 [label="Person[''language''].Trim()", span="2191-2191", cluster="Newtonsoft.Json.Tests.Serialization.CASResponce.ExtractLanguage()", file="JsonSerializerCollectionsTests.cs"];
m6_947 [label="this.Language = ssoLanguage.Unknown", span="2206-2206", cluster="Newtonsoft.Json.Tests.Serialization.CASResponce.ExtractLanguage()", file="JsonSerializerCollectionsTests.cs"];
m6_942 [label="''da''", span="2193-2193", cluster="Newtonsoft.Json.Tests.Serialization.CASResponce.ExtractLanguage()", file="JsonSerializerCollectionsTests.cs"];
m6_944 [label="''en''", span="2196-2196", cluster="Newtonsoft.Json.Tests.Serialization.CASResponce.ExtractLanguage()", file="JsonSerializerCollectionsTests.cs"];
m6_946 [label="this.Language = ssoLanguage.Unknown", span="2200-2200", cluster="Newtonsoft.Json.Tests.Serialization.CASResponce.ExtractLanguage()", file="JsonSerializerCollectionsTests.cs"];
m6_943 [label="this.Language = ssoLanguage.Danish", span="2194-2194", cluster="Newtonsoft.Json.Tests.Serialization.CASResponce.ExtractLanguage()", file="JsonSerializerCollectionsTests.cs"];
m6_945 [label="this.Language = ssoLanguage.English", span="2197-2197", cluster="Newtonsoft.Json.Tests.Serialization.CASResponce.ExtractLanguage()", file="JsonSerializerCollectionsTests.cs"];
m6_948 [label="Exit Newtonsoft.Json.Tests.Serialization.CASResponce.ExtractLanguage()", span="2187-2187", cluster="Newtonsoft.Json.Tests.Serialization.CASResponce.ExtractLanguage()", file="JsonSerializerCollectionsTests.cs"];
m6_308 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeReadOnlyListInterface()", span="644-644", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeReadOnlyListInterface()", file="JsonSerializerCollectionsTests.cs"];
m6_309 [label="IReadOnlyList<int> list = JsonConvert.DeserializeObject<IReadOnlyList<int>>(''[1,2,3]'')", span="646-646", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeReadOnlyListInterface()", file="JsonSerializerCollectionsTests.cs"];
m6_310 [label="Assert.AreEqual(3, list.Count)", span="648-648", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeReadOnlyListInterface()", file="JsonSerializerCollectionsTests.cs"];
m6_311 [label="Assert.AreEqual(1, list[0])", span="649-649", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeReadOnlyListInterface()", file="JsonSerializerCollectionsTests.cs"];
m6_312 [label="Assert.AreEqual(2, list[1])", span="650-650", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeReadOnlyListInterface()", file="JsonSerializerCollectionsTests.cs"];
m6_313 [label="Assert.AreEqual(3, list[2])", span="651-651", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeReadOnlyListInterface()", file="JsonSerializerCollectionsTests.cs"];
m6_314 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeReadOnlyListInterface()", span="644-644", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeReadOnlyListInterface()", file="JsonSerializerCollectionsTests.cs"];
m6_784 [label="Entry Newtonsoft.Json.JsonSerializer.Deserialize(Newtonsoft.Json.JsonReader, System.Type)", span="850-850", cluster="Newtonsoft.Json.JsonSerializer.Deserialize(Newtonsoft.Json.JsonReader, System.Type)", file="JsonSerializerCollectionsTests.cs"];
m6_990 [label="Entry Unk.Add", span="", cluster="Unk.Add", file="JsonSerializerCollectionsTests.cs"];
m6_706 [label="Entry Newtonsoft.Json.Tests.TestObjects.Events.Event1.Event1()", span="31-31", cluster="Newtonsoft.Json.Tests.TestObjects.Events.Event1.Event1()", file="JsonSerializerCollectionsTests.cs"];
m6_989 [label="Entry Unk.ContainsKey", span="", cluster="Unk.ContainsKey", file="JsonSerializerCollectionsTests.cs"];
m6_1065 [label="Entry Newtonsoft.Json.Tests.Serialization.StringAppenderConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", span="2524-2524", cluster="Newtonsoft.Json.Tests.Serialization.StringAppenderConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="JsonSerializerCollectionsTests.cs"];
m6_1066 [label="string existingString = (string)existingValue", span="2526-2526", cluster="Newtonsoft.Json.Tests.Serialization.StringAppenderConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="JsonSerializerCollectionsTests.cs"];
m6_1067 [label="string newString = existingString + (string)reader.Value", span="2527-2527", cluster="Newtonsoft.Json.Tests.Serialization.StringAppenderConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="JsonSerializerCollectionsTests.cs"];
m6_1068 [label="return newString;", span="2529-2529", cluster="Newtonsoft.Json.Tests.Serialization.StringAppenderConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="JsonSerializerCollectionsTests.cs"];
m6_1069 [label="Exit Newtonsoft.Json.Tests.Serialization.StringAppenderConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", span="2524-2524", cluster="Newtonsoft.Json.Tests.Serialization.StringAppenderConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="JsonSerializerCollectionsTests.cs"];
m6_749 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeMemberGenericList()", span="1725-1725", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeMemberGenericList()", file="JsonSerializerCollectionsTests.cs"];
m6_750 [label="Name name = new Name(''The Idiot in Next To Me'')", span="1727-1727", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeMemberGenericList()", file="JsonSerializerCollectionsTests.cs"];
m6_751 [label="PhoneNumber p1 = new PhoneNumber(''555-1212'')", span="1729-1729", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeMemberGenericList()", file="JsonSerializerCollectionsTests.cs"];
m6_753 [label="name.pNumbers.Add(p1)", span="1732-1732", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeMemberGenericList()", file="JsonSerializerCollectionsTests.cs"];
m6_754 [label="name.pNumbers.Add(p2)", span="1733-1733", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeMemberGenericList()", file="JsonSerializerCollectionsTests.cs"];
m6_755 [label="string json = JsonConvert.SerializeObject(name, Formatting.Indented)", span="1735-1735", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeMemberGenericList()", file="JsonSerializerCollectionsTests.cs"];
m6_752 [label="PhoneNumber p2 = new PhoneNumber(''444-1212'')", span="1730-1730", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeMemberGenericList()", file="JsonSerializerCollectionsTests.cs"];
m6_756 [label="StringAssert.AreEqual(@''{\r\n  ''''personsName'''': ''''The Idiot in Next To Me'''',\r\n  ''''pNumbers'''': [\r\n    {\r\n      ''''phoneNumber'''': ''''555-1212''''\r\n    },\r\n    {\r\n      ''''phoneNumber'''': ''''444-1212''''\r\n    }\r\n  ]\r\n}'', json)", span="1737-1747", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeMemberGenericList()", file="JsonSerializerCollectionsTests.cs"];
m6_757 [label="Name newName = JsonConvert.DeserializeObject<Name>(json)", span="1749-1749", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeMemberGenericList()", file="JsonSerializerCollectionsTests.cs"];
m6_758 [label="Assert.AreEqual(''The Idiot in Next To Me'', newName.personsName)", span="1751-1751", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeMemberGenericList()", file="JsonSerializerCollectionsTests.cs"];
m6_759 [label="Assert.AreEqual(2, newName.pNumbers.Count)", span="1754-1754", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeMemberGenericList()", file="JsonSerializerCollectionsTests.cs"];
m6_760 [label="Assert.AreEqual(''555-1212'', newName.pNumbers[0].phoneNumber)", span="1755-1755", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeMemberGenericList()", file="JsonSerializerCollectionsTests.cs"];
m6_761 [label="Assert.AreEqual(''444-1212'', newName.pNumbers[1].phoneNumber)", span="1756-1756", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeMemberGenericList()", file="JsonSerializerCollectionsTests.cs"];
m6_762 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeMemberGenericList()", span="1725-1725", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeMemberGenericList()", file="JsonSerializerCollectionsTests.cs"];
m6_530 [label="Entry System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.ReadOnlyDictionary(System.Collections.Generic.IDictionary<TKey, TValue>)", span="0-0", cluster="System.Collections.ObjectModel.ReadOnlyDictionary<TKey, TValue>.ReadOnlyDictionary(System.Collections.Generic.IDictionary<TKey, TValue>)", file="JsonSerializerCollectionsTests.cs"];
m6_688 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeSemiEmpty3DArray()", span="1507-1507", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeSemiEmpty3DArray()", file="JsonSerializerCollectionsTests.cs"];
m6_689 [label="string json = @''{''''Before'''':''''Before!'''',''''Coordinates'''':[[]],''''After'''':''''After!''''}''", span="1509-1509", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeSemiEmpty3DArray()", file="JsonSerializerCollectionsTests.cs"];
m6_690 [label="Array3D aa = JsonConvert.DeserializeObject<Array3D>(json)", span="1511-1511", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeSemiEmpty3DArray()", file="JsonSerializerCollectionsTests.cs"];
m6_697 [label="Assert.AreEqual(json, after)", span="1521-1521", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeSemiEmpty3DArray()", file="JsonSerializerCollectionsTests.cs"];
m6_691 [label="Assert.AreEqual(''Before!'', aa.Before)", span="1513-1513", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeSemiEmpty3DArray()", file="JsonSerializerCollectionsTests.cs"];
m6_692 [label="Assert.AreEqual(''After!'', aa.After)", span="1514-1514", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeSemiEmpty3DArray()", file="JsonSerializerCollectionsTests.cs"];
m6_693 [label="Assert.AreEqual(1, aa.Coordinates.GetLength(0))", span="1515-1515", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeSemiEmpty3DArray()", file="JsonSerializerCollectionsTests.cs"];
m6_694 [label="Assert.AreEqual(0, aa.Coordinates.GetLength(1))", span="1516-1516", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeSemiEmpty3DArray()", file="JsonSerializerCollectionsTests.cs"];
m6_695 [label="Assert.AreEqual(0, aa.Coordinates.GetLength(2))", span="1517-1517", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeSemiEmpty3DArray()", file="JsonSerializerCollectionsTests.cs"];
m6_696 [label="string after = JsonConvert.SerializeObject(aa)", span="1519-1519", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeSemiEmpty3DArray()", file="JsonSerializerCollectionsTests.cs"];
m6_698 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeSemiEmpty3DArray()", span="1507-1507", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeSemiEmpty3DArray()", file="JsonSerializerCollectionsTests.cs"];
m6_173 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CustomConcurrentDictionary.OnDeserializedMethod(System.Runtime.Serialization.StreamingContext)", span="364-364", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CustomConcurrentDictionary.OnDeserializedMethod(System.Runtime.Serialization.StreamingContext)", file="JsonSerializerCollectionsTests.cs"];
m6_174 [label="((IDictionary)this).Add(''key2'', new List<SomeObject>\r\n                {\r\n                    new SomeObject\r\n                    {\r\n                        Text1 = ''value2''\r\n                    }\r\n                })", span="366-372", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CustomConcurrentDictionary.OnDeserializedMethod(System.Runtime.Serialization.StreamingContext)", file="JsonSerializerCollectionsTests.cs"];
m6_175 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CustomConcurrentDictionary.OnDeserializedMethod(System.Runtime.Serialization.StreamingContext)", span="364-364", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CustomConcurrentDictionary.OnDeserializedMethod(System.Runtime.Serialization.StreamingContext)", file="JsonSerializerCollectionsTests.cs"];
m6_101 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestDictionaryPrivateParameterized.TestDictionaryPrivateParameterized()", span="229-229", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestDictionaryPrivateParameterized.TestDictionaryPrivateParameterized()", file="JsonSerializerCollectionsTests.cs"];
m6_102 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestDictionaryPrivateParameterized.TestDictionaryPrivateParameterized()", span="229-229", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestDictionaryPrivateParameterized.TestDictionaryPrivateParameterized()", file="JsonSerializerCollectionsTests.cs"];
m6_277 [label="Entry Newtonsoft.Json.JsonSerializerSettings.JsonSerializerSettings()", span="428-428", cluster="Newtonsoft.Json.JsonSerializerSettings.JsonSerializerSettings()", file="JsonSerializerCollectionsTests.cs"];
m6_381 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestEscapeDictionaryStrings()", span="817-817", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestEscapeDictionaryStrings()", file="JsonSerializerCollectionsTests.cs"];
m6_382 [label="string s = @''host\user''", span="819-819", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestEscapeDictionaryStrings()", file="JsonSerializerCollectionsTests.cs"];
m6_383 [label="string serialized = JsonConvert.SerializeObject(s)", span="820-820", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestEscapeDictionaryStrings()", file="JsonSerializerCollectionsTests.cs"];
m6_386 [label="d1.Add(5, s)", span="824-824", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestEscapeDictionaryStrings()", file="JsonSerializerCollectionsTests.cs"];
m6_389 [label="d2.Add(s, 5)", span="828-828", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestEscapeDictionaryStrings()", file="JsonSerializerCollectionsTests.cs"];
m6_384 [label="Assert.AreEqual(@''''''host\\user'''''', serialized)", span="821-821", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestEscapeDictionaryStrings()", file="JsonSerializerCollectionsTests.cs"];
m6_385 [label="Dictionary<int, object> d1 = new Dictionary<int, object>()", span="823-823", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestEscapeDictionaryStrings()", file="JsonSerializerCollectionsTests.cs"];
m6_387 [label="Assert.AreEqual(@''{''''5'''':''''host\\user''''}'', JsonConvert.SerializeObject(d1))", span="825-825", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestEscapeDictionaryStrings()", file="JsonSerializerCollectionsTests.cs"];
m6_388 [label="Dictionary<string, object> d2 = new Dictionary<string, object>()", span="827-827", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestEscapeDictionaryStrings()", file="JsonSerializerCollectionsTests.cs"];
m6_390 [label="Assert.AreEqual(@''{''''host\\user'''':5}'', JsonConvert.SerializeObject(d2))", span="829-829", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestEscapeDictionaryStrings()", file="JsonSerializerCollectionsTests.cs"];
m6_391 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestEscapeDictionaryStrings()", span="817-817", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestEscapeDictionaryStrings()", file="JsonSerializerCollectionsTests.cs"];
m6_742 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeArrayAsArrayList()", span="1713-1713", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeArrayAsArrayList()", file="JsonSerializerCollectionsTests.cs"];
m6_743 [label="string jsonText = @''[3, ''''somestring'''',[1,2,3],{}]''", span="1715-1715", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeArrayAsArrayList()", file="JsonSerializerCollectionsTests.cs"];
m6_744 [label="ArrayList o = JsonConvert.DeserializeObject<ArrayList>(jsonText)", span="1716-1716", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeArrayAsArrayList()", file="JsonSerializerCollectionsTests.cs"];
m6_745 [label="Assert.AreEqual(4, o.Count)", span="1718-1718", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeArrayAsArrayList()", file="JsonSerializerCollectionsTests.cs"];
m6_746 [label="Assert.AreEqual(3, ((JArray)o[2]).Count)", span="1719-1719", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeArrayAsArrayList()", file="JsonSerializerCollectionsTests.cs"];
m6_747 [label="Assert.AreEqual(0, ((JObject)o[3]).Count)", span="1720-1720", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeArrayAsArrayList()", file="JsonSerializerCollectionsTests.cs"];
m6_748 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeArrayAsArrayList()", span="1713-1713", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeArrayAsArrayList()", file="JsonSerializerCollectionsTests.cs"];
m6_915 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MyClass.System.Collections.IEnumerable.GetEnumerator()", span="2080-2080", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MyClass.System.Collections.IEnumerable.GetEnumerator()", file="JsonSerializerCollectionsTests.cs"];
m6_916 [label="return ((IList<string>)_storage).GetEnumerator();", span="2082-2082", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MyClass.System.Collections.IEnumerable.GetEnumerator()", file="JsonSerializerCollectionsTests.cs"];
m6_917 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MyClass.System.Collections.IEnumerable.GetEnumerator()", span="2080-2080", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MyClass.System.Collections.IEnumerable.GetEnumerator()", file="JsonSerializerCollectionsTests.cs"];
m6_612 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeArray3D()", span="1400-1400", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeArray3D()", file="JsonSerializerCollectionsTests.cs"];
m6_613 [label="string json = @''{''''Before'''':''''Before!'''',''''Coordinates'''':[[[1,1,1],[1,1,2]],[[1,2,1],[1,2,2]],[[2,1,1],[2,1,2]],[[2,2,1],[2,2,2]]],''''After'''':''''After!''''}''", span="1402-1402", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeArray3D()", file="JsonSerializerCollectionsTests.cs"];
m6_614 [label="Array3D aa = JsonConvert.DeserializeObject<Array3D>(json)", span="1404-1404", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeArray3D()", file="JsonSerializerCollectionsTests.cs"];
m6_623 [label="Assert.AreEqual(json, after)", span="1416-1416", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeArray3D()", file="JsonSerializerCollectionsTests.cs"];
m6_615 [label="Assert.AreEqual(''Before!'', aa.Before)", span="1406-1406", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeArray3D()", file="JsonSerializerCollectionsTests.cs"];
m6_616 [label="Assert.AreEqual(''After!'', aa.After)", span="1407-1407", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeArray3D()", file="JsonSerializerCollectionsTests.cs"];
m6_617 [label="Assert.AreEqual(4, aa.Coordinates.GetLength(0))", span="1408-1408", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeArray3D()", file="JsonSerializerCollectionsTests.cs"];
m6_618 [label="Assert.AreEqual(2, aa.Coordinates.GetLength(1))", span="1409-1409", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeArray3D()", file="JsonSerializerCollectionsTests.cs"];
m6_619 [label="Assert.AreEqual(3, aa.Coordinates.GetLength(2))", span="1410-1410", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeArray3D()", file="JsonSerializerCollectionsTests.cs"];
m6_620 [label="Assert.AreEqual(1, aa.Coordinates[0, 0, 0])", span="1411-1411", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeArray3D()", file="JsonSerializerCollectionsTests.cs"];
m6_621 [label="Assert.AreEqual(2, aa.Coordinates[1, 1, 1])", span="1412-1412", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeArray3D()", file="JsonSerializerCollectionsTests.cs"];
m6_622 [label="string after = JsonConvert.SerializeObject(aa)", span="1414-1414", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeArray3D()", file="JsonSerializerCollectionsTests.cs"];
m6_624 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeArray3D()", span="1400-1400", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeArray3D()", file="JsonSerializerCollectionsTests.cs"];
m6_252 [label="Entry System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.Count<TSource>()", file="JsonSerializerCollectionsTests.cs"];
m6_775 [label="Entry Newtonsoft.Json.Tests.TestObjects.ProductCollection.ProductCollection()", span="29-29", cluster="Newtonsoft.Json.Tests.TestObjects.ProductCollection.ProductCollection()", file="JsonSerializerCollectionsTests.cs"];
m6_404 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeSimpleKeyValuePair()", span="857-857", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeSimpleKeyValuePair()", file="JsonSerializerCollectionsTests.cs"];
m6_405 [label="List<KeyValuePair<string, string>> list = new List<KeyValuePair<string, string>>()", span="859-859", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeSimpleKeyValuePair()", file="JsonSerializerCollectionsTests.cs"];
m6_406 [label="list.Add(new KeyValuePair<string, string>(''key1'', ''value1''))", span="860-860", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeSimpleKeyValuePair()", file="JsonSerializerCollectionsTests.cs"];
m6_407 [label="list.Add(new KeyValuePair<string, string>(''key2'', ''value2''))", span="861-861", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeSimpleKeyValuePair()", file="JsonSerializerCollectionsTests.cs"];
m6_408 [label="string json = JsonConvert.SerializeObject(list)", span="863-863", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeSimpleKeyValuePair()", file="JsonSerializerCollectionsTests.cs"];
m6_409 [label="Assert.AreEqual(@''[{''''Key'''':''''key1'''',''''Value'''':''''value1''''},{''''Key'''':''''key2'''',''''Value'''':''''value2''''}]'', json)", span="865-865", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeSimpleKeyValuePair()", file="JsonSerializerCollectionsTests.cs"];
m6_410 [label="List<KeyValuePair<string, string>> result = JsonConvert.DeserializeObject<List<KeyValuePair<string, string>>>(json)", span="867-867", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeSimpleKeyValuePair()", file="JsonSerializerCollectionsTests.cs"];
m6_411 [label="Assert.AreEqual(2, result.Count)", span="868-868", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeSimpleKeyValuePair()", file="JsonSerializerCollectionsTests.cs"];
m6_412 [label="Assert.AreEqual(''key1'', result[0].Key)", span="869-869", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeSimpleKeyValuePair()", file="JsonSerializerCollectionsTests.cs"];
m6_413 [label="Assert.AreEqual(''value1'', result[0].Value)", span="870-870", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeSimpleKeyValuePair()", file="JsonSerializerCollectionsTests.cs"];
m6_414 [label="Assert.AreEqual(''key2'', result[1].Key)", span="871-871", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeSimpleKeyValuePair()", file="JsonSerializerCollectionsTests.cs"];
m6_415 [label="Assert.AreEqual(''value2'', result[1].Value)", span="872-872", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeSimpleKeyValuePair()", file="JsonSerializerCollectionsTests.cs"];
m6_416 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeSimpleKeyValuePair()", span="857-857", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeSimpleKeyValuePair()", file="JsonSerializerCollectionsTests.cs"];
m6_805 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.InheritedListSerialize()", span="1809-1809", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.InheritedListSerialize()", file="JsonSerializerCollectionsTests.cs"];
m6_806 [label="Article a1 = new Article(''a1'')", span="1811-1811", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.InheritedListSerialize()", file="JsonSerializerCollectionsTests.cs"];
m6_807 [label="Article a2 = new Article(''a2'')", span="1812-1812", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.InheritedListSerialize()", file="JsonSerializerCollectionsTests.cs"];
m6_809 [label="articles1.Add(a1)", span="1815-1815", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.InheritedListSerialize()", file="JsonSerializerCollectionsTests.cs"];
m6_808 [label="ArticleCollection articles1 = new ArticleCollection()", span="1814-1814", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.InheritedListSerialize()", file="JsonSerializerCollectionsTests.cs"];
m6_810 [label="articles1.Add(a2)", span="1816-1816", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.InheritedListSerialize()", file="JsonSerializerCollectionsTests.cs"];
m6_811 [label="string jsonText = JsonConvert.SerializeObject(articles1)", span="1818-1818", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.InheritedListSerialize()", file="JsonSerializerCollectionsTests.cs"];
m6_813 [label="Assert.AreEqual(articles1.Count, articles2.Count)", span="1822-1822", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.InheritedListSerialize()", file="JsonSerializerCollectionsTests.cs"];
m6_814 [label="Assert.AreEqual(articles1[0].Name, articles2[0].Name)", span="1823-1823", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.InheritedListSerialize()", file="JsonSerializerCollectionsTests.cs"];
m6_812 [label="ArticleCollection articles2 = JsonConvert.DeserializeObject<ArticleCollection>(jsonText)", span="1820-1820", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.InheritedListSerialize()", file="JsonSerializerCollectionsTests.cs"];
m6_815 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.InheritedListSerialize()", span="1809-1809", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.InheritedListSerialize()", file="JsonSerializerCollectionsTests.cs"];
m6_58 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestCollectionPrivate.Create()", span="148-148", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestCollectionPrivate.Create()", file="JsonSerializerCollectionsTests.cs"];
m6_59 [label="return new TestCollectionPrivate();", span="150-150", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestCollectionPrivate.Create()", file="JsonSerializerCollectionsTests.cs"];
m6_60 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestCollectionPrivate.Create()", span="148-148", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestCollectionPrivate.Create()", file="JsonSerializerCollectionsTests.cs"];
m6_816 [label="Entry Newtonsoft.Json.Tests.TestObjects.Article.Article(string)", span="35-35", cluster="Newtonsoft.Json.Tests.TestObjects.Article.Article(string)", file="JsonSerializerCollectionsTests.cs"];
m6_460 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.NullableValueGenericDictionary()", span="973-973", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.NullableValueGenericDictionary()", file="JsonSerializerCollectionsTests.cs"];
m6_461 [label="IDictionary<string, int?> v1 = new Dictionary<string, int?>\r\n            {\r\n                { ''First'', 1 },\r\n                { ''Second'', null },\r\n                { ''Third'', 3 }\r\n            }", span="975-980", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.NullableValueGenericDictionary()", file="JsonSerializerCollectionsTests.cs"];
m6_462 [label="string json = JsonConvert.SerializeObject(v1, Formatting.Indented)", span="982-982", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.NullableValueGenericDictionary()", file="JsonSerializerCollectionsTests.cs"];
m6_463 [label="StringAssert.AreEqual(@''{\r\n  ''''First'''': 1,\r\n  ''''Second'''': null,\r\n  ''''Third'''': 3\r\n}'', json)", span="984-988", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.NullableValueGenericDictionary()", file="JsonSerializerCollectionsTests.cs"];
m6_464 [label="IDictionary<string, int?> v2 = JsonConvert.DeserializeObject<IDictionary<string, int?>>(json)", span="990-990", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.NullableValueGenericDictionary()", file="JsonSerializerCollectionsTests.cs"];
m6_465 [label="Assert.AreEqual(3, v2.Count)", span="991-991", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.NullableValueGenericDictionary()", file="JsonSerializerCollectionsTests.cs"];
m6_466 [label="Assert.AreEqual(1, v2[''First''])", span="992-992", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.NullableValueGenericDictionary()", file="JsonSerializerCollectionsTests.cs"];
m6_467 [label="Assert.AreEqual(null, v2[''Second''])", span="993-993", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.NullableValueGenericDictionary()", file="JsonSerializerCollectionsTests.cs"];
m6_468 [label="Assert.AreEqual(3, v2[''Third''])", span="994-994", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.NullableValueGenericDictionary()", file="JsonSerializerCollectionsTests.cs"];
m6_469 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.NullableValueGenericDictionary()", span="973-973", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.NullableValueGenericDictionary()", file="JsonSerializerCollectionsTests.cs"];
m6_891 [label="Entry System.Collections.Generic.ICollection<T>.Contains(T)", span="0-0", cluster="System.Collections.Generic.ICollection<T>.Contains(T)", file="JsonSerializerCollectionsTests.cs"];
m6_1015 [label="Entry Newtonsoft.Json.Tests.Serialization.ReadOnlyCollectionWithArrayArgument<T>.IndexOf(T)", span="2369-2369", cluster="Newtonsoft.Json.Tests.Serialization.ReadOnlyCollectionWithArrayArgument<T>.IndexOf(T)", file="JsonSerializerCollectionsTests.cs"];
m6_1016 [label="throw new NotImplementedException();", span="2371-2371", cluster="Newtonsoft.Json.Tests.Serialization.ReadOnlyCollectionWithArrayArgument<T>.IndexOf(T)", file="JsonSerializerCollectionsTests.cs"];
m6_1017 [label="Exit Newtonsoft.Json.Tests.Serialization.ReadOnlyCollectionWithArrayArgument<T>.IndexOf(T)", span="2369-2369", cluster="Newtonsoft.Json.Tests.Serialization.ReadOnlyCollectionWithArrayArgument<T>.IndexOf(T)", file="JsonSerializerCollectionsTests.cs"];
m6_443 [label="Entry Newtonsoft.Json.JsonConvert.PopulateObject(string, object, Newtonsoft.Json.JsonSerializerSettings)", span="836-836", cluster="Newtonsoft.Json.JsonConvert.PopulateObject(string, object, Newtonsoft.Json.JsonSerializerSettings)", file="JsonSerializerCollectionsTests.cs"];
m6_632 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeArray3D_WithBadItems()", span="1428-1428", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeArray3D_WithBadItems()", file="JsonSerializerCollectionsTests.cs"];
m6_633 [label="string json = @''{''''Before'''':''''Before!'''',''''Coordinates'''':[[[1,1,1],[1,1,2]],[[1,2,1],[1,2,2]],[[2,1,1],[2,1,2]],[[2,2,1],{}]],''''After'''':''''After!''''}''", span="1430-1430", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeArray3D_WithBadItems()", file="JsonSerializerCollectionsTests.cs"];
m6_634 [label="ExceptionAssert.Throws<JsonSerializationException>(() => JsonConvert.DeserializeObject<Array3D>(json), ''Unexpected token when deserializing multidimensional array: StartObject. Path 'Coordinates[3][1]', line 1, position 99.'')", span="1432-1432", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeArray3D_WithBadItems()", file="JsonSerializerCollectionsTests.cs"];
m6_635 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeArray3D_WithBadItems()", span="1428-1428", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeArray3D_WithBadItems()", file="JsonSerializerCollectionsTests.cs"];
m6_825 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeGenericList()", span="1841-1841", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeGenericList()", file="JsonSerializerCollectionsTests.cs"];
m6_826 [label="Product p1 = new Product\r\n            {\r\n                Name = ''Product 1'',\r\n                Price = 99.95m,\r\n                ExpiryDate = new DateTime(2000, 12, 29, 0, 0, 0, DateTimeKind.Utc),\r\n            }", span="1843-1848", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeGenericList()", file="JsonSerializerCollectionsTests.cs"];
m6_827 [label="Product p2 = new Product\r\n            {\r\n                Name = ''Product 2'',\r\n                Price = 12.50m,\r\n                ExpiryDate = new DateTime(2009, 7, 31, 0, 0, 0, DateTimeKind.Utc),\r\n            }", span="1849-1854", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeGenericList()", file="JsonSerializerCollectionsTests.cs"];
m6_829 [label="products.Add(p1)", span="1857-1857", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeGenericList()", file="JsonSerializerCollectionsTests.cs"];
m6_828 [label="List<Product> products = new List<Product>()", span="1856-1856", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeGenericList()", file="JsonSerializerCollectionsTests.cs"];
m6_830 [label="products.Add(p2)", span="1858-1858", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeGenericList()", file="JsonSerializerCollectionsTests.cs"];
m6_831 [label="string json = JsonConvert.SerializeObject(products, Formatting.Indented)", span="1860-1860", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeGenericList()", file="JsonSerializerCollectionsTests.cs"];
m6_832 [label="StringAssert.AreEqual(@''[\r\n  {\r\n    ''''Name'''': ''''Product 1'''',\r\n    ''''ExpiryDate'''': ''''2000-12-29T00:00:00Z'''',\r\n    ''''Price'''': 99.95,\r\n    ''''Sizes'''': null\r\n  },\r\n  {\r\n    ''''Name'''': ''''Product 2'''',\r\n    ''''ExpiryDate'''': ''''2009-07-31T00:00:00Z'''',\r\n    ''''Price'''': 12.50,\r\n    ''''Sizes'''': null\r\n  }\r\n]'', json)", span="1876-1889", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeGenericList()", file="JsonSerializerCollectionsTests.cs"];
m6_833 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeGenericList()", span="1841-1841", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeGenericList()", file="JsonSerializerCollectionsTests.cs"];
m6_987 [label="Entry Unk.Element", span="", cluster="Unk.Element", file="JsonSerializerCollectionsTests.cs"];
m6_40 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestCollectionPrivateParameterized.System.Collections.IEnumerable.GetEnumerator()", span="120-120", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestCollectionPrivateParameterized.System.Collections.IEnumerable.GetEnumerator()", file="JsonSerializerCollectionsTests.cs"];
m6_41 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestCollectionPrivateParameterized.System.Collections.IEnumerable.GetEnumerator()", span="120-120", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestCollectionPrivateParameterized.System.Collections.IEnumerable.GetEnumerator()", file="JsonSerializerCollectionsTests.cs"];
m6_56 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestCollectionPrivate.TestCollectionPrivate()", span="144-144", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestCollectionPrivate.TestCollectionPrivate()", file="JsonSerializerCollectionsTests.cs"];
m6_57 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestCollectionPrivate.TestCollectionPrivate()", span="144-144", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestCollectionPrivate.TestCollectionPrivate()", file="JsonSerializerCollectionsTests.cs"];
m6_719 [label="Entry Newtonsoft.Json.JsonConvert.DeserializeObject(string, Newtonsoft.Json.JsonSerializerSettings)", span="681-681", cluster="Newtonsoft.Json.JsonConvert.DeserializeObject(string, Newtonsoft.Json.JsonSerializerSettings)", file="JsonSerializerCollectionsTests.cs"];
m6_906 [label="Entry System.Collections.Generic.IList<T>.Insert(int, T)", span="0-0", cluster="System.Collections.Generic.IList<T>.Insert(int, T)", file="JsonSerializerCollectionsTests.cs"];
m6_803 [label="Entry Newtonsoft.Json.Tests.Serialization.NonGenericItem.NonGenericItem()", span="2447-2447", cluster="Newtonsoft.Json.Tests.Serialization.NonGenericItem.NonGenericItem()", file="JsonSerializerCollectionsTests.cs"];
m6_123 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", file="JsonSerializerCollectionsTests.cs"];
m6_30 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestCollectionPrivateParameterized.TestCollectionPrivateParameterized(System.Collections.Generic.IEnumerable<int>)", span="108-108", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestCollectionPrivateParameterized.TestCollectionPrivateParameterized(System.Collections.Generic.IEnumerable<int>)", file="JsonSerializerCollectionsTests.cs"];
m6_31 [label="_bars = new List<int>(bars)", span="110-110", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestCollectionPrivateParameterized.TestCollectionPrivateParameterized(System.Collections.Generic.IEnumerable<int>)", file="JsonSerializerCollectionsTests.cs"];
m6_32 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestCollectionPrivateParameterized.TestCollectionPrivateParameterized(System.Collections.Generic.IEnumerable<int>)", span="108-108", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestCollectionPrivateParameterized.TestCollectionPrivateParameterized(System.Collections.Generic.IEnumerable<int>)", file="JsonSerializerCollectionsTests.cs"];
m6_241 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.EnumerableClass<T>.System.Collections.IEnumerable.GetEnumerator()", span="522-522", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.EnumerableClass<T>.System.Collections.IEnumerable.GetEnumerator()", file="JsonSerializerCollectionsTests.cs"];
m6_242 [label="return GetEnumerator();", span="524-524", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.EnumerableClass<T>.System.Collections.IEnumerable.GetEnumerator()", file="JsonSerializerCollectionsTests.cs"];
m6_243 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.EnumerableClass<T>.System.Collections.IEnumerable.GetEnumerator()", span="522-522", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.EnumerableClass<T>.System.Collections.IEnumerable.GetEnumerator()", file="JsonSerializerCollectionsTests.cs"];
m6_143 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DictionaryJsonConstructorMultipleParameters()", span="294-294", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DictionaryJsonConstructorMultipleParameters()", file="JsonSerializerCollectionsTests.cs"];
m6_144 [label="ExceptionAssert.Throws<JsonException>(\r\n                () => JsonConvert.SerializeObject(new TestDictionaryMultipleParameters(null, null)),\r\n                ''Constructor for 'Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests+TestDictionaryMultipleParameters' must have no parameters or a single parameter that implements 'System.Collections.Generic.IEnumerable`1[System.Collections.Generic.KeyValuePair`2[System.String,System.Int32]]'.'')", span="296-298", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DictionaryJsonConstructorMultipleParameters()", file="JsonSerializerCollectionsTests.cs"];
m6_145 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DictionaryJsonConstructorMultipleParameters()", span="294-294", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DictionaryJsonConstructorMultipleParameters()", file="JsonSerializerCollectionsTests.cs"];
m6_639 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeArray3D_WithTooFewItems()", span="1436-1436", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeArray3D_WithTooFewItems()", file="JsonSerializerCollectionsTests.cs"];
m6_640 [label="string json = @''{''''Before'''':''''Before!'''',''''Coordinates'''':[[[1,1,1],[1,1]],[[1,2,1],[1,2,2]],[[2,1,1],[2,1,2]],[[2,2,1],[2,2,2]]],''''After'''':''''After!''''}''", span="1438-1438", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeArray3D_WithTooFewItems()", file="JsonSerializerCollectionsTests.cs"];
m6_641 [label="ExceptionAssert.Throws<Exception>(() => JsonConvert.DeserializeObject<Array3D>(json), ''Cannot deserialize non-cubical array as multidimensional array.'')", span="1440-1440", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeArray3D_WithTooFewItems()", file="JsonSerializerCollectionsTests.cs"];
m6_642 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeArray3D_WithTooFewItems()", span="1436-1436", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeArray3D_WithTooFewItems()", file="JsonSerializerCollectionsTests.cs"];
m6_456 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeIList()", span="966-966", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeIList()", file="JsonSerializerCollectionsTests.cs"];
m6_457 [label="IList list = JsonConvert.DeserializeObject<IList>(''['1', 'two', 'III']'')", span="968-968", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeIList()", file="JsonSerializerCollectionsTests.cs"];
m6_458 [label="Assert.AreEqual(3, list.Count)", span="969-969", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeIList()", file="JsonSerializerCollectionsTests.cs"];
m6_459 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeIList()", span="966-966", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeIList()", file="JsonSerializerCollectionsTests.cs"];
m6_910 [label="Entry System.Collections.Generic.ICollection<T>.Remove(T)", span="0-0", cluster="System.Collections.Generic.ICollection<T>.Remove(T)", file="JsonSerializerCollectionsTests.cs"];
m6_949 [label="Entry string.Trim()", span="0-0", cluster="string.Trim()", file="JsonSerializerCollectionsTests.cs"];
m6_272 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializePrivateListCtor()", span="585-585", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializePrivateListCtor()", file="JsonSerializerCollectionsTests.cs"];
m6_273 [label="ExceptionAssert.Throws<JsonSerializationException>(() => JsonConvert.DeserializeObject<PrivateDefaultCtorList<int>>(''[1,2]''), ''Unable to find a constructor to use for type Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests+PrivateDefaultCtorList`1[System.Int32]. Path '', line 1, position 1.'')", span="587-587", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializePrivateListCtor()", file="JsonSerializerCollectionsTests.cs"];
m6_274 [label="var list = JsonConvert.DeserializeObject<PrivateDefaultCtorList<int>>(''[1,2]'', new JsonSerializerSettings\r\n            {\r\n                ConstructorHandling = ConstructorHandling.AllowNonPublicDefaultConstructor\r\n            })", span="589-592", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializePrivateListCtor()", file="JsonSerializerCollectionsTests.cs"];
m6_275 [label="Assert.AreEqual(2, list.Count)", span="594-594", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializePrivateListCtor()", file="JsonSerializerCollectionsTests.cs"];
m6_276 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializePrivateListCtor()", span="585-585", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializePrivateListCtor()", file="JsonSerializerCollectionsTests.cs"];
m6_177 [label="Entry System.Collections.IDictionary.Add(object, object)", span="0-0", cluster="System.Collections.IDictionary.Add(object, object)", file="JsonSerializerCollectionsTests.cs"];
m6_899 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MyClass.IndexOf(string)", span="2060-2060", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MyClass.IndexOf(string)", file="JsonSerializerCollectionsTests.cs"];
m6_900 [label="return ((IList<string>)_storage).IndexOf(item);", span="2062-2062", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MyClass.IndexOf(string)", file="JsonSerializerCollectionsTests.cs"];
m6_901 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MyClass.IndexOf(string)", span="2060-2060", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MyClass.IndexOf(string)", file="JsonSerializerCollectionsTests.cs"];
m6_263 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeIEnumerableFromConstructor_Failure()", span="566-566", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeIEnumerableFromConstructor_Failure()", file="JsonSerializerCollectionsTests.cs"];
m6_264 [label="string json = @''[\r\n  ''''One'''',\r\n  ''''II'''',\r\n  ''''3''''\r\n]''", span="568-572", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeIEnumerableFromConstructor_Failure()", file="JsonSerializerCollectionsTests.cs"];
m6_265 [label="ExceptionAssert.Throws<JsonSerializationException>(() => JsonConvert.DeserializeObject<EnumerableClassFailure<string>>(json), ''Cannot create and populate list type Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests+EnumerableClassFailure`1[System.String]. Path '', line 1, position 1.'')", span="574-574", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeIEnumerableFromConstructor_Failure()", file="JsonSerializerCollectionsTests.cs"];
m6_266 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeIEnumerableFromConstructor_Failure()", span="566-566", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeIEnumerableFromConstructor_Failure()", file="JsonSerializerCollectionsTests.cs"];
m6_547 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeArray2D()", span="1204-1204", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeArray2D()", file="JsonSerializerCollectionsTests.cs"];
m6_548 [label="Array2D aa = new Array2D()", span="1206-1206", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeArray2D()", file="JsonSerializerCollectionsTests.cs"];
m6_549 [label="aa.Before = ''Before!''", span="1207-1207", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeArray2D()", file="JsonSerializerCollectionsTests.cs"];
m6_550 [label="aa.After = ''After!''", span="1208-1208", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeArray2D()", file="JsonSerializerCollectionsTests.cs"];
m6_551 [label="aa.Coordinates = new[,] { { 1, 1 }, { 1, 2 }, { 2, 1 }, { 2, 2 } }", span="1209-1209", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeArray2D()", file="JsonSerializerCollectionsTests.cs"];
m6_552 [label="string json = JsonConvert.SerializeObject(aa)", span="1211-1211", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeArray2D()", file="JsonSerializerCollectionsTests.cs"];
m6_553 [label="Assert.AreEqual(@''{''''Before'''':''''Before!'''',''''Coordinates'''':[[1,1],[1,2],[2,1],[2,2]],''''After'''':''''After!''''}'', json)", span="1213-1213", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeArray2D()", file="JsonSerializerCollectionsTests.cs"];
m6_554 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeArray2D()", span="1204-1204", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeArray2D()", file="JsonSerializerCollectionsTests.cs"];
m6_346 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CustomReadOnlyDictionary<TKey, TValue>.ContainsKey(TKey)", span="711-711", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CustomReadOnlyDictionary<TKey, TValue>.ContainsKey(TKey)", file="JsonSerializerCollectionsTests.cs"];
m6_347 [label="return _dictionary.ContainsKey(key);", span="713-713", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CustomReadOnlyDictionary<TKey, TValue>.ContainsKey(TKey)", file="JsonSerializerCollectionsTests.cs"];
m6_348 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CustomReadOnlyDictionary<TKey, TValue>.ContainsKey(TKey)", span="711-711", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CustomReadOnlyDictionary<TKey, TValue>.ContainsKey(TKey)", file="JsonSerializerCollectionsTests.cs"];
m6_360 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeCustomReadOnlyDictionary()", span="753-753", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeCustomReadOnlyDictionary()", file="JsonSerializerCollectionsTests.cs"];
m6_361 [label="IDictionary<string, int> d = new Dictionary<string, int>\r\n            {\r\n                { ''one'', 1 },\r\n                { ''two'', 2 }\r\n            }", span="755-759", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeCustomReadOnlyDictionary()", file="JsonSerializerCollectionsTests.cs"];
m6_362 [label="CustomReadOnlyDictionary<string, int> dic = new CustomReadOnlyDictionary<string, int>(d)", span="761-761", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeCustomReadOnlyDictionary()", file="JsonSerializerCollectionsTests.cs"];
m6_363 [label="string json = JsonConvert.SerializeObject(dic, Formatting.Indented)", span="763-763", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeCustomReadOnlyDictionary()", file="JsonSerializerCollectionsTests.cs"];
m6_364 [label="StringAssert.AreEqual(@''{\r\n  ''''one'''': 1,\r\n  ''''two'''': 2\r\n}'', json)", span="764-767", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeCustomReadOnlyDictionary()", file="JsonSerializerCollectionsTests.cs"];
m6_365 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeCustomReadOnlyDictionary()", span="753-753", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeCustomReadOnlyDictionary()", file="JsonSerializerCollectionsTests.cs"];
m6_129 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DictionaryJsonConstructorPrivate()", span="270-270", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DictionaryJsonConstructorPrivate()", file="JsonSerializerCollectionsTests.cs"];
m6_130 [label="TestDictionaryPrivate c1 = TestDictionaryPrivate.Create()", span="272-272", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DictionaryJsonConstructorPrivate()", file="JsonSerializerCollectionsTests.cs"];
m6_131 [label="c1.Add(''zero'', 0)", span="273-273", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DictionaryJsonConstructorPrivate()", file="JsonSerializerCollectionsTests.cs"];
m6_132 [label="c1.Add(''one'', 1)", span="274-274", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DictionaryJsonConstructorPrivate()", file="JsonSerializerCollectionsTests.cs"];
m6_133 [label="c1.Add(''two'', 2)", span="275-275", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DictionaryJsonConstructorPrivate()", file="JsonSerializerCollectionsTests.cs"];
m6_134 [label="string json = JsonConvert.SerializeObject(c1)", span="276-276", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DictionaryJsonConstructorPrivate()", file="JsonSerializerCollectionsTests.cs"];
m6_135 [label="TestDictionaryPrivate c2 = JsonConvert.DeserializeObject<TestDictionaryPrivate>(json)", span="277-277", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DictionaryJsonConstructorPrivate()", file="JsonSerializerCollectionsTests.cs"];
m6_136 [label="Assert.AreEqual(3, c2.Count)", span="279-279", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DictionaryJsonConstructorPrivate()", file="JsonSerializerCollectionsTests.cs"];
m6_137 [label="Assert.AreEqual(0, c2[''zero''])", span="280-280", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DictionaryJsonConstructorPrivate()", file="JsonSerializerCollectionsTests.cs"];
m6_138 [label="Assert.AreEqual(1, c2[''one''])", span="281-281", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DictionaryJsonConstructorPrivate()", file="JsonSerializerCollectionsTests.cs"];
m6_139 [label="Assert.AreEqual(2, c2[''two''])", span="282-282", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DictionaryJsonConstructorPrivate()", file="JsonSerializerCollectionsTests.cs"];
m6_140 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DictionaryJsonConstructorPrivate()", span="270-270", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DictionaryJsonConstructorPrivate()", file="JsonSerializerCollectionsTests.cs"];
m6_556 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeArray3D()", span="1217-1217", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeArray3D()", file="JsonSerializerCollectionsTests.cs"];
m6_557 [label="Array3D aa = new Array3D()", span="1219-1219", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeArray3D()", file="JsonSerializerCollectionsTests.cs"];
m6_558 [label="aa.Before = ''Before!''", span="1220-1220", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeArray3D()", file="JsonSerializerCollectionsTests.cs"];
m6_559 [label="aa.After = ''After!''", span="1221-1221", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeArray3D()", file="JsonSerializerCollectionsTests.cs"];
m6_560 [label="aa.Coordinates = new[,,] { { { 1, 1, 1 }, { 1, 1, 2 } }, { { 1, 2, 1 }, { 1, 2, 2 } }, { { 2, 1, 1 }, { 2, 1, 2 } }, { { 2, 2, 1 }, { 2, 2, 2 } } }", span="1222-1222", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeArray3D()", file="JsonSerializerCollectionsTests.cs"];
m6_561 [label="string json = JsonConvert.SerializeObject(aa)", span="1224-1224", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeArray3D()", file="JsonSerializerCollectionsTests.cs"];
m6_562 [label="Assert.AreEqual(@''{''''Before'''':''''Before!'''',''''Coordinates'''':[[[1,1,1],[1,1,2]],[[1,2,1],[1,2,2]],[[2,1,1],[2,1,2]],[[2,2,1],[2,2,2]]],''''After'''':''''After!''''}'', json)", span="1226-1226", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeArray3D()", file="JsonSerializerCollectionsTests.cs"];
m6_563 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeArray3D()", span="1217-1217", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeArray3D()", file="JsonSerializerCollectionsTests.cs"];
m6_167 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeNameValueCollection()", span="347-347", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeNameValueCollection()", file="JsonSerializerCollectionsTests.cs"];
m6_168 [label="ExceptionAssert.Throws<JsonSerializationException>(\r\n                () => JsonConvert.DeserializeObject<NameValueCollectionTestClass>(''{Collection:[]}''),\r\n                ''Cannot create and populate list type System.Collections.Specialized.NameValueCollection. Path 'Collection', line 1, position 13.'')", span="349-351", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeNameValueCollection()", file="JsonSerializerCollectionsTests.cs"];
m6_169 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeNameValueCollection()", span="347-347", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeNameValueCollection()", file="JsonSerializerCollectionsTests.cs"];
m6_903 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MyClass.Insert(int, string)", span="2065-2065", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MyClass.Insert(int, string)", file="JsonSerializerCollectionsTests.cs"];
m6_904 [label="((IList<string>)_storage).Insert(index, item)", span="2067-2067", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MyClass.Insert(int, string)", file="JsonSerializerCollectionsTests.cs"];
m6_905 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MyClass.Insert(int, string)", span="2065-2065", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MyClass.Insert(int, string)", file="JsonSerializerCollectionsTests.cs"];
m6_1044 [label="Entry Newtonsoft.Json.Tests.Serialization.StringListAppenderConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", span="2488-2488", cluster="Newtonsoft.Json.Tests.Serialization.StringListAppenderConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", file="JsonSerializerCollectionsTests.cs"];
m6_1045 [label="writer.WriteValue(value)", span="2490-2490", cluster="Newtonsoft.Json.Tests.Serialization.StringListAppenderConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", file="JsonSerializerCollectionsTests.cs"];
m6_1046 [label="Exit Newtonsoft.Json.Tests.Serialization.StringListAppenderConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", span="2488-2488", cluster="Newtonsoft.Json.Tests.Serialization.StringListAppenderConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", file="JsonSerializerCollectionsTests.cs"];
m6_253 [label="Entry System.Collections.Generic.IEnumerable<TSource>.ElementAt<TSource>(int)", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.ElementAt<TSource>(int)", file="JsonSerializerCollectionsTests.cs"];
m6_199 [label="Entry System.Array.CreateInstance(System.Type, int[], int[])", span="0-0", cluster="System.Array.CreateInstance(System.Type, int[], int[])", file="JsonSerializerCollectionsTests.cs"];
m6_322 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeReadOnlyCollection()", span="667-667", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeReadOnlyCollection()", file="JsonSerializerCollectionsTests.cs"];
m6_323 [label="ReadOnlyCollection<int> list = JsonConvert.DeserializeObject<ReadOnlyCollection<int>>(''[1,2,3]'')", span="669-669", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeReadOnlyCollection()", file="JsonSerializerCollectionsTests.cs"];
m6_324 [label="Assert.AreEqual(3, list.Count)", span="671-671", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeReadOnlyCollection()", file="JsonSerializerCollectionsTests.cs"];
m6_325 [label="Assert.AreEqual(1, list[0])", span="673-673", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeReadOnlyCollection()", file="JsonSerializerCollectionsTests.cs"];
m6_326 [label="Assert.AreEqual(2, list[1])", span="674-674", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeReadOnlyCollection()", file="JsonSerializerCollectionsTests.cs"];
m6_327 [label="Assert.AreEqual(3, list[2])", span="675-675", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeReadOnlyCollection()", file="JsonSerializerCollectionsTests.cs"];
m6_328 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeReadOnlyCollection()", span="667-667", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeReadOnlyCollection()", file="JsonSerializerCollectionsTests.cs"];
m6_26 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestCollectionPrivateParameterized.TestCollectionPrivateParameterized()", span="102-102", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestCollectionPrivateParameterized.TestCollectionPrivateParameterized()", file="JsonSerializerCollectionsTests.cs"];
m6_27 [label="_bars = new List<int>()", span="104-104", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestCollectionPrivateParameterized.TestCollectionPrivateParameterized()", file="JsonSerializerCollectionsTests.cs", color=green, community=0];
m6_28 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestCollectionPrivateParameterized.TestCollectionPrivateParameterized()", span="102-102", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestCollectionPrivateParameterized.TestCollectionPrivateParameterized()", file="JsonSerializerCollectionsTests.cs"];
m6_855 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeCollectionWithConstructorArrayArgument()", span="1957-1957", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeCollectionWithConstructorArrayArgument()", file="JsonSerializerCollectionsTests.cs"];
m6_856 [label="var v = new ReadOnlyCollectionWithArrayArgument<double>(new[] { -0.014147478859765236, -0.011419606805541858, -0.010038461483676238 })", span="1959-1959", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeCollectionWithConstructorArrayArgument()", file="JsonSerializerCollectionsTests.cs"];
m6_857 [label="var json = JsonConvert.SerializeObject(v)", span="1960-1960", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeCollectionWithConstructorArrayArgument()", file="JsonSerializerCollectionsTests.cs"];
m6_858 [label="ExceptionAssert.Throws<JsonSerializationException>(() =>\r\n            {\r\n                JsonConvert.DeserializeObject<ReadOnlyCollectionWithArrayArgument<double>>(json);\r\n            }, ''Unable to find a constructor to use for type Newtonsoft.Json.Tests.Serialization.ReadOnlyCollectionWithArrayArgument`1[System.Double]. Path '', line 1, position 1.'')", span="1962-1965", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeCollectionWithConstructorArrayArgument()", file="JsonSerializerCollectionsTests.cs"];
m6_859 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeCollectionWithConstructorArrayArgument()", span="1957-1957", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeCollectionWithConstructorArrayArgument()", file="JsonSerializerCollectionsTests.cs"];
m6_369 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CustomReadOnlyCollection<T>.GetEnumerator()", span="784-784", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CustomReadOnlyCollection<T>.GetEnumerator()", file="JsonSerializerCollectionsTests.cs"];
m6_370 [label="return _values.GetEnumerator();", span="786-786", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CustomReadOnlyCollection<T>.GetEnumerator()", file="JsonSerializerCollectionsTests.cs"];
m6_371 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CustomReadOnlyCollection<T>.GetEnumerator()", span="784-784", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CustomReadOnlyCollection<T>.GetEnumerator()", file="JsonSerializerCollectionsTests.cs"];
m6_234 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.EnumerableClass<T>.EnumerableClass(System.Collections.Generic.IEnumerable<T>)", span="512-512", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.EnumerableClass<T>.EnumerableClass(System.Collections.Generic.IEnumerable<T>)", file="JsonSerializerCollectionsTests.cs"];
m6_235 [label="_values = new List<T>(values)", span="514-514", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.EnumerableClass<T>.EnumerableClass(System.Collections.Generic.IEnumerable<T>)", file="JsonSerializerCollectionsTests.cs"];
m6_236 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.EnumerableClass<T>.EnumerableClass(System.Collections.Generic.IEnumerable<T>)", span="512-512", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.EnumerableClass<T>.EnumerableClass(System.Collections.Generic.IEnumerable<T>)", file="JsonSerializerCollectionsTests.cs"];
m6_151 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DictionaryJsonConstructorBadIEnumerableParameter()", span="310-310", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DictionaryJsonConstructorBadIEnumerableParameter()", file="JsonSerializerCollectionsTests.cs"];
m6_152 [label="ExceptionAssert.Throws<JsonException>(\r\n                () => JsonConvert.SerializeObject(new TestDictionaryBadIEnumerableParameter(null)),\r\n                ''Constructor for 'Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests+TestDictionaryBadIEnumerableParameter' must have no parameters or a single parameter that implements 'System.Collections.Generic.IEnumerable`1[System.Collections.Generic.KeyValuePair`2[System.String,System.Int32]]'.'')", span="312-314", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DictionaryJsonConstructorBadIEnumerableParameter()", file="JsonSerializerCollectionsTests.cs"];
m6_153 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DictionaryJsonConstructorBadIEnumerableParameter()", span="310-310", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DictionaryJsonConstructorBadIEnumerableParameter()", file="JsonSerializerCollectionsTests.cs"];
m6_779 [label="Entry Newtonsoft.Json.JsonSerializer.Serialize(System.IO.TextWriter, object)", span="999-999", cluster="Newtonsoft.Json.JsonSerializer.Serialize(System.IO.TextWriter, object)", file="JsonSerializerCollectionsTests.cs"];
m6_201 [label="Entry System.Array.GetUpperBound(int)", span="0-0", cluster="System.Array.GetUpperBound(int)", file="JsonSerializerCollectionsTests.cs"];
m6_878 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MyClass.MyClass(System.Collections.Generic.IEnumerable<string>)", span="2000-2000", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MyClass.MyClass(System.Collections.Generic.IEnumerable<string>)", file="JsonSerializerCollectionsTests.cs"];
m6_879 [label="_storage = new List<string>(source)", span="2002-2002", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MyClass.MyClass(System.Collections.Generic.IEnumerable<string>)", file="JsonSerializerCollectionsTests.cs"];
m6_880 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MyClass.MyClass(System.Collections.Generic.IEnumerable<string>)", span="2000-2000", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MyClass.MyClass(System.Collections.Generic.IEnumerable<string>)", file="JsonSerializerCollectionsTests.cs"];
m6_300 [label="Entry System.DateTime.Parse(string, System.IFormatProvider)", span="0-0", cluster="System.DateTime.Parse(string, System.IFormatProvider)", file="JsonSerializerCollectionsTests.cs"];
m6_451 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeIDictionary()", span="958-958", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeIDictionary()", file="JsonSerializerCollectionsTests.cs"];
m6_452 [label="IDictionary dictionary = JsonConvert.DeserializeObject<IDictionary>(''{'name':'value!'}'')", span="960-960", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeIDictionary()", file="JsonSerializerCollectionsTests.cs"];
m6_453 [label="Assert.AreEqual(1, dictionary.Count)", span="961-961", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeIDictionary()", file="JsonSerializerCollectionsTests.cs"];
m6_454 [label="Assert.AreEqual(''value!'', dictionary[''name''])", span="962-962", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeIDictionary()", file="JsonSerializerCollectionsTests.cs"];
m6_455 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeIDictionary()", span="958-958", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeIDictionary()", file="JsonSerializerCollectionsTests.cs"];
m6_42 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CollectionJsonConstructorPrivateParameterized()", span="124-124", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CollectionJsonConstructorPrivateParameterized()", file="JsonSerializerCollectionsTests.cs"];
m6_43 [label="TestCollectionPrivateParameterized c1 = new TestCollectionPrivateParameterized()", span="126-126", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CollectionJsonConstructorPrivateParameterized()", file="JsonSerializerCollectionsTests.cs"];
m6_44 [label="c1.Add(0)", span="127-127", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CollectionJsonConstructorPrivateParameterized()", file="JsonSerializerCollectionsTests.cs"];
m6_45 [label="c1.Add(1)", span="128-128", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CollectionJsonConstructorPrivateParameterized()", file="JsonSerializerCollectionsTests.cs"];
m6_46 [label="c1.Add(2)", span="129-129", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CollectionJsonConstructorPrivateParameterized()", file="JsonSerializerCollectionsTests.cs"];
m6_47 [label="string json = JsonConvert.SerializeObject(c1)", span="130-130", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CollectionJsonConstructorPrivateParameterized()", file="JsonSerializerCollectionsTests.cs"];
m6_48 [label="TestCollectionPrivateParameterized c2 = JsonConvert.DeserializeObject<TestCollectionPrivateParameterized>(json)", span="131-131", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CollectionJsonConstructorPrivateParameterized()", file="JsonSerializerCollectionsTests.cs"];
m6_49 [label="List<int> values = c2.ToList()", span="133-133", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CollectionJsonConstructorPrivateParameterized()", file="JsonSerializerCollectionsTests.cs"];
m6_50 [label="Assert.AreEqual(3, values.Count)", span="135-135", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CollectionJsonConstructorPrivateParameterized()", file="JsonSerializerCollectionsTests.cs"];
m6_51 [label="Assert.AreEqual(0, values[0])", span="136-136", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CollectionJsonConstructorPrivateParameterized()", file="JsonSerializerCollectionsTests.cs"];
m6_52 [label="Assert.AreEqual(1, values[1])", span="137-137", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CollectionJsonConstructorPrivateParameterized()", file="JsonSerializerCollectionsTests.cs"];
m6_53 [label="Assert.AreEqual(2, values[2])", span="138-138", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CollectionJsonConstructorPrivateParameterized()", file="JsonSerializerCollectionsTests.cs"];
m6_54 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CollectionJsonConstructorPrivateParameterized()", span="124-124", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CollectionJsonConstructorPrivateParameterized()", file="JsonSerializerCollectionsTests.cs"];
m6_782 [label="Entry Newtonsoft.Json.JsonTextReader.JsonTextReader(System.IO.TextReader)", span="75-75", cluster="Newtonsoft.Json.JsonTextReader.JsonTextReader(System.IO.TextReader)", file="JsonSerializerCollectionsTests.cs"];
m6_278 [label="Entry Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string, Newtonsoft.Json.JsonSerializerSettings)", span="766-766", cluster="Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string, Newtonsoft.Json.JsonSerializerSettings)", file="JsonSerializerCollectionsTests.cs"];
m6_785 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.GenericCollectionInheritance()", span="1785-1785", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.GenericCollectionInheritance()", file="JsonSerializerCollectionsTests.cs"];
m6_786 [label="string json", span="1787-1787", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.GenericCollectionInheritance()", file="JsonSerializerCollectionsTests.cs"];
m6_787 [label="GenericClass<GenericItem<string>, string> foo1 = new GenericClass<GenericItem<string>, string>()", span="1789-1789", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.GenericCollectionInheritance()", file="JsonSerializerCollectionsTests.cs"];
m6_788 [label="foo1.Items.Add(new GenericItem<string> { Value = ''Hello'' })", span="1790-1790", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.GenericCollectionInheritance()", file="JsonSerializerCollectionsTests.cs"];
m6_789 [label="json = JsonConvert.SerializeObject(new { selectList = foo1 })", span="1792-1792", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.GenericCollectionInheritance()", file="JsonSerializerCollectionsTests.cs"];
m6_790 [label="Assert.AreEqual(@''{''''selectList'''':[{''''Value'''':''''Hello''''}]}'', json)", span="1793-1793", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.GenericCollectionInheritance()", file="JsonSerializerCollectionsTests.cs"];
m6_791 [label="GenericClass<NonGenericItem, string> foo2 = new GenericClass<NonGenericItem, string>()", span="1795-1795", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.GenericCollectionInheritance()", file="JsonSerializerCollectionsTests.cs"];
m6_792 [label="foo2.Items.Add(new NonGenericItem { Value = ''Hello'' })", span="1796-1796", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.GenericCollectionInheritance()", file="JsonSerializerCollectionsTests.cs"];
m6_793 [label="json = JsonConvert.SerializeObject(new { selectList = foo2 })", span="1798-1798", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.GenericCollectionInheritance()", file="JsonSerializerCollectionsTests.cs"];
m6_794 [label="Assert.AreEqual(@''{''''selectList'''':[{''''Value'''':''''Hello''''}]}'', json)", span="1799-1799", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.GenericCollectionInheritance()", file="JsonSerializerCollectionsTests.cs"];
m6_795 [label="NonGenericClass foo3 = new NonGenericClass()", span="1801-1801", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.GenericCollectionInheritance()", file="JsonSerializerCollectionsTests.cs"];
m6_796 [label="foo3.Items.Add(new NonGenericItem { Value = ''Hello'' })", span="1802-1802", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.GenericCollectionInheritance()", file="JsonSerializerCollectionsTests.cs"];
m6_797 [label="json = JsonConvert.SerializeObject(new { selectList = foo3 })", span="1804-1804", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.GenericCollectionInheritance()", file="JsonSerializerCollectionsTests.cs"];
m6_798 [label="Assert.AreEqual(@''{''''selectList'''':[{''''Value'''':''''Hello''''}]}'', json)", span="1805-1805", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.GenericCollectionInheritance()", file="JsonSerializerCollectionsTests.cs"];
m6_799 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.GenericCollectionInheritance()", span="1785-1785", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.GenericCollectionInheritance()", file="JsonSerializerCollectionsTests.cs"];
m6_869 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.GenericIListAndOverrideConstructor()", span="1981-1981", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.GenericIListAndOverrideConstructor()", file="JsonSerializerCollectionsTests.cs"];
m6_870 [label="MyClass deserialized = JsonConvert.DeserializeObject<MyClass>(@''[''''apple'''', ''''monkey'''', ''''goose'''']'')", span="1983-1983", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.GenericIListAndOverrideConstructor()", file="JsonSerializerCollectionsTests.cs"];
m6_871 [label="Assert.AreEqual(''apple'', deserialized[0])", span="1985-1985", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.GenericIListAndOverrideConstructor()", file="JsonSerializerCollectionsTests.cs"];
m6_872 [label="Assert.AreEqual(''monkey'', deserialized[1])", span="1986-1986", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.GenericIListAndOverrideConstructor()", file="JsonSerializerCollectionsTests.cs"];
m6_873 [label="Assert.AreEqual(''goose'', deserialized[2])", span="1987-1987", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.GenericIListAndOverrideConstructor()", file="JsonSerializerCollectionsTests.cs"];
m6_874 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.GenericIListAndOverrideConstructor()", span="1981-1981", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.GenericIListAndOverrideConstructor()", file="JsonSerializerCollectionsTests.cs"];
m6_729 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.ComplexValuesInObjectArray()", span="1694-1694", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.ComplexValuesInObjectArray()", file="JsonSerializerCollectionsTests.cs"];
m6_730 [label="string json = @''{''''action'''':''''Router'''',''''method'''':''''Navigate'''',''''data'''':[''''dashboard'''',[''''id'''', 1, ''''teststring'''', ''''test''''],{''''one'''':1}],''''type'''':''''rpc'''',''''tid'''':2}''", span="1696-1696", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.ComplexValuesInObjectArray()", file="JsonSerializerCollectionsTests.cs"];
m6_731 [label="ObjectArrayPropertyTest o = JsonConvert.DeserializeObject<ObjectArrayPropertyTest>(json)", span="1698-1698", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.ComplexValuesInObjectArray()", file="JsonSerializerCollectionsTests.cs"];
m6_732 [label="Assert.AreEqual(''Router'', o.Action)", span="1700-1700", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.ComplexValuesInObjectArray()", file="JsonSerializerCollectionsTests.cs"];
m6_733 [label="Assert.AreEqual(''Navigate'', o.Method)", span="1701-1701", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.ComplexValuesInObjectArray()", file="JsonSerializerCollectionsTests.cs"];
m6_734 [label="Assert.AreEqual(3, o.Data.Length)", span="1702-1702", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.ComplexValuesInObjectArray()", file="JsonSerializerCollectionsTests.cs"];
m6_735 [label="Assert.AreEqual(''dashboard'', o.Data[0])", span="1703-1703", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.ComplexValuesInObjectArray()", file="JsonSerializerCollectionsTests.cs"];
m6_736 [label="CustomAssert.IsInstanceOfType(typeof(JArray), o.Data[1])", span="1704-1704", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.ComplexValuesInObjectArray()", file="JsonSerializerCollectionsTests.cs"];
m6_737 [label="Assert.AreEqual(4, ((JArray)o.Data[1]).Count)", span="1705-1705", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.ComplexValuesInObjectArray()", file="JsonSerializerCollectionsTests.cs"];
m6_738 [label="CustomAssert.IsInstanceOfType(typeof(JObject), o.Data[2])", span="1706-1706", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.ComplexValuesInObjectArray()", file="JsonSerializerCollectionsTests.cs"];
m6_739 [label="Assert.AreEqual(1, ((JObject)o.Data[2]).Count)", span="1707-1707", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.ComplexValuesInObjectArray()", file="JsonSerializerCollectionsTests.cs"];
m6_740 [label="Assert.AreEqual(1, (int)((JObject)o.Data[2])[''one''])", span="1708-1708", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.ComplexValuesInObjectArray()", file="JsonSerializerCollectionsTests.cs"];
m6_741 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.ComplexValuesInObjectArray()", span="1694-1694", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.ComplexValuesInObjectArray()", file="JsonSerializerCollectionsTests.cs"];
m6_441 [label="Entry Newtonsoft.Json.Tests.TestObjects.Movie.Movie()", span="30-30", cluster="Newtonsoft.Json.Tests.TestObjects.Movie.Movie()", file="JsonSerializerCollectionsTests.cs"];
m6_996 [label="Entry Newtonsoft.Json.Tests.Serialization.ReadOnlyCollectionWithArrayArgument<T>.System.Collections.IEnumerable.GetEnumerator()", span="2337-2337", cluster="Newtonsoft.Json.Tests.Serialization.ReadOnlyCollectionWithArrayArgument<T>.System.Collections.IEnumerable.GetEnumerator()", file="JsonSerializerCollectionsTests.cs"];
m6_997 [label="return _values.GetEnumerator();", span="2339-2339", cluster="Newtonsoft.Json.Tests.Serialization.ReadOnlyCollectionWithArrayArgument<T>.System.Collections.IEnumerable.GetEnumerator()", file="JsonSerializerCollectionsTests.cs"];
m6_998 [label="Exit Newtonsoft.Json.Tests.Serialization.ReadOnlyCollectionWithArrayArgument<T>.System.Collections.IEnumerable.GetEnumerator()", span="2337-2337", cluster="Newtonsoft.Json.Tests.Serialization.ReadOnlyCollectionWithArrayArgument<T>.System.Collections.IEnumerable.GetEnumerator()", file="JsonSerializerCollectionsTests.cs"];
m6_896 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MyClass.GetEnumerator()", span="2055-2055", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MyClass.GetEnumerator()", file="JsonSerializerCollectionsTests.cs"];
m6_897 [label="return ((IList<string>)_storage).GetEnumerator();", span="2057-2057", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MyClass.GetEnumerator()", file="JsonSerializerCollectionsTests.cs"];
m6_898 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MyClass.GetEnumerator()", span="2055-2055", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MyClass.GetEnumerator()", file="JsonSerializerCollectionsTests.cs"];
m6_707 [label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.JsonSerializerSettings)", span="582-582", cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.JsonSerializerSettings)", file="JsonSerializerCollectionsTests.cs"];
m6_200 [label="Entry System.Array.GetLowerBound(int)", span="0-0", cluster="System.Array.GetLowerBound(int)", file="JsonSerializerCollectionsTests.cs"];
m6_12 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DoubleKey_MaxValue()", span="77-77", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DoubleKey_MaxValue()", file="JsonSerializerCollectionsTests.cs"];
m6_13 [label="Dictionary<double, int> dictionary = new Dictionary<double, int> { { double.MaxValue, 1 } }", span="79-79", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DoubleKey_MaxValue()", file="JsonSerializerCollectionsTests.cs", color=green, community=0];
m6_14 [label="string output = JsonConvert.SerializeObject(dictionary)", span="80-80", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DoubleKey_MaxValue()", file="JsonSerializerCollectionsTests.cs", color=green, community=0];
m6_15 [label="Assert.AreEqual(@''{''''1.7976931348623157E+308'''':1}'', output)", span="81-81", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DoubleKey_MaxValue()", file="JsonSerializerCollectionsTests.cs", color=green, community=0];
m6_16 [label="Dictionary<double, int> deserializedValue = JsonConvert.DeserializeObject<Dictionary<double, int>>(output)", span="83-83", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DoubleKey_MaxValue()", file="JsonSerializerCollectionsTests.cs", color=green, community=0];
m6_17 [label="Assert.AreEqual(double.MaxValue, deserializedValue.First().Key)", span="84-84", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DoubleKey_MaxValue()", file="JsonSerializerCollectionsTests.cs", color=green, community=0];
m6_18 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DoubleKey_MaxValue()", span="77-77", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DoubleKey_MaxValue()", file="JsonSerializerCollectionsTests.cs"];
m6_111 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DictionaryJsonConstructorPrivateParameterized()", span="241-241", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DictionaryJsonConstructorPrivateParameterized()", file="JsonSerializerCollectionsTests.cs"];
m6_112 [label="TestDictionaryPrivateParameterized c1 = new TestDictionaryPrivateParameterized()", span="243-243", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DictionaryJsonConstructorPrivateParameterized()", file="JsonSerializerCollectionsTests.cs"];
m6_113 [label="c1.Add(''zero'', 0)", span="244-244", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DictionaryJsonConstructorPrivateParameterized()", file="JsonSerializerCollectionsTests.cs"];
m6_114 [label="c1.Add(''one'', 1)", span="245-245", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DictionaryJsonConstructorPrivateParameterized()", file="JsonSerializerCollectionsTests.cs"];
m6_115 [label="c1.Add(''two'', 2)", span="246-246", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DictionaryJsonConstructorPrivateParameterized()", file="JsonSerializerCollectionsTests.cs"];
m6_116 [label="string json = JsonConvert.SerializeObject(c1)", span="247-247", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DictionaryJsonConstructorPrivateParameterized()", file="JsonSerializerCollectionsTests.cs"];
m6_117 [label="TestDictionaryPrivateParameterized c2 = JsonConvert.DeserializeObject<TestDictionaryPrivateParameterized>(json)", span="248-248", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DictionaryJsonConstructorPrivateParameterized()", file="JsonSerializerCollectionsTests.cs"];
m6_118 [label="Assert.AreEqual(3, c2.Count)", span="250-250", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DictionaryJsonConstructorPrivateParameterized()", file="JsonSerializerCollectionsTests.cs"];
m6_119 [label="Assert.AreEqual(0, c2[''zero''])", span="251-251", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DictionaryJsonConstructorPrivateParameterized()", file="JsonSerializerCollectionsTests.cs"];
m6_120 [label="Assert.AreEqual(1, c2[''one''])", span="252-252", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DictionaryJsonConstructorPrivateParameterized()", file="JsonSerializerCollectionsTests.cs"];
m6_121 [label="Assert.AreEqual(2, c2[''two''])", span="253-253", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DictionaryJsonConstructorPrivateParameterized()", file="JsonSerializerCollectionsTests.cs"];
m6_122 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DictionaryJsonConstructorPrivateParameterized()", span="241-241", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DictionaryJsonConstructorPrivateParameterized()", file="JsonSerializerCollectionsTests.cs"];
m6_244 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeIEnumerableFromConstructor()", span="529-529", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeIEnumerableFromConstructor()", file="JsonSerializerCollectionsTests.cs"];
m6_245 [label="string json = @''[\r\n  1,\r\n  2,\r\n  null\r\n]''", span="531-535", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeIEnumerableFromConstructor()", file="JsonSerializerCollectionsTests.cs"];
m6_246 [label="var result = JsonConvert.DeserializeObject<EnumerableClass<int?>>(json)", span="537-537", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeIEnumerableFromConstructor()", file="JsonSerializerCollectionsTests.cs"];
m6_247 [label="Assert.AreEqual(3, result.Count())", span="539-539", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeIEnumerableFromConstructor()", file="JsonSerializerCollectionsTests.cs"];
m6_248 [label="Assert.AreEqual(1, result.ElementAt(0))", span="540-540", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeIEnumerableFromConstructor()", file="JsonSerializerCollectionsTests.cs"];
m6_249 [label="Assert.AreEqual(2, result.ElementAt(1))", span="541-541", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeIEnumerableFromConstructor()", file="JsonSerializerCollectionsTests.cs"];
m6_250 [label="Assert.AreEqual(null, result.ElementAt(2))", span="542-542", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeIEnumerableFromConstructor()", file="JsonSerializerCollectionsTests.cs"];
m6_251 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeIEnumerableFromConstructor()", span="529-529", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeIEnumerableFromConstructor()", file="JsonSerializerCollectionsTests.cs"];
m6_586 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeArray2D()", span="1365-1365", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeArray2D()", file="JsonSerializerCollectionsTests.cs"];
m6_587 [label="string json = @''{''''Before'''':''''Before!'''',''''Coordinates'''':[[1,1],[1,2],[2,1],[2,2]],''''After'''':''''After!''''}''", span="1367-1367", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeArray2D()", file="JsonSerializerCollectionsTests.cs"];
m6_588 [label="Array2D aa = JsonConvert.DeserializeObject<Array2D>(json)", span="1369-1369", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeArray2D()", file="JsonSerializerCollectionsTests.cs"];
m6_596 [label="Assert.AreEqual(json, after)", span="1380-1380", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeArray2D()", file="JsonSerializerCollectionsTests.cs"];
m6_589 [label="Assert.AreEqual(''Before!'', aa.Before)", span="1371-1371", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeArray2D()", file="JsonSerializerCollectionsTests.cs"];
m6_590 [label="Assert.AreEqual(''After!'', aa.After)", span="1372-1372", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeArray2D()", file="JsonSerializerCollectionsTests.cs"];
m6_591 [label="Assert.AreEqual(4, aa.Coordinates.GetLength(0))", span="1373-1373", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeArray2D()", file="JsonSerializerCollectionsTests.cs"];
m6_592 [label="Assert.AreEqual(2, aa.Coordinates.GetLength(1))", span="1374-1374", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeArray2D()", file="JsonSerializerCollectionsTests.cs"];
m6_593 [label="Assert.AreEqual(1, aa.Coordinates[0, 0])", span="1375-1375", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeArray2D()", file="JsonSerializerCollectionsTests.cs"];
m6_594 [label="Assert.AreEqual(2, aa.Coordinates[1, 1])", span="1376-1376", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeArray2D()", file="JsonSerializerCollectionsTests.cs"];
m6_595 [label="string after = JsonConvert.SerializeObject(aa)", span="1378-1378", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeArray2D()", file="JsonSerializerCollectionsTests.cs"];
m6_597 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeArray2D()", span="1365-1365", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeArray2D()", file="JsonSerializerCollectionsTests.cs"];
m6_800 [label="Entry Newtonsoft.Json.Tests.Serialization.GenericClass<T, TValue>.GenericClass()", span="2456-2456", cluster="Newtonsoft.Json.Tests.Serialization.GenericClass<T, TValue>.GenericClass()", file="JsonSerializerCollectionsTests.cs"];
m6_1033 [label="Items = new List<T>()", span="2458-2458", cluster="Newtonsoft.Json.Tests.Serialization.GenericClass<T, TValue>.GenericClass()", file="JsonSerializerCollectionsTests.cs"];
m6_1034 [label="Exit Newtonsoft.Json.Tests.Serialization.GenericClass<T, TValue>.GenericClass()", span="2456-2456", cluster="Newtonsoft.Json.Tests.Serialization.GenericClass<T, TValue>.GenericClass()", file="JsonSerializerCollectionsTests.cs"];
m6_372 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CustomReadOnlyCollection<T>.System.Collections.IEnumerable.GetEnumerator()", span="789-789", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CustomReadOnlyCollection<T>.System.Collections.IEnumerable.GetEnumerator()", file="JsonSerializerCollectionsTests.cs"];
m6_373 [label="return _values.GetEnumerator();", span="791-791", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CustomReadOnlyCollection<T>.System.Collections.IEnumerable.GetEnumerator()", file="JsonSerializerCollectionsTests.cs"];
m6_374 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CustomReadOnlyCollection<T>.System.Collections.IEnumerable.GetEnumerator()", span="789-789", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CustomReadOnlyCollection<T>.System.Collections.IEnumerable.GetEnumerator()", file="JsonSerializerCollectionsTests.cs"];
m6_315 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeReadOnlyCollectionInterface()", span="655-655", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeReadOnlyCollectionInterface()", file="JsonSerializerCollectionsTests.cs"];
m6_316 [label="IReadOnlyCollection<int> list = JsonConvert.DeserializeObject<IReadOnlyCollection<int>>(''[1,2,3]'')", span="657-657", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeReadOnlyCollectionInterface()", file="JsonSerializerCollectionsTests.cs"];
m6_317 [label="Assert.AreEqual(3, list.Count)", span="659-659", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeReadOnlyCollectionInterface()", file="JsonSerializerCollectionsTests.cs"];
m6_318 [label="Assert.AreEqual(1, list.ElementAt(0))", span="661-661", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeReadOnlyCollectionInterface()", file="JsonSerializerCollectionsTests.cs"];
m6_319 [label="Assert.AreEqual(2, list.ElementAt(1))", span="662-662", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeReadOnlyCollectionInterface()", file="JsonSerializerCollectionsTests.cs"];
m6_320 [label="Assert.AreEqual(3, list.ElementAt(2))", span="663-663", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeReadOnlyCollectionInterface()", file="JsonSerializerCollectionsTests.cs"];
m6_321 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeReadOnlyCollectionInterface()", span="655-655", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeReadOnlyCollectionInterface()", file="JsonSerializerCollectionsTests.cs"];
m6_149 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestDictionaryBadIEnumerableParameter.TestDictionaryBadIEnumerableParameter(System.Collections.Generic.Dictionary<string, string>)", span="304-304", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestDictionaryBadIEnumerableParameter.TestDictionaryBadIEnumerableParameter(System.Collections.Generic.Dictionary<string, string>)", file="JsonSerializerCollectionsTests.cs"];
m6_150 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestDictionaryBadIEnumerableParameter.TestDictionaryBadIEnumerableParameter(System.Collections.Generic.Dictionary<string, string>)", span="304-304", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestDictionaryBadIEnumerableParameter.TestDictionaryBadIEnumerableParameter(System.Collections.Generic.Dictionary<string, string>)", file="JsonSerializerCollectionsTests.cs"];
m6_1058 [label="Entry Newtonsoft.Json.JsonReader.Read()", span="409-409", cluster="Newtonsoft.Json.JsonReader.Read()", file="JsonSerializerCollectionsTests.cs"];
m6_1029 [label="Entry System.Collections.Generic.List<T>.GetEnumerator()", span="0-0", cluster="System.Collections.Generic.List<T>.GetEnumerator()", file="JsonSerializerCollectionsTests.cs"];
m6_433 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.StringListAppenderConverterTest()", span="928-928", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.StringListAppenderConverterTest()", file="JsonSerializerCollectionsTests.cs"];
m6_434 [label="Movie p = new Movie()", span="930-930", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.StringListAppenderConverterTest()", file="JsonSerializerCollectionsTests.cs"];
m6_435 [label="p.ReleaseCountries = new List<string> { ''Existing'' }", span="931-931", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.StringListAppenderConverterTest()", file="JsonSerializerCollectionsTests.cs"];
m6_436 [label="JsonConvert.PopulateObject(''{'ReleaseCountries':['Appended']}'', p, new JsonSerializerSettings\r\n            {\r\n                Converters = new List<JsonConverter> { new StringListAppenderConverter() }\r\n            })", span="933-936", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.StringListAppenderConverterTest()", file="JsonSerializerCollectionsTests.cs"];
m6_437 [label="Assert.AreEqual(2, p.ReleaseCountries.Count)", span="938-938", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.StringListAppenderConverterTest()", file="JsonSerializerCollectionsTests.cs"];
m6_438 [label="Assert.AreEqual(''Existing'', p.ReleaseCountries[0])", span="939-939", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.StringListAppenderConverterTest()", file="JsonSerializerCollectionsTests.cs"];
m6_439 [label="Assert.AreEqual(''Appended'', p.ReleaseCountries[1])", span="940-940", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.StringListAppenderConverterTest()", file="JsonSerializerCollectionsTests.cs"];
m6_440 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.StringListAppenderConverterTest()", span="928-928", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.StringListAppenderConverterTest()", file="JsonSerializerCollectionsTests.cs"];
m6_444 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.StringAppenderConverterTest()", span="944-944", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.StringAppenderConverterTest()", file="JsonSerializerCollectionsTests.cs"];
m6_445 [label="Movie p = new Movie()", span="946-946", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.StringAppenderConverterTest()", file="JsonSerializerCollectionsTests.cs"];
m6_446 [label="p.Name = ''Existing,''", span="947-947", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.StringAppenderConverterTest()", file="JsonSerializerCollectionsTests.cs"];
m6_447 [label="JsonConvert.PopulateObject(''{'Name':'Appended'}'', p, new JsonSerializerSettings\r\n            {\r\n                Converters = new List<JsonConverter> { new StringAppenderConverter() }\r\n            })", span="949-952", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.StringAppenderConverterTest()", file="JsonSerializerCollectionsTests.cs"];
m6_448 [label="Assert.AreEqual(''Existing,Appended'', p.Name)", span="954-954", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.StringAppenderConverterTest()", file="JsonSerializerCollectionsTests.cs"];
m6_449 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.StringAppenderConverterTest()", span="944-944", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.StringAppenderConverterTest()", file="JsonSerializerCollectionsTests.cs"];
m6_708 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeTypeName3DArray()", span="1579-1579", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeTypeName3DArray()", file="JsonSerializerCollectionsTests.cs"];
m6_709 [label="Event1 e1 = new Event1\r\n            {\r\n                EventName = ''EventName!''\r\n            }", span="1581-1584", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeTypeName3DArray()", file="JsonSerializerCollectionsTests.cs"];
m6_710 [label="Event1[,] array1 = new[,] { { e1, e1 }, { e1, e1 } }", span="1585-1585", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeTypeName3DArray()", file="JsonSerializerCollectionsTests.cs"];
m6_711 [label="IList<Event1[,]> values1 = new List<Event1[,]>\r\n            {\r\n                array1,\r\n                array1\r\n            }", span="1586-1590", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeTypeName3DArray()", file="JsonSerializerCollectionsTests.cs"];
m6_712 [label="string json = JsonConvert.SerializeObject(values1, new JsonSerializerSettings\r\n            {\r\n                TypeNameHandling = TypeNameHandling.All,\r\n                Formatting = Formatting.Indented\r\n            })", span="1592-1596", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeTypeName3DArray()", file="JsonSerializerCollectionsTests.cs"];
m6_713 [label="StringAssert.AreEqual(@''{\r\n  ''''$type'''': '''''' + ReflectionUtils.GetTypeName(typeof(List<Event1[,]>), 0, DefaultSerializationBinder.Instance) + @'''''',\r\n  ''''$values'''': [\r\n    {\r\n      ''''$type'''': ''''Newtonsoft.Json.Tests.TestObjects.Events.Event1[,], Newtonsoft.Json.Tests'''',\r\n      ''''$values'''': [\r\n        [\r\n          {\r\n            ''''$type'''': ''''Newtonsoft.Json.Tests.TestObjects.Events.Event1, Newtonsoft.Json.Tests'''',\r\n            ''''EventName'''': ''''EventName!'''',\r\n            ''''Venue'''': null,\r\n            ''''Performances'''': null\r\n          },\r\n          {\r\n            ''''$type'''': ''''Newtonsoft.Json.Tests.TestObjects.Events.Event1, Newtonsoft.Json.Tests'''',\r\n            ''''EventName'''': ''''EventName!'''',\r\n            ''''Venue'''': null,\r\n            ''''Performances'''': null\r\n          }\r\n        ],\r\n        [\r\n          {\r\n            ''''$type'''': ''''Newtonsoft.Json.Tests.TestObjects.Events.Event1, Newtonsoft.Json.Tests'''',\r\n            ''''EventName'''': ''''EventName!'''',\r\n            ''''Venue'''': null,\r\n            ''''Performances'''': null\r\n          },\r\n          {\r\n            ''''$type'''': ''''Newtonsoft.Json.Tests.TestObjects.Events.Event1, Newtonsoft.Json.Tests'''',\r\n            ''''EventName'''': ''''EventName!'''',\r\n            ''''Venue'''': null,\r\n            ''''Performances'''': null\r\n          }\r\n        ]\r\n      ]\r\n    },\r\n    {\r\n      ''''$type'''': ''''Newtonsoft.Json.Tests.TestObjects.Events.Event1[,], Newtonsoft.Json.Tests'''',\r\n      ''''$values'''': [\r\n        [\r\n          {\r\n            ''''$type'''': ''''Newtonsoft.Json.Tests.TestObjects.Events.Event1, Newtonsoft.Json.Tests'''',\r\n            ''''EventName'''': ''''EventName!'''',\r\n            ''''Venue'''': null,\r\n            ''''Performances'''': null\r\n          },\r\n          {\r\n            ''''$type'''': ''''Newtonsoft.Json.Tests.TestObjects.Events.Event1, Newtonsoft.Json.Tests'''',\r\n            ''''EventName'''': ''''EventName!'''',\r\n            ''''Venue'''': null,\r\n            ''''Performances'''': null\r\n          }\r\n        ],\r\n        [\r\n          {\r\n            ''''$type'''': ''''Newtonsoft.Json.Tests.TestObjects.Events.Event1, Newtonsoft.Json.Tests'''',\r\n            ''''EventName'''': ''''EventName!'''',\r\n            ''''Venue'''': null,\r\n            ''''Performances'''': null\r\n          },\r\n          {\r\n            ''''$type'''': ''''Newtonsoft.Json.Tests.TestObjects.Events.Event1, Newtonsoft.Json.Tests'''',\r\n            ''''EventName'''': ''''EventName!'''',\r\n            ''''Venue'''': null,\r\n            ''''Performances'''': null\r\n          }\r\n        ]\r\n      ]\r\n    }\r\n  ]\r\n}'', json)", span="1598-1668", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeTypeName3DArray()", file="JsonSerializerCollectionsTests.cs"];
m6_714 [label="IList<Event1[,]> values2 = (IList<Event1[,]>)JsonConvert.DeserializeObject(json, new JsonSerializerSettings\r\n            {\r\n                TypeNameHandling = TypeNameHandling.All\r\n            })", span="1670-1673", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeTypeName3DArray()", file="JsonSerializerCollectionsTests.cs"];
m6_715 [label="Assert.AreEqual(2, values2.Count)", span="1675-1675", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeTypeName3DArray()", file="JsonSerializerCollectionsTests.cs"];
m6_716 [label="Assert.AreEqual(''EventName!'', values2[0][0, 0].EventName)", span="1676-1676", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeTypeName3DArray()", file="JsonSerializerCollectionsTests.cs"];
m6_717 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeTypeName3DArray()", span="1579-1579", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeTypeName3DArray()", file="JsonSerializerCollectionsTests.cs"];
m6_202 [label="Entry int.ToString(System.IFormatProvider)", span="0-0", cluster="int.ToString(System.IFormatProvider)", file="JsonSerializerCollectionsTests.cs"];
m6_780 [label="Entry System.IO.StringWriter.GetStringBuilder()", span="0-0", cluster="System.IO.StringWriter.GetStringBuilder()", file="JsonSerializerCollectionsTests.cs"];
m6_159 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DictionaryJsonConstructorNonGeneric()", span="328-328", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DictionaryJsonConstructorNonGeneric()", file="JsonSerializerCollectionsTests.cs"];
m6_160 [label="string json = @''{'zero':0,'one':1,'two':2}''", span="330-330", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DictionaryJsonConstructorNonGeneric()", file="JsonSerializerCollectionsTests.cs"];
m6_161 [label="TestDictionaryNonGeneric d = JsonConvert.DeserializeObject<TestDictionaryNonGeneric>(json)", span="331-331", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DictionaryJsonConstructorNonGeneric()", file="JsonSerializerCollectionsTests.cs"];
m6_162 [label="Assert.AreEqual(3, d.Count)", span="333-333", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DictionaryJsonConstructorNonGeneric()", file="JsonSerializerCollectionsTests.cs"];
m6_163 [label="Assert.AreEqual(0, d[''zero''])", span="334-334", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DictionaryJsonConstructorNonGeneric()", file="JsonSerializerCollectionsTests.cs"];
m6_164 [label="Assert.AreEqual(1, d[''one''])", span="335-335", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DictionaryJsonConstructorNonGeneric()", file="JsonSerializerCollectionsTests.cs"];
m6_165 [label="Assert.AreEqual(2, d[''two''])", span="336-336", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DictionaryJsonConstructorNonGeneric()", file="JsonSerializerCollectionsTests.cs"];
m6_166 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DictionaryJsonConstructorNonGeneric()", span="328-328", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DictionaryJsonConstructorNonGeneric()", file="JsonSerializerCollectionsTests.cs"];
m6_777 [label="Entry Newtonsoft.Json.JsonSerializer.JsonSerializer()", span="530-530", cluster="Newtonsoft.Json.JsonSerializer.JsonSerializer()", file="JsonSerializerCollectionsTests.cs"];
m6_1012 [label="Entry Newtonsoft.Json.Tests.Serialization.ReadOnlyCollectionWithArrayArgument<T>.Remove(T)", span="2362-2362", cluster="Newtonsoft.Json.Tests.Serialization.ReadOnlyCollectionWithArrayArgument<T>.Remove(T)", file="JsonSerializerCollectionsTests.cs"];
m6_1013 [label="throw new NotImplementedException();", span="2364-2364", cluster="Newtonsoft.Json.Tests.Serialization.ReadOnlyCollectionWithArrayArgument<T>.Remove(T)", file="JsonSerializerCollectionsTests.cs"];
m6_1014 [label="Exit Newtonsoft.Json.Tests.Serialization.ReadOnlyCollectionWithArrayArgument<T>.Remove(T)", span="2362-2362", cluster="Newtonsoft.Json.Tests.Serialization.ReadOnlyCollectionWithArrayArgument<T>.Remove(T)", file="JsonSerializerCollectionsTests.cs"];
m6_61 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CollectionJsonConstructorPrivate()", span="155-155", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CollectionJsonConstructorPrivate()", file="JsonSerializerCollectionsTests.cs"];
m6_62 [label="TestCollectionPrivate c1 = TestCollectionPrivate.Create()", span="157-157", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CollectionJsonConstructorPrivate()", file="JsonSerializerCollectionsTests.cs"];
m6_63 [label="c1.Add(0)", span="158-158", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CollectionJsonConstructorPrivate()", file="JsonSerializerCollectionsTests.cs"];
m6_64 [label="c1.Add(1)", span="159-159", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CollectionJsonConstructorPrivate()", file="JsonSerializerCollectionsTests.cs"];
m6_65 [label="c1.Add(2)", span="160-160", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CollectionJsonConstructorPrivate()", file="JsonSerializerCollectionsTests.cs"];
m6_66 [label="string json = JsonConvert.SerializeObject(c1)", span="161-161", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CollectionJsonConstructorPrivate()", file="JsonSerializerCollectionsTests.cs"];
m6_67 [label="TestCollectionPrivate c2 = JsonConvert.DeserializeObject<TestCollectionPrivate>(json)", span="162-162", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CollectionJsonConstructorPrivate()", file="JsonSerializerCollectionsTests.cs"];
m6_68 [label="List<int> values = c2.ToList()", span="164-164", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CollectionJsonConstructorPrivate()", file="JsonSerializerCollectionsTests.cs"];
m6_69 [label="Assert.AreEqual(3, values.Count)", span="166-166", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CollectionJsonConstructorPrivate()", file="JsonSerializerCollectionsTests.cs"];
m6_70 [label="Assert.AreEqual(0, values[0])", span="167-167", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CollectionJsonConstructorPrivate()", file="JsonSerializerCollectionsTests.cs"];
m6_71 [label="Assert.AreEqual(1, values[1])", span="168-168", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CollectionJsonConstructorPrivate()", file="JsonSerializerCollectionsTests.cs"];
m6_72 [label="Assert.AreEqual(2, values[2])", span="169-169", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CollectionJsonConstructorPrivate()", file="JsonSerializerCollectionsTests.cs"];
m6_73 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CollectionJsonConstructorPrivate()", span="155-155", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CollectionJsonConstructorPrivate()", file="JsonSerializerCollectionsTests.cs"];
m6_765 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CustomCollectionSerialization()", span="1760-1760", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CustomCollectionSerialization()", file="JsonSerializerCollectionsTests.cs"];
m6_766 [label="ProductCollection collection = new ProductCollection()\r\n            {\r\n                new Product() { Name = ''Test1'' },\r\n                new Product() { Name = ''Test2'' },\r\n                new Product() { Name = ''Test3'' }\r\n            }", span="1762-1767", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CustomCollectionSerialization()", file="JsonSerializerCollectionsTests.cs"];
m6_767 [label="JsonSerializer jsonSerializer = new JsonSerializer()", span="1769-1769", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CustomCollectionSerialization()", file="JsonSerializerCollectionsTests.cs"];
m6_770 [label="jsonSerializer.Serialize(sw, collection)", span="1774-1774", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CustomCollectionSerialization()", file="JsonSerializerCollectionsTests.cs"];
m6_773 [label="CollectionAssert.AreEqual(collection, collectionNew)", span="1781-1781", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CustomCollectionSerialization()", file="JsonSerializerCollectionsTests.cs"];
m6_768 [label="jsonSerializer.ReferenceLoopHandling = ReferenceLoopHandling.Ignore", span="1770-1770", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CustomCollectionSerialization()", file="JsonSerializerCollectionsTests.cs"];
m6_772 [label="ProductCollection collectionNew = (ProductCollection)jsonSerializer.Deserialize(new JsonTextReader(new StringReader(sw.GetStringBuilder().ToString())), typeof(ProductCollection))", span="1779-1779", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CustomCollectionSerialization()", file="JsonSerializerCollectionsTests.cs"];
m6_769 [label="StringWriter sw = new StringWriter()", span="1772-1772", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CustomCollectionSerialization()", file="JsonSerializerCollectionsTests.cs"];
m6_771 [label="Assert.AreEqual(@''[{''''Name'''':''''Test1'''',''''ExpiryDate'''':''''2000-01-01T00:00:00Z'''',''''Price'''':0.0,''''Sizes'''':null},{''''Name'''':''''Test2'''',''''ExpiryDate'''':''''2000-01-01T00:00:00Z'''',''''Price'''':0.0,''''Sizes'''':null},{''''Name'''':''''Test3'''',''''ExpiryDate'''':''''2000-01-01T00:00:00Z'''',''''Price'''':0.0,''''Sizes'''':null}]'',\r\n                sw.GetStringBuilder().ToString())", span="1776-1777", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CustomCollectionSerialization()", file="JsonSerializerCollectionsTests.cs"];
m6_774 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CustomCollectionSerialization()", span="1760-1760", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CustomCollectionSerialization()", file="JsonSerializerCollectionsTests.cs"];
m6_357 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CustomReadOnlyDictionary<TKey, TValue>.System.Collections.IEnumerable.GetEnumerator()", span="746-746", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CustomReadOnlyDictionary<TKey, TValue>.System.Collections.IEnumerable.GetEnumerator()", file="JsonSerializerCollectionsTests.cs"];
m6_358 [label="return _dictionary.GetEnumerator();", span="748-748", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CustomReadOnlyDictionary<TKey, TValue>.System.Collections.IEnumerable.GetEnumerator()", file="JsonSerializerCollectionsTests.cs"];
m6_359 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CustomReadOnlyDictionary<TKey, TValue>.System.Collections.IEnumerable.GetEnumerator()", span="746-746", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CustomReadOnlyDictionary<TKey, TValue>.System.Collections.IEnumerable.GetEnumerator()", file="JsonSerializerCollectionsTests.cs"];
m6_1006 [label="Entry Newtonsoft.Json.Tests.Serialization.ReadOnlyCollectionWithArrayArgument<T>.Contains(T)", span="2352-2352", cluster="Newtonsoft.Json.Tests.Serialization.ReadOnlyCollectionWithArrayArgument<T>.Contains(T)", file="JsonSerializerCollectionsTests.cs"];
m6_1007 [label="throw new NotImplementedException();", span="2354-2354", cluster="Newtonsoft.Json.Tests.Serialization.ReadOnlyCollectionWithArrayArgument<T>.Contains(T)", file="JsonSerializerCollectionsTests.cs"];
m6_1008 [label="Exit Newtonsoft.Json.Tests.Serialization.ReadOnlyCollectionWithArrayArgument<T>.Contains(T)", span="2352-2352", cluster="Newtonsoft.Json.Tests.Serialization.ReadOnlyCollectionWithArrayArgument<T>.Contains(T)", file="JsonSerializerCollectionsTests.cs"];
m6_646 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeEmpty3DArray()", span="1444-1444", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeEmpty3DArray()", file="JsonSerializerCollectionsTests.cs"];
m6_647 [label="Array3D aa = new Array3D()", span="1446-1446", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeEmpty3DArray()", file="JsonSerializerCollectionsTests.cs"];
m6_648 [label="aa.Before = ''Before!''", span="1447-1447", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeEmpty3DArray()", file="JsonSerializerCollectionsTests.cs"];
m6_649 [label="aa.After = ''After!''", span="1448-1448", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeEmpty3DArray()", file="JsonSerializerCollectionsTests.cs"];
m6_650 [label="aa.Coordinates = new int[0, 0, 0]", span="1449-1449", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeEmpty3DArray()", file="JsonSerializerCollectionsTests.cs"];
m6_651 [label="string json = JsonConvert.SerializeObject(aa)", span="1451-1451", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeEmpty3DArray()", file="JsonSerializerCollectionsTests.cs"];
m6_652 [label="Assert.AreEqual(@''{''''Before'''':''''Before!'''',''''Coordinates'''':[],''''After'''':''''After!''''}'', json)", span="1453-1453", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeEmpty3DArray()", file="JsonSerializerCollectionsTests.cs"];
m6_653 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeEmpty3DArray()", span="1444-1444", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeEmpty3DArray()", file="JsonSerializerCollectionsTests.cs"];
m6_37 [label="Entry System.Collections.Generic.List<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.List<T>.Add(T)", file="JsonSerializerCollectionsTests.cs"];
m6_19 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.FloatKey_MaxValue()", span="88-88", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.FloatKey_MaxValue()", file="JsonSerializerCollectionsTests.cs"];
m6_20 [label="Dictionary<float, int> dictionary = new Dictionary<float, int> { { float.MaxValue, 1 } }", span="90-90", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.FloatKey_MaxValue()", file="JsonSerializerCollectionsTests.cs", color=green, community=0];
m6_21 [label="string output = JsonConvert.SerializeObject(dictionary)", span="91-91", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.FloatKey_MaxValue()", file="JsonSerializerCollectionsTests.cs", color=green, community=0];
m6_22 [label="Assert.AreEqual(@''{''''3.40282347E+38'''':1}'', output)", span="92-92", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.FloatKey_MaxValue()", file="JsonSerializerCollectionsTests.cs", color=green, community=0];
m6_23 [label="Dictionary<float, int> deserializedValue = JsonConvert.DeserializeObject<Dictionary<float, int>>(output)", span="94-94", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.FloatKey_MaxValue()", file="JsonSerializerCollectionsTests.cs", color=green, community=0];
m6_24 [label="Assert.AreEqual(float.MaxValue, deserializedValue.First().Key)", span="95-95", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.FloatKey_MaxValue()", file="JsonSerializerCollectionsTests.cs", color=green, community=0];
m6_25 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.FloatKey_MaxValue()", span="88-88", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.FloatKey_MaxValue()", file="JsonSerializerCollectionsTests.cs"];
m6_450 [label="Entry Newtonsoft.Json.Tests.Serialization.StringAppenderConverter.StringAppenderConverter()", span="2517-2517", cluster="Newtonsoft.Json.Tests.Serialization.StringAppenderConverter.StringAppenderConverter()", file="JsonSerializerCollectionsTests.cs"];
m6_574 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeArray3DWithConverter()", span="1296-1296", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeArray3DWithConverter()", file="JsonSerializerCollectionsTests.cs"];
m6_575 [label="string json = @''{\r\n  ''''Before'''': ''''Before!'''',\r\n  ''''Coordinates'''': [\r\n    [\r\n      [\r\n        1.0,\r\n        1.0,\r\n        1.0\r\n      ],\r\n      [\r\n        1.0,\r\n        1.0,\r\n        2.0\r\n      ]\r\n    ],\r\n    [\r\n      [\r\n        1.0,\r\n        2.0,\r\n        1.0\r\n      ],\r\n      [\r\n        1.0,\r\n        2.0,\r\n        2.0\r\n      ]\r\n    ],\r\n    [\r\n      [\r\n        2.0,\r\n        1.0,\r\n        1.0\r\n      ],\r\n      [\r\n        2.0,\r\n        1.0,\r\n        2.0\r\n      ]\r\n    ],\r\n    [\r\n      [\r\n        2.0,\r\n        2.0,\r\n        1.0\r\n      ],\r\n      [\r\n        2.0,\r\n        2.0,\r\n        2.0\r\n      ]\r\n    ]\r\n  ],\r\n  ''''After'''': ''''After!''''\r\n}''", span="1298-1351", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeArray3DWithConverter()", file="JsonSerializerCollectionsTests.cs"];
m6_576 [label="Array3DWithConverter aa = JsonConvert.DeserializeObject<Array3DWithConverter>(json)", span="1353-1353", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeArray3DWithConverter()", file="JsonSerializerCollectionsTests.cs"];
m6_577 [label="Assert.AreEqual(''Before!'', aa.Before)", span="1355-1355", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeArray3DWithConverter()", file="JsonSerializerCollectionsTests.cs"];
m6_578 [label="Assert.AreEqual(''After!'', aa.After)", span="1356-1356", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeArray3DWithConverter()", file="JsonSerializerCollectionsTests.cs"];
m6_579 [label="Assert.AreEqual(4, aa.Coordinates.GetLength(0))", span="1357-1357", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeArray3DWithConverter()", file="JsonSerializerCollectionsTests.cs"];
m6_580 [label="Assert.AreEqual(2, aa.Coordinates.GetLength(1))", span="1358-1358", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeArray3DWithConverter()", file="JsonSerializerCollectionsTests.cs"];
m6_581 [label="Assert.AreEqual(3, aa.Coordinates.GetLength(2))", span="1359-1359", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeArray3DWithConverter()", file="JsonSerializerCollectionsTests.cs"];
m6_582 [label="Assert.AreEqual(1, aa.Coordinates[0, 0, 0])", span="1360-1360", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeArray3DWithConverter()", file="JsonSerializerCollectionsTests.cs"];
m6_583 [label="Assert.AreEqual(2, aa.Coordinates[1, 1, 1])", span="1361-1361", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeArray3DWithConverter()", file="JsonSerializerCollectionsTests.cs"];
m6_584 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeArray3DWithConverter()", span="1296-1296", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeArray3DWithConverter()", file="JsonSerializerCollectionsTests.cs"];
m6_884 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MyClass.Clear()", span="2040-2040", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MyClass.Clear()", file="JsonSerializerCollectionsTests.cs"];
m6_885 [label="((IList<string>)_storage).Clear()", span="2042-2042", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MyClass.Clear()", file="JsonSerializerCollectionsTests.cs"];
m6_886 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MyClass.Clear()", span="2040-2040", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MyClass.Clear()", file="JsonSerializerCollectionsTests.cs"];
m6_7 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="JsonSerializerCollectionsTests.cs"];
m6_939 [label="Entry string.Split(params char[])", span="0-0", cluster="string.Split(params char[])", file="JsonSerializerCollectionsTests.cs"];
m6_1018 [label="Entry Newtonsoft.Json.Tests.Serialization.ReadOnlyCollectionWithArrayArgument<T>.Insert(int, T)", span="2374-2374", cluster="Newtonsoft.Json.Tests.Serialization.ReadOnlyCollectionWithArrayArgument<T>.Insert(int, T)", file="JsonSerializerCollectionsTests.cs"];
m6_1019 [label="throw new NotImplementedException();", span="2376-2376", cluster="Newtonsoft.Json.Tests.Serialization.ReadOnlyCollectionWithArrayArgument<T>.Insert(int, T)", file="JsonSerializerCollectionsTests.cs"];
m6_1020 [label="Exit Newtonsoft.Json.Tests.Serialization.ReadOnlyCollectionWithArrayArgument<T>.Insert(int, T)", span="2374-2374", cluster="Newtonsoft.Json.Tests.Serialization.ReadOnlyCollectionWithArrayArgument<T>.Insert(int, T)", file="JsonSerializerCollectionsTests.cs"];
m6_9 [label="Entry Unk.AreEqual", span="", cluster="Unk.AreEqual", file="JsonSerializerCollectionsTests.cs"];
m6_470 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeConcurrentDictionary()", span="999-999", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeConcurrentDictionary()", file="JsonSerializerCollectionsTests.cs"];
m6_471 [label="IDictionary<string, TestObjects.Component> components = new Dictionary<string, TestObjects.Component>\r\n            {\r\n                { ''Key!'', new TestObjects.Component() }\r\n            }", span="1001-1004", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeConcurrentDictionary()", file="JsonSerializerCollectionsTests.cs"];
m6_472 [label="GameObject go = new GameObject\r\n            {\r\n                Components = new ConcurrentDictionary<string, TestObjects.Component>(components),\r\n                Id = ''Id!'',\r\n                Name = ''Name!''\r\n            }", span="1005-1010", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeConcurrentDictionary()", file="JsonSerializerCollectionsTests.cs"];
m6_473 [label="string originalJson = JsonConvert.SerializeObject(go, Formatting.Indented)", span="1012-1012", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeConcurrentDictionary()", file="JsonSerializerCollectionsTests.cs"];
m6_474 [label="StringAssert.AreEqual(@''{\r\n  ''''Components'''': {\r\n    ''''Key!'''': {}\r\n  },\r\n  ''''Id'''': ''''Id!'''',\r\n  ''''Name'''': ''''Name!''''\r\n}'', originalJson)", span="1014-1020", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeConcurrentDictionary()", file="JsonSerializerCollectionsTests.cs"];
m6_475 [label="GameObject newObject = JsonConvert.DeserializeObject<GameObject>(originalJson)", span="1022-1022", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeConcurrentDictionary()", file="JsonSerializerCollectionsTests.cs"];
m6_476 [label="Assert.AreEqual(1, newObject.Components.Count)", span="1024-1024", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeConcurrentDictionary()", file="JsonSerializerCollectionsTests.cs"];
m6_477 [label="Assert.AreEqual(''Id!'', newObject.Id)", span="1025-1025", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeConcurrentDictionary()", file="JsonSerializerCollectionsTests.cs"];
m6_478 [label="Assert.AreEqual(''Name!'', newObject.Name)", span="1026-1026", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeConcurrentDictionary()", file="JsonSerializerCollectionsTests.cs"];
m6_479 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeConcurrentDictionary()", span="999-999", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeConcurrentDictionary()", file="JsonSerializerCollectionsTests.cs"];
m6_480 [label="Entry Newtonsoft.Json.Tests.TestObjects.Component.Component()", span="34-34", cluster="Newtonsoft.Json.Tests.TestObjects.Component.Component()", file="JsonSerializerCollectionsTests.cs"];
m6_157 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestDictionaryNonGeneric.TestDictionaryNonGeneric(System.Collections.IDictionary)", span="321-321", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestDictionaryNonGeneric.TestDictionaryNonGeneric(System.Collections.IDictionary)", file="JsonSerializerCollectionsTests.cs"];
m6_158 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestDictionaryNonGeneric.TestDictionaryNonGeneric(System.Collections.IDictionary)", span="321-321", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestDictionaryNonGeneric.TestDictionaryNonGeneric(System.Collections.IDictionary)", file="JsonSerializerCollectionsTests.cs"];
m6_176 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SomeObject.SomeObject()", span="356-356", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SomeObject.SomeObject()", file="JsonSerializerCollectionsTests.cs"];
m6_343 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CustomReadOnlyDictionary<TKey, TValue>.CustomReadOnlyDictionary(System.Collections.Generic.IDictionary<TKey, TValue>)", span="706-706", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CustomReadOnlyDictionary<TKey, TValue>.CustomReadOnlyDictionary(System.Collections.Generic.IDictionary<TKey, TValue>)", file="JsonSerializerCollectionsTests.cs"];
m6_344 [label="_dictionary = dictionary", span="708-708", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CustomReadOnlyDictionary<TKey, TValue>.CustomReadOnlyDictionary(System.Collections.Generic.IDictionary<TKey, TValue>)", file="JsonSerializerCollectionsTests.cs"];
m6_345 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CustomReadOnlyDictionary<TKey, TValue>.CustomReadOnlyDictionary(System.Collections.Generic.IDictionary<TKey, TValue>)", span="706-706", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CustomReadOnlyDictionary<TKey, TValue>.CustomReadOnlyDictionary(System.Collections.Generic.IDictionary<TKey, TValue>)", file="JsonSerializerCollectionsTests.cs"];
m6_517 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.PopulateReadOnlyTestClass.PopulateReadOnlyTestClass()", span="1093-1093", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.PopulateReadOnlyTestClass.PopulateReadOnlyTestClass()", file="JsonSerializerCollectionsTests.cs"];
m6_518 [label="NonReadOnlyList = new List<int> { 1 }", span="1095-1095", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.PopulateReadOnlyTestClass.PopulateReadOnlyTestClass()", file="JsonSerializerCollectionsTests.cs"];
m6_519 [label="NonReadOnlyDictionary = new Dictionary<string, int> { { ''first'', 2 } }", span="1096-1096", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.PopulateReadOnlyTestClass.PopulateReadOnlyTestClass()", file="JsonSerializerCollectionsTests.cs"];
m6_520 [label="Array = new[] { 3 }", span="1098-1098", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.PopulateReadOnlyTestClass.PopulateReadOnlyTestClass()", file="JsonSerializerCollectionsTests.cs"];
m6_521 [label="List = new ReadOnlyCollection<int>(new[] { 4 })", span="1100-1100", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.PopulateReadOnlyTestClass.PopulateReadOnlyTestClass()", file="JsonSerializerCollectionsTests.cs"];
m6_522 [label="Dictionary = new ReadOnlyDictionary<string, int>(new Dictionary<string, int> { { ''first'', 5 } })", span="1101-1101", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.PopulateReadOnlyTestClass.PopulateReadOnlyTestClass()", file="JsonSerializerCollectionsTests.cs"];
m6_523 [label="IReadOnlyCollection = new ReadOnlyCollection<int>(new[] { 6 })", span="1103-1103", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.PopulateReadOnlyTestClass.PopulateReadOnlyTestClass()", file="JsonSerializerCollectionsTests.cs"];
m6_524 [label="ReadOnlyCollection = new ReadOnlyCollection<int>(new[] { 7 })", span="1104-1104", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.PopulateReadOnlyTestClass.PopulateReadOnlyTestClass()", file="JsonSerializerCollectionsTests.cs"];
m6_525 [label="IReadOnlyList = new ReadOnlyCollection<int>(new[] { 8 })", span="1105-1105", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.PopulateReadOnlyTestClass.PopulateReadOnlyTestClass()", file="JsonSerializerCollectionsTests.cs"];
m6_526 [label="IReadOnlyDictionary = new ReadOnlyDictionary<string, int>(new Dictionary<string, int> { { ''first'', 9 } })", span="1107-1107", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.PopulateReadOnlyTestClass.PopulateReadOnlyTestClass()", file="JsonSerializerCollectionsTests.cs"];
m6_527 [label="ReadOnlyDictionary = new ReadOnlyDictionary<string, int>(new Dictionary<string, int> { { ''first'', 10 } })", span="1108-1108", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.PopulateReadOnlyTestClass.PopulateReadOnlyTestClass()", file="JsonSerializerCollectionsTests.cs"];
m6_528 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.PopulateReadOnlyTestClass.PopulateReadOnlyTestClass()", span="1093-1093", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.PopulateReadOnlyTestClass.PopulateReadOnlyTestClass()", file="JsonSerializerCollectionsTests.cs"];
m6_605 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeArray2D_WithTooFewItems()", span="1392-1392", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeArray2D_WithTooFewItems()", file="JsonSerializerCollectionsTests.cs"];
m6_606 [label="string json = @''{''''Before'''':''''Before!'''',''''Coordinates'''':[[1,1],[1],[2,1],[2,2]],''''After'''':''''After!''''}''", span="1394-1394", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeArray2D_WithTooFewItems()", file="JsonSerializerCollectionsTests.cs"];
m6_607 [label="ExceptionAssert.Throws<Exception>(() => JsonConvert.DeserializeObject<Array2D>(json), ''Cannot deserialize non-cubical array as multidimensional array.'')", span="1396-1396", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeArray2D_WithTooFewItems()", file="JsonSerializerCollectionsTests.cs"];
m6_608 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeArray2D_WithTooFewItems()", span="1392-1392", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeArray2D_WithTooFewItems()", file="JsonSerializerCollectionsTests.cs"];
m6_817 [label="Entry Newtonsoft.Json.Tests.TestObjects.ArticleCollection.ArticleCollection()", span="29-29", cluster="Newtonsoft.Json.Tests.TestObjects.ArticleCollection.ArticleCollection()", file="JsonSerializerCollectionsTests.cs"];
m6_417 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeComplexKeyValuePair()", span="876-876", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeComplexKeyValuePair()", file="JsonSerializerCollectionsTests.cs"];
m6_418 [label="DateTime dateTime = new DateTime(2000, 12, 1, 23, 1, 1, DateTimeKind.Utc)", span="878-878", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeComplexKeyValuePair()", file="JsonSerializerCollectionsTests.cs"];
m6_419 [label="List<KeyValuePair<string, WagePerson>> list = new List<KeyValuePair<string, WagePerson>>()", span="880-880", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeComplexKeyValuePair()", file="JsonSerializerCollectionsTests.cs"];
m6_420 [label="list.Add(new KeyValuePair<string, WagePerson>(''key1'', new WagePerson\r\n            {\r\n                BirthDate = dateTime,\r\n                Department = ''Department1'',\r\n                LastModified = dateTime,\r\n                HourlyWage = 1\r\n            }))", span="881-887", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeComplexKeyValuePair()", file="JsonSerializerCollectionsTests.cs"];
m6_421 [label="list.Add(new KeyValuePair<string, WagePerson>(''key2'', new WagePerson\r\n            {\r\n                BirthDate = dateTime,\r\n                Department = ''Department2'',\r\n                LastModified = dateTime,\r\n                HourlyWage = 2\r\n            }))", span="888-894", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeComplexKeyValuePair()", file="JsonSerializerCollectionsTests.cs"];
m6_422 [label="string json = JsonConvert.SerializeObject(list, Formatting.Indented)", span="896-896", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeComplexKeyValuePair()", file="JsonSerializerCollectionsTests.cs"];
m6_423 [label="StringAssert.AreEqual(@''[\r\n  {\r\n    ''''Key'''': ''''key1'''',\r\n    ''''Value'''': {\r\n      ''''HourlyWage'''': 1.0,\r\n      ''''Name'''': null,\r\n      ''''BirthDate'''': ''''2000-12-01T23:01:01Z'''',\r\n      ''''LastModified'''': ''''2000-12-01T23:01:01Z''''\r\n    }\r\n  },\r\n  {\r\n    ''''Key'''': ''''key2'''',\r\n    ''''Value'''': {\r\n      ''''HourlyWage'''': 2.0,\r\n      ''''Name'''': null,\r\n      ''''BirthDate'''': ''''2000-12-01T23:01:01Z'''',\r\n      ''''LastModified'''': ''''2000-12-01T23:01:01Z''''\r\n    }\r\n  }\r\n]'', json)", span="898-917", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeComplexKeyValuePair()", file="JsonSerializerCollectionsTests.cs"];
m6_424 [label="List<KeyValuePair<string, WagePerson>> result = JsonConvert.DeserializeObject<List<KeyValuePair<string, WagePerson>>>(json)", span="919-919", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeComplexKeyValuePair()", file="JsonSerializerCollectionsTests.cs"];
m6_425 [label="Assert.AreEqual(2, result.Count)", span="920-920", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeComplexKeyValuePair()", file="JsonSerializerCollectionsTests.cs"];
m6_426 [label="Assert.AreEqual(''key1'', result[0].Key)", span="921-921", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeComplexKeyValuePair()", file="JsonSerializerCollectionsTests.cs"];
m6_427 [label="Assert.AreEqual(1, result[0].Value.HourlyWage)", span="922-922", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeComplexKeyValuePair()", file="JsonSerializerCollectionsTests.cs"];
m6_428 [label="Assert.AreEqual(''key2'', result[1].Key)", span="923-923", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeComplexKeyValuePair()", file="JsonSerializerCollectionsTests.cs"];
m6_429 [label="Assert.AreEqual(2, result[1].Value.HourlyWage)", span="924-924", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeComplexKeyValuePair()", file="JsonSerializerCollectionsTests.cs"];
m6_430 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeComplexKeyValuePair()", span="876-876", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeComplexKeyValuePair()", file="JsonSerializerCollectionsTests.cs"];
m6_287 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializePrivateListConstructor()", span="611-611", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializePrivateListConstructor()", file="JsonSerializerCollectionsTests.cs"];
m6_288 [label="var list = JsonConvert.DeserializeObject<PrivateDefaultCtorWithIEnumerableCtorList<int>>(''[1,2]'')", span="613-613", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializePrivateListConstructor()", file="JsonSerializerCollectionsTests.cs"];
m6_289 [label="Assert.AreEqual(3, list.Count)", span="615-615", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializePrivateListConstructor()", file="JsonSerializerCollectionsTests.cs"];
m6_290 [label="Assert.AreEqual(1, list[0])", span="616-616", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializePrivateListConstructor()", file="JsonSerializerCollectionsTests.cs"];
m6_291 [label="Assert.AreEqual(2, list[1])", span="617-617", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializePrivateListConstructor()", file="JsonSerializerCollectionsTests.cs"];
m6_292 [label="Assert.AreEqual(0, list[2])", span="618-618", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializePrivateListConstructor()", file="JsonSerializerCollectionsTests.cs"];
m6_293 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializePrivateListConstructor()", span="611-611", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializePrivateListConstructor()", file="JsonSerializerCollectionsTests.cs"];
m6_902 [label="Entry System.Collections.Generic.IList<T>.IndexOf(T)", span="0-0", cluster="System.Collections.Generic.IList<T>.IndexOf(T)", file="JsonSerializerCollectionsTests.cs"];
m6_834 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeGenericList()", span="1893-1893", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeGenericList()", file="JsonSerializerCollectionsTests.cs"];
m6_835 [label="string json = @''[\r\n        {\r\n          ''''Name'''': ''''Product 1'''',\r\n          ''''ExpiryDate'''': ''''\/Date(978048000000)\/'''',\r\n          ''''Price'''': 99.95,\r\n          ''''Sizes'''': null\r\n        },\r\n        {\r\n          ''''Name'''': ''''Product 2'''',\r\n          ''''ExpiryDate'''': ''''\/Date(1248998400000)\/'''',\r\n          ''''Price'''': 12.50,\r\n          ''''Sizes'''': null\r\n        }\r\n      ]''", span="1895-1908", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeGenericList()", file="JsonSerializerCollectionsTests.cs"];
m6_836 [label="List<Product> products = JsonConvert.DeserializeObject<List<Product>>(json)", span="1910-1910", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeGenericList()", file="JsonSerializerCollectionsTests.cs"];
m6_837 [label="Product p1 = products[0]", span="1912-1912", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeGenericList()", file="JsonSerializerCollectionsTests.cs"];
m6_838 [label="Assert.AreEqual(2, products.Count)", span="1914-1914", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeGenericList()", file="JsonSerializerCollectionsTests.cs"];
m6_839 [label="Assert.AreEqual(''Product 1'', p1.Name)", span="1915-1915", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeGenericList()", file="JsonSerializerCollectionsTests.cs"];
m6_840 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeGenericList()", span="1893-1893", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeGenericList()", file="JsonSerializerCollectionsTests.cs"];
m6_1021 [label="Entry Newtonsoft.Json.Tests.Serialization.ReadOnlyCollectionWithArrayArgument<T>.RemoveAt(int)", span="2379-2379", cluster="Newtonsoft.Json.Tests.Serialization.ReadOnlyCollectionWithArrayArgument<T>.RemoveAt(int)", file="JsonSerializerCollectionsTests.cs"];
m6_1022 [label="throw new NotImplementedException();", span="2381-2381", cluster="Newtonsoft.Json.Tests.Serialization.ReadOnlyCollectionWithArrayArgument<T>.RemoveAt(int)", file="JsonSerializerCollectionsTests.cs"];
m6_1023 [label="Exit Newtonsoft.Json.Tests.Serialization.ReadOnlyCollectionWithArrayArgument<T>.RemoveAt(int)", span="2379-2379", cluster="Newtonsoft.Json.Tests.Serialization.ReadOnlyCollectionWithArrayArgument<T>.RemoveAt(int)", file="JsonSerializerCollectionsTests.cs"];
m6_349 [label="Entry System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0", cluster="System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)", file="JsonSerializerCollectionsTests.cs"];
m6_802 [label="Entry System.Collections.Generic.ICollection<T>.Add(T)", span="0-0", cluster="System.Collections.Generic.ICollection<T>.Add(T)", file="JsonSerializerCollectionsTests.cs"];
m6_38 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestCollectionPrivateParameterized.GetEnumerator()", span="118-118", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestCollectionPrivateParameterized.GetEnumerator()", file="JsonSerializerCollectionsTests.cs"];
m6_39 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestCollectionPrivateParameterized.GetEnumerator()", span="118-118", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestCollectionPrivateParameterized.GetEnumerator()", file="JsonSerializerCollectionsTests.cs"];
m6_841 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.ReadOnlyIntegerList()", span="1920-1920", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.ReadOnlyIntegerList()", file="JsonSerializerCollectionsTests.cs"];
m6_842 [label="ReadOnlyIntegerList l = new ReadOnlyIntegerList(new List<int>\r\n            {\r\n                1,\r\n                2,\r\n                3,\r\n                int.MaxValue\r\n            })", span="1922-1928", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.ReadOnlyIntegerList()", file="JsonSerializerCollectionsTests.cs"];
m6_843 [label="string json = JsonConvert.SerializeObject(l, Formatting.Indented)", span="1930-1930", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.ReadOnlyIntegerList()", file="JsonSerializerCollectionsTests.cs"];
m6_844 [label="StringAssert.AreEqual(@''[\r\n  1,\r\n  2,\r\n  3,\r\n  2147483647\r\n]'', json)", span="1932-1937", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.ReadOnlyIntegerList()", file="JsonSerializerCollectionsTests.cs"];
m6_845 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.ReadOnlyIntegerList()", span="1920-1920", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.ReadOnlyIntegerList()", file="JsonSerializerCollectionsTests.cs"];
m6_1002 [label="Entry System.NotImplementedException.NotImplementedException()", span="0-0", cluster="System.NotImplementedException.NotImplementedException()", file="JsonSerializerCollectionsTests.cs"];
m6_91 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestCollectionNonGeneric.TestCollectionNonGeneric(System.Collections.IEnumerable)", span="208-208", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestCollectionNonGeneric.TestCollectionNonGeneric(System.Collections.IEnumerable)", file="JsonSerializerCollectionsTests.cs"];
m6_92 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestCollectionNonGeneric.TestCollectionNonGeneric(System.Collections.IEnumerable)", span="208-208", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestCollectionNonGeneric.TestCollectionNonGeneric(System.Collections.IEnumerable)", file="JsonSerializerCollectionsTests.cs"];
m6_85 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CollectionJsonConstructorBadIEnumerableParameter()", span="197-197", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CollectionJsonConstructorBadIEnumerableParameter()", file="JsonSerializerCollectionsTests.cs"];
m6_86 [label="ExceptionAssert.Throws<JsonException>(\r\n                () => JsonConvert.SerializeObject(new TestCollectionBadIEnumerableParameter(null)),\r\n                ''Constructor for 'Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests+TestCollectionBadIEnumerableParameter' must have no parameters or a single parameter that implements 'System.Collections.Generic.IEnumerable`1[System.Int32]'.'')", span="199-201", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CollectionJsonConstructorBadIEnumerableParameter()", file="JsonSerializerCollectionsTests.cs"];
m6_87 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CollectionJsonConstructorBadIEnumerableParameter()", span="197-197", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CollectionJsonConstructorBadIEnumerableParameter()", file="JsonSerializerCollectionsTests.cs"];
m6_654 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeEmpty3DArray()", span="1457-1457", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeEmpty3DArray()", file="JsonSerializerCollectionsTests.cs"];
m6_655 [label="string json = @''{''''Before'''':''''Before!'''',''''Coordinates'''':[],''''After'''':''''After!''''}''", span="1459-1459", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeEmpty3DArray()", file="JsonSerializerCollectionsTests.cs"];
m6_656 [label="Array3D aa = JsonConvert.DeserializeObject<Array3D>(json)", span="1461-1461", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeEmpty3DArray()", file="JsonSerializerCollectionsTests.cs"];
m6_663 [label="Assert.AreEqual(json, after)", span="1471-1471", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeEmpty3DArray()", file="JsonSerializerCollectionsTests.cs"];
m6_657 [label="Assert.AreEqual(''Before!'', aa.Before)", span="1463-1463", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeEmpty3DArray()", file="JsonSerializerCollectionsTests.cs"];
m6_658 [label="Assert.AreEqual(''After!'', aa.After)", span="1464-1464", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeEmpty3DArray()", file="JsonSerializerCollectionsTests.cs"];
m6_659 [label="Assert.AreEqual(0, aa.Coordinates.GetLength(0))", span="1465-1465", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeEmpty3DArray()", file="JsonSerializerCollectionsTests.cs"];
m6_660 [label="Assert.AreEqual(0, aa.Coordinates.GetLength(1))", span="1466-1466", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeEmpty3DArray()", file="JsonSerializerCollectionsTests.cs"];
m6_661 [label="Assert.AreEqual(0, aa.Coordinates.GetLength(2))", span="1467-1467", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeEmpty3DArray()", file="JsonSerializerCollectionsTests.cs"];
m6_662 [label="string after = JsonConvert.SerializeObject(aa)", span="1469-1469", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeEmpty3DArray()", file="JsonSerializerCollectionsTests.cs"];
m6_664 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeEmpty3DArray()", span="1457-1457", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeEmpty3DArray()", file="JsonSerializerCollectionsTests.cs"];
m6_350 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CustomReadOnlyDictionary<TKey, TValue>.TryGetValue(TKey, out TValue)", span="721-721", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CustomReadOnlyDictionary<TKey, TValue>.TryGetValue(TKey, out TValue)", file="JsonSerializerCollectionsTests.cs"];
m6_351 [label="return _dictionary.TryGetValue(key, out value);", span="723-723", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CustomReadOnlyDictionary<TKey, TValue>.TryGetValue(TKey, out TValue)", file="JsonSerializerCollectionsTests.cs"];
m6_352 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CustomReadOnlyDictionary<TKey, TValue>.TryGetValue(TKey, out TValue)", span="721-721", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CustomReadOnlyDictionary<TKey, TValue>.TryGetValue(TKey, out TValue)", file="JsonSerializerCollectionsTests.cs"];
m6_482 [label="Entry System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.ConcurrentDictionary(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>)", span="0-0", cluster="System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.ConcurrentDictionary(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>)", file="JsonSerializerCollectionsTests.cs"];
m6_864 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.NonDefaultConstructor_DuplicateKeyInDictionary_Replace()", span="1970-1970", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.NonDefaultConstructor_DuplicateKeyInDictionary_Replace()", file="JsonSerializerCollectionsTests.cs"];
m6_865 [label="string json = @''{ ''''user'''':''''bpan'''', ''''Person'''':{ ''''groups'''':''''replaced!'''', ''''domain'''':''''adm'''', ''''mail'''':''''bpan@sdu.dk'''', ''''sn'''':''''Pan'''', ''''gn'''':''''Benzhi'''', ''''cn'''':''''Benzhi Pan'''', ''''eo'''':''''BQHLJaVTMr0eWsi1jaIut4Ls/pSuMeNEmsWfWsfKo='''', ''''guid'''':''''9A38CE8E5B288942A8DA415CF5E687'''', ''''employeenumber'''':''''2674'''', ''''omk1'''':''''930'''', ''''language'''':''''da'''' }, ''''XMLResponce'''':''''<?xml version='1.0' encoding='iso-8859-1' ?>\n<cas:serviceResponse xmlns:cas='http://www.yale.edu/tp/cas'>\n\t<cas:authenticationSuccess>\n\t\t<cas:user>bpan</cas:user>\n\t\t<norEduPerson>\n\t\t\t<groups>FNC-PRI-APP-SUNDB-EDOR-A,FNC-RI-APP-SUB-EDITOR-B</groups>\n\t\t\t<domain>adm</domain>\n\t\t\t<mail>bpan@sdu.dk</mail>\n\t\t\t<sn>Pan</sn>\n\t\t\t<gn>Benzhi</gn>\n\t\t\t<cn>Benzhi Pan</cn>\n\t\t\t<eo>BQHLJaVTMr0eWsi1jaIut4Lsfr/pSuMeNEmsWfWsfKo=</eo>\n\t\t\t<guid>9A38CE8E5B288942A8DA415C2C687</guid>\n\t\t\t<employeenumber>274</employeenumber>\n\t\t\t<omk1>930</omk1>\n\t\t\t<language>da</language>\n\t\t</norEduPerson>\n\t</cas:authenticationSuccess>\n</cas:serviceResponse>\n'''', ''''Language'''':1, ''''Groups'''':[ ''''FNC-PRI-APP-SNDB-EDOR-A'''', ''''FNC-PI-APP-SUNDB-EDOR-B'''' ], ''''Domain'''':''''adm'''', ''''Mail'''':''''bpan@sdu.dk'''', ''''Surname'''':''''Pan'''', ''''Givenname'''':''''Benzhi'''', ''''CommonName'''':''''Benzhi Pan'''', ''''OrganizationName'''':null }''", span="1972-1972", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.NonDefaultConstructor_DuplicateKeyInDictionary_Replace()", file="JsonSerializerCollectionsTests.cs"];
m6_866 [label="var result = JsonConvert.DeserializeObject<CASResponce>(json)", span="1974-1974", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.NonDefaultConstructor_DuplicateKeyInDictionary_Replace()", file="JsonSerializerCollectionsTests.cs"];
m6_867 [label="Assert.AreEqual(''replaced!'', result.Person[''groups''])", span="1976-1976", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.NonDefaultConstructor_DuplicateKeyInDictionary_Replace()", file="JsonSerializerCollectionsTests.cs"];
m6_868 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.NonDefaultConstructor_DuplicateKeyInDictionary_Replace()", span="1970-1970", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.NonDefaultConstructor_DuplicateKeyInDictionary_Replace()", file="JsonSerializerCollectionsTests.cs"];
m6_914 [label="Entry System.Collections.Generic.IList<T>.RemoveAt(int)", span="0-0", cluster="System.Collections.Generic.IList<T>.RemoveAt(int)", file="JsonSerializerCollectionsTests.cs"];
m6_625 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeArray3D_WithTooManyItems()", span="1420-1420", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeArray3D_WithTooManyItems()", file="JsonSerializerCollectionsTests.cs"];
m6_626 [label="string json = @''{''''Before'''':''''Before!'''',''''Coordinates'''':[[[1,1,1],[1,1,2,1]],[[1,2,1],[1,2,2]],[[2,1,1],[2,1,2]],[[2,2,1],[2,2,2]]],''''After'''':''''After!''''}''", span="1422-1422", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeArray3D_WithTooManyItems()", file="JsonSerializerCollectionsTests.cs"];
m6_627 [label="ExceptionAssert.Throws<Exception>(() => JsonConvert.DeserializeObject<Array3D>(json), ''Cannot deserialize non-cubical array as multidimensional array.'')", span="1424-1424", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeArray3D_WithTooManyItems()", file="JsonSerializerCollectionsTests.cs"];
m6_628 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeArray3D_WithTooManyItems()", span="1420-1420", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeArray3D_WithTooManyItems()", file="JsonSerializerCollectionsTests.cs"];
m6_375 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeCustomReadOnlyCollection()", span="796-796", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeCustomReadOnlyCollection()", file="JsonSerializerCollectionsTests.cs"];
m6_376 [label="IList<int> l = new List<int>\r\n            {\r\n                1,\r\n                2,\r\n                3\r\n            }", span="798-803", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeCustomReadOnlyCollection()", file="JsonSerializerCollectionsTests.cs"];
m6_377 [label="CustomReadOnlyCollection<int> list = new CustomReadOnlyCollection<int>(l)", span="805-805", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeCustomReadOnlyCollection()", file="JsonSerializerCollectionsTests.cs"];
m6_378 [label="string json = JsonConvert.SerializeObject(list, Formatting.Indented)", span="807-807", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeCustomReadOnlyCollection()", file="JsonSerializerCollectionsTests.cs"];
m6_379 [label="StringAssert.AreEqual(@''[\r\n  1,\r\n  2,\r\n  3\r\n]'', json)", span="808-812", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeCustomReadOnlyCollection()", file="JsonSerializerCollectionsTests.cs"];
m6_380 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeCustomReadOnlyCollection()", span="796-796", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.SerializeCustomReadOnlyCollection()", file="JsonSerializerCollectionsTests.cs"];
m6_204 [label="Entry Newtonsoft.Json.Tests.StringAssert.AreEqual(string, string)", span="338-338", cluster="Newtonsoft.Json.Tests.StringAssert.AreEqual(string, string)", file="JsonSerializerCollectionsTests.cs"];
m6_861 [label="Entry lambda expression", span="1962-1965", cluster="lambda expression", file="JsonSerializerCollectionsTests.cs"];
m6_80 [label="Entry lambda expression", span="184-184", cluster="lambda expression", file="JsonSerializerCollectionsTests.cs"];
m6_81 [label="JsonConvert.SerializeObject(new TestCollectionMultipleParameters(null, null))", span="184-184", cluster="lambda expression", file="JsonSerializerCollectionsTests.cs"];
m6_82 [label="Exit lambda expression", span="184-184", cluster="lambda expression", file="JsonSerializerCollectionsTests.cs"];
m6_88 [label="Entry lambda expression", span="200-200", cluster="lambda expression", file="JsonSerializerCollectionsTests.cs"];
m6_89 [label="JsonConvert.SerializeObject(new TestCollectionBadIEnumerableParameter(null))", span="200-200", cluster="lambda expression", file="JsonSerializerCollectionsTests.cs"];
m6_90 [label="Exit lambda expression", span="200-200", cluster="lambda expression", file="JsonSerializerCollectionsTests.cs"];
m6_105 [label="Entry lambda expression", span="235-235", cluster="lambda expression", file="JsonSerializerCollectionsTests.cs"];
m6_106 [label="k.Key", span="235-235", cluster="lambda expression", file="JsonSerializerCollectionsTests.cs"];
m6_107 [label="Exit lambda expression", span="235-235", cluster="lambda expression", file="JsonSerializerCollectionsTests.cs"];
m6_108 [label="Entry lambda expression", span="235-235", cluster="lambda expression", file="JsonSerializerCollectionsTests.cs"];
m6_109 [label="k.Value", span="235-235", cluster="lambda expression", file="JsonSerializerCollectionsTests.cs"];
m6_110 [label="Exit lambda expression", span="235-235", cluster="lambda expression", file="JsonSerializerCollectionsTests.cs"];
m6_146 [label="Entry lambda expression", span="297-297", cluster="lambda expression", file="JsonSerializerCollectionsTests.cs"];
m6_147 [label="JsonConvert.SerializeObject(new TestDictionaryMultipleParameters(null, null))", span="297-297", cluster="lambda expression", file="JsonSerializerCollectionsTests.cs"];
m6_148 [label="Exit lambda expression", span="297-297", cluster="lambda expression", file="JsonSerializerCollectionsTests.cs"];
m6_154 [label="Entry lambda expression", span="313-313", cluster="lambda expression", file="JsonSerializerCollectionsTests.cs"];
m6_155 [label="JsonConvert.SerializeObject(new TestDictionaryBadIEnumerableParameter(null))", span="313-313", cluster="lambda expression", file="JsonSerializerCollectionsTests.cs"];
m6_156 [label="Exit lambda expression", span="313-313", cluster="lambda expression", file="JsonSerializerCollectionsTests.cs"];
m6_170 [label="Entry lambda expression", span="350-350", cluster="lambda expression", file="JsonSerializerCollectionsTests.cs"];
m6_171 [label="JsonConvert.DeserializeObject<NameValueCollectionTestClass>(''{Collection:[]}'')", span="350-350", cluster="lambda expression", file="JsonSerializerCollectionsTests.cs"];
m6_172 [label="Exit lambda expression", span="350-350", cluster="lambda expression", file="JsonSerializerCollectionsTests.cs"];
m6_268 [label="JsonConvert.DeserializeObject<EnumerableClassFailure<string>>(json)", span="574-574", cluster="lambda expression", file="JsonSerializerCollectionsTests.cs"];
m6_267 [label="Entry lambda expression", span="574-574", cluster="lambda expression", file="JsonSerializerCollectionsTests.cs"];
m6_269 [label="Exit lambda expression", span="574-574", cluster="lambda expression", file="JsonSerializerCollectionsTests.cs"];
m6_279 [label="Entry lambda expression", span="587-587", cluster="lambda expression", file="JsonSerializerCollectionsTests.cs"];
m6_280 [label="JsonConvert.DeserializeObject<PrivateDefaultCtorList<int>>(''[1,2]'')", span="587-587", cluster="lambda expression", file="JsonSerializerCollectionsTests.cs"];
m6_281 [label="Exit lambda expression", span="587-587", cluster="lambda expression", file="JsonSerializerCollectionsTests.cs"];
m6_515 [label="JsonConvert.DeserializeObject<IList<KeyValuePair<string, IList<string>>>>(json)", span="1072-1072", cluster="lambda expression", file="JsonSerializerCollectionsTests.cs"];
m6_514 [label="Entry lambda expression", span="1072-1072", cluster="lambda expression", file="JsonSerializerCollectionsTests.cs"];
m6_516 [label="Exit lambda expression", span="1072-1072", cluster="lambda expression", file="JsonSerializerCollectionsTests.cs"];
m6_603 [label="JsonConvert.DeserializeObject<Array2D>(json)", span="1388-1388", cluster="lambda expression", file="JsonSerializerCollectionsTests.cs"];
m6_602 [label="Entry lambda expression", span="1388-1388", cluster="lambda expression", file="JsonSerializerCollectionsTests.cs"];
m6_604 [label="Exit lambda expression", span="1388-1388", cluster="lambda expression", file="JsonSerializerCollectionsTests.cs"];
m6_610 [label="JsonConvert.DeserializeObject<Array2D>(json)", span="1396-1396", cluster="lambda expression", file="JsonSerializerCollectionsTests.cs"];
m6_609 [label="Entry lambda expression", span="1396-1396", cluster="lambda expression", file="JsonSerializerCollectionsTests.cs"];
m6_611 [label="Exit lambda expression", span="1396-1396", cluster="lambda expression", file="JsonSerializerCollectionsTests.cs"];
m6_630 [label="JsonConvert.DeserializeObject<Array3D>(json)", span="1424-1424", cluster="lambda expression", file="JsonSerializerCollectionsTests.cs"];
m6_629 [label="Entry lambda expression", span="1424-1424", cluster="lambda expression", file="JsonSerializerCollectionsTests.cs"];
m6_631 [label="Exit lambda expression", span="1424-1424", cluster="lambda expression", file="JsonSerializerCollectionsTests.cs"];
m6_637 [label="JsonConvert.DeserializeObject<Array3D>(json)", span="1432-1432", cluster="lambda expression", file="JsonSerializerCollectionsTests.cs"];
m6_636 [label="Entry lambda expression", span="1432-1432", cluster="lambda expression", file="JsonSerializerCollectionsTests.cs"];
m6_638 [label="Exit lambda expression", span="1432-1432", cluster="lambda expression", file="JsonSerializerCollectionsTests.cs"];
m6_644 [label="JsonConvert.DeserializeObject<Array3D>(json)", span="1440-1440", cluster="lambda expression", file="JsonSerializerCollectionsTests.cs"];
m6_643 [label="Entry lambda expression", span="1440-1440", cluster="lambda expression", file="JsonSerializerCollectionsTests.cs"];
m6_645 [label="Exit lambda expression", span="1440-1440", cluster="lambda expression", file="JsonSerializerCollectionsTests.cs"];
m6_670 [label="JsonConvert.DeserializeObject<Array3D>(json)", span="1479-1479", cluster="lambda expression", file="JsonSerializerCollectionsTests.cs"];
m6_669 [label="Entry lambda expression", span="1479-1479", cluster="lambda expression", file="JsonSerializerCollectionsTests.cs"];
m6_671 [label="Exit lambda expression", span="1479-1479", cluster="lambda expression", file="JsonSerializerCollectionsTests.cs"];
m6_677 [label="JsonConvert.DeserializeObject<Array3D>(json)", span="1487-1487", cluster="lambda expression", file="JsonSerializerCollectionsTests.cs"];
m6_676 [label="Entry lambda expression", span="1487-1487", cluster="lambda expression", file="JsonSerializerCollectionsTests.cs"];
m6_678 [label="Exit lambda expression", span="1487-1487", cluster="lambda expression", file="JsonSerializerCollectionsTests.cs"];
m6_862 [label="JsonConvert.DeserializeObject<ReadOnlyCollectionWithArrayArgument<double>>(json)", span="1964-1964", cluster="lambda expression", file="JsonSerializerCollectionsTests.cs"];
m6_863 [label="Exit lambda expression", span="1962-1965", cluster="lambda expression", file="JsonSerializerCollectionsTests.cs"];
m6_0 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DoubleKey_WholeValue()", span="66-66", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DoubleKey_WholeValue()", file="JsonSerializerCollectionsTests.cs"];
m6_1 [label="Dictionary<double, int> dictionary = new Dictionary<double, int> { { 1d, 1 } }", span="68-68", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DoubleKey_WholeValue()", file="JsonSerializerCollectionsTests.cs", color=green, community=0];
m6_2 [label="string output = JsonConvert.SerializeObject(dictionary)", span="69-69", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DoubleKey_WholeValue()", file="JsonSerializerCollectionsTests.cs", color=green, community=0];
m6_3 [label="Assert.AreEqual(@''{''''1'''':1}'', output)", span="70-70", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DoubleKey_WholeValue()", file="JsonSerializerCollectionsTests.cs", color=green, community=0];
m6_4 [label="Dictionary<double, int> deserializedValue = JsonConvert.DeserializeObject<Dictionary<double, int>>(output)", span="72-72", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DoubleKey_WholeValue()", file="JsonSerializerCollectionsTests.cs", color=green, community=0];
m6_5 [label="Assert.AreEqual(1d, deserializedValue.First().Key)", span="73-73", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DoubleKey_WholeValue()", file="JsonSerializerCollectionsTests.cs", color=green, community=0];
m6_6 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DoubleKey_WholeValue()", span="66-66", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DoubleKey_WholeValue()", file="JsonSerializerCollectionsTests.cs"];
m6_307 [label="Entry object.GetType()", span="0-0", cluster="object.GetType()", file="JsonSerializerCollectionsTests.cs"];
m6_536 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.PopulateReadOnlyCollections()", span="1154-1154", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.PopulateReadOnlyCollections()", file="JsonSerializerCollectionsTests.cs"];
m6_537 [label="string json = @''{\r\n  ''''NonReadOnlyList'''': [\r\n    11\r\n  ],\r\n  ''''NonReadOnlyDictionary'''': {\r\n    ''''first'''': 12\r\n  },\r\n  ''''Array'''': [\r\n    13\r\n  ],\r\n  ''''List'''': [\r\n    14\r\n  ],\r\n  ''''Dictionary'''': {\r\n    ''''first'''': 15\r\n  },\r\n  ''''IReadOnlyCollection'''': [\r\n    16\r\n  ],\r\n  ''''ReadOnlyCollection'''': [\r\n    17\r\n  ],\r\n  ''''IReadOnlyList'''': [\r\n    18\r\n  ],\r\n  ''''IReadOnlyDictionary'''': {\r\n    ''''first'''': 19\r\n  },\r\n  ''''ReadOnlyDictionary'''': {\r\n    ''''first'''': 20\r\n  }\r\n}''", span="1156-1187", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.PopulateReadOnlyCollections()", file="JsonSerializerCollectionsTests.cs"];
m6_538 [label="var c2 = JsonConvert.DeserializeObject<PopulateReadOnlyTestClass>(json)", span="1189-1189", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.PopulateReadOnlyCollections()", file="JsonSerializerCollectionsTests.cs"];
m6_539 [label="Assert.AreEqual(1, c2.NonReadOnlyDictionary.Count)", span="1191-1191", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.PopulateReadOnlyCollections()", file="JsonSerializerCollectionsTests.cs"];
m6_540 [label="Assert.AreEqual(12, c2.NonReadOnlyDictionary[''first''])", span="1192-1192", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.PopulateReadOnlyCollections()", file="JsonSerializerCollectionsTests.cs"];
m6_541 [label="Assert.AreEqual(2, c2.NonReadOnlyList.Count)", span="1194-1194", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.PopulateReadOnlyCollections()", file="JsonSerializerCollectionsTests.cs"];
m6_542 [label="Assert.AreEqual(1, c2.NonReadOnlyList[0])", span="1195-1195", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.PopulateReadOnlyCollections()", file="JsonSerializerCollectionsTests.cs"];
m6_543 [label="Assert.AreEqual(11, c2.NonReadOnlyList[1])", span="1196-1196", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.PopulateReadOnlyCollections()", file="JsonSerializerCollectionsTests.cs"];
m6_544 [label="Assert.AreEqual(1, c2.Array.Count)", span="1198-1198", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.PopulateReadOnlyCollections()", file="JsonSerializerCollectionsTests.cs"];
m6_545 [label="Assert.AreEqual(13, c2.Array[0])", span="1199-1199", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.PopulateReadOnlyCollections()", file="JsonSerializerCollectionsTests.cs"];
m6_546 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.PopulateReadOnlyCollections()", span="1154-1154", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.PopulateReadOnlyCollections()", file="JsonSerializerCollectionsTests.cs"];
m6_929 [label="Entry Newtonsoft.Json.Tests.Serialization.CASResponce.ExtractGroups()", span="2171-2171", cluster="Newtonsoft.Json.Tests.Serialization.CASResponce.ExtractGroups()", file="JsonSerializerCollectionsTests.cs"];
m6_931 [label="this.Groups = new List<string>()", span="2173-2173", cluster="Newtonsoft.Json.Tests.Serialization.CASResponce.ExtractGroups()", file="JsonSerializerCollectionsTests.cs"];
m6_932 [label="this.Person.ContainsKey(''groups'')", span="2174-2174", cluster="Newtonsoft.Json.Tests.Serialization.CASResponce.ExtractGroups()", file="JsonSerializerCollectionsTests.cs"];
m6_933 [label="string groupsString = this.Person[''groups'']", span="2176-2176", cluster="Newtonsoft.Json.Tests.Serialization.CASResponce.ExtractGroups()", file="JsonSerializerCollectionsTests.cs"];
m6_934 [label="string[] stringList = groupsString.Split(',')", span="2177-2177", cluster="Newtonsoft.Json.Tests.Serialization.CASResponce.ExtractGroups()", file="JsonSerializerCollectionsTests.cs"];
m6_935 [label=stringList, span="2179-2179", cluster="Newtonsoft.Json.Tests.Serialization.CASResponce.ExtractGroups()", file="JsonSerializerCollectionsTests.cs"];
m6_936 [label="this.Groups.Add(group)", span="2181-2181", cluster="Newtonsoft.Json.Tests.Serialization.CASResponce.ExtractGroups()", file="JsonSerializerCollectionsTests.cs"];
m6_937 [label="Exit Newtonsoft.Json.Tests.Serialization.CASResponce.ExtractGroups()", span="2171-2171", cluster="Newtonsoft.Json.Tests.Serialization.CASResponce.ExtractGroups()", file="JsonSerializerCollectionsTests.cs"];
m6_846 [label="Entry Newtonsoft.Json.Tests.Serialization.ReadOnlyIntegerList.ReadOnlyIntegerList(System.Collections.Generic.List<int>)", span="2396-2396", cluster="Newtonsoft.Json.Tests.Serialization.ReadOnlyIntegerList.ReadOnlyIntegerList(System.Collections.Generic.List<int>)", file="JsonSerializerCollectionsTests.cs"];
m6_1024 [label="_list = l", span="2398-2398", cluster="Newtonsoft.Json.Tests.Serialization.ReadOnlyIntegerList.ReadOnlyIntegerList(System.Collections.Generic.List<int>)", file="JsonSerializerCollectionsTests.cs"];
m6_1025 [label="Exit Newtonsoft.Json.Tests.Serialization.ReadOnlyIntegerList.ReadOnlyIntegerList(System.Collections.Generic.List<int>)", span="2396-2396", cluster="Newtonsoft.Json.Tests.Serialization.ReadOnlyIntegerList.ReadOnlyIntegerList(System.Collections.Generic.List<int>)", file="JsonSerializerCollectionsTests.cs"];
m6_1062 [label="Entry Newtonsoft.Json.Tests.Serialization.StringAppenderConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", span="2519-2519", cluster="Newtonsoft.Json.Tests.Serialization.StringAppenderConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", file="JsonSerializerCollectionsTests.cs"];
m6_1063 [label="writer.WriteValue(value)", span="2521-2521", cluster="Newtonsoft.Json.Tests.Serialization.StringAppenderConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", file="JsonSerializerCollectionsTests.cs"];
m6_1064 [label="Exit Newtonsoft.Json.Tests.Serialization.StringAppenderConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", span="2519-2519", cluster="Newtonsoft.Json.Tests.Serialization.StringAppenderConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", file="JsonSerializerCollectionsTests.cs"];
m6_598 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeArray2D_WithTooManyItems()", span="1384-1384", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeArray2D_WithTooManyItems()", file="JsonSerializerCollectionsTests.cs"];
m6_599 [label="string json = @''{''''Before'''':''''Before!'''',''''Coordinates'''':[[1,1],[1,2,3],[2,1],[2,2]],''''After'''':''''After!''''}''", span="1386-1386", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeArray2D_WithTooManyItems()", file="JsonSerializerCollectionsTests.cs"];
m6_600 [label="ExceptionAssert.Throws<Exception>(() => JsonConvert.DeserializeObject<Array2D>(json), ''Cannot deserialize non-cubical array as multidimensional array.'')", span="1388-1388", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeArray2D_WithTooManyItems()", file="JsonSerializerCollectionsTests.cs"];
m6_601 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeArray2D_WithTooManyItems()", span="1384-1384", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeArray2D_WithTooManyItems()", file="JsonSerializerCollectionsTests.cs"];
m6_573 [label="Entry Newtonsoft.Json.Tests.Serialization.Array3DWithConverter.Array3DWithConverter()", span="2432-2432", cluster="Newtonsoft.Json.Tests.Serialization.Array3DWithConverter.Array3DWithConverter()", file="JsonSerializerCollectionsTests.cs"];
m6_124 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestDictionaryPrivate.TestDictionaryPrivate()", span="259-259", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestDictionaryPrivate.TestDictionaryPrivate()", file="JsonSerializerCollectionsTests.cs"];
m6_125 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestDictionaryPrivate.TestDictionaryPrivate()", span="259-259", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestDictionaryPrivate.TestDictionaryPrivate()", file="JsonSerializerCollectionsTests.cs"];
m6_55 [label="Entry System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", span="0-0", cluster="System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", file="JsonSerializerCollectionsTests.cs"];
m6_240 [label="Entry System.Collections.Generic.IEnumerable<T>.GetEnumerator()", span="0-0", cluster="System.Collections.Generic.IEnumerable<T>.GetEnumerator()", file="JsonSerializerCollectionsTests.cs"];
m6_336 [label="Entry Newtonsoft.Json.Tests.CustomAssert.IsInstanceOfType(System.Type, object)", span="311-311", cluster="Newtonsoft.Json.Tests.CustomAssert.IsInstanceOfType(System.Type, object)", file="JsonSerializerCollectionsTests.cs"];
m6_892 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MyClass.CopyTo(string[], int)", span="2050-2050", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MyClass.CopyTo(string[], int)", file="JsonSerializerCollectionsTests.cs"];
m6_893 [label="((IList<string>)_storage).CopyTo(array, arrayIndex)", span="2052-2052", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MyClass.CopyTo(string[], int)", file="JsonSerializerCollectionsTests.cs"];
m6_894 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MyClass.CopyTo(string[], int)", span="2050-2050", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MyClass.CopyTo(string[], int)", file="JsonSerializerCollectionsTests.cs"];
m6_783 [label="Entry System.IO.StringReader.StringReader(string)", span="0-0", cluster="System.IO.StringReader.StringReader(string)", file="JsonSerializerCollectionsTests.cs"];
m6_895 [label="Entry System.Collections.Generic.ICollection<T>.CopyTo(T[], int)", span="0-0", cluster="System.Collections.Generic.ICollection<T>.CopyTo(T[], int)", file="JsonSerializerCollectionsTests.cs"];
m6_337 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeReadOnlyDictionary()", span="692-692", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeReadOnlyDictionary()", file="JsonSerializerCollectionsTests.cs"];
m6_338 [label="ReadOnlyDictionary<string, int> dic = JsonConvert.DeserializeObject<ReadOnlyDictionary<string, int>>(''{'one':1,'two':2}'')", span="694-694", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeReadOnlyDictionary()", file="JsonSerializerCollectionsTests.cs"];
m6_339 [label="Assert.AreEqual(2, dic.Count)", span="696-696", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeReadOnlyDictionary()", file="JsonSerializerCollectionsTests.cs"];
m6_340 [label="Assert.AreEqual(1, dic[''one''])", span="698-698", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeReadOnlyDictionary()", file="JsonSerializerCollectionsTests.cs"];
m6_341 [label="Assert.AreEqual(2, dic[''two''])", span="699-699", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeReadOnlyDictionary()", file="JsonSerializerCollectionsTests.cs"];
m6_342 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeReadOnlyDictionary()", span="692-692", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeReadOnlyDictionary()", file="JsonSerializerCollectionsTests.cs"];
m6_585 [label="Entry System.Array.GetLength(int)", span="0-0", cluster="System.Array.GetLength(int)", file="JsonSerializerCollectionsTests.cs"];
m6_764 [label="Entry Newtonsoft.Json.Tests.TestObjects.PhoneNumber.PhoneNumber(string)", span="31-31", cluster="Newtonsoft.Json.Tests.TestObjects.PhoneNumber.PhoneNumber(string)", file="JsonSerializerCollectionsTests.cs"];
m6_718 [label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.GetTypeName(System.Type, Newtonsoft.Json.TypeNameAssemblyFormatHandling, Newtonsoft.Json.Serialization.ISerializationBinder)", span="147-147", cluster="Newtonsoft.Json.Utilities.ReflectionUtils.GetTypeName(System.Type, Newtonsoft.Json.TypeNameAssemblyFormatHandling, Newtonsoft.Json.Serialization.ISerializationBinder)", file="JsonSerializerCollectionsTests.cs"];
m6_29 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="JsonSerializerCollectionsTests.cs"];
m6_392 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.GenericListTestClass.GenericListTestClass()", span="836-836", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.GenericListTestClass.GenericListTestClass()", file="JsonSerializerCollectionsTests.cs"];
m6_393 [label="GenericList = new List<string>()", span="838-838", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.GenericListTestClass.GenericListTestClass()", file="JsonSerializerCollectionsTests.cs"];
m6_394 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.GenericListTestClass.GenericListTestClass()", span="836-836", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.GenericListTestClass.GenericListTestClass()", file="JsonSerializerCollectionsTests.cs"];
m6_860 [label="Entry Newtonsoft.Json.Tests.Serialization.ReadOnlyCollectionWithArrayArgument<T>.ReadOnlyCollectionWithArrayArgument(T[])", span="2327-2327", cluster="Newtonsoft.Json.Tests.Serialization.ReadOnlyCollectionWithArrayArgument<T>.ReadOnlyCollectionWithArrayArgument(T[])", file="JsonSerializerCollectionsTests.cs"];
m6_991 [label="_values = args ?? (IList<T>)new List<T>()", span="2329-2329", cluster="Newtonsoft.Json.Tests.Serialization.ReadOnlyCollectionWithArrayArgument<T>.ReadOnlyCollectionWithArrayArgument(T[])", file="JsonSerializerCollectionsTests.cs"];
m6_992 [label="Exit Newtonsoft.Json.Tests.Serialization.ReadOnlyCollectionWithArrayArgument<T>.ReadOnlyCollectionWithArrayArgument(T[])", span="2327-2327", cluster="Newtonsoft.Json.Tests.Serialization.ReadOnlyCollectionWithArrayArgument<T>.ReadOnlyCollectionWithArrayArgument(T[])", file="JsonSerializerCollectionsTests.cs"];
m6_103 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestDictionaryPrivateParameterized.TestDictionaryPrivateParameterized(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, int>>)", span="234-234", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestDictionaryPrivateParameterized.TestDictionaryPrivateParameterized(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, int>>)", file="JsonSerializerCollectionsTests.cs"];
m6_104 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestDictionaryPrivateParameterized.TestDictionaryPrivateParameterized(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, int>>)", span="234-234", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestDictionaryPrivateParameterized.TestDictionaryPrivateParameterized(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, int>>)", file="JsonSerializerCollectionsTests.cs"];
m6_126 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestDictionaryPrivate.Create()", span="263-263", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestDictionaryPrivate.Create()", file="JsonSerializerCollectionsTests.cs"];
m6_127 [label="return new TestDictionaryPrivate();", span="265-265", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestDictionaryPrivate.Create()", file="JsonSerializerCollectionsTests.cs"];
m6_128 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestDictionaryPrivate.Create()", span="263-263", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestDictionaryPrivate.Create()", file="JsonSerializerCollectionsTests.cs"];
m6_190 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.NonZeroBasedArray()", span="407-407", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.NonZeroBasedArray()", file="JsonSerializerCollectionsTests.cs"];
m6_191 [label="var onebasedArray = Array.CreateInstance(typeof(string), new[] { 3 }, new[] { 2 })", span="409-409", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.NonZeroBasedArray()", file="JsonSerializerCollectionsTests.cs"];
m6_192 [label="var i = onebasedArray.GetLowerBound(0)", span="411-411", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.NonZeroBasedArray()", file="JsonSerializerCollectionsTests.cs"];
m6_193 [label="i <= onebasedArray.GetUpperBound(0)", span="411-411", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.NonZeroBasedArray()", file="JsonSerializerCollectionsTests.cs"];
m6_194 [label="onebasedArray.SetValue(i.ToString(CultureInfo.InvariantCulture), new[] { i, })", span="413-413", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.NonZeroBasedArray()", file="JsonSerializerCollectionsTests.cs"];
m6_196 [label="string output = JsonConvert.SerializeObject(onebasedArray, Formatting.Indented)", span="416-416", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.NonZeroBasedArray()", file="JsonSerializerCollectionsTests.cs"];
m6_195 [label="i++", span="411-411", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.NonZeroBasedArray()", file="JsonSerializerCollectionsTests.cs"];
m6_197 [label="StringAssert.AreEqual(@''[\r\n  ''''2'''',\r\n  ''''3'''',\r\n  ''''4''''\r\n]'', output)", span="418-422", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.NonZeroBasedArray()", file="JsonSerializerCollectionsTests.cs"];
m6_198 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.NonZeroBasedArray()", span="407-407", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.NonZeroBasedArray()", file="JsonSerializerCollectionsTests.cs"];
m6_483 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeKeyValuePairArray()", span="1031-1031", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeKeyValuePairArray()", file="JsonSerializerCollectionsTests.cs"];
m6_484 [label="string json = @''[ { ''''Value'''': [ ''''1'''', ''''2'''' ], ''''Key'''': ''''aaa'''', ''''BadContent'''': [ 0 ] }, { ''''Value'''': [ ''''3'''', ''''4'''' ], ''''Key'''': ''''bbb'''' } ]''", span="1033-1033", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeKeyValuePairArray()", file="JsonSerializerCollectionsTests.cs"];
m6_485 [label="IList<KeyValuePair<string, IList<string>>> values = JsonConvert.DeserializeObject<IList<KeyValuePair<string, IList<string>>>>(json)", span="1035-1035", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeKeyValuePairArray()", file="JsonSerializerCollectionsTests.cs"];
m6_486 [label="Assert.AreEqual(2, values.Count)", span="1037-1037", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeKeyValuePairArray()", file="JsonSerializerCollectionsTests.cs"];
m6_487 [label="Assert.AreEqual(''aaa'', values[0].Key)", span="1038-1038", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeKeyValuePairArray()", file="JsonSerializerCollectionsTests.cs"];
m6_488 [label="Assert.AreEqual(2, values[0].Value.Count)", span="1039-1039", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeKeyValuePairArray()", file="JsonSerializerCollectionsTests.cs"];
m6_489 [label="Assert.AreEqual(''1'', values[0].Value[0])", span="1040-1040", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeKeyValuePairArray()", file="JsonSerializerCollectionsTests.cs"];
m6_490 [label="Assert.AreEqual(''2'', values[0].Value[1])", span="1041-1041", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeKeyValuePairArray()", file="JsonSerializerCollectionsTests.cs"];
m6_491 [label="Assert.AreEqual(''bbb'', values[1].Key)", span="1042-1042", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeKeyValuePairArray()", file="JsonSerializerCollectionsTests.cs"];
m6_492 [label="Assert.AreEqual(2, values[1].Value.Count)", span="1043-1043", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeKeyValuePairArray()", file="JsonSerializerCollectionsTests.cs"];
m6_493 [label="Assert.AreEqual(''3'', values[1].Value[0])", span="1044-1044", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeKeyValuePairArray()", file="JsonSerializerCollectionsTests.cs"];
m6_494 [label="Assert.AreEqual(''4'', values[1].Value[1])", span="1045-1045", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeKeyValuePairArray()", file="JsonSerializerCollectionsTests.cs"];
m6_495 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeKeyValuePairArray()", span="1031-1031", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeKeyValuePairArray()", file="JsonSerializerCollectionsTests.cs"];
m6_778 [label="Entry System.IO.StringWriter.StringWriter()", span="0-0", cluster="System.IO.StringWriter.StringWriter()", file="JsonSerializerCollectionsTests.cs"];
m6_854 [label="Entry System.Collections.Hashtable.Hashtable()", span="0-0", cluster="System.Collections.Hashtable.Hashtable()", file="JsonSerializerCollectionsTests.cs"];
m6_141 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestDictionaryMultipleParameters.TestDictionaryMultipleParameters(string, string)", span="288-288", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestDictionaryMultipleParameters.TestDictionaryMultipleParameters(string, string)", file="JsonSerializerCollectionsTests.cs"];
m6_142 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestDictionaryMultipleParameters.TestDictionaryMultipleParameters(string, string)", span="288-288", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestDictionaryMultipleParameters.TestDictionaryMultipleParameters(string, string)", file="JsonSerializerCollectionsTests.cs"];
m6_804 [label="Entry Newtonsoft.Json.Tests.Serialization.NonGenericClass.NonGenericClass()", span="2482-2482", cluster="Newtonsoft.Json.Tests.Serialization.NonGenericClass.NonGenericClass()", file="JsonSerializerCollectionsTests.cs"];
m6_217 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MultiDObjectArray()", span="463-463", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MultiDObjectArray()", file="JsonSerializerCollectionsTests.cs"];
m6_218 [label="object[,] myOtherArray =\r\n            {\r\n                { new KeyValuePair<string, double>(''my value'', 0.8), ''foobar'' },\r\n                { true, 0.4d },\r\n                { 0.05f, 6 }\r\n            }", span="465-470", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MultiDObjectArray()", file="JsonSerializerCollectionsTests.cs"];
m6_219 [label="string myOtherArrayAsString = JsonConvert.SerializeObject(myOtherArray, Formatting.Indented)", span="472-472", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MultiDObjectArray()", file="JsonSerializerCollectionsTests.cs"];
m6_220 [label="StringAssert.AreEqual(@''[\r\n  [\r\n    {\r\n      ''''Key'''': ''''my value'''',\r\n      ''''Value'''': 0.8\r\n    },\r\n    ''''foobar''''\r\n  ],\r\n  [\r\n    true,\r\n    0.4\r\n  ],\r\n  [\r\n    0.05,\r\n    6\r\n  ]\r\n]'', myOtherArrayAsString)", span="474-490", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MultiDObjectArray()", file="JsonSerializerCollectionsTests.cs"];
m6_222 [label="object[,] myOtherResult = JsonConvert.DeserializeObject<object[,]>(myOtherArrayAsString)", span="497-497", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MultiDObjectArray()", file="JsonSerializerCollectionsTests.cs"];
m6_221 [label="JObject o = JObject.Parse(@''{\r\n              ''''Key'''': ''''my value'''',\r\n              ''''Value'''': 0.8\r\n            }'')", span="492-495", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MultiDObjectArray()", file="JsonSerializerCollectionsTests.cs"];
m6_223 [label="Assert.IsTrue(JToken.DeepEquals(o, (JToken)myOtherResult[0, 0]))", span="498-498", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MultiDObjectArray()", file="JsonSerializerCollectionsTests.cs"];
m6_224 [label="Assert.AreEqual(''foobar'', myOtherResult[0, 1])", span="499-499", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MultiDObjectArray()", file="JsonSerializerCollectionsTests.cs"];
m6_225 [label="Assert.AreEqual(true, myOtherResult[1, 0])", span="501-501", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MultiDObjectArray()", file="JsonSerializerCollectionsTests.cs"];
m6_226 [label="Assert.AreEqual(0.4, myOtherResult[1, 1])", span="502-502", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MultiDObjectArray()", file="JsonSerializerCollectionsTests.cs"];
m6_227 [label="Assert.AreEqual(0.05, myOtherResult[2, 0])", span="504-504", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MultiDObjectArray()", file="JsonSerializerCollectionsTests.cs"];
m6_228 [label="Assert.AreEqual(6L, myOtherResult[2, 1])", span="505-505", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MultiDObjectArray()", file="JsonSerializerCollectionsTests.cs"];
m6_229 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MultiDObjectArray()", span="463-463", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MultiDObjectArray()", file="JsonSerializerCollectionsTests.cs"];
m6_529 [label="Entry System.Collections.ObjectModel.ReadOnlyCollection<T>.ReadOnlyCollection(System.Collections.Generic.IList<T>)", span="0-0", cluster="System.Collections.ObjectModel.ReadOnlyCollection<T>.ReadOnlyCollection(System.Collections.Generic.IList<T>)", file="JsonSerializerCollectionsTests.cs"];
m6_93 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CollectionJsonConstructorNonGeneric()", span="215-215", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CollectionJsonConstructorNonGeneric()", file="JsonSerializerCollectionsTests.cs"];
m6_94 [label="string json = @''[1,2,3]''", span="217-217", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CollectionJsonConstructorNonGeneric()", file="JsonSerializerCollectionsTests.cs"];
m6_95 [label="TestCollectionNonGeneric l = JsonConvert.DeserializeObject<TestCollectionNonGeneric>(json)", span="218-218", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CollectionJsonConstructorNonGeneric()", file="JsonSerializerCollectionsTests.cs"];
m6_96 [label="Assert.AreEqual(3, l.Count)", span="220-220", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CollectionJsonConstructorNonGeneric()", file="JsonSerializerCollectionsTests.cs"];
m6_97 [label="Assert.AreEqual(1, l[0])", span="221-221", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CollectionJsonConstructorNonGeneric()", file="JsonSerializerCollectionsTests.cs"];
m6_98 [label="Assert.AreEqual(2, l[1])", span="222-222", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CollectionJsonConstructorNonGeneric()", file="JsonSerializerCollectionsTests.cs"];
m6_99 [label="Assert.AreEqual(3, l[2])", span="223-223", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CollectionJsonConstructorNonGeneric()", file="JsonSerializerCollectionsTests.cs"];
m6_100 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CollectionJsonConstructorNonGeneric()", span="215-215", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CollectionJsonConstructorNonGeneric()", file="JsonSerializerCollectionsTests.cs"];
m6_510 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeNullToNonNullableKeyValuePairArray()", span="1068-1068", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeNullToNonNullableKeyValuePairArray()", file="JsonSerializerCollectionsTests.cs"];
m6_511 [label="string json = @''[ null ]''", span="1070-1070", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeNullToNonNullableKeyValuePairArray()", file="JsonSerializerCollectionsTests.cs"];
m6_512 [label="ExceptionAssert.Throws<JsonSerializationException>(() => { JsonConvert.DeserializeObject<IList<KeyValuePair<string, IList<string>>>>(json); }, ''Cannot convert null value to KeyValuePair. Path '[0]', line 1, position 6.'')", span="1072-1072", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeNullToNonNullableKeyValuePairArray()", file="JsonSerializerCollectionsTests.cs"];
m6_513 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeNullToNonNullableKeyValuePairArray()", span="1068-1068", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeNullToNonNullableKeyValuePairArray()", file="JsonSerializerCollectionsTests.cs"];
m6_993 [label="Entry Newtonsoft.Json.Tests.Serialization.ReadOnlyCollectionWithArrayArgument<T>.GetEnumerator()", span="2332-2332", cluster="Newtonsoft.Json.Tests.Serialization.ReadOnlyCollectionWithArrayArgument<T>.GetEnumerator()", file="JsonSerializerCollectionsTests.cs"];
m6_994 [label="return _values.GetEnumerator();", span="2334-2334", cluster="Newtonsoft.Json.Tests.Serialization.ReadOnlyCollectionWithArrayArgument<T>.GetEnumerator()", file="JsonSerializerCollectionsTests.cs"];
m6_995 [label="Exit Newtonsoft.Json.Tests.Serialization.ReadOnlyCollectionWithArrayArgument<T>.GetEnumerator()", span="2332-2332", cluster="Newtonsoft.Json.Tests.Serialization.ReadOnlyCollectionWithArrayArgument<T>.GetEnumerator()", file="JsonSerializerCollectionsTests.cs"];
m6_230 [label="Entry System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", span="0-0", cluster="System.Collections.Generic.KeyValuePair<TKey, TValue>.KeyValuePair(TKey, TValue)", file="JsonSerializerCollectionsTests.cs"];
m6_720 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.PrimitiveValuesInObjectArray()", span="1680-1680", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.PrimitiveValuesInObjectArray()", file="JsonSerializerCollectionsTests.cs"];
m6_721 [label="string json = @''{''''action'''':''''Router'''',''''method'''':''''Navigate'''',''''data'''':[''''dashboard'''',null],''''type'''':''''rpc'''',''''tid'''':2}''", span="1682-1682", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.PrimitiveValuesInObjectArray()", file="JsonSerializerCollectionsTests.cs"];
m6_722 [label="ObjectArrayPropertyTest o = JsonConvert.DeserializeObject<ObjectArrayPropertyTest>(json)", span="1684-1684", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.PrimitiveValuesInObjectArray()", file="JsonSerializerCollectionsTests.cs"];
m6_723 [label="Assert.AreEqual(''Router'', o.Action)", span="1686-1686", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.PrimitiveValuesInObjectArray()", file="JsonSerializerCollectionsTests.cs"];
m6_724 [label="Assert.AreEqual(''Navigate'', o.Method)", span="1687-1687", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.PrimitiveValuesInObjectArray()", file="JsonSerializerCollectionsTests.cs"];
m6_725 [label="Assert.AreEqual(2, o.Data.Length)", span="1688-1688", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.PrimitiveValuesInObjectArray()", file="JsonSerializerCollectionsTests.cs"];
m6_726 [label="Assert.AreEqual(''dashboard'', o.Data[0])", span="1689-1689", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.PrimitiveValuesInObjectArray()", file="JsonSerializerCollectionsTests.cs"];
m6_727 [label="Assert.AreEqual(null, o.Data[1])", span="1690-1690", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.PrimitiveValuesInObjectArray()", file="JsonSerializerCollectionsTests.cs"];
m6_728 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.PrimitiveValuesInObjectArray()", span="1680-1680", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.PrimitiveValuesInObjectArray()", file="JsonSerializerCollectionsTests.cs"];
m6_986 [label="Entry Unk.Get", span="", cluster="Unk.Get", file="JsonSerializerCollectionsTests.cs"];
m6_189 [label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting)", span="537-537", cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting)", file="JsonSerializerCollectionsTests.cs"];
m6_8 [label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object)", span="524-524", cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object)", file="JsonSerializerCollectionsTests.cs"];
m6_10 [label="Entry Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string)", span="703-703", cluster="Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string)", file="JsonSerializerCollectionsTests.cs"];
m6_679 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeNull3DArray()", span="1491-1491", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeNull3DArray()", file="JsonSerializerCollectionsTests.cs"];
m6_680 [label="string json = @''{''''Before'''':''''Before!'''',''''Coordinates'''':null,''''After'''':''''After!''''}''", span="1493-1493", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeNull3DArray()", file="JsonSerializerCollectionsTests.cs"];
m6_681 [label="Array3D aa = JsonConvert.DeserializeObject<Array3D>(json)", span="1495-1495", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeNull3DArray()", file="JsonSerializerCollectionsTests.cs"];
m6_686 [label="Assert.AreEqual(json, after)", span="1503-1503", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeNull3DArray()", file="JsonSerializerCollectionsTests.cs"];
m6_682 [label="Assert.AreEqual(''Before!'', aa.Before)", span="1497-1497", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeNull3DArray()", file="JsonSerializerCollectionsTests.cs"];
m6_683 [label="Assert.AreEqual(''After!'', aa.After)", span="1498-1498", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeNull3DArray()", file="JsonSerializerCollectionsTests.cs"];
m6_684 [label="Assert.AreEqual(null, aa.Coordinates)", span="1499-1499", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeNull3DArray()", file="JsonSerializerCollectionsTests.cs"];
m6_685 [label="string after = JsonConvert.SerializeObject(aa)", span="1501-1501", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeNull3DArray()", file="JsonSerializerCollectionsTests.cs"];
m6_687 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeNull3DArray()", span="1491-1491", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeNull3DArray()", file="JsonSerializerCollectionsTests.cs"];
m6_988 [label="Entry Unk.Elements", span="", cluster="Unk.Elements", file="JsonSerializerCollectionsTests.cs"];
m6_1047 [label="Entry Newtonsoft.Json.JsonWriter.WriteValue(object)", span="1408-1408", cluster="Newtonsoft.Json.JsonWriter.WriteValue(object)", file="JsonSerializerCollectionsTests.cs"];
m6_1048 [label="Entry Newtonsoft.Json.Tests.Serialization.StringListAppenderConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", span="2493-2493", cluster="Newtonsoft.Json.Tests.Serialization.StringListAppenderConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="JsonSerializerCollectionsTests.cs"];
m6_1049 [label="List<string> existingStrings = (List<string>)existingValue", span="2495-2495", cluster="Newtonsoft.Json.Tests.Serialization.StringListAppenderConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="JsonSerializerCollectionsTests.cs"];
m6_1051 [label="reader.Read()", span="2498-2498", cluster="Newtonsoft.Json.Tests.Serialization.StringListAppenderConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="JsonSerializerCollectionsTests.cs"];
m6_1052 [label="reader.TokenType != JsonToken.EndArray", span="2500-2500", cluster="Newtonsoft.Json.Tests.Serialization.StringListAppenderConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="JsonSerializerCollectionsTests.cs"];
m6_1053 [label="string s = (string)reader.Value", span="2502-2502", cluster="Newtonsoft.Json.Tests.Serialization.StringListAppenderConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="JsonSerializerCollectionsTests.cs"];
m6_1055 [label="reader.Read()", span="2505-2505", cluster="Newtonsoft.Json.Tests.Serialization.StringListAppenderConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="JsonSerializerCollectionsTests.cs"];
m6_1050 [label="List<string> newStrings = new List<string>(existingStrings)", span="2496-2496", cluster="Newtonsoft.Json.Tests.Serialization.StringListAppenderConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="JsonSerializerCollectionsTests.cs"];
m6_1054 [label="newStrings.Add(s)", span="2503-2503", cluster="Newtonsoft.Json.Tests.Serialization.StringListAppenderConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="JsonSerializerCollectionsTests.cs"];
m6_1056 [label="return newStrings;", span="2508-2508", cluster="Newtonsoft.Json.Tests.Serialization.StringListAppenderConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="JsonSerializerCollectionsTests.cs"];
m6_1057 [label="Exit Newtonsoft.Json.Tests.Serialization.StringListAppenderConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", span="2493-2493", cluster="Newtonsoft.Json.Tests.Serialization.StringListAppenderConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="JsonSerializerCollectionsTests.cs"];
m6_34 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestCollectionPrivateParameterized.Add(int)", span="113-113", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestCollectionPrivateParameterized.Add(int)", file="JsonSerializerCollectionsTests.cs"];
m6_35 [label="_bars.Add(bar)", span="115-115", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestCollectionPrivateParameterized.Add(int)", file="JsonSerializerCollectionsTests.cs"];
m6_36 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestCollectionPrivateParameterized.Add(int)", span="113-113", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestCollectionPrivateParameterized.Add(int)", file="JsonSerializerCollectionsTests.cs"];
m6_431 [label="Entry System.DateTime.DateTime(int, int, int, int, int, int, System.DateTimeKind)", span="0-0", cluster="System.DateTime.DateTime(int, int, int, int, int, int, System.DateTimeKind)", file="JsonSerializerCollectionsTests.cs"];
m6_918 [label="Entry Newtonsoft.Json.Tests.Serialization.CASResponce.CASResponce(string)", span="2158-2158", cluster="Newtonsoft.Json.Tests.Serialization.CASResponce.CASResponce(string)", file="JsonSerializerCollectionsTests.cs"];
m6_919 [label="this.Domain = ''''", span="2160-2160", cluster="Newtonsoft.Json.Tests.Serialization.CASResponce.CASResponce(string)", file="JsonSerializerCollectionsTests.cs"];
m6_924 [label="ParseReplyXML(xmlResponce)", span="2166-2166", cluster="Newtonsoft.Json.Tests.Serialization.CASResponce.CASResponce(string)", file="JsonSerializerCollectionsTests.cs"];
m6_920 [label="this.Mail = ''''", span="2161-2161", cluster="Newtonsoft.Json.Tests.Serialization.CASResponce.CASResponce(string)", file="JsonSerializerCollectionsTests.cs"];
m6_921 [label="this.Surname = ''''", span="2162-2162", cluster="Newtonsoft.Json.Tests.Serialization.CASResponce.CASResponce(string)", file="JsonSerializerCollectionsTests.cs"];
m6_922 [label="this.Givenname = ''''", span="2163-2163", cluster="Newtonsoft.Json.Tests.Serialization.CASResponce.CASResponce(string)", file="JsonSerializerCollectionsTests.cs"];
m6_923 [label="this.CommonName = ''''", span="2164-2164", cluster="Newtonsoft.Json.Tests.Serialization.CASResponce.CASResponce(string)", file="JsonSerializerCollectionsTests.cs"];
m6_925 [label="ExtractGroups()", span="2167-2167", cluster="Newtonsoft.Json.Tests.Serialization.CASResponce.CASResponce(string)", file="JsonSerializerCollectionsTests.cs"];
m6_926 [label="ExtractLanguage()", span="2168-2168", cluster="Newtonsoft.Json.Tests.Serialization.CASResponce.CASResponce(string)", file="JsonSerializerCollectionsTests.cs"];
m6_927 [label="Exit Newtonsoft.Json.Tests.Serialization.CASResponce.CASResponce(string)", span="2158-2158", cluster="Newtonsoft.Json.Tests.Serialization.CASResponce.CASResponce(string)", file="JsonSerializerCollectionsTests.cs"];
m6_83 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestCollectionBadIEnumerableParameter.TestCollectionBadIEnumerableParameter(System.Collections.Generic.List<string>)", span="191-191", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestCollectionBadIEnumerableParameter.TestCollectionBadIEnumerableParameter(System.Collections.Generic.List<string>)", file="JsonSerializerCollectionsTests.cs"];
m6_84 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestCollectionBadIEnumerableParameter.TestCollectionBadIEnumerableParameter(System.Collections.Generic.List<string>)", span="191-191", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestCollectionBadIEnumerableParameter.TestCollectionBadIEnumerableParameter(System.Collections.Generic.List<string>)", file="JsonSerializerCollectionsTests.cs"];
m6_564 [label="Entry Newtonsoft.Json.Tests.Serialization.Array3D.Array3D()", span="2425-2425", cluster="Newtonsoft.Json.Tests.Serialization.Array3D.Array3D()", file="JsonSerializerCollectionsTests.cs"];
m6_672 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeIncompleteNotTopLevel3DArray()", span="1483-1483", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeIncompleteNotTopLevel3DArray()", file="JsonSerializerCollectionsTests.cs"];
m6_673 [label="string json = @''{''''Before'''':''''Before!'''',''''Coordinates'''':[/*hi*/[/*hi*/''", span="1485-1485", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeIncompleteNotTopLevel3DArray()", file="JsonSerializerCollectionsTests.cs"];
m6_674 [label="ExceptionAssert.Throws<JsonException>(() => JsonConvert.DeserializeObject<Array3D>(json))", span="1487-1487", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeIncompleteNotTopLevel3DArray()", file="JsonSerializerCollectionsTests.cs"];
m6_675 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeIncompleteNotTopLevel3DArray()", span="1483-1483", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.DeserializeIncompleteNotTopLevel3DArray()", file="JsonSerializerCollectionsTests.cs"];
m6_1003 [label="Entry Newtonsoft.Json.Tests.Serialization.ReadOnlyCollectionWithArrayArgument<T>.Clear()", span="2347-2347", cluster="Newtonsoft.Json.Tests.Serialization.ReadOnlyCollectionWithArrayArgument<T>.Clear()", file="JsonSerializerCollectionsTests.cs"];
m6_1004 [label="throw new NotImplementedException();", span="2349-2349", cluster="Newtonsoft.Json.Tests.Serialization.ReadOnlyCollectionWithArrayArgument<T>.Clear()", file="JsonSerializerCollectionsTests.cs"];
m6_1005 [label="Exit Newtonsoft.Json.Tests.Serialization.ReadOnlyCollectionWithArrayArgument<T>.Clear()", span="2347-2347", cluster="Newtonsoft.Json.Tests.Serialization.ReadOnlyCollectionWithArrayArgument<T>.Clear()", file="JsonSerializerCollectionsTests.cs"];
m6_432 [label="Entry Newtonsoft.Json.Tests.TestObjects.Organization.WagePerson.WagePerson()", span="27-27", cluster="Newtonsoft.Json.Tests.TestObjects.Organization.WagePerson.WagePerson()", file="JsonSerializerCollectionsTests.cs"];
m6_781 [label="Entry System.Text.StringBuilder.ToString()", span="0-0", cluster="System.Text.StringBuilder.ToString()", file="JsonSerializerCollectionsTests.cs"];
m6_1035 [label="Entry Newtonsoft.Json.Tests.Serialization.GenericClass<T, TValue>.GetEnumerator()", span="2461-2461", cluster="Newtonsoft.Json.Tests.Serialization.GenericClass<T, TValue>.GetEnumerator()", file="JsonSerializerCollectionsTests.cs"];
m6_1036 [label="Items != null", span="2463-2463", cluster="Newtonsoft.Json.Tests.Serialization.GenericClass<T, TValue>.GetEnumerator()", file="JsonSerializerCollectionsTests.cs"];
m6_1038 [label="yield return item;", span="2467-2467", cluster="Newtonsoft.Json.Tests.Serialization.GenericClass<T, TValue>.GetEnumerator()", file="JsonSerializerCollectionsTests.cs"];
m6_1039 [label="yield break;", span="2472-2472", cluster="Newtonsoft.Json.Tests.Serialization.GenericClass<T, TValue>.GetEnumerator()", file="JsonSerializerCollectionsTests.cs"];
m6_1037 [label=Items, span="2465-2465", cluster="Newtonsoft.Json.Tests.Serialization.GenericClass<T, TValue>.GetEnumerator()", file="JsonSerializerCollectionsTests.cs"];
m6_1040 [label="Exit Newtonsoft.Json.Tests.Serialization.GenericClass<T, TValue>.GetEnumerator()", span="2461-2461", cluster="Newtonsoft.Json.Tests.Serialization.GenericClass<T, TValue>.GetEnumerator()", file="JsonSerializerCollectionsTests.cs"];
m6_763 [label="Entry Newtonsoft.Json.Tests.TestObjects.Name.Name(string)", span="35-35", cluster="Newtonsoft.Json.Tests.TestObjects.Name.Name(string)", file="JsonSerializerCollectionsTests.cs"];
m6_205 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.NonZeroBasedMultiArray()", span="426-426", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.NonZeroBasedMultiArray()", file="JsonSerializerCollectionsTests.cs"];
m6_206 [label="var onebasedArray = Array.CreateInstance(typeof(string), new[] { 3, 3 }, new[] { 1, 2 })", span="429-429", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.NonZeroBasedMultiArray()", file="JsonSerializerCollectionsTests.cs"];
m6_207 [label="var i = onebasedArray.GetLowerBound(0)", span="432-432", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.NonZeroBasedMultiArray()", file="JsonSerializerCollectionsTests.cs"];
m6_208 [label="i <= onebasedArray.GetUpperBound(0)", span="432-432", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.NonZeroBasedMultiArray()", file="JsonSerializerCollectionsTests.cs"];
m6_209 [label="var j = onebasedArray.GetLowerBound(1)", span="434-434", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.NonZeroBasedMultiArray()", file="JsonSerializerCollectionsTests.cs"];
m6_210 [label="j <= onebasedArray.GetUpperBound(1)", span="434-434", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.NonZeroBasedMultiArray()", file="JsonSerializerCollectionsTests.cs"];
m6_211 [label="onebasedArray.SetValue(i + ''_'' + j, new[] { i, j })", span="436-436", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.NonZeroBasedMultiArray()", file="JsonSerializerCollectionsTests.cs"];
m6_214 [label="string output = JsonConvert.SerializeObject(onebasedArray, Formatting.Indented)", span="441-441", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.NonZeroBasedMultiArray()", file="JsonSerializerCollectionsTests.cs"];
m6_213 [label="i++", span="432-432", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.NonZeroBasedMultiArray()", file="JsonSerializerCollectionsTests.cs"];
m6_212 [label="j++", span="434-434", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.NonZeroBasedMultiArray()", file="JsonSerializerCollectionsTests.cs"];
m6_215 [label="StringAssert.AreEqual(@''[\r\n  [\r\n    ''''1_2'''',\r\n    ''''1_3'''',\r\n    ''''1_4''''\r\n  ],\r\n  [\r\n    ''''2_2'''',\r\n    ''''2_3'''',\r\n    ''''2_4''''\r\n  ],\r\n  [\r\n    ''''3_2'''',\r\n    ''''3_3'''',\r\n    ''''3_4''''\r\n  ]\r\n]'', output)", span="443-459", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.NonZeroBasedMultiArray()", file="JsonSerializerCollectionsTests.cs"];
m6_216 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.NonZeroBasedMultiArray()", span="426-426", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.NonZeroBasedMultiArray()", file="JsonSerializerCollectionsTests.cs"];
m6_1030 [label="Entry Newtonsoft.Json.Tests.Serialization.ReadOnlyIntegerList.System.Collections.IEnumerable.GetEnumerator()", span="2411-2411", cluster="Newtonsoft.Json.Tests.Serialization.ReadOnlyIntegerList.System.Collections.IEnumerable.GetEnumerator()", file="JsonSerializerCollectionsTests.cs"];
m6_1031 [label="return GetEnumerator();", span="2413-2413", cluster="Newtonsoft.Json.Tests.Serialization.ReadOnlyIntegerList.System.Collections.IEnumerable.GetEnumerator()", file="JsonSerializerCollectionsTests.cs"];
m6_1032 [label="Exit Newtonsoft.Json.Tests.Serialization.ReadOnlyIntegerList.System.Collections.IEnumerable.GetEnumerator()", span="2411-2411", cluster="Newtonsoft.Json.Tests.Serialization.ReadOnlyIntegerList.System.Collections.IEnumerable.GetEnumerator()", file="JsonSerializerCollectionsTests.cs"];
m6_928 [label="Entry Newtonsoft.Json.Tests.Serialization.CASResponce.ParseReplyXML(string)", span="2213-2213", cluster="Newtonsoft.Json.Tests.Serialization.CASResponce.ParseReplyXML(string)", file="JsonSerializerCollectionsTests.cs"];
m6_950 [label="System.Xml.Linq.XDocument xDoc = XDocument.Parse(xmlString)", span="2217-2217", cluster="Newtonsoft.Json.Tests.Serialization.CASResponce.ParseReplyXML(string)", file="JsonSerializerCollectionsTests.cs"];
m6_982 [label="this.XMLResponce = xmlString", span="2274-2274", cluster="Newtonsoft.Json.Tests.Serialization.CASResponce.ParseReplyXML(string)", file="JsonSerializerCollectionsTests.cs"];
m6_951 [label="var root = xDoc.Root", span="2219-2219", cluster="Newtonsoft.Json.Tests.Serialization.CASResponce.ParseReplyXML(string)", file="JsonSerializerCollectionsTests.cs"];
m6_952 [label="string ns = ''http://www.yale.edu/tp/cas''", span="2221-2221", cluster="Newtonsoft.Json.Tests.Serialization.CASResponce.ParseReplyXML(string)", file="JsonSerializerCollectionsTests.cs"];
m6_953 [label="XElement auth = root.Element(XName.Get(''authenticationSuccess'', ns))", span="2223-2223", cluster="Newtonsoft.Json.Tests.Serialization.CASResponce.ParseReplyXML(string)", file="JsonSerializerCollectionsTests.cs"];
m6_955 [label="auth = root.Element(XName.Get(''authenticationFailure'', ns))", span="2226-2226", cluster="Newtonsoft.Json.Tests.Serialization.CASResponce.ParseReplyXML(string)", file="JsonSerializerCollectionsTests.cs"];
m6_956 [label="XElement xNodeUser = auth.Element(XName.Get(''user'', ns))", span="2228-2228", cluster="Newtonsoft.Json.Tests.Serialization.CASResponce.ParseReplyXML(string)", file="JsonSerializerCollectionsTests.cs"];
m6_954 [label="auth == null", span="2225-2225", cluster="Newtonsoft.Json.Tests.Serialization.CASResponce.ParseReplyXML(string)", file="JsonSerializerCollectionsTests.cs"];
m6_957 [label="XElement eduPers = auth.Element(XName.Get(''norEduPerson'', ''''))", span="2230-2230", cluster="Newtonsoft.Json.Tests.Serialization.CASResponce.ParseReplyXML(string)", file="JsonSerializerCollectionsTests.cs"];
m6_960 [label="xNodeUser != null", span="2235-2235", cluster="Newtonsoft.Json.Tests.Serialization.CASResponce.ParseReplyXML(string)", file="JsonSerializerCollectionsTests.cs"];
m6_961 [label="casUser = xNodeUser.Value", span="2237-2237", cluster="Newtonsoft.Json.Tests.Serialization.CASResponce.ParseReplyXML(string)", file="JsonSerializerCollectionsTests.cs"];
m6_958 [label="string casUser = ''''", span="2232-2232", cluster="Newtonsoft.Json.Tests.Serialization.CASResponce.ParseReplyXML(string)", file="JsonSerializerCollectionsTests.cs"];
m6_962 [label="eduPers != null", span="2239-2239", cluster="Newtonsoft.Json.Tests.Serialization.CASResponce.ParseReplyXML(string)", file="JsonSerializerCollectionsTests.cs"];
m6_963 [label="eduPers.Elements()", span="2241-2241", cluster="Newtonsoft.Json.Tests.Serialization.CASResponce.ParseReplyXML(string)", file="JsonSerializerCollectionsTests.cs"];
m6_959 [label="Dictionary<string, string> eduPerson = new Dictionary<string, string>()", span="2233-2233", cluster="Newtonsoft.Json.Tests.Serialization.CASResponce.ParseReplyXML(string)", file="JsonSerializerCollectionsTests.cs"];
m6_967 [label="casUser.Trim() != ''''", span="2255-2255", cluster="Newtonsoft.Json.Tests.Serialization.CASResponce.ParseReplyXML(string)", file="JsonSerializerCollectionsTests.cs"];
m6_968 [label="this.user = casUser", span="2257-2257", cluster="Newtonsoft.Json.Tests.Serialization.CASResponce.ParseReplyXML(string)", file="JsonSerializerCollectionsTests.cs"];
m6_964 [label="!eduPerson.ContainsKey(xPersonValue.Name.LocalName)", span="2243-2243", cluster="Newtonsoft.Json.Tests.Serialization.CASResponce.ParseReplyXML(string)", file="JsonSerializerCollectionsTests.cs"];
m6_965 [label="eduPerson.Add(xPersonValue.Name.LocalName, xPersonValue.Value)", span="2245-2245", cluster="Newtonsoft.Json.Tests.Serialization.CASResponce.ParseReplyXML(string)", file="JsonSerializerCollectionsTests.cs"];
m6_966 [label="eduPerson[xPersonValue.Name.LocalName] = eduPerson[xPersonValue.Name.LocalName] + '';'' + xPersonValue.Value", span="2249-2249", cluster="Newtonsoft.Json.Tests.Serialization.CASResponce.ParseReplyXML(string)", file="JsonSerializerCollectionsTests.cs"];
m6_969 [label="eduPerson.ContainsKey(''domain'')", span="2260-2260", cluster="Newtonsoft.Json.Tests.Serialization.CASResponce.ParseReplyXML(string)", file="JsonSerializerCollectionsTests.cs"];
m6_970 [label="this.Domain = eduPerson[''domain'']", span="2261-2261", cluster="Newtonsoft.Json.Tests.Serialization.CASResponce.ParseReplyXML(string)", file="JsonSerializerCollectionsTests.cs"];
m6_971 [label="eduPerson.ContainsKey(''organizationName'')", span="2262-2262", cluster="Newtonsoft.Json.Tests.Serialization.CASResponce.ParseReplyXML(string)", file="JsonSerializerCollectionsTests.cs"];
m6_972 [label="this.OrganizationName = eduPerson[''organizationName'']", span="2263-2263", cluster="Newtonsoft.Json.Tests.Serialization.CASResponce.ParseReplyXML(string)", file="JsonSerializerCollectionsTests.cs"];
m6_973 [label="eduPerson.ContainsKey(''mail'')", span="2264-2264", cluster="Newtonsoft.Json.Tests.Serialization.CASResponce.ParseReplyXML(string)", file="JsonSerializerCollectionsTests.cs"];
m6_974 [label="this.Mail = eduPerson[''mail'']", span="2265-2265", cluster="Newtonsoft.Json.Tests.Serialization.CASResponce.ParseReplyXML(string)", file="JsonSerializerCollectionsTests.cs"];
m6_975 [label="eduPerson.ContainsKey(''sn'')", span="2266-2266", cluster="Newtonsoft.Json.Tests.Serialization.CASResponce.ParseReplyXML(string)", file="JsonSerializerCollectionsTests.cs"];
m6_976 [label="this.Surname = eduPerson[''sn'']", span="2267-2267", cluster="Newtonsoft.Json.Tests.Serialization.CASResponce.ParseReplyXML(string)", file="JsonSerializerCollectionsTests.cs"];
m6_977 [label="eduPerson.ContainsKey(''gn'')", span="2268-2268", cluster="Newtonsoft.Json.Tests.Serialization.CASResponce.ParseReplyXML(string)", file="JsonSerializerCollectionsTests.cs"];
m6_978 [label="this.Givenname = eduPerson[''gn'']", span="2269-2269", cluster="Newtonsoft.Json.Tests.Serialization.CASResponce.ParseReplyXML(string)", file="JsonSerializerCollectionsTests.cs"];
m6_979 [label="eduPerson.ContainsKey(''cn'')", span="2270-2270", cluster="Newtonsoft.Json.Tests.Serialization.CASResponce.ParseReplyXML(string)", file="JsonSerializerCollectionsTests.cs"];
m6_980 [label="this.CommonName = eduPerson[''cn'']", span="2271-2271", cluster="Newtonsoft.Json.Tests.Serialization.CASResponce.ParseReplyXML(string)", file="JsonSerializerCollectionsTests.cs"];
m6_981 [label="this.Person = eduPerson", span="2273-2273", cluster="Newtonsoft.Json.Tests.Serialization.CASResponce.ParseReplyXML(string)", file="JsonSerializerCollectionsTests.cs"];
m6_983 [label="this.user = ''''", span="2278-2278", cluster="Newtonsoft.Json.Tests.Serialization.CASResponce.ParseReplyXML(string)", file="JsonSerializerCollectionsTests.cs"];
m6_984 [label="Exit Newtonsoft.Json.Tests.Serialization.CASResponce.ParseReplyXML(string)", span="2213-2213", cluster="Newtonsoft.Json.Tests.Serialization.CASResponce.ParseReplyXML(string)", file="JsonSerializerCollectionsTests.cs"];
m6_847 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.EmptyStringInHashtableIsDeserialized()", span="1943-1943", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.EmptyStringInHashtableIsDeserialized()", file="JsonSerializerCollectionsTests.cs"];
m6_848 [label="string externalJson = @''{''''$type'''':''''System.Collections.Hashtable, mscorlib'''',''''testkey'''':''''''''}''", span="1945-1945", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.EmptyStringInHashtableIsDeserialized()", file="JsonSerializerCollectionsTests.cs"];
m6_849 [label="JsonSerializerSettings settings = new JsonSerializerSettings { TypeNameHandling = TypeNameHandling.All }", span="1947-1947", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.EmptyStringInHashtableIsDeserialized()", file="JsonSerializerCollectionsTests.cs"];
m6_851 [label="Hashtable deserializeTest2 = JsonConvert.DeserializeObject<Hashtable>(externalJson, settings)", span="1950-1950", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.EmptyStringInHashtableIsDeserialized()", file="JsonSerializerCollectionsTests.cs"];
m6_850 [label="JsonConvert.SerializeObject(new Hashtable { { ''testkey'', '''' } }, settings)", span="1949-1949", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.EmptyStringInHashtableIsDeserialized()", file="JsonSerializerCollectionsTests.cs"];
m6_852 [label="Assert.AreEqual(deserializeTest2[''testkey''], '''')", span="1952-1952", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.EmptyStringInHashtableIsDeserialized()", file="JsonSerializerCollectionsTests.cs"];
m6_853 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.EmptyStringInHashtableIsDeserialized()", span="1943-1943", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.EmptyStringInHashtableIsDeserialized()", file="JsonSerializerCollectionsTests.cs"];
m6_203 [label="Entry System.Array.SetValue(object, params int[])", span="0-0", cluster="System.Array.SetValue(object, params int[])", file="JsonSerializerCollectionsTests.cs"];
m6_79 [label="Entry Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", span="367-367", cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", file="JsonSerializerCollectionsTests.cs"];
m6_254 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.EnumerableClassFailure<T>.EnumerableClassFailure()", span="549-549", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.EnumerableClassFailure<T>.EnumerableClassFailure()", file="JsonSerializerCollectionsTests.cs"];
m6_255 [label="_values = new List<T>()", span="551-551", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.EnumerableClassFailure<T>.EnumerableClassFailure()", file="JsonSerializerCollectionsTests.cs"];
m6_256 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.EnumerableClassFailure<T>.EnumerableClassFailure()", span="549-549", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.EnumerableClassFailure<T>.EnumerableClassFailure()", file="JsonSerializerCollectionsTests.cs"];
m6_818 [label="Entry Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.ReadOnlyCollectionSerialize()", span="1827-1827", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.ReadOnlyCollectionSerialize()", file="JsonSerializerCollectionsTests.cs"];
m6_819 [label="ReadOnlyCollection<int> r1 = new ReadOnlyCollection<int>(new int[] { 0, 1, 2, 3, 4 })", span="1829-1829", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.ReadOnlyCollectionSerialize()", file="JsonSerializerCollectionsTests.cs"];
m6_820 [label="string jsonText = JsonConvert.SerializeObject(r1)", span="1831-1831", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.ReadOnlyCollectionSerialize()", file="JsonSerializerCollectionsTests.cs"];
m6_823 [label="CollectionAssert.AreEqual(r1, r2)", span="1837-1837", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.ReadOnlyCollectionSerialize()", file="JsonSerializerCollectionsTests.cs"];
m6_821 [label="Assert.AreEqual(''[0,1,2,3,4]'', jsonText)", span="1833-1833", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.ReadOnlyCollectionSerialize()", file="JsonSerializerCollectionsTests.cs"];
m6_822 [label="ReadOnlyCollection<int> r2 = JsonConvert.DeserializeObject<ReadOnlyCollection<int>>(jsonText)", span="1835-1835", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.ReadOnlyCollectionSerialize()", file="JsonSerializerCollectionsTests.cs"];
m6_824 [label="Exit Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.ReadOnlyCollectionSerialize()", span="1827-1827", cluster="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.ReadOnlyCollectionSerialize()", file="JsonSerializerCollectionsTests.cs"];
m6_1026 [label="Entry Newtonsoft.Json.Tests.Serialization.ReadOnlyIntegerList.GetEnumerator()", span="2406-2406", cluster="Newtonsoft.Json.Tests.Serialization.ReadOnlyIntegerList.GetEnumerator()", file="JsonSerializerCollectionsTests.cs"];
m6_1027 [label="return _list.GetEnumerator();", span="2408-2408", cluster="Newtonsoft.Json.Tests.Serialization.ReadOnlyIntegerList.GetEnumerator()", file="JsonSerializerCollectionsTests.cs"];
m6_1028 [label="Exit Newtonsoft.Json.Tests.Serialization.ReadOnlyIntegerList.GetEnumerator()", span="2406-2406", cluster="Newtonsoft.Json.Tests.Serialization.ReadOnlyIntegerList.GetEnumerator()", file="JsonSerializerCollectionsTests.cs"];
m6_232 [label="Entry Newtonsoft.Json.Linq.JToken.DeepEquals(Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken)", span="155-155", cluster="Newtonsoft.Json.Linq.JToken.DeepEquals(Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken)", file="JsonSerializerCollectionsTests.cs"];
m6_1073 [label="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestCollectionPrivateParameterized", span="", file="JsonSerializerCollectionsTests.cs"];
m6_1074 [label="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CustomConcurrentDictionary", span="", file="JsonSerializerCollectionsTests.cs"];
m6_1075 [label="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.EnumerableClass<T>", span="", file="JsonSerializerCollectionsTests.cs"];
m6_1076 [label="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.EnumerableClassFailure<T>", span="", file="JsonSerializerCollectionsTests.cs"];
m6_1077 [label=json, span="", file="JsonSerializerCollectionsTests.cs"];
m6_1078 [label="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.PrivateDefaultCtorWithIEnumerableCtorList<T>", span="", file="JsonSerializerCollectionsTests.cs"];
m6_1079 [label="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CustomReadOnlyDictionary<TKey, TValue>", span="", file="JsonSerializerCollectionsTests.cs"];
m6_1080 [label="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CustomReadOnlyCollection<T>", span="", file="JsonSerializerCollectionsTests.cs"];
m6_1081 [label="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.GenericListTestClass", span="", file="JsonSerializerCollectionsTests.cs"];
m6_1082 [label=json, span="", file="JsonSerializerCollectionsTests.cs"];
m6_1083 [label="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.PopulateReadOnlyTestClass", span="", file="JsonSerializerCollectionsTests.cs"];
m6_1084 [label=json, span="", file="JsonSerializerCollectionsTests.cs"];
m6_1085 [label=json, span="", file="JsonSerializerCollectionsTests.cs"];
m6_1086 [label=json, span="", file="JsonSerializerCollectionsTests.cs"];
m6_1087 [label=json, span="", file="JsonSerializerCollectionsTests.cs"];
m6_1088 [label=json, span="", file="JsonSerializerCollectionsTests.cs"];
m6_1089 [label=json, span="", file="JsonSerializerCollectionsTests.cs"];
m6_1090 [label=json, span="", file="JsonSerializerCollectionsTests.cs"];
m6_1091 [label=json, span="", file="JsonSerializerCollectionsTests.cs"];
m6_1092 [label="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MyClass", span="", file="JsonSerializerCollectionsTests.cs"];
m6_1093 [label="Newtonsoft.Json.Tests.Serialization.CASResponce", span="", file="JsonSerializerCollectionsTests.cs"];
m6_1094 [label="Newtonsoft.Json.Tests.Serialization.ReadOnlyCollectionWithArrayArgument<T>", span="", file="JsonSerializerCollectionsTests.cs"];
m6_1095 [label="Newtonsoft.Json.Tests.Serialization.ReadOnlyIntegerList", span="", file="JsonSerializerCollectionsTests.cs"];
m6_1096 [label="Newtonsoft.Json.Tests.Serialization.GenericClass<T, TValue>", span="", file="JsonSerializerCollectionsTests.cs"];
m8_25 [label="Entry Newtonsoft.Json.Linq.JsonPath.PathFilter.GetNextScanValue(Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken)", span="54-54", cluster="Newtonsoft.Json.Linq.JsonPath.PathFilter.GetNextScanValue(Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken)", file="PathFilter.cs"];
m8_26 [label="container != null && container.HasValues", span="57-57", cluster="Newtonsoft.Json.Linq.JsonPath.PathFilter.GetNextScanValue(Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken)", color=green, community=0, file="PathFilter.cs"];
m8_27 [label="value = container.First", span="59-59", cluster="Newtonsoft.Json.Linq.JsonPath.PathFilter.GetNextScanValue(Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken)", color=green, community=0, file="PathFilter.cs"];
m8_28 [label="value != null && value != originalParent && value == value.Parent.Last", span="64-64", cluster="Newtonsoft.Json.Linq.JsonPath.PathFilter.GetNextScanValue(Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken)", color=green, community=0, file="PathFilter.cs"];
m8_29 [label="value = value.Parent", span="66-66", cluster="Newtonsoft.Json.Linq.JsonPath.PathFilter.GetNextScanValue(Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken)", color=green, community=0, file="PathFilter.cs"];
m8_33 [label="return value;", span="79-79", cluster="Newtonsoft.Json.Linq.JsonPath.PathFilter.GetNextScanValue(Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken)", color=green, community=0, file="PathFilter.cs"];
m8_30 [label="value == null || value == originalParent", span="70-70", cluster="Newtonsoft.Json.Linq.JsonPath.PathFilter.GetNextScanValue(Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken)", color=green, community=0, file="PathFilter.cs"];
m8_32 [label="value = value.Next", span="76-76", cluster="Newtonsoft.Json.Linq.JsonPath.PathFilter.GetNextScanValue(Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken)", color=green, community=0, file="PathFilter.cs"];
m8_31 [label="return null;", span="72-72", cluster="Newtonsoft.Json.Linq.JsonPath.PathFilter.GetNextScanValue(Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken)", color=green, community=0, file="PathFilter.cs"];
m8_34 [label="Exit Newtonsoft.Json.Linq.JsonPath.PathFilter.GetNextScanValue(Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken)", span="54-54", cluster="Newtonsoft.Json.Linq.JsonPath.PathFilter.GetNextScanValue(Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken)", file="PathFilter.cs"];
m8_2 [label="Entry Newtonsoft.Json.Linq.JsonPath.PathFilter.GetTokenIndex(Newtonsoft.Json.Linq.JToken, bool, int)", span="10-10", cluster="Newtonsoft.Json.Linq.JsonPath.PathFilter.GetTokenIndex(Newtonsoft.Json.Linq.JToken, bool, int)", file="PathFilter.cs"];
m8_3 [label="JArray a = t as JArray", span="12-12", cluster="Newtonsoft.Json.Linq.JsonPath.PathFilter.GetTokenIndex(Newtonsoft.Json.Linq.JToken, bool, int)", file="PathFilter.cs"];
m8_4 [label="JConstructor c = t as JConstructor", span="13-13", cluster="Newtonsoft.Json.Linq.JsonPath.PathFilter.GetTokenIndex(Newtonsoft.Json.Linq.JToken, bool, int)", file="PathFilter.cs"];
m8_6 [label="a.Count <= index", span="17-17", cluster="Newtonsoft.Json.Linq.JsonPath.PathFilter.GetTokenIndex(Newtonsoft.Json.Linq.JToken, bool, int)", file="PathFilter.cs"];
m8_7 [label=errorWhenNoMatch, span="19-19", cluster="Newtonsoft.Json.Linq.JsonPath.PathFilter.GetTokenIndex(Newtonsoft.Json.Linq.JToken, bool, int)", file="PathFilter.cs"];
m8_8 [label="throw new JsonException(''Index {0} outside the bounds of JArray.''.FormatWith(CultureInfo.InvariantCulture, index));", span="21-21", cluster="Newtonsoft.Json.Linq.JsonPath.PathFilter.GetTokenIndex(Newtonsoft.Json.Linq.JToken, bool, int)", file="PathFilter.cs"];
m8_10 [label="return a[index];", span="27-27", cluster="Newtonsoft.Json.Linq.JsonPath.PathFilter.GetTokenIndex(Newtonsoft.Json.Linq.JToken, bool, int)", file="PathFilter.cs"];
m8_12 [label="c.Count <= index", span="31-31", cluster="Newtonsoft.Json.Linq.JsonPath.PathFilter.GetTokenIndex(Newtonsoft.Json.Linq.JToken, bool, int)", file="PathFilter.cs"];
m8_13 [label=errorWhenNoMatch, span="33-33", cluster="Newtonsoft.Json.Linq.JsonPath.PathFilter.GetTokenIndex(Newtonsoft.Json.Linq.JToken, bool, int)", file="PathFilter.cs"];
m8_14 [label="throw new JsonException(''Index {0} outside the bounds of JConstructor.''.FormatWith(CultureInfo.InvariantCulture, index));", span="35-35", cluster="Newtonsoft.Json.Linq.JsonPath.PathFilter.GetTokenIndex(Newtonsoft.Json.Linq.JToken, bool, int)", file="PathFilter.cs"];
m8_16 [label="return c[index];", span="41-41", cluster="Newtonsoft.Json.Linq.JsonPath.PathFilter.GetTokenIndex(Newtonsoft.Json.Linq.JToken, bool, int)", file="PathFilter.cs"];
m8_17 [label=errorWhenNoMatch, span="45-45", cluster="Newtonsoft.Json.Linq.JsonPath.PathFilter.GetTokenIndex(Newtonsoft.Json.Linq.JToken, bool, int)", file="PathFilter.cs"];
m8_18 [label="throw new JsonException(''Index {0} not valid on {1}.''.FormatWith(CultureInfo.InvariantCulture, index, t.GetType().Name));", span="47-47", cluster="Newtonsoft.Json.Linq.JsonPath.PathFilter.GetTokenIndex(Newtonsoft.Json.Linq.JToken, bool, int)", file="PathFilter.cs"];
m8_5 [label="a != null", span="15-15", cluster="Newtonsoft.Json.Linq.JsonPath.PathFilter.GetTokenIndex(Newtonsoft.Json.Linq.JToken, bool, int)", file="PathFilter.cs"];
m8_11 [label="c != null", span="29-29", cluster="Newtonsoft.Json.Linq.JsonPath.PathFilter.GetTokenIndex(Newtonsoft.Json.Linq.JToken, bool, int)", file="PathFilter.cs"];
m8_9 [label="return null;", span="24-24", cluster="Newtonsoft.Json.Linq.JsonPath.PathFilter.GetTokenIndex(Newtonsoft.Json.Linq.JToken, bool, int)", file="PathFilter.cs"];
m8_15 [label="return null;", span="38-38", cluster="Newtonsoft.Json.Linq.JsonPath.PathFilter.GetTokenIndex(Newtonsoft.Json.Linq.JToken, bool, int)", file="PathFilter.cs"];
m8_19 [label="return null;", span="50-50", cluster="Newtonsoft.Json.Linq.JsonPath.PathFilter.GetTokenIndex(Newtonsoft.Json.Linq.JToken, bool, int)", file="PathFilter.cs"];
m8_20 [label="Exit Newtonsoft.Json.Linq.JsonPath.PathFilter.GetTokenIndex(Newtonsoft.Json.Linq.JToken, bool, int)", span="10-10", cluster="Newtonsoft.Json.Linq.JsonPath.PathFilter.GetTokenIndex(Newtonsoft.Json.Linq.JToken, bool, int)", file="PathFilter.cs"];
m8_0 [label="Entry Newtonsoft.Json.Linq.JsonPath.PathFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", span="8-8", cluster="Newtonsoft.Json.Linq.JsonPath.PathFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="PathFilter.cs"];
m8_1 [label="Exit Newtonsoft.Json.Linq.JsonPath.PathFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", span="8-8", cluster="Newtonsoft.Json.Linq.JsonPath.PathFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="PathFilter.cs"];
m8_23 [label="Entry object.GetType()", span="0-0", cluster="object.GetType()", file="PathFilter.cs"];
m8_24 [label="Entry string.FormatWith(System.IFormatProvider, object, object)", span="52-52", cluster="string.FormatWith(System.IFormatProvider, object, object)", file="PathFilter.cs"];
m8_21 [label="Entry Newtonsoft.Json.JsonException.JsonException(string)", span="54-54", cluster="Newtonsoft.Json.JsonException.JsonException(string)", file="PathFilter.cs"];
m8_22 [label="Entry string.FormatWith(System.IFormatProvider, object)", span="47-47", cluster="string.FormatWith(System.IFormatProvider, object)", file="PathFilter.cs"];
m9_11 [label="Entry Newtonsoft.Json.Linq.JsonPath.QueryExpression.IsMatch(Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken)", span="31-31", cluster="Newtonsoft.Json.Linq.JsonPath.QueryExpression.IsMatch(Newtonsoft.Json.Linq.JToken, Newtonsoft.Json.Linq.JToken)", file="QueryScanFilter.cs"];
m9_0 [label="Entry Newtonsoft.Json.Linq.JsonPath.QueryScanFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", span="9-9", cluster="Newtonsoft.Json.Linq.JsonPath.QueryScanFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="QueryScanFilter.cs"];
m9_1 [label=current, span="11-11", cluster="Newtonsoft.Json.Linq.JsonPath.QueryScanFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", color=green, community=0, file="QueryScanFilter.cs"];
m9_8 [label="yield return t;", span="27-27", cluster="Newtonsoft.Json.Linq.JsonPath.QueryScanFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", color=green, community=0, file="QueryScanFilter.cs"];
m9_7 [label="Expression.IsMatch(root, t)", span="25-25", cluster="Newtonsoft.Json.Linq.JsonPath.QueryScanFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", color=green, community=0, file="QueryScanFilter.cs"];
m9_2 [label="t is JContainer", span="13-13", cluster="Newtonsoft.Json.Linq.JsonPath.QueryScanFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", color=green, community=0, file="QueryScanFilter.cs"];
m9_6 [label="yield return d;", span="19-19", cluster="Newtonsoft.Json.Linq.JsonPath.QueryScanFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", color=green, community=0, file="QueryScanFilter.cs"];
m9_5 [label="Expression.IsMatch(root, d)", span="17-17", cluster="Newtonsoft.Json.Linq.JsonPath.QueryScanFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", color=green, community=0, file="QueryScanFilter.cs"];
m9_4 [label="c.DescendantsAndSelf()", span="15-15", cluster="Newtonsoft.Json.Linq.JsonPath.QueryScanFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", color=green, community=0, file="QueryScanFilter.cs"];
m9_3 [label=c, span="13-13", cluster="Newtonsoft.Json.Linq.JsonPath.QueryScanFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", color=green, community=0, file="QueryScanFilter.cs"];
m9_9 [label="Exit Newtonsoft.Json.Linq.JsonPath.QueryScanFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", span="9-9", cluster="Newtonsoft.Json.Linq.JsonPath.QueryScanFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="QueryScanFilter.cs"];
m9_10 [label="Entry Unk.DescendantsAndSelf", span="", cluster="Unk.DescendantsAndSelf", file="QueryScanFilter.cs"];
m9_12 [label="Newtonsoft.Json.Linq.JsonPath.QueryScanFilter", span="", file="QueryScanFilter.cs"];
m10_17 [label="Name == null", span="51-51", cluster="Newtonsoft.Json.Linq.JsonPath.ScanFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="ScanFilter.cs"];
m10_0 [label="Entry Newtonsoft.Json.Linq.JsonPath.ScanFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", span="8-8", cluster="Newtonsoft.Json.Linq.JsonPath.ScanFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="ScanFilter.cs"];
m10_1 [label=current, span="10-10", cluster="Newtonsoft.Json.Linq.JsonPath.ScanFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="ScanFilter.cs"];
m10_3 [label="yield return c;", span="14-14", cluster="Newtonsoft.Json.Linq.JsonPath.ScanFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="ScanFilter.cs"];
m10_16 [label="yield return e.Value;", span="46-46", cluster="Newtonsoft.Json.Linq.JsonPath.ScanFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="ScanFilter.cs"];
m10_18 [label="yield return value;", span="53-53", cluster="Newtonsoft.Json.Linq.JsonPath.ScanFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="ScanFilter.cs"];
m10_2 [label="Name == null", span="12-12", cluster="Newtonsoft.Json.Linq.JsonPath.ScanFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="ScanFilter.cs"];
m10_4 [label="JToken value = c", span="17-17", cluster="Newtonsoft.Json.Linq.JsonPath.ScanFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="ScanFilter.cs"];
m10_5 [label="JContainer container = c as JContainer", span="18-18", cluster="Newtonsoft.Json.Linq.JsonPath.ScanFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", color=green, community=0, file="ScanFilter.cs"];
m10_9 [label="value != null && value != c && value == value.Parent.Last", span="28-28", cluster="Newtonsoft.Json.Linq.JsonPath.ScanFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", color=red, community=0, file="ScanFilter.cs"];
m10_11 [label="value == null || value == c", span="33-33", cluster="Newtonsoft.Json.Linq.JsonPath.ScanFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", color=red, community=0, file="ScanFilter.cs"];
m10_10 [label="value = value.Parent", span="30-30", cluster="Newtonsoft.Json.Linq.JsonPath.ScanFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", color=red, community=0, file="ScanFilter.cs"];
m10_12 [label="value = value.Next", span="38-38", cluster="Newtonsoft.Json.Linq.JsonPath.ScanFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", color=red, community=0, file="ScanFilter.cs"];
m10_6 [label=true, span="20-20", cluster="Newtonsoft.Json.Linq.JsonPath.ScanFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="ScanFilter.cs"];
m10_7 [label="value = GetNextScanValue(c, container, value)", span="22-22", cluster="Newtonsoft.Json.Linq.JsonPath.ScanFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", color=green, community=0, file="ScanFilter.cs"];
m10_8 [label="value == null", span="23-23", cluster="Newtonsoft.Json.Linq.JsonPath.ScanFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", color=green, community=0, file="ScanFilter.cs"];
m10_13 [label="JProperty e = value as JProperty", span="41-41", cluster="Newtonsoft.Json.Linq.JsonPath.ScanFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="ScanFilter.cs"];
m10_19 [label="container = value as JContainer", span="57-57", cluster="Newtonsoft.Json.Linq.JsonPath.ScanFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="ScanFilter.cs"];
m10_14 [label="e != null", span="42-42", cluster="Newtonsoft.Json.Linq.JsonPath.ScanFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="ScanFilter.cs"];
m10_15 [label="e.Name == Name", span="44-44", cluster="Newtonsoft.Json.Linq.JsonPath.ScanFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="ScanFilter.cs"];
m10_20 [label="Exit Newtonsoft.Json.Linq.JsonPath.ScanFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", span="8-8", cluster="Newtonsoft.Json.Linq.JsonPath.ScanFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="ScanFilter.cs"];
m10_21 [label="Newtonsoft.Json.Linq.JsonPath.ScanFilter", span="", file="ScanFilter.cs"];
m11_14 [label="e.Name == name", span="41-41", cluster="Newtonsoft.Json.Linq.JsonPath.ScanMultipleFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="ScanMultipleFilter.cs"];
m11_0 [label="Entry Newtonsoft.Json.Linq.JsonPath.ScanMultipleFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", span="8-8", cluster="Newtonsoft.Json.Linq.JsonPath.ScanMultipleFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="ScanMultipleFilter.cs"];
m11_1 [label=current, span="10-10", cluster="Newtonsoft.Json.Linq.JsonPath.ScanMultipleFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="ScanMultipleFilter.cs"];
m11_15 [label="yield return e.Value;", span="43-43", cluster="Newtonsoft.Json.Linq.JsonPath.ScanMultipleFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="ScanMultipleFilter.cs"];
m11_2 [label="JToken value = c", span="12-12", cluster="Newtonsoft.Json.Linq.JsonPath.ScanMultipleFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="ScanMultipleFilter.cs"];
m11_3 [label="JContainer container = c as JContainer", span="13-13", cluster="Newtonsoft.Json.Linq.JsonPath.ScanMultipleFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", color=green, community=0, file="ScanMultipleFilter.cs"];
m11_7 [label="value != null && value != c && value == value.Parent.Last", span="23-23", cluster="Newtonsoft.Json.Linq.JsonPath.ScanMultipleFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", color=red, community=0, file="ScanMultipleFilter.cs"];
m11_9 [label="value == null || value == c", span="28-28", cluster="Newtonsoft.Json.Linq.JsonPath.ScanMultipleFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", color=red, community=0, file="ScanMultipleFilter.cs"];
m11_8 [label="value = value.Parent", span="25-25", cluster="Newtonsoft.Json.Linq.JsonPath.ScanMultipleFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", color=red, community=0, file="ScanMultipleFilter.cs"];
m11_10 [label="value = value.Next", span="33-33", cluster="Newtonsoft.Json.Linq.JsonPath.ScanMultipleFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", color=red, community=0, file="ScanMultipleFilter.cs"];
m11_4 [label=true, span="15-15", cluster="Newtonsoft.Json.Linq.JsonPath.ScanMultipleFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="ScanMultipleFilter.cs"];
m11_5 [label="value = GetNextScanValue(c, container, value)", span="17-17", cluster="Newtonsoft.Json.Linq.JsonPath.ScanMultipleFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", color=green, community=0, file="ScanMultipleFilter.cs"];
m11_6 [label="value == null", span="18-18", cluster="Newtonsoft.Json.Linq.JsonPath.ScanMultipleFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", color=green, community=0, file="ScanMultipleFilter.cs"];
m11_11 [label="JProperty e = value as JProperty", span="36-36", cluster="Newtonsoft.Json.Linq.JsonPath.ScanMultipleFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="ScanMultipleFilter.cs"];
m11_16 [label="container = value as JContainer", span="48-48", cluster="Newtonsoft.Json.Linq.JsonPath.ScanMultipleFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="ScanMultipleFilter.cs"];
m11_12 [label="e != null", span="37-37", cluster="Newtonsoft.Json.Linq.JsonPath.ScanMultipleFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="ScanMultipleFilter.cs"];
m11_13 [label=Names, span="39-39", cluster="Newtonsoft.Json.Linq.JsonPath.ScanMultipleFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="ScanMultipleFilter.cs"];
m11_17 [label="Exit Newtonsoft.Json.Linq.JsonPath.ScanMultipleFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", span="8-8", cluster="Newtonsoft.Json.Linq.JsonPath.ScanMultipleFilter.ExecuteFilter(Newtonsoft.Json.Linq.JToken, System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="ScanMultipleFilter.cs"];
m11_18 [label="Newtonsoft.Json.Linq.JsonPath.ScanMultipleFilter", span="", file="ScanMultipleFilter.cs"];
m13_125 [label="Entry System.Exception.Exception(string)", span="0-0", cluster="System.Exception.Exception(string)", file="TestFixtureBase.cs"];
m13_90 [label="Entry Unk.Contains", span="", cluster="Unk.Contains", file="TestFixtureBase.cs"];
m13_80 [label="Entry Newtonsoft.Json.Tests.CustomAssert.IsInstanceOfType(System.Type, object)", span="311-311", cluster="Newtonsoft.Json.Tests.CustomAssert.IsInstanceOfType(System.Type, object)", file="TestFixtureBase.cs"];
m13_81 [label="Assert.IsInstanceOf(t, instance)", span="313-313", cluster="Newtonsoft.Json.Tests.CustomAssert.IsInstanceOfType(System.Type, object)", file="TestFixtureBase.cs"];
m13_82 [label="Exit Newtonsoft.Json.Tests.CustomAssert.IsInstanceOfType(System.Type, object)", span="311-311", cluster="Newtonsoft.Json.Tests.CustomAssert.IsInstanceOfType(System.Type, object)", file="TestFixtureBase.cs"];
m13_27 [label="Entry System.IO.MemoryStream.ToArray()", span="0-0", cluster="System.IO.MemoryStream.ToArray()", file="TestFixtureBase.cs"];
m13_38 [label="Entry System.DateTime.SpecifyKind(System.DateTime, System.DateTimeKind)", span="0-0", cluster="System.DateTime.SpecifyKind(System.DateTime, System.DateTimeKind)", file="TestFixtureBase.cs"];
m13_11 [label="Entry System.Type.GetField(string)", span="0-0", cluster="System.Type.GetField(string)", file="TestFixtureBase.cs"];
m13_12 [label="Entry Newtonsoft.Json.Tests.TestReflectionUtils.GetMethod(System.Type, string)", span="89-89", cluster="Newtonsoft.Json.Tests.TestReflectionUtils.GetMethod(System.Type, string)", file="TestFixtureBase.cs"];
m13_13 [label="return type.GetMethod(name);", span="92-92", cluster="Newtonsoft.Json.Tests.TestReflectionUtils.GetMethod(System.Type, string)", file="TestFixtureBase.cs"];
m13_14 [label="Exit Newtonsoft.Json.Tests.TestReflectionUtils.GetMethod(System.Type, string)", span="89-89", cluster="Newtonsoft.Json.Tests.TestReflectionUtils.GetMethod(System.Type, string)", file="TestFixtureBase.cs"];
m13_73 [label="Entry Newtonsoft.Json.Tests.TestFixtureBase.WriteEscapedJson(string)", span="298-298", cluster="Newtonsoft.Json.Tests.TestFixtureBase.WriteEscapedJson(string)", file="TestFixtureBase.cs"];
m13_74 [label="Console.WriteLine(EscapeJson(json))", span="300-300", cluster="Newtonsoft.Json.Tests.TestFixtureBase.WriteEscapedJson(string)", file="TestFixtureBase.cs"];
m13_75 [label="Exit Newtonsoft.Json.Tests.TestFixtureBase.WriteEscapedJson(string)", span="298-298", cluster="Newtonsoft.Json.Tests.TestFixtureBase.WriteEscapedJson(string)", file="TestFixtureBase.cs"];
m13_16 [label="Entry Newtonsoft.Json.Tests.TestFixtureBase.GetDataContractJsonSerializeResult(object)", span="201-201", cluster="Newtonsoft.Json.Tests.TestFixtureBase.GetDataContractJsonSerializeResult(object)", file="TestFixtureBase.cs"];
m13_17 [label="MemoryStream ms = new MemoryStream()", span="203-203", cluster="Newtonsoft.Json.Tests.TestFixtureBase.GetDataContractJsonSerializeResult(object)", file="TestFixtureBase.cs"];
m13_18 [label="DataContractJsonSerializer s = new DataContractJsonSerializer(o.GetType())", span="204-204", cluster="Newtonsoft.Json.Tests.TestFixtureBase.GetDataContractJsonSerializeResult(object)", file="TestFixtureBase.cs"];
m13_19 [label="s.WriteObject(ms, o)", span="205-205", cluster="Newtonsoft.Json.Tests.TestFixtureBase.GetDataContractJsonSerializeResult(object)", file="TestFixtureBase.cs"];
m13_20 [label="var data = ms.ToArray()", span="207-207", cluster="Newtonsoft.Json.Tests.TestFixtureBase.GetDataContractJsonSerializeResult(object)", file="TestFixtureBase.cs"];
m13_21 [label="return Encoding.UTF8.GetString(data, 0, data.Length);", span="208-208", cluster="Newtonsoft.Json.Tests.TestFixtureBase.GetDataContractJsonSerializeResult(object)", file="TestFixtureBase.cs"];
m13_22 [label="Exit Newtonsoft.Json.Tests.TestFixtureBase.GetDataContractJsonSerializeResult(object)", span="201-201", cluster="Newtonsoft.Json.Tests.TestFixtureBase.GetDataContractJsonSerializeResult(object)", file="TestFixtureBase.cs"];
m13_4 [label="Entry Newtonsoft.Json.Tests.TestReflectionUtils.GetProperty(System.Type, string)", span="71-71", cluster="Newtonsoft.Json.Tests.TestReflectionUtils.GetProperty(System.Type, string)", file="TestFixtureBase.cs"];
m13_5 [label="return type.GetProperty(name);", span="74-74", cluster="Newtonsoft.Json.Tests.TestReflectionUtils.GetProperty(System.Type, string)", file="TestFixtureBase.cs"];
m13_6 [label="Exit Newtonsoft.Json.Tests.TestReflectionUtils.GetProperty(System.Type, string)", span="71-71", cluster="Newtonsoft.Json.Tests.TestReflectionUtils.GetProperty(System.Type, string)", file="TestFixtureBase.cs"];
m13_87 [label="Entry Newtonsoft.Json.Tests.CustomAssert.Contains(System.Collections.IList, object, string)", span="321-321", cluster="Newtonsoft.Json.Tests.CustomAssert.Contains(System.Collections.IList, object, string)", file="TestFixtureBase.cs"];
m13_88 [label="Assert.Contains(value, collection, message)", span="324-324", cluster="Newtonsoft.Json.Tests.CustomAssert.Contains(System.Collections.IList, object, string)", file="TestFixtureBase.cs"];
m13_89 [label="Exit Newtonsoft.Json.Tests.CustomAssert.Contains(System.Collections.IList, object, string)", span="321-321", cluster="Newtonsoft.Json.Tests.CustomAssert.Contains(System.Collections.IList, object, string)", file="TestFixtureBase.cs"];
m13_96 [label="Entry Newtonsoft.Json.Tests.StringAssert.Normalize(string)", span="354-354", cluster="Newtonsoft.Json.Tests.StringAssert.Normalize(string)", file="TestFixtureBase.cs"];
m13_104 [label="s != null", span="356-356", cluster="Newtonsoft.Json.Tests.StringAssert.Normalize(string)", file="TestFixtureBase.cs"];
m13_105 [label="s = Regex.Replace(s, ''\r\n'')", span="358-358", cluster="Newtonsoft.Json.Tests.StringAssert.Normalize(string)", file="TestFixtureBase.cs"];
m13_106 [label="return s;", span="361-361", cluster="Newtonsoft.Json.Tests.StringAssert.Normalize(string)", file="TestFixtureBase.cs"];
m13_107 [label="Exit Newtonsoft.Json.Tests.StringAssert.Normalize(string)", span="354-354", cluster="Newtonsoft.Json.Tests.StringAssert.Normalize(string)", file="TestFixtureBase.cs"];
m13_126 [label="Entry string.Join(string, params string[])", span="0-0", cluster="string.Join(string, params string[])", file="TestFixtureBase.cs"];
m13_53 [label="Entry Newtonsoft.Json.Tests.TestFixtureBase.HexToBytes(string)", span="245-245", cluster="Newtonsoft.Json.Tests.TestFixtureBase.HexToBytes(string)", file="TestFixtureBase.cs"];
m13_54 [label="string fixedHex = hex.Replace(''-'', string.Empty)", span="247-247", cluster="Newtonsoft.Json.Tests.TestFixtureBase.HexToBytes(string)", file="TestFixtureBase.cs"];
m13_55 [label="byte[] bytes = new byte[fixedHex.Length / 2]", span="250-250", cluster="Newtonsoft.Json.Tests.TestFixtureBase.HexToBytes(string)", file="TestFixtureBase.cs"];
m13_58 [label=fixedHex, span="256-256", cluster="Newtonsoft.Json.Tests.TestFixtureBase.HexToBytes(string)", file="TestFixtureBase.cs"];
m13_56 [label="int shift = 4", span="252-252", cluster="Newtonsoft.Json.Tests.TestFixtureBase.HexToBytes(string)", file="TestFixtureBase.cs"];
m13_62 [label="bytes[offset] |= (byte)(b << shift)", span="267-267", cluster="Newtonsoft.Json.Tests.TestFixtureBase.HexToBytes(string)", file="TestFixtureBase.cs"];
m13_66 [label="return bytes;", span="276-276", cluster="Newtonsoft.Json.Tests.TestFixtureBase.HexToBytes(string)", file="TestFixtureBase.cs"];
m13_57 [label="int offset = 0", span="254-254", cluster="Newtonsoft.Json.Tests.TestFixtureBase.HexToBytes(string)", file="TestFixtureBase.cs"];
m13_63 [label="shift ^= 4", span="269-269", cluster="Newtonsoft.Json.Tests.TestFixtureBase.HexToBytes(string)", file="TestFixtureBase.cs"];
m13_65 [label="offset++", span="273-273", cluster="Newtonsoft.Json.Tests.TestFixtureBase.HexToBytes(string)", file="TestFixtureBase.cs"];
m13_59 [label="int b = (c - '0') % 32", span="260-260", cluster="Newtonsoft.Json.Tests.TestFixtureBase.HexToBytes(string)", file="TestFixtureBase.cs"];
m13_60 [label="b > 9", span="262-262", cluster="Newtonsoft.Json.Tests.TestFixtureBase.HexToBytes(string)", file="TestFixtureBase.cs"];
m13_61 [label="b -= 7", span="264-264", cluster="Newtonsoft.Json.Tests.TestFixtureBase.HexToBytes(string)", file="TestFixtureBase.cs"];
m13_64 [label="shift != 0", span="271-271", cluster="Newtonsoft.Json.Tests.TestFixtureBase.HexToBytes(string)", file="TestFixtureBase.cs"];
m13_67 [label="Exit Newtonsoft.Json.Tests.TestFixtureBase.HexToBytes(string)", span="245-245", cluster="Newtonsoft.Json.Tests.TestFixtureBase.HexToBytes(string)", file="TestFixtureBase.cs"];
m13_39 [label="Entry System.DateTime.GetUtcOffset()", span="51-51", cluster="System.DateTime.GetUtcOffset()", file="TestFixtureBase.cs"];
m13_8 [label="Entry Newtonsoft.Json.Tests.TestReflectionUtils.GetField(System.Type, string)", span="80-80", cluster="Newtonsoft.Json.Tests.TestReflectionUtils.GetField(System.Type, string)", file="TestFixtureBase.cs"];
m13_9 [label="return type.GetField(name);", span="83-83", cluster="Newtonsoft.Json.Tests.TestReflectionUtils.GetField(System.Type, string)", file="TestFixtureBase.cs"];
m13_10 [label="Exit Newtonsoft.Json.Tests.TestReflectionUtils.GetField(System.Type, string)", span="80-80", cluster="Newtonsoft.Json.Tests.TestReflectionUtils.GetField(System.Type, string)", file="TestFixtureBase.cs"];
m13_128 [label="Entry System.Exception.GetType()", span="0-0", cluster="System.Exception.GetType()", file="TestFixtureBase.cs"];
m13_129 [label="Entry string.Format(string, object, object)", span="0-0", cluster="string.Format(string, object, object)", file="TestFixtureBase.cs"];
m13_15 [label="Entry System.Type.GetMethod(string)", span="0-0", cluster="System.Type.GetMethod(string)", file="TestFixtureBase.cs"];
m13_108 [label="Entry System.Text.RegularExpressions.Regex.Replace(string, string)", span="0-0", cluster="System.Text.RegularExpressions.Regex.Replace(string, string)", file="TestFixtureBase.cs"];
m13_28 [label="Entry System.Text.Encoding.GetString(byte[], int, int)", span="0-0", cluster="System.Text.Encoding.GetString(byte[], int, int)", file="TestFixtureBase.cs"];
m13_3 [label="Entry System.Type.GetConstructors()", span="0-0", cluster="System.Type.GetConstructors()", file="TestFixtureBase.cs"];
m13_77 [label="Entry System.Console.WriteLine(string)", span="0-0", cluster="System.Console.WriteLine(string)", file="TestFixtureBase.cs"];
m13_98 [label="Entry Newtonsoft.Json.Tests.StringAssert.Equals(string, string)", span="346-346", cluster="Newtonsoft.Json.Tests.StringAssert.Equals(string, string)", file="TestFixtureBase.cs"];
m13_99 [label="s1 = Normalize(s1)", span="348-348", cluster="Newtonsoft.Json.Tests.StringAssert.Equals(string, string)", file="TestFixtureBase.cs"];
m13_100 [label="s2 = Normalize(s2)", span="349-349", cluster="Newtonsoft.Json.Tests.StringAssert.Equals(string, string)", file="TestFixtureBase.cs"];
m13_101 [label="return string.Equals(s1, s2);", span="351-351", cluster="Newtonsoft.Json.Tests.StringAssert.Equals(string, string)", file="TestFixtureBase.cs"];
m13_102 [label="Exit Newtonsoft.Json.Tests.StringAssert.Equals(string, string)", span="346-346", cluster="Newtonsoft.Json.Tests.StringAssert.Equals(string, string)", file="TestFixtureBase.cs"];
m13_123 [label="Entry System.Action.Invoke()", span="0-0", cluster="System.Action.Invoke()", file="TestFixtureBase.cs"];
m13_76 [label="Entry Newtonsoft.Json.Tests.TestFixtureBase.EscapeJson(string)", span="303-303", cluster="Newtonsoft.Json.Tests.TestFixtureBase.EscapeJson(string)", file="TestFixtureBase.cs"];
m13_78 [label="return @''@'''''' + json.Replace(@'''''''', @'''''''''''') + @'''''''';", span="305-305", cluster="Newtonsoft.Json.Tests.TestFixtureBase.EscapeJson(string)", file="TestFixtureBase.cs"];
m13_79 [label="Exit Newtonsoft.Json.Tests.TestFixtureBase.EscapeJson(string)", span="303-303", cluster="Newtonsoft.Json.Tests.TestFixtureBase.EscapeJson(string)", file="TestFixtureBase.cs"];
m13_0 [label="Entry Newtonsoft.Json.Tests.TestReflectionUtils.GetConstructors(System.Type)", span="62-62", cluster="Newtonsoft.Json.Tests.TestReflectionUtils.GetConstructors(System.Type)", file="TestFixtureBase.cs"];
m13_1 [label="return type.GetConstructors();", span="65-65", cluster="Newtonsoft.Json.Tests.TestReflectionUtils.GetConstructors(System.Type)", file="TestFixtureBase.cs"];
m13_2 [label="Exit Newtonsoft.Json.Tests.TestReflectionUtils.GetConstructors(System.Type)", span="62-62", cluster="Newtonsoft.Json.Tests.TestReflectionUtils.GetConstructors(System.Type)", file="TestFixtureBase.cs"];
m13_97 [label="Entry Unk.AreEqual", span="", cluster="Unk.AreEqual", file="TestFixtureBase.cs"];
m13_23 [label="Entry System.IO.MemoryStream.MemoryStream()", span="0-0", cluster="System.IO.MemoryStream.MemoryStream()", file="TestFixtureBase.cs"];
m13_103 [label="Entry string.Equals(string, string)", span="0-0", cluster="string.Equals(string, string)", file="TestFixtureBase.cs"];
m13_29 [label="Entry Newtonsoft.Json.Tests.TestFixtureBase.ResolvePath(string)", span="212-212", cluster="Newtonsoft.Json.Tests.TestFixtureBase.ResolvePath(string)", file="TestFixtureBase.cs"];
m13_30 [label="return Path.Combine(TestContext.CurrentContext.TestDirectory, path);", span="215-215", cluster="Newtonsoft.Json.Tests.TestFixtureBase.ResolvePath(string)", file="TestFixtureBase.cs"];
m13_31 [label="Exit Newtonsoft.Json.Tests.TestFixtureBase.ResolvePath(string)", span="212-212", cluster="Newtonsoft.Json.Tests.TestFixtureBase.ResolvePath(string)", file="TestFixtureBase.cs"];
m13_26 [label="Entry Unk.WriteObject", span="", cluster="Unk.WriteObject", file="TestFixtureBase.cs"];
m13_45 [label="Entry Newtonsoft.Json.Tests.TestFixtureBase.BytesToHex(byte[], bool)", span="234-234", cluster="Newtonsoft.Json.Tests.TestFixtureBase.BytesToHex(byte[], bool)", file="TestFixtureBase.cs"];
m13_46 [label="string hex = BitConverter.ToString(bytes)", span="236-236", cluster="Newtonsoft.Json.Tests.TestFixtureBase.BytesToHex(byte[], bool)", file="TestFixtureBase.cs"];
m13_47 [label=removeDashes, span="237-237", cluster="Newtonsoft.Json.Tests.TestFixtureBase.BytesToHex(byte[], bool)", file="TestFixtureBase.cs"];
m13_48 [label="hex = hex.Replace(''-'', '''')", span="239-239", cluster="Newtonsoft.Json.Tests.TestFixtureBase.BytesToHex(byte[], bool)", file="TestFixtureBase.cs"];
m13_49 [label="return hex;", span="242-242", cluster="Newtonsoft.Json.Tests.TestFixtureBase.BytesToHex(byte[], bool)", file="TestFixtureBase.cs"];
m13_50 [label="Exit Newtonsoft.Json.Tests.TestFixtureBase.BytesToHex(byte[], bool)", span="234-234", cluster="Newtonsoft.Json.Tests.TestFixtureBase.BytesToHex(byte[], bool)", file="TestFixtureBase.cs"];
m13_41 [label="Entry string.String(char[], int, int)", span="0-0", cluster="string.String(char[], int, int)", file="TestFixtureBase.cs"];
m13_32 [label="Entry Unk.Combine", span="", cluster="Unk.Combine", file="TestFixtureBase.cs"];
m13_127 [label="Entry System.Exception.Exception(string, System.Exception)", span="0-0", cluster="System.Exception.Exception(string, System.Exception)", file="TestFixtureBase.cs"];
m13_68 [label="Entry Newtonsoft.Json.Tests.TestFixtureBase.TestSetup()", span="283-283", cluster="Newtonsoft.Json.Tests.TestFixtureBase.TestSetup()", file="TestFixtureBase.cs"];
m13_69 [label="Thread.CurrentThread.CurrentCulture = CultureInfo.InvariantCulture", span="291-291", cluster="Newtonsoft.Json.Tests.TestFixtureBase.TestSetup()", file="TestFixtureBase.cs"];
m13_70 [label="Thread.CurrentThread.CurrentUICulture = CultureInfo.InvariantCulture", span="292-292", cluster="Newtonsoft.Json.Tests.TestFixtureBase.TestSetup()", file="TestFixtureBase.cs"];
m13_71 [label="JsonConvert.DefaultSettings = null", span="295-295", cluster="Newtonsoft.Json.Tests.TestFixtureBase.TestSetup()", file="TestFixtureBase.cs"];
m13_72 [label="Exit Newtonsoft.Json.Tests.TestFixtureBase.TestSetup()", span="283-283", cluster="Newtonsoft.Json.Tests.TestFixtureBase.TestSetup()", file="TestFixtureBase.cs"];
m13_52 [label="Entry string.Replace(string, string)", span="0-0", cluster="string.Replace(string, string)", file="TestFixtureBase.cs"];
m13_124 [label="Entry Unk.Fail", span="", cluster="Unk.Fail", file="TestFixtureBase.cs"];
m13_7 [label="Entry System.Type.GetProperty(string)", span="0-0", cluster="System.Type.GetProperty(string)", file="TestFixtureBase.cs"];
m13_24 [label="Entry DataContractJsonSerializer.cstr", span="", cluster="DataContractJsonSerializer.cstr", file="TestFixtureBase.cs"];
m13_33 [label="Entry Newtonsoft.Json.Tests.TestFixtureBase.GetOffset(System.DateTime, Newtonsoft.Json.DateFormatHandling)", span="221-221", cluster="Newtonsoft.Json.Tests.TestFixtureBase.GetOffset(System.DateTime, Newtonsoft.Json.DateFormatHandling)", file="TestFixtureBase.cs"];
m13_34 [label="char[] chars = new char[8]", span="223-223", cluster="Newtonsoft.Json.Tests.TestFixtureBase.GetOffset(System.DateTime, Newtonsoft.Json.DateFormatHandling)", file="TestFixtureBase.cs"];
m13_35 [label="int pos = DateTimeUtils.WriteDateTimeOffset(chars, 0, DateTime.SpecifyKind(d, DateTimeKind.Local).GetUtcOffset(), dateFormatHandling)", span="224-224", cluster="Newtonsoft.Json.Tests.TestFixtureBase.GetOffset(System.DateTime, Newtonsoft.Json.DateFormatHandling)", file="TestFixtureBase.cs"];
m13_36 [label="return new string(chars, 0, pos);", span="226-226", cluster="Newtonsoft.Json.Tests.TestFixtureBase.GetOffset(System.DateTime, Newtonsoft.Json.DateFormatHandling)", file="TestFixtureBase.cs"];
m13_37 [label="Exit Newtonsoft.Json.Tests.TestFixtureBase.GetOffset(System.DateTime, Newtonsoft.Json.DateFormatHandling)", span="221-221", cluster="Newtonsoft.Json.Tests.TestFixtureBase.GetOffset(System.DateTime, Newtonsoft.Json.DateFormatHandling)", file="TestFixtureBase.cs"];
m13_25 [label="Entry object.GetType()", span="0-0", cluster="object.GetType()", file="TestFixtureBase.cs"];
m13_91 [label="Entry Newtonsoft.Json.Tests.StringAssert.AreEqual(string, string)", span="338-338", cluster="Newtonsoft.Json.Tests.StringAssert.AreEqual(string, string)", file="TestFixtureBase.cs"];
m13_92 [label="expected = Normalize(expected)", span="340-340", cluster="Newtonsoft.Json.Tests.StringAssert.AreEqual(string, string)", file="TestFixtureBase.cs"];
m13_93 [label="actual = Normalize(actual)", span="341-341", cluster="Newtonsoft.Json.Tests.StringAssert.AreEqual(string, string)", file="TestFixtureBase.cs"];
m13_94 [label="Assert.AreEqual(expected, actual)", span="343-343", cluster="Newtonsoft.Json.Tests.StringAssert.AreEqual(string, string)", file="TestFixtureBase.cs"];
m13_95 [label="Exit Newtonsoft.Json.Tests.StringAssert.AreEqual(string, string)", span="338-338", cluster="Newtonsoft.Json.Tests.StringAssert.AreEqual(string, string)", file="TestFixtureBase.cs"];
m13_84 [label="Entry Newtonsoft.Json.Tests.CustomAssert.Contains(System.Collections.IList, object)", span="316-316", cluster="Newtonsoft.Json.Tests.CustomAssert.Contains(System.Collections.IList, object)", file="TestFixtureBase.cs"];
m13_85 [label="Contains(collection, value, null)", span="318-318", cluster="Newtonsoft.Json.Tests.CustomAssert.Contains(System.Collections.IList, object)", file="TestFixtureBase.cs"];
m13_86 [label="Exit Newtonsoft.Json.Tests.CustomAssert.Contains(System.Collections.IList, object)", span="316-316", cluster="Newtonsoft.Json.Tests.CustomAssert.Contains(System.Collections.IList, object)", file="TestFixtureBase.cs"];
m13_42 [label="Entry Newtonsoft.Json.Tests.TestFixtureBase.BytesToHex(byte[])", span="229-229", cluster="Newtonsoft.Json.Tests.TestFixtureBase.BytesToHex(byte[])", file="TestFixtureBase.cs"];
m13_43 [label="return BytesToHex(bytes, false);", span="231-231", cluster="Newtonsoft.Json.Tests.TestFixtureBase.BytesToHex(byte[])", file="TestFixtureBase.cs"];
m13_44 [label="Exit Newtonsoft.Json.Tests.TestFixtureBase.BytesToHex(byte[])", span="229-229", cluster="Newtonsoft.Json.Tests.TestFixtureBase.BytesToHex(byte[])", file="TestFixtureBase.cs"];
m13_40 [label="Entry Newtonsoft.Json.Utilities.DateTimeUtils.WriteDateTimeOffset(char[], int, System.TimeSpan, Newtonsoft.Json.DateFormatHandling)", span="746-746", cluster="Newtonsoft.Json.Utilities.DateTimeUtils.WriteDateTimeOffset(char[], int, System.TimeSpan, Newtonsoft.Json.DateFormatHandling)", file="TestFixtureBase.cs"];
m13_109 [label="Entry Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", span="367-367", cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", file="TestFixtureBase.cs"];
m13_110 [label="action()", span="372-372", cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", file="TestFixtureBase.cs"];
m13_114 [label="possibleMessages == null || possibleMessages.Length == 0", span="379-379", cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", file="TestFixtureBase.cs"];
m13_116 [label=possibleMessages, span="383-383", cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", file="TestFixtureBase.cs"];
m13_119 [label="throw new Exception(''Unexpected exception message.'' + Environment.NewLine + ''Expected one of: '' + string.Join(Environment.NewLine, possibleMessages) + Environment.NewLine + ''Got: '' + ex.Message + Environment.NewLine + Environment.NewLine + ex);", span="391-391", cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", file="TestFixtureBase.cs"];
m13_111 [label="Assert.Fail(''Exception of type {0} expected. No exception thrown.'', typeof(TException).Name)", span="374-374", cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", file="TestFixtureBase.cs"];
m13_112 [label="return null;", span="375-375", cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", file="TestFixtureBase.cs"];
m13_113 [label=TException, span="377-377", cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", file="TestFixtureBase.cs"];
m13_115 [label="return ex;", span="381-381", cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", file="TestFixtureBase.cs"];
m13_117 [label="StringAssert.Equals(possibleMessage, ex.Message)", span="385-385", cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", file="TestFixtureBase.cs"];
m13_118 [label="return ex;", span="387-387", cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", file="TestFixtureBase.cs"];
m13_120 [label=Exception, span="393-393", cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", file="TestFixtureBase.cs"];
m13_121 [label="throw new Exception(string.Format(''Exception of type {0} expected; got exception of type {1}.'', typeof(TException).Name, ex.GetType().Name), ex);", span="395-395", cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", file="TestFixtureBase.cs"];
m13_122 [label="Exit Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", span="367-367", cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", file="TestFixtureBase.cs"];
m13_51 [label="Entry System.BitConverter.ToString(byte[])", span="0-0", cluster="System.BitConverter.ToString(byte[])", file="TestFixtureBase.cs"];
m13_130 [label="Entry Newtonsoft.Json.Tests.ExceptionAssert.ThrowsAsync<TException>(System.Func<System.Threading.Tasks.Task>, params string[])", span="400-400", cluster="Newtonsoft.Json.Tests.ExceptionAssert.ThrowsAsync<TException>(System.Func<System.Threading.Tasks.Task>, params string[])", file="TestFixtureBase.cs"];
m13_131 [label="await action()", span="405-405", cluster="Newtonsoft.Json.Tests.ExceptionAssert.ThrowsAsync<TException>(System.Func<System.Threading.Tasks.Task>, params string[])", file="TestFixtureBase.cs"];
m13_135 [label="possibleMessages == null || possibleMessages.Length == 0", span="412-412", cluster="Newtonsoft.Json.Tests.ExceptionAssert.ThrowsAsync<TException>(System.Func<System.Threading.Tasks.Task>, params string[])", file="TestFixtureBase.cs"];
m13_137 [label=possibleMessages, span="416-416", cluster="Newtonsoft.Json.Tests.ExceptionAssert.ThrowsAsync<TException>(System.Func<System.Threading.Tasks.Task>, params string[])", file="TestFixtureBase.cs"];
m13_140 [label="throw new Exception(''Unexpected exception message.'' + Environment.NewLine + ''Expected one of: '' + string.Join(Environment.NewLine, possibleMessages) + Environment.NewLine + ''Got: '' + ex.Message + Environment.NewLine + Environment.NewLine + ex);", span="424-424", cluster="Newtonsoft.Json.Tests.ExceptionAssert.ThrowsAsync<TException>(System.Func<System.Threading.Tasks.Task>, params string[])", file="TestFixtureBase.cs"];
m13_132 [label="Assert.Fail(''Exception of type {0} expected. No exception thrown.'', typeof(TException).Name)", span="407-407", cluster="Newtonsoft.Json.Tests.ExceptionAssert.ThrowsAsync<TException>(System.Func<System.Threading.Tasks.Task>, params string[])", file="TestFixtureBase.cs"];
m13_133 [label="return null;", span="408-408", cluster="Newtonsoft.Json.Tests.ExceptionAssert.ThrowsAsync<TException>(System.Func<System.Threading.Tasks.Task>, params string[])", file="TestFixtureBase.cs"];
m13_134 [label=TException, span="410-410", cluster="Newtonsoft.Json.Tests.ExceptionAssert.ThrowsAsync<TException>(System.Func<System.Threading.Tasks.Task>, params string[])", file="TestFixtureBase.cs"];
m13_136 [label="return ex;", span="414-414", cluster="Newtonsoft.Json.Tests.ExceptionAssert.ThrowsAsync<TException>(System.Func<System.Threading.Tasks.Task>, params string[])", file="TestFixtureBase.cs"];
m13_138 [label="StringAssert.Equals(possibleMessage, ex.Message)", span="418-418", cluster="Newtonsoft.Json.Tests.ExceptionAssert.ThrowsAsync<TException>(System.Func<System.Threading.Tasks.Task>, params string[])", file="TestFixtureBase.cs"];
m13_139 [label="return ex;", span="420-420", cluster="Newtonsoft.Json.Tests.ExceptionAssert.ThrowsAsync<TException>(System.Func<System.Threading.Tasks.Task>, params string[])", file="TestFixtureBase.cs"];
m13_141 [label=Exception, span="426-426", cluster="Newtonsoft.Json.Tests.ExceptionAssert.ThrowsAsync<TException>(System.Func<System.Threading.Tasks.Task>, params string[])", file="TestFixtureBase.cs"];
m13_142 [label="throw new Exception(string.Format(''Exception of type {0} expected; got exception of type {1}.'', typeof(TException).Name, ex.GetType().Name), ex);", span="428-428", cluster="Newtonsoft.Json.Tests.ExceptionAssert.ThrowsAsync<TException>(System.Func<System.Threading.Tasks.Task>, params string[])", file="TestFixtureBase.cs"];
m13_143 [label="Exit Newtonsoft.Json.Tests.ExceptionAssert.ThrowsAsync<TException>(System.Func<System.Threading.Tasks.Task>, params string[])", span="400-400", cluster="Newtonsoft.Json.Tests.ExceptionAssert.ThrowsAsync<TException>(System.Func<System.Threading.Tasks.Task>, params string[])", file="TestFixtureBase.cs"];
m13_83 [label="Entry Unk.IsInstanceOf", span="", cluster="Unk.IsInstanceOf", file="TestFixtureBase.cs"];
m13_144 [label="Entry System.Func<TResult>.Invoke()", span="0-0", cluster="System.Func<TResult>.Invoke()", file="TestFixtureBase.cs"];
m13_145 [label="Newtonsoft.Json.Tests.TestFixtureBase", span="", file="TestFixtureBase.cs"];
m16_132 [label="Entry XmlDocument.cstr", span="", cluster="XmlDocument.cstr", file="XmlNodeConverterTest.cs"];
m16_445 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NestedArrays()", span="1242-1242", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NestedArrays()", file="XmlNodeConverterTest.cs"];
m16_446 [label="string json = @''{\r\n  ''''available_sizes'''': [\r\n    [\r\n      ''''assets/images/resized/0001/1070/11070v1-max-150x150.jpg'''',\r\n      ''''assets/images/resized/0001/1070/11070v1-max-150x150.jpg''''\r\n    ],\r\n    [\r\n      ''''assets/images/resized/0001/1070/11070v1-max-250x250.jpg'''',\r\n      ''''assets/images/resized/0001/1070/11070v1-max-250x250.jpg''''\r\n    ],\r\n    [\r\n      ''''assets/images/resized/0001/1070/11070v1-max-250x250.jpg''''\r\n    ]\r\n  ]\r\n}''", span="1244-1258", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NestedArrays()", file="XmlNodeConverterTest.cs"];
m16_447 [label="XmlDocument newDoc = JsonConvert.DeserializeXmlNode(json, ''myRoot'')", span="1261-1261", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NestedArrays()", file="XmlNodeConverterTest.cs"];
m16_450 [label="XDocument newXDoc = JsonConvert.DeserializeXNode(json, ''myRoot'')", span="1281-1281", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NestedArrays()", file="XmlNodeConverterTest.cs"];
m16_448 [label="string xml = IndentXml(newDoc.InnerXml)", span="1263-1263", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NestedArrays()", file="XmlNodeConverterTest.cs"];
m16_449 [label="StringAssert.AreEqual(@''<myRoot>\r\n  <available_sizes>\r\n    <available_sizes>assets/images/resized/0001/1070/11070v1-max-150x150.jpg</available_sizes>\r\n    <available_sizes>assets/images/resized/0001/1070/11070v1-max-150x150.jpg</available_sizes>\r\n  </available_sizes>\r\n  <available_sizes>\r\n    <available_sizes>assets/images/resized/0001/1070/11070v1-max-250x250.jpg</available_sizes>\r\n    <available_sizes>assets/images/resized/0001/1070/11070v1-max-250x250.jpg</available_sizes>\r\n  </available_sizes>\r\n  <available_sizes>\r\n    <available_sizes>assets/images/resized/0001/1070/11070v1-max-250x250.jpg</available_sizes>\r\n  </available_sizes>\r\n</myRoot>'', IndentXml(newDoc.InnerXml))", span="1265-1277", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NestedArrays()", file="XmlNodeConverterTest.cs"];
m16_452 [label="string newJson = JsonConvert.SerializeXmlNode(newDoc, Formatting.Indented)", span="1299-1299", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NestedArrays()", file="XmlNodeConverterTest.cs"];
m16_451 [label="StringAssert.AreEqual(@''<myRoot>\r\n  <available_sizes>\r\n    <available_sizes>assets/images/resized/0001/1070/11070v1-max-150x150.jpg</available_sizes>\r\n    <available_sizes>assets/images/resized/0001/1070/11070v1-max-150x150.jpg</available_sizes>\r\n  </available_sizes>\r\n  <available_sizes>\r\n    <available_sizes>assets/images/resized/0001/1070/11070v1-max-250x250.jpg</available_sizes>\r\n    <available_sizes>assets/images/resized/0001/1070/11070v1-max-250x250.jpg</available_sizes>\r\n  </available_sizes>\r\n  <available_sizes>\r\n    <available_sizes>assets/images/resized/0001/1070/11070v1-max-250x250.jpg</available_sizes>\r\n  </available_sizes>\r\n</myRoot>'', IndentXml(newXDoc.ToString(SaveOptions.DisableFormatting)))", span="1283-1295", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NestedArrays()", file="XmlNodeConverterTest.cs"];
m16_453 [label="Console.WriteLine(newJson)", span="1300-1300", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NestedArrays()", file="XmlNodeConverterTest.cs"];
m16_454 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NestedArrays()", span="1242-1242", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NestedArrays()", file="XmlNodeConverterTest.cs"];
m16_821 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Utc_Precision()", span="2866-2866", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Utc_Precision()", file="XmlNodeConverterTest.cs"];
m16_822 [label="string json = @''{''''CreatedDate'''': ''''2014-01-23T00:00:00.1234567Z''''}''", span="2868-2868", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Utc_Precision()", file="XmlNodeConverterTest.cs"];
m16_823 [label="var dxml = JsonConvert.DeserializeXNode(json, ''root'')", span="2869-2869", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Utc_Precision()", file="XmlNodeConverterTest.cs"];
m16_824 [label="Assert.AreEqual(''2014-01-23T00:00:00.1234567Z'', dxml.Root.Element(''CreatedDate'').Value)", span="2870-2870", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Utc_Precision()", file="XmlNodeConverterTest.cs"];
m16_825 [label="Console.WriteLine(''DateTimeToXml_Utc: '' + dxml.Root.Element(''CreatedDate'').Value)", span="2872-2872", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Utc_Precision()", file="XmlNodeConverterTest.cs"];
m16_826 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Utc_Precision()", span="2866-2866", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Utc_Precision()", file="XmlNodeConverterTest.cs"];
m16_748 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlIncompatibleCharsInPropertyName()", span="2725-2725", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlIncompatibleCharsInPropertyName()", file="XmlNodeConverterTest.cs"];
m16_749 [label="var json = ''{\''%name\'':\''value\''}''", span="2727-2727", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlIncompatibleCharsInPropertyName()", file="XmlNodeConverterTest.cs"];
m16_750 [label="XmlDocument node = JsonConvert.DeserializeXmlNode(json)", span="2729-2729", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlIncompatibleCharsInPropertyName()", file="XmlNodeConverterTest.cs"];
m16_753 [label="Assert.AreEqual(json, json2)", span="2735-2735", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlIncompatibleCharsInPropertyName()", file="XmlNodeConverterTest.cs"];
m16_751 [label="Assert.AreEqual(''<_x0025_name>value</_x0025_name>'', node.OuterXml)", span="2731-2731", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlIncompatibleCharsInPropertyName()", file="XmlNodeConverterTest.cs"];
m16_752 [label="string json2 = JsonConvert.SerializeXmlNode(node)", span="2733-2733", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlIncompatibleCharsInPropertyName()", file="XmlNodeConverterTest.cs"];
m16_754 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlIncompatibleCharsInPropertyName()", span="2725-2725", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlIncompatibleCharsInPropertyName()", file="XmlNodeConverterTest.cs"];
m16_659 [label="Entry System.IO.MemoryStream.ToArray()", span="0-0", cluster="System.IO.MemoryStream.ToArray()", file="XmlNodeConverterTest.cs"];
m16_344 [label="Entry Unk.GetIndentedInnerXml", span="", cluster="Unk.GetIndentedInnerXml", file="XmlNodeConverterTest.cs"];
m16_658 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JsonBodyToSoapXml(System.IO.Stream, System.IO.Stream)", span="2102-2102", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JsonBodyToSoapXml(System.IO.Stream, System.IO.Stream)", file="XmlNodeConverterTest.cs"];
m16_661 [label="Newtonsoft.Json.JsonSerializerSettings settings = new Newtonsoft.Json.JsonSerializerSettings()", span="2104-2104", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JsonBodyToSoapXml(System.IO.Stream, System.IO.Stream)", file="XmlNodeConverterTest.cs"];
m16_664 [label="Newtonsoft.Json.JsonTextReader reader = new Newtonsoft.Json.JsonTextReader(new System.IO.StreamReader(json))", span="2107-2107", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JsonBodyToSoapXml(System.IO.Stream, System.IO.Stream)", file="XmlNodeConverterTest.cs"];
m16_668 [label="XmlWriter writer = XmlWriter.Create(xml)", span="2114-2114", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JsonBodyToSoapXml(System.IO.Stream, System.IO.Stream)", file="XmlNodeConverterTest.cs"];
m16_662 [label="settings.Converters.Add(new Newtonsoft.Json.Converters.XmlNodeConverter())", span="2105-2105", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JsonBodyToSoapXml(System.IO.Stream, System.IO.Stream)", file="XmlNodeConverterTest.cs"];
m16_663 [label="Newtonsoft.Json.JsonSerializer serializer = Newtonsoft.Json.JsonSerializer.Create(settings)", span="2106-2106", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JsonBodyToSoapXml(System.IO.Stream, System.IO.Stream)", file="XmlNodeConverterTest.cs"];
m16_665 [label="XmlDocument doc = (XmlDocument)serializer.Deserialize(reader, typeof(XmlDocument))", span="2109-2109", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JsonBodyToSoapXml(System.IO.Stream, System.IO.Stream)", file="XmlNodeConverterTest.cs"];
m16_666 [label="reader.Read() && reader.TokenType != JsonToken.Comment", span="2110-2110", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JsonBodyToSoapXml(System.IO.Stream, System.IO.Stream)", file="XmlNodeConverterTest.cs"];
m16_669 [label="doc.Save(writer)", span="2116-2116", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JsonBodyToSoapXml(System.IO.Stream, System.IO.Stream)", file="XmlNodeConverterTest.cs"];
m16_667 [label="throw new JsonSerializationException(''Additional text found in JSON string after finishing deserializing object.'');", span="2112-2112", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JsonBodyToSoapXml(System.IO.Stream, System.IO.Stream)", file="XmlNodeConverterTest.cs"];
m16_670 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JsonBodyToSoapXml(System.IO.Stream, System.IO.Stream)", span="2102-2102", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JsonBodyToSoapXml(System.IO.Stream, System.IO.Stream)", file="XmlNodeConverterTest.cs"];
m16_319 [label="Entry System.Text.StringBuilder.StringBuilder()", span="0-0", cluster="System.Text.StringBuilder.StringBuilder()", file="XmlNodeConverterTest.cs"];
m16_814 [label="Entry System.DateTime.ToString(string, System.IFormatProvider)", span="0-0", cluster="System.DateTime.ToString(string, System.IFormatProvider)", file="XmlNodeConverterTest.cs"];
m16_68 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDollarProperty()", span="155-155", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDollarProperty()", file="XmlNodeConverterTest.cs"];
m16_69 [label="string json1 = @''{''''$'''':''''test''''}''", span="157-157", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDollarProperty()", file="XmlNodeConverterTest.cs"];
m16_70 [label="var doc = JsonConvert.DeserializeXNode(json1)", span="159-159", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDollarProperty()", file="XmlNodeConverterTest.cs"];
m16_73 [label="Assert.AreEqual(json1, json2)", span="165-165", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDollarProperty()", file="XmlNodeConverterTest.cs"];
m16_71 [label="Assert.AreEqual(@''<_x0024_>test</_x0024_>'', doc.ToString())", span="161-161", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDollarProperty()", file="XmlNodeConverterTest.cs"];
m16_72 [label="var json2 = JsonConvert.SerializeXNode(doc)", span="163-163", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDollarProperty()", file="XmlNodeConverterTest.cs"];
m16_74 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDollarProperty()", span="155-155", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDollarProperty()", file="XmlNodeConverterTest.cs"];
m16_85 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ConvertNullString()", span="190-190", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ConvertNullString()", file="XmlNodeConverterTest.cs"];
m16_86 [label="JObject json = new JObject()", span="192-192", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ConvertNullString()", file="XmlNodeConverterTest.cs"];
m16_87 [label="json[''Prop1''] = (string)null", span="193-193", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ConvertNullString()", file="XmlNodeConverterTest.cs"];
m16_88 [label="json[''Prop2''] = new MyModel().MyProperty", span="194-194", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ConvertNullString()", file="XmlNodeConverterTest.cs"];
m16_92 [label="XDocument d = json.ToObject<XDocument>(jsonSerializer)", span="199-199", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ConvertNullString()", file="XmlNodeConverterTest.cs"];
m16_89 [label="var xmlNodeConverter = new XmlNodeConverter { DeserializeRootElementName = ''object'' }", span="196-196", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ConvertNullString()", file="XmlNodeConverterTest.cs"];
m16_90 [label="var jsonSerializerSettings = new JsonSerializerSettings { Converters = new JsonConverter[] { xmlNodeConverter } }", span="197-197", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ConvertNullString()", file="XmlNodeConverterTest.cs"];
m16_91 [label="var jsonSerializer = JsonSerializer.CreateDefault(jsonSerializerSettings)", span="198-198", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ConvertNullString()", file="XmlNodeConverterTest.cs"];
m16_93 [label="StringAssert.Equals(@''<object>\r\n  <Prop1 />\r\n  <Prop2 />\r\n</object>'', d.ToString())", span="201-204", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ConvertNullString()", file="XmlNodeConverterTest.cs"];
m16_94 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ConvertNullString()", span="190-190", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ConvertNullString()", file="XmlNodeConverterTest.cs"];
m16_47 [label="Entry Newtonsoft.Json.JsonTextReader.Read()", span="387-387", cluster="Newtonsoft.Json.JsonTextReader.Read()", file="XmlNodeConverterTest.cs"];
m16_179 [label="Entry System.TimeSpan.FromMinutes(double)", span="0-0", cluster="System.TimeSpan.FromMinutes(double)", file="XmlNodeConverterTest.cs"];
m16_111 [label="Entry Unk.IsNull", span="", cluster="Unk.IsNull", file="XmlNodeConverterTest.cs"];
m16_221 [label="Entry Unk.DeserializeXmlNode", span="", cluster="Unk.DeserializeXmlNode", file="XmlNodeConverterTest.cs"];
m16_600 [label="Entry Newtonsoft.Json.Converters.IsoDateTimeConverter.IsoDateTimeConverter()", span="34-34", cluster="Newtonsoft.Json.Converters.IsoDateTimeConverter.IsoDateTimeConverter()", file="XmlNodeConverterTest.cs"];
m16_134 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlElement()", span="282-282", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlElement()", file="XmlNodeConverterTest.cs"];
m16_135 [label="string xml = @''<payload>\r\n    <Country>6</Country>\r\n    <FinancialTransactionApprovalRequestUID>79</FinancialTransactionApprovalRequestUID>\r\n    <TransactionStatus>Approved</TransactionStatus>\r\n    <StatusChangeComment></StatusChangeComment>\r\n    <RequestedBy>Someone</RequestedBy>\r\n</payload>''", span="284-290", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlElement()", file="XmlNodeConverterTest.cs"];
m16_136 [label="var xmlDocument = new XmlDocument()", span="292-292", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlElement()", file="XmlNodeConverterTest.cs"];
m16_137 [label="xmlDocument.LoadXml(xml)", span="294-294", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlElement()", file="XmlNodeConverterTest.cs"];
m16_138 [label="var result = xmlDocument.FirstChild.ChildNodes.Cast<XmlNode>().ToArray()", span="296-296", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlElement()", file="XmlNodeConverterTest.cs"];
m16_139 [label="var json = JsonConvert.SerializeObject(result, Formatting.Indented)", span="298-298", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlElement()", file="XmlNodeConverterTest.cs"];
m16_140 [label="StringAssert.AreEqual(@''[\r\n  {\r\n    ''''Country'''': ''''6''''\r\n  },\r\n  {\r\n    ''''FinancialTransactionApprovalRequestUID'''': ''''79''''\r\n  },\r\n  {\r\n    ''''TransactionStatus'''': ''''Approved''''\r\n  },\r\n  {\r\n    ''''StatusChangeComment'''': ''''''''\r\n  },\r\n  {\r\n    ''''RequestedBy'''': ''''Someone''''\r\n  }\r\n]'', json)", span="300-316", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlElement()", file="XmlNodeConverterTest.cs"];
m16_141 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlElement()", span="282-282", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlElement()", file="XmlNodeConverterTest.cs"];
m16_602 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ComplexSingleItemArrayPropertySerialization()", span="1930-1930", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ComplexSingleItemArrayPropertySerialization()", file="XmlNodeConverterTest.cs"];
m16_603 [label="TestComplexArrayClass o = new TestComplexArrayClass\r\n            {\r\n                Name = ''Hi'',\r\n                Products = new List<Product>\r\n                {\r\n                    new Product { Name = ''First'' }\r\n                }\r\n            }", span="1932-1939", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ComplexSingleItemArrayPropertySerialization()", file="XmlNodeConverterTest.cs"];
m16_604 [label="string output = JsonConvert.SerializeObject(o, new IsoDateTimeConverter())", span="1941-1941", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ComplexSingleItemArrayPropertySerialization()", file="XmlNodeConverterTest.cs"];
m16_605 [label="XmlDocument xmlProduct = JsonConvert.DeserializeXmlNode(output, ''test'', true)", span="1943-1943", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ComplexSingleItemArrayPropertySerialization()", file="XmlNodeConverterTest.cs"];
m16_606 [label="StringAssert.AreEqual(@''<test>\r\n  <Name>Hi</Name>\r\n  <Products json:Array=''''true'''' xmlns:json=''''http://james.newtonking.com/projects/json''''>\r\n    <Name>First</Name>\r\n    <ExpiryDate>2000-01-01T00:00:00Z</ExpiryDate>\r\n    <Price>0</Price>\r\n    <Sizes />\r\n  </Products>\r\n</test>'', IndentXml(xmlProduct.InnerXml))", span="1945-1953", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ComplexSingleItemArrayPropertySerialization()", file="XmlNodeConverterTest.cs"];
m16_607 [label="string output2 = JsonConvert.SerializeXmlNode(xmlProduct.DocumentElement, Formatting.Indented, true)", span="1955-1955", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ComplexSingleItemArrayPropertySerialization()", file="XmlNodeConverterTest.cs"];
m16_608 [label="StringAssert.AreEqual(@''{\r\n  ''''Name'''': ''''Hi'''',\r\n  ''''Products'''': [\r\n    {\r\n      ''''Name'''': ''''First'''',\r\n      ''''ExpiryDate'''': ''''2000-01-01T00:00:00Z'''',\r\n      ''''Price'''': ''''0'''',\r\n      ''''Sizes'''': null\r\n    }\r\n  ]\r\n}'', output2)", span="1957-1967", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ComplexSingleItemArrayPropertySerialization()", file="XmlNodeConverterTest.cs"];
m16_609 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ComplexSingleItemArrayPropertySerialization()", span="1930-1930", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ComplexSingleItemArrayPropertySerialization()", file="XmlNodeConverterTest.cs"];
m16_610 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.TestComplexArrayClass.TestComplexArrayClass()", span="1923-1923", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.TestComplexArrayClass.TestComplexArrayClass()", file="XmlNodeConverterTest.cs"];
m16_538 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNoId()", span="1677-1677", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNoId()", file="XmlNodeConverterTest.cs"];
m16_539 [label="string json = @''{\r\n  ''''$values'''': [\r\n    ''''1'''',\r\n    ''''2'''',\r\n    ''''3'''',\r\n    ''''4'''',\r\n    ''''5''''\r\n  ]\r\n}''", span="1679-1687", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNoId()", file="XmlNodeConverterTest.cs"];
m16_540 [label="XmlNode node = JsonConvert.DeserializeXmlNode(json, ''root'')", span="1689-1689", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNoId()", file="XmlNodeConverterTest.cs"];
m16_545 [label="StringAssert.AreEqual(json, newJson)", span="1705-1705", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNoId()", file="XmlNodeConverterTest.cs"];
m16_541 [label="string xml = GetIndentedInnerXml(node)", span="1690-1690", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNoId()", file="XmlNodeConverterTest.cs"];
m16_543 [label="string newJson = JsonConvert.SerializeXmlNode(node, Formatting.Indented, true)", span="1701-1701", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNoId()", file="XmlNodeConverterTest.cs"];
m16_542 [label="StringAssert.AreEqual(@''<?xml version=''''1.0'''' encoding=''''utf-16''''?>\r\n<root xmlns:json=''''http://james.newtonking.com/projects/json''''>\r\n  <values xmlns=''''http://james.newtonking.com/projects/json''''>1</values>\r\n  <values xmlns=''''http://james.newtonking.com/projects/json''''>2</values>\r\n  <values xmlns=''''http://james.newtonking.com/projects/json''''>3</values>\r\n  <values xmlns=''''http://james.newtonking.com/projects/json''''>4</values>\r\n  <values xmlns=''''http://james.newtonking.com/projects/json''''>5</values>\r\n</root>'', xml)", span="1692-1699", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNoId()", file="XmlNodeConverterTest.cs"];
m16_544 [label="Console.WriteLine(newJson)", span="1703-1703", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNoId()", file="XmlNodeConverterTest.cs"];
m16_546 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNoId()", span="1677-1677", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNoId()", file="XmlNodeConverterTest.cs"];
m16_133 [label="Entry Unk.LoadXml", span="", cluster="Unk.LoadXml", file="XmlNodeConverterTest.cs"];
m16_645 [label="Entry Newtonsoft.Json.JsonSerializer.Create(Newtonsoft.Json.JsonSerializerSettings)", span="574-574", cluster="Newtonsoft.Json.JsonSerializer.Create(Newtonsoft.Json.JsonSerializerSettings)", file="XmlNodeConverterTest.cs"];
m16_180 [label="Entry System.TimeSpan.Add(System.TimeSpan)", span="0-0", cluster="System.TimeSpan.Add(System.TimeSpan)", file="XmlNodeConverterTest.cs"];
m16_99 [label="Entry Newtonsoft.Json.Linq.JToken.ToObject<T>(Newtonsoft.Json.JsonSerializer)", span="2066-2066", cluster="Newtonsoft.Json.Linq.JToken.ToObject<T>(Newtonsoft.Json.JsonSerializer)", file="XmlNodeConverterTest.cs"];
m16_121 [label="Entry Unk.SerializeObject", span="", cluster="Unk.SerializeObject", file="XmlNodeConverterTest.cs"];
m16_214 [label="Entry Unk.IsTrue", span="", cluster="Unk.IsTrue", file="XmlNodeConverterTest.cs"];
m16_660 [label="Entry System.Text.Encoding.GetString(byte[])", span="0-0", cluster="System.Text.Encoding.GetString(byte[])", file="XmlNodeConverterTest.cs"];
m16_499 [label="Entry Newtonsoft.Json.Linq.JObject.Parse(string)", span="404-404", cluster="Newtonsoft.Json.Linq.JObject.Parse(string)", file="XmlNodeConverterTest.cs"];
m16_229 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentSerializeIndented()", span="517-517", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentSerializeIndented()", file="XmlNodeConverterTest.cs"];
m16_230 [label="string xml = @''<?xml version=''''1.0'''' standalone=''''no''''?>\r\n<?xml-stylesheet href=''''classic.xsl'''' type=''''text/xml''''?>\r\n<span class=''''vevent''''>\r\n  <a class=''''url'''' href=''''http://www.web2con.com/''''>\r\n    <span class=''''summary''''>Web 2.0 Conference<![CDATA[my escaped text]]></span>\r\n    <abbr class=''''dtstart'''' title=''''2005-10-05''''>October 5</abbr>\r\n    <abbr class=''''dtend'''' title=''''2005-10-08''''>7</abbr>\r\n    <span class=''''location''''>Argent Hotel, San Francisco, CA</span>\r\n  </a>\r\n</span>''", span="519-528", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentSerializeIndented()", file="XmlNodeConverterTest.cs"];
m16_231 [label="XmlDocument doc = new XmlDocument()", span="529-529", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentSerializeIndented()", file="XmlNodeConverterTest.cs"];
m16_232 [label="doc.LoadXml(xml)", span="530-530", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentSerializeIndented()", file="XmlNodeConverterTest.cs"];
m16_233 [label="string jsonText = SerializeXmlNode(doc)", span="532-532", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentSerializeIndented()", file="XmlNodeConverterTest.cs"];
m16_234 [label="string expected = @''{\r\n  ''''?xml'''': {\r\n    ''''@version'''': ''''1.0'''',\r\n    ''''@standalone'''': ''''no''''\r\n  },\r\n  ''''?xml-stylesheet'''': ''''href=\''''classic.xsl\'''' type=\''''text/xml\'''''''',\r\n  ''''span'''': {\r\n    ''''@class'''': ''''vevent'''',\r\n    ''''a'''': {\r\n      ''''@class'''': ''''url'''',\r\n      ''''@href'''': ''''http://www.web2con.com/'''',\r\n      ''''span'''': [\r\n        {\r\n          ''''@class'''': ''''summary'''',\r\n          ''''#text'''': ''''Web 2.0 Conference'''',\r\n          ''''#cdata-section'''': ''''my escaped text''''\r\n        },\r\n        {\r\n          ''''@class'''': ''''location'''',\r\n          ''''#text'''': ''''Argent Hotel, San Francisco, CA''''\r\n        }\r\n      ],\r\n      ''''abbr'''': [\r\n        {\r\n          ''''@class'''': ''''dtstart'''',\r\n          ''''@title'''': ''''2005-10-05'''',\r\n          ''''#text'''': ''''October 5''''\r\n        },\r\n        {\r\n          ''''@class'''': ''''dtend'''',\r\n          ''''@title'''': ''''2005-10-08'''',\r\n          ''''#text'''': ''''7''''\r\n        }\r\n      ]\r\n    }\r\n  }\r\n}''", span="533-569", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentSerializeIndented()", file="XmlNodeConverterTest.cs"];
m16_235 [label="StringAssert.AreEqual(expected, jsonText)", span="571-571", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentSerializeIndented()", file="XmlNodeConverterTest.cs"];
m16_236 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentSerializeIndented()", span="517-517", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentSerializeIndented()", file="XmlNodeConverterTest.cs"];
m16_598 [label="Entry Newtonsoft.Json.Tests.TestObjects.Product.Product()", span="29-29", cluster="Newtonsoft.Json.Tests.TestObjects.Product.Product()", file="XmlNodeConverterTest.cs"];
m16_675 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXNodeDefaultNamespace()", span="2124-2124", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXNodeDefaultNamespace()", file="XmlNodeConverterTest.cs"];
m16_676 [label="string xaml = @''<Grid xmlns=''''http://schemas.microsoft.com/winfx/2006/xaml/presentation'''' xmlns:x=''''http://schemas.microsoft.com/winfx/2006/xaml'''' xmlns:toolkit=''''clr-namespace:Microsoft.Phone.Controls;assembly=Microsoft.Phone.Controls.Toolkit'''' Style=''''{StaticResource trimFormGrid}'''' x:Name=''''TrimObjectForm''''>\r\n  <Grid.ColumnDefinitions>\r\n    <ColumnDefinition Width=''''63*'''' />\r\n    <ColumnDefinition Width=''''320*'''' />\r\n  </Grid.ColumnDefinitions>\r\n  <Grid.RowDefinitions xmlns=''''''''>\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n  </Grid.RowDefinitions>\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding TypedTitle, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordTypedTitle'''' Grid.Column=''''1'''' Grid.Row=''''0'''' xmlns='''''''' />\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding ExternalReference, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordExternalReference'''' Grid.Column=''''1'''' Grid.Row=''''1'''' xmlns='''''''' />\r\n  <toolkit:DatePicker Style=''''{StaticResource trimFormGrid_DP}'''' Value=''''{Binding DateCreated, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordDateCreated'''' Grid.Column=''''1'''' Grid.Row=''''2'''' />\r\n  <toolkit:DatePicker Style=''''{StaticResource trimFormGrid_DP}'''' Value=''''{Binding DateDue, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordDateDue'''' Grid.Column=''''1'''' Grid.Row=''''3'''' />\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding Author, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordAuthor'''' Grid.Column=''''1'''' Grid.Row=''''4'''' xmlns='''''''' />\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding Container, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordContainer'''' Grid.Column=''''1'''' Grid.Row=''''5'''' xmlns='''''''' />\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding IsEnclosed, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordIsEnclosed'''' Grid.Column=''''1'''' Grid.Row=''''6'''' xmlns='''''''' />\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding Assignee, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordAssignee'''' Grid.Column=''''1'''' Grid.Row=''''7'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Title (Free Text Part)'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''0'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''External ID'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''1'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Date Created'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''2'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Date Due'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''3'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Author'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''4'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Container'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''5'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Enclosed?'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''6'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Assignee'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''7'''' xmlns='''''''' />\r\n</Grid>''", span="2126-2157", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXNodeDefaultNamespace()", file="XmlNodeConverterTest.cs"];
m16_677 [label="string json = JsonConvert.SerializeXNode(XDocument.Parse(xaml), Formatting.Indented)", span="2159-2159", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXNodeDefaultNamespace()", file="XmlNodeConverterTest.cs"];
m16_678 [label="string expectedJson = @''{\r\n  ''''Grid'''': {\r\n    ''''@xmlns'''': ''''http://schemas.microsoft.com/winfx/2006/xaml/presentation'''',\r\n    ''''@xmlns:x'''': ''''http://schemas.microsoft.com/winfx/2006/xaml'''',\r\n    ''''@xmlns:toolkit'''': ''''clr-namespace:Microsoft.Phone.Controls;assembly=Microsoft.Phone.Controls.Toolkit'''',\r\n    ''''@Style'''': ''''{StaticResource trimFormGrid}'''',\r\n    ''''@x:Name'''': ''''TrimObjectForm'''',\r\n    ''''Grid.ColumnDefinitions'''': {\r\n      ''''ColumnDefinition'''': [\r\n        {\r\n          ''''@Width'''': ''''63*''''\r\n        },\r\n        {\r\n          ''''@Width'''': ''''320*''''\r\n        }\r\n      ]\r\n    },\r\n    ''''Grid.RowDefinitions'''': {\r\n      ''''@xmlns'''': '''''''',\r\n      ''''RowDefinition'''': [\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null\r\n      ]\r\n    },\r\n    ''''TextBox'''': [\r\n      {\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_TB}'''',\r\n        ''''@Text'''': ''''{Binding TypedTitle, Converter={StaticResource trimPropertyConverter}}'''',\r\n        ''''@Name'''': ''''RecordTypedTitle'''',\r\n        ''''@Grid.Column'''': ''''1'''',\r\n        ''''@Grid.Row'''': ''''0'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_TB}'''',\r\n        ''''@Text'''': ''''{Binding ExternalReference, Converter={StaticResource trimPropertyConverter}}'''',\r\n        ''''@Name'''': ''''RecordExternalReference'''',\r\n        ''''@Grid.Column'''': ''''1'''',\r\n        ''''@Grid.Row'''': ''''1'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_TB}'''',\r\n        ''''@Text'''': ''''{Binding Author, Converter={StaticResource trimPropertyConverter}}'''',\r\n        ''''@Name'''': ''''RecordAuthor'''',\r\n        ''''@Grid.Column'''': ''''1'''',\r\n        ''''@Grid.Row'''': ''''4'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_TB}'''',\r\n        ''''@Text'''': ''''{Binding Container, Converter={StaticResource trimPropertyConverter}}'''',\r\n        ''''@Name'''': ''''RecordContainer'''',\r\n        ''''@Grid.Column'''': ''''1'''',\r\n        ''''@Grid.Row'''': ''''5'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_TB}'''',\r\n        ''''@Text'''': ''''{Binding IsEnclosed, Converter={StaticResource trimPropertyConverter}}'''',\r\n        ''''@Name'''': ''''RecordIsEnclosed'''',\r\n        ''''@Grid.Column'''': ''''1'''',\r\n        ''''@Grid.Row'''': ''''6'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_TB}'''',\r\n        ''''@Text'''': ''''{Binding Assignee, Converter={StaticResource trimPropertyConverter}}'''',\r\n        ''''@Name'''': ''''RecordAssignee'''',\r\n        ''''@Grid.Column'''': ''''1'''',\r\n        ''''@Grid.Row'''': ''''7'''',\r\n        ''''@xmlns'''': ''''''''\r\n      }\r\n    ],\r\n    ''''toolkit:DatePicker'''': [\r\n      {\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_DP}'''',\r\n        ''''@Value'''': ''''{Binding DateCreated, Converter={StaticResource trimPropertyConverter}}'''',\r\n        ''''@Name'''': ''''RecordDateCreated'''',\r\n        ''''@Grid.Column'''': ''''1'''',\r\n        ''''@Grid.Row'''': ''''2''''\r\n      },\r\n      {\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_DP}'''',\r\n        ''''@Value'''': ''''{Binding DateDue, Converter={StaticResource trimPropertyConverter}}'''',\r\n        ''''@Name'''': ''''RecordDateDue'''',\r\n        ''''@Grid.Column'''': ''''1'''',\r\n        ''''@Grid.Row'''': ''''3''''\r\n      }\r\n    ],\r\n    ''''TextBlock'''': [\r\n      {\r\n        ''''@Grid.Column'''': ''''0'''',\r\n        ''''@Text'''': ''''Title (Free Text Part)'''',\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_LBL}'''',\r\n        ''''@Grid.Row'''': ''''0'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Grid.Column'''': ''''0'''',\r\n        ''''@Text'''': ''''External ID'''',\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_LBL}'''',\r\n        ''''@Grid.Row'''': ''''1'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Grid.Column'''': ''''0'''',\r\n        ''''@Text'''': ''''Date Created'''',\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_LBL}'''',\r\n        ''''@Grid.Row'''': ''''2'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Grid.Column'''': ''''0'''',\r\n        ''''@Text'''': ''''Date Due'''',\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_LBL}'''',\r\n        ''''@Grid.Row'''': ''''3'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Grid.Column'''': ''''0'''',\r\n        ''''@Text'''': ''''Author'''',\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_LBL}'''',\r\n        ''''@Grid.Row'''': ''''4'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Grid.Column'''': ''''0'''',\r\n        ''''@Text'''': ''''Container'''',\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_LBL}'''',\r\n        ''''@Grid.Row'''': ''''5'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Grid.Column'''': ''''0'''',\r\n        ''''@Text'''': ''''Enclosed?'''',\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_LBL}'''',\r\n        ''''@Grid.Row'''': ''''6'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Grid.Column'''': ''''0'''',\r\n        ''''@Text'''': ''''Assignee'''',\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_LBL}'''',\r\n        ''''@Grid.Row'''': ''''7'''',\r\n        ''''@xmlns'''': ''''''''\r\n      }\r\n    ]\r\n  }\r\n}''", span="2161-2316", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXNodeDefaultNamespace()", file="XmlNodeConverterTest.cs"];
m16_679 [label="StringAssert.AreEqual(expectedJson, json)", span="2318-2318", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXNodeDefaultNamespace()", file="XmlNodeConverterTest.cs"];
m16_680 [label="XNode node = JsonConvert.DeserializeXNode(json)", span="2320-2320", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXNodeDefaultNamespace()", file="XmlNodeConverterTest.cs"];
m16_681 [label="string xaml2 = node.ToString()", span="2322-2322", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXNodeDefaultNamespace()", file="XmlNodeConverterTest.cs"];
m16_682 [label="string expectedXaml = @''<Grid xmlns=''''http://schemas.microsoft.com/winfx/2006/xaml/presentation'''' xmlns:x=''''http://schemas.microsoft.com/winfx/2006/xaml'''' xmlns:toolkit=''''clr-namespace:Microsoft.Phone.Controls;assembly=Microsoft.Phone.Controls.Toolkit'''' Style=''''{StaticResource trimFormGrid}'''' x:Name=''''TrimObjectForm''''>\r\n  <Grid.ColumnDefinitions>\r\n    <ColumnDefinition Width=''''63*'''' />\r\n    <ColumnDefinition Width=''''320*'''' />\r\n  </Grid.ColumnDefinitions>\r\n  <Grid.RowDefinitions xmlns=''''''''>\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n  </Grid.RowDefinitions>\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding TypedTitle, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordTypedTitle'''' Grid.Column=''''1'''' Grid.Row=''''0'''' xmlns='''''''' />\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding ExternalReference, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordExternalReference'''' Grid.Column=''''1'''' Grid.Row=''''1'''' xmlns='''''''' />\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding Author, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordAuthor'''' Grid.Column=''''1'''' Grid.Row=''''4'''' xmlns='''''''' />\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding Container, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordContainer'''' Grid.Column=''''1'''' Grid.Row=''''5'''' xmlns='''''''' />\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding IsEnclosed, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordIsEnclosed'''' Grid.Column=''''1'''' Grid.Row=''''6'''' xmlns='''''''' />\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding Assignee, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordAssignee'''' Grid.Column=''''1'''' Grid.Row=''''7'''' xmlns='''''''' />\r\n  <toolkit:DatePicker Style=''''{StaticResource trimFormGrid_DP}'''' Value=''''{Binding DateCreated, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordDateCreated'''' Grid.Column=''''1'''' Grid.Row=''''2'''' />\r\n  <toolkit:DatePicker Style=''''{StaticResource trimFormGrid_DP}'''' Value=''''{Binding DateDue, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordDateDue'''' Grid.Column=''''1'''' Grid.Row=''''3'''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Title (Free Text Part)'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''0'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''External ID'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''1'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Date Created'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''2'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Date Due'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''3'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Author'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''4'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Container'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''5'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Enclosed?'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''6'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Assignee'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''7'''' xmlns='''''''' />\r\n</Grid>''", span="2324-2355", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXNodeDefaultNamespace()", file="XmlNodeConverterTest.cs"];
m16_683 [label="StringAssert.AreEqual(expectedXaml, xaml2)", span="2357-2357", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXNodeDefaultNamespace()", file="XmlNodeConverterTest.cs"];
m16_684 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXNodeDefaultNamespace()", span="2124-2124", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXNodeDefaultNamespace()", file="XmlNodeConverterTest.cs"];
m16_648 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializingBooleanValues()", span="2090-2090", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializingBooleanValues()", file="XmlNodeConverterTest.cs"];
m16_649 [label="MemoryStream ms = new MemoryStream(System.Text.Encoding.UTF8.GetBytes(@''{root:{''''@booleanType'''':true}}''))", span="2092-2092", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializingBooleanValues()", file="XmlNodeConverterTest.cs"];
m16_650 [label="MemoryStream xml = new MemoryStream()", span="2093-2093", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializingBooleanValues()", file="XmlNodeConverterTest.cs"];
m16_651 [label="JsonBodyToSoapXml(ms, xml)", span="2095-2095", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializingBooleanValues()", file="XmlNodeConverterTest.cs"];
m16_652 [label="string xmlString = System.Text.Encoding.UTF8.GetString(xml.ToArray())", span="2097-2097", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializingBooleanValues()", file="XmlNodeConverterTest.cs"];
m16_653 [label="Assert.AreEqual(@''﻿<?xml version=''''1.0'''' encoding=''''utf-8''''?><root booleanType=''''true'''' />'', xmlString)", span="2099-2099", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializingBooleanValues()", file="XmlNodeConverterTest.cs"];
m16_654 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializingBooleanValues()", span="2090-2090", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializingBooleanValues()", file="XmlNodeConverterTest.cs"];
m16_873 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeDateInElementText()", span="2957-2957", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeDateInElementText()", file="XmlNodeConverterTest.cs"];
m16_874 [label="Model model = new Model()", span="2959-2959", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeDateInElementText()", file="XmlNodeConverterTest.cs"];
m16_875 [label="model.Document = new XElement(''Value'', new XAttribute(''foo'', ''bar''))\r\n            {\r\n                Value = ''2001-01-01T11:11:11''\r\n            }", span="2960-2963", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeDateInElementText()", file="XmlNodeConverterTest.cs"];
m16_881 [label="serializer.Serialize(jsonWriter, model)", span="2976-2976", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeDateInElementText()", file="XmlNodeConverterTest.cs"];
m16_876 [label="var serializer = JsonSerializer.Create(new JsonSerializerSettings\r\n            {\r\n                Converters = new List<JsonConverter>(new[] { new XmlNodeConverter() })\r\n            })", span="2965-2968", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeDateInElementText()", file="XmlNodeConverterTest.cs"];
m16_877 [label="var json = new StringBuilder(1024)", span="2970-2970", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeDateInElementText()", file="XmlNodeConverterTest.cs"];
m16_885 [label="var document = (XDocument)serializer.Deserialize(jsonReader, typeof(XDocument))", span="2984-2984", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeDateInElementText()", file="XmlNodeConverterTest.cs"];
m16_878 [label="var stringWriter = new StringWriter(json, CultureInfo.InvariantCulture)", span="2972-2972", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeDateInElementText()", file="XmlNodeConverterTest.cs"];
m16_882 [label="Assert.AreEqual(@''{''''Document'''':{''''Value'''':{''''@foo'''':''''bar'''',''''#text'''':''''2001-01-01T11:11:11''''}}}'', json.ToString())", span="2978-2978", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeDateInElementText()", file="XmlNodeConverterTest.cs"];
m16_883 [label="var stringReader = new StringReader(json.ToString())", span="2981-2981", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeDateInElementText()", file="XmlNodeConverterTest.cs"];
m16_879 [label="var jsonWriter = new JsonTextWriter(stringWriter)", span="2973-2973", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeDateInElementText()", file="XmlNodeConverterTest.cs"];
m16_880 [label="jsonWriter.Formatting = Formatting.None", span="2975-2975", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeDateInElementText()", file="XmlNodeConverterTest.cs"];
m16_884 [label="var jsonReader = new JsonTextReader(stringReader)", span="2982-2982", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeDateInElementText()", file="XmlNodeConverterTest.cs"];
m16_886 [label="StringAssert.AreEqual(@''<Document>\r\n  <Value foo=''''bar''''>2001-01-01T11:11:11</Value>\r\n</Document>'', document.ToString())", span="2986-2988", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeDateInElementText()", file="XmlNodeConverterTest.cs"];
m16_887 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeDateInElementText()", span="2957-2957", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeDateInElementText()", file="XmlNodeConverterTest.cs"];
m16_205 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXmlWithNamespaceInChildrenAndNoValueInChildren()", span="460-460", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXmlWithNamespaceInChildrenAndNoValueInChildren()", file="XmlNodeConverterTest.cs"];
m16_206 [label="var xmlString = @''<root>\r\n                              <b xmlns='http://www.example.com/ns'/>\r\n                              <c>AAA</c>\r\n                              <test>adad</test>\r\n                              </root>''", span="462-466", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXmlWithNamespaceInChildrenAndNoValueInChildren()", file="XmlNodeConverterTest.cs"];
m16_207 [label="var xml = XElement.Parse(xmlString)", span="468-468", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXmlWithNamespaceInChildrenAndNoValueInChildren()", file="XmlNodeConverterTest.cs"];
m16_208 [label="var json1 = JsonConvert.SerializeXNode(xml)", span="470-470", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXmlWithNamespaceInChildrenAndNoValueInChildren()", file="XmlNodeConverterTest.cs"];
m16_210 [label="var equals = XElement.DeepEquals(xmlBack, xml)", span="473-473", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXmlWithNamespaceInChildrenAndNoValueInChildren()", file="XmlNodeConverterTest.cs"];
m16_209 [label="var xmlBack = JsonConvert.DeserializeObject<XElement>(json1)", span="471-471", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXmlWithNamespaceInChildrenAndNoValueInChildren()", file="XmlNodeConverterTest.cs"];
m16_211 [label="Assert.IsTrue(equals)", span="474-474", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXmlWithNamespaceInChildrenAndNoValueInChildren()", file="XmlNodeConverterTest.cs"];
m16_212 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXmlWithNamespaceInChildrenAndNoValueInChildren()", span="460-460", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXmlWithNamespaceInChildrenAndNoValueInChildren()", file="XmlNodeConverterTest.cs"];
m16_725 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXElementWithNamespaceInChildrenRootDontHaveNameSpace()", span="2671-2671", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXElementWithNamespaceInChildrenRootDontHaveNameSpace()", file="XmlNodeConverterTest.cs"];
m16_726 [label="var xmlString = @''<root>\r\n                              <b xmlns='http://www.example.com/ns'>Asd</b>\r\n                              <c>AAA</c>\r\n                              <test>adad</test>\r\n                              </root>''", span="2673-2677", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXElementWithNamespaceInChildrenRootDontHaveNameSpace()", file="XmlNodeConverterTest.cs"];
m16_727 [label="var xml = XElement.Parse(xmlString)", span="2679-2679", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXElementWithNamespaceInChildrenRootDontHaveNameSpace()", file="XmlNodeConverterTest.cs"];
m16_728 [label="var json1 = JsonConvert.SerializeXNode(xml)", span="2681-2681", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXElementWithNamespaceInChildrenRootDontHaveNameSpace()", file="XmlNodeConverterTest.cs"];
m16_730 [label="var equals = XElement.DeepEquals(xmlBack, xml)", span="2684-2684", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXElementWithNamespaceInChildrenRootDontHaveNameSpace()", file="XmlNodeConverterTest.cs"];
m16_729 [label="var xmlBack = JsonConvert.DeserializeObject<XElement>(json1)", span="2682-2682", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXElementWithNamespaceInChildrenRootDontHaveNameSpace()", file="XmlNodeConverterTest.cs"];
m16_731 [label="Assert.IsTrue(equals)", span="2685-2685", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXElementWithNamespaceInChildrenRootDontHaveNameSpace()", file="XmlNodeConverterTest.cs"];
m16_732 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXElementWithNamespaceInChildrenRootDontHaveNameSpace()", span="2671-2671", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXElementWithNamespaceInChildrenRootDontHaveNameSpace()", file="XmlNodeConverterTest.cs"];
m16_276 [label="Entry Unk.CreateAttribute", span="", cluster="Unk.CreateAttribute", file="XmlNodeConverterTest.cs"];
m16_120 [label="Entry Unk.Parse", span="", cluster="Unk.Parse", file="XmlNodeConverterTest.cs"];
m16_123 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXmlDocument()", span="254-254", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXmlDocument()", file="XmlNodeConverterTest.cs"];
m16_124 [label="string xml = @''<result xp_0:end=''''2014-08-15 13:12:11.9184'''' xp_0:start=''''2014-08-15 13:11:49.3140'''' xp_0:time_diff=''''22604.3836'''' xmlns:xp_0=''''Test1'''' p2:end=''''2014-08-15 13:13:49.5522'''' p2:start=''''2014-08-15 13:13:49.0268'''' p2:time_diff=''''525.4646'''' xmlns:p2=''''Test2'''' />''", span="256-256", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXmlDocument()", file="XmlNodeConverterTest.cs"];
m16_125 [label="XmlDocument d = new XmlDocument()", span="258-258", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXmlDocument()", file="XmlNodeConverterTest.cs"];
m16_126 [label="d.LoadXml(xml)", span="259-259", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXmlDocument()", file="XmlNodeConverterTest.cs"];
m16_130 [label="StringAssert.AreEqual(xml, doc.OuterXml)", span="278-278", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXmlDocument()", file="XmlNodeConverterTest.cs"];
m16_127 [label="string json = JsonConvert.SerializeObject(d, Formatting.Indented)", span="261-261", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXmlDocument()", file="XmlNodeConverterTest.cs"];
m16_128 [label="StringAssert.AreEqual(@''{\r\n  ''''result'''': {\r\n    ''''@xp_0:end'''': ''''2014-08-15 13:12:11.9184'''',\r\n    ''''@xp_0:start'''': ''''2014-08-15 13:11:49.3140'''',\r\n    ''''@xp_0:time_diff'''': ''''22604.3836'''',\r\n    ''''@xmlns:xp_0'''': ''''Test1'''',\r\n    ''''@p2:end'''': ''''2014-08-15 13:13:49.5522'''',\r\n    ''''@p2:start'''': ''''2014-08-15 13:13:49.0268'''',\r\n    ''''@p2:time_diff'''': ''''525.4646'''',\r\n    ''''@xmlns:p2'''': ''''Test2''''\r\n  }\r\n}'', json)", span="263-274", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXmlDocument()", file="XmlNodeConverterTest.cs"];
m16_129 [label="XmlDocument doc = JsonConvert.DeserializeObject<XmlDocument>(json)", span="276-276", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXmlDocument()", file="XmlNodeConverterTest.cs"];
m16_131 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXmlDocument()", span="254-254", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXmlDocument()", file="XmlNodeConverterTest.cs"];
m16_806 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Local()", span="2844-2844", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Local()", file="XmlNodeConverterTest.cs"];
m16_807 [label="DateTime dt = DateTime.Parse(''2014-01-23T00:00:00+01:00'')", span="2846-2846", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Local()", file="XmlNodeConverterTest.cs"];
m16_808 [label="string json = @''{''''CreatedDate'''': ''''2014-01-23T00:00:00+01:00''''}''", span="2848-2848", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Local()", file="XmlNodeConverterTest.cs"];
m16_810 [label="Assert.AreEqual(dt.ToString(''yyyy-MM-ddTHH:mm:sszzzzzzz'', CultureInfo.InvariantCulture), dxml.Root.Element(''CreatedDate'').Value)", span="2850-2850", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Local()", file="XmlNodeConverterTest.cs"];
m16_809 [label="var dxml = JsonConvert.DeserializeXNode(json, ''root'')", span="2849-2849", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Local()", file="XmlNodeConverterTest.cs"];
m16_811 [label="Console.WriteLine(''DateTimeToXml_Local: '' + dxml.Root.Element(''CreatedDate'').Value)", span="2852-2852", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Local()", file="XmlNodeConverterTest.cs"];
m16_812 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Local()", span="2844-2844", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Local()", file="XmlNodeConverterTest.cs"];
m16_479 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeComment()", span="1415-1415", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeComment()", file="XmlNodeConverterTest.cs"];
m16_480 [label="string xml = @''<span class=''''vevent''''>\r\n  <a class=''''url'''' href=''''http://www.web2con.com/''''><!-- Hi --><span>Text</span></a><!-- Hi! -->\r\n</span>''", span="1417-1419", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeComment()", file="XmlNodeConverterTest.cs"];
m16_481 [label="XmlDocument doc = new XmlDocument()", span="1420-1420", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeComment()", file="XmlNodeConverterTest.cs"];
m16_482 [label="doc.LoadXml(xml)", span="1421-1421", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeComment()", file="XmlNodeConverterTest.cs"];
m16_483 [label="string jsonText = SerializeXmlNode(doc)", span="1423-1423", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeComment()", file="XmlNodeConverterTest.cs"];
m16_484 [label="string expected = @''{\r\n  ''''span'''': {\r\n    ''''@class'''': ''''vevent'''',\r\n    ''''a'''': {\r\n      ''''@class'''': ''''url'''',\r\n      ''''@href'''': ''''http://www.web2con.com/''''/* Hi */,\r\n      ''''span'''': ''''Text''''\r\n    }/* Hi! */\r\n  }\r\n}''", span="1425-1434", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeComment()", file="XmlNodeConverterTest.cs"];
m16_485 [label="StringAssert.AreEqual(expected, jsonText)", span="1436-1436", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeComment()", file="XmlNodeConverterTest.cs"];
m16_486 [label="XmlDocument newDoc = (XmlDocument)DeserializeXmlNode(jsonText)", span="1438-1438", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeComment()", file="XmlNodeConverterTest.cs"];
m16_487 [label="Assert.AreEqual(@''<span class=''''vevent''''><a class=''''url'''' href=''''http://www.web2con.com/''''><!-- Hi --><span>Text</span></a><!-- Hi! --></span>'', newDoc.InnerXml)", span="1439-1439", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeComment()", file="XmlNodeConverterTest.cs"];
m16_488 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeComment()", span="1415-1415", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeComment()", file="XmlNodeConverterTest.cs"];
m16_769 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Serialize_XDocument_NoRoot()", span="2783-2783", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Serialize_XDocument_NoRoot()", file="XmlNodeConverterTest.cs"];
m16_770 [label="XDocument d = new XDocument()", span="2785-2785", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Serialize_XDocument_NoRoot()", file="XmlNodeConverterTest.cs"];
m16_771 [label="string json = JsonConvert.SerializeXNode(d)", span="2787-2787", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Serialize_XDocument_NoRoot()", file="XmlNodeConverterTest.cs"];
m16_772 [label="Assert.AreEqual(@''{}'', json)", span="2789-2789", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Serialize_XDocument_NoRoot()", file="XmlNodeConverterTest.cs"];
m16_773 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Serialize_XDocument_NoRoot()", span="2783-2783", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Serialize_XDocument_NoRoot()", file="XmlNodeConverterTest.cs"];
m16_67 [label="Entry System.IO.StringWriter.ToString()", span="0-0", cluster="System.IO.StringWriter.ToString()", file="XmlNodeConverterTest.cs"];
m16_320 [label="Entry Unk.Save", span="", cluster="Unk.Save", file="XmlNodeConverterTest.cs"];
m16_48 [label="Entry XmlNodeConverter.cstr", span="", cluster="XmlNodeConverter.cstr", file="XmlNodeConverterTest.cs"];
m16_353 [label="Entry Unk.WriteTo", span="", cluster="Unk.WriteTo", file="XmlNodeConverterTest.cs"];
m16_277 [label="Entry Unk.SetAttributeNode", span="", cluster="Unk.SetAttributeNode", file="XmlNodeConverterTest.cs"];
m16_619 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmtpyElementWithArrayAttributeShouldWriteAttributes()", span="2006-2006", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmtpyElementWithArrayAttributeShouldWriteAttributes()", file="XmlNodeConverterTest.cs"];
m16_620 [label="string xml = @''<?xml version=''''1.0'''' encoding=''''utf-8'''' ?>\r\n<root xmlns:json=''''http://james.newtonking.com/projects/json''''>\r\n<A>\r\n<B name=''''sample'''' json:Array=''''true''''/>\r\n<C></C>\r\n<C></C>\r\n</A>\r\n</root>''", span="2008-2015", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmtpyElementWithArrayAttributeShouldWriteAttributes()", file="XmlNodeConverterTest.cs"];
m16_621 [label="XmlDocument d = new XmlDocument()", span="2017-2017", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmtpyElementWithArrayAttributeShouldWriteAttributes()", file="XmlNodeConverterTest.cs"];
m16_622 [label="d.LoadXml(xml)", span="2018-2018", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmtpyElementWithArrayAttributeShouldWriteAttributes()", file="XmlNodeConverterTest.cs"];
m16_623 [label="string json = JsonConvert.SerializeXmlNode(d, Formatting.Indented)", span="2020-2020", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmtpyElementWithArrayAttributeShouldWriteAttributes()", file="XmlNodeConverterTest.cs"];
m16_624 [label="StringAssert.AreEqual(@''{\r\n  ''''?xml'''': {\r\n    ''''@version'''': ''''1.0'''',\r\n    ''''@encoding'''': ''''utf-8''''\r\n  },\r\n  ''''root'''': {\r\n    ''''A'''': {\r\n      ''''B'''': [\r\n        {\r\n          ''''@name'''': ''''sample''''\r\n        }\r\n      ],\r\n      ''''C'''': [\r\n        '''''''',\r\n        ''''''''\r\n      ]\r\n    }\r\n  }\r\n}'', json)", span="2022-2040", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmtpyElementWithArrayAttributeShouldWriteAttributes()", file="XmlNodeConverterTest.cs"];
m16_625 [label="XmlDocument d2 = JsonConvert.DeserializeXmlNode(json)", span="2042-2042", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmtpyElementWithArrayAttributeShouldWriteAttributes()", file="XmlNodeConverterTest.cs"];
m16_626 [label="StringAssert.AreEqual(@''<?xml version=''''1.0'''' encoding=''''utf-8''''?>\r\n<root>\r\n  <A>\r\n    <B name=''''sample'''' />\r\n    <C></C>\r\n    <C></C>\r\n  </A>\r\n</root>'', ToStringWithDeclaration(d2, true))", span="2044-2051", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmtpyElementWithArrayAttributeShouldWriteAttributes()", file="XmlNodeConverterTest.cs"];
m16_627 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmtpyElementWithArrayAttributeShouldWriteAttributes()", span="2006-2006", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmtpyElementWithArrayAttributeShouldWriteAttributes()", file="XmlNodeConverterTest.cs"];
m16_647 [label="Entry Newtonsoft.Json.JsonSerializer.Deserialize(Newtonsoft.Json.JsonReader, System.Type)", span="850-850", cluster="Newtonsoft.Json.JsonSerializer.Deserialize(Newtonsoft.Json.JsonReader, System.Type)", file="XmlNodeConverterTest.cs"];
m16_672 [label="Entry Unk.Add", span="", cluster="Unk.Add", file="XmlNodeConverterTest.cs"];
m16_840 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeElementExplicitAttributeNamespace()", span="2900-2900", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeElementExplicitAttributeNamespace()", file="XmlNodeConverterTest.cs"];
m16_841 [label="var original = XElement.Parse(''<MyElement xmlns=\''http://example.com\'' />'')", span="2902-2902", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeElementExplicitAttributeNamespace()", file="XmlNodeConverterTest.cs"];
m16_842 [label="Assert.AreEqual(@''<MyElement xmlns=''''http://example.com'''' />'', original.ToString())", span="2903-2903", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeElementExplicitAttributeNamespace()", file="XmlNodeConverterTest.cs"];
m16_843 [label="var json = JsonConvert.SerializeObject(original)", span="2905-2905", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeElementExplicitAttributeNamespace()", file="XmlNodeConverterTest.cs"];
m16_844 [label="Assert.AreEqual(@''{''''MyElement'''':{''''@xmlns'''':''''http://example.com''''}}'', json)", span="2906-2906", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeElementExplicitAttributeNamespace()", file="XmlNodeConverterTest.cs"];
m16_845 [label="var deserialized = JsonConvert.DeserializeObject<XElement>(json)", span="2908-2908", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeElementExplicitAttributeNamespace()", file="XmlNodeConverterTest.cs"];
m16_846 [label="Assert.AreEqual(@''<MyElement xmlns=''''http://example.com'''' />'', deserialized.ToString())", span="2909-2909", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeElementExplicitAttributeNamespace()", file="XmlNodeConverterTest.cs"];
m16_847 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeElementExplicitAttributeNamespace()", span="2900-2900", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeElementExplicitAttributeNamespace()", file="XmlNodeConverterTest.cs"];
m16_98 [label="Entry Newtonsoft.Json.JsonSerializer.CreateDefault(Newtonsoft.Json.JsonSerializerSettings)", span="615-615", cluster="Newtonsoft.Json.JsonSerializer.CreateDefault(Newtonsoft.Json.JsonSerializerSettings)", file="XmlNodeConverterTest.cs"];
m16_213 [label="Entry Unk.DeepEquals", span="", cluster="Unk.DeepEquals", file="XmlNodeConverterTest.cs"];
m16_279 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes_Encoding()", span="654-654", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes_Encoding()", file="XmlNodeConverterTest.cs"];
m16_280 [label="XmlNode node = DeserializeXmlNode(@''{\r\n  ''''xs!:Choice!'''': {\r\n    ''''@msdata:IsDataSet!'''': '''''''',\r\n    ''''@xmlns:xs!'''': ''''http://www.w3.org/2001/XMLSchema'''',\r\n    ''''@xmlns:msdata'''': ''''urn:schemas-microsoft-com:xml-msdata'''',\r\n    ''''?xml-stylesheet'''': ''''href=\''''classic.xsl\'''' type=\''''text/xml\'''''''',\r\n    ''''#cdata-section'''': ''''<Kiwi>true</Kiwi>''''\r\n  }\r\n}'')", span="656-664", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes_Encoding()", file="XmlNodeConverterTest.cs"];
m16_281 [label="Assert.AreEqual(@''<xs_x0021_:Choice_x0021_ msdata:IsDataSet_x0021_='''''''' xmlns:xs_x0021_=''''http://www.w3.org/2001/XMLSchema'''' xmlns:msdata=''''urn:schemas-microsoft-com:xml-msdata''''><?xml-stylesheet href=''''classic.xsl'''' type=''''text/xml''''?><![CDATA[<Kiwi>true</Kiwi>]]></xs_x0021_:Choice_x0021_>'', node.InnerXml)", span="666-666", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes_Encoding()", file="XmlNodeConverterTest.cs"];
m16_282 [label="string json = SerializeXmlNode(node)", span="668-668", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes_Encoding()", file="XmlNodeConverterTest.cs"];
m16_283 [label="StringAssert.AreEqual(@''{\r\n  ''''xs!:Choice!'''': {\r\n    ''''@msdata:IsDataSet!'''': '''''''',\r\n    ''''@xmlns:xs!'''': ''''http://www.w3.org/2001/XMLSchema'''',\r\n    ''''@xmlns:msdata'''': ''''urn:schemas-microsoft-com:xml-msdata'''',\r\n    ''''?xml-stylesheet'''': ''''href=\''''classic.xsl\'''' type=\''''text/xml\'''''''',\r\n    ''''#cdata-section'''': ''''<Kiwi>true</Kiwi>''''\r\n  }\r\n}'', json)", span="670-678", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes_Encoding()", file="XmlNodeConverterTest.cs"];
m16_284 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes_Encoding()", span="654-654", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes_Encoding()", file="XmlNodeConverterTest.cs"];
m16_97 [label="Entry Newtonsoft.Json.JsonSerializerSettings.JsonSerializerSettings()", span="428-428", cluster="Newtonsoft.Json.JsonSerializerSettings.JsonSerializerSettings()", file="XmlNodeConverterTest.cs"];
m16_95 [label="Entry Newtonsoft.Json.Linq.JObject.JObject()", span="87-87", cluster="Newtonsoft.Json.Linq.JObject.JObject()", file="XmlNodeConverterTest.cs"];
m16_570 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNull()", span="1781-1781", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNull()", file="XmlNodeConverterTest.cs"];
m16_571 [label="string json = @''{\r\n  ''''$id'''': ''''1'''',\r\n  ''''$values'''': null\r\n}''", span="1783-1786", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNull()", file="XmlNodeConverterTest.cs"];
m16_572 [label="XmlNode node = JsonConvert.DeserializeXmlNode(json, ''root'')", span="1788-1788", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNull()", file="XmlNodeConverterTest.cs"];
m16_576 [label="StringAssert.AreEqual(json, newJson)", span="1798-1798", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNull()", file="XmlNodeConverterTest.cs"];
m16_573 [label="string xml = GetIndentedInnerXml(node)", span="1789-1789", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNull()", file="XmlNodeConverterTest.cs"];
m16_575 [label="string newJson = JsonConvert.SerializeXmlNode(node, Formatting.Indented, true)", span="1796-1796", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNull()", file="XmlNodeConverterTest.cs"];
m16_574 [label="StringAssert.AreEqual(@''<?xml version=''''1.0'''' encoding=''''utf-16''''?>\r\n<root xmlns:json=''''http://james.newtonking.com/projects/json'''' json:id=''''1''''>\r\n  <values xmlns=''''http://james.newtonking.com/projects/json'''' />\r\n</root>'', xml)", span="1791-1794", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNull()", file="XmlNodeConverterTest.cs"];
m16_577 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNull()", span="1781-1781", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayNull()", file="XmlNodeConverterTest.cs"];
m16_15 [label="Entry Unk.SerializeXmlNode", span="", cluster="Unk.SerializeXmlNode", file="XmlNodeConverterTest.cs"];
m16_383 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RootObjectMultipleProperties()", span="1059-1059", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RootObjectMultipleProperties()", file="XmlNodeConverterTest.cs"];
m16_384 [label="ExceptionAssert.Throws<JsonSerializationException>(\r\n                () => { XmlDocument newDoc = (XmlDocument)JsonConvert.DeserializeXmlNode(@''{Prop1:1,Prop2:2}''); },\r\n                ''JSON root object has multiple properties. The root object must have a single property in order to create a valid XML document. Consider specifying a DeserializeRootElementName. Path 'Prop2', line 1, position 15.'')", span="1061-1063", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RootObjectMultipleProperties()", file="XmlNodeConverterTest.cs"];
m16_385 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RootObjectMultipleProperties()", span="1059-1059", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RootObjectMultipleProperties()", file="XmlNodeConverterTest.cs"];
m16_271 [label="Entry Unk.Element", span="", cluster="Unk.Element", file="XmlNodeConverterTest.cs"];
m16_64 [label="Entry Unk.Read", span="", cluster="Unk.Read", file="XmlNodeConverterTest.cs"];
m16_362 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmptyNode()", span="995-995", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmptyNode()", file="XmlNodeConverterTest.cs"];
m16_363 [label="string xml = @''<?xml version=''''1.0'''' standalone=''''no''''?>\r\n			<root>\r\n			  <person id=''''1''''>\r\n				<name>Alan</name>\r\n				<url />\r\n			  </person>\r\n			  <person id=''''2''''>\r\n				<name>Louis</name>\r\n				<url>http://www.yahoo.com</url>\r\n			  </person>\r\n			</root>''", span="997-1007", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmptyNode()", file="XmlNodeConverterTest.cs"];
m16_364 [label="XmlDocument doc = new XmlDocument()", span="1009-1009", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmptyNode()", file="XmlNodeConverterTest.cs"];
m16_365 [label="doc.LoadXml(xml)", span="1010-1010", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmptyNode()", file="XmlNodeConverterTest.cs"];
m16_366 [label="string jsonText = SerializeXmlNode(doc)", span="1012-1012", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmptyNode()", file="XmlNodeConverterTest.cs"];
m16_369 [label="Assert.AreEqual(doc.InnerXml, newDoc.InnerXml)", span="1037-1037", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmptyNode()", file="XmlNodeConverterTest.cs"];
m16_367 [label="StringAssert.AreEqual(@''{\r\n  ''''?xml'''': {\r\n    ''''@version'''': ''''1.0'''',\r\n    ''''@standalone'''': ''''no''''\r\n  },\r\n  ''''root'''': {\r\n    ''''person'''': [\r\n      {\r\n        ''''@id'''': ''''1'''',\r\n        ''''name'''': ''''Alan'''',\r\n        ''''url'''': null\r\n      },\r\n      {\r\n        ''''@id'''': ''''2'''',\r\n        ''''name'''': ''''Louis'''',\r\n        ''''url'''': ''''http://www.yahoo.com''''\r\n      }\r\n    ]\r\n  }\r\n}'', jsonText)", span="1014-1033", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmptyNode()", file="XmlNodeConverterTest.cs"];
m16_368 [label="XmlDocument newDoc = (XmlDocument)DeserializeXmlNode(jsonText)", span="1035-1035", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmptyNode()", file="XmlNodeConverterTest.cs"];
m16_370 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmptyNode()", span="995-995", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmptyNode()", file="XmlNodeConverterTest.cs"];
m16_312 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Utf8StringWriter.Utf8StringWriter(System.Text.StringBuilder)", span="807-807", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Utf8StringWriter.Utf8StringWriter(System.Text.StringBuilder)", file="XmlNodeConverterTest.cs"];
m16_313 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Utf8StringWriter.Utf8StringWriter(System.Text.StringBuilder)", span="807-807", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Utf8StringWriter.Utf8StringWriter(System.Text.StringBuilder)", file="XmlNodeConverterTest.cs"];
m16_163 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DecimalContainer.DecimalContainer()", span="357-357", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DecimalContainer.DecimalContainer()", file="XmlNodeConverterTest.cs"];
m16_143 [label="Entry Unk.ToArray", span="", cluster="Unk.ToArray", file="XmlNodeConverterTest.cs"];
m16_528 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)", file="XmlNodeConverterTest.cs"];
m16_24 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string)", span="97-97", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string)", file="XmlNodeConverterTest.cs"];
m16_25 [label="return DeserializeXmlNode(json, null);", span="99-99", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string)", file="XmlNodeConverterTest.cs"];
m16_26 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string)", span="97-97", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string)", file="XmlNodeConverterTest.cs"];
m16_337 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentDeserialize()", span="919-919", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentDeserialize()", file="XmlNodeConverterTest.cs"];
m16_338 [label="string jsonText = @''{\r\n  ''''?xml'''': {\r\n    ''''@version'''': ''''1.0'''',\r\n    ''''@standalone'''': ''''no''''\r\n  },\r\n  ''''span'''': {\r\n    ''''@class'''': ''''vevent'''',\r\n    ''''a'''': {\r\n      ''''@class'''': ''''url'''',\r\n      ''''span'''': {\r\n        ''''@class'''': ''''summary'''',\r\n        ''''#text'''': ''''Web 2.0 Conference'''',\r\n        ''''#cdata-section'''': ''''my escaped text''''\r\n      },\r\n      ''''@href'''': ''''http://www.web2con.com/''''\r\n    }\r\n  }\r\n}''", span="921-938", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentDeserialize()", color=green, community=0, file="XmlNodeConverterTest.cs"];
m16_339 [label="XmlDocument doc = (XmlDocument)DeserializeXmlNode(jsonText)", span="940-940", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentDeserialize()", color=green, community=0, file="XmlNodeConverterTest.cs"];
m16_340 [label="string expected = @''<?xml version=''''1.0'''' standalone=''''no''''?>\r\n<span class=''''vevent''''>\r\n  <a class=''''url'''' href=''''http://www.web2con.com/''''>\r\n    <span class=''''summary''''>Web 2.0 Conference<![CDATA[my escaped text]]></span>\r\n  </a>\r\n</span>''", span="942-947", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentDeserialize()", file="XmlNodeConverterTest.cs"];
m16_50 [label="Entry Unk.ReadJson", span="", cluster="Unk.ReadJson", file="XmlNodeConverterTest.cs"];
m16_294 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.XmlDocumentTypeSerialize()", span="699-699", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.XmlDocumentTypeSerialize()", file="XmlNodeConverterTest.cs"];
m16_295 [label="string xml = @''<?xml version=''''1.0'''' encoding=''''utf-8''''?><!DOCTYPE STOCKQUOTE PUBLIC ''''-//W3C//DTD StockQuote 1.5//EN'''' ''''http://www.idontexistnopenopewhatnope123.org/dtd/stockquote_1.5.dtd''''><STOCKQUOTE ROWCOUNT=''''2''''><RESULT><ROW><ASK>0</ASK><BID>0</BID><CHANGE>-16.310</CHANGE><COMPANYNAME>Dow Jones</COMPANYNAME><DATETIME>2014-04-17 15:50:37</DATETIME><DIVIDEND>0</DIVIDEND><EPS>0</EPS><EXCHANGE></EXCHANGE><HIGH>16460.490</HIGH><LASTDATETIME>2014-04-17 15:50:37</LASTDATETIME><LASTPRICE>16408.540</LASTPRICE><LOW>16368.140</LOW><OPEN>16424.140</OPEN><PCHANGE>-0.099</PCHANGE><PE>0</PE><PREVIOUSCLOSE>16424.850</PREVIOUSCLOSE><SHARES>0</SHARES><TICKER>DJII</TICKER><TRADES>0</TRADES><VOLUME>136188700</VOLUME><YEARHIGH>11309.000</YEARHIGH><YEARLOW>9302.280</YEARLOW><YIELD>0</YIELD></ROW><ROW><ASK>0</ASK><BID>0</BID><CHANGE>9.290</CHANGE><COMPANYNAME>NASDAQ</COMPANYNAME><DATETIME>2014-04-17 15:40:01</DATETIME><DIVIDEND>0</DIVIDEND><EPS>0</EPS><EXCHANGE></EXCHANGE><HIGH>4110.460</HIGH><LASTDATETIME>2014-04-17 15:40:01</LASTDATETIME><LASTPRICE>4095.520</LASTPRICE><LOW>4064.700</LOW><OPEN>4080.300</OPEN><PCHANGE>0.227</PCHANGE><PE>0</PE><PREVIOUSCLOSE>4086.230</PREVIOUSCLOSE><SHARES>0</SHARES><TICKER>COMP</TICKER><TRADES>0</TRADES><VOLUME>1784210100</VOLUME><YEARHIGH>4371.710</YEARHIGH><YEARLOW>3154.960</YEARLOW><YIELD>0</YIELD></ROW></RESULT><STATUS>Couldn't find ticker: SPIC?</STATUS><STATUSCODE>2</STATUSCODE></STOCKQUOTE>''", span="701-701", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.XmlDocumentTypeSerialize()", file="XmlNodeConverterTest.cs"];
m16_296 [label="string expected = @''{\r\n  ''''?xml'''': {\r\n    ''''@version'''': ''''1.0'''',\r\n    ''''@encoding'''': ''''utf-8''''\r\n  },\r\n  ''''!DOCTYPE'''': {\r\n    ''''@name'''': ''''STOCKQUOTE'''',\r\n    ''''@public'''': ''''-//W3C//DTD StockQuote 1.5//EN'''',\r\n    ''''@system'''': ''''http://www.idontexistnopenopewhatnope123.org/dtd/stockquote_1.5.dtd''''\r\n  },\r\n  ''''STOCKQUOTE'''': {\r\n    ''''@ROWCOUNT'''': ''''2'''',\r\n    ''''RESULT'''': {\r\n      ''''ROW'''': [\r\n        {\r\n          ''''ASK'''': ''''0'''',\r\n          ''''BID'''': ''''0'''',\r\n          ''''CHANGE'''': ''''-16.310'''',\r\n          ''''COMPANYNAME'''': ''''Dow Jones'''',\r\n          ''''DATETIME'''': ''''2014-04-17 15:50:37'''',\r\n          ''''DIVIDEND'''': ''''0'''',\r\n          ''''EPS'''': ''''0'''',\r\n          ''''EXCHANGE'''': '''''''',\r\n          ''''HIGH'''': ''''16460.490'''',\r\n          ''''LASTDATETIME'''': ''''2014-04-17 15:50:37'''',\r\n          ''''LASTPRICE'''': ''''16408.540'''',\r\n          ''''LOW'''': ''''16368.140'''',\r\n          ''''OPEN'''': ''''16424.140'''',\r\n          ''''PCHANGE'''': ''''-0.099'''',\r\n          ''''PE'''': ''''0'''',\r\n          ''''PREVIOUSCLOSE'''': ''''16424.850'''',\r\n          ''''SHARES'''': ''''0'''',\r\n          ''''TICKER'''': ''''DJII'''',\r\n          ''''TRADES'''': ''''0'''',\r\n          ''''VOLUME'''': ''''136188700'''',\r\n          ''''YEARHIGH'''': ''''11309.000'''',\r\n          ''''YEARLOW'''': ''''9302.280'''',\r\n          ''''YIELD'''': ''''0''''\r\n        },\r\n        {\r\n          ''''ASK'''': ''''0'''',\r\n          ''''BID'''': ''''0'''',\r\n          ''''CHANGE'''': ''''9.290'''',\r\n          ''''COMPANYNAME'''': ''''NASDAQ'''',\r\n          ''''DATETIME'''': ''''2014-04-17 15:40:01'''',\r\n          ''''DIVIDEND'''': ''''0'''',\r\n          ''''EPS'''': ''''0'''',\r\n          ''''EXCHANGE'''': '''''''',\r\n          ''''HIGH'''': ''''4110.460'''',\r\n          ''''LASTDATETIME'''': ''''2014-04-17 15:40:01'''',\r\n          ''''LASTPRICE'''': ''''4095.520'''',\r\n          ''''LOW'''': ''''4064.700'''',\r\n          ''''OPEN'''': ''''4080.300'''',\r\n          ''''PCHANGE'''': ''''0.227'''',\r\n          ''''PE'''': ''''0'''',\r\n          ''''PREVIOUSCLOSE'''': ''''4086.230'''',\r\n          ''''SHARES'''': ''''0'''',\r\n          ''''TICKER'''': ''''COMP'''',\r\n          ''''TRADES'''': ''''0'''',\r\n          ''''VOLUME'''': ''''1784210100'''',\r\n          ''''YEARHIGH'''': ''''4371.710'''',\r\n          ''''YEARLOW'''': ''''3154.960'''',\r\n          ''''YIELD'''': ''''0''''\r\n        }\r\n      ]\r\n    },\r\n    ''''STATUS'''': ''''Couldn't find ticker: SPIC?'''',\r\n    ''''STATUSCODE'''': ''''2''''\r\n  }\r\n}''", span="703-772", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.XmlDocumentTypeSerialize()", file="XmlNodeConverterTest.cs"];
m16_299 [label="doc1.LoadXml(xml)", span="776-776", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.XmlDocumentTypeSerialize()", file="XmlNodeConverterTest.cs"];
m16_303 [label="StringAssert.AreEqual(xml, ToStringWithDeclaration(doc11))", span="784-784", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.XmlDocumentTypeSerialize()", file="XmlNodeConverterTest.cs"];
m16_304 [label="XDocument doc2 = XDocument.Parse(xml)", span="787-787", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.XmlDocumentTypeSerialize()", file="XmlNodeConverterTest.cs"];
m16_308 [label="StringAssert.AreEqual(xml, ToStringWithDeclaration(doc22))", span="795-795", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.XmlDocumentTypeSerialize()", file="XmlNodeConverterTest.cs"];
m16_297 [label="XmlDocument doc1 = new XmlDocument()", span="774-774", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.XmlDocumentTypeSerialize()", file="XmlNodeConverterTest.cs"];
m16_301 [label="StringAssert.AreEqual(expected, json1)", span="780-780", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.XmlDocumentTypeSerialize()", file="XmlNodeConverterTest.cs"];
m16_306 [label="StringAssert.AreEqual(expected, json2)", span="791-791", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.XmlDocumentTypeSerialize()", file="XmlNodeConverterTest.cs"];
m16_298 [label="doc1.XmlResolver = null", span="775-775", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.XmlDocumentTypeSerialize()", file="XmlNodeConverterTest.cs"];
m16_300 [label="string json1 = JsonConvert.SerializeXmlNode(doc1, Formatting.Indented)", span="778-778", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.XmlDocumentTypeSerialize()", file="XmlNodeConverterTest.cs"];
m16_302 [label="XmlDocument doc11 = JsonConvert.DeserializeXmlNode(json1)", span="782-782", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.XmlDocumentTypeSerialize()", file="XmlNodeConverterTest.cs"];
m16_305 [label="string json2 = JsonConvert.SerializeXNode(doc2, Formatting.Indented)", span="789-789", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.XmlDocumentTypeSerialize()", file="XmlNodeConverterTest.cs"];
m16_307 [label="XDocument doc22 = JsonConvert.DeserializeXNode(json2)", span="793-793", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.XmlDocumentTypeSerialize()", file="XmlNodeConverterTest.cs"];
m16_309 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.XmlDocumentTypeSerialize()", span="699-699", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.XmlDocumentTypeSerialize()", file="XmlNodeConverterTest.cs"];
m16_75 [label="Entry Unk.DeserializeXNode", span="", cluster="Unk.DeserializeXNode", file="XmlNodeConverterTest.cs"];
m16_787 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Deserialize_XDocument_NoRootWithDeclaration()", span="2813-2813", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Deserialize_XDocument_NoRootWithDeclaration()", file="XmlNodeConverterTest.cs"];
m16_788 [label="XDocument d = JsonConvert.DeserializeXNode(@''{''''?xml'''':{''''@version'''':''''Version!'''',''''@encoding'''':''''Encoding!'''',''''@standalone'''':''''Standalone!''''}}'')", span="2815-2815", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Deserialize_XDocument_NoRootWithDeclaration()", file="XmlNodeConverterTest.cs"];
m16_789 [label="Assert.AreEqual(null, d.Root)", span="2817-2817", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Deserialize_XDocument_NoRootWithDeclaration()", file="XmlNodeConverterTest.cs"];
m16_790 [label="Assert.AreEqual(''Version!'', d.Declaration.Version)", span="2818-2818", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Deserialize_XDocument_NoRootWithDeclaration()", file="XmlNodeConverterTest.cs"];
m16_791 [label="Assert.AreEqual(''Encoding!'', d.Declaration.Encoding)", span="2819-2819", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Deserialize_XDocument_NoRootWithDeclaration()", file="XmlNodeConverterTest.cs"];
m16_792 [label="Assert.AreEqual(''Standalone!'', d.Declaration.Standalone)", span="2820-2820", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Deserialize_XDocument_NoRootWithDeclaration()", file="XmlNodeConverterTest.cs"];
m16_793 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Deserialize_XDocument_NoRootWithDeclaration()", span="2813-2813", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Deserialize_XDocument_NoRootWithDeclaration()", file="XmlNodeConverterTest.cs"];
m16_345 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.GetIndentedInnerXml(XmlNode)", span="954-954", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.GetIndentedInnerXml(XmlNode)", file="XmlNodeConverterTest.cs"];
m16_346 [label="XmlWriterSettings settings = new XmlWriterSettings()", span="956-956", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.GetIndentedInnerXml(XmlNode)", file="XmlNodeConverterTest.cs"];
m16_350 [label="node.WriteTo(writer)", span="963-963", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.GetIndentedInnerXml(XmlNode)", file="XmlNodeConverterTest.cs"];
m16_347 [label="settings.Indent = true", span="957-957", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.GetIndentedInnerXml(XmlNode)", file="XmlNodeConverterTest.cs"];
m16_348 [label="StringWriter sw = new StringWriter()", span="959-959", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.GetIndentedInnerXml(XmlNode)", file="XmlNodeConverterTest.cs"];
m16_349 [label="XmlWriter writer = XmlWriter.Create(sw, settings)", span="961-961", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.GetIndentedInnerXml(XmlNode)", file="XmlNodeConverterTest.cs"];
m16_351 [label="return sw.ToString();", span="966-966", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.GetIndentedInnerXml(XmlNode)", file="XmlNodeConverterTest.cs"];
m16_352 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.GetIndentedInnerXml(XmlNode)", span="954-954", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.GetIndentedInnerXml(XmlNode)", file="XmlNodeConverterTest.cs"];
m16_16 [label="Entry XmlNodeReader.cstr", span="", cluster="XmlNodeReader.cstr", file="XmlNodeConverterTest.cs"];
m16_674 [label="Entry Newtonsoft.Json.JsonSerializationException.JsonSerializationException(string)", span="52-52", cluster="Newtonsoft.Json.JsonSerializationException.JsonSerializationException(string)", file="XmlNodeConverterTest.cs"];
m16_562 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataWithNullValue()", span="1761-1761", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataWithNullValue()", file="XmlNodeConverterTest.cs"];
m16_563 [label="string json = @''{\r\n  ''''$id'''': null\r\n}''", span="1763-1765", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataWithNullValue()", file="XmlNodeConverterTest.cs"];
m16_564 [label="XmlNode node = JsonConvert.DeserializeXmlNode(json, ''root'')", span="1767-1767", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataWithNullValue()", file="XmlNodeConverterTest.cs"];
m16_565 [label="string xml = GetIndentedInnerXml(node)", span="1768-1768", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataWithNullValue()", file="XmlNodeConverterTest.cs"];
m16_567 [label="string newJson = JsonConvert.SerializeXmlNode(node, Formatting.Indented, true)", span="1773-1773", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataWithNullValue()", file="XmlNodeConverterTest.cs"];
m16_566 [label="StringAssert.AreEqual(@''<?xml version=''''1.0'''' encoding=''''utf-16''''?>\r\n<root xmlns:json=''''http://james.newtonking.com/projects/json'''' json:id='''''''' />'', xml)", span="1770-1771", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataWithNullValue()", file="XmlNodeConverterTest.cs"];
m16_568 [label="StringAssert.AreEqual(@''{\r\n  ''''$id'''': ''''''''\r\n}'', newJson)", span="1775-1777", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataWithNullValue()", file="XmlNodeConverterTest.cs"];
m16_569 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataWithNullValue()", span="1761-1761", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataWithNullValue()", file="XmlNodeConverterTest.cs"];
m16_310 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ToStringWithDeclaration(XmlDocument, bool)", span="824-824", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ToStringWithDeclaration(XmlDocument, bool)", file="XmlNodeConverterTest.cs"];
m16_322 [label="StringBuilder builder = new StringBuilder()", span="826-826", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ToStringWithDeclaration(XmlDocument, bool)", file="XmlNodeConverterTest.cs"];
m16_323 [label="var writer = XmlWriter.Create(new Utf8StringWriter(builder), new XmlWriterSettings { Indent = indent })", span="827-827", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ToStringWithDeclaration(XmlDocument, bool)", file="XmlNodeConverterTest.cs"];
m16_324 [label="doc.Save(writer)", span="829-829", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ToStringWithDeclaration(XmlDocument, bool)", file="XmlNodeConverterTest.cs"];
m16_325 [label="return builder.ToString();", span="831-831", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ToStringWithDeclaration(XmlDocument, bool)", file="XmlNodeConverterTest.cs"];
m16_326 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ToStringWithDeclaration(XmlDocument, bool)", span="824-824", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ToStringWithDeclaration(XmlDocument, bool)", file="XmlNodeConverterTest.cs"];
m16_473 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Encoding()", span="1400-1400", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Encoding()", file="XmlNodeConverterTest.cs"];
m16_474 [label="XmlDocument doc = new XmlDocument()", span="1402-1402", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Encoding()", file="XmlNodeConverterTest.cs"];
m16_475 [label="doc.LoadXml(@''<name>O''''Connor</name>'')", span="1404-1404", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Encoding()", file="XmlNodeConverterTest.cs"];
m16_476 [label="string json = SerializeXmlNode(doc)", span="1406-1406", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Encoding()", file="XmlNodeConverterTest.cs"];
m16_477 [label="StringAssert.AreEqual(@''{\r\n  ''''name'''': ''''O\''''Connor''''\r\n}'', json)", span="1407-1409", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Encoding()", file="XmlNodeConverterTest.cs"];
m16_478 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Encoding()", span="1400-1400", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Encoding()", file="XmlNodeConverterTest.cs"];
m16_657 [label="Entry System.IO.MemoryStream.MemoryStream()", span="0-0", cluster="System.IO.MemoryStream.MemoryStream()", file="XmlNodeConverterTest.cs"];
m16_586 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleItemArrayPropertySerialization()", span="1889-1889", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleItemArrayPropertySerialization()", file="XmlNodeConverterTest.cs"];
m16_587 [label="Product product = new Product()", span="1891-1891", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleItemArrayPropertySerialization()", file="XmlNodeConverterTest.cs"];
m16_588 [label="product.Name = ''Apple''", span="1893-1893", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleItemArrayPropertySerialization()", file="XmlNodeConverterTest.cs"];
m16_589 [label="product.ExpiryDate = new DateTime(2008, 12, 28, 0, 0, 0, DateTimeKind.Utc)", span="1894-1894", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleItemArrayPropertySerialization()", file="XmlNodeConverterTest.cs"];
m16_590 [label="product.Price = 3.99M", span="1895-1895", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleItemArrayPropertySerialization()", file="XmlNodeConverterTest.cs"];
m16_591 [label="product.Sizes = new string[] { ''Small'' }", span="1896-1896", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleItemArrayPropertySerialization()", file="XmlNodeConverterTest.cs"];
m16_592 [label="string output = JsonConvert.SerializeObject(product, new IsoDateTimeConverter())", span="1898-1898", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleItemArrayPropertySerialization()", file="XmlNodeConverterTest.cs"];
m16_593 [label="XmlDocument xmlProduct = JsonConvert.DeserializeXmlNode(output, ''product'', true)", span="1900-1900", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleItemArrayPropertySerialization()", file="XmlNodeConverterTest.cs"];
m16_594 [label="StringAssert.AreEqual(@''<product>\r\n  <Name>Apple</Name>\r\n  <ExpiryDate>2008-12-28T00:00:00Z</ExpiryDate>\r\n  <Price>3.99</Price>\r\n  <Sizes json:Array=''''true'''' xmlns:json=''''http://james.newtonking.com/projects/json''''>Small</Sizes>\r\n</product>'', IndentXml(xmlProduct.InnerXml))", span="1902-1907", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleItemArrayPropertySerialization()", file="XmlNodeConverterTest.cs"];
m16_595 [label="string output2 = JsonConvert.SerializeXmlNode(xmlProduct.DocumentElement, Formatting.Indented)", span="1909-1909", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleItemArrayPropertySerialization()", file="XmlNodeConverterTest.cs"];
m16_596 [label="StringAssert.AreEqual(@''{\r\n  ''''product'''': {\r\n    ''''Name'''': ''''Apple'''',\r\n    ''''ExpiryDate'''': ''''2008-12-28T00:00:00Z'''',\r\n    ''''Price'''': ''''3.99'''',\r\n    ''''Sizes'''': [\r\n      ''''Small''''\r\n    ]\r\n  }\r\n}'', output2)", span="1911-1920", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleItemArrayPropertySerialization()", file="XmlNodeConverterTest.cs"];
m16_597 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleItemArrayPropertySerialization()", span="1889-1889", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleItemArrayPropertySerialization()", file="XmlNodeConverterTest.cs"];
m16_834 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyNodeAndOmitRoot_XElement()", span="2888-2888", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyNodeAndOmitRoot_XElement()", file="XmlNodeConverterTest.cs"];
m16_835 [label="string xmlString = @''<myemptynode />''", span="2890-2890", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyNodeAndOmitRoot_XElement()", file="XmlNodeConverterTest.cs"];
m16_836 [label="var xml = XElement.Parse(xmlString)", span="2892-2892", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyNodeAndOmitRoot_XElement()", file="XmlNodeConverterTest.cs"];
m16_837 [label="string json = JsonConvert.SerializeXNode(xml, Formatting.Indented, true)", span="2894-2894", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyNodeAndOmitRoot_XElement()", file="XmlNodeConverterTest.cs"];
m16_838 [label="Assert.AreEqual(''null'', json)", span="2896-2896", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyNodeAndOmitRoot_XElement()", file="XmlNodeConverterTest.cs"];
m16_839 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyNodeAndOmitRoot_XElement()", span="2888-2888", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyNodeAndOmitRoot_XElement()", file="XmlNodeConverterTest.cs"];
m16_278 [label="Entry Unk.AppendChild", span="", cluster="Unk.AppendChild", file="XmlNodeConverterTest.cs"];
m16_20 [label="Entry Unk.MoveToContent", span="", cluster="Unk.MoveToContent", file="XmlNodeConverterTest.cs"];
m16_354 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleTextNode()", span="970-970", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleTextNode()", file="XmlNodeConverterTest.cs"];
m16_355 [label="string xml = @''<?xml version=''''1.0'''' standalone=''''no''''?>\r\n			<root>\r\n			  <person id=''''1''''>\r\n	  			<name>Alan</name>\r\n		  		<url>http://www.google.com</url>\r\n			  </person>\r\n			  <person id=''''2''''>\r\n			  	<name>Louis</name>\r\n				  <url>http://www.yahoo.com</url>\r\n			  </person>\r\n			</root>''", span="972-982", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleTextNode()", file="XmlNodeConverterTest.cs"];
m16_356 [label="XmlDocument doc = new XmlDocument()", span="984-984", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleTextNode()", file="XmlNodeConverterTest.cs"];
m16_357 [label="doc.LoadXml(xml)", span="985-985", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleTextNode()", file="XmlNodeConverterTest.cs"];
m16_358 [label="string jsonText = SerializeXmlNode(doc)", span="987-987", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleTextNode()", file="XmlNodeConverterTest.cs"];
m16_360 [label="Assert.AreEqual(doc.InnerXml, newDoc.InnerXml)", span="991-991", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleTextNode()", file="XmlNodeConverterTest.cs"];
m16_359 [label="XmlDocument newDoc = (XmlDocument)DeserializeXmlNode(jsonText)", span="989-989", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleTextNode()", file="XmlNodeConverterTest.cs"];
m16_361 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleTextNode()", span="970-970", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SingleTextNode()", file="XmlNodeConverterTest.cs"];
m16_398 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", span="1093-1093", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs"];
m16_399 [label="string arrayXml = @''<root xmlns:json=''''http://james.newtonking.com/projects/json''''>\r\n			  <person id=''''1''''>\r\n				  <name>Alan</name>\r\n				  <url>http://www.google.com</url>\r\n				  <role json:Array=''''true''''>Admin</role>\r\n			  </person>\r\n			</root>''", span="1095-1101", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs"];
m16_400 [label="XmlDocument arrayDoc = new XmlDocument()", span="1103-1103", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs"];
m16_401 [label="arrayDoc.LoadXml(arrayXml)", span="1104-1104", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs"];
m16_402 [label="string arrayJsonText = SerializeXmlNode(arrayDoc)", span="1106-1106", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs"];
m16_403 [label="string expected = @''{\r\n  ''''root'''': {\r\n    ''''person'''': {\r\n      ''''@id'''': ''''1'''',\r\n      ''''name'''': ''''Alan'''',\r\n      ''''url'''': ''''http://www.google.com'''',\r\n      ''''role'''': [\r\n        ''''Admin''''\r\n      ]\r\n    }\r\n  }\r\n}''", span="1107-1118", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs"];
m16_404 [label="StringAssert.AreEqual(expected, arrayJsonText)", span="1119-1119", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs"];
m16_405 [label="arrayXml = @''<root xmlns:json=''''http://james.newtonking.com/projects/json''''>\r\n			  <person id=''''1''''>\r\n				  <name>Alan</name>\r\n				  <url>http://www.google.com</url>\r\n				  <role json:Array=''''true''''>Admin1</role>\r\n				  <role json:Array=''''true''''>Admin2</role>\r\n			  </person>\r\n			</root>''", span="1121-1128", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs"];
m16_406 [label="arrayDoc = new XmlDocument()", span="1130-1130", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs"];
m16_407 [label="arrayDoc.LoadXml(arrayXml)", span="1131-1131", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs"];
m16_408 [label="arrayJsonText = SerializeXmlNode(arrayDoc)", span="1133-1133", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs"];
m16_409 [label="expected = @''{\r\n  ''''root'''': {\r\n    ''''person'''': {\r\n      ''''@id'''': ''''1'''',\r\n      ''''name'''': ''''Alan'''',\r\n      ''''url'''': ''''http://www.google.com'''',\r\n      ''''role'''': [\r\n        ''''Admin1'''',\r\n        ''''Admin2''''\r\n      ]\r\n    }\r\n  }\r\n}''", span="1134-1146", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs"];
m16_410 [label="StringAssert.AreEqual(expected, arrayJsonText)", span="1147-1147", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs"];
m16_411 [label="arrayXml = @''<root xmlns:json=''''http://james.newtonking.com/projects/json''''>\r\n			  <person id=''''1''''>\r\n				  <name>Alan</name>\r\n				  <url>http://www.google.com</url>\r\n				  <role json:Array=''''false''''>Admin1</role>\r\n			  </person>\r\n			</root>''", span="1149-1155", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs"];
m16_412 [label="arrayDoc = new XmlDocument()", span="1157-1157", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs"];
m16_413 [label="arrayDoc.LoadXml(arrayXml)", span="1158-1158", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs"];
m16_414 [label="arrayJsonText = SerializeXmlNode(arrayDoc)", span="1160-1160", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs"];
m16_415 [label="expected = @''{\r\n  ''''root'''': {\r\n    ''''person'''': {\r\n      ''''@id'''': ''''1'''',\r\n      ''''name'''': ''''Alan'''',\r\n      ''''url'''': ''''http://www.google.com'''',\r\n      ''''role'''': ''''Admin1''''\r\n    }\r\n  }\r\n}''", span="1161-1170", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs"];
m16_416 [label="StringAssert.AreEqual(expected, arrayJsonText)", span="1171-1171", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs"];
m16_417 [label="arrayXml = @''<root>\r\n			  <person id=''''1''''>\r\n				  <name>Alan</name>\r\n				  <url>http://www.google.com</url>\r\n				  <role json:Array=''''true'''' xmlns:json=''''http://james.newtonking.com/projects/json''''>Admin</role>\r\n			  </person>\r\n			</root>''", span="1173-1179", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs"];
m16_418 [label="arrayDoc = new XmlDocument()", span="1181-1181", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs"];
m16_419 [label="arrayDoc.LoadXml(arrayXml)", span="1182-1182", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs"];
m16_420 [label="arrayJsonText = SerializeXmlNode(arrayDoc)", span="1184-1184", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs"];
m16_421 [label="expected = @''{\r\n  ''''root'''': {\r\n    ''''person'''': {\r\n      ''''@id'''': ''''1'''',\r\n      ''''name'''': ''''Alan'''',\r\n      ''''url'''': ''''http://www.google.com'''',\r\n      ''''role'''': [\r\n        ''''Admin''''\r\n      ]\r\n    }\r\n  }\r\n}''", span="1185-1196", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs"];
m16_422 [label="StringAssert.AreEqual(expected, arrayJsonText)", span="1197-1197", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs"];
m16_423 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", span="1093-1093", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ForceJsonArray()", file="XmlNodeConverterTest.cs"];
m16_45 [label="Entry Newtonsoft.Json.JsonTextReader.JsonTextReader(System.IO.TextReader)", span="75-75", cluster="Newtonsoft.Json.JsonTextReader.JsonTextReader(System.IO.TextReader)", file="XmlNodeConverterTest.cs"];
m16_457 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RoundTripNestedArrays()", span="1305-1305", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RoundTripNestedArrays()", file="XmlNodeConverterTest.cs"];
m16_458 [label="string json = @''{\r\n  ''''available_sizes'''': [\r\n    [\r\n      ''''assets/images/resized/0001/1070/11070v1-max-150x150.jpg'''',\r\n      ''''assets/images/resized/0001/1070/11070v1-max-150x150.jpg''''\r\n    ],\r\n    [\r\n      ''''assets/images/resized/0001/1070/11070v1-max-250x250.jpg'''',\r\n      ''''assets/images/resized/0001/1070/11070v1-max-250x250.jpg''''\r\n    ],\r\n    [\r\n      ''''assets/images/resized/0001/1070/11070v1-max-250x250.jpg''''\r\n    ]\r\n  ]\r\n}''", span="1307-1321", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RoundTripNestedArrays()", file="XmlNodeConverterTest.cs"];
m16_459 [label="XmlDocument newDoc = JsonConvert.DeserializeXmlNode(json, ''myRoot'', true)", span="1324-1324", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RoundTripNestedArrays()", file="XmlNodeConverterTest.cs"];
m16_461 [label="XDocument newXDoc = JsonConvert.DeserializeXNode(json, ''myRoot'', true)", span="1342-1342", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RoundTripNestedArrays()", file="XmlNodeConverterTest.cs"];
m16_464 [label="StringAssert.AreEqual(json, newJson)", span="1361-1361", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RoundTripNestedArrays()", file="XmlNodeConverterTest.cs"];
m16_460 [label="StringAssert.AreEqual(@''<myRoot>\r\n  <available_sizes json:Array=''''true'''' xmlns:json=''''http://james.newtonking.com/projects/json''''>\r\n    <available_sizes>assets/images/resized/0001/1070/11070v1-max-150x150.jpg</available_sizes>\r\n    <available_sizes>assets/images/resized/0001/1070/11070v1-max-150x150.jpg</available_sizes>\r\n  </available_sizes>\r\n  <available_sizes json:Array=''''true'''' xmlns:json=''''http://james.newtonking.com/projects/json''''>\r\n    <available_sizes>assets/images/resized/0001/1070/11070v1-max-250x250.jpg</available_sizes>\r\n    <available_sizes>assets/images/resized/0001/1070/11070v1-max-250x250.jpg</available_sizes>\r\n  </available_sizes>\r\n  <available_sizes json:Array=''''true'''' xmlns:json=''''http://james.newtonking.com/projects/json''''>\r\n    <available_sizes json:Array=''''true''''>assets/images/resized/0001/1070/11070v1-max-250x250.jpg</available_sizes>\r\n  </available_sizes>\r\n</myRoot>'', IndentXml(newDoc.InnerXml))", span="1326-1338", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RoundTripNestedArrays()", file="XmlNodeConverterTest.cs"];
m16_463 [label="string newJson = JsonConvert.SerializeXmlNode(newDoc, Formatting.Indented, true)", span="1360-1360", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RoundTripNestedArrays()", file="XmlNodeConverterTest.cs"];
m16_462 [label="StringAssert.AreEqual(@''<myRoot>\r\n  <available_sizes json:Array=''''true'''' xmlns:json=''''http://james.newtonking.com/projects/json''''>\r\n    <available_sizes>assets/images/resized/0001/1070/11070v1-max-150x150.jpg</available_sizes>\r\n    <available_sizes>assets/images/resized/0001/1070/11070v1-max-150x150.jpg</available_sizes>\r\n  </available_sizes>\r\n  <available_sizes json:Array=''''true'''' xmlns:json=''''http://james.newtonking.com/projects/json''''>\r\n    <available_sizes>assets/images/resized/0001/1070/11070v1-max-250x250.jpg</available_sizes>\r\n    <available_sizes>assets/images/resized/0001/1070/11070v1-max-250x250.jpg</available_sizes>\r\n  </available_sizes>\r\n  <available_sizes json:Array=''''true'''' xmlns:json=''''http://james.newtonking.com/projects/json''''>\r\n    <available_sizes json:Array=''''true''''>assets/images/resized/0001/1070/11070v1-max-250x250.jpg</available_sizes>\r\n  </available_sizes>\r\n</myRoot>'', IndentXml(newXDoc.ToString(SaveOptions.DisableFormatting)))", span="1344-1356", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RoundTripNestedArrays()", file="XmlNodeConverterTest.cs"];
m16_465 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RoundTripNestedArrays()", span="1305-1305", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RoundTripNestedArrays()", file="XmlNodeConverterTest.cs"];
m16_165 [label="Entry Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string, Newtonsoft.Json.JsonSerializerSettings)", span="766-766", cluster="Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string, Newtonsoft.Json.JsonSerializerSettings)", file="XmlNodeConverterTest.cs"];
m16_578 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmptyPropertyName()", span="1802-1802", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmptyPropertyName()", file="XmlNodeConverterTest.cs"];
m16_579 [label="string json = @''{\r\n  ''''8452309520V2'''': {\r\n    '''''''': {\r\n      ''''CLIENT'''': {\r\n        ''''ID_EXPIRATION_1'''': {\r\n          ''''VALUE'''': ''''12/12/2000'''',\r\n          ''''DATATYPE'''': ''''D'''',\r\n          ''''MSG'''': ''''Missing Identification Exp. Date 1''''\r\n        },\r\n        ''''ID_ISSUEDATE_1'''': {\r\n          ''''VALUE'''': '''''''',\r\n          ''''DATATYPE'''': ''''D'''',\r\n          ''''MSG'''': ''''Missing Identification Issue Date 1''''\r\n        }\r\n      }\r\n    },\r\n    ''''457463534534'''': {\r\n      ''''ACCOUNT'''': {\r\n        ''''FUNDING_SOURCE'''': {\r\n          ''''VALUE'''': ''''FS0'''',\r\n          ''''DATATYPE'''': ''''L'''',\r\n          ''''MSG'''': ''''Missing Source of Funds''''\r\n        }\r\n      }\r\n    }\r\n  }\r\n}{\r\n  ''''34534634535345'''': {\r\n    '''''''': {\r\n      ''''CLIENT'''': {\r\n        ''''ID_NUMBER_1'''': {\r\n          ''''VALUE'''': '''''''',\r\n          ''''DATATYPE'''': ''''S'''',\r\n          ''''MSG'''': ''''Missing Picture ID''''\r\n        },\r\n        ''''ID_EXPIRATION_1'''': {\r\n          ''''VALUE'''': ''''12/12/2000'''',\r\n          ''''DATATYPE'''': ''''D'''',\r\n          ''''MSG'''': ''''Missing Picture ID''''\r\n        },\r\n        ''''WALK_IN'''': {\r\n          ''''VALUE'''': '''''''',\r\n          ''''DATATYPE'''': ''''L'''',\r\n          ''''MSG'''': ''''Missing Walk in''''\r\n        },\r\n        ''''PERSONAL_MEETING'''': {\r\n          ''''VALUE'''': ''''PM1'''',\r\n          ''''DATATYPE'''': ''''L'''',\r\n          ''''MSG'''': ''''Missing Met Client in Person''''\r\n        },\r\n        ''''ID_ISSUEDATE_1'''': {\r\n          ''''VALUE'''': '''''''',\r\n          ''''DATATYPE'''': ''''D'''',\r\n          ''''MSG'''': ''''Missing Picture ID''''\r\n        },\r\n        ''''PHOTO_ID'''': {\r\n          ''''VALUE'''': '''''''',\r\n          ''''DATATYPE'''': ''''L'''',\r\n          ''''MSG'''': ''''Missing Picture ID''''\r\n        },\r\n        ''''ID_TYPE_1'''': {\r\n          ''''VALUE'''': '''''''',\r\n          ''''DATATYPE'''': ''''L'''',\r\n          ''''MSG'''': ''''Missing Picture ID''''\r\n        }\r\n      }\r\n    },\r\n    ''''45635624523'''': {\r\n      ''''ACCOUNT'''': {\r\n        ''''FUNDING_SOURCE'''': {\r\n          ''''VALUE'''': ''''FS1'''',\r\n          ''''DATATYPE'''': ''''L'''',\r\n          ''''MSG'''': ''''Missing Source of Funds''''\r\n        }\r\n      }\r\n    }\r\n  }\r\n}''", span="1804-1881", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmptyPropertyName()", file="XmlNodeConverterTest.cs"];
m16_580 [label="ExceptionAssert.Throws<JsonSerializationException>(\r\n                () => { DeserializeXmlNode(json); },\r\n                ''XmlNodeConverter cannot convert JSON with an empty property name to XML. Path '8452309520V2.', line 3, position 9.'')", span="1883-1885", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmptyPropertyName()", file="XmlNodeConverterTest.cs"];
m16_581 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmptyPropertyName()", span="1802-1802", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmptyPropertyName()", file="XmlNodeConverterTest.cs"];
m16_489 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeExample()", span="1443-1443", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeExample()", file="XmlNodeConverterTest.cs"];
m16_490 [label="string xml = @''<?xml version=''''1.0'''' standalone=''''no''''?>\r\n			<root>\r\n			  <person id=''''1''''>\r\n				<name>Alan</name>\r\n				<url>http://www.google.com</url>\r\n			  </person>\r\n			  <person id=''''2''''>\r\n				<name>Louis</name>\r\n				<url>http://www.yahoo.com</url>\r\n			  </person>\r\n			</root>''", span="1445-1455", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeExample()", file="XmlNodeConverterTest.cs"];
m16_491 [label="XmlDocument doc = new XmlDocument()", span="1457-1457", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeExample()", file="XmlNodeConverterTest.cs"];
m16_492 [label="doc.LoadXml(xml)", span="1458-1458", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeExample()", file="XmlNodeConverterTest.cs"];
m16_493 [label="string jsonText = SerializeXmlNode(doc)", span="1460-1460", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeExample()", file="XmlNodeConverterTest.cs"];
m16_497 [label="Assert.AreEqual(doc.InnerXml, newDoc.InnerXml)", span="1508-1508", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeExample()", file="XmlNodeConverterTest.cs"];
m16_494 [label="jsonText = JObject.Parse(jsonText).ToString()", span="1483-1483", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeExample()", file="XmlNodeConverterTest.cs"];
m16_495 [label="StringAssert.AreEqual(@''{\r\n  ''''?xml'''': {\r\n    ''''@version'''': ''''1.0'''',\r\n    ''''@standalone'''': ''''no''''\r\n  },\r\n  ''''root'''': {\r\n    ''''person'''': [\r\n      {\r\n        ''''@id'''': ''''1'''',\r\n        ''''name'''': ''''Alan'''',\r\n        ''''url'''': ''''http://www.google.com''''\r\n      },\r\n      {\r\n        ''''@id'''': ''''2'''',\r\n        ''''name'''': ''''Louis'''',\r\n        ''''url'''': ''''http://www.yahoo.com''''\r\n      }\r\n    ]\r\n  }\r\n}'', jsonText)", span="1485-1504", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeExample()", file="XmlNodeConverterTest.cs"];
m16_496 [label="XmlDocument newDoc = (XmlDocument)DeserializeXmlNode(jsonText)", span="1506-1506", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeExample()", file="XmlNodeConverterTest.cs"];
m16_498 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeExample()", span="1443-1443", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeExample()", file="XmlNodeConverterTest.cs"];
m16_685 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNodeDefaultNamespace()", span="2363-2363", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNodeDefaultNamespace()", file="XmlNodeConverterTest.cs"];
m16_686 [label="string xaml = @''<Grid xmlns=''''http://schemas.microsoft.com/winfx/2006/xaml/presentation'''' xmlns:x=''''http://schemas.microsoft.com/winfx/2006/xaml'''' xmlns:toolkit=''''clr-namespace:Microsoft.Phone.Controls;assembly=Microsoft.Phone.Controls.Toolkit'''' Style=''''{StaticResource trimFormGrid}'''' x:Name=''''TrimObjectForm''''>\r\n  <Grid.ColumnDefinitions>\r\n    <ColumnDefinition Width=''''63*'''' />\r\n    <ColumnDefinition Width=''''320*'''' />\r\n  </Grid.ColumnDefinitions>\r\n  <Grid.RowDefinitions xmlns=''''''''>\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n  </Grid.RowDefinitions>\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding TypedTitle, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordTypedTitle'''' Grid.Column=''''1'''' Grid.Row=''''0'''' xmlns='''''''' />\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding ExternalReference, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordExternalReference'''' Grid.Column=''''1'''' Grid.Row=''''1'''' xmlns='''''''' />\r\n  <toolkit:DatePicker Style=''''{StaticResource trimFormGrid_DP}'''' Value=''''{Binding DateCreated, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordDateCreated'''' Grid.Column=''''1'''' Grid.Row=''''2'''' />\r\n  <toolkit:DatePicker Style=''''{StaticResource trimFormGrid_DP}'''' Value=''''{Binding DateDue, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordDateDue'''' Grid.Column=''''1'''' Grid.Row=''''3'''' />\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding Author, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordAuthor'''' Grid.Column=''''1'''' Grid.Row=''''4'''' xmlns='''''''' />\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding Container, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordContainer'''' Grid.Column=''''1'''' Grid.Row=''''5'''' xmlns='''''''' />\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding IsEnclosed, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordIsEnclosed'''' Grid.Column=''''1'''' Grid.Row=''''6'''' xmlns='''''''' />\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding Assignee, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordAssignee'''' Grid.Column=''''1'''' Grid.Row=''''7'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Title (Free Text Part)'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''0'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''External ID'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''1'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Date Created'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''2'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Date Due'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''3'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Author'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''4'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Container'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''5'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Enclosed?'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''6'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Assignee'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''7'''' xmlns='''''''' />\r\n</Grid>''", span="2365-2396", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNodeDefaultNamespace()", file="XmlNodeConverterTest.cs"];
m16_687 [label="XmlDocument document = new XmlDocument()", span="2398-2398", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNodeDefaultNamespace()", file="XmlNodeConverterTest.cs"];
m16_688 [label="document.LoadXml(xaml)", span="2399-2399", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNodeDefaultNamespace()", file="XmlNodeConverterTest.cs"];
m16_689 [label="string json = JsonConvert.SerializeXmlNode(document, Formatting.Indented)", span="2401-2401", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNodeDefaultNamespace()", file="XmlNodeConverterTest.cs"];
m16_690 [label="string expectedJson = @''{\r\n  ''''Grid'''': {\r\n    ''''@xmlns'''': ''''http://schemas.microsoft.com/winfx/2006/xaml/presentation'''',\r\n    ''''@xmlns:x'''': ''''http://schemas.microsoft.com/winfx/2006/xaml'''',\r\n    ''''@xmlns:toolkit'''': ''''clr-namespace:Microsoft.Phone.Controls;assembly=Microsoft.Phone.Controls.Toolkit'''',\r\n    ''''@Style'''': ''''{StaticResource trimFormGrid}'''',\r\n    ''''@x:Name'''': ''''TrimObjectForm'''',\r\n    ''''Grid.ColumnDefinitions'''': {\r\n      ''''ColumnDefinition'''': [\r\n        {\r\n          ''''@Width'''': ''''63*''''\r\n        },\r\n        {\r\n          ''''@Width'''': ''''320*''''\r\n        }\r\n      ]\r\n    },\r\n    ''''Grid.RowDefinitions'''': {\r\n      ''''@xmlns'''': '''''''',\r\n      ''''RowDefinition'''': [\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null,\r\n        null\r\n      ]\r\n    },\r\n    ''''TextBox'''': [\r\n      {\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_TB}'''',\r\n        ''''@Text'''': ''''{Binding TypedTitle, Converter={StaticResource trimPropertyConverter}}'''',\r\n        ''''@Name'''': ''''RecordTypedTitle'''',\r\n        ''''@Grid.Column'''': ''''1'''',\r\n        ''''@Grid.Row'''': ''''0'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_TB}'''',\r\n        ''''@Text'''': ''''{Binding ExternalReference, Converter={StaticResource trimPropertyConverter}}'''',\r\n        ''''@Name'''': ''''RecordExternalReference'''',\r\n        ''''@Grid.Column'''': ''''1'''',\r\n        ''''@Grid.Row'''': ''''1'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_TB}'''',\r\n        ''''@Text'''': ''''{Binding Author, Converter={StaticResource trimPropertyConverter}}'''',\r\n        ''''@Name'''': ''''RecordAuthor'''',\r\n        ''''@Grid.Column'''': ''''1'''',\r\n        ''''@Grid.Row'''': ''''4'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_TB}'''',\r\n        ''''@Text'''': ''''{Binding Container, Converter={StaticResource trimPropertyConverter}}'''',\r\n        ''''@Name'''': ''''RecordContainer'''',\r\n        ''''@Grid.Column'''': ''''1'''',\r\n        ''''@Grid.Row'''': ''''5'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_TB}'''',\r\n        ''''@Text'''': ''''{Binding IsEnclosed, Converter={StaticResource trimPropertyConverter}}'''',\r\n        ''''@Name'''': ''''RecordIsEnclosed'''',\r\n        ''''@Grid.Column'''': ''''1'''',\r\n        ''''@Grid.Row'''': ''''6'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_TB}'''',\r\n        ''''@Text'''': ''''{Binding Assignee, Converter={StaticResource trimPropertyConverter}}'''',\r\n        ''''@Name'''': ''''RecordAssignee'''',\r\n        ''''@Grid.Column'''': ''''1'''',\r\n        ''''@Grid.Row'''': ''''7'''',\r\n        ''''@xmlns'''': ''''''''\r\n      }\r\n    ],\r\n    ''''toolkit:DatePicker'''': [\r\n      {\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_DP}'''',\r\n        ''''@Value'''': ''''{Binding DateCreated, Converter={StaticResource trimPropertyConverter}}'''',\r\n        ''''@Name'''': ''''RecordDateCreated'''',\r\n        ''''@Grid.Column'''': ''''1'''',\r\n        ''''@Grid.Row'''': ''''2''''\r\n      },\r\n      {\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_DP}'''',\r\n        ''''@Value'''': ''''{Binding DateDue, Converter={StaticResource trimPropertyConverter}}'''',\r\n        ''''@Name'''': ''''RecordDateDue'''',\r\n        ''''@Grid.Column'''': ''''1'''',\r\n        ''''@Grid.Row'''': ''''3''''\r\n      }\r\n    ],\r\n    ''''TextBlock'''': [\r\n      {\r\n        ''''@Grid.Column'''': ''''0'''',\r\n        ''''@Text'''': ''''Title (Free Text Part)'''',\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_LBL}'''',\r\n        ''''@Grid.Row'''': ''''0'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Grid.Column'''': ''''0'''',\r\n        ''''@Text'''': ''''External ID'''',\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_LBL}'''',\r\n        ''''@Grid.Row'''': ''''1'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Grid.Column'''': ''''0'''',\r\n        ''''@Text'''': ''''Date Created'''',\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_LBL}'''',\r\n        ''''@Grid.Row'''': ''''2'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Grid.Column'''': ''''0'''',\r\n        ''''@Text'''': ''''Date Due'''',\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_LBL}'''',\r\n        ''''@Grid.Row'''': ''''3'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Grid.Column'''': ''''0'''',\r\n        ''''@Text'''': ''''Author'''',\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_LBL}'''',\r\n        ''''@Grid.Row'''': ''''4'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Grid.Column'''': ''''0'''',\r\n        ''''@Text'''': ''''Container'''',\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_LBL}'''',\r\n        ''''@Grid.Row'''': ''''5'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Grid.Column'''': ''''0'''',\r\n        ''''@Text'''': ''''Enclosed?'''',\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_LBL}'''',\r\n        ''''@Grid.Row'''': ''''6'''',\r\n        ''''@xmlns'''': ''''''''\r\n      },\r\n      {\r\n        ''''@Grid.Column'''': ''''0'''',\r\n        ''''@Text'''': ''''Assignee'''',\r\n        ''''@Style'''': ''''{StaticResource trimFormGrid_LBL}'''',\r\n        ''''@Grid.Row'''': ''''7'''',\r\n        ''''@xmlns'''': ''''''''\r\n      }\r\n    ]\r\n  }\r\n}''", span="2403-2558", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNodeDefaultNamespace()", file="XmlNodeConverterTest.cs"];
m16_691 [label="StringAssert.AreEqual(expectedJson, json)", span="2560-2560", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNodeDefaultNamespace()", file="XmlNodeConverterTest.cs"];
m16_692 [label="XmlNode node = JsonConvert.DeserializeXmlNode(json)", span="2562-2562", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNodeDefaultNamespace()", file="XmlNodeConverterTest.cs"];
m16_693 [label="StringWriter sw = new StringWriter()", span="2564-2564", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNodeDefaultNamespace()", file="XmlNodeConverterTest.cs"];
m16_695 [label="node.WriteTo(writer)", span="2570-2570", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNodeDefaultNamespace()", file="XmlNodeConverterTest.cs"];
m16_694 [label="XmlWriter writer = XmlWriter.Create(sw, new XmlWriterSettings\r\n            {\r\n                Indent = true,\r\n                OmitXmlDeclaration = true\r\n            })", span="2565-2569", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNodeDefaultNamespace()", file="XmlNodeConverterTest.cs"];
m16_697 [label="string xaml2 = sw.ToString()", span="2573-2573", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNodeDefaultNamespace()", file="XmlNodeConverterTest.cs"];
m16_696 [label="writer.Flush()", span="2571-2571", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNodeDefaultNamespace()", file="XmlNodeConverterTest.cs"];
m16_698 [label="string expectedXaml = @''<Grid xmlns=''''http://schemas.microsoft.com/winfx/2006/xaml/presentation'''' xmlns:x=''''http://schemas.microsoft.com/winfx/2006/xaml'''' xmlns:toolkit=''''clr-namespace:Microsoft.Phone.Controls;assembly=Microsoft.Phone.Controls.Toolkit'''' Style=''''{StaticResource trimFormGrid}'''' x:Name=''''TrimObjectForm''''>\r\n  <Grid.ColumnDefinitions>\r\n    <ColumnDefinition Width=''''63*'''' />\r\n    <ColumnDefinition Width=''''320*'''' />\r\n  </Grid.ColumnDefinitions>\r\n  <Grid.RowDefinitions xmlns=''''''''>\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n    <RowDefinition />\r\n  </Grid.RowDefinitions>\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding TypedTitle, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordTypedTitle'''' Grid.Column=''''1'''' Grid.Row=''''0'''' xmlns='''''''' />\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding ExternalReference, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordExternalReference'''' Grid.Column=''''1'''' Grid.Row=''''1'''' xmlns='''''''' />\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding Author, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordAuthor'''' Grid.Column=''''1'''' Grid.Row=''''4'''' xmlns='''''''' />\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding Container, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordContainer'''' Grid.Column=''''1'''' Grid.Row=''''5'''' xmlns='''''''' />\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding IsEnclosed, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordIsEnclosed'''' Grid.Column=''''1'''' Grid.Row=''''6'''' xmlns='''''''' />\r\n  <TextBox Style=''''{StaticResource trimFormGrid_TB}'''' Text=''''{Binding Assignee, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordAssignee'''' Grid.Column=''''1'''' Grid.Row=''''7'''' xmlns='''''''' />\r\n  <toolkit:DatePicker Style=''''{StaticResource trimFormGrid_DP}'''' Value=''''{Binding DateCreated, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordDateCreated'''' Grid.Column=''''1'''' Grid.Row=''''2'''' />\r\n  <toolkit:DatePicker Style=''''{StaticResource trimFormGrid_DP}'''' Value=''''{Binding DateDue, Converter={StaticResource trimPropertyConverter}}'''' Name=''''RecordDateDue'''' Grid.Column=''''1'''' Grid.Row=''''3'''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Title (Free Text Part)'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''0'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''External ID'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''1'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Date Created'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''2'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Date Due'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''3'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Author'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''4'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Container'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''5'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Enclosed?'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''6'''' xmlns='''''''' />\r\n  <TextBlock Grid.Column=''''0'''' Text=''''Assignee'''' Style=''''{StaticResource trimFormGrid_LBL}'''' Grid.Row=''''7'''' xmlns='''''''' />\r\n</Grid>''", span="2575-2606", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNodeDefaultNamespace()", file="XmlNodeConverterTest.cs"];
m16_699 [label="StringAssert.AreEqual(expectedXaml, xaml2)", span="2608-2608", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNodeDefaultNamespace()", file="XmlNodeConverterTest.cs"];
m16_700 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNodeDefaultNamespace()", span="2363-2363", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNodeDefaultNamespace()", file="XmlNodeConverterTest.cs"];
m16_889 [label="Entry List<JsonConverter>.cstr", span="", cluster="List<JsonConverter>.cstr", file="XmlNodeConverterTest.cs"];
m16_501 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeExample()", span="1512-1512", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeExample()", file="XmlNodeConverterTest.cs"];
m16_502 [label="string json = @''{\r\n        ''''?xml'''': {\r\n          ''''@version'''': ''''1.0'''',\r\n          ''''@standalone'''': ''''no''''\r\n        },\r\n        ''''root'''': {\r\n          ''''person'''': [\r\n            {\r\n              ''''@id'''': ''''1'''',\r\n              ''''name'''': ''''Alan'''',\r\n              ''''url'''': ''''http://www.google.com''''\r\n            },\r\n            {\r\n              ''''@id'''': ''''2'''',\r\n              ''''name'''': ''''Louis'''',\r\n              ''''url'''': ''''http://www.yahoo.com''''\r\n            }\r\n          ]\r\n        }\r\n      }''", span="1514-1533", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeExample()", file="XmlNodeConverterTest.cs"];
m16_503 [label="XmlDocument doc = (XmlDocument)DeserializeXmlNode(json)", span="1535-1535", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeExample()", file="XmlNodeConverterTest.cs"];
m16_504 [label="StringAssert.AreEqual(@''<?xml version=''''1.0'''' standalone=''''no''''?><root><person id=''''1''''><name>Alan</name><url>http://www.google.com</url></person><person id=''''2''''><name>Louis</name><url>http://www.yahoo.com</url></person></root>'', doc.InnerXml)", span="1548-1548", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeExample()", file="XmlNodeConverterTest.cs"];
m16_505 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeExample()", span="1512-1512", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeExample()", file="XmlNodeConverterTest.cs"];
m16_724 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NullableXml.NullableXml()", span="2649-2649", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NullableXml.NullableXml()", file="XmlNodeConverterTest.cs"];
m16_100 [label="Entry Unk.Equals", span="", cluster="Unk.Equals", file="XmlNodeConverterTest.cs"];
m16_112 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXDocument()", span="225-225", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXDocument()", file="XmlNodeConverterTest.cs"];
m16_113 [label="string xml = @''<result xp_0:end=''''2014-08-15 13:12:11.9184'''' xp_0:start=''''2014-08-15 13:11:49.3140'''' xp_0:time_diff=''''22604.3836'''' xmlns:xp_0=''''Test1'''' p2:end=''''2014-08-15 13:13:49.5522'''' p2:start=''''2014-08-15 13:13:49.0268'''' p2:time_diff=''''525.4646'''' xmlns:p2=''''Test2'''' />''", span="227-227", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXDocument()", file="XmlNodeConverterTest.cs"];
m16_114 [label="XDocument d = XDocument.Parse(xml)", span="229-229", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXDocument()", file="XmlNodeConverterTest.cs"];
m16_118 [label="StringAssert.AreEqual(xml, doc.ToString())", span="248-248", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXDocument()", file="XmlNodeConverterTest.cs"];
m16_115 [label="string json = JsonConvert.SerializeObject(d, Formatting.Indented)", span="231-231", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXDocument()", file="XmlNodeConverterTest.cs"];
m16_116 [label="StringAssert.AreEqual(@''{\r\n  ''''result'''': {\r\n    ''''@xp_0:end'''': ''''2014-08-15 13:12:11.9184'''',\r\n    ''''@xp_0:start'''': ''''2014-08-15 13:11:49.3140'''',\r\n    ''''@xp_0:time_diff'''': ''''22604.3836'''',\r\n    ''''@xmlns:xp_0'''': ''''Test1'''',\r\n    ''''@p2:end'''': ''''2014-08-15 13:13:49.5522'''',\r\n    ''''@p2:start'''': ''''2014-08-15 13:13:49.0268'''',\r\n    ''''@p2:time_diff'''': ''''525.4646'''',\r\n    ''''@xmlns:p2'''': ''''Test2''''\r\n  }\r\n}'', json)", span="233-244", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXDocument()", file="XmlNodeConverterTest.cs"];
m16_117 [label="XDocument doc = JsonConvert.DeserializeObject<XDocument>(json)", span="246-246", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXDocument()", file="XmlNodeConverterTest.cs"];
m16_119 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXDocument()", span="225-225", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNamespacesXDocument()", file="XmlNodeConverterTest.cs"];
m16_888 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Model.Model()", span="2951-2951", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Model.Model()", file="XmlNodeConverterTest.cs"];
m16_166 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeParseHandlingOffset()", span="392-392", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeParseHandlingOffset()", file="XmlNodeConverterTest.cs"];
m16_167 [label="DateTimeOffset d = new DateTimeOffset(2012, 12, 12, 12, 44, 1, TimeSpan.FromHours(12).Add(TimeSpan.FromMinutes(34)))", span="394-394", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeParseHandlingOffset()", file="XmlNodeConverterTest.cs"];
m16_168 [label="var x = new DateTimeOffsetContainer { Date = d }", span="395-395", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeParseHandlingOffset()", file="XmlNodeConverterTest.cs"];
m16_169 [label="var json = JsonConvert.SerializeObject(x, Formatting.Indented)", span="397-397", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeParseHandlingOffset()", file="XmlNodeConverterTest.cs"];
m16_175 [label="Assert.AreEqual(x.Date, x2.Date)", span="412-412", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeParseHandlingOffset()", file="XmlNodeConverterTest.cs"];
m16_170 [label="XDocument doc1 = JsonConvert.DeserializeObject<XDocument>(json, new JsonSerializerSettings\r\n            {\r\n                Converters = { new XmlNodeConverter() },\r\n                DateParseHandling = DateParseHandling.DateTimeOffset\r\n            })", span="399-403", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeParseHandlingOffset()", file="XmlNodeConverterTest.cs"];
m16_171 [label="var xml = doc1.ToString()", span="405-405", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeParseHandlingOffset()", file="XmlNodeConverterTest.cs"];
m16_173 [label="string json2 = JsonConvert.SerializeObject(doc1, Formatting.Indented)", span="408-408", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeParseHandlingOffset()", file="XmlNodeConverterTest.cs"];
m16_172 [label="Assert.AreEqual(''<Date>2012-12-12T12:44:01+12:34</Date>'', xml)", span="406-406", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeParseHandlingOffset()", file="XmlNodeConverterTest.cs"];
m16_174 [label="DateTimeOffsetContainer x2 = JsonConvert.DeserializeObject<DateTimeOffsetContainer>(json2)", span="410-410", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeParseHandlingOffset()", file="XmlNodeConverterTest.cs"];
m16_176 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeParseHandlingOffset()", span="392-392", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeParseHandlingOffset()", file="XmlNodeConverterTest.cs"];
m16_237 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", span="575-575", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs"];
m16_238 [label="XmlDocument doc = new XmlDocument()", span="577-577", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs"];
m16_239 [label="string jsonText", span="578-578", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs"];
m16_251 [label="XmlProcessingInstruction instruction = doc.CreateProcessingInstruction(''xml-stylesheet'', @''href=''''classic.xsl'''' type=''''text/xml'''''')", span="610-610", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs"];
m16_254 [label="XmlCDataSection cDataSection = doc.CreateCDataSection(''<Kiwi>true</Kiwi>'')", span="617-617", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs"];
m16_257 [label="XmlElement element = doc.CreateElement(''xs'', ''Choice'', ''http://www.w3.org/2001/XMLSchema'')", span="624-624", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs"];
m16_258 [label="element.SetAttributeNode(doc.CreateAttribute(''msdata'', ''IsDataSet'', ''urn:schemas-microsoft-com:xml-msdata''))", span="625-625", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs"];
m16_259 [label="XmlAttribute aa = doc.CreateAttribute(@''xmlns'', ''xs'', ''http://www.w3.org/2000/xmlns/'')", span="627-627", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs"];
m16_262 [label="aa = doc.CreateAttribute(@''xmlns'', ''msdata'', ''http://www.w3.org/2000/xmlns/'')", span="631-631", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs"];
m16_267 [label="doc.AppendChild(element)", span="638-638", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs"];
m16_240 [label="string xml = @''<?xml version=''''1.0'''' encoding=''''utf-8'''' ?>\r\n<xs:schema xs:id=''''SomeID'''' \r\n	xmlns='''''''' \r\n	xmlns:xs=''''http://www.w3.org/2001/XMLSchema'''' \r\n	xmlns:msdata=''''urn:schemas-microsoft-com:xml-msdata''''>\r\n	<xs:element name=''''MyDataSet'''' msdata:IsDataSet=''''true''''>\r\n	</xs:element>\r\n</xs:schema>''", span="580-587", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs"];
m16_241 [label="XmlDocument document = new XmlDocument()", span="589-589", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs"];
m16_242 [label="document.LoadXml(xml)", span="590-590", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs"];
m16_247 [label="XDocument d = XDocument.Parse(xml)", span="601-601", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs"];
m16_243 [label="XmlAttribute attribute = document.DocumentElement.ChildNodes[0].Attributes[''IsDataSet'', ''urn:schemas-microsoft-com:xml-msdata'']", span="593-593", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs"];
m16_244 [label="attribute.Value = ''true''", span="594-594", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs"];
m16_245 [label="jsonText = JsonConvert.SerializeXmlNode(attribute)", span="596-596", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs"];
m16_246 [label="Assert.AreEqual(@''{''''@msdata:IsDataSet'''':''''true''''}'', jsonText)", span="598-598", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs"];
m16_248 [label="XAttribute a = d.Root.Element(''{http://www.w3.org/2001/XMLSchema}element'').Attribute(''{urn:schemas-microsoft-com:xml-msdata}IsDataSet'')", span="602-602", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs"];
m16_249 [label="jsonText = JsonConvert.SerializeXNode(a)", span="604-604", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs"];
m16_250 [label="Assert.AreEqual(@''{''''@msdata:IsDataSet'''':''''true''''}'', jsonText)", span="606-606", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs"];
m16_252 [label="jsonText = JsonConvert.SerializeXmlNode(instruction)", span="612-612", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs"];
m16_265 [label="element.AppendChild(instruction)", span="635-635", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs"];
m16_253 [label="Assert.AreEqual(@''{''''?xml-stylesheet'''':''''href=\''''classic.xsl\'''' type=\''''text/xml\''''''''}'', jsonText)", span="614-614", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs"];
m16_255 [label="jsonText = JsonConvert.SerializeXmlNode(cDataSection)", span="619-619", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs"];
m16_266 [label="element.AppendChild(cDataSection)", span="636-636", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs"];
m16_256 [label="Assert.AreEqual(@''{''''#cdata-section'''':''''<Kiwi>true</Kiwi>''''}'', jsonText)", span="621-621", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs"];
m16_261 [label="element.SetAttributeNode(aa)", span="629-629", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs"];
m16_264 [label="element.SetAttributeNode(aa)", span="633-633", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs"];
m16_268 [label="jsonText = JsonConvert.SerializeXmlNode(element, Formatting.Indented)", span="640-640", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs"];
m16_260 [label="aa.Value = ''http://www.w3.org/2001/XMLSchema''", span="628-628", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs"];
m16_263 [label="aa.Value = ''urn:schemas-microsoft-com:xml-msdata''", span="632-632", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs"];
m16_269 [label="StringAssert.AreEqual(@''{\r\n  ''''xs:Choice'''': {\r\n    ''''@msdata:IsDataSet'''': '''''''',\r\n    ''''@xmlns:xs'''': ''''http://www.w3.org/2001/XMLSchema'''',\r\n    ''''@xmlns:msdata'''': ''''urn:schemas-microsoft-com:xml-msdata'''',\r\n    ''''?xml-stylesheet'''': ''''href=\''''classic.xsl\'''' type=\''''text/xml\'''''''',\r\n    ''''#cdata-section'''': ''''<Kiwi>true</Kiwi>''''\r\n  }\r\n}'', jsonText)", span="642-650", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs"];
m16_270 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", span="575-575", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNodeTypes()", file="XmlNodeConverterTest.cs"];
m16_21 [label="Entry Unk.ReadFrom", span="", cluster="Unk.ReadFrom", file="XmlNodeConverterTest.cs"];
m16_142 [label="Entry Unk.>", span="", cluster="Unk.>", file="XmlNodeConverterTest.cs"];
m16_371 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.OtherElementDataTypes()", span="1041-1041", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.OtherElementDataTypes()", file="XmlNodeConverterTest.cs"];
m16_372 [label="string jsonText = @''{''''?xml'''':{''''@version'''':''''1.0'''',''''@standalone'''':''''no''''},''''root'''':{''''person'''':[{''''@id'''':''''1'''',''''Float'''':2.5,''''Integer'''':99},{''''Boolean'''':true,''''@id'''':''''2'''',''''date'''':''''\/Date(954374400000)\/''''}]}}''", span="1043-1043", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.OtherElementDataTypes()", file="XmlNodeConverterTest.cs"];
m16_373 [label="XmlDocument newDoc = (XmlDocument)DeserializeXmlNode(jsonText)", span="1045-1045", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.OtherElementDataTypes()", file="XmlNodeConverterTest.cs"];
m16_374 [label="string expected = @''<?xml version=''''1.0'''' standalone=''''no''''?><root><person id=''''1''''><Float>2.5</Float><Integer>99</Integer></person><person id=''''2''''><Boolean>true</Boolean><date>2000-03-30T00:00:00Z</date></person></root>''", span="1047-1047", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.OtherElementDataTypes()", file="XmlNodeConverterTest.cs"];
m16_375 [label="Assert.AreEqual(expected, newDoc.InnerXml)", span="1049-1049", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.OtherElementDataTypes()", file="XmlNodeConverterTest.cs"];
m16_376 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.OtherElementDataTypes()", span="1041-1041", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.OtherElementDataTypes()", file="XmlNodeConverterTest.cs"];
m16_775 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Deserialize_XDocument_NoRoot()", span="2793-2793", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Deserialize_XDocument_NoRoot()", file="XmlNodeConverterTest.cs"];
m16_776 [label="XDocument d = JsonConvert.DeserializeXNode(@''{}'')", span="2795-2795", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Deserialize_XDocument_NoRoot()", file="XmlNodeConverterTest.cs"];
m16_777 [label="Assert.AreEqual(null, d.Root)", span="2797-2797", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Deserialize_XDocument_NoRoot()", file="XmlNodeConverterTest.cs"];
m16_778 [label="Assert.AreEqual(null, d.Declaration)", span="2798-2798", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Deserialize_XDocument_NoRoot()", file="XmlNodeConverterTest.cs"];
m16_779 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Deserialize_XDocument_NoRoot()", span="2793-2793", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Deserialize_XDocument_NoRoot()", file="XmlNodeConverterTest.cs"];
m16_431 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesXDocument()", span="1213-1213", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesXDocument()", file="XmlNodeConverterTest.cs"];
m16_432 [label="string json = @''{''''count'''': 773840,''''photos'''': null}''", span="1215-1215", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesXDocument()", file="XmlNodeConverterTest.cs"];
m16_433 [label="ExceptionAssert.Throws<JsonSerializationException>(\r\n                () => { JsonConvert.DeserializeXNode(json); },\r\n                ''JSON root object has multiple properties. The root object must have a single property in order to create a valid XML document. Consider specifying a DeserializeRootElementName. Path 'photos', line 1, position 26.'')", span="1217-1219", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesXDocument()", file="XmlNodeConverterTest.cs"];
m16_434 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesXDocument()", span="1213-1213", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesXDocument()", file="XmlNodeConverterTest.cs"];
m16_529 [label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting, Newtonsoft.Json.JsonSerializerSettings)", span="618-618", cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting, Newtonsoft.Json.JsonSerializerSettings)", file="XmlNodeConverterTest.cs"];
m16_377 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NoRootObject()", span="1053-1053", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NoRootObject()", file="XmlNodeConverterTest.cs"];
m16_378 [label="ExceptionAssert.Throws<JsonSerializationException>(() => { XmlDocument newDoc = (XmlDocument)JsonConvert.DeserializeXmlNode(@''[1]''); }, ''XmlNodeConverter can only convert JSON that begins with an object. Path '', line 1, position 1.'')", span="1055-1055", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NoRootObject()", file="XmlNodeConverterTest.cs"];
m16_379 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NoRootObject()", span="1053-1053", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NoRootObject()", file="XmlNodeConverterTest.cs"];
m16_706 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializingXmlNamespaceScope()", span="2623-2623", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializingXmlNamespaceScope()", file="XmlNodeConverterTest.cs"];
m16_707 [label="var xmlString = @''<root xmlns=''''http://www.example.com/ns''''>\r\n  <a/>\r\n  <bns:b xmlns:bns=''''http://www.example.com/ns''''/>\r\n  <c/>\r\n</root>''", span="2625-2629", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializingXmlNamespaceScope()", file="XmlNodeConverterTest.cs"];
m16_708 [label="var xml = XElement.Parse(xmlString)", span="2632-2632", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializingXmlNamespaceScope()", file="XmlNodeConverterTest.cs"];
m16_712 [label="xml1.LoadXml(xmlString)", span="2640-2640", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializingXmlNamespaceScope()", file="XmlNodeConverterTest.cs"];
m16_709 [label="var json1 = JsonConvert.SerializeObject(xml)", span="2634-2634", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializingXmlNamespaceScope()", file="XmlNodeConverterTest.cs"];
m16_710 [label="Assert.AreEqual(@''{''''root'''':{''''@xmlns'''':''''http://www.example.com/ns'''',''''a'''':null,''''bns:b'''':{''''@xmlns:bns'''':''''http://www.example.com/ns''''},''''c'''':null}}'', json1)", span="2636-2636", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializingXmlNamespaceScope()", file="XmlNodeConverterTest.cs"];
m16_711 [label="var xml1 = new XmlDocument()", span="2639-2639", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializingXmlNamespaceScope()", file="XmlNodeConverterTest.cs"];
m16_713 [label="var json2 = JsonConvert.SerializeObject(xml1)", span="2642-2642", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializingXmlNamespaceScope()", file="XmlNodeConverterTest.cs"];
m16_714 [label="Assert.AreEqual(@''{''''root'''':{''''@xmlns'''':''''http://www.example.com/ns'''',''''a'''':null,''''bns:b'''':{''''@xmlns:bns'''':''''http://www.example.com/ns''''},''''c'''':null}}'', json2)", span="2644-2644", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializingXmlNamespaceScope()", file="XmlNodeConverterTest.cs"];
m16_715 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializingXmlNamespaceScope()", span="2623-2623", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializingXmlNamespaceScope()", file="XmlNodeConverterTest.cs"];
m16_800 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Utc()", span="2834-2834", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Utc()", file="XmlNodeConverterTest.cs"];
m16_801 [label="string json = @''{''''CreatedDate'''': ''''2014-01-23T00:00:00Z''''}''", span="2836-2836", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Utc()", file="XmlNodeConverterTest.cs"];
m16_802 [label="var dxml = JsonConvert.DeserializeXNode(json, ''root'')", span="2837-2837", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Utc()", file="XmlNodeConverterTest.cs"];
m16_803 [label="Assert.AreEqual(''2014-01-23T00:00:00Z'', dxml.Root.Element(''CreatedDate'').Value)", span="2838-2838", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Utc()", file="XmlNodeConverterTest.cs"];
m16_804 [label="Console.WriteLine(''DateTimeToXml_Utc: '' + dxml.Root.Element(''CreatedDate'').Value)", span="2840-2840", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Utc()", file="XmlNodeConverterTest.cs"];
m16_805 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Utc()", span="2834-2834", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Utc()", file="XmlNodeConverterTest.cs"];
m16_17 [label="Entry Unk.Load", span="", cluster="Unk.Load", file="XmlNodeConverterTest.cs"];
m16_500 [label="Entry Newtonsoft.Json.Linq.JToken.ToString()", span="422-422", cluster="Newtonsoft.Json.Linq.JToken.ToString()", file="XmlNodeConverterTest.cs"];
m16_893 [label="Entry Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter, object)", span="1042-1042", cluster="Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter, object)", file="XmlNodeConverterTest.cs"];
m16_49 [label="Entry Newtonsoft.Json.JsonSerializer.JsonSerializer()", span="530-530", cluster="Newtonsoft.Json.JsonSerializer.JsonSerializer()", file="XmlNodeConverterTest.cs"];
m16_646 [label="Entry Newtonsoft.Json.Linq.JToken.CreateReader()", span="1886-1886", cluster="Newtonsoft.Json.Linq.JToken.CreateReader()", file="XmlNodeConverterTest.cs"];
m16_644 [label="Entry Newtonsoft.Json.Linq.JObject.FromObject(object)", span="442-442", cluster="Newtonsoft.Json.Linq.JObject.FromObject(object)", file="XmlNodeConverterTest.cs"];
m16_108 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Foo.Foo()", span="207-207", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Foo.Foo()", file="XmlNodeConverterTest.cs"];
m16_438 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesAddRootElement()", span="1224-1224", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesAddRootElement()", file="XmlNodeConverterTest.cs"];
m16_439 [label="string json = @''{''''count'''': 773840,''''photos'''': 773840}''", span="1226-1226", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesAddRootElement()", file="XmlNodeConverterTest.cs"];
m16_440 [label="XmlDocument newDoc = JsonConvert.DeserializeXmlNode(json, ''myRoot'')", span="1229-1229", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesAddRootElement()", file="XmlNodeConverterTest.cs"];
m16_442 [label="XDocument newXDoc = JsonConvert.DeserializeXNode(json, ''myRoot'')", span="1235-1235", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesAddRootElement()", file="XmlNodeConverterTest.cs"];
m16_441 [label="Assert.AreEqual(@''<myRoot><count>773840</count><photos>773840</photos></myRoot>'', newDoc.InnerXml)", span="1231-1231", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesAddRootElement()", file="XmlNodeConverterTest.cs"];
m16_443 [label="Assert.AreEqual(@''<myRoot><count>773840</count><photos>773840</photos></myRoot>'', newXDoc.ToString(SaveOptions.DisableFormatting))", span="1237-1237", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesAddRootElement()", file="XmlNodeConverterTest.cs"];
m16_444 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesAddRootElement()", span="1224-1224", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesAddRootElement()", file="XmlNodeConverterTest.cs"];
m16_76 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNonKnownDollarProperty()", span="169-169", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNonKnownDollarProperty()", file="XmlNodeConverterTest.cs"];
m16_77 [label="string json1 = @''{''''$JELLY'''':''''test''''}''", span="171-171", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNonKnownDollarProperty()", file="XmlNodeConverterTest.cs"];
m16_78 [label="var doc = JsonConvert.DeserializeXNode(json1)", span="173-173", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNonKnownDollarProperty()", file="XmlNodeConverterTest.cs"];
m16_82 [label="Assert.AreEqual(json1, json2)", span="181-181", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNonKnownDollarProperty()", file="XmlNodeConverterTest.cs"];
m16_79 [label="Console.WriteLine(doc.ToString())", span="175-175", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNonKnownDollarProperty()", file="XmlNodeConverterTest.cs"];
m16_80 [label="Assert.AreEqual(@''<_x0024_JELLY>test</_x0024_JELLY>'', doc.ToString())", span="177-177", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNonKnownDollarProperty()", file="XmlNodeConverterTest.cs"];
m16_81 [label="var json2 = JsonConvert.SerializeXNode(doc)", span="179-179", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNonKnownDollarProperty()", file="XmlNodeConverterTest.cs"];
m16_83 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNonKnownDollarProperty()", span="169-169", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeNonKnownDollarProperty()", file="XmlNodeConverterTest.cs"];
m16_815 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Unspecified_Precision()", span="2856-2856", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Unspecified_Precision()", file="XmlNodeConverterTest.cs"];
m16_816 [label="string json = @''{''''CreatedDate'''': ''''2014-01-23T00:00:00.1234567''''}''", span="2858-2858", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Unspecified_Precision()", file="XmlNodeConverterTest.cs"];
m16_817 [label="var dxml = JsonConvert.DeserializeXNode(json, ''root'')", span="2859-2859", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Unspecified_Precision()", file="XmlNodeConverterTest.cs"];
m16_818 [label="Assert.AreEqual(''2014-01-23T00:00:00.1234567'', dxml.Root.Element(''CreatedDate'').Value)", span="2860-2860", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Unspecified_Precision()", file="XmlNodeConverterTest.cs"];
m16_819 [label="Console.WriteLine(''DateTimeToXml_Unspecified: '' + dxml.Root.Element(''CreatedDate'').Value)", span="2862-2862", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Unspecified_Precision()", file="XmlNodeConverterTest.cs"];
m16_820 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Unspecified_Precision()", span="2856-2856", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Unspecified_Precision()", file="XmlNodeConverterTest.cs"];
m16_151 [label="Entry Unk.Nodes", span="", cluster="Unk.Nodes", file="XmlNodeConverterTest.cs"];
m16_456 [label="Entry System.Console.WriteLine(string)", span="0-0", cluster="System.Console.WriteLine(string)", file="XmlNodeConverterTest.cs"];
m16_63 [label="Entry XmlWriterSettings.cstr", span="", cluster="XmlWriterSettings.cstr", file="XmlNodeConverterTest.cs"];
m16_144 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXElement()", span="322-322", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXElement()", file="XmlNodeConverterTest.cs"];
m16_145 [label="string xml = @''<payload>\r\n    <Country>6</Country>\r\n    <FinancialTransactionApprovalRequestUID>79</FinancialTransactionApprovalRequestUID>\r\n    <TransactionStatus>Approved</TransactionStatus>\r\n    <StatusChangeComment></StatusChangeComment>\r\n    <RequestedBy>Someone</RequestedBy>\r\n</payload>''", span="324-330", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXElement()", file="XmlNodeConverterTest.cs"];
m16_146 [label="var xmlDocument = XDocument.Parse(xml)", span="332-332", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXElement()", file="XmlNodeConverterTest.cs"];
m16_147 [label="var result = xmlDocument.Root.Nodes().ToArray()", span="334-334", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXElement()", file="XmlNodeConverterTest.cs"];
m16_148 [label="var json = JsonConvert.SerializeObject(result, Formatting.Indented)", span="336-336", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXElement()", file="XmlNodeConverterTest.cs"];
m16_149 [label="StringAssert.AreEqual(@''[\r\n  {\r\n    ''''Country'''': ''''6''''\r\n  },\r\n  {\r\n    ''''FinancialTransactionApprovalRequestUID'''': ''''79''''\r\n  },\r\n  {\r\n    ''''TransactionStatus'''': ''''Approved''''\r\n  },\r\n  {\r\n    ''''StatusChangeComment'''': ''''''''\r\n  },\r\n  {\r\n    ''''RequestedBy'''': ''''Someone''''\r\n  }\r\n]'', json)", span="338-354", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXElement()", file="XmlNodeConverterTest.cs"];
m16_150 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXElement()", span="322-322", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXElement()", file="XmlNodeConverterTest.cs"];
m16_643 [label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0", cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="XmlNodeConverterTest.cs"];
m16_23 [label="Entry Unk.AreEqual", span="", cluster="Unk.AreEqual", file="XmlNodeConverterTest.cs"];
m16_189 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyDocument()", span="433-433", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyDocument()", file="XmlNodeConverterTest.cs"];
m16_190 [label="XmlDocument doc = new XmlDocument()", span="435-435", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyDocument()", file="XmlNodeConverterTest.cs"];
m16_191 [label="doc.LoadXml(''<root />'')", span="436-436", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyDocument()", file="XmlNodeConverterTest.cs"];
m16_192 [label="string json = JsonConvert.SerializeXmlNode(doc, Formatting.Indented, true)", span="438-438", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyDocument()", file="XmlNodeConverterTest.cs"];
m16_193 [label="Assert.AreEqual(''null'', json)", span="439-439", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyDocument()", file="XmlNodeConverterTest.cs"];
m16_194 [label="doc = new XmlDocument()", span="441-441", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyDocument()", file="XmlNodeConverterTest.cs"];
m16_195 [label="doc.LoadXml(''<root></root>'')", span="442-442", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyDocument()", file="XmlNodeConverterTest.cs"];
m16_196 [label="json = JsonConvert.SerializeXmlNode(doc, Formatting.Indented, true)", span="444-444", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyDocument()", file="XmlNodeConverterTest.cs"];
m16_197 [label="Assert.AreEqual(@'''''''''''', json)", span="445-445", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyDocument()", file="XmlNodeConverterTest.cs"];
m16_198 [label="XDocument doc1 = XDocument.Parse(''<root />'')", span="447-447", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyDocument()", file="XmlNodeConverterTest.cs"];
m16_199 [label="json = JsonConvert.SerializeXNode(doc1, Formatting.Indented, true)", span="449-449", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyDocument()", file="XmlNodeConverterTest.cs"];
m16_200 [label="Assert.AreEqual(''null'', json)", span="450-450", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyDocument()", file="XmlNodeConverterTest.cs"];
m16_201 [label="doc1 = XDocument.Parse(''<root></root>'')", span="452-452", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyDocument()", file="XmlNodeConverterTest.cs"];
m16_202 [label="json = JsonConvert.SerializeXNode(doc1, Formatting.Indented, true)", span="454-454", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyDocument()", file="XmlNodeConverterTest.cs"];
m16_203 [label="Assert.AreEqual(@'''''''''''', json)", span="455-455", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyDocument()", file="XmlNodeConverterTest.cs"];
m16_204 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyDocument()", span="433-433", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyDocument()", file="XmlNodeConverterTest.cs"];
m16_101 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXElement()", span="213-213", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXElement()", file="XmlNodeConverterTest.cs"];
m16_102 [label="Foo foo = new Foo { Bar = null }", span="215-215", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXElement()", file="XmlNodeConverterTest.cs"];
m16_103 [label="string json = JsonConvert.SerializeObject(foo)", span="216-216", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXElement()", file="XmlNodeConverterTest.cs"];
m16_104 [label="Assert.AreEqual(@''{''''Bar'''':null}'', json)", span="218-218", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXElement()", file="XmlNodeConverterTest.cs"];
m16_105 [label="Foo foo2 = JsonConvert.DeserializeObject<Foo>(json)", span="219-219", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXElement()", file="XmlNodeConverterTest.cs"];
m16_106 [label="Assert.IsNull(foo2.Bar)", span="221-221", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXElement()", file="XmlNodeConverterTest.cs"];
m16_107 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXElement()", span="213-213", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXElement()", file="XmlNodeConverterTest.cs"];
m16_813 [label="Entry System.DateTime.Parse(string)", span="0-0", cluster="System.DateTime.Parse(string)", file="XmlNodeConverterTest.cs"];
m16_51 [label="Entry Unk.ToString", span="", cluster="Unk.ToString", file="XmlNodeConverterTest.cs"];
m16_18 [label="Entry XAttribute.cstr", span="", cluster="XAttribute.cstr", file="XmlNodeConverterTest.cs"];
m16_716 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeNullableXml()", span="2657-2657", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeNullableXml()", file="XmlNodeConverterTest.cs"];
m16_717 [label="var xml = new NullableXml { Name = ''test'', notNull = XElement.Parse(''<root>test</root>'') }", span="2659-2659", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeNullableXml()", file="XmlNodeConverterTest.cs"];
m16_718 [label="var json = JsonConvert.SerializeObject(xml)", span="2660-2660", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeNullableXml()", file="XmlNodeConverterTest.cs"];
m16_720 [label="Assert.AreEqual(xml.Name, w2.Name)", span="2663-2663", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeNullableXml()", file="XmlNodeConverterTest.cs"];
m16_721 [label="Assert.AreEqual(xml.isNull, w2.isNull)", span="2664-2664", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeNullableXml()", file="XmlNodeConverterTest.cs"];
m16_722 [label="Assert.AreEqual(xml.notNull.ToString(), w2.notNull.ToString())", span="2665-2665", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeNullableXml()", file="XmlNodeConverterTest.cs"];
m16_719 [label="var w2 = JsonConvert.DeserializeObject<NullableXml>(json)", span="2662-2662", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeNullableXml()", file="XmlNodeConverterTest.cs"];
m16_723 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeNullableXml()", span="2657-2657", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeNullableXml()", file="XmlNodeConverterTest.cs"];
m16_84 [label="Entry Unk.WriteLine", span="", cluster="Unk.WriteLine", file="XmlNodeConverterTest.cs"];
m16_61 [label="Entry Unk.Create", span="", cluster="Unk.Create", file="XmlNodeConverterTest.cs"];
m16_0 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlNode(XmlNode)", span="61-61", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlNode(XmlNode)", file="XmlNodeConverterTest.cs"];
m16_1 [label="string json = JsonConvert.SerializeXmlNode(node, Formatting.Indented)", span="63-63", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlNode(XmlNode)", file="XmlNodeConverterTest.cs"];
m16_2 [label="XmlReader reader = new XmlNodeReader(node)", span="67-67", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlNode(XmlNode)", file="XmlNodeConverterTest.cs"];
m16_4 [label="node is XmlDocument", span="74-74", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlNode(XmlNode)", file="XmlNodeConverterTest.cs"];
m16_6 [label="node is XmlAttribute", span="78-78", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlNode(XmlNode)", file="XmlNodeConverterTest.cs"];
m16_7 [label="XmlAttribute attribute = (XmlAttribute)node", span="80-80", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlNode(XmlNode)", file="XmlNodeConverterTest.cs"];
m16_12 [label="Assert.AreEqual(json, linqJson)", span="91-91", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlNode(XmlNode)", file="XmlNodeConverterTest.cs"];
m16_13 [label="return json;", span="94-94", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlNode(XmlNode)", file="XmlNodeConverterTest.cs"];
m16_3 [label="XObject xNode", span="73-73", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlNode(XmlNode)", file="XmlNodeConverterTest.cs"];
m16_5 [label="xNode = XDocument.Load(reader)", span="76-76", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlNode(XmlNode)", file="XmlNodeConverterTest.cs"];
m16_9 [label="reader.MoveToContent()", span="85-85", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlNode(XmlNode)", file="XmlNodeConverterTest.cs"];
m16_10 [label="xNode = XNode.ReadFrom(reader)", span="86-86", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlNode(XmlNode)", file="XmlNodeConverterTest.cs"];
m16_8 [label="xNode = new XAttribute(XName.Get(attribute.LocalName, attribute.NamespaceURI), attribute.Value)", span="81-81", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlNode(XmlNode)", file="XmlNodeConverterTest.cs"];
m16_11 [label="string linqJson = JsonConvert.SerializeXNode(xNode, Formatting.Indented)", span="89-89", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlNode(XmlNode)", file="XmlNodeConverterTest.cs"];
m16_14 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlNode(XmlNode)", span="61-61", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeXmlNode(XmlNode)", file="XmlNodeConverterTest.cs"];
m16_455 [label="Entry Unk.IndentXml", span="", cluster="Unk.IndentXml", file="XmlNodeConverterTest.cs"];
m16_848 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeElementImplicitAttributeNamespace()", span="2913-2913", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeElementImplicitAttributeNamespace()", file="XmlNodeConverterTest.cs"];
m16_849 [label="var original = new XElement(''{http://example.com}MyElement'')", span="2915-2915", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeElementImplicitAttributeNamespace()", file="XmlNodeConverterTest.cs"];
m16_850 [label="Assert.AreEqual(@''<MyElement xmlns=''''http://example.com'''' />'', original.ToString())", span="2916-2916", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeElementImplicitAttributeNamespace()", file="XmlNodeConverterTest.cs"];
m16_851 [label="var json = JsonConvert.SerializeObject(original)", span="2918-2918", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeElementImplicitAttributeNamespace()", file="XmlNodeConverterTest.cs"];
m16_852 [label="Assert.AreEqual(@''{''''MyElement'''':{''''@xmlns'''':''''http://example.com''''}}'', json)", span="2919-2919", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeElementImplicitAttributeNamespace()", file="XmlNodeConverterTest.cs"];
m16_853 [label="var deserialized = JsonConvert.DeserializeObject<XElement>(json)", span="2921-2921", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeElementImplicitAttributeNamespace()", file="XmlNodeConverterTest.cs"];
m16_854 [label="Assert.AreEqual(@''<MyElement xmlns=''''http://example.com'''' />'', deserialized.ToString())", span="2922-2922", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeElementImplicitAttributeNamespace()", file="XmlNodeConverterTest.cs"];
m16_855 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeElementImplicitAttributeNamespace()", span="2913-2913", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeElementImplicitAttributeNamespace()", file="XmlNodeConverterTest.cs"];
m16_177 [label="Entry System.DateTimeOffset.DateTimeOffset(int, int, int, int, int, int, System.TimeSpan)", span="0-0", cluster="System.DateTimeOffset.DateTimeOffset(int, int, int, int, int, int, System.TimeSpan)", file="XmlNodeConverterTest.cs"];
m16_892 [label="Entry Newtonsoft.Json.JsonTextWriter.JsonTextWriter(System.IO.TextWriter)", span="149-149", cluster="Newtonsoft.Json.JsonTextWriter.JsonTextWriter(System.IO.TextWriter)", file="XmlNodeConverterTest.cs"];
m16_122 [label="Entry Newtonsoft.Json.Tests.StringAssert.AreEqual(string, string)", span="338-338", cluster="Newtonsoft.Json.Tests.StringAssert.AreEqual(string, string)", file="XmlNodeConverterTest.cs"];
m16_341 [label="string formattedXml = GetIndentedInnerXml(doc)", span="949-949", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentDeserialize()", file="XmlNodeConverterTest.cs"];
m16_227 [label="JsonConvert.DeserializeXmlNode(json)", span="512-512", cluster="lambda expression", file="XmlNodeConverterTest.cs"];
m16_226 [label="Entry lambda expression", span="512-512", cluster="lambda expression", file="XmlNodeConverterTest.cs"];
m16_228 [label="Exit lambda expression", span="512-512", cluster="lambda expression", file="XmlNodeConverterTest.cs"];
m16_380 [label="Entry lambda expression", span="1055-1055", cluster="lambda expression", file="XmlNodeConverterTest.cs"];
m16_381 [label="XmlDocument newDoc = (XmlDocument)JsonConvert.DeserializeXmlNode(@''[1]'')", span="1055-1055", cluster="lambda expression", file="XmlNodeConverterTest.cs"];
m16_382 [label="Exit lambda expression", span="1055-1055", cluster="lambda expression", file="XmlNodeConverterTest.cs"];
m16_386 [label="Entry lambda expression", span="1062-1062", cluster="lambda expression", file="XmlNodeConverterTest.cs"];
m16_387 [label="XmlDocument newDoc = (XmlDocument)JsonConvert.DeserializeXmlNode(@''{Prop1:1,Prop2:2}'')", span="1062-1062", cluster="lambda expression", file="XmlNodeConverterTest.cs"];
m16_388 [label="Exit lambda expression", span="1062-1062", cluster="lambda expression", file="XmlNodeConverterTest.cs"];
m16_429 [label="JsonConvert.DeserializeXmlNode(json)", span="1206-1206", cluster="lambda expression", file="XmlNodeConverterTest.cs"];
m16_428 [label="Entry lambda expression", span="1206-1206", cluster="lambda expression", file="XmlNodeConverterTest.cs"];
m16_430 [label="Exit lambda expression", span="1206-1206", cluster="lambda expression", file="XmlNodeConverterTest.cs"];
m16_436 [label="JsonConvert.DeserializeXNode(json)", span="1218-1218", cluster="lambda expression", file="XmlNodeConverterTest.cs"];
m16_435 [label="Entry lambda expression", span="1218-1218", cluster="lambda expression", file="XmlNodeConverterTest.cs"];
m16_437 [label="Exit lambda expression", span="1218-1218", cluster="lambda expression", file="XmlNodeConverterTest.cs"];
m16_560 [label="JsonConvert.DeserializeXmlNode(json, ''root'')", span="1756-1756", cluster="lambda expression", file="XmlNodeConverterTest.cs"];
m16_559 [label="Entry lambda expression", span="1756-1756", cluster="lambda expression", file="XmlNodeConverterTest.cs"];
m16_561 [label="Exit lambda expression", span="1756-1756", cluster="lambda expression", file="XmlNodeConverterTest.cs"];
m16_584 [label="DeserializeXmlNode(json)", span="1884-1884", cluster="lambda expression", file="XmlNodeConverterTest.cs"];
m16_583 [label="Entry lambda expression", span="1884-1884", cluster="lambda expression", file="XmlNodeConverterTest.cs"];
m16_585 [label="Exit lambda expression", span="1884-1884", cluster="lambda expression", file="XmlNodeConverterTest.cs"];
m16_760 [label="JsonConvert.DeserializeXmlNode(json)", span="2763-2763", cluster="lambda expression", file="XmlNodeConverterTest.cs"];
m16_759 [label="Entry lambda expression", span="2763-2763", cluster="lambda expression", file="XmlNodeConverterTest.cs"];
m16_761 [label="Exit lambda expression", span="2763-2763", cluster="lambda expression", file="XmlNodeConverterTest.cs"];
m16_342 [label="StringAssert.AreEqual(expected, formattedXml)", span="951-951", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentDeserialize()", color=green, community=0, file="XmlNodeConverterTest.cs"];
m16_343 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentDeserialize()", span="919-919", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentDeserialize()", file="XmlNodeConverterTest.cs"];
m16_635 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeNonInt64IntegerValues()", span="2076-2076", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeNonInt64IntegerValues()", file="XmlNodeConverterTest.cs"];
m16_636 [label="var dict = new Dictionary<string, object> { { ''Int16'', (short)1 }, { ''Float'', 2f }, { ''Int32'', 3 } }", span="2078-2078", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeNonInt64IntegerValues()", file="XmlNodeConverterTest.cs"];
m16_637 [label="var obj = JObject.FromObject(dict)", span="2079-2079", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeNonInt64IntegerValues()", file="XmlNodeConverterTest.cs"];
m16_638 [label="var serializer = JsonSerializer.Create(new JsonSerializerSettings { Converters = { new XmlNodeConverter() { DeserializeRootElementName = ''root'' } } })", span="2080-2080", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeNonInt64IntegerValues()", file="XmlNodeConverterTest.cs"];
m16_639 [label="var reader = obj.CreateReader()", span="2081-2081", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeNonInt64IntegerValues()", file="XmlNodeConverterTest.cs"];
m16_640 [label="var value = (XmlDocument)serializer.Deserialize(reader, typeof(XmlDocument))", span="2083-2083", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeNonInt64IntegerValues()", file="XmlNodeConverterTest.cs"];
m16_641 [label="Assert.AreEqual(@''<root><Int16>1</Int16><Float>2</Float><Int32>3</Int32></root>'', value.InnerXml)", span="2085-2085", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeNonInt64IntegerValues()", file="XmlNodeConverterTest.cs"];
m16_642 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeNonInt64IntegerValues()", span="2076-2076", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeNonInt64IntegerValues()", file="XmlNodeConverterTest.cs"];
m16_701 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeAttributePropertyNotAtStart()", span="2612-2612", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeAttributePropertyNotAtStart()", file="XmlNodeConverterTest.cs"];
m16_702 [label="string json = @''{''''item'''': {''''@action'''': ''''update'''', ''''@itemid'''': ''''1'''', ''''elements'''': [{''''@action'''': ''''none'''', ''''@id'''': ''''2''''},{''''@action'''': ''''none'''', ''''@id'''': ''''3''''}],''''@description'''': ''''temp''''}}''", span="2614-2614", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeAttributePropertyNotAtStart()", file="XmlNodeConverterTest.cs"];
m16_703 [label="XmlDocument xmldoc = JsonConvert.DeserializeXmlNode(json)", span="2616-2616", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeAttributePropertyNotAtStart()", file="XmlNodeConverterTest.cs"];
m16_704 [label="Assert.AreEqual(@''<item action=''''update'''' itemid=''''1'''' description=''''temp''''><elements action=''''none'''' id=''''2'''' /><elements action=''''none'''' id=''''3'''' /></item>'', xmldoc.InnerXml)", span="2618-2618", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeAttributePropertyNotAtStart()", file="XmlNodeConverterTest.cs"];
m16_705 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeAttributePropertyNotAtStart()", span="2612-2612", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeAttributePropertyNotAtStart()", file="XmlNodeConverterTest.cs"];
m16_774 [label="Entry XDocument.cstr", span="", cluster="XDocument.cstr", file="XmlNodeConverterTest.cs"];
m16_671 [label="Entry Newtonsoft.Json.Converters.XmlNodeConverter.cstr", span="", cluster="Newtonsoft.Json.Converters.XmlNodeConverter.cstr", file="XmlNodeConverterTest.cs"];
m16_513 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataProperties()", span="1596-1596", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataProperties()", file="XmlNodeConverterTest.cs"];
m16_514 [label="PreserveReferencesHandlingTests.CircularDictionary circularDictionary = new PreserveReferencesHandlingTests.CircularDictionary()", span="1598-1598", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataProperties()", file="XmlNodeConverterTest.cs"];
m16_515 [label="circularDictionary.Add(''other'', new PreserveReferencesHandlingTests.CircularDictionary { { ''blah'', null } })", span="1599-1599", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataProperties()", file="XmlNodeConverterTest.cs"];
m16_516 [label="circularDictionary.Add(''self'', circularDictionary)", span="1600-1600", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataProperties()", file="XmlNodeConverterTest.cs"];
m16_517 [label="string json = JsonConvert.SerializeObject(circularDictionary, Formatting.Indented,\r\n                new JsonSerializerSettings { PreserveReferencesHandling = PreserveReferencesHandling.All })", span="1602-1603", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataProperties()", file="XmlNodeConverterTest.cs"];
m16_518 [label="StringAssert.AreEqual(@''{\r\n  ''''$id'''': ''''1'''',\r\n  ''''other'''': {\r\n    ''''$id'''': ''''2'''',\r\n    ''''blah'''': null\r\n  },\r\n  ''''self'''': {\r\n    ''''$ref'''': ''''1''''\r\n  }\r\n}'', json)", span="1605-1614", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataProperties()", file="XmlNodeConverterTest.cs"];
m16_519 [label="XmlNode node = DeserializeXmlNode(json, ''root'')", span="1616-1616", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataProperties()", file="XmlNodeConverterTest.cs"];
m16_520 [label="string xml = GetIndentedInnerXml(node)", span="1617-1617", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataProperties()", file="XmlNodeConverterTest.cs"];
m16_523 [label="string xmlJson = SerializeXmlNode(node)", span="1628-1628", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataProperties()", file="XmlNodeConverterTest.cs"];
m16_521 [label="string expected = @''<?xml version=''''1.0'''' encoding=''''utf-16''''?>\r\n<root xmlns:json=''''http://james.newtonking.com/projects/json'''' json:id=''''1''''>\r\n  <other json:id=''''2''''>\r\n    <blah />\r\n  </other>\r\n  <self json:ref=''''1'''' />\r\n</root>''", span="1618-1624", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataProperties()", file="XmlNodeConverterTest.cs"];
m16_522 [label="StringAssert.AreEqual(expected, xml)", span="1626-1626", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataProperties()", file="XmlNodeConverterTest.cs"];
m16_524 [label="string expectedXmlJson = @''{\r\n  ''''root'''': {\r\n    ''''$id'''': ''''1'''',\r\n    ''''other'''': {\r\n      ''''$id'''': ''''2'''',\r\n      ''''blah'''': null\r\n    },\r\n    ''''self'''': {\r\n      ''''$ref'''': ''''1''''\r\n    }\r\n  }\r\n}''", span="1629-1640", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataProperties()", file="XmlNodeConverterTest.cs"];
m16_525 [label="StringAssert.AreEqual(expectedXmlJson, xmlJson)", span="1642-1642", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataProperties()", file="XmlNodeConverterTest.cs"];
m16_526 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataProperties()", span="1596-1596", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataProperties()", file="XmlNodeConverterTest.cs"];
m16_827 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Local_Precision()", span="2876-2876", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Local_Precision()", file="XmlNodeConverterTest.cs"];
m16_828 [label="DateTime dt = DateTime.Parse(''2014-01-23T00:00:00.1234567+01:00'')", span="2878-2878", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Local_Precision()", file="XmlNodeConverterTest.cs"];
m16_829 [label="string json = @''{''''CreatedDate'''': ''''2014-01-23T00:00:00.1234567+01:00''''}''", span="2880-2880", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Local_Precision()", file="XmlNodeConverterTest.cs"];
m16_831 [label="Assert.AreEqual(dt.ToString(''yyyy-MM-ddTHH:mm:ss.FFFFFFFK'', CultureInfo.InvariantCulture), dxml.Root.Element(''CreatedDate'').Value)", span="2882-2882", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Local_Precision()", file="XmlNodeConverterTest.cs"];
m16_830 [label="var dxml = JsonConvert.DeserializeXNode(json, ''root'')", span="2881-2881", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Local_Precision()", file="XmlNodeConverterTest.cs"];
m16_832 [label="Console.WriteLine(''DateTimeToXml_Local: '' + dxml.Root.Element(''CreatedDate'').Value)", span="2884-2884", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Local_Precision()", file="XmlNodeConverterTest.cs"];
m16_833 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Local_Precision()", span="2876-2876", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Local_Precision()", file="XmlNodeConverterTest.cs"];
m16_27 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string, string)", span="102-102", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string, string)", file="XmlNodeConverterTest.cs"];
m16_28 [label="JsonTextReader reader", span="104-104", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string, string)", file="XmlNodeConverterTest.cs"];
m16_29 [label="reader = new JsonTextReader(new StringReader(json))", span="106-106", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string, string)", file="XmlNodeConverterTest.cs"];
m16_32 [label="deserializeRootElementName != null", span="109-109", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string, string)", file="XmlNodeConverterTest.cs"];
m16_33 [label="converter.DeserializeRootElementName = deserializeRootElementName", span="111-111", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string, string)", file="XmlNodeConverterTest.cs"];
m16_36 [label="reader = new JsonTextReader(new StringReader(json))", span="119-119", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string, string)", file="XmlNodeConverterTest.cs"];
m16_30 [label="reader.Read()", span="107-107", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string, string)", file="XmlNodeConverterTest.cs"];
m16_34 [label="XmlNode node = (XmlNode)converter.ReadJson(reader, typeof(XmlDocument), null, new JsonSerializer())", span="114-114", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string, string)", file="XmlNodeConverterTest.cs"];
m16_31 [label="XmlNodeConverter converter = new XmlNodeConverter()", span="108-108", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string, string)", file="XmlNodeConverterTest.cs"];
m16_38 [label="XDocument d = (XDocument)converter.ReadJson(reader, typeof(XDocument), null, new JsonSerializer())", span="121-121", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string, string)", file="XmlNodeConverterTest.cs"];
m16_35 [label="string xmlText = node.OuterXml", span="117-117", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string, string)", file="XmlNodeConverterTest.cs"];
m16_43 [label="return node;", span="132-132", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string, string)", file="XmlNodeConverterTest.cs"];
m16_42 [label="Assert.AreEqual(xmlText, linqXmlText)", span="129-129", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string, string)", file="XmlNodeConverterTest.cs"];
m16_37 [label="reader.Read()", span="120-120", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string, string)", file="XmlNodeConverterTest.cs"];
m16_39 [label="string linqXmlText = d.ToString(SaveOptions.DisableFormatting)", span="123-123", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string, string)", file="XmlNodeConverterTest.cs"];
m16_40 [label="d.Declaration != null", span="124-124", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string, string)", file="XmlNodeConverterTest.cs"];
m16_41 [label="linqXmlText = d.Declaration + linqXmlText", span="126-126", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string, string)", file="XmlNodeConverterTest.cs"];
m16_44 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string, string)", span="102-102", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeXmlNode(string, string)", file="XmlNodeConverterTest.cs"];
m16_275 [label="Entry Unk.CreateElement", span="", cluster="Unk.CreateElement", file="XmlNodeConverterTest.cs"];
m16_65 [label="Entry Unk.WriteNode", span="", cluster="Unk.WriteNode", file="XmlNodeConverterTest.cs"];
m16_527 [label="Entry Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.CircularDictionary.CircularDictionary()", span="433-433", cluster="Newtonsoft.Json.Tests.Serialization.PreserveReferencesHandlingTests.CircularDictionary.CircularDictionary()", file="XmlNodeConverterTest.cs"];
m16_755 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RootPropertyError()", span="2739-2739", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RootPropertyError()", file="XmlNodeConverterTest.cs"];
m16_756 [label="string json = @''{\r\n  ''''$id'''': ''''1'''',\r\n  ''''AOSLocaleName'''': ''''en-US'''',\r\n  ''''AXLanguage'''': ''''EN-AU'''',\r\n  ''''Company'''': ''''AURE'''',\r\n  ''''CompanyTimeZone'''': 8,\r\n  ''''CurrencyInfo'''': {\r\n    ''''$id'''': ''''2'''',\r\n    ''''CurrencyCode'''': ''''AUD'''',\r\n    ''''Description'''': ''''Australian Dollar'''',\r\n    ''''ExchangeRate'''': 100.0,\r\n    ''''ISOCurrencyCode'''': ''''AUD'''',\r\n    ''''Prefix'''': '''''''',\r\n    ''''Suffix'''': ''''''''\r\n  },\r\n  ''''IsSysAdmin'''': true,\r\n  ''''UserId'''': ''''lamar.miller'''',\r\n  ''''UserPreferredCalendar'''': 0,\r\n  ''''UserPreferredTimeZone'''': 8\r\n}''", span="2741-2760", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RootPropertyError()", file="XmlNodeConverterTest.cs"];
m16_757 [label="ExceptionAssert.Throws<JsonSerializationException>(\r\n                () => JsonConvert.DeserializeXmlNode(json),\r\n                ''JSON root object has property '$id' that will be converted to an attribute. A root object cannot have any attribute properties. Consider specifying a DeserializeRootElementName. Path '$id', line 2, position 12.'')", span="2762-2764", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RootPropertyError()", file="XmlNodeConverterTest.cs"];
m16_758 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RootPropertyError()", span="2739-2739", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.RootPropertyError()", file="XmlNodeConverterTest.cs"];
m16_46 [label="Entry System.IO.StringReader.StringReader(string)", span="0-0", cluster="System.IO.StringReader.StringReader(string)", file="XmlNodeConverterTest.cs"];
m16_466 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNestedArraysToXml()", span="1366-1366", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNestedArraysToXml()", file="XmlNodeConverterTest.cs"];
m16_467 [label="string json = @''{\r\n  ''''available_sizes'''': [\r\n    [\r\n      [113, 150],\r\n      ''''assets/images/resized/0001/1070/11070v1-max-150x150.jpg''''\r\n    ],\r\n    [\r\n      [189, 250],\r\n      ''''assets/images/resized/0001/1070/11070v1-max-250x250.jpg''''\r\n    ],\r\n    [\r\n      [341, 450],\r\n      ''''assets/images/resized/0001/1070/11070v1-max-450x450.jpg''''\r\n    ]\r\n  ]\r\n}''", span="1368-1383", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNestedArraysToXml()", file="XmlNodeConverterTest.cs"];
m16_468 [label="XmlDocument newDoc = JsonConvert.DeserializeXmlNode(json, ''myRoot'')", span="1386-1386", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNestedArraysToXml()", file="XmlNodeConverterTest.cs"];
m16_470 [label="XDocument newXDoc = JsonConvert.DeserializeXNode(json, ''myRoot'')", span="1392-1392", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNestedArraysToXml()", file="XmlNodeConverterTest.cs"];
m16_469 [label="Assert.AreEqual(@''<myRoot><available_sizes><available_sizes><available_sizes>113</available_sizes><available_sizes>150</available_sizes></available_sizes><available_sizes>assets/images/resized/0001/1070/11070v1-max-150x150.jpg</available_sizes></available_sizes><available_sizes><available_sizes><available_sizes>189</available_sizes><available_sizes>250</available_sizes></available_sizes><available_sizes>assets/images/resized/0001/1070/11070v1-max-250x250.jpg</available_sizes></available_sizes><available_sizes><available_sizes><available_sizes>341</available_sizes><available_sizes>450</available_sizes></available_sizes><available_sizes>assets/images/resized/0001/1070/11070v1-max-450x450.jpg</available_sizes></available_sizes></myRoot>'', newDoc.InnerXml)", span="1388-1388", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNestedArraysToXml()", file="XmlNodeConverterTest.cs"];
m16_471 [label="Assert.AreEqual(@''<myRoot><available_sizes><available_sizes><available_sizes>113</available_sizes><available_sizes>150</available_sizes></available_sizes><available_sizes>assets/images/resized/0001/1070/11070v1-max-150x150.jpg</available_sizes></available_sizes><available_sizes><available_sizes><available_sizes>189</available_sizes><available_sizes>250</available_sizes></available_sizes><available_sizes>assets/images/resized/0001/1070/11070v1-max-250x250.jpg</available_sizes></available_sizes><available_sizes><available_sizes><available_sizes>341</available_sizes><available_sizes>450</available_sizes></available_sizes><available_sizes>assets/images/resized/0001/1070/11070v1-max-450x450.jpg</available_sizes></available_sizes></myRoot>'', newXDoc.ToString(SaveOptions.DisableFormatting))", span="1394-1394", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNestedArraysToXml()", file="XmlNodeConverterTest.cs"];
m16_472 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNestedArraysToXml()", span="1366-1366", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleNestedArraysToXml()", file="XmlNodeConverterTest.cs"];
m16_794 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Unspecified()", span="2824-2824", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Unspecified()", file="XmlNodeConverterTest.cs"];
m16_795 [label="string json = @''{''''CreatedDate'''': ''''2014-01-23T00:00:00''''}''", span="2826-2826", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Unspecified()", file="XmlNodeConverterTest.cs"];
m16_796 [label="var dxml = JsonConvert.DeserializeXNode(json, ''root'')", span="2827-2827", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Unspecified()", file="XmlNodeConverterTest.cs"];
m16_797 [label="Assert.AreEqual(''2014-01-23T00:00:00'', dxml.Root.Element(''CreatedDate'').Value)", span="2828-2828", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Unspecified()", file="XmlNodeConverterTest.cs"];
m16_798 [label="Console.WriteLine(''DateTimeToXml_Unspecified: '' + dxml.Root.Element(''CreatedDate'').Value)", span="2830-2830", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Unspecified()", file="XmlNodeConverterTest.cs"];
m16_799 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Unspecified()", span="2824-2824", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeToXml_Unspecified()", file="XmlNodeConverterTest.cs"];
m16_389 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JavaScriptConstructor()", span="1067-1067", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JavaScriptConstructor()", file="XmlNodeConverterTest.cs"];
m16_390 [label="string jsonText = @''{root:{r:new Date(34343, 55)}}''", span="1069-1069", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JavaScriptConstructor()", file="XmlNodeConverterTest.cs"];
m16_391 [label="XmlDocument newDoc = (XmlDocument)DeserializeXmlNode(jsonText)", span="1071-1071", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JavaScriptConstructor()", file="XmlNodeConverterTest.cs"];
m16_392 [label="string expected = @''<root><r><Date>34343</Date><Date>55</Date></r></root>''", span="1073-1073", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JavaScriptConstructor()", file="XmlNodeConverterTest.cs"];
m16_393 [label="Assert.AreEqual(expected, newDoc.InnerXml)", span="1075-1075", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JavaScriptConstructor()", file="XmlNodeConverterTest.cs"];
m16_394 [label="string json = SerializeXmlNode(newDoc)", span="1077-1077", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JavaScriptConstructor()", file="XmlNodeConverterTest.cs"];
m16_395 [label="expected = @''{\r\n  ''''root'''': {\r\n    ''''r'''': {\r\n      ''''Date'''': [\r\n        ''''34343'''',\r\n        ''''55''''\r\n      ]\r\n    }\r\n  }\r\n}''", span="1078-1087", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JavaScriptConstructor()", file="XmlNodeConverterTest.cs"];
m16_396 [label="StringAssert.AreEqual(expected, json)", span="1089-1089", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JavaScriptConstructor()", file="XmlNodeConverterTest.cs"];
m16_397 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JavaScriptConstructor()", span="1067-1067", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.JavaScriptConstructor()", file="XmlNodeConverterTest.cs"];
m16_66 [label="Entry Unk.Flush", span="", cluster="Unk.Flush", file="XmlNodeConverterTest.cs"];
m16_741 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeBigInteger()", span="2710-2710", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeBigInteger()", file="XmlNodeConverterTest.cs"];
m16_742 [label="var json = ''{\''DocumentId\'':13779965364495889899 }''", span="2712-2712", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeBigInteger()", file="XmlNodeConverterTest.cs"];
m16_743 [label="XmlDocument node = JsonConvert.DeserializeXmlNode(json)", span="2714-2714", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeBigInteger()", file="XmlNodeConverterTest.cs"];
m16_744 [label="Assert.AreEqual(''<DocumentId>13779965364495889899</DocumentId>'', node.OuterXml)", span="2716-2716", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeBigInteger()", file="XmlNodeConverterTest.cs"];
m16_745 [label="string json2 = JsonConvert.SerializeXmlNode(node)", span="2718-2718", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeBigInteger()", file="XmlNodeConverterTest.cs"];
m16_746 [label="Assert.AreEqual(@''{''''DocumentId'''':''''13779965364495889899''''}'', json2)", span="2720-2720", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeBigInteger()", file="XmlNodeConverterTest.cs"];
m16_747 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeBigInteger()", span="2710-2710", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeBigInteger()", file="XmlNodeConverterTest.cs"];
m16_178 [label="Entry System.TimeSpan.FromHours(double)", span="0-0", cluster="System.TimeSpan.FromHours(double)", file="XmlNodeConverterTest.cs"];
m16_611 [label="Entry System.Collections.Generic.List<T>.List()", span="0-0", cluster="System.Collections.Generic.List<T>.List()", file="XmlNodeConverterTest.cs"];
m16_311 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ToStringWithDeclaration(XDocument, bool)", span="813-813", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ToStringWithDeclaration(XDocument, bool)", file="XmlNodeConverterTest.cs"];
m16_314 [label="StringBuilder builder = new StringBuilder()", span="815-815", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ToStringWithDeclaration(XDocument, bool)", file="XmlNodeConverterTest.cs"];
m16_315 [label="var writer = XmlWriter.Create(new Utf8StringWriter(builder), new XmlWriterSettings { Indent = indent })", span="816-816", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ToStringWithDeclaration(XDocument, bool)", file="XmlNodeConverterTest.cs"];
m16_316 [label="doc.Save(writer)", span="818-818", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ToStringWithDeclaration(XDocument, bool)", file="XmlNodeConverterTest.cs"];
m16_317 [label="return builder.ToString();", span="820-820", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ToStringWithDeclaration(XDocument, bool)", file="XmlNodeConverterTest.cs"];
m16_318 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ToStringWithDeclaration(XDocument, bool)", span="813-813", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.ToStringWithDeclaration(XDocument, bool)", file="XmlNodeConverterTest.cs"];
m16_181 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeOffsetContainer.DateTimeOffsetContainer()", span="386-386", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DateTimeOffsetContainer.DateTimeOffsetContainer()", file="XmlNodeConverterTest.cs"];
m16_733 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXmlElementWithNamespaceInChildrenRootDontHaveNameSpace()", span="2691-2691", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXmlElementWithNamespaceInChildrenRootDontHaveNameSpace()", file="XmlNodeConverterTest.cs"];
m16_734 [label="var xmlString = @''<root>\r\n                              <b xmlns='http://www.example.com/ns'>Asd</b>\r\n                              <c>AAA</c>\r\n                              <test>adad</test>\r\n                              </root>''", span="2693-2697", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXmlElementWithNamespaceInChildrenRootDontHaveNameSpace()", file="XmlNodeConverterTest.cs"];
m16_735 [label="XmlDocument xml = new XmlDocument()", span="2699-2699", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXmlElementWithNamespaceInChildrenRootDontHaveNameSpace()", file="XmlNodeConverterTest.cs"];
m16_736 [label="xml.LoadXml(xmlString)", span="2700-2700", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXmlElementWithNamespaceInChildrenRootDontHaveNameSpace()", file="XmlNodeConverterTest.cs"];
m16_737 [label="var json1 = JsonConvert.SerializeXmlNode(xml)", span="2702-2702", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXmlElementWithNamespaceInChildrenRootDontHaveNameSpace()", file="XmlNodeConverterTest.cs"];
m16_738 [label="var xmlBack = JsonConvert.DeserializeObject<XmlDocument>(json1)", span="2703-2703", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXmlElementWithNamespaceInChildrenRootDontHaveNameSpace()", file="XmlNodeConverterTest.cs"];
m16_739 [label="Assert.AreEqual(@''<root><b xmlns=''''http://www.example.com/ns''''>Asd</b><c>AAA</c><test>adad</test></root>'', xmlBack.OuterXml)", span="2705-2705", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXmlElementWithNamespaceInChildrenRootDontHaveNameSpace()", file="XmlNodeConverterTest.cs"];
m16_740 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXmlElementWithNamespaceInChildrenRootDontHaveNameSpace()", span="2691-2691", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeAndDeserializeXmlElementWithNamespaceInChildrenRootDontHaveNameSpace()", file="XmlNodeConverterTest.cs"];
m16_780 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Serialize_XDocument_NoRootWithDeclaration()", span="2802-2802", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Serialize_XDocument_NoRootWithDeclaration()", file="XmlNodeConverterTest.cs"];
m16_781 [label="XDocument d = new XDocument()", span="2804-2804", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Serialize_XDocument_NoRootWithDeclaration()", file="XmlNodeConverterTest.cs"];
m16_782 [label="d.Declaration = new XDeclaration(''Version!'', ''Encoding!'', ''Standalone!'')", span="2805-2805", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Serialize_XDocument_NoRootWithDeclaration()", file="XmlNodeConverterTest.cs"];
m16_783 [label="string json = JsonConvert.SerializeXNode(d)", span="2807-2807", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Serialize_XDocument_NoRootWithDeclaration()", file="XmlNodeConverterTest.cs"];
m16_784 [label="Assert.AreEqual(@''{''''?xml'''':{''''@version'''':''''Version!'''',''''@encoding'''':''''Encoding!'''',''''@standalone'''':''''Standalone!''''}}'', json)", span="2809-2809", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Serialize_XDocument_NoRootWithDeclaration()", file="XmlNodeConverterTest.cs"];
m16_785 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Serialize_XDocument_NoRootWithDeclaration()", span="2802-2802", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.Serialize_XDocument_NoRootWithDeclaration()", file="XmlNodeConverterTest.cs"];
m16_673 [label="Entry System.IO.StreamReader.StreamReader(System.IO.Stream)", span="0-0", cluster="System.IO.StreamReader.StreamReader(System.IO.Stream)", file="XmlNodeConverterTest.cs"];
m16_786 [label="Entry XDeclaration.cstr", span="", cluster="XDeclaration.cstr", file="XmlNodeConverterTest.cs"];
m16_891 [label="Entry System.IO.StringWriter.StringWriter(System.Text.StringBuilder, System.IFormatProvider)", span="0-0", cluster="System.IO.StringWriter.StringWriter(System.Text.StringBuilder, System.IFormatProvider)", file="XmlNodeConverterTest.cs"];
m16_62 [label="Entry System.IO.StringWriter.StringWriter()", span="0-0", cluster="System.IO.StringWriter.StringWriter()", file="XmlNodeConverterTest.cs"];
m16_856 [label="Entry XElement.cstr", span="", cluster="XElement.cstr", file="XmlNodeConverterTest.cs"];
m16_274 [label="Entry Unk.CreateCDataSection", span="", cluster="Unk.CreateCDataSection", file="XmlNodeConverterTest.cs"];
m16_272 [label="Entry Unk.Attribute", span="", cluster="Unk.Attribute", file="XmlNodeConverterTest.cs"];
m16_506 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EscapingNames()", span="1552-1552", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EscapingNames()", file="XmlNodeConverterTest.cs"];
m16_507 [label="string json = @''{\r\n              ''''root!'''': {\r\n                ''''person!'''': [\r\n                  {\r\n                    ''''@id!'''': ''''1'''',\r\n                    ''''name!'''': ''''Alan'''',\r\n                    ''''url!'''': ''''http://www.google.com''''\r\n                  },\r\n                  {\r\n                    ''''@id!'''': ''''2'''',\r\n                    ''''name!'''': ''''Louis'''',\r\n                    ''''url!'''': ''''http://www.yahoo.com''''\r\n                  }\r\n                ]\r\n              }\r\n            }''", span="1554-1569", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EscapingNames()", file="XmlNodeConverterTest.cs"];
m16_508 [label="XmlDocument doc = (XmlDocument)DeserializeXmlNode(json)", span="1571-1571", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EscapingNames()", file="XmlNodeConverterTest.cs"];
m16_509 [label="Assert.AreEqual(@''<root_x0021_><person_x0021_ id_x0021_=''''1''''><name_x0021_>Alan</name_x0021_><url_x0021_>http://www.google.com</url_x0021_></person_x0021_><person_x0021_ id_x0021_=''''2''''><name_x0021_>Louis</name_x0021_><url_x0021_>http://www.yahoo.com</url_x0021_></person_x0021_></root_x0021_>'', doc.InnerXml)", span="1573-1573", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EscapingNames()", file="XmlNodeConverterTest.cs"];
m16_510 [label="string json2 = SerializeXmlNode(doc)", span="1575-1575", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EscapingNames()", file="XmlNodeConverterTest.cs"];
m16_511 [label="StringAssert.AreEqual(@''{\r\n  ''''root!'''': {\r\n    ''''person!'''': [\r\n      {\r\n        ''''@id!'''': ''''1'''',\r\n        ''''name!'''': ''''Alan'''',\r\n        ''''url!'''': ''''http://www.google.com''''\r\n      },\r\n      {\r\n        ''''@id!'''': ''''2'''',\r\n        ''''name!'''': ''''Louis'''',\r\n        ''''url!'''': ''''http://www.yahoo.com''''\r\n      }\r\n    ]\r\n  }\r\n}'', json2)", span="1577-1592", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EscapingNames()", file="XmlNodeConverterTest.cs"];
m16_512 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EscapingNames()", span="1552-1552", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EscapingNames()", file="XmlNodeConverterTest.cs"];
m16_857 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDocumentExplicitAttributeNamespace()", span="2926-2926", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDocumentExplicitAttributeNamespace()", file="XmlNodeConverterTest.cs"];
m16_858 [label="var original = XDocument.Parse(''<MyElement xmlns=\''http://example.com\'' />'')", span="2928-2928", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDocumentExplicitAttributeNamespace()", file="XmlNodeConverterTest.cs"];
m16_859 [label="Assert.AreEqual(@''<MyElement xmlns=''''http://example.com'''' />'', original.ToString())", span="2929-2929", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDocumentExplicitAttributeNamespace()", file="XmlNodeConverterTest.cs"];
m16_860 [label="var json = JsonConvert.SerializeObject(original)", span="2931-2931", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDocumentExplicitAttributeNamespace()", file="XmlNodeConverterTest.cs"];
m16_861 [label="Assert.AreEqual(@''{''''MyElement'''':{''''@xmlns'''':''''http://example.com''''}}'', json)", span="2932-2932", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDocumentExplicitAttributeNamespace()", file="XmlNodeConverterTest.cs"];
m16_862 [label="var deserialized = JsonConvert.DeserializeObject<XDocument>(json)", span="2934-2934", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDocumentExplicitAttributeNamespace()", file="XmlNodeConverterTest.cs"];
m16_863 [label="Assert.AreEqual(@''<MyElement xmlns=''''http://example.com'''' />'', deserialized.ToString())", span="2935-2935", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDocumentExplicitAttributeNamespace()", file="XmlNodeConverterTest.cs"];
m16_864 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDocumentExplicitAttributeNamespace()", span="2926-2926", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDocumentExplicitAttributeNamespace()", file="XmlNodeConverterTest.cs"];
m16_285 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentFragmentSerialize()", span="682-682", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentFragmentSerialize()", file="XmlNodeConverterTest.cs"];
m16_286 [label="XmlDocument doc = new XmlDocument()", span="684-684", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentFragmentSerialize()", file="XmlNodeConverterTest.cs"];
m16_287 [label="XmlDocumentFragment fragement = doc.CreateDocumentFragment()", span="686-686", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentFragmentSerialize()", file="XmlNodeConverterTest.cs"];
m16_288 [label="fragement.InnerXml = ''<Item>widget</Item><Item>widget</Item>''", span="688-688", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentFragmentSerialize()", file="XmlNodeConverterTest.cs"];
m16_289 [label="string jsonText = JsonConvert.SerializeXmlNode(fragement)", span="690-690", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentFragmentSerialize()", file="XmlNodeConverterTest.cs"];
m16_290 [label="string expected = @''{''''Item'''':[''''widget'''',''''widget'''']}''", span="692-692", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentFragmentSerialize()", file="XmlNodeConverterTest.cs"];
m16_291 [label="Assert.AreEqual(expected, jsonText)", span="694-694", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentFragmentSerialize()", file="XmlNodeConverterTest.cs"];
m16_292 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentFragmentSerialize()", span="682-682", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DocumentFragmentSerialize()", file="XmlNodeConverterTest.cs"];
m16_22 [label="Entry Unk.SerializeXNode", span="", cluster="Unk.SerializeXNode", file="XmlNodeConverterTest.cs"];
m16_273 [label="Entry Unk.CreateProcessingInstruction", span="", cluster="Unk.CreateProcessingInstruction", file="XmlNodeConverterTest.cs"];
m16_555 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeMetadataPropertyWithBadValue()", span="1749-1749", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeMetadataPropertyWithBadValue()", file="XmlNodeConverterTest.cs"];
m16_556 [label="string json = @''{\r\n  ''''$id'''': []\r\n}''", span="1751-1753", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeMetadataPropertyWithBadValue()", file="XmlNodeConverterTest.cs"];
m16_557 [label="ExceptionAssert.Throws<JsonSerializationException>(\r\n                () => { JsonConvert.DeserializeXmlNode(json, ''root''); },\r\n                ''Unexpected JsonToken: StartArray. Path '$id', line 2, position 10.'')", span="1755-1757", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeMetadataPropertyWithBadValue()", file="XmlNodeConverterTest.cs"];
m16_558 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeMetadataPropertyWithBadValue()", span="1749-1749", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeMetadataPropertyWithBadValue()", file="XmlNodeConverterTest.cs"];
m16_52 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.IndentXml(string)", span="136-136", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.IndentXml(string)", file="XmlNodeConverterTest.cs"];
m16_53 [label="XmlReader reader = XmlReader.Create(new StringReader(xml))", span="138-138", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.IndentXml(string)", file="XmlNodeConverterTest.cs"];
m16_54 [label="StringWriter sw = new StringWriter()", span="140-140", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.IndentXml(string)", file="XmlNodeConverterTest.cs"];
m16_56 [label="reader.Read()", span="143-143", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.IndentXml(string)", file="XmlNodeConverterTest.cs"];
m16_57 [label="writer.WriteNode(reader, false)", span="145-145", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.IndentXml(string)", file="XmlNodeConverterTest.cs"];
m16_55 [label="XmlWriter writer = XmlWriter.Create(sw, new XmlWriterSettings { Indent = true, OmitXmlDeclaration = true })", span="141-141", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.IndentXml(string)", file="XmlNodeConverterTest.cs"];
m16_59 [label="return sw.ToString();", span="150-150", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.IndentXml(string)", file="XmlNodeConverterTest.cs"];
m16_58 [label="writer.Flush()", span="148-148", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.IndentXml(string)", file="XmlNodeConverterTest.cs"];
m16_60 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.IndentXml(string)", span="136-136", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.IndentXml(string)", file="XmlNodeConverterTest.cs"];
m16_19 [label="Entry Unk.Get", span="", cluster="Unk.Get", file="XmlNodeConverterTest.cs"];
m16_152 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.FloatParseHandlingDecimal()", span="363-363", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.FloatParseHandlingDecimal()", file="XmlNodeConverterTest.cs"];
m16_153 [label="decimal d = (decimal)Math.PI + 1000000000m", span="365-365", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.FloatParseHandlingDecimal()", file="XmlNodeConverterTest.cs"];
m16_154 [label="var x = new DecimalContainer { Number = d }", span="366-366", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.FloatParseHandlingDecimal()", file="XmlNodeConverterTest.cs"];
m16_155 [label="var json = JsonConvert.SerializeObject(x, Formatting.Indented)", span="368-368", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.FloatParseHandlingDecimal()", file="XmlNodeConverterTest.cs"];
m16_161 [label="Assert.AreEqual(x.Number, x2.Number)", span="383-383", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.FloatParseHandlingDecimal()", file="XmlNodeConverterTest.cs"];
m16_156 [label="XDocument doc1 = JsonConvert.DeserializeObject<XDocument>(json, new JsonSerializerSettings\r\n            {\r\n                Converters = { new XmlNodeConverter() },\r\n                FloatParseHandling = FloatParseHandling.Decimal\r\n            })", span="370-374", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.FloatParseHandlingDecimal()", file="XmlNodeConverterTest.cs"];
m16_157 [label="var xml = doc1.ToString()", span="376-376", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.FloatParseHandlingDecimal()", file="XmlNodeConverterTest.cs"];
m16_159 [label="string json2 = JsonConvert.SerializeObject(doc1, Formatting.Indented)", span="379-379", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.FloatParseHandlingDecimal()", file="XmlNodeConverterTest.cs"];
m16_158 [label="Assert.AreEqual(''<Number>1000000003.14159265358979</Number>'', xml)", span="377-377", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.FloatParseHandlingDecimal()", file="XmlNodeConverterTest.cs"];
m16_160 [label="DecimalContainer x2 = JsonConvert.DeserializeObject<DecimalContainer>(json2)", span="381-381", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.FloatParseHandlingDecimal()", file="XmlNodeConverterTest.cs"];
m16_162 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.FloatParseHandlingDecimal()", span="363-363", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.FloatParseHandlingDecimal()", file="XmlNodeConverterTest.cs"];
m16_164 [label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting)", span="537-537", cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting)", file="XmlNodeConverterTest.cs"];
m16_182 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.GroupElementsOfTheSameName()", span="416-416", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.GroupElementsOfTheSameName()", file="XmlNodeConverterTest.cs"];
m16_183 [label="string xml = ''<root><p>Text1<span>Span1</span> <span>Span2</span> Text2</p></root>''", span="418-418", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.GroupElementsOfTheSameName()", file="XmlNodeConverterTest.cs"];
m16_184 [label="string json = JsonConvert.SerializeXNode(XElement.Parse(xml))", span="420-420", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.GroupElementsOfTheSameName()", file="XmlNodeConverterTest.cs"];
m16_185 [label="Assert.AreEqual(@''{''''root'''':{''''p'''':{''''#text'''':[''''Text1'''','''' Text2''''],''''span'''':[''''Span1'''',''''Span2'''']}}}'', json)", span="422-422", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.GroupElementsOfTheSameName()", file="XmlNodeConverterTest.cs"];
m16_186 [label="XDocument doc = JsonConvert.DeserializeXNode(json)", span="424-424", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.GroupElementsOfTheSameName()", file="XmlNodeConverterTest.cs"];
m16_187 [label="StringAssert.AreEqual(@''<root>\r\n  <p>Text1 Text2<span>Span1</span><span>Span2</span></p>\r\n</root>'', doc.ToString())", span="426-428", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.GroupElementsOfTheSameName()", file="XmlNodeConverterTest.cs"];
m16_188 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.GroupElementsOfTheSameName()", span="416-416", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.GroupElementsOfTheSameName()", file="XmlNodeConverterTest.cs"];
m16_628 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmtpyElementWithArrayAttributeShouldWriteElement()", span="2055-2055", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmtpyElementWithArrayAttributeShouldWriteElement()", file="XmlNodeConverterTest.cs"];
m16_629 [label="string xml = @''<root>\r\n<Reports d1p1:Array=''''true'''' xmlns:d1p1=''''http://james.newtonking.com/projects/json'''' />\r\n</root>''", span="2057-2059", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmtpyElementWithArrayAttributeShouldWriteElement()", file="XmlNodeConverterTest.cs"];
m16_630 [label="XmlDocument d = new XmlDocument()", span="2061-2061", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmtpyElementWithArrayAttributeShouldWriteElement()", file="XmlNodeConverterTest.cs"];
m16_631 [label="d.LoadXml(xml)", span="2062-2062", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmtpyElementWithArrayAttributeShouldWriteElement()", file="XmlNodeConverterTest.cs"];
m16_632 [label="string json = JsonConvert.SerializeXmlNode(d, Formatting.Indented)", span="2064-2064", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmtpyElementWithArrayAttributeShouldWriteElement()", file="XmlNodeConverterTest.cs"];
m16_633 [label="StringAssert.AreEqual(@''{\r\n  ''''root'''': {\r\n    ''''Reports'''': [\r\n      {}\r\n    ]\r\n  }\r\n}'', json)", span="2066-2072", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmtpyElementWithArrayAttributeShouldWriteElement()", file="XmlNodeConverterTest.cs"];
m16_634 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmtpyElementWithArrayAttributeShouldWriteElement()", span="2055-2055", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.EmtpyElementWithArrayAttributeShouldWriteElement()", file="XmlNodeConverterTest.cs"];
m16_109 [label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object)", span="524-524", cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object)", file="XmlNodeConverterTest.cs"];
m16_96 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MyModel.MyModel()", span="184-184", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MyModel.MyModel()", file="XmlNodeConverterTest.cs"];
m16_293 [label="Entry Unk.CreateDocumentFragment", span="", cluster="Unk.CreateDocumentFragment", file="XmlNodeConverterTest.cs"];
m16_110 [label="Entry Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string)", span="703-703", cluster="Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string)", file="XmlNodeConverterTest.cs"];
m16_601 [label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object, params Newtonsoft.Json.JsonConverter[])", span="548-548", cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, params Newtonsoft.Json.JsonConverter[])", file="XmlNodeConverterTest.cs"];
m16_599 [label="Entry System.DateTime.DateTime(int, int, int, int, int, int, System.DateTimeKind)", span="0-0", cluster="System.DateTime.DateTime(int, int, int, int, int, int, System.DateTimeKind)", file="XmlNodeConverterTest.cs"];
m16_762 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyNodeAndOmitRoot()", span="2768-2768", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyNodeAndOmitRoot()", file="XmlNodeConverterTest.cs"];
m16_763 [label="string xmlString = @''<myemptynode />''", span="2770-2770", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyNodeAndOmitRoot()", file="XmlNodeConverterTest.cs"];
m16_764 [label="XmlDocument xml = new XmlDocument()", span="2772-2772", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyNodeAndOmitRoot()", file="XmlNodeConverterTest.cs"];
m16_765 [label="xml.LoadXml(xmlString)", span="2773-2773", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyNodeAndOmitRoot()", file="XmlNodeConverterTest.cs"];
m16_766 [label="string json = JsonConvert.SerializeXmlNode(xml, Formatting.Indented, true)", span="2775-2775", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyNodeAndOmitRoot()", file="XmlNodeConverterTest.cs"];
m16_767 [label="Assert.AreEqual(''null'', json)", span="2777-2777", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyNodeAndOmitRoot()", file="XmlNodeConverterTest.cs"];
m16_768 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyNodeAndOmitRoot()", span="2768-2768", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeEmptyNodeAndOmitRoot()", file="XmlNodeConverterTest.cs"];
m16_890 [label="Entry System.Text.StringBuilder.StringBuilder(int)", span="0-0", cluster="System.Text.StringBuilder.StringBuilder(int)", file="XmlNodeConverterTest.cs"];
m16_215 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeUndeclaredNamespacePrefix()", span="479-479", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeUndeclaredNamespacePrefix()", file="XmlNodeConverterTest.cs"];
m16_216 [label="XmlDocument doc = JsonConvert.DeserializeXmlNode(''{ A: { '@xsi:nil': true } }'')", span="481-481", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeUndeclaredNamespacePrefix()", file="XmlNodeConverterTest.cs"];
m16_217 [label="Assert.AreEqual(@''<A nil=''''true'''' />'', doc.OuterXml)", span="483-483", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeUndeclaredNamespacePrefix()", file="XmlNodeConverterTest.cs"];
m16_219 [label="Assert.AreEqual(doc.OuterXml, xdoc.ToString())", span="487-487", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeUndeclaredNamespacePrefix()", file="XmlNodeConverterTest.cs"];
m16_218 [label="XDocument xdoc = JsonConvert.DeserializeXNode(''{ A: { '@xsi:nil': true } }'')", span="485-485", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeUndeclaredNamespacePrefix()", file="XmlNodeConverterTest.cs"];
m16_220 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeUndeclaredNamespacePrefix()", span="479-479", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeUndeclaredNamespacePrefix()", file="XmlNodeConverterTest.cs"];
m16_321 [label="Entry System.Text.StringBuilder.ToString()", span="0-0", cluster="System.Text.StringBuilder.ToString()", file="XmlNodeConverterTest.cs"];
m16_612 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.OmitRootObject()", span="1971-1971", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.OmitRootObject()", file="XmlNodeConverterTest.cs"];
m16_613 [label="string xml = @''<test>\r\n  <Name>Hi</Name>\r\n  <Name>Hi</Name>\r\n  <Products json:Array=''''true'''' xmlns:json=''''http://james.newtonking.com/projects/json''''>\r\n    <Name>First</Name>\r\n    <ExpiryDate>2000-01-01T00:00:00Z</ExpiryDate>\r\n    <Price>0</Price>\r\n    <Sizes />\r\n  </Products>\r\n</test>''", span="1973-1982", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.OmitRootObject()", file="XmlNodeConverterTest.cs"];
m16_614 [label="XmlDocument d = new XmlDocument()", span="1984-1984", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.OmitRootObject()", file="XmlNodeConverterTest.cs"];
m16_615 [label="d.LoadXml(xml)", span="1985-1985", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.OmitRootObject()", file="XmlNodeConverterTest.cs"];
m16_616 [label="string output = JsonConvert.SerializeXmlNode(d, Formatting.Indented, true)", span="1987-1987", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.OmitRootObject()", file="XmlNodeConverterTest.cs"];
m16_617 [label="StringAssert.AreEqual(@''{\r\n  ''''Name'''': [\r\n    ''''Hi'''',\r\n    ''''Hi''''\r\n  ],\r\n  ''''Products'''': [\r\n    {\r\n      ''''Name'''': ''''First'''',\r\n      ''''ExpiryDate'''': ''''2000-01-01T00:00:00Z'''',\r\n      ''''Price'''': ''''0'''',\r\n      ''''Sizes'''': null\r\n    }\r\n  ]\r\n}'', output)", span="1989-2002", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.OmitRootObject()", file="XmlNodeConverterTest.cs"];
m16_618 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.OmitRootObject()", span="1971-1971", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.OmitRootObject()", file="XmlNodeConverterTest.cs"];
m16_327 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NamespaceSerializeDeserialize()", span="835-835", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NamespaceSerializeDeserialize()", file="XmlNodeConverterTest.cs"];
m16_328 [label="string xml = @''<?xml version=''''1.0'''' encoding=''''utf-8'''' ?>\r\n<xs:schema xs:id=''''SomeID'''' \r\n	xmlns='''''''' \r\n	xmlns:xs=''''http://www.w3.org/2001/XMLSchema'''' \r\n	xmlns:msdata=''''urn:schemas-microsoft-com:xml-msdata''''>\r\n	<xs:element name=''''MyDataSet'''' msdata:IsDataSet=''''true''''>\r\n		<xs:complexType>\r\n			<xs:choice maxOccurs=''''unbounded''''>\r\n				<xs:element name=''''customers'''' >\r\n					<xs:complexType >\r\n						<xs:sequence>\r\n							<xs:element name=''''CustomerID'''' type=''''xs:integer'''' \r\n										 minOccurs=''''0'''' />\r\n							<xs:element name=''''CompanyName'''' type=''''xs:string'''' \r\n										 minOccurs=''''0'''' />\r\n							<xs:element name=''''Phone'''' type=''''xs:string'''' />\r\n						</xs:sequence>\r\n					</xs:complexType>\r\n				</xs:element>\r\n			</xs:choice>\r\n		</xs:complexType>\r\n	</xs:element>\r\n</xs:schema>''", span="837-859", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NamespaceSerializeDeserialize()", file="XmlNodeConverterTest.cs"];
m16_329 [label="XmlDocument doc = new XmlDocument()", span="861-861", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NamespaceSerializeDeserialize()", file="XmlNodeConverterTest.cs"];
m16_330 [label="doc.LoadXml(xml)", span="862-862", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NamespaceSerializeDeserialize()", file="XmlNodeConverterTest.cs"];
m16_331 [label="string jsonText = SerializeXmlNode(doc)", span="864-864", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NamespaceSerializeDeserialize()", file="XmlNodeConverterTest.cs"];
m16_335 [label="Assert.AreEqual(doc.InnerXml, deserializedDoc.InnerXml)", span="915-915", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NamespaceSerializeDeserialize()", file="XmlNodeConverterTest.cs"];
m16_332 [label="string expected = @''{\r\n  ''''?xml'''': {\r\n    ''''@version'''': ''''1.0'''',\r\n    ''''@encoding'''': ''''utf-8''''\r\n  },\r\n  ''''xs:schema'''': {\r\n    ''''@xs:id'''': ''''SomeID'''',\r\n    ''''@xmlns'''': '''''''',\r\n    ''''@xmlns:xs'''': ''''http://www.w3.org/2001/XMLSchema'''',\r\n    ''''@xmlns:msdata'''': ''''urn:schemas-microsoft-com:xml-msdata'''',\r\n    ''''xs:element'''': {\r\n      ''''@name'''': ''''MyDataSet'''',\r\n      ''''@msdata:IsDataSet'''': ''''true'''',\r\n      ''''xs:complexType'''': {\r\n        ''''xs:choice'''': {\r\n          ''''@maxOccurs'''': ''''unbounded'''',\r\n          ''''xs:element'''': {\r\n            ''''@name'''': ''''customers'''',\r\n            ''''xs:complexType'''': {\r\n              ''''xs:sequence'''': {\r\n                ''''xs:element'''': [\r\n                  {\r\n                    ''''@name'''': ''''CustomerID'''',\r\n                    ''''@type'''': ''''xs:integer'''',\r\n                    ''''@minOccurs'''': ''''0''''\r\n                  },\r\n                  {\r\n                    ''''@name'''': ''''CompanyName'''',\r\n                    ''''@type'''': ''''xs:string'''',\r\n                    ''''@minOccurs'''': ''''0''''\r\n                  },\r\n                  {\r\n                    ''''@name'''': ''''Phone'''',\r\n                    ''''@type'''': ''''xs:string''''\r\n                  }\r\n                ]\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}''", span="866-909", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NamespaceSerializeDeserialize()", file="XmlNodeConverterTest.cs"];
m16_333 [label="StringAssert.AreEqual(expected, jsonText)", span="911-911", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NamespaceSerializeDeserialize()", file="XmlNodeConverterTest.cs"];
m16_334 [label="XmlDocument deserializedDoc = (XmlDocument)DeserializeXmlNode(jsonText)", span="913-913", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NamespaceSerializeDeserialize()", file="XmlNodeConverterTest.cs"];
m16_336 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NamespaceSerializeDeserialize()", span="835-835", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.NamespaceSerializeDeserialize()", file="XmlNodeConverterTest.cs"];
m16_530 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArray()", span="1646-1646", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArray()", file="XmlNodeConverterTest.cs"];
m16_531 [label="string json = @''{\r\n  ''''$id'''': ''''1'''',\r\n  ''''$values'''': [\r\n    ''''1'''',\r\n    ''''2'''',\r\n    ''''3'''',\r\n    ''''4'''',\r\n    ''''5''''\r\n  ]\r\n}''", span="1648-1657", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArray()", file="XmlNodeConverterTest.cs"];
m16_532 [label="XmlNode node = JsonConvert.DeserializeXmlNode(json, ''root'')", span="1659-1659", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArray()", file="XmlNodeConverterTest.cs"];
m16_536 [label="StringAssert.AreEqual(json, newJson)", span="1673-1673", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArray()", file="XmlNodeConverterTest.cs"];
m16_533 [label="string xml = GetIndentedInnerXml(node)", span="1660-1660", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArray()", file="XmlNodeConverterTest.cs"];
m16_535 [label="string newJson = JsonConvert.SerializeXmlNode(node, Formatting.Indented, true)", span="1671-1671", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArray()", file="XmlNodeConverterTest.cs"];
m16_534 [label="StringAssert.AreEqual(@''<?xml version=''''1.0'''' encoding=''''utf-16''''?>\r\n<root xmlns:json=''''http://james.newtonking.com/projects/json'''' json:id=''''1''''>\r\n  <values xmlns=''''http://james.newtonking.com/projects/json''''>1</values>\r\n  <values xmlns=''''http://james.newtonking.com/projects/json''''>2</values>\r\n  <values xmlns=''''http://james.newtonking.com/projects/json''''>3</values>\r\n  <values xmlns=''''http://james.newtonking.com/projects/json''''>4</values>\r\n  <values xmlns=''''http://james.newtonking.com/projects/json''''>5</values>\r\n</root>'', xml)", span="1662-1669", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArray()", file="XmlNodeConverterTest.cs"];
m16_537 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArray()", span="1646-1646", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArray()", file="XmlNodeConverterTest.cs"];
m16_424 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesXmlDocument()", span="1201-1201", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesXmlDocument()", file="XmlNodeConverterTest.cs"];
m16_425 [label="string json = @''{''''count'''': 773840,''''photos'''': null}''", span="1203-1203", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesXmlDocument()", file="XmlNodeConverterTest.cs"];
m16_426 [label="ExceptionAssert.Throws<JsonSerializationException>(\r\n                () => { JsonConvert.DeserializeXmlNode(json); },\r\n                ''JSON root object has multiple properties. The root object must have a single property in order to create a valid XML document. Consider specifying a DeserializeRootElementName. Path 'photos', line 1, position 26.'')", span="1205-1207", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesXmlDocument()", file="XmlNodeConverterTest.cs"];
m16_427 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesXmlDocument()", span="1201-1201", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.MultipleRootPropertiesXmlDocument()", file="XmlNodeConverterTest.cs"];
m16_222 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeMultipleRootElements()", span="494-494", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeMultipleRootElements()", file="XmlNodeConverterTest.cs"];
m16_223 [label="string json = @''{\r\n    ''''Id'''': 1,\r\n     ''''Email'''': ''''james@example.com'''',\r\n     ''''Active'''': true,\r\n     ''''CreatedDate'''': ''''2013-01-20T00:00:00Z'''',\r\n     ''''Roles'''': [\r\n       ''''User'''',\r\n       ''''Admin''''\r\n     ],\r\n    ''''Team'''': {\r\n        ''''Id'''': 2,\r\n        ''''Name'''': ''''Software Developers'''',\r\n        ''''Description'''': ''''Creators of fine software products and services.''''\r\n    }\r\n}''", span="496-510", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeMultipleRootElements()", file="XmlNodeConverterTest.cs"];
m16_224 [label="ExceptionAssert.Throws<JsonSerializationException>(\r\n                () => { JsonConvert.DeserializeXmlNode(json); },\r\n                ''JSON root object has multiple properties. The root object must have a single property in order to create a valid XML document. Consider specifying a DeserializeRootElementName. Path 'Email', line 3, position 13.'')", span="511-513", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeMultipleRootElements()", file="XmlNodeConverterTest.cs"];
m16_225 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeMultipleRootElements()", span="494-494", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.DeserializeMultipleRootElements()", file="XmlNodeConverterTest.cs"];
m16_547 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayWithIdLast()", span="1709-1709", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayWithIdLast()", file="XmlNodeConverterTest.cs"];
m16_548 [label="string json = @''{\r\n  ''''$values'''': [\r\n    ''''1'''',\r\n    ''''2'''',\r\n    ''''3'''',\r\n    ''''4'''',\r\n    ''''5''''\r\n  ],\r\n  ''''$id'''': ''''1''''\r\n}''", span="1711-1720", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayWithIdLast()", file="XmlNodeConverterTest.cs"];
m16_549 [label="XmlNode node = JsonConvert.DeserializeXmlNode(json, ''root'')", span="1722-1722", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayWithIdLast()", file="XmlNodeConverterTest.cs"];
m16_550 [label="string xml = GetIndentedInnerXml(node)", span="1723-1723", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayWithIdLast()", file="XmlNodeConverterTest.cs"];
m16_552 [label="string newJson = JsonConvert.SerializeXmlNode(node, Formatting.Indented, true)", span="1734-1734", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayWithIdLast()", file="XmlNodeConverterTest.cs"];
m16_551 [label="StringAssert.AreEqual(@''<?xml version=''''1.0'''' encoding=''''utf-16''''?>\r\n<root xmlns:json=''''http://james.newtonking.com/projects/json'''' json:id=''''1''''>\r\n  <values xmlns=''''http://james.newtonking.com/projects/json''''>1</values>\r\n  <values xmlns=''''http://james.newtonking.com/projects/json''''>2</values>\r\n  <values xmlns=''''http://james.newtonking.com/projects/json''''>3</values>\r\n  <values xmlns=''''http://james.newtonking.com/projects/json''''>4</values>\r\n  <values xmlns=''''http://james.newtonking.com/projects/json''''>5</values>\r\n</root>'', xml)", span="1725-1732", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayWithIdLast()", file="XmlNodeConverterTest.cs"];
m16_553 [label="StringAssert.AreEqual(@''{\r\n  ''''$id'''': ''''1'''',\r\n  ''''$values'''': [\r\n    ''''1'''',\r\n    ''''2'''',\r\n    ''''3'''',\r\n    ''''4'''',\r\n    ''''5''''\r\n  ]\r\n}'', newJson)", span="1736-1745", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayWithIdLast()", file="XmlNodeConverterTest.cs"];
m16_554 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayWithIdLast()", span="1709-1709", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDeserializeMetadataArrayWithIdLast()", file="XmlNodeConverterTest.cs"];
m16_655 [label="Entry System.IO.MemoryStream.MemoryStream(byte[])", span="0-0", cluster="System.IO.MemoryStream.MemoryStream(byte[])", file="XmlNodeConverterTest.cs"];
m16_865 [label="Entry Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDocumentImplicitAttributeNamespace()", span="2939-2939", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDocumentImplicitAttributeNamespace()", file="XmlNodeConverterTest.cs"];
m16_866 [label="var original = new XDocument(new XElement(''{http://example.com}MyElement''))", span="2941-2941", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDocumentImplicitAttributeNamespace()", file="XmlNodeConverterTest.cs"];
m16_867 [label="Assert.AreEqual(@''<MyElement xmlns=''''http://example.com'''' />'', original.ToString())", span="2942-2942", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDocumentImplicitAttributeNamespace()", file="XmlNodeConverterTest.cs"];
m16_868 [label="var json = JsonConvert.SerializeObject(original)", span="2944-2944", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDocumentImplicitAttributeNamespace()", file="XmlNodeConverterTest.cs"];
m16_869 [label="Assert.AreEqual(@''{''''MyElement'''':{''''@xmlns'''':''''http://example.com''''}}'', json)", span="2945-2945", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDocumentImplicitAttributeNamespace()", file="XmlNodeConverterTest.cs"];
m16_870 [label="var deserialized = JsonConvert.DeserializeObject<XDocument>(json)", span="2947-2947", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDocumentImplicitAttributeNamespace()", file="XmlNodeConverterTest.cs"];
m16_871 [label="Assert.AreEqual(@''<MyElement xmlns=''''http://example.com'''' />'', deserialized.ToString())", span="2948-2948", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDocumentImplicitAttributeNamespace()", file="XmlNodeConverterTest.cs"];
m16_872 [label="Exit Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDocumentImplicitAttributeNamespace()", span="2939-2939", cluster="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest.SerializeDocumentImplicitAttributeNamespace()", file="XmlNodeConverterTest.cs"];
m16_656 [label="Entry System.Text.Encoding.GetBytes(string)", span="0-0", cluster="System.Text.Encoding.GetBytes(string)", file="XmlNodeConverterTest.cs"];
m16_582 [label="Entry Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", span="367-367", cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", file="XmlNodeConverterTest.cs"];
m16_894 [label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest", span="", file="XmlNodeConverterTest.cs"];
m16_895 [label=json, span="", file="XmlNodeConverterTest.cs"];
m16_896 [label=json, span="", file="XmlNodeConverterTest.cs"];
m16_897 [label=json, span="", file="XmlNodeConverterTest.cs"];
m16_898 [label=json, span="", file="XmlNodeConverterTest.cs"];
m16_899 [label=json, span="", file="XmlNodeConverterTest.cs"];
m16_900 [label=json, span="", file="XmlNodeConverterTest.cs"];
m0_20 -> m0_478  [key=0, style=solid];
m0_20 -> m0_479  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m0_20 -> m0_480  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m0_20 -> m0_483  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m0_20 -> m0_485  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m0_20 -> m0_487  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m0_20 -> m0_489  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m0_20 -> m0_491  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m0_20 -> m0_493  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m0_20 -> m0_495  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m0_20 -> m0_496  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m0_20 -> m0_3  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Type objectType"];
m0_20 -> m0_460  [key=3, color=darkorchid, style=bold, label="method methodReturn Newtonsoft.Json.Serialization.JsonContract CreateContract"];
m0_20 -> m0_64  [key=3, color=darkorchid, style=bold, label="method methodReturn Newtonsoft.Json.Serialization.JsonContract CreateContract"];
m0_20 -> m0_444  [key=3, color=darkorchid, style=bold, label="method methodReturn Newtonsoft.Json.Serialization.JsonContract CreateContract"];
m0_20 -> m0_419  [key=3, color=darkorchid, style=bold, label="method methodReturn Newtonsoft.Json.Serialization.JsonContract CreateContract"];
m0_20 -> m0_466  [key=3, color=darkorchid, style=bold, label="method methodReturn Newtonsoft.Json.Serialization.JsonContract CreateContract"];
m0_20 -> m0_472  [key=3, color=darkorchid, style=bold, label="method methodReturn Newtonsoft.Json.Serialization.JsonContract CreateContract"];
m0_478 -> m0_479  [key=0, style=solid];
m0_478 -> m0_480  [key=0, style=solid];
m0_478 -> m0_498  [key=2, style=dotted];
m0_479 -> m0_497  [key=0, style=solid];
m0_479 -> m0_460  [key=2, style=dotted];
m0_480 -> m0_481  [key=0, style=solid];
m0_480 -> m0_499  [key=2, style=dotted];
m0_480 -> m0_488  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_480 -> m0_490  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_480 -> m0_492  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_480 -> m0_494  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_483 -> m0_497  [key=0, style=solid];
m0_483 -> m0_64  [key=2, style=dotted];
m0_485 -> m0_497  [key=0, style=solid];
m0_485 -> m0_444  [key=2, style=dotted];
m0_487 -> m0_497  [key=0, style=solid];
m0_487 -> m0_419  [key=2, style=dotted];
m0_489 -> m0_497  [key=0, style=solid];
m0_489 -> m0_466  [key=2, style=dotted];
m0_491 -> m0_497  [key=0, style=solid];
m0_491 -> m0_419  [key=2, style=dotted];
m0_493 -> m0_497  [key=0, style=solid];
m0_493 -> m0_444  [key=2, style=dotted];
m0_495 -> m0_497  [key=0, style=solid];
m0_495 -> m0_472  [key=2, style=dotted];
m0_496 -> m0_497  [key=0, style=solid];
m0_496 -> m0_64  [key=2, style=dotted];
m0_481 -> m0_482  [key=0, style=solid];
m0_481 -> m0_106  [key=2, style=dotted];
m0_481 -> m0_484  [key=1, style=dashed, color=darkseagreen4, label=containerAttribute];
m0_481 -> m0_486  [key=1, style=dashed, color=darkseagreen4, label=containerAttribute];
m0_488 -> m0_489  [key=0, style=solid];
m0_488 -> m0_490  [key=0, style=solid];
m0_488 -> m0_500  [key=2, style=dotted];
m0_490 -> m0_491  [key=0, style=solid];
m0_490 -> m0_492  [key=0, style=solid];
m0_490 -> m0_501  [key=2, style=dotted];
m0_492 -> m0_493  [key=0, style=solid];
m0_492 -> m0_494  [key=0, style=solid];
m0_492 -> m0_162  [key=2, style=dotted];
m0_494 -> m0_495  [key=0, style=solid];
m0_494 -> m0_496  [key=0, style=solid];
m0_494 -> m0_502  [key=2, style=dotted];
m0_482 -> m0_483  [key=0, style=solid];
m0_482 -> m0_484  [key=0, style=solid];
m0_484 -> m0_485  [key=0, style=solid];
m0_484 -> m0_486  [key=0, style=solid];
m0_486 -> m0_487  [key=0, style=solid];
m0_486 -> m0_488  [key=0, style=solid];
m0_497 -> m0_20  [key=0, style=bold, color=blue];
m0_110 -> m0_276  [key=0, style=solid];
m0_110 -> m0_277  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.ConstructorInfo"];
m0_110 -> m0_279  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonPropertyCollection"];
m0_110 -> m0_82  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Reflection.ConstructorInfo constructor"];
m0_110 -> m0_88  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Reflection.ConstructorInfo constructor"];
m0_110 -> m0_93  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Reflection.ConstructorInfo constructor"];
m0_276 -> m0_277  [key=0, style=solid];
m0_276 -> m0_269  [key=2, style=dotted];
m0_276 -> m0_278  [key=1, style=dashed, color=darkseagreen4, label=constructorParameters];
m0_277 -> m0_278  [key=0, style=solid];
m0_277 -> m0_286  [key=2, style=dotted];
m0_277 -> m0_283  [key=1, style=dashed, color=darkseagreen4, label=parameterCollection];
m0_277 -> m0_284  [key=1, style=dashed, color=darkseagreen4, label=parameterCollection];
m0_279 -> m0_280  [key=0, style=solid];
m0_279 -> m0_270  [key=2, style=dotted];
m0_279 -> m0_281  [key=1, style=dashed, color=darkseagreen4, label=matchingMemberProperty];
m0_278 -> m0_279  [key=0, style=solid];
m0_278 -> m0_284  [key=0, style=solid];
m0_278 -> m0_280  [key=1, style=dashed, color=darkseagreen4, label=parameterInfo];
m0_278 -> m0_281  [key=1, style=dashed, color=darkseagreen4, label=parameterInfo];
m0_283 -> m0_278  [key=0, style=solid];
m0_283 -> m0_288  [key=2, style=dotted];
m0_284 -> m0_285  [key=0, style=solid];
m0_280 -> m0_281  [key=0, style=solid];
m0_280 -> m0_278  [key=0, style=solid];
m0_281 -> m0_282  [key=0, style=solid];
m0_281 -> m0_287  [key=2, style=dotted];
m0_281 -> m0_283  [key=1, style=dashed, color=darkseagreen4, label=property];
m0_282 -> m0_283  [key=0, style=solid];
m0_282 -> m0_278  [key=0, style=solid];
m0_285 -> m0_110  [key=0, style=bold, color=blue];
m0_0 -> m0_1  [key=0, style=solid];
m0_1 -> m0_2  [key=0, style=solid];
m0_2 -> m0_0  [key=0, style=bold, color=blue];
m0_342 -> m0_343  [key=0, style=solid];
m0_342 -> m0_348  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m0_342 -> m0_350  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonContract"];
m0_342 -> m0_352  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonContract"];
m0_342 -> m0_354  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonContract"];
m0_342 -> m0_356  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonContract"];
m0_342 -> m0_358  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonContract"];
m0_342 -> m0_103  [key=3, color=darkorchid, style=bold, label="Parameter variable Newtonsoft.Json.Serialization.JsonContract contract"];
m0_343 -> m0_344  [key=0, style=solid];
m0_348 -> m0_349  [key=0, style=solid];
m0_348 -> m0_360  [key=2, style=dotted];
m0_348 -> m0_350  [key=1, style=dashed, color=darkseagreen4, label=onSerializing];
m0_348 -> m0_351  [key=1, style=dashed, color=darkseagreen4, label=onSerialized];
m0_348 -> m0_352  [key=1, style=dashed, color=darkseagreen4, label=onSerialized];
m0_348 -> m0_353  [key=1, style=dashed, color=darkseagreen4, label=onDeserializing];
m0_348 -> m0_354  [key=1, style=dashed, color=darkseagreen4, label=onDeserializing];
m0_348 -> m0_355  [key=1, style=dashed, color=darkseagreen4, label=onDeserialized];
m0_348 -> m0_356  [key=1, style=dashed, color=darkseagreen4, label=onDeserialized];
m0_348 -> m0_357  [key=1, style=dashed, color=darkseagreen4, label=onError];
m0_348 -> m0_358  [key=1, style=dashed, color=darkseagreen4, label=onError];
m0_350 -> m0_351  [key=0, style=solid];
m0_350 -> m0_105  [key=2, style=dotted];
m0_352 -> m0_353  [key=0, style=solid];
m0_352 -> m0_105  [key=2, style=dotted];
m0_354 -> m0_355  [key=0, style=solid];
m0_354 -> m0_105  [key=2, style=dotted];
m0_356 -> m0_357  [key=0, style=solid];
m0_356 -> m0_105  [key=2, style=dotted];
m0_358 -> m0_359  [key=0, style=solid];
m0_358 -> m0_105  [key=2, style=dotted];
m0_344 -> m0_345  [key=0, style=solid];
m0_345 -> m0_346  [key=0, style=solid];
m0_346 -> m0_347  [key=0, style=solid];
m0_347 -> m0_348  [key=0, style=solid];
m0_349 -> m0_350  [key=0, style=solid];
m0_349 -> m0_351  [key=0, style=solid];
m0_351 -> m0_352  [key=0, style=solid];
m0_351 -> m0_353  [key=0, style=solid];
m0_353 -> m0_354  [key=0, style=solid];
m0_353 -> m0_355  [key=0, style=solid];
m0_355 -> m0_356  [key=0, style=solid];
m0_355 -> m0_357  [key=0, style=solid];
m0_357 -> m0_358  [key=0, style=solid];
m0_357 -> m0_359  [key=0, style=solid];
m0_359 -> m0_342  [key=0, style=bold, color=blue];
m0_589 -> m0_669  [key=0, style=solid];
m0_589 -> m0_671  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.MemberInfo"];
m0_589 -> m0_675  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonProperty"];
m0_589 -> m0_676  [key=1, style=dashed, color=darkseagreen4, label=bool];
m0_589 -> m0_677  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonProperty"];
m0_589 -> m0_571  [key=3, color=darkorchid, style=bold, label="Parameter variable Newtonsoft.Json.Serialization.JsonProperty property"];
m0_589 -> m0_553  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Reflection.MemberInfo member"];
m0_589 -> m0_576  [key=3, color=darkorchid, style=bold, label="Parameter variable bool allowNonPublicAccess"];
m0_669 -> m0_670  [key=0, style=solid];
m0_669 -> m0_679  [key=2, style=dotted];
m0_669 -> m0_672  [key=1, style=dashed, color=darkseagreen4, label=specifiedMember];
m0_669 -> m0_674  [key=1, style=dashed, color=darkseagreen4, label=specifiedMember];
m0_669 -> m0_676  [key=1, style=dashed, color=darkseagreen4, label=specifiedMember];
m0_669 -> m0_677  [key=1, style=dashed, color=darkseagreen4, label=specifiedMember];
m0_671 -> m0_672  [key=0, style=solid];
m0_671 -> m0_680  [key=2, style=dotted];
m0_671 -> m0_674  [key=1, style=dashed, color=darkseagreen4, label=specifiedMember];
m0_671 -> m0_676  [key=1, style=dashed, color=darkseagreen4, label=specifiedMember];
m0_671 -> m0_677  [key=1, style=dashed, color=darkseagreen4, label=specifiedMember];
m0_675 -> m0_676  [key=0, style=solid];
m0_675 -> m0_682  [key=1, style=dashed, color=darkseagreen4, label=object];
m0_676 -> m0_677  [key=0, style=solid];
m0_676 -> m0_678  [key=0, style=solid];
m0_676 -> m0_196  [key=2, style=dotted];
m0_677 -> m0_678  [key=0, style=solid];
m0_677 -> m0_197  [key=2, style=dotted];
m0_670 -> m0_671  [key=0, style=solid];
m0_670 -> m0_672  [key=0, style=solid];
m0_672 -> m0_673  [key=0, style=solid];
m0_672 -> m0_674  [key=0, style=solid];
m0_672 -> m0_192  [key=2, style=dotted];
m0_674 -> m0_675  [key=0, style=solid];
m0_674 -> m0_195  [key=2, style=dotted];
m0_674 -> m0_682  [key=1, style=dashed, color=darkseagreen4, label=specifiedPropertyGet];
m0_673 -> m0_678  [key=0, style=solid];
m0_678 -> m0_589  [key=0, style=bold, color=blue];
m0_287 -> m0_297  [key=0, style=solid];
m0_287 -> m0_298  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.ParameterInfo"];
m0_287 -> m0_299  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.ParameterInfo"];
m0_287 -> m0_301  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.ParameterInfo"];
m0_287 -> m0_304  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonProperty"];
m0_287 -> m0_305  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonProperty"];
m0_287 -> m0_306  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonProperty"];
m0_287 -> m0_307  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonProperty"];
m0_287 -> m0_308  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonProperty"];
m0_287 -> m0_309  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonProperty"];
m0_287 -> m0_310  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonProperty"];
m0_287 -> m0_311  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonProperty"];
m0_287 -> m0_312  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonProperty"];
m0_287 -> m0_313  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonProperty"];
m0_287 -> m0_314  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonProperty"];
m0_287 -> m0_315  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonProperty"];
m0_287 -> m0_316  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonProperty"];
m0_287 -> m0_279  [key=3, color=darkorchid, style=bold, label="Parameter variable Newtonsoft.Json.Serialization.JsonProperty matchingMemberProperty"];
m0_287 -> m0_278  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Reflection.ParameterInfo parameterInfo"];
m0_297 -> m0_298  [key=0, style=solid];
m0_297 -> m0_319  [key=2, style=dotted];
m0_297 -> m0_299  [key=1, style=dashed, color=darkseagreen4, label=property];
m0_297 -> m0_301  [key=1, style=dashed, color=darkseagreen4, label=property];
m0_297 -> m0_302  [key=1, style=dashed, color=darkseagreen4, label=property];
m0_297 -> m0_303  [key=1, style=dashed, color=darkseagreen4, label=property];
m0_297 -> m0_305  [key=1, style=dashed, color=darkseagreen4, label=property];
m0_297 -> m0_306  [key=1, style=dashed, color=darkseagreen4, label=property];
m0_297 -> m0_307  [key=1, style=dashed, color=darkseagreen4, label=property];
m0_297 -> m0_308  [key=1, style=dashed, color=darkseagreen4, label=property];
m0_297 -> m0_309  [key=1, style=dashed, color=darkseagreen4, label=property];
m0_297 -> m0_310  [key=1, style=dashed, color=darkseagreen4, label=property];
m0_297 -> m0_311  [key=1, style=dashed, color=darkseagreen4, label=property];
m0_297 -> m0_312  [key=1, style=dashed, color=darkseagreen4, label=property];
m0_297 -> m0_313  [key=1, style=dashed, color=darkseagreen4, label=property];
m0_297 -> m0_314  [key=1, style=dashed, color=darkseagreen4, label=property];
m0_297 -> m0_315  [key=1, style=dashed, color=darkseagreen4, label=property];
m0_297 -> m0_316  [key=1, style=dashed, color=darkseagreen4, label=property];
m0_297 -> m0_317  [key=1, style=dashed, color=darkseagreen4, label=property];
m0_298 -> m0_299  [key=0, style=solid];
m0_299 -> m0_300  [key=0, style=solid];
m0_299 -> m0_320  [key=2, style=dotted];
m0_301 -> m0_302  [key=0, style=solid];
m0_301 -> m0_321  [key=2, style=dotted];
m0_304 -> m0_305  [key=0, style=solid];
m0_304 -> m0_317  [key=0, style=solid];
m0_305 -> m0_306  [key=0, style=solid];
m0_306 -> m0_307  [key=0, style=solid];
m0_307 -> m0_308  [key=0, style=solid];
m0_308 -> m0_309  [key=0, style=solid];
m0_308 -> m0_310  [key=0, style=solid];
m0_309 -> m0_310  [key=0, style=solid];
m0_310 -> m0_311  [key=0, style=solid];
m0_311 -> m0_312  [key=0, style=solid];
m0_312 -> m0_313  [key=0, style=solid];
m0_313 -> m0_314  [key=0, style=solid];
m0_314 -> m0_315  [key=0, style=solid];
m0_315 -> m0_316  [key=0, style=solid];
m0_316 -> m0_317  [key=0, style=solid];
m0_302 -> m0_303  [key=0, style=solid];
m0_303 -> m0_304  [key=0, style=solid];
m0_317 -> m0_318  [key=0, style=solid];
m0_300 -> m0_301  [key=0, style=solid];
m0_318 -> m0_287  [key=0, style=bold, color=blue];
m0_103 -> m0_329  [key=0, style=solid];
m0_103 -> m0_331  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonContract"];
m0_103 -> m0_332  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonContract"];
m0_103 -> m0_333  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonContract"];
m0_103 -> m0_334  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonContract"];
m0_103 -> m0_335  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonContract"];
m0_103 -> m0_336  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonContract"];
m0_103 -> m0_337  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonContract"];
m0_103 -> m0_65  [key=3, color=darkorchid, style=bold, label="Parameter variable Newtonsoft.Json.Serialization.JsonContract contract"];
m0_103 -> m0_420  [key=3, color=darkorchid, style=bold, label="Parameter variable Newtonsoft.Json.Serialization.JsonContract contract"];
m0_103 -> m0_445  [key=3, color=darkorchid, style=bold, label="Parameter variable Newtonsoft.Json.Serialization.JsonContract contract"];
m0_103 -> m0_461  [key=3, color=darkorchid, style=bold, label="Parameter variable Newtonsoft.Json.Serialization.JsonContract contract"];
m0_103 -> m0_467  [key=3, color=darkorchid, style=bold, label="Parameter variable Newtonsoft.Json.Serialization.JsonContract contract"];
m0_103 -> m0_473  [key=3, color=darkorchid, style=bold, label="Parameter variable Newtonsoft.Json.Serialization.JsonContract contract"];
m0_329 -> m0_330  [key=0, style=solid];
m0_329 -> m0_106  [key=2, style=dotted];
m0_329 -> m0_331  [key=1, style=dashed, color=darkseagreen4, label=containerAttribute];
m0_331 -> m0_332  [key=0, style=solid];
m0_332 -> m0_333  [key=0, style=solid];
m0_332 -> m0_322  [key=2, style=dotted];
m0_333 -> m0_334  [key=0, style=solid];
m0_333 -> m0_339  [key=2, style=dotted];
m0_334 -> m0_335  [key=0, style=solid];
m0_334 -> m0_337  [key=0, style=solid];
m0_334 -> m0_340  [key=2, style=dotted];
m0_334 -> m0_112  [key=2, style=dotted];
m0_335 -> m0_336  [key=0, style=solid];
m0_335 -> m0_326  [key=2, style=dotted];
m0_336 -> m0_337  [key=0, style=solid];
m0_336 -> m0_112  [key=2, style=dotted];
m0_336 -> m0_341  [key=2, style=dotted];
m0_337 -> m0_338  [key=0, style=solid];
m0_337 -> m0_342  [key=2, style=dotted];
m0_330 -> m0_331  [key=0, style=solid];
m0_330 -> m0_332  [key=0, style=solid];
m0_338 -> m0_103  [key=0, style=bold, color=blue];
m0_113 -> m0_255  [key=0, style=solid];
m0_113 -> m0_263  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonPropertyCollection"];
m0_113 -> m0_71  [key=3, color=darkorchid, style=bold, label="method methodReturn System.Reflection.ConstructorInfo GetImmutableConstructor"];
m0_113 -> m0_258  [key=3, color=darkorchid, style=bold, label="method methodReturn System.Reflection.ConstructorInfo GetImmutableConstructor"];
m0_255 -> m0_256  [key=0, style=solid];
m0_255 -> m0_201  [key=2, style=dotted];
m0_263 -> m0_264  [key=0, style=solid];
m0_263 -> m0_270  [key=2, style=dotted];
m0_256 -> m0_257  [key=0, style=solid];
m0_256 -> m0_249  [key=2, style=dotted];
m0_256 -> m0_258  [key=1, style=dashed, color=darkseagreen4, label=en];
m0_256 -> m0_259  [key=1, style=dashed, color=darkseagreen4, label=en];
m0_257 -> m0_258  [key=0, style=solid];
m0_257 -> m0_267  [key=0, style=solid];
m0_257 -> m0_250  [key=2, style=dotted];
m0_258 -> m0_259  [key=0, style=solid];
m0_258 -> m0_260  [key=1, style=dashed, color=darkseagreen4, label=constructor];
m0_258 -> m0_266  [key=1, style=dashed, color=darkseagreen4, label=constructor];
m0_259 -> m0_260  [key=0, style=solid];
m0_259 -> m0_267  [key=0, style=solid];
m0_259 -> m0_250  [key=2, style=dotted];
m0_267 -> m0_268  [key=0, style=solid];
m0_260 -> m0_261  [key=0, style=solid];
m0_260 -> m0_269  [key=2, style=dotted];
m0_260 -> m0_262  [key=1, style=dashed, color=darkseagreen4, label=parameters];
m0_266 -> m0_268  [key=0, style=solid];
m0_261 -> m0_262  [key=0, style=solid];
m0_261 -> m0_267  [key=0, style=solid];
m0_262 -> m0_263  [key=0, style=solid];
m0_262 -> m0_266  [key=0, style=solid];
m0_264 -> m0_265  [key=0, style=solid];
m0_264 -> m0_262  [key=0, style=solid];
m0_265 -> m0_268  [key=0, style=solid];
m0_268 -> m0_113  [key=0, style=bold, color=blue];
m0_64 -> m0_65  [key=0, style=solid];
m0_64 -> m0_20  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Type objectType"];
m0_65 -> m0_66  [key=0, style=solid];
m0_65 -> m0_102  [key=2, style=dotted];
m0_65 -> m0_69  [key=1, style=dashed, color=darkseagreen4, label=contract];
m0_65 -> m0_70  [key=1, style=dashed, color=darkseagreen4, label=contract];
m0_65 -> m0_72  [key=1, style=dashed, color=darkseagreen4, label=contract];
m0_65 -> m0_74  [key=1, style=dashed, color=darkseagreen4, label=contract];
m0_65 -> m0_80  [key=1, style=dashed, color=darkseagreen4, label=contract];
m0_65 -> m0_81  [key=1, style=dashed, color=darkseagreen4, label=contract];
m0_65 -> m0_82  [key=1, style=dashed, color=darkseagreen4, label=contract];
m0_65 -> m0_84  [key=1, style=dashed, color=darkseagreen4, label=contract];
m0_65 -> m0_85  [key=1, style=dashed, color=darkseagreen4, label=contract];
m0_65 -> m0_86  [key=1, style=dashed, color=darkseagreen4, label=contract];
m0_65 -> m0_87  [key=1, style=dashed, color=darkseagreen4, label=contract];
m0_65 -> m0_88  [key=1, style=dashed, color=darkseagreen4, label=contract];
m0_65 -> m0_90  [key=1, style=dashed, color=darkseagreen4, label=contract];
m0_65 -> m0_91  [key=1, style=dashed, color=darkseagreen4, label=contract];
m0_65 -> m0_92  [key=1, style=dashed, color=darkseagreen4, label=contract];
m0_65 -> m0_93  [key=1, style=dashed, color=darkseagreen4, label=contract];
m0_65 -> m0_95  [key=1, style=dashed, color=darkseagreen4, label=contract];
m0_65 -> m0_96  [key=1, style=dashed, color=darkseagreen4, label=contract];
m0_65 -> m0_97  [key=1, style=dashed, color=darkseagreen4, label=contract];
m0_65 -> m0_99  [key=1, style=dashed, color=darkseagreen4, label=contract];
m0_65 -> m0_100  [key=1, style=dashed, color=darkseagreen4, label=contract];
m0_66 -> m0_67  [key=0, style=solid];
m0_66 -> m0_103  [key=2, style=dotted];
m0_69 -> m0_70  [key=0, style=solid];
m0_69 -> m0_47  [key=2, style=dotted];
m0_70 -> m0_71  [key=0, style=solid];
m0_70 -> m0_104  [key=2, style=dotted];
m0_70 -> m0_105  [key=2, style=dotted];
m0_72 -> m0_73  [key=0, style=solid];
m0_72 -> m0_106  [key=2, style=dotted];
m0_72 -> m0_74  [key=1, style=dashed, color=darkseagreen4, label=attribute];
m0_72 -> m0_75  [key=1, style=dashed, color=darkseagreen4, label=attribute];
m0_72 -> m0_76  [key=1, style=dashed, color=darkseagreen4, label=attribute];
m0_74 -> m0_75  [key=0, style=solid];
m0_80 -> m0_81  [key=0, style=solid];
m0_81 -> m0_82  [key=0, style=solid];
m0_81 -> m0_97  [key=0, style=solid];
m0_82 -> m0_83  [key=0, style=solid];
m0_82 -> m0_108  [key=2, style=dotted];
m0_82 -> m0_84  [key=1, style=dashed, color=darkseagreen4, label=overrideConstructor];
m0_82 -> m0_85  [key=1, style=dashed, color=darkseagreen4, label=overrideConstructor];
m0_84 -> m0_85  [key=0, style=solid];
m0_84 -> m0_109  [key=2, style=dotted];
m0_85 -> m0_97  [key=0, style=solid];
m0_85 -> m0_110  [key=2, style=dotted];
m0_85 -> m0_105  [key=2, style=dotted];
m0_86 -> m0_87  [key=0, style=solid];
m0_86 -> m0_97  [key=0, style=solid];
m0_87 -> m0_88  [key=0, style=solid];
m0_87 -> m0_92  [key=0, style=solid];
m0_88 -> m0_89  [key=0, style=solid];
m0_88 -> m0_111  [key=2, style=dotted];
m0_88 -> m0_90  [key=1, style=dashed, color=darkseagreen4, label=constructor];
m0_88 -> m0_91  [key=1, style=dashed, color=darkseagreen4, label=constructor];
m0_90 -> m0_91  [key=0, style=solid];
m0_90 -> m0_109  [key=2, style=dotted];
m0_91 -> m0_97  [key=0, style=solid];
m0_91 -> m0_110  [key=2, style=dotted];
m0_91 -> m0_105  [key=2, style=dotted];
m0_92 -> m0_93  [key=0, style=solid];
m0_92 -> m0_97  [key=0, style=solid];
m0_92 -> m0_112  [key=2, style=dotted];
m0_93 -> m0_94  [key=0, style=solid];
m0_93 -> m0_113  [key=2, style=dotted];
m0_93 -> m0_95  [key=1, style=dashed, color=darkseagreen4, label=constructor];
m0_93 -> m0_96  [key=1, style=dashed, color=darkseagreen4, label=constructor];
m0_95 -> m0_96  [key=0, style=solid];
m0_95 -> m0_109  [key=2, style=dotted];
m0_96 -> m0_97  [key=0, style=solid];
m0_96 -> m0_110  [key=2, style=dotted];
m0_96 -> m0_105  [key=2, style=dotted];
m0_97 -> m0_98  [key=0, style=solid];
m0_97 -> m0_114  [key=2, style=dotted];
m0_97 -> m0_99  [key=1, style=dashed, color=darkseagreen4, label=extensionDataMember];
m0_99 -> m0_100  [key=0, style=solid];
m0_99 -> m0_115  [key=2, style=dotted];
m0_100 -> m0_101  [key=0, style=solid];
m0_67 -> m0_68  [key=0, style=solid];
m0_68 -> m0_69  [key=0, style=solid];
m0_71 -> m0_72  [key=0, style=solid];
m0_71 -> m0_78  [key=1, style=dashed, color=darkseagreen4, label=extensionDataNameResolver];
m0_71 -> m0_80  [key=1, style=dashed, color=darkseagreen4, label=extensionDataNameResolver];
m0_71 -> m0_71  [key=3, color=darkorchid, style=bold, label="Local variable Newtonsoft.Json.Serialization.Func<string, string> extensionDataNameResolver"];
m0_71 -> m0_77  [key=3, color=darkorchid, style=bold, label="Local variable Newtonsoft.Json.Serialization.Func<string, string> extensionDataNameResolver"];
m0_71 -> m0_688  [key=3, color=darkorchid, style=bold, label="Local variable Newtonsoft.Json.Serialization.Func<string, string> extensionDataNameResolver"];
m0_78 -> m0_79  [key=0, style=solid];
m0_78 -> m0_80  [key=0, style=solid];
m0_73 -> m0_74  [key=0, style=solid];
m0_73 -> m0_78  [key=0, style=solid];
m0_75 -> m0_76  [key=0, style=solid];
m0_75 -> m0_78  [key=0, style=solid];
m0_76 -> m0_77  [key=0, style=solid];
m0_76 -> m0_107  [key=2, style=dotted];
m0_76 -> m0_117  [key=1, style=dashed, color=darkseagreen4, label=namingStrategy];
m0_77 -> m0_78  [key=0, style=solid];
m0_77 -> m0_117  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_77 -> m0_80  [key=1, style=dashed, color=darkseagreen4, label=extensionDataNameResolver];
m0_79 -> m0_80  [key=0, style=solid];
m0_83 -> m0_84  [key=0, style=solid];
m0_83 -> m0_86  [key=0, style=solid];
m0_89 -> m0_90  [key=0, style=solid];
m0_89 -> m0_97  [key=0, style=solid];
m0_94 -> m0_95  [key=0, style=solid];
m0_94 -> m0_97  [key=0, style=solid];
m0_98 -> m0_99  [key=0, style=solid];
m0_98 -> m0_100  [key=0, style=solid];
m0_101 -> m0_64  [key=0, style=bold, color=blue];
m0_466 -> m0_467  [key=0, style=solid];
m0_466 -> m0_20  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Type objectType"];
m0_467 -> m0_468  [key=0, style=solid];
m0_467 -> m0_471  [key=2, style=dotted];
m0_467 -> m0_469  [key=1, style=dashed, color=darkseagreen4, label=contract];
m0_468 -> m0_469  [key=0, style=solid];
m0_468 -> m0_103  [key=2, style=dotted];
m0_469 -> m0_470  [key=0, style=solid];
m0_470 -> m0_466  [key=0, style=bold, color=blue];
m0_23 -> m0_24  [key=0, style=solid];
m0_23 -> m0_26  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m0_23 -> m0_27  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m0_23 -> m0_30  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m0_23 -> m0_28  [key=3, color=darkorchid, style=bold, label="method methodReturn System.Collections.Generic.List<System.Reflection.MemberInfo> GetSerializableMembers"];
m0_23 -> m0_104  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Type objectType"];
m0_24 -> m0_25  [key=0, style=solid];
m0_26 -> m0_27  [key=0, style=solid];
m0_26 -> m0_47  [key=2, style=dotted];
m0_26 -> m0_29  [key=1, style=dashed, color=darkseagreen4, label=memberSerialization];
m0_26 -> m0_39  [key=1, style=dashed, color=darkseagreen4, label=memberSerialization];
m0_27 -> m0_28  [key=0, style=solid];
m0_27 -> m0_48  [key=2, style=dotted];
m0_27 -> m0_49  [key=2, style=dotted];
m0_27 -> m0_57  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_27 -> m0_31  [key=1, style=dashed, color=darkseagreen4, label=allMembers];
m0_27 -> m0_41  [key=1, style=dashed, color=darkseagreen4, label=allMembers];
m0_30 -> m0_31  [key=0, style=solid];
m0_30 -> m0_48  [key=2, style=dotted];
m0_30 -> m0_49  [key=2, style=dotted];
m0_30 -> m0_51  [key=2, style=dotted];
m0_30 -> m0_61  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_30 -> m0_33  [key=1, style=dashed, color=darkseagreen4, label=defaultMembers];
m0_25 -> m0_26  [key=0, style=solid];
m0_29 -> m0_30  [key=0, style=solid];
m0_29 -> m0_41  [key=0, style=solid];
m0_39 -> m0_40  [key=0, style=solid];
m0_39 -> m0_31  [key=0, style=solid];
m0_39 -> m0_56  [key=2, style=dotted];
m0_28 -> m0_29  [key=0, style=solid];
m0_28 -> m0_50  [key=2, style=dotted];
m0_28 -> m0_34  [key=1, style=dashed, color=darkseagreen4, label=serializableMembers];
m0_28 -> m0_36  [key=1, style=dashed, color=darkseagreen4, label=serializableMembers];
m0_28 -> m0_38  [key=1, style=dashed, color=darkseagreen4, label=serializableMembers];
m0_28 -> m0_40  [key=1, style=dashed, color=darkseagreen4, label=serializableMembers];
m0_28 -> m0_44  [key=1, style=dashed, color=darkseagreen4, label=serializableMembers];
m0_28 -> m0_45  [key=1, style=dashed, color=darkseagreen4, label=serializableMembers];
m0_31 -> m0_32  [key=0, style=solid];
m0_31 -> m0_45  [key=0, style=solid];
m0_31 -> m0_33  [key=1, style=dashed, color=darkseagreen4, label=member];
m0_31 -> m0_34  [key=1, style=dashed, color=darkseagreen4, label=member];
m0_31 -> m0_35  [key=1, style=dashed, color=darkseagreen4, label=member];
m0_31 -> m0_36  [key=1, style=dashed, color=darkseagreen4, label=member];
m0_31 -> m0_37  [key=1, style=dashed, color=darkseagreen4, label=member];
m0_31 -> m0_38  [key=1, style=dashed, color=darkseagreen4, label=member];
m0_31 -> m0_39  [key=1, style=dashed, color=darkseagreen4, label=member];
m0_31 -> m0_40  [key=1, style=dashed, color=darkseagreen4, label=member];
m0_41 -> m0_42  [key=0, style=solid];
m0_41 -> m0_45  [key=0, style=solid];
m0_41 -> m0_44  [key=1, style=dashed, color=darkseagreen4, label=member];
m0_34 -> m0_31  [key=0, style=solid];
m0_34 -> m0_54  [key=2, style=dotted];
m0_36 -> m0_31  [key=0, style=solid];
m0_36 -> m0_54  [key=2, style=dotted];
m0_38 -> m0_31  [key=0, style=solid];
m0_38 -> m0_54  [key=2, style=dotted];
m0_40 -> m0_31  [key=0, style=solid];
m0_40 -> m0_54  [key=2, style=dotted];
m0_44 -> m0_41  [key=0, style=solid];
m0_44 -> m0_54  [key=2, style=dotted];
m0_45 -> m0_46  [key=0, style=solid];
m0_33 -> m0_34  [key=0, style=solid];
m0_33 -> m0_35  [key=0, style=solid];
m0_33 -> m0_53  [key=2, style=dotted];
m0_32 -> m0_33  [key=0, style=solid];
m0_32 -> m0_31  [key=0, style=solid];
m0_32 -> m0_52  [key=2, style=dotted];
m0_35 -> m0_36  [key=0, style=solid];
m0_35 -> m0_37  [key=0, style=solid];
m0_35 -> m0_55  [key=2, style=dotted];
m0_37 -> m0_38  [key=0, style=solid];
m0_37 -> m0_39  [key=0, style=solid];
m0_37 -> m0_55  [key=2, style=dotted];
m0_42 -> m0_43  [key=0, style=solid];
m0_43 -> m0_44  [key=0, style=solid];
m0_43 -> m0_41  [key=0, style=solid];
m0_46 -> m0_23  [key=0, style=bold, color=blue];
m0_114 -> m0_120  [key=0, style=solid];
m0_114 -> m0_121  [key=3, color=darkorchid, style=bold, label="method methodReturn System.Reflection.MemberInfo GetExtensionDataMemberForType"];
m0_120 -> m0_121  [key=0, style=solid];
m0_120 -> m0_124  [key=2, style=dotted];
m0_120 -> m0_125  [key=2, style=dotted];
m0_120 -> m0_127  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_120 -> m0_120  [key=3, color=darkorchid, style=bold, label="method methodReturn System.Collections.Generic.IList<System.Reflection.MemberInfo> "];
m0_121 -> m0_122  [key=0, style=solid];
m0_121 -> m0_126  [key=2, style=dotted];
m0_121 -> m0_136  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_121 -> m0_121  [key=3, color=darkorchid, style=bold, label="method methodReturn bool "];
m0_122 -> m0_123  [key=0, style=solid];
m0_123 -> m0_114  [key=0, style=bold, color=blue];
m0_111 -> m0_271  [key=0, style=solid];
m0_111 -> m0_71  [key=3, color=darkorchid, style=bold, label="method methodReturn System.Reflection.ConstructorInfo GetParameterizedConstructor"];
m0_271 -> m0_272  [key=0, style=solid];
m0_271 -> m0_248  [key=2, style=dotted];
m0_271 -> m0_273  [key=1, style=dashed, color=darkseagreen4, label=constructors];
m0_272 -> m0_273  [key=0, style=solid];
m0_272 -> m0_274  [key=0, style=solid];
m0_273 -> m0_275  [key=0, style=solid];
m0_274 -> m0_275  [key=0, style=solid];
m0_275 -> m0_111  [key=0, style=bold, color=blue];
m0_3 -> m0_4  [key=0, style=solid];
m0_3 -> m0_5  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m0_3 -> m0_8  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m0_3 -> m0_9  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m0_3 -> m0_13  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m0_3 -> m0_6  [key=3, color=darkorchid, style=bold, label="method methodReturn Newtonsoft.Json.Serialization.JsonContract ResolveContract"];
m0_4 -> m0_5  [key=0, style=solid];
m0_4 -> m0_6  [key=0, style=solid];
m0_5 -> m0_16  [key=0, style=solid];
m0_5 -> m0_17  [key=2, style=dotted];
m0_5 -> m0_18  [key=2, style=dotted];
m0_8 -> m0_9  [key=0, style=solid];
m0_8 -> m0_15  [key=0, style=solid];
m0_8 -> m0_19  [key=2, style=dotted];
m0_9 -> m0_10  [key=0, style=solid];
m0_9 -> m0_20  [key=2, style=dotted];
m0_9 -> m0_13  [key=1, style=dashed, color=darkseagreen4, label=contract];
m0_9 -> m0_15  [key=1, style=dashed, color=darkseagreen4, label=contract];
m0_13 -> m0_14  [key=0, style=solid];
m0_6 -> m0_7  [key=0, style=solid];
m0_6 -> m0_20  [key=3, color=darkorchid, style=bold, label="Local variable Newtonsoft.Json.Serialization.JsonContract contract"];
m0_7 -> m0_8  [key=0, style=solid];
m0_15 -> m0_16  [key=0, style=solid];
m0_10 -> m0_11  [key=0, style=solid];
m0_11 -> m0_12  [key=0, style=solid];
m0_12 -> m0_13  [key=0, style=solid];
m0_12 -> m0_21  [key=2, style=dotted];
m0_12 -> m0_22  [key=2, style=dotted];
m0_12 -> m0_14  [key=1, style=dashed, color=darkseagreen4, label=updatedCache];
m0_14 -> m0_15  [key=0, style=solid];
m0_16 -> m0_3  [key=0, style=bold, color=blue];
m0_419 -> m0_420  [key=0, style=solid];
m0_419 -> m0_422  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m0_419 -> m0_20  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Type objectType"];
m0_420 -> m0_421  [key=0, style=solid];
m0_420 -> m0_439  [key=2, style=dotted];
m0_420 -> m0_425  [key=1, style=dashed, color=darkseagreen4, label=contract];
m0_420 -> m0_426  [key=1, style=dashed, color=darkseagreen4, label=contract];
m0_420 -> m0_427  [key=1, style=dashed, color=darkseagreen4, label=contract];
m0_420 -> m0_430  [key=1, style=dashed, color=darkseagreen4, label=contract];
m0_420 -> m0_432  [key=1, style=dashed, color=darkseagreen4, label=contract];
m0_420 -> m0_434  [key=1, style=dashed, color=darkseagreen4, label=contract];
m0_420 -> m0_435  [key=1, style=dashed, color=darkseagreen4, label=contract];
m0_420 -> m0_436  [key=1, style=dashed, color=darkseagreen4, label=contract];
m0_420 -> m0_437  [key=1, style=dashed, color=darkseagreen4, label=contract];
m0_422 -> m0_423  [key=0, style=solid];
m0_422 -> m0_55  [key=2, style=dotted];
m0_422 -> m0_424  [key=1, style=dashed, color=darkseagreen4, label=containerAttribute];
m0_421 -> m0_422  [key=0, style=solid];
m0_421 -> m0_103  [key=2, style=dotted];
m0_425 -> m0_427  [key=0, style=solid];
m0_425 -> m0_442  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_426 -> m0_427  [key=0, style=solid];
m0_427 -> m0_428  [key=0, style=solid];
m0_427 -> m0_108  [key=2, style=dotted];
m0_427 -> m0_429  [key=1, style=dashed, color=darkseagreen4, label=overrideConstructor];
m0_427 -> m0_436  [key=1, style=dashed, color=darkseagreen4, label=overrideConstructor];
m0_430 -> m0_431  [key=0, style=solid];
m0_430 -> m0_194  [key=2, style=dotted];
m0_430 -> m0_433  [key=1, style=dashed, color=darkseagreen4, label=expectedParameterType];
m0_430 -> m0_435  [key=1, style=dashed, color=darkseagreen4, label=expectedParameterType];
m0_432 -> m0_436  [key=0, style=solid];
m0_434 -> m0_436  [key=0, style=solid];
m0_435 -> m0_438  [key=0, style=solid];
m0_435 -> m0_156  [key=2, style=dotted];
m0_435 -> m0_440  [key=2, style=dotted];
m0_436 -> m0_437  [key=0, style=solid];
m0_436 -> m0_109  [key=2, style=dotted];
m0_437 -> m0_438  [key=0, style=solid];
m0_423 -> m0_424  [key=0, style=solid];
m0_423 -> m0_426  [key=0, style=solid];
m0_424 -> m0_425  [key=0, style=solid];
m0_424 -> m0_107  [key=2, style=dotted];
m0_424 -> m0_442  [key=1, style=dashed, color=darkseagreen4, label=namingStrategy];
m0_428 -> m0_429  [key=0, style=solid];
m0_428 -> m0_437  [key=0, style=solid];
m0_429 -> m0_430  [key=0, style=solid];
m0_429 -> m0_269  [key=2, style=dotted];
m0_429 -> m0_431  [key=1, style=dashed, color=darkseagreen4, label=parameters];
m0_429 -> m0_433  [key=1, style=dashed, color=darkseagreen4, label=parameters];
m0_431 -> m0_432  [key=0, style=solid];
m0_431 -> m0_433  [key=0, style=solid];
m0_433 -> m0_434  [key=0, style=solid];
m0_433 -> m0_435  [key=0, style=solid];
m0_433 -> m0_162  [key=2, style=dotted];
m0_438 -> m0_419  [key=0, style=bold, color=blue];
m0_399 -> m0_407  [key=0, style=solid];
m0_399 -> m0_366  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Type t"];
m0_399 -> m0_121  [key=3, color=darkorchid, style=bold, label="method methodReturn bool ShouldSkipSerializing"];
m0_407 -> m0_408  [key=0, style=solid];
m0_408 -> m0_399  [key=0, style=bold, color=blue];
m0_472 -> m0_473  [key=0, style=solid];
m0_472 -> m0_20  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Type objectType"];
m0_473 -> m0_474  [key=0, style=solid];
m0_473 -> m0_477  [key=2, style=dotted];
m0_473 -> m0_475  [key=1, style=dashed, color=darkseagreen4, label=contract];
m0_474 -> m0_475  [key=0, style=solid];
m0_474 -> m0_103  [key=2, style=dotted];
m0_475 -> m0_476  [key=0, style=solid];
m0_476 -> m0_472  [key=0, style=bold, color=blue];
m0_553 -> m0_571  [key=0, style=solid];
m0_553 -> m0_572  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.MemberInfo"];
m0_553 -> m0_573  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.MemberInfo"];
m0_553 -> m0_574  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.MemberInfo"];
m0_553 -> m0_575  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.MemberInfo"];
m0_553 -> m0_577  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.MemberInfo"];
m0_553 -> m0_578  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.MemberSerialization"];
m0_553 -> m0_579  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.MemberInfo"];
m0_553 -> m0_580  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.MemberInfo"];
m0_553 -> m0_583  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.MemberInfo"];
m0_553 -> m0_584  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.MemberInfo"];
m0_553 -> m0_543  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Reflection.MemberInfo member"];
m0_553 -> m0_104  [key=3, color=darkorchid, style=bold, label="Parameter variable Newtonsoft.Json.MemberSerialization memberSerialization"];
m0_571 -> m0_572  [key=0, style=solid];
m0_571 -> m0_319  [key=2, style=dotted];
m0_571 -> m0_573  [key=1, style=dashed, color=darkseagreen4, label=property];
m0_571 -> m0_574  [key=1, style=dashed, color=darkseagreen4, label=property];
m0_571 -> m0_575  [key=1, style=dashed, color=darkseagreen4, label=property];
m0_571 -> m0_577  [key=1, style=dashed, color=darkseagreen4, label=property];
m0_571 -> m0_579  [key=1, style=dashed, color=darkseagreen4, label=property];
m0_571 -> m0_580  [key=1, style=dashed, color=darkseagreen4, label=property];
m0_571 -> m0_581  [key=1, style=dashed, color=darkseagreen4, label=property];
m0_571 -> m0_582  [key=1, style=dashed, color=darkseagreen4, label=property];
m0_571 -> m0_583  [key=1, style=dashed, color=darkseagreen4, label=property];
m0_571 -> m0_584  [key=1, style=dashed, color=darkseagreen4, label=property];
m0_571 -> m0_585  [key=1, style=dashed, color=darkseagreen4, label=property];
m0_572 -> m0_573  [key=0, style=solid];
m0_572 -> m0_192  [key=2, style=dotted];
m0_573 -> m0_574  [key=0, style=solid];
m0_574 -> m0_575  [key=0, style=solid];
m0_574 -> m0_562  [key=2, style=dotted];
m0_575 -> m0_576  [key=0, style=solid];
m0_575 -> m0_320  [key=2, style=dotted];
m0_577 -> m0_578  [key=0, style=solid];
m0_577 -> m0_321  [key=2, style=dotted];
m0_577 -> m0_579  [key=1, style=dashed, color=darkseagreen4, label=allowNonPublicAccess];
m0_577 -> m0_580  [key=1, style=dashed, color=darkseagreen4, label=allowNonPublicAccess];
m0_577 -> m0_584  [key=1, style=dashed, color=darkseagreen4, label=allowNonPublicAccess];
m0_578 -> m0_579  [key=0, style=solid];
m0_578 -> m0_581  [key=0, style=solid];
m0_579 -> m0_580  [key=0, style=solid];
m0_579 -> m0_587  [key=2, style=dotted];
m0_580 -> m0_583  [key=0, style=solid];
m0_580 -> m0_196  [key=2, style=dotted];
m0_583 -> m0_584  [key=0, style=solid];
m0_583 -> m0_588  [key=2, style=dotted];
m0_584 -> m0_585  [key=0, style=solid];
m0_584 -> m0_589  [key=2, style=dotted];
m0_581 -> m0_582  [key=0, style=solid];
m0_582 -> m0_583  [key=0, style=solid];
m0_585 -> m0_586  [key=0, style=solid];
m0_576 -> m0_577  [key=0, style=solid];
m0_586 -> m0_553  [key=0, style=bold, color=blue];
m0_230 -> m0_231  [key=0, style=solid];
m0_230 -> m0_232  [key=0, style=bold, color=crimson];
m0_231 -> m0_232  [key=0, style=solid];
m0_231 -> m0_233  [key=0, style=solid];
m0_232 -> m0_231  [key=0, style=solid];
m0_232 -> m0_234  [key=2, style=dotted];
m0_232 -> m0_232  [key=1, style=dashed, color=darkseagreen4, label=item];
m0_233 -> m0_230  [key=0, style=bold, color=blue];
m0_326 -> m0_327  [key=0, style=solid];
m0_327 -> m0_328  [key=0, style=solid];
m0_327 -> m0_198  [key=2, style=dotted];
m0_328 -> m0_326  [key=0, style=bold, color=blue];
m0_529 -> m0_532  [key=0, style=solid];
m0_529 -> m0_533  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m0_529 -> m0_534  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m0_532 -> m0_533  [key=0, style=solid];
m0_532 -> m0_534  [key=0, style=solid];
m0_532 -> m0_536  [key=2, style=dotted];
m0_532 -> m0_537  [key=2, style=dotted];
m0_533 -> m0_535  [key=0, style=solid];
m0_534 -> m0_535  [key=0, style=solid];
m0_534 -> m0_440  [key=2, style=dotted];
m0_535 -> m0_529  [key=0, style=bold, color=blue];
m0_115 -> m0_163  [key=0, style=solid];
m0_115 -> m0_166  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.MemberInfo"];
m0_115 -> m0_175  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.MemberInfo"];
m0_115 -> m0_177  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.MemberInfo"];
m0_115 -> m0_181  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.MemberInfo"];
m0_115 -> m0_207  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.MemberInfo"];
m0_115 -> m0_182  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonObjectContract"];
m0_115 -> m0_188  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonObjectContract"];
m0_115 -> m0_189  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonObjectContract"];
m0_115 -> m0_65  [key=3, color=darkorchid, style=bold, label="Parameter variable Newtonsoft.Json.Serialization.JsonObjectContract contract"];
m0_115 -> m0_97  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Reflection.MemberInfo member"];
m0_163 -> m0_164  [key=0, style=solid];
m0_163 -> m0_191  [key=2, style=dotted];
m0_163 -> m0_176  [key=1, style=dashed, color=darkseagreen4, label=extensionDataAttribute];
m0_163 -> m0_183  [key=1, style=dashed, color=darkseagreen4, label=extensionDataAttribute];
m0_166 -> m0_167  [key=0, style=solid];
m0_166 -> m0_192  [key=2, style=dotted];
m0_166 -> m0_168  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_166 -> m0_172  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_166 -> m0_174  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_166 -> m0_179  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_175 -> m0_176  [key=0, style=solid];
m0_175 -> m0_195  [key=2, style=dotted];
m0_175 -> m0_181  [key=1, style=dashed, color=darkseagreen4, label=getExtensionDataDictionary];
m0_175 -> m0_204  [key=1, style=dashed, color=darkseagreen4, label=getExtensionDataDictionary];
m0_175 -> m0_187  [key=1, style=dashed, color=darkseagreen4, label=getExtensionDataDictionary];
m0_175 -> m0_219  [key=1, style=dashed, color=darkseagreen4, label=getExtensionDataDictionary];
m0_177 -> m0_178  [key=0, style=solid];
m0_177 -> m0_196  [key=2, style=dotted];
m0_177 -> m0_197  [key=2, style=dotted];
m0_177 -> m0_181  [key=1, style=dashed, color=darkseagreen4, label=setExtensionDataDictionary];
m0_177 -> m0_206  [key=1, style=dashed, color=darkseagreen4, label=setExtensionDataDictionary];
m0_177 -> m0_209  [key=1, style=dashed, color=darkseagreen4, label=setExtensionDataDictionary];
m0_181 -> m0_182  [key=0, style=solid];
m0_181 -> m0_204  [key=1, style=dashed, color=darkseagreen4, label=object];
m0_181 -> m0_209  [key=1, style=dashed, color=darkseagreen4, label=object];
m0_181 -> m0_210  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_181 -> m0_181  [key=3, color=darkorchid, style=bold, label="Local variable Newtonsoft.Json.Serialization.ExtensionDataSetter extensionDataSetter"];
m0_182 -> m0_183  [key=0, style=solid];
m0_188 -> m0_189  [key=0, style=solid];
m0_189 -> m0_190  [key=0, style=solid];
m0_164 -> m0_165  [key=0, style=solid];
m0_164 -> m0_166  [key=0, style=solid];
m0_176 -> m0_177  [key=0, style=solid];
m0_176 -> m0_183  [key=0, style=solid];
m0_183 -> m0_184  [key=0, style=solid];
m0_183 -> m0_189  [key=0, style=solid];
m0_165 -> m0_190  [key=0, style=solid];
m0_167 -> m0_168  [key=0, style=solid];
m0_168 -> m0_169  [key=0, style=solid];
m0_168 -> m0_160  [key=2, style=dotted];
m0_168 -> m0_170  [key=1, style=dashed, color=darkseagreen4, label=dictionaryType];
m0_172 -> m0_173  [key=0, style=solid];
m0_172 -> m0_174  [key=0, style=solid];
m0_172 -> m0_193  [key=2, style=dotted];
m0_174 -> m0_175  [key=0, style=solid];
m0_174 -> m0_178  [key=1, style=dashed, color=darkseagreen4, label=createdType];
m0_179 -> m0_180  [key=0, style=solid];
m0_179 -> m0_199  [key=2, style=dotted];
m0_169 -> m0_170  [key=0, style=solid];
m0_169 -> m0_161  [key=2, style=dotted];
m0_169 -> m0_173  [key=1, style=dashed, color=darkseagreen4, label=keyType];
m0_169 -> m0_179  [key=1, style=dashed, color=darkseagreen4, label=keyType];
m0_169 -> m0_184  [key=1, style=dashed, color=darkseagreen4, label=keyType];
m0_170 -> m0_171  [key=0, style=solid];
m0_170 -> m0_161  [key=2, style=dotted];
m0_170 -> m0_173  [key=1, style=dashed, color=darkseagreen4, label=valueType];
m0_170 -> m0_179  [key=1, style=dashed, color=darkseagreen4, label=valueType];
m0_170 -> m0_184  [key=1, style=dashed, color=darkseagreen4, label=valueType];
m0_170 -> m0_189  [key=1, style=dashed, color=darkseagreen4, label=valueType];
m0_173 -> m0_175  [key=0, style=solid];
m0_173 -> m0_194  [key=2, style=dotted];
m0_173 -> m0_178  [key=1, style=dashed, color=darkseagreen4, label=createdType];
m0_184 -> m0_185  [key=0, style=solid];
m0_184 -> m0_194  [key=2, style=dotted];
m0_171 -> m0_172  [key=0, style=solid];
m0_171 -> m0_166  [key=3, color=darkorchid, style=bold, label="Local variable System.Type createdType"];
m0_178 -> m0_179  [key=0, style=solid];
m0_178 -> m0_198  [key=2, style=dotted];
m0_178 -> m0_181  [key=1, style=dashed, color=darkseagreen4, label=createExtensionDataDictionary];
m0_178 -> m0_208  [key=1, style=dashed, color=darkseagreen4, label=createExtensionDataDictionary];
m0_187 -> m0_188  [key=0, style=solid];
m0_187 -> m0_219  [key=1, style=dashed, color=darkseagreen4, label=object];
m0_187 -> m0_71  [key=3, color=darkorchid, style=bold, label="method methodReturn System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<object, object>> "];
m0_187 -> m0_187  [key=3, color=darkorchid, style=bold, label="Local variable Newtonsoft.Json.Serialization.ExtensionDataGetter extensionDataGetter"];
m0_180 -> m0_181  [key=0, style=solid];
m0_180 -> m0_200  [key=2, style=dotted];
m0_180 -> m0_210  [key=1, style=dashed, color=darkseagreen4, label=setExtensionDataDictionaryValue];
m0_185 -> m0_186  [key=0, style=solid];
m0_185 -> m0_201  [key=2, style=dotted];
m0_185 -> m0_202  [key=2, style=dotted];
m0_186 -> m0_187  [key=0, style=solid];
m0_186 -> m0_109  [key=2, style=dotted];
m0_186 -> m0_222  [key=1, style=dashed, color=darkseagreen4, label=createEnumerableWrapper];
m0_190 -> m0_115  [key=0, style=bold, color=blue];
m0_588 -> m0_660  [key=0, style=solid];
m0_588 -> m0_553  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Reflection.MemberInfo member"];
m0_588 -> m0_71  [key=3, color=darkorchid, style=bold, label="method methodReturn System.Predicate<object> CreateShouldSerializeTest"];
m0_588 -> m0_664  [key=3, color=darkorchid, style=bold, label="method methodReturn System.Predicate<object> CreateShouldSerializeTest"];
m0_660 -> m0_661  [key=0, style=solid];
m0_660 -> m0_199  [key=2, style=dotted];
m0_660 -> m0_663  [key=1, style=dashed, color=darkseagreen4, label=shouldSerializeMethod];
m0_661 -> m0_662  [key=0, style=solid];
m0_661 -> m0_663  [key=0, style=solid];
m0_663 -> m0_664  [key=0, style=solid];
m0_663 -> m0_200  [key=2, style=dotted];
m0_663 -> m0_667  [key=1, style=dashed, color=darkseagreen4, label=shouldSerializeCall];
m0_662 -> m0_665  [key=0, style=solid];
m0_664 -> m0_665  [key=0, style=solid];
m0_664 -> m0_667  [key=1, style=dashed, color=darkseagreen4, label=object];
m0_665 -> m0_588  [key=0, style=bold, color=blue];
m0_360 -> m0_361  [key=0, style=solid];
m0_360 -> m0_366  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m0_360 -> m0_342  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Type type"];
m0_360 -> m0_343  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback> onSerializing"];
m0_360 -> m0_344  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback> onSerialized"];
m0_360 -> m0_345  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback> onDeserializing"];
m0_360 -> m0_346  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback> onDeserialized"];
m0_360 -> m0_347  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationErrorCallback> onError"];
m0_361 -> m0_362  [key=0, style=solid];
m0_361 -> m0_379  [key=1, style=dashed, color=darkseagreen4, label="out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>"];
m0_361 -> m0_398  [key=1, style=dashed, color=darkseagreen4, label="out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>"];
m0_366 -> m0_367  [key=0, style=solid];
m0_366 -> m0_398  [key=0, style=solid];
m0_366 -> m0_124  [key=2, style=dotted];
m0_366 -> m0_372  [key=1, style=dashed, color=darkseagreen4, label=baseType];
m0_366 -> m0_373  [key=1, style=dashed, color=darkseagreen4, label=baseType];
m0_366 -> m0_374  [key=1, style=dashed, color=darkseagreen4, label=baseType];
m0_362 -> m0_363  [key=0, style=solid];
m0_362 -> m0_383  [key=1, style=dashed, color=darkseagreen4, label="out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>"];
m0_362 -> m0_398  [key=1, style=dashed, color=darkseagreen4, label="out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>"];
m0_379 -> m0_380  [key=0, style=solid];
m0_379 -> m0_50  [key=2, style=dotted];
m0_379 -> m0_379  [key=1, style=dashed, color=darkseagreen4, label="out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>"];
m0_379 -> m0_398  [key=1, style=dashed, color=darkseagreen4, label="out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>"];
m0_363 -> m0_364  [key=0, style=solid];
m0_363 -> m0_387  [key=1, style=dashed, color=darkseagreen4, label="out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>"];
m0_363 -> m0_398  [key=1, style=dashed, color=darkseagreen4, label="out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>"];
m0_383 -> m0_384  [key=0, style=solid];
m0_383 -> m0_50  [key=2, style=dotted];
m0_383 -> m0_383  [key=1, style=dashed, color=darkseagreen4, label="out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>"];
m0_383 -> m0_398  [key=1, style=dashed, color=darkseagreen4, label="out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>"];
m0_364 -> m0_365  [key=0, style=solid];
m0_364 -> m0_391  [key=1, style=dashed, color=darkseagreen4, label="out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>"];
m0_364 -> m0_398  [key=1, style=dashed, color=darkseagreen4, label="out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>"];
m0_387 -> m0_388  [key=0, style=solid];
m0_387 -> m0_50  [key=2, style=dotted];
m0_387 -> m0_387  [key=1, style=dashed, color=darkseagreen4, label="out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>"];
m0_387 -> m0_398  [key=1, style=dashed, color=darkseagreen4, label="out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>"];
m0_365 -> m0_366  [key=0, style=solid];
m0_365 -> m0_395  [key=1, style=dashed, color=darkseagreen4, label="out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationErrorCallback>"];
m0_365 -> m0_398  [key=1, style=dashed, color=darkseagreen4, label="out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationErrorCallback>"];
m0_391 -> m0_392  [key=0, style=solid];
m0_391 -> m0_50  [key=2, style=dotted];
m0_391 -> m0_391  [key=1, style=dashed, color=darkseagreen4, label="out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>"];
m0_391 -> m0_398  [key=1, style=dashed, color=darkseagreen4, label="out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationCallback>"];
m0_395 -> m0_396  [key=0, style=solid];
m0_395 -> m0_50  [key=2, style=dotted];
m0_395 -> m0_395  [key=1, style=dashed, color=darkseagreen4, label="out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationErrorCallback>"];
m0_395 -> m0_398  [key=1, style=dashed, color=darkseagreen4, label="out System.Collections.Generic.List<Newtonsoft.Json.Serialization.SerializationErrorCallback>"];
m0_367 -> m0_368  [key=0, style=solid];
m0_367 -> m0_378  [key=1, style=dashed, color=darkseagreen4, label=currentOnSerializing];
m0_367 -> m0_71  [key=3, color=darkorchid, style=bold, label="Local variable System.Reflection.MethodInfo currentOnSerializing"];
m0_367 -> m0_374  [key=3, color=darkorchid, style=bold, label="Local variable System.Reflection.MethodInfo currentOnSerializing"];
m0_372 -> m0_373  [key=0, style=solid];
m0_372 -> m0_399  [key=2, style=dotted];
m0_372 -> m0_378  [key=1, style=dashed, color=darkseagreen4, label=skipSerializing];
m0_373 -> m0_374  [key=0, style=solid];
m0_373 -> m0_400  [key=2, style=dotted];
m0_373 -> m0_390  [key=1, style=dashed, color=darkseagreen4, label=skipDeserialized];
m0_374 -> m0_375  [key=0, style=solid];
m0_374 -> m0_366  [key=0, style=solid];
m0_374 -> m0_401  [key=2, style=dotted];
m0_374 -> m0_377  [key=1, style=dashed, color=darkseagreen4, label=method];
m0_374 -> m0_378  [key=1, style=dashed, color=darkseagreen4, label=method];
m0_374 -> m0_380  [key=1, style=dashed, color=darkseagreen4, label=method];
m0_374 -> m0_381  [key=1, style=dashed, color=darkseagreen4, label=method];
m0_374 -> m0_382  [key=1, style=dashed, color=darkseagreen4, label=method];
m0_374 -> m0_384  [key=1, style=dashed, color=darkseagreen4, label=method];
m0_374 -> m0_385  [key=1, style=dashed, color=darkseagreen4, label=method];
m0_374 -> m0_386  [key=1, style=dashed, color=darkseagreen4, label=method];
m0_374 -> m0_388  [key=1, style=dashed, color=darkseagreen4, label=method];
m0_374 -> m0_389  [key=1, style=dashed, color=darkseagreen4, label=method];
m0_374 -> m0_390  [key=1, style=dashed, color=darkseagreen4, label=method];
m0_374 -> m0_392  [key=1, style=dashed, color=darkseagreen4, label=method];
m0_374 -> m0_393  [key=1, style=dashed, color=darkseagreen4, label=method];
m0_374 -> m0_394  [key=1, style=dashed, color=darkseagreen4, label=method];
m0_374 -> m0_396  [key=1, style=dashed, color=darkseagreen4, label=method];
m0_374 -> m0_397  [key=1, style=dashed, color=darkseagreen4, label=method];
m0_368 -> m0_369  [key=0, style=solid];
m0_368 -> m0_382  [key=1, style=dashed, color=darkseagreen4, label=currentOnSerialized];
m0_368 -> m0_71  [key=3, color=darkorchid, style=bold, label="Local variable System.Reflection.MethodInfo currentOnSerialized"];
m0_368 -> m0_374  [key=3, color=darkorchid, style=bold, label="Local variable System.Reflection.MethodInfo currentOnSerialized"];
m0_378 -> m0_379  [key=0, style=solid];
m0_378 -> m0_382  [key=0, style=solid];
m0_378 -> m0_402  [key=2, style=dotted];
m0_378 -> m0_378  [key=1, style=dashed, color=darkseagreen4, label=prevAttributeType];
m0_369 -> m0_370  [key=0, style=solid];
m0_369 -> m0_386  [key=1, style=dashed, color=darkseagreen4, label=currentOnDeserializing];
m0_369 -> m0_71  [key=3, color=darkorchid, style=bold, label="Local variable System.Reflection.MethodInfo currentOnDeserializing"];
m0_369 -> m0_374  [key=3, color=darkorchid, style=bold, label="Local variable System.Reflection.MethodInfo currentOnDeserializing"];
m0_382 -> m0_383  [key=0, style=solid];
m0_382 -> m0_386  [key=0, style=solid];
m0_382 -> m0_402  [key=2, style=dotted];
m0_382 -> m0_382  [key=1, style=dashed, color=darkseagreen4, label=prevAttributeType];
m0_370 -> m0_371  [key=0, style=solid];
m0_370 -> m0_390  [key=1, style=dashed, color=darkseagreen4, label=currentOnDeserialized];
m0_370 -> m0_71  [key=3, color=darkorchid, style=bold, label="Local variable System.Reflection.MethodInfo currentOnDeserialized"];
m0_370 -> m0_374  [key=3, color=darkorchid, style=bold, label="Local variable System.Reflection.MethodInfo currentOnDeserialized"];
m0_386 -> m0_387  [key=0, style=solid];
m0_386 -> m0_390  [key=0, style=solid];
m0_386 -> m0_402  [key=2, style=dotted];
m0_386 -> m0_386  [key=1, style=dashed, color=darkseagreen4, label=prevAttributeType];
m0_371 -> m0_372  [key=0, style=solid];
m0_371 -> m0_394  [key=1, style=dashed, color=darkseagreen4, label=currentOnError];
m0_371 -> m0_71  [key=3, color=darkorchid, style=bold, label="Local variable System.Reflection.MethodInfo currentOnError"];
m0_371 -> m0_374  [key=3, color=darkorchid, style=bold, label="Local variable System.Reflection.MethodInfo currentOnError"];
m0_390 -> m0_391  [key=0, style=solid];
m0_390 -> m0_394  [key=0, style=solid];
m0_390 -> m0_402  [key=2, style=dotted];
m0_390 -> m0_390  [key=1, style=dashed, color=darkseagreen4, label=prevAttributeType];
m0_394 -> m0_395  [key=0, style=solid];
m0_394 -> m0_374  [key=0, style=solid];
m0_394 -> m0_402  [key=2, style=dotted];
m0_394 -> m0_394  [key=1, style=dashed, color=darkseagreen4, label=prevAttributeType];
m0_375 -> m0_376  [key=0, style=solid];
m0_375 -> m0_374  [key=0, style=solid];
m0_377 -> m0_378  [key=0, style=solid];
m0_377 -> m0_269  [key=2, style=dotted];
m0_377 -> m0_382  [key=1, style=dashed, color=darkseagreen4, label=parameters];
m0_377 -> m0_386  [key=1, style=dashed, color=darkseagreen4, label=parameters];
m0_377 -> m0_390  [key=1, style=dashed, color=darkseagreen4, label=parameters];
m0_377 -> m0_394  [key=1, style=dashed, color=darkseagreen4, label=parameters];
m0_380 -> m0_381  [key=0, style=solid];
m0_380 -> m0_403  [key=2, style=dotted];
m0_380 -> m0_54  [key=2, style=dotted];
m0_381 -> m0_382  [key=0, style=solid];
m0_384 -> m0_385  [key=0, style=solid];
m0_384 -> m0_403  [key=2, style=dotted];
m0_384 -> m0_54  [key=2, style=dotted];
m0_385 -> m0_386  [key=0, style=solid];
m0_388 -> m0_389  [key=0, style=solid];
m0_388 -> m0_403  [key=2, style=dotted];
m0_388 -> m0_54  [key=2, style=dotted];
m0_389 -> m0_390  [key=0, style=solid];
m0_392 -> m0_393  [key=0, style=solid];
m0_392 -> m0_403  [key=2, style=dotted];
m0_392 -> m0_54  [key=2, style=dotted];
m0_393 -> m0_394  [key=0, style=solid];
m0_396 -> m0_397  [key=0, style=solid];
m0_396 -> m0_404  [key=2, style=dotted];
m0_396 -> m0_54  [key=2, style=dotted];
m0_397 -> m0_374  [key=0, style=solid];
m0_376 -> m0_377  [key=0, style=solid];
m0_376 -> m0_378  [key=1, style=dashed, color=darkseagreen4, label=prevAttributeType];
m0_376 -> m0_71  [key=3, color=darkorchid, style=bold, label="Local variable System.Type prevAttributeType"];
m0_398 -> m0_360  [key=0, style=bold, color=blue];
m0_699 -> m0_700  [key=0, style=solid];
m0_699 -> m0_658  [key=3, color=darkorchid, style=bold, label="method methodReturn string GetResolvedPropertyName"];
m0_700 -> m0_701  [key=0, style=solid];
m0_700 -> m0_658  [key=2, style=dotted];
m0_701 -> m0_699  [key=0, style=bold, color=blue];
m0_108 -> m0_238  [key=0, style=solid];
m0_108 -> m0_244  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m0_108 -> m0_245  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m0_108 -> m0_240  [key=3, color=darkorchid, style=bold, label="method methodReturn System.Reflection.ConstructorInfo GetAttributeConstructor"];
m0_108 -> m0_71  [key=3, color=darkorchid, style=bold, label="method methodReturn System.Reflection.ConstructorInfo GetAttributeConstructor"];
m0_238 -> m0_239  [key=0, style=solid];
m0_238 -> m0_248  [key=2, style=dotted];
m0_238 -> m0_49  [key=2, style=dotted];
m0_238 -> m0_249  [key=2, style=dotted];
m0_238 -> m0_252  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_238 -> m0_240  [key=1, style=dashed, color=darkseagreen4, label=en];
m0_238 -> m0_241  [key=1, style=dashed, color=darkseagreen4, label=en];
m0_244 -> m0_245  [key=0, style=solid];
m0_244 -> m0_246  [key=0, style=solid];
m0_245 -> m0_247  [key=0, style=solid];
m0_245 -> m0_251  [key=2, style=dotted];
m0_239 -> m0_240  [key=0, style=solid];
m0_239 -> m0_244  [key=0, style=solid];
m0_239 -> m0_250  [key=2, style=dotted];
m0_240 -> m0_241  [key=0, style=solid];
m0_240 -> m0_243  [key=1, style=dashed, color=darkseagreen4, label=conInfo];
m0_241 -> m0_242  [key=0, style=solid];
m0_241 -> m0_243  [key=0, style=solid];
m0_241 -> m0_250  [key=2, style=dotted];
m0_243 -> m0_247  [key=0, style=solid];
m0_242 -> m0_247  [key=0, style=solid];
m0_242 -> m0_156  [key=2, style=dotted];
m0_246 -> m0_247  [key=0, style=solid];
m0_247 -> m0_108  [key=0, style=bold, color=blue];
m0_444 -> m0_445  [key=0, style=solid];
m0_444 -> m0_20  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Type objectType"];
m0_445 -> m0_446  [key=0, style=solid];
m0_445 -> m0_459  [key=2, style=dotted];
m0_445 -> m0_447  [key=1, style=dashed, color=darkseagreen4, label=contract];
m0_445 -> m0_450  [key=1, style=dashed, color=darkseagreen4, label=contract];
m0_445 -> m0_452  [key=1, style=dashed, color=darkseagreen4, label=contract];
m0_445 -> m0_454  [key=1, style=dashed, color=darkseagreen4, label=contract];
m0_445 -> m0_455  [key=1, style=dashed, color=darkseagreen4, label=contract];
m0_445 -> m0_456  [key=1, style=dashed, color=darkseagreen4, label=contract];
m0_445 -> m0_457  [key=1, style=dashed, color=darkseagreen4, label=contract];
m0_446 -> m0_447  [key=0, style=solid];
m0_446 -> m0_103  [key=2, style=dotted];
m0_447 -> m0_448  [key=0, style=solid];
m0_447 -> m0_108  [key=2, style=dotted];
m0_447 -> m0_449  [key=1, style=dashed, color=darkseagreen4, label=overrideConstructor];
m0_447 -> m0_456  [key=1, style=dashed, color=darkseagreen4, label=overrideConstructor];
m0_450 -> m0_451  [key=0, style=solid];
m0_450 -> m0_194  [key=2, style=dotted];
m0_450 -> m0_453  [key=1, style=dashed, color=darkseagreen4, label=expectedParameterType];
m0_450 -> m0_455  [key=1, style=dashed, color=darkseagreen4, label=expectedParameterType];
m0_452 -> m0_456  [key=0, style=solid];
m0_454 -> m0_456  [key=0, style=solid];
m0_455 -> m0_458  [key=0, style=solid];
m0_455 -> m0_156  [key=2, style=dotted];
m0_455 -> m0_440  [key=2, style=dotted];
m0_456 -> m0_457  [key=0, style=solid];
m0_456 -> m0_109  [key=2, style=dotted];
m0_457 -> m0_458  [key=0, style=solid];
m0_448 -> m0_449  [key=0, style=solid];
m0_448 -> m0_457  [key=0, style=solid];
m0_449 -> m0_450  [key=0, style=solid];
m0_449 -> m0_269  [key=2, style=dotted];
m0_449 -> m0_451  [key=1, style=dashed, color=darkseagreen4, label=parameters];
m0_449 -> m0_453  [key=1, style=dashed, color=darkseagreen4, label=parameters];
m0_451 -> m0_452  [key=0, style=solid];
m0_451 -> m0_453  [key=0, style=solid];
m0_453 -> m0_454  [key=0, style=solid];
m0_453 -> m0_455  [key=0, style=solid];
m0_453 -> m0_162  [key=2, style=dotted];
m0_458 -> m0_444  [key=0, style=bold, color=blue];
m0_658 -> m0_684  [key=0, style=solid];
m0_658 -> m0_685  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_658 -> m0_686  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_658 -> m0_592  [key=3, color=darkorchid, style=bold, label="Parameter variable string propertyName"];
m0_658 -> m0_694  [key=3, color=darkorchid, style=bold, label="Parameter variable string propertyName"];
m0_658 -> m0_699  [key=3, color=darkorchid, style=bold, label="Parameter variable string propertyName"];
m0_658 -> m0_658  [key=3, color=darkorchid, style=bold, label="method methodReturn string ResolvePropertyName"];
m0_684 -> m0_685  [key=0, style=solid];
m0_684 -> m0_686  [key=0, style=solid];
m0_685 -> m0_687  [key=0, style=solid];
m0_685 -> m0_657  [key=2, style=dotted];
m0_686 -> m0_687  [key=0, style=solid];
m0_687 -> m0_658  [key=0, style=bold, color=blue];
m0_694 -> m0_695  [key=0, style=solid];
m0_694 -> m0_696  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_694 -> m0_697  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_694 -> m0_658  [key=3, color=darkorchid, style=bold, label="method methodReturn string ResolveDictionaryKey"];
m0_695 -> m0_696  [key=0, style=solid];
m0_695 -> m0_697  [key=0, style=solid];
m0_696 -> m0_698  [key=0, style=solid];
m0_696 -> m0_119  [key=2, style=dotted];
m0_697 -> m0_698  [key=0, style=solid];
m0_697 -> m0_658  [key=2, style=dotted];
m0_698 -> m0_694  [key=0, style=bold, color=blue];
m0_681 -> m0_682  [key=0, style=solid];
m0_57 -> m0_58  [key=0, style=solid];
m0_61 -> m0_62  [key=0, style=solid];
m0_58 -> m0_59  [key=0, style=solid];
m0_58 -> m0_60  [key=2, style=dotted];
m0_59 -> m0_57  [key=0, style=bold, color=blue];
m0_62 -> m0_63  [key=0, style=solid];
m0_62 -> m0_60  [key=2, style=dotted];
m0_63 -> m0_61  [key=0, style=bold, color=blue];
m0_117 -> m0_118  [key=0, style=solid];
m0_117 -> m0_119  [key=2, style=dotted];
m0_116 -> m0_117  [key=0, style=solid];
m0_118 -> m0_116  [key=0, style=bold, color=blue];
m0_127 -> m0_128  [key=0, style=solid];
m0_127 -> m0_129  [key=1, style=dashed, color=darkseagreen4, label="?"];
m0_127 -> m0_130  [key=1, style=dashed, color=darkseagreen4, label="?"];
m0_136 -> m0_137  [key=0, style=solid];
m0_136 -> m0_140  [key=1, style=dashed, color=darkseagreen4, label="?"];
m0_136 -> m0_142  [key=1, style=dashed, color=darkseagreen4, label="?"];
m0_136 -> m0_143  [key=1, style=dashed, color=darkseagreen4, label="?"];
m0_136 -> m0_144  [key=1, style=dashed, color=darkseagreen4, label="?"];
m0_136 -> m0_151  [key=1, style=dashed, color=darkseagreen4, label="?"];
m0_128 -> m0_129  [key=0, style=solid];
m0_128 -> m0_50  [key=2, style=dotted];
m0_128 -> m0_130  [key=1, style=dashed, color=darkseagreen4, label=m];
m0_128 -> m0_131  [key=1, style=dashed, color=darkseagreen4, label=m];
m0_129 -> m0_130  [key=0, style=solid];
m0_129 -> m0_133  [key=2, style=dotted];
m0_129 -> m0_134  [key=2, style=dotted];
m0_130 -> m0_131  [key=0, style=solid];
m0_130 -> m0_135  [key=2, style=dotted];
m0_130 -> m0_134  [key=2, style=dotted];
m0_131 -> m0_132  [key=0, style=solid];
m0_132 -> m0_127  [key=0, style=bold, color=blue];
m0_137 -> m0_138  [key=0, style=solid];
m0_137 -> m0_153  [key=2, style=dotted];
m0_140 -> m0_141  [key=0, style=solid];
m0_140 -> m0_142  [key=0, style=solid];
m0_140 -> m0_154  [key=2, style=dotted];
m0_142 -> m0_143  [key=0, style=solid];
m0_142 -> m0_144  [key=0, style=solid];
m0_142 -> m0_155  [key=2, style=dotted];
m0_143 -> m0_152  [key=0, style=solid];
m0_143 -> m0_156  [key=2, style=dotted];
m0_143 -> m0_157  [key=2, style=dotted];
m0_143 -> m0_158  [key=2, style=dotted];
m0_144 -> m0_145  [key=0, style=solid];
m0_144 -> m0_159  [key=2, style=dotted];
m0_144 -> m0_146  [key=1, style=dashed, color=darkseagreen4, label=t];
m0_151 -> m0_152  [key=0, style=solid];
m0_151 -> m0_156  [key=2, style=dotted];
m0_151 -> m0_157  [key=2, style=dotted];
m0_151 -> m0_158  [key=2, style=dotted];
m0_138 -> m0_139  [key=0, style=solid];
m0_138 -> m0_140  [key=0, style=solid];
m0_139 -> m0_152  [key=0, style=solid];
m0_141 -> m0_152  [key=0, style=solid];
m0_145 -> m0_146  [key=0, style=solid];
m0_146 -> m0_147  [key=0, style=solid];
m0_146 -> m0_151  [key=0, style=solid];
m0_146 -> m0_160  [key=2, style=dotted];
m0_146 -> m0_148  [key=1, style=dashed, color=darkseagreen4, label=dictionaryType];
m0_147 -> m0_148  [key=0, style=solid];
m0_147 -> m0_161  [key=2, style=dotted];
m0_147 -> m0_149  [key=1, style=dashed, color=darkseagreen4, label=keyType];
m0_148 -> m0_149  [key=0, style=solid];
m0_148 -> m0_161  [key=2, style=dotted];
m0_149 -> m0_150  [key=0, style=solid];
m0_149 -> m0_151  [key=0, style=solid];
m0_149 -> m0_162  [key=2, style=dotted];
m0_150 -> m0_152  [key=0, style=solid];
m0_152 -> m0_136  [key=0, style=bold, color=blue];
m0_207 -> m0_211  [key=0, style=solid];
m0_207 -> m0_213  [key=2, style=dotted];
m0_207 -> m0_214  [key=2, style=dotted];
m0_204 -> m0_205  [key=0, style=solid];
m0_204 -> m0_212  [key=2, style=dotted];
m0_204 -> m0_210  [key=1, style=dashed, color=darkseagreen4, label=dictionary];
m0_219 -> m0_220  [key=0, style=solid];
m0_219 -> m0_212  [key=2, style=dotted];
m0_219 -> m0_222  [key=1, style=dashed, color=darkseagreen4, label=dictionary];
m0_206 -> m0_207  [key=0, style=solid];
m0_206 -> m0_208  [key=0, style=solid];
m0_209 -> m0_210  [key=0, style=solid];
m0_209 -> m0_216  [key=2, style=dotted];
m0_208 -> m0_209  [key=0, style=solid];
m0_208 -> m0_215  [key=2, style=dotted];
m0_208 -> m0_210  [key=1, style=dashed, color=darkseagreen4, label=dictionary];
m0_210 -> m0_211  [key=0, style=solid];
m0_210 -> m0_217  [key=2, style=dotted];
m0_222 -> m0_223  [key=0, style=solid];
m0_222 -> m0_224  [key=2, style=dotted];
m0_203 -> m0_204  [key=0, style=solid];
m0_203 -> m0_209  [key=1, style=dashed, color=darkseagreen4, label=object];
m0_203 -> m0_210  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_205 -> m0_206  [key=0, style=solid];
m0_205 -> m0_210  [key=0, style=solid];
m0_211 -> m0_203  [key=0, style=bold, color=blue];
m0_218 -> m0_219  [key=0, style=solid];
m0_220 -> m0_221  [key=0, style=solid];
m0_220 -> m0_222  [key=0, style=solid];
m0_221 -> m0_223  [key=0, style=solid];
m0_223 -> m0_218  [key=0, style=bold, color=blue];
m0_252 -> m0_253  [key=0, style=solid];
m0_253 -> m0_254  [key=0, style=solid];
m0_253 -> m0_154  [key=2, style=dotted];
m0_254 -> m0_252  [key=0, style=bold, color=blue];
m0_442 -> m0_443  [key=0, style=solid];
m0_442 -> m0_119  [key=2, style=dotted];
m0_441 -> m0_442  [key=0, style=solid];
m0_443 -> m0_441  [key=0, style=bold, color=blue];
m0_557 -> m0_558  [key=0, style=solid];
m0_558 -> m0_559  [key=0, style=solid];
m0_559 -> m0_557  [key=0, style=bold, color=blue];
m0_667 -> m0_668  [key=0, style=solid];
m0_667 -> m0_217  [key=2, style=dotted];
m0_666 -> m0_667  [key=0, style=solid];
m0_668 -> m0_666  [key=0, style=bold, color=blue];
m0_682 -> m0_683  [key=0, style=solid];
m0_682 -> m0_212  [key=2, style=dotted];
m0_683 -> m0_681  [key=0, style=bold, color=blue];
m0_321 -> m0_590  [key=0, style=solid];
m0_321 -> m0_591  [key=1, style=dashed, color=darkseagreen4, label=object];
m0_321 -> m0_597  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_321 -> m0_599  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m0_321 -> m0_607  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonProperty"];
m0_321 -> m0_608  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonProperty"];
m0_321 -> m0_609  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonProperty"];
m0_321 -> m0_612  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonProperty"];
m0_321 -> m0_613  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonProperty"];
m0_321 -> m0_614  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonProperty"];
m0_321 -> m0_616  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonProperty"];
m0_321 -> m0_617  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonProperty"];
m0_321 -> m0_618  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonProperty"];
m0_321 -> m0_619  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonProperty"];
m0_321 -> m0_620  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonProperty"];
m0_321 -> m0_621  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonProperty"];
m0_321 -> m0_622  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonProperty"];
m0_321 -> m0_623  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonProperty"];
m0_321 -> m0_624  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonProperty"];
m0_321 -> m0_625  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonProperty"];
m0_321 -> m0_626  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonProperty"];
m0_321 -> m0_627  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonProperty"];
m0_321 -> m0_628  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonProperty"];
m0_321 -> m0_629  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonProperty"];
m0_321 -> m0_630  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonProperty"];
m0_321 -> m0_631  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonProperty"];
m0_321 -> m0_632  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonProperty"];
m0_321 -> m0_633  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonProperty"];
m0_321 -> m0_635  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonProperty"];
m0_321 -> m0_637  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonProperty"];
m0_321 -> m0_638  [key=1, style=dashed, color=darkseagreen4, label=object];
m0_321 -> m0_639  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.MemberSerialization"];
m0_321 -> m0_641  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonProperty"];
m0_321 -> m0_642  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonProperty"];
m0_321 -> m0_643  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonProperty"];
m0_321 -> m0_644  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonProperty"];
m0_321 -> m0_645  [key=1, style=dashed, color=darkseagreen4, label=object];
m0_321 -> m0_647  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonProperty"];
m0_321 -> m0_653  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.MemberSerialization"];
m0_321 -> m0_297  [key=3, color=darkorchid, style=bold, label="Parameter variable Newtonsoft.Json.Serialization.JsonProperty property"];
m0_321 -> m0_571  [key=3, color=darkorchid, style=bold, label="Parameter variable Newtonsoft.Json.Serialization.JsonProperty property"];
m0_321 -> m0_287  [key=3, color=darkorchid, style=bold, label="Parameter variable object attributeProvider"];
m0_321 -> m0_553  [key=3, color=darkorchid, style=bold, label="Parameter variable Newtonsoft.Json.MemberSerialization memberSerialization"];
m0_321 -> m0_301  [key=3, color=darkorchid, style=bold, label="Parameter variable Newtonsoft.Json.MemberSerialization memberSerialization"];
m0_321 -> m0_300  [key=3, color=darkorchid, style=bold, label="Parameter variable bool allowNonPublicAccess"];
m0_321 -> m0_576  [key=3, color=darkorchid, style=bold, label="Parameter variable bool allowNonPublicAccess"];
m0_590 -> m0_591  [key=0, style=solid];
m0_590 -> m0_55  [key=2, style=dotted];
m0_590 -> m0_594  [key=1, style=dashed, color=darkseagreen4, label=propertyAttribute];
m0_590 -> m0_595  [key=1, style=dashed, color=darkseagreen4, label=propertyAttribute];
m0_590 -> m0_601  [key=1, style=dashed, color=darkseagreen4, label=propertyAttribute];
m0_590 -> m0_602  [key=1, style=dashed, color=darkseagreen4, label=propertyAttribute];
m0_590 -> m0_611  [key=1, style=dashed, color=darkseagreen4, label=propertyAttribute];
m0_590 -> m0_612  [key=1, style=dashed, color=darkseagreen4, label=propertyAttribute];
m0_590 -> m0_613  [key=1, style=dashed, color=darkseagreen4, label=propertyAttribute];
m0_590 -> m0_614  [key=1, style=dashed, color=darkseagreen4, label=propertyAttribute];
m0_590 -> m0_616  [key=1, style=dashed, color=darkseagreen4, label=propertyAttribute];
m0_590 -> m0_617  [key=1, style=dashed, color=darkseagreen4, label=propertyAttribute];
m0_590 -> m0_618  [key=1, style=dashed, color=darkseagreen4, label=propertyAttribute];
m0_590 -> m0_619  [key=1, style=dashed, color=darkseagreen4, label=propertyAttribute];
m0_590 -> m0_620  [key=1, style=dashed, color=darkseagreen4, label=propertyAttribute];
m0_590 -> m0_621  [key=1, style=dashed, color=darkseagreen4, label=propertyAttribute];
m0_590 -> m0_622  [key=1, style=dashed, color=darkseagreen4, label=propertyAttribute];
m0_590 -> m0_623  [key=1, style=dashed, color=darkseagreen4, label=propertyAttribute];
m0_590 -> m0_624  [key=1, style=dashed, color=darkseagreen4, label=propertyAttribute];
m0_591 -> m0_592  [key=0, style=solid];
m0_591 -> m0_55  [key=2, style=dotted];
m0_591 -> m0_634  [key=1, style=dashed, color=darkseagreen4, label=requiredAttribute];
m0_597 -> m0_598  [key=0, style=solid];
m0_597 -> m0_607  [key=1, style=dashed, color=darkseagreen4, label=mappedName];
m0_597 -> m0_608  [key=1, style=dashed, color=darkseagreen4, label=mappedName];
m0_599 -> m0_600  [key=0, style=solid];
m0_599 -> m0_55  [key=2, style=dotted];
m0_599 -> m0_603  [key=1, style=dashed, color=darkseagreen4, label=containerAttribute];
m0_599 -> m0_604  [key=1, style=dashed, color=darkseagreen4, label=containerAttribute];
m0_607 -> m0_609  [key=0, style=solid];
m0_607 -> m0_657  [key=2, style=dotted];
m0_608 -> m0_609  [key=0, style=solid];
m0_608 -> m0_658  [key=2, style=dotted];
m0_609 -> m0_610  [key=0, style=solid];
m0_612 -> m0_613  [key=0, style=solid];
m0_613 -> m0_614  [key=0, style=solid];
m0_614 -> m0_615  [key=0, style=solid];
m0_616 -> m0_617  [key=0, style=solid];
m0_617 -> m0_618  [key=0, style=solid];
m0_618 -> m0_619  [key=0, style=solid];
m0_619 -> m0_620  [key=0, style=solid];
m0_620 -> m0_621  [key=0, style=solid];
m0_621 -> m0_622  [key=0, style=solid];
m0_622 -> m0_623  [key=0, style=solid];
m0_622 -> m0_659  [key=2, style=dotted];
m0_623 -> m0_624  [key=0, style=solid];
m0_624 -> m0_634  [key=0, style=solid];
m0_625 -> m0_626  [key=0, style=solid];
m0_626 -> m0_627  [key=0, style=solid];
m0_627 -> m0_628  [key=0, style=solid];
m0_628 -> m0_629  [key=0, style=solid];
m0_629 -> m0_630  [key=0, style=solid];
m0_630 -> m0_631  [key=0, style=solid];
m0_631 -> m0_632  [key=0, style=solid];
m0_632 -> m0_633  [key=0, style=solid];
m0_633 -> m0_634  [key=0, style=solid];
m0_635 -> m0_636  [key=0, style=solid];
m0_637 -> m0_638  [key=0, style=solid];
m0_638 -> m0_639  [key=0, style=solid];
m0_638 -> m0_55  [key=2, style=dotted];
m0_638 -> m0_641  [key=1, style=dashed, color=darkseagreen4, label=hasJsonIgnoreAttribute];
m0_638 -> m0_642  [key=1, style=dashed, color=darkseagreen4, label=hasJsonIgnoreAttribute];
m0_639 -> m0_640  [key=0, style=solid];
m0_639 -> m0_642  [key=0, style=solid];
m0_641 -> m0_643  [key=0, style=solid];
m0_642 -> m0_643  [key=0, style=solid];
m0_643 -> m0_644  [key=0, style=solid];
m0_643 -> m0_325  [key=2, style=dotted];
m0_644 -> m0_645  [key=0, style=solid];
m0_644 -> m0_325  [key=2, style=dotted];
m0_645 -> m0_646  [key=0, style=solid];
m0_645 -> m0_55  [key=2, style=dotted];
m0_645 -> m0_647  [key=1, style=dashed, color=darkseagreen4, label=defaultValueAttribute];
m0_647 -> m0_648  [key=0, style=solid];
m0_653 -> m0_654  [key=0, style=solid];
m0_653 -> m0_655  [key=0, style=solid];
m0_594 -> m0_595  [key=0, style=solid];
m0_594 -> m0_597  [key=0, style=solid];
m0_595 -> m0_596  [key=0, style=solid];
m0_595 -> m0_607  [key=1, style=dashed, color=darkseagreen4, label=mappedName];
m0_595 -> m0_608  [key=1, style=dashed, color=darkseagreen4, label=mappedName];
m0_601 -> m0_602  [key=0, style=solid];
m0_601 -> m0_603  [key=0, style=solid];
m0_602 -> m0_606  [key=0, style=solid];
m0_602 -> m0_656  [key=2, style=dotted];
m0_602 -> m0_607  [key=1, style=dashed, color=darkseagreen4, label=namingStrategy];
m0_611 -> m0_612  [key=0, style=solid];
m0_611 -> m0_625  [key=0, style=solid];
m0_592 -> m0_593  [key=0, style=solid];
m0_592 -> m0_321  [key=3, color=darkorchid, style=bold, label="Local variable string mappedName"];
m0_634 -> m0_635  [key=0, style=solid];
m0_634 -> m0_637  [key=0, style=solid];
m0_593 -> m0_594  [key=0, style=solid];
m0_596 -> m0_599  [key=0, style=solid];
m0_596 -> m0_607  [key=1, style=dashed, color=darkseagreen4, label=hasSpecifiedName];
m0_598 -> m0_599  [key=0, style=solid];
m0_598 -> m0_607  [key=1, style=dashed, color=darkseagreen4, label=hasSpecifiedName];
m0_600 -> m0_601  [key=0, style=solid];
m0_603 -> m0_604  [key=0, style=solid];
m0_603 -> m0_605  [key=0, style=solid];
m0_604 -> m0_606  [key=0, style=solid];
m0_604 -> m0_107  [key=2, style=dotted];
m0_604 -> m0_607  [key=1, style=dashed, color=darkseagreen4, label=namingStrategy];
m0_605 -> m0_606  [key=0, style=solid];
m0_605 -> m0_607  [key=1, style=dashed, color=darkseagreen4, label=namingStrategy];
m0_606 -> m0_607  [key=0, style=solid];
m0_606 -> m0_608  [key=0, style=solid];
m0_610 -> m0_611  [key=0, style=solid];
m0_610 -> m0_637  [key=1, style=dashed, color=darkseagreen4, label=hasMemberAttribute];
m0_610 -> m0_642  [key=1, style=dashed, color=darkseagreen4, label=hasMemberAttribute];
m0_610 -> m0_651  [key=1, style=dashed, color=darkseagreen4, label=hasMemberAttribute];
m0_610 -> m0_121  [key=3, color=darkorchid, style=bold, label="Local variable bool hasMemberAttribute"];
m0_651 -> m0_652  [key=0, style=solid];
m0_651 -> m0_653  [key=0, style=solid];
m0_615 -> m0_616  [key=0, style=solid];
m0_615 -> m0_637  [key=1, style=dashed, color=darkseagreen4, label=hasMemberAttribute];
m0_615 -> m0_642  [key=1, style=dashed, color=darkseagreen4, label=hasMemberAttribute];
m0_615 -> m0_651  [key=1, style=dashed, color=darkseagreen4, label=hasMemberAttribute];
m0_636 -> m0_637  [key=0, style=solid];
m0_636 -> m0_642  [key=1, style=dashed, color=darkseagreen4, label=hasMemberAttribute];
m0_636 -> m0_651  [key=1, style=dashed, color=darkseagreen4, label=hasMemberAttribute];
m0_640 -> m0_641  [key=0, style=solid];
m0_640 -> m0_121  [key=3, color=darkorchid, style=bold, label="Local variable bool hasIgnoreDataMemberAttribute"];
m0_646 -> m0_647  [key=0, style=solid];
m0_646 -> m0_648  [key=0, style=solid];
m0_648 -> m0_649  [key=0, style=solid];
m0_648 -> m0_655  [key=1, style=dashed, color=darkseagreen4, label="out bool"];
m0_649 -> m0_650  [key=0, style=solid];
m0_649 -> m0_651  [key=0, style=solid];
m0_650 -> m0_651  [key=0, style=solid];
m0_650 -> m0_655  [key=1, style=dashed, color=darkseagreen4, label="out bool"];
m0_652 -> m0_653  [key=0, style=solid];
m0_652 -> m0_655  [key=1, style=dashed, color=darkseagreen4, label="out bool"];
m0_654 -> m0_655  [key=0, style=solid];
m0_655 -> m0_321  [key=0, style=bold, color=blue];
m0_460 -> m0_461  [key=0, style=solid];
m0_460 -> m0_20  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Type objectType"];
m0_461 -> m0_462  [key=0, style=solid];
m0_461 -> m0_465  [key=2, style=dotted];
m0_461 -> m0_463  [key=1, style=dashed, color=darkseagreen4, label=contract];
m0_462 -> m0_463  [key=0, style=solid];
m0_462 -> m0_103  [key=2, style=dotted];
m0_463 -> m0_464  [key=0, style=solid];
m0_464 -> m0_460  [key=0, style=bold, color=blue];
m0_502 -> m0_507  [key=0, style=solid];
m0_502 -> m0_480  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Type type"];
m0_502 -> m0_121  [key=3, color=darkorchid, style=bold, label="method methodReturn bool CanConvertToString"];
m0_507 -> m0_508  [key=0, style=solid];
m0_507 -> m0_509  [key=0, style=solid];
m0_507 -> m0_500  [key=2, style=dotted];
m0_508 -> m0_510  [key=0, style=solid];
m0_509 -> m0_510  [key=0, style=solid];
m0_510 -> m0_502  [key=0, style=bold, color=blue];
m0_402 -> m0_511  [key=0, style=solid];
m0_402 -> m0_513  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.MethodInfo"];
m0_402 -> m0_514  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.MethodInfo"];
m0_402 -> m0_515  [key=1, style=dashed, color=darkseagreen4, label="ref System.Type"];
m0_402 -> m0_516  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.MethodInfo"];
m0_402 -> m0_517  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.MethodInfo"];
m0_402 -> m0_518  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.MethodInfo"];
m0_402 -> m0_519  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.MethodInfo"];
m0_402 -> m0_520  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.MethodInfo"];
m0_402 -> m0_521  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m0_402 -> m0_522  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.ParameterInfo[]"];
m0_402 -> m0_523  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.MethodInfo"];
m0_402 -> m0_524  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.ParameterInfo[]"];
m0_402 -> m0_525  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.MethodInfo"];
m0_402 -> m0_526  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m0_402 -> m0_374  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Reflection.MethodInfo method"];
m0_402 -> m0_377  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Reflection.ParameterInfo[] parameters"];
m0_402 -> m0_367  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Reflection.MethodInfo currentCallback"];
m0_402 -> m0_368  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Reflection.MethodInfo currentCallback"];
m0_402 -> m0_369  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Reflection.MethodInfo currentCallback"];
m0_402 -> m0_370  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Reflection.MethodInfo currentCallback"];
m0_402 -> m0_371  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Reflection.MethodInfo currentCallback"];
m0_402 -> m0_376  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Type prevAttributeType"];
m0_402 -> m0_402  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Type prevAttributeType"];
m0_402 -> m0_121  [key=3, color=darkorchid, style=bold, label="method methodReturn bool IsValidCallback"];
m0_511 -> m0_512  [key=0, style=solid];
m0_511 -> m0_513  [key=0, style=solid];
m0_511 -> m0_52  [key=2, style=dotted];
m0_513 -> m0_514  [key=0, style=solid];
m0_513 -> m0_515  [key=0, style=solid];
m0_514 -> m0_528  [key=0, style=solid];
m0_514 -> m0_156  [key=2, style=dotted];
m0_514 -> m0_529  [key=2, style=dotted];
m0_514 -> m0_530  [key=2, style=dotted];
m0_515 -> m0_516  [key=0, style=solid];
m0_515 -> m0_517  [key=0, style=solid];
m0_516 -> m0_528  [key=0, style=solid];
m0_516 -> m0_156  [key=2, style=dotted];
m0_516 -> m0_529  [key=2, style=dotted];
m0_516 -> m0_530  [key=2, style=dotted];
m0_517 -> m0_518  [key=0, style=solid];
m0_517 -> m0_519  [key=0, style=solid];
m0_518 -> m0_528  [key=0, style=solid];
m0_518 -> m0_156  [key=2, style=dotted];
m0_518 -> m0_529  [key=2, style=dotted];
m0_518 -> m0_531  [key=2, style=dotted];
m0_519 -> m0_520  [key=0, style=solid];
m0_519 -> m0_521  [key=0, style=solid];
m0_520 -> m0_528  [key=0, style=solid];
m0_520 -> m0_156  [key=2, style=dotted];
m0_520 -> m0_529  [key=2, style=dotted];
m0_520 -> m0_440  [key=2, style=dotted];
m0_521 -> m0_522  [key=0, style=solid];
m0_521 -> m0_524  [key=0, style=solid];
m0_522 -> m0_523  [key=0, style=solid];
m0_522 -> m0_526  [key=0, style=solid];
m0_523 -> m0_528  [key=0, style=solid];
m0_523 -> m0_156  [key=2, style=dotted];
m0_523 -> m0_529  [key=2, style=dotted];
m0_523 -> m0_530  [key=2, style=dotted];
m0_524 -> m0_525  [key=0, style=solid];
m0_524 -> m0_526  [key=0, style=solid];
m0_525 -> m0_528  [key=0, style=solid];
m0_525 -> m0_156  [key=2, style=dotted];
m0_525 -> m0_529  [key=2, style=dotted];
m0_525 -> m0_531  [key=2, style=dotted];
m0_526 -> m0_527  [key=0, style=solid];
m0_526 -> m0_528  [key=1, style=dashed, color=darkseagreen4, label="ref System.Type"];
m0_512 -> m0_528  [key=0, style=solid];
m0_527 -> m0_528  [key=0, style=solid];
m0_528 -> m0_402  [key=0, style=bold, color=blue];
m0_498 -> m0_503  [key=0, style=solid];
m0_498 -> m0_20  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Type t"];
m0_503 -> m0_504  [key=0, style=solid];
m0_503 -> m0_506  [key=2, style=dotted];
m0_504 -> m0_505  [key=0, style=solid];
m0_505 -> m0_498  [key=0, style=bold, color=blue];
m0_322 -> m0_323  [key=0, style=solid];
m0_323 -> m0_324  [key=0, style=solid];
m0_323 -> m0_325  [key=2, style=dotted];
m0_324 -> m0_322  [key=0, style=bold, color=blue];
m0_562 -> m0_563  [key=0, style=solid];
m0_562 -> m0_565  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.MemberInfo"];
m0_562 -> m0_566  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.MemberInfo"];
m0_562 -> m0_553  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Reflection.MemberInfo member"];
m0_563 -> m0_564  [key=0, style=solid];
m0_565 -> m0_567  [key=0, style=solid];
m0_565 -> m0_569  [key=2, style=dotted];
m0_566 -> m0_567  [key=0, style=solid];
m0_566 -> m0_570  [key=2, style=dotted];
m0_564 -> m0_565  [key=0, style=solid];
m0_564 -> m0_566  [key=0, style=solid];
m0_567 -> m0_568  [key=0, style=solid];
m0_568 -> m0_562  [key=0, style=bold, color=blue];
m0_552 -> m0_560  [key=0, style=solid];
m0_560 -> m0_561  [key=0, style=solid];
m0_561 -> m0_552  [key=0, style=bold, color=blue];
m0_270 -> m0_289  [key=0, style=solid];
m0_270 -> m0_291  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.JsonPropertyCollection"];
m0_270 -> m0_292  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m0_270 -> m0_113  [key=3, color=darkorchid, style=bold, label="Parameter variable Newtonsoft.Json.Serialization.JsonPropertyCollection properties"];
m0_270 -> m0_110  [key=3, color=darkorchid, style=bold, label="Parameter variable Newtonsoft.Json.Serialization.JsonPropertyCollection properties"];
m0_270 -> m0_71  [key=3, color=darkorchid, style=bold, label="method methodReturn Newtonsoft.Json.Serialization.JsonProperty MatchProperty"];
m0_289 -> m0_290  [key=0, style=solid];
m0_289 -> m0_291  [key=0, style=solid];
m0_291 -> m0_292  [key=0, style=solid];
m0_291 -> m0_296  [key=2, style=dotted];
m0_291 -> m0_294  [key=1, style=dashed, color=darkseagreen4, label=property];
m0_292 -> m0_293  [key=0, style=solid];
m0_292 -> m0_294  [key=0, style=solid];
m0_290 -> m0_295  [key=0, style=solid];
m0_294 -> m0_295  [key=0, style=solid];
m0_293 -> m0_295  [key=0, style=solid];
m0_295 -> m0_270  [key=0, style=bold, color=blue];
m0_688 -> m0_689  [key=0, style=solid];
m0_688 -> m0_690  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_688 -> m0_691  [key=1, style=dashed, color=darkseagreen4, label=string];
m0_688 -> m0_688  [key=3, color=darkorchid, style=bold, label="method methodReturn string ResolveExtensionDataName"];
m0_689 -> m0_690  [key=0, style=solid];
m0_689 -> m0_691  [key=0, style=solid];
m0_690 -> m0_692  [key=0, style=solid];
m0_690 -> m0_693  [key=2, style=dotted];
m0_691 -> m0_692  [key=0, style=solid];
m0_692 -> m0_688  [key=0, style=bold, color=blue];
m0_124 -> m0_409  [key=0, style=solid];
m0_124 -> m0_410  [key=1, style=dashed, color=green, label="System.Type"];
m0_124 -> m0_114  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Type type"];
m0_124 -> m0_360  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Type type"];
m0_409 -> m0_410  [key=0, style=solid, color=green];
m0_409 -> m0_50  [key=2, style=dotted];
m0_409 -> m0_412  [key=1, style=dashed, color=darkseagreen4, label=ret];
m0_409 -> m0_414  [key=1, style=dashed, color=darkseagreen4, label=ret];
m0_409 -> m0_415  [key=1, style=dashed, color=darkseagreen4, label=ret];
m0_410 -> m0_411  [key=0, style=solid, color=green];
m0_410 -> m0_412  [key=1, style=dashed, color=green, label=current];
m0_410 -> m0_413  [key=1, style=dashed, color=green, label=current];
m0_410 -> m0_124  [key=3, color=green, style=bold, label="Local variable System.Type current"];
m0_412 -> m0_413  [key=0, style=solid];
m0_412 -> m0_54  [key=2, style=dotted];
m0_414 -> m0_415  [key=0, style=solid];
m0_414 -> m0_418  [key=2, style=dotted];
m0_415 -> m0_416  [key=0, style=solid];
m0_411 -> m0_412  [key=0, style=solid, color=green];
m0_411 -> m0_414  [key=0, style=solid, color=green];
m0_413 -> m0_411  [key=0, style=solid, color=green];
m0_413 -> m0_417  [key=2, style=dotted];
m0_413 -> m0_413  [key=1, style=dashed, color=darkseagreen4, label=current];
m0_416 -> m0_124  [key=0, style=bold, color=blue];
m0_235 -> m0_236  [key=0, style=solid];
m0_235 -> m0_230  [key=3, color=darkorchid, style=bold, label="method methodReturn System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator"];
m0_236 -> m0_237  [key=0, style=solid];
m0_236 -> m0_230  [key=2, style=dotted];
m0_237 -> m0_235  [key=0, style=bold, color=blue];
m0_400 -> m0_405  [key=0, style=solid];
m0_400 -> m0_366  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Type t"];
m0_400 -> m0_121  [key=3, color=darkorchid, style=bold, label="method methodReturn bool ShouldSkipDeserialized"];
m0_405 -> m0_406  [key=0, style=solid];
m0_406 -> m0_400  [key=0, style=bold, color=blue];
m0_104 -> m0_538  [key=0, style=solid];
m0_104 -> m0_542  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m0_104 -> m0_544  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.MemberSerialization"];
m0_104 -> m0_549  [key=3, color=darkorchid, style=bold, label="method methodReturn System.Collections.Generic.IList<Newtonsoft.Json.Serialization.JsonProperty> CreateProperties"];
m0_538 -> m0_539  [key=0, style=solid];
m0_538 -> m0_23  [key=2, style=dotted];
m0_538 -> m0_543  [key=1, style=dashed, color=darkseagreen4, label=members];
m0_542 -> m0_543  [key=0, style=solid];
m0_542 -> m0_286  [key=2, style=dotted];
m0_542 -> m0_548  [key=1, style=dashed, color=darkseagreen4, label=properties];
m0_542 -> m0_549  [key=1, style=dashed, color=darkseagreen4, label=properties];
m0_544 -> m0_545  [key=0, style=solid];
m0_544 -> m0_553  [key=2, style=dotted];
m0_544 -> m0_547  [key=1, style=dashed, color=darkseagreen4, label=property];
m0_544 -> m0_548  [key=1, style=dashed, color=darkseagreen4, label=property];
m0_539 -> m0_540  [key=0, style=solid];
m0_539 -> m0_541  [key=0, style=solid];
m0_543 -> m0_544  [key=0, style=solid];
m0_543 -> m0_549  [key=0, style=solid];
m0_540 -> m0_551  [key=0, style=solid];
m0_540 -> m0_213  [key=2, style=dotted];
m0_541 -> m0_542  [key=0, style=solid];
m0_541 -> m0_552  [key=2, style=dotted];
m0_541 -> m0_546  [key=1, style=dashed, color=darkseagreen4, label=nameTable];
m0_541 -> m0_547  [key=1, style=dashed, color=darkseagreen4, label=nameTable];
m0_546 -> m0_547  [key=0, style=solid];
m0_547 -> m0_548  [key=0, style=solid];
m0_547 -> m0_554  [key=2, style=dotted];
m0_548 -> m0_543  [key=0, style=solid];
m0_548 -> m0_288  [key=2, style=dotted];
m0_549 -> m0_550  [key=0, style=solid];
m0_549 -> m0_555  [key=2, style=dotted];
m0_549 -> m0_556  [key=2, style=dotted];
m0_549 -> m0_557  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m0_545 -> m0_546  [key=0, style=solid];
m0_545 -> m0_543  [key=0, style=solid];
m0_550 -> m0_551  [key=0, style=solid];
m0_551 -> m0_104  [key=0, style=bold, color=blue];
m0_225 -> m0_226  [key=0, style=solid];
m0_225 -> m0_227  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TEnumeratorKey, TEnumeratorValue>>"];
m0_226 -> m0_227  [key=0, style=solid];
m0_226 -> m0_18  [key=2, style=dotted];
m0_226 -> m0_229  [key=2, style=dotted];
m0_227 -> m0_228  [key=0, style=solid];
m0_228 -> m0_225  [key=0, style=bold, color=blue];
m0_702 -> m0_1  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.DefaultContractResolver"];
m0_702 -> m0_7  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.DefaultContractResolver"];
m0_702 -> m0_9  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.DefaultContractResolver"];
m0_702 -> m0_10  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.DefaultContractResolver"];
m0_702 -> m0_11  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.DefaultContractResolver"];
m0_702 -> m0_14  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.DefaultContractResolver"];
m0_702 -> m0_30  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.DefaultContractResolver"];
m0_702 -> m0_32  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.DefaultContractResolver"];
m0_702 -> m0_66  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.DefaultContractResolver"];
m0_702 -> m0_70  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.DefaultContractResolver"];
m0_702 -> m0_79  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.DefaultContractResolver"];
m0_702 -> m0_82  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.DefaultContractResolver"];
m0_702 -> m0_85  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.DefaultContractResolver"];
m0_702 -> m0_88  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.DefaultContractResolver"];
m0_702 -> m0_91  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.DefaultContractResolver"];
m0_702 -> m0_93  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.DefaultContractResolver"];
m0_702 -> m0_96  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.DefaultContractResolver"];
m0_702 -> m0_97  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.DefaultContractResolver"];
m0_702 -> m0_120  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.DefaultContractResolver"];
m0_702 -> m0_121  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.DefaultContractResolver"];
m0_702 -> m0_143  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.DefaultContractResolver"];
m0_702 -> m0_151  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.DefaultContractResolver"];
m0_702 -> m0_263  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.DefaultContractResolver"];
m0_702 -> m0_279  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.DefaultContractResolver"];
m0_702 -> m0_281  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.DefaultContractResolver"];
m0_702 -> m0_301  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.DefaultContractResolver"];
m0_702 -> m0_332  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.DefaultContractResolver"];
m0_702 -> m0_335  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.DefaultContractResolver"];
m0_702 -> m0_337  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.DefaultContractResolver"];
m0_702 -> m0_348  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.DefaultContractResolver"];
m0_702 -> m0_366  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.DefaultContractResolver"];
m0_702 -> m0_421  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.DefaultContractResolver"];
m0_702 -> m0_426  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.DefaultContractResolver"];
m0_702 -> m0_427  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.DefaultContractResolver"];
m0_702 -> m0_446  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.DefaultContractResolver"];
m0_702 -> m0_447  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.DefaultContractResolver"];
m0_702 -> m0_462  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.DefaultContractResolver"];
m0_702 -> m0_468  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.DefaultContractResolver"];
m0_702 -> m0_474  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.DefaultContractResolver"];
m0_702 -> m0_479  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.DefaultContractResolver"];
m0_702 -> m0_483  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.DefaultContractResolver"];
m0_702 -> m0_485  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.DefaultContractResolver"];
m0_702 -> m0_487  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.DefaultContractResolver"];
m0_702 -> m0_489  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.DefaultContractResolver"];
m0_702 -> m0_491  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.DefaultContractResolver"];
m0_702 -> m0_493  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.DefaultContractResolver"];
m0_702 -> m0_495  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.DefaultContractResolver"];
m0_702 -> m0_496  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.DefaultContractResolver"];
m0_702 -> m0_538  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.DefaultContractResolver"];
m0_702 -> m0_541  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.DefaultContractResolver"];
m0_702 -> m0_544  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.DefaultContractResolver"];
m0_702 -> m0_560  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.DefaultContractResolver"];
m0_702 -> m0_564  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.DefaultContractResolver"];
m0_702 -> m0_574  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.DefaultContractResolver"];
m0_702 -> m0_577  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.DefaultContractResolver"];
m0_702 -> m0_583  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.DefaultContractResolver"];
m0_702 -> m0_584  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.DefaultContractResolver"];
m0_702 -> m0_605  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.DefaultContractResolver"];
m0_702 -> m0_608  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.DefaultContractResolver"];
m0_702 -> m0_649  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.DefaultContractResolver"];
m0_702 -> m0_684  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.DefaultContractResolver"];
m0_702 -> m0_685  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.DefaultContractResolver"];
m0_702 -> m0_689  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.DefaultContractResolver"];
m0_702 -> m0_690  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.DefaultContractResolver"];
m0_702 -> m0_695  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.DefaultContractResolver"];
m0_702 -> m0_696  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.DefaultContractResolver"];
m0_702 -> m0_697  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.DefaultContractResolver"];
m0_702 -> m0_700  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.DefaultContractResolver"];
m0_703 -> m0_117  [key=1, style=dashed, color=darkseagreen4, label=namingStrategy];
m0_704 -> m0_204  [key=1, style=dashed, color=darkseagreen4, label=getExtensionDataDictionary];
m0_704 -> m0_219  [key=1, style=dashed, color=darkseagreen4, label=getExtensionDataDictionary];
m0_705 -> m0_206  [key=1, style=dashed, color=darkseagreen4, label=setExtensionDataDictionary];
m0_705 -> m0_209  [key=1, style=dashed, color=darkseagreen4, label=setExtensionDataDictionary];
m0_706 -> m0_207  [key=1, style=dashed, color=darkseagreen4, label="System.Reflection.MemberInfo"];
m0_707 -> m0_208  [key=1, style=dashed, color=darkseagreen4, label=createExtensionDataDictionary];
m0_708 -> m0_210  [key=1, style=dashed, color=darkseagreen4, label=setExtensionDataDictionaryValue];
m0_709 -> m0_222  [key=1, style=dashed, color=darkseagreen4, label=createEnumerableWrapper];
m0_710 -> m0_227  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.DefaultContractResolver.EnumerableDictionaryWrapper<TEnumeratorKey, TEnumeratorValue>"];
m0_710 -> m0_231  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.DefaultContractResolver.EnumerableDictionaryWrapper<TEnumeratorKey, TEnumeratorValue>"];
m0_710 -> m0_236  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Serialization.DefaultContractResolver.EnumerableDictionaryWrapper<TEnumeratorKey, TEnumeratorValue>"];
m0_711 -> m0_442  [key=1, style=dashed, color=darkseagreen4, label=namingStrategy];
m0_712 -> m0_667  [key=1, style=dashed, color=darkseagreen4, label=shouldSerializeCall];
m0_713 -> m0_682  [key=1, style=dashed, color=darkseagreen4, label=specifiedPropertyGet];
m2_221 -> m2_222  [key=0, style=solid];
m2_221 -> m2_223  [key=0, style=solid];
m2_221 -> m2_29  [key=2, style=dotted];
m2_222 -> m2_223  [key=0, style=solid];
m2_222 -> m2_29  [key=2, style=dotted];
m2_223 -> m2_221  [key=0, style=bold, color=blue];
m2_223 -> m2_211  [key=0, style=bold, color=blue];
m2_9 -> m2_10  [key=0, style=solid];
m2_10 -> m2_11  [key=0, style=solid];
m2_10 -> m2_21  [key=1, style=dashed, color=darkseagreen4, label=currentPartStartIndex];
m2_10 -> m2_281  [key=3, color=darkorchid, style=bold, label="Local variable int currentPartStartIndex"];
m2_11 -> m2_12  [key=0, style=solid];
m2_11 -> m2_27  [key=2, style=dotted];
m2_21 -> m2_22  [key=0, style=solid];
m2_21 -> m2_26  [key=0, style=solid];
m2_21 -> m2_28  [key=2, style=dotted];
m2_12 -> m2_13  [key=0, style=solid];
m2_12 -> m2_14  [key=0, style=solid];
m2_13 -> m2_26  [key=0, style=solid];
m2_14 -> m2_15  [key=0, style=solid];
m2_14 -> m2_21  [key=0, style=solid];
m2_15 -> m2_16  [key=0, style=solid];
m2_15 -> m2_17  [key=0, style=solid];
m2_16 -> m2_26  [key=0, style=solid];
m2_17 -> m2_18  [key=0, style=solid];
m2_18 -> m2_19  [key=0, style=solid];
m2_18 -> m2_21  [key=0, style=solid];
m2_19 -> m2_20  [key=0, style=solid];
m2_20 -> m2_21  [key=0, style=solid];
m2_22 -> m2_23  [key=0, style=solid];
m2_22 -> m2_25  [key=1, style=dashed, color=darkseagreen4, label=lastCharacterIndex];
m2_22 -> m2_281  [key=3, color=darkorchid, style=bold, label="Local variable int lastCharacterIndex"];
m2_23 -> m2_24  [key=0, style=solid];
m2_23 -> m2_27  [key=2, style=dotted];
m2_25 -> m2_26  [key=0, style=solid];
m2_25 -> m2_29  [key=2, style=dotted];
m2_24 -> m2_25  [key=0, style=solid];
m2_24 -> m2_26  [key=0, style=solid];
m2_26 -> m2_9  [key=0, style=bold, color=blue];
m2_239 -> m2_240  [key=0, style=solid];
m2_239 -> m2_221  [key=2, style=dotted];
m2_107 -> m2_193  [key=0, style=solid];
m2_107 -> m2_202  [key=1, style=dashed, color=darkseagreen4, label=char];
m2_107 -> m2_96  [key=3, color=darkorchid, style=bold, label="Parameter variable char indexerCloseChar"];
m2_107 -> m2_198  [key=1, style=dashed, color=green, label=bool];
m2_107 -> m2_204  [key=1, style=dashed, color=green, label=bool];
m2_107 -> m2_88  [key=3, color=darkorchid, style=bold, label="Parameter variable bool scan"];
m2_193 -> m2_194  [key=0, style=solid];
m2_202 -> m2_203  [key=0, style=solid];
m2_202 -> m2_204  [key=0, style=solid, color=green];
m2_194 -> m2_195  [key=0, style=solid];
m2_194 -> m2_105  [key=2, style=dotted];
m2_195 -> m2_196  [key=0, style=solid];
m2_195 -> m2_197  [key=0, style=solid];
m2_196 -> m2_205  [key=0, style=solid];
m2_196 -> m2_29  [key=2, style=dotted];
m2_196 -> m2_207  [key=0, style=solid];
m2_197 -> m2_198  [key=0, style=solid, color=green];
m2_198 -> m2_199  [key=0, style=solid, color=green];
m2_198 -> m2_206  [key=2, style=dotted, color=red];
m2_198 -> m2_204  [key=1, style=dashed, color=red, label=expression];
m2_198 -> m2_208  [key=2, style=dotted, color=green];
m2_198 -> m2_205  [key=1, style=dashed, color=green, label=expression];
m2_199 -> m2_200  [key=0, style=solid];
m2_204 -> m2_205  [key=0, style=solid, color=green];
m2_204 -> m2_207  [key=2, style=dotted, color=red];
m2_204 -> m2_206  [key=0, style=solid, color=green];
m2_200 -> m2_201  [key=0, style=solid];
m2_200 -> m2_105  [key=2, style=dotted];
m2_201 -> m2_202  [key=0, style=solid];
m2_201 -> m2_27  [key=2, style=dotted];
m2_203 -> m2_205  [key=0, style=solid];
m2_203 -> m2_29  [key=2, style=dotted];
m2_203 -> m2_207  [key=0, style=solid];
m2_205 -> m2_107  [key=0, style=bold, color=blue];
m2_205 -> m2_207  [key=0, style=solid, color=green];
m2_206 -> m2_240  [key=0, style=solid];
m2_206 -> m2_250  [key=3, color=darkorchid, style=bold, label="method methodReturn Newtonsoft.Json.Linq.JsonPath.QueryExpression ParseExpression"];
m2_206 -> m2_207  [key=0, style=solid, color=green];
m2_206 -> m2_210  [key=2, style=dotted, color=green];
m2_240 -> m2_241  [key=0, style=solid];
m2_240 -> m2_254  [key=1, style=dashed, color=darkseagreen4, label=rootExpression];
m2_240 -> m2_263  [key=1, style=dashed, color=darkseagreen4, label=rootExpression];
m2_240 -> m2_273  [key=1, style=dashed, color=darkseagreen4, label=rootExpression];
m2_240 -> m2_110  [key=3, color=darkorchid, style=bold, label="Local variable Newtonsoft.Json.Linq.JsonPath.QueryExpression rootExpression"];
m2_240 -> m2_227  [key=0, style=bold, color=blue];
m2_241 -> m2_242  [key=0, style=solid];
m2_241 -> m2_252  [key=1, style=dashed, color=darkseagreen4, label=parentExpression];
m2_241 -> m2_253  [key=1, style=dashed, color=darkseagreen4, label=parentExpression];
m2_241 -> m2_259  [key=1, style=dashed, color=darkseagreen4, label=parentExpression];
m2_241 -> m2_261  [key=1, style=dashed, color=darkseagreen4, label=parentExpression];
m2_241 -> m2_265  [key=1, style=dashed, color=darkseagreen4, label=parentExpression];
m2_241 -> m2_269  [key=1, style=dashed, color=darkseagreen4, label=parentExpression];
m2_241 -> m2_271  [key=1, style=dashed, color=darkseagreen4, label=parentExpression];
m2_241 -> m2_275  [key=1, style=dashed, color=darkseagreen4, label=parentExpression];
m2_241 -> m2_110  [key=3, color=darkorchid, style=bold, label="Local variable Newtonsoft.Json.Linq.JsonPath.CompositeExpression parentExpression"];
m2_241 -> m2_260  [key=3, color=darkorchid, style=bold, label="Local variable Newtonsoft.Json.Linq.JsonPath.CompositeExpression parentExpression"];
m2_241 -> m2_270  [key=3, color=darkorchid, style=bold, label="Local variable Newtonsoft.Json.Linq.JsonPath.CompositeExpression parentExpression"];
m2_254 -> m2_277  [key=0, style=solid];
m2_254 -> m2_255  [key=0, style=solid];
m2_254 -> m2_259  [key=0, style=solid];
m2_263 -> m2_264  [key=0, style=solid];
m2_263 -> m2_265  [key=0, style=solid];
m2_263 -> m2_281  [key=2, style=dotted];
m2_273 -> m2_274  [key=0, style=solid];
m2_273 -> m2_275  [key=0, style=solid];
m2_273 -> m2_281  [key=2, style=dotted];
m2_242 -> m2_243  [key=0, style=solid, color=red];
m2_242 -> m2_276  [key=0, style=solid];
m2_252 -> m2_253  [key=0, style=solid, color=green];
m2_252 -> m2_255  [key=0, style=solid];
m2_252 -> m2_227  [key=2, style=dotted, color=green];
m2_253 -> m2_254  [key=0, style=solid];
m2_253 -> m2_87  [key=2, style=dotted];
m2_253 -> m2_279  [key=2, style=dotted];
m2_253 -> m2_256  [key=1, style=dashed, color=darkseagreen4, label=booleanExpression];
m2_253 -> m2_258  [key=1, style=dashed, color=darkseagreen4, label=booleanExpression];
m2_253 -> m2_268  [key=1, style=dashed, color=darkseagreen4, label=booleanExpression];
m2_253 -> m2_278  [key=1, style=dashed, color=darkseagreen4, label=booleanExpression];
m2_259 -> m2_260  [key=0, style=solid];
m2_259 -> m2_265  [key=0, style=solid];
m2_259 -> m2_269  [key=0, style=solid];
m2_261 -> m2_262  [key=0, style=solid];
m2_261 -> m2_87  [key=2, style=dotted];
m2_261 -> m2_280  [key=0, style=solid];
m2_261 -> m2_221  [key=2, style=dotted];
m2_265 -> m2_266  [key=0, style=solid];
m2_265 -> m2_87  [key=2, style=dotted];
m2_265 -> m2_278  [key=1, style=dashed, color=darkseagreen4, label=parentExpression];
m2_265 -> m2_268  [key=1, style=dashed, color=darkseagreen4, label=parentExpression];
m2_265 -> m2_272  [key=1, style=dashed, color=darkseagreen4, label=parentExpression];
m2_265 -> m2_274  [key=1, style=dashed, color=darkseagreen4, label=parentExpression];
m2_265 -> m2_267  [key=1, style=dashed, color=darkseagreen4, label=parentExpression];
m2_269 -> m2_270  [key=0, style=solid];
m2_269 -> m2_275  [key=0, style=solid];
m2_269 -> m2_245  [key=0, style=solid];
m2_271 -> m2_272  [key=0, style=solid];
m2_271 -> m2_87  [key=2, style=dotted];
m2_271 -> m2_280  [key=0, style=solid];
m2_271 -> m2_221  [key=2, style=dotted];
m2_275 -> m2_242  [key=0, style=solid];
m2_275 -> m2_87  [key=2, style=dotted];
m2_275 -> m2_278  [key=1, style=dashed, color=darkseagreen4, label=parentExpression];
m2_275 -> m2_276  [key=0, style=solid];
m2_275 -> m2_277  [key=1, style=dashed, color=darkseagreen4, label=parentExpression];
m2_243 -> m2_244  [key=0, style=solid, color=red];
m2_243 -> m2_224  [key=2, style=dotted, color=red];
m2_243 -> m2_250  [key=1, style=dashed, color=red, label=left];
m2_243 -> m2_257  [key=1, style=dashed, color=darkseagreen4, label=rootExpression];
m2_243 -> m2_266  [key=1, style=dashed, color=darkseagreen4, label=rootExpression];
m2_243 -> m2_276  [key=1, style=dashed, color=darkseagreen4, label=rootExpression];
m2_243 -> m2_110  [key=3, color=darkorchid, style=bold, label="Local variable Newtonsoft.Json.Linq.JsonPath.QueryExpression rootExpression"];
m2_276 -> m2_277  [key=0, style=solid];
m2_276 -> m2_29  [key=2, style=dotted];
m2_276 -> m2_278  [key=0, style=solid];
m2_244 -> m2_245  [key=0, style=solid];
m2_244 -> m2_250  [key=1, style=dashed, color=darkseagreen4, label=right];
m2_244 -> m2_110  [key=3, color=darkorchid, style=bold, label="Local variable Newtonsoft.Json.Linq.JsonPath.CompositeExpression parentExpression"];
m2_244 -> m2_224  [key=3, color=darkorchid, style=bold, label="Local variable object right"];
m2_244 -> m2_255  [key=1, style=dashed, color=darkseagreen4, label=parentExpression];
m2_244 -> m2_256  [key=1, style=dashed, color=darkseagreen4, label=parentExpression];
m2_244 -> m2_262  [key=1, style=dashed, color=darkseagreen4, label=parentExpression];
m2_244 -> m2_264  [key=1, style=dashed, color=darkseagreen4, label=parentExpression];
m2_244 -> m2_268  [key=1, style=dashed, color=darkseagreen4, label=parentExpression];
m2_244 -> m2_272  [key=1, style=dashed, color=darkseagreen4, label=parentExpression];
m2_244 -> m2_274  [key=1, style=dashed, color=darkseagreen4, label=parentExpression];
m2_244 -> m2_278  [key=1, style=dashed, color=darkseagreen4, label=parentExpression];
m2_244 -> m2_263  [key=3, color=darkorchid, style=bold, label="Local variable Newtonsoft.Json.Linq.JsonPath.CompositeExpression parentExpression"];
m2_244 -> m2_273  [key=3, color=darkorchid, style=bold, label="Local variable Newtonsoft.Json.Linq.JsonPath.CompositeExpression parentExpression"];
m2_250 -> m2_251  [key=0, style=solid];
m2_250 -> m2_279  [key=2, style=dotted];
m2_250 -> m2_253  [key=1, style=dashed, color=darkseagreen4, label=booleanExpression];
m2_250 -> m2_255  [key=1, style=dashed, color=darkseagreen4, label=booleanExpression];
m2_250 -> m2_265  [key=1, style=dashed, color=darkseagreen4, label=booleanExpression];
m2_250 -> m2_275  [key=1, style=dashed, color=darkseagreen4, label=booleanExpression];
m2_245 -> m2_246  [key=0, style=solid, color=green];
m2_245 -> m2_278  [key=3, color=darkorchid, style=bold, label="Local variable Newtonsoft.Json.Linq.JsonPath.QueryOperator op"];
m2_245 -> m2_279  [key=0, style=solid];
m2_246 -> m2_247  [key=0, style=solid, color=green];
m2_246 -> m2_248  [key=0, style=solid];
m2_246 -> m2_227  [key=2, style=dotted, color=green];
m2_246 -> m2_253  [key=1, style=dashed, color=green, label=left];
m2_247 -> m2_250  [key=0, style=solid];
m2_247 -> m2_227  [key=3, color=darkorchid, style=bold, label="Local variable object right"];
m2_247 -> m2_248  [key=0, style=solid];
m2_247 -> m2_253  [key=1, style=dashed, color=darkseagreen4, label=right];
m2_247 -> m2_110  [key=3, color=darkorchid, style=bold, label="Local variable object right"];
m2_248 -> m2_249  [key=0, style=solid, color=red];
m2_248 -> m2_278  [key=2, style=dotted];
m2_248 -> m2_250  [key=1, style=dashed, color=darkseagreen4, label=op];
m2_249 -> m2_250  [key=0, style=solid, color=red];
m2_249 -> m2_224  [key=2, style=dotted, color=red];
m2_249 -> m2_251  [key=0, style=solid];
m2_251 -> m2_252  [key=0, style=solid, color=green];
m2_251 -> m2_256  [key=0, style=solid];
m2_251 -> m2_253  [key=1, style=dashed, color=darkseagreen4, label=op];
m2_251 -> m2_278  [key=2, style=dotted];
m2_255 -> m2_277  [key=0, style=solid];
m2_255 -> m2_256  [key=0, style=solid];
m2_255 -> m2_258  [key=0, style=solid];
m2_256 -> m2_257  [key=0, style=solid];
m2_256 -> m2_266  [key=0, style=solid];
m2_256 -> m2_87  [key=2, style=dotted];
m2_257 -> m2_258  [key=0, style=solid];
m2_257 -> m2_259  [key=0, style=solid];
m2_257 -> m2_280  [key=2, style=dotted];
m2_266 -> m2_267  [key=0, style=solid];
m2_266 -> m2_242  [key=0, style=solid];
m2_266 -> m2_268  [key=0, style=solid];
m2_258 -> m2_277  [key=0, style=solid];
m2_258 -> m2_221  [key=2, style=dotted];
m2_258 -> m2_280  [key=0, style=solid];
m2_260 -> m2_261  [key=0, style=solid];
m2_260 -> m2_281  [key=2, style=dotted];
m2_260 -> m2_262  [key=1, style=dashed, color=darkseagreen4, label=andExpression];
m2_260 -> m2_280  [key=2, style=dotted];
m2_262 -> m2_263  [key=0, style=solid];
m2_262 -> m2_264  [key=1, style=dashed, color=darkseagreen4, label=parentExpression];
m2_262 -> m2_265  [key=1, style=dashed, color=darkseagreen4, label=parentExpression];
m2_262 -> m2_269  [key=1, style=dashed, color=darkseagreen4, label=parentExpression];
m2_262 -> m2_271  [key=1, style=dashed, color=darkseagreen4, label=parentExpression];
m2_262 -> m2_275  [key=1, style=dashed, color=darkseagreen4, label=parentExpression];
m2_262 -> m2_268  [key=0, style=solid];
m2_264 -> m2_265  [key=0, style=solid];
m2_264 -> m2_273  [key=1, style=dashed, color=darkseagreen4, label=rootExpression];
m2_264 -> m2_87  [key=2, style=dotted];
m2_267 -> m2_268  [key=0, style=solid];
m2_267 -> m2_269  [key=0, style=solid];
m2_267 -> m2_280  [key=2, style=dotted];
m2_267 -> m2_276  [key=1, style=dashed, color=darkseagreen4, label=rootExpression];
m2_268 -> m2_277  [key=0, style=solid];
m2_268 -> m2_221  [key=2, style=dotted];
m2_268 -> m2_269  [key=0, style=solid];
m2_268 -> m2_87  [key=2, style=dotted];
m2_270 -> m2_271  [key=0, style=solid];
m2_270 -> m2_281  [key=2, style=dotted];
m2_270 -> m2_272  [key=1, style=dashed, color=darkseagreen4, label=orExpression];
m2_270 -> m2_280  [key=2, style=dotted];
m2_272 -> m2_273  [key=0, style=solid];
m2_272 -> m2_274  [key=1, style=dashed, color=darkseagreen4, label=parentExpression];
m2_272 -> m2_275  [key=1, style=dashed, color=darkseagreen4, label=parentExpression];
m2_272 -> m2_278  [key=0, style=solid];
m2_274 -> m2_275  [key=0, style=solid];
m2_274 -> m2_87  [key=2, style=dotted];
m2_277 -> m2_206  [key=0, style=bold, color=blue];
m2_277 -> m2_278  [key=0, style=solid];
m2_394 -> m2_395  [key=0, style=solid];
m2_394 -> m2_397  [key=3, color=darkorchid, style=bold, label="method methodReturn System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken> Evaluate"];
m2_395 -> m2_396  [key=0, style=solid];
m2_395 -> m2_397  [key=2, style=dotted];
m2_396 -> m2_394  [key=0, style=bold, color=blue];
m2_397 -> m2_398  [key=0, style=solid];
m2_397 -> m2_399  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>"];
m2_397 -> m2_400  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JToken"];
m2_397 -> m2_394  [key=3, color=darkorchid, style=bold, label="Parameter variable bool errorWhenNoMatch"];
m2_398 -> m2_399  [key=0, style=solid];
m2_398 -> m2_400  [key=1, style=dashed, color=darkseagreen4, label=current];
m2_398 -> m2_401  [key=1, style=dashed, color=darkseagreen4, label=current];
m2_399 -> m2_400  [key=0, style=solid];
m2_399 -> m2_401  [key=0, style=solid];
m2_400 -> m2_399  [key=0, style=solid];
m2_400 -> m2_403  [key=2, style=dotted];
m2_400 -> m2_400  [key=1, style=dashed, color=darkseagreen4, label=current];
m2_400 -> m2_401  [key=1, style=dashed, color=darkseagreen4, label=current];
m2_401 -> m2_402  [key=0, style=solid];
m2_402 -> m2_397  [key=0, style=bold, color=blue];
m2_86 -> m2_90  [key=0, style=solid];
m2_86 -> m2_40  [key=3, color=darkorchid, style=bold, label="Parameter variable string member"];
m2_86 -> m2_58  [key=3, color=darkorchid, style=bold, label="Parameter variable string member"];
m2_86 -> m2_77  [key=3, color=darkorchid, style=bold, label="Parameter variable string member"];
m2_86 -> m2_372  [key=3, color=darkorchid, style=bold, label="Parameter variable string member"];
m2_86 -> m2_30  [key=3, color=darkorchid, style=bold, label="Parameter variable bool scan"];
m2_86 -> m2_106  [key=3, color=darkorchid, style=bold, label="Parameter variable bool scan"];
m2_90 -> m2_91  [key=0, style=solid];
m2_90 -> m2_93  [key=2, style=dotted];
m2_90 -> m2_94  [key=2, style=dotted];
m2_91 -> m2_92  [key=0, style=solid];
m2_92 -> m2_86  [key=0, style=bold, color=blue];
m2_208 -> m2_246  [key=1, style=dashed, color=green, label=bool];
m2_208 -> m2_252  [key=1, style=dashed, color=green, label=bool];
m2_208 -> m2_107  [key=3, color=darkorchid, style=bold, label="Parameter variable bool scan"];
m2_208 -> m2_243  [key=0, style=solid];
m2_208 -> m2_253  [key=3, color=darkorchid, style=bold, label="method methodReturn Newtonsoft.Json.Linq.JsonPath.QueryExpression ParseExpression"];
m2_208 -> m2_209  [key=0, style=solid];
m2_208 -> m2_21  [key=3, color=darkorchid, style=bold, label="method methodReturn bool TryParseExpression"];
m2_208 -> m2_217  [key=3, color=darkorchid, style=bold, label="method methodReturn bool TryParseExpression"];
m2_208 -> m2_226  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter> expressionPath"];
m2_278 -> m2_245  [key=0, style=solid];
m2_278 -> m2_87  [key=2, style=dotted];
m2_278 -> m2_354  [key=0, style=solid];
m2_278 -> m2_357  [key=3, color=darkorchid, style=bold, label="method methodReturn Newtonsoft.Json.Linq.JsonPath.QueryOperator ParseOperator"];
m2_278 -> m2_359  [key=3, color=darkorchid, style=bold, label="method methodReturn Newtonsoft.Json.Linq.JsonPath.QueryOperator ParseOperator"];
m2_278 -> m2_361  [key=3, color=darkorchid, style=bold, label="method methodReturn Newtonsoft.Json.Linq.JsonPath.QueryOperator ParseOperator"];
m2_278 -> m2_363  [key=3, color=darkorchid, style=bold, label="method methodReturn Newtonsoft.Json.Linq.JsonPath.QueryOperator ParseOperator"];
m2_278 -> m2_365  [key=3, color=darkorchid, style=bold, label="method methodReturn Newtonsoft.Json.Linq.JsonPath.QueryOperator ParseOperator"];
m2_278 -> m2_367  [key=3, color=darkorchid, style=bold, label="method methodReturn Newtonsoft.Json.Linq.JsonPath.QueryOperator ParseOperator"];
m2_279 -> m2_280  [key=0, style=solid];
m2_279 -> m2_29  [key=2, style=dotted];
m2_280 -> m2_208  [key=0, style=bold, color=blue];
m2_280 -> m2_346  [key=0, style=solid];
m2_280 -> m2_347  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_280 -> m2_257  [key=3, color=darkorchid, style=bold, label="Parameter variable string s"];
m2_280 -> m2_267  [key=3, color=darkorchid, style=bold, label="Parameter variable string s"];
m2_280 -> m2_306  [key=3, color=darkorchid, style=bold, label="Parameter variable string s"];
m2_280 -> m2_310  [key=3, color=darkorchid, style=bold, label="Parameter variable string s"];
m2_280 -> m2_314  [key=3, color=darkorchid, style=bold, label="Parameter variable string s"];
m2_280 -> m2_356  [key=3, color=darkorchid, style=bold, label="Parameter variable string s"];
m2_280 -> m2_358  [key=3, color=darkorchid, style=bold, label="Parameter variable string s"];
m2_280 -> m2_360  [key=3, color=darkorchid, style=bold, label="Parameter variable string s"];
m2_280 -> m2_362  [key=3, color=darkorchid, style=bold, label="Parameter variable string s"];
m2_280 -> m2_364  [key=3, color=darkorchid, style=bold, label="Parameter variable string s"];
m2_280 -> m2_366  [key=3, color=darkorchid, style=bold, label="Parameter variable string s"];
m2_280 -> m2_21  [key=3, color=darkorchid, style=bold, label="method methodReturn bool Match"];
m2_280 -> m2_217  [key=3, color=darkorchid, style=bold, label="method methodReturn bool Match"];
m2_280 -> m2_220  [key=3, color=darkorchid, style=bold, label="method methodReturn bool Match"];
m2_280 -> m2_270  [key=3, color=darkorchid, style=bold, label="Parameter variable string s"];
m2_280 -> m2_260  [key=3, color=darkorchid, style=bold, label="Parameter variable string s"];
m2_211 -> m2_227  [key=3, color=darkorchid, style=bold, label="Parameter variable bool scan"];
m2_211 -> m2_229  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter> expressionPath"];
m2_211 -> m2_212  [key=0, style=solid];
m2_211 -> m2_21  [key=3, color=darkorchid, style=bold, label="method methodReturn bool TryParseExpression"];
m2_211 -> m2_220  [key=3, color=darkorchid, style=bold, label="method methodReturn bool TryParseExpression"];
m2_211 -> m2_216  [key=0, style=solid];
m2_211 -> m2_87  [key=2, style=dotted];
m2_212 -> m2_213  [key=0, style=solid];
m2_212 -> m2_215  [key=0, style=solid];
m2_212 -> m2_214  [key=0, style=solid];
m2_220 -> m2_28  [key=2, style=dotted];
m2_220 -> m2_221  [key=0, style=solid];
m2_220 -> m2_222  [key=0, style=solid];
m2_220 -> m2_208  [key=0, style=bold, color=blue];
m2_213 -> m2_223  [key=1, style=dashed, color=darkseagreen4, label="out System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>"];
m2_213 -> m2_220  [key=1, style=dashed, color=darkseagreen4, label="out System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>"];
m2_213 -> m2_214  [key=0, style=solid];
m2_213 -> m2_8  [key=2, style=dotted];
m2_213 -> m2_216  [key=0, style=solid];
m2_213 -> m2_217  [key=1, style=dashed, color=darkseagreen4, label="out System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>"];
m2_216 -> m2_223  [key=1, style=dashed, color=darkseagreen4, label="out System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>"];
m2_216 -> m2_220  [key=1, style=dashed, color=darkseagreen4, label="out System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>"];
m2_216 -> m2_219  [key=0, style=solid];
m2_216 -> m2_8  [key=2, style=dotted];
m2_216 -> m2_217  [key=0, style=solid];
m2_217 -> m2_223  [key=1, style=dashed, color=darkseagreen4, label="out System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>"];
m2_217 -> m2_220  [key=1, style=dashed, color=darkseagreen4, label="out System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>"];
m2_217 -> m2_218  [key=0, style=solid];
m2_217 -> m2_219  [key=0, style=solid];
m2_217 -> m2_28  [key=2, style=dotted];
m2_218 -> m2_223  [key=0, style=solid];
m2_218 -> m2_220  [key=0, style=solid];
m2_218 -> m2_29  [key=2, style=dotted];
m2_215 -> m2_216  [key=0, style=solid];
m2_215 -> m2_217  [key=0, style=solid];
m2_215 -> m2_220  [key=0, style=solid];
m2_219 -> m2_220  [key=0, style=solid];
m2_214 -> m2_219  [key=0, style=solid];
m2_214 -> m2_87  [key=2, style=dotted];
m2_214 -> m2_215  [key=0, style=solid];
m2_214 -> m2_217  [key=1, style=dashed, color=darkseagreen4, label="out System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>"];
m2_214 -> m2_220  [key=1, style=dashed, color=darkseagreen4, label="out System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>"];
m2_346 -> m2_347  [key=0, style=solid];
m2_346 -> m2_348  [key=1, style=dashed, color=darkseagreen4, label=currentPosition];
m2_346 -> m2_349  [key=1, style=dashed, color=darkseagreen4, label=currentPosition];
m2_346 -> m2_351  [key=1, style=dashed, color=darkseagreen4, label=currentPosition];
m2_346 -> m2_281  [key=3, color=darkorchid, style=bold, label="Local variable int currentPosition"];
m2_347 -> m2_348  [key=0, style=solid];
m2_347 -> m2_351  [key=0, style=solid];
m2_348 -> m2_349  [key=0, style=solid];
m2_348 -> m2_350  [key=0, style=solid];
m2_349 -> m2_347  [key=0, style=solid];
m2_349 -> m2_349  [key=1, style=dashed, color=darkseagreen4, label=currentPosition];
m2_349 -> m2_351  [key=1, style=dashed, color=darkseagreen4, label=currentPosition];
m2_351 -> m2_352  [key=0, style=solid];
m2_350 -> m2_353  [key=0, style=solid];
m2_352 -> m2_353  [key=0, style=solid];
m2_353 -> m2_280  [key=0, style=bold, color=blue];
m2_281 -> m2_346  [key=3, color=darkorchid, style=bold, label="Field variable int _currentIndex"];
m2_207 -> m2_107  [key=0, style=bold, color=blue];
m2_88 -> m2_102  [key=1, style=dashed, color=green, label=bool];
m2_88 -> m2_95  [key=0, style=solid];
m2_88 -> m2_96  [key=1, style=dashed, color=darkseagreen4, label=char];
m2_88 -> m2_100  [key=1, style=dashed, color=darkseagreen4, label=bool];
m2_88 -> m2_35  [key=3, color=darkorchid, style=bold, label="Parameter variable char indexerOpenChar"];
m2_88 -> m2_30  [key=3, color=darkorchid, style=bold, label="Parameter variable bool scan"];
m2_88 -> m2_106  [key=3, color=darkorchid, style=bold, label="method methodReturn Newtonsoft.Json.Linq.JsonPath.PathFilter ParseIndexer"];
m2_88 -> m2_107  [key=3, color=darkorchid, style=bold, label="method methodReturn Newtonsoft.Json.Linq.JsonPath.PathFilter ParseIndexer"];
m2_88 -> m2_108  [key=3, color=darkorchid, style=bold, label="method methodReturn Newtonsoft.Json.Linq.JsonPath.PathFilter ParseIndexer"];
m2_95 -> m2_96  [key=0, style=solid];
m2_96 -> m2_97  [key=0, style=solid];
m2_96 -> m2_100  [key=1, style=dashed, color=darkseagreen4, label=indexerCloseChar];
m2_96 -> m2_102  [key=1, style=dashed, color=green, label=indexerCloseChar];
m2_96 -> m2_103  [key=1, style=dashed, color=darkseagreen4, label=indexerCloseChar];
m2_100 -> m2_104  [key=0, style=solid];
m2_100 -> m2_106  [key=2, style=dotted];
m2_97 -> m2_98  [key=0, style=solid];
m2_97 -> m2_105  [key=2, style=dotted];
m2_102 -> m2_104  [key=0, style=solid, color=green];
m2_102 -> m2_107  [key=2, style=dotted, color=green];
m2_103 -> m2_104  [key=0, style=solid];
m2_103 -> m2_108  [key=2, style=dotted];
m2_98 -> m2_99  [key=0, style=solid];
m2_98 -> m2_27  [key=2, style=dotted];
m2_99 -> m2_100  [key=0, style=solid];
m2_99 -> m2_101  [key=0, style=solid];
m2_101 -> m2_102  [key=0, style=solid, color=green];
m2_101 -> m2_103  [key=0, style=solid];
m2_104 -> m2_88  [key=0, style=bold, color=blue];
m2_210 -> m2_211  [key=0, style=solid];
m2_210 -> m2_8  [key=2, style=dotted];
m2_210 -> m2_217  [key=1, style=dashed, color=darkseagreen4, label="out System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>"];
m2_210 -> m2_220  [key=1, style=dashed, color=darkseagreen4, label="out System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>"];
m2_238 -> m2_282  [key=0, style=solid];
m2_238 -> m2_231  [key=3, color=darkorchid, style=bold, label="Parameter variable object value"];
m2_238 -> m2_320  [key=3, color=darkorchid, style=bold, label="Parameter variable object value"];
m2_238 -> m2_295  [key=3, color=darkorchid, style=bold, label="Parameter variable object value"];
m2_238 -> m2_299  [key=3, color=darkorchid, style=bold, label="Parameter variable object value"];
m2_238 -> m2_217  [key=3, color=darkorchid, style=bold, label="method methodReturn bool TryParseValue"];
m2_238 -> m2_296  [key=3, color=darkorchid, style=bold, label="method methodReturn bool TryParseValue"];
m2_238 -> m2_300  [key=3, color=darkorchid, style=bold, label="method methodReturn bool TryParseValue"];
m2_238 -> m2_21  [key=3, color=darkorchid, style=bold, label="method methodReturn bool TryParseValue"];
m2_238 -> m2_234  [key=3, color=darkorchid, style=bold, label="Parameter variable object value"];
m2_238 -> m2_220  [key=3, color=darkorchid, style=bold, label="method methodReturn bool TryParseValue"];
m2_238 -> m2_240  [key=0, style=solid];
m2_238 -> m2_239  [key=2, style=dotted];
m2_282 -> m2_283  [key=0, style=solid];
m2_282 -> m2_286  [key=1, style=dashed, color=darkseagreen4, label=currentChar];
m2_282 -> m2_288  [key=1, style=dashed, color=darkseagreen4, label=currentChar];
m2_282 -> m2_305  [key=1, style=dashed, color=darkseagreen4, label=currentChar];
m2_282 -> m2_309  [key=1, style=dashed, color=darkseagreen4, label=currentChar];
m2_282 -> m2_313  [key=1, style=dashed, color=darkseagreen4, label=currentChar];
m2_283 -> m2_284  [key=0, style=solid];
m2_283 -> m2_286  [key=0, style=solid];
m2_286 -> m2_287  [key=0, style=solid];
m2_286 -> m2_305  [key=0, style=solid];
m2_286 -> m2_188  [key=2, style=dotted];
m2_288 -> m2_289  [key=0, style=solid];
m2_288 -> m2_322  [key=2, style=dotted];
m2_305 -> m2_306  [key=0, style=solid];
m2_305 -> m2_309  [key=0, style=solid];
m2_309 -> m2_310  [key=0, style=solid];
m2_309 -> m2_313  [key=0, style=solid];
m2_313 -> m2_314  [key=0, style=solid];
m2_313 -> m2_317  [key=0, style=solid];
m2_284 -> m2_285  [key=0, style=solid];
m2_284 -> m2_320  [key=2, style=dotted];
m2_285 -> m2_319  [key=0, style=solid];
m2_287 -> m2_288  [key=0, style=solid];
m2_287 -> m2_321  [key=2, style=dotted];
m2_287 -> m2_293  [key=1, style=dashed, color=darkseagreen4, label=sb];
m2_287 -> m2_303  [key=1, style=dashed, color=darkseagreen4, label=sb];
m2_293 -> m2_294  [key=0, style=solid];
m2_293 -> m2_323  [key=2, style=dotted];
m2_293 -> m2_296  [key=1, style=dashed, color=darkseagreen4, label=numberText];
m2_293 -> m2_300  [key=1, style=dashed, color=darkseagreen4, label=numberText];
m2_303 -> m2_304  [key=0, style=solid];
m2_303 -> m2_322  [key=2, style=dotted];
m2_289 -> m2_290  [key=0, style=solid];
m2_290 -> m2_291  [key=0, style=solid];
m2_290 -> m2_317  [key=0, style=solid];
m2_291 -> m2_292  [key=0, style=solid];
m2_291 -> m2_303  [key=1, style=dashed, color=darkseagreen4, label=currentChar];
m2_317 -> m2_318  [key=0, style=solid];
m2_317 -> m2_319  [key=1, style=dashed, color=darkseagreen4, label="out object"];
m2_292 -> m2_293  [key=0, style=solid];
m2_292 -> m2_303  [key=0, style=solid];
m2_294 -> m2_295  [key=0, style=solid];
m2_294 -> m2_299  [key=0, style=solid];
m2_294 -> m2_324  [key=2, style=dotted];
m2_296 -> m2_297  [key=0, style=solid];
m2_296 -> m2_325  [key=2, style=dotted];
m2_296 -> m2_298  [key=1, style=dashed, color=darkseagreen4, label=result];
m2_300 -> m2_301  [key=0, style=solid];
m2_300 -> m2_326  [key=2, style=dotted];
m2_300 -> m2_302  [key=1, style=dashed, color=darkseagreen4, label=result];
m2_295 -> m2_296  [key=0, style=solid];
m2_299 -> m2_300  [key=0, style=solid];
m2_297 -> m2_298  [key=0, style=solid];
m2_298 -> m2_319  [key=0, style=solid];
m2_301 -> m2_302  [key=0, style=solid];
m2_302 -> m2_319  [key=0, style=solid];
m2_304 -> m2_290  [key=0, style=solid];
m2_306 -> m2_307  [key=0, style=solid];
m2_306 -> m2_317  [key=0, style=solid];
m2_306 -> m2_280  [key=2, style=dotted];
m2_307 -> m2_308  [key=0, style=solid];
m2_308 -> m2_319  [key=0, style=solid];
m2_310 -> m2_311  [key=0, style=solid];
m2_310 -> m2_317  [key=0, style=solid];
m2_310 -> m2_280  [key=2, style=dotted];
m2_311 -> m2_312  [key=0, style=solid];
m2_312 -> m2_319  [key=0, style=solid];
m2_314 -> m2_315  [key=0, style=solid];
m2_314 -> m2_317  [key=0, style=solid];
m2_314 -> m2_280  [key=2, style=dotted];
m2_315 -> m2_316  [key=0, style=solid];
m2_316 -> m2_319  [key=0, style=solid];
m2_318 -> m2_319  [key=0, style=solid];
m2_319 -> m2_238  [key=0, style=bold, color=blue];
m2_227 -> m2_230  [key=1, style=dashed, color=red, label=expressionPath];
m2_227 -> m2_208  [key=3, color=darkorchid, style=bold, label="Parameter variable bool scan"];
m2_227 -> m2_228  [key=0, style=solid, color=red];
m2_227 -> m2_229  [key=3, color=darkorchid, style=bold, label="method methodReturn object ParseSide"];
m2_227 -> m2_231  [key=0, style=solid, color=red];
m2_230 -> m2_231  [key=0, style=solid, color=green];
m2_230 -> m2_234  [key=0, style=solid, color=green];
m2_230 -> m2_211  [key=2, style=dotted, color=green];
m2_230 -> m2_233  [key=1, style=dashed, color=green, label=expressionPath];
m2_230 -> m2_237  [key=0, style=solid];
m2_229 -> m2_230  [key=0, style=solid, color=green];
m2_229 -> m2_105  [key=2, style=dotted];
m2_231 -> m2_232  [key=0, style=solid];
m2_231 -> m2_27  [key=2, style=dotted];
m2_234 -> m2_235  [key=0, style=solid];
m2_234 -> m2_105  [key=2, style=dotted];
m2_233 -> m2_240  [key=0, style=solid];
m2_233 -> m2_234  [key=0, style=solid];
m2_233 -> m2_27  [key=2, style=dotted];
m2_228 -> m2_229  [key=0, style=solid];
m2_228 -> m2_27  [key=2, style=dotted];
m2_232 -> m2_233  [key=0, style=solid];
m2_232 -> m2_105  [key=2, style=dotted];
m2_232 -> m2_236  [key=0, style=solid];
m2_232 -> m2_238  [key=2, style=dotted];
m2_232 -> m2_235  [key=1, style=dashed, color=darkseagreen4, label=value];
m2_235 -> m2_236  [key=0, style=solid];
m2_235 -> m2_239  [key=0, style=solid];
m2_235 -> m2_238  [key=2, style=dotted];
m2_235 -> m2_237  [key=0, style=solid];
m2_236 -> m2_237  [key=0, style=solid];
m2_236 -> m2_27  [key=2, style=dotted];
m2_236 -> m2_221  [key=2, style=dotted];
m2_237 -> m2_238  [key=0, style=solid];
m2_237 -> m2_105  [key=2, style=dotted];
m2_237 -> m2_224  [key=0, style=bold, color=blue];
m2_105 -> m2_391  [key=0, style=solid];
m2_105 -> m2_392  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_105 -> m2_97  [key=3, color=darkorchid, style=bold, label="Parameter variable string message"];
m2_105 -> m2_229  [key=3, color=darkorchid, style=bold, label="Parameter variable string message"];
m2_105 -> m2_232  [key=3, color=darkorchid, style=bold, label="Parameter variable string message"];
m2_391 -> m2_392  [key=0, style=solid];
m2_391 -> m2_393  [key=0, style=solid];
m2_392 -> m2_393  [key=0, style=solid];
m2_392 -> m2_29  [key=2, style=dotted];
m2_393 -> m2_105  [key=0, style=bold, color=blue];
m2_28 -> m2_211  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter> filters"];
m2_28 -> m2_30  [key=0, style=solid];
m2_28 -> m2_39  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_28 -> m2_40  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_28 -> m2_43  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>"];
m2_28 -> m2_45  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>"];
m2_28 -> m2_61  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>"];
m2_28 -> m2_70  [key=1, style=dashed, color=darkseagreen4, label=bool];
m2_28 -> m2_76  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_28 -> m2_77  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_28 -> m2_80  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter>"];
m2_28 -> m2_81  [key=1, style=dashed, color=darkseagreen4, label=bool];
m2_28 -> m2_10  [key=3, color=darkorchid, style=bold, label="Parameter variable int currentPartStartIndex"];
m2_28 -> m2_281  [key=3, color=darkorchid, style=bold, label="Parameter variable int currentPartStartIndex"];
m2_28 -> m2_21  [key=3, color=darkorchid, style=bold, label="Parameter variable bool query"];
m2_28 -> m2_220  [key=3, color=darkorchid, style=bold, label="Parameter variable bool query"];
m2_28 -> m2_75  [key=3, color=darkorchid, style=bold, label="method methodReturn bool ParsePath"];
m2_28 -> m2_208  [key=3, color=darkorchid, style=bold, label="Parameter variable System.Collections.Generic.List<Newtonsoft.Json.Linq.JsonPath.PathFilter> filters"];
m2_28 -> m2_217  [key=3, color=darkorchid, style=bold, label="Parameter variable bool query"];
m2_30 -> m2_31  [key=0, style=solid];
m2_30 -> m2_43  [key=1, style=dashed, color=darkseagreen4, label=scan];
m2_30 -> m2_45  [key=1, style=dashed, color=darkseagreen4, label=scan];
m2_30 -> m2_61  [key=1, style=dashed, color=darkseagreen4, label=scan];
m2_30 -> m2_80  [key=1, style=dashed, color=darkseagreen4, label=scan];
m2_30 -> m2_21  [key=3, color=darkorchid, style=bold, label="Local variable bool scan"];
m2_39 -> m2_40  [key=0, style=solid];
m2_39 -> m2_45  [key=0, style=solid];
m2_40 -> m2_41  [key=0, style=solid];
m2_40 -> m2_85  [key=2, style=dotted];
m2_40 -> m2_43  [key=1, style=dashed, color=darkseagreen4, label=member];
m2_43 -> m2_44  [key=0, style=solid];
m2_43 -> m2_86  [key=2, style=dotted];
m2_43 -> m2_87  [key=2, style=dotted];
m2_45 -> m2_46  [key=0, style=solid];
m2_45 -> m2_88  [key=2, style=dotted];
m2_45 -> m2_87  [key=2, style=dotted];
m2_61 -> m2_62  [key=0, style=solid];
m2_61 -> m2_86  [key=2, style=dotted];
m2_61 -> m2_87  [key=2, style=dotted];
m2_70 -> m2_71  [key=0, style=solid];
m2_70 -> m2_72  [key=0, style=solid];
m2_76 -> m2_77  [key=0, style=solid];
m2_76 -> m2_81  [key=0, style=solid];
m2_77 -> m2_78  [key=0, style=solid];
m2_77 -> m2_85  [key=2, style=dotted];
m2_77 -> m2_89  [key=2, style=dotted];
m2_77 -> m2_80  [key=1, style=dashed, color=darkseagreen4, label=member];
m2_80 -> m2_83  [key=0, style=solid];
m2_80 -> m2_86  [key=2, style=dotted];
m2_80 -> m2_87  [key=2, style=dotted];
m2_81 -> m2_82  [key=0, style=solid];
m2_81 -> m2_83  [key=0, style=solid];
m2_31 -> m2_32  [key=0, style=solid];
m2_31 -> m2_21  [key=3, color=darkorchid, style=bold, label="Local variable bool followingIndexer"];
m2_32 -> m2_33  [key=0, style=solid];
m2_32 -> m2_81  [key=1, style=dashed, color=darkseagreen4, label=followingDot];
m2_32 -> m2_21  [key=3, color=darkorchid, style=bold, label="Local variable bool followingDot"];
m2_33 -> m2_34  [key=0, style=solid];
m2_33 -> m2_21  [key=3, color=darkorchid, style=bold, label="Local variable bool ended"];
m2_34 -> m2_35  [key=0, style=solid];
m2_34 -> m2_75  [key=0, style=solid];
m2_35 -> m2_36  [key=0, style=solid];
m2_35 -> m2_45  [key=1, style=dashed, color=darkseagreen4, label=currentChar];
m2_35 -> m2_70  [key=1, style=dashed, color=darkseagreen4, label=currentChar];
m2_35 -> m2_73  [key=1, style=dashed, color=darkseagreen4, label=currentChar];
m2_75 -> m2_76  [key=0, style=solid];
m2_75 -> m2_81  [key=1, style=dashed, color=darkseagreen4, label=atPathEnd];
m2_75 -> m2_83  [key=1, style=dashed, color=darkseagreen4, label=atPathEnd];
m2_36 -> m2_37  [key=0, style=solid];
m2_36 -> m2_50  [key=0, style=solid];
m2_36 -> m2_53  [key=0, style=solid];
m2_36 -> m2_56  [key=0, style=solid];
m2_36 -> m2_70  [key=0, style=solid];
m2_73 -> m2_84  [key=0, style=solid];
m2_73 -> m2_29  [key=2, style=dotted];
m2_37 -> m2_38  [key=0, style=solid];
m2_50 -> m2_51  [key=0, style=solid];
m2_53 -> m2_54  [key=0, style=solid];
m2_56 -> m2_57  [key=0, style=solid];
m2_38 -> m2_39  [key=0, style=solid];
m2_41 -> m2_42  [key=0, style=solid];
m2_41 -> m2_43  [key=0, style=solid];
m2_42 -> m2_43  [key=0, style=solid];
m2_44 -> m2_45  [key=0, style=solid];
m2_44 -> m2_61  [key=1, style=dashed, color=darkseagreen4, label=scan];
m2_44 -> m2_80  [key=1, style=dashed, color=darkseagreen4, label=scan];
m2_46 -> m2_47  [key=0, style=solid];
m2_47 -> m2_48  [key=0, style=solid];
m2_47 -> m2_57  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_47 -> m2_58  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_48 -> m2_49  [key=0, style=solid];
m2_57 -> m2_58  [key=0, style=solid];
m2_57 -> m2_63  [key=0, style=solid];
m2_58 -> m2_59  [key=0, style=solid];
m2_58 -> m2_85  [key=2, style=dotted];
m2_58 -> m2_61  [key=1, style=dashed, color=darkseagreen4, label=member];
m2_49 -> m2_34  [key=0, style=solid];
m2_51 -> m2_52  [key=0, style=solid];
m2_52 -> m2_34  [key=0, style=solid];
m2_54 -> m2_55  [key=0, style=solid];
m2_54 -> m2_34  [key=0, style=solid];
m2_55 -> m2_34  [key=0, style=solid];
m2_63 -> m2_64  [key=0, style=solid];
m2_63 -> m2_66  [key=0, style=solid];
m2_59 -> m2_60  [key=0, style=solid];
m2_59 -> m2_61  [key=0, style=solid];
m2_60 -> m2_61  [key=0, style=solid];
m2_62 -> m2_63  [key=0, style=solid];
m2_62 -> m2_80  [key=1, style=dashed, color=darkseagreen4, label=scan];
m2_64 -> m2_65  [key=0, style=solid];
m2_64 -> m2_80  [key=1, style=dashed, color=darkseagreen4, label=scan];
m2_66 -> m2_67  [key=0, style=solid];
m2_65 -> m2_66  [key=0, style=solid];
m2_67 -> m2_68  [key=0, style=solid];
m2_67 -> m2_76  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_67 -> m2_77  [key=1, style=dashed, color=darkseagreen4, label=int];
m2_68 -> m2_69  [key=0, style=solid];
m2_68 -> m2_72  [key=1, style=dashed, color=darkseagreen4, label=followingIndexer];
m2_69 -> m2_34  [key=0, style=solid];
m2_69 -> m2_81  [key=1, style=dashed, color=darkseagreen4, label=followingDot];
m2_72 -> m2_73  [key=0, style=solid];
m2_72 -> m2_74  [key=0, style=solid];
m2_71 -> m2_34  [key=0, style=solid];
m2_74 -> m2_34  [key=0, style=solid];
m2_83 -> m2_84  [key=0, style=solid];
m2_78 -> m2_79  [key=0, style=solid];
m2_78 -> m2_80  [key=0, style=solid];
m2_79 -> m2_80  [key=0, style=solid];
m2_82 -> m2_84  [key=0, style=solid];
m2_82 -> m2_29  [key=2, style=dotted];
m2_84 -> m2_28  [key=0, style=bold, color=blue];
m2_224 -> m2_225  [key=0, style=solid];
m2_224 -> m2_226  [key=3, color=darkorchid, style=bold, label="method methodReturn object ParseSide"];
m2_225 -> m2_226  [key=0, style=solid];
m2_225 -> m2_27  [key=2, style=dotted];
m2_226 -> m2_227  [key=0, style=solid, color=red];
m2_354 -> m2_355  [key=0, style=solid];
m2_354 -> m2_356  [key=0, style=solid];
m2_355 -> m2_369  [key=0, style=solid];
m2_355 -> m2_29  [key=2, style=dotted];
m2_356 -> m2_357  [key=0, style=solid];
m2_356 -> m2_358  [key=0, style=solid];
m2_356 -> m2_280  [key=2, style=dotted];
m2_357 -> m2_369  [key=0, style=solid];
m2_358 -> m2_359  [key=0, style=solid];
m2_358 -> m2_360  [key=0, style=solid];
m2_358 -> m2_280  [key=2, style=dotted];
m2_359 -> m2_369  [key=0, style=solid];
m2_360 -> m2_361  [key=0, style=solid];
m2_360 -> m2_362  [key=0, style=solid];
m2_360 -> m2_280  [key=2, style=dotted];
m2_361 -> m2_369  [key=0, style=solid];
m2_362 -> m2_363  [key=0, style=solid];
m2_362 -> m2_364  [key=0, style=solid];
m2_362 -> m2_280  [key=2, style=dotted];
m2_363 -> m2_369  [key=0, style=solid];
m2_364 -> m2_365  [key=0, style=solid];
m2_364 -> m2_366  [key=0, style=solid];
m2_364 -> m2_280  [key=2, style=dotted];
m2_365 -> m2_369  [key=0, style=solid];
m2_366 -> m2_367  [key=0, style=solid];
m2_366 -> m2_368  [key=0, style=solid];
m2_366 -> m2_280  [key=2, style=dotted];
m2_367 -> m2_369  [key=0, style=solid];
m2_368 -> m2_369  [key=0, style=solid];
m2_368 -> m2_29  [key=2, style=dotted];
m2_369 -> m2_278  [key=0, style=bold, color=blue];
m2_0 -> m2_1  [key=0, style=solid];
m2_0 -> m2_2  [key=1, style=dashed, color=darkseagreen4, label=string];
m2_1 -> m2_2  [key=0, style=solid];
m2_1 -> m2_6  [key=2, style=dotted];
m2_1 -> m2_7  [key=2, style=dotted];
m2_2 -> m2_3  [key=0, style=solid];
m2_3 -> m2_4  [key=0, style=solid];
m2_3 -> m2_8  [key=2, style=dotted];
m2_4 -> m2_5  [key=0, style=solid];
m2_4 -> m2_9  [key=2, style=dotted];
m2_5 -> m2_0  [key=0, style=bold, color=blue];
m2_320 -> m2_327  [key=0, style=solid];
m2_327 -> m2_328  [key=0, style=solid];
m2_327 -> m2_321  [key=2, style=dotted];
m2_327 -> m2_334  [key=1, style=dashed, color=darkseagreen4, label=sb];
m2_327 -> m2_336  [key=1, style=dashed, color=darkseagreen4, label=sb];
m2_327 -> m2_341  [key=1, style=dashed, color=darkseagreen4, label=sb];
m2_327 -> m2_343  [key=1, style=dashed, color=darkseagreen4, label=sb];
m2_328 -> m2_329  [key=0, style=solid];
m2_334 -> m2_338  [key=0, style=solid];
m2_334 -> m2_322  [key=2, style=dotted];
m2_336 -> m2_338  [key=0, style=solid];
m2_336 -> m2_322  [key=2, style=dotted];
m2_341 -> m2_345  [key=0, style=solid];
m2_341 -> m2_323  [key=2, style=dotted];
m2_343 -> m2_329  [key=0, style=solid];
m2_343 -> m2_322  [key=2, style=dotted];
m2_329 -> m2_330  [key=0, style=solid];
m2_329 -> m2_344  [key=0, style=solid];
m2_330 -> m2_331  [key=0, style=solid];
m2_330 -> m2_339  [key=1, style=dashed, color=darkseagreen4, label=currentChar];
m2_330 -> m2_343  [key=1, style=dashed, color=darkseagreen4, label=currentChar];
m2_344 -> m2_345  [key=0, style=solid];
m2_344 -> m2_29  [key=2, style=dotted];
m2_331 -> m2_332  [key=0, style=solid];
m2_331 -> m2_339  [key=0, style=solid];
m2_339 -> m2_340  [key=0, style=solid];
m2_339 -> m2_342  [key=0, style=solid];
m2_332 -> m2_333  [key=0, style=solid];
m2_333 -> m2_334  [key=0, style=solid];
m2_333 -> m2_335  [key=0, style=solid];
m2_335 -> m2_336  [key=0, style=solid];
m2_335 -> m2_337  [key=0, style=solid];
m2_337 -> m2_345  [key=0, style=solid];
m2_337 -> m2_29  [key=2, style=dotted];
m2_338 -> m2_329  [key=0, style=solid];
m2_340 -> m2_341  [key=0, style=solid];
m2_342 -> m2_343  [key=0, style=solid];
m2_345 -> m2_320  [key=0, style=bold, color=blue];
m2_106 -> m2_370  [key=0, style=solid];
m2_106 -> m2_375  [key=1, style=dashed, color=darkseagreen4, label=char];
m2_106 -> m2_378  [key=1, style=dashed, color=darkseagreen4, label=bool];
m2_106 -> m2_379  [key=1, style=dashed, color=darkseagreen4, label=bool];
m2_106 -> m2_96  [key=3, color=darkorchid, style=bold, label="Parameter variable char indexerCloseChar"];
m2_106 -> m2_88  [key=3, color=darkorchid, style=bold, label="Parameter variable bool scan"];
m2_106 -> m2_86  [key=3, color=darkorchid, style=bold, label="method methodReturn Newtonsoft.Json.Linq.JsonPath.PathFilter ParseQuotedField"];
m2_370 -> m2_371  [key=0, style=solid];
m2_370 -> m2_376  [key=1, style=dashed, color=darkseagreen4, label=fields];
m2_370 -> m2_377  [key=1, style=dashed, color=darkseagreen4, label=fields];
m2_370 -> m2_378  [key=1, style=dashed, color=darkseagreen4, label=fields];
m2_370 -> m2_383  [key=1, style=dashed, color=darkseagreen4, label=fields];
m2_370 -> m2_385  [key=1, style=dashed, color=darkseagreen4, label=fields];
m2_370 -> m2_110  [key=3, color=darkorchid, style=bold, label="Local variable System.Collections.Generic.List<string> fields"];
m2_375 -> m2_376  [key=0, style=solid];
m2_375 -> m2_380  [key=0, style=solid];
m2_378 -> m2_388  [key=0, style=solid];
m2_378 -> m2_389  [key=2, style=dotted];
m2_378 -> m2_390  [key=2, style=dotted];
m2_379 -> m2_388  [key=0, style=solid];
m2_379 -> m2_86  [key=2, style=dotted];
m2_371 -> m2_372  [key=0, style=solid];
m2_371 -> m2_387  [key=0, style=solid];
m2_376 -> m2_377  [key=0, style=solid];
m2_376 -> m2_379  [key=0, style=solid];
m2_377 -> m2_378  [key=0, style=solid];
m2_377 -> m2_87  [key=2, style=dotted];
m2_383 -> m2_384  [key=0, style=solid];
m2_383 -> m2_385  [key=0, style=solid];
m2_385 -> m2_371  [key=0, style=solid];
m2_385 -> m2_87  [key=2, style=dotted];
m2_372 -> m2_373  [key=0, style=solid];
m2_372 -> m2_320  [key=2, style=dotted];
m2_372 -> m2_377  [key=1, style=dashed, color=darkseagreen4, label=field];
m2_372 -> m2_379  [key=1, style=dashed, color=darkseagreen4, label=field];
m2_372 -> m2_385  [key=1, style=dashed, color=darkseagreen4, label=field];
m2_387 -> m2_388  [key=0, style=solid];
m2_387 -> m2_29  [key=2, style=dotted];
m2_373 -> m2_374  [key=0, style=solid];
m2_373 -> m2_27  [key=2, style=dotted];
m2_374 -> m2_375  [key=0, style=solid];
m2_374 -> m2_105  [key=2, style=dotted];
m2_380 -> m2_381  [key=0, style=solid];
m2_380 -> m2_386  [key=0, style=solid];
m2_381 -> m2_382  [key=0, style=solid];
m2_386 -> m2_388  [key=0, style=solid];
m2_386 -> m2_29  [key=2, style=dotted];
m2_382 -> m2_383  [key=0, style=solid];
m2_382 -> m2_27  [key=2, style=dotted];
m2_384 -> m2_385  [key=0, style=solid];
m2_384 -> m2_8  [key=2, style=dotted];
m2_388 -> m2_106  [key=0, style=bold, color=blue];
m2_209 -> m2_210  [key=0, style=solid];
m2_209 -> m2_212  [key=0, style=solid];
m2_27 -> m2_189  [key=0, style=solid];
m2_189 -> m2_190  [key=0, style=solid];
m2_189 -> m2_192  [key=0, style=solid];
m2_190 -> m2_191  [key=0, style=solid];
m2_190 -> m2_192  [key=0, style=solid];
m2_191 -> m2_189  [key=0, style=solid];
m2_192 -> m2_27  [key=0, style=bold, color=blue];
m2_108 -> m2_109  [key=0, style=solid];
m2_108 -> m2_121  [key=1, style=dashed, color=darkseagreen4, label=char];
m2_108 -> m2_159  [key=1, style=dashed, color=darkseagreen4, label=char];
m2_108 -> m2_96  [key=3, color=darkorchid, style=bold, label="Parameter variable char indexerCloseChar"];
m2_109 -> m2_110  [key=0, style=solid];
m2_109 -> m2_122  [key=1, style=dashed, color=darkseagreen4, label=start];
m2_109 -> m2_126  [key=1, style=dashed, color=darkseagreen4, label=start];
m2_109 -> m2_132  [key=1, style=dashed, color=darkseagreen4, label=start];
m2_109 -> m2_140  [key=1, style=dashed, color=darkseagreen4, label=start];
m2_109 -> m2_144  [key=1, style=dashed, color=darkseagreen4, label=start];
m2_109 -> m2_149  [key=1, style=dashed, color=darkseagreen4, label=start];
m2_109 -> m2_163  [key=1, style=dashed, color=darkseagreen4, label=start];
m2_109 -> m2_165  [key=1, style=dashed, color=darkseagreen4, label=start];
m2_109 -> m2_281  [key=3, color=darkorchid, style=bold, label="Local variable int start"];
m2_121 -> m2_122  [key=0, style=solid];
m2_121 -> m2_143  [key=0, style=solid];
m2_159 -> m2_160  [key=0, style=solid];
m2_159 -> m2_161  [key=0, style=solid];
m2_110 -> m2_111  [key=0, style=solid];
m2_110 -> m2_122  [key=1, style=dashed, color=darkseagreen4, label=end];
m2_110 -> m2_144  [key=1, style=dashed, color=darkseagreen4, label=end];
m2_110 -> m2_163  [key=1, style=dashed, color=darkseagreen4, label=end];
m2_110 -> m2_179  [key=1, style=dashed, color=darkseagreen4, label=end];
m2_110 -> m2_110  [key=3, color=darkorchid, style=bold, label="Local variable int? end"];
m2_110 -> m2_281  [key=3, color=darkorchid, style=bold, label="Local variable int? end"];
m2_122 -> m2_123  [key=0, style=solid];
m2_122 -> m2_124  [key=1, style=dashed, color=darkseagreen4, label=length];
m2_122 -> m2_126  [key=1, style=dashed, color=darkseagreen4, label=length];
m2_122 -> m2_131  [key=1, style=dashed, color=darkseagreen4, label=length];
m2_122 -> m2_132  [key=1, style=dashed, color=darkseagreen4, label=length];
m2_122 -> m2_138  [key=1, style=dashed, color=darkseagreen4, label=length];
m2_122 -> m2_140  [key=1, style=dashed, color=darkseagreen4, label=length];
m2_126 -> m2_127  [key=0, style=solid];
m2_126 -> m2_85  [key=2, style=dotted];
m2_132 -> m2_133  [key=0, style=solid];
m2_132 -> m2_85  [key=2, style=dotted];
m2_140 -> m2_141  [key=0, style=solid];
m2_140 -> m2_85  [key=2, style=dotted];
m2_144 -> m2_145  [key=0, style=solid];
m2_144 -> m2_149  [key=1, style=dashed, color=darkseagreen4, label=length];
m2_149 -> m2_150  [key=0, style=solid];
m2_149 -> m2_85  [key=2, style=dotted];
m2_163 -> m2_164  [key=0, style=solid];
m2_163 -> m2_165  [key=1, style=dashed, color=darkseagreen4, label=length];
m2_165 -> m2_166  [key=0, style=solid];
m2_165 -> m2_85  [key=2, style=dotted];
m2_111 -> m2_112  [key=0, style=solid];
m2_111 -> m2_123  [key=1, style=dashed, color=darkseagreen4, label=indexes];
m2_111 -> m2_128  [key=1, style=dashed, color=darkseagreen4, label=indexes];
m2_111 -> m2_129  [key=1, style=dashed, color=darkseagreen4, label=indexes];
m2_111 -> m2_147  [key=1, style=dashed, color=darkseagreen4, label=indexes];
m2_111 -> m2_150  [key=1, style=dashed, color=darkseagreen4, label=indexes];
m2_111 -> m2_110  [key=3, color=darkorchid, style=bold, label="Local variable System.Collections.Generic.List<int> indexes"];
m2_179 -> m2_180  [key=0, style=solid];
m2_179 -> m2_181  [key=0, style=solid];
m2_112 -> m2_113  [key=0, style=solid];
m2_112 -> m2_130  [key=1, style=dashed, color=darkseagreen4, label=colonCount];
m2_112 -> m2_134  [key=1, style=dashed, color=darkseagreen4, label=colonCount];
m2_112 -> m2_167  [key=1, style=dashed, color=darkseagreen4, label=colonCount];
m2_112 -> m2_169  [key=1, style=dashed, color=darkseagreen4, label=colonCount];
m2_112 -> m2_172  [key=1, style=dashed, color=darkseagreen4, label=colonCount];
m2_112 -> m2_112  [key=3, color=darkorchid, style=bold, label="Local variable int colonCount"];
m2_123 -> m2_124  [key=0, style=solid];
m2_123 -> m2_130  [key=0, style=solid];
m2_128 -> m2_129  [key=0, style=solid];
m2_128 -> m2_87  [key=2, style=dotted];
m2_129 -> m2_183  [key=0, style=solid];
m2_129 -> m2_185  [key=2, style=dotted];
m2_147 -> m2_148  [key=0, style=solid];
m2_147 -> m2_149  [key=0, style=solid];
m2_150 -> m2_151  [key=0, style=solid];
m2_150 -> m2_184  [key=2, style=dotted];
m2_150 -> m2_87  [key=2, style=dotted];
m2_113 -> m2_114  [key=0, style=solid];
m2_113 -> m2_137  [key=1, style=dashed, color=darkseagreen4, label=startIndex];
m2_113 -> m2_110  [key=3, color=darkorchid, style=bold, label="Local variable int? startIndex"];
m2_113 -> m2_166  [key=3, color=darkorchid, style=bold, label="Local variable int? startIndex"];
m2_130 -> m2_131  [key=0, style=solid];
m2_130 -> m2_138  [key=0, style=solid];
m2_134 -> m2_135  [key=0, style=solid];
m2_134 -> m2_136  [key=0, style=solid];
m2_167 -> m2_168  [key=0, style=solid];
m2_167 -> m2_169  [key=0, style=solid];
m2_169 -> m2_170  [key=0, style=solid];
m2_169 -> m2_171  [key=0, style=solid];
m2_172 -> m2_173  [key=0, style=solid];
m2_172 -> m2_172  [key=1, style=dashed, color=darkseagreen4, label=colonCount];
m2_114 -> m2_115  [key=0, style=solid];
m2_114 -> m2_137  [key=1, style=dashed, color=darkseagreen4, label=endIndex];
m2_114 -> m2_110  [key=3, color=darkorchid, style=bold, label="Local variable int? endIndex"];
m2_114 -> m2_133  [key=3, color=darkorchid, style=bold, label="Local variable int? endIndex"];
m2_114 -> m2_166  [key=3, color=darkorchid, style=bold, label="Local variable int? endIndex"];
m2_137 -> m2_183  [key=0, style=solid];
m2_137 -> m2_186  [key=2, style=dotted];
m2_115 -> m2_116  [key=0, style=solid];
m2_115 -> m2_137  [key=1, style=dashed, color=darkseagreen4, label=step];
m2_115 -> m2_110  [key=3, color=darkorchid, style=bold, label="Local variable int? step"];
m2_115 -> m2_133  [key=3, color=darkorchid, style=bold, label="Local variable int? step"];
m2_115 -> m2_166  [key=3, color=darkorchid, style=bold, label="Local variable int? step"];
m2_116 -> m2_117  [key=0, style=solid];
m2_116 -> m2_182  [key=0, style=solid];
m2_117 -> m2_118  [key=0, style=solid];
m2_117 -> m2_121  [key=1, style=dashed, color=darkseagreen4, label=currentCharacter];
m2_117 -> m2_143  [key=1, style=dashed, color=darkseagreen4, label=currentCharacter];
m2_117 -> m2_155  [key=1, style=dashed, color=darkseagreen4, label=currentCharacter];
m2_117 -> m2_160  [key=1, style=dashed, color=darkseagreen4, label=currentCharacter];
m2_117 -> m2_162  [key=1, style=dashed, color=darkseagreen4, label=currentCharacter];
m2_117 -> m2_177  [key=1, style=dashed, color=darkseagreen4, label=currentCharacter];
m2_117 -> m2_178  [key=1, style=dashed, color=darkseagreen4, label=currentCharacter];
m2_117 -> m2_180  [key=1, style=dashed, color=darkseagreen4, label=currentCharacter];
m2_182 -> m2_183  [key=0, style=solid];
m2_182 -> m2_29  [key=2, style=dotted];
m2_118 -> m2_119  [key=0, style=solid];
m2_118 -> m2_121  [key=0, style=solid];
m2_143 -> m2_144  [key=0, style=solid];
m2_143 -> m2_155  [key=0, style=solid];
m2_155 -> m2_156  [key=0, style=solid];
m2_155 -> m2_162  [key=0, style=solid];
m2_160 -> m2_183  [key=0, style=solid];
m2_160 -> m2_29  [key=2, style=dotted];
m2_162 -> m2_163  [key=0, style=solid];
m2_162 -> m2_177  [key=0, style=solid];
m2_177 -> m2_178  [key=0, style=solid];
m2_177 -> m2_179  [key=0, style=solid];
m2_177 -> m2_188  [key=2, style=dotted];
m2_178 -> m2_183  [key=0, style=solid];
m2_178 -> m2_29  [key=2, style=dotted];
m2_180 -> m2_183  [key=0, style=solid];
m2_180 -> m2_29  [key=2, style=dotted];
m2_119 -> m2_120  [key=0, style=solid];
m2_119 -> m2_122  [key=1, style=dashed, color=darkseagreen4, label=end];
m2_119 -> m2_144  [key=1, style=dashed, color=darkseagreen4, label=end];
m2_119 -> m2_163  [key=1, style=dashed, color=darkseagreen4, label=end];
m2_119 -> m2_179  [key=1, style=dashed, color=darkseagreen4, label=end];
m2_120 -> m2_116  [key=0, style=solid];
m2_120 -> m2_27  [key=2, style=dotted];
m2_124 -> m2_125  [key=0, style=solid];
m2_124 -> m2_126  [key=0, style=solid];
m2_131 -> m2_132  [key=0, style=solid];
m2_131 -> m2_137  [key=0, style=solid];
m2_138 -> m2_139  [key=0, style=solid];
m2_138 -> m2_140  [key=0, style=solid];
m2_125 -> m2_183  [key=0, style=solid];
m2_125 -> m2_29  [key=2, style=dotted];
m2_127 -> m2_128  [key=0, style=solid];
m2_127 -> m2_184  [key=2, style=dotted];
m2_133 -> m2_134  [key=0, style=solid];
m2_133 -> m2_184  [key=2, style=dotted];
m2_133 -> m2_135  [key=1, style=dashed, color=darkseagreen4, label=index];
m2_133 -> m2_136  [key=1, style=dashed, color=darkseagreen4, label=index];
m2_135 -> m2_137  [key=0, style=solid];
m2_136 -> m2_137  [key=0, style=solid];
m2_139 -> m2_183  [key=0, style=solid];
m2_139 -> m2_29  [key=2, style=dotted];
m2_141 -> m2_142  [key=0, style=solid];
m2_141 -> m2_184  [key=2, style=dotted];
m2_142 -> m2_183  [key=0, style=solid];
m2_142 -> m2_187  [key=2, style=dotted];
m2_145 -> m2_146  [key=0, style=solid];
m2_145 -> m2_147  [key=0, style=solid];
m2_146 -> m2_183  [key=0, style=solid];
m2_146 -> m2_29  [key=2, style=dotted];
m2_148 -> m2_149  [key=0, style=solid];
m2_148 -> m2_8  [key=2, style=dotted];
m2_148 -> m2_150  [key=1, style=dashed, color=darkseagreen4, label=indexes];
m2_151 -> m2_152  [key=0, style=solid];
m2_152 -> m2_153  [key=0, style=solid];
m2_152 -> m2_27  [key=2, style=dotted];
m2_153 -> m2_154  [key=0, style=solid];
m2_154 -> m2_116  [key=0, style=solid];
m2_156 -> m2_157  [key=0, style=solid];
m2_157 -> m2_158  [key=0, style=solid];
m2_157 -> m2_105  [key=2, style=dotted];
m2_158 -> m2_159  [key=0, style=solid];
m2_158 -> m2_27  [key=2, style=dotted];
m2_161 -> m2_183  [key=0, style=solid];
m2_161 -> m2_187  [key=2, style=dotted];
m2_164 -> m2_165  [key=0, style=solid];
m2_164 -> m2_172  [key=0, style=solid];
m2_166 -> m2_167  [key=0, style=solid];
m2_166 -> m2_184  [key=2, style=dotted];
m2_166 -> m2_168  [key=1, style=dashed, color=darkseagreen4, label=index];
m2_166 -> m2_170  [key=1, style=dashed, color=darkseagreen4, label=index];
m2_166 -> m2_171  [key=1, style=dashed, color=darkseagreen4, label=index];
m2_168 -> m2_172  [key=0, style=solid];
m2_170 -> m2_172  [key=0, style=solid];
m2_171 -> m2_172  [key=0, style=solid];
m2_173 -> m2_174  [key=0, style=solid];
m2_174 -> m2_175  [key=0, style=solid];
m2_174 -> m2_27  [key=2, style=dotted];
m2_175 -> m2_176  [key=0, style=solid];
m2_176 -> m2_116  [key=0, style=solid];
m2_181 -> m2_116  [key=0, style=solid];
m2_183 -> m2_108  [key=0, style=bold, color=blue];
m2_404 -> m2_2  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_3  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_4  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_10  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_11  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_12  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_14  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_15  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_17  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_19  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_20  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_21  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_22  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_23  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_24  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_25  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_34  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_35  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_39  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_40  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_45  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_46  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_47  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_54  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_57  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_58  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_63  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_65  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_66  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_67  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_74  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_75  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_76  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_77  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_95  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_97  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_98  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_99  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_100  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_101  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_102  [key=1, style=dashed, color=green, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_103  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_109  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_116  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_117  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_119  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_120  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_122  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_126  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_132  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_140  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_144  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_149  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_151  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_152  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_153  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_156  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_157  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_158  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_159  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_163  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_165  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_173  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_174  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_175  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_181  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_189  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_190  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_191  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_193  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_194  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_195  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_196  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_197  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_198  [key=1, style=dashed, color=green, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_199  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_200  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_201  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_202  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_203  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_209  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_212  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_216  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_217  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_222  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_225  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_227  [key=1, style=dashed, color=red, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_228  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_229  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_232  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_233  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_234  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_236  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_242  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_243  [key=1, style=dashed, color=red, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_246  [key=1, style=dashed, color=green, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_248  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_249  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_251  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_256  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_257  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_258  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_266  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_267  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_268  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_282  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_284  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_289  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_290  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_291  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_304  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_306  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_310  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_314  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_328  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_329  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_330  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_331  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_332  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_333  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_335  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_337  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_338  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_340  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_342  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_346  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_348  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_351  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_354  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_356  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_358  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_360  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_362  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_364  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_366  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_371  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_372  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_373  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_374  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_375  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_380  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_381  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_382  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_386  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_391  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_395  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_230  [key=1, style=dashed, color=green, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_252  [key=1, style=dashed, color=green, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_231  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_245  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_235  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_220  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_269  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_254  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_261  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_271  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_239  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_215  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_219  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_259  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_270  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_260  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m2_404 -> m2_237  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.JPath"];
m3_179 -> m3_180  [key=0, style=solid];
m3_180 -> m3_181  [key=0, style=solid];
m3_180 -> m3_53  [key=2, style=dotted];
m3_180 -> m3_54  [key=2, style=dotted];
m3_180 -> m3_184  [key=1, style=dashed, color=darkseagreen4, label=o];
m3_181 -> m3_182  [key=0, style=solid];
m3_181 -> m3_123  [key=2, style=dotted];
m3_181 -> m3_183  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_182 -> m3_179  [key=0, style=bold, color=blue];
m3_446 -> m3_447  [key=0, style=solid];
m3_447 -> m3_448  [key=0, style=solid];
m3_447 -> m3_83  [key=2, style=dotted];
m3_447 -> m3_100  [key=2, style=dotted];
m3_447 -> m3_54  [key=2, style=dotted];
m3_447 -> m3_342  [key=2, style=dotted];
m3_447 -> m3_53  [key=2, style=dotted];
m3_448 -> m3_449  [key=0, style=solid];
m3_448 -> m3_9  [key=2, style=dotted];
m3_448 -> m3_24  [key=2, style=dotted];
m3_448 -> m3_450  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_448 -> m3_451  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_448 -> m3_452  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_449 -> m3_450  [key=0, style=solid];
m3_449 -> m3_91  [key=2, style=dotted];
m3_450 -> m3_451  [key=0, style=solid];
m3_450 -> m3_11  [key=2, style=dotted];
m3_451 -> m3_452  [key=0, style=solid];
m3_451 -> m3_11  [key=2, style=dotted];
m3_452 -> m3_453  [key=0, style=solid];
m3_452 -> m3_11  [key=2, style=dotted];
m3_453 -> m3_446  [key=0, style=bold, color=blue];
m3_238 -> m3_239  [key=0, style=solid];
m3_239 -> m3_240  [key=0, style=solid];
m3_239 -> m3_83  [key=2, style=dotted];
m3_240 -> m3_241  [key=0, style=solid];
m3_240 -> m3_55  [key=2, style=dotted];
m3_240 -> m3_242  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_240 -> m3_243  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_241 -> m3_242  [key=0, style=solid];
m3_241 -> m3_91  [key=2, style=dotted];
m3_242 -> m3_243  [key=0, style=solid];
m3_242 -> m3_11  [key=2, style=dotted];
m3_243 -> m3_244  [key=0, style=solid];
m3_243 -> m3_11  [key=2, style=dotted];
m3_244 -> m3_238  [key=0, style=bold, color=blue];
m3_553 -> m3_554  [key=0, style=solid];
m3_554 -> m3_555  [key=0, style=solid];
m3_554 -> m3_554  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m3_555 -> m3_556  [key=0, style=solid];
m3_555 -> m3_459  [key=2, style=dotted];
m3_555 -> m3_558  [key=1, style=dashed, color=darkseagreen4, label=a];
m3_555 -> m3_560  [key=1, style=dashed, color=darkseagreen4, label=a];
m3_555 -> m3_562  [key=1, style=dashed, color=darkseagreen4, label=a];
m3_555 -> m3_564  [key=1, style=dashed, color=darkseagreen4, label=a];
m3_556 -> m3_557  [key=0, style=solid];
m3_556 -> m3_9  [key=2, style=dotted];
m3_556 -> m3_24  [key=2, style=dotted];
m3_558 -> m3_559  [key=0, style=solid];
m3_558 -> m3_9  [key=2, style=dotted];
m3_558 -> m3_24  [key=2, style=dotted];
m3_560 -> m3_561  [key=0, style=solid];
m3_560 -> m3_9  [key=2, style=dotted];
m3_560 -> m3_24  [key=2, style=dotted];
m3_562 -> m3_563  [key=0, style=solid];
m3_562 -> m3_9  [key=2, style=dotted];
m3_562 -> m3_24  [key=2, style=dotted];
m3_564 -> m3_565  [key=0, style=solid];
m3_564 -> m3_9  [key=2, style=dotted];
m3_564 -> m3_24  [key=2, style=dotted];
m3_557 -> m3_558  [key=0, style=solid];
m3_557 -> m3_11  [key=2, style=dotted];
m3_559 -> m3_560  [key=0, style=solid];
m3_559 -> m3_11  [key=2, style=dotted];
m3_561 -> m3_562  [key=0, style=solid];
m3_561 -> m3_11  [key=2, style=dotted];
m3_563 -> m3_564  [key=0, style=solid];
m3_563 -> m3_11  [key=2, style=dotted];
m3_565 -> m3_566  [key=0, style=solid];
m3_565 -> m3_11  [key=2, style=dotted];
m3_566 -> m3_553  [key=0, style=bold, color=blue];
m3_175 -> m3_176  [key=0, style=solid];
m3_176 -> m3_177  [key=0, style=solid];
m3_176 -> m3_171  [key=2, style=dotted];
m3_177 -> m3_178  [key=0, style=solid];
m3_177 -> m3_55  [key=2, style=dotted];
m3_177 -> m3_113  [key=2, style=dotted];
m3_178 -> m3_175  [key=0, style=bold, color=blue];
m3_404 -> m3_405  [key=0, style=solid];
m3_405 -> m3_406  [key=0, style=solid];
m3_405 -> m3_83  [key=2, style=dotted];
m3_406 -> m3_407  [key=0, style=solid];
m3_406 -> m3_9  [key=2, style=dotted];
m3_406 -> m3_24  [key=2, style=dotted];
m3_406 -> m3_408  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_407 -> m3_408  [key=0, style=solid];
m3_407 -> m3_91  [key=2, style=dotted];
m3_408 -> m3_409  [key=0, style=solid];
m3_408 -> m3_11  [key=2, style=dotted];
m3_409 -> m3_404  [key=0, style=bold, color=blue];
m3_119 -> m3_120  [key=0, style=solid];
m3_120 -> m3_121  [key=0, style=solid];
m3_120 -> m3_53  [key=2, style=dotted];
m3_120 -> m3_54  [key=2, style=dotted];
m3_120 -> m3_125  [key=1, style=dashed, color=darkseagreen4, label=o];
m3_121 -> m3_122  [key=0, style=solid];
m3_121 -> m3_123  [key=2, style=dotted];
m3_121 -> m3_124  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_122 -> m3_119  [key=0, style=bold, color=blue];
m3_454 -> m3_455  [key=0, style=solid];
m3_455 -> m3_456  [key=0, style=solid];
m3_455 -> m3_459  [key=2, style=dotted];
m3_456 -> m3_457  [key=0, style=solid];
m3_456 -> m3_55  [key=2, style=dotted];
m3_457 -> m3_458  [key=0, style=solid];
m3_457 -> m3_11  [key=2, style=dotted];
m3_458 -> m3_454  [key=0, style=bold, color=blue];
m3_343 -> m3_344  [key=0, style=solid];
m3_344 -> m3_345  [key=0, style=solid];
m3_344 -> m3_313  [key=2, style=dotted];
m3_344 -> m3_347  [key=1, style=dashed, color=darkseagreen4, label=o1];
m3_344 -> m3_352  [key=1, style=dashed, color=darkseagreen4, label=o1];
m3_345 -> m3_346  [key=0, style=solid];
m3_345 -> m3_313  [key=2, style=dotted];
m3_345 -> m3_347  [key=1, style=dashed, color=darkseagreen4, label=o2];
m3_345 -> m3_354  [key=1, style=dashed, color=darkseagreen4, label=o2];
m3_347 -> m3_348  [key=0, style=solid];
m3_347 -> m3_83  [key=2, style=dotted];
m3_347 -> m3_351  [key=1, style=dashed, color=darkseagreen4, label=a];
m3_352 -> m3_353  [key=0, style=solid];
m3_352 -> m3_327  [key=2, style=dotted];
m3_352 -> m3_328  [key=2, style=dotted];
m3_346 -> m3_347  [key=0, style=solid];
m3_346 -> m3_313  [key=2, style=dotted];
m3_346 -> m3_342  [key=2, style=dotted];
m3_346 -> m3_356  [key=1, style=dashed, color=darkseagreen4, label=o3];
m3_354 -> m3_355  [key=0, style=solid];
m3_354 -> m3_327  [key=2, style=dotted];
m3_354 -> m3_328  [key=2, style=dotted];
m3_356 -> m3_357  [key=0, style=solid];
m3_356 -> m3_327  [key=2, style=dotted];
m3_356 -> m3_328  [key=2, style=dotted];
m3_348 -> m3_349  [key=0, style=solid];
m3_348 -> m3_9  [key=2, style=dotted];
m3_348 -> m3_24  [key=2, style=dotted];
m3_348 -> m3_350  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_348 -> m3_351  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_348 -> m3_352  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_348 -> m3_353  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_348 -> m3_354  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_348 -> m3_355  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_348 -> m3_356  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_348 -> m3_357  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_348 -> m3_358  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_348 -> m3_359  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_351 -> m3_352  [key=0, style=solid];
m3_351 -> m3_327  [key=2, style=dotted];
m3_351 -> m3_328  [key=2, style=dotted];
m3_349 -> m3_350  [key=0, style=solid];
m3_349 -> m3_91  [key=2, style=dotted];
m3_350 -> m3_351  [key=0, style=solid];
m3_350 -> m3_11  [key=2, style=dotted];
m3_353 -> m3_354  [key=0, style=solid];
m3_353 -> m3_11  [key=2, style=dotted];
m3_355 -> m3_356  [key=0, style=solid];
m3_355 -> m3_11  [key=2, style=dotted];
m3_357 -> m3_358  [key=0, style=solid];
m3_357 -> m3_313  [key=2, style=dotted];
m3_357 -> m3_342  [key=2, style=dotted];
m3_357 -> m3_327  [key=2, style=dotted];
m3_357 -> m3_328  [key=2, style=dotted];
m3_358 -> m3_359  [key=0, style=solid];
m3_358 -> m3_342  [key=2, style=dotted];
m3_358 -> m3_327  [key=2, style=dotted];
m3_358 -> m3_328  [key=2, style=dotted];
m3_359 -> m3_360  [key=0, style=solid];
m3_359 -> m3_11  [key=2, style=dotted];
m3_360 -> m3_343  [key=0, style=bold, color=blue];
m3_389 -> m3_390  [key=0, style=solid];
m3_390 -> m3_391  [key=0, style=solid];
m3_390 -> m3_83  [key=2, style=dotted];
m3_390 -> m3_342  [key=2, style=dotted];
m3_390 -> m3_53  [key=2, style=dotted];
m3_390 -> m3_54  [key=2, style=dotted];
m3_391 -> m3_392  [key=0, style=solid];
m3_391 -> m3_9  [key=2, style=dotted];
m3_391 -> m3_24  [key=2, style=dotted];
m3_391 -> m3_393  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_391 -> m3_394  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_392 -> m3_393  [key=0, style=solid];
m3_392 -> m3_91  [key=2, style=dotted];
m3_393 -> m3_394  [key=0, style=solid];
m3_393 -> m3_11  [key=2, style=dotted];
m3_394 -> m3_395  [key=0, style=solid];
m3_394 -> m3_342  [key=2, style=dotted];
m3_394 -> m3_53  [key=2, style=dotted];
m3_394 -> m3_54  [key=2, style=dotted];
m3_394 -> m3_327  [key=2, style=dotted];
m3_394 -> m3_328  [key=2, style=dotted];
m3_395 -> m3_389  [key=0, style=bold, color=blue];
m3_370 -> m3_371  [key=0, style=solid];
m3_371 -> m3_372  [key=0, style=solid];
m3_371 -> m3_8  [key=2, style=dotted];
m3_372 -> m3_373  [key=0, style=solid];
m3_372 -> m3_55  [key=2, style=dotted];
m3_373 -> m3_374  [key=0, style=solid];
m3_373 -> m3_11  [key=2, style=dotted];
m3_374 -> m3_370  [key=0, style=bold, color=blue];
m3_205 -> m3_206  [key=0, style=solid];
m3_206 -> m3_207  [key=0, style=solid];
m3_206 -> m3_83  [key=2, style=dotted];
m3_206 -> m3_215  [key=1, style=dashed, color=darkseagreen4, label=a];
m3_206 -> m3_208  [key=1, style=dashed, color=darkseagreen4, label=a];
m3_206 -> m3_218  [key=1, style=dashed, color=darkseagreen4, label=a];
m3_206 -> m3_209  [key=1, style=dashed, color=darkseagreen4, label=a];
m3_206 -> m3_221  [key=1, style=dashed, color=darkseagreen4, label=a];
m3_207 -> m3_208  [key=0, style=solid];
m3_207 -> m3_123  [key=2, style=dotted];
m3_207 -> m3_214  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_208 -> m3_209  [key=0, style=solid];
m3_208 -> m3_123  [key=2, style=dotted];
m3_208 -> m3_217  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_209 -> m3_210  [key=0, style=solid];
m3_209 -> m3_123  [key=2, style=dotted];
m3_209 -> m3_220  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_210 -> m3_211  [key=0, style=solid];
m3_210 -> m3_213  [key=2, style=dotted];
m3_210 -> m3_224  [key=1, style=dashed, color=darkseagreen4, label=a];
m3_211 -> m3_212  [key=0, style=solid];
m3_211 -> m3_123  [key=2, style=dotted];
m3_211 -> m3_223  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_212 -> m3_205  [key=0, style=bold, color=blue];
m3_494 -> m3_495  [key=0, style=solid];
m3_495 -> m3_496  [key=0, style=solid];
m3_495 -> m3_510  [key=2, style=dotted];
m3_495 -> m3_511  [key=2, style=dotted];
m3_495 -> m3_512  [key=2, style=dotted];
m3_495 -> m3_513  [key=2, style=dotted];
m3_495 -> m3_514  [key=2, style=dotted];
m3_495 -> m3_515  [key=2, style=dotted];
m3_495 -> m3_516  [key=2, style=dotted];
m3_495 -> m3_517  [key=2, style=dotted];
m3_496 -> m3_497  [key=0, style=solid];
m3_496 -> m3_53  [key=2, style=dotted];
m3_496 -> m3_54  [key=2, style=dotted];
m3_496 -> m3_518  [key=2, style=dotted];
m3_496 -> m3_519  [key=2, style=dotted];
m3_496 -> m3_520  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_496 -> m3_499  [key=1, style=dashed, color=darkseagreen4, label=o];
m3_496 -> m3_501  [key=1, style=dashed, color=darkseagreen4, label=o];
m3_496 -> m3_503  [key=1, style=dashed, color=darkseagreen4, label=o];
m3_496 -> m3_505  [key=1, style=dashed, color=darkseagreen4, label=o];
m3_496 -> m3_507  [key=1, style=dashed, color=darkseagreen4, label=o];
m3_497 -> m3_498  [key=0, style=solid];
m3_497 -> m3_9  [key=2, style=dotted];
m3_497 -> m3_24  [key=2, style=dotted];
m3_499 -> m3_500  [key=0, style=solid];
m3_499 -> m3_9  [key=2, style=dotted];
m3_499 -> m3_24  [key=2, style=dotted];
m3_501 -> m3_502  [key=0, style=solid];
m3_501 -> m3_9  [key=2, style=dotted];
m3_501 -> m3_24  [key=2, style=dotted];
m3_503 -> m3_504  [key=0, style=solid];
m3_503 -> m3_9  [key=2, style=dotted];
m3_503 -> m3_24  [key=2, style=dotted];
m3_505 -> m3_506  [key=0, style=solid];
m3_505 -> m3_9  [key=2, style=dotted];
m3_505 -> m3_24  [key=2, style=dotted];
m3_507 -> m3_508  [key=0, style=solid];
m3_507 -> m3_9  [key=2, style=dotted];
m3_507 -> m3_24  [key=2, style=dotted];
m3_498 -> m3_499  [key=0, style=solid];
m3_498 -> m3_11  [key=2, style=dotted];
m3_500 -> m3_501  [key=0, style=solid];
m3_500 -> m3_11  [key=2, style=dotted];
m3_502 -> m3_503  [key=0, style=solid];
m3_502 -> m3_11  [key=2, style=dotted];
m3_504 -> m3_505  [key=0, style=solid];
m3_504 -> m3_11  [key=2, style=dotted];
m3_506 -> m3_507  [key=0, style=solid];
m3_506 -> m3_11  [key=2, style=dotted];
m3_508 -> m3_509  [key=0, style=solid];
m3_508 -> m3_11  [key=2, style=dotted];
m3_509 -> m3_494  [key=0, style=bold, color=blue];
m3_146 -> m3_147  [key=0, style=solid];
m3_147 -> m3_148  [key=0, style=solid];
m3_147 -> m3_83  [key=2, style=dotted];
m3_147 -> m3_151  [key=1, style=dashed, color=darkseagreen4, label=a];
m3_148 -> m3_149  [key=0, style=solid];
m3_148 -> m3_123  [key=2, style=dotted];
m3_148 -> m3_150  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_149 -> m3_146  [key=0, style=bold, color=blue];
m3_375 -> m3_376  [key=0, style=solid];
m3_376 -> m3_377  [key=0, style=solid];
m3_376 -> m3_83  [key=2, style=dotted];
m3_376 -> m3_53  [key=2, style=dotted];
m3_376 -> m3_54  [key=2, style=dotted];
m3_377 -> m3_378  [key=0, style=solid];
m3_377 -> m3_9  [key=2, style=dotted];
m3_377 -> m3_24  [key=2, style=dotted];
m3_377 -> m3_379  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_377 -> m3_380  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_378 -> m3_379  [key=0, style=solid];
m3_378 -> m3_91  [key=2, style=dotted];
m3_379 -> m3_380  [key=0, style=solid];
m3_379 -> m3_11  [key=2, style=dotted];
m3_380 -> m3_381  [key=0, style=solid];
m3_380 -> m3_53  [key=2, style=dotted];
m3_380 -> m3_54  [key=2, style=dotted];
m3_380 -> m3_327  [key=2, style=dotted];
m3_380 -> m3_328  [key=2, style=dotted];
m3_381 -> m3_375  [key=0, style=bold, color=blue];
m3_68 -> m3_69  [key=0, style=solid];
m3_69 -> m3_70  [key=0, style=solid];
m3_69 -> m3_53  [key=2, style=dotted];
m3_69 -> m3_54  [key=2, style=dotted];
m3_69 -> m3_71  [key=1, style=dashed, color=darkseagreen4, label=o];
m3_70 -> m3_71  [key=0, style=solid];
m3_70 -> m3_55  [key=2, style=dotted];
m3_71 -> m3_72  [key=0, style=solid];
m3_71 -> m3_11  [key=2, style=dotted];
m3_72 -> m3_68  [key=0, style=bold, color=blue];
m3_523 -> m3_524  [key=0, style=solid];
m3_524 -> m3_525  [key=0, style=solid];
m3_524 -> m3_8  [key=2, style=dotted];
m3_524 -> m3_526  [key=1, style=dashed, color=darkseagreen4, label=o];
m3_524 -> m3_527  [key=1, style=dashed, color=darkseagreen4, label=o];
m3_524 -> m3_531  [key=1, style=dashed, color=darkseagreen4, label=o];
m3_524 -> m3_532  [key=1, style=dashed, color=darkseagreen4, label=o];
m3_524 -> m3_533  [key=1, style=dashed, color=darkseagreen4, label=o];
m3_525 -> m3_526  [key=0, style=solid];
m3_525 -> m3_55  [key=2, style=dotted];
m3_525 -> m3_528  [key=1, style=dashed, color=darkseagreen4, label=name];
m3_526 -> m3_527  [key=0, style=solid];
m3_526 -> m3_55  [key=2, style=dotted];
m3_526 -> m3_529  [key=1, style=dashed, color=darkseagreen4, label=productPrice];
m3_527 -> m3_528  [key=0, style=solid];
m3_527 -> m3_55  [key=2, style=dotted];
m3_527 -> m3_530  [key=1, style=dashed, color=darkseagreen4, label=productName];
m3_531 -> m3_532  [key=0, style=solid];
m3_531 -> m3_55  [key=2, style=dotted];
m3_531 -> m3_519  [key=2, style=dotted];
m3_531 -> m3_542  [key=2, style=dotted];
m3_531 -> m3_544  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_531 -> m3_534  [key=1, style=dashed, color=darkseagreen4, label=storeNames];
m3_531 -> m3_535  [key=1, style=dashed, color=darkseagreen4, label=storeNames];
m3_531 -> m3_536  [key=1, style=dashed, color=darkseagreen4, label=storeNames];
m3_532 -> m3_533  [key=0, style=solid];
m3_532 -> m3_519  [key=2, style=dotted];
m3_532 -> m3_542  [key=2, style=dotted];
m3_532 -> m3_547  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_532 -> m3_537  [key=1, style=dashed, color=darkseagreen4, label=firstProductNames];
m3_532 -> m3_538  [key=1, style=dashed, color=darkseagreen4, label=firstProductNames];
m3_532 -> m3_539  [key=1, style=dashed, color=darkseagreen4, label=firstProductNames];
m3_533 -> m3_534  [key=0, style=solid];
m3_533 -> m3_543  [key=2, style=dotted];
m3_533 -> m3_550  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_533 -> m3_540  [key=1, style=dashed, color=darkseagreen4, label=totalPrice];
m3_528 -> m3_529  [key=0, style=solid];
m3_528 -> m3_11  [key=2, style=dotted];
m3_529 -> m3_530  [key=0, style=solid];
m3_529 -> m3_11  [key=2, style=dotted];
m3_530 -> m3_531  [key=0, style=solid];
m3_530 -> m3_11  [key=2, style=dotted];
m3_534 -> m3_535  [key=0, style=solid];
m3_534 -> m3_11  [key=2, style=dotted];
m3_535 -> m3_536  [key=0, style=solid];
m3_535 -> m3_11  [key=2, style=dotted];
m3_536 -> m3_537  [key=0, style=solid];
m3_536 -> m3_11  [key=2, style=dotted];
m3_537 -> m3_538  [key=0, style=solid];
m3_537 -> m3_11  [key=2, style=dotted];
m3_538 -> m3_539  [key=0, style=solid];
m3_538 -> m3_11  [key=2, style=dotted];
m3_539 -> m3_540  [key=0, style=solid];
m3_539 -> m3_11  [key=2, style=dotted];
m3_540 -> m3_541  [key=0, style=solid];
m3_540 -> m3_11  [key=2, style=dotted];
m3_541 -> m3_523  [key=0, style=bold, color=blue];
m3_114 -> m3_115  [key=0, style=solid];
m3_115 -> m3_116  [key=0, style=solid];
m3_115 -> m3_53  [key=2, style=dotted];
m3_115 -> m3_54  [key=2, style=dotted];
m3_116 -> m3_117  [key=0, style=solid];
m3_116 -> m3_55  [key=2, style=dotted];
m3_117 -> m3_118  [key=0, style=solid];
m3_117 -> m3_113  [key=2, style=dotted];
m3_118 -> m3_114  [key=0, style=bold, color=blue];
m3_303 -> m3_304  [key=0, style=solid];
m3_304 -> m3_305  [key=0, style=solid];
m3_304 -> m3_313  [key=2, style=dotted];
m3_304 -> m3_306  [key=1, style=dashed, color=darkseagreen4, label=o1];
m3_305 -> m3_306  [key=0, style=solid];
m3_305 -> m3_313  [key=2, style=dotted];
m3_306 -> m3_307  [key=0, style=solid];
m3_306 -> m3_83  [key=2, style=dotted];
m3_307 -> m3_308  [key=0, style=solid];
m3_307 -> m3_9  [key=2, style=dotted];
m3_307 -> m3_24  [key=2, style=dotted];
m3_307 -> m3_309  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_307 -> m3_310  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_307 -> m3_311  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_308 -> m3_309  [key=0, style=solid];
m3_308 -> m3_91  [key=2, style=dotted];
m3_309 -> m3_310  [key=0, style=solid];
m3_309 -> m3_11  [key=2, style=dotted];
m3_310 -> m3_311  [key=0, style=solid];
m3_310 -> m3_11  [key=2, style=dotted];
m3_311 -> m3_312  [key=0, style=solid];
m3_311 -> m3_11  [key=2, style=dotted];
m3_312 -> m3_303  [key=0, style=bold, color=blue];
m3_245 -> m3_246  [key=0, style=solid];
m3_246 -> m3_247  [key=0, style=solid];
m3_246 -> m3_83  [key=2, style=dotted];
m3_246 -> m3_248  [key=1, style=dashed, color=darkseagreen4, label=a];
m3_246 -> m3_253  [key=1, style=dashed, color=darkseagreen4, label=a];
m3_246 -> m3_256  [key=1, style=dashed, color=darkseagreen4, label=a];
m3_246 -> m3_259  [key=1, style=dashed, color=darkseagreen4, label=a];
m3_246 -> m3_261  [key=1, style=dashed, color=darkseagreen4, label=a];
m3_246 -> m3_264  [key=1, style=dashed, color=darkseagreen4, label=a];
m3_246 -> m3_275  [key=1, style=dashed, color=darkseagreen4, label=a];
m3_247 -> m3_248  [key=0, style=solid];
m3_247 -> m3_247  [key=3, color=darkorchid, style=bold, label="Local variable System.Collections.Generic.IList<Newtonsoft.Json.Linq.JToken> t"];
m3_248 -> m3_249  [key=0, style=solid];
m3_248 -> m3_9  [key=2, style=dotted];
m3_248 -> m3_24  [key=2, style=dotted];
m3_248 -> m3_250  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_248 -> m3_251  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_248 -> m3_252  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_253 -> m3_254  [key=0, style=solid];
m3_253 -> m3_9  [key=2, style=dotted];
m3_253 -> m3_24  [key=2, style=dotted];
m3_253 -> m3_255  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_256 -> m3_257  [key=0, style=solid];
m3_256 -> m3_9  [key=2, style=dotted];
m3_256 -> m3_24  [key=2, style=dotted];
m3_256 -> m3_258  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_259 -> m3_260  [key=0, style=solid];
m3_259 -> m3_9  [key=2, style=dotted];
m3_259 -> m3_24  [key=2, style=dotted];
m3_261 -> m3_262  [key=0, style=solid];
m3_261 -> m3_9  [key=2, style=dotted];
m3_261 -> m3_24  [key=2, style=dotted];
m3_261 -> m3_263  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_264 -> m3_265  [key=0, style=solid];
m3_264 -> m3_9  [key=2, style=dotted];
m3_264 -> m3_24  [key=2, style=dotted];
m3_264 -> m3_266  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_264 -> m3_267  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_264 -> m3_268  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_264 -> m3_269  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_264 -> m3_270  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_264 -> m3_271  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_264 -> m3_272  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_264 -> m3_273  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_264 -> m3_274  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_275 -> m3_276  [key=0, style=solid];
m3_275 -> m3_9  [key=2, style=dotted];
m3_275 -> m3_24  [key=2, style=dotted];
m3_275 -> m3_277  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_275 -> m3_278  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_275 -> m3_279  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_275 -> m3_280  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_275 -> m3_281  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_249 -> m3_250  [key=0, style=solid];
m3_249 -> m3_11  [key=2, style=dotted];
m3_250 -> m3_251  [key=0, style=solid];
m3_250 -> m3_11  [key=2, style=dotted];
m3_251 -> m3_252  [key=0, style=solid];
m3_251 -> m3_11  [key=2, style=dotted];
m3_252 -> m3_253  [key=0, style=solid];
m3_252 -> m3_11  [key=2, style=dotted];
m3_254 -> m3_255  [key=0, style=solid];
m3_254 -> m3_11  [key=2, style=dotted];
m3_255 -> m3_256  [key=0, style=solid];
m3_255 -> m3_11  [key=2, style=dotted];
m3_257 -> m3_258  [key=0, style=solid];
m3_257 -> m3_11  [key=2, style=dotted];
m3_258 -> m3_259  [key=0, style=solid];
m3_258 -> m3_11  [key=2, style=dotted];
m3_260 -> m3_261  [key=0, style=solid];
m3_260 -> m3_11  [key=2, style=dotted];
m3_262 -> m3_263  [key=0, style=solid];
m3_262 -> m3_11  [key=2, style=dotted];
m3_263 -> m3_264  [key=0, style=solid];
m3_263 -> m3_11  [key=2, style=dotted];
m3_265 -> m3_266  [key=0, style=solid];
m3_265 -> m3_11  [key=2, style=dotted];
m3_266 -> m3_267  [key=0, style=solid];
m3_266 -> m3_11  [key=2, style=dotted];
m3_267 -> m3_268  [key=0, style=solid];
m3_267 -> m3_11  [key=2, style=dotted];
m3_268 -> m3_269  [key=0, style=solid];
m3_268 -> m3_11  [key=2, style=dotted];
m3_269 -> m3_270  [key=0, style=solid];
m3_269 -> m3_11  [key=2, style=dotted];
m3_270 -> m3_271  [key=0, style=solid];
m3_270 -> m3_11  [key=2, style=dotted];
m3_271 -> m3_272  [key=0, style=solid];
m3_271 -> m3_11  [key=2, style=dotted];
m3_272 -> m3_273  [key=0, style=solid];
m3_272 -> m3_11  [key=2, style=dotted];
m3_273 -> m3_274  [key=0, style=solid];
m3_273 -> m3_11  [key=2, style=dotted];
m3_274 -> m3_275  [key=0, style=solid];
m3_274 -> m3_11  [key=2, style=dotted];
m3_276 -> m3_277  [key=0, style=solid];
m3_276 -> m3_11  [key=2, style=dotted];
m3_277 -> m3_278  [key=0, style=solid];
m3_277 -> m3_11  [key=2, style=dotted];
m3_278 -> m3_279  [key=0, style=solid];
m3_278 -> m3_11  [key=2, style=dotted];
m3_279 -> m3_280  [key=0, style=solid];
m3_279 -> m3_11  [key=2, style=dotted];
m3_280 -> m3_281  [key=0, style=solid];
m3_280 -> m3_11  [key=2, style=dotted];
m3_281 -> m3_282  [key=0, style=solid];
m3_281 -> m3_11  [key=2, style=dotted];
m3_282 -> m3_245  [key=0, style=bold, color=blue];
m3_92 -> m3_93  [key=0, style=solid];
m3_93 -> m3_94  [key=0, style=solid];
m3_93 -> m3_100  [key=2, style=dotted];
m3_93 -> m3_54  [key=2, style=dotted];
m3_94 -> m3_95  [key=0, style=solid];
m3_94 -> m3_9  [key=2, style=dotted];
m3_94 -> m3_24  [key=2, style=dotted];
m3_94 -> m3_96  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_94 -> m3_97  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_94 -> m3_98  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_95 -> m3_96  [key=0, style=solid];
m3_95 -> m3_91  [key=2, style=dotted];
m3_96 -> m3_97  [key=0, style=solid];
m3_96 -> m3_11  [key=2, style=dotted];
m3_97 -> m3_98  [key=0, style=solid];
m3_97 -> m3_11  [key=2, style=dotted];
m3_98 -> m3_99  [key=0, style=solid];
m3_98 -> m3_11  [key=2, style=dotted];
m3_99 -> m3_92  [key=0, style=bold, color=blue];
m3_329 -> m3_330  [key=0, style=solid];
m3_330 -> m3_331  [key=0, style=solid];
m3_330 -> m3_313  [key=2, style=dotted];
m3_330 -> m3_333  [key=1, style=dashed, color=darkseagreen4, label=o1];
m3_331 -> m3_332  [key=0, style=solid];
m3_331 -> m3_313  [key=2, style=dotted];
m3_331 -> m3_333  [key=1, style=dashed, color=darkseagreen4, label=o2];
m3_333 -> m3_334  [key=0, style=solid];
m3_333 -> m3_83  [key=2, style=dotted];
m3_332 -> m3_333  [key=0, style=solid];
m3_332 -> m3_313  [key=2, style=dotted];
m3_332 -> m3_342  [key=2, style=dotted];
m3_334 -> m3_335  [key=0, style=solid];
m3_334 -> m3_9  [key=2, style=dotted];
m3_334 -> m3_24  [key=2, style=dotted];
m3_334 -> m3_336  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_334 -> m3_337  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_334 -> m3_338  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_334 -> m3_339  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_334 -> m3_340  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_335 -> m3_336  [key=0, style=solid];
m3_335 -> m3_91  [key=2, style=dotted];
m3_336 -> m3_337  [key=0, style=solid];
m3_336 -> m3_11  [key=2, style=dotted];
m3_337 -> m3_338  [key=0, style=solid];
m3_337 -> m3_11  [key=2, style=dotted];
m3_338 -> m3_339  [key=0, style=solid];
m3_338 -> m3_11  [key=2, style=dotted];
m3_339 -> m3_340  [key=0, style=solid];
m3_339 -> m3_313  [key=2, style=dotted];
m3_339 -> m3_342  [key=2, style=dotted];
m3_339 -> m3_327  [key=2, style=dotted];
m3_339 -> m3_328  [key=2, style=dotted];
m3_340 -> m3_341  [key=0, style=solid];
m3_340 -> m3_342  [key=2, style=dotted];
m3_340 -> m3_327  [key=2, style=dotted];
m3_340 -> m3_328  [key=2, style=dotted];
m3_341 -> m3_329  [key=0, style=bold, color=blue];
m3_25 -> m3_26  [key=0, style=solid];
m3_26 -> m3_27  [key=0, style=solid];
m3_26 -> m3_26  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m3_27 -> m3_28  [key=0, style=solid];
m3_27 -> m3_8  [key=2, style=dotted];
m3_28 -> m3_29  [key=0, style=solid];
m3_28 -> m3_9  [key=2, style=dotted];
m3_28 -> m3_24  [key=2, style=dotted];
m3_28 -> m3_30  [key=1, style=dashed, color=darkseagreen4, label=tokens];
m3_28 -> m3_31  [key=1, style=dashed, color=darkseagreen4, label=tokens];
m3_28 -> m3_32  [key=1, style=dashed, color=darkseagreen4, label=tokens];
m3_29 -> m3_30  [key=0, style=solid];
m3_29 -> m3_11  [key=2, style=dotted];
m3_30 -> m3_31  [key=0, style=solid];
m3_30 -> m3_11  [key=2, style=dotted];
m3_31 -> m3_32  [key=0, style=solid];
m3_31 -> m3_11  [key=2, style=dotted];
m3_32 -> m3_33  [key=0, style=solid];
m3_32 -> m3_11  [key=2, style=dotted];
m3_33 -> m3_25  [key=0, style=bold, color=blue];
m3_11 -> m3_12  [key=0, style=solid, color=green];
m3_12 -> m3_1  [key=3, color=green, style=bold, label="Local variable string json"];
m3_12 -> m3_13  [key=0, style=solid, color=green];
m3_13 -> m3_14  [key=0, style=solid, color=green];
m3_13 -> m3_8  [key=2, style=dotted, color=green];
m3_13 -> m3_16  [key=1, style=dashed, color=green, label=models];
m3_13 -> m3_17  [key=1, style=dashed, color=green, label=models];
m3_13 -> m3_13  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m3_14 -> m3_15  [key=0, style=solid, color=green];
m3_14 -> m3_9  [key=2, style=dotted, color=green];
m3_14 -> m3_24  [key=2, style=dotted, color=green];
m3_14 -> m3_16  [key=1, style=dashed, color=green, label=results];
m3_14 -> m3_17  [key=1, style=dashed, color=green, label=results];
m3_14 -> m3_8  [key=2, style=dotted];
m3_16 -> m3_17  [key=0, style=solid, color=green];
m3_16 -> m3_11  [key=2, style=dotted, color=green];
m3_17 -> m3_18  [key=0, style=solid, color=green];
m3_17 -> m3_11  [key=2, style=dotted, color=green];
m3_15 -> m3_16  [key=0, style=solid, color=green];
m3_15 -> m3_11  [key=2, style=dotted, color=green];
m3_15 -> m3_9  [key=2, style=dotted];
m3_15 -> m3_24  [key=2, style=dotted];
m3_15 -> m3_17  [key=1, style=dashed, color=darkseagreen4, label=results];
m3_15 -> m3_18  [key=1, style=dashed, color=darkseagreen4, label=results];
m3_15 -> m3_19  [key=1, style=dashed, color=darkseagreen4, label=results];
m3_15 -> m3_20  [key=1, style=dashed, color=darkseagreen4, label=results];
m3_15 -> m3_21  [key=1, style=dashed, color=darkseagreen4, label=results];
m3_15 -> m3_22  [key=1, style=dashed, color=darkseagreen4, label=results];
m3_18 -> m3_11  [key=0, style=bold, color=blue];
m3_18 -> m3_19  [key=0, style=solid];
m3_19 -> m3_20  [key=0, style=solid, color=green];
m3_19 -> m3_11  [key=2, style=dotted];
m3_20 -> m3_1  [key=3, color=green, style=bold, label="Local variable string json"];
m3_20 -> m3_21  [key=0, style=solid, color=green];
m3_20 -> m3_11  [key=2, style=dotted];
m3_21 -> m3_22  [key=0, style=solid, color=green];
m3_21 -> m3_8  [key=2, style=dotted, color=green];
m3_21 -> m3_11  [key=2, style=dotted];
m3_22 -> m3_23  [key=0, style=solid, color=green];
m3_22 -> m3_9  [key=2, style=dotted, color=green];
m3_22 -> m3_24  [key=2, style=dotted, color=green];
m3_22 -> m3_11  [key=2, style=dotted];
m3_23 -> m3_24  [key=0, style=solid, color=green];
m3_23 -> m3_11  [key=2, style=dotted, color=green];
m3_23 -> m3_12  [key=0, style=bold, color=blue];
m3_24 -> m3_19  [key=0, style=bold, color=blue];
m3_41 -> m3_42  [key=0, style=solid];
m3_42 -> m3_43  [key=0, style=solid];
m3_42 -> m3_42  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m3_43 -> m3_44  [key=0, style=solid];
m3_43 -> m3_8  [key=2, style=dotted];
m3_44 -> m3_45  [key=0, style=solid];
m3_44 -> m3_47  [key=2, style=dotted];
m3_45 -> m3_46  [key=0, style=solid];
m3_45 -> m3_11  [key=2, style=dotted];
m3_46 -> m3_41  [key=0, style=bold, color=blue];
m3_231 -> m3_232  [key=0, style=solid];
m3_232 -> m3_233  [key=0, style=solid];
m3_232 -> m3_83  [key=2, style=dotted];
m3_232 -> m3_236  [key=1, style=dashed, color=darkseagreen4, label=a];
m3_233 -> m3_234  [key=0, style=solid];
m3_233 -> m3_123  [key=2, style=dotted];
m3_233 -> m3_235  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_234 -> m3_231  [key=0, style=bold, color=blue];
m3_226 -> m3_227  [key=0, style=solid];
m3_227 -> m3_228  [key=0, style=solid];
m3_227 -> m3_83  [key=2, style=dotted];
m3_228 -> m3_229  [key=0, style=solid];
m3_228 -> m3_55  [key=2, style=dotted];
m3_229 -> m3_230  [key=0, style=solid];
m3_229 -> m3_113  [key=2, style=dotted];
m3_230 -> m3_226  [key=0, style=bold, color=blue];
m3_101 -> m3_102  [key=0, style=solid];
m3_102 -> m3_103  [key=0, style=solid];
m3_102 -> m3_53  [key=2, style=dotted];
m3_102 -> m3_54  [key=2, style=dotted];
m3_103 -> m3_104  [key=0, style=solid];
m3_103 -> m3_55  [key=2, style=dotted];
m3_103 -> m3_105  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_103 -> m3_106  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_104 -> m3_105  [key=0, style=solid];
m3_104 -> m3_91  [key=2, style=dotted];
m3_105 -> m3_106  [key=0, style=solid];
m3_105 -> m3_11  [key=2, style=dotted];
m3_106 -> m3_107  [key=0, style=solid];
m3_106 -> m3_11  [key=2, style=dotted];
m3_107 -> m3_101  [key=0, style=bold, color=blue];
m3_482 -> m3_483  [key=0, style=solid];
m3_483 -> m3_484  [key=0, style=solid];
m3_483 -> m3_8  [key=2, style=dotted];
m3_484 -> m3_485  [key=0, style=solid];
m3_484 -> m3_9  [key=2, style=dotted];
m3_484 -> m3_24  [key=2, style=dotted];
m3_484 -> m3_486  [key=1, style=dashed, color=darkseagreen4, label=tokens];
m3_484 -> m3_487  [key=1, style=dashed, color=darkseagreen4, label=tokens];
m3_484 -> m3_488  [key=1, style=dashed, color=darkseagreen4, label=tokens];
m3_484 -> m3_489  [key=1, style=dashed, color=darkseagreen4, label=tokens];
m3_484 -> m3_490  [key=1, style=dashed, color=darkseagreen4, label=tokens];
m3_484 -> m3_491  [key=1, style=dashed, color=darkseagreen4, label=tokens];
m3_484 -> m3_492  [key=1, style=dashed, color=darkseagreen4, label=tokens];
m3_485 -> m3_486  [key=0, style=solid];
m3_485 -> m3_485  [key=3, color=darkorchid, style=bold, label="Local variable int i"];
m3_486 -> m3_487  [key=0, style=solid];
m3_486 -> m3_11  [key=2, style=dotted];
m3_486 -> m3_486  [key=1, style=dashed, color=darkseagreen4, label=i];
m3_487 -> m3_488  [key=0, style=solid];
m3_487 -> m3_11  [key=2, style=dotted];
m3_487 -> m3_487  [key=1, style=dashed, color=darkseagreen4, label=i];
m3_488 -> m3_489  [key=0, style=solid];
m3_488 -> m3_11  [key=2, style=dotted];
m3_488 -> m3_488  [key=1, style=dashed, color=darkseagreen4, label=i];
m3_489 -> m3_490  [key=0, style=solid];
m3_489 -> m3_11  [key=2, style=dotted];
m3_489 -> m3_489  [key=1, style=dashed, color=darkseagreen4, label=i];
m3_490 -> m3_491  [key=0, style=solid];
m3_490 -> m3_11  [key=2, style=dotted];
m3_490 -> m3_490  [key=1, style=dashed, color=darkseagreen4, label=i];
m3_491 -> m3_492  [key=0, style=solid];
m3_491 -> m3_11  [key=2, style=dotted];
m3_491 -> m3_491  [key=1, style=dashed, color=darkseagreen4, label=i];
m3_492 -> m3_493  [key=0, style=solid];
m3_492 -> m3_11  [key=2, style=dotted];
m3_493 -> m3_482  [key=0, style=bold, color=blue];
m3_191 -> m3_192  [key=0, style=solid];
m3_192 -> m3_193  [key=0, style=solid];
m3_192 -> m3_53  [key=2, style=dotted];
m3_192 -> m3_54  [key=2, style=dotted];
m3_192 -> m3_196  [key=1, style=dashed, color=darkseagreen4, label=o];
m3_193 -> m3_194  [key=0, style=solid];
m3_193 -> m3_123  [key=2, style=dotted];
m3_193 -> m3_195  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_194 -> m3_191  [key=0, style=bold, color=blue];
m3_474 -> m3_475  [key=0, style=solid];
m3_475 -> m3_476  [key=0, style=solid];
m3_475 -> m3_459  [key=2, style=dotted];
m3_475 -> m3_478  [key=1, style=dashed, color=darkseagreen4, label=a];
m3_475 -> m3_479  [key=1, style=dashed, color=darkseagreen4, label=a];
m3_475 -> m3_480  [key=1, style=dashed, color=darkseagreen4, label=a];
m3_476 -> m3_477  [key=0, style=solid];
m3_476 -> m3_9  [key=2, style=dotted];
m3_476 -> m3_24  [key=2, style=dotted];
m3_476 -> m3_478  [key=1, style=dashed, color=darkseagreen4, label=results];
m3_476 -> m3_479  [key=1, style=dashed, color=darkseagreen4, label=results];
m3_476 -> m3_480  [key=1, style=dashed, color=darkseagreen4, label=results];
m3_478 -> m3_479  [key=0, style=solid];
m3_478 -> m3_11  [key=2, style=dotted];
m3_479 -> m3_480  [key=0, style=solid];
m3_479 -> m3_11  [key=2, style=dotted];
m3_480 -> m3_481  [key=0, style=solid];
m3_480 -> m3_11  [key=2, style=dotted];
m3_477 -> m3_478  [key=0, style=solid];
m3_477 -> m3_11  [key=2, style=dotted];
m3_481 -> m3_474  [key=0, style=bold, color=blue];
m3_63 -> m3_64  [key=0, style=solid];
m3_64 -> m3_65  [key=0, style=solid];
m3_64 -> m3_53  [key=2, style=dotted];
m3_64 -> m3_54  [key=2, style=dotted];
m3_65 -> m3_66  [key=0, style=solid];
m3_65 -> m3_55  [key=2, style=dotted];
m3_66 -> m3_67  [key=0, style=solid];
m3_66 -> m3_11  [key=2, style=dotted];
m3_67 -> m3_63  [key=0, style=bold, color=blue];
m3_0 -> m3_1  [key=0, style=solid, color=green];
m3_1 -> m3_1  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m3_1 -> m3_2  [key=0, style=solid, color=green];
m3_2 -> m3_3  [key=0, style=solid, color=green];
m3_2 -> m3_8  [key=2, style=dotted, color=green];
m3_2 -> m3_5  [key=1, style=dashed, color=darkseagreen4, label=models];
m3_3 -> m3_4  [key=0, style=solid, color=green];
m3_3 -> m3_9  [key=2, style=dotted, color=green];
m3_3 -> m3_24  [key=2, style=dotted, color=green];
m3_3 -> m3_5  [key=1, style=dashed, color=green, label=results];
m3_3 -> m3_10  [key=2, style=dotted];
m3_5 -> m3_6  [key=0, style=solid, color=green];
m3_5 -> m3_11  [key=2, style=dotted, color=green];
m3_5 -> m3_9  [key=2, style=dotted];
m3_5 -> m3_10  [key=2, style=dotted];
m3_4 -> m3_5  [key=0, style=solid, color=green];
m3_4 -> m3_11  [key=2, style=dotted, color=green];
m3_6 -> m3_0  [key=0, style=bold, color=blue];
m3_6 -> m3_7  [key=0, style=solid];
m3_6 -> m3_11  [key=2, style=dotted];
m3_382 -> m3_383  [key=0, style=solid];
m3_383 -> m3_384  [key=0, style=solid];
m3_383 -> m3_83  [key=2, style=dotted];
m3_383 -> m3_53  [key=2, style=dotted];
m3_383 -> m3_54  [key=2, style=dotted];
m3_384 -> m3_385  [key=0, style=solid];
m3_384 -> m3_9  [key=2, style=dotted];
m3_384 -> m3_24  [key=2, style=dotted];
m3_384 -> m3_386  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_384 -> m3_387  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_385 -> m3_386  [key=0, style=solid];
m3_385 -> m3_91  [key=2, style=dotted];
m3_386 -> m3_387  [key=0, style=solid];
m3_386 -> m3_11  [key=2, style=dotted];
m3_387 -> m3_388  [key=0, style=solid];
m3_387 -> m3_53  [key=2, style=dotted];
m3_387 -> m3_54  [key=2, style=dotted];
m3_387 -> m3_327  [key=2, style=dotted];
m3_387 -> m3_328  [key=2, style=dotted];
m3_388 -> m3_382  [key=0, style=bold, color=blue];
m3_84 -> m3_85  [key=0, style=solid];
m3_85 -> m3_86  [key=0, style=solid];
m3_85 -> m3_53  [key=2, style=dotted];
m3_85 -> m3_54  [key=2, style=dotted];
m3_86 -> m3_87  [key=0, style=solid];
m3_86 -> m3_55  [key=2, style=dotted];
m3_86 -> m3_88  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_86 -> m3_89  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_87 -> m3_88  [key=0, style=solid];
m3_87 -> m3_91  [key=2, style=dotted];
m3_88 -> m3_89  [key=0, style=solid];
m3_88 -> m3_11  [key=2, style=dotted];
m3_89 -> m3_90  [key=0, style=solid];
m3_89 -> m3_11  [key=2, style=dotted];
m3_90 -> m3_84  [key=0, style=bold, color=blue];
m3_314 -> m3_315  [key=0, style=solid];
m3_315 -> m3_316  [key=0, style=solid];
m3_315 -> m3_313  [key=2, style=dotted];
m3_315 -> m3_317  [key=1, style=dashed, color=darkseagreen4, label=o1];
m3_315 -> m3_322  [key=1, style=dashed, color=darkseagreen4, label=o1];
m3_316 -> m3_317  [key=0, style=solid];
m3_316 -> m3_313  [key=2, style=dotted];
m3_316 -> m3_324  [key=1, style=dashed, color=darkseagreen4, label=o2];
m3_317 -> m3_318  [key=0, style=solid];
m3_317 -> m3_83  [key=2, style=dotted];
m3_317 -> m3_321  [key=1, style=dashed, color=darkseagreen4, label=a];
m3_322 -> m3_323  [key=0, style=solid];
m3_322 -> m3_327  [key=2, style=dotted];
m3_322 -> m3_328  [key=2, style=dotted];
m3_324 -> m3_325  [key=0, style=solid];
m3_324 -> m3_327  [key=2, style=dotted];
m3_324 -> m3_328  [key=2, style=dotted];
m3_318 -> m3_319  [key=0, style=solid];
m3_318 -> m3_9  [key=2, style=dotted];
m3_318 -> m3_24  [key=2, style=dotted];
m3_318 -> m3_320  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_318 -> m3_321  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_318 -> m3_322  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_318 -> m3_323  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_318 -> m3_324  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_318 -> m3_325  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_321 -> m3_322  [key=0, style=solid];
m3_321 -> m3_327  [key=2, style=dotted];
m3_321 -> m3_328  [key=2, style=dotted];
m3_319 -> m3_320  [key=0, style=solid];
m3_319 -> m3_91  [key=2, style=dotted];
m3_320 -> m3_321  [key=0, style=solid];
m3_320 -> m3_11  [key=2, style=dotted];
m3_323 -> m3_324  [key=0, style=solid];
m3_323 -> m3_11  [key=2, style=dotted];
m3_325 -> m3_326  [key=0, style=solid];
m3_325 -> m3_11  [key=2, style=dotted];
m3_326 -> m3_314  [key=0, style=bold, color=blue];
m3_426 -> m3_427  [key=0, style=solid];
m3_427 -> m3_428  [key=0, style=solid];
m3_427 -> m3_83  [key=2, style=dotted];
m3_427 -> m3_53  [key=2, style=dotted];
m3_427 -> m3_434  [key=2, style=dotted];
m3_427 -> m3_435  [key=2, style=dotted];
m3_428 -> m3_429  [key=0, style=solid];
m3_428 -> m3_9  [key=2, style=dotted];
m3_428 -> m3_24  [key=2, style=dotted];
m3_428 -> m3_430  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_428 -> m3_431  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_428 -> m3_432  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_429 -> m3_430  [key=0, style=solid];
m3_429 -> m3_91  [key=2, style=dotted];
m3_430 -> m3_431  [key=0, style=solid];
m3_430 -> m3_11  [key=2, style=dotted];
m3_431 -> m3_432  [key=0, style=solid];
m3_431 -> m3_53  [key=2, style=dotted];
m3_431 -> m3_54  [key=2, style=dotted];
m3_431 -> m3_327  [key=2, style=dotted];
m3_431 -> m3_328  [key=2, style=dotted];
m3_432 -> m3_433  [key=0, style=solid];
m3_432 -> m3_53  [key=2, style=dotted];
m3_432 -> m3_54  [key=2, style=dotted];
m3_432 -> m3_327  [key=2, style=dotted];
m3_432 -> m3_328  [key=2, style=dotted];
m3_433 -> m3_426  [key=0, style=bold, color=blue];
m3_78 -> m3_79  [key=0, style=solid];
m3_79 -> m3_80  [key=0, style=solid];
m3_79 -> m3_53  [key=2, style=dotted];
m3_79 -> m3_54  [key=2, style=dotted];
m3_79 -> m3_83  [key=2, style=dotted];
m3_80 -> m3_81  [key=0, style=solid];
m3_80 -> m3_55  [key=2, style=dotted];
m3_81 -> m3_82  [key=0, style=solid];
m3_81 -> m3_11  [key=2, style=dotted];
m3_82 -> m3_78  [key=0, style=bold, color=blue];
m3_283 -> m3_284  [key=0, style=solid];
m3_284 -> m3_285  [key=0, style=solid];
m3_284 -> m3_83  [key=2, style=dotted];
m3_285 -> m3_286  [key=0, style=solid];
m3_285 -> m3_9  [key=2, style=dotted];
m3_285 -> m3_24  [key=2, style=dotted];
m3_285 -> m3_287  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_285 -> m3_288  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_285 -> m3_289  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_285 -> m3_290  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_285 -> m3_291  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_286 -> m3_287  [key=0, style=solid];
m3_286 -> m3_91  [key=2, style=dotted];
m3_287 -> m3_288  [key=0, style=solid];
m3_287 -> m3_11  [key=2, style=dotted];
m3_288 -> m3_289  [key=0, style=solid];
m3_288 -> m3_11  [key=2, style=dotted];
m3_289 -> m3_290  [key=0, style=solid];
m3_289 -> m3_11  [key=2, style=dotted];
m3_290 -> m3_291  [key=0, style=solid];
m3_290 -> m3_11  [key=2, style=dotted];
m3_291 -> m3_292  [key=0, style=solid];
m3_291 -> m3_11  [key=2, style=dotted];
m3_292 -> m3_283  [key=0, style=bold, color=blue];
m3_186 -> m3_187  [key=0, style=solid];
m3_187 -> m3_188  [key=0, style=solid];
m3_187 -> m3_53  [key=2, style=dotted];
m3_187 -> m3_54  [key=2, style=dotted];
m3_188 -> m3_189  [key=0, style=solid];
m3_188 -> m3_47  [key=2, style=dotted];
m3_189 -> m3_190  [key=0, style=solid];
m3_189 -> m3_11  [key=2, style=dotted];
m3_190 -> m3_186  [key=0, style=bold, color=blue];
m3_167 -> m3_168  [key=0, style=solid];
m3_168 -> m3_169  [key=0, style=solid];
m3_168 -> m3_171  [key=2, style=dotted];
m3_168 -> m3_173  [key=1, style=dashed, color=darkseagreen4, label=c];
m3_169 -> m3_170  [key=0, style=solid];
m3_169 -> m3_123  [key=2, style=dotted];
m3_169 -> m3_172  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_170 -> m3_167  [key=0, style=bold, color=blue];
m3_361 -> m3_362  [key=0, style=solid];
m3_362 -> m3_363  [key=0, style=solid];
m3_362 -> m3_53  [key=2, style=dotted];
m3_362 -> m3_54  [key=2, style=dotted];
m3_362 -> m3_366  [key=1, style=dashed, color=darkseagreen4, label=o];
m3_363 -> m3_364  [key=0, style=solid];
m3_363 -> m3_55  [key=2, style=dotted];
m3_363 -> m3_365  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_366 -> m3_367  [key=0, style=solid];
m3_366 -> m3_55  [key=2, style=dotted];
m3_366 -> m3_368  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_364 -> m3_365  [key=0, style=solid];
m3_364 -> m3_91  [key=2, style=dotted];
m3_365 -> m3_366  [key=0, style=solid];
m3_365 -> m3_11  [key=2, style=dotted];
m3_367 -> m3_368  [key=0, style=solid];
m3_367 -> m3_11  [key=2, style=dotted];
m3_368 -> m3_369  [key=0, style=solid];
m3_368 -> m3_11  [key=2, style=dotted];
m3_369 -> m3_361  [key=0, style=bold, color=blue];
m3_410 -> m3_411  [key=0, style=solid];
m3_411 -> m3_412  [key=0, style=solid];
m3_411 -> m3_83  [key=2, style=dotted];
m3_411 -> m3_53  [key=2, style=dotted];
m3_411 -> m3_54  [key=2, style=dotted];
m3_412 -> m3_413  [key=0, style=solid];
m3_412 -> m3_9  [key=2, style=dotted];
m3_412 -> m3_24  [key=2, style=dotted];
m3_412 -> m3_414  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_412 -> m3_415  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_412 -> m3_416  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_413 -> m3_414  [key=0, style=solid];
m3_413 -> m3_91  [key=2, style=dotted];
m3_414 -> m3_415  [key=0, style=solid];
m3_414 -> m3_11  [key=2, style=dotted];
m3_415 -> m3_416  [key=0, style=solid];
m3_415 -> m3_53  [key=2, style=dotted];
m3_415 -> m3_54  [key=2, style=dotted];
m3_415 -> m3_327  [key=2, style=dotted];
m3_415 -> m3_328  [key=2, style=dotted];
m3_416 -> m3_417  [key=0, style=solid];
m3_416 -> m3_53  [key=2, style=dotted];
m3_416 -> m3_54  [key=2, style=dotted];
m3_416 -> m3_327  [key=2, style=dotted];
m3_416 -> m3_328  [key=2, style=dotted];
m3_417 -> m3_410  [key=0, style=bold, color=blue];
m3_34 -> m3_35  [key=0, style=solid];
m3_35 -> m3_36  [key=0, style=solid];
m3_35 -> m3_35  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m3_36 -> m3_37  [key=0, style=solid];
m3_36 -> m3_8  [key=2, style=dotted];
m3_37 -> m3_38  [key=0, style=solid];
m3_37 -> m3_9  [key=2, style=dotted];
m3_37 -> m3_24  [key=2, style=dotted];
m3_37 -> m3_39  [key=1, style=dashed, color=darkseagreen4, label=results];
m3_38 -> m3_39  [key=0, style=solid];
m3_38 -> m3_11  [key=2, style=dotted];
m3_39 -> m3_40  [key=0, style=solid];
m3_39 -> m3_11  [key=2, style=dotted];
m3_40 -> m3_34  [key=0, style=bold, color=blue];
m3_73 -> m3_74  [key=0, style=solid];
m3_74 -> m3_75  [key=0, style=solid];
m3_74 -> m3_53  [key=2, style=dotted];
m3_74 -> m3_54  [key=2, style=dotted];
m3_74 -> m3_76  [key=1, style=dashed, color=darkseagreen4, label=o];
m3_75 -> m3_76  [key=0, style=solid];
m3_75 -> m3_55  [key=2, style=dotted];
m3_76 -> m3_77  [key=0, style=solid];
m3_76 -> m3_11  [key=2, style=dotted];
m3_77 -> m3_73  [key=0, style=bold, color=blue];
m3_108 -> m3_109  [key=0, style=solid];
m3_109 -> m3_110  [key=0, style=solid];
m3_109 -> m3_53  [key=2, style=dotted];
m3_109 -> m3_54  [key=2, style=dotted];
m3_110 -> m3_111  [key=0, style=solid];
m3_110 -> m3_55  [key=2, style=dotted];
m3_111 -> m3_112  [key=0, style=solid];
m3_111 -> m3_113  [key=2, style=dotted];
m3_112 -> m3_108  [key=0, style=bold, color=blue];
m3_160 -> m3_161  [key=0, style=solid];
m3_161 -> m3_162  [key=0, style=solid];
m3_161 -> m3_83  [key=2, style=dotted];
m3_161 -> m3_165  [key=1, style=dashed, color=darkseagreen4, label=a];
m3_162 -> m3_163  [key=0, style=solid];
m3_162 -> m3_123  [key=2, style=dotted];
m3_162 -> m3_164  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_163 -> m3_160  [key=0, style=bold, color=blue];
m3_466 -> m3_467  [key=0, style=solid];
m3_467 -> m3_468  [key=0, style=solid];
m3_467 -> m3_459  [key=2, style=dotted];
m3_467 -> m3_470  [key=1, style=dashed, color=darkseagreen4, label=a];
m3_467 -> m3_471  [key=1, style=dashed, color=darkseagreen4, label=a];
m3_467 -> m3_472  [key=1, style=dashed, color=darkseagreen4, label=a];
m3_468 -> m3_469  [key=0, style=solid];
m3_468 -> m3_9  [key=2, style=dotted];
m3_468 -> m3_24  [key=2, style=dotted];
m3_468 -> m3_470  [key=1, style=dashed, color=darkseagreen4, label=results];
m3_468 -> m3_471  [key=1, style=dashed, color=darkseagreen4, label=results];
m3_468 -> m3_472  [key=1, style=dashed, color=darkseagreen4, label=results];
m3_470 -> m3_471  [key=0, style=solid];
m3_470 -> m3_11  [key=2, style=dotted];
m3_471 -> m3_472  [key=0, style=solid];
m3_471 -> m3_11  [key=2, style=dotted];
m3_472 -> m3_473  [key=0, style=solid];
m3_472 -> m3_11  [key=2, style=dotted];
m3_469 -> m3_470  [key=0, style=solid];
m3_469 -> m3_11  [key=2, style=dotted];
m3_473 -> m3_466  [key=0, style=bold, color=blue];
m3_436 -> m3_437  [key=0, style=solid];
m3_437 -> m3_438  [key=0, style=solid];
m3_437 -> m3_83  [key=2, style=dotted];
m3_437 -> m3_53  [key=2, style=dotted];
m3_437 -> m3_54  [key=2, style=dotted];
m3_438 -> m3_439  [key=0, style=solid];
m3_438 -> m3_9  [key=2, style=dotted];
m3_438 -> m3_24  [key=2, style=dotted];
m3_438 -> m3_440  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_438 -> m3_441  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_438 -> m3_442  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_438 -> m3_443  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_438 -> m3_444  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_439 -> m3_440  [key=0, style=solid];
m3_439 -> m3_91  [key=2, style=dotted];
m3_440 -> m3_441  [key=0, style=solid];
m3_440 -> m3_11  [key=2, style=dotted];
m3_441 -> m3_442  [key=0, style=solid];
m3_441 -> m3_53  [key=2, style=dotted];
m3_441 -> m3_54  [key=2, style=dotted];
m3_441 -> m3_327  [key=2, style=dotted];
m3_441 -> m3_328  [key=2, style=dotted];
m3_442 -> m3_443  [key=0, style=solid];
m3_442 -> m3_53  [key=2, style=dotted];
m3_442 -> m3_54  [key=2, style=dotted];
m3_442 -> m3_327  [key=2, style=dotted];
m3_442 -> m3_328  [key=2, style=dotted];
m3_443 -> m3_444  [key=0, style=solid];
m3_443 -> m3_53  [key=2, style=dotted];
m3_443 -> m3_54  [key=2, style=dotted];
m3_443 -> m3_327  [key=2, style=dotted];
m3_443 -> m3_328  [key=2, style=dotted];
m3_444 -> m3_445  [key=0, style=solid];
m3_444 -> m3_53  [key=2, style=dotted];
m3_444 -> m3_54  [key=2, style=dotted];
m3_444 -> m3_327  [key=2, style=dotted];
m3_444 -> m3_328  [key=2, style=dotted];
m3_445 -> m3_436  [key=0, style=bold, color=blue];
m3_48 -> m3_49  [key=0, style=solid];
m3_49 -> m3_50  [key=0, style=solid];
m3_49 -> m3_53  [key=2, style=dotted];
m3_49 -> m3_54  [key=2, style=dotted];
m3_50 -> m3_51  [key=0, style=solid];
m3_50 -> m3_55  [key=2, style=dotted];
m3_51 -> m3_52  [key=0, style=solid];
m3_51 -> m3_11  [key=2, style=dotted];
m3_52 -> m3_48  [key=0, style=bold, color=blue];
m3_418 -> m3_419  [key=0, style=solid];
m3_419 -> m3_420  [key=0, style=solid];
m3_419 -> m3_83  [key=2, style=dotted];
m3_419 -> m3_53  [key=2, style=dotted];
m3_419 -> m3_54  [key=2, style=dotted];
m3_420 -> m3_421  [key=0, style=solid];
m3_420 -> m3_9  [key=2, style=dotted];
m3_420 -> m3_24  [key=2, style=dotted];
m3_420 -> m3_422  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_420 -> m3_423  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_420 -> m3_424  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_421 -> m3_422  [key=0, style=solid];
m3_421 -> m3_91  [key=2, style=dotted];
m3_422 -> m3_423  [key=0, style=solid];
m3_422 -> m3_11  [key=2, style=dotted];
m3_423 -> m3_424  [key=0, style=solid];
m3_423 -> m3_53  [key=2, style=dotted];
m3_423 -> m3_54  [key=2, style=dotted];
m3_423 -> m3_327  [key=2, style=dotted];
m3_423 -> m3_328  [key=2, style=dotted];
m3_424 -> m3_425  [key=0, style=solid];
m3_424 -> m3_53  [key=2, style=dotted];
m3_424 -> m3_54  [key=2, style=dotted];
m3_424 -> m3_327  [key=2, style=dotted];
m3_424 -> m3_328  [key=2, style=dotted];
m3_425 -> m3_418  [key=0, style=bold, color=blue];
m3_7 -> m3_0  [key=0, style=bold, color=blue];
m3_396 -> m3_397  [key=0, style=solid];
m3_397 -> m3_398  [key=0, style=solid];
m3_397 -> m3_83  [key=2, style=dotted];
m3_398 -> m3_399  [key=0, style=solid];
m3_398 -> m3_9  [key=2, style=dotted];
m3_398 -> m3_24  [key=2, style=dotted];
m3_398 -> m3_400  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_398 -> m3_401  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_398 -> m3_402  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_399 -> m3_400  [key=0, style=solid];
m3_399 -> m3_91  [key=2, style=dotted];
m3_400 -> m3_401  [key=0, style=solid];
m3_400 -> m3_11  [key=2, style=dotted];
m3_401 -> m3_402  [key=0, style=solid];
m3_401 -> m3_11  [key=2, style=dotted];
m3_402 -> m3_403  [key=0, style=solid];
m3_402 -> m3_11  [key=2, style=dotted];
m3_403 -> m3_396  [key=0, style=bold, color=blue];
m3_550 -> m3_551  [key=0, style=solid];
m3_125 -> m3_126  [key=0, style=solid];
m3_125 -> m3_47  [key=2, style=dotted];
m3_124 -> m3_125  [key=0, style=solid];
m3_126 -> m3_124  [key=0, style=bold, color=blue];
m3_132 -> m3_133  [key=0, style=solid];
m3_132 -> m3_47  [key=2, style=dotted];
m3_131 -> m3_132  [key=0, style=solid];
m3_133 -> m3_131  [key=0, style=bold, color=blue];
m3_139 -> m3_140  [key=0, style=solid];
m3_139 -> m3_47  [key=2, style=dotted];
m3_138 -> m3_139  [key=0, style=solid];
m3_140 -> m3_138  [key=0, style=bold, color=blue];
m3_151 -> m3_152  [key=0, style=solid];
m3_151 -> m3_55  [key=2, style=dotted];
m3_150 -> m3_151  [key=0, style=solid];
m3_152 -> m3_150  [key=0, style=bold, color=blue];
m3_158 -> m3_159  [key=0, style=solid];
m3_158 -> m3_47  [key=2, style=dotted];
m3_157 -> m3_158  [key=0, style=solid];
m3_159 -> m3_157  [key=0, style=bold, color=blue];
m3_165 -> m3_166  [key=0, style=solid];
m3_165 -> m3_47  [key=2, style=dotted];
m3_164 -> m3_165  [key=0, style=solid];
m3_166 -> m3_164  [key=0, style=bold, color=blue];
m3_173 -> m3_174  [key=0, style=solid];
m3_173 -> m3_47  [key=2, style=dotted];
m3_172 -> m3_173  [key=0, style=solid];
m3_174 -> m3_172  [key=0, style=bold, color=blue];
m3_184 -> m3_185  [key=0, style=solid];
m3_184 -> m3_47  [key=2, style=dotted];
m3_183 -> m3_184  [key=0, style=solid];
m3_185 -> m3_183  [key=0, style=bold, color=blue];
m3_196 -> m3_197  [key=0, style=solid];
m3_196 -> m3_47  [key=2, style=dotted];
m3_195 -> m3_196  [key=0, style=solid];
m3_197 -> m3_195  [key=0, style=bold, color=blue];
m3_203 -> m3_204  [key=0, style=solid];
m3_203 -> m3_47  [key=2, style=dotted];
m3_202 -> m3_203  [key=0, style=solid];
m3_204 -> m3_202  [key=0, style=bold, color=blue];
m3_215 -> m3_216  [key=0, style=solid];
m3_215 -> m3_47  [key=2, style=dotted];
m3_218 -> m3_219  [key=0, style=solid];
m3_218 -> m3_47  [key=2, style=dotted];
m3_221 -> m3_222  [key=0, style=solid];
m3_221 -> m3_47  [key=2, style=dotted];
m3_214 -> m3_215  [key=0, style=solid];
m3_217 -> m3_218  [key=0, style=solid];
m3_220 -> m3_221  [key=0, style=solid];
m3_224 -> m3_225  [key=0, style=solid];
m3_224 -> m3_47  [key=2, style=dotted];
m3_223 -> m3_224  [key=0, style=solid];
m3_216 -> m3_214  [key=0, style=bold, color=blue];
m3_219 -> m3_217  [key=0, style=bold, color=blue];
m3_222 -> m3_220  [key=0, style=bold, color=blue];
m3_225 -> m3_223  [key=0, style=bold, color=blue];
m3_236 -> m3_237  [key=0, style=solid];
m3_236 -> m3_47  [key=2, style=dotted];
m3_235 -> m3_236  [key=0, style=solid];
m3_237 -> m3_235  [key=0, style=bold, color=blue];
m3_520 -> m3_521  [key=0, style=solid];
m3_521 -> m3_522  [key=0, style=solid];
m3_521 -> m3_53  [key=2, style=dotted];
m3_521 -> m3_54  [key=2, style=dotted];
m3_522 -> m3_520  [key=0, style=bold, color=blue];
m3_544 -> m3_545  [key=0, style=solid];
m3_547 -> m3_548  [key=0, style=solid];
m3_545 -> m3_546  [key=0, style=solid];
m3_546 -> m3_544  [key=0, style=bold, color=blue];
m3_548 -> m3_549  [key=0, style=solid];
m3_548 -> m3_55  [key=2, style=dotted];
m3_549 -> m3_547  [key=0, style=bold, color=blue];
m3_551 -> m3_552  [key=0, style=solid];
m3_551 -> m3_55  [key=2, style=dotted];
m3_552 -> m3_550  [key=0, style=bold, color=blue];
m3_293 -> m3_294  [key=0, style=solid];
m3_294 -> m3_295  [key=0, style=solid];
m3_294 -> m3_83  [key=2, style=dotted];
m3_295 -> m3_296  [key=0, style=solid];
m3_295 -> m3_9  [key=2, style=dotted];
m3_295 -> m3_297  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_295 -> m3_298  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_295 -> m3_299  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_295 -> m3_300  [key=1, style=dashed, color=darkseagreen4, label=t];
m3_296 -> m3_297  [key=0, style=solid];
m3_296 -> m3_91  [key=2, style=dotted];
m3_297 -> m3_298  [key=0, style=solid];
m3_297 -> m3_10  [key=2, style=dotted];
m3_297 -> m3_11  [key=2, style=dotted];
m3_298 -> m3_299  [key=0, style=solid];
m3_298 -> m3_302  [key=2, style=dotted];
m3_298 -> m3_11  [key=2, style=dotted];
m3_299 -> m3_300  [key=0, style=solid];
m3_299 -> m3_302  [key=2, style=dotted];
m3_299 -> m3_11  [key=2, style=dotted];
m3_300 -> m3_301  [key=0, style=solid];
m3_300 -> m3_302  [key=2, style=dotted];
m3_300 -> m3_11  [key=2, style=dotted];
m3_301 -> m3_293  [key=0, style=bold, color=blue];
m3_153 -> m3_154  [key=0, style=solid];
m3_154 -> m3_155  [key=0, style=solid];
m3_154 -> m3_83  [key=2, style=dotted];
m3_154 -> m3_158  [key=1, style=dashed, color=darkseagreen4, label=a];
m3_155 -> m3_156  [key=0, style=solid];
m3_155 -> m3_123  [key=2, style=dotted];
m3_155 -> m3_157  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_156 -> m3_153  [key=0, style=bold, color=blue];
m3_134 -> m3_135  [key=0, style=solid];
m3_135 -> m3_136  [key=0, style=solid];
m3_135 -> m3_53  [key=2, style=dotted];
m3_135 -> m3_54  [key=2, style=dotted];
m3_135 -> m3_139  [key=1, style=dashed, color=darkseagreen4, label=o];
m3_136 -> m3_137  [key=0, style=solid];
m3_136 -> m3_123  [key=2, style=dotted];
m3_136 -> m3_138  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_137 -> m3_134  [key=0, style=bold, color=blue];
m3_198 -> m3_199  [key=0, style=solid];
m3_199 -> m3_200  [key=0, style=solid];
m3_199 -> m3_83  [key=2, style=dotted];
m3_199 -> m3_203  [key=1, style=dashed, color=darkseagreen4, label=a];
m3_200 -> m3_201  [key=0, style=solid];
m3_200 -> m3_123  [key=2, style=dotted];
m3_200 -> m3_202  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_201 -> m3_198  [key=0, style=bold, color=blue];
m3_127 -> m3_128  [key=0, style=solid];
m3_128 -> m3_129  [key=0, style=solid];
m3_128 -> m3_53  [key=2, style=dotted];
m3_128 -> m3_54  [key=2, style=dotted];
m3_128 -> m3_132  [key=1, style=dashed, color=darkseagreen4, label=o];
m3_129 -> m3_130  [key=0, style=solid];
m3_129 -> m3_123  [key=2, style=dotted];
m3_129 -> m3_131  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m3_130 -> m3_127  [key=0, style=bold, color=blue];
m3_567 -> m3_568  [key=0, style=solid];
m3_568 -> m3_569  [key=0, style=solid];
m3_568 -> m3_568  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m3_569 -> m3_570  [key=0, style=solid];
m3_569 -> m3_459  [key=2, style=dotted];
m3_569 -> m3_572  [key=1, style=dashed, color=darkseagreen4, label=a];
m3_570 -> m3_571  [key=0, style=solid];
m3_570 -> m3_9  [key=2, style=dotted];
m3_570 -> m3_24  [key=2, style=dotted];
m3_572 -> m3_573  [key=0, style=solid];
m3_572 -> m3_9  [key=2, style=dotted];
m3_572 -> m3_24  [key=2, style=dotted];
m3_571 -> m3_572  [key=0, style=solid];
m3_571 -> m3_11  [key=2, style=dotted];
m3_573 -> m3_574  [key=0, style=solid];
m3_573 -> m3_11  [key=2, style=dotted];
m3_574 -> m3_567  [key=0, style=bold, color=blue];
m3_460 -> m3_461  [key=0, style=solid];
m3_461 -> m3_462  [key=0, style=solid];
m3_461 -> m3_459  [key=2, style=dotted];
m3_461 -> m3_464  [key=1, style=dashed, color=darkseagreen4, label=a];
m3_462 -> m3_463  [key=0, style=solid];
m3_462 -> m3_9  [key=2, style=dotted];
m3_462 -> m3_24  [key=2, style=dotted];
m3_462 -> m3_464  [key=1, style=dashed, color=darkseagreen4, label=results];
m3_464 -> m3_465  [key=0, style=solid];
m3_464 -> m3_11  [key=2, style=dotted];
m3_463 -> m3_464  [key=0, style=solid];
m3_463 -> m3_11  [key=2, style=dotted];
m3_465 -> m3_460  [key=0, style=bold, color=blue];
m3_141 -> m3_142  [key=0, style=solid];
m3_142 -> m3_143  [key=0, style=solid];
m3_142 -> m3_83  [key=2, style=dotted];
m3_143 -> m3_144  [key=0, style=solid];
m3_143 -> m3_55  [key=2, style=dotted];
m3_144 -> m3_145  [key=0, style=solid];
m3_144 -> m3_113  [key=2, style=dotted];
m3_145 -> m3_141  [key=0, style=bold, color=blue];
m3_56 -> m3_57  [key=0, style=solid];
m3_57 -> m3_58  [key=0, style=solid];
m3_57 -> m3_53  [key=2, style=dotted];
m3_57 -> m3_54  [key=2, style=dotted];
m3_57 -> m3_59  [key=1, style=dashed, color=darkseagreen4, label=o];
m3_57 -> m3_60  [key=1, style=dashed, color=darkseagreen4, label=o];
m3_58 -> m3_59  [key=0, style=solid];
m3_58 -> m3_55  [key=2, style=dotted];
m3_59 -> m3_60  [key=0, style=solid];
m3_59 -> m3_11  [key=2, style=dotted];
m3_60 -> m3_61  [key=0, style=solid];
m3_60 -> m3_55  [key=2, style=dotted];
m3_61 -> m3_62  [key=0, style=solid];
m3_61 -> m3_11  [key=2, style=dotted];
m3_62 -> m3_56  [key=0, style=bold, color=blue];
m3_575 -> m3_125  [key=1, style=dashed, color=darkseagreen4, label=o];
m3_576 -> m3_132  [key=1, style=dashed, color=darkseagreen4, label=o];
m3_577 -> m3_139  [key=1, style=dashed, color=darkseagreen4, label=o];
m3_578 -> m3_151  [key=1, style=dashed, color=darkseagreen4, label=a];
m3_579 -> m3_158  [key=1, style=dashed, color=darkseagreen4, label=a];
m3_580 -> m3_165  [key=1, style=dashed, color=darkseagreen4, label=a];
m3_581 -> m3_173  [key=1, style=dashed, color=darkseagreen4, label=c];
m3_582 -> m3_184  [key=1, style=dashed, color=darkseagreen4, label=o];
m3_583 -> m3_196  [key=1, style=dashed, color=darkseagreen4, label=o];
m3_584 -> m3_203  [key=1, style=dashed, color=darkseagreen4, label=a];
m3_585 -> m3_215  [key=1, style=dashed, color=darkseagreen4, label=a];
m3_585 -> m3_218  [key=1, style=dashed, color=darkseagreen4, label=a];
m3_585 -> m3_221  [key=1, style=dashed, color=darkseagreen4, label=a];
m3_585 -> m3_224  [key=1, style=dashed, color=darkseagreen4, label=a];
m3_586 -> m3_236  [key=1, style=dashed, color=darkseagreen4, label=a];
m4_94 -> m4_95  [key=0, style=solid];
m4_95 -> m4_96  [key=0, style=solid];
m4_95 -> m4_8  [key=2, style=dotted];
m4_95 -> m4_97  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_95 -> m4_98  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_96 -> m4_97  [key=0, style=solid];
m4_96 -> m4_9  [key=2, style=dotted];
m4_97 -> m4_98  [key=0, style=solid];
m4_97 -> m4_9  [key=2, style=dotted];
m4_98 -> m4_99  [key=0, style=solid];
m4_98 -> m4_9  [key=2, style=dotted];
m4_99 -> m4_94  [key=0, style=bold, color=blue];
m4_308 -> m4_309  [key=0, style=solid];
m4_309 -> m4_310  [key=0, style=solid];
m4_309 -> m4_58  [key=2, style=dotted];
m4_309 -> m4_311  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_310 -> m4_308  [key=0, style=bold, color=blue];
m4_228 -> m4_229  [key=0, style=solid];
m4_229 -> m4_230  [key=0, style=solid];
m4_229 -> m4_8  [key=2, style=dotted];
m4_230 -> m4_231  [key=0, style=solid];
m4_231 -> m4_232  [key=0, style=solid];
m4_231 -> m4_9  [key=2, style=dotted];
m4_232 -> m4_228  [key=0, style=bold, color=blue];
m4_381 -> m4_382  [key=0, style=solid];
m4_382 -> m4_383  [key=0, style=solid];
m4_382 -> m4_8  [key=2, style=dotted];
m4_382 -> m4_384  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_382 -> m4_385  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_382 -> m4_386  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_383 -> m4_384  [key=0, style=solid];
m4_383 -> m4_9  [key=2, style=dotted];
m4_384 -> m4_385  [key=0, style=solid];
m4_384 -> m4_9  [key=2, style=dotted];
m4_385 -> m4_386  [key=0, style=solid];
m4_385 -> m4_9  [key=2, style=dotted];
m4_386 -> m4_387  [key=0, style=solid];
m4_386 -> m4_9  [key=2, style=dotted];
m4_387 -> m4_381  [key=0, style=bold, color=blue];
m4_218 -> m4_219  [key=0, style=solid];
m4_219 -> m4_220  [key=0, style=solid];
m4_219 -> m4_8  [key=2, style=dotted];
m4_220 -> m4_221  [key=0, style=solid];
m4_221 -> m4_222  [key=0, style=solid];
m4_221 -> m4_9  [key=2, style=dotted];
m4_222 -> m4_218  [key=0, style=bold, color=blue];
m4_132 -> m4_133  [key=0, style=solid];
m4_133 -> m4_134  [key=0, style=solid];
m4_133 -> m4_8  [key=2, style=dotted];
m4_133 -> m4_135  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_133 -> m4_136  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_134 -> m4_135  [key=0, style=solid];
m4_134 -> m4_9  [key=2, style=dotted];
m4_135 -> m4_136  [key=0, style=solid];
m4_135 -> m4_9  [key=2, style=dotted];
m4_136 -> m4_137  [key=0, style=solid];
m4_136 -> m4_9  [key=2, style=dotted];
m4_137 -> m4_132  [key=0, style=bold, color=blue];
m4_74 -> m4_75  [key=0, style=solid];
m4_75 -> m4_76  [key=0, style=solid];
m4_75 -> m4_8  [key=2, style=dotted];
m4_75 -> m4_77  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_76 -> m4_77  [key=0, style=solid];
m4_76 -> m4_9  [key=2, style=dotted];
m4_77 -> m4_78  [key=0, style=solid];
m4_77 -> m4_9  [key=2, style=dotted];
m4_78 -> m4_74  [key=0, style=bold, color=blue];
m4_0 -> m4_1  [key=0, style=solid];
m4_1 -> m4_2  [key=0, style=solid];
m4_1 -> m4_8  [key=2, style=dotted];
m4_1 -> m4_3  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_2 -> m4_3  [key=0, style=solid];
m4_2 -> m4_9  [key=2, style=dotted];
m4_3 -> m4_4  [key=0, style=solid];
m4_3 -> m4_5  [key=1, style=dashed, color=darkseagreen4, label=booleanExpression];
m4_3 -> m4_6  [key=1, style=dashed, color=darkseagreen4, label=booleanExpression];
m4_4 -> m4_5  [key=0, style=solid];
m4_4 -> m4_9  [key=2, style=dotted];
m4_5 -> m4_6  [key=0, style=solid];
m4_5 -> m4_9  [key=2, style=dotted];
m4_6 -> m4_7  [key=0, style=solid];
m4_6 -> m4_9  [key=2, style=dotted];
m4_7 -> m4_0  [key=0, style=bold, color=blue];
m4_126 -> m4_127  [key=0, style=solid];
m4_127 -> m4_128  [key=0, style=solid];
m4_127 -> m4_8  [key=2, style=dotted];
m4_127 -> m4_129  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_127 -> m4_130  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_128 -> m4_129  [key=0, style=solid];
m4_128 -> m4_9  [key=2, style=dotted];
m4_129 -> m4_130  [key=0, style=solid];
m4_129 -> m4_9  [key=2, style=dotted];
m4_130 -> m4_131  [key=0, style=solid];
m4_130 -> m4_9  [key=2, style=dotted];
m4_131 -> m4_126  [key=0, style=bold, color=blue];
m4_444 -> m4_445  [key=0, style=solid];
m4_445 -> m4_446  [key=0, style=solid];
m4_445 -> m4_8  [key=2, style=dotted];
m4_445 -> m4_447  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_445 -> m4_448  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_445 -> m4_449  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_446 -> m4_447  [key=0, style=solid];
m4_446 -> m4_9  [key=2, style=dotted];
m4_447 -> m4_448  [key=0, style=solid];
m4_447 -> m4_9  [key=2, style=dotted];
m4_448 -> m4_449  [key=0, style=solid];
m4_448 -> m4_9  [key=2, style=dotted];
m4_449 -> m4_450  [key=0, style=solid];
m4_449 -> m4_9  [key=2, style=dotted];
m4_450 -> m4_444  [key=0, style=bold, color=blue];
m4_457 -> m4_458  [key=0, style=solid];
m4_458 -> m4_459  [key=0, style=solid];
m4_458 -> m4_58  [key=2, style=dotted];
m4_458 -> m4_460  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_459 -> m4_457  [key=0, style=bold, color=blue];
m4_302 -> m4_303  [key=0, style=solid];
m4_303 -> m4_304  [key=0, style=solid];
m4_303 -> m4_58  [key=2, style=dotted];
m4_303 -> m4_305  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_304 -> m4_302  [key=0, style=bold, color=blue];
m4_105 -> m4_106  [key=0, style=solid];
m4_106 -> m4_107  [key=0, style=solid];
m4_106 -> m4_8  [key=2, style=dotted];
m4_106 -> m4_108  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_107 -> m4_108  [key=0, style=solid];
m4_107 -> m4_9  [key=2, style=dotted];
m4_108 -> m4_109  [key=0, style=solid];
m4_108 -> m4_9  [key=2, style=dotted];
m4_109 -> m4_105  [key=0, style=bold, color=blue];
m4_320 -> m4_321  [key=0, style=solid];
m4_321 -> m4_322  [key=0, style=solid];
m4_321 -> m4_58  [key=2, style=dotted];
m4_321 -> m4_323  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_322 -> m4_320  [key=0, style=bold, color=blue];
m4_338 -> m4_339  [key=0, style=solid];
m4_339 -> m4_340  [key=0, style=solid];
m4_339 -> m4_58  [key=2, style=dotted];
m4_339 -> m4_341  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_340 -> m4_338  [key=0, style=bold, color=blue];
m4_156 -> m4_157  [key=0, style=solid];
m4_157 -> m4_158  [key=0, style=solid];
m4_157 -> m4_8  [key=2, style=dotted];
m4_157 -> m4_159  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_157 -> m4_160  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_158 -> m4_159  [key=0, style=solid];
m4_158 -> m4_9  [key=2, style=dotted];
m4_159 -> m4_160  [key=0, style=solid];
m4_159 -> m4_9  [key=2, style=dotted];
m4_160 -> m4_161  [key=0, style=solid];
m4_160 -> m4_162  [key=1, style=dashed, color=darkseagreen4, label=expressions];
m4_161 -> m4_162  [key=0, style=solid];
m4_161 -> m4_9  [key=2, style=dotted];
m4_162 -> m4_163  [key=0, style=solid];
m4_162 -> m4_9  [key=2, style=dotted];
m4_163 -> m4_156  [key=0, style=bold, color=blue];
m4_110 -> m4_111  [key=0, style=solid, color=green];
m4_111 -> m4_112  [key=0, style=solid, color=green];
m4_111 -> m4_8  [key=2, style=dotted, color=green];
m4_111 -> m4_113  [key=1, style=dashed, color=green, label=path];
m4_111 -> m4_114  [key=1, style=dashed, color=green, label=path];
m4_112 -> m4_113  [key=0, style=solid, color=green];
m4_112 -> m4_9  [key=2, style=dotted, color=green];
m4_113 -> m4_114  [key=0, style=solid, color=green];
m4_113 -> m4_9  [key=2, style=dotted, color=green];
m4_114 -> m4_110  [key=0, style=bold, color=blue];
m4_114 -> m4_115  [key=0, style=solid, color=green];
m4_114 -> m4_9  [key=2, style=dotted, color=green];
m4_253 -> m4_254  [key=0, style=solid];
m4_254 -> m4_255  [key=0, style=solid];
m4_254 -> m4_8  [key=2, style=dotted];
m4_255 -> m4_256  [key=0, style=solid];
m4_255 -> m4_257  [key=1, style=dashed, color=darkseagreen4, label=expressions];
m4_255 -> m4_258  [key=1, style=dashed, color=darkseagreen4, label=expressions];
m4_255 -> m4_262  [key=1, style=dashed, color=darkseagreen4, label=expressions];
m4_256 -> m4_257  [key=0, style=solid];
m4_256 -> m4_9  [key=2, style=dotted];
m4_257 -> m4_258  [key=0, style=solid];
m4_257 -> m4_9  [key=2, style=dotted];
m4_258 -> m4_259  [key=0, style=solid];
m4_258 -> m4_261  [key=1, style=dashed, color=darkseagreen4, label=first];
m4_262 -> m4_263  [key=0, style=solid];
m4_262 -> m4_265  [key=1, style=dashed, color=darkseagreen4, label=second];
m4_259 -> m4_260  [key=0, style=solid];
m4_261 -> m4_262  [key=0, style=solid];
m4_261 -> m4_9  [key=2, style=dotted];
m4_260 -> m4_261  [key=0, style=solid];
m4_260 -> m4_9  [key=2, style=dotted];
m4_263 -> m4_264  [key=0, style=solid];
m4_265 -> m4_266  [key=0, style=solid];
m4_265 -> m4_9  [key=2, style=dotted];
m4_264 -> m4_265  [key=0, style=solid];
m4_264 -> m4_9  [key=2, style=dotted];
m4_266 -> m4_253  [key=0, style=bold, color=blue];
m4_10 -> m4_11  [key=0, style=solid];
m4_11 -> m4_12  [key=0, style=solid];
m4_11 -> m4_8  [key=2, style=dotted];
m4_11 -> m4_13  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_12 -> m4_13  [key=0, style=solid];
m4_12 -> m4_9  [key=2, style=dotted];
m4_13 -> m4_14  [key=0, style=solid];
m4_13 -> m4_15  [key=1, style=dashed, color=darkseagreen4, label=booleanExpression];
m4_13 -> m4_18  [key=1, style=dashed, color=darkseagreen4, label=booleanExpression];
m4_14 -> m4_15  [key=0, style=solid];
m4_14 -> m4_16  [key=1, style=dashed, color=darkseagreen4, label=leftPaths];
m4_15 -> m4_16  [key=0, style=solid];
m4_15 -> m4_17  [key=1, style=dashed, color=darkseagreen4, label=rightPaths];
m4_18 -> m4_19  [key=0, style=solid];
m4_18 -> m4_9  [key=2, style=dotted];
m4_16 -> m4_17  [key=0, style=solid];
m4_16 -> m4_9  [key=2, style=dotted];
m4_17 -> m4_18  [key=0, style=solid];
m4_17 -> m4_9  [key=2, style=dotted];
m4_19 -> m4_10  [key=0, style=bold, color=blue];
m4_326 -> m4_327  [key=0, style=solid];
m4_327 -> m4_328  [key=0, style=solid];
m4_327 -> m4_58  [key=2, style=dotted];
m4_327 -> m4_329  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_328 -> m4_326  [key=0, style=bold, color=blue];
m4_68 -> m4_69  [key=0, style=solid];
m4_69 -> m4_70  [key=0, style=solid];
m4_69 -> m4_58  [key=2, style=dotted];
m4_69 -> m4_71  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_70 -> m4_68  [key=0, style=bold, color=blue];
m4_45 -> m4_46  [key=0, style=solid];
m4_46 -> m4_47  [key=0, style=solid];
m4_46 -> m4_8  [key=2, style=dotted];
m4_46 -> m4_48  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_47 -> m4_48  [key=0, style=solid];
m4_47 -> m4_9  [key=2, style=dotted];
m4_48 -> m4_49  [key=0, style=solid];
m4_48 -> m4_9  [key=2, style=dotted];
m4_49 -> m4_45  [key=0, style=bold, color=blue];
m4_248 -> m4_249  [key=0, style=solid];
m4_249 -> m4_250  [key=0, style=solid];
m4_249 -> m4_8  [key=2, style=dotted];
m4_250 -> m4_251  [key=0, style=solid];
m4_251 -> m4_252  [key=0, style=solid];
m4_251 -> m4_9  [key=2, style=dotted];
m4_252 -> m4_248  [key=0, style=bold, color=blue];
m4_62 -> m4_63  [key=0, style=solid];
m4_63 -> m4_64  [key=0, style=solid];
m4_63 -> m4_58  [key=2, style=dotted];
m4_63 -> m4_65  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_64 -> m4_62  [key=0, style=bold, color=blue];
m4_213 -> m4_214  [key=0, style=solid];
m4_214 -> m4_215  [key=0, style=solid];
m4_214 -> m4_8  [key=2, style=dotted];
m4_215 -> m4_216  [key=0, style=solid];
m4_216 -> m4_217  [key=0, style=solid];
m4_216 -> m4_9  [key=2, style=dotted];
m4_217 -> m4_213  [key=0, style=bold, color=blue];
m4_55 -> m4_56  [key=0, style=solid];
m4_56 -> m4_57  [key=0, style=solid];
m4_56 -> m4_58  [key=2, style=dotted];
m4_56 -> m4_59  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_57 -> m4_55  [key=0, style=bold, color=blue];
m4_84 -> m4_85  [key=0, style=solid];
m4_85 -> m4_86  [key=0, style=solid];
m4_85 -> m4_8  [key=2, style=dotted];
m4_85 -> m4_87  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_86 -> m4_87  [key=0, style=solid];
m4_86 -> m4_9  [key=2, style=dotted];
m4_87 -> m4_88  [key=0, style=solid];
m4_87 -> m4_9  [key=2, style=dotted];
m4_88 -> m4_84  [key=0, style=bold, color=blue];
m4_267 -> m4_268  [key=0, style=solid];
m4_268 -> m4_269  [key=0, style=solid];
m4_268 -> m4_8  [key=2, style=dotted];
m4_269 -> m4_270  [key=0, style=solid];
m4_269 -> m4_271  [key=1, style=dashed, color=darkseagreen4, label=andExpression];
m4_269 -> m4_272  [key=1, style=dashed, color=darkseagreen4, label=andExpression];
m4_269 -> m4_276  [key=1, style=dashed, color=darkseagreen4, label=andExpression];
m4_270 -> m4_271  [key=0, style=solid];
m4_270 -> m4_9  [key=2, style=dotted];
m4_271 -> m4_272  [key=0, style=solid];
m4_271 -> m4_9  [key=2, style=dotted];
m4_272 -> m4_273  [key=0, style=solid];
m4_272 -> m4_275  [key=1, style=dashed, color=darkseagreen4, label=first];
m4_276 -> m4_277  [key=0, style=solid];
m4_276 -> m4_278  [key=1, style=dashed, color=darkseagreen4, label=orExpression];
m4_276 -> m4_282  [key=1, style=dashed, color=darkseagreen4, label=orExpression];
m4_273 -> m4_274  [key=0, style=solid];
m4_275 -> m4_276  [key=0, style=solid];
m4_275 -> m4_9  [key=2, style=dotted];
m4_274 -> m4_275  [key=0, style=solid];
m4_274 -> m4_9  [key=2, style=dotted];
m4_277 -> m4_278  [key=0, style=solid];
m4_277 -> m4_9  [key=2, style=dotted];
m4_278 -> m4_279  [key=0, style=solid];
m4_278 -> m4_281  [key=1, style=dashed, color=darkseagreen4, label=orFirst];
m4_282 -> m4_283  [key=0, style=solid];
m4_282 -> m4_285  [key=1, style=dashed, color=darkseagreen4, label=orSecond];
m4_279 -> m4_280  [key=0, style=solid];
m4_281 -> m4_282  [key=0, style=solid];
m4_281 -> m4_9  [key=2, style=dotted];
m4_280 -> m4_281  [key=0, style=solid];
m4_280 -> m4_9  [key=2, style=dotted];
m4_283 -> m4_284  [key=0, style=solid];
m4_285 -> m4_286  [key=0, style=solid];
m4_285 -> m4_9  [key=2, style=dotted];
m4_284 -> m4_285  [key=0, style=solid];
m4_284 -> m4_9  [key=2, style=dotted];
m4_286 -> m4_267  [key=0, style=bold, color=blue];
m4_138 -> m4_139  [key=0, style=solid];
m4_139 -> m4_140  [key=0, style=solid];
m4_139 -> m4_8  [key=2, style=dotted];
m4_139 -> m4_141  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_139 -> m4_142  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_140 -> m4_141  [key=0, style=solid];
m4_140 -> m4_9  [key=2, style=dotted];
m4_141 -> m4_142  [key=0, style=solid];
m4_141 -> m4_9  [key=2, style=dotted];
m4_142 -> m4_143  [key=0, style=solid];
m4_142 -> m4_144  [key=1, style=dashed, color=darkseagreen4, label=expressions];
m4_143 -> m4_144  [key=0, style=solid];
m4_143 -> m4_9  [key=2, style=dotted];
m4_144 -> m4_145  [key=0, style=solid];
m4_144 -> m4_146  [key=1, style=dashed, color=darkseagreen4, label=paths];
m4_145 -> m4_146  [key=0, style=solid];
m4_145 -> m4_9  [key=2, style=dotted];
m4_146 -> m4_147  [key=0, style=solid];
m4_146 -> m4_9  [key=2, style=dotted];
m4_147 -> m4_138  [key=0, style=bold, color=blue];
m4_223 -> m4_224  [key=0, style=solid];
m4_224 -> m4_225  [key=0, style=solid];
m4_224 -> m4_8  [key=2, style=dotted];
m4_225 -> m4_226  [key=0, style=solid];
m4_226 -> m4_227  [key=0, style=solid];
m4_226 -> m4_9  [key=2, style=dotted];
m4_227 -> m4_223  [key=0, style=bold, color=blue];
m4_172 -> m4_173  [key=0, style=solid];
m4_173 -> m4_174  [key=0, style=solid];
m4_173 -> m4_58  [key=2, style=dotted];
m4_173 -> m4_175  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_174 -> m4_172  [key=0, style=bold, color=blue];
m4_332 -> m4_333  [key=0, style=solid];
m4_333 -> m4_334  [key=0, style=solid];
m4_333 -> m4_58  [key=2, style=dotted];
m4_333 -> m4_335  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_334 -> m4_332  [key=0, style=bold, color=blue];
m4_371 -> m4_372  [key=0, style=solid];
m4_372 -> m4_373  [key=0, style=solid];
m4_372 -> m4_8  [key=2, style=dotted];
m4_372 -> m4_374  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_373 -> m4_374  [key=0, style=solid];
m4_373 -> m4_9  [key=2, style=dotted];
m4_374 -> m4_375  [key=0, style=solid];
m4_374 -> m4_9  [key=2, style=dotted];
m4_375 -> m4_371  [key=0, style=bold, color=blue];
m4_416 -> m4_417  [key=0, style=solid];
m4_417 -> m4_418  [key=0, style=solid];
m4_417 -> m4_8  [key=2, style=dotted];
m4_417 -> m4_419  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_417 -> m4_420  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_417 -> m4_421  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_418 -> m4_419  [key=0, style=solid];
m4_418 -> m4_9  [key=2, style=dotted];
m4_419 -> m4_420  [key=0, style=solid];
m4_419 -> m4_9  [key=2, style=dotted];
m4_420 -> m4_421  [key=0, style=solid];
m4_420 -> m4_9  [key=2, style=dotted];
m4_421 -> m4_422  [key=0, style=solid];
m4_421 -> m4_9  [key=2, style=dotted];
m4_422 -> m4_416  [key=0, style=bold, color=blue];
m4_451 -> m4_452  [key=0, style=solid];
m4_452 -> m4_453  [key=0, style=solid];
m4_452 -> m4_58  [key=2, style=dotted];
m4_452 -> m4_454  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_453 -> m4_451  [key=0, style=bold, color=blue];
m4_115 -> m4_116  [key=0, style=solid];
m4_115 -> m4_110  [key=0, style=bold, color=blue];
m4_116 -> m4_117  [key=0, style=solid, color=green];
m4_116 -> m4_8  [key=2, style=dotted];
m4_116 -> m4_118  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_117 -> m4_118  [key=0, style=solid, color=green];
m4_117 -> m4_9  [key=2, style=dotted];
m4_117 -> m4_8  [key=2, style=dotted, color=green];
m4_117 -> m4_119  [key=1, style=dashed, color=green, label=path];
m4_117 -> m4_120  [key=1, style=dashed, color=green, label=path];
m4_118 -> m4_119  [key=0, style=solid, color=green];
m4_118 -> m4_9  [key=2, style=dotted, color=green];
m4_119 -> m4_115  [key=0, style=bold, color=blue];
m4_119 -> m4_120  [key=0, style=solid, color=green];
m4_119 -> m4_9  [key=2, style=dotted, color=green];
m4_120 -> m4_121  [key=0, style=solid, color=green];
m4_121 -> m4_122  [key=0, style=solid, color=green];
m4_121 -> m4_8  [key=2, style=dotted];
m4_121 -> m4_123  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_121 -> m4_124  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_122 -> m4_123  [key=0, style=solid, color=green];
m4_122 -> m4_295  [key=2, style=dotted, color=green];
m4_122 -> m4_9  [key=2, style=dotted];
m4_123 -> m4_116  [key=0, style=bold, color=blue];
m4_123 -> m4_124  [key=0, style=solid];
m4_123 -> m4_9  [key=2, style=dotted];
m4_79 -> m4_80  [key=0, style=solid];
m4_80 -> m4_81  [key=0, style=solid];
m4_80 -> m4_8  [key=2, style=dotted];
m4_80 -> m4_82  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_81 -> m4_82  [key=0, style=solid];
m4_81 -> m4_9  [key=2, style=dotted];
m4_82 -> m4_83  [key=0, style=solid];
m4_82 -> m4_9  [key=2, style=dotted];
m4_83 -> m4_79  [key=0, style=bold, color=blue];
m4_409 -> m4_410  [key=0, style=solid];
m4_410 -> m4_411  [key=0, style=solid];
m4_410 -> m4_8  [key=2, style=dotted];
m4_410 -> m4_412  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_410 -> m4_413  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_410 -> m4_414  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_411 -> m4_412  [key=0, style=solid];
m4_411 -> m4_9  [key=2, style=dotted];
m4_412 -> m4_413  [key=0, style=solid];
m4_412 -> m4_9  [key=2, style=dotted];
m4_413 -> m4_414  [key=0, style=solid];
m4_413 -> m4_9  [key=2, style=dotted];
m4_414 -> m4_415  [key=0, style=solid];
m4_414 -> m4_9  [key=2, style=dotted];
m4_415 -> m4_409  [key=0, style=bold, color=blue];
m4_208 -> m4_209  [key=0, style=solid];
m4_209 -> m4_210  [key=0, style=solid];
m4_209 -> m4_8  [key=2, style=dotted];
m4_210 -> m4_211  [key=0, style=solid];
m4_211 -> m4_212  [key=0, style=solid];
m4_211 -> m4_9  [key=2, style=dotted];
m4_212 -> m4_208  [key=0, style=bold, color=blue];
m4_194 -> m4_195  [key=0, style=solid];
m4_195 -> m4_196  [key=0, style=solid];
m4_195 -> m4_8  [key=2, style=dotted];
m4_195 -> m4_197  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_195 -> m4_198  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_196 -> m4_197  [key=0, style=solid];
m4_196 -> m4_9  [key=2, style=dotted];
m4_197 -> m4_198  [key=0, style=solid];
m4_197 -> m4_9  [key=2, style=dotted];
m4_198 -> m4_199  [key=0, style=solid];
m4_198 -> m4_200  [key=1, style=dashed, color=darkseagreen4, label=expressions];
m4_199 -> m4_200  [key=0, style=solid];
m4_199 -> m4_9  [key=2, style=dotted];
m4_200 -> m4_201  [key=0, style=solid];
m4_200 -> m4_9  [key=2, style=dotted];
m4_201 -> m4_194  [key=0, style=bold, color=blue];
m4_365 -> m4_366  [key=0, style=solid];
m4_366 -> m4_367  [key=0, style=solid];
m4_366 -> m4_58  [key=2, style=dotted];
m4_366 -> m4_368  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_367 -> m4_365  [key=0, style=bold, color=blue];
m4_359 -> m4_360  [key=0, style=solid];
m4_360 -> m4_361  [key=0, style=solid];
m4_360 -> m4_58  [key=2, style=dotted];
m4_360 -> m4_362  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_361 -> m4_359  [key=0, style=bold, color=blue];
m4_477 -> m4_478  [key=0, style=solid];
m4_478 -> m4_479  [key=0, style=solid];
m4_478 -> m4_8  [key=2, style=dotted];
m4_478 -> m4_480  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_478 -> m4_481  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_478 -> m4_482  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_478 -> m4_483  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_478 -> m4_484  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_479 -> m4_480  [key=0, style=solid];
m4_479 -> m4_9  [key=2, style=dotted];
m4_480 -> m4_481  [key=0, style=solid];
m4_480 -> m4_9  [key=2, style=dotted];
m4_481 -> m4_482  [key=0, style=solid];
m4_481 -> m4_9  [key=2, style=dotted];
m4_482 -> m4_483  [key=0, style=solid];
m4_482 -> m4_9  [key=2, style=dotted];
m4_483 -> m4_484  [key=0, style=solid];
m4_483 -> m4_9  [key=2, style=dotted];
m4_484 -> m4_485  [key=0, style=solid];
m4_484 -> m4_9  [key=2, style=dotted];
m4_485 -> m4_477  [key=0, style=bold, color=blue];
m4_148 -> m4_149  [key=0, style=solid];
m4_149 -> m4_150  [key=0, style=solid];
m4_149 -> m4_8  [key=2, style=dotted];
m4_149 -> m4_151  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_149 -> m4_152  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_150 -> m4_151  [key=0, style=solid];
m4_150 -> m4_9  [key=2, style=dotted];
m4_151 -> m4_152  [key=0, style=solid];
m4_151 -> m4_9  [key=2, style=dotted];
m4_152 -> m4_153  [key=0, style=solid];
m4_152 -> m4_154  [key=1, style=dashed, color=darkseagreen4, label=expressions];
m4_153 -> m4_154  [key=0, style=solid];
m4_153 -> m4_9  [key=2, style=dotted];
m4_154 -> m4_155  [key=0, style=solid];
m4_154 -> m4_9  [key=2, style=dotted];
m4_155 -> m4_148  [key=0, style=bold, color=blue];
m4_423 -> m4_424  [key=0, style=solid];
m4_424 -> m4_425  [key=0, style=solid];
m4_424 -> m4_8  [key=2, style=dotted];
m4_424 -> m4_426  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_424 -> m4_427  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_424 -> m4_428  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_425 -> m4_426  [key=0, style=solid];
m4_425 -> m4_9  [key=2, style=dotted];
m4_426 -> m4_427  [key=0, style=solid];
m4_426 -> m4_9  [key=2, style=dotted];
m4_427 -> m4_428  [key=0, style=solid];
m4_427 -> m4_9  [key=2, style=dotted];
m4_428 -> m4_429  [key=0, style=solid];
m4_428 -> m4_9  [key=2, style=dotted];
m4_429 -> m4_423  [key=0, style=bold, color=blue];
m4_376 -> m4_377  [key=0, style=solid];
m4_377 -> m4_378  [key=0, style=solid];
m4_377 -> m4_8  [key=2, style=dotted];
m4_377 -> m4_379  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_378 -> m4_379  [key=0, style=solid];
m4_378 -> m4_9  [key=2, style=dotted];
m4_379 -> m4_380  [key=0, style=solid];
m4_379 -> m4_9  [key=2, style=dotted];
m4_380 -> m4_376  [key=0, style=bold, color=blue];
m4_402 -> m4_403  [key=0, style=solid];
m4_403 -> m4_404  [key=0, style=solid];
m4_403 -> m4_8  [key=2, style=dotted];
m4_403 -> m4_405  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_403 -> m4_406  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_403 -> m4_407  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_404 -> m4_405  [key=0, style=solid];
m4_404 -> m4_9  [key=2, style=dotted];
m4_405 -> m4_406  [key=0, style=solid];
m4_405 -> m4_9  [key=2, style=dotted];
m4_406 -> m4_407  [key=0, style=solid];
m4_406 -> m4_9  [key=2, style=dotted];
m4_407 -> m4_408  [key=0, style=solid];
m4_407 -> m4_9  [key=2, style=dotted];
m4_408 -> m4_402  [key=0, style=bold, color=blue];
m4_35 -> m4_36  [key=0, style=solid];
m4_36 -> m4_37  [key=0, style=solid];
m4_36 -> m4_8  [key=2, style=dotted];
m4_36 -> m4_38  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_37 -> m4_38  [key=0, style=solid];
m4_37 -> m4_9  [key=2, style=dotted];
m4_38 -> m4_39  [key=0, style=solid];
m4_38 -> m4_9  [key=2, style=dotted];
m4_39 -> m4_35  [key=0, style=bold, color=blue];
m4_388 -> m4_389  [key=0, style=solid];
m4_389 -> m4_390  [key=0, style=solid];
m4_389 -> m4_8  [key=2, style=dotted];
m4_389 -> m4_391  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_389 -> m4_392  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_389 -> m4_393  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_390 -> m4_391  [key=0, style=solid];
m4_390 -> m4_9  [key=2, style=dotted];
m4_391 -> m4_392  [key=0, style=solid];
m4_391 -> m4_9  [key=2, style=dotted];
m4_392 -> m4_393  [key=0, style=solid];
m4_392 -> m4_9  [key=2, style=dotted];
m4_393 -> m4_394  [key=0, style=solid];
m4_393 -> m4_9  [key=2, style=dotted];
m4_394 -> m4_388  [key=0, style=bold, color=blue];
m4_296 -> m4_297  [key=0, style=solid];
m4_297 -> m4_298  [key=0, style=solid];
m4_297 -> m4_58  [key=2, style=dotted];
m4_297 -> m4_299  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_298 -> m4_296  [key=0, style=bold, color=blue];
m4_471 -> m4_472  [key=0, style=solid];
m4_472 -> m4_473  [key=0, style=solid];
m4_472 -> m4_58  [key=2, style=dotted];
m4_472 -> m4_474  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_473 -> m4_471  [key=0, style=bold, color=blue];
m4_178 -> m4_179  [key=0, style=solid];
m4_179 -> m4_180  [key=0, style=solid];
m4_179 -> m4_8  [key=2, style=dotted];
m4_179 -> m4_181  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_179 -> m4_182  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_180 -> m4_181  [key=0, style=solid];
m4_180 -> m4_9  [key=2, style=dotted];
m4_181 -> m4_182  [key=0, style=solid];
m4_181 -> m4_9  [key=2, style=dotted];
m4_182 -> m4_183  [key=0, style=solid];
m4_182 -> m4_184  [key=1, style=dashed, color=darkseagreen4, label=expressions];
m4_183 -> m4_184  [key=0, style=solid];
m4_183 -> m4_9  [key=2, style=dotted];
m4_184 -> m4_185  [key=0, style=solid];
m4_184 -> m4_9  [key=2, style=dotted];
m4_185 -> m4_178  [key=0, style=bold, color=blue];
m4_89 -> m4_90  [key=0, style=solid];
m4_90 -> m4_91  [key=0, style=solid];
m4_90 -> m4_8  [key=2, style=dotted];
m4_90 -> m4_92  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_91 -> m4_92  [key=0, style=solid];
m4_91 -> m4_9  [key=2, style=dotted];
m4_92 -> m4_93  [key=0, style=solid];
m4_92 -> m4_9  [key=2, style=dotted];
m4_93 -> m4_89  [key=0, style=bold, color=blue];
m4_50 -> m4_51  [key=0, style=solid];
m4_51 -> m4_52  [key=0, style=solid];
m4_51 -> m4_8  [key=2, style=dotted];
m4_51 -> m4_53  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_52 -> m4_53  [key=0, style=solid];
m4_52 -> m4_9  [key=2, style=dotted];
m4_53 -> m4_54  [key=0, style=solid];
m4_53 -> m4_9  [key=2, style=dotted];
m4_54 -> m4_50  [key=0, style=bold, color=blue];
m4_30 -> m4_31  [key=0, style=solid];
m4_31 -> m4_32  [key=0, style=solid];
m4_31 -> m4_8  [key=2, style=dotted];
m4_31 -> m4_33  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_32 -> m4_33  [key=0, style=solid];
m4_32 -> m4_9  [key=2, style=dotted];
m4_33 -> m4_34  [key=0, style=solid];
m4_33 -> m4_9  [key=2, style=dotted];
m4_34 -> m4_30  [key=0, style=bold, color=blue];
m4_202 -> m4_203  [key=0, style=solid];
m4_203 -> m4_204  [key=0, style=solid];
m4_203 -> m4_8  [key=2, style=dotted];
m4_204 -> m4_205  [key=0, style=solid];
m4_205 -> m4_206  [key=0, style=solid];
m4_206 -> m4_207  [key=0, style=solid];
m4_206 -> m4_9  [key=2, style=dotted];
m4_207 -> m4_202  [key=0, style=bold, color=blue];
m4_238 -> m4_239  [key=0, style=solid];
m4_239 -> m4_240  [key=0, style=solid];
m4_239 -> m4_8  [key=2, style=dotted];
m4_240 -> m4_241  [key=0, style=solid];
m4_241 -> m4_242  [key=0, style=solid];
m4_241 -> m4_9  [key=2, style=dotted];
m4_242 -> m4_238  [key=0, style=bold, color=blue];
m4_233 -> m4_234  [key=0, style=solid];
m4_234 -> m4_235  [key=0, style=solid];
m4_234 -> m4_8  [key=2, style=dotted];
m4_235 -> m4_236  [key=0, style=solid];
m4_236 -> m4_237  [key=0, style=solid];
m4_236 -> m4_9  [key=2, style=dotted];
m4_237 -> m4_233  [key=0, style=bold, color=blue];
m4_25 -> m4_26  [key=0, style=solid];
m4_26 -> m4_27  [key=0, style=solid];
m4_26 -> m4_8  [key=2, style=dotted];
m4_26 -> m4_28  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_27 -> m4_28  [key=0, style=solid];
m4_27 -> m4_9  [key=2, style=dotted];
m4_28 -> m4_29  [key=0, style=solid];
m4_28 -> m4_9  [key=2, style=dotted];
m4_29 -> m4_25  [key=0, style=bold, color=blue];
m4_20 -> m4_21  [key=0, style=solid];
m4_21 -> m4_22  [key=0, style=solid];
m4_21 -> m4_8  [key=2, style=dotted];
m4_21 -> m4_23  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_22 -> m4_23  [key=0, style=solid];
m4_22 -> m4_9  [key=2, style=dotted];
m4_23 -> m4_24  [key=0, style=solid];
m4_23 -> m4_9  [key=2, style=dotted];
m4_24 -> m4_20  [key=0, style=bold, color=blue];
m4_463 -> m4_464  [key=0, style=solid];
m4_464 -> m4_465  [key=0, style=solid];
m4_464 -> m4_8  [key=2, style=dotted];
m4_464 -> m4_466  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_464 -> m4_467  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_464 -> m4_468  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_464 -> m4_469  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_465 -> m4_466  [key=0, style=solid];
m4_465 -> m4_9  [key=2, style=dotted];
m4_466 -> m4_467  [key=0, style=solid];
m4_466 -> m4_9  [key=2, style=dotted];
m4_467 -> m4_468  [key=0, style=solid];
m4_467 -> m4_9  [key=2, style=dotted];
m4_468 -> m4_469  [key=0, style=solid];
m4_468 -> m4_9  [key=2, style=dotted];
m4_469 -> m4_470  [key=0, style=solid];
m4_469 -> m4_9  [key=2, style=dotted];
m4_470 -> m4_463  [key=0, style=bold, color=blue];
m4_40 -> m4_41  [key=0, style=solid];
m4_41 -> m4_42  [key=0, style=solid];
m4_41 -> m4_8  [key=2, style=dotted];
m4_41 -> m4_43  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_42 -> m4_43  [key=0, style=solid];
m4_42 -> m4_9  [key=2, style=dotted];
m4_43 -> m4_44  [key=0, style=solid];
m4_43 -> m4_9  [key=2, style=dotted];
m4_44 -> m4_40  [key=0, style=bold, color=blue];
m4_124 -> m4_125  [key=0, style=solid];
m4_124 -> m4_9  [key=2, style=dotted];
m4_125 -> m4_120  [key=0, style=bold, color=blue];
m4_344 -> m4_345  [key=0, style=solid];
m4_345 -> m4_346  [key=0, style=solid];
m4_345 -> m4_8  [key=2, style=dotted];
m4_346 -> m4_347  [key=0, style=solid];
m4_347 -> m4_348  [key=0, style=solid];
m4_347 -> m4_9  [key=2, style=dotted];
m4_348 -> m4_344  [key=0, style=bold, color=blue];
m4_474 -> m4_475  [key=0, style=solid];
m4_59 -> m4_60  [key=0, style=solid];
m4_60 -> m4_61  [key=0, style=solid];
m4_60 -> m4_8  [key=2, style=dotted];
m4_61 -> m4_59  [key=0, style=bold, color=blue];
m4_65 -> m4_66  [key=0, style=solid];
m4_66 -> m4_67  [key=0, style=solid];
m4_66 -> m4_8  [key=2, style=dotted];
m4_67 -> m4_65  [key=0, style=bold, color=blue];
m4_71 -> m4_72  [key=0, style=solid];
m4_72 -> m4_73  [key=0, style=solid];
m4_72 -> m4_8  [key=2, style=dotted];
m4_73 -> m4_71  [key=0, style=bold, color=blue];
m4_175 -> m4_176  [key=0, style=solid];
m4_176 -> m4_177  [key=0, style=solid];
m4_176 -> m4_8  [key=2, style=dotted];
m4_177 -> m4_175  [key=0, style=bold, color=blue];
m4_299 -> m4_300  [key=0, style=solid];
m4_300 -> m4_301  [key=0, style=solid];
m4_300 -> m4_8  [key=2, style=dotted];
m4_301 -> m4_299  [key=0, style=bold, color=blue];
m4_305 -> m4_306  [key=0, style=solid];
m4_306 -> m4_307  [key=0, style=solid];
m4_306 -> m4_8  [key=2, style=dotted];
m4_307 -> m4_305  [key=0, style=bold, color=blue];
m4_311 -> m4_312  [key=0, style=solid];
m4_312 -> m4_313  [key=0, style=solid];
m4_312 -> m4_8  [key=2, style=dotted];
m4_313 -> m4_311  [key=0, style=bold, color=blue];
m4_317 -> m4_318  [key=0, style=solid];
m4_318 -> m4_319  [key=0, style=solid];
m4_318 -> m4_8  [key=2, style=dotted];
m4_319 -> m4_317  [key=0, style=bold, color=blue];
m4_323 -> m4_324  [key=0, style=solid];
m4_324 -> m4_325  [key=0, style=solid];
m4_324 -> m4_8  [key=2, style=dotted];
m4_325 -> m4_323  [key=0, style=bold, color=blue];
m4_329 -> m4_330  [key=0, style=solid];
m4_330 -> m4_331  [key=0, style=solid];
m4_330 -> m4_8  [key=2, style=dotted];
m4_331 -> m4_329  [key=0, style=bold, color=blue];
m4_335 -> m4_336  [key=0, style=solid];
m4_336 -> m4_337  [key=0, style=solid];
m4_336 -> m4_8  [key=2, style=dotted];
m4_337 -> m4_335  [key=0, style=bold, color=blue];
m4_341 -> m4_342  [key=0, style=solid];
m4_342 -> m4_343  [key=0, style=solid];
m4_342 -> m4_8  [key=2, style=dotted];
m4_343 -> m4_341  [key=0, style=bold, color=blue];
m4_362 -> m4_363  [key=0, style=solid];
m4_363 -> m4_364  [key=0, style=solid];
m4_363 -> m4_8  [key=2, style=dotted];
m4_364 -> m4_362  [key=0, style=bold, color=blue];
m4_368 -> m4_369  [key=0, style=solid];
m4_369 -> m4_370  [key=0, style=solid];
m4_369 -> m4_8  [key=2, style=dotted];
m4_370 -> m4_368  [key=0, style=bold, color=blue];
m4_454 -> m4_455  [key=0, style=solid];
m4_455 -> m4_456  [key=0, style=solid];
m4_455 -> m4_8  [key=2, style=dotted];
m4_456 -> m4_454  [key=0, style=bold, color=blue];
m4_460 -> m4_461  [key=0, style=solid];
m4_461 -> m4_462  [key=0, style=solid];
m4_461 -> m4_8  [key=2, style=dotted];
m4_462 -> m4_460  [key=0, style=bold, color=blue];
m4_475 -> m4_476  [key=0, style=solid];
m4_475 -> m4_8  [key=2, style=dotted];
m4_476 -> m4_474  [key=0, style=bold, color=blue];
m4_287 -> m4_288  [key=0, style=solid];
m4_288 -> m4_289  [key=0, style=solid];
m4_288 -> m4_8  [key=2, style=dotted];
m4_289 -> m4_290  [key=0, style=solid];
m4_290 -> m4_291  [key=0, style=solid];
m4_290 -> m4_292  [key=1, style=dashed, color=darkseagreen4, label=paths];
m4_290 -> m4_293  [key=1, style=dashed, color=darkseagreen4, label=paths];
m4_291 -> m4_292  [key=0, style=solid];
m4_291 -> m4_9  [key=2, style=dotted];
m4_292 -> m4_293  [key=0, style=solid];
m4_292 -> m4_295  [key=2, style=dotted];
m4_293 -> m4_294  [key=0, style=solid];
m4_293 -> m4_295  [key=2, style=dotted];
m4_294 -> m4_287  [key=0, style=bold, color=blue];
m4_314 -> m4_315  [key=0, style=solid];
m4_315 -> m4_316  [key=0, style=solid];
m4_315 -> m4_58  [key=2, style=dotted];
m4_315 -> m4_317  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m4_316 -> m4_314  [key=0, style=bold, color=blue];
m4_395 -> m4_396  [key=0, style=solid];
m4_396 -> m4_397  [key=0, style=solid];
m4_396 -> m4_8  [key=2, style=dotted];
m4_396 -> m4_398  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_396 -> m4_399  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_396 -> m4_400  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_397 -> m4_398  [key=0, style=solid];
m4_397 -> m4_9  [key=2, style=dotted];
m4_398 -> m4_399  [key=0, style=solid];
m4_398 -> m4_9  [key=2, style=dotted];
m4_399 -> m4_400  [key=0, style=solid];
m4_399 -> m4_9  [key=2, style=dotted];
m4_400 -> m4_401  [key=0, style=solid];
m4_400 -> m4_9  [key=2, style=dotted];
m4_401 -> m4_395  [key=0, style=bold, color=blue];
m4_164 -> m4_165  [key=0, style=solid];
m4_165 -> m4_166  [key=0, style=solid];
m4_165 -> m4_8  [key=2, style=dotted];
m4_165 -> m4_167  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_165 -> m4_168  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_166 -> m4_167  [key=0, style=solid];
m4_166 -> m4_9  [key=2, style=dotted];
m4_167 -> m4_168  [key=0, style=solid];
m4_167 -> m4_9  [key=2, style=dotted];
m4_168 -> m4_169  [key=0, style=solid];
m4_168 -> m4_170  [key=1, style=dashed, color=darkseagreen4, label=expressions];
m4_169 -> m4_170  [key=0, style=solid];
m4_169 -> m4_9  [key=2, style=dotted];
m4_170 -> m4_171  [key=0, style=solid];
m4_170 -> m4_9  [key=2, style=dotted];
m4_171 -> m4_164  [key=0, style=bold, color=blue];
m4_430 -> m4_431  [key=0, style=solid];
m4_431 -> m4_432  [key=0, style=solid];
m4_431 -> m4_8  [key=2, style=dotted];
m4_431 -> m4_433  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_431 -> m4_434  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_431 -> m4_435  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_432 -> m4_433  [key=0, style=solid];
m4_432 -> m4_9  [key=2, style=dotted];
m4_433 -> m4_434  [key=0, style=solid];
m4_433 -> m4_9  [key=2, style=dotted];
m4_434 -> m4_435  [key=0, style=solid];
m4_434 -> m4_9  [key=2, style=dotted];
m4_435 -> m4_436  [key=0, style=solid];
m4_435 -> m4_9  [key=2, style=dotted];
m4_436 -> m4_430  [key=0, style=bold, color=blue];
m4_437 -> m4_438  [key=0, style=solid];
m4_438 -> m4_439  [key=0, style=solid];
m4_438 -> m4_8  [key=2, style=dotted];
m4_438 -> m4_440  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_438 -> m4_441  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_438 -> m4_442  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_439 -> m4_440  [key=0, style=solid];
m4_439 -> m4_9  [key=2, style=dotted];
m4_440 -> m4_441  [key=0, style=solid];
m4_440 -> m4_9  [key=2, style=dotted];
m4_441 -> m4_442  [key=0, style=solid];
m4_441 -> m4_9  [key=2, style=dotted];
m4_442 -> m4_443  [key=0, style=solid];
m4_442 -> m4_9  [key=2, style=dotted];
m4_443 -> m4_437  [key=0, style=bold, color=blue];
m4_349 -> m4_350  [key=0, style=solid];
m4_350 -> m4_351  [key=0, style=solid];
m4_350 -> m4_8  [key=2, style=dotted];
m4_350 -> m4_352  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_350 -> m4_353  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_350 -> m4_354  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_350 -> m4_355  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_350 -> m4_356  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_350 -> m4_357  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_351 -> m4_352  [key=0, style=solid];
m4_351 -> m4_9  [key=2, style=dotted];
m4_352 -> m4_353  [key=0, style=solid];
m4_352 -> m4_9  [key=2, style=dotted];
m4_353 -> m4_354  [key=0, style=solid];
m4_353 -> m4_9  [key=2, style=dotted];
m4_354 -> m4_355  [key=0, style=solid];
m4_354 -> m4_9  [key=2, style=dotted];
m4_355 -> m4_356  [key=0, style=solid];
m4_355 -> m4_9  [key=2, style=dotted];
m4_356 -> m4_357  [key=0, style=solid];
m4_356 -> m4_9  [key=2, style=dotted];
m4_357 -> m4_358  [key=0, style=solid];
m4_357 -> m4_9  [key=2, style=dotted];
m4_358 -> m4_349  [key=0, style=bold, color=blue];
m4_243 -> m4_244  [key=0, style=solid];
m4_244 -> m4_245  [key=0, style=solid];
m4_244 -> m4_8  [key=2, style=dotted];
m4_245 -> m4_246  [key=0, style=solid];
m4_246 -> m4_247  [key=0, style=solid];
m4_246 -> m4_9  [key=2, style=dotted];
m4_247 -> m4_243  [key=0, style=bold, color=blue];
m4_100 -> m4_101  [key=0, style=solid];
m4_101 -> m4_102  [key=0, style=solid];
m4_101 -> m4_8  [key=2, style=dotted];
m4_101 -> m4_103  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_102 -> m4_103  [key=0, style=solid];
m4_102 -> m4_9  [key=2, style=dotted];
m4_103 -> m4_104  [key=0, style=solid];
m4_103 -> m4_9  [key=2, style=dotted];
m4_104 -> m4_100  [key=0, style=bold, color=blue];
m4_186 -> m4_187  [key=0, style=solid];
m4_187 -> m4_188  [key=0, style=solid];
m4_187 -> m4_8  [key=2, style=dotted];
m4_187 -> m4_189  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_187 -> m4_190  [key=1, style=dashed, color=darkseagreen4, label=path];
m4_188 -> m4_189  [key=0, style=solid];
m4_188 -> m4_9  [key=2, style=dotted];
m4_189 -> m4_190  [key=0, style=solid];
m4_189 -> m4_9  [key=2, style=dotted];
m4_190 -> m4_191  [key=0, style=solid];
m4_190 -> m4_192  [key=1, style=dashed, color=darkseagreen4, label=expressions];
m4_191 -> m4_192  [key=0, style=solid];
m4_191 -> m4_9  [key=2, style=dotted];
m4_192 -> m4_193  [key=0, style=solid];
m4_192 -> m4_9  [key=2, style=dotted];
m4_193 -> m4_186  [key=0, style=bold, color=blue];
m5_201 -> m5_202  [key=0, style=solid];
m5_202 -> m5_203  [key=0, style=solid];
m5_202 -> m5_10  [key=2, style=dotted];
m5_203 -> m5_204  [key=0, style=solid];
m5_203 -> m5_11  [key=2, style=dotted];
m5_204 -> m5_205  [key=0, style=solid];
m5_204 -> m5_12  [key=2, style=dotted];
m5_205 -> m5_206  [key=0, style=solid];
m5_205 -> m5_13  [key=2, style=dotted];
m5_206 -> m5_201  [key=0, style=bold, color=blue];
m5_47 -> m5_48  [key=0, style=solid];
m5_48 -> m5_49  [key=0, style=solid];
m5_48 -> m5_10  [key=2, style=dotted];
m5_49 -> m5_50  [key=0, style=solid];
m5_49 -> m5_11  [key=2, style=dotted];
m5_49 -> m5_51  [key=1, style=dashed, color=darkseagreen4, label=schema];
m5_50 -> m5_51  [key=0, style=solid];
m5_50 -> m5_46  [key=2, style=dotted];
m5_51 -> m5_52  [key=0, style=solid];
m5_52 -> m5_53  [key=0, style=solid];
m5_53 -> m5_54  [key=0, style=solid];
m5_53 -> m5_46  [key=2, style=dotted];
m5_54 -> m5_47  [key=0, style=bold, color=blue];
m5_125 -> m5_126  [key=0, style=solid];
m5_125 -> m5_127  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m5_126 -> m5_127  [key=0, style=solid];
m5_126 -> m5_131  [key=2, style=dotted];
m5_126 -> m5_128  [key=1, style=dashed, color=darkseagreen4, label=properties];
m5_127 -> m5_128  [key=0, style=solid];
m5_127 -> m5_132  [key=2, style=dotted];
m5_127 -> m5_129  [key=1, style=dashed, color=darkseagreen4, label=c];
m5_128 -> m5_129  [key=0, style=solid];
m5_128 -> m5_133  [key=2, style=dotted];
m5_128 -> m5_134  [key=2, style=dotted];
m5_128 -> m5_135  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_129 -> m5_130  [key=0, style=solid];
m5_130 -> m5_125  [key=0, style=bold, color=blue];
m5_74 -> m5_75  [key=0, style=solid];
m5_75 -> m5_76  [key=0, style=solid];
m5_75 -> m5_10  [key=2, style=dotted];
m5_75 -> m5_77  [key=1, style=dashed, color=darkseagreen4, label=generator];
m5_76 -> m5_77  [key=0, style=solid];
m5_77 -> m5_78  [key=0, style=solid];
m5_77 -> m5_83  [key=2, style=dotted];
m5_77 -> m5_79  [key=1, style=dashed, color=darkseagreen4, label=schema];
m5_77 -> m5_80  [key=1, style=dashed, color=darkseagreen4, label=schema];
m5_77 -> m5_81  [key=1, style=dashed, color=darkseagreen4, label=schema];
m5_78 -> m5_79  [key=0, style=solid];
m5_78 -> m5_46  [key=2, style=dotted];
m5_79 -> m5_80  [key=0, style=solid];
m5_79 -> m5_46  [key=2, style=dotted];
m5_80 -> m5_81  [key=0, style=solid];
m5_80 -> m5_46  [key=2, style=dotted];
m5_81 -> m5_82  [key=0, style=solid];
m5_81 -> m5_46  [key=2, style=dotted];
m5_82 -> m5_74  [key=0, style=bold, color=blue];
m5_110 -> m5_111  [key=0, style=solid];
m5_111 -> m5_112  [key=0, style=solid];
m5_111 -> m5_10  [key=2, style=dotted];
m5_111 -> m5_113  [key=1, style=dashed, color=darkseagreen4, label=generator];
m5_112 -> m5_113  [key=0, style=solid];
m5_113 -> m5_114  [key=0, style=solid];
m5_113 -> m5_11  [key=2, style=dotted];
m5_114 -> m5_115  [key=0, style=solid];
m5_114 -> m5_46  [key=2, style=dotted];
m5_115 -> m5_110  [key=0, style=bold, color=blue];
m5_20 -> m5_21  [key=0, style=solid];
m5_21 -> m5_22  [key=0, style=solid];
m5_21 -> m5_10  [key=2, style=dotted];
m5_22 -> m5_23  [key=0, style=solid];
m5_22 -> m5_11  [key=2, style=dotted];
m5_23 -> m5_24  [key=0, style=solid];
m5_23 -> m5_12  [key=2, style=dotted];
m5_24 -> m5_25  [key=0, style=solid];
m5_24 -> m5_13  [key=2, style=dotted];
m5_25 -> m5_20  [key=0, style=bold, color=blue];
m5_222 -> m5_223  [key=0, style=solid];
m5_223 -> m5_224  [key=0, style=solid];
m5_223 -> m5_10  [key=2, style=dotted];
m5_223 -> m5_225  [key=1, style=dashed, color=darkseagreen4, label=jsonSchemaGenerator];
m5_224 -> m5_225  [key=0, style=solid];
m5_225 -> m5_226  [key=0, style=solid];
m5_225 -> m5_11  [key=2, style=dotted];
m5_226 -> m5_227  [key=0, style=solid];
m5_226 -> m5_12  [key=2, style=dotted];
m5_227 -> m5_228  [key=0, style=solid];
m5_227 -> m5_13  [key=2, style=dotted];
m5_228 -> m5_222  [key=0, style=bold, color=blue];
m5_166 -> m5_167  [key=0, style=solid];
m5_167 -> m5_168  [key=0, style=solid];
m5_167 -> m5_10  [key=2, style=dotted];
m5_167 -> m5_169  [key=1, style=dashed, color=darkseagreen4, label=generator];
m5_167 -> m5_170  [key=1, style=dashed, color=darkseagreen4, label=generator];
m5_168 -> m5_169  [key=0, style=solid];
m5_169 -> m5_170  [key=0, style=solid];
m5_169 -> m5_174  [key=2, style=dotted];
m5_170 -> m5_171  [key=0, style=solid];
m5_170 -> m5_83  [key=2, style=dotted];
m5_171 -> m5_172  [key=0, style=solid];
m5_171 -> m5_12  [key=2, style=dotted];
m5_172 -> m5_173  [key=0, style=solid];
m5_172 -> m5_13  [key=2, style=dotted];
m5_173 -> m5_166  [key=0, style=bold, color=blue];
m5_175 -> m5_176  [key=0, style=solid];
m5_176 -> m5_177  [key=0, style=solid];
m5_176 -> m5_10  [key=2, style=dotted];
m5_176 -> m5_178  [key=1, style=dashed, color=darkseagreen4, label=generator];
m5_176 -> m5_179  [key=1, style=dashed, color=darkseagreen4, label=generator];
m5_176 -> m5_180  [key=1, style=dashed, color=darkseagreen4, label=generator];
m5_177 -> m5_178  [key=0, style=solid];
m5_177 -> m5_194  [key=2, style=dotted];
m5_177 -> m5_185  [key=1, style=dashed, color=darkseagreen4, label=contractResolver];
m5_178 -> m5_179  [key=0, style=solid];
m5_179 -> m5_180  [key=0, style=solid];
m5_180 -> m5_181  [key=0, style=solid];
m5_180 -> m5_83  [key=2, style=dotted];
m5_180 -> m5_188  [key=1, style=dashed, color=darkseagreen4, label=schema];
m5_185 -> m5_186  [key=0, style=solid];
m5_181 -> m5_182  [key=0, style=solid];
m5_181 -> m5_12  [key=2, style=dotted];
m5_188 -> m5_189  [key=0, style=solid];
m5_188 -> m5_161  [key=2, style=dotted];
m5_188 -> m5_198  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_188 -> m5_162  [key=1, style=dashed, color=green, label="lambda expression"];
m5_182 -> m5_183  [key=0, style=solid];
m5_182 -> m5_13  [key=2, style=dotted];
m5_183 -> m5_184  [key=0, style=solid];
m5_183 -> m5_156  [key=2, style=dotted];
m5_183 -> m5_186  [key=1, style=dashed, color=darkseagreen4, label=jsonWriter];
m5_183 -> m5_188  [key=1, style=dashed, color=darkseagreen4, label=jsonWriter];
m5_183 -> m5_190  [key=1, style=dashed, color=darkseagreen4, label=jsonWriter];
m5_183 -> m5_191  [key=1, style=dashed, color=darkseagreen4, label=jsonWriter];
m5_184 -> m5_185  [key=0, style=solid];
m5_184 -> m5_157  [key=2, style=dotted];
m5_184 -> m5_186  [key=1, style=dashed, color=darkseagreen4, label=serializer];
m5_184 -> m5_191  [key=1, style=dashed, color=darkseagreen4, label=serializer];
m5_186 -> m5_187  [key=0, style=solid];
m5_186 -> m5_195  [key=2, style=dotted];
m5_186 -> m5_160  [key=2, style=dotted];
m5_190 -> m5_191  [key=0, style=solid];
m5_190 -> m5_196  [key=2, style=dotted];
m5_190 -> m5_13  [key=2, style=dotted];
m5_191 -> m5_192  [key=0, style=solid];
m5_191 -> m5_197  [key=2, style=dotted];
m5_187 -> m5_188  [key=0, style=solid];
m5_187 -> m5_15  [key=2, style=dotted];
m5_187 -> m5_199  [key=1, style=dashed, color=darkseagreen4, label=errors];
m5_187 -> m5_189  [key=1, style=dashed, color=darkseagreen4, label=errors];
m5_189 -> m5_190  [key=0, style=solid];
m5_189 -> m5_46  [key=2, style=dotted];
m5_192 -> m5_193  [key=0, style=solid];
m5_192 -> m5_46  [key=2, style=dotted];
m5_193 -> m5_175  [key=0, style=bold, color=blue];
m5_26 -> m5_27  [key=0, style=solid];
m5_27 -> m5_28  [key=0, style=solid];
m5_27 -> m5_10  [key=2, style=dotted];
m5_28 -> m5_29  [key=0, style=solid];
m5_28 -> m5_11  [key=2, style=dotted];
m5_29 -> m5_30  [key=0, style=solid];
m5_29 -> m5_12  [key=2, style=dotted];
m5_30 -> m5_31  [key=0, style=solid];
m5_30 -> m5_13  [key=2, style=dotted];
m5_31 -> m5_26  [key=0, style=bold, color=blue];
m5_116 -> m5_117  [key=0, style=solid];
m5_117 -> m5_116  [key=0, style=bold, color=blue];
m5_229 -> m5_230  [key=0, style=solid];
m5_230 -> m5_231  [key=0, style=solid];
m5_230 -> m5_10  [key=2, style=dotted];
m5_231 -> m5_232  [key=0, style=solid];
m5_231 -> m5_11  [key=2, style=dotted];
m5_232 -> m5_233  [key=0, style=solid];
m5_232 -> m5_12  [key=2, style=dotted];
m5_233 -> m5_234  [key=0, style=solid];
m5_233 -> m5_13  [key=2, style=dotted];
m5_234 -> m5_229  [key=0, style=bold, color=blue];
m5_102 -> m5_103  [key=0, style=solid];
m5_103 -> m5_104  [key=0, style=solid];
m5_103 -> m5_10  [key=2, style=dotted];
m5_103 -> m5_105  [key=1, style=dashed, color=darkseagreen4, label=generator];
m5_104 -> m5_105  [key=0, style=solid];
m5_105 -> m5_106  [key=0, style=solid];
m5_105 -> m5_11  [key=2, style=dotted];
m5_105 -> m5_107  [key=1, style=dashed, color=darkseagreen4, label=schema];
m5_105 -> m5_108  [key=1, style=dashed, color=darkseagreen4, label=schema];
m5_106 -> m5_107  [key=0, style=solid];
m5_106 -> m5_46  [key=2, style=dotted];
m5_107 -> m5_108  [key=0, style=solid];
m5_107 -> m5_46  [key=2, style=dotted];
m5_108 -> m5_109  [key=0, style=solid];
m5_108 -> m5_46  [key=2, style=dotted];
m5_109 -> m5_102  [key=0, style=bold, color=blue];
m5_207 -> m5_208  [key=0, style=solid];
m5_208 -> m5_209  [key=0, style=solid];
m5_208 -> m5_211  [key=1, style=dashed, color=darkseagreen4, label=type];
m5_209 -> m5_210  [key=0, style=solid];
m5_209 -> m5_10  [key=2, style=dotted];
m5_209 -> m5_211  [key=1, style=dashed, color=darkseagreen4, label=jsonSchemaGenerator];
m5_211 -> m5_212  [key=0, style=solid];
m5_211 -> m5_11  [key=2, style=dotted];
m5_210 -> m5_211  [key=0, style=solid];
m5_212 -> m5_213  [key=0, style=solid];
m5_212 -> m5_214  [key=2, style=dotted];
m5_213 -> m5_207  [key=0, style=bold, color=blue];
m5_55 -> m5_56  [key=0, style=solid];
m5_56 -> m5_57  [key=0, style=solid];
m5_56 -> m5_10  [key=2, style=dotted];
m5_56 -> m5_59  [key=1, style=dashed, color=darkseagreen4, label=generator];
m5_56 -> m5_60  [key=1, style=dashed, color=darkseagreen4, label=generator];
m5_56 -> m5_62  [key=1, style=dashed, color=darkseagreen4, label=generator];
m5_56 -> m5_63  [key=1, style=dashed, color=darkseagreen4, label=generator];
m5_57 -> m5_58  [key=0, style=solid];
m5_57 -> m5_11  [key=2, style=dotted];
m5_59 -> m5_60  [key=0, style=solid];
m5_60 -> m5_61  [key=0, style=solid];
m5_60 -> m5_11  [key=2, style=dotted];
m5_62 -> m5_63  [key=0, style=solid];
m5_63 -> m5_64  [key=0, style=solid];
m5_63 -> m5_11  [key=2, style=dotted];
m5_58 -> m5_59  [key=0, style=solid];
m5_58 -> m5_46  [key=2, style=dotted];
m5_61 -> m5_62  [key=0, style=solid];
m5_61 -> m5_46  [key=2, style=dotted];
m5_64 -> m5_65  [key=0, style=solid];
m5_64 -> m5_46  [key=2, style=dotted];
m5_65 -> m5_55  [key=0, style=bold, color=blue];
m5_32 -> m5_33  [key=0, style=solid];
m5_33 -> m5_34  [key=0, style=solid];
m5_33 -> m5_10  [key=2, style=dotted];
m5_34 -> m5_35  [key=0, style=solid];
m5_34 -> m5_11  [key=2, style=dotted];
m5_35 -> m5_36  [key=0, style=solid];
m5_35 -> m5_12  [key=2, style=dotted];
m5_36 -> m5_37  [key=0, style=solid];
m5_36 -> m5_13  [key=2, style=dotted];
m5_37 -> m5_32  [key=0, style=bold, color=blue];
m5_198 -> m5_199  [key=0, style=solid];
m5_70 -> m5_71  [key=0, style=solid];
m5_71 -> m5_72  [key=0, style=solid];
m5_71 -> m5_10  [key=2, style=dotted];
m5_72 -> m5_73  [key=0, style=solid];
m5_72 -> m5_11  [key=2, style=dotted];
m5_73 -> m5_70  [key=0, style=bold, color=blue];
m5_135 -> m5_136  [key=0, style=solid];
m5_136 -> m5_137  [key=0, style=solid];
m5_137 -> m5_135  [key=0, style=bold, color=blue];
m5_163 -> m5_164  [key=0, style=solid, color=red];
m5_163 -> m5_165  [key=2, style=dotted, color=red];
m5_162 -> m5_163  [key=0, style=solid, color=red];
m5_162 -> m5_199  [key=0, style=solid, color=green];
m5_164 -> m5_162  [key=0, style=bold, color=blue];
m5_199 -> m5_200  [key=0, style=solid];
m5_199 -> m5_165  [key=2, style=dotted];
m5_199 -> m5_164  [key=0, style=solid, color=green];
m5_200 -> m5_198  [key=0, style=bold, color=blue];
m5_92 -> m5_93  [key=0, style=solid];
m5_93 -> m5_94  [key=0, style=solid];
m5_93 -> m5_10  [key=2, style=dotted];
m5_93 -> m5_95  [key=1, style=dashed, color=darkseagreen4, label=generator];
m5_94 -> m5_95  [key=0, style=solid];
m5_95 -> m5_96  [key=0, style=solid];
m5_95 -> m5_11  [key=2, style=dotted];
m5_95 -> m5_99  [key=1, style=dashed, color=darkseagreen4, label=schema];
m5_96 -> m5_97  [key=0, style=solid];
m5_96 -> m5_46  [key=2, style=dotted];
m5_99 -> m5_100  [key=0, style=solid];
m5_99 -> m5_18  [key=2, style=dotted];
m5_99 -> m5_19  [key=2, style=dotted];
m5_97 -> m5_98  [key=0, style=solid];
m5_97 -> m5_16  [key=2, style=dotted];
m5_98 -> m5_99  [key=0, style=solid];
m5_98 -> m5_101  [key=2, style=dotted];
m5_100 -> m5_92  [key=0, style=bold, color=blue];
m5_0 -> m5_1  [key=0, style=solid];
m5_1 -> m5_2  [key=0, style=solid];
m5_1 -> m5_10  [key=2, style=dotted];
m5_2 -> m5_3  [key=0, style=solid];
m5_2 -> m5_11  [key=2, style=dotted];
m5_2 -> m5_8  [key=1, style=dashed, color=darkseagreen4, label=schema];
m5_3 -> m5_4  [key=0, style=solid];
m5_3 -> m5_12  [key=2, style=dotted];
m5_8 -> m5_9  [key=0, style=solid];
m5_8 -> m5_18  [key=2, style=dotted];
m5_8 -> m5_19  [key=2, style=dotted];
m5_4 -> m5_5  [key=0, style=solid];
m5_4 -> m5_13  [key=2, style=dotted];
m5_5 -> m5_6  [key=0, style=solid];
m5_5 -> m5_14  [key=2, style=dotted];
m5_5 -> m5_15  [key=2, style=dotted];
m5_6 -> m5_7  [key=0, style=solid];
m5_6 -> m5_16  [key=2, style=dotted];
m5_7 -> m5_8  [key=0, style=solid];
m5_7 -> m5_17  [key=2, style=dotted];
m5_9 -> m5_0  [key=0, style=bold, color=blue];
m5_138 -> m5_139  [key=0, style=solid, color=red];
m5_139 -> m5_140  [key=0, style=solid, color=red];
m5_139 -> m5_10  [key=2, style=dotted, color=red];
m5_139 -> m5_141  [key=1, style=dashed, color=red, label=generator];
m5_139 -> m5_142  [key=1, style=dashed, color=red, label=generator];
m5_140 -> m5_141  [key=0, style=solid, color=red];
m5_141 -> m5_142  [key=0, style=solid, color=red];
m5_141 -> m5_116  [key=2, style=dotted, color=red];
m5_142 -> m5_143  [key=0, style=solid, color=red];
m5_142 -> m5_83  [key=2, style=dotted, color=red];
m5_142 -> m5_152  [key=1, style=dashed, color=red, label=schema];
m5_143 -> m5_144  [key=0, style=solid, color=red];
m5_143 -> m5_12  [key=2, style=dotted, color=red];
m5_152 -> m5_153  [key=0, style=solid, color=red];
m5_152 -> m5_161  [key=2, style=dotted, color=red];
m5_152 -> m5_162  [key=1, style=dashed, color=red, label="lambda expression"];
m5_144 -> m5_145  [key=0, style=solid, color=red];
m5_144 -> m5_13  [key=2, style=dotted, color=red];
m5_145 -> m5_146  [key=0, style=solid, color=red];
m5_145 -> m5_155  [key=2, style=dotted, color=red];
m5_145 -> m5_150  [key=1, style=dashed, color=red, label=temp];
m5_146 -> m5_147  [key=0, style=solid, color=red];
m5_146 -> m5_156  [key=2, style=dotted, color=red];
m5_146 -> m5_150  [key=1, style=dashed, color=red, label=jsonWriter];
m5_146 -> m5_152  [key=1, style=dashed, color=red, label=jsonWriter];
m5_150 -> m5_151  [key=0, style=solid, color=red];
m5_150 -> m5_160  [key=2, style=dotted, color=red];
m5_147 -> m5_148  [key=0, style=solid, color=red];
m5_147 -> m5_157  [key=2, style=dotted, color=red];
m5_147 -> m5_149  [key=1, style=dashed, color=red, label=serializer];
m5_147 -> m5_150  [key=1, style=dashed, color=red, label=serializer];
m5_148 -> m5_149  [key=0, style=solid, color=red];
m5_148 -> m5_158  [key=2, style=dotted, color=red];
m5_148 -> m5_159  [key=2, style=dotted, color=red];
m5_149 -> m5_150  [key=0, style=solid, color=red];
m5_149 -> m5_116  [key=2, style=dotted, color=red];
m5_151 -> m5_152  [key=0, style=solid, color=red];
m5_151 -> m5_15  [key=2, style=dotted, color=red];
m5_151 -> m5_163  [key=1, style=dashed, color=red, label=errors];
m5_151 -> m5_153  [key=1, style=dashed, color=red, label=errors];
m5_153 -> m5_154  [key=0, style=solid, color=red];
m5_153 -> m5_46  [key=2, style=dotted, color=red];
m5_154 -> m5_138  [key=0, style=bold, color=blue];
m5_118 -> m5_119  [key=0, style=solid];
m5_118 -> m5_120  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m5_118 -> m5_121  [key=1, style=dashed, color=darkseagreen4, label="System.Type"];
m5_119 -> m5_120  [key=0, style=solid];
m5_119 -> m5_121  [key=0, style=solid];
m5_120 -> m5_122  [key=0, style=solid];
m5_120 -> m5_123  [key=2, style=dotted];
m5_121 -> m5_122  [key=0, style=solid];
m5_121 -> m5_124  [key=2, style=dotted];
m5_122 -> m5_118  [key=0, style=bold, color=blue];
m5_38 -> m5_39  [key=0, style=solid];
m5_39 -> m5_40  [key=0, style=solid];
m5_39 -> m5_10  [key=2, style=dotted];
m5_40 -> m5_41  [key=0, style=solid];
m5_40 -> m5_11  [key=2, style=dotted];
m5_40 -> m5_42  [key=1, style=dashed, color=darkseagreen4, label=schema];
m5_40 -> m5_43  [key=1, style=dashed, color=darkseagreen4, label=schema];
m5_40 -> m5_44  [key=1, style=dashed, color=darkseagreen4, label=schema];
m5_41 -> m5_42  [key=0, style=solid];
m5_41 -> m5_46  [key=2, style=dotted];
m5_42 -> m5_43  [key=0, style=solid];
m5_42 -> m5_46  [key=2, style=dotted];
m5_43 -> m5_44  [key=0, style=solid];
m5_43 -> m5_46  [key=2, style=dotted];
m5_44 -> m5_45  [key=0, style=solid];
m5_44 -> m5_46  [key=2, style=dotted];
m5_45 -> m5_38  [key=0, style=bold, color=blue];
m5_66 -> m5_67  [key=0, style=solid];
m5_67 -> m5_68  [key=0, style=solid];
m5_67 -> m5_69  [key=2, style=dotted];
m5_67 -> m5_70  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m5_68 -> m5_66  [key=0, style=bold, color=blue];
m5_215 -> m5_216  [key=0, style=solid];
m5_216 -> m5_217  [key=0, style=solid];
m5_216 -> m5_10  [key=2, style=dotted];
m5_216 -> m5_218  [key=1, style=dashed, color=darkseagreen4, label=jsonSchemaGenerator];
m5_217 -> m5_218  [key=0, style=solid];
m5_218 -> m5_219  [key=0, style=solid];
m5_218 -> m5_11  [key=2, style=dotted];
m5_219 -> m5_220  [key=0, style=solid];
m5_219 -> m5_12  [key=2, style=dotted];
m5_220 -> m5_221  [key=0, style=solid];
m5_220 -> m5_13  [key=2, style=dotted];
m5_221 -> m5_215  [key=0, style=bold, color=blue];
m5_84 -> m5_85  [key=0, style=solid];
m5_85 -> m5_86  [key=0, style=solid];
m5_85 -> m5_10  [key=2, style=dotted];
m5_86 -> m5_87  [key=0, style=solid];
m5_86 -> m5_11  [key=2, style=dotted];
m5_86 -> m5_88  [key=1, style=dashed, color=darkseagreen4, label=schema];
m5_86 -> m5_89  [key=1, style=dashed, color=darkseagreen4, label=schema];
m5_86 -> m5_90  [key=1, style=dashed, color=darkseagreen4, label=schema];
m5_87 -> m5_88  [key=0, style=solid];
m5_87 -> m5_46  [key=2, style=dotted];
m5_88 -> m5_89  [key=0, style=solid];
m5_88 -> m5_46  [key=2, style=dotted];
m5_89 -> m5_90  [key=0, style=solid];
m5_89 -> m5_46  [key=2, style=dotted];
m5_90 -> m5_91  [key=0, style=solid];
m5_90 -> m5_46  [key=2, style=dotted];
m5_91 -> m5_84  [key=0, style=bold, color=blue];
m5_235 -> m5_120  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CustomDirectoryInfoMapper"];
m5_235 -> m5_121  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CustomDirectoryInfoMapper"];
m5_235 -> m5_126  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Schema.JsonSchemaGeneratorTests.CustomDirectoryInfoMapper"];
m5_236 -> m5_163  [key=1, style=dashed, color=red, label=errors];
m5_236 -> m5_199  [key=1, style=dashed, color=green, label=errors];
m5_237 -> m5_199  [key=1, style=dashed, color=darkseagreen4, label=errors];
m6_1070 -> m6_1071  [key=0, style=solid];
m6_1071 -> m6_1072  [key=0, style=solid];
m6_1072 -> m6_1070  [key=0, style=bold, color=blue];
m6_354 -> m6_355  [key=0, style=solid];
m6_355 -> m6_356  [key=0, style=solid];
m6_355 -> m6_240  [key=2, style=dotted];
m6_356 -> m6_354  [key=0, style=bold, color=blue];
m6_999 -> m6_1000  [key=0, style=solid];
m6_1000 -> m6_1001  [key=0, style=solid];
m6_1000 -> m6_1002  [key=2, style=dotted];
m6_1001 -> m6_999  [key=0, style=bold, color=blue];
m6_1041 -> m6_1042  [key=0, style=solid];
m6_1041 -> m6_1035  [key=3, color=darkorchid, style=bold, label="method methodReturn System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator"];
m6_1042 -> m6_1043  [key=0, style=solid];
m6_1042 -> m6_1035  [key=2, style=dotted];
m6_1043 -> m6_1041  [key=0, style=bold, color=blue];
m6_74 -> m6_75  [key=0, style=solid];
m6_75 -> m6_74  [key=0, style=bold, color=blue];
m6_294 -> m6_295  [key=0, style=solid];
m6_295 -> m6_296  [key=0, style=solid];
m6_295 -> m6_10  [key=2, style=dotted];
m6_295 -> m6_298  [key=1, style=dashed, color=darkseagreen4, label=d];
m6_296 -> m6_297  [key=0, style=solid];
m6_296 -> m6_9  [key=2, style=dotted];
m6_298 -> m6_299  [key=0, style=solid];
m6_298 -> m6_9  [key=2, style=dotted];
m6_297 -> m6_298  [key=0, style=solid];
m6_297 -> m6_300  [key=2, style=dotted];
m6_299 -> m6_294  [key=0, style=bold, color=blue];
m6_329 -> m6_330  [key=0, style=solid];
m6_330 -> m6_331  [key=0, style=solid];
m6_330 -> m6_10  [key=2, style=dotted];
m6_330 -> m6_332  [key=1, style=dashed, color=darkseagreen4, label=dic];
m6_330 -> m6_333  [key=1, style=dashed, color=darkseagreen4, label=dic];
m6_330 -> m6_334  [key=1, style=dashed, color=darkseagreen4, label=dic];
m6_331 -> m6_332  [key=0, style=solid];
m6_331 -> m6_9  [key=2, style=dotted];
m6_332 -> m6_333  [key=0, style=solid];
m6_332 -> m6_9  [key=2, style=dotted];
m6_333 -> m6_334  [key=0, style=solid];
m6_333 -> m6_9  [key=2, style=dotted];
m6_334 -> m6_335  [key=0, style=solid];
m6_334 -> m6_336  [key=2, style=dotted];
m6_335 -> m6_329  [key=0, style=bold, color=blue];
m6_270 -> m6_271  [key=0, style=solid];
m6_271 -> m6_270  [key=0, style=bold, color=blue];
m6_257 -> m6_258  [key=0, style=solid];
m6_258 -> m6_259  [key=0, style=solid];
m6_258 -> m6_240  [key=2, style=dotted];
m6_259 -> m6_257  [key=0, style=bold, color=blue];
m6_284 -> m6_285  [key=0, style=solid];
m6_285 -> m6_286  [key=0, style=solid];
m6_285 -> m6_37  [key=2, style=dotted];
m6_286 -> m6_284  [key=0, style=bold, color=blue];
m6_237 -> m6_238  [key=0, style=solid];
m6_238 -> m6_239  [key=0, style=solid];
m6_238 -> m6_240  [key=2, style=dotted];
m6_239 -> m6_237  [key=0, style=bold, color=blue];
m6_260 -> m6_261  [key=0, style=solid];
m6_260 -> m6_257  [key=3, color=darkorchid, style=bold, label="method methodReturn System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator"];
m6_261 -> m6_262  [key=0, style=solid];
m6_261 -> m6_257  [key=2, style=dotted];
m6_262 -> m6_260  [key=0, style=bold, color=blue];
m6_395 -> m6_396  [key=0, style=solid];
m6_396 -> m6_397  [key=0, style=solid];
m6_396 -> m6_392  [key=2, style=dotted];
m6_396 -> m6_398  [key=1, style=dashed, color=darkseagreen4, label=c];
m6_396 -> m6_399  [key=1, style=dashed, color=darkseagreen4, label=c];
m6_397 -> m6_398  [key=0, style=solid];
m6_397 -> m6_37  [key=2, style=dotted];
m6_398 -> m6_399  [key=0, style=solid];
m6_398 -> m6_37  [key=2, style=dotted];
m6_399 -> m6_400  [key=0, style=solid];
m6_399 -> m6_189  [key=2, style=dotted];
m6_400 -> m6_401  [key=0, style=solid];
m6_400 -> m6_10  [key=2, style=dotted];
m6_400 -> m6_402  [key=1, style=dashed, color=darkseagreen4, label=newValue];
m6_401 -> m6_402  [key=0, style=solid];
m6_401 -> m6_9  [key=2, style=dotted];
m6_402 -> m6_403  [key=0, style=solid];
m6_402 -> m6_307  [key=2, style=dotted];
m6_402 -> m6_9  [key=2, style=dotted];
m6_403 -> m6_395  [key=0, style=bold, color=blue];
m6_178 -> m6_179  [key=0, style=solid];
m6_179 -> m6_180  [key=0, style=solid];
m6_179 -> m6_188  [key=2, style=dotted];
m6_179 -> m6_181  [key=1, style=dashed, color=darkseagreen4, label=d];
m6_180 -> m6_181  [key=0, style=solid];
m6_180 -> m6_29  [key=2, style=dotted];
m6_180 -> m6_176  [key=2, style=dotted];
m6_180 -> m6_177  [key=2, style=dotted];
m6_181 -> m6_182  [key=0, style=solid];
m6_181 -> m6_189  [key=2, style=dotted];
m6_181 -> m6_183  [key=1, style=dashed, color=darkseagreen4, label=json];
m6_182 -> m6_183  [key=0, style=solid];
m6_182 -> m6_9  [key=2, style=dotted];
m6_183 -> m6_184  [key=0, style=solid];
m6_183 -> m6_10  [key=2, style=dotted];
m6_183 -> m6_185  [key=1, style=dashed, color=darkseagreen4, label=d2];
m6_183 -> m6_186  [key=1, style=dashed, color=darkseagreen4, label=d2];
m6_184 -> m6_185  [key=0, style=solid];
m6_184 -> m6_9  [key=2, style=dotted];
m6_185 -> m6_186  [key=0, style=solid];
m6_185 -> m6_9  [key=2, style=dotted];
m6_186 -> m6_187  [key=0, style=solid];
m6_186 -> m6_9  [key=2, style=dotted];
m6_187 -> m6_178  [key=0, style=bold, color=blue];
m6_366 -> m6_367  [key=0, style=solid];
m6_367 -> m6_368  [key=0, style=solid];
m6_368 -> m6_366  [key=0, style=bold, color=blue];
m6_911 -> m6_912  [key=0, style=solid];
m6_912 -> m6_913  [key=0, style=solid];
m6_912 -> m6_914  [key=2, style=dotted];
m6_913 -> m6_911  [key=0, style=bold, color=blue];
m6_665 -> m6_666  [key=0, style=solid];
m6_666 -> m6_667  [key=0, style=solid];
m6_666 -> m6_670  [key=1, style=dashed, color=darkseagreen4, label=json];
m6_666 -> m6_666  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m6_667 -> m6_668  [key=0, style=solid];
m6_667 -> m6_79  [key=2, style=dotted];
m6_667 -> m6_669  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_668 -> m6_665  [key=0, style=bold, color=blue];
m6_881 -> m6_882  [key=0, style=solid];
m6_882 -> m6_883  [key=0, style=solid];
m6_882 -> m6_802  [key=2, style=dotted];
m6_883 -> m6_881  [key=0, style=bold, color=blue];
m6_888 -> m6_889  [key=0, style=solid];
m6_889 -> m6_890  [key=0, style=solid];
m6_889 -> m6_891  [key=2, style=dotted];
m6_890 -> m6_888  [key=0, style=bold, color=blue];
m6_1009 -> m6_1010  [key=0, style=solid];
m6_1010 -> m6_1011  [key=0, style=solid];
m6_1010 -> m6_1002  [key=2, style=dotted];
m6_1011 -> m6_1009  [key=0, style=bold, color=blue];
m6_1059 -> m6_1060  [key=0, style=solid];
m6_1060 -> m6_1061  [key=0, style=solid];
m6_1061 -> m6_1059  [key=0, style=bold, color=blue];
m6_496 -> m6_497  [key=0, style=solid];
m6_497 -> m6_498  [key=0, style=solid];
m6_497 -> m6_497  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m6_498 -> m6_499  [key=0, style=solid];
m6_498 -> m6_10  [key=2, style=dotted];
m6_498 -> m6_500  [key=1, style=dashed, color=darkseagreen4, label=values];
m6_498 -> m6_501  [key=1, style=dashed, color=darkseagreen4, label=values];
m6_498 -> m6_502  [key=1, style=dashed, color=darkseagreen4, label=values];
m6_498 -> m6_503  [key=1, style=dashed, color=darkseagreen4, label=values];
m6_498 -> m6_504  [key=1, style=dashed, color=darkseagreen4, label=values];
m6_498 -> m6_505  [key=1, style=dashed, color=darkseagreen4, label=values];
m6_498 -> m6_506  [key=1, style=dashed, color=darkseagreen4, label=values];
m6_498 -> m6_507  [key=1, style=dashed, color=darkseagreen4, label=values];
m6_498 -> m6_508  [key=1, style=dashed, color=darkseagreen4, label=values];
m6_499 -> m6_500  [key=0, style=solid];
m6_499 -> m6_9  [key=2, style=dotted];
m6_500 -> m6_501  [key=0, style=solid];
m6_500 -> m6_9  [key=2, style=dotted];
m6_501 -> m6_502  [key=0, style=solid];
m6_501 -> m6_9  [key=2, style=dotted];
m6_502 -> m6_503  [key=0, style=solid];
m6_502 -> m6_9  [key=2, style=dotted];
m6_503 -> m6_504  [key=0, style=solid];
m6_503 -> m6_9  [key=2, style=dotted];
m6_504 -> m6_505  [key=0, style=solid];
m6_504 -> m6_9  [key=2, style=dotted];
m6_505 -> m6_506  [key=0, style=solid];
m6_505 -> m6_9  [key=2, style=dotted];
m6_506 -> m6_507  [key=0, style=solid];
m6_506 -> m6_9  [key=2, style=dotted];
m6_507 -> m6_508  [key=0, style=solid];
m6_507 -> m6_9  [key=2, style=dotted];
m6_508 -> m6_509  [key=0, style=solid];
m6_508 -> m6_9  [key=2, style=dotted];
m6_509 -> m6_496  [key=0, style=bold, color=blue];
m6_907 -> m6_908  [key=0, style=solid];
m6_908 -> m6_909  [key=0, style=solid];
m6_908 -> m6_910  [key=2, style=dotted];
m6_909 -> m6_907  [key=0, style=bold, color=blue];
m6_301 -> m6_302  [key=0, style=solid];
m6_302 -> m6_303  [key=0, style=solid];
m6_302 -> m6_10  [key=2, style=dotted];
m6_302 -> m6_304  [key=1, style=dashed, color=darkseagreen4, label=l];
m6_302 -> m6_305  [key=1, style=dashed, color=darkseagreen4, label=l];
m6_303 -> m6_304  [key=0, style=solid];
m6_303 -> m6_307  [key=2, style=dotted];
m6_303 -> m6_9  [key=2, style=dotted];
m6_304 -> m6_305  [key=0, style=solid];
m6_304 -> m6_9  [key=2, style=dotted];
m6_305 -> m6_306  [key=0, style=solid];
m6_305 -> m6_9  [key=2, style=dotted];
m6_306 -> m6_301  [key=0, style=bold, color=blue];
m6_875 -> m6_876  [key=0, style=solid];
m6_876 -> m6_877  [key=0, style=solid];
m6_876 -> m6_29  [key=2, style=dotted];
m6_877 -> m6_875  [key=0, style=bold, color=blue];
m6_531 -> m6_532  [key=0, style=solid];
m6_532 -> m6_533  [key=0, style=solid];
m6_532 -> m6_517  [key=2, style=dotted];
m6_533 -> m6_534  [key=0, style=solid];
m6_533 -> m6_189  [key=2, style=dotted];
m6_534 -> m6_535  [key=0, style=solid];
m6_534 -> m6_204  [key=2, style=dotted];
m6_535 -> m6_531  [key=0, style=bold, color=blue];
m6_565 -> m6_566  [key=0, style=solid];
m6_566 -> m6_567  [key=0, style=solid];
m6_566 -> m6_573  [key=2, style=dotted];
m6_566 -> m6_568  [key=1, style=dashed, color=darkseagreen4, label=aa];
m6_566 -> m6_569  [key=1, style=dashed, color=darkseagreen4, label=aa];
m6_566 -> m6_570  [key=1, style=dashed, color=darkseagreen4, label=aa];
m6_567 -> m6_568  [key=0, style=solid];
m6_568 -> m6_569  [key=0, style=solid];
m6_569 -> m6_570  [key=0, style=solid];
m6_570 -> m6_571  [key=0, style=solid];
m6_570 -> m6_189  [key=2, style=dotted];
m6_571 -> m6_572  [key=0, style=solid];
m6_571 -> m6_204  [key=2, style=dotted];
m6_572 -> m6_565  [key=0, style=bold, color=blue];
m6_76 -> m6_77  [key=0, style=solid];
m6_77 -> m6_78  [key=0, style=solid];
m6_77 -> m6_79  [key=2, style=dotted];
m6_77 -> m6_80  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_78 -> m6_76  [key=0, style=bold, color=blue];
m6_699 -> m6_700  [key=0, style=solid];
m6_700 -> m6_701  [key=0, style=solid];
m6_700 -> m6_706  [key=2, style=dotted];
m6_701 -> m6_702  [key=0, style=solid];
m6_702 -> m6_703  [key=0, style=solid];
m6_702 -> m6_29  [key=2, style=dotted];
m6_703 -> m6_704  [key=0, style=solid];
m6_703 -> m6_277  [key=2, style=dotted];
m6_703 -> m6_707  [key=2, style=dotted];
m6_704 -> m6_705  [key=0, style=solid];
m6_704 -> m6_204  [key=2, style=dotted];
m6_705 -> m6_699  [key=0, style=bold, color=blue];
m6_282 -> m6_283  [key=0, style=solid];
m6_283 -> m6_282  [key=0, style=bold, color=blue];
m6_930 -> m6_940  [key=0, style=solid];
m6_940 -> m6_941  [key=0, style=solid];
m6_940 -> m6_947  [key=0, style=solid];
m6_940 -> m6_938  [key=2, style=dotted];
m6_941 -> m6_942  [key=0, style=solid];
m6_941 -> m6_944  [key=0, style=solid];
m6_941 -> m6_946  [key=0, style=solid];
m6_941 -> m6_949  [key=2, style=dotted];
m6_947 -> m6_948  [key=0, style=solid];
m6_942 -> m6_943  [key=0, style=solid];
m6_944 -> m6_945  [key=0, style=solid];
m6_946 -> m6_948  [key=0, style=solid];
m6_943 -> m6_948  [key=0, style=solid];
m6_945 -> m6_948  [key=0, style=solid];
m6_948 -> m6_930  [key=0, style=bold, color=blue];
m6_308 -> m6_309  [key=0, style=solid];
m6_309 -> m6_310  [key=0, style=solid];
m6_309 -> m6_10  [key=2, style=dotted];
m6_309 -> m6_311  [key=1, style=dashed, color=darkseagreen4, label=list];
m6_309 -> m6_312  [key=1, style=dashed, color=darkseagreen4, label=list];
m6_309 -> m6_313  [key=1, style=dashed, color=darkseagreen4, label=list];
m6_310 -> m6_311  [key=0, style=solid];
m6_310 -> m6_9  [key=2, style=dotted];
m6_311 -> m6_312  [key=0, style=solid];
m6_311 -> m6_9  [key=2, style=dotted];
m6_312 -> m6_313  [key=0, style=solid];
m6_312 -> m6_9  [key=2, style=dotted];
m6_313 -> m6_314  [key=0, style=solid];
m6_313 -> m6_9  [key=2, style=dotted];
m6_314 -> m6_308  [key=0, style=bold, color=blue];
m6_1065 -> m6_1066  [key=0, style=solid];
m6_1065 -> m6_1067  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m6_1066 -> m6_1067  [key=0, style=solid];
m6_1067 -> m6_1068  [key=0, style=solid];
m6_1068 -> m6_1069  [key=0, style=solid];
m6_1069 -> m6_1065  [key=0, style=bold, color=blue];
m6_749 -> m6_750  [key=0, style=solid];
m6_750 -> m6_751  [key=0, style=solid];
m6_750 -> m6_763  [key=2, style=dotted];
m6_750 -> m6_753  [key=1, style=dashed, color=darkseagreen4, label=name];
m6_750 -> m6_754  [key=1, style=dashed, color=darkseagreen4, label=name];
m6_750 -> m6_755  [key=1, style=dashed, color=darkseagreen4, label=name];
m6_751 -> m6_752  [key=0, style=solid];
m6_751 -> m6_764  [key=2, style=dotted];
m6_751 -> m6_753  [key=1, style=dashed, color=darkseagreen4, label=p1];
m6_753 -> m6_754  [key=0, style=solid];
m6_753 -> m6_37  [key=2, style=dotted];
m6_754 -> m6_755  [key=0, style=solid];
m6_754 -> m6_37  [key=2, style=dotted];
m6_755 -> m6_756  [key=0, style=solid];
m6_755 -> m6_189  [key=2, style=dotted];
m6_755 -> m6_757  [key=1, style=dashed, color=darkseagreen4, label=json];
m6_752 -> m6_753  [key=0, style=solid];
m6_752 -> m6_764  [key=2, style=dotted];
m6_752 -> m6_754  [key=1, style=dashed, color=darkseagreen4, label=p2];
m6_756 -> m6_757  [key=0, style=solid];
m6_756 -> m6_204  [key=2, style=dotted];
m6_757 -> m6_758  [key=0, style=solid];
m6_757 -> m6_10  [key=2, style=dotted];
m6_757 -> m6_759  [key=1, style=dashed, color=darkseagreen4, label=newName];
m6_757 -> m6_760  [key=1, style=dashed, color=darkseagreen4, label=newName];
m6_757 -> m6_761  [key=1, style=dashed, color=darkseagreen4, label=newName];
m6_758 -> m6_759  [key=0, style=solid];
m6_758 -> m6_9  [key=2, style=dotted];
m6_759 -> m6_760  [key=0, style=solid];
m6_759 -> m6_9  [key=2, style=dotted];
m6_760 -> m6_761  [key=0, style=solid];
m6_760 -> m6_9  [key=2, style=dotted];
m6_761 -> m6_762  [key=0, style=solid];
m6_761 -> m6_9  [key=2, style=dotted];
m6_762 -> m6_749  [key=0, style=bold, color=blue];
m6_688 -> m6_689  [key=0, style=solid];
m6_689 -> m6_690  [key=0, style=solid];
m6_689 -> m6_697  [key=1, style=dashed, color=darkseagreen4, label=json];
m6_689 -> m6_689  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m6_690 -> m6_691  [key=0, style=solid];
m6_690 -> m6_10  [key=2, style=dotted];
m6_690 -> m6_692  [key=1, style=dashed, color=darkseagreen4, label=aa];
m6_690 -> m6_693  [key=1, style=dashed, color=darkseagreen4, label=aa];
m6_690 -> m6_694  [key=1, style=dashed, color=darkseagreen4, label=aa];
m6_690 -> m6_695  [key=1, style=dashed, color=darkseagreen4, label=aa];
m6_690 -> m6_696  [key=1, style=dashed, color=darkseagreen4, label=aa];
m6_697 -> m6_698  [key=0, style=solid];
m6_697 -> m6_9  [key=2, style=dotted];
m6_691 -> m6_692  [key=0, style=solid];
m6_691 -> m6_9  [key=2, style=dotted];
m6_692 -> m6_693  [key=0, style=solid];
m6_692 -> m6_9  [key=2, style=dotted];
m6_693 -> m6_694  [key=0, style=solid];
m6_693 -> m6_585  [key=2, style=dotted];
m6_693 -> m6_9  [key=2, style=dotted];
m6_694 -> m6_695  [key=0, style=solid];
m6_694 -> m6_585  [key=2, style=dotted];
m6_694 -> m6_9  [key=2, style=dotted];
m6_695 -> m6_696  [key=0, style=solid];
m6_695 -> m6_585  [key=2, style=dotted];
m6_695 -> m6_9  [key=2, style=dotted];
m6_696 -> m6_697  [key=0, style=solid];
m6_696 -> m6_8  [key=2, style=dotted];
m6_698 -> m6_688  [key=0, style=bold, color=blue];
m6_173 -> m6_174  [key=0, style=solid];
m6_174 -> m6_175  [key=0, style=solid];
m6_174 -> m6_29  [key=2, style=dotted];
m6_174 -> m6_176  [key=2, style=dotted];
m6_174 -> m6_177  [key=2, style=dotted];
m6_175 -> m6_173  [key=0, style=bold, color=blue];
m6_101 -> m6_102  [key=0, style=solid];
m6_102 -> m6_101  [key=0, style=bold, color=blue];
m6_381 -> m6_382  [key=0, style=solid];
m6_382 -> m6_383  [key=0, style=solid];
m6_382 -> m6_386  [key=1, style=dashed, color=darkseagreen4, label=s];
m6_382 -> m6_389  [key=1, style=dashed, color=darkseagreen4, label=s];
m6_382 -> m6_382  [key=3, color=darkorchid, style=bold, label="Local variable string s"];
m6_383 -> m6_384  [key=0, style=solid];
m6_383 -> m6_8  [key=2, style=dotted];
m6_386 -> m6_387  [key=0, style=solid];
m6_386 -> m6_123  [key=2, style=dotted];
m6_389 -> m6_390  [key=0, style=solid];
m6_389 -> m6_123  [key=2, style=dotted];
m6_384 -> m6_385  [key=0, style=solid];
m6_384 -> m6_9  [key=2, style=dotted];
m6_385 -> m6_386  [key=0, style=solid];
m6_385 -> m6_7  [key=2, style=dotted];
m6_385 -> m6_387  [key=1, style=dashed, color=darkseagreen4, label=d1];
m6_387 -> m6_388  [key=0, style=solid];
m6_387 -> m6_8  [key=2, style=dotted];
m6_387 -> m6_9  [key=2, style=dotted];
m6_388 -> m6_389  [key=0, style=solid];
m6_388 -> m6_7  [key=2, style=dotted];
m6_388 -> m6_390  [key=1, style=dashed, color=darkseagreen4, label=d2];
m6_390 -> m6_391  [key=0, style=solid];
m6_390 -> m6_8  [key=2, style=dotted];
m6_390 -> m6_9  [key=2, style=dotted];
m6_391 -> m6_381  [key=0, style=bold, color=blue];
m6_742 -> m6_743  [key=0, style=solid];
m6_743 -> m6_744  [key=0, style=solid];
m6_743 -> m6_743  [key=3, color=darkorchid, style=bold, label="Local variable string jsonText"];
m6_744 -> m6_745  [key=0, style=solid];
m6_744 -> m6_10  [key=2, style=dotted];
m6_744 -> m6_746  [key=1, style=dashed, color=darkseagreen4, label=o];
m6_744 -> m6_747  [key=1, style=dashed, color=darkseagreen4, label=o];
m6_745 -> m6_746  [key=0, style=solid];
m6_745 -> m6_9  [key=2, style=dotted];
m6_746 -> m6_747  [key=0, style=solid];
m6_746 -> m6_9  [key=2, style=dotted];
m6_747 -> m6_748  [key=0, style=solid];
m6_747 -> m6_9  [key=2, style=dotted];
m6_748 -> m6_742  [key=0, style=bold, color=blue];
m6_915 -> m6_916  [key=0, style=solid];
m6_916 -> m6_917  [key=0, style=solid];
m6_916 -> m6_240  [key=2, style=dotted];
m6_917 -> m6_915  [key=0, style=bold, color=blue];
m6_612 -> m6_613  [key=0, style=solid];
m6_613 -> m6_614  [key=0, style=solid];
m6_613 -> m6_623  [key=1, style=dashed, color=darkseagreen4, label=json];
m6_613 -> m6_613  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m6_614 -> m6_615  [key=0, style=solid];
m6_614 -> m6_10  [key=2, style=dotted];
m6_614 -> m6_616  [key=1, style=dashed, color=darkseagreen4, label=aa];
m6_614 -> m6_617  [key=1, style=dashed, color=darkseagreen4, label=aa];
m6_614 -> m6_618  [key=1, style=dashed, color=darkseagreen4, label=aa];
m6_614 -> m6_619  [key=1, style=dashed, color=darkseagreen4, label=aa];
m6_614 -> m6_620  [key=1, style=dashed, color=darkseagreen4, label=aa];
m6_614 -> m6_621  [key=1, style=dashed, color=darkseagreen4, label=aa];
m6_614 -> m6_622  [key=1, style=dashed, color=darkseagreen4, label=aa];
m6_623 -> m6_624  [key=0, style=solid];
m6_623 -> m6_9  [key=2, style=dotted];
m6_615 -> m6_616  [key=0, style=solid];
m6_615 -> m6_9  [key=2, style=dotted];
m6_616 -> m6_617  [key=0, style=solid];
m6_616 -> m6_9  [key=2, style=dotted];
m6_617 -> m6_618  [key=0, style=solid];
m6_617 -> m6_585  [key=2, style=dotted];
m6_617 -> m6_9  [key=2, style=dotted];
m6_618 -> m6_619  [key=0, style=solid];
m6_618 -> m6_585  [key=2, style=dotted];
m6_618 -> m6_9  [key=2, style=dotted];
m6_619 -> m6_620  [key=0, style=solid];
m6_619 -> m6_585  [key=2, style=dotted];
m6_619 -> m6_9  [key=2, style=dotted];
m6_620 -> m6_621  [key=0, style=solid];
m6_620 -> m6_9  [key=2, style=dotted];
m6_621 -> m6_622  [key=0, style=solid];
m6_621 -> m6_9  [key=2, style=dotted];
m6_622 -> m6_623  [key=0, style=solid];
m6_622 -> m6_8  [key=2, style=dotted];
m6_624 -> m6_612  [key=0, style=bold, color=blue];
m6_404 -> m6_405  [key=0, style=solid];
m6_405 -> m6_406  [key=0, style=solid];
m6_405 -> m6_29  [key=2, style=dotted];
m6_405 -> m6_407  [key=1, style=dashed, color=darkseagreen4, label=list];
m6_405 -> m6_408  [key=1, style=dashed, color=darkseagreen4, label=list];
m6_406 -> m6_407  [key=0, style=solid];
m6_406 -> m6_230  [key=2, style=dotted];
m6_406 -> m6_37  [key=2, style=dotted];
m6_407 -> m6_408  [key=0, style=solid];
m6_407 -> m6_230  [key=2, style=dotted];
m6_407 -> m6_37  [key=2, style=dotted];
m6_408 -> m6_409  [key=0, style=solid];
m6_408 -> m6_8  [key=2, style=dotted];
m6_408 -> m6_410  [key=1, style=dashed, color=darkseagreen4, label=json];
m6_409 -> m6_410  [key=0, style=solid];
m6_409 -> m6_9  [key=2, style=dotted];
m6_410 -> m6_411  [key=0, style=solid];
m6_410 -> m6_10  [key=2, style=dotted];
m6_410 -> m6_412  [key=1, style=dashed, color=darkseagreen4, label=result];
m6_410 -> m6_413  [key=1, style=dashed, color=darkseagreen4, label=result];
m6_410 -> m6_414  [key=1, style=dashed, color=darkseagreen4, label=result];
m6_410 -> m6_415  [key=1, style=dashed, color=darkseagreen4, label=result];
m6_411 -> m6_412  [key=0, style=solid];
m6_411 -> m6_9  [key=2, style=dotted];
m6_412 -> m6_413  [key=0, style=solid];
m6_412 -> m6_9  [key=2, style=dotted];
m6_413 -> m6_414  [key=0, style=solid];
m6_413 -> m6_9  [key=2, style=dotted];
m6_414 -> m6_415  [key=0, style=solid];
m6_414 -> m6_9  [key=2, style=dotted];
m6_415 -> m6_416  [key=0, style=solid];
m6_415 -> m6_9  [key=2, style=dotted];
m6_416 -> m6_404  [key=0, style=bold, color=blue];
m6_805 -> m6_806  [key=0, style=solid];
m6_806 -> m6_807  [key=0, style=solid];
m6_806 -> m6_816  [key=2, style=dotted];
m6_806 -> m6_809  [key=1, style=dashed, color=darkseagreen4, label=a1];
m6_807 -> m6_808  [key=0, style=solid];
m6_807 -> m6_816  [key=2, style=dotted];
m6_807 -> m6_810  [key=1, style=dashed, color=darkseagreen4, label=a2];
m6_809 -> m6_810  [key=0, style=solid];
m6_809 -> m6_37  [key=2, style=dotted];
m6_808 -> m6_809  [key=0, style=solid];
m6_808 -> m6_817  [key=2, style=dotted];
m6_808 -> m6_810  [key=1, style=dashed, color=darkseagreen4, label=articles1];
m6_808 -> m6_811  [key=1, style=dashed, color=darkseagreen4, label=articles1];
m6_808 -> m6_813  [key=1, style=dashed, color=darkseagreen4, label=articles1];
m6_808 -> m6_814  [key=1, style=dashed, color=darkseagreen4, label=articles1];
m6_810 -> m6_811  [key=0, style=solid];
m6_810 -> m6_37  [key=2, style=dotted];
m6_811 -> m6_812  [key=0, style=solid];
m6_811 -> m6_8  [key=2, style=dotted];
m6_813 -> m6_814  [key=0, style=solid];
m6_813 -> m6_9  [key=2, style=dotted];
m6_814 -> m6_815  [key=0, style=solid];
m6_814 -> m6_9  [key=2, style=dotted];
m6_812 -> m6_813  [key=0, style=solid];
m6_812 -> m6_10  [key=2, style=dotted];
m6_812 -> m6_814  [key=1, style=dashed, color=darkseagreen4, label=articles2];
m6_815 -> m6_805  [key=0, style=bold, color=blue];
m6_58 -> m6_59  [key=0, style=solid];
m6_59 -> m6_60  [key=0, style=solid];
m6_59 -> m6_56  [key=2, style=dotted];
m6_60 -> m6_58  [key=0, style=bold, color=blue];
m6_460 -> m6_461  [key=0, style=solid];
m6_461 -> m6_462  [key=0, style=solid];
m6_461 -> m6_7  [key=2, style=dotted];
m6_462 -> m6_463  [key=0, style=solid];
m6_462 -> m6_189  [key=2, style=dotted];
m6_462 -> m6_464  [key=1, style=dashed, color=darkseagreen4, label=json];
m6_463 -> m6_464  [key=0, style=solid];
m6_463 -> m6_204  [key=2, style=dotted];
m6_464 -> m6_465  [key=0, style=solid];
m6_464 -> m6_10  [key=2, style=dotted];
m6_464 -> m6_466  [key=1, style=dashed, color=darkseagreen4, label=v2];
m6_464 -> m6_467  [key=1, style=dashed, color=darkseagreen4, label=v2];
m6_464 -> m6_468  [key=1, style=dashed, color=darkseagreen4, label=v2];
m6_465 -> m6_466  [key=0, style=solid];
m6_465 -> m6_9  [key=2, style=dotted];
m6_466 -> m6_467  [key=0, style=solid];
m6_466 -> m6_9  [key=2, style=dotted];
m6_467 -> m6_468  [key=0, style=solid];
m6_467 -> m6_9  [key=2, style=dotted];
m6_468 -> m6_469  [key=0, style=solid];
m6_468 -> m6_9  [key=2, style=dotted];
m6_469 -> m6_460  [key=0, style=bold, color=blue];
m6_1015 -> m6_1016  [key=0, style=solid];
m6_1016 -> m6_1017  [key=0, style=solid];
m6_1016 -> m6_1002  [key=2, style=dotted];
m6_1017 -> m6_1015  [key=0, style=bold, color=blue];
m6_632 -> m6_633  [key=0, style=solid];
m6_633 -> m6_634  [key=0, style=solid];
m6_633 -> m6_637  [key=1, style=dashed, color=darkseagreen4, label=json];
m6_633 -> m6_633  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m6_634 -> m6_635  [key=0, style=solid];
m6_634 -> m6_79  [key=2, style=dotted];
m6_634 -> m6_636  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_635 -> m6_632  [key=0, style=bold, color=blue];
m6_825 -> m6_826  [key=0, style=solid];
m6_826 -> m6_827  [key=0, style=solid];
m6_826 -> m6_776  [key=2, style=dotted];
m6_826 -> m6_431  [key=2, style=dotted];
m6_826 -> m6_829  [key=1, style=dashed, color=darkseagreen4, label=p1];
m6_827 -> m6_828  [key=0, style=solid];
m6_827 -> m6_776  [key=2, style=dotted];
m6_827 -> m6_431  [key=2, style=dotted];
m6_827 -> m6_830  [key=1, style=dashed, color=darkseagreen4, label=p2];
m6_829 -> m6_830  [key=0, style=solid];
m6_829 -> m6_37  [key=2, style=dotted];
m6_828 -> m6_829  [key=0, style=solid];
m6_828 -> m6_29  [key=2, style=dotted];
m6_828 -> m6_830  [key=1, style=dashed, color=darkseagreen4, label=products];
m6_828 -> m6_831  [key=1, style=dashed, color=darkseagreen4, label=products];
m6_830 -> m6_831  [key=0, style=solid];
m6_830 -> m6_37  [key=2, style=dotted];
m6_831 -> m6_832  [key=0, style=solid];
m6_831 -> m6_189  [key=2, style=dotted];
m6_832 -> m6_833  [key=0, style=solid];
m6_832 -> m6_204  [key=2, style=dotted];
m6_833 -> m6_825  [key=0, style=bold, color=blue];
m6_40 -> m6_41  [key=0, style=solid];
m6_41 -> m6_40  [key=0, style=bold, color=blue];
m6_56 -> m6_57  [key=0, style=solid];
m6_57 -> m6_56  [key=0, style=bold, color=blue];
m6_30 -> m6_31  [key=0, style=solid];
m6_31 -> m6_32  [key=0, style=solid];
m6_31 -> m6_33  [key=2, style=dotted];
m6_32 -> m6_30  [key=0, style=bold, color=blue];
m6_241 -> m6_242  [key=0, style=solid];
m6_241 -> m6_237  [key=3, color=darkorchid, style=bold, label="method methodReturn System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator"];
m6_242 -> m6_243  [key=0, style=solid];
m6_242 -> m6_237  [key=2, style=dotted];
m6_243 -> m6_241  [key=0, style=bold, color=blue];
m6_143 -> m6_144  [key=0, style=solid];
m6_144 -> m6_145  [key=0, style=solid];
m6_144 -> m6_79  [key=2, style=dotted];
m6_144 -> m6_146  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_145 -> m6_143  [key=0, style=bold, color=blue];
m6_639 -> m6_640  [key=0, style=solid];
m6_640 -> m6_641  [key=0, style=solid];
m6_640 -> m6_644  [key=1, style=dashed, color=darkseagreen4, label=json];
m6_640 -> m6_640  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m6_641 -> m6_642  [key=0, style=solid];
m6_641 -> m6_79  [key=2, style=dotted];
m6_641 -> m6_643  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_642 -> m6_639  [key=0, style=bold, color=blue];
m6_456 -> m6_457  [key=0, style=solid];
m6_457 -> m6_458  [key=0, style=solid];
m6_457 -> m6_10  [key=2, style=dotted];
m6_458 -> m6_459  [key=0, style=solid];
m6_458 -> m6_9  [key=2, style=dotted];
m6_459 -> m6_456  [key=0, style=bold, color=blue];
m6_272 -> m6_273  [key=0, style=solid];
m6_273 -> m6_274  [key=0, style=solid];
m6_273 -> m6_79  [key=2, style=dotted];
m6_273 -> m6_279  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_274 -> m6_275  [key=0, style=solid];
m6_274 -> m6_277  [key=2, style=dotted];
m6_274 -> m6_278  [key=2, style=dotted];
m6_275 -> m6_276  [key=0, style=solid];
m6_275 -> m6_9  [key=2, style=dotted];
m6_276 -> m6_272  [key=0, style=bold, color=blue];
m6_899 -> m6_900  [key=0, style=solid];
m6_900 -> m6_901  [key=0, style=solid];
m6_900 -> m6_902  [key=2, style=dotted];
m6_901 -> m6_899  [key=0, style=bold, color=blue];
m6_263 -> m6_264  [key=0, style=solid];
m6_264 -> m6_265  [key=0, style=solid];
m6_264 -> m6_268  [key=1, style=dashed, color=darkseagreen4, label=json];
m6_264 -> m6_264  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m6_265 -> m6_266  [key=0, style=solid];
m6_265 -> m6_79  [key=2, style=dotted];
m6_265 -> m6_267  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_266 -> m6_263  [key=0, style=bold, color=blue];
m6_547 -> m6_548  [key=0, style=solid];
m6_548 -> m6_549  [key=0, style=solid];
m6_548 -> m6_555  [key=2, style=dotted];
m6_548 -> m6_550  [key=1, style=dashed, color=darkseagreen4, label=aa];
m6_548 -> m6_551  [key=1, style=dashed, color=darkseagreen4, label=aa];
m6_548 -> m6_552  [key=1, style=dashed, color=darkseagreen4, label=aa];
m6_549 -> m6_550  [key=0, style=solid];
m6_550 -> m6_551  [key=0, style=solid];
m6_551 -> m6_552  [key=0, style=solid];
m6_552 -> m6_553  [key=0, style=solid];
m6_552 -> m6_8  [key=2, style=dotted];
m6_553 -> m6_554  [key=0, style=solid];
m6_553 -> m6_9  [key=2, style=dotted];
m6_554 -> m6_547  [key=0, style=bold, color=blue];
m6_346 -> m6_347  [key=0, style=solid];
m6_347 -> m6_348  [key=0, style=solid];
m6_347 -> m6_349  [key=2, style=dotted];
m6_348 -> m6_346  [key=0, style=bold, color=blue];
m6_360 -> m6_361  [key=0, style=solid];
m6_361 -> m6_362  [key=0, style=solid];
m6_361 -> m6_7  [key=2, style=dotted];
m6_362 -> m6_363  [key=0, style=solid];
m6_362 -> m6_343  [key=2, style=dotted];
m6_363 -> m6_364  [key=0, style=solid];
m6_363 -> m6_189  [key=2, style=dotted];
m6_364 -> m6_365  [key=0, style=solid];
m6_364 -> m6_204  [key=2, style=dotted];
m6_365 -> m6_360  [key=0, style=bold, color=blue];
m6_129 -> m6_130  [key=0, style=solid];
m6_130 -> m6_131  [key=0, style=solid];
m6_130 -> m6_126  [key=2, style=dotted];
m6_130 -> m6_132  [key=1, style=dashed, color=darkseagreen4, label=c1];
m6_130 -> m6_133  [key=1, style=dashed, color=darkseagreen4, label=c1];
m6_130 -> m6_134  [key=1, style=dashed, color=darkseagreen4, label=c1];
m6_131 -> m6_132  [key=0, style=solid];
m6_131 -> m6_123  [key=2, style=dotted];
m6_132 -> m6_133  [key=0, style=solid];
m6_132 -> m6_123  [key=2, style=dotted];
m6_133 -> m6_134  [key=0, style=solid];
m6_133 -> m6_123  [key=2, style=dotted];
m6_134 -> m6_135  [key=0, style=solid];
m6_134 -> m6_8  [key=2, style=dotted];
m6_135 -> m6_136  [key=0, style=solid];
m6_135 -> m6_10  [key=2, style=dotted];
m6_135 -> m6_137  [key=1, style=dashed, color=darkseagreen4, label=c2];
m6_135 -> m6_138  [key=1, style=dashed, color=darkseagreen4, label=c2];
m6_135 -> m6_139  [key=1, style=dashed, color=darkseagreen4, label=c2];
m6_136 -> m6_137  [key=0, style=solid];
m6_136 -> m6_9  [key=2, style=dotted];
m6_137 -> m6_138  [key=0, style=solid];
m6_137 -> m6_9  [key=2, style=dotted];
m6_138 -> m6_139  [key=0, style=solid];
m6_138 -> m6_9  [key=2, style=dotted];
m6_139 -> m6_140  [key=0, style=solid];
m6_139 -> m6_9  [key=2, style=dotted];
m6_140 -> m6_129  [key=0, style=bold, color=blue];
m6_556 -> m6_557  [key=0, style=solid];
m6_557 -> m6_558  [key=0, style=solid];
m6_557 -> m6_564  [key=2, style=dotted];
m6_557 -> m6_559  [key=1, style=dashed, color=darkseagreen4, label=aa];
m6_557 -> m6_560  [key=1, style=dashed, color=darkseagreen4, label=aa];
m6_557 -> m6_561  [key=1, style=dashed, color=darkseagreen4, label=aa];
m6_558 -> m6_559  [key=0, style=solid];
m6_559 -> m6_560  [key=0, style=solid];
m6_560 -> m6_561  [key=0, style=solid];
m6_561 -> m6_562  [key=0, style=solid];
m6_561 -> m6_8  [key=2, style=dotted];
m6_562 -> m6_563  [key=0, style=solid];
m6_562 -> m6_9  [key=2, style=dotted];
m6_563 -> m6_556  [key=0, style=bold, color=blue];
m6_167 -> m6_168  [key=0, style=solid];
m6_168 -> m6_169  [key=0, style=solid];
m6_168 -> m6_79  [key=2, style=dotted];
m6_168 -> m6_170  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_169 -> m6_167  [key=0, style=bold, color=blue];
m6_903 -> m6_904  [key=0, style=solid];
m6_904 -> m6_905  [key=0, style=solid];
m6_904 -> m6_906  [key=2, style=dotted];
m6_905 -> m6_903  [key=0, style=bold, color=blue];
m6_1044 -> m6_1045  [key=0, style=solid];
m6_1045 -> m6_1046  [key=0, style=solid];
m6_1045 -> m6_1047  [key=2, style=dotted];
m6_1046 -> m6_1044  [key=0, style=bold, color=blue];
m6_322 -> m6_323  [key=0, style=solid];
m6_323 -> m6_324  [key=0, style=solid];
m6_323 -> m6_10  [key=2, style=dotted];
m6_323 -> m6_325  [key=1, style=dashed, color=darkseagreen4, label=list];
m6_323 -> m6_326  [key=1, style=dashed, color=darkseagreen4, label=list];
m6_323 -> m6_327  [key=1, style=dashed, color=darkseagreen4, label=list];
m6_324 -> m6_325  [key=0, style=solid];
m6_324 -> m6_9  [key=2, style=dotted];
m6_325 -> m6_326  [key=0, style=solid];
m6_325 -> m6_9  [key=2, style=dotted];
m6_326 -> m6_327  [key=0, style=solid];
m6_326 -> m6_9  [key=2, style=dotted];
m6_327 -> m6_328  [key=0, style=solid];
m6_327 -> m6_9  [key=2, style=dotted];
m6_328 -> m6_322  [key=0, style=bold, color=blue];
m6_26 -> m6_27  [key=0, style=solid, color=green];
m6_27 -> m6_28  [key=0, style=solid, color=green];
m6_27 -> m6_29  [key=2, style=dotted, color=green];
m6_28 -> m6_26  [key=0, style=bold, color=blue];
m6_855 -> m6_856  [key=0, style=solid];
m6_856 -> m6_857  [key=0, style=solid];
m6_856 -> m6_860  [key=2, style=dotted];
m6_857 -> m6_858  [key=0, style=solid];
m6_857 -> m6_8  [key=2, style=dotted];
m6_857 -> m6_862  [key=1, style=dashed, color=darkseagreen4, label=json];
m6_858 -> m6_859  [key=0, style=solid];
m6_858 -> m6_79  [key=2, style=dotted];
m6_858 -> m6_861  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_859 -> m6_855  [key=0, style=bold, color=blue];
m6_369 -> m6_370  [key=0, style=solid];
m6_370 -> m6_371  [key=0, style=solid];
m6_370 -> m6_240  [key=2, style=dotted];
m6_371 -> m6_369  [key=0, style=bold, color=blue];
m6_234 -> m6_235  [key=0, style=solid];
m6_235 -> m6_236  [key=0, style=solid];
m6_235 -> m6_33  [key=2, style=dotted];
m6_236 -> m6_234  [key=0, style=bold, color=blue];
m6_151 -> m6_152  [key=0, style=solid];
m6_152 -> m6_153  [key=0, style=solid];
m6_152 -> m6_79  [key=2, style=dotted];
m6_152 -> m6_154  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_153 -> m6_151  [key=0, style=bold, color=blue];
m6_878 -> m6_879  [key=0, style=solid];
m6_879 -> m6_880  [key=0, style=solid];
m6_879 -> m6_33  [key=2, style=dotted];
m6_880 -> m6_878  [key=0, style=bold, color=blue];
m6_451 -> m6_452  [key=0, style=solid];
m6_452 -> m6_453  [key=0, style=solid];
m6_452 -> m6_10  [key=2, style=dotted];
m6_452 -> m6_454  [key=1, style=dashed, color=darkseagreen4, label=dictionary];
m6_453 -> m6_454  [key=0, style=solid];
m6_453 -> m6_9  [key=2, style=dotted];
m6_454 -> m6_455  [key=0, style=solid];
m6_454 -> m6_9  [key=2, style=dotted];
m6_455 -> m6_451  [key=0, style=bold, color=blue];
m6_42 -> m6_43  [key=0, style=solid];
m6_43 -> m6_44  [key=0, style=solid];
m6_43 -> m6_26  [key=2, style=dotted];
m6_43 -> m6_45  [key=1, style=dashed, color=darkseagreen4, label=c1];
m6_43 -> m6_46  [key=1, style=dashed, color=darkseagreen4, label=c1];
m6_43 -> m6_47  [key=1, style=dashed, color=darkseagreen4, label=c1];
m6_44 -> m6_45  [key=0, style=solid];
m6_44 -> m6_34  [key=2, style=dotted];
m6_45 -> m6_46  [key=0, style=solid];
m6_45 -> m6_34  [key=2, style=dotted];
m6_46 -> m6_47  [key=0, style=solid];
m6_46 -> m6_34  [key=2, style=dotted];
m6_47 -> m6_48  [key=0, style=solid];
m6_47 -> m6_8  [key=2, style=dotted];
m6_48 -> m6_49  [key=0, style=solid];
m6_48 -> m6_10  [key=2, style=dotted];
m6_49 -> m6_50  [key=0, style=solid];
m6_49 -> m6_55  [key=2, style=dotted];
m6_49 -> m6_51  [key=1, style=dashed, color=darkseagreen4, label=values];
m6_49 -> m6_52  [key=1, style=dashed, color=darkseagreen4, label=values];
m6_49 -> m6_53  [key=1, style=dashed, color=darkseagreen4, label=values];
m6_50 -> m6_51  [key=0, style=solid];
m6_50 -> m6_9  [key=2, style=dotted];
m6_51 -> m6_52  [key=0, style=solid];
m6_51 -> m6_9  [key=2, style=dotted];
m6_52 -> m6_53  [key=0, style=solid];
m6_52 -> m6_9  [key=2, style=dotted];
m6_53 -> m6_54  [key=0, style=solid];
m6_53 -> m6_9  [key=2, style=dotted];
m6_54 -> m6_42  [key=0, style=bold, color=blue];
m6_785 -> m6_786  [key=0, style=solid];
m6_786 -> m6_787  [key=0, style=solid];
m6_787 -> m6_788  [key=0, style=solid];
m6_787 -> m6_800  [key=2, style=dotted];
m6_787 -> m6_789  [key=1, style=dashed, color=darkseagreen4, label=foo1];
m6_788 -> m6_789  [key=0, style=solid];
m6_788 -> m6_801  [key=2, style=dotted];
m6_788 -> m6_802  [key=2, style=dotted];
m6_789 -> m6_790  [key=0, style=solid];
m6_789 -> m6_8  [key=2, style=dotted];
m6_790 -> m6_791  [key=0, style=solid];
m6_790 -> m6_9  [key=2, style=dotted];
m6_791 -> m6_792  [key=0, style=solid];
m6_791 -> m6_800  [key=2, style=dotted];
m6_791 -> m6_793  [key=1, style=dashed, color=darkseagreen4, label=foo2];
m6_792 -> m6_793  [key=0, style=solid];
m6_792 -> m6_803  [key=2, style=dotted];
m6_792 -> m6_802  [key=2, style=dotted];
m6_793 -> m6_794  [key=0, style=solid];
m6_793 -> m6_8  [key=2, style=dotted];
m6_794 -> m6_795  [key=0, style=solid];
m6_794 -> m6_9  [key=2, style=dotted];
m6_795 -> m6_796  [key=0, style=solid];
m6_795 -> m6_804  [key=2, style=dotted];
m6_795 -> m6_797  [key=1, style=dashed, color=darkseagreen4, label=foo3];
m6_796 -> m6_797  [key=0, style=solid];
m6_796 -> m6_803  [key=2, style=dotted];
m6_796 -> m6_802  [key=2, style=dotted];
m6_797 -> m6_798  [key=0, style=solid];
m6_797 -> m6_8  [key=2, style=dotted];
m6_798 -> m6_799  [key=0, style=solid];
m6_798 -> m6_9  [key=2, style=dotted];
m6_799 -> m6_785  [key=0, style=bold, color=blue];
m6_869 -> m6_870  [key=0, style=solid];
m6_870 -> m6_871  [key=0, style=solid];
m6_870 -> m6_10  [key=2, style=dotted];
m6_870 -> m6_872  [key=1, style=dashed, color=darkseagreen4, label=deserialized];
m6_870 -> m6_873  [key=1, style=dashed, color=darkseagreen4, label=deserialized];
m6_871 -> m6_872  [key=0, style=solid];
m6_871 -> m6_9  [key=2, style=dotted];
m6_872 -> m6_873  [key=0, style=solid];
m6_872 -> m6_9  [key=2, style=dotted];
m6_873 -> m6_874  [key=0, style=solid];
m6_873 -> m6_9  [key=2, style=dotted];
m6_874 -> m6_869  [key=0, style=bold, color=blue];
m6_729 -> m6_730  [key=0, style=solid];
m6_730 -> m6_731  [key=0, style=solid];
m6_730 -> m6_730  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m6_731 -> m6_732  [key=0, style=solid];
m6_731 -> m6_10  [key=2, style=dotted];
m6_731 -> m6_733  [key=1, style=dashed, color=darkseagreen4, label=o];
m6_731 -> m6_734  [key=1, style=dashed, color=darkseagreen4, label=o];
m6_731 -> m6_735  [key=1, style=dashed, color=darkseagreen4, label=o];
m6_731 -> m6_736  [key=1, style=dashed, color=darkseagreen4, label=o];
m6_731 -> m6_737  [key=1, style=dashed, color=darkseagreen4, label=o];
m6_731 -> m6_738  [key=1, style=dashed, color=darkseagreen4, label=o];
m6_731 -> m6_739  [key=1, style=dashed, color=darkseagreen4, label=o];
m6_731 -> m6_740  [key=1, style=dashed, color=darkseagreen4, label=o];
m6_732 -> m6_733  [key=0, style=solid];
m6_732 -> m6_9  [key=2, style=dotted];
m6_733 -> m6_734  [key=0, style=solid];
m6_733 -> m6_9  [key=2, style=dotted];
m6_734 -> m6_735  [key=0, style=solid];
m6_734 -> m6_9  [key=2, style=dotted];
m6_735 -> m6_736  [key=0, style=solid];
m6_735 -> m6_9  [key=2, style=dotted];
m6_736 -> m6_737  [key=0, style=solid];
m6_736 -> m6_336  [key=2, style=dotted];
m6_737 -> m6_738  [key=0, style=solid];
m6_737 -> m6_9  [key=2, style=dotted];
m6_738 -> m6_739  [key=0, style=solid];
m6_738 -> m6_336  [key=2, style=dotted];
m6_739 -> m6_740  [key=0, style=solid];
m6_739 -> m6_9  [key=2, style=dotted];
m6_740 -> m6_741  [key=0, style=solid];
m6_740 -> m6_9  [key=2, style=dotted];
m6_741 -> m6_729  [key=0, style=bold, color=blue];
m6_996 -> m6_997  [key=0, style=solid];
m6_997 -> m6_998  [key=0, style=solid];
m6_997 -> m6_240  [key=2, style=dotted];
m6_998 -> m6_996  [key=0, style=bold, color=blue];
m6_896 -> m6_897  [key=0, style=solid];
m6_897 -> m6_898  [key=0, style=solid];
m6_897 -> m6_240  [key=2, style=dotted];
m6_898 -> m6_896  [key=0, style=bold, color=blue];
m6_12 -> m6_13  [key=0, style=solid, color=green];
m6_13 -> m6_14  [key=0, style=solid, color=green];
m6_13 -> m6_7  [key=2, style=dotted, color=green];
m6_14 -> m6_15  [key=0, style=solid, color=green];
m6_14 -> m6_8  [key=2, style=dotted, color=green];
m6_14 -> m6_16  [key=1, style=dashed, color=green, label=output];
m6_15 -> m6_16  [key=0, style=solid, color=green];
m6_15 -> m6_9  [key=2, style=dotted, color=green];
m6_16 -> m6_17  [key=0, style=solid, color=green];
m6_16 -> m6_10  [key=2, style=dotted, color=green];
m6_17 -> m6_18  [key=0, style=solid, color=green];
m6_17 -> m6_11  [key=2, style=dotted, color=green];
m6_17 -> m6_9  [key=2, style=dotted, color=green];
m6_18 -> m6_12  [key=0, style=bold, color=blue];
m6_111 -> m6_112  [key=0, style=solid];
m6_112 -> m6_113  [key=0, style=solid];
m6_112 -> m6_101  [key=2, style=dotted];
m6_112 -> m6_114  [key=1, style=dashed, color=darkseagreen4, label=c1];
m6_112 -> m6_115  [key=1, style=dashed, color=darkseagreen4, label=c1];
m6_112 -> m6_116  [key=1, style=dashed, color=darkseagreen4, label=c1];
m6_113 -> m6_114  [key=0, style=solid];
m6_113 -> m6_123  [key=2, style=dotted];
m6_114 -> m6_115  [key=0, style=solid];
m6_114 -> m6_123  [key=2, style=dotted];
m6_115 -> m6_116  [key=0, style=solid];
m6_115 -> m6_123  [key=2, style=dotted];
m6_116 -> m6_117  [key=0, style=solid];
m6_116 -> m6_8  [key=2, style=dotted];
m6_117 -> m6_118  [key=0, style=solid];
m6_117 -> m6_10  [key=2, style=dotted];
m6_117 -> m6_119  [key=1, style=dashed, color=darkseagreen4, label=c2];
m6_117 -> m6_120  [key=1, style=dashed, color=darkseagreen4, label=c2];
m6_117 -> m6_121  [key=1, style=dashed, color=darkseagreen4, label=c2];
m6_118 -> m6_119  [key=0, style=solid];
m6_118 -> m6_9  [key=2, style=dotted];
m6_119 -> m6_120  [key=0, style=solid];
m6_119 -> m6_9  [key=2, style=dotted];
m6_120 -> m6_121  [key=0, style=solid];
m6_120 -> m6_9  [key=2, style=dotted];
m6_121 -> m6_122  [key=0, style=solid];
m6_121 -> m6_9  [key=2, style=dotted];
m6_122 -> m6_111  [key=0, style=bold, color=blue];
m6_244 -> m6_245  [key=0, style=solid];
m6_245 -> m6_246  [key=0, style=solid];
m6_245 -> m6_245  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m6_246 -> m6_247  [key=0, style=solid];
m6_246 -> m6_10  [key=2, style=dotted];
m6_246 -> m6_248  [key=1, style=dashed, color=darkseagreen4, label=result];
m6_246 -> m6_249  [key=1, style=dashed, color=darkseagreen4, label=result];
m6_246 -> m6_250  [key=1, style=dashed, color=darkseagreen4, label=result];
m6_247 -> m6_248  [key=0, style=solid];
m6_247 -> m6_252  [key=2, style=dotted];
m6_247 -> m6_9  [key=2, style=dotted];
m6_248 -> m6_249  [key=0, style=solid];
m6_248 -> m6_253  [key=2, style=dotted];
m6_248 -> m6_9  [key=2, style=dotted];
m6_249 -> m6_250  [key=0, style=solid];
m6_249 -> m6_253  [key=2, style=dotted];
m6_249 -> m6_9  [key=2, style=dotted];
m6_250 -> m6_251  [key=0, style=solid];
m6_250 -> m6_253  [key=2, style=dotted];
m6_250 -> m6_9  [key=2, style=dotted];
m6_251 -> m6_244  [key=0, style=bold, color=blue];
m6_586 -> m6_587  [key=0, style=solid];
m6_587 -> m6_588  [key=0, style=solid];
m6_587 -> m6_596  [key=1, style=dashed, color=darkseagreen4, label=json];
m6_587 -> m6_587  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m6_588 -> m6_589  [key=0, style=solid];
m6_588 -> m6_10  [key=2, style=dotted];
m6_588 -> m6_590  [key=1, style=dashed, color=darkseagreen4, label=aa];
m6_588 -> m6_591  [key=1, style=dashed, color=darkseagreen4, label=aa];
m6_588 -> m6_592  [key=1, style=dashed, color=darkseagreen4, label=aa];
m6_588 -> m6_593  [key=1, style=dashed, color=darkseagreen4, label=aa];
m6_588 -> m6_594  [key=1, style=dashed, color=darkseagreen4, label=aa];
m6_588 -> m6_595  [key=1, style=dashed, color=darkseagreen4, label=aa];
m6_596 -> m6_597  [key=0, style=solid];
m6_596 -> m6_9  [key=2, style=dotted];
m6_589 -> m6_590  [key=0, style=solid];
m6_589 -> m6_9  [key=2, style=dotted];
m6_590 -> m6_591  [key=0, style=solid];
m6_590 -> m6_9  [key=2, style=dotted];
m6_591 -> m6_592  [key=0, style=solid];
m6_591 -> m6_585  [key=2, style=dotted];
m6_591 -> m6_9  [key=2, style=dotted];
m6_592 -> m6_593  [key=0, style=solid];
m6_592 -> m6_585  [key=2, style=dotted];
m6_592 -> m6_9  [key=2, style=dotted];
m6_593 -> m6_594  [key=0, style=solid];
m6_593 -> m6_9  [key=2, style=dotted];
m6_594 -> m6_595  [key=0, style=solid];
m6_594 -> m6_9  [key=2, style=dotted];
m6_595 -> m6_596  [key=0, style=solid];
m6_595 -> m6_8  [key=2, style=dotted];
m6_597 -> m6_586  [key=0, style=bold, color=blue];
m6_800 -> m6_1033  [key=0, style=solid];
m6_1033 -> m6_1034  [key=0, style=solid];
m6_1033 -> m6_29  [key=2, style=dotted];
m6_1034 -> m6_800  [key=0, style=bold, color=blue];
m6_372 -> m6_373  [key=0, style=solid];
m6_373 -> m6_374  [key=0, style=solid];
m6_373 -> m6_240  [key=2, style=dotted];
m6_374 -> m6_372  [key=0, style=bold, color=blue];
m6_315 -> m6_316  [key=0, style=solid];
m6_316 -> m6_317  [key=0, style=solid];
m6_316 -> m6_10  [key=2, style=dotted];
m6_316 -> m6_318  [key=1, style=dashed, color=darkseagreen4, label=list];
m6_316 -> m6_319  [key=1, style=dashed, color=darkseagreen4, label=list];
m6_316 -> m6_320  [key=1, style=dashed, color=darkseagreen4, label=list];
m6_317 -> m6_318  [key=0, style=solid];
m6_317 -> m6_9  [key=2, style=dotted];
m6_318 -> m6_319  [key=0, style=solid];
m6_318 -> m6_253  [key=2, style=dotted];
m6_318 -> m6_9  [key=2, style=dotted];
m6_319 -> m6_320  [key=0, style=solid];
m6_319 -> m6_253  [key=2, style=dotted];
m6_319 -> m6_9  [key=2, style=dotted];
m6_320 -> m6_321  [key=0, style=solid];
m6_320 -> m6_253  [key=2, style=dotted];
m6_320 -> m6_9  [key=2, style=dotted];
m6_321 -> m6_315  [key=0, style=bold, color=blue];
m6_149 -> m6_150  [key=0, style=solid];
m6_150 -> m6_149  [key=0, style=bold, color=blue];
m6_433 -> m6_434  [key=0, style=solid];
m6_434 -> m6_435  [key=0, style=solid];
m6_434 -> m6_441  [key=2, style=dotted];
m6_434 -> m6_436  [key=1, style=dashed, color=darkseagreen4, label=p];
m6_434 -> m6_437  [key=1, style=dashed, color=darkseagreen4, label=p];
m6_434 -> m6_438  [key=1, style=dashed, color=darkseagreen4, label=p];
m6_434 -> m6_439  [key=1, style=dashed, color=darkseagreen4, label=p];
m6_435 -> m6_436  [key=0, style=solid];
m6_435 -> m6_29  [key=2, style=dotted];
m6_436 -> m6_437  [key=0, style=solid];
m6_436 -> m6_277  [key=2, style=dotted];
m6_436 -> m6_29  [key=2, style=dotted];
m6_436 -> m6_442  [key=2, style=dotted];
m6_436 -> m6_443  [key=2, style=dotted];
m6_437 -> m6_438  [key=0, style=solid];
m6_437 -> m6_9  [key=2, style=dotted];
m6_438 -> m6_439  [key=0, style=solid];
m6_438 -> m6_9  [key=2, style=dotted];
m6_439 -> m6_440  [key=0, style=solid];
m6_439 -> m6_9  [key=2, style=dotted];
m6_440 -> m6_433  [key=0, style=bold, color=blue];
m6_444 -> m6_445  [key=0, style=solid];
m6_445 -> m6_446  [key=0, style=solid];
m6_445 -> m6_441  [key=2, style=dotted];
m6_445 -> m6_447  [key=1, style=dashed, color=darkseagreen4, label=p];
m6_445 -> m6_448  [key=1, style=dashed, color=darkseagreen4, label=p];
m6_446 -> m6_447  [key=0, style=solid];
m6_447 -> m6_448  [key=0, style=solid];
m6_447 -> m6_277  [key=2, style=dotted];
m6_447 -> m6_29  [key=2, style=dotted];
m6_447 -> m6_450  [key=2, style=dotted];
m6_447 -> m6_443  [key=2, style=dotted];
m6_448 -> m6_449  [key=0, style=solid];
m6_448 -> m6_9  [key=2, style=dotted];
m6_449 -> m6_444  [key=0, style=bold, color=blue];
m6_708 -> m6_709  [key=0, style=solid];
m6_709 -> m6_710  [key=0, style=solid];
m6_709 -> m6_706  [key=2, style=dotted];
m6_710 -> m6_711  [key=0, style=solid];
m6_711 -> m6_712  [key=0, style=solid];
m6_711 -> m6_29  [key=2, style=dotted];
m6_712 -> m6_713  [key=0, style=solid];
m6_712 -> m6_277  [key=2, style=dotted];
m6_712 -> m6_707  [key=2, style=dotted];
m6_712 -> m6_714  [key=1, style=dashed, color=darkseagreen4, label=json];
m6_713 -> m6_714  [key=0, style=solid];
m6_713 -> m6_718  [key=2, style=dotted];
m6_713 -> m6_204  [key=2, style=dotted];
m6_714 -> m6_715  [key=0, style=solid];
m6_714 -> m6_277  [key=2, style=dotted];
m6_714 -> m6_719  [key=2, style=dotted];
m6_714 -> m6_716  [key=1, style=dashed, color=darkseagreen4, label=values2];
m6_715 -> m6_716  [key=0, style=solid];
m6_715 -> m6_9  [key=2, style=dotted];
m6_716 -> m6_717  [key=0, style=solid];
m6_716 -> m6_9  [key=2, style=dotted];
m6_717 -> m6_708  [key=0, style=bold, color=blue];
m6_159 -> m6_160  [key=0, style=solid];
m6_160 -> m6_161  [key=0, style=solid];
m6_160 -> m6_160  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m6_161 -> m6_162  [key=0, style=solid];
m6_161 -> m6_10  [key=2, style=dotted];
m6_161 -> m6_163  [key=1, style=dashed, color=darkseagreen4, label=d];
m6_161 -> m6_164  [key=1, style=dashed, color=darkseagreen4, label=d];
m6_161 -> m6_165  [key=1, style=dashed, color=darkseagreen4, label=d];
m6_162 -> m6_163  [key=0, style=solid];
m6_162 -> m6_9  [key=2, style=dotted];
m6_163 -> m6_164  [key=0, style=solid];
m6_163 -> m6_9  [key=2, style=dotted];
m6_164 -> m6_165  [key=0, style=solid];
m6_164 -> m6_9  [key=2, style=dotted];
m6_165 -> m6_166  [key=0, style=solid];
m6_165 -> m6_9  [key=2, style=dotted];
m6_166 -> m6_159  [key=0, style=bold, color=blue];
m6_1012 -> m6_1013  [key=0, style=solid];
m6_1013 -> m6_1014  [key=0, style=solid];
m6_1013 -> m6_1002  [key=2, style=dotted];
m6_1014 -> m6_1012  [key=0, style=bold, color=blue];
m6_61 -> m6_62  [key=0, style=solid];
m6_62 -> m6_63  [key=0, style=solid];
m6_62 -> m6_58  [key=2, style=dotted];
m6_62 -> m6_64  [key=1, style=dashed, color=darkseagreen4, label=c1];
m6_62 -> m6_65  [key=1, style=dashed, color=darkseagreen4, label=c1];
m6_62 -> m6_66  [key=1, style=dashed, color=darkseagreen4, label=c1];
m6_63 -> m6_64  [key=0, style=solid];
m6_63 -> m6_37  [key=2, style=dotted];
m6_64 -> m6_65  [key=0, style=solid];
m6_64 -> m6_37  [key=2, style=dotted];
m6_65 -> m6_66  [key=0, style=solid];
m6_65 -> m6_37  [key=2, style=dotted];
m6_66 -> m6_67  [key=0, style=solid];
m6_66 -> m6_8  [key=2, style=dotted];
m6_67 -> m6_68  [key=0, style=solid];
m6_67 -> m6_10  [key=2, style=dotted];
m6_68 -> m6_69  [key=0, style=solid];
m6_68 -> m6_55  [key=2, style=dotted];
m6_68 -> m6_70  [key=1, style=dashed, color=darkseagreen4, label=values];
m6_68 -> m6_71  [key=1, style=dashed, color=darkseagreen4, label=values];
m6_68 -> m6_72  [key=1, style=dashed, color=darkseagreen4, label=values];
m6_69 -> m6_70  [key=0, style=solid];
m6_69 -> m6_9  [key=2, style=dotted];
m6_70 -> m6_71  [key=0, style=solid];
m6_70 -> m6_9  [key=2, style=dotted];
m6_71 -> m6_72  [key=0, style=solid];
m6_71 -> m6_9  [key=2, style=dotted];
m6_72 -> m6_73  [key=0, style=solid];
m6_72 -> m6_9  [key=2, style=dotted];
m6_73 -> m6_61  [key=0, style=bold, color=blue];
m6_765 -> m6_766  [key=0, style=solid];
m6_766 -> m6_767  [key=0, style=solid];
m6_766 -> m6_775  [key=2, style=dotted];
m6_766 -> m6_776  [key=2, style=dotted];
m6_766 -> m6_770  [key=1, style=dashed, color=darkseagreen4, label=collection];
m6_766 -> m6_773  [key=1, style=dashed, color=darkseagreen4, label=collection];
m6_767 -> m6_768  [key=0, style=solid];
m6_767 -> m6_777  [key=2, style=dotted];
m6_767 -> m6_770  [key=1, style=dashed, color=darkseagreen4, label=jsonSerializer];
m6_767 -> m6_772  [key=1, style=dashed, color=darkseagreen4, label=jsonSerializer];
m6_770 -> m6_771  [key=0, style=solid];
m6_770 -> m6_779  [key=2, style=dotted];
m6_773 -> m6_774  [key=0, style=solid];
m6_773 -> m6_9  [key=2, style=dotted];
m6_768 -> m6_769  [key=0, style=solid];
m6_772 -> m6_773  [key=0, style=solid];
m6_772 -> m6_782  [key=2, style=dotted];
m6_772 -> m6_783  [key=2, style=dotted];
m6_772 -> m6_780  [key=2, style=dotted];
m6_772 -> m6_781  [key=2, style=dotted];
m6_772 -> m6_784  [key=2, style=dotted];
m6_769 -> m6_770  [key=0, style=solid];
m6_769 -> m6_778  [key=2, style=dotted];
m6_769 -> m6_771  [key=1, style=dashed, color=darkseagreen4, label=sw];
m6_769 -> m6_772  [key=1, style=dashed, color=darkseagreen4, label=sw];
m6_771 -> m6_772  [key=0, style=solid];
m6_771 -> m6_780  [key=2, style=dotted];
m6_771 -> m6_781  [key=2, style=dotted];
m6_771 -> m6_9  [key=2, style=dotted];
m6_774 -> m6_765  [key=0, style=bold, color=blue];
m6_357 -> m6_358  [key=0, style=solid];
m6_358 -> m6_359  [key=0, style=solid];
m6_358 -> m6_240  [key=2, style=dotted];
m6_359 -> m6_357  [key=0, style=bold, color=blue];
m6_1006 -> m6_1007  [key=0, style=solid];
m6_1007 -> m6_1008  [key=0, style=solid];
m6_1007 -> m6_1002  [key=2, style=dotted];
m6_1008 -> m6_1006  [key=0, style=bold, color=blue];
m6_646 -> m6_647  [key=0, style=solid];
m6_647 -> m6_648  [key=0, style=solid];
m6_647 -> m6_564  [key=2, style=dotted];
m6_647 -> m6_649  [key=1, style=dashed, color=darkseagreen4, label=aa];
m6_647 -> m6_650  [key=1, style=dashed, color=darkseagreen4, label=aa];
m6_647 -> m6_651  [key=1, style=dashed, color=darkseagreen4, label=aa];
m6_648 -> m6_649  [key=0, style=solid];
m6_649 -> m6_650  [key=0, style=solid];
m6_650 -> m6_651  [key=0, style=solid];
m6_651 -> m6_652  [key=0, style=solid];
m6_651 -> m6_8  [key=2, style=dotted];
m6_652 -> m6_653  [key=0, style=solid];
m6_652 -> m6_9  [key=2, style=dotted];
m6_653 -> m6_646  [key=0, style=bold, color=blue];
m6_19 -> m6_20  [key=0, style=solid, color=green];
m6_20 -> m6_21  [key=0, style=solid, color=green];
m6_20 -> m6_7  [key=2, style=dotted, color=green];
m6_21 -> m6_22  [key=0, style=solid, color=green];
m6_21 -> m6_8  [key=2, style=dotted, color=green];
m6_21 -> m6_23  [key=1, style=dashed, color=green, label=output];
m6_22 -> m6_23  [key=0, style=solid, color=green];
m6_22 -> m6_9  [key=2, style=dotted, color=green];
m6_23 -> m6_24  [key=0, style=solid, color=green];
m6_23 -> m6_10  [key=2, style=dotted, color=green];
m6_24 -> m6_25  [key=0, style=solid, color=green];
m6_24 -> m6_11  [key=2, style=dotted, color=green];
m6_24 -> m6_9  [key=2, style=dotted, color=green];
m6_25 -> m6_19  [key=0, style=bold, color=blue];
m6_574 -> m6_575  [key=0, style=solid];
m6_575 -> m6_576  [key=0, style=solid];
m6_575 -> m6_571  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m6_576 -> m6_577  [key=0, style=solid];
m6_576 -> m6_10  [key=2, style=dotted];
m6_576 -> m6_578  [key=1, style=dashed, color=darkseagreen4, label=aa];
m6_576 -> m6_579  [key=1, style=dashed, color=darkseagreen4, label=aa];
m6_576 -> m6_580  [key=1, style=dashed, color=darkseagreen4, label=aa];
m6_576 -> m6_581  [key=1, style=dashed, color=darkseagreen4, label=aa];
m6_576 -> m6_582  [key=1, style=dashed, color=darkseagreen4, label=aa];
m6_576 -> m6_583  [key=1, style=dashed, color=darkseagreen4, label=aa];
m6_577 -> m6_578  [key=0, style=solid];
m6_577 -> m6_9  [key=2, style=dotted];
m6_578 -> m6_579  [key=0, style=solid];
m6_578 -> m6_9  [key=2, style=dotted];
m6_579 -> m6_580  [key=0, style=solid];
m6_579 -> m6_585  [key=2, style=dotted];
m6_579 -> m6_9  [key=2, style=dotted];
m6_580 -> m6_581  [key=0, style=solid];
m6_580 -> m6_585  [key=2, style=dotted];
m6_580 -> m6_9  [key=2, style=dotted];
m6_581 -> m6_582  [key=0, style=solid];
m6_581 -> m6_585  [key=2, style=dotted];
m6_581 -> m6_9  [key=2, style=dotted];
m6_582 -> m6_583  [key=0, style=solid];
m6_582 -> m6_9  [key=2, style=dotted];
m6_583 -> m6_584  [key=0, style=solid];
m6_583 -> m6_9  [key=2, style=dotted];
m6_584 -> m6_574  [key=0, style=bold, color=blue];
m6_884 -> m6_885  [key=0, style=solid];
m6_885 -> m6_886  [key=0, style=solid];
m6_885 -> m6_887  [key=2, style=dotted];
m6_886 -> m6_884  [key=0, style=bold, color=blue];
m6_1018 -> m6_1019  [key=0, style=solid];
m6_1019 -> m6_1020  [key=0, style=solid];
m6_1019 -> m6_1002  [key=2, style=dotted];
m6_1020 -> m6_1018  [key=0, style=bold, color=blue];
m6_470 -> m6_471  [key=0, style=solid];
m6_471 -> m6_472  [key=0, style=solid];
m6_471 -> m6_7  [key=2, style=dotted];
m6_471 -> m6_480  [key=2, style=dotted];
m6_472 -> m6_473  [key=0, style=solid];
m6_472 -> m6_481  [key=2, style=dotted];
m6_472 -> m6_482  [key=2, style=dotted];
m6_473 -> m6_474  [key=0, style=solid];
m6_473 -> m6_189  [key=2, style=dotted];
m6_473 -> m6_475  [key=1, style=dashed, color=darkseagreen4, label=originalJson];
m6_474 -> m6_475  [key=0, style=solid];
m6_474 -> m6_204  [key=2, style=dotted];
m6_475 -> m6_476  [key=0, style=solid];
m6_475 -> m6_10  [key=2, style=dotted];
m6_475 -> m6_477  [key=1, style=dashed, color=darkseagreen4, label=newObject];
m6_475 -> m6_478  [key=1, style=dashed, color=darkseagreen4, label=newObject];
m6_476 -> m6_477  [key=0, style=solid];
m6_476 -> m6_9  [key=2, style=dotted];
m6_477 -> m6_478  [key=0, style=solid];
m6_477 -> m6_9  [key=2, style=dotted];
m6_478 -> m6_479  [key=0, style=solid];
m6_478 -> m6_9  [key=2, style=dotted];
m6_479 -> m6_470  [key=0, style=bold, color=blue];
m6_157 -> m6_158  [key=0, style=solid];
m6_158 -> m6_157  [key=0, style=bold, color=blue];
m6_343 -> m6_344  [key=0, style=solid];
m6_344 -> m6_345  [key=0, style=solid];
m6_345 -> m6_343  [key=0, style=bold, color=blue];
m6_517 -> m6_518  [key=0, style=solid];
m6_518 -> m6_519  [key=0, style=solid];
m6_518 -> m6_29  [key=2, style=dotted];
m6_519 -> m6_520  [key=0, style=solid];
m6_519 -> m6_7  [key=2, style=dotted];
m6_520 -> m6_521  [key=0, style=solid];
m6_521 -> m6_522  [key=0, style=solid];
m6_521 -> m6_529  [key=2, style=dotted];
m6_522 -> m6_523  [key=0, style=solid];
m6_522 -> m6_530  [key=2, style=dotted];
m6_522 -> m6_7  [key=2, style=dotted];
m6_523 -> m6_524  [key=0, style=solid];
m6_523 -> m6_529  [key=2, style=dotted];
m6_524 -> m6_525  [key=0, style=solid];
m6_524 -> m6_529  [key=2, style=dotted];
m6_525 -> m6_526  [key=0, style=solid];
m6_525 -> m6_529  [key=2, style=dotted];
m6_526 -> m6_527  [key=0, style=solid];
m6_526 -> m6_530  [key=2, style=dotted];
m6_526 -> m6_7  [key=2, style=dotted];
m6_527 -> m6_528  [key=0, style=solid];
m6_527 -> m6_530  [key=2, style=dotted];
m6_527 -> m6_7  [key=2, style=dotted];
m6_528 -> m6_517  [key=0, style=bold, color=blue];
m6_605 -> m6_606  [key=0, style=solid];
m6_606 -> m6_607  [key=0, style=solid];
m6_606 -> m6_610  [key=1, style=dashed, color=darkseagreen4, label=json];
m6_606 -> m6_606  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m6_607 -> m6_608  [key=0, style=solid];
m6_607 -> m6_79  [key=2, style=dotted];
m6_607 -> m6_609  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_608 -> m6_605  [key=0, style=bold, color=blue];
m6_417 -> m6_418  [key=0, style=solid];
m6_418 -> m6_419  [key=0, style=solid];
m6_418 -> m6_431  [key=2, style=dotted];
m6_418 -> m6_420  [key=1, style=dashed, color=darkseagreen4, label=dateTime];
m6_418 -> m6_421  [key=1, style=dashed, color=darkseagreen4, label=dateTime];
m6_419 -> m6_420  [key=0, style=solid];
m6_419 -> m6_29  [key=2, style=dotted];
m6_419 -> m6_421  [key=1, style=dashed, color=darkseagreen4, label=list];
m6_419 -> m6_422  [key=1, style=dashed, color=darkseagreen4, label=list];
m6_420 -> m6_421  [key=0, style=solid];
m6_420 -> m6_230  [key=2, style=dotted];
m6_420 -> m6_432  [key=2, style=dotted];
m6_420 -> m6_37  [key=2, style=dotted];
m6_421 -> m6_422  [key=0, style=solid];
m6_421 -> m6_230  [key=2, style=dotted];
m6_421 -> m6_432  [key=2, style=dotted];
m6_421 -> m6_37  [key=2, style=dotted];
m6_422 -> m6_423  [key=0, style=solid];
m6_422 -> m6_189  [key=2, style=dotted];
m6_422 -> m6_424  [key=1, style=dashed, color=darkseagreen4, label=json];
m6_423 -> m6_424  [key=0, style=solid];
m6_423 -> m6_204  [key=2, style=dotted];
m6_424 -> m6_425  [key=0, style=solid];
m6_424 -> m6_10  [key=2, style=dotted];
m6_424 -> m6_426  [key=1, style=dashed, color=darkseagreen4, label=result];
m6_424 -> m6_427  [key=1, style=dashed, color=darkseagreen4, label=result];
m6_424 -> m6_428  [key=1, style=dashed, color=darkseagreen4, label=result];
m6_424 -> m6_429  [key=1, style=dashed, color=darkseagreen4, label=result];
m6_425 -> m6_426  [key=0, style=solid];
m6_425 -> m6_9  [key=2, style=dotted];
m6_426 -> m6_427  [key=0, style=solid];
m6_426 -> m6_9  [key=2, style=dotted];
m6_427 -> m6_428  [key=0, style=solid];
m6_427 -> m6_9  [key=2, style=dotted];
m6_428 -> m6_429  [key=0, style=solid];
m6_428 -> m6_9  [key=2, style=dotted];
m6_429 -> m6_430  [key=0, style=solid];
m6_429 -> m6_9  [key=2, style=dotted];
m6_430 -> m6_417  [key=0, style=bold, color=blue];
m6_287 -> m6_288  [key=0, style=solid];
m6_288 -> m6_289  [key=0, style=solid];
m6_288 -> m6_10  [key=2, style=dotted];
m6_288 -> m6_290  [key=1, style=dashed, color=darkseagreen4, label=list];
m6_288 -> m6_291  [key=1, style=dashed, color=darkseagreen4, label=list];
m6_288 -> m6_292  [key=1, style=dashed, color=darkseagreen4, label=list];
m6_289 -> m6_290  [key=0, style=solid];
m6_289 -> m6_9  [key=2, style=dotted];
m6_290 -> m6_291  [key=0, style=solid];
m6_290 -> m6_9  [key=2, style=dotted];
m6_291 -> m6_292  [key=0, style=solid];
m6_291 -> m6_9  [key=2, style=dotted];
m6_292 -> m6_293  [key=0, style=solid];
m6_292 -> m6_9  [key=2, style=dotted];
m6_293 -> m6_287  [key=0, style=bold, color=blue];
m6_834 -> m6_835  [key=0, style=solid];
m6_835 -> m6_836  [key=0, style=solid];
m6_835 -> m6_835  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m6_836 -> m6_837  [key=0, style=solid];
m6_836 -> m6_10  [key=2, style=dotted];
m6_836 -> m6_838  [key=1, style=dashed, color=darkseagreen4, label=products];
m6_837 -> m6_838  [key=0, style=solid];
m6_837 -> m6_839  [key=1, style=dashed, color=darkseagreen4, label=p1];
m6_838 -> m6_839  [key=0, style=solid];
m6_838 -> m6_9  [key=2, style=dotted];
m6_839 -> m6_840  [key=0, style=solid];
m6_839 -> m6_9  [key=2, style=dotted];
m6_840 -> m6_834  [key=0, style=bold, color=blue];
m6_1021 -> m6_1022  [key=0, style=solid];
m6_1022 -> m6_1023  [key=0, style=solid];
m6_1022 -> m6_1002  [key=2, style=dotted];
m6_1023 -> m6_1021  [key=0, style=bold, color=blue];
m6_38 -> m6_39  [key=0, style=solid];
m6_39 -> m6_38  [key=0, style=bold, color=blue];
m6_841 -> m6_842  [key=0, style=solid];
m6_842 -> m6_843  [key=0, style=solid];
m6_842 -> m6_846  [key=2, style=dotted];
m6_842 -> m6_29  [key=2, style=dotted];
m6_843 -> m6_844  [key=0, style=solid];
m6_843 -> m6_189  [key=2, style=dotted];
m6_844 -> m6_845  [key=0, style=solid];
m6_844 -> m6_204  [key=2, style=dotted];
m6_845 -> m6_841  [key=0, style=bold, color=blue];
m6_91 -> m6_92  [key=0, style=solid];
m6_92 -> m6_91  [key=0, style=bold, color=blue];
m6_85 -> m6_86  [key=0, style=solid];
m6_86 -> m6_87  [key=0, style=solid];
m6_86 -> m6_79  [key=2, style=dotted];
m6_86 -> m6_88  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_87 -> m6_85  [key=0, style=bold, color=blue];
m6_654 -> m6_655  [key=0, style=solid];
m6_655 -> m6_656  [key=0, style=solid];
m6_655 -> m6_663  [key=1, style=dashed, color=darkseagreen4, label=json];
m6_655 -> m6_655  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m6_656 -> m6_657  [key=0, style=solid];
m6_656 -> m6_10  [key=2, style=dotted];
m6_656 -> m6_658  [key=1, style=dashed, color=darkseagreen4, label=aa];
m6_656 -> m6_659  [key=1, style=dashed, color=darkseagreen4, label=aa];
m6_656 -> m6_660  [key=1, style=dashed, color=darkseagreen4, label=aa];
m6_656 -> m6_661  [key=1, style=dashed, color=darkseagreen4, label=aa];
m6_656 -> m6_662  [key=1, style=dashed, color=darkseagreen4, label=aa];
m6_663 -> m6_664  [key=0, style=solid];
m6_663 -> m6_9  [key=2, style=dotted];
m6_657 -> m6_658  [key=0, style=solid];
m6_657 -> m6_9  [key=2, style=dotted];
m6_658 -> m6_659  [key=0, style=solid];
m6_658 -> m6_9  [key=2, style=dotted];
m6_659 -> m6_660  [key=0, style=solid];
m6_659 -> m6_585  [key=2, style=dotted];
m6_659 -> m6_9  [key=2, style=dotted];
m6_660 -> m6_661  [key=0, style=solid];
m6_660 -> m6_585  [key=2, style=dotted];
m6_660 -> m6_9  [key=2, style=dotted];
m6_661 -> m6_662  [key=0, style=solid];
m6_661 -> m6_585  [key=2, style=dotted];
m6_661 -> m6_9  [key=2, style=dotted];
m6_662 -> m6_663  [key=0, style=solid];
m6_662 -> m6_8  [key=2, style=dotted];
m6_664 -> m6_654  [key=0, style=bold, color=blue];
m6_350 -> m6_351  [key=0, style=solid];
m6_351 -> m6_352  [key=0, style=solid];
m6_351 -> m6_353  [key=2, style=dotted];
m6_352 -> m6_350  [key=0, style=bold, color=blue];
m6_864 -> m6_865  [key=0, style=solid];
m6_865 -> m6_866  [key=0, style=solid];
m6_865 -> m6_865  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m6_866 -> m6_867  [key=0, style=solid];
m6_866 -> m6_10  [key=2, style=dotted];
m6_867 -> m6_868  [key=0, style=solid];
m6_867 -> m6_9  [key=2, style=dotted];
m6_868 -> m6_864  [key=0, style=bold, color=blue];
m6_625 -> m6_626  [key=0, style=solid];
m6_626 -> m6_627  [key=0, style=solid];
m6_626 -> m6_630  [key=1, style=dashed, color=darkseagreen4, label=json];
m6_626 -> m6_626  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m6_627 -> m6_628  [key=0, style=solid];
m6_627 -> m6_79  [key=2, style=dotted];
m6_627 -> m6_629  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_628 -> m6_625  [key=0, style=bold, color=blue];
m6_375 -> m6_376  [key=0, style=solid];
m6_376 -> m6_377  [key=0, style=solid];
m6_376 -> m6_29  [key=2, style=dotted];
m6_377 -> m6_378  [key=0, style=solid];
m6_377 -> m6_366  [key=2, style=dotted];
m6_378 -> m6_379  [key=0, style=solid];
m6_378 -> m6_189  [key=2, style=dotted];
m6_379 -> m6_380  [key=0, style=solid];
m6_379 -> m6_204  [key=2, style=dotted];
m6_380 -> m6_375  [key=0, style=bold, color=blue];
m6_861 -> m6_862  [key=0, style=solid];
m6_80 -> m6_81  [key=0, style=solid];
m6_81 -> m6_82  [key=0, style=solid];
m6_81 -> m6_74  [key=2, style=dotted];
m6_81 -> m6_8  [key=2, style=dotted];
m6_82 -> m6_80  [key=0, style=bold, color=blue];
m6_88 -> m6_89  [key=0, style=solid];
m6_89 -> m6_90  [key=0, style=solid];
m6_89 -> m6_83  [key=2, style=dotted];
m6_89 -> m6_8  [key=2, style=dotted];
m6_90 -> m6_88  [key=0, style=bold, color=blue];
m6_105 -> m6_106  [key=0, style=solid];
m6_106 -> m6_107  [key=0, style=solid];
m6_106 -> m6_106  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.KeyValuePair<string, int>"];
m6_107 -> m6_105  [key=0, style=bold, color=blue];
m6_108 -> m6_109  [key=0, style=solid];
m6_109 -> m6_110  [key=0, style=solid];
m6_109 -> m6_109  [key=1, style=dashed, color=darkseagreen4, label="System.Collections.Generic.KeyValuePair<string, int>"];
m6_110 -> m6_108  [key=0, style=bold, color=blue];
m6_146 -> m6_147  [key=0, style=solid];
m6_147 -> m6_148  [key=0, style=solid];
m6_147 -> m6_141  [key=2, style=dotted];
m6_147 -> m6_8  [key=2, style=dotted];
m6_148 -> m6_146  [key=0, style=bold, color=blue];
m6_154 -> m6_155  [key=0, style=solid];
m6_155 -> m6_156  [key=0, style=solid];
m6_155 -> m6_149  [key=2, style=dotted];
m6_155 -> m6_8  [key=2, style=dotted];
m6_156 -> m6_154  [key=0, style=bold, color=blue];
m6_170 -> m6_171  [key=0, style=solid];
m6_171 -> m6_172  [key=0, style=solid];
m6_171 -> m6_10  [key=2, style=dotted];
m6_172 -> m6_170  [key=0, style=bold, color=blue];
m6_268 -> m6_269  [key=0, style=solid];
m6_268 -> m6_10  [key=2, style=dotted];
m6_267 -> m6_268  [key=0, style=solid];
m6_269 -> m6_267  [key=0, style=bold, color=blue];
m6_279 -> m6_280  [key=0, style=solid];
m6_280 -> m6_281  [key=0, style=solid];
m6_280 -> m6_10  [key=2, style=dotted];
m6_281 -> m6_279  [key=0, style=bold, color=blue];
m6_515 -> m6_516  [key=0, style=solid];
m6_515 -> m6_10  [key=2, style=dotted];
m6_514 -> m6_515  [key=0, style=solid];
m6_516 -> m6_514  [key=0, style=bold, color=blue];
m6_603 -> m6_604  [key=0, style=solid];
m6_603 -> m6_10  [key=2, style=dotted];
m6_602 -> m6_603  [key=0, style=solid];
m6_604 -> m6_602  [key=0, style=bold, color=blue];
m6_610 -> m6_611  [key=0, style=solid];
m6_610 -> m6_10  [key=2, style=dotted];
m6_609 -> m6_610  [key=0, style=solid];
m6_611 -> m6_609  [key=0, style=bold, color=blue];
m6_630 -> m6_631  [key=0, style=solid];
m6_630 -> m6_10  [key=2, style=dotted];
m6_629 -> m6_630  [key=0, style=solid];
m6_631 -> m6_629  [key=0, style=bold, color=blue];
m6_637 -> m6_638  [key=0, style=solid];
m6_637 -> m6_10  [key=2, style=dotted];
m6_636 -> m6_637  [key=0, style=solid];
m6_638 -> m6_636  [key=0, style=bold, color=blue];
m6_644 -> m6_645  [key=0, style=solid];
m6_644 -> m6_10  [key=2, style=dotted];
m6_643 -> m6_644  [key=0, style=solid];
m6_645 -> m6_643  [key=0, style=bold, color=blue];
m6_670 -> m6_671  [key=0, style=solid];
m6_670 -> m6_10  [key=2, style=dotted];
m6_669 -> m6_670  [key=0, style=solid];
m6_671 -> m6_669  [key=0, style=bold, color=blue];
m6_677 -> m6_678  [key=0, style=solid];
m6_677 -> m6_10  [key=2, style=dotted];
m6_676 -> m6_677  [key=0, style=solid];
m6_678 -> m6_676  [key=0, style=bold, color=blue];
m6_862 -> m6_863  [key=0, style=solid];
m6_862 -> m6_10  [key=2, style=dotted];
m6_863 -> m6_861  [key=0, style=bold, color=blue];
m6_0 -> m6_1  [key=0, style=solid, color=green];
m6_1 -> m6_2  [key=0, style=solid, color=green];
m6_1 -> m6_7  [key=2, style=dotted, color=green];
m6_2 -> m6_3  [key=0, style=solid, color=green];
m6_2 -> m6_8  [key=2, style=dotted, color=green];
m6_2 -> m6_4  [key=1, style=dashed, color=green, label=output];
m6_3 -> m6_4  [key=0, style=solid, color=green];
m6_3 -> m6_9  [key=2, style=dotted, color=green];
m6_4 -> m6_5  [key=0, style=solid, color=green];
m6_4 -> m6_10  [key=2, style=dotted, color=green];
m6_5 -> m6_6  [key=0, style=solid, color=green];
m6_5 -> m6_11  [key=2, style=dotted, color=green];
m6_5 -> m6_9  [key=2, style=dotted, color=green];
m6_6 -> m6_0  [key=0, style=bold, color=blue];
m6_536 -> m6_537  [key=0, style=solid];
m6_537 -> m6_538  [key=0, style=solid];
m6_537 -> m6_537  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m6_538 -> m6_539  [key=0, style=solid];
m6_538 -> m6_10  [key=2, style=dotted];
m6_538 -> m6_540  [key=1, style=dashed, color=darkseagreen4, label=c2];
m6_538 -> m6_541  [key=1, style=dashed, color=darkseagreen4, label=c2];
m6_538 -> m6_542  [key=1, style=dashed, color=darkseagreen4, label=c2];
m6_538 -> m6_543  [key=1, style=dashed, color=darkseagreen4, label=c2];
m6_538 -> m6_544  [key=1, style=dashed, color=darkseagreen4, label=c2];
m6_538 -> m6_545  [key=1, style=dashed, color=darkseagreen4, label=c2];
m6_539 -> m6_540  [key=0, style=solid];
m6_539 -> m6_9  [key=2, style=dotted];
m6_540 -> m6_541  [key=0, style=solid];
m6_540 -> m6_9  [key=2, style=dotted];
m6_541 -> m6_542  [key=0, style=solid];
m6_541 -> m6_9  [key=2, style=dotted];
m6_542 -> m6_543  [key=0, style=solid];
m6_542 -> m6_9  [key=2, style=dotted];
m6_543 -> m6_544  [key=0, style=solid];
m6_543 -> m6_9  [key=2, style=dotted];
m6_544 -> m6_545  [key=0, style=solid];
m6_544 -> m6_9  [key=2, style=dotted];
m6_545 -> m6_546  [key=0, style=solid];
m6_545 -> m6_9  [key=2, style=dotted];
m6_546 -> m6_536  [key=0, style=bold, color=blue];
m6_929 -> m6_931  [key=0, style=solid];
m6_931 -> m6_932  [key=0, style=solid];
m6_931 -> m6_29  [key=2, style=dotted];
m6_932 -> m6_933  [key=0, style=solid];
m6_932 -> m6_937  [key=0, style=solid];
m6_932 -> m6_938  [key=2, style=dotted];
m6_933 -> m6_934  [key=0, style=solid];
m6_934 -> m6_935  [key=0, style=solid];
m6_934 -> m6_939  [key=2, style=dotted];
m6_935 -> m6_936  [key=0, style=solid];
m6_935 -> m6_937  [key=0, style=solid];
m6_936 -> m6_935  [key=0, style=solid];
m6_936 -> m6_37  [key=2, style=dotted];
m6_937 -> m6_929  [key=0, style=bold, color=blue];
m6_846 -> m6_1024  [key=0, style=solid];
m6_1024 -> m6_1025  [key=0, style=solid];
m6_1025 -> m6_846  [key=0, style=bold, color=blue];
m6_1062 -> m6_1063  [key=0, style=solid];
m6_1063 -> m6_1064  [key=0, style=solid];
m6_1063 -> m6_1047  [key=2, style=dotted];
m6_1064 -> m6_1062  [key=0, style=bold, color=blue];
m6_598 -> m6_599  [key=0, style=solid];
m6_599 -> m6_600  [key=0, style=solid];
m6_599 -> m6_603  [key=1, style=dashed, color=darkseagreen4, label=json];
m6_599 -> m6_599  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m6_600 -> m6_601  [key=0, style=solid];
m6_600 -> m6_79  [key=2, style=dotted];
m6_600 -> m6_602  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_601 -> m6_598  [key=0, style=bold, color=blue];
m6_124 -> m6_125  [key=0, style=solid];
m6_125 -> m6_124  [key=0, style=bold, color=blue];
m6_892 -> m6_893  [key=0, style=solid];
m6_893 -> m6_894  [key=0, style=solid];
m6_893 -> m6_895  [key=2, style=dotted];
m6_894 -> m6_892  [key=0, style=bold, color=blue];
m6_337 -> m6_338  [key=0, style=solid];
m6_338 -> m6_339  [key=0, style=solid];
m6_338 -> m6_10  [key=2, style=dotted];
m6_338 -> m6_340  [key=1, style=dashed, color=darkseagreen4, label=dic];
m6_338 -> m6_341  [key=1, style=dashed, color=darkseagreen4, label=dic];
m6_339 -> m6_340  [key=0, style=solid];
m6_339 -> m6_9  [key=2, style=dotted];
m6_340 -> m6_341  [key=0, style=solid];
m6_340 -> m6_9  [key=2, style=dotted];
m6_341 -> m6_342  [key=0, style=solid];
m6_341 -> m6_9  [key=2, style=dotted];
m6_342 -> m6_337  [key=0, style=bold, color=blue];
m6_392 -> m6_393  [key=0, style=solid];
m6_393 -> m6_394  [key=0, style=solid];
m6_393 -> m6_29  [key=2, style=dotted];
m6_394 -> m6_392  [key=0, style=bold, color=blue];
m6_860 -> m6_991  [key=0, style=solid];
m6_991 -> m6_992  [key=0, style=solid];
m6_991 -> m6_29  [key=2, style=dotted];
m6_992 -> m6_860  [key=0, style=bold, color=blue];
m6_103 -> m6_104  [key=0, style=solid];
m6_104 -> m6_103  [key=0, style=bold, color=blue];
m6_126 -> m6_127  [key=0, style=solid];
m6_127 -> m6_128  [key=0, style=solid];
m6_127 -> m6_124  [key=2, style=dotted];
m6_128 -> m6_126  [key=0, style=bold, color=blue];
m6_190 -> m6_191  [key=0, style=solid];
m6_191 -> m6_192  [key=0, style=solid];
m6_191 -> m6_199  [key=2, style=dotted];
m6_191 -> m6_193  [key=1, style=dashed, color=darkseagreen4, label=onebasedArray];
m6_191 -> m6_194  [key=1, style=dashed, color=darkseagreen4, label=onebasedArray];
m6_191 -> m6_196  [key=1, style=dashed, color=darkseagreen4, label=onebasedArray];
m6_192 -> m6_193  [key=0, style=solid];
m6_192 -> m6_200  [key=2, style=dotted];
m6_192 -> m6_194  [key=1, style=dashed, color=darkseagreen4, label=i];
m6_192 -> m6_195  [key=1, style=dashed, color=darkseagreen4, label=i];
m6_193 -> m6_194  [key=0, style=solid];
m6_193 -> m6_196  [key=0, style=solid];
m6_193 -> m6_201  [key=2, style=dotted];
m6_194 -> m6_195  [key=0, style=solid];
m6_194 -> m6_202  [key=2, style=dotted];
m6_194 -> m6_203  [key=2, style=dotted];
m6_196 -> m6_197  [key=0, style=solid];
m6_196 -> m6_189  [key=2, style=dotted];
m6_195 -> m6_193  [key=0, style=solid];
m6_195 -> m6_195  [key=1, style=dashed, color=darkseagreen4, label=i];
m6_197 -> m6_198  [key=0, style=solid];
m6_197 -> m6_204  [key=2, style=dotted];
m6_198 -> m6_190  [key=0, style=bold, color=blue];
m6_483 -> m6_484  [key=0, style=solid];
m6_484 -> m6_485  [key=0, style=solid];
m6_484 -> m6_484  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m6_485 -> m6_486  [key=0, style=solid];
m6_485 -> m6_10  [key=2, style=dotted];
m6_485 -> m6_487  [key=1, style=dashed, color=darkseagreen4, label=values];
m6_485 -> m6_488  [key=1, style=dashed, color=darkseagreen4, label=values];
m6_485 -> m6_489  [key=1, style=dashed, color=darkseagreen4, label=values];
m6_485 -> m6_490  [key=1, style=dashed, color=darkseagreen4, label=values];
m6_485 -> m6_491  [key=1, style=dashed, color=darkseagreen4, label=values];
m6_485 -> m6_492  [key=1, style=dashed, color=darkseagreen4, label=values];
m6_485 -> m6_493  [key=1, style=dashed, color=darkseagreen4, label=values];
m6_485 -> m6_494  [key=1, style=dashed, color=darkseagreen4, label=values];
m6_486 -> m6_487  [key=0, style=solid];
m6_486 -> m6_9  [key=2, style=dotted];
m6_487 -> m6_488  [key=0, style=solid];
m6_487 -> m6_9  [key=2, style=dotted];
m6_488 -> m6_489  [key=0, style=solid];
m6_488 -> m6_9  [key=2, style=dotted];
m6_489 -> m6_490  [key=0, style=solid];
m6_489 -> m6_9  [key=2, style=dotted];
m6_490 -> m6_491  [key=0, style=solid];
m6_490 -> m6_9  [key=2, style=dotted];
m6_491 -> m6_492  [key=0, style=solid];
m6_491 -> m6_9  [key=2, style=dotted];
m6_492 -> m6_493  [key=0, style=solid];
m6_492 -> m6_9  [key=2, style=dotted];
m6_493 -> m6_494  [key=0, style=solid];
m6_493 -> m6_9  [key=2, style=dotted];
m6_494 -> m6_495  [key=0, style=solid];
m6_494 -> m6_9  [key=2, style=dotted];
m6_495 -> m6_483  [key=0, style=bold, color=blue];
m6_141 -> m6_142  [key=0, style=solid];
m6_142 -> m6_141  [key=0, style=bold, color=blue];
m6_217 -> m6_218  [key=0, style=solid];
m6_218 -> m6_219  [key=0, style=solid];
m6_218 -> m6_230  [key=2, style=dotted];
m6_219 -> m6_220  [key=0, style=solid];
m6_219 -> m6_189  [key=2, style=dotted];
m6_219 -> m6_222  [key=1, style=dashed, color=darkseagreen4, label=myOtherArrayAsString];
m6_220 -> m6_221  [key=0, style=solid];
m6_220 -> m6_204  [key=2, style=dotted];
m6_222 -> m6_223  [key=0, style=solid];
m6_222 -> m6_10  [key=2, style=dotted];
m6_222 -> m6_224  [key=1, style=dashed, color=darkseagreen4, label=myOtherResult];
m6_222 -> m6_225  [key=1, style=dashed, color=darkseagreen4, label=myOtherResult];
m6_222 -> m6_226  [key=1, style=dashed, color=darkseagreen4, label=myOtherResult];
m6_222 -> m6_227  [key=1, style=dashed, color=darkseagreen4, label=myOtherResult];
m6_222 -> m6_228  [key=1, style=dashed, color=darkseagreen4, label=myOtherResult];
m6_221 -> m6_222  [key=0, style=solid];
m6_221 -> m6_231  [key=2, style=dotted];
m6_221 -> m6_223  [key=1, style=dashed, color=darkseagreen4, label=o];
m6_223 -> m6_224  [key=0, style=solid];
m6_223 -> m6_232  [key=2, style=dotted];
m6_223 -> m6_233  [key=2, style=dotted];
m6_224 -> m6_225  [key=0, style=solid];
m6_224 -> m6_9  [key=2, style=dotted];
m6_225 -> m6_226  [key=0, style=solid];
m6_225 -> m6_9  [key=2, style=dotted];
m6_226 -> m6_227  [key=0, style=solid];
m6_226 -> m6_9  [key=2, style=dotted];
m6_227 -> m6_228  [key=0, style=solid];
m6_227 -> m6_9  [key=2, style=dotted];
m6_228 -> m6_229  [key=0, style=solid];
m6_228 -> m6_9  [key=2, style=dotted];
m6_229 -> m6_217  [key=0, style=bold, color=blue];
m6_93 -> m6_94  [key=0, style=solid];
m6_94 -> m6_95  [key=0, style=solid];
m6_94 -> m6_309  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m6_95 -> m6_96  [key=0, style=solid];
m6_95 -> m6_10  [key=2, style=dotted];
m6_95 -> m6_97  [key=1, style=dashed, color=darkseagreen4, label=l];
m6_95 -> m6_98  [key=1, style=dashed, color=darkseagreen4, label=l];
m6_95 -> m6_99  [key=1, style=dashed, color=darkseagreen4, label=l];
m6_96 -> m6_97  [key=0, style=solid];
m6_96 -> m6_9  [key=2, style=dotted];
m6_97 -> m6_98  [key=0, style=solid];
m6_97 -> m6_9  [key=2, style=dotted];
m6_98 -> m6_99  [key=0, style=solid];
m6_98 -> m6_9  [key=2, style=dotted];
m6_99 -> m6_100  [key=0, style=solid];
m6_99 -> m6_9  [key=2, style=dotted];
m6_100 -> m6_93  [key=0, style=bold, color=blue];
m6_510 -> m6_511  [key=0, style=solid];
m6_511 -> m6_512  [key=0, style=solid];
m6_511 -> m6_515  [key=1, style=dashed, color=darkseagreen4, label=json];
m6_511 -> m6_511  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m6_512 -> m6_513  [key=0, style=solid];
m6_512 -> m6_79  [key=2, style=dotted];
m6_512 -> m6_514  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_513 -> m6_510  [key=0, style=bold, color=blue];
m6_993 -> m6_994  [key=0, style=solid];
m6_994 -> m6_995  [key=0, style=solid];
m6_994 -> m6_240  [key=2, style=dotted];
m6_995 -> m6_993  [key=0, style=bold, color=blue];
m6_720 -> m6_721  [key=0, style=solid];
m6_721 -> m6_722  [key=0, style=solid];
m6_721 -> m6_721  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m6_722 -> m6_723  [key=0, style=solid];
m6_722 -> m6_10  [key=2, style=dotted];
m6_722 -> m6_724  [key=1, style=dashed, color=darkseagreen4, label=o];
m6_722 -> m6_725  [key=1, style=dashed, color=darkseagreen4, label=o];
m6_722 -> m6_726  [key=1, style=dashed, color=darkseagreen4, label=o];
m6_722 -> m6_727  [key=1, style=dashed, color=darkseagreen4, label=o];
m6_723 -> m6_724  [key=0, style=solid];
m6_723 -> m6_9  [key=2, style=dotted];
m6_724 -> m6_725  [key=0, style=solid];
m6_724 -> m6_9  [key=2, style=dotted];
m6_725 -> m6_726  [key=0, style=solid];
m6_725 -> m6_9  [key=2, style=dotted];
m6_726 -> m6_727  [key=0, style=solid];
m6_726 -> m6_9  [key=2, style=dotted];
m6_727 -> m6_728  [key=0, style=solid];
m6_727 -> m6_9  [key=2, style=dotted];
m6_728 -> m6_720  [key=0, style=bold, color=blue];
m6_679 -> m6_680  [key=0, style=solid];
m6_680 -> m6_681  [key=0, style=solid];
m6_680 -> m6_686  [key=1, style=dashed, color=darkseagreen4, label=json];
m6_680 -> m6_680  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m6_681 -> m6_682  [key=0, style=solid];
m6_681 -> m6_10  [key=2, style=dotted];
m6_681 -> m6_683  [key=1, style=dashed, color=darkseagreen4, label=aa];
m6_681 -> m6_684  [key=1, style=dashed, color=darkseagreen4, label=aa];
m6_681 -> m6_685  [key=1, style=dashed, color=darkseagreen4, label=aa];
m6_686 -> m6_687  [key=0, style=solid];
m6_686 -> m6_9  [key=2, style=dotted];
m6_682 -> m6_683  [key=0, style=solid];
m6_682 -> m6_9  [key=2, style=dotted];
m6_683 -> m6_684  [key=0, style=solid];
m6_683 -> m6_9  [key=2, style=dotted];
m6_684 -> m6_685  [key=0, style=solid];
m6_684 -> m6_9  [key=2, style=dotted];
m6_685 -> m6_686  [key=0, style=solid];
m6_685 -> m6_8  [key=2, style=dotted];
m6_687 -> m6_679  [key=0, style=bold, color=blue];
m6_1048 -> m6_1049  [key=0, style=solid];
m6_1048 -> m6_1051  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m6_1048 -> m6_1052  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m6_1048 -> m6_1053  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m6_1048 -> m6_1055  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.JsonReader"];
m6_1048 -> m6_1050  [key=3, color=darkorchid, style=bold, label="method methodReturn object ReadJson"];
m6_1049 -> m6_1050  [key=0, style=solid];
m6_1051 -> m6_1052  [key=0, style=solid];
m6_1051 -> m6_1058  [key=2, style=dotted];
m6_1052 -> m6_1053  [key=0, style=solid];
m6_1052 -> m6_1056  [key=0, style=solid];
m6_1053 -> m6_1054  [key=0, style=solid];
m6_1055 -> m6_1052  [key=0, style=solid];
m6_1055 -> m6_1058  [key=2, style=dotted];
m6_1050 -> m6_1051  [key=0, style=solid];
m6_1050 -> m6_33  [key=2, style=dotted];
m6_1050 -> m6_1054  [key=1, style=dashed, color=darkseagreen4, label=newStrings];
m6_1050 -> m6_1056  [key=1, style=dashed, color=darkseagreen4, label=newStrings];
m6_1054 -> m6_1055  [key=0, style=solid];
m6_1054 -> m6_37  [key=2, style=dotted];
m6_1056 -> m6_1057  [key=0, style=solid];
m6_1057 -> m6_1048  [key=0, style=bold, color=blue];
m6_34 -> m6_35  [key=0, style=solid];
m6_34 -> m6_44  [key=3, color=darkorchid, style=bold, label="Parameter variable int bar"];
m6_34 -> m6_45  [key=3, color=darkorchid, style=bold, label="Parameter variable int bar"];
m6_34 -> m6_46  [key=3, color=darkorchid, style=bold, label="Parameter variable int bar"];
m6_35 -> m6_36  [key=0, style=solid];
m6_35 -> m6_37  [key=2, style=dotted];
m6_36 -> m6_34  [key=0, style=bold, color=blue];
m6_918 -> m6_919  [key=0, style=solid];
m6_918 -> m6_924  [key=1, style=dashed, color=darkseagreen4, label=string];
m6_919 -> m6_920  [key=0, style=solid];
m6_924 -> m6_925  [key=0, style=solid];
m6_924 -> m6_928  [key=2, style=dotted];
m6_920 -> m6_921  [key=0, style=solid];
m6_921 -> m6_922  [key=0, style=solid];
m6_922 -> m6_923  [key=0, style=solid];
m6_923 -> m6_924  [key=0, style=solid];
m6_925 -> m6_926  [key=0, style=solid];
m6_925 -> m6_929  [key=2, style=dotted];
m6_926 -> m6_927  [key=0, style=solid];
m6_926 -> m6_930  [key=2, style=dotted];
m6_927 -> m6_918  [key=0, style=bold, color=blue];
m6_83 -> m6_84  [key=0, style=solid];
m6_84 -> m6_83  [key=0, style=bold, color=blue];
m6_672 -> m6_673  [key=0, style=solid];
m6_673 -> m6_674  [key=0, style=solid];
m6_673 -> m6_677  [key=1, style=dashed, color=darkseagreen4, label=json];
m6_673 -> m6_673  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m6_674 -> m6_675  [key=0, style=solid];
m6_674 -> m6_79  [key=2, style=dotted];
m6_674 -> m6_676  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m6_675 -> m6_672  [key=0, style=bold, color=blue];
m6_1003 -> m6_1004  [key=0, style=solid];
m6_1004 -> m6_1005  [key=0, style=solid];
m6_1004 -> m6_1002  [key=2, style=dotted];
m6_1005 -> m6_1003  [key=0, style=bold, color=blue];
m6_1035 -> m6_1036  [key=0, style=solid];
m6_1035 -> m6_1038  [key=0, style=bold, color=crimson];
m6_1035 -> m6_1039  [key=0, style=bold, color=crimson];
m6_1036 -> m6_1037  [key=0, style=solid];
m6_1036 -> m6_1039  [key=0, style=solid];
m6_1038 -> m6_1037  [key=0, style=solid];
m6_1039 -> m6_1040  [key=0, style=solid];
m6_1037 -> m6_1038  [key=0, style=solid];
m6_1037 -> m6_1040  [key=0, style=solid];
m6_1040 -> m6_1035  [key=0, style=bold, color=blue];
m6_205 -> m6_206  [key=0, style=solid];
m6_206 -> m6_207  [key=0, style=solid];
m6_206 -> m6_199  [key=2, style=dotted];
m6_206 -> m6_208  [key=1, style=dashed, color=darkseagreen4, label=onebasedArray];
m6_206 -> m6_209  [key=1, style=dashed, color=darkseagreen4, label=onebasedArray];
m6_206 -> m6_210  [key=1, style=dashed, color=darkseagreen4, label=onebasedArray];
m6_206 -> m6_211  [key=1, style=dashed, color=darkseagreen4, label=onebasedArray];
m6_206 -> m6_214  [key=1, style=dashed, color=darkseagreen4, label=onebasedArray];
m6_207 -> m6_208  [key=0, style=solid];
m6_207 -> m6_200  [key=2, style=dotted];
m6_207 -> m6_211  [key=1, style=dashed, color=darkseagreen4, label=i];
m6_207 -> m6_213  [key=1, style=dashed, color=darkseagreen4, label=i];
m6_208 -> m6_209  [key=0, style=solid];
m6_208 -> m6_214  [key=0, style=solid];
m6_208 -> m6_201  [key=2, style=dotted];
m6_209 -> m6_210  [key=0, style=solid];
m6_209 -> m6_200  [key=2, style=dotted];
m6_209 -> m6_211  [key=1, style=dashed, color=darkseagreen4, label=j];
m6_209 -> m6_212  [key=1, style=dashed, color=darkseagreen4, label=j];
m6_210 -> m6_211  [key=0, style=solid];
m6_210 -> m6_213  [key=0, style=solid];
m6_210 -> m6_201  [key=2, style=dotted];
m6_211 -> m6_212  [key=0, style=solid];
m6_211 -> m6_203  [key=2, style=dotted];
m6_214 -> m6_215  [key=0, style=solid];
m6_214 -> m6_189  [key=2, style=dotted];
m6_213 -> m6_208  [key=0, style=solid];
m6_213 -> m6_213  [key=1, style=dashed, color=darkseagreen4, label=i];
m6_212 -> m6_210  [key=0, style=solid];
m6_212 -> m6_212  [key=1, style=dashed, color=darkseagreen4, label=j];
m6_215 -> m6_216  [key=0, style=solid];
m6_215 -> m6_204  [key=2, style=dotted];
m6_216 -> m6_205  [key=0, style=bold, color=blue];
m6_1030 -> m6_1031  [key=0, style=solid];
m6_1030 -> m6_1026  [key=3, color=darkorchid, style=bold, label="method methodReturn System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator"];
m6_1031 -> m6_1032  [key=0, style=solid];
m6_1031 -> m6_1026  [key=2, style=dotted];
m6_1032 -> m6_1030  [key=0, style=bold, color=blue];
m6_928 -> m6_950  [key=0, style=solid];
m6_928 -> m6_982  [key=1, style=dashed, color=darkseagreen4, label=string];
m6_928 -> m6_918  [key=3, color=darkorchid, style=bold, label="Parameter variable string xmlString"];
m6_950 -> m6_951  [key=0, style=solid];
m6_950 -> m6_985  [key=2, style=dotted];
m6_982 -> m6_983  [key=0, style=solid];
m6_982 -> m6_984  [key=0, style=solid];
m6_951 -> m6_952  [key=0, style=solid];
m6_951 -> m6_953  [key=1, style=dashed, color=darkseagreen4, label=root];
m6_951 -> m6_955  [key=1, style=dashed, color=darkseagreen4, label=root];
m6_952 -> m6_953  [key=0, style=solid];
m6_952 -> m6_955  [key=1, style=dashed, color=darkseagreen4, label=ns];
m6_952 -> m6_956  [key=1, style=dashed, color=darkseagreen4, label=ns];
m6_952 -> m6_952  [key=3, color=darkorchid, style=bold, label="Local variable string ns"];
m6_953 -> m6_954  [key=0, style=solid];
m6_953 -> m6_986  [key=2, style=dotted];
m6_953 -> m6_987  [key=2, style=dotted];
m6_953 -> m6_956  [key=1, style=dashed, color=darkseagreen4, label=auth];
m6_953 -> m6_957  [key=1, style=dashed, color=darkseagreen4, label=auth];
m6_955 -> m6_956  [key=0, style=solid];
m6_955 -> m6_986  [key=2, style=dotted];
m6_955 -> m6_987  [key=2, style=dotted];
m6_955 -> m6_957  [key=1, style=dashed, color=darkseagreen4, label=auth];
m6_956 -> m6_957  [key=0, style=solid];
m6_956 -> m6_986  [key=2, style=dotted];
m6_956 -> m6_987  [key=2, style=dotted];
m6_956 -> m6_960  [key=1, style=dashed, color=darkseagreen4, label=xNodeUser];
m6_956 -> m6_961  [key=1, style=dashed, color=darkseagreen4, label=xNodeUser];
m6_954 -> m6_955  [key=0, style=solid];
m6_954 -> m6_956  [key=0, style=solid];
m6_957 -> m6_958  [key=0, style=solid];
m6_957 -> m6_986  [key=2, style=dotted];
m6_957 -> m6_987  [key=2, style=dotted];
m6_957 -> m6_962  [key=1, style=dashed, color=darkseagreen4, label=eduPers];
m6_957 -> m6_963  [key=1, style=dashed, color=darkseagreen4, label=eduPers];
m6_960 -> m6_961  [key=0, style=solid];
m6_960 -> m6_967  [key=0, style=solid];
m6_961 -> m6_962  [key=0, style=solid];
m6_961 -> m6_967  [key=1, style=dashed, color=darkseagreen4, label=casUser];
m6_961 -> m6_968  [key=1, style=dashed, color=darkseagreen4, label=casUser];
m6_958 -> m6_959  [key=0, style=solid];
m6_958 -> m6_967  [key=1, style=dashed, color=darkseagreen4, label=casUser];
m6_958 -> m6_968  [key=1, style=dashed, color=darkseagreen4, label=casUser];
m6_958 -> m6_958  [key=3, color=darkorchid, style=bold, label="Local variable string casUser"];
m6_962 -> m6_963  [key=0, style=solid];
m6_962 -> m6_967  [key=0, style=solid];
m6_963 -> m6_964  [key=0, style=solid];
m6_963 -> m6_967  [key=0, style=solid];
m6_963 -> m6_988  [key=2, style=dotted];
m6_963 -> m6_965  [key=1, style=dashed, color=darkseagreen4, label=xPersonValue];
m6_963 -> m6_966  [key=1, style=dashed, color=darkseagreen4, label=xPersonValue];
m6_959 -> m6_960  [key=0, style=solid];
m6_959 -> m6_7  [key=2, style=dotted];
m6_959 -> m6_964  [key=1, style=dashed, color=darkseagreen4, label=eduPerson];
m6_959 -> m6_965  [key=1, style=dashed, color=darkseagreen4, label=eduPerson];
m6_959 -> m6_966  [key=1, style=dashed, color=darkseagreen4, label=eduPerson];
m6_959 -> m6_969  [key=1, style=dashed, color=darkseagreen4, label=eduPerson];
m6_959 -> m6_970  [key=1, style=dashed, color=darkseagreen4, label=eduPerson];
m6_959 -> m6_971  [key=1, style=dashed, color=darkseagreen4, label=eduPerson];
m6_959 -> m6_972  [key=1, style=dashed, color=darkseagreen4, label=eduPerson];
m6_959 -> m6_973  [key=1, style=dashed, color=darkseagreen4, label=eduPerson];
m6_959 -> m6_974  [key=1, style=dashed, color=darkseagreen4, label=eduPerson];
m6_959 -> m6_975  [key=1, style=dashed, color=darkseagreen4, label=eduPerson];
m6_959 -> m6_976  [key=1, style=dashed, color=darkseagreen4, label=eduPerson];
m6_959 -> m6_977  [key=1, style=dashed, color=darkseagreen4, label=eduPerson];
m6_959 -> m6_978  [key=1, style=dashed, color=darkseagreen4, label=eduPerson];
m6_959 -> m6_979  [key=1, style=dashed, color=darkseagreen4, label=eduPerson];
m6_959 -> m6_980  [key=1, style=dashed, color=darkseagreen4, label=eduPerson];
m6_959 -> m6_981  [key=1, style=dashed, color=darkseagreen4, label=eduPerson];
m6_967 -> m6_968  [key=0, style=solid];
m6_967 -> m6_969  [key=0, style=solid];
m6_967 -> m6_949  [key=2, style=dotted];
m6_968 -> m6_969  [key=0, style=solid];
m6_964 -> m6_965  [key=0, style=solid];
m6_964 -> m6_966  [key=0, style=solid];
m6_964 -> m6_989  [key=2, style=dotted];
m6_965 -> m6_963  [key=0, style=solid];
m6_965 -> m6_990  [key=2, style=dotted];
m6_966 -> m6_963  [key=0, style=solid];
m6_969 -> m6_970  [key=0, style=solid];
m6_969 -> m6_971  [key=0, style=solid];
m6_969 -> m6_938  [key=2, style=dotted];
m6_970 -> m6_971  [key=0, style=solid];
m6_971 -> m6_972  [key=0, style=solid];
m6_971 -> m6_973  [key=0, style=solid];
m6_971 -> m6_938  [key=2, style=dotted];
m6_972 -> m6_973  [key=0, style=solid];
m6_973 -> m6_974  [key=0, style=solid];
m6_973 -> m6_975  [key=0, style=solid];
m6_973 -> m6_938  [key=2, style=dotted];
m6_974 -> m6_975  [key=0, style=solid];
m6_975 -> m6_976  [key=0, style=solid];
m6_975 -> m6_977  [key=0, style=solid];
m6_975 -> m6_938  [key=2, style=dotted];
m6_976 -> m6_977  [key=0, style=solid];
m6_977 -> m6_978  [key=0, style=solid];
m6_977 -> m6_979  [key=0, style=solid];
m6_977 -> m6_938  [key=2, style=dotted];
m6_978 -> m6_979  [key=0, style=solid];
m6_979 -> m6_980  [key=0, style=solid];
m6_979 -> m6_981  [key=0, style=solid];
m6_979 -> m6_938  [key=2, style=dotted];
m6_980 -> m6_981  [key=0, style=solid];
m6_981 -> m6_982  [key=0, style=solid];
m6_983 -> m6_984  [key=0, style=solid];
m6_984 -> m6_928  [key=0, style=bold, color=blue];
m6_847 -> m6_848  [key=0, style=solid];
m6_848 -> m6_849  [key=0, style=solid];
m6_848 -> m6_851  [key=1, style=dashed, color=darkseagreen4, label=externalJson];
m6_848 -> m6_848  [key=3, color=darkorchid, style=bold, label="Local variable string externalJson"];
m6_849 -> m6_850  [key=0, style=solid];
m6_849 -> m6_277  [key=2, style=dotted];
m6_849 -> m6_851  [key=1, style=dashed, color=darkseagreen4, label=settings];
m6_851 -> m6_852  [key=0, style=solid];
m6_851 -> m6_278  [key=2, style=dotted];
m6_850 -> m6_851  [key=0, style=solid];
m6_850 -> m6_854  [key=2, style=dotted];
m6_850 -> m6_707  [key=2, style=dotted];
m6_852 -> m6_853  [key=0, style=solid];
m6_852 -> m6_9  [key=2, style=dotted];
m6_853 -> m6_847  [key=0, style=bold, color=blue];
m6_254 -> m6_255  [key=0, style=solid];
m6_255 -> m6_256  [key=0, style=solid];
m6_255 -> m6_29  [key=2, style=dotted];
m6_256 -> m6_254  [key=0, style=bold, color=blue];
m6_818 -> m6_819  [key=0, style=solid];
m6_819 -> m6_820  [key=0, style=solid];
m6_819 -> m6_529  [key=2, style=dotted];
m6_819 -> m6_823  [key=1, style=dashed, color=darkseagreen4, label=r1];
m6_820 -> m6_821  [key=0, style=solid];
m6_820 -> m6_8  [key=2, style=dotted];
m6_820 -> m6_822  [key=1, style=dashed, color=darkseagreen4, label=jsonText];
m6_823 -> m6_824  [key=0, style=solid];
m6_823 -> m6_9  [key=2, style=dotted];
m6_821 -> m6_822  [key=0, style=solid];
m6_821 -> m6_9  [key=2, style=dotted];
m6_822 -> m6_823  [key=0, style=solid];
m6_822 -> m6_10  [key=2, style=dotted];
m6_824 -> m6_818  [key=0, style=bold, color=blue];
m6_1026 -> m6_1027  [key=0, style=solid];
m6_1027 -> m6_1028  [key=0, style=solid];
m6_1027 -> m6_1029  [key=2, style=dotted];
m6_1028 -> m6_1026  [key=0, style=bold, color=blue];
m6_1073 -> m6_27  [key=1, style=dashed, color=green, label="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestCollectionPrivateParameterized"];
m6_1073 -> m6_31  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestCollectionPrivateParameterized"];
m6_1073 -> m6_35  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.TestCollectionPrivateParameterized"];
m6_1074 -> m6_174  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CustomConcurrentDictionary"];
m6_1075 -> m6_235  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.EnumerableClass<T>"];
m6_1075 -> m6_238  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.EnumerableClass<T>"];
m6_1075 -> m6_242  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.EnumerableClass<T>"];
m6_1076 -> m6_255  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.EnumerableClassFailure<T>"];
m6_1076 -> m6_258  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.EnumerableClassFailure<T>"];
m6_1076 -> m6_261  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.EnumerableClassFailure<T>"];
m6_1077 -> m6_268  [key=1, style=dashed, color=darkseagreen4, label=json];
m6_1078 -> m6_285  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.PrivateDefaultCtorWithIEnumerableCtorList<T>"];
m6_1079 -> m6_344  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CustomReadOnlyDictionary<TKey, TValue>"];
m6_1079 -> m6_347  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CustomReadOnlyDictionary<TKey, TValue>"];
m6_1079 -> m6_351  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CustomReadOnlyDictionary<TKey, TValue>"];
m6_1079 -> m6_355  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CustomReadOnlyDictionary<TKey, TValue>"];
m6_1079 -> m6_358  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CustomReadOnlyDictionary<TKey, TValue>"];
m6_1080 -> m6_367  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CustomReadOnlyCollection<T>"];
m6_1080 -> m6_370  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CustomReadOnlyCollection<T>"];
m6_1080 -> m6_373  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.CustomReadOnlyCollection<T>"];
m6_1081 -> m6_393  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.GenericListTestClass"];
m6_1082 -> m6_515  [key=1, style=dashed, color=darkseagreen4, label=json];
m6_1083 -> m6_518  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.PopulateReadOnlyTestClass"];
m6_1083 -> m6_519  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.PopulateReadOnlyTestClass"];
m6_1083 -> m6_520  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.PopulateReadOnlyTestClass"];
m6_1083 -> m6_521  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.PopulateReadOnlyTestClass"];
m6_1083 -> m6_522  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.PopulateReadOnlyTestClass"];
m6_1083 -> m6_523  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.PopulateReadOnlyTestClass"];
m6_1083 -> m6_524  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.PopulateReadOnlyTestClass"];
m6_1083 -> m6_525  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.PopulateReadOnlyTestClass"];
m6_1083 -> m6_526  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.PopulateReadOnlyTestClass"];
m6_1083 -> m6_527  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.PopulateReadOnlyTestClass"];
m6_1084 -> m6_603  [key=1, style=dashed, color=darkseagreen4, label=json];
m6_1085 -> m6_610  [key=1, style=dashed, color=darkseagreen4, label=json];
m6_1086 -> m6_630  [key=1, style=dashed, color=darkseagreen4, label=json];
m6_1087 -> m6_637  [key=1, style=dashed, color=darkseagreen4, label=json];
m6_1088 -> m6_644  [key=1, style=dashed, color=darkseagreen4, label=json];
m6_1089 -> m6_670  [key=1, style=dashed, color=darkseagreen4, label=json];
m6_1090 -> m6_677  [key=1, style=dashed, color=darkseagreen4, label=json];
m6_1091 -> m6_862  [key=1, style=dashed, color=darkseagreen4, label=json];
m6_1092 -> m6_876  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MyClass"];
m6_1092 -> m6_879  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MyClass"];
m6_1092 -> m6_882  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MyClass"];
m6_1092 -> m6_885  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MyClass"];
m6_1092 -> m6_889  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MyClass"];
m6_1092 -> m6_893  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MyClass"];
m6_1092 -> m6_897  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MyClass"];
m6_1092 -> m6_900  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MyClass"];
m6_1092 -> m6_904  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MyClass"];
m6_1092 -> m6_908  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MyClass"];
m6_1092 -> m6_912  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MyClass"];
m6_1092 -> m6_916  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.JsonSerializerCollectionsTests.MyClass"];
m6_1093 -> m6_919  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.CASResponce"];
m6_1093 -> m6_920  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.CASResponce"];
m6_1093 -> m6_921  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.CASResponce"];
m6_1093 -> m6_922  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.CASResponce"];
m6_1093 -> m6_923  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.CASResponce"];
m6_1093 -> m6_924  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.CASResponce"];
m6_1093 -> m6_925  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.CASResponce"];
m6_1093 -> m6_926  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.CASResponce"];
m6_1093 -> m6_931  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.CASResponce"];
m6_1093 -> m6_932  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.CASResponce"];
m6_1093 -> m6_933  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.CASResponce"];
m6_1093 -> m6_936  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.CASResponce"];
m6_1093 -> m6_940  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.CASResponce"];
m6_1093 -> m6_941  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.CASResponce"];
m6_1093 -> m6_943  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.CASResponce"];
m6_1093 -> m6_945  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.CASResponce"];
m6_1093 -> m6_946  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.CASResponce"];
m6_1093 -> m6_947  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.CASResponce"];
m6_1093 -> m6_968  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.CASResponce"];
m6_1093 -> m6_970  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.CASResponce"];
m6_1093 -> m6_972  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.CASResponce"];
m6_1093 -> m6_974  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.CASResponce"];
m6_1093 -> m6_976  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.CASResponce"];
m6_1093 -> m6_978  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.CASResponce"];
m6_1093 -> m6_980  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.CASResponce"];
m6_1093 -> m6_981  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.CASResponce"];
m6_1093 -> m6_982  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.CASResponce"];
m6_1093 -> m6_983  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.CASResponce"];
m6_1094 -> m6_991  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.ReadOnlyCollectionWithArrayArgument<T>"];
m6_1094 -> m6_994  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.ReadOnlyCollectionWithArrayArgument<T>"];
m6_1094 -> m6_997  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.ReadOnlyCollectionWithArrayArgument<T>"];
m6_1095 -> m6_1024  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.ReadOnlyIntegerList"];
m6_1095 -> m6_1027  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.ReadOnlyIntegerList"];
m6_1095 -> m6_1031  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.ReadOnlyIntegerList"];
m6_1096 -> m6_1033  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.GenericClass<T, TValue>"];
m6_1096 -> m6_1036  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.GenericClass<T, TValue>"];
m6_1096 -> m6_1037  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.GenericClass<T, TValue>"];
m6_1096 -> m6_1042  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Serialization.GenericClass<T, TValue>"];
m8_25 -> m8_26  [key=0, style=solid, color=green];
m8_25 -> m8_27  [key=1, style=dashed, color=green, label="Newtonsoft.Json.Linq.JToken"];
m8_25 -> m8_28  [key=1, style=dashed, color=green, label="Newtonsoft.Json.Linq.JToken"];
m8_25 -> m8_29  [key=1, style=dashed, color=green, label="Newtonsoft.Json.Linq.JToken"];
m8_25 -> m8_30  [key=1, style=dashed, color=green, label="Newtonsoft.Json.Linq.JToken"];
m8_25 -> m8_32  [key=1, style=dashed, color=green, label="Newtonsoft.Json.Linq.JToken"];
m8_26 -> m8_27  [key=0, style=solid, color=green];
m8_26 -> m8_28  [key=0, style=solid, color=green];
m8_27 -> m8_33  [key=0, style=solid, color=green];
m8_28 -> m8_29  [key=0, style=solid, color=green];
m8_28 -> m8_30  [key=0, style=solid, color=green];
m8_29 -> m8_27  [key=0, style=solid, color=green];
m8_29 -> m8_29  [key=1, style=dashed, color=green, label="Newtonsoft.Json.Linq.JToken"];
m8_29 -> m8_30  [key=1, style=dashed, color=green, label="Newtonsoft.Json.Linq.JToken"];
m8_29 -> m8_32  [key=1, style=dashed, color=green, label="Newtonsoft.Json.Linq.JToken"];
m8_33 -> m8_34  [key=0, style=solid, color=green];
m8_30 -> m8_31  [key=0, style=solid, color=green];
m8_30 -> m8_32  [key=0, style=solid, color=green];
m8_32 -> m8_32  [key=1, style=dashed, color=green, label="Newtonsoft.Json.Linq.JToken"];
m8_32 -> m8_33  [key=0, style=solid, color=green];
m8_31 -> m8_34  [key=0, style=solid, color=green];
m8_34 -> m8_25  [key=0, style=bold, color=blue];
m8_2 -> m8_3  [key=0, style=solid];
m8_2 -> m8_4  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JToken"];
m8_2 -> m8_6  [key=1, style=dashed, color=darkseagreen4, label=int];
m8_2 -> m8_7  [key=1, style=dashed, color=darkseagreen4, label=bool];
m8_2 -> m8_8  [key=1, style=dashed, color=darkseagreen4, label=int];
m8_2 -> m8_10  [key=1, style=dashed, color=darkseagreen4, label=int];
m8_2 -> m8_12  [key=1, style=dashed, color=darkseagreen4, label=int];
m8_2 -> m8_13  [key=1, style=dashed, color=darkseagreen4, label=bool];
m8_2 -> m8_14  [key=1, style=dashed, color=darkseagreen4, label=int];
m8_2 -> m8_16  [key=1, style=dashed, color=darkseagreen4, label=int];
m8_2 -> m8_17  [key=1, style=dashed, color=darkseagreen4, label=bool];
m8_2 -> m8_18  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JToken"];
m8_2 -> m8_9  [key=3, color=darkorchid, style=bold, label="method methodReturn Newtonsoft.Json.Linq.JToken GetTokenIndex"];
m8_3 -> m8_4  [key=0, style=solid];
m8_3 -> m8_5  [key=1, style=dashed, color=darkseagreen4, label=a];
m8_3 -> m8_6  [key=1, style=dashed, color=darkseagreen4, label=a];
m8_3 -> m8_10  [key=1, style=dashed, color=darkseagreen4, label=a];
m8_4 -> m8_5  [key=0, style=solid];
m8_4 -> m8_11  [key=1, style=dashed, color=darkseagreen4, label=c];
m8_4 -> m8_12  [key=1, style=dashed, color=darkseagreen4, label=c];
m8_4 -> m8_16  [key=1, style=dashed, color=darkseagreen4, label=c];
m8_6 -> m8_7  [key=0, style=solid];
m8_6 -> m8_10  [key=0, style=solid];
m8_7 -> m8_8  [key=0, style=solid];
m8_7 -> m8_9  [key=0, style=solid];
m8_8 -> m8_20  [key=0, style=solid];
m8_8 -> m8_21  [key=2, style=dotted];
m8_8 -> m8_22  [key=2, style=dotted];
m8_10 -> m8_20  [key=0, style=solid];
m8_12 -> m8_13  [key=0, style=solid];
m8_12 -> m8_16  [key=0, style=solid];
m8_13 -> m8_14  [key=0, style=solid];
m8_13 -> m8_15  [key=0, style=solid];
m8_14 -> m8_20  [key=0, style=solid];
m8_14 -> m8_21  [key=2, style=dotted];
m8_14 -> m8_22  [key=2, style=dotted];
m8_16 -> m8_20  [key=0, style=solid];
m8_17 -> m8_18  [key=0, style=solid];
m8_17 -> m8_19  [key=0, style=solid];
m8_18 -> m8_20  [key=0, style=solid];
m8_18 -> m8_21  [key=2, style=dotted];
m8_18 -> m8_23  [key=2, style=dotted];
m8_18 -> m8_24  [key=2, style=dotted];
m8_5 -> m8_6  [key=0, style=solid];
m8_5 -> m8_11  [key=0, style=solid];
m8_11 -> m8_12  [key=0, style=solid];
m8_11 -> m8_17  [key=0, style=solid];
m8_9 -> m8_20  [key=0, style=solid];
m8_15 -> m8_20  [key=0, style=solid];
m8_19 -> m8_20  [key=0, style=solid];
m8_20 -> m8_2  [key=0, style=bold, color=blue];
m8_0 -> m8_1  [key=0, style=solid];
m8_1 -> m8_0  [key=0, style=bold, color=blue];
m8_21 -> m8_9  [key=3, color=green, style=bold, label="method methodReturn Newtonsoft.Json.Linq.JToken GetNextScanValue"];
m8_21 -> m8_21  [key=3, color=green, style=bold, label="method methodReturn Newtonsoft.Json.Linq.JToken GetNextScanValue"];
m9_0 -> m9_1  [key=0, style=solid, color=green];
m9_0 -> m9_6  [key=0, style=bold, color=green];
m9_0 -> m9_8  [key=0, style=bold, color=green];
m9_0 -> m9_5  [key=1, style=dashed, color=green, label="Newtonsoft.Json.Linq.JToken"];
m9_0 -> m9_7  [key=1, style=dashed, color=green, label="Newtonsoft.Json.Linq.JToken"];
m9_1 -> m9_2  [key=0, style=solid, color=green];
m9_1 -> m9_9  [key=0, style=solid, color=green];
m9_1 -> m9_7  [key=1, style=dashed, color=green, label=t];
m9_1 -> m9_8  [key=1, style=dashed, color=green, label=t];
m9_8 -> m9_1  [key=0, style=solid, color=green];
m9_7 -> m9_1  [key=0, style=solid, color=green];
m9_7 -> m9_8  [key=0, style=solid, color=green];
m9_7 -> m9_11  [key=2, style=dotted, color=green];
m9_2 -> m9_3  [key=0, style=solid, color=green];
m9_2 -> m9_4  [key=0, style=solid, color=green];
m9_6 -> m9_4  [key=0, style=solid, color=green];
m9_5 -> m9_6  [key=0, style=solid, color=green];
m9_5 -> m9_4  [key=0, style=solid, color=green];
m9_5 -> m9_11  [key=2, style=dotted, color=green];
m9_4 -> m9_6  [key=1, style=dashed, color=green, label=d];
m9_4 -> m9_5  [key=0, style=solid, color=green];
m9_4 -> m9_7  [key=0, style=solid, color=green];
m9_4 -> m9_10  [key=2, style=dotted, color=green];
m9_3 -> m9_4  [key=0, style=solid, color=green];
m9_9 -> m9_0  [key=0, style=bold, color=blue];
m9_12 -> m9_5  [key=1, style=dashed, color=green, label="Newtonsoft.Json.Linq.JsonPath.QueryScanFilter"];
m9_12 -> m9_7  [key=1, style=dashed, color=green, label="Newtonsoft.Json.Linq.JsonPath.QueryScanFilter"];
m10_17 -> m10_18  [key=0, style=solid];
m10_17 -> m10_19  [key=0, style=solid];
m10_0 -> m10_1  [key=0, style=solid];
m10_0 -> m10_3  [key=0, style=bold, color=crimson];
m10_0 -> m10_16  [key=0, style=bold, color=crimson];
m10_0 -> m10_18  [key=0, style=bold, color=crimson];
m10_1 -> m10_2  [key=0, style=solid];
m10_1 -> m10_20  [key=0, style=solid];
m10_1 -> m10_3  [key=1, style=dashed, color=darkseagreen4, label=c];
m10_1 -> m10_4  [key=1, style=dashed, color=darkseagreen4, label=c];
m10_1 -> m10_5  [key=1, style=dashed, color=green, label=c];
m10_1 -> m10_9  [key=1, style=dashed, color=red, label=c];
m10_1 -> m10_11  [key=1, style=dashed, color=red, label=c];
m10_1 -> m10_7  [key=1, style=dashed, color=green, label=c];
m10_3 -> m10_4  [key=0, style=solid];
m10_16 -> m10_19  [key=0, style=solid];
m10_18 -> m10_19  [key=0, style=solid];
m10_2 -> m10_3  [key=0, style=solid];
m10_2 -> m10_4  [key=0, style=solid];
m10_4 -> m10_5  [key=0, style=solid, color=green];
m10_4 -> m10_9  [key=1, style=dashed, color=red, label=value];
m10_4 -> m10_10  [key=1, style=dashed, color=red, label=value];
m10_4 -> m10_11  [key=1, style=dashed, color=red, label=value];
m10_4 -> m10_12  [key=1, style=dashed, color=red, label=value];
m10_4 -> m10_1  [key=3, color=darkorchid, style=bold, label="Local variable Newtonsoft.Json.Linq.JToken value"];
m10_4 -> m10_7  [key=1, style=dashed, color=green, label=value];
m10_5 -> m10_6  [key=0, style=solid, color=green];
m10_5 -> m10_7  [key=1, style=dashed, color=green, label=container];
m10_5 -> m10_8  [key=1, style=dashed, color=red, label=container];
m10_5 -> m10_1  [key=3, color=red, style=bold, label="Local variable Newtonsoft.Json.Linq.JToken container"];
m10_9 -> m10_10  [key=0, style=solid, color=red];
m10_9 -> m10_11  [key=0, style=solid, color=red];
m10_11 -> m10_12  [key=0, style=solid, color=red];
m10_11 -> m10_1  [key=0, style=solid, color=red];
m10_10 -> m10_8  [key=0, style=solid, color=red];
m10_10 -> m10_10  [key=1, style=dashed, color=red, label=value];
m10_10 -> m10_11  [key=1, style=dashed, color=red, label=value];
m10_10 -> m10_12  [key=1, style=dashed, color=red, label=value];
m10_12 -> m10_13  [key=0, style=solid, color=red];
m10_12 -> m10_12  [key=1, style=dashed, color=red, label=value];
m10_12 -> m10_18  [key=1, style=dashed, color=red, label=value];
m10_12 -> m10_19  [key=1, style=dashed, color=red, label=value];
m10_6 -> m10_7  [key=0, style=solid, color=green];
m10_6 -> m10_1  [key=0, style=solid];
m10_7 -> m10_8  [key=0, style=solid, color=green];
m10_7 -> m10_9  [key=0, style=solid, color=red];
m10_7 -> m10_7  [key=1, style=dashed, color=green, label=value];
m10_7 -> m10_17  [key=2, style=dotted, color=green];
m10_7 -> m10_13  [key=1, style=dashed, color=green, label=value];
m10_7 -> m10_18  [key=1, style=dashed, color=green, label=value];
m10_7 -> m10_19  [key=1, style=dashed, color=green, label=value];
m10_8 -> m10_13  [key=0, style=solid, color=green];
m10_8 -> m10_18  [key=1, style=dashed, color=red, label=value];
m10_8 -> m10_19  [key=1, style=dashed, color=red, label=value];
m10_8 -> m10_1  [key=0, style=solid, color=green];
m10_13 -> m10_14  [key=0, style=solid];
m10_13 -> m10_15  [key=1, style=dashed, color=darkseagreen4, label=e];
m10_13 -> m10_16  [key=1, style=dashed, color=darkseagreen4, label=e];
m10_19 -> m10_6  [key=0, style=solid];
m10_14 -> m10_15  [key=0, style=solid];
m10_14 -> m10_17  [key=0, style=solid];
m10_15 -> m10_16  [key=0, style=solid];
m10_15 -> m10_19  [key=0, style=solid];
m10_20 -> m10_0  [key=0, style=bold, color=blue];
m10_21 -> m10_2  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.ScanFilter"];
m10_21 -> m10_15  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.ScanFilter"];
m10_21 -> m10_17  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.ScanFilter"];
m11_14 -> m11_15  [key=0, style=solid];
m11_14 -> m11_13  [key=0, style=solid];
m11_0 -> m11_1  [key=0, style=solid];
m11_0 -> m11_15  [key=0, style=bold, color=crimson];
m11_1 -> m11_2  [key=0, style=solid];
m11_1 -> m11_17  [key=0, style=solid];
m11_1 -> m11_3  [key=1, style=dashed, color=green, label=c];
m11_1 -> m11_7  [key=1, style=dashed, color=red, label=c];
m11_1 -> m11_9  [key=1, style=dashed, color=red, label=c];
m11_1 -> m11_5  [key=1, style=dashed, color=green, label=c];
m11_15 -> m11_13  [key=0, style=solid];
m11_2 -> m11_3  [key=0, style=solid, color=green];
m11_2 -> m11_7  [key=1, style=dashed, color=red, label=value];
m11_2 -> m11_8  [key=1, style=dashed, color=red, label=value];
m11_2 -> m11_9  [key=1, style=dashed, color=red, label=value];
m11_2 -> m11_10  [key=1, style=dashed, color=red, label=value];
m11_2 -> m11_1  [key=3, color=darkorchid, style=bold, label="Local variable Newtonsoft.Json.Linq.JToken value"];
m11_2 -> m11_5  [key=1, style=dashed, color=green, label=value];
m11_3 -> m11_4  [key=0, style=solid, color=green];
m11_3 -> m11_5  [key=1, style=dashed, color=green, label=container];
m11_3 -> m11_6  [key=1, style=dashed, color=red, label=container];
m11_3 -> m11_1  [key=3, color=red, style=bold, label="Local variable Newtonsoft.Json.Linq.JToken container"];
m11_7 -> m11_8  [key=0, style=solid, color=red];
m11_7 -> m11_9  [key=0, style=solid, color=red];
m11_9 -> m11_10  [key=0, style=solid, color=red];
m11_9 -> m11_1  [key=0, style=solid, color=red];
m11_8 -> m11_6  [key=0, style=solid, color=red];
m11_8 -> m11_8  [key=1, style=dashed, color=red, label=value];
m11_8 -> m11_9  [key=1, style=dashed, color=red, label=value];
m11_8 -> m11_10  [key=1, style=dashed, color=red, label=value];
m11_10 -> m11_11  [key=0, style=solid, color=red];
m11_10 -> m11_10  [key=1, style=dashed, color=red, label=value];
m11_10 -> m11_16  [key=1, style=dashed, color=red, label=value];
m11_4 -> m11_5  [key=0, style=solid, color=green];
m11_4 -> m11_1  [key=0, style=solid];
m11_5 -> m11_6  [key=0, style=solid, color=green];
m11_5 -> m11_7  [key=0, style=solid, color=red];
m11_5 -> m11_5  [key=1, style=dashed, color=green, label=value];
m11_5 -> m11_14  [key=2, style=dotted, color=green];
m11_5 -> m11_11  [key=1, style=dashed, color=green, label=value];
m11_5 -> m11_16  [key=1, style=dashed, color=green, label=value];
m11_6 -> m11_11  [key=0, style=solid, color=green];
m11_6 -> m11_16  [key=1, style=dashed, color=red, label=value];
m11_6 -> m11_1  [key=0, style=solid, color=green];
m11_11 -> m11_12  [key=0, style=solid];
m11_11 -> m11_14  [key=1, style=dashed, color=darkseagreen4, label=e];
m11_11 -> m11_15  [key=1, style=dashed, color=darkseagreen4, label=e];
m11_16 -> m11_4  [key=0, style=solid];
m11_12 -> m11_13  [key=0, style=solid];
m11_12 -> m11_16  [key=0, style=solid];
m11_13 -> m11_14  [key=0, style=solid];
m11_13 -> m11_16  [key=0, style=solid];
m11_17 -> m11_0  [key=0, style=bold, color=blue];
m11_18 -> m11_13  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Linq.JsonPath.ScanMultipleFilter"];
m13_80 -> m13_81  [key=0, style=solid];
m13_81 -> m13_82  [key=0, style=solid];
m13_81 -> m13_83  [key=2, style=dotted];
m13_82 -> m13_80  [key=0, style=bold, color=blue];
m13_12 -> m13_13  [key=0, style=solid];
m13_13 -> m13_14  [key=0, style=solid];
m13_13 -> m13_15  [key=2, style=dotted];
m13_14 -> m13_12  [key=0, style=bold, color=blue];
m13_73 -> m13_74  [key=0, style=solid];
m13_74 -> m13_75  [key=0, style=solid];
m13_74 -> m13_76  [key=2, style=dotted];
m13_74 -> m13_77  [key=2, style=dotted];
m13_75 -> m13_73  [key=0, style=bold, color=blue];
m13_16 -> m13_17  [key=0, style=solid];
m13_16 -> m13_18  [key=1, style=dashed, color=darkseagreen4, label=object];
m13_16 -> m13_19  [key=1, style=dashed, color=darkseagreen4, label=object];
m13_17 -> m13_18  [key=0, style=solid];
m13_17 -> m13_23  [key=2, style=dotted];
m13_17 -> m13_19  [key=1, style=dashed, color=darkseagreen4, label=ms];
m13_17 -> m13_20  [key=1, style=dashed, color=darkseagreen4, label=ms];
m13_18 -> m13_19  [key=0, style=solid];
m13_18 -> m13_24  [key=2, style=dotted];
m13_18 -> m13_25  [key=2, style=dotted];
m13_19 -> m13_20  [key=0, style=solid];
m13_19 -> m13_26  [key=2, style=dotted];
m13_20 -> m13_21  [key=0, style=solid];
m13_20 -> m13_27  [key=2, style=dotted];
m13_21 -> m13_22  [key=0, style=solid];
m13_21 -> m13_28  [key=2, style=dotted];
m13_22 -> m13_16  [key=0, style=bold, color=blue];
m13_4 -> m13_5  [key=0, style=solid];
m13_5 -> m13_6  [key=0, style=solid];
m13_5 -> m13_7  [key=2, style=dotted];
m13_6 -> m13_4  [key=0, style=bold, color=blue];
m13_87 -> m13_88  [key=0, style=solid];
m13_87 -> m13_84  [key=3, color=darkorchid, style=bold, label="Parameter variable object value"];
m13_87 -> m13_85  [key=3, color=darkorchid, style=bold, label="Parameter variable string message"];
m13_88 -> m13_89  [key=0, style=solid];
m13_88 -> m13_90  [key=2, style=dotted];
m13_89 -> m13_87  [key=0, style=bold, color=blue];
m13_96 -> m13_104  [key=0, style=solid];
m13_96 -> m13_105  [key=1, style=dashed, color=darkseagreen4, label=string];
m13_96 -> m13_106  [key=1, style=dashed, color=darkseagreen4, label=string];
m13_96 -> m13_91  [key=3, color=darkorchid, style=bold, label="Parameter variable string s"];
m13_96 -> m13_98  [key=3, color=darkorchid, style=bold, label="Parameter variable string s"];
m13_96 -> m13_96  [key=3, color=darkorchid, style=bold, label="method methodReturn string Normalize"];
m13_104 -> m13_105  [key=0, style=solid];
m13_104 -> m13_106  [key=0, style=solid];
m13_105 -> m13_106  [key=0, style=solid];
m13_105 -> m13_108  [key=2, style=dotted];
m13_105 -> m13_105  [key=1, style=dashed, color=darkseagreen4, label=string];
m13_106 -> m13_107  [key=0, style=solid];
m13_107 -> m13_96  [key=0, style=bold, color=blue];
m13_53 -> m13_54  [key=0, style=solid];
m13_53 -> m13_55  [key=3, color=darkorchid, style=bold, label="method methodReturn byte[] HexToBytes"];
m13_54 -> m13_55  [key=0, style=solid];
m13_54 -> m13_52  [key=2, style=dotted];
m13_54 -> m13_58  [key=1, style=dashed, color=darkseagreen4, label=fixedHex];
m13_55 -> m13_56  [key=0, style=solid];
m13_55 -> m13_62  [key=1, style=dashed, color=darkseagreen4, label=bytes];
m13_55 -> m13_66  [key=1, style=dashed, color=darkseagreen4, label=bytes];
m13_58 -> m13_59  [key=0, style=solid];
m13_58 -> m13_66  [key=0, style=solid];
m13_56 -> m13_57  [key=0, style=solid];
m13_56 -> m13_62  [key=1, style=dashed, color=darkseagreen4, label=shift];
m13_56 -> m13_63  [key=1, style=dashed, color=darkseagreen4, label=shift];
m13_56 -> m13_56  [key=3, color=darkorchid, style=bold, label="Local variable int shift"];
m13_62 -> m13_63  [key=0, style=solid];
m13_66 -> m13_67  [key=0, style=solid];
m13_57 -> m13_58  [key=0, style=solid];
m13_57 -> m13_62  [key=1, style=dashed, color=darkseagreen4, label=offset];
m13_57 -> m13_65  [key=1, style=dashed, color=darkseagreen4, label=offset];
m13_57 -> m13_35  [key=3, color=darkorchid, style=bold, label="Local variable int offset"];
m13_63 -> m13_64  [key=0, style=solid];
m13_63 -> m13_63  [key=1, style=dashed, color=darkseagreen4, label=shift];
m13_65 -> m13_58  [key=0, style=solid];
m13_65 -> m13_65  [key=1, style=dashed, color=darkseagreen4, label=offset];
m13_59 -> m13_60  [key=0, style=solid];
m13_59 -> m13_61  [key=1, style=dashed, color=darkseagreen4, label=b];
m13_59 -> m13_62  [key=1, style=dashed, color=darkseagreen4, label=b];
m13_60 -> m13_61  [key=0, style=solid];
m13_60 -> m13_62  [key=0, style=solid];
m13_61 -> m13_62  [key=0, style=solid];
m13_61 -> m13_61  [key=1, style=dashed, color=darkseagreen4, label=b];
m13_64 -> m13_65  [key=0, style=solid];
m13_64 -> m13_58  [key=0, style=solid];
m13_67 -> m13_53  [key=0, style=bold, color=blue];
m13_8 -> m13_9  [key=0, style=solid];
m13_9 -> m13_10  [key=0, style=solid];
m13_9 -> m13_11  [key=2, style=dotted];
m13_10 -> m13_8  [key=0, style=bold, color=blue];
m13_98 -> m13_99  [key=0, style=solid];
m13_98 -> m13_100  [key=1, style=dashed, color=darkseagreen4, label=string];
m13_98 -> m13_96  [key=3, color=darkorchid, style=bold, label="Parameter variable string s2"];
m13_98 -> m13_116  [key=3, color=darkorchid, style=bold, label="Parameter variable string s1"];
m13_98 -> m13_137  [key=3, color=darkorchid, style=bold, label="Parameter variable string s1"];
m13_99 -> m13_100  [key=0, style=solid];
m13_99 -> m13_96  [key=2, style=dotted];
m13_99 -> m13_99  [key=1, style=dashed, color=darkseagreen4, label=string];
m13_99 -> m13_101  [key=1, style=dashed, color=darkseagreen4, label=string];
m13_100 -> m13_101  [key=0, style=solid];
m13_100 -> m13_96  [key=2, style=dotted];
m13_100 -> m13_100  [key=1, style=dashed, color=darkseagreen4, label=string];
m13_101 -> m13_102  [key=0, style=solid];
m13_101 -> m13_103  [key=2, style=dotted];
m13_102 -> m13_98  [key=0, style=bold, color=blue];
m13_76 -> m13_78  [key=0, style=solid];
m13_76 -> m13_73  [key=3, color=darkorchid, style=bold, label="Parameter variable string json"];
m13_78 -> m13_79  [key=0, style=solid];
m13_78 -> m13_52  [key=2, style=dotted];
m13_79 -> m13_76  [key=0, style=bold, color=blue];
m13_0 -> m13_1  [key=0, style=solid];
m13_1 -> m13_2  [key=0, style=solid];
m13_1 -> m13_3  [key=2, style=dotted];
m13_2 -> m13_0  [key=0, style=bold, color=blue];
m13_29 -> m13_30  [key=0, style=solid];
m13_30 -> m13_31  [key=0, style=solid];
m13_30 -> m13_32  [key=2, style=dotted];
m13_31 -> m13_29  [key=0, style=bold, color=blue];
m13_45 -> m13_46  [key=0, style=solid];
m13_45 -> m13_47  [key=1, style=dashed, color=darkseagreen4, label=bool];
m13_45 -> m13_42  [key=3, color=darkorchid, style=bold, label="Parameter variable byte[] bytes"];
m13_45 -> m13_43  [key=3, color=darkorchid, style=bold, label="Parameter variable bool removeDashes"];
m13_46 -> m13_47  [key=0, style=solid];
m13_46 -> m13_51  [key=2, style=dotted];
m13_46 -> m13_48  [key=1, style=dashed, color=darkseagreen4, label=hex];
m13_46 -> m13_49  [key=1, style=dashed, color=darkseagreen4, label=hex];
m13_47 -> m13_48  [key=0, style=solid];
m13_47 -> m13_49  [key=0, style=solid];
m13_48 -> m13_49  [key=0, style=solid];
m13_48 -> m13_52  [key=2, style=dotted];
m13_48 -> m13_48  [key=1, style=dashed, color=darkseagreen4, label=hex];
m13_49 -> m13_50  [key=0, style=solid];
m13_50 -> m13_45  [key=0, style=bold, color=blue];
m13_68 -> m13_69  [key=0, style=solid];
m13_69 -> m13_70  [key=0, style=solid];
m13_70 -> m13_71  [key=0, style=solid];
m13_71 -> m13_72  [key=0, style=solid];
m13_72 -> m13_68  [key=0, style=bold, color=blue];
m13_33 -> m13_34  [key=0, style=solid];
m13_33 -> m13_35  [key=1, style=dashed, color=darkseagreen4, label="System.DateTime"];
m13_34 -> m13_35  [key=0, style=solid];
m13_34 -> m13_36  [key=1, style=dashed, color=darkseagreen4, label=chars];
m13_35 -> m13_36  [key=0, style=solid];
m13_35 -> m13_38  [key=2, style=dotted];
m13_35 -> m13_39  [key=2, style=dotted];
m13_35 -> m13_40  [key=2, style=dotted];
m13_36 -> m13_37  [key=0, style=solid];
m13_36 -> m13_41  [key=2, style=dotted];
m13_37 -> m13_33  [key=0, style=bold, color=blue];
m13_91 -> m13_92  [key=0, style=solid];
m13_91 -> m13_93  [key=1, style=dashed, color=darkseagreen4, label=string];
m13_91 -> m13_96  [key=3, color=darkorchid, style=bold, label="Parameter variable string actual"];
m13_92 -> m13_93  [key=0, style=solid];
m13_92 -> m13_96  [key=2, style=dotted];
m13_92 -> m13_92  [key=1, style=dashed, color=darkseagreen4, label=string];
m13_92 -> m13_94  [key=1, style=dashed, color=darkseagreen4, label=string];
m13_93 -> m13_94  [key=0, style=solid];
m13_93 -> m13_96  [key=2, style=dotted];
m13_93 -> m13_93  [key=1, style=dashed, color=darkseagreen4, label=string];
m13_94 -> m13_95  [key=0, style=solid];
m13_94 -> m13_97  [key=2, style=dotted];
m13_95 -> m13_91  [key=0, style=bold, color=blue];
m13_84 -> m13_85  [key=0, style=solid];
m13_85 -> m13_86  [key=0, style=solid];
m13_85 -> m13_87  [key=2, style=dotted];
m13_86 -> m13_84  [key=0, style=bold, color=blue];
m13_42 -> m13_43  [key=0, style=solid];
m13_42 -> m13_45  [key=3, color=darkorchid, style=bold, label="method methodReturn string BytesToHex"];
m13_43 -> m13_44  [key=0, style=solid];
m13_43 -> m13_45  [key=2, style=dotted];
m13_44 -> m13_42  [key=0, style=bold, color=blue];
m13_109 -> m13_110  [key=0, style=solid];
m13_109 -> m13_114  [key=1, style=dashed, color=darkseagreen4, label="params string[]"];
m13_109 -> m13_116  [key=1, style=dashed, color=darkseagreen4, label="params string[]"];
m13_109 -> m13_119  [key=1, style=dashed, color=darkseagreen4, label="params string[]"];
m13_109 -> m13_85  [key=3, color=darkorchid, style=bold, label="method methodReturn TException Throws"];
m13_109 -> m13_113  [key=3, color=darkorchid, style=bold, label="method methodReturn TException Throws"];
m13_110 -> m13_111  [key=0, style=solid];
m13_110 -> m13_123  [key=2, style=dotted];
m13_114 -> m13_115  [key=0, style=solid];
m13_114 -> m13_116  [key=0, style=solid];
m13_116 -> m13_117  [key=0, style=solid];
m13_116 -> m13_119  [key=0, style=solid];
m13_119 -> m13_122  [key=0, style=solid];
m13_119 -> m13_125  [key=2, style=dotted];
m13_119 -> m13_126  [key=2, style=dotted];
m13_111 -> m13_112  [key=0, style=solid];
m13_111 -> m13_124  [key=2, style=dotted];
m13_112 -> m13_122  [key=0, style=solid];
m13_113 -> m13_114  [key=0, style=solid];
m13_115 -> m13_122  [key=0, style=solid];
m13_117 -> m13_118  [key=0, style=solid];
m13_117 -> m13_116  [key=0, style=solid];
m13_117 -> m13_98  [key=2, style=dotted];
m13_118 -> m13_122  [key=0, style=solid];
m13_120 -> m13_121  [key=0, style=solid];
m13_121 -> m13_122  [key=0, style=solid];
m13_121 -> m13_127  [key=2, style=dotted];
m13_121 -> m13_128  [key=2, style=dotted];
m13_121 -> m13_129  [key=2, style=dotted];
m13_122 -> m13_109  [key=0, style=bold, color=blue];
m13_130 -> m13_131  [key=0, style=solid];
m13_130 -> m13_135  [key=1, style=dashed, color=darkseagreen4, label="params string[]"];
m13_130 -> m13_137  [key=1, style=dashed, color=darkseagreen4, label="params string[]"];
m13_130 -> m13_140  [key=1, style=dashed, color=darkseagreen4, label="params string[]"];
m13_130 -> m13_85  [key=3, color=darkorchid, style=bold, label="method methodReturn System.Threading.Tasks.Task<TException> ThrowsAsync"];
m13_130 -> m13_134  [key=3, color=darkorchid, style=bold, label="method methodReturn System.Threading.Tasks.Task<TException> ThrowsAsync"];
m13_131 -> m13_132  [key=0, style=solid];
m13_131 -> m13_144  [key=2, style=dotted];
m13_135 -> m13_136  [key=0, style=solid];
m13_135 -> m13_137  [key=0, style=solid];
m13_137 -> m13_138  [key=0, style=solid];
m13_137 -> m13_140  [key=0, style=solid];
m13_140 -> m13_143  [key=0, style=solid];
m13_140 -> m13_125  [key=2, style=dotted];
m13_140 -> m13_126  [key=2, style=dotted];
m13_132 -> m13_133  [key=0, style=solid];
m13_132 -> m13_124  [key=2, style=dotted];
m13_133 -> m13_143  [key=0, style=solid];
m13_134 -> m13_135  [key=0, style=solid];
m13_136 -> m13_143  [key=0, style=solid];
m13_138 -> m13_139  [key=0, style=solid];
m13_138 -> m13_137  [key=0, style=solid];
m13_138 -> m13_98  [key=2, style=dotted];
m13_139 -> m13_143  [key=0, style=solid];
m13_141 -> m13_142  [key=0, style=solid];
m13_142 -> m13_143  [key=0, style=solid];
m13_142 -> m13_127  [key=2, style=dotted];
m13_142 -> m13_128  [key=2, style=dotted];
m13_142 -> m13_129  [key=2, style=dotted];
m13_143 -> m13_130  [key=0, style=bold, color=blue];
m13_145 -> m13_43  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.TestFixtureBase"];
m13_145 -> m13_74  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.TestFixtureBase"];
m16_445 -> m16_446  [key=0, style=solid];
m16_446 -> m16_447  [key=0, style=solid];
m16_446 -> m16_450  [key=1, style=dashed, color=darkseagreen4, label=json];
m16_446 -> m16_446  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m16_447 -> m16_448  [key=0, style=solid];
m16_447 -> m16_221  [key=2, style=dotted];
m16_447 -> m16_449  [key=1, style=dashed, color=darkseagreen4, label=newDoc];
m16_447 -> m16_452  [key=1, style=dashed, color=darkseagreen4, label=newDoc];
m16_450 -> m16_451  [key=0, style=solid];
m16_450 -> m16_75  [key=2, style=dotted];
m16_448 -> m16_449  [key=0, style=solid];
m16_448 -> m16_455  [key=2, style=dotted];
m16_449 -> m16_450  [key=0, style=solid];
m16_449 -> m16_455  [key=2, style=dotted];
m16_449 -> m16_122  [key=2, style=dotted];
m16_452 -> m16_453  [key=0, style=solid];
m16_452 -> m16_15  [key=2, style=dotted];
m16_451 -> m16_452  [key=0, style=solid];
m16_451 -> m16_51  [key=2, style=dotted];
m16_451 -> m16_455  [key=2, style=dotted];
m16_451 -> m16_122  [key=2, style=dotted];
m16_453 -> m16_454  [key=0, style=solid];
m16_453 -> m16_456  [key=2, style=dotted];
m16_454 -> m16_445  [key=0, style=bold, color=blue];
m16_821 -> m16_822  [key=0, style=solid];
m16_822 -> m16_823  [key=0, style=solid];
m16_822 -> m16_822  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m16_823 -> m16_824  [key=0, style=solid];
m16_823 -> m16_75  [key=2, style=dotted];
m16_823 -> m16_825  [key=1, style=dashed, color=darkseagreen4, label=dxml];
m16_824 -> m16_825  [key=0, style=solid];
m16_824 -> m16_271  [key=2, style=dotted];
m16_824 -> m16_23  [key=2, style=dotted];
m16_825 -> m16_826  [key=0, style=solid];
m16_825 -> m16_271  [key=2, style=dotted];
m16_825 -> m16_84  [key=2, style=dotted];
m16_826 -> m16_821  [key=0, style=bold, color=blue];
m16_748 -> m16_749  [key=0, style=solid];
m16_749 -> m16_750  [key=0, style=solid];
m16_749 -> m16_753  [key=1, style=dashed, color=darkseagreen4, label=json];
m16_749 -> m16_749  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m16_750 -> m16_751  [key=0, style=solid];
m16_750 -> m16_221  [key=2, style=dotted];
m16_750 -> m16_752  [key=1, style=dashed, color=darkseagreen4, label=node];
m16_753 -> m16_754  [key=0, style=solid];
m16_753 -> m16_23  [key=2, style=dotted];
m16_751 -> m16_752  [key=0, style=solid];
m16_751 -> m16_23  [key=2, style=dotted];
m16_752 -> m16_753  [key=0, style=solid];
m16_752 -> m16_15  [key=2, style=dotted];
m16_754 -> m16_748  [key=0, style=bold, color=blue];
m16_658 -> m16_661  [key=0, style=solid];
m16_658 -> m16_664  [key=1, style=dashed, color=darkseagreen4, label="System.IO.Stream"];
m16_658 -> m16_668  [key=1, style=dashed, color=darkseagreen4, label="System.IO.Stream"];
m16_658 -> m16_649  [key=3, color=darkorchid, style=bold, label="Parameter variable System.IO.Stream json"];
m16_658 -> m16_650  [key=3, color=darkorchid, style=bold, label="Parameter variable System.IO.Stream xml"];
m16_661 -> m16_662  [key=0, style=solid];
m16_661 -> m16_97  [key=2, style=dotted];
m16_661 -> m16_663  [key=1, style=dashed, color=darkseagreen4, label=settings];
m16_664 -> m16_665  [key=0, style=solid];
m16_664 -> m16_45  [key=2, style=dotted];
m16_664 -> m16_673  [key=2, style=dotted];
m16_664 -> m16_666  [key=1, style=dashed, color=darkseagreen4, label=reader];
m16_668 -> m16_669  [key=0, style=solid];
m16_668 -> m16_61  [key=2, style=dotted];
m16_662 -> m16_663  [key=0, style=solid];
m16_662 -> m16_671  [key=2, style=dotted];
m16_662 -> m16_672  [key=2, style=dotted];
m16_663 -> m16_664  [key=0, style=solid];
m16_663 -> m16_645  [key=2, style=dotted];
m16_663 -> m16_665  [key=1, style=dashed, color=darkseagreen4, label=serializer];
m16_665 -> m16_666  [key=0, style=solid];
m16_665 -> m16_647  [key=2, style=dotted];
m16_665 -> m16_669  [key=1, style=dashed, color=darkseagreen4, label=doc];
m16_666 -> m16_667  [key=0, style=solid];
m16_666 -> m16_668  [key=0, style=solid];
m16_666 -> m16_47  [key=2, style=dotted];
m16_669 -> m16_670  [key=0, style=solid];
m16_669 -> m16_320  [key=2, style=dotted];
m16_667 -> m16_670  [key=0, style=solid];
m16_667 -> m16_674  [key=2, style=dotted];
m16_670 -> m16_658  [key=0, style=bold, color=blue];
m16_68 -> m16_69  [key=0, style=solid];
m16_69 -> m16_70  [key=0, style=solid];
m16_69 -> m16_73  [key=1, style=dashed, color=darkseagreen4, label=json1];
m16_69 -> m16_69  [key=3, color=darkorchid, style=bold, label="Local variable string json1"];
m16_70 -> m16_71  [key=0, style=solid];
m16_70 -> m16_75  [key=2, style=dotted];
m16_70 -> m16_72  [key=1, style=dashed, color=darkseagreen4, label=doc];
m16_73 -> m16_74  [key=0, style=solid];
m16_73 -> m16_23  [key=2, style=dotted];
m16_71 -> m16_72  [key=0, style=solid];
m16_71 -> m16_51  [key=2, style=dotted];
m16_71 -> m16_23  [key=2, style=dotted];
m16_72 -> m16_73  [key=0, style=solid];
m16_72 -> m16_22  [key=2, style=dotted];
m16_74 -> m16_68  [key=0, style=bold, color=blue];
m16_85 -> m16_86  [key=0, style=solid];
m16_86 -> m16_87  [key=0, style=solid];
m16_86 -> m16_95  [key=2, style=dotted];
m16_86 -> m16_88  [key=1, style=dashed, color=darkseagreen4, label=json];
m16_86 -> m16_92  [key=1, style=dashed, color=darkseagreen4, label=json];
m16_87 -> m16_88  [key=0, style=solid];
m16_88 -> m16_89  [key=0, style=solid];
m16_88 -> m16_96  [key=2, style=dotted];
m16_92 -> m16_93  [key=0, style=solid];
m16_92 -> m16_99  [key=2, style=dotted];
m16_89 -> m16_90  [key=0, style=solid];
m16_89 -> m16_48  [key=2, style=dotted];
m16_90 -> m16_91  [key=0, style=solid];
m16_90 -> m16_97  [key=2, style=dotted];
m16_91 -> m16_92  [key=0, style=solid];
m16_91 -> m16_98  [key=2, style=dotted];
m16_93 -> m16_94  [key=0, style=solid];
m16_93 -> m16_51  [key=2, style=dotted];
m16_93 -> m16_100  [key=2, style=dotted];
m16_94 -> m16_85  [key=0, style=bold, color=blue];
m16_134 -> m16_135  [key=0, style=solid];
m16_135 -> m16_136  [key=0, style=solid];
m16_135 -> m16_137  [key=1, style=dashed, color=darkseagreen4, label=xml];
m16_135 -> m16_135  [key=3, color=darkorchid, style=bold, label="Local variable string xml"];
m16_136 -> m16_137  [key=0, style=solid];
m16_136 -> m16_132  [key=2, style=dotted];
m16_136 -> m16_138  [key=1, style=dashed, color=darkseagreen4, label=xmlDocument];
m16_137 -> m16_138  [key=0, style=solid];
m16_137 -> m16_133  [key=2, style=dotted];
m16_138 -> m16_139  [key=0, style=solid];
m16_138 -> m16_142  [key=2, style=dotted];
m16_138 -> m16_143  [key=2, style=dotted];
m16_139 -> m16_140  [key=0, style=solid];
m16_139 -> m16_121  [key=2, style=dotted];
m16_140 -> m16_141  [key=0, style=solid];
m16_140 -> m16_122  [key=2, style=dotted];
m16_141 -> m16_134  [key=0, style=bold, color=blue];
m16_602 -> m16_603  [key=0, style=solid];
m16_603 -> m16_604  [key=0, style=solid];
m16_603 -> m16_610  [key=2, style=dotted];
m16_603 -> m16_611  [key=2, style=dotted];
m16_603 -> m16_598  [key=2, style=dotted];
m16_604 -> m16_605  [key=0, style=solid];
m16_604 -> m16_600  [key=2, style=dotted];
m16_604 -> m16_601  [key=2, style=dotted];
m16_605 -> m16_606  [key=0, style=solid];
m16_605 -> m16_221  [key=2, style=dotted];
m16_605 -> m16_607  [key=1, style=dashed, color=darkseagreen4, label=xmlProduct];
m16_606 -> m16_607  [key=0, style=solid];
m16_606 -> m16_455  [key=2, style=dotted];
m16_606 -> m16_122  [key=2, style=dotted];
m16_607 -> m16_608  [key=0, style=solid];
m16_607 -> m16_15  [key=2, style=dotted];
m16_608 -> m16_609  [key=0, style=solid];
m16_608 -> m16_122  [key=2, style=dotted];
m16_609 -> m16_602  [key=0, style=bold, color=blue];
m16_538 -> m16_539  [key=0, style=solid];
m16_539 -> m16_540  [key=0, style=solid];
m16_539 -> m16_545  [key=1, style=dashed, color=darkseagreen4, label=json];
m16_539 -> m16_539  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m16_540 -> m16_541  [key=0, style=solid];
m16_540 -> m16_221  [key=2, style=dotted];
m16_540 -> m16_543  [key=1, style=dashed, color=darkseagreen4, label=node];
m16_545 -> m16_546  [key=0, style=solid];
m16_545 -> m16_122  [key=2, style=dotted];
m16_541 -> m16_542  [key=0, style=solid];
m16_541 -> m16_345  [key=2, style=dotted];
m16_543 -> m16_544  [key=0, style=solid];
m16_543 -> m16_15  [key=2, style=dotted];
m16_543 -> m16_545  [key=1, style=dashed, color=darkseagreen4, label=newJson];
m16_542 -> m16_543  [key=0, style=solid];
m16_542 -> m16_122  [key=2, style=dotted];
m16_544 -> m16_545  [key=0, style=solid];
m16_544 -> m16_456  [key=2, style=dotted];
m16_546 -> m16_538  [key=0, style=bold, color=blue];
m16_229 -> m16_230  [key=0, style=solid];
m16_230 -> m16_231  [key=0, style=solid];
m16_230 -> m16_232  [key=1, style=dashed, color=darkseagreen4, label=xml];
m16_230 -> m16_230  [key=3, color=darkorchid, style=bold, label="Local variable string xml"];
m16_231 -> m16_232  [key=0, style=solid];
m16_231 -> m16_132  [key=2, style=dotted];
m16_231 -> m16_233  [key=1, style=dashed, color=darkseagreen4, label=doc];
m16_232 -> m16_233  [key=0, style=solid];
m16_232 -> m16_133  [key=2, style=dotted];
m16_233 -> m16_234  [key=0, style=solid];
m16_233 -> m16_15  [key=2, style=dotted];
m16_233 -> m16_235  [key=1, style=dashed, color=darkseagreen4, label=jsonText];
m16_234 -> m16_235  [key=0, style=solid];
m16_234 -> m16_234  [key=3, color=darkorchid, style=bold, label="Local variable string expected"];
m16_235 -> m16_236  [key=0, style=solid];
m16_235 -> m16_122  [key=2, style=dotted];
m16_236 -> m16_229  [key=0, style=bold, color=blue];
m16_675 -> m16_676  [key=0, style=solid];
m16_676 -> m16_677  [key=0, style=solid];
m16_676 -> m16_676  [key=3, color=darkorchid, style=bold, label="Local variable string xaml"];
m16_677 -> m16_678  [key=0, style=solid];
m16_677 -> m16_120  [key=2, style=dotted];
m16_677 -> m16_22  [key=2, style=dotted];
m16_677 -> m16_679  [key=1, style=dashed, color=darkseagreen4, label=json];
m16_677 -> m16_680  [key=1, style=dashed, color=darkseagreen4, label=json];
m16_678 -> m16_679  [key=0, style=solid];
m16_678 -> m16_678  [key=3, color=darkorchid, style=bold, label="Local variable string expectedJson"];
m16_679 -> m16_680  [key=0, style=solid];
m16_679 -> m16_122  [key=2, style=dotted];
m16_680 -> m16_681  [key=0, style=solid];
m16_680 -> m16_75  [key=2, style=dotted];
m16_681 -> m16_682  [key=0, style=solid];
m16_681 -> m16_51  [key=2, style=dotted];
m16_681 -> m16_683  [key=1, style=dashed, color=darkseagreen4, label=xaml2];
m16_682 -> m16_683  [key=0, style=solid];
m16_682 -> m16_682  [key=3, color=darkorchid, style=bold, label="Local variable string expectedXaml"];
m16_683 -> m16_684  [key=0, style=solid];
m16_683 -> m16_122  [key=2, style=dotted];
m16_684 -> m16_675  [key=0, style=bold, color=blue];
m16_648 -> m16_649  [key=0, style=solid];
m16_649 -> m16_650  [key=0, style=solid];
m16_649 -> m16_655  [key=2, style=dotted];
m16_649 -> m16_656  [key=2, style=dotted];
m16_649 -> m16_651  [key=1, style=dashed, color=darkseagreen4, label=ms];
m16_650 -> m16_651  [key=0, style=solid];
m16_650 -> m16_657  [key=2, style=dotted];
m16_650 -> m16_652  [key=1, style=dashed, color=darkseagreen4, label=xml];
m16_651 -> m16_652  [key=0, style=solid];
m16_651 -> m16_658  [key=2, style=dotted];
m16_652 -> m16_653  [key=0, style=solid];
m16_652 -> m16_659  [key=2, style=dotted];
m16_652 -> m16_660  [key=2, style=dotted];
m16_653 -> m16_654  [key=0, style=solid];
m16_653 -> m16_23  [key=2, style=dotted];
m16_654 -> m16_648  [key=0, style=bold, color=blue];
m16_873 -> m16_874  [key=0, style=solid];
m16_874 -> m16_875  [key=0, style=solid];
m16_874 -> m16_888  [key=2, style=dotted];
m16_874 -> m16_881  [key=1, style=dashed, color=darkseagreen4, label=model];
m16_875 -> m16_876  [key=0, style=solid];
m16_875 -> m16_856  [key=2, style=dotted];
m16_875 -> m16_18  [key=2, style=dotted];
m16_881 -> m16_882  [key=0, style=solid];
m16_881 -> m16_893  [key=2, style=dotted];
m16_876 -> m16_877  [key=0, style=solid];
m16_876 -> m16_97  [key=2, style=dotted];
m16_876 -> m16_889  [key=2, style=dotted];
m16_876 -> m16_48  [key=2, style=dotted];
m16_876 -> m16_645  [key=2, style=dotted];
m16_876 -> m16_881  [key=1, style=dashed, color=darkseagreen4, label=serializer];
m16_876 -> m16_885  [key=1, style=dashed, color=darkseagreen4, label=serializer];
m16_877 -> m16_878  [key=0, style=solid];
m16_877 -> m16_890  [key=2, style=dotted];
m16_877 -> m16_882  [key=1, style=dashed, color=darkseagreen4, label=json];
m16_877 -> m16_883  [key=1, style=dashed, color=darkseagreen4, label=json];
m16_885 -> m16_886  [key=0, style=solid];
m16_885 -> m16_647  [key=2, style=dotted];
m16_878 -> m16_879  [key=0, style=solid];
m16_878 -> m16_891  [key=2, style=dotted];
m16_882 -> m16_883  [key=0, style=solid];
m16_882 -> m16_321  [key=2, style=dotted];
m16_882 -> m16_23  [key=2, style=dotted];
m16_883 -> m16_884  [key=0, style=solid];
m16_883 -> m16_46  [key=2, style=dotted];
m16_883 -> m16_321  [key=2, style=dotted];
m16_879 -> m16_880  [key=0, style=solid];
m16_879 -> m16_892  [key=2, style=dotted];
m16_879 -> m16_881  [key=1, style=dashed, color=darkseagreen4, label=jsonWriter];
m16_880 -> m16_881  [key=0, style=solid];
m16_884 -> m16_885  [key=0, style=solid];
m16_884 -> m16_45  [key=2, style=dotted];
m16_886 -> m16_887  [key=0, style=solid];
m16_886 -> m16_51  [key=2, style=dotted];
m16_886 -> m16_23  [key=2, style=dotted];
m16_887 -> m16_873  [key=0, style=bold, color=blue];
m16_205 -> m16_206  [key=0, style=solid];
m16_206 -> m16_207  [key=0, style=solid];
m16_206 -> m16_206  [key=3, color=darkorchid, style=bold, label="Local variable string xmlString"];
m16_207 -> m16_208  [key=0, style=solid];
m16_207 -> m16_120  [key=2, style=dotted];
m16_207 -> m16_210  [key=1, style=dashed, color=darkseagreen4, label=xml];
m16_208 -> m16_209  [key=0, style=solid];
m16_208 -> m16_22  [key=2, style=dotted];
m16_210 -> m16_211  [key=0, style=solid];
m16_210 -> m16_213  [key=2, style=dotted];
m16_209 -> m16_210  [key=0, style=solid];
m16_209 -> m16_142  [key=2, style=dotted];
m16_211 -> m16_212  [key=0, style=solid];
m16_211 -> m16_214  [key=2, style=dotted];
m16_212 -> m16_205  [key=0, style=bold, color=blue];
m16_725 -> m16_726  [key=0, style=solid];
m16_726 -> m16_727  [key=0, style=solid];
m16_726 -> m16_726  [key=3, color=darkorchid, style=bold, label="Local variable string xmlString"];
m16_727 -> m16_728  [key=0, style=solid];
m16_727 -> m16_120  [key=2, style=dotted];
m16_727 -> m16_730  [key=1, style=dashed, color=darkseagreen4, label=xml];
m16_728 -> m16_729  [key=0, style=solid];
m16_728 -> m16_22  [key=2, style=dotted];
m16_730 -> m16_731  [key=0, style=solid];
m16_730 -> m16_213  [key=2, style=dotted];
m16_729 -> m16_730  [key=0, style=solid];
m16_729 -> m16_142  [key=2, style=dotted];
m16_731 -> m16_732  [key=0, style=solid];
m16_731 -> m16_214  [key=2, style=dotted];
m16_732 -> m16_725  [key=0, style=bold, color=blue];
m16_123 -> m16_124  [key=0, style=solid];
m16_124 -> m16_125  [key=0, style=solid];
m16_124 -> m16_126  [key=1, style=dashed, color=darkseagreen4, label=xml];
m16_124 -> m16_130  [key=1, style=dashed, color=darkseagreen4, label=xml];
m16_124 -> m16_113  [key=3, color=darkorchid, style=bold, label="Local variable string xml"];
m16_125 -> m16_126  [key=0, style=solid];
m16_125 -> m16_132  [key=2, style=dotted];
m16_125 -> m16_127  [key=1, style=dashed, color=darkseagreen4, label=d];
m16_126 -> m16_127  [key=0, style=solid];
m16_126 -> m16_133  [key=2, style=dotted];
m16_130 -> m16_131  [key=0, style=solid];
m16_130 -> m16_23  [key=2, style=dotted];
m16_127 -> m16_128  [key=0, style=solid];
m16_127 -> m16_121  [key=2, style=dotted];
m16_127 -> m16_129  [key=1, style=dashed, color=darkseagreen4, label=json];
m16_128 -> m16_129  [key=0, style=solid];
m16_128 -> m16_122  [key=2, style=dotted];
m16_129 -> m16_130  [key=0, style=solid];
m16_129 -> m16_110  [key=2, style=dotted];
m16_131 -> m16_123  [key=0, style=bold, color=blue];
m16_806 -> m16_807  [key=0, style=solid];
m16_807 -> m16_808  [key=0, style=solid];
m16_807 -> m16_813  [key=2, style=dotted];
m16_807 -> m16_810  [key=1, style=dashed, color=darkseagreen4, label=dt];
m16_808 -> m16_809  [key=0, style=solid];
m16_808 -> m16_808  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m16_810 -> m16_811  [key=0, style=solid];
m16_810 -> m16_814  [key=2, style=dotted];
m16_810 -> m16_271  [key=2, style=dotted];
m16_810 -> m16_23  [key=2, style=dotted];
m16_809 -> m16_810  [key=0, style=solid];
m16_809 -> m16_75  [key=2, style=dotted];
m16_809 -> m16_811  [key=1, style=dashed, color=darkseagreen4, label=dxml];
m16_811 -> m16_812  [key=0, style=solid];
m16_811 -> m16_271  [key=2, style=dotted];
m16_811 -> m16_84  [key=2, style=dotted];
m16_812 -> m16_806  [key=0, style=bold, color=blue];
m16_479 -> m16_480  [key=0, style=solid];
m16_480 -> m16_481  [key=0, style=solid];
m16_480 -> m16_482  [key=1, style=dashed, color=darkseagreen4, label=xml];
m16_480 -> m16_480  [key=3, color=darkorchid, style=bold, label="Local variable string xml"];
m16_481 -> m16_482  [key=0, style=solid];
m16_481 -> m16_132  [key=2, style=dotted];
m16_481 -> m16_483  [key=1, style=dashed, color=darkseagreen4, label=doc];
m16_482 -> m16_483  [key=0, style=solid];
m16_482 -> m16_133  [key=2, style=dotted];
m16_483 -> m16_484  [key=0, style=solid];
m16_483 -> m16_15  [key=2, style=dotted];
m16_483 -> m16_485  [key=1, style=dashed, color=darkseagreen4, label=jsonText];
m16_483 -> m16_486  [key=1, style=dashed, color=darkseagreen4, label=jsonText];
m16_484 -> m16_485  [key=0, style=solid];
m16_484 -> m16_484  [key=3, color=darkorchid, style=bold, label="Local variable string expected"];
m16_485 -> m16_486  [key=0, style=solid];
m16_485 -> m16_122  [key=2, style=dotted];
m16_486 -> m16_487  [key=0, style=solid];
m16_486 -> m16_24  [key=2, style=dotted];
m16_487 -> m16_488  [key=0, style=solid];
m16_487 -> m16_23  [key=2, style=dotted];
m16_488 -> m16_479  [key=0, style=bold, color=blue];
m16_769 -> m16_770  [key=0, style=solid];
m16_770 -> m16_771  [key=0, style=solid];
m16_770 -> m16_774  [key=2, style=dotted];
m16_771 -> m16_772  [key=0, style=solid];
m16_771 -> m16_22  [key=2, style=dotted];
m16_772 -> m16_773  [key=0, style=solid];
m16_772 -> m16_23  [key=2, style=dotted];
m16_773 -> m16_769  [key=0, style=bold, color=blue];
m16_619 -> m16_620  [key=0, style=solid];
m16_620 -> m16_621  [key=0, style=solid];
m16_620 -> m16_622  [key=1, style=dashed, color=darkseagreen4, label=xml];
m16_620 -> m16_620  [key=3, color=darkorchid, style=bold, label="Local variable string xml"];
m16_621 -> m16_622  [key=0, style=solid];
m16_621 -> m16_132  [key=2, style=dotted];
m16_621 -> m16_623  [key=1, style=dashed, color=darkseagreen4, label=d];
m16_622 -> m16_623  [key=0, style=solid];
m16_622 -> m16_133  [key=2, style=dotted];
m16_623 -> m16_624  [key=0, style=solid];
m16_623 -> m16_15  [key=2, style=dotted];
m16_623 -> m16_625  [key=1, style=dashed, color=darkseagreen4, label=json];
m16_624 -> m16_625  [key=0, style=solid];
m16_624 -> m16_122  [key=2, style=dotted];
m16_625 -> m16_626  [key=0, style=solid];
m16_625 -> m16_221  [key=2, style=dotted];
m16_626 -> m16_627  [key=0, style=solid];
m16_626 -> m16_310  [key=2, style=dotted];
m16_626 -> m16_122  [key=2, style=dotted];
m16_627 -> m16_619  [key=0, style=bold, color=blue];
m16_840 -> m16_841  [key=0, style=solid];
m16_841 -> m16_842  [key=0, style=solid];
m16_841 -> m16_120  [key=2, style=dotted];
m16_841 -> m16_843  [key=1, style=dashed, color=darkseagreen4, label=original];
m16_842 -> m16_843  [key=0, style=solid];
m16_842 -> m16_51  [key=2, style=dotted];
m16_842 -> m16_23  [key=2, style=dotted];
m16_843 -> m16_844  [key=0, style=solid];
m16_843 -> m16_121  [key=2, style=dotted];
m16_843 -> m16_845  [key=1, style=dashed, color=darkseagreen4, label=json];
m16_844 -> m16_845  [key=0, style=solid];
m16_844 -> m16_23  [key=2, style=dotted];
m16_845 -> m16_846  [key=0, style=solid];
m16_845 -> m16_110  [key=2, style=dotted];
m16_846 -> m16_847  [key=0, style=solid];
m16_846 -> m16_51  [key=2, style=dotted];
m16_846 -> m16_23  [key=2, style=dotted];
m16_847 -> m16_840  [key=0, style=bold, color=blue];
m16_279 -> m16_280  [key=0, style=solid];
m16_280 -> m16_281  [key=0, style=solid];
m16_280 -> m16_24  [key=2, style=dotted];
m16_280 -> m16_282  [key=1, style=dashed, color=darkseagreen4, label=node];
m16_281 -> m16_282  [key=0, style=solid];
m16_281 -> m16_23  [key=2, style=dotted];
m16_282 -> m16_283  [key=0, style=solid];
m16_282 -> m16_0  [key=2, style=dotted];
m16_283 -> m16_284  [key=0, style=solid];
m16_283 -> m16_122  [key=2, style=dotted];
m16_284 -> m16_279  [key=0, style=bold, color=blue];
m16_570 -> m16_571  [key=0, style=solid];
m16_571 -> m16_572  [key=0, style=solid];
m16_571 -> m16_576  [key=1, style=dashed, color=darkseagreen4, label=json];
m16_571 -> m16_571  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m16_572 -> m16_573  [key=0, style=solid];
m16_572 -> m16_221  [key=2, style=dotted];
m16_572 -> m16_575  [key=1, style=dashed, color=darkseagreen4, label=node];
m16_576 -> m16_577  [key=0, style=solid];
m16_576 -> m16_122  [key=2, style=dotted];
m16_573 -> m16_574  [key=0, style=solid];
m16_573 -> m16_345  [key=2, style=dotted];
m16_575 -> m16_576  [key=0, style=solid];
m16_575 -> m16_15  [key=2, style=dotted];
m16_574 -> m16_575  [key=0, style=solid];
m16_574 -> m16_122  [key=2, style=dotted];
m16_577 -> m16_570  [key=0, style=bold, color=blue];
m16_383 -> m16_384  [key=0, style=solid];
m16_384 -> m16_385  [key=0, style=solid];
m16_384 -> m16_142  [key=2, style=dotted];
m16_384 -> m16_386  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m16_385 -> m16_383  [key=0, style=bold, color=blue];
m16_362 -> m16_363  [key=0, style=solid];
m16_363 -> m16_364  [key=0, style=solid];
m16_363 -> m16_365  [key=1, style=dashed, color=darkseagreen4, label=xml];
m16_363 -> m16_363  [key=3, color=darkorchid, style=bold, label="Local variable string xml"];
m16_364 -> m16_365  [key=0, style=solid];
m16_364 -> m16_132  [key=2, style=dotted];
m16_364 -> m16_366  [key=1, style=dashed, color=darkseagreen4, label=doc];
m16_364 -> m16_369  [key=1, style=dashed, color=darkseagreen4, label=doc];
m16_365 -> m16_366  [key=0, style=solid];
m16_365 -> m16_133  [key=2, style=dotted];
m16_366 -> m16_367  [key=0, style=solid];
m16_366 -> m16_15  [key=2, style=dotted];
m16_366 -> m16_368  [key=1, style=dashed, color=darkseagreen4, label=jsonText];
m16_369 -> m16_370  [key=0, style=solid];
m16_369 -> m16_23  [key=2, style=dotted];
m16_367 -> m16_368  [key=0, style=solid];
m16_367 -> m16_122  [key=2, style=dotted];
m16_368 -> m16_369  [key=0, style=solid];
m16_368 -> m16_24  [key=2, style=dotted];
m16_370 -> m16_362  [key=0, style=bold, color=blue];
m16_312 -> m16_313  [key=0, style=solid];
m16_313 -> m16_312  [key=0, style=bold, color=blue];
m16_24 -> m16_25  [key=0, style=solid];
m16_24 -> m16_27  [key=3, color=darkorchid, style=bold, label="method methodReturn XmlNode DeserializeXmlNode"];
m16_24 -> m16_283  [key=3, color=darkorchid, style=bold, label="Parameter variable string json"];
m16_24 -> m16_331  [key=3, color=darkorchid, style=bold, label="Parameter variable string json"];
m16_24 -> m16_338  [key=3, color=darkorchid, style=bold, label="Parameter variable string json"];
m16_24 -> m16_358  [key=3, color=darkorchid, style=bold, label="Parameter variable string json"];
m16_24 -> m16_366  [key=3, color=darkorchid, style=bold, label="Parameter variable string json"];
m16_24 -> m16_372  [key=3, color=darkorchid, style=bold, label="Parameter variable string json"];
m16_24 -> m16_390  [key=3, color=darkorchid, style=bold, label="Parameter variable string json"];
m16_24 -> m16_483  [key=3, color=darkorchid, style=bold, label="Parameter variable string json"];
m16_24 -> m16_493  [key=3, color=darkorchid, style=bold, label="Parameter variable string json"];
m16_24 -> m16_502  [key=3, color=darkorchid, style=bold, label="Parameter variable string json"];
m16_24 -> m16_507  [key=3, color=darkorchid, style=bold, label="Parameter variable string json"];
m16_24 -> m16_579  [key=3, color=darkorchid, style=bold, label="Parameter variable string json"];
m16_25 -> m16_26  [key=0, style=solid];
m16_25 -> m16_27  [key=2, style=dotted];
m16_26 -> m16_24  [key=0, style=bold, color=blue];
m16_337 -> m16_338  [key=0, style=solid, color=green];
m16_338 -> m16_338  [key=3, color=darkorchid, style=bold, label="Local variable string jsonText"];
m16_338 -> m16_339  [key=0, style=solid, color=green];
m16_338 -> m16_342  [key=1, style=dashed, color=green, label=json];
m16_339 -> m16_340  [key=0, style=solid, color=green];
m16_339 -> m16_142  [key=2, style=dotted, color=green];
m16_339 -> m16_341  [key=1, style=dashed, color=darkseagreen4, label=doc];
m16_339 -> m16_24  [key=2, style=dotted];
m16_340 -> m16_337  [key=0, style=bold, color=blue];
m16_340 -> m16_341  [key=0, style=solid];
m16_340 -> m16_342  [key=1, style=dashed, color=darkseagreen4, label=expected];
m16_340 -> m16_340  [key=3, color=darkorchid, style=bold, label="Local variable string expected"];
m16_294 -> m16_295  [key=0, style=solid];
m16_295 -> m16_296  [key=0, style=solid];
m16_295 -> m16_299  [key=1, style=dashed, color=darkseagreen4, label=xml];
m16_295 -> m16_303  [key=1, style=dashed, color=darkseagreen4, label=xml];
m16_295 -> m16_304  [key=1, style=dashed, color=darkseagreen4, label=xml];
m16_295 -> m16_308  [key=1, style=dashed, color=darkseagreen4, label=xml];
m16_295 -> m16_295  [key=3, color=darkorchid, style=bold, label="Local variable string xml"];
m16_296 -> m16_297  [key=0, style=solid];
m16_296 -> m16_301  [key=1, style=dashed, color=darkseagreen4, label=expected];
m16_296 -> m16_306  [key=1, style=dashed, color=darkseagreen4, label=expected];
m16_299 -> m16_300  [key=0, style=solid];
m16_299 -> m16_133  [key=2, style=dotted];
m16_303 -> m16_304  [key=0, style=solid];
m16_303 -> m16_310  [key=2, style=dotted];
m16_303 -> m16_122  [key=2, style=dotted];
m16_304 -> m16_305  [key=0, style=solid];
m16_304 -> m16_120  [key=2, style=dotted];
m16_308 -> m16_309  [key=0, style=solid];
m16_308 -> m16_311  [key=2, style=dotted];
m16_308 -> m16_122  [key=2, style=dotted];
m16_297 -> m16_298  [key=0, style=solid];
m16_297 -> m16_132  [key=2, style=dotted];
m16_301 -> m16_302  [key=0, style=solid];
m16_301 -> m16_122  [key=2, style=dotted];
m16_306 -> m16_307  [key=0, style=solid];
m16_306 -> m16_122  [key=2, style=dotted];
m16_298 -> m16_299  [key=0, style=solid];
m16_298 -> m16_298  [key=1, style=dashed, color=darkseagreen4, label=doc1];
m16_298 -> m16_300  [key=1, style=dashed, color=darkseagreen4, label=doc1];
m16_300 -> m16_301  [key=0, style=solid];
m16_300 -> m16_15  [key=2, style=dotted];
m16_300 -> m16_302  [key=1, style=dashed, color=darkseagreen4, label=json1];
m16_302 -> m16_303  [key=0, style=solid];
m16_302 -> m16_221  [key=2, style=dotted];
m16_305 -> m16_306  [key=0, style=solid];
m16_305 -> m16_22  [key=2, style=dotted];
m16_305 -> m16_307  [key=1, style=dashed, color=darkseagreen4, label=json2];
m16_307 -> m16_308  [key=0, style=solid];
m16_307 -> m16_75  [key=2, style=dotted];
m16_309 -> m16_294  [key=0, style=bold, color=blue];
m16_787 -> m16_788  [key=0, style=solid];
m16_788 -> m16_789  [key=0, style=solid];
m16_788 -> m16_75  [key=2, style=dotted];
m16_788 -> m16_790  [key=1, style=dashed, color=darkseagreen4, label=d];
m16_788 -> m16_791  [key=1, style=dashed, color=darkseagreen4, label=d];
m16_788 -> m16_792  [key=1, style=dashed, color=darkseagreen4, label=d];
m16_789 -> m16_790  [key=0, style=solid];
m16_789 -> m16_23  [key=2, style=dotted];
m16_790 -> m16_791  [key=0, style=solid];
m16_790 -> m16_23  [key=2, style=dotted];
m16_791 -> m16_792  [key=0, style=solid];
m16_791 -> m16_23  [key=2, style=dotted];
m16_792 -> m16_793  [key=0, style=solid];
m16_792 -> m16_23  [key=2, style=dotted];
m16_793 -> m16_787  [key=0, style=bold, color=blue];
m16_345 -> m16_346  [key=0, style=solid];
m16_345 -> m16_350  [key=1, style=dashed, color=darkseagreen4, label=XmlNode];
m16_345 -> m16_519  [key=3, color=darkorchid, style=bold, label="Parameter variable XmlNode node"];
m16_345 -> m16_532  [key=3, color=darkorchid, style=bold, label="Parameter variable XmlNode node"];
m16_345 -> m16_540  [key=3, color=darkorchid, style=bold, label="Parameter variable XmlNode node"];
m16_345 -> m16_549  [key=3, color=darkorchid, style=bold, label="Parameter variable XmlNode node"];
m16_345 -> m16_564  [key=3, color=darkorchid, style=bold, label="Parameter variable XmlNode node"];
m16_345 -> m16_572  [key=3, color=darkorchid, style=bold, label="Parameter variable XmlNode node"];
m16_346 -> m16_347  [key=0, style=solid];
m16_346 -> m16_63  [key=2, style=dotted];
m16_350 -> m16_351  [key=0, style=solid];
m16_350 -> m16_353  [key=2, style=dotted];
m16_347 -> m16_348  [key=0, style=solid];
m16_347 -> m16_347  [key=1, style=dashed, color=darkseagreen4, label=settings];
m16_347 -> m16_349  [key=1, style=dashed, color=darkseagreen4, label=settings];
m16_348 -> m16_349  [key=0, style=solid];
m16_348 -> m16_62  [key=2, style=dotted];
m16_348 -> m16_351  [key=1, style=dashed, color=darkseagreen4, label=sw];
m16_349 -> m16_350  [key=0, style=solid];
m16_349 -> m16_61  [key=2, style=dotted];
m16_351 -> m16_352  [key=0, style=solid];
m16_351 -> m16_67  [key=2, style=dotted];
m16_352 -> m16_345  [key=0, style=bold, color=blue];
m16_562 -> m16_563  [key=0, style=solid];
m16_563 -> m16_564  [key=0, style=solid];
m16_563 -> m16_563  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m16_564 -> m16_565  [key=0, style=solid];
m16_564 -> m16_221  [key=2, style=dotted];
m16_564 -> m16_567  [key=1, style=dashed, color=darkseagreen4, label=node];
m16_565 -> m16_566  [key=0, style=solid];
m16_565 -> m16_345  [key=2, style=dotted];
m16_567 -> m16_568  [key=0, style=solid];
m16_567 -> m16_15  [key=2, style=dotted];
m16_566 -> m16_567  [key=0, style=solid];
m16_566 -> m16_122  [key=2, style=dotted];
m16_568 -> m16_569  [key=0, style=solid];
m16_568 -> m16_122  [key=2, style=dotted];
m16_569 -> m16_562  [key=0, style=bold, color=blue];
m16_310 -> m16_322  [key=0, style=solid];
m16_310 -> m16_323  [key=1, style=dashed, color=darkseagreen4, label=bool];
m16_310 -> m16_324  [key=1, style=dashed, color=darkseagreen4, label=XmlDocument];
m16_310 -> m16_302  [key=3, color=darkorchid, style=bold, label="Parameter variable XmlDocument doc"];
m16_310 -> m16_625  [key=3, color=darkorchid, style=bold, label="Parameter variable XmlDocument doc"];
m16_310 -> m16_626  [key=3, color=darkorchid, style=bold, label="Parameter variable bool indent"];
m16_322 -> m16_323  [key=0, style=solid];
m16_322 -> m16_319  [key=2, style=dotted];
m16_322 -> m16_325  [key=1, style=dashed, color=darkseagreen4, label=builder];
m16_323 -> m16_324  [key=0, style=solid];
m16_323 -> m16_312  [key=2, style=dotted];
m16_323 -> m16_63  [key=2, style=dotted];
m16_323 -> m16_61  [key=2, style=dotted];
m16_324 -> m16_325  [key=0, style=solid];
m16_324 -> m16_320  [key=2, style=dotted];
m16_325 -> m16_326  [key=0, style=solid];
m16_325 -> m16_321  [key=2, style=dotted];
m16_326 -> m16_310  [key=0, style=bold, color=blue];
m16_473 -> m16_474  [key=0, style=solid];
m16_474 -> m16_475  [key=0, style=solid];
m16_474 -> m16_132  [key=2, style=dotted];
m16_474 -> m16_476  [key=1, style=dashed, color=darkseagreen4, label=doc];
m16_475 -> m16_476  [key=0, style=solid];
m16_475 -> m16_133  [key=2, style=dotted];
m16_476 -> m16_477  [key=0, style=solid];
m16_476 -> m16_15  [key=2, style=dotted];
m16_477 -> m16_478  [key=0, style=solid];
m16_477 -> m16_122  [key=2, style=dotted];
m16_478 -> m16_473  [key=0, style=bold, color=blue];
m16_586 -> m16_587  [key=0, style=solid];
m16_587 -> m16_588  [key=0, style=solid];
m16_587 -> m16_598  [key=2, style=dotted];
m16_587 -> m16_589  [key=1, style=dashed, color=darkseagreen4, label=product];
m16_587 -> m16_590  [key=1, style=dashed, color=darkseagreen4, label=product];
m16_587 -> m16_591  [key=1, style=dashed, color=darkseagreen4, label=product];
m16_587 -> m16_592  [key=1, style=dashed, color=darkseagreen4, label=product];
m16_588 -> m16_589  [key=0, style=solid];
m16_589 -> m16_590  [key=0, style=solid];
m16_589 -> m16_599  [key=2, style=dotted];
m16_590 -> m16_591  [key=0, style=solid];
m16_591 -> m16_592  [key=0, style=solid];
m16_592 -> m16_593  [key=0, style=solid];
m16_592 -> m16_600  [key=2, style=dotted];
m16_592 -> m16_601  [key=2, style=dotted];
m16_593 -> m16_594  [key=0, style=solid];
m16_593 -> m16_221  [key=2, style=dotted];
m16_593 -> m16_595  [key=1, style=dashed, color=darkseagreen4, label=xmlProduct];
m16_594 -> m16_595  [key=0, style=solid];
m16_594 -> m16_455  [key=2, style=dotted];
m16_594 -> m16_122  [key=2, style=dotted];
m16_595 -> m16_596  [key=0, style=solid];
m16_595 -> m16_15  [key=2, style=dotted];
m16_596 -> m16_597  [key=0, style=solid];
m16_596 -> m16_122  [key=2, style=dotted];
m16_597 -> m16_586  [key=0, style=bold, color=blue];
m16_834 -> m16_835  [key=0, style=solid];
m16_835 -> m16_836  [key=0, style=solid];
m16_835 -> m16_763  [key=3, color=darkorchid, style=bold, label="Local variable string xmlString"];
m16_836 -> m16_837  [key=0, style=solid];
m16_836 -> m16_120  [key=2, style=dotted];
m16_837 -> m16_838  [key=0, style=solid];
m16_837 -> m16_22  [key=2, style=dotted];
m16_838 -> m16_839  [key=0, style=solid];
m16_838 -> m16_23  [key=2, style=dotted];
m16_839 -> m16_834  [key=0, style=bold, color=blue];
m16_354 -> m16_355  [key=0, style=solid];
m16_355 -> m16_356  [key=0, style=solid];
m16_355 -> m16_357  [key=1, style=dashed, color=darkseagreen4, label=xml];
m16_355 -> m16_355  [key=3, color=darkorchid, style=bold, label="Local variable string xml"];
m16_356 -> m16_357  [key=0, style=solid];
m16_356 -> m16_132  [key=2, style=dotted];
m16_356 -> m16_358  [key=1, style=dashed, color=darkseagreen4, label=doc];
m16_356 -> m16_360  [key=1, style=dashed, color=darkseagreen4, label=doc];
m16_357 -> m16_358  [key=0, style=solid];
m16_357 -> m16_133  [key=2, style=dotted];
m16_358 -> m16_359  [key=0, style=solid];
m16_358 -> m16_15  [key=2, style=dotted];
m16_360 -> m16_361  [key=0, style=solid];
m16_360 -> m16_23  [key=2, style=dotted];
m16_359 -> m16_360  [key=0, style=solid];
m16_359 -> m16_24  [key=2, style=dotted];
m16_361 -> m16_354  [key=0, style=bold, color=blue];
m16_398 -> m16_399  [key=0, style=solid];
m16_399 -> m16_400  [key=0, style=solid];
m16_399 -> m16_401  [key=1, style=dashed, color=darkseagreen4, label=arrayXml];
m16_399 -> m16_399  [key=3, color=darkorchid, style=bold, label="Local variable string arrayXml"];
m16_400 -> m16_401  [key=0, style=solid];
m16_400 -> m16_132  [key=2, style=dotted];
m16_400 -> m16_402  [key=1, style=dashed, color=darkseagreen4, label=arrayDoc];
m16_401 -> m16_402  [key=0, style=solid];
m16_401 -> m16_133  [key=2, style=dotted];
m16_402 -> m16_403  [key=0, style=solid];
m16_402 -> m16_15  [key=2, style=dotted];
m16_402 -> m16_404  [key=1, style=dashed, color=darkseagreen4, label=arrayJsonText];
m16_403 -> m16_404  [key=0, style=solid];
m16_403 -> m16_403  [key=3, color=darkorchid, style=bold, label="Local variable string expected"];
m16_404 -> m16_405  [key=0, style=solid];
m16_404 -> m16_122  [key=2, style=dotted];
m16_405 -> m16_406  [key=0, style=solid];
m16_405 -> m16_407  [key=1, style=dashed, color=darkseagreen4, label=arrayXml];
m16_406 -> m16_407  [key=0, style=solid];
m16_406 -> m16_132  [key=2, style=dotted];
m16_406 -> m16_408  [key=1, style=dashed, color=darkseagreen4, label=arrayDoc];
m16_407 -> m16_408  [key=0, style=solid];
m16_407 -> m16_133  [key=2, style=dotted];
m16_408 -> m16_409  [key=0, style=solid];
m16_408 -> m16_15  [key=2, style=dotted];
m16_408 -> m16_410  [key=1, style=dashed, color=darkseagreen4, label=arrayJsonText];
m16_409 -> m16_410  [key=0, style=solid];
m16_410 -> m16_411  [key=0, style=solid];
m16_410 -> m16_122  [key=2, style=dotted];
m16_411 -> m16_412  [key=0, style=solid];
m16_411 -> m16_413  [key=1, style=dashed, color=darkseagreen4, label=arrayXml];
m16_412 -> m16_413  [key=0, style=solid];
m16_412 -> m16_132  [key=2, style=dotted];
m16_412 -> m16_414  [key=1, style=dashed, color=darkseagreen4, label=arrayDoc];
m16_413 -> m16_414  [key=0, style=solid];
m16_413 -> m16_133  [key=2, style=dotted];
m16_414 -> m16_415  [key=0, style=solid];
m16_414 -> m16_15  [key=2, style=dotted];
m16_414 -> m16_416  [key=1, style=dashed, color=darkseagreen4, label=arrayJsonText];
m16_415 -> m16_416  [key=0, style=solid];
m16_416 -> m16_417  [key=0, style=solid];
m16_416 -> m16_122  [key=2, style=dotted];
m16_417 -> m16_418  [key=0, style=solid];
m16_417 -> m16_419  [key=1, style=dashed, color=darkseagreen4, label=arrayXml];
m16_418 -> m16_419  [key=0, style=solid];
m16_418 -> m16_132  [key=2, style=dotted];
m16_418 -> m16_420  [key=1, style=dashed, color=darkseagreen4, label=arrayDoc];
m16_419 -> m16_420  [key=0, style=solid];
m16_419 -> m16_133  [key=2, style=dotted];
m16_420 -> m16_421  [key=0, style=solid];
m16_420 -> m16_15  [key=2, style=dotted];
m16_420 -> m16_422  [key=1, style=dashed, color=darkseagreen4, label=arrayJsonText];
m16_421 -> m16_422  [key=0, style=solid];
m16_422 -> m16_423  [key=0, style=solid];
m16_422 -> m16_122  [key=2, style=dotted];
m16_423 -> m16_398  [key=0, style=bold, color=blue];
m16_457 -> m16_458  [key=0, style=solid];
m16_458 -> m16_459  [key=0, style=solid];
m16_458 -> m16_461  [key=1, style=dashed, color=darkseagreen4, label=json];
m16_458 -> m16_464  [key=1, style=dashed, color=darkseagreen4, label=json];
m16_458 -> m16_446  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m16_459 -> m16_460  [key=0, style=solid];
m16_459 -> m16_221  [key=2, style=dotted];
m16_459 -> m16_463  [key=1, style=dashed, color=darkseagreen4, label=newDoc];
m16_461 -> m16_462  [key=0, style=solid];
m16_461 -> m16_75  [key=2, style=dotted];
m16_464 -> m16_465  [key=0, style=solid];
m16_464 -> m16_122  [key=2, style=dotted];
m16_460 -> m16_461  [key=0, style=solid];
m16_460 -> m16_455  [key=2, style=dotted];
m16_460 -> m16_122  [key=2, style=dotted];
m16_463 -> m16_464  [key=0, style=solid];
m16_463 -> m16_15  [key=2, style=dotted];
m16_462 -> m16_463  [key=0, style=solid];
m16_462 -> m16_51  [key=2, style=dotted];
m16_462 -> m16_455  [key=2, style=dotted];
m16_462 -> m16_122  [key=2, style=dotted];
m16_465 -> m16_457  [key=0, style=bold, color=blue];
m16_578 -> m16_579  [key=0, style=solid];
m16_579 -> m16_580  [key=0, style=solid];
m16_579 -> m16_584  [key=1, style=dashed, color=darkseagreen4, label=json];
m16_579 -> m16_579  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m16_580 -> m16_581  [key=0, style=solid];
m16_580 -> m16_582  [key=2, style=dotted];
m16_580 -> m16_583  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m16_581 -> m16_578  [key=0, style=bold, color=blue];
m16_489 -> m16_490  [key=0, style=solid];
m16_490 -> m16_491  [key=0, style=solid];
m16_490 -> m16_492  [key=1, style=dashed, color=darkseagreen4, label=xml];
m16_490 -> m16_490  [key=3, color=darkorchid, style=bold, label="Local variable string xml"];
m16_491 -> m16_492  [key=0, style=solid];
m16_491 -> m16_132  [key=2, style=dotted];
m16_491 -> m16_493  [key=1, style=dashed, color=darkseagreen4, label=doc];
m16_491 -> m16_497  [key=1, style=dashed, color=darkseagreen4, label=doc];
m16_492 -> m16_493  [key=0, style=solid];
m16_492 -> m16_133  [key=2, style=dotted];
m16_493 -> m16_494  [key=0, style=solid];
m16_493 -> m16_15  [key=2, style=dotted];
m16_497 -> m16_498  [key=0, style=solid];
m16_497 -> m16_23  [key=2, style=dotted];
m16_494 -> m16_495  [key=0, style=solid];
m16_494 -> m16_499  [key=2, style=dotted];
m16_494 -> m16_500  [key=2, style=dotted];
m16_494 -> m16_494  [key=1, style=dashed, color=darkseagreen4, label=jsonText];
m16_494 -> m16_496  [key=1, style=dashed, color=darkseagreen4, label=jsonText];
m16_495 -> m16_496  [key=0, style=solid];
m16_495 -> m16_122  [key=2, style=dotted];
m16_496 -> m16_497  [key=0, style=solid];
m16_496 -> m16_24  [key=2, style=dotted];
m16_498 -> m16_489  [key=0, style=bold, color=blue];
m16_685 -> m16_686  [key=0, style=solid];
m16_686 -> m16_687  [key=0, style=solid];
m16_686 -> m16_688  [key=1, style=dashed, color=darkseagreen4, label=xaml];
m16_686 -> m16_676  [key=3, color=darkorchid, style=bold, label="Local variable string xaml"];
m16_687 -> m16_688  [key=0, style=solid];
m16_687 -> m16_132  [key=2, style=dotted];
m16_687 -> m16_689  [key=1, style=dashed, color=darkseagreen4, label=document];
m16_688 -> m16_689  [key=0, style=solid];
m16_688 -> m16_133  [key=2, style=dotted];
m16_689 -> m16_690  [key=0, style=solid];
m16_689 -> m16_15  [key=2, style=dotted];
m16_689 -> m16_691  [key=1, style=dashed, color=darkseagreen4, label=json];
m16_689 -> m16_692  [key=1, style=dashed, color=darkseagreen4, label=json];
m16_690 -> m16_691  [key=0, style=solid];
m16_690 -> m16_678  [key=3, color=darkorchid, style=bold, label="Local variable string expectedJson"];
m16_691 -> m16_692  [key=0, style=solid];
m16_691 -> m16_122  [key=2, style=dotted];
m16_692 -> m16_693  [key=0, style=solid];
m16_692 -> m16_221  [key=2, style=dotted];
m16_692 -> m16_695  [key=1, style=dashed, color=darkseagreen4, label=node];
m16_693 -> m16_694  [key=0, style=solid];
m16_693 -> m16_62  [key=2, style=dotted];
m16_693 -> m16_697  [key=1, style=dashed, color=darkseagreen4, label=sw];
m16_695 -> m16_696  [key=0, style=solid];
m16_695 -> m16_353  [key=2, style=dotted];
m16_694 -> m16_695  [key=0, style=solid];
m16_694 -> m16_63  [key=2, style=dotted];
m16_694 -> m16_61  [key=2, style=dotted];
m16_694 -> m16_696  [key=1, style=dashed, color=darkseagreen4, label=writer];
m16_697 -> m16_698  [key=0, style=solid];
m16_697 -> m16_67  [key=2, style=dotted];
m16_697 -> m16_699  [key=1, style=dashed, color=darkseagreen4, label=xaml2];
m16_696 -> m16_697  [key=0, style=solid];
m16_696 -> m16_66  [key=2, style=dotted];
m16_698 -> m16_699  [key=0, style=solid];
m16_698 -> m16_682  [key=3, color=darkorchid, style=bold, label="Local variable string expectedXaml"];
m16_699 -> m16_700  [key=0, style=solid];
m16_699 -> m16_122  [key=2, style=dotted];
m16_700 -> m16_685  [key=0, style=bold, color=blue];
m16_501 -> m16_502  [key=0, style=solid];
m16_502 -> m16_503  [key=0, style=solid];
m16_502 -> m16_502  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m16_503 -> m16_504  [key=0, style=solid];
m16_503 -> m16_24  [key=2, style=dotted];
m16_504 -> m16_505  [key=0, style=solid];
m16_504 -> m16_23  [key=2, style=dotted];
m16_505 -> m16_501  [key=0, style=bold, color=blue];
m16_112 -> m16_113  [key=0, style=solid];
m16_113 -> m16_114  [key=0, style=solid];
m16_113 -> m16_118  [key=1, style=dashed, color=darkseagreen4, label=xml];
m16_113 -> m16_113  [key=3, color=darkorchid, style=bold, label="Local variable string xml"];
m16_114 -> m16_115  [key=0, style=solid];
m16_114 -> m16_120  [key=2, style=dotted];
m16_118 -> m16_119  [key=0, style=solid];
m16_118 -> m16_51  [key=2, style=dotted];
m16_118 -> m16_23  [key=2, style=dotted];
m16_115 -> m16_116  [key=0, style=solid];
m16_115 -> m16_121  [key=2, style=dotted];
m16_115 -> m16_117  [key=1, style=dashed, color=darkseagreen4, label=json];
m16_116 -> m16_117  [key=0, style=solid];
m16_116 -> m16_122  [key=2, style=dotted];
m16_117 -> m16_118  [key=0, style=solid];
m16_117 -> m16_110  [key=2, style=dotted];
m16_119 -> m16_112  [key=0, style=bold, color=blue];
m16_166 -> m16_167  [key=0, style=solid];
m16_167 -> m16_168  [key=0, style=solid];
m16_167 -> m16_177  [key=2, style=dotted];
m16_167 -> m16_178  [key=2, style=dotted];
m16_167 -> m16_179  [key=2, style=dotted];
m16_167 -> m16_180  [key=2, style=dotted];
m16_168 -> m16_169  [key=0, style=solid];
m16_168 -> m16_181  [key=2, style=dotted];
m16_168 -> m16_175  [key=1, style=dashed, color=darkseagreen4, label=x];
m16_169 -> m16_170  [key=0, style=solid];
m16_169 -> m16_164  [key=2, style=dotted];
m16_175 -> m16_176  [key=0, style=solid];
m16_175 -> m16_23  [key=2, style=dotted];
m16_170 -> m16_171  [key=0, style=solid];
m16_170 -> m16_97  [key=2, style=dotted];
m16_170 -> m16_48  [key=2, style=dotted];
m16_170 -> m16_165  [key=2, style=dotted];
m16_170 -> m16_173  [key=1, style=dashed, color=darkseagreen4, label=doc1];
m16_171 -> m16_172  [key=0, style=solid];
m16_171 -> m16_51  [key=2, style=dotted];
m16_173 -> m16_174  [key=0, style=solid];
m16_173 -> m16_121  [key=2, style=dotted];
m16_172 -> m16_173  [key=0, style=solid];
m16_172 -> m16_23  [key=2, style=dotted];
m16_174 -> m16_175  [key=0, style=solid];
m16_174 -> m16_110  [key=2, style=dotted];
m16_176 -> m16_166  [key=0, style=bold, color=blue];
m16_237 -> m16_238  [key=0, style=solid];
m16_238 -> m16_239  [key=0, style=solid];
m16_238 -> m16_132  [key=2, style=dotted];
m16_238 -> m16_251  [key=1, style=dashed, color=darkseagreen4, label=doc];
m16_238 -> m16_254  [key=1, style=dashed, color=darkseagreen4, label=doc];
m16_238 -> m16_257  [key=1, style=dashed, color=darkseagreen4, label=doc];
m16_238 -> m16_258  [key=1, style=dashed, color=darkseagreen4, label=doc];
m16_238 -> m16_259  [key=1, style=dashed, color=darkseagreen4, label=doc];
m16_238 -> m16_262  [key=1, style=dashed, color=darkseagreen4, label=doc];
m16_238 -> m16_267  [key=1, style=dashed, color=darkseagreen4, label=doc];
m16_239 -> m16_240  [key=0, style=solid];
m16_251 -> m16_252  [key=0, style=solid];
m16_251 -> m16_273  [key=2, style=dotted];
m16_251 -> m16_265  [key=1, style=dashed, color=darkseagreen4, label=instruction];
m16_254 -> m16_255  [key=0, style=solid];
m16_254 -> m16_274  [key=2, style=dotted];
m16_254 -> m16_266  [key=1, style=dashed, color=darkseagreen4, label=cDataSection];
m16_257 -> m16_258  [key=0, style=solid];
m16_257 -> m16_275  [key=2, style=dotted];
m16_257 -> m16_261  [key=1, style=dashed, color=darkseagreen4, label=element];
m16_257 -> m16_264  [key=1, style=dashed, color=darkseagreen4, label=element];
m16_257 -> m16_265  [key=1, style=dashed, color=darkseagreen4, label=element];
m16_257 -> m16_266  [key=1, style=dashed, color=darkseagreen4, label=element];
m16_257 -> m16_267  [key=1, style=dashed, color=darkseagreen4, label=element];
m16_257 -> m16_268  [key=1, style=dashed, color=darkseagreen4, label=element];
m16_258 -> m16_259  [key=0, style=solid];
m16_258 -> m16_276  [key=2, style=dotted];
m16_258 -> m16_277  [key=2, style=dotted];
m16_259 -> m16_260  [key=0, style=solid];
m16_259 -> m16_276  [key=2, style=dotted];
m16_259 -> m16_261  [key=1, style=dashed, color=darkseagreen4, label=aa];
m16_262 -> m16_263  [key=0, style=solid];
m16_262 -> m16_276  [key=2, style=dotted];
m16_262 -> m16_264  [key=1, style=dashed, color=darkseagreen4, label=aa];
m16_267 -> m16_268  [key=0, style=solid];
m16_267 -> m16_278  [key=2, style=dotted];
m16_240 -> m16_241  [key=0, style=solid];
m16_240 -> m16_242  [key=1, style=dashed, color=darkseagreen4, label=xml];
m16_240 -> m16_247  [key=1, style=dashed, color=darkseagreen4, label=xml];
m16_240 -> m16_240  [key=3, color=darkorchid, style=bold, label="Local variable string xml"];
m16_241 -> m16_242  [key=0, style=solid];
m16_241 -> m16_132  [key=2, style=dotted];
m16_241 -> m16_243  [key=1, style=dashed, color=darkseagreen4, label=document];
m16_242 -> m16_243  [key=0, style=solid];
m16_242 -> m16_133  [key=2, style=dotted];
m16_247 -> m16_248  [key=0, style=solid];
m16_247 -> m16_120  [key=2, style=dotted];
m16_243 -> m16_244  [key=0, style=solid];
m16_243 -> m16_245  [key=1, style=dashed, color=darkseagreen4, label=attribute];
m16_244 -> m16_245  [key=0, style=solid];
m16_245 -> m16_246  [key=0, style=solid];
m16_245 -> m16_15  [key=2, style=dotted];
m16_246 -> m16_247  [key=0, style=solid];
m16_246 -> m16_23  [key=2, style=dotted];
m16_248 -> m16_249  [key=0, style=solid];
m16_248 -> m16_271  [key=2, style=dotted];
m16_248 -> m16_272  [key=2, style=dotted];
m16_249 -> m16_250  [key=0, style=solid];
m16_249 -> m16_22  [key=2, style=dotted];
m16_250 -> m16_251  [key=0, style=solid];
m16_250 -> m16_23  [key=2, style=dotted];
m16_252 -> m16_253  [key=0, style=solid];
m16_252 -> m16_15  [key=2, style=dotted];
m16_265 -> m16_266  [key=0, style=solid];
m16_265 -> m16_278  [key=2, style=dotted];
m16_253 -> m16_254  [key=0, style=solid];
m16_253 -> m16_23  [key=2, style=dotted];
m16_255 -> m16_256  [key=0, style=solid];
m16_255 -> m16_15  [key=2, style=dotted];
m16_266 -> m16_267  [key=0, style=solid];
m16_266 -> m16_278  [key=2, style=dotted];
m16_256 -> m16_257  [key=0, style=solid];
m16_256 -> m16_23  [key=2, style=dotted];
m16_261 -> m16_262  [key=0, style=solid];
m16_261 -> m16_277  [key=2, style=dotted];
m16_264 -> m16_265  [key=0, style=solid];
m16_264 -> m16_277  [key=2, style=dotted];
m16_268 -> m16_269  [key=0, style=solid];
m16_268 -> m16_15  [key=2, style=dotted];
m16_260 -> m16_261  [key=0, style=solid];
m16_263 -> m16_264  [key=0, style=solid];
m16_269 -> m16_270  [key=0, style=solid];
m16_269 -> m16_122  [key=2, style=dotted];
m16_270 -> m16_237  [key=0, style=bold, color=blue];
m16_371 -> m16_372  [key=0, style=solid];
m16_372 -> m16_373  [key=0, style=solid];
m16_372 -> m16_372  [key=3, color=darkorchid, style=bold, label="Local variable string jsonText"];
m16_373 -> m16_374  [key=0, style=solid];
m16_373 -> m16_24  [key=2, style=dotted];
m16_373 -> m16_375  [key=1, style=dashed, color=darkseagreen4, label=newDoc];
m16_374 -> m16_375  [key=0, style=solid];
m16_374 -> m16_374  [key=3, color=darkorchid, style=bold, label="Local variable string expected"];
m16_375 -> m16_376  [key=0, style=solid];
m16_375 -> m16_23  [key=2, style=dotted];
m16_376 -> m16_371  [key=0, style=bold, color=blue];
m16_775 -> m16_776  [key=0, style=solid];
m16_776 -> m16_777  [key=0, style=solid];
m16_776 -> m16_75  [key=2, style=dotted];
m16_776 -> m16_778  [key=1, style=dashed, color=darkseagreen4, label=d];
m16_777 -> m16_778  [key=0, style=solid];
m16_777 -> m16_23  [key=2, style=dotted];
m16_778 -> m16_779  [key=0, style=solid];
m16_778 -> m16_23  [key=2, style=dotted];
m16_779 -> m16_775  [key=0, style=bold, color=blue];
m16_431 -> m16_432  [key=0, style=solid];
m16_432 -> m16_433  [key=0, style=solid];
m16_432 -> m16_436  [key=1, style=dashed, color=darkseagreen4, label=json];
m16_432 -> m16_425  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m16_433 -> m16_434  [key=0, style=solid];
m16_433 -> m16_142  [key=2, style=dotted];
m16_433 -> m16_435  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m16_434 -> m16_431  [key=0, style=bold, color=blue];
m16_377 -> m16_378  [key=0, style=solid];
m16_378 -> m16_379  [key=0, style=solid];
m16_378 -> m16_142  [key=2, style=dotted];
m16_378 -> m16_380  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m16_379 -> m16_377  [key=0, style=bold, color=blue];
m16_706 -> m16_707  [key=0, style=solid];
m16_707 -> m16_708  [key=0, style=solid];
m16_707 -> m16_712  [key=1, style=dashed, color=darkseagreen4, label=xmlString];
m16_707 -> m16_707  [key=3, color=darkorchid, style=bold, label="Local variable string xmlString"];
m16_708 -> m16_709  [key=0, style=solid];
m16_708 -> m16_120  [key=2, style=dotted];
m16_712 -> m16_713  [key=0, style=solid];
m16_712 -> m16_133  [key=2, style=dotted];
m16_709 -> m16_710  [key=0, style=solid];
m16_709 -> m16_121  [key=2, style=dotted];
m16_710 -> m16_711  [key=0, style=solid];
m16_710 -> m16_23  [key=2, style=dotted];
m16_711 -> m16_712  [key=0, style=solid];
m16_711 -> m16_132  [key=2, style=dotted];
m16_711 -> m16_713  [key=1, style=dashed, color=darkseagreen4, label=xml1];
m16_713 -> m16_714  [key=0, style=solid];
m16_713 -> m16_121  [key=2, style=dotted];
m16_714 -> m16_715  [key=0, style=solid];
m16_714 -> m16_23  [key=2, style=dotted];
m16_715 -> m16_706  [key=0, style=bold, color=blue];
m16_800 -> m16_801  [key=0, style=solid];
m16_801 -> m16_802  [key=0, style=solid];
m16_801 -> m16_801  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m16_802 -> m16_803  [key=0, style=solid];
m16_802 -> m16_75  [key=2, style=dotted];
m16_802 -> m16_804  [key=1, style=dashed, color=darkseagreen4, label=dxml];
m16_803 -> m16_804  [key=0, style=solid];
m16_803 -> m16_271  [key=2, style=dotted];
m16_803 -> m16_23  [key=2, style=dotted];
m16_804 -> m16_805  [key=0, style=solid];
m16_804 -> m16_271  [key=2, style=dotted];
m16_804 -> m16_84  [key=2, style=dotted];
m16_805 -> m16_800  [key=0, style=bold, color=blue];
m16_438 -> m16_439  [key=0, style=solid];
m16_439 -> m16_440  [key=0, style=solid];
m16_439 -> m16_442  [key=1, style=dashed, color=darkseagreen4, label=json];
m16_439 -> m16_439  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m16_440 -> m16_441  [key=0, style=solid];
m16_440 -> m16_221  [key=2, style=dotted];
m16_442 -> m16_443  [key=0, style=solid];
m16_442 -> m16_75  [key=2, style=dotted];
m16_441 -> m16_442  [key=0, style=solid];
m16_441 -> m16_23  [key=2, style=dotted];
m16_443 -> m16_444  [key=0, style=solid];
m16_443 -> m16_51  [key=2, style=dotted];
m16_443 -> m16_23  [key=2, style=dotted];
m16_444 -> m16_438  [key=0, style=bold, color=blue];
m16_76 -> m16_77  [key=0, style=solid];
m16_77 -> m16_78  [key=0, style=solid];
m16_77 -> m16_82  [key=1, style=dashed, color=darkseagreen4, label=json1];
m16_77 -> m16_77  [key=3, color=darkorchid, style=bold, label="Local variable string json1"];
m16_78 -> m16_79  [key=0, style=solid];
m16_78 -> m16_75  [key=2, style=dotted];
m16_78 -> m16_80  [key=1, style=dashed, color=darkseagreen4, label=doc];
m16_78 -> m16_81  [key=1, style=dashed, color=darkseagreen4, label=doc];
m16_82 -> m16_83  [key=0, style=solid];
m16_82 -> m16_23  [key=2, style=dotted];
m16_79 -> m16_80  [key=0, style=solid];
m16_79 -> m16_51  [key=2, style=dotted];
m16_79 -> m16_84  [key=2, style=dotted];
m16_80 -> m16_81  [key=0, style=solid];
m16_80 -> m16_51  [key=2, style=dotted];
m16_80 -> m16_23  [key=2, style=dotted];
m16_81 -> m16_82  [key=0, style=solid];
m16_81 -> m16_22  [key=2, style=dotted];
m16_83 -> m16_76  [key=0, style=bold, color=blue];
m16_815 -> m16_816  [key=0, style=solid];
m16_816 -> m16_817  [key=0, style=solid];
m16_816 -> m16_816  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m16_817 -> m16_818  [key=0, style=solid];
m16_817 -> m16_75  [key=2, style=dotted];
m16_817 -> m16_819  [key=1, style=dashed, color=darkseagreen4, label=dxml];
m16_818 -> m16_819  [key=0, style=solid];
m16_818 -> m16_271  [key=2, style=dotted];
m16_818 -> m16_23  [key=2, style=dotted];
m16_819 -> m16_820  [key=0, style=solid];
m16_819 -> m16_271  [key=2, style=dotted];
m16_819 -> m16_84  [key=2, style=dotted];
m16_820 -> m16_815  [key=0, style=bold, color=blue];
m16_144 -> m16_145  [key=0, style=solid];
m16_145 -> m16_146  [key=0, style=solid];
m16_145 -> m16_135  [key=3, color=darkorchid, style=bold, label="Local variable string xml"];
m16_146 -> m16_147  [key=0, style=solid];
m16_146 -> m16_120  [key=2, style=dotted];
m16_147 -> m16_148  [key=0, style=solid];
m16_147 -> m16_151  [key=2, style=dotted];
m16_147 -> m16_143  [key=2, style=dotted];
m16_148 -> m16_149  [key=0, style=solid];
m16_148 -> m16_121  [key=2, style=dotted];
m16_149 -> m16_150  [key=0, style=solid];
m16_149 -> m16_122  [key=2, style=dotted];
m16_150 -> m16_144  [key=0, style=bold, color=blue];
m16_189 -> m16_190  [key=0, style=solid];
m16_190 -> m16_191  [key=0, style=solid];
m16_190 -> m16_132  [key=2, style=dotted];
m16_190 -> m16_192  [key=1, style=dashed, color=darkseagreen4, label=doc];
m16_191 -> m16_192  [key=0, style=solid];
m16_191 -> m16_133  [key=2, style=dotted];
m16_192 -> m16_193  [key=0, style=solid];
m16_192 -> m16_15  [key=2, style=dotted];
m16_193 -> m16_194  [key=0, style=solid];
m16_193 -> m16_23  [key=2, style=dotted];
m16_194 -> m16_195  [key=0, style=solid];
m16_194 -> m16_132  [key=2, style=dotted];
m16_194 -> m16_196  [key=1, style=dashed, color=darkseagreen4, label=doc];
m16_195 -> m16_196  [key=0, style=solid];
m16_195 -> m16_133  [key=2, style=dotted];
m16_196 -> m16_197  [key=0, style=solid];
m16_196 -> m16_15  [key=2, style=dotted];
m16_197 -> m16_198  [key=0, style=solid];
m16_197 -> m16_23  [key=2, style=dotted];
m16_198 -> m16_199  [key=0, style=solid];
m16_198 -> m16_120  [key=2, style=dotted];
m16_199 -> m16_200  [key=0, style=solid];
m16_199 -> m16_22  [key=2, style=dotted];
m16_200 -> m16_201  [key=0, style=solid];
m16_200 -> m16_23  [key=2, style=dotted];
m16_201 -> m16_202  [key=0, style=solid];
m16_201 -> m16_120  [key=2, style=dotted];
m16_202 -> m16_203  [key=0, style=solid];
m16_202 -> m16_22  [key=2, style=dotted];
m16_203 -> m16_204  [key=0, style=solid];
m16_203 -> m16_23  [key=2, style=dotted];
m16_204 -> m16_189  [key=0, style=bold, color=blue];
m16_101 -> m16_102  [key=0, style=solid];
m16_102 -> m16_103  [key=0, style=solid];
m16_102 -> m16_108  [key=2, style=dotted];
m16_103 -> m16_104  [key=0, style=solid];
m16_103 -> m16_109  [key=2, style=dotted];
m16_103 -> m16_105  [key=1, style=dashed, color=darkseagreen4, label=json];
m16_104 -> m16_105  [key=0, style=solid];
m16_104 -> m16_23  [key=2, style=dotted];
m16_105 -> m16_106  [key=0, style=solid];
m16_105 -> m16_110  [key=2, style=dotted];
m16_106 -> m16_107  [key=0, style=solid];
m16_106 -> m16_111  [key=2, style=dotted];
m16_107 -> m16_101  [key=0, style=bold, color=blue];
m16_716 -> m16_717  [key=0, style=solid];
m16_717 -> m16_718  [key=0, style=solid];
m16_717 -> m16_724  [key=2, style=dotted];
m16_717 -> m16_120  [key=2, style=dotted];
m16_717 -> m16_720  [key=1, style=dashed, color=darkseagreen4, label=xml];
m16_717 -> m16_721  [key=1, style=dashed, color=darkseagreen4, label=xml];
m16_717 -> m16_722  [key=1, style=dashed, color=darkseagreen4, label=xml];
m16_718 -> m16_719  [key=0, style=solid];
m16_718 -> m16_109  [key=2, style=dotted];
m16_720 -> m16_721  [key=0, style=solid];
m16_720 -> m16_23  [key=2, style=dotted];
m16_721 -> m16_722  [key=0, style=solid];
m16_721 -> m16_23  [key=2, style=dotted];
m16_722 -> m16_723  [key=0, style=solid];
m16_722 -> m16_51  [key=2, style=dotted];
m16_722 -> m16_23  [key=2, style=dotted];
m16_719 -> m16_720  [key=0, style=solid];
m16_719 -> m16_110  [key=2, style=dotted];
m16_719 -> m16_721  [key=1, style=dashed, color=darkseagreen4, label=w2];
m16_719 -> m16_722  [key=1, style=dashed, color=darkseagreen4, label=w2];
m16_723 -> m16_716  [key=0, style=bold, color=blue];
m16_0 -> m16_1  [key=0, style=solid];
m16_0 -> m16_2  [key=1, style=dashed, color=darkseagreen4, label=XmlNode];
m16_0 -> m16_4  [key=1, style=dashed, color=darkseagreen4, label=XmlNode];
m16_0 -> m16_6  [key=1, style=dashed, color=darkseagreen4, label=XmlNode];
m16_0 -> m16_7  [key=1, style=dashed, color=darkseagreen4, label=XmlNode];
m16_0 -> m16_280  [key=3, color=darkorchid, style=bold, label="Parameter variable XmlNode node"];
m16_0 -> m16_519  [key=3, color=darkorchid, style=bold, label="Parameter variable XmlNode node"];
m16_1 -> m16_2  [key=0, style=solid];
m16_1 -> m16_15  [key=2, style=dotted];
m16_1 -> m16_12  [key=1, style=dashed, color=darkseagreen4, label=json];
m16_1 -> m16_13  [key=1, style=dashed, color=darkseagreen4, label=json];
m16_2 -> m16_3  [key=0, style=solid];
m16_2 -> m16_16  [key=2, style=dotted];
m16_2 -> m16_5  [key=1, style=dashed, color=darkseagreen4, label=reader];
m16_2 -> m16_9  [key=1, style=dashed, color=darkseagreen4, label=reader];
m16_2 -> m16_10  [key=1, style=dashed, color=darkseagreen4, label=reader];
m16_4 -> m16_5  [key=0, style=solid];
m16_4 -> m16_6  [key=0, style=solid];
m16_6 -> m16_7  [key=0, style=solid];
m16_6 -> m16_9  [key=0, style=solid];
m16_7 -> m16_8  [key=0, style=solid];
m16_12 -> m16_13  [key=0, style=solid];
m16_12 -> m16_23  [key=2, style=dotted];
m16_13 -> m16_14  [key=0, style=solid];
m16_3 -> m16_4  [key=0, style=solid];
m16_5 -> m16_11  [key=0, style=solid];
m16_5 -> m16_17  [key=2, style=dotted];
m16_9 -> m16_10  [key=0, style=solid];
m16_9 -> m16_20  [key=2, style=dotted];
m16_10 -> m16_11  [key=0, style=solid];
m16_10 -> m16_21  [key=2, style=dotted];
m16_8 -> m16_11  [key=0, style=solid];
m16_8 -> m16_18  [key=2, style=dotted];
m16_8 -> m16_19  [key=2, style=dotted];
m16_11 -> m16_12  [key=0, style=solid];
m16_11 -> m16_22  [key=2, style=dotted];
m16_14 -> m16_0  [key=0, style=bold, color=blue];
m16_848 -> m16_849  [key=0, style=solid];
m16_849 -> m16_850  [key=0, style=solid];
m16_849 -> m16_856  [key=2, style=dotted];
m16_849 -> m16_851  [key=1, style=dashed, color=darkseagreen4, label=original];
m16_850 -> m16_851  [key=0, style=solid];
m16_850 -> m16_51  [key=2, style=dotted];
m16_850 -> m16_23  [key=2, style=dotted];
m16_851 -> m16_852  [key=0, style=solid];
m16_851 -> m16_121  [key=2, style=dotted];
m16_851 -> m16_853  [key=1, style=dashed, color=darkseagreen4, label=json];
m16_852 -> m16_853  [key=0, style=solid];
m16_852 -> m16_23  [key=2, style=dotted];
m16_853 -> m16_854  [key=0, style=solid];
m16_853 -> m16_110  [key=2, style=dotted];
m16_854 -> m16_855  [key=0, style=solid];
m16_854 -> m16_51  [key=2, style=dotted];
m16_854 -> m16_23  [key=2, style=dotted];
m16_855 -> m16_848  [key=0, style=bold, color=blue];
m16_341 -> m16_342  [key=0, style=solid, color=green];
m16_341 -> m16_344  [key=2, style=dotted];
m16_227 -> m16_228  [key=0, style=solid];
m16_227 -> m16_221  [key=2, style=dotted];
m16_226 -> m16_227  [key=0, style=solid];
m16_228 -> m16_226  [key=0, style=bold, color=blue];
m16_380 -> m16_381  [key=0, style=solid];
m16_381 -> m16_382  [key=0, style=solid];
m16_381 -> m16_221  [key=2, style=dotted];
m16_382 -> m16_380  [key=0, style=bold, color=blue];
m16_386 -> m16_387  [key=0, style=solid];
m16_387 -> m16_388  [key=0, style=solid];
m16_387 -> m16_221  [key=2, style=dotted];
m16_388 -> m16_386  [key=0, style=bold, color=blue];
m16_429 -> m16_430  [key=0, style=solid];
m16_429 -> m16_221  [key=2, style=dotted];
m16_428 -> m16_429  [key=0, style=solid];
m16_430 -> m16_428  [key=0, style=bold, color=blue];
m16_436 -> m16_437  [key=0, style=solid];
m16_436 -> m16_75  [key=2, style=dotted];
m16_435 -> m16_436  [key=0, style=solid];
m16_437 -> m16_435  [key=0, style=bold, color=blue];
m16_560 -> m16_561  [key=0, style=solid];
m16_560 -> m16_221  [key=2, style=dotted];
m16_559 -> m16_560  [key=0, style=solid];
m16_561 -> m16_559  [key=0, style=bold, color=blue];
m16_584 -> m16_585  [key=0, style=solid];
m16_584 -> m16_24  [key=2, style=dotted];
m16_583 -> m16_584  [key=0, style=solid];
m16_585 -> m16_583  [key=0, style=bold, color=blue];
m16_760 -> m16_761  [key=0, style=solid];
m16_760 -> m16_221  [key=2, style=dotted];
m16_759 -> m16_760  [key=0, style=solid];
m16_761 -> m16_759  [key=0, style=bold, color=blue];
m16_342 -> m16_343  [key=0, style=solid, color=green];
m16_342 -> m16_221  [key=2, style=dotted, color=green];
m16_342 -> m16_122  [key=2, style=dotted];
m16_343 -> m16_341  [key=0, style=bold, color=blue];
m16_343 -> m16_337  [key=0, style=bold, color=blue];
m16_635 -> m16_636  [key=0, style=solid];
m16_636 -> m16_637  [key=0, style=solid];
m16_636 -> m16_643  [key=2, style=dotted];
m16_637 -> m16_638  [key=0, style=solid];
m16_637 -> m16_644  [key=2, style=dotted];
m16_637 -> m16_639  [key=1, style=dashed, color=darkseagreen4, label=obj];
m16_638 -> m16_639  [key=0, style=solid];
m16_638 -> m16_97  [key=2, style=dotted];
m16_638 -> m16_48  [key=2, style=dotted];
m16_638 -> m16_645  [key=2, style=dotted];
m16_638 -> m16_640  [key=1, style=dashed, color=darkseagreen4, label=serializer];
m16_639 -> m16_640  [key=0, style=solid];
m16_639 -> m16_646  [key=2, style=dotted];
m16_640 -> m16_641  [key=0, style=solid];
m16_640 -> m16_647  [key=2, style=dotted];
m16_641 -> m16_642  [key=0, style=solid];
m16_641 -> m16_23  [key=2, style=dotted];
m16_642 -> m16_635  [key=0, style=bold, color=blue];
m16_701 -> m16_702  [key=0, style=solid];
m16_702 -> m16_703  [key=0, style=solid];
m16_702 -> m16_702  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m16_703 -> m16_704  [key=0, style=solid];
m16_703 -> m16_221  [key=2, style=dotted];
m16_704 -> m16_705  [key=0, style=solid];
m16_704 -> m16_23  [key=2, style=dotted];
m16_705 -> m16_701  [key=0, style=bold, color=blue];
m16_513 -> m16_514  [key=0, style=solid];
m16_514 -> m16_515  [key=0, style=solid];
m16_514 -> m16_527  [key=2, style=dotted];
m16_514 -> m16_516  [key=1, style=dashed, color=darkseagreen4, label=circularDictionary];
m16_514 -> m16_517  [key=1, style=dashed, color=darkseagreen4, label=circularDictionary];
m16_515 -> m16_516  [key=0, style=solid];
m16_515 -> m16_527  [key=2, style=dotted];
m16_515 -> m16_528  [key=2, style=dotted];
m16_516 -> m16_517  [key=0, style=solid];
m16_516 -> m16_528  [key=2, style=dotted];
m16_517 -> m16_518  [key=0, style=solid];
m16_517 -> m16_97  [key=2, style=dotted];
m16_517 -> m16_529  [key=2, style=dotted];
m16_517 -> m16_519  [key=1, style=dashed, color=darkseagreen4, label=json];
m16_518 -> m16_519  [key=0, style=solid];
m16_518 -> m16_122  [key=2, style=dotted];
m16_519 -> m16_520  [key=0, style=solid];
m16_519 -> m16_27  [key=2, style=dotted];
m16_519 -> m16_523  [key=1, style=dashed, color=darkseagreen4, label=node];
m16_520 -> m16_521  [key=0, style=solid];
m16_520 -> m16_345  [key=2, style=dotted];
m16_520 -> m16_522  [key=1, style=dashed, color=darkseagreen4, label=xml];
m16_523 -> m16_524  [key=0, style=solid];
m16_523 -> m16_0  [key=2, style=dotted];
m16_523 -> m16_525  [key=1, style=dashed, color=darkseagreen4, label=xmlJson];
m16_521 -> m16_522  [key=0, style=solid];
m16_521 -> m16_521  [key=3, color=darkorchid, style=bold, label="Local variable string expected"];
m16_522 -> m16_523  [key=0, style=solid];
m16_522 -> m16_122  [key=2, style=dotted];
m16_524 -> m16_525  [key=0, style=solid];
m16_524 -> m16_524  [key=3, color=darkorchid, style=bold, label="Local variable string expectedXmlJson"];
m16_525 -> m16_526  [key=0, style=solid];
m16_525 -> m16_122  [key=2, style=dotted];
m16_526 -> m16_513  [key=0, style=bold, color=blue];
m16_827 -> m16_828  [key=0, style=solid];
m16_828 -> m16_829  [key=0, style=solid];
m16_828 -> m16_813  [key=2, style=dotted];
m16_828 -> m16_831  [key=1, style=dashed, color=darkseagreen4, label=dt];
m16_829 -> m16_830  [key=0, style=solid];
m16_829 -> m16_829  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m16_831 -> m16_832  [key=0, style=solid];
m16_831 -> m16_814  [key=2, style=dotted];
m16_831 -> m16_271  [key=2, style=dotted];
m16_831 -> m16_23  [key=2, style=dotted];
m16_830 -> m16_831  [key=0, style=solid];
m16_830 -> m16_75  [key=2, style=dotted];
m16_830 -> m16_832  [key=1, style=dashed, color=darkseagreen4, label=dxml];
m16_832 -> m16_833  [key=0, style=solid];
m16_832 -> m16_271  [key=2, style=dotted];
m16_832 -> m16_84  [key=2, style=dotted];
m16_833 -> m16_827  [key=0, style=bold, color=blue];
m16_27 -> m16_28  [key=0, style=solid];
m16_27 -> m16_29  [key=1, style=dashed, color=darkseagreen4, label=string];
m16_27 -> m16_32  [key=1, style=dashed, color=darkseagreen4, label=string];
m16_27 -> m16_33  [key=1, style=dashed, color=darkseagreen4, label=string];
m16_27 -> m16_36  [key=1, style=dashed, color=darkseagreen4, label=string];
m16_27 -> m16_24  [key=3, color=darkorchid, style=bold, label="Parameter variable string json"];
m16_27 -> m16_517  [key=3, color=darkorchid, style=bold, label="Parameter variable string json"];
m16_27 -> m16_25  [key=3, color=darkorchid, style=bold, label="Parameter variable string deserializeRootElementName"];
m16_27 -> m16_519  [key=3, color=darkorchid, style=bold, label="Parameter variable string deserializeRootElementName"];
m16_27 -> m16_34  [key=3, color=darkorchid, style=bold, label="method methodReturn XmlNode DeserializeXmlNode"];
m16_28 -> m16_29  [key=0, style=solid];
m16_29 -> m16_30  [key=0, style=solid];
m16_29 -> m16_45  [key=2, style=dotted];
m16_29 -> m16_46  [key=2, style=dotted];
m16_29 -> m16_34  [key=1, style=dashed, color=darkseagreen4, label=reader];
m16_32 -> m16_33  [key=0, style=solid];
m16_32 -> m16_34  [key=0, style=solid];
m16_33 -> m16_34  [key=0, style=solid];
m16_33 -> m16_33  [key=1, style=dashed, color=darkseagreen4, label=converter];
m16_33 -> m16_38  [key=1, style=dashed, color=darkseagreen4, label=converter];
m16_36 -> m16_37  [key=0, style=solid];
m16_36 -> m16_45  [key=2, style=dotted];
m16_36 -> m16_46  [key=2, style=dotted];
m16_36 -> m16_38  [key=1, style=dashed, color=darkseagreen4, label=reader];
m16_30 -> m16_31  [key=0, style=solid];
m16_30 -> m16_47  [key=2, style=dotted];
m16_34 -> m16_35  [key=0, style=solid];
m16_34 -> m16_49  [key=2, style=dotted];
m16_34 -> m16_50  [key=2, style=dotted];
m16_34 -> m16_43  [key=1, style=dashed, color=darkseagreen4, label=node];
m16_31 -> m16_32  [key=0, style=solid];
m16_31 -> m16_48  [key=2, style=dotted];
m16_31 -> m16_33  [key=1, style=dashed, color=darkseagreen4, label=converter];
m16_31 -> m16_34  [key=1, style=dashed, color=darkseagreen4, label=converter];
m16_31 -> m16_38  [key=1, style=dashed, color=darkseagreen4, label=converter];
m16_38 -> m16_39  [key=0, style=solid];
m16_38 -> m16_49  [key=2, style=dotted];
m16_38 -> m16_50  [key=2, style=dotted];
m16_38 -> m16_40  [key=1, style=dashed, color=darkseagreen4, label=d];
m16_38 -> m16_41  [key=1, style=dashed, color=darkseagreen4, label=d];
m16_35 -> m16_36  [key=0, style=solid];
m16_35 -> m16_42  [key=1, style=dashed, color=darkseagreen4, label=xmlText];
m16_43 -> m16_44  [key=0, style=solid];
m16_42 -> m16_43  [key=0, style=solid];
m16_42 -> m16_23  [key=2, style=dotted];
m16_37 -> m16_38  [key=0, style=solid];
m16_37 -> m16_47  [key=2, style=dotted];
m16_39 -> m16_40  [key=0, style=solid];
m16_39 -> m16_51  [key=2, style=dotted];
m16_39 -> m16_41  [key=1, style=dashed, color=darkseagreen4, label=linqXmlText];
m16_39 -> m16_42  [key=1, style=dashed, color=darkseagreen4, label=linqXmlText];
m16_40 -> m16_41  [key=0, style=solid];
m16_40 -> m16_42  [key=0, style=solid];
m16_41 -> m16_42  [key=0, style=solid];
m16_41 -> m16_41  [key=1, style=dashed, color=darkseagreen4, label=linqXmlText];
m16_44 -> m16_27  [key=0, style=bold, color=blue];
m16_755 -> m16_756  [key=0, style=solid];
m16_756 -> m16_757  [key=0, style=solid];
m16_756 -> m16_760  [key=1, style=dashed, color=darkseagreen4, label=json];
m16_756 -> m16_756  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m16_757 -> m16_758  [key=0, style=solid];
m16_757 -> m16_142  [key=2, style=dotted];
m16_757 -> m16_759  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m16_758 -> m16_755  [key=0, style=bold, color=blue];
m16_466 -> m16_467  [key=0, style=solid];
m16_467 -> m16_468  [key=0, style=solid];
m16_467 -> m16_470  [key=1, style=dashed, color=darkseagreen4, label=json];
m16_467 -> m16_467  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m16_468 -> m16_469  [key=0, style=solid];
m16_468 -> m16_221  [key=2, style=dotted];
m16_470 -> m16_471  [key=0, style=solid];
m16_470 -> m16_75  [key=2, style=dotted];
m16_469 -> m16_470  [key=0, style=solid];
m16_469 -> m16_23  [key=2, style=dotted];
m16_471 -> m16_472  [key=0, style=solid];
m16_471 -> m16_51  [key=2, style=dotted];
m16_471 -> m16_23  [key=2, style=dotted];
m16_472 -> m16_466  [key=0, style=bold, color=blue];
m16_794 -> m16_795  [key=0, style=solid];
m16_795 -> m16_796  [key=0, style=solid];
m16_795 -> m16_795  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m16_796 -> m16_797  [key=0, style=solid];
m16_796 -> m16_75  [key=2, style=dotted];
m16_796 -> m16_798  [key=1, style=dashed, color=darkseagreen4, label=dxml];
m16_797 -> m16_798  [key=0, style=solid];
m16_797 -> m16_271  [key=2, style=dotted];
m16_797 -> m16_23  [key=2, style=dotted];
m16_798 -> m16_799  [key=0, style=solid];
m16_798 -> m16_271  [key=2, style=dotted];
m16_798 -> m16_84  [key=2, style=dotted];
m16_799 -> m16_794  [key=0, style=bold, color=blue];
m16_389 -> m16_390  [key=0, style=solid];
m16_390 -> m16_391  [key=0, style=solid];
m16_390 -> m16_390  [key=3, color=darkorchid, style=bold, label="Local variable string jsonText"];
m16_391 -> m16_392  [key=0, style=solid];
m16_391 -> m16_24  [key=2, style=dotted];
m16_391 -> m16_393  [key=1, style=dashed, color=darkseagreen4, label=newDoc];
m16_391 -> m16_394  [key=1, style=dashed, color=darkseagreen4, label=newDoc];
m16_392 -> m16_393  [key=0, style=solid];
m16_392 -> m16_392  [key=3, color=darkorchid, style=bold, label="Local variable string expected"];
m16_393 -> m16_394  [key=0, style=solid];
m16_393 -> m16_23  [key=2, style=dotted];
m16_394 -> m16_395  [key=0, style=solid];
m16_394 -> m16_15  [key=2, style=dotted];
m16_394 -> m16_396  [key=1, style=dashed, color=darkseagreen4, label=json];
m16_395 -> m16_396  [key=0, style=solid];
m16_396 -> m16_397  [key=0, style=solid];
m16_396 -> m16_122  [key=2, style=dotted];
m16_397 -> m16_389  [key=0, style=bold, color=blue];
m16_741 -> m16_742  [key=0, style=solid];
m16_742 -> m16_743  [key=0, style=solid];
m16_742 -> m16_742  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m16_743 -> m16_744  [key=0, style=solid];
m16_743 -> m16_221  [key=2, style=dotted];
m16_743 -> m16_745  [key=1, style=dashed, color=darkseagreen4, label=node];
m16_744 -> m16_745  [key=0, style=solid];
m16_744 -> m16_23  [key=2, style=dotted];
m16_745 -> m16_746  [key=0, style=solid];
m16_745 -> m16_15  [key=2, style=dotted];
m16_746 -> m16_747  [key=0, style=solid];
m16_746 -> m16_23  [key=2, style=dotted];
m16_747 -> m16_741  [key=0, style=bold, color=blue];
m16_311 -> m16_314  [key=0, style=solid];
m16_311 -> m16_315  [key=1, style=dashed, color=darkseagreen4, label=bool];
m16_311 -> m16_316  [key=1, style=dashed, color=darkseagreen4, label=XDocument];
m16_311 -> m16_307  [key=3, color=darkorchid, style=bold, label="Parameter variable XDocument doc"];
m16_314 -> m16_315  [key=0, style=solid];
m16_314 -> m16_319  [key=2, style=dotted];
m16_314 -> m16_317  [key=1, style=dashed, color=darkseagreen4, label=builder];
m16_315 -> m16_316  [key=0, style=solid];
m16_315 -> m16_312  [key=2, style=dotted];
m16_315 -> m16_63  [key=2, style=dotted];
m16_315 -> m16_61  [key=2, style=dotted];
m16_316 -> m16_317  [key=0, style=solid];
m16_316 -> m16_320  [key=2, style=dotted];
m16_317 -> m16_318  [key=0, style=solid];
m16_317 -> m16_321  [key=2, style=dotted];
m16_318 -> m16_311  [key=0, style=bold, color=blue];
m16_733 -> m16_734  [key=0, style=solid];
m16_734 -> m16_735  [key=0, style=solid];
m16_734 -> m16_736  [key=1, style=dashed, color=darkseagreen4, label=xmlString];
m16_734 -> m16_726  [key=3, color=darkorchid, style=bold, label="Local variable string xmlString"];
m16_735 -> m16_736  [key=0, style=solid];
m16_735 -> m16_132  [key=2, style=dotted];
m16_735 -> m16_737  [key=1, style=dashed, color=darkseagreen4, label=xml];
m16_736 -> m16_737  [key=0, style=solid];
m16_736 -> m16_133  [key=2, style=dotted];
m16_737 -> m16_738  [key=0, style=solid];
m16_737 -> m16_15  [key=2, style=dotted];
m16_738 -> m16_739  [key=0, style=solid];
m16_738 -> m16_142  [key=2, style=dotted];
m16_739 -> m16_740  [key=0, style=solid];
m16_739 -> m16_23  [key=2, style=dotted];
m16_740 -> m16_733  [key=0, style=bold, color=blue];
m16_780 -> m16_781  [key=0, style=solid];
m16_781 -> m16_782  [key=0, style=solid];
m16_781 -> m16_774  [key=2, style=dotted];
m16_782 -> m16_783  [key=0, style=solid];
m16_782 -> m16_786  [key=2, style=dotted];
m16_782 -> m16_782  [key=1, style=dashed, color=darkseagreen4, label=d];
m16_783 -> m16_784  [key=0, style=solid];
m16_783 -> m16_22  [key=2, style=dotted];
m16_784 -> m16_785  [key=0, style=solid];
m16_784 -> m16_23  [key=2, style=dotted];
m16_785 -> m16_780  [key=0, style=bold, color=blue];
m16_506 -> m16_507  [key=0, style=solid];
m16_507 -> m16_508  [key=0, style=solid];
m16_507 -> m16_507  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m16_508 -> m16_509  [key=0, style=solid];
m16_508 -> m16_24  [key=2, style=dotted];
m16_508 -> m16_510  [key=1, style=dashed, color=darkseagreen4, label=doc];
m16_509 -> m16_510  [key=0, style=solid];
m16_509 -> m16_23  [key=2, style=dotted];
m16_510 -> m16_511  [key=0, style=solid];
m16_510 -> m16_15  [key=2, style=dotted];
m16_511 -> m16_512  [key=0, style=solid];
m16_511 -> m16_122  [key=2, style=dotted];
m16_512 -> m16_506  [key=0, style=bold, color=blue];
m16_857 -> m16_858  [key=0, style=solid];
m16_858 -> m16_859  [key=0, style=solid];
m16_858 -> m16_120  [key=2, style=dotted];
m16_858 -> m16_860  [key=1, style=dashed, color=darkseagreen4, label=original];
m16_859 -> m16_860  [key=0, style=solid];
m16_859 -> m16_51  [key=2, style=dotted];
m16_859 -> m16_23  [key=2, style=dotted];
m16_860 -> m16_861  [key=0, style=solid];
m16_860 -> m16_121  [key=2, style=dotted];
m16_860 -> m16_862  [key=1, style=dashed, color=darkseagreen4, label=json];
m16_861 -> m16_862  [key=0, style=solid];
m16_861 -> m16_23  [key=2, style=dotted];
m16_862 -> m16_863  [key=0, style=solid];
m16_862 -> m16_110  [key=2, style=dotted];
m16_863 -> m16_864  [key=0, style=solid];
m16_863 -> m16_51  [key=2, style=dotted];
m16_863 -> m16_23  [key=2, style=dotted];
m16_864 -> m16_857  [key=0, style=bold, color=blue];
m16_285 -> m16_286  [key=0, style=solid];
m16_286 -> m16_287  [key=0, style=solid];
m16_286 -> m16_132  [key=2, style=dotted];
m16_287 -> m16_288  [key=0, style=solid];
m16_287 -> m16_293  [key=2, style=dotted];
m16_288 -> m16_289  [key=0, style=solid];
m16_288 -> m16_288  [key=1, style=dashed, color=darkseagreen4, label=fragement];
m16_289 -> m16_290  [key=0, style=solid];
m16_289 -> m16_15  [key=2, style=dotted];
m16_289 -> m16_291  [key=1, style=dashed, color=darkseagreen4, label=jsonText];
m16_290 -> m16_291  [key=0, style=solid];
m16_290 -> m16_290  [key=3, color=darkorchid, style=bold, label="Local variable string expected"];
m16_291 -> m16_292  [key=0, style=solid];
m16_291 -> m16_23  [key=2, style=dotted];
m16_292 -> m16_285  [key=0, style=bold, color=blue];
m16_555 -> m16_556  [key=0, style=solid];
m16_556 -> m16_557  [key=0, style=solid];
m16_556 -> m16_560  [key=1, style=dashed, color=darkseagreen4, label=json];
m16_556 -> m16_556  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m16_557 -> m16_558  [key=0, style=solid];
m16_557 -> m16_142  [key=2, style=dotted];
m16_557 -> m16_559  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m16_558 -> m16_555  [key=0, style=bold, color=blue];
m16_52 -> m16_53  [key=0, style=solid];
m16_53 -> m16_54  [key=0, style=solid];
m16_53 -> m16_46  [key=2, style=dotted];
m16_53 -> m16_61  [key=2, style=dotted];
m16_53 -> m16_56  [key=1, style=dashed, color=darkseagreen4, label=reader];
m16_53 -> m16_57  [key=1, style=dashed, color=darkseagreen4, label=reader];
m16_54 -> m16_55  [key=0, style=solid];
m16_54 -> m16_62  [key=2, style=dotted];
m16_54 -> m16_59  [key=1, style=dashed, color=darkseagreen4, label=sw];
m16_56 -> m16_57  [key=0, style=solid];
m16_56 -> m16_58  [key=0, style=solid];
m16_56 -> m16_64  [key=2, style=dotted];
m16_57 -> m16_56  [key=0, style=solid];
m16_57 -> m16_65  [key=2, style=dotted];
m16_55 -> m16_56  [key=0, style=solid];
m16_55 -> m16_63  [key=2, style=dotted];
m16_55 -> m16_61  [key=2, style=dotted];
m16_55 -> m16_57  [key=1, style=dashed, color=darkseagreen4, label=writer];
m16_55 -> m16_58  [key=1, style=dashed, color=darkseagreen4, label=writer];
m16_59 -> m16_60  [key=0, style=solid];
m16_59 -> m16_67  [key=2, style=dotted];
m16_58 -> m16_59  [key=0, style=solid];
m16_58 -> m16_66  [key=2, style=dotted];
m16_60 -> m16_52  [key=0, style=bold, color=blue];
m16_152 -> m16_153  [key=0, style=solid];
m16_153 -> m16_154  [key=0, style=solid];
m16_153 -> m16_153  [key=3, color=darkorchid, style=bold, label="Local variable decimal d"];
m16_154 -> m16_155  [key=0, style=solid];
m16_154 -> m16_163  [key=2, style=dotted];
m16_154 -> m16_161  [key=1, style=dashed, color=darkseagreen4, label=x];
m16_155 -> m16_156  [key=0, style=solid];
m16_155 -> m16_164  [key=2, style=dotted];
m16_161 -> m16_162  [key=0, style=solid];
m16_161 -> m16_23  [key=2, style=dotted];
m16_156 -> m16_157  [key=0, style=solid];
m16_156 -> m16_97  [key=2, style=dotted];
m16_156 -> m16_48  [key=2, style=dotted];
m16_156 -> m16_165  [key=2, style=dotted];
m16_156 -> m16_159  [key=1, style=dashed, color=darkseagreen4, label=doc1];
m16_157 -> m16_158  [key=0, style=solid];
m16_157 -> m16_51  [key=2, style=dotted];
m16_159 -> m16_160  [key=0, style=solid];
m16_159 -> m16_121  [key=2, style=dotted];
m16_158 -> m16_159  [key=0, style=solid];
m16_158 -> m16_23  [key=2, style=dotted];
m16_160 -> m16_161  [key=0, style=solid];
m16_160 -> m16_110  [key=2, style=dotted];
m16_162 -> m16_152  [key=0, style=bold, color=blue];
m16_182 -> m16_183  [key=0, style=solid];
m16_183 -> m16_184  [key=0, style=solid];
m16_183 -> m16_183  [key=3, color=darkorchid, style=bold, label="Local variable string xml"];
m16_184 -> m16_185  [key=0, style=solid];
m16_184 -> m16_120  [key=2, style=dotted];
m16_184 -> m16_22  [key=2, style=dotted];
m16_184 -> m16_186  [key=1, style=dashed, color=darkseagreen4, label=json];
m16_185 -> m16_186  [key=0, style=solid];
m16_185 -> m16_23  [key=2, style=dotted];
m16_186 -> m16_187  [key=0, style=solid];
m16_186 -> m16_75  [key=2, style=dotted];
m16_187 -> m16_188  [key=0, style=solid];
m16_187 -> m16_51  [key=2, style=dotted];
m16_187 -> m16_23  [key=2, style=dotted];
m16_188 -> m16_182  [key=0, style=bold, color=blue];
m16_628 -> m16_629  [key=0, style=solid];
m16_629 -> m16_630  [key=0, style=solid];
m16_629 -> m16_631  [key=1, style=dashed, color=darkseagreen4, label=xml];
m16_629 -> m16_629  [key=3, color=darkorchid, style=bold, label="Local variable string xml"];
m16_630 -> m16_631  [key=0, style=solid];
m16_630 -> m16_132  [key=2, style=dotted];
m16_630 -> m16_632  [key=1, style=dashed, color=darkseagreen4, label=d];
m16_631 -> m16_632  [key=0, style=solid];
m16_631 -> m16_133  [key=2, style=dotted];
m16_632 -> m16_633  [key=0, style=solid];
m16_632 -> m16_15  [key=2, style=dotted];
m16_633 -> m16_634  [key=0, style=solid];
m16_633 -> m16_122  [key=2, style=dotted];
m16_634 -> m16_628  [key=0, style=bold, color=blue];
m16_110 -> m16_110  [key=3, color=darkorchid, style=bold, label="Local variable string expected"];
m16_762 -> m16_763  [key=0, style=solid];
m16_763 -> m16_764  [key=0, style=solid];
m16_763 -> m16_765  [key=1, style=dashed, color=darkseagreen4, label=xmlString];
m16_763 -> m16_763  [key=3, color=darkorchid, style=bold, label="Local variable string xmlString"];
m16_764 -> m16_765  [key=0, style=solid];
m16_764 -> m16_132  [key=2, style=dotted];
m16_764 -> m16_766  [key=1, style=dashed, color=darkseagreen4, label=xml];
m16_765 -> m16_766  [key=0, style=solid];
m16_765 -> m16_133  [key=2, style=dotted];
m16_766 -> m16_767  [key=0, style=solid];
m16_766 -> m16_15  [key=2, style=dotted];
m16_767 -> m16_768  [key=0, style=solid];
m16_767 -> m16_23  [key=2, style=dotted];
m16_768 -> m16_762  [key=0, style=bold, color=blue];
m16_215 -> m16_216  [key=0, style=solid];
m16_216 -> m16_217  [key=0, style=solid];
m16_216 -> m16_221  [key=2, style=dotted];
m16_216 -> m16_219  [key=1, style=dashed, color=darkseagreen4, label=doc];
m16_217 -> m16_218  [key=0, style=solid];
m16_217 -> m16_23  [key=2, style=dotted];
m16_219 -> m16_220  [key=0, style=solid];
m16_219 -> m16_51  [key=2, style=dotted];
m16_219 -> m16_23  [key=2, style=dotted];
m16_218 -> m16_219  [key=0, style=solid];
m16_218 -> m16_75  [key=2, style=dotted];
m16_220 -> m16_215  [key=0, style=bold, color=blue];
m16_612 -> m16_613  [key=0, style=solid];
m16_613 -> m16_614  [key=0, style=solid];
m16_613 -> m16_615  [key=1, style=dashed, color=darkseagreen4, label=xml];
m16_613 -> m16_613  [key=3, color=darkorchid, style=bold, label="Local variable string xml"];
m16_614 -> m16_615  [key=0, style=solid];
m16_614 -> m16_132  [key=2, style=dotted];
m16_614 -> m16_616  [key=1, style=dashed, color=darkseagreen4, label=d];
m16_615 -> m16_616  [key=0, style=solid];
m16_615 -> m16_133  [key=2, style=dotted];
m16_616 -> m16_617  [key=0, style=solid];
m16_616 -> m16_15  [key=2, style=dotted];
m16_617 -> m16_618  [key=0, style=solid];
m16_617 -> m16_122  [key=2, style=dotted];
m16_618 -> m16_612  [key=0, style=bold, color=blue];
m16_327 -> m16_328  [key=0, style=solid];
m16_328 -> m16_329  [key=0, style=solid];
m16_328 -> m16_330  [key=1, style=dashed, color=darkseagreen4, label=xml];
m16_328 -> m16_328  [key=3, color=darkorchid, style=bold, label="Local variable string xml"];
m16_329 -> m16_330  [key=0, style=solid];
m16_329 -> m16_132  [key=2, style=dotted];
m16_329 -> m16_331  [key=1, style=dashed, color=darkseagreen4, label=doc];
m16_329 -> m16_335  [key=1, style=dashed, color=darkseagreen4, label=doc];
m16_330 -> m16_331  [key=0, style=solid];
m16_330 -> m16_133  [key=2, style=dotted];
m16_331 -> m16_332  [key=0, style=solid];
m16_331 -> m16_15  [key=2, style=dotted];
m16_331 -> m16_333  [key=1, style=dashed, color=darkseagreen4, label=jsonText];
m16_331 -> m16_334  [key=1, style=dashed, color=darkseagreen4, label=jsonText];
m16_335 -> m16_336  [key=0, style=solid];
m16_335 -> m16_23  [key=2, style=dotted];
m16_332 -> m16_333  [key=0, style=solid];
m16_332 -> m16_332  [key=3, color=darkorchid, style=bold, label="Local variable string expected"];
m16_333 -> m16_334  [key=0, style=solid];
m16_333 -> m16_122  [key=2, style=dotted];
m16_334 -> m16_335  [key=0, style=solid];
m16_334 -> m16_24  [key=2, style=dotted];
m16_336 -> m16_327  [key=0, style=bold, color=blue];
m16_530 -> m16_531  [key=0, style=solid];
m16_531 -> m16_532  [key=0, style=solid];
m16_531 -> m16_536  [key=1, style=dashed, color=darkseagreen4, label=json];
m16_531 -> m16_553  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m16_532 -> m16_533  [key=0, style=solid];
m16_532 -> m16_221  [key=2, style=dotted];
m16_532 -> m16_535  [key=1, style=dashed, color=darkseagreen4, label=node];
m16_536 -> m16_537  [key=0, style=solid];
m16_536 -> m16_122  [key=2, style=dotted];
m16_533 -> m16_534  [key=0, style=solid];
m16_533 -> m16_345  [key=2, style=dotted];
m16_535 -> m16_536  [key=0, style=solid];
m16_535 -> m16_15  [key=2, style=dotted];
m16_534 -> m16_535  [key=0, style=solid];
m16_534 -> m16_122  [key=2, style=dotted];
m16_537 -> m16_530  [key=0, style=bold, color=blue];
m16_424 -> m16_425  [key=0, style=solid];
m16_425 -> m16_426  [key=0, style=solid];
m16_425 -> m16_429  [key=1, style=dashed, color=darkseagreen4, label=json];
m16_425 -> m16_425  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m16_426 -> m16_427  [key=0, style=solid];
m16_426 -> m16_142  [key=2, style=dotted];
m16_426 -> m16_428  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m16_427 -> m16_424  [key=0, style=bold, color=blue];
m16_222 -> m16_223  [key=0, style=solid];
m16_223 -> m16_224  [key=0, style=solid];
m16_223 -> m16_227  [key=1, style=dashed, color=darkseagreen4, label=json];
m16_223 -> m16_223  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m16_224 -> m16_225  [key=0, style=solid];
m16_224 -> m16_142  [key=2, style=dotted];
m16_224 -> m16_226  [key=1, style=dashed, color=darkseagreen4, label="lambda expression"];
m16_225 -> m16_222  [key=0, style=bold, color=blue];
m16_547 -> m16_548  [key=0, style=solid];
m16_548 -> m16_549  [key=0, style=solid];
m16_548 -> m16_548  [key=3, color=darkorchid, style=bold, label="Local variable string json"];
m16_549 -> m16_550  [key=0, style=solid];
m16_549 -> m16_221  [key=2, style=dotted];
m16_549 -> m16_552  [key=1, style=dashed, color=darkseagreen4, label=node];
m16_550 -> m16_551  [key=0, style=solid];
m16_550 -> m16_345  [key=2, style=dotted];
m16_552 -> m16_553  [key=0, style=solid];
m16_552 -> m16_15  [key=2, style=dotted];
m16_551 -> m16_552  [key=0, style=solid];
m16_551 -> m16_122  [key=2, style=dotted];
m16_553 -> m16_554  [key=0, style=solid];
m16_553 -> m16_122  [key=2, style=dotted];
m16_554 -> m16_547  [key=0, style=bold, color=blue];
m16_865 -> m16_866  [key=0, style=solid];
m16_866 -> m16_867  [key=0, style=solid];
m16_866 -> m16_774  [key=2, style=dotted];
m16_866 -> m16_856  [key=2, style=dotted];
m16_866 -> m16_868  [key=1, style=dashed, color=darkseagreen4, label=original];
m16_867 -> m16_868  [key=0, style=solid];
m16_867 -> m16_51  [key=2, style=dotted];
m16_867 -> m16_23  [key=2, style=dotted];
m16_868 -> m16_869  [key=0, style=solid];
m16_868 -> m16_121  [key=2, style=dotted];
m16_868 -> m16_870  [key=1, style=dashed, color=darkseagreen4, label=json];
m16_869 -> m16_870  [key=0, style=solid];
m16_869 -> m16_23  [key=2, style=dotted];
m16_870 -> m16_871  [key=0, style=solid];
m16_870 -> m16_110  [key=2, style=dotted];
m16_871 -> m16_872  [key=0, style=solid];
m16_871 -> m16_51  [key=2, style=dotted];
m16_871 -> m16_23  [key=2, style=dotted];
m16_872 -> m16_865  [key=0, style=bold, color=blue];
m16_894 -> m16_25  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m16_894 -> m16_233  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m16_894 -> m16_280  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m16_894 -> m16_282  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m16_894 -> m16_331  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m16_894 -> m16_334  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m16_894 -> m16_339  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m16_894 -> m16_341  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m16_894 -> m16_358  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m16_894 -> m16_359  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m16_894 -> m16_366  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m16_894 -> m16_368  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m16_894 -> m16_373  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m16_894 -> m16_391  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m16_894 -> m16_394  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m16_894 -> m16_402  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m16_894 -> m16_408  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m16_894 -> m16_414  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m16_894 -> m16_420  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m16_894 -> m16_448  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m16_894 -> m16_449  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m16_894 -> m16_451  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m16_894 -> m16_460  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m16_894 -> m16_462  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m16_894 -> m16_476  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m16_894 -> m16_483  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m16_894 -> m16_486  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m16_894 -> m16_493  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m16_894 -> m16_496  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m16_894 -> m16_503  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m16_894 -> m16_508  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m16_894 -> m16_510  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m16_894 -> m16_519  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m16_894 -> m16_520  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m16_894 -> m16_523  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m16_894 -> m16_533  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m16_894 -> m16_541  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m16_894 -> m16_550  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m16_894 -> m16_565  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m16_894 -> m16_573  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m16_894 -> m16_580  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m16_894 -> m16_584  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m16_894 -> m16_594  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m16_894 -> m16_606  [key=1, style=dashed, color=darkseagreen4, label="Newtonsoft.Json.Tests.Converters.XmlNodeConverterTest"];
m16_895 -> m16_227  [key=1, style=dashed, color=darkseagreen4, label=json];
m16_896 -> m16_429  [key=1, style=dashed, color=darkseagreen4, label=json];
m16_896 -> m16_342  [key=1, style=dashed, color=green, label=json];
m16_897 -> m16_436  [key=1, style=dashed, color=darkseagreen4, label=json];
m16_898 -> m16_560  [key=1, style=dashed, color=darkseagreen4, label=json];
m16_899 -> m16_584  [key=1, style=dashed, color=darkseagreen4, label=json];
m16_900 -> m16_760  [key=1, style=dashed, color=darkseagreen4, label=json];
m16_900 -> m16_429  [key=1, style=dashed, color=green, label=json];
}
