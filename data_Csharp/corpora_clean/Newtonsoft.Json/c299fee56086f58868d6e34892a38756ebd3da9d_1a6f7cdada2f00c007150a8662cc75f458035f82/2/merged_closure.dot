digraph  {
n16 [label="Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter", span=""];
n0 [cluster="Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", label="Entry Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", span="10-10"];
n1 [cluster="Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", label=current, span="12-12"];
n5 [cluster="Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", label="yield return v;", span="20-20"];
n8 [cluster="Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", label="yield return v;", span="29-29"];
n9 [cluster="Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", label=errorWhenNoMatch, span="34-34"];
n2 [cluster="Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", label="Index != null", span="14-14"];
n11 [cluster="Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", label="Exit Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", span="10-10"];
n6 [cluster="Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", label="t is JArray || t is JConstructor", span="25-25"];
n7 [cluster="Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", label=t, span="27-27"];
n10 [cluster="Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", label="throw new JsonException(''Index * not valid on {0}.''.FormatWith(CultureInfo.InvariantCulture, t.GetType().Name));", span="36-36"];
n4 [cluster="Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", label="v != null", span="18-18"];
n12 [cluster="Newtonsoft.Json.Linq.JsonPath.PathFilter.GetTokenIndex(Newtonsoft.Json.Linq.JToken, bool, int)", label="Entry Newtonsoft.Json.Linq.JsonPath.PathFilter.GetTokenIndex(Newtonsoft.Json.Linq.JToken, bool, int)", span="10-10"];
n13 [cluster="Newtonsoft.Json.JsonException.JsonException(string)", label="Entry Newtonsoft.Json.JsonException.JsonException(string)", span="54-54"];
n14 [cluster="object.GetType()", label="Entry object.GetType()", span="0-0"];
n15 [cluster="string.FormatWith(System.IFormatProvider, object)", label="Entry string.FormatWith(System.IFormatProvider, object)", span="47-47"];
d3 [cluster="Newtonsoft.Json.Linq.JsonPath.ArrayIndexFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", color=green, community=0, label="JToken v = GetTokenIndex(t, errorWhenNoMatch, Index.Value)", prediction=0, span="16-16"];
m0_65 [cluster="Newtonsoft.Json.Serialization.IAttributeProvider.GetAttributes(bool)", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Serialization.IAttributeProvider.GetAttributes(bool)", span="40-40"];
m0_126 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CustomList<T>.CustomList()", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CustomList<T>.CustomList()", span="222-222"];
m0_9 [cluster="Newtonsoft.Json.Linq.JsonPath.ArraySliceFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="ArraySliceFilter.cs", label="Start < 0", span="31-31"];
m0_58 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.PropertyAttributeProvider()", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.PropertyAttributeProvider()", span="160-160"];
m0_59 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.PropertyAttributeProvider()", file="ArraySliceFilter.cs", label="var resolver = new DefaultContractResolver()", span="162-162"];
m0_60 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.PropertyAttributeProvider()", file="ArraySliceFilter.cs", label="var contract = (JsonObjectContract)resolver.ResolveContract(typeof(Invoice))", span="163-163"];
m0_61 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.PropertyAttributeProvider()", file="ArraySliceFilter.cs", label="JsonProperty property = contract.Properties[''FollowUpDays'']", span="165-165"];
m0_62 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.PropertyAttributeProvider()", file="ArraySliceFilter.cs", label="Assert.AreEqual(1, property.AttributeProvider.GetAttributes(false).Count)", span="166-166"];
m0_63 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.PropertyAttributeProvider()", file="ArraySliceFilter.cs", label="Assert.AreEqual(typeof(DefaultValueAttribute), property.AttributeProvider.GetAttributes(false)[0].GetType())", span="167-167"];
m0_64 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.PropertyAttributeProvider()", file="ArraySliceFilter.cs", label="Exit Newtonsoft.Json.Tests.Serialization.ContractResolverTests.PropertyAttributeProvider()", span="160-160"];
m0_78 [cluster="Unk.IsFalse", file="ArraySliceFilter.cs", label="Entry Unk.IsFalse", span=""];
m0_90 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractListTestClass()", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractListTestClass()", span="196-196"];
m0_91 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractListTestClass()", file="ArraySliceFilter.cs", label="var resolver = new DefaultContractResolver()", span="198-198"];
m0_92 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractListTestClass()", file="ArraySliceFilter.cs", label="var contract = (JsonArrayContract)resolver.ResolveContract(typeof(AbstractListTestClass<int>))", span="199-199"];
m0_96 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractListTestClass()", file="ArraySliceFilter.cs", label="ExceptionAssert.Throws<JsonSerializationException>(() => JsonConvert.DeserializeObject<AbstractListTestClass<int>>(@''[1,2]'', new JsonSerializerSettings\r\n            {\r\n                ContractResolver = resolver\r\n            }), ''Could not create an instance of type Newtonsoft.Json.Tests.Serialization.AbstractListTestClass`1[System.Int32]. Type is an interface or abstract class and cannot be instantiated. Path '', line 1, position 1.'')", span="205-208"];
m0_98 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractListTestClass()", file="ArraySliceFilter.cs", label="var l = JsonConvert.DeserializeObject<AbstractListTestClass<int>>(@''[1,2]'', new JsonSerializerSettings\r\n            {\r\n                ContractResolver = resolver\r\n            })", span="212-215"];
m0_93 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractListTestClass()", file="ArraySliceFilter.cs", label="Assert.IsFalse(contract.IsInstantiable)", span="201-201"];
m0_94 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractListTestClass()", file="ArraySliceFilter.cs", label="Assert.IsNull(contract.DefaultCreator)", span="202-202"];
m0_95 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractListTestClass()", file="ArraySliceFilter.cs", label="Assert.IsFalse(contract.HasParameterizedCreatorInternal)", span="203-203"];
m0_97 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractListTestClass()", file="ArraySliceFilter.cs", label="contract.DefaultCreator = () => new AbstractImplementationListTestClass<int>()", span="210-210"];
m0_99 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractListTestClass()", file="ArraySliceFilter.cs", label="Assert.AreEqual(2, l.Count)", span="217-217"];
m0_100 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractListTestClass()", file="ArraySliceFilter.cs", label="Assert.AreEqual(1, l[0])", span="218-218"];
m0_101 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractListTestClass()", file="ArraySliceFilter.cs", label="Assert.AreEqual(2, l[1])", span="219-219"];
m0_102 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractListTestClass()", file="ArraySliceFilter.cs", label="Exit Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractListTestClass()", span="196-196"];
m0_163 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeWithEscapedPropertyName()", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeWithEscapedPropertyName()", span="303-303"];
m0_164 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeWithEscapedPropertyName()", file="ArraySliceFilter.cs", label="string json = JsonConvert.SerializeObject(\r\n                new AddressWithDataMember\r\n                {\r\n                    AddressLine1 = ''value!''\r\n                },\r\n                new JsonSerializerSettings\r\n                {\r\n                    ContractResolver = new EscapedPropertiesContractResolver\r\n                    {\r\n                        PropertySuffix = @''-'-''''-''\r\n                    }\r\n                })", span="305-316"];
m0_165 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeWithEscapedPropertyName()", file="ArraySliceFilter.cs", label="Assert.AreEqual(@''{''''AddressLine1-'-\''''-'''':''''value!''''}'', json)", span="318-318"];
m0_166 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeWithEscapedPropertyName()", file="ArraySliceFilter.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="320-320"];
m0_167 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeWithEscapedPropertyName()", file="ArraySliceFilter.cs", label="reader.Read()", span="321-321"];
m0_168 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeWithEscapedPropertyName()", file="ArraySliceFilter.cs", label="reader.Read()", span="322-322"];
m0_169 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeWithEscapedPropertyName()", file="ArraySliceFilter.cs", label="Assert.AreEqual(@''AddressLine1-'-''''-'', reader.Value)", span="324-324"];
m0_170 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeWithEscapedPropertyName()", file="ArraySliceFilter.cs", label="Exit Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeWithEscapedPropertyName()", span="303-303"];
m0_175 [cluster="System.IO.StringReader.StringReader(string)", file="ArraySliceFilter.cs", label="Entry System.IO.StringReader.StringReader(string)", span="0-0"];
m0_324 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ClassWithExtensionData.ClassWithExtensionData()", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ClassWithExtensionData.ClassWithExtensionData()", span="613-613"];
m0_310 [cluster="Newtonsoft.Json.Linq.JObject.Parse(string)", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Linq.JObject.Parse(string)", span="409-409"];
m0_286 [cluster="Newtonsoft.Json.Tests.Serialization.IPersonContractResolver.IPersonContractResolver()", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Tests.Serialization.IPersonContractResolver.IPersonContractResolver()", span="95-95"];
m0_143 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractDictionaryTestClass()", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractDictionaryTestClass()", span="276-276"];
m0_144 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractDictionaryTestClass()", file="ArraySliceFilter.cs", label="var resolver = new DefaultContractResolver()", span="278-278"];
m0_145 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractDictionaryTestClass()", file="ArraySliceFilter.cs", label="var contract = (JsonDictionaryContract)resolver.ResolveContract(typeof(AbstractDictionaryTestClass<string, int>))", span="279-279"];
m0_149 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractDictionaryTestClass()", file="ArraySliceFilter.cs", label="ExceptionAssert.Throws<JsonSerializationException>(() => JsonConvert.DeserializeObject<AbstractDictionaryTestClass<string, int>>(@''{key1:1,key2:2}'', new JsonSerializerSettings\r\n            {\r\n                ContractResolver = resolver\r\n            }), ''Could not create an instance of type Newtonsoft.Json.Tests.Serialization.AbstractDictionaryTestClass`2[System.String,System.Int32]. Type is an interface or abstract class and cannot be instantiated. Path 'key1', line 1, position 6.'')", span="285-288"];
m0_151 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractDictionaryTestClass()", file="ArraySliceFilter.cs", label="var d = JsonConvert.DeserializeObject<AbstractDictionaryTestClass<string, int>>(@''{key1:1,key2:2}'', new JsonSerializerSettings\r\n            {\r\n                ContractResolver = resolver\r\n            })", span="292-295"];
m0_146 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractDictionaryTestClass()", file="ArraySliceFilter.cs", label="Assert.IsFalse(contract.IsInstantiable)", span="281-281"];
m0_147 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractDictionaryTestClass()", file="ArraySliceFilter.cs", label="Assert.IsNull(contract.DefaultCreator)", span="282-282"];
m0_148 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractDictionaryTestClass()", file="ArraySliceFilter.cs", label="Assert.IsFalse(contract.HasParameterizedCreatorInternal)", span="283-283"];
m0_150 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractDictionaryTestClass()", file="ArraySliceFilter.cs", label="contract.DefaultCreator = () => new AbstractImplementationDictionaryTestClass<string, int>()", span="290-290"];
m0_152 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractDictionaryTestClass()", file="ArraySliceFilter.cs", label="Assert.AreEqual(2, d.Count)", span="297-297"];
m0_153 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractDictionaryTestClass()", file="ArraySliceFilter.cs", label="Assert.AreEqual(1, d[''key1''])", span="298-298"];
m0_154 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractDictionaryTestClass()", file="ArraySliceFilter.cs", label="Assert.AreEqual(2, d[''key2''])", span="299-299"];
m0_155 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractDictionaryTestClass()", file="ArraySliceFilter.cs", label="Exit Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractDictionaryTestClass()", span="276-276"];
m0_15 [cluster="Newtonsoft.Json.Linq.JsonPath.ArraySliceFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="ArraySliceFilter.cs", label="stopIndex = Math.Max(stopIndex, -1)", span="45-45"];
m0_225 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DeserializeDataMemberClassWithNoDataContract()", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DeserializeDataMemberClassWithNoDataContract()", span="417-417"];
m0_226 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DeserializeDataMemberClassWithNoDataContract()", file="ArraySliceFilter.cs", label="var resolver = new DefaultContractResolver()", span="419-419"];
m0_227 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DeserializeDataMemberClassWithNoDataContract()", file="ArraySliceFilter.cs", label="var contract = (JsonObjectContract)resolver.ResolveContract(typeof(AddressWithDataMember))", span="420-420"];
m0_228 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DeserializeDataMemberClassWithNoDataContract()", file="ArraySliceFilter.cs", label="Assert.AreEqual(''AddressLine1'', contract.Properties[0].PropertyName)", span="422-422"];
m0_229 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DeserializeDataMemberClassWithNoDataContract()", file="ArraySliceFilter.cs", label="Exit Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DeserializeDataMemberClassWithNoDataContract()", span="417-417"];
m0_14 [cluster="Newtonsoft.Json.Linq.JsonPath.ArraySliceFilter.ExecuteFilter(System.Collections.Generic.IEnumerable<Newtonsoft.Json.Linq.JToken>, bool)", file="ArraySliceFilter.cs", label="startIndex = Math.Min(startIndex, (stepCount > 0) ? a.Count : a.Count - 1)", span="44-44"];
m0_171 [cluster="Newtonsoft.Json.Tests.Serialization.AddressWithDataMember.AddressWithDataMember()", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Tests.Serialization.AddressWithDataMember.AddressWithDataMember()", span="108-108"];
m0_251 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.OverrideCreator()", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.OverrideCreator()", span="456-456"];
m0_252 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.OverrideCreator()", file="ArraySliceFilter.cs", label="var resolver = new DefaultContractResolver()", span="458-458"];
m0_253 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.OverrideCreator()", file="ArraySliceFilter.cs", label="var contract = (JsonObjectContract)resolver.ResolveContract(typeof(MultipleParametrizedConstructorsJsonConstructor))", span="459-459"];
m0_254 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.OverrideCreator()", file="ArraySliceFilter.cs", label="Assert.IsNull(contract.DefaultCreator)", span="461-461"];
m0_255 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.OverrideCreator()", file="ArraySliceFilter.cs", label="Assert.IsNotNull(contract.OverrideCreator)", span="462-462"];
m0_256 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.OverrideCreator()", file="ArraySliceFilter.cs", label="Assert.AreEqual(contract.OverrideConstructor, typeof(MultipleParametrizedConstructorsJsonConstructor).GetConstructor(new[] { typeof(string), typeof(int) }))", span="464-464"];
m0_257 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.OverrideCreator()", file="ArraySliceFilter.cs", label="Assert.AreEqual(2, contract.CreatorParameters.Count)", span="466-466"];
m0_258 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.OverrideCreator()", file="ArraySliceFilter.cs", label="Assert.AreEqual(''Value'', contract.CreatorParameters[0].PropertyName)", span="467-467"];
m0_259 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.OverrideCreator()", file="ArraySliceFilter.cs", label="Assert.AreEqual(''Age'', contract.CreatorParameters[1].PropertyName)", span="468-468"];
m0_260 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.OverrideCreator()", file="ArraySliceFilter.cs", label="contract.OverrideConstructor = null", span="471-471"];
m0_261 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.OverrideCreator()", file="ArraySliceFilter.cs", label="Assert.IsNull(contract.OverrideCreator)", span="473-473"];
m0_262 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.OverrideCreator()", file="ArraySliceFilter.cs", label="Exit Newtonsoft.Json.Tests.Serialization.ContractResolverTests.OverrideCreator()", span="456-456"];
m0_279 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeInterface()", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeInterface()", span="504-504"];
m0_280 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeInterface()", file="ArraySliceFilter.cs", label="Employee employee = new Employee\r\n            {\r\n                BirthDate = new DateTime(1977, 12, 30, 1, 1, 1, DateTimeKind.Utc),\r\n                FirstName = ''Maurice'',\r\n                LastName = ''Moss'',\r\n                Department = ''IT'',\r\n                JobTitle = ''Support''\r\n            }", span="506-513"];
m0_281 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeInterface()", file="ArraySliceFilter.cs", label="string iPersonJson = JsonConvert.SerializeObject(employee, Formatting.Indented,\r\n                new JsonSerializerSettings { ContractResolver = new IPersonContractResolver() })", span="515-516"];
m0_282 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeInterface()", file="ArraySliceFilter.cs", label="StringAssert.AreEqual(@''{\r\n  ''''FirstName'''': ''''Maurice'''',\r\n  ''''LastName'''': ''''Moss'''',\r\n  ''''BirthDate'''': ''''1977-12-30T01:01:01Z''''\r\n}'', iPersonJson)", span="518-522"];
m0_283 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeInterface()", file="ArraySliceFilter.cs", label="Exit Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeInterface()", span="504-504"];
m0_0 [cluster="Newtonsoft.Json.Tests.Serialization.DynamicContractResolver.DynamicContractResolver(char)", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Tests.Serialization.DynamicContractResolver.DynamicContractResolver(char)", span="55-55"];
m0_24 [cluster="Newtonsoft.Json.Tests.Serialization.IPersonContractResolver.CreateContract(System.Type)", color=green, community=0, file="ArraySliceFilter.cs", label="Exit Newtonsoft.Json.Tests.Serialization.IPersonContractResolver.CreateContract(System.Type)", prediction=1, span="97-97"];
m0_23 [cluster="Newtonsoft.Json.Tests.Serialization.IPersonContractResolver.CreateContract(System.Type)", file="ArraySliceFilter.cs", label="return base.CreateContract(objectType);", span="104-104"];
m0_1 [cluster="Newtonsoft.Json.Tests.Serialization.DynamicContractResolver.DynamicContractResolver(char)", file="ArraySliceFilter.cs", label="_startingWithChar = startingWithChar", span="60-60"];
m0_6 [cluster="Newtonsoft.Json.Tests.Serialization.DynamicContractResolver.CreateProperties(System.Type, Newtonsoft.Json.MemberSerialization)", file="ArraySliceFilter.cs", label="return properties;", span="71-71"];
m0_7 [cluster="Newtonsoft.Json.Tests.Serialization.DynamicContractResolver.CreateProperties(System.Type, Newtonsoft.Json.MemberSerialization)", file="ArraySliceFilter.cs", label="Exit Newtonsoft.Json.Tests.Serialization.DynamicContractResolver.CreateProperties(System.Type, Newtonsoft.Json.MemberSerialization)", span="63-63"];
m0_8 [cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperties(System.Type, Newtonsoft.Json.MemberSerialization)", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperties(System.Type, Newtonsoft.Json.MemberSerialization)", span="1297-1297"];
m0_11 [cluster="lambda expression", file="ArraySliceFilter.cs", label="Entry lambda expression", span="69-69"];
m0_18 [cluster="Newtonsoft.Json.Tests.Serialization.EscapedPropertiesContractResolver.ResolvePropertyName(string)", file="ArraySliceFilter.cs", label="Exit Newtonsoft.Json.Tests.Serialization.EscapedPropertiesContractResolver.ResolvePropertyName(string)", span="80-80"];
m0_20 [cluster="Newtonsoft.Json.Tests.Serialization.IPersonContractResolver.CreateContract(System.Type)", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Tests.Serialization.IPersonContractResolver.CreateContract(System.Type)", span="97-97"];
m0_3 [cluster="Newtonsoft.Json.Tests.Serialization.DynamicContractResolver.CreateProperties(System.Type, Newtonsoft.Json.MemberSerialization)", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Tests.Serialization.DynamicContractResolver.CreateProperties(System.Type, Newtonsoft.Json.MemberSerialization)", span="63-63"];
m0_2 [cluster="Newtonsoft.Json.Tests.Serialization.DynamicContractResolver.DynamicContractResolver(char)", file="ArraySliceFilter.cs", label="Exit Newtonsoft.Json.Tests.Serialization.DynamicContractResolver.DynamicContractResolver(char)", span="55-55"];
m0_26 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.JsonPropertyDefaultValue()", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.JsonPropertyDefaultValue()", span="120-120"];
m0_5 [cluster="Newtonsoft.Json.Tests.Serialization.DynamicContractResolver.CreateProperties(System.Type, Newtonsoft.Json.MemberSerialization)", file="ArraySliceFilter.cs", label="properties =\r\n                properties.Where(p => p.PropertyName.StartsWith(_startingWithChar.ToString())).ToList()", span="68-69"];
m0_22 [cluster="Newtonsoft.Json.Tests.Serialization.IPersonContractResolver.CreateContract(System.Type)", file="ArraySliceFilter.cs", label="objectType = typeof(IPerson)", span="101-101"];
m0_13 [cluster="lambda expression", file="ArraySliceFilter.cs", label="Exit lambda expression", span="69-69"];
m0_17 [cluster="Newtonsoft.Json.Tests.Serialization.EscapedPropertiesContractResolver.ResolvePropertyName(string)", file="ArraySliceFilter.cs", label="return base.ResolvePropertyName(PropertyPrefix + propertyName + PropertySuffix);", span="82-82"];
m0_4 [cluster="Newtonsoft.Json.Tests.Serialization.DynamicContractResolver.CreateProperties(System.Type, Newtonsoft.Json.MemberSerialization)", file="ArraySliceFilter.cs", label="IList<JsonProperty> properties = base.CreateProperties(type, memberSerialization)", span="65-65"];
m0_10 [cluster="Unk.ToList", file="ArraySliceFilter.cs", label="Entry Unk.ToList", span=""];
m0_12 [cluster="lambda expression", file="ArraySliceFilter.cs", label="p.PropertyName.StartsWith(_startingWithChar.ToString())", span="69-69"];
m0_16 [cluster="Newtonsoft.Json.Tests.Serialization.EscapedPropertiesContractResolver.ResolvePropertyName(string)", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Tests.Serialization.EscapedPropertiesContractResolver.ResolvePropertyName(string)", span="80-80"];
m0_19 [cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.ResolvePropertyName(string)", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Serialization.DefaultContractResolver.ResolvePropertyName(string)", span="1596-1596"];
m0_21 [cluster="Newtonsoft.Json.Tests.Serialization.IPersonContractResolver.CreateContract(System.Type)", file="ArraySliceFilter.cs", label="objectType == typeof(Employee)", span="99-99"];
m0_25 [cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.CreateContract(System.Type)", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Serialization.DefaultContractResolver.CreateContract(System.Type)", span="1118-1118"];
m0_27 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.JsonPropertyDefaultValue()", file="ArraySliceFilter.cs", label="JsonProperty p = new JsonProperty()", span="122-122"];
m0_311 [cluster="System.Console.WriteLine(string)", file="ArraySliceFilter.cs", label="Entry System.Console.WriteLine(string)", span="0-0"];
m0_30 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.JsonPropertyDefaultValue()", file="ArraySliceFilter.cs", label="p.PropertyType = typeof(int)", span="127-127"];
m0_79 [cluster="Unk.IsNull", file="ArraySliceFilter.cs", label="Entry Unk.IsNull", span=""];
m0_287 [cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting, Newtonsoft.Json.JsonSerializerSettings)", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting, Newtonsoft.Json.JsonSerializerSettings)", span="621-621"];
m0_47 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterface()", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterface()", span="149-149"];
m0_48 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterface()", file="ArraySliceFilter.cs", label="var resolver = new DefaultContractResolver()", span="151-151"];
m0_49 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterface()", file="ArraySliceFilter.cs", label="var contract = (JsonArrayContract)resolver.ResolveContract(typeof(IList<int>))", span="152-152"];
m0_50 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterface()", file="ArraySliceFilter.cs", label="Assert.IsTrue(contract.IsInstantiable)", span="154-154"];
m0_51 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterface()", file="ArraySliceFilter.cs", label="Assert.AreEqual(typeof(List<int>), contract.CreatedType)", span="155-155"];
m0_52 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterface()", file="ArraySliceFilter.cs", label="Assert.IsNotNull(contract.DefaultCreator)", span="156-156"];
m0_53 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterface()", file="ArraySliceFilter.cs", label="Exit Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterface()", span="149-149"];
m0_235 [cluster="Unk.Any", file="ArraySliceFilter.cs", label="Entry Unk.Any", span=""];
m0_56 [cluster="Unk.IsTrue", file="ArraySliceFilter.cs", label="Entry Unk.IsTrue", span=""];
m0_43 [cluster="Newtonsoft.Json.Serialization.JsonProperty.JsonProperty()", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Serialization.JsonProperty.JsonProperty()", span="38-38"];
m0_82 [cluster="Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string, Newtonsoft.Json.JsonSerializerSettings)", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string, Newtonsoft.Json.JsonSerializerSettings)", span="817-817"];
m0_177 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeWithHtmlEscapedPropertyName()", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeWithHtmlEscapedPropertyName()", span="328-328"];
m0_178 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeWithHtmlEscapedPropertyName()", file="ArraySliceFilter.cs", label="string json = JsonConvert.SerializeObject(\r\n                new AddressWithDataMember\r\n                {\r\n                    AddressLine1 = ''value!''\r\n                },\r\n                new JsonSerializerSettings\r\n                {\r\n                    ContractResolver = new EscapedPropertiesContractResolver\r\n                    {\r\n                        PropertyPrefix = ''<b>'',\r\n                        PropertySuffix = ''</b>''\r\n                    },\r\n                    StringEscapeHandling = StringEscapeHandling.EscapeHtml\r\n                })", span="330-343"];
m0_179 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeWithHtmlEscapedPropertyName()", file="ArraySliceFilter.cs", label="Assert.AreEqual(@''{''''\u003cb\u003eAddressLine1\u003c/b\u003e'''':''''value!''''}'', json)", span="345-345"];
m0_180 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeWithHtmlEscapedPropertyName()", file="ArraySliceFilter.cs", label="JsonTextReader reader = new JsonTextReader(new StringReader(json))", span="347-347"];
m0_181 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeWithHtmlEscapedPropertyName()", file="ArraySliceFilter.cs", label="reader.Read()", span="348-348"];
m0_182 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeWithHtmlEscapedPropertyName()", file="ArraySliceFilter.cs", label="reader.Read()", span="349-349"];
m0_183 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeWithHtmlEscapedPropertyName()", file="ArraySliceFilter.cs", label="Assert.AreEqual(@''<b>AddressLine1</b>'', reader.Value)", span="351-351"];
m0_184 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeWithHtmlEscapedPropertyName()", file="ArraySliceFilter.cs", label="Exit Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeWithHtmlEscapedPropertyName()", span="328-328"];
m0_31 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.JsonPropertyDefaultValue()", file="ArraySliceFilter.cs", label="Assert.AreEqual(0, p.GetResolvedDefaultValue())", span="129-129"];
m0_36 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.JsonPropertyDefaultValue()", file="ArraySliceFilter.cs", label="p.PropertyType = null", span="137-137"];
m0_37 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.JsonPropertyDefaultValue()", file="ArraySliceFilter.cs", label="Assert.AreEqual(null, p.GetResolvedDefaultValue())", span="139-139"];
m0_38 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.JsonPropertyDefaultValue()", file="ArraySliceFilter.cs", label="Assert.AreEqual(null, p.DefaultValue)", span="140-140"];
m0_39 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.JsonPropertyDefaultValue()", file="ArraySliceFilter.cs", label="p.PropertyType = typeof(CompareOptions)", span="142-142"];
m0_44 [cluster="Newtonsoft.Json.Serialization.JsonProperty.GetResolvedDefaultValue()", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Serialization.JsonProperty.GetResolvedDefaultValue()", span="172-172"];
m0_28 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.JsonPropertyDefaultValue()", file="ArraySliceFilter.cs", label="Assert.AreEqual(null, p.GetResolvedDefaultValue())", span="124-124"];
m0_29 [cluster="System.Math.Max(int, int)", file="ArraySliceFilter.cs", label="Entry System.Math.Max(int, int)", span="0-0"];
m0_32 [cluster="int.ToString(System.IFormatProvider)", file="ArraySliceFilter.cs", label="Entry int.ToString(System.IFormatProvider)", span="0-0"];
m0_33 [cluster="string.FormatWith(System.IFormatProvider, object, object)", file="ArraySliceFilter.cs", label="Entry string.FormatWith(System.IFormatProvider, object, object)", span="52-52"];
m0_34 [cluster="object.GetType()", file="ArraySliceFilter.cs", label="Entry object.GetType()", span="0-0"];
m0_35 [cluster="string.FormatWith(System.IFormatProvider, object)", file="ArraySliceFilter.cs", label="Entry string.FormatWith(System.IFormatProvider, object)", span="47-47"];
m0_40 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.JsonPropertyDefaultValue()", file="ArraySliceFilter.cs", label="Newtonsoft.Json.Linq.JsonPath.ArraySliceFilter", span=""];
m0_41 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.JsonPropertyDefaultValue()", file="ArraySliceFilter.cs", label="Assert.AreEqual(null, p.DefaultValue)", span="145-145"];
m0_42 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.JsonPropertyDefaultValue()", file="ArraySliceFilter.cs", label="Exit Newtonsoft.Json.Tests.Serialization.ContractResolverTests.JsonPropertyDefaultValue()", span="120-120"];
m0_45 [cluster="Unk.AreEqual", file="ArraySliceFilter.cs", label="Entry Unk.AreEqual", span=""];
m0_328 [cluster="System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", file="ArraySliceFilter.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Any<TSource>()", span="0-0"];
m0_46 [cluster="System.DateTime.DateTime()", file="ArraySliceFilter.cs", label="Entry System.DateTime.DateTime()", span="0-0"];
m0_230 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ResolveProperties_IgnoreStatic()", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ResolveProperties_IgnoreStatic()", span="427-427"];
m0_231 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ResolveProperties_IgnoreStatic()", file="ArraySliceFilter.cs", label="var resolver = new DefaultContractResolver()", span="429-429"];
m0_232 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ResolveProperties_IgnoreStatic()", file="ArraySliceFilter.cs", label="var contract = (JsonObjectContract)resolver.ResolveContract(typeof(NumberFormatInfo))", span="430-430"];
m0_233 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ResolveProperties_IgnoreStatic()", file="ArraySliceFilter.cs", label="Assert.IsFalse(contract.Properties.Any(c => c.PropertyName == ''InvariantInfo''))", span="432-432"];
m0_234 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ResolveProperties_IgnoreStatic()", file="ArraySliceFilter.cs", label="Exit Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ResolveProperties_IgnoreStatic()", span="427-427"];
m0_142 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CustomDictionary<TKey, TValue>.CustomDictionary()", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CustomDictionary<TKey, TValue>.CustomDictionary()", span="249-249"];
m0_127 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DictionaryInterfaceDefaultCreator()", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DictionaryInterfaceDefaultCreator()", span="254-254"];
m0_128 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DictionaryInterfaceDefaultCreator()", file="ArraySliceFilter.cs", label="var resolver = new DefaultContractResolver()", span="256-256"];
m0_129 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DictionaryInterfaceDefaultCreator()", file="ArraySliceFilter.cs", label="var contract = (JsonDictionaryContract)resolver.ResolveContract(typeof(IDictionary<string, int>))", span="257-257"];
m0_133 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DictionaryInterfaceDefaultCreator()", file="ArraySliceFilter.cs", label="var d = JsonConvert.DeserializeObject<IDictionary<string, int>>(@''{key1:1,key2:2}'', new JsonSerializerSettings\r\n            {\r\n                ContractResolver = resolver\r\n            })", span="264-267"];
m0_130 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DictionaryInterfaceDefaultCreator()", file="ArraySliceFilter.cs", label="Assert.IsTrue(contract.IsInstantiable)", span="259-259"];
m0_131 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DictionaryInterfaceDefaultCreator()", file="ArraySliceFilter.cs", label="Assert.IsNotNull(contract.DefaultCreator)", span="260-260"];
m0_132 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DictionaryInterfaceDefaultCreator()", file="ArraySliceFilter.cs", label="contract.DefaultCreator = () => new CustomDictionary<string, int>()", span="262-262"];
m0_134 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DictionaryInterfaceDefaultCreator()", file="ArraySliceFilter.cs", label="Assert.AreEqual(typeof(CustomDictionary<string, int>), d.GetType())", span="269-269"];
m0_135 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DictionaryInterfaceDefaultCreator()", file="ArraySliceFilter.cs", label="Assert.AreEqual(2, d.Count)", span="270-270"];
m0_136 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DictionaryInterfaceDefaultCreator()", file="ArraySliceFilter.cs", label="Assert.AreEqual(1, d[''key1''])", span="271-271"];
m0_137 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DictionaryInterfaceDefaultCreator()", file="ArraySliceFilter.cs", label="Assert.AreEqual(2, d[''key2''])", span="272-272"];
m0_138 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DictionaryInterfaceDefaultCreator()", file="ArraySliceFilter.cs", label="Exit Newtonsoft.Json.Tests.Serialization.ContractResolverTests.DictionaryInterfaceDefaultCreator()", span="254-254"];
m0_174 [cluster="Newtonsoft.Json.JsonTextReader.JsonTextReader(System.IO.TextReader)", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.JsonTextReader.JsonTextReader(System.IO.TextReader)", span="78-78"];
m0_326 [cluster="Newtonsoft.Json.Serialization.ExtensionDataGetter.Invoke(object)", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Serialization.ExtensionDataGetter.Invoke(object)", span="75-75"];
m0_185 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", span="355-355"];
m0_186 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs", label="JsonProperty p = new JsonProperty { PropertyName = ''abc'' }", span="357-357"];
m0_187 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs", label="Assert.IsTrue(p._skipPropertyNameEscape)", span="358-358"];
m0_188 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs", label="p = new JsonProperty { PropertyName = ''123'' }", span="360-360"];
m0_189 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs", label="Assert.IsTrue(p._skipPropertyNameEscape)", span="361-361"];
m0_190 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs", label="p = new JsonProperty { PropertyName = ''._-'' }", span="363-363"];
m0_191 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs", label="Assert.IsTrue(p._skipPropertyNameEscape)", span="364-364"];
m0_192 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs", label="p = new JsonProperty { PropertyName = ''!@#'' }", span="366-366"];
m0_193 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs", label="Assert.IsTrue(p._skipPropertyNameEscape)", span="367-367"];
m0_194 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs", label="p = new JsonProperty { PropertyName = ''$%^'' }", span="369-369"];
m0_195 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs", label="Assert.IsTrue(p._skipPropertyNameEscape)", span="370-370"];
m0_196 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs", label="p = new JsonProperty { PropertyName = ''?*('' }", span="372-372"];
m0_197 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs", label="Assert.IsTrue(p._skipPropertyNameEscape)", span="373-373"];
m0_198 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs", label="p = new JsonProperty { PropertyName = '')_+'' }", span="375-375"];
m0_199 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs", label="Assert.IsTrue(p._skipPropertyNameEscape)", span="376-376"];
m0_200 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs", label="p = new JsonProperty { PropertyName = ''=:,'' }", span="378-378"];
m0_201 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs", label="Assert.IsTrue(p._skipPropertyNameEscape)", span="379-379"];
m0_202 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs", label="p = new JsonProperty { PropertyName = null }", span="381-381"];
m0_203 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs", label="Assert.IsTrue(p._skipPropertyNameEscape)", span="382-382"];
m0_204 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs", label="p = new JsonProperty { PropertyName = ''&'' }", span="384-384"];
m0_205 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs", label="Assert.IsFalse(p._skipPropertyNameEscape)", span="385-385"];
m0_206 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs", label="p = new JsonProperty { PropertyName = ''<'' }", span="387-387"];
m0_207 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs", label="Assert.IsFalse(p._skipPropertyNameEscape)", span="388-388"];
m0_208 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs", label="p = new JsonProperty { PropertyName = ''>'' }", span="390-390"];
m0_209 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs", label="Assert.IsFalse(p._skipPropertyNameEscape)", span="391-391"];
m0_210 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs", label="p = new JsonProperty { PropertyName = ''''' }", span="393-393"];
m0_211 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs", label="Assert.IsFalse(p._skipPropertyNameEscape)", span="394-394"];
m0_212 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs", label="p = new JsonProperty { PropertyName = @'''''''' }", span="396-396"];
m0_213 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs", label="Assert.IsFalse(p._skipPropertyNameEscape)", span="397-397"];
m0_214 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs", label="p = new JsonProperty { PropertyName = Environment.NewLine }", span="399-399"];
m0_215 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs", label="Assert.IsFalse(p._skipPropertyNameEscape)", span="400-400"];
m0_216 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs", label="p = new JsonProperty { PropertyName = ''\0'' }", span="402-402"];
m0_217 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs", label="Assert.IsFalse(p._skipPropertyNameEscape)", span="403-403"];
m0_218 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs", label="p = new JsonProperty { PropertyName = ''\n'' }", span="405-405"];
m0_219 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs", label="Assert.IsFalse(p._skipPropertyNameEscape)", span="406-406"];
m0_220 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs", label="p = new JsonProperty { PropertyName = ''\v'' }", span="408-408"];
m0_221 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs", label="Assert.IsFalse(p._skipPropertyNameEscape)", span="409-409"];
m0_222 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs", label="p = new JsonProperty { PropertyName = ''\u00B9'' }", span="411-411"];
m0_223 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs", label="Assert.IsFalse(p._skipPropertyNameEscape)", span="412-412"];
m0_224 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", file="ArraySliceFilter.cs", label="Exit Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CalculatingPropertyNameEscapedSkipping()", span="355-355"];
m0_332 [cluster="lambda expression", file="ArraySliceFilter.cs", label="Entry lambda expression", span="635-635"];
m0_84 [cluster="lambda expression", file="ArraySliceFilter.cs", label="JsonConvert.DeserializeObject<AbstractTestClass>(@''{Value:'Value!'}'', new JsonSerializerSettings\r\n            {\r\n                ContractResolver = resolver\r\n            })", span="180-183"];
m0_83 [cluster="lambda expression", file="ArraySliceFilter.cs", label="Entry lambda expression", span="180-183"];
m0_85 [cluster="lambda expression", file="ArraySliceFilter.cs", label="Exit lambda expression", span="180-183"];
m0_86 [cluster="lambda expression", file="ArraySliceFilter.cs", label="Entry lambda expression", span="185-185"];
m0_87 [cluster="lambda expression", file="ArraySliceFilter.cs", label="new AbstractImplementationTestClass()", span="185-185"];
m0_88 [cluster="lambda expression", file="ArraySliceFilter.cs", label="Exit lambda expression", span="185-185"];
m0_104 [cluster="lambda expression", file="ArraySliceFilter.cs", label="JsonConvert.DeserializeObject<AbstractListTestClass<int>>(@''[1,2]'', new JsonSerializerSettings\r\n            {\r\n                ContractResolver = resolver\r\n            })", span="205-208"];
m0_103 [cluster="lambda expression", file="ArraySliceFilter.cs", label="Entry lambda expression", span="205-208"];
m0_105 [cluster="lambda expression", file="ArraySliceFilter.cs", label="Exit lambda expression", span="205-208"];
m0_106 [cluster="lambda expression", file="ArraySliceFilter.cs", label="Entry lambda expression", span="210-210"];
m0_107 [cluster="lambda expression", file="ArraySliceFilter.cs", label="new AbstractImplementationListTestClass<int>()", span="210-210"];
m0_108 [cluster="lambda expression", file="ArraySliceFilter.cs", label="Exit lambda expression", span="210-210"];
m0_123 [cluster="lambda expression", file="ArraySliceFilter.cs", label="Entry lambda expression", span="235-235"];
m0_124 [cluster="lambda expression", file="ArraySliceFilter.cs", label="new CustomList<int>()", span="235-235"];
m0_125 [cluster="lambda expression", file="ArraySliceFilter.cs", label="Exit lambda expression", span="235-235"];
m0_139 [cluster="lambda expression", file="ArraySliceFilter.cs", label="Entry lambda expression", span="262-262"];
m0_140 [cluster="lambda expression", file="ArraySliceFilter.cs", label="new CustomDictionary<string, int>()", span="262-262"];
m0_141 [cluster="lambda expression", file="ArraySliceFilter.cs", label="Exit lambda expression", span="262-262"];
m0_157 [cluster="lambda expression", file="ArraySliceFilter.cs", label="JsonConvert.DeserializeObject<AbstractDictionaryTestClass<string, int>>(@''{key1:1,key2:2}'', new JsonSerializerSettings\r\n            {\r\n                ContractResolver = resolver\r\n            })", span="285-288"];
m0_156 [cluster="lambda expression", file="ArraySliceFilter.cs", label="Entry lambda expression", span="285-288"];
m0_158 [cluster="lambda expression", file="ArraySliceFilter.cs", label="Exit lambda expression", span="285-288"];
m0_159 [cluster="lambda expression", file="ArraySliceFilter.cs", label="Entry lambda expression", span="290-290"];
m0_160 [cluster="lambda expression", file="ArraySliceFilter.cs", label="new AbstractImplementationDictionaryTestClass<string, int>()", span="290-290"];
m0_161 [cluster="lambda expression", file="ArraySliceFilter.cs", label="Exit lambda expression", span="290-290"];
m0_236 [cluster="lambda expression", file="ArraySliceFilter.cs", label="Entry lambda expression", span="432-432"];
m0_237 [cluster="lambda expression", file="ArraySliceFilter.cs", label="c.PropertyName == ''InvariantInfo''", span="432-432"];
m0_238 [cluster="lambda expression", file="ArraySliceFilter.cs", label="Exit lambda expression", span="432-432"];
m0_276 [cluster="lambda expression", file="ArraySliceFilter.cs", label="return new MultipleParametrizedConstructorsJsonConstructor((string)args[0], (int)args[1]);", span="487-487"];
m0_274 [cluster="lambda expression", file="ArraySliceFilter.cs", label="Entry lambda expression", span="484-488"];
m0_275 [cluster="lambda expression", file="ArraySliceFilter.cs", label="ensureCustomCreatorCalled = true", span="486-486"];
m0_277 [cluster="lambda expression", file="ArraySliceFilter.cs", label="Exit lambda expression", span="484-488"];
m0_329 [cluster="lambda expression", file="ArraySliceFilter.cs", label="Entry lambda expression", span="635-635"];
m0_330 [cluster="lambda expression", file="ArraySliceFilter.cs", label="kv.Key", span="635-635"];
m0_331 [cluster="lambda expression", file="ArraySliceFilter.cs", label="Exit lambda expression", span="635-635"];
m0_333 [cluster="lambda expression", file="ArraySliceFilter.cs", label="kv.Value", span="635-635"];
m0_334 [cluster="lambda expression", file="ArraySliceFilter.cs", label="Exit lambda expression", span="635-635"];
m0_110 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterfaceDefaultCreator()", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterfaceDefaultCreator()", span="227-227"];
m0_111 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterfaceDefaultCreator()", file="ArraySliceFilter.cs", label="var resolver = new DefaultContractResolver()", span="229-229"];
m0_112 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterfaceDefaultCreator()", file="ArraySliceFilter.cs", label="var contract = (JsonArrayContract)resolver.ResolveContract(typeof(IList<int>))", span="230-230"];
m0_116 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterfaceDefaultCreator()", file="ArraySliceFilter.cs", label="var l = JsonConvert.DeserializeObject<IList<int>>(@''[1,2,3]'', new JsonSerializerSettings\r\n            {\r\n                ContractResolver = resolver\r\n            })", span="237-240"];
m0_113 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterfaceDefaultCreator()", file="ArraySliceFilter.cs", label="Assert.IsTrue(contract.IsInstantiable)", span="232-232"];
m0_114 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterfaceDefaultCreator()", file="ArraySliceFilter.cs", label="Assert.IsNotNull(contract.DefaultCreator)", span="233-233"];
m0_115 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterfaceDefaultCreator()", file="ArraySliceFilter.cs", label="contract.DefaultCreator = () => new CustomList<int>()", span="235-235"];
m0_117 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterfaceDefaultCreator()", file="ArraySliceFilter.cs", label="Assert.AreEqual(typeof(CustomList<int>), l.GetType())", span="242-242"];
m0_118 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterfaceDefaultCreator()", file="ArraySliceFilter.cs", label="Assert.AreEqual(3, l.Count)", span="243-243"];
m0_119 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterfaceDefaultCreator()", file="ArraySliceFilter.cs", label="Assert.AreEqual(1, l[0])", span="244-244"];
m0_120 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterfaceDefaultCreator()", file="ArraySliceFilter.cs", label="Assert.AreEqual(2, l[1])", span="245-245"];
m0_121 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterfaceDefaultCreator()", file="ArraySliceFilter.cs", label="Assert.AreEqual(3, l[2])", span="246-246"];
m0_122 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterfaceDefaultCreator()", file="ArraySliceFilter.cs", label="Exit Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ListInterfaceDefaultCreator()", span="227-227"];
m0_67 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractTestClass()", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractTestClass()", span="171-171"];
m0_68 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractTestClass()", file="ArraySliceFilter.cs", label="var resolver = new DefaultContractResolver()", span="173-173"];
m0_69 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractTestClass()", file="ArraySliceFilter.cs", label="var contract = (JsonObjectContract)resolver.ResolveContract(typeof(AbstractTestClass))", span="174-174"];
m0_73 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractTestClass()", file="ArraySliceFilter.cs", label="ExceptionAssert.Throws<JsonSerializationException>(() => JsonConvert.DeserializeObject<AbstractTestClass>(@''{Value:'Value!'}'', new JsonSerializerSettings\r\n            {\r\n                ContractResolver = resolver\r\n            }), ''Could not create an instance of type Newtonsoft.Json.Tests.Serialization.AbstractTestClass. Type is an interface or abstract class and cannot be instantiated. Path 'Value', line 1, position 7.'')", span="180-183"];
m0_75 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractTestClass()", file="ArraySliceFilter.cs", label="var o = JsonConvert.DeserializeObject<AbstractTestClass>(@''{Value:'Value!'}'', new JsonSerializerSettings\r\n            {\r\n                ContractResolver = resolver\r\n            })", span="187-190"];
m0_70 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractTestClass()", file="ArraySliceFilter.cs", label="Assert.IsFalse(contract.IsInstantiable)", span="176-176"];
m0_71 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractTestClass()", file="ArraySliceFilter.cs", label="Assert.IsNull(contract.DefaultCreator)", span="177-177"];
m0_72 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractTestClass()", file="ArraySliceFilter.cs", label="Assert.IsNull(contract.OverrideCreator)", span="178-178"];
m0_74 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractTestClass()", file="ArraySliceFilter.cs", label="contract.DefaultCreator = () => new AbstractImplementationTestClass()", span="185-185"];
m0_76 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractTestClass()", file="ArraySliceFilter.cs", label="Assert.AreEqual(''Value!'', o.Value)", span="192-192"];
m0_77 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractTestClass()", file="ArraySliceFilter.cs", label="Exit Newtonsoft.Json.Tests.Serialization.ContractResolverTests.AbstractTestClass()", span="171-171"];
m0_176 [cluster="Newtonsoft.Json.JsonTextReader.Read()", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.JsonTextReader.Read()", span="366-366"];
m0_250 [cluster="System.Type.GetConstructor(System.Type[])", file="ArraySliceFilter.cs", label="Entry System.Type.GetConstructor(System.Type[])", span="0-0"];
m0_325 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="ArraySliceFilter.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m0_54 [cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.DefaultContractResolver()", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Serialization.DefaultContractResolver.DefaultContractResolver()", span="195-195"];
m0_80 [cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", span="350-350"];
m0_289 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SingleTypeWithMultipleContractResolvers()", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SingleTypeWithMultipleContractResolvers()", span="526-526"];
m0_290 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SingleTypeWithMultipleContractResolvers()", file="ArraySliceFilter.cs", label="Book book = new Book\r\n            {\r\n                BookName = ''The Gathering Storm'',\r\n                BookPrice = 16.19m,\r\n                AuthorName = ''Brandon Sanderson'',\r\n                AuthorAge = 34,\r\n                AuthorCountry = ''United States of America''\r\n            }", span="528-535"];
m0_291 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SingleTypeWithMultipleContractResolvers()", file="ArraySliceFilter.cs", label="string startingWithA = JsonConvert.SerializeObject(book, Formatting.Indented,\r\n                new JsonSerializerSettings { ContractResolver = new DynamicContractResolver('A') })", span="537-538"];
m0_292 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SingleTypeWithMultipleContractResolvers()", file="ArraySliceFilter.cs", label="string startingWithB = JsonConvert.SerializeObject(book, Formatting.Indented,\r\n                new JsonSerializerSettings { ContractResolver = new DynamicContractResolver('B') })", span="546-547"];
m0_293 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SingleTypeWithMultipleContractResolvers()", file="ArraySliceFilter.cs", label="StringAssert.AreEqual(@''{\r\n  ''''AuthorName'''': ''''Brandon Sanderson'''',\r\n  ''''AuthorAge'''': 34,\r\n  ''''AuthorCountry'''': ''''United States of America''''\r\n}'', startingWithA)", span="554-558"];
m0_294 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SingleTypeWithMultipleContractResolvers()", file="ArraySliceFilter.cs", label="StringAssert.AreEqual(@''{\r\n  ''''BookName'''': ''''The Gathering Storm'''',\r\n  ''''BookPrice'''': 16.19\r\n}'', startingWithB)", span="560-563"];
m0_295 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SingleTypeWithMultipleContractResolvers()", file="ArraySliceFilter.cs", label="Exit Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SingleTypeWithMultipleContractResolvers()", span="526-526"];
m0_172 [cluster="Newtonsoft.Json.Tests.Serialization.EscapedPropertiesContractResolver.EscapedPropertiesContractResolver()", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Tests.Serialization.EscapedPropertiesContractResolver.EscapedPropertiesContractResolver()", span="75-75"];
m0_173 [cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.JsonSerializerSettings)", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.JsonSerializerSettings)", span="585-585"];
m0_309 [cluster="Newtonsoft.Json.Tests.TestObjects.StructTest.StructTest()", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Tests.TestObjects.StructTest.StructTest()", span="27-27"];
m0_162 [cluster="Newtonsoft.Json.Tests.Serialization.AbstractImplementationDictionaryTestClass<TKey, TValue>.AbstractImplementationDictionaryTestClass()", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Tests.Serialization.AbstractImplementationDictionaryTestClass<TKey, TValue>.AbstractImplementationDictionaryTestClass()", span="9826-9826"];
m0_278 [cluster="Newtonsoft.Json.Tests.Serialization.MultipleParametrizedConstructorsJsonConstructor.MultipleParametrizedConstructorsJsonConstructor(string, int)", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Tests.Serialization.MultipleParametrizedConstructorsJsonConstructor.MultipleParametrizedConstructorsJsonConstructor(string, int)", span="9861-9861"];
m0_66 [cluster="object.GetType()", file="ArraySliceFilter.cs", label="Entry object.GetType()", span="0-0"];
m0_297 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeCompilerGeneratedMembers()", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeCompilerGeneratedMembers()", span="569-569"];
m0_298 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeCompilerGeneratedMembers()", file="ArraySliceFilter.cs", label="StructTest structTest = new StructTest\r\n            {\r\n                IntField = 1,\r\n                IntProperty = 2,\r\n                StringField = ''Field'',\r\n                StringProperty = ''Property''\r\n            }", span="571-577"];
m0_299 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeCompilerGeneratedMembers()", file="ArraySliceFilter.cs", label="DefaultContractResolver skipCompilerGeneratedResolver = new DefaultContractResolver\r\n            {\r\n                DefaultMembersSearchFlags = BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public\r\n            }", span="579-582"];
m0_300 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeCompilerGeneratedMembers()", file="ArraySliceFilter.cs", label="string skipCompilerGeneratedJson = JsonConvert.SerializeObject(structTest, Formatting.Indented,\r\n                new JsonSerializerSettings { ContractResolver = skipCompilerGeneratedResolver })", span="584-585"];
m0_303 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeCompilerGeneratedMembers()", file="ArraySliceFilter.cs", label="string includeCompilerGeneratedJson = JsonConvert.SerializeObject(structTest, Formatting.Indented,\r\n                new JsonSerializerSettings { ContractResolver = includeCompilerGeneratedResolver })", span="600-601"];
m0_301 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeCompilerGeneratedMembers()", file="ArraySliceFilter.cs", label="StringAssert.AreEqual(@''{\r\n  ''''StringField'''': ''''Field'''',\r\n  ''''IntField'''': 1,\r\n  ''''StringProperty'''': ''''Property'''',\r\n  ''''IntProperty'''': 2\r\n}'', skipCompilerGeneratedJson)", span="587-592"];
m0_302 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeCompilerGeneratedMembers()", file="ArraySliceFilter.cs", label="DefaultContractResolver includeCompilerGeneratedResolver = new DefaultContractResolver\r\n            {\r\n                DefaultMembersSearchFlags = BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public,\r\n                SerializeCompilerGeneratedMembers = true\r\n            }", span="594-598"];
m0_304 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeCompilerGeneratedMembers()", file="ArraySliceFilter.cs", label="JObject o = JObject.Parse(includeCompilerGeneratedJson)", span="603-603"];
m0_305 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeCompilerGeneratedMembers()", file="ArraySliceFilter.cs", label="Console.WriteLine(includeCompilerGeneratedJson)", span="605-605"];
m0_306 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeCompilerGeneratedMembers()", file="ArraySliceFilter.cs", label="Assert.AreEqual(''Property'', (string)o[''<StringProperty>k__BackingField''])", span="607-607"];
m0_307 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeCompilerGeneratedMembers()", file="ArraySliceFilter.cs", label="Assert.AreEqual(2, (int)o[''<IntProperty>k__BackingField''])", span="608-608"];
m0_308 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeCompilerGeneratedMembers()", file="ArraySliceFilter.cs", label="Exit Newtonsoft.Json.Tests.Serialization.ContractResolverTests.SerializeCompilerGeneratedMembers()", span="569-569"];
m0_89 [cluster="Newtonsoft.Json.Tests.Serialization.AbstractImplementationTestClass.AbstractImplementationTestClass()", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Tests.Serialization.AbstractImplementationTestClass.AbstractImplementationTestClass()", span="9810-9810"];
m0_285 [cluster="System.DateTime.DateTime(int, int, int, int, int, int, System.DateTimeKind)", file="ArraySliceFilter.cs", label="Entry System.DateTime.DateTime(int, int, int, int, int, int, System.DateTimeKind)", span="0-0"];
m0_239 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ParameterizedCreator()", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ParameterizedCreator()", span="436-436"];
m0_240 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ParameterizedCreator()", file="ArraySliceFilter.cs", label="var resolver = new DefaultContractResolver()", span="438-438"];
m0_241 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ParameterizedCreator()", file="ArraySliceFilter.cs", label="var contract = (JsonObjectContract)resolver.ResolveContract(typeof(PublicParameterizedConstructorWithPropertyNameConflictWithAttribute))", span="439-439"];
m0_242 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ParameterizedCreator()", file="ArraySliceFilter.cs", label="Assert.IsNull(contract.DefaultCreator)", span="441-441"];
m0_243 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ParameterizedCreator()", file="ArraySliceFilter.cs", label="Assert.IsNotNull(contract.ParameterizedCreator)", span="442-442"];
m0_244 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ParameterizedCreator()", file="ArraySliceFilter.cs", label="Assert.AreEqual(contract.ParametrizedConstructor, typeof(PublicParameterizedConstructorWithPropertyNameConflictWithAttribute).GetConstructor(new[] { typeof(string) }))", span="444-444"];
m0_245 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ParameterizedCreator()", file="ArraySliceFilter.cs", label="Assert.AreEqual(1, contract.CreatorParameters.Count)", span="446-446"];
m0_246 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ParameterizedCreator()", file="ArraySliceFilter.cs", label="Assert.AreEqual(''name'', contract.CreatorParameters[0].PropertyName)", span="447-447"];
m0_247 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ParameterizedCreator()", file="ArraySliceFilter.cs", label="contract.ParametrizedConstructor = null", span="450-450"];
m0_248 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ParameterizedCreator()", file="ArraySliceFilter.cs", label="Assert.IsNull(contract.ParameterizedCreator)", span="452-452"];
m0_249 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ParameterizedCreator()", file="ArraySliceFilter.cs", label="Exit Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ParameterizedCreator()", span="436-436"];
m0_55 [cluster="Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContract(System.Type)", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContract(System.Type)", span="239-239"];
m0_284 [cluster="Newtonsoft.Json.Tests.TestObjects.Employee.Employee()", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Tests.TestObjects.Employee.Employee()", span="63-63"];
m0_263 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CustomOverrideCreator()", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CustomOverrideCreator()", span="477-477"];
m0_264 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CustomOverrideCreator()", file="ArraySliceFilter.cs", label="var resolver = new DefaultContractResolver()", span="479-479"];
m0_265 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CustomOverrideCreator()", file="ArraySliceFilter.cs", label="var contract = (JsonObjectContract)resolver.ResolveContract(typeof(MultipleParametrizedConstructorsJsonConstructor))", span="480-480"];
m0_269 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CustomOverrideCreator()", file="ArraySliceFilter.cs", label="var o = JsonConvert.DeserializeObject<MultipleParametrizedConstructorsJsonConstructor>(''{Value:'value!', Age:1}'', new JsonSerializerSettings\r\n            {\r\n                ContractResolver = resolver\r\n            })", span="493-496"];
m0_266 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CustomOverrideCreator()", file="ArraySliceFilter.cs", label="bool ensureCustomCreatorCalled = false", span="482-482"];
m0_267 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CustomOverrideCreator()", file="ArraySliceFilter.cs", label="contract.OverrideCreator = args =>\r\n            {\r\n                ensureCustomCreatorCalled = true;\r\n                return new MultipleParametrizedConstructorsJsonConstructor((string)args[0], (int)args[1]);\r\n            }", span="484-488"];
m0_268 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CustomOverrideCreator()", file="ArraySliceFilter.cs", label="Assert.IsNull(contract.OverrideConstructor)", span="490-490"];
m0_270 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CustomOverrideCreator()", file="ArraySliceFilter.cs", label="Assert.AreEqual(''value!'', o.Value)", span="498-498"];
m0_271 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CustomOverrideCreator()", file="ArraySliceFilter.cs", label="Assert.AreEqual(1, o.Age)", span="499-499"];
m0_272 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CustomOverrideCreator()", file="ArraySliceFilter.cs", label="Assert.IsTrue(ensureCustomCreatorCalled)", span="500-500"];
m0_273 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CustomOverrideCreator()", file="ArraySliceFilter.cs", label="Exit Newtonsoft.Json.Tests.Serialization.ContractResolverTests.CustomOverrideCreator()", span="477-477"];
m0_288 [cluster="Newtonsoft.Json.Tests.StringAssert.AreEqual(string, string)", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Tests.StringAssert.AreEqual(string, string)", span="321-321"];
m0_109 [cluster="Newtonsoft.Json.Tests.Serialization.AbstractImplementationListTestClass<T>.AbstractImplementationListTestClass()", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Tests.Serialization.AbstractImplementationListTestClass<T>.AbstractImplementationListTestClass()", span="9818-9818"];
m0_312 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ExtensionDataGetterCanBeIteratedMultipleTimes()", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ExtensionDataGetterCanBeIteratedMultipleTimes()", span="620-620"];
m0_313 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ExtensionDataGetterCanBeIteratedMultipleTimes()", file="ArraySliceFilter.cs", label="DefaultContractResolver resolver = new DefaultContractResolver()", span="622-622"];
m0_314 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ExtensionDataGetterCanBeIteratedMultipleTimes()", file="ArraySliceFilter.cs", label="JsonObjectContract contract = (JsonObjectContract)resolver.ResolveContract(typeof(ClassWithExtensionData))", span="623-623"];
m0_315 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ExtensionDataGetterCanBeIteratedMultipleTimes()", file="ArraySliceFilter.cs", label="ClassWithExtensionData myClass = new ClassWithExtensionData\r\n            {\r\n                Data = new Dictionary<string, object>\r\n                {\r\n                    { ''SomeField'', ''Field'' },\r\n                }\r\n            }", span="625-631"];
m0_316 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ExtensionDataGetterCanBeIteratedMultipleTimes()", file="ArraySliceFilter.cs", label="ExtensionDataGetter getter = contract.ExtensionDataGetter", span="633-633"];
m0_317 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ExtensionDataGetterCanBeIteratedMultipleTimes()", file="ArraySliceFilter.cs", label="IEnumerable<KeyValuePair<object, object>> dictionaryData = getter(myClass).ToDictionary(kv => kv.Key, kv => kv.Value)", span="635-635"];
m0_320 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ExtensionDataGetterCanBeIteratedMultipleTimes()", file="ArraySliceFilter.cs", label="IEnumerable<KeyValuePair<object, object>> extensionData = getter(myClass)", span="639-639"];
m0_318 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ExtensionDataGetterCanBeIteratedMultipleTimes()", file="ArraySliceFilter.cs", label="Assert.IsTrue(dictionaryData.Any())", span="636-636"];
m0_319 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ExtensionDataGetterCanBeIteratedMultipleTimes()", file="ArraySliceFilter.cs", label="Assert.IsTrue(dictionaryData.Any())", span="637-637"];
m0_321 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ExtensionDataGetterCanBeIteratedMultipleTimes()", file="ArraySliceFilter.cs", label="Assert.IsTrue(extensionData.Any())", span="640-640"];
m0_322 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ExtensionDataGetterCanBeIteratedMultipleTimes()", file="ArraySliceFilter.cs", label="Assert.IsTrue(extensionData.Any())", span="641-641"];
m0_323 [cluster="Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ExtensionDataGetterCanBeIteratedMultipleTimes()", file="ArraySliceFilter.cs", label="Exit Newtonsoft.Json.Tests.Serialization.ContractResolverTests.ExtensionDataGetterCanBeIteratedMultipleTimes()", span="620-620"];
m0_327 [cluster="Unk.ToDictionary", file="ArraySliceFilter.cs", label="Entry Unk.ToDictionary", span=""];
m0_296 [cluster="Newtonsoft.Json.Tests.Serialization.Book.Book()", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.Tests.Serialization.Book.Book()", span="86-86"];
m0_57 [cluster="Unk.IsNotNull", file="ArraySliceFilter.cs", label="Entry Unk.IsNotNull", span=""];
m0_81 [cluster="Newtonsoft.Json.JsonSerializerSettings.JsonSerializerSettings()", file="ArraySliceFilter.cs", label="Entry Newtonsoft.Json.JsonSerializerSettings.JsonSerializerSettings()", span="433-433"];
m0_335 [file="ArraySliceFilter.cs", label="Newtonsoft.Json.Tests.Serialization.DynamicContractResolver", span=""];
m0_336 [file="ArraySliceFilter.cs", label="Newtonsoft.Json.Tests.Serialization.EscapedPropertiesContractResolver", span=""];
m0_337 [file="ArraySliceFilter.cs", label="Newtonsoft.Json.Tests.Serialization.IPersonContractResolver", span=""];
m0_338 [file="ArraySliceFilter.cs", label=resolver, span=""];
m0_339 [file="ArraySliceFilter.cs", label=resolver, span=""];
m0_340 [file="ArraySliceFilter.cs", label=resolver, span=""];
m1_273 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddArrayToSelf()", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.AddArrayToSelf()", span="450-450"];
m1_274 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddArrayToSelf()", file="BinaryConverter.cs", label="JArray a = new JArray(1, 2)", span="452-452"];
m1_275 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddArrayToSelf()", file="BinaryConverter.cs", label="a.Add(a)", span="453-453"];
m1_276 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddArrayToSelf()", file="BinaryConverter.cs", label="Assert.AreEqual(3, a.Count)", span="455-455"];
m1_277 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddArrayToSelf()", file="BinaryConverter.cs", label="Assert.AreEqual(1, (int)a[0])", span="456-456"];
m1_278 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddArrayToSelf()", file="BinaryConverter.cs", label="Assert.AreEqual(2, (int)a[1])", span="457-457"];
m1_279 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddArrayToSelf()", file="BinaryConverter.cs", label="Assert.AreNotSame(a, a[2])", span="458-458"];
m1_280 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddArrayToSelf()", file="BinaryConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.AddArrayToSelf()", span="450-450"];
m1_207 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertOutOfRangeIndexShouldThrow()", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.InsertOutOfRangeIndexShouldThrow()", span="327-327"];
m1_208 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertOutOfRangeIndexShouldThrow()", file="BinaryConverter.cs", label="JArray j = new JArray()", span="329-329"];
m1_209 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertOutOfRangeIndexShouldThrow()", file="BinaryConverter.cs", label="ExceptionAssert.Throws<ArgumentOutOfRangeException>(() => { j.Insert(2, new JValue(1)); }, @''Index must be within the bounds of the List.\r\nParameter name: index'')", span="331-332"];
m1_210 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertOutOfRangeIndexShouldThrow()", file="BinaryConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.InsertOutOfRangeIndexShouldThrow()", span="327-327"];
m1_357 [cluster="Newtonsoft.Json.IJsonLineInfo.HasLineInfo()", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.IJsonLineInfo.HasLineInfo()", span="38-38"];
m1_16 [cluster="Newtonsoft.Json.Converters.BinaryConverter.GetByteArray(object)", file="BinaryConverter.cs", label="Exit Newtonsoft.Json.Converters.BinaryConverter.GetByteArray(object)", span="64-64"];
m1_17 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Clear()", file="BinaryConverter.cs", label="JArray a = new JArray { 1 }", span="71-71"];
m1_18 [cluster="System.Type.AssignableToTypeName(string)", file="BinaryConverter.cs", label="Entry System.Type.AssignableToTypeName(string)", span="548-548"];
m1_19 [cluster="Newtonsoft.Json.Converters.BinaryConverter.EnsureReflectionObject(System.Type)", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Converters.BinaryConverter.EnsureReflectionObject(System.Type)", span="82-82"];
m1_20 [cluster="Newtonsoft.Json.Utilities.ReflectionObject.GetValue(object, string)", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Utilities.ReflectionObject.GetValue(object, string)", span="57-57"];
m1_21 [cluster="Newtonsoft.Json.JsonSerializationException.JsonSerializationException(string)", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.JsonSerializationException.JsonSerializationException(string)", span="52-52"];
m1_167 [cluster="Newtonsoft.Json.Linq.JArray.Insert(int, Newtonsoft.Json.Linq.JToken)", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Linq.JArray.Insert(int, Newtonsoft.Json.Linq.JToken)", span="311-311"];
m1_51 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.GenericCollectionCopyTo()", file="BinaryConverter.cs", label="Assert.AreEqual(1, (int)a[1])", span="115-115"];
m1_195 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertNull()", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.InsertNull()", span="309-309"];
m1_196 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertNull()", file="BinaryConverter.cs", label="JArray j = new JArray()", span="311-311"];
m1_197 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertNull()", file="BinaryConverter.cs", label="j.Insert(0, null)", span="312-312"];
m1_198 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertNull()", file="BinaryConverter.cs", label="Assert.AreEqual(null, ((JValue)j[0]).Value)", span="314-314"];
m1_199 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertNull()", file="BinaryConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.InsertNull()", span="309-309"];
m1_246 [cluster="Newtonsoft.Json.Linq.JObject.JObject(object)", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Linq.JObject.JObject(object)", span="114-114"];
m1_71 [cluster="lambda expression", file="BinaryConverter.cs", label="Exit lambda expression", span="138-138"];
m1_70 [cluster="lambda expression", file="BinaryConverter.cs", label="((ICollection<JToken>)j).CopyTo(new JToken[1], -1)", span="138-138"];
m1_65 [cluster="Newtonsoft.Json.Converters.BinaryConverter.ReadByteArray(Newtonsoft.Json.JsonReader)", file="BinaryConverter.cs", label="throw JsonSerializationException.Create(reader, ''Unexpected token when reading bytes: {0}''.FormatWith(CultureInfo.InvariantCulture, reader.TokenType));", span="167-167"];
m1_66 [cluster="Newtonsoft.Json.Converters.BinaryConverter.ReadByteArray(Newtonsoft.Json.JsonReader)", file="BinaryConverter.cs", label="throw JsonSerializationException.Create(reader, ''Unexpected end when reading bytes.'');", span="171-171"];
m1_67 [cluster="Newtonsoft.Json.Converters.BinaryConverter.ReadByteArray(Newtonsoft.Json.JsonReader)", file="BinaryConverter.cs", label="Exit Newtonsoft.Json.Converters.BinaryConverter.ReadByteArray(Newtonsoft.Json.JsonReader)", span="150-150"];
m1_68 [cluster="System.Collections.Generic.List<T>.List()", file="BinaryConverter.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m1_22 [cluster="string.FormatWith(System.IFormatProvider, object)", file="BinaryConverter.cs", label="Entry string.FormatWith(System.IFormatProvider, object)", span="47-47"];
m1_54 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.GenericCollectionCopyTo()", file="BinaryConverter.cs", label="Assert.AreEqual(null, a[4])", span="121-121"];
m1_138 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAtOutOfRangeIndexShouldError()", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAtOutOfRangeIndexShouldError()", span="230-230"];
m1_139 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAtOutOfRangeIndexShouldError()", file="BinaryConverter.cs", label="JArray j = new JArray()", span="232-232"];
m1_140 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAtOutOfRangeIndexShouldError()", file="BinaryConverter.cs", label="ExceptionAssert.Throws<ArgumentOutOfRangeException>(() => { j.RemoveAt(0); }, @''Index is equal to or greater than Count.\r\nParameter name: index'')", span="234-235"];
m1_141 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAtOutOfRangeIndexShouldError()", file="BinaryConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAtOutOfRangeIndexShouldError()", span="230-230"];
m1_29 [cluster="Newtonsoft.Json.Converters.BinaryConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="BinaryConverter.cs", label="Type t = (ReflectionUtils.IsNullableType(objectType))\r\n                ? Nullable.GetUnderlyingType(objectType)\r\n                : objectType", span="101-103"];
m1_9 [cluster="Newtonsoft.Json.JsonWriter.WriteValue(byte[])", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.JsonWriter.WriteValue(byte[])", span="1363-1363"];
m1_8 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveSpecificAndRemoveSelf()", file="BinaryConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveSpecificAndRemoveSelf()", span="49-49"];
m1_15 [cluster="Unk.AreEqual", file="BinaryConverter.cs", label="Entry Unk.AreEqual", span=""];
m1_13 [cluster="Unk.IsTrue", file="BinaryConverter.cs", label="Entry Unk.IsTrue", span=""];
m1_11 [cluster="System.Collections.Generic.IEnumerable<TSource>.Last<TSource>()", file="BinaryConverter.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Last<TSource>()", span="0-0"];
m1_12 [cluster="Newtonsoft.Json.Linq.JArray.Remove(Newtonsoft.Json.Linq.JToken)", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Linq.JArray.Remove(Newtonsoft.Json.Linq.JToken)", span="399-399"];
m1_10 [cluster="Newtonsoft.Json.Linq.JArray.JArray(params object[])", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Linq.JArray.JArray(params object[])", span="82-82"];
m1_14 [cluster="Newtonsoft.Json.Linq.JToken.Remove()", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Linq.JToken.Remove()", span="385-385"];
m1_270 [cluster="Newtonsoft.Json.Linq.JArray.JArray(object)", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Linq.JArray.JArray(object)", span="91-91"];
m1_79 [cluster="Newtonsoft.Json.Converters.BinaryConverter.CanConvert(System.Type)", file="BinaryConverter.cs", label="Exit Newtonsoft.Json.Converters.BinaryConverter.CanConvert(System.Type)", span="181-181"];
m1_80 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.GenericCollectionCopyToInsufficientArrayCapacity()", file="BinaryConverter.cs", label="Newtonsoft.Json.Converters.BinaryConverter", span=""];
m1_81 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.GenericCollectionCopyToInsufficientArrayCapacity()", file="BinaryConverter.cs", label="j.Add(new JValue(1))", span="154-154"];
m1_82 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.GenericCollectionCopyToInsufficientArrayCapacity()", file="BinaryConverter.cs", label="j.Add(new JValue(2))", span="155-155"];
m1_83 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.GenericCollectionCopyToInsufficientArrayCapacity()", file="BinaryConverter.cs", label="j.Add(new JValue(3))", span="156-156"];
m1_84 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.GenericCollectionCopyToInsufficientArrayCapacity()", file="BinaryConverter.cs", label="ExceptionAssert.Throws<ArgumentException>(() => { ((ICollection<JToken>)j).CopyTo(new JToken[3], 1); }, @''The number of elements in the source JObject is greater than the available space from arrayIndex to the end of the destination array.'')", span="158-158"];
m1_85 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.GenericCollectionCopyToInsufficientArrayCapacity()", file="BinaryConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.GenericCollectionCopyToInsufficientArrayCapacity()", span="151-151"];
m1_324 [cluster="lambda expression", file="BinaryConverter.cs", label="Entry lambda expression", span="523-523"];
m1_63 [cluster="Newtonsoft.Json.Converters.BinaryConverter.ReadByteArray(Newtonsoft.Json.JsonReader)", file="BinaryConverter.cs", label="return byteList.ToArray();", span="162-162"];
m1_62 [cluster="Newtonsoft.Json.Converters.BinaryConverter.ReadByteArray(Newtonsoft.Json.JsonReader)", file="BinaryConverter.cs", label="JsonToken.EndArray", span="161-161"];
m1_64 [cluster="Newtonsoft.Json.Converters.BinaryConverter.ReadByteArray(Newtonsoft.Json.JsonReader)", file="BinaryConverter.cs", label="JsonToken.Comment", span="163-163"];
m1_69 [cluster="Newtonsoft.Json.JsonReader.Read()", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.JsonReader.Read()", span="409-409"];
m1_77 [cluster="Newtonsoft.Json.Converters.BinaryConverter.CanConvert(System.Type)", file="BinaryConverter.cs", label="return true;", span="192-192"];
m1_76 [cluster="Newtonsoft.Json.Converters.BinaryConverter.CanConvert(System.Type)", file="BinaryConverter.cs", label="objectType == typeof(SqlBinary) || objectType == typeof(SqlBinary?)", span="190-190"];
m1_78 [cluster="Newtonsoft.Json.Converters.BinaryConverter.CanConvert(System.Type)", file="BinaryConverter.cs", label="return false;", span="195-195"];
m1_87 [cluster="lambda expression", file="BinaryConverter.cs", label="((ICollection<JToken>)j).CopyTo(new JToken[3], 1)", span="158-158"];
m1_86 [cluster="lambda expression", file="BinaryConverter.cs", label="Entry lambda expression", span="158-158"];
m1_88 [cluster="lambda expression", file="BinaryConverter.cs", label="Exit lambda expression", span="158-158"];
m1_143 [cluster="lambda expression", file="BinaryConverter.cs", label="j.RemoveAt(0)", span="234-234"];
m1_142 [cluster="lambda expression", file="BinaryConverter.cs", label="Entry lambda expression", span="234-234"];
m1_144 [cluster="lambda expression", file="BinaryConverter.cs", label="Exit lambda expression", span="234-234"];
m1_150 [cluster="lambda expression", file="BinaryConverter.cs", label="j.RemoveAt(-1)", span="243-243"];
m1_149 [cluster="lambda expression", file="BinaryConverter.cs", label="Entry lambda expression", span="243-243"];
m1_151 [cluster="lambda expression", file="BinaryConverter.cs", label="Exit lambda expression", span="243-243"];
m1_205 [cluster="lambda expression", file="BinaryConverter.cs", label="j.Insert(-1, new JValue(1))", span="322-322"];
m1_204 [cluster="lambda expression", file="BinaryConverter.cs", label="Entry lambda expression", span="322-322"];
m1_206 [cluster="lambda expression", file="BinaryConverter.cs", label="Exit lambda expression", span="322-322"];
m1_212 [cluster="lambda expression", file="BinaryConverter.cs", label="j.Insert(2, new JValue(1))", span="331-331"];
m1_211 [cluster="lambda expression", file="BinaryConverter.cs", label="Entry lambda expression", span="331-331"];
m1_213 [cluster="lambda expression", file="BinaryConverter.cs", label="Exit lambda expression", span="331-331"];
m1_234 [cluster="lambda expression", file="BinaryConverter.cs", label="JArray.Parse(json)", span="362-362"];
m1_233 [cluster="lambda expression", file="BinaryConverter.cs", label="Entry lambda expression", span="362-362"];
m1_235 [cluster="lambda expression", file="BinaryConverter.cs", label="Exit lambda expression", span="362-362"];
m1_285 [cluster="lambda expression", file="BinaryConverter.cs", label="Entry lambda expression", span="464-468"];
m1_286 [cluster="lambda expression", file="BinaryConverter.cs", label="JArray a = new JArray()", span="466-466"];
m1_287 [cluster="lambda expression", file="BinaryConverter.cs", label="a[''badvalue''] = new JValue(3)", span="467-467"];
m1_288 [cluster="lambda expression", file="BinaryConverter.cs", label="Exit lambda expression", span="464-468"];
m1_309 [cluster="lambda expression", file="BinaryConverter.cs", label="Entry lambda expression", span="499-499"];
m1_310 [cluster="lambda expression", file="BinaryConverter.cs", label="JArray.Parse(''[1'')", span="499-499"];
m1_311 [cluster="lambda expression", file="BinaryConverter.cs", label="Exit lambda expression", span="499-499"];
m1_325 [cluster="lambda expression", file="BinaryConverter.cs", label="JArray.Parse(json)", span="523-523"];
m1_326 [cluster="lambda expression", file="BinaryConverter.cs", label="Exit lambda expression", span="523-523"];
m1_89 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Remove()", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.Remove()", span="162-162"];
m1_90 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Remove()", file="BinaryConverter.cs", label="JValue v = new JValue(1)", span="164-164"];
m1_91 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Remove()", file="BinaryConverter.cs", label="JArray j = new JArray()", span="165-165"];
m1_92 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Remove()", file="BinaryConverter.cs", label="j.Add(v)", span="166-166"];
m1_96 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Remove()", file="BinaryConverter.cs", label="Assert.AreEqual(true, j.Remove(v))", span="172-172"];
m1_97 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Remove()", file="BinaryConverter.cs", label="Assert.AreEqual(false, j.Remove(v))", span="173-173"];
m1_93 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Remove()", file="BinaryConverter.cs", label="Assert.AreEqual(1, j.Count)", span="168-168"];
m1_94 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Remove()", file="BinaryConverter.cs", label="Assert.AreEqual(false, j.Remove(new JValue(1)))", span="170-170"];
m1_95 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Remove()", file="BinaryConverter.cs", label="Assert.AreEqual(false, j.Remove(null))", span="171-171"];
m1_98 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Remove()", file="BinaryConverter.cs", label="Assert.AreEqual(0, j.Count)", span="175-175"];
m1_99 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Remove()", file="BinaryConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.Remove()", span="162-162"];
m1_50 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.GenericCollectionCopyTo()", file="BinaryConverter.cs", label="Assert.AreEqual(null, a[0])", span="113-113"];
m1_272 [cluster="Unk.IsNotNull", file="BinaryConverter.cs", label="Entry Unk.IsNotNull", span=""];
m1_271 [cluster="System.ComponentModel.ITypedList.GetItemProperties(System.ComponentModel.PropertyDescriptor[])", file="BinaryConverter.cs", label="Entry System.ComponentModel.ITypedList.GetItemProperties(System.ComponentModel.PropertyDescriptor[])", span="0-0"];
m1_27 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddToSelf()", file="BinaryConverter.cs", label="Assert.IsFalse(ReferenceEquals(a[0], a))", span="84-84"];
m1_349 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_LineInfo()", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_LineInfo()", span="559-559"];
m1_350 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_LineInfo()", file="BinaryConverter.cs", label="string json = ''[1,2,3]''", span="561-561"];
m1_351 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_LineInfo()", file="BinaryConverter.cs", label="JArray a = JArray.Parse(json, new JsonLoadSettings\r\n            {\r\n                LineInfoHandling = LineInfoHandling.Load\r\n            })", span="563-566"];
m1_352 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_LineInfo()", file="BinaryConverter.cs", label="Assert.AreEqual(false, ((IJsonLineInfo)a).HasLineInfo())", span="568-568"];
m1_353 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_LineInfo()", file="BinaryConverter.cs", label="Assert.AreEqual(false, ((IJsonLineInfo)a[0]).HasLineInfo())", span="569-569"];
m1_354 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_LineInfo()", file="BinaryConverter.cs", label="Assert.AreEqual(false, ((IJsonLineInfo)a[1]).HasLineInfo())", span="570-570"];
m1_355 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_LineInfo()", file="BinaryConverter.cs", label="Assert.AreEqual(false, ((IJsonLineInfo)a[2]).HasLineInfo())", span="571-571"];
m1_356 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_LineInfo()", file="BinaryConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_LineInfo()", span="559-559"];
m1_214 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Item()", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.Item()", span="336-336"];
m1_215 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Item()", file="BinaryConverter.cs", label="JValue v1 = new JValue(1)", span="338-338"];
m1_216 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Item()", file="BinaryConverter.cs", label="JValue v2 = new JValue(2)", span="339-339"];
m1_220 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Item()", file="BinaryConverter.cs", label="j.Add(v1)", span="345-345"];
m1_217 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Item()", file="BinaryConverter.cs", label="JValue v3 = new JValue(3)", span="340-340"];
m1_221 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Item()", file="BinaryConverter.cs", label="j.Add(v2)", span="346-346"];
m1_224 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Item()", file="BinaryConverter.cs", label="Assert.AreEqual(null, v2.Parent)", span="351-351"];
m1_225 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Item()", file="BinaryConverter.cs", label="Assert.AreEqual(-1, j.IndexOf(v2))", span="352-352"];
m1_218 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Item()", file="BinaryConverter.cs", label="JValue v4 = new JValue(4)", span="341-341"];
m1_222 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Item()", file="BinaryConverter.cs", label="j.Add(v3)", span="347-347"];
m1_219 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Item()", file="BinaryConverter.cs", label="JArray j = new JArray()", span="343-343"];
m1_223 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Item()", file="BinaryConverter.cs", label="j[1] = v4", span="349-349"];
m1_226 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Item()", file="BinaryConverter.cs", label="Assert.AreEqual(j, v4.Parent)", span="353-353"];
m1_227 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Item()", file="BinaryConverter.cs", label="Assert.AreEqual(1, j.IndexOf(v4))", span="354-354"];
m1_228 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Item()", file="BinaryConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.Item()", span="336-336"];
m1_23 [cluster="Newtonsoft.Json.Converters.BinaryConverter.EnsureReflectionObject(System.Type)", file="BinaryConverter.cs", label="_reflectionObject == null", span="84-84"];
m1_31 [cluster="Newtonsoft.Json.Converters.BinaryConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="BinaryConverter.cs", label="!ReflectionUtils.IsNullable(objectType)", span="107-107"];
m1_185 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertShouldInsertAtZeroIndex()", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.InsertShouldInsertAtZeroIndex()", span="293-293"];
m1_186 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertShouldInsertAtZeroIndex()", file="BinaryConverter.cs", label="JValue v1 = new JValue(1)", span="295-295"];
m1_187 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertShouldInsertAtZeroIndex()", file="BinaryConverter.cs", label="JValue v2 = new JValue(2)", span="296-296"];
m1_189 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertShouldInsertAtZeroIndex()", file="BinaryConverter.cs", label="j.Insert(0, v1)", span="300-300"];
m1_190 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertShouldInsertAtZeroIndex()", file="BinaryConverter.cs", label="Assert.AreEqual(0, j.IndexOf(v1))", span="301-301"];
m1_192 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertShouldInsertAtZeroIndex()", file="BinaryConverter.cs", label="Assert.AreEqual(1, j.IndexOf(v1))", span="304-304"];
m1_188 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertShouldInsertAtZeroIndex()", file="BinaryConverter.cs", label="JArray j = new JArray()", span="298-298"];
m1_191 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertShouldInsertAtZeroIndex()", file="BinaryConverter.cs", label="j.Insert(0, v2)", span="303-303"];
m1_193 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertShouldInsertAtZeroIndex()", file="BinaryConverter.cs", label="Assert.AreEqual(0, j.IndexOf(v2))", span="305-305"];
m1_194 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertShouldInsertAtZeroIndex()", file="BinaryConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.InsertShouldInsertAtZeroIndex()", span="293-293"];
m1_337 [cluster="Newtonsoft.Json.Linq.JObject.Parse(string)", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Linq.JObject.Parse(string)", span="409-409"];
m1_56 [cluster="SqlBinary.cstr", file="BinaryConverter.cs", label="Entry SqlBinary.cstr", span=""];
m1_248 [cluster="JArray.cstr", file="BinaryConverter.cs", label="Entry JArray.cstr", span=""];
m1_55 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.GenericCollectionCopyTo()", file="BinaryConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.GenericCollectionCopyTo()", span="101-101"];
m1_119 [cluster="Newtonsoft.Json.Linq.JArray.IndexOf(Newtonsoft.Json.Linq.JToken)", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Linq.JArray.IndexOf(Newtonsoft.Json.Linq.JToken)", span="298-298"];
m1_24 [cluster="Newtonsoft.Json.Converters.BinaryConverter.EnsureReflectionObject(System.Type)", file="BinaryConverter.cs", label="_reflectionObject = ReflectionObject.Create(t, t.GetConstructor(new[] { typeof(byte[]) }), BinaryToArrayName)", span="86-86"];
m1_25 [cluster="Newtonsoft.Json.Converters.BinaryConverter.EnsureReflectionObject(System.Type)", file="BinaryConverter.cs", label="Exit Newtonsoft.Json.Converters.BinaryConverter.EnsureReflectionObject(System.Type)", span="82-82"];
m1_26 [cluster="System.Type.GetConstructor(System.Type[])", file="BinaryConverter.cs", label="Entry System.Type.GetConstructor(System.Type[])", span="0-0"];
m1_28 [cluster="Newtonsoft.Json.Converters.BinaryConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Converters.BinaryConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", span="99-99"];
m1_327 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ToListOnEmptyArray()", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.ToListOnEmptyArray()", span="527-527"];
m1_328 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ToListOnEmptyArray()", file="BinaryConverter.cs", label="string json = @''{''''decks'''':[]}''", span="529-529"];
m1_329 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ToListOnEmptyArray()", file="BinaryConverter.cs", label="JArray decks = (JArray)JObject.Parse(json)[''decks'']", span="531-531"];
m1_330 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ToListOnEmptyArray()", file="BinaryConverter.cs", label="IList<JToken> l = decks.ToList()", span="532-532"];
m1_331 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ToListOnEmptyArray()", file="BinaryConverter.cs", label="Assert.AreEqual(0, l.Count)", span="533-533"];
m1_332 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ToListOnEmptyArray()", file="BinaryConverter.cs", label="json = @''{''''decks'''':[1]}''", span="535-535"];
m1_333 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ToListOnEmptyArray()", file="BinaryConverter.cs", label="decks = (JArray)JObject.Parse(json)[''decks'']", span="537-537"];
m1_334 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ToListOnEmptyArray()", file="BinaryConverter.cs", label="l = decks.ToList()", span="538-538"];
m1_335 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ToListOnEmptyArray()", file="BinaryConverter.cs", label="Assert.AreEqual(1, l.Count)", span="539-539"];
m1_336 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ToListOnEmptyArray()", file="BinaryConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.ToListOnEmptyArray()", span="527-527"];
m1_48 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.GenericCollectionCopyTo()", file="BinaryConverter.cs", label="JToken[] a = new JToken[5]", span="109-109"];
m1_338 [cluster="System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", file="BinaryConverter.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.ToList<TSource>()", span="0-0"];
m1_348 [cluster="Newtonsoft.Json.Linq.JArray.Parse(string, Newtonsoft.Json.Linq.JsonLoadSettings)", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Linq.JArray.Parse(string, Newtonsoft.Json.Linq.JsonLoadSettings)", span="172-172"];
m1_347 [cluster="Newtonsoft.Json.Linq.JsonLoadSettings.JsonLoadSettings()", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Linq.JsonLoadSettings.JsonLoadSettings()", span="7-7"];
m1_137 [cluster="Newtonsoft.Json.Linq.JArray.RemoveAt(int)", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Linq.JArray.RemoveAt(int)", span="323-323"];
m1_229 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_ShouldThrowOnUnexpectedToken()", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_ShouldThrowOnUnexpectedToken()", span="358-358"];
m1_230 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_ShouldThrowOnUnexpectedToken()", file="BinaryConverter.cs", label="string json = @''{''''prop'''':''''value''''}''", span="360-360"];
m1_231 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_ShouldThrowOnUnexpectedToken()", file="BinaryConverter.cs", label="ExceptionAssert.Throws<JsonReaderException>(() => { JArray.Parse(json); }, ''Error reading JArray from JsonReader. Current JsonReader item is not an array: StartObject. Path '', line 1, position 1.'')", span="362-362"];
m1_232 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_ShouldThrowOnUnexpectedToken()", file="BinaryConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_ShouldThrowOnUnexpectedToken()", span="358-358"];
m1_237 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ArrayOrder()", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.ArrayOrder()", span="372-372"];
m1_238 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ArrayOrder()", file="BinaryConverter.cs", label="string itemZeroText = ''Zero text''", span="374-374"];
m1_239 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ArrayOrder()", file="BinaryConverter.cs", label="IEnumerable<ListItemFields> t = new List<ListItemFields>\r\n            {\r\n                new ListItemFields { ListItemText = ''First'', ListItemValue = 1 },\r\n                new ListItemFields { ListItemText = ''Second'', ListItemValue = 2 },\r\n                new ListItemFields { ListItemText = ''Third'', ListItemValue = 3 }\r\n            }", span="376-381"];
m1_240 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ArrayOrder()", file="BinaryConverter.cs", label="JObject optionValues =\r\n                new JObject(\r\n                    new JProperty(''options'',\r\n                        new JArray(\r\n                            new JObject(\r\n                                new JProperty(''text'', itemZeroText),\r\n                                new JProperty(''value'', ''0'')),\r\n                            from r in t\r\n                            orderby r.ListItemValue\r\n                            select new JObject(\r\n                                new JProperty(''text'', r.ListItemText),\r\n                                new JProperty(''value'', r.ListItemValue.ToString())))))", span="383-394"];
m1_241 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ArrayOrder()", file="BinaryConverter.cs", label="string result = ''myOptions = '' + optionValues.ToString()", span="396-396"];
m1_242 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ArrayOrder()", file="BinaryConverter.cs", label="StringAssert.AreEqual(@''myOptions = {\r\n  ''''options'''': [\r\n    {\r\n      ''''text'''': ''''Zero text'''',\r\n      ''''value'''': ''''0''''\r\n    },\r\n    {\r\n      ''''text'''': ''''First'''',\r\n      ''''value'''': ''''1''''\r\n    },\r\n    {\r\n      ''''text'''': ''''Second'''',\r\n      ''''value'''': ''''2''''\r\n    },\r\n    {\r\n      ''''text'''': ''''Third'''',\r\n      ''''value'''': ''''3''''\r\n    }\r\n  ]\r\n}'', result)", span="398-417"];
m1_243 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ArrayOrder()", file="BinaryConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.ArrayOrder()", span="372-372"];
m1_100 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", span="179-179"];
m1_101 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", file="BinaryConverter.cs", label="JValue v1 = new JValue(1)", span="181-181"];
m1_102 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", file="BinaryConverter.cs", label="JValue v2 = new JValue(1)", span="182-182"];
m1_105 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", file="BinaryConverter.cs", label="j.Add(v1)", span="187-187"];
m1_106 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", file="BinaryConverter.cs", label="Assert.AreEqual(0, j.IndexOf(v1))", span="188-188"];
m1_108 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", file="BinaryConverter.cs", label="Assert.AreEqual(0, j.IndexOf(v1))", span="191-191"];
m1_111 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", file="BinaryConverter.cs", label="Assert.AreEqual(1, j.IndexOf(v1))", span="195-195"];
m1_115 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", file="BinaryConverter.cs", label="Assert.AreEqual(0, j.IndexOf(v1))", span="200-200"];
m1_103 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", file="BinaryConverter.cs", label="JValue v3 = new JValue(1)", span="183-183"];
m1_107 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", file="BinaryConverter.cs", label="j.Add(v2)", span="190-190"];
m1_109 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", file="BinaryConverter.cs", label="Assert.AreEqual(1, j.IndexOf(v2))", span="192-192"];
m1_112 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", file="BinaryConverter.cs", label="Assert.AreEqual(2, j.IndexOf(v2))", span="196-196"];
m1_116 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", file="BinaryConverter.cs", label="Assert.AreEqual(1, j.IndexOf(v2))", span="201-201"];
m1_104 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", file="BinaryConverter.cs", label="JArray j = new JArray()", span="185-185"];
m1_110 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", file="BinaryConverter.cs", label="j.AddFirst(v3)", span="194-194"];
m1_113 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", file="BinaryConverter.cs", label="Assert.AreEqual(0, j.IndexOf(v3))", span="197-197"];
m1_114 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", file="BinaryConverter.cs", label="v3.Remove()", span="199-199"];
m1_117 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", file="BinaryConverter.cs", label="Assert.AreEqual(-1, j.IndexOf(v3))", span="202-202"];
m1_118 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", file="BinaryConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.IndexOf()", span="179-179"];
m1_121 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAt()", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAt()", span="206-206"];
m1_122 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAt()", file="BinaryConverter.cs", label="JValue v1 = new JValue(1)", span="208-208"];
m1_123 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAt()", file="BinaryConverter.cs", label="JValue v2 = new JValue(1)", span="209-209"];
m1_126 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAt()", file="BinaryConverter.cs", label="j.Add(v1)", span="214-214"];
m1_129 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAt()", file="BinaryConverter.cs", label="Assert.AreEqual(true, j.Contains(v1))", span="218-218"];
m1_131 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAt()", file="BinaryConverter.cs", label="Assert.AreEqual(false, j.Contains(v1))", span="220-220"];
m1_124 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAt()", file="BinaryConverter.cs", label="JValue v3 = new JValue(1)", span="210-210"];
m1_127 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAt()", file="BinaryConverter.cs", label="j.Add(v2)", span="215-215"];
m1_125 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAt()", file="BinaryConverter.cs", label="JArray j = new JArray()", span="212-212"];
m1_128 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAt()", file="BinaryConverter.cs", label="j.Add(v3)", span="216-216"];
m1_132 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAt()", file="BinaryConverter.cs", label="Assert.AreEqual(true, j.Contains(v3))", span="222-222"];
m1_134 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAt()", file="BinaryConverter.cs", label="Assert.AreEqual(false, j.Contains(v3))", span="224-224"];
m1_130 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAt()", file="BinaryConverter.cs", label="j.RemoveAt(0)", span="219-219"];
m1_133 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAt()", file="BinaryConverter.cs", label="j.RemoveAt(1)", span="223-223"];
m1_135 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAt()", file="BinaryConverter.cs", label="Assert.AreEqual(1, j.Count)", span="226-226"];
m1_136 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAt()", file="BinaryConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAt()", span="206-206"];
m1_145 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAtNegativeIndexShouldError()", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAtNegativeIndexShouldError()", span="239-239"];
m1_146 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAtNegativeIndexShouldError()", file="BinaryConverter.cs", label="JArray j = new JArray()", span="241-241"];
m1_147 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAtNegativeIndexShouldError()", file="BinaryConverter.cs", label="ExceptionAssert.Throws<ArgumentOutOfRangeException>(() => { j.RemoveAt(-1); }, @''Index is less than 0.\r\nParameter name: index'')", span="243-244"];
m1_148 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAtNegativeIndexShouldError()", file="BinaryConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveAtNegativeIndexShouldError()", span="239-239"];
m1_251 [cluster="Newtonsoft.Json.Linq.JToken.ToString()", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Linq.JToken.ToString()", span="422-422"];
m1_339 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_NoComments()", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_NoComments()", span="543-543"];
m1_340 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_NoComments()", file="BinaryConverter.cs", label="string json = ''[1,2/*comment*/,3]''", span="545-545"];
m1_341 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_NoComments()", file="BinaryConverter.cs", label="JArray a = JArray.Parse(json, new JsonLoadSettings\r\n            {\r\n                CommentHandling = CommentHandling.Ignore\r\n            })", span="547-550"];
m1_342 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_NoComments()", file="BinaryConverter.cs", label="Assert.AreEqual(3, a.Count)", span="552-552"];
m1_343 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_NoComments()", file="BinaryConverter.cs", label="Assert.AreEqual(1, (int)a[0])", span="553-553"];
m1_344 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_NoComments()", file="BinaryConverter.cs", label="Assert.AreEqual(2, (int)a[1])", span="554-554"];
m1_345 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_NoComments()", file="BinaryConverter.cs", label="Assert.AreEqual(3, (int)a[2])", span="555-555"];
m1_346 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_NoComments()", file="BinaryConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.Parse_NoComments()", span="543-543"];
m1_281 [cluster="Unk.AreNotSame", file="BinaryConverter.cs", label="Entry Unk.AreNotSame", span=""];
m1_200 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertNegativeIndexShouldThrow()", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.InsertNegativeIndexShouldThrow()", span="318-318"];
m1_201 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertNegativeIndexShouldThrow()", file="BinaryConverter.cs", label="JArray j = new JArray()", span="320-320"];
m1_202 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertNegativeIndexShouldThrow()", file="BinaryConverter.cs", label="ExceptionAssert.Throws<ArgumentOutOfRangeException>(() => { j.Insert(-1, new JValue(1)); }, @''Index was out of range. Must be non-negative and less than the size of the collection.\r\nParameter name: index'')", span="322-323"];
m1_203 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertNegativeIndexShouldThrow()", file="BinaryConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.InsertNegativeIndexShouldThrow()", span="318-318"];
m1_236 [cluster="Newtonsoft.Json.Linq.JArray.Parse(string)", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Linq.JArray.Parse(string)", span="157-157"];
m1_247 [cluster="Newtonsoft.Json.Linq.JProperty.JProperty(string, object)", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Linq.JProperty.JProperty(string, object)", span="326-326"];
m1_42 [cluster="Newtonsoft.Json.Converters.BinaryConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="BinaryConverter.cs", label="EnsureReflectionObject(t)", span="136-136"];
m1_45 [cluster="Newtonsoft.Json.Converters.BinaryConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="BinaryConverter.cs", label="return new SqlBinary(data);", span="144-144"];
m1_46 [cluster="Newtonsoft.Json.Converters.BinaryConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="BinaryConverter.cs", label="throw JsonSerializationException.Create(reader, ''Unexpected object type when writing binary: {0}''.FormatWith(CultureInfo.InvariantCulture, objectType));", span="147-147"];
m1_47 [cluster="Newtonsoft.Json.Converters.BinaryConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="BinaryConverter.cs", label="Exit Newtonsoft.Json.Converters.BinaryConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", span="99-99"];
m1_49 [cluster="System.Nullable.GetUnderlyingType(System.Type)", file="BinaryConverter.cs", label="Entry System.Nullable.GetUnderlyingType(System.Type)", span="0-0"];
m1_52 [cluster="Newtonsoft.Json.Converters.BinaryConverter.ReadByteArray(Newtonsoft.Json.JsonReader)", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Converters.BinaryConverter.ReadByteArray(Newtonsoft.Json.JsonReader)", span="150-150"];
m1_53 [cluster="object.ToString()", file="BinaryConverter.cs", label="Entry object.ToString()", span="0-0"];
m1_40 [cluster="Newtonsoft.Json.Converters.BinaryConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", color=green, community=0, file="BinaryConverter.cs", label="throw JsonSerializationException.Create(reader, ''Unexpected token parsing binary. Expected String or StartArray, got {0}.''.FormatWith(CultureInfo.InvariantCulture, reader.TokenType));", prediction=2, span="130-130"];
m1_253 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Iterate()", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.Iterate()", span="421-421"];
m1_254 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Iterate()", file="BinaryConverter.cs", label="JArray a = new JArray(1, 2, 3, 4, 5)", span="423-423"];
m1_255 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Iterate()", file="BinaryConverter.cs", label="int i = 1", span="425-425"];
m1_256 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Iterate()", file="BinaryConverter.cs", label=a, span="426-426"];
m1_257 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Iterate()", file="BinaryConverter.cs", label="Assert.AreEqual(i, (int)token)", span="428-428"];
m1_258 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Iterate()", file="BinaryConverter.cs", label="i++", span="429-429"];
m1_259 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Iterate()", file="BinaryConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.Iterate()", span="421-421"];
m1_72 [cluster="System.Collections.Generic.List<T>.ToArray()", file="BinaryConverter.cs", label="Entry System.Collections.Generic.List<T>.ToArray()", span="0-0"];
m1_73 [cluster="Newtonsoft.Json.Converters.BinaryConverter.CanConvert(System.Type)", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Converters.BinaryConverter.CanConvert(System.Type)", span="181-181"];
m1_74 [cluster="Newtonsoft.Json.Converters.BinaryConverter.CanConvert(System.Type)", file="BinaryConverter.cs", label="objectType.AssignableToTypeName(BinaryTypeName)", span="184-184"];
m1_75 [cluster="Newtonsoft.Json.Converters.BinaryConverter.CanConvert(System.Type)", file="BinaryConverter.cs", label="return true;", span="186-186"];
m1_312 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertAddEnd()", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.InsertAddEnd()", span="503-503"];
m1_313 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertAddEnd()", file="BinaryConverter.cs", label="JArray array = new JArray()", span="505-505"];
m1_314 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertAddEnd()", file="BinaryConverter.cs", label="array.Insert(0, 123)", span="506-506"];
m1_315 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertAddEnd()", file="BinaryConverter.cs", label="array.Insert(1, 456)", span="507-507"];
m1_316 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertAddEnd()", file="BinaryConverter.cs", label="Assert.AreEqual(2, array.Count)", span="509-509"];
m1_317 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertAddEnd()", file="BinaryConverter.cs", label="Assert.AreEqual(123, (int)array[0])", span="510-510"];
m1_318 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertAddEnd()", file="BinaryConverter.cs", label="Assert.AreEqual(456, (int)array[1])", span="511-511"];
m1_319 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.InsertAddEnd()", file="BinaryConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.InsertAddEnd()", span="503-503"];
m1_244 [cluster="System.Collections.Generic.List<T>.List()", file="BinaryConverter.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m1_57 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.GenericCollectionCopyToNullArrayShouldThrow()", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.GenericCollectionCopyToNullArrayShouldThrow()", span="125-125"];
m1_58 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.GenericCollectionCopyToNullArrayShouldThrow()", file="BinaryConverter.cs", label="JArray j = new JArray()", span="127-127"];
m1_59 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.GenericCollectionCopyToNullArrayShouldThrow()", file="BinaryConverter.cs", label="ExceptionAssert.Throws<ArgumentNullException>(() => { ((ICollection<JToken>)j).CopyTo(null, 0); }, @''Value cannot be null.\r\nParameter name: array'')", span="129-130"];
m1_61 [cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", span="350-350"];
m1_60 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.GenericCollectionCopyToNullArrayShouldThrow()", file="BinaryConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.GenericCollectionCopyToNullArrayShouldThrow()", span="125-125"];
m1_7 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveSpecificAndRemoveSelf()", file="BinaryConverter.cs", label="Assert.AreEqual(2, a.Count)", span="65-65"];
m1_30 [cluster="Newtonsoft.Json.Converters.BinaryConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="BinaryConverter.cs", label="reader.TokenType == JsonToken.Null", span="105-105"];
m1_0 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveSpecificAndRemoveSelf()", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveSpecificAndRemoveSelf()", span="49-49"];
m1_4 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveSpecificAndRemoveSelf()", file="BinaryConverter.cs", label="Assert.IsTrue(a.Remove(last))", span="60-60"];
m1_1 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveSpecificAndRemoveSelf()", file="BinaryConverter.cs", label="JObject o = new JObject\r\n            {\r\n                { ''results'', new JArray(1, 2, 3, 4) }\r\n            }", span="51-54"];
m1_5 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveSpecificAndRemoveSelf()", file="BinaryConverter.cs", label="last = a.Last()", span="62-62"];
m1_2 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveSpecificAndRemoveSelf()", file="BinaryConverter.cs", label="JArray a = (JArray)o[''results'']", span="56-56"];
m1_3 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveSpecificAndRemoveSelf()", file="BinaryConverter.cs", label="var last = a.Last()", span="58-58"];
m1_6 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.RemoveSpecificAndRemoveSelf()", file="BinaryConverter.cs", label="last.Remove()", span="63-63"];
m1_249 [cluster="Newtonsoft.Json.Linq.JObject.JObject(params object[])", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Linq.JObject.JObject(params object[])", span="105-105"];
m1_320 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ParseAdditionalContent()", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.ParseAdditionalContent()", span="515-515"];
m1_321 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ParseAdditionalContent()", file="BinaryConverter.cs", label="string json = @''[\r\n''''Small'''',\r\n''''Medium'''',\r\n''''Large''''\r\n], 987987''", span="517-521"];
m1_322 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ParseAdditionalContent()", file="BinaryConverter.cs", label="ExceptionAssert.Throws<JsonReaderException>(() => { JArray.Parse(json); }, ''Additional text encountered after finished reading JSON content: ,. Path '', line 5, position 1.'')", span="523-523"];
m1_323 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ParseAdditionalContent()", file="BinaryConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.ParseAdditionalContent()", span="515-515"];
m1_295 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ReplaceAll()", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.ReplaceAll()", span="483-483"];
m1_296 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ReplaceAll()", file="BinaryConverter.cs", label="JArray a = new JArray(new[] { 1, 2, 3 })", span="485-485"];
m1_297 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ReplaceAll()", file="BinaryConverter.cs", label="Assert.AreEqual(3, a.Count)", span="486-486"];
m1_298 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ReplaceAll()", file="BinaryConverter.cs", label="Assert.AreEqual(1, (int)a[0])", span="487-487"];
m1_299 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ReplaceAll()", file="BinaryConverter.cs", label="Assert.AreEqual(2, (int)a[1])", span="488-488"];
m1_300 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ReplaceAll()", file="BinaryConverter.cs", label="Assert.AreEqual(3, (int)a[2])", span="489-489"];
m1_301 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ReplaceAll()", file="BinaryConverter.cs", label="a.ReplaceAll(1)", span="491-491"];
m1_302 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ReplaceAll()", file="BinaryConverter.cs", label="Assert.AreEqual(1, a.Count)", span="492-492"];
m1_303 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ReplaceAll()", file="BinaryConverter.cs", label="Assert.AreEqual(1, (int)a[0])", span="493-493"];
m1_304 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ReplaceAll()", file="BinaryConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.ReplaceAll()", span="483-483"];
m1_120 [cluster="Newtonsoft.Json.Linq.JContainer.AddFirst(object)", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Linq.JContainer.AddFirst(object)", span="649-649"];
m1_252 [cluster="Newtonsoft.Json.Tests.StringAssert.AreEqual(string, string)", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Tests.StringAssert.AreEqual(string, string)", span="321-321"];
m1_305 [cluster="Newtonsoft.Json.Linq.JContainer.ReplaceAll(object)", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Linq.JContainer.ReplaceAll(object)", span="699-699"];
m1_260 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ITypedListGetItemProperties()", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.ITypedListGetItemProperties()", span="435-435"];
m1_261 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ITypedListGetItemProperties()", file="BinaryConverter.cs", label="JProperty p1 = new JProperty(''Test1'', 1)", span="437-437"];
m1_262 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ITypedListGetItemProperties()", file="BinaryConverter.cs", label="JProperty p2 = new JProperty(''Test2'', ''Two'')", span="438-438"];
m1_263 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ITypedListGetItemProperties()", file="BinaryConverter.cs", label="ITypedList a = new JArray(new JObject(p1, p2))", span="439-439"];
m1_264 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ITypedListGetItemProperties()", file="BinaryConverter.cs", label="PropertyDescriptorCollection propertyDescriptors = a.GetItemProperties(null)", span="441-441"];
m1_265 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ITypedListGetItemProperties()", file="BinaryConverter.cs", label="Assert.IsNotNull(propertyDescriptors)", span="442-442"];
m1_266 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ITypedListGetItemProperties()", file="BinaryConverter.cs", label="Assert.AreEqual(2, propertyDescriptors.Count)", span="443-443"];
m1_267 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ITypedListGetItemProperties()", file="BinaryConverter.cs", label="Assert.AreEqual(''Test1'', propertyDescriptors[0].Name)", span="444-444"];
m1_268 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ITypedListGetItemProperties()", file="BinaryConverter.cs", label="Assert.AreEqual(''Test2'', propertyDescriptors[1].Name)", span="445-445"];
m1_269 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ITypedListGetItemProperties()", file="BinaryConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.ITypedListGetItemProperties()", span="435-435"];
m1_37 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Contains()", file="BinaryConverter.cs", label="Assert.AreEqual(false, a.Contains(null))", span="96-96"];
m1_32 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Contains()", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.Contains()", span="88-88"];
m1_35 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Contains()", file="BinaryConverter.cs", label="Assert.AreEqual(false, a.Contains(new JValue(2)))", span="94-94"];
m1_36 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Contains()", file="BinaryConverter.cs", label="Assert.AreEqual(false, a.Contains(new JValue(1)))", span="95-95"];
m1_38 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Contains()", file="BinaryConverter.cs", label="Assert.AreEqual(true, a.Contains(v))", span="97-97"];
m1_33 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Contains()", file="BinaryConverter.cs", label="JValue v = new JValue(1)", span="90-90"];
m1_34 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Contains()", file="BinaryConverter.cs", label="JArray a = new JArray { v }", span="92-92"];
m1_41 [cluster="Newtonsoft.Json.Linq.JArray.Contains(Newtonsoft.Json.Linq.JToken)", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Linq.JArray.Contains(Newtonsoft.Json.Linq.JToken)", span="367-367"];
m1_39 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Contains()", file="BinaryConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.Contains()", span="88-88"];
m1_250 [cluster="object.ToString()", file="BinaryConverter.cs", label="Entry object.ToString()", span="0-0"];
m1_168 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddFirstAddedTokenShouldBeFirst()", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.AddFirstAddedTokenShouldBeFirst()", span="269-269"];
m1_169 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddFirstAddedTokenShouldBeFirst()", file="BinaryConverter.cs", label="JValue v1 = new JValue(1)", span="271-271"];
m1_170 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddFirstAddedTokenShouldBeFirst()", file="BinaryConverter.cs", label="JValue v2 = new JValue(2)", span="272-272"];
m1_175 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddFirstAddedTokenShouldBeFirst()", file="BinaryConverter.cs", label="j.AddFirst(v1)", span="279-279"];
m1_176 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddFirstAddedTokenShouldBeFirst()", file="BinaryConverter.cs", label="Assert.AreEqual(v1, j.First)", span="280-280"];
m1_177 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddFirstAddedTokenShouldBeFirst()", file="BinaryConverter.cs", label="Assert.AreEqual(v1, j.Last)", span="281-281"];
m1_180 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddFirstAddedTokenShouldBeFirst()", file="BinaryConverter.cs", label="Assert.AreEqual(v1, j.Last)", span="285-285"];
m1_183 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddFirstAddedTokenShouldBeFirst()", file="BinaryConverter.cs", label="Assert.AreEqual(v1, j.Last)", span="289-289"];
m1_171 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddFirstAddedTokenShouldBeFirst()", file="BinaryConverter.cs", label="JValue v3 = new JValue(3)", span="273-273"];
m1_178 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddFirstAddedTokenShouldBeFirst()", file="BinaryConverter.cs", label="j.AddFirst(v2)", span="283-283"];
m1_179 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddFirstAddedTokenShouldBeFirst()", file="BinaryConverter.cs", label="Assert.AreEqual(v2, j.First)", span="284-284"];
m1_172 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddFirstAddedTokenShouldBeFirst()", file="BinaryConverter.cs", label="JArray j = new JArray()", span="275-275"];
m1_181 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddFirstAddedTokenShouldBeFirst()", file="BinaryConverter.cs", label="j.AddFirst(v3)", span="287-287"];
m1_182 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddFirstAddedTokenShouldBeFirst()", file="BinaryConverter.cs", label="Assert.AreEqual(v3, j.First)", span="288-288"];
m1_173 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddFirstAddedTokenShouldBeFirst()", file="BinaryConverter.cs", label="Assert.AreEqual(null, j.First)", span="276-276"];
m1_174 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddFirstAddedTokenShouldBeFirst()", file="BinaryConverter.cs", label="Assert.AreEqual(null, j.Last)", span="277-277"];
m1_184 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.AddFirstAddedTokenShouldBeFirst()", file="BinaryConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.AddFirstAddedTokenShouldBeFirst()", span="269-269"];
m1_152 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Insert()", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.Insert()", span="248-248"];
m1_153 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Insert()", file="BinaryConverter.cs", label="JValue v1 = new JValue(1)", span="250-250"];
m1_154 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Insert()", file="BinaryConverter.cs", label="JValue v2 = new JValue(2)", span="251-251"];
m1_158 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Insert()", file="BinaryConverter.cs", label="j.Add(v1)", span="257-257"];
m1_162 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Insert()", file="BinaryConverter.cs", label="Assert.AreEqual(0, j.IndexOf(v1))", span="262-262"];
m1_155 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Insert()", file="BinaryConverter.cs", label="JValue v3 = new JValue(3)", span="252-252"];
m1_159 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Insert()", file="BinaryConverter.cs", label="j.Add(v2)", span="258-258"];
m1_164 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Insert()", file="BinaryConverter.cs", label="Assert.AreEqual(2, j.IndexOf(v2))", span="264-264"];
m1_156 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Insert()", file="BinaryConverter.cs", label="JValue v4 = new JValue(4)", span="253-253"];
m1_160 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Insert()", file="BinaryConverter.cs", label="j.Add(v3)", span="259-259"];
m1_165 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Insert()", file="BinaryConverter.cs", label="Assert.AreEqual(3, j.IndexOf(v3))", span="265-265"];
m1_157 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Insert()", file="BinaryConverter.cs", label="JArray j = new JArray()", span="255-255"];
m1_161 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Insert()", file="BinaryConverter.cs", label="j.Insert(1, v4)", span="260-260"];
m1_163 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Insert()", file="BinaryConverter.cs", label="Assert.AreEqual(1, j.IndexOf(v4))", span="263-263"];
m1_166 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.Insert()", file="BinaryConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.Insert()", span="248-248"];
m1_306 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ParseIncomplete()", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.ParseIncomplete()", span="497-497"];
m1_307 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ParseIncomplete()", file="BinaryConverter.cs", label="ExceptionAssert.Throws<JsonReaderException>(() => { JArray.Parse(''[1''); }, ''Unexpected end of content while loading JArray. Path '[0]', line 1, position 2.'')", span="499-499"];
m1_308 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ParseIncomplete()", file="BinaryConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.ParseIncomplete()", span="497-497"];
m1_282 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.SetValueWithInvalidIndex()", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.SetValueWithInvalidIndex()", span="462-462"];
m1_283 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.SetValueWithInvalidIndex()", file="BinaryConverter.cs", label="ExceptionAssert.Throws<ArgumentException>(() =>\r\n            {\r\n                JArray a = new JArray();\r\n                a[''badvalue''] = new JValue(3);\r\n            }, @''Set JArray values with invalid key value: ''''badvalue''''. Int32 array index expected.'')", span="464-468"];
m1_284 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.SetValueWithInvalidIndex()", file="BinaryConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.SetValueWithInvalidIndex()", span="462-462"];
m1_289 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.SetValue()", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.SetValue()", span="472-472"];
m1_290 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.SetValue()", file="BinaryConverter.cs", label="object key = 0", span="474-474"];
m1_291 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.SetValue()", file="BinaryConverter.cs", label="JArray a = new JArray((object)null)", span="476-476"];
m1_292 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.SetValue()", file="BinaryConverter.cs", label="a[key] = new JValue(3)", span="477-477"];
m1_293 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.SetValue()", file="BinaryConverter.cs", label="Assert.AreEqual(3, (int)a[key])", span="479-479"];
m1_294 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.SetValue()", file="BinaryConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JArrayTests.SetValue()", span="472-472"];
m1_245 [cluster="Newtonsoft.Json.Tests.Linq.JArrayTests.ListItemFields.ListItemFields()", file="BinaryConverter.cs", label="Entry Newtonsoft.Json.Tests.Linq.JArrayTests.ListItemFields.ListItemFields()", span="365-365"];
m1_358 [file="BinaryConverter.cs", label=j, span=""];
m1_359 [file="BinaryConverter.cs", label=j, span=""];
m1_360 [file="BinaryConverter.cs", label=j, span=""];
m1_361 [file="BinaryConverter.cs", label=j, span=""];
m1_362 [file="BinaryConverter.cs", label=j, span=""];
m1_363 [file="BinaryConverter.cs", label=j, span=""];
m1_364 [file="BinaryConverter.cs", label=j, span=""];
m1_365 [file="BinaryConverter.cs", label=j, span=""];
m1_366 [file="BinaryConverter.cs", label=json, span=""];
m1_367 [file="BinaryConverter.cs", label=json, span=""];
m2_97 [cluster="Newtonsoft.Json.Utilities.DateTimeUtils.ConvertDateTimeToJavaScriptTicks(System.DateTime, bool)", file="BsonBinaryWriter.cs", label="Entry Newtonsoft.Json.Utilities.DateTimeUtils.ConvertDateTimeToJavaScriptTicks(System.DateTime, bool)", span="176-176"];
m2_91 [cluster="System.IO.BinaryWriter.Write(long)", file="BsonBinaryWriter.cs", label="Entry System.IO.BinaryWriter.Write(long)", span="0-0"];
m2_187 [cluster="System.Text.Encoding.GetByteCount(string)", file="BsonBinaryWriter.cs", label="Entry System.Text.Encoding.GetByteCount(string)", span="0-0"];
m2_119 [cluster="System.IO.BinaryWriter.Write(byte[], int, int)", file="BsonBinaryWriter.cs", label="Entry System.IO.BinaryWriter.Write(byte[], int, int)", span="0-0"];
m2_4 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.Flush()", file="BsonBinaryWriter.cs", label="Entry Newtonsoft.Json.Bson.BsonBinaryWriter.Flush()", span="49-49"];
m2_5 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.Flush()", file="BsonBinaryWriter.cs", label="_writer.Flush()", span="51-51"];
m2_6 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.Flush()", file="BsonBinaryWriter.cs", label="Exit Newtonsoft.Json.Bson.BsonBinaryWriter.Flush()", span="49-49"];
m2_124 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSizeWithLength(int, bool)", file="BsonBinaryWriter.cs", label="Entry Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSizeWithLength(int, bool)", span="234-234"];
m2_125 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSizeWithLength(int, bool)", file="BsonBinaryWriter.cs", label="int baseSize = (includeSize)\r\n                ? 5 // size bytes + terminator\r\n                : 1", span="236-238"];
m2_126 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSizeWithLength(int, bool)", file="BsonBinaryWriter.cs", label="return baseSize + stringByteCount;", span="240-240"];
m2_127 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSizeWithLength(int, bool)", file="BsonBinaryWriter.cs", label="Exit Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSizeWithLength(int, bool)", span="234-234"];
m2_95 [cluster="System.DateTime.ToUniversalTime()", file="BsonBinaryWriter.cs", label="Entry System.DateTime.ToUniversalTime()", span="0-0"];
m2_94 [cluster="System.IO.BinaryWriter.Write(bool)", file="BsonBinaryWriter.cs", label="Entry System.IO.BinaryWriter.Write(bool)", span="0-0"];
m2_88 [cluster="Newtonsoft.Json.Utilities.MathUtils.IntLength(ulong)", file="BsonBinaryWriter.cs", label="Entry Newtonsoft.Json.Utilities.MathUtils.IntLength(ulong)", span="33-33"];
m2_108 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteUtf8Bytes(string, int)", file="BsonBinaryWriter.cs", label="Entry Newtonsoft.Json.Bson.BsonBinaryWriter.WriteUtf8Bytes(string, int)", span="208-208"];
m2_109 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteUtf8Bytes(string, int)", file="BsonBinaryWriter.cs", label="s != null", span="210-210"];
m2_112 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteUtf8Bytes(string, int)", file="BsonBinaryWriter.cs", label="byteCount <= 256", span="216-216"];
m2_113 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteUtf8Bytes(string, int)", file="BsonBinaryWriter.cs", label="Encoding.GetBytes(s, 0, s.Length, _largeByteBuffer, 0)", span="218-218"];
m2_114 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteUtf8Bytes(string, int)", file="BsonBinaryWriter.cs", label="_writer.Write(_largeByteBuffer, 0, byteCount)", span="219-219"];
m2_115 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteUtf8Bytes(string, int)", file="BsonBinaryWriter.cs", label="byte[] bytes = Encoding.GetBytes(s)", span="223-223"];
m2_110 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteUtf8Bytes(string, int)", file="BsonBinaryWriter.cs", label="_largeByteBuffer == null", span="212-212"];
m2_111 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteUtf8Bytes(string, int)", file="BsonBinaryWriter.cs", label="_largeByteBuffer = new byte[256]", span="214-214"];
m2_116 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteUtf8Bytes(string, int)", file="BsonBinaryWriter.cs", label="_writer.Write(bytes)", span="224-224"];
m2_117 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteUtf8Bytes(string, int)", file="BsonBinaryWriter.cs", label="Exit Newtonsoft.Json.Bson.BsonBinaryWriter.WriteUtf8Bytes(string, int)", span="208-208"];
m2_96 [cluster="System.DateTime.ToLocalTime()", file="BsonBinaryWriter.cs", label="Entry System.DateTime.ToLocalTime()", span="0-0"];
m2_89 [cluster="System.Convert.ToInt32(object, System.IFormatProvider)", file="BsonBinaryWriter.cs", label="Entry System.Convert.ToInt32(object, System.IFormatProvider)", span="0-0"];
m2_12 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteToken(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="Entry Newtonsoft.Json.Bson.BsonBinaryWriter.WriteToken(Newtonsoft.Json.Bson.BsonToken)", span="63-63"];
m2_13 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteToken(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="CalculateSize(t)", span="65-65"];
m2_14 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteToken(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="WriteTokenInternal(t)", span="66-66"];
m2_15 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteToken(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="Exit Newtonsoft.Json.Bson.BsonBinaryWriter.WriteToken(Newtonsoft.Json.Bson.BsonToken)", span="63-63"];
m2_98 [cluster="Newtonsoft.Json.Utilities.DateTimeUtils.ConvertDateTimeToJavaScriptTicks(System.DateTime, System.TimeSpan)", file="BsonBinaryWriter.cs", label="Entry Newtonsoft.Json.Utilities.DateTimeUtils.ConvertDateTimeToJavaScriptTicks(System.DateTime, System.TimeSpan)", span="164-164"];
m2_100 [cluster="System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string, string)", file="BsonBinaryWriter.cs", label="Entry System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string, string)", span="0-0"];
m2_86 [cluster="System.IO.BinaryWriter.Write(byte)", file="BsonBinaryWriter.cs", label="Entry System.IO.BinaryWriter.Write(byte)", span="0-0"];
m2_118 [cluster="System.Text.Encoding.GetBytes(string, int, int, byte[], int)", file="BsonBinaryWriter.cs", label="Entry System.Text.Encoding.GetBytes(string, int, int, byte[], int)", span="0-0"];
m2_83 [cluster="System.IO.BinaryWriter.Write(int)", file="BsonBinaryWriter.cs", label="Entry System.IO.BinaryWriter.Write(int)", span="0-0"];
m2_121 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(int)", file="BsonBinaryWriter.cs", label="Entry Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(int)", span="229-229"];
m2_122 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(int)", file="BsonBinaryWriter.cs", label="return stringByteCount + 1;", span="231-231"];
m2_123 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(int)", file="BsonBinaryWriter.cs", label="Exit Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(int)", span="229-229"];
m2_101 [cluster="Unk.nameof", file="BsonBinaryWriter.cs", label="Entry Unk.nameof", span=""];
m2_90 [cluster="System.Convert.ToInt64(object, System.IFormatProvider)", file="BsonBinaryWriter.cs", label="Entry System.Convert.ToInt64(object, System.IFormatProvider)", span="0-0"];
m2_0 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.BsonBinaryWriter(System.IO.BinaryWriter)", file="BsonBinaryWriter.cs", label="Entry Newtonsoft.Json.Bson.BsonBinaryWriter.BsonBinaryWriter(System.IO.BinaryWriter)", span="43-43"];
m2_1 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.BsonBinaryWriter(System.IO.BinaryWriter)", file="BsonBinaryWriter.cs", label="DateTimeKindHandling = DateTimeKind.Utc", span="45-45"];
m2_2 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.BsonBinaryWriter(System.IO.BinaryWriter)", file="BsonBinaryWriter.cs", label="_writer = writer", span="46-46"];
m2_3 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.BsonBinaryWriter(System.IO.BinaryWriter)", file="BsonBinaryWriter.cs", label="Exit Newtonsoft.Json.Bson.BsonBinaryWriter.BsonBinaryWriter(System.IO.BinaryWriter)", span="43-43"];
m2_11 [cluster="System.IO.BinaryWriter.Close()", file="BsonBinaryWriter.cs", label="Entry System.IO.BinaryWriter.Close()", span="0-0"];
m2_7 [cluster="System.IO.BinaryWriter.Flush()", file="BsonBinaryWriter.cs", label="Entry System.IO.BinaryWriter.Flush()", span="0-0"];
m2_99 [cluster="System.IO.BinaryWriter.Write(byte[])", file="BsonBinaryWriter.cs", label="Entry System.IO.BinaryWriter.Write(byte[])", span="0-0"];
m2_8 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.Close()", file="BsonBinaryWriter.cs", label="Entry Newtonsoft.Json.Bson.BsonBinaryWriter.Close()", span="54-54"];
m2_9 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.Close()", file="BsonBinaryWriter.cs", label="_writer.Close()", span="57-57"];
m2_10 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.Close()", file="BsonBinaryWriter.cs", label="Exit Newtonsoft.Json.Bson.BsonBinaryWriter.Close()", span="54-54"];
m2_16 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="Entry Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", span="243-243"];
m2_128 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="t.Type", span="245-245"];
m2_130 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="BsonObject value = (BsonObject)t", span="249-249"];
m2_141 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="BsonArray value = (BsonArray)t", span="266-266"];
m2_159 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="BsonString value = (BsonString)t", span="290-290"];
m2_172 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="BsonBinary value = (BsonBinary)t", span="306-306"];
m2_179 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="BsonRegex value = (BsonRegex)t", span="317-317"];
m2_185 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="throw new ArgumentOutOfRangeException(nameof(t), ''Unexpected token when writing BSON: {0}''.FormatWith(CultureInfo.InvariantCulture, t.Type));", span="326-326"];
m2_129 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="BsonType.Object", span="247-247"];
m2_140 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="BsonType.Array", span="264-264"];
m2_152 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="BsonType.Integer", span="282-282"];
m2_154 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="BsonType.Long", span="284-284"];
m2_156 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="BsonType.Number", span="286-286"];
m2_158 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="BsonType.String", span="288-288"];
m2_164 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="BsonType.Boolean", span="297-297"];
m2_166 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="BsonType.Null", span="299-299"];
m2_169 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="BsonType.Date", span="302-302"];
m2_171 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="BsonType.Binary", span="304-304"];
m2_176 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="BsonType.Oid", span="313-313"];
m2_178 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="BsonType.Regex", span="315-315"];
m2_131 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="int bases = 4", span="251-251"];
m2_132 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label=value, span="252-252"];
m2_138 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="value.CalculatedSize = bases", span="261-261"];
m2_136 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="bases += size", span="258-258"];
m2_137 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="bases += 1", span="260-260"];
m2_133 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="int size = 1", span="254-254"];
m2_134 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="size += CalculateSize(p.Name)", span="255-255"];
m2_135 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="size += CalculateSize(p.Value)", span="256-256"];
m2_139 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="return bases;", span="262-262"];
m2_142 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="int size = 4", span="268-268"];
m2_144 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label=value, span="270-270"];
m2_150 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="value.CalculatedSize = size", span="278-278"];
m2_151 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="return value.CalculatedSize;", span="280-280"];
m2_143 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="ulong index = 0", span="269-269"];
m2_145 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="size += 1", span="272-272"];
m2_149 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="size += 1", span="277-277"];
m2_146 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="size += CalculateSize(MathUtils.IntLength(index))", span="273-273"];
m2_148 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="index++", span="275-275"];
m2_147 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="size += CalculateSize(c)", span="274-274"];
m2_153 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="return 4;", span="283-283"];
m2_155 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="return 8;", span="285-285"];
m2_157 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="return 8;", span="287-287"];
m2_160 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="string s = (string)value.Value", span="291-291"];
m2_161 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="value.ByteCount = (s != null) ? Encoding.GetByteCount(s) : 0", span="292-292"];
m2_162 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="value.CalculatedSize = CalculateSizeWithLength(value.ByteCount, value.IncludeLength)", span="293-293"];
m2_163 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="return value.CalculatedSize;", span="295-295"];
m2_165 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="return 1;", span="298-298"];
m2_167 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="BsonType.Undefined", span="300-300"];
m2_168 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="return 0;", span="301-301"];
m2_170 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="return 8;", span="303-303"];
m2_173 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="byte[] data = (byte[])value.Value", span="308-308"];
m2_174 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="value.CalculatedSize = 4 + 1 + data.Length", span="309-309"];
m2_175 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="return value.CalculatedSize;", span="311-311"];
m2_177 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="return 12;", span="314-314"];
m2_180 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="int size = 0", span="318-318"];
m2_181 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="size += CalculateSize(value.Pattern)", span="319-319"];
m2_182 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="size += CalculateSize(value.Options)", span="320-320"];
m2_183 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="value.CalculatedSize = size", span="321-321"];
m2_184 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="return value.CalculatedSize;", span="323-323"];
m2_186 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="Exit Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", span="243-243"];
m2_120 [cluster="System.Text.Encoding.GetBytes(string)", file="BsonBinaryWriter.cs", label="Entry System.Text.Encoding.GetBytes(string)", span="0-0"];
m2_92 [cluster="System.Convert.ToDouble(object, System.IFormatProvider)", file="BsonBinaryWriter.cs", label="Entry System.Convert.ToDouble(object, System.IFormatProvider)", span="0-0"];
m2_93 [cluster="System.IO.BinaryWriter.Write(double)", file="BsonBinaryWriter.cs", label="Entry System.IO.BinaryWriter.Write(double)", span="0-0"];
m2_17 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="Entry Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", span="69-69"];
m2_18 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="t.Type", span="71-71"];
m2_20 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="BsonObject value = (BsonObject)t", span="75-75"];
m2_28 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="BsonArray value = (BsonArray)t", span="88-88"];
m2_38 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="BsonValue value = (BsonValue)t", span="103-103"];
m2_41 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="BsonValue value = (BsonValue)t", span="109-109"];
m2_44 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="BsonValue value = (BsonValue)t", span="115-115"];
m2_47 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="BsonString value = (BsonString)t", span="121-121"];
m2_50 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="BsonValue value = (BsonValue)t", span="127-127"];
m2_55 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="BsonValue value = (BsonValue)t", span="136-136"];
m2_68 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="BsonBinary value = (BsonBinary)t", span="167-167"];
m2_74 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="BsonValue value = (BsonValue)t", span="177-177"];
m2_78 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="BsonRegex value = (BsonRegex)t", span="185-185"];
m2_81 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="throw new ArgumentOutOfRangeException(nameof(t), ''Unexpected token when writing BSON: {0}''.FormatWith(CultureInfo.InvariantCulture, t.Type));", span="192-192"];
m2_19 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="BsonType.Object", span="73-73"];
m2_27 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="BsonType.Array", span="86-86"];
m2_37 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="BsonType.Integer", span="101-101"];
m2_40 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="BsonType.Long", span="107-107"];
m2_43 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="BsonType.Number", span="113-113"];
m2_46 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="BsonType.String", span="119-119"];
m2_49 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="BsonType.Boolean", span="125-125"];
m2_52 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="BsonType.Null", span="131-131"];
m2_54 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="BsonType.Date", span="134-134"];
m2_67 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="BsonType.Binary", span="165-165"];
m2_73 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="BsonType.Oid", span="175-175"];
m2_77 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="BsonType.Regex", span="183-183"];
m2_21 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="_writer.Write(value.CalculatedSize)", span="76-76"];
m2_22 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label=value, span="77-77"];
m2_23 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="_writer.Write((sbyte)property.Value.Type)", span="79-79"];
m2_26 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="_writer.Write((byte)0)", span="83-83"];
m2_24 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="WriteString((string)property.Name.Value, property.Name.ByteCount, null)", span="80-80"];
m2_25 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="WriteTokenInternal(property.Value)", span="81-81"];
m2_29 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="_writer.Write(value.CalculatedSize)", span="89-89"];
m2_31 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label=value, span="91-91"];
m2_30 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="ulong index = 0", span="90-90"];
m2_33 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="WriteString(index.ToString(CultureInfo.InvariantCulture), MathUtils.IntLength(index), null)", span="94-94"];
m2_35 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="index++", span="96-96"];
m2_32 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="_writer.Write((sbyte)c.Type)", span="93-93"];
m2_36 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="_writer.Write((byte)0)", span="98-98"];
m2_34 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="WriteTokenInternal(c)", span="95-95"];
m2_39 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="_writer.Write(Convert.ToInt32(value.Value, CultureInfo.InvariantCulture))", span="104-104"];
m2_42 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="_writer.Write(Convert.ToInt64(value.Value, CultureInfo.InvariantCulture))", span="110-110"];
m2_45 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="_writer.Write(Convert.ToDouble(value.Value, CultureInfo.InvariantCulture))", span="116-116"];
m2_48 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="WriteString((string)value.Value, value.ByteCount, value.CalculatedSize - 4)", span="122-122"];
m2_51 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="_writer.Write((bool)value.Value)", span="128-128"];
m2_53 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="BsonType.Undefined", span="132-132"];
m2_56 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="long ticks = 0", span="138-138"];
m2_57 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="value.Value is DateTime", span="140-140"];
m2_58 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="DateTime dateTime = (DateTime)value.Value", span="142-142"];
m2_64 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="DateTimeOffset dateTimeOffset = (DateTimeOffset)value.Value", span="157-157"];
m2_59 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="DateTimeKindHandling == DateTimeKind.Utc", span="143-143"];
m2_60 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="dateTime = dateTime.ToUniversalTime()", span="145-145"];
m2_62 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="dateTime = dateTime.ToLocalTime()", span="149-149"];
m2_63 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="ticks = DateTimeUtils.ConvertDateTimeToJavaScriptTicks(dateTime, false)", span="152-152"];
m2_61 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="DateTimeKindHandling == DateTimeKind.Local", span="147-147"];
m2_65 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="ticks = DateTimeUtils.ConvertDateTimeToJavaScriptTicks(dateTimeOffset.UtcDateTime, dateTimeOffset.Offset)", span="158-158"];
m2_66 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="_writer.Write(ticks)", span="162-162"];
m2_69 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="byte[] data = (byte[])value.Value", span="169-169"];
m2_71 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="_writer.Write((byte)value.BinaryType)", span="171-171"];
m2_70 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="_writer.Write(data.Length)", span="170-170"];
m2_72 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="_writer.Write(data)", span="172-172"];
m2_75 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="byte[] data = (byte[])value.Value", span="179-179"];
m2_76 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="_writer.Write(data)", span="180-180"];
m2_79 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="WriteString((string)value.Pattern.Value, value.Pattern.ByteCount, null)", span="187-187"];
m2_80 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="WriteString((string)value.Options.Value, value.Options.ByteCount, null)", span="188-188"];
m2_82 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="BsonBinaryWriter.cs", label="Exit Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", span="69-69"];
m2_85 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteString(string, int, int?)", file="BsonBinaryWriter.cs", label="Entry Newtonsoft.Json.Bson.BsonBinaryWriter.WriteString(string, int, int?)", span="196-196"];
m2_103 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteString(string, int, int?)", file="BsonBinaryWriter.cs", label="calculatedlengthPrefix != null", span="198-198"];
m2_104 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteString(string, int, int?)", color=green, community=0, file="BsonBinaryWriter.cs", label="_writer.Write(calculatedlengthPrefix.Value)", prediction=3, span="200-200"];
m2_105 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteString(string, int, int?)", file="BsonBinaryWriter.cs", label="WriteUtf8Bytes(s, byteCount)", span="203-203"];
m2_106 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteString(string, int, int?)", file="BsonBinaryWriter.cs", label="_writer.Write((byte)0)", span="205-205"];
m2_107 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteString(string, int, int?)", file="BsonBinaryWriter.cs", label="Exit Newtonsoft.Json.Bson.BsonBinaryWriter.WriteString(string, int, int?)", span="196-196"];
m2_87 [cluster="ulong.ToString(System.IFormatProvider)", file="BsonBinaryWriter.cs", label="Entry ulong.ToString(System.IFormatProvider)", span="0-0"];
m2_84 [cluster="System.IO.BinaryWriter.Write(sbyte)", file="BsonBinaryWriter.cs", label="Entry System.IO.BinaryWriter.Write(sbyte)", span="0-0"];
m2_188 [file="BsonBinaryWriter.cs", label="Newtonsoft.Json.Bson.BsonBinaryWriter", span=""];
m3_20 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.MultiplePropertiesAndIndexers()", file="JavaScriptDateTimeConverter.cs", label="JPath path = new JPath(''Blah[0].Two.Three[1].Four'')", span="75-75"];
m3_29 [cluster="Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="JavaScriptDateTimeConverter.cs", label="throw JsonSerializationException.Create(reader, ''Unexpected token or value when parsing date. Token: {0}, Value: {1}''.FormatWith(CultureInfo.InvariantCulture, reader.TokenType, reader.Value));", span="98-98"];
m3_30 [cluster="Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="JavaScriptDateTimeConverter.cs", label="reader.Read()", span="101-101"];
m3_31 [cluster="Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="JavaScriptDateTimeConverter.cs", label="reader.TokenType != JsonToken.Integer", span="103-103"];
m3_69 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.AdjacentIndexers()", file="JavaScriptDateTimeConverter.cs", label="Entry Newtonsoft.Json.Tests.Linq.JPathTests.AdjacentIndexers()", span="151-151"];
m3_71 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.AdjacentIndexers()", file="JavaScriptDateTimeConverter.cs", label="Assert.AreEqual(4, path.Parts.Count)", span="154-154"];
m3_72 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.AdjacentIndexers()", file="JavaScriptDateTimeConverter.cs", label="Assert.AreEqual(1, path.Parts[0])", span="155-155"];
m3_73 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.AdjacentIndexers()", file="JavaScriptDateTimeConverter.cs", label="Assert.AreEqual(0, path.Parts[1])", span="156-156"];
m3_74 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.AdjacentIndexers()", file="JavaScriptDateTimeConverter.cs", label="Assert.AreEqual(0, path.Parts[2])", span="157-157"];
m3_75 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.AdjacentIndexers()", file="JavaScriptDateTimeConverter.cs", label="Assert.AreEqual(int.MaxValue, path.Parts[3])", span="158-158"];
m3_70 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.AdjacentIndexers()", file="JavaScriptDateTimeConverter.cs", label="JPath path = new JPath(''[1][0][0]['' + int.MaxValue + '']'')", span="153-153"];
m3_76 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.AdjacentIndexers()", file="JavaScriptDateTimeConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JPathTests.AdjacentIndexers()", span="151-151"];
m3_146 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateArrayOutOfBoundsIndxerWithError()", file="JavaScriptDateTimeConverter.cs", label="Entry Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateArrayOutOfBoundsIndxerWithError()", span="277-277"];
m3_147 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateArrayOutOfBoundsIndxerWithError()", file="JavaScriptDateTimeConverter.cs", label="JArray a = new JArray(1, 2, 3, 4, 5)", span="279-279"];
m3_148 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateArrayOutOfBoundsIndxerWithError()", file="JavaScriptDateTimeConverter.cs", label="ExceptionAssert.Throws<IndexOutOfRangeException>(\r\n        ''Index 1000 outside the bounds of JArray.'',\r\n        () =>\r\n        {\r\n          a.SelectToken(''[1000].Ha'', true);\r\n        })", span="281-286"];
m3_149 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateArrayOutOfBoundsIndxerWithError()", file="JavaScriptDateTimeConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateArrayOutOfBoundsIndxerWithError()", span="277-277"];
m3_19 [cluster="Newtonsoft.Json.JsonWriter.WriteStartConstructor(string)", file="JavaScriptDateTimeConverter.cs", label="Entry Newtonsoft.Json.JsonWriter.WriteStartConstructor(string)", span="439-439"];
m3_21 [cluster="Newtonsoft.Json.JsonWriter.WriteEndConstructor()", file="JavaScriptDateTimeConverter.cs", label="Entry Newtonsoft.Json.JsonWriter.WriteEndConstructor()", span="447-447"];
m3_22 [cluster="Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="JavaScriptDateTimeConverter.cs", label="Entry Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", span="78-78"];
m3_24 [cluster="Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="JavaScriptDateTimeConverter.cs", label="reader.TokenType == JsonToken.Null", span="86-86"];
m3_25 [cluster="Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="JavaScriptDateTimeConverter.cs", label="!ReflectionUtils.IsNullable(objectType)", span="88-88"];
m3_26 [cluster="Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="JavaScriptDateTimeConverter.cs", label="throw JsonSerializationException.Create(reader, ''Cannot convert null value to {0}.''.FormatWith(CultureInfo.InvariantCulture, objectType));", span="90-90"];
m3_27 [cluster="Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="JavaScriptDateTimeConverter.cs", label="return null;", span="93-93"];
m3_28 [cluster="Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="JavaScriptDateTimeConverter.cs", label="reader.TokenType != JsonToken.StartConstructor || !string.Equals(reader.Value.ToString(), ''Date'', StringComparison.Ordinal)", span="96-96"];
m3_141 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateOutOfBoundsIndxer()", file="JavaScriptDateTimeConverter.cs", label="Entry Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateOutOfBoundsIndxer()", span="268-268"];
m3_143 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateOutOfBoundsIndxer()", file="JavaScriptDateTimeConverter.cs", label="JToken t = a.SelectToken(''[1000].Ha'')", span="272-272"];
m3_142 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateOutOfBoundsIndxer()", file="JavaScriptDateTimeConverter.cs", label="JArray a = new JArray(1, 2, 3, 4, 5)", span="270-270"];
m3_144 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateOutOfBoundsIndxer()", file="JavaScriptDateTimeConverter.cs", label="Assert.IsNull(t)", span="273-273"];
m3_145 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateOutOfBoundsIndxer()", file="JavaScriptDateTimeConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateOutOfBoundsIndxer()", span="268-268"];
m3_77 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.MissingDotAfterIndexer()", file="JavaScriptDateTimeConverter.cs", label="Entry Newtonsoft.Json.Tests.Linq.JPathTests.MissingDotAfterIndexer()", span="162-162"];
m3_78 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.MissingDotAfterIndexer()", file="JavaScriptDateTimeConverter.cs", label="ExceptionAssert.Throws<JsonException>(\r\n        ''Unexpected character following indexer: B'',\r\n        () =>\r\n        {\r\n          new JPath(''[1]Blah'');\r\n        })", span="164-169"];
m3_79 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.MissingDotAfterIndexer()", file="JavaScriptDateTimeConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JPathTests.MissingDotAfterIndexer()", span="162-162"];
m3_32 [cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(string, System.Action)", file="JavaScriptDateTimeConverter.cs", label="Entry Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(string, System.Action)", span="121-121"];
m3_33 [cluster="lambda expression", file="JavaScriptDateTimeConverter.cs", label="Entry lambda expression", span="90-93"];
m3_35 [cluster="lambda expression", file="JavaScriptDateTimeConverter.cs", label="Exit lambda expression", span="90-93"];
m3_36 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.UnclosedIndexer()", file="JavaScriptDateTimeConverter.cs", label="Entry Newtonsoft.Json.Tests.Linq.JPathTests.UnclosedIndexer()", span="97-97"];
m3_37 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.UnclosedIndexer()", file="JavaScriptDateTimeConverter.cs", label="ExceptionAssert.Throws<JsonException>(\r\n        @''Path ended with open indexer. Expected ]'',\r\n        () =>\r\n        {\r\n          new JPath(''Blah[0'');\r\n        })", span="99-104"];
m3_38 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.UnclosedIndexer()", file="JavaScriptDateTimeConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JPathTests.UnclosedIndexer()", span="97-97"];
m3_34 [cluster="lambda expression", file="JavaScriptDateTimeConverter.cs", label="new JPath(''Blah[[0]].Two.Three[1].Four'')", span="92-92"];
m3_39 [cluster="lambda expression", file="JavaScriptDateTimeConverter.cs", label="Entry lambda expression", span="101-104"];
m3_40 [cluster="lambda expression", file="JavaScriptDateTimeConverter.cs", label="new JPath(''Blah[0'')", span="103-103"];
m3_41 [cluster="lambda expression", file="JavaScriptDateTimeConverter.cs", label="Exit lambda expression", span="101-104"];
m3_91 [cluster="Newtonsoft.Json.Linq.JProperty.JProperty(string, object)", file="JavaScriptDateTimeConverter.cs", label="Entry Newtonsoft.Json.Linq.JProperty.JProperty(string, object)", span="192-192"];
m3_46 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.AdditionalDots()", file="JavaScriptDateTimeConverter.cs", label="Assert.AreEqual(0, path.Parts[1])", span="113-113"];
m3_175 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.PathWithConstructor()", file="JavaScriptDateTimeConverter.cs", label="Entry Newtonsoft.Json.Tests.Linq.JPathTests.PathWithConstructor()", span="325-325"];
m3_178 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.PathWithConstructor()", file="JavaScriptDateTimeConverter.cs", label="Assert.AreEqual(1L, v.Value)", span="349-349"];
m3_177 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.PathWithConstructor()", file="JavaScriptDateTimeConverter.cs", label="JValue v = (JValue)a.SelectToken(''[1].Property2[1][0]'')", span="348-348"];
m3_176 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.PathWithConstructor()", file="JavaScriptDateTimeConverter.cs", label="JArray a = JArray.Parse(@''[\r\n  {\r\n    ''''Property1'''': [\r\n      1,\r\n      [\r\n        [\r\n          []\r\n        ]\r\n      ]\r\n    ]\r\n  },\r\n  {\r\n    ''''Property2'''': new Constructor1(\r\n      null,\r\n      [\r\n        1\r\n      ]\r\n    )\r\n  }\r\n]'')", span="327-346"];
m3_179 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.PathWithConstructor()", file="JavaScriptDateTimeConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JPathTests.PathWithConstructor()", span="325-325"];
m3_94 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateMissingProperty()", file="JavaScriptDateTimeConverter.cs", label="Entry Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateMissingProperty()", span="185-185"];
m3_96 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateMissingProperty()", file="JavaScriptDateTimeConverter.cs", label="JToken t = o.SelectToken(''Missing[1]'')", span="190-190"];
m3_95 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateMissingProperty()", file="JavaScriptDateTimeConverter.cs", label="JObject o = new JObject(\r\n        new JProperty(''Blah'', 1))", span="187-188"];
m3_97 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateMissingProperty()", file="JavaScriptDateTimeConverter.cs", label="Assert.IsNull(t)", span="191-191"];
m3_98 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateMissingProperty()", file="JavaScriptDateTimeConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateMissingProperty()", span="185-185"];
m3_15 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.SinglePropertyAndIndexer()", file="JavaScriptDateTimeConverter.cs", label="Assert.AreEqual(2, path.Parts.Count)", span="67-67"];
m3_92 [cluster="Newtonsoft.Json.Linq.JToken.SelectToken(string)", file="JavaScriptDateTimeConverter.cs", label="Entry Newtonsoft.Json.Linq.JToken.SelectToken(string)", span="1867-1867"];
m3_90 [cluster="Newtonsoft.Json.Linq.JObject.JObject(object)", file="JavaScriptDateTimeConverter.cs", label="Entry Newtonsoft.Json.Linq.JObject.JObject(object)", span="113-113"];
m3_174 [cluster="Newtonsoft.Json.Linq.JObject.Parse(string)", file="JavaScriptDateTimeConverter.cs", label="Entry Newtonsoft.Json.Linq.JObject.Parse(string)", span="325-325"];
m3_47 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.AdditionalDots()", color=green, community=0, file="JavaScriptDateTimeConverter.cs", label="Assert.AreEqual(''Two'', path.Parts[2])", prediction=4, span="114-114"];
m3_5 [cluster="Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", file="JavaScriptDateTimeConverter.cs", label="ticks = DateTimeUtils.ConvertDateTimeToJavaScriptTicks(utcDateTime)", span="50-50"];
m3_57 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EmptyIndexer()", file="JavaScriptDateTimeConverter.cs", label="Entry Newtonsoft.Json.Tests.Linq.JPathTests.EmptyIndexer()", span="129-129"];
m3_58 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EmptyIndexer()", file="JavaScriptDateTimeConverter.cs", label="ExceptionAssert.Throws<JsonException>(\r\n        ''Empty path indexer.'',\r\n        () =>\r\n        {\r\n          new JPath(''[]'');\r\n        })", span="131-136"];
m3_59 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EmptyIndexer()", file="JavaScriptDateTimeConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JPathTests.EmptyIndexer()", span="129-129"];
m3_119 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluatePropertyOnArrayWithError()", file="JavaScriptDateTimeConverter.cs", label="Entry Newtonsoft.Json.Tests.Linq.JPathTests.EvaluatePropertyOnArrayWithError()", span="228-228"];
m3_120 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluatePropertyOnArrayWithError()", file="JavaScriptDateTimeConverter.cs", label="JArray a = new JArray(1, 2, 3, 4, 5)", span="230-230"];
m3_121 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluatePropertyOnArrayWithError()", file="JavaScriptDateTimeConverter.cs", label="ExceptionAssert.Throws<JsonException>(\r\n        @''Property 'BlahBlah' not valid on JArray.'',\r\n        () =>\r\n        {\r\n          a.SelectToken(''BlahBlah'', true);\r\n        })", span="232-237"];
m3_122 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluatePropertyOnArrayWithError()", file="JavaScriptDateTimeConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JPathTests.EvaluatePropertyOnArrayWithError()", span="228-228"];
m3_99 [cluster="Unk.IsNull", file="JavaScriptDateTimeConverter.cs", label="Entry Unk.IsNull", span=""];
m3_16 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.SinglePropertyAndIndexer()", file="JavaScriptDateTimeConverter.cs", label="Assert.AreEqual(''Blah'', path.Parts[0])", span="68-68"];
m3_6 [cluster="Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", file="JavaScriptDateTimeConverter.cs", label="value is DateTimeOffset", span="53-53"];
m3_51 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.AdditionalDots()", file="JavaScriptDateTimeConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JPathTests.AdditionalDots()", span="108-108"];
m3_113 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluatePropertyOnArray()", file="JavaScriptDateTimeConverter.cs", label="Entry Newtonsoft.Json.Tests.Linq.JPathTests.EvaluatePropertyOnArray()", span="219-219"];
m3_115 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluatePropertyOnArray()", file="JavaScriptDateTimeConverter.cs", label="JToken t = a.SelectToken(''BlahBlah'')", span="223-223"];
m3_114 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluatePropertyOnArray()", file="JavaScriptDateTimeConverter.cs", label="JArray a = new JArray(1, 2, 3, 4, 5)", span="221-221"];
m3_116 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluatePropertyOnArray()", file="JavaScriptDateTimeConverter.cs", label="Assert.IsNull(t)", span="224-224"];
m3_117 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluatePropertyOnArray()", file="JavaScriptDateTimeConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JPathTests.EvaluatePropertyOnArray()", span="219-219"];
m3_52 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.IndexerOnly()", file="JavaScriptDateTimeConverter.cs", label="Entry Newtonsoft.Json.Tests.Linq.JPathTests.IndexerOnly()", span="121-121"];
m3_42 [cluster="Newtonsoft.Json.Utilities.ReflectionUtils.IsNullableType(System.Type)", file="JavaScriptDateTimeConverter.cs", label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.IsNullableType(System.Type)", span="267-267"];
m3_43 [cluster="System.Nullable.GetUnderlyingType(System.Type)", file="JavaScriptDateTimeConverter.cs", label="Entry System.Nullable.GetUnderlyingType(System.Type)", span="0-0"];
m3_48 [cluster="string.Equals(string, string, System.StringComparison)", color=green, community=0, file="JavaScriptDateTimeConverter.cs", label="Entry string.Equals(string, string, System.StringComparison)", prediction=5, span="0-0"];
m3_49 [cluster="string.FormatWith(System.IFormatProvider, object, object)", color=green, community=0, file="JavaScriptDateTimeConverter.cs", label="Entry string.FormatWith(System.IFormatProvider, object, object)", prediction=6, span="52-52"];
m3_50 [cluster="Newtonsoft.Json.JsonReader.Read()", file="JavaScriptDateTimeConverter.cs", label="Entry Newtonsoft.Json.JsonReader.Read()", span="409-409"];
m3_44 [cluster="Newtonsoft.Json.Utilities.ReflectionUtils.IsNullable(System.Type)", file="JavaScriptDateTimeConverter.cs", label="Entry Newtonsoft.Json.Utilities.ReflectionUtils.IsNullable(System.Type)", span="255-255"];
m3_45 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.AdditionalDots()", file="JavaScriptDateTimeConverter.cs", label="Assert.AreEqual(''Blah'', path.Parts[0])", span="112-112"];
m3_169 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateLastSingleCharacterProperty()", file="JavaScriptDateTimeConverter.cs", label="Entry Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateLastSingleCharacterProperty()", span="316-316"];
m3_172 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateLastSingleCharacterProperty()", file="JavaScriptDateTimeConverter.cs", label="Assert.AreEqual(''Jeff'', a2)", span="321-321"];
m3_171 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateLastSingleCharacterProperty()", file="JavaScriptDateTimeConverter.cs", label="string a2 = (string)o2.SelectToken(''People[0].N'')", span="319-319"];
m3_170 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateLastSingleCharacterProperty()", file="JavaScriptDateTimeConverter.cs", label="JObject o2 = JObject.Parse(''{'People':[{'N':'Jeff'}]}'')", span="318-318"];
m3_173 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateLastSingleCharacterProperty()", file="JavaScriptDateTimeConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateLastSingleCharacterProperty()", span="316-316"];
m3_83 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateSingleProperty()", file="JavaScriptDateTimeConverter.cs", label="Entry Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateSingleProperty()", span="173-173"];
m3_87 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateSingleProperty()", file="JavaScriptDateTimeConverter.cs", label="Assert.AreEqual(JTokenType.Integer, t.Type)", span="180-180"];
m3_88 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateSingleProperty()", file="JavaScriptDateTimeConverter.cs", label="Assert.AreEqual(1, (int)t)", span="181-181"];
m3_85 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateSingleProperty()", file="JavaScriptDateTimeConverter.cs", label="JToken t = o.SelectToken(''Blah'')", span="178-178"];
m3_86 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateSingleProperty()", file="JavaScriptDateTimeConverter.cs", label="Assert.IsNotNull(t)", span="179-179"];
m3_84 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateSingleProperty()", file="JavaScriptDateTimeConverter.cs", label="JObject o = new JObject(\r\n        new JProperty(''Blah'', 1))", span="175-176"];
m3_89 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateSingleProperty()", file="JavaScriptDateTimeConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateSingleProperty()", span="173-173"];
m3_150 [cluster="lambda expression", file="JavaScriptDateTimeConverter.cs", label="Entry lambda expression", span="283-286"];
m3_61 [cluster="lambda expression", file="JavaScriptDateTimeConverter.cs", label="new JPath(''[]'')", span="135-135"];
m3_67 [cluster="lambda expression", file="JavaScriptDateTimeConverter.cs", label="new JPath('']'')", span="146-146"];
m3_81 [cluster="lambda expression", file="JavaScriptDateTimeConverter.cs", label="new JPath(''[1]Blah'')", span="168-168"];
m3_60 [cluster="lambda expression", file="JavaScriptDateTimeConverter.cs", label="Entry lambda expression", span="133-136"];
m3_62 [cluster="lambda expression", file="JavaScriptDateTimeConverter.cs", label="Exit lambda expression", span="133-136"];
m3_66 [cluster="lambda expression", file="JavaScriptDateTimeConverter.cs", label="Entry lambda expression", span="144-147"];
m3_68 [cluster="lambda expression", file="JavaScriptDateTimeConverter.cs", label="Exit lambda expression", span="144-147"];
m3_80 [cluster="lambda expression", file="JavaScriptDateTimeConverter.cs", label="Entry lambda expression", span="166-169"];
m3_82 [cluster="lambda expression", file="JavaScriptDateTimeConverter.cs", label="Exit lambda expression", span="166-169"];
m3_203 [cluster="lambda expression", file="JavaScriptDateTimeConverter.cs", label="Entry lambda expression", span="400-400"];
m3_209 [cluster="lambda expression", file="JavaScriptDateTimeConverter.cs", label="Entry lambda expression", span="408-408"];
m3_206 [cluster="lambda expression", file="JavaScriptDateTimeConverter.cs", label="Entry lambda expression", span="404-404"];
m3_207 [cluster="lambda expression", file="JavaScriptDateTimeConverter.cs", label="(string)m.SelectToken(''Products[1].Name'')", span="404-404"];
m3_210 [cluster="lambda expression", file="JavaScriptDateTimeConverter.cs", label="(decimal)m.SelectToken(''Products[0].Price'')", span="408-408"];
m3_205 [cluster="lambda expression", file="JavaScriptDateTimeConverter.cs", label="Exit lambda expression", span="400-400"];
m3_204 [cluster="lambda expression", file="JavaScriptDateTimeConverter.cs", label="(string)s", span="400-400"];
m3_211 [cluster="lambda expression", file="JavaScriptDateTimeConverter.cs", label="Exit lambda expression", span="408-408"];
m3_208 [cluster="lambda expression", file="JavaScriptDateTimeConverter.cs", label="Exit lambda expression", span="404-404"];
m3_110 [cluster="lambda expression", file="JavaScriptDateTimeConverter.cs", label="o.SelectToken(''[1]'', true)", span="214-214"];
m3_139 [cluster="lambda expression", file="JavaScriptDateTimeConverter.cs", label="o.SelectToken(''Missing'', true)", span="263-263"];
m3_124 [cluster="lambda expression", file="JavaScriptDateTimeConverter.cs", label="a.SelectToken(''BlahBlah'', true)", span="236-236"];
m3_151 [cluster="lambda expression", file="JavaScriptDateTimeConverter.cs", label="a.SelectToken(''[1000].Ha'', true)", span="285-285"];
m3_109 [cluster="lambda expression", file="JavaScriptDateTimeConverter.cs", label="Entry lambda expression", span="212-215"];
m3_123 [cluster="lambda expression", file="JavaScriptDateTimeConverter.cs", label="Entry lambda expression", span="234-237"];
m3_131 [cluster="lambda expression", file="JavaScriptDateTimeConverter.cs", label="Entry lambda expression", span="247-250"];
m3_138 [cluster="lambda expression", file="JavaScriptDateTimeConverter.cs", label="Entry lambda expression", span="261-264"];
m3_111 [cluster="lambda expression", file="JavaScriptDateTimeConverter.cs", label="Exit lambda expression", span="212-215"];
m3_140 [cluster="lambda expression", file="JavaScriptDateTimeConverter.cs", label="Exit lambda expression", span="261-264"];
m3_125 [cluster="lambda expression", file="JavaScriptDateTimeConverter.cs", label="Exit lambda expression", span="234-237"];
m3_152 [cluster="lambda expression", file="JavaScriptDateTimeConverter.cs", label="Exit lambda expression", span="283-286"];
m3_132 [cluster="lambda expression", file="JavaScriptDateTimeConverter.cs", label="c.SelectToken(''[1]'', true)", span="249-249"];
m3_133 [cluster="lambda expression", file="JavaScriptDateTimeConverter.cs", label="Exit lambda expression", span="247-250"];
m3_202 [cluster="System.Collections.Generic.IEnumerable<TSource>.Sum<TSource>(System.Func<TSource, decimal>)", file="JavaScriptDateTimeConverter.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Sum<TSource>(System.Func<TSource, decimal>)", span="0-0"];
m3_180 [cluster="Newtonsoft.Json.Linq.JArray.Parse(string)", file="JavaScriptDateTimeConverter.cs", label="Entry Newtonsoft.Json.Linq.JArray.Parse(string)", span="143-143"];
m3_105 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateIndexerOnObjectWithError()", file="JavaScriptDateTimeConverter.cs", label="Entry Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateIndexerOnObjectWithError()", span="205-205"];
m3_106 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateIndexerOnObjectWithError()", file="JavaScriptDateTimeConverter.cs", label="JObject o = new JObject(\r\n        new JProperty(''Blah'', 1))", span="207-208"];
m3_107 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateIndexerOnObjectWithError()", file="JavaScriptDateTimeConverter.cs", label="ExceptionAssert.Throws<JsonException>(\r\n        @''Index 1 not valid on JObject.'',\r\n        () =>\r\n        {\r\n          o.SelectToken(''[1]'', true);\r\n        })", span="210-215"];
m3_108 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateIndexerOnObjectWithError()", file="JavaScriptDateTimeConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateIndexerOnObjectWithError()", span="205-205"];
m3_134 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateMissingPropertyWithError()", file="JavaScriptDateTimeConverter.cs", label="Entry Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateMissingPropertyWithError()", span="254-254"];
m3_135 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateMissingPropertyWithError()", file="JavaScriptDateTimeConverter.cs", label="JObject o = new JObject(\r\n        new JProperty(''Blah'', 1))", span="256-257"];
m3_136 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateMissingPropertyWithError()", file="JavaScriptDateTimeConverter.cs", label="ExceptionAssert.Throws<JsonException>(\r\n        ''Property 'Missing' does not exist on JObject.'',\r\n        () =>\r\n        {\r\n          o.SelectToken(''Missing'', true);\r\n        })", span="259-264"];
m3_137 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateMissingPropertyWithError()", file="JavaScriptDateTimeConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateMissingPropertyWithError()", span="254-254"];
m3_126 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateConstructorOutOfBoundsIndxerWithError()", file="JavaScriptDateTimeConverter.cs", label="Entry Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateConstructorOutOfBoundsIndxerWithError()", span="241-241"];
m3_128 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateConstructorOutOfBoundsIndxerWithError()", file="JavaScriptDateTimeConverter.cs", label="ExceptionAssert.Throws<IndexOutOfRangeException>(\r\n        @''Index 1 outside the bounds of JConstructor.'',\r\n        () =>\r\n        {\r\n          c.SelectToken(''[1]'', true);\r\n        })", span="245-250"];
m3_127 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateConstructorOutOfBoundsIndxerWithError()", file="JavaScriptDateTimeConverter.cs", label="JConstructor c = new JConstructor(''Blah'')", span="243-243"];
m3_129 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateConstructorOutOfBoundsIndxerWithError()", file="JavaScriptDateTimeConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateConstructorOutOfBoundsIndxerWithError()", span="241-241"];
m3_201 [cluster="Unk.ToList", file="JavaScriptDateTimeConverter.cs", label="Entry Unk.ToList", span=""];
m3_13 [cluster="Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", file="JavaScriptDateTimeConverter.cs", label="writer.WriteEndConstructor()", span="67-67"];
m3_17 [cluster="System.DateTimeOffset.ToUniversalTime()", file="JavaScriptDateTimeConverter.cs", label="Entry System.DateTimeOffset.ToUniversalTime()", span="0-0"];
m3_14 [cluster="Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", file="JavaScriptDateTimeConverter.cs", label="Exit Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", span="42-42"];
m3_18 [cluster="Newtonsoft.Json.JsonSerializationException.JsonSerializationException(string)", file="JavaScriptDateTimeConverter.cs", label="Entry Newtonsoft.Json.JsonSerializationException.JsonSerializationException(string)", span="52-52"];
m3_153 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateArray()", file="JavaScriptDateTimeConverter.cs", label="Entry Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateArray()", span="290-290"];
m3_157 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateArray()", file="JavaScriptDateTimeConverter.cs", label="Assert.AreEqual(JTokenType.Integer, t.Type)", span="296-296"];
m3_158 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateArray()", file="JavaScriptDateTimeConverter.cs", label="Assert.AreEqual(2, (int)t)", span="297-297"];
m3_155 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateArray()", file="JavaScriptDateTimeConverter.cs", label="JToken t = a.SelectToken(''[1]'')", span="294-294"];
m3_156 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateArray()", file="JavaScriptDateTimeConverter.cs", label="Assert.IsNotNull(t)", span="295-295"];
m3_154 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateArray()", file="JavaScriptDateTimeConverter.cs", label="JArray a = new JArray(1, 2, 3, 4)", span="292-292"];
m3_159 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateArray()", file="JavaScriptDateTimeConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateArray()", span="290-290"];
m3_0 [cluster="Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", file="JavaScriptDateTimeConverter.cs", label="Entry Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", span="42-42"];
m3_2 [cluster="Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", file="JavaScriptDateTimeConverter.cs", label="value is DateTime", span="46-46"];
m3_3 [cluster="Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", file="JavaScriptDateTimeConverter.cs", label="DateTime dateTime = (DateTime)value", span="48-48"];
m3_1 [cluster="Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", file="JavaScriptDateTimeConverter.cs", label="long ticks", span="44-44"];
m3_4 [cluster="Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter, object, Newtonsoft.Json.JsonSerializer)", file="JavaScriptDateTimeConverter.cs", label="DateTime utcDateTime = dateTime.ToUniversalTime()", span="49-49"];
m3_54 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.IndexerOnly()", file="JavaScriptDateTimeConverter.cs", label="Assert.AreEqual(1, path.Parts.Count)", span="124-124"];
m3_55 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.IndexerOnly()", file="JavaScriptDateTimeConverter.cs", label="Assert.AreEqual(111119990, path.Parts[0])", span="125-125"];
m3_53 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.IndexerOnly()", file="JavaScriptDateTimeConverter.cs", label="JPath path = new JPath(''[111119990]'')", span="123-123"];
m3_56 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.IndexerOnly()", file="JavaScriptDateTimeConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JPathTests.IndexerOnly()", span="121-121"];
m3_118 [cluster="Newtonsoft.Json.Linq.JArray.JArray(params object[])", file="JavaScriptDateTimeConverter.cs", label="Entry Newtonsoft.Json.Linq.JArray.JArray(params object[])", span="81-81"];
m3_7 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.TwoProperties()", file="JavaScriptDateTimeConverter.cs", label="Entry Newtonsoft.Json.Tests.Linq.JPathTests.TwoProperties()", span="55-55"];
m3_11 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.TwoProperties()", file="JavaScriptDateTimeConverter.cs", label="Assert.AreEqual(''Two'', path.Parts[1])", span="60-60"];
m3_12 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.TwoProperties()", file="JavaScriptDateTimeConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JPathTests.TwoProperties()", span="55-55"];
m3_10 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.TwoProperties()", file="JavaScriptDateTimeConverter.cs", label="Assert.AreEqual(''Blah'', path.Parts[0])", span="59-59"];
m3_8 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.TwoProperties()", file="JavaScriptDateTimeConverter.cs", label="JPath path = new JPath(''Blah.Two'')", span="57-57"];
m3_9 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.TwoProperties()", file="JavaScriptDateTimeConverter.cs", label="Assert.AreEqual(2, path.Parts.Count)", span="58-58"];
m3_160 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateSinglePropertyReturningArray()", file="JavaScriptDateTimeConverter.cs", label="Entry Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateSinglePropertyReturningArray()", span="301-301"];
m3_164 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateSinglePropertyReturningArray()", file="JavaScriptDateTimeConverter.cs", label="Assert.AreEqual(JTokenType.Array, t.Type)", span="308-308"];
m3_166 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateSinglePropertyReturningArray()", file="JavaScriptDateTimeConverter.cs", label="Assert.AreEqual(JTokenType.Integer, t.Type)", span="311-311"];
m3_167 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateSinglePropertyReturningArray()", file="JavaScriptDateTimeConverter.cs", label="Assert.AreEqual(3, (int)t)", span="312-312"];
m3_162 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateSinglePropertyReturningArray()", file="JavaScriptDateTimeConverter.cs", label="JToken t = o.SelectToken(''Blah'')", span="306-306"];
m3_163 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateSinglePropertyReturningArray()", file="JavaScriptDateTimeConverter.cs", label="Assert.IsNotNull(t)", span="307-307"];
m3_165 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateSinglePropertyReturningArray()", file="JavaScriptDateTimeConverter.cs", label="t = o.SelectToken(''Blah[2]'')", span="310-310"];
m3_161 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateSinglePropertyReturningArray()", file="JavaScriptDateTimeConverter.cs", label="JObject o = new JObject(\r\n        new JProperty(''Blah'', new [] { 1, 2, 3 }))", span="303-304"];
m3_168 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateSinglePropertyReturningArray()", file="JavaScriptDateTimeConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateSinglePropertyReturningArray()", span="301-301"];
m3_181 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.Example()", file="JavaScriptDateTimeConverter.cs", label="Entry Newtonsoft.Json.Tests.Linq.JPathTests.Example()", span="354-354"];
m3_186 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.Example()", file="JavaScriptDateTimeConverter.cs", label="Assert.AreEqual(''Acme Co'', name)", span="396-396"];
m3_187 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.Example()", file="JavaScriptDateTimeConverter.cs", label="Assert.AreEqual(50m, productPrice)", span="397-397"];
m3_188 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.Example()", file="JavaScriptDateTimeConverter.cs", label="Assert.AreEqual(''Elbow Grease'', productName)", span="398-398"];
m3_192 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.Example()", file="JavaScriptDateTimeConverter.cs", label="Assert.AreEqual(2, storeNames.Count)", span="411-411"];
m3_193 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.Example()", file="JavaScriptDateTimeConverter.cs", label="Assert.AreEqual(''Lambton Quay'', storeNames[0])", span="412-412"];
m3_194 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.Example()", file="JavaScriptDateTimeConverter.cs", label="Assert.AreEqual(''Willis Street'', storeNames[1])", span="413-413"];
m3_195 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.Example()", file="JavaScriptDateTimeConverter.cs", label="Assert.AreEqual(2, firstProductNames.Count)", span="414-414"];
m3_196 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.Example()", file="JavaScriptDateTimeConverter.cs", label="Assert.AreEqual(null, firstProductNames[0])", span="415-415"];
m3_197 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.Example()", file="JavaScriptDateTimeConverter.cs", label="Assert.AreEqual(''Headlight Fluid'', firstProductNames[1])", span="416-416"];
m3_198 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.Example()", file="JavaScriptDateTimeConverter.cs", label="Assert.AreEqual(149.95m, totalPrice)", span="417-417"];
m3_183 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.Example()", file="JavaScriptDateTimeConverter.cs", label="string name = (string)o.SelectToken(''Manufacturers[0].Name'')", span="387-387"];
m3_185 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.Example()", file="JavaScriptDateTimeConverter.cs", label="string productName = (string)o.SelectToken(''Manufacturers[1].Products[0].Name'')", span="393-393"];
m3_184 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.Example()", file="JavaScriptDateTimeConverter.cs", label="decimal productPrice = (decimal)o.SelectToken(''Manufacturers[0].Products[0].Price'')", span="390-390"];
m3_189 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.Example()", file="JavaScriptDateTimeConverter.cs", label="IList<string> storeNames = o.SelectToken(''Stores'').Select(s => (string)s).ToList()", span="400-400"];
m3_191 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.Example()", file="JavaScriptDateTimeConverter.cs", label="decimal totalPrice = o[''Manufacturers''].Sum(m => (decimal)m.SelectToken(''Products[0].Price''))", span="408-408"];
m3_190 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.Example()", file="JavaScriptDateTimeConverter.cs", label="IList<string> firstProductNames = o[''Manufacturers''].Select(m => (string)m.SelectToken(''Products[1].Name'')).ToList()", span="404-404"];
m3_182 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.Example()", file="JavaScriptDateTimeConverter.cs", label="JObject o = JObject.Parse(@''{\r\n        ''''Stores'''': [\r\n          ''''Lambton Quay'''',\r\n          ''''Willis Street''''\r\n        ],\r\n        ''''Manufacturers'''': [\r\n          {\r\n            ''''Name'''': ''''Acme Co'''',\r\n            ''''Products'''': [\r\n              {\r\n                ''''Name'''': ''''Anvil'''',\r\n                ''''Price'''': 50\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            ''''Name'''': ''''Contoso'''',\r\n            ''''Products'''': [\r\n              {\r\n                ''''Name'''': ''''Elbow Grease'''',\r\n                ''''Price'''': 99.95\r\n              },\r\n              {\r\n                ''''Name'''': ''''Headlight Fluid'''',\r\n                ''''Price'''': 4\r\n              }\r\n            ]\r\n          }\r\n        ]\r\n      }'')", span="356-385"];
m3_199 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.Example()", file="JavaScriptDateTimeConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JPathTests.Example()", span="354-354"];
m3_112 [cluster="Newtonsoft.Json.Linq.JToken.SelectToken(string, bool)", file="JavaScriptDateTimeConverter.cs", label="Entry Newtonsoft.Json.Linq.JToken.SelectToken(string, bool)", span="1883-1883"];
m3_200 [cluster="Unk.Select", file="JavaScriptDateTimeConverter.cs", label="Entry Unk.Select", span=""];
m3_63 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.IndexerCloseInProperty()", file="JavaScriptDateTimeConverter.cs", label="Entry Newtonsoft.Json.Tests.Linq.JPathTests.IndexerCloseInProperty()", span="140-140"];
m3_64 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.IndexerCloseInProperty()", file="JavaScriptDateTimeConverter.cs", label="ExceptionAssert.Throws<JsonException>(\r\n        ''Unexpected character while parsing path: ]'',\r\n        () =>\r\n        {\r\n          new JPath('']'');\r\n        })", span="142-147"];
m3_65 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.IndexerCloseInProperty()", file="JavaScriptDateTimeConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JPathTests.IndexerCloseInProperty()", span="140-140"];
m3_130 [cluster="Newtonsoft.Json.Linq.JConstructor.JConstructor(string)", file="JavaScriptDateTimeConverter.cs", label="Entry Newtonsoft.Json.Linq.JConstructor.JConstructor(string)", span="110-110"];
m3_93 [cluster="Unk.IsNotNull", file="JavaScriptDateTimeConverter.cs", label="Entry Unk.IsNotNull", span=""];
m3_100 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateIndexerOnObject()", file="JavaScriptDateTimeConverter.cs", label="Entry Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateIndexerOnObject()", span="195-195"];
m3_102 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateIndexerOnObject()", file="JavaScriptDateTimeConverter.cs", label="JToken t = o.SelectToken(''[1]'')", span="200-200"];
m3_101 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateIndexerOnObject()", file="JavaScriptDateTimeConverter.cs", label="JObject o = new JObject(\r\n        new JProperty(''Blah'', 1))", span="197-198"];
m3_103 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateIndexerOnObject()", file="JavaScriptDateTimeConverter.cs", label="Assert.IsNull(t)", span="201-201"];
m3_104 [cluster="Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateIndexerOnObject()", file="JavaScriptDateTimeConverter.cs", label="Exit Newtonsoft.Json.Tests.Linq.JPathTests.EvaluateIndexerOnObject()", span="195-195"];
m3_212 [file="JavaScriptDateTimeConverter.cs", label=o, span=""];
m3_215 [file="JavaScriptDateTimeConverter.cs", label=o, span=""];
m3_213 [file="JavaScriptDateTimeConverter.cs", label=a, span=""];
m3_216 [file="JavaScriptDateTimeConverter.cs", label=a, span=""];
m3_214 [file="JavaScriptDateTimeConverter.cs", label=c, span=""];
m4_4 [cluster="Newtonsoft.Json.Serialization.JsonPropertyCollection.JsonPropertyCollection(System.Type)", file="JsonObjectContract.cs", label="Entry Newtonsoft.Json.Serialization.JsonPropertyCollection.JsonPropertyCollection(System.Type)", span="46-46"];
m4_5 [cluster="Newtonsoft.Json.Serialization.JsonObjectContract.GetUninitializedObject()", file="JsonObjectContract.cs", label="Entry Newtonsoft.Json.Serialization.JsonObjectContract.GetUninitializedObject()", span="214-214"];
m4_6 [cluster="Newtonsoft.Json.Serialization.JsonObjectContract.GetUninitializedObject()", file="JsonObjectContract.cs", label="!JsonTypeReflector.FullyTrusted", span="217-217"];
m4_7 [cluster="Newtonsoft.Json.Serialization.JsonObjectContract.GetUninitializedObject()", file="JsonObjectContract.cs", label="throw new JsonException(''Insufficient permissions. Creating an uninitialized '{0}' type requires full trust.''.FormatWith(CultureInfo.InvariantCulture, NonNullableUnderlyingType));", span="219-219"];
m4_8 [cluster="Newtonsoft.Json.Serialization.JsonObjectContract.GetUninitializedObject()", file="JsonObjectContract.cs", label="return FormatterServices.GetUninitializedObject(NonNullableUnderlyingType);", span="222-222"];
m4_9 [cluster="Newtonsoft.Json.Serialization.JsonObjectContract.GetUninitializedObject()", file="JsonObjectContract.cs", label="Exit Newtonsoft.Json.Serialization.JsonObjectContract.GetUninitializedObject()", span="214-214"];
m4_0 [cluster="Newtonsoft.Json.Serialization.JsonObjectContract.JsonObjectContract(System.Type)", file="JsonObjectContract.cs", label="Entry Newtonsoft.Json.Serialization.JsonObjectContract.JsonObjectContract(System.Type)", span="202-202"];
m4_1 [cluster="Newtonsoft.Json.Serialization.JsonObjectContract.JsonObjectContract(System.Type)", file="JsonObjectContract.cs", label="ContractType = JsonContractType.Object", span="205-205"];
m4_2 [cluster="Newtonsoft.Json.Serialization.JsonObjectContract.JsonObjectContract(System.Type)", file="JsonObjectContract.cs", label="Properties = new JsonPropertyCollection(UnderlyingType)", span="207-207"];
m4_3 [cluster="Newtonsoft.Json.Serialization.JsonObjectContract.JsonObjectContract(System.Type)", file="JsonObjectContract.cs", label="Exit Newtonsoft.Json.Serialization.JsonObjectContract.JsonObjectContract(System.Type)", span="202-202"];
m4_12 [cluster="System.Runtime.Serialization.FormatterServices.GetUninitializedObject(System.Type)", file="JsonObjectContract.cs", label="Entry System.Runtime.Serialization.FormatterServices.GetUninitializedObject(System.Type)", span="0-0"];
m4_11 [cluster="string.FormatWith(System.IFormatProvider, object)", file="JsonObjectContract.cs", label="Entry string.FormatWith(System.IFormatProvider, object)", span="47-47"];
m4_13 [file="JsonObjectContract.cs", label="Newtonsoft.Json.Serialization.JsonObjectContract", span=""];
m5_97 [cluster="Newtonsoft.Json.Utilities.DateTimeUtils.ConvertDateTimeToJavaScriptTicks(System.DateTime, bool)", file="JsonPosition.cs", label="Entry Newtonsoft.Json.Utilities.DateTimeUtils.ConvertDateTimeToJavaScriptTicks(System.DateTime, bool)", span="176-176"];
m5_91 [cluster="System.IO.BinaryWriter.Write(long)", file="JsonPosition.cs", label="Entry System.IO.BinaryWriter.Write(long)", span="0-0"];
m5_187 [cluster="System.Text.Encoding.GetByteCount(string)", file="JsonPosition.cs", label="Entry System.Text.Encoding.GetByteCount(string)", span="0-0"];
m5_119 [cluster="System.IO.BinaryWriter.Write(byte[], int, int)", file="JsonPosition.cs", label="Entry System.IO.BinaryWriter.Write(byte[], int, int)", span="0-0"];
m5_4 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.Flush()", file="JsonPosition.cs", label="Entry Newtonsoft.Json.Bson.BsonBinaryWriter.Flush()", span="49-49"];
m5_5 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.Flush()", file="JsonPosition.cs", label="_writer.Flush()", span="51-51"];
m5_6 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.Flush()", file="JsonPosition.cs", label="Exit Newtonsoft.Json.Bson.BsonBinaryWriter.Flush()", span="49-49"];
m5_124 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSizeWithLength(int, bool)", file="JsonPosition.cs", label="Entry Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSizeWithLength(int, bool)", span="234-234"];
m5_125 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSizeWithLength(int, bool)", file="JsonPosition.cs", label="int baseSize = (includeSize)\r\n                ? 5 // size bytes + terminator\r\n                : 1", span="236-238"];
m5_126 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSizeWithLength(int, bool)", file="JsonPosition.cs", label="return baseSize + stringByteCount;", span="240-240"];
m5_127 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSizeWithLength(int, bool)", file="JsonPosition.cs", label="Exit Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSizeWithLength(int, bool)", span="234-234"];
m5_95 [cluster="System.DateTime.ToUniversalTime()", file="JsonPosition.cs", label="Entry System.DateTime.ToUniversalTime()", span="0-0"];
m5_94 [cluster="System.IO.BinaryWriter.Write(bool)", file="JsonPosition.cs", label="Entry System.IO.BinaryWriter.Write(bool)", span="0-0"];
m5_88 [cluster="Newtonsoft.Json.Utilities.MathUtils.IntLength(ulong)", file="JsonPosition.cs", label="Entry Newtonsoft.Json.Utilities.MathUtils.IntLength(ulong)", span="33-33"];
m5_108 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteUtf8Bytes(string, int)", file="JsonPosition.cs", label="Entry Newtonsoft.Json.Bson.BsonBinaryWriter.WriteUtf8Bytes(string, int)", span="208-208"];
m5_109 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteUtf8Bytes(string, int)", file="JsonPosition.cs", label="s != null", span="210-210"];
m5_112 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteUtf8Bytes(string, int)", file="JsonPosition.cs", label="byteCount <= 256", span="216-216"];
m5_113 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteUtf8Bytes(string, int)", file="JsonPosition.cs", label="Encoding.GetBytes(s, 0, s.Length, _largeByteBuffer, 0)", span="218-218"];
m5_114 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteUtf8Bytes(string, int)", file="JsonPosition.cs", label="_writer.Write(_largeByteBuffer, 0, byteCount)", span="219-219"];
m5_115 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteUtf8Bytes(string, int)", file="JsonPosition.cs", label="byte[] bytes = Encoding.GetBytes(s)", span="223-223"];
m5_110 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteUtf8Bytes(string, int)", file="JsonPosition.cs", label="_largeByteBuffer == null", span="212-212"];
m5_111 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteUtf8Bytes(string, int)", file="JsonPosition.cs", label="_largeByteBuffer = new byte[256]", span="214-214"];
m5_116 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteUtf8Bytes(string, int)", file="JsonPosition.cs", label="_writer.Write(bytes)", span="224-224"];
m5_117 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteUtf8Bytes(string, int)", file="JsonPosition.cs", label="Exit Newtonsoft.Json.Bson.BsonBinaryWriter.WriteUtf8Bytes(string, int)", span="208-208"];
m5_96 [cluster="System.DateTime.ToLocalTime()", file="JsonPosition.cs", label="Entry System.DateTime.ToLocalTime()", span="0-0"];
m5_89 [cluster="System.Convert.ToInt32(object, System.IFormatProvider)", file="JsonPosition.cs", label="Entry System.Convert.ToInt32(object, System.IFormatProvider)", span="0-0"];
m5_12 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteToken(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="Entry Newtonsoft.Json.Bson.BsonBinaryWriter.WriteToken(Newtonsoft.Json.Bson.BsonToken)", span="63-63"];
m5_13 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteToken(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="CalculateSize(t)", span="65-65"];
m5_14 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteToken(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="WriteTokenInternal(t)", span="66-66"];
m5_15 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteToken(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="Exit Newtonsoft.Json.Bson.BsonBinaryWriter.WriteToken(Newtonsoft.Json.Bson.BsonToken)", span="63-63"];
m5_98 [cluster="Newtonsoft.Json.Utilities.DateTimeUtils.ConvertDateTimeToJavaScriptTicks(System.DateTime, System.TimeSpan)", file="JsonPosition.cs", label="Entry Newtonsoft.Json.Utilities.DateTimeUtils.ConvertDateTimeToJavaScriptTicks(System.DateTime, System.TimeSpan)", span="164-164"];
m5_100 [cluster="System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string, string)", file="JsonPosition.cs", label="Entry System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(string, string)", span="0-0"];
m5_86 [cluster="System.IO.BinaryWriter.Write(byte)", file="JsonPosition.cs", label="Entry System.IO.BinaryWriter.Write(byte)", span="0-0"];
m5_118 [cluster="System.Text.Encoding.GetBytes(string, int, int, byte[], int)", file="JsonPosition.cs", label="Entry System.Text.Encoding.GetBytes(string, int, int, byte[], int)", span="0-0"];
m5_83 [cluster="System.IO.BinaryWriter.Write(int)", file="JsonPosition.cs", label="Entry System.IO.BinaryWriter.Write(int)", span="0-0"];
m5_121 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(int)", file="JsonPosition.cs", label="Entry Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(int)", span="229-229"];
m5_122 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(int)", file="JsonPosition.cs", label="return stringByteCount + 1;", span="231-231"];
m5_123 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(int)", file="JsonPosition.cs", label="Exit Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(int)", span="229-229"];
m5_101 [cluster="Unk.nameof", file="JsonPosition.cs", label="Entry Unk.nameof", span=""];
m5_90 [cluster="System.Convert.ToInt64(object, System.IFormatProvider)", file="JsonPosition.cs", label="Entry System.Convert.ToInt64(object, System.IFormatProvider)", span="0-0"];
m5_0 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.BsonBinaryWriter(System.IO.BinaryWriter)", file="JsonPosition.cs", label="Entry Newtonsoft.Json.Bson.BsonBinaryWriter.BsonBinaryWriter(System.IO.BinaryWriter)", span="43-43"];
m5_1 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.BsonBinaryWriter(System.IO.BinaryWriter)", file="JsonPosition.cs", label="DateTimeKindHandling = DateTimeKind.Utc", span="45-45"];
m5_2 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.BsonBinaryWriter(System.IO.BinaryWriter)", file="JsonPosition.cs", label="_writer = writer", span="46-46"];
m5_3 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.BsonBinaryWriter(System.IO.BinaryWriter)", file="JsonPosition.cs", label="Exit Newtonsoft.Json.Bson.BsonBinaryWriter.BsonBinaryWriter(System.IO.BinaryWriter)", span="43-43"];
m5_11 [cluster="System.IO.BinaryWriter.Close()", file="JsonPosition.cs", label="Entry System.IO.BinaryWriter.Close()", span="0-0"];
m5_7 [cluster="System.IO.BinaryWriter.Flush()", file="JsonPosition.cs", label="Entry System.IO.BinaryWriter.Flush()", span="0-0"];
m5_99 [cluster="System.IO.BinaryWriter.Write(byte[])", file="JsonPosition.cs", label="Entry System.IO.BinaryWriter.Write(byte[])", span="0-0"];
m5_8 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.Close()", file="JsonPosition.cs", label="Entry Newtonsoft.Json.Bson.BsonBinaryWriter.Close()", span="54-54"];
m5_9 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.Close()", file="JsonPosition.cs", label="_writer.Close()", span="57-57"];
m5_10 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.Close()", file="JsonPosition.cs", label="Exit Newtonsoft.Json.Bson.BsonBinaryWriter.Close()", span="54-54"];
m5_16 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="Entry Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", span="243-243"];
m5_128 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="t.Type", span="245-245"];
m5_130 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="BsonObject value = (BsonObject)t", span="249-249"];
m5_141 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="BsonArray value = (BsonArray)t", span="266-266"];
m5_159 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="BsonString value = (BsonString)t", span="290-290"];
m5_172 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="BsonBinary value = (BsonBinary)t", span="306-306"];
m5_179 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="BsonRegex value = (BsonRegex)t", span="317-317"];
m5_185 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="throw new ArgumentOutOfRangeException(nameof(t), ''Unexpected token when writing BSON: {0}''.FormatWith(CultureInfo.InvariantCulture, t.Type));", span="326-326"];
m5_129 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="BsonType.Object", span="247-247"];
m5_140 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="BsonType.Array", span="264-264"];
m5_152 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="BsonType.Integer", span="282-282"];
m5_154 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="BsonType.Long", span="284-284"];
m5_156 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="BsonType.Number", span="286-286"];
m5_158 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="BsonType.String", span="288-288"];
m5_164 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="BsonType.Boolean", span="297-297"];
m5_166 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="BsonType.Null", span="299-299"];
m5_169 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="BsonType.Date", span="302-302"];
m5_171 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="BsonType.Binary", span="304-304"];
m5_176 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="BsonType.Oid", span="313-313"];
m5_178 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="BsonType.Regex", span="315-315"];
m5_131 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="int bases = 4", span="251-251"];
m5_132 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label=value, span="252-252"];
m5_138 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="value.CalculatedSize = bases", span="261-261"];
m5_136 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="bases += size", span="258-258"];
m5_137 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="bases += 1", span="260-260"];
m5_133 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="int size = 1", span="254-254"];
m5_134 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="size += CalculateSize(p.Name)", span="255-255"];
m5_135 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="size += CalculateSize(p.Value)", span="256-256"];
m5_139 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="return bases;", span="262-262"];
m5_142 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="int size = 4", span="268-268"];
m5_144 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label=value, span="270-270"];
m5_150 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="value.CalculatedSize = size", span="278-278"];
m5_151 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="return value.CalculatedSize;", span="280-280"];
m5_143 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="ulong index = 0", span="269-269"];
m5_145 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="size += 1", span="272-272"];
m5_149 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="size += 1", span="277-277"];
m5_146 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="size += CalculateSize(MathUtils.IntLength(index))", span="273-273"];
m5_148 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="index++", span="275-275"];
m5_147 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="size += CalculateSize(c)", span="274-274"];
m5_153 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="return 4;", span="283-283"];
m5_155 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="return 8;", span="285-285"];
m5_157 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="return 8;", span="287-287"];
m5_160 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="string s = (string)value.Value", span="291-291"];
m5_161 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="value.ByteCount = (s != null) ? Encoding.GetByteCount(s) : 0", span="292-292"];
m5_162 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="value.CalculatedSize = CalculateSizeWithLength(value.ByteCount, value.IncludeLength)", span="293-293"];
m5_163 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="return value.CalculatedSize;", span="295-295"];
m5_165 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="return 1;", span="298-298"];
m5_167 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="BsonType.Undefined", span="300-300"];
m5_168 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="return 0;", span="301-301"];
m5_170 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="return 8;", span="303-303"];
m5_173 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="byte[] data = (byte[])value.Value", span="308-308"];
m5_174 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="value.CalculatedSize = 4 + 1 + data.Length", span="309-309"];
m5_175 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="return value.CalculatedSize;", span="311-311"];
m5_177 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="return 12;", span="314-314"];
m5_180 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="int size = 0", span="318-318"];
m5_181 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="size += CalculateSize(value.Pattern)", span="319-319"];
m5_182 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="size += CalculateSize(value.Options)", span="320-320"];
m5_183 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="value.CalculatedSize = size", span="321-321"];
m5_184 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="return value.CalculatedSize;", span="323-323"];
m5_186 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="Exit Newtonsoft.Json.Bson.BsonBinaryWriter.CalculateSize(Newtonsoft.Json.Bson.BsonToken)", span="243-243"];
m5_120 [cluster="System.Text.Encoding.GetBytes(string)", file="JsonPosition.cs", label="Entry System.Text.Encoding.GetBytes(string)", span="0-0"];
m5_92 [cluster="System.Convert.ToDouble(object, System.IFormatProvider)", file="JsonPosition.cs", label="Entry System.Convert.ToDouble(object, System.IFormatProvider)", span="0-0"];
m5_93 [cluster="System.IO.BinaryWriter.Write(double)", file="JsonPosition.cs", label="Entry System.IO.BinaryWriter.Write(double)", span="0-0"];
m5_17 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="Entry Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", span="69-69"];
m5_18 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="t.Type", span="71-71"];
m5_20 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="BsonObject value = (BsonObject)t", span="75-75"];
m5_28 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="BsonArray value = (BsonArray)t", span="88-88"];
m5_38 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="BsonValue value = (BsonValue)t", span="103-103"];
m5_41 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="BsonValue value = (BsonValue)t", span="109-109"];
m5_44 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="BsonValue value = (BsonValue)t", span="115-115"];
m5_47 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="BsonString value = (BsonString)t", span="121-121"];
m5_50 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="BsonValue value = (BsonValue)t", span="127-127"];
m5_55 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="BsonValue value = (BsonValue)t", span="136-136"];
m5_68 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="BsonBinary value = (BsonBinary)t", span="167-167"];
m5_74 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="BsonValue value = (BsonValue)t", span="177-177"];
m5_78 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="BsonRegex value = (BsonRegex)t", span="185-185"];
m5_81 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="throw new ArgumentOutOfRangeException(nameof(t), ''Unexpected token when writing BSON: {0}''.FormatWith(CultureInfo.InvariantCulture, t.Type));", span="192-192"];
m5_19 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="BsonType.Object", span="73-73"];
m5_27 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="BsonType.Array", span="86-86"];
m5_37 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="BsonType.Integer", span="101-101"];
m5_40 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="BsonType.Long", span="107-107"];
m5_43 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="BsonType.Number", span="113-113"];
m5_46 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="BsonType.String", span="119-119"];
m5_49 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="BsonType.Boolean", span="125-125"];
m5_52 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="BsonType.Null", span="131-131"];
m5_54 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="BsonType.Date", span="134-134"];
m5_67 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="BsonType.Binary", span="165-165"];
m5_73 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="BsonType.Oid", span="175-175"];
m5_77 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="BsonType.Regex", span="183-183"];
m5_21 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="_writer.Write(value.CalculatedSize)", span="76-76"];
m5_22 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label=value, span="77-77"];
m5_23 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="_writer.Write((sbyte)property.Value.Type)", span="79-79"];
m5_26 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="_writer.Write((byte)0)", span="83-83"];
m5_24 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="WriteString((string)property.Name.Value, property.Name.ByteCount, null)", span="80-80"];
m5_25 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="WriteTokenInternal(property.Value)", span="81-81"];
m5_29 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="_writer.Write(value.CalculatedSize)", span="89-89"];
m5_31 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label=value, span="91-91"];
m5_30 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="ulong index = 0", span="90-90"];
m5_33 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="WriteString(index.ToString(CultureInfo.InvariantCulture), MathUtils.IntLength(index), null)", span="94-94"];
m5_35 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="index++", span="96-96"];
m5_32 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="_writer.Write((sbyte)c.Type)", span="93-93"];
m5_36 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="_writer.Write((byte)0)", span="98-98"];
m5_34 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="WriteTokenInternal(c)", span="95-95"];
m5_39 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="_writer.Write(Convert.ToInt32(value.Value, CultureInfo.InvariantCulture))", span="104-104"];
m5_42 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="_writer.Write(Convert.ToInt64(value.Value, CultureInfo.InvariantCulture))", span="110-110"];
m5_45 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="_writer.Write(Convert.ToDouble(value.Value, CultureInfo.InvariantCulture))", span="116-116"];
m5_48 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="WriteString((string)value.Value, value.ByteCount, value.CalculatedSize - 4)", span="122-122"];
m5_51 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="_writer.Write((bool)value.Value)", span="128-128"];
m5_53 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="BsonType.Undefined", span="132-132"];
m5_56 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="long ticks = 0", span="138-138"];
m5_57 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="value.Value is DateTime", span="140-140"];
m5_58 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="DateTime dateTime = (DateTime)value.Value", span="142-142"];
m5_64 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="DateTimeOffset dateTimeOffset = (DateTimeOffset)value.Value", span="157-157"];
m5_59 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="DateTimeKindHandling == DateTimeKind.Utc", span="143-143"];
m5_60 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="dateTime = dateTime.ToUniversalTime()", span="145-145"];
m5_62 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="dateTime = dateTime.ToLocalTime()", span="149-149"];
m5_63 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="ticks = DateTimeUtils.ConvertDateTimeToJavaScriptTicks(dateTime, false)", span="152-152"];
m5_61 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="DateTimeKindHandling == DateTimeKind.Local", span="147-147"];
m5_65 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="ticks = DateTimeUtils.ConvertDateTimeToJavaScriptTicks(dateTimeOffset.UtcDateTime, dateTimeOffset.Offset)", span="158-158"];
m5_66 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="_writer.Write(ticks)", span="162-162"];
m5_69 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="byte[] data = (byte[])value.Value", span="169-169"];
m5_71 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="_writer.Write((byte)value.BinaryType)", span="171-171"];
m5_70 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="_writer.Write(data.Length)", span="170-170"];
m5_72 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="_writer.Write(data)", span="172-172"];
m5_75 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="byte[] data = (byte[])value.Value", span="179-179"];
m5_76 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="_writer.Write(data)", span="180-180"];
m5_79 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="WriteString((string)value.Pattern.Value, value.Pattern.ByteCount, null)", span="187-187"];
m5_80 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="WriteString((string)value.Options.Value, value.Options.ByteCount, null)", span="188-188"];
m5_82 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", file="JsonPosition.cs", label="Exit Newtonsoft.Json.Bson.BsonBinaryWriter.WriteTokenInternal(Newtonsoft.Json.Bson.BsonToken)", span="69-69"];
m5_85 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteString(string, int, int?)", file="JsonPosition.cs", label="Entry Newtonsoft.Json.Bson.BsonBinaryWriter.WriteString(string, int, int?)", span="196-196"];
m5_103 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteString(string, int, int?)", file="JsonPosition.cs", label="calculatedlengthPrefix != null", span="198-198"];
m5_104 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteString(string, int, int?)", file="JsonPosition.cs", label="_writer.Write(calculatedlengthPrefix.Value)", span="200-200"];
m5_105 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteString(string, int, int?)", file="JsonPosition.cs", label="WriteUtf8Bytes(s, byteCount)", span="203-203"];
m5_106 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteString(string, int, int?)", file="JsonPosition.cs", label="_writer.Write((byte)0)", span="205-205"];
m5_107 [cluster="Newtonsoft.Json.Bson.BsonBinaryWriter.WriteString(string, int, int?)", file="JsonPosition.cs", label="Exit Newtonsoft.Json.Bson.BsonBinaryWriter.WriteString(string, int, int?)", span="196-196"];
m5_87 [cluster="ulong.ToString(System.IFormatProvider)", file="JsonPosition.cs", label="Entry ulong.ToString(System.IFormatProvider)", span="0-0"];
m5_84 [cluster="System.IO.BinaryWriter.Write(sbyte)", file="JsonPosition.cs", label="Entry System.IO.BinaryWriter.Write(sbyte)", span="0-0"];
m5_188 [file="JsonPosition.cs", label="Newtonsoft.Json.Bson.BsonBinaryWriter", span=""];
m6_9 [cluster="Newtonsoft.Json.JsonConvert.WriteDateTimeOffset(System.IO.TextWriter, System.TimeSpan, Newtonsoft.Json.DateFormatHandling)", file="JsonReader.cs", label="Entry Newtonsoft.Json.JsonConvert.WriteDateTimeOffset(System.IO.TextWriter, System.TimeSpan, Newtonsoft.Json.DateFormatHandling)", span="234-234"];
m6_44 [cluster="string.Format(string, object, object)", file="JsonReader.cs", label="Entry string.Format(string, object, object)", span="0-0"];
m6_10 [cluster="System.IO.TextWriter.Flush()", file="JsonReader.cs", label="Entry System.IO.TextWriter.Flush()", span="0-0"];
m6_43 [cluster="System.Exception.GetType()", file="JsonReader.cs", label="Entry System.Exception.GetType()", span="0-0"];
m6_0 [cluster="Newtonsoft.Json.Tests.TestFixtureBase.GetOffset(System.DateTime, Newtonsoft.Json.DateFormatHandling)", file="JsonReader.cs", label="Entry Newtonsoft.Json.Tests.TestFixtureBase.GetOffset(System.DateTime, Newtonsoft.Json.DateFormatHandling)", span="55-55"];
m6_1 [cluster="Newtonsoft.Json.Tests.TestFixtureBase.GetOffset(System.DateTime, Newtonsoft.Json.DateFormatHandling)", file="JsonReader.cs", label="StringWriter sw = new StringWriter()", span="57-57"];
m6_2 [cluster="Newtonsoft.Json.Tests.TestFixtureBase.GetOffset(System.DateTime, Newtonsoft.Json.DateFormatHandling)", file="JsonReader.cs", label="JsonConvert.WriteDateTimeOffset(sw, DateTime.SpecifyKind(d, DateTimeKind.Local).GetUtcOffset(), dateFormatHandling)", span="58-58"];
m6_3 [cluster="Newtonsoft.Json.Tests.TestFixtureBase.GetOffset(System.DateTime, Newtonsoft.Json.DateFormatHandling)", file="JsonReader.cs", label="sw.Flush()", span="59-59"];
m6_4 [cluster="Newtonsoft.Json.Tests.TestFixtureBase.GetOffset(System.DateTime, Newtonsoft.Json.DateFormatHandling)", file="JsonReader.cs", label="return sw.ToString();", span="61-61"];
m6_5 [cluster="Newtonsoft.Json.Tests.TestFixtureBase.GetOffset(System.DateTime, Newtonsoft.Json.DateFormatHandling)", file="JsonReader.cs", label="Exit Newtonsoft.Json.Tests.TestFixtureBase.GetOffset(System.DateTime, Newtonsoft.Json.DateFormatHandling)", span="55-55"];
m6_14 [cluster="Newtonsoft.Json.Tests.TestFixtureBase.WriteEscapedJson(string)", file="JsonReader.cs", label="Entry Newtonsoft.Json.Tests.TestFixtureBase.WriteEscapedJson(string)", span="73-73"];
m6_15 [cluster="Newtonsoft.Json.Tests.TestFixtureBase.WriteEscapedJson(string)", file="JsonReader.cs", label="Console.WriteLine(EscapeJson(json))", span="75-75"];
m6_16 [cluster="Newtonsoft.Json.Tests.TestFixtureBase.WriteEscapedJson(string)", file="JsonReader.cs", label="Exit Newtonsoft.Json.Tests.TestFixtureBase.WriteEscapedJson(string)", span="73-73"];
m6_39 [cluster="System.Action.Invoke()", file="JsonReader.cs", label="Entry System.Action.Invoke()", span="0-0"];
m6_18 [cluster="System.Console.WriteLine(string)", file="JsonReader.cs", label="Entry System.Console.WriteLine(string)", span="0-0"];
m6_22 [cluster="Newtonsoft.Json.Tests.CustomAssert.IsInstanceOfType(System.Type, object)", file="JsonReader.cs", label="Entry Newtonsoft.Json.Tests.CustomAssert.IsInstanceOfType(System.Type, object)", span="96-96"];
m6_23 [cluster="Newtonsoft.Json.Tests.CustomAssert.IsInstanceOfType(System.Type, object)", file="JsonReader.cs", label="Assert.IsInstanceOf(t, instance)", span="104-104"];
m6_24 [cluster="Newtonsoft.Json.Tests.CustomAssert.IsInstanceOfType(System.Type, object)", file="JsonReader.cs", label="Exit Newtonsoft.Json.Tests.CustomAssert.IsInstanceOfType(System.Type, object)", span="96-96"];
m6_7 [cluster="System.DateTime.SpecifyKind(System.DateTime, System.DateTimeKind)", file="JsonReader.cs", label="Entry System.DateTime.SpecifyKind(System.DateTime, System.DateTimeKind)", span="0-0"];
m6_26 [cluster="Newtonsoft.Json.Tests.CustomAssert.Contains(System.Collections.IList, object)", file="JsonReader.cs", label="Entry Newtonsoft.Json.Tests.CustomAssert.Contains(System.Collections.IList, object)", span="108-108"];
m6_27 [cluster="Newtonsoft.Json.Tests.CustomAssert.Contains(System.Collections.IList, object)", file="JsonReader.cs", label="Assert.Contains(value, collection)", span="111-111"];
m6_28 [cluster="Newtonsoft.Json.Tests.CustomAssert.Contains(System.Collections.IList, object)", file="JsonReader.cs", label="Exit Newtonsoft.Json.Tests.CustomAssert.Contains(System.Collections.IList, object)", span="108-108"];
m6_25 [cluster="Unk.IsInstanceOf", file="JsonReader.cs", label="Entry Unk.IsInstanceOf", span=""];
m6_12 [cluster="Newtonsoft.Json.Tests.TestFixtureBase.TestSetup()", file="JsonReader.cs", label="Entry Newtonsoft.Json.Tests.TestFixtureBase.TestSetup()", span="66-66"];
m6_13 [cluster="Newtonsoft.Json.Tests.TestFixtureBase.TestSetup()", file="JsonReader.cs", label="Exit Newtonsoft.Json.Tests.TestFixtureBase.TestSetup()", span="66-66"];
m6_41 [cluster="Unk.AreEqual", file="JsonReader.cs", label="Entry Unk.AreEqual", span=""];
m6_17 [cluster="Newtonsoft.Json.Tests.TestFixtureBase.EscapeJson(string)", file="JsonReader.cs", label="Entry Newtonsoft.Json.Tests.TestFixtureBase.EscapeJson(string)", span="78-78"];
m6_19 [cluster="Newtonsoft.Json.Tests.TestFixtureBase.EscapeJson(string)", file="JsonReader.cs", label="return @''@'''''' + json.Replace(@'''''''', @'''''''''''') + @'''''''';", span="80-80"];
m6_20 [cluster="Newtonsoft.Json.Tests.TestFixtureBase.EscapeJson(string)", file="JsonReader.cs", label="Exit Newtonsoft.Json.Tests.TestFixtureBase.EscapeJson(string)", span="78-78"];
m6_29 [cluster="Unk.Contains", file="JsonReader.cs", label="Entry Unk.Contains", span=""];
m6_6 [cluster="System.IO.StringWriter.StringWriter()", file="JsonReader.cs", label="Entry System.IO.StringWriter.StringWriter()", span="0-0"];
m6_8 [cluster="System.DateTime.GetUtcOffset()", file="JsonReader.cs", label="Entry System.DateTime.GetUtcOffset()", span="40-40"];
m6_40 [cluster="Unk.Fail", file="JsonReader.cs", label="Entry Unk.Fail", span=""];
m6_30 [cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(string, System.Action)", file="JsonReader.cs", label="Entry Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(string, System.Action)", span="121-121"];
m6_31 [cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(string, System.Action)", file="JsonReader.cs", label="action()", span="126-126"];
m6_34 [cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(string, System.Action)", file="JsonReader.cs", label="message != null", span="132-132"];
m6_35 [cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(string, System.Action)", file="JsonReader.cs", label="Assert.AreEqual(message, ex.Message, ''Unexpected exception message.'' + Environment.NewLine + ''Expected: '' + message + Environment.NewLine + ''Got: '' + ex.Message + Environment.NewLine + Environment.NewLine + ex)", span="133-133"];
m6_32 [cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(string, System.Action)", file="JsonReader.cs", label="Assert.Fail(''Exception of type {0} expected; got none exception'', typeof(TException).Name)", span="128-128"];
m6_33 [cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(string, System.Action)", file="JsonReader.cs", label=TException, span="130-130"];
m6_36 [cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(string, System.Action)", file="JsonReader.cs", label=Exception, span="135-135"];
m6_37 [cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(string, System.Action)", file="JsonReader.cs", label="throw new Exception(string.Format(''Exception of type {0} expected; got exception of type {1}.'', typeof(TException).Name, ex.GetType().Name), ex);", span="137-137"];
m6_38 [cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(string, System.Action)", file="JsonReader.cs", label="Exit Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(string, System.Action)", span="121-121"];
m6_21 [cluster="string.Replace(string, string)", file="JsonReader.cs", label="Entry string.Replace(string, string)", span="0-0"];
m6_42 [cluster="System.Exception.Exception(string, System.Exception)", file="JsonReader.cs", label="Entry System.Exception.Exception(string, System.Exception)", span="0-0"];
m6_11 [cluster="System.IO.StringWriter.ToString()", file="JsonReader.cs", label="Entry System.IO.StringWriter.ToString()", span="0-0"];
m6_45 [file="JsonReader.cs", label="Newtonsoft.Json.Tests.TestFixtureBase", span=""];
m7_217 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.Build(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs", label="Entry Newtonsoft.Json.Schema.JsonSchemaModelBuilder.Build(Newtonsoft.Json.Schema.JsonSchema)", span="43-43"];
m7_71 [cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteSchema(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs", label="_writer.WritePropertyName(JsonSchemaConstants.ExtendsPropertyName)", span="149-149"];
m7_72 [cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteSchema(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs", label="schema.Extends.Count == 1", span="150-150"];
m7_76 [cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteSchema(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs", label="ReferenceOrWriteSchema(jsonSchema)", span="159-159"];
m7_77 [cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteSchema(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs", label="_writer.WriteEndArray()", span="161-161"];
m7_73 [cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteSchema(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs", label="ReferenceOrWriteSchema(schema.Extends[0])", span="152-152"];
m7_74 [cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteSchema(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs", label="_writer.WriteStartArray()", span="156-156"];
m7_75 [cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteSchema(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs", label="schema.Extends", span="157-157"];
m7_78 [cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteSchema(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs", label="_writer.WriteEndObject()", span="164-164"];
m7_88 [cluster="Newtonsoft.Json.JsonValidatingReader.GetCurrentNodeSchemaType()", file="JsonSchemaWriter.cs", label="return JsonSchemaType.Integer;", span="379-379"];
m7_263 [cluster="Newtonsoft.Json.Linq.JToken.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])", file="JsonSchemaWriter.cs", label="Entry Newtonsoft.Json.Linq.JToken.WriteTo(Newtonsoft.Json.JsonWriter, params Newtonsoft.Json.JsonConverter[])", span="422-422"];
m7_53 [cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteSchema(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs", label="WritePropertyIfNotNull(_writer, JsonSchemaConstants.MaximumLengthPropertyName, schema.MaximumLength)", span="122-122"];
m7_262 [cluster="Newtonsoft.Json.JsonTextWriter.JsonTextWriter(System.IO.TextWriter)", file="JsonSchemaWriter.cs", label="Entry Newtonsoft.Json.JsonTextWriter.JsonTextWriter(System.IO.TextWriter)", span="148-148"];
m7_131 [cluster="Newtonsoft.Json.JsonValidatingReader.ReadAsDateTimeOffset()", file="JsonSchemaWriter.cs", label="DateTimeOffset? dateTimeOffset = _reader.ReadAsDateTimeOffset()", span="462-462"];
m7_28 [cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteSchema(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs", label="WritePropertyIfNotNull(_writer, JsonSchemaConstants.ReadOnlyPropertyName, schema.ReadOnly)", span="81-81"];
m7_413 [cluster="Newtonsoft.Json.JsonValidatingReader.IsPropertyDefinied(Newtonsoft.Json.Schema.JsonSchemaModel, string)", file="JsonSchemaWriter.cs", label="Entry Newtonsoft.Json.JsonValidatingReader.IsPropertyDefinied(Newtonsoft.Json.Schema.JsonSchemaModel, string)", span="957-957"];
m7_414 [cluster="Newtonsoft.Json.JsonValidatingReader.IsPropertyDefinied(Newtonsoft.Json.Schema.JsonSchemaModel, string)", file="JsonSchemaWriter.cs", label="schema.Properties != null && schema.Properties.ContainsKey(propertyName)", span="959-959"];
m7_416 [cluster="Newtonsoft.Json.JsonValidatingReader.IsPropertyDefinied(Newtonsoft.Json.Schema.JsonSchemaModel, string)", file="JsonSchemaWriter.cs", label="schema.PatternProperties != null", span="964-964"];
m7_417 [cluster="Newtonsoft.Json.JsonValidatingReader.IsPropertyDefinied(Newtonsoft.Json.Schema.JsonSchemaModel, string)", file="JsonSchemaWriter.cs", label="schema.PatternProperties.Keys", span="966-966"];
m7_418 [cluster="Newtonsoft.Json.JsonValidatingReader.IsPropertyDefinied(Newtonsoft.Json.Schema.JsonSchemaModel, string)", file="JsonSchemaWriter.cs", label="Regex.IsMatch(propertyName, pattern)", span="968-968"];
m7_415 [cluster="Newtonsoft.Json.JsonValidatingReader.IsPropertyDefinied(Newtonsoft.Json.Schema.JsonSchemaModel, string)", file="JsonSchemaWriter.cs", label="return true;", span="961-961"];
m7_420 [cluster="Newtonsoft.Json.JsonValidatingReader.IsPropertyDefinied(Newtonsoft.Json.Schema.JsonSchemaModel, string)", file="JsonSchemaWriter.cs", label="return false;", span="975-975"];
m7_419 [cluster="Newtonsoft.Json.JsonValidatingReader.IsPropertyDefinied(Newtonsoft.Json.Schema.JsonSchemaModel, string)", file="JsonSchemaWriter.cs", label="return true;", span="970-970"];
m7_421 [cluster="Newtonsoft.Json.JsonValidatingReader.IsPropertyDefinied(Newtonsoft.Json.Schema.JsonSchemaModel, string)", file="JsonSchemaWriter.cs", label="Exit Newtonsoft.Json.JsonValidatingReader.IsPropertyDefinied(Newtonsoft.Json.Schema.JsonSchemaModel, string)", span="957-957"];
m7_396 [cluster="System.Math.Floor(double)", file="JsonSchemaWriter.cs", label="Entry System.Math.Floor(double)", span="0-0"];
m7_357 [cluster="System.Math.Truncate(double)", file="JsonSchemaWriter.cs", label="Entry System.Math.Truncate(double)", span="0-0"];
m7_27 [cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteSchema(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs", label="WritePropertyIfNotNull(_writer, JsonSchemaConstants.RequiredPropertyName, schema.Required)", span="80-80"];
m7_36 [cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteSchema(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs", label="schema.AdditionalProperties != null", span="95-95"];
m7_37 [cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteSchema(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs", label="_writer.WritePropertyName(JsonSchemaConstants.AdditionalPropertiesPropertyName)", span="97-97"];
m7_38 [cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteSchema(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs", label="ReferenceOrWriteSchema(schema.AdditionalProperties)", span="98-98"];
m7_39 [cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteSchema(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs", label="!schema.AllowAdditionalItems", span="101-101"];
m7_422 [cluster="System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)", file="JsonSchemaWriter.cs", label="Entry System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0"];
m7_412 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", file="JsonSchemaWriter.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)", span="0-0"];
m7_54 [cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteSchema(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs", label="WritePropertyIfNotNull(_writer, JsonSchemaConstants.MinimumItemsPropertyName, schema.MinimumItems)", span="123-123"];
m7_134 [cluster="Newtonsoft.Json.JsonValidatingReader.ReadAsDateTimeOffset()", file="JsonSchemaWriter.cs", label="Exit Newtonsoft.Json.JsonValidatingReader.ReadAsDateTimeOffset()", span="460-460"];
m7_13 [cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.ReferenceOrWriteSchema(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs", label="Exit Newtonsoft.Json.Schema.JsonSchemaWriter.ReferenceOrWriteSchema(Newtonsoft.Json.Schema.JsonSchema)", span="52-52"];
m7_16 [cluster="Newtonsoft.Json.JsonWriter.WritePropertyName(string)", file="JsonSchemaWriter.cs", label="Entry Newtonsoft.Json.JsonWriter.WritePropertyName(string)", span="456-456"];
m7_19 [cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteSchema(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs", label="Entry Newtonsoft.Json.Schema.JsonSchemaWriter.WriteSchema(Newtonsoft.Json.Schema.JsonSchema)", span="67-67"];
m7_14 [cluster="Newtonsoft.Json.Schema.JsonSchemaResolver.GetSchema(string)", file="JsonSchemaWriter.cs", label="Entry Newtonsoft.Json.Schema.JsonSchemaResolver.GetSchema(string)", span="66-66"];
m7_15 [cluster="Newtonsoft.Json.JsonWriter.WriteStartObject()", file="JsonSchemaWriter.cs", label="Entry Newtonsoft.Json.JsonWriter.WriteStartObject()", span="406-406"];
m7_17 [cluster="Newtonsoft.Json.JsonWriter.WriteValue(string)", file="JsonSchemaWriter.cs", label="Entry Newtonsoft.Json.JsonWriter.WriteValue(string)", span="917-917"];
m7_18 [cluster="Newtonsoft.Json.JsonWriter.WriteEndObject()", file="JsonSchemaWriter.cs", label="Entry Newtonsoft.Json.JsonWriter.WriteEndObject()", span="414-414"];
m7_20 [cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteSchema(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs", label="ValidationUtils.ArgumentNotNull(schema, ''schema'')", span="69-69"];
m7_21 [cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteSchema(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs", label="!_resolver.LoadedSchemas.Contains(schema)", span="71-71"];
m7_30 [cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteSchema(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs", label="WritePropertyIfNotNull(_writer, JsonSchemaConstants.TransientPropertyName, schema.Transient)", span="83-83"];
m7_33 [cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteSchema(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs", label="!schema.AllowAdditionalProperties", span="88-88"];
m7_31 [cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteSchema(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs", label="schema.Type != null", span="84-84"];
m7_32 [cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteSchema(Newtonsoft.Json.Schema.JsonSchema)", color=green, community=0, file="JsonSchemaWriter.cs", label="WriteType(JsonSchemaConstants.TypePropertyName, _writer, schema.Type.Value)", prediction=7, span="86-86"];
m7_34 [cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteSchema(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs", label="_writer.WritePropertyName(JsonSchemaConstants.AdditionalPropertiesPropertyName)", span="90-90"];
m7_35 [cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteSchema(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs", label="_writer.WriteValue(schema.AllowAdditionalProperties)", span="91-91"];
m7_265 [cluster="lambda expression", file="JsonSchemaWriter.cs", label="Entry lambda expression", span="614-614"];
m7_268 [cluster="lambda expression", file="JsonSchemaWriter.cs", label="Entry lambda expression", span="640-640"];
m7_271 [cluster="lambda expression", file="JsonSchemaWriter.cs", label="Entry lambda expression", span="645-645"];
m7_266 [cluster="lambda expression", file="JsonSchemaWriter.cs", label="s.Enum != null", span="614-614"];
m7_267 [cluster="lambda expression", file="JsonSchemaWriter.cs", label="Exit lambda expression", span="614-614"];
m7_269 [cluster="lambda expression", file="JsonSchemaWriter.cs", label="s.UniqueItems", span="640-640"];
m7_270 [cluster="lambda expression", file="JsonSchemaWriter.cs", label="Exit lambda expression", span="640-640"];
m7_272 [cluster="lambda expression", file="JsonSchemaWriter.cs", label="s.Enum != null", span="645-645"];
m7_273 [cluster="lambda expression", file="JsonSchemaWriter.cs", label="Exit lambda expression", span="645-645"];
m7_284 [cluster="lambda expression", file="JsonSchemaWriter.cs", label="Entry lambda expression", span="678-678"];
m7_287 [cluster="lambda expression", file="JsonSchemaWriter.cs", label="Entry lambda expression", span="678-678"];
m7_285 [cluster="lambda expression", file="JsonSchemaWriter.cs", label="!kv.Value", span="678-678"];
m7_286 [cluster="lambda expression", file="JsonSchemaWriter.cs", label="Exit lambda expression", span="678-678"];
m7_288 [cluster="lambda expression", file="JsonSchemaWriter.cs", label="kv.Key", span="678-678"];
m7_289 [cluster="lambda expression", file="JsonSchemaWriter.cs", label="Exit lambda expression", span="678-678"];
m7_135 [cluster="Newtonsoft.Json.JsonReader.ReadAsDateTimeOffset()", file="JsonSchemaWriter.cs", label="Entry Newtonsoft.Json.JsonReader.ReadAsDateTimeOffset()", span="446-446"];
m7_136 [cluster="Newtonsoft.Json.JsonValidatingReader.Read()", file="JsonSchemaWriter.cs", label="Entry Newtonsoft.Json.JsonValidatingReader.Read()", span="475-475"];
m7_63 [cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteSchema(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs", label="token.WriteTo(_writer)", span="134-134"];
m7_70 [cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteSchema(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs", label="schema.Extends != null && schema.Extends.Count > 0", span="147-147"];
m7_85 [cluster="Newtonsoft.Json.JsonValidatingReader.GetCurrentNodeSchemaType()", file="JsonSchemaWriter.cs", label="JsonToken.StartArray", span="376-376"];
m7_95 [cluster="Newtonsoft.Json.JsonValidatingReader.GetCurrentNodeSchemaType()", file="JsonSchemaWriter.cs", label="JsonToken.Null", span="386-386"];
m7_94 [cluster="Newtonsoft.Json.JsonValidatingReader.GetCurrentNodeSchemaType()", file="JsonSchemaWriter.cs", label="return JsonSchemaType.Boolean;", span="385-385"];
m7_93 [cluster="Newtonsoft.Json.JsonValidatingReader.GetCurrentNodeSchemaType()", file="JsonSchemaWriter.cs", label="JsonToken.Boolean", span="384-384"];
m7_92 [cluster="Newtonsoft.Json.JsonValidatingReader.GetCurrentNodeSchemaType()", file="JsonSchemaWriter.cs", label="return JsonSchemaType.String;", span="383-383"];
m7_91 [cluster="Newtonsoft.Json.JsonValidatingReader.GetCurrentNodeSchemaType()", file="JsonSchemaWriter.cs", label="JsonToken.String", span="382-382"];
m7_96 [cluster="Newtonsoft.Json.JsonValidatingReader.GetCurrentNodeSchemaType()", file="JsonSchemaWriter.cs", label="return JsonSchemaType.Null;", span="387-387"];
m7_90 [cluster="Newtonsoft.Json.JsonValidatingReader.GetCurrentNodeSchemaType()", file="JsonSchemaWriter.cs", label="return JsonSchemaType.Float;", span="381-381"];
m7_97 [cluster="Newtonsoft.Json.JsonValidatingReader.GetCurrentNodeSchemaType()", file="JsonSchemaWriter.cs", label="return null;", span="389-389"];
m7_46 [cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteSchema(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs", label="WriteSchemaDictionaryIfNotNull(_writer, JsonSchemaConstants.PatternPropertiesPropertyName, schema.PatternProperties)", span="115-115"];
m7_132 [cluster="Newtonsoft.Json.JsonValidatingReader.ReadAsDateTimeOffset()", file="JsonSchemaWriter.cs", label="ValidateCurrentToken()", span="464-464"];
m7_220 [cluster="Unk.ToList", file="JsonSchemaWriter.cs", label="Entry Unk.ToList", span=""];
m7_256 [cluster="System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource, System.Collections.Generic.IEqualityComparer<TSource>)", file="JsonSchemaWriter.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.Contains<TSource>(TSource, System.Collections.Generic.IEqualityComparer<TSource>)", span="0-0"];
m7_0 [cluster="Newtonsoft.Json.JsonValidatingReader.SchemaScope.SchemaScope(Newtonsoft.Json.Linq.JTokenType, System.Collections.Generic.IList<Newtonsoft.Json.Schema.JsonSchemaModel>)", file="JsonSchemaWriter.cs", label="Entry Newtonsoft.Json.JsonValidatingReader.SchemaScope.SchemaScope(Newtonsoft.Json.Linq.JTokenType, System.Collections.Generic.IList<Newtonsoft.Json.Schema.JsonSchemaModel>)", span="83-83"];
m7_3 [cluster="Newtonsoft.Json.JsonValidatingReader.SchemaScope.SchemaScope(Newtonsoft.Json.Linq.JTokenType, System.Collections.Generic.IList<Newtonsoft.Json.Schema.JsonSchemaModel>)", file="JsonSchemaWriter.cs", label="_requiredProperties = schemas.SelectMany<JsonSchemaModel, string>(GetRequiredProperties).Distinct().ToDictionary(p => p, p => false)", span="88-88"];
m7_1 [cluster="Newtonsoft.Json.JsonValidatingReader.SchemaScope.SchemaScope(Newtonsoft.Json.Linq.JTokenType, System.Collections.Generic.IList<Newtonsoft.Json.Schema.JsonSchemaModel>)", file="JsonSchemaWriter.cs", label="_tokenType = tokenType", span="85-85"];
m7_4 [cluster="Newtonsoft.Json.JsonValidatingReader.SchemaScope.SchemaScope(Newtonsoft.Json.Linq.JTokenType, System.Collections.Generic.IList<Newtonsoft.Json.Schema.JsonSchemaModel>)", file="JsonSchemaWriter.cs", label="tokenType == JTokenType.Array && schemas.Any(s => s.UniqueItems)", span="90-90"];
m7_130 [cluster="Newtonsoft.Json.Utilities.EnumUtils.GetFlagsValues<T>(T)", file="JsonSchemaWriter.cs", label="Entry Newtonsoft.Json.Utilities.EnumUtils.GetFlagsValues<T>(T)", span="74-74"];
m7_133 [cluster="Newtonsoft.Json.Schema.JsonSchemaBuilder.MapType(Newtonsoft.Json.Schema.JsonSchemaType)", file="JsonSchemaWriter.cs", label="Entry Newtonsoft.Json.Schema.JsonSchemaBuilder.MapType(Newtonsoft.Json.Schema.JsonSchemaType)", span="489-489"];
m7_392 [cluster="Newtonsoft.Json.JsonConvert.ToString(double)", file="JsonSchemaWriter.cs", label="Entry Newtonsoft.Json.JsonConvert.ToString(double)", span="293-293"];
m7_89 [cluster="Newtonsoft.Json.JsonValidatingReader.GetCurrentNodeSchemaType()", file="JsonSchemaWriter.cs", label="JsonToken.Float", span="380-380"];
m7_10 [cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.ReferenceOrWriteSchema(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs", label="_writer.WriteValue(schema.Id)", span="58-58"];
m7_304 [cluster="Newtonsoft.Json.JsonValidatingReader.TestType(Newtonsoft.Json.Schema.JsonSchemaModel, Newtonsoft.Json.Schema.JsonSchemaType)", file="JsonSchemaWriter.cs", label="Entry Newtonsoft.Json.JsonValidatingReader.TestType(Newtonsoft.Json.Schema.JsonSchemaModel, Newtonsoft.Json.Schema.JsonSchemaType)", span="998-998"];
m7_433 [cluster="Newtonsoft.Json.JsonValidatingReader.TestType(Newtonsoft.Json.Schema.JsonSchemaModel, Newtonsoft.Json.Schema.JsonSchemaType)", file="JsonSchemaWriter.cs", label="!JsonSchemaGenerator.HasFlag(currentSchema.Type, currentType)", span="1000-1000"];
m7_434 [cluster="Newtonsoft.Json.JsonValidatingReader.TestType(Newtonsoft.Json.Schema.JsonSchemaModel, Newtonsoft.Json.Schema.JsonSchemaType)", file="JsonSchemaWriter.cs", label="RaiseError(''Invalid type. Expected {0} but got {1}.''.FormatWith(CultureInfo.InvariantCulture, currentSchema.Type, currentType), currentSchema)", span="1002-1002"];
m7_436 [cluster="Newtonsoft.Json.JsonValidatingReader.TestType(Newtonsoft.Json.Schema.JsonSchemaModel, Newtonsoft.Json.Schema.JsonSchemaType)", file="JsonSchemaWriter.cs", label="return true;", span="1006-1006"];
m7_435 [cluster="Newtonsoft.Json.JsonValidatingReader.TestType(Newtonsoft.Json.Schema.JsonSchemaModel, Newtonsoft.Json.Schema.JsonSchemaType)", file="JsonSchemaWriter.cs", label="return false;", span="1003-1003"];
m7_437 [cluster="Newtonsoft.Json.JsonValidatingReader.TestType(Newtonsoft.Json.Schema.JsonSchemaModel, Newtonsoft.Json.Schema.JsonSchemaType)", file="JsonSchemaWriter.cs", label="Exit Newtonsoft.Json.JsonValidatingReader.TestType(Newtonsoft.Json.Schema.JsonSchemaModel, Newtonsoft.Json.Schema.JsonSchemaType)", span="998-998"];
m7_80 [cluster="System.Collections.Generic.ICollection<T>.Contains(T)", file="JsonSchemaWriter.cs", label="Entry System.Collections.Generic.ICollection<T>.Contains(T)", span="0-0"];
m7_105 [cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteItems(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs", label="_writer.WriteEndObject()", span="200-200"];
m7_145 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs", label="_model == null", span="494-494"];
m7_146 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs", label="JsonSchemaModelBuilder builder = new JsonSchemaModelBuilder()", span="496-496"];
m7_150 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs", label="_reader.TokenType", span="505-505"];
m7_147 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs", label="_model = builder.Build(_schema)", span="497-497"];
m7_148 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs", label="!JsonTokenUtils.IsStartToken(_reader.TokenType)", span="499-499"];
m7_149 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs", label="Push(new SchemaScope(JTokenType.None, CurrentMemberSchemas))", span="501-501"];
m7_151 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs", label="JsonToken.StartObject", span="507-507"];
m7_156 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs", label="JsonToken.StartArray", span="513-513"];
m7_161 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs", label="JsonToken.StartConstructor", span="519-519"];
m7_165 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs", label="JsonToken.PropertyName", span="524-524"];
m7_169 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs", label="JsonToken.Raw", span="531-531"];
m7_171 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs", label="JsonToken.Integer", span="534-534"];
m7_176 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs", label="JsonToken.Float", span="542-542"];
m7_181 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs", label="JsonToken.String", span="550-550"];
m7_186 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs", label="JsonToken.Boolean", span="558-558"];
m7_191 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs", label="JsonToken.Null", span="566-566"];
m7_196 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs", label="JsonToken.EndObject", span="574-574"];
m7_201 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs", label="JsonToken.EndArray", span="582-582"];
m7_206 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs", label="JsonToken.EndConstructor", span="590-590"];
m7_209 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs", label="JsonToken.Undefined", span="594-594"];
m7_213 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs", label="JsonToken.None", span="600-600"];
m7_214 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs", label="throw new ArgumentOutOfRangeException();", span="604-604"];
m7_152 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs", label="ProcessValue()", span="508-508"];
m7_153 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs", label="IList<JsonSchemaModel> objectSchemas = CurrentMemberSchemas.Where(ValidateObject).ToList()", span="509-509"];
m7_154 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs", label="Push(new SchemaScope(JTokenType.Object, objectSchemas))", span="510-510"];
m7_155 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs", label="WriteToken(CurrentSchemas)", span="511-511"];
m7_157 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs", label="ProcessValue()", span="514-514"];
m7_158 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs", label="IList<JsonSchemaModel> arraySchemas = CurrentMemberSchemas.Where(ValidateArray).ToList()", span="515-515"];
m7_159 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs", label="Push(new SchemaScope(JTokenType.Array, arraySchemas))", span="516-516"];
m7_160 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs", label="WriteToken(CurrentSchemas)", span="517-517"];
m7_162 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs", label="ProcessValue()", span="520-520"];
m7_163 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs", label="Push(new SchemaScope(JTokenType.Constructor, null))", span="521-521"];
m7_164 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs", label="WriteToken(CurrentSchemas)", span="522-522"];
m7_166 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs", label="WriteToken(CurrentSchemas)", span="525-525"];
m7_167 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs", label=CurrentSchemas, span="526-526"];
m7_168 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs", label="ValidatePropertyName(schema)", span="528-528"];
m7_170 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs", label="ProcessValue()", span="532-532"];
m7_172 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs", label="ProcessValue()", span="535-535"];
m7_173 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs", label="WriteToken(CurrentMemberSchemas)", span="536-536"];
m7_174 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs", label=CurrentMemberSchemas, span="537-537"];
m7_175 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs", label="ValidateInteger(schema)", span="539-539"];
m7_177 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs", label="ProcessValue()", span="543-543"];
m7_178 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs", label="WriteToken(CurrentMemberSchemas)", span="544-544"];
m7_179 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs", label=CurrentMemberSchemas, span="545-545"];
m7_180 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs", label="ValidateFloat(schema)", span="547-547"];
m7_182 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs", label="ProcessValue()", span="551-551"];
m7_183 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs", label="WriteToken(CurrentMemberSchemas)", span="552-552"];
m7_184 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs", label=CurrentMemberSchemas, span="553-553"];
m7_185 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs", label="ValidateString(schema)", span="555-555"];
m7_187 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs", label="ProcessValue()", span="559-559"];
m7_188 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs", label="WriteToken(CurrentMemberSchemas)", span="560-560"];
m7_189 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs", label=CurrentMemberSchemas, span="561-561"];
m7_190 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs", label="ValidateBoolean(schema)", span="563-563"];
m7_192 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs", label="ProcessValue()", span="567-567"];
m7_193 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs", label="WriteToken(CurrentMemberSchemas)", span="568-568"];
m7_194 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs", label=CurrentMemberSchemas, span="569-569"];
m7_195 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs", label="ValidateNull(schema)", span="571-571"];
m7_197 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs", label="WriteToken(CurrentSchemas)", span="575-575"];
m7_198 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs", label=CurrentSchemas, span="576-576"];
m7_199 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs", label="ValidateEndObject(schema)", span="578-578"];
m7_200 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs", label="Pop()", span="580-580"];
m7_202 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs", label="WriteToken(CurrentSchemas)", span="583-583"];
m7_203 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs", label=CurrentSchemas, span="584-584"];
m7_204 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs", label="ValidateEndArray(schema)", span="586-586"];
m7_205 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs", label="Pop()", span="588-588"];
m7_207 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs", label="WriteToken(CurrentSchemas)", span="591-591"];
m7_208 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs", label="Pop()", span="592-592"];
m7_210 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs", label="JsonToken.Date", span="595-595"];
m7_211 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs", label="JsonToken.Bytes", span="596-596"];
m7_212 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs", label="WriteToken(CurrentMemberSchemas)", span="598-598"];
m7_215 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", file="JsonSchemaWriter.cs", label="Exit Newtonsoft.Json.JsonValidatingReader.ValidateCurrentToken()", span="491-491"];
m7_224 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateFloat(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="Entry Newtonsoft.Json.JsonValidatingReader.ValidateFloat(Newtonsoft.Json.Schema.JsonSchemaModel)", span="867-867"];
m7_370 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateFloat(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="schema == null", span="869-869"];
m7_372 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateFloat(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="!TestType(schema, JsonSchemaType.Float)", span="874-874"];
m7_374 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateFloat(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="ValidateNotDisallowed(schema)", span="879-879"];
m7_376 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateFloat(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="schema.Maximum != null", span="883-883"];
m7_377 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateFloat(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="value > schema.Maximum", span="885-885"];
m7_378 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateFloat(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="RaiseError(''Float {0} exceeds maximum value of {1}.''.FormatWith(CultureInfo.InvariantCulture, JsonConvert.ToString(value), schema.Maximum), schema)", span="887-887"];
m7_379 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateFloat(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="schema.ExclusiveMaximum && value == schema.Maximum", span="889-889"];
m7_380 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateFloat(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="RaiseError(''Float {0} equals maximum value of {1} and exclusive maximum is true.''.FormatWith(CultureInfo.InvariantCulture, JsonConvert.ToString(value), schema.Maximum), schema)", span="891-891"];
m7_381 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateFloat(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="schema.Minimum != null", span="895-895"];
m7_382 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateFloat(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="value < schema.Minimum", span="897-897"];
m7_383 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateFloat(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="RaiseError(''Float {0} is less than minimum value of {1}.''.FormatWith(CultureInfo.InvariantCulture, JsonConvert.ToString(value), schema.Minimum), schema)", span="899-899"];
m7_384 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateFloat(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="schema.ExclusiveMinimum && value == schema.Minimum", span="901-901"];
m7_385 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateFloat(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="RaiseError(''Float {0} equals minimum value of {1} and exclusive minimum is true.''.FormatWith(CultureInfo.InvariantCulture, JsonConvert.ToString(value), schema.Minimum), schema)", span="903-903"];
m7_386 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateFloat(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="schema.DivisibleBy != null", span="907-907"];
m7_387 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateFloat(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="double remainder = FloatingPointRemainder(value, schema.DivisibleBy.Value)", span="909-909"];
m7_389 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateFloat(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="RaiseError(''Float {0} is not evenly divisible by {1}.''.FormatWith(CultureInfo.InvariantCulture, JsonConvert.ToString(value), schema.DivisibleBy), schema)", span="913-913"];
m7_371 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateFloat(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="return;", span="871-871"];
m7_373 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateFloat(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="return;", span="876-876"];
m7_375 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateFloat(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="double value = Convert.ToDouble(_reader.Value, CultureInfo.InvariantCulture)", span="881-881"];
m7_388 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateFloat(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="!IsZero(remainder)", span="911-911"];
m7_390 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateFloat(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="Exit Newtonsoft.Json.JsonValidatingReader.ValidateFloat(Newtonsoft.Json.Schema.JsonSchemaModel)", span="867-867"];
m7_99 [cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteItems(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs", label="return;", span="186-186"];
m7_100 [cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteItems(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs", label="_writer.WritePropertyName(JsonSchemaConstants.ItemsPropertyName)", span="189-189"];
m7_101 [cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteItems(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs", label="!schema.PositionalItemsValidation", span="191-191"];
m7_102 [cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteItems(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs", label="schema.Items != null && schema.Items.Count > 0", span="193-193"];
m7_103 [cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteItems(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs", label="ReferenceOrWriteSchema(schema.Items[0])", span="195-195"];
m7_9 [cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.ReferenceOrWriteSchema(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs", label="_writer.WritePropertyName(JsonTypeReflector.RefPropertyName)", span="57-57"];
m7_124 [cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteType(string, Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Schema.JsonSchemaType)", file="JsonSchemaWriter.cs", label=types, span="242-242"];
m7_125 [cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteType(string, Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Schema.JsonSchemaType)", file="JsonSchemaWriter.cs", label="writer.WriteValue(JsonSchemaBuilder.MapType(jsonSchemaType))", span="244-244"];
m7_126 [cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteType(string, Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Schema.JsonSchemaType)", file="JsonSchemaWriter.cs", label="writer.WriteEndArray()", span="246-246"];
m7_127 [cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteType(string, Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Schema.JsonSchemaType)", file="JsonSchemaWriter.cs", label="Exit Newtonsoft.Json.Schema.JsonSchemaWriter.WriteType(string, Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Schema.JsonSchemaType)", span="216-216"];
m7_128 [cluster="System.Enum.IsDefined(System.Type, object)", file="JsonSchemaWriter.cs", label="Entry System.Enum.IsDefined(System.Type, object)", span="0-0"];
m7_283 [cluster="string.Join(string, params string[])", file="JsonSchemaWriter.cs", label="Entry string.Join(string, params string[])", span="0-0"];
m7_5 [cluster="Newtonsoft.Json.JsonValidatingReader.SchemaScope.SchemaScope(Newtonsoft.Json.Linq.JTokenType, System.Collections.Generic.IList<Newtonsoft.Json.Schema.JsonSchemaModel>)", file="JsonSchemaWriter.cs", label="IsUniqueArray = true", span="92-92"];
m7_69 [cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteSchema(Newtonsoft.Json.Schema.JsonSchema)", color=green, community=0, file="JsonSchemaWriter.cs", label="WriteType(JsonSchemaConstants.DisallowPropertyName, _writer, schema.Disallow.Value)", prediction=8, span="145-145"];
m7_218 [cluster="Newtonsoft.Json.Utilities.JsonTokenUtils.IsStartToken(Newtonsoft.Json.JsonToken)", file="JsonSchemaWriter.cs", label="Entry Newtonsoft.Json.Utilities.JsonTokenUtils.IsStartToken(Newtonsoft.Json.JsonToken)", span="45-45"];
m7_257 [cluster="Unk.First", file="JsonSchemaWriter.cs", label="Entry Unk.First", span=""];
m7_219 [cluster="Newtonsoft.Json.JsonValidatingReader.ProcessValue()", file="JsonSchemaWriter.cs", label="Entry Newtonsoft.Json.JsonValidatingReader.ProcessValue()", span="847-847"];
m7_364 [cluster="Newtonsoft.Json.JsonValidatingReader.ProcessValue()", file="JsonSchemaWriter.cs", label="_currentScope != null && _currentScope.TokenType == JTokenType.Array", span="849-849"];
m7_365 [cluster="Newtonsoft.Json.JsonValidatingReader.ProcessValue()", file="JsonSchemaWriter.cs", label="_currentScope.ArrayItemCount++", span="851-851"];
m7_366 [cluster="Newtonsoft.Json.JsonValidatingReader.ProcessValue()", file="JsonSchemaWriter.cs", label=CurrentSchemas, span="853-853"];
m7_367 [cluster="Newtonsoft.Json.JsonValidatingReader.ProcessValue()", file="JsonSchemaWriter.cs", label="currentSchema != null\r\n                        && currentSchema.PositionalItemsValidation\r\n                        && !currentSchema.AllowAdditionalItems\r\n                        && (currentSchema.Items == null || _currentScope.ArrayItemCount - 1 >= currentSchema.Items.Count)", span="856-859"];
m7_368 [cluster="Newtonsoft.Json.JsonValidatingReader.ProcessValue()", file="JsonSchemaWriter.cs", label="RaiseError(''Index {0} has not been defined and the schema does not allow additional items.''.FormatWith(CultureInfo.InvariantCulture, _currentScope.ArrayItemCount), currentSchema)", span="861-861"];
m7_369 [cluster="Newtonsoft.Json.JsonValidatingReader.ProcessValue()", file="JsonSchemaWriter.cs", label="Exit Newtonsoft.Json.JsonValidatingReader.ProcessValue()", span="847-847"];
m7_118 [cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteType(string, Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Schema.JsonSchemaType)", file="JsonSchemaWriter.cs", label="return;", span="230-230"];
m7_119 [cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteType(string, Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Schema.JsonSchemaType)", file="JsonSchemaWriter.cs", label="writer.WritePropertyName(propertyName)", span="233-233"];
m7_120 [cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteType(string, Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Schema.JsonSchemaType)", file="JsonSchemaWriter.cs", label="types.Count == 1", span="235-235"];
m7_121 [cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteType(string, Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Schema.JsonSchemaType)", file="JsonSchemaWriter.cs", label="writer.WriteValue(JsonSchemaBuilder.MapType(types[0]))", span="237-237"];
m7_122 [cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteType(string, Newtonsoft.Json.JsonWriter, Newtonsoft.Json.Schema.JsonSchemaType)", file="JsonSchemaWriter.cs", label="return;", span="238-238"];
m7_81 [cluster="System.Collections.Generic.ICollection<T>.Add(T)", file="JsonSchemaWriter.cs", label="Entry System.Collections.Generic.ICollection<T>.Add(T)", span="0-0"];
m7_259 [cluster="System.Collections.Generic.ICollection<T>.Add(T)", file="JsonSchemaWriter.cs", label="Entry System.Collections.Generic.ICollection<T>.Add(T)", span="0-0"];
m7_361 [cluster="System.Convert.ToInt64(object, System.IFormatProvider)", file="JsonSchemaWriter.cs", label="Entry System.Convert.ToInt64(object, System.IFormatProvider)", span="0-0"];
m7_83 [cluster="Newtonsoft.Json.JsonValidatingReader.GetCurrentNodeSchemaType()", file="JsonSchemaWriter.cs", label="JsonToken.StartObject", span="374-374"];
m7_113 [cluster="Newtonsoft.Json.JsonValidatingReader.ReadAsDecimal()", file="JsonSchemaWriter.cs", label="decimal? d = _reader.ReadAsDecimal()", span="425-425"];
m7_114 [cluster="Newtonsoft.Json.JsonValidatingReader.ReadAsDecimal()", file="JsonSchemaWriter.cs", label="ValidateCurrentToken()", span="427-427"];
m7_115 [cluster="Newtonsoft.Json.JsonValidatingReader.ReadAsDecimal()", file="JsonSchemaWriter.cs", label="return d;", span="428-428"];
m7_116 [cluster="Newtonsoft.Json.JsonValidatingReader.ReadAsDecimal()", file="JsonSchemaWriter.cs", label="Exit Newtonsoft.Json.JsonValidatingReader.ReadAsDecimal()", span="423-423"];
m7_123 [cluster="Newtonsoft.Json.JsonReader.ReadAsString()", file="JsonSchemaWriter.cs", label="Entry Newtonsoft.Json.JsonReader.ReadAsString()", span="421-421"];
m7_117 [cluster="Newtonsoft.Json.JsonReader.ReadAsDecimal()", file="JsonSchemaWriter.cs", label="Entry Newtonsoft.Json.JsonReader.ReadAsDecimal()", span="433-433"];
m7_253 [cluster="Newtonsoft.Json.Utilities.JsonTokenUtils.IsEndToken(Newtonsoft.Json.JsonToken)", file="JsonSchemaWriter.cs", label="Entry Newtonsoft.Json.Utilities.JsonTokenUtils.IsEndToken(Newtonsoft.Json.JsonToken)", span="32-32"];
m7_106 [cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteItems(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs", label="return;", span="202-202"];
m7_107 [cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteItems(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs", label="_writer.WriteStartArray()", span="205-205"];
m7_108 [cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteItems(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs", label="schema.Items != null", span="206-206"];
m7_109 [cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteItems(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs", label="schema.Items", span="208-208"];
m7_110 [cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteItems(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs", label="ReferenceOrWriteSchema(itemSchema)", span="210-210"];
m7_6 [cluster="Newtonsoft.Json.JsonValidatingReader.SchemaScope.SchemaScope(Newtonsoft.Json.Linq.JTokenType, System.Collections.Generic.IList<Newtonsoft.Json.Schema.JsonSchemaModel>)", file="JsonSchemaWriter.cs", label="UniqueArrayItems = new List<JToken>()", span="93-93"];
m7_7 [cluster="Newtonsoft.Json.JsonValidatingReader.SchemaScope.SchemaScope(Newtonsoft.Json.Linq.JTokenType, System.Collections.Generic.IList<Newtonsoft.Json.Schema.JsonSchemaModel>)", file="JsonSchemaWriter.cs", label="Exit Newtonsoft.Json.JsonValidatingReader.SchemaScope.SchemaScope(Newtonsoft.Json.Linq.JTokenType, System.Collections.Generic.IList<Newtonsoft.Json.Schema.JsonSchemaModel>)", span="83-83"];
m7_8 [cluster="System.Collections.Generic.IEnumerable<TSource>.SelectMany<TSource, TResult>(System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>)", file="JsonSchemaWriter.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.SelectMany<TSource, TResult>(System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>)", span="0-0"];
m7_11 [cluster="Unk.Any", file="JsonSchemaWriter.cs", label="Entry Unk.Any", span=""];
m7_12 [cluster="System.Collections.Generic.List<T>.List()", file="JsonSchemaWriter.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m7_230 [cluster="System.ArgumentOutOfRangeException.ArgumentOutOfRangeException()", file="JsonSchemaWriter.cs", label="Entry System.ArgumentOutOfRangeException.ArgumentOutOfRangeException()", span="0-0"];
m7_55 [cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteSchema(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs", label="WritePropertyIfNotNull(_writer, JsonSchemaConstants.MaximumItemsPropertyName, schema.MaximumItems)", span="124-124"];
m7_56 [cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteSchema(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs", label="WritePropertyIfNotNull(_writer, JsonSchemaConstants.DivisibleByPropertyName, schema.DivisibleBy)", span="125-125"];
m7_57 [cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteSchema(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs", label="WritePropertyIfNotNull(_writer, JsonSchemaConstants.FormatPropertyName, schema.Format)", span="126-126"];
m7_59 [cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteSchema(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs", label="schema.Enum != null", span="128-128"];
m7_60 [cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteSchema(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs", label="_writer.WritePropertyName(JsonSchemaConstants.EnumPropertyName)", span="130-130"];
m7_58 [cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteSchema(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs", label="WritePropertyIfNotNull(_writer, JsonSchemaConstants.PatternPropertyName, schema.Pattern)", span="127-127"];
m7_61 [cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteSchema(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs", label="_writer.WriteStartArray()", span="131-131"];
m7_223 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateInteger(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="Entry Newtonsoft.Json.JsonValidatingReader.ValidateInteger(Newtonsoft.Json.Schema.JsonSchemaModel)", span="775-775"];
m7_328 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateInteger(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="schema == null", span="777-777"];
m7_330 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateInteger(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="!TestType(schema, JsonSchemaType.Integer)", span="782-782"];
m7_332 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateInteger(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="ValidateNotDisallowed(schema)", span="787-787"];
m7_334 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateInteger(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="schema.Maximum != null", span="791-791"];
m7_335 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateInteger(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="JValue.Compare(JTokenType.Integer, value, schema.Maximum) > 0", span="793-793"];
m7_336 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateInteger(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="RaiseError(''Integer {0} exceeds maximum value of {1}.''.FormatWith(CultureInfo.InvariantCulture, value, schema.Maximum), schema)", span="795-795"];
m7_337 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateInteger(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="schema.ExclusiveMaximum && JValue.Compare(JTokenType.Integer, value, schema.Maximum) == 0", span="797-797"];
m7_338 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateInteger(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="RaiseError(''Integer {0} equals maximum value of {1} and exclusive maximum is true.''.FormatWith(CultureInfo.InvariantCulture, value, schema.Maximum), schema)", span="799-799"];
m7_339 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateInteger(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="schema.Minimum != null", span="803-803"];
m7_340 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateInteger(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="JValue.Compare(JTokenType.Integer, value, schema.Minimum) < 0", span="805-805"];
m7_341 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateInteger(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="RaiseError(''Integer {0} is less than minimum value of {1}.''.FormatWith(CultureInfo.InvariantCulture, value, schema.Minimum), schema)", span="807-807"];
m7_342 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateInteger(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="schema.ExclusiveMinimum && JValue.Compare(JTokenType.Integer, value, schema.Minimum) == 0", span="809-809"];
m7_343 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateInteger(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="RaiseError(''Integer {0} equals minimum value of {1} and exclusive minimum is true.''.FormatWith(CultureInfo.InvariantCulture, value, schema.Minimum), schema)", span="811-811"];
m7_344 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateInteger(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="schema.DivisibleBy != null", span="815-815"];
m7_348 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateInteger(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="bool divisibleNonInteger = !Math.Abs(schema.DivisibleBy.Value - Math.Truncate(schema.DivisibleBy.Value)).Equals(0)", span="824-824"];
m7_351 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateInteger(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="notDivisible = i % new BigInteger(schema.DivisibleBy.Value) != 0", span="831-831"];
m7_352 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateInteger(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="notDivisible = !IsZero(Convert.ToInt64(value, CultureInfo.InvariantCulture) % schema.DivisibleBy.Value)", span="837-837"];
m7_354 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateInteger(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="RaiseError(''Integer {0} is not evenly divisible by {1}.''.FormatWith(CultureInfo.InvariantCulture, JsonConvert.ToString(value), schema.DivisibleBy), schema)", span="842-842"];
m7_329 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateInteger(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="return;", span="779-779"];
m7_331 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateInteger(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="return;", span="784-784"];
m7_333 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateInteger(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="object value = _reader.Value", span="789-789"];
m7_346 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateInteger(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="value is BigInteger", span="819-819"];
m7_347 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateInteger(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="BigInteger i = (BigInteger)value", span="823-823"];
m7_345 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateInteger(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="bool notDivisible", span="817-817"];
m7_350 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateInteger(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="notDivisible = i != 0", span="827-827"];
m7_349 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateInteger(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label=divisibleNonInteger, span="825-825"];
m7_353 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateInteger(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label=notDivisible, span="840-840"];
m7_355 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateInteger(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="Exit Newtonsoft.Json.JsonValidatingReader.ValidateInteger(Newtonsoft.Json.Schema.JsonSchemaModel)", span="775-775"];
m7_391 [cluster="System.Convert.ToDouble(object, System.IFormatProvider)", file="JsonSchemaWriter.cs", label="Entry System.Convert.ToDouble(object, System.IFormatProvider)", span="0-0"];
m7_29 [cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteSchema(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs", label="WritePropertyIfNotNull(_writer, JsonSchemaConstants.HiddenPropertyName, schema.Hidden)", span="82-82"];
m7_428 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateObject(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="Entry Newtonsoft.Json.JsonValidatingReader.ValidateObject(Newtonsoft.Json.Schema.JsonSchemaModel)", span="988-988"];
m7_429 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateObject(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="schema == null", span="990-990"];
m7_431 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateObject(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="return (TestType(schema, JsonSchemaType.Object));", span="995-995"];
m7_430 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateObject(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="return true;", span="992-992"];
m7_432 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateObject(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="Exit Newtonsoft.Json.JsonValidatingReader.ValidateObject(Newtonsoft.Json.Schema.JsonSchemaModel)", span="988-988"];
m7_68 [cluster="Newtonsoft.Json.JsonValidatingReader.JsonValidatingReader(Newtonsoft.Json.JsonReader)", file="JsonSchemaWriter.cs", label="Exit Newtonsoft.Json.JsonValidatingReader.JsonValidatingReader(Newtonsoft.Json.JsonReader)", span="318-318"];
m7_22 [cluster="Newtonsoft.Json.JsonValidatingReader.SchemaScope.GetRequiredProperties(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="Entry Newtonsoft.Json.JsonValidatingReader.SchemaScope.GetRequiredProperties(Newtonsoft.Json.Schema.JsonSchemaModel)", span="97-97"];
m7_23 [cluster="Newtonsoft.Json.JsonValidatingReader.SchemaScope.GetRequiredProperties(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="schema == null || schema.Properties == null", span="99-99"];
m7_24 [cluster="Newtonsoft.Json.JsonValidatingReader.SchemaScope.GetRequiredProperties(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="return Enumerable.Empty<string>();", span="101-101"];
m7_25 [cluster="Newtonsoft.Json.JsonValidatingReader.SchemaScope.GetRequiredProperties(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="return schema.Properties.Where(p => p.Value.Required).Select(p => p.Key);", span="104-104"];
m7_26 [cluster="Newtonsoft.Json.JsonValidatingReader.SchemaScope.GetRequiredProperties(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="Exit Newtonsoft.Json.JsonValidatingReader.SchemaScope.GetRequiredProperties(Newtonsoft.Json.Schema.JsonSchemaModel)", span="97-97"];
m7_40 [cluster="System.Collections.Generic.Stack<T>.Push(T)", file="JsonSchemaWriter.cs", label="Entry System.Collections.Generic.Stack<T>.Push(T)", span="0-0"];
m7_41 [cluster="Newtonsoft.Json.JsonValidatingReader.Pop()", file="JsonSchemaWriter.cs", label="Entry Newtonsoft.Json.JsonValidatingReader.Pop()", span="179-179"];
m7_43 [cluster="Newtonsoft.Json.JsonValidatingReader.Pop()", file="JsonSchemaWriter.cs", label="_currentScope = (_stack.Count != 0)\r\n                ? _stack.Peek()\r\n                : null", span="182-184"];
m7_44 [cluster="Newtonsoft.Json.JsonValidatingReader.Pop()", file="JsonSchemaWriter.cs", label="return poppedScope;", span="186-186"];
m7_45 [cluster="Newtonsoft.Json.JsonValidatingReader.Pop()", file="JsonSchemaWriter.cs", label="Exit Newtonsoft.Json.JsonValidatingReader.Pop()", span="179-179"];
m7_47 [cluster="System.Collections.Generic.Stack<T>.Peek()", file="JsonSchemaWriter.cs", label="Entry System.Collections.Generic.Stack<T>.Peek()", span="0-0"];
m7_48 [cluster="Newtonsoft.Json.JsonValidatingReader.RaiseError(string, Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="Entry Newtonsoft.Json.JsonValidatingReader.RaiseError(string, Newtonsoft.Json.Schema.JsonSchemaModel)", span="289-289"];
m7_49 [cluster="Newtonsoft.Json.JsonValidatingReader.RaiseError(string, Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="IJsonLineInfo lineInfo = this", span="291-291"];
m7_50 [cluster="Newtonsoft.Json.JsonValidatingReader.RaiseError(string, Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="string exceptionMessage = (lineInfo.HasLineInfo())\r\n                ? message + '' Line {0}, position {1}.''.FormatWith(CultureInfo.InvariantCulture, lineInfo.LineNumber, lineInfo.LinePosition)\r\n                : message", span="293-295"];
m7_51 [cluster="Newtonsoft.Json.JsonValidatingReader.RaiseError(string, Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="OnValidationEvent(new JsonSchemaException(exceptionMessage, null, Path, lineInfo.LineNumber, lineInfo.LinePosition))", span="297-297"];
m7_52 [cluster="Newtonsoft.Json.JsonValidatingReader.RaiseError(string, Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="Exit Newtonsoft.Json.JsonValidatingReader.RaiseError(string, Newtonsoft.Json.Schema.JsonSchemaModel)", span="289-289"];
m7_64 [cluster="Newtonsoft.Json.JsonValidatingReader.JsonValidatingReader(Newtonsoft.Json.JsonReader)", file="JsonSchemaWriter.cs", label="Entry Newtonsoft.Json.JsonValidatingReader.JsonValidatingReader(Newtonsoft.Json.JsonReader)", span="318-318"];
m7_66 [cluster="Newtonsoft.Json.JsonValidatingReader.JsonValidatingReader(Newtonsoft.Json.JsonReader)", file="JsonSchemaWriter.cs", label="_reader = reader", span="321-321"];
m7_67 [cluster="Newtonsoft.Json.JsonValidatingReader.JsonValidatingReader(Newtonsoft.Json.JsonReader)", file="JsonSchemaWriter.cs", label="_stack = new Stack<SchemaScope>()", span="322-322"];
m7_42 [cluster="Newtonsoft.Json.JsonValidatingReader.Pop()", file="JsonSchemaWriter.cs", label="SchemaScope poppedScope = _stack.Pop()", span="181-181"];
m7_62 [cluster="Newtonsoft.Json.Schema.ValidationEventArgs.ValidationEventArgs(Newtonsoft.Json.Schema.JsonSchemaException)", file="JsonSchemaWriter.cs", label="Entry Newtonsoft.Json.Schema.ValidationEventArgs.ValidationEventArgs(Newtonsoft.Json.Schema.JsonSchemaException)", span="43-43"];
m7_65 [cluster="Newtonsoft.Json.JsonValidatingReader.JsonValidatingReader(Newtonsoft.Json.JsonReader)", file="JsonSchemaWriter.cs", label="ValidationUtils.ArgumentNotNull(reader, ''reader'')", span="320-320"];
m7_79 [cluster="Newtonsoft.Json.JsonValidatingReader.GetCurrentNodeSchemaType()", file="JsonSchemaWriter.cs", label="Entry Newtonsoft.Json.JsonValidatingReader.GetCurrentNodeSchemaType()", span="370-370"];
m7_222 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidatePropertyName(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="Entry Newtonsoft.Json.JsonValidatingReader.ValidatePropertyName(Newtonsoft.Json.Schema.JsonSchemaModel)", span="930-930"];
m7_400 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidatePropertyName(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="schema == null", span="932-932"];
m7_405 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidatePropertyName(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="!schema.AllowAdditionalProperties", span="944-944"];
m7_406 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidatePropertyName(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="bool propertyDefinied = IsPropertyDefinied(schema, propertyName)", span="946-946"];
m7_408 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidatePropertyName(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="RaiseError(''Property '{0}' has not been defined and the schema does not allow additional properties.''.FormatWith(CultureInfo.InvariantCulture, propertyName), schema)", span="950-950"];
m7_401 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidatePropertyName(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="return;", span="934-934"];
m7_402 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidatePropertyName(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="string propertyName = Convert.ToString(_reader.Value, CultureInfo.InvariantCulture)", span="937-937"];
m7_403 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidatePropertyName(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="_currentScope.RequiredProperties.ContainsKey(propertyName)", span="939-939"];
m7_404 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidatePropertyName(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="_currentScope.RequiredProperties[propertyName] = true", span="941-941"];
m7_409 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidatePropertyName(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="_currentScope.CurrentPropertyName = propertyName", span="954-954"];
m7_407 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidatePropertyName(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="!propertyDefinied", span="948-948"];
m7_410 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidatePropertyName(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="Exit Newtonsoft.Json.JsonValidatingReader.ValidatePropertyName(Newtonsoft.Json.Schema.JsonSchemaModel)", span="930-930"];
m7_260 [cluster="System.Collections.Generic.IEnumerable<TSource>.ContainsValue<TSource>(TSource, System.Collections.Generic.IEqualityComparer<TSource>)", file="JsonSchemaWriter.cs", label="Entry System.Collections.Generic.IEnumerable<TSource>.ContainsValue<TSource>(TSource, System.Collections.Generic.IEqualityComparer<TSource>)", span="163-163"];
m7_255 [cluster="Newtonsoft.Json.JsonWriter.WriteToken(Newtonsoft.Json.JsonReader, bool)", file="JsonSchemaWriter.cs", label="Entry Newtonsoft.Json.JsonWriter.WriteToken(Newtonsoft.Json.JsonReader, bool)", span="493-493"];
m7_358 [cluster="System.Math.Abs(double)", file="JsonSchemaWriter.cs", label="Entry System.Math.Abs(double)", span="0-0"];
m7_84 [cluster="Newtonsoft.Json.JsonValidatingReader.GetCurrentNodeSchemaType()", file="JsonSchemaWriter.cs", label="return JsonSchemaType.Object;", span="375-375"];
m7_129 [cluster="Newtonsoft.Json.JsonReader.ReadAsDateTime()", file="JsonSchemaWriter.cs", label="Entry Newtonsoft.Json.JsonReader.ReadAsDateTime()", span="439-439"];
m7_111 [cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteItems(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs", label="_writer.WriteEndArray()", span="213-213"];
m7_228 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateEndObject(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="Entry Newtonsoft.Json.JsonValidatingReader.ValidateEndObject(Newtonsoft.Json.Schema.JsonSchemaModel)", span="666-666"];
m7_274 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateEndObject(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="schema == null", span="668-668"];
m7_280 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateEndObject(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="RaiseError(''Required properties are missing from object: {0}.''.FormatWith(CultureInfo.InvariantCulture, string.Join('', '', unmatchedRequiredProperties.ToArray())), schema)", span="682-682"];
m7_275 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateEndObject(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="return;", span="670-670"];
m7_276 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateEndObject(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="Dictionary<string, bool> requiredProperties = _currentScope.RequiredProperties", span="673-673"];
m7_277 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateEndObject(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="requiredProperties != null", span="675-675"];
m7_278 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateEndObject(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="List<string> unmatchedRequiredProperties =\r\n                    requiredProperties.Where(kv => !kv.Value).Select(kv => kv.Key).ToList()", span="677-678"];
m7_279 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateEndObject(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="unmatchedRequiredProperties.Count > 0", span="680-680"];
m7_281 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateEndObject(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="Exit Newtonsoft.Json.JsonValidatingReader.ValidateEndObject(Newtonsoft.Json.Schema.JsonSchemaModel)", span="666-666"];
m7_360 [cluster="BigInteger.cstr", file="JsonSchemaWriter.cs", label="Entry BigInteger.cstr", span=""];
m7_104 [cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteItems(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs", label="_writer.WriteStartObject()", span="199-199"];
m7_82 [cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WritePropertyIfNotNull(Newtonsoft.Json.JsonWriter, string, object)", file="JsonSchemaWriter.cs", label="Entry Newtonsoft.Json.Schema.JsonSchemaWriter.WritePropertyIfNotNull(Newtonsoft.Json.JsonWriter, string, object)", span="249-249"];
m7_87 [cluster="Newtonsoft.Json.JsonWriter.WriteStartArray()", file="JsonSchemaWriter.cs", label="Entry Newtonsoft.Json.JsonWriter.WriteStartArray()", span="422-422"];
m7_86 [cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteItems(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs", label="Entry Newtonsoft.Json.Schema.JsonSchemaWriter.WriteItems(Newtonsoft.Json.Schema.JsonSchema)", span="182-182"];
m7_98 [cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteItems(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs", label="schema.Items == null && !schema.PositionalItemsValidation", span="184-184"];
m7_254 [cluster="Newtonsoft.Json.Linq.JTokenWriter.JTokenWriter()", file="JsonSchemaWriter.cs", label="Entry Newtonsoft.Json.Linq.JTokenWriter.JTokenWriter()", span="85-85"];
m7_423 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateArray(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="Entry Newtonsoft.Json.JsonValidatingReader.ValidateArray(Newtonsoft.Json.Schema.JsonSchemaModel)", span="978-978"];
m7_424 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateArray(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="schema == null", span="980-980"];
m7_426 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateArray(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="return (TestType(schema, JsonSchemaType.Array));", span="985-985"];
m7_425 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateArray(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="return true;", span="982-982"];
m7_427 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateArray(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="Exit Newtonsoft.Json.JsonValidatingReader.ValidateArray(Newtonsoft.Json.Schema.JsonSchemaModel)", span="978-978"];
m7_227 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateNull(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="Entry Newtonsoft.Json.JsonValidatingReader.ValidateNull(Newtonsoft.Json.Schema.JsonSchemaModel)", span="707-707"];
m7_298 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateNull(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="schema == null", span="709-709"];
m7_300 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateNull(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="!TestType(schema, JsonSchemaType.Null)", span="714-714"];
m7_302 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateNull(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="ValidateNotDisallowed(schema)", span="719-719"];
m7_299 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateNull(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="return;", span="711-711"];
m7_301 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateNull(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="return;", span="716-716"];
m7_303 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateNull(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="Exit Newtonsoft.Json.JsonValidatingReader.ValidateNull(Newtonsoft.Json.Schema.JsonSchemaModel)", span="707-707"];
m7_261 [cluster="System.IO.StringWriter.StringWriter(System.IFormatProvider)", file="JsonSchemaWriter.cs", label="Entry System.IO.StringWriter.StringWriter(System.IFormatProvider)", span="0-0"];
m7_393 [cluster="Newtonsoft.Json.JsonValidatingReader.FloatingPointRemainder(double, double)", file="JsonSchemaWriter.cs", label="Entry Newtonsoft.Json.JsonValidatingReader.FloatingPointRemainder(double, double)", span="918-918"];
m7_394 [cluster="Newtonsoft.Json.JsonValidatingReader.FloatingPointRemainder(double, double)", file="JsonSchemaWriter.cs", label="return dividend - Math.Floor(dividend / divisor) * divisor;", span="920-920"];
m7_395 [cluster="Newtonsoft.Json.JsonValidatingReader.FloatingPointRemainder(double, double)", file="JsonSchemaWriter.cs", label="Exit Newtonsoft.Json.JsonValidatingReader.FloatingPointRemainder(double, double)", span="918-918"];
m7_359 [cluster="double.Equals(double)", file="JsonSchemaWriter.cs", label="Entry double.Equals(double)", span="0-0"];
m7_327 [cluster="System.Text.RegularExpressions.Regex.IsMatch(string, string)", file="JsonSchemaWriter.cs", label="Entry System.Text.RegularExpressions.Regex.IsMatch(string, string)", span="0-0"];
m7_363 [cluster="Newtonsoft.Json.JsonConvert.ToString(object)", file="JsonSchemaWriter.cs", label="Entry Newtonsoft.Json.JsonConvert.ToString(object)", span="457-457"];
m7_282 [cluster="System.Collections.Generic.List<T>.ToArray()", file="JsonSchemaWriter.cs", label="Entry System.Collections.Generic.List<T>.ToArray()", span="0-0"];
m7_362 [cluster="Newtonsoft.Json.JsonValidatingReader.IsZero(double)", file="JsonSchemaWriter.cs", label="Entry Newtonsoft.Json.JsonValidatingReader.IsZero(double)", span="923-923"];
m7_397 [cluster="Newtonsoft.Json.JsonValidatingReader.IsZero(double)", file="JsonSchemaWriter.cs", label="double epsilon = 2.2204460492503131e-016", span="925-925"];
m7_398 [cluster="Newtonsoft.Json.JsonValidatingReader.IsZero(double)", file="JsonSchemaWriter.cs", label="return Math.Abs(value) < 20.0 * epsilon;", span="927-927"];
m7_399 [cluster="Newtonsoft.Json.JsonValidatingReader.IsZero(double)", file="JsonSchemaWriter.cs", label="Exit Newtonsoft.Json.JsonValidatingReader.IsZero(double)", span="923-923"];
m7_326 [cluster="object.ToString()", file="JsonSchemaWriter.cs", label="Entry object.ToString()", span="0-0"];
m7_112 [cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WriteItems(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSchemaWriter.cs", label="Exit Newtonsoft.Json.Schema.JsonSchemaWriter.WriteItems(Newtonsoft.Json.Schema.JsonSchema)", span="182-182"];
m7_438 [cluster="Newtonsoft.Json.JsonValidatingReader.Newtonsoft.Json.IJsonLineInfo.HasLineInfo()", file="JsonSchemaWriter.cs", label="Entry Newtonsoft.Json.JsonValidatingReader.Newtonsoft.Json.IJsonLineInfo.HasLineInfo()", span="1009-1009"];
m7_439 [cluster="Newtonsoft.Json.JsonValidatingReader.Newtonsoft.Json.IJsonLineInfo.HasLineInfo()", file="JsonSchemaWriter.cs", label="IJsonLineInfo lineInfo = _reader as IJsonLineInfo", span="1011-1011"];
m7_440 [cluster="Newtonsoft.Json.JsonValidatingReader.Newtonsoft.Json.IJsonLineInfo.HasLineInfo()", file="JsonSchemaWriter.cs", label="return lineInfo != null && lineInfo.HasLineInfo();", span="1012-1012"];
m7_441 [cluster="Newtonsoft.Json.JsonValidatingReader.Newtonsoft.Json.IJsonLineInfo.HasLineInfo()", file="JsonSchemaWriter.cs", label="Exit Newtonsoft.Json.JsonValidatingReader.Newtonsoft.Json.IJsonLineInfo.HasLineInfo()", span="1009-1009"];
m7_226 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateBoolean(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="Entry Newtonsoft.Json.JsonValidatingReader.ValidateBoolean(Newtonsoft.Json.Schema.JsonSchemaModel)", span="722-722"];
m7_305 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateBoolean(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="schema == null", span="724-724"];
m7_307 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateBoolean(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="!TestType(schema, JsonSchemaType.Boolean)", span="729-729"];
m7_309 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateBoolean(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="ValidateNotDisallowed(schema)", span="734-734"];
m7_306 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateBoolean(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="return;", span="726-726"];
m7_308 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateBoolean(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="return;", span="731-731"];
m7_310 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateBoolean(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="Exit Newtonsoft.Json.JsonValidatingReader.ValidateBoolean(Newtonsoft.Json.Schema.JsonSchemaModel)", span="722-722"];
m7_229 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateEndArray(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="Entry Newtonsoft.Json.JsonValidatingReader.ValidateEndArray(Newtonsoft.Json.Schema.JsonSchemaModel)", span="687-687"];
m7_290 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateEndArray(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="schema == null", span="689-689"];
m7_293 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateEndArray(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="schema.MaximumItems != null && arrayItemCount > schema.MaximumItems", span="696-696"];
m7_294 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateEndArray(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="RaiseError(''Array item count {0} exceeds maximum count of {1}.''.FormatWith(CultureInfo.InvariantCulture, arrayItemCount, schema.MaximumItems), schema)", span="698-698"];
m7_295 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateEndArray(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="schema.MinimumItems != null && arrayItemCount < schema.MinimumItems", span="701-701"];
m7_296 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateEndArray(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="RaiseError(''Array item count {0} is less than minimum count of {1}.''.FormatWith(CultureInfo.InvariantCulture, arrayItemCount, schema.MinimumItems), schema)", span="703-703"];
m7_291 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateEndArray(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="return;", span="691-691"];
m7_292 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateEndArray(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="int arrayItemCount = _currentScope.ArrayItemCount", span="694-694"];
m7_297 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateEndArray(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="Exit Newtonsoft.Json.JsonValidatingReader.ValidateEndArray(Newtonsoft.Json.Schema.JsonSchemaModel)", span="687-687"];
m7_137 [cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WritePropertyIfNotNull(Newtonsoft.Json.JsonWriter, string, object)", file="JsonSchemaWriter.cs", label="value != null", span="251-251"];
m7_138 [cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WritePropertyIfNotNull(Newtonsoft.Json.JsonWriter, string, object)", file="JsonSchemaWriter.cs", label="writer.WritePropertyName(propertyName)", span="253-253"];
m7_139 [cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WritePropertyIfNotNull(Newtonsoft.Json.JsonWriter, string, object)", file="JsonSchemaWriter.cs", label="writer.WriteValue(value)", span="254-254"];
m7_140 [cluster="Newtonsoft.Json.Schema.JsonSchemaWriter.WritePropertyIfNotNull(Newtonsoft.Json.JsonWriter, string, object)", file="JsonSchemaWriter.cs", label="Exit Newtonsoft.Json.Schema.JsonSchemaWriter.WritePropertyIfNotNull(Newtonsoft.Json.JsonWriter, string, object)", span="249-249"];
m7_141 [cluster="Newtonsoft.Json.JsonWriter.WriteValue(object)", file="JsonSchemaWriter.cs", label="Entry Newtonsoft.Json.JsonWriter.WriteValue(object)", span="1396-1396"];
m7_142 [cluster="Newtonsoft.Json.JsonValidatingReader.Read()", file="JsonSchemaWriter.cs", label="Newtonsoft.Json.Schema.JsonSchemaWriter", span=""];
m7_143 [cluster="Newtonsoft.Json.JsonValidatingReader.Read()", file="JsonSchemaWriter.cs", label="Exit Newtonsoft.Json.JsonValidatingReader.Read()", span="475-475"];
m7_225 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateString(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="Entry Newtonsoft.Json.JsonValidatingReader.ValidateString(Newtonsoft.Json.Schema.JsonSchemaModel)", span="737-737"];
m7_311 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateString(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="schema == null", span="739-739"];
m7_313 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateString(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="!TestType(schema, JsonSchemaType.String)", span="744-744"];
m7_315 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateString(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="ValidateNotDisallowed(schema)", span="749-749"];
m7_317 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateString(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="schema.MaximumLength != null && value.Length > schema.MaximumLength", span="753-753"];
m7_318 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateString(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="RaiseError(''String '{0}' exceeds maximum length of {1}.''.FormatWith(CultureInfo.InvariantCulture, value, schema.MaximumLength), schema)", span="755-755"];
m7_319 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateString(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="schema.MinimumLength != null && value.Length < schema.MinimumLength", span="758-758"];
m7_320 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateString(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="RaiseError(''String '{0}' is less than minimum length of {1}.''.FormatWith(CultureInfo.InvariantCulture, value, schema.MinimumLength), schema)", span="760-760"];
m7_321 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateString(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="schema.Patterns != null", span="763-763"];
m7_322 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateString(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="schema.Patterns", span="765-765"];
m7_324 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateString(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="RaiseError(''String '{0}' does not match regex pattern '{1}'.''.FormatWith(CultureInfo.InvariantCulture, value, pattern), schema)", span="769-769"];
m7_312 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateString(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="return;", span="741-741"];
m7_314 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateString(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="return;", span="746-746"];
m7_316 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateString(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="string value = _reader.Value.ToString()", span="751-751"];
m7_323 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateString(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="!Regex.IsMatch(value, pattern)", span="767-767"];
m7_325 [cluster="Newtonsoft.Json.JsonValidatingReader.ValidateString(Newtonsoft.Json.Schema.JsonSchemaModel)", file="JsonSchemaWriter.cs", label="Exit Newtonsoft.Json.JsonValidatingReader.ValidateString(Newtonsoft.Json.Schema.JsonSchemaModel)", span="737-737"];
m7_221 [cluster="Newtonsoft.Json.JsonValidatingReader.WriteToken(System.Collections.Generic.IList<Newtonsoft.Json.Schema.JsonSchemaModel>)", file="JsonSchemaWriter.cs", label="Entry Newtonsoft.Json.JsonValidatingReader.WriteToken(System.Collections.Generic.IList<Newtonsoft.Json.Schema.JsonSchemaModel>)", span="608-608"];
m7_231 [cluster="Newtonsoft.Json.JsonValidatingReader.WriteToken(System.Collections.Generic.IList<Newtonsoft.Json.Schema.JsonSchemaModel>)", file="JsonSchemaWriter.cs", label=_stack, span="610-610"];
m7_233 [cluster="Newtonsoft.Json.JsonValidatingReader.WriteToken(System.Collections.Generic.IList<Newtonsoft.Json.Schema.JsonSchemaModel>)", file="JsonSchemaWriter.cs", label="isInUniqueArray || schemas.Any(s => s.Enum != null)", span="614-614"];
m7_245 [cluster="Newtonsoft.Json.JsonValidatingReader.WriteToken(System.Collections.Generic.IList<Newtonsoft.Json.Schema.JsonSchemaModel>)", file="JsonSchemaWriter.cs", label="schemas.Any(s => s.Enum != null)", span="645-645"];
m7_246 [cluster="Newtonsoft.Json.JsonValidatingReader.WriteToken(System.Collections.Generic.IList<Newtonsoft.Json.Schema.JsonSchemaModel>)", file="JsonSchemaWriter.cs", label=schemas, span="647-647"];
m7_232 [cluster="Newtonsoft.Json.JsonValidatingReader.WriteToken(System.Collections.Generic.IList<Newtonsoft.Json.Schema.JsonSchemaModel>)", file="JsonSchemaWriter.cs", label="bool isInUniqueArray = (schemaScope.TokenType == JTokenType.Array && schemaScope.IsUniqueArray && schemaScope.ArrayItemCount > 0)", span="612-612"];
m7_234 [cluster="Newtonsoft.Json.JsonValidatingReader.WriteToken(System.Collections.Generic.IList<Newtonsoft.Json.Schema.JsonSchemaModel>)", file="JsonSchemaWriter.cs", label="schemaScope.CurrentItemWriter == null", span="616-616"];
m7_236 [cluster="Newtonsoft.Json.JsonValidatingReader.WriteToken(System.Collections.Generic.IList<Newtonsoft.Json.Schema.JsonSchemaModel>)", file="JsonSchemaWriter.cs", label="schemaScope.CurrentItemWriter = new JTokenWriter()", span="623-623"];
m7_237 [cluster="Newtonsoft.Json.JsonValidatingReader.WriteToken(System.Collections.Generic.IList<Newtonsoft.Json.Schema.JsonSchemaModel>)", file="JsonSchemaWriter.cs", label="schemaScope.CurrentItemWriter.WriteToken(_reader, false)", span="626-626"];
m7_238 [cluster="Newtonsoft.Json.JsonValidatingReader.WriteToken(System.Collections.Generic.IList<Newtonsoft.Json.Schema.JsonSchemaModel>)", file="JsonSchemaWriter.cs", label="schemaScope.CurrentItemWriter.Top == 0 && _reader.TokenType != JsonToken.PropertyName", span="629-629"];
m7_239 [cluster="Newtonsoft.Json.JsonValidatingReader.WriteToken(System.Collections.Generic.IList<Newtonsoft.Json.Schema.JsonSchemaModel>)", file="JsonSchemaWriter.cs", label="JToken finishedItem = schemaScope.CurrentItemWriter.Token", span="631-631"];
m7_240 [cluster="Newtonsoft.Json.JsonValidatingReader.WriteToken(System.Collections.Generic.IList<Newtonsoft.Json.Schema.JsonSchemaModel>)", file="JsonSchemaWriter.cs", label="schemaScope.CurrentItemWriter = null", span="634-634"];
m7_242 [cluster="Newtonsoft.Json.JsonValidatingReader.WriteToken(System.Collections.Generic.IList<Newtonsoft.Json.Schema.JsonSchemaModel>)", file="JsonSchemaWriter.cs", label="schemaScope.UniqueArrayItems.Contains(finishedItem, JToken.EqualityComparer)", span="638-638"];
m7_243 [cluster="Newtonsoft.Json.JsonValidatingReader.WriteToken(System.Collections.Generic.IList<Newtonsoft.Json.Schema.JsonSchemaModel>)", file="JsonSchemaWriter.cs", label="RaiseError(''Non-unique array item at index {0}.''.FormatWith(CultureInfo.InvariantCulture, schemaScope.ArrayItemCount - 1), schemaScope.Schemas.First(s => s.UniqueItems))", span="640-640"];
m7_244 [cluster="Newtonsoft.Json.JsonValidatingReader.WriteToken(System.Collections.Generic.IList<Newtonsoft.Json.Schema.JsonSchemaModel>)", file="JsonSchemaWriter.cs", label="schemaScope.UniqueArrayItems.Add(finishedItem)", span="643-643"];
m7_241 [cluster="Newtonsoft.Json.JsonValidatingReader.WriteToken(System.Collections.Generic.IList<Newtonsoft.Json.Schema.JsonSchemaModel>)", file="JsonSchemaWriter.cs", label=isInUniqueArray, span="636-636"];
m7_235 [cluster="Newtonsoft.Json.JsonValidatingReader.WriteToken(System.Collections.Generic.IList<Newtonsoft.Json.Schema.JsonSchemaModel>)", file="JsonSchemaWriter.cs", label="JsonTokenUtils.IsEndToken(_reader.TokenType)", span="618-618"];
m7_248 [cluster="Newtonsoft.Json.JsonValidatingReader.WriteToken(System.Collections.Generic.IList<Newtonsoft.Json.Schema.JsonSchemaModel>)", file="JsonSchemaWriter.cs", label="!schema.Enum.ContainsValue(finishedItem, JToken.EqualityComparer)", span="651-651"];
m7_250 [cluster="Newtonsoft.Json.JsonValidatingReader.WriteToken(System.Collections.Generic.IList<Newtonsoft.Json.Schema.JsonSchemaModel>)", file="JsonSchemaWriter.cs", label="finishedItem.WriteTo(new JsonTextWriter(sw))", span="654-654"];
m7_247 [cluster="Newtonsoft.Json.JsonValidatingReader.WriteToken(System.Collections.Generic.IList<Newtonsoft.Json.Schema.JsonSchemaModel>)", file="JsonSchemaWriter.cs", label="schema.Enum != null", span="649-649"];
m7_251 [cluster="Newtonsoft.Json.JsonValidatingReader.WriteToken(System.Collections.Generic.IList<Newtonsoft.Json.Schema.JsonSchemaModel>)", file="JsonSchemaWriter.cs", label="RaiseError(''Value {0} is not defined in enum.''.FormatWith(CultureInfo.InvariantCulture, sw.ToString()), schema)", span="656-656"];
m7_249 [cluster="Newtonsoft.Json.JsonValidatingReader.WriteToken(System.Collections.Generic.IList<Newtonsoft.Json.Schema.JsonSchemaModel>)", file="JsonSchemaWriter.cs", label="StringWriter sw = new StringWriter(CultureInfo.InvariantCulture)", span="653-653"];
m7_252 [cluster="Newtonsoft.Json.JsonValidatingReader.WriteToken(System.Collections.Generic.IList<Newtonsoft.Json.Schema.JsonSchemaModel>)", file="JsonSchemaWriter.cs", label="Exit Newtonsoft.Json.JsonValidatingReader.WriteToken(System.Collections.Generic.IList<Newtonsoft.Json.Schema.JsonSchemaModel>)", span="608-608"];
m7_411 [cluster="System.Convert.ToString(object, System.IFormatProvider)", file="JsonSchemaWriter.cs", label="Entry System.Convert.ToString(object, System.IFormatProvider)", span="0-0"];
m7_216 [cluster="Newtonsoft.Json.Schema.JsonSchemaModelBuilder.JsonSchemaModelBuilder()", file="JsonSchemaWriter.cs", label="Entry Newtonsoft.Json.Schema.JsonSchemaModelBuilder.JsonSchemaModelBuilder()", span="37-37"];
m7_144 [cluster="Newtonsoft.Json.JsonReader.Read()", file="JsonSchemaWriter.cs", label="Entry Newtonsoft.Json.JsonReader.Read()", span="409-409"];
m7_264 [cluster="System.IO.StringWriter.ToString()", file="JsonSchemaWriter.cs", label="Entry System.IO.StringWriter.ToString()", span="0-0"];
m7_258 [cluster="Unk.RaiseError", file="JsonSchemaWriter.cs", label="Entry Unk.RaiseError", span=""];
m7_356 [cluster="Newtonsoft.Json.Linq.JValue.Compare(Newtonsoft.Json.Linq.JTokenType, object, object)", file="JsonSchemaWriter.cs", label="Entry Newtonsoft.Json.Linq.JValue.Compare(Newtonsoft.Json.Linq.JTokenType, object, object)", span="248-248"];
m7_442 [file="JsonSchemaWriter.cs", label="Newtonsoft.Json.JsonValidatingReader.SchemaScope", span=""];
m7_443 [file="JsonSchemaWriter.cs", label="Newtonsoft.Json.JsonValidatingReader", span=""];
m8_50 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.ValidateWithOutEventHandlerSuccess()", file="JsonSerializer.cs", label="JToken stringToken = JToken.FromObject(''pie lol'')", span="99-99"];
m8_51 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.ValidateWithOutEventHandlerSuccess()", file="JsonSerializer.cs", label="stringToken.Validate(schema)", span="100-100"];
m8_52 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.ValidateWithOutEventHandlerSuccess()", file="JsonSerializer.cs", label="Exit Newtonsoft.Json.Tests.Schema.ExtensionsTests.ValidateWithOutEventHandlerSuccess()", span="96-96"];
m8_57 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.ValidateFailureWithOutLineInfoBecauseOfEndToken()", file="JsonSerializer.cs", label="o.Validate(schema, (sender, args) => errors.Add(args.Message))", span="110-110"];
m8_53 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.ValidateFailureWithOutLineInfoBecauseOfEndToken()", file="JsonSerializer.cs", label="Entry Newtonsoft.Json.Tests.Schema.ExtensionsTests.ValidateFailureWithOutLineInfoBecauseOfEndToken()", span="104-104"];
m8_54 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.ValidateFailureWithOutLineInfoBecauseOfEndToken()", file="JsonSerializer.cs", label="JsonSchema schema = JsonSchema.Parse(''{'properties':{'lol':{'required':true}}}'')", span="106-106"];
m8_59 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.ValidateFailureWithOutLineInfoBecauseOfEndToken()", file="JsonSerializer.cs", label="Assert.AreEqual(1, errors.Count)", span="113-113"];
m8_60 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.ValidateFailureWithOutLineInfoBecauseOfEndToken()", file="JsonSerializer.cs", label="Exit Newtonsoft.Json.Tests.Schema.ExtensionsTests.ValidateFailureWithOutLineInfoBecauseOfEndToken()", span="104-104"];
m8_55 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.ValidateFailureWithOutLineInfoBecauseOfEndToken()", file="JsonSerializer.cs", label="JObject o = JObject.Parse(''{}'')", span="107-107"];
m8_56 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.ValidateFailureWithOutLineInfoBecauseOfEndToken()", file="JsonSerializer.cs", label="List<string> errors = new List<string>()", span="109-109"];
m8_58 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.ValidateFailureWithOutLineInfoBecauseOfEndToken()", file="JsonSerializer.cs", label="Assert.AreEqual(''Required properties are missing from object: lol.'', errors[0])", span="112-112"];
m8_61 [cluster="Newtonsoft.Json.Linq.JObject.Parse(string)", file="JsonSerializer.cs", label="Entry Newtonsoft.Json.Linq.JObject.Parse(string)", span="323-323"];
m8_75 [cluster="Newtonsoft.Json.Linq.JToken.ToString()", file="JsonSerializer.cs", label="Entry Newtonsoft.Json.Linq.JToken.ToString()", span="393-393"];
m8_76 [cluster="lambda expression", file="JsonSerializer.cs", label="Entry lambda expression", span="123-123"];
m8_77 [cluster="lambda expression", file="JsonSerializer.cs", label="errors.Add(args.Path + '' - '' + args.Message)", span="123-123"];
m8_78 [cluster="lambda expression", file="JsonSerializer.cs", label="Exit lambda expression", span="123-123"];
m8_79 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.Blog()", file="JsonSerializer.cs", label="Entry Newtonsoft.Json.Tests.Schema.ExtensionsTests.Blog()", span="131-131"];
m8_80 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.Blog()", color=green, community=0, file="JsonSerializer.cs", label="string schemaJson = @''\r\n{\r\n  ''''description'''': ''''A person schema'''',\r\n  ''''type'''': ''''object'''',\r\n  ''''properties'''':\r\n  {\r\n    ''''name'''': {''''type'''':''''string''''},\r\n    ''''hobbies'''': {\r\n      ''''type'''': ''''array'''',\r\n      ''''items'''': {''''type'''':''''string''''}\r\n    }\r\n  }\r\n}\r\n''", prediction=9, span="133-146"];
m8_81 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.Blog()", file="JsonSerializer.cs", label="JsonSchema schema = JsonSchema.Parse(schemaJson)", span="156-156"];
m8_138 [cluster="lambda expression", file="JsonSerializer.cs", label="JsonConvert.DeserializeObject<Currency>(@''{''''Case'''':''''abcdefg'''',''''Fields'''':[]}'')", span="248-248"];
m8_152 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UndefinedPropertyOnNoPropertySchema()", file="JsonSerializer.cs", label="Assert.AreEqual(''Property 'g' has not been defined and the schema does not allow additional properties. Line 1, position 5.'', errors[0])", span="235-235"];
m8_153 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UndefinedPropertyOnNoPropertySchema()", file="JsonSerializer.cs", label="Exit Newtonsoft.Json.Tests.Schema.ExtensionsTests.UndefinedPropertyOnNoPropertySchema()", span="219-219"];
m8_154 [cluster="lambda expression", file="JsonSerializer.cs", label="Entry lambda expression", span="232-232"];
m8_239 [cluster="Newtonsoft.Json.Linq.JObject.JObject(object)", file="JsonSerializer.cs", label="Entry Newtonsoft.Json.Linq.JObject.JObject(object)", span="111-111"];
m8_275 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.Items_Positional()", file="JsonSerializer.cs", label="Entry Newtonsoft.Json.Tests.Schema.ExtensionsTests.Items_Positional()", span="438-438"];
m8_282 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.Items_Positional()", file="JsonSerializer.cs", label="Assert.AreEqual(0, errorMessages.Count)", span="451-451"];
m8_281 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.Items_Positional()", file="JsonSerializer.cs", label="Assert.IsTrue(a.IsValid(schema, out errorMessages))", span="450-450"];
m8_277 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.Items_Positional()", file="JsonSerializer.cs", label="schema.Items = new List<JsonSchema>\r\n        {\r\n          new JsonSchema { Type = JsonSchemaType.Object },\r\n          new JsonSchema { Type = JsonSchemaType.Integer }\r\n        }", span="441-445"];
m8_276 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.Items_Positional()", file="JsonSerializer.cs", label="JsonSchema schema = new JsonSchema()", span="440-440"];
m8_279 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.Items_Positional()", file="JsonSerializer.cs", label="JArray a = new JArray(new JObject(), 1)", span="448-448"];
m8_280 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.Items_Positional()", file="JsonSerializer.cs", label="IList<string> errorMessages", span="449-449"];
m8_278 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.Items_Positional()", file="JsonSerializer.cs", label="schema.PositionalItemsValidation = true", span="446-446"];
m8_283 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.Items_Positional()", file="JsonSerializer.cs", label="Exit Newtonsoft.Json.Tests.Schema.ExtensionsTests.Items_Positional()", span="438-438"];
m8_34 [cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializePerformance()", file="JsonSerializer.cs", label="Stopwatch ts = new Stopwatch()", span="100-100"];
m8_105 [cluster="string.Join(string, params string[])", file="JsonSerializer.cs", label="Entry string.Join(string, params string[])", span="0-0"];
m8_139 [cluster="lambda expression", file="JsonSerializer.cs", label="Exit lambda expression", span="248-248"];
m8_133 [cluster="Newtonsoft.Json.Tests.TestObjects.Person.Person()", file="JsonSerializer.cs", label="Entry Newtonsoft.Json.Tests.TestObjects.Person.Person()", span="34-34"];
m8_134 [cluster="Newtonsoft.Json.Tests.TestObjects.PersonRaw.PersonRaw()", file="JsonSerializer.cs", label="Entry Newtonsoft.Json.Tests.TestObjects.PersonRaw.PersonRaw()", span="30-30"];
m8_135 [cluster="Newtonsoft.Json.Tests.TestObjects.CircularReferenceClass.CircularReferenceClass()", file="JsonSerializer.cs", label="Entry Newtonsoft.Json.Tests.TestObjects.CircularReferenceClass.CircularReferenceClass()", span="27-27"];
m8_82 [cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.CreateUnion(System.Type)", file="JsonSerializer.cs", label="Entry Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.CreateUnion(System.Type)", span="187-187"];
m8_83 [cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.CreateUnion(System.Type)", file="JsonSerializer.cs", label="Union u = new Union()", span="189-189"];
m8_84 [cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.CreateUnion(System.Type)", file="JsonSerializer.cs", label="u.TagReader = FSharpFunc<object, int>.ToConverter(FSharpValue.PreComputeUnionTagReader(t, null))", span="191-191"];
m8_164 [cluster="lambda expression", file="JsonSerializer.cs", label="JValue v = new JValue(10)", span="248-248"];
m8_165 [cluster="lambda expression", file="JsonSerializer.cs", label="v.Validate(schema)", span="249-249"];
m8_166 [cluster="lambda expression", file="JsonSerializer.cs", label="Exit lambda expression", span="242-250"];
m8_132 [cluster="lambda expression", file="JsonSerializer.cs", label="Exit lambda expression", span="233-233"];
m8_267 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_Property()", file="JsonSerializer.cs", label="Entry Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_Property()", span="415-415"];
m8_273 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_Property()", file="JsonSerializer.cs", label="Assert.AreEqual(1, errorMessages.Count)", span="434-434"];
m8_272 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_Property()", file="JsonSerializer.cs", label="Assert.IsFalse(o.IsValid(schema, out errorMessages))", span="433-433"];
m8_268 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_Property()", file="JsonSerializer.cs", label="JsonSchema schema = new JsonSchema()", span="417-417"];
m8_270 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_Property()", file="JsonSerializer.cs", label="JObject o = new JObject(\r\n        new JProperty(''bar'', new JArray(1, 2, 3, 3))\r\n        )", span="429-431"];
m8_271 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_Property()", file="JsonSerializer.cs", label="IList<string> errorMessages", span="432-432"];
m8_269 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_Property()", file="JsonSerializer.cs", label="schema.Properties = new Dictionary<string, JsonSchema>\r\n        {\r\n          {\r\n            ''bar'',\r\n            new JsonSchema\r\n            {\r\n              UniqueItems = true\r\n            }\r\n          }\r\n        }", span="418-427"];
m8_274 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_Property()", file="JsonSerializer.cs", label="Exit Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_Property()", span="415-415"];
m8_284 [cluster="Newtonsoft.Json.Linq.JObject.JObject()", file="JsonSerializer.cs", label="Entry Newtonsoft.Json.Linq.JObject.JObject()", span="85-85"];
m8_104 [cluster="System.Collections.Generic.List<T>.ToArray()", file="JsonSerializer.cs", label="Entry System.Collections.Generic.List<T>.ToArray()", span="0-0"];
m8_38 [cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializePerformance()", file="JsonSerializer.cs", label="JsonConvert.SerializeObject(values)", span="105-105"];
m8_39 [cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializePerformance()", file="JsonSerializer.cs", label="i++", span="103-103"];
m8_40 [cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializePerformance()", file="JsonSerializer.cs", label="ts.Stop()", span="108-108"];
m8_15 [cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializeUnionWithConverter()", file="JsonSerializer.cs", label="Shape c = JsonConvert.DeserializeObject<Shape>(json, new DoubleDoubleConverter())", span="72-72"];
m8_203 [cluster="lambda expression", file="JsonSerializer.cs", label="Entry lambda expression", span="302-309"];
m8_119 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.GenerateSchemaAndSerializeFromTypeTests()", file="JsonSerializer.cs", label="GenerateSchemaAndSerializeFromType(new ClassWithArray())", span="199-199"];
m8_118 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.GenerateSchemaAndSerializeFromTypeTests()", file="JsonSerializer.cs", label="GenerateSchemaAndSerializeFromType(new CircularReferenceWithIdClass())", span="198-198"];
m8_120 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.GenerateSchemaAndSerializeFromTypeTests()", file="JsonSerializer.cs", label="GenerateSchemaAndSerializeFromType(new ClassWithGuid())", span="200-200"];
m8_130 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.GenerateSchemaAndSerializeFromTypeTests()", file="JsonSerializer.cs", label="Exit Newtonsoft.Json.Tests.Schema.ExtensionsTests.GenerateSchemaAndSerializeFromTypeTests()", span="189-189"];
m8_131 [cluster="System.Version.Version(string)", file="JsonSerializer.cs", label="Entry System.Version.Version(string)", span="0-0"];
m8_137 [cluster="Newtonsoft.Json.Tests.TestObjects.ClassWithArray.ClassWithArray()", file="JsonSerializer.cs", label="Entry Newtonsoft.Json.Tests.TestObjects.ClassWithArray.ClassWithArray()", span="35-35"];
m8_143 [cluster="System.DateTime.DateTime(int, int, int, int, int, int, System.DateTimeKind)", file="JsonSerializer.cs", label="Entry System.DateTime.DateTime(int, int, int, int, int, int, System.DateTimeKind)", span="0-0"];
m8_144 [cluster="System.TimeSpan.FromTicks(long)", file="JsonSerializer.cs", label="Entry System.TimeSpan.FromTicks(long)", span="0-0"];
m8_145 [cluster="Newtonsoft.Json.Tests.TestObjects.JsonPropertyWithHandlingValues.JsonPropertyWithHandlingValues()", file="JsonSerializer.cs", label="Entry Newtonsoft.Json.Tests.TestObjects.JsonPropertyWithHandlingValues.JsonPropertyWithHandlingValues()", span="29-29"];
m8_149 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UndefinedPropertyOnNoPropertySchema()", file="JsonSerializer.cs", label="List<string> errors = new List<string>()", span="231-231"];
m8_150 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UndefinedPropertyOnNoPropertySchema()", file="JsonSerializer.cs", label="o.Validate(schema, (sender, args) => errors.Add(args.Message))", span="232-232"];
m8_151 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UndefinedPropertyOnNoPropertySchema()", file="JsonSerializer.cs", label="Assert.AreEqual(1, errors.Count)", span="234-234"];
m8_155 [cluster="lambda expression", file="JsonSerializer.cs", label="errors.Add(args.Message)", span="232-232"];
m8_156 [cluster="lambda expression", file="JsonSerializer.cs", label="Exit lambda expression", span="232-232"];
m8_157 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.ExclusiveMaximum_Int()", file="JsonSerializer.cs", label="Entry Newtonsoft.Json.Tests.Schema.ExtensionsTests.ExclusiveMaximum_Int()", span="239-239"];
m8_161 [cluster="lambda expression", file="JsonSerializer.cs", label="JsonSchema schema = new JsonSchema()", span="244-244"];
m8_162 [cluster="lambda expression", file="JsonSerializer.cs", label="schema.Maximum = 10", span="245-245"];
m8_163 [cluster="lambda expression", file="JsonSerializer.cs", label="schema.ExclusiveMaximum = true", span="246-246"];
m8_167 [cluster="Newtonsoft.Json.Schema.JsonSchema.JsonSchema()", file="JsonSerializer.cs", label="Entry Newtonsoft.Json.Schema.JsonSchema.JsonSchema()", span="220-220"];
m8_168 [cluster="Newtonsoft.Json.Linq.JValue.JValue(long)", file="JsonSerializer.cs", label="Entry Newtonsoft.Json.Linq.JValue.JValue(long)", span="69-69"];
m8_169 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.ExclusiveMaximum_Float()", file="JsonSerializer.cs", label="Entry Newtonsoft.Json.Tests.Schema.ExtensionsTests.ExclusiveMaximum_Float()", span="254-254"];
m8_43 [cluster="System.Collections.Generic.List<T>.List()", file="JsonSerializer.cs", label="Entry System.Collections.Generic.List<T>.List()", span="0-0"];
m8_42 [cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializePerformance()", file="JsonSerializer.cs", label="Exit Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializePerformance()", span="90-90"];
m8_44 [cluster="Newtonsoft.Json.Tests.TestObjects.Shape.NewCircle(double)", file="JsonSerializer.cs", label="Entry Newtonsoft.Json.Tests.TestObjects.Shape.NewCircle(double)", span="60-60"];
m8_45 [cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting)", file="JsonSerializer.cs", label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting)", span="525-525"];
m8_31 [cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializePerformance()", file="JsonSerializer.cs", label="Entry Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializePerformance()", span="90-90"];
m8_35 [cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializePerformance()", file="JsonSerializer.cs", label="ts.Start()", span="101-101"];
m8_46 [cluster="System.Diagnostics.Stopwatch.Stopwatch()", file="JsonSerializer.cs", label="Entry System.Diagnostics.Stopwatch.Stopwatch()", span="0-0"];
m8_62 [cluster="Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string)", file="JsonSerializer.cs", label="Entry Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string)", span="739-739"];
m8_63 [cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializeUnionWithFields()", file="JsonSerializer.cs", label="Entry Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializeUnionWithFields()", span="140-140"];
m8_32 [cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializePerformance()", file="JsonSerializer.cs", label="List<Shape> values = new List<Shape>\r\n            {\r\n                Shape.NewRectangle(10.0, 5.0),\r\n                Shape.NewCircle(7.5)\r\n            }", span="92-96"];
m8_36 [cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializePerformance()", file="JsonSerializer.cs", label="int i = 0", span="103-103"];
m8_33 [cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializePerformance()", file="JsonSerializer.cs", label="string json = JsonConvert.SerializeObject(values, Formatting.Indented)", span="98-98"];
m8_37 [cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializePerformance()", file="JsonSerializer.cs", label="i < 2000", span="103-103"];
m8_177 [cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializeUnionWithTypeNameHandlingAndReferenceTracking()", file="JsonSerializer.cs", label="Assert.AreEqual(10.0, r.width)", span="298-298"];
m8_188 [cluster="lambda expression", file="JsonSerializer.cs", label="v.Validate(schema)", span="279-279"];
m8_198 [cluster="lambda expression", file="JsonSerializer.cs", label="v.Validate(schema)", span="294-294"];
m8_207 [cluster="lambda expression", file="JsonSerializer.cs", label="v.Validate(schema)", span="308-308"];
m8_64 [cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializeUnionWithFields()", file="JsonSerializer.cs", label="string json = JsonConvert.SerializeObject(Shape.NewRectangle(10.0, 5.0))", span="142-142"];
m8_107 [cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.Serialize()", file="JsonSerializer.cs", label="Shape value = Shape.NewRectangle(10.0, 5.0)", span="214-214"];
m8_173 [cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializeUnionWithTypeNameHandlingAndReferenceTracking()", file="JsonSerializer.cs", label="Shape c = JsonConvert.DeserializeObject<Shape>(json)", span="292-292"];
m8_176 [cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializeUnionWithTypeNameHandlingAndReferenceTracking()", file="JsonSerializer.cs", label="Assert.AreEqual(5.0, r.length)", span="297-297"];
m8_178 [cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializeUnionWithTypeNameHandlingAndReferenceTracking()", file="JsonSerializer.cs", label="Exit Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializeUnionWithTypeNameHandlingAndReferenceTracking()", span="282-282"];
m8_184 [cluster="lambda expression", file="JsonSerializer.cs", label="JsonSchema schema = new JsonSchema()", span="274-274"];
m8_187 [cluster="lambda expression", file="JsonSerializer.cs", label="JValue v = new JValue(10)", span="278-278"];
m8_189 [cluster="lambda expression", file="JsonSerializer.cs", label="Exit lambda expression", span="272-280"];
m8_194 [cluster="lambda expression", file="JsonSerializer.cs", label="JsonSchema schema = new JsonSchema()", span="289-289"];
m8_197 [cluster="lambda expression", file="JsonSerializer.cs", label="JValue v = new JValue(10.1)", span="293-293"];
m8_199 [cluster="lambda expression", file="JsonSerializer.cs", label="Exit lambda expression", span="287-295"];
m8_204 [cluster="lambda expression", file="JsonSerializer.cs", label="JsonSchema schema = new JsonSchema()", span="304-304"];
m8_206 [cluster="lambda expression", file="JsonSerializer.cs", label="JValue v = new JValue(10)", span="307-307"];
m8_208 [cluster="lambda expression", file="JsonSerializer.cs", label="Exit lambda expression", span="302-309"];
m8_108 [cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.Serialize()", file="JsonSerializer.cs", label="Union union = CreateUnion(value.GetType())", span="216-216"];
m8_160 [cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.DeserializeBasicUnion_FieldsObject()", file="JsonSerializer.cs", label="Exit Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.DeserializeBasicUnion_FieldsObject()", span="270-270"];
m8_172 [cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializeUnionWithTypeNameHandlingAndReferenceTracking()", file="JsonSerializer.cs", label="Assert.AreEqual(@''{''''Case'''':''''Rectangle'''',''''Fields'''':[10.0,5.0]}'', json)", span="290-290"];
m8_183 [cluster="lambda expression", file="JsonSerializer.cs", label="Entry lambda expression", span="272-280"];
m8_193 [cluster="lambda expression", file="JsonSerializer.cs", label="Entry lambda expression", span="287-295"];
m8_174 [cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializeUnionWithTypeNameHandlingAndReferenceTracking()", file="JsonSerializer.cs", label="Assert.AreEqual(true, c.IsRectangle)", span="293-293"];
m8_175 [cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializeUnionWithTypeNameHandlingAndReferenceTracking()", file="JsonSerializer.cs", label="Shape.Rectangle r = (Shape.Rectangle)c", span="295-295"];
m8_185 [cluster="lambda expression", file="JsonSerializer.cs", label="schema.Minimum = 10", span="275-275"];
m8_186 [cluster="lambda expression", file="JsonSerializer.cs", label="schema.ExclusiveMinimum = true", span="276-276"];
m8_195 [cluster="lambda expression", file="JsonSerializer.cs", label="schema.Minimum = 10.1", span="290-290"];
m8_196 [cluster="lambda expression", file="JsonSerializer.cs", label="schema.ExclusiveMinimum = true", span="291-291"];
m8_205 [cluster="lambda expression", file="JsonSerializer.cs", label="schema.DivisibleBy = 3", span="305-305"];
m8_109 [cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.Serialize()", file="JsonSerializer.cs", label="int tag = union.TagReader.Invoke(value)", span="218-218"];
m8_9 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.IsValid()", file="JsonSerializer.cs", label="Assert.AreEqual(false, stringToken.IsValid(schema, out errorMessages))", span="60-60"];
m8_10 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.IsValid()", file="JsonSerializer.cs", label="Assert.AreEqual(1, errorMessages.Count)", span="61-61"];
m8_11 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.IsValid()", file="JsonSerializer.cs", label="Assert.AreEqual(''Invalid type. Expected Integer but got String.'', errorMessages[0])", span="62-62"];
m8_103 [cluster="Newtonsoft.Json.Linq.JToken.ReadFrom(Newtonsoft.Json.JsonReader)", file="JsonSerializer.cs", label="Entry Newtonsoft.Json.Linq.JToken.ReadFrom(Newtonsoft.Json.JsonReader)", span="1763-1763"];
m8_106 [cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.Serialize()", file="JsonSerializer.cs", label="Entry Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.Serialize()", span="212-212"];
m8_180 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.ExclusiveMinimum_Int()", file="JsonSerializer.cs", label="Entry Newtonsoft.Json.Tests.Schema.ExtensionsTests.ExclusiveMinimum_Int()", span="269-269"];
m8_217 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_SimpleDuplicate()", file="JsonSerializer.cs", label="Entry Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_SimpleDuplicate()", span="323-323"];
m8_223 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_SimpleDuplicate()", file="JsonSerializer.cs", label="Assert.AreEqual(2, errorMessages.Count)", span="331-331"];
m8_224 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_SimpleDuplicate()", file="JsonSerializer.cs", label="Assert.AreEqual(''Non-unique array item at index 3.'', errorMessages[0])", span="332-332"];
m8_225 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_SimpleDuplicate()", file="JsonSerializer.cs", label="Assert.AreEqual(''Non-unique array item at index 4.'', errorMessages[1])", span="333-333"];
m8_222 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_SimpleDuplicate()", file="JsonSerializer.cs", label="Assert.IsFalse(a.IsValid(schema, out errorMessages))", span="330-330"];
m8_218 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_SimpleDuplicate()", file="JsonSerializer.cs", label="JsonSchema schema = new JsonSchema()", span="325-325"];
m8_220 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_SimpleDuplicate()", file="JsonSerializer.cs", label="JArray a = new JArray(1, 2, 3, 2, 2)", span="328-328"];
m8_221 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_SimpleDuplicate()", file="JsonSerializer.cs", label="IList<string> errorMessages", span="329-329"];
m8_219 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_SimpleDuplicate()", file="JsonSerializer.cs", label="schema.UniqueItems = true", span="326-326"];
m8_226 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_SimpleDuplicate()", file="JsonSerializer.cs", label="Exit Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_SimpleDuplicate()", span="323-323"];
m8_0 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.IsValid()", file="JsonSerializer.cs", label="Entry Newtonsoft.Json.Tests.Schema.ExtensionsTests.IsValid()", span="48-48"];
m8_1 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.IsValid()", file="JsonSerializer.cs", label="JsonSchema schema = JsonSchema.Parse(''{'type':'integer'}'')", span="50-50"];
m8_2 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.IsValid()", file="JsonSerializer.cs", label="JToken stringToken = JToken.FromObject(''pie'')", span="51-51"];
m8_3 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.IsValid()", file="JsonSerializer.cs", label="JToken integerToken = JToken.FromObject(1)", span="52-52"];
m8_170 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.ExclusiveMaximum_Float()", file="JsonSerializer.cs", label="ExceptionAssert.Throws<JsonSchemaException>(''Float 10.1 equals maximum value of 10.1 and exclusive maximum is true.'',\r\n      () =>\r\n      {\r\n        JsonSchema schema = new JsonSchema();\r\n        schema.Maximum = 10.1;\r\n        schema.ExclusiveMaximum = true;\r\n\r\n        JValue v = new JValue(10.1);\r\n        v.Validate(schema);\r\n      })", span="256-265"];
m8_171 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.ExclusiveMaximum_Float()", file="JsonSerializer.cs", label="Exit Newtonsoft.Json.Tests.Schema.ExtensionsTests.ExclusiveMaximum_Float()", span="254-254"];
m8_99 [cluster="Unk.ToConverter", file="JsonSerializer.cs", label="Entry Unk.ToConverter", span=""];
m8_136 [cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", file="JsonSerializer.cs", label="Entry Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(System.Action, params string[])", span="354-354"];
m8_227 [cluster="Unk.IsFalse", file="JsonSerializer.cs", label="Entry Unk.IsFalse", span=""];
m8_22 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.ValidateWithEventHandler()", file="JsonSerializer.cs", label="stringToken.Validate(schema, (sender, args) => errors.Add(args.Message))", span="72-72"];
m8_13 [cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializeUnionWithConverter()", file="JsonSerializer.cs", label="string json = JsonConvert.SerializeObject(Shape.NewRectangle(10.0, 5.0), new DoubleDoubleConverter())", span="68-68"];
m8_121 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.GenerateSchemaAndSerializeFromTypeTests()", file="JsonSerializer.cs", label="GenerateSchemaAndSerializeFromType(new NullableDateTimeTestClass())", span="202-202"];
m8_122 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.GenerateSchemaAndSerializeFromTypeTests()", file="JsonSerializer.cs", label="GenerateSchemaAndSerializeFromType(new DataSet())", span="205-205"];
m8_123 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.GenerateSchemaAndSerializeFromTypeTests()", file="JsonSerializer.cs", label="GenerateSchemaAndSerializeFromType(new object())", span="207-207"];
m8_124 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.GenerateSchemaAndSerializeFromTypeTests()", file="JsonSerializer.cs", label="GenerateSchemaAndSerializeFromType(1)", span="208-208"];
m8_125 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.GenerateSchemaAndSerializeFromTypeTests()", file="JsonSerializer.cs", label="GenerateSchemaAndSerializeFromType(''Hi'')", span="209-209"];
m8_126 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.GenerateSchemaAndSerializeFromTypeTests()", file="JsonSerializer.cs", label="GenerateSchemaAndSerializeFromType(new DateTime(2000, 12, 29, 23, 59, 0, DateTimeKind.Utc))", span="210-210"];
m8_127 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.GenerateSchemaAndSerializeFromTypeTests()", file="JsonSerializer.cs", label="GenerateSchemaAndSerializeFromType(TimeSpan.FromTicks(1000000))", span="211-211"];
m8_128 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.GenerateSchemaAndSerializeFromTypeTests()", file="JsonSerializer.cs", label="GenerateSchemaAndSerializeFromType(DBNull.Value)", span="213-213"];
m8_241 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_NestedDuplicate()", file="JsonSerializer.cs", label="Entry Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_NestedDuplicate()", span="352-352"];
m8_249 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_NestedDuplicate()", file="JsonSerializer.cs", label="Assert.AreEqual(4, errorMessages.Count)", span="374-374"];
m8_250 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_NestedDuplicate()", file="JsonSerializer.cs", label="Assert.AreEqual(''Non-unique array item at index 1.'', errorMessages[0])", span="375-375"];
m8_251 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_NestedDuplicate()", file="JsonSerializer.cs", label="Assert.AreEqual(''Non-unique array item at index 3.'', errorMessages[1])", span="376-376"];
m8_252 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_NestedDuplicate()", file="JsonSerializer.cs", label="Assert.AreEqual(''Non-unique array item at index 1.'', errorMessages[2])", span="377-377"];
m8_253 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_NestedDuplicate()", file="JsonSerializer.cs", label="Assert.AreEqual(''Non-unique array item at index 4.'', errorMessages[3])", span="378-378"];
m8_248 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_NestedDuplicate()", file="JsonSerializer.cs", label="Assert.IsFalse(a.IsValid(schema, out errorMessages))", span="373-373"];
m8_244 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_NestedDuplicate()", file="JsonSerializer.cs", label="schema.Items = new List<JsonSchema>\r\n        {\r\n          new JsonSchema\r\n            {\r\n              UniqueItems = true\r\n            }\r\n        }", span="356-362"];
m8_242 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_NestedDuplicate()", file="JsonSerializer.cs", label="JsonSchema schema = new JsonSchema()", span="354-354"];
m8_246 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_NestedDuplicate()", file="JsonSerializer.cs", label="JArray a = new JArray(\r\n        new JArray(1, 2),\r\n        new JArray(1, 1),\r\n        new JArray(3, 4),\r\n        new JArray(1, 2),\r\n        new JArray(1, 1)\r\n        )", span="365-371"];
m8_247 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_NestedDuplicate()", file="JsonSerializer.cs", label="IList<string> errorMessages", span="372-372"];
m8_243 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_NestedDuplicate()", file="JsonSerializer.cs", label="schema.UniqueItems = true", span="355-355"];
m8_245 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_NestedDuplicate()", file="JsonSerializer.cs", label="schema.PositionalItemsValidation = false", span="363-363"];
m8_254 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_NestedDuplicate()", file="JsonSerializer.cs", label="Exit Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_NestedDuplicate()", span="352-352"];
m8_17 [cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializeUnionWithConverter()", file="JsonSerializer.cs", label="Shape.Rectangle r = (Shape.Rectangle)c", span="75-75"];
m8_65 [cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializeUnionWithFields()", file="JsonSerializer.cs", label="Assert.AreEqual(@''{''''Case'''':''''Rectangle'''',''''Fields'''':[10.0,5.0]}'', json)", span="144-144"];
m8_66 [cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializeUnionWithFields()", file="JsonSerializer.cs", label="Exit Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializeUnionWithFields()", span="140-140"];
m8_67 [cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.DeserializeBasicUnion()", file="JsonSerializer.cs", label="Entry Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.DeserializeBasicUnion()", span="148-148"];
m8_69 [cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.DeserializeBasicUnion()", file="JsonSerializer.cs", label="Assert.AreEqual(Currency.AUD, c)", span="151-151"];
m8_68 [cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.DeserializeBasicUnion()", file="JsonSerializer.cs", label="Currency c = JsonConvert.DeserializeObject<Currency>(@''{''''Case'''':''''AUD''''}'')", span="150-150"];
m8_71 [cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.DeserializeBasicUnion()", file="JsonSerializer.cs", label="Assert.AreEqual(Currency.EUR, c)", span="154-154"];
m8_70 [cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.DeserializeBasicUnion()", file="JsonSerializer.cs", label="c = JsonConvert.DeserializeObject<Currency>(@''{''''Case'''':''''EUR''''}'')", span="153-153"];
m8_72 [cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.DeserializeBasicUnion()", file="JsonSerializer.cs", label="c = JsonConvert.DeserializeObject<Currency>(@''null'')", span="156-156"];
m8_73 [cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.DeserializeBasicUnion()", file="JsonSerializer.cs", label="Assert.AreEqual(null, c)", span="157-157"];
m8_158 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.ExclusiveMaximum_Int()", file="JsonSerializer.cs", label="ExceptionAssert.Throws<JsonSchemaException>(''Integer 10 equals maximum value of 10 and exclusive maximum is true.'',\r\n      () =>\r\n      {\r\n        JsonSchema schema = new JsonSchema();\r\n        schema.Maximum = 10;\r\n        schema.ExclusiveMaximum = true;\r\n\r\n        JValue v = new JValue(10);\r\n        v.Validate(schema);\r\n      })", span="241-250"];
m8_159 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.ExclusiveMaximum_Int()", file="JsonSerializer.cs", label="Exit Newtonsoft.Json.Tests.Schema.ExtensionsTests.ExclusiveMaximum_Int()", span="239-239"];
m8_18 [cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializeUnionWithConverter()", file="JsonSerializer.cs", label="Assert.AreEqual(5.0, r.length)", span="77-77"];
m8_19 [cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializeUnionWithConverter()", file="JsonSerializer.cs", label="Assert.AreEqual(10.0, r.width)", span="78-78"];
m8_20 [cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializeUnionWithConverter()", file="JsonSerializer.cs", label="Exit Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializeUnionWithConverter()", span="66-66"];
m8_25 [cluster="Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string, params Newtonsoft.Json.JsonConverter[])", file="JsonSerializer.cs", label="Entry Newtonsoft.Json.JsonConvert.DeserializeObject<T>(string, params Newtonsoft.Json.JsonConverter[])", span="787-787"];
m8_21 [cluster="Newtonsoft.Json.Tests.TestObjects.Shape.NewRectangle(double, double)", file="JsonSerializer.cs", label="Entry Newtonsoft.Json.Tests.TestObjects.Shape.NewRectangle(double, double)", span="72-72"];
m8_23 [cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, params Newtonsoft.Json.JsonConverter[])", file="JsonSerializer.cs", label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object, params Newtonsoft.Json.JsonConverter[])", span="536-536"];
m8_24 [cluster="Unk.AreEqual", file="JsonSerializer.cs", label="Entry Unk.AreEqual", span=""];
m8_26 [cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializeBasicUnion()", file="JsonSerializer.cs", label="Entry Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializeBasicUnion()", span="82-82"];
m8_27 [cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializeBasicUnion()", file="JsonSerializer.cs", label="string json = JsonConvert.SerializeObject(Currency.AUD)", span="84-84"];
m8_28 [cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializeBasicUnion()", file="JsonSerializer.cs", label="Assert.AreEqual(@''{''''Case'''':''''AUD''''}'', json)", span="86-86"];
m8_110 [cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.Serialize()", file="JsonSerializer.cs", label="UnionCase caseInfo = union.Cases.Single(c => c.Tag == tag)", span="220-220"];
m8_111 [cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.Serialize()", file="JsonSerializer.cs", label="object[] fields = caseInfo.FieldReader.Invoke(value)", span="222-222"];
m8_112 [cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.Serialize()", file="JsonSerializer.cs", label="Assert.AreEqual(10, fields[0])", span="224-224"];
m8_113 [cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.Serialize()", file="JsonSerializer.cs", label="Assert.AreEqual(5, fields[1])", span="225-225"];
m8_114 [cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.Serialize()", file="JsonSerializer.cs", label="Exit Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.Serialize()", span="212-212"];
m8_115 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.GenerateSchemaAndSerializeFromTypeTests()", file="JsonSerializer.cs", label="GenerateSchemaAndSerializeFromType(new Person())", span="195-195"];
m8_116 [cluster="System.Converter<TInput, TOutput>.Invoke(TInput)", file="JsonSerializer.cs", label="Entry System.Converter<TInput, TOutput>.Invoke(TInput)", span="0-0"];
m8_117 [cluster="Unk.Single", file="JsonSerializer.cs", label="Entry Unk.Single", span=""];
m8_129 [cluster="object.ToString()", file="JsonSerializer.cs", label="Entry object.ToString()", span="0-0"];
m8_101 [cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.UnionCase.UnionCase()", file="JsonSerializer.cs", label="Entry Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.UnionCase.UnionCase()", span="178-178"];
m8_48 [cluster="System.Diagnostics.Stopwatch.Stop()", file="JsonSerializer.cs", label="Entry System.Diagnostics.Stopwatch.Stop()", span="0-0"];
m8_49 [cluster="System.Console.WriteLine(double)", file="JsonSerializer.cs", label="Entry System.Console.WriteLine(double)", span="0-0"];
m8_209 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_SimpleUnique()", file="JsonSerializer.cs", label="Entry Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_SimpleUnique()", span="313-313"];
m8_213 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_SimpleUnique()", file="JsonSerializer.cs", label="Assert.IsTrue(a.IsValid(schema))", span="319-319"];
m8_210 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_SimpleUnique()", file="JsonSerializer.cs", label="JsonSchema schema = new JsonSchema()", span="315-315"];
m8_212 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_SimpleUnique()", file="JsonSerializer.cs", label="JArray a = new JArray(1, 2, 3)", span="318-318"];
m8_211 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_SimpleUnique()", file="JsonSerializer.cs", label="schema.UniqueItems = true", span="316-316"];
m8_214 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_SimpleUnique()", file="JsonSerializer.cs", label="Exit Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_SimpleUnique()", span="313-313"];
m8_97 [cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.Union.Union()", file="JsonSerializer.cs", label="Entry Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.Union.Union()", span="172-172"];
m8_14 [cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializeUnionWithConverter()", file="JsonSerializer.cs", label="Assert.AreEqual(@''{''''Case'''':''''Rectangle'''',''''Fields'''':[20.0,10.0]}'', json)", span="70-70"];
m8_200 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.DivisibleBy_Int()", file="JsonSerializer.cs", label="Entry Newtonsoft.Json.Tests.Schema.ExtensionsTests.DivisibleBy_Int()", span="299-299"];
m8_201 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.DivisibleBy_Int()", file="JsonSerializer.cs", label="ExceptionAssert.Throws<JsonSchemaException>(''Integer 10 is not evenly divisible by 3.'',\r\n        () =>\r\n          {\r\n            JsonSchema schema = new JsonSchema();\r\n            schema.DivisibleBy = 3;\r\n\r\n            JValue v = new JValue(10);\r\n            v.Validate(schema);\r\n          })", span="301-309"];
m8_202 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.DivisibleBy_Int()", file="JsonSerializer.cs", label="Exit Newtonsoft.Json.Tests.Schema.ExtensionsTests.DivisibleBy_Int()", span="299-299"];
m8_146 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UndefinedPropertyOnNoPropertySchema()", file="JsonSerializer.cs", label="Entry Newtonsoft.Json.Tests.Schema.ExtensionsTests.UndefinedPropertyOnNoPropertySchema()", span="219-219"];
m8_147 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UndefinedPropertyOnNoPropertySchema()", file="JsonSerializer.cs", label="JsonSchema schema = JsonSchema.Parse(@''{\r\n  ''''description'''': ''''test'''',\r\n  ''''type'''': ''''object'''',\r\n  ''''additionalProperties'''': false,\r\n  ''''properties'''': {\r\n  }\r\n}'')", span="221-227"];
m8_148 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UndefinedPropertyOnNoPropertySchema()", file="JsonSerializer.cs", label="JObject o = JObject.Parse(''{'g':1}'')", span="229-229"];
m8_85 [cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.CreateUnion(System.Type)", file="JsonSerializer.cs", label="u.Cases = new List<UnionCase>()", span="192-192"];
m8_93 [cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.CreateUnion(System.Type)", file="JsonSerializer.cs", label="unionCase.Constructor = FSharpFunc<object[], object>.ToConverter(FSharpValue.PreComputeUnionConstructor(unionCaseInfo, null))", span="203-203"];
m8_92 [cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.CreateUnion(System.Type)", file="JsonSerializer.cs", label="unionCase.FieldReader = FSharpFunc<object, object[]>.ToConverter(FSharpValue.PreComputeUnionReader(unionCaseInfo, null))", span="202-202"];
m8_88 [cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.CreateUnion(System.Type)", file="JsonSerializer.cs", label="UnionCase unionCase = new UnionCase()", span="198-198"];
m8_91 [cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.CreateUnion(System.Type)", file="JsonSerializer.cs", label="unionCase.Fields = unionCaseInfo.GetFields()", span="201-201"];
m8_94 [cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.CreateUnion(System.Type)", file="JsonSerializer.cs", label="u.Cases.Add(unionCase)", span="205-205"];
m8_95 [cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.CreateUnion(System.Type)", file="JsonSerializer.cs", label="return u;", span="208-208"];
m8_86 [cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.CreateUnion(System.Type)", file="JsonSerializer.cs", label="UnionCaseInfo[] cases = FSharpType.GetUnionCases(t, null)", span="194-194"];
m8_87 [cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.CreateUnion(System.Type)", file="JsonSerializer.cs", label=cases, span="196-196"];
m8_89 [cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.CreateUnion(System.Type)", file="JsonSerializer.cs", label="unionCase.Tag = unionCaseInfo.Tag", span="199-199"];
m8_90 [cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.CreateUnion(System.Type)", file="JsonSerializer.cs", label="unionCase.Name = unionCaseInfo.Name", span="200-200"];
m8_96 [cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.CreateUnion(System.Type)", file="JsonSerializer.cs", label="Exit Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.CreateUnion(System.Type)", span="187-187"];
m8_30 [cluster="Newtonsoft.Json.Linq.JToken.Validate(Newtonsoft.Json.Schema.JsonSchema, Newtonsoft.Json.Schema.ValidationEventHandler)", file="JsonSerializer.cs", label="Entry Newtonsoft.Json.Linq.JToken.Validate(Newtonsoft.Json.Schema.JsonSchema, Newtonsoft.Json.Schema.ValidationEventHandler)", span="86-86"];
m8_266 [cluster="System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", file="JsonSerializer.cs", label="Entry System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()", span="0-0"];
m8_5 [cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.DoubleDoubleConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="JsonSerializer.cs", label="Entry Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.DoubleDoubleConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", span="52-52"];
m8_6 [cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.DoubleDoubleConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="JsonSerializer.cs", label="double d = (double)reader.Value", span="54-54"];
m8_8 [cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.DoubleDoubleConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="JsonSerializer.cs", label="Exit Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.DoubleDoubleConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", span="52-52"];
m8_4 [cluster="Newtonsoft.Json.JsonWriter.WriteValue(double)", file="JsonSerializer.cs", label="Entry Newtonsoft.Json.JsonWriter.WriteValue(double)", span="875-875"];
m8_7 [cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.DoubleDoubleConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, object, Newtonsoft.Json.JsonSerializer)", file="JsonSerializer.cs", label="return d / 2;", span="56-56"];
m8_12 [cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializeUnionWithConverter()", file="JsonSerializer.cs", label="Entry Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializeUnionWithConverter()", span="66-66"];
m8_240 [cluster="Newtonsoft.Json.Linq.JProperty.JProperty(string, object)", file="JsonSerializer.cs", label="Entry Newtonsoft.Json.Linq.JProperty.JProperty(string, object)", span="192-192"];
m8_100 [cluster="Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting)", file="JsonSerializer.cs", label="Entry Newtonsoft.Json.JsonConvert.SerializeObject(object, Newtonsoft.Json.Formatting)", span="839-839"];
m8_181 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.ExclusiveMinimum_Int()", file="JsonSerializer.cs", label="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests", span=""];
m8_182 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.ExclusiveMinimum_Int()", file="JsonSerializer.cs", label=tag, span=""];
m8_29 [cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializeBasicUnion()", file="JsonSerializer.cs", label="Exit Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializeBasicUnion()", span="82-82"];
m8_142 [cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.DeserializeBasicUnion_MismatchedFieldCount()", file="JsonSerializer.cs", label="Exit Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.DeserializeBasicUnion_MismatchedFieldCount()", span="252-252"];
m8_16 [cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.SerializeUnionWithConverter()", file="JsonSerializer.cs", label="Assert.AreEqual(true, c.IsRectangle)", span="73-73"];
m8_102 [cluster="System.IO.StringReader.StringReader(string)", file="JsonSerializer.cs", label="Entry System.IO.StringReader.StringReader(string)", span="0-0"];
m8_41 [cluster="Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(string, System.Action)", file="JsonSerializer.cs", label="Entry Newtonsoft.Json.Tests.ExceptionAssert.Throws<TException>(string, System.Action)", span="121-121"];
m8_98 [cluster="Unk.PreComputeUnionTagReader", file="JsonSerializer.cs", label="Entry Unk.PreComputeUnionTagReader", span=""];
m8_179 [cluster="Newtonsoft.Json.JsonSerializerSettings.JsonSerializerSettings()", file="JsonSerializer.cs", label="Entry Newtonsoft.Json.JsonSerializerSettings.JsonSerializerSettings()", span="359-359"];
m8_228 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_ComplexDuplicate()", file="JsonSerializer.cs", label="Entry Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_ComplexDuplicate()", span="337-337"];
m8_234 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_ComplexDuplicate()", file="JsonSerializer.cs", label="Assert.AreEqual(3, errorMessages.Count)", span="345-345"];
m8_235 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_ComplexDuplicate()", file="JsonSerializer.cs", label="Assert.AreEqual(''Non-unique array item at index 4.'', errorMessages[0])", span="346-346"];
m8_236 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_ComplexDuplicate()", file="JsonSerializer.cs", label="Assert.AreEqual(''Non-unique array item at index 6.'', errorMessages[1])", span="347-347"];
m8_237 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_ComplexDuplicate()", file="JsonSerializer.cs", label="Assert.AreEqual(''Non-unique array item at index 7.'', errorMessages[2])", span="348-348"];
m8_233 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_ComplexDuplicate()", file="JsonSerializer.cs", label="Assert.IsFalse(a.IsValid(schema, out errorMessages))", span="344-344"];
m8_229 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_ComplexDuplicate()", file="JsonSerializer.cs", label="JsonSchema schema = new JsonSchema()", span="339-339"];
m8_231 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_ComplexDuplicate()", file="JsonSerializer.cs", label="JArray a = new JArray(1, new JObject(new JProperty(''value'', ''value!'')), 3, 2, new JObject(new JProperty(''value'', ''value!'')), 4, 2, new JObject(new JProperty(''value'', ''value!'')))", span="342-342"];
m8_232 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_ComplexDuplicate()", file="JsonSerializer.cs", label="IList<string> errorMessages", span="343-343"];
m8_230 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_ComplexDuplicate()", file="JsonSerializer.cs", label="schema.UniqueItems = true", span="340-340"];
m8_238 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_ComplexDuplicate()", file="JsonSerializer.cs", label="Exit Newtonsoft.Json.Tests.Schema.ExtensionsTests.UniqueItems_ComplexDuplicate()", span="337-337"];
m8_190 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.ExclusiveMinimum_Float()", file="JsonSerializer.cs", label="Entry Newtonsoft.Json.Tests.Schema.ExtensionsTests.ExclusiveMinimum_Float()", span="284-284"];
m8_191 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.ExclusiveMinimum_Float()", file="JsonSerializer.cs", label="ExceptionAssert.Throws<JsonSchemaException>(''Float 10.1 equals minimum value of 10.1 and exclusive minimum is true.'',\r\n      () =>\r\n      {\r\n        JsonSchema schema = new JsonSchema();\r\n        schema.Minimum = 10.1;\r\n        schema.ExclusiveMinimum = true;\r\n\r\n        JValue v = new JValue(10.1);\r\n        v.Validate(schema);\r\n      })", span="286-295"];
m8_192 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.ExclusiveMinimum_Float()", file="JsonSerializer.cs", label="Exit Newtonsoft.Json.Tests.Schema.ExtensionsTests.ExclusiveMinimum_Float()", span="284-284"];
m8_140 [cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.DeserializeBasicUnion_MismatchedFieldCount()", file="JsonSerializer.cs", label="Entry Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.DeserializeBasicUnion_MismatchedFieldCount()", span="252-252"];
m8_74 [cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.DeserializeBasicUnion()", file="JsonSerializer.cs", label="Exit Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.DeserializeBasicUnion()", span="148-148"];
m8_47 [cluster="Newtonsoft.Json.Linq.JToken.Validate(Newtonsoft.Json.Schema.JsonSchema)", file="JsonSerializer.cs", label="Entry Newtonsoft.Json.Linq.JToken.Validate(Newtonsoft.Json.Schema.JsonSchema)", span="75-75"];
m8_141 [cluster="Newtonsoft.Json.Tests.Converters.DiscriminatedUnionConverterTests.DeserializeBasicUnion_MismatchedFieldCount()", file="JsonSerializer.cs", label="ExceptionAssert.Throws<JsonSerializationException>(() => JsonConvert.DeserializeObject<Currency>(@''{''''Case'''':''''AUD'''',''''Fields'''':[1]}''), ''The number of field values does not match the number of properties definied by union 'AUD'. Path '', line 1, position 27.'')", span="254-254"];
m8_216 [cluster="Unk.IsTrue", file="JsonSerializer.cs", label="Entry Unk.IsTrue", span=""];
m8_255 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.Enum_Properties()", file="JsonSerializer.cs", label="Entry Newtonsoft.Json.Tests.Schema.ExtensionsTests.Enum_Properties()", span="382-382"];
m8_261 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.Enum_Properties()", file="JsonSerializer.cs", label="Assert.AreEqual(0, errorMessages.Count)", span="405-405"];
m8_264 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.Enum_Properties()", file="JsonSerializer.cs", label="Assert.AreEqual(1, errorMessages.Count)", span="411-411"];
m8_260 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.Enum_Properties()", file="JsonSerializer.cs", label="Assert.IsTrue(o.IsValid(schema, out errorMessages))", span="404-404"];
m8_263 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.Enum_Properties()", file="JsonSerializer.cs", label="Assert.IsFalse(o.IsValid(schema, out errorMessages))", span="410-410"];
m8_257 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.Enum_Properties()", file="JsonSerializer.cs", label="schema.Properties = new Dictionary<string, JsonSchema>\r\n        {\r\n          {\r\n            ''bar'',\r\n            new JsonSchema\r\n            {\r\n              Enum = new List<JToken>\r\n                {\r\n                  new JValue(1),\r\n                  new JValue(2)\r\n                }\r\n            }\r\n          }\r\n        }", span="385-398"];
m8_262 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.Enum_Properties()", file="JsonSerializer.cs", label="o = new JObject(\r\n        new JProperty(''bar'', 3)\r\n        )", span="407-409"];
m8_256 [cluster="Newtonsoft.Json.Tests.Schema.ExtensionsTests.Enum_Properties()", file="JsonSerializer.cs", label="JsonSchema schema = new JsonSchema()", span="384-384"];
}
